Class: Package.Object

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0xaa7cd18 0x78e71e30a0

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: AndroidDeviceProfileMatchingRules.Object
	ProfileMatch[] MatchProfile;//[Offset: 0x28, Size: 0x10] 0x78e6b17860

--------------------------------
Class: ProfileMatch
	FString Profile;//[Offset: 0x0, Size: 0x10] 0x78e6836b00
	ProfileMatchItem[] Match;//[Offset: 0x10, Size: 0x10] 0x78e6b177c0

--------------------------------
Class: ProfileMatchItem
	byte SourceType;//[Offset: 0x0, Size: 0x1] 0x78e6836b80
	byte CompareType;//[Offset: 0x1, Size: 0x1] 0x78e6836c00
	FString MatchString;//[Offset: 0x8, Size: 0x10] 0x78e6836c80

--------------------------------
Class: AndroidJavaSurfaceViewDevices.Object
	JavaSurfaceViewDevice[] SurfaceViewDevices;//[Offset: 0x28, Size: 0x10] 0x78e6b17680

--------------------------------
Class: JavaSurfaceViewDevice
	FString Manufacturer;//[Offset: 0x0, Size: 0x10] 0x78e6836a00
	FString Model;//[Offset: 0x10, Size: 0x10] 0x78e6836a80

--------------------------------
Class: GCObjectReferencer.Object

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: CrashSightSettings.DeveloperSettings.Object
	FString Native_AppID_Android;//[Offset: 0x38, Size: 0x10] 0x78dc0bcb00
	FString Native_AppKey_Android;//[Offset: 0x48, Size: 0x10] 0x78dc0bcb80
	FString Native_CrashServerUrl_Android;//[Offset: 0x58, Size: 0x10] 0x78dc0bcc00
	FString Native_AppID_IOS;//[Offset: 0x68, Size: 0x10] 0x78dc0bcc80
	FString Native_AppKey_IOS;//[Offset: 0x78, Size: 0x10] 0x78dc0bcd00
	FString Native_CrashServerUrl_IOS;//[Offset: 0x88, Size: 0x10] 0x78dc0bcd80
	FString Native_AppID_PC;//[Offset: 0x98, Size: 0x10] 0x78dc0bce00
	FString Native_AppKey_PC;//[Offset: 0xa8, Size: 0x10] 0x78dc0bce80
	FString Native_CrashServerUrl_PC;//[Offset: 0xb8, Size: 0x10] 0x78dc0bcf00
	FString Oversea_AppID_Android;//[Offset: 0xc8, Size: 0x10] 0x78dc0bcf80
	FString Oversea_AppKey_Android;//[Offset: 0xd8, Size: 0x10] 0x78dc0bd000
	FString Oversea_CrashServerUrl_Android;//[Offset: 0xe8, Size: 0x10] 0x78dc0bd080
	FString Oversea_AppID_IOS;//[Offset: 0xf8, Size: 0x10] 0x78dc0bd100
	FString Oversea_AppKey_IOS;//[Offset: 0x108, Size: 0x10] 0x78dc0bd180
	FString Oversea_CrashServerUrl_IOS;//[Offset: 0x118, Size: 0x10] 0x78dc0bd200
	FString Oversea_AppID_PC;//[Offset: 0x128, Size: 0x10] 0x78dc0bd280
	FString Oversea_AppKey_PC;//[Offset: 0x138, Size: 0x10] 0x78dc0bd300
	FString Oversea_CrashServerUrl_PC;//[Offset: 0x148, Size: 0x10] 0x78dc0bd380
	FString Native_SymbolUrl;//[Offset: 0x158, Size: 0x10] 0x78dc0bd400
	FString Oversea_SymbolUrl;//[Offset: 0x168, Size: 0x10] 0x78dc0bd480
	FString Channel;//[Offset: 0x178, Size: 0x10] 0x78dc0bd500
	bool IsOnlineBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1] 0x78dc0bd580
	bool bZipLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 0x1] 0x78dc0bd600

--------------------------------
Class: AssetRegistryImpl.Object

--------------------------------
Class: DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: SparseDelegateFunction.DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: TextBuffer.Object

--------------------------------
Class: DynamicClass.Class.Struct.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Interface.Object

--------------------------------
Class: LinkerPlaceholderClass.Class.Struct.Field.Object

--------------------------------
Class: LinkerPlaceholderExportObject.Object

--------------------------------
Class: LinkerPlaceholderFunction.Function.Struct.Field.Object

--------------------------------
Class: MetaData.Object

--------------------------------
Class: ObjectRedirector.Object

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: EnumProperty.Property.Field.Object

--------------------------------
Class: ArrayProperty.Property.Field.Object

--------------------------------
Class: ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: BoolProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: ByteProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: ClassProperty.ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: DelegateProperty.Property.Field.Object

--------------------------------
Class: DoubleProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: IntProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: Int8Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: InterfaceProperty.Property.Field.Object

--------------------------------
Class: LazyObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: MapProperty.Property.Field.Object

--------------------------------
Class: MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: MulticastInlineDelegateProperty.MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: MulticastSparseDelegateProperty.MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: NameProperty.Property.Field.Object

--------------------------------
Class: SetProperty.Property.Field.Object

--------------------------------
Class: SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: SoftClassProperty.SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: StrProperty.Property.Field.Object

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: UInt16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt32Property.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: WeakObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: TextProperty.Property.Field.Object

--------------------------------
Class: PropertyWrapper.Object

--------------------------------
Class: MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: MulticastInlineDelegatePropertyWrapper.MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: Model.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30] 0x78d35a5500
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78d35a5580
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x78d35a5600
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1] 0x78d35a5680
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1] 0x78d35a5700
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1] 0x78d35a5780
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1] 0x78d35a5800
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1] 0x78d35a5880
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1] 0x78d35a5900
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x78d35a5980
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x78d35a5a00
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x78d35a5a80
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1] 0x78d35a5b00
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1] 0x78d35a5b80
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1] 0x78d35a5c00
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1] 0x78d35a5c80
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1] 0x78d35a5d00
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1] 0x78d35a5d80
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1] 0x78d35a5e00
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1] 0x78d35a5e80
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1] 0x78d35a5f00
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1] 0x78d35a5f80
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1] 0x78d35a6000
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1] 0x78d35a6080
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1] 0x78d35a6100
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1] 0x78d35a6180
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x78d35a6200
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x78d35a6280
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1] 0x78d35a6300
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 0x1] 0x78d35a4300
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5d, Size: 0x1] 0x78cdd5ee80
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 0x1] 0x78cdd5ef20
	byte RemoteRole;//[Offset: 0x5f, Size: 0x1] 0x78d35a4400
	RepMovement ReplicatedMovement;//[Offset: 0x60, Size: 0x34] 0x78d35a4900
	float InitialLifeSpan;//[Offset: 0x94, Size: 0x4] 0x78d35a4980
	float CustomTimeDilation;//[Offset: 0x98, Size: 0x4] 0x78d35a4a00
	RepAttachment AttachmentReplication;//[Offset: 0xa0, Size: 0x40] 0x78d35a4d80
	Actor* Owner;//[Offset: 0xe0, Size: 0x8] 0x78d35a4e00
	FName NetDriverName;//[Offset: 0xe8, Size: 0x8] 0x78d35a4e80
	byte Role;//[Offset: 0xf0, Size: 0x1] 0x78d35a4f00
	byte NetDormancy;//[Offset: 0xf1, Size: 0x1] 0x78d35a4f80
	enum SpawnCollisionHandlingMethod;//[Offset: 0xf2, Size: 0x1] 0x78cdd5f240
	byte AutoReceiveInput;//[Offset: 0xf3, Size: 0x1] 0x78d35a5080
	int InputPriority;//[Offset: 0xf4, Size: 0x4] 0x78d35a5100
	InputComponent* InputComponent;//[Offset: 0xf8, Size: 0x8] 0x78d35a5180
	float NetCullDistanceSquared;//[Offset: 0x100, Size: 0x4] 0x78d35a5200
	int NetTag;//[Offset: 0x104, Size: 0x4] 0x78d35a5280
	float NetUpdateFrequency;//[Offset: 0x108, Size: 0x4] 0x78d35a3200
	float MinNetUpdateFrequency;//[Offset: 0x10c, Size: 0x4] 0x78d35a3280
	float NetPriority;//[Offset: 0x110, Size: 0x4] 0x78d35a3300
	Pawn* Instigator;//[Offset: 0x118, Size: 0x8] 0x78d35a3380
	Actor*[] Children;//[Offset: 0x120, Size: 0x10] 0x78cdd5f2e0
	SceneComponent* RootComponent;//[Offset: 0x130, Size: 0x8] 0x78d35a3480
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x138, Size: 0x10] 0x78cdd5f380
	FName[] Layers;//[Offset: 0x150, Size: 0x10] 0x78cdd5f420
	ChildActorComponent* ParentComponent;//[Offset: 0x160, Size: 0x8] 0x78d35a3600
	FName[] Tags;//[Offset: 0x170, Size: 0x10] 0x78cdd5f4c0
	delegate OnTakeAnyDamage;//[Offset: 0x180, Size: 0x1] 0x78d35a3700
	delegate OnTakePointDamage;//[Offset: 0x181, Size: 0x1] 0x78d35a3780
	delegate OnTakeRadialDamage;//[Offset: 0x182, Size: 0x1] 0x78d35a3800
	delegate OnActorBeginOverlap;//[Offset: 0x183, Size: 0x1] 0x78d35a3880
	delegate OnActorEndOverlap;//[Offset: 0x184, Size: 0x1] 0x78d35a3900
	delegate OnBeginCursorOver;//[Offset: 0x185, Size: 0x1] 0x78d35a3980
	delegate OnEndCursorOver;//[Offset: 0x186, Size: 0x1] 0x78d35a3a00
	delegate OnClicked;//[Offset: 0x187, Size: 0x1] 0x78d35a3a80
	delegate OnReleased;//[Offset: 0x188, Size: 0x1] 0x78d35a3b00
	delegate OnInputTouchBegin;//[Offset: 0x189, Size: 0x1] 0x78d35a3b80
	delegate OnInputTouchEnd;//[Offset: 0x18a, Size: 0x1] 0x78d35a3c00
	delegate OnInputTouchEnter;//[Offset: 0x18b, Size: 0x1] 0x78d35a3c80
	delegate OnInputTouchLeave;//[Offset: 0x18c, Size: 0x1] 0x78d35a3d00
	delegate OnActorHit;//[Offset: 0x18d, Size: 0x1] 0x78d35a3d80
	delegate OnDestroyed;//[Offset: 0x18e, Size: 0x1] 0x78d35a3e00
	delegate OnEndPlay;//[Offset: 0x18f, Size: 0x1] 0x78d35a3e80
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f0, Size: 0x10] 0x78cdd5f560
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x200, Size: 0x10] 0x78cdd5f600
	bool WasRecentlyRendered(float Tolerance);// 0xc79882c 0x78cd9ab300
	void UserConstructionScript();// 0xaa7cd18 0x78cd9ab3e0
	void TearOff();// 0xc79d9d0 0x78cd9ab4c0
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0xc799ca8 0x78cd9ab5a0
	void SetTickGroup(byte NewTickGroup);// 0xc7988e0 0x78cd9ab680
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0xc799628 0x78cd9ab760
	void SetReplicates(bool bInReplicates);// 0xc79d854 0x78cd9ab840
	void SetReplicateMovement(bool bInReplicateMovement);// 0xc79d79c 0x78cd9ab920
	void SetOwner(Actor* NewOwner);// 0xc798f90 0x78cd9aba00
	void SetNetDormancy(byte NewDormancy);// 0xc798e18 0x78cd9abae0
	void SetLifeSpan(float InLifespan);// 0xc79925c 0x78cd9abbc0
	void SetAutoDestroyWhenFinished(bool bVal);// 0xc79d920 0x78cd9abca0
	void SetActorTickInterval(float TickInterval);// 0xc799090 0x78cd9abd80
	void SetActorTickEnabled(bool bEnabled);// 0xc799170 0x78cd9abe60
	void SetActorScale3D(Vector NewScale3D);// 0xc79c5e0 0x78cd9abf40
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0xc79ad04 0x78cd9ac020
	void SetActorHiddenInGame(bool bNewHidden);// 0xc79ac14 0x78cd9ac100
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0xc79ab64 0x78cd9ac1e0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xc799710 0x78cd9ac2c0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xc7997c0 0x78cd9ac3a0
	void ReceiveTick(float DeltaSeconds);// 0xaa7cd18 0x78cd9ac480
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0xaa7cd18 0x78cd9ac560
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0xaa7cd18 0x78cd9ac640
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult hit);// 0xaa7cd18 0x78cd9ac720
	void ReceiveEndPlay(byte EndPlayReason);// 0xaa7cd18 0x78cd9ac800
	void ReceiveDestroyed();// 0xaa7cd18 0x78cd9ac8e0
	void ReceiveBeginPlay();// 0xaa7cd18 0x78cd9ac9c0
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xaa7cd18 0x78cd9a90e0
	void ReceiveActorOnReleased(Key ButtonReleased);// 0xaa7cd18 0x78cd9a91c0
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0xaa7cd18 0x78cd9a92a0
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0xaa7cd18 0x78cd9a9380
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0xaa7cd18 0x78cd9a9460
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0xaa7cd18 0x78cd9a9540
	void ReceiveActorOnClicked(Key ButtonPressed);// 0xaa7cd18 0x78cd9a9620
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0xaa7cd18 0x78cd9a9700
	void ReceiveActorEndCursorOver();// 0xaa7cd18 0x78cd9a97e0
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0xaa7cd18 0x78cd9a98c0
	void ReceiveActorBeginCursorOver();// 0xaa7cd18 0x78cd9a99a0
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0xc7986cc 0x78cd9a9a80
	void OnRep_ReplicateMovement();// 0xc79d9ec 0x78cd9a9b60
	void OnRep_ReplicatedMovement();// 0xc799040 0x78cd9a9c40
	void OnRep_Owner();// 0xc79d904 0x78cd9a9d20
	void OnRep_Instigator();// 0xc79d72c 0x78cd9a9e00
	void OnRep_AttachmentReplication();// 0xc79d748 0x78cd9a9ee0
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0xc797f9c 0x78cd9a9fc0
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* parent);// 0xc799578 0x78cd9aa0a0
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0xc798b2c 0x78cd9aa180
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc79b84c 0x78cd9aa260
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0xc79c894 0x78cd9aa340
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc79adac 0x78cd9aa420
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc79af9c 0x78cd9aa500
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc79b14c 0x78cd9aa5e0
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc79c688 0x78cd9aa6c0
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc79cd90 0x78cd9aa7a0
	void K2_OnReset();// 0xaa7cd18 0x78cd9aa880
	void K2_OnEndViewTarget(PlayerController* PC);// 0xaa7cd18 0x78cd9aa960
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0xaa7cd18 0x78cd9aaa40
	SceneComponent* K2_GetRootComponent();// 0xc79c9dc 0x78cd9aab20
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0xc7983f8 0x78cd9aac00
	Rotator K2_GetActorRotation();// 0xc79cc98 0x78cd9aace0
	Vector K2_GetActorLocation();// 0xc79cf4c 0x78cd9a7400
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0xc799ab8 0x78cd9a74e0
	void K2_DestroyComponent(ActorComponent* Component);// 0xc79a508 0x78cd9a75c0
	void K2_DestroyActor();// 0xc79ab28 0x78cd9a76a0
	void K2_AttachToComponent(SceneComponent* parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xc79a150 0x78cd9a7780
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xc799d98 0x78cd9a7860
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0xc799fc0 0x78cd9a7940
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0xc79a378 0x78cd9a7a20
	void K2_AddActorWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc79ba48 0x78cd9a7b00
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc79bc38 0x78cd9a7be0
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc79be28 0x78cd9a7cc0
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc79bfd8 0x78cd9a7da0
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc79b2fc 0x78cd9a7e80
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc79b4ec 0x78cd9a7f60
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc79b69c 0x78cd9a8040
	bool IsOverlappingActor(const Actor* Other);// 0xc798ec0 0x78cd9a8120
	bool IsChildActor();// 0xc798dcc 0x78cd9a8200
	bool IsActorTickEnabled();// 0xc799138 0x78cd9a82e0
	bool IsActorBeingDestroyed();// 0xc799524 0x78cd9a83c0
	bool HasAuthority();// 0xc79ab04 0x78cd9a84a0
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0xc79c2e8 0x78cd9a8580
	Vector GetVelocity();// 0xc79c99c 0x78cd9a8660
	Transform GetTransform();// 0xc79cfa4 0x78cd9a8740
	bool GetTickableWhenPaused();// 0xc7996d8 0x78cd9a8820
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0xc79c448 0x78cd9a8900
	byte GetRemoteRole();// 0xc79d764 0x78cd9a89e0
	ChildActorComponent* GetParentComponent();// 0xc798c5c 0x78cd9a8ac0
	Actor* GetParentActor();// 0xc798c28 0x78cd9a8ba0
	Actor* GetOwner();// 0xc798f74 0x78cd9a8c80
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0xc79930c 0x78cd9a8d60
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0xc7993f0 0x78cd9a8e40
	byte GetLocalRole();// 0xc79d780 0x78cd9a8f20
	float GetLifeSpan();// 0xc799220 0x78cd9a9000
	Controller* GetInstigatorController();// 0xc79cfe0 0x78cd9a5720
	Pawn* GetInstigator();// 0xc79d014 0x78cd9a5800
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0xc79d048 0x78cd9a58e0
	float GetInputAxisValue(const FName InputAxisName);// 0xc79d51c 0x78cd9a59c0
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0xc79d2b4 0x78cd9a5aa0
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0xc79c188 0x78cd9a5b80
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0xc79c398 0x78cd9a5c60
	float GetGameTimeSinceCreation();// 0xc799544 0x78cd9a5d40
	float GetDotProductTo(const Actor* OtherActor);// 0xc79c238 0x78cd9a5e20
	float GetDistanceTo(const Actor* OtherActor);// 0xc79c4f8 0x78cd9a5f00
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0xc798290 0x78cd9a5fe0
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0xc798170 0x78cd9a60c0
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0xc798518 0x78cd9a61a0
	FName GetAttachParentSocketName();// 0xc798ac4 0x78cd9a6280
	Actor* GetAttachParentActor();// 0xc798af8 0x78cd9a6360
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0xc798988 0x78cd9a6440
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0xc798c90 0x78cd9a6520
	Vector GetActorUpVector();// 0xc79cbf0 0x78cd9a6600
	float GetActorTimeDilation();// 0xc7999d0 0x78cd9a66e0
	float GetActorTickInterval();// 0xc79905c 0x78cd9a67c0
	Vector GetActorScale3D();// 0xc79c5a8 0x78cd9a68a0
	Vector GetActorRightVector();// 0xc79cb9c 0x78cd9a6980
	Vector GetActorRelativeScale3D();// 0xc79accc 0x78cd9a6a60
	Vector GetActorForwardVector();// 0xc79cc44 0x78cd9a6b40
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0xc7985c8 0x78cd9a6c20
	bool GetActorEnableCollision();// 0xc79ab44 0x78cd9a6d00
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0xc79c9f8 0x78cd9a6de0
	void ForceNetUpdate();// 0xc798810 0x78cd9a6ec0
	void FlushNetDormancy();// 0xc798e04 0x78cd9a6fa0
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0xc79a5b0 0x78cd9a7080
	void EnableInput(PlayerController* PlayerController);// 0xc79d67c 0x78cd9a7160
	void DisableInput(PlayerController* PlayerController);// 0xc79d5cc 0x78cd9a7240
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0xc799bf8 0x78cd9a7320
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xc799870 0x78cd9a3a40
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xc799920 0x78cd9a3b20
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0xc79a720 0x78cd9a3c00
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext, bool bDeferredFinish);// 0xc79a8ec 0x78cd9a3ce0
	bool ActorHasTag(FName Tag);// 0xc799a04 0x78cd9a3dc0

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1] 0x78d3562b80
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1] 0x78d3562c00
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x78d3562c80
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1] 0x78d3562d00
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1] 0x78d3562d80
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1] 0x78d3562e00
	float TickInterval;//[Offset: 0xc, Size: 0x4] 0x78d3562e80

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc] 0x78d35a4480
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc] 0x78d35a4500
	Vector Location;//[Offset: 0x18, Size: 0xc] 0x78d35a4580
	Rotator Rotation;//[Offset: 0x24, Size: 0xc] 0x78d35a4600
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78d35a4680
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x78d35a4700
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1] 0x78cdd5f060
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1] 0x78cdd5efc0
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1] 0x78cdd5f100

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4] 0x78e6830100
	float Y;//[Offset: 0x4, Size: 0x4] 0x78e6830180
	float Z;//[Offset: 0x8, Size: 0x4] 0x78e6830200

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4] 0x78e6831c00
	float Yaw;//[Offset: 0x4, Size: 0x4] 0x78e6831c80
	float Roll;//[Offset: 0x8, Size: 0x4] 0x78e6831d00

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8] 0x78d35a4a80
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc] 0x78d35a4b00
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc] 0x78d35a4b80
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc] 0x78d35a4c00
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8] 0x78d35a4c80
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8] 0x78d35a4d00

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xc0, Size: 0x8] 0x78d35abc80
	SceneComponent* AttachParent;//[Offset: 0xc8, Size: 0x8] 0x78d35abd00
	FName AttachSocketName;//[Offset: 0xd0, Size: 0x8] 0x78d35abd80
	SceneComponent*[] AttachChildren;//[Offset: 0xd8, Size: 0x10] 0x78cdd5e520
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe8, Size: 0x10] 0x78cdd5e5c0
	Vector RelativeLocation;//[Offset: 0x124, Size: 0xc] 0x78d35abf00
	Rotator RelativeRotation;//[Offset: 0x130, Size: 0xc] 0x78d35abf80
	Vector RelativeScale3D;//[Offset: 0x13c, Size: 0xc] 0x78d35ac000
	Vector ComponentVelocity;//[Offset: 0x148, Size: 0xc] 0x78d35ac080
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x154, Size: 0x1] 0x78d35ac100
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x154, Size: 0x1] 0x78d35ac180
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x154, Size: 0x1] 0x78d35ac200
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x154, Size: 0x1] 0x78d35ac280
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x154, Size: 0x1] 0x78d35ac300
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x154, Size: 0x1] 0x78d35ac380
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x154, Size: 0x1] 0x78d35ac400
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1] 0x78d35ac480
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x155, Size: 0x1] 0x78d35ac500
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x155, Size: 0x1] 0x78d35ac580
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x155, Size: 0x1] 0x78d35ac600
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x155, Size: 0x1] 0x78d35aa580
	byte Mobility;//[Offset: 0x157, Size: 0x1] 0x78d35aa600
	byte DetailMode;//[Offset: 0x158, Size: 0x1] 0x78d35aa680
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x159, Size: 0x1] 0x78d35aa700
	void ToggleVisibility(bool bPropagateToChildren);// 0xc9cea9c 0x78d3600da0
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0xc9cf44c 0x78d3600e80
	void SetWorldScale3D(Vector NewScale);// 0xc9d082c 0x78d3600f60
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0xc9ceb64 0x78d3601040
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0xc9d1c5c 0x78d3601120
	void SetRelativeScale3D(Vector NewScale3D);// 0xc9d14e4 0x78d3601200
	void SetMobility(byte NewMobility);// 0xc9ce384 0x78d36012e0
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0xc9ce9a0 0x78d36013c0
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0xc9ce62c 0x78d36014a0
	void ResetRelativeTransform();// 0xc9d158c 0x78d3601580
	void OnRep_Visibility(bool OldValue);// 0xc9d1b5c 0x78d3601660
	void OnRep_Transform();// 0xc9d1c48 0x78d3601740
	void OnRep_AttachSocketName();// 0xc9d1c0c 0x78d3601820
	void OnRep_AttachParent();// 0xc9d1c34 0x78d3601900
	void OnRep_AttachChildren();// 0xc9d1c20 0x78d36019e0
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9d063c 0x78d3601ac0
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9d08d4 0x78d3601ba0
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9ce434 0x78d3601c80
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9d0a84 0x78cd9ae780
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9d160c 0x78cd9ae860
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9d17fc 0x78cd9ae940
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9ce774 0x78cd9aea20
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9d19ac 0x78cd9aeb00
	Transform K2_GetComponentToWorld();// 0xc9cfde8 0x78cd9aebe0
	Vector K2_GetComponentScale();// 0xc9cfe54 0x78cd9aecc0
	Rotator K2_GetComponentRotation();// 0xc9cfe8c 0x78cd9aeda0
	Vector K2_GetComponentLocation();// 0xc9cfec4 0x78cd9aee80
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0xc9cf1b8 0x78cd9aef60
	bool K2_AttachToComponent(SceneComponent* parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xc9cf548 0x78cd9af040
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0xc9cf77c 0x78cd9af120
	void K2_AddWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9cfefc 0x78cd9af200
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9d00ec 0x78cd9af2e0
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9d02dc 0x78cd9af3c0
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9d048c 0x78cd9af4a0
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9d1184 0x78cd9af580
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9d1334 0x78cd9af660
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9d0c34 0x78cd9af740
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9d0e24 0x78cd9af820
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xc9d0fd4 0x78cd9af900
	bool IsVisible();// 0xc9cec60 0x78cd9af9e0
	bool IsSimulatingPhysics(FName BoneName);// 0xc9cfc84 0x78cd9afac0
	bool IsAnySimulatingPhysics();// 0xc9cfc44 0x78cd9afba0
	Vector GetUpVector();// 0xc9cfd78 0x78cd9afc80
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0xc9cefd0 0x78cd9afd60
	Rotator GetSocketRotation(FName InSocketName);// 0xc9cee58 0x78cd9afe40
	Quat GetSocketQuaternion(FName InSocketName);// 0xc9ced9c 0x78cd9aff20
	Vector GetSocketLocation(FName InSocketName);// 0xc9cef14 0x78cd9acaa0
	bool GetShouldUpdatePhysicsVolume();// 0xc9d1d0c 0x78cd9acb80
	Vector GetRightVector();// 0xc9cfd40 0x78cd9acc60
	Transform GetRelativeTransform();// 0xc9d15a0 0x78cd9acd40
	PhysicsVolume* GetPhysicsVolume();// 0xc9ce96c 0x78cd9ace20
	void GetParentComponents(out SceneComponent*[] Parents);// 0xc9cfb28 0x78cd9acf00
	int GetNumChildrenComponents();// 0xc9cfaf4 0x78cd9acfe0
	Vector GetForwardVector();// 0xc9cfdb0 0x78cd9ad0c0
	Vector GetComponentVelocity();// 0xc9ceca0 0x78cd9ad1a0
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0xc9cf918 0x78cd9ad280
	SceneComponent* GetChildComponent(int ChildIndex);// 0xc9cfa44 0x78cd9ad360
	FName GetAttachSocketName();// 0xc9cfc0c 0x78cd9ad440
	SceneComponent* GetAttachParent();// 0xc9cfc28 0x78cd9ad520
	FName[] GetAllSocketNames();// 0xc9cf0e4 0x78cd9ad600
	bool DoesSocketExist(FName InSocketName);// 0xc9cece0 0x78cd9ad6e0
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0xc9cf34c 0x78cd9ad7c0

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30] 0x78d3562f00
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10] 0x78cdd55560
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 0x10] 0x78cdd55600
	int UCSSerializationIndex;//[Offset: 0x8c, Size: 0x4] 0x78d3563080
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1] 0x78d3563100
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1] 0x78d3563180
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x91, Size: 0x1] 0x78d3561100
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x92, Size: 0x1] 0x78d3561180
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x92, Size: 0x1] 0x78d3561200
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x92, Size: 0x1] 0x78d3561280
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x92, Size: 0x1] 0x78d3561300
	enum CreationMethod;//[Offset: 0x94, Size: 0x1] 0x78cdd556a0
	delegate OnComponentActivated;//[Offset: 0x95, Size: 0x1] 0x78d3561400
	delegate OnComponentDeactivated;//[Offset: 0x96, Size: 0x1] 0x78d3561480
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x98, Size: 0x10] 0x78cdd557e0
	void ToggleActive();// 0xc7a2a44 0x78cd8e28c0
	void SetTickGroup(byte NewTickGroup);// 0xc7a2440 0x78cd8e29a0
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0xc7a28bc 0x78cd8e2a80
	void SetIsReplicated(bool ShouldReplicate);// 0xc7a280c 0x78cd8e2b60
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0xc7a25c4 0x78cd8e2c40
	void SetComponentTickInterval(float TickInterval);// 0xc7a266c 0x78cd8e2d20
	void SetComponentTickEnabled(bool bEnabled);// 0xc7a2754 0x78cd8e2e00
	void SetAutoActivate(bool bNewAutoActivate);// 0xc7a296c 0x78cd8e2ee0
	void SetActive(bool bNewActive, bool bReset);// 0xc7a2a60 0x78cd8e2fc0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xc7a2180 0x78cd8e30a0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xc7a2230 0x78cd8e3180
	void ReceiveTick(float DeltaSeconds);// 0xaa7cd18 0x78cd8e3260
	void ReceiveEndPlay(byte EndPlayReason);// 0xaa7cd18 0x78cd8e3340
	void ReceiveBeginPlay();// 0xaa7cd18 0x78cd8e3420
	void OnRep_IsActive();// 0xc7a2d04 0x78cd8e3500
	void K2_DestroyComponent(Object* Object);// 0xc7a24e8 0x78cd8e35e0
	bool IsComponentTickEnabled();// 0xc7a2714 0x78cd8e36c0
	bool IsBeingDestroyed();// 0xc7a2d20 0x78cd8e37a0
	bool IsActive();// 0xc7a2a24 0x78cd8e3880
	Actor* GetOwner();// 0xc7a2ce8 0x78cd8e3960
	float GetComponentTickInterval();// 0xc7a2590 0x78cd8e0080
	void Deactivate();// 0xc7a2b60 0x78cd8e0160
	bool ComponentHasTag(FName Tag);// 0xc7a2c34 0x78cd8e0240
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xc7a22e0 0x78cd8e0320
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xc7a2390 0x78cd8e0400
	void Activate(bool bReset);// 0xc7a2b7c 0x78cd8e04e0

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x258, Size: 0x4] 0x78d730f100
	int Priority;//[Offset: 0x25c, Size: 0x4] 0x78d730f180
	float FluidFriction;//[Offset: 0x260, Size: 0x4] 0x78d730f200
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1] 0x78d730f280
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1] 0x78d730f300

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x220, Size: 0x1] 0x78dc001800
	Color BrushColor;//[Offset: 0x224, Size: 0x4] 0x78dc001880
	int PolyFlags;//[Offset: 0x228, Size: 0x4] 0x78dc001900
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 0x1] 0x78dc001980
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 0x1] 0x78dc001a00
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22c, Size: 0x1] 0x78dc001a80
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22c, Size: 0x1] 0x78dc001b00
	Model* Brush;//[Offset: 0x230, Size: 0x8] 0x78dc001b80
	BrushComponent* BrushComponent;//[Offset: 0x238, Size: 0x8] 0x78dc001c00
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x78dc001c80
	GeomSelection[] SavedSelections;//[Offset: 0x248, Size: 0x10] 0x78dbff2860

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1] 0x78e6831200
	byte G;//[Offset: 0x1, Size: 0x1] 0x78e6831280
	byte R;//[Offset: 0x2, Size: 0x1] 0x78e6831300
	byte A;//[Offset: 0x3, Size: 0x1] 0x78e6831380

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x470, Size: 0x8] 0x78d72e7880
	BodySetup* BrushBodySetup;//[Offset: 0x478, Size: 0x8] 0x78d72e7900

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x210, Size: 0x4] 0x78dbf9e000
	float LDMaxDrawDistance;//[Offset: 0x214, Size: 0x4] 0x78dbf9e080
	float CachedMaxDrawDistance;//[Offset: 0x218, Size: 0x4] 0x78dbf9e100
	byte DepthPriorityGroup;//[Offset: 0x21c, Size: 0x1] 0x78dbf9e180
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x21d, Size: 0x1] 0x78dbf9e200
	byte IndirectLightingCacheQuality;//[Offset: 0x21e, Size: 0x1] 0x78dbf9e280
	enum LightmapType;//[Offset: 0x21f, Size: 0x1] 0x78dbf27040
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1] 0x78dbf9e380
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1] 0x78dbf9e400
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x220, Size: 0x1] 0x78dbf9e480
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x220, Size: 0x1] 0x78dbf9e500
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x221, Size: 0x1] 0x78dbf9e580
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x221, Size: 0x1] 0x78dbf9e600
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x221, Size: 0x1] 0x78dbf9e680
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x221, Size: 0x1] 0x78dbf9e700
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x221, Size: 0x1] 0x78dbf9c680
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x221, Size: 0x1] 0x78dbf9c700
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x221, Size: 0x1] 0x78dbf9c780
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x221, Size: 0x1] 0x78dbf9c800
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x222, Size: 0x1] 0x78dbf9c880
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x222, Size: 0x1] 0x78dbf9c900
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x222, Size: 0x1] 0x78dbf9c980
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x222, Size: 0x1] 0x78dbf9ca00
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x222, Size: 0x1] 0x78dbf9ca80
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x222, Size: 0x1] 0x78dbf9cb00
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x222, Size: 0x1] 0x78dbf9cb80
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x222, Size: 0x1] 0x78dbf9cc00
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x223, Size: 0x1] 0x78dbf9cc80
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x223, Size: 0x1] 0x78dbf9cd00
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x223, Size: 0x1] 0x78dbf9cd80
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x223, Size: 0x1] 0x78dbf9ce00
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x223, Size: 0x1] 0x78dbf9ce80
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x223, Size: 0x1] 0x78dbf9cf00
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x223, Size: 0x1] 0x78dbf9cf80
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x223, Size: 0x1] 0x78dbf9d000
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1] 0x78dbf9d080
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 0x1] 0x78dbf9d100
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 0x1] 0x78dbf9d180
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x224, Size: 0x1] 0x78dbf9d200
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x224, Size: 0x1] 0x78dbf9d280
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x224, Size: 0x1] 0x78dbf9d300
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x224, Size: 0x1] 0x78dbf9d380
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x224, Size: 0x1] 0x78dbf9d400
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x225, Size: 0x1] 0x78dbf9d480
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x225, Size: 0x1] 0x78dbf9d500
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x225, Size: 0x1] 0x78dbf9d580
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x225, Size: 0x1] 0x78dbf9d600
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x225, Size: 0x1] 0x78dbf9d680
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x225, Size: 0x1] 0x78dbf9b600
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x225, Size: 0x1] 0x78dbf9b680
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x225, Size: 0x1] 0x78dbf9b700
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x226, Size: 0x1] 0x78dbf9b780
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x226, Size: 0x1] 0x78dbf9b800
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x226, Size: 0x1] 0x78dbf9b880
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x226, Size: 0x1] 0x78dbf9b900
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x226, Size: 0x1] 0x78dbf9b980
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x226, Size: 0x1] 0x78dbf9ba00
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x226, Size: 0x1] 0x78dbf9ba80
	byte bHasCustomNavigableGeometry;//[Offset: 0x227, Size: 0x1] 0x78dbf9bb00
	byte CanCharacterStepUpOn;//[Offset: 0x229, Size: 0x1] 0x78dbf9bb80
	LightingChannels LightingChannels;//[Offset: 0x22a, Size: 0x1] 0x78dbf9bc00
	enum CustomDepthStencilWriteMask;//[Offset: 0x22b, Size: 0x1] 0x78dbf270e0
	int CustomDepthStencilValue;//[Offset: 0x22c, Size: 0x4] 0x78dbf9bd00
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x230, Size: 0x10] 0x78dbf9bd80
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x240, Size: 0x10] 0x78dbf9be00
	int TranslucencySortPriority;//[Offset: 0x258, Size: 0x4] 0x78dbf9be80
	int BasePassSortPriority;//[Offset: 0x25c, Size: 0x4] 0x78dbf9bf00
	int VisibilityId;//[Offset: 0x260, Size: 0x4] 0x78dbf9bf80
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x268, Size: 0x10] 0x78dbf27180
	int8 VirtualTextureLodBias;//[Offset: 0x278, Size: 0x1] 0x78dbf9c080
	int8 VirtualTextureCullMips;//[Offset: 0x279, Size: 0x1] 0x78dbf9c100
	int8 VirtualTextureMinCoverage;//[Offset: 0x27a, Size: 0x1] 0x78dbf9c180
	enum VirtualTextureRenderPassType;//[Offset: 0x27b, Size: 0x1] 0x78dbf27220
	float LpvBiasMultiplier;//[Offset: 0x280, Size: 0x4] 0x78dbf9c280
	float BoundsScale;//[Offset: 0x28c, Size: 0x4] 0x78dbf9c300
	Actor*[] MoveIgnoreActors;//[Offset: 0x2a0, Size: 0x10] 0x78dbf272c0
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2b0, Size: 0x10] 0x78dbf27360
	BodyInstance BodyInstance;//[Offset: 0x2e8, Size: 0x150] 0x78dbf9c480
	delegate OnComponentHit;//[Offset: 0x438, Size: 0x1] 0x78dbf9c500
	delegate OnComponentBeginOverlap;//[Offset: 0x439, Size: 0x1] 0x78dbf9c580
	delegate OnComponentEndOverlap;//[Offset: 0x43a, Size: 0x1] 0x78dbf9c600
	delegate OnComponentWake;//[Offset: 0x43b, Size: 0x1] 0x78dbf9a580
	delegate OnComponentSleep;//[Offset: 0x43c, Size: 0x1] 0x78dbf9a600
	delegate OnBeginCursorOver;//[Offset: 0x43e, Size: 0x1] 0x78dbf9a680
	delegate OnEndCursorOver;//[Offset: 0x43f, Size: 0x1] 0x78dbf9a700
	delegate OnClicked;//[Offset: 0x440, Size: 0x1] 0x78dbf9a780
	delegate OnReleased;//[Offset: 0x441, Size: 0x1] 0x78dbf9a800
	delegate OnInputTouchBegin;//[Offset: 0x442, Size: 0x1] 0x78dbf9a880
	delegate OnInputTouchEnd;//[Offset: 0x443, Size: 0x1] 0x78dbf9a900
	delegate OnInputTouchEnter;//[Offset: 0x444, Size: 0x1] 0x78dbf9a980
	delegate OnInputTouchLeave;//[Offset: 0x445, Size: 0x1] 0x78dbf9aa00
	bool bEnableOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x446, Size: 0x1] 0x78dbf9aa80
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x468, Size: 0x8] 0x78dbf9ab00
	bool WasRecentlyRendered(float Tolerance);// 0xc9b1ba0 0x78d360fd60
	void WakeRigidBody(FName BoneName);// 0xc9ae030 0x78d360fe40
	void WakeAllRigidBodies();// 0xc9abdb0 0x78d360ff20
	void UnlockEnableOutline();// 0xc9ac38c 0x78d360caa0
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0xc9b044c 0x78d360cb80
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0xc9ab434 0x78d360cc60
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0xc9ad958 0x78d360cd40
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0xc9ada00 0x78d360ce20
	void SetSimulatePhysics(bool bSimulate);// 0xc9b0394 0x78d360cf00
	void SetRenderInMainPass(bool bValue);// 0xc9ac500 0x78d360cfe0
	void SetRenderCustomDepth(bool bValue);// 0xc9ac700 0x78d360d0c0
	void SetReceivesDecals(bool bNewReceivesDecals);// 0xc9ad800 0x78d360d1a0
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0xc9ab0e0 0x78d360d280
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xc9ae4d4 0x78d360d360
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xc9ae610 0x78d360d440
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xc9ae75c 0x78d360d520
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0xc9aef5c 0x78d360d600
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xc9aea04 0x78d360d6e0
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xc9ae8a8 0x78d360d7c0
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xc9aeb48 0x78d360d8a0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0xc9ade20 0x78d360d980
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0xc9add70 0x78d360da60
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0xc9aded0 0x78d360db40
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0xc9b0964 0x78d360dc20
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0xc9b0a5c 0x78d360dd00
	void SetMassScale(FName BoneName, float InMassScale);// 0xc9ab9e4 0x78d360dde0
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0xc9ab72c 0x78d360dec0
	void SetLinearDamping(float InDamping);// 0xc9abc08 0x78d360dfa0
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0xc9b1c54 0x78d360e080
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0xc9adb60 0x78d360e160
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0xc9b1d9c 0x78d360e240
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0xc9adab0 0x78d360e320
	void SetEnableOutline(bool NewValue);// 0xc9ac450 0x78d360e400
	void SetEnableGravity(bool bGravityEnabled);// 0xc9abcf8 0x78d360e4e0
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0xc9b1038 0x78d360e5c0
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0xc9b112c 0x78d360e6a0
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0xc9b121c 0x78d360adc0
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);// 0xc9b1308 0x78d360aea0
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0xc9b13fc 0x78d360af80
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0xc9b14f0 0x78d360b060
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0xc9b15e0 0x78d360b140
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0xc9b16cc 0x78d360b220
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0xc9ac5b0 0x78d360b300
	void SetCustomDepthStencilValue(int Value);// 0xc9ac658 0x78d360b3e0
	void SetCullDistance(float NewCullDistance);// 0xc9ab038 0x78d360b4c0
	void SetConstraintMode(byte ConstraintMode);// 0xc9b02e4 0x78d360b5a0
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0xc9ab240 0x78d360b680
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0xc9ab190 0x78d360b760
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0xc9ad64c 0x78d360b840
	void SetCollisionObjectType(byte Channel);// 0xc9ad568 0x78d360b920
	void SetCollisionEnabled(byte NewType);// 0xc9ad750 0x78d360ba00
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0xc9ae0e0 0x78d360bae0
	void SetCastShadow(bool NewCastShadow);// 0xc9adcc0 0x78d360bbc0
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0xc9adc10 0x78d360bca0
	void SetBoundsScale(float NewBoundsScale);// 0xc9b0c10 0x78d360bd80
	void SetBasePassSortPriority(int NewBasePassSortPriority);// 0xc9ad8b0 0x78d360be60
	void SetAngularDamping(float InDamping);// 0xc9abb1c 0x78d360bf40
	void SetAllUseCCD(bool InUseCCD);// 0xc9ab37c 0x78d360c020
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0xc9aeca4 0x78d360c100
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0xc9abdcc 0x78d360c1e0
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0xc9abed0 0x78d360c2c0
	void SetAllMassScale(float InMassScale);// 0xc9ab87c 0x78d360c3a0
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0xc9ab52c 0x78d360c480
	void PutRigidBodyToSleep(FName BoneName);// 0xc9adf88 0x78d360c560
	void LockEnableOutline(bool LockValue);// 0xc9ac3a0 0x78d360c640
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xc9ace74 0x78d360c720
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xc9ac7b0 0x78d360c800
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xc9ad214 0x78d360c8e0
	bool K2_IsQueryCollisionEnabled();// 0xc9ac138 0x78d360c9c0
	bool K2_IsPhysicsCollisionEnabled();// 0xc9ac0f0 0x78d36090e0
	bool K2_IsCollisionEnabled();// 0xc9ac180 0x78d36091c0
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xc9acb08 0x78d36092a0
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0xc9b0f84 0x78d3609380
	bool IsOverlappingActor(const Actor* Other);// 0xc9b0ed0 0x78d3609460
	bool IsGravityEnabled();// 0xc9abcb8 0x78d3609540
	bool IsAnyRigidBodyAwake();// 0xc9ab33c 0x78d3609620
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0xc9b18c0 0x78d3609700
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0xc9b1aa4 0x78d36097e0
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0xc9b0514 0x78d36098c0
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0xc9aeda8 0x78d36099a0
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0xc9aeea8 0x78d3609a80
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0xc9ae288 0x78d3609b60
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0xc9ae33c 0x78d3609c40
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0xc9ae408 0x78d3609d20
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0xc9b0cb8 0x78d3609e00
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0xc9b0d9c 0x78d3609ee0
	int GetNumMaterials();// 0xc9ac350 0x78d3609fc0
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0xc9b054c 0x78d360a0a0
	MaterialInterface* GetMaterial(int ElementIndex);// 0xc9b0b58 0x78d360a180
	float GetMassScale(FName BoneName);// 0xc9ab92c 0x78d360a260
	float GetMass();// 0xc9ab6f0 0x78d360a340
	float GetLinearDamping();// 0xc9abbcc 0x78d360a420
	Vector GetInertiaTensor(FName BoneName);// 0xc9ab634 0x78d360a500
	bool GetGenerateOverlapEvents();// 0xc9b1e4c 0x78d360a5e0
	byte GetCollisionResponseToChannel(byte Channel);// 0xc9ac038 0x78d360a6c0
	FName GetCollisionProfileName();// 0xc9ad618 0x78d360a7a0
	byte GetCollisionObjectType();// 0xc9abffc 0x78d360a880
	byte GetCollisionEnabled();// 0xc9ac1c4 0x78d360a960
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0xc9ac200 0x78d360aa40
	Vector GetCenterOfMass(FName BoneName);// 0xc9ae1d4 0x78d360ab20
	float GetAngularDamping();// 0xc9abae0 0x78d360ac00
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0xc9b065c 0x78d360ace0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* parent);// 0xc9b07a8 0x78d3607400
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0xc9b08ac 0x78d36074e0
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0xc9b17ec 0x78d36075c0
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0xc9b19d0 0x78d36076a0
	void ClearMoveIgnoreComponents();// 0xc9b17c0 0x78d3607780
	void ClearMoveIgnoreActors();// 0xc9b19bc 0x78d3607860
	bool CanCharacterStepUp(Pawn* Pawn);// 0xc9aaf7c 0x78d3607940
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0xc9af208 0x78d3607a20
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0xc9af0a0 0x78d3607b00
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0xc9af358 0x78d3607be0
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0xc9afa64 0x78d3607cc0
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0xc9af4a8 0x78d3607da0
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0xc9afc48 0x78d3607e80
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0xc9b0194 0x78d3607f60
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0xc9af68c 0x78d3608040
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0xc9af7d0 0x78d3608120
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0xc9af914 0x78d3608200
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0xc9afef4 0x78d36082e0
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0xc9afd8c 0x78d36083c0
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0xc9b0044 0x78d36084a0

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1] 0x78cdbb9980
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4] 0x78cdbb9a00

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbe4d280
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbe4d300
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbe4d380

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10] 0x78dbf21fa0

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4] 0x78d71f5480
	float StaticFriction;//[Offset: 0x2c, Size: 0x4] 0x78d71f5500
	byte FrictionCombineMode;//[Offset: 0x30, Size: 0x1] 0x78d71f5580
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x78d71f5600
	float Restitution;//[Offset: 0x34, Size: 0x4] 0x78d71f5680
	byte RestitutionCombineMode;//[Offset: 0x38, Size: 0x1] 0x78d71f5700
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x78d71f5780
	float Density;//[Offset: 0x3c, Size: 0x4] 0x78d71f5800
	float SleepLinearVelocityThreshold;//[Offset: 0x40, Size: 0x4] 0x78d71f5880
	float SleepAngularVelocityThreshold;//[Offset: 0x44, Size: 0x4] 0x78d71f5900
	int SleepCounterThreshold;//[Offset: 0x48, Size: 0x4] 0x78d71f5980
	float RaiseMassToPower;//[Offset: 0x4c, Size: 0x4] 0x78d71f5a00
	float DestructibleDamageThresholdScale;//[Offset: 0x50, Size: 0x4] 0x78d71f5a80
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x58, Size: 0x8] 0x78d71f5b00
	byte SurfaceType;//[Offset: 0x60, Size: 0x1] 0x78d71f5b80

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8] 0x78d722aa80
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10] 0x78d722ab00
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10] 0x78d715dda0
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x78d715de40
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0xc949e78 0x78d7251c80
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0xc94a258 0x78d720e780
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0xc94a1a0 0x78d720e860
	PhysicalMaterial* GetPhysicalMaterial();// 0xc94a294 0x78d720e940
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0xc94a05c 0x78d720ea20
	Material* GetBaseMaterial();// 0xc94a2d0 0x78d720eb00

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4] 0x78d7440580
	byte AddressX;//[Offset: 0x2c, Size: 0x1] 0x78d7440600
	byte AddressY;//[Offset: 0x2d, Size: 0x1] 0x78d7440680

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10] 0x78d742ae80
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1] 0x78d7336820

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4] 0x78e6830280
	int B;//[Offset: 0x4, Size: 0x4] 0x78e6830300
	int C;//[Offset: 0x8, Size: 0x4] 0x78e6830380
	int D;//[Offset: 0xc, Size: 0x4] 0x78e6830400

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbf1c280
	byte Association;//[Offset: 0x8, Size: 0x1] 0x78dbf1c300
	int Index;//[Offset: 0xc, Size: 0x4] 0x78dbf1c380

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8] 0x78d740d500
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8] 0x78d740d580
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8] 0x78d740d600
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0xc] 0x78d740d680
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0xc] 0x78d740b600
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0xc] 0x78d740b680
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0xc] 0x78d740b700
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0xc] 0x78d740b780
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0xc] 0x78d740b800
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1] 0x78d740b880
	byte BlendMode;//[Offset: 0x151, Size: 0x1] 0x78d740b900
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1] 0x78d740b980
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1] 0x78d740ba00
	byte StencilTestMode;//[Offset: 0x154, Size: 0x1] 0x78d740ba80
	uint32 StencilValue;//[Offset: 0x158, Size: 0x4] 0x78d740bb00
	byte ShadingModel;//[Offset: 0x15c, Size: 0x1] 0x78d740bb80
	bool bNoDynamicPointLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15d, Size: 0x1] 0x78d740bc00
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15d, Size: 0x1] 0x78d740bc80
	MaterialShadingModelField ShadingModels;//[Offset: 0x15e, Size: 0x2] 0x78d740bd00
	float OpacityMaskClipValue;//[Offset: 0x160, Size: 0x4] 0x78d740bd80
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x164, Size: 0xc] 0x78d740be00
	ScalarMaterialInput Refraction;//[Offset: 0x178, Size: 0xc] 0x78d740be80
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x190, Size: 0x18] 0x78d740bf00
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x1b0, Size: 0xc] 0x78d740bf80
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1c4, Size: 0xc] 0x78d740c000
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8, Size: 0x1] 0x78d740c080
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d8, Size: 0x1] 0x78d740c100
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d8, Size: 0x1] 0x78d740c180
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d8, Size: 0x1] 0x78d740c200
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d8, Size: 0x1] 0x78d740c280
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d8, Size: 0x1] 0x78d740c300
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d8, Size: 0x1] 0x78d740c380
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d8, Size: 0x1] 0x78d740c400
	byte TranslucencyLightingMode;//[Offset: 0x1d9, Size: 0x1] 0x78d740c480
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1da, Size: 0x1] 0x78d740c500
	bool bEnableOpaqueReverseBlend;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1da, Size: 0x1] 0x78d740c580
	byte RenderPriority;//[Offset: 0x1db, Size: 0x1] 0x78d740c600
	bool bDisableColorWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1dc, Size: 0x1] 0x78d740a580
	bool bOutlineWriteDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1dc, Size: 0x1] 0x78d740a600
	int NumCustomizedUVs;//[Offset: 0x1e0, Size: 0x4] 0x78d740a680
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1e4, Size: 0x4] 0x78d740a700
	float TranslucentShadowDensityScale;//[Offset: 0x1e8, Size: 0x4] 0x78d740a780
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1ec, Size: 0x4] 0x78d740a800
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1f0, Size: 0x4] 0x78d740a880
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1f4, Size: 0x4] 0x78d740a900
	float TranslucentBackscatteringExponent;//[Offset: 0x1f8, Size: 0x4] 0x78d740a980
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1fc, Size: 0x10] 0x78d740aa00
	float TranslucentShadowStartOffset;//[Offset: 0x20c, Size: 0x4] 0x78d740aa80
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1] 0x78d740ab00
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1] 0x78d740ab80
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 0x1] 0x78d740ac00
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 0x1] 0x78d740ac80
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x210, Size: 0x1] 0x78d740ad00
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x210, Size: 0x1] 0x78d740ad80
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x210, Size: 0x1] 0x78d740ae00
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 0x1] 0x78d740ae80
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 0x1] 0x78d740af00
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 0x1] 0x78d740af80
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x211, Size: 0x1] 0x78d740b000
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x211, Size: 0x1] 0x78d740b080
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x211, Size: 0x1] 0x78d740b100
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x211, Size: 0x1] 0x78d740b180
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x211, Size: 0x1] 0x78d740b200
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x211, Size: 0x1] 0x78d740b280
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x212, Size: 0x1] 0x78d740b300
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x212, Size: 0x1] 0x78d740b380
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x212, Size: 0x1] 0x78d740b400
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x212, Size: 0x1] 0x78d740b480
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x212, Size: 0x1] 0x78d740b500
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x212, Size: 0x1] 0x78d740b580
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x212, Size: 0x1] 0x78d7409500
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x212, Size: 0x1] 0x78d7409580
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x213, Size: 0x1] 0x78d7409600
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x213, Size: 0x1] 0x78d7409680
	bool bUsedWithVirtualHeightfieldMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x213, Size: 0x1] 0x78d7409700
	bool bUsedWithPPMaterialBasepassPermutation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x213, Size: 0x1] 0x78d7409780
	bool bUsedWithMovableDirectionalLightPermutation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x213, Size: 0x1] 0x78d7409800
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x213, Size: 0x1] 0x78d7409880
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x213, Size: 0x1] 0x78d7409900
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x213, Size: 0x1] 0x78d7409980
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 0x1] 0x78d7409a00
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 0x1] 0x78d7409a80
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 0x1] 0x78d7409b00
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x214, Size: 0x1] 0x78d7409b80
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x214, Size: 0x1] 0x78d7409c00
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x214, Size: 0x1] 0x78d7409c80
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x214, Size: 0x1] 0x78d7409d00
	bool bUsesOutline;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x214, Size: 0x1] 0x78d7409d80
	bool bUsesDefaultFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 0x1] 0x78d7409e00
	byte D3D11TessellationMode;//[Offset: 0x216, Size: 0x1] 0x78d7409e80
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x217, Size: 0x1] 0x78d7409f00
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x217, Size: 0x1] 0x78d7409f80
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x217, Size: 0x1] 0x78d740a000
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x217, Size: 0x1] 0x78d740a080
	byte ShadingRate;//[Offset: 0x218, Size: 0x1] 0x78d740a100
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x219, Size: 0x1] 0x78d740a180
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x219, Size: 0x1] 0x78d740a200
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x219, Size: 0x1] 0x78d740a280
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x219, Size: 0x1] 0x78d740a300
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x219, Size: 0x1] 0x78d740a380
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x219, Size: 0x1] 0x78d740a400
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x219, Size: 0x1] 0x78d740a480
	bool bApplyCloudFogging;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x219, Size: 0x1] 0x78d740a500
	bool bIsSky;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21a, Size: 0x1] 0x78d7408480
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21a, Size: 0x1] 0x78d7408500
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21a, Size: 0x1] 0x78d7408580
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21a, Size: 0x1] 0x78d7408600
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21a, Size: 0x1] 0x78d7408680
	byte BlendableLocation;//[Offset: 0x21b, Size: 0x1] 0x78d7408700
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 0x1] 0x78d7408780
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21c, Size: 0x1] 0x78d7408800
	byte StencilCompare;//[Offset: 0x21d, Size: 0x1] 0x78d7408880
	byte StencilRefValue;//[Offset: 0x21e, Size: 0x1] 0x78d7408900
	byte RefractionMode;//[Offset: 0x21f, Size: 0x1] 0x78d7408980
	int BlendablePriority;//[Offset: 0x220, Size: 0x4] 0x78d7408a00
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1] 0x78d7408a80
	uint32 UsageFlagWarnings;//[Offset: 0x228, Size: 0x4] 0x78d7408b00
	float RefractionDepthBias;//[Offset: 0x22c, Size: 0x4] 0x78d7408b80
	Guid StateId;//[Offset: 0x230, Size: 0x10] 0x78d7408c00
	float MaxDisplacement;//[Offset: 0x240, Size: 0x4] 0x78d7408c80
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x278, Size: 0x228] 0x78d7408d00

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4] 0x78ce9bcb00
	FName ExpressionName;//[Offset: 0x4, Size: 0x8] 0x78ce9bcb80

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2] 0x78dbf13080

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int64 PropertyConnectedBitmask;//[Offset: 0x10, Size: 0x8] 0x78ce9bcc80

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4] 0x78ce9bcd00
	FName ExpressionName;//[Offset: 0x4, Size: 0x8] 0x78ce9bcd80

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4] 0x78e6833080
	float G;//[Offset: 0x4, Size: 0x4] 0x78e6833100
	float B;//[Offset: 0x8, Size: 0x4] 0x78e6833180
	float A;//[Offset: 0xc, Size: 0x4] 0x78e6831100

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x1a0] 0x78dbf1a800
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 0x10] 0x78dbe5fb00
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 0x10] 0x78dbe5fba0
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 0x10] 0x78dbe5fc40
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 0x10] 0x78dbe5fce0
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 0x10] 0x78dbe5fd80
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 0x10] 0x78dbe5fe20
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 0x10] 0x78dbe5fec0
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 0x10] 0x78dbe5ff60
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1] 0x78dbf1ae80
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1] 0x78dbf1af00

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry RuntimeEntries;//[Offset: 0x0, Size: 0x40] 0x78dbf1c580
	float[] ScalarValues;//[Offset: 0x140, Size: 0x10] 0x78dbf21460
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 0x10] 0x78dbe5f7e0
	Texture*[] TextureValues;//[Offset: 0x160, Size: 0x10] 0x78dbe5f880
	Font*[] FontValues;//[Offset: 0x170, Size: 0x10] 0x78dbe5f920
	int[] FontPageValues;//[Offset: 0x180, Size: 0x10] 0x78dbe5f9c0
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 0x10] 0x78dbe5fa60

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 0x10] 0x78dbf211e0
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10] 0x78dbf21280
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10] 0x78dbf21320
	bool[] Overrides;//[Offset: 0x30, Size: 0x10] 0x78dbf213c0

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x68, Size: 0x10] 0x78d7213200
	int LODBias;//[Offset: 0x78, Size: 0x4] 0x78d7213280
	byte CompressionSettings;//[Offset: 0x7c, Size: 0x1] 0x78d7213300
	byte Filter;//[Offset: 0x7d, Size: 0x1] 0x78d7213380
	enum MipLoadOptions;//[Offset: 0x7e, Size: 0x1] 0x78d7159a20
	byte LODGroup;//[Offset: 0x7f, Size: 0x1] 0x78d7213480
	PerPlatformFloat Downscale;//[Offset: 0x80, Size: 0x4] 0x78d7213500
	enum DownscaleOptions;//[Offset: 0x84, Size: 0x1] 0x78d7159ac0
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 0x1] 0x78d7213600
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85, Size: 0x1] 0x78d7213680
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x85, Size: 0x1] 0x78d7213700
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x85, Size: 0x1] 0x78d7213780
	bool bNotOfflineProcessed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x85, Size: 0x1] 0x78d7213800
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x85, Size: 0x1] 0x78d7213880
	AssetUserData*[] AssetUserData;//[Offset: 0x88, Size: 0x10] 0x78d7159b60

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x40, Size: 0x8] 0x78d7213980
	int NumCinematicMipLevels;//[Offset: 0x48, Size: 0x4] 0x78d7213a00
	int StreamingIndex;//[Offset: 0x4c, Size: 0x4] 0x78d7213a80
	int CachedCombinedLODBias;//[Offset: 0x50, Size: 0x4] 0x78d7213b00
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78d7213b80
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x78d7213c00
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1] 0x78d7213c80
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1] 0x78d7213d00
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1] 0x78d7213d80
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 0x1] 0x78d7213e00

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4] 0x78dbe08800

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1] 0x78d7330f60
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10] 0x78d7331000
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10] 0x78d73310a0
	int IsRemapped;//[Offset: 0x58, Size: 0x4] 0x78d7341100
	float EmScale;//[Offset: 0x5c, Size: 0x4] 0x78d7341180
	float Ascent;//[Offset: 0x60, Size: 0x4] 0x78d7341200
	float Descent;//[Offset: 0x64, Size: 0x4] 0x78d7341280
	float Leading;//[Offset: 0x68, Size: 0x4] 0x78d7341300
	int Kerning;//[Offset: 0x6c, Size: 0x4] 0x78d7341380
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8] 0x78d7341400
	int NumCharacters;//[Offset: 0x118, Size: 0x4] 0x78d7341480
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10] 0x78d7331140
	float ScalingFactor;//[Offset: 0x130, Size: 0x4] 0x78d7341580
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4] 0x78d7341600
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8] 0x78d7341680
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38] 0x78d7341700

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4] 0x78dbf12c00
	int StartV;//[Offset: 0x4, Size: 0x4] 0x78dbf12c80
	int USize;//[Offset: 0x8, Size: 0x4] 0x78dbf12d00
	int VSize;//[Offset: 0xc, Size: 0x4] 0x78dbf12d80
	byte TextureIndex;//[Offset: 0x10, Size: 0x1] 0x78dbf12e00
	int VerticalOffset;//[Offset: 0x14, Size: 0x4] 0x78dbf12e80

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xd8, Size: 0x4] 0x78d7308080
	int FirstResourceMemMip;//[Offset: 0xdc, Size: 0x4] 0x78d7308100
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1] 0x78d7308180
	byte AddressX;//[Offset: 0xe1, Size: 0x1] 0x78d7308200
	byte AddressY;//[Offset: 0xe2, Size: 0x1] 0x78d7308280
	IntPoint ImportedSize;//[Offset: 0xe4, Size: 0x8] 0x78d7308300
	int Blueprint_GetSizeY();// 0xca22904 0x78d72fa420
	int Blueprint_GetSizeX();// 0xca22938 0x78d72fa500

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4] 0x78e6831580
	int Y;//[Offset: 0x4, Size: 0x4] 0x78e6831600

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10] 0x78dbf13e80
	float Height;//[Offset: 0x10, Size: 0x4] 0x78dbf13f00
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x78dbf13f80
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1] 0x78dbf14000
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1] 0x78dbf14080
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1] 0x78dbf14100
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1] 0x78dbf14180
	byte CharacterSet;//[Offset: 0x15, Size: 0x1] 0x78dbf14200
	FString Chars;//[Offset: 0x18, Size: 0x10] 0x78dbf12180
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10] 0x78dbf12200
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10] 0x78dbf12280
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10] 0x78dbf12300
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78dbf12380
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x78dbf12400
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10] 0x78dbf12480
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x78dbf12500
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4] 0x78dbf12580
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4] 0x78dbf12600
	int XPadding;//[Offset: 0x78, Size: 0x4] 0x78dbf12680
	int YPadding;//[Offset: 0x7c, Size: 0x4] 0x78dbf12700
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4] 0x78dbf12780
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4] 0x78dbf12800
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4] 0x78dbf12880
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4] 0x78dbf12900
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x78dbf12980
	int Kerning;//[Offset: 0x94, Size: 0x4] 0x78dbf12a00
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x78dbf12a80
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4] 0x78dbf12b00
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4] 0x78dbf12b80

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10] 0x78dbe41b00
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18] 0x78dbe41b80
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10] 0x78d361fe20

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10] 0x78d361fd80

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbe41d00
	FontData Font;//[Offset: 0x8, Size: 0x20] 0x78dbe42000

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10] 0x78dbe41d80
	enum Hinting;//[Offset: 0x10, Size: 0x1] 0x78d361fc40
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1] 0x78d361fce0
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4] 0x78dbe41f00
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8] 0x78dbe41f80

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10] 0x78dbe42100
	float ScalingFactor;//[Offset: 0x10, Size: 0x4] 0x78dbe40080

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10] 0x78d361fba0
	FString Cultures;//[Offset: 0x28, Size: 0x10] 0x78dbe41c80

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x78e6836300
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x78e6834280

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x78e6834300
	int Value;//[Offset: 0x4, Size: 0x4] 0x78e6834380

--------------------------------
Class: RuntimeVirtualTexture.Object
	int TileCount;//[Offset: 0x28, Size: 0x4] 0x78d744d980
	int TileSize;//[Offset: 0x2c, Size: 0x4] 0x78d744da00
	int TileBorderSize;//[Offset: 0x30, Size: 0x4] 0x78d744da80
	enum MaterialType;//[Offset: 0x34, Size: 0x1] 0x78d733b640
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x78d744db80
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1] 0x78d744dc00
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1] 0x78d744dc80
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78d744dd00
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x78d744dd80
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x78d744de00
	int RemoveLowMips;//[Offset: 0x3c, Size: 0x4] 0x78d744de80
	byte LODGroup;//[Offset: 0x40, Size: 0x1] 0x78d744df00
	int Size;//[Offset: 0x44, Size: 0x4] 0x78d744df80
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8] 0x78d744e000
	int GetTileSize();// 0xc9c2dbc 0x78d7419700
	int GetTileCount();// 0xc9c2df0 0x78d74197e0
	int GetTileBorderSize();// 0xc9c2d8c 0x78d74198c0
	int GetSize();// 0xc9c2d0c 0x78d74199a0
	int GetPageTableSize();// 0xc9c2cd8 0x78d7419a80

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10] 0x78dbf1a900
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8] 0x78dbf1a980

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10] 0x78dbf1aa80
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8] 0x78dbf1ab00

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10] 0x78d742b800
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10] 0x78d7338b20
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10] 0x78d7338bc0

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4] 0x78dbf1d800

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78dbf1d900
	Guid ID;//[Offset: 0x8, Size: 0x10] 0x78dbf1d980

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10] 0x78dbf1d880

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10] 0x78d715e160
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78d7229e80
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8] 0x78d7229f00
	float GrassDensity;//[Offset: 0x48, Size: 0x4] 0x78d7229f80
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4] 0x78d722a000
	int StartCullDistance;//[Offset: 0x50, Size: 0x4] 0x78d722a080
	int EndCullDistance;//[Offset: 0x54, Size: 0x4] 0x78d722a100
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78d722a180
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78d722a200

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8] 0x78dbe4cb00
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 0x10] 0x78dbe52680
	PerPlatformFloat GrassDensity;//[Offset: 0x18, Size: 0x4] 0x78dbe4cc00
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78dbe4cc80
	float PlacementJitter;//[Offset: 0x20, Size: 0x4] 0x78dbe4cd00
	PerPlatformInt StartCullDistance;//[Offset: 0x24, Size: 0x4] 0x78dbe4cd80
	PerPlatformInt EndCullDistance;//[Offset: 0x28, Size: 0x4] 0x78dbe4ce00
	int MinLOD;//[Offset: 0x2c, Size: 0x4] 0x78dbe4ce80
	enum Scaling;//[Offset: 0x30, Size: 0x1] 0x78dbe52720
	FloatInterval ScaleX;//[Offset: 0x34, Size: 0x8] 0x78dbe4cf80
	FloatInterval ScaleY;//[Offset: 0x3c, Size: 0x8] 0x78dbe4d000
	FloatInterval ScaleZ;//[Offset: 0x44, Size: 0x8] 0x78dbe4d080
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78dbe4d100
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x78dbe4d180
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1] 0x78dbe4d200
	LightingChannels LightingChannels;//[Offset: 0x4f, Size: 0x1] 0x78dbe4d400
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78dbe4d480
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78dbe4d500
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x78dbe4d580

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x80, Size: 0x4] 0x78d745d800
	bool bForceLODsShareLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1] 0x78d745d880
	float LpvBiasMultiplier;//[Offset: 0x88, Size: 0x4] 0x78d745d900
	StaticMaterial[] StaticMaterials;//[Offset: 0x90, Size: 0x10] 0x78d733bb40
	float LightmapUVDensity;//[Offset: 0xa0, Size: 0x4] 0x78d745da00
	int LightMapResolution;//[Offset: 0xa4, Size: 0x4] 0x78d745da80
	int LightMapCoordinateIndex;//[Offset: 0xa8, Size: 0x4] 0x78d745db00
	float DistanceFieldSelfShadowBias;//[Offset: 0xac, Size: 0x4] 0x78d745db80
	BodySetup* BodySetup;//[Offset: 0xb0, Size: 0x8] 0x78d745dc00
	int LODForCollision;//[Offset: 0xb8, Size: 0x4] 0x78d745dc80
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1] 0x78d745dd00
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1] 0x78d745dd80
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 0x1] 0x78d745de00
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbc, Size: 0x1] 0x78d745de80
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xbc, Size: 0x1] 0x78d745df00
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xbc, Size: 0x1] 0x78d745df80
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xbc, Size: 0x1] 0x78d745e000
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbd, Size: 0x1] 0x78d745e080
	StaticMeshSocket*[] Sockets;//[Offset: 0xe0, Size: 0x10] 0x78d733bbe0
	Vector PositiveBoundsExtension;//[Offset: 0x100, Size: 0xc] 0x78d745e180
	Vector NegativeBoundsExtension;//[Offset: 0x10c, Size: 0xc] 0x78d745e200
	BoxSphereBounds ExtendedBounds;//[Offset: 0x118, Size: 0x1c] 0x78d745e280
	int ElementToIgnoreForTexFactor;//[Offset: 0x134, Size: 0x4] 0x78d745e300
	AssetUserData*[] AssetUserData;//[Offset: 0x138, Size: 0x10] 0x78d733bc80
	Object* EditableMesh;//[Offset: 0x148, Size: 0x8] 0x78d745e400
	NavCollisionBase* NavCollision;//[Offset: 0x150, Size: 0x8] 0x78d745e480
	void RemoveSocket(StaticMeshSocket* Socket);// 0xca1464c 0x78d74619e0
	int GetNumSections(int InLOD);// 0xca14a5c 0x78d7461ac0
	int GetNumLODs();// 0xca14be4 0x78d7461ba0
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0xca14ea0 0x78d7461c80
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0xca14dfc 0x78d741e780
	int GetMaterialIndex(FName MaterialSlotName);// 0xca1484c 0x78d741e860
	MaterialInterface* GetMaterial(int MaterialIndex);// 0xca149ac 0x78d741e940
	BoxSphereBounds GetBounds();// 0xca14b78 0x78d741ea20
	Box GetBoundingBox();// 0xca14b0c 0x78d741eb00
	StaticMeshSocket* FindSocket(FName InSocketName);// 0xca146f4 0x78d741ebe0
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0xca14d54 0x78d741ecc0
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0xca14c18 0x78d741eda0
	void AddSocket(StaticMeshSocket* Socket);// 0xca147a4 0x78d741ee80
	FName AddMaterial(MaterialInterface* Material);// 0xca148fc 0x78d741ef60

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4] 0x78dbe08700

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8] 0x78dbf6aa00
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8] 0x78dbf6aa80
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8] 0x78dbf6ab00
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14] 0x78dbf6ab80

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbf06e00
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78dbf06e80
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4] 0x78dbf06f00

--------------------------------
Class: BodySetup.BodySetupCore.Object
	KAggregateGeom AggGeom;//[Offset: 0x48, Size: 0x58] 0x78d72e7280
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78d72e7300
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x78d72e7380
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1] 0x78d72e5300
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1] 0x78d72e5380
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1] 0x78d72e5400
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 0x1] 0x78d72e5480
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 0x1] 0x78d72e5500
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa0, Size: 0x1] 0x78d72e5580
	PhysicalMaterial* PhysMaterial;//[Offset: 0xa8, Size: 0x8] 0x78d72e5600
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xb0, Size: 0x10] 0x78d72e5680
	BodyInstance DefaultInstance;//[Offset: 0x128, Size: 0x150] 0x78d72e5700
	Vector BuildScale3D;//[Offset: 0x280, Size: 0xc] 0x78d72e5780

--------------------------------
Class: BodySetupCore.Object
	FName BoneName;//[Offset: 0x28, Size: 0x8] 0x78d71f5f80
	byte PhysicsType;//[Offset: 0x30, Size: 0x1] 0x78d71f6000
	byte CollisionTraceFlag;//[Offset: 0x31, Size: 0x1] 0x78d71f6080
	byte CollisionReponse;//[Offset: 0x32, Size: 0x1] 0x78d71f6100

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10] 0x78dbe59980
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10] 0x78dbe59a20
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10] 0x78dbe59ac0
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10] 0x78dbe59ca0
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10] 0x78dbe59d40

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x78dbeda080
	float Radius;//[Offset: 0x3c, Size: 0x4] 0x78dbeda100

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4] 0x78dbed8b80
	FName Name;//[Offset: 0xc, Size: 0x8] 0x78dbed8c00
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78dbed8c80
	byte CollisionEnabled;//[Offset: 0x19, Size: 0x1] 0x78dbed8d00

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x78dbeda200
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc] 0x78dbeda280
	float X;//[Offset: 0x48, Size: 0x4] 0x78dbeda300
	float Y;//[Offset: 0x4c, Size: 0x4] 0x78dbeda380
	float Z;//[Offset: 0x50, Size: 0x4] 0x78dbeda400

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x78dbeda500
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc] 0x78dbed8480
	float Radius;//[Offset: 0x48, Size: 0x4] 0x78dbed8500
	float Length;//[Offset: 0x4c, Size: 0x4] 0x78dbed8580

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10] 0x78dbe59b60
	int[] IndexData;//[Offset: 0x40, Size: 0x10] 0x78dbe59c00
	Box ElemBox;//[Offset: 0x50, Size: 0x1c] 0x78dbed8780
	Transform Transform;//[Offset: 0x70, Size: 0x30] 0x78dbed8800

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc] 0x78e6832f00
	Vector Max;//[Offset: 0xc, Size: 0xc] 0x78e6832f80
	byte IsValid;//[Offset: 0x18, Size: 0x1] 0x78e6833000

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10] 0x78e6834f00
	Vector Translation;//[Offset: 0x10, Size: 0xc] 0x78e6834f80
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc] 0x78e6835000

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4] 0x78e6831a00
	float Y;//[Offset: 0x4, Size: 0x4] 0x78e6831a80
	float Z;//[Offset: 0x8, Size: 0x4] 0x78e6831b00
	float W;//[Offset: 0xc, Size: 0x4] 0x78e6831b80

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x78dbed8900
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc] 0x78dbed8980
	float Radius0;//[Offset: 0x48, Size: 0x4] 0x78dbed8a00
	float Radius1;//[Offset: 0x4c, Size: 0x4] 0x78dbed8a80
	float Length;//[Offset: 0x50, Size: 0x4] 0x78dbed8b00

--------------------------------
Class: BodyInstance.BodyInstanceCore
	byte ObjectType;//[Offset: 0x1a, Size: 0x1] 0x78cdbbd280
	byte CollisionEnabled;//[Offset: 0x1c, Size: 0x1] 0x78cdbbd300
	enum SleepFamily;//[Offset: 0x51, Size: 0x1] 0x78d3611820
	byte DOFMode;//[Offset: 0x52, Size: 0x1] 0x78cdbbd400
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53, Size: 0x1] 0x78cdbbd480
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x53, Size: 0x1] 0x78cdbbd500
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x53, Size: 0x1] 0x78cdbbd580
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x53, Size: 0x1] 0x78cdbbd600
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x53, Size: 0x1] 0x78cdbbd680
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x53, Size: 0x1] 0x78cdbbb600
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x53, Size: 0x1] 0x78cdbbb680
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78cdbbb700
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x78cdbbb780
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1] 0x78cdbbb800
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1] 0x78cdbbb880
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1] 0x78cdbbb900
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x54, Size: 0x1] 0x78cdbbb980
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1] 0x78cdbbba00
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1] 0x78cdbbba80
	FName CollisionProfileName;//[Offset: 0x64, Size: 0x8] 0x78cdbbbb00
	byte PositionSolverIterationCount;//[Offset: 0x6c, Size: 0x1] 0x78cdbbbb80
	byte VelocitySolverIterationCount;//[Offset: 0x6d, Size: 0x1] 0x78cdbbbc00
	CollisionResponse CollisionResponses;//[Offset: 0x70, Size: 0x30] 0x78cdbbad80
	float MaxDepenetrationVelocity;//[Offset: 0xa0, Size: 0x4] 0x78cdbbae00
	float MassInKgOverride;//[Offset: 0xa4, Size: 0x4] 0x78cdbbae80
	float LinearDamping;//[Offset: 0xb0, Size: 0x4] 0x78cdbbaf00
	float AngularDamping;//[Offset: 0xb4, Size: 0x4] 0x78cdbbaf80
	Vector CustomDOFPlaneNormal;//[Offset: 0xb8, Size: 0xc] 0x78cdbbb000
	Vector COMNudge;//[Offset: 0xc4, Size: 0xc] 0x78cdbbb080
	float MassScale;//[Offset: 0xd0, Size: 0x4] 0x78cdbbb100
	Vector InertiaTensorScale;//[Offset: 0xd4, Size: 0xc] 0x78cdbbb180
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xf0, Size: 0x10] 0x78cdbbb200
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0x100, Size: 0x8] 0x78cdbbb280
	float MaxAngularVelocity;//[Offset: 0x108, Size: 0x4] 0x78cdbbb300
	float CustomSleepThresholdMultiplier;//[Offset: 0x10c, Size: 0x4] 0x78cdbbb380
	float StabilizationThresholdMultiplier;//[Offset: 0x110, Size: 0x4] 0x78cdbbb400
	float PhysicsBlendWeight;//[Offset: 0x114, Size: 0x4] 0x78cdbbb480

--------------------------------
Class: BodyInstanceCore
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78cdbbb500
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x78cdbbb580
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x78cdbb9500
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x78cdbb9580
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x78cdbb9600
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x78cdbb9680
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x78cdbb9700

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20] 0x78cdbbab80
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10] 0x78d36118c0

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1] 0x78cdbbbc80
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1] 0x78cdbbbd00
	byte Pawn;//[Offset: 0x2, Size: 0x1] 0x78cdbbbd80
	byte Visibility;//[Offset: 0x3, Size: 0x1] 0x78cdbbbe00
	byte Camera;//[Offset: 0x4, Size: 0x1] 0x78cdbbbe80
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1] 0x78cdbbbf00
	byte Vehicle;//[Offset: 0x6, Size: 0x1] 0x78cdbbbf80
	byte Destructible;//[Offset: 0x7, Size: 0x1] 0x78cdbbc000
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1] 0x78cdbbc080
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1] 0x78cdbbc100
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1] 0x78cdbbc180
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1] 0x78cdbbc200
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1] 0x78cdbbc280
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1] 0x78cdbbc300
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1] 0x78cdbbc380
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1] 0x78cdbbc400
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1] 0x78cdbbc480
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1] 0x78cdbbc500
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1] 0x78cdbbc580
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1] 0x78cdbbc600
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1] 0x78cdbba580
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1] 0x78cdbba600
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1] 0x78cdbba680
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1] 0x78cdbba700
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1] 0x78cdbba780
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1] 0x78cdbba800
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1] 0x78cdbba880
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1] 0x78cdbba900
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1] 0x78cdbba980
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1] 0x78cdbbaa00
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1] 0x78cdbbaa80
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1] 0x78cdbbab00

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8] 0x78cdbbac00
	byte response;//[Offset: 0x8, Size: 0x1] 0x78cdbbac80

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8] 0x78d745f680
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc] 0x78d745f700
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc] 0x78d745f780
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc] 0x78d745d700
	FString Tag;//[Offset: 0x58, Size: 0x10] 0x78d745d780

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc] 0x78e6832c00
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc] 0x78e6832c80
	float SphereRadius;//[Offset: 0x18, Size: 0x4] 0x78e6832d00

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0xbcce7d0 0x78d72c0a20
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0xbcce384 0x78d72c0b00
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0xbcce914 0x78d72c0be0
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0xbcce490 0x78d72c0cc0

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0xbcbedc0 0x78d72c0da0
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0xbcbca3c 0x78d72c0e80
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0xbcbc944 0x78d72c0f60
	void ReversePolygonFacing(PolygonID PolygonID);// 0xbcbc890 0x78d72c1040
	void ReserveNewVertices(int NumberOfNewVertices);// 0xbcc1800 0x78d72c1120
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0xbcc14fc 0x78d72c1200
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0xbcc0bbc 0x78d72c12e0
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0xbcc0440 0x78d72c13c0
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0xbcbfcc4 0x78d72c14a0
	void ReserveNewEdges(int NumberOfNewEdges);// 0xbcc10a4 0x78d72c1580
	bool IsVertexValid(VertexID VertexID);// 0xbcc15a4 0x78d72c1660
	bool IsVertexOrphaned(VertexID VertexID);// 0xbcbf9a8 0x78d72c1740
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0xbcc114c 0x78d72c1820
	bool IsTriangleValid(const TriangleID TriangleID);// 0xbcc04e8 0x78d72c1900
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0xbcbddd8 0x78d72c19e0
	bool IsPolygonValid(PolygonID PolygonID);// 0xbcbfd6c 0x78d72c1ac0
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0xbcbfa68 0x78d72c1ba0
	bool IsEmpty();// 0xbcc18a8 0x78d72c1c80
	bool IsEdgeValid(EdgeID EdgeID);// 0xbcc0c64 0x78d729e780
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0xbcbe640 0x78d729e860
	bool IsEdgeInternal(EdgeID EdgeID);// 0xbcbe74c 0x78d729e940
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0xbcbf56c 0x78d729ea20
	Vector GetVertexPosition(VertexID VertexID);// 0xbcbeec4 0x78d729eb00
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0xbcbf8a0 0x78d729ebe0
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0xbcbed04 0x78d729ecc0
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0xbcbebfc 0x78d729eda0
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0xbcbd6dc 0x78d729ee80
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0xbcbcb7c 0x78d729ef60
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0xbcbeac0 0x78d729f040
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0xbcbe8c8 0x78d729f120
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0xbcbf374 0x78d729f200
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0xbcbf17c 0x78d729f2e0
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0xbcbf764 0x78d729f3c0
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0xbcbef84 0x78d729f4a0
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0xbcbda5c 0x78d729f580
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0xbcbdc9c 0x78d729f660
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0xbcbdb98 0x78d729f740
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0xbcbde98 0x78d729f820
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0xbcbdf54 0x78d729f900
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0xbcbd920 0x78d729f9e0
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0xbcbd7e4 0x78d729fac0
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0xbcbd1b0 0x78d729fba0
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0xbcbd3a8 0x78d729fc80
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0xbcbd5a0 0x78d729fd60
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0xbcbcc84 0x78d729fe40
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0xbcbd074 0x78d729ff20
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0xbcbcf38 0x78d729caa0
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0xbcbc6a0 0x78d729cb80
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0xbcbcd40 0x78d729cc60
	int GetNumVertexVertexInstances(VertexID VertexID);// 0xbcbf4b0 0x78d729cd40
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0xbcbea04 0x78d729ce20
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0xbcbe80c 0x78d729cf00
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0xbcbf2b8 0x78d729cfe0
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0xbcbf0c0 0x78d729d0c0
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0xbcbf6a8 0x78d729d1a0
	int GetNumPolygonVertices(PolygonID PolygonID);// 0xbcbd2ec 0x78d729d280
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0xbcbd4e4 0x78d729d360
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0xbcbce7c 0x78d729d440
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0xbcbc5e4 0x78d729d520
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0xbcbe448 0x78d729d600
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0xbcbe250 0x78d729d6e0
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0xbcbe010 0x78d729d7c0
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0xbcbe14c 0x78d729d8a0
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0xbcbe504 0x78d729d980
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0xbcbe30c 0x78d729da60
	void Empty();// 0xbcc18e0 0x78d729db40
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0xbcc120c 0x78d729dc20
	void DeleteVertex(VertexID VertexID);// 0xbcc1664 0x78d729dd00
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0xbcc05a8 0x78d729dde0
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0xbcbfb28 0x78d729dec0
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0xbcbfe2c 0x78d729dfa0
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0xbcc0d24 0x78d729e080
	void CreateVertexWithID(VertexID VertexID);// 0xbcc1718 0x78d729e160
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0xbcc1348 0x78d729e240
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0xbcc1440 0x78d729e320
	VertexID CreateVertex();// 0xbcc17cc 0x78d729e400
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xbcc07ec 0x78d729e4e0
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xbcc09ec 0x78d729e5c0
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xbcc0070 0x78d729e6a0
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0xbcbfbdc 0x78d729adc0
	PolygonGroupID CreatePolygonGroup();// 0xbcbfc90 0x78d729aea0
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xbcc0270 0x78d729af80
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0xbcc0e60 0x78d729b060
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0xbcc0f9c 0x78d729b140
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0xbcbc7dc 0x78d729b220

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4] 0x78dbed2480

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4] 0x78e6831f00
	float Y;//[Offset: 0x4, Size: 0x4] 0x78e6831f80

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78d742de80

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4] 0x78e6836000
	float Max;//[Offset: 0x4, Size: 0x4] 0x78e6836080

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c] 0x78d7471080

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10] 0x78dbf6e700
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10] 0x78dbf6c680
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4] 0x78dbf6c700
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4] 0x78dbf6c780
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dbf6c800
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4] 0x78dbf6c880
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10] 0x78dbf6c900
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10] 0x78dbf6c980
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10] 0x78dbf6ca00
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4] 0x78dbf6ca80
	float NormalScale;//[Offset: 0x64, Size: 0x4] 0x78dbf6cb00
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4] 0x78dbf6cb80
	float IOR;//[Offset: 0x6c, Size: 0x4] 0x78dbf6cc00
	float Roughness0;//[Offset: 0x70, Size: 0x4] 0x78dbf6cc80
	float Roughness1;//[Offset: 0x74, Size: 0x4] 0x78dbf6cd00
	float LobeMix;//[Offset: 0x78, Size: 0x4] 0x78dbf6cd80
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10] 0x78dbf6ce00

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4] 0x78dbf1dc00
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4] 0x78dbf1dc80
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4] 0x78dbf1dd00
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78dbf1dd80
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x78dbf1de00
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x78dbf1de80
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x78dbf1df00
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1] 0x78dbf1df80

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4] 0x78dbf1e000
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4] 0x78dbf1e080
	FName TextureName;//[Offset: 0x8, Size: 0x8] 0x78dbf1e100

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4] 0x78e6832000
	float Y;//[Offset: 0x4, Size: 0x4] 0x78e6832080
	float Z;//[Offset: 0x8, Size: 0x4] 0x78e6832100
	float W;//[Offset: 0xc, Size: 0x4] 0x78e6830080

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78ce9bf780
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78ce9bd700
	int FaceIndex;//[Offset: 0x4, Size: 0x4] 0x78ce9bd780
	float Time;//[Offset: 0x8, Size: 0x4] 0x78ce9bd800
	float Distance;//[Offset: 0xc, Size: 0x4] 0x78ce9bd880
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc] 0x78ce9bd900
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc] 0x78ce9bd980
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc] 0x78ce9bda00
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc] 0x78ce9bda80
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc] 0x78ce9bdb00
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc] 0x78ce9bdb80
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4] 0x78ce9bdc00
	int Item;//[Offset: 0x5c, Size: 0x4] 0x78ce9bdc80
	byte ElementIndex;//[Offset: 0x60, Size: 0x1] 0x78ce9bdd00
	PhysicalMaterial* PhysMaterial;//[Offset: 0x64, Size: 0x8] 0x78ce9bdd80
	Actor* Actor;//[Offset: 0x6c, Size: 0x8] 0x78ce9bde00
	PrimitiveComponent* Component;//[Offset: 0x74, Size: 0x8] 0x78ce9bde80
	FName BoneName;//[Offset: 0x7c, Size: 0x8] 0x78ce9bdf00
	FName MyBoneName;//[Offset: 0x84, Size: 0x8] 0x78ce9bdf80

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0xc9489dc 0x78d7414e60
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0xc948ae4 0x78d7414f40
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0xc948d50 0x78d7415020
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0xc948e58 0x78d7415100
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0xc9490c4 0x78d74151e0
	void SetScalarParameterValue(FName ParameterName, float Value);// 0xc9491cc 0x78d74152c0
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0xc94871c 0x78d74153a0
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0xc948858 0x78d7415480
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0xc948928 0x78d7415560
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0xc948bd4 0x78d7415640
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0xc948ca0 0x78d7411d60
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0xc948f48 0x78d7411e40
	float K2_GetScalarParameterValue(FName ParameterName);// 0xc949014 0x78d7411f20
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0xc948620 0x78d7412000
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0xc9484d0 0x78d74120e0
	void CopyInterpParameters(MaterialInstance* Source);// 0xc948578 0x78d74121c0

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8] 0x78d722c480
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8] 0x78d722c500
	MaterialInterface* parent;//[Offset: 0xd0, Size: 0x8] 0x78d722c580
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x78d722c600
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1] 0x78d722a580
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe8, Size: 0x10] 0x78d715d9e0
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf8, Size: 0x10] 0x78d715da80
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x108, Size: 0x10] 0x78d715db20
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x118, Size: 0x10] 0x78d715dbc0
	FontParameterValue[] FontParameterValues;//[Offset: 0x128, Size: 0x10] 0x78d715dc60
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x138, Size: 0x18] 0x78d722a880
	StaticParameterSet StaticParameters;//[Offset: 0x160, Size: 0x40] 0x78d722a900
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x1a0, Size: 0x1a0] 0x78d722a980
	Object*[] CachedReferencedTextures;//[Offset: 0x340, Size: 0x10] 0x78d715dd00

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78dbf1d100
	float ParameterValue;//[Offset: 0x10, Size: 0x4] 0x78dbf1d180
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10] 0x78dbf1d200

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78dbf1d280
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10] 0x78dbf1d300
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10] 0x78dbf1d380

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78dbf1d400
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8] 0x78dbf1d480
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10] 0x78dbf1d500

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78dbf1d580
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8] 0x78dbf1d600
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10] 0x78dbf1d680

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78dbf1b600
	Font* FontValue;//[Offset: 0x10, Size: 0x8] 0x78dbf1b680
	int FontPage;//[Offset: 0x18, Size: 0x4] 0x78dbf1b700
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10] 0x78dbf1b780

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbf1e180
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbf1e200
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbf1e280
	bool bOverride_NoDynamicPointLight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78dbf1e300
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78dbf1e380
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78dbf1e400
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78dbf1e480
	bool bOverride_EnableOutlineWriteDepth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78dbf1e500
	bool bOverride_DisableColorWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78dbf1e580
	bool bOverride_UseOutline;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78dbf1e600
	bool TwoSided;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78dbf1e680
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x78dbf1e700
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x78dbf1c680
	byte BlendMode;//[Offset: 0x2, Size: 0x1] 0x78dbf1c700
	byte ShadingModel;//[Offset: 0x3, Size: 0x1] 0x78dbf1c780
	bool bNoDynamicPointLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x78dbf1c800
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 0x4] 0x78dbf1c880
	bool bOverride_StencilTestMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78dbf1c900
	bool bOverride_StencilValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x78dbf1c980
	bool bOverride_DisableDepth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x78dbf1ca00
	byte StencilTestMode;//[Offset: 0xd, Size: 0x1] 0x78dbf1ca80
	uint32 StencilValue;//[Offset: 0x10, Size: 0x4] 0x78dbf1cb00
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x78dbf1cb80
	bool bOverride_EnableOpaqueReverseBlend;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1] 0x78dbf1cc00
	bool bEnableOpaqueReverseBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1] 0x78dbf1cc80
	bool bOverride_RenderPriority;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1] 0x78dbf1cd00
	byte RenderPriority;//[Offset: 0x15, Size: 0x1] 0x78dbf1cd80
	bool bEnableOutlineWriteDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1] 0x78dbf1ce00
	bool bDisableColorWrite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1] 0x78dbf1ce80
	bool bUseOutline;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1] 0x78dbf1cf00

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10] 0x78dbf22c20
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10] 0x78dbf22cc0
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10] 0x78dbf22d60
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10] 0x78dbf22e00

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x78dbf6d180

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78dbf6b600
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78dbf6b680
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10] 0x78dbf6b700

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x78dbf6d280
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1] 0x78dbf6d300
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1] 0x78dbf6d380
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1] 0x78dbf6d400

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4] 0x78dbf6d500
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dbf6d580

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40] 0x78dbf6d680

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10] 0x78dbf21000
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10] 0x78dbf210a0
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10] 0x78dbf21140
	FString KeyString;//[Offset: 0x30, Size: 0x10] 0x78dbf1db80

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78dc096080
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x78dc096100
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1] 0x78dc096180
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 0x1] 0x78dc096200
	float BaseEyeHeight;//[Offset: 0x22c, Size: 0x4] 0x78dc096280
	byte AutoPossessPlayer;//[Offset: 0x230, Size: 0x1] 0x78dc096300
	enum AutoPossessAI;//[Offset: 0x231, Size: 0x1] 0x78dbffa4c0
	byte RemoteViewPitch;//[Offset: 0x232, Size: 0x1] 0x78dc094300
	class Controller* AIControllerClass;//[Offset: 0x238, Size: 0x8] 0x78dbff7c20
	PlayerState* PlayerState;//[Offset: 0x240, Size: 0x8] 0x78dc094380
	Controller* LastHitBy;//[Offset: 0x250, Size: 0x8] 0x78dc094400
	Controller* Controller;//[Offset: 0x258, Size: 0x8] 0x78dc094480
	Vector ControlInputVector;//[Offset: 0x264, Size: 0xc] 0x78dc094500
	Vector LastControlInputVector;//[Offset: 0x270, Size: 0xc] 0x78dc094580
	void SpawnDefaultController();// 0xc981bb0 0x78dc0a1120
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0xc981d28 0x78dc0a1200
	void ReceiveUnpossessed(Controller* OldController);// 0xaa7cd18 0x78dc0a12e0
	void ReceivePossessed(Controller* NewController);// 0xaa7cd18 0x78dc0a13c0
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0xc981fc4 0x78dc0a14a0
	void OnRep_PlayerState();// 0xc981e20 0x78dc0a1580
	void OnRep_Controller();// 0xc981e3c 0x78dc0a1660
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xc98161c 0x78dc0a1740
	Vector K2_GetMovementInputVector();// 0xc9815e4 0x78dc0a1820
	bool IsPlayerControlled();// 0xc981c68 0x78dc0a1900
	bool IsPawnControlled();// 0xc981eac 0x78dc0a19e0
	bool IsMoveInputIgnored();// 0xc981760 0x78dc0a1ac0
	bool IsLocallyControlled();// 0xc981ca8 0x78dc0a1ba0
	bool IsControlled();// 0xc981ee4 0x78dc0a1c80
	bool IsBotControlled();// 0xc981c28 0x78dc02e780
	Vector GetPendingMovementInputVector();// 0xc981a28 0x78dc02e860
	Vector GetNavAgentLocation();// 0xc981ce8 0x78dc02e940
	PawnMovementComponent* GetMovementComponent();// 0xc982144 0x78dc02ea20
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0xc981f1c 0x78dc02eb00
	Vector GetLastMovementInputVector();// 0xc9819f0 0x78dc02ebe0
	Rotator GetControlRotation();// 0xc981e58 0x78dc02ecc0
	Controller* GetController();// 0xc981e90 0x78dc02eda0
	Rotator GetBaseAimRotation();// 0xc981be8 0x78dc02ee80
	void DetachFromControllerPendingDestroy();// 0xc981bcc 0x78dc02ef60
	Vector ConsumeMovementInputVector();// 0xc9819b0 0x78dc02f040
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0xc981a60 0x78dc02f120
	void AddControllerYawInput(float Val);// 0xc981850 0x78dc02f200
	void AddControllerRollInput(float Val);// 0xc9817a0 0x78dc02f2e0
	void AddControllerPitchInput(float Val);// 0xc981900 0x78dc02f3c0

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x228, Size: 0x8] 0x78dc1a7c80
	delegate OnInstigatedAnyDamage;//[Offset: 0x238, Size: 0x10] 0x78dc1a7d00
	FName StateName;//[Offset: 0x248, Size: 0x8] 0x78dc1a7d80
	Pawn* Pawn;//[Offset: 0x250, Size: 0x8] 0x78dc1a7e00
	Character* Character;//[Offset: 0x260, Size: 0x8] 0x78dc1a7e80
	SceneComponent* TransformComponent;//[Offset: 0x268, Size: 0x8] 0x78dc1a7f00
	Rotator ControlRotation;//[Offset: 0x288, Size: 0xc] 0x78dc1a7f80
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1] 0x78dc1a8000
	void UnPossess();// 0xc81e68c 0x78dc19b920
	void StopMovement();// 0xc81e670 0x78dc19ba00
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0xc81ecfc 0x78dc19bae0
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0xc81e5b8 0x78dc19bbc0
	void SetIgnoreLookInput(bool bNewLookInput);// 0xc81e4a4 0x78dc19bca0
	void SetControlRotation(out const Rotator NewRotation);// 0xc81ee00 0x78dc19bd80
	void ResetIgnoreMoveInput();// 0xc81e59c 0x78dc19be60
	void ResetIgnoreLookInput();// 0xc81e488 0x78dc19bf40
	void ResetIgnoreInputFlags();// 0xc81e42c 0x78dc19c020
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0xaa7cd18 0x78dc19c100
	void ReceivePossess(Pawn* PossessedPawn);// 0xaa7cd18 0x78dc19c1e0
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0xaa7cd18 0x78dc19c2c0
	void Possess(Pawn* InPawn);// 0xc81e6a0 0x78dc19c3a0
	void OnRep_PlayerState();// 0xc81eb6c 0x78dc19c480
	void OnRep_Pawn();// 0xc81eb88 0x78dc19c560
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0xc81eba4 0x78dc19c640
	Pawn* K2_GetPawn();// 0xc81e880 0x78dc19c720
	bool IsPlayerController();// 0xc81e7e4 0x78dc19c800
	bool IsMoveInputIgnored();// 0xc81e55c 0x78dc19c8e0
	bool IsLookInputIgnored();// 0xc81e448 0x78dc19c9c0
	bool IsLocalPlayerController();// 0xc81e788 0x78dc1990e0
	bool IsLocalController();// 0xc81e748 0x78dc1991c0
	Actor* GetViewTarget();// 0xc81e844 0x78dc1992a0
	Rotator GetDesiredRotation();// 0xc81e804 0x78dc199380
	Rotator GetControlRotation();// 0xc81eeb8 0x78dc199460
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0xc81e8b4 0x78dc199540
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0xc81e9fc 0x78dc199620
	PlayerController* CastToPlayerController();// 0xc81eb38 0x78dc199700

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x220, Size: 0x4] 0x78d7448100
	int PlayerId;//[Offset: 0x224, Size: 0x4] 0x78d7448180
	byte Ping;//[Offset: 0x228, Size: 0x1] 0x78d7448200
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22a, Size: 0x1] 0x78d7448280
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22a, Size: 0x1] 0x78d7448300
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22a, Size: 0x1] 0x78d7448380
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22a, Size: 0x1] 0x78d7448400
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22a, Size: 0x1] 0x78d7446380
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22a, Size: 0x1] 0x78d7446400
	int startTime;//[Offset: 0x22c, Size: 0x4] 0x78d7446480
	class LocalMessage* EngineMessageClass;//[Offset: 0x230, Size: 0x8] 0x78d7339340
	FString SavedNetworkAddress;//[Offset: 0x240, Size: 0x10] 0x78d7446500
	UniqueNetIdRepl UniqueId;//[Offset: 0x250, Size: 0x28] 0x78d7446580
	Pawn* PawnPrivate;//[Offset: 0x280, Size: 0x8] 0x78d7446600
	FString PlayerNamePrivate;//[Offset: 0x2f8, Size: 0x10] 0x78d7446680
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0xaa7cd18 0x78d741ace0
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0xaa7cd18 0x78d7417400
	void OnRep_UniqueId();// 0xc9a61f4 0x78d74174e0
	void OnRep_Score();// 0xc9a6264 0x78d74175c0
	void OnRep_PlayerName();// 0xc9a6248 0x78d74176a0
	void OnRep_PlayerId();// 0xc9a6210 0x78d7417780
	void OnRep_bIsInactive();// 0xc9a622c 0x78d7417860
	FString GetPlayerName();// 0xc9a6120 0x78d7417940

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10] 0x78dbf20740

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78d7307700
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78d7307780
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x78d7307800
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4] 0x78d7307880
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4] 0x78d7307900
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4] 0x78d7307980
	float DamageFalloff;//[Offset: 0x38, Size: 0x4] 0x78d7307a00

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* mesh;//[Offset: 0x280, Size: 0x8] 0x78dc09ad00
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x288, Size: 0x8] 0x78dc09ad80
	CapsuleComponent* CapsuleComponent;//[Offset: 0x290, Size: 0x8] 0x78dc09ae00
	BasedMovementInfo BasedMovement;//[Offset: 0x298, Size: 0x30] 0x78dc09ae80
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2c8, Size: 0x30] 0x78dc09af00
	float AnimRootMotionTranslationScale;//[Offset: 0x2f8, Size: 0x4] 0x78dc09af80
	Vector BaseTranslationOffset;//[Offset: 0x2fc, Size: 0xc] 0x78dc09b000
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 0x10] 0x78dc09b080
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 0x4] 0x78dc09b100
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 0x4] 0x78dc09b180
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 0x1] 0x78dc09b200
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1] 0x78dc09b280
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 0x4] 0x78dc09b300
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1] 0x78dc09b380
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 0x1] 0x78dc09b400
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 0x1] 0x78dc09b480
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 0x1] 0x78dc09b500
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 0x1] 0x78dc09b580
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 0x1] 0x78dc099500
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 0x1] 0x78dc099580
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 0x1] 0x78dc099600
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 0x1] 0x78dc099680
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 0x1] 0x78dc099700
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 0x1] 0x78dc099780
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 0x4] 0x78dc099800
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 0x4] 0x78dc099880
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 0x4] 0x78dc099900
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 0x4] 0x78dc099980
	int JumpMaxCount;//[Offset: 0x344, Size: 0x4] 0x78dc099a00
	int JumpCurrentCount;//[Offset: 0x348, Size: 0x4] 0x78dc099a80
	int JumpCurrentCountPreJump;//[Offset: 0x34c, Size: 0x4] 0x78dc099b00
	delegate OnReachedJumpApex;//[Offset: 0x358, Size: 0x10] 0x78dc099b80
	delegate MovementModeChangedDelegate;//[Offset: 0x378, Size: 0x10] 0x78dc099c00
	delegate OnCharacterMovementUpdated;//[Offset: 0x388, Size: 0x10] 0x78dc099c80
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x398, Size: 0x38] 0x78dc099d00
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 0x40] 0x78dc099d80
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 0x10] 0x78dbffa420
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 0x98] 0x78dc099e80
	void UnCrouch(bool bClientSimulation);// 0xc80b29c 0x78dc0a20e0
	void StopJumping();// 0xc80b9fc 0x78dc0a21c0
	void StopAnimMontage(AnimMontage* AnimMontage);// 0xc80b744 0x78dc0a22a0
	void ServerMovePacked(const CharacterServerMovePackedBits PackedBits);// 0xc80dee8 0x78dc0a2380
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0xc80c930 0x78dc0a2460
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0xc80d7d8 0x78dc0a2540
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0xc80cf40 0x78dc0a2620
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0xc80caa0 0x78dc0a2700
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0xc80d338 0x78dc0a27e0
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0xc80da90 0x78dc0a28c0
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0xc80b128 0x78dc0a29a0
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0xc80b7f4 0x78dc0a2a80
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0xc80b40c 0x78dc0a2b60
	void OnRep_RootMotion();// 0xc80b114 0x78dc0a2c40
	void OnRep_ReplicatedBasedMovement();// 0xc80bb04 0x78dc0a2d20
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0xc80baf0 0x78dc0a2e00
	void OnRep_IsCrouched();// 0xc80ba34 0x78dc0a2ee0
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xaa7cd18 0x78dc0a2fc0
	void OnLanded(out const HitResult hit);// 0xaa7cd18 0x78dc0a30a0
	void OnJumped();// 0xc80b5a8 0x78dc0a3180
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xc80b5c4 0x78dc0a3260
	void K2_UpdateCustomMovement(float DeltaTime);// 0xaa7cd18 0x78dc0a3340
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xaa7cd18 0x78dc0a3420
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0xaa7cd18 0x78dc0a3500
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xaa7cd18 0x78dc0a35e0
	void Jump();// 0xc80ba18 0x78dc0a36c0
	bool IsPlayingRootMotion();// 0xc80b0dc 0x78dc0a37a0
	bool IsPlayingNetworkedRootMotionMontage();// 0xc80b06c 0x78dc0a3880
	bool IsJumpProvidingForce();// 0xc80b944 0x78dc0a3960
	bool HasAnyRootMotion();// 0xc80b0a4 0x78dc0a0080
	AnimMontage* GetCurrentMontage();// 0xc80b710 0x78dc0a0160
	Vector GetBaseTranslationOffset();// 0xc80bac8 0x78dc0a0240
	Rotator GetBaseRotationOffsetRotator();// 0xc80ba50 0x78dc0a0320
	float GetAnimRootMotionTranslationScale();// 0xc80b038 0x78dc0a0400
	void Crouch(bool bClientSimulation);// 0xc80b354 0x78dc0a04e0
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xc80c374 0x78dc0a05c0
	void ClientMoveResponsePacked(const CharacterMoveResponsePackedBits PackedBits);// 0xc80dde0 0x78dc0a06a0
	void ClientCheatWalk();// 0xc80b240 0x78dc0a0780
	void ClientCheatGhost();// 0xc80b208 0x78dc0a0860
	void ClientCheatFly();// 0xc80b224 0x78dc0a0940
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xc80bc18 0x78dc0a0a20
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xc80c02c 0x78dc0a0b00
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xc80c5d8 0x78dc0a0be0
	void ClientAckGoodMove(float Timestamp);// 0xc80c888 0x78dc0a0cc0
	bool CanJumpInternal();// 0xc80b984 0x78dc0a0da0
	bool CanJump();// 0xc80b9c4 0x78dc0a0e80
	bool CanCrouch();// 0xc80b25c 0x78dc0a0f60
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0xc80bb20 0x78dc0a1040

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xb0, Size: 0x30] 0x78d72d7300
	float BlendInTime;//[Offset: 0xe0, Size: 0x4] 0x78d72d7380
	AlphaBlend BlendOut;//[Offset: 0xe8, Size: 0x30] 0x78d72d5300
	float BlendOutTime;//[Offset: 0x118, Size: 0x4] 0x78d72d5380
	float BlendOutTriggerTime;//[Offset: 0x11c, Size: 0x4] 0x78d72d5400
	FName SyncGroup;//[Offset: 0x120, Size: 0x8] 0x78d72d5480
	int SyncSlotIndex;//[Offset: 0x128, Size: 0x4] 0x78d72d5500
	MarkerSyncData MarkerData;//[Offset: 0x130, Size: 0x20] 0x78d72d5580
	CompositeSection[] CompositeSections;//[Offset: 0x150, Size: 0x10] 0x78d7277f40
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x160, Size: 0x10] 0x78d7277fe0
	BranchingPoint[] BranchingPoints;//[Offset: 0x170, Size: 0x10] 0x78d7278080
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1] 0x78d72d5780
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1] 0x78d72d5800
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 0x1] 0x78d72d5880
	byte RootMotionRootLock;//[Offset: 0x183, Size: 0x1] 0x78d72d5900
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x188, Size: 0x10] 0x78d7278120
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x198, Size: 0x10] 0x78d72781c0
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a8, Size: 0x28] 0x78d72d5a80
	FName TimeStretchCurveName;//[Offset: 0x1d0, Size: 0x8] 0x78d72d5b00
	float GetDefaultBlendOutTime();// 0xc7bac00 0x78d72cc800

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x88, Size: 0x10] 0x78d7278440
	float SequenceLength;//[Offset: 0x98, Size: 0x4] 0x78d72d5000
	float RateScale;//[Offset: 0x9c, Size: 0x4] 0x78d72d5080
	RawCurveTracks RawCurveData;//[Offset: 0xa0, Size: 0x10] 0x78d72d5100
	float GetPlayLength();// 0xc7c6554 0x78d72cc8e0

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8] 0x78d72d1500
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10] 0x78d7276c80
	bool bHasDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78d72d1600
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 0x10] 0x78d7276d20

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8] 0x78dbe6a400
	float BlendTime;//[Offset: 0x8, Size: 0x4] 0x78dbe6a480
	enum BlendOption;//[Offset: 0x24, Size: 0x1] 0x78dbe52cc0

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80] 0x78d7306980
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x78d7306a00
	float GetFloatValue(float InTime);// 0xc820d00 0x78d72fa7a0

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0xc820530 0x78d72fa880
	void GetTimeRange(out float MinTime, out float MaxTime);// 0xc820634 0x78d72faa40

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10] 0x78d3610ba0

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4] 0x78cdbb3080
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1] 0x78cdbb3100
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1] 0x78cdbb3180

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60] 0x78cdbb1100

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1] 0x78cdbb2b80
	byte TangentMode;//[Offset: 0x1, Size: 0x1] 0x78cdbb2c00
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1] 0x78cdbb2c80
	float Time;//[Offset: 0x4, Size: 0x4] 0x78cdbb2d00
	float Value;//[Offset: 0x8, Size: 0x4] 0x78cdbb2d80
	float ArriveTangent;//[Offset: 0xc, Size: 0x4] 0x78cdbb2e00
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4] 0x78cdbb2e80
	float LeaveTangent;//[Offset: 0x14, Size: 0x4] 0x78cdbb2f00
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4] 0x78cdbb2f80

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4] 0x78dbede700
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4] 0x78dbedc680
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4] 0x78dbedc700
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4] 0x78dbedc780
	FName NotifyName;//[Offset: 0x40, Size: 0x8] 0x78dbedc800
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8] 0x78dbedc880
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8] 0x78dbedc900
	float Duration;//[Offset: 0x58, Size: 0x4] 0x78dbedc980
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30] 0x78dbedca00
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78dbedca80
	byte MontageTickType;//[Offset: 0x91, Size: 0x1] 0x78dbedcb00
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4] 0x78dbedcb80
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1] 0x78dbedcc00
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4] 0x78dbedcc80
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x78dbedcd00
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1] 0x78dbedcd80
	int TrackIndex;//[Offset: 0xa4, Size: 0x4] 0x78dbedce00

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8] 0x78dbedd100
	int SlotIndex;//[Offset: 0x10, Size: 0x4] 0x78dbedd180
	int SegmentIndex;//[Offset: 0x14, Size: 0x4] 0x78dbedd200
	byte LinkMethod;//[Offset: 0x18, Size: 0x1] 0x78dbedd280
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1] 0x78dbedd300
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4] 0x78dbedd380
	float SegmentLength;//[Offset: 0x20, Size: 0x4] 0x78dbedd400
	float LinkValue;//[Offset: 0x24, Size: 0x4] 0x78dbedd480
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8] 0x78dbedd500

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xaa7cd18 0x78dc13dec0
	FString GetNotifyName();// 0xc7c4138 0x78dc13dfa0

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x6c0, Size: 0x8] 0x78dc11ede0
	class AnimInstance* AnimClass;//[Offset: 0x6c8, Size: 0x8] 0x78dc11ee80
	AnimInstance* AnimScriptInstance;//[Offset: 0x6d0, Size: 0x8] 0x78d7128d00
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x6d8, Size: 0x8] 0x78d7128d80
	SingleAnimationPlayData AnimationData;//[Offset: 0x730, Size: 0x18] 0x78d7128e00
	Vector RootBoneTranslation;//[Offset: 0x758, Size: 0xc] 0x78d7128e80
	Vector LineCheckBoundsScale;//[Offset: 0x764, Size: 0xc] 0x78d7128f00
	AnimInstance*[] LinkedInstances;//[Offset: 0x7a0, Size: 0x10] 0x78dc11ef20
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x7b0, Size: 0x10] 0x78dc11efc0
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x7c0, Size: 0x10] 0x78dc11f060
	float GlobalAnimRateScale;//[Offset: 0x920, Size: 0x4] 0x78d7129100
	byte KinematicBonesUpdateType;//[Offset: 0x924, Size: 0x1] 0x78d7129180
	byte PhysicsTransformUpdateMode;//[Offset: 0x925, Size: 0x1] 0x78d7129200
	byte AnimationMode;//[Offset: 0x927, Size: 0x1] 0x78d7129280
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x929, Size: 0x1] 0x78d7129300
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x929, Size: 0x1] 0x78d7129380
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x929, Size: 0x1] 0x78d7129400
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x929, Size: 0x1] 0x78d7129480
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x929, Size: 0x1] 0x78d7127400
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x92a, Size: 0x1] 0x78d7127480
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x92a, Size: 0x1] 0x78d7127500
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x930, Size: 0x1] 0x78d7127580
	bool bAllowRigidBodySimulateDefaultBodies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x930, Size: 0x1] 0x78d7127600
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x930, Size: 0x1] 0x78d7127680
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x930, Size: 0x1] 0x78d7127700
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x931, Size: 0x1] 0x78d7127780
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x931, Size: 0x1] 0x78d7127800
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x931, Size: 0x1] 0x78d7127880
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x931, Size: 0x1] 0x78d7127900
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x931, Size: 0x1] 0x78d7127980
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x931, Size: 0x1] 0x78d7127a00
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x931, Size: 0x1] 0x78d7127a80
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x932, Size: 0x1] 0x78d7127b00
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x932, Size: 0x1] 0x78d7127b80
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x932, Size: 0x1] 0x78d7127c00
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x932, Size: 0x1] 0x78d7127c80
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x932, Size: 0x1] 0x78d7127d00
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x932, Size: 0x1] 0x78d7127d80
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x932, Size: 0x1] 0x78d7127e00
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x932, Size: 0x1] 0x78d7127e80
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x933, Size: 0x1] 0x78d7127f00
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x933, Size: 0x1] 0x78d7127f80
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x933, Size: 0x1] 0x78d7128000
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x933, Size: 0x1] 0x78d7128080
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x933, Size: 0x1] 0x78d7128100
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x933, Size: 0x1] 0x78d7128180
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x933, Size: 0x1] 0x78d7128200
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x933, Size: 0x1] 0x78d7128280
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x934, Size: 0x1] 0x78d7128300
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x934, Size: 0x1] 0x78d7128380
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x934, Size: 0x1] 0x78d7128400
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x934, Size: 0x1] 0x78d7126380
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x936, Size: 0x2] 0x78d7126400
	enum MassMode;//[Offset: 0x938, Size: 0x1] 0x78dc11f100
	float UniformMass;//[Offset: 0x93c, Size: 0x4] 0x78d7126500
	float TotalMass;//[Offset: 0x940, Size: 0x4] 0x78d7126580
	float Density;//[Offset: 0x944, Size: 0x4] 0x78d7126600
	float MinPerParticleMass;//[Offset: 0x948, Size: 0x4] 0x78d7126680
	float ClothBlendWeight;//[Offset: 0x94c, Size: 0x4] 0x78d7126700
	float EdgeStiffness;//[Offset: 0x950, Size: 0x4] 0x78d7126780
	float BendingStiffness;//[Offset: 0x954, Size: 0x4] 0x78d7126800
	float AreaStiffness;//[Offset: 0x958, Size: 0x4] 0x78d7126880
	float VolumeStiffness;//[Offset: 0x95c, Size: 0x4] 0x78d7126900
	float StrainLimitingStiffness;//[Offset: 0x960, Size: 0x4] 0x78d7126980
	float ShapeTargetStiffness;//[Offset: 0x964, Size: 0x4] 0x78d7126a00
	bool bWaitForParallelClothTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968, Size: 0x1] 0x78d7126a80
	FName[] DisallowedAnimCurves;//[Offset: 0x970, Size: 0x10] 0x78dc11f1a0
	BodySetup* BodySetup;//[Offset: 0x980, Size: 0x8] 0x78d7126b80
	delegate OnConstraintBroken;//[Offset: 0x990, Size: 0x10] 0x78d7126c00
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x9a0, Size: 0x8] 0x78dc11f240
	float TeleportDistanceThreshold;//[Offset: 0xa78, Size: 0x4] 0x78d7126c80
	float TeleportRotationThreshold;//[Offset: 0xa7c, Size: 0x4] 0x78d7126d00
	uint32 LastPoseTickFrame;//[Offset: 0xa88, Size: 0x4] 0x78d7126d80
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xae0, Size: 0x8] 0x78d7126e00
	delegate OnAnimInitialized;//[Offset: 0xbb0, Size: 0x10] 0x78d7126e80
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0xc9e0a10 0x78d70fbae0
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0xc9dfb1c 0x78d70fbbc0
	void ToggleDisablePostProcessBlueprint();// 0xc9e1c98 0x78d70fbca0
	void TermBodiesBelow(FName ParentBoneName);// 0xc9de568 0x78d70fbd80
	void SuspendClothingSimulation();// 0xc9dfc40 0x78d70fbe60
	void Stop();// 0xc9e048c 0x78d70fbf40
	void SnapshotPose(out PoseSnapshot Snapshot);// 0xc9dfd58 0x78d70fc020
	void SetUpdateClothInEditor(const bool NewUpdateState);// 0xc9df788 0x78d70fc100
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0xc9df838 0x78d70fc1e0
	void SetTeleportRotationThreshold(float Threshold);// 0xc9df2bc 0x78d70fc2c0
	void SetTeleportDistanceThreshold(float Threshold);// 0xc9df1e0 0x78d70fc3a0
	void SetPosition(float InPos, bool bFireNotifies);// 0xc9e0358 0x78d70fc480
	void SetPlayRate(float Rate);// 0xc9e027c 0x78d70fc560
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0xc9de410 0x78d70fc640
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0xc9def68 0x78d70fc720
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0xc9dff2c 0x78d70fc800
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0xc9de360 0x78d70fc8e0
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0xc9dec80 0x78d70fc9c0
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0xc9dee78 0x78d70f90e0
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0xc9e1bb0 0x78d70f91c0
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0xc9df6d8 0x78d70f92a0
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0xc9dd7b8 0x78d70f9380
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0xc9dd8b4 0x78d70f9460
	void SetClothMaxDistanceScale(float Scale);// 0xc9dfc7c 0x78d70f9540
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0xc9df0b4 0x78d70f9620
	void SetAnimClass(class Object NewClass);// 0xc9e0ecc 0x78d70f9700
	void SetAnimationMode(byte InAnimationMode);// 0xc9e0728 0x78d70f97e0
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0xc9e0550 0x78d70f98c0
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0xc9dd444 0x78d70f99a0
	void SetAllowRigidBodyAnimNodeSimulateDefaultBodies(bool bAllow, bool bReinitAnim);// 0xc9df908 0x78d70f9a80
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0xc9dfa24 0x78d70f9b60
	void SetAllowedAnimCurvesEvaluation(out const FName[] list, bool bAllow);// 0xc9df398 0x78d70f9c40
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0xc9df604 0x78d70f9d20
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0xc9ddb88 0x78d70f9e00
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0xc9ddcd0 0x78d70f9ee0
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0xc9dd9f8 0x78d70f9fc0
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0xc9de4b8 0x78d70fa0a0
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0xc9de100 0x78d70fa180
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0xc9de210 0x78d70fa260
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0xc9ddf64 0x78d70fa340
	void ResumeClothingSimulation();// 0xc9dfc2c 0x78d70fa420
	void ResetClothTeleportMode();// 0xc9dfbe0 0x78d70fa500
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0xc9e07d0 0x78d70fa5e0
	void ResetAllowedAnimCurveEvaluation();// 0xc9df4d4 0x78d70fa6c0
	void ResetAllBodiesSimulatePhysics();// 0xc9de1fc 0x78d70fa7a0
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0xc9e05f8 0x78d70fa880
	void Play(bool bLooping);// 0xc9e04a0 0x78d70fa960
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0xc9e0074 0x78d70faa40
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0xc9e0b60 0x78d70fab20
	void LinkAnimClassLayers(class AnimInstance InClass);// 0xc9e0ab8 0x78d70fac00
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0xc9dea7c 0x78d70face0
	bool IsPlaying();// 0xc9e0454 0x78d70f7400
	bool IsClothingSimulationSuspended();// 0xc9dfbf4 0x78d70f74e0
	bool IsBodyGravityEnabled(FName BoneName);// 0xc9dedc4 0x78d70f75c0
	bool HasValidAnimationInstance();// 0xc9e0878 0x78d70f76a0
	float GetTeleportRotationThreshold();// 0xc9df364 0x78d70f7780
	float GetTeleportDistanceThreshold();// 0xc9df288 0x78d70f7860
	bool GetStringAttribute_Ref(out const FName BoneName, out const FName AttributeName, out FString OutValue, enum LookupType);// 0xc9e1658 0x78d70f7940
	bool GetStringAttribute(out const FName BoneName, out const FName AttributeName, FString DefaultValue, out FString OutValue, enum LookupType);// 0xc9e0f7c 0x78d70f7a20
	Vector GetSkeletalCenterOfMass();// 0xc9de940 0x78d70f7b00
	AnimInstance* GetPostProcessInstance();// 0xc9e0e30 0x78d70f7be0
	float GetPosition();// 0xc9e0324 0x78d70f7cc0
	float GetPlayRate();// 0xc9e0248 0x78d70f7da0
	float GetMorphTarget(FName MorphTargetName);// 0xc9dfe68 0x78d70f7e80
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0xc9e0960 0x78d70f7f60
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0xc9e08b0 0x78d70f8040
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0xc9e0c50 0x78d70f8120
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0xc9e0d80 0x78d70f8200
	bool GetIntegerAttribute_Ref(out const FName BoneName, out const FName AttributeName, out int OutValue, enum LookupType);// 0xc9e1848 0x78d70f82e0
	bool GetIntegerAttribute(out const FName BoneName, out const FName AttributeName, int DefaultValue, out int OutValue, enum LookupType);// 0xc9e1258 0x78d70f83c0
	bool GetFloatAttribute_Ref(out const FName BoneName, out const FName AttributeName, out float OutValue, enum LookupType);// 0xc9e19fc 0x78d70f84a0
	bool GetFloatAttribute(out const FName BoneName, out const FName AttributeName, float DefaultValue, out float OutValue, enum LookupType);// 0xc9e1458 0x78d70f8580
	bool GetDisablePostProcessBlueprint();// 0xc9e1c60 0x78d70f8660
	bool GetDisableAnimCurves();// 0xc9df6b4 0x78d70f8740
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0xc9dd29c 0x78d70f8820
	float GetClothMaxDistanceScale();// 0xc9dfd24 0x78d70f8900
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0xc9df1ac 0x78d70f89e0
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0xc9de978 0x78d70f8ac0
	AnimInstance* GetAnimInstance();// 0xc9e0e64 0x78d70f8ba0
	class Object GetAnimClass();// 0xc9e0e98 0x78d70f8c80
	byte GetAnimationMode();// 0xc9e06f4 0x78d70f8d60
	bool GetAllowRigidBodyAnimNodeSimulateDefaultBodies();// 0xc9df8e8 0x78d70f8e40
	bool GetAllowRigidBodyAnimNode();// 0xc9dfa00 0x78d70f8f20
	bool GetAllowedAnimCurveEvaluate();// 0xc9df5e4 0x78d70f9000
	void ForceClothNextUpdateTeleportAndReset();// 0xc9dfc54 0x78d70f5720
	void ForceClothNextUpdateTeleport();// 0xc9dfc68 0x78d70f5800
	FName FindConstraintBoneName(int ConstraintIndex);// 0xc9dd708 0x78d70f58e0
	void EnablePhysicsAnim();// 0xc9e1cac 0x78d70f59c0
	void DisablePhysicsAnim();// 0xc9e1cc0 0x78d70f5aa0
	void ClearMorphTargets();// 0xc9dff18 0x78d70f5b80
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0xc9dd5cc 0x78d70f5c60
	void BindClothToMasterPoseComponent();// 0xc9dfbcc 0x78d70f5d40
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0xc9df4e8 0x78d70f5e20
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0xc9de610 0x78d70f5f00
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0xc9de7a8 0x78d70f5fe0
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0xc9dde18 0x78d70f60c0

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x4a0, Size: 0x8] 0x78d70eac80
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x4a8, Size: 0x8] 0x78d70ead00
	enum[] SkinCacheUsage;//[Offset: 0x4b0, Size: 0x10] 0x78dc11dd00
	VertexOffsetUsage[] VertexOffsetUsage;//[Offset: 0x4c0, Size: 0x10] 0x78dc11dda0
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x5c8, Size: 0x8] 0x78d70eae80
	int ForcedLodModel;//[Offset: 0x5d0, Size: 0x4] 0x78d70eaf00
	int ForcedShadowLodModel;//[Offset: 0x5d4, Size: 0x4] 0x78d70eaf80
	int MinLodModel;//[Offset: 0x5d8, Size: 0x4] 0x78d70eb000
	float StreamingDistanceMultiplier;//[Offset: 0x5e4, Size: 0x4] 0x78d70eb080
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5f0, Size: 0x10] 0x78dc11de40
	enum VisibilityBasedAnimTickOption;//[Offset: 0x624, Size: 0x1] 0x78dc11dee0
	bool bShouldTickBasedOnAnimationDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x625, Size: 0x1] 0x78d70eb200
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x627, Size: 0x1] 0x78d70eb280
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x627, Size: 0x1] 0x78d70eb300
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x627, Size: 0x1] 0x78d70eb380
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x627, Size: 0x1] 0x78d70eb400
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x627, Size: 0x1] 0x78d70eb480
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x628, Size: 0x1] 0x78d70eb500
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x628, Size: 0x1] 0x78d70eb580
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x628, Size: 0x1] 0x78d70e9500
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x628, Size: 0x1] 0x78d70e9580
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x628, Size: 0x1] 0x78d70e9600
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x628, Size: 0x1] 0x78d70e9680
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x628, Size: 0x1] 0x78d70e9700
	bool bCachedHasDisplacementMarker;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x628, Size: 0x1] 0x78d70e9780
	bool bTickDueToDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x629, Size: 0x1] 0x78d70e9800
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x629, Size: 0x1] 0x78d70e9880
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x629, Size: 0x1] 0x78d70e9900
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x629, Size: 0x1] 0x78d70e9980
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x629, Size: 0x1] 0x78d70e9a00
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x629, Size: 0x1] 0x78d70e9a80
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x629, Size: 0x1] 0x78d70e9b00
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x629, Size: 0x1] 0x78d70e9b80
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x62a, Size: 0x1] 0x78d70e9c00
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x62a, Size: 0x1] 0x78d70e9c80
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x62c, Size: 0x4] 0x78d70e9d00
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x640, Size: 0x1c] 0x78d70e9d80
	Matrix CachedWorldToLocalTransform;//[Offset: 0x660, Size: 0x40] 0x78d70e9e00
	void UnloadSkinWeightProfile(FName InProfileName);// 0xc9e8478 0x78d70f5100
	void UnHideBoneByName(FName BoneName);// 0xc9e75bc 0x78d70f51e0
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0xc9e7acc 0x78d70f52c0
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0xc9e78f8 0x78d70f53a0
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0xc9e7384 0x78d70f5480
	void ShowAllMaterialSections(int LODIndex);// 0xc9e72dc 0x78d70f5560
	void SetVertexOffsetUsage(int LODIndex, int Usage);// 0xc9e829c 0x78d70f5640
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0xc9e8868 0x78d70f1d60
	bool SetSkinWeightProfile(FName InProfileName);// 0xc9e8534 0x78d70f1e40
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0xc9e8690 0x78d70f1f20
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0xc9e8cb4 0x78d70f2000
	void SetRenderStatic(bool bNewValue);// 0xc9e7130 0x78d70f20e0
	void SetPreSkinningOffsets(int LODIndex, Vector[] Offsets);// 0xc9e80f4 0x78d70f21c0
	void SetPostSkinningOffsets(int LODIndex, Vector[] Offsets);// 0xc9e7f4c 0x78d70f22a0
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0xc9e9498 0x78d70f2380
	void SetMinLOD(int InNewMinLOD);// 0xc9e93bc 0x78d70f2460
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0xc9e7e50 0x78d70f2540
	void SetForcedShadowLOD(int InNewForcedShadowLOD);// 0xc9e926c 0x78d70f2620
	void SetForcedLOD(int InNewForcedLOD);// 0xc9e9314 0x78d70f2700
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0xc9e90a4 0x78d70f27e0
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0xc9e9154 0x78d70f28c0
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0xc9e8ffc 0x78d70f29a0
	bool IsUsingSkinWeightProfile();// 0xc9e843c 0x78d70f2a80
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0xc9e71e0 0x78d70f2b60
	bool IsBoneHiddenByName(FName BoneName);// 0xc9e7508 0x78d70f2c40
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0xc9e7664 0x78d70f2d20
	int GetVertexOffsetUsage(int LODIndex);// 0xc9e838c 0x78d70f2e00
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0xc9e8998 0x78d70f2ee0
	FName GetSocketBoneName(FName InSocketName);// 0xc9e8db8 0x78d70f2fc0
	Vector GetRefPosePosition(int BoneIndex);// 0xc9e7ca0 0x78d70f30a0
	FName GetParentBone(FName BoneName);// 0xc9e8c04 0x78d70f3180
	int GetNumLODs();// 0xc9e9464 0x78d70f3260
	int GetNumBones();// 0xc9e8fc8 0x78d70f3340
	int GetForcedShadowLOD();// 0xc9e9204 0x78d70f3420
	int GetForcedLOD();// 0xc9e9238 0x78d70f3500
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0xc9e8afc 0x78d70f35e0
	FName GetCurrentSkinWeightProfileName();// 0xc9e845c 0x78d70f36c0
	FName GetBoneName(int BoneIndex);// 0xc9e8e68 0x78d70f37a0
	int GetBoneIndex(FName BoneName);// 0xc9e8f18 0x78d70f3880
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0xc9e7758 0x78d70f3960
	void ClearVertexColorOverride(int LODIndex);// 0xc9e87c0 0x78d70f0080
	void ClearSkinWeightProfile();// 0xc9e8520 0x78d70f0160
	void ClearSkinWeightOverride(int LODIndex);// 0xc9e85e8 0x78d70f0240
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0xc9e7d54 0x78d70f0320

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x470, Size: 0x10] 0x78dbf2ccc0
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x490, Size: 0x1] 0x78dbfafc80
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0xc94eaec 0x78dbfb0780
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0xc94ebdc 0x78dbfb0860
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0xc94ecd0 0x78dbfb0940
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0xc94ee14 0x78dbfb0a20
	FName[] GetMaterialSlotNames();// 0xc94eed0 0x78dbfb0b00
	MaterialInterface*[] GetMaterials();// 0xc94f064 0x78dbfb0be0
	int GetMaterialIndex(FName MaterialSlotName);// 0xc94efac 0x78dbfb0cc0

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4] 0x78dbf63200
	byte Weights;//[Offset: 0x30, Size: 0x1] 0x78dbf63280

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x80, Size: 0x8] 0x78d7452980
	BoxSphereBounds ImportedBounds;//[Offset: 0x88, Size: 0x1c] 0x78d7452a00
	BoxSphereBounds ExtendedBounds;//[Offset: 0xa4, Size: 0x1c] 0x78d7452a80
	Vector PositiveBoundsExtension;//[Offset: 0xc0, Size: 0xc] 0x78d7452b00
	Vector NegativeBoundsExtension;//[Offset: 0xcc, Size: 0xc] 0x78d7452b80
	SkeletalMaterial[] Materials;//[Offset: 0xd8, Size: 0x10] 0x78d733ac40
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xe8, Size: 0x10] 0x78d733ace0
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xf8, Size: 0x10] 0x78d733ad80
	PerPlatformInt MinLOD;//[Offset: 0x158, Size: 0x4] 0x78d7452d80
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x15c, Size: 0x1] 0x78d7452e00
	byte SkelMirrorAxis;//[Offset: 0x15d, Size: 0x1] 0x78d7452e80
	byte SkelMirrorFlipAxis;//[Offset: 0x15e, Size: 0x1] 0x78d7452f00
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15f, Size: 0x1] 0x78d7452f80
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15f, Size: 0x1] 0x78d7453000
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15f, Size: 0x1] 0x78d7453080
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15f, Size: 0x1] 0x78d7453100
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15f, Size: 0x1] 0x78d7453180
	BodySetup* BodySetup;//[Offset: 0x160, Size: 0x8] 0x78d7451100
	PhysicsAsset* PhysicsAsset;//[Offset: 0x168, Size: 0x8] 0x78d7451180
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x170, Size: 0x8] 0x78d7451200
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x178, Size: 0x10] 0x78d733ae20
	MorphTarget*[] MorphTargets;//[Offset: 0x188, Size: 0x10] 0x78d733aec0
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x310, Size: 0x8] 0x78d733af60
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x318, Size: 0x10] 0x78d733b000
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x328, Size: 0x30] 0x78d7451400
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10] 0x78d733b0a0
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x368, Size: 0x10] 0x78d733b140
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x388, Size: 0x10] 0x78d733b1e0
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0xc9d8dcc 0x78d741c2c0
	void SetDefaultAnimatingRig(Object* InAnimatingRig);// 0xc9d8c4c 0x78d741c3a0
	int NumSockets();// 0xc9d8570 0x78d741c480
	FString[] K2_GetAllMorphTargetNames();// 0xc9d8928 0x78d741c560
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0xc9d83bc 0x78d741c640
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0xc9d84c0 0x78d741c720
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0xc9d8a9c 0x78d741c800
	BoxSphereBounds GetImportedBounds();// 0xc9d8e74 0x78d741c8e0
	Object* GetDefaultAnimatingRig();// 0xc9d8b4c 0x78d741c9c0
	BoxSphereBounds GetBounds();// 0xc9d8ee0 0x78d74190e0
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0xc9d85a4 0x78d74191c0
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0xc9d8770 0x78d74192a0
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0xc9d8878 0x78d7419380

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10] 0x78d733a740
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10] 0x78d733a7e0
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10] 0x78d7453a00
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10] 0x78d733a880
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10] 0x78d733a920
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50] 0x78d7453b80
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10] 0x78d733a9c0
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10] 0x78d733aa60
	AssetUserData*[] AssetUserData;//[Offset: 0x380, Size: 0x10] 0x78d733ab00

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbf63500
	int ParentIndex;//[Offset: 0x8, Size: 0x4] 0x78dbf63580
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1] 0x78dbf63600

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8] 0x78dbf63b00
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8] 0x78dbf63b80
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8] 0x78dbf63c00

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8] 0x78d7453d80
	FName BoneName;//[Offset: 0x30, Size: 0x8] 0x78d7453e00
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc] 0x78d7453e80
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc] 0x78d7453f00
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc] 0x78d7453f80
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x78d7454000
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0xc9e5d58 0x78d741bd80
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0xc9e5e90 0x78d741be60

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8] 0x78d72deb80
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10] 0x78d727b000

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10] 0x78dbee5a00
	float BlendScale;//[Offset: 0x10, Size: 0x4] 0x78dbee5a80

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x78dbe6ac00

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8] 0x78dbf63a00
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10] 0x78dbf21780

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8] 0x78dbf60a00
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8] 0x78dbf60a80
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14] 0x78dbf60b00

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4] 0x78dbf62700
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1] 0x78dbf62780

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4] 0x78dbf62d80
	float LODHysteresis;//[Offset: 0x4, Size: 0x4] 0x78dbf62e00
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10] 0x78dbf21d20
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14] 0x78dbf62f00
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c] 0x78dbf61900
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10] 0x78dbf21dc0
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10] 0x78dbf21e60
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4] 0x78dbf61a80
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8] 0x78dbf61b00
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8] 0x78dbf61b80
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10] 0x78dbf61c00
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1] 0x78dbf21f00
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1] 0x78dbf61d00
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1] 0x78dbf61d80
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1] 0x78dbf61e00
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1] 0x78dbf61e80

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbf0f780
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbf0d700
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbf0d780
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78dbf0d800
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78dbf0d880
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78dbf0d900
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78dbf0d980
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78dbf0da00
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4] 0x78dbf0da80
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4] 0x78dbf0db00
	float ThresholdUV;//[Offset: 0xc, Size: 0x4] 0x78dbf0db80
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4] 0x78dbf0dc00

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1] 0x78dbf62f80
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4] 0x78dbf63000
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4] 0x78dbf63080
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4] 0x78dbf63100
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4] 0x78dbf63180
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4] 0x78dbf61100
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1] 0x78dbf61180
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1] 0x78dbf61200
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1] 0x78dbf61280
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1] 0x78dbf61300
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1] 0x78dbf61380
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1] 0x78dbf61400
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1] 0x78dbf61480
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4] 0x78dbf61500
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4] 0x78dbf61580
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4] 0x78dbf61600
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x78dbf61680
	float VolumeImportance;//[Offset: 0x30, Size: 0x4] 0x78dbf61700
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x78dbf61780
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1] 0x78dbf61800
	int BaseLOD;//[Offset: 0x38, Size: 0x4] 0x78dbf61880

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xb0, Size: 0x4] 0x78d72d8180
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb8, Size: 0x10] 0x78d7277cc0
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd8, Size: 0x8] 0x78d72d8280
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xe0, Size: 0x8] 0x78d72d8300
	byte AdditiveAnimType;//[Offset: 0x158, Size: 0x1] 0x78d72d8380
	byte RefPoseType;//[Offset: 0x159, Size: 0x1] 0x78d72d8400
	AnimSequence* RefPoseSeq;//[Offset: 0x160, Size: 0x8] 0x78d72d6380
	int RefFrameIndex;//[Offset: 0x168, Size: 0x4] 0x78d72d6400
	FName RetargetSource;//[Offset: 0x16c, Size: 0x8] 0x78d72d6480
	enum Interpolation;//[Offset: 0x174, Size: 0x1] 0x78d7277d60
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 0x1] 0x78d72d6580
	byte RootMotionRootLock;//[Offset: 0x176, Size: 0x1] 0x78d72d6600
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x177, Size: 0x1] 0x78d72d6680
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1] 0x78d72d6700
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1] 0x78d72d6780
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x180, Size: 0x10] 0x78d7277e00
	BakedCustomAttributePerBoneData[] BakedPerBoneCustomAttributeData;//[Offset: 0x1a8, Size: 0x10] 0x78d7277ea0

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4] 0x78dbee1880

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10] 0x78d7278d00

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10] 0x78d72d3c00

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8] 0x78d72d5c00

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8] 0x78dbee1700
	float Time;//[Offset: 0x8, Size: 0x4] 0x78dbee1780

--------------------------------
Class: BakedCustomAttributePerBoneData
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4] 0x78dbf0a200
	BakedStringCustomAttribute[] StringAttributes;//[Offset: 0x8, Size: 0x10] 0x78dbe5d4e0
	BakedIntegerCustomAttribute[] IntAttributes;//[Offset: 0x18, Size: 0x10] 0x78dbe5d620
	BakedFloatCustomAttribute[] FloatAttributes;//[Offset: 0x28, Size: 0x10] 0x78dbe5d760

--------------------------------
Class: BakedStringCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8] 0x78dbf0a280
	StringCurve StringCurve;//[Offset: 0x8, Size: 0x88] 0x78dbf0a500

--------------------------------
Class: StringCurve.IndexedCurve
	FString DefaultValue;//[Offset: 0x68, Size: 0x10] 0x78dbf0a300
	StringCurveKey[] Keys;//[Offset: 0x78, Size: 0x10] 0x78dbe5d440

--------------------------------
Class: StringCurveKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78dbf0a380
	FString Value;//[Offset: 0x8, Size: 0x10] 0x78dbf0a400

--------------------------------
Class: BakedIntegerCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8] 0x78dbf08500
	IntegralCurve IntCurve;//[Offset: 0x8, Size: 0x80] 0x78dbf08800

--------------------------------
Class: IntegralCurve.IndexedCurve
	IntegralKey[] Keys;//[Offset: 0x68, Size: 0x10] 0x78dbe5d580
	int DefaultValue;//[Offset: 0x78, Size: 0x4] 0x78dbf08700
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x78dbf08780

--------------------------------
Class: IntegralKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78dbf08580
	int Value;//[Offset: 0x4, Size: 0x4] 0x78dbf08600

--------------------------------
Class: BakedFloatCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8] 0x78dbf08900
	SimpleCurve FloatCurve;//[Offset: 0x8, Size: 0x80] 0x78dbf08b80

--------------------------------
Class: SimpleCurve.RealCurve.IndexedCurve
	byte InterpMode;//[Offset: 0x6e, Size: 0x1] 0x78dbf08980
	SimpleCurveKey[] Keys;//[Offset: 0x70, Size: 0x10] 0x78dbe5d6c0

--------------------------------
Class: SimpleCurveKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78dbf08a00
	float Value;//[Offset: 0x4, Size: 0x4] 0x78dbf08a80

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe08580

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10] 0x78d73397a0
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10] 0x78d7339840
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10] 0x78d73398e0
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x1c] 0x78d7440380
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1] 0x78d7440400
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8] 0x78d7440480
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10] 0x78d7339980

--------------------------------
Class: SkeletalBodySetup.BodySetup.BodySetupCore.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78d7440100
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2a0, Size: 0x10] 0x78d7339700

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8] 0x78dbf3a400
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24] 0x78dbf3a480

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8] 0x78dbf3a500
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78dbf38480
	float OrientationStrength;//[Offset: 0xc, Size: 0x4] 0x78dbf38500
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4] 0x78dbf38580
	float PositionStrength;//[Offset: 0x14, Size: 0x4] 0x78dbf38600
	float VelocityStrength;//[Offset: 0x18, Size: 0x4] 0x78dbf38680
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4] 0x78dbf38700
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4] 0x78dbf38780

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1c0] 0x78d7443b80
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e8, Size: 0x10] 0x78d7339660
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f8, Size: 0x10c] 0x78d7443c80

--------------------------------
Class: ConstraintInstance.ConstraintInstanceBase
	FName JointName;//[Offset: 0x18, Size: 0x8] 0x78dbf09080
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8] 0x78dbf09100
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8] 0x78dbf09180
	Vector Pos1;//[Offset: 0x30, Size: 0xc] 0x78dbf09200
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc] 0x78dbf09280
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc] 0x78dbf09300
	Vector Pos2;//[Offset: 0x54, Size: 0xc] 0x78dbf09380
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc] 0x78dbf09400
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc] 0x78dbf09480
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc] 0x78dbf07400
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1] 0x78dbf07480
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x10c] 0x78dbf06400

--------------------------------
Class: ConstraintInstanceBase

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4] 0x78dbf07500
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4] 0x78dbf07580
	float ProjectionLinearAlpha;//[Offset: 0x8, Size: 0x4] 0x78dbf07600
	float ProjectionAngularAlpha;//[Offset: 0xc, Size: 0x4] 0x78dbf07680
	float LinearBreakThreshold;//[Offset: 0x10, Size: 0x4] 0x78dbf07700
	float AngularBreakThreshold;//[Offset: 0x14, Size: 0x4] 0x78dbf07780
	LinearConstraint LinearLimit;//[Offset: 0x18, Size: 0x1c] 0x78dbf07a00
	ConeConstraint ConeLimit;//[Offset: 0x34, Size: 0x20] 0x78dbf07c80
	TwistConstraint TwistLimit;//[Offset: 0x54, Size: 0x1c] 0x78dbf08080
	LinearDriveConstraint LinearDrive;//[Offset: 0x70, Size: 0x4c] 0x78dbf08100
	AngularDriveConstraint AngularDrive;//[Offset: 0xbc, Size: 0x4c] 0x78dbf08180
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x78dbf08200
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1] 0x78dbf08280
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1] 0x78dbf08300
	bool bEnableSoftProjection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 0x1] 0x78dbf08380
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 0x1] 0x78dbf08400
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 0x1] 0x78dbf06380

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4] 0x78dbf07800
	byte XMotion;//[Offset: 0x18, Size: 0x1] 0x78dbf07880
	byte YMotion;//[Offset: 0x19, Size: 0x1] 0x78dbf07900
	byte ZMotion;//[Offset: 0x1a, Size: 0x1] 0x78dbf07980

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x78dbf07e00
	float Damping;//[Offset: 0x4, Size: 0x4] 0x78dbf07e80
	float Restitution;//[Offset: 0x8, Size: 0x4] 0x78dbf07f00
	float ContactDistance;//[Offset: 0xc, Size: 0x4] 0x78dbf07f80
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78dbf08000

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4] 0x78dbf07a80
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4] 0x78dbf07b00
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1] 0x78dbf07b80
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1] 0x78dbf07c00

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4] 0x78dbf07d00
	byte TwistMotion;//[Offset: 0x18, Size: 0x1] 0x78dbf07d80

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc] 0x78dbf06480
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc] 0x78dbf06500
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10] 0x78dbf06580
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10] 0x78dbf06600
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10] 0x78dbf06680
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78dbf06700

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x78dbf06880
	float Damping;//[Offset: 0x4, Size: 0x4] 0x78dbf06900
	float MaxForce;//[Offset: 0x8, Size: 0x4] 0x78dbf06980
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78dbf06a00
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x78dbf06a80

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10] 0x78dbf06780
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10] 0x78dbf06800
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10] 0x78dbf06b00
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc] 0x78dbf06b80
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc] 0x78dbf06c00
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1] 0x78dbf06c80

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x10c] 0x78dbf39f80
	FName ProfileName;//[Offset: 0x10c, Size: 0x8] 0x78dbf3a000

--------------------------------
Class: SolverIterations
	float FixedTimeStep;//[Offset: 0x0, Size: 0x4] 0x78dbf3a080
	int SolverIterations;//[Offset: 0x4, Size: 0x4] 0x78dbf3a100
	int JointIterations;//[Offset: 0x8, Size: 0x4] 0x78dbf3a180
	int CollisionIterations;//[Offset: 0xc, Size: 0x4] 0x78dbf3a200
	int SolverPushOutIterations;//[Offset: 0x10, Size: 0x4] 0x78dbf3a280
	int JointPushOutIterations;//[Offset: 0x14, Size: 0x4] 0x78dbf3a300
	int CollisionPushOutIterations;//[Offset: 0x18, Size: 0x4] 0x78dbf3a380

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50] 0x78d7104f00
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50] 0x78d7104fc0
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50] 0x78d7105080
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28] 0x78d742f400
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28] 0x78d742f480

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8] 0x78dbf34500
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x78dbf34580

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8] 0x78d742df00

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4] 0x78d7452280
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1] 0x78d7452300
	bool bOverrideLODStreamingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x78d7452380
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x36, Size: 0x1] 0x78d7452400
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4] 0x78d7452480
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4] 0x78d7452500
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10] 0x78d733aba0

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8] 0x78dbff6500

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4] 0x78dbf62200
	float LODHysteresis;//[Offset: 0x4, Size: 0x4] 0x78dbf62280
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1] 0x78dbf21b40
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10] 0x78dbf21be0
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10] 0x78dbf21c80
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4] 0x78dbf62580
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8] 0x78dbf62600
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c] 0x78dbf62680

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbf62380
	FName BoneName;//[Offset: 0x4, Size: 0x8] 0x78dbf62400

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8] 0x78d7277220
	byte BlueprintType;//[Offset: 0x58, Size: 0x1] 0x78d72bea80
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x78d72beb00
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x78d72beb80
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x78d72bec00
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4] 0x78d72bec80
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8] 0x78d72bed00
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10] 0x78d72772c0
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10] 0x78d7277360
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10] 0x78d7277400
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8] 0x78d72bef00

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8] 0x78d72774a0
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8] 0x78d7277540
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78d72bef80
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10] 0x78d72bf000

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10] 0x78d733b320
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10] 0x78d733b3c0
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8] 0x78d7450200

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8] 0x78d733b460
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8] 0x78d744ea00
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48] 0x78d744ea80
	FName AttachToName;//[Offset: 0x80, Size: 0x8] 0x78d744eb00
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8] 0x78d744eb80
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8] 0x78d744ec00
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78d744ec80
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10] 0x78d733b500
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10] 0x78d733b5a0
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10] 0x78d744ee00
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8] 0x78d744ee80

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10] 0x78dbe5e200
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x78dbee6500

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8] 0x78dbee8400
	int ArrayIndex;//[Offset: 0x8, Size: 0x4] 0x78dbee6380
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8] 0x78dbee6400

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8] 0x78dbee6d80
	FString DataValue;//[Offset: 0x8, Size: 0x10] 0x78dbee6e00

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4] 0x78d7473880
	byte LengthMode;//[Offset: 0x2c, Size: 0x1] 0x78d7473900
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x78d7473980
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1] 0x78d7473a00
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1] 0x78d7473a80
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1] 0x78d7473b00
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10] 0x78d733de40
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10] 0x78d733dee0
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10] 0x78d733df80
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10] 0x78d733e020
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10] 0x78d733e0c0
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10] 0x78d7473e00
	FName VariableName;//[Offset: 0x90, Size: 0x8] 0x78d7473e80
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8] 0x78d7473f00
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8] 0x78d7473f80
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8] 0x78d7474000

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8] 0x78dbf6fc00
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8] 0x78dbf6fc80

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8] 0x78dbf6ff00
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78dbf6ff80

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8] 0x78dbf6fd00

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8] 0x78dbf6fe80

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8] 0x78dbf6fd80

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80] 0x78d7307a80
	Vector GetVectorValue(float InTime);// 0xc82498c 0x78d72f9fc0

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8] 0x78dbf6fe00

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80] 0x78d7306380
	float AdjustHue;//[Offset: 0x230, Size: 0x4] 0x78d7306400
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4] 0x78d7306480
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4] 0x78d7306500
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4] 0x78d7306580
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4] 0x78d7306600
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4] 0x78d7306680
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4] 0x78d7306700
	LinearColor GetLinearColorValue(float InTime);// 0xc8234e4 0x78d72fa5e0
	LinearColor GetClampedLinearColorValue(float InTime);// 0xc823428 0x78d72fa6c0

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8] 0x78dbee6580
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8] 0x78dbe5e2a0

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10] 0x78d7331d20
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10] 0x78d7331dc0

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8] 0x78dbe5eb60
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8] 0x78dbf16000
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20] 0x78dbf16180
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48] 0x78dbf16200

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8] 0x78dbe5ec00
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8] 0x78dbf16080
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10] 0x78dbf16100

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8] 0x78dc0f8e80
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1] 0x78dc0f8f00
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1] 0x78dc0f8f80
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1] 0x78dc0f9000
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1] 0x78dc0f9080
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1] 0x78dc0f9100
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1] 0x78dc0f9180
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10] 0x78dc0f9200
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10] 0x78dc0f9280
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10] 0x78dc0f9300
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10] 0x78dc0f9380
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70] 0x78dc0f9400
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10] 0x78dbffec00
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0xc7ad5d0 0x78dc104920
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0xc7aef00 0x78dc104a00
	Pawn* TryGetPawnOwner();// 0xc7b0d38 0x78dc104ae0
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0xc7b0388 0x78dc104bc0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0xc7b0b70 0x78dc104ca0
	void SetRootMotionMode(byte Value);// 0xc7aead0 0x78dc104d80
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0xc7b0a98 0x78dc104e60
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0xc7b09c0 0x78dc104f40
	void SetMorphTarget(FName MorphTargetName, float Value);// 0xc7ad8e0 0x78dc105020
	void SavePoseSnapshot(FName SnapshotName);// 0xc7b0c88 0x78dc105100
	void ResetDynamics(enum InTeleportType);// 0xc7ad07c 0x78dc1051e0
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0xc7b047c 0x78dc1052c0
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0xc7b0734 0x78dc1053a0
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0xc7afebc 0x78dc105480
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0xc7affb0 0x78dc105560
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0xc7af5a0 0x78dc105640
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0xc7af95c 0x78dc101d60
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0xc7afa50 0x78dc101e40
	void Montage_Resume(const AnimMontage* Montage);// 0xc7afd6c 0x78dc101f20
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0xc7b00a4 0x78dc102000
	void Montage_Pause(const AnimMontage* Montage);// 0xc7afe14 0x78dc1020e0
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0xc7afb8c 0x78dc1021c0
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0xc7afc7c 0x78dc1022a0
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0xc7af7f4 0x78dc102380
	bool Montage_IsActive(const AnimMontage* Montage);// 0xc7af8a8 0x78dc102460
	float Montage_GetPosition(const AnimMontage* Montage);// 0xc7af694 0x78dc102540
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0xc7af38c 0x78dc102620
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0xc7af4ec 0x78dc102700
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0xc7af744 0x78dc1027e0
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0xc7af43c 0x78dc1028c0
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0xc7ad6c8 0x78dc1029a0
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0xc7af050 0x78dc102a80
	void LinkAnimClassLayers(class AnimInstance InClass);// 0xc7aefa8 0x78dc102b60
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0xc7ad1e4 0x78dc102c40
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0xc7b028c 0x78dc102d20
	bool IsAnyMontagePlaying();// 0xc7af354 0x78dc102e00
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0xc7ad380 0x78dc102ee0
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0xc7ad47c 0x78dc102fc0
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0xc7ad124 0x78dc1030a0
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0xc7ae030 0x78dc103180
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0xc7ae128 0x78dc103260
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0xc7add48 0x78dc103340
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0xc7ade40 0x78dc103420
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0xc7adf38 0x78dc103500
	bool GetReceiveNotifiesFromLinkedInstances();// 0xc7b0b50 0x78dc1035e0
	bool GetPropagateNotifiesToLinkedInstances();// 0xc7b0a78 0x78dc1036c0
	SkeletalMeshComponent* GetOwningComponent();// 0xc7b0958 0x78dc1037a0
	Actor* GetOwningActor();// 0xc7b098c 0x78dc103880
	void GetLinkedAnimLayerInstancesByGroup(FName InGroup, out AnimInstance*[] OutLinkedInstances);// 0xc7aed20 0x78dc103960
	AnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class AnimInstance InClass);// 0xc7aec28 0x78dc100080
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0xc7aee50 0x78dc100160
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0xc7aeb78 0x78dc100240
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0xc7af140 0x78dc100320
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0xc7af270 0x78dc100400
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0xc7ae220 0x78dc1004e0
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0xc7ae318 0x78dc1005c0
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0xc7ae410 0x78dc1006a0
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0xc7ae5b8 0x78dc100780
	float GetInstanceMachineWeight(int MachineIndex);// 0xc7ae6b0 0x78dc100860
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0xc7ae508 0x78dc100940
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0xc7ae760 0x78dc100a20
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0xc7ae810 0x78dc100b00
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0xc7ae8c0 0x78dc100be0
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0xc7ae970 0x78dc100cc0
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0xc7aea20 0x78dc100da0
	float GetCurveValue(FName CurveName);// 0xc7adc98 0x78dc100e80
	FName GetCurrentStateName(int MachineIndex);// 0xc7ad9d4 0x78dc100f60
	AnimMontage* GetCurrentActiveMontage();// 0xc7af320 0x78dc101040
	void GetAllCurveNames(out FName[] OutNames);// 0xc7ada84 0x78dc101120
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0xc7adb68 0x78dc101200
	void ClearMorphTargets();// 0xc7ad8cc 0x78dc1012e0
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0xc7ad7c0 0x78dc1013c0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0xaa7cd18 0x78dc1014a0
	void BlueprintPostEvaluateAnimation();// 0xaa7cd18 0x78dc101580
	void BlueprintLinkedAnimationLayersInitialized();// 0xaa7cd18 0x78dc101660
	void BlueprintInitializeAnimation();// 0xaa7cd18 0x78dc101740
	void BlueprintBeginPlay();// 0xaa7cd18 0x78dc101820

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10] 0x78dbe5b000
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50] 0x78dbe9c880

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8] 0x78dbedfd00

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10] 0x78dbe5b0a0

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10] 0x78dbe559c0
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10] 0x78dbe55a60
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8] 0x78dbe83e80
	FName SnapshotName;//[Offset: 0x28, Size: 0x8] 0x78dbe83f00
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78dbe83f80

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8] 0x78dbed9b80
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8] 0x78dbed9c00
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4] 0x78dbed9c80

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10] 0x78d72b5780
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10] 0x78d72b5800

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10] 0x78dbf21960
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20] 0x78dbf62180

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbf63c80
	int LODIndex;//[Offset: 0x8, Size: 0x4] 0x78dbf63d00
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78dbf63d80
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10] 0x78dbf21820
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10] 0x78dbf218c0

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8] 0x78dbf63e00

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x78dbf63f00
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78dbf63f80
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x78dbf64000

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10] 0x78dbf21a00
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10] 0x78dbf21aa0

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbf65180
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1] 0x78dbf65200
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4] 0x78dbf65280

--------------------------------
Class: VertexOffsetUsage
	int Usage;//[Offset: 0x0, Size: 0x4] 0x78dbf63380

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10] 0x78dbf23d00

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10] 0x78e6832680
	Plane YPlane;//[Offset: 0x10, Size: 0x10] 0x78e6832700
	Plane ZPlane;//[Offset: 0x20, Size: 0x10] 0x78e6832780
	Plane WPlane;//[Offset: 0x30, Size: 0x10] 0x78e6832800

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4] 0x78e6831d80

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8] 0x78dbf60b80
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78dbf60c00
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x78dbf60c80
	float SavedPosition;//[Offset: 0xc, Size: 0x4] 0x78dbf60d00
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4] 0x78dbf60d80

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0xbd10d40 0x78d72c0080
	void PhysicsAssetUpdated();// 0xbd10e0c 0x78d72c0160
	float GetSimulationTime();// 0xbd10b04 0x78d72c0240
	int GetNumSubsteps();// 0xbd10b40 0x78d72c0320
	int GetNumKinematicParticles();// 0xbd10bf4 0x78d72c0400
	int GetNumIterations();// 0xbd10b7c 0x78d72c04e0
	int GetNumDynamicParticles();// 0xbd10bb8 0x78d72c05c0
	int GetNumCloths();// 0xbd10c30 0x78d72c06a0
	void EnableGravityOverride(out const Vector InVector);// 0xbd10c88 0x78d72c0780
	void DisableGravityOverride();// 0xbd10c6c 0x78d72c0860
	void ClothConfigUpdated();// 0xbd10df0 0x78d72c0940

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0xaa7cd18 0x78dc13db40
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xaa7cd18 0x78dc13dc20
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0xaa7cd18 0x78dc13dd00
	FString GetNotifyName();// 0xc7c50d4 0x78dc13dde0

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10] 0x78dbe59160

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80] 0x78dbedbf80

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8] 0x78dbedc000
	SmartName Name;//[Offset: 0x8, Size: 0xc] 0x78dbedc100
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4] 0x78dbedc180

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8] 0x78dbedc080

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10] 0x78dbe5ca40

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8] 0x78dbedde80
	float startTime;//[Offset: 0x38, Size: 0x4] 0x78dbeddf00
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8] 0x78dbeddf80
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10] 0x78dbe5b6e0

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8] 0x78dbede080
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10] 0x78dbede100

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10] 0x78dbe59200

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8] 0x78dbedc400
	float StartPos;//[Offset: 0x8, Size: 0x4] 0x78dbedc480
	float AnimStartTime;//[Offset: 0xc, Size: 0x4] 0x78dbedc500
	float AnimEndTime;//[Offset: 0x10, Size: 0x4] 0x78dbedc580
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4] 0x78dbedc600
	int LoopingCount;//[Offset: 0x18, Size: 0x4] 0x78dbeda580

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8] 0x78dbede180
	float DisplayTime;//[Offset: 0x38, Size: 0x4] 0x78dbede200
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4] 0x78dbede280

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4] 0x78dbede300
	float TriggerTime;//[Offset: 0x4, Size: 0x4] 0x78dbede380
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1] 0x78dbede400

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4] 0x78dbf71080
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4] 0x78dbf6f800
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10] 0x78dbf25100
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4] 0x78dbf6fa00

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4] 0x78dbf6f880
	float Alpha;//[Offset: 0xc, Size: 0x4] 0x78dbf6f900

--------------------------------
Class: CharacterServerMovePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterNetworkSerializationPackedBits

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: CharacterMoveResponsePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78dbf06080
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78dbf06100
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x78dbf06180
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x78dbf06200
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1] 0x78dbf06300
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc] 0x78dbf04280

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1] 0x78dbf06280

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x150, Size: 0x8] 0x78d7304f00
	float GravityScale;//[Offset: 0x158, Size: 0x4] 0x78d7304f80
	float MaxStepHeight;//[Offset: 0x15c, Size: 0x4] 0x78d7305000
	float JumpZVelocity;//[Offset: 0x160, Size: 0x4] 0x78d7305080
	float JumpOffJumpZFactor;//[Offset: 0x164, Size: 0x4] 0x78d7305100
	float WalkableFloorAngle;//[Offset: 0x168, Size: 0x4] 0x78d7305180
	float WalkableFloorZ;//[Offset: 0x16c, Size: 0x4] 0x78d7305200
	byte MovementMode;//[Offset: 0x170, Size: 0x1] 0x78d7305280
	byte CustomMovementMode;//[Offset: 0x171, Size: 0x1] 0x78d7303200
	enum NetworkSmoothingMode;//[Offset: 0x172, Size: 0x1] 0x78d727bbe0
	float GroundFriction;//[Offset: 0x174, Size: 0x4] 0x78d7303300
	float MaxWalkSpeed;//[Offset: 0x19c, Size: 0x4] 0x78d7303380
	float MaxWalkSpeedCrouched;//[Offset: 0x1a0, Size: 0x4] 0x78d7303400
	float MaxSwimSpeed;//[Offset: 0x1a4, Size: 0x4] 0x78d7303480
	float MaxFlySpeed;//[Offset: 0x1a8, Size: 0x4] 0x78d7303500
	float MaxCustomMovementSpeed;//[Offset: 0x1ac, Size: 0x4] 0x78d7303580
	float MaxAcceleration;//[Offset: 0x1b0, Size: 0x4] 0x78d7303600
	float MinAnalogWalkSpeed;//[Offset: 0x1b4, Size: 0x4] 0x78d7303680
	float BrakingFrictionFactor;//[Offset: 0x1b8, Size: 0x4] 0x78d7303700
	float BrakingFriction;//[Offset: 0x1bc, Size: 0x4] 0x78d7303780
	float BrakingSubStepTime;//[Offset: 0x1c0, Size: 0x4] 0x78d7303800
	float BrakingDecelerationWalking;//[Offset: 0x1c4, Size: 0x4] 0x78d7303880
	float BrakingDecelerationFalling;//[Offset: 0x1c8, Size: 0x4] 0x78d7303900
	float BrakingDecelerationSwimming;//[Offset: 0x1cc, Size: 0x4] 0x78d7303980
	float BrakingDecelerationFlying;//[Offset: 0x1d0, Size: 0x4] 0x78d7303a00
	float AirControl;//[Offset: 0x1d4, Size: 0x4] 0x78d7303a80
	float AirControlBoostMultiplier;//[Offset: 0x1d8, Size: 0x4] 0x78d7303b00
	float AirControlBoostVelocityThreshold;//[Offset: 0x1dc, Size: 0x4] 0x78d7303b80
	float FallingLateralFriction;//[Offset: 0x1e0, Size: 0x4] 0x78d7303c00
	float CrouchedHalfHeight;//[Offset: 0x1e4, Size: 0x4] 0x78d7303c80
	float Buoyancy;//[Offset: 0x1e8, Size: 0x4] 0x78d7303d00
	float PerchRadiusThreshold;//[Offset: 0x1ec, Size: 0x4] 0x78d7303d80
	float PerchAdditionalHeight;//[Offset: 0x1f0, Size: 0x4] 0x78d7303e00
	Rotator RotationRate;//[Offset: 0x1f4, Size: 0xc] 0x78d7303e80
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1] 0x78d7303f00
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1] 0x78d7303f80
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1] 0x78d7304000
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1] 0x78d7304080
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1] 0x78d7304100
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x200, Size: 0x1] 0x78d7304180
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x200, Size: 0x1] 0x78d7304200
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1] 0x78d7302180
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1] 0x78d7302200
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x201, Size: 0x1] 0x78d7302280
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x201, Size: 0x1] 0x78d7302300
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x201, Size: 0x1] 0x78d7302380
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x201, Size: 0x1] 0x78d7302400
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x201, Size: 0x1] 0x78d7302480
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x202, Size: 0x1] 0x78d7302500
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x202, Size: 0x1] 0x78d7302580
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x202, Size: 0x1] 0x78d7302600
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x202, Size: 0x1] 0x78d7302680
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x202, Size: 0x1] 0x78d7302700
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x202, Size: 0x1] 0x78d7302780
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x202, Size: 0x1] 0x78d7302800
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x203, Size: 0x1] 0x78d7302880
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x208, Size: 0x8] 0x78d7302900
	float MaxOutOfWaterStepHeight;//[Offset: 0x210, Size: 0x4] 0x78d7302980
	float OutofWaterZ;//[Offset: 0x214, Size: 0x4] 0x78d7302a00
	float Mass;//[Offset: 0x218, Size: 0x4] 0x78d7302a80
	float StandingDownwardForceScale;//[Offset: 0x21c, Size: 0x4] 0x78d7302b00
	float InitialPushForceFactor;//[Offset: 0x220, Size: 0x4] 0x78d7302b80
	float PushForceFactor;//[Offset: 0x224, Size: 0x4] 0x78d7302c00
	float PushForcePointZOffsetFactor;//[Offset: 0x228, Size: 0x4] 0x78d7302c80
	float TouchForceFactor;//[Offset: 0x22c, Size: 0x4] 0x78d7302d00
	float MinTouchForce;//[Offset: 0x230, Size: 0x4] 0x78d7302d80
	float MaxTouchForce;//[Offset: 0x234, Size: 0x4] 0x78d7302e00
	float RepulsionForce;//[Offset: 0x238, Size: 0x4] 0x78d7302e80
	Vector Acceleration;//[Offset: 0x23c, Size: 0xc] 0x78d7302f00
	Quat LastUpdateRotation;//[Offset: 0x250, Size: 0x10] 0x78d7302f80
	Vector LastUpdateLocation;//[Offset: 0x260, Size: 0xc] 0x78d7303000
	Vector LastUpdateVelocity;//[Offset: 0x26c, Size: 0xc] 0x78d7303080
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x278, Size: 0x4] 0x78d7303100
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x27c, Size: 0x4] 0x78d7303180
	float ServerLastClientAdjustmentTime;//[Offset: 0x280, Size: 0x4] 0x78d7301100
	Vector PendingImpulseToApply;//[Offset: 0x284, Size: 0xc] 0x78d7301180
	Vector PendingForceToApply;//[Offset: 0x290, Size: 0xc] 0x78d7301200
	float AnalogInputModifier;//[Offset: 0x29c, Size: 0x4] 0x78d7301280
	float MaxSimulationTimeStep;//[Offset: 0x2ac, Size: 0x4] 0x78d7301300
	int MaxSimulationIterations;//[Offset: 0x2b0, Size: 0x4] 0x78d7301380
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2b4, Size: 0x4] 0x78d7301400
	float MaxDepenetrationWithGeometry;//[Offset: 0x2b8, Size: 0x4] 0x78d7301480
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2bc, Size: 0x4] 0x78d7301500
	float MaxDepenetrationWithPawn;//[Offset: 0x2c0, Size: 0x4] 0x78d7301580
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2c4, Size: 0x4] 0x78d7301600
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2c8, Size: 0x4] 0x78d7301680
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2cc, Size: 0x4] 0x78d7301700
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2d0, Size: 0x4] 0x78d7301780
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2d4, Size: 0x4] 0x78d7301800
	float NetProxyShrinkRadius;//[Offset: 0x2d8, Size: 0x4] 0x78d7301880
	float NetProxyShrinkHalfHeight;//[Offset: 0x2dc, Size: 0x4] 0x78d7301900
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2e0, Size: 0x4] 0x78d7301980
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2e4, Size: 0x4] 0x78d7301a00
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2e8, Size: 0x4] 0x78d7301a80
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2ec, Size: 0x4] 0x78d7301b00
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2f0, Size: 0x4] 0x78d7301b80
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2f4, Size: 0x4] 0x78d7301c00
	float LedgeCheckThreshold;//[Offset: 0x2f8, Size: 0x4] 0x78d7301c80
	float JumpOutOfWaterPitch;//[Offset: 0x2fc, Size: 0x4] 0x78d7301d00
	FindFloorResult CurrentFloor;//[Offset: 0x300, Size: 0x98] 0x78d7301d80
	byte DefaultLandMovementMode;//[Offset: 0x398, Size: 0x1] 0x78d7301e00
	byte DefaultWaterMovementMode;//[Offset: 0x399, Size: 0x1] 0x78d7301e80
	byte GroundMovementMode;//[Offset: 0x39a, Size: 0x1] 0x78d7301f00
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39b, Size: 0x1] 0x78d7301f80
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39b, Size: 0x1] 0x78d7302000
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39b, Size: 0x1] 0x78d7302080
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39b, Size: 0x1] 0x78d7302100
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x39b, Size: 0x1] 0x78d7300080
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x39b, Size: 0x1] 0x78d7300100
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x39b, Size: 0x1] 0x78d7300180
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x39b, Size: 0x1] 0x78d7300200
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39c, Size: 0x1] 0x78d7300280
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39c, Size: 0x1] 0x78d7300300
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39c, Size: 0x1] 0x78d7300380
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39c, Size: 0x1] 0x78d7300400
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x39c, Size: 0x1] 0x78d7300480
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x39c, Size: 0x1] 0x78d7300500
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x39c, Size: 0x1] 0x78d7300580
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x39c, Size: 0x1] 0x78d7300600
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39d, Size: 0x1] 0x78d7300680
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39d, Size: 0x1] 0x78d7300700
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39d, Size: 0x1] 0x78d7300780
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39d, Size: 0x1] 0x78d7300800
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x39d, Size: 0x1] 0x78d7300880
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x39d, Size: 0x1] 0x78d7300900
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x39d, Size: 0x1] 0x78d7300980
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39e, Size: 0x1] 0x78d7300a00
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39e, Size: 0x1] 0x78d7300a80
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39e, Size: 0x1] 0x78d7300b00
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39e, Size: 0x1] 0x78d7300b80
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x39e, Size: 0x1] 0x78d7300c00
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x39e, Size: 0x1] 0x78d7300c80
	float AvoidanceConsiderationRadius;//[Offset: 0x3b0, Size: 0x4] 0x78d7300d00
	Vector RequestedVelocity;//[Offset: 0x3b4, Size: 0xc] 0x78d7300d80
	int AvoidanceUID;//[Offset: 0x3c0, Size: 0x4] 0x78d7300e00
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3c4, Size: 0x4] 0x78d7300e80
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3c8, Size: 0x4] 0x78d7300f00
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3cc, Size: 0x4] 0x78d7300f80
	float AvoidanceWeight;//[Offset: 0x3d0, Size: 0x4] 0x78d7301000
	Vector PendingLaunchVelocity;//[Offset: 0x3d4, Size: 0xc] 0x78d7301080
	float NavMeshProjectionInterval;//[Offset: 0x484, Size: 0x4] 0x78d72ef800
	float NavMeshProjectionTimer;//[Offset: 0x488, Size: 0x4] 0x78d72ef880
	float NavMeshProjectionInterpSpeed;//[Offset: 0x48c, Size: 0x4] 0x78d72ef900
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x490, Size: 0x4] 0x78d72ef980
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x494, Size: 0x4] 0x78d72efa00
	float NavWalkingFloorDistTolerance;//[Offset: 0x498, Size: 0x4] 0x78d72efa80
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x4a0, Size: 0x30] 0x78d72efb00
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4e8, Size: 0x4] 0x78d72efb80
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x998, Size: 0x38] 0x78d72efc00
	RootMotionSourceGroup ServerCorrectionRootMotion;//[Offset: 0x9d0, Size: 0x38] 0x78d72efc80
	RootMotionMovementParams RootMotionParams;//[Offset: 0xaa0, Size: 0x40] 0x78d72efd00
	Vector AnimRootMotionVelocity;//[Offset: 0xae0, Size: 0xc] 0x78d72efd80
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0xc81222c 0x78d72fac00
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0xc812308 0x78d72face0
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0xc812b30 0x78d72f7400
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0xc812cf8 0x78d72f74e0
	void SetGroupsToIgnore(int GroupFlags);// 0xc812da8 0x78d72f75c0
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0xc812e50 0x78d72f76a0
	void SetGroupsToAvoid(int GroupFlags);// 0xc812f00 0x78d72f7780
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0xc812fa8 0x78d72f7860
	void SetAvoidanceGroup(int GroupFlags);// 0xc813058 0x78d72f7940
	void SetAvoidanceEnabled(bool bEnable);// 0xc812c48 0x78d72f7a20
	float K2_GetWalkableFloorZ();// 0xc8122d4 0x78d72f7b00
	float K2_GetWalkableFloorAngle();// 0xc8123b0 0x78d72f7be0
	float K2_GetModifiedMaxAcceleration();// 0xc8127e4 0x78d72f7cc0
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0xc8120fc 0x78d72f7da0
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0xc811eec 0x78d72f7e80
	bool IsWalking();// 0xc812af0 0x78d72f7f60
	bool IsWalkable(out const HitResult hit);// 0xc8123e4 0x78d72f8040
	float GetValidPerchRadius();// 0xc8124c8 0x78d72f8120
	float GetPerchRadiusThreshold();// 0xc8124fc 0x78d72f8200
	PrimitiveComponent* GetMovementBase();// 0xc812aa0 0x78d72f82e0
	float GetMinAnalogSpeed();// 0xc812820 0x78d72f83c0
	float GetMaxJumpHeightWithJumpTime();// 0xc81285c 0x78d72f84a0
	float GetMaxJumpHeight();// 0xc812898 0x78d72f8580
	float GetMaxBrakingDeceleration();// 0xc81276c 0x78d72f8660
	float GetMaxAcceleration();// 0xc8127a8 0x78d72f8740
	Vector GetLastUpdateVelocity();// 0xc813100 0x78d72f8820
	Rotator GetLastUpdateRotation();// 0xc813128 0x78d72f8900
	Vector GetLastUpdateLocation();// 0xc813164 0x78d72f89e0
	Vector GetImpartedMovementBaseVelocity();// 0xc812a60 0x78d72f8ac0
	Vector GetCurrentAcceleration();// 0xc812734 0x78d72f8ba0
	Character* GetCharacterOwner();// 0xc812c2c 0x78d72f8c80
	float GetAnalogInputModifier();// 0xc812700 0x78d72f8d60
	void DisableMovement();// 0xc812ad4 0x78d72f8e40
	void ClearAccumulatedForces();// 0xc8126e4 0x78d72f8f20
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xc811ca0 0x78d72f9000
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0xc8128d4 0x78d72f5720
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0xc8125e0 0x78d72f5800
	void AddForce(Vector Force);// 0xc812530 0x78d72f58e0

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x138, Size: 0x8] 0x78d72edf80
	Vector K2_GetInputVector();// 0xc984404 0x78d72f59c0
	bool IsMoveInputIgnored();// 0xc984470 0x78d72f5aa0
	Vector GetPendingInputVector();// 0xc984528 0x78d72f5b80
	Pawn* GetPawnOwner();// 0xc98443c 0x78d72f5c60
	Vector GetLastInputVector();// 0xc9844f0 0x78d72f5d40
	Vector ConsumeInputVector();// 0xc9844b0 0x78d72f5e20
	void AddInputVector(Vector WorldVector, bool bForce);// 0xc984560 0x78d72f5f00

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf8, Size: 0x30] 0x78d72ee400
	float FixedPathBrakingDistance;//[Offset: 0x128, Size: 0x4] 0x78d72ee480
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c, Size: 0x1] 0x78d72ee500
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12c, Size: 0x1] 0x78d72ee580
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12c, Size: 0x1] 0x78d72ee600
	MovementProperties MovementState;//[Offset: 0x12d, Size: 0x1] 0x78d72ee680
	Object* PathFollowingComp;//[Offset: 0x130, Size: 0x8] 0x78d72ee700
	void StopMovementKeepPathing();// 0xc95a648 0x78d72f5fe0
	void StopActiveMovement();// 0xc95a698 0x78d72f60c0
	bool IsSwimming();// 0xc95a548 0x78d72f61a0
	bool IsMovingOnGround();// 0xc95a588 0x78d72f6280
	bool IsFlying();// 0xc95a508 0x78d72f6360
	bool IsFalling();// 0xc95a5c8 0x78d72f6440
	bool IsCrouching();// 0xc95a608 0x78d72f6520

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb8, Size: 0x8] 0x78d3566000
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xc0, Size: 0x8] 0x78d3566080
	Vector Velocity;//[Offset: 0xcc, Size: 0xc] 0x78d3566100
	Vector PlaneConstraintNormal;//[Offset: 0xd8, Size: 0xc] 0x78d3566180
	Vector PlaneConstraintOrigin;//[Offset: 0xe4, Size: 0xc] 0x78d3566200
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x78d3566280
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x78d3566300
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1] 0x78d3564280
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1] 0x78d3564300
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf0, Size: 0x1] 0x78d3564380
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf0, Size: 0x1] 0x78d3564400
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf0, Size: 0x1] 0x78d3564480
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf0, Size: 0x1] 0x78d3564500
	enum PlaneConstraintAxisSetting;//[Offset: 0xf3, Size: 0x1] 0x78cdd57680
	void StopMovementImmediately();// 0xc953f40 0x78cd8e3b20
	void SnapUpdatedComponentToPlane();// 0xc9534f0 0x78cd8e3c00
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0xc953da4 0x78cd8e3ce0
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0xc953878 0x78cd8e3dc0
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0xc953a20 0x78cd8e3ea0
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0xc953928 0x78cd8e3f80
	void SetPlaneConstraintEnabled(bool bEnabled);// 0xc9537c0 0x78cd8e4060
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0xc953aec 0x78cd8e4140
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0xc953e54 0x78cd8e4220
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0xc953b9c 0x78cd8e4300
	float K2_GetModifiedMaxSpeed();// 0xc954018 0x78cd8e43e0
	float K2_GetMaxSpeedModifier();// 0xc954054 0x78cd8e44c0
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0xc953f5c 0x78cd8e45a0
	Vector GetPlaneConstraintOrigin();// 0xc953740 0x78cd8e4680
	Vector GetPlaneConstraintNormal();// 0xc953780 0x78cd8e4760
	enum GetPlaneConstraintAxisSetting();// 0xc953ad0 0x78cd8e4840
	PhysicsVolume* GetPhysicsVolume();// 0xc953f04 0x78cd8e4920
	float GetMaxSpeed();// 0xc954090 0x78cd8e4a00
	float GetGravityZ();// 0xc9540cc 0x78cd8e4ae0
	Vector ConstrainNormalToPlane(Vector Normal);// 0xc95350c 0x78cd8e4bc0
	Vector ConstrainLocationToPlane(Vector Location);// 0xc9535c8 0x78cd8e4ca0
	Vector ConstrainDirectionToPlane(Vector Direction);// 0xc953684 0x78cd8e4d80

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4] 0x78dbf32e80
	float AgentHeight;//[Offset: 0x8, Size: 0x4] 0x78dbf32f00
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4] 0x78dbf32f80
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4] 0x78dbf33000
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18] 0x78dbf33080

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbf33100
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbf33180
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbf31100
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78dbf31180
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78dbf31200

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8] 0x78e6834700
	FString SubPathString;//[Offset: 0x8, Size: 0x10] 0x78e6834780

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbf31280
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbf31300
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbf31380
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78dbf31400
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78dbf31480
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78dbf31500
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78dbf31580
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78dbf31600
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78dbf31680
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78dbf31700
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78dbf31780
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x78dbf31800
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x78dbf31880
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x78dbf31900
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x78dbf31980
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x78dbf31a00
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1] 0x78dbf31a80
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1] 0x78dbf31b00
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1] 0x78dbf31b80
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1] 0x78dbf31c00
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1] 0x78dbf31c80
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1] 0x78dbf31d00
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1] 0x78dbf31d80
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1] 0x78dbf31e00
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1] 0x78dbf31e80
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1] 0x78dbf31f00
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1] 0x78dbf31f80
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1] 0x78dbf32000
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1] 0x78dbf32080
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1] 0x78dbf32100
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1] 0x78dbf30080
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1] 0x78dbf30100

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbf05880
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbf05900
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbf05980
	float FloorDist;//[Offset: 0x4, Size: 0x4] 0x78dbf05a00
	float LineDist;//[Offset: 0x8, Size: 0x4] 0x78dbf05a80
	HitResult HitResult;//[Offset: 0xc, Size: 0x8c] 0x78dbf05b00

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbed9d80
	float BlendWeight;//[Offset: 0x4, Size: 0x4] 0x78dbed9e00
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30] 0x78dbed9e80

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x488, Size: 0x4] 0x78d72ec900
	float CapsuleRadius;//[Offset: 0x48c, Size: 0x4] 0x78d72ec980
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0xc80a0ac 0x78d72f6600
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0xc809fac 0x78d72f66e0
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0xc809eac 0x78d72f67c0
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0xc809940 0x78d72f68a0
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0xc809a50 0x78d72f6980
	float GetUnscaledCapsuleRadius();// 0xc809b98 0x78d72f6a60
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0xc809b58 0x78d72f6b40
	float GetUnscaledCapsuleHalfHeight();// 0xc809b7c 0x78d72f6c20
	float GetShapeScale();// 0xc809900 0x78d72f6d00
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0xc809bb4 0x78d72f6de0
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0xc809cf4 0x78d72f6ec0
	float GetScaledCapsuleRadius();// 0xc809e7c 0x78d72f6fa0
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0xc809e18 0x78d72f7080
	float GetScaledCapsuleHalfHeight();// 0xc809e58 0x78d72f7160

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x470, Size: 0x8] 0x78d72e6900
	class NavAreaBase* AreaClass;//[Offset: 0x478, Size: 0x8] 0x78d727c4a0
	Color ShapeColor;//[Offset: 0x480, Size: 0x4] 0x78d72e6980
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x484, Size: 0x1] 0x78d72e6a00
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x484, Size: 0x1] 0x78d72e6a80
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x484, Size: 0x1] 0x78d72e6b00

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8] 0x78dbf04500
	FName BoneName;//[Offset: 0x8, Size: 0x8] 0x78dbf04580
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc] 0x78dbf04600
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc] 0x78dbf04680
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dbf04700
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78dbf04780
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78dbf04800

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4] 0x78dbf05b80
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98] 0x78dbf04480

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbf05c00
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8] 0x78dbf05c80
	float Position;//[Offset: 0x10, Size: 0x4] 0x78dbf05d00
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc] 0x78dbf05d80
	Rotator Rotation;//[Offset: 0x20, Size: 0xc] 0x78dbf05e00
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8] 0x78dbf05e80
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8] 0x78dbf05f00
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78dbf05f80
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x78dbf06000
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38] 0x78dbf04300
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc] 0x78dbf04380
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc] 0x78dbf04400

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x298, Size: 0x8] 0x78dc1c0300
	Pawn* AcknowledgedPawn;//[Offset: 0x2a0, Size: 0x8] 0x78dc1c0380
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2a8, Size: 0x8] 0x78dc1c0400
	HUD* MyHUD;//[Offset: 0x2b0, Size: 0x8] 0x78dc1c0480
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2b8, Size: 0x8] 0x78dc1c0500
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2c0, Size: 0x8] 0x78dc119700
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78dc1c0580
	Rotator TargetViewRotation;//[Offset: 0x2cc, Size: 0xc] 0x78dc1c0600
	float SmoothTargetViewRotationSpeed;//[Offset: 0x2e4, Size: 0x4] 0x78dc1c0680
	Actor*[] HiddenActors;//[Offset: 0x2f0, Size: 0x10] 0x78dc1197a0
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x300, Size: 0x10] 0x78dc119840
	float LastSpectatorStateSynchTime;//[Offset: 0x314, Size: 0x4] 0x78dc1c0800
	Vector LastSpectatorSyncLocation;//[Offset: 0x318, Size: 0xc] 0x78dc1c0880
	Rotator LastSpectatorSyncRotation;//[Offset: 0x324, Size: 0xc] 0x78dc1c0900
	int ClientCap;//[Offset: 0x330, Size: 0x4] 0x78dc1c0980
	CheatManager* CheatManager;//[Offset: 0x338, Size: 0x8] 0x78dc1c0a00
	class CheatManager* CheatClass;//[Offset: 0x340, Size: 0x8] 0x78dc1198e0
	PlayerInput* PlayerInput;//[Offset: 0x348, Size: 0x8] 0x78dc1c0a80
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x350, Size: 0x10] 0x78dc119980
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d0, Size: 0x1] 0x78dc1c0b80
	byte NetPlayerIndex;//[Offset: 0x3d1, Size: 0x1] 0x78dc1c0c00
	NetConnection* PendingSwapConnection;//[Offset: 0x410, Size: 0x8] 0x78dc1c0c80
	NetConnection* NetConnection;//[Offset: 0x418, Size: 0x8] 0x78dc1c0d00
	float InputYawScale;//[Offset: 0x42c, Size: 0x4] 0x78dc1c0d80
	float InputPitchScale;//[Offset: 0x430, Size: 0x4] 0x78dc1c0e00
	float InputRollScale;//[Offset: 0x434, Size: 0x4] 0x78dc1c0e80
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 0x1] 0x78dc1c0f00
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x438, Size: 0x1] 0x78dc1c0f80
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x438, Size: 0x1] 0x78dc1c1000
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x438, Size: 0x1] 0x78dc1c1080
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x438, Size: 0x1] 0x78dc1af800
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x438, Size: 0x1] 0x78dc1af880
	float ForceFeedbackScale;//[Offset: 0x43c, Size: 0x4] 0x78dc1af900
	Key[] ClickEventKeys;//[Offset: 0x440, Size: 0x10] 0x78dc119a20
	byte DefaultMouseCursor;//[Offset: 0x450, Size: 0x1] 0x78dc1afa00
	byte CurrentMouseCursor;//[Offset: 0x451, Size: 0x1] 0x78dc1afa80
	byte DefaultClickTraceChannel;//[Offset: 0x452, Size: 0x1] 0x78dc1afb00
	byte CurrentClickTraceChannel;//[Offset: 0x453, Size: 0x1] 0x78dc1afb80
	float HitResultTraceDistance;//[Offset: 0x454, Size: 0x4] 0x78dc1afc00
	uint16 SeamlessTravelCount;//[Offset: 0x458, Size: 0x2] 0x78dc1afc80
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x45a, Size: 0x2] 0x78dc1afd00
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4d0, Size: 0x8] 0x78dc1afd80
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d8, Size: 0x1] 0x78dc1afe00
	TouchInterface* CurrentTouchInterface;//[Offset: 0x4f0, Size: 0x8] 0x78dc1afe80
	SpectatorPawn* SpectatorPawn;//[Offset: 0x548, Size: 0x8] 0x78dc1aff00
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 0x1] 0x78dc1aff80
	Vector SpawnLocation;//[Offset: 0x558, Size: 0xc] 0x78dc1ae780
	bool WasInputKeyJustReleased(Key Key);// 0xc996554 0x78dc1b2000
	bool WasInputKeyJustPressed(Key Key);// 0xc9967c0 0x78dc1b20e0
	void ToggleSpeaking(bool bInSpeaking);// 0xc99c588 0x78dc1b21c0
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0xc998c18 0x78dc1b22a0
	void SwitchLevel(FString URL);// 0xc99d86c 0x78dc1b2380
	void StopHapticEffect(enum Hand);// 0xc9989dc 0x78dc1b2460
	void StartFire(byte FireModeNum);// 0xc99c6f8 0x78dc1b2540
	void SetVirtualJoystickVisibility(bool bVisible);// 0xc995600 0x78dc1b2620
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0xc995368 0x78dc1b2700
	void SetName(FString S);// 0xc99d94c 0x78dc1b27e0
	void SetMouseLocation(const int X, const int Y);// 0xc99c7a8 0x78dc1b28c0
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0xc999824 0x78dc1b29a0
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0xc9988a0 0x78dc1b2a80
	void SetDisableHaptics(bool bNewDisabled);// 0xc9987e8 0x78dc1b2b60
	void SetControllerLightColor(Color Color);// 0xc998744 0x78dc1b2c40
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0xc994ef0 0x78dc1b2d20
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0xc995230 0x78dc1b2e00
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0xc99512c 0x78dc1b2ee0
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0xc9970c0 0x78dc1b2fc0
	void ServerViewPrevPlayer();// 0xc9971bc 0x78dc1b30a0
	void ServerViewNextPlayer();// 0xc997218 0x78dc1b3180
	void ServerVerifyViewTarget();// 0xc997274 0x78dc1b3260
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0xc9972d0 0x78dc1b3340
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0xc9973c8 0x78dc1b3420
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0xc9974a4 0x78dc1b3500
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0xc99bd04 0x78dc1b35e0
	void ServerToggleAILogging();// 0xc996ea8 0x78dc1b36c0
	void ServerShortTimeout();// 0xc9975e0 0x78dc1b37a0
	void ServerSetSpectatorWaiting(bool bWaiting);// 0xc99e1b0 0x78dc1b3880
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0xc9976f4 0x78dc1b3960
	void ServerRestartPlayer();// 0xc997830 0x78dc1b0080
	void ServerPause();// 0xc99788c 0x78dc1b0160
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0xc9978e8 0x78dc1b0240
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0xc99c138 0x78dc1b0320
	void ServerExecRPC(FString msg);// 0xc99de28 0x78dc1b0400
	void ServerExec(FString msg);// 0xc99dd50 0x78dc1b04e0
	void ServerCheckClientPossessionReliable();// 0xc99763c 0x78dc1b05c0
	void ServerCheckClientPossession();// 0xc997698 0x78dc1b06a0
	void ServerChangeName(FString S);// 0xc9979c0 0x78dc1b0780
	void ServerCamera(FName NewMode);// 0xc997ac8 0x78dc1b0860
	void ServerAcknowledgePossession(Pawn* P);// 0xc997bb0 0x78dc1b0940
	void SendToConsole(FString Command);// 0xc99b3dc 0x78dc1b0a20
	void RestartLevel();// 0xc99e010 0x78dc1b0b00
	void ResetControllerLightColor();// 0xc998730 0x78dc1b0be0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0xc99c898 0x78dc1b0cc0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0xc998a84 0x78dc1b0da0
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0xc998d08 0x78dc1b0e80
	void Pause();// 0xc99da2c 0x78dc1b0f60
	void OnServerStartedVisualLogger(bool bIsLogging);// 0xc994e38 0x78dc1b1040
	void LocalTravel(FString URL);// 0xc99df30 0x78dc1b1120
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0xc9991c0 0x78dc1b1200
	bool IsInputKeyDown(Key Key);// 0xc996a2c 0x78dc1b12e0
	void GetViewportSize(out int SizeX, out int SizeY);// 0xc99994c 0x78dc1b13c0
	SpectatorPawn* GetSpectatorPawn();// 0xc994e1c 0x78dc1b14a0
	bool GetMousePosition(out float locationX, out float locationY);// 0xc995c24 0x78dc1b1580
	Vector GetInputVectorKeyState(Key Key);// 0xc996080 0x78dc1b1660
	void GetInputTouchState(byte FingerIndex, out float locationX, out float locationY, out bool bIsCurrentlyPressed);// 0xc995ed8 0x78dc1b1740
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0xc9958b8 0x78dc1b1820
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0xc995d3c 0x78dc1b1900
	float GetInputKeyTimeDown(Key Key);// 0xc9959bc 0x78dc1b19e0
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0xc995768 0x78dc1b1ac0
	float GetInputAnalogKeyState(Key Key);// 0xc9962ec 0x78dc1b1ba0
	HUD* GetHUD();// 0xc999918 0x78dc1b1c80
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0xc99ce18 0x78dc19e780
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xc99d02c 0x78dc19e860
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xc99d1f0 0x78dc19e940
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0xc99d3b4 0x78dc19ea20
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xc99d57c 0x78dc19eb00
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xc99d6f4 0x78dc19ebe0
	Vector GetFocalLocation();// 0xc994ddc 0x78dc19ecc0
	void FOV(float NewFOV);// 0xc99e02c 0x78dc19eda0
	void EnableCheats();// 0xc99e0dc 0x78dc19ee80
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0xc99c9f0 0x78dc19ef60
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0xc99cd08 0x78dc19f040
	void ConsoleKey(Key Key);// 0xc99b4bc 0x78dc19f120
	void ClientWasKicked(const FText KickReason);// 0xc997f5c 0x78dc19f200
	void ClientVoiceHandshakeComplete();// 0xc99c56c 0x78dc19f2e0
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0xc9980d4 0x78dc19f3c0
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0xc9981b4 0x78dc19f4a0
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0xc99b724 0x78dc19f580
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0xc998390 0x78dc19f660
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0xc998564 0x78dc19f740
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0xc996f04 0x78dc19f820
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0xc998fd0 0x78dc19f900
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0xc99939c 0x78dc19f9e0
	void ClientStopCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0xc999498 0x78dc19fac0
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0xc99959c 0x78dc19fba0
	void ClientStartOnlineSession();// 0xc997f40 0x78dc19fc80
	void ClientStartCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent);// 0xc99a758 0x78dc19fd60
	void ClientStartCameraShake(class CameraShakeBase Shake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xc99a848 0x78dc19fe40
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0xc999668 0x78dc19ff20
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0xc999718 0x78dc19caa0
	void ClientSetSpectatorWaiting(bool bWaiting);// 0xc99e0f8 0x78dc19cb80
	void ClientSetHUD(class HUD NewHUDClass);// 0xc999a50 0x78dc19cc60
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0xc999b00 0x78dc19cd40
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0xc999c48 0x78dc19ce20
	void ClientSetCameraMode(FName NewCamMode);// 0xc999de0 0x78dc19cf00
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);// 0xc999e90 0x78dc19cfe0
	void ClientSetBlockOnAsyncLoading();// 0xc99a0c4 0x78dc19d0c0
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0xc99daf8 0x78dc19d1a0
	void ClientReturnToMainMenu(FString ReturnReason);// 0xc99dc70 0x78dc19d280
	void ClientRetryClientRestart(Pawn* NewPawn);// 0xc997e74 0x78dc19d360
	void ClientRestart(Pawn* NewPawn);// 0xc99a0e0 0x78dc19d440
	void ClientReset();// 0xc99a190 0x78dc19d520
	void ClientRepObjRef(Object* Object);// 0xc99da48 0x78dc19d600
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0xc997c98 0x78dc19d6e0
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0xc99a1ac 0x78dc19d7c0
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0xc99a33c 0x78dc19d8a0
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0xc99a488 0x78dc19d980
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0xc99a614 0x78dc19da60
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0xc9990c8 0x78dc19db40
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum Space, Rotator CustomPlaySpace);// 0xc99a9d8 0x78dc19dc20
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0xc99ba14 0x78dc19dd00
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0xc99acdc 0x78dc19dde0
	void ClientIgnoreMoveInput(bool bIgnore);// 0xc99ae58 0x78dc19dec0
	void ClientIgnoreLookInput(bool bIgnore);// 0xc99af10 0x78dc19dfa0
	void ClientGotoState(FName NewState);// 0xc99afc8 0x78dc19e080
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0xc99b078 0x78dc19e160
	void ClientForceGarbageCollection();// 0xc99b17c 0x78dc19e240
	void ClientFlushLevelStreaming();// 0xc99b198 0x78dc19e320
	void ClientEndOnlineSession();// 0xc997f24 0x78dc19e400
	void ClientEnableNetworkVoice(bool bEnable);// 0xc99c640 0x78dc19e4e0
	void ClientCommitMapChange();// 0xc99b1ac 0x78dc19e5c0
	void ClientClearCameraLensEffects();// 0xc99964c 0x78dc19e6a0
	void ClientCapBandwidth(int Cap);// 0xc99b1c8 0x78dc19adc0
	void ClientCancelPendingMapChange();// 0xc99b278 0x78dc19aea0
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0xc99b294 0x78dc19af80
	void ClearAudioListenerOverride();// 0xc99521c 0x78dc19b060
	void ClearAudioListenerAttenuationOverride();// 0xc995118 0x78dc19b140
	bool CanRestartPlayer();// 0xc9950d8 0x78dc19b220
	void Camera(FName NewMode);// 0xc995550 0x78dc19b300
	void AddYawInput(float Val);// 0xc996d48 0x78dc19b3e0
	void AddRollInput(float Val);// 0xc996c98 0x78dc19b4c0
	void AddPitchInput(float Val);// 0xc996df8 0x78dc19b5a0
	bool AddHitProxyQueryRequestWithUserInput(out const IntPoint InQueryPoint);// 0xc99cb90 0x78dc19b680
	bool AddHitProxyQueryRequest(out IntPoint OutMousePosition);// 0xc99cc4c 0x78dc19b760
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0xc9956b8 0x78dc19b840

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8] 0x78ce9bef80

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8] 0x78d7304b80
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4] 0x78d7304c00
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4] 0x78d7304c80
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4] 0x78d7304d00

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x110, Size: 0x10] 0x78dbfcb180
	delegate ColorAndOpacityDelegate;//[Offset: 0x120, Size: 0x10] 0x78dbfcb200
	SlateColor ForegroundColor;//[Offset: 0x130, Size: 0x28] 0x78dbfcb280
	delegate ForegroundColorDelegate;//[Offset: 0x158, Size: 0x10] 0x78dbfcb300
	delegate OnVisibilityChanged;//[Offset: 0x168, Size: 0x10] 0x78dbfcb380
	Margin Padding;//[Offset: 0x190, Size: 0x10] 0x78dbfcb400
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a0, Size: 0x10] 0x78dbf2c220
	UMGSequenceTickManager* AnimationTickManager;//[Offset: 0x1b0, Size: 0x8] 0x78dbfcb500
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b8, Size: 0x10] 0x78dbf2c2c0
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c8, Size: 0x10] 0x78dbf2c360
	WidgetTree* WidgetTree;//[Offset: 0x1d8, Size: 0x8] 0x78dbfc9580
	int Priority;//[Offset: 0x1e0, Size: 0x4] 0x78dbfc9600
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 0x1] 0x78dbfc9680
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e4, Size: 0x1] 0x78dbfc9700
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e4, Size: 0x1] 0x78dbfc9780
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e4, Size: 0x1] 0x78dbfc9800
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e4, Size: 0x1] 0x78dbfc9880
	enum TickFrequency;//[Offset: 0x1f0, Size: 0x1] 0x78dbf2c400
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 0x8] 0x78dbfc9980
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x200, Size: 0x10] 0x78dbf2c4a0
	void UnregisterInputComponent();// 0xbb23c6c 0x78dbfbace0
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0xbb2589c 0x78dbfb7400
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0xbb25604 0x78dbfb74e0
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0xbb257f4 0x78dbfb75c0
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0xbb2555c 0x78dbfb76a0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xaa7cd18 0x78dbfb7780
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0xbb23ca8 0x78dbfb7860
	void StopListeningForAllInputActions();// 0xbb23c94 0x78dbfb7940
	void StopAnimationsAndLatentActions();// 0xbb25a8c 0x78dbfb7a20
	void StopAnimation(const WidgetAnimation* InAnimation);// 0xbb246ac 0x78dbfb7b00
	void StopAllAnimations();// 0xbb24698 0x78dbfb7be0
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0xbb25e94 0x78dbfb7cc0
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0xbb24170 0x78dbfb7da0
	void SetPadding(Margin InPadding);// 0xbb24ea4 0x78dbfb7e80
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0xbb25b1c 0x78dbfb7f60
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0xbb24264 0x78dbfb8040
	void SetInputActionPriority(int NewPriority);// 0xbb23b10 0x78dbfb8120
	void SetInputActionBlocking(bool bShouldBlock);// 0xbb23a60 0x78dbfb8200
	void SetForegroundColor(SlateColor InForegroundColor);// 0xbb24f50 0x78dbfb82e0
	void SetDesiredSizeInViewport(Vector2D Size);// 0xbb25df0 0x78dbfb83c0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0xbb251c4 0x78dbfb84a0
	void SetAnimationCurrentTime(const WidgetAnimation* InAnimation, float InTime);// 0xbb24444 0x78dbfb8580
	void SetAnchorsInViewport(Anchors Anchors);// 0xbb25d44 0x78dbfb8660
	void SetAlignmentInViewport(Vector2D Alignment);// 0xbb25ca0 0x78dbfb8740
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0xbb240c8 0x78dbfb8820
	void RemoveFromViewport();// 0xbb25f8c 0x78dbfb8900
	void RegisterInputComponent();// 0xbb23c80 0x78dbfb89e0
	void PreConstruct(bool IsDesignTime);// 0xaa7cd18 0x78dbfb8ac0
	void PlaySound(SoundBase* SoundToPlay);// 0xbb23f58 0x78dbfb8ba0
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0xbb249f4 0x78dbfb8c80
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0xbb24754 0x78dbfb8d60
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0xbb248a4 0x78dbfb8e40
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0xbb24c70 0x78dbfb8f20
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0xbb245e8 0x78dbfb9000
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xaa7cd18 0x78dbfb5720
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xaa7cd18 0x78dbfb5800
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0xaa7cd18 0x78dbfb58e0
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xaa7cd18 0x78dbfb59c0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xaa7cd18 0x78dbfb5aa0
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0xaa7cd18 0x78dbfb5b80
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xaa7cd18 0x78dbfb5c60
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xaa7cd18 0x78dbfb5d40
	void OnPaint(out PaintContext Context);// 0xaa7cd18 0x78dbfb5e20
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xaa7cd18 0x78dbfb5f00
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xaa7cd18 0x78dbfb5fe0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0xaa7cd18 0x78dbfb60c0
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xaa7cd18 0x78dbfb61a0
	void OnMouseCaptureLost();// 0xaa7cd18 0x78dbfb6280
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xaa7cd18 0x78dbfb6360
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xaa7cd18 0x78dbfb6440
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0xaa7cd18 0x78dbfb6520
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0xaa7cd18 0x78dbfb6600
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xaa7cd18 0x78dbfb66e0
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xaa7cd18 0x78dbfb67c0
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0xaa7cd18 0x78dbfb68a0
	void OnInitialized();// 0xaa7cd18 0x78dbfb6980
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0xaa7cd18 0x78dbfb6a60
	void OnFocusLost(FocusEvent InFocusEvent);// 0xaa7cd18 0x78dbfb6b40
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xaa7cd18 0x78dbfb6c20
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xaa7cd18 0x78dbfb6d00
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0xaa7cd18 0x78dbfb6de0
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xaa7cd18 0x78dbfb6ec0
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0xaa7cd18 0x78dbfb6fa0
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0xaa7cd18 0x78dbfb7080
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0xbb2531c 0x78dbfb7160
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0xbb2526c 0x78dbfb7240
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0xaa7cd18 0x78dbfb7320
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0xaa7cd18 0x78dbfb3a40
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate callback);// 0xbb23d9c 0x78dbfb3b20
	bool IsPlayingAnimation();// 0xbb23f34 0x78dbfb3c00
	bool IsListeningForInputAction(FName ActionName);// 0xbb23bb8 0x78dbfb3ce0
	bool IsInViewport();// 0xbb25bc4 0x78dbfb3dc0
	bool IsInteractable();// 0xaa7cd18 0x78dbfb3ea0
	bool IsAnyAnimationPlaying();// 0xbb24358 0x78dbfb3f80
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0xbb24014 0x78dbfb4060
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0xbb24390 0x78dbfb4140
	Pawn* GetOwningPlayerPawn();// 0xbb25ae8 0x78dbfb4220
	PlayerCameraManager* GetOwningPlayerCameraManager();// 0xbb25ab4 0x78dbfb4300
	bool GetIsVisible();// 0xbb25bfc 0x78dbfb43e0
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0xbb24538 0x78dbfb44c0
	Anchors GetAnchorsInViewport();// 0xbb25c68 0x78dbfb45a0
	Vector2D GetAlignmentInViewport();// 0xbb25c34 0x78dbfb4680
	void FlushAnimations();// 0xbb24000 0x78dbfb4760
	void Destruct();// 0xaa7cd18 0x78dbfb4840
	void Construct();// 0xaa7cd18 0x78dbfb4920
	void CancelLatentActions();// 0xbb25aa0 0x78dbfb4a00
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0xbb25994 0x78dbfb4ae0
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0xbb256fc 0x78dbfb4bc0
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0xbb253cc 0x78dbfb4ca0
	void AddToViewport(int ZOrder);// 0xbb26054 0x78dbfb4d80
	bool AddToPlayerScreen(int ZOrder);// 0xbb25fa0 0x78dbfb4e60

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8] 0x78ce9bb980
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10] 0x78ce9bba00
	FText ToolTipText;//[Offset: 0x40, Size: 0x18] 0x78ce9bba80
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10] 0x78ce9bbb00
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8] 0x78ce9bbb80
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10] 0x78ce9bbc00
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10] 0x78ce9bbc80
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c] 0x78ce9bbd00
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8] 0x78ce9bbd80
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1] 0x78ce9bbe00
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1] 0x78ce9bbe80
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1] 0x78ce9bbf00
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1] 0x78ce9bbf80
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8] 0x78ce9bc000
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x78ce9bc080
	byte Cursor;//[Offset: 0xc1, Size: 0x1] 0x78ce9bc100
	enum Clipping;//[Offset: 0xc2, Size: 0x1] 0x78cdd55a60
	enum Visibility;//[Offset: 0xc3, Size: 0x1] 0x78cdd55b00
	float RenderOpacity;//[Offset: 0xc4, Size: 0x4] 0x78ce9bc280
	WidgetNavigation* Navigation;//[Offset: 0xc8, Size: 0x8] 0x78ce9bc300
	enum FlowDirectionPreference;//[Offset: 0xd0, Size: 0x1] 0x78cdd55ba0
	PropertyBinding*[] NativeBindings;//[Offset: 0xf8, Size: 0x10] 0x78cdd55c40
	void SetVisibility(enum InVisibility);// 0xbb31390 0x78cd8e1820
	void SetUserFocus(PlayerController* PlayerController);// 0xbb30cd4 0x78cd8e1900
	void SetToolTipText(out const FText InToolTipText);// 0xbb31610 0x78cd8e19e0
	void SetToolTip(Widget* Widget);// 0xbb31568 0x78cd8e1ac0
	void SetRenderTranslation(Vector2D Translation);// 0xbb31920 0x78cd8e1ba0
	void SetRenderTransformPivot(Vector2D Pivot);// 0xbb3187c 0x78cd8e1c80
	void SetRenderTransformAngle(float Angle);// 0xbb319f8 0x78cebce780
	void SetRenderTransform(WidgetTransform InTransform);// 0xbb31be8 0x78cebce860
	void SetRenderShear(Vector2D Shear);// 0xbb31aa0 0x78cebce940
	void SetRenderScale(Vector2D Scale);// 0xbb31b44 0x78cebcea20
	void SetRenderOpacity(float InOpacity);// 0xbb312b4 0x78cebceb00
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0xbb3085c 0x78cebcebe0
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0xbb3066c 0x78cebcecc0
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0xbb30764 0x78cebceda0
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0xbb30950 0x78cebcee80
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0xbb30a44 0x78cebcef60
	void SetKeyboardFocus();// 0xbb30f68 0x78cebcf040
	void SetIsEnabled(bool bInIsEnabled);// 0xbb3178c 0x78cebcf120
	void SetFocus();// 0xbb30d7c 0x78cebcf200
	void SetCursor(byte InCursor);// 0xbb314c0 0x78cebcf2e0
	void SetClipping(enum InClipping);// 0xbb311d8 0x78cebcf3c0
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0xbb30b84 0x78cebcf4a0
	void ResetCursor();// 0xbb314ac 0x78cebcf580
	void RemoveFromParent();// 0xbb3061c 0x78cebcf660
	EventReply OnReply__DelegateSignature();// 0xaa7cd18 0x78cebcf740
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xaa7cd18 0x78cebcf820
	bool IsVisible();// 0xbb31474 0x78cebcf900
	bool IsHovered();// 0xbb310e8 0x78cebcf9e0
	void InvalidateLayoutAndVolatility();// 0xbb30cac 0x78cebcfac0
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0xbb30d90 0x78cebcfba0
	bool HasUserFocus(PlayerController* PlayerController);// 0xbb30eb4 0x78cebcfc80
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0xbb30f7c 0x78cebcfd60
	bool HasMouseCapture();// 0xbb31078 0x78cebcfe40
	bool HasKeyboardFocus();// 0xbb310b0 0x78cebcff20
	bool HasFocusedDescendants();// 0xbb30e44 0x78cebccaa0
	bool HasAnyUserFocus();// 0xbb30e7c 0x78cebccb80
	Widget* GetWidget__DelegateSignature();// 0xaa7cd18 0x78cebccc60
	enum GetVisibility();// 0xbb31440 0x78cebccd40
	Geometry GetTickSpaceGeometry();// 0xbb305ac 0x78cebcce20
	FText GetText__DelegateSignature();// 0xaa7cd18 0x78cebccf00
	enum GetSlateVisibility__DelegateSignature();// 0xaa7cd18 0x78cebccfe0
	SlateColor GetSlateColor__DelegateSignature();// 0xaa7cd18 0x78cebcd0c0
	SlateBrush GetSlateBrush__DelegateSignature();// 0xaa7cd18 0x78cebcd1a0
	float GetRenderTransformAngle();// 0xbb319c4 0x78cebcd280
	float GetRenderOpacity();// 0xbb3135c 0x78cebcd360
	PanelWidget* GetParent();// 0xbb30638 0x78cebcd440
	Geometry GetPaintSpaceGeometry();// 0xbb30574 0x78cebcd520
	PlayerController* GetOwningPlayer();// 0xbb30504 0x78cebcd600
	LocalPlayer* GetOwningLocalPlayer();// 0xbb304c8 0x78cebcd6e0
	byte GetMouseCursor__DelegateSignature();// 0xaa7cd18 0x78cebcd7c0
	LinearColor GetLinearColor__DelegateSignature();// 0xaa7cd18 0x78cebcd8a0
	bool GetIsEnabled();// 0xbb31844 0x78cebcd980
	int GetInt32__DelegateSignature();// 0xaa7cd18 0x78cebcda60
	GameInstance* GetGameInstance();// 0xbb30540 0x78cebcdb40
	float GetFloat__DelegateSignature();// 0xaa7cd18 0x78cebcdc20
	Vector2D GetDesiredSize();// 0xbb30c78 0x78cebcdd00
	enum GetClipping();// 0xbb31280 0x78cebcdde0
	enum GetCheckBoxState__DelegateSignature();// 0xaa7cd18 0x78cebcdec0
	Geometry GetCachedGeometry();// 0xbb305e4 0x78cebcdfa0
	bool GetBool__DelegateSignature();// 0xaa7cd18 0x78cebce080
	FText GetAccessibleText();// 0xbb303f4 0x78cebce160
	FText GetAccessibleSummaryText();// 0xbb30320 0x78cebce240
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0xaa7cd18 0x78cebce320
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0xaa7cd18 0x78cebce400
	void ForceVolatile(bool bForce);// 0xbb31128 0x78cebce4e0
	void ForceLayoutPrepass();// 0xbb30cc0 0x78cebce5c0

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10] 0x78ce9ba000
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1] 0x78ce9ba100

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4] 0x78ce9b9d80
	float Top;//[Offset: 0x4, Size: 0x4] 0x78ce9b9e00
	float Right;//[Offset: 0x8, Size: 0x4] 0x78ce9b9e80
	float Bottom;//[Offset: 0xc, Size: 0x4] 0x78ce9b9f00

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* parent;//[Offset: 0x28, Size: 0x8] 0x78d726ae80
	Widget* Content;//[Offset: 0x30, Size: 0x8] 0x78d726af00

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x108, Size: 0x10] 0x78cdd5bc80
	bool RemoveChildAt(int Index);// 0xbb0d44c 0x78d3d2d600
	bool RemoveChild(Widget* Content);// 0xbb0d2e8 0x78d3d2d6e0
	bool HasChild(Widget* Content);// 0xbb0d500 0x78d3d2d7c0
	bool HasAnyChildren();// 0xbb0d2b0 0x78d3d2d8a0
	int GetChildrenCount();// 0xbb0d7e8 0x78d3d2d980
	int GetChildIndex(const Widget* Content);// 0xbb0d5b4 0x78d3d2da60
	Widget* GetChildAt(int Index);// 0xbb0d738 0x78d3d2db40
	Widget*[] GetAllChildren();// 0xbb0d664 0x78d3d2dc20
	void ClearChildren();// 0xbb0d294 0x78d3d2dd00
	PanelSlot* AddChild(Widget* Content);// 0xbb0d39c 0x78d3d2dde0

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8] 0x78ce9ba680
	Vector2D Scale;//[Offset: 0x8, Size: 0x8] 0x78ce9ba700
	Vector2D Shear;//[Offset: 0x10, Size: 0x8] 0x78ce9ba780
	float Angle;//[Offset: 0x18, Size: 0x4] 0x78ce9ba800

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78ce9b9400
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1] 0x78cdd56640
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1] 0x78cdd53e40
	FText AccessibleText;//[Offset: 0x30, Size: 0x18] 0x78ce9b7500
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10] 0x78ce9b7580
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18] 0x78ce9b7400
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10] 0x78ce9b7600

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24] 0x78d728f580
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24] 0x78d728f600
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24] 0x78d728f680
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24] 0x78d728f700
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24] 0x78d728f780
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24] 0x78d728d700

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1] 0x78dbe58c60
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8] 0x78dbe8ef80
	Widget* Widget;//[Offset: 0xc, Size: 0x8] 0x78dbe8f000
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10] 0x78dbe8f080

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8] 0x78d726aa00
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28] 0x78d726aa80
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8] 0x78d726ab00

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10] 0x78dbe56820
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8] 0x78dbe8c900

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbe8c700
	int ArrayIndex;//[Offset: 0x8, Size: 0x4] 0x78dbe8c780
	Struct* Struct;//[Offset: 0x10, Size: 0x8] 0x78dbe8c800

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x78d728b500
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x68, Size: 0x10] 0x78d72701a0
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78d7289500
	FString DisplayLabel;//[Offset: 0x80, Size: 0x10] 0x78d7289580
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0xbb33278 0x78d72919e0
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0xbb32fe0 0x78d7291ac0
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0xbb331d0 0x78d7291ba0
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0xbb32f38 0x78d7291c80
	float GetStartTime();// 0xbb3349c 0x78d725e780
	float GetEndTime();// 0xbb33468 0x78d725e860
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0xbb33370 0x78d725e940
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0xbb330d8 0x78d725ea20

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneCompiledData* CompiledData;//[Offset: 0x50, Size: 0x8] 0x78dc126d00
	enum DefaultCompletionMode;//[Offset: 0x58, Size: 0x1] 0x78dc112400
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78dc126e00
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1] 0x78dc126e80
	enum SequenceFlags;//[Offset: 0x5b, Size: 0x1] 0x78dc1124a0
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0xb836f84 0x78dc109e00
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0xb837084 0x78dc109ee0

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10] 0x78dc090900

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4] 0x78dbe4f080
	enum Space;//[Offset: 0x4, Size: 0x1] 0x78dbe52360
	Guid Guid;//[Offset: 0x8, Size: 0x10] 0x78dbe4f180

--------------------------------
Class: MovieSceneCompiledData.Object
	MovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x28, Size: 0x160] 0x78d7260800
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x188, Size: 0x118] 0x78d7260880
	MovieSceneEntityComponentField EntityComponentField;//[Offset: 0x2a0, Size: 0xf0] 0x78d7260900
	MovieSceneEvaluationField TrackTemplateField;//[Offset: 0x390, Size: 0x30] 0x78d7260980
	FrameTime[] DeterminismFences;//[Offset: 0x3c0, Size: 0x10] 0x78d715f420
	Guid CompiledSignature;//[Offset: 0x3d0, Size: 0x10] 0x78d7260a80
	Guid CompilerVersion;//[Offset: 0x3e0, Size: 0x10] 0x78d7260b00
	MovieSceneSequenceCompilerMaskStruct AccumulatedMask;//[Offset: 0x3f0, Size: 0x1] 0x78d7260b80
	MovieSceneSequenceCompilerMaskStruct AllocatedMask;//[Offset: 0x3f1, Size: 0x1] 0x78d7260c00
	enum AccumulatedFlags;//[Offset: 0x3f2, Size: 0x1] 0x78d715f4c0

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50] 0x78dbe39ac0
	Guid SequenceSignature;//[Offset: 0xa0, Size: 0x10] 0x78dbe61780
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0xb0, Size: 0x4] 0x78dbe61880
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0xb8, Size: 0xa8] 0x78dbe61b80

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x78dbe60c80

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10] 0x78dbe61180
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2] 0x78dbe61200
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1] 0x78dbe515a0
	MovieSceneTrack* SourceTrack;//[Offset: 0x14, Size: 0x8] 0x78dbe61300
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 0x10] 0x78dbe51640
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 0x38] 0x78dbe61400
	FName EvaluationGroup;//[Offset: 0x68, Size: 0x8] 0x78dbe61480
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78dbe61500
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x78dbe61580
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1] 0x78dbe61600

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4] 0x78dc091480
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x78dc091500
	Guid EvaluationFieldGuid;//[Offset: 0x58, Size: 0x10] 0x78dc091580
	MovieSceneTrackEvaluationField EvaluationField;//[Offset: 0x68, Size: 0x10] 0x78dc091600

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbe65300
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbe65380
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbe65400
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78dbe65480
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78dbe65500

--------------------------------
Class: MovieSceneTrackEvaluationField
	MovieSceneTrackEvaluationFieldEntry[] Entries;//[Offset: 0x0, Size: 0x10] 0x78dbe531c0

--------------------------------
Class: MovieSceneTrackEvaluationFieldEntry
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8] 0x78dbe67100
	FrameNumberRange Range;//[Offset: 0x8, Size: 0x10] 0x78dbe67180
	FrameNumber ForcedTime;//[Offset: 0x18, Size: 0x4] 0x78dbe67200
	enum Flags;//[Offset: 0x1c, Size: 0x1] 0x78dbe53120
	int16 LegacySortOrder;//[Offset: 0x1e, Size: 0x2] 0x78dbe67300

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x2] 0x78dc091a00
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 0x38] 0x78dc091a80
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 0x10] 0x78dc091b00
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 0x4] 0x78dc091b80
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 0x4] 0x78dc091c00
	int rowIndex;//[Offset: 0xa8, Size: 0x4] 0x78dc091c80
	int OverlapPriority;//[Offset: 0xac, Size: 0x4] 0x78dc091d00
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78dc091d80
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x78dc091e00
	float startTime;//[Offset: 0xb4, Size: 0x4] 0x78dc091e80
	float endTime;//[Offset: 0xb8, Size: 0x4] 0x78dc091f00
	float PrerollTime;//[Offset: 0xbc, Size: 0x4] 0x78dc091f80
	float PostrollTime;//[Offset: 0xc0, Size: 0x4] 0x78dc092000
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1] 0x78dc092080
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1] 0x78dc092100
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc6, Size: 0x2] 0x78dc090080
	void SetRowIndex(int NewRowIndex);// 0xb83617c 0x78dc02cb80
	void SetPreRollFrames(int InPreRollFrames);// 0xb835e3c 0x78dc02cc60
	void SetPostRollFrames(int InPostRollFrames);// 0xb835d6c 0x78dc02cd40
	void SetOverlapPriority(int NewPriority);// 0xb8360bc 0x78dc02ce20
	void SetIsLocked(bool bInIsLocked);// 0xb835f10 0x78dc02cf00
	void SetIsActive(bool bInIsActive);// 0xb835fe8 0x78dc02cfe0
	void SetCompletionMode(enum InCompletionMode);// 0xb8362ec 0x78dc02d0c0
	void SetBlendType(enum InBlendType);// 0xb836220 0x78dc02d1a0
	bool IsLocked();// 0xb835ef0 0x78dc02d280
	bool IsActive();// 0xb835fc8 0x78dc02d360
	int GetRowIndex();// 0xb836160 0x78dc02d440
	int GetPreRollFrames();// 0xb835e20 0x78dc02d520
	int GetPostRollFrames();// 0xb835d50 0x78dc02d600
	int GetOverlapPriority();// 0xb8360a0 0x78dc02d6e0
	enum GetCompletionMode();// 0xb836390 0x78dc02d7c0
	OptionalMovieSceneBlendType GetBlendType();// 0xb8362d0 0x78dc02d8a0

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 0x1] 0x78dbe52040
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78dbe4fd80

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe63900
	enum CompletionMode;//[Offset: 0x1, Size: 0x1] 0x78dbe53800

--------------------------------
Class: MovieSceneEasingSettings
	int AutoEaseInDuration;//[Offset: 0x0, Size: 0x4] 0x78dbe63a00
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 0x4] 0x78dbe63a80
	interface class None* EaseIn;//[Offset: 0x8, Size: 0x10] 0x78dbe63b00
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78dbe63b80
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 0x4] 0x78dbe63c00
	interface class None* EaseOut;//[Offset: 0x20, Size: 0x10] 0x78dbe63c80
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78dbe63d00
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 0x4] 0x78dbe63d80

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4] 0x78e6834d80

--------------------------------
Class: FrameNumberRange
	FrameNumberRangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x78e6836100
	FrameNumberRangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x78e6836180

--------------------------------
Class: FrameNumberRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x78e6836200
	FrameNumber Value;//[Offset: 0x4, Size: 0x4] 0x78e6836280

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x78dbe61800

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4] 0x78dbe61900
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50] 0x78dbe39c40
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50] 0x78dbe39d00

--------------------------------
Class: MovieSceneSequenceHierarchy
	MovieSceneSequenceHierarchyNode RootNode;//[Offset: 0x0, Size: 0x18] 0x78dbe64500
	MovieSceneSubSequenceTree Tree;//[Offset: 0x18, Size: 0x60] 0x78dbe64580
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x78, Size: 0x50] 0x78dbe3b8c0
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0xc8, Size: 0x50] 0x78dbe3ba40

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4] 0x78dbe65200
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10] 0x78dbe536c0

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x78dbe60b80

--------------------------------
Class: MovieSceneSubSequenceTree

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18] 0x78dbe64600
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0x20] 0x78dbe64680
	FrameRate TickResolution;//[Offset: 0x38, Size: 0x8] 0x78dbe64700
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 0x4] 0x78dbe64780
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 0x10] 0x78dbe64800
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 0x10] 0x78dbe64880
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 0x10] 0x78dbe64900
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 0x10] 0x78dbe64980
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 0x10] 0x78dbe64a00
	int16 HierarchicalBias;//[Offset: 0x94, Size: 0x2] 0x78dbe64a80
	bool bHasHierarchicalEasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1] 0x78dbe64b00
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 0x18] 0x78dbe64b80
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 0x10] 0x78dbe64c00
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 0x20] 0x78dbe65080

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc] 0x78dbe64c80
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10] 0x78dbe53620

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4] 0x78dbe64d00
	FrameTime Offset;//[Offset: 0x4, Size: 0x8] 0x78dbe64d80

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4] 0x78e6834b80
	float SubFrame;//[Offset: 0x4, Size: 0x4] 0x78e6834c00

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc] 0x78dbe64e00
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8] 0x78dbe64f80

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4] 0x78dbe64e80
	FrameNumber End;//[Offset: 0x4, Size: 0x4] 0x78dbe64f00

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4] 0x78e6834c80
	int Denominator;//[Offset: 0x4, Size: 0x4] 0x78e6834d00

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneEntityComponentField
	MovieSceneEvaluationFieldEntityTree PersistentEntityTree;//[Offset: 0x0, Size: 0x60] 0x78dbe61d00
	MovieSceneEvaluationFieldEntityTree OneShotEntityTree;//[Offset: 0x60, Size: 0x60] 0x78dbe61d80
	MovieSceneEvaluationFieldEntity[] Entities;//[Offset: 0xc0, Size: 0x10] 0x78dbe516e0
	MovieSceneEvaluationFieldEntityMetaData[] EntityMetaData;//[Offset: 0xd0, Size: 0x10] 0x78dbe51820
	MovieSceneEvaluationFieldSharedEntityMetaData[] SharedMetaData;//[Offset: 0xe0, Size: 0x10] 0x78dbe518c0

--------------------------------
Class: MovieSceneEvaluationFieldEntityTree

--------------------------------
Class: MovieSceneEvaluationFieldEntity
	MovieSceneEvaluationFieldEntityKey Key;//[Offset: 0x0, Size: 0xc] 0x78dbe61f00
	int SharedMetaDataIndex;//[Offset: 0xc, Size: 0x4] 0x78dbe61f80

--------------------------------
Class: MovieSceneEvaluationFieldEntityKey
	Object* EntityOwner;//[Offset: 0x0, Size: 0x8] 0x78dbe61e00
	uint32 EntityID;//[Offset: 0x8, Size: 0x4] 0x78dbe61e80

--------------------------------
Class: MovieSceneEvaluationFieldEntityMetaData
	FrameNumber ForcedTime;//[Offset: 0x0, Size: 0x4] 0x78dbe62080
	enum Flags;//[Offset: 0x8, Size: 0x1] 0x78dbe51780
	bool bEvaluateInSequencePreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1] 0x78dbe60080
	bool bEvaluateInSequencePostRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1] 0x78dbe60100

--------------------------------
Class: MovieSceneEvaluationFieldSharedEntityMetaData
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10] 0x78dbe60200

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10] 0x78dbe51960
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10] 0x78dbe51c80
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10] 0x78dbe51e60

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10] 0x78dbe51a00
	MovieSceneFieldEntry_EvaluationTrack[] TrackLUT;//[Offset: 0x10, Size: 0x10] 0x78dbe51aa0
	MovieSceneFieldEntry_ChildTemplate[] SectionLUT;//[Offset: 0x20, Size: 0x10] 0x78dbe51be0

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int NumInitPtrs;//[Offset: 0x0, Size: 0x4] 0x78dbe60480
	int NumEvalPtrs;//[Offset: 0x4, Size: 0x4] 0x78dbe60500

--------------------------------
Class: MovieSceneFieldEntry_EvaluationTrack
	MovieSceneEvaluationFieldTrackPtr TrackPtr;//[Offset: 0x0, Size: 0x8] 0x78dbe60700
	uint16 NumChildren;//[Offset: 0x8, Size: 0x2] 0x78dbe60780

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4] 0x78dbe60600
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4] 0x78dbe60680

--------------------------------
Class: MovieSceneFieldEntry_ChildTemplate
	uint16 ChildIndex;//[Offset: 0x0, Size: 0x2] 0x78dbe60880
	enum Flags;//[Offset: 0x2, Size: 0x1] 0x78dbe51b40
	FrameNumber ForcedTime;//[Offset: 0x4, Size: 0x4] 0x78dbe60980

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10] 0x78dbe51d20
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10] 0x78dbe51dc0

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc] 0x78dbe60e00
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2] 0x78dbe60e80
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2] 0x78dbe60f00

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4] 0x78dbe60c00
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4] 0x78dbe60d00
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4] 0x78dbe60d80

--------------------------------
Class: MovieSceneSequenceCompilerMaskStruct
	bool bHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbe4f880
	bool bEvaluationTemplate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbe4f900
	bool bEvaluationTemplateField;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbe4f980
	bool bEntityComponentField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78dbe4fa00

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10] 0x78d715f600
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10] 0x78d715f6a0
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10] 0x78d715f740
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50] 0x78d71034c0
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10] 0x78d715cea0
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8] 0x78d722f880
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10] 0x78d722f900
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10] 0x78d722f980
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8] 0x78d722fa00
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8] 0x78d722fa80
	enum EvaluationType;//[Offset: 0x118, Size: 0x1] 0x78d715cf40
	enum ClockSource;//[Offset: 0x119, Size: 0x1] 0x78d715cfe0
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18] 0x78d722fc00
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10] 0x78d715d080

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30] 0x78dbe65600
	FName[] Tags;//[Offset: 0x30, Size: 0x10] 0x78dbe53260
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78dbe65700
	bool bEvaluateTracksWhenNotSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x78dbe65780
	Guid Guid;//[Offset: 0x44, Size: 0x10] 0x78dbe65800
	FString Name;//[Offset: 0x58, Size: 0x10] 0x78dbe65880
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8] 0x78dbe65900
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10] 0x78dbe53300
	enum Ownership;//[Offset: 0x80, Size: 0x1] 0x78dbe533a0
	FName LevelName;//[Offset: 0x84, Size: 0x8] 0x78dbe65a80

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10] 0x78dbe538a0
	Guid Guid;//[Offset: 0x10, Size: 0x10] 0x78dbe64000
	FString Name;//[Offset: 0x20, Size: 0x10] 0x78dbe64080
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8] 0x78dbe53940
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10] 0x78dbe64100

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10] 0x78dbe4ff80
	FString BindingName;//[Offset: 0x10, Size: 0x10] 0x78dbe4e780
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10] 0x78dbe520e0

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10] 0x78dbe52400

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4] 0x78dbe4e980
	FString Label;//[Offset: 0x8, Size: 0x10] 0x78dbe4ea00

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8] 0x78dbe8f680
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8] 0x78dbe8f700
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10] 0x78dbe8f780
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78dbe8d700

--------------------------------
Class: Geometry

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x410, Size: 0x8] 0x78d7288e00
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x420, Size: 0xe8] 0x78d7288e80
	void SetUserTag(FName InUserTag);// 0xbb21f4c 0x78d725fc80
	FName GetUserTag();// 0xbb21ff4 0x78d725fd60

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	MovieSceneSequence* WeakRootSequence;//[Offset: 0x0, Size: 0x8] 0x78dbe62e80
	MovieSceneCompiledDataManager* CompiledDataManager;//[Offset: 0x8, Size: 0x8] 0x78dbe62f00
	MovieSceneEntitySystemLinker* EntitySystemLinker;//[Offset: 0x18, Size: 0x8] 0x78dbe62f80
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x90, Size: 0x50] 0x78dbe39700

--------------------------------
Class: MovieSceneCompiledDataManager.Object
	<int,MovieSceneSequenceHierarchy> Hierarchies;//[Offset: 0xd8, Size: 0x50] 0x78d71031c0
	<int,MovieSceneEvaluationTemplate> TrackTemplates;//[Offset: 0x128, Size: 0x50] 0x78d7103280
	<int,MovieSceneEvaluationField> TrackTemplateFields;//[Offset: 0x178, Size: 0x50] 0x78d7103340
	<int,MovieSceneEntityComponentField> EntityComponentFields;//[Offset: 0x1c8, Size: 0x50] 0x78d7103400

--------------------------------
Class: MovieSceneEntitySystemLinker.Object
	MovieSceneEntitySystemGraph SystemGraph;//[Offset: 0x238, Size: 0x138] 0x78d7260180

--------------------------------
Class: MovieSceneEntitySystemGraph
	MovieSceneEntitySystemGraphNodes Nodes;//[Offset: 0x80, Size: 0x38] 0x78dbe4f800

--------------------------------
Class: MovieSceneEntitySystemGraphNodes

--------------------------------
Class: UMGSequenceTickManager.Object
	<UserWidget*> WeakUserWidgets;//[Offset: 0x28, Size: 0x50] 0x78d7270380
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x78, Size: 0x8] 0x78d7288d80

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbe8da80
	Widget* Content;//[Offset: 0x8, Size: 0x8] 0x78dbe8db00

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8] 0x78d728ee00

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x128, Size: 0x10] 0x78d7331aa0
	bool WasControllerKeyJustReleased(Key Key);// 0xc87c470 0x78d732fc80
	bool WasControllerKeyJustPressed(Key Key);// 0xc87c6dc 0x78d732fd60
	bool IsControllerKeyDown(Key Key);// 0xc87c948 0x78d732fe40
	void GetTouchState(int FingerIndex, out float locationX, out float locationY, out bool bIsCurrentlyPressed);// 0xc87bdf4 0x78d732ff20
	Vector GetControllerVectorKeyState(Key Key);// 0xc87bf9c 0x78d732caa0
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0xc87ba88 0x78d732cb80
	float GetControllerKeyTimeDown(Key Key);// 0xc87bb8c 0x78d732cc60
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0xc87b938 0x78d732cd40
	float GetControllerAnalogKeyState(Key Key);// 0xc87c208 0x78d732ce20

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8] 0x78dbf15a80

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10] 0x78d73393e0
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10] 0x78d7339480
	void SetMouseSensitivity(const float Sensitivity);// 0xc9a56f4 0x78d7417a20
	void SetBind(FName bindName, FString Command);// 0xc9a55dc 0x78d7417b00
	void InvertAxisKey(const Key AxisKey);// 0xc9a537c 0x78d7417be0
	void InvertAxis(const FName AxisName);// 0xc9a52d4 0x78d7417cc0
	void ClearSmoothing();// 0xc9a52c0 0x78d7417da0

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18] 0x78dbf3a880
	FString Command;//[Offset: 0x18, Size: 0x10] 0x78dbf3a900
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78dbf3a980
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78dbf3aa00
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x78dbf3aa80
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x78dbf3ab00
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1] 0x78dbf3ab80
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1] 0x78dbf3ac00
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1] 0x78dbf3ac80
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1] 0x78dbf3ad00
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x78dbf3ad80

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8] 0x78dbe8d880
	delegate Delegate;//[Offset: 0x8, Size: 0x10] 0x78dbe8d900
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1] 0x78dbe58f80
	FName UserTag;//[Offset: 0x1c, Size: 0x8] 0x78dbe8da00

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8] 0x78dbe44c00
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8] 0x78dbe44c80

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x30, Size: 0x8] 0x78d72a8c80
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78d72a8d00
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78d72a8d80
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x78d72a8e00
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1] 0x78d72a8e80
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1] 0x78d72a8f00
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1] 0x78d72a8f80
	enum VirtualizationMode;//[Offset: 0x39, Size: 0x1] 0x78d7273da0
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x90, Size: 0x50] 0x78d7271500
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xe0, Size: 0x24] 0x78d72a9100
	float Duration;//[Offset: 0x104, Size: 0x4] 0x78d72a9180
	float MaxDistance;//[Offset: 0x108, Size: 0x4] 0x78d72a9200
	float TotalSamples;//[Offset: 0x10c, Size: 0x4] 0x78d72a9280
	float Priority;//[Offset: 0x110, Size: 0x4] 0x78d72a9300
	SoundAttenuation* AttenuationSettings;//[Offset: 0x118, Size: 0x8] 0x78d72a9380
	SoundModulationDefaultRoutingSettings ModulationSettings;//[Offset: 0x120, Size: 0x48] 0x78d72a9400
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x168, Size: 0x8] 0x78d72a9480
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x170, Size: 0x10] 0x78d72715a0
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x180, Size: 0x8] 0x78d72a7480
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x188, Size: 0x10] 0x78d7271640
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x198, Size: 0x10] 0x78d72716e0
	AssetUserData*[] AssetUserData;//[Offset: 0x1a8, Size: 0x10] 0x78d7271780

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x80] 0x78d7457300
	SoundClass*[] ChildClasses;//[Offset: 0xa8, Size: 0x10] 0x78d733ce00
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0xb8, Size: 0x10] 0x78d733a560
	SoundClass* ParentClass;//[Offset: 0xc8, Size: 0x8] 0x78d7455380

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4] 0x78dbf68000
	float Pitch;//[Offset: 0x4, Size: 0x4] 0x78dbf68080
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4] 0x78dbf68100
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4] 0x78dbf68180
	float StereoBleed;//[Offset: 0x10, Size: 0x4] 0x78dbf68200
	float LFEBleed;//[Offset: 0x14, Size: 0x4] 0x78dbf68280
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 0x4] 0x78dbf68300
	float RadioFilterVolume;//[Offset: 0x1c, Size: 0x4] 0x78dbf68380
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 0x4] 0x78dbf68400
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1] 0x78dbf66380
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1] 0x78dbf66400
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1] 0x78dbf66480
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1] 0x78dbf66500
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1] 0x78dbf66580
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1] 0x78dbf66600
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1] 0x78dbf66680
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 0x4] 0x78dbf66700
	SoundModulationDefaultSettings ModulationSettings;//[Offset: 0x30, Size: 0x40] 0x78dbf66980
	byte OutputTarget;//[Offset: 0x70, Size: 0x1] 0x78dbf66a00
	enum LoadingBehavior;//[Offset: 0x71, Size: 0x1] 0x78dbf23760
	SoundSubmix* DefaultSubmix;//[Offset: 0x78, Size: 0x8] 0x78dbf66b00

--------------------------------
Class: SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination;//[Offset: 0x0, Size: 0x10] 0x78dbf66780
	SoundModulationDestinationSettings PitchModulationDestination;//[Offset: 0x10, Size: 0x10] 0x78dbf66800
	SoundModulationDestinationSettings HighpassModulationDestination;//[Offset: 0x20, Size: 0x10] 0x78dbf66880
	SoundModulationDestinationSettings LowpassModulationDestination;//[Offset: 0x30, Size: 0x10] 0x78dbf66900

--------------------------------
Class: SoundModulationDestinationSettings
	float Value;//[Offset: 0x0, Size: 0x4] 0x78dbe0ec80
	SoundModulatorBase* Modulator;//[Offset: 0x8, Size: 0x8] 0x78dbe0ed00

--------------------------------
Class: SoundModulatorBase.Object

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78d745b500
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10] 0x78d733c180
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8] 0x78d7459500
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4] 0x78d7459580
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4] 0x78d7459600
	enum GainMode;//[Offset: 0x68, Size: 0x1] 0x78d733c220
	float OutputVolume;//[Offset: 0x6c, Size: 0x4] 0x78d7459700
	float WetLevel;//[Offset: 0x70, Size: 0x4] 0x78d7459780
	float DryLevel;//[Offset: 0x74, Size: 0x4] 0x78d7459800
	delegate OnSubmixRecordedFileDone;//[Offset: 0x78, Size: 0x10] 0x78d7459880
	void StopSpectralAnalysis(const Object* WorldContextObject);// 0xc9ff928 0x78d741d6e0
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0xca00324 0x78d741d7c0
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0xca001d4 0x78d741d8a0
	void StartSpectralAnalysis(const Object* WorldContextObject, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0xc9ff9d0 0x78d741d980
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0xca005d0 0x78d741da60
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0xca0027c 0x78d741db40
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0xc9ff834 0x78d741dc20
	void RemoveSpectralAnalysisDelegate(const Object* WorldContextObject, out const delegate OnSubmixSpectralAnalysisBP);// 0xc9ffbf4 0x78d741dd00
	void AddSpectralAnalysisDelegate(const Object* WorldContextObject, out const SoundSubmixSpectralAnalysisBandSettings[] InBandSettings, out const delegate OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);// 0xc9ffd04 0x78d741dde0
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0xca000c4 0x78d741dec0

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8] 0x78d7458780

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10] 0x78d733c680

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x1b8, Size: 0x4] 0x78d72aa100
	int StreamingPriority;//[Offset: 0x1bc, Size: 0x4] 0x78d72aa180
	enum SampleRateQuality;//[Offset: 0x1c0, Size: 0x1] 0x78d72739e0
	byte SoundGroup;//[Offset: 0x1c2, Size: 0x1] 0x78d72aa280
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c3, Size: 0x1] 0x78d72aa300
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c3, Size: 0x1] 0x78d72aa380
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c3, Size: 0x1] 0x78d72aa400
	enum LoadingBehavior;//[Offset: 0x1c4, Size: 0x1] 0x78d7273a80
	bool bMature;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c5, Size: 0x1] 0x78d72aa500
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c5, Size: 0x1] 0x78d72a8480
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c6, Size: 0x1] 0x78d72a8500
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c6, Size: 0x1] 0x78d72a8580
	float[] FrequenciesToAnalyze;//[Offset: 0x1c8, Size: 0x10] 0x78d7273b20
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x1d8, Size: 0x10] 0x78d7273bc0
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x1e8, Size: 0x10] 0x78d7273c60
	int InitialChunkSize;//[Offset: 0x1f8, Size: 0x4] 0x78d72a8780
	FString SpokenText;//[Offset: 0x240, Size: 0x10] 0x78d72a8800
	float SubtitlePriority;//[Offset: 0x250, Size: 0x4] 0x78d72a8880
	float Volume;//[Offset: 0x254, Size: 0x4] 0x78d72a8900
	float Pitch;//[Offset: 0x258, Size: 0x4] 0x78d72a8980
	int NumChannels;//[Offset: 0x25c, Size: 0x4] 0x78d72a8a00
	int SampleRate;//[Offset: 0x260, Size: 0x4] 0x78d72a8a80
	SubtitleCue[] Subtitles;//[Offset: 0x270, Size: 0x10] 0x78d7273d00
	CurveTable* Curves;//[Offset: 0x280, Size: 0x8] 0x78d72a8b80
	CurveTable* InternalCurves;//[Offset: 0x288, Size: 0x8] 0x78d72a8c00

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10] 0x78dbf23300
	float TimeSec;//[Offset: 0x10, Size: 0x4] 0x78dbf6a100

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4] 0x78dbf69f80
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4] 0x78dbf6a000

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x78dbf6a180
	float TimeSec;//[Offset: 0x4, Size: 0x4] 0x78dbf6a200

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18] 0x78d3563d00
	float Time;//[Offset: 0x18, Size: 0x4] 0x78d3563d80

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSpectralAnalysisBandSettings
	float BandFrequency;//[Offset: 0x0, Size: 0x4] 0x78dbf6a280
	int AttackTimeMsec;//[Offset: 0x4, Size: 0x4] 0x78dbf6a300
	int ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4] 0x78dbf6a380
	float QFactor;//[Offset: 0xc, Size: 0x4] 0x78dbf6a400

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8] 0x78dbf66b80
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4] 0x78dbf66c00
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4] 0x78dbf66c80

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78d7456800
	float EQPriority;//[Offset: 0x2c, Size: 0x4] 0x78d7456880
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40] 0x78d7456900
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10] 0x78d733cc20
	float InitialDelay;//[Offset: 0x80, Size: 0x4] 0x78d7456a00
	float FadeInTime;//[Offset: 0x84, Size: 0x4] 0x78d7456a80
	float Duration;//[Offset: 0x88, Size: 0x4] 0x78d7456b00
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4] 0x78d7456b80

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4] 0x78dbf69000
	float Gain0;//[Offset: 0x14, Size: 0x4] 0x78dbf69080
	float Bandwidth0;//[Offset: 0x18, Size: 0x4] 0x78dbf69100
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4] 0x78dbf69180
	float Gain1;//[Offset: 0x20, Size: 0x4] 0x78dbf69200
	float Bandwidth1;//[Offset: 0x24, Size: 0x4] 0x78dbf69280
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4] 0x78dbf69300
	float Gain2;//[Offset: 0x2c, Size: 0x4] 0x78dbf69380
	float Bandwidth2;//[Offset: 0x30, Size: 0x4] 0x78dbf69400
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4] 0x78dbf69480
	float Gain3;//[Offset: 0x38, Size: 0x4] 0x78dbf67400
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4] 0x78dbf67480

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8] 0x78dbf67500
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4] 0x78dbf67580
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4] 0x78dbf67600
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4] 0x78dbf67680
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x78dbf67700
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4] 0x78dbf67780

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x24] 0x78d7457280

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4] 0x78dbf67b00
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x78dbf67b80
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1] 0x78dbf67c00
	float RetriggerTime;//[Offset: 0x8, Size: 0x4] 0x78dbf67c80
	float VolumeScale;//[Offset: 0xc, Size: 0x4] 0x78dbf67d00
	enum VolumeScaleMode;//[Offset: 0x10, Size: 0x4] 0x78dbf236c0
	float VolumeScaleAttackTime;//[Offset: 0x14, Size: 0x4] 0x78dbf67e00
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78dbf67e80
	float VolumeScaleReleaseTime;//[Offset: 0x1c, Size: 0x4] 0x78dbf67f00
	float VoiceStealReleaseTime;//[Offset: 0x20, Size: 0x4] 0x78dbf67f80

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0] 0x78d7455400

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78dbf66d00
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x78dbf66d80
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1] 0x78dbf66e00
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1] 0x78dbf66e80
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1] 0x78dbf66f00
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1] 0x78dbf66f80
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1] 0x78dbf67000
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1] 0x78dbf67080
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1] 0x78dbf67100
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1] 0x78dbf67180
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1] 0x78dbf67200
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1] 0x78dbf67280
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1] 0x78dbf67300
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4] 0x78dbf67380
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1] 0x78dbf23800
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1] 0x78dbf65380
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1] 0x78dbf238a0
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1] 0x78dbf23940
	float OmniRadius;//[Offset: 0xbc, Size: 0x4] 0x78dbf65500
	float StereoSpread;//[Offset: 0xc0, Size: 0x4] 0x78dbf65580
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4] 0x78dbf65600
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4] 0x78dbf65680
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88] 0x78dbf65700
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88] 0x78dbf65780
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4] 0x78dbf65800
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4] 0x78dbf65880
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4] 0x78dbf65900
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4] 0x78dbf65980
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4] 0x78dbf65a00
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4] 0x78dbf65a80
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4] 0x78dbf65b00
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4] 0x78dbf65b80
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4] 0x78dbf65c00
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4] 0x78dbf65c80
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4] 0x78dbf65d00
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4] 0x78dbf65d80
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4] 0x78dbf65e00
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4] 0x78dbf65e80
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4] 0x78dbf65f00
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4] 0x78dbf65f80
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4] 0x78dbf66000
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4] 0x78dbf66080
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4] 0x78dbf66100
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4] 0x78dbf66180
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4] 0x78dbf66200
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4] 0x78dbf66280
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88] 0x78dbf66300
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10] 0x78dbf23a80
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4] 0x78dbf64700
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4] 0x78dbf64780
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4] 0x78dbf64800
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4] 0x78dbf64880
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4] 0x78dbf64900
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88] 0x78dbf64980
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30] 0x78dbf64b80

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1] 0x78dbe5c4a0
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1] 0x78dbee2200
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4] 0x78dbee2280
	enum FalloffMode;//[Offset: 0x10, Size: 0x1] 0x78dbe5c540
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc] 0x78dbee2380
	float ConeOffset;//[Offset: 0x20, Size: 0x4] 0x78dbee2400
	float FalloffDistance;//[Offset: 0x24, Size: 0x4] 0x78dbee2480
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88] 0x78dbee2500

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80] 0x78dbe69980
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8] 0x78dbe69a00

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 0x8] 0x78dbf64280
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1] 0x78dbf239e0
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4] 0x78dbf64380
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4] 0x78dbf64400
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4] 0x78dbf64480
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4] 0x78dbf64500
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4] 0x78dbf64580
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88] 0x78dbf64600

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10] 0x78dbf23b20
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10] 0x78dbf23bc0
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10] 0x78dbf23c60

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	enum VolumeRouting;//[Offset: 0x40, Size: 0x1] 0x78dbf23440
	enum PitchRouting;//[Offset: 0x41, Size: 0x1] 0x78dbf234e0
	enum HighpassRouting;//[Offset: 0x42, Size: 0x1] 0x78dbf23580
	enum LowpassRouting;//[Offset: 0x43, Size: 0x1] 0x78dbf23620

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1] 0x78dbe5c220
	enum SendStage;//[Offset: 0x1, Size: 0x1] 0x78dbe5c2c0
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8] 0x78dbee3500
	float SendLevel;//[Offset: 0x10, Size: 0x4] 0x78dbee3580
	float MinSendLevel;//[Offset: 0x14, Size: 0x4] 0x78dbee3600
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4] 0x78dbee3680
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4] 0x78dbee3700
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4] 0x78dbee3780
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88] 0x78dbee3800

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10] 0x78d733cd60
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78d7456d00

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8] 0x78dbf67a00
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78dbf67a80

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1] 0x78dbf233a0
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8] 0x78dbf6a500
	AudioBus* AudioBus;//[Offset: 0x10, Size: 0x8] 0x78dbf68480
	float SendLevel;//[Offset: 0x18, Size: 0x4] 0x78dbf68500
	float MinSendLevel;//[Offset: 0x1c, Size: 0x4] 0x78dbf68580
	float MaxSendLevel;//[Offset: 0x20, Size: 0x4] 0x78dbf68600
	float MinSendDistance;//[Offset: 0x24, Size: 0x4] 0x78dbf68680
	float MaxSendDistance;//[Offset: 0x28, Size: 0x4] 0x78dbf68700
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x30, Size: 0x88] 0x78dbf68780

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x36c, Size: 0x1] 0x78d733c720
	float SourceBusDuration;//[Offset: 0x370, Size: 0x4] 0x78d7458900
	AudioBus* AudioBus;//[Offset: 0x378, Size: 0x8] 0x78d7458980
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 0x1] 0x78d7458a00

--------------------------------
Class: AudioBus.Object
	enum AudioBusChannels;//[Offset: 0x28, Size: 0x1] 0x78d72792a0
	bool bIsAutomatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78d72dd500

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10] 0x78d726f080
	Object* Payload;//[Offset: 0x38, Size: 0x8] 0x78d726f100
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8] 0x78d726f180
	enum Pivot;//[Offset: 0x48, Size: 0x1] 0x78d7270b00
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8] 0x78d726f280
	delegate OnDrop;//[Offset: 0x58, Size: 0x10] 0x78d726f300
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10] 0x78d726f380
	delegate OnDragged;//[Offset: 0x78, Size: 0x10] 0x78d726f400
	void drop(out const PointerEvent PointerEvent);// 0xbafa450 0x78d7258660
	void Dragged(out const PointerEvent PointerEvent);// 0xbafa0a0 0x78d7258740
	void DragCancelled(out const PointerEvent PointerEvent);// 0xbafa278 0x78d7258820

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8] 0x78ce9b9d00
	Margin Margin;//[Offset: 0x10, Size: 0x10] 0x78ce9b9f80
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28] 0x78ce9ba180
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8] 0x78ce9ba200
	FName ResourceName;//[Offset: 0x50, Size: 0x8] 0x78ce9ba280
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14] 0x78ce9ba300
	byte DrawAs;//[Offset: 0x6c, Size: 0x1] 0x78ce9ba380
	byte Tiling;//[Offset: 0x6d, Size: 0x1] 0x78ce9ba400
	byte Mirroring;//[Offset: 0x6e, Size: 0x1] 0x78ce9ba480
	byte ImageType;//[Offset: 0x6f, Size: 0x1] 0x78ce9ba500
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78ce9b8480
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78ce9b8500

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8] 0x78e6832d80
	Vector2D Max;//[Offset: 0x8, Size: 0x8] 0x78e6832e00
	byte bIsValid;//[Offset: 0x10, Size: 0x1] 0x78e6832e80

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8] 0x78d7407680
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1] 0x78d7407700
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8] 0x78d7337360
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78d7407780
	int ControllerId;//[Offset: 0xb8, Size: 0x4] 0x78d7407800

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8] 0x78dc017e00
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10] 0x78dbff63c0
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4] 0x78dc017f00
	World* World;//[Offset: 0x70, Size: 0x8] 0x78dc017f80
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8] 0x78dc018000
	void SSSwapControllers();// 0xc871064 0x78dc0204e0
	void ShowTitleSafeArea();// 0xc871048 0x78dc0205c0
	void SetConsoleTarget(int PlayerIndex);// 0xc870f98 0x78dc0206a0

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8] 0x78d7305d80
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8] 0x78d7305e00
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8] 0x78d7305e80
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10] 0x78d727d8a0

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8] 0x78dbf09c00
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8] 0x78dbe5d260

--------------------------------
Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8] 0x78d7479a80
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8] 0x78d7479b00
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8] 0x78d7479b80
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8] 0x78d7479c00
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8] 0x78d7479c80
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8] 0x78d7479d00
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8] 0x78d7479d80
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10] 0x78d733d3a0
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10] 0x78d733d440
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 0x10] 0x78d733d4e0
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x98, Size: 0x28] 0x78d7479f80
	FString StreamingLevelsPrefix;//[Offset: 0xc0, Size: 0x10] 0x78d747a000
	Level* CurrentLevelPendingVisibility;//[Offset: 0xd0, Size: 0x8] 0x78d747a080
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xd8, Size: 0x8] 0x78d747a100
	DemoNetDriver* DemoNetDriver;//[Offset: 0xe0, Size: 0x8] 0x78d747a180
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xe8, Size: 0x8] 0x78d747a200
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xf0, Size: 0x8] 0x78d747a280
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10e, Size: 0x1] 0x78d747a300
	NavigationSystemBase* NavigationSystem;//[Offset: 0x110, Size: 0x8] 0x78d747a380
	GameModeBase* AuthorityGameMode;//[Offset: 0x118, Size: 0x8] 0x78d747a400
	GameStateBase* GameState;//[Offset: 0x120, Size: 0x8] 0x78d747a480
	AISystemBase* AISystem;//[Offset: 0x128, Size: 0x8] 0x78d747a500
	AvoidanceManager* AvoidanceManager;//[Offset: 0x130, Size: 0x8] 0x78d7478480
	Level*[] Levels;//[Offset: 0x138, Size: 0x10] 0x78d733d580
	LevelCollection[] LevelCollections;//[Offset: 0x148, Size: 0x10] 0x78d733d620
	GameInstance* OwningGameInstance;//[Offset: 0x180, Size: 0x8] 0x78d7478600
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x188, Size: 0x10] 0x78d733d6c0
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x198, Size: 0x8] 0x78d7478700
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1a0, Size: 0x8] 0x78d7478780
	<ActorComponent*> ComponentsThatNeedPreEndOfFrameSync;//[Offset: 0x1f8, Size: 0x50] 0x78d733d760
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x248, Size: 0x10] 0x78d733d800
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x258, Size: 0x10] 0x78d733d8a0
	WorldComposition* WorldComposition;//[Offset: 0x5d8, Size: 0x8] 0x78d7478980
	WorldPSCPool PSCPool;//[Offset: 0x668, Size: 0x58] 0x78d7478a00
	WorldSettings* K2_GetWorldSettings();// 0xca3a0c8 0x78d7466980
	void HandleTimelineScrubbed();// 0xca3a0fc 0x78d7466a60

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8] 0x78d7406200
	Model* Model;//[Offset: 0xc0, Size: 0x8] 0x78d7406280
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10] 0x78d7337a40
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8] 0x78d7404280
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4] 0x78d7404300
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4] 0x78d7404380
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8] 0x78d7404400
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8] 0x78d7404480
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8] 0x78d7404500
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10] 0x78d7337ae0
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4] 0x78d7404600
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4] 0x78d7404680
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10] 0x78d7337b80
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10] 0x78d73352e0
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10] 0x78d7404800
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8] 0x78d7404880
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 0xc] 0x78d7404900
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1] 0x78d7404980
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1] 0x78d7404a00
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1] 0x78d7404a80
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1] 0x78d7404b00
	WorldSettings* WorldSettings;//[Offset: 0x258, Size: 0x8] 0x78d7404b80
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 0x10] 0x78d7335380
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x288, Size: 0x10] 0x78d7335420

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x488, Size: 0x8] 0x78d742df80

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10] 0x78d73379a0

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1] 0x78d7405b80
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0xaa7cd18 0x78d74135e0
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0xc912604 0x78d74136c0
	bool RemoteEvent(FName EventName);// 0xc9127ec 0x78d74137a0
	void LevelReset();// 0xaa7cd18 0x78d7413880

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4] 0x78e6831400
	int Y;//[Offset: 0x4, Size: 0x4] 0x78e6831480
	int Z;//[Offset: 0x8, Size: 0x4] 0x78e6831500

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x228, Size: 0x8] 0x78d742dc00
	BillboardComponent* GoodSprite;//[Offset: 0x230, Size: 0x8] 0x78d742dc80
	BillboardComponent* BadSprite;//[Offset: 0x238, Size: 0x8] 0x78d742dd00
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x78d742dd80

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x470, Size: 0x8] 0x78d72dec80
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x478, Size: 0x1] 0x78d72ded00
	float ScreenSize;//[Offset: 0x47c, Size: 0x4] 0x78d72ded80
	float U;//[Offset: 0x480, Size: 0x4] 0x78d72dee00
	float UL;//[Offset: 0x484, Size: 0x4] 0x78d72dee80
	float V;//[Offset: 0x488, Size: 0x4] 0x78d72def00
	float VL;//[Offset: 0x48c, Size: 0x4] 0x78d72def80
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0xc7dfa10 0x78d72cd440
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0xc7df838 0x78d72cd520
	void SetSprite(Texture2D* NewSprite);// 0xc7dfb9c 0x78d72cd600

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8] 0x78d742de00

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1] 0x78d7408d80

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x228, Size: 0x4] 0x78dc15fe00
	byte VisibilityAggressiveness;//[Offset: 0x22c, Size: 0x1] 0x78dc15fe80
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 0x1] 0x78dc15ff00
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22d, Size: 0x1] 0x78dc15ff80
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22d, Size: 0x1] 0x78dc15e780
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22d, Size: 0x1] 0x78dc15e800
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22d, Size: 0x1] 0x78dc15e880
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22d, Size: 0x1] 0x78dc15e900
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22d, Size: 0x1] 0x78dc15e980
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22d, Size: 0x1] 0x78dc15ea00
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22e, Size: 0x1] 0x78dc15ea80
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22e, Size: 0x1] 0x78dc15eb00
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22e, Size: 0x1] 0x78dc15eb80
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22e, Size: 0x1] 0x78dc15ec00
	bool bForceLightMapBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22e, Size: 0x1] 0x78dc15ec80
	byte GlobalLightMapBias;//[Offset: 0x22f, Size: 0x1] 0x78dc15ed00
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1] 0x78dc15ed80
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1] 0x78dc15ee00
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1] 0x78dc15ee80
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x238, Size: 0x8] 0x78dc15ef00
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x240, Size: 0x8] 0x78dc15ef80
	float WorldToMeters;//[Offset: 0x248, Size: 0x4] 0x78dc15f000
	float KillZ;//[Offset: 0x24c, Size: 0x4] 0x78dc15f080
	class DamageType* KillZDamageType;//[Offset: 0x250, Size: 0x8] 0x78dc117720
	float WorldGravityZ;//[Offset: 0x258, Size: 0x4] 0x78dc15f100
	float GlobalGravityZ;//[Offset: 0x25c, Size: 0x4] 0x78dc15f180
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x260, Size: 0x8] 0x78dc1177c0
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x268, Size: 0x8] 0x78dc117860
	class GameModeBase* DefaultGameMode;//[Offset: 0x270, Size: 0x8] 0x78dc117900
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x278, Size: 0x8] 0x78dc1179a0
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x280, Size: 0x4] 0x78dc15f200
	Vector DefaultColorScale;//[Offset: 0x284, Size: 0xc] 0x78dc15f280
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x290, Size: 0x4] 0x78dc15f300
	float GlobalDistanceFieldViewDistance;//[Offset: 0x294, Size: 0x4] 0x78dc15f380
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x298, Size: 0x4] 0x78dc15f400
	ReverbSettings DefaultReverbSettings;//[Offset: 0x2a0, Size: 0x20] 0x78dc15f480
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x2c0, Size: 0x24] 0x78dc15f500
	float MonoCullingDistance;//[Offset: 0x2e4, Size: 0x4] 0x78dc15f580
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x2e8, Size: 0x8] 0x78dc15f600
	float TimeDilation;//[Offset: 0x2f0, Size: 0x4] 0x78dc15f680
	float MatineeTimeDilation;//[Offset: 0x2f4, Size: 0x4] 0x78dc15f700
	float DemoPlayTimeDilation;//[Offset: 0x2f8, Size: 0x4] 0x78dc15f780
	float MinGlobalTimeDilation;//[Offset: 0x2fc, Size: 0x4] 0x78dc15d700
	float MaxGlobalTimeDilation;//[Offset: 0x300, Size: 0x4] 0x78dc15d780
	float MinUndilatedFrameTime;//[Offset: 0x304, Size: 0x4] 0x78dc15d800
	float MaxUndilatedFrameTime;//[Offset: 0x308, Size: 0x4] 0x78dc15d880
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x30c, Size: 0x40] 0x78dc15d900
	PlayerState* Pauser;//[Offset: 0x350, Size: 0x8] 0x78dc15d980
	NetViewer[] ReplicationViewers;//[Offset: 0x358, Size: 0x10] 0x78dc117a40
	AssetUserData*[] AssetUserData;//[Offset: 0x368, Size: 0x10] 0x78dc117ae0
	PlayerState* PauserPlayerState;//[Offset: 0x378, Size: 0x8] 0x78dc15db00
	int MaxNumberOfBookmarks;//[Offset: 0x380, Size: 0x4] 0x78dc15db80
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x388, Size: 0x8] 0x78dc117b80
	BookmarkBase*[] BookmarkArray;//[Offset: 0x390, Size: 0x10] 0x78dc1152e0
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x3a0, Size: 0x8] 0x78dc115380
	void OnRep_WorldGravityZ();// 0xca3b08c 0x78dc178d60

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18] 0x78d742da00
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4] 0x78d742da80
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8] 0x78d742db00
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x78d742db80

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbf32500
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbf32580
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbf32600
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78dbf32680
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78dbf32700
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78dbf32780
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78dbf32800
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78dbf32880
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78dbf32900
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78dbf32980
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78dbf32a00
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x78dbf32a80
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x78dbf32b00
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x78dbf32b80
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x78dbf32c00
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x78dbf32c80

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4] 0x78d7442000
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4] 0x78d7442080
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8] 0x78d7442100
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4] 0x78d7440080

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x220, Size: 0x10] 0x78dc15df00
	class GameSession* GameSessionClass;//[Offset: 0x230, Size: 0x8] 0x78dc115420
	class GameStateBase* GameStateClass;//[Offset: 0x238, Size: 0x8] 0x78dc1154c0
	class PlayerController* PlayerControllerClass;//[Offset: 0x240, Size: 0x8] 0x78dc115560
	class PlayerState* PlayerStateClass;//[Offset: 0x248, Size: 0x8] 0x78dc115600
	class HUD* HUDClass;//[Offset: 0x250, Size: 0x8] 0x78dc1156a0
	class Pawn* DefaultPawnClass;//[Offset: 0x258, Size: 0x8] 0x78dc115740
	class SpectatorPawn* SpectatorClass;//[Offset: 0x260, Size: 0x8] 0x78dc1157e0
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x268, Size: 0x8] 0x78dc115880
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x270, Size: 0x8] 0x78dc115920
	GameSession* GameSession;//[Offset: 0x278, Size: 0x8] 0x78dc15df80
	GameStateBase* GameState;//[Offset: 0x280, Size: 0x8] 0x78dc15e000
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x288, Size: 0x8] 0x78dc15e080
	FText DefaultPlayerName;//[Offset: 0x290, Size: 0x18] 0x78dc15e100
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x78dc15e180
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1] 0x78dc15e200
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1] 0x78dc15e280
	void StartPlay();// 0xc8595e4 0x78dc175b80
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0xc858904 0x78dc175c60
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0xc8587d8 0x78dc175d40
	bool ShouldReset(Actor* ActorToReset);// 0xc8594a8 0x78dc175e20
	void ReturnToMainMenuHost();// 0xc859470 0x78dc175f00
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0xc858a04 0x78dc175fe0
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0xc858b28 0x78dc1760c0
	void RestartPlayer(Controller* NewPlayer);// 0xc858c20 0x78dc1761a0
	void ResetLevel();// 0xc85948c 0x78dc176280
	bool PlayerCanRestart(PlayerController* Player);// 0xc858cd0 0x78dc176360
	bool MustSpectate(PlayerController* NewPlayerController);// 0xc859304 0x78dc176440
	void K2_PostLogin(PlayerController* NewPlayer);// 0xaa7cd18 0x78dc176520
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0xaa7cd18 0x78dc176600
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0xaa7cd18 0x78dc1766e0
	void K2_OnLogout(Controller* ExitingController);// 0xaa7cd18 0x78dc1767c0
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0xaa7cd18 0x78dc1768a0
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0xc858d8c 0x78dc176980
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0xc8586e0 0x78dc176a60
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0xc858630 0x78dc176b40
	bool HasMatchStarted();// 0xc8595a4 0x78dc176c20
	bool HasMatchEnded();// 0xc859564 0x78dc176d00
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0xc8593c0 0x78dc176de0
	int GetNumSpectators();// 0xc859600 0x78dc176ec0
	int GetNumPlayers();// 0xc85963c 0x78dc176fa0
	class Object GetDefaultPawnClassForController(Controller* InController);// 0xc859678 0x78dc177080
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0xc858eac 0x78dc177160
	Actor* ChoosePlayerStart(Controller* Player);// 0xc858fd4 0x78dc177240
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0xc85908c 0x78dc177320
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0xc859200 0x78dc173a40

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x220, Size: 0x4] 0x78d7365300
	int MaxPlayers;//[Offset: 0x224, Size: 0x4] 0x78d7365380
	int MaxPartySize;//[Offset: 0x228, Size: 0x4] 0x78d7365400
	byte MaxSplitscreensPerConnection;//[Offset: 0x22c, Size: 0x1] 0x78d7365480
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1] 0x78d7365500
	FName SessionName;//[Offset: 0x230, Size: 0x8] 0x78d7365580

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x220, Size: 0x8] 0x78d7159e80
	GameModeBase* AuthorityGameMode;//[Offset: 0x228, Size: 0x8] 0x78d7212700
	class SpectatorPawn* SpectatorClass;//[Offset: 0x230, Size: 0x8] 0x78d7159f20
	PlayerState*[] PlayerArray;//[Offset: 0x238, Size: 0x10] 0x78d7159fc0
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x78d7212800
	float ReplicatedWorldTimeSeconds;//[Offset: 0x24c, Size: 0x4] 0x78d7212880
	float ServerWorldTimeSecondsDelta;//[Offset: 0x250, Size: 0x4] 0x78d7212900
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x254, Size: 0x4] 0x78d7212980
	void OnRep_SpectatorClass();// 0xc86bf3c 0x78d7206440
	void OnRep_ReplicatedWorldTimeSeconds();// 0xc86bf04 0x78d7206520
	void OnRep_ReplicatedHasBegunPlay();// 0xc86bf20 0x78d7206600
	void OnRep_GameModeClass();// 0xc86bf58 0x78d72066e0
	bool HasMatchStarted();// 0xc86c124 0x78d72067c0
	bool HasMatchEnded();// 0xc86c0e4 0x78d72068a0
	bool HasBegunPlay();// 0xc86c164 0x78d7206980
	float GetServerWorldTimeSeconds();// 0xc86c1a4 0x78d7206a60
	float GetPlayerStartTime(Controller* Controller);// 0xc86c02c 0x78d7206b40
	float GetPlayerRespawnDelay(Controller* Controller);// 0xc86bf74 0x78d7206c20

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x27c, Size: 0x4] 0x78d730f380
	float BaseLookUpRate;//[Offset: 0x280, Size: 0x4] 0x78d730f400
	PawnMovementComponent* MovementComponent;//[Offset: 0x288, Size: 0x8] 0x78d730f480
	SphereComponent* CollisionComponent;//[Offset: 0x290, Size: 0x8] 0x78d730f500
	StaticMeshComponent* MeshComponent;//[Offset: 0x298, Size: 0x8] 0x78d730f580
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 0x1] 0x78d730f600
	void TurnAtRate(float Rate);// 0xc82e3b0 0x78d72fdec0
	void MoveUp_World(float Val);// 0xc82e460 0x78d72fdfa0
	void MoveRight(float Val);// 0xc82e510 0x78d72fe080
	void MoveForward(float Val);// 0xc82e5c0 0x78d72fe160
	void LookUpAtRate(float Rate);// 0xc82e300 0x78d72fe240

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x488, Size: 0x4] 0x78d7316700
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0xca05f68 0x78d73213c0
	float GetUnscaledSphereRadius();// 0xca05f04 0x78d73214a0
	float GetShapeScale();// 0xca05ec4 0x78d7321580
	float GetScaledSphereRadius();// 0xca05f20 0x78d7321660

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x498, Size: 0x8] 0x78d712e800
	int ForcedLodModel;//[Offset: 0x4a0, Size: 0x4] 0x78d712e880
	int PreviousLODLevel;//[Offset: 0x4a4, Size: 0x4] 0x78d712e900
	int MinLOD;//[Offset: 0x4a8, Size: 0x4] 0x78d712e980
	int SubDivisionStepSize;//[Offset: 0x4ac, Size: 0x4] 0x78d712ea00
	StaticMesh* StaticMesh;//[Offset: 0x4b0, Size: 0x8] 0x78d712ea80
	Color WireframeColorOverride;//[Offset: 0x4b8, Size: 0x4] 0x78d712eb00
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4bc, Size: 0x1] 0x78d712eb80
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4bc, Size: 0x1] 0x78d712ec00
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4bc, Size: 0x1] 0x78d712ec80
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4bc, Size: 0x1] 0x78d712ed00
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4bc, Size: 0x1] 0x78d712ed80
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4bc, Size: 0x1] 0x78d712ee00
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4bc, Size: 0x1] 0x78d712ee80
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4bc, Size: 0x1] 0x78d712ef00
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4bd, Size: 0x1] 0x78d712ef80
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4bd, Size: 0x1] 0x78d712f000
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4bd, Size: 0x1] 0x78d712f080
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4bd, Size: 0x1] 0x78d712f100
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4bd, Size: 0x1] 0x78d712f180
	int OverriddenLightMapRes;//[Offset: 0x4c0, Size: 0x4] 0x78d712f200
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x4c4, Size: 0x4] 0x78d712f280
	float DistanceFieldSelfShadowBias;//[Offset: 0x4c8, Size: 0x4] 0x78d712f300
	float StreamingDistanceMultiplier;//[Offset: 0x4cc, Size: 0x4] 0x78d712f380
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x4d0, Size: 0x10] 0x78dc11fc40
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x4e0, Size: 0x10] 0x78dc11fce0
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4f0, Size: 0x18] 0x78d712f500
	bool SetStaticMesh(StaticMesh* NewMesh);// 0xca18594 0x78d70fd980
	void SetReverseCulling(bool ReverseCulling);// 0xca181e8 0x78d70fda60
	void SetForcedLodModel(int NewForcedLodModel);// 0xca184ec 0x78d70fdb40
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);// 0xca18394 0x78d70fdc20
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0xca18444 0x78d70fdd00
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0xca18650 0x78d70fdde0
	void GetLocalBounds(out Vector Min, out Vector Max);// 0xca18298 0x78d70fdec0

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x208, Size: 0x8] 0x78d72e8100
	enum ReflectionSourceType;//[Offset: 0x210, Size: 0x1] 0x78d727c360
	enum MobileReflectionCompression;//[Offset: 0x211, Size: 0x1] 0x78d727c400
	TextureCube* Cubemap;//[Offset: 0x218, Size: 0x8] 0x78d72e8280
	float SourceCubemapAngle;//[Offset: 0x220, Size: 0x4] 0x78d72e8300
	float Brightness;//[Offset: 0x224, Size: 0x4] 0x78d72e8380
	bool bModifyMaxValueRGBM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x78d72e8400
	float MaxValueRGBM;//[Offset: 0x22c, Size: 0x4] 0x78d72e6380
	Vector CaptureOffset;//[Offset: 0x230, Size: 0xc] 0x78d72e6400
	Guid MapBuildDataId;//[Offset: 0x23c, Size: 0x10] 0x78d72e6480
	TextureCube* CachedEncodedHDRCubemap;//[Offset: 0x260, Size: 0x8] 0x78d72e6500

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4] 0x78dbf6bc80
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4] 0x78dbf6bd00
	float TexelFactor;//[Offset: 0x8, Size: 0x4] 0x78dbf6bd80

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbf10180
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbf10200
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbf10280
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78dbf10300
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4] 0x78dbf10380
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4] 0x78dbf10400
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4] 0x78dbf10480
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4] 0x78dbf10500
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4] 0x78dbf10580

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x220, Size: 0x8] 0x78d730e580
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78d730e600
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x78d730e680
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1] 0x78d730e700
	int CurrentTargetIndex;//[Offset: 0x22c, Size: 0x4] 0x78d730c680
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1] 0x78d730c700
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1] 0x78d730c780
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1] 0x78d730c800
	Actor*[] PostRenderedActors;//[Offset: 0x238, Size: 0x10] 0x78d727cfe0
	FName[] DebugDisplay;//[Offset: 0x250, Size: 0x10] 0x78d727d080
	FName[] ToggledDebugCategories;//[Offset: 0x260, Size: 0x10] 0x78d727d120
	Canvas* Canvas;//[Offset: 0x270, Size: 0x8] 0x78d730ca00
	Canvas* DebugCanvas;//[Offset: 0x278, Size: 0x8] 0x78d730ca80
	DebugTextInfo[] DebugTextList;//[Offset: 0x280, Size: 0x10] 0x78d727d1c0
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x290, Size: 0x8] 0x78d727d260
	Actor* ShowDebugTargetActor;//[Offset: 0x298, Size: 0x8] 0x78d730cb80
	void ShowHUD();// 0xc875728 0x78d72fb5a0
	void ShowDebugToggleSubCategory(FName Category);// 0xc8755d0 0x78d72fb680
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0xc875528 0x78d72fb760
	void ShowDebug(FName DebugType);// 0xc875678 0x78d72fb840
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0xc874fb0 0x78d72fb920
	void RemoveAllDebugStrings();// 0xc8750ac 0x78d72fba00
	void ReceiveHitBoxRelease(const FName BoxName);// 0xaa7cd18 0x78d72fbae0
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0xaa7cd18 0x78d72fbbc0
	void ReceiveHitBoxClick(const FName BoxName);// 0xaa7cd18 0x78d72fbca0
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0xaa7cd18 0x78d72fbd80
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0xaa7cd18 0x78d72fbe60
	Vector Project(Vector Location);// 0xc87359c 0x78d72fbf40
	void PreviousDebugTarget();// 0xc872f24 0x78d72fc020
	void NextDebugTarget();// 0xc872f40 0x78d72fc100
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0xc874d74 0x78d72fc1e0
	PlayerController* GetOwningPlayerController();// 0xc872f90 0x78d72fc2c0
	Pawn* GetOwningPawn();// 0xc872f5c 0x78d72fc3a0
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0xc87318c 0x78d72fc480
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0xc874028 0x78d72fc560
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0xc874204 0x78d72fc640
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0xc874abc 0x78d72fc720
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0xc8746cc 0x78d72fc800
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0xc873650 0x78d72fc8e0
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0xc873990 0x78d72fc9c0
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0xc873c00 0x78d72f90e0
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0xc87489c 0x78d72f91c0
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0xc873410 0x78d72f92a0
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0xc872fc4 0x78d72f9380
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0xc8750c0 0x78d72f9460

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4] 0x78d72ec200
	float OrgY;//[Offset: 0x2c, Size: 0x4] 0x78d72ec280
	float ClipX;//[Offset: 0x30, Size: 0x4] 0x78d72ec300
	float ClipY;//[Offset: 0x34, Size: 0x4] 0x78d72ec380
	Color DrawColor;//[Offset: 0x38, Size: 0x4] 0x78d72ec400
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78d72ec480
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78d72ec500
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x78d72ec580
	int SizeX;//[Offset: 0x40, Size: 0x4] 0x78d72ec600
	int SizeY;//[Offset: 0x44, Size: 0x4] 0x78d72ea580
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10] 0x78d72ea600
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8] 0x78d72ea680
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8] 0x78d72ea700
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8] 0x78d72ea780
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0xc804010 0x78d72f3c00
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0xc804188 0x78d72f3ce0
	Vector K2_Project(Vector WorldLocation);// 0xc8043f4 0x78d72f3dc0
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0xc804814 0x78d72f3ea0
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0xc8056ec 0x78d72f3f80
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0xc805030 0x78d72f4060
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0xc8044a8 0x78d72f4140
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0xc80466c 0x78d72f4220
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0xc80549c 0x78d72f4300
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0xc8059dc 0x78d72f43e0
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0xc8049bc 0x78d72f44c0
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0xc804b48 0x78d72f45a0
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0xc8042b4 0x78d72f4680

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8] 0x78dbf0c800
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8] 0x78dbf0c880
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10] 0x78dbf0c900
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8] 0x78dbf0c980
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8] 0x78dbf0ca00
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10] 0x78dbf0ca80
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8] 0x78dbf0cb00
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8] 0x78dbf0cb80
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10] 0x78dbf0cc00

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8] 0x78dbf09580
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc] 0x78dbf09600
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc] 0x78dbf09680
	FString DebugText;//[Offset: 0x20, Size: 0x10] 0x78dbf09700
	float TimeRemaining;//[Offset: 0x30, Size: 0x4] 0x78dbf09780
	float Duration;//[Offset: 0x34, Size: 0x4] 0x78dbf09800
	Color TextColor;//[Offset: 0x38, Size: 0x4] 0x78dbf09880
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78dbf09900
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78dbf09980
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x78dbf09a00
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc] 0x78dbf09a80
	Font* Font;//[Offset: 0x50, Size: 0x8] 0x78dbf09b00
	float FontScale;//[Offset: 0x58, Size: 0x4] 0x78dbf09b80

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x78d7450300
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1] 0x78d7450380
	uint32 Channels;//[Offset: 0x224, Size: 0x4] 0x78d7450400
	uint32 InRate;//[Offset: 0x228, Size: 0x4] 0x78d7450480
	uint32 OutRate;//[Offset: 0x22c, Size: 0x4] 0x78d7450500
	uint32 MaxPacketOverhead;//[Offset: 0x234, Size: 0x4] 0x78d7450580
	uint32 InRateClientMax;//[Offset: 0x238, Size: 0x4] 0x78d7450600
	uint32 InRateClientMin;//[Offset: 0x23c, Size: 0x4] 0x78d7450680
	uint32 InRateClientAvg;//[Offset: 0x240, Size: 0x4] 0x78d7450700
	uint32 InPacketsClientMax;//[Offset: 0x244, Size: 0x4] 0x78d7450780
	uint32 InPacketsClientMin;//[Offset: 0x248, Size: 0x4] 0x78d7450800
	uint32 InPacketsClientAvg;//[Offset: 0x24c, Size: 0x4] 0x78d7450880
	uint32 OutRateClientMax;//[Offset: 0x250, Size: 0x4] 0x78d7450900
	uint32 OutRateClientMin;//[Offset: 0x254, Size: 0x4] 0x78d7450980
	uint32 OutRateClientAvg;//[Offset: 0x258, Size: 0x4] 0x78d7450a00
	uint32 OutPacketsClientMax;//[Offset: 0x25c, Size: 0x4] 0x78d7450a80
	uint32 OutPacketsClientMin;//[Offset: 0x260, Size: 0x4] 0x78d7450b00
	uint32 OutPacketsClientAvg;//[Offset: 0x264, Size: 0x4] 0x78d7450b80
	uint32 NetNumClients;//[Offset: 0x268, Size: 0x4] 0x78d7450c00
	uint32 InPackets;//[Offset: 0x26c, Size: 0x4] 0x78d7450c80
	uint32 OutPackets;//[Offset: 0x270, Size: 0x4] 0x78d7450d00
	uint32 InBunches;//[Offset: 0x274, Size: 0x4] 0x78d7450d80
	uint32 OutBunches;//[Offset: 0x278, Size: 0x4] 0x78d7450e00
	uint32 OutLoss;//[Offset: 0x27c, Size: 0x4] 0x78d7450e80
	uint32 InLoss;//[Offset: 0x280, Size: 0x4] 0x78d7450f00
	uint32 VoiceBytesSent;//[Offset: 0x284, Size: 0x4] 0x78d7450f80
	uint32 VoiceBytesRecv;//[Offset: 0x288, Size: 0x4] 0x78d7451000
	uint32 VoicePacketsSent;//[Offset: 0x28c, Size: 0x4] 0x78d7451080
	uint32 VoicePacketsRecv;//[Offset: 0x290, Size: 0x4] 0x78d744f800
	uint32 PercentInVoice;//[Offset: 0x294, Size: 0x4] 0x78d744f880
	uint32 PercentOutVoice;//[Offset: 0x298, Size: 0x4] 0x78d744f900
	uint32 NumActorChannels;//[Offset: 0x29c, Size: 0x4] 0x78d744f980
	uint32 NumConsideredActors;//[Offset: 0x2a0, Size: 0x4] 0x78d744fa00
	uint32 PrioritizedActors;//[Offset: 0x2a4, Size: 0x4] 0x78d744fa80
	uint32 NumRelevantActors;//[Offset: 0x2a8, Size: 0x4] 0x78d744fb00
	uint32 NumRelevantDeletedActors;//[Offset: 0x2ac, Size: 0x4] 0x78d744fb80
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b0, Size: 0x4] 0x78d744fc00
	uint32 NumReplicatedActors;//[Offset: 0x2b4, Size: 0x4] 0x78d744fc80
	uint32 NumActors;//[Offset: 0x2b8, Size: 0x4] 0x78d744fd00
	uint32 NumNetActors;//[Offset: 0x2bc, Size: 0x4] 0x78d744fd80
	uint32 NumDormantActors;//[Offset: 0x2c0, Size: 0x4] 0x78d744fe00
	uint32 NumInitiallyDormantActors;//[Offset: 0x2c4, Size: 0x4] 0x78d744fe80
	uint32 NumNetGUIDsAckd;//[Offset: 0x2c8, Size: 0x4] 0x78d744ff00
	uint32 NumNetGUIDsPending;//[Offset: 0x2cc, Size: 0x4] 0x78d744ff80
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d0, Size: 0x4] 0x78d744e780
	uint32 ObjPathBytes;//[Offset: 0x2d4, Size: 0x4] 0x78d744e800
	uint32 NetGUIDOutRate;//[Offset: 0x2d8, Size: 0x4] 0x78d744e880
	uint32 NetGUIDInRate;//[Offset: 0x2dc, Size: 0x4] 0x78d744e900
	uint32 NetSaturated;//[Offset: 0x2e0, Size: 0x4] 0x78d744e980

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x220, Size: 0x4] 0x78d7344f00
	float SeverePacketLossThreshold;//[Offset: 0x224, Size: 0x4] 0x78d7344f80
	int BadPingThreshold;//[Offset: 0x228, Size: 0x4] 0x78d7345000
	int SeverePingThreshold;//[Offset: 0x22c, Size: 0x4] 0x78d7345080
	int AdjustedNetSpeed;//[Offset: 0x230, Size: 0x4] 0x78d7345100
	float LastNetSpeedUpdateTime;//[Offset: 0x234, Size: 0x4] 0x78d7345180
	int TotalNetBandwidth;//[Offset: 0x238, Size: 0x4] 0x78d7345200
	int MinDynamicBandwidth;//[Offset: 0x23c, Size: 0x4] 0x78d7345280
	int MaxDynamicBandwidth;//[Offset: 0x240, Size: 0x4] 0x78d7343200
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1] 0x78d7343280
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1] 0x78d7343300
	float StandbyRxCheatTime;//[Offset: 0x248, Size: 0x4] 0x78d7343380
	float StandbyTxCheatTime;//[Offset: 0x24c, Size: 0x4] 0x78d7343400
	float PercentMissingForRxStandby;//[Offset: 0x250, Size: 0x4] 0x78d7343480
	float PercentMissingForTxStandby;//[Offset: 0x254, Size: 0x4] 0x78d7343500
	float PercentForBadPing;//[Offset: 0x258, Size: 0x4] 0x78d7343580
	float JoinInProgressStandbyWaitTime;//[Offset: 0x25c, Size: 0x4] 0x78d7343600
	float MoveRepSize;//[Offset: 0x260, Size: 0x4] 0x78d7343680
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x264, Size: 0x4] 0x78d7343700
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x268, Size: 0x4] 0x78d7343780
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x26c, Size: 0x4] 0x78d7343800
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x270, Size: 0x4] 0x78d7343880
	float MaxClientForcedUpdateDuration;//[Offset: 0x274, Size: 0x4] 0x78d7343900
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x278, Size: 0x4] 0x78d7343980
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x27c, Size: 0x4] 0x78d7343a00
	float MaxMoveDeltaTime;//[Offset: 0x280, Size: 0x4] 0x78d7343a80
	float MaxClientSmoothingDeltaTime;//[Offset: 0x284, Size: 0x4] 0x78d7343b00
	float ClientNetSendMoveDeltaTime;//[Offset: 0x288, Size: 0x4] 0x78d7343b80
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x28c, Size: 0x4] 0x78d7343c00
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x290, Size: 0x4] 0x78d7343c80
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x294, Size: 0x4] 0x78d7343d00
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x298, Size: 0x4] 0x78d7343d80
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1] 0x78d7343e00
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a0, Size: 0x4] 0x78d7343e80
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2a4, Size: 0x4] 0x78d7343f00
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2a8, Size: 0x4] 0x78d7343f80
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1] 0x78d7344000
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 0x1] 0x78d7344080
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b0, Size: 0x4] 0x78d7344100
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2b4, Size: 0x4] 0x78d7344180
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2b8, Size: 0x4] 0x78d7344200
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2bc, Size: 0x4] 0x78d7342180
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x78d7342200
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1] 0x78d7342280

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbf3d680
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8] 0x78dbf3b600
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8] 0x78dbf3b680
	float Volume;//[Offset: 0x18, Size: 0x4] 0x78dbf3b700
	float FadeTime;//[Offset: 0x1c, Size: 0x4] 0x78dbf3b780

--------------------------------
Class: ReverbEffect.Object
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78d744e580
	float ReflectionsDelay;//[Offset: 0x2c, Size: 0x4] 0x78d744e600
	float GainHF;//[Offset: 0x30, Size: 0x4] 0x78d744e680
	float ReflectionsGain;//[Offset: 0x34, Size: 0x4] 0x78d744e700
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78d744c680
	float LateDelay;//[Offset: 0x3c, Size: 0x4] 0x78d744c700
	float DecayTime;//[Offset: 0x40, Size: 0x4] 0x78d744c780
	float Density;//[Offset: 0x44, Size: 0x4] 0x78d744c800
	float Diffusion;//[Offset: 0x48, Size: 0x4] 0x78d744c880
	float AirAbsorptionGainHF;//[Offset: 0x4c, Size: 0x4] 0x78d744c900
	float DecayHFRatio;//[Offset: 0x50, Size: 0x4] 0x78d744c980
	float LateGain;//[Offset: 0x54, Size: 0x4] 0x78d744ca00
	float Gain;//[Offset: 0x58, Size: 0x4] 0x78d744ca80
	float RoomRolloffFactor;//[Offset: 0x5c, Size: 0x4] 0x78d744cb00

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbee3a80
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4] 0x78dbee3b00
	float ExteriorTime;//[Offset: 0x8, Size: 0x4] 0x78dbee3b80
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4] 0x78dbee3c00
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4] 0x78dbee3c80
	float InteriorVolume;//[Offset: 0x14, Size: 0x4] 0x78dbee3d00
	float InteriorTime;//[Offset: 0x18, Size: 0x4] 0x78dbee3d80
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4] 0x78dbee3e00
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4] 0x78dbee3e80

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbf71900
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78dbf71980
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78dbf71a00
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c] 0x78dbf71a80
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c] 0x78dbf71b00
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4] 0x78dbf71b80

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8] 0x78dbf73180
	Actor* InViewer;//[Offset: 0x8, Size: 0x8] 0x78dbf71100
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8] 0x78dbf71180
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc] 0x78dbf71200
	Vector ViewDir;//[Offset: 0x24, Size: 0xc] 0x78dbf71280

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10] 0x78d727e0c0
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8] 0x78d7304600
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8] 0x78d727e160
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8] 0x78d7304680
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10] 0x78d727e200
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10] 0x78d727e2a0
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8] 0x78d7304800
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8] 0x78d7304880
	int MaxPacket;//[Offset: 0xa0, Size: 0x4] 0x78d7304900
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1] 0x78d7304980
	UniqueNetIdRepl PlayerId;//[Offset: 0x160, Size: 0x28] 0x78d7304a00
	double LastReceiveTime;//[Offset: 0x1d0, Size: 0x8] 0x78d7304a80
	Channel*[] ChannelsToTick;//[Offset: 0x1518, Size: 0x10] 0x78d727ba00

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* parent;//[Offset: 0x1af0, Size: 0x8] 0x78d7304500

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10] 0x78d730fb00
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10] 0x78d730fb80
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4] 0x78d730fc00
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78d730fc80
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4] 0x78d730fd00
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4] 0x78d730fd80
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4] 0x78d730fe00
	int MaxClientRate;//[Offset: 0x64, Size: 0x4] 0x78d730fe80
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4] 0x78d730ff00
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4] 0x78d730ff80
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4] 0x78d730e780
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4] 0x78d730e800
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4] 0x78d730e880
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4] 0x78d730e900
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4] 0x78d730e980
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x78d730ea00
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1] 0x78d730ea80
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8] 0x78d730eb00
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10] 0x78d727f600
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4] 0x78d730ec00
	World* World;//[Offset: 0x140, Size: 0x8] 0x78d730ec80
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8] 0x78d730ed00
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8] 0x78d727f6a0
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8] 0x78d727f740
	FName NetDriverName;//[Offset: 0x190, Size: 0x8] 0x78d730ed80
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10] 0x78d727cea0
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50] 0x78d7105440
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10] 0x78d727cf40
	float Time;//[Offset: 0x210, Size: 0x4] 0x78d730f000
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6e8, Size: 0x8] 0x78d730f080

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8] 0x78dbf35000
	FName ClassName;//[Offset: 0x8, Size: 0x8] 0x78dbf35080
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8] 0x78dbf20880
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4] 0x78dbf35100
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78dbf35180
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1] 0x78dbf35200
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1] 0x78dbf35280
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1] 0x78dbf33200
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78dbf33280

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8] 0x78d72d1800

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8] 0x78dbe5e520

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28] 0x78d7406980
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8] 0x78d7406a00
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10] 0x78d7337860
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30] 0x78d7406b00
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4] 0x78d7406b80
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4] 0x78d7406c00
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1] 0x78d7406c80
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1] 0x78d7406d00
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1] 0x78d7406d80
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1] 0x78d7406e00
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1] 0x78d7406e80
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1] 0x78d7406f00
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1] 0x78d7406f80
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1] 0x78d7407000
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10] 0x78d7407080
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10] 0x78d7337900
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4] 0x78d7407180
	delegate OnLevelLoaded;//[Offset: 0xe8, Size: 0x10] 0x78d7407200
	delegate OnLevelUnloaded;//[Offset: 0xf8, Size: 0x10] 0x78d7407280
	delegate OnLevelShown;//[Offset: 0x108, Size: 0x10] 0x78d7407300
	delegate OnLevelHidden;//[Offset: 0x118, Size: 0x10] 0x78d7407380
	Level* LoadedLevel;//[Offset: 0x128, Size: 0x8] 0x78d7405300
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 0x8] 0x78d7405380
	bool ShouldBeLoaded();// 0xc9131c4 0x78d74129a0
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0xc913510 0x78d7412a80
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0xc913458 0x78d7412b60
	void SetPriority(int NewPriority);// 0xc913308 0x78d7412c40
	void SetLevelLODIndex(int LODIndex);// 0xc9133b0 0x78d7412d20
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);// 0xc913238 0x78d7412e00
	bool IsStreamingStatePending();// 0xc913114 0x78d7412ee0
	bool IsLevelVisible();// 0xc913170 0x78d7412fc0
	bool IsLevelLoaded();// 0xc91314c 0x78d74130a0
	FName GetWorldAssetPackageFName();// 0xc913204 0x78d7413180
	Level* GetLoadedLevel();// 0xc9131a8 0x78d7413260
	LevelScriptActor* GetLevelScriptActor();// 0xc913000 0x78d7413340
	bool GetIsRequestingUnloadAndRemoval();// 0xc9132e8 0x78d7413420
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0xc913034 0x78d7413500

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x258, Size: 0x10] 0x78d73377c0
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1] 0x78d7408100
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 0x1] 0x78d7408180
	byte StreamingUsage;//[Offset: 0x269, Size: 0x1] 0x78d7408200

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreaming*[] StreamingLevels;//[Offset: 0x0, Size: 0x10] 0x78dbf24fc0

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x840, Size: 0x50] 0x78d7105380
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x9ec, Size: 0x4] 0x78d730f900
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa10, Size: 0x10] 0x78d727f4c0
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 0x1] 0x78d730fa00
	PlayerController*[] SpectatorControllers;//[Offset: 0xa28, Size: 0x10] 0x78d727f560

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8] 0x78dbf0b380
	Level* Level;//[Offset: 0x38, Size: 0x8] 0x78dbf0b400
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10] 0x78dbe5d1c0

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10] 0x78dbf0b500
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78dbf0b580
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1] 0x78dbf09500

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18] 0x78d72d2e80
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8] 0x78d72d2f00
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78d72d2f80

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4] 0x78d72df580
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4] 0x78d72df600
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4] 0x78d72df680
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4] 0x78d72df700
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4] 0x78d72df780
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4] 0x78d72dd700
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4] 0x78d72dd780
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0xc7dee4c 0x78d72cd6e0
	int GetObjectCount();// 0xc7def80 0x78d72cd7c0
	int GetNewAvoidanceUID();// 0xc7def4c 0x78d72cd8a0
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0xc7ded98 0x78d72cd980

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8] 0x78dbf72100
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8] 0x78dbf70080
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8] 0x78dbf70100
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8] 0x78dbf70180
	<Level*> Levels;//[Offset: 0x28, Size: 0x50] 0x78dbf24f20

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10] 0x78cdd57360
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8] 0x78d3568780
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10] 0x78cdd57400
	delegate OnPawnControllerChangedDelegates;//[Offset: 0x78, Size: 0x10] 0x78d3568880
	void ReceiveShutdown();// 0xaa7cd18 0x78cd8e8660
	void ReceiveInit();// 0xaa7cd18 0x78cd8e8740
	void HandleTravelError(byte FailureType);// 0xaa7cd18 0x78cd8e8820
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0xaa7cd18 0x78cd8e8900
	void DebugRemovePlayer(int ControllerId);// 0xc854968 0x78cd8e89e0
	void DebugCreatePlayer(int ControllerId);// 0xc854a18 0x78cd8e8ac0

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8] 0x78d742b780

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 0x10] 0x78d733d300
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 0x8] 0x78d7479880
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78d7479900
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x78d7479980
	float RebaseOriginDistance;//[Offset: 0x64, Size: 0x4] 0x78d7479a00

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50] 0x78dbf56f40

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 0x4] 0x78d743fb00
	float UpdateTime_Delta;//[Offset: 0x34, Size: 0x4] 0x78d743fb80
	float WarmupTime;//[Offset: 0x38, Size: 0x4] 0x78d743fc00
	float WarmupTickRate;//[Offset: 0x3c, Size: 0x4] 0x78d743fc80
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10] 0x78d7339a20
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8] 0x78d743fd80
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8] 0x78d743fe00
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4] 0x78d743fe80
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4] 0x78d743ff00
	float[] LODDistances;//[Offset: 0x68, Size: 0x10] 0x78d7339ac0
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10] 0x78d7339b60
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c] 0x78d743e800
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4] 0x78d743e880
	float Delay;//[Offset: 0xa8, Size: 0x4] 0x78d743e900
	float DelayLow;//[Offset: 0xac, Size: 0x4] 0x78d743e980
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78d743ea00
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x78d743ea80
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1] 0x78d743eb00
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1] 0x78d743eb80
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1] 0x78d743ec00
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1] 0x78d743ec80
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1] 0x78d743ed00
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1] 0x78d743ed80
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1] 0x78d743ee00
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1] 0x78d743ee80
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1] 0x78d743ef00
	byte LODMethod;//[Offset: 0xb3, Size: 0x1] 0x78d743ef80
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1] 0x78d7339c00
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1] 0x78d743f080
	bool bPauseWhenNoVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 0x1] 0x78d743f100
	enum MaxSignificanceLevel;//[Offset: 0xb8, Size: 0x1] 0x78d7339ca0
	uint32 MinTimeBetweenTicks;//[Offset: 0xbc, Size: 0x4] 0x78d743f200
	float InsignificanceDelay;//[Offset: 0xc0, Size: 0x4] 0x78d743f280
	Vector MacroUVPosition;//[Offset: 0xc4, Size: 0xc] 0x78d743f300
	Box CustomOcclusionBounds;//[Offset: 0xd0, Size: 0x1c] 0x78d743f380
	LODSoloTrack[] SoloTracking;//[Offset: 0xf0, Size: 0x10] 0x78d7339d40
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x100, Size: 0x10] 0x78d7339de0
	FString AdditionalTypeTag;//[Offset: 0x110, Size: 0x10] 0x78d743f500
	bool ContainsEmitterType(class Object TypeData);// 0xc97a1a8 0x78d7414220

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4] 0x78d743f600
	uint32 PoolPrimeSize;//[Offset: 0x2c, Size: 0x4] 0x78d743f680

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8] 0x78d742fa00
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4] 0x78d742fa80
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1] 0x78d742fb00
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1] 0x78d73381c0
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1] 0x78d742fc00
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1] 0x78d742fc80
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1] 0x78d742fd00
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1] 0x78d742fd80
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1] 0x78d742fe00
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78d742fe80
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10] 0x78d7338260
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4] 0x78d742ff80
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4] 0x78d742e780
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4] 0x78d742e800
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4] 0x78d742e880
	bool bInstancedParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b8, Size: 0x1] 0x78d742e900
	bool bMarkSpecialInstancedBatch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b8, Size: 0x1] 0x78d742e980
	uint32 SpecialBatchNumber;//[Offset: 0x1bc, Size: 0x4] 0x78d742ea00
	FString ParticleID;//[Offset: 0x1c0, Size: 0x10] 0x78d742ea80

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4] 0x78d7430c00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x78d7430c80
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8] 0x78d7430d00
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10] 0x78d7337e00
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8] 0x78d7430e00
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8] 0x78d7430e80
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8] 0x78d7430f00
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10] 0x78d7337ea0
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10] 0x78d7337f40
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10] 0x78d7337fe0
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10] 0x78d7338080
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10] 0x78d7338120
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78d742f900
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4] 0x78d742f980

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8] 0x78d7439c00
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4] 0x78d7439c80
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4] 0x78d7439d00
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc] 0x78d7439d80
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc] 0x78d7439e00
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1] 0x78d7439e80
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x78d7439f00
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x78d7439f80
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x78d743a000
	byte SortMode;//[Offset: 0x5a, Size: 0x1] 0x78d743a080
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1] 0x78d743a100
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x78d743a180
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x78d743a200
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4] 0x78d743a280
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30] 0x78d743a300
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10] 0x78d733a060
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4] 0x78d743a400
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4] 0x78d743a480
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78d743a500
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1] 0x78d7438480
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1] 0x78d7438500
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1] 0x78d7438580
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1] 0x78d7438600
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x78d7438680
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x78d7438700
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1] 0x78d7438780
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1] 0x78d7438800
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1] 0x78d7438880
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4] 0x78d7438900
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4] 0x78d7438980
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4] 0x78d7438a00
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4] 0x78d7438a80
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc] 0x78d7438b00
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4] 0x78d7438b80
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1] 0x78d733a100
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1] 0x78d7438c80
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1] 0x78d7438d00
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc] 0x78d7438d80
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4] 0x78d7438e00
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4] 0x78d7438e80
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8] 0x78d7438f00
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4] 0x78d7438f80
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4] 0x78d7439000
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc] 0x78d7439080
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10] 0x78d733a1a0

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78d7430580
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78d7430600
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x78d7430680
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x78d7430700
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1] 0x78d7430780
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1] 0x78d7430800
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1] 0x78d7430880
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1] 0x78d7430900
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x78d7430980
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1] 0x78d7430a00
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1] 0x78d7430a80
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1] 0x78d7430b00
	byte LODValidity;//[Offset: 0x2a, Size: 0x1] 0x78d7430b80

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4] 0x78dbf0ae00
	float MaxValue;//[Offset: 0x24, Size: 0x4] 0x78dbf0ae80
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8] 0x78dbf0af00

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20] 0x78ce9bd480

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4] 0x78ce9bd500
	float TimeBias;//[Offset: 0x4, Size: 0x4] 0x78ce9bd580
	float[] Values;//[Offset: 0x8, Size: 0x10] 0x78cdd55920
	byte Op;//[Offset: 0x18, Size: 0x1] 0x78ce9bd680
	byte EntryCount;//[Offset: 0x19, Size: 0x1] 0x78ce9bb600
	byte EntryStride;//[Offset: 0x1a, Size: 0x1] 0x78ce9bb680
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1] 0x78ce9bb700
	byte LockFlag;//[Offset: 0x1c, Size: 0x1] 0x78ce9bb780

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78d7315f00
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x78d7315f80

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4] 0x78dbf34300
	int CountLow;//[Offset: 0x4, Size: 0x4] 0x78dbf34380
	float Time;//[Offset: 0x8, Size: 0x4] 0x78dbf34400

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30] 0x78d743af00
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30] 0x78d743af80
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1] 0x78d743b000
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10] 0x78d7339fc0
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30] 0x78d743b100
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x78d743b180

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78d743b200
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x78d743b280

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10] 0x78d7337cc0

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1] 0x78dbf35a00
	int Frequency;//[Offset: 0x4, Size: 0x4] 0x78dbf35a80
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4] 0x78dbf35b00
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78dbf35b80
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x78dbf35c00
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x78dbf35c80
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x78dbf35d00
	FName CustomName;//[Offset: 0x10, Size: 0x8] 0x78dbf35d80
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10] 0x78dbf20600

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1] 0x78d7439480
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x48] 0x78d7437400
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 0x4] 0x78d7437480
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 0x48] 0x78d7437500
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 0x4] 0x78d7437580
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 0x48] 0x78d7437600
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 0x4] 0x78d7437680

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78d7437700

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4] 0x78dbf0ab80
	float MaxValue;//[Offset: 0x24, Size: 0x4] 0x78dbf0ac00
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc] 0x78dbf0ac80
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc] 0x78dbf0ad00
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8] 0x78dbf0ad80

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78d7315800
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x78d7315880
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x78d7315900

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbf35780
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbf35800
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbf35880

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1] 0x78d7434880
	FName EventName;//[Offset: 0x2c, Size: 0x8] 0x78d7434900

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x470, Size: 0x8] 0x78dbfc5100
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x478, Size: 0x10] 0x78dbf2c5e0
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x488, Size: 0x10] 0x78dbf2c680
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x499, Size: 0x1] 0x78dbfc5280
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x499, Size: 0x1] 0x78dbfc3200
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x499, Size: 0x1] 0x78dbfc3280
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x499, Size: 0x1] 0x78dbfc3300
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x499, Size: 0x1] 0x78dbfc3380
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49a, Size: 0x1] 0x78dbfc3400
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x49a, Size: 0x1] 0x78dbfc3480
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x49a, Size: 0x1] 0x78dbfc3500
	byte LODMethod;//[Offset: 0x4a5, Size: 0x1] 0x78dbfc3580
	enum RequiredSignificance;//[Offset: 0x4a6, Size: 0x1] 0x78dbf2c720
	ParticleSysParam[] InstanceParameters;//[Offset: 0x4a8, Size: 0x10] 0x78dbf2c7c0
	delegate OnParticleSpawn;//[Offset: 0x4b8, Size: 0x10] 0x78dbfc3700
	delegate OnParticleBurst;//[Offset: 0x4c8, Size: 0x10] 0x78dbfc3780
	delegate OnParticleDeath;//[Offset: 0x4d8, Size: 0x10] 0x78dbfc3800
	delegate OnParticleCollide;//[Offset: 0x4e8, Size: 0x10] 0x78dbfc3880
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1] 0x78dbfc3900
	Vector OldPosition;//[Offset: 0x4fc, Size: 0xc] 0x78dbfc3980
	Vector PartSysVelocity;//[Offset: 0x508, Size: 0xc] 0x78dbfc3a00
	float WarmupTime;//[Offset: 0x514, Size: 0x4] 0x78dbfc3a80
	float WarmupTickRate;//[Offset: 0x518, Size: 0x4] 0x78dbfc3b00
	float SecondsBeforeInactive;//[Offset: 0x520, Size: 0x4] 0x78dbfc3b80
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x528, Size: 0x4] 0x78dbfc3c00
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x548, Size: 0x10] 0x78dbf2c860
	float CustomTimeDilation;//[Offset: 0x560, Size: 0x4] 0x78dbfc3d00
	SceneComponent* AutoAttachParent;//[Offset: 0x5b8, Size: 0x8] 0x78dbfc3d80
	FName AutoAttachSocketName;//[Offset: 0x5c0, Size: 0x8] 0x78dbfc3e00
	enum AutoAttachLocationRule;//[Offset: 0x5c8, Size: 0x1] 0x78dbf2c900
	enum AutoAttachRotationRule;//[Offset: 0x5c9, Size: 0x1] 0x78dbf2c9a0
	enum AutoAttachScaleRule;//[Offset: 0x5ca, Size: 0x1] 0x78dbf2ca40
	delegate OnSystemFinished;//[Offset: 0x5f8, Size: 0x10] 0x78dbfc4000
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0xc97ec54 0x78dbfb5560
	void SetTemplate(ParticleSystem* NewTemplate);// 0xc97efac 0x78dbfb5640
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0xc97f054 0x78dbfb1d60
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0xc97fba0 0x78dbfb1e40
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0xc97fa58 0x78dbfb1f20
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0xc97fce4 0x78dbfb2000
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0xc97ff70 0x78dbfb20e0
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0xc97fe28 0x78dbfb21c0
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0xc9800b4 0x78dbfb22a0
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0xc9801f8 0x78dbfb2380
	void SetAutoAttachParams(SceneComponent* parent, FName SocketName, byte LocationType);// 0xc9802f0 0x78dbfb2460
	int GetNumActiveParticles();// 0xc97ef78 0x78dbfb2540
	MaterialInterface* GetNamedMaterial(FName InName);// 0xc97ea9c 0x78dbfb2620
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0xc97f2a0 0x78dbfb2700
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0xc97f144 0x78dbfb27e0
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0xc97f3f4 0x78dbfb28c0
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0xc97f6a4 0x78dbfb29a0
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0xc97f548 0x78dbfb2a80
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0xc97f7f8 0x78dbfb2b60
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0xc97f94c 0x78dbfb2c40
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0xc97e8c8 0x78dbfb2d20
	void EndTrails();// 0xc97eddc 0x78dbfb2e00
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0xc97eb54 0x78dbfb2ee0
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0xc97edf0 0x78dbfb2fc0

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0xc97ded0 0x78dbfb30a0
	void SetUseAutoManageAttachment(bool bAutoManage);// 0xc97d90c 0x78dbfb3180
	void SetIntParameter(FName ParameterName, int Param);// 0xc97e0c4 0x78dbfb3260
	void SetFloatParameter(FName ParameterName, float Param);// 0xc97dfc8 0x78dbfb3340
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0xc97dba0 0x78dbfb3420
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0xc97ddd8 0x78dbfb3500
	void SetBoolParameter(FName ParameterName, bool Param);// 0xc97e1c0 0x78dbfb35e0
	void SetAutoAttachmentParameters(SceneComponent* parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0xc97d9c4 0x78dbfb36c0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0xc97dce0 0x78dbfb37a0
	void ReleaseToPool();// 0xc97d8f0 0x78dbfb3880
	FXSystemAsset* GetFXSystemAsset();// 0xc97dca4 0x78dbfb3960

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbf38800
	byte ParamType;//[Offset: 0x8, Size: 0x1] 0x78dbf38880
	float Scalar;//[Offset: 0xc, Size: 0x4] 0x78dbf38900
	float Scalar_Low;//[Offset: 0x10, Size: 0x4] 0x78dbf38980
	Vector Vector;//[Offset: 0x14, Size: 0xc] 0x78dbf38a00
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc] 0x78dbf38a80
	Color Color;//[Offset: 0x2c, Size: 0x4] 0x78dbf38b00
	Actor* Actor;//[Offset: 0x30, Size: 0x8] 0x78dbf38b80
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8] 0x78dbf38c00

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4] 0x78d743fa80

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10] 0x78d7333800
	int ActiveTab;//[Offset: 0x38, Size: 0x4] 0x78d736c980

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10] 0x78dbf16d80
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10] 0x78dbe5e8e0
	float ViewStartInput;//[Offset: 0x20, Size: 0x4] 0x78dbf17300
	float ViewEndInput;//[Offset: 0x24, Size: 0x4] 0x78dbf17380
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4] 0x78dbf15300
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4] 0x78dbf15380

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8] 0x78dbf16e00
	Color CurveColor;//[Offset: 0x8, Size: 0x4] 0x78dbf16e80
	FString CurveName;//[Offset: 0x10, Size: 0x10] 0x78dbf16f00
	int bHideCurve;//[Offset: 0x20, Size: 0x4] 0x78dbf16f80
	int bColorCurve;//[Offset: 0x24, Size: 0x4] 0x78dbf17000
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4] 0x78dbf17080
	int bClamp;//[Offset: 0x2c, Size: 0x4] 0x78dbf17100
	float ClampLow;//[Offset: 0x30, Size: 0x4] 0x78dbf17180
	float ClampHigh;//[Offset: 0x34, Size: 0x4] 0x78dbf17200

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10] 0x78dbf202e0

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbf38d00
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x78dbf38d80

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10] 0x78dbf24d40
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10] 0x78dbf24de0
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10] 0x78dbf24e80

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8] 0x78dbf71c00

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x220, Size: 0x8] 0x78d70e5380
	SceneComponent* TransformComponent;//[Offset: 0x228, Size: 0x8] 0x78d70e5400
	float DefaultFOV;//[Offset: 0x238, Size: 0x4] 0x78d70e5480
	float DefaultOrthoWidth;//[Offset: 0x240, Size: 0x4] 0x78d70e5500
	float DefaultAspectRatio;//[Offset: 0x248, Size: 0x4] 0x78d70e5580
	CameraCacheEntry CameraCache;//[Offset: 0x290, Size: 0x5f0] 0x78d70e5600
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x880, Size: 0x5f0] 0x78d70e5680
	TViewTarget ViewTarget;//[Offset: 0xe70, Size: 0x600] 0x78d70e5700
	TViewTarget PendingViewTarget;//[Offset: 0x1470, Size: 0x600] 0x78d70e5780
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1aa0, Size: 0x5f0] 0x78d70e5800
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2090, Size: 0x5f0] 0x78d70e5880
	CameraModifier*[] ModifierList;//[Offset: 0x2680, Size: 0x10] 0x78dc11ba00
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2690, Size: 0x10] 0x78dc11bb40
	float FreeCamDistance;//[Offset: 0x26a0, Size: 0x4] 0x78d70e5980
	Vector FreeCamOffset;//[Offset: 0x26a4, Size: 0xc] 0x78d70e5a00
	Vector ViewTargetOffset;//[Offset: 0x26b0, Size: 0xc] 0x78d70e5a80
	delegate OnAudioFadeChangeEvent;//[Offset: 0x26c0, Size: 0x10] 0x78d70e5b00
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x26e0, Size: 0x10] 0x78dc11bbe0
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x26f0, Size: 0x8] 0x78d70e5c00
	CameraAnimInst* AnimInstPool;//[Offset: 0x26f8, Size: 0x8] 0x78d70e5c80
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2738, Size: 0x10] 0x78dc11bc80
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2758, Size: 0x10] 0x78dc11bd20
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2768, Size: 0x10] 0x78dc11bdc0
	CameraActor* AnimCameraActor;//[Offset: 0x2778, Size: 0x8] 0x78d70e5e80
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2780, Size: 0x1] 0x78d70e5f00
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2780, Size: 0x1] 0x78d70e5f80
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2780, Size: 0x1] 0x78d70e6000
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2780, Size: 0x1] 0x78d70e6080
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2781, Size: 0x1] 0x78d70e6100
	float ViewPitchMin;//[Offset: 0x2784, Size: 0x4] 0x78d70e6180
	float ViewPitchMax;//[Offset: 0x2788, Size: 0x4] 0x78d70e6200
	float ViewYawMin;//[Offset: 0x278c, Size: 0x4] 0x78d70e6280
	float ViewYawMax;//[Offset: 0x2790, Size: 0x4] 0x78d70e6300
	float ViewRollMin;//[Offset: 0x2794, Size: 0x4] 0x78d70e4280
	float ViewRollMax;//[Offset: 0x2798, Size: 0x4] 0x78d70e4300
	float ServerUpdateCameraTimeout;//[Offset: 0x27a0, Size: 0x4] 0x78d70e4380
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();// 0xc992048 0x78d70f0b00
	void StopCameraShake(CameraShakeBase* ShakeInstance, bool bImmediately);// 0xc992e34 0x78d70f0be0
	void StopCameraFade();// 0xc9927e4 0x78d70f0cc0
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0xc992138 0x78d70f0da0
	void StopAllInstancesOfCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0xc992b2c 0x78d70f0e80
	void StopAllInstancesOfCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0xc992d30 0x78d70f0f60
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0xc99223c 0x78d70f1040
	void StopAllCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0xc992a28 0x78d70f1120
	void StopAllCameraShakes(bool bImmediately);// 0xc992c78 0x78d70f1200
	void StopAllCameraAnims(bool bImmediate);// 0xc992080 0x78d70f12e0
	MatineeCameraShake* StartMatineeCameraShakeFromSource(class MatineeCameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xc992f38 0x78d70f13c0
	MatineeCameraShake* StartMatineeCameraShake(class MatineeCameraShake ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xc9932f0 0x78d70f14a0
	CameraShakeBase* StartCameraShakeFromSource(class CameraShakeBase ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xc993110 0x78d70f1580
	CameraShakeBase* StartCameraShake(class CameraShakeBase ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xc993480 0x78d70f1660
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0xc992800 0x78d70f1740
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0xc992698 0x78d70f1820
	void SetGameCameraCutThisFrame();// 0xc99205c 0x78d70f1900
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0xc993858 0x78d70f19e0
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0xc993634 0x78d70f1ac0
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xc992340 0x78d70f1ba0
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0xc993b30 0x78d70f1c80
	void OnPhotographySessionStart();// 0xc993b14 0x78dc1be780
	void OnPhotographySessionEnd();// 0xc993af8 0x78dc1be860
	void OnPhotographyMultiPartCaptureStart();// 0xc993adc 0x78dc1be940
	void OnPhotographyMultiPartCaptureEnd();// 0xc993ac0 0x78dc1bea20
	PlayerController* GetOwningPlayerController();// 0xc993a84 0x78dc1beb00
	float GetFOVAngle();// 0xc99381c 0x78dc1bebe0
	Rotator GetCameraRotation();// 0xc9937dc 0x78dc1becc0
	Vector GetCameraLocation();// 0xc99379c 0x78dc1beda0
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0xc993914 0x78dc1bee80
	void ClearCameraLensEffects();// 0xc993618 0x78dc1bef60
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0xaa7cd18 0x78dc1bf040
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0xc9939cc 0x78dc1bf120
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0xc9936e4 0x78dc1bf200

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4] 0x78dbf39800
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5e0] 0x78dbf39880

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78dbf04f80
	Rotator Rotation;//[Offset: 0xc, Size: 0xc] 0x78dbf05000
	float FOV;//[Offset: 0x18, Size: 0x4] 0x78dbf05080
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4] 0x78dbf05100
	float OrthoWidth;//[Offset: 0x20, Size: 0x4] 0x78dbf05180
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4] 0x78dbf05200
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4] 0x78dbf05280
	float AspectRatio;//[Offset: 0x2c, Size: 0x4] 0x78dbf03200
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78dbf03280
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x78dbf03300
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1] 0x78dbf03380
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4] 0x78dbf03400
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x550] 0x78dbee9180
	Vector2D OffCenterProjectionOffset;//[Offset: 0x590, Size: 0x8] 0x78dbee9200

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbf03480
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbf03500
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbf03580
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78dbf03600
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78dbf03680
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78dbf03700
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78dbf03780
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78dbf03800
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78dbf03880
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78dbf03900
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78dbf03980
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x78dbf03a00
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x78dbf03a80
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x78dbf03b00
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x78dbf03b80
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x78dbf03c00
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1] 0x78dbf03c80
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1] 0x78dbf03d00
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1] 0x78dbf03d80
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1] 0x78dbf03e00
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1] 0x78dbf03e80
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1] 0x78dbf03f00
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1] 0x78dbf03f80
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1] 0x78dbf04000
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1] 0x78dbf04080
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1] 0x78dbf04100
	bool bOverride_ToneCurveAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1] 0x78dbf04180
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1] 0x78dbf04200
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1] 0x78dbf02180
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1] 0x78dbf02200
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1] 0x78dbf02280
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1] 0x78dbf02300
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x78dbf02380
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1] 0x78dbf02400
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1] 0x78dbf02480
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1] 0x78dbf02500
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1] 0x78dbf02580
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1] 0x78dbf02600
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1] 0x78dbf02680
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1] 0x78dbf02700
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1] 0x78dbf02780
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1] 0x78dbf02800
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1] 0x78dbf02880
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1] 0x78dbf02900
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1] 0x78dbf02980
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1] 0x78dbf02a00
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1] 0x78dbf02a80
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1] 0x78dbf02b00
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1] 0x78dbf02b80
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1] 0x78dbf02c00
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1] 0x78dbf02c80
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1] 0x78dbf02d00
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1] 0x78dbf02d80
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1] 0x78dbf02e00
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1] 0x78dbf02e80
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1] 0x78dbf02f00
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1] 0x78dbf02f80
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1] 0x78dbf03000
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1] 0x78dbf03080
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1] 0x78dbf03100
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1] 0x78dbf03180
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1] 0x78dbf01100
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1] 0x78dbf01180
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1] 0x78dbf01200
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78dbf01280
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x78dbf01300
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x78dbf01380
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x78dbf01400
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1] 0x78dbf01480
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1] 0x78dbf01500
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1] 0x78dbf01580
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1] 0x78dbf01600
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1] 0x78dbf01680
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1] 0x78dbf01700
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1] 0x78dbf01780
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1] 0x78dbf01800
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1] 0x78dbf01880
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1] 0x78dbf01900
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1] 0x78dbf01980
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1] 0x78dbf01a00
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x78dbf01a80
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1] 0x78dbf01b00
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1] 0x78dbf01b80
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1] 0x78dbf01c00
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1] 0x78dbf01c80
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1] 0x78dbf01d00
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1] 0x78dbf01d80
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1] 0x78dbf01e00
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1] 0x78dbf01e80
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1] 0x78dbf01f00
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1] 0x78dbf01f80
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1] 0x78dbf02000
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1] 0x78dbf02080
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1] 0x78dbf02100
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1] 0x78dbf00080
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1] 0x78dbf00100
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78dbf00180
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x78dbf00200
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x78dbf00280
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x78dbf00300
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1] 0x78dbf00380
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1] 0x78dbf00400
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1] 0x78dbf00480
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1] 0x78dbf00500
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1] 0x78dbf00580
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1] 0x78dbf00600
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1] 0x78dbf00680
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1] 0x78dbf00700
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1] 0x78dbf00780
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1] 0x78dbf00800
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1] 0x78dbf00880
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1] 0x78dbf00900
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1] 0x78dbf00980
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1] 0x78dbf00a00
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1] 0x78dbf00a80
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1] 0x78dbf00b00
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1] 0x78dbf00b80
	bool bOverride_RayTracingAOIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1] 0x78dbf00c00
	bool bOverride_RayTracingAORadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1] 0x78dbf00c80
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1] 0x78dbf00d00
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1] 0x78dbf00d80
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1] 0x78dbf00e00
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1] 0x78dbf00e80
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1] 0x78dbf00f00
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1] 0x78dbf00f80
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1] 0x78dbf01000
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1] 0x78dbf01080
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1] 0x78dbeef800
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78dbeef880
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x78dbeef900
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x78dbeef980
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x78dbeefa00
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x78dbeefa80
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x78dbeefb00
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x78dbeefb80
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x78dbeefc00
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1] 0x78dbeefc80
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1] 0x78dbeefd00
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1] 0x78dbeefd80
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1] 0x78dbeefe00
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1] 0x78dbeefe80
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1] 0x78dbeeff00
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1] 0x78dbeeff80
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1] 0x78dbeee780
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1] 0x78dbeee800
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1] 0x78dbeee880
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1] 0x78dbeee900
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1] 0x78dbeee980
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1] 0x78dbeeea00
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1] 0x78dbeeea80
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1] 0x78dbeeeb00
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1] 0x78dbeeeb80
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1] 0x78dbeeec00
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1] 0x78dbeeec80
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1] 0x78dbeeed00
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1] 0x78dbeeed80
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1] 0x78dbeeee00
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1] 0x78dbeeee80
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1] 0x78dbeeef00
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1] 0x78dbeeef80
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x78dbeef000
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1] 0x78dbeef080
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1] 0x78dbeef100
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1] 0x78dbeef180
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1] 0x78dbeef200
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1] 0x78dbeef280
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1] 0x78dbeef300
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1] 0x78dbeef380
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1] 0x78dbeef400
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1] 0x78dbeef480
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1] 0x78dbeef500
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1] 0x78dbeef580
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1] 0x78dbeef600
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1] 0x78dbeef680
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1] 0x78dbeef700
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1] 0x78dbeef780
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1] 0x78dbeed700
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1] 0x78dbeed780
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1] 0x78dbeed800
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1] 0x78dbeed880
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1] 0x78dbeed900
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1] 0x78dbeed980
	byte BloomMethod;//[Offset: 0x17, Size: 0x1] 0x78dbeeda00
	byte AutoExposureMethod;//[Offset: 0x18, Size: 0x1] 0x78dbeeda80
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4] 0x78dbeedb00
	float WhiteTint;//[Offset: 0x20, Size: 0x4] 0x78dbeedb80
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x10] 0x78dbeedc00
	Vector4 ColorContrast;//[Offset: 0x40, Size: 0x10] 0x78dbeedc80
	Vector4 ColorGamma;//[Offset: 0x50, Size: 0x10] 0x78dbeedd00
	Vector4 ColorGain;//[Offset: 0x60, Size: 0x10] 0x78dbeedd80
	Vector4 ColorOffset;//[Offset: 0x70, Size: 0x10] 0x78dbeede00
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 0x10] 0x78dbeede80
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 0x10] 0x78dbeedf00
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 0x10] 0x78dbeedf80
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 0x10] 0x78dbeee000
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 0x10] 0x78dbeee080
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10] 0x78dbeee100
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10] 0x78dbeee180
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10] 0x78dbeee200
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10] 0x78dbeee280
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10] 0x78dbeee300
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10] 0x78dbeee380
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10] 0x78dbeee400
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10] 0x78dbeee480
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10] 0x78dbeee500
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10] 0x78dbeee580
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4] 0x78dbeee600
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 0x4] 0x78dbeee680
	float BlueCorrection;//[Offset: 0x178, Size: 0x4] 0x78dbeee700
	float ExpandGamut;//[Offset: 0x17c, Size: 0x4] 0x78dbeec680
	float ToneCurveAmount;//[Offset: 0x180, Size: 0x4] 0x78dbeec700
	float FilmSlope;//[Offset: 0x184, Size: 0x4] 0x78dbeec780
	float FilmToe;//[Offset: 0x188, Size: 0x4] 0x78dbeec800
	float FilmShoulder;//[Offset: 0x18c, Size: 0x4] 0x78dbeec880
	float FilmBlackClip;//[Offset: 0x190, Size: 0x4] 0x78dbeec900
	float FilmWhiteClip;//[Offset: 0x194, Size: 0x4] 0x78dbeec980
	LinearColor FilmWhitePoint;//[Offset: 0x198, Size: 0x10] 0x78dbeeca00
	LinearColor FilmShadowTint;//[Offset: 0x1a8, Size: 0x10] 0x78dbeeca80
	float FilmShadowTintBlend;//[Offset: 0x1b8, Size: 0x4] 0x78dbeecb00
	float FilmShadowTintAmount;//[Offset: 0x1bc, Size: 0x4] 0x78dbeecb80
	float FilmSaturation;//[Offset: 0x1c0, Size: 0x4] 0x78dbeecc00
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c4, Size: 0x10] 0x78dbeecc80
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d4, Size: 0x10] 0x78dbeecd00
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e4, Size: 0x10] 0x78dbeecd80
	float FilmContrast;//[Offset: 0x1f4, Size: 0x4] 0x78dbeece00
	float FilmToeAmount;//[Offset: 0x1f8, Size: 0x4] 0x78dbeece80
	float FilmHealAmount;//[Offset: 0x1fc, Size: 0x4] 0x78dbeecf00
	float FilmDynamicRange;//[Offset: 0x200, Size: 0x4] 0x78dbeecf80
	LinearColor SceneColorTint;//[Offset: 0x204, Size: 0x10] 0x78dbeed000
	float SceneFringeIntensity;//[Offset: 0x214, Size: 0x4] 0x78dbeed080
	float ChromaticAberrationStartOffset;//[Offset: 0x218, Size: 0x4] 0x78dbeed100
	float BloomIntensity;//[Offset: 0x21c, Size: 0x4] 0x78dbeed180
	float BloomThreshold;//[Offset: 0x220, Size: 0x4] 0x78dbeed200
	float BloomSizeScale;//[Offset: 0x224, Size: 0x4] 0x78dbeed280
	float Bloom1Size;//[Offset: 0x228, Size: 0x4] 0x78dbeed300
	float Bloom2Size;//[Offset: 0x22c, Size: 0x4] 0x78dbeed380
	float Bloom3Size;//[Offset: 0x230, Size: 0x4] 0x78dbeed400
	float Bloom4Size;//[Offset: 0x234, Size: 0x4] 0x78dbeed480
	float Bloom5Size;//[Offset: 0x238, Size: 0x4] 0x78dbeed500
	float Bloom6Size;//[Offset: 0x23c, Size: 0x4] 0x78dbeed580
	LinearColor Bloom1Tint;//[Offset: 0x240, Size: 0x10] 0x78dbeed600
	LinearColor Bloom2Tint;//[Offset: 0x250, Size: 0x10] 0x78dbeed680
	LinearColor Bloom3Tint;//[Offset: 0x260, Size: 0x10] 0x78dbeeb600
	LinearColor Bloom4Tint;//[Offset: 0x270, Size: 0x10] 0x78dbeeb680
	LinearColor Bloom5Tint;//[Offset: 0x280, Size: 0x10] 0x78dbeeb700
	LinearColor Bloom6Tint;//[Offset: 0x290, Size: 0x10] 0x78dbeeb780
	float BloomConvolutionSize;//[Offset: 0x2a0, Size: 0x4] 0x78dbeeb800
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2a8, Size: 0x8] 0x78dbeeb880
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2b0, Size: 0x8] 0x78dbeeb900
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b8, Size: 0x4] 0x78dbeeb980
	float BloomConvolutionPreFilterMax;//[Offset: 0x2bc, Size: 0x4] 0x78dbeeba00
	float BloomConvolutionPreFilterMult;//[Offset: 0x2c0, Size: 0x4] 0x78dbeeba80
	float BloomConvolutionBufferScale;//[Offset: 0x2c4, Size: 0x4] 0x78dbeebb00
	Texture* BloomDirtMask;//[Offset: 0x2c8, Size: 0x8] 0x78dbeebb80
	float BloomDirtMaskIntensity;//[Offset: 0x2d0, Size: 0x4] 0x78dbeebc00
	LinearColor BloomDirtMaskTint;//[Offset: 0x2d4, Size: 0x10] 0x78dbeebc80
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 0x10] 0x78dbeebd00
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 0x4] 0x78dbeebd80
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 0x8] 0x78dbeebe00
	float CameraShutterSpeed;//[Offset: 0x300, Size: 0x4] 0x78dbeebe80
	float CameraISO;//[Offset: 0x304, Size: 0x4] 0x78dbeebf00
	float DepthOfFieldFstop;//[Offset: 0x308, Size: 0x4] 0x78dbeebf80
	float DepthOfFieldMinFstop;//[Offset: 0x30c, Size: 0x4] 0x78dbeec000
	int DepthOfFieldBladeCount;//[Offset: 0x310, Size: 0x4] 0x78dbeec080
	float AutoExposureBias;//[Offset: 0x314, Size: 0x4] 0x78dbeec100
	float AutoExposureBiasBackup;//[Offset: 0x318, Size: 0x4] 0x78dbeec180
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 0x1] 0x78dbeec200
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 0x1] 0x78dbeec280
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x320, Size: 0x8] 0x78dbeec300
	Texture* AutoExposureMeterMask;//[Offset: 0x328, Size: 0x8] 0x78dbeec380
	float AutoExposureLowPercent;//[Offset: 0x330, Size: 0x4] 0x78dbeec400
	float AutoExposureHighPercent;//[Offset: 0x334, Size: 0x4] 0x78dbeec480
	float AutoExposureMinBrightness;//[Offset: 0x338, Size: 0x4] 0x78dbeec500
	float AutoExposureMaxBrightness;//[Offset: 0x33c, Size: 0x4] 0x78dbeec580
	float AutoExposureSpeedUp;//[Offset: 0x340, Size: 0x4] 0x78dbeec600
	float AutoExposureSpeedDown;//[Offset: 0x344, Size: 0x4] 0x78dbeea580
	float HistogramLogMin;//[Offset: 0x348, Size: 0x4] 0x78dbeea600
	float HistogramLogMax;//[Offset: 0x34c, Size: 0x4] 0x78dbeea680
	float AutoExposureCalibrationConstant;//[Offset: 0x350, Size: 0x4] 0x78dbeea700
	float LensFlareIntensity;//[Offset: 0x354, Size: 0x4] 0x78dbeea780
	LinearColor LensFlareTint;//[Offset: 0x358, Size: 0x10] 0x78dbeea800
	float LensFlareBokehSize;//[Offset: 0x368, Size: 0x4] 0x78dbeea880
	float LensFlareThreshold;//[Offset: 0x36c, Size: 0x4] 0x78dbeea900
	Texture* LensFlareBokehShape;//[Offset: 0x370, Size: 0x8] 0x78dbeea980
	LinearColor LensFlareTints;//[Offset: 0x378, Size: 0x10] 0x78dbeeaa00
	float VignetteIntensity;//[Offset: 0x3f8, Size: 0x4] 0x78dbeeaa80
	float GrainJitter;//[Offset: 0x3fc, Size: 0x4] 0x78dbeeab00
	float GrainIntensity;//[Offset: 0x400, Size: 0x4] 0x78dbeeab80
	float AmbientOcclusionIntensity;//[Offset: 0x404, Size: 0x4] 0x78dbeeac00
	float AmbientOcclusionStaticFraction;//[Offset: 0x408, Size: 0x4] 0x78dbeeac80
	float AmbientOcclusionRadius;//[Offset: 0x40c, Size: 0x4] 0x78dbeead00
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x410, Size: 0x1] 0x78dbeead80
	float AmbientOcclusionFadeDistance;//[Offset: 0x414, Size: 0x4] 0x78dbeeae00
	float AmbientOcclusionFadeRadius;//[Offset: 0x418, Size: 0x4] 0x78dbeeae80
	float AmbientOcclusionDistance;//[Offset: 0x41c, Size: 0x4] 0x78dbeeaf00
	float AmbientOcclusionPower;//[Offset: 0x420, Size: 0x4] 0x78dbeeaf80
	float AmbientOcclusionBias;//[Offset: 0x424, Size: 0x4] 0x78dbeeb000
	float AmbientOcclusionQuality;//[Offset: 0x428, Size: 0x4] 0x78dbeeb080
	float AmbientOcclusionMipBlend;//[Offset: 0x42c, Size: 0x4] 0x78dbeeb100
	float AmbientOcclusionMipScale;//[Offset: 0x430, Size: 0x4] 0x78dbeeb180
	float AmbientOcclusionMipThreshold;//[Offset: 0x434, Size: 0x4] 0x78dbeeb200
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x438, Size: 0x4] 0x78dbeeb280
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43c, Size: 0x1] 0x78dbeeb300
	int RayTracingAOSamplesPerPixel;//[Offset: 0x440, Size: 0x4] 0x78dbeeb380
	float RayTracingAOIntensity;//[Offset: 0x444, Size: 0x4] 0x78dbeeb400
	float RayTracingAORadius;//[Offset: 0x448, Size: 0x4] 0x78dbeeb480
	LinearColor IndirectLightingColor;//[Offset: 0x44c, Size: 0x10] 0x78dbeeb500
	float IndirectLightingIntensity;//[Offset: 0x45c, Size: 0x4] 0x78dbeeb580
	enum RayTracingGIType;//[Offset: 0x460, Size: 0x1] 0x78dbe5db20
	int RayTracingGIMaxBounces;//[Offset: 0x464, Size: 0x4] 0x78dbee9580
	int RayTracingGISamplesPerPixel;//[Offset: 0x468, Size: 0x4] 0x78dbee9600
	float ColorGradingIntensity;//[Offset: 0x46c, Size: 0x4] 0x78dbee9680
	Texture* ColorGradingLUT;//[Offset: 0x470, Size: 0x8] 0x78dbee9700
	float DepthOfFieldSensorWidth;//[Offset: 0x478, Size: 0x4] 0x78dbee9780
	float DepthOfFieldFocalDistance;//[Offset: 0x47c, Size: 0x4] 0x78dbee9800
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x480, Size: 0x4] 0x78dbee9880
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x484, Size: 0x4] 0x78dbee9900
	float DepthOfFieldFocalRegion;//[Offset: 0x488, Size: 0x4] 0x78dbee9980
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x48c, Size: 0x4] 0x78dbee9a00
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x490, Size: 0x4] 0x78dbee9a80
	float DepthOfFieldScale;//[Offset: 0x494, Size: 0x4] 0x78dbee9b00
	float DepthOfFieldNearBlurSize;//[Offset: 0x498, Size: 0x4] 0x78dbee9b80
	float DepthOfFieldFarBlurSize;//[Offset: 0x49c, Size: 0x4] 0x78dbee9c00
	float DepthOfFieldOcclusion;//[Offset: 0x4a0, Size: 0x4] 0x78dbee9c80
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4a4, Size: 0x4] 0x78dbee9d00
	float DepthOfFieldVignetteSize;//[Offset: 0x4a8, Size: 0x4] 0x78dbee9d80
	float MotionBlurAmount;//[Offset: 0x4ac, Size: 0x4] 0x78dbee9e00
	float MotionBlurMax;//[Offset: 0x4b0, Size: 0x4] 0x78dbee9e80
	int MotionBlurTargetFPS;//[Offset: 0x4b4, Size: 0x4] 0x78dbee9f00
	float MotionBlurPerObjectSize;//[Offset: 0x4b8, Size: 0x4] 0x78dbee9f80
	float LPVIntensity;//[Offset: 0x4bc, Size: 0x4] 0x78dbeea000
	float LPVVplInjectionBias;//[Offset: 0x4c0, Size: 0x4] 0x78dbeea080
	float LPVSize;//[Offset: 0x4c4, Size: 0x4] 0x78dbeea100
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4c8, Size: 0x4] 0x78dbeea180
	float LPVSecondaryBounceIntensity;//[Offset: 0x4cc, Size: 0x4] 0x78dbeea200
	float LPVGeometryVolumeBias;//[Offset: 0x4d0, Size: 0x4] 0x78dbeea280
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4d4, Size: 0x4] 0x78dbeea300
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4d8, Size: 0x4] 0x78dbeea380
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4dc, Size: 0x4] 0x78dbeea400
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e0, Size: 0x4] 0x78dbeea480
	float LPVSpecularOcclusionExponent;//[Offset: 0x4e4, Size: 0x4] 0x78dbeea500
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4e8, Size: 0x4] 0x78dbee8480
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4ec, Size: 0x4] 0x78dbee8500
	enum ReflectionsType;//[Offset: 0x4f0, Size: 0x1] 0x78dbe5dbc0
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4f4, Size: 0x4] 0x78dbee8600
	float ScreenSpaceReflectionQuality;//[Offset: 0x4f8, Size: 0x4] 0x78dbee8680
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4fc, Size: 0x4] 0x78dbee8700
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x500, Size: 0x4] 0x78dbee8780
	int RayTracingReflectionsMaxBounces;//[Offset: 0x504, Size: 0x4] 0x78dbee8800
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x508, Size: 0x4] 0x78dbee8880
	enum RayTracingReflectionsShadows;//[Offset: 0x50c, Size: 0x1] 0x78dbe5dc60
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50d, Size: 0x1] 0x78dbee8980
	enum TranslucencyType;//[Offset: 0x50e, Size: 0x1] 0x78dbe5dd00
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x510, Size: 0x4] 0x78dbee8a80
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x514, Size: 0x4] 0x78dbee8b00
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x518, Size: 0x4] 0x78dbee8b80
	enum RayTracingTranslucencyShadows;//[Offset: 0x51c, Size: 0x1] 0x78dbe5dda0
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51d, Size: 0x1] 0x78dbee8c80
	int PathTracingMaxBounces;//[Offset: 0x520, Size: 0x4] 0x78dbee8d00
	int PathTracingSamplesPerPixel;//[Offset: 0x524, Size: 0x4] 0x78dbee8d80
	float LPVFadeRange;//[Offset: 0x528, Size: 0x4] 0x78dbee8e00
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x52c, Size: 0x4] 0x78dbee8e80
	float ScreenPercentage;//[Offset: 0x530, Size: 0x4] 0x78dbee8f00
	WeightedBlendables WeightedBlendables;//[Offset: 0x538, Size: 0x10] 0x78dbee9100

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10] 0x78dbe5de40

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4] 0x78dbee8f80
	Object* Object;//[Offset: 0x8, Size: 0x8] 0x78dbee9000

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8] 0x78dbf39900
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5e0] 0x78dbf39980
	PlayerState* PlayerState;//[Offset: 0x5f0, Size: 0x8] 0x78dbf39a00

--------------------------------
Class: CameraShakeBase.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dc128a80
	float ShakeScale;//[Offset: 0x2c, Size: 0x4] 0x78dc128b00
	PlayerCameraManager* CameraManager;//[Offset: 0x30, Size: 0x8] 0x78dc128b80

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8] 0x78d72e9080
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8] 0x78d72e9100
	float PlayRate;//[Offset: 0x50, Size: 0x4] 0x78d72e9180
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8] 0x78d72e9200
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8] 0x78d72e9280
	enum PlaySpace;//[Offset: 0x78, Size: 0x1] 0x78d727c180
	void Stop(bool bImmediate);// 0xc7ff9e0 0x78d72f4bc0
	void SetScale(float NewDuration);// 0xc7ff890 0x78d72f4ca0
	void SetDuration(float NewDuration);// 0xc7ff938 0x78d72f4d80

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8] 0x78d72e7400
	float AnimLength;//[Offset: 0x30, Size: 0x4] 0x78d72e7480
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c] 0x78d72e7500
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78d72e7580
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x78d72e7600
	float BaseFOV;//[Offset: 0x54, Size: 0x4] 0x78d72e7680
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x550] 0x78d72e7700
	float BasePostProcessBlendWeight;//[Offset: 0x5b0, Size: 0x4] 0x78d72e7780

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10] 0x78d7333620
	FName GroupName;//[Offset: 0x40, Size: 0x8] 0x78d736e180
	Color GroupColor;//[Offset: 0x48, Size: 0x4] 0x78d736e200
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x78d736e280
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1] 0x78d736e300
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1] 0x78d736e380
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1] 0x78d736e400
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1] 0x78d736e480

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10] 0x78dbff8080
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8] 0x78dbff8120
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1] 0x78dc090f80
	FString TrackTitle;//[Offset: 0x58, Size: 0x10] 0x78dc091000
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78dc091080
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x78dc03f800
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x78dc03f880
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x78dc03f900
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x78dc03f980
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x78dc03fa00
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x78dc03fa80
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1] 0x78dc03fb00

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8] 0x78d736de80
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8] 0x78d736df00
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10] 0x78d7333580

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18] 0x78d7370e80
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18] 0x78d7370f00
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10] 0x78d7370f80
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8] 0x78d7371000
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4] 0x78d7371080
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4] 0x78d736f800
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x78d736f880
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x78d736f900
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x78d736f980
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x78d736fa00
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1] 0x78d736fa80
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1] 0x78d736fb00
	byte RotMode;//[Offset: 0xc1, Size: 0x1] 0x78d736fb80

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10] 0x78e6b15740
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78e6833c00
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78e6833c80

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78e6833d00
	Vector OutVal;//[Offset: 0x4, Size: 0xc] 0x78e6833d80
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc] 0x78e6833e00
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc] 0x78e6833e80
	byte InterpMode;//[Offset: 0x28, Size: 0x1] 0x78e6833f00

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10] 0x78dbe5e660

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8] 0x78dbf17e80
	float Time;//[Offset: 0x8, Size: 0x4] 0x78dbf17f00

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc] 0x78d736ec00
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc] 0x78d736ec80

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x201, Size: 0x1] 0x78d727be60
	float InnerAttenuationRadius;//[Offset: 0x204, Size: 0x4] 0x78d72e8b00
	float OuterAttenuationRadius;//[Offset: 0x208, Size: 0x4] 0x78d72e8b80
	class CameraShakeBase* CameraShake;//[Offset: 0x210, Size: 0x8] 0x78d727bf00
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1] 0x78d72e8c00
	void StopAllCameraShakesOfType(class CameraShakeBase InCameraShake, bool bImmediately);// 0xc8035a8 0x78d72f4760
	void StopAllCameraShakes(bool bImmediately);// 0xc8034f8 0x78d72f4840
	void StartCameraShake(class CameraShakeBase InCameraShake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xc8036a4 0x78d72f4920
	void Start();// 0xc80382c 0x78d72f4a00
	float GetAttenuationFactor(out const Vector Location);// 0xc803440 0x78d72f4ae0

--------------------------------
Class: MatineeCameraShake.CameraShakeBase.Object
	float OscillationDuration;//[Offset: 0x98, Size: 0x4] 0x78dc18b600
	float OscillationBlendInTime;//[Offset: 0x9c, Size: 0x4] 0x78dc18b680
	float OscillationBlendOutTime;//[Offset: 0xa0, Size: 0x4] 0x78dc18b700
	ROscillator RotOscillation;//[Offset: 0xa4, Size: 0x24] 0x78dc18b780
	VOscillator LocOscillation;//[Offset: 0xc8, Size: 0x24] 0x78dc18b800
	FOscillator FOVOscillation;//[Offset: 0xec, Size: 0xc] 0x78dc18b880
	float AnimPlayRate;//[Offset: 0xf8, Size: 0x4] 0x78dc18b900
	float AnimScale;//[Offset: 0xfc, Size: 0x4] 0x78dc18b980
	float AnimBlendInTime;//[Offset: 0x100, Size: 0x4] 0x78dc18ba00
	float AnimBlendOutTime;//[Offset: 0x104, Size: 0x4] 0x78dc18ba80
	float RandomAnimSegmentDuration;//[Offset: 0x108, Size: 0x4] 0x78dc18bb00
	CameraAnim* Anim;//[Offset: 0x110, Size: 0x8] 0x78dc18bb80
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1] 0x78dc18bc00
	float OscillatorTimeRemaining;//[Offset: 0x11c, Size: 0x4] 0x78dc18bc80
	CameraAnimInst* AnimInst;//[Offset: 0x120, Size: 0x8] 0x78dc18bd00
	void ReceiveStopShake(bool bImmediately);// 0xaa7cd18 0x78dc191740
	void ReceivePlayShake(float Scale);// 0xaa7cd18 0x78dc191820
	bool ReceiveIsFinished();// 0xc8022f0 0x78dc191900
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0xaa7cd18 0x78dc1919e0

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc] 0x78dbee7400
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc] 0x78dbee7480
	FOscillator Roll;//[Offset: 0x18, Size: 0xc] 0x78dbee7500

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x78dbee7680
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x78dbee7700
	byte InitialOffset;//[Offset: 0x8, Size: 0x1] 0x78dbee7780
	enum Waveform;//[Offset: 0x9, Size: 0x1] 0x78dbe5df80

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc] 0x78dbee7580
	FOscillator Y;//[Offset: 0xc, Size: 0xc] 0x78dbee7600
	FOscillator Z;//[Offset: 0x18, Size: 0xc] 0x78dbee7880

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78dc18c280
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78dc18c300
	byte Priority;//[Offset: 0x29, Size: 0x1] 0x78dc18c380
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8] 0x78dc18c400
	float AlphaInTime;//[Offset: 0x38, Size: 0x4] 0x78dc18c480
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4] 0x78dc18c500
	float Alpha;//[Offset: 0x40, Size: 0x4] 0x78dc18c580
	bool IsDisabled();// 0xc801234 0x78dc191ac0
	Actor* GetViewTarget();// 0xc8011f8 0x78dc191ba0
	void EnableModifier();// 0xc801124 0x78dc191c80
	void DisableModifier(bool bImmediate);// 0xc801140 0x78dc17e780
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0xaa7cd18 0x78dc17e860
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0xaa7cd18 0x78dc17e940

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x270, Size: 0x8] 0x78d7318800
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x278, Size: 0x8] 0x78d7318880
	PlayerCameraManager* BaseCamera;//[Offset: 0x280, Size: 0x8] 0x78d7318900
	Transform RelativeTransform;//[Offset: 0x290, Size: 0x30] 0x78d7318980
	float BaseFOV;//[Offset: 0x2c0, Size: 0x4] 0x78d7318a00
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1] 0x78d7318a80
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1] 0x78d7318b00
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 0x10] 0x78d727ede0
	float DistFromCamera;//[Offset: 0x2d8, Size: 0x4] 0x78d7318b80

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x220, Size: 0x8] 0x78d7318c00
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78d7318c80
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x78d7318d00
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1] 0x78d7318d80
	delegate OnParticleSpawn;//[Offset: 0x230, Size: 0x10] 0x78d7318e00
	delegate OnParticleBurst;//[Offset: 0x240, Size: 0x10] 0x78d7318e80
	delegate OnParticleDeath;//[Offset: 0x250, Size: 0x10] 0x78d7318f00
	delegate OnParticleCollide;//[Offset: 0x260, Size: 0x10] 0x78d7318f80
	void ToggleActive();// 0xc839a24 0x78d7320940
	void SetVectorParameter(FName ParameterName, Vector Param);// 0xc839758 0x78d7320a20
	void SetTemplate(ParticleSystem* NewTemplate);// 0xc83993c 0x78d7320b00
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0xc839488 0x78d7320be0
	void SetFloatParameter(FName ParameterName, float Param);// 0xc839848 0x78d7320cc0
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0xc839668 0x78d7320da0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0xc839578 0x78d7320e80
	void OnRep_bCurrentlyActive();// 0xc839a60 0x78d7320f60
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0xc839a7c 0x78d7321040
	bool IsActive();// 0xc8399ec 0x78d7321120
	void Deactivate();// 0xc839a38 0x78d7321200
	void Activate();// 0xc839a4c 0x78d73212e0

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10] 0x78dc118b20
	<class CameraShakeBase,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50] 0x78dbf5ed40
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4] 0x78dc18c200

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShakeBase* ShakeInstance;//[Offset: 0x0, Size: 0x8] 0x78dbee7980
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8] 0x78dbee7a00

--------------------------------
Class: PooledCameraShakes
	CameraShakeBase*[] PooledShakes;//[Offset: 0x0, Size: 0x10] 0x78dbe5e020

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x220, Size: 0x1] 0x78d72a0480
	CameraComponent* CameraComponent;//[Offset: 0x228, Size: 0x8] 0x78d72a0500
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 0x8] 0x78d72a0580
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x78d72a0600
	float AspectRatio;//[Offset: 0x244, Size: 0x4] 0x78d72a0680
	float FOVAngle;//[Offset: 0x248, Size: 0x4] 0x78d72a0700
	float PostProcessBlendWeight;//[Offset: 0x24c, Size: 0x4] 0x78d72a0780
	PostProcessSettings PostProcessSettings;//[Offset: 0x250, Size: 0x550] 0x78d72a0800
	int GetAutoActivatePlayerIndex();// 0xc7ff1f8 0x78d7295480

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x204, Size: 0x4] 0x78d72a1780
	float OrthoWidth;//[Offset: 0x208, Size: 0x4] 0x78d72a1800
	float OrthoNearClipPlane;//[Offset: 0x20c, Size: 0x4] 0x78d72a1880
	float OrthoFarClipPlane;//[Offset: 0x210, Size: 0x4] 0x78d72a1900
	float AspectRatio;//[Offset: 0x214, Size: 0x4] 0x78d72a1980
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1] 0x78d72a1a00
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 0x1] 0x78d72a1a80
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 0x1] 0x78d72a1b00
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x218, Size: 0x1] 0x78d72a1b80
	byte ProjectionMode;//[Offset: 0x219, Size: 0x1] 0x78d72a1c00
	float PostProcessBlendWeight;//[Offset: 0x250, Size: 0x4] 0x78d72a1c80
	PostProcessSettings PostProcessSettings;//[Offset: 0x280, Size: 0x550] 0x78d72a1d00
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0xc8005cc 0x78d7294840
	void SetProjectionMode(byte InProjectionMode);// 0xc800528 0x78d7294920
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0xc800484 0x78d7294a00
	void SetOrthoWidth(float InOrthoWidth);// 0xc800928 0x78d7294ae0
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0xc800884 0x78d7294bc0
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0xc8007e0 0x78d7294ca0
	void SetFieldOfView(float InFieldOfView);// 0xc8009cc 0x78d7294d80
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0xc800684 0x78d7294e60
	void SetAspectRatio(float InAspectRatio);// 0xc80073c 0x78d7294f40
	void RemoveBlendable(interface classNone InBlendableObject);// 0xc800040 0x78d7295020
	void OnCameraMeshHiddenChanged();// 0xc80002c 0x78d7295100
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0xc8002e8 0x78d72951e0
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0xc80016c 0x78d72952c0

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4] 0x78dbf39a80
	byte BlendFunction;//[Offset: 0x4, Size: 0x1] 0x78dbf39b00
	float BlendExp;//[Offset: 0x8, Size: 0x4] 0x78dbf39b80
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78dbf39c00

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8] 0x78dbf70a80
	FName Filename;//[Offset: 0x8, Size: 0x8] 0x78dbf70b00
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78dbf70b80

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8] 0x78d736f200

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4] 0x78cd942e00
	int UUID;//[Offset: 0x4, Size: 0x4] 0x78cd942e80
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8] 0x78cd942f00
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8] 0x78cd942f80

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10] 0x78d7330ce0
	float Duration;//[Offset: 0x38, Size: 0x4] 0x78d7342500

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbf13980
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbf13a00
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbf13a80
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78dbf13b00
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88] 0x78dbf13b80

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8] 0x78dbf39580
	int LODIndex;//[Offset: 0x8, Size: 0x4] 0x78dbf39600
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78dbf39680
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x78dbf39700
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x78dbf39780

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8] 0x78dbf13c00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78dbf13c80
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x78dbf13d00
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x78dbf13d80

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10] 0x78d733dda0
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4] 0x78d7473480
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4] 0x78d7473500
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4] 0x78d7473580
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4] 0x78d7473600
	float ActivationDelay;//[Offset: 0x48, Size: 0x4] 0x78d7473680
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78d7473700
	float StartupDelay;//[Offset: 0x50, Size: 0x4] 0x78d7473780

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8] 0x78dbf70c00
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8] 0x78dbf70c80
	Vector2D Center;//[Offset: 0x10, Size: 0x8] 0x78dbf70d00
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8] 0x78dbf70d80
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8] 0x78dbf70e00
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8] 0x78dbf70e80
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8] 0x78dbf70f00
	Key MainInputKey;//[Offset: 0x38, Size: 0x18] 0x78dbf70f80
	Key AltInputKey;//[Offset: 0x50, Size: 0x18] 0x78dbf71000

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8] 0x78dc0dbc00
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8] 0x78dbffd440
	void walk();// 0xc816500 0x78dc0ec8e0
	void ViewSelf();// 0xc8160b8 0x78dc0ec9c0
	void ViewPlayer(FString S);// 0xc815fd8 0x78dc0e90e0
	void ViewClass(class Actor DesiredClass);// 0xc815e78 0x78dc0e91c0
	void ViewActor(FName ActorName);// 0xc815f28 0x78dc0e92a0
	void UpdateSafeArea();// 0xc815138 0x78dc0e9380
	void ToggleServerStatReplicatorUpdateStatNet();// 0xc81514c 0x78dc0e9460
	void ToggleServerStatReplicatorClientOverwrite();// 0xc815160 0x78dc0e9540
	void ToggleDebugCamera();// 0xc815c4c 0x78dc0e9620
	void ToggleAILogging();// 0xc815c30 0x78dc0e9700
	void TestCollisionDistance();// 0xc8158e8 0x78dc0e97e0
	void Teleport();// 0xc8165e8 0x78dc0e98c0
	void Summon(FString ClassName);// 0xc8160f0 0x78dc0e99a0
	void StreamLevelOut(FName PackageName);// 0xc815c68 0x78dc0e9a80
	void StreamLevelIn(FName PackageName);// 0xc815dc8 0x78dc0e9b60
	void SpawnServerStatReplicator();// 0xc815188 0x78dc0e9c40
	void Slomo(float NewTimeDilation);// 0xc816418 0x78dc0e9d20
	void SetWorldOrigin();// 0xc81532c 0x78dc0e9e00
	void SetMouseSensitivityToDefault();// 0xc815310 0x78dc0e9ee0
	void ServerToggleAILogging();// 0xc815bd4 0x78dc0e9fc0
	void ReceiveInitCheatManager();// 0xaa7cd18 0x78dc0ea0a0
	void ReceiveEndPlay();// 0xaa7cd18 0x78dc0ea180
	void PlayersOnly();// 0xc8160d4 0x78dc0ea260
	void OnlyLoadLevel(FName PackageName);// 0xc815d18 0x78dc0ea340
	void LogLoc();// 0xc815340 0x78dc0ea420
	void InvertMouse();// 0xc8152f4 0x78dc0ea500
	void God();// 0xc8164c8 0x78dc0ea5e0
	void Ghost();// 0xc8164e4 0x78dc0ea6c0
	void FreezeFrame(float Delay);// 0xc816604 0x78dc0ea7a0
	void Fly();// 0xc81651c 0x78dc0ea880
	void FlushLog();// 0xc81535c 0x78dc0ea960
	void EnableDebugCamera();// 0xc81511c 0x78dc0eaa40
	void DumpVoiceMutingState();// 0xc815878 0x78dc0eab20
	void DumpPartyState();// 0xc8158b0 0x78dc0eac00
	void DumpOnlineSessionState();// 0xc8158cc 0x78dc0eace0
	void DumpChatState();// 0xc815894 0x78dc0e7400
	void DisableDebugCamera();// 0xc815100 0x78dc0e74e0
	void DestroyTarget();// 0xc81634c 0x78dc0e75c0
	void DestroyServerStatReplicator();// 0xc815174 0x78dc0e76a0
	void DestroyPawns(class Pawn aClass);// 0xc8161d0 0x78dc0e7780
	void DestroyAllPawnsExceptTarget();// 0xc816280 0x78dc0e7860
	void DestroyAll(class Actor aClass);// 0xc81629c 0x78dc0e7940
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0xc815ac0 0x78dc0e7a20
	void DebugCapsuleSweepPawn();// 0xc815920 0x78dc0e7b00
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0xc815958 0x78dc0e7be0
	void DebugCapsuleSweepClear();// 0xc815904 0x78dc0e7cc0
	void DebugCapsuleSweepChannel(byte Channel);// 0xc815a10 0x78dc0e7da0
	void DebugCapsuleSweepCapture();// 0xc81593c 0x78dc0e7e80
	void DebugCapsuleSweep();// 0xc815bb8 0x78dc0e7f60
	void DamageTarget(float DamageAmount);// 0xc816368 0x78dc0e8040
	void CheatScript(FString ScriptName);// 0xc81519c 0x78dc0e8120
	void ChangeSize(float F);// 0xc816538 0x78dc0e8200
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0xc815378 0x78dc0e82e0
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0xc815658 0x78dc0e83c0
	void BugIt(FString ScreenShotDescription);// 0xc815578 0x78dc0e84a0

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56d, Size: 0x1] 0x78d730a300
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56d, Size: 0x1] 0x78d730a380
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56d, Size: 0x1] 0x78d730a400
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56d, Size: 0x1] 0x78d730a480
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56d, Size: 0x1] 0x78d730a500
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56d, Size: 0x1] 0x78d7308480
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56d, Size: 0x1] 0x78d7308500
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56d, Size: 0x1] 0x78d7308580
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x570, Size: 0x8] 0x78d7308600
	Actor* SelectedActor;//[Offset: 0x578, Size: 0x8] 0x78d7308680
	PrimitiveComponent* SelectedComponent;//[Offset: 0x580, Size: 0x8] 0x78d7308700
	HitResult SelectedHitPoint;//[Offset: 0x588, Size: 0x8c] 0x78d7308780
	PlayerController* OriginalControllerRef;//[Offset: 0x618, Size: 0x8] 0x78d7308800
	Player* OriginalPlayer;//[Offset: 0x620, Size: 0x8] 0x78d7308880
	float SpeedScale;//[Offset: 0x628, Size: 0x4] 0x78d7308900
	float InitialMaxSpeed;//[Offset: 0x62c, Size: 0x4] 0x78d7308980
	float InitialAccel;//[Offset: 0x630, Size: 0x4] 0x78d7308a00
	float InitialDecel;//[Offset: 0x634, Size: 0x4] 0x78d7308a80
	void ToggleDisplay();// 0xc82709c 0x78d72f9540
	void ShowDebugSelectedInfo();// 0xc8270b0 0x78d72f9620
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0xc826fc0 0x78d72f9700
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0xaa7cd18 0x78d72f97e0
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult hit);// 0xaa7cd18 0x78d72f98c0
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0xaa7cd18 0x78d72f99a0
	Actor* GetSelectedActor();// 0xc827068 0x78d72f9a80

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x470, Size: 0x4] 0x78d7316a00
	float FrustumAngle;//[Offset: 0x474, Size: 0x4] 0x78d7316a80
	float FrustumAspectRatio;//[Offset: 0x478, Size: 0x4] 0x78d7316b00
	float FrustumStartDist;//[Offset: 0x47c, Size: 0x4] 0x78d7316b80
	float FrustumEndDist;//[Offset: 0x480, Size: 0x4] 0x78d7316c00
	Texture* Texture;//[Offset: 0x488, Size: 0x8] 0x78d7316c80

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8] 0x78dbf13e00

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4] 0x78dbee8180
	int Index;//[Offset: 0x4, Size: 0x4] 0x78dbee8200
	int SelectionIndex;//[Offset: 0x8, Size: 0x4] 0x78dbee8280

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8] 0x78d3561500
	FName MemberName;//[Offset: 0x8, Size: 0x8] 0x78d3561580
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10] 0x78d3561600

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x220, Size: 0x8] 0x78d742e700
	FName MatineeControllerName;//[Offset: 0x228, Size: 0x8] 0x78d742c680
	float PlayRate;//[Offset: 0x230, Size: 0x4] 0x78d742c700
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1] 0x78d742c780
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1] 0x78d742c800
	float ForceStartPosition;//[Offset: 0x238, Size: 0x4] 0x78d742c880
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1] 0x78d742c900
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 0x1] 0x78d742c980
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23c, Size: 0x1] 0x78d742ca00
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23c, Size: 0x1] 0x78d742ca80
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23c, Size: 0x1] 0x78d742cb00
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23c, Size: 0x1] 0x78d742cb80
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x23c, Size: 0x1] 0x78d742cc00
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x23c, Size: 0x1] 0x78d742cc80
	int PreferredSplitScreenNum;//[Offset: 0x240, Size: 0x4] 0x78d742cd00
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1] 0x78d742cd80
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1] 0x78d742ce00
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 0x1] 0x78d742ce80
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1] 0x78d742cf00
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x248, Size: 0x10] 0x78d7338940
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1] 0x78d742d000
	InterpGroupInst*[] GroupInst;//[Offset: 0x260, Size: 0x10] 0x78d73389e0
	CameraCutInfo[] CameraCuts;//[Offset: 0x270, Size: 0x10] 0x78d7338a80
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1] 0x78d742d180
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1] 0x78d742d200
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1] 0x78d742d280
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 0x1] 0x78d742d300
	float InterpPosition;//[Offset: 0x284, Size: 0x4] 0x78d742d380
	byte ReplicationForceIsPlaying;//[Offset: 0x28c, Size: 0x1] 0x78d742d400
	delegate OnPlay;//[Offset: 0x290, Size: 0x10] 0x78d742d480
	delegate OnStop;//[Offset: 0x2a0, Size: 0x10] 0x78d742d500
	delegate OnPause;//[Offset: 0x2b0, Size: 0x10] 0x78d742d580
	void Stop();// 0xc94d858 0x78d7414760
	void SetPosition(float NewPosition, bool bJump);// 0xc94d724 0x78d7414840
	void SetLoopingState(bool bNewLooping);// 0xc94d650 0x78d7414920
	void Reverse();// 0xc94d83c 0x78d7414a00
	void Play();// 0xc94d874 0x78d7414ae0
	void Pause();// 0xc94d820 0x78d7414bc0
	void EnableGroupByName(FString GroupName, bool bEnable);// 0xc94d498 0x78d7414ca0
	void ChangePlaybackDirection();// 0xc94d708 0x78d7414d80

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4] 0x78d736e580
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4] 0x78d736e600
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10] 0x78d73336c0
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8] 0x78d736e700
	float EdSectionStart;//[Offset: 0x48, Size: 0x4] 0x78d736c680
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4] 0x78d736c700
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78d736c780
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8] 0x78d736c800
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10] 0x78d7333760

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8] 0x78dbf1d700
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10] 0x78dbf20f60

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78dbf1f700
	float Timestamp;//[Offset: 0xc, Size: 0x4] 0x78dbf1f780

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x208, Size: 0x8] 0x78d727baa0
	Actor* ChildActor;//[Offset: 0x210, Size: 0x8] 0x78d7304d80
	Actor* ChildActorTemplate;//[Offset: 0x218, Size: 0x8] 0x78d7304e00
	void SetChildActorClass(class Actor InClass);// 0xc817d20 0x78d72fab20

--------------------------------
Class: ActorChannel.Channel.Object
	Actor* Actor;//[Offset: 0x70, Size: 0x8] 0x78d72d1700
	Object*[] CreateSubObjects;//[Offset: 0x160, Size: 0x10] 0x78d7276dc0

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78d72d3100
	float AnimLength;//[Offset: 0x94, Size: 0x4] 0x78d72d3180
	InterpolationParameter InterpolationParam;//[Offset: 0x98, Size: 0x8] 0x78d72d1100
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xb0, Size: 0x4] 0x78d72d1180
	byte NotifyTriggerMode;//[Offset: 0xb4, Size: 0x1] 0x78d72d1200
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb8, Size: 0x10] 0x78d7276aa0
	int SampleIndexWithMarkers;//[Offset: 0xc8, Size: 0x4] 0x78d72d1300
	BlendSample[] SampleData;//[Offset: 0xd0, Size: 0x10] 0x78d7276b40
	EditorElement[] GridSamples;//[Offset: 0xe0, Size: 0x10] 0x78d7276be0
	BlendParameter BlendParameters;//[Offset: 0xf0, Size: 0x20] 0x78d72d1480

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4] 0x78dbee7380
	byte InterpolationType;//[Offset: 0x4, Size: 0x1] 0x78dbee5300

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10] 0x78dbee5900
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4] 0x78dbee5980

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8] 0x78dbee5580
	Vector SampleValue;//[Offset: 0x8, Size: 0xc] 0x78dbee5600
	float RateScale;//[Offset: 0x14, Size: 0x4] 0x78dbee5680

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4] 0x78dbee5700
	float Weights;//[Offset: 0xc, Size: 0x4] 0x78dbee5780

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10] 0x78dbee5380
	float Min;//[Offset: 0x10, Size: 0x4] 0x78dbee5400
	float Max;//[Offset: 0x14, Size: 0x4] 0x78dbee5480
	int GridNum;//[Offset: 0x18, Size: 0x4] 0x78dbee5500

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x150, Size: 0x1] 0x78d72d3080

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1] 0x78d72d3000

--------------------------------
Class: AimOffsetBlendSpace1D.BlendSpace1D.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: AmbientSound.Actor.Object
	AudioComponent* AudioComponent;//[Offset: 0x220, Size: 0x8] 0x78d72d2a80
	void Stop();// 0xc7a40f0 0x78d72cc9c0
	void Play(float startTime);// 0xc7a4104 0x78d72c90e0
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);// 0xc7a429c 0x78d72c91c0
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);// 0xc7a438c 0x78d72c92a0
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);// 0xc7a41ac 0x78d72c9380

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x208, Size: 0x8] 0x78dc0fc880
	AudioComponentParam[] InstanceParameters;//[Offset: 0x210, Size: 0x10] 0x78dbfffc40
	SoundClass* SoundClassOverride;//[Offset: 0x220, Size: 0x8] 0x78dc0fc980
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78dc0fca00
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x78dc0fca80
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1] 0x78dc0fcb00
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 0x1] 0x78dc0fcb80
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x228, Size: 0x1] 0x78dc0fcc00
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x228, Size: 0x1] 0x78dc0fcc80
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x228, Size: 0x1] 0x78dc0fcd00
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x228, Size: 0x1] 0x78dc0fcd80
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x229, Size: 0x1] 0x78dc0fce00
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x229, Size: 0x1] 0x78dc0fce80
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22a, Size: 0x1] 0x78dc0fcf00
	FName AudioComponentUserID;//[Offset: 0x230, Size: 0x8] 0x78dc0fcf80
	float PitchModulationMin;//[Offset: 0x238, Size: 0x4] 0x78dc0fd000
	float PitchModulationMax;//[Offset: 0x23c, Size: 0x4] 0x78dc0fd080
	float VolumeModulationMin;//[Offset: 0x240, Size: 0x4] 0x78dc0fd100
	float VolumeModulationMax;//[Offset: 0x244, Size: 0x4] 0x78dc0fd180
	float VolumeMultiplier;//[Offset: 0x248, Size: 0x4] 0x78dc0fd200
	int EnvelopeFollowerAttackTime;//[Offset: 0x24c, Size: 0x4] 0x78dc0fd280
	int EnvelopeFollowerReleaseTime;//[Offset: 0x250, Size: 0x4] 0x78dc0fd300
	float Priority;//[Offset: 0x254, Size: 0x4] 0x78dc0fd380
	float SubtitlePriority;//[Offset: 0x258, Size: 0x4] 0x78dc0fd400
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x260, Size: 0x8] 0x78dc0fd480
	float PitchMultiplier;//[Offset: 0x268, Size: 0x4] 0x78dc0fd500
	float LowPassFilterFrequency;//[Offset: 0x26c, Size: 0x4] 0x78dc0fd580
	SoundAttenuation* AttenuationSettings;//[Offset: 0x278, Size: 0x8] 0x78dc0fd600
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x280, Size: 0x3a0] 0x78dc0fd680
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x620, Size: 0x8] 0x78dc0fb600
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x628, Size: 0x50] 0x78dbfffce0
	enum AutoAttachLocationRule;//[Offset: 0x684, Size: 0x1] 0x78dbfffd80
	enum AutoAttachRotationRule;//[Offset: 0x685, Size: 0x1] 0x78dbfffe20
	enum AutoAttachScaleRule;//[Offset: 0x686, Size: 0x1] 0x78dbfffec0
	SoundModulationDefaultRoutingSettings ModulationRouting;//[Offset: 0x688, Size: 0x48] 0x78dc0fb880
	delegate OnAudioPlayStateChanged;//[Offset: 0x6d0, Size: 0x10] 0x78dc0fb900
	delegate OnAudioVirtualizationChanged;//[Offset: 0x6f8, Size: 0x10] 0x78dc0fb980
	delegate OnAudioFinished;//[Offset: 0x720, Size: 0x10] 0x78dc0fba00
	delegate OnAudioPlaybackPercent;//[Offset: 0x748, Size: 0x10] 0x78dc0fba80
	delegate OnAudioSingleEnvelopeValue;//[Offset: 0x770, Size: 0x10] 0x78dc0fbb00
	delegate OnAudioMultiEnvelopeValue;//[Offset: 0x798, Size: 0x10] 0x78dc0fbb80
	delegate OnQueueSubtitles;//[Offset: 0x7c0, Size: 0x10] 0x78dc0fbc00
	SceneComponent* AutoAttachParent;//[Offset: 0x7d0, Size: 0x8] 0x78dc0fbc80
	FName AutoAttachSocketName;//[Offset: 0x7d8, Size: 0x8] 0x78dc0fbd00
	void StopDelayed(float DelayTime);// 0xc7d8fbc 0x78dc105f00
	void Stop();// 0xc7d9064 0x78dc105fe0
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0xc7d8b40 0x78dc1060c0
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0xc7d88a8 0x78dc1061a0
	void SetUISound(bool bInUISound);// 0xc7d8750 0x78dc106280
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0xc7d8588 0x78dc106360
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0xc7d8494 0x78dc106440
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0xc7d83a0 0x78dc106520
	void SetSound(SoundBase* NewSound);// 0xc7d9700 0x78dc106600
	void SetPitchMultiplier(float NewPitchMultiplier);// 0xc7d8800 0x78dc1066e0
	void SetPaused(bool bPause);// 0xc7d8f0c 0x78dc1067c0
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0xc7d8060 0x78dc1068a0
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0xc7d8108 0x78dc106980
	void SetIntParameter(FName InName, int inInt);// 0xc7d8950 0x78dc106a60
	void SetFloatParameter(FName InName, float InFloat);// 0xc7d8c30 0x78dc106b40
	void SetBoolParameter(FName InName, bool InBool);// 0xc7d8a44 0x78dc106c20
	void SetAudioBusSendPreEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0xc7d82ac 0x78dc106d00
	void SetAudioBusSendPostEffect(AudioBus* AudioBus, float SourceBusSendLevel);// 0xc7d81b8 0x78dc106de0
	void PlayQuantized(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle, out QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum InFadeCurve);// 0xc7d9080 0x78dc106ec0
	void Play(float startTime);// 0xc7d937c 0x78dc106fa0
	bool IsVirtualized();// 0xc7d8e94 0x78dc107080
	bool IsPlaying();// 0xc7d8ecc 0x78dc107160
	bool HasCookedFFTData();// 0xc7d8028 0x78dc107240
	bool HasCookedAmplitudeEnvelopeData();// 0xc7d7ff0 0x78dc107320
	enum GetPlayState();// 0xc7d8e60 0x78dc103a40
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0xc7d7d20 0x78dc103b20
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0xc7d7e78 0x78dc103c00
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0xc7d7b70 0x78dc103ce0
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0xc7d7c60 0x78dc103dc0
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0xc7d942c 0x78dc103ea0
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float startTime, const enum FadeCurve);// 0xc7d9570 0x78dc103f80
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0xc7d7a88 0x78dc104060
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0xc7d8d24 0x78dc104140
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0xc7d867c 0x78dc104220

--------------------------------
Class: AudioComponentParam
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x78dbee4000
	float FloatParam;//[Offset: 0x8, Size: 0x4] 0x78dbee4080
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78dbee4100
	int IntParam;//[Offset: 0x10, Size: 0x4] 0x78dbee4180
	SoundWave* SoundWaveParam;//[Offset: 0x18, Size: 0x8] 0x78dbee4200

--------------------------------
Class: QuartzClockHandle.Object
	void UnsubscribeFromTimeDivision(const Object* WorldContextObject, enum InQuantizationBoundary);// 0xbbdfdc0 0x78d7298900
	void UnsubscribeFromAllTimeDivisions(const Object* WorldContextObject);// 0xbbdfd18 0x78d72989e0
	void SubscribeToQuantizationEvent(const Object* WorldContextObject, enum InQuantizationBoundary, out const delegate OnQuantizationEvent);// 0xbbdffc4 0x78d7298ac0
	void SubscribeToAllQuantizationEvents(const Object* WorldContextObject, out const delegate OnQuantizationEvent);// 0xbbdfeb4 0x78d7298ba0
	void SetTicksPerSecond(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float TicksPerSecond);// 0xbbdf9a8 0x78d7298c80
	void SetThirtySecondNotesPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float ThirtySecondsNotesPerMinute);// 0xbbdf638 0x78d7298d60
	void SetSecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float SecondsPerTick);// 0xbbdf7f0 0x78d7298e40
	void SetMillisecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float MillisecondsPerTick);// 0xbbdfb60 0x78d7298f20
	void SetBeatsPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float BeatsPerMinute);// 0xbbdf480 0x78d7299000
	void ResumeClock(const Object* WorldContextObject);// 0xbbe0230 0x78d7295720
	void ResetTransport(const Object* WorldContextObject, out const delegate InDelegate);// 0xbbe0120 0x78d7295800
	void PauseClock(const Object* WorldContextObject);// 0xbbe02d8 0x78d72958e0
	float GetTicksPerSecond(const Object* WorldContextObject);// 0xbbdf320 0x78d72959c0
	float GetThirtySecondNotesPerMinute(const Object* WorldContextObject);// 0xbbdf1c0 0x78d7295aa0
	float GetSecondsPerTick(const Object* WorldContextObject);// 0xbbdf270 0x78d7295b80
	float GetMillisecondsPerTick(const Object* WorldContextObject);// 0xbbdf3d0 0x78d7295c60
	float GetBeatsPerMinute(const Object* WorldContextObject);// 0xbbdf110 0x78d7295d40

--------------------------------
Class: QuartzQuantizationBoundary
	enum Quantization;//[Offset: 0x0, Size: 0x1] 0x78dbf22220
	float Multiplier;//[Offset: 0x4, Size: 0x4] 0x78dbf3b980
	enum CountingReferencePoint;//[Offset: 0x8, Size: 0x1] 0x78dbf222c0

--------------------------------
Class: SoundWaveSpectralDataPerSound
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 0x10] 0x78dbf23260
	float PlaybackTime;//[Offset: 0x10, Size: 0x4] 0x78dbf69d00
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8] 0x78dbf69d80

--------------------------------
Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4] 0x78dbf69b00
	float Magnitude;//[Offset: 0x4, Size: 0x4] 0x78dbf69b80
	float NormalizedMagnitude;//[Offset: 0x8, Size: 0x4] 0x78dbf69c00

--------------------------------
Class: SoundWaveEnvelopeDataPerSound
	float Envelope;//[Offset: 0x0, Size: 0x4] 0x78dbf69e00
	float PlaybackTime;//[Offset: 0x4, Size: 0x4] 0x78dbf69e80
	SoundWave* SoundWave;//[Offset: 0x8, Size: 0x8] 0x78dbf69f00

--------------------------------
Class: AnimationSettings.DeveloperSettings.Object
	int CompressCommandletVersion;//[Offset: 0x38, Size: 0x4] 0x78d72d2380
	FString[] KeyEndEffectorsMatchNameArray;//[Offset: 0x40, Size: 0x10] 0x78d7276780
	bool ForceRecompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78d72d2480
	bool bForceBelowThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78d72d2500
	bool bFirstRecompressUsingCurrentOrDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x78d72d2580
	bool bRaiseMaxErrorToExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1] 0x78d72d2600
	bool bEnablePerformanceLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78d72d2680
	bool bStripAnimationDataOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x78d72d2700
	bool bTickAnimationOnSkeletalMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1] 0x78d72d2780
	CustomAttributeSetting[] BoneCustomAttributesNames;//[Offset: 0x58, Size: 0x10] 0x78d7276820
	FString[] BoneNamesWithCustomAttributes;//[Offset: 0x68, Size: 0x10] 0x78d72768c0
	<FName,enum> AttributeBlendModes;//[Offset: 0x78, Size: 0x50] 0x78d7105f80
	enum DefaultAttributeBlendMode;//[Offset: 0xc8, Size: 0x1] 0x78d7276a00

--------------------------------
Class: CustomAttributeSetting
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78dbf09e80
	FString Meaning;//[Offset: 0x10, Size: 0x10] 0x78dbf09f00

--------------------------------
Class: AnimBlueprint.Blueprint.BlueprintCore.Object
	Skeleton* TargetSkeleton;//[Offset: 0xa8, Size: 0x8] 0x78d72d2180
	AnimGroupInfo[] Groups;//[Offset: 0xb0, Size: 0x10] 0x78d7279020
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x78d72d2280
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x78d72d2300

--------------------------------
Class: AnimGroupInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbedad00
	LinearColor Color;//[Offset: 0x8, Size: 0x10] 0x78dbedad80

--------------------------------
Class: BlueprintGeneratedClass.Class.Struct.Field.Object
	int NumReplicatedProperties;//[Offset: 0x260, Size: 0x4] 0x78d728c580
	bool bHasNativizedParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1] 0x78d728c600
	bool bHasCookedComponentInstancingData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1] 0x78d728a580
	DynamicBlueprintBinding*[] DynamicBindingObjects;//[Offset: 0x268, Size: 0x10] 0x78d72727c0
	ActorComponent*[] ComponentTemplates;//[Offset: 0x278, Size: 0x10] 0x78d7272860
	TimelineTemplate*[] Timelines;//[Offset: 0x288, Size: 0x10] 0x78d7272900
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x298, Size: 0x10] 0x78d7270060
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x2a8, Size: 0x8] 0x78d728a800
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x2b0, Size: 0x8] 0x78d728a880
	StructProperty* UberGraphFramePointerProperty;//[Offset: 0x2b8, Size: 0x8] 0x78d728a900
	Function* UberGraphFunction;//[Offset: 0x2c8, Size: 0x8] 0x78d728a980
	<FName,BlueprintCookedComponentInstancingData> CookedComponentInstancingData;//[Offset: 0x2d0, Size: 0x50] 0x78d71061c0

--------------------------------
Class: DynamicBlueprintBinding.Object

--------------------------------
Class: AnimBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x360, Size: 0x10] 0x78d7278da0
	Skeleton* TargetSkeleton;//[Offset: 0x370, Size: 0x8] 0x78d72d3d00
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x378, Size: 0x10] 0x78d7278e40
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x388, Size: 0x50] 0x78d7105d40
	FName[] SyncGroupNames;//[Offset: 0x458, Size: 0x10] 0x78d7278ee0
	ExposedValueHandler[] EvaluateGraphExposedInputs;//[Offset: 0x468, Size: 0x10] 0x78d7278f80
	<FName,GraphAssetPlayerInformation> GraphAssetPlayerInformation;//[Offset: 0x478, Size: 0x50] 0x78d7105e00
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x4c8, Size: 0x50] 0x78d7105ec0
	PropertyAccessLibrary PropertyAccessLibrary;//[Offset: 0x518, Size: 0xc8] 0x78d72d4200

--------------------------------
Class: BakedAnimationStateMachine
	FName MachineName;//[Offset: 0x0, Size: 0x8] 0x78dbee1d00
	int InitialState;//[Offset: 0x8, Size: 0x4] 0x78dbee1d80
	BakedAnimationState[] States;//[Offset: 0x10, Size: 0x10] 0x78dbe5ce00
	AnimationTransitionBetweenStates[] Transitions;//[Offset: 0x20, Size: 0x10] 0x78dbe5a600

--------------------------------
Class: BakedAnimationState
	FName StateName;//[Offset: 0x0, Size: 0x8] 0x78dbee1e00
	BakedStateExitTransition[] Transitions;//[Offset: 0x8, Size: 0x10] 0x78dbe5cc20
	int StateRootNodeIndex;//[Offset: 0x18, Size: 0x4] 0x78dbee0100
	int StartNotify;//[Offset: 0x1c, Size: 0x4] 0x78dbee0180
	int EndNotify;//[Offset: 0x20, Size: 0x4] 0x78dbee0200
	int FullyBlendedNotify;//[Offset: 0x24, Size: 0x4] 0x78dbee0280
	bool bIsAConduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dbee0300
	int EntryRuleNodeIndex;//[Offset: 0x2c, Size: 0x4] 0x78dbee0380
	int[] PlayerNodeIndices;//[Offset: 0x30, Size: 0x10] 0x78dbe5ccc0
	int[] LayerNodeIndices;//[Offset: 0x40, Size: 0x10] 0x78dbe5cd60
	bool bAlwaysResetOnEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78dbee0500

--------------------------------
Class: BakedStateExitTransition
	int CanTakeDelegateIndex;//[Offset: 0x0, Size: 0x4] 0x78dbee1e80
	int CustomResultNodeIndex;//[Offset: 0x4, Size: 0x4] 0x78dbee1f00
	int TransitionIndex;//[Offset: 0x8, Size: 0x4] 0x78dbee1f80
	bool bDesiredTransitionReturnValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78dbee2000
	bool bAutomaticRemainingTimeRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x78dbee2080
	int[] PoseEvaluatorLinks;//[Offset: 0x10, Size: 0x10] 0x78dbe5cb80

--------------------------------
Class: AnimationTransitionBetweenStates.AnimationStateBase
	int PreviousState;//[Offset: 0x8, Size: 0x4] 0x78dbee0600
	int NextState;//[Offset: 0xc, Size: 0x4] 0x78dbee0680
	float CrossfadeDuration;//[Offset: 0x10, Size: 0x4] 0x78dbee0700
	int StartNotify;//[Offset: 0x14, Size: 0x4] 0x78dbee0780
	int EndNotify;//[Offset: 0x18, Size: 0x4] 0x78dbee0800
	int InterruptNotify;//[Offset: 0x1c, Size: 0x4] 0x78dbee0880
	enum BlendMode;//[Offset: 0x20, Size: 0x1] 0x78dbe5a560
	CurveFloat* CustomCurve;//[Offset: 0x28, Size: 0x8] 0x78dbee0980
	BlendProfile* BlendProfile;//[Offset: 0x30, Size: 0x8] 0x78dbee0a00
	byte LogicType;//[Offset: 0x38, Size: 0x1] 0x78dbee0a80

--------------------------------
Class: AnimationStateBase
	FName StateName;//[Offset: 0x0, Size: 0x8] 0x78dbee0b00

--------------------------------
Class: CachedPoseIndices
	int[] OrderedSavedPoseNodeIndices;//[Offset: 0x0, Size: 0x10] 0x78dbe593e0

--------------------------------
Class: ExposedValueHandler
	FName BoundFunction;//[Offset: 0x0, Size: 0x8] 0x78dbede780
	ExposedValueCopyRecord[] CopyRecords;//[Offset: 0x8, Size: 0x10] 0x78dbe5b1e0
	Function* Function;//[Offset: 0x18, Size: 0x8] 0x78dbede980
	FieldPathProperty ValueHandlerNodeProperty;//[Size: 0x20] 0x78dbedea00

--------------------------------
Class: ExposedValueCopyRecord
	int CopyIndex;//[Offset: 0x0, Size: 0x4] 0x78dbede800
	enum PostCopyOperation;//[Offset: 0x4, Size: 0x1] 0x78dbe5b140

--------------------------------
Class: GraphAssetPlayerInformation
	int[] PlayerNodeIndices;//[Offset: 0x0, Size: 0x10] 0x78dbe59480

--------------------------------
Class: AnimGraphBlendOptions
	float BlendInTime;//[Offset: 0x0, Size: 0x4] 0x78dbedaa80
	float BlendOutTime;//[Offset: 0x4, Size: 0x4] 0x78dbedab00

--------------------------------
Class: PropertyAccessLibrary
	PropertyAccessSegment[] PathSegments;//[Offset: 0x0, Size: 0x10] 0x78dbe57e00
	PropertyAccessPath[] SrcPaths;//[Offset: 0x10, Size: 0x10] 0x78dbe57ea0
	PropertyAccessPath[] DestPaths;//[Offset: 0x20, Size: 0x10] 0x78dbe57f40
	PropertyAccessCopyBatch CopyBatches;//[Offset: 0x30, Size: 0x10] 0x78dbed3a80
	PropertyAccessIndirectionChain[] SrcAccesses;//[Offset: 0x70, Size: 0x10] 0x78dbe58120
	PropertyAccessIndirectionChain[] DestAccesses;//[Offset: 0x80, Size: 0x10] 0x78dbe581c0
	PropertyAccessIndirection[] Indirections;//[Offset: 0x90, Size: 0x10] 0x78dbe583a0
	int[] EventAccessIndices;//[Offset: 0xa0, Size: 0x10] 0x78dbe58440

--------------------------------
Class: PropertyAccessSegment
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbed3200
	Struct* Struct;//[Offset: 0x8, Size: 0x8] 0x78dbed3280
	FieldPathProperty Property;//[Size: 0x20] 0x78dbed3300
	Function* Function;//[Offset: 0x30, Size: 0x8] 0x78dbed3380
	int ArrayIndex;//[Offset: 0x38, Size: 0x4] 0x78dbed3400
	uint16 Flags;//[Offset: 0x3c, Size: 0x2] 0x78dbed3480

--------------------------------
Class: PropertyAccessPath
	int PathSegmentStartIndex;//[Offset: 0x0, Size: 0x4] 0x78dbed3600
	int PathSegmentCount;//[Offset: 0x4, Size: 0x4] 0x78dbed3680
	bool bHasEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78dbed3700

--------------------------------
Class: PropertyAccessCopyBatch
	PropertyAccessCopy[] Copies;//[Offset: 0x0, Size: 0x10] 0x78dbe58080

--------------------------------
Class: PropertyAccessCopy
	int AccessIndex;//[Offset: 0x0, Size: 0x4] 0x78dbed3800
	int DestAccessStartIndex;//[Offset: 0x4, Size: 0x4] 0x78dbed3880
	int DestAccessEndIndex;//[Offset: 0x8, Size: 0x4] 0x78dbed3900
	enum Type;//[Offset: 0xc, Size: 0x1] 0x78dbe57fe0

--------------------------------
Class: PropertyAccessIndirectionChain
	FieldPathProperty Property;//[Size: 0x20] 0x78dbed3b80
	int IndirectionStartIndex;//[Offset: 0x20, Size: 0x4] 0x78dbed3c00
	int IndirectionEndIndex;//[Offset: 0x24, Size: 0x4] 0x78dbed3c80
	int EventId;//[Offset: 0x28, Size: 0x4] 0x78dbed3d00

--------------------------------
Class: PropertyAccessIndirection
	FieldPathProperty ArrayProperty;//[Size: 0x20] 0x78dbed3e00
	Function* Function;//[Offset: 0x20, Size: 0x8] 0x78dbed3e80
	int ReturnBufferSize;//[Offset: 0x28, Size: 0x4] 0x78dbed3f00
	int ReturnBufferAlignment;//[Offset: 0x2c, Size: 0x4] 0x78dbed3f80
	int ArrayIndex;//[Offset: 0x30, Size: 0x4] 0x78dbed4000
	uint32 Offset;//[Offset: 0x34, Size: 0x4] 0x78dbed4080
	enum ObjectType;//[Offset: 0x38, Size: 0x1] 0x78dbe58260
	enum Type;//[Offset: 0x39, Size: 0x1] 0x78dbe58300

--------------------------------
Class: AnimClassData.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x30, Size: 0x10] 0x78d72784e0
	Skeleton* TargetSkeleton;//[Offset: 0x40, Size: 0x8] 0x78d72d5280
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x48, Size: 0x10] 0x78d7278580
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x58, Size: 0x50] 0x78d7105b00
	AnimBlueprintFunction[] AnimBlueprintFunctions;//[Offset: 0xa8, Size: 0x10] 0x78d7278620
	AnimBlueprintFunctionData[] AnimBlueprintFunctionData;//[Offset: 0xb8, Size: 0x10] 0x78d72786c0
	AnimNodeProperties(FieldPathProperty)[] AnimNodeProperties;//[Offset: 0xc8, Size: 0x10] 0x78d7278760
	LinkedAnimGraphNodeProperties(FieldPathProperty)[] LinkedAnimGraphNodeProperties;//[Offset: 0xe8, Size: 0x10] 0x78d7278800
	LinkedAnimLayerNodeProperties(FieldPathProperty)[] LinkedAnimLayerNodeProperties;//[Offset: 0x108, Size: 0x10] 0x78d72788a0
	PreUpdateNodeProperties(FieldPathProperty)[] PreUpdateNodeProperties;//[Offset: 0x128, Size: 0x10] 0x78d7278940
	DynamicResetNodeProperties(FieldPathProperty)[] DynamicResetNodeProperties;//[Offset: 0x148, Size: 0x10] 0x78d72789e0
	StateMachineNodeProperties(FieldPathProperty)[] StateMachineNodeProperties;//[Offset: 0x168, Size: 0x10] 0x78d7278a80
	InitializationNodeProperties(FieldPathProperty)[] InitializationNodeProperties;//[Offset: 0x188, Size: 0x10] 0x78d7278b20
	<FName,GraphAssetPlayerInformation> GraphNameAssetPlayers;//[Offset: 0x1a8, Size: 0x50] 0x78d7105bc0
	FName[] SyncGroupNames;//[Offset: 0x1f8, Size: 0x10] 0x78d7278bc0
	ExposedValueHandler[] EvaluateGraphExposedInputs;//[Offset: 0x208, Size: 0x10] 0x78d7278c60
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x218, Size: 0x50] 0x78d7105c80
	PropertyAccessLibrary PropertyAccessLibrary;//[Offset: 0x268, Size: 0xc8] 0x78d72d3b00

--------------------------------
Class: AnimBlueprintFunction
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbeda680
	FName Group;//[Offset: 0x8, Size: 0x8] 0x78dbeda700
	int OutputPoseNodeIndex;//[Offset: 0x10, Size: 0x4] 0x78dbeda780
	FName[] InputPoseNames;//[Offset: 0x18, Size: 0x10] 0x78dbe592a0
	int[] InputPoseNodeIndices;//[Offset: 0x28, Size: 0x10] 0x78dbe59340
	bool bImplemented;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78dbeda900

--------------------------------
Class: AnimBlueprintFunctionData
	FieldPathProperty OutputPoseNodeProperty;//[Size: 0x20] 0x78dbedab80
	InputPoseNodeProperties(FieldPathProperty)[] InputPoseNodeProperties;//[Offset: 0x20, Size: 0x10] 0x78dbe59520
	InputProperties(FieldPathProperty)[] InputProperties;//[Offset: 0x30, Size: 0x10] 0x78dbe595c0

--------------------------------
Class: AnimClassInterface.Interface.Object

--------------------------------
Class: AnimComposite.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AnimTrack AnimationTrack;//[Offset: 0xb0, Size: 0x10] 0x78d72d4f00

--------------------------------
Class: AnimCompress.AnimBoneCompressionCodec.Object
	bool bNeedsSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78d72d4d00
	byte TranslationCompressionFormat;//[Offset: 0x39, Size: 0x1] 0x78d72d4d80
	byte RotationCompressionFormat;//[Offset: 0x3a, Size: 0x1] 0x78d72d4e00
	byte ScaleCompressionFormat;//[Offset: 0x3b, Size: 0x1] 0x78d72d4e80

--------------------------------
Class: AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimCompress_LeastDestructive.AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4] 0x78d72d4880
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4] 0x78d72d4900
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4] 0x78d72d4980
	float MaxEffectorDiff;//[Offset: 0x48, Size: 0x4] 0x78d72d4a00
	float MinEffectorDiff;//[Offset: 0x4c, Size: 0x4] 0x78d72d4a80
	float EffectorDiffSocket;//[Offset: 0x50, Size: 0x4] 0x78d72d4b00
	float ParentKeyScale;//[Offset: 0x54, Size: 0x4] 0x78d72d4b80
	bool bRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78d72d4c00
	bool bActuallyFilterLinearKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x78d72d4c80

--------------------------------
Class: AnimCompress_PerTrackCompression.AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxZeroingThreshold;//[Offset: 0x5c, Size: 0x4] 0x78d72d5f00
	float MaxPosDiffBitwise;//[Offset: 0x60, Size: 0x4] 0x78d72d5f80
	float MaxAngleDiffBitwise;//[Offset: 0x64, Size: 0x4] 0x78d72d6000
	float MaxScaleDiffBitwise;//[Offset: 0x68, Size: 0x4] 0x78d72d6080
	byte[] AllowedRotationFormats;//[Offset: 0x70, Size: 0x10] 0x78d7278260
	byte[] AllowedTranslationFormats;//[Offset: 0x80, Size: 0x10] 0x78d7278300
	byte[] AllowedScaleFormats;//[Offset: 0x90, Size: 0x10] 0x78d72783a0
	bool bResampleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78d72d6280
	float ResampledFramerate;//[Offset: 0xa4, Size: 0x4] 0x78d72d6300
	int MinKeysForResampling;//[Offset: 0xa8, Size: 0x4] 0x78d72d4280
	bool bUseAdaptiveError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x78d72d4300
	bool bUseOverrideForEndEffectors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x78d72d4380
	int TrackHeightBias;//[Offset: 0xb0, Size: 0x4] 0x78d72d4400
	float ParentingDivisor;//[Offset: 0xb4, Size: 0x4] 0x78d72d4480
	float ParentingDivisorExponent;//[Offset: 0xb8, Size: 0x4] 0x78d72d4500
	bool bUseAdaptiveError2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1] 0x78d72d4580
	float RotationErrorSourceRatio;//[Offset: 0xc0, Size: 0x4] 0x78d72d4600
	float TranslationErrorSourceRatio;//[Offset: 0xc4, Size: 0x4] 0x78d72d4680
	float ScaleErrorSourceRatio;//[Offset: 0xc8, Size: 0x4] 0x78d72d4700
	float MaxErrorPerTrackRatio;//[Offset: 0xcc, Size: 0x4] 0x78d72d4780
	float PerturbationProbeSize;//[Offset: 0xd0, Size: 0x4] 0x78d72d4800

--------------------------------
Class: AnimCompress_RemoveEverySecondKey.AnimCompress.AnimBoneCompressionCodec.Object
	int MinKeys;//[Offset: 0x3c, Size: 0x4] 0x78d72d5e00
	bool bStartAtSecondKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78d72d5e80

--------------------------------
Class: AnimCompress_RemoveTrivialKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4] 0x78d72d5c80
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4] 0x78d72d5d00
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4] 0x78d72d5d80

--------------------------------
Class: AnimCurveCompressionCodec_CompressedRichCurve.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_UniformIndexable.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_UniformlySampled.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimLayerInterface.Interface.Object

--------------------------------
Class: AnimNotify_PauseClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_PlayParticleEffect.AnimNotify.Object
	ParticleSystem* PSTemplate;//[Offset: 0x38, Size: 0x8] 0x78d72d7000
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc] 0x78d72d7080
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc] 0x78d72d7100
	Vector Scale;//[Offset: 0x58, Size: 0xc] 0x78d72d7180
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78d72d7200
	FName SocketName;//[Offset: 0x84, Size: 0x8] 0x78d72d7280

--------------------------------
Class: AnimNotify_PlaySound.AnimNotify.Object
	SoundBase* Sound;//[Offset: 0x38, Size: 0x8] 0x78d72d6d80
	float VolumeMultiplier;//[Offset: 0x40, Size: 0x4] 0x78d72d6e00
	float PitchMultiplier;//[Offset: 0x44, Size: 0x4] 0x78d72d6e80
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78d72d6f00
	FName AttachName;//[Offset: 0x4c, Size: 0x8] 0x78d72d6f80

--------------------------------
Class: AnimNotify_ResetClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResetDynamics.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResumeClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotifyState_DisableRootMotion.AnimNotifyState.Object

--------------------------------
Class: AnimNotifyState_TimedParticleEffect.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8] 0x78dc14e880
	FName SocketName;//[Offset: 0x38, Size: 0x8] 0x78dc14e900
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc] 0x78dc14e980
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc] 0x78dc14ea00
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78dc14ea80

--------------------------------
Class: AnimNotifyState_Trail.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8] 0x78d72d6900
	FName FirstSocketName;//[Offset: 0x38, Size: 0x8] 0x78d72d6980
	FName SecondSocketName;//[Offset: 0x40, Size: 0x8] 0x78d72d6a00
	byte WidthScaleMode;//[Offset: 0x48, Size: 0x1] 0x78d72d6a80
	FName WidthScaleCurve;//[Offset: 0x4c, Size: 0x8] 0x78d72d6b00
	bool bRecycleSpawnedSystems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78d72d6b80
	ParticleSystem* OverridePSTemplate(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xaa7cd18 0x78d72cc720

--------------------------------
Class: AnimSet.Object
	bool bAnimRotationOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78d72d7d00
	FName[] TrackBoneNames;//[Offset: 0x30, Size: 0x10] 0x78d727a240
	AnimSetMeshLinkup[] LinkupCache;//[Offset: 0x40, Size: 0x10] 0x78d727a2e0
	byte[] BoneUseAnimTranslation;//[Offset: 0x50, Size: 0x10] 0x78d727a380
	byte[] ForceUseMeshTranslation;//[Offset: 0x60, Size: 0x10] 0x78d727a420
	FName[] UseTranslationBoneNames;//[Offset: 0x70, Size: 0x10] 0x78d727a4c0
	FName[] ForceMeshTranslationBoneNames;//[Offset: 0x80, Size: 0x10] 0x78d7277c20
	FName PreviewSkelMeshName;//[Offset: 0x90, Size: 0x8] 0x78d72d8080
	FName BestRatioSkelMeshName;//[Offset: 0x98, Size: 0x8] 0x78d72d8100

--------------------------------
Class: AnimSetMeshLinkup
	int[] BoneToTrackTable;//[Offset: 0x0, Size: 0x10] 0x78dbe5a6a0

--------------------------------
Class: AnimSingleNodeInstance.AnimInstance.Object
	AnimationAsset* CurrentAsset;//[Offset: 0x2b8, Size: 0x8] 0x78d72d9280
	delegate PostEvaluateAnimEvent;//[Offset: 0x2c0, Size: 0x10] 0x78d72d9300
	void StopAnim();// 0xc7c6c90 0x78d72cbbc0
	void SetReverse(bool bInReverse);// 0xc7c71b0 0x78d72cbca0
	void SetPreviewCurveOverride(out const FName PoseName, float Value, bool bRemoveIfZero);// 0xc7c69c4 0x78d72cbd80
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);// 0xc7c6f70 0x78d72cbe60
	void SetPosition(float InPosition, bool bFireNotifies);// 0xc7c70b4 0x78d72cbf40
	void SetPlayRate(float InPlayRate);// 0xc7c7260 0x78d72cc020
	void SetPlaying(bool bIsPlaying);// 0xc7c6e10 0x78d72cc100
	void SetLooping(bool bIsLooping);// 0xc7c7308 0x78d72cc1e0
	void SetBlendSpaceInput(out const Vector InBlendInput);// 0xc7c6ec0 0x78d72cc2c0
	void SetAnimationAsset(AnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);// 0xc7c6b4c 0x78d72cc3a0
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);// 0xc7c6ca4 0x78d72cc480
	float GetLength();// 0xc7c6ddc 0x78d72cc560
	AnimationAsset* GetAnimationAsset();// 0xc7c6b10 0x78d72cc640

--------------------------------
Class: AnimStateMachineTypes.Object

--------------------------------
Class: AnimStreamable.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xb0, Size: 0x4] 0x78d72d8e00
	enum Interpolation;//[Offset: 0xb4, Size: 0x1] 0x78d727a1a0
	FName RetargetSource;//[Offset: 0xb8, Size: 0x8] 0x78d72d8f00
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8] 0x78d72d8f80
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8] 0x78d72d9000
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x78d72d9080
	byte RootMotionRootLock;//[Offset: 0xe1, Size: 0x1] 0x78d72d9100
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1] 0x78d72d9180
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3, Size: 0x1] 0x78d72d9200

--------------------------------
Class: ApplicationLifecycleComponent.ActorComponent.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0xb8, Size: 0x10] 0x78d3562580
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0xc8, Size: 0x10] 0x78d3562600
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0xd8, Size: 0x10] 0x78d3562680
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0xe8, Size: 0x10] 0x78d3562700
	delegate ApplicationWillTerminateDelegate;//[Offset: 0xf8, Size: 0x10] 0x78d3562780
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x108, Size: 0x10] 0x78d3562800
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x118, Size: 0x10] 0x78d3562900
	delegate OnTemperatureChangeDelegate;//[Offset: 0x128, Size: 0x10] 0x78d3562a00
	delegate OnLowPowerModeDelegate;//[Offset: 0x138, Size: 0x10] 0x78d3562b00

--------------------------------
Class: PhysicsSettingsCore.DeveloperSettings.Object
	float DefaultGravityZ;//[Offset: 0x38, Size: 0x4] 0x78d71f6a00
	float DefaultTerminalVelocity;//[Offset: 0x3c, Size: 0x4] 0x78d71f6a80
	float DefaultFluidFriction;//[Offset: 0x40, Size: 0x4] 0x78d71f6b00
	int SimulateScratchMemorySize;//[Offset: 0x44, Size: 0x4] 0x78d71f6b80
	int RagdollAggregateThreshold;//[Offset: 0x48, Size: 0x4] 0x78d71f6c00
	float TriangleMeshTriangleMinAreaThreshold;//[Offset: 0x4c, Size: 0x4] 0x78d71f6c80
	bool bEnableShapeSharing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78d71f6d00
	bool bEnablePCM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78d71f6d80
	bool bEnableStabilization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x78d71f6e00
	bool bWarnMissingLocks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1] 0x78d71f6e80
	bool bEnable2DPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78d71f6f00
	bool bDefaultHasComplexCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x78d71f6f80
	float BounceThresholdVelocity;//[Offset: 0x58, Size: 0x4] 0x78d71f7000
	byte FrictionCombineMode;//[Offset: 0x5c, Size: 0x1] 0x78d71f7080
	byte RestitutionCombineMode;//[Offset: 0x5d, Size: 0x1] 0x78d71f7100
	float MaxAngularVelocity;//[Offset: 0x60, Size: 0x4] 0x78d71f7180
	float MaxDepenetrationVelocity;//[Offset: 0x64, Size: 0x4] 0x78d71f7200
	float ContactOffsetMultiplier;//[Offset: 0x68, Size: 0x4] 0x78d71f7280
	float MinContactOffset;//[Offset: 0x6c, Size: 0x4] 0x78d71f7300
	float MaxContactOffset;//[Offset: 0x70, Size: 0x4] 0x78d71f7380
	bool bSimulateSkeletalMeshOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78d71f5300
	byte DefaultShapeComplexity;//[Offset: 0x75, Size: 0x1] 0x78d71f5380
	ChaosSolverConfiguration SolverOptions;//[Offset: 0x78, Size: 0x68] 0x78d71f5400

--------------------------------
Class: ChaosSolverConfiguration
	int Iterations;//[Offset: 0x0, Size: 0x4] 0x78dbe47080
	int CollisionPairIterations;//[Offset: 0x4, Size: 0x4] 0x78dbe47100
	int PushOutIterations;//[Offset: 0x8, Size: 0x4] 0x78dbe47180
	int CollisionPushOutPairIterations;//[Offset: 0xc, Size: 0x4] 0x78dbe47200
	float CollisionMarginFraction;//[Offset: 0x10, Size: 0x4] 0x78dbe47280
	float CollisionMarginMax;//[Offset: 0x14, Size: 0x4] 0x78dbe47300
	float CollisionCullDistance;//[Offset: 0x18, Size: 0x4] 0x78dbe47380
	int JointPairIterations;//[Offset: 0x1c, Size: 0x4] 0x78dbe45300
	int JointPushOutPairIterations;//[Offset: 0x20, Size: 0x4] 0x78dbe45380
	float ClusterConnectionFactor;//[Offset: 0x24, Size: 0x4] 0x78dbe45400
	enum ClusterUnionConnectionType;//[Offset: 0x28, Size: 0x1] 0x78dbe51460
	bool bGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78dbe45500
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x2c, Size: 0x10] 0x78dbe45780
	bool bGenerateBreakData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78dbe45800
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x40, Size: 0x10] 0x78dbe45a80
	bool bGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78dbe45b00
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x54, Size: 0x10] 0x78dbe45d80
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78dbe45e00

--------------------------------
Class: SolverCollisionFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe45580
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x78dbe45600
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x78dbe45680
	float MinImpulse;//[Offset: 0xc, Size: 0x4] 0x78dbe45700

--------------------------------
Class: SolverBreakingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe45880
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x78dbe45900
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x78dbe45980
	float MinVolume;//[Offset: 0xc, Size: 0x4] 0x78dbe45a00

--------------------------------
Class: SolverTrailingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe45b80
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x78dbe45c00
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x78dbe45c80
	float MinVolume;//[Offset: 0xc, Size: 0x4] 0x78dbe45d00

--------------------------------
Class: PhysicsSettings.PhysicsSettingsCore.DeveloperSettings.Object
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0xe0, Size: 0x34] 0x78d7446180
	byte LockedAxis;//[Offset: 0x114, Size: 0x1] 0x78d7446200
	byte DefaultDegreesOfFreedom;//[Offset: 0x115, Size: 0x1] 0x78d7446280
	bool bSuppressFaceRemapTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116, Size: 0x1] 0x78d7446300
	bool bSupportUVFromHitResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117, Size: 0x1] 0x78d7444280
	bool bDisableActiveActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x78d7444300
	bool bDisableKinematicStaticPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78d7444380
	bool bDisableKinematicKinematicPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x78d7444400
	bool bDisableCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1] 0x78d7444480
	bool bEnableEnhancedDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1] 0x78d7444500
	float AnimPhysicsMinDeltaTime;//[Offset: 0x120, Size: 0x4] 0x78d7444580
	bool bSimulateAnimPhysicsAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1] 0x78d7444600
	float MaxPhysicsDeltaTime;//[Offset: 0x128, Size: 0x4] 0x78d7444680
	bool bSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1] 0x78d7444700
	bool bSubsteppingAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1] 0x78d7444780
	float MaxSubstepDeltaTime;//[Offset: 0x130, Size: 0x4] 0x78d7444800
	int MaxSubsteps;//[Offset: 0x134, Size: 0x4] 0x78d7444880
	float SyncSceneSmoothingFactor;//[Offset: 0x138, Size: 0x4] 0x78d7444900
	float InitialAverageFrameRate;//[Offset: 0x13c, Size: 0x4] 0x78d7444980
	int PhysXTreeRebuildRate;//[Offset: 0x140, Size: 0x4] 0x78d7444a00
	PhysicalSurfaceName[] PhysicalSurfaces;//[Offset: 0x148, Size: 0x10] 0x78d73395c0
	BroadphaseSettings DefaultBroadphaseSettings;//[Offset: 0x158, Size: 0x40] 0x78d7444b00
	float MinDeltaVelocityForHitEvents;//[Offset: 0x198, Size: 0x4] 0x78d7444b80
	ChaosPhysicsSettings ChaosSettings;//[Offset: 0x19c, Size: 0x3] 0x78d7444c00

--------------------------------
Class: RigidBodyErrorCorrection
	float PingExtrapolation;//[Offset: 0x0, Size: 0x4] 0x78dbf11280
	float PingLimit;//[Offset: 0x4, Size: 0x4] 0x78dbf11300
	float ErrorPerLinearDifference;//[Offset: 0x8, Size: 0x4] 0x78dbf11380
	float ErrorPerAngularDifference;//[Offset: 0xc, Size: 0x4] 0x78dbf11400
	float MaxRestoredStateError;//[Offset: 0x10, Size: 0x4] 0x78dbf11480
	float MaxLinearHardSnapDistance;//[Offset: 0x14, Size: 0x4] 0x78dbf11500
	float PositionLerp;//[Offset: 0x18, Size: 0x4] 0x78dbf11580
	float AngleLerp;//[Offset: 0x1c, Size: 0x4] 0x78dbf11600
	float LinearVelocityCoefficient;//[Offset: 0x20, Size: 0x4] 0x78dbf11680
	float AngularVelocityCoefficient;//[Offset: 0x24, Size: 0x4] 0x78dbf11700
	float ErrorAccumulationSeconds;//[Offset: 0x28, Size: 0x4] 0x78dbf11780
	float ErrorAccumulationDistanceSq;//[Offset: 0x2c, Size: 0x4] 0x78dbf11800
	float ErrorAccumulationSimilarity;//[Offset: 0x30, Size: 0x4] 0x78dbf11880

--------------------------------
Class: PhysicalSurfaceName
	byte Type;//[Offset: 0x0, Size: 0x1] 0x78dbf39d00
	FName Name;//[Offset: 0x4, Size: 0x8] 0x78dbf39d80

--------------------------------
Class: ChaosPhysicsSettings
	enum DefaultThreadingModel;//[Offset: 0x0, Size: 0x1] 0x78dbf20100
	enum DedicatedThreadTickMode;//[Offset: 0x1, Size: 0x1] 0x78dbf201a0
	enum DedicatedThreadBufferMode;//[Offset: 0x2, Size: 0x1] 0x78dbf20240

--------------------------------
Class: CollisionProfile.DeveloperSettings.Object
	CollisionResponseTemplate[] Profiles;//[Offset: 0x38, Size: 0x10] 0x78d727dc60
	CustomChannelSetup[] DefaultChannelResponses;//[Offset: 0x48, Size: 0x10] 0x78d727dd00
	CustomProfile[] EditProfiles;//[Offset: 0x58, Size: 0x10] 0x78d727dda0
	Redirector[] ProfileRedirects;//[Offset: 0x68, Size: 0x10] 0x78d727de40
	Redirector[] CollisionChannelRedirects;//[Offset: 0x78, Size: 0x10] 0x78d727dee0

--------------------------------
Class: CollisionResponseTemplate
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbf07100
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1] 0x78dbf07180
	bool bCanModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x78dbf07200
	FName ObjectTypeName;//[Offset: 0x2c, Size: 0x8] 0x78dbf07280
	ResponseChannel[] CustomResponses;//[Offset: 0x38, Size: 0x10] 0x78dbe5d8a0

--------------------------------
Class: CustomChannelSetup
	byte Channel;//[Offset: 0x0, Size: 0x1] 0x78dbf07380
	byte DefaultResponse;//[Offset: 0x1, Size: 0x1] 0x78dbf05300
	bool bTraceType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78dbf05380
	bool bStaticObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78dbf05400
	FName Name;//[Offset: 0x4, Size: 0x8] 0x78dbf05480

--------------------------------
Class: CustomProfile
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbf05500
	ResponseChannel[] CustomResponses;//[Offset: 0x8, Size: 0x10] 0x78dbe5d940

--------------------------------
Class: Redirector
	FName OldName;//[Offset: 0x0, Size: 0x8] 0x78dbf0e480
	FName NewName;//[Offset: 0x8, Size: 0x8] 0x78dbf0e500

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x470, Size: 0x4] 0x78d72d8a80
	float ArrowSize;//[Offset: 0x474, Size: 0x4] 0x78d72d8b00
	float ArrowLength;//[Offset: 0x478, Size: 0x4] 0x78d72d8b80
	float ScreenSize;//[Offset: 0x47c, Size: 0x4] 0x78d72d8c00
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x480, Size: 0x1] 0x78d72d8c80
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x480, Size: 0x1] 0x78d72d8d00
	void SetArrowColor(LinearColor NewColor);// 0xc7cd16c 0x78d72cbae0

--------------------------------
Class: AssetExportTask.Object
	Object* Object;//[Offset: 0x28, Size: 0x8] 0x78d72d8480
	Exporter* Exporter;//[Offset: 0x30, Size: 0x8] 0x78d72d8500
	FString Filename;//[Offset: 0x38, Size: 0x10] 0x78d72d8580
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78d72d8600
	bool bReplaceIdentical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x78d72d8680
	bool bPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x78d72d8700
	bool bAutomated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1] 0x78d72d8780
	bool bUseFileArchive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78d72d8800
	bool bWriteEmptyFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x78d72d8880
	Object*[] IgnoreObjectList;//[Offset: 0x50, Size: 0x10] 0x78d727a060
	Object* Options;//[Offset: 0x60, Size: 0x8] 0x78d72d8980
	FString[] Errors;//[Offset: 0x68, Size: 0x10] 0x78d727a100

--------------------------------
Class: Exporter.Object
	class Object* SupportedClass;//[Offset: 0x28, Size: 0x8] 0x78d73311e0
	Object* ExportRootScope;//[Offset: 0x30, Size: 0x8] 0x78d7341a00
	FString[] FormatExtension;//[Offset: 0x38, Size: 0x10] 0x78d7331280
	FString[] FormatDescription;//[Offset: 0x48, Size: 0x10] 0x78d7331320
	int PreferredFormatIndex;//[Offset: 0x58, Size: 0x4] 0x78d7341b80
	int TextIndent;//[Offset: 0x5c, Size: 0x4] 0x78d7341c00
	bool bText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78d7341c80
	bool bSelectedOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x78d7341d00
	bool bForceFileOperations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x78d7341d80
	AssetExportTask* ExportTask;//[Offset: 0x68, Size: 0x8] 0x78d7341e00
	bool ScriptRunAssetExportTask(AssetExportTask* Task);// 0xaa7cd18 0x78d7322e00
	static bool RunAssetExportTasks(out const AssetExportTask*[] ExportTasks);// 0xc8524c8 0x78d7322ee0
	static bool RunAssetExportTask(AssetExportTask* Task);// 0xc8525b0 0x78d7322fc0

--------------------------------
Class: AssetImportData.Object

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x2c0, Size: 0x10] 0x78d7279fc0
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1] 0x78d72d9f00
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1] 0x78d72d9f80
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1] 0x78d72da000
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1] 0x78d72da080
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1] 0x78d72da100
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1] 0x78d72da180
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 0x1] 0x78d72da200
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 0x1] 0x78d72da280
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1] 0x78d72da300
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1] 0x78d72da380
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1] 0x78d72da400
	bool bHasCompletedInitialScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 0x1] 0x78d72da480
	int NumberOfSpawnedNotifications;//[Offset: 0x2dc, Size: 0x4] 0x78d72da500

--------------------------------
Class: AssetManagerSettings.DeveloperSettings.Object
	PrimaryAssetTypeInfo[] PrimaryAssetTypesToScan;//[Offset: 0x38, Size: 0x10] 0x78d7279ac0
	DirectoryPath[] DirectoriesToExclude;//[Offset: 0x48, Size: 0x10] 0x78d7279b60
	PrimaryAssetRulesOverride[] PrimaryAssetRules;//[Offset: 0x58, Size: 0x10] 0x78d7279c00
	PrimaryAssetRulesCustomOverride[] CustomPrimaryAssetRules;//[Offset: 0x68, Size: 0x10] 0x78d7279ca0
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78d72d9a80
	bool bShouldManagerDetermineTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x78d72d9b00
	bool bShouldGuessTypeAndNameInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x78d72d9b80
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1] 0x78d72d9c00
	AssetManagerRedirect[] PrimaryAssetIdRedirects;//[Offset: 0x80, Size: 0x10] 0x78d7279d40
	AssetManagerRedirect[] PrimaryAssetTypeRedirects;//[Offset: 0x90, Size: 0x10] 0x78d7279de0
	AssetManagerRedirect[] AssetPathRedirects;//[Offset: 0xa0, Size: 0x10] 0x78d7279e80
	<FName> MetaDataTagsForAssetRegistry;//[Offset: 0xb0, Size: 0x50] 0x78d7279f20

--------------------------------
Class: PrimaryAssetTypeInfo
	FName PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x78dbee2c00
	class Object* AssetBaseClass;//[Offset: 0x8, Size: 0x28] 0x78dbe5c5e0
	class Object* AssetBaseClassLoaded;//[Offset: 0x30, Size: 0x8] 0x78dbe5c680
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78dbee2c80
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x78dbee2d00
	DirectoryPath[] Directories;//[Offset: 0x40, Size: 0x10] 0x78dbe5c720
	SoftObjectPath[] SpecificAssets;//[Offset: 0x50, Size: 0x10] 0x78dbe5c7c0
	PrimaryAssetRules Rules;//[Offset: 0x60, Size: 0xc] 0x78dbee2e80
	FString[] AssetScanPaths;//[Offset: 0x70, Size: 0x10] 0x78dbe5c860
	bool bIsDynamicAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x78dbee2f80
	int NumberOfAssets;//[Offset: 0x84, Size: 0x4] 0x78dbee3000

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10] 0x78dbed8f00

--------------------------------
Class: PrimaryAssetRules
	int Priority;//[Offset: 0x0, Size: 0x4] 0x78dbee1300
	int ChunkId;//[Offset: 0x4, Size: 0x4] 0x78dbee1380
	bool bApplyRecursively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78dbee1400
	enum CookRule;//[Offset: 0x9, Size: 0x1] 0x78dbe5c900

--------------------------------
Class: PrimaryAssetRulesOverride
	PrimaryAssetId PrimaryAssetId;//[Offset: 0x0, Size: 0x10] 0x78dbee3180
	PrimaryAssetRules Rules;//[Offset: 0x10, Size: 0xc] 0x78dbee1100

--------------------------------
Class: PrimaryAssetId
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x78e6834580
	FName PrimaryAssetName;//[Offset: 0x8, Size: 0x8] 0x78e6834600

--------------------------------
Class: PrimaryAssetType
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78e6834680

--------------------------------
Class: PrimaryAssetRulesCustomOverride
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x78dbee1180
	DirectoryPath FilterDirectory;//[Offset: 0x8, Size: 0x10] 0x78dbee1200
	FString FilterString;//[Offset: 0x18, Size: 0x10] 0x78dbee1280
	PrimaryAssetRules Rules;//[Offset: 0x28, Size: 0xc] 0x78dbee1500

--------------------------------
Class: AssetManagerRedirect
	FString Old;//[Offset: 0x0, Size: 0x10] 0x78dbee3080
	FString New;//[Offset: 0x10, Size: 0x10] 0x78dbee3100

--------------------------------
Class: AssetMappingTable.Object
	AssetMapping[] MappedAssets;//[Offset: 0x28, Size: 0x10] 0x78d7279a20

--------------------------------
Class: AssetMapping
	AnimationAsset* SourceAsset;//[Offset: 0x0, Size: 0x8] 0x78dbee2b00
	AnimationAsset* TargetAsset;//[Offset: 0x8, Size: 0x8] 0x78dbee2b80

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0xc7e6ecc 0x78d36006a0

--------------------------------
Class: AsyncActionHandleSaveGame.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x30, Size: 0x10] 0x78d72db380
	SaveGame* SaveGameObject;//[Offset: 0x60, Size: 0x8] 0x78d72db400
	static AsyncActionHandleSaveGame* AsyncSaveGameToSlot(Object* WorldContextObject, SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0xc7d36f0 0x78d72cb920
	static AsyncActionHandleSaveGame* AsyncLoadGameFromSlot(Object* WorldContextObject, FString SlotName, const int UserIndex);// 0xc7d358c 0x78d72cba00

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: AsyncActionLoadPrimaryAsset.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x78d72db100
	static AsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0xc7d3f8c 0x78d72cb840

--------------------------------
Class: AsyncActionLoadPrimaryAssetClass.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x78d72dae80
	static AsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0xc7d44dc 0x78d72cb760

--------------------------------
Class: AsyncActionLoadPrimaryAssetList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x78d72dac00
	static AsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0xc7d4a2c 0x78d72cb680

--------------------------------
Class: AsyncActionLoadPrimaryAssetClassList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x78d72da980
	static AsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0xc7d4fb0 0x78d72cb5a0

--------------------------------
Class: AsyncActionChangePrimaryAssetBundles.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x78d72dc580
	static AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] AddBundles, out const FName[] RemoveBundles);// 0xc7d5534 0x78d72cb3e0
	static AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(Object* WorldContextObject, out const FName[] NewBundles, out const FName[] OldBundles);// 0xc7d576c 0x78d72cb4c0

--------------------------------
Class: AtmosphericFog.Info.Actor.Object
	AtmosphericFogComponent* AtmosphericFogComponent;//[Offset: 0x220, Size: 0x8] 0x78d72dc500

--------------------------------
Class: AtmosphericFogComponent.SceneComponent.ActorComponent.Object
	float SunMultiplier;//[Offset: 0x204, Size: 0x4] 0x78d72dd580
	float FogMultiplier;//[Offset: 0x208, Size: 0x4] 0x78d72dd600
	float DensityMultiplier;//[Offset: 0x20c, Size: 0x4] 0x78d72dd680
	float DensityOffset;//[Offset: 0x210, Size: 0x4] 0x78d72db600
	float DistanceScale;//[Offset: 0x214, Size: 0x4] 0x78d72db680
	float AltitudeScale;//[Offset: 0x218, Size: 0x4] 0x78d72db700
	float DistanceOffset;//[Offset: 0x21c, Size: 0x4] 0x78d72db780
	float GroundOffset;//[Offset: 0x220, Size: 0x4] 0x78d72db800
	float StartDistance;//[Offset: 0x224, Size: 0x4] 0x78d72db880
	float SunDiscScale;//[Offset: 0x228, Size: 0x4] 0x78d72db900
	float DefaultBrightness;//[Offset: 0x22c, Size: 0x4] 0x78d72db980
	Color DefaultLightColor;//[Offset: 0x230, Size: 0x4] 0x78d72dba00
	bool bDisableSunDisk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1] 0x78d72dba80
	bool bAtmosphereAffectsSunIlluminance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1] 0x78d72dbb00
	bool bDisableGroundScattering;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x234, Size: 0x1] 0x78d72dbb80
	AtmospherePrecomputeParameters PrecomputeParams;//[Offset: 0x238, Size: 0x2c] 0x78d72dbc00
	Texture2D* TransmittanceTexture;//[Offset: 0x268, Size: 0x8] 0x78d72dbc80
	Texture2D* IrradianceTexture;//[Offset: 0x270, Size: 0x8] 0x78d72dbd00
	void StartPrecompute();// 0xc7d60d4 0x78d72ce160
	void SetSunMultiplier(float NewSunMultiplier);// 0xc7d681c 0x78d72ce240
	void SetStartDistance(float NewStartDistance);// 0xc7d642c 0x78d72ce320
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);// 0xc7d60e8 0x78d72ce400
	void SetFogMultiplier(float NewFogMultiplier);// 0xc7d6774 0x78d72ce4e0
	void SetDistanceScale(float NewDistanceScale);// 0xc7d657c 0x78d72ce5c0
	void SetDistanceOffset(float NewDistanceOffset);// 0xc7d6384 0x78d72ce6a0
	void SetDensityOffset(float NewDensityOffset);// 0xc7d6624 0x78d72cadc0
	void SetDensityMultiplier(float NewDensityMultiplier);// 0xc7d66cc 0x78d72caea0
	void SetDefaultLightColor(LinearColor NewLightColor);// 0xc7d68c4 0x78d72caf80
	void SetDefaultBrightness(float NewBrightness);// 0xc7d696c 0x78d72cb060
	void SetAltitudeScale(float NewAltitudeScale);// 0xc7d64d4 0x78d72cb140
	void DisableSunDisk(bool NewSunDisk);// 0xc7d62d4 0x78d72cb220
	void DisableGroundScattering(bool NewGroundScattering);// 0xc7d6224 0x78d72cb300

--------------------------------
Class: AtmospherePrecomputeParameters
	float DensityHeight;//[Offset: 0x0, Size: 0x4] 0x78dbee2580
	float DecayHeight;//[Offset: 0x4, Size: 0x4] 0x78dbee2600
	int MaxScatteringOrder;//[Offset: 0x8, Size: 0x4] 0x78dbee2680
	int TransmittanceTexWidth;//[Offset: 0xc, Size: 0x4] 0x78dbee2700
	int TransmittanceTexHeight;//[Offset: 0x10, Size: 0x4] 0x78dbee2780
	int IrradianceTexWidth;//[Offset: 0x14, Size: 0x4] 0x78dbee2800
	int IrradianceTexHeight;//[Offset: 0x18, Size: 0x4] 0x78dbee2880
	int InscatterAltitudeSampleNum;//[Offset: 0x1c, Size: 0x4] 0x78dbee2900
	int InscatterMuNum;//[Offset: 0x20, Size: 0x4] 0x78dbee2980
	int InscatterMuSNum;//[Offset: 0x24, Size: 0x4] 0x78dbee2a00
	int InscatterNuNum;//[Offset: 0x28, Size: 0x4] 0x78dbee2a80

--------------------------------
Class: AudioSettings.DeveloperSettings.Object
	SoftObjectPath DefaultSoundClassName;//[Offset: 0x38, Size: 0x18] 0x78d72dca00
	SoftObjectPath DefaultMediaSoundClassName;//[Offset: 0x50, Size: 0x18] 0x78d72dca80
	SoftObjectPath DefaultSoundConcurrencyName;//[Offset: 0x68, Size: 0x18] 0x78d72dcb00
	SoftObjectPath DefaultBaseSoundMix;//[Offset: 0x80, Size: 0x18] 0x78d72dcb80
	SoftObjectPath VoiPSoundClass;//[Offset: 0x98, Size: 0x18] 0x78d72dcc00
	SoftObjectPath MasterSubmix;//[Offset: 0xb0, Size: 0x18] 0x78d72dcc80
	SoftObjectPath ReverbSubmix;//[Offset: 0xc8, Size: 0x18] 0x78d72dcd00
	SoftObjectPath EQSubmix;//[Offset: 0xe0, Size: 0x18] 0x78d72dcd80
	enum VoiPSampleRate;//[Offset: 0xf8, Size: 0x4] 0x78d727b960
	float DefaultReverbSendLevel;//[Offset: 0xfc, Size: 0x4] 0x78d72dce80
	int MaximumConcurrentStreams;//[Offset: 0x100, Size: 0x4] 0x78d72dcf00
	float GlobalMinPitchScale;//[Offset: 0x104, Size: 0x4] 0x78d72dcf80
	float GlobalMaxPitchScale;//[Offset: 0x108, Size: 0x4] 0x78d72dd000
	AudioQualitySettings[] QualityLevels;//[Offset: 0x110, Size: 0x10] 0x78d72790c0
	bool bAllowPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1] 0x78d72dd100
	bool bDisableMasterEQ;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x120, Size: 0x1] 0x78d72dd180
	bool bAllowCenterChannel3DPanning;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x120, Size: 0x1] 0x78d72dd200
	uint32 NumStoppingSources;//[Offset: 0x124, Size: 0x4] 0x78d72dd280
	enum PanningMethod;//[Offset: 0x128, Size: 0x1] 0x78d7279160
	enum MonoChannelUpmixMethod;//[Offset: 0x129, Size: 0x1] 0x78d7279200
	FString DialogueFilenameFormat;//[Offset: 0x130, Size: 0x10] 0x78d72dd400

--------------------------------
Class: AudioQualitySettings
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x78dbee3f00
	int MaxChannels;//[Offset: 0x18, Size: 0x4] 0x78dbee3f80

--------------------------------
Class: AudioVolume.Volume.Brush.Actor.Object
	float Priority;//[Offset: 0x258, Size: 0x4] 0x78d72de500
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25c, Size: 0x1] 0x78d72de580
	ReverbSettings Settings;//[Offset: 0x260, Size: 0x20] 0x78d72de600
	InteriorSettings AmbientZoneSettings;//[Offset: 0x280, Size: 0x24] 0x78d72de680
	AudioVolumeSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2a8, Size: 0x10] 0x78d727b6e0
	AudioVolumeSubmixOverrideSettings[] SubmixOverrideSettings;//[Offset: 0x2b8, Size: 0x10] 0x78d727b780
	void SetSubmixSendSettings(out const AudioVolumeSubmixSendSettings[] NewSubmixSendSettings);// 0xc7dd334 0x78d72cdb40
	void SetSubmixOverrideSettings(out const AudioVolumeSubmixOverrideSettings[] NewSubmixOverrideSettings);// 0xc7dd1e0 0x78d72cdc20
	void SetReverbSettings(out const ReverbSettings NewReverbSettings);// 0xc7dd518 0x78d72cdd00
	void SetPriority(float NewPriority);// 0xc7dd690 0x78d72cdde0
	void SetInteriorSettings(out const InteriorSettings NewInteriorSettings);// 0xc7dd460 0x78d72cdec0
	void SetEnabled(bool bNewEnabled);// 0xc7dd5e0 0x78d72cdfa0
	void OnRep_bEnabled();// 0xc7dd1c4 0x78d72ce080

--------------------------------
Class: AudioVolumeSubmixSendSettings
	enum ListenerLocationState;//[Offset: 0x0, Size: 0x1] 0x78dbe5c0e0
	enum SourceLocationState;//[Offset: 0x1, Size: 0x1] 0x78dbe5c180
	SoundSubmixSendInfo[] SubmixSends;//[Offset: 0x8, Size: 0x10] 0x78dbe5c360

--------------------------------
Class: AudioVolumeSubmixOverrideSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8] 0x78dbee3900
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x8, Size: 0x10] 0x78dbe5c400
	float CrossfadeTime;//[Offset: 0x18, Size: 0x4] 0x78dbee3a00

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: AutoDestroySubsystem.WorldSubsystem.Subsystem.Object
	Actor*[] ActorsToPoll;//[Offset: 0x38, Size: 0x10] 0x78d727b640
	void OnActorEndPlay(Actor* Actor, byte EndPlayReason);// 0xc7ddc80 0x78d72cda60

--------------------------------
Class: AutomationTestSettings.Object
	FString[] EngineTestModules;//[Offset: 0x28, Size: 0x10] 0x78d727b0a0
	FString[] EditorTestModules;//[Offset: 0x38, Size: 0x10] 0x78d727b140
	SoftObjectPath AutomationTestmap;//[Offset: 0x48, Size: 0x18] 0x78d72ddc80
	EditorMapPerformanceTestDefinition[] EditorPerformanceTestMaps;//[Offset: 0x60, Size: 0x10] 0x78d727b1e0
	SoftObjectPath[] AssetsToOpen;//[Offset: 0x70, Size: 0x10] 0x78d727b280
	FString[] MapsToPIETest;//[Offset: 0x80, Size: 0x10] 0x78d727b320
	BuildPromotionTestSettings BuildPromotionTest;//[Offset: 0x90, Size: 0x1f0] 0x78d72dde80
	MaterialEditorPromotionSettings MaterialEditorPromotionTest;//[Offset: 0x280, Size: 0x30] 0x78d72ddf00
	ParticleEditorPromotionSettings ParticleEditorPromotionTest;//[Offset: 0x2b0, Size: 0x10] 0x78d72ddf80
	BlueprintEditorPromotionSettings BlueprintEditorPromotionTest;//[Offset: 0x2c0, Size: 0x30] 0x78d72de000
	FString[] TestLevelFolders;//[Offset: 0x2f0, Size: 0x10] 0x78d727b3c0
	ExternalToolDefinition[] ExternalTools;//[Offset: 0x300, Size: 0x10] 0x78d727b460
	EditorImportExportTestDefinition[] ImportExportTestDefinitions;//[Offset: 0x310, Size: 0x10] 0x78d727b500
	LaunchOnTestSettings[] LaunchOnSettings;//[Offset: 0x320, Size: 0x10] 0x78d727b5a0
	IntPoint DefaultScreenshotResolution;//[Offset: 0x330, Size: 0x8] 0x78d72de280
	float PIETestDuration;//[Offset: 0x338, Size: 0x4] 0x78d72de300

--------------------------------
Class: EditorMapPerformanceTestDefinition
	SoftObjectPath PerformanceTestmap;//[Offset: 0x0, Size: 0x18] 0x78dbee5180
	int TestTimer;//[Offset: 0x18, Size: 0x4] 0x78dbee5200

--------------------------------
Class: BuildPromotionTestSettings
	FilePath DefaultStaticMeshAsset;//[Offset: 0x0, Size: 0x10] 0x78dbee4380
	BuildPromotionImportWorkflowSettings ImportWorkflow;//[Offset: 0x10, Size: 0x150] 0x78dbee4b80
	BuildPromotionOpenAssetSettings OpenAssets;//[Offset: 0x160, Size: 0x60] 0x78dbee4f00
	BuildPromotionNewProjectSettings NewProjectSettings;//[Offset: 0x1c0, Size: 0x20] 0x78dbee5080
	FilePath SourceControlMaterial;//[Offset: 0x1e0, Size: 0x10] 0x78dbee5100

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10] 0x78dbee5280

--------------------------------
Class: BuildPromotionImportWorkflowSettings
	EditorImportWorkflowDefinition Diffuse;//[Offset: 0x0, Size: 0x20] 0x78dbee4400
	EditorImportWorkflowDefinition Normal;//[Offset: 0x20, Size: 0x20] 0x78dbee4480
	EditorImportWorkflowDefinition StaticMesh;//[Offset: 0x40, Size: 0x20] 0x78dbee4500
	EditorImportWorkflowDefinition ReimportStaticMesh;//[Offset: 0x60, Size: 0x20] 0x78dbee4580
	EditorImportWorkflowDefinition BlendShapeMesh;//[Offset: 0x80, Size: 0x20] 0x78dbee4600
	EditorImportWorkflowDefinition MorphMesh;//[Offset: 0xa0, Size: 0x20] 0x78dbee4680
	EditorImportWorkflowDefinition SkeletalMesh;//[Offset: 0xc0, Size: 0x20] 0x78dbee4700
	EditorImportWorkflowDefinition Animation;//[Offset: 0xe0, Size: 0x20] 0x78dbee4780
	EditorImportWorkflowDefinition Sound;//[Offset: 0x100, Size: 0x20] 0x78dbee4800
	EditorImportWorkflowDefinition SurroundSound;//[Offset: 0x120, Size: 0x20] 0x78dbee4880
	EditorImportWorkflowDefinition[] OtherAssetsToImport;//[Offset: 0x140, Size: 0x10] 0x78dbe5c040

--------------------------------
Class: EditorImportWorkflowDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10] 0x78dbee4900
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x10, Size: 0x10] 0x78dbe5bfa0

--------------------------------
Class: ImportFactorySettingValues
	FString SettingName;//[Offset: 0x0, Size: 0x10] 0x78dbee4980
	FString Value;//[Offset: 0x10, Size: 0x10] 0x78dbee4a00

--------------------------------
Class: BuildPromotionOpenAssetSettings
	FilePath BlueprintAsset;//[Offset: 0x0, Size: 0x10] 0x78dbee4c00
	FilePath MaterialAsset;//[Offset: 0x10, Size: 0x10] 0x78dbee4c80
	FilePath ParticleSystemAsset;//[Offset: 0x20, Size: 0x10] 0x78dbee4d00
	FilePath SkeletalMeshAsset;//[Offset: 0x30, Size: 0x10] 0x78dbee4d80
	FilePath StaticMeshAsset;//[Offset: 0x40, Size: 0x10] 0x78dbee4e00
	FilePath TextureAsset;//[Offset: 0x50, Size: 0x10] 0x78dbee4e80

--------------------------------
Class: BuildPromotionNewProjectSettings
	DirectoryPath NewProjectFolderOverride;//[Offset: 0x0, Size: 0x10] 0x78dbee4f80
	FString NewProjectNameOverride;//[Offset: 0x10, Size: 0x10] 0x78dbee5000

--------------------------------
Class: MaterialEditorPromotionSettings
	FilePath DefaultMaterialAsset;//[Offset: 0x0, Size: 0x10] 0x78dbee6100
	FilePath DefaultDiffuseTexture;//[Offset: 0x10, Size: 0x10] 0x78dbee6180
	FilePath DefaultNormalTexture;//[Offset: 0x20, Size: 0x10] 0x78dbee6200

--------------------------------
Class: ParticleEditorPromotionSettings
	FilePath DefaultParticleAsset;//[Offset: 0x0, Size: 0x10] 0x78dbee6280

--------------------------------
Class: BlueprintEditorPromotionSettings
	FilePath FirstMeshPath;//[Offset: 0x0, Size: 0x10] 0x78dbee6300
	FilePath SecondMeshPath;//[Offset: 0x10, Size: 0x10] 0x78dbee4280
	FilePath DefaultParticleAsset;//[Offset: 0x20, Size: 0x10] 0x78dbee4300

--------------------------------
Class: ExternalToolDefinition
	FString ToolName;//[Offset: 0x0, Size: 0x10] 0x78dbee5c00
	FilePath ExecutablePath;//[Offset: 0x10, Size: 0x10] 0x78dbee5c80
	FString CommandLineOptions;//[Offset: 0x20, Size: 0x10] 0x78dbee5d00
	DirectoryPath WorkingDirectory;//[Offset: 0x30, Size: 0x10] 0x78dbee5d80
	FString ScriptExtension;//[Offset: 0x40, Size: 0x10] 0x78dbee5e00
	DirectoryPath ScriptDirectory;//[Offset: 0x50, Size: 0x10] 0x78dbee5e80

--------------------------------
Class: EditorImportExportTestDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10] 0x78dbee5f00
	FString ExportFileExtension;//[Offset: 0x10, Size: 0x10] 0x78dbee5f80
	bool bSkipExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78dbee6000
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x28, Size: 0x10] 0x78dbe5bf00

--------------------------------
Class: LaunchOnTestSettings
	FilePath LaunchOnTestmap;//[Offset: 0x0, Size: 0x10] 0x78dbee3200
	FString DeviceID;//[Offset: 0x10, Size: 0x10] 0x78dbee3280

--------------------------------
Class: BandwidthTestActor.Actor.Object
	BandwidthTestGenerator BandwidthGenerator;//[Offset: 0x220, Size: 0x20] 0x78d72df500

--------------------------------
Class: BandwidthTestGenerator
	BandwidthTestItem[] ReplicatedBuffers;//[Offset: 0x0, Size: 0x10] 0x78dbe5be60

--------------------------------
Class: BandwidthTestItem
	byte[] Kilobyte;//[Offset: 0x0, Size: 0x10] 0x78dbe5bdc0

--------------------------------
Class: BlendableInterface.Interface.Object

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: BlueprintExtension.Object

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: BlueprintMapLibrary.BlueprintFunctionLibrary.Object
	static void SetMapPropertyByName(Object* Object, FName PropertyName, out const <int,int> Value);// 0xc7e8a60 0x78d72ccc60
	static void Map_Values(out const <int,int> TargetMap, out int[] Values);// 0xc7e8958 0x78d72ccd40
	static bool Map_Remove(out const <int,int> TargetMap, out const int Key);// 0xc7e879c 0x78d72cce20
	static int Map_Length(out const <int,int> TargetMap);// 0xc7e86f8 0x78d72ccf00
	static void Map_Keys(out const <int,int> TargetMap, out int[] Keys);// 0xc7e85f0 0x78d72ccfe0
	static bool Map_Find(out const <int,int> TargetMap, out const int Key, out int Value);// 0xc7e8314 0x78d72cd0c0
	static bool Map_Contains(out const <int,int> TargetMap, out const int Key);// 0xc7e8154 0x78d72cd1a0
	static void Map_Clear(out const <int,int> TargetMap);// 0xc7e80bc 0x78d72cd280
	static void Map_Add(out const <int,int> TargetMap, out const int Key, out const int Value);// 0xc7e7e2c 0x78d72cd360

--------------------------------
Class: BlueprintPathsLibrary.BlueprintFunctionLibrary.Object
	static FString VideoCaptureDir();// 0xc7f21d8 0x78d72f29a0
	static void ValidatePath(FString InPath, out bool bDidSucceed, out FText OutReason);// 0xc7eef48 0x78d72f2a80
	static void Split(FString InPath, out FString PathPart, out FString FilenamePart, out FString ExtensionPart);// 0xc7eed04 0x78d72f2b60
	static FString SourceConfigDir();// 0xc7f26d0 0x78d72f2c40
	static bool ShouldSaveToUserDir();// 0xc7f3ae8 0x78d72f2d20
	static FString ShaderWorkingDir();// 0xc7f2a58 0x78d72f2e00
	static void SetProjectFilePath(FString NewGameProjectFilePath);// 0xc7f1190 0x78d72f2ee0
	static FString SetExtension(FString InPath, FString InNewExtension);// 0xc7f08d0 0x78d72f2fc0
	static FString ScreenShotDir();// 0xc7f2380 0x78d72f30a0
	static FString SandboxesDir();// 0xc7f2528 0x78d72f3180
	static FString RootDir();// 0xc7f3024 0x78d72f3260
	static void RemoveDuplicateSlashes(FString InPath, out FString OutPath);// 0xc7eff10 0x78d72f3340
	static FString ProjectUserDir();// 0xc7f2e7c 0x78d72f3420
	static FString ProjectSavedDir();// 0xc7f2c00 0x78d72f3500
	static FString ProjectPluginsDir();// 0xc7f2984 0x78d72f35e0
	static FString ProjectPersistentDownloadDir();// 0xc7f27a4 0x78d72f36c0
	static FString ProjectModsDir();// 0xc7f28b0 0x78d72f37a0
	static FString ProjectLogDir();// 0xc7f2104 0x78d72f3880
	static FString ProjectIntermediateDir();// 0xc7f2b2c 0x78d72f3960
	static FString ProjectDir();// 0xc7f2f50 0x78d72f0080
	static FString ProjectContentDir();// 0xc7f2da8 0x78d72f0160
	static FString ProjectConfigDir();// 0xc7f2cd4 0x78d72f0240
	static FString ProfilingDir();// 0xc7f2454 0x78d72f0320
	static void NormalizeFilename(FString InPath, out FString OutPath);// 0xc7f0424 0x78d72f0400
	static void NormalizeDirectoryName(FString InPath, out FString OutPath);// 0xc7f019c 0x78d72f04e0
	static FString MakeValidFileName(FString inString, FString InReplacementChar);// 0xc7ef184 0x78d72f05c0
	static void MakeStandardFilename(FString InPath, out FString OutPath);// 0xc7efdd4 0x78d72f06a0
	static void MakePlatformFilename(FString InPath, out FString OutPath);// 0xc7efc98 0x78d72f0780
	static bool MakePathRelativeTo(FString InPath, FString InRelativeTo, out FString OutPath);// 0xc7efae0 0x78d72f0860
	static FString LaunchDir();// 0xc7f3a14 0x78d72f0940
	static bool IsSamePath(FString PathA, FString PathB);// 0xc7f02d8 0x78d72f0a20
	static bool IsRestrictedPath(FString InPath);// 0xc7f16b4 0x78d72f0b00
	static bool IsRelative(FString InPath);// 0xc7f0560 0x78d72f0be0
	static bool IsProjectFilePathSet();// 0xc7f132c 0x78d72f0cc0
	static bool IsDrive(FString InPath);// 0xc7f063c 0x78d72f0da0
	static bool HasProjectPersistentDownloadDir();// 0xc7f2878 0x78d72f0e80
	static FString[] GetToolTipLocalizationPaths();// 0xc7f18c8 0x78d72f0f60
	static FString[] GetRestrictedFolderNames();// 0xc7f1790 0x78d72f1040
	static FString GetRelativePathToRoot();// 0xc7eec80 0x78d72f1120
	static FString[] GetPropertyNameLocalizationPaths();// 0xc7f1964 0x78d72f1200
	static FString GetProjectFilePath();// 0xc7f1258 0x78d72f12e0
	static FString GetPath(FString InPath);// 0xc7f0c10 0x78d72f13c0
	static FString GetInvalidFileSystemChars();// 0xc7ef324 0x78d72f14a0
	static FString[] GetGameLocalizationPaths();// 0xc7f182c 0x78d72f1580
	static FString GetExtension(FString InPath, bool bIncludeDot);// 0xc7f1008 0x78d72f1660
	static FString[] GetEngineLocalizationPaths();// 0xc7f1a9c 0x78d72f1740
	static FString[] GetEditorLocalizationPaths();// 0xc7f1a00 0x78d72f1820
	static FString GetCleanFilename(FString InPath);// 0xc7f0ed0 0x78d72f1900
	static FString GetBaseFilename(FString InPath, bool bRemovePath);// 0xc7f0d48 0x78d72f19e0
	static FString GeneratedConfigDir();// 0xc7f25fc 0x78d72f1ac0
	static FString GameUserDeveloperDir();// 0xc7f1c0c 0x78d72f1ba0
	static FString GameSourceDir();// 0xc7f1438 0x78d72f1c80
	static FString GameDevelopersDir();// 0xc7f1ce0 0x78d72ce780
	static FString GameAgnosticSavedDir();// 0xc7f15e0 0x78d72ce860
	static bool FileExists(FString InPath);// 0xc7f07f4 0x78d72ce940
	static FString FeaturePackDir();// 0xc7f1364 0x78d72cea20
	static FString EnterprisePluginsDir();// 0xc7f31cc 0x78d72ceb00
	static FString EnterpriseFeaturePackDir();// 0xc7f30f8 0x78d72cebe0
	static FString EnterpriseDir();// 0xc7f32a0 0x78d72cecc0
	static FString EngineVersionAgnosticUserDir();// 0xc7f3798 0x78d72ceda0
	static FString EngineUserDir();// 0xc7f386c 0x78d72cee80
	static FString EngineSourceDir();// 0xc7f150c 0x78d72cef60
	static FString EngineSavedDir();// 0xc7f3448 0x78d72cf040
	static FString EnginePluginsDir();// 0xc7f3374 0x78d72cf120
	static FString EngineIntermediateDir();// 0xc7f351c 0x78d72cf200
	static FString EngineDir();// 0xc7f3940 0x78d72cf2e0
	static FString EngineContentDir();// 0xc7f36c4 0x78d72cf3c0
	static FString EngineConfigDir();// 0xc7f35f0 0x78d72cf4a0
	static bool DirectoryExists(FString InPath);// 0xc7f0718 0x78d72cf580
	static FString DiffDir();// 0xc7f1b38 0x78d72cf660
	static FString CreateTempFilename(FString Path, FString Prefix, FString Extension);// 0xc7ef3f8 0x78d72cf740
	static FString ConvertToSandboxPath(FString InPath, FString InSandboxName);// 0xc7ef7a0 0x78d72cf820
	static FString ConvertRelativePathToFull(FString InPath, FString InBasePath);// 0xc7ef940 0x78d72cf900
	static FString ConvertFromSandboxPath(FString InPath, FString InSandboxName);// 0xc7ef600 0x78d72cf9e0
	static FString Combine(out const FString[] InPaths);// 0xc7eeac8 0x78d72cfac0
	static bool CollapseRelativeDirectories(FString InPath, out FString OutPath);// 0xc7f004c 0x78d72cfba0
	static FString CloudDir();// 0xc7f1db4 0x78d72cfc80
	static FString ChangeExtension(FString InPath, FString InNewExtension);// 0xc7f0a70 0x78d72cfd60
	static FString BugItDir();// 0xc7f22ac 0x78d72cfe40
	static FString AutomationTransientDir();// 0xc7f1f5c 0x78d72cff20
	static FString AutomationLogDir();// 0xc7f1e88 0x78d72ccaa0
	static FString AutomationDir();// 0xc7f2030 0x78d72ccb80

--------------------------------
Class: PlatformGameInstance.GameInstance.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0x1a8, Size: 0x10] 0x78d3569c80
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0x1b8, Size: 0x10] 0x78d3569d00
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0x1c8, Size: 0x10] 0x78d3569d80
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0x1d8, Size: 0x10] 0x78d3569e00
	delegate ApplicationWillTerminateDelegate;//[Offset: 0x1e8, Size: 0x10] 0x78d3569e80
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x1f8, Size: 0x10] 0x78d3569f00
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x208, Size: 0x10] 0x78d356a000
	delegate ApplicationRegisteredForRemoteNotificationsDelegate;//[Offset: 0x218, Size: 0x10] 0x78d356a100
	delegate ApplicationRegisteredForUserNotificationsDelegate;//[Offset: 0x228, Size: 0x10] 0x78d356a200
	delegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;//[Offset: 0x238, Size: 0x10] 0x78d356a300
	delegate ApplicationReceivedRemoteNotificationDelegate;//[Offset: 0x248, Size: 0x10] 0x78d356a480
	delegate ApplicationReceivedLocalNotificationDelegate;//[Offset: 0x258, Size: 0x10] 0x78d3568580
	delegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;//[Offset: 0x268, Size: 0x10] 0x78d3568680

--------------------------------
Class: BlueprintPlatformLibrary.BlueprintFunctionLibrary.Object
	static int ScheduleLocalNotificationFromNow(int inSecondsFromNow, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0xc7f60a0 0x78d72f21c0
	static void ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, FString ActivationEvent);// 0xc7f5e24 0x78d72f22a0
	static int ScheduleLocalNotificationBadgeAtTime(out const DateTime FireDateTime, bool LocalTime, FString ActivationEvent);// 0xc7f5f2c 0x78d72f2380
	static int ScheduleLocalNotificationAtTime(out const DateTime FireDateTime, bool LocalTime, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0xc7f651c 0x78d72f2460
	static void GetLaunchNotification(out bool NotificationLaunchedApp, out FString ActivationEvent, out int FireDate);// 0xc7f5b3c 0x78d72f2540
	static byte GetDeviceOrientation();// 0xc7f5b08 0x78d72f2620
	static void ClearAllLocalNotifications();// 0xc7f69f4 0x78d72f2700
	static void CancelLocalNotificationById(int NotificationId);// 0xc7f5cc4 0x78d72f27e0
	static void CancelLocalNotification(FString ActivationEvent);// 0xc7f5d5c 0x78d72f28c0

--------------------------------
Class: DateTime

--------------------------------
Class: BlueprintSetLibrary.BlueprintFunctionLibrary.Object
	static void SetSetPropertyByName(Object* Object, FName PropertyName, out const <int> Value);// 0xc7f8408 0x78d72f5100
	static void Set_Union(out const <int> A, out const <int> B, out <int> Result);// 0xc7f8290 0x78d72f51e0
	static void Set_ToArray(out const <int> A, out int[] Result);// 0xc7f8188 0x78d72f52c0
	static void Set_RemoveItems(out const <int> TargetSet, out const int[] items);// 0xc7f8080 0x78d72f53a0
	static bool Set_Remove(out const <int> TargetSet, out const int Item);// 0xc7f7ec4 0x78d72f5480
	static int Set_Length(out const <int> TargetSet);// 0xc7f7e20 0x78d72f5560
	static void Set_Intersection(out const <int> A, out const <int> B, out <int> Result);// 0xc7f7ca8 0x78d72f5640
	static void Set_Difference(out const <int> A, out const <int> B, out <int> Result);// 0xc7f7b30 0x78d72f1d60
	static bool Set_Contains(out const <int> TargetSet, out const int ItemToFind);// 0xc7f7974 0x78d72f1e40
	static void Set_Clear(out const <int> TargetSet);// 0xc7f78dc 0x78d72f1f20
	static void Set_AddItems(out const <int> TargetSet, out const int[] NewItems);// 0xc7f77d4 0x78d72f2000
	static void Set_Add(out const <int> TargetSet, out const int NewItem);// 0xc7f762c 0x78d72f20e0

--------------------------------
Class: BoneMaskFilter.Object
	InputBlendPose[] BlendPoses;//[Offset: 0x28, Size: 0x10] 0x78d727c5e0

--------------------------------
Class: InputBlendPose
	BranchFilter[] BranchFilters;//[Offset: 0x0, Size: 0x10] 0x78dbe53ee0

--------------------------------
Class: BranchFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x78dbe80b80
	int BlendDepth;//[Offset: 0x8, Size: 0x4] 0x78dbe80c00

--------------------------------
Class: BookMark.BookmarkBase.Object
	Vector Location;//[Offset: 0x28, Size: 0xc] 0x78d72e7080
	Rotator Rotation;//[Offset: 0x34, Size: 0xc] 0x78d72e7100
	FString[] HiddenLevels;//[Offset: 0x40, Size: 0x10] 0x78d727c540

--------------------------------
Class: BookMark2D.BookmarkBase.Object
	float Zoom2D;//[Offset: 0x28, Size: 0x4] 0x78d72e6f80
	IntPoint Location;//[Offset: 0x2c, Size: 0x8] 0x78d72e7000

--------------------------------
Class: BoundsCopyComponent.ActorComponent.Object
	Actor* BoundsSourceActor;//[Offset: 0xb8, Size: 0x28] 0x78d72e6b80
	bool bUseCollidingComponentsForSourceBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x78d72e6c00
	bool bKeepOwnBoundsScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1] 0x78d72e6c80
	bool bUseCollidingComponentsForOwnBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1] 0x78d72e6d00
	Transform PostTransform;//[Offset: 0xf0, Size: 0x30] 0x78d72e6d80
	bool bCopyXBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x78d72e6e00
	bool bCopyYBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1] 0x78d72e6e80
	bool bCopyZBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 0x1] 0x78d72e6f00

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x488, Size: 0xc] 0x78d72e6600
	float LineThickness;//[Offset: 0x494, Size: 0x4] 0x78d72e6680
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0xc7f9e28 0x78d72f4e60
	Vector GetUnscaledBoxExtent();// 0xc7f9dcc 0x78d72f4f40
	Vector GetScaledBoxExtent();// 0xc7f9df0 0x78d72f5020

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x220, Size: 0x8] 0x78d72e6580

--------------------------------
Class: BoxReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: BoxReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float BoxTransitionDistance;//[Offset: 0x280, Size: 0x4] 0x78d72e7f80
	BoxComponent* PreviewInfluenceBox;//[Offset: 0x288, Size: 0x8] 0x78d72e8000
	BoxComponent* PreviewCaptureBox;//[Offset: 0x290, Size: 0x8] 0x78d72e8080

--------------------------------
Class: BreakPoint.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78d72e7d00
	EdGraphNode* Node;//[Offset: 0x30, Size: 0x8] 0x78d72e7d80
	bool bStepOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78d72e7e00
	bool bStepOnce_WasPreviouslyDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78d72e7e80
	bool bStepOnce_RemoveAfterHit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x78d72e7f00

--------------------------------
Class: EdGraphNode.Object
	EdGraphPin_Deprecated*[] DeprecatedPins;//[Offset: 0x38, Size: 0x10] 0x78d727efc0
	int NodePosX;//[Offset: 0x48, Size: 0x4] 0x78d7317d00
	int NodePosY;//[Offset: 0x4c, Size: 0x4] 0x78d7317d80
	int NodeWidth;//[Offset: 0x50, Size: 0x4] 0x78d7317e00
	int NodeHeight;//[Offset: 0x54, Size: 0x4] 0x78d7317e80
	byte AdvancedPinDisplay;//[Offset: 0x58, Size: 0x1] 0x78d7317f00
	enum EnabledState;//[Offset: 0x59, Size: 0x1] 0x78d727f060
	bool bDisplayAsDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x78d7318000
	bool bUserSetEnabledState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x78d7318080
	bool bIsNodeEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1] 0x78d7318100
	bool bHasCompilerMessage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b, Size: 0x1] 0x78d7318180
	FString NodeComment;//[Offset: 0x60, Size: 0x10] 0x78d7318200
	int errorType;//[Offset: 0x70, Size: 0x4] 0x78d7318280
	FString ErrorMsg;//[Offset: 0x78, Size: 0x10] 0x78d7318300
	Guid NodeGuid;//[Offset: 0x88, Size: 0x10] 0x78d7318380

--------------------------------
Class: EdGraphPin_Deprecated.Object
	FString PinName;//[Offset: 0x28, Size: 0x10] 0x78d7317580
	FString PinToolTip;//[Offset: 0x38, Size: 0x10] 0x78d7317600
	byte Direction;//[Offset: 0x48, Size: 0x1] 0x78d7317680
	EdGraphPinType PinType;//[Offset: 0x50, Size: 0x58] 0x78d7317700
	FString DefaultValue;//[Offset: 0xa8, Size: 0x10] 0x78d7317780
	FString AutogeneratedDefaultValue;//[Offset: 0xb8, Size: 0x10] 0x78d7317800
	Object* DefaultObject;//[Offset: 0xc8, Size: 0x8] 0x78d7317880
	FText DefaultTextValue;//[Offset: 0xd0, Size: 0x18] 0x78d7317900
	EdGraphPin_Deprecated*[] LinkedTo;//[Offset: 0xe8, Size: 0x10] 0x78d727ee80
	EdGraphPin_Deprecated*[] SubPins;//[Offset: 0xf8, Size: 0x10] 0x78d727ef20
	EdGraphPin_Deprecated* ParentPin;//[Offset: 0x108, Size: 0x8] 0x78d7317a80
	EdGraphPin_Deprecated* ReferencePassThroughConnection;//[Offset: 0x110, Size: 0x8] 0x78d7317b00

--------------------------------
Class: EdGraphPinType
	FName PinCategory;//[Offset: 0x0, Size: 0x8] 0x78dbde9380
	FName PinSubCategory;//[Offset: 0x8, Size: 0x8] 0x78dbde9400
	Object* PinSubCategoryObject;//[Offset: 0x10, Size: 0x8] 0x78dbde9480
	SimpleMemberReference PinSubCategoryMemberReference;//[Offset: 0x18, Size: 0x20] 0x78dbde7400
	EdGraphTerminalType PinValueType;//[Offset: 0x38, Size: 0x1c] 0x78dbde7780
	enum ContainerType;//[Offset: 0x54, Size: 0x1] 0x78d3616500
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1] 0x78dbde7880
	bool bIsReference;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1] 0x78dbde7900
	bool bIsConst;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1] 0x78dbde7980
	bool bIsWeakPointer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 0x1] 0x78dbde7a00
	bool bIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 0x1] 0x78dbde7a80

--------------------------------
Class: EdGraphTerminalType
	FName TerminalCategory;//[Offset: 0x0, Size: 0x8] 0x78dbde7480
	FName TerminalSubCategory;//[Offset: 0x8, Size: 0x8] 0x78dbde7500
	Object* TerminalSubCategoryObject;//[Offset: 0x10, Size: 0x8] 0x78dbde7580
	bool bTerminalIsConst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78dbde7600
	bool bTerminalIsWeakPointer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78dbde7680
	bool bTerminalIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1] 0x78dbde7700

--------------------------------
Class: BrushBuilder.Object
	FString BitmapFilename;//[Offset: 0x28, Size: 0x10] 0x78d72e7980
	FString ToolTip;//[Offset: 0x38, Size: 0x10] 0x78d72e7a00
	bool NotifyBadParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78d72e7a80
	Vector[] Vertices;//[Offset: 0x50, Size: 0x10] 0x78d727c220
	BuilderPoly[] Polys;//[Offset: 0x60, Size: 0x10] 0x78d727c2c0
	FName Layer;//[Offset: 0x70, Size: 0x8] 0x78d72e7c00
	bool MergeCoplanars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78d72e7c80

--------------------------------
Class: BuilderPoly
	int[] VertexIndices;//[Offset: 0x0, Size: 0x10] 0x78dbe5e160
	int Direction;//[Offset: 0x10, Size: 0x4] 0x78dbee8000
	FName ItemName;//[Offset: 0x14, Size: 0x8] 0x78dbee8080
	int PolyFlags;//[Offset: 0x1c, Size: 0x4] 0x78dbee8100

--------------------------------
Class: BrushShape.Brush.Actor.Object

--------------------------------
Class: ButtonStyleAsset.Object
	ButtonStyle ButtonStyle;//[Offset: 0x28, Size: 0x278] 0x78d72e7800

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x88] 0x78cd97f580
	SlateBrush Hovered;//[Offset: 0x90, Size: 0x88] 0x78cd97f600
	SlateBrush Pressed;//[Offset: 0x118, Size: 0x88] 0x78cd97f680
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 0x88] 0x78cd97f700
	Margin NormalPadding;//[Offset: 0x228, Size: 0x10] 0x78cd97f780
	Margin PressedPadding;//[Offset: 0x238, Size: 0x10] 0x78cd97d700
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 0x18] 0x78cd97d780
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 0x18] 0x78cd97d800

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8] 0x78cd97dc80

--------------------------------
Class: CameraBlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: CameraShakeSourceActor.Actor.Object
	CameraShakeSourceComponent* CameraShakeSourceComponent;//[Offset: 0x220, Size: 0x8] 0x78d72e9000

--------------------------------
Class: DeviceProfileManager.Object
	Object*[] Profiles;//[Offset: 0x28, Size: 0x10] 0x78d727f2e0

--------------------------------
Class: DeviceProfile.TextureLODSettings.Object
	FString DeviceType;//[Offset: 0x38, Size: 0x10] 0x78d7310d80
	FString BaseProfileName;//[Offset: 0x48, Size: 0x10] 0x78d7310e00
	Object* parent;//[Offset: 0x58, Size: 0x8] 0x78d7310e80
	FString[] CVars;//[Offset: 0x88, Size: 0x10] 0x78d727f380

--------------------------------
Class: TextureLODSettings.Object
	TextureLODGroup[] TextureLODGroups;//[Offset: 0x28, Size: 0x10] 0x78d727f420

--------------------------------
Class: TextureLODGroup
	byte Group;//[Offset: 0x0, Size: 0x1] 0x78dbf6d780
	int LODBias;//[Offset: 0xc, Size: 0x4] 0x78dbf6d800
	int LODBias_Smaller;//[Offset: 0x10, Size: 0x4] 0x78dbf6d880
	int LODBias_Smallest;//[Offset: 0x14, Size: 0x4] 0x78dbf6d900
	int NumStreamedMips;//[Offset: 0x1c, Size: 0x4] 0x78dbf6d980
	byte MipGenSettings;//[Offset: 0x20, Size: 0x1] 0x78dbf6da00
	int MinLODSize;//[Offset: 0x24, Size: 0x4] 0x78dbf6da80
	int MaxLODSize;//[Offset: 0x28, Size: 0x4] 0x78dbf6db00
	int MaxLODSize_Smaller;//[Offset: 0x2c, Size: 0x4] 0x78dbf6db80
	int MaxLODSize_Smallest;//[Offset: 0x30, Size: 0x4] 0x78dbf6dc00
	int OptionalLODBias;//[Offset: 0x34, Size: 0x4] 0x78dbf6dc80
	int OptionalMaxLODSize;//[Offset: 0x38, Size: 0x4] 0x78dbf6dd00
	FName MinMagFilter;//[Offset: 0x40, Size: 0x8] 0x78dbf6dd80
	FName MipFilter;//[Offset: 0x48, Size: 0x8] 0x78dbf6de00
	enum MipLoadOptions;//[Offset: 0x50, Size: 0x1] 0x78dbf22ae0
	bool DuplicateNonOptionalMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78dbf6df00
	float Downscale;//[Offset: 0x54, Size: 0x4] 0x78dbf6df80
	enum DownscaleOptions;//[Offset: 0x58, Size: 0x1] 0x78dbf22b80
	int VirtualTextureTileCountBias;//[Offset: 0x5c, Size: 0x4] 0x78dbf6e080
	int VirtualTextureTileSizeBias;//[Offset: 0x60, Size: 0x4] 0x78dbf6e100

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xd8, Size: 0x4] 0x78d72ec180

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe0, Size: 0x4] 0x78d72eba00
	int SizeY;//[Offset: 0xe4, Size: 0x4] 0x78d72eba80
	LinearColor ClearColor;//[Offset: 0xe8, Size: 0x10] 0x78d72ebb00
	byte AddressX;//[Offset: 0xf8, Size: 0x1] 0x78d72ebb80
	byte AddressY;//[Offset: 0xf9, Size: 0x1] 0x78d72ebc00
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 0x1] 0x78d72ebc80
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfa, Size: 0x1] 0x78d72ebd00
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfa, Size: 0x1] 0x78d72ebd80
	byte RenderTargetFormat;//[Offset: 0xfb, Size: 0x1] 0x78d72ebe00
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1] 0x78d72ebe80
	byte MipsSamplerFilter;//[Offset: 0xfd, Size: 0x1] 0x78d72ebf00
	byte MipsAddressU;//[Offset: 0xfe, Size: 0x1] 0x78d72ebf80
	byte MipsAddressV;//[Offset: 0xff, Size: 0x1] 0x78d72ec000
	byte OverrideFormat;//[Offset: 0x100, Size: 0x1] 0x78d72ec080
	bool bForceDontCreateUAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x101, Size: 0x1] 0x78d72ec100

--------------------------------
Class: CanvasRenderTarget2D.TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	delegate OnCanvasRenderTargetUpdate;//[Offset: 0x108, Size: 0x10] 0x78d72ed500
	World* World;//[Offset: 0x118, Size: 0x8] 0x78d72ed580
	bool bShouldClearRenderTargetOnReceiveUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x78d72ed600
	void UpdateResource();// 0xc809234 0x78d72f7240
	void ReceiveUpdate(Canvas* Canvas, int Width, int Height);// 0xaa7cd18 0x78d72f7320
	void GetSize(out int Width, out int Height);// 0xc808fac 0x78d72f3a40
	static CanvasRenderTarget2D* CreateCanvasRenderTarget2D(Object* WorldContextObject, class CanvasRenderTarget2D CanvasRenderTarget2DClass, int Width, int Height);// 0xc8090b0 0x78d72f3b20

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8] 0x78d731ea80
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18] 0x78d731eb00
	Font* SmallFont;//[Offset: 0x178, Size: 0x8] 0x78d731eb80
	SoftObjectPath SmallFontName;//[Offset: 0x180, Size: 0x18] 0x78d731ec00
	Font* MediumFont;//[Offset: 0x198, Size: 0x8] 0x78d731ec80
	SoftObjectPath MediumFontName;//[Offset: 0x1a0, Size: 0x18] 0x78d731ed00
	Font* LargeFont;//[Offset: 0x1b8, Size: 0x8] 0x78d731ed80
	SoftObjectPath LargeFontName;//[Offset: 0x1c0, Size: 0x18] 0x78d731ee00
	Font* SubtitleFont;//[Offset: 0x1d8, Size: 0x8] 0x78d731ee80
	SoftObjectPath SubtitleFontName;//[Offset: 0x1e0, Size: 0x18] 0x78d731ef00
	Font*[] AdditionalFonts;//[Offset: 0x1f8, Size: 0x10] 0x78d7331460
	FString[] AdditionalFontNames;//[Offset: 0x208, Size: 0x10] 0x78d727f7e0
	class Console* ConsoleClass;//[Offset: 0x218, Size: 0x8] 0x78d727f880
	SoftClassPath ConsoleClassName;//[Offset: 0x220, Size: 0x18] 0x78d731f080
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x238, Size: 0x8] 0x78d727f920
	SoftClassPath GameViewportClientClassName;//[Offset: 0x240, Size: 0x18] 0x78d731f100
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x258, Size: 0x8] 0x78d727f9c0
	SoftClassPath LocalPlayerClassName;//[Offset: 0x260, Size: 0x18] 0x78d731f180
	class WorldSettings* WorldSettingsClass;//[Offset: 0x278, Size: 0x8] 0x78d727fa60
	SoftClassPath WorldSettingsClassName;//[Offset: 0x280, Size: 0x18] 0x78d731f200
	SoftClassPath NavigationSystemClassName;//[Offset: 0x298, Size: 0x18] 0x78d731f280
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x2b0, Size: 0x8] 0x78d727fb00
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x2b8, Size: 0x18] 0x78d731f300
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x2d0, Size: 0x8] 0x78d727fba0
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x2d8, Size: 0x18] 0x78d731f380
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x2f0, Size: 0x8] 0x78d727fc40
	SoftClassPath AIControllerClassName;//[Offset: 0x2f8, Size: 0x18] 0x78d731f400
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x310, Size: 0x8] 0x78d727fce0
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x318, Size: 0x18] 0x78d731f480
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x330, Size: 0x18] 0x78d731f500
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x348, Size: 0x8] 0x78d727fd80
	GameUserSettings* GameUserSettings;//[Offset: 0x350, Size: 0x8] 0x78d731f580
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x358, Size: 0x8] 0x78d727fe20
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x360, Size: 0x18] 0x78d731f600
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x378, Size: 0x18] 0x78d731f680
	SoftClassPath GameSingletonClassName;//[Offset: 0x390, Size: 0x18] 0x78d731f700
	Object* GameSingleton;//[Offset: 0x3a8, Size: 0x8] 0x78d731f780
	SoftClassPath AssetManagerClassName;//[Offset: 0x3b0, Size: 0x18] 0x78d731d700
	AssetManager* AssetManager;//[Offset: 0x3c8, Size: 0x8] 0x78d731d780
	Texture2D* DefaultTexture;//[Offset: 0x3d0, Size: 0x8] 0x78d731d800
	SoftObjectPath DefaultTextureName;//[Offset: 0x3d8, Size: 0x18] 0x78d731d880
	Texture* DefaultDiffuseTexture;//[Offset: 0x3f0, Size: 0x8] 0x78d731d900
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x3f8, Size: 0x18] 0x78d731d980
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x410, Size: 0x8] 0x78d731da00
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x418, Size: 0x18] 0x78d731da80
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x430, Size: 0x8] 0x78d731db00
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x438, Size: 0x18] 0x78d731db80
	Texture2D* DefaultBokehTexture;//[Offset: 0x450, Size: 0x8] 0x78d731dc00
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x458, Size: 0x18] 0x78d731dc80
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x470, Size: 0x8] 0x78d731dd00
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x478, Size: 0x18] 0x78d731dd80
	Material* WireframeMaterial;//[Offset: 0x490, Size: 0x8] 0x78d731de00
	FString WireframeMaterialName;//[Offset: 0x498, Size: 0x10] 0x78d731de80
	Material* DebugMeshMaterial;//[Offset: 0x4a8, Size: 0x8] 0x78d731df00
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x4b0, Size: 0x18] 0x78d731df80
	Material* EmissiveMeshMaterial;//[Offset: 0x4c8, Size: 0x8] 0x78d731e000
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x4d0, Size: 0x18] 0x78d731e080
	Material* LevelColorationLitMaterial;//[Offset: 0x4e8, Size: 0x8] 0x78d731e100
	FString LevelColorationLitMaterialName;//[Offset: 0x4f0, Size: 0x10] 0x78d731e180
	Material* LevelColorationUnlitMaterial;//[Offset: 0x500, Size: 0x8] 0x78d731e200
	FString LevelColorationUnlitMaterialName;//[Offset: 0x508, Size: 0x10] 0x78d731e280
	Material* LightingTexelDensityMaterial;//[Offset: 0x518, Size: 0x8] 0x78d731e300
	FString LightingTexelDensityName;//[Offset: 0x520, Size: 0x10] 0x78d731e380
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x530, Size: 0x8] 0x78d731e400
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x538, Size: 0x10] 0x78d731e480
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x548, Size: 0x8] 0x78d731e500
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x550, Size: 0x10] 0x78d731e580
	Material* RemoveSurfaceMaterial;//[Offset: 0x560, Size: 0x8] 0x78d731e600
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x568, Size: 0x18] 0x78d731e680
	Material* VertexColorMaterial;//[Offset: 0x580, Size: 0x8] 0x78d731e700
	FString VertexColorMaterialName;//[Offset: 0x588, Size: 0x10] 0x78d731c680
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x598, Size: 0x8] 0x78d731c700
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x5a0, Size: 0x10] 0x78d731c780
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x5b0, Size: 0x8] 0x78d731c800
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x5b8, Size: 0x10] 0x78d731c880
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x5c8, Size: 0x8] 0x78d731c900
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x5d0, Size: 0x10] 0x78d731c980
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x5e0, Size: 0x8] 0x78d731ca00
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x5e8, Size: 0x10] 0x78d731ca80
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x5f8, Size: 0x8] 0x78d731cb00
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x600, Size: 0x10] 0x78d731cb80
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x610, Size: 0x18] 0x78d731cc00
	Material* ConstraintLimitMaterial;//[Offset: 0x628, Size: 0x8] 0x78d731cc80
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x630, Size: 0x8] 0x78d731cd00
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x638, Size: 0x8] 0x78d731cd80
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x640, Size: 0x8] 0x78d731ce00
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x648, Size: 0x8] 0x78d731ce80
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x650, Size: 0x8] 0x78d731cf00
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x658, Size: 0x8] 0x78d731cf80
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x660, Size: 0x8] 0x78d731d000
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x668, Size: 0x8] 0x78d731d080
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x670, Size: 0x18] 0x78d731d100
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x688, Size: 0x8] 0x78d731d180
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x690, Size: 0x18] 0x78d731d200
	Material* ArrowMaterial;//[Offset: 0x6a8, Size: 0x8] 0x78d731d280
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x6b0, Size: 0x8] 0x78d731d300
	SoftObjectPath ArrowMaterialName;//[Offset: 0x6b8, Size: 0x18] 0x78d731d380
	LinearColor LightingOnlyBrightness;//[Offset: 0x6d0, Size: 0x10] 0x78d731d400
	LinearColor[] ShaderComplexityColors;//[Offset: 0x6e0, Size: 0x10] 0x78d727fec0
	LinearColor[] QuadComplexityColors;//[Offset: 0x6f0, Size: 0x10] 0x78d727ff60
	LinearColor[] LightComplexityColors;//[Offset: 0x700, Size: 0x10] 0x78d727e340
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x710, Size: 0x10] 0x78d727e3e0
	LinearColor[] LODColorationColors;//[Offset: 0x720, Size: 0x10] 0x78d727e480
	LinearColor[] HLODColorationColors;//[Offset: 0x730, Size: 0x10] 0x78d727e520
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x740, Size: 0x10] 0x78d727e5c0
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x750, Size: 0x4] 0x78d731b700
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x754, Size: 0x4] 0x78d731b780
	float MinLightMapDensity;//[Offset: 0x758, Size: 0x4] 0x78d731b800
	float IdealLightMapDensity;//[Offset: 0x75c, Size: 0x4] 0x78d731b880
	float MaxLightMapDensity;//[Offset: 0x760, Size: 0x4] 0x78d731b900
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x764, Size: 0x1] 0x78d731b980
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x768, Size: 0x4] 0x78d731ba00
	float RenderLightMapDensityColorScale;//[Offset: 0x76c, Size: 0x4] 0x78d731ba80
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x770, Size: 0x10] 0x78d731bb00
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x780, Size: 0x10] 0x78d731bb80
	StatColorMapping[] StatColorMappings;//[Offset: 0x790, Size: 0x10] 0x78d727e660
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x7a0, Size: 0x8] 0x78d731bc80
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x7a8, Size: 0x18] 0x78d731bd00
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x7c0, Size: 0x10] 0x78d727e700
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x7d0, Size: 0x10] 0x78d727e7a0
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x7e0, Size: 0x10] 0x78d727e840
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x7f0, Size: 0x10] 0x78d727e8e0
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x800, Size: 0x8] 0x78d731bf80
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x808, Size: 0x18] 0x78d731c000
	Texture2D* BlueNoiseTexture;//[Offset: 0x820, Size: 0x8] 0x78d731c080
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x828, Size: 0x18] 0x78d731c100
	Texture2D* MiniFontTexture;//[Offset: 0x840, Size: 0x8] 0x78d731c180
	SoftObjectPath MiniFontTextureName;//[Offset: 0x848, Size: 0x18] 0x78d731c200
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x860, Size: 0x8] 0x78d731c280
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x868, Size: 0x18] 0x78d731c300
	Texture2D* LightMapDensityTexture;//[Offset: 0x880, Size: 0x8] 0x78d731c380
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x888, Size: 0x18] 0x78d731c400
	GameViewportClient* GameViewport;//[Offset: 0x8a8, Size: 0x8] 0x78d731c480
	FString[] DeferredCommands;//[Offset: 0x8b0, Size: 0x10] 0x78d727e980
	float NearClipPlane;//[Offset: 0x8c0, Size: 0x4] 0x78d731c580
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c4, Size: 0x1] 0x78d731c600
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c4, Size: 0x1] 0x78d731a580
	int MaximumLoopIterationCount;//[Offset: 0x8c8, Size: 0x4] 0x78d731a600
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cc, Size: 0x1] 0x78d731a680
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cc, Size: 0x1] 0x78d731a700
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cc, Size: 0x1] 0x78d731a780
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cc, Size: 0x1] 0x78d731a800
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cc, Size: 0x1] 0x78d731a880
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cc, Size: 0x1] 0x78d731a900
	float FixedFrameRate;//[Offset: 0x8d0, Size: 0x4] 0x78d731a980
	FloatRange SmoothedFrameRateRange;//[Offset: 0x8d4, Size: 0x10] 0x78d731aa00
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x8e8, Size: 0x8] 0x78d731aa80
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x910, Size: 0x18] 0x78d731ab00
	TimecodeProvider* TimecodeProvider;//[Offset: 0x928, Size: 0x8] 0x78d731ab80
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x950, Size: 0x18] 0x78d731ac00
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968, Size: 0x1] 0x78d731ac80
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x96c, Size: 0x8] 0x78d731ad00
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x974, Size: 0x4] 0x78d731ad80
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x978, Size: 0x1] 0x78d731ae00
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x97c, Size: 0x4] 0x78d731ae80
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x980, Size: 0x1] 0x78d731af00
	Color C_WorldBox;//[Offset: 0x984, Size: 0x4] 0x78d731af80
	Color C_BrushWire;//[Offset: 0x988, Size: 0x4] 0x78d731b000
	Color C_AddWire;//[Offset: 0x98c, Size: 0x4] 0x78d731b080
	Color C_SubtractWire;//[Offset: 0x990, Size: 0x4] 0x78d731b100
	Color C_SemiSolidWire;//[Offset: 0x994, Size: 0x4] 0x78d731b180
	Color C_NonSolidWire;//[Offset: 0x998, Size: 0x4] 0x78d731b200
	Color C_WireBackground;//[Offset: 0x99c, Size: 0x4] 0x78d731b280
	Color C_ScaleBoxHi;//[Offset: 0x9a0, Size: 0x4] 0x78d731b300
	Color C_VolumeCollision;//[Offset: 0x9a4, Size: 0x4] 0x78d731b380
	Color C_BSPCollision;//[Offset: 0x9a8, Size: 0x4] 0x78d731b400
	Color C_OrthoBackground;//[Offset: 0x9ac, Size: 0x4] 0x78d731b480
	Color C_Volume;//[Offset: 0x9b0, Size: 0x4] 0x78d731b500
	Color C_BrushShape;//[Offset: 0x9b4, Size: 0x4] 0x78d731b580
	float StreamingDistanceFactor;//[Offset: 0x9b8, Size: 0x4] 0x78d7319500
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x9c0, Size: 0x10] 0x78d7319580
	enum TransitionType;//[Offset: 0x9d0, Size: 0x1] 0x78d727ea20
	FString TransitionDescription;//[Offset: 0x9d8, Size: 0x10] 0x78d7319680
	FString TransitionGameMode;//[Offset: 0x9e8, Size: 0x10] 0x78d7319700
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9f8, Size: 0x1] 0x78d7319780
	float CameraRotationThreshold;//[Offset: 0x9fc, Size: 0x4] 0x78d7319800
	float CameraTranslationThreshold;//[Offset: 0xa00, Size: 0x4] 0x78d7319880
	float PrimitiveProbablyVisibleTime;//[Offset: 0xa04, Size: 0x4] 0x78d7319900
	float MaxOcclusionPixelsFraction;//[Offset: 0xa08, Size: 0x4] 0x78d7319980
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0c, Size: 0x1] 0x78d7319a00
	int MaxParticleResize;//[Offset: 0xa10, Size: 0x4] 0x78d7319a80
	int MaxParticleResizeWarn;//[Offset: 0xa14, Size: 0x4] 0x78d7319b00
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0xa18, Size: 0x10] 0x78d727eac0
	float NetClientTicksPerSecond;//[Offset: 0xa28, Size: 0x4] 0x78d7319c00
	float DisplayGamma;//[Offset: 0xa2c, Size: 0x4] 0x78d7319c80
	float MinDesiredFrameRate;//[Offset: 0xa30, Size: 0x4] 0x78d7319d00
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0xa34, Size: 0x10] 0x78d7319d80
	LinearColor SelectedMaterialColor;//[Offset: 0xa44, Size: 0x10] 0x78d7319e00
	LinearColor SelectionOutlineColor;//[Offset: 0xa54, Size: 0x10] 0x78d7319e80
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0xa64, Size: 0x10] 0x78d7319f00
	LinearColor SelectedMaterialColorOverride;//[Offset: 0xa74, Size: 0x10] 0x78d7319f80
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa84, Size: 0x1] 0x78d731a000
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa85, Size: 0x1] 0x78d731a080
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa85, Size: 0x1] 0x78d731a100
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa85, Size: 0x1] 0x78d731a180
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa85, Size: 0x1] 0x78d731a200
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0xa88, Size: 0x4] 0x78d731a280
	int ScreenSaverInhibitorSemaphore;//[Offset: 0xa8c, Size: 0x4] 0x78d731a300
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa90, Size: 0x1] 0x78d731a380
	FString ParticleEventManagerClassPath;//[Offset: 0xa98, Size: 0x10] 0x78d731a400
	float SelectionHighlightIntensity;//[Offset: 0xaa8, Size: 0x4] 0x78d731a480
	float BSPSelectionHighlightIntensity;//[Offset: 0xaac, Size: 0x4] 0x78d731a500
	float SelectionHighlightIntensityBillboards;//[Offset: 0xab0, Size: 0x4] 0x78d7318480
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xd20, Size: 0x10] 0x78d727eb60
	FString[] ServerActors;//[Offset: 0xd30, Size: 0x10] 0x78d727ec00
	FString[] RuntimeServerActors;//[Offset: 0xd40, Size: 0x10] 0x78d727eca0
	float NetErrorLogInterval;//[Offset: 0xd50, Size: 0x4] 0x78d7318680
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd54, Size: 0x1] 0x78d7318700
	int NextWorldContextHandle;//[Offset: 0xd68, Size: 0x4] 0x78d7318780

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78d736a500
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78d7368480
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 0x4] 0x78d7368500
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 0x4] 0x78d7368580
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 0x4] 0x78d7368600
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 0x4] 0x78d7368680
	int WindowPosX;//[Offset: 0x90, Size: 0x4] 0x78d7368700
	int WindowPosY;//[Offset: 0x94, Size: 0x4] 0x78d7368780
	int FullscreenMode;//[Offset: 0x98, Size: 0x4] 0x78d7368800
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 0x4] 0x78d7368880
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 0x4] 0x78d7368900
	uint32 Version;//[Offset: 0xa4, Size: 0x4] 0x78d7368980
	int AudioQualityLevel;//[Offset: 0xa8, Size: 0x4] 0x78d7368a00
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 0x4] 0x78d7368a80
	float FrameRateLimit;//[Offset: 0xb0, Size: 0x4] 0x78d7368b00
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 0x4] 0x78d7368b80
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1] 0x78d7368c00
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 0x4] 0x78d7368c80
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 0x4] 0x78d7368d00
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 0x4] 0x78d7368d80
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 0x4] 0x78d7368e00
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 0x4] 0x78d7368e80
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 0x4] 0x78d7368f00
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 0x4] 0x78d7368f80
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 0x10] 0x78d73320e0
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 0x10] 0x78d7332180
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 0x4] 0x78d7369100
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1] 0x78d7369180
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 0x4] 0x78d7369200
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x110, Size: 0x10] 0x78d7369280
	void ValidateSettings();// 0xc86cfc0 0x78d732db40
	bool SupportsHDRDisplayOutput();// 0xc86cb5c 0x78d732dc20
	void SetVSyncEnabled(bool bEnable);// 0xc86e150 0x78d732dd00
	void SetVisualEffectQuality(int Value);// 0xc86d2e4 0x78d732dde0
	void SetViewDistanceQuality(int Value);// 0xc86d654 0x78d732dec0
	void SetToDefaults();// 0xc86ceb4 0x78d732dfa0
	void SetTextureQuality(int Value);// 0xc86d3c0 0x78d732e080
	void SetShadowQuality(int Value);// 0xc86d578 0x78d732e160
	void SetShadingQuality(int Value);// 0xc86d050 0x78d732e240
	void SetScreenResolution(IntPoint Resolution);// 0xc86e344 0x78d732e320
	void SetResolutionScaleValueEx(float NewScaleValue);// 0xc86d7a4 0x78d732e400
	void SetResolutionScaleValue(int NewScaleValue);// 0xc86d84c 0x78d732e4e0
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0xc86d6fc 0x78d732e5c0
	void SetPostProcessingQuality(int Value);// 0xc86d208 0x78d732e6a0
	void SetOverallScalabilityLevel(int Value);// 0xc86dcbc 0x78d732adc0
	void SetFullscreenMode(byte InFullscreenMode);// 0xc86e234 0x78d732aea0
	void SetFrameRateLimit(float NewLimit);// 0xc86dda0 0x78d732af80
	void SetFoliageQuality(int Value);// 0xc86d12c 0x78d732b060
	void SetDynamicResolutionEnabled(bool bEnable);// 0xc86e068 0x78d732b140
	void SetBenchmarkFallbackValues();// 0xc86df0c 0x78d732b220
	void SetAudioQualityLevel(int QualityLevel);// 0xc86de64 0x78d732b300
	void SetAntiAliasingQuality(int Value);// 0xc86d49c 0x78d732b3e0
	void SaveSettings();// 0xc86ceec 0x78d732b4c0
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0xc86cbb8 0x78d732b5a0
	void RevertVideoMode();// 0xc86df20 0x78d732b680
	void ResetToCurrentSettings();// 0xc86ced0 0x78d732b760
	void LoadSettings(bool bForceReload);// 0xc86cf08 0x78d732b840
	bool IsVSyncEnabled();// 0xc86e118 0x78d732b920
	bool IsVSyncDirty();// 0xc86df88 0x78d732ba00
	bool IsScreenResolutionDirty();// 0xc86dff8 0x78d732bae0
	bool IsHDREnabled();// 0xc86ca00 0x78d732bbc0
	bool IsFullscreenModeDirty();// 0xc86dfc0 0x78d732bca0
	bool IsDynamicResolutionEnabled();// 0xc86e030 0x78d732bd80
	bool IsDynamicResolutionDirty();// 0xc86df50 0x78d732be60
	bool IsDirty();// 0xc86cfdc 0x78d732bf40
	int GetVisualEffectQuality();// 0xc86d2b0 0x78d732c020
	int GetViewDistanceQuality();// 0xc86d620 0x78d732c100
	int GetTextureQuality();// 0xc86d38c 0x78d732c1e0
	static int GetSyncInterval();// 0xc86cd64 0x78d732c2c0
	int GetShadowQuality();// 0xc86d544 0x78d732c3a0
	int GetShadingQuality();// 0xc86d01c 0x78d732c480
	IntPoint GetScreenResolution();// 0xc86e458 0x78d732c560
	float GetResolutionScaleNormalized();// 0xc86d8f4 0x78d732c640
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0xc86d928 0x78d732c720
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0xc86dad4 0x78d732c800
	float GetRecommendedResolutionScale();// 0xc86ce3c 0x78d732c8e0
	byte GetPreferredFullscreenMode();// 0xc86e200 0x78d732c9c0
	int GetPostProcessingQuality();// 0xc86d1d4 0x78d73290e0
	int GetOverallScalabilityLevel();// 0xc86dc80 0x78d73291c0
	IntPoint GetLastConfirmedScreenResolution();// 0xc86e420 0x78d73292a0
	byte GetLastConfirmedFullscreenMode();// 0xc86e2dc 0x78d7329380
	static GameUserSettings* GetGameUserSettings();// 0xc86ccfc 0x78d7329460
	byte GetFullscreenMode();// 0xc86e310 0x78d7329540
	float GetFrameRateLimit();// 0xc86dd6c 0x78d7329620
	static int GetFramePace();// 0xc86cd30 0x78d7329700
	int GetFoliageQuality();// 0xc86d0f8 0x78d73297e0
	IntPoint GetDesktopResolution();// 0xc86e3e8 0x78d73298c0
	static IntPoint GetDefaultWindowPosition();// 0xc86cdcc 0x78d73299a0
	static byte GetDefaultWindowMode();// 0xc86cd98 0x78d7329a80
	float GetDefaultResolutionScale();// 0xc86ce78 0x78d7329b60
	static IntPoint GetDefaultResolution();// 0xc86ce04 0x78d7329c40
	int GetCurrentHDRDisplayNits();// 0xc86ca38 0x78d7329d20
	int GetAudioQualityLevel();// 0xc86de48 0x78d7329e00
	int GetAntiAliasingQuality();// 0xc86d468 0x78d7329ee0
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0xc86ca6c 0x78d7329fc0
	void ConfirmVideoMode();// 0xc86df34 0x78d732a0a0
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0xc86e55c 0x78d732a180
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0xc86e490 0x78d732a260
	void ApplyNonResolutionSettings();// 0xc86e540 0x78d732a340
	void ApplyHardwareBenchmarkResults();// 0xc86cb9c 0x78d732a420

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10] 0x78dbf0bb80
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10] 0x78dbe5d080
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1] 0x78dbf0bd80

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4] 0x78dbf0bc00
	Color Out;//[Offset: 0x4, Size: 0x4] 0x78dbf0bc80

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8] 0x78dbf0c280
	FName NewGameName;//[Offset: 0x8, Size: 0x8] 0x78dbf0c300

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8] 0x78dbf0c380
	FName OldClassName;//[Offset: 0x8, Size: 0x8] 0x78dbf0c400
	FName NewClassName;//[Offset: 0x10, Size: 0x8] 0x78dbf0c480
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8] 0x78dbf0c500
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8] 0x78dbf0c580
	FName NewClassClass;//[Offset: 0x28, Size: 0x8] 0x78dbf0c600
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8] 0x78dbf0a580
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78dbf0a600

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10] 0x78dbf0a780
	FString NewPluginName;//[Offset: 0x10, Size: 0x10] 0x78dbf0a800

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8] 0x78dbf0a680
	FName NewStructName;//[Offset: 0x8, Size: 0x8] 0x78dbf0a700

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x78e6834400
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x78e6834480

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x78e6834500
	float Value;//[Offset: 0x4, Size: 0x4] 0x78e6831180

--------------------------------
Class: EngineCustomTimeStep.Object

--------------------------------
Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4] 0x78d722df00
	Timecode GetTimecode();// 0xca271d8 0x78d7251200
	enum GetSynchronizationState();// 0xca270f4 0x78d72512e0
	QualifiedFrameTime GetQualifiedFrameTime();// 0xca27278 0x78d72513c0
	FrameRate GetFrameRate();// 0xca27130 0x78d72514a0
	Timecode GetDelayedTimecode();// 0xca2716c 0x78d7251580
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0xca27244 0x78d7251660
	bool FetchTimecode(out QualifiedFrameTime OutFrameTime);// 0xca272d0 0x78d7251740
	void FetchAndUpdate();// 0xca272b4 0x78d7251820

--------------------------------
Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4] 0x78e6834800
	int Minutes;//[Offset: 0x4, Size: 0x4] 0x78e6834880
	int Seconds;//[Offset: 0x8, Size: 0x4] 0x78e6834900
	int Frames;//[Offset: 0xc, Size: 0x4] 0x78e6834980
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78e6834a00

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8] 0x78e6834a80
	FrameRate Rate;//[Offset: 0x8, Size: 0x8] 0x78e6834b00

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78dbf0be00
	Rotator Rotation;//[Offset: 0xc, Size: 0xc] 0x78dbf0be80
	FString Comment;//[Offset: 0x18, Size: 0x10] 0x78dbf0bf00

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8] 0x78dbf0cd80
	FName DriverClassName;//[Offset: 0x8, Size: 0x8] 0x78dbf0ce00
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8] 0x78dbf0ce80

--------------------------------
Class: CheckBoxStyleAsset.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x28, Size: 0x580] 0x78d7304e80

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1] 0x78dbe44d00
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0x88] 0x78dbe44d80
	SlateBrush UncheckedHoveredImage;//[Offset: 0x98, Size: 0x88] 0x78dbe44e00
	SlateBrush UncheckedPressedImage;//[Offset: 0x120, Size: 0x88] 0x78dbe44e80
	SlateBrush CheckedImage;//[Offset: 0x1a8, Size: 0x88] 0x78dbe44f00
	SlateBrush CheckedHoveredImage;//[Offset: 0x230, Size: 0x88] 0x78dbe44f80
	SlateBrush CheckedPressedImage;//[Offset: 0x2b8, Size: 0x88] 0x78dbe45000
	SlateBrush UndeterminedImage;//[Offset: 0x340, Size: 0x88] 0x78dbe45080
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x3c8, Size: 0x88] 0x78dbe45100
	SlateBrush UndeterminedPressedImage;//[Offset: 0x450, Size: 0x88] 0x78dbe45180
	Margin Padding;//[Offset: 0x4d8, Size: 0x10] 0x78dbe45200
	SlateColor ForegroundColor;//[Offset: 0x4e8, Size: 0x28] 0x78dbe45280
	SlateColor BorderBackgroundColor;//[Offset: 0x510, Size: 0x28] 0x78dbe43200
	SlateSound CheckedSlateSound;//[Offset: 0x538, Size: 0x18] 0x78dbe43280
	SlateSound UncheckedSlateSound;//[Offset: 0x550, Size: 0x18] 0x78dbe43300
	SlateSound HoveredSlateSound;//[Offset: 0x568, Size: 0x18] 0x78dbe43380

--------------------------------
Class: GameMapsSettings.Object
	FString LocalMapOptions;//[Offset: 0x28, Size: 0x10] 0x78d71f5280
	SoftObjectPath TransitionMap;//[Offset: 0x38, Size: 0x18] 0x78d71f3200
	bool bUseSplitscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78d71f3280
	byte TwoPlayerSplitscreenLayout;//[Offset: 0x51, Size: 0x1] 0x78d71f3300
	byte ThreePlayerSplitscreenLayout;//[Offset: 0x52, Size: 0x1] 0x78d71f3380
	enum FourPlayerSplitscreenLayout;//[Offset: 0x53, Size: 0x1] 0x78d7156140
	bool bOffsetPlayerGamepadIds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78d71f3480
	SoftClassPath GameInstanceClass;//[Offset: 0x58, Size: 0x18] 0x78d71f3500
	SoftObjectPath GameDefaultMap;//[Offset: 0x70, Size: 0x18] 0x78d71f3580
	SoftObjectPath ServerDefaultMap;//[Offset: 0x88, Size: 0x18] 0x78d71f3600
	SoftClassPath GlobalDefaultGameMode;//[Offset: 0xa0, Size: 0x18] 0x78d71f3680
	SoftClassPath GlobalDefaultServerGameMode;//[Offset: 0xb8, Size: 0x18] 0x78d71f3700
	GameModeName[] GameModeMapPrefixes;//[Offset: 0xd0, Size: 0x10] 0x78d71561e0
	GameModeName[] GameModeClassAliases;//[Offset: 0xe0, Size: 0x10] 0x78d7156280
	void SetSkipAssigningGamepadToPlayer1(bool bSkipFirstPlayer);// 0xb00a4f0 0x78d71ec800
	bool GetSkipAssigningGamepadToPlayer1();// 0xb00a4b8 0x78d71ec8e0
	static GameMapsSettings* GetGameMapsSettings();// 0xb00a5a0 0x78d71ec9c0

--------------------------------
Class: GameModeName
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78dbe45e80
	SoftClassPath GameMode;//[Offset: 0x10, Size: 0x18] 0x78dbe45f00

--------------------------------
Class: PlatformInterfaceBase.Object
	DelegateArray[] AllDelegates;//[Offset: 0x28, Size: 0x10] 0x78d727e020

--------------------------------
Class: DelegateArray
	delegate[] Delegates;//[Offset: 0x0, Size: 0x10] 0x78dbf20060

--------------------------------
Class: CloudStorageBase.PlatformInterfaceBase.Object
	FString[] LocalCloudFiles;//[Offset: 0x38, Size: 0x10] 0x78d727df80
	bool bSuppressDelegateCalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78d7304400

--------------------------------
Class: Commandlet.Object
	FString HelpDescription;//[Offset: 0x28, Size: 0x10] 0x78dc0bd680
	FString HelpUsage;//[Offset: 0x38, Size: 0x10] 0x78dc0bb600
	FString HelpWebLink;//[Offset: 0x48, Size: 0x10] 0x78dc0bb680
	FString[] HelpParamNames;//[Offset: 0x58, Size: 0x10] 0x78dbff95c0
	FString[] HelpParamDescriptions;//[Offset: 0x68, Size: 0x10] 0x78dbff9660
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78dc0bb800
	bool IsClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x78dc0bb880
	bool IsEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x78dc0bb900
	bool LogToConsole;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78, Size: 0x1] 0x78dc0bb980
	bool ShowErrorCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 0x1] 0x78dc0bba00
	bool ShowProgress;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 0x1] 0x78dc0bba80

--------------------------------
Class: ComponentDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintComponentDelegateBinding[] ComponentDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78d727dbc0

--------------------------------
Class: BlueprintComponentDelegateBinding
	FName ComponentPropertyName;//[Offset: 0x0, Size: 0x8] 0x78dbf06f80
	FName DelegatePropertyName;//[Offset: 0x8, Size: 0x8] 0x78dbf07000
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8] 0x78dbf07080

--------------------------------
Class: ActorComponentInstanceDataTransientOuter.Object

--------------------------------
Class: CompositeCurveTable.CurveTable.Object
	CurveTable*[] ParentTables;//[Offset: 0xa0, Size: 0x10] 0x78d727da80
	CurveTable*[] OldParentTables;//[Offset: 0xb0, Size: 0x10] 0x78d727db20

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8] 0x78d71d0f80
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78d71d1000
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78d71d1080
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x78d719f800
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10] 0x78d719f880

--------------------------------
Class: CompositeDataTable.DataTable.Object
	DataTable*[] ParentTables;//[Offset: 0xb0, Size: 0x10] 0x78d727d940
	DataTable*[] OldParentTables;//[Offset: 0xc0, Size: 0x10] 0x78d727d9e0

--------------------------------
Class: ConsoleSettings.Object
	int MaxScrollbackSize;//[Offset: 0x28, Size: 0x4] 0x78d71f3a00
	AutoCompleteCommand[] ManualAutoCompleteList;//[Offset: 0x30, Size: 0x10] 0x78d7156320
	FString[] AutoCompleteMapPaths;//[Offset: 0x40, Size: 0x10] 0x78d71563c0
	float BackgroundOpacityPercentage;//[Offset: 0x50, Size: 0x4] 0x78d71f3b80
	bool bOrderTopToBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78d71f3c00
	bool bDisplayHelpInAutoComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x78d71f3c80
	Color InputColor;//[Offset: 0x58, Size: 0x4] 0x78d71f3d00
	Color HistoryColor;//[Offset: 0x5c, Size: 0x4] 0x78d71f3d80
	Color AutoCompleteCommandColor;//[Offset: 0x60, Size: 0x4] 0x78d71f3e00
	Color AutoCompleteCVarColor;//[Offset: 0x64, Size: 0x4] 0x78d71f3e80
	Color AutoCompleteFadedColor;//[Offset: 0x68, Size: 0x4] 0x78d71f3f00

--------------------------------
Class: AutoCompleteCommand
	FString Command;//[Offset: 0x0, Size: 0x10] 0x78dbe45f80
	FString desc;//[Offset: 0x10, Size: 0x10] 0x78dbe46000

--------------------------------
Class: ControlChannel.Channel.Object

--------------------------------
Class: StreamingSettings.DeveloperSettings.Object
	bool AsyncLoadingThreadEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78d7305580
	bool WarnIfTimeLimitExceeded;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78d7305600
	float TimeLimitExceededMultiplier;//[Offset: 0x3c, Size: 0x4] 0x78d7305680
	float TimeLimitExceededMinTime;//[Offset: 0x40, Size: 0x4] 0x78d7305700
	int MinBulkDataSizeForAsyncLoading;//[Offset: 0x44, Size: 0x4] 0x78d7305780
	bool UseBackgroundLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78d7305800
	bool AsyncLoadingUseFullTimeLimit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x78d7305880
	float AsyncLoadingTimeLimit;//[Offset: 0x4c, Size: 0x4] 0x78d7305900
	float PriorityAsyncLoadingExtraTime;//[Offset: 0x50, Size: 0x4] 0x78d7305980
	float LevelStreamingActorsUpdateTimeLimit;//[Offset: 0x54, Size: 0x4] 0x78d7305a00
	float PriorityLevelStreamingActorsUpdateExtraTime;//[Offset: 0x58, Size: 0x4] 0x78d7305a80
	int LevelStreamingComponentsRegistrationGranularity;//[Offset: 0x5c, Size: 0x4] 0x78d7305b00
	float LevelStreamingUnregisterComponentsTimeLimit;//[Offset: 0x60, Size: 0x4] 0x78d7305b80
	int LevelStreamingComponentsUnregistrationGranularity;//[Offset: 0x64, Size: 0x4] 0x78d7305c00
	bool FlushStreamingOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78d7305c80
	bool EventDrivenLoaderEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x78d7305d00

--------------------------------
Class: GarbageCollectionSettings.DeveloperSettings.Object
	float TimeBetweenPurgingPendingKillObjects;//[Offset: 0x38, Size: 0x4] 0x78d7306e80
	bool FlushStreamingOnGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78d7306f00
	bool AllowParallelGC;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78d7306f80
	bool IncrementalBeginDestroyEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x78d7307000
	bool MultithreadedDestructionEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x78d7307080
	bool CreateGCClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x78d7307100
	bool AssetClusteringEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x78d7307180
	bool ActorClusteringEnabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1] 0x78d7307200
	bool BlueprintClusteringEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1] 0x78d7307280
	bool UseDisregardForGCOnDedicatedServers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1] 0x78d7307300
	int MinGCClusterSize;//[Offset: 0x40, Size: 0x4] 0x78d7307380
	int NumRetriesBeforeForcingGC;//[Offset: 0x44, Size: 0x4] 0x78d7305300
	int MaxObjectsNotConsideredByGC;//[Offset: 0x48, Size: 0x4] 0x78d7305380
	int SizeOfPermanentObjectPool;//[Offset: 0x4c, Size: 0x4] 0x78d7305400
	int MaxObjectsInGame;//[Offset: 0x50, Size: 0x4] 0x78d7305480
	int MaxObjectsInEditor;//[Offset: 0x54, Size: 0x4] 0x78d7305500

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistanceSizePair[] CullDistances;//[Offset: 0x258, Size: 0x10] 0x78d727d800
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1] 0x78d7306e00

--------------------------------
Class: CullDistanceSizePair
	float Size;//[Offset: 0x0, Size: 0x4] 0x78dbf08f80
	float CullDistance;//[Offset: 0x4, Size: 0x4] 0x78dbf09000

--------------------------------
Class: CurveEdPresetCurve.Object

--------------------------------
Class: CurveLinearColorAtlas.Texture2D.Texture.StreamableRenderAsset.Object
	uint32 TextureSize;//[Offset: 0x100, Size: 0x4] 0x78d7307e00
	CurveLinearColor*[] GradientCurves;//[Offset: 0x108, Size: 0x10] 0x78d727d760
	bool GetCurvePosition(CurveLinearColor* InCurve, out float Position);// 0xc823818 0x78d72fa340

--------------------------------
Class: CurveSourceInterface.Interface.Object
	float GetCurveValue(FName CurveName);// 0xc823dd4 0x78d72fa0a0
	void GetCurves(out NamedCurveValue[] OutValues);// 0xc823ce8 0x78d72fa180
	FName GetBindingName();// 0xc823e8c 0x78d72fa260

--------------------------------
Class: NamedCurveValue
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbf08d80
	float Value;//[Offset: 0x8, Size: 0x4] 0x78dbf08e00

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: DataTableFunctionLibrary.BlueprintFunctionLibrary.Object
	static void GetDataTableRowNames(DataTable* Table, out FName[] OutRowNames);// 0xc8261d4 0x78d72f9b60
	static bool GetDataTableRowFromName(DataTable* Table, FName RowName, out TableRowBase OutRow);// 0xc8267ac 0x78d72f9c40
	static FString[] GetDataTableColumnAsString(const DataTable* DataTable, FName PropertyName);// 0xc825fd4 0x78d72f9d20
	static void EvaluateCurveTableRow(CurveTable* CurveTable, FName RowName, float InXY, out byte OutResult, out float OutXY, FString ContextString);// 0xc8263e8 0x78d72f9e00
	static bool DoesDataTableRowExist(DataTable* Table, FName RowName);// 0xc8262f4 0x78d72f9ee0

--------------------------------
Class: TableRowBase

--------------------------------
Class: DebugCameraControllerSettings.DeveloperSettings.Object
	DebugCameraControllerSettingsViewModeIndex[] CycleViewModes;//[Offset: 0x38, Size: 0x10] 0x78d727d4e0

--------------------------------
Class: DebugCameraControllerSettingsViewModeIndex
	byte ViewModeIndex;//[Offset: 0x8, Size: 0x1] 0x78dbf09c80

--------------------------------
Class: DebugCameraHUD.HUD.Actor.Object

--------------------------------
Class: DebugDrawService.BlueprintFunctionLibrary.Object

--------------------------------
Class: DecalActor.Actor.Object
	DecalComponent* Decal;//[Offset: 0x220, Size: 0x8] 0x78d730e380
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0xc827fb4 0x78d72fb300
	MaterialInterface* GetDecalMaterial();// 0xc827f80 0x78d72fb3e0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0xc827f44 0x78d72fb4c0

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x208, Size: 0x8] 0x78d730d800
	int SortOrder;//[Offset: 0x210, Size: 0x4] 0x78d730d880
	float FadeScreenSize;//[Offset: 0x214, Size: 0x4] 0x78d730d900
	float FadeStartDelay;//[Offset: 0x218, Size: 0x4] 0x78d730d980
	float FadeDuration;//[Offset: 0x21c, Size: 0x4] 0x78d730da00
	float FadeInDuration;//[Offset: 0x220, Size: 0x4] 0x78d730da80
	float FadeInStartDelay;//[Offset: 0x224, Size: 0x4] 0x78d730db00
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78d730db80
	Vector DecalSize;//[Offset: 0x22c, Size: 0xc] 0x78d730dc00
	void SetSortOrder(int Value);// 0xc82d7e4 0x78d72fe320
	void SetFadeScreenSize(float NewFadeScreenSize);// 0xc82d88c 0x78d72fe400
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0xc82da24 0x78d72fe4e0
	void SetFadeIn(float StartDelay, float Duaration);// 0xc82d934 0x78d72fe5c0
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0xc82d73c 0x78d72fe6a0
	float GetFadeStartDelay();// 0xc82dc04 0x78d72fadc0
	float GetFadeInStartDelay();// 0xc82db9c 0x78d72faea0
	float GetFadeInDuration();// 0xc82db68 0x78d72faf80
	float GetFadeDuration();// 0xc82dbd0 0x78d72fb060
	MaterialInterface* GetDecalMaterial();// 0xc82d708 0x78d72fb140
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0xc82d6cc 0x78d72fb220

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x140, Size: 0x4] 0x78d7341780
	float Acceleration;//[Offset: 0x144, Size: 0x4] 0x78d7341800
	float Deceleration;//[Offset: 0x148, Size: 0x4] 0x78d7341880
	float TurningBoost;//[Offset: 0x14c, Size: 0x4] 0x78d7341900
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1] 0x78d7341980

--------------------------------
Class: DemoNetConnection.NetConnection.Player.Object

--------------------------------
Class: PendingNetGame.Object
	NetDriver* NetDriver;//[Offset: 0x30, Size: 0x8] 0x78d7311000
	DemoNetDriver* DemoNetDriver;//[Offset: 0x38, Size: 0x8] 0x78d7311080

--------------------------------
Class: DemoPendingNetGame.PendingNetGame.Object

--------------------------------
Class: DestructibleInterface.Interface.Object

--------------------------------
Class: DeviceProfileFragment.Object

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x40, Size: 0x10] 0x78d742ad00
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78d742ad80
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x78d742ae00

--------------------------------
Class: MaterialShaderQualitySettings.Object
	<FName,ShaderPlatformQualitySettings*> ForwardSettingMap;//[Offset: 0x28, Size: 0x50] 0x78d7103a00

--------------------------------
Class: ShaderPlatformQualitySettings.Object
	MaterialQualityOverrides QualityOverrides;//[Offset: 0x28, Size: 0x9] 0x78d71f3f80

--------------------------------
Class: MaterialQualityOverrides
	bool bDiscardQualityDuringCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe46080
	bool bEnableOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78dbe46100
	bool bForceFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78dbe46180
	bool bForceNonMetal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78dbe46200
	bool bForceDisableLMDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78dbe46280
	bool bForceLQReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x78dbe46300
	bool bForceDisablePreintegratedGF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x78dbe44280
	bool bDisableMaterialNormalCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1] 0x78dbe44300
	enum MobileShadowQuality;//[Offset: 0x8, Size: 0x1] 0x78d361f7e0

--------------------------------
Class: DialogueSoundWaveProxy.SoundBase.Object

--------------------------------
Class: DialogueVoice.Object
	byte Gender;//[Offset: 0x28, Size: 0x1] 0x78d7310b80
	byte Plurality;//[Offset: 0x29, Size: 0x1] 0x78d7310c00
	Guid LocalizationGUID;//[Offset: 0x2c, Size: 0x10] 0x78d7310c80

--------------------------------
Class: DialogueWave.Object
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78d7310880
	bool bOverride_SubtitleOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78d7310900
	FString SpokenText;//[Offset: 0x30, Size: 0x10] 0x78d7310980
	FString SubtitleOverride;//[Offset: 0x40, Size: 0x10] 0x78d7310a00
	DialogueContextMapping[] ContextMappings;//[Offset: 0x50, Size: 0x10] 0x78d727f240
	Guid LocalizationGUID;//[Offset: 0x60, Size: 0x10] 0x78d7310b00

--------------------------------
Class: DialogueContextMapping
	DialogueContext Context;//[Offset: 0x0, Size: 0x18] 0x78dbf0af80
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8] 0x78dbf0b000
	FString LocalizationKeyFormat;//[Offset: 0x20, Size: 0x10] 0x78dbf0b080
	DialogueSoundWaveProxy* Proxy;//[Offset: 0x30, Size: 0x8] 0x78dbf0b100

--------------------------------
Class: DialogueContext
	DialogueVoice* Speaker;//[Offset: 0x0, Size: 0x8] 0x78dbf0b200
	DialogueVoice*[] Targets;//[Offset: 0x8, Size: 0x10] 0x78dbe5d120

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x220, Size: 0x8] 0x78d7310200
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78d7310280
	void ToggleEnabled();// 0xc915344 0x78d72fd360
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0xc915038 0x78d72fd440
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0xc9150e0 0x78d72fd520
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0xc914f90 0x78d72fd600
	void SetLightColor(LinearColor NewLightColor);// 0xc9151c0 0x78d72fd6e0
	void SetEnabled(bool bSetEnabled);// 0xc915390 0x78d72fd7c0
	void SetCastShadows(bool bNewValue);// 0xc914ee0 0x78d72fd8a0
	void SetBrightness(float NewBrightness);// 0xc91529c 0x78d72fd980
	void SetAffectTranslucentLighting(bool bNewValue);// 0xc914e30 0x78d72fda60
	void OnRep_bEnabled();// 0xc915440 0x78d72fdb40
	bool IsEnabled();// 0xc915358 0x78d72fdc20
	LinearColor GetLightColor();// 0xc915188 0x78d72fdd00
	float GetBrightness();// 0xc915268 0x78d72fdde0

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x234, Size: 0x4] 0x78d7313800
	float MaxDrawDistance;//[Offset: 0x238, Size: 0x4] 0x78d7313880
	float MaxDistanceFadeRange;//[Offset: 0x23c, Size: 0x4] 0x78d7313900
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x78d7313980
	int ShadowMapChannel;//[Offset: 0x244, Size: 0x4] 0x78d7313a00
	float MinRoughness;//[Offset: 0x24c, Size: 0x4] 0x78d7313a80
	float SpecularScale;//[Offset: 0x250, Size: 0x4] 0x78d7313b00
	float ShadowResolutionScale;//[Offset: 0x254, Size: 0x4] 0x78d7313b80
	float ShadowBias;//[Offset: 0x258, Size: 0x4] 0x78d7313c00
	float ShadowSlopeBias;//[Offset: 0x25c, Size: 0x4] 0x78d7313c80
	float ShadowSharpen;//[Offset: 0x260, Size: 0x4] 0x78d7313d00
	float ContactShadowLength;//[Offset: 0x264, Size: 0x4] 0x78d7313d80
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1] 0x78d7313e00
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 0x1] 0x78d7313e80
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x268, Size: 0x1] 0x78d7313f00
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x268, Size: 0x1] 0x78d7313f80
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x268, Size: 0x1] 0x78d7314000
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x268, Size: 0x1] 0x78d7314080
	LightingChannels LightingChannels;//[Offset: 0x269, Size: 0x1] 0x78d7314100
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x270, Size: 0x8] 0x78d7314180
	Vector LightFunctionScale;//[Offset: 0x278, Size: 0xc] 0x78d7314200
	TextureLightProfile* IESTexture;//[Offset: 0x288, Size: 0x8] 0x78d7312180
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1] 0x78d7312200
	float IESBrightnessScale;//[Offset: 0x294, Size: 0x4] 0x78d7312280
	float LightFunctionFadeDistance;//[Offset: 0x298, Size: 0x4] 0x78d7312300
	float DisabledBrightness;//[Offset: 0x29c, Size: 0x4] 0x78d7312380
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 0x1] 0x78d7312400
	float BloomScale;//[Offset: 0x2a4, Size: 0x4] 0x78d7312480
	float BloomThreshold;//[Offset: 0x2a8, Size: 0x4] 0x78d7312500
	float BloomMaxBrightness;//[Offset: 0x2ac, Size: 0x4] 0x78d7312580
	Color BloomTint;//[Offset: 0x2b0, Size: 0x4] 0x78d7312600
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1] 0x78d7312680
	float RayStartOffsetDepthScale;//[Offset: 0x2b8, Size: 0x4] 0x78d7312700
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0xc916bf8 0x78d72febe0
	void SetUseIESBrightness(bool bNewValue);// 0xc916100 0x78d72fecc0
	void SetTransmission(bool bNewValue);// 0xc9165a4 0x78d72feda0
	void SetTemperature(float NewTemperature);// 0xc916a54 0x78d72fee80
	void SetSpecularScale(float NewValue);// 0xc915e60 0x78d72fef60
	void SetShadowSlopeBias(float NewValue);// 0xc915f08 0x78d72ff040
	void SetShadowBias(float NewValue);// 0xc915fb0 0x78d72ff120
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0xc915c68 0x78d72ff200
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0xc916904 0x78d72ff2e0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0xc9169ac 0x78d72ff3c0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0xc91685c 0x78d72ff4a0
	void SetLightFunctionDisabledBrightness(float NewValue);// 0xc9167b4 0x78d72ff580
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0xc916afc 0x78d72ff660
	void SetIntensity(float NewIntensity);// 0xc916d48 0x78d72ff740
	void SetIndirectLightingIntensity(float NewIntensity);// 0xc916ca0 0x78d72ff820
	void SetIESTexture(TextureLightProfile* NewValue);// 0xc9161b0 0x78d72ff900
	void SetIESBrightnessScale(float NewValue);// 0xc916058 0x78d72ff9e0
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0xc915db0 0x78d72ffac0
	void SetEnableLightShaftBloom(bool bNewValue);// 0xc9164f4 0x78d72ffba0
	void SetBloomTint(Color NewValue);// 0xc916258 0x78d72ffc80
	void SetBloomThreshold(float NewValue);// 0xc9163a4 0x78d72ffd60
	void SetBloomScale(float NewValue);// 0xc91644c 0x78d72ffe40
	void SetBloomMaxBrightness(float NewValue);// 0xc9162fc 0x78d72fff20
	void SetAffectTranslucentLighting(bool bNewValue);// 0xc916654 0x78d72fcaa0
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0xc916704 0x78d72fcb80

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x204, Size: 0x10] 0x78d7311580
	float Brightness;//[Offset: 0x214, Size: 0x4] 0x78d7311600
	float Intensity;//[Offset: 0x218, Size: 0x4] 0x78d7311680
	Color LIGHTCOLOR;//[Offset: 0x21c, Size: 0x4] 0x78d7311700
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1] 0x78d7311780
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1] 0x78d7311800
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x220, Size: 0x1] 0x78d7311880
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x220, Size: 0x1] 0x78d7311900
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x220, Size: 0x1] 0x78d7311980
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x220, Size: 0x1] 0x78d7311a00
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x220, Size: 0x1] 0x78d7311a80
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x220, Size: 0x1] 0x78d7311b00
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x221, Size: 0x1] 0x78d7311b80
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x221, Size: 0x1] 0x78d7311c00
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x221, Size: 0x1] 0x78d7311c80
	float DeepShadowLayerDistribution;//[Offset: 0x224, Size: 0x4] 0x78d7311d00
	float IndirectLightingIntensity;//[Offset: 0x228, Size: 0x4] 0x78d7311d80
	float VolumetricScatteringIntensity;//[Offset: 0x22c, Size: 0x4] 0x78d7311e00
	int SamplesPerPixel;//[Offset: 0x230, Size: 0x4] 0x78d7311e80
	void SetSamplesPerPixel(int NewValue);// 0xc917964 0x78d72fcc60
	void SetCastVolumetricShadow(bool bNewValue);// 0xc917ccc 0x78d72fcd40
	void SetCastShadows(bool bNewValue);// 0xc917db4 0x78d72fce20
	void SetCastRaytracedShadow(bool bNewValue);// 0xc917a0c 0x78d72fcf00
	void SetCastDeepShadow(bool bNewValue);// 0xc917c1c 0x78d72fcfe0
	void SetAffectReflection(bool bNewValue);// 0xc917b6c 0x78d72fd0c0
	void SetAffectGlobalIllumination(bool bNewValue);// 0xc917abc 0x78d72fd1a0
	LinearColor GetLightColor();// 0xc917d7c 0x78d72fd280

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x100, Size: 0x4] 0x78d7471500
	float TextureMultiplier;//[Offset: 0x104, Size: 0x4] 0x78d7471580

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float ShadowCascadeBiasDistribution;//[Offset: 0x32c, Size: 0x4] 0x78d7316000
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1] 0x78d7316080
	float OcclusionMaskDarkness;//[Offset: 0x334, Size: 0x4] 0x78d7316100
	float OcclusionDepthRange;//[Offset: 0x338, Size: 0x4] 0x78d7316180
	Vector LightShaftOverrideDirection;//[Offset: 0x33c, Size: 0xc] 0x78d7316200
	float WholeSceneDynamicShadowRadius;//[Offset: 0x348, Size: 0x4] 0x78d7316280
	float DynamicShadowDistanceMovableLight;//[Offset: 0x34c, Size: 0x4] 0x78d7316300
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x350, Size: 0x4] 0x78d7314280
	int DynamicShadowCascades;//[Offset: 0x354, Size: 0x4] 0x78d7314300
	float CascadeDistributionExponent;//[Offset: 0x358, Size: 0x4] 0x78d7314380
	float CascadeTransitionFraction;//[Offset: 0x35c, Size: 0x4] 0x78d7314400
	float ShadowDistanceFadeoutFraction;//[Offset: 0x360, Size: 0x4] 0x78d7314480
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364, Size: 0x1] 0x78d7314500
	int FarShadowCascadeCount;//[Offset: 0x368, Size: 0x4] 0x78d7314580
	float FarShadowDistance;//[Offset: 0x36c, Size: 0x4] 0x78d7314600
	float DistanceFieldShadowDistance;//[Offset: 0x370, Size: 0x4] 0x78d7314680
	float LightSourceAngle;//[Offset: 0x374, Size: 0x4] 0x78d7314700
	float LightSourceSoftAngle;//[Offset: 0x378, Size: 0x4] 0x78d7314780
	float ShadowSourceAngleFactor;//[Offset: 0x37c, Size: 0x4] 0x78d7314800
	float TraceDistance;//[Offset: 0x380, Size: 0x4] 0x78d7314880
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x384, Size: 0x1] 0x78d7314900
	int AtmosphereSunLightIndex;//[Offset: 0x388, Size: 0x4] 0x78d7314980
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x38c, Size: 0x10] 0x78d7314a00
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39c, Size: 0x1] 0x78d7314a80
	bool bCastShadowsOnClouds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39c, Size: 0x1] 0x78d7314b00
	bool bCastShadowsOnAtmosphere;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39c, Size: 0x1] 0x78d7314b80
	bool bCastCloudShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39c, Size: 0x1] 0x78d7314c00
	float CloudShadowStrength;//[Offset: 0x3a0, Size: 0x4] 0x78d7314c80
	float CloudShadowOnAtmosphereStrength;//[Offset: 0x3a4, Size: 0x4] 0x78d7314d00
	float CloudShadowOnSurfaceStrength;//[Offset: 0x3a8, Size: 0x4] 0x78d7314d80
	float CloudShadowDepthBias;//[Offset: 0x3ac, Size: 0x4] 0x78d7314e00
	float CloudShadowExtent;//[Offset: 0x3b0, Size: 0x4] 0x78d7314e80
	float CloudShadowMapResolutionScale;//[Offset: 0x3b4, Size: 0x4] 0x78d7314f00
	float CloudShadowRaySampleCountScale;//[Offset: 0x3b8, Size: 0x4] 0x78d7314f80
	LinearColor CloudScatteredLuminanceScale;//[Offset: 0x3bc, Size: 0x10] 0x78d7315000
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x3cc, Size: 0x10] 0x78d7315080
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3dc, Size: 0x1] 0x78d7315100
	Color ModulatedShadowColor;//[Offset: 0x3e0, Size: 0x4] 0x78d7315180
	float ShadowAmount;//[Offset: 0x3e4, Size: 0x4] 0x78d7315200
	bool bHiddenThisLightInDeferredLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e8, Size: 0x1] 0x78d7315280
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0xc830d74 0x78d7321740
	void SetShadowAmount(float NewValue);// 0xc830acc 0x78d7321820
	void SetOcclusionMaskDarkness(float NewValue);// 0xc830c1c 0x78d7321900
	void SetLightShaftOverrideDirection(Vector NewValue);// 0xc830b74 0x78d73219e0
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0xc830cc4 0x78d7321ac0
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0xc831014 0x78d7321ba0
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0xc8310bc 0x78d7321c80
	void SetDynamicShadowCascades(int NewValue);// 0xc830f6c 0x78d72fe780
	void SetCascadeTransitionFraction(float NewValue);// 0xc830e1c 0x78d72fe860
	void SetCascadeDistributionExponent(float NewValue);// 0xc830ec4 0x78d72fe940
	void SetAtmosphereSunLightIndex(int NewValue);// 0xc830974 0x78d72fea20
	void SetAtmosphereSunLight(bool bNewValue);// 0xc830a1c 0x78d72feb00

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4] 0x78dbf12080

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4] 0x78dbf12100
	float ShadowExponent;//[Offset: 0x4, Size: 0x4] 0x78dbf10080
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78dbf10100

--------------------------------
Class: DistributionFloatConstant.DistributionFloat.Distribution.Object
	float Constant;//[Offset: 0x34, Size: 0x4] 0x78d7315e80

--------------------------------
Class: DistributionFloatConstantCurve.DistributionFloat.Distribution.Object
	InterpCurveFloat ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x78d7315e00

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10] 0x78e6b15880
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78e6832300
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78e6832380

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78e6832400
	float OutVal;//[Offset: 0x4, Size: 0x4] 0x78e6832480
	float ArriveTangent;//[Offset: 0x8, Size: 0x4] 0x78e6832500
	float LeaveTangent;//[Offset: 0xc, Size: 0x4] 0x78e6832580
	byte InterpMode;//[Offset: 0x10, Size: 0x1] 0x78e6832600

--------------------------------
Class: DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object
	FName ParameterName;//[Offset: 0x38, Size: 0x8] 0x78d7315b00
	float MinInput;//[Offset: 0x40, Size: 0x4] 0x78d7315b80
	float MaxInput;//[Offset: 0x44, Size: 0x4] 0x78d7315c00
	float MinOutput;//[Offset: 0x48, Size: 0x4] 0x78d7315c80
	float MaxOutput;//[Offset: 0x4c, Size: 0x4] 0x78d7315d00
	byte ParamMode;//[Offset: 0x50, Size: 0x1] 0x78d7315d80

--------------------------------
Class: DistributionFloatParticleParameter.DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object

--------------------------------
Class: DistributionFloatUniform.DistributionFloat.Distribution.Object
	float Min;//[Offset: 0x34, Size: 0x4] 0x78d7315a00
	float Max;//[Offset: 0x38, Size: 0x4] 0x78d7315a80

--------------------------------
Class: DistributionFloatUniformCurve.DistributionFloat.Distribution.Object
	InterpCurveVector2D ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x78d7315980

--------------------------------
Class: InterpCurveVector2D
	InterpCurvePointVector2D[] Points;//[Offset: 0x0, Size: 0x10] 0x78e6b157e0
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78e6834000
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78e6834080

--------------------------------
Class: InterpCurvePointVector2D
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78e6834100
	Vector2D OutVal;//[Offset: 0x4, Size: 0x8] 0x78e6834180
	Vector2D ArriveTangent;//[Offset: 0xc, Size: 0x8] 0x78e6834200
	Vector2D LeaveTangent;//[Offset: 0x14, Size: 0x8] 0x78e6832180
	byte InterpMode;//[Offset: 0x1c, Size: 0x1] 0x78e6832200

--------------------------------
Class: DistributionVectorConstant.DistributionVector.Distribution.Object
	Vector Constant;//[Offset: 0x34, Size: 0xc] 0x78d7315680
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78d7315700
	byte LockedAxes;//[Offset: 0x41, Size: 0x1] 0x78d7315780

--------------------------------
Class: DistributionVectorConstantCurve.DistributionVector.Distribution.Object
	InterpCurveVector ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x78d7315500
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78d7315580
	byte LockedAxes;//[Offset: 0x51, Size: 0x1] 0x78d7315600

--------------------------------
Class: DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object
	FName ParameterName;//[Offset: 0x44, Size: 0x8] 0x78d7317300
	Vector MinInput;//[Offset: 0x4c, Size: 0xc] 0x78d7317380
	Vector MaxInput;//[Offset: 0x58, Size: 0xc] 0x78d7315300
	Vector MinOutput;//[Offset: 0x64, Size: 0xc] 0x78d7315380
	Vector MaxOutput;//[Offset: 0x70, Size: 0xc] 0x78d7315400
	byte ParamModes;//[Offset: 0x7c, Size: 0x1] 0x78d7315480

--------------------------------
Class: DistributionVectorParticleParameter.DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object

--------------------------------
Class: DistributionVectorUniform.DistributionVector.Distribution.Object
	Vector Max;//[Offset: 0x34, Size: 0xc] 0x78d7317000
	Vector Min;//[Offset: 0x40, Size: 0xc] 0x78d7317080
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x78d7317100
	byte LockedAxes;//[Offset: 0x4d, Size: 0x1] 0x78d7317180
	byte MirrorFlags;//[Offset: 0x4e, Size: 0x1] 0x78d7317200
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 0x1] 0x78d7317280

--------------------------------
Class: DistributionVectorUniformCurve.DistributionVector.Distribution.Object
	InterpCurveTwoVectors ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x78d7316d00
	bool bLockAxes1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78d7316d80
	bool bLockAxes2;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x78d7316e00
	byte LockedAxes;//[Offset: 0x51, Size: 0x1] 0x78d7316e80
	byte MirrorFlags;//[Offset: 0x53, Size: 0x1] 0x78d7316f00
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 0x1] 0x78d7316f80

--------------------------------
Class: InterpCurveTwoVectors
	InterpCurvePointTwoVectors[] Points;//[Offset: 0x0, Size: 0x10] 0x78e6b15600
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78e6833400
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78e6833480

--------------------------------
Class: InterpCurvePointTwoVectors
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78e6833500
	TwoVectors OutVal;//[Offset: 0x4, Size: 0x18] 0x78e6833580
	TwoVectors ArriveTangent;//[Offset: 0x1c, Size: 0x18] 0x78e6833600
	TwoVectors LeaveTangent;//[Offset: 0x34, Size: 0x18] 0x78e6833680
	byte InterpMode;//[Offset: 0x4c, Size: 0x1] 0x78e6833700

--------------------------------
Class: TwoVectors
	Vector v1;//[Offset: 0x0, Size: 0xc] 0x78e6831e00
	Vector v2;//[Offset: 0xc, Size: 0xc] 0x78e6831e80

--------------------------------
Class: DocumentationActor.Actor.Object

--------------------------------
Class: DPICustomScalingRule.Object

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EdGraph.Object
	class EdGraphSchema* Schema;//[Offset: 0x28, Size: 0x8] 0x78d727f100
	EdGraphNode*[] Nodes;//[Offset: 0x30, Size: 0x10] 0x78d727f1a0
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78d7316580
	bool bAllowDeletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1] 0x78d7316600
	bool bAllowRenaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1] 0x78d7316680

--------------------------------
Class: EdGraphSchema.Object

--------------------------------
Class: GraphNodeContextMenuContext.Object
	Blueprint* Blueprint;//[Offset: 0x28, Size: 0x8] 0x78d7318400
	EdGraph* Graph;//[Offset: 0x30, Size: 0x8] 0x78d7316380
	EdGraphNode* Node;//[Offset: 0x38, Size: 0x8] 0x78d7316400
	bool bIsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78d7316480

--------------------------------
Class: EdGraphNode_Documentation.EdGraphNode.Object
	FString Link;//[Offset: 0x98, Size: 0x10] 0x78d7317b80
	FString Excerpt;//[Offset: 0xa8, Size: 0x10] 0x78d7317c00

--------------------------------
Class: ViewModeUtils.Object

--------------------------------
Class: EngineBaseTypes.Object

--------------------------------
Class: HandlerComponentFactory.Object

--------------------------------
Class: EngineHandlerComponentFactory.HandlerComponentFactory.Object

--------------------------------
Class: EngineMessage.LocalMessage.Object
	FString FailedPlaceMessage;//[Offset: 0x28, Size: 0x10] 0x78d731ff00
	FString MaxedOutMessage;//[Offset: 0x38, Size: 0x10] 0x78d731ff80
	FString EnteredMessage;//[Offset: 0x48, Size: 0x10] 0x78d731e780
	FString LeftMessage;//[Offset: 0x58, Size: 0x10] 0x78d731e800
	FString GlobalNameChange;//[Offset: 0x68, Size: 0x10] 0x78d731e880
	FString SpecEnteredMessage;//[Offset: 0x78, Size: 0x10] 0x78d731e900
	FString NewPlayerMessage;//[Offset: 0x88, Size: 0x10] 0x78d731e980
	FString NewSpecMessage;//[Offset: 0x98, Size: 0x10] 0x78d731ea00

--------------------------------
Class: DynamicSubsystem.Subsystem.Object

--------------------------------
Class: EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: EngineTypes.Object

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x220, Size: 0x8] 0x78d731fe00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78d731fe80
	void OnRep_bEnabled();// 0xc85090c 0x78d7320860

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x204, Size: 0x4] 0x78d7340080
	float FogHeightFalloff;//[Offset: 0x208, Size: 0x4] 0x78d7340100
	ExponentialHeightFogData SecondFogData;//[Offset: 0x20c, Size: 0xc] 0x78d7340180
	LinearColor FogInscatteringColor;//[Offset: 0x218, Size: 0x10] 0x78d7340200
	TextureCube* InscatteringColorCubemap;//[Offset: 0x228, Size: 0x8] 0x78d7340280
	float InscatteringColorCubemapAngle;//[Offset: 0x230, Size: 0x4] 0x78d7340300
	LinearColor InscatteringTextureTint;//[Offset: 0x234, Size: 0x10] 0x78d7340380
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x244, Size: 0x4] 0x78d7340400
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x248, Size: 0x4] 0x78d7340480
	float DirectionalInscatteringExponent;//[Offset: 0x24c, Size: 0x4] 0x78d7340500
	float DirectionalInscatteringStartDistance;//[Offset: 0x250, Size: 0x4] 0x78d7340580
	LinearColor DirectionalInscatteringColor;//[Offset: 0x254, Size: 0x10] 0x78d7340600
	float FogMaxOpacity;//[Offset: 0x264, Size: 0x4] 0x78d7340680
	float StartDistance;//[Offset: 0x268, Size: 0x4] 0x78d7340700
	float FogCutoffDistance;//[Offset: 0x26c, Size: 0x4] 0x78d7340780
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1] 0x78d7340800
	float VolumetricFogScatteringDistribution;//[Offset: 0x274, Size: 0x4] 0x78d7340880
	Color VolumetricFogAlbedo;//[Offset: 0x278, Size: 0x4] 0x78d7340900
	LinearColor VolumetricFogEmissive;//[Offset: 0x27c, Size: 0x10] 0x78d7340980
	float VolumetricFogExtinctionScale;//[Offset: 0x28c, Size: 0x4] 0x78d7340a00
	float VolumetricFogDistance;//[Offset: 0x290, Size: 0x4] 0x78d7340a80
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x294, Size: 0x4] 0x78d7340b00
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78d7340b80
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0xc851190 0x78d73230a0
	void SetVolumetricFogExtinctionScale(float NewValue);// 0xc8510e8 0x78d7323180
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0xc850f9c 0x78d7323260
	void SetVolumetricFogDistance(float NewValue);// 0xc850ef4 0x78d7323340
	void SetVolumetricFogAlbedo(Color NewValue);// 0xc851044 0x78d7323420
	void SetVolumetricFog(bool bNewValue);// 0xc851238 0x78d7323500
	void SetStartDistance(float Value);// 0xc851390 0x78d73235e0
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0xc851828 0x78d73236c0
	void SetInscatteringTextureTint(LinearColor Value);// 0xc851780 0x78d73237a0
	void SetInscatteringColorCubemapAngle(float Value);// 0xc851978 0x78d7323880
	void SetInscatteringColorCubemap(TextureCube* Value);// 0xc851a20 0x78d7323960
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0xc8518d0 0x78d7320080
	void SetFogMaxOpacity(float Value);// 0xc851438 0x78d7320160
	void SetFogInscatteringColor(LinearColor Value);// 0xc851ac8 0x78d7320240
	void SetFogHeightFalloff(float Value);// 0xc8514e0 0x78d7320320
	void SetFogDensity(float Value);// 0xc851b70 0x78d7320400
	void SetFogCutoffDistance(float Value);// 0xc8512e8 0x78d73204e0
	void SetDirectionalInscatteringStartDistance(float Value);// 0xc851630 0x78d73205c0
	void SetDirectionalInscatteringExponent(float Value);// 0xc8516d8 0x78d73206a0
	void SetDirectionalInscatteringColor(LinearColor Value);// 0xc851588 0x78d7320780

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4] 0x78dbf12f00
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4] 0x78dbf12f80
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4] 0x78dbf13000

--------------------------------
Class: FontFace.Object
	FString SourceFilename;//[Offset: 0x30, Size: 0x10] 0x78d7342e80
	enum Hinting;//[Offset: 0x40, Size: 0x1] 0x78d7330d80
	enum LoadingPolicy;//[Offset: 0x41, Size: 0x1] 0x78d7330e20
	enum LayoutMethod;//[Offset: 0x42, Size: 0x1] 0x78d7330ec0

--------------------------------
Class: FontImportOptions.Object
	FontImportOptionsData Data;//[Offset: 0x28, Size: 0xa8] 0x78d7342e00

--------------------------------
Class: ForceFeedbackAttenuation.Object
	ForceFeedbackAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0xb0] 0x78d7342d80

--------------------------------
Class: ForceFeedbackAttenuationSettings.BaseAttenuationSettings

--------------------------------
Class: ForceFeedbackComponent.SceneComponent.ActorComponent.Object
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x208, Size: 0x8] 0x78d7342580
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1] 0x78d7342600
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1] 0x78d7342680
	bool bLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 0x1] 0x78d7342700
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 0x1] 0x78d7342780
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x210, Size: 0x1] 0x78d7342800
	float IntensityMultiplier;//[Offset: 0x214, Size: 0x4] 0x78d7342880
	ForceFeedbackAttenuation* AttenuationSettings;//[Offset: 0x218, Size: 0x8] 0x78d7342900
	ForceFeedbackAttenuationSettings AttenuationOverrides;//[Offset: 0x220, Size: 0xb0] 0x78d7342980
	delegate OnForceFeedbackFinished;//[Offset: 0x2d0, Size: 0x10] 0x78d7342a00
	void Stop();// 0xc853b94 0x78d73228c0
	void SetIntensityMultiplier(float NewIntensityMultiplier);// 0xc853aec 0x78d73229a0
	void SetForceFeedbackEffect(ForceFeedbackEffect* NewForceFeedbackEffect);// 0xc853c60 0x78d7322a80
	void Play(float startTime);// 0xc853bb0 0x78d7322b60
	bool BP_GetAttenuationSettingsToApply(out ForceFeedbackAttenuationSettings OutAttenuationSettings);// 0xc853920 0x78d7322c40
	void AdjustAttenuation(out const ForceFeedbackAttenuationSettings InAttenuationSettings);// 0xc853a0c 0x78d7322d20

--------------------------------
Class: GameEngine.Engine.Object
	float MaxDeltaTime;//[Offset: 0xf00, Size: 0x4] 0x78d7342300
	float ServerFlushLogInterval;//[Offset: 0xf04, Size: 0x4] 0x78d7342380
	GameInstance* GameInstance;//[Offset: 0xf08, Size: 0x8] 0x78d7342400

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c0, Size: 0x8] 0x78d7213000
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1] 0x78d7213080
	int NumSpectators;//[Offset: 0x2cc, Size: 0x4] 0x78d7213100
	int NumPlayers;//[Offset: 0x2d0, Size: 0x4] 0x78d7213180
	int NumBots;//[Offset: 0x2d4, Size: 0x4] 0x78d7211100
	float MinRespawnDelay;//[Offset: 0x2d8, Size: 0x4] 0x78d7211180
	int NumTravellingPlayers;//[Offset: 0x2dc, Size: 0x4] 0x78d7211200
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e0, Size: 0x8] 0x78d715a1a0
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2e8, Size: 0x10] 0x78d715a240
	float InactivePlayerStateLifeSpan;//[Offset: 0x2f8, Size: 0x4] 0x78d7211300
	int MaxInactivePlayers;//[Offset: 0x2fc, Size: 0x4] 0x78d7211380
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1] 0x78d7211400
	void StartMatch();// 0xc857eac 0x78d7207080
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0xc857c48 0x78d7207160
	void Say(FString msg);// 0xc857cf8 0x78d7207240
	void RestartGame();// 0xc857e74 0x78d7207320
	bool ReadyToStartMatch();// 0xc857e18 0x78d7203a40
	bool ReadyToEndMatch();// 0xc857dd8 0x78d7203b20
	void K2_OnSetMatchState(FName NewState);// 0xaa7cd18 0x78d7203c00
	bool IsMatchInProgress();// 0xc857ec8 0x78d7203ce0
	FName GetMatchState();// 0xc857f08 0x78d7203dc0
	void EndMatch();// 0xc857e90 0x78d7203ea0
	void AbortMatch();// 0xc857e58 0x78d7203f80

--------------------------------
Class: GameplayStatics.BlueprintFunctionLibrary.Object
	static void UnloadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0xc865cb0 0x78d732a500
	static void UnloadStreamLevel(const Object* WorldContextObject, FName LevelName, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0xc865f34 0x78d732a5e0
	static bool SuggestProjectileVelocity_CustomArc(const Object* WorldContextObject, out Vector OutLaunchVelocity, Vector StartPos, Vector EndPos, float OverrideGravityZ, float ArcParam);// 0xc85c320 0x78d732a6c0
	static AudioComponent* SpawnSoundAttached(SoundBase* Sound, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float startTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0xc861a50 0x78d732a7a0
	static AudioComponent* SpawnSoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float startTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0xc861e7c 0x78d732a880
	static AudioComponent* SpawnSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float startTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0xc8627b4 0x78d732a960
	static Object* SpawnObject(class Object ObjectClass, Object* Outer);// 0xc867f1c 0x78d732aa40
	static ForceFeedbackComponent* SpawnForceFeedbackAttached(ForceFeedbackEffect* ForceFeedbackEffect, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float startTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0xc8602cc 0x78d732ab20
	static ForceFeedbackComponent* SpawnForceFeedbackAtLocation(const Object* WorldContextObject, ForceFeedbackEffect* ForceFeedbackEffect, Vector Location, Rotator Rotation, bool bLooping, float IntensityMultiplier, float startTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0xc8606b0 0x78d732ac00
	static ParticleSystemComponent* SpawnEmitterAttached(ParticleSystem* EmitterTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivate);// 0xc8635d0 0x78d732ace0
	static ParticleSystemComponent* SpawnEmitterAtLocation(const Object* WorldContextObject, ParticleSystem* EmitterTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivateSystem);// 0xc863920 0x78d7327400
	static AudioComponent* SpawnDialogueAttached(DialogueWave* Dialogue, out const DialogueContext Context, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float startTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0xc8609ac 0x78d73274e0
	static AudioComponent* SpawnDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float startTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0xc860e58 0x78d73275c0
	static AudioComponent* SpawnDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float startTime, bool bAutoDestroy);// 0xc861548 0x78d73276a0
	static DecalComponent* SpawnDecalAttached(MaterialInterface* DecalMaterial, Vector DecalSize, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, float LifeSpan);// 0xc85f054 0x78d7327780
	static DecalComponent* SpawnDecalAtLocation(const Object* WorldContextObject, MaterialInterface* DecalMaterial, Vector DecalSize, Vector Location, Rotator Rotation, float LifeSpan);// 0xc85f30c 0x78d7327860
	static void SetWorldOriginLocation(const Object* WorldContextObject, IntVector NewLocation);// 0xc85c190 0x78d7327940
	static void SetViewportMouseCaptureMode(const Object* WorldContextObject, const enum MouseCaptureMode);// 0xc864a84 0x78d7327a20
	static void SetSubtitlesEnabled(bool bEnabled);// 0xc86022c 0x78d7327b00
	static void SetSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);// 0xc85fe1c 0x78d7327be0
	static void SetSoundClassDistanceScale(const Object* WorldContextObject, SoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec);// 0xc863000 0x78d7327cc0
	static void SetPlayerControllerID(PlayerController* Player, int ControllerId);// 0xc86657c 0x78d7327da0
	static void SetMaxAudioChannelsScaled(const Object* WorldContextObject, float MaxChannelCountScale);// 0xc85f5d4 0x78d7327e80
	static void SetGlobalTimeDilation(const Object* WorldContextObject, float TimeDilation);// 0xc8650ec 0x78d7327f60
	static void SetGlobalPitchModulation(const Object* WorldContextObject, float PitchModulation, float TimeSec);// 0xc863174 0x78d7328040
	static void SetGlobalListenerFocusParameters(const Object* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);// 0xc862d18 0x78d7328120
	static bool SetGamePaused(const Object* WorldContextObject, bool bPaused);// 0xc864fec 0x78d7328200
	static void SetForceDisableSplitscreen(const Object* WorldContextObject, bool bDisable);// 0xc864e54 0x78d73282e0
	static void SetEnableWorldRendering(const Object* WorldContextObject, bool bEnable);// 0xc864cbc 0x78d73283c0
	static void SetBaseSoundMix(const Object* WorldContextObject, SoundMix* InSoundMix);// 0xc860114 0x78d73284a0
	static bool SaveGameToSlot(SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0xc85e0f0 0x78d7328580
	static void RemovePlayer(PlayerController* Player, bool bDestroyPawn);// 0xc866708 0x78d7328660
	static Vector RebaseZeroOriginOntoLocal(Object* WorldContextObject, Vector WorldLocation);// 0xc85bfa8 0x78d7328740
	static Vector RebaseLocalOriginOntoZero(Object* WorldContextObject, Vector WorldLocation);// 0xc85c09c 0x78d7328820
	static void PushSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0xc85fbc4 0x78d7328900
	static bool ProjectWorldToScreen(PlayerController* Player, out const Vector WorldPosition, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0xc85baec 0x78d73289e0
	static void PrimeSound(SoundBase* InSound);// 0xc86007c 0x78d7328ac0
	static void PopSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0xc85fae4 0x78d7328ba0
	static void PlayWorldCameraShake(const Object* WorldContextObject, class CameraShakeBase Shake, Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);// 0xc863bd8 0x78d7328c80
	static void PlaySoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float startTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, Actor* OwningActor);// 0xc8621c8 0x78d7328d60
	static void PlaySound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float startTime, SoundConcurrency* ConcurrencySettings, Actor* OwningActor, bool bIsUISound);// 0xc862a6c 0x78d7328e40
	static void PlayDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float startTime, SoundAttenuation* AttenuationSettings);// 0xc861200 0x78d7328f20
	static void PlayDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float startTime);// 0xc8617fc 0x78d7329000
	static FString ParseOption(FString Options, FString Key);// 0xc85b434 0x78d7325720
	static void OpenLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bAbsolute, FString Options);// 0xc8655dc 0x78d7325800
	static void OpenLevel(const Object* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);// 0xc8658d8 0x78d73258e0
	static HitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, Vector Location, Vector ImpactPoint, Vector Normal, Vector ImpactNormal, PhysicalMaterial* PhysMat, Actor* HitActor, PrimitiveComponent* HitComponent, FName HitBoneName, int HitItem, int FaceIndex, Vector TraceStart, Vector TraceEnd);// 0xc85e538 0x78d73259c0
	static void LoadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0xc8660c0 0x78d7325aa0
	static void LoadStreamLevel(const Object* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0xc86639c 0x78d7325b80
	static SaveGame* LoadGameFromSlot(FString SlotName, const int UserIndex);// 0xc85dea4 0x78d7325c60
	static bool IsSplitscreenForceDisabled(const Object* WorldContextObject);// 0xc864da8 0x78d7325d40
	static bool IsGamePaused(const Object* WorldContextObject);// 0xc864f40 0x78d7325e20
	static bool HasOption(FString Options, FString InKey);// 0xc85b270 0x78d7325f00
	static bool HasLaunchOption(FString OptionToCheck);// 0xc85b000 0x78d7325fe0
	static int GrassOverlappingSphereCount(const Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0xc85be24 0x78d73260c0
	static IntVector GetWorldOriginLocation(const Object* WorldContextObject);// 0xc85c270 0x78d73261a0
	static float GetWorldDeltaSeconds(const Object* WorldContextObject);// 0xc85dcd4 0x78d7326280
	static void GetViewProjectionMatrix(MinimalViewInfo DesiredView, out Matrix ViewMatrix, out Matrix ProjectionMatrix, out Matrix ViewProjectionMatrix);// 0xc85b818 0x78d7326360
	static enum GetViewportMouseCaptureMode(const Object* WorldContextObject);// 0xc864b68 0x78d7326440
	static float GetUnpausedTimeSeconds(const Object* WorldContextObject);// 0xc85db84 0x78d7326520
	static float GetTimeSeconds(const Object* WorldContextObject);// 0xc85dc2c 0x78d7326600
	static byte GetSurfaceType(out const HitResult hit);// 0xc85e468 0x78d73266e0
	static LevelStreaming* GetStreamingLevel(const Object* WorldContextObject, FName PackageName);// 0xc865bc0 0x78d73267c0
	static float GetRealTimeSeconds(const Object* WorldContextObject);// 0xc85dadc 0x78d73268a0
	static Pawn* GetPlayerPawn(const Object* WorldContextObject, int PlayerIndex);// 0xc866b20 0x78d7326980
	static int GetPlayerControllerID(PlayerController* Player);// 0xc866660 0x78d7326a60
	static PlayerController* GetPlayerControllerFromID(const Object* WorldContextObject, int ControllerId);// 0xc866c14 0x78d7326b40
	static PlayerController* GetPlayerController(const Object* WorldContextObject, int PlayerIndex);// 0xc866d08 0x78d7326c20
	static Character* GetPlayerCharacter(const Object* WorldContextObject, int PlayerIndex);// 0xc866a2c 0x78d7326d00
	static PlayerCameraManager* GetPlayerCameraManager(const Object* WorldContextObject, int PlayerIndex);// 0xc866938 0x78d7326de0
	static FString GetPlatformName();// 0xc85d778 0x78d7326ec0
	static class Object GetObjectClass(const Object* Object);// 0xc865278 0x78d7326fa0
	static int GetMaxAudioChannelCount(const Object* WorldContextObject);// 0xc85f52c 0x78d7327080
	static void GetKeyValue(FString Pair, out FString Key, out FString Value);// 0xc85b654 0x78d7327160
	static int GetIntOption(FString Options, FString Key, int DefaultValue);// 0xc85b0dc 0x78d7327240
	static float GetGlobalTimeDilation(const Object* WorldContextObject);// 0xc8651d0 0x78d7327320
	static GameStateBase* GetGameState(const Object* WorldContextObject);// 0xc865320 0x78d7323a40
	static GameModeBase* GetGameMode(const Object* WorldContextObject);// 0xc8653c8 0x78d7323b20
	static GameInstance* GetGameInstance(const Object* WorldContextObject);// 0xc866dfc 0x78d7323c00
	static bool GetEnableWorldRendering(const Object* WorldContextObject);// 0xc864c10 0x78d7323ce0
	static ReverbEffect* GetCurrentReverbEffect(const Object* WorldContextObject);// 0xc85f6b8 0x78d7323dc0
	static FString GetCurrentLevelName(const Object* WorldContextObject, bool bRemovePrefixString);// 0xc865470 0x78d7323ea0
	static bool GetClosestListenerLocation(const Object* WorldContextObject, out const Vector Location, float MaximumRange, const bool bAllowAttenuationOverride, out Vector ListenerPosition);// 0xc8632a0 0x78d7323f80
	static float GetAudioTimeSeconds(const Object* WorldContextObject);// 0xc85da34 0x78d7324060
	static void GetAllActorsWithTag(const Object* WorldContextObject, FName Tag, out Actor*[] OutActors);// 0xc867058 0x78d7324140
	static void GetAllActorsWithInterface(const Object* WorldContextObject, class Interface Interface, out Actor*[] OutActors);// 0xc8671c0 0x78d7324220
	static void GetAllActorsOfClassWithTag(const Object* WorldContextObject, class Actor ActorClass, FName Tag, out Actor*[] OutActors);// 0xc866ea4 0x78d7324300
	static void GetAllActorsOfClass(const Object* WorldContextObject, class Actor ActorClass, out Actor*[] OutActors);// 0xc867328 0x78d73243e0
	static Actor* GetActorOfClass(const Object* WorldContextObject, class Actor ActorClass);// 0xc867490 0x78d73244c0
	static void GetActorArrayBounds(out const Actor*[] Actors, bool bOnlyCollidingComponents, out Vector Center, out Vector BoxExtent);// 0xc867580 0x78d73245a0
	static Vector GetActorArrayAverageLocation(out const Actor*[] Actors);// 0xc867770 0x78d7324680
	static void GetAccurateRealTime(const Object* WorldContextObject, out int Seconds, out float PartialSeconds);// 0xc85d8ec 0x78d7324760
	static void FlushLevelStreaming(const Object* WorldContextObject);// 0xc865b28 0x78d7324840
	static Actor* FinishSpawningActor(Actor* Actor, out const Transform SpawnTransform);// 0xc867864 0x78d7324920
	static bool FindCollisionUV(out const HitResult hit, int UVChannel, out Vector2D UV);// 0xc85e300 0x78d7324a00
	static void EnableLiveStreaming(bool enable);// 0xc85d84c 0x78d7324ae0
	static bool DoesSaveGameExist(FString SlotName, const int UserIndex);// 0xc85dfc8 0x78d7324bc0
	static bool DeprojectScreenToWorld(PlayerController* Player, out const Vector2D ScreenPosition, out Vector WorldPosition, out Vector WorldDirection);// 0xc85bc88 0x78d7324ca0
	static bool DeleteGameInSlot(FString SlotName, const int UserIndex);// 0xc85dd7c 0x78d7324d80
	static void DeactivateReverbEffect(const Object* WorldContextObject, FName TagName);// 0xc85f760 0x78d7324e60
	static AudioComponent* CreateSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float startTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0xc8624fc 0x78d7324f40
	static SaveGame* CreateSaveGameObject(class SaveGame SaveGameClass);// 0xc85e258 0x78d7325020
	static PlayerController* CreatePlayer(const Object* WorldContextObject, int ControllerId, bool bSpawnPlayerController);// 0xc8667f4 0x78d7325100
	static void ClearSoundMixModifiers(const Object* WorldContextObject);// 0xc85fa4c 0x78d73251e0
	static void ClearSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float FadeOutTime);// 0xc85fca4 0x78d73252c0
	static void CancelAsyncLoading();// 0xc865b14 0x78d73253a0
	static void BreakHitResult(out const HitResult hit, out bool bBlockingHit, out bool bInitialOverlap, out float Time, out float Distance, out Vector Location, out Vector ImpactPoint, out Vector Normal, out Vector ImpactNormal, out PhysicalMaterial* PhysMat, out Actor* HitActor, out PrimitiveComponent* HitComponent, out FName HitBoneName, out int HitItem, out int FaceIndex, out Vector TraceStart, out Vector TraceEnd);// 0xc85ea7c 0x78d7325480
	static bool BlueprintSuggestProjectileVelocity(const Object* WorldContextObject, out Vector TossVelocity, Vector StartLocation, Vector EndLocation, float LaunchSpeed, float OverrideGravityZ, byte TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);// 0xc85d41c 0x78d7325560
	static bool Blueprint_PredictProjectilePath_ByTraceChannel(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0xc85c7b4 0x78d7325640
	static bool Blueprint_PredictProjectilePath_ByObjectType(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0xc85cdcc 0x78d7321d60
	static bool Blueprint_PredictProjectilePath_Advanced(const Object* WorldContextObject, out const PredictProjectilePathParams PredictParams, out PredictProjectilePathResult PredictResult);// 0xc85c53c 0x78d7321e40
	static Actor* BeginSpawningActorFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, bool bNoCollisionFail, Actor* Owner);// 0xc867b74 0x78d7321f20
	static Actor* BeginSpawningActorFromBlueprint(const Object* WorldContextObject, const Blueprint* Blueprint, out const Transform SpawnTransform, bool bNoCollisionFail);// 0xc867d6c 0x78d7322000
	static Actor* BeginDeferredActorSpawnFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner);// 0xc867980 0x78d73220e0
	static bool AreSubtitlesEnabled();// 0xc8601f4 0x78d73221c0
	static bool AreAnyListenersWithinRange(const Object* WorldContextObject, out const Vector Location, float MaximumRange);// 0xc863490 0x78d73222a0
	static bool ApplyRadialDamageWithFalloff(const Object* WorldContextObject, float BaseDamage, float MinimumDamage, out const Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, byte DamagePreventionChannel);// 0xc8642a8 0x78d7322380
	static bool ApplyRadialDamage(const Object* WorldContextObject, float BaseDamage, out const Vector Origin, float DamageRadius, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, bool bDoFullDamage, byte DamagePreventionChannel);// 0xc8646d8 0x78d7322460
	static float ApplyPointDamage(Actor* DamagedActor, float BaseDamage, out const Vector HitFromDirection, out const HitResult HitInfo, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0xc86400c 0x78d7322540
	static float ApplyDamage(Actor* DamagedActor, float BaseDamage, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0xc863e38 0x78d7322620
	static void AnnounceAccessibleString(FString AnnouncementString);// 0xc85af38 0x78d7322700
	static void ActivateReverbEffect(const Object* WorldContextObject, ReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime);// 0xc85f840 0x78d73227e0

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 0xc] 0x78dbf15080
	Vector LaunchVelocity;//[Offset: 0xc, Size: 0xc] 0x78dbf15100
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78dbf15180
	float ProjectileRadius;//[Offset: 0x1c, Size: 0x4] 0x78dbf15200
	float MaxSimTime;//[Offset: 0x20, Size: 0x4] 0x78dbf15280
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x78dbf13200
	byte TraceChannel;//[Offset: 0x25, Size: 0x1] 0x78dbf13280
	byte[] ObjectTypes;//[Offset: 0x28, Size: 0x10] 0x78dbe5ef20
	Actor*[] ActorsToIgnore;//[Offset: 0x38, Size: 0x10] 0x78dbe5efc0
	float SimFrequency;//[Offset: 0x48, Size: 0x4] 0x78dbf13400
	float OverrideGravityZ;//[Offset: 0x4c, Size: 0x4] 0x78dbf13480
	byte DrawDebugType;//[Offset: 0x50, Size: 0x1] 0x78dbf13500
	float DrawDebugTime;//[Offset: 0x54, Size: 0x4] 0x78dbf13580
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78dbf13600

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 0x10] 0x78dbe5f060
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 0x1c] 0x78dbf13880
	HitResult HitResult;//[Offset: 0x2c, Size: 0x8c] 0x78dbf13900

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78dbf13700
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x78dbf13780
	float Time;//[Offset: 0x18, Size: 0x4] 0x78dbf13800

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x26c, Size: 0x8] 0x78d7212580
	FName PreviousMatchState;//[Offset: 0x274, Size: 0x8] 0x78d7212600
	int ElapsedTime;//[Offset: 0x27c, Size: 0x4] 0x78d7212680
	void OnRep_MatchState();// 0xc86ba80 0x78d7206280
	void OnRep_ElapsedTime();// 0xc86ba64 0x78d7206360

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x230, Size: 0x8] 0x78d736a380
	void SetOuterConeAngle(float NewOuterConeAngle);// 0xca12fc0 0x78d732d980
	void SetInnerConeAngle(float NewInnerConeAngle);// 0xca13068 0x78d732da60

--------------------------------
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x354, Size: 0x4] 0x78d745cf80
	float OuterConeAngle;//[Offset: 0x358, Size: 0x4] 0x78d745d000
	void SetOuterConeAngle(float NewOuterConeAngle);// 0xca13444 0x78d741f040
	void SetInnerConeAngle(float NewInnerConeAngle);// 0xca134ec 0x78d741f120

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 0x1] 0x78d7447b00
	float LightFalloffExponent;//[Offset: 0x344, Size: 0x4] 0x78d7447b80
	float SourceRadius;//[Offset: 0x348, Size: 0x4] 0x78d7447c00
	float SoftSourceRadius;//[Offset: 0x34c, Size: 0x4] 0x78d7447c80
	float SourceLength;//[Offset: 0x350, Size: 0x4] 0x78d7447d00
	void SetSourceRadius(float bNewValue);// 0xc9a7680 0x78d741a7a0
	void SetSourceLength(float NewValue);// 0xc9a7530 0x78d741a880
	void SetSoftSourceRadius(float bNewValue);// 0xc9a75d8 0x78d741a960
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0xc9a7728 0x78d741aa40

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x329, Size: 0x1] 0x78d7337400
	float Radius;//[Offset: 0x32c, Size: 0x4] 0x78d7407900
	float AttenuationRadius;//[Offset: 0x330, Size: 0x4] 0x78d7407980
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x334, Size: 0xc] 0x78d7407a00
	void SetIntensityUnits(enum NewIntensityUnits);// 0xc91ab44 0x78d7412540
	void SetAttenuationRadius(float NewRadius);// 0xc91abec 0x78d7412620
	static float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0xc91aa04 0x78d7412700

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: GeneratedMeshAreaLight.SpotLight.Light.Actor.Object

--------------------------------
Class: HapticFeedbackEffect_Buffer.HapticFeedbackEffect_Base.Object
	byte[] Amplitudes;//[Offset: 0x28, Size: 0x10] 0x78d7332040
	int SampleRate;//[Offset: 0x38, Size: 0x4] 0x78d736a300

--------------------------------
Class: HapticFeedbackEffect_Curve.HapticFeedbackEffect_Base.Object
	HapticFeedbackDetails_Curve HapticDetails;//[Offset: 0x28, Size: 0x110] 0x78d736a200

--------------------------------
Class: HapticFeedbackDetails_Curve
	RuntimeFloatCurve Frequency;//[Offset: 0x0, Size: 0x88] 0x78dbf14f00
	RuntimeFloatCurve Amplitude;//[Offset: 0x88, Size: 0x88] 0x78dbf14f80

--------------------------------
Class: HapticFeedbackEffect_SoundWave.HapticFeedbackEffect_Base.Object
	SoundWave* SoundWave;//[Offset: 0x28, Size: 0x8] 0x78d736a180

--------------------------------
Class: HealthSnapshotBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void StopPerformanceSnapshots();// 0xc871db0 0x78d732d6e0
	static void StartPerformanceSnapshots();// 0xc871dc4 0x78d732d7c0
	static void LogPerformanceSnapshot(const FString SnapshotTitle, bool bResetStats);// 0xc871c08 0x78d732d8a0

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x508, Size: 0x10] 0x78d715a600
	int NumCustomDataFloats;//[Offset: 0x518, Size: 0x4] 0x78d721fa80
	float[] PerInstanceSMCustomData;//[Offset: 0x520, Size: 0x10] 0x78d715a6a0
	int InstancingRandomSeed;//[Offset: 0x530, Size: 0x4] 0x78d721fb80
	int InstanceStartCullDistance;//[Offset: 0x534, Size: 0x4] 0x78d721fc00
	int InstanceEndCullDistance;//[Offset: 0x538, Size: 0x4] 0x78d721fc80
	byte LODCaculateMode;//[Offset: 0x53c, Size: 0x1] 0x78d721fd00
	float[] LODRadius;//[Offset: 0x540, Size: 0x10] 0x78d715a740
	int[] InstanceReorderTable;//[Offset: 0x550, Size: 0x10] 0x78d715a7e0
	int NumPendingLightmaps;//[Offset: 0x5a8, Size: 0x4] 0x78d721fe80
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x5b0, Size: 0x10] 0x78d715a880
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0xc88012c 0x78d720cc60
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0xc8804c0 0x78d720cd40
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0xc87fa70 0x78d720ce20
	bool RemoveInstance(int InstanceIndex);// 0xc87fbb0 0x78d720cf00
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0xc880348 0x78d720cfe0
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0xc87f8a0 0x78d720d0c0
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0xc87f71c 0x78d720d1a0
	int GetInstanceCount();// 0xc87fb60 0x78d720d280
	void ClearInstances();// 0xc87fb94 0x78d720d360
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0xc87fed0 0x78d720d440
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0xc87fc6c 0x78d720d520
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0xc880664 0x78d720d600
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices);// 0xc880748 0x78d720d6e0
	int AddInstance(out const Transform InstanceTransform);// 0xc8808f8 0x78d720d7c0

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40] 0x78dbf15600

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x5d0, Size: 0x10] 0x78d715cd60
	int NumBuiltInstances;//[Offset: 0x5e0, Size: 0x4] 0x78d7220d80
	Box BuiltInstanceBounds;//[Offset: 0x5e8, Size: 0x1c] 0x78d7220e00
	Box UnbuiltInstanceBounds;//[Offset: 0x604, Size: 0x1c] 0x78d7220e80
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x620, Size: 0x10] 0x78d715ce00
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x630, Size: 0x1] 0x78d7220f80
	int OcclusionLayerNumNodes;//[Offset: 0x638, Size: 0x4] 0x78d7221000
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x63c, Size: 0x1c] 0x78d7221080
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1] 0x78d721f800
	int InstanceCountToRender;//[Offset: 0x65c, Size: 0x4] 0x78d721f880
	bool RemoveInstances(out const int[] InstancesToRemove);// 0xc87224c 0x78d720cb80

--------------------------------
Class: HierarchicalInstancedStaticMeshLODProxyComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: HLODEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: HLODProxy.Object
	HLODProxyMesh[] ProxyMeshes;//[Offset: 0x28, Size: 0x10] 0x78d7331fa0
	<HLODProxyDesc*,HLODProxyMesh> HLODActors;//[Offset: 0x38, Size: 0x50] 0x78d71052c0

--------------------------------
Class: HLODProxyMesh
	LODActor* LODActor;//[Offset: 0x0, Size: 0x1c] 0x78dbf14500
	StaticMesh* StaticMesh;//[Offset: 0x20, Size: 0x8] 0x78dbf14580
	FName Key;//[Offset: 0x28, Size: 0x8] 0x78dbf14600

--------------------------------
Class: LODActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x220, Size: 0x8] 0x78d7409300
	<MaterialInterface*,InstancedStaticMeshComponent*> ImpostersStaticMeshComponents;//[Offset: 0x228, Size: 0x50] 0x78d7105200
	HLODProxy* Proxy;//[Offset: 0x278, Size: 0x8] 0x78d7409480
	FName Key;//[Offset: 0x280, Size: 0x8] 0x78d7407400
	float LODDrawDistance;//[Offset: 0x288, Size: 0x4] 0x78d7407480
	int LODLevel;//[Offset: 0x28c, Size: 0x4] 0x78d7407500
	Actor*[] SubActors;//[Offset: 0x290, Size: 0x10] 0x78d73372c0
	byte CachedNumHLODLevels;//[Offset: 0x2a0, Size: 0x1] 0x78d7407600

--------------------------------
Class: HLODProxyDesc.Object

--------------------------------
Class: ImportanceSamplingLibrary.BlueprintFunctionLibrary.Object
	static float RandomSobolFloat(int Index, int Dimension, float Seed);// 0xc8777e4 0x78d732cf00
	static Vector RandomSobolCell3D(int Index, int NumCells, Vector Cell, Vector Seed);// 0xc877278 0x78d732cfe0
	static Vector2D RandomSobolCell2D(int Index, int NumCells, Vector2D Cell, Vector2D Seed);// 0xc877530 0x78d732d0c0
	static float NextSobolFloat(int Index, int Dimension, float PreviousValue);// 0xc8776a8 0x78d732d1a0
	static Vector NextSobolCell3D(int Index, int NumCells, Vector PreviousValue);// 0xc87713c 0x78d732d280
	static Vector2D NextSobolCell2D(int Index, int NumCells, Vector2D PreviousValue);// 0xc8773fc 0x78d732d360
	static ImportanceTexture MakeImportanceTexture(Texture2D* Texture, byte WeightingFunc);// 0xc876f44 0x78d732d440
	static void ImportanceSample(out const ImportanceTexture Texture, out const Vector2D Rand, int Samples, float Intensity, out Vector2D SamplePosition, out LinearColor SampleColor, out float SampleIntensity, out float SampleSize);// 0xc876934 0x78d732d520
	static void BreakImportanceTexture(out const ImportanceTexture ImportanceTexture, out Texture2D* Texture, out byte WeightingFunc);// 0xc876d68 0x78d732d600

--------------------------------
Class: ImportanceTexture
	IntPoint Size;//[Offset: 0x0, Size: 0x8] 0x78dbf16280
	int NumMips;//[Offset: 0x8, Size: 0x4] 0x78dbf16300
	float[] MarginalCDF;//[Offset: 0x10, Size: 0x10] 0x78dbe5eca0
	float[] ConditionalCDF;//[Offset: 0x20, Size: 0x10] 0x78dbe5ed40
	Color[] TextureData;//[Offset: 0x30, Size: 0x10] 0x78dbe5ede0
	Texture2D* Texture;//[Offset: 0x40, Size: 0x8] 0x78dbf14400
	byte Weighting;//[Offset: 0x48, Size: 0x1] 0x78dbf14480

--------------------------------
Class: ImportantToggleSettingInterface.Interface.Object

--------------------------------
Class: InGameAdManager.PlatformInterfaceBase.Object
	bool bShouldPauseWhileAdOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78d736aa80
	delegate[] ClickedBannerDelegates;//[Offset: 0x40, Size: 0x10] 0x78d7331e60
	delegate[] ClosedAdDelegates;//[Offset: 0x50, Size: 0x10] 0x78d7331f00

--------------------------------
Class: InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: InputActionDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputActionDelegateBinding[] InputActionDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78d7331c80

--------------------------------
Class: BlueprintInputActionDelegateBinding.BlueprintInputDelegateBinding
	FName InputActionName;//[Offset: 0x4, Size: 0x8] 0x78dbf15d00
	byte InputKeyEvent;//[Offset: 0xc, Size: 0x1] 0x78dbf15d80
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8] 0x78dbf15e00

--------------------------------
Class: BlueprintInputDelegateBinding
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbf15e80
	bool bExecuteWhenPaused;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbf15f00
	bool bOverrideParentBinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbf15f80

--------------------------------
Class: InputAxisDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisDelegateBinding[] InputAxisDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78d7331be0

--------------------------------
Class: BlueprintInputAxisDelegateBinding.BlueprintInputDelegateBinding
	FName InputAxisName;//[Offset: 0x4, Size: 0x8] 0x78dbf15c00
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8] 0x78dbf15c80

--------------------------------
Class: InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisKeyDelegateBinding[] InputAxisKeyDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78d7331b40

--------------------------------
Class: BlueprintInputAxisKeyDelegateBinding.BlueprintInputDelegateBinding
	Key AxisKey;//[Offset: 0x8, Size: 0x18] 0x78dbf15b00
	FName FunctionNameToBind;//[Offset: 0x20, Size: 0x8] 0x78dbf15b80

--------------------------------
Class: InputKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputKeyDelegateBinding[] InputKeyDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78d7331a00

--------------------------------
Class: BlueprintInputKeyDelegateBinding.BlueprintInputDelegateBinding
	InputChord InputChord;//[Offset: 0x8, Size: 0x20] 0x78dbf15900
	byte InputKeyEvent;//[Offset: 0x28, Size: 0x1] 0x78dbf15980
	FName FunctionNameToBind;//[Offset: 0x2c, Size: 0x8] 0x78dbf15a00

--------------------------------
Class: InputChord
	Key Key;//[Offset: 0x0, Size: 0x18] 0x78d3572b80
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78d3572c00
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x78d3572c80
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x78d3572d00
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x78d3572d80

--------------------------------
Class: InputSettings.Object
	InputAxisConfigEntry[] AxisConfig;//[Offset: 0x28, Size: 0x10] 0x78d7333940
	bool bAltEnterTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78d736cb00
	bool bF11TogglesFullscreen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78d736cb80
	bool bUseMouseForTouch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x78d736cc00
	bool bEnableMouseSmoothing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1] 0x78d736cc80
	bool bEnableFOVScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1] 0x78d736cd00
	bool bCaptureMouseOnLaunch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1] 0x78d736cd80
	bool bDefaultViewportMouseLock;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1] 0x78d736ce00
	bool bAlwaysShowTouchInterface;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1] 0x78d736ce80
	bool bShowConsoleOnFourFingerTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x78d736cf00
	bool bEnableGestureRecognizer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1] 0x78d736cf80
	bool bUseAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x78d736d000
	FString[] ExcludedAutocorrectOS;//[Offset: 0x40, Size: 0x10] 0x78d73339e0
	FString[] ExcludedAutocorrectCultures;//[Offset: 0x50, Size: 0x10] 0x78d7333a80
	FString[] ExcludedAutocorrectDeviceModels;//[Offset: 0x60, Size: 0x10] 0x78d7333b20
	enum DefaultViewportMouseCaptureMode;//[Offset: 0x70, Size: 0x1] 0x78d7333bc0
	enum DefaultViewportMouseLockMode;//[Offset: 0x71, Size: 0x1] 0x78d7333c60
	float FOVScale;//[Offset: 0x74, Size: 0x4] 0x78d736d300
	float DoubleClickTime;//[Offset: 0x78, Size: 0x4] 0x78d736d380
	InputActionKeyMapping[] ActionMappings;//[Offset: 0x80, Size: 0x10] 0x78d7333d00
	InputAxisKeyMapping[] AxisMappings;//[Offset: 0x90, Size: 0x10] 0x78d7333da0
	InputActionSpeechMapping[] SpeechMappings;//[Offset: 0xa0, Size: 0x10] 0x78d7331500
	class PlayerInput* DefaultPlayerInputClass;//[Offset: 0xb0, Size: 0x28] 0x78d73315a0
	class InputComponent* DefaultInputComponentClass;//[Offset: 0xd8, Size: 0x28] 0x78d7331640
	SoftObjectPath DefaultTouchInterface;//[Offset: 0x100, Size: 0x18] 0x78d736d580
	Key ConsoleKey;//[Offset: 0x118, Size: 0x18] 0x78d736d600
	Key[] ConsoleKeys;//[Offset: 0x130, Size: 0x10] 0x78d73316e0
	void SaveKeyMappings();// 0xc87dabc 0x78d732f2e0
	void RemoveAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0xc87dad0 0x78d732f3c0
	void RemoveActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0xc87e1e8 0x78d732f4a0
	static InputSettings* GetInputSettings();// 0xc87e918 0x78d732f580
	void GetAxisNames(out FName[] AxisNames);// 0xc87d8f4 0x78d732f660
	void GetAxisMappingByName(const FName InAxisName, out InputAxisKeyMapping[] OutMappings);// 0xc87dd44 0x78d732f740
	void GetActionNames(out FName[] ActionNames);// 0xc87d9d8 0x78d732f820
	void GetActionMappingByName(const FName InActionName, out InputActionKeyMapping[] OutMappings);// 0xc87e468 0x78d732f900
	void ForceRebuildKeymaps();// 0xc87d8e0 0x78d732f9e0
	void AddAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0xc87df74 0x78d732fac0
	void AddActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0xc87e698 0x78d732fba0

--------------------------------
Class: InputAxisConfigEntry
	FName AxisKeyName;//[Offset: 0x0, Size: 0x8] 0x78dbf3ae00
	InputAxisProperties AxisProperties;//[Offset: 0x8, Size: 0x10] 0x78dbf3b080

--------------------------------
Class: InputAxisProperties
	float DeadZone;//[Offset: 0x0, Size: 0x4] 0x78dbf3ae80
	float Sensitivity;//[Offset: 0x4, Size: 0x4] 0x78dbf3af00
	float Exponent;//[Offset: 0x8, Size: 0x4] 0x78dbf3af80
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78dbf3b000

--------------------------------
Class: InputActionKeyMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8] 0x78dbf3b100
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78dbf3b180
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x78dbf3b200
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x78dbf3b280
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x78dbf3b300
	Key Key;//[Offset: 0x10, Size: 0x18] 0x78dbf3b380

--------------------------------
Class: InputAxisKeyMapping
	FName AxisName;//[Offset: 0x0, Size: 0x8] 0x78dbf3b400
	float Scale;//[Offset: 0x8, Size: 0x4] 0x78dbf3b480
	Key Key;//[Offset: 0x10, Size: 0x18] 0x78dbf3b500

--------------------------------
Class: InputActionSpeechMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8] 0x78dbf3b580
	FName SpeechKeyword;//[Offset: 0x8, Size: 0x8] 0x78dbf39500

--------------------------------
Class: InputTouchDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputTouchDelegateBinding[] InputTouchDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78d73338a0

--------------------------------
Class: BlueprintInputTouchDelegateBinding.BlueprintInputDelegateBinding
	byte InputKeyEvent;//[Offset: 0x1, Size: 0x1] 0x78dbf15800
	FName FunctionNameToBind;//[Offset: 0x4, Size: 0x8] 0x78dbf15880

--------------------------------
Class: InputVectorAxisDelegateBinding.InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: Interface_AssetUserData.Interface.Object

--------------------------------
Class: BoneReferenceSkeletonProvider.Interface.Object

--------------------------------
Class: Interface_CollisionDataProvider.Interface.Object

--------------------------------
Class: Interface_PostProcessVolume.Interface.Object

--------------------------------
Class: Interface_PreviewMeshProvider.Interface.Object

--------------------------------
Class: InterpFilter.Object
	FString Caption;//[Offset: 0x28, Size: 0x10] 0x78d736e500

--------------------------------
Class: InterpFilter_Classes.InterpFilter.Object

--------------------------------
Class: InterpFilter_Custom.InterpFilter.Object

--------------------------------
Class: InterpGroupCamera.InterpGroup.Object
	CameraAnim* CameraAnimInst;//[Offset: 0x50, Size: 0x8] 0x78d736e000
	float CompressTolerance;//[Offset: 0x58, Size: 0x4] 0x78d736e080

--------------------------------
Class: InterpGroupInstCamera.InterpGroupInst.Object

--------------------------------
Class: InterpGroupInstDirector.InterpGroupInst.Object

--------------------------------
Class: InterpToMovementComponent.MovementComponent.ActorComponent.Object
	float Duration;//[Offset: 0xf4, Size: 0x4] 0x78d3567280
	bool bPauseOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1] 0x78d3567300
	bool bSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1] 0x78d3567380
	enum TeleportType;//[Offset: 0xfa, Size: 0x1] 0x78cdd574a0
	enum BehaviourType;//[Offset: 0xfb, Size: 0x1] 0x78cdd57540
	bool bCheckIfStillInWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1] 0x78d3565400
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfd, Size: 0x1] 0x78d3565480
	delegate OnInterpToReverse;//[Offset: 0x100, Size: 0x10] 0x78d3565500
	delegate OnInterpToStop;//[Offset: 0x110, Size: 0x10] 0x78d3565580
	delegate OnWaitBeginDelegate;//[Offset: 0x120, Size: 0x10] 0x78d3565600
	delegate OnWaitEndDelegate;//[Offset: 0x130, Size: 0x10] 0x78d3565680
	delegate OnResetDelegate;//[Offset: 0x140, Size: 0x10] 0x78d3565700
	float MaxSimulationTimeStep;//[Offset: 0x150, Size: 0x4] 0x78d3565780
	int MaxSimulationIterations;//[Offset: 0x154, Size: 0x4] 0x78d3565800
	InterpControlPoint[] ControlPoints;//[Offset: 0x158, Size: 0x10] 0x78cdd575e0
	void StopSimulating(out const HitResult HitResult);// 0xc887e18 0x78cd8e6de0
	void RestartMovement(float InitialDirection);// 0xc887d70 0x78cd8e6ec0
	void OnInterpToWaitEndDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xaa7cd18 0x78cd8e6fa0
	void OnInterpToWaitBeginDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xaa7cd18 0x78cd8e7080
	void OnInterpToStopDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xaa7cd18 0x78cd8e7160
	void OnInterpToReverseDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xaa7cd18 0x78cd8e7240
	void OnInterpToResetDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xaa7cd18 0x78cd8e7320
	void FinaliseControlPoints();// 0xc887d5c 0x78cd8e3a40

--------------------------------
Class: InterpControlPoint
	Vector PositionControlPoint;//[Offset: 0x0, Size: 0xc] 0x78d3565880
	bool bPositionIsRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78d3565900

--------------------------------
Class: InterpTrackFloatBase.InterpTrack.Object
	InterpCurveFloat FloatTrack;//[Offset: 0x70, Size: 0x18] 0x78dc090c00
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x78dc090c80

--------------------------------
Class: InterpTrackAnimControl.InterpTrackFloatBase.InterpTrack.Object
	FName SlotName;//[Offset: 0x8c, Size: 0x8] 0x78d736dd00
	AnimControlTrackKey[] AnimSeqs;//[Offset: 0x98, Size: 0x10] 0x78d73334e0
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78d736de00

--------------------------------
Class: AnimControlTrackKey
	float startTime;//[Offset: 0x0, Size: 0x4] 0x78dbf18400
	AnimSequence* AnimSeq;//[Offset: 0x8, Size: 0x8] 0x78dbf16380
	float AnimStartOffset;//[Offset: 0x10, Size: 0x4] 0x78dbf16400
	float AnimEndOffset;//[Offset: 0x14, Size: 0x4] 0x78dbf16480
	float AnimPlayRate;//[Offset: 0x18, Size: 0x4] 0x78dbf16500
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1] 0x78dbf16580
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1] 0x78dbf16600

--------------------------------
Class: InterpTrackVectorBase.InterpTrack.Object
	InterpCurveVector VectorTrack;//[Offset: 0x70, Size: 0x18] 0x78dc090e00
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x78dc090e80

--------------------------------
Class: InterpTrackAudioMaster.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackBoolProp.InterpTrack.Object
	BoolTrackKey[] BoolTrack;//[Offset: 0x70, Size: 0x10] 0x78d7333440
	FName PropertyName;//[Offset: 0x80, Size: 0x8] 0x78d736dc80

--------------------------------
Class: BoolTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78dbf18300
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x78dbf18380

--------------------------------
Class: InterpTrackColorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x78d736db80

--------------------------------
Class: InterpTrackColorScale.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackDirector.InterpTrack.Object
	DirectorTrackCut[] CutTrack;//[Offset: 0x70, Size: 0x10] 0x78d73333a0
	bool bSimulateCameraCutsOnClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78d736db00

--------------------------------
Class: DirectorTrackCut
	float Time;//[Offset: 0x0, Size: 0x4] 0x78dbf18100
	float TransitionTime;//[Offset: 0x4, Size: 0x4] 0x78dbf18180
	FName TargetCamGroup;//[Offset: 0x8, Size: 0x8] 0x78dbf18200
	int ShotNumber;//[Offset: 0x10, Size: 0x4] 0x78dbf18280

--------------------------------
Class: InterpTrackEvent.InterpTrack.Object
	EventTrackKey[] EventTrack;//[Offset: 0x70, Size: 0x10] 0x78d7333300
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78d736d880
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78d736d900
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x78d736d980
	bool bUseCustomEventName;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x78d736da00

--------------------------------
Class: EventTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78dbf18000
	FName EventName;//[Offset: 0x4, Size: 0x8] 0x78dbf18080

--------------------------------
Class: InterpTrackFade.InterpTrackFloatBase.InterpTrack.Object
	bool bPersistFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x78d736f780
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x78d736d700
	LinearColor FadeColor;//[Offset: 0x90, Size: 0x10] 0x78d736d780

--------------------------------
Class: InterpTrackFloatAnimBPParam.InterpTrackFloatBase.InterpTrack.Object
	class Object* AnimBlueprintClass;//[Offset: 0x90, Size: 0x8] 0x78d73331c0
	class AnimInstance* AnimClass;//[Offset: 0x98, Size: 0x8] 0x78d7333260
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x78d736f700

--------------------------------
Class: InterpTrackFloatMaterialParam.InterpTrackFloatBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10] 0x78d7333120
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x78d736f680

--------------------------------
Class: InterpTrackFloatParticleParam.InterpTrackFloatBase.InterpTrack.Object
	FName ParamName;//[Offset: 0x8c, Size: 0x8] 0x78d736f580

--------------------------------
Class: InterpTrackFloatProp.InterpTrackFloatBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x78d736f500

--------------------------------
Class: InterpTrackInstAnimControl.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x78d736f480

--------------------------------
Class: InterpTrackInstAudioMaster.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstProperty.InterpTrackInst.Object
	FieldPathProperty InterpProperty;//[Size: 0x20] 0x78d736f380
	Object* PropertyOuterObjectInst;//[Offset: 0x48, Size: 0x8] 0x78d736f400

--------------------------------
Class: InterpTrackInstBoolProp.InterpTrackInstProperty.InterpTrackInst.Object
	bool ResetBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78d736f300

--------------------------------
Class: InterpTrackInstColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Color ResetColor;//[Offset: 0x58, Size: 0x4] 0x78d736f280

--------------------------------
Class: InterpTrackInstColorScale.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstEvent.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x78d736f180

--------------------------------
Class: InterpTrackInstFade.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstFloatAnimBPParam.InterpTrackInst.Object
	AnimInstance* AnimScriptInstance;//[Offset: 0x28, Size: 0x8] 0x78d736f080
	float ResetFloat;//[Offset: 0x30, Size: 0x4] 0x78d736f100

--------------------------------
Class: InterpTrackInstFloatMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10] 0x78d7332f40
	float[] ResetFloats;//[Offset: 0x38, Size: 0x10] 0x78d7332fe0
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10] 0x78d7333080
	InterpTrackFloatMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8] 0x78d736f000

--------------------------------
Class: PrimitiveMaterialRef
	PrimitiveComponent* Primitive;//[Offset: 0x0, Size: 0x8] 0x78dbf10f80
	DecalComponent* Decal;//[Offset: 0x8, Size: 0x8] 0x78dbf11000
	int ElementIndex;//[Offset: 0x10, Size: 0x4] 0x78dbf11080

--------------------------------
Class: InterpTrackInstFloatParticleParam.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x28, Size: 0x4] 0x78d736ee00

--------------------------------
Class: InterpTrackInstFloatProp.InterpTrackInstProperty.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x58, Size: 0x4] 0x78d736ed80

--------------------------------
Class: InterpTrackInstLinearColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	LinearColor ResetColor;//[Offset: 0x58, Size: 0x10] 0x78d736ed00

--------------------------------
Class: InterpTrackInstParticleReplay.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x78d736eb80

--------------------------------
Class: InterpTrackInstSlomo.InterpTrackInst.Object
	float OldTimeDilation;//[Offset: 0x28, Size: 0x4] 0x78d736eb00

--------------------------------
Class: InterpTrackInstSound.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x78d736ea00
	AudioComponent* PlayAudioComp;//[Offset: 0x30, Size: 0x8] 0x78d736ea80

--------------------------------
Class: InterpTrackInstToggle.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1] 0x78d736e880
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4] 0x78d736e900
	bool bSavedActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78d736e980

--------------------------------
Class: InterpTrackInstVectorMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10] 0x78d7332d60
	Vector[] ResetVectors;//[Offset: 0x38, Size: 0x10] 0x78d7332e00
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10] 0x78d7332ea0
	InterpTrackVectorMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8] 0x78d736e800

--------------------------------
Class: InterpTrackVectorMaterialParam.InterpTrackVectorBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10] 0x78d7332ae0
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x78d7370680

--------------------------------
Class: InterpTrackInstVectorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Vector ResetVector;//[Offset: 0x58, Size: 0xc] 0x78d736fe80

--------------------------------
Class: InterpTrackInstVisibility.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1] 0x78d736fd80
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4] 0x78d736fe00

--------------------------------
Class: InterpTrackLinearColorBase.InterpTrack.Object
	InterpCurveLinearColor LinearColorTrack;//[Offset: 0x70, Size: 0x18] 0x78d736fc80
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x78d736fd00

--------------------------------
Class: InterpCurveLinearColor
	InterpCurvePointLinearColor[] Points;//[Offset: 0x0, Size: 0x10] 0x78e6b15560
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78e6835100
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78e6835180

--------------------------------
Class: InterpCurvePointLinearColor
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78e6835200
	LinearColor OutVal;//[Offset: 0x4, Size: 0x10] 0x78e6835280
	LinearColor ArriveTangent;//[Offset: 0x14, Size: 0x10] 0x78e6833200
	LinearColor LeaveTangent;//[Offset: 0x24, Size: 0x10] 0x78e6833280
	byte InterpMode;//[Offset: 0x34, Size: 0x1] 0x78e6833300

--------------------------------
Class: InterpTrackLinearColorProp.InterpTrackLinearColorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x78d736fc00

--------------------------------
Class: InterpTrackMoveAxis.InterpTrackFloatBase.InterpTrack.Object
	byte MoveAxis;//[Offset: 0x8c, Size: 0x1] 0x78d7370d80
	InterpLookupTrack LookupTrack;//[Offset: 0x90, Size: 0x10] 0x78d7370e00

--------------------------------
Class: InterpTrackParticleReplay.InterpTrack.Object
	ParticleReplayTrackKey[] TrackKeys;//[Offset: 0x70, Size: 0x10] 0x78d7332cc0

--------------------------------
Class: ParticleReplayTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78dbf17d00
	float Duration;//[Offset: 0x4, Size: 0x4] 0x78dbf17d80
	int ClipIDNumber;//[Offset: 0x8, Size: 0x4] 0x78dbf17e00

--------------------------------
Class: InterpTrackSlomo.InterpTrackFloatBase.InterpTrack.Object

--------------------------------
Class: InterpTrackSound.InterpTrackVectorBase.InterpTrack.Object
	SoundTrackKey[] Sounds;//[Offset: 0x90, Size: 0x10] 0x78d7332c20
	bool bPlayOnReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78d7370a80
	bool bContinueSoundOnMatineeEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x78d7370b00
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1] 0x78d7370b80
	bool bTreatAsDialogue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1] 0x78d7370c00
	bool bAttach;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1] 0x78d7370c80

--------------------------------
Class: SoundTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78dbf17b00
	float Volume;//[Offset: 0x4, Size: 0x4] 0x78dbf17b80
	float Pitch;//[Offset: 0x8, Size: 0x4] 0x78dbf17c00
	SoundBase* Sound;//[Offset: 0x10, Size: 0x8] 0x78dbf17c80

--------------------------------
Class: InterpTrackToggle.InterpTrack.Object
	ToggleTrackKey[] ToggleTrack;//[Offset: 0x70, Size: 0x10] 0x78d7332b80
	bool bActivateSystemEachUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78d7370780
	bool bActivateWithJustAttachedFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78d7370800
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x78d7370880
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x78d7370900
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x80, Size: 0x1] 0x78d7370980

--------------------------------
Class: ToggleTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78dbf17a00
	byte ToggleAction;//[Offset: 0x4, Size: 0x1] 0x78dbf17a80

--------------------------------
Class: InterpTrackVectorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x78d7370580

--------------------------------
Class: InterpTrackVisibility.InterpTrack.Object
	VisibilityTrackKey[] VisibilityTrack;//[Offset: 0x70, Size: 0x10] 0x78d7332a40
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78d7370400
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78d7370480
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x78d7370500

--------------------------------
Class: VisibilityTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78dbf17880
	byte Action;//[Offset: 0x4, Size: 0x1] 0x78dbf17900
	byte ActiveCondition;//[Offset: 0x5, Size: 0x1] 0x78dbf17980

--------------------------------
Class: IntSerialization.Object
	uint16 UnsignedInt16Variable;//[Offset: 0x28, Size: 0x2] 0x78d7372080
	uint32 UnsignedInt32Variable;//[Offset: 0x2c, Size: 0x4] 0x78d7372100
	uint64 UnsignedInt64Variable;//[Offset: 0x30, Size: 0x8] 0x78d7370080
	int8 SignedInt8Variable;//[Offset: 0x38, Size: 0x1] 0x78d7370100
	int16 SignedInt16Variable;//[Offset: 0x3a, Size: 0x2] 0x78d7370180
	int64 SignedInt64Variable;//[Offset: 0x40, Size: 0x8] 0x78d7370200
	byte UnsignedInt8Variable;//[Offset: 0x48, Size: 0x1] 0x78d7370280
	int SignedInt32Variable;//[Offset: 0x4c, Size: 0x4] 0x78d7370300

--------------------------------
Class: KillZVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: KismetArrayLibrary.BlueprintFunctionLibrary.Object
	static void SetArrayPropertyByName(Object* Object, FName PropertyName, out const int[] Value);// 0xc894d50 0x78d73814a0
	static void FilterArray(out const Actor*[] TargetArray, class Actor FilterClass, out Actor*[] FilteredArray);// 0xc892e7c 0x78d7381580
	static void Array_Swap(out const int[] TargetArray, int FirstIndex, int SecondIndex);// 0xc894bf0 0x78d7381660
	static void Array_Shuffle(out const int[] TargetArray);// 0xc894b58 0x78d7381740
	static void Array_Set(out const int[] TargetArray, int Index, out const int Item, bool bSizeToFit);// 0xc894914 0x78d7381820
	static void Array_Reverse(out const int[] TargetArray);// 0xc89487c 0x78d7381900
	static void Array_Resize(out const int[] TargetArray, int Size);// 0xc894764 0x78d73819e0
	static bool Array_RemoveItem(out const int[] TargetArray, out const int Item);// 0xc89459c 0x78d7381ac0
	static void Array_Remove(out const int[] TargetArray, int IndexToRemove);// 0xc894484 0x78d7381ba0
	static void Array_RandomFromStream(out const int[] TargetArray, out RandomStream RandomStream, out int OutItem, out int OutIndex);// 0xc894304 0x78d7381c80
	static void Array_Random(out const int[] TargetArray, out int OutItem, out int OutIndex);// 0xc8941d4 0x78d732e780
	static int Array_Length(out const int[] TargetArray);// 0xc894130 0x78d732e860
	static int Array_LastIndex(out const int[] TargetArray);// 0xc89408c 0x78d732e940
	static bool Array_IsValidIndex(out const int[] TargetArray, int IndexToTest);// 0xc893f60 0x78d732ea20
	static void Array_Insert(out const int[] TargetArray, out const int NewItem, int Index);// 0xc893d6c 0x78d732eb00
	static bool Array_Identical(out const int[] ArrayA, out const int[] ArrayB);// 0xc893c54 0x78d732ebe0
	static void Array_Get(out const int[] TargetArray, int Index, out int Item);// 0xc893a34 0x78d732ecc0
	static int Array_Find(out const int[] TargetArray, out const int ItemToFind);// 0xc893870 0x78d732eda0
	static bool Array_Contains(out const int[] TargetArray, out const int ItemToFind);// 0xc8936a4 0x78d732ee80
	static void Array_Clear(out const int[] TargetArray);// 0xc89360c 0x78d732ef60
	static void Array_Append(out const int[] TargetArray, out const int[] SourceArray);// 0xc893504 0x78d732f040
	static int Array_AddUnique(out const int[] TargetArray, out const int NewItem);// 0xc89334c 0x78d732f120
	static int Array_Add(out const int[] TargetArray, out const int NewItem);// 0xc893194 0x78d732f200

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4] 0x78e6834e00
	int Seed;//[Offset: 0x4, Size: 0x4] 0x78e6834e80

--------------------------------
Class: KismetGuidLibrary.BlueprintFunctionLibrary.Object
	static void Parse_StringToGuid(FString GuidString, out Guid OutGuid, out bool success);// 0xc899ea0 0x78d7380e80
	static bool NotEqual_GuidGuid(out const Guid A, out const Guid B);// 0xc89a2dc 0x78d7380f60
	static Guid NewGuid();// 0xc89a14c 0x78d7381040
	static bool IsValid_Guid(out const Guid InGuid);// 0xc89a224 0x78d7381120
	static void Invalidate_Guid(out Guid InGuid);// 0xc89a180 0x78d7381200
	static bool EqualEqual_GuidGuid(out const Guid A, out const Guid B);// 0xc89a3e4 0x78d73812e0
	static FString Conv_GuidToString(out const Guid InGuid);// 0xc89a028 0x78d73813c0

--------------------------------
Class: KismetInputLibrary.BlueprintFunctionLibrary.Object
	static bool PointerEvent_IsTouchEvent(out const PointerEvent Input);// 0xc89ad44 0x78d7381d60
	static bool PointerEvent_IsMouseButtonDown(out const PointerEvent Input, Key MouseButton);// 0xc89b988 0x78d7381e40
	static float PointerEvent_GetWheelDelta(out const PointerEvent Input);// 0xc89b488 0x78d7381f20
	static int PointerEvent_GetUserIndex(out const PointerEvent Input);// 0xc89b2b8 0x78d7382000
	static int PointerEvent_GetTouchpadIndex(out const PointerEvent Input);// 0xc89af18 0x78d73820e0
	static Vector2D PointerEvent_GetScreenSpacePosition(out const PointerEvent Input);// 0xc89c11c 0x78d73821c0
	static int PointerEvent_GetPointerIndex(out const PointerEvent Input);// 0xc89b0e8 0x78d73822a0
	static Vector2D PointerEvent_GetLastScreenSpacePosition(out const PointerEvent Input);// 0xc89bf48 0x78d7382380
	static enum PointerEvent_GetGestureType(out const PointerEvent Input);// 0xc89ab74 0x78d7382460
	static Vector2D PointerEvent_GetGestureDelta(out const PointerEvent Input);// 0xc89a9a0 0x78d7382540
	static Key PointerEvent_GetEffectingButton(out const PointerEvent Input);// 0xc89b658 0x78d7382620
	static Vector2D PointerEvent_GetCursorDelta(out const PointerEvent Input);// 0xc89bd74 0x78d7382700
	static bool Key_IsVectorAxis(out const Key Key);// 0xc89e9b0 0x78d73827e0
	static bool Key_IsValid(out const Key Key);// 0xc89df30 0x78d73828c0
	static bool Key_IsMouseButton(out const Key Key);// 0xc89ecb0 0x78d73829a0
	static bool Key_IsModifierKey(out const Key Key);// 0xc89efb0 0x78d7382a80
	static bool Key_IsKeyboardKey(out const Key Key);// 0xc89eb30 0x78d7382b60
	static bool Key_IsGamepadKey(out const Key Key);// 0xc89ee30 0x78d7382c40
	static bool Key_IsDigital(out const Key Key);// 0xc89e0b0 0x78d7382d20
	static bool Key_IsButtonAxis(out const Key Key);// 0xc89e3b0 0x78d7382e00
	static bool Key_IsAxis3D(out const Key Key);// 0xc89e530 0x78d7382ee0
	static bool Key_IsAxis2D(out const Key Key);// 0xc89e6b0 0x78d7382fc0
	static bool Key_IsAxis1D(out const Key Key);// 0xc89e830 0x78d73830a0
	static bool Key_IsAnalog(out const Key Key);// 0xc89e230 0x78d7383180
	static enum Key_GetNavigationDirectionFromKey(out const KeyEvent InKeyEvent);// 0xc89da54 0x78d7383260
	static enum Key_GetNavigationDirectionFromAnalog(out const AnalogInputEvent InAnalogEvent);// 0xc89d894 0x78d7383340
	static enum Key_GetNavigationActionFromKey(out const KeyEvent InKeyEvent);// 0xc89dc04 0x78d7383420
	static enum Key_GetNavigationAction(out const Key InKey);// 0xc89ddb4 0x78d7383500
	static FText Key_GetDisplayName(out const Key Key);// 0xc89d698 0x78d73835e0
	static bool InputEvent_IsShiftDown(out const InputEvent Input);// 0xc89d4e8 0x78d73836c0
	static bool InputEvent_IsRightShiftDown(out const InputEvent Input);// 0xc89d338 0x78d73837a0
	static bool InputEvent_IsRightControlDown(out const InputEvent Input);// 0xc89d0b0 0x78d7383880
	static bool InputEvent_IsRightCommandDown(out const InputEvent Input);// 0xc89cba0 0x78d7383960
	static bool InputEvent_IsRightAltDown(out const InputEvent Input);// 0xc89ce28 0x78d7380080
	static bool InputEvent_IsRepeat(out const InputEvent Input);// 0xc89d5c0 0x78d7380160
	static bool InputEvent_IsLeftShiftDown(out const InputEvent Input);// 0xc89d410 0x78d7380240
	static bool InputEvent_IsLeftControlDown(out const InputEvent Input);// 0xc89d188 0x78d7380320
	static bool InputEvent_IsLeftCommandDown(out const InputEvent Input);// 0xc89cc78 0x78d7380400
	static bool InputEvent_IsLeftAltDown(out const InputEvent Input);// 0xc89cf00 0x78d73804e0
	static bool InputEvent_IsControlDown(out const InputEvent Input);// 0xc89d260 0x78d73805c0
	static bool InputEvent_IsCommandDown(out const InputEvent Input);// 0xc89cd50 0x78d73806a0
	static bool InputEvent_IsAltDown(out const InputEvent Input);// 0xc89cfd8 0x78d7380780
	static FText InputChord_GetDisplayName(out const InputChord Key);// 0xc89c970 0x78d7380860
	static int GetUserIndex(out const KeyEvent Input);// 0xc89c4b0 0x78d7380940
	static Key GetKey(out const KeyEvent Input);// 0xc89c660 0x78d7380a20
	static float GetAnalogValue(out const AnalogInputEvent Input);// 0xc89c2f0 0x78d7380b00
	static bool EqualEqual_KeyKey(Key A, Key B);// 0xc89f604 0x78d7380be0
	static bool EqualEqual_InputChordInputChord(InputChord A, InputChord B);// 0xc89f130 0x78d7380cc0
	static void CalibrateTilt();// 0xc89fa54 0x78d7380da0

--------------------------------
Class: KismetInternationalizationLibrary.BlueprintFunctionLibrary.Object
	static bool SetCurrentLocale(FString Culture, const bool SaveToConfig);// 0xc8a1a28 0x78d7384ae0
	static bool SetCurrentLanguageAndLocale(FString Culture, const bool SaveToConfig);// 0xc8a1824 0x78d7384bc0
	static bool SetCurrentLanguage(FString Culture, const bool SaveToConfig);// 0xc8a1c2c 0x78d7384ca0
	static bool SetCurrentCulture(FString Culture, const bool SaveToConfig);// 0xc8a1e30 0x78d7384d80
	static bool SetCurrentAssetGroupCulture(const FName AssetGroup, FString Culture, const bool SaveToConfig);// 0xc8a16b4 0x78d7384e60
	static FString GetSuitableCulture(out const FString[] AvailableCultures, FString CultureToMatch, FString FallbackCulture);// 0xc8a0e68 0x78d7384f40
	static FString GetNativeCulture(const enum TextCategory);// 0xc8a1398 0x78d7385020
	static FString[] GetLocalizedCultures(const bool IncludeGame, const bool IncludeEngine, const bool IncludeEditor, const bool IncludeAdditional);// 0xc8a10f8 0x78d7385100
	static FString GetCurrentLocale();// 0xc8a1954 0x78d73851e0
	static FString GetCurrentLanguage();// 0xc8a1b58 0x78d73852c0
	static FString GetCurrentCulture();// 0xc8a1d5c 0x78d73853a0
	static FString GetCurrentAssetGroupCulture(const FName AssetGroup);// 0xc8a159c 0x78d7385480
	static FString GetCultureDisplayName(FString Culture, const bool Localized);// 0xc8a0ce0 0x78d7385560
	static void ClearCurrentAssetGroupCulture(const FName AssetGroup, const bool SaveToConfig);// 0xc8a14b0 0x78d7385640

--------------------------------
Class: KismetMaterialLibrary.BlueprintFunctionLibrary.Object
	static void SetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, out const LinearColor ParameterValue);// 0xc8a2ae4 0x78d7384680
	static void SetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, float ParameterValue);// 0xc8a2c60 0x78d7384760
	static LinearColor GetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0xc8a2868 0x78d7384840
	static float GetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0xc8a29a8 0x78d7384920
	static MaterialInstanceDynamic* CreateDynamicMaterialInstance(Object* WorldContextObject, MaterialInterface* parent, FName OptionalName, enum CreationFlags);// 0xc8a26e0 0x78d7384a00

--------------------------------
Class: KismetMathLibrary.BlueprintFunctionLibrary.Object
	static int Xor_IntInt(int A, int B);// 0xc8cd684 0x78d73ea6c0
	static int64 Xor_Int64Int64(int64 A, int64 B);// 0xc8cbf40 0x78d73ea7a0
	static int Wrap(int Value, int Min, int Max);// 0xc8ccd34 0x78d73ea880
	static Vector WeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float Weight);// 0xc8a4314 0x78d73ea960
	static Rotator WeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float Weight);// 0xc8a41d4 0x78d73eaa40
	static float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);// 0xc8a4454 0x78d73eab20
	static float VSizeXYSquared(Vector A);// 0xc8bf800 0x78d73eac00
	static float VSizeXY(Vector A);// 0xc8bf8ac 0x78d73eace0
	static float VSizeSquared(Vector A);// 0xc8bf95c 0x78d73e7400
	static float VSize2DSquared(Vector2D A);// 0xc8c3b5c 0x78d73e74e0
	static float VSize2D(Vector2D A);// 0xc8c3c08 0x78d73e75c0
	static float VSize(Vector A);// 0xc8bfa14 0x78d73e76a0
	static Vector VLerp(Vector A, Vector B, float Alpha);// 0xc8bec28 0x78d73e7780
	static Vector VInterpTo_Constant(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0xc8be6c4 0x78d73e7860
	static Vector VInterpTo(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0xc8be864 0x78d73e7940
	static Vector VectorSpringInterp(Vector Current, Vector Target, out VectorSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0xc8be440 0x78d73e7a20
	static Vector Vector_Zero();// 0xc8c3b30 0x78d73e7b00
	static Vector Vector_Up();// 0xc8c3a80 0x78d73e7be0
	static void Vector_UnwindEuler(out Vector A);// 0xc8c16c4 0x78d73e7cc0
	static Vector2D Vector_UnitCartesianToSpherical(Vector A);// 0xc8c04dc 0x78d73e7da0
	static Vector Vector_ToRadians(Vector A);// 0xc8c0694 0x78d73e7e80
	static Vector Vector_ToDegrees(Vector A);// 0xc8c05d4 0x78d73e7f60
	static Vector Vector_SnappedToGrid(Vector InVect, float InGridSize);// 0xc8bdedc 0x78d73e8040
	static void Vector_Set(out Vector A, float X, float Y, float Z);// 0xc8c3504 0x78d73e8120
	static Vector Vector_Right();// 0xc8c3a28 0x78d73e8200
	static Vector Vector_Reciprocal(out const Vector A);// 0xc8be354 0x78d73e82e0
	static Vector Vector_ProjectOnToNormal(Vector V, Vector InNormal);// 0xc8bd9bc 0x78d73e83c0
	static Vector Vector_One();// 0xc8c3b04 0x78d73e84a0
	static Vector Vector_NormalUnsafe(out const Vector A);// 0xc8beea4 0x78d73e8580
	static void Vector_Normalize(out Vector A, float Tolerance);// 0xc8bed7c 0x78d73e8660
	static Vector Vector_Normal2D(Vector A, float Tolerance);// 0xc8bef88 0x78d73e8740
	static Vector Vector_MirrorByPlane(Vector A, out const Plane InPlane);// 0xc8be008 0x78d73e8820
	static Vector Vector_Left();// 0xc8c39fc 0x78d73e8900
	static bool Vector_IsZero(out const Vector A);// 0xc8bf604 0x78d73e89e0
	static bool Vector_IsUnit(out const Vector A, float SquaredLenthTolerance);// 0xc8bf2e8 0x78d73e8ac0
	static bool Vector_IsUniform(out const Vector A, float Tolerance);// 0xc8bf400 0x78d73e8ba0
	static bool Vector_IsNormal(out const Vector A);// 0xc8bf204 0x78d73e8c80
	static bool Vector_IsNearlyZero(out const Vector A, float Tolerance);// 0xc8bf6dc 0x78d73e8d60
	static bool Vector_IsNAN(out const Vector A);// 0xc8bf520 0x78d73e8e40
	static float Vector_HeadingAngle(Vector A);// 0xc8c08d4 0x78d73e8f20
	static Vector Vector_GetSignVector(Vector A);// 0xc8c0aa8 0x78d73e9000
	static Vector Vector_GetProjection(Vector A);// 0xc8c09f0 0x78d73e5720
	static float Vector_GetAbsMin(Vector A);// 0xc8c0e20 0x78d73e5800
	static float Vector_GetAbsMax(Vector A);// 0xc8c0ee0 0x78d73e58e0
	static Vector Vector_GetAbs(Vector A);// 0xc8c0d70 0x78d73e59c0
	static Vector Vector_Forward();// 0xc8c3ad8 0x78d73e5aa0
	static Vector Vector_Down();// 0xc8c3a54 0x78d73e5b80
	static float Vector_DistanceSquared(Vector v1, Vector v2);// 0xc8bfcc4 0x78d73e5c60
	static float Vector_Distance2DSquared(Vector v1, Vector v2);// 0xc8bfad0 0x78d73e5d40
	static float Vector_Distance2D(Vector v1, Vector v2);// 0xc8bfbc8 0x78d73e5e20
	static float Vector_Distance(Vector v1, Vector v2);// 0xc8bfdd0 0x78d73e5f00
	static float Vector_CosineAngle2D(Vector A, Vector B);// 0xc8c0754 0x78d73e5fe0
	static Vector Vector_ComponentMin(Vector A, Vector B);// 0xc8c0c70 0x78d73e60c0
	static Vector Vector_ComponentMax(Vector A, Vector B);// 0xc8c0b70 0x78d73e61a0
	static Vector Vector_ClampSizeMax2D(Vector A, float Max);// 0xc8c1108 0x78d73e6280
	static Vector Vector_ClampSizeMax(Vector A, float Max);// 0xc8c1248 0x78d73e6360
	static Vector Vector_ClampSize2D(Vector A, float Min, float Max);// 0xc8c1398 0x78d73e6440
	static Vector Vector_BoundedToCube(Vector InVect, float InRadius);// 0xc8bddb8 0x78d73e6520
	static Vector Vector_BoundedToBox(Vector InVect, Vector InBoxMin, Vector InBoxMax);// 0xc8bdacc 0x78d73e6600
	static Vector Vector_Backward();// 0xc8c3aac 0x78d73e66e0
	static void Vector_Assign(out Vector A, out const Vector InVector);// 0xc8c3684 0x78d73e67c0
	static void Vector_AddBounded(out Vector A, Vector InAddVect, float InRadius);// 0xc8bdc34 0x78d73e68a0
	static Vector4 Vector4_Zero();// 0xc8bc844 0x78d73e6980
	static float Vector4_SizeSquared3(out const Vector4 A);// 0xc8baa3c 0x78d73e6a60
	static float Vector4_SizeSquared(out const Vector4 A);// 0xc8babe8 0x78d73e6b40
	static float Vector4_Size3(out const Vector4 A);// 0xc8bab10 0x78d73e6c20
	static float Vector4_Size(out const Vector4 A);// 0xc8bacc4 0x78d73e6d00
	static void Vector4_Set(out Vector4 A, float X, float Y, float Z, float W);// 0xc8bb474 0x78d73e6de0
	static Vector4 Vector4_NormalUnsafe3(out const Vector4 A);// 0xc8ba5e4 0x78d73e6ec0
	static void Vector4_Normalize3(out Vector4 A, float Tolerance);// 0xc8ba498 0x78d73e6fa0
	static Vector4 Vector4_Normal3(out const Vector4 A, float Tolerance);// 0xc8ba6d8 0x78d73e7080
	static Vector4 Vector4_Negated(out const Vector4 A);// 0xc8bb754 0x78d73e7160
	static Vector4 Vector4_MirrorByVector3(out const Vector4 Direction, out const Vector4 SurfaceNormal);// 0xc8ba35c 0x78d73e7240
	static bool Vector4_IsZero(out const Vector4 A);// 0xc8bada4 0x78d73e7320
	static bool Vector4_IsUnit3(out const Vector4 A, float SquaredLenthTolerance);// 0xc8ba918 0x78d73e3a40
	static bool Vector4_IsNormal3(out const Vector4 A);// 0xc8ba828 0x78d73e3b20
	static bool Vector4_IsNearlyZero3(out const Vector4 A, float Tolerance);// 0xc8bae94 0x78d73e3c00
	static bool Vector4_IsNAN(out const Vector4 A);// 0xc8bafc4 0x78d73e3ce0
	static float Vector4_DotProduct3(out const Vector4 A, out const Vector4 B);// 0xc8bb0c4 0x78d73e3dc0
	static float Vector4_DotProduct(out const Vector4 A, out const Vector4 B);// 0xc8bb1f4 0x78d73e3ea0
	static Vector4 Vector4_CrossProduct3(out const Vector4 A, out const Vector4 B);// 0xc8bb32c 0x78d73e3f80
	static void Vector4_Assign(out Vector4 A, out const Vector4 InVector);// 0xc8bb648 0x78d73e4060
	static Vector2D Vector2DInterpTo_Constant(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0xc8c43ac 0x78d73e4140
	static Vector2D Vector2DInterpTo(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0xc8c4530 0x78d73e4220
	static Vector2D Vector2D_Zero();// 0xc8c64c0 0x78d73e4300
	static Vector2D Vector2D_Unit45Deg();// 0xc8c64e4 0x78d73e43e0
	static Vector2D Vector2D_One();// 0xc8c6508 0x78d73e44c0
	static Vector VEase(Vector A, Vector B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0xc8bea04 0x78d73e45a0
	static DateTime UtcNow();// 0xc8adacc 0x78d73e4680
	static Vector4 TransformVector4(out const Matrix Matrix, out const Vector4 Vec4);// 0xc8ba234 0x78d73e4760
	static Rotator TransformRotation(out const Transform T, Rotator Rotation);// 0xc8a7e08 0x78d73e4840
	static Vector TransformLocation(out const Transform T, Vector Location);// 0xc8a80c4 0x78d73e4920
	static Vector TransformDirection(out const Transform T, Vector Direction);// 0xc8a7f2c 0x78d73e4a00
	static float Transform_Determinant(out const Transform Transform);// 0xc8a6d74 0x78d73e4ae0
	static Vector2D ToSign2D(Vector2D A);// 0xc8c3cb8 0x78d73e4bc0
	static Vector2D ToRounded2D(Vector2D A);// 0xc8c3d70 0x78d73e4ca0
	static void ToDirectionAndLength2D(Vector2D A, out Vector2D OutDir, out float OutLength);// 0xc8c3e1c 0x78d73e4d80
	static DateTime Today();// 0xc8adb00 0x78d73e4e60
	static Transform TLerp(out const Transform A, out const Transform B, float Alpha, byte InterpMode);// 0xc8a72cc 0x78d73e4f40
	static Transform TInterpTo(out const Transform Current, out const Transform Target, float DeltaTime, float InterpSpeed);// 0xc8a6e50 0x78d73e5020
	static Timespan TimespanZeroValue();// 0xc8ad6e0 0x78d73e5100
	static float TimespanRatio(Timespan A, Timespan B);// 0xc8ab8c4 0x78d73e51e0
	static Timespan TimespanMinValue();// 0xc8ad6f8 0x78d73e52c0
	static Timespan TimespanMaxValue();// 0xc8ad714 0x78d73e53a0
	static bool TimespanFromString(FString TimespanString, out Timespan Result);// 0xc8ab704 0x78d73e5480
	static Transform TEase(out const Transform A, out const Transform B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0xc8a7040 0x78d73e5560
	static float Tan(float A);// 0xc8ca2b0 0x78d73e5640
	static Vector Subtract_VectorVector(Vector A, Vector B);// 0xc8c2ad8 0x78d73e1d60
	static Vector Subtract_VectorInt(Vector A, int B);// 0xc8c28d4 0x78d73e1e40
	static Vector Subtract_VectorFloat(Vector A, float B);// 0xc8c29d8 0x78d73e1f20
	static Vector4 Subtract_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xc8bc044 0x78d73e2000
	static Vector2D Subtract_Vector2DVector2D(Vector2D A, Vector2D B);// 0xc8c5e34 0x78d73e20e0
	static Vector2D Subtract_Vector2DFloat(Vector2D A, float B);// 0xc8c5d40 0x78d73e21c0
	static Timespan Subtract_TimespanTimespan(Timespan A, Timespan B);// 0xc8acd00 0x78d73e22a0
	static Quat Subtract_QuatQuat(out const Quat A, out const Quat B);// 0xc8b4090 0x78d73e2380
	static LinearColor Subtract_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xc8afa80 0x78d73e2460
	static IntPoint Subtract_IntPointIntPoint(IntPoint A, IntPoint B);// 0xc8c6c28 0x78d73e2540
	static IntPoint Subtract_IntPointInt(IntPoint A, int B);// 0xc8c6b34 0x78d73e2620
	static int Subtract_IntInt(int A, int B);// 0xc8cdff8 0x78d73e2700
	static int64 Subtract_Int64Int64(int64 A, int64 B);// 0xc8cc8b4 0x78d73e27e0
	static float Subtract_FloatFloat(float A, float B);// 0xc8cb19c 0x78d73e28c0
	static DateTime Subtract_DateTimeTimespan(DateTime A, Timespan B);// 0xc8aefc4 0x78d73e29a0
	static Timespan Subtract_DateTimeDateTime(DateTime A, DateTime B);// 0xc8aedfc 0x78d73e2a80
	static byte Subtract_ByteByte(byte A, byte B);// 0xc8cec94 0x78d73e2b60
	static float Square(float A);// 0xc8c9d74 0x78d73e2c40
	static float Sqrt(float A);// 0xc8c9e1c 0x78d73e2d20
	static Vector Spherical2DToUnitCartesian(Vector2D A);// 0xc8c3fb0 0x78d73e2e00
	static float Sin(float A);// 0xc8ca578 0x78d73e2ee0
	static int64 SignOfInteger64(int64 A);// 0xc8cbcf8 0x78d73e2fc0
	static int SignOfInteger(int A);// 0xc8cd43c 0x78d73e30a0
	static float SignOfFloat(float A);// 0xc8c79ec 0x78d73e3180
	static void SetRandomStreamSeed(out RandomStream Stream, int NewSeed);// 0xc8a5988 0x78d73e3260
	static void Set2D(out Vector2D A, float X, float Y);// 0xc8c52cc 0x78d73e3340
	static Vector SelectVector(Vector A, Vector B, bool bPickA);// 0xc8a9df8 0x78d73e3420
	static Transform SelectTransform(out const Transform A, out const Transform B, bool bPickA);// 0xc8a99b8 0x78d73e3500
	static FString SelectString(FString A, FString B, bool bPickA);// 0xc8aa1ec 0x78d73e35e0
	static Rotator SelectRotator(Rotator A, Rotator B, bool bPickA);// 0xc8a9c94 0x78d73e36c0
	static Object* SelectObject(Object* A, Object* B, bool bSelectA);// 0xc8a9870 0x78d73e37a0
	static int SelectInt(int A, int B, bool bPickA);// 0xc8aa0a4 0x78d73e3880
	static float SelectFloat(float A, float B, bool bPickA);// 0xc8a9f5c 0x78d73e3960
	static LinearColor SelectColor(LinearColor A, LinearColor B, bool bPickA);// 0xc8a9b58 0x78d73e0080
	static class Object SelectClass(class Object A, class Object B, bool bSelectA);// 0xc8a9728 0x78d73e0160
	static void SeedRandomStream(out RandomStream Stream);// 0xc8a5a78 0x78d73e0240
	static float SafeDivide(float A, float B);// 0xc8c8e38 0x78d73e0320
	static int64 Round64(float A);// 0xc8c7de8 0x78d73e0400
	static int Round(float A);// 0xc8c8094 0x78d73e04e0
	static Rotator RotatorFromAxisAndAngle(Vector Axis, float Angle);// 0xc8c2f84 0x78d73e05c0
	static Vector RotateAngleAxis(Vector InVect, float AngleDeg, Vector Axis);// 0xc8c1870 0x78d73e06a0
	static Rotator RLerp(Rotator A, Rotator B, float Alpha, bool bShortestPath);// 0xc8b833c 0x78d73e0780
	static Rotator RInterpTo_Constant(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0xc8a6640 0x78d73e0860
	static Rotator RInterpTo(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0xc8a67e0 0x78d73e0940
	static void RGBToHSV_Vector(LinearColor RGB, out LinearColor HSV);// 0xc8b0dc0 0x78d73e0a20
	static void RGBToHSV(LinearColor InColor, out float H, out float S, out float V, out float A);// 0xc8b0ebc 0x78d73e0b00
	static LinearColor RGBLinearToHSV(LinearColor RGB);// 0xc8b0d10 0x78d73e0be0
	static void ResetVectorSpringState(out VectorSpringState SpringState);// 0xc8a6274 0x78d73e0cc0
	static void ResetRandomStream(out const RandomStream Stream);// 0xc8a5b1c 0x78d73e0da0
	static void ResetFloatSpringState(out FloatSpringState SpringState);// 0xc8a6334 0x78d73e0e80
	static Rotator REase(Rotator A, Rotator B, float Alpha, bool bShortestPath, byte EasingFunc, float BlendExp, int Steps);// 0xc8b80d0 0x78d73e0f60
	static Vector RandomUnitVectorInEllipticalConeInRadiansFromStream(out const Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians, out const RandomStream Stream);// 0xc8a5540 0x78d73e1040
	static Vector RandomUnitVectorInEllipticalConeInRadians(Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);// 0xc8bc9b0 0x78d73e1120
	static Vector RandomUnitVectorInEllipticalConeInDegreesFromStream(out const Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, out const RandomStream Stream);// 0xc8a5394 0x78d73e1200
	static Vector RandomUnitVectorInEllipticalConeInDegrees(Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);// 0xc8bc85c 0x78d73e12e0
	static Vector RandomUnitVectorInConeInRadiansFromStream(out const Vector ConeDir, float ConeHalfAngleInRadians, out const RandomStream Stream);// 0xc8a5838 0x78d73e13c0
	static Vector RandomUnitVectorInConeInRadians(Vector ConeDir, float ConeHalfAngleInRadians);// 0xc8bcc04 0x78d73e14a0
	static Vector RandomUnitVectorInConeInDegreesFromStream(out const Vector ConeDir, float ConeHalfAngleInDegrees, out const RandomStream Stream);// 0xc8a56d8 0x78d73e1580
	static Vector RandomUnitVectorInConeInDegrees(Vector ConeDir, float ConeHalfAngleInDegrees);// 0xc8bcaf0 0x78d73e1660
	static Vector RandomUnitVectorFromStream(out const RandomStream Stream);// 0xc8a5cc0 0x78d73e1740
	static Vector RandomUnitVector();// 0xc8bce2c 0x78d73e1820
	static Rotator RandomRotatorFromStream(bool bRoll, out const RandomStream Stream);// 0xc8a5bc0 0x78d73e1900
	static Rotator RandomRotator(bool bRoll);// 0xc8b84d0 0x78d73e19e0
	static Vector RandomPointInBoundingBox(Vector Origin, Vector BoxExtent);// 0xc8bcd08 0x78d73e1ac0
	static int RandomIntegerInRangeFromStream(int Min, int Max, out const RandomStream Stream);// 0xc8a602c 0x78d73e1ba0
	static int RandomIntegerInRange(int Min, int Max);// 0xc8cd224 0x78d73e1c80
	static int RandomIntegerFromStream(int Max, out const RandomStream Stream);// 0xc8a6174 0x78d73be780
	static int64 RandomInteger64InRange(int64 Min, int64 Max);// 0xc8cbad8 0x78d73be860
	static int64 RandomInteger64(int64 Max);// 0xc8cbc14 0x78d73be940
	static int RandomInteger(int Max);// 0xc8cd35c 0x78d73bea20
	static float RandomFloatInRangeFromStream(float Min, float Max, out const RandomStream Stream);// 0xc8a5d78 0x78d73beb00
	static float RandomFloatInRange(float Min, float Max);// 0xc8c9c14 0x78d73bebe0
	static float RandomFloatFromStream(out const RandomStream Stream);// 0xc8a5ec0 0x78d73becc0
	static float RandomFloat();// 0xc8c9d2c 0x78d73beda0
	static bool RandomBoolWithWeightFromStream(float Weight, out const RandomStream RandomStream);// 0xc8cf8e0 0x78d73bee80
	static bool RandomBoolWithWeight(float Weight);// 0xc8cf9e4 0x78d73bef60
	static bool RandomBoolFromStream(out const RandomStream Stream);// 0xc8a5f74 0x78d73bf040
	static bool RandomBool();// 0xc8cfa90 0x78d73bf120
	static float RadiansToDegrees(float A);// 0xc8c9a6c 0x78d73bf200
	static Vector Quat_VectorUp(out const Quat Q);// 0xc8b2f1c 0x78d73bf2e0
	static Vector Quat_VectorRight(out const Quat Q);// 0xc8b304c 0x78d73bf3c0
	static Vector Quat_VectorForward(out const Quat Q);// 0xc8b317c 0x78d73bf4a0
	static Vector Quat_UnrotateVector(out const Quat Q, out const Vector V);// 0xc8b2148 0x78d73bf580
	static float Quat_SizeSquared(out const Quat Q);// 0xc8b2448 0x78d73bf660
	static float Quat_Size(out const Quat Q);// 0xc8b2518 0x78d73bf740
	static void Quat_SetFromEuler(out Quat Q, out const Vector Euler);// 0xc8b2754 0x78d73bf820
	static void Quat_SetComponents(out Quat Q, float X, float Y, float Z, float W);// 0xc8b284c 0x78d73bf900
	static Rotator Quat_Rotator(out const Quat Q);// 0xc8b25ec 0x78d73bf9e0
	static Vector Quat_RotateVector(out const Quat Q, out const Vector V);// 0xc8b22cc 0x78d73bfac0
	static Quat Quat_Normalized(out const Quat Q, float Tolerance);// 0xc8b2c94 0x78d73bfba0
	static void Quat_Normalize(out Quat Q, float Tolerance);// 0xc8b2dc4 0x78d73bfc80
	static Quat Quat_MakeFromEuler(out const Vector Euler);// 0xc8b26a0 0x78d73bfd60
	static Quat Quat_Log(out const Quat Q);// 0xc8b2a14 0x78d73bfe40
	static bool Quat_IsNormalized(out const Quat Q);// 0xc8b3cb8 0x78d73bff20
	static bool Quat_IsNonFinite(out const Quat Q);// 0xc8b3ad0 0x78d73bcaa0
	static bool Quat_IsIdentity(out const Quat Q, float Tolerance);// 0xc8b3da4 0x78d73bcb80
	static bool Quat_IsFinite(out const Quat Q);// 0xc8b3bc4 0x78d73bcc60
	static Quat Quat_Inversed(out const Quat Q);// 0xc8b2ac8 0x78d73bcd40
	static Quat Quat_Identity();// 0xc8b4678 0x78d73bce20
	static Vector Quat_GetRotationAxis(out const Quat Q);// 0xc8b2b90 0x78d73bcf00
	static Vector Quat_GetAxisZ(out const Quat Q);// 0xc8b32a8 0x78d73bcfe0
	static Vector Quat_GetAxisY(out const Quat Q);// 0xc8b33d8 0x78d73bd0c0
	static Vector Quat_GetAxisX(out const Quat Q);// 0xc8b3508 0x78d73bd1a0
	static float Quat_GetAngle(out const Quat Q);// 0xc8b3634 0x78d73bd280
	static Quat Quat_Exp(out const Quat Q);// 0xc8b3700 0x78d73bd360
	static Vector Quat_Euler(out const Quat Q);// 0xc8b37b4 0x78d73bd440
	static void Quat_EnforceShortestArcWith(out Quat A, out const Quat B);// 0xc8b3868 0x78d73bd520
	static float Quat_AngularDistance(out const Quat A, out const Quat B);// 0xc8b3998 0x78d73bd600
	static Vector ProjectVectorOnToVector(Vector V, Vector Target);// 0xc8bd870 0x78d73bd6e0
	static Vector ProjectVectorOnToPlane(Vector V, Vector PlaneNormal);// 0xc8bd5e4 0x78d73bd7c0
	static Vector ProjectPointOnToPlane(Vector Point, Vector PlaneBase, Vector PlaneNormal);// 0xc8bd700 0x78d73bd8a0
	static bool PointsAreCoplanar(out const Vector[] Points, float Tolerance);// 0xc8a4e50 0x78d73bd980
	static float PerlinNoise1D(const float Value);// 0xc8a52ec 0x78d73bda60
	static int Percent_IntInt(int A, int B);// 0xc8ce1d8 0x78d73bdb40
	static float Percent_FloatFloat(float A, float B);// 0xc8cfe18 0x78d73bdc20
	static byte Percent_ByteByte(byte A, byte B);// 0xc8cee7c 0x78d73bdd00
	static int Or_IntInt(int A, int B);// 0xc8cd594 0x78d73bdde0
	static int64 Or_Int64Int64(int64 A, int64 B);// 0xc8cbe50 0x78d73bdec0
	static DateTime Now();// 0xc8adb64 0x78d73bdfa0
	static bool NotEqualExactly_VectorVector(Vector A, Vector B);// 0xc8c1e34 0x78d73be080
	static bool NotEqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xc8bb9c0 0x78d73be160
	static bool NotEqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0xc8c5604 0x78d73be240
	static bool NotEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0xc8c1ccc 0x78d73be320
	static bool NotEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0xc8bb814 0x78d73be400
	static bool NotEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0xc8c54b0 0x78d73be4e0
	static bool NotEqual_TimespanTimespan(Timespan A, Timespan B);// 0xc8ac938 0x78d73be5c0
	static bool NotEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0xc8b8e74 0x78d73be6a0
	static bool NotEqual_QuatQuat(out const Quat A, out const Quat B, float ErrorTolerance);// 0xc8b4290 0x78d73badc0
	static bool NotEqual_ObjectObject(Object* A, Object* B);// 0xc8a9540 0x78d73baea0
	static bool NotEqual_NameName(FName A, FName B);// 0xc8a907c 0x78d73baf80
	static bool NotEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0xc8b7600 0x78d73bb060
	static bool NotEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xc8afc48 0x78d73bb140
	static bool NotEqual_IntPointIntPoint(IntPoint A, IntPoint B);// 0xc8c652c 0x78d73bb220
	static bool NotEqual_IntInt(int A, int B);// 0xc8cda40 0x78d73bb300
	static bool NotEqual_Int64Int64(int64 A, int64 B);// 0xc8cc2fc 0x78d73bb3e0
	static bool NotEqual_FloatFloat(float A, float B);// 0xc8caaa0 0x78d73bb4c0
	static bool NotEqual_DateTimeDateTime(DateTime A, DateTime B);// 0xc8aec2c 0x78d73bb5a0
	static bool NotEqual_ClassClass(class Object A, class Object B);// 0xc8a9358 0x78d73bb680
	static bool NotEqual_ByteByte(byte A, byte B);// 0xc8ce4d4 0x78d73bb760
	static bool NotEqual_BoolBool(bool A, bool B);// 0xc8cf644 0x78d73bb840
	static bool Not_PreBool(bool A);// 0xc8cf834 0x78d73bb920
	static int64 Not_Int64(int64 A);// 0xc8cbda8 0x78d73bba00
	static int Not_Int(int A);// 0xc8cd4ec 0x78d73bbae0
	static Vector2D NormalSafe2D(Vector2D A, float Tolerance);// 0xc8c4290 0x78d73bbbc0
	static float NormalizeToRange(float Value, float RangeMin, float RangeMax);// 0xc8c78b0 0x78d73bbca0
	static Rotator NormalizedDeltaRotator(Rotator A, Rotator B);// 0xc8b7fdc 0x78d73bbd80
	static float NormalizeAxis(float Angle);// 0xc8b7e8c 0x78d73bbe60
	static void Normalize2D(out Vector2D A, float Tolerance);// 0xc8c4090 0x78d73bbf40
	static Vector2D Normal2D(Vector2D A);// 0xc8c41b4 0x78d73bc020
	static Vector Normal(Vector A, float Tolerance);// 0xc8bf0c8 0x78d73bc100
	static Vector NegateVector(Vector A);// 0xc8c21bc 0x78d73bc1e0
	static Rotator NegateRotator(Rotator A);// 0xc8b8acc 0x78d73bc2c0
	static Vector2D Negated2D(out const Vector2D A);// 0xc8c53fc 0x78d73bc3a0
	static bool NearlyEqual_TransformTransform(out const Transform A, out const Transform B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);// 0xc8a89a8 0x78d73bc480
	static bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);// 0xc8cab94 0x78d73bc560
	static float MultiplyMultiply_FloatFloat(float Base, float Exp);// 0xc8cb60c 0x78d73bc640
	static float MultiplyByPi(float Value);// 0xc8c745c 0x78d73bc720
	static Vector Multiply_VectorVector(Vector A, Vector B);// 0xc8c27dc 0x78d73bc800
	static Vector Multiply_VectorInt(Vector A, int B);// 0xc8c25e0 0x78d73bc8e0
	static Vector Multiply_VectorFloat(Vector A, float B);// 0xc8c26e0 0x78d73bc9c0
	static Vector4 Multiply_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xc8bbf2c 0x78d73b90e0
	static Vector2D Multiply_Vector2DVector2D(Vector2D A, Vector2D B);// 0xc8c5c5c 0x78d73b91c0
	static Vector2D Multiply_Vector2DFloat(Vector2D A, float B);// 0xc8c5b6c 0x78d73b92a0
	static Timespan Multiply_TimespanFloat(Timespan A, float Scalar);// 0xc8acc04 0x78d73b9380
	static Rotator Multiply_RotatorInt(Rotator A, int B);// 0xc8b8c78 0x78d73b9460
	static Rotator Multiply_RotatorFloat(Rotator A, float B);// 0xc8b8d78 0x78d73b9540
	static Quat Multiply_QuatQuat(out const Quat A, out const Quat B);// 0xc8b3f50 0x78d73b9620
	static Matrix Multiply_MatrixMatrix(out const Matrix A, out const Matrix B);// 0xc8b7abc 0x78d73b9700
	static Matrix Multiply_MatrixFloat(out const Matrix A, float B);// 0xc8b789c 0x78d73b97e0
	static LinearColor Multiply_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xc8af99c 0x78d73b98c0
	static LinearColor Multiply_LinearColorFloat(LinearColor A, float B);// 0xc8af8ac 0x78d73b99a0
	static IntPoint Multiply_IntPointIntPoint(IntPoint A, IntPoint B);// 0xc8c6a40 0x78d73b9a80
	static IntPoint Multiply_IntPointInt(IntPoint A, int B);// 0xc8c694c 0x78d73b9b60
	static int Multiply_IntInt(int A, int B);// 0xc8ce3e4 0x78d73b9c40
	static float Multiply_IntFloat(int A, float B);// 0xc8cb428 0x78d73b9d20
	static int64 Multiply_Int64Int64(int64 A, int64 B);// 0xc8ccb98 0x78d73b9e00
	static float Multiply_FloatFloat(float A, float B);// 0xc8cb51c 0x78d73b9ee0
	static byte Multiply_ByteByte(byte A, byte B);// 0xc8cf088 0x78d73b9fc0
	static Vector MirrorVectorByNormal(Vector InVect, Vector InNormal);// 0xc8be13c 0x78d73ba0a0
	static void MinOfIntArray(out const int[] IntArray, out int IndexOfMinValue, out int MinValue);// 0xc8c8b08 0x78d73ba180
	static void MinOfFloatArray(out const float[] FloatArray, out int IndexOfMinValue, out float MinValue);// 0xc8c87d8 0x78d73ba260
	static void MinOfByteArray(out const byte[] ByteArray, out int IndexOfMinValue, out byte MinValue);// 0xc8c84a8 0x78d73ba340
	static int64 MinInt64(int64 A, int64 B);// 0xc8cb9e4 0x78d73ba420
	static void MinimumAreaRectangle(Object* WorldContextObject, out const Vector[] InVerts, out const Vector SampleSurfaceNormal, out Vector OutRectCenter, out Rotator OutRectRotation, out float OutSideLengthX, out float OutSideLengthY, bool bDebugDraw);// 0xc8a4f88 0x78d73ba500
	static int Min(int A, int B);// 0xc8cd130 0x78d73ba5e0
	static void MaxOfIntArray(out const int[] IntArray, out int IndexOfMaxValue, out int MaxValue);// 0xc8c8ca0 0x78d73ba6c0
	static void MaxOfFloatArray(out const float[] FloatArray, out int IndexOfMaxValue, out float MaxValue);// 0xc8c8970 0x78d73ba7a0
	static void MaxOfByteArray(out const byte[] ByteArray, out int IndexOfMaxValue, out byte MaxValue);// 0xc8c8640 0x78d73ba880
	static int64 MaxInt64(int64 A, int64 B);// 0xc8cb8f0 0x78d73ba960
	static int Max(int A, int B);// 0xc8cd03c 0x78d73baa40
	static Vector4 Matrix_TransformVector4(out const Matrix M, Vector4 V);// 0xc8b74e8 0x78d73bab20
	static Vector4 Matrix_TransformVector(out const Matrix M, Vector V);// 0xc8b7184 0x78d73bac00
	static Vector4 Matrix_TransformPosition(out const Matrix M, Vector V);// 0xc8b73d8 0x78d73bace0
	static Quat Matrix_ToQuat(out const Matrix M);// 0xc8b517c 0x78d73b7400
	static void Matrix_SetOrigin(out Matrix M, Vector NewOrigin);// 0xc8b5520 0x78d73b74e0
	static void Matrix_SetColumn(out Matrix M, byte Column, Vector Value);// 0xc8b52e4 0x78d73b75c0
	static void Matrix_SetAxis(out Matrix M, byte Axis, Vector AxisVector);// 0xc8b560c 0x78d73b76a0
	static Matrix Matrix_ScaleTranslation(out const Matrix M, Vector Scale3D);// 0xc8b6110 0x78d73b7780
	static Matrix Matrix_RemoveTranslation(out const Matrix M);// 0xc8b64f4 0x78d73b7860
	static void Matrix_RemoveScaling(out Matrix M, float Tolerance);// 0xc8b690c 0x78d73b7940
	static Matrix Matrix_Mirror(out const Matrix M, byte MirrorAxis, byte FlipAxis);// 0xc8b469c 0x78d73b7a20
	static Vector Matrix_InverseTransformVector(out const Matrix M, Vector V);// 0xc8b7040 0x78d73b7b00
	static Vector Matrix_InverseTransformPosition(out const Matrix M, Vector V);// 0xc8b729c 0x78d73b7be0
	static Matrix Matrix_Identity();// 0xc8b7c34 0x78d73b7cc0
	static Vector Matrix_GetUnitAxis(out const Matrix M, byte Axis);// 0xc8b59f8 0x78d73b7da0
	static void Matrix_GetUnitAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0xc8b5744 0x78d73b7e80
	static Matrix Matrix_GetTransposed(out const Matrix M);// 0xc8b6f58 0x78d73b7f60
	static Matrix Matrix_GetTransposeAdjoint(out const Matrix M);// 0xc8b6ac0 0x78d73b8040
	static Vector Matrix_GetScaleVector(out const Matrix M, float Tolerance);// 0xc8b65b8 0x78d73b8120
	static Vector Matrix_GetScaledAxis(out const Matrix M, byte Axis);// 0xc8b5d70 0x78d73b8200
	static void Matrix_GetScaledAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0xc8b5ba4 0x78d73b82e0
	static float Matrix_GetRotDeterminant(out const Matrix M);// 0xc8b6cdc 0x78d73b83c0
	static Rotator Matrix_GetRotator(out const Matrix M);// 0xc8b5230 0x78d73b84a0
	static Vector Matrix_GetOrigin(out const Matrix InMatrix);// 0xc8b7c60 0x78d73b8580
	static float Matrix_GetMaximumAxisScale(out const Matrix M);// 0xc8b5ffc 0x78d73b8660
	static Matrix Matrix_GetMatrixWithoutScale(out const Matrix M, float Tolerance);// 0xc8b6724 0x78d73b8740
	static Matrix Matrix_GetInverse(out const Matrix M);// 0xc8b6c1c 0x78d73b8820
	static bool Matrix_GetFrustumTopPlane(out const Matrix M, out Plane OutPlane);// 0xc8b4a4c 0x78d73b8900
	static bool Matrix_GetFrustumRightPlane(out const Matrix M, out Plane OutPlane);// 0xc8b4bc8 0x78d73b89e0
	static bool Matrix_GetFrustumNearPlane(out const Matrix M, out Plane OutPlane);// 0xc8b501c 0x78d73b8ac0
	static bool Matrix_GetFrustumLeftPlane(out const Matrix M, out Plane OutPlane);// 0xc8b4d3c 0x78d73b8ba0
	static bool Matrix_GetFrustumFarPlane(out const Matrix M, out Plane OutPlane);// 0xc8b4eb0 0x78d73b8c80
	static bool Matrix_GetFrustumBottomPlane(out const Matrix M, out Plane OutPlane);// 0xc8b48d0 0x78d73b8d60
	static float Matrix_GetDeterminant(out const Matrix M);// 0xc8b6dd8 0x78d73b8e40
	static Vector Matrix_GetColumn(out const Matrix M, byte Column);// 0xc8b5420 0x78d73b8f20
	static bool Matrix_ContainsNaN(out const Matrix M);// 0xc8b6228 0x78d73b9000
	static Matrix Matrix_ConcatenateTranslation(out const Matrix M, Vector Translation);// 0xc8b63dc 0x78d73b5720
	static Matrix Matrix_ApplyScale(out const Matrix M, float Scale);// 0xc8b5eb8 0x78d73b5800
	static float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0xc8c76e0 0x78d73b58e0
	static float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0xc8c7510 0x78d73b59c0
	static Vector4 MakeVector4(float X, float Y, float Z, float W);// 0xc8bc6c0 0x78d73b5aa0
	static Vector2D MakeVector2D(float X, float Y);// 0xc8c63d4 0x78d73b5b80
	static Vector MakeVector(float X, float Y, float Z);// 0xc8c38c0 0x78d73b5c60
	static Transform MakeTransform(Vector Location, Rotator Rotation, Vector Scale);// 0xc8a8f1c 0x78d73b5d40
	static Timespan MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano);// 0xc8ad340 0x78d73b5e20
	static Timespan MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds);// 0xc8ad510 0x78d73b5f00
	static Rotator MakeRotFromZY(out const Vector Z, out const Vector Y);// 0xc8b9870 0x78d73b5fe0
	static Rotator MakeRotFromZX(out const Vector Z, out const Vector X);// 0xc8b997c 0x78d73b60c0
	static Rotator MakeRotFromZ(out const Vector Z);// 0xc8b9eb8 0x78d73b61a0
	static Rotator MakeRotFromYZ(out const Vector Y, out const Vector Z);// 0xc8b9a88 0x78d73b6280
	static Rotator MakeRotFromYX(out const Vector Y, out const Vector X);// 0xc8b9b94 0x78d73b6360
	static Rotator MakeRotFromY(out const Vector Y);// 0xc8b9f78 0x78d73b6440
	static Rotator MakeRotFromXZ(out const Vector X, out const Vector Z);// 0xc8b9ca0 0x78d73b6520
	static Rotator MakeRotFromXY(out const Vector X, out const Vector Y);// 0xc8b9dac 0x78d73b6600
	static Rotator MakeRotFromX(out const Vector X);// 0xc8ba038 0x78d73b66e0
	static Rotator MakeRotator(float Roll, float Pitch, float Yaw);// 0xc8ba0f8 0x78d73b67c0
	static Rotator MakeRotationFromAxes(Vector Forward, Vector Right, Vector Up);// 0xc8b972c 0x78d73b68a0
	static Transform MakeRelativeTransform(out const Transform A, out const Transform RelativeTo);// 0xc8a77ec 0x78d73b6980
	static RandomStream MakeRandomStream(int InitialSeed);// 0xc8aa538 0x78d73b6a60
	static QualifiedFrameTime MakeQualifiedFrameTime(FrameNumber Frame, FrameRate FrameRate, float SubFrame);// 0xc8ab5c8 0x78d73b6b40
	static float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);// 0xc8c719c 0x78d73b6c20
	static Plane MakePlaneFromPointAndNormal(Vector Point, Vector Normal);// 0xc8af6d4 0x78d73b6d00
	static FrameRate MakeFrameRate(int Numerator, int Denominator);// 0xc8ab320 0x78d73b6de0
	static DateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);// 0xc8af470 0x78d73b6ec0
	static LinearColor MakeColor(float R, float G, float B, float A);// 0xc8b1ea4 0x78d73b6fa0
	static Box2D MakeBox2D(Vector2D Min, Vector2D Max);// 0xc8aa5e0 0x78d73b7080
	static Box MakeBox(Vector Min, Vector Max);// 0xc8aa6c8 0x78d73b7160
	static float Loge(float A);// 0xc8c9ed8 0x78d73b7240
	static float Log(float A, float Base);// 0xc8c9f80 0x78d73b7320
	static bool LinePlaneIntersection_OriginNormal(out const Vector LineStart, out const Vector LineEnd, Vector PlaneOrigin, Vector PlaneNormal, out float T, out Vector Intersection);// 0xc8a4590 0x78d73b3a40
	static bool LinePlaneIntersection(out const Vector LineStart, out const Vector LineEnd, out const Plane APlane, out float T, out Vector Intersection);// 0xc8a47c8 0x78d73b3b20
	static LinearColor LinearColorLerpUsingHSV(LinearColor A, LinearColor B, float Alpha);// 0xc8b0004 0x78d73b3c00
	static LinearColor LinearColorLerp(LinearColor A, LinearColor B, float Alpha);// 0xc8b0144 0x78d73b3ce0
	static LinearColor LinearColor_Yellow();// 0xc8b204c 0x78d73b3dc0
	static LinearColor LinearColor_White();// 0xc8b2124 0x78d73b3ea0
	static LinearColor LinearColor_Transparent();// 0xc8b2028 0x78d73b3f80
	static Color LinearColor_ToRGBE(LinearColor InLinearColor);// 0xc8b0bbc 0x78d73b4060
	static LinearColor LinearColor_ToNewOpacity(LinearColor InColor, float InOpacity);// 0xc8b0658 0x78d73b4140
	static void LinearColor_SetTemperature(out LinearColor InOutColor, float InTemperature);// 0xc8b1550 0x78d73b4220
	static void LinearColor_SetRGBA(out LinearColor InOutColor, float R, float G, float B, float A);// 0xc8b1a08 0x78d73b4300
	static void LinearColor_SetRandomHue(out LinearColor InOutColor);// 0xc8b14a0 0x78d73b43e0
	static void LinearColor_SetFromSRGB(out LinearColor InOutColor, out const Color InSRGB);// 0xc8b1738 0x78d73b44c0
	static void LinearColor_SetFromPow22(out LinearColor InOutColor, out const Color InColor);// 0xc8b1640 0x78d73b45a0
	static void LinearColor_SetFromHSV(out LinearColor InOutColor, float H, float S, float V, float A);// 0xc8b1830 0x78d73b4680
	static void LinearColor_Set(out LinearColor InOutColor, LinearColor InColor);// 0xc8b1bd0 0x78d73b4760
	static LinearColor LinearColor_Red();// 0xc8b20b8 0x78d73b4840
	static Color LinearColor_QuantizeRound(LinearColor InColor);// 0xc8b0964 0x78d73b4920
	static Color LinearColor_Quantize(LinearColor InColor);// 0xc8b0a10 0x78d73b4a00
	static bool LinearColor_IsNearEqual(LinearColor A, LinearColor B, float Tolerance);// 0xc8afe88 0x78d73b4ae0
	static LinearColor LinearColor_Green();// 0xc8b2094 0x78d73b4bc0
	static LinearColor LinearColor_Gray();// 0xc8b2100 0x78d73b4ca0
	static float LinearColor_GetMin(LinearColor InColor);// 0xc8b0404 0x78d73b4d80
	static float LinearColor_GetMax(LinearColor InColor);// 0xc8b04c0 0x78d73b4e60
	static float LinearColor_GetLuminance(LinearColor InColor);// 0xc8b057c 0x78d73b4f40
	static float LinearColor_Distance(LinearColor c1, LinearColor c2);// 0xc8b074c 0x78d73b5020
	static LinearColor LinearColor_Desaturated(LinearColor InColor, float InDesaturation);// 0xc8b0868 0x78d73b5100
	static LinearColor LinearColor_Blue();// 0xc8b2070 0x78d73b51e0
	static LinearColor LinearColor_Black();// 0xc8b20dc 0x78d73b52c0
	static Vector LessLess_VectorRotator(Vector A, Rotator B);// 0xc8c1764 0x78d73b53a0
	static bool LessEqual_TimespanTimespan(Timespan A, Timespan B);// 0xc8ac598 0x78d73b5480
	static bool LessEqual_IntInt(int A, int B);// 0xc8cdd1c 0x78d73b5560
	static bool LessEqual_Int64Int64(int64 A, int64 B);// 0xc8cc5d8 0x78d73b5640
	static bool LessEqual_FloatFloat(float A, float B);// 0xc8caec0 0x78d73b1d60
	static bool LessEqual_DateTimeDateTime(DateTime A, DateTime B);// 0xc8ae88c 0x78d73b1e40
	static bool LessEqual_ByteByte(byte A, byte B);// 0xc8ce7bc 0x78d73b1f20
	static bool Less_TimespanTimespan(Timespan A, Timespan B);// 0xc8ac680 0x78d73b2000
	static bool Less_IntInt(int A, int B);// 0xc8cdf04 0x78d73b20e0
	static bool Less_Int64Int64(int64 A, int64 B);// 0xc8cc7c0 0x78d73b21c0
	static bool Less_FloatFloat(float A, float B);// 0xc8cb0a8 0x78d73b22a0
	static bool Less_DateTimeDateTime(DateTime A, DateTime B);// 0xc8ae974 0x78d73b2380
	static bool Less_ByteByte(byte A, byte B);// 0xc8ce9ac 0x78d73b2460
	static float Lerp(float A, float B, float Alpha);// 0xc8c8364 0x78d73b2540
	static bool IsZero2D(out const Vector2D A);// 0xc8c46b4 0x78d73b2620
	static bool IsPointInBoxWithTransform(Vector Point, out const Transform BoxWorldTransform, Vector BoxExtent);// 0xc8a4ba8 0x78d73b2700
	static bool IsPointInBox(Vector Point, Vector BoxOrigin, Vector BoxExtent);// 0xc8a4d0c 0x78d73b27e0
	static bool IsNearlyZero2D(out const Vector2D A, float Tolerance);// 0xc8c4778 0x78d73b28c0
	static bool IsMorning(DateTime A);// 0xc8ade38 0x78d73b29a0
	static bool IsLeapYear(int Year);// 0xc8adbd8 0x78d73b2a80
	static bool IsAfternoon(DateTime A);// 0xc8adf20 0x78d73b2b60
	static Transform InvertTransform(out const Transform T);// 0xc8a74c0 0x78d73b2c40
	static Rotator InverseTransformRotation(out const Transform T, Rotator Rotation);// 0xc8a7948 0x78d73b2d20
	static Vector InverseTransformLocation(out const Transform T, Vector Location);// 0xc8a7c0c 0x78d73b2e00
	static Vector InverseTransformDirection(out const Transform T, Vector Direction);// 0xc8a7a6c 0x78d73b2ee0
	static IntPoint IntPoint_Zero();// 0xc8c7038 0x78d73b2fc0
	static IntPoint IntPoint_Up();// 0xc8c7000 0x78d73b30a0
	static IntPoint IntPoint_Right();// 0xc8c6fc4 0x78d73b3180
	static IntPoint IntPoint_One();// 0xc8c701c 0x78d73b3260
	static IntPoint IntPoint_Left();// 0xc8c6fe4 0x78d73b3340
	static IntPoint IntPoint_Down();// 0xc8c6fa4 0x78d73b3420
	static bool InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax);// 0xc8cd864 0x78d73b3500
	static bool InRange_Int64Int64(int64 Value, int64 Min, int64 Max, bool InclusiveMin, bool InclusiveMax);// 0xc8cc120 0x78d73b35e0
	static bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);// 0xc8ca8c4 0x78d73b36c0
	static float Hypotenuse(float Width, float Height);// 0xc8ca7d4 0x78d73b37a0
	static LinearColor HSVToRGBLinear(LinearColor HSV);// 0xc8b10b4 0x78d73b3880
	static void HSVToRGB_Vector(LinearColor HSV, out LinearColor RGB);// 0xc8b1164 0x78d73b3960
	static LinearColor HSVToRGB(float H, float S, float V, float A);// 0xc8b1260 0x78d73b0080
	static float GridSnap_Float(float Location, float GridSize);// 0xc8ca6c8 0x78d73b0160
	static Vector GreaterGreater_VectorRotator(Vector A, Rotator B);// 0xc8c19ac 0x78d73b0240
	static bool GreaterEqual_TimespanTimespan(Timespan A, Timespan B);// 0xc8ac768 0x78d73b0320
	static bool GreaterEqual_IntInt(int A, int B);// 0xc8cdc28 0x78d73b0400
	static bool GreaterEqual_Int64Int64(int64 A, int64 B);// 0xc8cc4e4 0x78d73b04e0
	static bool GreaterEqual_FloatFloat(float A, float B);// 0xc8cadcc 0x78d73b05c0
	static bool GreaterEqual_DateTimeDateTime(DateTime A, DateTime B);// 0xc8aea5c 0x78d73b06a0
	static bool GreaterEqual_ByteByte(byte A, byte B);// 0xc8ce6c4 0x78d73b0780
	static bool Greater_TimespanTimespan(Timespan A, Timespan B);// 0xc8ac850 0x78d73b0860
	static bool Greater_IntInt(int A, int B);// 0xc8cde10 0x78d73b0940
	static bool Greater_Int64Int64(int64 A, int64 B);// 0xc8cc6cc 0x78d73b0a20
	static bool Greater_FloatFloat(float A, float B);// 0xc8cafb4 0x78d73b0b00
	static bool Greater_DateTimeDateTime(DateTime A, DateTime B);// 0xc8aeb44 0x78d73b0be0
	static bool Greater_ByteByte(byte A, byte B);// 0xc8ce8b4 0x78d73b0cc0
	static int GetYear(DateTime A);// 0xc8ae008 0x78d73b0da0
	static void GetYawPitchFromVector(Vector InVec, out float Yaw, out float Pitch);// 0xc8c0248 0x78d73b0e80
	static Vector GetVectorArrayAverage(out const Vector[] Vectors);// 0xc8bffa0 0x78d73b0f60
	static Vector GetUpVector(Rotator InRot);// 0xc8b88c8 0x78d73b1040
	static float GetTotalSeconds(Timespan A);// 0xc8abd0c 0x78d73b1120
	static float GetTotalMinutes(Timespan A);// 0xc8abdc4 0x78d73b1200
	static float GetTotalMilliseconds(Timespan A);// 0xc8abe7c 0x78d73b12e0
	static float GetTotalHours(Timespan A);// 0xc8abf34 0x78d73b13c0
	static float GetTotalDays(Timespan A);// 0xc8abfe8 0x78d73b14a0
	static Timespan GetTimeOfDay(DateTime A);// 0xc8ae0b4 0x78d73b1580
	static float GetTAU();// 0xc8c9bd4 0x78d73b1660
	static void GetSlopeDegreeAngles(out const Vector MyRightYAxis, out const Vector FloorNormal, out const Vector UpVector, out float OutSlopePitchDegreeAngle, out float OutSlopeRollDegreeAngle);// 0xc8a49c0 0x78d73b1740
	static int GetSeconds(Timespan A);// 0xc8ac09c 0x78d73b1820
	static int GetSecond(DateTime A);// 0xc8ae184 0x78d73b1900
	static Vector2D GetRotated2D(Vector2D A, float AngleDeg);// 0xc8c488c 0x78d73b19e0
	static Vector GetRightVector(Rotator InRot);// 0xc8b8974 0x78d73b1ac0
	static Vector GetReflectionVector(Vector Direction, Vector SurfaceNormal);// 0xc8be248 0x78d73b1ba0
	static float GetPointDistanceToSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0xc8bcfc0 0x78d73b1c80
	static float GetPointDistanceToLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0xc8bce64 0x78d738e780
	static float GetPI();// 0xc8c9bf4 0x78d738e860
	static int GetMonth(DateTime A);// 0xc8ae268 0x78d738e940
	static int GetMinutes(Timespan A);// 0xc8ac180 0x78d738ea20
	static int GetMinute(DateTime A);// 0xc8ae314 0x78d738eb00
	static float GetMinElement(Vector A);// 0xc8c1054 0x78d738ebe0
	static float GetMin2D(Vector2D A);// 0xc8c4afc 0x78d738ecc0
	static int GetMilliseconds(Timespan A);// 0xc8ac260 0x78d738eda0
	static int GetMillisecond(DateTime A);// 0xc8ae3f4 0x78d738ee80
	static float GetMaxElement(Vector A);// 0xc8c0fa0 0x78d738ef60
	static float GetMax2D(Vector2D A);// 0xc8c4ba4 0x78d738f040
	static int GetHours(Timespan A);// 0xc8ac34c 0x78d738f120
	static int GetHour12(DateTime A);// 0xc8ae4d8 0x78d738f200
	static int GetHour(DateTime A);// 0xc8ae584 0x78d738f2e0
	static Vector GetForwardVector(Rotator InRot);// 0xc8b8a20 0x78d738f3c0
	static Timespan GetDuration(Timespan A);// 0xc8ac42c 0x78d738f4a0
	static Vector GetDirectionUnitVector(Vector From, Vector To);// 0xc8c0390 0x78d738f580
	static int GetDays(Timespan A);// 0xc8ac4d4 0x78d738f660
	static int GetDayOfYear(DateTime A);// 0xc8ae664 0x78d738f740
	static int GetDay(DateTime A);// 0xc8ae710 0x78d738f820
	static DateTime GetDate(DateTime A);// 0xc8ae7bc 0x78d738f900
	static void GetAzimuthAndElevation(Vector InDirection, out const Transform ReferenceFrame, out float Azimuth, out float Elevation);// 0xc8c0094 0x78d738f9e0
	static void GetAxes(Rotator A, out Vector X, out Vector Y, out Vector Z);// 0xc8b8584 0x78d738fac0
	static float GetAbsMax2D(Vector2D A);// 0xc8c4c4c 0x78d738fba0
	static Vector2D GetAbs2D(Vector2D A);// 0xc8c4cfc 0x78d738fc80
	static float FWrap(float Value, float Min, float Max);// 0xc8c8f28 0x78d738fd60
	static IntVector FTruncVector(out const Vector InVector);// 0xc8bfee0 0x78d738fe40
	static int64 FTrunc64(float A);// 0xc8c7c98 0x78d738ff20
	static int FTrunc(float A);// 0xc8c7f44 0x78d738caa0
	static Timespan FromSeconds(float Seconds);// 0xc8ab9c4 0x78d738cb80
	static Timespan FromMinutes(float Minutes);// 0xc8aba6c 0x78d738cc60
	static Timespan FromMilliseconds(float Milliseconds);// 0xc8abb14 0x78d738cd40
	static Timespan FromHours(float Hours);// 0xc8abbbc 0x78d738ce20
	static Timespan FromDays(float Days);// 0xc8abc64 0x78d738cf00
	static float Fraction(float A);// 0xc8cb37c 0x78d738cfe0
	static int FMod(float Dividend, float Divisor, out float Remainder);// 0xc8c7aa8 0x78d738d0c0
	static float FMin(float A, float B);// 0xc8c92c4 0x78d738d1a0
	static float FMax(float A, float B);// 0xc8c91d0 0x78d738d280
	static float FloatSpringInterp(float Current, float Target, out FloatSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0xc8a63d8 0x78d738d360
	static float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);// 0xc8c7060 0x78d738d440
	static float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);// 0xc8a6980 0x78d738d520
	static float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);// 0xc8a6b04 0x78d738d600
	static float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);// 0xc8c72d8 0x78d738d6e0
	static void FindNearestPointsOnLineSegments(Vector Segment1Start, Vector Segment1End, Vector Segment2Start, Vector Segment2End, out Vector Segment1Point, out Vector Segment2Point);// 0xc8bd3c0 0x78d738d7c0
	static Rotator FindLookAtRotation(out const Vector Start, out const Vector Target);// 0xc8b9600 0x78d738d8a0
	static Vector FindClosestPointOnSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0xc8bd260 0x78d738d980
	static Vector FindClosestPointOnLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0xc8bd11c 0x78d738da60
	static int64 FFloor64(float A);// 0xc8c7d40 0x78d738db40
	static int FFloor(float A);// 0xc8c7fec 0x78d738dc20
	static float FClamp(float Value, float Min, float Max);// 0xc8c9088 0x78d738dd00
	static int64 FCeil64(float A);// 0xc8c7bf0 0x78d738dde0
	static int FCeil(float A);// 0xc8c7e9c 0x78d738dec0
	static float Exp(float A);// 0xc8ca070 0x78d738dfa0
	static bool EqualExactly_VectorVector(Vector A, Vector B);// 0xc8c20ac 0x78d738e080
	static bool EqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xc8bbcc0 0x78d738e160
	static bool EqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0xc8c5850 0x78d738e240
	static bool EqualEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0xc8c1f44 0x78d738e320
	static bool EqualEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0xc8bbb14 0x78d738e400
	static bool EqualEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0xc8c56fc 0x78d738e4e0
	static bool EqualEqual_TransformTransform(out const Transform A, out const Transform B);// 0xc8a8bd8 0x78d738e5c0
	static bool EqualEqual_TimespanTimespan(Timespan A, Timespan B);// 0xc8aca20 0x78d738e6a0
	static bool EqualEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0xc8b90a4 0x78d738adc0
	static bool EqualEqual_QuatQuat(out const Quat A, out const Quat B, float Tolerance);// 0xc8b4484 0x78d738aea0
	static bool EqualEqual_ObjectObject(Object* A, Object* B);// 0xc8a9634 0x78d738af80
	static bool EqualEqual_NameName(FName A, FName B);// 0xc8a9170 0x78d738b060
	static bool EqualEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0xc8b7750 0x78d738b140
	static bool EqualEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xc8afd68 0x78d738b220
	static bool EqualEqual_IntInt(int A, int B);// 0xc8cdb34 0x78d738b300
	static bool EqualEqual_Int64Int64(int64 A, int64 B);// 0xc8cc3f0 0x78d738b3e0
	static bool EqualEqual_FloatFloat(float A, float B);// 0xc8cacd8 0x78d738b4c0
	static bool EqualEqual_DateTimeDateTime(DateTime A, DateTime B);// 0xc8aed14 0x78d738b5a0
	static bool EqualEqual_ClassClass(class Object A, class Object B);// 0xc8a944c 0x78d738b680
	static bool EqualEqual_ByteByte(byte A, byte B);// 0xc8ce5cc 0x78d738b760
	static bool EqualEqual_BoolBool(bool A, bool B);// 0xc8cf73c 0x78d738b840
	static bool Equal_IntPointIntPoint(IntPoint A, IntPoint B);// 0xc8c6624 0x78d738b920
	static float Ease(float A, float B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0xc8c8144 0x78d738ba00
	static Vector DynamicWeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0xc8a3e2c 0x78d738bae0
	static Rotator DynamicWeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0xc8a3c54 0x78d738bbc0
	static float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0xc8a4004 0x78d738bca0
	static float DotProduct2D(Vector2D A, Vector2D B);// 0xc8c4da0 0x78d738bd80
	static float Dot_VectorVector(Vector A, Vector B);// 0xc8c1bcc 0x78d738be60
	static Vector Divide_VectorVector(Vector A, Vector B);// 0xc8c24b4 0x78d738bf40
	static Vector Divide_VectorInt(Vector A, int B);// 0xc8c226c 0x78d738c020
	static Vector Divide_VectorFloat(Vector A, float B);// 0xc8c2390 0x78d738c100
	static Vector4 Divide_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xc8bbe14 0x78d738c1e0
	static Vector2D Divide_Vector2DVector2D(Vector2D A, Vector2D B);// 0xc8c5a5c 0x78d738c2c0
	static Vector2D Divide_Vector2DFloat(Vector2D A, float B);// 0xc8c5948 0x78d738c3a0
	static Timespan Divide_TimespanFloat(Timespan A, float Scalar);// 0xc8acb08 0x78d738c480
	static LinearColor Divide_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xc8af7c8 0x78d738c560
	static IntPoint Divide_IntPointIntPoint(IntPoint A, IntPoint B);// 0xc8c6834 0x78d738c640
	static IntPoint Divide_IntPointInt(IntPoint A, int B);// 0xc8c671c 0x78d738c720
	static int Divide_IntInt(int A, int B);// 0xc8ce2e0 0x78d738c800
	static int64 Divide_Int64Int64(int64 A, int64 B);// 0xc8cca94 0x78d738c8e0
	static float Divide_FloatFloat(float A, float B);// 0xc8cfc5c 0x78d738c9c0
	static byte Divide_ByteByte(byte A, byte B);// 0xc8cef84 0x78d73890e0
	static float DistanceSquared2D(Vector2D v1, Vector2D v2);// 0xc8c4e90 0x78d73891c0
	static float Distance2D(Vector2D v1, Vector2D v2);// 0xc8c4f88 0x78d73892a0
	static float DegTan(float A);// 0xc8c96ac 0x78d7389380
	static float DegSin(float A);// 0xc8c99b4 0x78d7389460
	static float DegreesToRadians(float A);// 0xc8c9b20 0x78d7389540
	static float DegCos(float A);// 0xc8c9830 0x78d7389620
	static float DegAtan2(float Y, float X);// 0xc8c94f4 0x78d7389700
	static float DegAtan(float A);// 0xc8c95f4 0x78d73897e0
	static float DegAsin(float A);// 0xc8c98e8 0x78d73898c0
	static float DegAcos(float A);// 0xc8c9764 0x78d73899a0
	static int DaysInYear(int Year);// 0xc8adc84 0x78d7389a80
	static int DaysInMonth(int Year, int Month);// 0xc8add2c 0x78d7389b60
	static DateTime DateTimeMinValue();// 0xc8adb98 0x78d7389c40
	static DateTime DateTimeMaxValue();// 0xc8adbb0 0x78d7389d20
	static bool DateTimeFromString(FString DateTimeString, out DateTime Result);// 0xc8ad730 0x78d7389e00
	static bool DateTimeFromIsoString(FString IsoString, out DateTime Result);// 0xc8ad8f0 0x78d7389ee0
	static float CrossProduct2D(Vector2D A, Vector2D B);// 0xc8c5084 0x78d7389fc0
	static Vector Cross_VectorVector(Vector A, Vector B);// 0xc8c1ab8 0x78d738a0a0
	static Vector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);// 0xc8c3780 0x78d738a180
	static float Cos(float A);// 0xc8ca414 0x78d738a260
	static Transform ConvertTransformToRelative(out const Transform Transform, out const Transform ParentTransform);// 0xc8a7690 0x78d738a340
	static Vector2D Conv_VectorToVector2D(Vector InVector);// 0xc8c3134 0x78d738a420
	static Transform Conv_VectorToTransform(Vector InLocation);// 0xc8c31d4 0x78d738a500
	static Rotator Conv_VectorToRotator(Vector InVec);// 0xc8c307c 0x78d738a5e0
	static Quat Conv_VectorToQuaternion(Vector InVec);// 0xc8c2ecc 0x78d738a6c0
	static LinearColor Conv_VectorToLinearColor(Vector InVec);// 0xc8c32b0 0x78d738a7a0
	static Vector Conv_Vector4ToVector(out const Vector4 InVector4);// 0xc8bc3f4 0x78d738a880
	static Rotator Conv_Vector4ToRotator(out const Vector4 InVec);// 0xc8bc334 0x78d738a960
	static Quat Conv_Vector4ToQuaternion(out const Vector4 InVec);// 0xc8bc274 0x78d738aa40
	static Vector Conv_Vector2DToVector(Vector2D InVector2D, float Z);// 0xc8c61a0 0x78d738ab20
	static IntPoint Conv_Vector2DToIntPoint(Vector2D InVector2D);// 0xc8c60f0 0x78d738ac00
	static Matrix Conv_TransformToMatrix(out const Transform Transform);// 0xc8a6c88 0x78d738ace0
	static Vector Conv_RotatorToVector(Rotator InRot);// 0xc8b8810 0x78d7387400
	static Transform Conv_RotatorToTransform(out const Rotator InRotator);// 0xc8b870c 0x78d73874e0
	static Transform Conv_MatrixToTransform(out const Matrix InMatrix);// 0xc8b7dcc 0x78d73875c0
	static Rotator Conv_MatrixToRotator(out const Matrix InMatrix);// 0xc8b7d18 0x78d73876a0
	static Vector Conv_LinearColorToVector(LinearColor InLinearColor);// 0xc8b0c68 0x78d7387780
	static Color Conv_LinearColorToColor(LinearColor InLinearColor, bool InUseSRGB);// 0xc8b0abc 0x78d7387860
	static Vector Conv_IntVectorToVector(out const IntVector InIntVector);// 0xc8aa870 0x78d7387940
	static IntVector Conv_IntToIntVector(int inInt);// 0xc8aad44 0x78d7387a20
	static int64 Conv_IntToInt64(int inInt);// 0xc8aafd8 0x78d7387b00
	static float Conv_IntToFloat(int inInt);// 0xc8ab07c 0x78d7387be0
	static byte Conv_IntToByte(int inInt);// 0xc8aaf34 0x78d7387cc0
	static bool Conv_IntToBool(int inInt);// 0xc8aac98 0x78d7387da0
	static Vector2D Conv_IntPointToVector2D(IntPoint InIntPoint);// 0xc8c6efc 0x78d7387e80
	static int Conv_Int64ToInt(int64 inInt);// 0xc8aae90 0x78d7387f60
	static byte Conv_Int64ToByte(int64 inInt);// 0xc8aadec 0x78d7388040
	static Vector Conv_FloatToVector(float InFloat);// 0xc8aa7c8 0x78d7388120
	static LinearColor Conv_FloatToLinearColor(float InFloat);// 0xc8b13f4 0x78d7388200
	static LinearColor Conv_ColorToLinearColor(Color InColor);// 0xc8aa934 0x78d73882e0
	static int Conv_ByteToInt(byte InByte);// 0xc8aa9e8 0x78d73883c0
	static float Conv_ByteToFloat(byte InByte);// 0xc8ab124 0x78d73884a0
	static int Conv_BoolToInt(bool InBool);// 0xc8aabec 0x78d7388580
	static float Conv_BoolToFloat(bool InBool);// 0xc8aab38 0x78d7388660
	static byte Conv_BoolToByte(bool InBool);// 0xc8aaa8c 0x78d7388740
	static Transform ComposeTransforms(out const Transform A, out const Transform B);// 0xc8a8284 0x78d7388820
	static Rotator ComposeRotators(Rotator A, Rotator B);// 0xc8b8b84 0x78d7388900
	static bool ClassIsChildOf(class Object TestClass, class Object ParentClass);// 0xc8a9264 0x78d73889e0
	static Vector ClampVectorSize(Vector A, float Min, float Max);// 0xc8c1524 0x78d7388ac0
	static int64 ClampInt64(int64 Value, int64 Min, int64 Max);// 0xc8cb7a8 0x78d7388ba0
	static float ClampAxis(float Angle);// 0xc8b7f34 0x78d7388c80
	static Vector2D ClampAxes2D(Vector2D A, float MinAxisVal, float MaxAxisVal);// 0xc8c5174 0x78d7388d60
	static float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);// 0xc8c93b8 0x78d7388e40
	static int Clamp(int Value, int Min, int Max);// 0xc8ccef4 0x78d7388f20
	static LinearColor CInterpTo(LinearColor Current, LinearColor Target, float DeltaTime, float InterpSpeed);// 0xc8b027c 0x78d7389000
	static void BreakVector4(out const Vector4 InVec, out float X, out float Y, out float Z, out float W);// 0xc8bc4b8 0x78d7385720
	static void BreakVector2D(Vector2D InVec, out float X, out float Y);// 0xc8c6290 0x78d7385800
	static void BreakVector(Vector InVec, out float X, out float Y, out float Z);// 0xc8c336c 0x78d73858e0
	static void BreakTransform(out const Transform InTransform, out Vector Location, out Rotator Rotation, out Vector Scale);// 0xc8a8d3c 0x78d73859c0
	static void BreakTimespan2(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int FractionNano);// 0xc8acec8 0x78d7385aa0
	static void BreakTimespan(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int Milliseconds);// 0xc8ad104 0x78d7385b80
	static void BreakRotIntoAxes(out const Rotator InRot, out Vector X, out Vector Y, out Vector Z);// 0xc8b92d4 0x78d7385c60
	static void BreakRotator(Rotator InRot, out float Roll, out float Pitch, out float Yaw);// 0xc8b9468 0x78d7385d40
	static void BreakRandomStream(out const RandomStream InRandomStream, out int InitialSeed);// 0xc8aa43c 0x78d7385e20
	static void BreakQualifiedFrameTime(out const QualifiedFrameTime InFrameTime, out FrameNumber Frame, out FrameRate FrameRate, out float SubFrame);// 0xc8ab410 0x78d7385f00
	static void BreakFrameRate(out const FrameRate InFrameRate, out int Numerator, out int Denominator);// 0xc8ab1cc 0x78d7385fe0
	static void BreakDateTime(DateTime InDateTime, out int Year, out int Month, out int Day, out int Hour, out int Minute, out int Second, out int Millisecond);// 0xc8af18c 0x78d73860c0
	static void BreakColor(LinearColor InColor, out float R, out float G, out float B, out float A);// 0xc8b1cb4 0x78d73861a0
	static bool BooleanXOR(bool A, bool B);// 0xc8cf26c 0x78d7386280
	static bool BooleanOR(bool A, bool B);// 0xc8cf364 0x78d7386360
	static bool BooleanNOR(bool A, bool B);// 0xc8cf17c 0x78d7386440
	static bool BooleanNAND(bool A, bool B);// 0xc8cf454 0x78d7386520
	static bool BooleanAND(bool A, bool B);// 0xc8cf54c 0x78d7386600
	static byte BMin(byte A, byte B);// 0xc8ceb9c 0x78d73866e0
	static byte BMax(byte A, byte B);// 0xc8ceaa4 0x78d73867c0
	static float Atan2(float Y, float X);// 0xc8ca118 0x78d73868a0
	static float Atan(float A);// 0xc8ca208 0x78d7386980
	static float Asin(float A);// 0xc8ca4bc 0x78d7386a60
	static int And_IntInt(int A, int B);// 0xc8cd774 0x78d7386b40
	static int64 And_Int64Int64(int64 A, int64 B);// 0xc8cc030 0x78d7386c20
	static Vector Add_VectorVector(Vector A, Vector B);// 0xc8c2dd4 0x78d7386d00
	static Vector Add_VectorInt(Vector A, int B);// 0xc8c2bd0 0x78d7386de0
	static Vector Add_VectorFloat(Vector A, float B);// 0xc8c2cd4 0x78d7386ec0
	static Vector4 Add_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xc8bc15c 0x78d7386fa0
	static Vector2D Add_Vector2DVector2D(Vector2D A, Vector2D B);// 0xc8c600c 0x78d7387080
	static Vector2D Add_Vector2DFloat(Vector2D A, float B);// 0xc8c5f18 0x78d7387160
	static Timespan Add_TimespanTimespan(Timespan A, Timespan B);// 0xc8acde4 0x78d7387240
	static Quat Add_QuatQuat(out const Quat A, out const Quat B);// 0xc8b4190 0x78d7387320
	static Matrix Add_MatrixMatrix(out const Matrix A, out const Matrix B);// 0xc8b79a4 0x78d7383a40
	static LinearColor Add_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xc8afb64 0x78d7383b20
	static IntPoint Add_IntPointIntPoint(IntPoint A, IntPoint B);// 0xc8c6e0c 0x78d7383c00
	static IntPoint Add_IntPointInt(IntPoint A, int B);// 0xc8c6d18 0x78d7383ce0
	static int Add_IntInt(int A, int B);// 0xc8ce0e8 0x78d7383dc0
	static int64 Add_Int64Int64(int64 A, int64 B);// 0xc8cc9a4 0x78d7383ea0
	static float Add_FloatFloat(float A, float B);// 0xc8cb28c 0x78d7383f80
	static DateTime Add_DateTimeTimespan(DateTime A, Timespan B);// 0xc8af0a8 0x78d7384060
	static DateTime Add_DateTimeDateTime(DateTime A, DateTime B);// 0xc8aeee0 0x78d7384140
	static byte Add_ByteByte(byte A, byte B);// 0xc8ced88 0x78d7384220
	static float Acos(float A);// 0xc8ca358 0x78d7384300
	static int64 Abs_Int64(int64 A);// 0xc8cb6fc 0x78d73843e0
	static int Abs_Int(int A);// 0xc8ccc88 0x78d73844c0
	static float Abs(float A);// 0xc8ca620 0x78d73845a0

--------------------------------
Class: VectorSpringState

--------------------------------
Class: Timespan

--------------------------------
Class: FloatSpringState

--------------------------------
Class: KismetNodeHelperLibrary.BlueprintFunctionLibrary.Object
	static void MarkBit(out int Data, int Index);// 0xc8de3a8 0x78d73e9b60
	static bool HasUnmarkedBit(int Data, int NumBits);// 0xc8de120 0x78d73e9c40
	static bool HasMarkedBit(int Data, int NumBits);// 0xc8de02c 0x78d73e9d20
	static byte GetValidValue(const Enum* Enum, byte EnumeratorValue);// 0xc8dd8dc 0x78d73e9e00
	static int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);// 0xc8ddea0 0x78d73e9ee0
	static int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);// 0xc8ddd64 0x78d73e9fc0
	static int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);// 0xc8ddc28 0x78d73ea0a0
	static byte GetEnumeratorValueFromIndex(const Enum* Enum, byte EnumeratorIndex);// 0xc8dd7e8 0x78d73ea180
	static FString GetEnumeratorUserFriendlyName(const Enum* Enum, byte EnumeratorValue);// 0xc8dd9d0 0x78d73ea260
	static FName GetEnumeratorName(const Enum* Enum, byte EnumeratorValue);// 0xc8ddb34 0x78d73ea340
	static void ClearBit(out int Data, int Index);// 0xc8de2b8 0x78d73ea420
	static void ClearAllBits(out int Data);// 0xc8de214 0x78d73ea500
	static bool BitIsMarked(int Data, int Index);// 0xc8de498 0x78d73ea5e0

--------------------------------
Class: KismetRenderingLibrary.BlueprintFunctionLibrary.Object
	static void SetCastInsetShadowForAllAttachments(PrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);// 0xc8dec44 0x78d73ec2c0
	static Texture2D* RenderTargetCreateStaticTexture2DEditorOnly(TextureRenderTarget2D* RenderTarget, FString Name, byte CompressionSettings, byte MipSettings);// 0xc8e0398 0x78d73ec3a0
	static void ReleaseRenderTarget2D(TextureRenderTarget2D* TextureRenderTarget);// 0xc8e0708 0x78d73ec480
	static Color ReadRenderTargetUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0xc8dfda0 0x78d73ec560
	static LinearColor ReadRenderTargetRawUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0xc8dfa90 0x78d73ec640
	static LinearColor ReadRenderTargetRawPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0xc8dfc18 0x78d73ec720
	static Color ReadRenderTargetPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0xc8dff24 0x78d73ec800
	static SkelMeshSkinWeightInfo MakeSkinWeightInfo(int Bone0, byte Weight0, int Bone1, byte Weight1, int Bone2, byte Weight2, int Bone3, byte Weight3);// 0xc8df0e0 0x78d73ec8e0
	static Texture2D* ImportFileAsTexture2D(Object* WorldContextObject, FString Filename);// 0xc8df7b4 0x78d73ec9c0
	static Texture2D* ImportBufferAsTexture2D(Object* WorldContextObject, out const byte[] Buffer);// 0xc8df684 0x78d73e90e0
	static void ExportTexture2D(Object* WorldContextObject, Texture2D* Texture, FString FilePath, FString Filename);// 0xc8df8cc 0x78d73e91c0
	static void ExportRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename);// 0xc8e00a8 0x78d73e92a0
	static void EndDrawCanvasToRenderTarget(Object* WorldContextObject, out const DrawToRenderTargetContext Context);// 0xc8df3b8 0x78d73e9380
	static void DrawMaterialToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, MaterialInterface* Material);// 0xc8e05dc 0x78d73e9460
	static TextureRenderTargetVolume* CreateRenderTargetVolume(Object* WorldContextObject, int Width, int Height, int Depth, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0xc8e07a0 0x78d73e9540
	static TextureRenderTarget2DArray* CreateRenderTarget2DArray(Object* WorldContextObject, int Width, int Height, int Slices, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0xc8e0a10 0x78d73e9620
	static TextureRenderTarget2D* CreateRenderTarget2D(Object* WorldContextObject, int Width, int Height, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0xc8e0c80 0x78d73e9700
	static void ConvertRenderTargetToTexture2DEditorOnly(Object* WorldContextObject, TextureRenderTarget2D* RenderTarget, Texture2D* Texture);// 0xc8e026c 0x78d73e97e0
	static void ClearRenderTarget2D(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, LinearColor ClearColor);// 0xc8e0ea4 0x78d73e98c0
	static void BreakSkinWeightInfo(SkelMeshSkinWeightInfo InWeight, out int Bone0, out byte Weight0, out int Bone1, out byte Weight1, out int Bone2, out byte Weight2, out int Bone3, out byte Weight3);// 0xc8ded80 0x78d73e99a0
	static void BeginDrawCanvasToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out Canvas* Canvas, out Vector2D Size, out DrawToRenderTargetContext Context);// 0xc8df4a8 0x78d73e9a80

--------------------------------
Class: DrawToRenderTargetContext
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x0, Size: 0x8] 0x78dbf17800

--------------------------------
Class: TextureRenderTargetVolume.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe0, Size: 0x4] 0x78d7472c80
	int SizeY;//[Offset: 0xe4, Size: 0x4] 0x78d7472d00
	int SizeZ;//[Offset: 0xe8, Size: 0x4] 0x78d7472d80
	LinearColor ClearColor;//[Offset: 0xec, Size: 0x10] 0x78d7472e00
	byte OverrideFormat;//[Offset: 0xfc, Size: 0x1] 0x78d7472e80
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfd, Size: 0x1] 0x78d7472f00
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfd, Size: 0x1] 0x78d7472f80

--------------------------------
Class: TextureRenderTarget2DArray.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe0, Size: 0x4] 0x78d7471180
	int SizeY;//[Offset: 0xe4, Size: 0x4] 0x78d7471200
	int Slices;//[Offset: 0xe8, Size: 0x4] 0x78d7471280
	LinearColor ClearColor;//[Offset: 0xec, Size: 0x10] 0x78d7471300
	byte OverrideFormat;//[Offset: 0xfc, Size: 0x1] 0x78d7471380
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfd, Size: 0x1] 0x78d7471400
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfd, Size: 0x1] 0x78d7471480

--------------------------------
Class: KismetStringLibrary.BlueprintFunctionLibrary.Object
	static FString TrimTrailing(FString SourceString);// 0xc8e2b30 0x78d73ef820
	static FString Trim(FString SourceString);// 0xc8e2c68 0x78d73ef900
	static FString ToUpper(FString SourceString);// 0xc8e377c 0x78d73ef9e0
	static FString ToLower(FString SourceString);// 0xc8e3644 0x78d73efac0
	static FString TimeSecondsToString(float InSeconds);// 0xc8e1818 0x78d73efba0
	static bool StartsWith(FString SourceString, FString InPrefix, byte SearchCase);// 0xc8e30d0 0x78d73efc80
	static bool Split(FString SourceString, FString InStr, out FString LeftS, out FString RightS, byte SearchCase, byte SearchDir);// 0xc8e20f0 0x78d73efd60
	static FString RightPad(FString SourceString, int ChCount);// 0xc8e3344 0x78d73efe40
	static FString RightChop(FString SourceString, int Count);// 0xc8e1af0 0x78d73eff20
	static FString Right(FString SourceString, int Count);// 0xc8e1c70 0x78d73ecaa0
	static FString Reverse(FString SourceString);// 0xc8e2844 0x78d73ecb80
	static int ReplaceInline(out FString SourceString, FString SearchText, FString ReplacementText, byte SearchCase);// 0xc8e23e0 0x78d73ecc60
	static FString Replace(FString SourceString, FString From, FString To, byte SearchCase);// 0xc8e25f4 0x78d73ecd40
	static FString[] ParseIntoArray(FString SourceString, FString Delimiter, const bool CullEmptyStrings);// 0xc8e3cb4 0x78d73ece20
	static bool NotEqual_StrStr(FString A, FString B);// 0xc8e496c 0x78d73ecf00
	static bool NotEqual_StriStri(FString A, FString B);// 0xc8e4820 0x78d73ecfe0
	static FString Mid(FString SourceString, int Start, int Count);// 0xc8e1930 0x78d73ed0c0
	static bool MatchesWildcard(FString SourceString, FString Wildcard, byte SearchCase);// 0xc8e2da0 0x78d73ed1a0
	static int Len(FString S);// 0xc8e4748 0x78d73ed280
	static FString LeftPad(FString SourceString, int ChCount);// 0xc8e34c4 0x78d73ed360
	static FString LeftChop(FString SourceString, int Count);// 0xc8e1df0 0x78d73ed440
	static FString Left(FString SourceString, int Count);// 0xc8e1f70 0x78d73ed520
	static FString JoinStringArray(out const FString[] SourceArray, FString Separator);// 0xc8e3a8c 0x78d73ed600
	static bool IsNumeric(FString SourceString);// 0xc8e3268 0x78d73ed6e0
	static bool IsEmpty(FString inString);// 0xc8e466c 0x78d73ed7c0
	static FString GetSubstring(FString SourceString, int StartIndex, int Length);// 0xc8e44ac 0x78d73ed8a0
	static int GetCharacterAsNumber(FString SourceString, int Index);// 0xc8e3f44 0x78d73ed980
	static FString[] GetCharacterArrayFromString(FString SourceString);// 0xc8e38b4 0x78d73eda60
	static int FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);// 0xc8e4260 0x78d73edb40
	static bool EqualEqual_StrStr(FString A, FString B);// 0xc8e4c04 0x78d73edc20
	static bool EqualEqual_StriStri(FString A, FString B);// 0xc8e4ab8 0x78d73edd00
	static bool EndsWith(FString SourceString, FString InSuffix, byte SearchCase);// 0xc8e2f38 0x78d73edde0
	static int CullArray(FString SourceString, out FString[] inArray);// 0xc8e297c 0x78d73edec0
	static FString Conv_VectorToString(Vector InVec);// 0xc8e7914 0x78d73edfa0
	static FString Conv_Vector2dToString(Vector2D InVec);// 0xc8e75d4 0x78d73ee080
	static FString Conv_TransformToString(out const Transform InTrans);// 0xc8e7370 0x78d73ee160
	static void Conv_StringToVector2D(FString inString, out Vector2D OutConvertedVector2D, out bool OutIsValid);// 0xc8e696c 0x78d73ee240
	static void Conv_StringToVector(FString inString, out Vector OutConvertedVector, out bool OutIsValid);// 0xc8e6af0 0x78d73ee320
	static void Conv_StringToRotator(FString inString, out Rotator OutConvertedRotator, out bool OutIsValid);// 0xc8e67e8 0x78d73ee400
	static FName Conv_StringToName(FString inString);// 0xc8e6e24 0x78d73ee4e0
	static int Conv_StringToInt(FString inString);// 0xc8e6d4c 0x78d73ee5c0
	static float Conv_StringToFloat(FString inString);// 0xc8e6c74 0x78d73ee6a0
	static void Conv_StringToColor(FString inString, out LinearColor OutConvertedColor, out bool OutIsValid);// 0xc8e6664 0x78d73eadc0
	static FString Conv_RotatorToString(Rotator InRot);// 0xc8e74bc 0x78d73eaea0
	static FString Conv_ObjectToString(Object* InObj);// 0xc8e7258 0x78d73eaf80
	static FString Conv_NameToString(FName InName);// 0xc8e7028 0x78d73eb060
	static FString Conv_MatrixToString(out const Matrix InMatrix);// 0xc8e6f08 0x78d73eb140
	static FString Conv_IntVectorToString(IntVector InIntVec);// 0xc8e77fc 0x78d73eb220
	static FString Conv_IntToString(int inInt);// 0xc8e7c64 0x78d73eb300
	static FString Conv_IntPointToString(IntPoint InIntPoint);// 0xc8e76e8 0x78d73eb3e0
	static FString Conv_FloatToString(float InFloat);// 0xc8e7d7c 0x78d73eb4c0
	static FString Conv_ColorToString(LinearColor InColor);// 0xc8e7140 0x78d73eb5a0
	static FString Conv_ByteToString(byte InByte);// 0xc8e7b4c 0x78d73eb680
	static FString Conv_BoolToString(bool InBool);// 0xc8e7a2c 0x78d73eb760
	static bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd);// 0xc8e4068 0x78d73eb840
	static FString Concat_StrStr(FString A, FString B);// 0xc8e4d50 0x78d73eb920
	static FString BuildString_Vector2d(FString AppendTo, FString Prefix, Vector2D InVector2D, FString suffix);// 0xc8e5850 0x78d73eba00
	static FString BuildString_Vector(FString AppendTo, FString Prefix, Vector InVector, FString suffix);// 0xc8e5cfc 0x78d73ebae0
	static FString BuildString_Rotator(FString AppendTo, FString Prefix, Rotator InRot, FString suffix);// 0xc8e55f8 0x78d73ebbc0
	static FString BuildString_Object(FString AppendTo, FString Prefix, Object* InObj, FString suffix);// 0xc8e53a0 0x78d73ebca0
	static FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString suffix);// 0xc8e4ef0 0x78d73ebd80
	static FString BuildString_IntVector(FString AppendTo, FString Prefix, IntVector InIntVector, FString suffix);// 0xc8e5aa4 0x78d73ebe60
	static FString BuildString_Int(FString AppendTo, FString Prefix, int inInt, FString suffix);// 0xc8e61b4 0x78d73ebf40
	static FString BuildString_Float(FString AppendTo, FString Prefix, float InFloat, FString suffix);// 0xc8e640c 0x78d73ec020
	static FString BuildString_Color(FString AppendTo, FString Prefix, LinearColor InColor, FString suffix);// 0xc8e5148 0x78d73ec100
	static FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString suffix);// 0xc8e5f54 0x78d73ec1e0

--------------------------------
Class: KismetStringTableLibrary.BlueprintFunctionLibrary.Object
	static bool IsRegisteredTableId(const FName TableId);// 0xc8ea6e4 0x78d73ef120
	static bool IsRegisteredTableEntry(const FName TableId, FString Key);// 0xc8ea5c8 0x78d73ef200
	static FString GetTableNamespace(const FName TableId);// 0xc8ea4b0 0x78d73ef2e0
	static FString GetTableEntrySourceString(const FName TableId, FString Key);// 0xc8ea338 0x78d73ef3c0
	static FString GetTableEntryMetaData(const FName TableId, FString Key, const FName MetaDataId);// 0xc8ea178 0x78d73ef4a0
	static FName[] GetRegisteredStringTables();// 0xc8ea0a4 0x78d73ef580
	static FName[] GetMetaDataIdsFromStringTableEntry(const FName TableId, FString Key);// 0xc8e9d74 0x78d73ef660
	static FString[] GetKeysFromStringTable(const FName TableId);// 0xc8e9eec 0x78d73ef740

--------------------------------
Class: KismetSystemLibrary.BlueprintFunctionLibrary.Object
	static void UnregisterForRemoteNotifications();// 0xc8ed2f8 0x78d3d26a60
	static void UnloadPrimaryAssetList(out const PrimaryAssetId[] PrimaryAssetIdList);// 0xc8eb398 0x78d3d26b40
	static void UnloadPrimaryAsset(PrimaryAssetId PrimaryAssetId);// 0xc8eb46c 0x78d3d26c20
	static void TransactObject(Object* Object);// 0xc8ec644 0x78d3d26d00
	static void StackTrace();// 0xc903c48 0x78d3d26de0
	static bool SphereTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f5b58 0x78d3d26ec0
	static bool SphereTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f3214 0x78d3d26fa0
	static bool SphereTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f8418 0x78d3d27080
	static bool SphereTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f5628 0x78d3d27160
	static bool SphereTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f2d28 0x78d3d27240
	static bool SphereTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f7f2c 0x78d3d27320
	static bool SphereOverlapComponents(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xc8fa4f8 0x78d3d23a40
	static bool SphereOverlapActors(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xc8fa810 0x78d3d23b20
	static void SnapshotObject(Object* Object);// 0xc8ec5ac 0x78d3d23c00
	static void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);// 0xc8edff8 0x78d3d23ce0
	static void ShowPlatformSpecificAchievementsScreen(const PlayerController* SpecificPlayer);// 0xc8edf60 0x78d3d23dc0
	static void ShowInterstitialAd();// 0xc8ee0c0 0x78d3d23ea0
	static void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);// 0xc8ee238 0x78d3d23f80
	static void SetWindowTitle(out const FText Title);// 0xc8fef34 0x78d3d24060
	static void SetVolumeButtonsHandledBySystem(bool bEnabled);// 0xc8edd3c 0x78d3d24140
	static void SetVectorPropertyByName(Object* Object, FName PropertyName, out const Vector Value);// 0xc8fb180 0x78d3d24220
	static void SetUserActivity(out const UserActivity UserActivity);// 0xc8ed220 0x78d3d24300
	static void SetTransformPropertyByName(Object* Object, FName PropertyName, out const Transform Value);// 0xc8fac9c 0x78d3d243e0
	static void SetTextPropertyByName(Object* Object, FName PropertyName, out const FText Value);// 0xc8fb2b0 0x78d3d244c0
	static void SetSuppressViewportTransitionMessage(const Object* WorldContextObject, bool bState);// 0xc8ed7e4 0x78d3d245a0
	static void SetStructurePropertyByName(Object* Object, FName PropertyName, out const GenericStruct Value);// 0xc903b24 0x78d3d24680
	static void SetStringPropertyByName(Object* Object, FName PropertyName, FString Value);// 0xc8fb4a4 0x78d3d24760
	static void SetSoftObjectPropertyByName(Object* Object, FName PropertyName, out const Object* Value);// 0xc8fb764 0x78d3d24840
	static void SetSoftClassPropertyByName(Object* Object, FName PropertyName, out const class Object Value);// 0xc8fb5f4 0x78d3d24920
	static void SetRotatorPropertyByName(Object* Object, FName PropertyName, out const Rotator Value);// 0xc8fb050 0x78d3d24a00
	static void SetObjectPropertyByName(Object* Object, FName PropertyName, Object* Value);// 0xc8fbc70 0x78d3d24ae0
	static void SetNamePropertyByName(Object* Object, FName PropertyName, out const FName Value);// 0xc8fb8d4 0x78d3d24bc0
	static void SetLinearColorPropertyByName(Object* Object, FName PropertyName, out const LinearColor Value);// 0xc8faf20 0x78d3d24ca0
	static void SetIntPropertyByName(Object* Object, FName PropertyName, int Value);// 0xc8fc254 0x78d3d24d80
	static void SetInterfacePropertyByName(Object* Object, FName PropertyName, out const interface classNone Value);// 0xc8fba0c 0x78d3d24e60
	static void SetInt64PropertyByName(Object* Object, FName PropertyName, int64 Value);// 0xc8fc128 0x78d3d24f40
	static void SetGamepadsBlockDeviceFeedback(bool bBlock);// 0xc8edc64 0x78d3d25020
	static void SetFloatPropertyByName(Object* Object, FName PropertyName, float Value);// 0xc8fbed0 0x78d3d25100
	static void SetFieldPathPropertyByName(Object* Object, FName PropertyName, out const Value(FieldPathProperty) Value);// 0xc8fab28 0x78d3d251e0
	static void SetColorPropertyByName(Object* Object, FName PropertyName, out const Color Value);// 0xc8fadf0 0x78d3d252c0
	static void SetCollisionProfileNameProperty(Object* Object, FName PropertyName, out const CollisionProfileName Value);// 0xc903a00 0x78d3d253a0
	static void SetClassPropertyByName(Object* Object, FName PropertyName, class Object Value);// 0xc8fbb44 0x78d3d25480
	static void SetBytePropertyByName(Object* Object, FName PropertyName, byte Value);// 0xc8fbffc 0x78d3d25560
	static void SetBoolPropertyByName(Object* Object, FName PropertyName, bool Value);// 0xc8fbd9c 0x78d3d25640
	static void RetriggerableDelay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0xc8fe75c 0x78d3d21d60
	static void ResetGamepadAssignmentToController(int ControllerId);// 0xc8edbb8 0x78d3d21e40
	static void ResetGamepadAssignments();// 0xc8edc50 0x78d3d21f20
	static void RegisterForRemoteNotifications();// 0xc8ed30c 0x78d3d22000
	static void QuitGame(const Object* WorldContextObject, PlayerController* SpecificPlayer, byte QuitPreference, bool bIgnorePlatformRestrictions);// 0xc8fe9d4 0x78d3d220e0
	static void PrintWarning(FString inString);// 0xc8ff0a0 0x78d3d221c0
	static void PrintText(const Object* WorldContextObject, const FText InText, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0xc8ff168 0x78d3d222a0
	static void PrintString(const Object* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0xc8ff520 0x78d3d22380
	static bool ParseParamValue(FString inString, FString InParam, out FString OutValue);// 0xc8ecaf8 0x78d3d22460
	static bool ParseParam(FString inString, FString InParam);// 0xc8eccb0 0x78d3d22540
	static void ParseCommandLine(FString InCmdLine, out FString[] OutTokens, out FString[] OutSwitches, out <FString,FString> OutParams);// 0xc8ecdfc 0x78d3d22620
	void OnAssetLoaded__DelegateSignature(Object* Loaded);// 0xaa7cd18 0x78d3d23880
	void OnAssetClassLoaded__DelegateSignature(class Object Loaded);// 0xaa7cd18 0x78d3d235e0
	static bool NotEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0xc901090 0x78d3d22700
	static bool NotEqual_SoftClassReference(out const class Object A, out const class Object B);// 0xc9009b0 0x78d3d227e0
	static bool NotEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0xc8eb504 0x78d3d228c0
	static bool NotEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0xc8eb8b0 0x78d3d229a0
	static FString NormalizeFilename(FString InFilename);// 0xc9028c8 0x78d3d22a80
	static void MoveComponentTo(SceneComponent* Component, Vector TargetRelativeLocation, Rotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, byte MoveAction, LatentActionInfo LatentInfo);// 0xc8fe45c 0x78d3d22b60
	static SoftObjectPath MakeSoftObjectPath(FString PathString);// 0xc901df8 0x78d3d22c40
	static SoftClassPath MakeSoftClassPath(FString PathString);// 0xc901940 0x78d3d22d20
	static FText MakeLiteralText(FText Value);// 0xc8ff77c 0x78d3d22e00
	static FString MakeLiteralString(FString Value);// 0xc8ff9e4 0x78d3d22ee0
	static FName MakeLiteralName(FName Value);// 0xc8ffc08 0x78d3d22fc0
	static int MakeLiteralInt(int Value);// 0xc8ffdfc 0x78d3d230a0
	static float MakeLiteralFloat(float Value);// 0xc8ffd58 0x78d3d23180
	static byte MakeLiteralByte(byte Value);// 0xc8ffb64 0x78d3d23260
	static bool MakeLiteralBool(bool Value);// 0xc8ffcac 0x78d3d23340
	static void LoadInterstitialAd(int AdIdIndex);// 0xc8ee144 0x78d3d23420
	static class Object LoadClassAsset_Blocking(class Object AssetClass);// 0xc900830 0x78d3d23500
	static void LoadAssetClass(const Object* WorldContextObject, class Object AssetClass, delegate OnLoaded, LatentActionInfo LatentInfo);// 0xc8ffea0 0x78d3d236c0
	static Object* LoadAsset_Blocking(Object* Asset);// 0xc900f10 0x78d3d237a0
	static void LoadAsset(const Object* WorldContextObject, Object* Asset, delegate OnLoaded, LatentActionInfo LatentInfo);// 0xc900124 0x78d3d23960
	static bool LineTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f6568 0x78d3d20080
	static bool LineTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f3b9c 0x78d3d20160
	static bool LineTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f8d94 0x78d3d20240
	static bool LineTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f6084 0x78d3d20320
	static bool LineTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f36fc 0x78d3d20400
	static bool LineTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f8900 0x78d3d204e0
	static void LaunchURL(FString URL);// 0xc8ee410 0x78d3d205c0
	static void K2_UnPauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc8fd7f0 0x78d3d206a0
	static void K2_UnPauseTimerDelegate(delegate Delegate);// 0xc8fe084 0x78d3d20780
	static void K2_UnPauseTimer(Object* Object, FString FunctionName);// 0xc8fcbc0 0x78d3d20860
	static bool K2_TimerExistsHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc8fd514 0x78d3d20940
	static bool K2_TimerExistsDelegate(delegate Delegate);// 0xc8fde50 0x78d3d20a20
	static bool K2_TimerExists(Object* Object, FString FunctionName);// 0xc8fc6c8 0x78d3d20b00
	static TimerHandle K2_SetTimerDelegate(delegate Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0xc8fe27c 0x78d3d20be0
	static TimerHandle K2_SetTimer(Object* Object, FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0xc8fd07c 0x78d3d20cc0
	static void K2_PauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc8fd8d0 0x78d3d20da0
	static void K2_PauseTimerDelegate(delegate Delegate);// 0xc8fe12c 0x78d3d20e80
	static void K2_PauseTimer(Object* Object, FString FunctionName);// 0xc8fcd54 0x78d3d20f60
	static bool K2_IsValidTimerHandle(TimerHandle Handle);// 0xc8fdc34 0x78d3d21040
	static bool K2_IsTimerPausedHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc8fd608 0x78d3d21120
	static bool K2_IsTimerPausedDelegate(delegate Delegate);// 0xc8fdf0c 0x78d3d21200
	static bool K2_IsTimerPaused(Object* Object, FString FunctionName);// 0xc8fc870 0x78d3d212e0
	static bool K2_IsTimerActiveHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc8fd6fc 0x78d3d213c0
	static bool K2_IsTimerActiveDelegate(delegate Delegate);// 0xc8fdfc8 0x78d3d214a0
	static bool K2_IsTimerActive(Object* Object, FString FunctionName);// 0xc8fca18 0x78d3d21580
	static TimerHandle K2_InvalidateTimerHandle(out TimerHandle Handle);// 0xc8fdb80 0x78d3d21660
	static float K2_GetTimerRemainingTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc8fd334 0x78d3d21740
	static float K2_GetTimerRemainingTimeDelegate(delegate Delegate);// 0xc8fdce0 0x78d3d21820
	static float K2_GetTimerRemainingTime(Object* Object, FString FunctionName);// 0xc8fc380 0x78d3d21900
	static float K2_GetTimerElapsedTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc8fd424 0x78d3d219e0
	static float K2_GetTimerElapsedTimeDelegate(delegate Delegate);// 0xc8fdd98 0x78d3d21ac0
	static float K2_GetTimerElapsedTime(Object* Object, FString FunctionName);// 0xc8fc524 0x78d3d21ba0
	static void K2_ClearTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc8fdaa0 0x78d3d21c80
	static void K2_ClearTimerDelegate(delegate Delegate);// 0xc8fe1d4 0x78cd8ee780
	static void K2_ClearTimer(Object* Object, FString FunctionName);// 0xc8fcee8 0x78cd8ee860
	static void K2_ClearAndInvalidateTimerHandle(const Object* WorldContextObject, out TimerHandle Handle);// 0xc8fd9b0 0x78cd8ee940
	static bool IsValidSoftObjectReference(out const Object* SoftObjectReference);// 0xc9014f8 0x78cd8eea20
	static bool IsValidSoftClassReference(out const class Object SoftClassReference);// 0xc900e18 0x78cd8eeb00
	static bool IsValidPrimaryAssetType(PrimaryAssetType PrimaryAssetType);// 0xc8eb804 0x78cd8eebe0
	static bool IsValidPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xc8ebbb8 0x78cd8eecc0
	static bool IsValidClass(class Object Class);// 0xc9036b4 0x78cd8eeda0
	static bool IsValid(const Object* Object);// 0xc9037a0 0x78cd8eee80
	static bool IsUnattended();// 0xc8ecac0 0x78cd8eef60
	static bool IsStandalone(const Object* WorldContextObject);// 0xc902278 0x78cd8ef040
	static bool IsSplitScreen(const Object* WorldContextObject);// 0xc9021cc 0x78cd8ef120
	static bool IsServer(const Object* WorldContextObject);// 0xc9023d0 0x78cd8ef200
	static bool IsScreensaverEnabled();// 0xc8ede7c 0x78cd8ef2e0
	static bool IsPackagedForDistribution();// 0xc902194 0x78cd8ef3c0
	static bool IsLoggedIn(const PlayerController* SpecificPlayer);// 0xc8edeb4 0x78cd8ef4a0
	static bool IsInterstitialAdRequested();// 0xc8ee0d4 0x78cd8ef580
	static bool IsInterstitialAdAvailable();// 0xc8ee10c 0x78cd8ef660
	static bool IsDedicatedServer(const Object* WorldContextObject);// 0xc902324 0x78cd8ef740
	static bool IsControllerAssignedToGamepad(int ControllerId);// 0xc8edb0c 0x78cd8ef820
	static void HideAdBanner();// 0xc8ee1f0 0x78cd8ef900
	static bool GetVolumeButtonsHandledBySystem();// 0xc8edd04 0x78cd8ef9e0
	static FString GetUniqueDeviceId();// 0xc9020c0 0x78cd8efac0
	static FString GetSystemPath(const Object* Object);// 0xc90336c 0x78cd8efba0
	static bool GetSupportedFullscreenResolutions(out IntPoint[] Resolutions);// 0xc8ee628 0x78cd8efc80
	static Object* GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xc8ec318 0x78cd8efd60
	static class Object GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xc8ec1d4 0x78cd8efe40
	static int GetRenderingMaterialQualityLevel();// 0xc8ee710 0x78cd8eff20
	static int GetRenderingDetailMode();// 0xc8ee744 0x78cd8ecaa0
	static FString GetProjectSavedDirectory();// 0xc902c70 0x78cd8ecb80
	static FString GetProjectDirectory();// 0xc902e18 0x78cd8ecc60
	static FString GetProjectContentDirectory();// 0xc902d44 0x78cd8ecd40
	static void GetPrimaryAssetsWithBundleState(out const FName[] RequiredBundles, out const FName[] ExcludedBundles, out const PrimaryAssetType[] ValidTypes, bool bForceCurrentState, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0xc8eaf68 0x78cd8ece20
	static void GetPrimaryAssetIdList(PrimaryAssetType PrimaryAssetType, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0xc8ebc64 0x78cd8ecf00
	static PrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(Object* SoftObjectReference);// 0xc8ebf04 0x78cd8ecfe0
	static PrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(class Object SoftClassReference);// 0xc8ebd84 0x78cd8ed0c0
	static PrimaryAssetId GetPrimaryAssetIdFromObject(Object* Object);// 0xc8ec12c 0x78cd8ed1a0
	static PrimaryAssetId GetPrimaryAssetIdFromClass(class Object Class);// 0xc8ec084 0x78cd8ed280
	static FString[] GetPreferredLanguages();// 0xc8ed670 0x78cd8ed360
	static FString GetPlatformUserName();// 0xc902720 0x78cd8ed440
	static FString GetPlatformUserDir();// 0xc90264c 0x78cd8ed520
	static FString GetPathName(const Object* Object);// 0xc903484 0x78cd8ed600
	static Object* GetOuterObject(const Object* Object);// 0xc903094 0x78cd8ed6e0
	static FString GetObjectName(const Object* Object);// 0xc90359c 0x78cd8ed7c0
	static Object* GetObjectFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xc8ec504 0x78cd8ed8a0
	static int GetMinYResolutionForUI();// 0xc8ee50c 0x78cd8ed980
	static int GetMinYResolutionFor3DView();// 0xc8ee4d8 0x78cd8eda60
	static FString GetLocalCurrencySymbol();// 0xc8ed320 0x78cd8edb40
	static FString GetLocalCurrencyCode();// 0xc8ed3f4 0x78cd8edc20
	static float GetGameTimeInSeconds(const Object* WorldContextObject);// 0xc9024b0 0x78cd8edd00
	static FString GetGamepadControllerName(int ControllerId);// 0xc8ed9f4 0x78cd8edde0
	static Texture2D* GetGamepadButtonGlyph(FString ButtonKey, int ControllerIndex);// 0xc8ed8d0 0x78cd8edec0
	static FString GetGameName();// 0xc902eec 0x78cd8edfa0
	static FString GetGameBundleId();// 0xc9027f4 0x78cd8ee080
	static int64 GetFrameCount();// 0xc90247c 0x78cd8ee160
	static FString GetEngineVersion();// 0xc902fc0 0x78cd8ee240
	static FString GetDisplayName(const Object* Object);// 0xc903254 0x78cd8ee320
	static FString GetDeviceId();// 0xc901fec 0x78cd8ee400
	static FString GetDefaultLocale();// 0xc8ed4c8 0x78cd8ee4e0
	static FString GetDefaultLanguage();// 0xc8ed59c 0x78cd8ee5c0
	static bool GetCurrentBundleState(PrimaryAssetId PrimaryAssetId, bool bForceCurrentState, out FName[] OutBundles);// 0xc8eb21c 0x78cd8ee6a0
	static bool GetConvenientWindowedResolutions(out IntPoint[] Resolutions);// 0xc8ee540 0x78cd8eadc0
	static int GetConsoleVariableIntValue(FString VariableName);// 0xc8fec30 0x78cd8eaea0
	static float GetConsoleVariableFloatValue(FString VariableName);// 0xc8fed08 0x78cd8eaf80
	static bool GetConsoleVariableBoolValue(FString VariableName);// 0xc8feb54 0x78cd8eb060
	static void GetComponentBounds(const SceneComponent* Component, out Vector Origin, out Vector BoxExtent, out float SphereRadius);// 0xc8ee8b4 0x78cd8eb140
	static FString GetCommandLine();// 0xc8ed14c 0x78cd8eb220
	static class Object GetClassFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xc8ec45c 0x78cd8eb300
	static FString GetClassDisplayName(class Object Class);// 0xc90313c 0x78cd8eb3e0
	static int GetAdIDCount();// 0xc8ee204 0x78cd8eb4c0
	static void GetActorListFromComponentList(out const PrimitiveComponent*[] ComponentList, class Object ActorClassFilter, out Actor*[] OutActorList);// 0xc8f16a8 0x78cd8eb5a0
	static void GetActorBounds(const Actor* Actor, out Vector Origin, out Vector BoxExtent);// 0xc8ee778 0x78cd8eb680
	static void ForceCloseAdBanner();// 0xc8ee1dc 0x78cd8eb760
	static void FlushPersistentDebugLines(const Object* WorldContextObject);// 0xc8ef4d0 0x78cd8eb840
	static void FlushDebugStrings(const Object* WorldContextObject);// 0xc8ef780 0x78cd8eb920
	static void ExecuteConsoleCommand(const Object* WorldContextObject, FString Command, PlayerController* SpecificPlayer);// 0xc8fede0 0x78cd8eba00
	static bool EqualEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0xc901218 0x78cd8ebae0
	static bool EqualEqual_SoftClassReference(out const class Object A, out const class Object B);// 0xc900b38 0x78cd8ebbc0
	static bool EqualEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0xc8eb5f8 0x78cd8ebca0
	static bool EqualEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0xc8eb9a8 0x78cd8ebd80
	static int EndTransaction();// 0xc8ec774 0x78cd8ebe60
	static void DrawDebugString(const Object* WorldContextObject, const Vector TextLocation, FString Text, Actor* TestBaseActor, LinearColor TextColor, float Duration);// 0xc8ef818 0x78cd8ebf40
	static void DrawDebugSphere(const Object* WorldContextObject, const Vector Center, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0xc8f0640 0x78cd8ec020
	static void DrawDebugPoint(const Object* WorldContextObject, const Vector Position, float Size, LinearColor PointColor, float Duration);// 0xc8f0f78 0x78cd8ec100
	static void DrawDebugPlane(const Object* WorldContextObject, out const Plane PlaneCoordinates, const Vector Location, float Size, LinearColor PlaneColor, float Duration);// 0xc8ef568 0x78cd8ec1e0
	static void DrawDebugLine(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, LinearColor LineColor, float Duration, float Thickness);// 0xc8f1490 0x78cd8ec2c0
	static void DrawDebugFrustum(const Object* WorldContextObject, out const Transform FrustumTransform, LinearColor FrustumColor, float Duration, float Thickness);// 0xc8ef2e4 0x78cd8ec3a0
	static void DrawDebugFloatHistoryTransform(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, out const Transform DrawTransform, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0xc8eef10 0x78cd8ec480
	static void DrawDebugFloatHistoryLocation(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, Vector DrawLocation, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0xc8eec94 0x78cd8ec560
	static void DrawDebugCylinder(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0xc8f0390 0x78cd8ec640
	static void DrawDebugCoordinateSystem(const Object* WorldContextObject, const Vector AxisLoc, const Rotator AxisRot, float Scale, float Duration, float Thickness);// 0xc8f089c 0x78cd8ec720
	static void DrawDebugConeInDegrees(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0xc8efd00 0x78cd8ec800
	static void DrawDebugCone(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0xc8f0048 0x78cd8ec8e0
	static void DrawDebugCircle(const Object* WorldContextObject, Vector Center, float Radius, int NumSegments, LinearColor LineColor, float Duration, float Thickness, Vector YAxis, Vector ZAxis, bool bDrawAxis);// 0xc8f113c 0x78cd8ec9c0
	static void DrawDebugCapsule(const Object* WorldContextObject, const Vector Center, float HalfHeight, float Radius, const Rotator Rotation, LinearColor LineColor, float Duration, float Thickness);// 0xc8efa54 0x78cd8e90e0
	static void DrawDebugCamera(const CameraActor* CameraActor, LinearColor CameraColor, float Duration);// 0xc8ef1b8 0x78cd8e91c0
	static void DrawDebugBox(const Object* WorldContextObject, const Vector Center, Vector Extent, LinearColor LineColor, const Rotator Rotation, float Duration, float Thickness);// 0xc8f0aa8 0x78cd8e92a0
	static void DrawDebugArrow(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, float ArrowSize, LinearColor LineColor, float Duration, float Thickness);// 0xc8f0d14 0x78cd8e9380
	static bool DoesImplementInterface(const Object* TestObject, class Interface Interface);// 0xc902558 0x78cd8e9460
	static void Delay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0xc8fe898 0x78cd8e9540
	static void CreateCopyForUndoBuffer(Object* ObjectToModify);// 0xc8eea40 0x78cd8e9620
	static FString ConvertToRelativePath(FString Filename);// 0xc902b38 0x78cd8e9700
	static FString ConvertToAbsolutePath(FString Filename);// 0xc902a00 0x78cd8e97e0
	static Object* Conv_SoftObjPathToSoftObjRef(out const SoftObjectPath SoftObjectPath);// 0xc901aa8 0x78cd8e98c0
	static FString Conv_SoftObjectReferenceToString(out const Object* SoftObjectReference);// 0xc9013a0 0x78cd8e99a0
	static Object* Conv_SoftObjectReferenceToObject(out const Object* SoftObject);// 0xc90073c 0x78cd8e9a80
	static FString Conv_SoftClassReferenceToString(out const class Object SoftClassReference);// 0xc900cc0 0x78cd8e9b60
	static class Object Conv_SoftClassReferenceToClass(out const class Object SoftClass);// 0xc90063c 0x78cd8e9c40
	static class Object Conv_SoftClassPathToSoftClassRef(out const SoftClassPath SoftClassPath);// 0xc9015f0 0x78cd8e9d20
	static FString Conv_PrimaryAssetTypeToString(PrimaryAssetType PrimaryAssetType);// 0xc8eb6ec 0x78cd8e9e00
	static FString Conv_PrimaryAssetIdToString(PrimaryAssetId PrimaryAssetId);// 0xc8ebaa0 0x78cd8e9ee0
	static Object* Conv_ObjectToSoftObjectReference(Object* Object);// 0xc9004f8 0x78cd8e9fc0
	static Object* Conv_InterfaceToObject(out const interface classNone Interface);// 0xc901f38 0x78cd8ea0a0
	static class Object Conv_ClassToSoftClassReference(out const class Object Class);// 0xc9003a8 0x78cd8ea180
	static void ControlScreensaver(bool bAllowScreenSaver);// 0xc8edddc 0x78cd8ea260
	static bool ComponentOverlapComponents(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xc8f9230 0x78cd8ea340
	static bool ComponentOverlapActors(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xc8f9520 0x78cd8ea420
	static void CollectGarbage();// 0xc8ee320 0x78cd8ea500
	static bool CapsuleTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f45b0 0x78cd8ea5e0
	static bool CapsuleTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f1d80 0x78cd8ea6c0
	static bool CapsuleTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f6f80 0x78cd8ea7a0
	static bool CapsuleTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f4038 0x78cd8ea880
	static bool CapsuleTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f184c 0x78cd8ea960
	static bool CapsuleTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f6a48 0x78cd8eaa40
	static bool CapsuleOverlapComponents(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xc8f9810 0x78cd8eab20
	static bool CapsuleOverlapActors(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xc8f9b70 0x78cd8eac00
	static bool CanLaunchURL(FString URL);// 0xc8ee334 0x78cd8eace0
	static void CancelTransaction(const int Index);// 0xc8ec6dc 0x78cd8e7400
	static void BreakSoftObjectPath(SoftObjectPath InSoftObjectPath, out FString PathString);// 0xc901c28 0x78cd8e74e0
	static void BreakSoftClassPath(SoftClassPath InSoftClassPath, out FString PathString);// 0xc901770 0x78cd8e75c0
	static bool BoxTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f50a8 0x78cd8e76a0
	static bool BoxTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f27f0 0x78cd8e7780
	static bool BoxTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f79f0 0x78cd8e7860
	static bool BoxTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f4b24 0x78cd8e7940
	static bool BoxTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f22b0 0x78cd8e7a20
	static bool BoxTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8f74b0 0x78cd8e7b00
	static bool BoxOverlapComponents(const Object* WorldContextObject, const Vector BoxPos, Vector Extent, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xc8f9ed0 0x78cd8e7be0
	static bool BoxOverlapActors(const Object* WorldContextObject, const Vector BoxPos, Vector BoxExtent, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xc8fa1e4 0x78cd8e7cc0
	static int BeginTransaction(FString Context, FText Description, Object* PrimaryObject);// 0xc8ec7a8 0x78cd8e7da0
	static DebugFloatHistory AddFloatHistorySample(float Value, out const DebugFloatHistory FloatHistory);// 0xc8eead8 0x78cd8e7e80

--------------------------------
Class: UserActivity
	FString ActionName;//[Offset: 0x0, Size: 0x10] 0x78cd973d80

--------------------------------
Class: GenericStruct
	int Data;//[Offset: 0x0, Size: 0x4] 0x78cd972280

--------------------------------
Class: CollisionProfileName
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cd971700

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8] 0x78cd949a00

--------------------------------
Class: DebugFloatHistory
	float[] Samples;//[Offset: 0x0, Size: 0x10] 0x78cdd57180
	float MaxSamples;//[Offset: 0x10, Size: 0x4] 0x78d3569a00
	float MinValue;//[Offset: 0x14, Size: 0x4] 0x78d3569a80
	float MaxValue;//[Offset: 0x18, Size: 0x4] 0x78d3569b00
	bool bAutoAdjustMinMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78d3569b80

--------------------------------
Class: KismetTextLibrary.BlueprintFunctionLibrary.Object
	static FText TextTrimTrailing(out const FText InText);// 0xc90d38c 0x78d7413960
	static FText TextTrimPrecedingAndTrailing(out const FText InText);// 0xc90d190 0x78d7410080
	static FText TextTrimPreceding(out const FText InText);// 0xc90d588 0x78d7410160
	static FText TextToUpper(out const FText InText);// 0xc90d784 0x78d7410240
	static FText TextToLower(out const FText InText);// 0xc90d980 0x78d7410320
	static bool TextIsTransient(out const FText InText);// 0xc90dcfc 0x78d7410400
	static bool TextIsFromStringTable(out const FText Text);// 0xc909fa8 0x78d74104e0
	static bool TextIsEmpty(out const FText InText);// 0xc90de7c 0x78d74105c0
	static bool TextIsCultureInvariant(out const FText InText);// 0xc90db7c 0x78d74106a0
	static FText TextFromStringTable(const FName TableId, FString Key);// 0xc909e14 0x78d7410780
	static bool StringTableIdAndKeyFromText(FText Text, out FName OutTableId, out FString OutKey);// 0xc909adc 0x78d7410860
	static FText PolyglotDataToText(out const PolyglotTextData PolyglotData);// 0xc90967c 0x78d7410940
	static bool NotEqual_TextText(out const FText A, out const FText B);// 0xc90c680 0x78d7410a20
	static bool NotEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0xc90c3e0 0x78d7410b00
	static void IsPolyglotDataValid(out const PolyglotTextData PolyglotData, out bool IsValid, out FText ErrorMessage);// 0xc909890 0x78d7410be0
	static FText GetEmptyText();// 0xc90d0bc 0x78d7410cc0
	static FText Format(FText InPattern, FormatArgumentData[] InArgs);// 0xc90a128 0x78d7410da0
	static bool FindTextInLocalizationTable(FString Namespace, FString Key, out FText OutText);// 0xc90ce60 0x78d7410e80
	static bool EqualEqual_TextText(out const FText A, out const FText B);// 0xc90cbc0 0x78d7410f60
	static bool EqualEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0xc90c920 0x78d7411040
	static FText Conv_VectorToText(Vector InVec);// 0xc90e9f4 0x78d7411120
	static FText Conv_Vector2dToText(Vector2D InVec);// 0xc90e8e0 0x78d7411200
	static FText Conv_TransformToText(out const Transform InTrans);// 0xc90e67c 0x78d74112e0
	static FString Conv_TextToString(out const FText InText);// 0xc90e268 0x78d74113c0
	static FText Conv_StringToText(FString inString);// 0xc90e114 0x78d74114a0
	static FText Conv_RotatorToText(Rotator InRot);// 0xc90e7c8 0x78d7411580
	static FText Conv_ObjectToText(Object* InObj);// 0xc90e564 0x78d7411660
	static FText Conv_NameToText(FName InName);// 0xc90dffc 0x78d7411740
	static FText Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0xc90bf64 0x78d7411820
	static FText Conv_Int64ToText(int64 Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0xc90bd20 0x78d7411900
	static FText Conv_FloatToText(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0xc90b9fc 0x78d74119e0
	static FText Conv_ColorToText(LinearColor InColor);// 0xc90e44c 0x78d7411ac0
	static FText Conv_ByteToText(byte Value);// 0xc90c1a8 0x78d7411ba0
	static FText Conv_BoolToText(bool InBool);// 0xc90c2c0 0x78d7411c80
	static FText AsTimeZoneTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0xc90a5c0 0x78d73ee780
	static FText AsTimeZoneDateTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0xc90a880 0x78d73ee860
	static FText AsTimeZoneDate_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0xc90ab40 0x78d73ee940
	static FText AsTimespan_Timespan(out const Timespan InTimespan);// 0xc90a4a0 0x78d73eea20
	static FText AsTime_DateTime(out const DateTime In);// 0xc90a760 0x78d73eeb00
	static FText AsPercent_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0xc90ae00 0x78d73eebe0
	static FText AsDateTime_DateTime(out const DateTime In);// 0xc90aa20 0x78d73eecc0
	static FText AsDate_DateTime(out const DateTime InDateTime);// 0xc90ace0 0x78d73eeda0
	static FText AsCurrencyBase(int BaseValue, FString CurrencyCode);// 0xc90b868 0x78d73eee80
	static FText AsCurrency_Integer(int Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0xc90b4c4 0x78d73eef60
	static FText AsCurrency_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0xc90b124 0x78d73ef040

--------------------------------
Class: PolyglotTextData
	enum Category;//[Offset: 0x0, Size: 0x1] 0x78e6b154c0
	FString NativeCulture;//[Offset: 0x8, Size: 0x10] 0x78e6835b00
	FString Namespace;//[Offset: 0x18, Size: 0x10] 0x78e6835b80
	FString Key;//[Offset: 0x28, Size: 0x10] 0x78e6835c00
	FString NativeString;//[Offset: 0x38, Size: 0x10] 0x78e6835c80
	<FString,FString> LocalizedStrings;//[Offset: 0x48, Size: 0x50] 0x78e6ac73c0
	bool bIsMinimalPatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78e6835e00
	FText CachedText;//[Offset: 0xa0, Size: 0x18] 0x78e6835e80

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10] 0x78ce9bce00
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1] 0x78ce9bce80
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18] 0x78ce9bcf00
	int ArgumentValueInt;//[Offset: 0x30, Size: 0x4] 0x78ce9bcf80
	float ArgumentValueFloat;//[Offset: 0x34, Size: 0x4] 0x78ce9bd000
	enum ArgumentValueGender;//[Offset: 0x38, Size: 0x1] 0x78cdd55880

--------------------------------
Class: Layer.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8] 0x78d7404d00
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78d7404d80
	LayerActorStats[] ActorStats;//[Offset: 0x38, Size: 0x10] 0x78d73354c0

--------------------------------
Class: LayerActorStats
	class Object* Type;//[Offset: 0x0, Size: 0x8] 0x78dbe5e5c0
	int Total;//[Offset: 0x8, Size: 0x4] 0x78dbf17780

--------------------------------
Class: LevelPartitionInterface.Interface.Object

--------------------------------
Class: LevelBounds.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x220, Size: 0x8] 0x78d7406080
	bool bAutoUpdateBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x78d7406100

--------------------------------
Class: LevelScriptBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelStreamingAlwaysLoaded.LevelStreaming.Object

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x78d7408280
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1] 0x78d7408300
	static LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride);// 0xc914010 0x78d74127e0
	static LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride);// 0xc914344 0x78d74128c0

--------------------------------
Class: LevelStreamingPersistent.LevelStreaming.Object

--------------------------------
Class: LightmappedSurfaceCollection.Object
	Model* SourceModel;//[Offset: 0x28, Size: 0x8] 0x78d7407f80
	int[] Surfaces;//[Offset: 0x30, Size: 0x10] 0x78d7337720

--------------------------------
Class: LightMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: LightMapVirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	int8[] TypeToLayer;//[Offset: 0x100, Size: 0x10] 0x78d7337680

--------------------------------
Class: LightmassCharacterIndirectDetailVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassPortal.Actor.Object
	LightmassPortalComponent* PortalComponent;//[Offset: 0x220, Size: 0x8] 0x78d7407e80

--------------------------------
Class: LightmassPortalComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x208, Size: 0x8] 0x78d7407e00

--------------------------------
Class: LightmassPrimitiveSettingsObject.Object
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x28, Size: 0x18] 0x78d7407d80

--------------------------------
Class: LocalPlayerSubsystem.Subsystem.Object

--------------------------------
Class: LODSyncComponent.ActorComponent.Object
	int NumLODs;//[Offset: 0xb8, Size: 0x4] 0x78d7408e00
	int ForcedLOD;//[Offset: 0xbc, Size: 0x4] 0x78d7408e80
	ComponentSync[] ComponentsToSync;//[Offset: 0xc0, Size: 0x10] 0x78d73370e0
	<FName,LODMappingData> CustomLODMapping;//[Offset: 0xd0, Size: 0x50] 0x78d7105140
	int CurrentLOD;//[Offset: 0x120, Size: 0x4] 0x78d7409080
	int CurrentNumLODs;//[Offset: 0x124, Size: 0x4] 0x78d7409100
	PrimitiveComponent*[] DriveComponents;//[Offset: 0x128, Size: 0x10] 0x78d7337180
	PrimitiveComponent*[] SubComponents;//[Offset: 0x138, Size: 0x10] 0x78d7337220
	FString GetLODSyncDebugText();// 0xc91bd20 0x78d7412460

--------------------------------
Class: ComponentSync
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbf1b480
	enum SyncOption;//[Offset: 0x8, Size: 0x1] 0x78dbe5e480

--------------------------------
Class: LODMappingData
	int[] Mapping;//[Offset: 0x0, Size: 0x10] 0x78dbe5e340
	int[] InverseMapping;//[Offset: 0x10, Size: 0x10] 0x78dbe5e3e0

--------------------------------
Class: LODSyncInterface.Interface.Object

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x470, Size: 0x10] 0x78d7336fa0
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0xc9202bc 0x78d74122a0
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0xc9200a4 0x78d7412380

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8] 0x78dbf1af80
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x8, Size: 0x8] 0x78dbf1b000
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78dbf1b080
	float BaseSizeX;//[Offset: 0x14, Size: 0x4] 0x78dbf1b100
	float BaseSizeY;//[Offset: 0x18, Size: 0x4] 0x78dbf1b180
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x20, Size: 0x8] 0x78dbf1b200

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8] 0x78dc093b00
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8] 0x78dc093b80
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78dc093c00

--------------------------------
Class: MaterialExpressionAbs.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d740d080

--------------------------------
Class: MaterialExpressionActorPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAdd.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d740ce80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d740cf00
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78d740cf80
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78d740d000

--------------------------------
Class: MaterialExpressionTextureBase.MaterialExpression.Object
	Texture* Texture;//[Offset: 0x40, Size: 0x8] 0x78dc093a80

--------------------------------
Class: MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x48, Size: 0xc] 0x78dc093a00

--------------------------------
Class: MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x5c, Size: 0x8] 0x78dc093880
	Guid ExpressionGUID;//[Offset: 0x64, Size: 0x10] 0x78dc093900
	FName Group;//[Offset: 0x74, Size: 0x8] 0x78dc093980

--------------------------------
Class: MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAntialiasedTextureMask.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	float Threshold;//[Offset: 0x7c, Size: 0x4] 0x78d740cd80
	byte Channel;//[Offset: 0x80, Size: 0x1] 0x78d740ce00

--------------------------------
Class: MaterialExpressionAppendVector.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d740cc80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d740cd00

--------------------------------
Class: MaterialExpressionArccosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d740cc00

--------------------------------
Class: MaterialExpressionArccosineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d740cb80

--------------------------------
Class: MaterialExpressionArcsine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d740cb00

--------------------------------
Class: MaterialExpressionArcsineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d740ca80

--------------------------------
Class: MaterialExpressionArctangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d740ca00

--------------------------------
Class: MaterialExpressionArctangent2.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0xc] 0x78d740c900
	ExpressionInput X;//[Offset: 0x50, Size: 0xc] 0x78d740c980

--------------------------------
Class: MaterialExpressionArctangent2Fast.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0xc] 0x78d740c800
	ExpressionInput X;//[Offset: 0x50, Size: 0xc] 0x78d740c880

--------------------------------
Class: MaterialExpressionArctangentFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d740c780

--------------------------------
Class: MaterialExpressionAtmosphericFogColor.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0xc] 0x78d740c700

--------------------------------
Class: MaterialExpressionAtmosphericLightColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAtmosphericLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCustomOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionBentNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d740c680

--------------------------------
Class: MaterialExpressionBlackBody.MaterialExpression.Object
	ExpressionInput Temp;//[Offset: 0x3c, Size: 0xc] 0x78d740e700

--------------------------------
Class: MaterialExpressionBlendMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput A;//[Offset: 0x40, Size: 0x18] 0x78d740e480
	MaterialAttributesInput B;//[Offset: 0x60, Size: 0x18] 0x78d740e500
	ExpressionInput Alpha;//[Offset: 0x80, Size: 0xc] 0x78d740e580
	byte PixelAttributeBlendType;//[Offset: 0x94, Size: 0x1] 0x78d740e600
	byte VertexAttributeBlendType;//[Offset: 0x95, Size: 0x1] 0x78d740e680

--------------------------------
Class: MaterialExpressionBreakMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x40, Size: 0x18] 0x78d740e400

--------------------------------
Class: MaterialExpressionBumpOffset.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0xc] 0x78d740e100
	ExpressionInput Height;//[Offset: 0x50, Size: 0xc] 0x78d740e180
	ExpressionInput HeightRatioInput;//[Offset: 0x64, Size: 0xc] 0x78d740e200
	float HeightRatio;//[Offset: 0x78, Size: 0x4] 0x78d740e280
	float ReferencePlane;//[Offset: 0x7c, Size: 0x4] 0x78d740e300
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4] 0x78d740e380

--------------------------------
Class: MaterialExpressionCameraPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCameraVectorWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCeil.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d740e080

--------------------------------
Class: MaterialExpressionParameter.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x78d740df80
	Guid ExpressionGUID;//[Offset: 0x44, Size: 0x10] 0x78d740e000

--------------------------------
Class: MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	LinearColor DefaultValue;//[Offset: 0x54, Size: 0x10] 0x78d740de00
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78d740de80
	byte PrimitiveDataIndex;//[Offset: 0x65, Size: 0x1] 0x78d740df00

--------------------------------
Class: MaterialExpressionChannelMaskParameter.MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	byte MaskChannel;//[Offset: 0x66, Size: 0x1] 0x78d740dd80

--------------------------------
Class: MaterialExpressionClamp.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d740da80
	ExpressionInput Min;//[Offset: 0x50, Size: 0xc] 0x78d740db00
	ExpressionInput Max;//[Offset: 0x64, Size: 0xc] 0x78d740db80
	byte ClampMode;//[Offset: 0x78, Size: 0x1] 0x78d740dc00
	float MinDefault;//[Offset: 0x7c, Size: 0x4] 0x78d740dc80
	float MaxDefault;//[Offset: 0x80, Size: 0x4] 0x78d740dd00

--------------------------------
Class: MaterialExpressionClearCoatNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d740da00

--------------------------------
Class: MaterialExpressionCloudSampleAttribute.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCollectionParameter.MaterialExpression.Object
	MaterialParameterCollection* Collection;//[Offset: 0x40, Size: 0x8] 0x78d740d880
	FName ParameterName;//[Offset: 0x48, Size: 0x8] 0x78d740d900
	Guid ParameterId;//[Offset: 0x50, Size: 0x10] 0x78d740d980

--------------------------------
Class: MaterialExpressionComment.MaterialExpression.Object
	int SizeX;//[Offset: 0x3c, Size: 0x4] 0x78d740f700
	int SizeY;//[Offset: 0x40, Size: 0x4] 0x78d740f780
	FString Text;//[Offset: 0x48, Size: 0x10] 0x78d740d700
	LinearColor CommentColor;//[Offset: 0x58, Size: 0x10] 0x78d740d780
	int FontSize;//[Offset: 0x68, Size: 0x4] 0x78d740d800

--------------------------------
Class: MaterialExpressionComponentMask.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d740f480
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78d740f500
	bool G;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x78d740f580
	bool B;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1] 0x78d740f600
	bool A;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1] 0x78d740f680

--------------------------------
Class: MaterialExpressionConstant.MaterialExpression.Object
	float R;//[Offset: 0x3c, Size: 0x4] 0x78d740f400

--------------------------------
Class: MaterialExpressionConstant2Vector.MaterialExpression.Object
	float R;//[Offset: 0x3c, Size: 0x4] 0x78d740f300
	float G;//[Offset: 0x40, Size: 0x4] 0x78d740f380

--------------------------------
Class: MaterialExpressionConstant3Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10] 0x78d740f280

--------------------------------
Class: MaterialExpressionConstant4Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10] 0x78d740f200

--------------------------------
Class: MaterialExpressionConstantBiasScale.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d740f080
	float Bias;//[Offset: 0x50, Size: 0x4] 0x78d740f100
	float Scale;//[Offset: 0x54, Size: 0x4] 0x78d740f180

--------------------------------
Class: MaterialExpressionCosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d740ef80
	float Period;//[Offset: 0x50, Size: 0x4] 0x78d740f000

--------------------------------
Class: MaterialExpressionCrossProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d740ee80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d740ef00

--------------------------------
Class: MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	float DefaultValue;//[Offset: 0x54, Size: 0x4] 0x78d740ed00
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78d740ed80
	byte PrimitiveDataIndex;//[Offset: 0x59, Size: 0x1] 0x78d740ee00

--------------------------------
Class: MaterialExpressionCurveAtlasRowParameter.MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	CurveLinearColor* Curve;//[Offset: 0x60, Size: 0x8] 0x78d740eb80
	CurveLinearColorAtlas* Atlas;//[Offset: 0x68, Size: 0x8] 0x78d740ec00
	ExpressionInput InputTime;//[Offset: 0x70, Size: 0xc] 0x78d740ec80

--------------------------------
Class: MaterialExpressionCustom.MaterialExpression.Object
	FString code;//[Offset: 0x40, Size: 0x10] 0x78d740e800
	byte OutputType;//[Offset: 0x50, Size: 0x1] 0x78d740e880
	FString Description;//[Offset: 0x58, Size: 0x10] 0x78d740e900
	CustomInput[] Inputs;//[Offset: 0x68, Size: 0x10] 0x78d7336d20
	CustomOutput[] AdditionalOutputs;//[Offset: 0x78, Size: 0x10] 0x78d7336dc0
	CustomDefine[] AdditionalDefines;//[Offset: 0x88, Size: 0x10] 0x78d7336e60
	FString[] IncludeFilePaths;//[Offset: 0x98, Size: 0x10] 0x78d7336f00

--------------------------------
Class: CustomInput
	FName InputName;//[Offset: 0x0, Size: 0x8] 0x78dbf1bb00
	ExpressionInput Input;//[Offset: 0x8, Size: 0xc] 0x78dbf1bb80

--------------------------------
Class: CustomOutput
	FName OutputName;//[Offset: 0x0, Size: 0x8] 0x78dbf1bc00
	byte OutputType;//[Offset: 0x8, Size: 0x1] 0x78dbf1bc80

--------------------------------
Class: CustomDefine
	FString DefineName;//[Offset: 0x0, Size: 0x10] 0x78dbf1bd00
	FString DefineValue;//[Offset: 0x10, Size: 0x10] 0x78dbf1bd80

--------------------------------
Class: CustomUnlitMaterialExpressionBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDynamicLighting.CustomUnlitMaterialExpressionBase.MaterialExpression.Object
	byte LightIndex;//[Offset: 0x39, Size: 0x1] 0x78d740ff80
	byte InfoType;//[Offset: 0x3a, Size: 0x1] 0x78d740e780

--------------------------------
Class: MaterialExpressionDirectionalLightDirection.CustomUnlitMaterialExpressionBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionGetCustomLight.CustomUnlitMaterialExpressionBase.MaterialExpression.Object
	byte ColorType;//[Offset: 0x39, Size: 0x1] 0x78d740ff00

--------------------------------
Class: MaterialExpressionGetBoxCaptureVector.CustomUnlitMaterialExpressionBase.MaterialExpression.Object
	ExpressionInput ReflectionVector;//[Offset: 0x3c, Size: 0xc] 0x78d740fe80

--------------------------------
Class: MaterialExpressionGetImageBasedReflectionLighting.CustomUnlitMaterialExpressionBase.MaterialExpression.Object
	ExpressionInput ReflectionVector;//[Offset: 0x3c, Size: 0xc] 0x78d740fd00
	ExpressionInput Roughness;//[Offset: 0x50, Size: 0xc] 0x78d740fd80
	ExpressionInput IndirectIrradiance;//[Offset: 0x64, Size: 0xc] 0x78d740fe00

--------------------------------
Class: MaterialExpressionGetSkySHDiffuse.CustomUnlitMaterialExpressionBase.MaterialExpression.Object
	ExpressionInput WorldNormal;//[Offset: 0x3c, Size: 0xc] 0x78d740fc80

--------------------------------
Class: MaterialExpressionLightAttenuation.CustomUnlitMaterialExpressionBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLightMap.CustomUnlitMaterialExpressionBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDDX.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x3c, Size: 0xc] 0x78d740fc00

--------------------------------
Class: MaterialExpressionDDY.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x3c, Size: 0xc] 0x78d740fb80

--------------------------------
Class: MaterialExpressionDecalDerivative.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalLifetimeOpacity.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalMipmapLevel.MaterialExpression.Object
	ExpressionInput TextureSize;//[Offset: 0x3c, Size: 0xc] 0x78d740fa00
	float ConstWidth;//[Offset: 0x50, Size: 0x4] 0x78d740fa80
	float ConstHeight;//[Offset: 0x54, Size: 0x4] 0x78d740fb00

--------------------------------
Class: MaterialExpressionDeltaTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDepthFade.MaterialExpression.Object
	ExpressionInput InOpacity;//[Offset: 0x3c, Size: 0xc] 0x78d740f800
	ExpressionInput FadeDistance;//[Offset: 0x50, Size: 0xc] 0x78d740f880
	float OpacityDefault;//[Offset: 0x64, Size: 0x4] 0x78d740f900
	float FadeDistanceDefault;//[Offset: 0x68, Size: 0x4] 0x78d740f980

--------------------------------
Class: MaterialExpressionDepthOfFieldFunction.MaterialExpression.Object
	byte FunctionValue;//[Offset: 0x39, Size: 0x1] 0x78d7421000
	ExpressionInput Depth;//[Offset: 0x3c, Size: 0xc] 0x78d7421080

--------------------------------
Class: MaterialExpressionDeriveNormalZ.MaterialExpression.Object
	ExpressionInput InXY;//[Offset: 0x3c, Size: 0xc] 0x78d7420f80

--------------------------------
Class: MaterialExpressionDesaturation.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7420e00
	ExpressionInput Fraction;//[Offset: 0x50, Size: 0xc] 0x78d7420e80
	LinearColor LuminanceFactors;//[Offset: 0x64, Size: 0x10] 0x78d7420f00

--------------------------------
Class: MaterialExpressionDistance.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d7420d00
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d7420d80

--------------------------------
Class: MaterialExpressionDistanceCullFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDistanceFieldGradient.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x78d7420c80

--------------------------------
Class: MaterialExpressionDistanceToNearestSurface.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x78d7420c00

--------------------------------
Class: MaterialExpressionDivide.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d7420a00
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d7420a80
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78d7420b00
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78d7420b80

--------------------------------
Class: MaterialExpressionDotProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d7420900
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d7420980

--------------------------------
Class: MaterialExpressionDynamicParameter.MaterialExpression.Object
	FString[] ParamNames;//[Offset: 0x40, Size: 0x10] 0x78d7336c80
	LinearColor DefaultValue;//[Offset: 0x50, Size: 0x10] 0x78d7420800
	uint32 ParameterIndex;//[Offset: 0x60, Size: 0x4] 0x78d7420880

--------------------------------
Class: MaterialExpressionEyeAdaptation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionFeatureLevelSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x78d7420700

--------------------------------
Class: MaterialExpressionFloor.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7420680

--------------------------------
Class: MaterialExpressionFmod.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d7420580
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d7420600

--------------------------------
Class: MaterialExpressionFontSample.MaterialExpression.Object
	Font* Font;//[Offset: 0x40, Size: 0x8] 0x78d7420480
	int FontTexturePage;//[Offset: 0x48, Size: 0x4] 0x78d7420500

--------------------------------
Class: MaterialExpressionFontSampleParameter.MaterialExpressionFontSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x4c, Size: 0x8] 0x78d7420300
	Guid ExpressionGUID;//[Offset: 0x54, Size: 0x10] 0x78d7420380
	FName Group;//[Offset: 0x64, Size: 0x8] 0x78d7420400

--------------------------------
Class: MaterialExpressionFrac.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7420280

--------------------------------
Class: MaterialExpressionFresnel.MaterialExpression.Object
	ExpressionInput ExponentIn;//[Offset: 0x3c, Size: 0xc] 0x78d7422100
	float Exponent;//[Offset: 0x50, Size: 0x4] 0x78d7420080
	ExpressionInput BaseReflectFractionIn;//[Offset: 0x54, Size: 0xc] 0x78d7420100
	float BaseReflectFraction;//[Offset: 0x68, Size: 0x4] 0x78d7420180
	ExpressionInput Normal;//[Offset: 0x6c, Size: 0xc] 0x78d7420200

--------------------------------
Class: MaterialExpressionFunctionInput.MaterialExpression.Object
	ExpressionInput Preview;//[Offset: 0x3c, Size: 0xc] 0x78d7421c80
	FName InputName;//[Offset: 0x50, Size: 0x8] 0x78d7421d00
	FString Description;//[Offset: 0x58, Size: 0x10] 0x78d7421d80
	Guid ID;//[Offset: 0x68, Size: 0x10] 0x78d7421e00
	byte InputType;//[Offset: 0x78, Size: 0x1] 0x78d7421e80
	Vector4 PreviewValue;//[Offset: 0x80, Size: 0x10] 0x78d7421f00
	bool bUsePreviewValueAsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x78d7421f80
	int SortPriority;//[Offset: 0x94, Size: 0x4] 0x78d7422000
	bool bCompilingFunctionPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x78d7422080

--------------------------------
Class: MaterialExpressionFunctionOutput.MaterialExpression.Object
	FName OutputName;//[Offset: 0x3c, Size: 0x8] 0x78d7421980
	FString Description;//[Offset: 0x48, Size: 0x10] 0x78d7421a00
	int SortPriority;//[Offset: 0x58, Size: 0x4] 0x78d7421a80
	ExpressionInput A;//[Offset: 0x5c, Size: 0xc] 0x78d7421b00
	bool bLastPreviewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78d7421b80
	Guid ID;//[Offset: 0x74, Size: 0x10] 0x78d7421c00

--------------------------------
Class: MaterialExpressionGetMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x40, Size: 0x18] 0x78d7421880
	Guid[] AttributeGetTypes;//[Offset: 0x60, Size: 0x10] 0x78d7336be0

--------------------------------
Class: MaterialExpressionGIReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x78d7421700
	ExpressionInput StaticIndirect;//[Offset: 0x50, Size: 0xc] 0x78d7421780
	ExpressionInput DynamicIndirect;//[Offset: 0x64, Size: 0xc] 0x78d7421800

--------------------------------
Class: MaterialExpressionHairAttributes.MaterialExpression.Object
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x78d7421680

--------------------------------
Class: MaterialExpressionHairColor.MaterialExpression.Object
	ExpressionInput Melanin;//[Offset: 0x3c, Size: 0xc] 0x78d7421500
	ExpressionInput Redness;//[Offset: 0x50, Size: 0xc] 0x78d7421580
	ExpressionInput DyeColor;//[Offset: 0x64, Size: 0xc] 0x78d7421600

--------------------------------
Class: MaterialExpressionIf.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d7421100
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d7421180
	ExpressionInput AGreaterThanB;//[Offset: 0x64, Size: 0xc] 0x78d7421200
	ExpressionInput AEqualsB;//[Offset: 0x78, Size: 0xc] 0x78d7421280
	ExpressionInput ALessThanB;//[Offset: 0x8c, Size: 0xc] 0x78d7421300
	float EqualsThreshold;//[Offset: 0xa0, Size: 0x4] 0x78d7421380
	float ConstB;//[Offset: 0xa4, Size: 0x4] 0x78d7421400
	float ConstAEqualsB;//[Offset: 0xa8, Size: 0x4] 0x78d7421480

--------------------------------
Class: MaterialExpressionInverseLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d7422e80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d7422f00
	ExpressionInput Value;//[Offset: 0x64, Size: 0xc] 0x78d7422f80
	float ConstA;//[Offset: 0x78, Size: 0x4] 0x78d7423000
	float ConstB;//[Offset: 0x7c, Size: 0x4] 0x78d7423080
	float ConstValue;//[Offset: 0x80, Size: 0x4] 0x78d7423100
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x78d7423180

--------------------------------
Class: MaterialExpressionLightmapUVs.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLightmassReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0xc] 0x78d7422d80
	ExpressionInput Lightmass;//[Offset: 0x50, Size: 0xc] 0x78d7422e00

--------------------------------
Class: MaterialExpressionLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d7422a80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d7422b00
	ExpressionInput Alpha;//[Offset: 0x64, Size: 0xc] 0x78d7422b80
	float ConstA;//[Offset: 0x78, Size: 0x4] 0x78d7422c00
	float ConstB;//[Offset: 0x7c, Size: 0x4] 0x78d7422c80
	float ConstAlpha;//[Offset: 0x80, Size: 0x4] 0x78d7422d00

--------------------------------
Class: MaterialExpressionLogarithm10.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x3c, Size: 0xc] 0x78d7422a00

--------------------------------
Class: MaterialExpressionLogarithm2.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x3c, Size: 0xc] 0x78d7422980

--------------------------------
Class: MaterialExpressionMakeMaterialAttributes.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0xc] 0x78d7423e80
	ExpressionInput Metallic;//[Offset: 0x50, Size: 0xc] 0x78d7423f00
	ExpressionInput Specular;//[Offset: 0x64, Size: 0xc] 0x78d7423f80
	ExpressionInput Roughness;//[Offset: 0x78, Size: 0xc] 0x78d7424000
	ExpressionInput Anisotropy;//[Offset: 0x8c, Size: 0xc] 0x78d7424080
	ExpressionInput EmissiveColor;//[Offset: 0xa0, Size: 0xc] 0x78d7424100
	ExpressionInput Opacity;//[Offset: 0xb4, Size: 0xc] 0x78d7424180
	ExpressionInput OpacityMask;//[Offset: 0xc8, Size: 0xc] 0x78d7424200
	ExpressionInput Normal;//[Offset: 0xdc, Size: 0xc] 0x78d7422180
	ExpressionInput Tangent;//[Offset: 0xf0, Size: 0xc] 0x78d7422200
	ExpressionInput WorldPositionOffset;//[Offset: 0x104, Size: 0xc] 0x78d7422280
	ExpressionInput WorldDisplacement;//[Offset: 0x118, Size: 0xc] 0x78d7422300
	ExpressionInput TessellationMultiplier;//[Offset: 0x12c, Size: 0xc] 0x78d7422380
	ExpressionInput SubsurfaceColor;//[Offset: 0x140, Size: 0xc] 0x78d7422400
	ExpressionInput ClearCoat;//[Offset: 0x154, Size: 0xc] 0x78d7422480
	ExpressionInput ClearCoatRoughness;//[Offset: 0x168, Size: 0xc] 0x78d7422500
	ExpressionInput AmbientOcclusion;//[Offset: 0x17c, Size: 0xc] 0x78d7422580
	ExpressionInput Refraction;//[Offset: 0x190, Size: 0xc] 0x78d7422600
	ExpressionInput CustomizedUVs;//[Offset: 0x1a4, Size: 0xc] 0x78d7422680
	ExpressionInput PixelDepthOffset;//[Offset: 0x244, Size: 0xc] 0x78d7422700
	ExpressionInput ShadingModel;//[Offset: 0x258, Size: 0xc] 0x78d7422780
	ExpressionInput OutlineWidth;//[Offset: 0x26c, Size: 0xc] 0x78d7422800
	ExpressionInput OutlineColor;//[Offset: 0x280, Size: 0xc] 0x78d7422880
	ExpressionInput FogColor;//[Offset: 0x294, Size: 0xc] 0x78d7422900

--------------------------------
Class: MaterialExpressionMapARPassthroughCameraUV.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0xc] 0x78d7423e00

--------------------------------
Class: MaterialExpressionMaterialAttributeLayers.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x78d7423980
	Guid ExpressionGUID;//[Offset: 0x44, Size: 0x10] 0x78d7423a00
	MaterialAttributesInput Input;//[Offset: 0x58, Size: 0x18] 0x78d7423a80
	MaterialLayersFunctions DefaultLayers;//[Offset: 0x78, Size: 0x40] 0x78d7423b00
	MaterialExpressionMaterialFunctionCall*[] LayerCallers;//[Offset: 0xb8, Size: 0x10] 0x78d7336aa0
	int NumActiveLayerCallers;//[Offset: 0xc8, Size: 0x4] 0x78d7423c00
	MaterialExpressionMaterialFunctionCall*[] BlendCallers;//[Offset: 0xd0, Size: 0x10] 0x78d7336b40
	int NumActiveBlendCallers;//[Offset: 0xe0, Size: 0x4] 0x78d7423d00
	bool bIsLayerGraphBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1] 0x78d7423d80

--------------------------------
Class: MaterialExpressionMaterialFunctionCall.MaterialExpression.Object
	MaterialFunctionInterface* MaterialFunction;//[Offset: 0x40, Size: 0x8] 0x78d7423880
	MaterialParameterInfo FunctionParameterInfo;//[Offset: 0x48, Size: 0x10] 0x78d7423900

--------------------------------
Class: MaterialExpressionMaterialLayerOutput.MaterialExpressionFunctionOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionMaterialProxyReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0xc] 0x78d7423780
	ExpressionInput MaterialProxy;//[Offset: 0x50, Size: 0xc] 0x78d7423800

--------------------------------
Class: MaterialExpressionMax.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d7423580
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d7423600
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78d7423680
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78d7423700

--------------------------------
Class: MaterialExpressionMin.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d7423380
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d7423400
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78d7423480
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78d7423500

--------------------------------
Class: MaterialExpressionMultiply.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d7425280
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d7423200
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78d7423280
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78d7423300

--------------------------------
Class: MaterialExpressionNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x78d7424c80
	ExpressionInput FilterWidth;//[Offset: 0x50, Size: 0xc] 0x78d7424d00
	float Scale;//[Offset: 0x64, Size: 0x4] 0x78d7424d80
	int Quality;//[Offset: 0x68, Size: 0x4] 0x78d7424e00
	byte NoiseFunction;//[Offset: 0x6c, Size: 0x1] 0x78d7424e80
	bool bTurbulence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 0x1] 0x78d7424f00
	int Levels;//[Offset: 0x70, Size: 0x4] 0x78d7424f80
	float OutputMin;//[Offset: 0x74, Size: 0x4] 0x78d7425000
	float OutputMax;//[Offset: 0x78, Size: 0x4] 0x78d7425080
	float LevelScale;//[Offset: 0x7c, Size: 0x4] 0x78d7425100
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78d7425180
	uint32 RepeatSize;//[Offset: 0x84, Size: 0x4] 0x78d7425200

--------------------------------
Class: MaterialExpressionNormalize.MaterialExpression.Object
	ExpressionInput VectorInput;//[Offset: 0x3c, Size: 0xc] 0x78d7424c00

--------------------------------
Class: MaterialExpressionObjectBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectOrientation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionOneMinus.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7424b80

--------------------------------
Class: MaterialExpressionPanner.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0xc] 0x78d7424800
	ExpressionInput Time;//[Offset: 0x50, Size: 0xc] 0x78d7424880
	ExpressionInput Speed;//[Offset: 0x64, Size: 0xc] 0x78d7424900
	float SpeedX;//[Offset: 0x78, Size: 0x4] 0x78d7424980
	float SpeedY;//[Offset: 0x7c, Size: 0x4] 0x78d7424a00
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4] 0x78d7424a80
	bool bFractionalPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x78d7424b00

--------------------------------
Class: MaterialExpressionParticleColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleDirection.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMacroUV.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMotionBlurFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticlePositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRelativeTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSpeed.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSubUV.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1] 0x78d7424780

--------------------------------
Class: MaterialExpressionParticleSubUVProperties.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPerInstanceCustomData.MaterialExpression.Object
	ExpressionInput DefaultValue;//[Offset: 0x3c, Size: 0xc] 0x78d7424600
	float ConstDefaultValue;//[Offset: 0x50, Size: 0x4] 0x78d7424680
	uint32 DataIndex;//[Offset: 0x54, Size: 0x4] 0x78d7424700

--------------------------------
Class: MaterialExpressionPerInstanceFadeAmount.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPerInstanceRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelDepth.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPower.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x3c, Size: 0xc] 0x78d7424480
	ExpressionInput Exponent;//[Offset: 0x50, Size: 0xc] 0x78d7424500
	float ConstExponent;//[Offset: 0x64, Size: 0x4] 0x78d7424580

--------------------------------
Class: MaterialExpressionPrecomputedAOMask.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedLocalBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedNormal.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreviousFrameSwitch.MaterialExpression.Object
	ExpressionInput CurrentFrame;//[Offset: 0x3c, Size: 0xc] 0x78d7424380
	ExpressionInput PreviousFrame;//[Offset: 0x50, Size: 0xc] 0x78d7424400

--------------------------------
Class: MaterialExpressionQualitySwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x78d7424280
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0xc] 0x78d7424300

--------------------------------
Class: MaterialExpressionRayTracingQualitySwitch.MaterialExpression.Object
	ExpressionInput Normal;//[Offset: 0x3c, Size: 0xc] 0x78d7426280
	ExpressionInput RayTraced;//[Offset: 0x50, Size: 0xc] 0x78d7426300

--------------------------------
Class: MaterialExpressionReflectionCapturePassSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x78d7426180
	ExpressionInput Reflection;//[Offset: 0x50, Size: 0xc] 0x78d7426200

--------------------------------
Class: MaterialExpressionReflectionVectorWS.MaterialExpression.Object
	ExpressionInput CustomWorldNormal;//[Offset: 0x3c, Size: 0xc] 0x78d7426080
	bool bNormalizeCustomWorldNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78d7426100

--------------------------------
Class: MaterialExpressionReroute.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7426000

--------------------------------
Class: MaterialExpressionRotateAboutAxis.MaterialExpression.Object
	ExpressionInput NormalizedRotationAxis;//[Offset: 0x3c, Size: 0xc] 0x78d7425d80
	ExpressionInput RotationAngle;//[Offset: 0x50, Size: 0xc] 0x78d7425e00
	ExpressionInput PivotPoint;//[Offset: 0x64, Size: 0xc] 0x78d7425e80
	ExpressionInput Position;//[Offset: 0x78, Size: 0xc] 0x78d7425f00
	float Period;//[Offset: 0x8c, Size: 0x4] 0x78d7425f80

--------------------------------
Class: MaterialExpressionRotator.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0xc] 0x78d7425a80
	ExpressionInput Time;//[Offset: 0x50, Size: 0xc] 0x78d7425b00
	float CenterX;//[Offset: 0x64, Size: 0x4] 0x78d7425b80
	float CenterY;//[Offset: 0x68, Size: 0x4] 0x78d7425c00
	float Speed;//[Offset: 0x6c, Size: 0x4] 0x78d7425c80
	uint32 ConstCoordinate;//[Offset: 0x70, Size: 0x4] 0x78d7425d00

--------------------------------
Class: MaterialExpressionRound.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7425a00

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0xc] 0x78d7425680
	ExpressionInput Specular;//[Offset: 0x50, Size: 0xc] 0x78d7425700
	ExpressionInput Roughness;//[Offset: 0x64, Size: 0xc] 0x78d7425780
	ExpressionInput Normal;//[Offset: 0x78, Size: 0xc] 0x78d7425800
	ExpressionInput WorldHeight;//[Offset: 0x8c, Size: 0xc] 0x78d7425880
	ExpressionInput Opacity;//[Offset: 0xa0, Size: 0xc] 0x78d7425900
	ExpressionInput Mask;//[Offset: 0xb4, Size: 0xc] 0x78d7425980

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x78d7425580
	ExpressionInput VirtualTextureOutput;//[Offset: 0x50, Size: 0xc] 0x78d7425600

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0xc] 0x78d7427200
	ExpressionInput WorldPosition;//[Offset: 0x50, Size: 0xc] 0x78d7427280
	ExpressionInput MipValue;//[Offset: 0x64, Size: 0xc] 0x78d7427300
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x78, Size: 0x8] 0x78d7427380
	enum MaterialType;//[Offset: 0x80, Size: 0x1] 0x78d7336a00
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1] 0x78d7425380
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1] 0x78d7425400
	byte MipValueMode;//[Offset: 0x83, Size: 0x1] 0x78d7425480
	byte TextureAddressMode;//[Offset: 0x84, Size: 0x1] 0x78d7425500

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSampleParameter.MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x88, Size: 0x8] 0x78d7427080
	Guid ExpressionGUID;//[Offset: 0x90, Size: 0x10] 0x78d7427100
	FName Group;//[Offset: 0xa0, Size: 0x8] 0x78d7427180

--------------------------------
Class: MaterialExpressionSaturate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7427000

--------------------------------
Class: MaterialExpressionSceneColor.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x78d7426e00
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7426e80
	ExpressionInput OffsetFraction;//[Offset: 0x50, Size: 0xc] 0x78d7426f00
	Vector2D ConstInput;//[Offset: 0x64, Size: 0x8] 0x78d7426f80

--------------------------------
Class: MaterialExpressionSceneDepth.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x78d7426c00
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7426c80
	ExpressionInput Coordinates;//[Offset: 0x50, Size: 0xc] 0x78d7426d00
	Vector2D ConstInput;//[Offset: 0x64, Size: 0x8] 0x78d7426d80

--------------------------------
Class: MaterialExpressionSceneDepthWithoutWater.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x78d7426a00
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7426a80
	Vector2D ConstInput;//[Offset: 0x50, Size: 0x8] 0x78d7426b00
	float FallbackDepth;//[Offset: 0x58, Size: 0x4] 0x78d7426b80

--------------------------------
Class: MaterialExpressionSceneTexelSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSceneTexture.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0xc] 0x78d7426880
	byte SceneTextureId;//[Offset: 0x50, Size: 0x1] 0x78d7426900
	bool bFiltered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78d7426980

--------------------------------
Class: MaterialExpressionScreenPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSetMaterialAttributes.MaterialExpression.Object
	ExpressionInput[] Inputs;//[Offset: 0x40, Size: 0x10] 0x78d73368c0
	Guid[] AttributeSetTypes;//[Offset: 0x50, Size: 0x10] 0x78d7336960

--------------------------------
Class: MaterialExpressionShaderStageSwitch.MaterialExpression.Object
	ExpressionInput PixelShader;//[Offset: 0x3c, Size: 0xc] 0x78d7426680
	ExpressionInput VertexShader;//[Offset: 0x50, Size: 0xc] 0x78d7426700

--------------------------------
Class: MaterialExpressionShadingModel.MaterialExpression.Object
	byte ShadingModel;//[Offset: 0x39, Size: 0x1] 0x78d7426600

--------------------------------
Class: MaterialExpressionShadingPathSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x78d7426500
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0xc] 0x78d7426580

--------------------------------
Class: MaterialExpressionShadowReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x78d7426400
	ExpressionInput Shadow;//[Offset: 0x50, Size: 0xc] 0x78d7426480

--------------------------------
Class: MaterialExpressionSign.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7426380

--------------------------------
Class: MaterialExpressionSine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7428380
	float Period;//[Offset: 0x50, Size: 0x4] 0x78d7428400

--------------------------------
Class: MaterialExpressionSingleLayerWaterMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput ScatteringCoefficients;//[Offset: 0x3c, Size: 0xc] 0x78d7428180
	ExpressionInput AbsorptionCoefficients;//[Offset: 0x50, Size: 0xc] 0x78d7428200
	ExpressionInput PhaseG;//[Offset: 0x64, Size: 0xc] 0x78d7428280
	ExpressionInput ColorScaleBehindWater;//[Offset: 0x78, Size: 0xc] 0x78d7428300

--------------------------------
Class: MaterialExpressionSkinningVertexOffsets.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDirection.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x78d7428100

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightIlluminance.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x78d7428000
	ExpressionInput WorldPosition;//[Offset: 0x40, Size: 0xc] 0x78d7428080

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDiskLuminance.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x78d7427f80

--------------------------------
Class: MaterialExpressionSkyAtmosphereAerialPerspective.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0xc] 0x78d7427f00

--------------------------------
Class: MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSkyAtmosphereViewLuminance.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSmoothStep.MaterialExpression.Object
	ExpressionInput Min;//[Offset: 0x3c, Size: 0xc] 0x78d7427c00
	ExpressionInput Max;//[Offset: 0x50, Size: 0xc] 0x78d7427c80
	ExpressionInput Value;//[Offset: 0x64, Size: 0xc] 0x78d7427d00
	float ConstMin;//[Offset: 0x78, Size: 0x4] 0x78d7427d80
	float ConstMax;//[Offset: 0x7c, Size: 0x4] 0x78d7427e00
	float ConstValue;//[Offset: 0x80, Size: 0x4] 0x78d7427e80

--------------------------------
Class: MaterialExpressionSobol.MaterialExpression.Object
	ExpressionInput Cell;//[Offset: 0x3c, Size: 0xc] 0x78d7427980
	ExpressionInput Index;//[Offset: 0x50, Size: 0xc] 0x78d7427a00
	ExpressionInput Seed;//[Offset: 0x64, Size: 0xc] 0x78d7427a80
	uint32 ConstIndex;//[Offset: 0x78, Size: 0x4] 0x78d7427b00
	Vector2D ConstSeed;//[Offset: 0x7c, Size: 0x8] 0x78d7427b80

--------------------------------
Class: MaterialExpressionSpeedTree.MaterialExpression.Object
	ExpressionInput GeometryInput;//[Offset: 0x3c, Size: 0xc] 0x78d7427500
	ExpressionInput WindInput;//[Offset: 0x50, Size: 0xc] 0x78d7427580
	ExpressionInput LODInput;//[Offset: 0x64, Size: 0xc] 0x78d7427600
	ExpressionInput ExtraBendWS;//[Offset: 0x78, Size: 0xc] 0x78d7427680
	byte GeometryType;//[Offset: 0x8c, Size: 0x1] 0x78d7427700
	byte WindType;//[Offset: 0x8d, Size: 0x1] 0x78d7427780
	byte LODType;//[Offset: 0x8e, Size: 0x1] 0x78d7427800
	float BillboardThreshold;//[Offset: 0x90, Size: 0x4] 0x78d7427880
	bool bAccurateWindVelocities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1] 0x78d7427900

--------------------------------
Class: MaterialExpressionSphereMask.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d7429300
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d7429380
	ExpressionInput Radius;//[Offset: 0x64, Size: 0xc] 0x78d7429400
	ExpressionInput Hardness;//[Offset: 0x78, Size: 0xc] 0x78d7429480
	float AttenuationRadius;//[Offset: 0x8c, Size: 0x4] 0x78d7427400
	float HardnessPercent;//[Offset: 0x90, Size: 0x4] 0x78d7427480

--------------------------------
Class: MaterialExpressionSphericalParticleOpacity.MaterialExpression.Object
	ExpressionInput Density;//[Offset: 0x3c, Size: 0xc] 0x78d7429200
	float ConstantDensity;//[Offset: 0x50, Size: 0x4] 0x78d7429280

--------------------------------
Class: MaterialExpressionSquareRoot.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7429180

--------------------------------
Class: MaterialExpressionStaticBool.MaterialExpression.Object
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x78d7429100

--------------------------------
Class: MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78d7429080

--------------------------------
Class: MaterialExpressionStaticComponentMaskParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78d7428e80
	bool DefaultG;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x78d7428f00
	bool DefaultB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1] 0x78d7428f80
	bool DefaultA;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1] 0x78d7429000

--------------------------------
Class: MaterialExpressionStaticSwitch.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x78d7428c80
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d7428d00
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d7428d80
	ExpressionInput Value;//[Offset: 0x64, Size: 0xc] 0x78d7428e00

--------------------------------
Class: MaterialExpressionStaticSwitchParameter.MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionStep.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0xc] 0x78d7428a80
	ExpressionInput X;//[Offset: 0x50, Size: 0xc] 0x78d7428b00
	float ConstY;//[Offset: 0x64, Size: 0x4] 0x78d7428b80
	float ConstX;//[Offset: 0x68, Size: 0x4] 0x78d7428c00

--------------------------------
Class: MaterialExpressionSubtract.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78d7428880
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78d7428900
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78d7428980
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78d7428a00

--------------------------------
Class: MaterialExpressionTangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7428780
	float Period;//[Offset: 0x50, Size: 0x4] 0x78d7428800

--------------------------------
Class: MaterialExpressionTangentOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7428700

--------------------------------
Class: MaterialExpressionTemporalSobol.MaterialExpression.Object
	ExpressionInput Index;//[Offset: 0x3c, Size: 0xc] 0x78d7428500
	ExpressionInput Seed;//[Offset: 0x50, Size: 0xc] 0x78d7428580
	uint32 ConstIndex;//[Offset: 0x64, Size: 0x4] 0x78d7428600
	Vector2D ConstSeed;//[Offset: 0x68, Size: 0x8] 0x78d7428680

--------------------------------
Class: MaterialExpressionTextureCoordinate.MaterialExpression.Object
	int CoordinateIndex;//[Offset: 0x3c, Size: 0x4] 0x78d742a380
	float UTiling;//[Offset: 0x40, Size: 0x4] 0x78d742a400
	float VTiling;//[Offset: 0x44, Size: 0x4] 0x78d742a480
	bool UnMirrorU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78d742a500
	bool UnMirrorV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x78d7428480

--------------------------------
Class: MaterialExpressionTextureObject.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureObjectParameter.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureProperty.MaterialExpression.Object
	ExpressionInput TextureObject;//[Offset: 0x3c, Size: 0xc] 0x78d742a280
	byte Property;//[Offset: 0x50, Size: 0x1] 0x78d742a300

--------------------------------
Class: MaterialExpressionTextureSampleParameter2DArray.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterCube.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterSubUV.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1] 0x78d742a200

--------------------------------
Class: MaterialExpressionTextureSampleParameterVolume.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: VolumeTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialExpressionThinTranslucentMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput TransmittanceColor;//[Offset: 0x3c, Size: 0xc] 0x78d742a180

--------------------------------
Class: MaterialExpressionTime.MaterialExpression.Object
	bool bIgnorePause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x78d742a000
	bool bOverride_Period;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1] 0x78d742a080
	float Period;//[Offset: 0x3c, Size: 0x4] 0x78d742a100

--------------------------------
Class: MaterialExpressionTransform.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7429e80
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1] 0x78d7429f00
	byte TransformType;//[Offset: 0x51, Size: 0x1] 0x78d7429f80

--------------------------------
Class: MaterialExpressionTransformPosition.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7429d00
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1] 0x78d7429d80
	byte TransformType;//[Offset: 0x51, Size: 0x1] 0x78d7429e00

--------------------------------
Class: MaterialExpressionTruncate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7429c80

--------------------------------
Class: MaterialExpressionTwoSidedSign.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVectorNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x78d7429a00
	byte NoiseFunction;//[Offset: 0x50, Size: 0x1] 0x78d7429a80
	int Quality;//[Offset: 0x54, Size: 0x4] 0x78d7429b00
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78d7429b80
	uint32 TileSize;//[Offset: 0x5c, Size: 0x4] 0x78d7429c00

--------------------------------
Class: MaterialExpressionVertexColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexInterpolator.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78d7429980

--------------------------------
Class: MaterialExpressionVertexNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexTangentWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionViewProperty.MaterialExpression.Object
	byte Property;//[Offset: 0x39, Size: 0x1] 0x78d7429900

--------------------------------
Class: MaterialExpressionViewSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVirtualTextureFeatureSwitch.MaterialExpression.Object
	ExpressionInput No;//[Offset: 0x3c, Size: 0xc] 0x78d7429800
	ExpressionInput Yes;//[Offset: 0x50, Size: 0xc] 0x78d7429880

--------------------------------
Class: MaterialExpressionVolumetricAdvancedMaterialInput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVolumetricAdvancedMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput PhaseG;//[Offset: 0x3c, Size: 0xc] 0x78d742b000
	ExpressionInput PhaseG2;//[Offset: 0x50, Size: 0xc] 0x78d742b080
	ExpressionInput PhaseBlend;//[Offset: 0x64, Size: 0xc] 0x78d742b100
	ExpressionInput MultiScatteringContribution;//[Offset: 0x78, Size: 0xc] 0x78d742b180
	ExpressionInput MultiScatteringOcclusion;//[Offset: 0x8c, Size: 0xc] 0x78d742b200
	ExpressionInput MultiScatteringEccentricity;//[Offset: 0xa0, Size: 0xc] 0x78d742b280
	ExpressionInput ConservativeDensity;//[Offset: 0xb4, Size: 0xc] 0x78d742b300
	float ConstPhaseG;//[Offset: 0xc8, Size: 0x4] 0x78d742b380
	float ConstPhaseG2;//[Offset: 0xcc, Size: 0x4] 0x78d742b400
	float ConstPhaseBlend;//[Offset: 0xd0, Size: 0x4] 0x78d742b480
	bool PerSamplePhaseEvaluation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1] 0x78d742b500
	uint32 MultiScatteringApproximationOctaveCount;//[Offset: 0xd8, Size: 0x4] 0x78d742b580
	float ConstMultiScatteringContribution;//[Offset: 0xdc, Size: 0x4] 0x78d7429500
	float ConstMultiScatteringOcclusion;//[Offset: 0xe0, Size: 0x4] 0x78d7429580
	float ConstMultiScatteringEccentricity;//[Offset: 0xe4, Size: 0x4] 0x78d7429600
	bool bGroundContribution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78d7429680
	bool bGrayScaleMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1] 0x78d7429700
	bool bRayMarchVolumeShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1] 0x78d7429780

--------------------------------
Class: MaterialExpressionWorldPosition.MaterialExpression.Object
	byte WorldPositionShaderOffset;//[Offset: 0x39, Size: 0x1] 0x78d742af80

--------------------------------
Class: MaterialFunctionInstance.MaterialFunctionInterface.Object
	MaterialFunctionInterface* parent;//[Offset: 0x40, Size: 0x8] 0x78d742a880
	MaterialFunctionInterface* Base;//[Offset: 0x48, Size: 0x8] 0x78d742a900
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x50, Size: 0x10] 0x78d7338d00
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x60, Size: 0x10] 0x78d7338da0
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x70, Size: 0x10] 0x78d7338e40
	FontParameterValue[] FontParameterValues;//[Offset: 0x80, Size: 0x10] 0x78d7338ee0
	StaticSwitchParameter[] StaticSwitchParameterValues;//[Offset: 0x90, Size: 0x10] 0x78d7338f80
	StaticComponentMaskParameter[] StaticComponentMaskParameterValues;//[Offset: 0xa0, Size: 0x10] 0x78d7339020
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0xb0, Size: 0x10] 0x78d7336780

--------------------------------
Class: MaterialFunctionMaterialLayer.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlend.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlendInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialInstanceActor.Actor.Object
	Actor*[] TargetActors;//[Offset: 0x220, Size: 0x10] 0x78d7338c60

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x378, Size: 0x8] 0x78d722c100
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0xc947f48 0x78d72519e0
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0xc947ffc 0x78d7251ac0
	float K2_GetScalarParameterValue(FName ParameterName);// 0xc9480ac 0x78d7251ba0

--------------------------------
Class: MatineeActorCameraAnim.MatineeActor.Actor.Object
	CameraAnim* CameraAnim;//[Offset: 0x2c8, Size: 0x8] 0x78d742e680

--------------------------------
Class: MatineeAnimInterface.Interface.Object

--------------------------------
Class: MatineeInterface.Interface.Object

--------------------------------
Class: MeshMergeCullingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: MeshSimplificationSettings.DeveloperSettings.Object
	FName MeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x78d742e600

--------------------------------
Class: MeshVertexPainterKismetLibrary.BlueprintFunctionLibrary.Object
	static void RemovePaintedVertices(StaticMeshComponent* StaticMeshComponent);// 0xc950354 0x78d74144c0
	static void PaintVerticesSingleColor(StaticMeshComponent* StaticMeshComponent, out const LinearColor FillColor, bool bConvertToSRGB);// 0xc9505c0 0x78d74145a0
	static void PaintVerticesLerpAlongAxis(StaticMeshComponent* StaticMeshComponent, out const LinearColor StartColor, out const LinearColor EndColor, enum Axis, bool bConvertToSRGB);// 0xc9503ec 0x78d7414680

--------------------------------
Class: MicroTransactionBase.PlatformInterfaceBase.Object
	PurchaseInfo[] AvailableProducts;//[Offset: 0x38, Size: 0x10] 0x78d7338800
	FString LastError;//[Offset: 0x48, Size: 0x10] 0x78d742e080
	FString LastErrorSolution;//[Offset: 0x58, Size: 0x10] 0x78d742e100

--------------------------------
Class: PurchaseInfo
	FString Identifier;//[Offset: 0x0, Size: 0x10] 0x78dbf30300
	FString DisplayName;//[Offset: 0x10, Size: 0x10] 0x78dbf30380
	FString DisplayDescription;//[Offset: 0x20, Size: 0x10] 0x78dbf30400
	FString DisplayPrice;//[Offset: 0x30, Size: 0x10] 0x78dbf30480

--------------------------------
Class: NavAgentInterface.Interface.Object

--------------------------------
Class: NavEdgeProviderInterface.Interface.Object

--------------------------------
Class: NavigationDataInterface.Interface.Object

--------------------------------
Class: NullNavSysConfig.NavigationSystemConfig.Object

--------------------------------
Class: NavLinkDefinition.Object
	NavigationLink[] Links;//[Offset: 0x28, Size: 0x10] 0x78d73386c0
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x38, Size: 0x10] 0x78d7338760

--------------------------------
Class: NavigationLink.NavigationLinkBase
	Vector Left;//[Offset: 0x30, Size: 0xc] 0x78dbf33300
	Vector Right;//[Offset: 0x3c, Size: 0xc] 0x78dbf33380

--------------------------------
Class: NavigationLinkBase
	float LeftProjectHeight;//[Offset: 0x0, Size: 0x4] 0x78dbf33600
	float MaxFallDownLength;//[Offset: 0x4, Size: 0x4] 0x78dbf33680
	float SnapRadius;//[Offset: 0xc, Size: 0x4] 0x78dbf33700
	float SnapHeight;//[Offset: 0x10, Size: 0x4] 0x78dbf33780
	NavAgentSelector SupportedAgents;//[Offset: 0x14, Size: 0x4] 0x78dbf33800
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78dbf33880
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x78dbf33900
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x78dbf33980
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x78dbf33a00
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1] 0x78dbf33a80
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1] 0x78dbf33b00
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1] 0x78dbf33b80
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1] 0x78dbf33c00
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1] 0x78dbf33c80
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1] 0x78dbf33d00
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1] 0x78dbf33d80
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1] 0x78dbf33e00
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1] 0x78dbf33e80
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1] 0x78dbf33f00
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1] 0x78dbf33f80
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1] 0x78dbf34000
	byte Direction;//[Offset: 0x1c, Size: 0x1] 0x78dbf34080
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1] 0x78dbf34100
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1] 0x78dbf34180
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1] 0x78dbf34200
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1] 0x78dbf32180
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1] 0x78dbf32200
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1] 0x78dbf32280
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1] 0x78dbf32300
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 0x1] 0x78dbf32380
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 0x1] 0x78dbf32400
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 0x1] 0x78dbf32480
	class NavAreaBase* AreaClass;//[Offset: 0x20, Size: 0x8] 0x78dbf20920

--------------------------------
Class: NavigationSegmentLink.NavigationLinkBase
	Vector LeftStart;//[Offset: 0x30, Size: 0xc] 0x78dbf33400
	Vector LeftEnd;//[Offset: 0x3c, Size: 0xc] 0x78dbf33480
	Vector RightStart;//[Offset: 0x48, Size: 0xc] 0x78dbf33500
	Vector RightEnd;//[Offset: 0x54, Size: 0xc] 0x78dbf33580

--------------------------------
Class: NavPathObserverInterface.Interface.Object

--------------------------------
Class: NavRelevantInterface.Interface.Object

--------------------------------
Class: SimulatedClientNetConnection.NetConnection.Player.Object

--------------------------------
Class: NetPushModelHelpers.BlueprintFunctionLibrary.Object
	static void MarkPropertyDirtyFromRepIndex(Object* Object, int RepIndex, FName PropertyName);// 0xc95b93c 0x78d7414300
	static void MarkPropertyDirty(Object* Object, FName PropertyName);// 0xc95ba6c 0x78d74143e0

--------------------------------
Class: NetworkPredictionInterface.Interface.Object

--------------------------------
Class: NetworkSettings.DeveloperSettings.Object
	bool bVerifyPeer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78d742f500
	bool bEnableMultiplayerWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78d742f580
	int MaxRepArraySize;//[Offset: 0x3c, Size: 0x4] 0x78d742f600
	int MaxRepArrayMemory;//[Offset: 0x40, Size: 0x4] 0x78d742f680
	NetworkEmulationProfileDescription[] NetworkEmulationProfiles;//[Offset: 0x48, Size: 0x10] 0x78d7338620

--------------------------------
Class: NetworkEmulationProfileDescription
	FString ProfileName;//[Offset: 0x0, Size: 0x10] 0x78dbf34600
	FString ToolTip;//[Offset: 0x10, Size: 0x10] 0x78dbf34680

--------------------------------
Class: NodeMappingProviderInterface.Interface.Object

--------------------------------
Class: Note.Actor.Object

--------------------------------
Class: ObjectLibrary.Object
	class Object* ObjectBaseClass;//[Offset: 0x28, Size: 0x8] 0x78d7338440
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78d742ee80
	Object*[] Objects;//[Offset: 0x38, Size: 0x10] 0x78d73384e0
	Object*[] WeakObjects;//[Offset: 0x48, Size: 0x10] 0x78d7338580
	bool bUseWeakReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78d742f000
	bool bIsFullyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78d742f080

--------------------------------
Class: ObjectReferencer.Object
	Object*[] ReferencedObjects;//[Offset: 0x28, Size: 0x10] 0x78d73383a0

--------------------------------
Class: ObjectTraceWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: OnlineEngineInterface.Object

--------------------------------
Class: PackageMapClient.PackageMap.Object

--------------------------------
Class: PainCausingVolume.PhysicsVolume.Volume.Brush.Actor.Object
	bool bPainCausing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x265, Size: 0x1] 0x78d742eb00
	float DamagePerSec;//[Offset: 0x268, Size: 0x4] 0x78d742eb80
	class DamageType* DamageType;//[Offset: 0x270, Size: 0x8] 0x78d7338300
	float PainInterval;//[Offset: 0x278, Size: 0x4] 0x78d742ec00
	bool bEntryPain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 0x1] 0x78d742ec80
	bool BACKUP_bPainCausing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27c, Size: 0x1] 0x78d742ed00
	Controller* DamageInstigator;//[Offset: 0x280, Size: 0x8] 0x78d742ed80

--------------------------------
Class: ParticleModuleAccelerationBase.ParticleModule.Object
	bool bAlwaysInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78d7430500

--------------------------------
Class: ParticleModuleAcceleration.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector Acceleration;//[Offset: 0x30, Size: 0x48] 0x78d7430400
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78d7430480

--------------------------------
Class: ParticleModuleAccelerationConstant.ParticleModuleAccelerationBase.ParticleModule.Object
	Vector Acceleration;//[Offset: 0x2c, Size: 0xc] 0x78d7430380

--------------------------------
Class: ParticleModuleAccelerationDrag.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragCoefficient;//[Offset: 0x30, Size: 0x8] 0x78d7430280
	RawDistributionFloat DragCoefficientRaw;//[Offset: 0x38, Size: 0x30] 0x78d7430300

--------------------------------
Class: ParticleModuleAccelerationDragScaleOverLife.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragScale;//[Offset: 0x30, Size: 0x8] 0x78d7430180
	RawDistributionFloat DragScaleRaw;//[Offset: 0x38, Size: 0x30] 0x78d7430200

--------------------------------
Class: ParticleModuleAccelerationOverLifetime.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector AccelOverLife;//[Offset: 0x30, Size: 0x48] 0x78d7430100

--------------------------------
Class: ParticleModuleAttractorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleAttractorLine.ParticleModuleAttractorBase.ParticleModule.Object
	Vector EndPoint0;//[Offset: 0x2c, Size: 0xc] 0x78d7432000
	Vector EndPoint1;//[Offset: 0x38, Size: 0xc] 0x78d7432080
	RawDistributionFloat Range;//[Offset: 0x48, Size: 0x30] 0x78d7432100
	RawDistributionFloat Strength;//[Offset: 0x78, Size: 0x30] 0x78d7430080

--------------------------------
Class: ParticleModuleAttractorParticle.ParticleModuleAttractorBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x78d7431b80
	RawDistributionFloat Range;//[Offset: 0x38, Size: 0x30] 0x78d7431c00
	bool bStrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78d7431c80
	RawDistributionFloat Strength;//[Offset: 0x70, Size: 0x30] 0x78d7431d00
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78d7431d80
	byte SelectionMethod;//[Offset: 0xa1, Size: 0x1] 0x78d7431e00
	bool bRenewSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2, Size: 0x1] 0x78d7431e80
	bool bInheritSourceVel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 0x1] 0x78d7431f00
	int LastSelIndex;//[Offset: 0xa4, Size: 0x4] 0x78d7431f80

--------------------------------
Class: ParticleModuleAttractorPoint.ParticleModuleAttractorBase.ParticleModule.Object
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x48] 0x78d7431500
	RawDistributionFloat Range;//[Offset: 0x78, Size: 0x30] 0x78d7431580
	RawDistributionFloat Strength;//[Offset: 0xa8, Size: 0x30] 0x78d7431600
	bool StrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x78d7431680
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1] 0x78d7431700
	bool bOverrideVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd8, Size: 0x1] 0x78d7431780
	bool bUseWorldSpacePosition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd8, Size: 0x1] 0x78d7431800
	bool Positive_X;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd8, Size: 0x1] 0x78d7431880
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd8, Size: 0x1] 0x78d7431900
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd8, Size: 0x1] 0x78d7431980
	bool Negative_X;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd8, Size: 0x1] 0x78d7431a00
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd9, Size: 0x1] 0x78d7431a80
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd9, Size: 0x1] 0x78d7431b00

--------------------------------
Class: ParticleModuleAttractorPointGravity.ParticleModuleAttractorBase.ParticleModule.Object
	Vector Position;//[Offset: 0x2c, Size: 0xc] 0x78d7431300
	float Radius;//[Offset: 0x38, Size: 0x4] 0x78d7431380
	DistributionFloat* Strength;//[Offset: 0x40, Size: 0x8] 0x78d7431400
	RawDistributionFloat StrengthRaw;//[Offset: 0x48, Size: 0x30] 0x78d7431480

--------------------------------
Class: ParticleModuleBeamBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleBeamModifier.ParticleModuleBeamBase.ParticleModule.Object
	byte ModifierType;//[Offset: 0x2b, Size: 0x1] 0x78d7433000
	BeamModifierOptions PositionOptions;//[Offset: 0x2c, Size: 0x4] 0x78d7433080
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x48] 0x78d7433100
	BeamModifierOptions TangentOptions;//[Offset: 0x78, Size: 0x4] 0x78d7433180
	RawDistributionVector Tangent;//[Offset: 0x80, Size: 0x48] 0x78d7431100
	bool bAbsoluteTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x78d7431180
	BeamModifierOptions StrengthOptions;//[Offset: 0xcc, Size: 0x4] 0x78d7431200
	RawDistributionFloat Strength;//[Offset: 0xd0, Size: 0x30] 0x78d7431280

--------------------------------
Class: BeamModifierOptions
	bool bModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbf35e80
	bool bScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbf35f00
	bool Block;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbf35f80

--------------------------------
Class: ParticleModuleBeamNoise.ParticleModuleBeamBase.ParticleModule.Object
	bool bLowFreq_Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78d7432600
	int Frequency;//[Offset: 0x2c, Size: 0x4] 0x78d7432680
	int Frequency_LowRange;//[Offset: 0x30, Size: 0x4] 0x78d7432700
	RawDistributionVector NoiseRange;//[Offset: 0x38, Size: 0x48] 0x78d7432780
	RawDistributionFloat NoiseRangeScale;//[Offset: 0x80, Size: 0x30] 0x78d7432800
	bool bNRScaleEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78d7432880
	RawDistributionVector NoiseSpeed;//[Offset: 0xb8, Size: 0x48] 0x78d7432900
	bool bSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1] 0x78d7432980
	float NoiseLockRadius;//[Offset: 0x104, Size: 0x4] 0x78d7432a00
	bool bNoiseLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x78d7432a80
	bool bOscillate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1] 0x78d7432b00
	float NoiseLockTime;//[Offset: 0x10c, Size: 0x4] 0x78d7432b80
	float NoiseTension;//[Offset: 0x110, Size: 0x4] 0x78d7432c00
	bool bUseNoiseTangents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x114, Size: 0x1] 0x78d7432c80
	RawDistributionFloat NoiseTangentStrength;//[Offset: 0x118, Size: 0x30] 0x78d7432d00
	int NoiseTessellation;//[Offset: 0x148, Size: 0x4] 0x78d7432d80
	bool bTargetNoise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1] 0x78d7432e00
	float FrequencyDistance;//[Offset: 0x150, Size: 0x4] 0x78d7432e80
	bool bApplyNoiseScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x154, Size: 0x1] 0x78d7432f00
	RawDistributionFloat NoiseScale;//[Offset: 0x158, Size: 0x30] 0x78d7432f80

--------------------------------
Class: ParticleModuleBeamSource.ParticleModuleBeamBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1] 0x78d7434200
	FName SourceName;//[Offset: 0x2c, Size: 0x8] 0x78d7432180
	bool bSourceAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x78d7432200
	RawDistributionVector Source;//[Offset: 0x38, Size: 0x48] 0x78d7432280
	bool bLockSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78d7432300
	byte SourceTangentMethod;//[Offset: 0x81, Size: 0x1] 0x78d7432380
	RawDistributionVector SourceTangent;//[Offset: 0x88, Size: 0x48] 0x78d7432400
	bool bLockSourceTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1] 0x78d7432480
	RawDistributionFloat SourceStrength;//[Offset: 0xd8, Size: 0x30] 0x78d7432500
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x78d7432580

--------------------------------
Class: ParticleModuleBeamTarget.ParticleModuleBeamBase.ParticleModule.Object
	byte TargetMethod;//[Offset: 0x2b, Size: 0x1] 0x78d7433c80
	FName TargetName;//[Offset: 0x2c, Size: 0x8] 0x78d7433d00
	RawDistributionVector Target;//[Offset: 0x38, Size: 0x48] 0x78d7433d80
	bool bTargetAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78d7433e00
	bool bLockTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78d7433e80
	byte TargetTangentMethod;//[Offset: 0x81, Size: 0x1] 0x78d7433f00
	RawDistributionVector TargetTangent;//[Offset: 0x88, Size: 0x48] 0x78d7433f80
	bool bLockTargetTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1] 0x78d7434000
	RawDistributionFloat TargetStrength;//[Offset: 0xd8, Size: 0x30] 0x78d7434080
	bool bLockTargetStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x78d7434100
	float LockRadius;//[Offset: 0x10c, Size: 0x4] 0x78d7434180

--------------------------------
Class: ParticleModuleCameraBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCameraOffset.ParticleModuleCameraBase.ParticleModule.Object
	RawDistributionFloat CameraOffset;//[Offset: 0x30, Size: 0x30] 0x78d7433b00
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78d7433b80
	byte UpdateMethod;//[Offset: 0x61, Size: 0x1] 0x78d7433c00

--------------------------------
Class: ParticleModuleCollisionBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCollision.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionVector DampingFactor;//[Offset: 0x30, Size: 0x48] 0x78d7433280
	RawDistributionVector DampingFactorRotation;//[Offset: 0x78, Size: 0x48] 0x78d7433300
	RawDistributionFloat MaxCollisions;//[Offset: 0xc0, Size: 0x30] 0x78d7433380
	byte CollisionCompletionOption;//[Offset: 0xf0, Size: 0x1] 0x78d7433400
	byte[] CollisionTypes;//[Offset: 0xf8, Size: 0x10] 0x78d7337d60
	bool bApplyPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1] 0x78d7433500
	bool bIgnoreTriggerVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1] 0x78d7433580
	RawDistributionFloat ParticleMass;//[Offset: 0x118, Size: 0x30] 0x78d7433600
	float DirScalar;//[Offset: 0x148, Size: 0x4] 0x78d7433680
	bool bPawnsDoNotDecrementCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1] 0x78d7433700
	bool bOnlyVerticalNormalsDecrementCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14c, Size: 0x1] 0x78d7433780
	float VerticalFudgeFactor;//[Offset: 0x150, Size: 0x4] 0x78d7433800
	RawDistributionFloat DelayAmount;//[Offset: 0x158, Size: 0x30] 0x78d7433880
	bool bDropDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1] 0x78d7433900
	bool bCollideOnlyIfVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x188, Size: 0x1] 0x78d7433980
	bool bIgnoreSourceActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x188, Size: 0x1] 0x78d7433a00
	float MaxCollisionDistance;//[Offset: 0x18c, Size: 0x4] 0x78d7433a80

--------------------------------
Class: ParticleModuleCollisionGPU.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionFloat Resilience;//[Offset: 0x30, Size: 0x30] 0x78d7434f00
	RawDistributionFloat ResilienceScaleOverLife;//[Offset: 0x60, Size: 0x30] 0x78d7434f80
	float Friction;//[Offset: 0x90, Size: 0x4] 0x78d7435000
	float RandomSpread;//[Offset: 0x94, Size: 0x4] 0x78d7435080
	float RandomDistribution;//[Offset: 0x98, Size: 0x4] 0x78d7435100
	float RadiusScale;//[Offset: 0x9c, Size: 0x4] 0x78d7435180
	float RadiusBias;//[Offset: 0xa0, Size: 0x4] 0x78d7435200
	byte response;//[Offset: 0xa4, Size: 0x1] 0x78d7435280
	byte CollisionMode;//[Offset: 0xa5, Size: 0x1] 0x78d7433200

--------------------------------
Class: ParticleModuleColorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector StartColor;//[Offset: 0x30, Size: 0x48] 0x78d7434d80
	RawDistributionFloat StartAlpha;//[Offset: 0x78, Size: 0x30] 0x78d7434e00
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78d7434e80

--------------------------------
Class: ParticleModuleColor_Seeded.ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xb0, Size: 0x20] 0x78d7434d00

--------------------------------
Class: ParticleRandomSeedInfo
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78dbf36100
	bool bGetSeedFromInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78dbf36180
	bool bInstanceSeedIsIndex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x78dbf36200
	bool bResetSeedOnEmitterLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x78dbf36280
	bool bRandomlySelectSeedArray;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x78dbf36300
	int[] RandomSeeds;//[Offset: 0x10, Size: 0x10] 0x78dbf206a0

--------------------------------
Class: ParticleModuleColorOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorOverLife;//[Offset: 0x30, Size: 0x48] 0x78d7434b80
	RawDistributionFloat AlphaOverLife;//[Offset: 0x78, Size: 0x30] 0x78d7434c00
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78d7434c80

--------------------------------
Class: ParticleModuleColorScaleOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x30, Size: 0x48] 0x78d7434a00
	RawDistributionFloat AlphaScaleOverLife;//[Offset: 0x78, Size: 0x30] 0x78d7434a80
	bool bEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78d7434b00

--------------------------------
Class: ParticleModuleEventReceiverKillParticles.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	bool bStopSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x78d7434800

--------------------------------
Class: ParticleModuleEventReceiverSpawn.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	RawDistributionFloat SpawnCount;//[Offset: 0x38, Size: 0x30] 0x78d7434480
	bool bUseParticleTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78d7434500
	bool bUsePSysLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x78d7434580
	bool bInheritVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x78d7434600
	RawDistributionVector InheritVelocityScale;//[Offset: 0x70, Size: 0x48] 0x78d7434680
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0xb8, Size: 0x10] 0x78d7337c20
	bool bBanPhysicalMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x78d7434780

--------------------------------
Class: ParticleModuleKillBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleKillBox.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionVector LowerLeftCorner;//[Offset: 0x30, Size: 0x48] 0x78d7436300
	RawDistributionVector UpperRightCorner;//[Offset: 0x78, Size: 0x48] 0x78d7434280
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x78d7434300
	bool bKillInside;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x78d7434380
	bool bAxisAlignedAndFixedSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x78d7434400

--------------------------------
Class: ParticleModuleKillHeight.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionFloat Height;//[Offset: 0x30, Size: 0x30] 0x78d7436100
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78d7436180
	bool bFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x78d7436200
	bool bApplyPSysScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x78d7436280

--------------------------------
Class: ParticleModuleLifetimeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	RawDistributionFloat Lifetime;//[Offset: 0x30, Size: 0x30] 0x78d7436080

--------------------------------
Class: ParticleModuleLifetime_Seeded.ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x78d7436000

--------------------------------
Class: ParticleModuleLightBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1] 0x78d7435a00
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78d7435a80
	bool bPreviewLightRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x78d7435b00
	float SpawnFraction;//[Offset: 0x30, Size: 0x4] 0x78d7435b80
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x38, Size: 0x48] 0x78d7435c00
	RawDistributionFloat BrightnessOverLife;//[Offset: 0x80, Size: 0x30] 0x78d7435c80
	RawDistributionFloat RadiusScale;//[Offset: 0xb0, Size: 0x30] 0x78d7435d00
	RawDistributionFloat LightExponent;//[Offset: 0xe0, Size: 0x30] 0x78d7435d80
	LightingChannels LightingChannels;//[Offset: 0x110, Size: 0x1] 0x78d7435e00
	float VolumetricScatteringIntensity;//[Offset: 0x114, Size: 0x4] 0x78d7435e80
	bool bHighQualityLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x78d7435f00
	bool bShadowCastingLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78d7435f80

--------------------------------
Class: ParticleModuleLight_Seeded.ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x120, Size: 0x20] 0x78d7435980

--------------------------------
Class: ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartLocation;//[Offset: 0x30, Size: 0x48] 0x78d7435800
	float DistributeOverNPoints;//[Offset: 0x78, Size: 0x4] 0x78d7435880
	float DistributeThreshold;//[Offset: 0x7c, Size: 0x4] 0x78d7435900

--------------------------------
Class: ParticleModuleLocation_Seeded.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20] 0x78d7435780

--------------------------------
Class: ParticleModuleLocationBoneSocket.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x2b, Size: 0x1] 0x78d7437380
	Vector UniversalOffset;//[Offset: 0x2c, Size: 0xc] 0x78d7435300
	LocationBoneSocketInfo[] SourceLocations;//[Offset: 0x38, Size: 0x10] 0x78d733a4c0
	byte SelectionMethod;//[Offset: 0x48, Size: 0x1] 0x78d7435400
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49, Size: 0x1] 0x78d7435480
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49, Size: 0x1] 0x78d7435500
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x49, Size: 0x1] 0x78d7435580
	float InheritVelocityScale;//[Offset: 0x4c, Size: 0x4] 0x78d7435600
	FName SkelMeshActorParamName;//[Offset: 0x50, Size: 0x8] 0x78d7435680
	int NumPreSelectedIndices;//[Offset: 0x58, Size: 0x4] 0x78d7435700

--------------------------------
Class: LocationBoneSocketInfo
	FName BoneSocketName;//[Offset: 0x0, Size: 0x8] 0x78dbf35900
	Vector Offset;//[Offset: 0x8, Size: 0xc] 0x78dbf35980

--------------------------------
Class: ParticleModuleLocationDirect.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector Location;//[Offset: 0x30, Size: 0x48] 0x78d7437180
	RawDistributionVector LocationOffset;//[Offset: 0x78, Size: 0x48] 0x78d7437200
	RawDistributionVector ScaleFactor;//[Offset: 0xc0, Size: 0x48] 0x78d7437280
	RawDistributionVector Direction;//[Offset: 0x108, Size: 0x48] 0x78d7437300

--------------------------------
Class: ParticleModuleLocationEmitter.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x78d7436e80
	byte SelectionMethod;//[Offset: 0x34, Size: 0x1] 0x78d7436f00
	bool InheritSourceVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 0x1] 0x78d7436f80
	float InheritSourceVelocityScale;//[Offset: 0x38, Size: 0x4] 0x78d7437000
	bool bInheritSourceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78d7437080
	float InheritSourceRotationScale;//[Offset: 0x40, Size: 0x4] 0x78d7437100

--------------------------------
Class: ParticleModuleLocationEmitterDirect.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x78d7436e00

--------------------------------
Class: ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool Positive_X;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78d7436900
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x78d7436980
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x78d7436a00
	bool Negative_X;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b, Size: 0x1] 0x78d7436a80
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b, Size: 0x1] 0x78d7436b00
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b, Size: 0x1] 0x78d7436b80
	bool SurfaceOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b, Size: 0x1] 0x78d7436c00
	bool Velocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b, Size: 0x1] 0x78d7436c80
	RawDistributionFloat VelocityScale;//[Offset: 0x30, Size: 0x30] 0x78d7436d00
	RawDistributionVector StartLocation;//[Offset: 0x60, Size: 0x48] 0x78d7436d80

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool RadialVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78d7436700
	RawDistributionFloat StartRadius;//[Offset: 0xb0, Size: 0x30] 0x78d7436780
	RawDistributionFloat StartHeight;//[Offset: 0xe0, Size: 0x30] 0x78d7436800
	byte HeightAxis;//[Offset: 0x110, Size: 0x1] 0x78d7436880

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder_Seeded.ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x118, Size: 0x20] 0x78d7436680

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionFloat StartRadius;//[Offset: 0xa8, Size: 0x30] 0x78d7436600

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere_Seeded.ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xd8, Size: 0x20] 0x78d7436580

--------------------------------
Class: ParticleModuleLocationPrimitiveTriangle.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartOffset;//[Offset: 0x30, Size: 0x48] 0x78d7436380
	RawDistributionFloat Height;//[Offset: 0x78, Size: 0x30] 0x78d7436400
	RawDistributionFloat Angle;//[Offset: 0xa8, Size: 0x30] 0x78d7436480
	RawDistributionFloat Thickness;//[Offset: 0xd8, Size: 0x30] 0x78d7436500

--------------------------------
Class: ParticleModuleLocationSkelVertSurface.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x2b, Size: 0x1] 0x78d7437c80
	Vector UniversalOffset;//[Offset: 0x2c, Size: 0xc] 0x78d7437d00
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78d7437d80
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78d7437e00
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x78d7437e80
	float InheritVelocityScale;//[Offset: 0x3c, Size: 0x4] 0x78d7437f00
	FName SkelMeshActorParamName;//[Offset: 0x40, Size: 0x8] 0x78d7437f80
	FName[] ValidAssociatedBones;//[Offset: 0x48, Size: 0x10] 0x78d733a380
	bool bEnforceNormalCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78d7438080
	Vector NormalToCompare;//[Offset: 0x5c, Size: 0xc] 0x78d7438100
	float NormalCheckToleranceDegrees;//[Offset: 0x68, Size: 0x4] 0x78d7438180
	float NormalCheckTolerance;//[Offset: 0x6c, Size: 0x4] 0x78d7438200
	int[] ValidMaterialIndices;//[Offset: 0x70, Size: 0x10] 0x78d733a420
	bool bInheritVertexColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78d7438300
	bool bInheritUV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78d7438380
	uint32 InheritUVChannel;//[Offset: 0x84, Size: 0x4] 0x78d7438400

--------------------------------
Class: ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocationWorldOffset_Seeded.ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20] 0x78d7437c00

--------------------------------
Class: ParticleModuleMaterialBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshMaterial.ParticleModuleMaterialBase.ParticleModule.Object
	MaterialInterface*[] MeshMaterials;//[Offset: 0x30, Size: 0x10] 0x78d733a2e0

--------------------------------
Class: ParticleModuleRotationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionVector StartRotation;//[Offset: 0x30, Size: 0x48] 0x78d7437a80
	bool bInheritParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78d7437b00

--------------------------------
Class: ParticleModuleMeshRotation_Seeded.ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20] 0x78d7437a00

--------------------------------
Class: ParticleModuleRotationRateBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector StartRotationRate;//[Offset: 0x30, Size: 0x48] 0x78d7437980

--------------------------------
Class: ParticleModuleMeshRotationRate_Seeded.ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x78, Size: 0x20] 0x78d7437900

--------------------------------
Class: ParticleModuleMeshRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x48] 0x78d7437880

--------------------------------
Class: ParticleModuleMeshRotationRateOverLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector RotRate;//[Offset: 0x30, Size: 0x48] 0x78d7437780
	bool bScaleRotRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78d7437800

--------------------------------
Class: ParticleModuleOrientationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleOrientationAxisLock.ParticleModuleOrientationBase.ParticleModule.Object
	byte LockAxisFlags;//[Offset: 0x2b, Size: 0x1] 0x78d7439400

--------------------------------
Class: ParticleModuleParameterBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	EmitterDynamicParameter[] DynamicParams;//[Offset: 0x30, Size: 0x10] 0x78d733a240
	int UpdateFlags;//[Offset: 0x40, Size: 0x4] 0x78d7439300
	bool bUsesVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78d7439380

--------------------------------
Class: EmitterDynamicParameter
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x78dbf35480
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78dbf35500
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x78dbf35580
	byte ValueMethod;//[Offset: 0x9, Size: 0x1] 0x78dbf35600
	bool bScaleVelocityByParamValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x78dbf35680
	RawDistributionFloat ParamValue;//[Offset: 0x10, Size: 0x30] 0x78dbf35700

--------------------------------
Class: ParticleModuleParameterDynamic_Seeded.ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x48, Size: 0x20] 0x78d7439200

--------------------------------
Class: ParticleModulePivotOffset.ParticleModuleLocationBase.ParticleModule.Object
	Vector2D PivotOffset;//[Offset: 0x2c, Size: 0x8] 0x78d7439180

--------------------------------
Class: ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat StartRotation;//[Offset: 0x30, Size: 0x30] 0x78d7439b80

--------------------------------
Class: ParticleModuleRotation_Seeded.ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x78d7439b00

--------------------------------
Class: ParticleModuleRotationOverLifetime.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat RotationOverLife;//[Offset: 0x30, Size: 0x30] 0x78d7439a00
	bool Scale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78d7439a80

--------------------------------
Class: ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat StartRotationRate;//[Offset: 0x30, Size: 0x30] 0x78d7439980

--------------------------------
Class: ParticleModuleRotationRate_Seeded.ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x78d7439900

--------------------------------
Class: ParticleModuleRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat LifeMultiplier;//[Offset: 0x30, Size: 0x30] 0x78d7439880

--------------------------------
Class: ParticleModuleSizeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector StartSize;//[Offset: 0x30, Size: 0x48] 0x78d7439800

--------------------------------
Class: ParticleModuleSize_Seeded.ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x78, Size: 0x20] 0x78d7439780

--------------------------------
Class: ParticleModuleSizeMultiplyLife.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x48] 0x78d7439580
	bool MultiplyX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78d7439600
	bool MultiplyY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x78d7439680
	bool MultiplyZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x78d7439700

--------------------------------
Class: ParticleModuleSizeScale.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector SizeScale;//[Offset: 0x30, Size: 0x48] 0x78d743b480
	bool EnableX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78d743b500
	bool EnableY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x78d743b580
	bool EnableZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x78d7439500

--------------------------------
Class: ParticleModuleSizeScaleBySpeed.ParticleModuleSizeBase.ParticleModule.Object
	Vector2D SpeedScale;//[Offset: 0x2c, Size: 0x8] 0x78d743b380
	Vector2D MaxScale;//[Offset: 0x34, Size: 0x8] 0x78d743b400

--------------------------------
Class: ParticleModuleSourceMovement.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector SourceMovementScale;//[Offset: 0x30, Size: 0x48] 0x78d743b300

--------------------------------
Class: ParticleModuleSpawnPerUnit.ParticleModuleSpawnBase.ParticleModule.Object
	float UnitScalar;//[Offset: 0x2c, Size: 0x4] 0x78d743ab00
	float MovementTolerance;//[Offset: 0x30, Size: 0x4] 0x78d743ab80
	RawDistributionFloat SpawnPerUnit;//[Offset: 0x38, Size: 0x30] 0x78d743ac00
	float MaxFrameDistance;//[Offset: 0x68, Size: 0x4] 0x78d743ac80
	bool bIgnoreSpawnRateWhenMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x78d743ad00
	bool bIgnoreMovementAlongX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1] 0x78d743ad80
	bool bIgnoreMovementAlongY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1] 0x78d743ae00
	bool bIgnoreMovementAlongZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1] 0x78d743ae80

--------------------------------
Class: ParticleModuleSubUVBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	SubUVAnimation* Animation;//[Offset: 0x30, Size: 0x8] 0x78d743a980
	RawDistributionFloat SubImageIndex;//[Offset: 0x38, Size: 0x30] 0x78d743aa00
	bool bUseRealTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78d743aa80

--------------------------------
Class: SubUVAnimation.Object
	Texture2D* SubUVTexture;//[Offset: 0x28, Size: 0x8] 0x78d7470900
	int SubImages_Horizontal;//[Offset: 0x30, Size: 0x4] 0x78d7470980
	int SubImages_Vertical;//[Offset: 0x34, Size: 0x4] 0x78d7470a00
	byte BoundingMode;//[Offset: 0x38, Size: 0x1] 0x78d7470a80
	byte OpacitySourceMode;//[Offset: 0x39, Size: 0x1] 0x78d7470b00
	float AlphaThreshold;//[Offset: 0x3c, Size: 0x4] 0x78d7470b80

--------------------------------
Class: ParticleModuleSubUVMovie.ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x78d743a800
	RawDistributionFloat FrameRate;//[Offset: 0x70, Size: 0x30] 0x78d743a880
	int StartingFrame;//[Offset: 0xa0, Size: 0x4] 0x78d743a900

--------------------------------
Class: ParticleModuleTrailBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleTrailSource.ParticleModuleTrailBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1] 0x78d743c500
	FName SourceName;//[Offset: 0x2c, Size: 0x8] 0x78d743c580
	RawDistributionFloat SourceStrength;//[Offset: 0x38, Size: 0x30] 0x78d743c600
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78d743a580
	int SourceOffsetCount;//[Offset: 0x6c, Size: 0x4] 0x78d743a600
	Vector[] SourceOffsetDefaults;//[Offset: 0x70, Size: 0x10] 0x78d7339f20
	byte SelectionMethod;//[Offset: 0x80, Size: 0x1] 0x78d743a700
	bool bInheritRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1] 0x78d743a780

--------------------------------
Class: ParticleModuleTypeDataAnimTrail.ParticleModuleTypeDataBase.ParticleModule.Object
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78d743c180
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x78d743c200
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x78d743c280
	float TilingDistance;//[Offset: 0x2c, Size: 0x4] 0x78d743c300
	float DistanceTessellationStepSize;//[Offset: 0x30, Size: 0x4] 0x78d743c380
	float TangentTessellationStepSize;//[Offset: 0x34, Size: 0x4] 0x78d743c400
	float WidthTessellationStepSize;//[Offset: 0x38, Size: 0x4] 0x78d743c480

--------------------------------
Class: ParticleModuleTypeDataBeam2.ParticleModuleTypeDataBase.ParticleModule.Object
	byte BeamMethod;//[Offset: 0x2b, Size: 0x1] 0x78d743b880
	int TextureTile;//[Offset: 0x2c, Size: 0x4] 0x78d743b900
	float TextureTileDistance;//[Offset: 0x30, Size: 0x4] 0x78d743b980
	int Sheets;//[Offset: 0x34, Size: 0x4] 0x78d743ba00
	int MaxBeamCount;//[Offset: 0x38, Size: 0x4] 0x78d743ba80
	float Speed;//[Offset: 0x3c, Size: 0x4] 0x78d743bb00
	int InterpolationPoints;//[Offset: 0x40, Size: 0x4] 0x78d743bb80
	bool bAlwaysOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78d743bc00
	int UpVectorStepSize;//[Offset: 0x48, Size: 0x4] 0x78d743bc80
	FName BranchParentName;//[Offset: 0x4c, Size: 0x8] 0x78d743bd00
	RawDistributionFloat Distance;//[Offset: 0x58, Size: 0x30] 0x78d743bd80
	byte TaperMethod;//[Offset: 0x88, Size: 0x1] 0x78d743be00
	RawDistributionFloat TaperFactor;//[Offset: 0x90, Size: 0x30] 0x78d743be80
	RawDistributionFloat TaperScale;//[Offset: 0xc0, Size: 0x30] 0x78d743bf00
	bool RenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x78d743bf80
	bool RenderDirectLine;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x78d743c000
	bool RenderLines;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1] 0x78d743c080
	bool RenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1] 0x78d743c100

--------------------------------
Class: ParticleModuleTypeDataGpu.ParticleModuleTypeDataBase.ParticleModule.Object
	GPUSpriteEmitterInfo EmitterInfo;//[Offset: 0x30, Size: 0x270] 0x78d743b680
	GPUSpriteResourceData ResourceData;//[Offset: 0x2a0, Size: 0x160] 0x78d743b700
	float CameraMotionBlurAmount;//[Offset: 0x400, Size: 0x4] 0x78d743b780
	bool bClearExistingParticlesOnInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x404, Size: 0x1] 0x78d743b800

--------------------------------
Class: GPUSpriteEmitterInfo
	ParticleModuleRequired* RequiredModule;//[Offset: 0x0, Size: 0x8] 0x78dbf38e00
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x8, Size: 0x8] 0x78dbf38e80
	ParticleModuleSpawnPerUnit* SpawnPerUnitModule;//[Offset: 0x10, Size: 0x8] 0x78dbf38f00
	ParticleModule*[] SpawnModules;//[Offset: 0x18, Size: 0x10] 0x78dbf20380
	GPUSpriteLocalVectorFieldInfo LocalVectorField;//[Offset: 0x30, Size: 0x70] 0x78dbf37500
	FloatDistribution VectorFieldScale;//[Offset: 0xa0, Size: 0x20] 0x78dbf37580
	FloatDistribution DragCoefficient;//[Offset: 0xc0, Size: 0x20] 0x78dbf37600
	FloatDistribution PointAttractorStrength;//[Offset: 0xe0, Size: 0x20] 0x78dbf37680
	FloatDistribution Resilience;//[Offset: 0x100, Size: 0x20] 0x78dbf37700
	Vector ConstantAcceleration;//[Offset: 0x120, Size: 0xc] 0x78dbf37780
	Vector PointAttractorPosition;//[Offset: 0x12c, Size: 0xc] 0x78dbf37800
	float PointAttractorRadiusSq;//[Offset: 0x138, Size: 0x4] 0x78dbf37880
	Vector OrbitOffsetBase;//[Offset: 0x13c, Size: 0xc] 0x78dbf37900
	Vector OrbitOffsetRange;//[Offset: 0x148, Size: 0xc] 0x78dbf37980
	Vector2D InvMaxSize;//[Offset: 0x154, Size: 0x8] 0x78dbf37a00
	float InvRotationRateScale;//[Offset: 0x15c, Size: 0x4] 0x78dbf37a80
	float MaxLifetime;//[Offset: 0x160, Size: 0x4] 0x78dbf37b00
	int MaxParticleCount;//[Offset: 0x164, Size: 0x4] 0x78dbf37b80
	byte ScreenAlignment;//[Offset: 0x168, Size: 0x1] 0x78dbf37c00
	byte LockAxisFlag;//[Offset: 0x169, Size: 0x1] 0x78dbf37c80
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16a, Size: 0x1] 0x78dbf37d00
	byte CollisionMode;//[Offset: 0x16b, Size: 0x1] 0x78dbf37d80
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16c, Size: 0x1] 0x78dbf37e00
	float MinFacingCameraBlendDistance;//[Offset: 0x170, Size: 0x4] 0x78dbf37e80
	float MaxFacingCameraBlendDistance;//[Offset: 0x174, Size: 0x4] 0x78dbf37f00
	RawDistributionVector DynamicColor;//[Offset: 0x178, Size: 0x48] 0x78dbf37f80
	RawDistributionFloat DynamicAlpha;//[Offset: 0x1c0, Size: 0x30] 0x78dbf38000
	RawDistributionVector DynamicColorScale;//[Offset: 0x1f0, Size: 0x48] 0x78dbf38080
	RawDistributionFloat DynamicAlphaScale;//[Offset: 0x238, Size: 0x30] 0x78dbf38100

--------------------------------
Class: GPUSpriteLocalVectorFieldInfo
	VectorField* Field;//[Offset: 0x0, Size: 0x8] 0x78dbf39000
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x78dbf39080
	Rotator MinInitialRotation;//[Offset: 0x40, Size: 0xc] 0x78dbf39100
	Rotator MaxInitialRotation;//[Offset: 0x4c, Size: 0xc] 0x78dbf39180
	Rotator RotationRate;//[Offset: 0x58, Size: 0xc] 0x78dbf39200
	float Intensity;//[Offset: 0x64, Size: 0x4] 0x78dbf39280
	float Tightness;//[Offset: 0x68, Size: 0x4] 0x78dbf39300
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x78dbf39380
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1] 0x78dbf39400
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1] 0x78dbf39480
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1] 0x78dbf37400
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c, Size: 0x1] 0x78dbf37480

--------------------------------
Class: VectorField.Object
	Box Bounds;//[Offset: 0x28, Size: 0x1c] 0x78d7476100
	float Intensity;//[Offset: 0x44, Size: 0x4] 0x78d7476180

--------------------------------
Class: FloatDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20] 0x78ce9bd400

--------------------------------
Class: GPUSpriteResourceData
	Color[] QuantizedColorSamples;//[Offset: 0x0, Size: 0x10] 0x78dbf20420
	Color[] QuantizedMiscSamples;//[Offset: 0x10, Size: 0x10] 0x78dbf204c0
	Color[] QuantizedSimulationAttrSamples;//[Offset: 0x20, Size: 0x10] 0x78dbf20560
	Vector4 ColorScale;//[Offset: 0x30, Size: 0x10] 0x78dbf38300
	Vector4 ColorBias;//[Offset: 0x40, Size: 0x10] 0x78dbf38380
	Vector4 MiscScale;//[Offset: 0x50, Size: 0x10] 0x78dbf38400
	Vector4 MiscBias;//[Offset: 0x60, Size: 0x10] 0x78dbf36380
	Vector4 SimulationAttrCurveScale;//[Offset: 0x70, Size: 0x10] 0x78dbf36400
	Vector4 SimulationAttrCurveBias;//[Offset: 0x80, Size: 0x10] 0x78dbf36480
	Vector4 SubImageSize;//[Offset: 0x90, Size: 0x10] 0x78dbf36500
	Vector4 SizeBySpeed;//[Offset: 0xa0, Size: 0x10] 0x78dbf36580
	Vector ConstantAcceleration;//[Offset: 0xb0, Size: 0xc] 0x78dbf36600
	Vector OrbitOffsetBase;//[Offset: 0xbc, Size: 0xc] 0x78dbf36680
	Vector OrbitOffsetRange;//[Offset: 0xc8, Size: 0xc] 0x78dbf36700
	Vector OrbitFrequencyBase;//[Offset: 0xd4, Size: 0xc] 0x78dbf36780
	Vector OrbitFrequencyRange;//[Offset: 0xe0, Size: 0xc] 0x78dbf36800
	Vector OrbitPhaseBase;//[Offset: 0xec, Size: 0xc] 0x78dbf36880
	Vector OrbitPhaseRange;//[Offset: 0xf8, Size: 0xc] 0x78dbf36900
	float GlobalVectorFieldScale;//[Offset: 0x104, Size: 0x4] 0x78dbf36980
	float GlobalVectorFieldTightness;//[Offset: 0x108, Size: 0x4] 0x78dbf36a00
	float PerParticleVectorFieldScale;//[Offset: 0x10c, Size: 0x4] 0x78dbf36a80
	float PerParticleVectorFieldBias;//[Offset: 0x110, Size: 0x4] 0x78dbf36b00
	float DragCoefficientScale;//[Offset: 0x114, Size: 0x4] 0x78dbf36b80
	float DragCoefficientBias;//[Offset: 0x118, Size: 0x4] 0x78dbf36c00
	float ResilienceScale;//[Offset: 0x11c, Size: 0x4] 0x78dbf36c80
	float ResilienceBias;//[Offset: 0x120, Size: 0x4] 0x78dbf36d00
	float CollisionRadiusScale;//[Offset: 0x124, Size: 0x4] 0x78dbf36d80
	float CollisionRadiusBias;//[Offset: 0x128, Size: 0x4] 0x78dbf36e00
	float CollisionTimeBias;//[Offset: 0x12c, Size: 0x4] 0x78dbf36e80
	float CollisionRandomSpread;//[Offset: 0x130, Size: 0x4] 0x78dbf36f00
	float CollisionRandomDistribution;//[Offset: 0x134, Size: 0x4] 0x78dbf36f80
	float OneMinusFriction;//[Offset: 0x138, Size: 0x4] 0x78dbf37000
	float RotationRateScale;//[Offset: 0x13c, Size: 0x4] 0x78dbf37080
	float CameraMotionBlurAmount;//[Offset: 0x140, Size: 0x4] 0x78dbf37100
	byte ScreenAlignment;//[Offset: 0x144, Size: 0x1] 0x78dbf37180
	byte LockAxisFlag;//[Offset: 0x145, Size: 0x1] 0x78dbf37200
	Vector2D PivotOffset;//[Offset: 0x148, Size: 0x8] 0x78dbf37280
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1] 0x78dbf37300
	float MinFacingCameraBlendDistance;//[Offset: 0x154, Size: 0x4] 0x78dbf37380
	float MaxFacingCameraBlendDistance;//[Offset: 0x158, Size: 0x4] 0x78dbf35300

--------------------------------
Class: ParticleModuleTypeDataMesh.ParticleModuleTypeDataBase.ParticleModule.Object
	StaticMesh* mesh;//[Offset: 0x30, Size: 0x8] 0x78d743cf00
	float LODSizeScale;//[Offset: 0x40, Size: 0x4] 0x78d743cf80
	bool bUseStaticMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78d743d000
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1] 0x78d743d080
	bool DoCollisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1] 0x78d743d100
	byte MeshAlignment;//[Offset: 0x45, Size: 0x1] 0x78d743d180
	bool bOverrideMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46, Size: 0x1] 0x78d743d200
	bool bOverrideDefaultMotionBlurSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x46, Size: 0x1] 0x78d743d280
	bool bEnableMotionBlur;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x46, Size: 0x1] 0x78d743d300
	RawDistributionVector RollPitchYawRange;//[Offset: 0x48, Size: 0x48] 0x78d743d380
	byte AxisLockOption;//[Offset: 0x90, Size: 0x1] 0x78d743d400
	bool bCameraFacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91, Size: 0x1] 0x78d743d480
	byte CameraFacingUpAxisOption;//[Offset: 0x92, Size: 0x1] 0x78d743d500
	byte CameraFacingOption;//[Offset: 0x93, Size: 0x1] 0x78d743d580
	bool bApplyParticleRotationAsSpin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1] 0x78d743d600
	bool bFaceCameraDirectionRatherThanPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1] 0x78d743d680
	bool bCollisionsConsiderPartilceSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 0x1] 0x78d743b600

--------------------------------
Class: ParticleModuleTypeDataRibbon.ParticleModuleTypeDataBase.ParticleModule.Object
	int MaxTessellationBetweenParticles;//[Offset: 0x2c, Size: 0x4] 0x78d743e600
	int SheetsPerTrail;//[Offset: 0x30, Size: 0x4] 0x78d743e680
	int MaxTrailCount;//[Offset: 0x34, Size: 0x4] 0x78d743e700
	int MaxParticleInTrailCount;//[Offset: 0x38, Size: 0x4] 0x78d743c680
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78d743c700
	bool bDeadTrailsOnSourceLoss;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78d743c780
	bool bClipSourceSegement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x78d743c800
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x78d743c880
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x78d743c900
	bool bSpawnInitialParticle;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x78d743c980
	byte RenderAxis;//[Offset: 0x3d, Size: 0x1] 0x78d743ca00
	float TangentSpawningScalar;//[Offset: 0x40, Size: 0x4] 0x78d743ca80
	bool bRenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78d743cb00
	bool bRenderSpawnPoints;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1] 0x78d743cb80
	bool bRenderTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1] 0x78d743cc00
	bool bRenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 0x1] 0x78d743cc80
	float TilingDistance;//[Offset: 0x48, Size: 0x4] 0x78d743cd00
	float DistanceTessellationStepSize;//[Offset: 0x4c, Size: 0x4] 0x78d743cd80
	bool bEnableTangentDiffInterpScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78d743ce00
	float TangentTessellationScalar;//[Offset: 0x54, Size: 0x4] 0x78d743ce80

--------------------------------
Class: ParticleModuleVectorFieldBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleVectorFieldGlobal.ParticleModuleVectorFieldBase.ParticleModule.Object
	bool bOverrideGlobalVectorFieldTightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78d743e480
	float GlobalVectorFieldScale;//[Offset: 0x2c, Size: 0x4] 0x78d743e500
	float GlobalVectorFieldTightness;//[Offset: 0x30, Size: 0x4] 0x78d743e580

--------------------------------
Class: ParticleModuleVectorFieldLocal.ParticleModuleVectorFieldBase.ParticleModule.Object
	VectorField* VectorField;//[Offset: 0x30, Size: 0x8] 0x78d743df00
	Vector RelativeTranslation;//[Offset: 0x38, Size: 0xc] 0x78d743df80
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc] 0x78d743e000
	Vector RelativeScale3D;//[Offset: 0x50, Size: 0xc] 0x78d743e080
	float Intensity;//[Offset: 0x5c, Size: 0x4] 0x78d743e100
	float Tightness;//[Offset: 0x60, Size: 0x4] 0x78d743e180
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1] 0x78d743e200
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1] 0x78d743e280
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64, Size: 0x1] 0x78d743e300
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x64, Size: 0x1] 0x78d743e380
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x64, Size: 0x1] 0x78d743e400

--------------------------------
Class: ParticleModuleVectorFieldRotation.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector MinInitialRotation;//[Offset: 0x2c, Size: 0xc] 0x78d743de00
	Vector MaxInitialRotation;//[Offset: 0x38, Size: 0xc] 0x78d743de80

--------------------------------
Class: ParticleModuleVectorFieldRotationRate.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector RotationRate;//[Offset: 0x2c, Size: 0xc] 0x78d743dd80

--------------------------------
Class: ParticleModuleVectorFieldScale.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScale;//[Offset: 0x30, Size: 0x8] 0x78d743dc80
	RawDistributionFloat VectorFieldScaleRaw;//[Offset: 0x38, Size: 0x30] 0x78d743dd00

--------------------------------
Class: ParticleModuleVectorFieldScaleOverLife.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScaleOverLife;//[Offset: 0x30, Size: 0x8] 0x78d743db80
	RawDistributionFloat VectorFieldScaleOverLifeRaw;//[Offset: 0x38, Size: 0x30] 0x78d743dc00

--------------------------------
Class: ParticleModuleVelocityBase.ParticleModule.Object
	bool bInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78d743da80
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x78d743db00

--------------------------------
Class: ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector StartVelocity;//[Offset: 0x30, Size: 0x48] 0x78d743d980
	RawDistributionFloat StartVelocityRadial;//[Offset: 0x78, Size: 0x30] 0x78d743da00

--------------------------------
Class: ParticleModuleVelocity_Seeded.ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xa8, Size: 0x20] 0x78d743d900

--------------------------------
Class: ParticleModuleVelocityCone.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionFloat Angle;//[Offset: 0x30, Size: 0x30] 0x78d743d780
	RawDistributionFloat Velocity;//[Offset: 0x60, Size: 0x30] 0x78d743d800
	Vector Direction;//[Offset: 0x90, Size: 0xc] 0x78d743d880

--------------------------------
Class: ParticleModuleVelocityInheritParent.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector Scale;//[Offset: 0x30, Size: 0x48] 0x78d743d700

--------------------------------
Class: ParticleModuleVelocityOverLifetime.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector VelOverLife;//[Offset: 0x30, Size: 0x48] 0x78d743f700
	bool Absolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78d743f780

--------------------------------
Class: ParticleSpriteEmitter.ParticleEmitter.Object

--------------------------------
Class: PathFollowingAgentInterface.Interface.Object

--------------------------------
Class: PawnNoiseEmitterComponent.ActorComponent.Object
	bool bAIPerceptionSystemCompatibilityMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x78d7440e80
	Vector LastRemoteNoisePosition;//[Offset: 0xbc, Size: 0xc] 0x78d7440f00
	float NoiseLifetime;//[Offset: 0xc8, Size: 0x4] 0x78d7440f80
	float LastRemoteNoiseVolume;//[Offset: 0xcc, Size: 0x4] 0x78d7441000
	float LastRemoteNoiseTime;//[Offset: 0xd0, Size: 0x4] 0x78d7441080
	float LastLocalNoiseVolume;//[Offset: 0xd4, Size: 0x4] 0x78d743f800
	float LastLocalNoiseTime;//[Offset: 0xd8, Size: 0x4] 0x78d743f880
	void MakeNoise(Actor* NoiseMaker, float Loudness, out const Vector NoiseLocation);// 0xc984b68 0x78d7414140

--------------------------------
Class: PhysicalAnimationComponent.ActorComponent.Object
	float StrengthMultiplyer;//[Offset: 0xb8, Size: 0x4] 0x78d7440700
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0xc0, Size: 0x8] 0x78d7440780
	void SetStrengthMultiplyer(float InStrengthMultiplyer);// 0xc98581c 0x78d7413c00
	void SetSkeletalMeshComponent(SkeletalMeshComponent* InSkeletalMeshComponent);// 0xc985b28 0x78d7413ce0
	Transform GetBodyTargetTransform(FName BodyName);// 0xc9855d0 0x78d7413dc0
	void ApplyPhysicalAnimationSettingsBelow(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData, bool bIncludeSelf);// 0xc9858c4 0x78d7413ea0
	void ApplyPhysicalAnimationSettings(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData);// 0xc985a1c 0x78d7413f80
	void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);// 0xc985690 0x78d7414060

--------------------------------
Class: RigidBodyBase.Actor.Object

--------------------------------
Class: PhysicsConstraintActor.RigidBodyBase.Actor.Object
	PhysicsConstraintComponent* ConstraintComp;//[Offset: 0x220, Size: 0x8] 0x78d7441e00
	Actor* ConstraintActor1;//[Offset: 0x228, Size: 0x8] 0x78d7441e80
	Actor* ConstraintActor2;//[Offset: 0x230, Size: 0x8] 0x78d7441f00
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1] 0x78d7441f80

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x208, Size: 0x8] 0x78d7443d00
	ConstrainComponentPropName ComponentName1;//[Offset: 0x210, Size: 0x8] 0x78d7443d80
	Actor* ConstraintActor2;//[Offset: 0x218, Size: 0x8] 0x78d7443e00
	ConstrainComponentPropName ComponentName2;//[Offset: 0x220, Size: 0x8] 0x78d7443e80
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x238, Size: 0x8] 0x78d7443f00
	delegate OnConstraintBroken;//[Offset: 0x240, Size: 0x10] 0x78d7443f80
	ConstraintInstance ConstraintInstance;//[Offset: 0x250, Size: 0x1c0] 0x78d7444000
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0xc98845c 0x78d7415800
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0xc9883ac 0x78d74158e0
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0xc987850 0x78d74159c0
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0xc987944 0x78d7415aa0
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0xc987a38 0x78d7415b80
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0xc987f04 0x78d7415c60
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0xc98864c 0x78d7415d40
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0xc987fb4 0x78d7415e20
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0xc988794 0x78d7415f00
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0xc987dc8 0x78d7415fe0
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0xc987484 0x78d74160c0
	void SetDisableCollision(bool bDisableCollision);// 0xc986ef0 0x78d74161a0
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0xc9870e4 0x78d7416280
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0xc986fa0 0x78d7416360
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0xc9871dc 0x78d7416440
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0xc9888f0 0x78d7416520
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0xc987c68 0x78d7416600
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0xc9881bc 0x78d74166e0
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0xc98810c 0x78d74167c0
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0xc9882b4 0x78d74168a0
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0xc987574 0x78d7416980
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0xc987668 0x78d7416a60
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0xc98775c 0x78d7416b40
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0xc987d18 0x78d7416c20
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0xc988554 0x78d7416d00
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0xc987b2c 0x78d7416de0
	void SetAngularDriveMode(byte DriveMode);// 0xc988064 0x78d7416ec0
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0xc987394 0x78d7416fa0
	bool IsBroken();// 0xc986dbc 0x78d7417080
	float GetCurrentTwist();// 0xc987360 0x78d7417160
	float GetCurrentSwing2();// 0xc9872f8 0x78d7417240
	float GetCurrentSwing1();// 0xc98732c 0x78d7417320
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0xc986df4 0x78d7413a40
	void BreakConstraint();// 0xc9888dc 0x78d7413b20

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 0x8] 0x78dbf0e200

--------------------------------
Class: PhysicsHandleComponent.ActorComponent.Object
	PrimitiveComponent* GrabbedComponent;//[Offset: 0xb8, Size: 0x8] 0x78d7444c80
	bool bSoftAngularConstraint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1] 0x78d7444d00
	bool bSoftLinearConstraint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc8, Size: 0x1] 0x78d7444d80
	bool bInterpolateTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc8, Size: 0x1] 0x78d7444e00
	float LinearDamping;//[Offset: 0xcc, Size: 0x4] 0x78d7444e80
	float LinearStiffness;//[Offset: 0xd0, Size: 0x4] 0x78d7444f00
	float AngularDamping;//[Offset: 0xd4, Size: 0x4] 0x78d7444f80
	float AngularStiffness;//[Offset: 0xd8, Size: 0x4] 0x78d7445000
	float InterpolationSpeed;//[Offset: 0x140, Size: 0x4] 0x78d7445080
	void SetTargetRotation(Rotator NewRotation);// 0xc98c338 0x78d7418580
	void SetTargetLocationAndRotation(Vector NewLocation, Rotator NewRotation);// 0xc98c248 0x78d7418660
	void SetTargetLocation(Vector NewLocation);// 0xc98c3e0 0x78d7418740
	void SetLinearStiffness(float NewLinearStiffness);// 0xc98bffc 0x78d7418820
	void SetLinearDamping(float NewLinearDamping);// 0xc98c0a4 0x78d7418900
	void SetInterpolationSpeed(float NewInterpolationSpeed);// 0xc98be04 0x78d74189e0
	void SetAngularStiffness(float NewAngularStiffness);// 0xc98beac 0x78d7418ac0
	void SetAngularDamping(float NewAngularDamping);// 0xc98bf54 0x78d7418ba0
	void ReleaseComponent();// 0xc98c4bc 0x78d7418c80
	void GrabComponentAtLocationWithRotation(PrimitiveComponent* Component, FName InBoneName, Vector Location, Rotator Rotation);// 0xc98c4d8 0x78d7418d60
	void GrabComponentAtLocation(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation);// 0xc98c658 0x78d7418e40
	void GrabComponent(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation, bool bConstrainRotation);// 0xc98c790 0x78d7418f20
	void GetTargetLocationAndRotation(out Vector TargetLocation, out Rotator TargetRotation);// 0xc98c14c 0x78d7419000
	PrimitiveComponent* GetGrabbedComponent();// 0xc98c488 0x78d7415720

--------------------------------
Class: PhysicsSpringComponent.SceneComponent.ActorComponent.Object
	float SpringStiffness;//[Offset: 0x204, Size: 0x4] 0x78d7445c00
	float SpringDamping;//[Offset: 0x208, Size: 0x4] 0x78d7445c80
	float SpringLengthAtRest;//[Offset: 0x20c, Size: 0x4] 0x78d7445d00
	float SpringRadius;//[Offset: 0x210, Size: 0x4] 0x78d7445d80
	byte SpringChannel;//[Offset: 0x214, Size: 0x1] 0x78d7445e00
	bool bIgnoreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x215, Size: 0x1] 0x78d7445e80
	float SpringCompression;//[Offset: 0x218, Size: 0x4] 0x78d7445f00
	Vector GetSpringRestingPoint();// 0xc98d518 0x78d7418200
	Vector GetSpringDirection();// 0xc98d4a8 0x78d74182e0
	Vector GetSpringCurrentEndPoint();// 0xc98d4e0 0x78d74183c0
	float GetNormalizedCompressionScalar();// 0xc98d550 0x78d74184a0

--------------------------------
Class: PhysicsThruster.RigidBodyBase.Actor.Object
	PhysicsThrusterComponent* ThrusterComponent;//[Offset: 0x220, Size: 0x8] 0x78d7445b80

--------------------------------
Class: PhysicsThrusterComponent.SceneComponent.ActorComponent.Object
	float ThrustStrength;//[Offset: 0x204, Size: 0x4] 0x78d7445b00

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x220, Size: 0x8] 0x78dc018800
	SceneComponent* SceneComponent;//[Offset: 0x228, Size: 0x8] 0x78dc018880

--------------------------------
Class: PlanarReflection.SceneCapture.Actor.Object
	PlanarReflectionComponent* PlanarReflectionComponent;//[Offset: 0x230, Size: 0x8] 0x78d7445980
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x78d7445a00
	void OnInterpToggle(bool bEnable);// 0xc98de68 0x78d7418120

--------------------------------
Class: PlanarReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x2b8, Size: 0x8] 0x78d7447380
	float NormalDistortionStrength;//[Offset: 0x2c0, Size: 0x4] 0x78d7445300
	float PrefilterRoughness;//[Offset: 0x2c4, Size: 0x4] 0x78d7445380
	float PrefilterRoughnessDistance;//[Offset: 0x2c8, Size: 0x4] 0x78d7445400
	int ScreenPercentage;//[Offset: 0x2cc, Size: 0x4] 0x78d7445480
	float ExtraFOV;//[Offset: 0x2d0, Size: 0x4] 0x78d7445500
	float DistanceFromPlaneFadeStart;//[Offset: 0x2d4, Size: 0x4] 0x78d7445580
	float DistanceFromPlaneFadeEnd;//[Offset: 0x2d8, Size: 0x4] 0x78d7445600
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x2dc, Size: 0x4] 0x78d7445680
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x2e0, Size: 0x4] 0x78d7445700
	float AngleFromPlaneFadeStart;//[Offset: 0x2e4, Size: 0x4] 0x78d7445780
	float AngleFromPlaneFadeEnd;//[Offset: 0x2e8, Size: 0x4] 0x78d7445800
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1] 0x78d7445880
	bool bRenderSceneTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 0x1] 0x78d7445900

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x201, Size: 0x1] 0x78dbff6000
	byte CaptureSource;//[Offset: 0x202, Size: 0x1] 0x78dc019300
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x203, Size: 0x1] 0x78dc019380
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x203, Size: 0x1] 0x78dc019400
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 0x1] 0x78dc019480
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x208, Size: 0x10] 0x78dbff60a0
	Actor*[] HiddenActors;//[Offset: 0x218, Size: 0x10] 0x78dbff6140
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x228, Size: 0x10] 0x78dbff61e0
	Actor*[] ShowOnlyActors;//[Offset: 0x238, Size: 0x10] 0x78dbff6280
	float LODDistanceFactor;//[Offset: 0x248, Size: 0x4] 0x78dc017600
	float MaxViewDistanceOverride;//[Offset: 0x24c, Size: 0x4] 0x78dc017680
	int CaptureSortPriority;//[Offset: 0x250, Size: 0x4] 0x78dc017700
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1] 0x78dc017780
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x258, Size: 0x10] 0x78dbff6320
	FString ProfilingEventName;//[Offset: 0x298, Size: 0x10] 0x78dc017880
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0xc9cce38 0x78dc0236c0
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0xc9ccd3c 0x78dc0237a0
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0xc9ccac8 0x78dc023880
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0xc9ccc94 0x78dc023960
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0xc9ccb98 0x78dc020080
	void HideComponent(PrimitiveComponent* InComponent);// 0xc9ccfdc 0x78dc020160
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0xc9ccee0 0x78dc020240
	void ClearShowOnlyComponents();// 0xc9ccb84 0x78dc020320
	void ClearHiddenComponents();// 0xc9ccb70 0x78dc020400

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10] 0x78dbf60e80
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78dbf60f00

--------------------------------
Class: PlaneReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: PlaneReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadiusScale;//[Offset: 0x280, Size: 0x4] 0x78d7447200
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x288, Size: 0x8] 0x78d7447280
	BoxComponent* PreviewCaptureBox;//[Offset: 0x290, Size: 0x8] 0x78d7447300

--------------------------------
Class: PlatformEventsComponent.ActorComponent.Object
	delegate PlatformChangedToLaptopModeDelegate;//[Offset: 0xb8, Size: 0x10] 0x78d3567000
	delegate PlatformChangedToTabletModeDelegate;//[Offset: 0xc8, Size: 0x10] 0x78d3567080
	bool SupportsConvertibleLaptops();// 0xc98e7c8 0x78cd8e6a60
	void PlatformEventDelegate__DelegateSignature();// 0xaa7cd18 0x78cd8e6b40
	bool IsInTabletMode();// 0xc98e800 0x78cd8e6c20
	bool IsInLaptopMode();// 0xc98e838 0x78cd8e6d00

--------------------------------
Class: PlatformInterfaceWebResponse.Object
	FString OriginalURL;//[Offset: 0x28, Size: 0x10] 0x78d7446c80
	int ResponseCode;//[Offset: 0x38, Size: 0x4] 0x78d7446d00
	int Tag;//[Offset: 0x3c, Size: 0x4] 0x78d7446d80
	FString StringResponse;//[Offset: 0x40, Size: 0x10] 0x78d7446e00
	byte[] BinaryResponse;//[Offset: 0x50, Size: 0x10] 0x78d7339520
	int GetNumHeaders();// 0xc98f2a0 0x78d7417e80
	FString GetHeaderValue(FString HeaderName);// 0xc98efa0 0x78d7417f60
	void GetHeader(int HeaderIndex, out FString Header, out FString Value);// 0xc98f0e8 0x78d7418040

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x244, Size: 0x8] 0x78d7446880

--------------------------------
Class: PlayerStartPIE.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: PluginCommandlet.Commandlet.Object

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x230, Size: 0x8] 0x78d7447f80
	void SetRadius(float NewRadius);// 0xc9a7094 0x78d741ab20
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0xc9a6fec 0x78d741ac00

--------------------------------
Class: Polys.Object

--------------------------------
Class: PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetBoneTransformByName(FName BoneName, out const Transform InTransform, byte BoneSpace);// 0xc9a8618 0x78d70f4840
	void SetBoneScaleByName(FName BoneName, Vector InScale3D, byte BoneSpace);// 0xc9a8264 0x78d70f4920
	void SetBoneRotationByName(FName BoneName, Rotator InRotation, byte BoneSpace);// 0xc9a83a0 0x78d70f4a00
	void SetBoneLocationByName(FName BoneName, Vector InLocation, byte BoneSpace);// 0xc9a84dc 0x78d70f4ae0
	void ResetBoneTransformByName(FName BoneName);// 0xc9a7db0 0x78d70f4bc0
	Transform GetBoneTransformByName(FName BoneName, byte BoneSpace);// 0xc9a8158 0x78d70f4ca0
	Vector GetBoneScaleByName(FName BoneName, byte BoneSpace);// 0xc9a7e58 0x78d70f4d80
	Rotator GetBoneRotationByName(FName BoneName, byte BoneSpace);// 0xc9a7f58 0x78d70f4e60
	Vector GetBoneLocationByName(FName BoneName, byte BoneSpace);// 0xc9a8058 0x78d70f4f40
	void CopyPoseFromSkeletalComponent(SkeletalMeshComponent* InComponentToCopy);// 0xc9a7d08 0x78d70f5020

--------------------------------
Class: PoseAsset.AnimationAsset.Object
	PoseDataContainer PoseContainer;//[Offset: 0x88, Size: 0x90] 0x78d7447900
	bool bAdditivePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x78d7447980
	int BasePoseIndex;//[Offset: 0x11c, Size: 0x4] 0x78d7447a00
	FName RetargetSource;//[Offset: 0x120, Size: 0x8] 0x78d7447a80

--------------------------------
Class: PoseDataContainer
	SmartName[] PoseNames;//[Offset: 0x0, Size: 0x10] 0x78dbf225e0
	FName[] Tracks;//[Offset: 0x10, Size: 0x10] 0x78dbf22680
	<FName,int> TrackMap;//[Offset: 0x20, Size: 0x50] 0x78dbefdfc0
	PoseData[] Poses;//[Offset: 0x70, Size: 0x10] 0x78dbf22860
	AnimCurveBase[] Curves;//[Offset: 0x80, Size: 0x10] 0x78dbf22900

--------------------------------
Class: PoseData
	Transform[] LocalSpacePose;//[Offset: 0x0, Size: 0x10] 0x78dbf22720
	<int,int> TrackToBufferIndex;//[Offset: 0x10, Size: 0x50] 0x78dbefe080
	float[] CurveData;//[Offset: 0x60, Size: 0x10] 0x78dbf227c0

--------------------------------
Class: PoseWatch.Object
	EdGraphNode* Node;//[Offset: 0x28, Size: 0x8] 0x78d7447800
	Color PoseWatchColour;//[Offset: 0x30, Size: 0x4] 0x78d7447880

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x210, Size: 0x550] 0x78d7447400
	float Priority;//[Offset: 0x760, Size: 0x4] 0x78d7447480
	float BlendRadius;//[Offset: 0x764, Size: 0x4] 0x78d7447500
	float BlendWeight;//[Offset: 0x768, Size: 0x4] 0x78d7447580
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76c, Size: 0x1] 0x78d7447600
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76c, Size: 0x1] 0x78d7447680
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0xc9a931c 0x78d741a6c0

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x260, Size: 0x550] 0x78d7449100
	float Priority;//[Offset: 0x7b0, Size: 0x4] 0x78d7449180
	float BlendRadius;//[Offset: 0x7b4, Size: 0x4] 0x78d7449200
	float BlendWeight;//[Offset: 0x7b8, Size: 0x4] 0x78d7449280
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7bc, Size: 0x1] 0x78d7449300
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7bc, Size: 0x1] 0x78d7449380
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0xc9a986c 0x78d741a5e0

--------------------------------
Class: PrecomputedVisibilityOverrideVolume.Volume.Brush.Actor.Object
	Actor*[] OverrideVisibleActors;//[Offset: 0x258, Size: 0x10] 0x78d7339160
	Actor*[] OverrideInvisibleActors;//[Offset: 0x268, Size: 0x10] 0x78d7339200
	FName[] OverrideInvisibleLevels;//[Offset: 0x278, Size: 0x10] 0x78d73392a0

--------------------------------
Class: PrecomputedVisibilityVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PreviewCollectionInterface.Interface.Object

--------------------------------
Class: PreviewMeshCollection.DataAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8] 0x78d7448e80
	PreviewMeshCollectionEntry[] SkeletalMeshes;//[Offset: 0x40, Size: 0x10] 0x78d73390c0

--------------------------------
Class: PreviewMeshCollectionEntry
	SkeletalMesh* SkeletalMesh;//[Offset: 0x0, Size: 0x28] 0x78dbf3c100

--------------------------------
Class: PrimaryAssetLabel.PrimaryDataAsset.DataAsset.Object
	PrimaryAssetRules Rules;//[Offset: 0x30, Size: 0xc] 0x78d71d0580
	bool bLabelAssetsInMyDirectory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78d71d0600
	bool bIsRuntimeLabel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78d71d0680
	Object*[] ExplicitAssets;//[Offset: 0x40, Size: 0x10] 0x78d7152c20
	class Object[] ExplicitBlueprints;//[Offset: 0x50, Size: 0x10] 0x78d7152d60
	CollectionReference AssetCollection;//[Offset: 0x60, Size: 0x8] 0x78d71d0780

--------------------------------
Class: CollectionReference
	FName CollectionName;//[Offset: 0x0, Size: 0x8] 0x78dbf0e400

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf4, Size: 0x4] 0x78d3568b80
	float MaxSpeed;//[Offset: 0xf8, Size: 0x4] 0x78d3568c00
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1] 0x78d3568c80
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 0x1] 0x78d3568d00
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfc, Size: 0x1] 0x78d3568d80
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfc, Size: 0x1] 0x78d3568e00
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfc, Size: 0x1] 0x78d3568e80
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfc, Size: 0x1] 0x78d3568f00
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfc, Size: 0x1] 0x78d3568f80
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xfc, Size: 0x1] 0x78d3569000
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfd, Size: 0x1] 0x78d3569080
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfd, Size: 0x1] 0x78d3569100
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfd, Size: 0x1] 0x78d3569180
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfd, Size: 0x1] 0x78d3569200
	float PreviousHitTime;//[Offset: 0x100, Size: 0x4] 0x78d3569280
	Vector PreviousHitNormal;//[Offset: 0x104, Size: 0xc] 0x78d3569300
	float ProjectileGravityScale;//[Offset: 0x110, Size: 0x4] 0x78d3569380
	float Buoyancy;//[Offset: 0x114, Size: 0x4] 0x78d3569400
	float Bounciness;//[Offset: 0x118, Size: 0x4] 0x78d3569480
	float Friction;//[Offset: 0x11c, Size: 0x4] 0x78d3567400
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x120, Size: 0x4] 0x78d3567480
	float MinFrictionFraction;//[Offset: 0x124, Size: 0x4] 0x78d3567500
	delegate OnProjectileBounce;//[Offset: 0x128, Size: 0x10] 0x78d3567580
	delegate OnProjectileStop;//[Offset: 0x138, Size: 0x10] 0x78d3567600
	float HomingAccelerationMagnitude;//[Offset: 0x148, Size: 0x4] 0x78d3567680
	SceneComponent* HomingTargetComponent;//[Offset: 0x14c, Size: 0x8] 0x78d3567700
	float MaxSimulationTimeStep;//[Offset: 0x154, Size: 0x4] 0x78d3567780
	int MaxSimulationIterations;//[Offset: 0x158, Size: 0x4] 0x78d3567800
	int BounceAdditionalIterations;//[Offset: 0x15c, Size: 0x4] 0x78d3567880
	float InterpLocationTime;//[Offset: 0x160, Size: 0x4] 0x78d3567900
	float InterpRotationTime;//[Offset: 0x164, Size: 0x4] 0x78d3567980
	float InterpLocationMaxLagDistance;//[Offset: 0x168, Size: 0x4] 0x78d3567a00
	float InterpLocationSnapToTargetDistance;//[Offset: 0x16c, Size: 0x4] 0x78d3567a80
	void StopSimulating(out const HitResult HitResult);// 0xc9baac0 0x78cd8e8ba0
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0xc9bab98 0x78cd8e8c80
	void SetInterpolatedComponent(SceneComponent* Component);// 0xc9baa10 0x78cd8e8d60
	void ResetInterpolation();// 0xc9ba8f0 0x78cd8e8e40
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0xaa7cd18 0x78cd8e8f20
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0xaa7cd18 0x78cd8e9000
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0xc9ba90c 0x78cd8e5720
	Vector LimitVelocity(Vector NewVelocity);// 0xc9ba810 0x78cd8e5800
	bool IsVelocityUnderSimulationThreshold();// 0xc9bac48 0x78cd8e58e0
	bool IsInterpolationComplete();// 0xc9ba8c4 0x78cd8e59c0

--------------------------------
Class: ProxyLODMeshSimplificationSettings.DeveloperSettings.Object
	FName ProxyLODMeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x78d7448e00

--------------------------------
Class: RadialForceActor.RigidBodyBase.Actor.Object
	RadialForceComponent* ForceComponent;//[Offset: 0x220, Size: 0x8] 0x78d7448d80
	void ToggleForce();// 0xc9bbbb8 0x78d741a260
	void FireImpulse();// 0xc9bbc0c 0x78d741a340
	void EnableForce();// 0xc9bbbf0 0x78d741a420
	void DisableForce();// 0xc9bbbd4 0x78d741a500

--------------------------------
Class: RadialForceComponent.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x204, Size: 0x4] 0x78d7448880
	byte Falloff;//[Offset: 0x208, Size: 0x1] 0x78d7448900
	float ImpulseStrength;//[Offset: 0x20c, Size: 0x4] 0x78d7448980
	bool bImpulseVelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1] 0x78d7448a00
	bool bIgnoreOwningActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1] 0x78d7448a80
	float ForceStrength;//[Offset: 0x214, Size: 0x4] 0x78d7448b00
	float DestructibleDamage;//[Offset: 0x218, Size: 0x4] 0x78d7448b80
	byte[] ObjectTypesToAffect;//[Offset: 0x220, Size: 0x10] 0x78d733b960
	void RemoveObjectTypeToAffect(byte ObjectType);// 0xc9bbff4 0x78d7419fc0
	void FireImpulse();// 0xc9bc154 0x78d741a0a0
	void AddObjectTypeToAffect(byte ObjectType);// 0xc9bc0a4 0x78d741a180

--------------------------------
Class: RectLight.Light.Actor.Object
	RectLightComponent* RectLightComponent;//[Offset: 0x230, Size: 0x8] 0x78d7448800

--------------------------------
Class: RectLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float SourceWidth;//[Offset: 0x340, Size: 0x4] 0x78d744a400
	float SourceHeight;//[Offset: 0x344, Size: 0x4] 0x78d744a480
	float BarnDoorAngle;//[Offset: 0x348, Size: 0x4] 0x78d744a500
	float BarnDoorLength;//[Offset: 0x34c, Size: 0x4] 0x78d7448480
	Texture* SourceTexture;//[Offset: 0x350, Size: 0x8] 0x78d7448500
	void SetSourceWidth(float bNewValue);// 0xc9bcafc 0x78d7419b60
	void SetSourceTexture(Texture* bNewValue);// 0xc9bcba4 0x78d7419c40
	void SetSourceHeight(float NewValue);// 0xc9bca54 0x78d7419d20
	void SetBarnDoorLength(float NewValue);// 0xc9bc904 0x78d7419e00
	void SetBarnDoorAngle(float NewValue);// 0xc9bc9ac 0x78d7419ee0

--------------------------------
Class: RendererSettings.DeveloperSettings.Object
	bool bMobileDisableLandscapeLodMorph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78d744cc80
	bool bMobileDisableVertexFog;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78d744cd00
	bool bMobileUseFastBloom;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x78d744cd80
	int MaxMobileCascades;//[Offset: 0x3c, Size: 0x4] 0x78d744ce00
	byte MobileMSAASampleCount;//[Offset: 0x40, Size: 0x1] 0x78d744ce80
	bool bDisableBakedLightMapDirectonality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x78d744cf00
	bool bMobileAllowDitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1] 0x78d744cf80
	bool bMobileAllowSoftwareOcclusionCulling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 0x1] 0x78d744d000
	bool bMobileVirtualTextures;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 0x1] 0x78d744d080
	bool bDiscardUnusedQualityLevels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41, Size: 0x1] 0x78d744d100
	bool bOcclusionCulling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x41, Size: 0x1] 0x78d744d180
	bool bMobileOcclusionCulling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x41, Size: 0x1] 0x78d744d200
	float MinScreenRadiusForLights;//[Offset: 0x44, Size: 0x4] 0x78d744d280
	float MinScreenRadiusForEarlyZPass;//[Offset: 0x48, Size: 0x4] 0x78d744d300
	float MinScreenRadiusForCSMdepth;//[Offset: 0x4c, Size: 0x4] 0x78d744d380
	bool bPrecomputedVisibilityWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78d744d400
	bool bTextureStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x78d744d480
	bool bUseDXT5NormalMaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1] 0x78d744d500
	bool bVirtualTextures;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1] 0x78d744d580
	bool bVirtualTexturedLightmaps;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x50, Size: 0x1] 0x78d744d600
	uint32 VirtualTextureTileSize;//[Offset: 0x54, Size: 0x4] 0x78d744d680
	uint32 VirtualTextureTileBorderSize;//[Offset: 0x58, Size: 0x4] 0x78d744b600
	uint32 VirtualTextureFeedbackFactor;//[Offset: 0x5c, Size: 0x4] 0x78d744b680
	bool bVirtualTextureEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78d744b700
	bool bVirtualTextureEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x78d744b780
	bool bClearCoatEnableSecondNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x78d744b800
	int ReflectionCaptureResolution;//[Offset: 0x64, Size: 0x4] 0x78d744b880
	bool bReflectionCaptureCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78d744b900
	bool ReflectionEnvironmentLightmapMixBasedOnRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x78d744b980
	bool bForwardShading;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x78d744ba00
	bool bVertexFoggingForOpaque;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x78d744ba80
	bool bAllowStaticLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x78d744bb00
	bool bUseNormalMapsForStaticLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x78d744bb80
	bool bGenerateMeshDistanceFields;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x78d744bc00
	bool bEightBitMeshDistanceFields;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1] 0x78d744bc80
	bool bGenerateLandscapeGIData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x78d744bd00
	bool bCompressMeshDistanceFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x69, Size: 0x1] 0x78d744bd80
	float TessellationAdaptivePixelsPerTriangle;//[Offset: 0x6c, Size: 0x4] 0x78d744be00
	bool bSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78d744be80
	byte TranslucentSortPolicy;//[Offset: 0x71, Size: 0x1] 0x78d744bf00
	Vector TranslucentSortAxis;//[Offset: 0x74, Size: 0xc] 0x78d744bf80
	byte CustomDepthStencil;//[Offset: 0x80, Size: 0x1] 0x78d744c000
	bool bCustomDepthTaaJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1] 0x78d744c080
	byte bEnableAlphaChannelInPostProcessing;//[Offset: 0x82, Size: 0x1] 0x78d744c100
	bool bDefaultFeatureBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83, Size: 0x1] 0x78d744c180
	bool bDefaultFeatureAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83, Size: 0x1] 0x78d744c200
	bool bDefaultFeatureAmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83, Size: 0x1] 0x78d744c280
	bool bDefaultFeatureAutoExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x83, Size: 0x1] 0x78d744c300
	byte DefaultFeatureAutoExposure;//[Offset: 0x84, Size: 0x1] 0x78d744c380
	float DefaultFeatureAutoExposureBias;//[Offset: 0x88, Size: 0x4] 0x78d744c400
	bool bExtendDefaultLuminanceRangeInAutoExposureSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x78d744c480
	bool bUsePreExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x78d744c500
	bool bEnablePreExposureOnlyInTheEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c, Size: 0x1] 0x78d744c580
	bool bDefaultFeatureMotionBlur;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c, Size: 0x1] 0x78d744c600
	bool bDefaultFeatureLensFlare;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c, Size: 0x1] 0x78d744a580
	bool bTemporalUpsampling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c, Size: 0x1] 0x78d744a600
	bool bSSGI;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c, Size: 0x1] 0x78d744a680
	byte DefaultFeatureAntiAliasing;//[Offset: 0x8d, Size: 0x1] 0x78d744a700
	enum DefaultLightUnits;//[Offset: 0x8e, Size: 0x1] 0x78d733b820
	byte DefaultBackBufferPixelFormat;//[Offset: 0x8f, Size: 0x1] 0x78d744a800
	bool bRenderUnbuiltPreviewShadowsInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x78d744a880
	bool bStencilForLODDither;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x78d744a900
	byte EarlyZPass;//[Offset: 0x91, Size: 0x1] 0x78d744a980
	bool bEarlyZPassOnlyMaterialMasking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x92, Size: 0x1] 0x78d744aa00
	bool bDBuffer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x92, Size: 0x1] 0x78d744aa80
	byte ClearSceneMethod;//[Offset: 0x93, Size: 0x1] 0x78d744ab00
	bool bBasePassOutputsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1] 0x78d744ab80
	bool bVertexDeformationOutputsVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1] 0x78d744ac00
	bool bSelectiveBasePassOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 0x1] 0x78d744ac80
	bool bDefaultParticleCutouts;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x94, Size: 0x1] 0x78d744ad00
	int GPUSimulationTextureSizeX;//[Offset: 0x98, Size: 0x4] 0x78d744ad80
	int GPUSimulationTextureSizeY;//[Offset: 0x9c, Size: 0x4] 0x78d744ae00
	bool bGlobalClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78d744ae80
	byte GBufferFormat;//[Offset: 0xa1, Size: 0x1] 0x78d744af00
	bool bUseGPUMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2, Size: 0x1] 0x78d744af80
	bool bNvidiaAftermathEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 0x1] 0x78d744b000
	bool bMultiView;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa2, Size: 0x1] 0x78d744b080
	bool bMobilePostProcessing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa2, Size: 0x1] 0x78d744b100
	bool bMobileMultiView;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa2, Size: 0x1] 0x78d744b180
	bool bMobileUseHWsRGBEncoding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa2, Size: 0x1] 0x78d744b200
	bool bRoundRobinOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa2, Size: 0x1] 0x78d744b280
	bool bODSCapture;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa2, Size: 0x1] 0x78d744b300
	bool bMeshStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa3, Size: 0x1] 0x78d744b380
	float WireframeCullThreshold;//[Offset: 0xa4, Size: 0x4] 0x78d744b400
	bool bEnableRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78d744b480
	bool bEnableRayTracingTextureLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1] 0x78d744b500
	bool bSupportStationarySkylight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8, Size: 0x1] 0x78d744b580
	bool bSupportLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa8, Size: 0x1] 0x78d7449500
	bool bSupportPointLightWholeSceneShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa8, Size: 0x1] 0x78d7449580
	bool bSupportAtmosphericFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa8, Size: 0x1] 0x78d7449600
	bool bSupportSkyAtmosphere;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa8, Size: 0x1] 0x78d7449680
	bool bSupportSkyAtmosphereAffectsHeightFog;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa8, Size: 0x1] 0x78d7449700
	bool bSupportSkinCacheShaders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9, Size: 0x1] 0x78d7449780
	enum DefaultSkinCacheBehavior;//[Offset: 0xaa, Size: 0x1] 0x78d733b8c0
	float SkinCacheSceneMemoryLimitInMB;//[Offset: 0xac, Size: 0x4] 0x78d7449880
	bool bMobileEnableStaticAndCSMShadowReceivers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78d7449900
	bool bMobileEnableMovableLightCSMShaderCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x78d7449980
	bool bMobileAllowDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1] 0x78d7449a00
	bool bMobileAllowMovableDirectionalLights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1] 0x78d7449a80
	uint32 MobileNumDynamicPointLights;//[Offset: 0xb4, Size: 0x4] 0x78d7449b00
	bool bMobileDynamicPointLightsUseStaticBranch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x78d7449b80
	bool bMobileAllowMovableSpotlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1] 0x78d7449c00
	bool bMobileAllowMovableSpotlightShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 0x1] 0x78d7449c80
	bool bSupport16BitBoneIndex;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb8, Size: 0x1] 0x78d7449d00
	bool bGPUSkinLimit2BoneInfluences;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb8, Size: 0x1] 0x78d7449d80
	bool bSupportDepthOnlyIndexBuffers;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb8, Size: 0x1] 0x78d7449e00
	bool bSupportReversedIndexBuffers;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb8, Size: 0x1] 0x78d7449e80
	bool bLPV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb8, Size: 0x1] 0x78d7449f00
	bool bMobileAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb9, Size: 0x1] 0x78d7449f80
	bool bUseUnlimitedBoneInfluences;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb9, Size: 0x1] 0x78d744a000
	int UnlimitedBonInfluencesThreshold;//[Offset: 0xbc, Size: 0x4] 0x78d744a080
	byte MobilePlanarReflectionMode;//[Offset: 0xc0, Size: 0x1] 0x78d744a100
	PerPlatformBool bStreamSkeletalMeshLODs;//[Offset: 0xc1, Size: 0x1] 0x78d744a180
	PerPlatformBool bDiscardSkeletalMeshOptionalLODs;//[Offset: 0xc2, Size: 0x1] 0x78d744a200
	SoftObjectPath VisualizeCalibrationColorMaterialPath;//[Offset: 0xc8, Size: 0x18] 0x78d744a280
	SoftObjectPath VisualizeCalibrationCustomMaterialPath;//[Offset: 0xe0, Size: 0x18] 0x78d744a300
	SoftObjectPath VisualizeCalibrationGrayscaleMaterialPath;//[Offset: 0xf8, Size: 0x18] 0x78d744a380

--------------------------------
Class: RendererOverrideSettings.DeveloperSettings.Object
	bool bSupportAllShaderPermutations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78d744cb80
	bool bForceRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78d744cc00

--------------------------------
Class: ReplayNetConnection.NetConnection.Player.Object

--------------------------------
Class: ReplaySubsystem.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: ReplicationConnectionDriver.Object

--------------------------------
Class: Rig.Object
	TransformBase[] TransformBases;//[Offset: 0x30, Size: 0x10] 0x78d733b6e0
	Node[] Nodes;//[Offset: 0x40, Size: 0x10] 0x78d733b780

--------------------------------
Class: TransformBase
	FName Node;//[Offset: 0x0, Size: 0x8] 0x78dbf3d380
	TransformBaseConstraint Constraints;//[Offset: 0x8, Size: 0x10] 0x78dbf3d600

--------------------------------
Class: TransformBaseConstraint
	RigTransformConstraint[] TransformConstraints;//[Offset: 0x0, Size: 0x10] 0x78dbf22180

--------------------------------
Class: RigTransformConstraint
	byte TranformType;//[Offset: 0x0, Size: 0x1] 0x78dbf3d400
	FName ParentSpace;//[Offset: 0x4, Size: 0x8] 0x78dbf3d480
	float Weight;//[Offset: 0xc, Size: 0x4] 0x78dbf3d500

--------------------------------
Class: Node
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbf3d100
	FName ParentName;//[Offset: 0x8, Size: 0x8] 0x78dbf3d180
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x78dbf3d200
	FString DisplayName;//[Offset: 0x40, Size: 0x10] 0x78dbf3d280
	bool bAdvanced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78dbf3d300

--------------------------------
Class: RotatingMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationRate;//[Offset: 0xf4, Size: 0xc] 0x78d744e300
	Vector PivotTranslation;//[Offset: 0x100, Size: 0xc] 0x78d744e380
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10c, Size: 0x1] 0x78d744e400

--------------------------------
Class: RuntimeOptionsBase.Object

--------------------------------
Class: RuntimeVirtualTextureComponent.SceneComponent.ActorComponent.Object
	Actor* BoundsAlignActor;//[Offset: 0x208, Size: 0x28] 0x78d744f380
	bool bSetBoundsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x78d744f400
	bool bSnapBoundsToLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1] 0x78d744f480
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x238, Size: 0x8] 0x78d744f500
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1] 0x78d744f580
	uint32 ScalabilityGroup;//[Offset: 0x244, Size: 0x4] 0x78d744f600
	bool bHidePrimitives;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x78d744f680
	VirtualTextureBuilder* StreamingTexture;//[Offset: 0x250, Size: 0x8] 0x78d744f700
	int StreamLowMips;//[Offset: 0x258, Size: 0x4] 0x78d744f780
	bool bBuildStreamingMipsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1] 0x78d744d700
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1] 0x78d744d780
	bool bUseStreamingLowMipsInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 0x1] 0x78d744d800
	bool bBuildDebugStreamingMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f, Size: 0x1] 0x78d744d880
	void Invalidate(out const BoxSphereBounds WorldBounds);// 0xc9c3380 0x78d7419620

--------------------------------
Class: VirtualTextureBuilder.Object
	VirtualTexture2D* Texture;//[Offset: 0x28, Size: 0x8] 0x78d7477100
	uint64 BuildHash;//[Offset: 0x30, Size: 0x8] 0x78d7477180

--------------------------------
Class: VirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0x100, Size: 0xc] 0x78d7477200
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x78d7477280
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1] 0x78d7477300

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4] 0x78dbf70780
	int TileBorderSize;//[Offset: 0x4, Size: 0x4] 0x78dbf70800
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78dbf70880
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x78dbf70900

--------------------------------
Class: RuntimeVirtualTextureVolume.Actor.Object
	RuntimeVirtualTextureComponent* VirtualTextureComponent;//[Offset: 0x220, Size: 0x8] 0x78d744f300

--------------------------------
Class: RVOAvoidanceInterface.Interface.Object

--------------------------------
Class: Scene.Object

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x230, Size: 0x8] 0x78dc018700
	void OnInterpToggle(bool bEnable);// 0xc9cc4e4 0x78dc023420

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2b8, Size: 0x1] 0x78dc018900
	float FOVAngle;//[Offset: 0x2bc, Size: 0x4] 0x78dc018980
	float OrthoWidth;//[Offset: 0x2c0, Size: 0x4] 0x78dc018a00
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2c8, Size: 0x8] 0x78dc018a80
	byte CompositeMode;//[Offset: 0x2d0, Size: 0x1] 0x78dc018b00
	PostProcessSettings PostProcessSettings;//[Offset: 0x2e0, Size: 0x550] 0x78dc018b80
	float PostProcessBlendWeight;//[Offset: 0x830, Size: 0x4] 0x78dc018c00
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x834, Size: 0x1] 0x78dc018c80
	float CustomNearClippingPlane;//[Offset: 0x838, Size: 0x4] 0x78dc018d00
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83c, Size: 0x1] 0x78dc018d80
	Matrix CustomProjectionMatrix;//[Offset: 0x840, Size: 0x40] 0x78dc018e00
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1] 0x78dc018e80
	Vector ClipPlaneBase;//[Offset: 0x884, Size: 0xc] 0x78dc018f00
	Vector ClipPlaneNormal;//[Offset: 0x890, Size: 0xc] 0x78dc018f80
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89c, Size: 0x1] 0x78dc019000
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89c, Size: 0x1] 0x78dc019080
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89d, Size: 0x1] 0x78dc019100
	void CaptureScene();// 0xc9cd5c0 0x78dc023500
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0xc9cd5d4 0x78dc0235e0

--------------------------------
Class: SceneCaptureComponentCube.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	TextureRenderTargetCube* TextureTarget;//[Offset: 0x2b8, Size: 0x8] 0x78d744f000
	bool bCaptureRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x78d744f080
	TextureRenderTargetCube* TextureTargetLeft;//[Offset: 0x2c8, Size: 0x8] 0x78d744f100
	TextureRenderTargetCube* TextureTargetRight;//[Offset: 0x2d0, Size: 0x8] 0x78d744f180
	TextureRenderTarget2D* TextureTargetODS;//[Offset: 0x2d8, Size: 0x8] 0x78d744f200
	float IPD;//[Offset: 0x2e0, Size: 0x4] 0x78d744f280
	void CaptureScene();// 0xc9cda24 0x78d7419540

--------------------------------
Class: TextureRenderTargetCube.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe0, Size: 0x4] 0x78d7473000
	LinearColor ClearColor;//[Offset: 0xe4, Size: 0x10] 0x78d7473080
	byte OverrideFormat;//[Offset: 0xf4, Size: 0x1] 0x78d7473100
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf5, Size: 0x1] 0x78d7473180
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf5, Size: 0x1] 0x78d7471100

--------------------------------
Class: SceneCaptureCube.SceneCapture.Actor.Object
	SceneCaptureComponentCube* CaptureComponentCube;//[Offset: 0x230, Size: 0x8] 0x78d744ef00
	void OnInterpToggle(bool bEnable);// 0xc9cddec 0x78d7419460

--------------------------------
Class: Selection.Object

--------------------------------
Class: ShadowMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	byte ShadowmapFlags;//[Offset: 0x100, Size: 0x1] 0x78d7450280

--------------------------------
Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78d7452600
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x78d7452680
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x230, Size: 0x8] 0x78d7452700
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x238, Size: 0x8] 0x78d7452780
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x240, Size: 0x8] 0x78d7452800
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x248, Size: 0x8] 0x78d7452880
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x250, Size: 0x8] 0x78d7452900
	void OnRep_ReplicatedPhysAsset();// 0xc9dc608 0x78d741bf40
	void OnRep_ReplicatedMesh();// 0xc9dc624 0x78d741c020
	void OnRep_ReplicatedMaterial1();// 0xc9dc5d0 0x78d741c100
	void OnRep_ReplicatedMaterial0();// 0xc9dc5ec 0x78d741c1e0

--------------------------------
Class: SkeletalMeshEditorData.Object

--------------------------------
Class: SkeletalMeshSimplificationSettings.DeveloperSettings.Object
	FName SkeletalMeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x78d7452200

--------------------------------
Class: SkyAtmosphereComponent.SceneComponent.ActorComponent.Object
	enum TransformMode;//[Offset: 0x201, Size: 0x1] 0x78d733a6a0
	float BottomRadius;//[Offset: 0x204, Size: 0x4] 0x78d7454680
	Color GroundAlbedo;//[Offset: 0x208, Size: 0x4] 0x78d7454700
	float AtmosphereHeight;//[Offset: 0x20c, Size: 0x4] 0x78d7454780
	float MultiScatteringFactor;//[Offset: 0x210, Size: 0x4] 0x78d7454800
	float TraceSampleCountScale;//[Offset: 0x214, Size: 0x4] 0x78d7454880
	float RayleighScatteringScale;//[Offset: 0x218, Size: 0x4] 0x78d7454900
	LinearColor RayleighScattering;//[Offset: 0x21c, Size: 0x10] 0x78d7454980
	float RayleighExponentialDistribution;//[Offset: 0x22c, Size: 0x4] 0x78d7454a00
	float MieScatteringScale;//[Offset: 0x230, Size: 0x4] 0x78d7454a80
	LinearColor MieScattering;//[Offset: 0x234, Size: 0x10] 0x78d7454b00
	float MieAbsorptionScale;//[Offset: 0x244, Size: 0x4] 0x78d7454b80
	LinearColor MieAbsorption;//[Offset: 0x248, Size: 0x10] 0x78d7454c00
	float MieAnisotropy;//[Offset: 0x258, Size: 0x4] 0x78d7454c80
	float MieExponentialDistribution;//[Offset: 0x25c, Size: 0x4] 0x78d7454d00
	float OtherAbsorptionScale;//[Offset: 0x260, Size: 0x4] 0x78d7454d80
	LinearColor OtherAbsorption;//[Offset: 0x264, Size: 0x10] 0x78d7454e00
	TentDistribution OtherTentDistribution;//[Offset: 0x274, Size: 0xc] 0x78d7454e80
	LinearColor SkyLuminanceFactor;//[Offset: 0x280, Size: 0x10] 0x78d7454f00
	float AerialPespectiveViewDistanceScale;//[Offset: 0x290, Size: 0x4] 0x78d7454f80
	float HeightFogContribution;//[Offset: 0x294, Size: 0x4] 0x78d7455000
	float TransmittanceMinLightElevationAngle;//[Offset: 0x298, Size: 0x4] 0x78d7455080
	float AerialPerspectiveStartDepth;//[Offset: 0x29c, Size: 0x4] 0x78d7455100
	Guid bStaticLightingBuiltGUID;//[Offset: 0x2c4, Size: 0x10] 0x78d7455180
	void SetSkyLuminanceFactor(LinearColor NewValue);// 0xc9ef890 0x78d741b060
	void SetRayleighScatteringScale(float NewValue);// 0xc9effc8 0x78d741b140
	void SetRayleighScattering(LinearColor NewValue);// 0xc9eff20 0x78d741b220
	void SetRayleighExponentialDistribution(float NewValue);// 0xc9efe78 0x78d741b300
	void SetOtherAbsorptionScale(float NewValue);// 0xc9ef9e0 0x78d741b3e0
	void SetOtherAbsorption(LinearColor NewValue);// 0xc9ef938 0x78d741b4c0
	void SetMieScatteringScale(float NewValue);// 0xc9efdd0 0x78d741b5a0
	void SetMieScattering(LinearColor NewValue);// 0xc9efd28 0x78d741b680
	void SetMieExponentialDistribution(float NewValue);// 0xc9efa88 0x78d741b760
	void SetMieAnisotropy(float NewValue);// 0xc9efb30 0x78d741b840
	void SetMieAbsorptionScale(float NewValue);// 0xc9efc80 0x78d741b920
	void SetMieAbsorption(LinearColor NewValue);// 0xc9efbd8 0x78d741ba00
	void SetHeightFogContribution(float NewValue);// 0xc9ef740 0x78d741bae0
	void SetAerialPespectiveViewDistanceScale(float NewValue);// 0xc9ef7e8 0x78d741bbc0
	void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, out const Vector LightDirection);// 0xc9f0070 0x78d741bca0

--------------------------------
Class: TentDistribution
	float TipAltitude;//[Offset: 0x0, Size: 0x4] 0x78dbf65000
	float TipValue;//[Offset: 0x4, Size: 0x4] 0x78dbf65080
	float Width;//[Offset: 0x8, Size: 0x4] 0x78dbf65100

--------------------------------
Class: SkyAtmosphere.Info.Actor.Object
	SkyAtmosphereComponent* SkyAtmosphereComponent;//[Offset: 0x220, Size: 0x8] 0x78d7454580

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x220, Size: 0x8] 0x78d7213f80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78d7214000
	void OnRep_bEnabled();// 0xc9f0a68 0x78d7205d40

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bRealTimeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1] 0x78d7455580
	byte SourceType;//[Offset: 0x235, Size: 0x1] 0x78d7455600
	TextureCube* Cubemap;//[Offset: 0x238, Size: 0x8] 0x78d7455680
	float SourceCubemapAngle;//[Offset: 0x240, Size: 0x4] 0x78d7455700
	int CubemapResolution;//[Offset: 0x244, Size: 0x4] 0x78d7455780
	float SkyDistanceThreshold;//[Offset: 0x248, Size: 0x4] 0x78d7455800
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1] 0x78d7455880
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1] 0x78d7455900
	LinearColor LowerHemisphereColor;//[Offset: 0x250, Size: 0x10] 0x78d7455980
	float OcclusionMaxDistance;//[Offset: 0x260, Size: 0x4] 0x78d7455a00
	float Contrast;//[Offset: 0x264, Size: 0x4] 0x78d7455a80
	float OcclusionExponent;//[Offset: 0x268, Size: 0x4] 0x78d7455b00
	float MinOcclusion;//[Offset: 0x26c, Size: 0x4] 0x78d7455b80
	Color OcclusionTint;//[Offset: 0x270, Size: 0x4] 0x78d7455c00
	bool bCloudAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1] 0x78d7455c80
	float CloudAmbientOcclusionStrength;//[Offset: 0x278, Size: 0x4] 0x78d7455d00
	float CloudAmbientOcclusionExtent;//[Offset: 0x27c, Size: 0x4] 0x78d7455d80
	float CloudAmbientOcclusionMapResolutionScale;//[Offset: 0x280, Size: 0x4] 0x78d7455e00
	float CloudAmbientOcclusionApertureScale;//[Offset: 0x284, Size: 0x4] 0x78d7455e80
	byte OcclusionCombineMode;//[Offset: 0x288, Size: 0x1] 0x78d7455f00
	TextureCube* BlendDestinationCubemap;//[Offset: 0x338, Size: 0x8] 0x78d7455f80
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0xc9f1564 0x78d741dfa0
	void SetOcclusionTint(out const Color InTint);// 0xc9f1178 0x78d741e080
	void SetOcclusionExponent(float InOcclusionExponent);// 0xc9f1028 0x78d741e160
	void SetOcclusionContrast(float InOcclusionContrast);// 0xc9f10d0 0x78d741e240
	void SetMinOcclusion(float InMinOcclusion);// 0xc9f0f80 0x78d741e320
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0xc9f1228 0x78d741e400
	void SetLightColor(LinearColor NewLightColor);// 0xc9f14bc 0x78d741e4e0
	void SetIntensity(float NewIntensity);// 0xc9f16b4 0x78d741e5c0
	void SetIndirectLightingIntensity(float NewIntensity);// 0xc9f160c 0x78d741e6a0
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0xc9f12d8 0x78d741adc0
	void SetCubemap(TextureCube* NewCubemap);// 0xc9f1414 0x78d741aea0
	void RecaptureSky();// 0xc9f0f6c 0x78d741af80

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x88] 0x78d7455500

--------------------------------
Class: SlateTextureAtlasInterface.Interface.Object

--------------------------------
Class: SmokeTestCommandlet.Commandlet.Object

--------------------------------
Class: SocketInfoArray.Object
	SocketInfo[] SockInfos;//[Offset: 0x28, Size: 0x10] 0x78d733a600

--------------------------------
Class: SocketInfo
	FName SocketName;//[Offset: 0x0, Size: 0x8] 0x78dbf64c00
	FName BoneName;//[Offset: 0x8, Size: 0x8] 0x78dbf64c80
	Vector RelativeLocation;//[Offset: 0x10, Size: 0xc] 0x78dbf64d00
	Rotator RelativeRotation;//[Offset: 0x1c, Size: 0xc] 0x78dbf64d80
	Vector RelativeScale;//[Offset: 0x28, Size: 0xc] 0x78dbf64e00
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x78dbf64e80

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bPrimeOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b8, Size: 0x1] 0x78d7456d80
	SoundNode* FirstNode;//[Offset: 0x1c0, Size: 0x8] 0x78d7456e00
	float VolumeMultiplier;//[Offset: 0x1c8, Size: 0x4] 0x78d7456e80
	float PitchMultiplier;//[Offset: 0x1cc, Size: 0x4] 0x78d7456f00
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x1d0, Size: 0x3a0] 0x78d7456f80
	float SubtitlePriority;//[Offset: 0x570, Size: 0x4] 0x78d7457000
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x578, Size: 0x1] 0x78d7457080
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x578, Size: 0x1] 0x78d7457100
	int CookedQualityIndex;//[Offset: 0x57c, Size: 0x4] 0x78d7457180
	bool bHasPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x580, Size: 0x1] 0x78d7457200

--------------------------------
Class: SoundNode.Object
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 0x10] 0x78d733cb80

--------------------------------
Class: SoundGroups.Object
	SoundGroup[] SoundGroupProfiles;//[Offset: 0x28, Size: 0x10] 0x78d733ccc0

--------------------------------
Class: SoundGroup
	byte SoundGroup;//[Offset: 0x0, Size: 0x1] 0x78dbf67800
	FString DisplayName;//[Offset: 0x8, Size: 0x10] 0x78dbf67880
	bool bAlwaysDecompressOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78dbf67900
	float DecompressedDuration;//[Offset: 0x1c, Size: 0x4] 0x78dbf67980

--------------------------------
Class: SoundNodeAssetReferencer.SoundNode.Object

--------------------------------
Class: SoundNodeAttenuation.SoundNode.Object
	SoundAttenuation* AttenuationSettings;//[Offset: 0x48, Size: 0x8] 0x78d7456600
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x50, Size: 0x3a0] 0x78d7456680
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 0x1] 0x78d7456700

--------------------------------
Class: SoundNodeBranch.SoundNode.Object
	FName BoolParameterName;//[Offset: 0x44, Size: 0x8] 0x78d7456580

--------------------------------
Class: SoundNodeConcatenator.SoundNode.Object
	float[] InputVolume;//[Offset: 0x48, Size: 0x10] 0x78d733cae0

--------------------------------
Class: SoundNodeDelay.SoundNode.Object
	float DelayMin;//[Offset: 0x44, Size: 0x4] 0x78d7456400
	float DelayMax;//[Offset: 0x48, Size: 0x4] 0x78d7456480

--------------------------------
Class: SoundNodeDialoguePlayer.SoundNode.Object
	DialogueWaveParameter DialogueWaveParameter;//[Offset: 0x48, Size: 0x20] 0x78d7458400
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78d7456380

--------------------------------
Class: DialogueWaveParameter
	DialogueWave* DialogueWave;//[Offset: 0x0, Size: 0x8] 0x78dbf0b180
	DialogueContext Context;//[Offset: 0x8, Size: 0x18] 0x78dbf0b300

--------------------------------
Class: SoundNodeDistanceCrossFade.SoundNode.Object
	DistanceDatum[] CrossFadeInput;//[Offset: 0x48, Size: 0x10] 0x78d733ca40

--------------------------------
Class: DistanceDatum
	float FadeInDistanceStart;//[Offset: 0x0, Size: 0x4] 0x78dbf68b80
	float FadeInDistanceEnd;//[Offset: 0x4, Size: 0x4] 0x78dbf68c00
	float FadeOutDistanceStart;//[Offset: 0x8, Size: 0x4] 0x78dbf68c80
	float FadeOutDistanceEnd;//[Offset: 0xc, Size: 0x4] 0x78dbf68d00
	float Volume;//[Offset: 0x10, Size: 0x4] 0x78dbf68d80

--------------------------------
Class: SoundNodeDoppler.SoundNode.Object
	float DopplerIntensity;//[Offset: 0x44, Size: 0x4] 0x78d7458200
	bool bUseSmoothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78d7458280
	float SmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4] 0x78d7458300

--------------------------------
Class: SoundNodeEnveloper.SoundNode.Object
	float LoopStart;//[Offset: 0x44, Size: 0x4] 0x78d7457b00
	float LoopEnd;//[Offset: 0x48, Size: 0x4] 0x78d7457b80
	float DurationAfterLoop;//[Offset: 0x4c, Size: 0x4] 0x78d7457c00
	int LoopCount;//[Offset: 0x50, Size: 0x4] 0x78d7457c80
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78d7457d00
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x78d7457d80
	DistributionFloatConstantCurve* VolumeInterpCurve;//[Offset: 0x58, Size: 0x8] 0x78d7457e00
	DistributionFloatConstantCurve* PitchInterpCurve;//[Offset: 0x60, Size: 0x8] 0x78d7457e80
	RuntimeFloatCurve VolumeCurve;//[Offset: 0x68, Size: 0x88] 0x78d7457f00
	RuntimeFloatCurve PitchCurve;//[Offset: 0xf0, Size: 0x88] 0x78d7457f80
	float PitchMin;//[Offset: 0x178, Size: 0x4] 0x78d7458000
	float PitchMax;//[Offset: 0x17c, Size: 0x4] 0x78d7458080
	float VolumeMin;//[Offset: 0x180, Size: 0x4] 0x78d7458100
	float VolumeMax;//[Offset: 0x184, Size: 0x4] 0x78d7458180

--------------------------------
Class: SoundNodeGroupControl.SoundNode.Object
	int[] GroupSizes;//[Offset: 0x48, Size: 0x10] 0x78d733c9a0

--------------------------------
Class: SoundNodeLooping.SoundNode.Object
	int LoopCount;//[Offset: 0x44, Size: 0x4] 0x78d7457980
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78d7457a00

--------------------------------
Class: SoundNodeMature.SoundNode.Object

--------------------------------
Class: SoundNodeMixer.SoundNode.Object
	float[] InputVolume;//[Offset: 0x48, Size: 0x10] 0x78d733c900

--------------------------------
Class: SoundNodeModulator.SoundNode.Object
	float PitchMin;//[Offset: 0x44, Size: 0x4] 0x78d7457700
	float PitchMax;//[Offset: 0x48, Size: 0x4] 0x78d7457780
	float VolumeMin;//[Offset: 0x4c, Size: 0x4] 0x78d7457800
	float VolumeMax;//[Offset: 0x50, Size: 0x4] 0x78d7457880

--------------------------------
Class: SoundNodeModulatorContinuous.SoundNode.Object
	ModulatorContinuousParams PitchModulationParams;//[Offset: 0x44, Size: 0x20] 0x78d7457600
	ModulatorContinuousParams VolumeModulationParams;//[Offset: 0x64, Size: 0x20] 0x78d7457680

--------------------------------
Class: ModulatorContinuousParams
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78dbf68800
	float Default;//[Offset: 0x8, Size: 0x4] 0x78dbf68880
	float MinInput;//[Offset: 0xc, Size: 0x4] 0x78dbf68900
	float MaxInput;//[Offset: 0x10, Size: 0x4] 0x78dbf68980
	float MinOutput;//[Offset: 0x14, Size: 0x4] 0x78dbf68a00
	float MaxOutput;//[Offset: 0x18, Size: 0x4] 0x78dbf68a80
	byte ParamMode;//[Offset: 0x1c, Size: 0x1] 0x78dbf68b00

--------------------------------
Class: SoundNodeOscillator.SoundNode.Object
	bool bModulateVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x78d7459200
	bool bModulatePitch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1] 0x78d7459280
	float AmplitudeMin;//[Offset: 0x44, Size: 0x4] 0x78d7459300
	float AmplitudeMax;//[Offset: 0x48, Size: 0x4] 0x78d7459380
	float FrequencyMin;//[Offset: 0x4c, Size: 0x4] 0x78d7459400
	float FrequencyMax;//[Offset: 0x50, Size: 0x4] 0x78d7459480
	float OffsetMin;//[Offset: 0x54, Size: 0x4] 0x78d7457400
	float OffsetMax;//[Offset: 0x58, Size: 0x4] 0x78d7457480
	float CenterMin;//[Offset: 0x5c, Size: 0x4] 0x78d7457500
	float CenterMax;//[Offset: 0x60, Size: 0x4] 0x78d7457580

--------------------------------
Class: SoundNodeParamCrossFade.SoundNodeDistanceCrossFade.SoundNode.Object
	FName ParamName;//[Offset: 0x58, Size: 0x8] 0x78d7459180

--------------------------------
Class: SoundNodeQualityLevel.SoundNode.Object
	int CookedQualityLevelIndex;//[Offset: 0x44, Size: 0x4] 0x78d7459100

--------------------------------
Class: SoundNodeRandom.SoundNode.Object
	float[] Weights;//[Offset: 0x48, Size: 0x10] 0x78d733c7c0
	bool[] HasBeenUsed;//[Offset: 0x58, Size: 0x10] 0x78d733c860
	int NumRandomUsed;//[Offset: 0x68, Size: 0x4] 0x78d7458e80
	int PreselectAtLevelLoad;//[Offset: 0x6c, Size: 0x4] 0x78d7458f00
	bool bShouldExcludeFromBranchCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78d7458f80
	bool bSoundCueExcludedFromBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x78d7459000
	bool bRandomizeWithoutReplacement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1] 0x78d7459080

--------------------------------
Class: SoundNodeSoundClass.SoundNode.Object
	SoundClass* SoundClassOverride;//[Offset: 0x48, Size: 0x8] 0x78d7458d00

--------------------------------
Class: SoundNodeSwitch.SoundNode.Object
	FName IntParameterName;//[Offset: 0x44, Size: 0x8] 0x78d7458c80

--------------------------------
Class: SoundNodeWaveParam.SoundNode.Object
	FName WaveParameterName;//[Offset: 0x44, Size: 0x8] 0x78d7458c00

--------------------------------
Class: SoundNodeWavePlayer.SoundNodeAssetReferencer.SoundNode.Object
	SoundWave* SoundWaveAssetPtr;//[Offset: 0x48, Size: 0x28] 0x78d7458a80
	SoundWave* SoundWave;//[Offset: 0x70, Size: 0x8] 0x78d7458b00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78d7458b80

--------------------------------
Class: SoundfieldSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	FName SoundfieldEncodingFormat;//[Offset: 0x40, Size: 0x8] 0x78d745b380
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x48, Size: 0x8] 0x78d745b400
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x50, Size: 0x10] 0x78d733c040
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x60, Size: 0x8] 0x78d733c0e0

--------------------------------
Class: SoundfieldEffectBase.Object
	SoundfieldEffectSettingsBase* Settings;//[Offset: 0x28, Size: 0x8] 0x78d72a2c00

--------------------------------
Class: SoundfieldEffectSettingsBase.Object

--------------------------------
Class: EndpointSubmix.SoundSubmixBase.Object
	FName EndpointType;//[Offset: 0x38, Size: 0x8] 0x78d745b280
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x40, Size: 0x8] 0x78d733bfa0
	AudioEndpointSettingsBase* EndpointSettings;//[Offset: 0x48, Size: 0x8] 0x78d745b300

--------------------------------
Class: AudioEndpointSettingsBase.Object

--------------------------------
Class: SoundfieldEndpointSubmix.SoundSubmixBase.Object
	FName SoundfieldEndpointType;//[Offset: 0x38, Size: 0x8] 0x78d745b080
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x40, Size: 0x8] 0x78d733bdc0
	SoundfieldEndpointSettingsBase* EndpointSettings;//[Offset: 0x48, Size: 0x8] 0x78d745b100
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x50, Size: 0x8] 0x78d733be60
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x58, Size: 0x8] 0x78d745b180
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x60, Size: 0x10] 0x78d733bf00

--------------------------------
Class: SoundfieldEndpointSettingsBase.Object

--------------------------------
Class: SoundWaveProcedural.SoundWave.SoundBase.Object

--------------------------------
Class: SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1] 0x78d745b000

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x228, Size: 0x8] 0x78d745af80

--------------------------------
Class: SphereReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadius;//[Offset: 0x280, Size: 0x4] 0x78d745ae00
	float CaptureDistanceScale;//[Offset: 0x284, Size: 0x4] 0x78d745ae80
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x288, Size: 0x8] 0x78d745af00

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x470, Size: 0x70] 0x78dc0b7e80
	InterpCurveVector SplineInfo;//[Offset: 0x4e0, Size: 0x18] 0x78dc0b7f00
	InterpCurveQuat SplineRotInfo;//[Offset: 0x4f8, Size: 0x18] 0x78dc0b7f80
	InterpCurveVector SplineScaleInfo;//[Offset: 0x510, Size: 0x18] 0x78dc0b8000
	InterpCurveFloat SplineReparamTable;//[Offset: 0x528, Size: 0x18] 0x78dc0b8080
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1] 0x78dc0b8100
	int ReparamStepsPerSegment;//[Offset: 0x544, Size: 0x4] 0x78dc0b8180
	float Duration;//[Offset: 0x548, Size: 0x4] 0x78dc0b8200
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 0x1] 0x78dc0b8280
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 0x1] 0x78dc0b8300
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54e, Size: 0x1] 0x78dc0b8380
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54f, Size: 0x1] 0x78dc0b8400
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1] 0x78dc0b6380
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1] 0x78dc0b6400
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 0x1] 0x78dc0b6480
	float LoopPosition;//[Offset: 0x554, Size: 0x4] 0x78dc0b6500
	Vector DefaultUpVector;//[Offset: 0x558, Size: 0xc] 0x78dc0b6580
	void UpdateSpline();// 0xca0d100 0x78dc0ac560
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0xca0b1c8 0x78dc0ac640
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0xca0acc4 0x78dc0ac720
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0xca0c494 0x78dc0ac800
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0xca0ae54 0x78dc0ac8e0
	void SetTangentColor(out const LinearColor TangentColor);// 0xca0c334 0x78dc0ac9c0
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0xca0b038 0x78dc0a90e0
	void SetSplineWorldPoints(out const Vector[] Points);// 0xca0b544 0x78dc0a91c0
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0xca0a7f8 0x78dc0a92a0
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0xca0b630 0x78dc0a9380
	void SetSplineLocalPoints(out const Vector[] Points);// 0xca0b458 0x78dc0a9460
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0xca0c3e4 0x78dc0a9540
	void SetScaleAtSplinePoint(int PointIndex, out const Vector InScaleVector, bool bUpdateSpline);// 0xca0a9f0 0x78dc0a9620
	void SetRotationAtSplinePoint(int PointIndex, out const Rotator InRotation, byte CoordinateSpace, bool bUpdateSpline);// 0xca0ab34 0x78dc0a9700
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0xca0b2c8 0x78dc0a97e0
	void SetDrawDebug(bool bShow);// 0xca0c284 0x78dc0a98c0
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0xca0951c 0x78dc0a99a0
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0xca0c048 0x78dc0a9a80
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0xca0c18c 0x78dc0a9b60
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0xca0b92c 0x78dc0a9c40
	bool IsClosedLoop();// 0xca0c010 0x78dc0a9d20
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0xca08e90 0x78dc0a9e00
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0xca07f54 0x78dc0a9ee0
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0xca08cd8 0x78dc0a9fc0
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0xca08568 0x78dc0aa0a0
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0xca0a5d8 0x78dc0aa180
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0xca09200 0x78dc0aa260
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0xca08308 0x78dc0aa340
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0xca09048 0x78dc0aa420
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0xca09644 0x78dc0aa500
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0xca0c544 0x78dc0aa5e0
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xca07e00 0x78dc0aa6c0
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xca09fd8 0x78dc0aa7a0
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xca0cc00 0x78dc0aa880
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xca08bd8 0x78dc0aa960
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0xca07afc 0x78dc0aaa40
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0xca09bc8 0x78dc0aab20
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0xca0c9a0 0x78dc0aac00
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0xca087c8 0x78dc0aace0
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xca081b4 0x78dc0a7400
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xca0a3d8 0x78dc0a74e0
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xca0cf00 0x78dc0a75c0
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xca08f48 0x78dc0a76a0
	byte GetSplinePointType(int PointIndex);// 0xca0a940 0x78dc0a7780
	float GetSplineLength();// 0xca09610 0x78dc0a7860
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0xca078a4 0x78dc0a7940
	Vector GetScaleAtSplinePoint(int PointIndex);// 0xca09d28 0x78dc0a7a20
	Vector GetScaleAtSplineInputKey(float InKey);// 0xca0c7f0 0x78dc0a7b00
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0xca08928 0x78dc0a7be0
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xca08060 0x78dc0a7cc0
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xca0a0d8 0x78dc0a7da0
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xca0cd00 0x78dc0a7e80
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xca08d90 0x78dc0a7f60
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xca079ac 0x78dc0a8040
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xca09ddc 0x78dc0a8120
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xca0c8a4 0x78dc0a8200
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xca089dc 0x78dc0a82e0
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xca07cac 0x78dc0a83c0
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xca09ed8 0x78dc0a84a0
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xca0cb00 0x78dc0a8580
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xca08ad8 0x78dc0a8660
	int GetNumberOfSplineSegments();// 0xca0a790 0x78dc0a8740
	int GetNumberOfSplinePoints();// 0xca0a7c4 0x78dc0a8820
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xca08674 0x78dc0a8900
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xca0a690 0x78dc0a89e0
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xca0d000 0x78dc0a8ac0
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xca092b8 0x78dc0a8ba0
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0xca09a38 0x78dc0a8c80
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0xca098f0 0x78dc0a8d60
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xca0a1d8 0x78dc0a8e40
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0xca093b8 0x78dc0a8f20
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0xca09744 0x78dc0a9000
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0xca0c644 0x78dc0a5720
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0xca09840 0x78dc0a5800
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0xca0c740 0x78dc0a58e0
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xca08414 0x78dc0a59c0
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xca0a4d8 0x78dc0a5aa0
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xca0ce00 0x78dc0a5b80
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xca09100 0x78dc0a5c60
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0xca09468 0x78dc0a5d40
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xca0a2d8 0x78dc0a5e20
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xca072c4 0x78dc0a5f00
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0xca06e94 0x78dc0a5fe0
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xca074d4 0x78dc0a60c0
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0xca06ffc 0x78dc0a61a0
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xca073cc 0x78dc0a6280
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xca070b8 0x78dc0a6360
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xca071bc 0x78dc0a6440
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xca076e4 0x78dc0a6520
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0xca077ec 0x78dc0a6600
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xca075dc 0x78dc0a66e0
	void ClearSplinePoints(bool bUpdateSpline);// 0xca0bf60 0x78dc0a67c0
	void AddSplineWorldPoint(out const Vector Position);// 0xca0b874 0x78dc0a68a0
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0xca0ba24 0x78dc0a6980
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0xca0bbb8 0x78dc0a6a60
	void AddSplineLocalPoint(out const Vector Position);// 0xca0b7bc 0x78dc0a6b40
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0xca0bd00 0x78dc0a6c20
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0xca0be3c 0x78dc0a6d00

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18] 0x78dbf69780
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18] 0x78dbf69800
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18] 0x78dbf69880
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18] 0x78dbf69900
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8] 0x78dbf69980
	uint32 Version;//[Offset: 0x68, Size: 0x4] 0x78dbf69a00

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10] 0x78e6b156a0
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78e6833800
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78e6833880

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78e6833900
	Quat OutVal;//[Offset: 0x10, Size: 0x10] 0x78e6833980
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10] 0x78e6833a00
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10] 0x78e6833a80
	byte InterpMode;//[Offset: 0x40, Size: 0x1] 0x78e6833b00

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4] 0x78dbf6b400
	Vector Position;//[Offset: 0x4, Size: 0xc] 0x78dbf6b480
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc] 0x78dbf6b500
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc] 0x78dbf6b580
	Rotator Rotation;//[Offset: 0x28, Size: 0xc] 0x78dbf69500
	Vector Scale;//[Offset: 0x34, Size: 0xc] 0x78dbf69580
	byte Type;//[Offset: 0x40, Size: 0x1] 0x78dbf69600

--------------------------------
Class: SplineMeshActor.Actor.Object
	SplineMeshComponent* SplineMeshComponent;//[Offset: 0x220, Size: 0x8] 0x78d745ad80

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x510, Size: 0x58] 0x78d745d180
	Vector SplineUpDir;//[Offset: 0x568, Size: 0xc] 0x78d745d200
	float SplineBoundaryMin;//[Offset: 0x574, Size: 0x4] 0x78d745d280
	Guid CachedMeshBodySetupGuid;//[Offset: 0x578, Size: 0x10] 0x78d745d300
	BodySetup* BodySetup;//[Offset: 0x588, Size: 0x8] 0x78d745d380
	float SplineBoundaryMax;//[Offset: 0x590, Size: 0x4] 0x78d745d400
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x594, Size: 0x1] 0x78d745d480
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x594, Size: 0x1] 0x78d745d500
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x594, Size: 0x1] 0x78d745d580
	byte ForwardAxis;//[Offset: 0x595, Size: 0x1] 0x78d745d600
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x598, Size: 0x4] 0x78d745d680
	void UpdateMesh();// 0xca12338 0x78d741f200
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0xca120d0 0x78d741f2e0
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0xca11b58 0x78d741f3c0
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0xca11a28 0x78d741f4a0
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0xca12204 0x78d741f580
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0xca118fc 0x78d741f660
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0xca11c84 0x78d741f740
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0xca11310 0x78d741f820
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0xca11444 0x78d741f900
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0xca11e68 0x78d741f9e0
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0xca117d0 0x78d741fac0
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0xca116a0 0x78d741fba0
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0xca11f9c 0x78d741fc80
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0xca11574 0x78d741fd60
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0xca111e0 0x78d741fe40
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0xca110b0 0x78d741ff20
	Vector GetStartTangent();// 0xca121cc 0x78d741caa0
	Vector2D GetStartScale();// 0xca11c50 0x78d741cb80
	float GetStartRoll();// 0xca11b24 0x78d741cc60
	Vector GetStartPosition();// 0xca12300 0x78d741cd40
	Vector2D GetStartOffset();// 0xca119f4 0x78d741ce20
	Vector GetSplineUpDir();// 0xca1140c 0x78d741cf00
	byte GetForwardAxis();// 0xca11540 0x78d741cfe0
	Vector GetEndTangent();// 0xca11f64 0x78d741d0c0
	Vector2D GetEndScale();// 0xca118c8 0x78d741d1a0
	float GetEndRoll();// 0xca1179c 0x78d741d280
	Vector GetEndPosition();// 0xca12098 0x78d741d360
	Vector2D GetEndOffset();// 0xca1166c 0x78d741d440
	float GetBoundaryMin();// 0xca112dc 0x78d741d520
	float GetBoundaryMax();// 0xca111ac 0x78d741d600

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc] 0x78dbf6ad00
	Vector StartTangent;//[Offset: 0xc, Size: 0xc] 0x78dbf6ad80
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8] 0x78dbf6ae00
	float StartRoll;//[Offset: 0x20, Size: 0x4] 0x78dbf6ae80
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8] 0x78dbf6af00
	Vector EndPos;//[Offset: 0x2c, Size: 0xc] 0x78dbf6af80
	Vector2D EndScale;//[Offset: 0x38, Size: 0x8] 0x78dbf6b000
	Vector EndTangent;//[Offset: 0x40, Size: 0xc] 0x78dbf6b080
	float EndRoll;//[Offset: 0x4c, Size: 0x4] 0x78dbf6b100
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8] 0x78dbf6b180

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x204, Size: 0x4] 0x78d712df00
	Vector SocketOffset;//[Offset: 0x208, Size: 0xc] 0x78d712df80
	Vector TargetOffset;//[Offset: 0x214, Size: 0xc] 0x78d712e000
	float ProbeSize;//[Offset: 0x220, Size: 0x4] 0x78d712e080
	byte ProbeChannel;//[Offset: 0x224, Size: 0x1] 0x78d712e100
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x225, Size: 0x1] 0x78d712e180
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x225, Size: 0x1] 0x78d712e200
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x225, Size: 0x1] 0x78d712e280
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x225, Size: 0x1] 0x78d712e300
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x225, Size: 0x1] 0x78d712e380
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x225, Size: 0x1] 0x78d712e400
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x225, Size: 0x1] 0x78d712e480
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x225, Size: 0x1] 0x78d712e500
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x226, Size: 0x1] 0x78d712e580
	float CameraLagSpeed;//[Offset: 0x228, Size: 0x4] 0x78d712e600
	float CameraRotationLagSpeed;//[Offset: 0x22c, Size: 0x4] 0x78d712e680
	float CameraLagMaxTimeStep;//[Offset: 0x230, Size: 0x4] 0x78d712e700
	float CameraLagMaxDistance;//[Offset: 0x234, Size: 0x4] 0x78d712c680
	bool IsCollisionFixApplied();// 0xca138c8 0x78d70fdfa0
	Vector GetUnfixedCameraPosition();// 0xca13900 0x78d70fe080
	Rotator GetTargetRotation();// 0xca13938 0x78d70fe160

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x220, Size: 0x8] 0x78d7223880
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x78d7223900
	enum NavigationGeometryGatheringMode;//[Offset: 0x229, Size: 0x1] 0x78d715c5e0
	bool bUseCustomReflectionCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a, Size: 0x1] 0x78d7223a00
	ReflectionCapture* ReflectionCapture;//[Offset: 0x22c, Size: 0x8] 0x78d7223a80
	void SetMobility(byte InMobility);// 0xca17ad4 0x78d720fe40

--------------------------------
Class: StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeQuad.StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeCylinder.StereoLayerShape.Object
	float Radius;//[Offset: 0x28, Size: 0x4] 0x78d745f380
	float OverlayArc;//[Offset: 0x2c, Size: 0x4] 0x78d745f400
	int Height;//[Offset: 0x30, Size: 0x4] 0x78d745f480
	void SetRadius(float InRadius);// 0xca19b08 0x78d7461740
	void SetOverlayArc(float InOverlayArc);// 0xca19a60 0x78d7461820
	void SetHeight(int InHeight);// 0xca199b8 0x78d7461900

--------------------------------
Class: StereoLayerShapeCubemap.StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeEquirect.StereoLayerShape.Object
	Box2D LeftUVRect;//[Offset: 0x28, Size: 0x14] 0x78d745f000
	Box2D RightUVRect;//[Offset: 0x3c, Size: 0x14] 0x78d745f080
	Vector2D LeftScale;//[Offset: 0x50, Size: 0x8] 0x78d745f100
	Vector2D RightScale;//[Offset: 0x58, Size: 0x8] 0x78d745f180
	Vector2D LeftBias;//[Offset: 0x60, Size: 0x8] 0x78d745f200
	Vector2D RightBias;//[Offset: 0x68, Size: 0x8] 0x78d745f280
	void SetEquirectProps(EquirectProps InScaleBiases);// 0xca1a170 0x78d7461660

--------------------------------
Class: EquirectProps
	Box2D LeftUVRect;//[Offset: 0x0, Size: 0x14] 0x78dbf6ce80
	Box2D RightUVRect;//[Offset: 0x14, Size: 0x14] 0x78dbf6cf00
	Vector2D LeftScale;//[Offset: 0x28, Size: 0x8] 0x78dbf6cf80
	Vector2D RightScale;//[Offset: 0x30, Size: 0x8] 0x78dbf6d000
	Vector2D LeftBias;//[Offset: 0x38, Size: 0x8] 0x78dbf6d080
	Vector2D RightBias;//[Offset: 0x40, Size: 0x8] 0x78dbf6d100

--------------------------------
Class: StereoLayerComponent.SceneComponent.ActorComponent.Object
	bool bLiveTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1] 0x78d745fb00
	bool bSupportsDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1] 0x78d745fb80
	bool bNoAlphaChannel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x201, Size: 0x1] 0x78d745fc00
	Texture* Texture;//[Offset: 0x208, Size: 0x8] 0x78d745fc80
	Texture* LeftTexture;//[Offset: 0x210, Size: 0x8] 0x78d745fd00
	bool bQuadPreserveTextureRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1] 0x78d745fd80
	Vector2D QuadSize;//[Offset: 0x21c, Size: 0x8] 0x78d745fe00
	Box2D UVRect;//[Offset: 0x224, Size: 0x14] 0x78d745fe80
	float CylinderRadius;//[Offset: 0x238, Size: 0x4] 0x78d745ff00
	float CylinderOverlayArc;//[Offset: 0x23c, Size: 0x4] 0x78d745ff80
	int CylinderHeight;//[Offset: 0x240, Size: 0x4] 0x78d745e780
	EquirectProps EquirectProps;//[Offset: 0x244, Size: 0x48] 0x78d745e800
	byte StereoLayerType;//[Offset: 0x28c, Size: 0x1] 0x78d745e880
	byte StereoLayerShape;//[Offset: 0x28d, Size: 0x1] 0x78d745e900
	StereoLayerShape* Shape;//[Offset: 0x290, Size: 0x8] 0x78d745e980
	int Priority;//[Offset: 0x298, Size: 0x4] 0x78d745ea00
	void SetUVRect(Box2D InUVRect);// 0xca1a76c 0x78d7460be0
	void SetTexture(Texture* InTexture);// 0xca1a9c4 0x78d7460cc0
	void SetQuadSize(Vector2D InQuadSize);// 0xca1a840 0x78d7460da0
	void SetPriority(int InPriority);// 0xca1a5b8 0x78d7460e80
	void SetLeftTexture(Texture* InTexture);// 0xca1a91c 0x78d7460f60
	void SetEquirectProps(EquirectProps InScaleBiases);// 0xca1a660 0x78d7461040
	void MarkTextureForUpdate();// 0xca1a588 0x78d7461120
	Box2D GetUVRect();// 0xca1a744 0x78d7461200
	Texture* GetTexture();// 0xca1a900 0x78d74612e0
	Vector2D GetQuadSize();// 0xca1a820 0x78d74613c0
	int GetPriority();// 0xca1a59c 0x78d74614a0
	Texture* GetLeftTexture();// 0xca1a8e4 0x78d7461580

--------------------------------
Class: StereoLayerFunctionLibrary.BlueprintFunctionLibrary.Object
	static void ShowSplashScreen();// 0xca1b198 0x78d7460860
	static void SetSplashScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0xca1b1ac 0x78d7460940
	static void HideSplashScreen();// 0xca1b184 0x78d7460a20
	static void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);// 0xca1b0e4 0x78d7460b00

--------------------------------
Class: StringTable.Object

--------------------------------
Class: SubsystemBlueprintLibrary.BlueprintFunctionLibrary.Object
	static WorldSubsystem* GetWorldSubsystem(Object* ContextObject, class WorldSubsystem Class);// 0xca1f93c 0x78d7460400
	static LocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(PlayerController* PlayerController, class LocalPlayerSubsystem Class);// 0xca1f84c 0x78d74604e0
	static LocalPlayerSubsystem* GetLocalPlayerSubsystem(Object* ContextObject, class LocalPlayerSubsystem Class);// 0xca1fa2c 0x78d74605c0
	static GameInstanceSubsystem* GetGameInstanceSubsystem(Object* ContextObject, class GameInstanceSubsystem Class);// 0xca1fb1c 0x78d74606a0
	static EngineSubsystem* GetEngineSubsystem(class EngineSubsystem Class);// 0xca1fc0c 0x78d7460780

--------------------------------
Class: SystemTimeTimecodeProvider.TimecodeProvider.Object
	FrameRate FrameRate;//[Offset: 0x2c, Size: 0x8] 0x78d7470780
	bool bGenerateFullFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x78d7470800
	bool bUseHighPerformanceClock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x78d7470880

--------------------------------
Class: TargetPoint.Actor.Object

--------------------------------
Class: TextPropertyTestObject.Object
	FText DefaultedText;//[Offset: 0x28, Size: 0x18] 0x78d7470600
	FText UndefaultedText;//[Offset: 0x40, Size: 0x18] 0x78d7470680
	FText TransientText;//[Offset: 0x58, Size: 0x18] 0x78d7470700

--------------------------------
Class: TextRenderActor.Actor.Object
	TextRenderComponent* TextRender;//[Offset: 0x220, Size: 0x8] 0x78d7470580

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x470, Size: 0x18] 0x78d7471800
	MaterialInterface* TextMaterial;//[Offset: 0x488, Size: 0x8] 0x78d7471880
	Font* Font;//[Offset: 0x490, Size: 0x8] 0x78d7471900
	byte HorizontalAlignment;//[Offset: 0x498, Size: 0x1] 0x78d7471980
	byte VerticalAlignment;//[Offset: 0x499, Size: 0x1] 0x78d7471a00
	Color TextRenderColor;//[Offset: 0x49c, Size: 0x4] 0x78d7471a80
	float XScale;//[Offset: 0x4a0, Size: 0x4] 0x78d7471b00
	float YScale;//[Offset: 0x4a4, Size: 0x4] 0x78d7471b80
	float WorldSize;//[Offset: 0x4a8, Size: 0x4] 0x78d7471c00
	float InvDefaultSize;//[Offset: 0x4ac, Size: 0x4] 0x78d7471c80
	float HorizSpacingAdjust;//[Offset: 0x4b0, Size: 0x4] 0x78d7471d00
	float VertSpacingAdjust;//[Offset: 0x4b4, Size: 0x4] 0x78d7471d80
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4b8, Size: 0x1] 0x78d7471e00
	void SetYScale(float Value);// 0xca20ef8 0x78d7463180
	void SetXScale(float Value);// 0xca20fa0 0x78d7463260
	void SetWorldSize(float Value);// 0xca20d00 0x78d7463340
	void SetVertSpacingAdjust(float Value);// 0xca20da8 0x78d7463420
	void SetVerticalAlignment(byte Value);// 0xca210ec 0x78d7463500
	void SetTextRenderColor(Color Value);// 0xca21048 0x78d74635e0
	void SetTextMaterial(MaterialInterface* Material);// 0xca212e4 0x78d74636c0
	void SetText(FString Value);// 0xca21508 0x78d74637a0
	void SetHorizSpacingAdjust(float Value);// 0xca20e50 0x78d7463880
	void SetHorizontalAlignment(byte Value);// 0xca21194 0x78d7463960
	void SetFont(Font* Value);// 0xca2123c 0x78d7460080
	void K2_SetText(out const FText Value);// 0xca2138c 0x78d7460160
	Vector GetTextWorldSize();// 0xca20c90 0x78d7460240
	Vector GetTextLocalSize();// 0xca20cc8 0x78d7460320

--------------------------------
Class: Texture2DArray.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0x130, Size: 0x1] 0x78d7471680
	byte AddressY;//[Offset: 0x131, Size: 0x1] 0x78d7471700
	byte AddressZ;//[Offset: 0x132, Size: 0x1] 0x78d7471780

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xe0, Size: 0x1] 0x78d7471600

--------------------------------
Class: TextureMipDataProviderFactory.AssetUserData.Object

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb8, Size: 0x98] 0x78d7474080
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1] 0x78d7474100
	void Stop();// 0xca28934 0x78d7461d60
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0xca28094 0x78d7461e40
	void SetTimelineLengthMode(byte NewLengthMode);// 0xca2835c 0x78d7461f20
	void SetTimelineLength(float NewLength);// 0xca28404 0x78d7462000
	void SetPlayRate(float NewRate);// 0xca285bc 0x78d74620e0
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0xca28780 0x78d74621c0
	void SetNewTime(float NewTime);// 0xca284e0 0x78d74622a0
	void SetLooping(bool bNewLooping);// 0xca2869c 0x78d7462380
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0xca27fa4 0x78d7462460
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0xca282ac 0x78d7462540
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0xca28184 0x78d7462620
	void ReverseFromEnd();// 0xca28948 0x78d7462700
	void Reverse();// 0xca2895c 0x78d74627e0
	void PlayFromStart();// 0xca28970 0x78d74628c0
	void Play();// 0xca28984 0x78d74629a0
	void OnRep_Timeline();// 0xca27f90 0x78d7462a80
	bool IsReversing();// 0xca288c4 0x78d7462b60
	bool IsPlaying();// 0xca288fc 0x78d7462c40
	bool IsLooping();// 0xca28664 0x78d7462d20
	float GetTimelineLength();// 0xca284ac 0x78d7462e00
	float GetPlayRate();// 0xca28588 0x78d7462ee0
	float GetPlaybackPosition();// 0xca2874c 0x78d7462fc0
	bool GetIgnoreTimeDilation();// 0xca28274 0x78d74630a0

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1] 0x78dbf6e780
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78dbf6e800
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78dbf6e880
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78dbf6e900
	float Length;//[Offset: 0x4, Size: 0x4] 0x78dbf6e980
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x78dbf6ea00
	float Position;//[Offset: 0xc, Size: 0x4] 0x78dbf6ea80
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10] 0x78dbf251a0
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10] 0x78dbf25240
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10] 0x78dbf229a0
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10] 0x78dbf22a40
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10] 0x78dbf6f400
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10] 0x78dbf6f480
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8] 0x78dbf6f500
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8] 0x78dbf6f580

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4] 0x78dbf6eb00
	delegate EventFunc;//[Offset: 0x4, Size: 0x10] 0x78dbf6eb80

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8] 0x78dbf6ec80
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x78dbf6ed00
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x78dbf6ed80
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8] 0x78dbf6ee00

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8] 0x78dbf6ef00
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x78dbf6ef80
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x78dbf6f000
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8] 0x78dbf6f080

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8] 0x78dbf6f180
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x78dbf6f200
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x78dbf6f280
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8] 0x78dbf6f300

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4] 0x78d7473800

--------------------------------
Class: TriggerBase.Actor.Object
	ShapeComponent* CollisionComponent;//[Offset: 0x220, Size: 0x8] 0x78d7473380

--------------------------------
Class: TriggerBox.TriggerBase.Actor.Object

--------------------------------
Class: TriggerCapsule.TriggerBase.Actor.Object

--------------------------------
Class: TriggerSphere.TriggerBase.Actor.Object

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: TwitterIntegrationBase.PlatformInterfaceBase.Object
	bool TwitterRequest(FString URL, out const FString[] ParamKeysAndValues, byte RequestMethod, int AccountIndex);// 0xca2eacc 0x78d7465100
	bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);// 0xca2eeec 0x78d74651e0
	void Init();// 0xca2f0f8 0x78d74652c0
	int GetNumAccounts();// 0xca2ee70 0x78d74653a0
	FString GetAccountName(int AccountIndex);// 0xca2ed48 0x78d7465480
	bool CanShowTweetUI();// 0xca2f0b8 0x78d7465560
	bool AuthorizeAccounts();// 0xca2eeac 0x78d7465640

--------------------------------
Class: UserDefinedEnum.Enum.Field.Object
	<FName,FText> DisplayNameMap;//[Offset: 0x60, Size: 0x50] 0x78d7104d80

--------------------------------
Class: UserDefinedStruct.ScriptStruct.Struct.Field.Object
	byte status;//[Offset: 0xc0, Size: 0x1] 0x78d7474b80
	Guid Guid;//[Offset: 0xc4, Size: 0x10] 0x78d7474c00

--------------------------------
Class: UserInterfaceSettings.DeveloperSettings.Object
	enum RenderFocusRule;//[Offset: 0x38, Size: 0x1] 0x78d733da80
	<byte,HardwareCursorReference> HardwareCursors;//[Offset: 0x40, Size: 0x50] 0x78d7104c00
	<byte,SoftClassPath> SoftwareCursors;//[Offset: 0x90, Size: 0x50] 0x78d7104cc0
	SoftClassPath DefaultCursor;//[Offset: 0xe0, Size: 0x18] 0x78d7474380
	SoftClassPath TextEditBeamCursor;//[Offset: 0xf8, Size: 0x18] 0x78d7474400
	SoftClassPath CrosshairsCursor;//[Offset: 0x110, Size: 0x18] 0x78d7474480
	SoftClassPath HandCursor;//[Offset: 0x128, Size: 0x18] 0x78d7474500
	SoftClassPath GrabHandCursor;//[Offset: 0x140, Size: 0x18] 0x78d7474580
	SoftClassPath GrabHandClosedCursor;//[Offset: 0x158, Size: 0x18] 0x78d7474600
	SoftClassPath SlashedCircleCursor;//[Offset: 0x170, Size: 0x18] 0x78d7474680
	float ApplicationScale;//[Offset: 0x188, Size: 0x4] 0x78d7474700
	enum UIScaleRule;//[Offset: 0x18c, Size: 0x1] 0x78d733db20
	SoftClassPath CustomScalingRuleClass;//[Offset: 0x190, Size: 0x18] 0x78d7474800
	RuntimeFloatCurve UIScaleCurve;//[Offset: 0x1a8, Size: 0x88] 0x78d7474880
	bool bAllowHighDPIInGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x78d7474900
	IntPoint DesignScreenSize;//[Offset: 0x234, Size: 0x8] 0x78d7474980
	bool bLoadWidgetsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1] 0x78d7474a00
	Object*[] CursorClasses;//[Offset: 0x240, Size: 0x10] 0x78d733dbc0
	class Object* CustomScalingRuleClassInstance;//[Offset: 0x250, Size: 0x8] 0x78d733dc60
	DPICustomScalingRule* CustomScalingRule;//[Offset: 0x258, Size: 0x8] 0x78d7474b00

--------------------------------
Class: HardwareCursorReference
	FName CursorPath;//[Offset: 0x0, Size: 0x8] 0x78dbf70980
	Vector2D HotSpot;//[Offset: 0x8, Size: 0x8] 0x78dbf70a00

--------------------------------
Class: VectorFieldAnimated.VectorField.Object
	Texture2D* Texture;//[Offset: 0x48, Size: 0x8] 0x78d7475a80
	byte ConstructionOp;//[Offset: 0x50, Size: 0x1] 0x78d7475b00
	int VolumeSizeX;//[Offset: 0x54, Size: 0x4] 0x78d7475b80
	int VolumeSizeY;//[Offset: 0x58, Size: 0x4] 0x78d7475c00
	int VolumeSizeZ;//[Offset: 0x5c, Size: 0x4] 0x78d7475c80
	int SubImagesX;//[Offset: 0x60, Size: 0x4] 0x78d7475d00
	int SubImagesY;//[Offset: 0x64, Size: 0x4] 0x78d7475d80
	int FrameCount;//[Offset: 0x68, Size: 0x4] 0x78d7475e00
	float FramesPerSecond;//[Offset: 0x6c, Size: 0x4] 0x78d7475e80
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78d7475f00
	VectorFieldStatic* NoiseField;//[Offset: 0x78, Size: 0x8] 0x78d7475f80
	float NoiseScale;//[Offset: 0x80, Size: 0x4] 0x78d7476000
	float NoiseMax;//[Offset: 0x84, Size: 0x4] 0x78d7476080

--------------------------------
Class: VectorFieldStatic.VectorField.Object
	int SizeX;//[Offset: 0x48, Size: 0x4] 0x78d7475600
	int SizeY;//[Offset: 0x4c, Size: 0x4] 0x78d7475680
	int SizeZ;//[Offset: 0x50, Size: 0x4] 0x78d7475700
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78d7475780

--------------------------------
Class: VectorFieldComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VectorField* VectorField;//[Offset: 0x470, Size: 0x8] 0x78d7475800
	float Intensity;//[Offset: 0x478, Size: 0x4] 0x78d7475880
	float Tightness;//[Offset: 0x47c, Size: 0x4] 0x78d7475900
	bool bPreviewVectorField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x480, Size: 0x1] 0x78d7475980
	void SetIntensity(float NewIntensity);// 0xca3041c 0x78d7465020

--------------------------------
Class: VectorFieldVolume.Actor.Object
	VectorFieldComponent* VectorFieldComponent;//[Offset: 0x220, Size: 0x8] 0x78d7475580

--------------------------------
Class: ViewportStatsSubsystem.WorldSubsystem.Subsystem.Object
	void RemoveDisplayDelegate(const int IndexToRemove);// 0xca30b38 0x78d7464d80
	void AddTimedDisplay(FText Text, LinearColor Color, float Duration);// 0xca30cb8 0x78d7464e60
	int AddDisplayDelegate(out const delegate Delegate);// 0xca30be0 0x78d7464f40

--------------------------------
Class: VirtualTexture.Object

--------------------------------
Class: LightMapVirtualTexture.VirtualTexture.Object

--------------------------------
Class: VirtualTexturePoolConfig.Object
	int DefaultSizeInMegabyte;//[Offset: 0x28, Size: 0x4] 0x78d7477000
	VirtualTextureSpacePoolConfig[] Pools;//[Offset: 0x30, Size: 0x10] 0x78d733d9e0

--------------------------------
Class: VirtualTextureSpacePoolConfig
	int MinTileSize;//[Offset: 0x0, Size: 0x4] 0x78dbf70480
	int MaxTileSize;//[Offset: 0x4, Size: 0x4] 0x78dbf70500
	byte[] Formats;//[Offset: 0x8, Size: 0x10] 0x78dbf25060
	int SizeInMegabyte;//[Offset: 0x18, Size: 0x4] 0x78dbf70600
	bool bAllowSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78dbf70680
	uint32 ScalabilityGroup;//[Offset: 0x20, Size: 0x4] 0x78dbf70700

--------------------------------
Class: VisualLoggerAutomationTests.Object

--------------------------------
Class: VisualLoggerDebugSnapshotInterface.Interface.Object

--------------------------------
Class: VisualLoggerKismetLibrary.BlueprintFunctionLibrary.Object
	static void RedirectVislog(Object* SourceOwner, Object* DestinationOwner);// 0xca32dfc 0x78d7464840
	static void LogText(Object* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog);// 0xca32bb8 0x78d7464920
	static void LogSegment(Object* WorldContextObject, const Vector SegmentStart, const Vector SegmentEnd, FString Text, LinearColor ObjectColor, const float Thickness, FName CategoryName, bool bAddToMessageLog);// 0xca321d8 0x78d7464a00
	static void LogLocation(Object* WorldContextObject, Vector Location, FString Text, LinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog);// 0xca32870 0x78d7464ae0
	static void LogBox(Object* WorldContextObject, Box BoxShape, FString Text, LinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog);// 0xca32588 0x78d7464bc0
	static void EnableRecording(bool bEnabled);// 0xca32edc 0x78d7464ca0

--------------------------------
Class: VoiceChannel.Channel.Object

--------------------------------
Class: VOIPTalker.ActorComponent.Object
	VoiceSettings Settings;//[Offset: 0xb8, Size: 0x18] 0x78d7478000
	void RegisterWithPlayerState(PlayerState* OwningState);// 0xca370f8 0x78d74643e0
	float GetVoiceLevel();// 0xca370c4 0x78d74644c0
	static VOIPTalker* CreateTalkerForPlayer(PlayerState* OwningState);// 0xca371a0 0x78d74645a0
	void BPOnTalkingEnd();// 0xca36ff8 0x78d7464680
	void BPOnTalkingBegin(AudioComponent* AudioComponent);// 0xca37014 0x78d7464760

--------------------------------
Class: VoiceSettings
	SceneComponent* ComponentToAttachTo;//[Offset: 0x0, Size: 0x8] 0x78dbf70300
	SoundAttenuation* AttenuationSettings;//[Offset: 0x8, Size: 0x8] 0x78dbf70380
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x10, Size: 0x8] 0x78dbf70400

--------------------------------
Class: VOIPStatics.BlueprintFunctionLibrary.Object
	static void SetMicThreshold(float InThreshold);// 0xca377cc 0x78d7464300

--------------------------------
Class: VolumetricCloudComponent.SceneComponent.ActorComponent.Object
	float LayerBottomAltitude;//[Offset: 0x204, Size: 0x4] 0x78d7479280
	float LayerHeight;//[Offset: 0x208, Size: 0x4] 0x78d7479300
	float TracingStartMaxDistance;//[Offset: 0x20c, Size: 0x4] 0x78d7479380
	float TracingMaxDistance;//[Offset: 0x210, Size: 0x4] 0x78d7479400
	float PlanetRadius;//[Offset: 0x214, Size: 0x4] 0x78d7479480
	Color GroundAlbedo;//[Offset: 0x218, Size: 0x4] 0x78d7477400
	MaterialInterface* Material;//[Offset: 0x220, Size: 0x8] 0x78d7477480
	bool bUsePerSampleAtmosphericLightTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78d7477500
	float SkyLightCloudBottomOcclusion;//[Offset: 0x22c, Size: 0x4] 0x78d7477580
	float ViewSampleCountScale;//[Offset: 0x230, Size: 0x4] 0x78d7477600
	float ReflectionSampleCountScale;//[Offset: 0x234, Size: 0x4] 0x78d7477680
	float ShadowViewSampleCountScale;//[Offset: 0x238, Size: 0x4] 0x78d7477700
	float ShadowReflectionSampleCountScale;//[Offset: 0x23c, Size: 0x4] 0x78d7477780
	float ShadowTracingDistance;//[Offset: 0x240, Size: 0x4] 0x78d7477800
	void SetViewSampleCountScale(float NewValue);// 0xca381c0 0x78d7467080
	void SetTracingStartMaxDistance(float NewValue);// 0xca385b4 0x78d7467160
	void SetTracingMaxDistance(float NewValue);// 0xca3850c 0x78d7467240
	void SetSkyLightCloudBottomOcclusion(float NewValue);// 0xca38268 0x78d7467320
	void SetShadowViewSampleCountScale(float NewValue);// 0xca38070 0x78d7463a40
	void SetShadowTracingDistance(float NewValue);// 0xca37f20 0x78d7463b20
	void SetShadowReflectionSampleCountScale(float NewValue);// 0xca37fc8 0x78d7463c00
	void SetReflectionSampleCountScale(float NewValue);// 0xca38118 0x78d7463ce0
	void SetPlanetRadius(float NewValue);// 0xca38464 0x78d7463dc0
	void SetMaterial(MaterialInterface* NewValue);// 0xca37e78 0x78d7463ea0
	void SetLayerHeight(float NewValue);// 0xca3865c 0x78d7463f80
	void SetLayerBottomAltitude(float NewValue);// 0xca38704 0x78d7464060
	void SetGroundAlbedo(Color NewValue);// 0xca383c0 0x78d7464140
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);// 0xca38310 0x78d7464220

--------------------------------
Class: VolumetricCloud.Info.Actor.Object
	VolumetricCloudComponent* VolumetricCloudComponent;//[Offset: 0x220, Size: 0x8] 0x78d7479200

--------------------------------
Class: VolumetricLightmapDensityVolume.Volume.Brush.Actor.Object
	Int32Interval AllowedMipLevelRange;//[Offset: 0x258, Size: 0x8] 0x78d7479180

--------------------------------
Class: Int32Interval
	int Min;//[Offset: 0x0, Size: 0x4] 0x78e6835f00
	int Max;//[Offset: 0x4, Size: 0x4] 0x78e6835f80

--------------------------------
Class: WindDirectionalSource.Info.Actor.Object
	WindDirectionalSourceComponent* Component;//[Offset: 0x220, Size: 0x8] 0x78d7479100

--------------------------------
Class: WindDirectionalSourceComponent.SceneComponent.ActorComponent.Object
	float Strength;//[Offset: 0x204, Size: 0x4] 0x78d7478b00
	float Speed;//[Offset: 0x208, Size: 0x4] 0x78d7478b80
	float MinGustAmount;//[Offset: 0x20c, Size: 0x4] 0x78d7478c00
	float MaxGustAmount;//[Offset: 0x210, Size: 0x4] 0x78d7478c80
	float Radius;//[Offset: 0x214, Size: 0x4] 0x78d7478d00
	bool bPointWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1] 0x78d7478d80
	void SetWindType(enum InNewType);// 0xca39420 0x78d7466b40
	void SetStrength(float InNewStrength);// 0xca39768 0x78d7466c20
	void SetSpeed(float InNewSpeed);// 0xca396c0 0x78d7466d00
	void SetRadius(float InNewRadius);// 0xca394c8 0x78d7466de0
	void SetMinimumGustAmount(float InNewMinGust);// 0xca39618 0x78d7466ec0
	void SetMaximumGustAmount(float InNewMaxGust);// 0xca39570 0x78d7466fa0

--------------------------------
Class: LandscapeInfoMap.Object

--------------------------------
Class: HierarchicalLODSetup.Object
	HierarchicalSimplification[] HierarchicalLODSetup;//[Offset: 0x28, Size: 0x10] 0x78d733d260
	MaterialInterface* OverrideBaseMaterial;//[Offset: 0x38, Size: 0x28] 0x78d7479780

--------------------------------
Class: HierarchicalSimplification
	float TransitionScreenSize;//[Offset: 0x0, Size: 0x4] 0x78dbf71300
	float OverrideDrawDistance;//[Offset: 0x4, Size: 0x4] 0x78dbf71380
	bool bUseOverrideDrawDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78dbf71400
	bool bAllowSpecificExclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x78dbf71480
	bool bSimplifyMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x78dbf71500
	bool bOnlyGenerateClustersForVolumes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x78dbf71580
	bool bReusePreviousLevelClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1] 0x78dbf71600
	MeshProxySettings ProxySetting;//[Offset: 0xc, Size: 0xa8] 0x78dbf71680
	MeshMergingSettings MergeSetting;//[Offset: 0xb4, Size: 0xa0] 0x78dbf71700
	float DesiredBoundRadius;//[Offset: 0x154, Size: 0x4] 0x78dbf71780
	float DesiredFillingPercentage;//[Offset: 0x158, Size: 0x4] 0x78dbf71800
	int MinNumberOfActorsToBuild;//[Offset: 0x15c, Size: 0x4] 0x78dbf71880

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 0x4] 0x78dbf30e00
	float VoxelSize;//[Offset: 0x4, Size: 0x4] 0x78dbf30e80
	MaterialProxySettings MaterialSettings;//[Offset: 0x8, Size: 0x88] 0x78dbf30f00
	float MergeDistance;//[Offset: 0x90, Size: 0x4] 0x78dbf30f80
	Color UnresolvedGeometryColor;//[Offset: 0x94, Size: 0x4] 0x78dbf31000
	float MaxRayCastDist;//[Offset: 0x98, Size: 0x4] 0x78dbf31080
	float HardAngleThreshold;//[Offset: 0x9c, Size: 0x4] 0x78dbf1f800
	int LightMapResolution;//[Offset: 0xa0, Size: 0x4] 0x78dbf1f880
	byte NormalCalculationMethod;//[Offset: 0xa4, Size: 0x1] 0x78dbf1f900
	byte LandscapeCullingPrecision;//[Offset: 0xa5, Size: 0x1] 0x78dbf1f980
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa6, Size: 0x1] 0x78dbf1fa00
	bool bOverrideVoxelSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa6, Size: 0x1] 0x78dbf1fa80
	bool bOverrideTransferDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa6, Size: 0x1] 0x78dbf1fb00
	bool bUseHardAngleThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa6, Size: 0x1] 0x78dbf1fb80
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa6, Size: 0x1] 0x78dbf1fc00
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa6, Size: 0x1] 0x78dbf1fc80
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa6, Size: 0x1] 0x78dbf1fd00
	bool bAllowAdjacency;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa6, Size: 0x1] 0x78dbf1fd80
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa7, Size: 0x1] 0x78dbf1fe00
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa7, Size: 0x1] 0x78dbf1fe80
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa7, Size: 0x1] 0x78dbf1ff00
	bool bAllowVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa7, Size: 0x1] 0x78dbf1ff80
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa7, Size: 0x1] 0x78dbf1e780

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 0x8] 0x78dbf1a300
	float GutterSpace;//[Offset: 0x8, Size: 0x4] 0x78dbf1a380
	float MetallicConstant;//[Offset: 0xc, Size: 0x4] 0x78dbf1a400
	float RoughnessConstant;//[Offset: 0x10, Size: 0x4] 0x78dbf1a480
	float AnisotropyConstant;//[Offset: 0x14, Size: 0x4] 0x78dbf1a500
	float SpecularConstant;//[Offset: 0x18, Size: 0x4] 0x78dbf18480
	float OpacityConstant;//[Offset: 0x1c, Size: 0x4] 0x78dbf18500
	float OpacityMaskConstant;//[Offset: 0x20, Size: 0x4] 0x78dbf18580
	float AmbientOcclusionConstant;//[Offset: 0x24, Size: 0x4] 0x78dbf18600
	byte TextureSizingType;//[Offset: 0x28, Size: 0x1] 0x78dbf18680
	byte MaterialMergeType;//[Offset: 0x29, Size: 0x1] 0x78dbf18700
	byte BlendMode;//[Offset: 0x2a, Size: 0x1] 0x78dbf18780
	bool bAllowTwoSidedMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78dbf18800
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x78dbf18880
	bool bTangentMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x78dbf18900
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b, Size: 0x1] 0x78dbf18980
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b, Size: 0x1] 0x78dbf18a00
	bool bAnisotropyMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b, Size: 0x1] 0x78dbf18a80
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b, Size: 0x1] 0x78dbf18b00
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b, Size: 0x1] 0x78dbf18b80
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x78dbf18c00
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1] 0x78dbf18c80
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1] 0x78dbf18d00
	IntPoint DiffuseTextureSize;//[Offset: 0x30, Size: 0x8] 0x78dbf18d80
	IntPoint NormalTextureSize;//[Offset: 0x38, Size: 0x8] 0x78dbf18e00
	IntPoint TangentTextureSize;//[Offset: 0x40, Size: 0x8] 0x78dbf18e80
	IntPoint MetallicTextureSize;//[Offset: 0x48, Size: 0x8] 0x78dbf18f00
	IntPoint RoughnessTextureSize;//[Offset: 0x50, Size: 0x8] 0x78dbf18f80
	IntPoint AnisotropyTextureSize;//[Offset: 0x58, Size: 0x8] 0x78dbf19000
	IntPoint SpecularTextureSize;//[Offset: 0x60, Size: 0x8] 0x78dbf19080
	IntPoint EmissiveTextureSize;//[Offset: 0x68, Size: 0x8] 0x78dbf19100
	IntPoint OpacityTextureSize;//[Offset: 0x70, Size: 0x8] 0x78dbf19180
	IntPoint OpacityMaskTextureSize;//[Offset: 0x78, Size: 0x8] 0x78dbf19200
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x80, Size: 0x8] 0x78dbf19280

--------------------------------
Class: MeshMergingSettings
	int TargetLightMapResolution;//[Offset: 0x0, Size: 0x4] 0x78dbf1e800
	enum OutputUVs;//[Offset: 0x4, Size: 0x1] 0x78dbf20c40
	MaterialProxySettings MaterialSettings;//[Offset: 0xc, Size: 0x88] 0x78dbf1e900
	int GutterSize;//[Offset: 0x94, Size: 0x4] 0x78dbf1e980
	int SpecificLOD;//[Offset: 0x98, Size: 0x4] 0x78dbf1ea00
	enum LODSelectionType;//[Offset: 0x9c, Size: 0x1] 0x78dbf20ce0
	bool bGenerateLightMapUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d, Size: 0x1] 0x78dbf1eb00
	bool bComputedLightMapResolution;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9d, Size: 0x1] 0x78dbf1eb80
	bool bPivotPointAtZero;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9d, Size: 0x1] 0x78dbf1ec00
	bool bMergePhysicsData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9d, Size: 0x1] 0x78dbf1ec80
	bool bMergeMaterials;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9d, Size: 0x1] 0x78dbf1ed00
	bool bCreateMergedMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9d, Size: 0x1] 0x78dbf1ed80
	bool bBakeVertexDataToMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9d, Size: 0x1] 0x78dbf1ee00
	bool bUseVertexDataForBakingMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9d, Size: 0x1] 0x78dbf1ee80
	bool bUseTextureBinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e, Size: 0x1] 0x78dbf1ef00
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9e, Size: 0x1] 0x78dbf1ef80
	bool bMergeEquivalentMaterials;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9e, Size: 0x1] 0x78dbf1f000
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9e, Size: 0x1] 0x78dbf1f080
	bool bIncludeImposters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9e, Size: 0x1] 0x78dbf1f100
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9e, Size: 0x1] 0x78dbf1f180

--------------------------------
Class: DmgTypeBP_Environmental_C.DamageType.Object

--------------------------------
Class: UIParticle.Widget.Visual.Object
	UIParticleAsset* Asset;//[Offset: 0x108, Size: 0x8] 0x78dbf7c780
	delegate EventOnEnd;//[Offset: 0x110, Size: 0x10] 0x78dbf7c800
	bool bPlayParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1] 0x78dbf7c880
	bool IsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1] 0x78dbf7c900
	void StopEmit();// 0x4b120dc 0x78d3605c60
	void Stop();// 0x4b120f0 0x78d3605d40
	void SetPlayParticle(bool InPlayParticle);// 0x4b1202c 0x78e700ab20
	void Play();// 0x4b12104 0x78d3606fa0

--------------------------------
Class: UIParticleAsset.Object
	bool AutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dbf7c680
	UIParticleEmitterInfo[] Emitters;//[Offset: 0x30, Size: 0x10] 0x78dbf25880

--------------------------------
Class: UIParticleEmitterInfo
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cdbb1780
	float ActiveDelay;//[Offset: 0x4, Size: 0x4] 0x78cdbb1800
	int ZOrder;//[Offset: 0x8, Size: 0x4] 0x78cdbb1880
	UIParticleEmitterAsset* Asset;//[Offset: 0x10, Size: 0x8] 0x78cdbb1980

--------------------------------
Class: UIParticleEmitterAsset.Object
	bool AutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dbf7ee00
	float StartTimeOffset;//[Offset: 0x2c, Size: 0x4] 0x78dbf7ee80
	int SamplingTimes;//[Offset: 0x30, Size: 0x4] 0x78dbf7ef00
	enum EmitterType;//[Offset: 0x34, Size: 0x1] 0x78dbf25420
	float EmitSeconds;//[Offset: 0x38, Size: 0x4] 0x78dbf7f000
	UIParticleProperty MaxParticleCount;//[Offset: 0x40, Size: 0x7e8] 0x78dbf7f080
	UIParticleProperty SpawnParticlePerSecond;//[Offset: 0x828, Size: 0x7e8] 0x78dbf7f100
	UIParticleProperty ParticleEmitAngle;//[Offset: 0x1010, Size: 0x7e8] 0x78dbf7f180
	Range_Vector2D EmitPosRange;//[Offset: 0x17f8, Size: 0x14] 0x78dbf7f200
	Posotion_Vector2DCurve EmitPosition;//[Offset: 0x1810, Size: 0xfd0] 0x78dbf7f280
	bool AutoEmitPosRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27e0, Size: 0x1] 0x78dbf7f300
	bool AutoScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27e1, Size: 0x1] 0x78dbf7f380
	bool ScaleByX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27e2, Size: 0x1] 0x78dbf7f400
	Vector2D DesignSize;//[Offset: 0x27e4, Size: 0x8] 0x78dbf7f480
	bool EmitAngleByWidgetAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27ec, Size: 0x1] 0x78dbf7f500
	enum PositionType;//[Offset: 0x27ed, Size: 0x1] 0x78dbf254c0
	UIParticleProperty LifeSpan;//[Offset: 0x27f0, Size: 0x7e8] 0x78dbf7f600
	UIParticleProperty Size;//[Offset: 0x2fd8, Size: 0x7e8] 0x78dbf7f680
	UIParticleProperty Pivot;//[Offset: 0x37c0, Size: 0x7e8] 0x78dbf7f700
	UIParticleProperty RotationStart;//[Offset: 0x3fa8, Size: 0x7e8] 0x78dbf7f780
	UIParticleProperty RotationSpeed;//[Offset: 0x4790, Size: 0x7e8] 0x78dbf7d700
	UIParticleProperty Color;//[Offset: 0x4f78, Size: 0x7e8] 0x78dbf7d780
	Object* ResourceObject;//[Offset: 0x5760, Size: 0x8] 0x78dbf7d800
	bool RotationFollowSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5768, Size: 0x1] 0x78dbf7d880
	bool UseSeparateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5769, Size: 0x1] 0x78dbf7d900
	UIParticleProperty Gravity;//[Offset: 0x5770, Size: 0x7e8] 0x78dbf7d980
	UIParticleProperty StartSpeed;//[Offset: 0x5f58, Size: 0x7e8] 0x78dbf7da00
	UIParticleProperty AirResistance;//[Offset: 0x6740, Size: 0x7e8] 0x78dbf7da80
	UIParticleProperty RadialAcceleration;//[Offset: 0x6f28, Size: 0x7e8] 0x78dbf7db00
	UIParticleProperty TangentialAcceleration;//[Offset: 0x7710, Size: 0x7e8] 0x78dbf7db80
	UIParticleProperty Radius;//[Offset: 0x7ef8, Size: 0x7e8] 0x78dbf7dc00
	UIParticleProperty DegreePerSecond;//[Offset: 0x86e0, Size: 0x7e8] 0x78dbf7dc80
	UIParticleProperty PositionX;//[Offset: 0x8ec8, Size: 0x7e8] 0x78dbf7dd00
	UIParticleProperty PositionY;//[Offset: 0x96b0, Size: 0x7e8] 0x78dbf7dd80
	ChildEmitter[] ChildrenEmitters;//[Offset: 0x9e98, Size: 0x10] 0x78dbf25560
	ScalarParamCurve[] ScalarParams;//[Offset: 0x9ea8, Size: 0x10] 0x78dbf25600
	ScalarParamCurve[] ScalarParamsWhenStart;//[Offset: 0x9eb8, Size: 0x10] 0x78dbf256a0
	enum DrawEffect;//[Offset: 0x9ec8, Size: 0x1] 0x78dbf25740
	bool UseScaleFollowSpeedDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ec9, Size: 0x1] 0x78dbf7e000
	UIParticleProperty ScaleFollowSpeedDirection;//[Offset: 0x9ed0, Size: 0x7e8] 0x78dbf7e080
	bool UseScaleFollowSpeedVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6b8, Size: 0x1] 0x78dbf7e100
	UIParticleProperty ScaleFollowSpeedVertical;//[Offset: 0xa6c0, Size: 0x7e8] 0x78dbf7e180
	UIParticleProperty DirectionScale;//[Offset: 0xaea8, Size: 0x7e8] 0x78dbf7e200
	UIParticleProperty VerticalDirectionScale;//[Offset: 0xb690, Size: 0x7e8] 0x78dbf7e280
	UIParticleProperty SineDirectionStart;//[Offset: 0xbe78, Size: 0x7e8] 0x78dbf7e300
	UIParticleProperty SineDirectionSpeed;//[Offset: 0xc660, Size: 0x7e8] 0x78dbf7e380
	UIParticleProperty SineDirectionRange;//[Offset: 0xce48, Size: 0x7e8] 0x78dbf7e400
	UIParticleEmitterAsset*[] LevelOfDetail;//[Offset: 0xd630, Size: 0x10] 0x78dbf257e0

--------------------------------
Class: UIParticleProperty
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78d3610b00
	float FloatValue;//[Offset: 0x4, Size: 0x4] 0x78cdbb2200
	Range_Float FloatRangeValue;//[Offset: 0x8, Size: 0x8] 0x78cdbb2380
	UIParticleFloatCurve FloatCurveValue;//[Offset: 0x10, Size: 0x88] 0x78cdbb2400
	Range_FloatCurve FloatCurveRangeValue;//[Offset: 0x98, Size: 0x110] 0x78cdbb2700
	Vector2D Vector2DValue;//[Offset: 0x1a8, Size: 0x8] 0x78cdbb2780
	Range_Vector2D Vector2DRangeValue;//[Offset: 0x1b0, Size: 0x14] 0x78cdbb2a00
	UIParticleLinearColorCurve LinearColorCurveValue;//[Offset: 0x1c8, Size: 0x208] 0x78cdbb2a80
	Range_LinearColorCurve LinearColorCurveRangeValue;//[Offset: 0x3d0, Size: 0x418] 0x78cdbb1680

--------------------------------
Class: Range_Float
	float Min;//[Offset: 0x0, Size: 0x4] 0x78cdbb2280
	float Max;//[Offset: 0x4, Size: 0x4] 0x78cdbb2300

--------------------------------
Class: UIParticleFloatCurve
	RichCurve CurveData;//[Offset: 0x0, Size: 0x80] 0x78cdbb2500
	enum CurveType;//[Offset: 0x80, Size: 0x1] 0x78d3610c40
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1] 0x78cdbb2600

--------------------------------
Class: Range_FloatCurve
	UIParticleFloatCurve Min;//[Offset: 0x0, Size: 0x88] 0x78cdbb2480
	UIParticleFloatCurve Max;//[Offset: 0x88, Size: 0x88] 0x78cdbb2680

--------------------------------
Class: Range_Vector2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8] 0x78cdbb2800
	Vector2D Max;//[Offset: 0x8, Size: 0x8] 0x78cdbb2880
	bool RandomKey_X_Y;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78cdbb2900

--------------------------------
Class: UIParticleLinearColorCurve
	RichCurve ColorCurves;//[Offset: 0x0, Size: 0x80] 0x78cdbb1180
	enum CurveType;//[Offset: 0x200, Size: 0x1] 0x78d3610ce0
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1] 0x78cdbb1280

--------------------------------
Class: Range_LinearColorCurve
	UIParticleLinearColorCurve Min;//[Offset: 0x0, Size: 0x208] 0x78cdbb2b00
	UIParticleLinearColorCurve Max;//[Offset: 0x208, Size: 0x208] 0x78cdbb1300
	bool RandomKey_R_G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1] 0x78cdbb1380
	bool RandomKey_R_B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 0x1] 0x78cdbb1400
	bool RandomKey_R_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x412, Size: 0x1] 0x78cdbb1480
	bool RandomKey_G_B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x413, Size: 0x1] 0x78cdbb1500
	bool RandomKey_G_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1] 0x78cdbb1580
	bool RandomKey_B_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 0x1] 0x78cdbb1600

--------------------------------
Class: Posotion_Vector2DCurve
	UIParticleProperty X;//[Offset: 0x0, Size: 0x7e8] 0x78cdbb4000
	UIParticleProperty Y;//[Offset: 0x7e8, Size: 0x7e8] 0x78cdbb4080

--------------------------------
Class: ChildEmitter
	float ActivityInParentLifeTime;//[Offset: 0x0, Size: 0x4] 0x78cdbb3c80
	bool FollowParentPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78cdbb3d00
	float FollowParentSpeedPercent;//[Offset: 0x8, Size: 0x4] 0x78cdbb3d80
	int ZOrderOffset;//[Offset: 0xc, Size: 0x4] 0x78cdbb3e00
	UIParticleEmitterAsset* ChildrenAsset;//[Offset: 0x10, Size: 0x8] 0x78cdbb3e80

--------------------------------
Class: ScalarParamCurve
	FName ScalarParamName;//[Offset: 0x0, Size: 0x8] 0x78cdbb4200
	UIParticleProperty Value;//[Offset: 0x8, Size: 0x7e8] 0x78cdbb1700

--------------------------------
Class: UIParticleEmitter.Widget.Visual.Object
	UIParticleEmitterAsset* Asset;//[Offset: 0x108, Size: 0x8] 0x78dbf7e500
	delegate EventOnEnd;//[Offset: 0x110, Size: 0x10] 0x78dbf7e580
	bool bPlayParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1] 0x78dbf7e600
	bool IsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1] 0x78dbf7e680
	void StopEmit();// 0x4b12994 0x78d36058e0
	void Stop();// 0x4b129a8 0x78d36059c0
	void SetPlayParticle(bool InPlayParticle);// 0x4b128e4 0x78d3605aa0
	void Play();// 0x4b129bc 0x78d3605b80

--------------------------------
Class: UIParticleUtility.Object
	static void SetMultiThread(bool Value);// 0x4b141fc 0x78d3608f20
	static void SetLOD(int newlod);// 0x4b142d0 0x78d3609000
	static bool GetMultiThread();// 0x4b141c4 0x78d3605720
	static int GetLOD();// 0x4b1429c 0x78d3605800

--------------------------------
Class: EasyParticle.Widget.Visual.Object
	EasyParticleAsset* Asset;//[Offset: 0x108, Size: 0x8] 0x78dbf7e980
	delegate EventOnEnd;//[Offset: 0x110, Size: 0x10] 0x78dbf7ea00
	bool bPlayParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1] 0x78dbf7ea80
	bool IsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1] 0x78dbf7eb00
	void StopEmit();// 0x4b27d60 0x78d3608ba0
	void Stop();// 0x4b27d74 0x78d3608c80
	void SetPlayParticle(bool InPlayParticle);// 0x4b27cb0 0x78d3608d60
	void Play();// 0x4b27d88 0x78d3608e40

--------------------------------
Class: EasyParticleAsset.Object
	EasyParticleEmitterAsset*[] Emitters;//[Offset: 0x28, Size: 0x10] 0x78dbf252e0

--------------------------------
Class: EasyParticleEmitterAsset.Object
	EasyParticleComponent*[] Components;//[Offset: 0x28, Size: 0x10] 0x78dbf25380

--------------------------------
Class: EasyParticleComponent.Object
	bool Active;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dbf7fe00
	class EasyParticleComponentRuntime* RuntimeClass;//[Offset: 0x30, Size: 0x8] 0x78dbf27a40
	FString TypeName;//[Offset: 0x38, Size: 0x10] 0x78dbf7fe80
	enum Priority;//[Offset: 0x48, Size: 0x1] 0x78dbf27ae0
	FString GetTypeName();// 0x4b289a4 0x78d3608900
	enum GetPriority();// 0x4b2892c 0x78d36089e0
	EasyParticleComponentRuntime* CreateRuntimeComponent();// 0x4b28968 0x78d3608ac0

--------------------------------
Class: EasyParticleComponentRuntime.Object
	EasyParticleComponent* ParentAsset;//[Offset: 0x28, Size: 0x8] 0x78dbf7fa80
	EasyParticleState* Owner;//[Offset: 0x30, Size: 0x8] 0x78dbf7fb00
	void Tick(out const Geometry AllottedGeometry, const float InDeltaTime);// 0x4b28fe8 0x78d3608580
	void Reset();// 0x4b28ec8 0x78d3608660
	void PostTick(out const Geometry AllottedGeometry, const float InDeltaTime);// 0x4b28ee4 0x78d3608740
	void Init(out const Geometry AllottedGeometry);// 0x4b290ec 0x78d3608820

--------------------------------
Class: EasyParticleState.Object
	EasyParticleComponentRuntime*[] Components;//[Offset: 0x28, Size: 0x10] 0x78dbf27860
	EasyParticleEmitterAsset* Asset;//[Offset: 0x38, Size: 0x8] 0x78dbf92580
	EasyParticleStateRuntime InitialState;//[Offset: 0x40, Size: 0x50] 0x78dbf92600
	EasyParticleStateRuntime CurrentState;//[Offset: 0x90, Size: 0x50] 0x78dbf92680
	EasyParticleStateRuntime BackBufferState;//[Offset: 0xe0, Size: 0x50] 0x78dbf92700
	EasyParticleComponent_Child_Runtime* ParentComponent;//[Offset: 0x130, Size: 0x8] 0x78dbf92780
	enum State;//[Offset: 0x138, Size: 0x1] 0x78dbf27900

--------------------------------
Class: EasyParticleStateRuntime
	float Lifetime;//[Offset: 0x0, Size: 0x4] 0x78cdbb5e80
	Vector2D Velocity;//[Offset: 0x4, Size: 0x8] 0x78cdbb5f00
	Vector2D Position;//[Offset: 0xc, Size: 0x8] 0x78cdbb5f80
	Vector2D Size;//[Offset: 0x14, Size: 0x8] 0x78cdbb6000
	float Rotation;//[Offset: 0x1c, Size: 0x4] 0x78cdbb6080
	float RotationRate;//[Offset: 0x20, Size: 0x4] 0x78cdbb6100
	LinearColor Color;//[Offset: 0x24, Size: 0x10] 0x78cdbb6180
	float AutoSizeScale;//[Offset: 0x34, Size: 0x4] 0x78cdbb6200
	Vector2D WidgetPositionAbsolute;//[Offset: 0x38, Size: 0x8] 0x78cdbb6280
	Vector2D Pivot;//[Offset: 0x40, Size: 0x8] 0x78cdbb6300
	float ZOrderOffset;//[Offset: 0x48, Size: 0x4] 0x78cdbb4280
	float RootEmitterLifetime;//[Offset: 0x4c, Size: 0x4] 0x78cdbb4300

--------------------------------
Class: EasyParticleComponent_Child_Runtime.EasyParticleComponentRuntime.Object
	EasyParticleComponentRuntime_Child_SubEmitter[] ChildEmitterArray;//[Offset: 0x38, Size: 0x10] 0x78dbf279a0
	bool StopCreateParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78dbf90a00

--------------------------------
Class: EasyParticleComponentRuntime_Child_SubEmitter
	EasyParticleEmitterAsset* Asset;//[Offset: 0x0, Size: 0x8] 0x78cdbb3480
	EasyParticleState*[] ChildArray;//[Offset: 0x8, Size: 0x10] 0x78d3610a60
	EasyParticleComponent_Child_Runtime* ComponentOwner;//[Offset: 0x18, Size: 0x8] 0x78cdbb3580
	UIParticleRandomFactor MaxParticleCountFactor;//[Offset: 0x20, Size: 0x4] 0x78cdbb3600
	UIParticleRandomFactor SpawnRateFactor;//[Offset: 0x24, Size: 0x4] 0x78cdbb3680
	float DelayActive;//[Offset: 0x28, Size: 0x4] 0x78cdbb3700
	float Deadtime;//[Offset: 0x2c, Size: 0x4] 0x78cdbb3780
	int ChildLayer;//[Offset: 0x30, Size: 0x4] 0x78cdbb3800
	float ActiveParentLifePercent;//[Offset: 0x34, Size: 0x4] 0x78cdbb3880

--------------------------------
Class: UIParticleRandomFactor

--------------------------------
Class: EasyParticleComponent_Basic.EasyParticleComponent.Object
	Object* ResourceObject;//[Offset: 0x50, Size: 0x8] 0x78dbf90d00
	float EmitSeconds;//[Offset: 0x58, Size: 0x4] 0x78dbf90d80
	EasyParticlePropertyFloat MaxParticleCount;//[Offset: 0x60, Size: 0x1a8] 0x78dbf90e00
	EasyParticlePropertyFloat SpawnRate;//[Offset: 0x208, Size: 0x1a8] 0x78dbf90e80
	EasyParticlePropertyFloat Lifetime;//[Offset: 0x3b0, Size: 0x1a8] 0x78dbf90f00

--------------------------------
Class: EasyParticlePropertyFloat
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78d36107e0
	float FloatValue;//[Offset: 0x4, Size: 0x4] 0x78cdbb4400
	UIParticleRange_Float FloatRangeValue;//[Offset: 0x8, Size: 0x8] 0x78cdbb4580
	EasyParticleFloatCurve FloatCurveValue;//[Offset: 0x10, Size: 0x88] 0x78cdbb4600
	UIParticleRange_FloatCurve FloatCurveRangeValue;//[Offset: 0x98, Size: 0x110] 0x78cdbb4900

--------------------------------
Class: UIParticleRange_Float
	float Min;//[Offset: 0x0, Size: 0x4] 0x78cdbb4480
	float Max;//[Offset: 0x4, Size: 0x4] 0x78cdbb4500

--------------------------------
Class: EasyParticleFloatCurve
	RichCurve CurveData;//[Offset: 0x0, Size: 0x80] 0x78cdbb4700
	enum CurveType;//[Offset: 0x80, Size: 0x1] 0x78d3610880
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1] 0x78cdbb4800

--------------------------------
Class: UIParticleRange_FloatCurve
	EasyParticleFloatCurve Min;//[Offset: 0x0, Size: 0x88] 0x78cdbb4680
	EasyParticleFloatCurve Max;//[Offset: 0x88, Size: 0x88] 0x78cdbb4880

--------------------------------
Class: EasyParticleComponent_Acceleration.EasyParticleComponent.Object
	EasyParticlePropertyFloat Acceleration;//[Offset: 0x50, Size: 0x1a8] 0x78dbf7fa00

--------------------------------
Class: EasyParticleComponent_Acceleration_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78dbf7f980

--------------------------------
Class: EasyParticleComponent_AdditionPositionOffset.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialTime;//[Offset: 0x50, Size: 0x1a8] 0x78dbf7f800
	EasyParticlePropertyFloat Frequency;//[Offset: 0x1f8, Size: 0x1a8] 0x78dbf7f880
	EasyParticlePropertyFloat Amplitude;//[Offset: 0x3a0, Size: 0x1a8] 0x78dbf7f900

--------------------------------
Class: EasyParticleComponent_AdditionPositionOffset_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorInitialTime;//[Offset: 0x38, Size: 0x4] 0x78dbf90f80
	UIParticleRandomFactor FactorFrequency;//[Offset: 0x3c, Size: 0x4] 0x78dbf91000
	UIParticleRandomFactor FactorAmplitude;//[Offset: 0x40, Size: 0x4] 0x78dbf91080

--------------------------------
Class: EasyParticleComponent_Basic_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor MaxParticleCountFactor;//[Offset: 0x38, Size: 0x4] 0x78dbf90b80
	UIParticleRandomFactor SpawnRateFactor;//[Offset: 0x3c, Size: 0x4] 0x78dbf90c00
	UIParticleRandomFactor LifetimeFactor;//[Offset: 0x40, Size: 0x4] 0x78dbf90c80

--------------------------------
Class: EasyParticleComponent_Child.EasyParticleComponent.Object
	EasyParticleAsset* Asset;//[Offset: 0x50, Size: 0x8] 0x78dbf90a80
	float ActiveParentLifePercent;//[Offset: 0x58, Size: 0x4] 0x78dbf90b00

--------------------------------
Class: EasyParticleComponent_Color.EasyParticleComponent.Object
	EasyParticlePropertyColor InitialColor;//[Offset: 0x50, Size: 0x660] 0x78dbf90900

--------------------------------
Class: EasyParticlePropertyColor
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78d3610920
	LinearColor ColorValue;//[Offset: 0x4, Size: 0x10] 0x78cdbb4a00
	UIParticleRange_Color ColorRangeValue;//[Offset: 0x14, Size: 0x28] 0x78cdbb4e80
	EasyParticleLinearColorCurve ColorCurveValue;//[Offset: 0x40, Size: 0x208] 0x78cdbb4f00
	UIParticleRange_LinearColorCurve ColorCurveRangeValue;//[Offset: 0x248, Size: 0x418] 0x78cdbb3400

--------------------------------
Class: UIParticleRange_Color
	LinearColor Min;//[Offset: 0x0, Size: 0x10] 0x78cdbb4a80
	LinearColor Max;//[Offset: 0x10, Size: 0x10] 0x78cdbb4b00
	bool RandomKey_R_G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78cdbb4b80
	bool RandomKey_R_B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x78cdbb4c00
	bool RandomKey_R_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1] 0x78cdbb4c80
	bool RandomKey_G_B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 0x1] 0x78cdbb4d00
	bool RandomKey_G_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x78cdbb4d80
	bool RandomKey_B_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1] 0x78cdbb4e00

--------------------------------
Class: EasyParticleLinearColorCurve
	RichCurve ColorCurves;//[Offset: 0x0, Size: 0x80] 0x78cdbb5000
	enum CurveType;//[Offset: 0x200, Size: 0x1] 0x78d36109c0
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1] 0x78cdbb5100

--------------------------------
Class: UIParticleRange_LinearColorCurve
	EasyParticleLinearColorCurve Min;//[Offset: 0x0, Size: 0x208] 0x78cdbb4f80
	EasyParticleLinearColorCurve Max;//[Offset: 0x208, Size: 0x208] 0x78cdbb5180
	bool RandomKey_R_G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1] 0x78cdbb5200
	bool RandomKey_R_B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 0x1] 0x78cdbb5280
	bool RandomKey_R_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x412, Size: 0x1] 0x78cdbb3200
	bool RandomKey_G_B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x413, Size: 0x1] 0x78cdbb3280
	bool RandomKey_G_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1] 0x78cdbb3300
	bool RandomKey_B_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 0x1] 0x78cdbb3380

--------------------------------
Class: EasyParticleComponent_Color_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorR;//[Offset: 0x38, Size: 0x4] 0x78dbf90700
	UIParticleRandomFactor FactorG;//[Offset: 0x3c, Size: 0x4] 0x78dbf90780
	UIParticleRandomFactor FactorB;//[Offset: 0x40, Size: 0x4] 0x78dbf90800
	UIParticleRandomFactor FactorA;//[Offset: 0x44, Size: 0x4] 0x78dbf90880

--------------------------------
Class: EasyParticleComponent_DelayActive.EasyParticleComponent.Object
	EasyParticlePropertyFloat Value;//[Offset: 0x50, Size: 0x1a8] 0x78dbf90680

--------------------------------
Class: EasyParticleComponent_DelayActive_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78dbf90600

--------------------------------
Class: EasyParticleComponent_FollowParentPosition.EasyParticleComponent.Object

--------------------------------
Class: EasyParticleComponent_FollowParentPosition_Runtime.EasyParticleComponentRuntime.Object

--------------------------------
Class: EasyParticleComponent_Gravity.EasyParticleComponent.Object
	EasyParticlePropertyFloat GravityX;//[Offset: 0x50, Size: 0x1a8] 0x78dbf90500
	EasyParticlePropertyFloat GravityY;//[Offset: 0x1f8, Size: 0x1a8] 0x78dbf90580

--------------------------------
Class: EasyParticleComponent_Gravity_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorX;//[Offset: 0x38, Size: 0x4] 0x78dbf90400
	UIParticleRandomFactor FactorY;//[Offset: 0x3c, Size: 0x4] 0x78dbf90480

--------------------------------
Class: EasyParticleComponent_InheritParentVelocity.EasyParticleComponent.Object
	float Percent;//[Offset: 0x50, Size: 0x4] 0x78dbf90380

--------------------------------
Class: EasyParticleComponent_InheritParentVelocity_Runtime.EasyParticleComponentRuntime.Object

--------------------------------
Class: EasyParticleComponent_InitialColor.EasyParticleComponent.Object
	EasyParticlePropertyColor InitialColor;//[Offset: 0x50, Size: 0x660] 0x78dbf90300

--------------------------------
Class: EasyParticleComponent_InitialColor_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorR;//[Offset: 0x38, Size: 0x4] 0x78dbf90100
	UIParticleRandomFactor FactorG;//[Offset: 0x3c, Size: 0x4] 0x78dbf90180
	UIParticleRandomFactor FactorB;//[Offset: 0x40, Size: 0x4] 0x78dbf90200
	UIParticleRandomFactor FactorA;//[Offset: 0x44, Size: 0x4] 0x78dbf90280

--------------------------------
Class: EasyParticleComponent_InitialPivot.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialPivotX;//[Offset: 0x50, Size: 0x1a8] 0x78dbf92100
	EasyParticlePropertyFloat InitialPivotY;//[Offset: 0x1f8, Size: 0x1a8] 0x78dbf90080

--------------------------------
Class: EasyParticleComponent_InitialPivot_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorX;//[Offset: 0x38, Size: 0x4] 0x78dbf92000
	UIParticleRandomFactor FactorY;//[Offset: 0x3c, Size: 0x4] 0x78dbf92080

--------------------------------
Class: EasyParticleComponent_InitialPosition.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialPositionX;//[Offset: 0x50, Size: 0x1a8] 0x78dbf91f00
	EasyParticlePropertyFloat InitialPositionY;//[Offset: 0x1f8, Size: 0x1a8] 0x78dbf91f80

--------------------------------
Class: EasyParticleComponent_InitialPosition_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorX;//[Offset: 0x38, Size: 0x4] 0x78dbf91e00
	UIParticleRandomFactor FactorY;//[Offset: 0x3c, Size: 0x4] 0x78dbf91e80

--------------------------------
Class: EasyParticleComponent_InitialPosition_AutoSize.EasyParticleComponent.Object

--------------------------------
Class: EasyParticleComponent_InitialPosition_AutoSize_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorX;//[Offset: 0x38, Size: 0x4] 0x78dbf91d00
	UIParticleRandomFactor FactorY;//[Offset: 0x3c, Size: 0x4] 0x78dbf91d80

--------------------------------
Class: EasyParticleComponent_InitialRotation.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialRotation;//[Offset: 0x50, Size: 0x1a8] 0x78dbf91c80

--------------------------------
Class: EasyParticleComponent_InitialRotation_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78dbf91c00

--------------------------------
Class: EasyParticleComponent_InitialRotationRate.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialRotationRate;//[Offset: 0x50, Size: 0x1a8] 0x78dbf91b80

--------------------------------
Class: EasyParticleComponent_InitialRotationRate_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78dbf91b00

--------------------------------
Class: EasyParticleComponent_InitialSize.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialSize;//[Offset: 0x50, Size: 0x1a8] 0x78dbf91a80

--------------------------------
Class: EasyParticleComponent_InitialSize_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78dbf91a00

--------------------------------
Class: EasyParticleComponent_InitialSize_AutoSize.EasyParticleComponent.Object
	bool ScaleByX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78dbf91900
	Vector2D DesignSize;//[Offset: 0x54, Size: 0x8] 0x78dbf91980

--------------------------------
Class: EasyParticleComponent_InitialSize_AutoSize_Runtime.EasyParticleComponentRuntime.Object

--------------------------------
Class: EasyParticleComponent_InitialSizeXY.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialSizeX;//[Offset: 0x50, Size: 0x1a8] 0x78dbf91800
	EasyParticlePropertyFloat InitialSizeY;//[Offset: 0x1f8, Size: 0x1a8] 0x78dbf91880

--------------------------------
Class: EasyParticleComponent_InitialSizeXY_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorX;//[Offset: 0x38, Size: 0x4] 0x78dbf91700
	UIParticleRandomFactor FactorY;//[Offset: 0x3c, Size: 0x4] 0x78dbf91780

--------------------------------
Class: EasyParticleComponent_InitialVelocity.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialVelocity;//[Offset: 0x50, Size: 0x1a8] 0x78dbf91600
	EasyParticlePropertyFloat InitialVelocityDirection;//[Offset: 0x1f8, Size: 0x1a8] 0x78dbf91680

--------------------------------
Class: EasyParticleComponent_InitialVelocity_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorSpeed;//[Offset: 0x38, Size: 0x4] 0x78dbf91500
	UIParticleRandomFactor FactorDirection;//[Offset: 0x3c, Size: 0x4] 0x78dbf91580

--------------------------------
Class: EasyParticleComponent_InitialZOrderOffset.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialZOrderOffset;//[Offset: 0x50, Size: 0x1a8] 0x78dbf91480

--------------------------------
Class: EasyParticleComponent_InitialZOrderOffset_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78dbf91400

--------------------------------
Class: EasyParticleComponent_Orbit.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialRotation;//[Offset: 0x50, Size: 0x1a8] 0x78dbf91280
	EasyParticlePropertyFloat Radius;//[Offset: 0x1f8, Size: 0x1a8] 0x78dbf91300
	EasyParticlePropertyFloat RotationRate;//[Offset: 0x3a0, Size: 0x1a8] 0x78dbf91380

--------------------------------
Class: EasyParticleComponent_Orbit_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorInitialRotation;//[Offset: 0x38, Size: 0x4] 0x78dbf91100
	UIParticleRandomFactor FactorRadius;//[Offset: 0x3c, Size: 0x4] 0x78dbf91180
	UIParticleRandomFactor FactorRotationRate;//[Offset: 0x40, Size: 0x4] 0x78dbf91200

--------------------------------
Class: EasyParticleComponent_RadialAcceleration.EasyParticleComponent.Object
	EasyParticlePropertyFloat RadialAcceleration;//[Offset: 0x50, Size: 0x1a8] 0x78dbf93180

--------------------------------
Class: EasyParticleComponent_RadialAcceleration_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78dbf93100

--------------------------------
Class: EasyParticleComponent_RotationRate.EasyParticleComponent.Object
	EasyParticlePropertyFloat RotationRate;//[Offset: 0x50, Size: 0x1a8] 0x78dbf93080

--------------------------------
Class: EasyParticleComponent_RotationRate_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78dbf93000

--------------------------------
Class: EasyParticleComponent_RotationToVelocityDirection.EasyParticleComponent.Object

--------------------------------
Class: EasyParticleComponent_RotationToVelocityDirection_Runtime.EasyParticleComponentRuntime.Object

--------------------------------
Class: EasyParticleComponent_ScalarParam.EasyParticleComponent.Object
	FName ScalarParamName;//[Offset: 0x50, Size: 0x8] 0x78dbf92f00
	EasyParticlePropertyFloat Value;//[Offset: 0x58, Size: 0x1a8] 0x78dbf92f80

--------------------------------
Class: EasyParticleComponent_ScalarParam_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78dbf92e80

--------------------------------
Class: EasyParticleComponent_Size.EasyParticleComponent.Object
	EasyParticlePropertyFloat Size;//[Offset: 0x50, Size: 0x1a8] 0x78dbf92e00

--------------------------------
Class: EasyParticleComponent_Size_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78dbf92d80

--------------------------------
Class: EasyParticleComponent_SizeScaleBySpeed.EasyParticleComponent.Object
	EasyParticlePropertyFloat ScaleX;//[Offset: 0x50, Size: 0x1a8] 0x78dbf92c80
	EasyParticlePropertyFloat ScaleY;//[Offset: 0x1f8, Size: 0x1a8] 0x78dbf92d00

--------------------------------
Class: EasyParticleComponent_SizeScaleBySpeed_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorX;//[Offset: 0x38, Size: 0x4] 0x78dbf92b80
	UIParticleRandomFactor FactorY;//[Offset: 0x3c, Size: 0x4] 0x78dbf92c00

--------------------------------
Class: EasyParticleComponent_SizeXY.EasyParticleComponent.Object
	EasyParticlePropertyFloat SizeX;//[Offset: 0x50, Size: 0x1a8] 0x78dbf92a80
	EasyParticlePropertyFloat SizeY;//[Offset: 0x1f8, Size: 0x1a8] 0x78dbf92b00

--------------------------------
Class: EasyParticleComponent_SizeXY_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorX;//[Offset: 0x38, Size: 0x4] 0x78dbf92980
	UIParticleRandomFactor FactorY;//[Offset: 0x3c, Size: 0x4] 0x78dbf92a00

--------------------------------
Class: EasyParticleComponent_TangentialAcceleration.EasyParticleComponent.Object
	EasyParticlePropertyFloat TangentialAcceleration;//[Offset: 0x50, Size: 0x1a8] 0x78dbf92900

--------------------------------
Class: EasyParticleComponent_TangentialAcceleration_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78dbf92880

--------------------------------
Class: EasyParticleRootState.EasyParticleState.Object
	EasyParticleComponent_Child* RootComponent;//[Offset: 0x1d0, Size: 0x8] 0x78dbf92480

--------------------------------
Class: HoudiniAsset.Object
	FString AssetFileName;//[Offset: 0x28, Size: 0x10] 0x78dbf92180
	byte[] AssetBytes;//[Offset: 0x38, Size: 0x10] 0x78dbf277c0
	uint32 AssetBytesCount;//[Offset: 0x48, Size: 0x4] 0x78dbf92280
	bool bAssetLimitedCommercial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78dbf92300
	bool bAssetNonCommercial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x78dbf92380
	bool bAssetExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1] 0x78dbf92400

--------------------------------
Class: HoudiniAssetActor.Actor.Object
	HoudiniAssetComponent* HoudiniAssetComponent;//[Offset: 0x220, Size: 0x8] 0x78dbf94200

--------------------------------
Class: HoudiniAssetComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	HoudiniAsset* HoudiniAsset;//[Offset: 0x478, Size: 0x8] 0x78dbf9fe00
	bool bCookOnParameterChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1] 0x78dbf9fe80
	bool bUploadTransformsToHoudiniEngine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 0x1] 0x78dbf9ff00
	bool bCookOnTransformChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x482, Size: 0x1] 0x78dbf9ff80
	bool bCookOnAssetInputCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x483, Size: 0x1] 0x78dbf9e780
	bool bOutputless;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1] 0x78dbf9e800
	bool bOutputTemplateGeos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x485, Size: 0x1] 0x78dbf9e880
	DirectoryPath TemporaryCookFolder;//[Offset: 0x488, Size: 0x10] 0x78dbf9e900
	DirectoryPath BakeFolder;//[Offset: 0x498, Size: 0x10] 0x78dbf9e980
	enum StaticMeshMethod;//[Offset: 0x4a8, Size: 0x1] 0x78dbf26960
	HoudiniStaticMeshGenerationProperties StaticMeshGenerationProperties;//[Offset: 0x4b0, Size: 0x1a0] 0x78dbf9ea80
	MeshBuildSettings StaticMeshBuildSettings;//[Offset: 0x650, Size: 0x30] 0x78dbf9eb00
	bool bOverrideGlobalProxyStaticMeshSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 0x1] 0x78dbf9eb80
	bool bEnableProxyStaticMeshOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x681, Size: 0x1] 0x78dbf9ec00
	bool bEnableProxyStaticMeshRefinementByTimerOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x682, Size: 0x1] 0x78dbf9ec80
	float ProxyMeshAutoRefineTimeoutSecondsOverride;//[Offset: 0x684, Size: 0x4] 0x78dbf9ed00
	bool bEnableProxyStaticMeshRefinementOnPreSaveWorldOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1] 0x78dbf9ed80
	bool bEnableProxyStaticMeshRefinementOnPreBeginPIEOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 0x1] 0x78dbf9ee00
	int AssetId;//[Offset: 0x68c, Size: 0x4] 0x78dbf9ee80
	<HoudiniAssetComponent*> DownstreamHoudiniAssets;//[Offset: 0x690, Size: 0x50] 0x78dbf26a00
	Guid ComponentGUID;//[Offset: 0x6e0, Size: 0x10] 0x78dbf9ef80
	Guid HapiGUID;//[Offset: 0x6f0, Size: 0x10] 0x78dbf9f000
	FString HapiAssetName;//[Offset: 0x700, Size: 0x10] 0x78dbf9f080
	enum AssetState;//[Offset: 0x710, Size: 0x1] 0x78dbf26aa0
	enum DebugLastAssetState;//[Offset: 0x711, Size: 0x1] 0x78dbf26b40
	enum AssetStateResult;//[Offset: 0x712, Size: 0x1] 0x78dbf26be0
	uint32 SubAssetIndex;//[Offset: 0x714, Size: 0x4] 0x78dbf9f280
	int AssetCookCount;//[Offset: 0x718, Size: 0x4] 0x78dbf9f300
	bool bHasBeenLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 0x1] 0x78dbf9f380
	bool bHasBeenDuplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71d, Size: 0x1] 0x78dbf9f400
	bool bPendingDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71e, Size: 0x1] 0x78dbf9f480
	bool bRecookRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71f, Size: 0x1] 0x78dbf9f500
	bool bRebuildRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 0x1] 0x78dbf9f580
	bool bEnableCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x721, Size: 0x1] 0x78dbf9f600
	bool bForceNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x722, Size: 0x1] 0x78dbf9f680
	bool bLastCookSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x723, Size: 0x1] 0x78dbf9f700
	bool bParameterDefinitionUpdateNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 0x1] 0x78dbf9f780
	bool bBlueprintStructureModified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x725, Size: 0x1] 0x78dbf9d700
	bool bBlueprintModified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x726, Size: 0x1] 0x78dbf9d780
	HoudiniParameter*[] Parameters;//[Offset: 0x728, Size: 0x10] 0x78dbf26c80
	HoudiniInput*[] Inputs;//[Offset: 0x738, Size: 0x10] 0x78dbf26d20
	HoudiniOutput*[] Outputs;//[Offset: 0x748, Size: 0x10] 0x78dbf26dc0
	HoudiniBakedOutput[] BakedOutputs;//[Offset: 0x758, Size: 0x10] 0x78dbf26e60
	Actor*[] UntrackedOutputs;//[Offset: 0x768, Size: 0x10] 0x78dbf26f00
	HoudiniHandleComponent*[] HandleComponents;//[Offset: 0x778, Size: 0x10] 0x78dbf26fa0
	bool bHasComponentTransformChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 0x1] 0x78dbf9db00
	bool bFullyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x789, Size: 0x1] 0x78dbf9db80
	HoudiniPDGAssetLink* PDGAssetLink;//[Offset: 0x790, Size: 0x8] 0x78dbf9dc00
	TimerHandle RefineMeshesTimer;//[Offset: 0x798, Size: 0x8] 0x78dbf9dc80
	bool bNoProxyMeshNextCookRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 0x1] 0x78dbf9dd00
	<Object*,int> InputPresets;//[Offset: 0x7c0, Size: 0x50] 0x78dbf5bd40
	bool bBakeAfterNextCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 0x1] 0x78dbf9de80
	bool bCachedIsPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 0x1] 0x78dbf9df00
	double LastTickTime;//[Offset: 0x880, Size: 0x8] 0x78dbf9df80

--------------------------------
Class: HoudiniStaticMeshGenerationProperties
	bool bGeneratedDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cdbbd180
	PhysicalMaterial* GeneratedPhysMaterial;//[Offset: 0x8, Size: 0x8] 0x78cdbbd200
	BodyInstance DefaultBodyInstance;//[Offset: 0x10, Size: 0x150] 0x78cdbb9780
	byte GeneratedCollisionTraceFlag;//[Offset: 0x160, Size: 0x1] 0x78cdbb9800
	int GeneratedLightMapResolution;//[Offset: 0x164, Size: 0x4] 0x78cdbb9880
	float GeneratedLpvBiasMultiplier;//[Offset: 0x168, Size: 0x4] 0x78cdbb9900
	WalkableSlopeOverride GeneratedWalkableSlopeOverride;//[Offset: 0x16c, Size: 0x10] 0x78cdbb9a80
	int GeneratedLightMapCoordinateIndex;//[Offset: 0x17c, Size: 0x4] 0x78cdbb9b00
	bool bGeneratedUseMaximumStreamingTexelRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 0x1] 0x78cdbb9b80
	float GeneratedStreamingDistanceMultiplier;//[Offset: 0x184, Size: 0x4] 0x78cdbb9c00
	FoliageType_InstancedStaticMesh* GeneratedFoliageDefaultSettings;//[Offset: 0x188, Size: 0x8] 0x78cdbb9c80
	AssetUserData*[] GeneratedAssetUserData;//[Offset: 0x190, Size: 0x10] 0x78d3611960

--------------------------------
Class: FoliageType_InstancedStaticMesh.FoliageType.Object
	StaticMesh* mesh;//[Offset: 0x3b0, Size: 0x8] 0x78d7223b80
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x3b8, Size: 0x10] 0x78d715c680
	class FoliageInstancedStaticMeshComponent* ComponentClass;//[Offset: 0x3c8, Size: 0x8] 0x78d715c720

--------------------------------
Class: FoliageType.Object
	Guid UpdateGuid;//[Offset: 0x28, Size: 0x10] 0x78d7223d00
	float Density;//[Offset: 0x38, Size: 0x4] 0x78d7223d80
	float DensityAdjustmentFactor;//[Offset: 0x3c, Size: 0x4] 0x78d7223e00
	float Radius;//[Offset: 0x40, Size: 0x4] 0x78d7223e80
	bool bSingleInstanceModeOverrideRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78d7223f00
	float SingleInstanceModeRadius;//[Offset: 0x48, Size: 0x4] 0x78d7223f80
	enum Scaling;//[Offset: 0x4c, Size: 0x1] 0x78d715c860
	FloatInterval ScaleX;//[Offset: 0x50, Size: 0x8] 0x78d7224080
	FloatInterval ScaleY;//[Offset: 0x58, Size: 0x8] 0x78d7224100
	FloatInterval ScaleZ;//[Offset: 0x60, Size: 0x8] 0x78d7224180
	FoliageVertexColorChannelMask VertexColorMaskByChannel;//[Offset: 0x68, Size: 0xc] 0x78d7224200
	byte VertexColorMask;//[Offset: 0x98, Size: 0x1] 0x78d7222180
	float VertexColorMaskThreshold;//[Offset: 0x9c, Size: 0x4] 0x78d7222200
	bool VertexColorMaskInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78d7222280
	FloatInterval ZOffset;//[Offset: 0xa4, Size: 0x8] 0x78d7222300
	bool AlignToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x78d7222380
	float AlignMaxAngle;//[Offset: 0xb0, Size: 0x4] 0x78d7222400
	bool RandomYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1] 0x78d7222480
	float RandomPitchAngle;//[Offset: 0xb8, Size: 0x4] 0x78d7222500
	FloatInterval GroundSlopeAngle;//[Offset: 0xbc, Size: 0x8] 0x78d7222580
	FloatInterval Height;//[Offset: 0xc4, Size: 0x8] 0x78d7222600
	FName[] LandscapeLayers;//[Offset: 0xd0, Size: 0x10] 0x78d715c900
	float MinimumLayerWeight;//[Offset: 0xe0, Size: 0x4] 0x78d7222700
	FName[] ExclusionLandscapeLayers;//[Offset: 0xe8, Size: 0x10] 0x78d715c9a0
	float MinimumExclusionLayerWeight;//[Offset: 0xf8, Size: 0x4] 0x78d7222800
	FName LandscapeLayer;//[Offset: 0xfc, Size: 0x8] 0x78d7222880
	bool CollisionWithWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 0x1] 0x78d7222900
	Vector CollisionScale;//[Offset: 0x108, Size: 0xc] 0x78d7222980
	BoxSphereBounds MeshBounds;//[Offset: 0x114, Size: 0x1c] 0x78d7222a00
	Vector LowBoundOriginRadius;//[Offset: 0x130, Size: 0xc] 0x78d7222a80
	byte Mobility;//[Offset: 0x13c, Size: 0x1] 0x78d7222b00
	Int32Interval CullDistance;//[Offset: 0x140, Size: 0x8] 0x78d7222b80
	bool bEnableStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x78d7222c00
	bool CastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1] 0x78d7222c80
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x148, Size: 0x1] 0x78d7222d00
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x148, Size: 0x1] 0x78d7222d80
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x148, Size: 0x1] 0x78d7222e00
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x148, Size: 0x1] 0x78d7222e80
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x148, Size: 0x1] 0x78d7222f00
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x148, Size: 0x1] 0x78d7222f80
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x149, Size: 0x1] 0x78d7223000
	int OverriddenLightMapRes;//[Offset: 0x14c, Size: 0x4] 0x78d7223080
	enum LightmapType;//[Offset: 0x150, Size: 0x1] 0x78d715ca40
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1] 0x78d7223180
	BodyInstance BodyInstance;//[Offset: 0x158, Size: 0x150] 0x78d7221100
	byte CustomNavigableGeometry;//[Offset: 0x2a8, Size: 0x1] 0x78d7221180
	LightingChannels LightingChannels;//[Offset: 0x2a9, Size: 0x1] 0x78d7221200
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2aa, Size: 0x1] 0x78d7221280
	enum CustomDepthStencilWriteMask;//[Offset: 0x2ab, Size: 0x1] 0x78d715cae0
	int CustomDepthStencilValue;//[Offset: 0x2ac, Size: 0x4] 0x78d7221380
	int TranslucencySortPriority;//[Offset: 0x2b0, Size: 0x4] 0x78d7221400
	byte LODCaculateMode;//[Offset: 0x2b4, Size: 0x1] 0x78d7221480
	float[] LODRadius;//[Offset: 0x2b8, Size: 0x10] 0x78d715cb80
	float CollisionRadius;//[Offset: 0x2c8, Size: 0x4] 0x78d7221580
	float ShadeRadius;//[Offset: 0x2cc, Size: 0x4] 0x78d7221600
	int NumSteps;//[Offset: 0x2d0, Size: 0x4] 0x78d7221680
	float InitialSeedDensity;//[Offset: 0x2d4, Size: 0x4] 0x78d7221700
	float AverageSpreadDistance;//[Offset: 0x2d8, Size: 0x4] 0x78d7221780
	float SpreadVariance;//[Offset: 0x2dc, Size: 0x4] 0x78d7221800
	int SeedsPerStep;//[Offset: 0x2e0, Size: 0x4] 0x78d7221880
	int DistributionSeed;//[Offset: 0x2e4, Size: 0x4] 0x78d7221900
	float MaxInitialSeedOffset;//[Offset: 0x2e8, Size: 0x4] 0x78d7221980
	bool bCanGrowInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1] 0x78d7221a00
	bool bSpawnsInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 0x1] 0x78d7221a80
	float MaxInitialAge;//[Offset: 0x2f0, Size: 0x4] 0x78d7221b00
	float MaxAge;//[Offset: 0x2f4, Size: 0x4] 0x78d7221b80
	float OverlapPriority;//[Offset: 0x2f8, Size: 0x4] 0x78d7221c00
	FloatInterval ProceduralScale;//[Offset: 0x2fc, Size: 0x8] 0x78d7221c80
	RuntimeFloatCurve ScaleCurve;//[Offset: 0x308, Size: 0x88] 0x78d7221d00
	int ChangeCount;//[Offset: 0x390, Size: 0x4] 0x78d7221d80
	bool ReapplyDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394, Size: 0x1] 0x78d7221e00
	bool ReapplyRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x394, Size: 0x1] 0x78d7221e80
	bool ReapplyAlignToNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x394, Size: 0x1] 0x78d7221f00
	bool ReapplyRandomYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x394, Size: 0x1] 0x78d7221f80
	bool ReapplyScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x394, Size: 0x1] 0x78d7222000
	bool ReapplyScaleX;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x394, Size: 0x1] 0x78d7222080
	bool ReapplyScaleY;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x394, Size: 0x1] 0x78d7222100
	bool ReapplyScaleZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x394, Size: 0x1] 0x78d7220080
	bool ReapplyRandomPitchAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x395, Size: 0x1] 0x78d7220100
	bool ReapplyGroundSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x395, Size: 0x1] 0x78d7220180
	bool ReapplyHeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x395, Size: 0x1] 0x78d7220200
	bool ReapplyLandscapeLayers;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x395, Size: 0x1] 0x78d7220280
	bool ReapplyZOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x395, Size: 0x1] 0x78d7220300
	bool ReapplyCollisionWithWorld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x395, Size: 0x1] 0x78d7220380
	bool ReapplyVertexColorMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x395, Size: 0x1] 0x78d7220400
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x395, Size: 0x1] 0x78d7220480
	bool bEnableDiscardOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x396, Size: 0x1] 0x78d7220500
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x398, Size: 0x10] 0x78d715cc20
	int VirtualTextureCullMips;//[Offset: 0x3a8, Size: 0x4] 0x78d7220600
	enum VirtualTextureRenderPassType;//[Offset: 0x3ac, Size: 0x1] 0x78d715ccc0

--------------------------------
Class: FoliageVertexColorChannelMask
	bool UseMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbe4a700
	float MaskThreshold;//[Offset: 0x4, Size: 0x4] 0x78dbe4a780
	bool InvertMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78dbe4a800

--------------------------------
Class: FoliageInstancedStaticMeshComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate OnInstanceTakePointDamage;//[Offset: 0x6b0, Size: 0x10] 0x78d7220b80
	delegate OnInstanceTakeRadialDamage;//[Offset: 0x6c0, Size: 0x10] 0x78d7220c00
	Guid GenerationGuid;//[Offset: 0x6d0, Size: 0x10] 0x78d7220c80

--------------------------------
Class: MeshBuildSettings
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbf0ee00
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbf0ee80
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbf0ef00
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78dbf0ef80
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78dbf0f000
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78dbf0f080
	bool bBuildReversedIndexBuffer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78dbf0f100
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78dbf0f180
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78dbf0f200
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78dbf0f280
	bool bGenerateDistanceFieldAsIfTwoSided;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78dbf0f300
	bool bSupportFaceRemap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x78dbf0f380
	int MinLightmapResolution;//[Offset: 0x4, Size: 0x4] 0x78dbf0f400
	int SrcLightmapIndex;//[Offset: 0x8, Size: 0x4] 0x78dbf0f480
	int DstLightmapIndex;//[Offset: 0xc, Size: 0x4] 0x78dbf0f500
	float BuildScale;//[Offset: 0x10, Size: 0x4] 0x78dbf0f580
	Vector BuildScale3D;//[Offset: 0x14, Size: 0xc] 0x78dbf0f600
	float DistanceFieldResolutionScale;//[Offset: 0x20, Size: 0x4] 0x78dbf0f680
	StaticMesh* DistanceFieldReplacementMesh;//[Offset: 0x28, Size: 0x8] 0x78dbf0f700

--------------------------------
Class: HoudiniParameter.Object
	FString Name;//[Offset: 0x28, Size: 0x10] 0x78dbfa6180
	FString Label;//[Offset: 0x38, Size: 0x10] 0x78dbfa6200
	enum ParmType;//[Offset: 0x48, Size: 0x1] 0x78dbf2a4c0
	uint32 TupleSize;//[Offset: 0x4c, Size: 0x4] 0x78dbfa6300
	int NodeId;//[Offset: 0x50, Size: 0x4] 0x78dbfa4280
	int ParmId;//[Offset: 0x54, Size: 0x4] 0x78dbfa4300
	int ParentParmId;//[Offset: 0x58, Size: 0x4] 0x78dbfa4380
	int ChildIndex;//[Offset: 0x5c, Size: 0x4] 0x78dbfa4400
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78dbfa4480
	bool bIsDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x78dbfa4500
	bool bHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1] 0x78dbfa4580
	bool bNeedsToTriggerUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1] 0x78dbfa4600
	bool bIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78dbfa4680
	bool bIsSpare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1] 0x78dbfa4700
	bool bJoinNext;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1] 0x78dbfa4780
	bool bIsChildOfMultiParm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1] 0x78dbfa4800
	bool bIsDirectChildOfMultiParm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78dbfa4880
	bool bPendingRevertToDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1] 0x78dbfa4900
	int[] TuplePendingRevertToDefault;//[Offset: 0x70, Size: 0x10] 0x78dbf27c20
	FString Help;//[Offset: 0x80, Size: 0x10] 0x78dbfa4a00
	uint32 TagCount;//[Offset: 0x90, Size: 0x4] 0x78dbfa4a80
	int ValueIndex;//[Offset: 0x94, Size: 0x4] 0x78dbfa4b00
	bool bHasExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78dbfa4b80
	bool bShowExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1] 0x78dbfa4c00
	FString ParamExpression;//[Offset: 0xa0, Size: 0x10] 0x78dbfa4c80
	<FString,FString> Tags;//[Offset: 0xb0, Size: 0x50] 0x78dbf5b800
	bool bAutoUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1] 0x78dbfa4e00

--------------------------------
Class: HoudiniInput.Object
	FString Name;//[Offset: 0x28, Size: 0x10] 0x78dbfa2e00
	FString Label;//[Offset: 0x38, Size: 0x10] 0x78dbfa2e80
	enum Type;//[Offset: 0x48, Size: 0x1] 0x78dbf28800
	enum PreviousType;//[Offset: 0x49, Size: 0x1] 0x78dbf288a0
	int AssetNodeId;//[Offset: 0x4c, Size: 0x4] 0x78dbfa3000
	int InputNodeId;//[Offset: 0x50, Size: 0x4] 0x78dbfa3080
	int InputIndex;//[Offset: 0x54, Size: 0x4] 0x78dbfa3100
	int ParmId;//[Offset: 0x58, Size: 0x4] 0x78dbfa3180
	bool bIsObjectPathParameter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x78dbfa1100
	int[] CreatedDataNodeIds;//[Offset: 0x60, Size: 0x10] 0x78dbf28940
	bool bHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78dbfa1200
	bool bNeedsToTriggerUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x78dbfa1280
	FString Help;//[Offset: 0x78, Size: 0x10] 0x78dbfa1300
	enum KeepWorldTransform;//[Offset: 0x88, Size: 0x1] 0x78dbf289e0
	bool bPackBeforeMerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x78dbfa1400
	bool bImportAsReference;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1] 0x78dbfa1480
	bool bExportLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b, Size: 0x1] 0x78dbfa1500
	bool bExportSockets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1] 0x78dbfa1580
	bool bExportColliders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 0x1] 0x78dbfa1600
	bool bCookOnCurveChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 0x1] 0x78dbfa1680
	HoudiniInputObject*[] GeometryInputObjects;//[Offset: 0x90, Size: 0x10] 0x78dbf28a80
	bool bStaticMeshChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x78dbfa1780
	HoudiniInputObject*[] AssetInputObjects;//[Offset: 0xa8, Size: 0x10] 0x78dbf28b20
	bool bInputAssetConnectedInHoudini;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x78dbfa1880
	HoudiniInputObject*[] CurveInputObjects;//[Offset: 0xc0, Size: 0x10] 0x78dbf28bc0
	float DefaultCurveOffset;//[Offset: 0xd0, Size: 0x4] 0x78dbfa1980
	bool bAddRotAndScaleAttributesOnCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1] 0x78dbfa1a00
	HoudiniInputObject*[] LandscapeInputObjects;//[Offset: 0xd8, Size: 0x10] 0x78dbf28c60
	bool bLandscapeHasExportTypeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78dbfa1b00
	HoudiniInputObject*[] WorldInputObjects;//[Offset: 0xf0, Size: 0x10] 0x78dbf28d00
	Actor*[] WorldInputBoundSelectorObjects;//[Offset: 0x100, Size: 0x10] 0x78dbf28da0
	bool bIsWorldInputBoundSelector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x78dbfa1c80
	bool bWorldInputBoundSelectorAutoUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1] 0x78dbfa1d00
	float UnrealSplineResolution;//[Offset: 0x114, Size: 0x4] 0x78dbfa1d80
	HoudiniInputObject*[] SkeletalInputObjects;//[Offset: 0x118, Size: 0x10] 0x78dbf28e40
	HoudiniInputHoudiniSplineComponent*[] LastInsertedInputs;//[Offset: 0x128, Size: 0x10] 0x78dbf28ee0
	HoudiniInputObject*[] LastUndoDeletedInputs;//[Offset: 0x138, Size: 0x10] 0x78dbf28f80
	bool bUpdateInputLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1] 0x78dbfa1f80
	enum LandscapeExportType;//[Offset: 0x149, Size: 0x1] 0x78dbf29020
	bool bLandscapeExportSelectionOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1] 0x78dbfa2080
	bool bLandscapeAutoSelectComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b, Size: 0x1] 0x78dbfa2100
	bool bLandscapeExportMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1] 0x78dbfa0080
	bool bLandscapeExportLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d, Size: 0x1] 0x78dbfa0100
	bool bLandscapeExportNormalizedUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e, Size: 0x1] 0x78dbfa0180
	bool bLandscapeExportTileUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f, Size: 0x1] 0x78dbfa0200
	bool bCanDeleteHoudiniNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1] 0x78dbfa0280

--------------------------------
Class: HoudiniInputObject.Object
	Object* InputObject;//[Offset: 0x28, Size: 0x28] 0x78dbfa2880
	Transform Transform;//[Offset: 0x50, Size: 0x30] 0x78dbfa2900
	enum Type;//[Offset: 0x80, Size: 0x1] 0x78dbf28760
	int InputNodeId;//[Offset: 0x84, Size: 0x4] 0x78dbfa2a00
	int InputObjectNodeId;//[Offset: 0x88, Size: 0x4] 0x78dbfa2a80
	Guid Guid;//[Offset: 0x8c, Size: 0x10] 0x78dbfa2b00
	bool bHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1] 0x78dbfa2b80
	bool bNeedsToTriggerUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 0x1] 0x78dbfa2c00
	bool bTransformChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e, Size: 0x1] 0x78dbfa2c80
	bool bImportAsReference;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f, Size: 0x1] 0x78dbfa2d00
	bool bCanDeleteHoudiniNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x78dbfa2d80

--------------------------------
Class: HoudiniInputHoudiniSplineComponent.HoudiniInputObject.Object
	enum CurveType;//[Offset: 0xa1, Size: 0x1] 0x78dbf283a0
	enum CurveMethod;//[Offset: 0xa2, Size: 0x1] 0x78dbf28440
	bool Reversed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 0x1] 0x78dbfa2280
	HoudiniSplineComponent* CachedComponent;//[Offset: 0xa8, Size: 0x8] 0x78dbfa2300

--------------------------------
Class: HoudiniSplineComponent.SceneComponent.ActorComponent.Object
	Transform[] CurvePoints;//[Offset: 0x210, Size: 0x10] 0x78dbf2b0a0
	Vector[] DisplayPoints;//[Offset: 0x220, Size: 0x10] 0x78dbf2b140
	int[] DisplayPointIndexDivider;//[Offset: 0x230, Size: 0x10] 0x78dbf2b1e0
	FString HoudiniSplineName;//[Offset: 0x240, Size: 0x10] 0x78dbfad300
	bool bClosed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x78dbfad380
	bool bReversed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1] 0x78dbfad400
	bool bIsHoudiniSplineVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 0x1] 0x78dbfad480
	enum CurveType;//[Offset: 0x253, Size: 0x1] 0x78dbf2b280
	enum CurveMethod;//[Offset: 0x254, Size: 0x1] 0x78dbf2b320
	bool bIsOutputCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 0x1] 0x78dbfad600
	bool bCookOnCurveChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 0x1] 0x78dbfad680
	bool bHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1] 0x78dbfab600
	bool bNeedsToTriggerUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 0x1] 0x78dbfab680
	bool bIsInputCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x482, Size: 0x1] 0x78dbfab700
	bool bIsEditableOutputCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x483, Size: 0x1] 0x78dbfab780
	int NodeId;//[Offset: 0x484, Size: 0x4] 0x78dbfab800
	FString PartName;//[Offset: 0x488, Size: 0x10] 0x78dbfab880

--------------------------------
Class: HoudiniOutput.Object
	enum Type;//[Offset: 0x28, Size: 0x1] 0x78dbf27cc0
	HoudiniGeoPartObject[] HoudiniGeoPartObjects;//[Offset: 0x30, Size: 0x10] 0x78dbf27d60
	<HoudiniOutputObjectIdentifier,HoudiniOutputObject> OutputObjects;//[Offset: 0x40, Size: 0x50] 0x78dbf5b8c0
	<HoudiniOutputObjectIdentifier,HoudiniInstancedOutput> InstancedOutputs;//[Offset: 0x90, Size: 0x50] 0x78dbf5b980
	<FString,MaterialInterface*> AssignementMaterials;//[Offset: 0xe0, Size: 0x50] 0x78dbf5ba40
	<FString,MaterialInterface*> ReplacementMaterials;//[Offset: 0x130, Size: 0x50] 0x78dbf5bb00
	bool bLandscapeWorldComposition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1] 0x78dbfa3280
	Actor*[] HoudiniCreatedSocketActors;//[Offset: 0x188, Size: 0x10] 0x78dbf27e00
	Actor*[] HoudiniAttachedSocketActors;//[Offset: 0x198, Size: 0x10] 0x78dbf27ea0
	bool bIsEditableNode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1] 0x78dbfa3400
	bool bHasEditableNodeBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1] 0x78dbfa3480
	bool bIsUpdating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa, Size: 0x1] 0x78dbfa3500
	bool bCanDeleteHoudiniNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ab, Size: 0x1] 0x78dbfa3580

--------------------------------
Class: HoudiniGeoPartObject
	int AssetId;//[Offset: 0x0, Size: 0x4] 0x78cdbb7580
	FString AssetName;//[Offset: 0x8, Size: 0x10] 0x78cdbb7600
	int ObjectId;//[Offset: 0x18, Size: 0x4] 0x78cdbb7680
	FString ObjectName;//[Offset: 0x20, Size: 0x10] 0x78cdbb7700
	int GeoId;//[Offset: 0x30, Size: 0x4] 0x78cdbb7780
	int PartId;//[Offset: 0x34, Size: 0x4] 0x78cdbb7800
	FString PartName;//[Offset: 0x38, Size: 0x10] 0x78cdbb7880
	bool bHasCustomPartName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78cdbb7900
	FString[] SplitGroups;//[Offset: 0x50, Size: 0x10] 0x78d3612540
	Transform TransformMatrix;//[Offset: 0x60, Size: 0x30] 0x78cdbb7a00
	FString NodePath;//[Offset: 0x90, Size: 0x10] 0x78cdbb7a80
	enum Type;//[Offset: 0xa0, Size: 0x1] 0x78d36125e0
	enum InstancerType;//[Offset: 0xa1, Size: 0x1] 0x78d3612680
	FString VolumeName;//[Offset: 0xa8, Size: 0x10] 0x78cdbb7c00
	int VolumeTileIndex;//[Offset: 0xb8, Size: 0x4] 0x78cdbb7c80
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1] 0x78cdbb7d00
	bool bIsEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1] 0x78cdbb7d80
	bool bIsTemplated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 0x1] 0x78cdbb7e00
	bool bIsInstanced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf, Size: 0x1] 0x78cdbb7e80
	bool bHasGeoChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x78cdbb7f00
	bool bHasPartChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x78cdbb7f80
	bool bHasTransformChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1] 0x78cdbb8000
	bool bHasMaterialsChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1] 0x78cdbb8080
	HoudiniMeshSocket[] AllMeshSockets;//[Offset: 0x210, Size: 0x10] 0x78d3612720

--------------------------------
Class: HoudiniMeshSocket

--------------------------------
Class: HoudiniOutputObjectIdentifier
	int ObjectId;//[Offset: 0x0, Size: 0x4] 0x78cdbb5600
	int GeoId;//[Offset: 0x4, Size: 0x4] 0x78cdbb5680
	int PartId;//[Offset: 0x8, Size: 0x4] 0x78cdbb5700
	FString SplitIdentifier;//[Offset: 0x10, Size: 0x10] 0x78cdbb5780
	FString PartName;//[Offset: 0x20, Size: 0x10] 0x78cdbb5800
	int PrimitiveIndex;//[Offset: 0x30, Size: 0x4] 0x78cdbb5880
	int PointIndex;//[Offset: 0x34, Size: 0x4] 0x78cdbb5900

--------------------------------
Class: HoudiniOutputObject
	Object* OutputObject;//[Offset: 0x0, Size: 0x8] 0x78cdbb6d80
	Object* OutputComponent;//[Offset: 0x8, Size: 0x8] 0x78cdbb6e00
	Object* ProxyObject;//[Offset: 0x10, Size: 0x8] 0x78cdbb6e80
	Object* ProxyComponent;//[Offset: 0x18, Size: 0x8] 0x78cdbb6f00
	bool bProxyIsCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78cdbb6f80
	bool bIsImplicit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x78cdbb7000
	FString BakeName;//[Offset: 0x28, Size: 0x10] 0x78cdbb7080
	HoudiniCurveOutputProperties CurveOutputProperty;//[Offset: 0x38, Size: 0xc] 0x78cdbb7380
	<FString,FString> CachedAttributes;//[Offset: 0x48, Size: 0x50] 0x78cdd86340
	<FString,FString> CachedTokens;//[Offset: 0x98, Size: 0x50] 0x78cdd86400

--------------------------------
Class: HoudiniCurveOutputProperties
	enum CurveOutputType;//[Offset: 0x0, Size: 0x1] 0x78d3610240
	int NumPoints;//[Offset: 0x4, Size: 0x4] 0x78cdbb7180
	bool bClosed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cdbb7200
	enum CurveType;//[Offset: 0x9, Size: 0x1] 0x78d36102e0
	enum CurveMethod;//[Offset: 0xa, Size: 0x1] 0x78d3610380

--------------------------------
Class: HoudiniInstancedOutput
	Object* OriginalObject;//[Offset: 0x0, Size: 0x28] 0x78cdbb8a00
	int OriginalObjectIndex;//[Offset: 0x28, Size: 0x4] 0x78cdbb8a80
	Transform[] OriginalTransforms;//[Offset: 0x30, Size: 0x10] 0x78d3612180
	Object*[] VariationObjects;//[Offset: 0x40, Size: 0x10] 0x78d3612220
	Transform[] VariationTransformOffsets;//[Offset: 0x50, Size: 0x10] 0x78d36122c0
	int[] TransformVariationIndices;//[Offset: 0x60, Size: 0x10] 0x78d3612360
	bool bChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78cdbb8d00
	bool bStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x78cdbb8d80

--------------------------------
Class: HoudiniBakedOutput
	<HoudiniBakedOutputObjectIdentifier,HoudiniBakedOutputObject> BakedOutputObjects;//[Offset: 0x0, Size: 0x50] 0x78cdd88bc0

--------------------------------
Class: HoudiniBakedOutputObjectIdentifier
	int PartId;//[Offset: 0x0, Size: 0x4] 0x78cdbb9200
	FString SplitIdentifier;//[Offset: 0x8, Size: 0x10] 0x78cdbb9280

--------------------------------
Class: HoudiniBakedOutputObject
	FString Actor;//[Offset: 0x0, Size: 0x10] 0x78cdbb8e00
	FString Blueprint;//[Offset: 0x10, Size: 0x10] 0x78cdbb8e80
	FName ActorBakeName;//[Offset: 0x20, Size: 0x8] 0x78cdbb8f00
	FString BakedObject;//[Offset: 0x28, Size: 0x10] 0x78cdbb8f80
	FString BakedComponent;//[Offset: 0x38, Size: 0x10] 0x78cdbb9000
	FString[] InstancedActors;//[Offset: 0x48, Size: 0x10] 0x78d3612400
	FString[] InstancedComponents;//[Offset: 0x58, Size: 0x10] 0x78d36124a0

--------------------------------
Class: HoudiniHandleComponent.SceneComponent.ActorComponent.Object
	HoudiniHandleParameter*[] XformParms;//[Offset: 0x208, Size: 0x10] 0x78dbf26780
	HoudiniHandleParameter* RSTParm;//[Offset: 0x218, Size: 0x8] 0x78dbfa0380
	HoudiniHandleParameter* RotOrderParm;//[Offset: 0x220, Size: 0x8] 0x78dbfa0400
	enum HandleType;//[Offset: 0x228, Size: 0x1] 0x78dbf26820
	FString HandleName;//[Offset: 0x230, Size: 0x10] 0x78dbfa0500

--------------------------------
Class: HoudiniHandleParameter.Object
	HoudiniParameter* AssetParameter;//[Offset: 0x28, Size: 0x8] 0x78dbfa0580
	int TupleIndex;//[Offset: 0x30, Size: 0x4] 0x78dbfa0600

--------------------------------
Class: HoudiniPDGAssetLink.Object
	FString AssetName;//[Offset: 0x28, Size: 0x10] 0x78dbfa9a00
	FString AssetNodePath;//[Offset: 0x38, Size: 0x10] 0x78dbfa9a80
	int AssetId;//[Offset: 0x48, Size: 0x4] 0x78dbfa9b00
	TOPNetwork*[] AllTOPNetworks;//[Offset: 0x50, Size: 0x10] 0x78dbf2b460
	int SelectedTOPNetworkIndex;//[Offset: 0x60, Size: 0x4] 0x78dbfa9c00
	enum LinkState;//[Offset: 0x64, Size: 0x1] 0x78dbf2b500
	bool bAutoCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1] 0x78dbfa9d00
	bool bUseTOPNodeFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1] 0x78dbfa9d80
	bool bUseTOPOutputFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1] 0x78dbfa9e00
	FString TOPNodeFilter;//[Offset: 0x68, Size: 0x10] 0x78dbfa9e80
	FString TOPOutputFilter;//[Offset: 0x78, Size: 0x10] 0x78dbfa9f00
	int NumWorkitems;//[Offset: 0x88, Size: 0x4] 0x78dbfa9f80
	AggregatedWorkItemTally WorkItemTally;//[Offset: 0x90, Size: 0x28] 0x78dbfaa000
	FString OutputCachePath;//[Offset: 0xb8, Size: 0x10] 0x78dbfaa080
	bool bNeedsUIRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x78dbfaa100
	Actor* OutputParentActor;//[Offset: 0xd0, Size: 0x8] 0x78dbfaa180
	DirectoryPath BakeFolder;//[Offset: 0xd8, Size: 0x10] 0x78dbfaa200

--------------------------------
Class: TOPNetwork.Object
	int NodeId;//[Offset: 0x28, Size: 0x4] 0x78dbfaa280
	FString NodeName;//[Offset: 0x30, Size: 0x10] 0x78dbfaa300
	FString NodePath;//[Offset: 0x40, Size: 0x10] 0x78dbfaa380
	TOPNode*[] AllTOPNodes;//[Offset: 0x50, Size: 0x10] 0x78dbf2b5a0
	int SelectedTOPIndex;//[Offset: 0x60, Size: 0x4] 0x78dbfaa480
	FString ParentName;//[Offset: 0x68, Size: 0x10] 0x78dbfaa500
	bool bShowResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78dbfa8480
	bool bAutoLoadResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x78dbfa8500

--------------------------------
Class: TOPNode.Object
	int NodeId;//[Offset: 0x28, Size: 0x4] 0x78dbfa8580
	FString NodeName;//[Offset: 0x30, Size: 0x10] 0x78dbfa8600
	FString NodePath;//[Offset: 0x40, Size: 0x10] 0x78dbfa8680
	FString ParentName;//[Offset: 0x50, Size: 0x10] 0x78dbfa8700
	Object* WorkResultParent;//[Offset: 0x60, Size: 0x8] 0x78dbfa8780
	TOPWorkResult[] WorkResult;//[Offset: 0x68, Size: 0x10] 0x78dbf2b640
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78dbfa8880
	bool bAutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x78dbfa8900
	enum NodeState;//[Offset: 0x7a, Size: 0x1] 0x78dbf2b6e0
	bool bCachedHaveNotLoadedWorkResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1] 0x78dbfa8a00
	bool bCachedHaveLoadedWorkResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x78dbfa8a80
	bool bHasChildNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1] 0x78dbfa8b00
	<FString> ClearedLandscapeLayers;//[Offset: 0x80, Size: 0x50] 0x78dbf2b780
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1] 0x78dbfa8c00
	<FString,HoudiniPDGWorkResultObjectBakedOutput> BakedWorkResultObjectOutputs;//[Offset: 0x158, Size: 0x50] 0x78dbf5b740
	WorkItemTally WorkItemTally;//[Offset: 0x1a8, Size: 0x238] 0x78dbfa8d80
	AggregatedWorkItemTally AggregatedWorkItemTally;//[Offset: 0x3e0, Size: 0x28] 0x78dbfa8e00
	bool bHasReceivedCookCompleteEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1] 0x78dbfa8e80
	OutputActorOwner OutputActorOwner;//[Offset: 0x410, Size: 0x10] 0x78dbfa8f00

--------------------------------
Class: TOPWorkResult
	int WorkItemIndex;//[Offset: 0x0, Size: 0x4] 0x78cdbb9d80
	int WorkItemID;//[Offset: 0x4, Size: 0x4] 0x78cdbb9e00
	TOPWorkResultObject[] ResultObjects;//[Offset: 0x8, Size: 0x10] 0x78d3611be0

--------------------------------
Class: TOPWorkResultObject
	FString Name;//[Offset: 0x8, Size: 0x10] 0x78cdbb9e80
	FString FilePath;//[Offset: 0x18, Size: 0x10] 0x78cdbb9f00
	enum State;//[Offset: 0x28, Size: 0x1] 0x78d3611a00
	int WorkItemResultInfoIndex;//[Offset: 0x2c, Size: 0x4] 0x78cdbba000
	HoudiniOutput*[] ResultOutputs;//[Offset: 0x30, Size: 0x10] 0x78d3611aa0
	bool bAutoBakedSinceLastLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78cdbba100
	Object*[] OutputObjectsToDelete;//[Offset: 0x48, Size: 0x10] 0x78d3611b40
	OutputActorOwner OutputActorOwner;//[Offset: 0x58, Size: 0x10] 0x78cdbba280

--------------------------------
Class: OutputActorOwner
	Actor* OutputActor;//[Offset: 0x8, Size: 0x8] 0x78cdbba200

--------------------------------
Class: HoudiniPDGWorkResultObjectBakedOutput
	HoudiniBakedOutput[] BakedOutputs;//[Offset: 0x0, Size: 0x10] 0x78d36120e0

--------------------------------
Class: WorkItemTally.WorkItemTallyBase
	<int> AllWorkItems;//[Offset: 0x8, Size: 0x50] 0x78d3611c80
	<int> WaitingWorkItems;//[Offset: 0x58, Size: 0x50] 0x78d3611d20
	<int> ScheduledWorkItems;//[Offset: 0xa8, Size: 0x50] 0x78d3611dc0
	<int> CookingWorkItems;//[Offset: 0xf8, Size: 0x50] 0x78d3611e60
	<int> CookedWorkItems;//[Offset: 0x148, Size: 0x50] 0x78d3611f00
	<int> ErroredWorkItems;//[Offset: 0x198, Size: 0x50] 0x78d3611fa0
	<int> CookCancelledWorkItems;//[Offset: 0x1e8, Size: 0x50] 0x78d3612040

--------------------------------
Class: WorkItemTallyBase

--------------------------------
Class: AggregatedWorkItemTally.WorkItemTallyBase
	int TotalWorkItems;//[Offset: 0x8, Size: 0x4] 0x78cdbb8600
	int WaitingWorkItems;//[Offset: 0xc, Size: 0x4] 0x78cdbb8680
	int ScheduledWorkItems;//[Offset: 0x10, Size: 0x4] 0x78cdbb8700
	int CookingWorkItems;//[Offset: 0x14, Size: 0x4] 0x78cdbb8780
	int CookedWorkItems;//[Offset: 0x18, Size: 0x4] 0x78cdbb8800
	int ErroredWorkItems;//[Offset: 0x1c, Size: 0x4] 0x78cdbb8880
	int CookCancelledWorkItems;//[Offset: 0x20, Size: 0x4] 0x78cdbb8900

--------------------------------
Class: HoudiniRuntimeSettings.Object
	byte SessionType;//[Offset: 0x28, Size: 0x1] 0x78dbfab900
	FString ServerHost;//[Offset: 0x30, Size: 0x10] 0x78dbfab980
	int ServerPort;//[Offset: 0x40, Size: 0x4] 0x78dbfaba00
	FString ServerPipeName;//[Offset: 0x48, Size: 0x10] 0x78dbfaba80
	bool bStartAutomaticServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78dbfabb00
	float AutomaticServerTimeout;//[Offset: 0x5c, Size: 0x4] 0x78dbfabb80
	bool bSyncWithHoudiniCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78dbfabc00
	bool bCookUsingHoudiniTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x78dbfabc80
	bool bSyncViewport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1] 0x78dbfabd00
	bool bSyncHoudiniViewport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1] 0x78dbfabd80
	bool bSyncUnrealViewport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78dbfabe00
	bool bShowMultiAssetDialog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1] 0x78dbfabe80
	bool bPreferHdaMemoryCopyOverHdaSourceFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1] 0x78dbfabf00
	bool bPauseCookingOnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1] 0x78dbfabf80
	bool bDisplaySlateCookingNotifications;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78dbfac000
	FString DefaultTemporaryCookFolder;//[Offset: 0x70, Size: 0x10] 0x78dbfac080
	FString DefaultBakeFolder;//[Offset: 0x80, Size: 0x10] 0x78dbfac100
	bool MarshallingLandscapesUseDefaultUnrealScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78dbfac180
	bool MarshallingLandscapesUseFullResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1] 0x78dbfac200
	bool MarshallingLandscapesForceMinMaxValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 0x1] 0x78dbfac280
	float MarshallingLandscapesForcedMinValue;//[Offset: 0x94, Size: 0x4] 0x78dbfac300
	float MarshallingLandscapesForcedMaxValue;//[Offset: 0x98, Size: 0x4] 0x78dbfac380
	bool bAddRotAndScaleAttributesOnCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1] 0x78dbfac400
	float MarshallingSplineResolution;//[Offset: 0xa0, Size: 0x4] 0x78dbfac480
	bool bEnableProxyStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1] 0x78dbfac500
	bool bShowDefaultMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1] 0x78dbfac580
	bool bEnableProxyStaticMeshRefinementByTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6, Size: 0x1] 0x78dbfac600
	float ProxyMeshAutoRefineTimeoutSeconds;//[Offset: 0xa8, Size: 0x4] 0x78dbfaa580
	bool bEnableProxyStaticMeshRefinementOnPreSaveWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1] 0x78dbfaa600
	bool bEnableProxyStaticMeshRefinementOnPreBeginPIE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1] 0x78dbfaa680
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xae, Size: 0x1] 0x78dbfaa700
	PhysicalMaterial* PhysMaterial;//[Offset: 0xb0, Size: 0x8] 0x78dbfaa780
	BodyInstance DefaultBodyInstance;//[Offset: 0xb8, Size: 0x150] 0x78dbfaa800
	byte CollisionTraceFlag;//[Offset: 0x208, Size: 0x1] 0x78dbfaa880
	int LightMapResolution;//[Offset: 0x20c, Size: 0x4] 0x78dbfaa900
	float LpvBiasMultiplier;//[Offset: 0x210, Size: 0x4] 0x78dbfaa980
	float GeneratedDistanceFieldResolutionScale;//[Offset: 0x214, Size: 0x4] 0x78dbfaaa00
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x218, Size: 0x10] 0x78dbfaaa80
	int LightMapCoordinateIndex;//[Offset: 0x228, Size: 0x4] 0x78dbfaab00
	bool bUseMaximumStreamingTexelRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 0x1] 0x78dbfaab80
	float StreamingDistanceMultiplier;//[Offset: 0x230, Size: 0x4] 0x78dbfaac00
	FoliageType_InstancedStaticMesh* FoliageDefaultSettings;//[Offset: 0x238, Size: 0x8] 0x78dbfaac80
	AssetUserData*[] AssetUserData;//[Offset: 0x240, Size: 0x10] 0x78dbf2b3c0
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x78dbfaad80
	int SrcLightmapIndex;//[Offset: 0x254, Size: 0x4] 0x78dbfaae00
	int DstLightmapIndex;//[Offset: 0x258, Size: 0x4] 0x78dbfaae80
	int MinLightmapResolution;//[Offset: 0x25c, Size: 0x4] 0x78dbfaaf00
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x78dbfaaf80
	byte GenerateLightmapUVsFlag;//[Offset: 0x261, Size: 0x1] 0x78dbfab000
	byte RecomputeNormalsFlag;//[Offset: 0x262, Size: 0x1] 0x78dbfab080
	byte RecomputeTangentsFlag;//[Offset: 0x263, Size: 0x1] 0x78dbfab100
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1] 0x78dbfab180
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 0x1] 0x78dbfab200
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x266, Size: 0x1] 0x78dbfab280
	bool bBuildReversedIndexBuffer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x266, Size: 0x1] 0x78dbfab300
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x266, Size: 0x1] 0x78dbfab380
	float DistanceFieldResolutionScale;//[Offset: 0x268, Size: 0x4] 0x78dbfab400
	bool bGenerateDistanceFieldAsIfTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1] 0x78dbfab480
	bool bSupportFaceRemap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 0x1] 0x78dbfab500
	bool bPDGAsyncCommandletImportEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 0x1] 0x78dbfab580
	bool bEnableBackwardCompatibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 0x1] 0x78dbfa9500
	bool bAutomaticLegacyHDARebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26f, Size: 0x1] 0x78dbfa9580
	bool bUseCustomHoudiniLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1] 0x78dbfa9600
	DirectoryPath CustomHoudiniLocation;//[Offset: 0x278, Size: 0x10] 0x78dbfa9680
	int CookingThreadStackSize;//[Offset: 0x288, Size: 0x4] 0x78dbfa9700
	FString HoudiniEnvironmentFiles;//[Offset: 0x290, Size: 0x10] 0x78dbfa9780
	FString OtlSearchPath;//[Offset: 0x2a0, Size: 0x10] 0x78dbfa9800
	FString DsoSearchPath;//[Offset: 0x2b0, Size: 0x10] 0x78dbfa9880
	FString ImageDsoSearchPath;//[Offset: 0x2c0, Size: 0x10] 0x78dbfa9900
	FString AudioDsoSearchPath;//[Offset: 0x2d0, Size: 0x10] 0x78dbfa9980

--------------------------------
Class: HoudiniAssetBlueprintComponent.HoudiniAssetComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool FauxBPProperty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e8, Size: 0x1] 0x78dbfa0e00
	bool bHoudiniAssetChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e9, Size: 0x1] 0x78dbfa0e80
	bool bUpdatedFromTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ea, Size: 0x1] 0x78dbfa0f00
	bool bIsInBlueprintEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8eb, Size: 0x1] 0x78dbfa0f80
	bool bCanDeleteHoudiniNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ec, Size: 0x1] 0x78dbfa1000
	bool bHasRegisteredComponentTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ed, Size: 0x1] 0x78dbfa1080
	<HoudiniOutputObjectIdentifier,Guid> CachedOutputNodes;//[Offset: 0x8f8, Size: 0x50] 0x78dbf5bbc0
	<Guid,Guid> CachedInputNodes;//[Offset: 0x948, Size: 0x50] 0x78dbf5bc80
	void SetToggleValueAt(FString Name, bool Value, int Index);// 0x4b90d34 0x78d360fac0
	void SetFloatParameter(FString Name, float Value, int Index);// 0x4b90f3c 0x78d360fba0
	bool HasParameter(FString Name);// 0x4b91134 0x78d360fc80

--------------------------------
Class: HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetParameterButton.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetParameterChoice.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetParameterColor.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetParameterFile.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetParameterFloat.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetParameterFolder.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetParameterFolderList.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetParameterInt.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetParameterLabel.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetParameterMultiparm.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetParameterRamp.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetParameterSeparator.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetParameterString.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetParameterToggle.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetComponentMaterials_V1.Object

--------------------------------
Class: HoudiniHandleComponent_V1.SceneComponent.ActorComponent.Object

--------------------------------
Class: HoudiniSplineComponent_V1.SceneComponent.ActorComponent.Object

--------------------------------
Class: HoudiniAssetInput.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetInstanceInput.HoudiniAssetParameter.Object

--------------------------------
Class: HoudiniAssetInstanceInputField.Object

--------------------------------
Class: HoudiniAssetComponent_V1.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bGeneratedDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x470, Size: 0x1] 0x78dbfa0680
	PhysicalMaterial* GeneratedPhysMaterial;//[Offset: 0x478, Size: 0x8] 0x78dbfa0700
	BodyInstance DefaultBodyInstance;//[Offset: 0x480, Size: 0x150] 0x78dbfa0780
	byte GeneratedCollisionTraceFlag;//[Offset: 0x5d0, Size: 0x1] 0x78dbfa0800
	int GeneratedLightMapResolution;//[Offset: 0x5d4, Size: 0x4] 0x78dbfa0880
	float GeneratedLpvBiasMultiplier;//[Offset: 0x5d8, Size: 0x4] 0x78dbfa0900
	float GeneratedDistanceFieldResolutionScale;//[Offset: 0x5dc, Size: 0x4] 0x78dbfa0980
	WalkableSlopeOverride GeneratedWalkableSlopeOverride;//[Offset: 0x5e0, Size: 0x10] 0x78dbfa0a00
	int GeneratedLightMapCoordinateIndex;//[Offset: 0x5f0, Size: 0x4] 0x78dbfa0a80
	bool bGeneratedUseMaximumStreamingTexelRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f4, Size: 0x1] 0x78dbfa0b00
	float GeneratedStreamingDistanceMultiplier;//[Offset: 0x5f8, Size: 0x4] 0x78dbfa0b80
	FoliageType_InstancedStaticMesh* GeneratedFoliageDefaultSettings;//[Offset: 0x600, Size: 0x8] 0x78dbfa0c00
	AssetUserData*[] GeneratedAssetUserData;//[Offset: 0x608, Size: 0x10] 0x78dbf268c0
	FText BakeFolder;//[Offset: 0x618, Size: 0x18] 0x78dbfa0d00
	FText TempCookFolder;//[Offset: 0x630, Size: 0x18] 0x78dbfa0d80

--------------------------------
Class: HoudiniInstancedActorComponent_V1.SceneComponent.ActorComponent.Object

--------------------------------
Class: HoudiniMeshSplitInstancerComponent_V1.SceneComponent.ActorComponent.Object

--------------------------------
Class: HoudiniEngineCopyPropertiesInterface.Interface.Object

--------------------------------
Class: HoudiniInputStaticMesh.HoudiniInputObject.Object
	HoudiniInputStaticMesh*[] BlueprintStaticMeshes;//[Offset: 0xa8, Size: 0x10] 0x78dbf286c0

--------------------------------
Class: HoudiniInputSkeletalMesh.HoudiniInputObject.Object

--------------------------------
Class: HoudiniInputSceneComponent.HoudiniInputObject.Object
	Transform ActorTransform;//[Offset: 0xb0, Size: 0x30] 0x78dbfa2780

--------------------------------
Class: HoudiniInputMeshComponent.HoudiniInputSceneComponent.HoudiniInputObject.Object
	StaticMesh* StaticMesh;//[Offset: 0xe0, Size: 0x28] 0x78dbfa2680
	FString[] MeshComponentsMaterials;//[Offset: 0x108, Size: 0x10] 0x78dbf28620

--------------------------------
Class: HoudiniInputInstancedMeshComponent.HoudiniInputMeshComponent.HoudiniInputSceneComponent.HoudiniInputObject.Object
	Transform[] InstanceTransforms;//[Offset: 0x118, Size: 0x10] 0x78dbf28580

--------------------------------
Class: HoudiniInputSplineComponent.HoudiniInputSceneComponent.HoudiniInputObject.Object
	int NumberOfSplineControlPoints;//[Offset: 0xe0, Size: 0x4] 0x78dbfa2380
	float SplineLength;//[Offset: 0xe4, Size: 0x4] 0x78dbfa2400
	float SplineResolution;//[Offset: 0xe8, Size: 0x4] 0x78dbfa2480
	bool SplineClosed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1] 0x78dbfa2500
	Transform[] SplineControlPoints;//[Offset: 0xf0, Size: 0x10] 0x78dbf284e0

--------------------------------
Class: HoudiniInputCameraComponent.HoudiniInputSceneComponent.HoudiniInputObject.Object
	float FOV;//[Offset: 0xe0, Size: 0x4] 0x78dbfa3f80
	float AspectRatio;//[Offset: 0xe4, Size: 0x4] 0x78dbfa4000
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78dbfa4080
	float OrthoWidth;//[Offset: 0xec, Size: 0x4] 0x78dbfa4100
	float OrthoNearClipPlane;//[Offset: 0xf0, Size: 0x4] 0x78dbfa4180
	float OrthoFarClipPlane;//[Offset: 0xf4, Size: 0x4] 0x78dbfa4200

--------------------------------
Class: HoudiniInputHoudiniAsset.HoudiniInputObject.Object
	int AssetOutputIndex;//[Offset: 0xa4, Size: 0x4] 0x78dbfa3f00

--------------------------------
Class: HoudiniInputActor.HoudiniInputObject.Object
	HoudiniInputSceneComponent*[] ActorComponents;//[Offset: 0xa8, Size: 0x10] 0x78dbf28260
	<Object*> ActorSceneComponents;//[Offset: 0xb8, Size: 0x50] 0x78dbf28300
	int LastUpdateNumComponentsAdded;//[Offset: 0x108, Size: 0x4] 0x78dbfa3e00
	int LastUpdateNumComponentsRemoved;//[Offset: 0x10c, Size: 0x4] 0x78dbfa3e80

--------------------------------
Class: HoudiniInputLandscape.HoudiniInputActor.HoudiniInputObject.Object
	Transform CachedInputLandscapeTraqnsform;//[Offset: 0x110, Size: 0x30] 0x78dbfa3c80

--------------------------------
Class: HoudiniInputBrush.HoudiniInputActor.HoudiniInputObject.Object
	HoudiniBrushInfo[] BrushesInfo;//[Offset: 0x110, Size: 0x10] 0x78dbf281c0
	Model* CombinedModel;//[Offset: 0x120, Size: 0x8] 0x78dbfa3b00
	bool bIgnoreInputObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x78dbfa3b80
	byte CachedInputBrushType;//[Offset: 0x129, Size: 0x1] 0x78dbfa3c00

--------------------------------
Class: HoudiniBrushInfo
	Brush* BrushActor;//[Offset: 0x0, Size: 0x8] 0x78cdbb9380
	Transform CachedTransform;//[Offset: 0x10, Size: 0x30] 0x78cdbb9400
	Vector CachedOrigin;//[Offset: 0x40, Size: 0xc] 0x78cdbb9480
	Vector CachedExtent;//[Offset: 0x4c, Size: 0xc] 0x78cdbb7400
	byte CachedBrushType;//[Offset: 0x58, Size: 0x1] 0x78cdbb7480
	uint64 CachedSurfaceHash;//[Offset: 0x60, Size: 0x8] 0x78cdbb7500

--------------------------------
Class: HoudiniInputDataTable.HoudiniInputObject.Object

--------------------------------
Class: HoudiniInputFoliageType_InstancedStaticMesh.HoudiniInputStaticMesh.HoudiniInputObject.Object

--------------------------------
Class: HoudiniInstancedActorComponent.SceneComponent.ActorComponent.Object
	Object* InstancedObject;//[Offset: 0x208, Size: 0x8] 0x78dbfa3980
	Actor*[] InstancedActors;//[Offset: 0x210, Size: 0x10] 0x78dbf28120

--------------------------------
Class: HoudiniMeshSplitInstancerComponent.SceneComponent.ActorComponent.Object
	StaticMeshComponent*[] Instances;//[Offset: 0x208, Size: 0x10] 0x78dbf27fe0
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x218, Size: 0x10] 0x78dbf28080
	StaticMesh* InstancedMesh;//[Offset: 0x228, Size: 0x8] 0x78dbfa3900

--------------------------------
Class: HoudiniLandscapePtr.Object
	LandscapeProxy* LandscapeSoftPtr;//[Offset: 0x28, Size: 0x28] 0x78dbfa3700
	enum BakeType;//[Offset: 0x50, Size: 0x1] 0x78dbf27f40

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x220, Size: 0x8] 0x78d7227b80
	Guid LandscapeGuid;//[Offset: 0x228, Size: 0x10] 0x78d7227c00
	IntPoint LandscapeSectionOffset;//[Offset: 0x238, Size: 0x8] 0x78d7227c80
	int MaxLODLevel;//[Offset: 0x240, Size: 0x4] 0x78d7227d00
	float LODDistanceFactor;//[Offset: 0x244, Size: 0x4] 0x78d7227d80
	byte LODFalloff;//[Offset: 0x248, Size: 0x1] 0x78d7227e00
	float ComponentScreenSizeToUseSubSections;//[Offset: 0x24c, Size: 0x4] 0x78d7227e80
	float LOD0ScreenSize;//[Offset: 0x250, Size: 0x4] 0x78d7227f00
	float LOD0DistributionSetting;//[Offset: 0x254, Size: 0x4] 0x78d7227f80
	float LODDistributionSetting;//[Offset: 0x258, Size: 0x4] 0x78d7228000
	float TessellationComponentScreenSize;//[Offset: 0x25c, Size: 0x4] 0x78d7228080
	bool UseTessellationComponentScreenSizeFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x78d7228100
	float TessellationComponentScreenSizeFalloff;//[Offset: 0x264, Size: 0x4] 0x78d7228180
	int OccluderGeometryLOD;//[Offset: 0x268, Size: 0x4] 0x78d7228200
	bool bUseCustomReflectionCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 0x1] 0x78d7228280
	ReflectionCapture* ReflectionCapture;//[Offset: 0x270, Size: 0x8] 0x78d7228300
	int StaticLightingLOD;//[Offset: 0x278, Size: 0x4] 0x78d7228380
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x280, Size: 0x8] 0x78d7228400
	float StreamingDistanceMultiplier;//[Offset: 0x288, Size: 0x4] 0x78d7226380
	MaterialInterface* LandscapeMaterial;//[Offset: 0x290, Size: 0x8] 0x78d7226400
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x2b8, Size: 0x8] 0x78d7226480
	LandscapeProxyMaterialOverride[] LandscapeMaterialsOverride;//[Offset: 0x2c0, Size: 0x10] 0x78d715bfa0
	bool bMeshHoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1] 0x78d7226580
	byte MeshHolesMaxLod;//[Offset: 0x2d1, Size: 0x1] 0x78d7226600
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x2d8, Size: 0x10] 0x78d715c040
	int VirtualTextureNumLods;//[Offset: 0x2e8, Size: 0x4] 0x78d7226700
	int VirtualTextureLodBias;//[Offset: 0x2ec, Size: 0x4] 0x78d7226780
	enum VirtualTextureRenderPassType;//[Offset: 0x2f0, Size: 0x1] 0x78d715c0e0
	float NegativeZBoundsExtension;//[Offset: 0x2f4, Size: 0x4] 0x78d7226880
	float PositiveZBoundsExtension;//[Offset: 0x2f8, Size: 0x4] 0x78d7226900
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x300, Size: 0x10] 0x78d715c180
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x310, Size: 0x10] 0x78d715c220
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x320, Size: 0x10] 0x78d715c2c0
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1] 0x78d7226b00
	float StaticLightingResolution;//[Offset: 0x398, Size: 0x4] 0x78d7226b80
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39c, Size: 0x1] 0x78d7226c00
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39c, Size: 0x1] 0x78d7226c80
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39c, Size: 0x1] 0x78d7226d00
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39c, Size: 0x1] 0x78d7226d80
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x39c, Size: 0x1] 0x78d7226e00
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x39c, Size: 0x1] 0x78d7226e80
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x39c, Size: 0x1] 0x78d7226f00
	LightingChannels LightingChannels;//[Offset: 0x39d, Size: 0x1] 0x78d7226f80
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39e, Size: 0x1] 0x78d7227000
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39e, Size: 0x1] 0x78d7227080
	enum CustomDepthStencilWriteMask;//[Offset: 0x39f, Size: 0x1] 0x78d715c360
	int CustomDepthStencilValue;//[Offset: 0x3a0, Size: 0x4] 0x78d7227180
	float LDMaxDrawDistance;//[Offset: 0x3a4, Size: 0x4] 0x78d7227200
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x3a8, Size: 0x18] 0x78d7227280
	int CollisionMipLevel;//[Offset: 0x3c0, Size: 0x4] 0x78d7227300
	int SimpleCollisionMipLevel;//[Offset: 0x3c4, Size: 0x4] 0x78d7227380
	float CollisionThickness;//[Offset: 0x3c8, Size: 0x4] 0x78d7225300
	BodyInstance BodyInstance;//[Offset: 0x3d0, Size: 0x150] 0x78d7225380
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x520, Size: 0x1] 0x78d7225400
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x520, Size: 0x1] 0x78d7225480
	int ComponentSizeQuads;//[Offset: 0x524, Size: 0x4] 0x78d7225500
	int SubsectionSizeQuads;//[Offset: 0x528, Size: 0x4] 0x78d7225580
	int NumSubsections;//[Offset: 0x52c, Size: 0x4] 0x78d7225600
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x530, Size: 0x1] 0x78d7225680
	bool bFillCollisionUnderLandscapeForNavmesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x530, Size: 0x1] 0x78d7225700
	bool bUseDynamicMaterialInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 0x1] 0x78d7225780
	enum NavigationGeometryGatheringMode;//[Offset: 0x532, Size: 0x1] 0x78d715c400
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x533, Size: 0x1] 0x78d7225880
	bool bHasLayersContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 0x1] 0x78d7225900
	<Texture2D*,LandscapeWeightmapUsage*> WeightmapUsageMap;//[Offset: 0x538, Size: 0x50] 0x78d7103580
	void SetLandscapeMaterialVectorParameterValue(FName ParameterName, LinearColor Value);// 0xb74c55c 0x78d720f2e0
	void SetLandscapeMaterialTextureParameterValue(FName ParameterName, Texture* Value);// 0xb74c64c 0x78d720f3c0
	void SetLandscapeMaterialScalarParameterValue(FName ParameterName, float Value);// 0xb74c468 0x78d720f4a0
	bool LandscapeExportHeightmapToRenderTarget(TextureRenderTarget2D* InRenderTarget, bool InExportHeightIntoRGChannel, bool InExportLandscapeProxies);// 0xb74c310 0x78d720f580
	void EditorSetLandscapeMaterial(MaterialInterface* NewLandscapeMaterial);// 0xb74cb18 0x78d720f660
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer, FName EditLayerName);// 0xb74c73c 0x78d720f740
	void ChangeUseTessellationComponentScreenSizeFalloff(bool InComponentScreenSizeToUseSubSections);// 0xb74cc70 0x78d720f820
	void ChangeTessellationComponentScreenSizeFalloff(float InUseTessellationComponentScreenSizeFalloff);// 0xb74cbc0 0x78d720f900
	void ChangeTessellationComponentScreenSize(float InTessellationComponentScreenSize);// 0xb74cdd8 0x78d720f9e0
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0xb74ce88 0x78d720fac0
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);// 0xb74cd28 0x78d720fba0

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x470, Size: 0x10] 0x78d715d4e0
	LandscapeSplineSegment*[] Segments;//[Offset: 0x480, Size: 0x10] 0x78d715d580
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x490, Size: 0x10] 0x78d715d620
	SplineMeshComponent*[] GetSplineMeshComponents();// 0xb74f848 0x78d7251900

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 0xc] 0x78d722d580
	Rotator Rotation;//[Offset: 0x34, Size: 0xc] 0x78d722d600
	float Width;//[Offset: 0x40, Size: 0x4] 0x78d722d680
	float LayerWidthRatio;//[Offset: 0x44, Size: 0x4] 0x78d722b600
	float SideFalloff;//[Offset: 0x48, Size: 0x4] 0x78d722b680
	float LeftSideFalloffFactor;//[Offset: 0x4c, Size: 0x4] 0x78d722b700
	float RightSideFalloffFactor;//[Offset: 0x50, Size: 0x4] 0x78d722b780
	float LeftSideLayerFalloffFactor;//[Offset: 0x54, Size: 0x4] 0x78d722b800
	float RightSideLayerFalloffFactor;//[Offset: 0x58, Size: 0x4] 0x78d722b880
	float EndFalloff;//[Offset: 0x5c, Size: 0x4] 0x78d722b900
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x60, Size: 0x10] 0x78d715d760
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10] 0x78d715d800
	Box Bounds;//[Offset: 0x80, Size: 0x1c] 0x78d722ba80
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0xa0, Size: 0x8] 0x78d722bb00

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x8] 0x78dbe4c680
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78dbe4c700

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 0x18] 0x78d722d100
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 0x18] 0x78d722d180
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10] 0x78d715d3a0
	Box Bounds;//[Offset: 0x80, Size: 0x1c] 0x78d722d280
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 0x10] 0x78d715d440

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x8] 0x78dbe4e180
	float TangentLen;//[Offset: 0x8, Size: 0x4] 0x78dbe4e200
	FName SocketName;//[Offset: 0xc, Size: 0x8] 0x78dbe4e280

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 0xc] 0x78dbe4dc80
	Vector Left;//[Offset: 0xc, Size: 0xc] 0x78dbe4dd00
	Vector Right;//[Offset: 0x18, Size: 0xc] 0x78dbe4dd80
	Vector FalloffLeft;//[Offset: 0x24, Size: 0xc] 0x78dbe4de00
	Vector FalloffRight;//[Offset: 0x30, Size: 0xc] 0x78dbe4de80
	Vector LayerLeft;//[Offset: 0x3c, Size: 0xc] 0x78dbe4df00
	Vector LayerRight;//[Offset: 0x48, Size: 0xc] 0x78dbe4df80
	Vector LayerFalloffLeft;//[Offset: 0x54, Size: 0xc] 0x78dbe4e000
	Vector LayerFalloffRight;//[Offset: 0x60, Size: 0xc] 0x78dbe4e080
	float StartEndFalloff;//[Offset: 0x6c, Size: 0x4] 0x78dbe4e100

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x508, Size: 0x4] 0x78d7224780

--------------------------------
Class: LandscapeProxyMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4] 0x78dbe4c800
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x78dbe4c880

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x470, Size: 0x4] 0x78d722a280
	int SectionBaseY;//[Offset: 0x474, Size: 0x4] 0x78d722a300
	int ComponentSizeQuads;//[Offset: 0x478, Size: 0x4] 0x78d722a380
	int SubsectionSizeQuads;//[Offset: 0x47c, Size: 0x4] 0x78d722a400
	int NumSubsections;//[Offset: 0x480, Size: 0x4] 0x78d722a480
	MaterialInterface* OverrideMaterial;//[Offset: 0x488, Size: 0x8] 0x78d722a500
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x490, Size: 0x8] 0x78d7228480
	LandscapeComponentMaterialOverride[] OverrideMaterials;//[Offset: 0x498, Size: 0x10] 0x78d715e200
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x4a8, Size: 0x10] 0x78d715e2a0
	MaterialInstanceDynamic*[] MaterialInstancesDynamic;//[Offset: 0x4b8, Size: 0x10] 0x78d715ba00
	int8[] LODIndexToMaterialIndex;//[Offset: 0x4c8, Size: 0x10] 0x78d715baa0
	int8[] MaterialIndexToDisabledTessellationMaterial;//[Offset: 0x4d8, Size: 0x10] 0x78d715bb40
	Texture2D* XYOffsetmapTexture;//[Offset: 0x4e8, Size: 0x8] 0x78d7228780
	Vector4 WeightmapScaleBias;//[Offset: 0x4f0, Size: 0x10] 0x78d7228800
	float WeightmapSubsectionOffset;//[Offset: 0x500, Size: 0x4] 0x78d7228880
	Vector4 HeightmapScaleBias;//[Offset: 0x510, Size: 0x10] 0x78d7228900
	Box CachedLocalBox;//[Offset: 0x520, Size: 0x1c] 0x78d7228980
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x53c, Size: 0x1c] 0x78d7228a00
	Texture2D* HeightmapTexture;//[Offset: 0x558, Size: 0x8] 0x78d7228a80
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x560, Size: 0x10] 0x78d715bbe0
	Texture2D*[] WeightmapTextures;//[Offset: 0x570, Size: 0x10] 0x78d715bc80
	LandscapeLODStreamingProxy* LODStreamingProxy;//[Offset: 0x580, Size: 0x8] 0x78d7228c00
	Guid MapBuildDataId;//[Offset: 0x588, Size: 0x10] 0x78d7228c80
	Guid[] IrrelevantLights;//[Offset: 0x598, Size: 0x10] 0x78d715bd20
	int CollisionMipLevel;//[Offset: 0x5a8, Size: 0x4] 0x78d7228d80
	int SimpleCollisionMipLevel;//[Offset: 0x5ac, Size: 0x4] 0x78d7228e00
	float NegativeZBoundsExtension;//[Offset: 0x5b0, Size: 0x4] 0x78d7228e80
	float PositiveZBoundsExtension;//[Offset: 0x5b4, Size: 0x4] 0x78d7228f00
	float StaticLightingResolution;//[Offset: 0x5b8, Size: 0x4] 0x78d7228f80
	int ForcedLOD;//[Offset: 0x5bc, Size: 0x4] 0x78d7229000
	int LODBias;//[Offset: 0x5c0, Size: 0x4] 0x78d7229080
	Guid StateId;//[Offset: 0x5c4, Size: 0x10] 0x78d7229100
	Guid BakedTextureMaterialGuid;//[Offset: 0x5d4, Size: 0x10] 0x78d7229180
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x5e8, Size: 0x8] 0x78d7229200
	byte MobileBlendableLayerMask;//[Offset: 0x5f0, Size: 0x1] 0x78d7229280
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x5f8, Size: 0x8] 0x78d7229300
	MaterialInterface*[] MobileMaterialInterfaces;//[Offset: 0x600, Size: 0x10] 0x78d715bdc0
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x610, Size: 0x10] 0x78d715be60
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0xb746708 0x78d720ecc0
	float EditorGetPaintLayerWeightByNameAtLocation(out const Vector InLocation, const FName InPaintLayerName);// 0xb746500 0x78d720eda0
	float EditorGetPaintLayerWeightAtLocation(out const Vector InLocation, LandscapeLayerInfoObject* PaintLayer);// 0xb746604 0x78d720ee80

--------------------------------
Class: LandscapeComponentMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4] 0x78dbe4b980
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x78dbe4ba00

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x470, Size: 0x10] 0x78d715df80
	int SectionBaseX;//[Offset: 0x480, Size: 0x4] 0x78d7229880
	int SectionBaseY;//[Offset: 0x484, Size: 0x4] 0x78d7229900
	int CollisionSizeQuads;//[Offset: 0x488, Size: 0x4] 0x78d7229980
	float CollisionScale;//[Offset: 0x48c, Size: 0x4] 0x78d7229a00
	int SimpleCollisionSizeQuads;//[Offset: 0x490, Size: 0x4] 0x78d7229a80
	byte[] CollisionQuadFlags;//[Offset: 0x498, Size: 0x10] 0x78d715e020
	Guid HeightfieldGuid;//[Offset: 0x4a8, Size: 0x10] 0x78d7229b80
	Box CachedLocalBox;//[Offset: 0x4b8, Size: 0x1c] 0x78d7229c00
	LandscapeComponent* RenderComponent;//[Offset: 0x4d4, Size: 0x1c] 0x78d7229c80
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x500, Size: 0x10] 0x78d715e0c0
	LandscapeComponent* GetRenderComponent();// 0xb7476a0 0x78d720ebe0

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8] 0x78d722b380
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8] 0x78d722b400
	float Hardness;//[Offset: 0x38, Size: 0x4] 0x78d722b480
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 0x10] 0x78d722b500

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8] 0x78dbe4bc00
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 0x1] 0x78dbe4bc80
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 0x1] 0x78dbe4bd00

--------------------------------
Class: LandscapeLODStreamingProxy.StreamableRenderAsset.Object

--------------------------------
Class: LandscapeWeightmapUsage.Object
	LandscapeComponent* ChannelUsage;//[Offset: 0x28, Size: 0x8] 0x78d722cf80
	Guid LayerGuid;//[Offset: 0x48, Size: 0x10] 0x78d722d000

--------------------------------
Class: HoudiniLandscapeEditLayer.Object
	LandscapeProxy* LandscapeSoftPtr;//[Offset: 0x28, Size: 0x28] 0x78dbfa3600
	FString LayerName;//[Offset: 0x50, Size: 0x10] 0x78dbfa3680

--------------------------------
Class: HoudiniParameterButton.HoudiniParameter.Object

--------------------------------
Class: HoudiniParameterButtonStrip.HoudiniParameter.Object
	int Count;//[Offset: 0x104, Size: 0x4] 0x78dbfa6000
	FString[] Labels;//[Offset: 0x108, Size: 0x10] 0x78dbf2a380
	int[] Values;//[Offset: 0x118, Size: 0x10] 0x78dbf2a420

--------------------------------
Class: HoudiniParameterChoice.HoudiniParameter.Object
	int IntValue;//[Offset: 0x104, Size: 0x4] 0x78dbfa5c80
	int DefaultIntValue;//[Offset: 0x108, Size: 0x4] 0x78dbfa5d00
	FString StringValue;//[Offset: 0x110, Size: 0x10] 0x78dbfa5d80
	FString DefaultStringValue;//[Offset: 0x120, Size: 0x10] 0x78dbfa5e00
	FString[] StringChoiceValues;//[Offset: 0x130, Size: 0x10] 0x78dbf2a240
	FString[] StringChoiceLabels;//[Offset: 0x140, Size: 0x10] 0x78dbf2a2e0
	bool bIsChildOfRamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1] 0x78dbfa5f80

--------------------------------
Class: HoudiniParameterColor.HoudiniParameter.Object
	LinearColor Color;//[Offset: 0x104, Size: 0x10] 0x78dbfa5b00
	LinearColor DefaultColor;//[Offset: 0x114, Size: 0x10] 0x78dbfa5b80
	bool bIsChildOfRamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1] 0x78dbfa5c00

--------------------------------
Class: HoudiniParameterFile.HoudiniParameter.Object
	FString[] Values;//[Offset: 0x108, Size: 0x10] 0x78dbf2a100
	FString[] DefaultValues;//[Offset: 0x118, Size: 0x10] 0x78dbf2a1a0
	FString Filters;//[Offset: 0x128, Size: 0x10] 0x78dbfa5a00
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1] 0x78dbfa5a80

--------------------------------
Class: HoudiniParameterFloat.HoudiniParameter.Object
	float[] Values;//[Offset: 0x108, Size: 0x10] 0x78dbf29fc0
	float[] DefaultValues;//[Offset: 0x118, Size: 0x10] 0x78dbf2a060
	FString Unit;//[Offset: 0x128, Size: 0x10] 0x78dbfa5300
	bool bNoSwap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1] 0x78dbfa5380
	bool bHasMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1] 0x78dbfa5400
	bool bHasMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1] 0x78dbfa5480
	bool bHasUIMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b, Size: 0x1] 0x78dbfa5500
	bool bHasUIMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1] 0x78dbfa5580
	bool bIsLogarithmic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 0x1] 0x78dbfa5600
	float Min;//[Offset: 0x140, Size: 0x4] 0x78dbfa5680
	float Max;//[Offset: 0x144, Size: 0x4] 0x78dbfa5700
	float UIMin;//[Offset: 0x148, Size: 0x4] 0x78dbfa5780
	float UIMax;//[Offset: 0x14c, Size: 0x4] 0x78dbfa5800
	bool bIsChildOfRamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1] 0x78dbfa5880

--------------------------------
Class: HoudiniParameterFolder.HoudiniParameter.Object
	enum FolderType;//[Offset: 0x101, Size: 0x1] 0x78dbf29f20
	bool bExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 0x1] 0x78dbfa7100
	bool bChosen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103, Size: 0x1] 0x78dbfa7180
	int ChildCounter;//[Offset: 0x104, Size: 0x4] 0x78dbfa7200
	bool bIsContentShown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1] 0x78dbfa7280

--------------------------------
Class: HoudiniParameterFolderList.HoudiniParameter.Object
	bool bIsTabMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1] 0x78dbfa6f00
	bool bIsTabsShown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 0x1] 0x78dbfa6f80
	HoudiniParameterFolder*[] TabFolders;//[Offset: 0x108, Size: 0x10] 0x78dbf29e80

--------------------------------
Class: HoudiniParameterInt.HoudiniParameter.Object
	int[] Values;//[Offset: 0x108, Size: 0x10] 0x78dbf29d40
	int[] DefaultValues;//[Offset: 0x118, Size: 0x10] 0x78dbf29de0
	FString Unit;//[Offset: 0x128, Size: 0x10] 0x78dbfa6a00
	bool bHasMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1] 0x78dbfa6a80
	bool bHasMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1] 0x78dbfa6b00
	bool bHasUIMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1] 0x78dbfa6b80
	bool bHasUIMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b, Size: 0x1] 0x78dbfa6c00
	bool bIsLogarithmic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1] 0x78dbfa6c80
	int Min;//[Offset: 0x140, Size: 0x4] 0x78dbfa6d00
	int Max;//[Offset: 0x144, Size: 0x4] 0x78dbfa6d80
	int UIMin;//[Offset: 0x148, Size: 0x4] 0x78dbfa6e00
	int UIMax;//[Offset: 0x14c, Size: 0x4] 0x78dbfa6e80

--------------------------------
Class: HoudiniParameterLabel.HoudiniParameter.Object
	FString[] LabelStrings;//[Offset: 0x108, Size: 0x10] 0x78dbf29ca0

--------------------------------
Class: HoudiniParameterMultiParm.HoudiniParameter.Object
	bool bIsShown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1] 0x78dbfa6380
	int Value;//[Offset: 0x104, Size: 0x4] 0x78dbfa6400
	FString TemplateName;//[Offset: 0x108, Size: 0x10] 0x78dbfa6480
	int MultiparmValue;//[Offset: 0x118, Size: 0x4] 0x78dbfa6500
	uint32 MultiParmInstanceNum;//[Offset: 0x11c, Size: 0x4] 0x78dbfa6580
	uint32 MultiParmInstanceLength;//[Offset: 0x120, Size: 0x4] 0x78dbfa6600
	uint32 MultiParmInstanceCount;//[Offset: 0x124, Size: 0x4] 0x78dbfa6680
	uint32 InstanceStartOffset;//[Offset: 0x128, Size: 0x4] 0x78dbfa6700
	enum[] MultiParmInstanceLastModifyArray;//[Offset: 0x130, Size: 0x10] 0x78dbf29c00
	int DefaultInstanceCount;//[Offset: 0x140, Size: 0x4] 0x78dbfa6800

--------------------------------
Class: HoudiniParameterOperatorPath.HoudiniParameter.Object
	HoudiniInput* HoudiniInput;//[Offset: 0x104, Size: 0x8] 0x78dbfa8400

--------------------------------
Class: HoudiniParameterRampModificationEvent.Object
	bool bIsInsertEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dbfa8080
	bool bIsFloatRamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78dbfa8100
	int DeleteInstanceIndex;//[Offset: 0x2c, Size: 0x4] 0x78dbfa8180
	float InsertPosition;//[Offset: 0x30, Size: 0x4] 0x78dbfa8200
	float InsertFloat;//[Offset: 0x34, Size: 0x4] 0x78dbfa8280
	LinearColor InsertColor;//[Offset: 0x38, Size: 0x10] 0x78dbfa8300
	enum InsertInterpolation;//[Offset: 0x48, Size: 0x1] 0x78dbf29ac0

--------------------------------
Class: HoudiniParameterRampFloatPoint.Object
	float Position;//[Offset: 0x28, Size: 0x4] 0x78dbfa7d00
	float Value;//[Offset: 0x2c, Size: 0x4] 0x78dbfa7d80
	enum Interpolation;//[Offset: 0x30, Size: 0x1] 0x78dbf29a20
	int InstanceIndex;//[Offset: 0x34, Size: 0x4] 0x78dbfa7e80
	HoudiniParameterFloat* PositionParentParm;//[Offset: 0x38, Size: 0x8] 0x78dbfa7f00
	HoudiniParameterFloat* ValueParentParm;//[Offset: 0x40, Size: 0x8] 0x78dbfa7f80
	HoudiniParameterChoice* InterpolationParentParm;//[Offset: 0x48, Size: 0x8] 0x78dbfa8000

--------------------------------
Class: HoudiniParameterRampColorPoint.Object
	float Position;//[Offset: 0x28, Size: 0x4] 0x78dbfa7980
	LinearColor Value;//[Offset: 0x2c, Size: 0x10] 0x78dbfa7a00
	enum Interpolation;//[Offset: 0x3c, Size: 0x1] 0x78dbf29980
	int InstanceIndex;//[Offset: 0x40, Size: 0x4] 0x78dbfa7b00
	HoudiniParameterFloat* PositionParentParm;//[Offset: 0x48, Size: 0x8] 0x78dbfa7b80
	HoudiniParameterColor* ValueParentParm;//[Offset: 0x50, Size: 0x8] 0x78dbfa7c00
	HoudiniParameterChoice* InterpolationParentParm;//[Offset: 0x58, Size: 0x8] 0x78dbfa7c80

--------------------------------
Class: HoudiniParameterRampFloat.HoudiniParameterMultiParm.HoudiniParameter.Object
	HoudiniParameterRampFloatPoint*[] Points;//[Offset: 0x148, Size: 0x10] 0x78dbf295c0
	HoudiniParameterRampFloatPoint*[] CachedPoints;//[Offset: 0x158, Size: 0x10] 0x78dbf29660
	float[] DefaultPositions;//[Offset: 0x168, Size: 0x10] 0x78dbf29700
	float[] DefaultValues;//[Offset: 0x178, Size: 0x10] 0x78dbf297a0
	int[] DefaultChoices;//[Offset: 0x188, Size: 0x10] 0x78dbf29840
	int NumDefaultPoints;//[Offset: 0x198, Size: 0x4] 0x78dbfa7800
	bool bCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 0x1] 0x78dbfa7880
	HoudiniParameterRampModificationEvent*[] ModificationEvents;//[Offset: 0x1a0, Size: 0x10] 0x78dbf298e0

--------------------------------
Class: HoudiniParameterRampColor.HoudiniParameterMultiParm.HoudiniParameter.Object
	HoudiniParameterRampColorPoint*[] Points;//[Offset: 0x148, Size: 0x10] 0x78dbf29200
	bool bCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1] 0x78dbfa9300
	HoudiniParameterRampColorPoint*[] CachedPoints;//[Offset: 0x160, Size: 0x10] 0x78dbf292a0
	float[] DefaultPositions;//[Offset: 0x170, Size: 0x10] 0x78dbf29340
	LinearColor[] DefaultValues;//[Offset: 0x180, Size: 0x10] 0x78dbf293e0
	int[] DefaultChoices;//[Offset: 0x190, Size: 0x10] 0x78dbf29480
	int NumDefaultPoints;//[Offset: 0x1a0, Size: 0x4] 0x78dbfa7480
	HoudiniParameterRampModificationEvent*[] ModificationEvents;//[Offset: 0x1a8, Size: 0x10] 0x78dbf29520

--------------------------------
Class: HoudiniParameterSeparator.HoudiniParameter.Object

--------------------------------
Class: HoudiniParameterString.HoudiniParameter.Object
	FString[] Values;//[Offset: 0x108, Size: 0x10] 0x78dbf2b960
	FString[] DefaultValues;//[Offset: 0x118, Size: 0x10] 0x78dbf290c0
	Object*[] ChosenAssets;//[Offset: 0x128, Size: 0x10] 0x78dbf29160
	bool bIsAssetRef;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1] 0x78dbfa9200

--------------------------------
Class: HoudiniParameterToggle.HoudiniParameter.Object
	int[] Values;//[Offset: 0x108, Size: 0x10] 0x78dbf2b820
	int[] DefaultValues;//[Offset: 0x118, Size: 0x10] 0x78dbf2b8c0

--------------------------------
Class: HoudiniStaticMesh.Object
	bool bHasNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dbfaeb00
	bool bHasTangents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78dbfaeb80
	bool bHasColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78dbfaec00
	uint32 NumUVLayers;//[Offset: 0x2c, Size: 0x4] 0x78dbfaec80
	bool bHasPerFaceMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78dbfaed00
	Vector[] VertexPositions;//[Offset: 0x38, Size: 0x10] 0x78dbf2a560
	IntVector[] TriangleIndices;//[Offset: 0x48, Size: 0x10] 0x78dbf2a600
	Color[] VertexInstanceColors;//[Offset: 0x58, Size: 0x10] 0x78dbf2a6a0
	Vector[] VertexInstanceNormals;//[Offset: 0x68, Size: 0x10] 0x78dbf2a740
	Vector[] VertexInstanceUTangents;//[Offset: 0x78, Size: 0x10] 0x78dbf2a7e0
	Vector[] VertexInstanceVTangents;//[Offset: 0x88, Size: 0x10] 0x78dbf2a880
	Vector2D[] VertexInstanceUVs;//[Offset: 0x98, Size: 0x10] 0x78dbf2a920
	int[] MaterialIDsPerTriangle;//[Offset: 0xa8, Size: 0x10] 0x78dbf2a9c0
	StaticMaterial[] StaticMaterials;//[Offset: 0xb8, Size: 0x10] 0x78dbf2aa60
	void SetVertexPosition(uint32 InVertexIndex, out const Vector InPosition);// 0x4bac4a8 0x78dbfb0da0
	void SetTriangleVertexVTangent(uint32 InTriangleIndex, byte InTriangleVertexIndex, out const Vector InVTangent);// 0x4babfe4 0x78dbfb0e80
	void SetTriangleVertexUV(uint32 InTriangleIndex, byte InTriangleVertexIndex, byte InUVLayer, out const Vector2D InUV);// 0x4babd10 0x78dbfb0f60
	void SetTriangleVertexUTangent(uint32 InTriangleIndex, byte InTriangleVertexIndex, out const Vector InUTangent);// 0x4bac128 0x78dbfb1040
	void SetTriangleVertexNormal(uint32 InTriangleIndex, byte InTriangleVertexIndex, out const Vector InNormal);// 0x4bac26c 0x78dbfb1120
	void SetTriangleVertexIndices(uint32 InTriangleIndex, out const IntVector InTriangleVertexIndices);// 0x4bac3b0 0x78dbfb1200
	void SetTriangleVertexColor(uint32 InTriangleIndex, byte InTriangleVertexIndex, out const Color InColor);// 0x4babea0 0x78dbfb12e0
	void SetTriangleMaterialID(uint32 InTriangleIndex, int InMaterialID);// 0x4babc20 0x78dbfb13c0
	void SetStaticMaterial(uint32 InMaterialIndex, out const StaticMaterial InStaticMaterial);// 0x4babb24 0x78dbfb14a0
	void SetNumUVLayers(uint32 InNumUVLayers);// 0x4bac6bc 0x78dbfb1580
	void SetNumStaticMaterials(uint32 InNumStaticMaterials);// 0x4bac5f8 0x78dbfb1660
	void SetHasTangents(bool bInHasTangents);// 0x4bac84c 0x78dbfb1740
	void SetHasPerFaceMaterials(bool bInHasPerFaceMaterials);// 0x4bac9e4 0x78dbfb1820
	void SetHasNormals(bool bInHasNormals);// 0x4bac918 0x78dbfb1900
	void SetHasColors(bool bInHasColors);// 0x4bac780 0x78dbfb19e0
	void Optimize();// 0x4baba00 0x78dbfb1ac0
	bool IsValid(bool bInSkipVertexIndicesCheck);// 0x4bab2bc 0x78dbfb1ba0
	void Initialize(uint32 InNumVertices, uint32 InNumTriangles, uint32 InNumUVLayers, uint32 InInitialNumStaticMaterials, bool bInHasNormals, bool bInHasTangents, bool bInHasColors, bool bInHasPerFaceMaterials);// 0x4bacab0 0x78dbfb1c80
	bool HasTangents();// 0x4bac8fc 0x78d360e780
	bool HasPerFaceMaterials();// 0x4baca94 0x78d360e860
	bool HasNormals();// 0x4bac9c8 0x78d360e940
	bool HasColors();// 0x4bac830 0x78d360ea20
	Vector[] GetVertexPositions();// 0x4bab90c 0x78d360eb00
	Vector[] GetVertexInstanceVTangents();// 0x4bab668 0x78d360ebe0
	Vector2D[] GetVertexInstanceUVs();// 0x4bab5e4 0x78d360ecc0
	Vector[] GetVertexInstanceUTangents();// 0x4bab6f0 0x78d360eda0
	Vector[] GetVertexInstanceNormals();// 0x4bab778 0x78d360ee80
	Color[] GetVertexInstanceColors();// 0x4bab800 0x78d360ef60
	IntVector[] GetTriangleIndices();// 0x4bab884 0x78d360f040
	StaticMaterial[] GetStaticMaterials();// 0x4bab4d8 0x78d360f120
	uint32 GetNumVertices();// 0x4bac5dc 0x78d360f200
	uint32 GetNumVertexInstances();// 0x4bac5a0 0x78d360f2e0
	uint32 GetNumUVLayers();// 0x4bac764 0x78d360f3c0
	uint32 GetNumTriangles();// 0x4bac5c0 0x78d360f4a0
	uint32 GetNumStaticMaterials();// 0x4bac6a0 0x78d360f580
	int GetMaterialIndex(FName InMaterialSlotName);// 0x4bab378 0x78d360f660
	int[] GetMaterialIDsPerTriangle();// 0x4bab560 0x78d360f740
	MaterialInterface* GetMaterial(int InMaterialIndex);// 0x4bab428 0x78d360f820
	Box CalcBounds();// 0x4bab994 0x78d360f900
	uint32 AddStaticMaterial(out const StaticMaterial InStaticMaterial);// 0x4baba14 0x78d360f9e0

--------------------------------
Class: HoudiniStaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	HoudiniStaticMesh* mesh;//[Offset: 0x498, Size: 0x8] 0x78dbfaf880
	Box LocalBounds;//[Offset: 0x4a0, Size: 0x1c] 0x78dbfaf900
	bool bHoudiniIconVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 0x1] 0x78dbfaf980
	void SetMesh(HoudiniStaticMesh* InMesh);// 0x4badda4 0x78dbfb0320
	void SetHoudiniIconVisible(bool bInHoudiniIconVisible);// 0x4badca8 0x78dbfb0400
	void NotifyMeshUpdated();// 0x4badd74 0x78dbfb04e0
	bool IsHoudiniIconVisible();// 0x4badd58 0x78dbfb05c0
	HoudiniStaticMesh* GetMesh();// 0x4badd88 0x78dbfb06a0

--------------------------------
Class: HoudiniAssetStateEvents.Interface.Object

--------------------------------
Class: ParticleSystemWidget.Widget.Visual.Object
	ParticleSystem* ParticleSystemTemplate;//[Offset: 0x108, Size: 0x8] 0x78dbfc0d00
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x78dbfc0d80
	bool bReactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1] 0x78dbfc0e00
	UIParticleComponent* WorldParticleComponent;//[Offset: 0x118, Size: 0x8] 0x78dbfc0e80
	Actor* WorldParticleActor;//[Offset: 0x120, Size: 0x8] 0x78dbfc0f00
	void SetReactivate(bool bActivateAndReset);// 0x4bb623c 0x78dbfb0080
	ParticleSystemComponent* GetParticleComponent();// 0x4bb6208 0x78dbfb0160
	void ActivateParticles(bool bActive, bool bReset);// 0x4bb62ec 0x78dbfb0240

--------------------------------
Class: UIParticleComponent.ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: UIParticleActor.Actor.Object

--------------------------------
Class: GauntletTestController.Object

--------------------------------
Class: GauntletTestControllerBootTest.GauntletTestController.Object

--------------------------------
Class: GauntletTestControllerErrorTest.GauntletTestController.Object

--------------------------------
Class: WebBrowser.Widget.Visual.Object
	delegate OnUrlChanged;//[Offset: 0x108, Size: 0x10] 0x78dbfc4a80
	delegate OnBeforePopup;//[Offset: 0x118, Size: 0x10] 0x78dbfc4b00
	FString InitialURL;//[Offset: 0x128, Size: 0x10] 0x78dbfc4b80
	bool bSupportsTransparency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1] 0x78dbfc4c00
	void OnUrlChanged__DelegateSignature(out const FText Text);// 0xaa7cd18 0x78dbfb4f40
	void OnBeforePopup__DelegateSignature(FString URL, FString Frame);// 0xaa7cd18 0x78dbfb5020
	void LoadURL(FString NewURL);// 0x4bbfc68 0x78dbfb5100
	void LoadString(FString Contents, FString DummyURL);// 0x4bbfa30 0x78dbfb51e0
	FString GetUrl();// 0x4bbf7b0 0x78dbfb52c0
	FText GetTitleText();// 0x4bbf884 0x78dbfb53a0
	void ExecuteJavascript(FString ScriptText);// 0x4bbf958 0x78dbfb5480

--------------------------------
Class: WebBrowserAssetManager.Object
	Material* DefaultMaterial;//[Offset: 0x28, Size: 0x28] 0x78dbfc4a00

--------------------------------
Class: XDFXDebugUserControl.UserWidget.Widget.Visual.Object
	CheckBox* EnableCheckBox;//[Offset: 0x260, Size: 0x8] 0x78dbfcac00
	Slider* OverlayNumSlider;//[Offset: 0x268, Size: 0x8] 0x78dbfcac80
	TextBlock* OverlayNumText;//[Offset: 0x270, Size: 0x8] 0x78dbfcad00
	ComboBoxString* OverlaySolutionComboBoxString;//[Offset: 0x278, Size: 0x8] 0x78dbfcad80
	TextBlock* OverlaySolutionText;//[Offset: 0x280, Size: 0x8] 0x78dbfcae00
	Slider* FXTickRatioSlider;//[Offset: 0x288, Size: 0x8] 0x78dbfcae80
	TextBlock* FXTickRatioText;//[Offset: 0x290, Size: 0x8] 0x78dbfcaf00
	Button* EnableButton;//[Offset: 0x298, Size: 0x8] 0x78dbfcaf80
	TextBlock* EnableButtonText;//[Offset: 0x2a0, Size: 0x8] 0x78dbfcb000
	Button* PSInforDataSourceButton;//[Offset: 0x2a8, Size: 0x8] 0x78dbfcb080
	TextBlock* PSInforDataSourceButtonText;//[Offset: 0x2b0, Size: 0x8] 0x78dbfcb100

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x119, Size: 0x1] 0x78d7270ce0
	delegate CheckedStateDelegate;//[Offset: 0x11c, Size: 0x10] 0x78d726dd00
	CheckBoxStyle WidgetStyle;//[Offset: 0x130, Size: 0x580] 0x78d726dd80
	SlateWidgetStyleAsset* Style;//[Offset: 0x6b0, Size: 0x8] 0x78d726de00
	SlateBrushAsset* UncheckedImage;//[Offset: 0x6b8, Size: 0x8] 0x78d726de80
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x6c0, Size: 0x8] 0x78d726df00
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x6c8, Size: 0x8] 0x78d726df80
	SlateBrushAsset* CheckedImage;//[Offset: 0x6d0, Size: 0x8] 0x78d726e000
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x6d8, Size: 0x8] 0x78d726e080
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x6e0, Size: 0x8] 0x78d726e100
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x6e8, Size: 0x8] 0x78d726e180
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x6f0, Size: 0x8] 0x78d726e200
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x6f8, Size: 0x8] 0x78d726e280
	byte HorizontalAlignment;//[Offset: 0x700, Size: 0x1] 0x78d726e300
	Margin Padding;//[Offset: 0x704, Size: 0x10] 0x78d726e380
	SlateColor BorderBackgroundColor;//[Offset: 0x718, Size: 0x28] 0x78d726e400
	byte ClickMethod;//[Offset: 0x740, Size: 0x1] 0x78d726e480
	byte TouchMethod;//[Offset: 0x741, Size: 0x1] 0x78d726e500
	byte PressMethod;//[Offset: 0x742, Size: 0x1] 0x78d726e580
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x743, Size: 0x1] 0x78d726e600
	delegate OnCheckStateChanged;//[Offset: 0x748, Size: 0x10] 0x78d726e680
	void SetTouchMethod(byte InTouchMethod);// 0xbaf5fa0 0x78d7258e40
	void SetPressMethod(byte InPressMethod);// 0xbaf5ef8 0x78d7258f20
	void SetIsChecked(bool InIsChecked);// 0xbaf6198 0x78d7259000
	void SetClickMethod(byte InClickMethod);// 0xbaf6048 0x78d7255720
	void SetCheckedState(enum InCheckedState);// 0xbaf60f0 0x78d7255800
	bool IsPressed();// 0xbaf62b4 0x78d72558e0
	bool IsChecked();// 0xbaf627c 0x78d72559c0
	enum GetCheckedState();// 0xbaf6248 0x78d7255aa0

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0xbaf9b60 0x78d3d2d360
	PanelSlot* GetContentSlot();// 0xbaf9c10 0x78d3d2d440
	Widget* GetContent();// 0xbaf9b2c 0x78d3d2d520

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8] 0x78d71f2780

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4] 0x78d7287c00
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10] 0x78d7287c80
	float MinValue;//[Offset: 0x11c, Size: 0x4] 0x78d7287d00
	float MaxValue;//[Offset: 0x120, Size: 0x4] 0x78d7287d80
	SliderStyle WidgetStyle;//[Offset: 0x128, Size: 0x340] 0x78d7287e00
	byte Orientation;//[Offset: 0x468, Size: 0x1] 0x78d7287e80
	LinearColor SliderBarColor;//[Offset: 0x46c, Size: 0x10] 0x78d7287f00
	LinearColor SliderHandleColor;//[Offset: 0x47c, Size: 0x10] 0x78d7287f80
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1] 0x78d7288000
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 0x1] 0x78d7288080
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e, Size: 0x1] 0x78d7288100
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48f, Size: 0x1] 0x78d7288180
	float StepSize;//[Offset: 0x490, Size: 0x4] 0x78d7288200
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1] 0x78d7288280
	delegate OnMouseCaptureBegin;//[Offset: 0x498, Size: 0x10] 0x78d7288300
	delegate OnMouseCaptureEnd;//[Offset: 0x4a8, Size: 0x10] 0x78d7288380
	delegate OnControllerCaptureBegin;//[Offset: 0x4b8, Size: 0x10] 0x78d7288400
	delegate OnControllerCaptureEnd;//[Offset: 0x4c8, Size: 0x10] 0x78d7286380
	delegate OnValueChanged;//[Offset: 0x4d8, Size: 0x10] 0x78d7286400
	void SetValue(float InValue);// 0xbb1b518 0x78d725d520
	void SetStepSize(float InValue);// 0xbb1b1c0 0x78d725d600
	void SetSliderHandleColor(LinearColor InValue);// 0xbb1b070 0x78d725d6e0
	void SetSliderBarColor(LinearColor InValue);// 0xbb1b118 0x78d725d7c0
	void SetMinValue(float InValue);// 0xbb1b470 0x78d725d8a0
	void SetMaxValue(float InValue);// 0xbb1b3c8 0x78d725d980
	void SetLocked(bool InValue);// 0xbb1b268 0x78d725da60
	void SetIndentHandle(bool InValue);// 0xbb1b318 0x78d725db40
	float GetValue();// 0xbb1b5f4 0x78d725dc20
	float GetNormalizedValue();// 0xbb1b5c0 0x78d725dd00

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x8, Size: 0x88] 0x78dbe43d80
	SlateBrush HoveredBarImage;//[Offset: 0x90, Size: 0x88] 0x78dbe43e00
	SlateBrush DisabledBarImage;//[Offset: 0x118, Size: 0x88] 0x78dbe43e80
	SlateBrush NormalThumbImage;//[Offset: 0x1a0, Size: 0x88] 0x78dbe43f00
	SlateBrush HoveredThumbImage;//[Offset: 0x228, Size: 0x88] 0x78dbe43f80
	SlateBrush DisabledThumbImage;//[Offset: 0x2b0, Size: 0x88] 0x78dbe44000
	float BarThickness;//[Offset: 0x338, Size: 0x4] 0x78dbe44080

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18] 0x78d71dc180
	delegate TextDelegate;//[Offset: 0x140, Size: 0x10] 0x78d71dc200
	SlateColor ColorAndOpacity;//[Offset: 0x150, Size: 0x28] 0x78d71dc280
	delegate ColorAndOpacityDelegate;//[Offset: 0x178, Size: 0x10] 0x78d71dc300
	SlateFontInfo Font;//[Offset: 0x188, Size: 0x58] 0x78d71dc380
	SlateBrush StrikeBrush;//[Offset: 0x1e0, Size: 0x88] 0x78d71dc400
	Vector2D ShadowOffset;//[Offset: 0x268, Size: 0x8] 0x78d71dc480
	LinearColor ShadowColorAndOpacity;//[Offset: 0x270, Size: 0x10] 0x78d71dc500
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x280, Size: 0x10] 0x78d71dc580
	float MinDesiredWidth;//[Offset: 0x290, Size: 0x4] 0x78d71dc600
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1] 0x78d71da580
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 0x1] 0x78d71da600
	enum TextTransformPolicy;//[Offset: 0x296, Size: 0x1] 0x78d7153ee0
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x297, Size: 0x1] 0x78d71da700
	void SetTextTransformPolicy(enum InTransformPolicy);// 0xbb1dbfc 0x78d71e3180
	void SetText(FText InText);// 0xbb1d858 0x78d71e3260
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0xbb1ddfc 0x78d71e3340
	void SetShadowOffset(Vector2D InShadowOffset);// 0xbb1e518 0x78d71e3420
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0xbb1e5bc 0x78d71e3500
	void SetOpacity(float InOpacity);// 0xbb1e664 0x78d71e35e0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0xbb1dd54 0x78d71e36c0
	void SetFont(SlateFontInfo InFontInfo);// 0xbb1e2a0 0x78d71e37a0
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0xbb1e70c 0x78d71e3880
	void SetAutoWrapText(bool InAutoTextWrap);// 0xbb1dca4 0x78d71e3960
	FText GetText();// 0xbb1dac0 0x78d71e0080
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0xbb1db94 0x78d71e0160
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0xbb1dbc8 0x78d71e0240

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x108, Size: 0x3] 0x78d3576300
	byte Justification;//[Offset: 0x10b, Size: 0x1] 0x78d3574280
	byte VerticalJustification;//[Offset: 0x10c, Size: 0x1] 0x78d3574300
	enum WrappingPolicy;//[Offset: 0x10d, Size: 0x1] 0x78cdd5bb40
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10e, Size: 0x1] 0x78d3574400
	float WrapTextAt;//[Offset: 0x110, Size: 0x4] 0x78d3574480
	Margin Margin;//[Offset: 0x114, Size: 0x10] 0x78d3574500
	float LineHeightPercentage;//[Offset: 0x124, Size: 0x4] 0x78d3574580
	void SetVerticalJustification(byte InVerticalJustification);// 0xbb1f160 0x78d3d2fd60
	void SetJustification(byte InJustification);// 0xbb1f210 0x78d3d2fe40

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cd97ec00
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cd97ec80
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1] 0x78cdd5c220
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1] 0x78cdd5c2c0

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8] 0x78cd97c780
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8] 0x78cd97c800
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20] 0x78cd97cb00
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8] 0x78cd97cb80
	int Size;//[Offset: 0x48, Size: 0x4] 0x78cd97cc00
	int LetterSpacing;//[Offset: 0x4c, Size: 0x4] 0x78cd97cc80

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4] 0x78cd97c880
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78cd97c900
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x78cd97c980
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8] 0x78cd97ca00
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10] 0x78cd97ca80

--------------------------------
Class: ComboBoxString.Widget.Visual.Object
	FString[] DefaultOptions;//[Offset: 0x108, Size: 0x10] 0x78cdd5c360
	FString SelectedOption;//[Offset: 0x118, Size: 0x10] 0x78cd97f500
	ComboBoxStyle WidgetStyle;//[Offset: 0x128, Size: 0x3f0] 0x78cd97dd80
	TableRowStyle ItemStyle;//[Offset: 0x518, Size: 0x7c8] 0x78cd97e600
	Margin ContentPadding;//[Offset: 0xce0, Size: 0x10] 0x78cd97e680
	float MaxListHeight;//[Offset: 0xcf0, Size: 0x4] 0x78cd97e700
	bool HasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf4, Size: 0x1] 0x78cd97c680
	bool EnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf5, Size: 0x1] 0x78cd97c700
	SlateFontInfo Font;//[Offset: 0xcf8, Size: 0x58] 0x78cd97cd00
	SlateColor ForegroundColor;//[Offset: 0xd50, Size: 0x28] 0x78cd97cd80
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd78, Size: 0x1] 0x78cd97ce00
	delegate OnGenerateWidgetEvent;//[Offset: 0xd7c, Size: 0x10] 0x78cd97ce80
	delegate OnSelectionChanged;//[Offset: 0xd90, Size: 0x10] 0x78cd97cf00
	delegate OnOpening;//[Offset: 0xda0, Size: 0x10] 0x78cd97cf80
	void SetSelectedOption(FString Option);// 0xbaf8eb8 0x78d3d2c800
	void SetSelectedIndex(const int Index);// 0xbaf8e10 0x78d3d2c8e0
	bool RemoveOption(FString Option);// 0xbaf924c 0x78d3d2c9c0
	void RefreshOptions();// 0xbaf9010 0x78d3d290e0
	void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0xaa7cd18 0x78d3d291c0
	void OnOpeningEvent__DelegateSignature();// 0xaa7cd18 0x78d3d292a0
	bool IsOpen();// 0xbaf8c9c 0x78d3d29380
	FString GetSelectedOption();// 0xbaf8d3c 0x78d3d29460
	int GetSelectedIndex();// 0xbaf8d08 0x78d3d29540
	int GetOptionCount();// 0xbaf8cd4 0x78d3d29620
	FString GetOptionAtIndex(int Index);// 0xbaf904c 0x78d3d29700
	int FindOptionIndex(FString Option);// 0xbaf916c 0x78d3d297e0
	void ClearSelection();// 0xbaf9024 0x78d3d298c0
	void ClearOptions();// 0xbaf9038 0x78d3d299a0
	void AddOption(FString Option);// 0xbaf9330 0x78d3d29a80

--------------------------------
Class: ComboBoxStyle.SlateWidgetStyle
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x8, Size: 0x3b8] 0x78cd97db80
	SlateSound PressedSlateSound;//[Offset: 0x3c0, Size: 0x18] 0x78cd97dc00
	SlateSound SelectionChangeSlateSound;//[Offset: 0x3d8, Size: 0x18] 0x78cd97dd00

--------------------------------
Class: ComboButtonStyle.SlateWidgetStyle
	ButtonStyle ButtonStyle;//[Offset: 0x8, Size: 0x278] 0x78cd97d880
	SlateBrush DownArrowImage;//[Offset: 0x280, Size: 0x88] 0x78cd97d900
	Vector2D ShadowOffset;//[Offset: 0x308, Size: 0x8] 0x78cd97d980
	LinearColor ShadowColorAndOpacity;//[Offset: 0x310, Size: 0x10] 0x78cd97da00
	SlateBrush MenuBorderBrush;//[Offset: 0x320, Size: 0x88] 0x78cd97da80
	Margin MenuBorderPadding;//[Offset: 0x3a8, Size: 0x10] 0x78cd97db00

--------------------------------
Class: TableRowStyle.SlateWidgetStyle
	SlateBrush SelectorFocusedBrush;//[Offset: 0x8, Size: 0x88] 0x78cd97de00
	SlateBrush ActiveHoveredBrush;//[Offset: 0x90, Size: 0x88] 0x78cd97de80
	SlateBrush ActiveBrush;//[Offset: 0x118, Size: 0x88] 0x78cd97df00
	SlateBrush InactiveHoveredBrush;//[Offset: 0x1a0, Size: 0x88] 0x78cd97df80
	SlateBrush InactiveBrush;//[Offset: 0x228, Size: 0x88] 0x78cd97e000
	SlateBrush EvenRowBackgroundHoveredBrush;//[Offset: 0x2b0, Size: 0x88] 0x78cd97e080
	SlateBrush EvenRowBackgroundBrush;//[Offset: 0x338, Size: 0x88] 0x78cd97e100
	SlateBrush OddRowBackgroundHoveredBrush;//[Offset: 0x3c0, Size: 0x88] 0x78cd97e180
	SlateBrush OddRowBackgroundBrush;//[Offset: 0x448, Size: 0x88] 0x78cd97e200
	SlateColor TextColor;//[Offset: 0x4d0, Size: 0x28] 0x78cd97e280
	SlateColor SelectedTextColor;//[Offset: 0x4f8, Size: 0x28] 0x78cd97e300
	SlateBrush DropIndicator_Above;//[Offset: 0x520, Size: 0x88] 0x78cd97e380
	SlateBrush DropIndicator_Onto;//[Offset: 0x5a8, Size: 0x88] 0x78cd97e400
	SlateBrush DropIndicator_Below;//[Offset: 0x630, Size: 0x88] 0x78cd97e480
	SlateBrush ActiveHighlightedBrush;//[Offset: 0x6b8, Size: 0x88] 0x78cd97e500
	SlateBrush InactiveHighlightedBrush;//[Offset: 0x740, Size: 0x88] 0x78cd97e580

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x120, Size: 0x8] 0x78d71d3580
	ButtonStyle WidgetStyle;//[Offset: 0x128, Size: 0x278] 0x78d71d3600
	LinearColor ColorAndOpacity;//[Offset: 0x3a0, Size: 0x10] 0x78d71d3680
	LinearColor BackgroundColor;//[Offset: 0x3b0, Size: 0x10] 0x78d71d3700
	byte ClickMethod;//[Offset: 0x3c0, Size: 0x1] 0x78d71d3780
	byte TouchMethod;//[Offset: 0x3c1, Size: 0x1] 0x78d71d3800
	byte PressMethod;//[Offset: 0x3c2, Size: 0x1] 0x78d71d3880
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 0x1] 0x78d71d3900
	bool IsIgnoreGestureLongPressEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 0x1] 0x78d71d3980
	delegate OnClicked;//[Offset: 0x3c8, Size: 0x10] 0x78d71d3a00
	delegate OnPressed;//[Offset: 0x3d8, Size: 0x10] 0x78d71d3a80
	delegate OnReleased;//[Offset: 0x3e8, Size: 0x10] 0x78d71d3b00
	delegate OnHovered;//[Offset: 0x3f8, Size: 0x10] 0x78d71d3b80
	delegate OnUnhovered;//[Offset: 0x408, Size: 0x10] 0x78d71d3c00
	void SetTouchMethod(byte InTouchMethod);// 0xbaf39e8 0x78d71cb5a0
	void SetStyle(out const ButtonStyle InStyle);// 0xbaf3cc0 0x78d71cb680
	void SetPressMethod(byte InPressMethod);// 0xbaf3940 0x78d71cb760
	void SetIgnoreGestureLongPress(bool bIgnoreGestureLongPressEvent);// 0xbaf3890 0x78d71cb840
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0xbaf3c18 0x78d71cb920
	void SetClickMethod(byte InClickMethod);// 0xbaf3a90 0x78d71cba00
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0xbaf3b70 0x78d71cbae0
	bool IsPressed();// 0xbaf3b38 0x78d71cbbc0

--------------------------------
Class: XDPSOptInterface.Object
	void OnSystemFinished(ParticleSystemComponent* PSC);// 0x4bd8ebc 0x78dbfbac00

--------------------------------
Class: ImageArray.Widget.Visual.Object
	SlateBrush[] BrushArray;//[Offset: 0x108, Size: 0x10] 0x78cdd5e020
	delegate BrushArrayDelegate;//[Offset: 0x118, Size: 0x10] 0x78d3579800
	LinearColor ColorAndOpacity;//[Offset: 0x128, Size: 0x10] 0x78d3579880
	delegate ColorAndOpacityDelegate;//[Offset: 0x138, Size: 0x10] 0x78d3579900
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1] 0x78d3579980
	delegate OnMouseButtonDownEvent;//[Offset: 0x14c, Size: 0x10] 0x78d3579a00
	enum InnerAlignType;//[Offset: 0x15c, Size: 0x1] 0x78cdd5e0c0
	void SetOpacity(float InOpacity);// 0x4be5e78 0x78cd9a2ee0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x4be5f20 0x78cd9a2fc0
	void SetBrushTintColor(SlateColor TintColor, int Index);// 0x4be5ad0 0x78cd9a30a0
	void SetBrushSize(Vector2D DesiredSize, int Index);// 0x4be5d88 0x78cd9a3180
	void SetBrushResourceObject(Object* ResourceObject, int Index);// 0x4be59dc 0x78cd9a3260
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, int Index, bool bMatchSize);// 0x4be51c4 0x78cd9a3340
	void SetBrushFromTexture(Texture2D* Texture, int Index, bool bMatchSize);// 0x4be5480 0x78cd9a3420
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, int Index, bool bMatchSize);// 0x4be4e90 0x78cd9a3500
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial, int Index);// 0x4be4cb8 0x78cd9a35e0
	void SetBrushFromMaterial(MaterialInterface* Material, int Index);// 0x4be50c8 0x78cd9a36c0
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, int Index, bool bMatchSize);// 0x4be5310 0x78cd9a37a0
	void SetBrushFromAsset(SlateBrushAsset* Asset, int Index);// 0x4be55cc 0x78cd9a3880
	void SetBrushArraySize(int NewSize);// 0x4be4a6c 0x78cd9a3960
	void SetBrushArray(out const SlateBrush[] InBrushArray);// 0x4be4b30 0x78cd9a0080
	void SetBrush(out const SlateBrush InBrush, int Index);// 0x4be56c8 0x78cd9a0160
	SlateBrush[] GetSlateBrushArray__DelegateSignature();// 0xaa7cd18 0x78cd9a0240
	MaterialInstanceDynamic* GetDynamicMaterial(int Index);// 0x4be4c08 0x78cd9a0320
	int GetBrushArraySize();// 0x4be4b14 0x78cd9a0400
	void Flush();// 0x4be59c8 0x78cd9a04e0

--------------------------------
Class: DirectExcelLibrary.BlueprintFunctionLibrary.Object
	static FString ToAbsolutePath(FString projectReleativePath, bool isSave);// 0x4d0160c 0x78dbfba7a0
	static bool SaveExcel(ExcelWorkbook* workbook, FString Path, bool isAbsolutePath, bool isSave);// 0x4d01858 0x78dbfba880
	static ExcelWorkbook* LoadExcel(FString Path, bool isAbsolutePath, bool isSave);// 0x4d01ab8 0x78dbfba960
	static bool DoesExcelFileExists(FString Path, bool isAbsolutePath, bool isSave);// 0x4d013f8 0x78dbfbaa40
	static ExcelWorkbook* CreateExcel();// 0x4d01824 0x78dbfbab20

--------------------------------
Class: ExcelWorkbook.Object
	ExcelWorksheet*[] mSheets;//[Offset: 0x28, Size: 0x10] 0x78dbf2dc60
	ExcelWorksheet* mActiveSheet;//[Offset: 0x38, Size: 0x8] 0x78dbfd3980
	FString Title();// 0x4d11414 0x78dbfe2ee0
	bool StopWatch(const Object* WorldContextObject);// 0x4d13364 0x78dbfe2fc0
	bool StartWatch(const Object* WorldContextObject, delegate onChanged, bool autoReload, float Rate);// 0x4d13418 0x78dbfe30a0
	ExcelWorksheet* SheetWithTitle(FString Title);// 0x4d12998 0x78dbfe3180
	ExcelWorksheet* SheetWithId(int ID);// 0x4d12b00 0x78dbfe3260
	FString[] SheetTitles();// 0x4d12c60 0x78dbfe3340
	int SheetCount();// 0x4d130b0 0x78dbfe3420
	ExcelWorksheet* SheetAt(int Index);// 0x4d12bb0 0x78dbfe3500
	void SetTitle(FString Value);// 0x4d112bc 0x78dbfe35e0
	void SetExtendedPropertyValue(enum Property, ExcelVariant Value);// 0x4d11d9c 0x78dbfe36c0
	void SetCustomProperty(FString Name, ExcelVariant Value);// 0x4d115fc 0x78dbfe37a0
	void SetCorePropertyValue(enum Property, ExcelVariant Value);// 0x4d12290 0x78dbfe3880
	void SetBaseDate(enum BaseDate);// 0x4d11520 0x78dbfe3960
	void SetActiveSheetWithTitle(FString Title);// 0x4d12dd4 0x78dbfe0080
	void SetActiveSheetAt(int Index);// 0x4d12f2c 0x78dbfe0160
	void SetActiveSheet(ExcelWorksheet* sheet);// 0x4d12fd4 0x78dbfe0240
	bool SaveAs(FString Path, bool isAbsolutePath, bool isSave);// 0x4d13604 0x78dbfe0320
	bool Save();// 0x4d13828 0x78dbfe0400
	void RemoveSheet(ExcelWorksheet* sheet);// 0x4d12784 0x78dbfe04e0
	bool Reload();// 0x4d135b8 0x78dbfe05c0
	bool Load(FString fullPath);// 0x4d13860 0x78dbfe06a0
	bool HasTitle();// 0x4d114e8 0x78dbfe0780
	bool HasExtendedProperty(enum Property);// 0x4d121dc 0x78dbfe0860
	bool HasCustomProperty(FString Name);// 0x4d11c30 0x78dbfe0940
	bool HasCoreProperty(enum Property);// 0x4d126d0 0x78dbfe0a20
	ExcelVariant GetExtendedPropertyValue(enum Property);// 0x4d11f6c 0x78dbfe0b00
	ExcelVariant GetCustomProperty(FString Name);// 0x4d11870 0x78dbfe0be0
	ExcelVariant GetCorePropertyValue(enum Property);// 0x4d12460 0x78dbfe0cc0
	ExcelWorksheet* CreateSheet(int Index, bool SetActive);// 0x4d13264 0x78dbfe0da0
	ExcelWorksheet* CopySheet(ExcelWorksheet* sheet, int Index);// 0x4d13168 0x78dbfe0e80
	bool ContainsSheet(FString Title);// 0x4d1282c 0x78dbfe0f60
	void Clear();// 0x4d135f0 0x78dbfe1040
	enum BaseDate();// 0x4d115c8 0x78dbfe1120
	void ApplyToCells(const Object* WorldContextObject, delegate onCell);// 0x4d111c4 0x78dbfe1200
	ExcelWorksheet*[] AllSheets();// 0x4d130e4 0x78dbfe12e0
	enum[] AllExtendedProperties();// 0x4d12108 0x78dbfe13c0
	FString[] AllCustomProperties();// 0x4d11abc 0x78dbfe14a0
	enum[] AllCoreProperties();// 0x4d125fc 0x78dbfe1580
	ExcelWorksheet* ActiveSheet();// 0x4d1307c 0x78dbfe1660

--------------------------------
Class: ExcelWorksheet.Object
	void UnmergeCells(ExcelCellRangeReference rangeReference);// 0x4d1f638 0x78dbfea500
	FString ToStringWithIndex(int Column, int Row);// 0x4d1e834 0x78dbfea5e0
	FString ToStringWithId(FString cellReferenceString);// 0x4d1e138 0x78dbfea6c0
	FString ToString(ExcelCellReference cellReference);// 0x4d1ed3c 0x78dbfea7a0
	int ToIntWithIndex(int Column, int Row);// 0x4d1ea94 0x78dbfea880
	int ToIntWithId(FString cellReferenceString);// 0x4d1e468 0x78dbfea960
	int ToInt(ExcelCellReference cellReference);// 0x4d1ef14 0x78dbfeaa40
	float ToFloatWithIndex(int Column, int Row);// 0x4d1e99c 0x78dbfeab20
	float ToFloatWithId(FString cellReferenceString);// 0x4d1e300 0x78dbfeac00
	float ToFloat(ExcelCellReference cellReference);// 0x4d1ee60 0x78dbfeace0
	DateTime ToDateTimeWithIndex(int Column, int Row);// 0x4d1e73c 0x78dbfe7400
	DateTime ToDateTimeWithId(FString cellReferenceString);// 0x4d1dfd0 0x78dbfe74e0
	DateTime ToDateTime(ExcelCellReference cellReference);// 0x4d1ec88 0x78dbfe75c0
	bool ToBoolWithIndex(int Column, int Row);// 0x4d1eb8c 0x78dbfe76a0
	bool ToBoolWithId(FString cellReferenceString);// 0x4d1e5d0 0x78dbfe7780
	bool ToBool(ExcelCellReference cellReference);// 0x4d1efc8 0x78dbfe7860
	FString Title();// 0x4d211ac 0x78dbfe7940
	FString[] StringArrayAtRowSorted(int rowIndex, out int[] outColumnIndices, enum sortType);// 0x4d1c178 0x78dbfe7a20
	FString[] StringArrayAtRow(int rowIndex);// 0x4d1dab0 0x78dbfe7b00
	FString[] StringArrayAtColumnStringSorted(FString columnString, out int[] outRowIndices, enum sortType);// 0x4d1aa70 0x78dbfe7be0
	FString[] StringArrayAtColumnString(FString columnString);// 0x4d1cb90 0x78dbfe7cc0
	FString[] StringArrayAtColumnSorted(int columnIndex, out int[] outRowIndices, enum sortType);// 0x4d1b73c 0x78dbfe7da0
	FString[] StringArrayAtColumn(int columnIndex);// 0x4d1d470 0x78dbfe7e80
	void SetTitle(FString Title);// 0x4d21054 0x78dbfe7f60
	void SetStringWithIndex(int Column, int Row, FString Value);// 0x4d19cb0 0x78dbfe8040
	void SetStringWithId(FString cellReferenceString, FString Value);// 0x4d1943c 0x78dbfe8120
	void SetString(ExcelCellReference cellReference, FString Value);// 0x4d1a348 0x78dbfe8200
	void SetIntWithIndex(int Column, int Row, int Value);// 0x4d19fdc 0x78dbfe82e0
	void SetIntWithId(FString cellReferenceString, int Value);// 0x4d1981c 0x78dbfe83c0
	void SetInt(ExcelCellReference cellReference, int Value);// 0x4d1a5e8 0x78dbfe84a0
	void SetFloatWithIndex(int Column, int Row, float Value);// 0x4d19ea0 0x78dbfe8580
	void SetFloatWithId(FString cellReferenceString, float Value);// 0x4d19674 0x78dbfe8660
	void SetFloat(ExcelCellReference cellReference, float Value);// 0x4d1a4f0 0x78dbfe8740
	void SetDateTimeWithIndex(int Column, int Row, DateTime Value);// 0x4d19b7c 0x78dbfe8820
	void SetDateTimeWithId(FString cellReferenceString, DateTime Value);// 0x4d19298 0x78dbfe8900
	void SetDateTime(ExcelCellReference cellReference, DateTime Value);// 0x4d1a25c 0x78dbfe89e0
	void SetBoolWithIndex(int Column, int Row, bool Value);// 0x4d1a118 0x78dbfe8ac0
	void SetBoolWithId(FString cellReferenceString, bool Value);// 0x4d199c4 0x78dbfe8ba0
	void SetBool(ExcelCellReference cellReference, bool Value);// 0x4d1a6e0 0x78dbfe8c80
	int RowCount(bool skipNull);// 0x4d20d6c 0x78dbfe8d60
	FString PrintRow(int rowIndex, bool bPrintToScreen, LinearColor TextColor, float Duration);// 0x4d20778 0x78dbfe8e40
	FString PrintColumnWithString(FString columnString, bool bPrintToScreen, LinearColor TextColor, float Duration);// 0x4d1fcb4 0x78dbfe8f20
	FString PrintColumn(int columnIndex, bool bPrintToScreen, LinearColor TextColor, float Duration);// 0x4d1ff74 0x78dbfe9000
	FString Print(bool bPrintToScreen, LinearColor TextColor, float Duration);// 0x4d20e24 0x78dbfe5720
	ExcelWorkbook* ParentWorkbook();// 0x4d212c0 0x78dbfe5800
	void MergeCells(ExcelCellRangeReference rangeReference);// 0x4d1f6e4 0x78dbfe58e0
	int LowestRow();// 0x4d20d38 0x78dbfe59c0
	int LowestColumn();// 0x4d2068c 0x78dbfe5aa0
	bool IsValid();// 0x4d21280 0x78dbfe5b80
	int[] IntArrayAtRowSorted(int rowIndex, out int[] outColumnIndices, enum sortType);// 0x4d1c5f0 0x78dbfe5c60
	int[] IntArrayAtRow(int rowIndex);// 0x4d1dd90 0x78dbfe5d40
	int[] IntArrayAtColumnStringSorted(FString columnString, out int[] outRowIndices, enum sortType);// 0x4d1b030 0x78dbfe5e20
	int[] IntArrayAtColumnString(FString columnString);// 0x4d1cfc0 0x78dbfe5f00
	int[] IntArrayAtColumnSorted(int columnIndex, out int[] outRowIndices, enum sortType);// 0x4d1bbb4 0x78dbfe5fe0
	int[] IntArrayAtColumn(int columnIndex);// 0x4d1d750 0x78dbfe60c0
	void InsertRows(int rowIndex, int Amount);// 0x4d20b6c 0x78dbfe61a0
	void InsertColumns(int columnIndex, int Amount);// 0x4d20368 0x78dbfe6280
	int Index();// 0x4d20fec 0x78dbfe6360
	int ID();// 0x4d21020 0x78dbfe6440
	int HighestRow();// 0x4d20d04 0x78dbfe6520
	int HighestColumn();// 0x4d20658 0x78dbfe6600
	bool HasCell(ExcelCellReference cellReference);// 0x4d1f4ac 0x78dbfe66e0
	bool HasActiveCell();// 0x4d1f0b4 0x78dbfe67c0
	float[] FloatArrayAtRowSorted(int rowIndex, out int[] outColumnIndices, enum sortType);// 0x4d1c404 0x78dbfe68a0
	float[] FloatArrayAtRow(int rowIndex);// 0x4d1dc70 0x78dbfe6980
	float[] FloatArrayAtColumnStringSorted(FString columnString, out int[] outRowIndices, enum sortType);// 0x4d1ada0 0x78dbfe6a60
	float[] FloatArrayAtColumnString(FString columnString);// 0x4d1cdf8 0x78dbfe6b40
	float[] FloatArrayAtColumnSorted(int columnIndex, out int[] outRowIndices, enum sortType);// 0x4d1b9c8 0x78dbfe6c20
	float[] FloatArrayAtColumn(int columnIndex);// 0x4d1d630 0x78dbfe6d00
	ExcelCell* FindStringAtRow(int rowIndex, FString searchValue, int startColumnIndex);// 0x4d17af8 0x78dbfe6de0
	ExcelCell* FindStringAtColumnString(FString columnString, FString searchValue, int startRowIndex);// 0x4d182d0 0x78dbfe6ec0
	ExcelCell* FindStringAtColumn(int columnIndex, FString searchValue, int startRowIndex);// 0x4d18cc4 0x78dbfe6fa0
	ExcelCell*[] FindMultipleStringAtRow(int rowIndex, FString searchValue, int startColumnIndex);// 0x4d15c68 0x78dbfe7080
	ExcelCell*[] FindMultipleStringAtColumnString(FString columnString, FString searchValue, int startRowIndex);// 0x4d16650 0x78dbfe7160
	ExcelCell*[] FindMultipleStringAtColumn(int columnIndex, FString searchValue, int startRowIndex);// 0x4d17234 0x78dbfe7240
	ExcelCell*[] FindMultipleIntAtRow(int rowIndex, int searchValue, int startColumnIndex);// 0x4d1607c 0x78dbfe7320
	ExcelCell*[] FindMultipleIntAtColumnString(FString columnString, int searchValue, int startRowIndex);// 0x4d16bb0 0x78dbfe3a40
	ExcelCell*[] FindMultipleIntAtColumn(int columnIndex, int searchValue, int startRowIndex);// 0x4d17648 0x78dbfe3b20
	ExcelCell*[] FindMultipleFloatAtRow(int rowIndex, float searchValue, int startColumnIndex);// 0x4d15ec4 0x78dbfe3c00
	ExcelCell*[] FindMultipleFloatAtColumnString(FString columnString, float searchValue, int startRowIndex);// 0x4d16948 0x78dbfe3ce0
	ExcelCell*[] FindMultipleFloatAtColumn(int columnIndex, float searchValue, int startRowIndex);// 0x4d17490 0x78dbfe3dc0
	ExcelCell*[] FindMultipleDateTimeAtRow(int rowIndex, DateTime searchValue, int startColumnIndex);// 0x4d15ab8 0x78dbfe3ea0
	ExcelCell*[] FindMultipleDateTimeAtColumnString(FString columnString, DateTime searchValue, int startRowIndex);// 0x4d163ec 0x78dbfe3f80
	ExcelCell*[] FindMultipleDateTimeAtColumn(int columnIndex, DateTime searchValue, int startRowIndex);// 0x4d17084 0x78dbfe4060
	ExcelCell*[] FindMultipleBoolAtRow(int rowIndex, bool searchValue, int startColumnIndex);// 0x4d16230 0x78dbfe4140
	ExcelCell*[] FindMultipleBoolAtColumnString(FString columnString, bool searchValue, int startRowIndex);// 0x4d16e14 0x78dbfe4220
	ExcelCell*[] FindMultipleBoolAtColumn(int columnIndex, bool searchValue, int startRowIndex);// 0x4d177fc 0x78dbfe4300
	ExcelCell* FindIntAtRow(int rowIndex, int searchValue, int startColumnIndex);// 0x4d17e3c 0x78dbfe43e0
	ExcelCell* FindIntAtColumnString(FString columnString, int searchValue, int startRowIndex);// 0x4d18770 0x78dbfe44c0
	ExcelCell* FindIntAtColumn(int columnIndex, int searchValue, int startRowIndex);// 0x4d19008 0x78dbfe45a0
	ExcelCell* FindFloatAtRow(int rowIndex, float searchValue, int startColumnIndex);// 0x4d17cf4 0x78dbfe4680
	ExcelCell* FindFloatAtColumnString(FString columnString, float searchValue, int startRowIndex);// 0x4d18568 0x78dbfe4760
	ExcelCell* FindFloatAtColumn(int columnIndex, float searchValue, int startRowIndex);// 0x4d18ec0 0x78dbfe4840
	ExcelCell* FindDateTimeAtRow(int rowIndex, DateTime searchValue, int startColumnIndex);// 0x4d179b8 0x78dbfe4920
	ExcelCell* FindDateTimeAtColumnString(FString columnString, DateTime searchValue, int startRowIndex);// 0x4d180cc 0x78dbfe4a00
	ExcelCell* FindDateTimeAtColumn(int columnIndex, DateTime searchValue, int startRowIndex);// 0x4d18b84 0x78dbfe4ae0
	ExcelCell* FindBoolAtRow(int rowIndex, bool searchValue, int startColumnIndex);// 0x4d17f80 0x78dbfe4bc0
	ExcelCell* FindBoolAtColumnString(FString columnString, bool searchValue, int startRowIndex);// 0x4d18974 0x78dbfe4ca0
	ExcelCell* FindBoolAtColumn(int columnIndex, bool searchValue, int startRowIndex);// 0x4d1914c 0x78dbfe4d80
	void DeleteRows(int rowIndex, int Amount);// 0x4d20a7c 0x78dbfe4e60
	void DeleteColumns(int columnIndex, int Amount);// 0x4d20278 0x78dbfe4f40
	DateTime[] DateTimeArrayAtRowSorted(int rowIndex, out int[] outColumnIndices, enum sortType);// 0x4d1bf8c 0x78dbfe5020
	DateTime[] DateTimeArrayAtRow(int rowIndex);// 0x4d1d990 0x78dbfe5100
	DateTime[] DateTimeArrayAtColumnStringSorted(FString columnString, out int[] outRowIndices, enum sortType);// 0x4d1a7e0 0x78dbfe51e0
	DateTime[] DateTimeArrayAtColumnString(FString columnString);// 0x4d1c9c8 0x78dbfe52c0
	DateTime[] DateTimeArrayAtColumnSorted(int columnIndex, out int[] outRowIndices, enum sortType);// 0x4d1b550 0x78dbfe53a0
	DateTime[] DateTimeArrayAtColumn(int columnIndex);// 0x4d1d350 0x78dbfe5480
	void CopyRow(int rowIndex, int originalRowIndex);// 0x4d2098c 0x78dbfe5560
	void CopyColumn(int columnIndex, int originalColumnIndex);// 0x4d20188 0x78dbfe5640
	int ColumnCount(bool skipNull);// 0x4d206c0 0x78dbfe1d60
	void ClearRow(int rowIndex);// 0x4d20c5c 0x78dbfe1e40
	void ClearColumnWithString(FString columnString);// 0x4d20458 0x78dbfe1f20
	void ClearColumn(int columnIndex);// 0x4d205b0 0x78dbfe2000
	void ClearCell(ExcelCellReference cellReference);// 0x4d1f0ec 0x78dbfe20e0
	ExcelCell*[] CellsAtRow(int rowIndex, enum sortType);// 0x4d1fb48 0x78dbfe21c0
	ExcelCell*[] CellsAtColumnString(FString columnString, enum sortType);// 0x4d1f7c4 0x78dbfe22a0
	ExcelCell*[] CellsAtColumn(int columnIndex, enum sortType);// 0x4d1f9dc 0x78dbfe2380
	ExcelCell* CellAtRef(ExcelCellReference cellReference);// 0x4d1f300 0x78dbfe2460
	ExcelCell* CellAtId(FString cellString);// 0x4d1f198 0x78dbfe2540
	ExcelCell* CellAt(int Column, int Row);// 0x4d1f3b4 0x78dbfe2620
	ExcelCellRangeReference CalculateDimension();// 0x4d1f790 0x78dbfe2700
	bool[] BoolArrayAtRowSorted(int rowIndex, out int[] outColumnIndices, enum sortType);// 0x4d1c7dc 0x78dbfe27e0
	bool[] BoolArrayAtRow(int rowIndex);// 0x4d1deb0 0x78dbfe28c0
	bool[] BoolArrayAtColumnStringSorted(FString columnString, out int[] outRowIndices, enum sortType);// 0x4d1b2c0 0x78dbfe29a0
	bool[] BoolArrayAtColumnString(FString columnString);// 0x4d1d188 0x78dbfe2a80
	bool[] BoolArrayAtColumnSorted(int columnIndex, out int[] outRowIndices, enum sortType);// 0x4d1bda0 0x78dbfe2b60
	bool[] BoolArrayAtColumn(int columnIndex);// 0x4d1d870 0x78dbfe2c40
	ExcelCellRangeReference[] AllMergedRanges();// 0x4d1f564 0x78dbfe2d20
	ExcelCell* ActiveCell();// 0x4d1f080 0x78dbfe2e00

--------------------------------
Class: ExcelCellRangeReference
	ExcelCellReference TopLeft;//[Offset: 0x0, Size: 0x8] 0x78cdbbe480
	ExcelCellReference BottomRight;//[Offset: 0x8, Size: 0x8] 0x78cdbbe600

--------------------------------
Class: ExcelCellReference
	int Column;//[Offset: 0x0, Size: 0x4] 0x78cdbbe500
	int Row;//[Offset: 0x4, Size: 0x4] 0x78cdbbe580

--------------------------------
Class: ExcelCell.Object
	enum Type();// 0x4d03de8 0x78dbfbbbc0
	Object* ToUObject();// 0x4d032f8 0x78dbfbbca0
	FString ToString();// 0x4d03360 0x78dbfbbd80
	int ToInt();// 0x4d03468 0x78dbfbbe60
	float ToFloat();// 0x4d03434 0x78dbfbbf40
	DateTime ToDateTime();// 0x4d0332c 0x78dbfbc020
	bool ToBool();// 0x4d0349c 0x78dbfbc100
	void SetString(FString Value);// 0x4d02fa0 0x78dbfbc1e0
	void SetInt(int Value);// 0x4d031a0 0x78dbfbc2c0
	void SetHyperlink(FString URL, FString display);// 0x4d02bb8 0x78dbfbc3a0
	void SetFormula(FString formula);// 0x4d02954 0x78dbfbc480
	void SetFormat(ExcelFormat* Format);// 0x4d02444 0x78dbfbc560
	void SetFloat(float Value);// 0x4d030f8 0x78dbfbc640
	void SetDateTime(DateTime Value);// 0x4d02efc 0x78dbfbc720
	void SetComment(FString Text, FString Author);// 0x4d0256c 0x78dbfbc800
	void SetBool(bool Value);// 0x4d03248 0x78dbfbc8e0
	int Row();// 0x4d03cc8 0x78dbfbc9c0
	ExcelCellReference Reference();// 0x4d03c94 0x78dbfb90e0
	ExcelWorksheet* ParentSheet();// 0x4d023fc 0x78dbfb91c0
	static bool NotEqual_ExcelCellExcelCell(ExcelCell* A, ExcelCell* B);// 0x4d03520 0x78dbfb92a0
	ExcelCell* MakeCellWithOffset(int columnOffset, int rowOffset);// 0x4d03b9c 0x78dbfb9380
	static bool LessEqual_ExcelCellExcelCell(ExcelCell* A, ExcelCell* B);// 0x4d03808 0x78dbfb9460
	static bool Less_ExcelCellExcelCell(ExcelCell* A, ExcelCell* B);// 0x4d039f8 0x78dbfb9540
	bool IsValid();// 0x4d03d68 0x78dbfb9620
	bool IsMerged();// 0x4d03d30 0x78dbfb9700
	bool HasValue();// 0x4d034e8 0x78dbfb97e0
	bool HasHyperlink();// 0x4d02ec4 0x78dbfb98c0
	bool HasFormula();// 0x4d02b80 0x78dbfb99a0
	bool HasFormat();// 0x4d02520 0x78dbfb9a80
	bool HasComment();// 0x4d02908 0x78dbfb9b60
	static bool GreaterEqual_ExcelCellExcelCell(ExcelCell* A, ExcelCell* B);// 0x4d03710 0x78dbfb9c40
	static bool Greater_ExcelCellExcelCell(ExcelCell* A, ExcelCell* B);// 0x4d03900 0x78dbfb9d20
	FString GetHyperlink();// 0x4d02df0 0x78dbfb9e00
	FString GetFormula();// 0x4d02aac 0x78dbfb9ee0
	ExcelFormat* GetFormat();// 0x4d024ec 0x78dbfb9fc0
	void GetComment(out FString Text, out FString Author);// 0x4d027a4 0x78dbfba0a0
	static bool EqualEqual_ExcelCellExcelCell(ExcelCell* A, ExcelCell* B);// 0x4d03618 0x78dbfba180
	int Compare(ExcelCell* Other);// 0x4d03aec 0x78dbfba260
	int Column();// 0x4d03cfc 0x78dbfba340
	void ClearFormula();// 0x4d02940 0x78dbfba420
	void ClearFormat();// 0x4d02430 0x78dbfba500
	void ClearComment();// 0x4d02558 0x78dbfba5e0
	void Clear();// 0x4d034d4 0x78dbfba6c0

--------------------------------
Class: ExcelFormat.Object
	void SetProtection(ExcelProtection protection);// 0x4d071c8 0x78dbfbd360
	void SetNumberFormat(ExcelNumberFormat numberFormat);// 0x4d072dc 0x78dbfbd440
	void SetFont(ExcelFont Font);// 0x4d07554 0x78dbfbd520
	void SetFill(ExcelFill fill);// 0x4d078ec 0x78dbfbd600
	void SetBorder(ExcelBorder Border);// 0x4d07c38 0x78dbfbd6e0
	void SetAlignment(ExcelAlignment Alignment);// 0x4d07e80 0x78dbfbd7c0
	ExcelCell* ParentCell();// 0x4d07f6c 0x78dbfbd8a0
	bool IsQuotePrefix();// 0x4d07070 0x78dbfbd980
	bool IsProtectionApplied();// 0x4d07190 0x78dbfbda60
	bool IsPivotTable();// 0x4d07158 0x78dbfbdb40
	bool IsNumberFormatApplied();// 0x4d072a4 0x78dbfbdc20
	bool IsFontApplied();// 0x4d0751c 0x78dbfbdd00
	bool IsFillApplied();// 0x4d078b4 0x78dbfbdde0
	bool IsBorderApplied();// 0x4d07c00 0x78dbfbdec0
	bool IsAlignmentApplied();// 0x4d07e48 0x78dbfbdfa0
	ExcelProtection GetProtection();// 0x4d07270 0x78dbfbe080
	ExcelNumberFormat GetNumberFormat();// 0x4d07440 0x78dbfbe160
	ExcelFont GetFont();// 0x4d07778 0x78dbfbe240
	ExcelFill GetFill();// 0x4d07abc 0x78dbfbe320
	ExcelBorder GetBorder();// 0x4d07d80 0x78dbfbe400
	ExcelAlignment GetAlignment();// 0x4d07f2c 0x78dbfbe4e0
	void EnableQuotePrefix(bool Value);// 0x4d06fc0 0x78dbfbe5c0
	void EnablePivotTable(bool Value);// 0x4d070a8 0x78dbfbe6a0

--------------------------------
Class: ExcelProtection
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cdbbf780
	bool IsHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cdbbd700

--------------------------------
Class: ExcelNumberFormat
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cdbbd780
	FString FormatString;//[Offset: 0x8, Size: 0x10] 0x78cdbbd800

--------------------------------
Class: ExcelFont
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78cdbbd880
	float Size;//[Offset: 0x10, Size: 0x4] 0x78cdbbd900
	bool IsBold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x78cdbbd980
	bool IsItalic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1] 0x78cdbbda00
	bool IsSuperScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1] 0x78cdbbda80
	bool IsStrikeThrough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17, Size: 0x1] 0x78cdbbdb00
	bool IsOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78cdbbdb80
	bool IsShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78cdbbdc00
	enum UnderlineType;//[Offset: 0x1a, Size: 0x1] 0x78d36139e0
	ExcelColor Color;//[Offset: 0x1c, Size: 0x20] 0x78cdbbdd00
	int Family;//[Offset: 0x3c, Size: 0x4] 0x78cdbbdd80
	int Charset;//[Offset: 0x40, Size: 0x4] 0x78cdbbde00
	FString Scheme;//[Offset: 0x48, Size: 0x10] 0x78cdbbde80

--------------------------------
Class: ExcelColor
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78d3613c60
	int ColorIndex;//[Offset: 0x4, Size: 0x4] 0x78cdbbc900
	LinearColor ColorValue;//[Offset: 0x8, Size: 0x10] 0x78cdbbc980
	float Tint;//[Offset: 0x18, Size: 0x4] 0x78cdbbca00
	bool IsAutoColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78cdbbca80

--------------------------------
Class: ExcelFill
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78d3613a80
	ExcelPatternFill PatternFill;//[Offset: 0x4, Size: 0x44] 0x78cdbbe100
	ExcelGradientFill GradientFill;//[Offset: 0x48, Size: 0x68] 0x78cdbbe400

--------------------------------
Class: ExcelPatternFill
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78d3613b20
	ExcelColor ForegroundColor;//[Offset: 0x4, Size: 0x20] 0x78cdbbe000
	ExcelColor BackgroundColor;//[Offset: 0x24, Size: 0x20] 0x78cdbbe080

--------------------------------
Class: ExcelGradientFill
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78d3613bc0
	float Degree;//[Offset: 0x4, Size: 0x4] 0x78cdbbe200
	Margin Distance;//[Offset: 0x8, Size: 0x10] 0x78cdbbe280
	<float,ExcelColor> Stops;//[Offset: 0x18, Size: 0x50] 0x78cdd8a900

--------------------------------
Class: ExcelBorder
	ExcelBorderSide Start;//[Offset: 0x0, Size: 0x24] 0x78cdbbe680
	ExcelBorderSide End;//[Offset: 0x24, Size: 0x24] 0x78cdbbe700
	ExcelBorderSide Top;//[Offset: 0x48, Size: 0x24] 0x78cdbbc680
	ExcelBorderSide Bottom;//[Offset: 0x6c, Size: 0x24] 0x78cdbbc700
	ExcelBorderSide Horizontal;//[Offset: 0x90, Size: 0x24] 0x78cdbbc780
	ExcelBorderSide Vertical;//[Offset: 0xb4, Size: 0x24] 0x78cdbbc800
	ExcelBorderSide Diagonal;//[Offset: 0xd8, Size: 0x24] 0x78cdbbcc00
	enum DiagonalDirection;//[Offset: 0xfc, Size: 0x1] 0x78d3613da0

--------------------------------
Class: ExcelBorderSide
	ExcelColor Color;//[Offset: 0x0, Size: 0x20] 0x78cdbbcb00
	enum Style;//[Offset: 0x20, Size: 0x1] 0x78d3613d00

--------------------------------
Class: ExcelAlignment
	bool ShrinkToFit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cdbbcd00
	bool WrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cdbbcd80
	int Indent;//[Offset: 0x4, Size: 0x4] 0x78cdbbce00
	int TextRotation;//[Offset: 0x8, Size: 0x4] 0x78cdbbce80
	enum HorizontalAlignment;//[Offset: 0xc, Size: 0x1] 0x78d3611500
	enum VerticalAlignment;//[Offset: 0xd, Size: 0x1] 0x78d36115a0

--------------------------------
Class: ExcelVariant

--------------------------------
Class: ExcelCellRangeReferenceLibrary.BlueprintFunctionLibrary.Object
	static int Width(ExcelCellRangeReference rangeReference);// 0x4d054c0 0x78dbfbb3e0
	static FString ToString(ExcelCellRangeReference rangeReference);// 0x4d05774 0x78dbfbb4c0
	static ExcelCellRangeReference ToRange(ExcelCellReference cellRef);// 0x4d05890 0x78dbfbb5a0
	static bool NotEqual_ExcelCellRangeReference(ExcelCellRangeReference A, ExcelCellRangeReference B);// 0x4d050ec 0x78dbfbb680
	static ExcelCellRangeReference MoveBy(ExcelCellRangeReference rangeReference, int columnOffset, int rowOffset);// 0x4d052d4 0x78dbfbb760
	static ExcelCellRangeReference MakeCellRangeWithString(FString rangeString);// 0x4d0561c 0x78dbfbb840
	static bool IsSingleCell(ExcelCellRangeReference rangeReference);// 0x4d0556c 0x78dbfbb920
	static int Height(ExcelCellRangeReference rangeReference);// 0x4d05414 0x78dbfbba00
	static bool Equal_ExcelCellRangeReference(ExcelCellRangeReference A, ExcelCellRangeReference B);// 0x4d051e0 0x78dbfbbae0

--------------------------------
Class: ExcelCellReferenceLibrary.BlueprintFunctionLibrary.Object
	static FString ToString(ExcelCellReference cellRef);// 0x4d0659c 0x78dbfbadc0
	static FString ToColumnString(int columnIndex);// 0x4d06094 0x78dbfbaea0
	static int ToColumnIndex(FString columString);// 0x4d061ac 0x78dbfbaf80
	static bool NotEqual_ExcelCellReference(ExcelCellReference A, ExcelCellReference B);// 0x4d05eb4 0x78dbfbb060
	static ExcelCellReference MoveBy(ExcelCellReference cellRef, int columnOffset, int rowOffset);// 0x4d06304 0x78dbfbb140
	static ExcelCellReference MakeCellReferenceWithString(FString referenceString);// 0x4d06444 0x78dbfbb220
	static bool Equal_ExcelCellReference(ExcelCellReference A, ExcelCellReference B);// 0x4d05fa4 0x78dbfbb300

--------------------------------
Class: ExcelNumberFormatLibrary.BlueprintFunctionLibrary.Object
	static ExcelNumberFormat MakeNumberFormat_Text();// 0x4d0c6d0 0x78dbfbf200
	static ExcelNumberFormat MakeNumberFormat_Percentage00();// 0x4d0c180 0x78dbfbf2e0
	static ExcelNumberFormat MakeNumberFormat_Percentage();// 0x4d0c290 0x78dbfbf3c0
	static ExcelNumberFormat MakeNumberFormat_NumberCommaSeparated1();// 0x4d0c3a0 0x78dbfbf4a0
	static ExcelNumberFormat MakeNumberFormat_Number00();// 0x4d0c4b0 0x78dbfbf580
	static ExcelNumberFormat MakeNumberFormat_Number();// 0x4d0c5c0 0x78dbfbf660
	static ExcelNumberFormat MakeNumberFormat_General();// 0x4d0c7e0 0x78dbfbf740
	static ExcelNumberFormat MakeNumberFormat_Date_yyyymmdd2();// 0x4d0c070 0x78dbfbf820
	static ExcelNumberFormat MakeNumberFormat_Date_yymmdd();// 0x4d0bf60 0x78dbfbf900
	static ExcelNumberFormat MakeNumberFormat_Date_xlsx22();// 0x4d0b4c0 0x78dbfbf9e0
	static ExcelNumberFormat MakeNumberFormat_Date_xlsx17();// 0x4d0b5d0 0x78dbfbfac0
	static ExcelNumberFormat MakeNumberFormat_Date_xlsx16();// 0x4d0b6e0 0x78dbfbfba0
	static ExcelNumberFormat MakeNumberFormat_Date_xlsx15();// 0x4d0b7f0 0x78dbfbfc80
	static ExcelNumberFormat MakeNumberFormat_Date_xlsx14();// 0x4d0b900 0x78dbfbfd60
	static ExcelNumberFormat MakeNumberFormat_Date_time6();// 0x4d0ad50 0x78dbfbfe40
	static ExcelNumberFormat MakeNumberFormat_Date_time5();// 0x4d0ae60 0x78dbfbff20
	static ExcelNumberFormat MakeNumberFormat_Date_time4();// 0x4d0af70 0x78dbfbcaa0
	static ExcelNumberFormat MakeNumberFormat_Date_time3();// 0x4d0b080 0x78dbfbcb80
	static ExcelNumberFormat MakeNumberFormat_Date_time2();// 0x4d0b190 0x78dbfbcc60
	static ExcelNumberFormat MakeNumberFormat_Date_time1();// 0x4d0b2a0 0x78dbfbcd40
	static ExcelNumberFormat MakeNumberFormat_Date_myminus();// 0x4d0ba10 0x78dbfbce20
	static ExcelNumberFormat MakeNumberFormat_Date_dmyslash();// 0x4d0bd40 0x78dbfbcf00
	static ExcelNumberFormat MakeNumberFormat_Date_dmyminus();// 0x4d0bc30 0x78dbfbcfe0
	static ExcelNumberFormat MakeNumberFormat_Date_dmminus();// 0x4d0bb20 0x78dbfbd0c0
	static ExcelNumberFormat MakeNumberFormat_Date_ddmmyyyy();// 0x4d0be50 0x78dbfbd1a0
	static ExcelNumberFormat MakeNumberFormat_Date_datetime();// 0x4d0b3b0 0x78dbfbd280

--------------------------------
Class: ExcelVariantLibrary.BlueprintFunctionLibrary.Object
	static FString ToString(ExcelVariant Value);// 0x4d0e970 0x78dbfe1740
	static int ToInt(ExcelVariant Value);// 0x4d0eba4 0x78dbfe1820
	static DateTime ToDateTime(ExcelVariant Value);// 0x4d0e820 0x78dbfe1900
	static bool ToBool(ExcelVariant Value);// 0x4d0ecf8 0x78dbfe19e0
	static ExcelVariant[] ToArray(ExcelVariant Value);// 0x4d0e54c 0x78dbfe1ac0
	static void SetString(ExcelVariant Target, FString Value);// 0x4d0dfb4 0x78dbfe1ba0
	static void SetInt(ExcelVariant Target, int Value);// 0x4d0e224 0x78dbfe1c80
	static void SetDateTime(ExcelVariant Target, DateTime Value);// 0x4d0de2c 0x78dbfbe780
	static void SetBool(ExcelVariant Target, bool Value);// 0x4d0e3b0 0x78dbfbe860
	static ExcelVariant MakeVariantWithStringArray(FString[] Value);// 0x4d0f608 0x78dbfbe940
	static ExcelVariant MakeVariantWithString(FString Value);// 0x4d101f8 0x78dbfbea20
	static ExcelVariant MakeVariantWithIntArray(int[] Value);// 0x4d0fa24 0x78dbfbeb00
	static ExcelVariant MakeVariantWithInt(int Value);// 0x4d1056c 0x78dbfbebe0
	static ExcelVariant MakeVariantWithDateVariantArray(ExcelVariant[] Value);// 0x4d0efa0 0x78dbfbecc0
	static ExcelVariant MakeVariantWithDateTimeArray(DateTime[] Value);// 0x4d0f2ec 0x78dbfbeda0
	static ExcelVariant MakeVariantWithDateTime(DateTime Value);// 0x4d1005c 0x78dbfbee80
	static ExcelVariant MakeVariantWithBoolArray(bool[] Value);// 0x4d0fd40 0x78dbfbef60
	static ExcelVariant MakeVariantWithBool(bool Value);// 0x4d10708 0x78dbfbf040
	static enum GetType(ExcelVariant Value);// 0x4d0ee4c 0x78dbfbf120

--------------------------------
Class: Dungeon.Actor.Object
	Guid uid;//[Offset: 0x220, Size: 0x10] 0x78dbfdeb00
	DungeonThemeAsset*[] Themes;//[Offset: 0x230, Size: 0x10] 0x78dbff0880
	class DungeonBuilder* BuilderClass;//[Offset: 0x240, Size: 0x8] 0x78dbff0920
	DungeonMarkerEmitter*[] MarkerEmitters;//[Offset: 0x248, Size: 0x10] 0x78dbff09c0
	DungeonEventListener*[] EventListeners;//[Offset: 0x258, Size: 0x10] 0x78dbff0a60
	ClusterThemeInfo[] ClusterThemes;//[Offset: 0x268, Size: 0x10] 0x78dbff0b00
	bool bDrawDebugData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x78dbfded80
	DungeonBuilder* Builder;//[Offset: 0x280, Size: 0x8] 0x78dbfdee00
	DungeonConfig* Config;//[Offset: 0x288, Size: 0x8] 0x78dbfdee80
	DungeonModel* DungeonModel;//[Offset: 0x290, Size: 0x8] 0x78dbfdef00
	DungeonToolData* ToolData;//[Offset: 0x298, Size: 0x8] 0x78dbfdef80
	DungeonQuery* Query;//[Offset: 0x2a0, Size: 0x8] 0x78dbfdf000
	DungeonLevelStreamingConfig LevelStreamingConfig;//[Offset: 0x2a8, Size: 0x18] 0x78dbfdf080
	DungeonLevelStreamingModel* LevelStreamingModel;//[Offset: 0x2c0, Size: 0x8] 0x78dbfdf100
	Vector BuildPriorityLocation;//[Offset: 0x2c8, Size: 0xc] 0x78dbfdf180
	delegate OnDungeonBuildComplete;//[Offset: 0x2d8, Size: 0x10] 0x78dbfdf200
	DungeonBuilder* SetBuilderClass(class DungeonBuilder InBuilderClass);// 0x4e24bb8 0x78dbfea0a0
	void ResetDungeonId();// 0x4e24b70 0x78dbfea180
	DungeonQuery* GetQuery();// 0x4e24b84 0x78dbfea260
	void DestroyDungeon();// 0x4e24c68 0x78dbfea340
	void BuildDungeon();// 0x4e24c7c 0x78dbfea420

--------------------------------
Class: DungeonBuilder.Object
	DungeonConfig* Config;//[Offset: 0x28, Size: 0x8] 0x78dbfdfb80
	Dungeon* Dungeon;//[Offset: 0x40, Size: 0x8] 0x78dbfdfc00
	DungeonModel* Model;//[Offset: 0x48, Size: 0x8] 0x78dbfdfc80
	DungeonQuery* Query;//[Offset: 0x50, Size: 0x8] 0x78dbfdfd00
	PropSocket[] GetMarkers();// 0x4e25cf0 0x78dbfe9b60
	void EmitMarker(FString SocketType, out const Transform Transform);// 0x4e25eb8 0x78dbfe9c40
	void EmitDungeonMarkers();// 0x4e26010 0x78dbfe9d20

--------------------------------
Class: PropSocket
	int ID;//[Offset: 0x0, Size: 0x4] 0x78dbde1e00
	FString SocketType;//[Offset: 0x8, Size: 0x10] 0x78dbde1e80
	FString ClusterThemeOverride;//[Offset: 0x18, Size: 0x10] 0x78dbde1f00
	Transform Transform;//[Offset: 0x30, Size: 0x30] 0x78dbde1f80
	bool IsConsumed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78dbde2000

--------------------------------
Class: DungeonConfig.Object
	int Seed;//[Offset: 0x28, Size: 0x4] 0x78dbfdfa00
	bool Instanced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78dbfdfa80
	float MaxBuildTimePerFrameMs;//[Offset: 0x30, Size: 0x4] 0x78dbfdfb00

--------------------------------
Class: DungeonModel.Object

--------------------------------
Class: DungeonQuery.Object
	DungeonQueryUserState* UserState;//[Offset: 0x28, Size: 0x8] 0x78dc004580

--------------------------------
Class: DungeonQueryUserState.Object
	<FName,FString> UserData;//[Offset: 0x28, Size: 0x50] 0x78dbf5b680
	void SetVector(out const FName Name, out const Vector Value);// 0x4e30108 0x78dbfee400
	void SetString(out const FName Name, FString Value);// 0x4e2ffe0 0x78dbfee4e0
	void SetInt(out const FName Name, int Value);// 0x4e30400 0x78dbfee5c0
	void SetFloat(out const FName Name, float Value);// 0x4e30208 0x78dbfee6a0
	void SetBool(out const FName Name, bool Value);// 0x4e30300 0x78dbfeadc0
	Vector GetVector(out const FName Name);// 0x4e2fce8 0x78dbfeaea0
	FString GetString(out const FName Name);// 0x4e2fbbc 0x78dbfeaf80
	int GetInt(out const FName Name);// 0x4e2ff24 0x78dbfeb060
	float GetFloat(out const FName Name);// 0x4e2fda8 0x78dbfeb140
	bool GetBool(out const FName Name);// 0x4e2fe64 0x78dbfeb220
	void ClearAllState();// 0x4e2fba8 0x78dbfeb300

--------------------------------
Class: DungeonThemeAsset.Object
	PropTypeData[] Props;//[Offset: 0x28, Size: 0x10] 0x78dbff1f00
	DungeonEditorViewportProperties* PreviewViewportProperties;//[Offset: 0x38, Size: 0x8] 0x78dc004300

--------------------------------
Class: PropTypeData
	FName NodeId;//[Offset: 0x0, Size: 0x8] 0x78dbde2080
	Object* AssetObject;//[Offset: 0x8, Size: 0x8] 0x78dbde2100
	FString AttachToSocket;//[Offset: 0x10, Size: 0x10] 0x78dbde0080
	float Probability;//[Offset: 0x20, Size: 0x4] 0x78dbde0100
	bool bUseSelectionLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x78dbde0180
	bool bLogicOverridesAffinity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1] 0x78dbde0200
	DungeonSelectorLogic*[] SelectionLogics;//[Offset: 0x28, Size: 0x10] 0x78d3612cc0
	bool bUseTransformLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78dbde0300
	DungeonTransformLogic*[] TransformLogics;//[Offset: 0x40, Size: 0x10] 0x78d3612d60
	bool bUseSpawnLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78dbde0400
	DungeonSpawnLogic*[] SpawnLogics;//[Offset: 0x58, Size: 0x10] 0x78d3612e00
	bool ConsumeOnAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78dbde0500
	Transform Offset;//[Offset: 0x70, Size: 0x30] 0x78dbde0580
	bool bUseSpatialConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x78dbde0600
	DungeonSpatialConstraint* SpatialConstraint;//[Offset: 0xa8, Size: 0x8] 0x78dbde0680
	PropChildSocketData[] ChildSockets;//[Offset: 0xb0, Size: 0x10] 0x78d3612ea0

--------------------------------
Class: DungeonSelectorLogic.Object

--------------------------------
Class: DungeonTransformLogic.Object

--------------------------------
Class: DungeonSpawnLogic.Object
	void OnItemSpawn(Actor* Actor, Dungeon* Dungeon);// 0x4e310b0 0x78dbfee320

--------------------------------
Class: DungeonSpatialConstraint.Object
	bool bApplyBaseRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dc004480
	bool bRotateToFitConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78dc004500

--------------------------------
Class: PropChildSocketData
	FString SocketType;//[Offset: 0x0, Size: 0x10] 0x78dbde0700
	Transform Offset;//[Offset: 0x10, Size: 0x30] 0x78dbde0780

--------------------------------
Class: DungeonEditorViewportProperties.Object
	DungeonConfig* DungeonConfig;//[Offset: 0x28, Size: 0x8] 0x78dbfdf880
	DungeonMarkerEmitter*[] MarkerEmitters;//[Offset: 0x30, Size: 0x10] 0x78dbff0560
	class DungeonBuilder* BuilderClass;//[Offset: 0x40, Size: 0x8] 0x78dbff0600

--------------------------------
Class: DungeonMarkerEmitter.Object
	void EmitMarkers(DungeonBuilder* Builder, DungeonModel* Model, DungeonConfig* Config, DungeonQuery* Query);// 0x4e28af0 0x78dbfec8e0

--------------------------------
Class: DungeonEventListener.Object
	void OnPreDungeonDestroy(Dungeon* Dungeon);// 0x4e26a54 0x78dbfe9620
	void OnPreDungeonBuild(Dungeon* Dungeon);// 0x4e26dfc 0x78dbfe9700
	void OnPostDungeonBuild(Dungeon* Dungeon);// 0x4e26b04 0x78dbfe97e0
	void OnMarkersEmitted(Dungeon* Dungeon, out DungeonMarkerInfo[] MarkerList, out DungeonMarkerInfo[] MarkerListRef);// 0x4e26bb4 0x78dbfe98c0
	void OnDungeonLayoutBuilt(Dungeon* Dungeon);// 0x4e26d4c 0x78dbfe99a0
	void OnDungeonDestroyed(Dungeon* Dungeon);// 0x4e269a4 0x78dbfe9a80

--------------------------------
Class: DungeonMarkerInfo
	Transform Transform;//[Offset: 0x0, Size: 0x30] 0x78dbde1080
	FName NodeId;//[Offset: 0x30, Size: 0x8] 0x78cdbbf800
	DungeonSpawnLogic*[] SpawnLogics;//[Offset: 0x38, Size: 0x10] 0x78d3613080
	Object* TemplateObject;//[Offset: 0x48, Size: 0x8] 0x78cdbbf900

--------------------------------
Class: ClusterThemeInfo
	FString ClusterThemeName;//[Offset: 0x0, Size: 0x10] 0x78dbde1d00
	DungeonThemeAsset*[] Themes;//[Offset: 0x10, Size: 0x10] 0x78d3612c20

--------------------------------
Class: DungeonToolData.Object

--------------------------------
Class: DungeonLevelStreamingConfig
	bool bEnabledLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cdbbe800
	enum InitialLoadLocation;//[Offset: 0x1, Size: 0x1] 0x78d36131c0
	enum StreamingStrategy;//[Offset: 0x2, Size: 0x1] 0x78d3613260
	int VisibilityRoomDepth;//[Offset: 0x4, Size: 0x4] 0x78cdbbe980
	Vector VisibilityDistance;//[Offset: 0x8, Size: 0xc] 0x78cdbbea00
	enum LoadMethod;//[Offset: 0x14, Size: 0x1] 0x78d3613300
	enum UnloadMethod;//[Offset: 0x15, Size: 0x1] 0x78d36133a0
	bool bProcessStreamingNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1] 0x78cdbbeb80

--------------------------------
Class: DungeonLevelStreamingModel.Object
	DungeonStreamingChunk*[] Chunks;//[Offset: 0x28, Size: 0x10] 0x78dbff2900
	DungeonLevelStreamingNavigation* StreamingNavigation;//[Offset: 0x38, Size: 0x8] 0x78dc002100
	delegate OnInitialChunksLoaded;//[Offset: 0x40, Size: 0x10] 0x78dc000080
	delegate OnChunkLoaded;//[Offset: 0x50, Size: 0x10] 0x78dc000100
	delegate OnChunkUnloaded;//[Offset: 0x60, Size: 0x10] 0x78dc000180
	delegate OnChunkVisible;//[Offset: 0x70, Size: 0x10] 0x78dc000200
	delegate OnChunkHidden;//[Offset: 0x80, Size: 0x10] 0x78dc000280

--------------------------------
Class: DungeonStreamingChunk.Object
	Guid ID;//[Offset: 0x28, Size: 0x10] 0x78dc000300
	Box Bounds;//[Offset: 0x38, Size: 0x1c] 0x78dc000380
	<DungeonStreamingChunk*> Neighbors;//[Offset: 0x58, Size: 0x50] 0x78dbff0060
	bool bSpawnRoomChunk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1] 0x78dc000480
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1] 0x78dc000500
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 0x1] 0x78dc000580
	LevelStreamingDynamic* LevelStreaming;//[Offset: 0xb0, Size: 0x8] 0x78dc000600
	Package* LevelPackage;//[Offset: 0xb8, Size: 0x8] 0x78dc000680
	void HandleChunkVisible();// 0x4e27ee8 0x78dbfec9c0
	void HandleChunkUnloaded();// 0x4e27e94 0x78dbfe90e0
	void HandleChunkLoaded();// 0x4e27eb0 0x78dbfe91c0
	void HandleChunkHidden();// 0x4e27ecc 0x78dbfe92a0
	Actor*[] GetLoadedChunkActorsOfType(const class Object ActorClass);// 0x4e27fb4 0x78dbfe9380
	Actor*[] GetLoadedChunkActors();// 0x4e280d4 0x78dbfe9460
	Actor* GetLoadedChunkActorOfType(const class Object ActorClass);// 0x4e27f04 0x78dbfe9540

--------------------------------
Class: DungeonLevelStreamingNavigation.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dc001f80
	bool bAutoResizeNavVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78dc002000

--------------------------------
Class: GridDungeonBuilder.DungeonBuilder.Object
	void GetRooms(out Cell[] RoomCells);// 0x4e4365c 0x78dbfedb40
	void GetRandomStream(out RandomStream OutRandomStream);// 0x4e433bc 0x78dbfedc20
	void GetCorridors(out Cell[] CorridorCells);// 0x4e4358c 0x78dbfedd00
	void GetCellsOfType(enum CellType, out Cell[] Cells);// 0x4e43470 0x78dbfedde0
	bool ContainsCell(int X, int Y);// 0x4e4372c 0x78dbfedec0

--------------------------------
Class: Cell
	int ID;//[Offset: 0x0, Size: 0x4] 0x78dbde3000
	Rectangle Bounds;//[Offset: 0x4, Size: 0x18] 0x78dbde3180
	enum CellType;//[Offset: 0x1c, Size: 0x1] 0x78d36151a0
	bool UserDefined;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1] 0x78dbde1180
	int ClusterId;//[Offset: 0x20, Size: 0x4] 0x78dbde1200
	int[] ConnectedRooms;//[Offset: 0x28, Size: 0x10] 0x78d3615240
	int[] FixedRoomConnections;//[Offset: 0x38, Size: 0x10] 0x78d36129a0
	int[] AdjacentCells;//[Offset: 0x48, Size: 0x10] 0x78d3612a40

--------------------------------
Class: Rectangle
	IntVector Location;//[Offset: 0x0, Size: 0xc] 0x78dbde3080
	IntVector Size;//[Offset: 0xc, Size: 0xc] 0x78dbde3100

--------------------------------
Class: GridDungeonModel.DungeonModel.Object
	enum BuildState;//[Offset: 0x88, Size: 0x1] 0x78dbff33a0
	Cell[] Cells;//[Offset: 0x90, Size: 0x10] 0x78dbff3440
	CellDoor[] Doors;//[Offset: 0xa0, Size: 0x10] 0x78dbff34e0
	StairInfo[] Stairs;//[Offset: 0xb0, Size: 0x10] 0x78dbff3580
	GridCellInfo GetGridCellLookup(int X, int Y);// 0x4e444b0 0x78dbfed600

--------------------------------
Class: GridCellInfo
	int CellId;//[Offset: 0x0, Size: 0x4] 0x78dbde1400
	enum CellType;//[Offset: 0x4, Size: 0x1] 0x78d3612ae0
	bool ContainsDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x78dbde1500

--------------------------------
Class: CellDoor

--------------------------------
Class: StairInfo
	int OwnerCell;//[Offset: 0x0, Size: 0x4] 0x78dbde1580
	int ConnectedToCell;//[Offset: 0x4, Size: 0x4] 0x78dbde1600
	Vector Position;//[Offset: 0x8, Size: 0xc] 0x78dbde1680
	Quat Rotation;//[Offset: 0x20, Size: 0x10] 0x78dbde1700
	IntVector IPosition;//[Offset: 0x30, Size: 0xc] 0x78dbde1780

--------------------------------
Class: GridDungeonConfig.DungeonConfig.Object
	int NumCells;//[Offset: 0x34, Size: 0x4] 0x78dc00c500
	Vector GridCellSize;//[Offset: 0x38, Size: 0xc] 0x78dc00c580
	int MinCellSize;//[Offset: 0x44, Size: 0x4] 0x78dc00c600
	int MaxCellSize;//[Offset: 0x48, Size: 0x4] 0x78dc00a580
	int RoomAreaThreshold;//[Offset: 0x4c, Size: 0x4] 0x78dc00a600
	float RoomAspectDelta;//[Offset: 0x50, Size: 0x4] 0x78dc00a680
	float SpanningTreeLoopProbability;//[Offset: 0x54, Size: 0x4] 0x78dc00a700
	float StairConnectionTollerance;//[Offset: 0x58, Size: 0x4] 0x78dc00a780
	float DoorProximitySteps;//[Offset: 0x5c, Size: 0x4] 0x78dc00a800
	float HeightVariationProbability;//[Offset: 0x60, Size: 0x4] 0x78dc00a880
	float NormalMean;//[Offset: 0x64, Size: 0x4] 0x78dc00a900
	float NormalStd;//[Offset: 0x68, Size: 0x4] 0x78dc00a980
	int MaxAllowedStairHeight;//[Offset: 0x6c, Size: 0x4] 0x78dc00aa00
	int LaneWidth;//[Offset: 0x70, Size: 0x4] 0x78dc00aa80
	bool bEnableClusteredTheming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78dc00ab00
	bool bClusterWithHeightVariation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1] 0x78dc00ab80
	int FloorHeight;//[Offset: 0x78, Size: 0x4] 0x78dc00ac00
	enum WallLayoutType;//[Offset: 0x7c, Size: 0x1] 0x78dbff3620
	float InitialRoomRadius;//[Offset: 0x80, Size: 0x4] 0x78dc00ad00
	bool bFastCellDistribution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x78dc00ad80
	int DungeonWidth;//[Offset: 0x88, Size: 0x4] 0x78dc00ae00
	int DungeonLength;//[Offset: 0x8c, Size: 0x4] 0x78dc00ae80

--------------------------------
Class: GridDungeonToolData.DungeonToolData.Object
	GridToolPaintStrokeData[] PaintedCells;//[Offset: 0x28, Size: 0x10] 0x78dbff5240
	GridToolRectStrokeData[] Rectangles;//[Offset: 0x38, Size: 0x10] 0x78dbff29a0
	GridToolRectStrokeData[] Borders;//[Offset: 0x48, Size: 0x10] 0x78dbff2a40

--------------------------------
Class: GridToolPaintStrokeData
	IntVector Location;//[Offset: 0x0, Size: 0xc] 0x78dbde2e00
	enum CellType;//[Offset: 0xc, Size: 0x1] 0x78d3615060

--------------------------------
Class: GridToolRectStrokeData
	Rectangle Rectangle;//[Offset: 0x0, Size: 0x18] 0x78dbde2f00
	enum CellType;//[Offset: 0x18, Size: 0x1] 0x78d3615100

--------------------------------
Class: GridDungeonQuery.DungeonQuery.Object
	GridDungeonConfig* Config;//[Offset: 0x60, Size: 0x8] 0x78dc00d980
	GridDungeonModel* Model;//[Offset: 0x68, Size: 0x8] 0x78dc00da00
	void IsNearMarker(out const Transform CurrentMarkerTransform, FString NearbyMarkerName, float NearbyDistance, DungeonBuilder* Builder, out bool bIsNear, out int NumFound);// 0x4e46160 0x78dbfef200
	StairInfo GetStairBetween(int CellA, int CellB);// 0x4e467b0 0x78dbfef2e0
	int GetRandomCellOfTypeFromStream(enum CellType, out RandomStream RandomStream);// 0x4e46ac0 0x78dbfef3c0
	int GetRandomCellOfType(enum CellType);// 0x4e46c84 0x78dbfef4a0
	int GetRandomCellFromStream(out RandomStream RandomStream);// 0x4e46bc8 0x78dbfef580
	int GetRandomCell();// 0x4e46d34 0x78dbfef660
	void GetPathBetweenCells(int CellA, int CellB, out int[] OutResult, out bool bOutSuccess);// 0x4e47074 0x78dbfef740
	Vector GetOpeningPointBetweenAdjacentCells(int CellA, int CellB);// 0x4e46594 0x78dbfef820
	void GetFurthestRooms(out int OutRoomA, out int OutRoomB);// 0x4e46f70 0x78dbfef900
	CellDoor GetDoorBetween(int CellA, int CellB);// 0x4e46690 0x78dbfef9e0
	enum GetCellType(int CellId);// 0x4e46d68 0x78dbfefac0
	int[] GetCellsOfType(enum CellType);// 0x4e4738c 0x78dbfefba0
	int[] GetCells();// 0x4e474ac 0x78dbfefc80
	void GetCellDimension(int CellId, out Vector OutCenter, out Vector OutSize);// 0x4e47248 0x78dbfefd60
	void GetCellAtLocation(out const Vector WorldLocation, out int OutCellId, out bool bOutValid);// 0x4e46e18 0x78dbfefe40
	void GetAdjacentCellsOnEdge(out const Transform WallMarkerTransform, out int CellA, out int CellB);// 0x4e46410 0x78dbfeff20
	void GetAdjacentCells(int CellId, out int[] OutAdjacentCells);// 0x4e46030 0x78dbfecaa0
	bool ContainsStairBetween(int CellA, int CellB);// 0x4e469c4 0x78dbfecb80
	bool ContainsDoorBetween(int CellA, int CellB);// 0x4e468c8 0x78dbfecc60

--------------------------------
Class: DungeonActorTemplate.Object
	class Actor* ClassTemplate;//[Offset: 0x28, Size: 0x8] 0x78dbff07e0
	Actor* ActorTemplate;//[Offset: 0x30, Size: 0x8] 0x78dbfdea80

--------------------------------
Class: DungeonBPFunctionLibrary.BlueprintFunctionLibrary.Object
	static Actor* SpawnDungeonOwnedActor(Dungeon* Dungeon, class Actor ActorClass, out const Transform Transform);// 0x4e25894 0x78dbfe9e00
	static bool DungeonObjectHasAuthority(Object* Object);// 0x4e256f4 0x78dbfe9ee0
	static bool ActorBelongsToDungeon(Dungeon* Dungeon, Actor* ActorToCheck);// 0x4e257a0 0x78dbfe9fc0

--------------------------------
Class: DungeonDebug.Actor.Object
	Actor* CloneTemplate;//[Offset: 0x220, Size: 0x8] 0x78dbfdf980

--------------------------------
Class: DungeonInstancedMeshActor.Actor.Object

--------------------------------
Class: DungeonLandscapeModifier.DungeonEventListener.Object
	Landscape* Landscape;//[Offset: 0x28, Size: 0x8] 0x78dc000880
	float HeightBlurRadius;//[Offset: 0x30, Size: 0x4] 0x78dc000900
	int HeightBlurIterations;//[Offset: 0x34, Size: 0x4] 0x78dc000980
	float HeightBlurWeight;//[Offset: 0x38, Size: 0x4] 0x78dc000a00
	float PaintBlurRadius;//[Offset: 0x3c, Size: 0x4] 0x78dc000a80
	int PaintBlurIterations;//[Offset: 0x40, Size: 0x4] 0x78dc000b00
	float PaintBlurWeight;//[Offset: 0x44, Size: 0x4] 0x78dc000b80
	CurveFloat* PaintBlurWeightCurve;//[Offset: 0x48, Size: 0x8] 0x78dc000c00
	float BaseHeight;//[Offset: 0x50, Size: 0x4] 0x78dc000c80
	LandscapeLayerInfoObject*[] Layers;//[Offset: 0x58, Size: 0x10] 0x78dbff0380

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: DungeonVolume.Volume.Brush.Actor.Object
	Dungeon* Dungeon;//[Offset: 0x258, Size: 0x8] 0x78dc001700
	bool RealtimeUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x78dc001780

--------------------------------
Class: DungeonMarkerReplaceVolume.DungeonVolume.Volume.Brush.Actor.Object
	MarkerReplaceEntry[] Replacements;//[Offset: 0x268, Size: 0x10] 0x78dbff27c0

--------------------------------
Class: MarkerReplaceEntry
	FString MarkerName;//[Offset: 0x0, Size: 0x10] 0x78cdbbff80
	FString ReplacementName;//[Offset: 0x10, Size: 0x10] 0x78cdbbe780

--------------------------------
Class: DungeonMesh.Object
	StaticMesh* StaticMesh;//[Offset: 0x28, Size: 0x8] 0x78dc001480
	MaterialOverride[] MaterialOverrides;//[Offset: 0x30, Size: 0x10] 0x78dbff2720
	uint32 HashCode;//[Offset: 0x40, Size: 0x4] 0x78dc001580
	StaticMeshComponent* Template;//[Offset: 0x48, Size: 0x8] 0x78dc001600

--------------------------------
Class: MaterialOverride
	int Index;//[Offset: 0x0, Size: 0x4] 0x78cdbbfe80
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x78cdbbff00

--------------------------------
Class: DungeonMiniMap.Actor.Object
	int TextureSize;//[Offset: 0x220, Size: 0x4] 0x78dc002980
	float OutlineThickness;//[Offset: 0x224, Size: 0x4] 0x78dc002a00
	float DoorThickness;//[Offset: 0x228, Size: 0x4] 0x78dc002a80
	DungeonMiniMapOverlayIcon[] OverlayIcons;//[Offset: 0x230, Size: 0x10] 0x78dbff25e0
	MaterialInterface* MaterialTemplate;//[Offset: 0x240, Size: 0x8] 0x78dc002b80
	DungeonMiniMapOverlayTracking[] DynamicTracking;//[Offset: 0x248, Size: 0x10] 0x78dbff2680
	float BlurRadius;//[Offset: 0x258, Size: 0x4] 0x78dc002c80
	int BlurIterations;//[Offset: 0x25c, Size: 0x4] 0x78dc002d00
	bool bEnableFogOfWar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x78dc002d80
	float FogOfWarTextureScale;//[Offset: 0x264, Size: 0x4] 0x78dc002e00
	FName FogOfWarTrackingItem;//[Offset: 0x268, Size: 0x8] 0x78dc002e80
	Texture2D* FogOfWarExploreTexture;//[Offset: 0x270, Size: 0x8] 0x78dc002f00
	float FogOfWarVisiblityDistance;//[Offset: 0x278, Size: 0x4] 0x78dc002f80
	Texture* MaskTexture;//[Offset: 0x280, Size: 0x8] 0x78dc003000
	TextureRenderTarget2D* StaticOverlayTexture;//[Offset: 0x288, Size: 0x8] 0x78dc003080
	TextureRenderTarget2D* DynamicOverlayTexture;//[Offset: 0x290, Size: 0x8] 0x78dc003100
	TextureRenderTarget2D* FogOfWarTexture;//[Offset: 0x298, Size: 0x8] 0x78dc003180
	Transform WorldToScreen;//[Offset: 0x2a0, Size: 0x30] 0x78dc001100
	void UpdateMaterial(MaterialInterface* InMaterial);// 0x4e29888 0x78dbfec560
	MaterialInterface* CreateMaterialInstanceFromTemplate(MaterialInterface* InMaterialTemplate);// 0x4e29930 0x78dbfec640
	MaterialInterface* CreateMaterialInstance();// 0x4e299e0 0x78dbfec720
	void BuildLayout(DungeonModel* DungeonModel, DungeonConfig* DungeonConfig);// 0x4e29790 0x78dbfec800

--------------------------------
Class: DungeonMiniMapOverlayIcon
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cdbbf980
	Texture2D* Icon;//[Offset: 0x8, Size: 0x8] 0x78cdbbfa00
	float ScreenSize;//[Offset: 0x10, Size: 0x4] 0x78cdbbfa80
	enum ScreenSizeType;//[Offset: 0x14, Size: 0x1] 0x78d3613120
	LinearColor Tint;//[Offset: 0x18, Size: 0x10] 0x78cdbbfb80
	float Rotation;//[Offset: 0x28, Size: 0x4] 0x78cdbbfc00

--------------------------------
Class: DungeonMiniMapOverlayTracking
	Actor* TrackedActor;//[Offset: 0x0, Size: 0x8] 0x78cdbbfc80
	FName ID;//[Offset: 0x8, Size: 0x8] 0x78cdbbfd00
	FName IconName;//[Offset: 0x10, Size: 0x8] 0x78cdbbfd80
	bool bOrientToRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78cdbbfe00

--------------------------------
Class: DungeonMiniMapTrackedObject.ActorComponent.Object
	FName ID;//[Offset: 0xb8, Size: 0x8] 0x78dc002800
	FName IconName;//[Offset: 0xc0, Size: 0x8] 0x78dc002880
	bool bOrientToRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x78dc002900

--------------------------------
Class: DungeonMirrorVolume.DungeonVolume.Volume.Brush.Actor.Object

--------------------------------
Class: DungeonModelHelper.Object
	static Vector MakeVector(out const IntVector In, float Scale);// 0x4e2ddd0 0x78dbfec020
	static IntVector MakeIntVector(out const Vector In);// 0x4e2dd18 0x78dbfec100
	static void GetRectBorderPoints(out const Rectangle Rectangle, out IntVector[] BorderPoints);// 0x4e2d95c 0x78dbfec1e0
	static void GetRectAreaPoints(out const Rectangle Rectangle, out IntVector[] BorderPoints);// 0x4e2d82c 0x78dbfec2c0
	static void GetCenterExtent(out const Rectangle Rectangle, out Vector Center, out Vector Extent);// 0x4e2da8c 0x78dbfec3a0
	static void ExpandBounds(out const Rectangle Bounds, int Size, out Rectangle Result);// 0x4e2dbd4 0x78dbfec480

--------------------------------
Class: NavLinkProxy.Actor.Object
	NavigationLink[] PointLinks;//[Offset: 0x230, Size: 0x10] 0x78dbff2360
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x240, Size: 0x10] 0x78dbff2400
	NavLinkCustomComponent* SmartLinkComp;//[Offset: 0x250, Size: 0x8] 0x78dc003d00
	bool bSmartLinkIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1] 0x78dc003d80
	delegate OnSmartLinkReached;//[Offset: 0x260, Size: 0x10] 0x78dc003e00
	void SetSmartLinkEnabled(bool bEnabled);// 0xce08b1c 0x78dbfebbc0
	void ResumePathFollowing(Actor* Agent);// 0xce08c04 0x78dbfebca0
	void ReceiveSmartLinkReached(Actor* Agent, out const Vector Destination);// 0xaa7cd18 0x78dbfebd80
	bool IsSmartLinkEnabled();// 0xce08bcc 0x78dbfebe60
	bool HasMovingAgents();// 0xce08ae4 0x78dbfebf40

--------------------------------
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	uint32 NavLinkUserId;//[Offset: 0xf0, Size: 0x4] 0x78d7486b00
	class NavArea* EnabledAreaClass;//[Offset: 0xf8, Size: 0x8] 0x78d7490740
	class NavArea* DisabledAreaClass;//[Offset: 0x100, Size: 0x8] 0x78d74907e0
	NavAgentSelector SupportedAgents;//[Offset: 0x108, Size: 0x4] 0x78d7486b80
	Vector LinkRelativeStart;//[Offset: 0x10c, Size: 0xc] 0x78d7486c00
	Vector LinkRelativeEnd;//[Offset: 0x118, Size: 0xc] 0x78d7486c80
	byte LinkDirection;//[Offset: 0x124, Size: 0x1] 0x78d7486d00
	bool bLinkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x125, Size: 0x1] 0x78d7486d80
	bool bNotifyWhenEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x125, Size: 0x1] 0x78d7486e00
	bool bNotifyWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x125, Size: 0x1] 0x78d7486e80
	bool bCreateBoxObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x125, Size: 0x1] 0x78d7486f00
	Vector ObstacleOffset;//[Offset: 0x128, Size: 0xc] 0x78d7486f80
	Vector ObstacleExtent;//[Offset: 0x134, Size: 0xc] 0x78d7487000
	class NavArea* ObstacleAreaClass;//[Offset: 0x140, Size: 0x8] 0x78d7490880
	float BroadcastRadius;//[Offset: 0x148, Size: 0x4] 0x78d7487080
	float BroadcastInterval;//[Offset: 0x14c, Size: 0x4] 0x78d7487100
	byte BroadcastChannel;//[Offset: 0x150, Size: 0x1] 0x78d7487180

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 0x1] 0x78d7487200
	Object* CachedNavParent;//[Offset: 0xe0, Size: 0x8] 0x78d7487280
	void SetNavigationRelevancy(bool bRelevant);// 0xccfd4dc 0x78d7468580

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4] 0x78d7480300
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4] 0x78d7480380
	Color DrawColor;//[Offset: 0x34, Size: 0x4] 0x78d7480400
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4] 0x78d7480480
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78d7480500
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78d7480580
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x78d7480600
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x78d7480680
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x78d7480700
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x78d7480780
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1] 0x78d7480800
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1] 0x78d7480880
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1] 0x78d7480900
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1] 0x78d7480980
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1] 0x78d7480a00
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1] 0x78d7480a80
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1] 0x78d7480b00
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1] 0x78d7480b80
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1] 0x78d7480c00
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1] 0x78d7480c80

--------------------------------
Class: DungeonNavLinkProxy.NavLinkProxy.Actor.Object
	void SetupSmartLinkData(out const Vector Start, out const Vector End, byte Direction);// 0x4e2e254 0x78dbfebae0

--------------------------------
Class: DungeonNegationVolume.DungeonVolume.Volume.Brush.Actor.Object
	bool Reversed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1] 0x78dc003980
	bool AffectsUserDefinedCells;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262, Size: 0x1] 0x78dc003a00

--------------------------------
Class: DungeonParticleSystem.Actor.Object

--------------------------------
Class: DAProcMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1] 0x78dc005100
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1, Size: 0x1] 0x78dc005180
	BodySetup* MeshBodySetup;//[Offset: 0x4a8, Size: 0x8] 0x78dc005200
	DAProcMeshSection[] MeshSections;//[Offset: 0x4b0, Size: 0x10] 0x78dbff1fa0
	KConvexElem[] CollisionConvexElems;//[Offset: 0x4c0, Size: 0x10] 0x78dbff2040
	BoxSphereBounds LocalBounds;//[Offset: 0x4d0, Size: 0x1c] 0x78dc003280
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x4f0, Size: 0x10] 0x78dbff20e0
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x4e2ee28 0x78dbfeb3e0
	bool IsMeshSectionVisible(int SectionIndex);// 0x4e2ed74 0x78dbfeb4c0
	int GetNumSections();// 0x4e2ed40 0x78dbfeb5a0
	void CreateMeshSection(int SectionIndex, out const DAProcMeshVertex[] Vertices, out const int[] Indices, int PrimitiveType, bool bCreateCollision);// 0x4e2efdc 0x78dbfeb680
	void ClearMeshSection(int SectionIndex);// 0x4e2ef34 0x78dbfeb760
	void ClearCollisionConvexMeshes();// 0x4e2ebd0 0x78dbfeb840
	void ClearAllMeshSections();// 0x4e2ef20 0x78dbfeb920
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x4e2ebe4 0x78dbfeba00

--------------------------------
Class: DAProcMeshVertex
	Vector Position;//[Offset: 0x0, Size: 0xc] 0x78dbde0880
	Vector Normal;//[Offset: 0xc, Size: 0xc] 0x78dbde0900
	DAProcMeshTangent Tangent;//[Offset: 0x18, Size: 0x10] 0x78dbde0a80
	Color Color;//[Offset: 0x28, Size: 0x4] 0x78dbde0b00
	Vector2D UV0;//[Offset: 0x2c, Size: 0x8] 0x78dbde0b80
	Vector2D UV1;//[Offset: 0x34, Size: 0x8] 0x78dbde0c00
	Vector2D UV2;//[Offset: 0x3c, Size: 0x8] 0x78dbde0c80
	Vector2D UV3;//[Offset: 0x44, Size: 0x8] 0x78dbde0d00

--------------------------------
Class: DAProcMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0xc] 0x78dbde0980
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78dbde0a00

--------------------------------
Class: DAProcMeshSection
	DAProcMeshVertex[] ProcVertexBuffer;//[Offset: 0x0, Size: 0x10] 0x78d3612f40
	uint32[] ProcIndexBuffer;//[Offset: 0x10, Size: 0x10] 0x78d3612fe0
	Box SectionLocalBox;//[Offset: 0x20, Size: 0x1c] 0x78dbde0e80
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78dbde0f00
	bool bSectionVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x78dbde0f80
	int PrimitiveType;//[Offset: 0x40, Size: 0x4] 0x78dbde1000

--------------------------------
Class: DungeonThemeOverrideVolume.DungeonVolume.Volume.Brush.Actor.Object
	bool Reversed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1] 0x78dc006180
	bool FallbackOnMissingMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262, Size: 0x1] 0x78dc006200
	DungeonThemeAsset* ThemeOverride;//[Offset: 0x268, Size: 0x8] 0x78dc006280
	float OverrideWeight;//[Offset: 0x270, Size: 0x4] 0x78dc006300

--------------------------------
Class: FloorPlanBuilder.DungeonBuilder.Object

--------------------------------
Class: FloorPlanConfig.DungeonConfig.Object
	Vector BuildingSize;//[Offset: 0x34, Size: 0xc] 0x78dc005e00
	Vector GridSize;//[Offset: 0x40, Size: 0xc] 0x78dc005e80
	int MinRoomSize;//[Offset: 0x4c, Size: 0x4] 0x78dc005f00
	int MaxRoomSize;//[Offset: 0x50, Size: 0x4] 0x78dc005f80
	int HallWidth;//[Offset: 0x54, Size: 0x4] 0x78dc006000
	int MinRoomChunkArea;//[Offset: 0x58, Size: 0x4] 0x78dc006080
	float RoomSplitProbabilityOffset;//[Offset: 0x5c, Size: 0x4] 0x78dc006100

--------------------------------
Class: FloorPlanDoorVolume.DungeonVolume.Volume.Brush.Actor.Object
	FString DoorMarker;//[Offset: 0x268, Size: 0x10] 0x78dc005d80

--------------------------------
Class: FloorPlanModel.DungeonModel.Object

--------------------------------
Class: FloorPlanQuery.DungeonQuery.Object

--------------------------------
Class: FloorPlanRoomVolume.DungeonVolume.Volume.Brush.Actor.Object
	bool bCreateWalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1] 0x78dc005900
	bool bConnectDoors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262, Size: 0x1] 0x78dc005980
	float Priority;//[Offset: 0x264, Size: 0x4] 0x78dc005a00
	FString WallMarker;//[Offset: 0x268, Size: 0x10] 0x78dc005a80
	FString GroundMarker;//[Offset: 0x278, Size: 0x10] 0x78dc005b00
	FString CeilingMarker;//[Offset: 0x288, Size: 0x10] 0x78dc005b80
	FString DoorMarker;//[Offset: 0x298, Size: 0x10] 0x78dc005c00
	FString CenterMarker;//[Offset: 0x2a8, Size: 0x10] 0x78dc005c80
	FString PerFloorCenterMarker;//[Offset: 0x2b8, Size: 0x10] 0x78dc005d00

--------------------------------
Class: FloorPlanSelectorLogic.DungeonSelectorLogic.Object
	bool SelectNode(FloorPlanModel* Model, FloorPlanConfig* Config, out const RandomStream RandomStream, int GridX, int GridY, int GridZ);// 0x4e32bb4 0x78dbfee240

--------------------------------
Class: FloorPlanToolData.DungeonToolData.Object

--------------------------------
Class: FloorPlanTransformLogic.DungeonTransformLogic.Object
	void GetNodeOffset(FloorPlanModel* Model, FloorPlanConfig* Config, out const RandomStream RandomStream, int GridX, int GridY, out Transform Offset);// 0x4e33394 0x78dbfee160

--------------------------------
Class: FlowAbstractGraphBase.Object
	FlowAbstractNode*[] GraphNodes;//[Offset: 0x28, Size: 0x10] 0x78dbff1dc0
	FlowAbstractLink*[] GraphLinks;//[Offset: 0x38, Size: 0x10] 0x78dbff1e60

--------------------------------
Class: FlowAbstractNode.Object
	Guid NodeId;//[Offset: 0x28, Size: 0x10] 0x78dc006400
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78dc006480
	LinearColor Color;//[Offset: 0x3c, Size: 0x10] 0x78dc006500
	Vector Coord;//[Offset: 0x4c, Size: 0xc] 0x78dc006580
	FString PathName;//[Offset: 0x58, Size: 0x10] 0x78dc006600
	FlowGraphItem*[] NodeItems;//[Offset: 0x68, Size: 0x10] 0x78dbff18c0
	Vector PreviewLocation;//[Offset: 0x78, Size: 0xc] 0x78dc006700
	FlowAbstractNode*[] MergedCompositeNodes;//[Offset: 0x88, Size: 0x10] 0x78dbff1960
	Object*[] CrossDomainNodeData;//[Offset: 0x98, Size: 0x10] 0x78dbff1a00
	int PathIndex;//[Offset: 0xa8, Size: 0x4] 0x78dc006880
	int PathLength;//[Offset: 0xac, Size: 0x4] 0x78dc006900
	bool ContainsItem(enum ItemType, out int Count);// 0x4e38af0 0x78dbfee080

--------------------------------
Class: FlowGraphItem.Object
	Guid ItemId;//[Offset: 0x28, Size: 0x10] 0x78dc006f80
	enum ItemType;//[Offset: 0x38, Size: 0x1] 0x78dbff1c80
	FString MarkerName;//[Offset: 0x40, Size: 0x10] 0x78dc007080
	Guid[] ReferencedItemIds;//[Offset: 0x50, Size: 0x10] 0x78dbff1d20
	bool bEditorSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78dc007180
	GridFlowItemCustomInfo CustomInfo;//[Offset: 0x68, Size: 0x38] 0x78dc007200

--------------------------------
Class: GridFlowItemCustomInfo
	FString PreviewText;//[Offset: 0x0, Size: 0x10] 0x78dbde1b00
	LinearColor PreviewTextColor;//[Offset: 0x10, Size: 0x10] 0x78dbde1b80
	LinearColor PreviewBackgroundColor;//[Offset: 0x20, Size: 0x10] 0x78dbde1c00
	float FontScale;//[Offset: 0x30, Size: 0x4] 0x78dbde1c80

--------------------------------
Class: FlowAbstractLink.Object
	Guid LinkId;//[Offset: 0x28, Size: 0x10] 0x78dc006b00
	Guid Source;//[Offset: 0x38, Size: 0x10] 0x78dc006b80
	Guid Destination;//[Offset: 0x48, Size: 0x10] 0x78dc006c00
	enum Type;//[Offset: 0x58, Size: 0x1] 0x78dbff1b40
	FlowGraphItem*[] LinkItems;//[Offset: 0x60, Size: 0x10] 0x78dbff1be0
	Guid SourceSubNode;//[Offset: 0x70, Size: 0x10] 0x78dc006d80
	Guid DestinationSubNode;//[Offset: 0x80, Size: 0x10] 0x78dc006e00

--------------------------------
Class: FlowLayoutNodeCreationConstraint.Object

--------------------------------
Class: DungeonFlowItemMetadataComponent.ActorComponent.Object
	FlowGraphItem* FlowItem;//[Offset: 0xb8, Size: 0x8] 0x78dc006e80
	delegate OnFlowItemUpdated;//[Offset: 0xc0, Size: 0x10] 0x78dc006f00

--------------------------------
Class: FlowAssetBase.Object
	GridFlowExecScript* ExecScript;//[Offset: 0x28, Size: 0x8] 0x78dc006380

--------------------------------
Class: GridFlowExecScript.Object
	GridFlowExecScriptGraph* ScriptGraph;//[Offset: 0x28, Size: 0x8] 0x78dc008100
	GridFlowExecScriptResultNode* ResultNode;//[Offset: 0x30, Size: 0x8] 0x78dc008180

--------------------------------
Class: GridFlowExecScriptGraph.Object
	GridFlowExecScriptGraphNode*[] Nodes;//[Offset: 0x28, Size: 0x10] 0x78dbff16e0

--------------------------------
Class: GridFlowExecScriptGraphNode.Object
	Guid NodeId;//[Offset: 0x28, Size: 0x10] 0x78dc008300
	GridFlowExecScriptGraphNode*[] OutgoingNodes;//[Offset: 0x38, Size: 0x10] 0x78dbff1780
	GridFlowExecScriptGraphNode*[] IncomingNodes;//[Offset: 0x48, Size: 0x10] 0x78dbff1820

--------------------------------
Class: GridFlowExecScriptResultNode.GridFlowExecScriptGraphNode.Object

--------------------------------
Class: GridFlowExecScriptTaskNode.GridFlowExecScriptGraphNode.Object
	FlowExecTask* Task;//[Offset: 0x58, Size: 0x8] 0x78dc008280

--------------------------------
Class: FlowExecTask.Object
	FString Description;//[Offset: 0x28, Size: 0x10] 0x78dc007f80
	FString NodeVariableName;//[Offset: 0x38, Size: 0x10] 0x78dc008000
	FlowExecTaskExtender*[] Extenders;//[Offset: 0x48, Size: 0x10] 0x78dbff1640

--------------------------------
Class: FlowExecTaskExtender.Object

--------------------------------
Class: FlowExecCloneableState.Interface.Object

--------------------------------
Class: FlowTaskAbstractBase.FlowExecTask.Object

--------------------------------
Class: FlowTaskAbstract_CreateKeyLock.FlowTaskAbstractBase.FlowExecTask.Object
	FString KeyPath;//[Offset: 0x58, Size: 0x10] 0x78dc007d80
	FString LockPath;//[Offset: 0x68, Size: 0x10] 0x78dc007e00
	FString KeyMarkerName;//[Offset: 0x78, Size: 0x10] 0x78dc007e80
	FString LockMarkerName;//[Offset: 0x88, Size: 0x10] 0x78dc007f00

--------------------------------
Class: FlowTaskAbstract_PathBuilderBase.FlowTaskAbstractBase.FlowExecTask.Object

--------------------------------
Class: FlowTaskAbstract_CreateMainPath.FlowTaskAbstract_PathBuilderBase.FlowTaskAbstractBase.FlowExecTask.Object
	int PathSize;//[Offset: 0x58, Size: 0x4] 0x78dc007900
	FString PathName;//[Offset: 0x60, Size: 0x10] 0x78dc007980
	LinearColor NodeColor;//[Offset: 0x70, Size: 0x10] 0x78dc007a00
	FString StartMarkerName;//[Offset: 0x80, Size: 0x10] 0x78dc007a80
	FString GoalMarkerName;//[Offset: 0x90, Size: 0x10] 0x78dc007b00
	FString StartNodePathName;//[Offset: 0xa0, Size: 0x10] 0x78dc007b80
	FString GoalNodePathName;//[Offset: 0xb0, Size: 0x10] 0x78dc007c00
	int NumParallelSearches;//[Offset: 0xc0, Size: 0x4] 0x78dc007c80
	int64 MaxFramesToProcess;//[Offset: 0xc8, Size: 0x8] 0x78dc007d00

--------------------------------
Class: FlowTaskAbstract_CreatePath.FlowTaskAbstract_PathBuilderBase.FlowTaskAbstractBase.FlowExecTask.Object
	int MinPathSize;//[Offset: 0x58, Size: 0x4] 0x78dc009400
	int MaxPathSize;//[Offset: 0x5c, Size: 0x4] 0x78dc009480
	FString PathName;//[Offset: 0x60, Size: 0x10] 0x78dc007400
	LinearColor NodeColor;//[Offset: 0x70, Size: 0x10] 0x78dc007480
	FString StartFromPath;//[Offset: 0x80, Size: 0x10] 0x78dc007500
	FString EndOnPath;//[Offset: 0x90, Size: 0x10] 0x78dc007580
	bool bEnterThroughTeleporter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x78dc007600
	FString TeleporterMarkerName;//[Offset: 0xa8, Size: 0x10] 0x78dc007680
	FString StartNodePathNameOverride;//[Offset: 0xb8, Size: 0x10] 0x78dc007700
	FString EndNodePathNameOverride;//[Offset: 0xc8, Size: 0x10] 0x78dc007780
	int NumParallelSearches;//[Offset: 0xd8, Size: 0x4] 0x78dc007800
	int64 MaxFramesToProcess;//[Offset: 0xe0, Size: 0x8] 0x78dc007880

--------------------------------
Class: FlowTaskAbstract_CreateTeleporter.FlowTaskAbstractBase.FlowExecTask.Object
	FString FirstPathName;//[Offset: 0x58, Size: 0x10] 0x78dc009280
	FString SecondPathName;//[Offset: 0x68, Size: 0x10] 0x78dc009300
	FString TeleporterMarkerName;//[Offset: 0x78, Size: 0x10] 0x78dc009380

--------------------------------
Class: FlowTaskAbstract_Finalize.FlowTaskAbstractBase.FlowExecTask.Object
	float OneWayDoorPromotionWeight;//[Offset: 0x58, Size: 0x4] 0x78dc009180
	bool bShowDebugData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x78dc009200

--------------------------------
Class: FlowTaskAbstract_SpawnItems.FlowTaskAbstractBase.FlowExecTask.Object
	FString[] Paths;//[Offset: 0x58, Size: 0x10] 0x78dbff3da0
	enum ItemType;//[Offset: 0x68, Size: 0x1] 0x78dbff1500
	FString MarkerName;//[Offset: 0x70, Size: 0x10] 0x78dc008c80
	GridFlowItemCustomInfo CustomItemInfo;//[Offset: 0x80, Size: 0x38] 0x78dc008d00
	int MinCount;//[Offset: 0xb8, Size: 0x4] 0x78dc008d80
	int MaxCount;//[Offset: 0xbc, Size: 0x4] 0x78dc008e00
	enum SpawnMethod;//[Offset: 0xc0, Size: 0x1] 0x78dbff15a0
	float SpawnDistributionVariance;//[Offset: 0xc4, Size: 0x4] 0x78dc008f00
	float MinSpawnDifficulty;//[Offset: 0xc8, Size: 0x4] 0x78dc008f80
	float SpawnProbability;//[Offset: 0xcc, Size: 0x4] 0x78dc009000
	bool bDebugShowDifficulty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1] 0x78dc009080
	LinearColor DifficultyInfoColor;//[Offset: 0xd4, Size: 0x10] 0x78dc009100

--------------------------------
Class: FlowAbstractGraphTaskExtender.FlowExecTaskExtender.Object

--------------------------------
Class: GrammarScriptGraphNode.Object
	Guid NodeId;//[Offset: 0x28, Size: 0x10] 0x78dc008a00
	GrammarScriptGraphNode*[] OutgoingNodes;//[Offset: 0x38, Size: 0x10] 0x78dbff3c60
	GrammarScriptGraphNode*[] IncomingNodes;//[Offset: 0x48, Size: 0x10] 0x78dbff3d00

--------------------------------
Class: GrammarExecutionScriptEntryNode.GrammarScriptGraphNode.Object

--------------------------------
Class: GrammarExecutionScriptRuleNode.GrammarScriptGraphNode.Object
	GraphGrammarProduction* Rule;//[Offset: 0x58, Size: 0x8] 0x78dc008880
	enum ExecutionMode;//[Offset: 0x60, Size: 0x1] 0x78dbff3bc0
	RuleNodeExecutionModeConfig ExecutionConfig;//[Offset: 0x64, Size: 0x10] 0x78dc008980

--------------------------------
Class: GraphGrammarProduction.Object
	FText RuleName;//[Offset: 0x28, Size: 0x18] 0x78dc00a400
	GrammarRuleScript* SourceGraph;//[Offset: 0x40, Size: 0x8] 0x78dc00a480
	GrammarRuleScript*[] DestGraphs;//[Offset: 0x48, Size: 0x10] 0x78dbff3a80

--------------------------------
Class: GrammarRuleScript.Object
	float Weight;//[Offset: 0x28, Size: 0x4] 0x78dc008500
	GrammarScriptGraph* ScriptGraph;//[Offset: 0x30, Size: 0x8] 0x78dc008580

--------------------------------
Class: GrammarScriptGraph.Object
	GrammarScriptGraphNode*[] Nodes;//[Offset: 0x28, Size: 0x10] 0x78dbff3b20

--------------------------------
Class: RuleNodeExecutionModeConfig
	float RunProbability;//[Offset: 0x0, Size: 0x4] 0x78dbde1800
	int IterationCount;//[Offset: 0x4, Size: 0x4] 0x78dbde1880
	int IterationCountMin;//[Offset: 0x8, Size: 0x4] 0x78dbde1900
	int IterationCountMax;//[Offset: 0xc, Size: 0x4] 0x78dbde1980

--------------------------------
Class: GrammarExecutionScript.Object
	GrammarScriptGraph* ScriptGraph;//[Offset: 0x28, Size: 0x8] 0x78dc008780
	GrammarExecutionScriptEntryNode* EntryNode;//[Offset: 0x30, Size: 0x8] 0x78dc008800

--------------------------------
Class: GrammarRuleScriptGraphNode.GrammarScriptGraphNode.Object
	GrammarNodeType* TypeInfo;//[Offset: 0x58, Size: 0x8] 0x78dc008600
	int Index;//[Offset: 0x60, Size: 0x4] 0x78dc008680
	bool bDisplayIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78dc008700

--------------------------------
Class: GrammarNodeType.Object
	FName TypeName;//[Offset: 0x28, Size: 0x8] 0x78dc00a200
	FText Description;//[Offset: 0x30, Size: 0x18] 0x78dc00a280
	bool bNonTerminal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78dc00a300
	bool bWildcard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x78dc00a380

--------------------------------
Class: GraphGrammar.Object
	GraphGrammarProduction*[] ProductionRules;//[Offset: 0x28, Size: 0x10] 0x78dbff3940
	GrammarExecutionScript* ExecutionGraphScript;//[Offset: 0x38, Size: 0x8] 0x78dc00a080
	GrammarNodeType*[] NodeTypes;//[Offset: 0x40, Size: 0x10] 0x78dbff39e0
	GrammarNodeType* WildcardType;//[Offset: 0x50, Size: 0x8] 0x78dc00a180

--------------------------------
Class: Grid3DLayoutNodeCreationConstraint.FlowLayoutNodeCreationConstraint.Object
	bool CanCreateLayoutNode(out const IntVector NodeCoord, out const IntVector GridSize, int TotalPathLength, int CurrentPathPosition);// 0x4e3c6d8 0x78dbfedfa0

--------------------------------
Class: Grid3DFlowTaskAbstract_CreateGrid.FlowTaskAbstractBase.FlowExecTask.Object
	IntVector GridSize;//[Offset: 0x58, Size: 0xc] 0x78dc009c80
	int SeparationDistance;//[Offset: 0x64, Size: 0x4] 0x78dc009d00

--------------------------------
Class: Grid3DFlowTaskAbstract_CreateKeyLock.FlowTaskAbstract_CreateKeyLock.FlowTaskAbstractBase.FlowExecTask.Object

--------------------------------
Class: Grid3DFlowTaskAbstract_CreateMainPath.FlowTaskAbstract_CreateMainPath.FlowTaskAbstract_PathBuilderBase.FlowTaskAbstractBase.FlowExecTask.Object
	bool bUseNodeCreationConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1] 0x78dc009b80
	Grid3DLayoutNodeCreationConstraint* NodeCreationConstraint;//[Offset: 0xd8, Size: 0x8] 0x78dc009c00

--------------------------------
Class: Grid3DFlowTaskAbstract_CreatePath.FlowTaskAbstract_CreatePath.FlowTaskAbstract_PathBuilderBase.FlowTaskAbstractBase.FlowExecTask.Object

--------------------------------
Class: Grid3DFlowTaskAbstract_Finalize.FlowTaskAbstract_Finalize.FlowTaskAbstractBase.FlowExecTask.Object

--------------------------------
Class: Grid3DFlowTaskAbstract_SpawnItems.FlowTaskAbstract_SpawnItems.FlowTaskAbstractBase.FlowExecTask.Object

--------------------------------
Class: GridCustomDungeonBuilder.GridDungeonBuilder.DungeonBuilder.Object
	bool bUseHeightVariation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1] 0x78dc00af00
	void RegisterRoomAt(int X, int Y, int Z, out int RoomID);// 0x4e3dc10 0x78dbfed6e0
	void RegisterRoom(int X, int Y, int Z, int Width, int Height, out int RoomID);// 0x4e3dda4 0x78dbfed7c0
	void GetRandomOffset(int X, int Y, float Radius, out int OutX, out int OutY);// 0x4e3d93c 0x78dbfed8a0
	void GenerateCustomLayout(GridDungeonConfig* GridConfig);// 0x4e3d88c 0x78dbfed980
	void ConnectRooms(int Room1, int Room2);// 0x4e3db20 0x78dbfeda60

--------------------------------
Class: GridDungeonModelHelper.DungeonModelHelper.Object
	static void ToWorldCoords(out const Rectangle Bounds, out const Vector GridSize, out Vector Location, out Vector Size);// 0x4e45250 0x78dbfecd40
	static void RemovePaintCell(out const GridToolPaintStrokeData CellData, Dungeon* Dungeon, bool bAutomaticRebuild);// 0x4e449ec 0x78dbfece20
	static void GetRoomFreeEdge(GridDungeonModel* Model, out const Cell RoomCell, out Vector[] FreeEdgeCenters, out float[] FreeEdgeAngles);// 0x4e44ea8 0x78dbfecf00
	static Vector GetRandomCellLocation(GridDungeonModel* Model, GridDungeonConfig* Config);// 0x4e44c6c 0x78dbfecfe0
	static void GetDoorExits(out const CellDoor Door, out Vector ExitA, out Vector ExitB);// 0x4e44d60 0x78dbfed0c0
	static void GetCellMSTRooms(out const Cell Cell, out int[] MSTRooms);// 0x4e4558c 0x78dbfed1a0
	static void GetCellConnectedRooms(out const Cell Cell, out int[] ConnectedRooms);// 0x4e45754 0x78dbfed280
	static void GetCellCenter(out const Cell Cell, out Vector Center);// 0x4e453ec 0x78dbfed360
	static void GetBoundingBox(out const Cell[] Cells, out Rectangle Bounds);// 0x4e4512c 0x78dbfed440
	static void AddPaintCell(out const GridToolPaintStrokeData CellData, Dungeon* Dungeon, bool bAutomaticRebuild);// 0x4e44b2c 0x78dbfed520

--------------------------------
Class: GridDungeonPlatformVolume.DungeonVolume.Volume.Brush.Actor.Object
	enum CellType;//[Offset: 0x261, Size: 0x1] 0x78dbff2fe0

--------------------------------
Class: GridDungeonSelectorLogic.DungeonSelectorLogic.Object
	bool SelectNode(GridDungeonModel* Model, GridDungeonConfig* Config, GridDungeonBuilder* Builder, GridDungeonQuery* Query, out const Cell Cell, out const RandomStream RandomStream, int GridX, int GridY, out const Transform MarkerTransform);// 0x4e47ed4 0x78dbfeeda0
	bool IsPillarOnCorner(GridDungeonModel* Model, int GridX, int GridY, out Transform OutCornerOffset);// 0x4e48674 0x78dbfeee80
	bool IsPassageTooNarrow(GridDungeonModel* Model, int GridX, int GridY);// 0x4e4852c 0x78dbfeef60
	bool IsOnCorner(GridDungeonModel* Model, int GridX, int GridY);// 0x4e48830 0x78dbfef040
	bool ContainsStair(GridDungeonModel* Model, out const Cell Cell, int GridX, int GridY);// 0x4e482f0 0x78dbfef120

--------------------------------
Class: GridDungeonTransformLogic.DungeonTransformLogic.Object
	void GetNodeOffset(GridDungeonModel* Model, GridDungeonConfig* Config, GridDungeonBuilder* Builder, GridDungeonQuery* Query, out const Cell Cell, out const RandomStream RandomStream, int GridX, int GridY, out const Transform MarkerTransform, out Transform Offset);// 0x4e493cc 0x78dbfeecc0

--------------------------------
Class: GridFlowAbstractGraph.FlowAbstractGraphBase.Object
	IntPoint GridSize;//[Offset: 0x50, Size: 0x8] 0x78dc00fe00

--------------------------------
Class: GridFlowAbstractGraph3D.FlowAbstractGraphBase.Object
	IntVector GridSize;//[Offset: 0x50, Size: 0xc] 0x78dc00fd80

--------------------------------
Class: FDAbstractNodePreview.SceneComponent.ActorComponent.Object
	StaticMeshComponent* NodeMesh;//[Offset: 0x208, Size: 0x8] 0x78dc00fa00
	StaticMeshComponent* BoundsMesh;//[Offset: 0x210, Size: 0x8] 0x78dc00fa80
	TextRenderComponent* TextRenderer;//[Offset: 0x218, Size: 0x8] 0x78dc00fb00
	MaterialInterface* TextMaterial;//[Offset: 0x220, Size: 0x8] 0x78dc00fb80
	MaterialInstanceDynamic* DefaultMaterial;//[Offset: 0x228, Size: 0x8] 0x78dc00fc00
	MaterialInstanceDynamic* SelectedMaterial;//[Offset: 0x230, Size: 0x8] 0x78dc00fc80
	MaterialInstanceDynamic* BoundsMaterial;//[Offset: 0x238, Size: 0x8] 0x78dc00fd00

--------------------------------
Class: NavCollision.NavCollisionBase.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x80, Size: 0x10] 0x78d733fba0
	NavCollisionBox[] BoxCollision;//[Offset: 0x90, Size: 0x10] 0x78d733fc40
	class NavArea* AreaClass;//[Offset: 0xa0, Size: 0x8] 0x78d733fce0
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78d7480200
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1] 0x78d7480280

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 0xc] 0x78dbf77400
	float Radius;//[Offset: 0xc, Size: 0x4] 0x78dbf77480
	float Height;//[Offset: 0x10, Size: 0x4] 0x78dbf77500

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 0xc] 0x78dbf77580
	Vector Extent;//[Offset: 0xc, Size: 0xc] 0x78dbf77600

--------------------------------
Class: FDAbstractLink.SceneComponent.ActorComponent.Object
	StaticMeshComponent* LineMesh;//[Offset: 0x208, Size: 0x8] 0x78dc00f880
	MaterialInstanceDynamic* LineMaterial;//[Offset: 0x210, Size: 0x8] 0x78dc00f900
	MaterialInstanceDynamic* HeadMaterial;//[Offset: 0x218, Size: 0x8] 0x78dc00f980

--------------------------------
Class: GridFlowAbstractGraphVisualizer.Actor.Object
	Guid DungeonID;//[Offset: 0x220, Size: 0x10] 0x78dc011000
	SceneComponent* SceneRoot;//[Offset: 0x230, Size: 0x8] 0x78dc011080
	bool bAutoAlignToLevelViewport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x78dc00f800

--------------------------------
Class: GridFlowAsset.FlowAssetBase.Object

--------------------------------
Class: GridFlowBuilder.DungeonBuilder.Object

--------------------------------
Class: GridFlowConfig.DungeonConfig.Object
	GridFlowAsset* GridFlow;//[Offset: 0x38, Size: 0x28] 0x78dc010d00
	int MaxRetries;//[Offset: 0x60, Size: 0x4] 0x78dc010d80
	Vector GridSize;//[Offset: 0x64, Size: 0xc] 0x78dc010e00
	<FString,FString> ParameterOverrides;//[Offset: 0x70, Size: 0x50] 0x78dbf5b5c0
	bool bAlignDungeonAtCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x78dc010f80

--------------------------------
Class: GridFlowMiniMap.DungeonMiniMap.Actor.Object

--------------------------------
Class: GridFlowModel.DungeonModel.Object
	GridFlowAbstractGraph* AbstractGraph;//[Offset: 0x28, Size: 0x8] 0x78dc010b00
	GridFlowTilemap* Tilemap;//[Offset: 0x30, Size: 0x8] 0x78dc010b80
	IntPoint BuildTileOffset;//[Offset: 0x38, Size: 0x8] 0x78dc010c00
	bool bWallsAsEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78dc010c80

--------------------------------
Class: GridFlowTilemap.Object
	GridFlowTilemapCell[] Cells;//[Offset: 0x28, Size: 0x10] 0x78dbff4ca0
	GridFlowTilemapEdge[] EdgesHorizontal;//[Offset: 0x38, Size: 0x10] 0x78dbff4d40
	GridFlowTilemapEdge[] EdgesVertical;//[Offset: 0x48, Size: 0x10] 0x78dbff4de0
	int Width;//[Offset: 0x58, Size: 0x4] 0x78dc014180
	int Height;//[Offset: 0x5c, Size: 0x4] 0x78dc014200
	<GridFlowTilemapCoord,GridFlowTilemapCellWallInfo> WallMetadataMap;//[Offset: 0x60, Size: 0x50] 0x78dbf5b440
	<GridFlowTilemapCoord,GridFlowTilemapCellDoorInfo> DoorMetadataMap;//[Offset: 0xb0, Size: 0x50] 0x78dbf5b500

--------------------------------
Class: GridFlowTilemapCell
	enum CellType;//[Offset: 0x0, Size: 0x1] 0x78d3614c00
	GridFlowTilemapCustomCellInfo CustomCellInfo;//[Offset: 0x8, Size: 0x20] 0x78dbde3700
	bool bHasItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dbde3780
	Guid ItemId;//[Offset: 0x2c, Size: 0x10] 0x78dbde3800
	FString[] Tags;//[Offset: 0x40, Size: 0x10] 0x78d3614ca0
	bool bHasOverlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78dbde3900
	GridFlowTilemapCellOverlay Overlay;//[Offset: 0x58, Size: 0x48] 0x78dbde3f80
	Vector ChunkCoord;//[Offset: 0xa0, Size: 0xc] 0x78dbde4000
	IntPoint TileCoord;//[Offset: 0xac, Size: 0x8] 0x78dbde4080
	bool bUseCustomColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1] 0x78dbde4100
	LinearColor CustomColor;//[Offset: 0xb8, Size: 0x10] 0x78dbde4180
	bool bMainPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x78dbde4200
	bool bLayoutCell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1] 0x78dbde2180
	bool bUnreachable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1] 0x78dbde2200
	int DistanceFromMainPath;//[Offset: 0xcc, Size: 0x4] 0x78dbde2280
	float Height;//[Offset: 0xd0, Size: 0x4] 0x78dbde2300

--------------------------------
Class: GridFlowTilemapCustomCellInfo
	FString MarkerName;//[Offset: 0x0, Size: 0x10] 0x78dbde3600
	LinearColor DefaultColor;//[Offset: 0x10, Size: 0x10] 0x78dbde3680

--------------------------------
Class: GridFlowTilemapCellOverlay
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbde3980
	FString MarkerName;//[Offset: 0x8, Size: 0x10] 0x78dbde3a00
	LinearColor Color;//[Offset: 0x18, Size: 0x10] 0x78dbde3a80
	float NoiseValue;//[Offset: 0x28, Size: 0x4] 0x78dbde3b00
	bool bTileBlockingOverlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78dbde3b80
	GridFlowTilemapCellOverlayMergeConfig MergeConfig;//[Offset: 0x30, Size: 0x18] 0x78dbde3f00

--------------------------------
Class: GridFlowTilemapCellOverlayMergeConfig
	float minHeight;//[Offset: 0x0, Size: 0x4] 0x78dbde3c00
	float maxHeight;//[Offset: 0x4, Size: 0x4] 0x78dbde3c80
	enum WallOverlayRule;//[Offset: 0x8, Size: 0x1] 0x78d3614d40
	float markerHeightOffsetForLayoutTiles;//[Offset: 0xc, Size: 0x4] 0x78dbde3d80
	float markerHeightOffsetForNonLayoutTiles;//[Offset: 0x10, Size: 0x4] 0x78dbde3e00
	bool removeElevationMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x78dbde3e80

--------------------------------
Class: GridFlowTilemapEdge
	enum EdgeType;//[Offset: 0x0, Size: 0x1] 0x78d3614b60
	Guid ItemId;//[Offset: 0x4, Size: 0x10] 0x78dbde5280
	float HeightCoord;//[Offset: 0x14, Size: 0x4] 0x78dbde3200
	float MarkerAngle;//[Offset: 0x18, Size: 0x4] 0x78dbde3280
	bool bHasItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78dbde3300
	GridFlowTilemapCoord EdgeCoord;//[Offset: 0x20, Size: 0xc] 0x78dbde3500

--------------------------------
Class: GridFlowTilemapCoord
	IntPoint Coord;//[Offset: 0x0, Size: 0x8] 0x78dbde3380
	bool bIsEdgeCoord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78dbde3400
	bool bHorizontalEdge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x78dbde3480

--------------------------------
Class: GridFlowTilemapCellWallInfo
	IntPoint[] OwningTiles;//[Offset: 0x0, Size: 0x10] 0x78d3614de0

--------------------------------
Class: GridFlowTilemapCellDoorInfo
	bool bLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbde2380
	bool bOneWay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78dbde2400
	IntVector ChunkA;//[Offset: 0x4, Size: 0xc] 0x78dbde2480
	IntVector ChunkB;//[Offset: 0x10, Size: 0xc] 0x78dbde2500
	float Angle;//[Offset: 0x1c, Size: 0x4] 0x78dbde2580

--------------------------------
Class: GridFlowQuery.DungeonQuery.Object
	GridFlowConfig* Config;//[Offset: 0x60, Size: 0x8] 0x78dc011a80
	GridFlowModel* Model;//[Offset: 0x68, Size: 0x8] 0x78dc011b00
	static void IsNearMarker(out const Transform CurrentMarkerTransform, FString NearbyMarkerName, float NearbyDistance, DungeonBuilder* Builder, out bool bIsNear, out int NumFound);// 0x4e4d76c 0x78dc021900
	void GetFreeTileLocation(enum[] AllowedRoomTypes, out const RandomStream Random, out bool OutSuccess, out Vector OutWorldCoord);// 0x4e4df54 0x78dc0219e0
	bool GetChunkAtWorldCoord(out const Vector InWorldCoord, out GridFlowChunkQueryResult Result);// 0x4e4de10 0x78dc021ac0
	bool GetChunkAtLayoutNodeCoord(out const Vector InLayoutNodeCoord, out GridFlowChunkQueryResult Result);// 0x4e4dbac 0x78dc021ba0
	static void GetChunkAtLayoutNode(const FlowAbstractNode* InLayoutNode, out GridFlowChunkQueryResult Result);// 0x4e4dcf0 0x78dc021c80
	bool GetCellRoomType(out const Vector WorldCoord, out enum OutRoomType);// 0x4e4e1d8 0x78dbfee780
	bool GetCellAtWorldCoord(out const Vector WorldCoord, out GridFlowTilemapCell OutCell);// 0x4e4e2ec 0x78dbfee860
	bool GetCellAtTileCoord(out const Vector TileCoord, out GridFlowTilemapCell OutCell);// 0x4e4e4bc 0x78dbfee940
	void GetAllChunksOfType(enum RoomType, out GridFlowChunkQueryResult[] OutChunks);// 0x4e4da0c 0x78dbfeea20
	Vector ConvertWorldToTileCoord(out const Vector WorldCoords);// 0x4e4e68c 0x78dbfeeb00
	Vector ConvertTileToWorldCoord(out const Vector TileCoord);// 0x4e4e748 0x78dbfeebe0

--------------------------------
Class: GridFlowChunkQueryResult
	IntPoint LayoutNodeCoord;//[Offset: 0x0, Size: 0x8] 0x78dbde2b80
	Vector TilemapCoordStart;//[Offset: 0x8, Size: 0xc] 0x78dbde2c00
	Vector TilemapCoordEnd;//[Offset: 0x14, Size: 0xc] 0x78dbde2c80
	Vector[] TileCoords;//[Offset: 0x20, Size: 0x10] 0x78d3614f20
	enum RoomType;//[Offset: 0x30, Size: 0x1] 0x78d3614fc0

--------------------------------
Class: GridFlowSelectorLogic.DungeonSelectorLogic.Object
	bool SelectNode(GridFlowModel* Model, GridFlowConfig* Config, GridFlowBuilder* Builder, GridFlowQuery* Query, out const RandomStream RandomStream, int TileX, int TileY, out const Transform MarkerTransform);// 0x4e4ef5c 0x78dc021820

--------------------------------
Class: GridFlowTaskAbstract_CreateGrid.FlowTaskAbstractBase.FlowExecTask.Object
	IntPoint GridSize;//[Offset: 0x58, Size: 0x8] 0x78dc011500
	int SeparationDistance;//[Offset: 0x60, Size: 0x4] 0x78dc011580

--------------------------------
Class: GridFlowTaskAbstract_CreateKeyLock.FlowTaskAbstract_CreateKeyLock.FlowTaskAbstractBase.FlowExecTask.Object

--------------------------------
Class: GridFlowTaskAbstract_CreateMainPath.FlowTaskAbstract_CreateMainPath.FlowTaskAbstract_PathBuilderBase.FlowTaskAbstractBase.FlowExecTask.Object
	bool bOverrideStartGridPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1] 0x78dc011300
	IntPoint StartGridPosition;//[Offset: 0xd4, Size: 0x8] 0x78dc011380
	bool bFullSizeStartRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1] 0x78dc011400
	bool bFullSizeGoalRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1] 0x78dc011480

--------------------------------
Class: GridFlowTaskAbstract_CreatePath.FlowTaskAbstract_CreatePath.FlowTaskAbstract_PathBuilderBase.FlowTaskAbstractBase.FlowExecTask.Object

--------------------------------
Class: GridFlowTaskAbstract_Finalize.FlowTaskAbstract_Finalize.FlowTaskAbstractBase.FlowExecTask.Object
	bool bGenerateCorridors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1] 0x78dc011180
	bool bGenerateCaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 0x1] 0x78dc011200
	int MaxEnemiesPerCaveNode;//[Offset: 0x60, Size: 0x4] 0x78dc011280

--------------------------------
Class: GridFlowTaskAbstract_SpawnItems.FlowTaskAbstract_SpawnItems.FlowTaskAbstractBase.FlowExecTask.Object

--------------------------------
Class: GridFlowTaskTilemapBase.FlowExecTask.Object

--------------------------------
Class: GridFlowTaskTilemap_CreateElevations.GridFlowTaskTilemapBase.FlowExecTask.Object
	int NoiseOctaves;//[Offset: 0x58, Size: 0x4] 0x78dc012d00
	float NoiseFrequency;//[Offset: 0x5c, Size: 0x4] 0x78dc012d80
	float NoiseValuePower;//[Offset: 0x60, Size: 0x4] 0x78dc012e00
	int NumSteps;//[Offset: 0x64, Size: 0x4] 0x78dc012e80
	FString MarkerName;//[Offset: 0x68, Size: 0x10] 0x78dc012f00
	float minHeight;//[Offset: 0x78, Size: 0x4] 0x78dc012f80
	float maxHeight;//[Offset: 0x7c, Size: 0x4] 0x78dc013000
	float SeaLevel;//[Offset: 0x80, Size: 0x4] 0x78dc013080
	LinearColor LandColor;//[Offset: 0x84, Size: 0x10] 0x78dc013100
	LinearColor SeaColor;//[Offset: 0x94, Size: 0x10] 0x78dc013180
	float MinColorMultiplier;//[Offset: 0xa4, Size: 0x4] 0x78dc011100

--------------------------------
Class: GridFlowTaskTilemap_CreateOverlay.GridFlowTaskTilemapBase.FlowExecTask.Object
	FString MarkerName;//[Offset: 0x58, Size: 0x10] 0x78dc012a80
	LinearColor Color;//[Offset: 0x68, Size: 0x10] 0x78dc012b00
	bool bOverlayBlocksTile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78dc012b80
	GridFlowExecNodeTilemapOverlayNoiseSettings NoiseSettings;//[Offset: 0x7c, Size: 0x1c] 0x78dc012c00
	GridFlowTilemapCellOverlayMergeConfig MergeConfig;//[Offset: 0x98, Size: 0x18] 0x78dc012c80

--------------------------------
Class: GridFlowExecNodeTilemapOverlayNoiseSettings
	int NoiseOctaves;//[Offset: 0x0, Size: 0x4] 0x78dbde2800
	float NoiseFrequency;//[Offset: 0x4, Size: 0x4] 0x78dbde2880
	float NoiseValuePower;//[Offset: 0x8, Size: 0x4] 0x78dbde2900
	float NoiseMinValue;//[Offset: 0xc, Size: 0x4] 0x78dbde2980
	float NoiseMaxValue;//[Offset: 0x10, Size: 0x4] 0x78dbde2a00
	float NoiseThreshold;//[Offset: 0x14, Size: 0x4] 0x78dbde2a80
	int MinDistFromMainPath;//[Offset: 0x18, Size: 0x4] 0x78dbde2b00

--------------------------------
Class: GridFlowTaskTilemap_Finalize.GridFlowTaskTilemapBase.FlowExecTask.Object
	bool bDebugUnwalkableCells;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78dc012a00

--------------------------------
Class: GridFlowTaskTilemap_Initialize.GridFlowTaskTilemapBase.FlowExecTask.Object
	IntPoint TilemapSizePerNode;//[Offset: 0x58, Size: 0x8] 0x78dc012400
	IntPoint PerturbAmount;//[Offset: 0x60, Size: 0x8] 0x78dc012480
	int CorridorLaneWidth;//[Offset: 0x68, Size: 0x4] 0x78dc012500
	int LayoutPadding;//[Offset: 0x6c, Size: 0x4] 0x78dc012580
	bool bCropTilemapToLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78dc012600
	enum WallGenerationMethod;//[Offset: 0x71, Size: 0x1] 0x78dbff4e80
	float CaveThickness;//[Offset: 0x74, Size: 0x4] 0x78dc012700
	int CaveAutomataNeighbors;//[Offset: 0x78, Size: 0x4] 0x78dc012780
	int CaveAutomataIterations;//[Offset: 0x7c, Size: 0x4] 0x78dc012800
	float RoomColorSaturation;//[Offset: 0x80, Size: 0x4] 0x78dc012880
	float RoomColorBrightness;//[Offset: 0x84, Size: 0x4] 0x78dc012900
	bool bDebugLayoutTiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78dc012980

--------------------------------
Class: GridFlowTaskTilemap_Merge.GridFlowTaskTilemapBase.FlowExecTask.Object

--------------------------------
Class: GridFlowTaskTilemap_Optimize.GridFlowTaskTilemapBase.FlowExecTask.Object
	int DiscardDistanceFromLayout;//[Offset: 0x58, Size: 0x4] 0x78dc012380

--------------------------------
Class: GridFlowTilemapUserData.Object
	bool bWallsAsEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dc013f80

--------------------------------
Class: FANodeTilemapDomainData.Object
	GridFlowAbstractNodeTilemapMetadata TilemapMetadata;//[Offset: 0x28, Size: 0x20] 0x78dc013e00
	bool bDisablePerturb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78dc013e80
	enum RoomType;//[Offset: 0x49, Size: 0x1] 0x78dbff4c00

--------------------------------
Class: GridFlowAbstractNodeTilemapMetadata
	IntPoint TileCoordStart;//[Offset: 0x0, Size: 0x8] 0x78dbde2680
	IntPoint TileCoordEnd;//[Offset: 0x8, Size: 0x8] 0x78dbde2700
	IntPoint[] Tiles;//[Offset: 0x10, Size: 0x10] 0x78d3614e80

--------------------------------
Class: GridFlowToolData.DungeonToolData.Object

--------------------------------
Class: GridFlowTransformLogic.DungeonTransformLogic.Object
	void GetNodeOffset(GridFlowModel* Model, GridFlowConfig* Config, GridFlowQuery* Query, out const RandomStream RandomStream, int GridX, int GridY, out Transform Offset);// 0x4e56804 0x78dc021740

--------------------------------
Class: GridSpatialConstraint2x2.DungeonSpatialConstraint.Object
	GridSpatialConstraint2x2Data Configuration;//[Offset: 0x30, Size: 0x10] 0x78dc013a00

--------------------------------
Class: GridSpatialConstraint2x2Data
	GridSpatialConstraintCellData[] Cells;//[Offset: 0x0, Size: 0x10] 0x78d3614ac0

--------------------------------
Class: GridSpatialConstraintCellData
	enum OccupationConstraint;//[Offset: 0x0, Size: 0x1] 0x78d3614a20

--------------------------------
Class: GridSpatialConstraint3x3.DungeonSpatialConstraint.Object
	GridSpatialConstraint3x3Data Configuration;//[Offset: 0x30, Size: 0x10] 0x78dc013980

--------------------------------
Class: GridSpatialConstraint3x3Data
	GridSpatialConstraintCellData[] Cells;//[Offset: 0x0, Size: 0x10] 0x78d3614980

--------------------------------
Class: GridSpatialConstraintEdge.DungeonSpatialConstraint.Object
	GridSpatialConstraintEdgeData Configuration;//[Offset: 0x30, Size: 0x10] 0x78dc013900

--------------------------------
Class: GridSpatialConstraintEdgeData
	GridSpatialConstraintCellData[] Cells;//[Offset: 0x0, Size: 0x10] 0x78d36148e0

--------------------------------
Class: IsaacDungeonBuilder.DungeonBuilder.Object

--------------------------------
Class: IsaacDungeonConfig.DungeonConfig.Object
	int MinRooms;//[Offset: 0x34, Size: 0x4] 0x78dc013380
	int MaxRooms;//[Offset: 0x38, Size: 0x4] 0x78dc013400
	int RoomWidth;//[Offset: 0x3c, Size: 0x4] 0x78dc013480
	int RoomLength;//[Offset: 0x40, Size: 0x4] 0x78dc013500
	Vector TileSize;//[Offset: 0x44, Size: 0xc] 0x78dc013580
	Vector RoomPadding;//[Offset: 0x50, Size: 0xc] 0x78dc013600
	float GrowForwardProbability;//[Offset: 0x5c, Size: 0x4] 0x78dc013680
	float GrowSidewaysProbability;//[Offset: 0x60, Size: 0x4] 0x78dc013700
	float SpawnRoomBranchProbability;//[Offset: 0x64, Size: 0x4] 0x78dc013780
	float CycleProbability;//[Offset: 0x68, Size: 0x4] 0x78dc013800
	IsaacRoomLayoutBuilder* RoomLayoutBuilder;//[Offset: 0x70, Size: 0x8] 0x78dc013880

--------------------------------
Class: IsaacRoomLayoutBuilder.Object

--------------------------------
Class: StylizedIsaacRoomLayoutBuilder.IsaacRoomLayoutBuilder.Object
	int minBrushSize;//[Offset: 0x28, Size: 0x4] 0x78dc018100
	int maxBrushSize;//[Offset: 0x2c, Size: 0x4] 0x78dc018180

--------------------------------
Class: IsaacDungeonModel.DungeonModel.Object
	IsaacRoom[] Rooms;//[Offset: 0x28, Size: 0x10] 0x78dbff4ac0
	IsaacDoor[] Doors;//[Offset: 0x38, Size: 0x10] 0x78dbff4b60
	void RemoveStylingFromRoom(int RoomID);// 0x4e5817c 0x78dc021660

--------------------------------
Class: IsaacRoom
	int ID;//[Offset: 0x0, Size: 0x4] 0x78dbde4980
	IntVector Location;//[Offset: 0x4, Size: 0xc] 0x78dbde4a00
	enum RoomType;//[Offset: 0x10, Size: 0x1] 0x78d36145c0
	IsaacRoomLayout Layout;//[Offset: 0x18, Size: 0x18] 0x78dbde4d00
	int[] AdjacentRooms;//[Offset: 0x30, Size: 0x10] 0x78d36147a0
	IntVector[] DoorPositions;//[Offset: 0x40, Size: 0x10] 0x78d3614840

--------------------------------
Class: IsaacRoomLayout
	IsaacRoomTile[] Tiles;//[Offset: 0x0, Size: 0x10] 0x78d3614700
	int Width;//[Offset: 0x10, Size: 0x4] 0x78dbde4c00
	int Height;//[Offset: 0x14, Size: 0x4] 0x78dbde4c80

--------------------------------
Class: IsaacRoomTile
	enum tileType;//[Offset: 0x0, Size: 0x1] 0x78d3614660

--------------------------------
Class: IsaacDoor
	int roomA;//[Offset: 0x0, Size: 0x4] 0x78dbde4e80
	int roomB;//[Offset: 0x4, Size: 0x4] 0x78dbde4f00
	float ratio;//[Offset: 0x8, Size: 0x4] 0x78dbde4f80

--------------------------------
Class: IsaacDungeonQuery.DungeonQuery.Object
	IsaacDungeonConfig* Config;//[Offset: 0x60, Size: 0x8] 0x78dc014d00
	IsaacDungeonModel* Model;//[Offset: 0x68, Size: 0x8] 0x78dc014d80
	Vector GetValidPlatformOnRoom(int RoomID);// 0x4e5862c 0x78dc021200
	IsaacRoom GetRoom(int RoomID);// 0x4e588e0 0x78dc0212e0
	Vector GetRandomValidPlatform();// 0x4e585f4 0x78dc0213c0
	void GetFurthestRooms(out int OutRoomA, out int OutRoomB);// 0x4e587dc 0x78dc0214a0
	bool ContainsDoorBetween(int RoomAId, int RoomBId);// 0x4e586e0 0x78dc021580

--------------------------------
Class: IsaacDungeonSelectorLogic.DungeonSelectorLogic.Object
	bool SelectNode(IsaacDungeonModel* Model);// 0x4e58ed8 0x78dc021120

--------------------------------
Class: IsaacDungeonToolData.DungeonToolData.Object
	IntVector[] PaintedCells;//[Offset: 0x28, Size: 0x10] 0x78dbff4a20

--------------------------------
Class: IsaacDungeonTransformLogic.DungeonTransformLogic.Object
	void GetNodeOffset(IsaacDungeonModel* Model, out Transform Offset);// 0x4e593f4 0x78dc021040

--------------------------------
Class: PlaceableMarkerAsset.Object
	FString[] MarkerNames;//[Offset: 0x28, Size: 0x10] 0x78dbff4980
	int Version;//[Offset: 0x38, Size: 0x4] 0x78dc014a00

--------------------------------
Class: PlaceableMarkerComponent.SceneComponent.ActorComponent.Object
	PlaceableMarkerAsset* MarkerAsset;//[Offset: 0x208, Size: 0x8] 0x78dc014900

--------------------------------
Class: PlaceableMarkerActor.Actor.Object
	PlaceableMarkerComponent* PlaceableMarkerComponent;//[Offset: 0x220, Size: 0x8] 0x78dc014880

--------------------------------
Class: SimpleCityBuilder.DungeonBuilder.Object

--------------------------------
Class: SimpleCityConfig.DungeonConfig.Object
	Vector2D CellSize;//[Offset: 0x34, Size: 0x8] 0x78dc014480
	int MinCitySize;//[Offset: 0x3c, Size: 0x4] 0x78dc014500
	int MaxCitySize;//[Offset: 0x40, Size: 0x4] 0x78dc014580
	int MinBlockSize;//[Offset: 0x44, Size: 0x4] 0x78dc014600
	int MaxBlockSize;//[Offset: 0x48, Size: 0x4] 0x78dc014680
	float BiggerHouseProbability;//[Offset: 0x4c, Size: 0x4] 0x78dc014700
	float RoadEdgeRemovalProbability;//[Offset: 0x50, Size: 0x4] 0x78dc014780
	CityBlockDimension[] CityBlockDimensions;//[Offset: 0x58, Size: 0x10] 0x78dbff48e0

--------------------------------
Class: CityBlockDimension
	FString MarkerName;//[Offset: 0x0, Size: 0x10] 0x78dbde4680
	int SizeX;//[Offset: 0x10, Size: 0x4] 0x78dbde4700
	int SizeY;//[Offset: 0x14, Size: 0x4] 0x78dbde4780
	float Probability;//[Offset: 0x18, Size: 0x4] 0x78dbde4800

--------------------------------
Class: SimpleCityModel.DungeonModel.Object
	int CityWidth;//[Offset: 0x28, Size: 0x4] 0x78dc014300
	int CityLength;//[Offset: 0x2c, Size: 0x4] 0x78dc014380
	SimpleCityCell[] Cells;//[Offset: 0x30, Size: 0x10] 0x78dbff4840

--------------------------------
Class: SimpleCityCell
	IntVector Position;//[Offset: 0x0, Size: 0xc] 0x78dbde4400
	enum CellType;//[Offset: 0xc, Size: 0x1] 0x78d3614520
	Quat Rotation;//[Offset: 0x10, Size: 0x10] 0x78dbde4500
	IntVector BlockSize;//[Offset: 0x20, Size: 0xc] 0x78dbde4580
	FString MarkerNameOverride;//[Offset: 0x30, Size: 0x10] 0x78dbde4600

--------------------------------
Class: SimpleCityQuery.DungeonQuery.Object

--------------------------------
Class: SimpleCitySelectorLogic.DungeonSelectorLogic.Object
	bool SelectNode(SimpleCityModel* Model);// 0x4e5ac40 0x78dc020f60

--------------------------------
Class: SimpleCitySpatialConstraint3x3.DungeonSpatialConstraint.Object
	SimpleCitySpatialConstraint3x3Data Configuration;//[Offset: 0x30, Size: 0x10] 0x78dc016280

--------------------------------
Class: SimpleCitySpatialConstraint3x3Data
	SimpleCitySpatialConstraintCellData[] Cells;//[Offset: 0x0, Size: 0x10] 0x78d3614480

--------------------------------
Class: SimpleCitySpatialConstraintCellData
	enum OccupationConstraint;//[Offset: 0x0, Size: 0x1] 0x78d36143e0

--------------------------------
Class: SimpleCityToolData.DungeonToolData.Object
	IntVector[] PaintedCells;//[Offset: 0x28, Size: 0x10] 0x78dbff47a0

--------------------------------
Class: SimpleCityTransformLogic.DungeonTransformLogic.Object
	void GetNodeOffset(SimpleCityModel* Model, out Transform Offset);// 0x4e5b580 0x78dc020e80

--------------------------------
Class: SimpleIsaacRoomLayoutBuilder.IsaacRoomLayoutBuilder.Object

--------------------------------
Class: SnapStreamingChunkActorData.Object
	SnapChunkActorDataEntry[] ActorEntries;//[Offset: 0x28, Size: 0x10] 0x78dbff4700

--------------------------------
Class: SnapChunkActorDataEntry
	class Actor* ActorClass;//[Offset: 0x0, Size: 0x8] 0x78d36142a0
	Transform ActorTransform;//[Offset: 0x10, Size: 0x30] 0x78dbde6280
	FString ActorName;//[Offset: 0x40, Size: 0x10] 0x78dbde6300
	byte[] ActorData;//[Offset: 0x50, Size: 0x10] 0x78d3614340

--------------------------------
Class: SnapSerializable.Interface.Object
	void OnSnapDataLoaded();// 0x4e5bdc0 0x78dc020da0

--------------------------------
Class: SnapConnectionActor.Actor.Object
	SnapConnectionComponent* ConnectionComponent;//[Offset: 0x220, Size: 0x8] 0x78dc015f00
	Guid ConnectionId;//[Offset: 0x228, Size: 0x10] 0x78dc015f80
	Actor*[] GetSpawnedInstances();// 0x4e5c204 0x78dc020cc0

--------------------------------
Class: SnapConnectionComponent.SceneComponent.ActorComponent.Object
	SnapConnectionInfo* ConnectionInfo;//[Offset: 0x208, Size: 0x8] 0x78dc015c00
	enum ConnectionState;//[Offset: 0x210, Size: 0x1] 0x78dbff4480
	enum DoorType;//[Offset: 0x211, Size: 0x1] 0x78dbff4520
	FString MarkerName;//[Offset: 0x218, Size: 0x10] 0x78dc015d80
	Transform SpawnOffset;//[Offset: 0x230, Size: 0x30] 0x78dc015e00
	enum ConnectionConstraint;//[Offset: 0x260, Size: 0x1] 0x78dbff45c0

--------------------------------
Class: SnapConnectionInfo.Object
	FName ConnectionCategory;//[Offset: 0x28, Size: 0x8] 0x78dc015900
	bool bVerticalDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78dc015980
	DungeonThemeAsset* ThemeAsset;//[Offset: 0x38, Size: 0x8] 0x78dc015a00
	int Version;//[Offset: 0x40, Size: 0x4] 0x78dc015a80
	SnapConnectionVisualInfo_DEPRECATED WallVisuals;//[Offset: 0x50, Size: 0x90] 0x78dc015b00
	SnapConnectionVisualInfo_DEPRECATED DoorVisuals;//[Offset: 0xe0, Size: 0x90] 0x78dc015b80

--------------------------------
Class: SnapConnectionVisualInfo_DEPRECATED
	bool bStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbde5f00
	SnapConnectionVisualMeshInfo_DEPRECATED MeshInfo;//[Offset: 0x10, Size: 0x40] 0x78dbde6100
	SnapConnectionVisualBlueprintInfo_DEPRECATED BlueprintInfo;//[Offset: 0x50, Size: 0x40] 0x78dbde6200

--------------------------------
Class: SnapConnectionVisualMeshInfo_DEPRECATED
	StaticMesh* StaticMesh;//[Offset: 0x0, Size: 0x8] 0x78dbde5f80
	MaterialInterface* MaterialOverride;//[Offset: 0x8, Size: 0x8] 0x78dbde6000
	Transform Offset;//[Offset: 0x10, Size: 0x30] 0x78dbde6080

--------------------------------
Class: SnapConnectionVisualBlueprintInfo_DEPRECATED
	class Actor* BlueprintClass;//[Offset: 0x0, Size: 0x8] 0x78d3614200
	Transform Offset;//[Offset: 0x10, Size: 0x30] 0x78dbde6180

--------------------------------
Class: FANodeSnapDomainData.Object
	FName[] ModuleCategories;//[Offset: 0x28, Size: 0x10] 0x78dbff43e0

--------------------------------
Class: SnapFlowNodeCategorySelectionOverride.Object
	bool TryOverrideCategories(int PathIndex, int PathLength, out const FName[] ExistingCategories, out FName[] OutNewCategories);// 0x4e62a30 0x78dc020be0

--------------------------------
Class: SnapFlowAGTaskExtender.FlowAbstractGraphTaskExtender.FlowExecTaskExtender.Object
	FName[] ModuleCategories;//[Offset: 0x28, Size: 0x10] 0x78dbff3f80
	enum ModuleCategoryOverrideMethod;//[Offset: 0x38, Size: 0x1] 0x78dbff4020
	FName[] StartNodeCategoryOverride;//[Offset: 0x40, Size: 0x10] 0x78dbff40c0
	FName[] EndNodeCategoryOverride;//[Offset: 0x50, Size: 0x10] 0x78dbff4160
	SnapFlowNodeCategorySelectionOverride*[] CategoryOverrideLogic;//[Offset: 0x60, Size: 0x10] 0x78dbff4200

--------------------------------
Class: SnapGridFlowAsset.FlowAssetBase.Object

--------------------------------
Class: SnapGridFlowConfig.DungeonConfig.Object
	SnapGridFlowModuleDatabase* ModuleDatabase;//[Offset: 0x38, Size: 0x28] 0x78dc017080
	SnapGridFlowAsset* FlowGraph;//[Offset: 0x60, Size: 0x28] 0x78dc017100
	DungeonThemeAsset* ItemTheme;//[Offset: 0x88, Size: 0x28] 0x78dc017180
	int NumLayoutBuildRetries;//[Offset: 0xb0, Size: 0x4] 0x78dc017200
	float PreferModulesWithMinimumDoors;//[Offset: 0xb4, Size: 0x4] 0x78dc017280
	<FString,FString> ParameterOverrides;//[Offset: 0xb8, Size: 0x50] 0x78dbf5b380
	int NumTimeoutsRetriesAllowed;//[Offset: 0x108, Size: 0x4] 0x78dc015300

--------------------------------
Class: SnapGridFlowModuleDatabase.Object
	SnapGridFlowModuleBoundsAsset* ModuleBoundsAsset;//[Offset: 0x28, Size: 0x8] 0x78dc016a00
	SnapGridFlowModuleDatabaseItem[] Modules;//[Offset: 0x30, Size: 0x10] 0x78dbff66e0

--------------------------------
Class: SnapGridFlowModuleBoundsAsset.Object
	Vector ChunkSize;//[Offset: 0x28, Size: 0xc] 0x78dc016d00
	LinearColor BoundsWireColor;//[Offset: 0x34, Size: 0x10] 0x78dc016d80
	LinearColor DoorColor;//[Offset: 0x44, Size: 0x10] 0x78dc016e00
	float DoorOffsetZ;//[Offset: 0x54, Size: 0x4] 0x78dc016e80

--------------------------------
Class: SnapGridFlowModuleDatabaseItem
	World* Level;//[Offset: 0x0, Size: 0x28] 0x78dbde6e80
	FName Category;//[Offset: 0x28, Size: 0x8] 0x78dbde6f00
	bool bAllowRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78dbde6f80
	float SelectionWeight;//[Offset: 0x34, Size: 0x4] 0x78dbde7000
	Box ModuleBounds;//[Offset: 0x38, Size: 0x1c] 0x78dbde7080
	IntVector NumChunks;//[Offset: 0x54, Size: 0xc] 0x78dbde7100
	SnapGridFlowModuleDatabaseConnectionInfo[] Connections;//[Offset: 0x60, Size: 0x10] 0x78d3614020
	<PlaceableMarkerAsset*,int> AvailableMarkers;//[Offset: 0x70, Size: 0x50] 0x78cdd8da80
	SGFModuleAssembly[] RotatedAssemblies;//[Offset: 0xc0, Size: 0x10] 0x78d3614160

--------------------------------
Class: SnapGridFlowModuleDatabaseConnectionInfo
	Guid ConnectionId;//[Offset: 0x0, Size: 0x10] 0x78dbde7180
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x78dbde7200
	SnapConnectionInfo* ConnectionInfo;//[Offset: 0x40, Size: 0x8] 0x78dbde7280
	enum ConnectionConstraint;//[Offset: 0x48, Size: 0x1] 0x78d3613f80

--------------------------------
Class: SGFModuleAssembly
	IntVector NumChunks;//[Offset: 0x0, Size: 0xc] 0x78dbde5400
	SGFModuleAssemblySide Front;//[Offset: 0x10, Size: 0x18] 0x78dbde5480
	SGFModuleAssemblySide Left;//[Offset: 0x28, Size: 0x18] 0x78dbde5500
	SGFModuleAssemblySide Back;//[Offset: 0x40, Size: 0x18] 0x78dbde5580
	SGFModuleAssemblySide Right;//[Offset: 0x58, Size: 0x18] 0x78dbde5600
	SGFModuleAssemblySide Top;//[Offset: 0x70, Size: 0x18] 0x78dbde5680
	SGFModuleAssemblySide Down;//[Offset: 0x88, Size: 0x18] 0x78dbde5a80

--------------------------------
Class: SGFModuleAssemblySide
	int Width;//[Offset: 0x0, Size: 0x4] 0x78dbde5700
	int Height;//[Offset: 0x4, Size: 0x4] 0x78dbde5780
	SGFModuleAssemblySideCell[] ConnectionIndices;//[Offset: 0x8, Size: 0x10] 0x78d36140c0

--------------------------------
Class: SGFModuleAssemblySideCell
	int ConnectionIdx;//[Offset: 0x0, Size: 0x4] 0x78dbde5800
	Guid NodeId;//[Offset: 0x4, Size: 0x10] 0x78dbde5880
	Guid LinkedNodeId;//[Offset: 0x14, Size: 0x10] 0x78dbde5900
	Guid LinkId;//[Offset: 0x24, Size: 0x10] 0x78dbde5980

--------------------------------
Class: SnapGridFlowModel.DungeonModel.Object
	SnapConnectionInstance[] Connections;//[Offset: 0x28, Size: 0x10] 0x78dbff3e40
	SnapGridFlowModuleInstanceSerializedData[] ModuleInstances;//[Offset: 0x38, Size: 0x10] 0x78dbff3ee0
	GridFlowAbstractGraph3D* AbstractGraph;//[Offset: 0x48, Size: 0x8] 0x78dc017000

--------------------------------
Class: SnapConnectionInstance
	Guid ModuleA;//[Offset: 0x0, Size: 0x10] 0x78cdbbf400
	Guid DoorA;//[Offset: 0x10, Size: 0x10] 0x78cdbbf480
	Guid ModuleB;//[Offset: 0x20, Size: 0x10] 0x78cdbbf500
	Guid DoorB;//[Offset: 0x30, Size: 0x10] 0x78cdbbf580
	Transform WorldTransform;//[Offset: 0x40, Size: 0x30] 0x78cdbbf600
	bool bHasSpawnedDoorActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78cdbbf680
	Actor*[] SpawnedDoorActors;//[Offset: 0x78, Size: 0x10] 0x78d3613940

--------------------------------
Class: SnapGridFlowModuleInstanceSerializedData
	Guid ModuleInstanceId;//[Offset: 0x0, Size: 0x10] 0x78dbde5b80
	Transform WorldTransform;//[Offset: 0x10, Size: 0x30] 0x78dbde5c00
	World* Level;//[Offset: 0x40, Size: 0x28] 0x78dbde5c80
	FName Category;//[Offset: 0x68, Size: 0x8] 0x78dbde5d00
	Box ModuleBounds;//[Offset: 0x70, Size: 0x1c] 0x78dbde5d80

--------------------------------
Class: SnapGridFlowQuery.DungeonQuery.Object

--------------------------------
Class: SnapGridFlowToolData.DungeonToolData.Object

--------------------------------
Class: SnapGridFlowBuilder.DungeonBuilder.Object

--------------------------------
Class: SnapGridFlowModuleBoundsComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	IntVector NumChunks;//[Offset: 0x470, Size: 0xc] 0x78dc016b80
	bool bRenderBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 0x1] 0x78dc016c00
	SnapGridFlowModuleBoundsAsset* ModuleBounds;//[Offset: 0x480, Size: 0x28] 0x78dc016c80

--------------------------------
Class: SnapGridFlowModuleBoundsActor.Actor.Object
	SnapGridFlowModuleBoundsComponent* BoundsComponent;//[Offset: 0x220, Size: 0x8] 0x78dc016b00

--------------------------------
Class: SnapMapAsset.Object
	GraphGrammar* MissionGrammar;//[Offset: 0x28, Size: 0x8] 0x78dc016980

--------------------------------
Class: SnapMapDungeonBuilder.DungeonBuilder.Object
	void BuildPreviewSnapLayout();// 0x4e650fc 0x78dc020b00

--------------------------------
Class: SnapMapDungeonConfig.DungeonConfig.Object
	SnapMapModuleDatabase* ModuleDatabase;//[Offset: 0x38, Size: 0x8] 0x78dc016600
	SnapMapAsset* DungeonFlowGraph;//[Offset: 0x40, Size: 0x8] 0x78dc016680
	bool bAllowModuleRotations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78dc016700
	int CollisionTestContraction;//[Offset: 0x4c, Size: 0x4] 0x78dc016780
	float MaxProcessingTimeSecs;//[Offset: 0x50, Size: 0x4] 0x78dc016800
	bool bSupportBuildRetries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78dc016880
	int NumBuildRetries;//[Offset: 0x58, Size: 0x4] 0x78dc016900

--------------------------------
Class: SnapMapModuleDatabase.DataAsset.Object
	SnapMapModuleDatabaseItem[] Modules;//[Offset: 0x30, Size: 0x10] 0x78dbff6460

--------------------------------
Class: SnapMapModuleDatabaseItem
	World* Level;//[Offset: 0x0, Size: 0x28] 0x78dbde6800
	FName Category;//[Offset: 0x28, Size: 0x8] 0x78dbde6880
	Box ModuleBounds;//[Offset: 0x30, Size: 0x1c] 0x78dbde6900
	SnapMapModuleDatabaseConnectionInfo[] Connections;//[Offset: 0x50, Size: 0x10] 0x78d3613ee0

--------------------------------
Class: SnapMapModuleDatabaseConnectionInfo
	Guid ConnectionId;//[Offset: 0x0, Size: 0x10] 0x78dbde6980
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x78dbde6a00
	SnapConnectionInfo* ConnectionInfo;//[Offset: 0x40, Size: 0x8] 0x78dbde6a80
	enum ConnectionConstraint;//[Offset: 0x48, Size: 0x1] 0x78d3613e40

--------------------------------
Class: SnapMapDungeonModel.DungeonModel.Object
	SnapConnectionInstance[] Connections;//[Offset: 0x28, Size: 0x10] 0x78dbff65a0
	SnapMapModuleInstanceSerializedData[] ModuleInstances;//[Offset: 0x38, Size: 0x10] 0x78dbff6640
	GrammarScriptGraph* MissionGraph;//[Offset: 0x48, Size: 0x8] 0x78dc016580

--------------------------------
Class: SnapMapModuleInstanceSerializedData
	Guid ModuleInstanceId;//[Offset: 0x0, Size: 0x10] 0x78dbde6c00
	Transform WorldTransform;//[Offset: 0x10, Size: 0x30] 0x78dbde6c80
	World* Level;//[Offset: 0x40, Size: 0x28] 0x78dbde6d00
	FName Category;//[Offset: 0x68, Size: 0x8] 0x78dbde6d80
	Box ModuleBounds;//[Offset: 0x70, Size: 0x1c] 0x78dbde6e00

--------------------------------
Class: SnapMapDungeonQuery.DungeonQuery.Object

--------------------------------
Class: SnapMapDungeonSelectorLogic.DungeonSelectorLogic.Object
	bool SelectNode(SnapMapDungeonModel* Model);// 0x4e65ac4 0x78dc020a20

--------------------------------
Class: SnapMapDungeonToolData.DungeonToolData.Object

--------------------------------
Class: SnapMapDungeonTransformLogic.DungeonTransformLogic.Object
	void GetNodeOffset(SnapMapDungeonModel* Model, out Transform Offset);// 0x4e65fdc 0x78dc020940

--------------------------------
Class: SnapStreamingChunk.DungeonStreamingChunk.Object
	Transform ModuleTransform;//[Offset: 0x120, Size: 0x30] 0x78dc018200
	SnapStreamingChunkActorData* SerializedData;//[Offset: 0x150, Size: 0x8] 0x78dc018280

--------------------------------
Class: MultiWorldActorInterface.Interface.Object
	void OnExitingWorld();// 0x4e7a53c 0x78dc020780
	void OnEnteringWorld();// 0x4e7a558 0x78dc020860

--------------------------------
Class: MultiWorldGameInstance.GameInstance.Object

--------------------------------
Class: MultiWorldGameViewportClient.GameViewportClient.ScriptViewportClient.Object

--------------------------------
Class: MultiWorldManager.GameInstanceSubsystem.Subsystem.Object
	delegate OnAsyncLoadCompleted;//[Offset: 0x38, Size: 0x10] 0x78dbde8280
	delegate OnWorldSwitched;//[Offset: 0x48, Size: 0x10] 0x78dbde8400
	delegate OnPreWorldEnded;//[Offset: 0x58, Size: 0x10] 0x78dbde6480
	World* MainWorld;//[Offset: 0x68, Size: 0x8] 0x78dbde6500
	World* ActiveWorld;//[Offset: 0x70, Size: 0x8] 0x78dbde6580
	World*[] PendingEndWorlds;//[Offset: 0x90, Size: 0x10] 0x78d3616640
	WidgetWorldPair[] HiddenWidgets;//[Offset: 0xa0, Size: 0x10] 0x78d36166e0

--------------------------------
Class: WidgetWorldPair
	UserWidget* Widget;//[Offset: 0x0, Size: 0x8] 0x78dbde6680
	World* World;//[Offset: 0x8, Size: 0x8] 0x78dbde6700

--------------------------------
Class: MultiWorldSceneCaptureComponent2D.SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: MultiWorldSceneCapture2D.SceneCapture2D.SceneCapture.Actor.Object

--------------------------------
Class: MultiWorldSeamTransition.GameInstanceSubsystem.Subsystem.Object
	class UserWidget* UMGEffetLayerClass;//[Offset: 0x38, Size: 0x8] 0x78dbff5f60
	MultiWorldSeamTransitionFXLayer* FXLayer;//[Offset: 0x40, Size: 0x8] 0x78dc019d80
	delegate OnTransitionEnd;//[Offset: 0x48, Size: 0x10] 0x78dc019e00
	TextureRenderTarget2D* SrcWorldRT;//[Offset: 0x58, Size: 0x8] 0x78dc019e80
	TextureRenderTarget2D* DstWorldRT;//[Offset: 0x60, Size: 0x8] 0x78dc019f00
	MaterialInstanceDynamic* MatInstance;//[Offset: 0x68, Size: 0x8] 0x78dc019f80
	SceneCapture2D* SrcWorldSceneCapture;//[Offset: 0x70, Size: 0x8] 0x78dc01a000
	SceneCapture2D* DstWorldSceneCapture;//[Offset: 0x78, Size: 0x8] 0x78dc01a080
	MultiWorldHandle DestinationWorldHandle;//[Offset: 0x98, Size: 0x8] 0x78dc01a100
	MultiWorldHandle SourceWorldHandle;//[Offset: 0xa0, Size: 0x8] 0x78dc01a180
	bool StartTransition(Object* WorldContextObject, MultiWorldHandle InDestinationWorldHandle, MaterialInterface* TransitionMaterial, out const delegate OnTransitionEnd, float DurationInSeconds, float WorldSwitchNormalizedTime, bool bForceWorldsTickingDuringTransition, bool bAutoHandleAudioFade);// 0x4e7b950 0x78dc0230a0
	void SetDefaultFXLayerZOrder(int ZOrder);// 0x4e7b870 0x78dc023180
	void OnPreWorldEnded(MultiWorldHandle InWorldToEnd);// 0x4e7b7c8 0x78dc023260
	bool IsInTransition();// 0x4e7b918 0x78dc023340

--------------------------------
Class: MultiWorldHandle
	World* World;//[Offset: 0x0, Size: 0x8] 0x78dbde6380

--------------------------------
Class: MultiWorldSeamTransitionFXLayer.UserWidget.Widget.Visual.Object
	void SetEffect(MaterialInstance* InMaterial);// 0xaa7cd18 0x78dc022fc0

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x28] 0x78d726ca00
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78d726ca80
	int ZOrder;//[Offset: 0x64, Size: 0x4] 0x78d726cb00
	void SetZOrder(int InZOrder);// 0xbaf4f90 0x78d7255b80
	void SetSize(Vector2D InSize);// 0xbaf53f4 0x78d7255c60
	void SetPosition(Vector2D InPosition);// 0xbaf54cc 0x78d7255d40
	void SetOffsets(Margin InOffset);// 0xbaf5314 0x78d7255e20
	void SetMinimum(Vector2D InMinimumAnchors);// 0xbaf4eb8 0x78d7255f00
	void SetMaximum(Vector2D InMaximumAnchors);// 0xbaf4e14 0x78d7255fe0
	void SetLayout(out const AnchorData InLayoutData);// 0xbaf55dc 0x78d72560c0
	void SetAutoSize(bool InbAutoSize);// 0xbaf5070 0x78d72561a0
	void SetAnchors(Anchors InAnchors);// 0xbaf5230 0x78d7256280
	void SetAlignment(Vector2D InAlignment);// 0xbaf5154 0x78d7256360
	int GetZOrder();// 0xbaf4f5c 0x78d7256440
	Vector2D GetSize();// 0xbaf53c0 0x78d7256520
	Vector2D GetPosition();// 0xbaf5498 0x78d7256600
	Margin GetOffsets();// 0xbaf52dc 0x78d72566e0
	AnchorData GetLayout();// 0xbaf5570 0x78d72567c0
	bool GetAutoSize();// 0xbaf5038 0x78d72568a0
	Anchors GetAnchors();// 0xbaf51f8 0x78d7256980
	Vector2D GetAlignment();// 0xbaf5120 0x78d7256a60

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10] 0x78dbe8e680
	Anchors Anchors;//[Offset: 0x10, Size: 0x10] 0x78dbe8e700
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8] 0x78dbe8c680

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	bool bIsBatchChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1] 0x78d726d580
	int[] BatchChildredZOrders;//[Offset: 0x138, Size: 0x10] 0x78d7270ec0
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0xbaf4824 0x78d7256b40

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x108, Size: 0x88] 0x78d71d5980
	delegate BrushDelegate;//[Offset: 0x190, Size: 0x10] 0x78d71d5a00
	LinearColor ColorAndOpacity;//[Offset: 0x1a0, Size: 0x10] 0x78d71d5a80
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 0x10] 0x78d71d5b00
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1] 0x78d71d5b80
	delegate OnMouseButtonDownEvent;//[Offset: 0x1c4, Size: 0x10] 0x78d71d5c00
	void SetOpacity(float InOpacity);// 0xbb02390 0x78d71cd980
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0xbb02438 0x78d71cda60
	void SetBrushTintColor(SlateColor TintColor);// 0xbb02078 0x78d71cdb40
	void SetBrushSize(Vector2D DesiredSize);// 0xbb022ec 0x78d71cdc20
	void SetBrushResourceObject(Object* ResourceObject);// 0xbb01fd0 0x78d71cdd00
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0xbb01958 0x78d71cdde0
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0xbb01b80 0x78d71cdec0
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0xbb016c0 0x78d71cdfa0
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0xbb01538 0x78d71ce080
	void SetBrushFromMaterial(MaterialInterface* Material);// 0xbb018a8 0x78d71ce160
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0xbb01a5c 0x78d71ce240
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0xbb01c84 0x78d71ce320
	void SetBrush(out const SlateBrush InBrush);// 0xbb01d34 0x78d71ce400
	MaterialInstanceDynamic* GetDynamicMaterial();// 0xbb01504 0x78d71ce4e0

--------------------------------
Class: WidgetBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	WidgetTree* WidgetTree;//[Offset: 0x358, Size: 0x8] 0x78d728c300
	bool bClassRequiresNativeTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 0x1] 0x78d728c380
	DelegateRuntimeBinding[] Bindings;//[Offset: 0x368, Size: 0x10] 0x78d72725e0
	WidgetAnimation*[] Animations;//[Offset: 0x378, Size: 0x10] 0x78d7272680
	FName[] NamedSlots;//[Offset: 0x388, Size: 0x10] 0x78d7272720

--------------------------------
Class: DelegateRuntimeBinding
	FString ObjectName;//[Offset: 0x0, Size: 0x10] 0x78dbe8f200
	FName PropertyName;//[Offset: 0x10, Size: 0x8] 0x78dbe8f280
	FName FunctionName;//[Offset: 0x18, Size: 0x8] 0x78dbe8f300
	DynamicPropertyPath SourcePath;//[Offset: 0x20, Size: 0x28] 0x78dbe8f380
	enum Kind;//[Offset: 0x48, Size: 0x1] 0x78dbe58d00

--------------------------------
Class: UMG_Effect_C.MultiWorldSeamTransitionFXLayer.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78d6f25700
	Image* fx_image;//[Offset: 0x268, Size: 0x8] 0x78d6f25680
	void SetEffect(MaterialInstance* InMaterial);// 0xaa7cd18 0x78d6f75480
	void ExecuteUbergraph_UMG_Effect(int EntryPoint, MaterialInstance* K2Node_Event_InMaterial);// 0xaa7cd18 0x78d6f74d80

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: MultiWorldStatics.BlueprintFunctionLibrary.Object
	static void TransferActorToWorld(const Object* WorldContextObject, Actor* InActor, out const MultiWorldHandle InWorldHandle, out const MultiWorldTransferActorParameters Options);// 0x4e7d048 0x78dc0253a0
	static bool SwitchWorld(const Object* WorldContextObject, out const MultiWorldHandle InWorldHandle);// 0x4e7d77c 0x78dc025480
	static Actor* SpawnActorInWorld(const Object* WorldContextObject, class Actor ActorClass, out const MultiWorldHandle InWorldHandle, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner);// 0x4e7cdf0 0x78dc025560
	static void SetShouldTickWhenInBackground(const Object* WorldContextObject, out const MultiWorldHandle InWorldHandle, bool bShouldTick);// 0x4e7d96c 0x78dc025640
	static void SetPhysicsActorTransform(Actor* Actor, out const Transform NewTransform, enum Teleport);// 0x4e7c400 0x78dc021d60
	static void SetAutoHandleWidgetsForMainWorld(const Object* WorldContextObject, bool bAutoHandleWidgets);// 0x4e7d880 0x78dc021e40
	static bool ReturnToMainWorld(const Object* WorldContextObject);// 0x4e7d6d0 0x78dc021f20
	static void LoadWorldAsync2(const Object* WorldContextObject, FString InLevelPath, MultiWorldLoadParameters InParams);// 0x4e7dc90 0x78dc022000
	static void LoadWorldAsync(const Object* WorldContextObject, World* MapAsset, MultiWorldLoadParameters InParams);// 0x4e7ddf8 0x78dc0220e0
	static MultiWorldHandle LoadWorld(const Object* WorldContextObject, World* MapAsset, MultiWorldLoadParameters InParams);// 0x4e7e018 0x78dc0221c0
	static bool IsValidHandle(const Object* WorldContextObject, out const MultiWorldHandle InWorldHandle);// 0x4e7d1dc 0x78dc0222a0
	static void InitializeWorld(const Object* WorldContextObject, out const MultiWorldHandle InWorldHandle);// 0x4e7dba0 0x78dc022380
	static MultiWorldHandle GetWorldHandleByName(const Object* WorldContextObject, FName WorldName);// 0x4e7d3e8 0x78dc022460
	static MultiWorldHandle GetThisWorldHandle(const Object* WorldContextObject);// 0x4e7d580 0x78dc022540
	static MultiWorldHandle GetMainWorldHandle(const Object* WorldContextObject);// 0x4e7d628 0x78dc022620
	static void GetAllObjectsWithInterface(out const MultiWorldHandle InWorldHandle, class Interface Interface, out Object*[] OutObjects);// 0x4e7c558 0x78dc022700
	static void GetAllActorsWithTag(out const MultiWorldHandle InWorldHandle, FName Tag, out Actor*[] OutActors);// 0x4e7c890 0x78dc0227e0
	static void GetAllActorsWithInterface(out const MultiWorldHandle InWorldHandle, class Interface Interface, out Actor*[] OutActors);// 0x4e7ca08 0x78dc0228c0
	static void GetAllActorsOfClassWithTag(out const MultiWorldHandle InWorldHandle, class Actor ActorClass, FName Tag, out Actor*[] OutActors);// 0x4e7c6d0 0x78dc0229a0
	static void GetAllActorsOfClass(out const MultiWorldHandle InWorldHandle, class Actor ActorClass, out Actor*[] OutActors);// 0x4e7cb80 0x78dc022a80
	static Actor* GetActorOfClass(out const MultiWorldHandle InWorldHandle, class Actor ActorClass);// 0x4e7ccf8 0x78dc022b60
	static MultiWorldHandle GetActiveWorldHandle(const Object* WorldContextObject);// 0x4e7d4d8 0x78dc022c40
	static void ExecuteConsoleCommandInWorld(out const MultiWorldHandle InWorldHandle, FString Command);// 0x4e7c2e0 0x78dc022d20
	static void EndWorld(const Object* WorldContextObject, out const MultiWorldHandle InWorldHandle);// 0x4e7dab0 0x78dc022e00
	static bool AreWorldsEquals(out const MultiWorldHandle InWorldHandleA, out const MultiWorldHandle InWorldHandleB);// 0x4e7d2e0 0x78dc022ee0

--------------------------------
Class: MultiWorldTransferActorParameters
	bool bSetPhysicsActorTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbde7d00
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x78dbde7d80
	enum Teleport;//[Offset: 0x40, Size: 0x1] 0x78d36165a0

--------------------------------
Class: MultiWorldLoadParameters
	FName WorldName;//[Offset: 0x0, Size: 0x8] 0x78dbde7f00
	bool bAutoInitializeWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78dbde7f80
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x78dbde8000
	bool bAutoHandleWidgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x78dbde8080
	bool bCreateDedicatedAudioDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1] 0x78dbde8100
	bool ProtectWorldName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78dbde8180

--------------------------------
Class: AkAcousticPortal.Volume.Brush.Actor.Object
	enum InitialState;//[Offset: 0x258, Size: 0x1] 0x78dbff5600
	float ObstructionRefreshInterval;//[Offset: 0x25c, Size: 0x4] 0x78dc01ba80
	byte ObstructionCollisionChannel;//[Offset: 0x260, Size: 0x1] 0x78dc01bb00
	void OpenPortal();// 0x5012524 0x78dc025100
	enum GetCurrentState();// 0x50124dc 0x78dc0251e0
	void ClosePortal();// 0x5012510 0x78dc0252c0

--------------------------------
Class: AkPortalComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 0x4] 0x78dc01b900
	Object*[] UserData;//[Offset: 0x30, Size: 0x10] 0x78dbff5560

--------------------------------
Class: AkAcousticTexture.AkAudioType.Object

--------------------------------
Class: AkAmbientSound.Actor.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x220, Size: 0x8] 0x78dc01b700
	AkComponent* AkComponent;//[Offset: 0x228, Size: 0x8] 0x78dc01b780
	bool StopWhenOwnerIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x78dc01b800
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1] 0x78dc01b880
	void StopAmbientSound();// 0x5012eec 0x78dc024f40
	void StartAmbientSound();// 0x5012f00 0x78dc025020

--------------------------------
Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50] 0x78dbf5b140
	AkAudioBank* RequiredBank;//[Offset: 0xa0, Size: 0x8] 0x78dc01e500
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb0, Size: 0x8] 0x78dc01e580
	float MaxAttenuationRadius;//[Offset: 0xb8, Size: 0x4] 0x78dc01e600
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1] 0x78dc01e680
	float MinimumDuration;//[Offset: 0xc0, Size: 0x4] 0x78dc01e700
	float MaximumDuration;//[Offset: 0xc4, Size: 0x4] 0x78dc01c680
	float GetMinimumDuration();// 0x5014e40 0x78dc024ae0
	float GetMaximumDuration();// 0x5014e0c 0x78dc024bc0
	float GetMaxAttenuationRadius();// 0x5014eac 0x78dc024ca0
	bool GetIsInfinite();// 0x5014e74 0x78dc024d80

--------------------------------
Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 0x8] 0x78dc01d580

--------------------------------
Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 0x8] 0x78dc01d380

--------------------------------
Class: AkAssetData.Object
	uint32 CachedHash;//[Offset: 0x28, Size: 0x4] 0x78dc01d480
	FString BankLanguage;//[Offset: 0x30, Size: 0x10] 0x78dc01d500

--------------------------------
Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x78dc01c900
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50] 0x78dbf5b200
	<AkAudioEvent*> LinkedAkEvents;//[Offset: 0xa0, Size: 0x50] 0x78dbff7900
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xf0, Size: 0x8] 0x78dc01cb00

--------------------------------
Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x222, Size: 0x1] 0x78dc030800
	byte OcclusionCollisionChannel;//[Offset: 0x228, Size: 0x1] 0x78dc030880
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x229, Size: 0x1] 0x78dc030900
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x230, Size: 0x8] 0x78dc030980
	FString EarlyReflectionAuxBusName;//[Offset: 0x238, Size: 0x10] 0x78dc030a00
	int EarlyReflectionOrder;//[Offset: 0x248, Size: 0x4] 0x78dc030a80
	float EarlyReflectionBusSendGain;//[Offset: 0x24c, Size: 0x4] 0x78dc030b00
	float EarlyReflectionMaxPathLength;//[Offset: 0x250, Size: 0x4] 0x78dc030b80
	float roomReverbAuxBusGain;//[Offset: 0x254, Size: 0x4] 0x78dc030c00
	int diffractionMaxEdges;//[Offset: 0x258, Size: 0x4] 0x78dc030c80
	int diffractionMaxPaths;//[Offset: 0x25c, Size: 0x4] 0x78dc030d00
	float diffractionMaxPathLength;//[Offset: 0x260, Size: 0x4] 0x78dc030d80
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1] 0x78dc030e00
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1] 0x78dc030e80
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x264, Size: 0x1] 0x78dc030f00
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x264, Size: 0x1] 0x78dc030f80
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 0x1] 0x78dc031000
	float AttenuationScalingFactor;//[Offset: 0x268, Size: 0x4] 0x78dc031080
	float OcclusionRefreshInterval;//[Offset: 0x26c, Size: 0x4] 0x78dc01f800
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1] 0x78dc01f880
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x5016b2c 0x78dc027080
	void UseEarlyReflections(AkAuxBus* AuxBus, int order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x50168e0 0x78dc027160
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x5016d70 0x78dc027240
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x5016cc0 0x78dc027320
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0x5017490 0x78dc023a40
	void SetOutputBusVolume(float BusVolume);// 0x50166b8 0x78dc023b20
	void SetListeners(out const AkComponent*[] Listeners);// 0x5016bdc 0x78dc023c00
	void SetEarlyReflectionsVolume(float SendVolume);// 0x5016760 0x78dc023ce0
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0x5016808 0x78dc023dc0
	void SetAttenuationScalingFactor(float Value);// 0x5016610 0x78dc023ea0
	void PostTrigger(AkTrigger* TriggerValue, FString trigger);// 0x5016ff4 0x78dc023f80
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x5017b80 0x78dc024060
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x5017d08 0x78dc024140
	int PostAkEventByName(FString in_EventName);// 0x50176dc 0x78dc024220
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x50177bc 0x78dc024300
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x5017990 0x78dc0243e0
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0x5017198 0x78dc0244c0
	float GetAttenuationRadius();// 0x50165dc 0x78dc0245a0

--------------------------------
Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x208, Size: 0x8] 0x78dc01d780
	FString EventName;//[Offset: 0x210, Size: 0x10] 0x78dc01d800
	void Stop();// 0x501d244 0x78dc024680
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0x501d78c 0x78dc024760
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x501da14 0x78dc024840
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x501d258 0x78dc024920
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x501d528 0x78dc024a00

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10] 0x78dbde8500
	enum CodecID;//[Offset: 0x10, Size: 0x1] 0x78d3616320
	FString Filename;//[Offset: 0x18, Size: 0x10] 0x78dbde8600
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 0x8] 0x78dbde8680
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78dbde8700

--------------------------------
Class: AkExternalMediaAsset.AkMediaAsset.Object

--------------------------------
Class: AkMediaAsset.Object
	uint32 ID;//[Offset: 0x28, Size: 0x4] 0x78dc039d00
	FString MediaName;//[Offset: 0x30, Size: 0x10] 0x78dc039d80
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78dc039e00
	Object*[] UserData;//[Offset: 0x48, Size: 0x10] 0x78dbff8440
	FString Language;//[Offset: 0x58, Size: 0x10] 0x78dc039f00
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x68, Size: 0x8] 0x78dc039f80

--------------------------------
Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dc03a000
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78dc03a080
	FString Language;//[Offset: 0x30, Size: 0x10] 0x78dc03a100
	FString AssetPlatform;//[Offset: 0x40, Size: 0x10] 0x78dc03a180

--------------------------------
Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x50, Size: 0x8] 0x78dc030700

--------------------------------
Class: AkSwitchValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkGroupValue.AkAudioType.Object
	AkMediaAsset*[] MediaDependencies;//[Offset: 0x40, Size: 0x10] 0x78dbff8620
	uint32 GroupShortID;//[Offset: 0x50, Size: 0x4] 0x78dc037880

--------------------------------
Class: AkRtpc.AkAudioType.Object

--------------------------------
Class: AkTrigger.AkAudioType.Object

--------------------------------
Class: AkSettings.Object
	byte MaxSimultaneousReverbVolumes;//[Offset: 0x28, Size: 0x1] 0x78dc03aa80
	FilePath WwiseProjectPath;//[Offset: 0x30, Size: 0x10] 0x78dc03ab00
	FilePath InitBankPath;//[Offset: 0x40, Size: 0x10] 0x78dc03ab80
	bool AutoLoadAkResources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78dc03ac00
	DirectoryPath WwiseSoundDataFolder;//[Offset: 0x58, Size: 0x10] 0x78dc03ac80
	bool bAutoConnectToWAAPI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78dc03ad00
	byte DefaultOcclusionCollisionChannel;//[Offset: 0x69, Size: 0x1] 0x78dc03ad80
	<PhysicalMaterial*,AkGeometrySurfacePropertiesToMap> AkGeometryMap;//[Offset: 0x70, Size: 0x50] 0x78dbf5af00
	bool SplitSwitchContainerMedia;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x78dc03af00
	bool SplitMediaPerFolder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x78dc03af80
	bool UseEventBasedPackaging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1] 0x78dc03b000
	bool EnableAutomaticAssetSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1] 0x78dc03b080
	FString CommandletCommitMessage;//[Offset: 0xc8, Size: 0x10] 0x78dc03b100
	<FString,FString> UnrealCultureToWwiseCulture;//[Offset: 0xd8, Size: 0x50] 0x78dbf5afc0
	bool AskedToUseNewAssetManagement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x78dc03b280
	bool bEnableMultiCoreRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1] 0x78dc03b300
	bool MigratedEnableMultiCoreRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 0x1] 0x78dc03b380
	bool FixupRedirectorsDuringMigration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b, Size: 0x1] 0x78dc03b400
	DirectoryPath WwiseWindowsInstallationPath;//[Offset: 0x130, Size: 0x10] 0x78dc03b480
	FilePath WwiseMacInstallationPath;//[Offset: 0x140, Size: 0x10] 0x78dc03b500

--------------------------------
Class: AkGeometrySurfacePropertiesToMap
	AkAcousticTexture* AcousticTexture;//[Offset: 0x0, Size: 0x28] 0x78dbdebe80
	float OcclusionValue;//[Offset: 0x28, Size: 0x4] 0x78dbdebf00

--------------------------------
Class: AkAndroidInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x30, Size: 0x68] 0x78dc01d600
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x98, Size: 0x28] 0x78dc01d680
	AkAndroidAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xc0, Size: 0x40] 0x78dc01b600
	void MigrateMultiCoreRendering(bool NewValue);// 0x501365c 0x78dc024e60

--------------------------------
Class: AkCommonInitializationSettingsWithSampleRate.AkCommonInitializationSettings
	uint32 SampleRate;//[Offset: 0x60, Size: 0x4] 0x78dbdec500

--------------------------------
Class: AkCommonInitializationSettings
	uint32 MaximumNumberOfMemoryPools;//[Offset: 0x0, Size: 0x4] 0x78dbdec580
	uint32 MaximumNumberOfPositioningPaths;//[Offset: 0x4, Size: 0x4] 0x78dbdec600
	uint32 CommandQueueSize;//[Offset: 0x8, Size: 0x4] 0x78dbdea580
	uint32 SamplesPerFrame;//[Offset: 0xc, Size: 0x4] 0x78dbdea600
	AkMainOutputSettings MainOutputSettings;//[Offset: 0x10, Size: 0x28] 0x78dbdea980
	float StreamingLookAheadRatio;//[Offset: 0x38, Size: 0x4] 0x78dbdeaa00
	uint16 NumberOfRefillsInVoice;//[Offset: 0x3c, Size: 0x2] 0x78dbdeaa80
	AkSpatialAudioSettings SpatialAudioSettings;//[Offset: 0x40, Size: 0x20] 0x78dbdeaf80

--------------------------------
Class: AkMainOutputSettings
	FString AudioDeviceShareset;//[Offset: 0x0, Size: 0x10] 0x78dbdea680
	uint32 DeviceID;//[Offset: 0x10, Size: 0x4] 0x78dbdea700
	enum PanningRule;//[Offset: 0x14, Size: 0x4] 0x78d3615d80
	enum ChannelConfigType;//[Offset: 0x18, Size: 0x4] 0x78d3615e20
	uint32 ChannelMask;//[Offset: 0x1c, Size: 0x4] 0x78dbdea880
	uint32 NumberOfChannels;//[Offset: 0x20, Size: 0x4] 0x78dbdea900

--------------------------------
Class: AkSpatialAudioSettings
	uint32 MaxSoundPropagationDepth;//[Offset: 0x0, Size: 0x4] 0x78dbdeab00
	uint32 DiffractionFlags;//[Offset: 0x4, Size: 0x4] 0x78dbdeab80
	float MovementThreshold;//[Offset: 0x8, Size: 0x4] 0x78dbdeac00
	uint32 NumberOfPrimaryRays;//[Offset: 0xc, Size: 0x4] 0x78dbdeac80
	uint32 ReflectionOrder;//[Offset: 0x10, Size: 0x4] 0x78dbdead00
	bool EnableDiffractionOnReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x78dbdead80
	bool EnableDirectPathDiffraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1] 0x78dbdeae00
	float MaximumPathLength;//[Offset: 0x18, Size: 0x4] 0x78dbdeae80
	bool EnableTransmission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78dbdeaf00

--------------------------------
Class: AkCommunicationSettingsWithSystemInitialization.AkCommunicationSettings
	bool InitializeSystemComms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78dbdec180

--------------------------------
Class: AkCommunicationSettings
	uint32 PoolSize;//[Offset: 0x0, Size: 0x4] 0x78dbdec280
	uint16 DiscoveryBroadcastPort;//[Offset: 0x4, Size: 0x2] 0x78dbdec300
	uint16 CommandPort;//[Offset: 0x6, Size: 0x2] 0x78dbdec380
	uint16 NotificationPort;//[Offset: 0x8, Size: 0x2] 0x78dbdec400
	FString NetworkName;//[Offset: 0x10, Size: 0x10] 0x78dbdec480

--------------------------------
Class: AkAndroidAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	uint32 AudioAPI;//[Offset: 0x38, Size: 0x4] 0x78dbde8900
	bool RoundFrameSizeToHardwareSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78dbde8980

--------------------------------
Class: AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	bool EnableMultiCoreRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x78dbde8a00

--------------------------------
Class: AkAdvancedInitializationSettings
	uint32 IO_MemorySize;//[Offset: 0x0, Size: 0x4] 0x78dbde8a80
	uint32 IO_Granularity;//[Offset: 0x4, Size: 0x4] 0x78dbde8b00
	float TargetAutoStreamBufferLength;//[Offset: 0x8, Size: 0x4] 0x78dbde8b80
	bool UseStreamCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78dbde8c00
	uint32 MaximumPinnedBytesInCache;//[Offset: 0x10, Size: 0x4] 0x78dbde8c80
	bool EnableGameSyncPreparation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x78dbde8d00
	uint32 ContinuousPlaybackLookAhead;//[Offset: 0x18, Size: 0x4] 0x78dbde8d80
	uint32 MonitorQueuePoolSize;//[Offset: 0x1c, Size: 0x4] 0x78dbde8e00
	uint32 MaximumHardwareTimeoutMs;//[Offset: 0x20, Size: 0x4] 0x78dbde8e80
	bool DebugOutOfRangeCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x78dbde8f00
	float DebugOutOfRangeLimit;//[Offset: 0x28, Size: 0x4] 0x78dbde8f80
	AkAdvancedSpatialAudioSettings SpatialAudioSettings;//[Offset: 0x2c, Size: 0x8] 0x78dbde9100

--------------------------------
Class: AkAdvancedSpatialAudioSettings
	float DiffractionShadowAttenuationFactor;//[Offset: 0x0, Size: 0x4] 0x78dbde9000
	float DiffractionShadowDegrees;//[Offset: 0x4, Size: 0x4] 0x78dbde9080

--------------------------------
Class: AkPlatformInfo.Object

--------------------------------
Class: AkAndroidPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkAssetDataWithMedia.AkAssetData.Object
	AkMediaAsset*[] MediaList;//[Offset: 0x78, Size: 0x10] 0x78dbff54c0

--------------------------------
Class: AkAssetDataSwitchContainerData.Object
	AkGroupValue* GroupValue;//[Offset: 0x28, Size: 0x28] 0x78dc01d180
	AkGroupValue* DefaultGroupValue;//[Offset: 0x50, Size: 0x8] 0x78dc01d200
	AkMediaAsset*[] MediaList;//[Offset: 0x58, Size: 0x10] 0x78dbff5380
	AkAssetDataSwitchContainerData*[] Children;//[Offset: 0x68, Size: 0x10] 0x78dbff5420

--------------------------------
Class: AkAssetDataSwitchContainer.AkAssetDataWithMedia.AkAssetData.Object
	AkAssetDataSwitchContainerData*[] SwitchContainers;//[Offset: 0x88, Size: 0x10] 0x78dbff52e0
	AkGroupValue* DefaultGroupValue;//[Offset: 0x98, Size: 0x8] 0x78dc01d100

--------------------------------
Class: AkAudioEventData.AkAssetDataSwitchContainer.AkAssetDataWithMedia.AkAssetData.Object
	float MaxAttenuationRadius;//[Offset: 0xf0, Size: 0x4] 0x78dc01cb80
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1] 0x78dc01cc00
	float MinimumDuration;//[Offset: 0xf8, Size: 0x4] 0x78dc01cc80
	float MaximumDuration;//[Offset: 0xfc, Size: 0x4] 0x78dc01cd00
	<FString,AkAssetDataSwitchContainer*> LocalizedMedia;//[Offset: 0x100, Size: 0x50] 0x78dbf5b2c0
	<AkAudioEvent*> PostedEvents;//[Offset: 0x150, Size: 0x50] 0x78dbff79a0
	<AkAuxBus*> UserDefinedSends;//[Offset: 0x1a0, Size: 0x50] 0x78dbff7a40
	<AkTrigger*> PostedTriggers;//[Offset: 0x1f0, Size: 0x50] 0x78dbff7ae0
	<AkGroupValue*> GroupValues;//[Offset: 0x240, Size: 0x50] 0x78dbff7b80

--------------------------------
Class: AkAudioInputComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	int PostAssociatedAudioInputEvent();// 0x5015318 0x78dc026fa0

--------------------------------
Class: AkCheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x4b8, Size: 0x1] 0x78dbff7040
	delegate CheckedStateDelegate;//[Offset: 0x4bc, Size: 0x10] 0x78dc031f00
	CheckBoxStyle WidgetStyle;//[Offset: 0x4d0, Size: 0x580] 0x78dc031f80
	byte HorizontalAlignment;//[Offset: 0xa50, Size: 0x1] 0x78dc032000
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa51, Size: 0x1] 0x78dc032080
	AkBoolPropertyToControl ThePropertyToControl;//[Offset: 0xa58, Size: 0x10] 0x78dc032100
	AkWwiseItemToControl ItemToControl;//[Offset: 0xa68, Size: 0x40] 0x78dc030080
	delegate AkOnCheckStateChanged;//[Offset: 0xaa8, Size: 0x10] 0x78dc030100
	delegate OnItemDropped;//[Offset: 0xab8, Size: 0x10] 0x78dc030180
	delegate OnPropertyDropped;//[Offset: 0xac8, Size: 0x10] 0x78dc030200
	void SetIsChecked(bool InIsChecked);// 0x5015f10 0x78dc0267c0
	void SetCheckedState(enum InCheckedState);// 0x5015e68 0x78dc0268a0
	void SetAkItemId(out const Guid ItemId);// 0x5015db4 0x78dc026980
	void SetAkBoolProperty(FString ItemProperty);// 0x5015ca8 0x78dc026a60
	bool IsPressed();// 0x501602c 0x78dc026b40
	bool IsChecked();// 0x5015ff4 0x78dc026c20
	enum GetCheckedState();// 0x5015fc0 0x78dc026d00
	FString GetAkProperty();// 0x5015c10 0x78dc026de0
	Guid GetAkItemId();// 0x5015d80 0x78dc026ec0

--------------------------------
Class: AkBoolPropertyToControl
	FString ItemProperty;//[Offset: 0x0, Size: 0x10] 0x78dbdec100

--------------------------------
Class: AkWwiseItemToControl
	AkWwiseObjectDetails ItemPicked;//[Offset: 0x0, Size: 0x30] 0x78dbdebd80
	FString ItemPath;//[Offset: 0x30, Size: 0x10] 0x78dbdebe00

--------------------------------
Class: AkWwiseObjectDetails
	FString ItemName;//[Offset: 0x0, Size: 0x10] 0x78dbdebc00
	FString ItemPath;//[Offset: 0x10, Size: 0x10] 0x78dbdebc80
	FString ItemId;//[Offset: 0x20, Size: 0x10] 0x78dbdebd00

--------------------------------
Class: AkFolder.AkAudioType.Object
	FString UnrealFolderPath;//[Offset: 0x40, Size: 0x10] 0x78dc031d80
	FString WwiseFolderPath;//[Offset: 0x50, Size: 0x10] 0x78dc031e00

--------------------------------
Class: AkGameplayStatics.BlueprintFunctionLibrary.Object
	static void UseReverbVolumes(bool inUseReverbVolumes, Actor* Actor);// 0x5020190 0x78dc02a7a0
	static void UseEarlyReflections(Actor* Actor, AkAuxBus* AuxBus, int order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x501ff04 0x78dc02a880
	static void UnloadBankByName(FString BankName);// 0x501ec58 0x78dc02a960
	static void UnloadBankAsync(AkAudioBank* Bank, out const delegate BankUnloadedCallback);// 0x501ed20 0x78dc02aa40
	static void UnloadBank(AkAudioBank* Bank, FString BankName, LatentActionInfo LatentInfo, Object* WorldContextObject);// 0x501ee20 0x78dc02ab20
	static void StopProfilerCapture();// 0x501e9d8 0x78dc02ac00
	static void StopOutputCapture();// 0x501eab4 0x78dc02ace0
	static void StopAllAmbientSounds(Object* WorldContextObject);// 0x501f4bc 0x78dc027400
	static void StopAll();// 0x501f6ac 0x78dc0274e0
	static void StopActor(Actor* Actor);// 0x501f6c0 0x78dc0275c0
	static void StartProfilerCapture(FString Filename);// 0x501e9ec 0x78dc0276a0
	static void StartOutputCapture(FString Filename);// 0x501eb90 0x78dc027780
	static void StartAllAmbientSounds(Object* WorldContextObject);// 0x501f554 0x78dc027860
	static AkComponent* SpawnAkComponentAtLocation(Object* WorldContextObject, AkAudioEvent* AkEvent, Vector Location, Rotator Orientation, bool AutoPost, FString EventName, bool AutoDestroy);// 0x5021364 0x78dc027940
	static void SetSwitch(AkSwitchValue* SwitchValue, Actor* Actor, FName SwitchGroup, FName SwitchState);// 0x50209f0 0x78dc027a20
	static void SetState(AkStateValue* StateValue, FName StateGroup, FName State);// 0x5020c90 0x78dc027b00
	static void SetSpeakerAngles(out const float[] SpeakerAngles, float HeightAngle, FString DeviceShareset);// 0x501f83c 0x78dc027be0
	static void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, Actor* Actor, FName RTPC);// 0x50211a0 0x78dc027cc0
	static void SetReflectionsOrder(int order, bool RefreshPaths);// 0x501fe1c 0x78dc027da0
	static void SetPanningRule(enum PanRule);// 0x501fb8c 0x78dc027e80
	static void SetOutputBusVolume(float BusVolume, Actor* Actor);// 0x501fd38 0x78dc027f60
	static void SetOcclusionScalingFactor(float ScalingFactor);// 0x501e938 0x78dc028040
	static void SetOcclusionRefreshInterval(float RefreshInterval, Actor* Actor);// 0x501f758 0x78dc028120
	static void SetMultiplePositions(AkComponent* GameObjectAkComponent, Transform[] Positions, enum MultiPositionType);// 0x5020808 0x78dc028200
	static void SetMultipleChannelMaskEmitterPositions(AkComponent* GameObjectAkComponent, AkChannelMask[] ChannelMasks, Transform[] Positions, enum MultiPositionType);// 0x5020278 0x78dc0282e0
	static void SetMultipleChannelEmitterPositions(AkComponent* GameObjectAkComponent, enum[] ChannelMasks, Transform[] Positions, enum MultiPositionType);// 0x5020540 0x78dc0283c0
	static void SetCurrentAudioCultureAsync(FString AudioCulture, out const delegate Completed);// 0x501e3f4 0x78dc0284a0
	static void SetCurrentAudioCulture(FString AudioCulture, LatentActionInfo LatentInfo, Object* WorldContextObject);// 0x501e550 0x78dc028580
	static void SetBusConfig(FString BusName, enum ChannelConfiguration);// 0x501fc24 0x78dc028660
	static void ResetRTPCValue(AkRtpc* RTPCValue, int InterpolationTimeMs, Actor* Actor, FName RTPC);// 0x5020dbc 0x78dc028740
	static void PostTrigger(AkTrigger* TriggerValue, Actor* Actor, FName trigger);// 0x5020b64 0x78dc028820
	static void PostEventByName(FString EventName, Actor* Actor, bool bStopWhenAttachedToDestroyed);// 0x5021d30 0x78dc028900
	static int PostEventAttached(AkAudioEvent* AkEvent, Actor* Actor, FName AttachPointName, bool bStopWhenAttachedToDestroyed, FString EventName);// 0x50227a0 0x78dc0289e0
	static void PostEventAtLocationByName(FString EventName, Vector Location, Rotator Orientation, Object* WorldContextObject);// 0x5021988 0x78dc028ac0
	static int PostEventAtLocation(AkAudioEvent* AkEvent, Vector Location, Rotator Orientation, FString EventName, Object* WorldContextObject);// 0x5021b3c 0x78dc028ba0
	static int PostEvent(AkAudioEvent* AkEvent, Actor* Actor, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool bStopWhenAttachedToDestroyed, FString EventName);// 0x5022424 0x78dc028c80
	static void PostAndWaitForEndOfEventAsync(AkAudioEvent* AkEvent, Actor* Actor, out int PlayingID, bool bStopWhenAttachedToDestroyed, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x5021e9c 0x78dc028d60
	static int PostAndWaitForEndOfEvent(AkAudioEvent* AkEvent, Actor* Actor, bool bStopWhenAttachedToDestroyed, out const AkExternalSourceInfo[] ExternalSources, FString EventName, LatentActionInfo LatentInfo);// 0x50220fc 0x78dc028e40
	static int Play2DSound(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString EventName);// 0x501dfc0 0x78dc028f20
	static void LoadInitBank();// 0x501efdc 0x78dc029000
	static void LoadBanks(out const AkAudioBank*[] SoundBanks, bool SynchronizeSoundBanks);// 0x501eff0 0x78dc025720
	static void LoadBankByName(FString BankName);// 0x501f124 0x78dc025800
	static void LoadBankAsync(AkAudioBank* Bank, out const delegate BankLoadedCallback);// 0x501f1ec 0x78dc0258e0
	static void LoadBank(AkAudioBank* Bank, FString BankName, LatentActionInfo LatentInfo, Object* WorldContextObject);// 0x501f2ec 0x78dc0259c0
	static bool IsGame(Object* WorldContextObject);// 0x5022a3c 0x78dc025aa0
	static bool IsEditor();// 0x5022ae8 0x78dc025b80
	static void GetSpeakerAngles(out float[] SpeakerAngles, out float HeightAngle, FString DeviceShareset);// 0x501f9dc 0x78dc025c60
	static void GetRTPCValue(AkRtpc* RTPCValue, int PlayingID, enum InputValueType, out float Value, out enum OutputValueType, Actor* Actor, FName RTPC);// 0x5020f34 0x78dc025d40
	static float GetOcclusionScalingFactor();// 0x501e914 0x78dc025e20
	static FString GetCurrentAudioCulture();// 0x501e840 0x78dc025f00
	static FString[] GetAvailableAudioCultures();// 0x501e6cc 0x78dc025fe0
	static Object* GetAkMediaAssetUserData(const AkMediaAsset* Instance, const class Object Type);// 0x501e214 0x78dc0260c0
	static AkComponent* GetAkComponent(SceneComponent* AttachToComponent, out bool ComponentCreated, FName AttachPointName, Vector Location, byte LocationType);// 0x5022b20 0x78dc0261a0
	static Object* GetAkAudioTypeUserData(const AkAudioType* Instance, const class Object Type);// 0x501e304 0x78dc026280
	static void ExecuteActionOnPlayingID(enum ActionType, int PlayingID, int TransitionDuration, enum FadeCurve);// 0x50215fc 0x78dc026360
	static void ExecuteActionOnEvent(AkAudioEvent* AkEvent, enum ActionType, Actor* Actor, int TransitionDuration, enum FadeCurve, int PlayingID);// 0x5021774 0x78dc026440
	static void ClearBanks();// 0x501f4a8 0x78dc026520
	static void CancelEventCallback(out const delegate PostEventCallback);// 0x501f5ec 0x78dc026600
	static void AddOutputCaptureMarker(FString MarkerText);// 0x501eac8 0x78dc0266e0

--------------------------------
Class: AkStateValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkChannelMask
	int ChannelMask;//[Offset: 0x0, Size: 0x4] 0x78dbde9980

--------------------------------
Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x28, Size: 0x8] 0x78dc036d00

--------------------------------
Class: AkEventCallbackInfo.AkCallbackInfo.Object
	int PlayingID;//[Offset: 0x30, Size: 0x4] 0x78dc036c00
	int EventId;//[Offset: 0x34, Size: 0x4] 0x78dc036c80

--------------------------------
Class: AkMIDIEventCallbackInfo.AkEventCallbackInfo.AkCallbackInfo.Object
	enum GetType();// 0x50260fc 0x78dc029ee0
	bool GetProgramChange(out AkMidiProgramChange AsProgramChange);// 0x5025ac0 0x78dc029fc0
	bool GetPitchBend(out AkMidiPitchBend AsPitchBend);// 0x5025d08 0x78dc02a0a0
	bool GetNoteOn(out AkMidiNoteOnOff AsNoteOn);// 0x5025f48 0x78dc02a180
	bool GetNoteOff(out AkMidiNoteOnOff AsNoteOff);// 0x5025e88 0x78dc02a260
	bool GetNoteAftertouch(out AkMidiNoteAftertouch AsNoteAftertouch);// 0x5025c48 0x78dc02a340
	bool GetGeneric(out AkMidiGeneric AsGeneric);// 0x5026008 0x78dc02a420
	bool GetChannelAftertouch(out AkMidiChannelAftertouch AsChannelAftertouch);// 0x5025b84 0x78dc02a500
	byte GetChannel();// 0x50260c8 0x78dc02a5e0
	bool GetCc(out AkMidiCc AsCc);// 0x5025dc8 0x78dc02a6c0

--------------------------------
Class: AkMidiProgramChange.AkMidiEventBase
	byte ProgramNum;//[Offset: 0x2, Size: 0x1] 0x78dbdea000

--------------------------------
Class: AkMidiEventBase
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78d3616280
	byte Chan;//[Offset: 0x1, Size: 0x1] 0x78dbdea100

--------------------------------
Class: AkMidiPitchBend.AkMidiEventBase
	byte ValueLsb;//[Offset: 0x2, Size: 0x1] 0x78dbde9d00
	byte ValueMsb;//[Offset: 0x3, Size: 0x1] 0x78dbde9d80
	int FullValue;//[Offset: 0x4, Size: 0x4] 0x78dbde9e00

--------------------------------
Class: AkMidiNoteOnOff.AkMidiEventBase
	byte Note;//[Offset: 0x2, Size: 0x1] 0x78dbde9b00
	byte Velocity;//[Offset: 0x3, Size: 0x1] 0x78dbde9b80

--------------------------------
Class: AkMidiNoteAftertouch.AkMidiEventBase
	byte Note;//[Offset: 0x2, Size: 0x1] 0x78dbde9e80
	byte Value;//[Offset: 0x3, Size: 0x1] 0x78dbde9f00

--------------------------------
Class: AkMidiGeneric.AkMidiEventBase
	byte Param1;//[Offset: 0x2, Size: 0x1] 0x78dbde9a00
	byte Param2;//[Offset: 0x3, Size: 0x1] 0x78dbde9a80

--------------------------------
Class: AkMidiChannelAftertouch.AkMidiEventBase
	byte Value;//[Offset: 0x2, Size: 0x1] 0x78dbde9f80

--------------------------------
Class: AkMidiCc.AkMidiEventBase
	enum Cc;//[Offset: 0x2, Size: 0x1] 0x78d36161e0
	byte Value;//[Offset: 0x3, Size: 0x1] 0x78dbde9c80

--------------------------------
Class: AkMarkerCallbackInfo.AkEventCallbackInfo.AkCallbackInfo.Object
	int Identifier;//[Offset: 0x38, Size: 0x4] 0x78dc038280
	int Position;//[Offset: 0x3c, Size: 0x4] 0x78dc038300
	FString Label;//[Offset: 0x40, Size: 0x10] 0x78dc038380

--------------------------------
Class: AkDurationCallbackInfo.AkEventCallbackInfo.AkCallbackInfo.Object
	float Duration;//[Offset: 0x38, Size: 0x4] 0x78dc038000
	float EstimatedDuration;//[Offset: 0x3c, Size: 0x4] 0x78dc038080
	int AudioNodeID;//[Offset: 0x40, Size: 0x4] 0x78dc038100
	int MediaID;//[Offset: 0x44, Size: 0x4] 0x78dc038180
	bool bStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78dc038200

--------------------------------
Class: AkMusicSyncCallbackInfo.AkCallbackInfo.Object
	int PlayingID;//[Offset: 0x30, Size: 0x4] 0x78dc037e00
	AkSegmentInfo SegmentInfo;//[Offset: 0x34, Size: 0x24] 0x78dc037e80
	enum MusicSyncType;//[Offset: 0x58, Size: 0x1] 0x78dbff8760
	FString UserCueName;//[Offset: 0x60, Size: 0x10] 0x78dc037f80

--------------------------------
Class: AkSegmentInfo
	int CurrentPosition;//[Offset: 0x0, Size: 0x4] 0x78dbdea180
	int PreEntryDuration;//[Offset: 0x4, Size: 0x4] 0x78dbdea200
	int ActiveDuration;//[Offset: 0x8, Size: 0x4] 0x78dbdea280
	int PostExitDuration;//[Offset: 0xc, Size: 0x4] 0x78dbdea300
	int RemainingLookAheadTime;//[Offset: 0x10, Size: 0x4] 0x78dbdea380
	float BeatDuration;//[Offset: 0x14, Size: 0x4] 0x78dbdea400
	float BarDuration;//[Offset: 0x18, Size: 0x4] 0x78dbdea480
	float GridDuration;//[Offset: 0x1c, Size: 0x4] 0x78dbdea500
	float GridOffset;//[Offset: 0x20, Size: 0x4] 0x78dbde8480

--------------------------------
Class: AkGeometryComponent.SceneComponent.ActorComponent.Object
	enum MeshType;//[Offset: 0x201, Size: 0x1] 0x78dbff86c0
	int LOD;//[Offset: 0x204, Size: 0x4] 0x78dc037980
	float WeldingThreshold;//[Offset: 0x208, Size: 0x4] 0x78dc037a00
	<MaterialInterface*,AkGeometrySurfaceOverride> StaticMeshSurfaceOverride;//[Offset: 0x210, Size: 0x50] 0x78dbf5b080
	AkGeometrySurfaceOverride CollisionMeshSurfaceOverride;//[Offset: 0x260, Size: 0x10] 0x78dc037b80
	bool bEnableDiffraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1] 0x78dc037c00
	bool bEnableDiffractionOnBoundaryEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x270, Size: 0x1] 0x78dc037c80
	Actor* AssociatedRoom;//[Offset: 0x278, Size: 0x8] 0x78dc037d00
	AkGeometryData GeometryData;//[Offset: 0x290, Size: 0x50] 0x78dc037d80
	void UpdateGeometry();// 0x50270c4 0x78dc029c40
	void RemoveGeometry();// 0x50270d8 0x78dc029d20
	void ConvertMesh();// 0x50270ec 0x78dc029e00

--------------------------------
Class: AkGeometrySurfaceOverride
	AkAcousticTexture* AcousticTexture;//[Offset: 0x0, Size: 0x8] 0x78dbde9800
	bool bEnableOcclusionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78dbde9880
	float OcclusionValue;//[Offset: 0xc, Size: 0x4] 0x78dbde9900

--------------------------------
Class: AkGeometryData
	Vector[] Vertices;//[Offset: 0x0, Size: 0x10] 0x78d3615ec0
	AkAcousticSurface[] Surfaces;//[Offset: 0x10, Size: 0x10] 0x78d3615f60
	AkTriangle[] Triangles;//[Offset: 0x20, Size: 0x10] 0x78d3616000
	PhysicalMaterial*[] ToOverrideAcousticTexture;//[Offset: 0x30, Size: 0x10] 0x78d36160a0
	PhysicalMaterial*[] ToOverrideOcclusion;//[Offset: 0x40, Size: 0x10] 0x78d3616140

--------------------------------
Class: AkAcousticSurface
	uint32 Texture;//[Offset: 0x0, Size: 0x4] 0x78dbdeb380
	float Occlusion;//[Offset: 0x4, Size: 0x4] 0x78dbdeb400
	FString Name;//[Offset: 0x8, Size: 0x10] 0x78dbdeb480

--------------------------------
Class: AkTriangle
	uint16 Point0;//[Offset: 0x0, Size: 0x2] 0x78dbdeb580
	uint16 Point1;//[Offset: 0x2, Size: 0x2] 0x78dbde9500
	uint16 Point2;//[Offset: 0x4, Size: 0x2] 0x78dbde9580
	uint16 Surface;//[Offset: 0x6, Size: 0x2] 0x78dbde9600

--------------------------------
Class: AkHololensInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x30, Size: 0x68] 0x78dc037600
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x98, Size: 0x28] 0x78dc037680
	AkHololensAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xc0, Size: 0x40] 0x78dc037700
	void MigrateMultiCoreRendering(bool NewValue);// 0x5027948 0x78dc029b60

--------------------------------
Class: AkHololensAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	uint32 AudioAPI;//[Offset: 0x38, Size: 0x4] 0x78dbdeb180
	bool GlobalFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78dbdeb200
	bool UseHeadMountedDisplayAudioDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x78dbdeb280

--------------------------------
Class: AkHololensPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkInitBankAssetData.AkAssetDataWithMedia.AkAssetData.Object
	AkPluginInfo[] PluginInfos;//[Offset: 0x88, Size: 0x10] 0x78dbff8580

--------------------------------
Class: AkPluginInfo
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78dbdeb000
	uint32 PluginID;//[Offset: 0x10, Size: 0x4] 0x78dbdeb080
	FString DLL;//[Offset: 0x18, Size: 0x10] 0x78dbdeb100

--------------------------------
Class: AkInitBank.AkAssetBase.AkAudioType.Object
	FString[] AvailableAudioCultures;//[Offset: 0x50, Size: 0x10] 0x78dbff84e0
	FString DefaultLanguage;//[Offset: 0x60, Size: 0x10] 0x78dc037500

--------------------------------
Class: AkIOSInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x30, Size: 0x68] 0x78dc039380
	AkAudioSession AudioSession;//[Offset: 0x98, Size: 0xc] 0x78dc039400
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0xa8, Size: 0x28] 0x78dc039480
	AkAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xd0, Size: 0x34] 0x78dc037400

--------------------------------
Class: AkAudioSession
	enum AudioSessionCategory;//[Offset: 0x0, Size: 0x4] 0x78d36163c0
	uint32 AudioSessionCategoryOptions;//[Offset: 0x4, Size: 0x4] 0x78dbde8800
	enum AudioSessionMode;//[Offset: 0x8, Size: 0x4] 0x78d3616460

--------------------------------
Class: AkIOSPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkItemBoolPropertiesConv.BlueprintFunctionLibrary.Object
	static FText Conv_FAkBoolPropertyToControlToText(out const AkBoolPropertyToControl INAkBoolPropertyToControl);// 0x502f1c0 0x78dc0299a0
	static FString Conv_FAkBoolPropertyToControlToString(out const AkBoolPropertyToControl INAkBoolPropertyToControl);// 0x502f320 0x78dc029a80

--------------------------------
Class: AkItemBoolProperties.Widget.Visual.Object
	delegate OnSelectionChanged;//[Offset: 0x108, Size: 0x10] 0x78dc038f00
	delegate OnPropertyDragged;//[Offset: 0x118, Size: 0x10] 0x78dc038f80
	void SetSearchText(FString newText);// 0x502f6d0 0x78dc029700
	FString GetSelectedProperty();// 0x502f87c 0x78dc0297e0
	FString GetSearchText();// 0x502f7a8 0x78dc0298c0

--------------------------------
Class: AkItemPropertiesConv.BlueprintFunctionLibrary.Object
	static FText Conv_FAkPropertyToControlToText(out const AkPropertyToControl INAkPropertyToControl);// 0x502fd80 0x78dc029540
	static FString Conv_FAkPropertyToControlToString(out const AkPropertyToControl INAkPropertyToControl);// 0x502fee0 0x78dc029620

--------------------------------
Class: AkPropertyToControl
	FString ItemProperty;//[Offset: 0x0, Size: 0x10] 0x78dbdec080

--------------------------------
Class: AkItemProperties.Widget.Visual.Object
	delegate OnSelectionChanged;//[Offset: 0x108, Size: 0x10] 0x78dc038a80
	delegate OnPropertyDragged;//[Offset: 0x118, Size: 0x10] 0x78dc038b00
	void SetSearchText(FString newText);// 0x5030290 0x78dc0292a0
	FString GetSelectedProperty();// 0x503043c 0x78dc029380
	FString GetSearchText();// 0x5030368 0x78dc029460

--------------------------------
Class: AkLateReverbComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1] 0x78dc038700
	AkAuxBus* AuxBus;//[Offset: 0x208, Size: 0x8] 0x78dc038780
	FString AuxBusName;//[Offset: 0x210, Size: 0x10] 0x78dc038800
	float SendLevel;//[Offset: 0x220, Size: 0x4] 0x78dc038880
	float FadeRate;//[Offset: 0x224, Size: 0x4] 0x78dc038900
	float Priority;//[Offset: 0x228, Size: 0x4] 0x78dc038980
	AkLateReverbComponent* NextLowerPriorityComponent;//[Offset: 0x230, Size: 0x8] 0x78dc038a00

--------------------------------
Class: AkLinuxInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x30, Size: 0x68] 0x78dc038500
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x98, Size: 0x28] 0x78dc038580
	AkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;//[Offset: 0xc0, Size: 0x38] 0x78dc038600
	void MigrateMultiCoreRendering(bool NewValue);// 0x5030a84 0x78dc0291c0

--------------------------------
Class: AkLinuxPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkLuminInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68] 0x78dc03a400
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28] 0x78dc03a480
	AkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;//[Offset: 0xb8, Size: 0x38] 0x78dc03a500
	void MigrateMultiCoreRendering(bool NewValue);// 0x5030e70 0x78dc0290e0

--------------------------------
Class: AkLuminPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkMacInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x30, Size: 0x68] 0x78dc03a200
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x98, Size: 0x28] 0x78dc03a280
	AkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;//[Offset: 0xc0, Size: 0x38] 0x78dc03a300
	void MigrateMultiCoreRendering(bool NewValue);// 0x503125c 0x78dc02c9c0

--------------------------------
Class: AkMacPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkLocalizedMediaAsset.AkMediaAsset.Object

--------------------------------
Class: AkPlatformInitialisationSettingsBase.Interface.Object

--------------------------------
Class: AkPS4InitializationSettings.Object
	AkCommonInitializationSettings CommonSettings;//[Offset: 0x30, Size: 0x60] 0x78dc039b00
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28] 0x78dc039b80
	AkPS4AdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb8, Size: 0x40] 0x78dc039c00
	void MigrateMultiCoreRendering(bool NewValue);// 0x50321f4 0x78dc02c8e0

--------------------------------
Class: AkPS4AdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	uint32 ACPBatchBufferSize;//[Offset: 0x38, Size: 0x4] 0x78dbdebf80
	bool UseHardwareCodecLowLatencyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78dbdec000

--------------------------------
Class: AkPS4PlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkReverbVolume.Volume.Brush.Actor.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1] 0x78dc039780
	AkAuxBus* AuxBus;//[Offset: 0x260, Size: 0x8] 0x78dc039800
	FString AuxBusName;//[Offset: 0x268, Size: 0x10] 0x78dc039880
	float SendLevel;//[Offset: 0x278, Size: 0x4] 0x78dc039900
	float FadeRate;//[Offset: 0x27c, Size: 0x4] 0x78dc039980
	float Priority;//[Offset: 0x280, Size: 0x4] 0x78dc039a00
	AkLateReverbComponent* LateReverbComponent;//[Offset: 0x288, Size: 0x8] 0x78dc039a80

--------------------------------
Class: AkRoomComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x222, Size: 0x1] 0x78dc03b580
	AkRoomComponent* NextLowerPriorityComponent;//[Offset: 0x228, Size: 0x8] 0x78dc039500
	float Priority;//[Offset: 0x230, Size: 0x4] 0x78dc039580
	float WallOcclusion;//[Offset: 0x234, Size: 0x4] 0x78dc039600
	float AuxSendLevel;//[Offset: 0x238, Size: 0x4] 0x78dc039680
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1] 0x78dc039700

--------------------------------
Class: AkSettingsPerUser.Object
	DirectoryPath WwiseWindowsInstallationPath;//[Offset: 0x28, Size: 0x10] 0x78dc03a600
	FilePath WwiseMacInstallationPath;//[Offset: 0x38, Size: 0x10] 0x78dc03a680
	bool EnableAutomaticAssetSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78dc03a700
	FString WaapiIPAddress;//[Offset: 0x50, Size: 0x10] 0x78dc03a780
	uint32 WaapiPort;//[Offset: 0x60, Size: 0x4] 0x78dc03a800
	bool bAutoConnectToWAAPI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78dc03a880
	bool AutoSyncSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1] 0x78dc03a900
	bool SuppressWwiseProjectPathWarnings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1] 0x78dc03a980
	bool SoundDataGenerationSkipLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1] 0x78dc03aa00

--------------------------------
Class: AkSlider.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4] 0x78dc03ba00
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10] 0x78dc03ba80
	SliderStyle WidgetStyle;//[Offset: 0x120, Size: 0x340] 0x78dc03bb00
	byte Orientation;//[Offset: 0x460, Size: 0x1] 0x78dc03bb80
	LinearColor SliderBarColor;//[Offset: 0x464, Size: 0x10] 0x78dc03bc00
	LinearColor SliderHandleColor;//[Offset: 0x474, Size: 0x10] 0x78dc03bc80
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1] 0x78dc03bd00
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x485, Size: 0x1] 0x78dc03bd80
	float StepSize;//[Offset: 0x488, Size: 0x4] 0x78dc03be00
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1] 0x78dc03be80
	AkPropertyToControl ThePropertyToControl;//[Offset: 0x490, Size: 0x10] 0x78dc03bf00
	AkWwiseItemToControl ItemToControl;//[Offset: 0x4a0, Size: 0x40] 0x78dc03bf80
	delegate OnValueChanged;//[Offset: 0x4e0, Size: 0x10] 0x78dc03c000
	delegate OnItemDropped;//[Offset: 0x4f0, Size: 0x10] 0x78dc03c080
	delegate OnPropertyDropped;//[Offset: 0x500, Size: 0x10] 0x78dc03c100
	void SetValue(float InValue);// 0x5033960 0x78dc02bf40
	void SetStepSize(float InValue);// 0x5033758 0x78dc02c020
	void SetSliderHandleColor(LinearColor InValue);// 0x5033608 0x78dc02c100
	void SetSliderBarColor(LinearColor InValue);// 0x50336b0 0x78dc02c1e0
	void SetLocked(bool InValue);// 0x5033800 0x78dc02c2c0
	void SetIndentHandle(bool InValue);// 0x50338b0 0x78dc02c3a0
	void SetAkSliderItemProperty(FString ItemProperty);// 0x5033448 0x78dc02c480
	void SetAkSliderItemId(out const Guid ItemId);// 0x5033554 0x78dc02c560
	float GetValue();// 0x5033a08 0x78dc02c640
	FString GetAkSliderItemProperty();// 0x50333b0 0x78dc02c720
	Guid GetAkSliderItemId();// 0x5033520 0x78dc02c800

--------------------------------
Class: AkSpatialAudioVolume.Volume.Brush.Actor.Object
	AkSurfaceReflectorSetComponent* SurfaceReflectorSet;//[Offset: 0x258, Size: 0x8] 0x78dc03b880
	AkLateReverbComponent* LateReverb;//[Offset: 0x260, Size: 0x8] 0x78dc03b900
	AkRoomComponent* Room;//[Offset: 0x268, Size: 0x8] 0x78dc03b980

--------------------------------
Class: AkSurfaceReflectorSetComponent.SceneComponent.ActorComponent.Object
	bool bEnableSurfaceReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1] 0x78dc03d480
	AkPoly[] AcousticPolys;//[Offset: 0x208, Size: 0x10] 0x78dbff83a0
	bool bEnableDiffraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1] 0x78dc03d580
	bool bEnableDiffractionOnBoundaryEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 0x1] 0x78dc03d600
	Actor* AssociatedRoom;//[Offset: 0x220, Size: 0x8] 0x78dc03d680
	void UpdateSurfaceReflectorSet();// 0x5039450 0x78dc02bca0
	void SendSurfaceReflectorSet();// 0x5039478 0x78dc02bd80
	void RemoveSurfaceReflectorSet();// 0x5039464 0x78dc02be60

--------------------------------
Class: AkPoly
	AkAcousticTexture* Texture;//[Offset: 0x0, Size: 0x8] 0x78dbdeba80
	float Occlusion;//[Offset: 0x8, Size: 0x4] 0x78dbdebb00
	bool EnableSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78dbdebb80

--------------------------------
Class: AkSpotReflector.Actor.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x220, Size: 0x8] 0x78dc03b600
	FString EarlyReflectionAuxBusName;//[Offset: 0x228, Size: 0x10] 0x78dc03b680
	AkAcousticTexture* AcousticTexture;//[Offset: 0x238, Size: 0x8] 0x78dc03b700
	float DistanceScalingFactor;//[Offset: 0x240, Size: 0x4] 0x78dc03b780
	float Level;//[Offset: 0x244, Size: 0x4] 0x78dc03b800

--------------------------------
Class: AkSwitchInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x30, Size: 0x68] 0x78dc03d280
	AkCommunicationSettingsWithCommSelection CommunicationSettings;//[Offset: 0x98, Size: 0x28] 0x78dc03d300
	AkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;//[Offset: 0xc0, Size: 0x38] 0x78dc03d380
	void MigrateMultiCoreRendering(bool NewValue);// 0x503983c 0x78dc02bbc0

--------------------------------
Class: AkCommunicationSettingsWithCommSelection.AkCommunicationSettings
	enum CommunicationSystem;//[Offset: 0x20, Size: 0x4] 0x78d3615ce0

--------------------------------
Class: AkSwitchPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkTVOSInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x30, Size: 0x68] 0x78dc03d080
	AkAudioSession AudioSession;//[Offset: 0x98, Size: 0xc] 0x78dc03d100
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0xa8, Size: 0x28] 0x78dc03d180
	AkAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xd0, Size: 0x34] 0x78dc03d200

--------------------------------
Class: AkTVOSPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkWaapiCalls.BlueprintFunctionLibrary.Object
	static AKWaapiJsonObject Unsubscribe(out const AkWaapiSubscriptionId SubscriptionId, out bool UnsubscriptionDone);// 0x503a6c4 0x78dc02b3e0
	static AKWaapiJsonObject SubscribeToWaapi(out const AkWaapiUri WaapiUri, out const AKWaapiJsonObject WaapiOptions, out const delegate callback, out AkWaapiSubscriptionId SubscriptionId, out bool SubscriptionDone);// 0x503a910 0x78dc02b4c0
	static void SetSubscriptionID(out const AkWaapiSubscriptionId Subscription, int ID);// 0x503b558 0x78dc02b5a0
	static bool RegisterWaapiProjectLoadedCallback(out const delegate callback);// 0x503b3d0 0x78dc02b680
	static bool RegisterWaapiConnectionLostCallback(out const delegate callback);// 0x503b2fc 0x78dc02b760
	static int GetSubscriptionID(out const AkWaapiSubscriptionId Subscription);// 0x503b4a4 0x78dc02b840
	static FText Conv_FAkWaapiSubscriptionIdToText(out const AkWaapiSubscriptionId INAkWaapiSubscriptionId);// 0x503a47c 0x78dc02b920
	static FString Conv_FAkWaapiSubscriptionIdToString(out const AkWaapiSubscriptionId INAkWaapiSubscriptionId);// 0x503a5a0 0x78dc02ba00
	static AKWaapiJsonObject CallWaapi(out const AkWaapiUri WaapiUri, out const AKWaapiJsonObject WaapiArgs, out const AKWaapiJsonObject WaapiOptions);// 0x503addc 0x78dc02bae0

--------------------------------
Class: AkWaapiSubscriptionId

--------------------------------
Class: AKWaapiJsonObject

--------------------------------
Class: AkWaapiUri
	FString Uri;//[Offset: 0x0, Size: 0x10] 0x78dbdeb980

--------------------------------
Class: SAkWaapiFieldNamesConv.BlueprintFunctionLibrary.Object
	static FText Conv_FAkWaapiFieldNamesToText(out const AkWaapiFieldNames INAkWaapiFieldNames);// 0x503bc28 0x78dc02b220
	static FString Conv_FAkWaapiFieldNamesToString(out const AkWaapiFieldNames INAkWaapiFieldNames);// 0x503bd88 0x78dc02b300

--------------------------------
Class: AkWaapiFieldNames
	FString FieldName;//[Offset: 0x0, Size: 0x10] 0x78dbdeba00

--------------------------------
Class: AkWaapiJsonManager.BlueprintFunctionLibrary.Object
	static AKWaapiJsonObject SetStringField(out const AkWaapiFieldNames FieldName, FString FieldValue, AKWaapiJsonObject Target);// 0x503fb38 0x78dc02dfa0
	static AKWaapiJsonObject SetObjectField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject FieldValue, AKWaapiJsonObject Target);// 0x503eae8 0x78dc02e080
	static AKWaapiJsonObject SetNumberField(out const AkWaapiFieldNames FieldName, float FieldValue, AKWaapiJsonObject Target);// 0x503f1a0 0x78dc02e160
	static AKWaapiJsonObject SetBoolField(out const AkWaapiFieldNames FieldName, bool FieldValue, AKWaapiJsonObject Target);// 0x503f668 0x78dc02e240
	static AKWaapiJsonObject SetArrayStringFields(out const AkWaapiFieldNames FieldName, out const FString[] FieldStringValues, AKWaapiJsonObject Target);// 0x503e56c 0x78dc02e320
	static AKWaapiJsonObject SetArrayObjectFields(out const AkWaapiFieldNames FieldName, out const AKWaapiJsonObject[] FieldObjectValues, AKWaapiJsonObject Target);// 0x503df58 0x78dc02e400
	static FString GetStringField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x503dbbc 0x78dc02e4e0
	static AKWaapiJsonObject GetObjectField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x503cd8c 0x78dc02e5c0
	static float GetNumberField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x503d548 0x78dc02e6a0
	static int GetIntegerField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x503d210 0x78dc02adc0
	static bool GetBoolField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x503d880 0x78dc02aea0
	static AKWaapiJsonObject[] GetArrayField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x503c7e8 0x78dc02af80
	static FText Conv_FAKWaapiJsonObjectToText(AKWaapiJsonObject INAKWaapiJsonObject);// 0x503c1c4 0x78dc02b060
	static FString Conv_FAKWaapiJsonObjectToString(AKWaapiJsonObject INAKWaapiJsonObject);// 0x503c4dc 0x78dc02b140

--------------------------------
Class: AkWaapiUriConv.BlueprintFunctionLibrary.Object
	static FText Conv_FAkWaapiUriToText(out const AkWaapiUri INAkWaapiUri);// 0x50406cc 0x78dc02dde0
	static FString Conv_FAkWaapiUriToString(out const AkWaapiUri INAkWaapiUri);// 0x504082c 0x78dc02dec0

--------------------------------
Class: AkWindowsInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x30, Size: 0x68] 0x78dc03e900
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x98, Size: 0x28] 0x78dc03e980
	AkWindowsAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xc0, Size: 0x40] 0x78dc03ea00
	void MigrateMultiCoreRendering(bool NewValue);// 0x5040d68 0x78dc02dd00

--------------------------------
Class: AkWindowsAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	uint32 AudioAPI;//[Offset: 0x38, Size: 0x4] 0x78dbdeb800
	bool GlobalFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78dbdeb880
	bool UseHeadMountedDisplayAudioDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x78dbdeb900

--------------------------------
Class: AkWin32PlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkWin64PlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkWindowsPlatformInfo.AkWin64PlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkWwiseTree.Widget.Visual.Object
	delegate OnSelectionChanged;//[Offset: 0x108, Size: 0x10] 0x78dc03ff00
	delegate OnItemDragged;//[Offset: 0x118, Size: 0x10] 0x78dc03ff80
	void SetSearchText(FString newText);// 0x50440ac 0x78dc02da60
	AkWwiseObjectDetails GetSelectedItem();// 0x5044258 0x78dc02db40
	FString GetSearchText();// 0x5044184 0x78dc02dc20

--------------------------------
Class: AkWwiseTreeSelector.Widget.Visual.Object
	delegate OnSelectionChanged;//[Offset: 0x108, Size: 0x10] 0x78dc03fe00
	delegate OnItemDragged;//[Offset: 0x118, Size: 0x10] 0x78dc03fe80

--------------------------------
Class: AkXboxOneInitializationSettings.Object
	AkCommonInitializationSettings CommonSettings;//[Offset: 0x30, Size: 0x60] 0x78dc03fb80
	AkXboxOneApuHeapInitializationSettings ApuHeapSettings;//[Offset: 0x90, Size: 0x8] 0x78dc03fc00
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x98, Size: 0x28] 0x78dc03fc80
	AkXboxOneAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xc0, Size: 0x3c] 0x78dc03fd00
	void MigrateMultiCoreRendering(bool NewValue);// 0x5044944 0x78dc02d980

--------------------------------
Class: AkXboxOneApuHeapInitializationSettings
	uint32 CachedSize;//[Offset: 0x0, Size: 0x4] 0x78dbdeb700
	uint32 NonCachedSize;//[Offset: 0x4, Size: 0x4] 0x78dbdeb780

--------------------------------
Class: AkXboxOneAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	uint16 MaximumNumberOfXMAVoices;//[Offset: 0x36, Size: 0x2] 0x78dbdeb600
	bool UseHardwareCodecLowLatencyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78dbdeb680

--------------------------------
Class: AkXboxOnePlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: InterpTrackAkAudioEvent.InterpTrackVectorBase.InterpTrack.Object
	AkAudioEventTrackKey[] Events;//[Offset: 0x90, Size: 0x10] 0x78dbff7fe0
	bool bContinueEventOnMatineeEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78dc090d80

--------------------------------
Class: AkAudioEventTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78dbded580
	AkAudioEvent* AkAudioEvent;//[Offset: 0x8, Size: 0x8] 0x78dbded600
	FString EventName;//[Offset: 0x10, Size: 0x10] 0x78dbded680

--------------------------------
Class: InterpTrackAkAudioRTPC.InterpTrackFloatBase.InterpTrack.Object
	FString Param;//[Offset: 0x90, Size: 0x10] 0x78dc090a80
	bool bPlayOnReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78dc090b00
	bool bContinueRTPCOnMatineeEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x78dc090b80

--------------------------------
Class: InterpTrackInstAkAudioEvent.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x78dc090a00

--------------------------------
Class: InterpTrackInstAkAudioRTPC.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x78dc090980

--------------------------------
Class: MovieSceneBuiltInEasingFunction.Object
	enum Type;//[Offset: 0x30, Size: 0x1] 0x78d715f380

--------------------------------
Class: MovieSceneAkAudioEventSection.MovieSceneSection.MovieSceneSignedObject.Object
	AkAudioEvent* Event;//[Offset: 0x120, Size: 0x8] 0x78dc091680
	bool RetriggerEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x78dc091700
	int ScrubTailLengthMs;//[Offset: 0x12c, Size: 0x4] 0x78dc091780
	bool StopAtSectionEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x78dc091800
	FString EventName;//[Offset: 0x138, Size: 0x10] 0x78dc091880
	float MaxSourceDuration;//[Offset: 0x168, Size: 0x4] 0x78dc091900
	FString MaxDurationSourceID;//[Offset: 0x170, Size: 0x10] 0x78dc091980

--------------------------------
Class: MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10] 0x78dbff7d60
	bool bIsAMasterTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x78dc091400

--------------------------------
Class: MovieSceneAkAudioEventTrack.MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneAkAudioRTPCSection.MovieSceneSection.MovieSceneSignedObject.Object
	AkRtpc* RTPC;//[Offset: 0xe0, Size: 0x8] 0x78dc091100
	FString Name;//[Offset: 0xe8, Size: 0x10] 0x78dc091180
	RichCurve FloatCurve;//[Offset: 0xf8, Size: 0x80] 0x78dc091200
	MovieSceneFloatChannelSerializationHelper FloatChannelSerializationHelper;//[Offset: 0x178, Size: 0x30] 0x78dc091280
	MovieSceneFloatChannel RTPCChannel;//[Offset: 0x1a8, Size: 0xa0] 0x78dc091300

--------------------------------
Class: MovieSceneFloatChannelSerializationHelper
	byte PreInfinityExtrap;//[Offset: 0x0, Size: 0x1] 0x78dbdecc00
	byte PostInfinityExtrap;//[Offset: 0x1, Size: 0x1] 0x78dbdecc80
	int[] Times;//[Offset: 0x8, Size: 0x10] 0x78d3615b00
	MovieSceneFloatValueSerializationHelper[] Values;//[Offset: 0x18, Size: 0x10] 0x78d3615ba0
	float DefaultValue;//[Offset: 0x28, Size: 0x4] 0x78dbded280
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78dbded300

--------------------------------
Class: MovieSceneFloatValueSerializationHelper
	float Value;//[Offset: 0x0, Size: 0x4] 0x78dbdecd80
	byte InterpMode;//[Offset: 0x4, Size: 0x1] 0x78dbdece00
	byte TangentMode;//[Offset: 0x5, Size: 0x1] 0x78dbdece80
	MovieSceneTangentDataSerializationHelper Tangent;//[Offset: 0x8, Size: 0x14] 0x78dbded180

--------------------------------
Class: MovieSceneTangentDataSerializationHelper
	float ArriveTangent;//[Offset: 0x0, Size: 0x4] 0x78dbdecf00
	float LeaveTangent;//[Offset: 0x4, Size: 0x4] 0x78dbdecf80
	byte TangentWeightMode;//[Offset: 0x8, Size: 0x1] 0x78dbded000
	float ArriveTangentWeight;//[Offset: 0xc, Size: 0x4] 0x78dbded080
	float LeaveTangentWeight;//[Offset: 0x10, Size: 0x4] 0x78dbded100

--------------------------------
Class: MovieSceneFloatChannel.MovieSceneChannel
	byte PreInfinityExtrap;//[Offset: 0x8, Size: 0x1] 0x78dbe62580
	byte PostInfinityExtrap;//[Offset: 0x9, Size: 0x1] 0x78dbe62600
	FrameNumber[] Times;//[Offset: 0x10, Size: 0x10] 0x78dbe53d00
	MovieSceneFloatValue[] Values;//[Offset: 0x20, Size: 0x10] 0x78dbe53da0
	float DefaultValue;//[Offset: 0x30, Size: 0x4] 0x78dbe62c80
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x78dbe62d00
	MovieSceneKeyHandleMap KeyHandles;//[Offset: 0x38, Size: 0x60] 0x78dbe62d80
	FrameRate TickResolution;//[Offset: 0x98, Size: 0x8] 0x78dbe62e00

--------------------------------
Class: MovieSceneChannel

--------------------------------
Class: MovieSceneFloatValue
	float Value;//[Offset: 0x0, Size: 0x4] 0x78dbe62700
	MovieSceneTangentData Tangent;//[Offset: 0x4, Size: 0x14] 0x78dbe62a00
	byte InterpMode;//[Offset: 0x18, Size: 0x1] 0x78dbe62a80
	byte TangentMode;//[Offset: 0x19, Size: 0x1] 0x78dbe62b00
	byte PaddingByte;//[Offset: 0x1a, Size: 0x1] 0x78dbe62b80

--------------------------------
Class: MovieSceneTangentData
	float ArriveTangent;//[Offset: 0x0, Size: 0x4] 0x78dbe62780
	float LeaveTangent;//[Offset: 0x4, Size: 0x4] 0x78dbe62800
	float ArriveTangentWeight;//[Offset: 0x8, Size: 0x4] 0x78dbe62880
	float LeaveTangentWeight;//[Offset: 0xc, Size: 0x4] 0x78dbe62900
	byte TangentWeightMode;//[Offset: 0x10, Size: 0x1] 0x78dbe62980

--------------------------------
Class: MovieSceneKeyHandleMap.KeyHandleLookupTable

--------------------------------
Class: KeyHandleLookupTable

--------------------------------
Class: MovieSceneAkAudioRTPCTrack.MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: PostEventAsync.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x30, Size: 0x10] 0x78dc092d80
	static PostEventAsync* PostEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, Actor* Actor, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool bStopWhenAttachedToDestroyed);// 0x504a5bc 0x78dc02ff20
	void PollPostEventFuture();// 0x504a5a8 0x78dc02caa0

--------------------------------
Class: PostEventAtLocationAsync.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x30, Size: 0x10] 0x78dc092a80
	static PostEventAtLocationAsync* PostEventAtLocationAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, Vector Location, Rotator Orientation);// 0x504acb8 0x78d3606360
	void PollPostEventFuture();// 0x504aca4 0x78dc02fe40

--------------------------------
Class: AliCloundLogSDKBPLibrary.BlueprintFunctionLibrary.Object
	static void ReportLongLogs(FString EventType, FString eventParams);// 0x50599e0 0x78dc02f9e0
	static void ReportLog(FString EventType, FString eventParams, bool attachVersion, int Flush);// 0x5059b18 0x78dc02fac0
	static void InitAliyunLogSDK(FString Endpoint, FString Project, FString Logstore, FString AccessKeyId, FString AccessKeySecret, FString accessKeyToken, FString topic, FString Version);// 0x5059260 0x78dc02fba0
	static bool InInit();// 0x5059d10 0x78dc02fc80
	static void Disable();// 0x5059cfc 0x78dc02fd60

--------------------------------
Class: AliCloundLogSettings.DeveloperSettings.Object
	FString Channel;//[Offset: 0x38, Size: 0x10] 0x78dc094000
	FString Version;//[Offset: 0x48, Size: 0x10] 0x78dc094080
	FString userId;//[Offset: 0x58, Size: 0x10] 0x78dc094100
	FString Endpoint;//[Offset: 0x68, Size: 0x10] 0x78dc094180
	FString Project;//[Offset: 0x78, Size: 0x10] 0x78dc094200
	FString Logstore;//[Offset: 0x88, Size: 0x10] 0x78dc092180
	FString AccessKeyId;//[Offset: 0x98, Size: 0x10] 0x78dc092200
	FString AccessKeySecret;//[Offset: 0xa8, Size: 0x10] 0x78dc092280

--------------------------------
Class: UserEventLibrary.BlueprintFunctionLibrary.Object

--------------------------------
Class: AndroidXSettings.Object
	bool bAndroidXEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dc093f00
	bool bMultiDexEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78dc093f80

--------------------------------
Class: ArcBPLibrary.BlueprintFunctionLibrary.Object
	static bool LaunchFromArc();// 0x505d63c 0x78dc02f4a0
	static bool IsLaunchedByArc();// 0x505d748 0x78dc02f580
	static void GotoBillingInOverlay();// 0x505d628 0x78dc02f660
	static FString GetTokenForLogin();// 0x505d480 0x78dc02f740
	static FString GetStarupLanguageByArc();// 0x505d674 0x78dc02f820
	static FString GetAccountName();// 0x505d554 0x78dc02f900

--------------------------------
Class: MaterialExpressionSpriteTextureSampler.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bSampleAdditionalTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x78dc093700
	int AdditionalSlotIndex;//[Offset: 0x80, Size: 0x4] 0x78dc093780
	FText SlotDisplayName;//[Offset: 0x88, Size: 0x18] 0x78dc093800

--------------------------------
Class: PaperCharacter.Character.Pawn.Actor.Object
	PaperFlipbookComponent* Sprite;//[Offset: 0x4b8, Size: 0x8] 0x78dc09ac80

--------------------------------
Class: PaperFlipbookComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperFlipbook* SourceFlipbook;//[Offset: 0x498, Size: 0x8] 0x78dc09d400
	MaterialInterface* Material;//[Offset: 0x4a0, Size: 0x8] 0x78dc09d480
	float PlayRate;//[Offset: 0x4a8, Size: 0x4] 0x78dc09d500
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4ac, Size: 0x1] 0x78dc09d580
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4ac, Size: 0x1] 0x78dc09d600
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4ac, Size: 0x1] 0x78dc09d680
	float AccumulatedTime;//[Offset: 0x4b0, Size: 0x4] 0x78dc09b600
	int CachedFrameIndex;//[Offset: 0x4b4, Size: 0x4] 0x78dc09b680
	LinearColor SpriteColor;//[Offset: 0x4b8, Size: 0x10] 0x78dc09b700
	BodySetup* CachedBodySetup;//[Offset: 0x4c8, Size: 0x8] 0x78dc09b780
	delegate OnFinishedPlaying;//[Offset: 0x4d0, Size: 0x10] 0x78dc09b800
	void Stop();// 0x507f0b0 0x78dc0a3f80
	void SetSpriteColor(LinearColor NewColor);// 0x507f114 0x78dc0a4060
	void SetPlayRate(float NewRate);// 0x507ec54 0x78dc0a4140
	void SetPlaybackPositionInFrames(int NewFramePosition, bool bFireEvents);// 0x507ef48 0x78dc0a4220
	void SetPlaybackPosition(float NewPosition, bool bFireEvents);// 0x507ee18 0x78dc0a4300
	void SetNewTime(float NewTime);// 0x507eb78 0x78dc0a43e0
	void SetLooping(bool bNewLooping);// 0x507ed34 0x78dc0a44c0
	bool SetFlipbook(PaperFlipbook* NewFlipbook);// 0x507f218 0x78dc0a45a0
	void ReverseFromEnd();// 0x507f0c4 0x78dc0a4680
	void Reverse();// 0x507f0d8 0x78dc0a4760
	void PlayFromStart();// 0x507f0ec 0x78dc0a4840
	void Play();// 0x507f100 0x78dc0a4920
	void OnRep_SourceFlipbook(PaperFlipbook* OldFlipbook);// 0x507ea34 0x78dc0a4a00
	bool IsReversing();// 0x507f040 0x78dc0a4ae0
	bool IsPlaying();// 0x507f078 0x78dc0a4bc0
	bool IsLooping();// 0x507ecfc 0x78dc0a4ca0
	LinearColor GetSpriteColor();// 0x507f1bc 0x78dc0a4d80
	float GetPlayRate();// 0x507ec20 0x78dc0a4e60
	int GetPlaybackPositionInFrames();// 0x507ef14 0x78dc0a4f40
	float GetPlaybackPosition();// 0x507ede4 0x78dc0a5020
	int GetFlipbookLengthInFrames();// 0x507eb10 0x78dc0a5100
	float GetFlipbookLength();// 0x507eb44 0x78dc0a51e0
	float GetFlipbookFramerate();// 0x507eadc 0x78dc0a52c0
	PaperFlipbook* GetFlipbook();// 0x507f1dc 0x78dc0a53a0

--------------------------------
Class: PaperFlipbook.Object
	float FramesPerSecond;//[Offset: 0x28, Size: 0x4] 0x78dc09c500
	PaperFlipbookKeyFrame[] KeyFrames;//[Offset: 0x30, Size: 0x10] 0x78dbffa380
	MaterialInterface* DefaultMaterial;//[Offset: 0x40, Size: 0x8] 0x78dc09c600
	byte CollisionSource;//[Offset: 0x48, Size: 0x1] 0x78dc09a580
	bool IsValidKeyFrameIndex(int Index);// 0x507e058 0x78dc0a5480
	float GetTotalDuration();// 0x507e3ec 0x78dc0a5560
	PaperSprite* GetSpriteAtTime(float Time, bool bClampToEnds);// 0x507e1e4 0x78dc0a5640
	PaperSprite* GetSpriteAtFrame(int FrameIndex);// 0x507e134 0x78dc0a1d60
	int GetNumKeyFrames();// 0x507e118 0x78dc0a1e40
	int GetNumFrames();// 0x507e420 0x78dc0a1f20
	int GetKeyFrameIndexAtTime(float Time, bool bClampToEnds);// 0x507e2e8 0x78dc0a2000

--------------------------------
Class: PaperFlipbookKeyFrame
	PaperSprite* Sprite;//[Offset: 0x0, Size: 0x8] 0x78dbded800
	int FrameRun;//[Offset: 0x8, Size: 0x4] 0x78dbded880

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10] 0x78dbffa060
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x8] 0x78dc09e100
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 0x8] 0x78dc09e180
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 0x8] 0x78dc09e200
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 0x8] 0x78dc09e280
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 0x8] 0x78dc09e300
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 0x10] 0x78dbffa100
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 0x1] 0x78dc09e400
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 0x4] 0x78dc09e480
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8] 0x78dc09e500
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 0x4] 0x78dc09e580
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 0x10] 0x78dbffa1a0

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30] 0x78dbdef600
	FName SocketName;//[Offset: 0x30, Size: 0x8] 0x78dbdef680

--------------------------------
Class: PaperFlipbookActor.Actor.Object
	PaperFlipbookComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x78dc09c480

--------------------------------
Class: PaperGroupedSpriteActor.Actor.Object
	PaperGroupedSpriteComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x78dc09d380

--------------------------------
Class: PaperGroupedSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] InstanceMaterials;//[Offset: 0x498, Size: 0x10] 0x78dbffa240
	SpriteInstanceData[] PerInstanceSpriteData;//[Offset: 0x4a8, Size: 0x10] 0x78dbffa2e0
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x5080384 0x78dc0a7240
	bool UpdateInstanceColor(int InstanceIndex, LinearColor NewInstanceColor, bool bMarkRenderStateDirty);// 0x508022c 0x78dc0a7320
	void SortInstancesAlongAxis(Vector WorldSpaceSortAxis);// 0x5080078 0x78dc0a3a40
	bool RemoveInstance(int InstanceIndex);// 0x5080170 0x78dc0a3b20
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x50805a0 0x78dc0a3c00
	int GetInstanceCount();// 0x5080120 0x78dc0a3ce0
	void ClearInstances();// 0x5080154 0x78dc0a3dc0
	int AddInstance(out const Transform Transform, PaperSprite* Sprite, bool bWorldSpace, LinearColor Color);// 0x5080718 0x78dc0a3ea0

--------------------------------
Class: SpriteInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40] 0x78dbdef700
	PaperSprite* SourceSprite;//[Offset: 0x40, Size: 0x8] 0x78dbdef780
	Color VertexColor;//[Offset: 0x48, Size: 0x4] 0x78dbded700
	int MaterialIndex;//[Offset: 0x4c, Size: 0x4] 0x78dbded780

--------------------------------
Class: PaperRuntimeSettings.Object
	bool bEnableSpriteAtlasGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dc09e680
	bool bEnableTerrainSplineEditing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78dc09e700
	bool bResizeSpriteDataToMatchTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78dc09c680

--------------------------------
Class: PaperSpriteActor.Actor.Object
	PaperSpriteComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x78dc09e000

--------------------------------
Class: PaperSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperSprite* SourceSprite;//[Offset: 0x498, Size: 0x8] 0x78dc09da80
	MaterialInterface* MaterialOverride;//[Offset: 0x4a0, Size: 0x8] 0x78dc09db00
	LinearColor SpriteColor;//[Offset: 0x4a8, Size: 0x10] 0x78dc09db80
	void SetSpriteColor(LinearColor NewColor);// 0x5081c8c 0x78dc0a6ec0
	bool SetSprite(PaperSprite* NewSprite);// 0x5081d70 0x78dc0a6fa0
	PaperSprite* GetSprite();// 0x5081d34 0x78dc0a7080

--------------------------------
Class: PaperSpriteAtlas.Object

--------------------------------
Class: PaperSpriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	static SlateBrush MakeBrushFromSprite(PaperSprite* Sprite, int Width, int Height);// 0x5081768 0x78dc0a7160

--------------------------------
Class: PaperTerrainActor.Actor.Object
	SceneComponent* DummyRoot;//[Offset: 0x220, Size: 0x8] 0x78dc09d900
	PaperTerrainSplineComponent* SplineComponent;//[Offset: 0x228, Size: 0x8] 0x78dc09d980
	PaperTerrainComponent* RenderComponent;//[Offset: 0x230, Size: 0x8] 0x78dc09da00

--------------------------------
Class: PaperTerrainSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PaperTerrainComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperTerrainMaterial* TerrainMaterial;//[Offset: 0x470, Size: 0x8] 0x78dc09f400
	bool bClosedSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1] 0x78dc09f480
	bool bFilledSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1] 0x78dc09f500
	PaperTerrainSplineComponent* AssociatedSpline;//[Offset: 0x480, Size: 0x8] 0x78dc09f580
	int RandomSeed;//[Offset: 0x488, Size: 0x4] 0x78dc09f600
	float SegmentOverlapAmount;//[Offset: 0x48c, Size: 0x4] 0x78dc09f680
	LinearColor TerrainColor;//[Offset: 0x490, Size: 0x10] 0x78dc09f700
	int ReparamStepsPerSegment;//[Offset: 0x4a0, Size: 0x4] 0x78dc09f780
	byte SpriteCollisionDomain;//[Offset: 0x4a4, Size: 0x1] 0x78dc09d700
	float CollisionThickness;//[Offset: 0x4a8, Size: 0x4] 0x78dc09d780
	BodySetup* CachedBodySetup;//[Offset: 0x4b0, Size: 0x8] 0x78dc09d800
	void SetTerrainColor(LinearColor NewColor);// 0x5082468 0x78dc0a6de0

--------------------------------
Class: PaperTerrainMaterial.DataAsset.Object
	PaperTerrainMaterialRule[] Rules;//[Offset: 0x30, Size: 0x10] 0x78dbff9fc0
	PaperSprite* InteriorFill;//[Offset: 0x40, Size: 0x8] 0x78dc09f380

--------------------------------
Class: PaperTerrainMaterialRule
	PaperSprite* StartCap;//[Offset: 0x0, Size: 0x8] 0x78dbdeef00
	PaperSprite*[] Body;//[Offset: 0x8, Size: 0x10] 0x78d3615a60
	PaperSprite* EndCap;//[Offset: 0x18, Size: 0x8] 0x78dbdef000
	float MinimumAngle;//[Offset: 0x20, Size: 0x4] 0x78dbdef080
	float MaximumAngle;//[Offset: 0x24, Size: 0x4] 0x78dbdef100
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dbdef180
	float CollisionOffset;//[Offset: 0x2c, Size: 0x4] 0x78dbdef200
	int DrawOrder;//[Offset: 0x30, Size: 0x4] 0x78dbdef280

--------------------------------
Class: PaperTileLayer.Object
	FText LayerName;//[Offset: 0x28, Size: 0x18] 0x78dc0b7700
	int LayerWidth;//[Offset: 0x40, Size: 0x4] 0x78dc0b7780
	int LayerHeight;//[Offset: 0x44, Size: 0x4] 0x78dc0b7800
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78dc0b7880
	bool bLayerCollides;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x78dc0b7900
	bool bOverrideCollisionThickness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1] 0x78dc0b7980
	bool bOverrideCollisionOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1] 0x78dc0b7a00
	float CollisionThicknessOverride;//[Offset: 0x4c, Size: 0x4] 0x78dc0b7a80
	float CollisionOffsetOverride;//[Offset: 0x50, Size: 0x4] 0x78dc0b7b00
	LinearColor LayerColor;//[Offset: 0x54, Size: 0x10] 0x78dc0b7b80
	int AllocatedWidth;//[Offset: 0x64, Size: 0x4] 0x78dc0b7c00
	int AllocatedHeight;//[Offset: 0x68, Size: 0x4] 0x78dc0b7c80
	PaperTileInfo[] AllocatedCells;//[Offset: 0x70, Size: 0x10] 0x78dbff9c00
	PaperTileSet* TileSet;//[Offset: 0x80, Size: 0x8] 0x78dc0b7d80
	int[] AllocatedGrid;//[Offset: 0x88, Size: 0x10] 0x78dbff9ca0

--------------------------------
Class: PaperTileInfo
	PaperTileSet* TileSet;//[Offset: 0x0, Size: 0x8] 0x78dbdeee00
	int PackedTileIndex;//[Offset: 0x8, Size: 0x4] 0x78dbdeee80

--------------------------------
Class: PaperTileSet.Object
	IntPoint TileSize;//[Offset: 0x28, Size: 0x8] 0x78dc0ba800
	Texture2D* TileSheet;//[Offset: 0x30, Size: 0x8] 0x78dc0ba880
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10] 0x78dbff9840
	IntMargin BorderMargin;//[Offset: 0x48, Size: 0x10] 0x78dc0ba980
	IntPoint PerTileSpacing;//[Offset: 0x58, Size: 0x8] 0x78dc0baa00
	IntPoint DrawingOffset;//[Offset: 0x60, Size: 0x8] 0x78dc0baa80
	int WidthInTiles;//[Offset: 0x68, Size: 0x4] 0x78dc0bab00
	int HeightInTiles;//[Offset: 0x6c, Size: 0x4] 0x78dc0bab80
	int AllocatedWidth;//[Offset: 0x70, Size: 0x4] 0x78dc0bac00
	int AllocatedHeight;//[Offset: 0x74, Size: 0x4] 0x78dc0bac80
	PaperTileMetadata[] PerTileData;//[Offset: 0x78, Size: 0x10] 0x78dbff98e0
	PaperTileSetTerrain[] Terrains;//[Offset: 0x88, Size: 0x10] 0x78dbff9980
	int TileWidth;//[Offset: 0x98, Size: 0x4] 0x78dc0bae00
	int TileHeight;//[Offset: 0x9c, Size: 0x4] 0x78dc0bae80
	int Margin;//[Offset: 0xa0, Size: 0x4] 0x78dc0baf00
	int Spacing;//[Offset: 0xa4, Size: 0x4] 0x78dc0baf80

--------------------------------
Class: IntMargin
	int Left;//[Offset: 0x0, Size: 0x4] 0x78dbded900
	int Top;//[Offset: 0x4, Size: 0x4] 0x78dbded980
	int Right;//[Offset: 0x8, Size: 0x4] 0x78dbdeda00
	int Bottom;//[Offset: 0xc, Size: 0x4] 0x78dbdeda80

--------------------------------
Class: PaperTileMetadata
	FName UserDataName;//[Offset: 0x0, Size: 0x8] 0x78dbdefd00
	SpriteGeometryCollection CollisionData;//[Offset: 0x8, Size: 0x30] 0x78dbdeec00
	byte TerrainMembership;//[Offset: 0x38, Size: 0x1] 0x78dbdeec80

--------------------------------
Class: SpriteGeometryCollection
	SpriteGeometryShape[] Shapes;//[Offset: 0x0, Size: 0x10] 0x78d36159c0
	byte GeometryType;//[Offset: 0x10, Size: 0x1] 0x78dbdee880
	int PixelsPerSubdivisionX;//[Offset: 0x14, Size: 0x4] 0x78dbdee900
	int PixelsPerSubdivisionY;//[Offset: 0x18, Size: 0x4] 0x78dbdee980
	bool bAvoidVertexMerging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78dbdeea00
	float AlphaThreshold;//[Offset: 0x20, Size: 0x4] 0x78dbdeea80
	float DetailAmount;//[Offset: 0x24, Size: 0x4] 0x78dbdeeb00
	float SimplifyEpsilon;//[Offset: 0x28, Size: 0x4] 0x78dbdeeb80

--------------------------------
Class: SpriteGeometryShape
	enum ShapeType;//[Offset: 0x0, Size: 0x1] 0x78d3615880
	Vector2D[] Vertices;//[Offset: 0x8, Size: 0x10] 0x78d3615920
	Vector2D BoxSize;//[Offset: 0x18, Size: 0x8] 0x78dbdefe80
	Vector2D BoxPosition;//[Offset: 0x20, Size: 0x8] 0x78dbdeff00
	float Rotation;//[Offset: 0x28, Size: 0x4] 0x78dbdeff80
	bool bNegativeWinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78dbdee780

--------------------------------
Class: PaperTileSetTerrain
	FString TerrainName;//[Offset: 0x0, Size: 0x10] 0x78dbdeed00
	int CenterTileIndex;//[Offset: 0x10, Size: 0x4] 0x78dbdeed80

--------------------------------
Class: PaperTileMap.Object
	int MapWidth;//[Offset: 0x28, Size: 0x4] 0x78dc0b8f80
	int MapHeight;//[Offset: 0x2c, Size: 0x4] 0x78dc0b9000
	int TileWidth;//[Offset: 0x30, Size: 0x4] 0x78dc0b9080
	int TileHeight;//[Offset: 0x34, Size: 0x4] 0x78dc0b9100
	float PixelsPerUnrealUnit;//[Offset: 0x38, Size: 0x4] 0x78dc0b9180
	float SeparationPerTileX;//[Offset: 0x3c, Size: 0x4] 0x78dc0b9200
	float SeparationPerTileY;//[Offset: 0x40, Size: 0x4] 0x78dc0b9280
	float SeparationPerLayer;//[Offset: 0x44, Size: 0x4] 0x78dc0b9300
	PaperTileSet* SelectedTileSet;//[Offset: 0x48, Size: 0x28] 0x78dc0b9380
	MaterialInterface* Material;//[Offset: 0x70, Size: 0x8] 0x78dc0b9400
	PaperTileLayer*[] TileLayers;//[Offset: 0x78, Size: 0x10] 0x78dbff9b60
	float CollisionThickness;//[Offset: 0x88, Size: 0x4] 0x78dc0b7400
	byte SpriteCollisionDomain;//[Offset: 0x8c, Size: 0x1] 0x78dc0b7480
	byte ProjectionMode;//[Offset: 0x8d, Size: 0x1] 0x78dc0b7500
	int HexSideLength;//[Offset: 0x90, Size: 0x4] 0x78dc0b7580
	BodySetup* BodySetup;//[Offset: 0x98, Size: 0x8] 0x78dc0b7600
	int LayerNameIndex;//[Offset: 0xa0, Size: 0x4] 0x78dc0b7680

--------------------------------
Class: PaperTileMapActor.Actor.Object
	PaperTileMapComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x78dc0b8f00

--------------------------------
Class: PaperTileMapComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int MapWidth;//[Offset: 0x494, Size: 0x4] 0x78dc0bb000
	int MapHeight;//[Offset: 0x498, Size: 0x4] 0x78dc0bb080
	int TileWidth;//[Offset: 0x49c, Size: 0x4] 0x78dc0bb100
	int TileHeight;//[Offset: 0x4a0, Size: 0x4] 0x78dc0bb180
	PaperTileSet* DefaultLayerTileSet;//[Offset: 0x4a8, Size: 0x8] 0x78dc0bb200
	MaterialInterface* Material;//[Offset: 0x4b0, Size: 0x8] 0x78dc0bb280
	PaperTileLayer*[] TileLayers;//[Offset: 0x4b8, Size: 0x10] 0x78dbff9a20
	LinearColor TileMapColor;//[Offset: 0x4c8, Size: 0x10] 0x78dc0bb380
	int UseSingleLayerIndex;//[Offset: 0x4d8, Size: 0x4] 0x78dc0bb400
	bool bUseSingleLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 0x1] 0x78dc0bb480
	PaperTileMap* Tilemap;//[Offset: 0x4e0, Size: 0x8] 0x78dc0bb500
	void SetTileMapColor(LinearColor NewColor);// 0x50841c4 0x78dc0ab4c0
	bool SetTileMap(PaperTileMap* NewTileMap);// 0x50847f0 0x78dc0ab5a0
	void SetTile(int X, int Y, int Layer, PaperTileInfo NewValue);// 0x50843c8 0x78dc0ab680
	void SetLayerColor(LinearColor NewColor, int Layer);// 0x508401c 0x78dc0ab760
	void SetLayerCollision(int Layer, bool bHasCollision, bool bOverrideThickness, float CustomThickness, bool bOverrideOffset, float CustomOffset, bool bRebuildCollision);// 0x508374c 0x78dc0ab840
	void SetDefaultCollisionThickness(float Thickness, bool bRebuildCollision);// 0x50839c0 0x78dc0ab920
	void ResizeMap(int NewWidthInTiles, int NewHeightInTiles);// 0x50842d8 0x78dc0aba00
	void RebuildCollision();// 0x5083738 0x78dc0abae0
	bool OwnsTileMap();// 0x50848ac 0x78dc0abbc0
	void MakeTileMapEditable();// 0x5084008 0x78dc0abca0
	void GetTilePolygon(int TileX, int TileY, out Vector[] Points, int LayerIndex, bool bWorldSpace);// 0x5083abc 0x78dc0abd80
	LinearColor GetTileMapColor();// 0x508426c 0x78dc0abe60
	Vector GetTileCornerPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x5083e70 0x78dc0abf40
	Vector GetTileCenterPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x5083cd8 0x78dc0ac020
	PaperTileInfo GetTile(int X, int Y, int Layer);// 0x508454c 0x78dc0ac100
	void GetMapSize(out int MapWidth, out int MapHeight, out int NumLayers);// 0x5084694 0x78dc0ac1e0
	LinearColor GetLayerColor(int Layer);// 0x5084110 0x78dc0ac2c0
	void CreateNewTileMap(int MapWidth, int MapHeight, int TileWidth, int TileHeight, float PixelsPerUnrealUnit, bool bCreateLayer);// 0x50848e4 0x78dc0ac3a0
	PaperTileLayer* AddNewLayer();// 0x50842a4 0x78dc0ac480

--------------------------------
Class: TileMapBlueprintLibrary.BlueprintFunctionLibrary.Object
	static PaperTileInfo MakeTile(int TileIndex, PaperTileSet* TileSet, bool bFlipH, bool bFlipV, bool bFlipD);// 0x5085d94 0x78dc0ab140
	static FName GetTileUserData(PaperTileInfo Tile);// 0x5086280 0x78dc0ab220
	static Transform GetTileTransform(PaperTileInfo Tile);// 0x50861c0 0x78dc0ab300
	static void BreakTile(PaperTileInfo Tile, out int TileIndex, out PaperTileSet* TileSet, out bool bFlipH, out bool bFlipV, out bool bFlipD);// 0x5085f78 0x78dc0ab3e0

--------------------------------
Class: CrashSightBPFunctionLibrary.BlueprintFunctionLibrary.Object
	static bool UncompressLogFile(FString InLog, FString OutLog);// 0x50933cc 0x78dc0ae5c0
	static void SetUserID(FString userId);// 0x5093a78 0x78dc0ae6a0
	static void SendErrorReport(FString msg, FString Traceback);// 0x5093808 0x78dc0aadc0
	static void CrashTest(int CrashNumber);// 0x5093770 0x78dc0aaea0
	static bool CompressBinaries(out const byte[] InBinaries, out byte[] OutBinaries);// 0x5093608 0x78dc0aaf80
	static void AddCustomProperty(FString Key, FString Value);// 0x5093940 0x78dc0ab060

--------------------------------
Class: CrashSightCommandlet.Commandlet.Object

--------------------------------
Class: SpineAtlasAsset.Object
	Texture2D*[] atlasPages;//[Offset: 0x28, Size: 0x10] 0x78dbff9520
	FString RawData;//[Offset: 0x40, Size: 0x10] 0x78dc0bca00
	FName atlasFileName;//[Offset: 0x50, Size: 0x8] 0x78dc0bca80

--------------------------------
Class: SpineBoneDriverComponent.SceneComponent.ActorComponent.Object
	Actor* Target;//[Offset: 0x208, Size: 0x8] 0x78dc0be700
	FString BoneName;//[Offset: 0x210, Size: 0x10] 0x78dc0bc680
	bool UseComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x78dc0bc700
	bool UsePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1] 0x78dc0bc780
	bool UseRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x222, Size: 0x1] 0x78dc0bc800
	bool UseScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x223, Size: 0x1] 0x78dc0bc880
	void BeforeUpdateWorldTransform(SpineSkeletonComponent* Skeleton);// 0x50f7a4c 0x78dc0ae4e0

--------------------------------
Class: SpineSkeletonComponent.ActorComponent.Object
	SpineAtlasAsset* Atlas;//[Offset: 0xb8, Size: 0x8] 0x78dc0bf800
	SpineSkeletonDataAsset* SkeletonData;//[Offset: 0xc0, Size: 0x8] 0x78dc0bf880
	delegate BeforeUpdateWorldTransform;//[Offset: 0xc8, Size: 0x10] 0x78dc0bf900
	delegate AfterUpdateWorldTransform;//[Offset: 0xd8, Size: 0x10] 0x78dc0bf980
	void UpdateWorldTransform();// 0x50fbf38 0x78dc0aeb00
	void SetToSetupPose();// 0x50fbf24 0x78dc0aebe0
	void SetSlotsToSetupPose();// 0x50fbefc 0x78dc0aecc0
	bool SetSkins(out FString[] SkinNames);// 0x50fc698 0x78dc0aeda0
	bool SetSkin(const FString SkinName);// 0x50fc52c 0x78dc0aee80
	void SetScaleY(float ScaleY);// 0x50fbd78 0x78dc0aef60
	void SetScaleX(float ScaleX);// 0x50fbe54 0x78dc0af040
	void SetBoneWorldPosition(FString BoneName, out const Vector Position);// 0x50fbf4c 0x78dc0af120
	void SetBonesToSetupPose();// 0x50fbf10 0x78dc0af200
	bool SetAttachment(const FString SlotName, const FString attachmentName);// 0x50fc174 0x78dc0af2e0
	bool HasSlot(const FString SlotName);// 0x50fb7d4 0x78dc0af3c0
	bool HasSkin(const FString SkinName);// 0x50fc3c0 0x78dc0af4a0
	bool HasBone(const FString BoneName);// 0x50fba8c 0x78dc0af580
	bool HasAnimation(FString AnimationName);// 0x50fb51c 0x78dc0af660
	void GetSlots(out FString[] Slots);// 0x50fb940 0x78dc0af740
	void GetSkins(out FString[] Skins);// 0x50fc7f0 0x78dc0af820
	float GetScaleY();// 0x50fbd44 0x78dc0af900
	float GetScaleX();// 0x50fbe20 0x78dc0af9e0
	Transform GetBoneWorldTransform(FString BoneName);// 0x50fc078 0x78dc0afac0
	void GetBones(out FString[] Bones);// 0x50fbbf8 0x78dc0afba0
	void GetAnimations(out FString[] Animations);// 0x50fb688 0x78dc0afc80
	float getAnimationDuration(FString AnimationName);// 0x50fb3b4 0x78dc0afd60

--------------------------------
Class: SpineSkeletonDataAsset.Object
	float DefaultMix;//[Offset: 0x28, Size: 0x4] 0x78dc0d1c80
	SpineAnimationStateMixData[] MixData;//[Offset: 0x30, Size: 0x10] 0x78dbffb640
	FString[] Bones;//[Offset: 0x40, Size: 0x10] 0x78dbffb6e0
	FString[] Slots;//[Offset: 0x50, Size: 0x10] 0x78dbffb780
	FString[] Skins;//[Offset: 0x60, Size: 0x10] 0x78dbffb820
	FString[] Animations;//[Offset: 0x70, Size: 0x10] 0x78dbffb8c0
	FString[] Events;//[Offset: 0x80, Size: 0x10] 0x78dbffb960
	byte[] RawData;//[Offset: 0x90, Size: 0x10] 0x78dbff90c0
	FName skeletonDataFileName;//[Offset: 0xa0, Size: 0x8] 0x78dc0d2080

--------------------------------
Class: SpineAnimationStateMixData
	FString From;//[Offset: 0x0, Size: 0x10] 0x78dbe00a80
	FString To;//[Offset: 0x10, Size: 0x10] 0x78dbe00b00
	float Mix;//[Offset: 0x20, Size: 0x4] 0x78dbe00b80

--------------------------------
Class: SpineBoneFollowerComponent.SceneComponent.ActorComponent.Object
	Actor* Target;//[Offset: 0x208, Size: 0x8] 0x78dc0be400
	FString BoneName;//[Offset: 0x210, Size: 0x10] 0x78dc0be480
	bool UseComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x78dc0be500
	bool UsePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1] 0x78dc0be580
	bool UseRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x222, Size: 0x1] 0x78dc0be600
	bool UseScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x223, Size: 0x1] 0x78dc0be680

--------------------------------
Class: TrackEntry.Object
	delegate animationStart;//[Offset: 0x28, Size: 0x10] 0x78dc0bf100
	delegate AnimationInterrupt;//[Offset: 0x38, Size: 0x10] 0x78dc0bf180
	delegate AnimationEvent;//[Offset: 0x48, Size: 0x10] 0x78dc0bf200
	delegate AnimationComplete;//[Offset: 0x58, Size: 0x10] 0x78dc0bf280
	delegate animationEnd;//[Offset: 0x68, Size: 0x10] 0x78dc0bf300
	delegate AnimationDispose;//[Offset: 0x78, Size: 0x10] 0x78dc0bf380
	void SetTrackTime(float trackTime);// 0x50f8d3c 0x78dc0afe40
	void SetTrackEnd(float trackEnd);// 0x50f8c40 0x78dc0aff20
	void SetTimeScale(float TimeScale);// 0x50f8b44 0x78dc0acaa0
	void SetMixTime(float mixTime);// 0x50f894c 0x78dc0acb80
	void SetMixDuration(float mixDuration);// 0x50f8850 0x78dc0acc60
	void SetLoop(bool Loop);// 0x50f951c 0x78dc0acd40
	void SetEventThreshold(float eventThreshold);// 0x50f9420 0x78dc0ace20
	void SetDrawOrderThreshold(float drawOrderThreshold);// 0x50f9228 0x78dc0acf00
	void SetDelay(float Delay);// 0x50f8e38 0x78dc0acfe0
	void SetAttachmentThreshold(float attachmentThreshold);// 0x50f9324 0x78dc0ad0c0
	void SetAnimationStart(float animationStart);// 0x50f912c 0x78dc0ad1a0
	void SetAnimationLast(float animationLast);// 0x50f8f34 0x78dc0ad280
	void SetAnimationEnd(float animationEnd);// 0x50f9030 0x78dc0ad360
	void SetAlpha(float Alpha);// 0x50f8a48 0x78dc0ad440
	float isValidAnimation();// 0x50f83fc 0x78dc0ad520
	float GetTrackTime();// 0x50f8de8 0x78dc0ad600
	int GetTrackIndex();// 0x50f9624 0x78dc0ad6e0
	float GetTrackEnd();// 0x50f8cec 0x78dc0ad7c0
	float GetTimeScale();// 0x50f8bf0 0x78dc0ad8a0
	float GetMixTime();// 0x50f89f8 0x78dc0ad980
	float GetMixDuration();// 0x50f88fc 0x78dc0ada60
	bool GetLoop();// 0x50f95d0 0x78dc0adb40
	float GetEventThreshold();// 0x50f94cc 0x78dc0adc20
	float GetDrawOrderThreshold();// 0x50f92d4 0x78dc0add00
	float GetDelay();// 0x50f8ee4 0x78dc0adde0
	float GetAttachmentThreshold();// 0x50f93d0 0x78dc0adec0
	float GetAnimationStart();// 0x50f91d8 0x78dc0adfa0
	FString getAnimationName();// 0x50f847c 0x78dc0ae080
	float GetAnimationLast();// 0x50f8fe0 0x78dc0ae160
	float GetAnimationEnd();// 0x50f90dc 0x78dc0ae240
	float getAnimationDuration();// 0x50f8428 0x78dc0ae320
	float GetAlpha();// 0x50f8af4 0x78dc0ae400

--------------------------------
Class: SpineSkeletonAnimationComponent.SpineSkeletonComponent.ActorComponent.Object
	delegate animationStart;//[Offset: 0x110, Size: 0x10] 0x78dc0d2100
	delegate AnimationInterrupt;//[Offset: 0x120, Size: 0x10] 0x78dc0d0080
	delegate AnimationEvent;//[Offset: 0x130, Size: 0x10] 0x78dc0d0100
	delegate AnimationComplete;//[Offset: 0x140, Size: 0x10] 0x78dc0d0180
	delegate animationEnd;//[Offset: 0x150, Size: 0x10] 0x78dc0d0200
	delegate AnimationDispose;//[Offset: 0x160, Size: 0x10] 0x78dc0d0280
	FString PreviewAnimation;//[Offset: 0x170, Size: 0x10] 0x78dc0d0300
	FString PreviewSkin;//[Offset: 0x180, Size: 0x10] 0x78dc0d0380
	<TrackEntry*> trackEntries;//[Offset: 0x198, Size: 0x50] 0x78dbff9160
	bool bAutoPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1] 0x78dc0d0480
	void SetTimeScale(float TimeScale);// 0x50faafc 0x78dc0e1740
	void SetPlaybackTime(float InPlaybackTime, bool bCallDelegates);// 0x50faba4 0x78dc0e1820
	TrackEntry* SetEmptyAnimation(int TrackIndex, float mixDuration);// 0x50fa564 0x78dc0e1900
	void SetAutoPlay(bool bInAutoPlays);// 0x50faca0 0x78dc0e19e0
	TrackEntry* SetAnimation(int TrackIndex, FString AnimationName, bool Loop);// 0x50fa8bc 0x78dc0e1ac0
	float GetTimeScale();// 0x50faac8 0x78dc0e1ba0
	TrackEntry* GetCurrent(int TrackIndex);// 0x50fa370 0x78dc0e1c80
	void ClearTracks();// 0x50fa35c 0x78dc0ae780
	void ClearTrack(int TrackIndex);// 0x50fa2b4 0x78dc0ae860
	TrackEntry* AddEmptyAnimation(int TrackIndex, float mixDuration, float Delay);// 0x50fa420 0x78dc0ae940
	TrackEntry* AddAnimation(int TrackIndex, FString AnimationName, bool Loop, float Delay);// 0x50fa660 0x78dc0aea20

--------------------------------
Class: ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1] 0x78dc0d2580
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1, Size: 0x1] 0x78dc0d2600
	BodySetup* ProcMeshBodySetup;//[Offset: 0x4a8, Size: 0x8] 0x78dc0d2680
	ProcMeshSection[] ProcMeshSections;//[Offset: 0x4b0, Size: 0x10] 0x78dbffcb80
	KConvexElem[] CollisionConvexElems;//[Offset: 0x4c0, Size: 0x10] 0x78dbffcc20
	BoxSphereBounds LocalBounds;//[Offset: 0x4d0, Size: 0x1c] 0x78dc0d2800
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x4f0, Size: 0x10] 0x78dbffccc0
	void UpdateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x511a5bc 0x78dc0e0da0
	void UpdateMeshSection(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x511aa84 0x78dc0e0e80
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x511a408 0x78dc0e0f60
	bool IsMeshSectionVisible(int SectionIndex);// 0x511a354 0x78dc0e1040
	int GetNumSections();// 0x511a320 0x78dc0e1120
	void CreateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x511addc 0x78dc0e1200
	void CreateMeshSection(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x511b39c 0x78dc0e12e0
	void ClearMeshSection(int SectionIndex);// 0x511a514 0x78dc0e13c0
	void ClearCollisionConvexMeshes();// 0x511a1b0 0x78dc0e14a0
	void ClearAllMeshSections();// 0x511a500 0x78dc0e1580
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x511a1c4 0x78dc0e1660

--------------------------------
Class: ProcMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0xc] 0x78dbe00400
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78dbe00480

--------------------------------
Class: ProcMeshSection
	ProcMeshVertex[] ProcVertexBuffer;//[Offset: 0x0, Size: 0x10] 0x78d3615740
	uint32[] ProcIndexBuffer;//[Offset: 0x10, Size: 0x10] 0x78d36157e0
	Box SectionLocalBox;//[Offset: 0x20, Size: 0x1c] 0x78dbe00900
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78dbe00980
	bool bSectionVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x78dbe00a00

--------------------------------
Class: ProcMeshVertex
	Vector Position;//[Offset: 0x0, Size: 0xc] 0x78dbe00300
	Vector Normal;//[Offset: 0xc, Size: 0xc] 0x78dbe00380
	ProcMeshTangent Tangent;//[Offset: 0x18, Size: 0x10] 0x78dbe00500
	Color Color;//[Offset: 0x28, Size: 0x4] 0x78dbe00580
	Vector2D UV0;//[Offset: 0x2c, Size: 0x8] 0x78dbe00600
	Vector2D UV1;//[Offset: 0x34, Size: 0x8] 0x78dbe00680
	Vector2D UV2;//[Offset: 0x3c, Size: 0x8] 0x78dbe00700
	Vector2D UV3;//[Offset: 0x44, Size: 0x8] 0x78dbe00780

--------------------------------
Class: SpineSkeletonRendererComponent.ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* NormalBlendMaterial;//[Offset: 0x500, Size: 0x8] 0x78dc0d4080
	MaterialInterface* AdditiveBlendMaterial;//[Offset: 0x508, Size: 0x8] 0x78dc0d4100
	MaterialInterface* MultiplyBlendMaterial;//[Offset: 0x510, Size: 0x8] 0x78dc0d4180
	MaterialInterface* ScreenBlendMaterial;//[Offset: 0x518, Size: 0x8] 0x78dc0d4200
	MaterialInstanceDynamic*[] atlasNormalBlendMaterials;//[Offset: 0x520, Size: 0x10] 0x78dbffc900
	MaterialInstanceDynamic*[] atlasAdditiveBlendMaterials;//[Offset: 0x580, Size: 0x10] 0x78dbffc9a0
	MaterialInstanceDynamic*[] atlasMultiplyBlendMaterials;//[Offset: 0x5e0, Size: 0x10] 0x78dbffca40
	MaterialInstanceDynamic*[] atlasScreenBlendMaterials;//[Offset: 0x640, Size: 0x10] 0x78dbffcae0
	float DepthOffset;//[Offset: 0x6a0, Size: 0x4] 0x78dc0d2380
	FName TextureParameterName;//[Offset: 0x6a4, Size: 0x8] 0x78dc0d2400
	LinearColor Color;//[Offset: 0x6ac, Size: 0x10] 0x78dc0d2480
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 0x1] 0x78dc0d2500

--------------------------------
Class: SpineWidget.Widget.Visual.Object
	float Scale;//[Offset: 0x108, Size: 0x4] 0x78dc0d5b80
	SpineAtlasAsset* Atlas;//[Offset: 0x110, Size: 0x8] 0x78dc0d5c00
	SpineSkeletonDataAsset* SkeletonData;//[Offset: 0x118, Size: 0x8] 0x78dc0d5c80
	MaterialInterface* NormalBlendMaterial;//[Offset: 0x120, Size: 0x8] 0x78dc0d5d00
	MaterialInterface* AdditiveBlendMaterial;//[Offset: 0x128, Size: 0x8] 0x78dc0d5d80
	MaterialInterface* MultiplyBlendMaterial;//[Offset: 0x130, Size: 0x8] 0x78dc0d5e00
	MaterialInterface* ScreenBlendMaterial;//[Offset: 0x138, Size: 0x8] 0x78dc0d5e80
	FName TextureParameterName;//[Offset: 0x140, Size: 0x8] 0x78dc0d5f00
	float DepthOffset;//[Offset: 0x148, Size: 0x4] 0x78dc0d5f80
	LinearColor Color;//[Offset: 0x14c, Size: 0x10] 0x78dc0d6000
	SlateBrush Brush;//[Offset: 0x160, Size: 0x88] 0x78dc0d6080
	delegate BeforeUpdateWorldTransform;//[Offset: 0x1e8, Size: 0x10] 0x78dc0d6100
	delegate AfterUpdateWorldTransform;//[Offset: 0x1f8, Size: 0x10] 0x78dc0d6180
	delegate animationStart;//[Offset: 0x208, Size: 0x10] 0x78dc0d6200
	delegate AnimationInterrupt;//[Offset: 0x218, Size: 0x10] 0x78dc0d6280
	delegate AnimationEvent;//[Offset: 0x228, Size: 0x10] 0x78dc0d6300
	delegate AnimationComplete;//[Offset: 0x238, Size: 0x10] 0x78dc0d4280
	delegate animationEnd;//[Offset: 0x248, Size: 0x10] 0x78dc0d4300
	delegate AnimationDispose;//[Offset: 0x258, Size: 0x10] 0x78dc0d4380
	MaterialInstanceDynamic*[] atlasNormalBlendMaterials;//[Offset: 0x2a8, Size: 0x10] 0x78dbffc2c0
	MaterialInstanceDynamic*[] atlasAdditiveBlendMaterials;//[Offset: 0x308, Size: 0x10] 0x78dbffc360
	MaterialInstanceDynamic*[] atlasMultiplyBlendMaterials;//[Offset: 0x368, Size: 0x10] 0x78dbffc400
	MaterialInstanceDynamic*[] atlasScreenBlendMaterials;//[Offset: 0x3c8, Size: 0x10] 0x78dbffc4a0
	<TrackEntry*> trackEntries;//[Offset: 0x618, Size: 0x50] 0x78dbffc540
	bool bAutoPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 0x1] 0x78dc0d4680
	void UpdateWorldTransform();// 0x50fee9c 0x78dc0e2b60
	void Tick(float DeltaTime, bool CallDelegates);// 0x50fd780 0x78dc0e2c40
	void SetToSetupPose();// 0x50fee88 0x78dc0e2d20
	void SetTimeScale(float TimeScale);// 0x50fe0c4 0x78dc0e2e00
	void SetSlotsToSetupPose();// 0x50fee60 0x78dc0e2ee0
	bool SetSkins(out FString[] SkinNames);// 0x50ff268 0x78dc0e2fc0
	bool SetSkin(const FString SkinName);// 0x50ff3c0 0x78dc0e30a0
	void SetScaleY(float ScaleY);// 0x50fecdc 0x78dc0e3180
	void SetScaleX(float ScaleX);// 0x50fedb8 0x78dc0e3260
	void SetPlaybackTime(float InPlaybackTime, bool bCallDelegates);// 0x50fe16c 0x78dc0e3340
	TrackEntry* SetEmptyAnimation(int TrackIndex, float mixDuration);// 0x50fdb2c 0x78dc0e3420
	void SetBonesToSetupPose();// 0x50fee74 0x78dc0e3500
	void SetAutoPlay(bool bInAutoPlays);// 0x50fe268 0x78dc0e35e0
	bool SetAttachment(const FString SlotName, const FString attachmentName);// 0x50feeb0 0x78dc0e36c0
	TrackEntry* SetAnimation(int TrackIndex, FString AnimationName, bool Loop);// 0x50fde84 0x78dc0e37a0
	bool HasSlot(const FString SlotName);// 0x50fe738 0x78dc0e3880
	bool HasSkin(const FString SkinName);// 0x50ff0fc 0x78dc0e3960
	bool HasBone(const FString BoneName);// 0x50fe9f0 0x78dc0e0080
	bool HasAnimation(FString AnimationName);// 0x50fe480 0x78dc0e0160
	float GetTimeScale();// 0x50fe090 0x78dc0e0240
	void GetSlots(out FString[] Slots);// 0x50fe8a4 0x78dc0e0320
	void GetSkins(out FString[] Skins);// 0x50ff52c 0x78dc0e0400
	float GetScaleY();// 0x50feca8 0x78dc0e04e0
	float GetScaleX();// 0x50fed84 0x78dc0e05c0
	TrackEntry* GetCurrent(int TrackIndex);// 0x50fd938 0x78dc0e06a0
	void GetBones(out FString[] Bones);// 0x50feb5c 0x78dc0e0780
	void GetAnimations(out FString[] Animations);// 0x50fe5ec 0x78dc0e0860
	float getAnimationDuration(FString AnimationName);// 0x50fe318 0x78dc0e0940
	void ClearTracks();// 0x50fd924 0x78dc0e0a20
	void ClearTrack(int TrackIndex);// 0x50fd87c 0x78dc0e0b00
	TrackEntry* AddEmptyAnimation(int TrackIndex, float mixDuration, float Delay);// 0x50fd9e8 0x78dc0e0be0
	TrackEntry* AddAnimation(int TrackIndex, FString AnimationName, bool Loop, float Delay);// 0x50fdc28 0x78dc0e0cc0

--------------------------------
Class: KismetProceduralMeshLibrary.BlueprintFunctionLibrary.Object
	static void SliceProceduralMesh(ProceduralMeshComponent* InProcMesh, Vector PlanePosition, Vector PlaneNormal, bool bCreateOtherHalf, out ProceduralMeshComponent* OutOtherHalfProcMesh, enum CapOption, MaterialInterface* CapMaterial);// 0x5117db4 0x78dc0e22a0
	static void GetSectionFromStaticMesh(StaticMesh* InMesh, int LODIndex, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x5118514 0x78dc0e2380
	static void GetSectionFromProceduralMesh(ProceduralMeshComponent* InProcMesh, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x5118014 0x78dc0e2460
	static void GenerateBoxMesh(Vector BoxRadius, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x511959c 0x78dc0e2540
	static void CreateGridMeshWelded(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, float GridSpacing);// 0x5118c20 0x78dc0e2620
	static void CreateGridMeshTriangles(int NumX, int NumY, bool bWinding, out int[] Triangles);// 0x5118eec 0x78dc0e2700
	static void CreateGridMeshSplit(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, out Vector2D[] UV1s, float GridSpacing);// 0x51188d8 0x78dc0e27e0
	static void CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent* StaticMeshComponent, int LODIndex, ProceduralMeshComponent* ProcMeshComponent, bool bCreateCollision);// 0x5118390 0x78dc0e28c0
	static void ConvertQuadToTriangles(out int[] Triangles, int Vert0, int Vert1, int Vert2, int Vert3);// 0x51190a4 0x78dc0e29a0
	static void CalculateTangentsForMesh(out const Vector[] Vertices, out const int[] Triangles, out const Vector2D[] UVs, out Vector[] Normals, out ProcMeshTangent[] Tangents);// 0x51192b8 0x78dc0e2a80

--------------------------------
Class: SteamCallBack.Object

--------------------------------
Class: SteamPayBPLibrary.BlueprintFunctionLibrary.Object

--------------------------------
Class: TapCommonBPLibrary.BlueprintFunctionLibrary.Object
	static void UpdateGameInTapTap(FString appid);// 0x514441c 0x78dc0e52c0
	static void UpdateGameInTapGlobal(FString appid);// 0x51442cc 0x78dc0e53a0
	static FString[] RemoveEmptyString(FString[] stringArray);// 0x5143afc 0x78dc0e5480
	static <FString,FString> RemoveEmptyKey(<FString,FString> stringMap);// 0x5143e10 0x78dc0e5560
	static void Register(FString serviceClz, FString serviceImpl);// 0x51446f8 0x78dc0e5640
	static void OpenReviewInTapTap(FString appid);// 0x514417c 0x78dc0e1d60
	static void OpenReviewInTapGlobal(FString appid);// 0x514402c 0x78dc0e1e40
	static void IsTapTapInstalled();// 0x5144580 0x78dc0e1f20
	static void IsTapGlobalInstalled();// 0x514456c 0x78dc0e2000
	static void GetRegionCode();// 0x5144594 0x78dc0e20e0
	static void CallHandler(FString Command);// 0x51445a8 0x78dc0e21c0

--------------------------------
Class: TapThrobberWidgetStyle.SlateWidgetStyleContainerBase.Object
	TapThrobberStyle WidgetStyle;//[Offset: 0x30, Size: 0x3b8] 0x78dc0d7900

--------------------------------
Class: TapThrobberStyle.SlateWidgetStyle
	SlateBrush BackgroundBrush;//[Offset: 0x8, Size: 0x88] 0x78dbe01280
	SlateBrush PieceImage;//[Offset: 0x90, Size: 0x88] 0x78dbe01300
	SlateColor ColorAndOpacity;//[Offset: 0x118, Size: 0x28] 0x78dbe01380
	TextBlockStyle ContentStyle;//[Offset: 0x140, Size: 0x270] 0x78dbe01400
	float RotationRate;//[Offset: 0x3b0, Size: 0x4] 0x78dbe01480

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58] 0x78d3573e80
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x28] 0x78d3573f00
	Vector2D ShadowOffset;//[Offset: 0x88, Size: 0x8] 0x78d3573f80
	LinearColor ShadowColorAndOpacity;//[Offset: 0x90, Size: 0x10] 0x78d3574000
	SlateColor SelectedBackgroundColor;//[Offset: 0xa0, Size: 0x28] 0x78d3574080
	LinearColor HighlightColor;//[Offset: 0xc8, Size: 0x10] 0x78d3574100
	SlateBrush HighlightShape;//[Offset: 0xd8, Size: 0x88] 0x78d3574180
	SlateBrush StrikeBrush;//[Offset: 0x160, Size: 0x88] 0x78d3574200
	SlateBrush UnderlineBrush;//[Offset: 0x1e8, Size: 0x88] 0x78d3572180

--------------------------------
Class: TapWebBrowser.UserWidget.Widget.Visual.Object
	NativeWidgetHost* TapThrobberWrapper;//[Offset: 0x288, Size: 0x8] 0x78dc0d7480
	NativeWidgetHost* WebBrowser;//[Offset: 0x290, Size: 0x8] 0x78dc0d7500
	Button* BTN_GoBack;//[Offset: 0x298, Size: 0x8] 0x78dc0d7580
	Button* BTN_Close;//[Offset: 0x2a0, Size: 0x8] 0x78dc0d7600
	Button* BTN_Retry;//[Offset: 0x2a8, Size: 0x8] 0x78dc0d7680
	TextBlock* TB_Retry;//[Offset: 0x2b0, Size: 0x8] 0x78dc0d7700
	TextBlock* TB_ErrorTip;//[Offset: 0x2b8, Size: 0x8] 0x78dc0d7780
	Image* ErrorTipIcon;//[Offset: 0x2c0, Size: 0x8] 0x78dc0d7800
	PanelWidget* RetryPanel;//[Offset: 0x2c8, Size: 0x8] 0x78dc0d7880
	void Reload();// 0x51451ac 0x78dc0e5020
	void GoBack();// 0x51451e4 0x78dc0e5100
	void Close();// 0x51451c8 0x78dc0e51e0

--------------------------------
Class: NativeWidgetHost.Widget.Visual.Object

--------------------------------
Class: TUHUD.UserWidget.Widget.Visual.Object
	TextBlock* TitleLabel;//[Offset: 0x260, Size: 0x8] 0x78dc0d9280
	SizeBox* ImageBox;//[Offset: 0x268, Size: 0x8] 0x78dc0d9300
	Overlay* BackView;//[Offset: 0x270, Size: 0x8] 0x78dc0d9380
	static void ShowWaitAndToast(FString Toast);// 0x5145814 0x78dc0e4ca0
	static void ShowWait();// 0x51458dc 0x78dc0e4d80
	static void ShowToast(FString Toast, float TimeInterval);// 0x51456ec 0x78dc0e4e60
	static void Dismiss();// 0x5145800 0x78dc0e4f40

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x130, Size: 0x4] 0x78d7284680
	float HeightOverride;//[Offset: 0x134, Size: 0x4] 0x78d7284700
	float MinDesiredWidth;//[Offset: 0x138, Size: 0x4] 0x78d7284780
	float MinDesiredHeight;//[Offset: 0x13c, Size: 0x4] 0x78d7284800
	float MaxDesiredWidth;//[Offset: 0x140, Size: 0x4] 0x78d7284880
	float MaxDesiredHeight;//[Offset: 0x144, Size: 0x4] 0x78d7284900
	float MinAspectRatio;//[Offset: 0x148, Size: 0x4] 0x78d7284980
	float MaxAspectRatio;//[Offset: 0x14c, Size: 0x4] 0x78d7284a00
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1] 0x78d7284a80
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x150, Size: 0x1] 0x78d7284b00
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x150, Size: 0x1] 0x78d7284b80
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x150, Size: 0x1] 0x78d7284c00
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x150, Size: 0x1] 0x78d7284c80
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x150, Size: 0x1] 0x78d7284d00
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x150, Size: 0x1] 0x78d7284d80
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x150, Size: 0x1] 0x78d7284e00
	void SetWidthOverride(float InWidthOverride);// 0xbb15ff0 0x78d725b4c0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0xbb15e78 0x78d725b5a0
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0xbb15dbc 0x78d725b680
	void SetMinAspectRatio(float InMinAspectRatio);// 0xbb15b88 0x78d725b760
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0xbb15d00 0x78d725b840
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0xbb15c44 0x78d725b920
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0xbb15ae0 0x78d725ba00
	void SetHeightOverride(float InHeightOverride);// 0xbb15f34 0x78d725bae0
	void ClearWidthOverride();// 0xbb15fdc 0x78d725bbc0
	void ClearMinDesiredWidth();// 0xbb15e64 0x78d725bca0
	void ClearMinDesiredHeight();// 0xbb15da8 0x78d725bd80
	void ClearMinAspectRatio();// 0xbb15acc 0x78d725be60
	void ClearMaxDesiredWidth();// 0xbb15cec 0x78d725bf40
	void ClearMaxDesiredHeight();// 0xbb15c30 0x78d725c020
	void ClearMaxAspectRatio();// 0xbb15ab8 0x78d725c100
	void ClearHeightOverride();// 0xbb15f20 0x78d725c1e0

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0xbb0c534 0x78d7259a80

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x78d7282f80
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x78d7283000
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x78d7283080
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbb0ca84 0x78d72597e0
	void SetPadding(Margin InPadding);// 0xbb0cbd4 0x78d72598c0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbb0cb2c 0x78d72599a0

--------------------------------
Class: TUWebBrowser.Widget.Visual.Object
	delegate OnUrlChanged;//[Offset: 0x108, Size: 0x10] 0x78dc0d8a00
	delegate OnTitleChanged;//[Offset: 0x118, Size: 0x10] 0x78dc0d8a80
	delegate OnBeforePopup;//[Offset: 0x128, Size: 0x10] 0x78dc0d8b00
	delegate OnLoadCompleted;//[Offset: 0x138, Size: 0x10] 0x78dc0d8b80
	delegate OnLoadError;//[Offset: 0x148, Size: 0x10] 0x78dc0d8c00
	delegate OnLoadStarted;//[Offset: 0x158, Size: 0x10] 0x78dc0d8c80
	FString InitialURL;//[Offset: 0x178, Size: 0x10] 0x78dc0d8d00
	bool bSupportsTransparency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1] 0x78dc0d8d80
	void TUSimpleDelegate__DelegateSignature();// 0xaa7cd18 0x78dc0e45a0
	void TUOnTextChanged__DelegateSignature(FString Text);// 0xaa7cd18 0x78dc0e4680
	void TUOnBeforePopup__DelegateSignature(FString URL, FString Frame);// 0xaa7cd18 0x78dc0e4760
	void LoadURL(FString NewURL);// 0x514b6a4 0x78dc0e4840
	void LoadString(FString Contents, FString DummyURL);// 0x514b46c 0x78dc0e4920
	FString GetUrl();// 0x514b1ec 0x78dc0e4a00
	FText GetTitleText();// 0x514b2c0 0x78dc0e4ae0
	void ExecuteJavascript(FString ScriptText);// 0x514b394 0x78dc0e4bc0

--------------------------------
Class: TUWebBrowserAssetManager.Object
	Material* DefaultMaterial;//[Offset: 0x28, Size: 0x28] 0x78dc0d8980

--------------------------------
Class: TorchLightHotUpdateBPLibrary.BlueprintFunctionLibrary.Object
	static void WriteWhiteListCode(FString magicCode);// 0x5190574 0x78dc0e59c0
	static bool UseSliceDownload();// 0x5190c60 0x78dc0e5aa0
	static bool UserConfirmDownload();// 0x5191074 0x78dc0e5b80
	static void TryResetHotUpdate();// 0x51910ac 0x78dc0e5c60
	static void TryRefreshCurrentState();// 0x51910c0 0x78dc0e5d40
	static void SyncVersonServerData(out FString[] Keys, out FString[] Values);// 0x5190c98 0x78dc0e5e20
	static bool StartTorchLightHotUpdate(delegate notifyDelegate);// 0x51910d4 0x78dc0e5f00
	static void SetBackgroundDownloadingTexts(out const FName TableId);// 0x519024c 0x78dc0e5fe0
	static void ReporteSDKEventWithParam(FString EventName, out const <FString,FString> Param);// 0x51902f0 0x78dc0e60c0
	static void ReporteSDKEvent(FString EventName);// 0x5190460 0x78dc0e61a0
	static void ReadWhiteListCode(out FString magicCode);// 0x519063c 0x78dc0e6280
	static void PreMountPak();// 0x5190210 0x78dc0e6360
	static bool NeedCheckHotUpdate();// 0x5191a08 0x78dc0e6440
	static void JumpToAPPStore();// 0x5190528 0x78dc0e6520
	static bool IsXDDeveloper();// 0x519053c 0x78dc0e6600
	static bool IsPakInFolder(FString Filename, FString folderName);// 0x5190800 0x78dc0e66e0
	static bool IsCNRegion();// 0x5191190 0x78dc0e67c0
	static FString GetVersionConfigFileName();// 0x51912d0 0x78dc0e68a0
	static FString GetUrl(FString Str);// 0x51916f4 0x78dc0e6980
	static FString GetTotalDownloadStr();// 0x5190abc 0x78dc0e6a60
	static int GetTotalDownloadPakNum();// 0x519094c 0x78dc0e6b40
	static float GetTimeout();// 0x51911c8 0x78dc0e6c20
	static int GetSliceDownloadSize();// 0x5190bc4 0x78dc0e6d00
	static int GetRemainDownloadPakNum();// 0x5190980 0x78dc0e6de0
	static FString GetPreMountPackFolderPath();// 0x5191478 0x78dc0e6ec0
	static void GetPlatformName(out FString outName);// 0x5191900 0x78dc0e6fa0
	static int GetLocalVersion();// 0x51919d4 0x78dc0e7080
	static byte GetHotUpdateState();// 0x5191040 0x78dc0e7160
	static TLNoticeInfo GetHotUpdateNotice();// 0x5190ecc 0x78dc0e7240
	static int GetDownloadSpeed();// 0x5190b90 0x78dc0e7320
	static FString GetDownloadProgressStr();// 0x51909b4 0x78dc0e3a40
	static int GetDownloadProgress();// 0x5190a88 0x78dc0e3b20
	static FString GetDownloadPackFolderPath();// 0x519154c 0x78dc0e3c00
	static FString GetDownloadConfigFolderPath();// 0x51913a4 0x78dc0e3ce0
	static FString GetDownloadCacheFileName();// 0x51911fc 0x78dc0e3dc0
	static FString GetDisplayVersion();// 0x519182c 0x78dc0e3ea0
	static float GetDiskNeedSizeMB();// 0x5190bf8 0x78dc0e3f80
	static float GetDiskFreeSizeMB();// 0x5190c2c 0x78dc0e4060
	static FString GetChannel();// 0x5191620 0x78dc0e4140
	static void ForceRestartApp();// 0x5190224 0x78dc0e4220
	static bool DeletePakInDisk(FString Filename);// 0x5190724 0x78dc0e4300
	static void DelayedRestartImpl();// 0x5190238 0x78dc0e43e0
	static void ClearAllPaks();// 0x5190710 0x78dc0e44c0

--------------------------------
Class: TLNoticeInfo
	bool hasNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe02480
	FString Title;//[Offset: 0x8, Size: 0x10] 0x78dbe02500
	FString Content;//[Offset: 0x18, Size: 0x10] 0x78dbe02580
	int64 startTime;//[Offset: 0x28, Size: 0x8] 0x78dbe02600
	int64 endTime;//[Offset: 0x30, Size: 0x8] 0x78dbe02680
	FString desc;//[Offset: 0x38, Size: 0x10] 0x78dbe02700
	DateTime startDate;//[Offset: 0x48, Size: 0x8] 0x78dbe02780

--------------------------------
Class: TLHotUpdateStateBase.Object

--------------------------------
Class: TLHotUpdateState_Download.TLHotUpdateStateBase.Object
	void OnMd5VeryfyFinished(FString Result);// 0x5192f9c 0x78dc0e58e0

--------------------------------
Class: TLHotUpdateState_BackgroundDownload.TLHotUpdateState_Download.TLHotUpdateStateBase.Object

--------------------------------
Class: TLHotUpdateState_DiffPakInfo.TLHotUpdateStateBase.Object

--------------------------------
Class: TLHotUpdateState_MountPak.TLHotUpdateStateBase.Object

--------------------------------
Class: TLHotUpdateState_PrecompilePSOCache.TLHotUpdateStateBase.Object
	void CheckPSOPrecompileFinish();// 0x5193484 0x78dc0e5720
	void CheckPrecompilesRemaining();// 0x5193498 0x78dc0e5800

--------------------------------
Class: TLHotUpdateState_RequestServer.TLHotUpdateStateBase.Object

--------------------------------
Class: XDLivePatchBPFunctionLibrary.BlueprintFunctionLibrary.Object
	static void QueryLivePatch(delegate PatchDownloadDelegate, delegate PatchFinishDelegate, delegate PatchErrorDelegate);// 0x51a39b4 0x78dc0e8580
	static void NewQueryLivePatch();// 0x51a3760 0x78dc0e8660
	static void NewInitLivePatch(delegate PatchDownloadDelegate, delegate PatchFinishDelegate, delegate PatchErrorDelegate);// 0x51a3774 0x78dc0e8740
	static void NewApplyLivePatch();// 0x51a374c 0x78dc0e8820
	static bool IsLivePatchEnabled();// 0x51a3afc 0x78dc0e8900
	static int GetRemainLivePatchNum();// 0x51a3718 0x78dc0e89e0
	static float GetPatchDownloadProgress();// 0x51a367c 0x78dc0e8ac0
	static int GetDownloadPatchesSize();// 0x51a36b0 0x78dc0e8ba0
	static int GetAllPatchesSize();// 0x51a36e4 0x78dc0e8c80
	static void ApplyLivePatch(delegate PatchFinishDelegate, delegate PatchErrorDelegate);// 0x51a38bc 0x78dc0e8d60

--------------------------------
Class: XDLivePatchSettings.Object
	FString CDNHostAddress;//[Offset: 0x28, Size: 0x10] 0x78dc0da880
	FString Channel;//[Offset: 0x38, Size: 0x10] 0x78dc0da900
	FString VersionFileName;//[Offset: 0x48, Size: 0x10] 0x78dc0da980
	int BinaryVersion;//[Offset: 0x58, Size: 0x4] 0x78dc0daa00
	int LimitVersion;//[Offset: 0x5c, Size: 0x4] 0x78dc0daa80
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78dc0dab00
	bool UseResume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x78dc0dab80
	int SliceSize;//[Offset: 0x64, Size: 0x4] 0x78dc0dac00
	bool UseMultiThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78dc0dac80

--------------------------------
Class: ExportDeviceProfileCommandlet.Commandlet.Object

--------------------------------
Class: XDAdioCheatManager.CheatManager.Object

--------------------------------
Class: XDAudioCheatManager.CheatManager.Object
	static void WwiseCPUMonitor();// 0x51ab8c4 0x78dc0ec800

--------------------------------
Class: XDAudioStudioBPLibrary.BlueprintFunctionLibrary.Object
	static void StopProfilerCapture();// 0x51ac024 0x78dc0ee320
	static void StopAll();// 0x51aee00 0x78dc0ee400
	static void StopActorEventByPlayingID(int PlayingID, Object* parent, int Duration, enum FadeCurve);// 0x51adc28 0x78dc0ee4e0
	static void StopActor(Actor* Actor);// 0x51adb90 0x78dc0ee5c0
	static void Stop(AkGameObject* AkObj);// 0x51ac5c0 0x78dc0ee6a0
	static void StartProfilerCapture(FString Filename);// 0x51ac038 0x78dc0eadc0
	static void SetSwitchOnAkComponent(AkSwitchValue* SwitchValue, AkComponent* AkComp, FString SwitchGroup, FString SwitchState);// 0x51ad3f4 0x78dc0eaea0
	static void SetSwitch2D(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x51ad180 0x78dc0eaf80
	static void SetSwitch(AkSwitchValue* SwitchValue, Actor* Actor, FName SwitchGroup, FName SwitchState);// 0x51ad6c0 0x78dc0eb060
	static void SetState(AkStateValue* StateValue, FName StateGroup, FName State);// 0x51ad834 0x78dc0eb140
	static void SetRTPCValueOnAkComponent(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, AkComponent* AkComp, FString RTPC);// 0x51acd28 0x78dc0eb220
	static void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, Actor* Actor, FName RTPC);// 0x51acfbc 0x78dc0eb300
	static void SetOutputBusVolume(float BusVolume, Actor* Actor);// 0x51adf7c 0x78dc0eb3e0
	static void SetMultiplePositions(AkComponent* GameObjectAkComponent, Transform[] Positions, enum MultiPositionType);// 0x51ac3d8 0x78dc0eb4c0
	static void SetCurrentAudioCultureAsync(FString AudioCulture, out const delegate Completed);// 0x51ada34 0x78dc0eb5a0
	void SetAudioDebug(int enable, int eventnum, int statenum, int switchnum, int faileventnum);// 0x51ac100 0x78dc0eb680
	static int PostEventFollowActorOrComponent(AkAudioEvent* AkEvent, Object* parent, int CallbackMask, out const delegate PostEventCallback, bool bStopWhenAttachedToDestroyed, FString EventName);// 0x51ae3cc 0x78dc0eb760
	static void PostEventByName(FString EventName, Actor* Actor, bool bStopWhenAttachedToDestroyed);// 0x51ae918 0x78dc0eb840
	static int PostEventAtLocation(AkAudioEvent* AkEvent, Vector Location, Rotator Orientation, FString EventName, Object* WorldContextObject);// 0x51ae1d8 0x78dc0eb920
	static PostEventAsync* PostEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, Actor* Actor, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool bStopWhenAttachedToDestroyed);// 0x51abb20 0x78dc0eba00
	static int PostEvent2D(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString EventName);// 0x51ae6c4 0x78dc0ebae0
	static int PostEvent(AkAudioEvent* AkEvent, Actor* Actor, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool bStopWhenAttachedToDestroyed, FString EventName);// 0x51aea84 0x78dc0ebbc0
	static int PostAssociatedAkEvent(AkGameObject* AkObj, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x51ac658 0x78dc0ebca0
	static int PostAkEvent(AkGameObject* AkObj, AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x51ac820 0x78dc0ebd80
	static int Play2DSound(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString EventName);// 0x51abdd0 0x78dc0ebe60
	static bool IsGame(Object* WorldContextObject);// 0x51aee14 0x78dc0ebf40
	static bool IsEditor();// 0x51aeec0 0x78dc0ec020
	static void GetRTPCValue(AkRtpc* RTPCValue, int PlayingID, enum InputValueType, out float Value, out enum OutputValueType, Actor* Actor, FName RTPC);// 0x51acabc 0x78dc0ec100
	static AkComponent* GetDefaultListener();// 0x51ac2d0 0x78dc0ec1e0
	static FString GetCurrentAudioCulture();// 0x51ad960 0x78dc0ec2c0
	static AkComponent* GetAkComponent(SceneComponent* AttachToComponent, out bool ComponentCreated, FName AttachPointName, Vector Location, byte LocationType);// 0x51adda4 0x78dc0ec3a0
	static void ExecuteActionOnPlayingID(enum ActionType, int PlayingID, int TransitionDuration, enum FadeCurve);// 0x51ae060 0x78dc0ec480
	static bool CheckIsAkEventAndMediaIsLoaded(Object* Obj);// 0x51ac32c 0x78dc0ec560
	static void AkWakeUpFromSuspend();// 0x51ac304 0x78dc0ec640
	static void AkSuspend();// 0x51ac318 0x78dc0ec720

--------------------------------
Class: XDGAccountBPLibrary.BlueprintFunctionLibrary.Object
	static void OpenUserCenter();// 0x51b30f0 0x78dc0edb40
	static void OpenAccountCancellation();// 0x51b30c8 0x78dc0edc20
	static void Logout();// 0x51b30dc 0x78dc0edd00
	static void LoginByType(FString loginType);// 0x51b312c 0x78dc0edde0
	static void Login(FString[] loginTypes);// 0x51b327c 0x78dc0edec0
	static bool IsTokenActiveWithType(FString loginType);// 0x51b2f6c 0x78dc0edfa0
	static void GetUser();// 0x51b3104 0x78dc0ee080
	static void BindByType(FString loginType);// 0x51b2e1c 0x78dc0ee160
	static void AddUserStatusChangeCallback();// 0x51b3118 0x78dc0ee240

--------------------------------
Class: XDGCommonBPLibrary.BlueprintFunctionLibrary.Object
	static void TrackUser(FString userId);// 0x51b7998 0x78dc0efe40
	static void TrackRole(FString ServerId, FString RoleId, FString RoleName, int Level);// 0x51b7638 0x78dc0eff20
	static void TrackEvent(FString EventName);// 0x51b74e8 0x78dc0ecaa0
	static void TrackAchievement();// 0x51b71d8 0x78dc0ecb80
	static void StoreReview();// 0x51b7ef0 0x78dc0ecc60
	static void ShareImage(int Type, FString imagePath);// 0x51b7ae8 0x78dc0ecd40
	static void ShareFlavors(int Type, FString Uri, FString Message);// 0x51b7c7c 0x78dc0ece20
	static void SetLanguage(int langType);// 0x51b8260 0x78dc0ecf00
	static void SetCurrentUserPushServiceEnable(bool enable);// 0x51b7448 0x78dc0ecfe0
	static void SetCountryRegion(FString region);// 0x51b7284 0x78dc0ed0c0
	static void Report(FString ServerId, FString RoleId, FString RoleName);// 0x51b7f04 0x78dc0ed1a0
	static bool IsInitialized();// 0x51b8214 0x78dc0ed280
	static bool IsCurrentUserPushServiceEnable();// 0x51b7410 0x78dc0ed360
	static void InitSDK();// 0x51b824c 0x78dc0ed440
	static void GetXDGInfoJson();// 0x51b73e8 0x78dc0ed520
	static FString GetSDKVersionName();// 0x51b82f8 0x78dc0ed600
	static void GetRegionInfo();// 0x51b73fc 0x78dc0ed6e0
	static void EventCreateRole();// 0x51b71b0 0x78dc0ed7c0
	static void EventCompletedTutorial();// 0x51b71c4 0x78dc0ed8a0
	static void DisableAgreementUI();// 0x51b73d4 0x78dc0ed980
	static void DevelopInit(int Num);// 0x51b71ec 0x78dc0eda60

--------------------------------
Class: XDGPaymentBPLibrary.BlueprintFunctionLibrary.Object
	static void QueryWithProductIdArray(FString[] ProductIds);// 0x51bdccc 0x78dc0ef820
	static void QueryRestoredPurchases();// 0x51bdcb8 0x78dc0ef900
	static void PurchaseToken(FString transactionIdentifier, FString productIdentifier, FString OrderId, FString RoleId, FString ServerId, FString ext);// 0x51bd0cc 0x78dc0ef9e0
	static void PayWithWeb(FString OrderId, FString productId, FString productName, float payAmount, FString RoleId, FString ServerId, FString extras);// 0x51bd67c 0x78dc0efac0
	static void PayWithProduct(FString OrderId, FString productId, FString RoleId, FString ServerId, FString ext);// 0x51bded0 0x78dc0efba0
	static void CheckRefundStatusWithUI();// 0x51bdc90 0x78dc0efc80
	static void CheckRefundStatus();// 0x51bdca4 0x78dc0efd60

--------------------------------
Class: XUAccountCancellationWidget.TapWebBrowser.UserWidget.Widget.Visual.Object
	TextBlock* TitleLabel;//[Offset: 0x2d0, Size: 0x8] 0x78dc0f1b00

--------------------------------
Class: XUPayHintAlert.UserWidget.Widget.Visual.Object
	TextBlock* TitleLabel;//[Offset: 0x260, Size: 0x8] 0x78dc0f1800
	TextBlock* DetailLabel;//[Offset: 0x268, Size: 0x8] 0x78dc0f1880
	TextBlock* ContentLabel;//[Offset: 0x270, Size: 0x8] 0x78dc0f1900
	TextBlock* TailLabel;//[Offset: 0x278, Size: 0x8] 0x78dc0f1980
	TextBlock* ButtonLabel;//[Offset: 0x280, Size: 0x8] 0x78dc0f1a00
	Button* ContactCustomerServiceButton;//[Offset: 0x288, Size: 0x8] 0x78dc0f1a80
	void OnContactCustomerServiceBtnClick();// 0x51ebeac 0x78dc0ef740

--------------------------------
Class: XUPayWebWidget.TapWebBrowser.UserWidget.Widget.Visual.Object

--------------------------------
Class: XUPrivacyDisagreeWidget.UserWidget.Widget.Visual.Object
	TextBlock* ContentLabel;//[Offset: 0x260, Size: 0x8] 0x78dc0f1580
	Button* ComfirmButton;//[Offset: 0x268, Size: 0x8] 0x78dc0f1600
	TextBlock* ComfirmButtonLabel;//[Offset: 0x270, Size: 0x8] 0x78dc0f1680
	Button* DeclineButton;//[Offset: 0x278, Size: 0x8] 0x78dc0f1700
	TextBlock* DeclineButtonLabel;//[Offset: 0x280, Size: 0x8] 0x78dc0f1780
	void OnDeclineBtnClick();// 0x51ec258 0x78dc0ef580
	void OnComfirmBtnClick();// 0x51ec26c 0x78dc0ef660

--------------------------------
Class: XUPrivacyWidget.TapWebBrowser.UserWidget.Widget.Visual.Object
	Button* ComfirmButton;//[Offset: 0x2d0, Size: 0x8] 0x78dc0f1180
	TextBlock* ComfirmButtonLabel;//[Offset: 0x2d8, Size: 0x8] 0x78dc0f1200
	Image* ComfirmButtonImage;//[Offset: 0x2e0, Size: 0x8] 0x78dc0f1280
	Button* DeclineButton;//[Offset: 0x2e8, Size: 0x8] 0x78dc0f1300
	TextBlock* DeclineButtonLabel;//[Offset: 0x2f0, Size: 0x8] 0x78dc0f1380
	CheckBox* AdditionalCheckBox;//[Offset: 0x2f8, Size: 0x8] 0x78dc0f1400
	TextBlock* AdditionalCheckLabel;//[Offset: 0x300, Size: 0x8] 0x78dc0f1480
	void OnDeclineBtnClick();// 0x51ec5a8 0x78dc0ef2e0
	void OnConfirmBtnClick();// 0x51ec5bc 0x78dc0ef3c0
	void OnCheckStateChanged(bool IsChecked);// 0x51ec5d0 0x78dc0ef4a0

--------------------------------
Class: XUUserCenterItemWidget.UserWidget.Widget.Visual.Object
	TextBlock* TitleLabel;//[Offset: 0x2a0, Size: 0x8] 0x78dc0f3000
	Image* TitleImage;//[Offset: 0x2a8, Size: 0x8] 0x78dc0f3080
	Button* BindButton;//[Offset: 0x2b0, Size: 0x8] 0x78dc0f3100
	TextBlock* BindLabel;//[Offset: 0x2b8, Size: 0x8] 0x78dc0f3180
	Image* ArrowImage;//[Offset: 0x2c0, Size: 0x8] 0x78dc0f1100
	void OnBindBtnClick();// 0x51ed450 0x78dc0ef200

--------------------------------
Class: XUUserCenterTipWidget.UserWidget.Widget.Visual.Object
	TextBlock* TitleLabel;//[Offset: 0x260, Size: 0x8] 0x78dc0f2a80
	TextBlock* DetailLabel;//[Offset: 0x268, Size: 0x8] 0x78dc0f2b00
	EditableTextBox* TextBox;//[Offset: 0x270, Size: 0x8] 0x78dc0f2b80
	Button* GreenButton;//[Offset: 0x278, Size: 0x8] 0x78dc0f2c00
	TextBlock* GreenButtonLabel;//[Offset: 0x280, Size: 0x8] 0x78dc0f2c80
	Button* WhiteButton;//[Offset: 0x288, Size: 0x8] 0x78dc0f2d00
	TextBlock* WhiteButtonLabel;//[Offset: 0x290, Size: 0x8] 0x78dc0f2d80
	TextBlock* RedTipLabel;//[Offset: 0x298, Size: 0x8] 0x78dc0f2e00
	Texture2D* GrayTexture;//[Offset: 0x338, Size: 0x8] 0x78dc0f2e80
	Texture2D* RedTexture;//[Offset: 0x340, Size: 0x8] 0x78dc0f2f00
	void OnWhiteBtnClick();// 0x51ed8bc 0x78dc0eef60
	void OnTextBoxValueChange(out const FText Content);// 0x51ed740 0x78dc0ef040
	void OnGreenBtnClick();// 0x51ed8d0 0x78dc0ef120

--------------------------------
Class: EditableTextBox.Widget.Visual.Object
	FText Text;//[Offset: 0x108, Size: 0x18] 0x78d3573000
	delegate TextDelegate;//[Offset: 0x120, Size: 0x10] 0x78d3573080
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x130, Size: 0x7f8] 0x78d3571a80
	SlateWidgetStyleAsset* Style;//[Offset: 0x928, Size: 0x8] 0x78d3571b00
	FText HintText;//[Offset: 0x930, Size: 0x18] 0x78d3571b80
	delegate HintTextDelegate;//[Offset: 0x948, Size: 0x10] 0x78d3571c00
	SlateFontInfo Font;//[Offset: 0x958, Size: 0x58] 0x78d3571c80
	LinearColor ForegroundColor;//[Offset: 0x9b0, Size: 0x10] 0x78d3571d00
	LinearColor BackgroundColor;//[Offset: 0x9c0, Size: 0x10] 0x78d3571d80
	LinearColor ReadOnlyForegroundColor;//[Offset: 0x9d0, Size: 0x10] 0x78d3571e00
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1] 0x78d3571e80
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e1, Size: 0x1] 0x78d3571f00
	float MinimumDesiredWidth;//[Offset: 0x9e4, Size: 0x4] 0x78d3571f80
	Margin Padding;//[Offset: 0x9e8, Size: 0x10] 0x78d3572000
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f8, Size: 0x1] 0x78d3572080
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f9, Size: 0x1] 0x78d3572100
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fa, Size: 0x1] 0x78d3570080
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fb, Size: 0x1] 0x78d3570100
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fc, Size: 0x1] 0x78d3570180
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fd, Size: 0x1] 0x78d3570200
	byte KeyboardType;//[Offset: 0x9fe, Size: 0x1] 0x78d3570280
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x9ff, Size: 0x1] 0x78d3570300
	enum VirtualKeyboardTrigger;//[Offset: 0xa00, Size: 0x1] 0x78cdd5c040
	enum VirtualKeyboardDismissAction;//[Offset: 0xa01, Size: 0x1] 0x78cdd5bfa0
	byte Justification;//[Offset: 0xa02, Size: 0x1] 0x78d3570480
	byte VerticalJustification;//[Offset: 0xa03, Size: 0x1] 0x78d3570500
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xa04, Size: 0x3] 0x78d3570580
	delegate OnTextChanged;//[Offset: 0xa08, Size: 0x10] 0x78d3570600
	delegate OnTextCommitted;//[Offset: 0xa18, Size: 0x10] 0x78d3570680
	void SetVerticalJustification(byte InVerticalJustification);// 0xbafc88c 0x78d3d2b5a0
	void SetText(FText InText);// 0xbafd048 0x78d3d2b680
	void SetJustification(byte InJustification);// 0xbafc934 0x78d3d2b760
	void SetIsReadOnly(bool bReadOnly);// 0xbafcad8 0x78d3d2b840
	void SetIsPassword(bool bIsPassword);// 0xbafca28 0x78d3d2b920
	void SetHintText(FText InText);// 0xbafcde8 0x78d3d2ba00
	void SetError(FText InError);// 0xbafcb88 0x78d3d2bae0
	void OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0xaa7cd18 0x78d3d2bbc0
	void OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0xaa7cd18 0x78d3d2bca0
	bool HasError();// 0xbafc9dc 0x78d3d2bd80
	FText GetText();// 0xbafd2a8 0x78d3d2be60
	void ClearError();// 0xbafca14 0x78d3d2bf40

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundImageNormal;//[Offset: 0x8, Size: 0x88] 0x78d3573100
	SlateBrush BackgroundImageHovered;//[Offset: 0x90, Size: 0x88] 0x78d3573180
	SlateBrush BackgroundImageFocused;//[Offset: 0x118, Size: 0x88] 0x78d3571100
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x1a0, Size: 0x88] 0x78d3571180
	Margin Padding;//[Offset: 0x228, Size: 0x10] 0x78d3571200
	SlateFontInfo Font;//[Offset: 0x238, Size: 0x58] 0x78d3571280
	SlateColor ForegroundColor;//[Offset: 0x290, Size: 0x28] 0x78d3571300
	SlateColor BackgroundColor;//[Offset: 0x2b8, Size: 0x28] 0x78d3571380
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x2e0, Size: 0x28] 0x78d3571400
	Margin HScrollBarPadding;//[Offset: 0x308, Size: 0x10] 0x78d3571480
	Margin VScrollBarPadding;//[Offset: 0x318, Size: 0x10] 0x78d3571500
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x328, Size: 0x4d0] 0x78d3571a00

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 0x88] 0x78d3571580
	SlateBrush VerticalBackgroundImage;//[Offset: 0x90, Size: 0x88] 0x78d3571600
	SlateBrush VerticalTopSlotImage;//[Offset: 0x118, Size: 0x88] 0x78d3571680
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1a0, Size: 0x88] 0x78d3571700
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x228, Size: 0x88] 0x78d3571780
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2b0, Size: 0x88] 0x78d3571800
	SlateBrush NormalThumbImage;//[Offset: 0x338, Size: 0x88] 0x78d3571880
	SlateBrush HoveredThumbImage;//[Offset: 0x3c0, Size: 0x88] 0x78d3571900
	SlateBrush DraggedThumbImage;//[Offset: 0x448, Size: 0x88] 0x78d3571980

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cd97e880

--------------------------------
Class: XUUserCenterWidget.UserWidget.Widget.Visual.Object
	TextBlock* TitleLabel;//[Offset: 0x260, Size: 0x8] 0x78dc0f2500
	TextBlock* InfoTitleLabel;//[Offset: 0x268, Size: 0x8] 0x78dc0f2580
	TextBlock* CurrentLoginTitleLabel;//[Offset: 0x270, Size: 0x8] 0x78dc0f2600
	TextBlock* IDTitleLabel;//[Offset: 0x278, Size: 0x8] 0x78dc0f2680
	TextBlock* BindInfoTitleLabel;//[Offset: 0x280, Size: 0x8] 0x78dc0f2700
	Button* CopyButton;//[Offset: 0x288, Size: 0x8] 0x78dc0f2780
	Button* CloseButton;//[Offset: 0x290, Size: 0x8] 0x78dc0f2800
	VerticalBox* ListBox;//[Offset: 0x298, Size: 0x8] 0x78dc0f2880
	SizeBox* EmptyBox2;//[Offset: 0x2a0, Size: 0x8] 0x78dc0f2900
	Button* ErrorButton;//[Offset: 0x2a8, Size: 0x8] 0x78dc0f2980
	TextBlock* ErrorButtonLabel;//[Offset: 0x2b0, Size: 0x8] 0x78dc0f2a00
	void OnErrorBtnClick();// 0x51edc58 0x78dc0eecc0
	void OnCopyBtnClick();// 0x51edc6c 0x78dc0eeda0
	void OnCloseBtnClick();// 0x51edc80 0x78dc0eee80

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0xbb2e7dc 0x78d725f4a0

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 0x8] 0x78d728a000
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x78d728a080
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x78d728a100
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x78d728a180
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbb2eda0 0x78d725f120
	void SetSize(SlateChildSize InSize);// 0xbb2eef0 0x78d725f200
	void SetPadding(Margin InPadding);// 0xbb2efa4 0x78d725f2e0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbb2ee48 0x78d725f3c0

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4] 0x78dbe8db80
	byte SizeRule;//[Offset: 0x4, Size: 0x1] 0x78dbe8dc00

--------------------------------
Class: XDThemisBPLibrary.BlueprintFunctionLibrary.Object
	static void SetGameScene(FString SceneId);// 0x520379c 0x78dc101900
	static void SetGamePlayer(FString PlayerId);// 0x5203864 0x78dc1019e0
	static void ReportCustomMessage(FString CustomMessage);// 0x52034d4 0x78dc101ac0
	static void LogReport(FString Format);// 0x5203124 0x78dc101ba0
	static void InitSDKWithAppId(FString appid);// 0x520392c 0x78dc101c80
	static void InitSDK();// 0x52039f4 0x78dc0ee780
	static void EventTracking(FString Format);// 0x520359c 0x78dc0ee860
	static void DebugLog(FString Format);// 0x520305c 0x78dc0ee940
	static void CSharpReportException(FString Name, FString reason, FString StackTrace, int nType, bool isQuitApp);// 0x52031ec 0x78dc0eea20
	static void ConfigDebugMode(bool bEnable);// 0x5203434 0x78dc0eeb00
	static void AddCustomField(FString StrKey, FString StrValue);// 0x5203664 0x78dc0eebe0

--------------------------------
Class: XDThemisSettings.DeveloperSettings.Object
	FString Native_AppID;//[Offset: 0x38, Size: 0x10] 0x78dc0f3d80
	FString Oversea_AppID;//[Offset: 0x48, Size: 0x10] 0x78dc0f3e00

--------------------------------
Class: AnimSharingStateInstance.AnimInstance.Object
	AnimSequence* AnimationToPlay;//[Offset: 0x2b8, Size: 0x8] 0x78dc0f8b80
	float PermutationTimeOffset;//[Offset: 0x2c0, Size: 0x4] 0x78dc0f8c00
	float PlayRate;//[Offset: 0x2c4, Size: 0x4] 0x78dc0f8c80
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78dc0f8d00
	AnimSharingInstance* Instance;//[Offset: 0x2d0, Size: 0x8] 0x78dc0f8d80
	void GetInstancedActors(out Actor*[] Actors);// 0x5211218 0x78dc104840

--------------------------------
Class: AnimSharingInstance.Object
	Actor*[] RegisteredActors;//[Offset: 0x28, Size: 0x10] 0x78dbffea20
	AnimationSharingStateProcessor* StateProcessor;//[Offset: 0x88, Size: 0x8] 0x78dc0f8580
	AnimSequence*[] UsedAnimationSequences;//[Offset: 0xc8, Size: 0x10] 0x78dbffeac0
	Enum* StateEnum;//[Offset: 0xe8, Size: 0x8] 0x78dc0f8680
	Actor* SharingActor;//[Offset: 0xf0, Size: 0x8] 0x78dc0f8700

--------------------------------
Class: AnimationSharingStateProcessor.Object
	Enum* AnimationStateEnum;//[Offset: 0x28, Size: 0x28] 0x78dc0f9c80
	void ProcessActorState(out int OutState, Actor* InActor, byte CurrentState, byte OnDemandState, out bool bShouldProcess);// 0x5212e10 0x78dc104300
	Enum* GetAnimationStateEnum();// 0x5212dd4 0x78dc1043e0

--------------------------------
Class: AnimSharingTransitionInstance.AnimInstance.Object
	SkeletalMeshComponent* FromComponent;//[Offset: 0x2b8, Size: 0x8] 0x78dc0f8980
	SkeletalMeshComponent* ToComponent;//[Offset: 0x2c0, Size: 0x8] 0x78dc0f8a00
	float BlendTime;//[Offset: 0x2c8, Size: 0x4] 0x78dc0f8a80
	bool bBlendBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1] 0x78dc0f8b00

--------------------------------
Class: AnimSharingAdditiveInstance.AnimInstance.Object
	SkeletalMeshComponent* BaseComponent;//[Offset: 0x2b8, Size: 0x8] 0x78dc0f8780
	AnimSequence* AdditiveAnimation;//[Offset: 0x2c0, Size: 0x8] 0x78dc0f8800
	float Alpha;//[Offset: 0x2c8, Size: 0x4] 0x78dc0f8880
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1] 0x78dc0f8900

--------------------------------
Class: AnimationSharingManager.Object
	Skeleton*[] Skeletons;//[Offset: 0x28, Size: 0x10] 0x78dbffe8e0
	AnimSharingInstance*[] PerSkeletonData;//[Offset: 0x38, Size: 0x10] 0x78dbffe980
	void RegisterActorWithSkeletonBP(Actor* InActor, const Skeleton* SharingSkeleton);// 0x52120d4 0x78dc1044c0
	static AnimationSharingManager* GetAnimationSharingManager(Object* WorldContextObject);// 0x52122b8 0x78dc1045a0
	static bool CreateAnimationSharingManager(Object* WorldContextObject, const AnimationSharingSetup* Setup);// 0x52121c4 0x78dc104680
	static bool AnimationSharingEnabled();// 0x521209c 0x78dc104760

--------------------------------
Class: AnimationSharingSetup.Object
	PerSkeletonAnimationSharingSetup[] SkeletonSetups;//[Offset: 0x28, Size: 0x10] 0x78dbffe840
	AnimationSharingScalability ScalabilitySettings;//[Offset: 0x38, Size: 0x10] 0x78dc0fa080

--------------------------------
Class: PerSkeletonAnimationSharingSetup
	Skeleton* Skeleton;//[Offset: 0x0, Size: 0x8] 0x78dbe09e00
	SkeletalMesh* SkeletalMesh;//[Offset: 0x8, Size: 0x8] 0x78dbe09e80
	class AnimSharingTransitionInstance* BlendAnimBlueprint;//[Offset: 0x10, Size: 0x8] 0x78d3617540
	class AnimSharingAdditiveInstance* AdditiveAnimBlueprint;//[Offset: 0x18, Size: 0x8] 0x78d36175e0
	class AnimationSharingStateProcessor* StateProcessorClass;//[Offset: 0x20, Size: 0x8] 0x78d3617680
	AnimationStateEntry[] AnimationStates;//[Offset: 0x28, Size: 0x10] 0x78d3617860

--------------------------------
Class: AnimationStateEntry
	byte State;//[Offset: 0x0, Size: 0x1] 0x78dbe09f00
	AnimationSetup[] AnimationSetups;//[Offset: 0x8, Size: 0x10] 0x78d36177c0
	bool bOnDemand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78dbe0a180
	bool bAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78dbe0a200
	float BlendTime;//[Offset: 0x1c, Size: 0x4] 0x78dbe0a280
	bool bReturnToPreviousState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78dbe0a300
	bool bSetNextState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x78dbe0a380
	byte NextState;//[Offset: 0x22, Size: 0x1] 0x78dbe0a400
	PerPlatformInt MaximumNumberOfConcurrentInstances;//[Offset: 0x24, Size: 0x4] 0x78dbe0a480
	float WiggleTimePercentage;//[Offset: 0x28, Size: 0x4] 0x78dbe0a500
	bool bRequiresCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78dbe08480

--------------------------------
Class: AnimationSetup
	AnimSequence* AnimSequence;//[Offset: 0x0, Size: 0x8] 0x78dbe09f80
	class AnimSharingStateInstance* AnimBlueprint;//[Offset: 0x8, Size: 0x8] 0x78d3617720
	PerPlatformInt NumRandomizedInstances;//[Offset: 0x10, Size: 0x4] 0x78dbe0a000
	PerPlatformBool Enabled;//[Offset: 0x14, Size: 0x1] 0x78dbe0a080

--------------------------------
Class: AnimationSharingScalability
	PerPlatformBool UseBlendTransitions;//[Offset: 0x0, Size: 0x1] 0x78dbe08600
	PerPlatformFloat BlendSignificanceValue;//[Offset: 0x4, Size: 0x4] 0x78dbe08680
	PerPlatformInt MaximumNumberConcurrentBlends;//[Offset: 0x8, Size: 0x4] 0x78dbe08780
	PerPlatformFloat TickSignificanceValue;//[Offset: 0xc, Size: 0x4] 0x78dbe08880

--------------------------------
Class: SignificanceManager.Object
	SoftClassPath SignificanceManagerClassName;//[Offset: 0x108, Size: 0x18] 0x78dc0f9c00

--------------------------------
Class: MyPluginObject.Object
	MyPluginStruct MyStruct;//[Offset: 0x28, Size: 0x10] 0x78dc0f9b80

--------------------------------
Class: MyPluginStruct
	FString TestString;//[Offset: 0x0, Size: 0x10] 0x78dbe09d80

--------------------------------
Class: AudioCurveSourceComponent.AudioComponent.SceneComponent.ActorComponent.Object
	FName CurveSourceBindingName;//[Offset: 0x878, Size: 0x8] 0x78dc0fc780
	float CurveSyncOffset;//[Offset: 0x880, Size: 0x4] 0x78dc0fc800

--------------------------------
Class: DatasmithObjectTemplate.Object

--------------------------------
Class: DatasmithActorTemplate.DatasmithObjectTemplate.Object
	<FName> Layers;//[Offset: 0x30, Size: 0x50] 0x78dbfffb00
	<FName> Tags;//[Offset: 0x80, Size: 0x50] 0x78dbfffba0

--------------------------------
Class: DatasmithAdditionalData.Object

--------------------------------
Class: DatasmithAreaLightActor.Actor.Object
	enum LightType;//[Offset: 0x220, Size: 0x1] 0x78dbfff920
	enum LightShape;//[Offset: 0x221, Size: 0x1] 0x78dbfff9c0
	Vector2D Dimensions;//[Offset: 0x224, Size: 0x8] 0x78dc0fe080
	float Intensity;//[Offset: 0x22c, Size: 0x4] 0x78dc0fe100
	enum IntensityUnits;//[Offset: 0x230, Size: 0x1] 0x78dbfffa60
	LinearColor Color;//[Offset: 0x234, Size: 0x10] 0x78dc0fe200
	float Temperature;//[Offset: 0x244, Size: 0x4] 0x78dc0fe280
	TextureLightProfile* IESTexture;//[Offset: 0x248, Size: 0x8] 0x78dc0fe300
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x78dc0fe380
	float IESBrightnessScale;//[Offset: 0x254, Size: 0x4] 0x78dc0fe400
	Rotator Rotation;//[Offset: 0x258, Size: 0xc] 0x78dc0fe480
	float SourceRadius;//[Offset: 0x264, Size: 0x4] 0x78dc0fe500
	float SourceLength;//[Offset: 0x268, Size: 0x4] 0x78dc0fe580
	float AttenuationRadius;//[Offset: 0x26c, Size: 0x4] 0x78dc0fe600
	float SpotlightInnerAngle;//[Offset: 0x270, Size: 0x4] 0x78dc0fe680
	float SpotlightOuterAngle;//[Offset: 0x274, Size: 0x4] 0x78dc0fe700

--------------------------------
Class: DatasmithAreaLightActorTemplate.DatasmithObjectTemplate.Object
	enum LightType;//[Offset: 0x29, Size: 0x1] 0x78dc111460
	enum LightShape;//[Offset: 0x2a, Size: 0x1] 0x78dbfff7e0
	Vector2D Dimensions;//[Offset: 0x2c, Size: 0x8] 0x78dc0fd980
	LinearColor Color;//[Offset: 0x34, Size: 0x10] 0x78dc0fda00
	float Intensity;//[Offset: 0x44, Size: 0x4] 0x78dc0fda80
	enum IntensityUnits;//[Offset: 0x48, Size: 0x1] 0x78dbfff880
	float Temperature;//[Offset: 0x4c, Size: 0x4] 0x78dc0fdb80
	TextureLightProfile* IESTexture;//[Offset: 0x50, Size: 0x28] 0x78dc0fdc00
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78dc0fdc80
	float IESBrightnessScale;//[Offset: 0x7c, Size: 0x4] 0x78dc0fdd00
	Rotator Rotation;//[Offset: 0x80, Size: 0xc] 0x78dc0fdd80
	float SourceRadius;//[Offset: 0x8c, Size: 0x4] 0x78dc0fde00
	float SourceLength;//[Offset: 0x90, Size: 0x4] 0x78dc0fde80
	float AttenuationRadius;//[Offset: 0x94, Size: 0x4] 0x78dc0fdf00

--------------------------------
Class: DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshCADImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithTranslatedSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithCADImportSceneData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithMDLSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithGLTFSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	FString Generator;//[Offset: 0x28, Size: 0x10] 0x78dc0ff700
	float Version;//[Offset: 0x38, Size: 0x4] 0x78dc0ff780
	FString Author;//[Offset: 0x40, Size: 0x10] 0x78dc0fd700
	FString License;//[Offset: 0x50, Size: 0x10] 0x78dc0fd780
	FString Source;//[Offset: 0x60, Size: 0x10] 0x78dc0fd800

--------------------------------
Class: DatasmithStaticMeshGLTFImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object
	FString SourceMeshName;//[Offset: 0x28, Size: 0x10] 0x78dc0ff680

--------------------------------
Class: DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dc0ff480
	FString TexturesDir;//[Offset: 0x30, Size: 0x10] 0x78dc0ff500
	byte IntermediateSerialization;//[Offset: 0x40, Size: 0x1] 0x78dc0ff580
	bool bColorizeMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x78dc0ff600

--------------------------------
Class: DatasmithDeltaGenAssetImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithDeltaGenSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bMergeNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x78dc0fef80
	bool bOptimizeDuplicatedNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x78dc0ff000
	bool bRemoveInvisibleNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78dc0ff080
	bool bSimplifyNodeHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x78dc0ff100
	bool bImportVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1] 0x78dc0ff180
	FString VarPath;//[Offset: 0x48, Size: 0x10] 0x78dc0ff200
	bool bImportPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78dc0ff280
	FString PosPath;//[Offset: 0x60, Size: 0x10] 0x78dc0ff300
	bool bImportTml;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78dc0ff380
	FString TmlPath;//[Offset: 0x78, Size: 0x10] 0x78dc0ff400

--------------------------------
Class: DatasmithVREDAssetImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithVREDSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bMergeNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x78dc0fea00
	bool bOptimizeDuplicatedNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x78dc0fea80
	bool bImportMats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78dc0feb00
	FString MatsPath;//[Offset: 0x48, Size: 0x10] 0x78dc0feb80
	bool bImportVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78dc0fec00
	bool bCleanVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78dc0fec80
	FString VarPath;//[Offset: 0x60, Size: 0x10] 0x78dc0fed00
	bool bImportLightInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78dc0fed80
	FString LightInfoPath;//[Offset: 0x78, Size: 0x10] 0x78dc0fee00
	bool bImportClipInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78dc0fee80
	FString ClipInfoPath;//[Offset: 0x90, Size: 0x10] 0x78dc0fef00

--------------------------------
Class: DatasmithIFCSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshIFCImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object
	FString SourceGlobalId;//[Offset: 0x28, Size: 0x10] 0x78dc0fe980

--------------------------------
Class: DatasmithAssetUserData.AssetUserData.Object
	<FName,FString> MetaData;//[Offset: 0x28, Size: 0x50] 0x78dbf5dd80

--------------------------------
Class: DatasmithCineCameraActorTemplate.DatasmithObjectTemplate.Object
	DatasmithCameraLookatTrackingSettingsTemplate LookatTrackingSettings;//[Offset: 0x30, Size: 0x30] 0x78dc0fe800

--------------------------------
Class: DatasmithCameraLookatTrackingSettingsTemplate
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbe09c00
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbe09c80
	Actor* ActorToTrack;//[Offset: 0x8, Size: 0x28] 0x78dbe09d00

--------------------------------
Class: DatasmithCineCameraComponentTemplate.DatasmithObjectTemplate.Object
	DatasmithCameraFilmbackSettingsTemplate FilmbackSettings;//[Offset: 0x2c, Size: 0x8] 0x78dc0ffd80
	DatasmithCameraLensSettingsTemplate LensSettings;//[Offset: 0x34, Size: 0x4] 0x78dc0ffe00
	DatasmithCameraFocusSettingsTemplate FocusSettings;//[Offset: 0x38, Size: 0x8] 0x78dc0ffe80
	float CurrentFocalLength;//[Offset: 0x40, Size: 0x4] 0x78dc0fff00
	float CurrentAperture;//[Offset: 0x44, Size: 0x4] 0x78dc0fff80
	DatasmithPostProcessSettingsTemplate PostProcessSettings;//[Offset: 0x50, Size: 0x40] 0x78dc0fe780

--------------------------------
Class: DatasmithCameraFilmbackSettingsTemplate
	float SensorWidth;//[Offset: 0x0, Size: 0x4] 0x78dbe0b280
	float SensorHeight;//[Offset: 0x4, Size: 0x4] 0x78dbe0b300

--------------------------------
Class: DatasmithCameraLensSettingsTemplate
	float MaxFStop;//[Offset: 0x0, Size: 0x4] 0x78dbe0b380

--------------------------------
Class: DatasmithCameraFocusSettingsTemplate
	enum FocusMethod;//[Offset: 0x0, Size: 0x1] 0x78d36174a0
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4] 0x78dbe0b480

--------------------------------
Class: DatasmithPostProcessSettingsTemplate
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbe0b500
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbe0b580
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbe09500
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78dbe09580
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78dbe09600
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78dbe09680
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78dbe09700
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78dbe09780
	float WhiteTemp;//[Offset: 0x4, Size: 0x4] 0x78dbe09800
	float VignetteIntensity;//[Offset: 0x8, Size: 0x4] 0x78dbe09880
	LinearColor FilmWhitePoint;//[Offset: 0xc, Size: 0x10] 0x78dbe09900
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 0x10] 0x78dbe09980
	byte AutoExposureMethod;//[Offset: 0x30, Size: 0x1] 0x78dbe09a00
	float CameraISO;//[Offset: 0x34, Size: 0x4] 0x78dbe09a80
	float CameraShutterSpeed;//[Offset: 0x38, Size: 0x4] 0x78dbe09b00
	float DepthOfFieldFstop;//[Offset: 0x3c, Size: 0x4] 0x78dbe09b80

--------------------------------
Class: DatasmithContentBlueprintLibrary.BlueprintFunctionLibrary.Object
	static FString GetDatasmithUserDataValueForKey(Object* Object, FName Key);// 0x5228784 0x78dc105c60
	static void GetDatasmithUserDataKeysAndValuesForValue(Object* Object, FString StringToMatch, out FName[] OutKeys, out FString[] OutValues);// 0x5228520 0x78dc105d40
	static DatasmithAssetUserData* GetDatasmithUserData(Object* Object);// 0x52288e4 0x78dc105e20

--------------------------------
Class: DatasmithCustomActionBase.Object

--------------------------------
Class: DatasmithDecalComponentTemplate.DatasmithObjectTemplate.Object
	int SortOrder;//[Offset: 0x2c, Size: 0x4] 0x78dc121080
	Vector DecalSize;//[Offset: 0x30, Size: 0xc] 0x78dc0ff800
	MaterialInterface* Material;//[Offset: 0x40, Size: 0x8] 0x78dc0ff880

--------------------------------
Class: DatasmithImportedSequencesActor.Actor.Object
	LevelSequence*[] ImportedSequences;//[Offset: 0x220, Size: 0x10] 0x78dc111280
	void PlayLevelSequence(LevelSequence* SequenceToPlay);// 0x5228f90 0x78dc105b80

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x68, Size: 0x8] 0x78d72bf500
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x70, Size: 0x50] 0x78d72bf580
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0xc0, Size: 0xa0] 0x78d72bf600
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x160, Size: 0x50] 0x78d7106100
	class Object* DirectorClass;//[Offset: 0x1b0, Size: 0x8] 0x78d7277720
	AssetUserData*[] AssetUserData;//[Offset: 0x1b8, Size: 0x10] 0x78d72777c0
	void RemoveMetaDataByClass(class Object InClass);// 0xbd66de4 0x78d72c7e80
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0xbd66f14 0x78d72c7f60
	Object* FindMetaDataByClass(class Object InClass);// 0xbd66fb4 0x78d72c8040
	Object* CopyMetaData(Object* InMetaData);// 0xbd66e74 0x78d72c8120

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50] 0x78dbe9ab40
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50] 0x78dbe59fc0

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10] 0x78dbe59f20

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10] 0x78dbed8400
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18] 0x78dbed6380
	FString ObjectPath;//[Offset: 0x28, Size: 0x10] 0x78dbed6400

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c] 0x78dbed8280
	FString ComponentName;//[Offset: 0x20, Size: 0x10] 0x78dbed8300
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8] 0x78dbed8380

--------------------------------
Class: DatasmithOptionsBase.Object

--------------------------------
Class: DatasmithCommonTessellationOptions.DatasmithOptionsBase.Object
	DatasmithTessellationOptions Options;//[Offset: 0x28, Size: 0x10] 0x78dc120f00

--------------------------------
Class: DatasmithTessellationOptions
	float ChordTolerance;//[Offset: 0x0, Size: 0x4] 0x78dbe0b080
	float MaxEdgeLength;//[Offset: 0x4, Size: 0x4] 0x78dbe0b100
	float NormalTolerance;//[Offset: 0x8, Size: 0x4] 0x78dbe0b180
	enum StitchingTechnique;//[Offset: 0xc, Size: 0x1] 0x78d3617400

--------------------------------
Class: DatasmithImportOptions.DatasmithOptionsBase.Object
	enum SearchPackagePolicy;//[Offset: 0x28, Size: 0x1] 0x78dc110d80
	enum MaterialConflictPolicy;//[Offset: 0x29, Size: 0x1] 0x78dc110e20
	enum TextureConflictPolicy;//[Offset: 0x2a, Size: 0x1] 0x78dc110ec0
	enum StaticMeshActorImportPolicy;//[Offset: 0x2b, Size: 0x1] 0x78dc110f60
	enum LightImportPolicy;//[Offset: 0x2c, Size: 0x1] 0x78dc111000
	enum CameraImportPolicy;//[Offset: 0x2d, Size: 0x1] 0x78dc1110a0
	enum OtherActorImportPolicy;//[Offset: 0x2e, Size: 0x1] 0x78dc111140
	enum MaterialQuality;//[Offset: 0x2f, Size: 0x1] 0x78dc1111e0
	DatasmithImportBaseOptions BaseOptions;//[Offset: 0x34, Size: 0x14] 0x78dc120d00
	DatasmithReimportOptions ReimportOptions;//[Offset: 0x48, Size: 0x2] 0x78dc120d80
	FString Filename;//[Offset: 0x50, Size: 0x10] 0x78dc120e00
	FString FilePath;//[Offset: 0x60, Size: 0x10] 0x78dc120e80

--------------------------------
Class: DatasmithImportBaseOptions
	enum SceneHandling;//[Offset: 0x0, Size: 0x1] 0x78d3617180
	bool bIncludeGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78dbe0aa00
	bool bIncludeMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78dbe0aa80
	bool bIncludeLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78dbe0ab00
	bool bIncludeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78dbe0ab80
	bool bIncludeAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x78dbe0ac00
	DatasmithAssetImportOptions AssetOptions;//[Offset: 0x8, Size: 0x8] 0x78dbe0ad00
	DatasmithStaticMeshImportOptions StaticMeshOptions;//[Offset: 0x10, Size: 0x4] 0x78dbe0af80

--------------------------------
Class: DatasmithAssetImportOptions
	FName PackagePath;//[Offset: 0x0, Size: 0x8] 0x78dbe0ac80

--------------------------------
Class: DatasmithStaticMeshImportOptions
	enum MinLightmapResolution;//[Offset: 0x0, Size: 0x1] 0x78d3617220
	enum MaxLightmapResolution;//[Offset: 0x1, Size: 0x1] 0x78d36172c0
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78dbe0ae80
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78dbe0af00

--------------------------------
Class: DatasmithReimportOptions
	bool bUpdateActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe0a880
	bool bRespawnDeletedActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78dbe0a900

--------------------------------
Class: DatasmithLandscapeTemplate.DatasmithObjectTemplate.Object
	MaterialInterface* LandscapeMaterial;//[Offset: 0x30, Size: 0x8] 0x78dc120800
	int StaticLightingLOD;//[Offset: 0x38, Size: 0x4] 0x78dc120880

--------------------------------
Class: DatasmithLightComponentTemplate.DatasmithObjectTemplate.Object
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x78dc120300
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1] 0x78dc120380
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1] 0x78dc120400
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1] 0x78dc120480
	float Intensity;//[Offset: 0x2c, Size: 0x4] 0x78dc120500
	float Temperature;//[Offset: 0x30, Size: 0x4] 0x78dc120580
	float IESBrightnessScale;//[Offset: 0x34, Size: 0x4] 0x78dc120600
	LinearColor LIGHTCOLOR;//[Offset: 0x38, Size: 0x10] 0x78dc120680
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x48, Size: 0x8] 0x78dc120700
	TextureLightProfile* IESTexture;//[Offset: 0x50, Size: 0x8] 0x78dc120780

--------------------------------
Class: DatasmithMaterialInstanceTemplate.DatasmithObjectTemplate.Object
	MaterialInterface* ParentMaterial;//[Offset: 0x30, Size: 0x28] 0x78dc122000
	<FName,float> ScalarParameterValues;//[Offset: 0x58, Size: 0x50] 0x78dbf5db40
	<FName,LinearColor> VectorParameterValues;//[Offset: 0xa8, Size: 0x50] 0x78dbf5dc00
	<FName,Texture*> TextureParameterValues;//[Offset: 0xf8, Size: 0x50] 0x78dbf5dcc0
	DatasmithStaticParameterSetTemplate StaticParameters;//[Offset: 0x148, Size: 0x50] 0x78dc120280

--------------------------------
Class: DatasmithStaticParameterSetTemplate
	<FName,bool> StaticSwitchParameters;//[Offset: 0x0, Size: 0x50] 0x78dbdf40c0

--------------------------------
Class: DatasmithPointLightComponentTemplate.DatasmithObjectTemplate.Object
	enum IntensityUnits;//[Offset: 0x29, Size: 0x1] 0x78dc110ce0
	float SourceRadius;//[Offset: 0x2c, Size: 0x4] 0x78dc121e80
	float SourceLength;//[Offset: 0x30, Size: 0x4] 0x78dc121f00
	float AttenuationRadius;//[Offset: 0x34, Size: 0x4] 0x78dc121f80

--------------------------------
Class: DatasmithPostProcessVolumeTemplate.DatasmithObjectTemplate.Object
	DatasmithPostProcessSettingsTemplate Settings;//[Offset: 0x30, Size: 0x40] 0x78dc121c80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78dc121d00
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x78dc121d80

--------------------------------
Class: DatasmithScene.Object

--------------------------------
Class: DatasmithSceneActor.Actor.Object
	DatasmithScene* Scene;//[Offset: 0x220, Size: 0x8] 0x78dc121b00
	<FName,Actor*> RelatedActors;//[Offset: 0x228, Size: 0x50] 0x78dbf5da80

--------------------------------
Class: DatasmithSceneComponentTemplate.DatasmithObjectTemplate.Object
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x30] 0x78dc121880
	byte Mobility;//[Offset: 0x60, Size: 0x1] 0x78dc121900
	SceneComponent* AttachParent;//[Offset: 0x68, Size: 0x28] 0x78dc121980
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78dc121a00
	<FName> Tags;//[Offset: 0x98, Size: 0x50] 0x78dc110c40

--------------------------------
Class: DatasmithSkyLightComponentTemplate.DatasmithObjectTemplate.Object
	byte SourceType;//[Offset: 0x29, Size: 0x1] 0x78dc121700
	int CubemapResolution;//[Offset: 0x2c, Size: 0x4] 0x78dc121780
	TextureCube* Cubemap;//[Offset: 0x30, Size: 0x8] 0x78dc121800

--------------------------------
Class: DatasmithSpotLightComponentTemplate.DatasmithObjectTemplate.Object
	float InnerConeAngle;//[Offset: 0x2c, Size: 0x4] 0x78dc121600
	float OuterConeAngle;//[Offset: 0x30, Size: 0x4] 0x78dc121680

--------------------------------
Class: DatasmithStaticMeshComponentTemplate.DatasmithObjectTemplate.Object
	StaticMesh* StaticMesh;//[Offset: 0x30, Size: 0x8] 0x78dc121500
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x38, Size: 0x10] 0x78dc110ba0

--------------------------------
Class: DatasmithStaticMeshTemplate.DatasmithObjectTemplate.Object
	DatasmithMeshSectionInfoMapTemplate SectionInfoMap;//[Offset: 0x30, Size: 0x50] 0x78dc121280
	int LightMapCoordinateIndex;//[Offset: 0x80, Size: 0x4] 0x78dc121300
	int LightMapResolution;//[Offset: 0x84, Size: 0x4] 0x78dc121380
	DatasmithMeshBuildSettingsTemplate[] BuildSettings;//[Offset: 0x88, Size: 0x10] 0x78dc110a60
	DatasmithStaticMaterialTemplate[] StaticMaterials;//[Offset: 0x98, Size: 0x10] 0x78dc110b00

--------------------------------
Class: DatasmithMeshSectionInfoMapTemplate
	<uint32,DatasmithMeshSectionInfoTemplate> Map;//[Offset: 0x0, Size: 0x50] 0x78dbdf3f40

--------------------------------
Class: DatasmithMeshSectionInfoTemplate
	int MaterialIndex;//[Offset: 0x0, Size: 0x4] 0x78dbe0a600

--------------------------------
Class: DatasmithMeshBuildSettingsTemplate
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbe0c080
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbe0c100
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbe0c180
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78dbe0c200
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78dbe0c280
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78dbe0c300
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78dbe0c380
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78dbe0c400
	int MinLightmapResolution;//[Offset: 0x4, Size: 0x4] 0x78dbe0c480
	int SrcLightmapIndex;//[Offset: 0x8, Size: 0x4] 0x78dbe0c500
	int DstLightmapIndex;//[Offset: 0xc, Size: 0x4] 0x78dbe0c580

--------------------------------
Class: DatasmithStaticMaterialTemplate
	FName MaterialSlotName;//[Offset: 0x0, Size: 0x8] 0x78dbe0c600
	MaterialInterface* MaterialInterface;//[Offset: 0x8, Size: 0x8] 0x78dbe0a580

--------------------------------
Class: LevelVariantSets.Object
	class Object* DirectorClass;//[Offset: 0x28, Size: 0x8] 0x78dc110920
	VariantSet*[] VariantSets;//[Offset: 0x30, Size: 0x10] 0x78dc1109c0
	VariantSet* GetVariantSetByName(FString VariantSetName);// 0x5243b68 0x78dc1058e0
	VariantSet* GetVariantSet(int VariantSetIndex);// 0x5243cd0 0x78dc1059c0
	int GetNumVariantSets();// 0x5243d80 0x78dc105aa0

--------------------------------
Class: VariantSet.Object
	FText DisplayText;//[Offset: 0x28, Size: 0x18] 0x78dc124800
	bool bExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78dc124880
	Variant*[] Variants;//[Offset: 0x60, Size: 0x10] 0x78dc110100
	Texture2D* Thumbnail;//[Offset: 0x70, Size: 0x8] 0x78dc124980
	void SetThumbnailFromTexture(Texture2D* NewThumbnail);// 0x5247ca8 0x78dc10aa40
	void SetThumbnailFromFile(FString FilePath);// 0x5247b50 0x78dc10ab20
	void SetThumbnailFromEditorViewport();// 0x5247948 0x78dc10ac00
	void SetThumbnailFromCamera(Object* WorldContextObject, out const Transform CameraTransform, float FOVDegrees, float MinZ, float Gamma);// 0x524795c 0x78dc10ace0
	void SetDisplayText(out const FText NewDisplayText);// 0x5248070 0x78dc107400
	Variant* GetVariantByName(FString VariantName);// 0x5247d50 0x78dc1074e0
	Variant* GetVariant(int VariantIndex);// 0x5247eb8 0x78dc1075c0
	Texture2D* GetThumbnail();// 0x5247914 0x78dc1076a0
	LevelVariantSets* GetParent();// 0x52481ec 0x78dc107780
	int GetNumVariants();// 0x5247f68 0x78dc107860
	FText GetDisplayText();// 0x5247f9c 0x78dc107940

--------------------------------
Class: Variant.Object
	VariantDependency[] Dependencies;//[Offset: 0x28, Size: 0x10] 0x78dc1102e0
	FText DisplayText;//[Offset: 0x38, Size: 0x18] 0x78dc123400
	VariantObjectBinding*[] ObjectBindings;//[Offset: 0x68, Size: 0x10] 0x78dc110380
	Texture2D* Thumbnail;//[Offset: 0x78, Size: 0x8] 0x78dc123500
	void SwitchOn();// 0x5246b18 0x78dc107a20
	void SetThumbnailFromTexture(Texture2D* NewThumbnail);// 0x5246a38 0x78dc107b00
	void SetThumbnailFromFile(FString FilePath);// 0x52468e0 0x78dc107be0
	void SetThumbnailFromEditorViewport();// 0x52466d8 0x78dc107cc0
	void SetThumbnailFromCamera(Object* WorldContextObject, out const Transform CameraTransform, float FOVDegrees, float MinZ, float Gamma);// 0x52466ec 0x78dc107da0
	void SetDisplayText(out const FText NewDisplayText);// 0x5246ce4 0x78dc107e80
	void SetDependency(int Index, out VariantDependency Dependency);// 0x52461d0 0x78dc107f60
	bool IsActive();// 0x5246ae0 0x78dc108040
	Texture2D* GetThumbnail();// 0x52466a4 0x78dc108120
	VariantSet* GetParent();// 0x5246e60 0x78dc108200
	int GetNumDependencies();// 0x52460f4 0x78dc1082e0
	int GetNumActors();// 0x5246bdc 0x78dc1083c0
	FText GetDisplayText();// 0x5246c10 0x78dc1084a0
	Variant*[] GetDependents(LevelVariantSets* LevelVariantSets, bool bOnlyEnabledDependencies);// 0x5246530 0x78dc108580
	VariantDependency GetDependency(int Index);// 0x5246340 0x78dc108660
	Actor* GetActor(int ActorIndex);// 0x5246b2c 0x78dc108740
	void DeleteDependency(int Index);// 0x5246128 0x78dc108820
	int AddDependency(out VariantDependency Dependency);// 0x52463f8 0x78dc108900

--------------------------------
Class: VariantDependency
	VariantSet* VariantSet;//[Offset: 0x0, Size: 0x28] 0x78dbe0bc80
	Variant* Variant;//[Offset: 0x28, Size: 0x28] 0x78dbe0bd00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78dbe0bd80

--------------------------------
Class: VariantObjectBinding.Object
	FString CachedActorLabel;//[Offset: 0x28, Size: 0x10] 0x78dc125200
	SoftObjectPath ObjectPtr;//[Offset: 0x38, Size: 0x18] 0x78dc125280
	Object* LazyObjectPtr;//[Offset: 0x50, Size: 0x1c] 0x78dc123200
	PropertyValue*[] CapturedProperties;//[Offset: 0x70, Size: 0x10] 0x78dc1101a0
	FunctionCaller[] FunctionCallers;//[Offset: 0x80, Size: 0x10] 0x78dc110240

--------------------------------
Class: PropertyValue.Object
	Properties(FieldPathProperty)[] Properties;//[Offset: 0x88, Size: 0x10] 0x78dc110560
	int[] PropertyIndices;//[Offset: 0x98, Size: 0x10] 0x78dc110600
	CapturedPropSegment[] CapturedPropSegments;//[Offset: 0xa8, Size: 0x10] 0x78dc1106a0
	FString FullDisplayString;//[Offset: 0xb8, Size: 0x10] 0x78dc122680
	FName PropertySetterName;//[Offset: 0xc8, Size: 0x8] 0x78dc122700
	<FString,FString> PropertySetterParameterDefaults;//[Offset: 0xd0, Size: 0x50] 0x78dbf5d9c0
	bool bHasRecordedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x78dc122880
	class Object* LeafPropertyClass;//[Offset: 0x128, Size: 0x8] 0x78dc110740
	byte[] ValueBytes;//[Offset: 0x138, Size: 0x10] 0x78dc1107e0
	enum PropCategory;//[Offset: 0x148, Size: 0x1] 0x78dc110880
	bool HasRecordedData();// 0x5244e24 0x78dc108c80
	FText GetPropertyTooltip();// 0x5244ee0 0x78dc108d60
	FString GetFullDisplayString();// 0x5244e5c 0x78dc108e40

--------------------------------
Class: CapturedPropSegment
	FString PropertyName;//[Offset: 0x0, Size: 0x10] 0x78dbe0be80
	int PropertyIndex;//[Offset: 0x10, Size: 0x4] 0x78dbe0bf00
	FString ComponentName;//[Offset: 0x18, Size: 0x10] 0x78dbe0bf80

--------------------------------
Class: FunctionCaller
	FName FunctionName;//[Offset: 0x0, Size: 0x8] 0x78dbe0c000

--------------------------------
Class: LevelVariantSetsActor.Actor.Object
	SoftObjectPath LevelVariantSets;//[Offset: 0x220, Size: 0x18] 0x78dc122b80
	bool SwitchOnVariantByName(FString VariantSetName, FString VariantName);// 0x5244380 0x78dc108f20
	bool SwitchOnVariantByIndex(int VariantSetIndex, int VariantIndex);// 0x5244284 0x78dc109000
	void SetLevelVariantSets(LevelVariantSets* InVariantSets);// 0x52445cc 0x78dc105720
	LevelVariantSets* GetLevelVariantSets(bool bLoad);// 0x5244674 0x78dc105800

--------------------------------
Class: LevelVariantSetsFunctionDirector.Object

--------------------------------
Class: PropertyValueTransform.PropertyValue.Object

--------------------------------
Class: PropertyValueVisibility.PropertyValue.Object

--------------------------------
Class: PropertyValueColor.PropertyValue.Object

--------------------------------
Class: PropertyValueMaterial.PropertyValue.Object

--------------------------------
Class: PropertyValueOption.PropertyValue.Object

--------------------------------
Class: PropertyValueSoftObject.PropertyValue.Object

--------------------------------
Class: SwitchActor.Actor.Object
	SceneComponent* SceneComponent;//[Offset: 0x238, Size: 0x8] 0x78dc122280
	int LastSelectedOption;//[Offset: 0x240, Size: 0x4] 0x78dc122300
	void SelectOption(int OptionIndex);// 0x5245a0c 0x78dc1089e0
	int GetSelectedOption();// 0x5245ab4 0x78dc108ac0
	Actor*[] GetOptions();// 0x5245ae8 0x78dc108ba0

--------------------------------
Class: AutomationUtilsBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void TakeGameplayAutomationScreenshot(const FString ScreenshotName, float MaxGlobalError, float MaxLocalError, FString MapNameOverride);// 0x5250aa0 0x78dc10a960

--------------------------------
Class: MotoSynthPreset.Object
	MotoSynthRuntimeSettings Settings;//[Offset: 0x28, Size: 0x68] 0x78dc124580

--------------------------------
Class: MotoSynthRuntimeSettings
	bool bSynthToneEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe0d280
	float SynthToneVolume;//[Offset: 0x4, Size: 0x4] 0x78dbe0d300
	float SynthToneFilterFrequency;//[Offset: 0x8, Size: 0x4] 0x78dbe0d380
	int SynthOctaveShift;//[Offset: 0xc, Size: 0x4] 0x78dbe0d400
	bool bGranularEngineEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78dbe0d480
	float GranularEngineVolume;//[Offset: 0x14, Size: 0x4] 0x78dbe0d500
	float GranularEnginePitchScale;//[Offset: 0x18, Size: 0x4] 0x78dbe0d580
	int NumSamplesToCrossfadeBetweenGrains;//[Offset: 0x1c, Size: 0x4] 0x78dbe0d600
	int NumGrainTableEntriesPerGrain;//[Offset: 0x20, Size: 0x4] 0x78dbe0d680
	int GrainTableRandomOffsetForConstantRPMs;//[Offset: 0x24, Size: 0x4] 0x78dbe0b600
	int GrainCrossfadeSamplesForConstantRPMs;//[Offset: 0x28, Size: 0x4] 0x78dbe0b680
	MotoSynthSource* AccelerationSource;//[Offset: 0x30, Size: 0x8] 0x78dbe0b700
	MotoSynthSource* DecelerationSource;//[Offset: 0x38, Size: 0x8] 0x78dbe0b780
	bool bStereoWidenerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78dbe0b800
	float StereoDelayMsec;//[Offset: 0x44, Size: 0x4] 0x78dbe0b880
	float StereoFeedback;//[Offset: 0x48, Size: 0x4] 0x78dbe0b900
	float StereoWidenerWetlevel;//[Offset: 0x4c, Size: 0x4] 0x78dbe0b980
	float StereoWidenerDryLevel;//[Offset: 0x50, Size: 0x4] 0x78dbe0ba00
	float StereoWidenerDelayRatio;//[Offset: 0x54, Size: 0x4] 0x78dbe0ba80
	bool bStereoWidenerFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78dbe0bb00
	float StereoWidenerFilterFrequency;//[Offset: 0x5c, Size: 0x4] 0x78dbe0bb80
	float StereoWidenerFilterQ;//[Offset: 0x60, Size: 0x4] 0x78dbe0bc00

--------------------------------
Class: MotoSynthSource.Object
	bool bConvertTo8Bit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dc126300
	float DownSampleFactor;//[Offset: 0x2c, Size: 0x4] 0x78dc124280
	RuntimeFloatCurve RPMCurve;//[Offset: 0x30, Size: 0x88] 0x78dc124300
	float[] SourceData;//[Offset: 0xb8, Size: 0x10] 0x78dc112860
	int16[] SourceDataPCM;//[Offset: 0xc8, Size: 0x10] 0x78dc112900
	int SourceSampleRate;//[Offset: 0xd8, Size: 0x4] 0x78dc124480
	GrainTableEntry[] GrainTable;//[Offset: 0xe0, Size: 0x10] 0x78dc110060

--------------------------------
Class: GrainTableEntry
	int SampleIndex;//[Offset: 0x0, Size: 0x4] 0x78dbe0d180
	float RPM;//[Offset: 0x4, Size: 0x4] 0x78dbe0d200

--------------------------------
Class: SynthComponent.SceneComponent.ActorComponent.Object
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1] 0x78dc125500
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1] 0x78dc125580
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x201, Size: 0x1] 0x78dc125600
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x201, Size: 0x1] 0x78dc125680
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x201, Size: 0x1] 0x78dc125700
	SoundAttenuation* AttenuationSettings;//[Offset: 0x208, Size: 0x8] 0x78dc125780
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x210, Size: 0x3a0] 0x78dc125800
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x5b0, Size: 0x8] 0x78dc125880
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x5b8, Size: 0x50] 0x78dc1125e0
	SoundClass* SoundClass;//[Offset: 0x608, Size: 0x8] 0x78dc125980
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x610, Size: 0x8] 0x78dc125a00
	SoundSubmixBase* SoundSubmix;//[Offset: 0x618, Size: 0x8] 0x78dc125a80
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x620, Size: 0x10] 0x78dc112680
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x630, Size: 0x10] 0x78dc112720
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x640, Size: 0x10] 0x78dc1127c0
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x650, Size: 0x1] 0x78dc125c80
	bool bIsPreviewSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x650, Size: 0x1] 0x78dc125d00
	int EnvelopeFollowerAttackTime;//[Offset: 0x654, Size: 0x4] 0x78dc125d80
	int EnvelopeFollowerReleaseTime;//[Offset: 0x658, Size: 0x4] 0x78dc125e00
	delegate OnAudioEnvelopeValue;//[Offset: 0x660, Size: 0x10] 0x78dc125e80
	SynthSound* Synth;//[Offset: 0x690, Size: 0x8] 0x78dc125f00
	AudioComponent* AudioComponent;//[Offset: 0x698, Size: 0x8] 0x78dc125f80
	void Stop();// 0xbbe3668 0x78dc10a340
	void Start();// 0xbbe367c 0x78dc10a420
	void SetVolumeMultiplier(float VolumeMultiplier);// 0xbbe3588 0x78dc10a500
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0xbbe3494 0x78dc10a5e0
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0xbbe3334 0x78dc10a6c0
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0xbbe33e4 0x78dc10a7a0
	bool IsPlaying();// 0xbbe3630 0x78dc10a880

--------------------------------
Class: SynthSound.SoundWaveProcedural.SoundWave.SoundBase.Object
	SynthComponent* OwningSynthComponent;//[Offset: 0x3c0, Size: 0x8] 0x78d72aa080

--------------------------------
Class: SynthComponentMoto.SynthComponent.SceneComponent.ActorComponent.Object
	MotoSynthPreset* MotoSynthPreset;//[Offset: 0x6d0, Size: 0x8] 0x78dc127200
	float RPM;//[Offset: 0x6d8, Size: 0x4] 0x78dc127280
	void SetSettings(out const MotoSynthRuntimeSettings InSettings);// 0x525ada4 0x78dc109fc0
	void SetRPM(float InRPM, float InTimeSec);// 0x525aeb0 0x78dc10a0a0
	bool IsEnabled();// 0x525ac68 0x78dc10a180
	void GetRPMRange(out float OutMinRPM, out float OutMaxRPM);// 0x525aca0 0x78dc10a260

--------------------------------
Class: AndroidMediaSettings.Object
	bool CacheableVideoSampleBuffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dc127180

--------------------------------
Class: ActorSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x78dc126c00
	ActorSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x68, Size: 0x20] 0x78dc126c80

--------------------------------
Class: ActorSequenceObjectReferenceMap
	Guid[] BindingIds;//[Offset: 0x0, Size: 0x10] 0x78d3616f00
	ActorSequenceObjectReferences[] References;//[Offset: 0x10, Size: 0x10] 0x78d36170e0

--------------------------------
Class: ActorSequenceObjectReferences
	ActorSequenceObjectReference[] Array;//[Offset: 0x0, Size: 0x10] 0x78d3617040

--------------------------------
Class: ActorSequenceObjectReference
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78d3616fa0
	Guid ActorId;//[Offset: 0x4, Size: 0x10] 0x78dbe0cf80
	FString PathToComponent;//[Offset: 0x18, Size: 0x10] 0x78dbe0d000

--------------------------------
Class: ActorSequenceComponent.ActorComponent.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0xb8, Size: 0x14] 0x78dc126a80
	ActorSequence* Sequence;//[Offset: 0xd0, Size: 0x8] 0x78dc126b00
	ActorSequencePlayer* SequencePlayer;//[Offset: 0xd8, Size: 0x8] 0x78dc126b80

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbe65d00
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4] 0x78dbe65e00
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x78dbe65e80
	float startTime;//[Offset: 0xc, Size: 0x4] 0x78dbe65f00
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78dbe65f80
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x78dbe66000
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x78dbe66080
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x78dbe66100
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x78dbe66180
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x78dbe66200
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x78dbe66280
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x78dbe66300

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4] 0x78dbe65d80

--------------------------------
Class: ActorSequencePlayer.MovieSceneSequencePlayer.Object

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x410, Size: 0x10] 0x78dc128e80
	delegate OnPlayReverse;//[Offset: 0x420, Size: 0x10] 0x78dc128f00
	delegate OnStop;//[Offset: 0x430, Size: 0x10] 0x78dc128f80
	delegate OnPause;//[Offset: 0x440, Size: 0x10] 0x78dc129000
	delegate OnFinished;//[Offset: 0x450, Size: 0x10] 0x78dc129080
	byte status;//[Offset: 0x460, Size: 0x1] 0x78dc129100
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x461, Size: 0x1] 0x78dc129180
	MovieSceneSequence* Sequence;//[Offset: 0x468, Size: 0x8] 0x78dc129200
	FrameNumber startTime;//[Offset: 0x470, Size: 0x4] 0x78dc129280
	int DurationFrames;//[Offset: 0x474, Size: 0x4] 0x78dc129300
	float DurationSubFrames;//[Offset: 0x478, Size: 0x4] 0x78dc129380
	int CurrentNumLoops;//[Offset: 0x47c, Size: 0x4] 0x78dc129400
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x480, Size: 0x14] 0x78dc129480
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x498, Size: 0xe8] 0x78dc127400
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x5e8, Size: 0x10] 0x78dc127480
	interface class None* PlaybackClient;//[Offset: 0x5f8, Size: 0x10] 0x78dc127500
	MovieSceneSequenceTickManager* TickManager;//[Offset: 0x608, Size: 0x8] 0x78dc127580
	void StopAtCurrentTime();// 0xb83982c 0x78dc10b4c0
	void Stop();// 0xb839840 0x78dc10b5a0
	void SetTimeRange(float startTime, float Duration);// 0xb83943c 0x78dc10b680
	void SetPlayRate(float PlayRate);// 0xb8385c0 0x78dc10b760
	void SetPlaybackPosition(MovieSceneSequencePlaybackParams PlaybackParams);// 0xb83913c 0x78dc10b840
	void SetFrameRate(FrameRate FrameRate);// 0xb8396b0 0x78dc10b920
	void SetFrameRange(int StartFrame, int Duration, float SubFrames);// 0xb83952c 0x78dc10ba00
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0xb838508 0x78dc10bae0
	void ScrubToSeconds(float TimeInSeconds);// 0xb838c90 0x78dc10bbc0
	bool ScrubToMarkedFrame(FString InLabel);// 0xb8388b8 0x78dc10bca0
	void ScrubToFrame(FrameTime NewPosition);// 0xb838f60 0x78dc10bd80
	void Scrub();// 0xb839854 0x78dc10be60
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0xb8380d8 0x78dc10bf40
	void RPC_ExplicitServerUpdateEvent(enum method, FrameTime RelevantTime);// 0xb838188 0x78dc10c020
	void PlayToSeconds(float TimeInSeconds);// 0xb838d80 0x78dc10c100
	bool PlayToMarkedFrame(FString InLabel);// 0xb838a2c 0x78dc10c1e0
	void PlayToFrame(FrameTime NewPosition);// 0xb839050 0x78dc10c2c0
	void PlayTo(MovieSceneSequencePlaybackParams PlaybackParams);// 0xb8392bc 0x78dc10c3a0
	void PlayReverse();// 0xb839938 0x78dc10c480
	void PlayLooping(int NumLoops);// 0xb83987c 0x78dc10c560
	void Play();// 0xb83994c 0x78dc10c640
	void Pause();// 0xb839868 0x78dc10c720
	void JumpToSeconds(float TimeInSeconds);// 0xb838ba0 0x78dc10c800
	bool JumpToMarkedFrame(FString InLabel);// 0xb838744 0x78dc10c8e0
	void JumpToFrame(FrameTime NewPosition);// 0xb838e70 0x78dc10c9c0
	bool IsReversed();// 0xb83869c 0x78dc1090e0
	bool IsPlaying();// 0xb83870c 0x78dc1091c0
	bool IsPaused();// 0xb8386d4 0x78dc1092a0
	void GoToEndAndStop();// 0xb839818 0x78dc109380
	QualifiedFrameTime GetStartTime();// 0xb839690 0x78dc109460
	float GetPlayRate();// 0xb838668 0x78dc109540
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0xb838284 0x78dc109620
	FrameRate GetFrameRate();// 0xb839760 0x78dc109700
	int GetFrameDuration();// 0xb83977c 0x78dc1097e0
	QualifiedFrameTime GetEndTime();// 0xb839668 0x78dc1098c0
	QualifiedFrameTime GetDuration();// 0xb8397b0 0x78dc1099a0
	bool GetDisableCameraCuts();// 0xb8384e8 0x78dc109a80
	QualifiedFrameTime GetCurrentTime();// 0xb8397e4 0x78dc109b60
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0xb8383a4 0x78dc109c40
	void ChangePlaybackDirection();// 0xb839924 0x78dc109d20

--------------------------------
Class: MovieSceneSequencePlaybackParams
	FrameTime Frame;//[Offset: 0x0, Size: 0x8] 0x78dbe64280
	float Time;//[Offset: 0x8, Size: 0x4] 0x78dbe64300
	FString MarkedFrame;//[Offset: 0x10, Size: 0x10] 0x78dbe64380
	enum PositionType;//[Offset: 0x20, Size: 0x1] 0x78dbe534e0
	enum UpdateMethod;//[Offset: 0x21, Size: 0x1] 0x78dbe53580

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8] 0x78dbe65b80
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1] 0x78dbe65c00
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4] 0x78dbe65c80

--------------------------------
Class: MovieSceneSequenceTickManager.Object
	Actor*[] SequenceActors;//[Offset: 0x28, Size: 0x10] 0x78d715f100
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 0x8] 0x78d7262000

--------------------------------
Class: TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x78dc128c80
	class Actor* BoundActorClass;//[Offset: 0x68, Size: 0x28] 0x78dc112180
	Actor* BoundPreviewActor;//[Offset: 0x90, Size: 0x28] 0x78dc128d00
	<Guid,FName> BoundActorComponents;//[Offset: 0xb8, Size: 0x50] 0x78dbf5d900

--------------------------------
Class: CameraAnimationSequence.TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object

--------------------------------
Class: SequenceCameraShakeCameraStandIn.Object
	float FieldOfView;//[Offset: 0x30, Size: 0x4] 0x78dc128c00

--------------------------------
Class: SequenceCameraShake.CameraShakeBase.Object
	CameraAnimationSequence* Sequence;//[Offset: 0x98, Size: 0x8] 0x78dc128600
	float PlayRate;//[Offset: 0xa0, Size: 0x4] 0x78dc128680
	float Scale;//[Offset: 0xa4, Size: 0x4] 0x78dc128700
	float BlendInTime;//[Offset: 0xa8, Size: 0x4] 0x78dc128780
	float BlendOutTime;//[Offset: 0xac, Size: 0x4] 0x78dc128800
	float RandomSegmentDuration;//[Offset: 0xb0, Size: 0x4] 0x78dc128880
	bool bRandomSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1] 0x78dc128900
	SequenceCameraShakeSequencePlayer* Player;//[Offset: 0xb8, Size: 0x8] 0x78dc128980
	SequenceCameraShakeCameraStandIn* CameraStandIn;//[Offset: 0xc0, Size: 0x8] 0x78dc128a00

--------------------------------
Class: SequenceCameraShakeSequencePlayer.Object
	Object* BoundObjectOverride;//[Offset: 0x480, Size: 0x8] 0x78dc128480
	MovieSceneSequence* Sequence;//[Offset: 0x488, Size: 0x8] 0x78dc128500
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x490, Size: 0xe8] 0x78dc128580

--------------------------------
Class: TemplateSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x228, Size: 0x14] 0x78dc12a100
	TemplateSequencePlayer* SequencePlayer;//[Offset: 0x240, Size: 0x8] 0x78dc12a180
	SoftObjectPath TemplateSequence;//[Offset: 0x248, Size: 0x18] 0x78dc12a200
	TemplateSequenceBindingOverrideData BindingOverride;//[Offset: 0x260, Size: 0xc] 0x78dc12a280
	void SetSequence(TemplateSequence* InSequence);// 0x527af10 0x78dc10b060
	void SetBinding(Actor* Actor);// 0x527ae34 0x78dc10b140
	TemplateSequence* LoadSequence();// 0x527afb8 0x78dc10b220
	TemplateSequencePlayer* GetSequencePlayer();// 0x527aedc 0x78dc10b300
	TemplateSequence* GetSequence();// 0x527afec 0x78dc10b3e0

--------------------------------
Class: TemplateSequencePlayer.MovieSceneSequencePlayer.Object
	static TemplateSequencePlayer* CreateTemplateSequencePlayer(Object* WorldContextObject, TemplateSequence* TemplateSequence, MovieSceneSequencePlaybackSettings Settings, out TemplateSequenceActor* OutActor);// 0x527b630 0x78dc10af80

--------------------------------
Class: TemplateSequenceBindingOverrideData
	Object* Object;//[Offset: 0x0, Size: 0x8] 0x78dbe0cd80
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78dbe0ce00

--------------------------------
Class: MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionParameters Parameters;//[Offset: 0xdc, Size: 0x24] 0x78dc129980
	float StartOffset;//[Offset: 0x100, Size: 0x4] 0x78dc129a00
	float TimeScale;//[Offset: 0x104, Size: 0x4] 0x78dc129a80
	float PrerollTime;//[Offset: 0x108, Size: 0x4] 0x78dc129b00
	MovieSceneSequence* SubSequence;//[Offset: 0x110, Size: 0x8] 0x78dc129b80
	Actor* ActorToRecord;//[Offset: 0x118, Size: 0x1c] 0x78dc129c00
	FString TargetSequenceName;//[Offset: 0x138, Size: 0x10] 0x78dc129c80
	DirectoryPath TargetPathToRecordTo;//[Offset: 0x148, Size: 0x10] 0x78dc129d00
	void SetSequence(MovieSceneSequence* Sequence);// 0xb8407bc 0x78dc10adc0
	MovieSceneSequence* GetSequence();// 0xb840864 0x78dc10aea0

--------------------------------
Class: MovieSceneSectionParameters
	FrameNumber StartFrameOffset;//[Offset: 0x0, Size: 0x4] 0x78dbe63480
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78dbe63500
	FrameNumber EndFrameOffset;//[Offset: 0x8, Size: 0x4] 0x78dbe63580
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x78dbe63600
	float TimeScale;//[Offset: 0x10, Size: 0x4] 0x78dbe63680
	int HierarchicalBias;//[Offset: 0x14, Size: 0x4] 0x78dbe63700
	float StartOffset;//[Offset: 0x18, Size: 0x4] 0x78dbe63780
	float PrerollTime;//[Offset: 0x1c, Size: 0x4] 0x78dbe63800
	float PostrollTime;//[Offset: 0x20, Size: 0x4] 0x78dbe63880

--------------------------------
Class: TemplateSequenceSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEntitySystem.Object
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x28, Size: 0x8] 0x78dc129900

--------------------------------
Class: TemplateSequenceSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10] 0x78dc1120e0

--------------------------------
Class: TemplateSequenceTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: LayersBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void RemoveActorFromLayer(Actor* InActor, out const ActorLayer Layer);// 0x527d7b4 0x78dc10e4e0
	static Actor*[] GetActors(Object* WorldContextObject, out const ActorLayer ActorLayer);// 0x527d994 0x78dc10e5c0
	static void AddActorToLayer(Actor* InActor, out const ActorLayer Layer);// 0x527d8a4 0x78dc10e6a0

--------------------------------
Class: ActorLayer
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbe0cd00

--------------------------------
Class: AndroidPermissionCallbackProxy.Object
	delegate OnPermissionsGrantedDynamicDelegate;//[Offset: 0x28, Size: 0x10] 0x78dc12b480

--------------------------------
Class: AndroidPermissionFunctionLibrary.BlueprintFunctionLibrary.Object
	static bool CheckPermission(FString permission);// 0x5286364 0x78dc10e240
	static AndroidPermissionCallbackProxy* AcquirePermissions(out const FString[] permissions);// 0x5286218 0x78dc10e320

--------------------------------
Class: AppleImageUtilsBaseAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78dc12c500
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x78dc12c580
	AppleImageUtilsImageConversionResult ConversionResult;//[Offset: 0x60, Size: 0x20] 0x78dc12c600
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToTIFF(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x528978c 0x78dc10dec0
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToPNG(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x52895b4 0x78dc10dfa0
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToJPEG(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x5289b88 0x78dc10e080
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToHEIF(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x5289964 0x78dc10e160

--------------------------------
Class: AppleImageUtilsImageConversionResult
	FString Error;//[Offset: 0x0, Size: 0x10] 0x78d357a780
	byte[] ImageData;//[Offset: 0x10, Size: 0x10] 0x78cdd5de40

--------------------------------
Class: AppleImageInterface.Interface.Object

--------------------------------
Class: AssetTagsSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	FName[] GetCollectionsContainingAssetPtr(const Object* AssetPtr);// 0x528da24 0x78dc10d980
	FName[] GetCollectionsContainingAssetData(out const AssetData AssetData);// 0x528db44 0x78dc10da60
	FName[] GetCollectionsContainingAsset(const FName AssetPathName);// 0x528dd58 0x78dc10db40
	FName[] GetCollections();// 0x528e04c 0x78dc10dc20
	AssetData[] GetAssetsInCollection(const FName Name);// 0x528de78 0x78dc10dd00
	bool CollectionExists(const FName Name);// 0x528e120 0x78dc10dde0

--------------------------------
Class: AssetData
	FName ObjectPath;//[Offset: 0x0, Size: 0x8] 0x78e6836e80
	FName PackageName;//[Offset: 0x8, Size: 0x8] 0x78e6836f00
	FName PackagePath;//[Offset: 0x10, Size: 0x8] 0x78e6836f80
	FName AssetName;//[Offset: 0x18, Size: 0x8] 0x78e6837000
	FName AssetClass;//[Offset: 0x20, Size: 0x8] 0x78e6837080

--------------------------------
Class: GooglePADFunctionLibrary.BlueprintFunctionLibrary.Object
	static enum ShowCellularDataConfirmation();// 0x52a1050 0x78dc10cc60
	static enum RequestRemoval(FString Name);// 0x52a1084 0x78dc10cd40
	static enum RequestInfo(const FString[] AssetPacks);// 0x52a1934 0x78dc10ce20
	static enum RequestDownload(const FString[] AssetPacks);// 0x52a1728 0x78dc10cf00
	static void ReleaseDownloadState(const int State);// 0x52a1354 0x78dc10cfe0
	static void ReleaseAssetPackLocation(const int Location);// 0x52a0dd4 0x78dc10d0c0
	static int GetTotalBytesToDownload(const int State);// 0x52a115c 0x78dc10d1a0
	static enum GetStorageMethod(const int Location);// 0x52a0d2c 0x78dc10d280
	static enum GetShowCellularDataConfirmationStatus(out enum status);// 0x52a0f9c 0x78dc10d360
	static enum GetDownloadStatus(const int State);// 0x52a12ac 0x78dc10d440
	static enum GetDownloadState(FString Name, out int State);// 0x52a13ec 0x78dc10d520
	static int GetBytesDownloaded(const int State);// 0x52a1204 0x78dc10d600
	static FString GetAssetsPath(const int Location);// 0x52a0c14 0x78dc10d6e0
	static enum GetAssetPackLocation(FString Name, out int Location);// 0x52a0e6c 0x78dc10d7c0
	static enum CancelDownload(const FString[] AssetPacks);// 0x52a151c 0x78dc10d8a0

--------------------------------
Class: LocationServices.BlueprintFunctionLibrary.Object
	static bool StopLocationServices();// 0x52a30c8 0x78dc10fba0
	static bool StartLocationServices();// 0x52a3100 0x78dc10fc80
	static bool IsLocationAccuracyAvailable(enum Accuracy);// 0x52a2f78 0x78dc10fd60
	static bool InitLocationServices(enum Accuracy, float UpdateFrequency, float MinDistanceFilter);// 0x52a3138 0x78dc10fe40
	static LocationServicesImpl* GetLocationServicesImpl();// 0x52a2f54 0x78dc10ff20
	static LocationServicesData GetLastKnownLocation();// 0x52a305c 0x78dc10caa0
	static bool AreLocationServicesEnabled();// 0x52a3024 0x78dc10cb80

--------------------------------
Class: LocationServicesImpl.Object
	delegate OnLocationChanged;//[Offset: 0x28, Size: 0x10] 0x78dc12cc00

--------------------------------
Class: LocationServicesData
	float Timestamp;//[Offset: 0x0, Size: 0x4] 0x78d357c400
	float Longitude;//[Offset: 0x4, Size: 0x4] 0x78d357c480
	float Latitude;//[Offset: 0x8, Size: 0x4] 0x78d357c580
	float HorizontalAccuracy;//[Offset: 0xc, Size: 0x4] 0x78d357c500
	float VerticalAccuracy;//[Offset: 0x10, Size: 0x4] 0x78d357a580
	float Altitude;//[Offset: 0x14, Size: 0x4] 0x78d357c600

--------------------------------
Class: MobileInstalledContent.Object
	bool Mount(int PakOrder, FString MountPoint);// 0x52a9cfc 0x78dc10f580
	float GetInstalledContentSize();// 0x52a9e20 0x78dc10f660
	float GetDiskFreeSpace();// 0x52a9e54 0x78dc10f740

--------------------------------
Class: MobilePendingContent.MobileInstalledContent.Object
	void StartInstall(delegate OnSucceeded, delegate OnFailed);// 0x52aa2d8 0x78dc10ef60
	float GetTotalDownloadedSize();// 0x52aa51c 0x78dc10f040
	float GetRequiredDiskSpace();// 0x52aa550 0x78dc10f120
	float GetInstallProgress();// 0x52aa3e0 0x78dc10f200
	FText GetDownloadStatusText();// 0x52aa414 0x78dc10f2e0
	float GetDownloadSpeed();// 0x52aa4e8 0x78dc10f3c0
	float GetDownloadSize();// 0x52aa584 0x78dc10f4a0

--------------------------------
Class: MobilePatchingLibrary.BlueprintFunctionLibrary.Object
	static void RequestContent(FString RemoteManifestURL, FString CloudURL, FString InstallDirectory, delegate OnSucceeded, delegate OnFailed);// 0x52aad24 0x78dc10eb00
	static bool HasActiveWiFiConnection();// 0x52aacec 0x78dc10ebe0
	static FString[] GetSupportedPlatformNames();// 0x52aaaa4 0x78dc10ecc0
	static MobileInstalledContent* GetInstalledContent(FString InstallDirectory);// 0x52aaf88 0x78dc10eda0
	static FString GetActiveDeviceProfileName();// 0x52aac18 0x78dc10ee80

--------------------------------
Class: AmbisonicsEncodingSettings.SoundfieldEncodingSettingsBase.Object
	int AmbisonicsOrder;//[Offset: 0x28, Size: 0x4] 0x78dc12de80

--------------------------------
Class: ModularSynthPresetBank.Object
	ModularSynthPresetBankEntry[] Presets;//[Offset: 0x28, Size: 0x10] 0x78dc1136c0

--------------------------------
Class: ModularSynthPresetBankEntry
	FString PresetName;//[Offset: 0x0, Size: 0x10] 0x78dbe0ee80
	ModularSynthPreset Preset;//[Offset: 0x10, Size: 0xd0] 0x78dbe0cc80

--------------------------------
Class: ModularSynthPreset.TableRowBase
	bool bEnablePolyphony;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78dbe0ef00
	enum Osc1Type;//[Offset: 0x9, Size: 0x1] 0x78d3618da0
	float Osc1Gain;//[Offset: 0xc, Size: 0x4] 0x78dbe0f000
	float Osc1Octave;//[Offset: 0x10, Size: 0x4] 0x78dbe0f080
	float Osc1Semitones;//[Offset: 0x14, Size: 0x4] 0x78dbe0f100
	float Osc1Cents;//[Offset: 0x18, Size: 0x4] 0x78dbe0f180
	float Osc1PulseWidth;//[Offset: 0x1c, Size: 0x4] 0x78dbe0f200
	enum Osc2Type;//[Offset: 0x20, Size: 0x1] 0x78d3618e40
	float Osc2Gain;//[Offset: 0x24, Size: 0x4] 0x78dbe0f300
	float Osc2Octave;//[Offset: 0x28, Size: 0x4] 0x78dbe0f380
	float Osc2Semitones;//[Offset: 0x2c, Size: 0x4] 0x78dbe0f400
	float Osc2Cents;//[Offset: 0x30, Size: 0x4] 0x78dbe0f480
	float Osc2PulseWidth;//[Offset: 0x34, Size: 0x4] 0x78dbe0f500
	float Portamento;//[Offset: 0x38, Size: 0x4] 0x78dbe0f580
	bool bEnableUnison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78dbe0f600
	bool bEnableOscillatorSync;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78dbe0f680
	float Spread;//[Offset: 0x40, Size: 0x4] 0x78dbe0f700
	float Pan;//[Offset: 0x44, Size: 0x4] 0x78dbe0f780
	float LFO1Frequency;//[Offset: 0x48, Size: 0x4] 0x78dbe0d700
	float LFO1Gain;//[Offset: 0x4c, Size: 0x4] 0x78dbe0d780
	enum LFO1Type;//[Offset: 0x50, Size: 0x1] 0x78d3618ee0
	enum LFO1Mode;//[Offset: 0x51, Size: 0x1] 0x78d3618f80
	enum LFO1PatchType;//[Offset: 0x52, Size: 0x1] 0x78d3619020
	float LFO2Frequency;//[Offset: 0x54, Size: 0x4] 0x78dbe0d980
	float LFO2Gain;//[Offset: 0x58, Size: 0x4] 0x78dbe0da00
	enum LFO2Type;//[Offset: 0x5c, Size: 0x1] 0x78d3616780
	enum LFO2Mode;//[Offset: 0x5d, Size: 0x1] 0x78d3616820
	enum LFO2PatchType;//[Offset: 0x5e, Size: 0x1] 0x78d36168c0
	float GainDb;//[Offset: 0x60, Size: 0x4] 0x78dbe0dc00
	float AttackTime;//[Offset: 0x64, Size: 0x4] 0x78dbe0dc80
	float DecayTime;//[Offset: 0x68, Size: 0x4] 0x78dbe0dd00
	float SustainGain;//[Offset: 0x6c, Size: 0x4] 0x78dbe0dd80
	float ReleaseTime;//[Offset: 0x70, Size: 0x4] 0x78dbe0de00
	enum ModEnvPatchType;//[Offset: 0x74, Size: 0x1] 0x78d3616960
	enum ModEnvBiasPatchType;//[Offset: 0x75, Size: 0x1] 0x78d3616a00
	bool bInvertModulationEnvelope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76, Size: 0x1] 0x78dbe0df80
	bool bInvertModulationEnvelopeBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76, Size: 0x1] 0x78dbe0e000
	float ModulationEnvelopeDepth;//[Offset: 0x78, Size: 0x4] 0x78dbe0e080
	float ModulationEnvelopeAttackTime;//[Offset: 0x7c, Size: 0x4] 0x78dbe0e100
	float ModulationEnvelopeDecayTime;//[Offset: 0x80, Size: 0x4] 0x78dbe0e180
	float ModulationEnvelopeSustainGain;//[Offset: 0x84, Size: 0x4] 0x78dbe0e200
	float ModulationEnvelopeReleaseTime;//[Offset: 0x88, Size: 0x4] 0x78dbe0e280
	bool bLegato;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x78dbe0e300
	bool bRetrigger;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x78dbe0e380
	float FilterFrequency;//[Offset: 0x90, Size: 0x4] 0x78dbe0e400
	float FilterQ;//[Offset: 0x94, Size: 0x4] 0x78dbe0e480
	enum FilterType;//[Offset: 0x98, Size: 0x1] 0x78d3616aa0
	enum FilterAlgorithm;//[Offset: 0x99, Size: 0x1] 0x78d3616b40
	bool bStereoDelayEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a, Size: 0x1] 0x78dbe0e600
	enum StereoDelayMode;//[Offset: 0x9b, Size: 0x1] 0x78d3616be0
	float StereoDelayTime;//[Offset: 0x9c, Size: 0x4] 0x78dbe0e700
	float StereoDelayFeedback;//[Offset: 0xa0, Size: 0x4] 0x78dbe0c680
	float StereoDelayWetlevel;//[Offset: 0xa4, Size: 0x4] 0x78dbe0c700
	float StereoDelayRatio;//[Offset: 0xa8, Size: 0x4] 0x78dbe0c780
	bool bChorusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x78dbe0c800
	float ChorusDepth;//[Offset: 0xb0, Size: 0x4] 0x78dbe0c880
	float ChorusFeedback;//[Offset: 0xb4, Size: 0x4] 0x78dbe0c900
	float ChorusFrequency;//[Offset: 0xb8, Size: 0x4] 0x78dbe0c980
	EpicSynth1Patch[] Patches;//[Offset: 0xc0, Size: 0x10] 0x78d3616e60

--------------------------------
Class: EpicSynth1Patch
	enum PatchSource;//[Offset: 0x0, Size: 0x1] 0x78d3616c80
	Synth1PatchCable[] PatchCables;//[Offset: 0x8, Size: 0x10] 0x78d3616dc0

--------------------------------
Class: Synth1PatchCable
	float Depth;//[Offset: 0x0, Size: 0x4] 0x78dbe0ca80
	enum Destination;//[Offset: 0x4, Size: 0x1] 0x78d3616d20

--------------------------------
Class: ModularSynthLibrary.BlueprintFunctionLibrary.Object
	static void AddModularSynthPresetToBankAsset(ModularSynthPresetBank* InBank, out const ModularSynthPreset Preset, FString PresetName);// 0x52fccf0 0x78dc10ea20

--------------------------------
Class: ModularSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object
	int VoiceCount;//[Offset: 0x6d0, Size: 0x4] 0x78dc140500
	void SetSynthPreset(out const ModularSynthPreset SynthPreset);// 0x52fd514 0x78dc132620
	void SetSustainGain(float SustainGain);// 0x52fe9d8 0x78dc132700
	void SetStereoDelayWetlevel(float DelayWetlevel);// 0x52fda98 0x78dc1327e0
	void SetStereoDelayTime(float DelayTimeMsec);// 0x52fdbe8 0x78dc1328c0
	void SetStereoDelayRatio(float DelayRatio);// 0x52fd9f0 0x78dc1329a0
	void SetStereoDelayMode(enum StereoDelayMode);// 0x52fdc90 0x78dc132a80
	void SetStereoDelayIsEnabled(bool StereoDelayEnabled);// 0x52fdd38 0x78dc132b60
	void SetStereoDelayFeedback(float DelayFeedback);// 0x52fdb40 0x78dc132c40
	void SetSpread(float Spread);// 0x52ff324 0x78dc132d20
	void SetReleaseTime(float ReleaseTimeMsec);// 0x52fe930 0x78dc132e00
	void SetPortamento(float Portamento);// 0x52ff6c8 0x78dc132ee0
	void SetPitchBend(float PitchBend);// 0x52ff770 0x78dc132fc0
	void SetPan(float Pan);// 0x52ff3cc 0x78dc1330a0
	void SetOscType(int OscIndex, enum OscType);// 0x52ffaf4 0x78dc133180
	void SetOscSync(const bool bIsSynced);// 0x52ff474 0x78dc133260
	void SetOscSemitones(int OscIndex, float Semitones);// 0x52ff90c 0x78dc133340
	void SetOscPulsewidth(int OscIndex, float Pulsewidth);// 0x52ff5d4 0x78dc133420
	void SetOscOctave(int OscIndex, float Octave);// 0x52ffa00 0x78dc133500
	void SetOscGainMod(int OscIndex, float OscGainMod);// 0x52ffcdc 0x78dc1335e0
	void SetOscGain(int OscIndex, float OscGain);// 0x52ffdd0 0x78dc1336c0
	void SetOscFrequencyMod(int OscIndex, float OscFreqMod);// 0x52ffbe8 0x78dc1337a0
	void SetOscCents(int OscIndex, float Cents);// 0x52ff818 0x78dc133880
	void SetModEnvSustainGain(const float SustainGain);// 0x52fe3e0 0x78dc133960
	void SetModEnvReleaseTime(const float Release);// 0x52fe338 0x78dc130080
	void SetModEnvPatch(const enum InPatchType);// 0x52fe888 0x78dc130160
	void SetModEnvInvert(const bool bInvert);// 0x52fe730 0x78dc130240
	void SetModEnvDepth(const float Depth);// 0x52fe5d8 0x78dc130320
	void SetModEnvDecayTime(const float DecayTimeMsec);// 0x52fe488 0x78dc130400
	void SetModEnvBiasPatch(const enum InPatchType);// 0x52fe7e0 0x78dc1304e0
	void SetModEnvBiasInvert(const bool bInvert);// 0x52fe680 0x78dc1305c0
	void SetModEnvAttackTime(const float AttackTimeMsec);// 0x52fe530 0x78dc1306a0
	void SetLFOType(int LFOIndex, enum LFOType);// 0x52fee60 0x78dc130780
	void SetLFOPatch(int LFOIndex, enum LFOPatchType);// 0x52fec78 0x78dc130860
	void SetLFOMode(int LFOIndex, enum LFOMode);// 0x52fed6c 0x78dc130940
	void SetLFOGainMod(int LFOIndex, float GainMod);// 0x52fef54 0x78dc130a20
	void SetLFOGain(int LFOIndex, float Gain);// 0x52ff048 0x78dc130b00
	void SetLFOFrequencyMod(int LFOIndex, float FrequencyModHz);// 0x52ff13c 0x78dc130be0
	void SetLFOFrequency(int LFOIndex, float FrequencyHz);// 0x52ff230 0x78dc130cc0
	void SetGainDb(float GainDb);// 0x52febd0 0x78dc130da0
	void SetFilterType(enum FilterType);// 0x52fde90 0x78dc130e80
	void SetFilterQMod(float FilterQ);// 0x52fdf38 0x78dc130f60
	void SetFilterQ(float FilterQ);// 0x52fdfe0 0x78dc131040
	void SetFilterFrequencyMod(float FilterFrequencyHz);// 0x52fe088 0x78dc131120
	void SetFilterFrequency(float FilterFrequencyHz);// 0x52fe130 0x78dc131200
	void SetFilterAlgorithm(enum FilterAlgorithm);// 0x52fdde8 0x78dc1312e0
	void SetEnableUnison(bool EnableUnison);// 0x52ff524 0x78dc1313c0
	void SetEnableRetrigger(bool RetriggerEnabled);// 0x52fe1d8 0x78dc1314a0
	void SetEnablePolyphony(bool bEnablePolyphony);// 0x52ffec4 0x78dc131580
	bool SetEnablePatch(const PatchId PatchId, const bool bIsEnabled);// 0x52fd264 0x78dc131660
	void SetEnableLegato(bool LegatoEnabled);// 0x52fe288 0x78dc131740
	void SetDecayTime(float DecayTimeMsec);// 0x52fea80 0x78dc131820
	void SetChorusFrequency(float Frequency);// 0x52fd748 0x78dc131900
	void SetChorusFeedback(float Feedback);// 0x52fd7f0 0x78dc1319e0
	void SetChorusEnabled(bool EnableChorus);// 0x52fd940 0x78dc131ac0
	void SetChorusDepth(float Depth);// 0x52fd898 0x78dc131ba0
	void SetAttackTime(float AttackTimeMsec);// 0x52feb28 0x78dc131c80
	void NoteOn(const float Note, const int Velocity, const float Duration);// 0x53000b8 0x78dc10e780
	void NoteOff(const float Note, const bool bAllNotesOff, const bool bKillAllNotes);// 0x52fff74 0x78dc10e860
	PatchId CreatePatch(const enum PatchSource, out const Synth1PatchCable[] PatchCables, const bool bEnableByDefault);// 0x52fd36c 0x78dc10e940

--------------------------------
Class: PatchId
	int ID;//[Offset: 0x0, Size: 0x4] 0x78dbe0ee00

--------------------------------
Class: SourceEffectBitCrusherPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectBitCrusherSettings Settings;//[Offset: 0xc0, Size: 0x30] 0x78dc140180
	void SetSettings(out const SourceEffectBitCrusherBaseSettings Settings);// 0x53035e4 0x78dc1320e0
	void SetSampleRateModulator(const SoundModulatorBase* Modulator);// 0x53036a0 0x78dc1321c0
	void SetSampleRate(float SampleRate);// 0x5303748 0x78dc1322a0
	void SetModulationSettings(out const SourceEffectBitCrusherSettings ModulationSettings);// 0x5303514 0x78dc132380
	void SetBits(float Bits);// 0x5303898 0x78dc132460
	void SetBitModulator(const SoundModulatorBase* Modulator);// 0x53037f0 0x78dc132540

--------------------------------
Class: SourceEffectBitCrusherBaseSettings
	float SampleRate;//[Offset: 0x0, Size: 0x4] 0x78dbe0ea00
	float BitDepth;//[Offset: 0x4, Size: 0x4] 0x78dbe0ea80

--------------------------------
Class: SourceEffectBitCrusherSettings
	float CrushedSampleRate;//[Offset: 0x0, Size: 0x4] 0x78dbe0eb00
	SoundModulationDestinationSettings SampleRateModulation;//[Offset: 0x8, Size: 0x10] 0x78dbe0eb80
	float CrushedBits;//[Offset: 0x18, Size: 0x4] 0x78dbe0ec00
	SoundModulationDestinationSettings BitModulation;//[Offset: 0x20, Size: 0x10] 0x78dbe0ed80

--------------------------------
Class: SourceEffectChorusPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectChorusSettings Settings;//[Offset: 0x108, Size: 0x78] 0x78dc141b00
	void SetWetModulator(const SoundModulatorBase* Modulator);// 0x53043c0 0x78dc134e60
	void SetWet(float WetAmount);// 0x5304468 0x78dc134f40
	void SetSpreadModulator(const SoundModulatorBase* Modulator);// 0x5304120 0x78dc135020
	void SetSpread(float Spread);// 0x53041c8 0x78dc135100
	void SetSettings(out const SourceEffectChorusBaseSettings Settings);// 0x530405c 0x78dc1351e0
	void SetModulationSettings(out const SourceEffectChorusSettings ModulationSettings);// 0x5303f58 0x78dc1352c0
	void SetFrequencyModulator(const SoundModulatorBase* Modulator);// 0x5304510 0x78dc1353a0
	void SetFrequency(float Frequency);// 0x53045b8 0x78dc135480
	void SetFeedbackModulator(const SoundModulatorBase* Modulator);// 0x5304660 0x78dc135560
	void SetFeedback(float Feedback);// 0x5304708 0x78dc135640
	void SetDryModulator(const SoundModulatorBase* Modulator);// 0x5304270 0x78dc131d60
	void SetDry(float DryAmount);// 0x5304318 0x78dc131e40
	void SetDepthModulator(const SoundModulatorBase* Modulator);// 0x53047b0 0x78dc131f20
	void SetDepth(float Depth);// 0x5304858 0x78dc132000

--------------------------------
Class: SourceEffectChorusSettings
	float Depth;//[Offset: 0x0, Size: 0x4] 0x78dbe0fc80
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x78dbe0fd00
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x78dbe0fd80
	float WetLevel;//[Offset: 0xc, Size: 0x4] 0x78dbe0fe00
	float DryLevel;//[Offset: 0x10, Size: 0x4] 0x78dbe0fe80
	float Spread;//[Offset: 0x14, Size: 0x4] 0x78dbe0ff00
	SoundModulationDestinationSettings DepthModulation;//[Offset: 0x18, Size: 0x10] 0x78dbe0ff80
	SoundModulationDestinationSettings FrequencyModulation;//[Offset: 0x28, Size: 0x10] 0x78dbe0e780
	SoundModulationDestinationSettings FeedbackModulation;//[Offset: 0x38, Size: 0x10] 0x78dbe0e800
	SoundModulationDestinationSettings WetModulation;//[Offset: 0x48, Size: 0x10] 0x78dbe0e880
	SoundModulationDestinationSettings DryModulation;//[Offset: 0x58, Size: 0x10] 0x78dbe0e900
	SoundModulationDestinationSettings SpreadModulation;//[Offset: 0x68, Size: 0x10] 0x78dbe0e980

--------------------------------
Class: SourceEffectChorusBaseSettings
	float Depth;//[Offset: 0x0, Size: 0x4] 0x78dbe0f980
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x78dbe0fa00
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x78dbe0fa80
	float WetLevel;//[Offset: 0xc, Size: 0x4] 0x78dbe0fb00
	float DryLevel;//[Offset: 0x10, Size: 0x4] 0x78dbe0fb80
	float Spread;//[Offset: 0x14, Size: 0x4] 0x78dbe0fc00

--------------------------------
Class: SourceEffectDynamicsProcessorPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectDynamicsProcessorSettings Settings;//[Offset: 0xb4, Size: 0x28] 0x78dc141a00
	void SetSettings(out const SourceEffectDynamicsProcessorSettings InSettings);// 0x53051e8 0x78dc134d80

--------------------------------
Class: SourceEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x78d3618c60
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x78d3618d00
	float LookAheadMsec;//[Offset: 0x4, Size: 0x4] 0x78dbe10d80
	float AttackTimeMsec;//[Offset: 0x8, Size: 0x4] 0x78dbe10e00
	float ReleaseTimeMsec;//[Offset: 0xc, Size: 0x4] 0x78dbe10e80
	float ThresholdDb;//[Offset: 0x10, Size: 0x4] 0x78dbe10f00
	float ratio;//[Offset: 0x14, Size: 0x4] 0x78dbe10f80
	float KneeBandwidthDb;//[Offset: 0x18, Size: 0x4] 0x78dbe11000
	float InputGainDb;//[Offset: 0x1c, Size: 0x4] 0x78dbe11080
	float OutputGainDb;//[Offset: 0x20, Size: 0x4] 0x78dbe0f800
	bool bStereoLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1] 0x78dbe0f880
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1] 0x78dbe0f900

--------------------------------
Class: EnvelopeFollowerListener.ActorComponent.Object
	delegate OnEnvelopeFollowerUpdate;//[Offset: 0xb8, Size: 0x10] 0x78dc141980

--------------------------------
Class: SourceEffectEnvelopeFollowerPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectEnvelopeFollowerSettings Settings;//[Offset: 0x98, Size: 0xc] 0x78dc141780
	void UnregisterEnvelopeFollowerListener(EnvelopeFollowerListener* EnvelopeFollowerListener);// 0x53058d4 0x78dc134ae0
	void SetSettings(out const SourceEffectEnvelopeFollowerSettings InSettings);// 0x5305a24 0x78dc134bc0
	void RegisterEnvelopeFollowerListener(EnvelopeFollowerListener* EnvelopeFollowerListener);// 0x530597c 0x78dc134ca0

--------------------------------
Class: SourceEffectEnvelopeFollowerSettings
	float AttackTime;//[Offset: 0x0, Size: 0x4] 0x78dbe10a80
	float ReleaseTime;//[Offset: 0x4, Size: 0x4] 0x78dbe10b00
	enum PeakMode;//[Offset: 0x8, Size: 0x1] 0x78d3618bc0
	bool bIsAnalogMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x78dbe10c00

--------------------------------
Class: SourceEffectEQPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectEQSettings Settings;//[Offset: 0xa0, Size: 0x10] 0x78dc141680
	void SetSettings(out const SourceEffectEQSettings InSettings);// 0x5305f58 0x78dc134a00

--------------------------------
Class: SourceEffectEQSettings
	SourceEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10] 0x78d3618b20

--------------------------------
Class: SourceEffectEQBand
	float Frequency;//[Offset: 0x0, Size: 0x4] 0x78dbe10800
	float Bandwidth;//[Offset: 0x4, Size: 0x4] 0x78dbe10880
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x78dbe10900
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78dbe10980

--------------------------------
Class: SourceEffectFilterPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectFilterSettings Settings;//[Offset: 0xb0, Size: 0x20] 0x78dc141580
	void SetSettings(out const SourceEffectFilterSettings InSettings);// 0x5306674 0x78dc134920

--------------------------------
Class: SourceEffectFilterSettings
	enum FilterCircuit;//[Offset: 0x0, Size: 0x1] 0x78d36188a0
	enum FilterType;//[Offset: 0x1, Size: 0x1] 0x78d3618940
	float CutoffFrequency;//[Offset: 0x4, Size: 0x4] 0x78dbe10200
	float FilterQ;//[Offset: 0x8, Size: 0x4] 0x78dbe10280
	SourceEffectFilterAudioBusModulationSettings[] AudioBusModulation;//[Offset: 0x10, Size: 0x10] 0x78d3618a80

--------------------------------
Class: SourceEffectFilterAudioBusModulationSettings
	AudioBus* AudioBus;//[Offset: 0x0, Size: 0x8] 0x78dbe10300
	int EnvelopeFollowerAttackTimeMsec;//[Offset: 0x8, Size: 0x4] 0x78dbe10380
	int EnvelopeFollowerReleaseTimeMsec;//[Offset: 0xc, Size: 0x4] 0x78dbe10400
	float EnvelopeGainMultiplier;//[Offset: 0x10, Size: 0x4] 0x78dbe10480
	enum FilterParam;//[Offset: 0x14, Size: 0x1] 0x78d36189e0
	float MinFrequencyModulation;//[Offset: 0x18, Size: 0x4] 0x78dbe10580
	float MaxFrequencyModulation;//[Offset: 0x1c, Size: 0x4] 0x78dbe10600
	float MinResonanceModulation;//[Offset: 0x20, Size: 0x4] 0x78dbe10680
	float MaxResonanceModulation;//[Offset: 0x24, Size: 0x4] 0x78dbe10700

--------------------------------
Class: SourceEffectFoldbackDistortionPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectFoldbackDistortionSettings Settings;//[Offset: 0x98, Size: 0xc] 0x78dc141480
	void SetSettings(out const SourceEffectFoldbackDistortionSettings InSettings);// 0x5306a64 0x78dc134840

--------------------------------
Class: SourceEffectFoldbackDistortionSettings
	float InputGainDb;//[Offset: 0x0, Size: 0x4] 0x78dbe12080
	float ThresholdDb;//[Offset: 0x4, Size: 0x4] 0x78dbe12100
	float OutputGainDb;//[Offset: 0x8, Size: 0x4] 0x78dbe10080

--------------------------------
Class: SourceEffectMidSideSpreaderPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectMidSideSpreaderSettings Settings;//[Offset: 0x94, Size: 0x8] 0x78dc141380
	void SetSettings(out const SourceEffectMidSideSpreaderSettings InSettings);// 0x5306f6c 0x78dc134760

--------------------------------
Class: SourceEffectMidSideSpreaderSettings
	float SpreadAmount;//[Offset: 0x0, Size: 0x4] 0x78dbe11e80
	enum InputMode;//[Offset: 0x4, Size: 0x1] 0x78d3618760
	enum OutputMode;//[Offset: 0x5, Size: 0x1] 0x78d3618800
	bool bEqualPower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x78dbe12000

--------------------------------
Class: SourceEffectPannerPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectPannerSettings Settings;//[Offset: 0x94, Size: 0x8] 0x78dc141280
	void SetSettings(out const SourceEffectPannerSettings InSettings);// 0x5307320 0x78dc134680

--------------------------------
Class: SourceEffectPannerSettings
	float Spread;//[Offset: 0x0, Size: 0x4] 0x78dbe11d80
	float Pan;//[Offset: 0x4, Size: 0x4] 0x78dbe11e00

--------------------------------
Class: SourceEffectPhaserPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectPhaserSettings Settings;//[Offset: 0x9c, Size: 0x10] 0x78dc141180
	void SetSettings(out const SourceEffectPhaserSettings InSettings);// 0x5307814 0x78dc1345a0

--------------------------------
Class: SourceEffectPhaserSettings
	float WetLevel;//[Offset: 0x0, Size: 0x4] 0x78dbe11b00
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x78dbe11b80
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x78dbe11c00
	enum LFOType;//[Offset: 0xc, Size: 0x1] 0x78d36186c0
	bool UseQuadraturePhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x78dbe11d00

--------------------------------
Class: SourceEffectRingModulationPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectRingModulationSettings Settings;//[Offset: 0xb0, Size: 0x20] 0x78dc143180
	void SetSettings(out const SourceEffectRingModulationSettings InSettings);// 0x5307c74 0x78dc1344c0

--------------------------------
Class: SourceEffectRingModulationSettings
	enum ModulatorType;//[Offset: 0x0, Size: 0x1] 0x78d3618620
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x78dbe11880
	float Depth;//[Offset: 0x8, Size: 0x4] 0x78dbe11900
	float DryLevel;//[Offset: 0xc, Size: 0x4] 0x78dbe11980
	float WetLevel;//[Offset: 0x10, Size: 0x4] 0x78dbe11a00
	AudioBus* AudioBusModulator;//[Offset: 0x18, Size: 0x8] 0x78dbe11a80

--------------------------------
Class: SourceEffectSimpleDelayPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectSimpleDelaySettings Settings;//[Offset: 0xa4, Size: 0x18] 0x78dc143080
	void SetSettings(out const SourceEffectSimpleDelaySettings InSettings);// 0x530e5f4 0x78dc1343e0

--------------------------------
Class: SourceEffectSimpleDelaySettings
	float SpeedOfSound;//[Offset: 0x0, Size: 0x4] 0x78dbe11500
	float DelayAmount;//[Offset: 0x4, Size: 0x4] 0x78dbe11580
	float DryAmount;//[Offset: 0x8, Size: 0x4] 0x78dbe11600
	float WetAmount;//[Offset: 0xc, Size: 0x4] 0x78dbe11680
	float Feedback;//[Offset: 0x10, Size: 0x4] 0x78dbe11700
	bool bDelayBasedOnDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x78dbe11780

--------------------------------
Class: SourceEffectStereoDelayPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectStereoDelaySettings Settings;//[Offset: 0xb0, Size: 0x24] 0x78dc142f80
	void SetSettings(out const SourceEffectStereoDelaySettings InSettings);// 0x530eaf8 0x78dc134300

--------------------------------
Class: SourceEffectStereoDelaySettings
	enum DelayMode;//[Offset: 0x0, Size: 0x1] 0x78d36184e0
	float DelayTimeMsec;//[Offset: 0x4, Size: 0x4] 0x78dbe13180
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x78dbe11100
	float DelayRatio;//[Offset: 0xc, Size: 0x4] 0x78dbe11180
	float WetLevel;//[Offset: 0x10, Size: 0x4] 0x78dbe11200
	float DryLevel;//[Offset: 0x14, Size: 0x4] 0x78dbe11280
	bool bFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78dbe11300
	enum FilterType;//[Offset: 0x19, Size: 0x1] 0x78d3618580
	float FilterFrequency;//[Offset: 0x1c, Size: 0x4] 0x78dbe11400
	float FilterQ;//[Offset: 0x20, Size: 0x4] 0x78dbe11480

--------------------------------
Class: SourceEffectWaveShaperPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectWaveShaperSettings Settings;//[Offset: 0x94, Size: 0x8] 0x78dc142e80
	void SetSettings(out const SourceEffectWaveShaperSettings InSettings);// 0x530eecc 0x78dc134220

--------------------------------
Class: SourceEffectWaveShaperSettings
	float Amount;//[Offset: 0x0, Size: 0x4] 0x78dbe13000
	float OutputGainDb;//[Offset: 0x4, Size: 0x4] 0x78dbe13080

--------------------------------
Class: AudioImpulseResponse.Object
	float[] ImpulseResponse;//[Offset: 0x28, Size: 0x10] 0x78dc112ea0
	int NumChannels;//[Offset: 0x38, Size: 0x4] 0x78dc142c00
	int SampleRate;//[Offset: 0x3c, Size: 0x4] 0x78dc142c80
	float NormalizationVolumeDb;//[Offset: 0x40, Size: 0x4] 0x78dc142d00
	bool bTrueStereo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78dc142d80
	float[] IRData;//[Offset: 0x48, Size: 0x10] 0x78dc112f40

--------------------------------
Class: SubmixEffectConvolutionReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	AudioImpulseResponse* ImpulseResponse;//[Offset: 0x68, Size: 0x8] 0x78dc142880
	SubmixEffectConvolutionReverbSettings Settings;//[Offset: 0x70, Size: 0x28] 0x78dc142900
	enum BlockSize;//[Offset: 0x98, Size: 0x1] 0x78dc112e00
	bool bEnableHardwareAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1] 0x78dc142a00
	void SetSettings(out const SubmixEffectConvolutionReverbSettings InSettings);// 0x530f678 0x78dc134060
	void SetImpulseResponse(AudioImpulseResponse* InImpulseResponse);// 0x530f5d0 0x78dc134140

--------------------------------
Class: SubmixEffectConvolutionReverbSettings
	float NormalizationVolumeDb;//[Offset: 0x0, Size: 0x4] 0x78dbe12b00
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78dbe12b80
	bool bMixInputChannelFormatToImpulseResponseFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x78dbe12c00
	bool bMixReverbOutputToOutputChannelFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x78dbe12c80
	float SurroundRearChannelBleedDb;//[Offset: 0x8, Size: 0x4] 0x78dbe12d00
	bool bInvertRearChannelBleedPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78dbe12d80
	bool bSurroundRearChannelFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x78dbe12e00
	float SurroundRearChannelBleedAmount;//[Offset: 0x10, Size: 0x4] 0x78dbe12e80
	AudioImpulseResponse* ImpulseResponse;//[Offset: 0x18, Size: 0x8] 0x78dbe12f00
	bool AllowHArdwareAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78dbe12f80

--------------------------------
Class: SubmixEffectDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectDelaySettings Settings;//[Offset: 0x98, Size: 0xc] 0x78dc142580
	SubmixEffectDelaySettings DynamicSettings;//[Offset: 0xa4, Size: 0xc] 0x78dc142600
	void SetSettings(out const SubmixEffectDelaySettings InSettings);// 0x530fcac 0x78dc133ce0
	void SetInterpolationTime(float Time);// 0x530fbe8 0x78dc133dc0
	void SetDelay(float Length);// 0x530fb40 0x78dc133ea0
	float GetMaxDelayInMilliseconds();// 0x530fc90 0x78dc133f80

--------------------------------
Class: SubmixEffectDelaySettings
	float MaximumDelayLength;//[Offset: 0x0, Size: 0x4] 0x78dbe12980
	float InterpolationTime;//[Offset: 0x4, Size: 0x4] 0x78dbe12a00
	float DelayLength;//[Offset: 0x8, Size: 0x4] 0x78dbe12a80

--------------------------------
Class: SubmixEffectFilterPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectFilterSettings Settings;//[Offset: 0x98, Size: 0xc] 0x78dc144200
	void SetSettings(out const SubmixEffectFilterSettings InSettings);// 0x5310730 0x78dc137080
	void SetFilterType(enum InType);// 0x5310688 0x78dc137160
	void SetFilterQMod(float InQ);// 0x5310340 0x78dc137240
	void SetFilterQ(float InQ);// 0x53103e8 0x78dc137320
	void SetFilterCutoffFrequencyMod(float InFrequency);// 0x5310490 0x78dc133a40
	void SetFilterCutoffFrequency(float InFrequency);// 0x5310538 0x78dc133b20
	void SetFilterAlgorithm(enum InAlgorithm);// 0x53105e0 0x78dc133c00

--------------------------------
Class: SubmixEffectFilterSettings
	enum FilterType;//[Offset: 0x0, Size: 0x1] 0x78d36183a0
	enum FilterAlgorithm;//[Offset: 0x1, Size: 0x1] 0x78d3618440
	float FilterFrequency;//[Offset: 0x4, Size: 0x4] 0x78dbe12880
	float FilterQ;//[Offset: 0x8, Size: 0x4] 0x78dbe12900

--------------------------------
Class: SubmixEffectFlexiverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectFlexiverbSettings Settings;//[Offset: 0x9c, Size: 0x10] 0x78dc144100
	void SetSettings(out const SubmixEffectFlexiverbSettings InSettings);// 0x5310ca8 0x78dc136fa0

--------------------------------
Class: SubmixEffectFlexiverbSettings
	float PreDelay;//[Offset: 0x0, Size: 0x4] 0x78dbe12580
	float DecayTime;//[Offset: 0x4, Size: 0x4] 0x78dbe12600
	float RoomDampening;//[Offset: 0x8, Size: 0x4] 0x78dbe12680
	int Complexity;//[Offset: 0xc, Size: 0x4] 0x78dbe12700

--------------------------------
Class: SubmixEffectMultibandCompressorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectMultibandCompressorSettings Settings;//[Offset: 0xb0, Size: 0x20] 0x78dc144000
	void SetSettings(out const SubmixEffectMultibandCompressorSettings InSettings);// 0x531115c 0x78dc136ec0

--------------------------------
Class: SubmixEffectMultibandCompressorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x78d36181c0
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x78d3618260
	float LookAheadMsec;//[Offset: 0x4, Size: 0x4] 0x78dbe14000
	bool bLinkChannels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78dbe14080
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x78dbe14100
	bool bFourPole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x78dbe14180
	DynamicsBandSettings[] Bands;//[Offset: 0x10, Size: 0x10] 0x78d3618300

--------------------------------
Class: DynamicsBandSettings
	float CrossoverTopFrequency;//[Offset: 0x0, Size: 0x4] 0x78dbe14200
	float AttackTimeMsec;//[Offset: 0x4, Size: 0x4] 0x78dbe12180
	float ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4] 0x78dbe12200
	float ThresholdDb;//[Offset: 0xc, Size: 0x4] 0x78dbe12280
	float ratio;//[Offset: 0x10, Size: 0x4] 0x78dbe12300
	float KneeBandwidthDb;//[Offset: 0x14, Size: 0x4] 0x78dbe12380
	float InputGainDb;//[Offset: 0x18, Size: 0x4] 0x78dbe12400
	float OutputGainDb;//[Offset: 0x1c, Size: 0x4] 0x78dbe12480

--------------------------------
Class: SubmixEffectStereoDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectStereoDelaySettings Settings;//[Offset: 0xb0, Size: 0x24] 0x78dc143f00
	void SetSettings(out const SubmixEffectStereoDelaySettings InSettings);// 0x5311564 0x78dc136de0

--------------------------------
Class: SubmixEffectStereoDelaySettings
	enum DelayMode;//[Offset: 0x0, Size: 0x1] 0x78d3618080
	float DelayTimeMsec;//[Offset: 0x4, Size: 0x4] 0x78dbe13a80
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x78dbe13b00
	float DelayRatio;//[Offset: 0xc, Size: 0x4] 0x78dbe13b80
	float WetLevel;//[Offset: 0x10, Size: 0x4] 0x78dbe13c00
	float DryLevel;//[Offset: 0x14, Size: 0x4] 0x78dbe13c80
	bool bFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78dbe13d00
	enum FilterType;//[Offset: 0x19, Size: 0x1] 0x78d3618120
	float FilterFrequency;//[Offset: 0x1c, Size: 0x4] 0x78dbe13e00
	float FilterQ;//[Offset: 0x20, Size: 0x4] 0x78dbe13e80

--------------------------------
Class: SubmixEffectTapDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectTapDelaySettings Settings;//[Offset: 0xa8, Size: 0x18] 0x78dc143980
	void SetTap(int TapId, out const TapDelayInfo TapInfo);// 0x5311e08 0x78dc1366e0
	void SetSettings(out const SubmixEffectTapDelaySettings InSettings);// 0x531205c 0x78dc1367c0
	void SetInterpolationTime(float Time);// 0x5311b68 0x78dc1368a0
	void RemoveTap(int TapId);// 0x5311f00 0x78dc136980
	void GetTapIds(out int[] TapIds);// 0x5311c2c 0x78dc136a60
	void GetTap(int TapId, out TapDelayInfo TapInfo);// 0x5311d10 0x78dc136b40
	float GetMaxDelayInMilliseconds();// 0x5311c10 0x78dc136c20
	void AddTap(out int TapId);// 0x5311fa8 0x78dc136d00

--------------------------------
Class: TapDelayInfo
	enum TapLineMode;//[Offset: 0x0, Size: 0x1] 0x78d3617f40
	float DelayLength;//[Offset: 0x4, Size: 0x4] 0x78dbe13700
	float Gain;//[Offset: 0x8, Size: 0x4] 0x78dbe13780
	int OutputChannel;//[Offset: 0xc, Size: 0x4] 0x78dbe13800
	float PanInDegrees;//[Offset: 0x10, Size: 0x4] 0x78dbe13880
	int TapId;//[Offset: 0x14, Size: 0x4] 0x78dbe13900

--------------------------------
Class: SubmixEffectTapDelaySettings
	float MaximumDelayLength;//[Offset: 0x0, Size: 0x4] 0x78dbe13580
	float InterpolationTime;//[Offset: 0x4, Size: 0x4] 0x78dbe13600
	TapDelayInfo[] Taps;//[Offset: 0x8, Size: 0x10] 0x78d3617fe0

--------------------------------
Class: Synth2DSlider.Widget.Visual.Object
	float ValueX;//[Offset: 0x108, Size: 0x4] 0x78dc144f80
	float ValueY;//[Offset: 0x10c, Size: 0x4] 0x78dc145000
	delegate ValueXDelegate;//[Offset: 0x110, Size: 0x10] 0x78dc145080
	delegate ValueYDelegate;//[Offset: 0x120, Size: 0x10] 0x78dc145100
	Synth2DSliderStyle WidgetStyle;//[Offset: 0x130, Size: 0x2b8] 0x78dc145180
	LinearColor SliderHandleColor;//[Offset: 0x3e8, Size: 0x10] 0x78dc145200
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1] 0x78dc145280
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1] 0x78dc143200
	float StepSize;//[Offset: 0x3fc, Size: 0x4] 0x78dc143280
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1] 0x78dc143300
	delegate OnMouseCaptureBegin;//[Offset: 0x408, Size: 0x10] 0x78dc143380
	delegate OnMouseCaptureEnd;//[Offset: 0x418, Size: 0x10] 0x78dc143400
	delegate OnControllerCaptureBegin;//[Offset: 0x428, Size: 0x10] 0x78dc143480
	delegate OnControllerCaptureEnd;//[Offset: 0x438, Size: 0x10] 0x78dc143500
	delegate OnValueChangedX;//[Offset: 0x448, Size: 0x10] 0x78dc143580
	delegate OnValueChangedY;//[Offset: 0x458, Size: 0x10] 0x78dc143600
	void SetValue(Vector2D InValue);// 0x5312a68 0x78dc1361a0
	void SetStepSize(float InValue);// 0x5312860 0x78dc136280
	void SetSliderHandleColor(LinearColor InValue);// 0x53127b8 0x78dc136360
	void SetLocked(bool InValue);// 0x5312908 0x78dc136440
	void SetIndentHandle(bool InValue);// 0x53129b8 0x78dc136520
	Vector2D GetValue();// 0x5312b0c 0x78dc136600

--------------------------------
Class: Synth2DSliderStyle.SlateWidgetStyle
	SlateBrush NormalThumbImage;//[Offset: 0x8, Size: 0x88] 0x78dbe13280
	SlateBrush DisabledThumbImage;//[Offset: 0x90, Size: 0x88] 0x78dbe13300
	SlateBrush NormalBarImage;//[Offset: 0x118, Size: 0x88] 0x78dbe13380
	SlateBrush DisabledBarImage;//[Offset: 0x1a0, Size: 0x88] 0x78dbe13400
	SlateBrush BackgroundImage;//[Offset: 0x228, Size: 0x88] 0x78dbe13480
	float BarThickness;//[Offset: 0x2b0, Size: 0x4] 0x78dbe13500

--------------------------------
Class: GranularSynth.SynthComponent.SceneComponent.ActorComponent.Object
	SoundWave* GranulatedSoundWave;//[Offset: 0x6d0, Size: 0x8] 0x78dc146080
	void SetSustainGain(const float SustainGain);// 0x53188cc 0x78dc1389e0
	void SetSoundWave(SoundWave* InSoundWave);// 0x5318ac4 0x78dc138ac0
	void SetScrubMode(const bool bScrubMode);// 0x5317eb4 0x78dc138ba0
	void SetReleaseTimeMsec(const float ReleaseTimeMsec);// 0x5318824 0x78dc138c80
	void SetPlayheadTime(const float InPositionSec, const float LerpTimeSec, enum SeekType);// 0x5317d78 0x78dc138d60
	void SetPlaybackSpeed(const float InPlayheadRate);// 0x5318348 0x78dc138e40
	void SetGrainVolume(const float BaseVolume, const Vector2D VolumeRange);// 0x5318170 0x78dc138f20
	void SetGrainsPerSecond(const float InGrainsPerSecond);// 0x5318540 0x78dc139000
	void SetGrainProbability(const float InGrainProbability);// 0x5318498 0x78dc135720
	void SetGrainPitch(const float BasePitch, const Vector2D PitchRange);// 0x531825c 0x78dc135800
	void SetGrainPan(const float BasePan, const Vector2D PanRange);// 0x5318084 0x78dc1358e0
	void SetGrainEnvelopeType(const enum EnvelopeType);// 0x53183f0 0x78dc1359c0
	void SetGrainDuration(const float BaseDurationMsec, const Vector2D DurationRange);// 0x5317f98 0x78dc135aa0
	void SetDecayTime(const float DecayTimeMsec);// 0x5318974 0x78dc135b80
	void SetAttackTime(const float AttackTimeMsec);// 0x5318a1c 0x78dc135c60
	void NoteOn(const float Note, const int Velocity, const float Duration);// 0x53186e4 0x78dc135d40
	void NoteOff(const float Note, const bool bKill);// 0x53185e8 0x78dc135e20
	bool IsLoaded();// 0x5317d0c 0x78dc135f00
	float GetSampleDuration();// 0x5317f64 0x78dc135fe0
	float GetCurrentPlayheadTime();// 0x5317d44 0x78dc1360c0

--------------------------------
Class: MonoWaveTableSynthPreset.Object
	FString PresetName;//[Offset: 0x28, Size: 0x10] 0x78dc145d80
	bool bLockKeyframesToGridBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78dc145e00
	int LockKeyframesToGrid;//[Offset: 0x3c, Size: 0x4] 0x78dc145e80
	int WaveTableResolution;//[Offset: 0x40, Size: 0x4] 0x78dc145f00
	RuntimeFloatCurve[] WaveTable;//[Offset: 0x48, Size: 0x10] 0x78dc112a40
	bool bNormalizeWaveTables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78dc146000

--------------------------------
Class: SynthComponentMonoWaveTable.SynthComponent.SceneComponent.ActorComponent.Object
	delegate OnTableAltered;//[Offset: 0x6d0, Size: 0x10] 0x78dc148280
	delegate OnNumTablesChanged;//[Offset: 0x6e0, Size: 0x10] 0x78dc148300
	MonoWaveTableSynthPreset* CurrentPreset;//[Offset: 0x6f0, Size: 0x8] 0x78dc148380
	void SetWaveTablePosition(float InPosition);// 0x531af30 0x78dc139d20
	void SetSustainPedalState(bool InSustainPedalState);// 0x531b1d0 0x78dc139e00
	void SetPosLfoType(const enum InLfoType);// 0x531ac7c 0x78dc139ee0
	void SetPosLfoFrequency(const float InLfoFrequency);// 0x531adcc 0x78dc139fc0
	void SetPosLfoDepth(const float InLfoDepth);// 0x531ad24 0x78dc13a0a0
	void SetPositionEnvelopeSustainGain(const float InSustainGain);// 0x5319f3c 0x78dc13a180
	void SetPositionEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0x5319e94 0x78dc13a260
	void SetPositionEnvelopeInvert(const bool bInInvert);// 0x5319de4 0x78dc13a340
	void SetPositionEnvelopeDepth(const float InDepth);// 0x5319c8c 0x78dc13a420
	void SetPositionEnvelopeDecayTime(const float InDecayTimeMsec);// 0x5319fe4 0x78dc13a500
	void SetPositionEnvelopeBiasInvert(const bool bInBiasInvert);// 0x5319d34 0x78dc13a5e0
	void SetPositionEnvelopeBiasDepth(const float InDepth);// 0x5319be4 0x78dc13a6c0
	void SetPositionEnvelopeAttackTime(const float InAttackTimeMsec);// 0x531a08c 0x78dc13a7a0
	void SetLowPassFilterResonance(float InNewQ);// 0x531abd4 0x78dc13a880
	void SetFrequencyWithMidiNote(const float InMidiNote);// 0x531afd8 0x78dc13a960
	void SetFrequencyPitchBend(const float FrequencyOffsetCents);// 0x531b080 0x78dc13aa40
	void SetFrequency(const float FrequencyHz);// 0x531b128 0x78dc13ab20
	void SetFilterEnvelopeSustainGain(const float InSustainGain);// 0x531a48c 0x78dc13ac00
	void SetFilterEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0x531a3e4 0x78dc13ace0
	void SetFilterEnvelopenDecayTime(const float InDecayTimeMsec);// 0x531a534 0x78dc137400
	void SetFilterEnvelopeInvert(const bool bInInvert);// 0x531a334 0x78dc1374e0
	void SetFilterEnvelopeDepth(const float InDepth);// 0x531a1dc 0x78dc1375c0
	void SetFilterEnvelopeBiasInvert(const bool bInBiasInvert);// 0x531a284 0x78dc1376a0
	void SetFilterEnvelopeBiasDepth(const float InDepth);// 0x531a134 0x78dc137780
	void SetFilterEnvelopeAttackTime(const float InAttackTimeMsec);// 0x531a5dc 0x78dc137860
	bool SetCurveValue(int TableIndex, int KeyframeIndex, const float NewValue);// 0x5319a68 0x78dc137940
	bool SetCurveTangent(int TableIndex, float InNewTangent);// 0x5319868 0x78dc137a20
	bool SetCurveInterpolationType(enum InterpolationType, int TableIndex);// 0x5319968 0x78dc137b00
	void SetAmpEnvelopeSustainGain(const float InSustainGain);// 0x531a9dc 0x78dc137be0
	void SetAmpEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0x531a934 0x78dc137cc0
	void SetAmpEnvelopeInvert(const bool bInInvert);// 0x531a884 0x78dc137da0
	void SetAmpEnvelopeDepth(const float InDepth);// 0x531a72c 0x78dc137e80
	void SetAmpEnvelopeDecayTime(const float InDecayTimeMsec);// 0x531aa84 0x78dc137f60
	void SetAmpEnvelopeBiasInvert(const bool bInBiasInvert);// 0x531a7d4 0x78dc138040
	void SetAmpEnvelopeBiasDepth(const float InDepth);// 0x531a684 0x78dc138120
	void SetAmpEnvelopeAttackTime(const float InAttackTimeMsec);// 0x531ab2c 0x78dc138200
	void RefreshWaveTable(int Index);// 0x531ae88 0x78dc1382e0
	void RefreshAllWaveTables();// 0x531ae74 0x78dc1383c0
	void NoteOn(const float InMidiNote, const float InVelocity);// 0x531b328 0x78dc1384a0
	void NoteOff(const float InMidiNote);// 0x531b280 0x78dc138580
	int GetNumTableEntries();// 0x531b418 0x78dc138660
	int GetMaxTableIndex();// 0x5319bb0 0x78dc138740
	float[] GetKeyFrameValuesForTable(float TableIndex);// 0x5319698 0x78dc138820
	float GetCurveTangent(int TableIndex);// 0x53197b8 0x78dc138900

--------------------------------
Class: SynthComponentToneGenerator.SynthComponent.SceneComponent.ActorComponent.Object
	float Frequency;//[Offset: 0x6d0, Size: 0x4] 0x78dc148080
	float Volume;//[Offset: 0x6d4, Size: 0x4] 0x78dc148100
	void SetVolume(float InVolume);// 0x531c3b0 0x78dc139b60
	void SetFrequency(float InFrequency);// 0x531c458 0x78dc139c40

--------------------------------
Class: SynthSamplePlayer.SynthComponent.SceneComponent.ActorComponent.Object
	SoundWave* SoundWave;//[Offset: 0x6d0, Size: 0x8] 0x78dc147900
	delegate OnSampleLoaded;//[Offset: 0x6d8, Size: 0x10] 0x78dc147980
	delegate OnSamplePlaybackProgress;//[Offset: 0x6e8, Size: 0x10] 0x78dc147a00
	void SetSoundWave(SoundWave* InSoundWave);// 0x531cd2c 0x78dc139380
	void SetScrubTimeWidth(float InScrubTimeWidthSec);// 0x531c99c 0x78dc139460
	void SetScrubMode(bool bScrubMode);// 0x531ca44 0x78dc139540
	void SetPitch(float InPitch, float TimeSec);// 0x531cc3c 0x78dc139620
	void SeekToTime(float TimeSec, enum SeekType, bool bWrap);// 0x531caf4 0x78dc139700
	bool IsLoaded();// 0x531c8c8 0x78dc1397e0
	float GetSampleDuration();// 0x531c968 0x78dc1398c0
	float GetCurrentPlaybackProgressTime();// 0x531c934 0x78dc1399a0
	float GetCurrentPlaybackProgressPercent();// 0x531c900 0x78dc139a80

--------------------------------
Class: SynthesisUtilitiesBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	static float GetLogFrequency(float InLinearValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);// 0x531d450 0x78dc1391c0
	static float GetLinearFrequency(float InLogFrequencyValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);// 0x531d280 0x78dc1392a0

--------------------------------
Class: SynthKnob.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4] 0x78dc148a00
	float StepSize;//[Offset: 0x10c, Size: 0x4] 0x78dc148a80
	float MouseSpeed;//[Offset: 0x110, Size: 0x4] 0x78dc148b00
	float MouseFineTuneSpeed;//[Offset: 0x114, Size: 0x4] 0x78dc148b80
	bool ShowTooltipInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1] 0x78dc148c00
	FText ParameterName;//[Offset: 0x120, Size: 0x18] 0x78dc148c80
	FText ParameterUnits;//[Offset: 0x138, Size: 0x18] 0x78dc148d00
	delegate ValueDelegate;//[Offset: 0x150, Size: 0x10] 0x78dc148d80
	SynthKnobStyle WidgetStyle;//[Offset: 0x160, Size: 0x238] 0x78dc148e00
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1] 0x78dc148e80
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 0x1] 0x78dc148f00
	delegate OnMouseCaptureBegin;//[Offset: 0x3a0, Size: 0x10] 0x78dc148f80
	delegate OnMouseCaptureEnd;//[Offset: 0x3b0, Size: 0x10] 0x78dc149000
	delegate OnControllerCaptureBegin;//[Offset: 0x3c0, Size: 0x10] 0x78dc149080
	delegate OnControllerCaptureEnd;//[Offset: 0x3d0, Size: 0x10] 0x78dc149100
	delegate OnValueChanged;//[Offset: 0x3e0, Size: 0x10] 0x78dc149180
	void SetValue(float InValue);// 0x531e80c 0x78dc13c800
	void SetStepSize(float InValue);// 0x531e6b4 0x78dc13c8e0
	void SetLocked(bool InValue);// 0x531e75c 0x78dc13c9c0
	float GetValue();// 0x531e8b4 0x78dc1390e0

--------------------------------
Class: SynthKnobStyle.SlateWidgetStyle
	SlateBrush LargeKnob;//[Offset: 0x8, Size: 0x88] 0x78dbe15000
	SlateBrush LargeKnobOverlay;//[Offset: 0x90, Size: 0x88] 0x78dbe15080
	SlateBrush MediumKnob;//[Offset: 0x118, Size: 0x88] 0x78dbe15100
	SlateBrush MediumKnobOverlay;//[Offset: 0x1a0, Size: 0x88] 0x78dbe15180
	float MinValueAngle;//[Offset: 0x228, Size: 0x4] 0x78dbe15200
	float MaxValueAngle;//[Offset: 0x22c, Size: 0x4] 0x78dbe15280
	enum KnobSize;//[Offset: 0x230, Size: 0x1] 0x78d3617ea0

--------------------------------
Class: AudioAnalyzerAsset.Object

--------------------------------
Class: AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object

--------------------------------
Class: AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object

--------------------------------
Class: AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	SoundWave* Sound;//[Offset: 0x28, Size: 0x8] 0x78dc148900
	float DurationInSeconds;//[Offset: 0x30, Size: 0x4] 0x78dc148980

--------------------------------
Class: AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object

--------------------------------
Class: ConstantQNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object
	float StartingFrequency;//[Offset: 0x28, Size: 0x4] 0x78dc14a480
	int NumBands;//[Offset: 0x2c, Size: 0x4] 0x78dc14a500
	float NumBandsPerOctave;//[Offset: 0x30, Size: 0x4] 0x78dc148480
	float AnalysisPeriod;//[Offset: 0x34, Size: 0x4] 0x78dc148500
	bool bDownmixToMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78dc148580
	enum FFTSize;//[Offset: 0x39, Size: 0x1] 0x78dc114e80
	enum WindowType;//[Offset: 0x3a, Size: 0x1] 0x78dc114f20
	enum SpectrumType;//[Offset: 0x3b, Size: 0x1] 0x78dc114fc0
	float BandWidthStretch;//[Offset: 0x3c, Size: 0x4] 0x78dc148780
	enum CQTNormalization;//[Offset: 0x40, Size: 0x1] 0x78dc115060
	float NoiseFloorDb;//[Offset: 0x44, Size: 0x4] 0x78dc148880

--------------------------------
Class: ConstantQNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	ConstantQNRTSettings* Settings;//[Offset: 0x78, Size: 0x8] 0x78dc14a100
	void GetNormalizedChannelConstantQAtTime(const float InSeconds, const int InChannel, out float[] OutConstantQ);// 0x5332aac 0x78dc13c640
	void GetChannelConstantQAtTime(const float InSeconds, const int InChannel, out float[] OutConstantQ);// 0x5332c28 0x78dc13c720

--------------------------------
Class: LoudnessNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object
	float AnalysisPeriod;//[Offset: 0x28, Size: 0x4] 0x78dc149e80
	float MinimumFrequency;//[Offset: 0x2c, Size: 0x4] 0x78dc149f00
	float MaximumFrequency;//[Offset: 0x30, Size: 0x4] 0x78dc149f80
	enum CurveType;//[Offset: 0x34, Size: 0x1] 0x78dc114ca0
	float NoiseFloorDb;//[Offset: 0x38, Size: 0x4] 0x78dc14a080

--------------------------------
Class: LoudnessNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	LoudnessNRTSettings* Settings;//[Offset: 0x78, Size: 0x8] 0x78dc149900
	void GetNormalizedLoudnessAtTime(const float InSeconds, out float OutLoudness);// 0x53334a8 0x78dc13c2c0
	void GetNormalizedChannelLoudnessAtTime(const float InSeconds, const int InChannel, out float OutLoudness);// 0x533335c 0x78dc13c3a0
	void GetLoudnessAtTime(const float InSeconds, out float OutLoudness);// 0x53336f4 0x78dc13c480
	void GetChannelLoudnessAtTime(const float InSeconds, const int InChannel, out float OutLoudness);// 0x53335a8 0x78dc13c560

--------------------------------
Class: OnsetNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object
	bool bDownmixToMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dc149680
	float GranularityInSeconds;//[Offset: 0x2c, Size: 0x4] 0x78dc149700
	float Sensitivity;//[Offset: 0x30, Size: 0x4] 0x78dc149780
	float MinimumFrequency;//[Offset: 0x34, Size: 0x4] 0x78dc149800
	float MaximumFrequency;//[Offset: 0x38, Size: 0x4] 0x78dc149880

--------------------------------
Class: OnsetNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	OnsetNRTSettings* Settings;//[Offset: 0x78, Size: 0x8] 0x78dc14b200
	void GetNormalizedChannelOnsetsBetweenTimes(const float InStartSeconds, const float InEndSeconds, const int InChannel, out float[] OutOnsetTimestamps, out float[] OutOnsetStrengths);// 0x5333d94 0x78dc13c100
	void GetChannelOnsetsBetweenTimes(const float InStartSeconds, const float InEndSeconds, const int InChannel, out float[] OutOnsetTimestamps, out float[] OutOnsetStrengths);// 0x5333fdc 0x78dc13c1e0

--------------------------------
Class: AfterImageActor.Actor.Object
	MaterialInterface* ArgAfterImageMaterial;//[Offset: 0x228, Size: 0x8] 0x78dc14a900
	CurveFloat* ArgFadeCurve;//[Offset: 0x230, Size: 0x8] 0x78dc14a980
	CurveLinearColor* ArgColorCurve;//[Offset: 0x238, Size: 0x8] 0x78dc14aa00
	CurveFloat* ArgScaleCurve;//[Offset: 0x248, Size: 0x8] 0x78dc14aa80
	EPoseableMeshComponent*[] PoseableMeshCompsPool;//[Offset: 0x2a8, Size: 0x10] 0x78dc1148e0
	void SetSourceActor(Actor* TargetActor);// 0xa4b5894 0x78dc13bd80
	void SetAfterImageSourceMesh(out const SkeletalMeshComponent*[] MeshComponents);// 0xa4b57b0 0x78dc13be60
	void SetAfterImageParams(float SpawnInterval, float Lifetime, MaterialInterface* AfterImageMaterial, CurveFloat* FadeCurve, CurveLinearColor* ColorCurve, bool bScaleAfterImage, CurveFloat* ScaleCurve, float VisibleDelay, bool bVelocityDepending, float VelocityThreshold);// 0xa4b53b0 0x78dc13bf40
	void SetActive(bool bActiveNew);// 0xa4b5700 0x78dc13c020

--------------------------------
Class: EPoseableMeshComponent.PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: AfterImageComponent.ActorComponent.Object
	bool bActiveSpawnAfterImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x78dc14c300
	float SpawnInterval;//[Offset: 0xbc, Size: 0x4] 0x78dc14c380
	float Lifetime;//[Offset: 0xc0, Size: 0x4] 0x78dc14c400
	bool bSpawnAfterImageForAllMeshs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1] 0x78dc14c480
	FName[] TagsToSpawnAfterImage;//[Offset: 0xc8, Size: 0x10] 0x78dc114840
	MaterialInterface* AfterImageMaterial;//[Offset: 0xd8, Size: 0x8] 0x78dc14c580
	AfterImageMaterialParam MatParams;//[Offset: 0xe0, Size: 0x10] 0x78dc14c600
	bool bScaleOverTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x78dc14a580
	CurveFloat* ScaleCurve;//[Offset: 0xf8, Size: 0x8] 0x78dc14a600
	float VisibleDelay;//[Offset: 0x100, Size: 0x4] 0x78dc14a680
	bool bVelocityDepending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1] 0x78dc14a700
	float VelocityThreshold;//[Offset: 0x108, Size: 0x4] 0x78dc14a780
	AfterImageActor* AfterImageActor;//[Offset: 0x10c, Size: 0x8] 0x78dc14a800
	void SetAfterImageActive(bool bActive);// 0xa4b5de8 0x78dc13bca0

--------------------------------
Class: AfterImageMaterialParam
	CurveFloat* FadeCurve;//[Offset: 0x0, Size: 0x8] 0x78dbe19500
	CurveLinearColor* ColorCurve;//[Offset: 0x8, Size: 0x8] 0x78dbe19580

--------------------------------
Class: AMysteriousFlagActor.Actor.Object
	class UserWidget* ui_wiget_class;//[Offset: 0x220, Size: 0x8] 0x78dc1147a0
	void SetWidget(UserWidget* Widget);// 0xaa7cd18 0x78dc13bbc0

--------------------------------
Class: AnimationListener.Object
	UserWidget* UserWidget;//[Offset: 0x48, Size: 0x8] 0x78dc14c180
	WidgetAnimation* WidgetAnimation;//[Offset: 0x50, Size: 0x8] 0x78dc14c200
	void OnPlayUserWidgetAnimationFinish();// 0xa4b6454 0x78dc13bae0

--------------------------------
Class: AnimationMgr.Object
	<FString,AnimationListener*> ListenerMap;//[Offset: 0x28, Size: 0x50] 0x78dbf5d840
	void StopUserWidgetAnimation(FString AnimationId);// 0xa4b6a70 0x78dc13b4c0
	void PlayUserWidgetAnimation(UserWidget* UserWidget, FString AnimationName, FString AnimationId, float StartAtTime, int NumberOfLoops, byte PlayMode, float PlaybackSpeed);// 0xa4b6b48 0x78dc13b5a0
	static void OnAnimationEvent(Object* Obj, FString EventName, Widget* Widget);// 0xa4b6e0c 0x78dc13b680
	bool IsAnimationPlaying(FString AnimationId);// 0xa4b67dc 0x78dc13b760
	static AnimationMgr* Instance();// 0xa4b6f60 0x78dc13b840
	void EndUserWidgetAnimation(FString AnimationId);// 0xa4b6998 0x78dc13b920
	void DelUserWidgetAnimationListener(FString AnimationId);// 0xa4b68c0 0x78dc13ba00

--------------------------------
Class: AnimHelper.BlueprintFunctionLibrary.Object
	static void SwitchRenderCustomDepth(MeshComponent* MeshComponent, bool bIsOpen);// 0xa4b74dc 0x78dc13e080
	static bool ShouldBehaveLikeAPlayer(EEntity* Actor);// 0xa4b7660 0x78dc13e160
	static bool IsWalking(EMoveComponent* Move);// 0xa4b7fb4 0x78dc13e240
	static bool IsSameMaterial(MaterialInterface* matA, MaterialInterface* matB);// 0xa4b7af8 0x78dc13e320
	static bool IsGhostMoving(EGhostAttachComponent* GhostAttach);// 0xa4b7f08 0x78dc13e400
	static EEntity* GetViewEntityByEtyId(int EtyId);// 0xa4b780c 0x78dc13e4e0
	static AnimMontage* GetSuitableMontage(EEntity* Actor, out const FName animName);// 0xa4b770c 0x78dc13e5c0
	static SceneComponent* GetSocket(EEntity* Actor, FString SocketName, out FName outTrueSocketName, bool forceMeshSockets);// 0xa4b7d3c 0x78dc13e6a0
	static EAnimMetaData_StopMontageOnSkillEnd* GetMetaDataStopMontageOnSkillEnd(AnimMontage* Montage);// 0xa4b79a8 0x78dc13adc0
	static EAnimMetaData_Spin* GetMetaDataSpin(AnimMontage* Montage);// 0xa4b7a50 0x78dc13aea0
	static EComponent* GetMainVisualOwningEComponenet(EEntity* Actor);// 0xa4b7bec 0x78dc13af80
	static SceneComponent* GetMainVisualComponent(EEntity* Actor);// 0xa4b7c94 0x78dc13b060
	static MaterialInstanceDynamic* FindOrCreateMID(MeshComponent* MeshComponent, int MaterialIndex);// 0xa4b78b4 0x78dc13b140
	static void CheckUsedMaterialsRenderCustomDepthPassNeeds(MeshComponent* MeshComponent);// 0xa4b75c8 0x78dc13b220
	static float CalcMontagePlayRateByAttackTime(float atkTime, float onceFixedTime, float precastDelay, float loopDelay, float onceDelay, float tailDelay1, float tailDelay2);// 0xa4b8060 0x78dc13b300
	static float CalcAttackTimeByAttackSpeed(float skillDoSpeed, float skillExtraSpeed, float atkSpdInc);// 0xa4b82c4 0x78dc13b3e0

--------------------------------
Class: EEntity.Pawn.Actor.Object
	<class Object,EComponent*> ueComponents;//[Offset: 0x280, Size: 0x50] 0x78dbf5f100
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1] 0x78dc186100
	void SetValid(bool Valid);// 0xa4fad04 0x78dc17b680
	bool IsValid();// 0xa4fadb4 0x78dc17b760
	void Init(int _id, out const CfgInfo Info);// 0xa4fadec 0x78dc17b840
	ActorComponent* GetComponent(class Object C);// 0xa4faee4 0x78dc17b920
	void DestroyEntity();// 0xa4face8 0x78dc17ba00
	void CalcValues();// 0xa4faccc 0x78dc17bae0

--------------------------------
Class: CfgInfo
	int ID;//[Offset: 0x0, Size: 0x4] 0x78dbe2c780
	enum Type;//[Offset: 0x4, Size: 0x1] 0x78d361f1a0

--------------------------------
Class: EComponent.ActorComponent.Object
	EEntity* mEntity;//[Offset: 0xc0, Size: 0x8] 0x78dc185e00
	void SetEntity(EEntity* Entity);// 0xa4ec860 0x78dc17b140
	void ProcessEntity();// 0xa4ec810 0x78dc17b220
	SceneComponent* GetRootComponent();// 0xa4ec82c 0x78dc17b300
	EEntity* GetEntity();// 0xa4ec908 0x78dc17b3e0
	ActorComponent* GetComponent(class Object C);// 0xa4ec93c 0x78dc17b4c0
	void CalcValues();// 0xa4ec7f4 0x78dc17b5a0

--------------------------------
Class: EMoveComponent.EComponent.ActorComponent.Object
	SceneComponent* DesiredAttachParent;//[Offset: 0x198, Size: 0x8] 0x78dc1cd700
	SceneComponent* EntityRoot;//[Offset: 0x1a0, Size: 0x8] 0x78dc1cd780

--------------------------------
Class: EGhostAttachComponent.EComponent.ActorComponent.Object
	SceneComponent* EntityRoot;//[Offset: 0x128, Size: 0x8] 0x78dc1c1d80
	void TickRotate(float Delta);// 0xa4fc9ac 0x78dc1b52c0
	void SyncForwardInSeconds(float maxTimeToSyncForward);// 0xa4fc904 0x78dc1b53a0

--------------------------------
Class: EAnimMetaData_StopMontageOnSkillEnd.AnimMetaData.Object

--------------------------------
Class: EAnimMetaData_Spin.AnimMetaData.Object
	float RotSpeed;//[Offset: 0x28, Size: 0x4] 0x78dc18a300

--------------------------------
Class: AnimNotify_AkEventFootstep.AnimNotify.Object
	AudioFootstepSetting* FootstepPhysicSurfaceSettings;//[Offset: 0x38, Size: 0x8] 0x78dc14e180

--------------------------------
Class: AudioFootstepSetting.DataAsset.Object
	AudioFootstepSwitchPhysicalSurfaceSetting[] Settings;//[Offset: 0x30, Size: 0x10] 0x78dc1140c0

--------------------------------
Class: AudioFootstepSwitchPhysicalSurfaceSetting
	AudioFootstepType Type;//[Offset: 0x0, Size: 0x4] 0x78dbe16180
	AkAudioEvent* AkEvent;//[Offset: 0x8, Size: 0x8] 0x78dbe16200
	<byte,TorchAudioSwitch> Switch;//[Offset: 0x10, Size: 0x50] 0x78dbdf73c0

--------------------------------
Class: AudioFootstepType.EnumerableGameInteger

--------------------------------
Class: EnumerableGameInteger
	int Value;//[Offset: 0x0, Size: 0x4] 0x78dbe16100

--------------------------------
Class: TorchAudioSwitch
	FName SwitchGroup;//[Offset: 0x0, Size: 0x8] 0x78dbe16280
	FName SwitchName;//[Offset: 0x8, Size: 0x8] 0x78dbe16300

--------------------------------
Class: AnimNotify_Audio.AnimNotify.Object
	AudioConfigData[] AudioIds;//[Offset: 0x38, Size: 0x10] 0x78dc114700
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78dc14e100

--------------------------------
Class: AudioConfigData
	FString AudioId;//[Offset: 0x0, Size: 0x10] 0x78dbe2b380
	int Weight;//[Offset: 0x10, Size: 0x4] 0x78dbe2b400

--------------------------------
Class: AnimNotify_FootStep.AnimNotify.Object
	int FootIndex;//[Offset: 0x38, Size: 0x4] 0x78dc14e000

--------------------------------
Class: AnimNotify_HideMesh.AnimNotify.Object
	bool bHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78dc14df00
	FName reason;//[Offset: 0x3c, Size: 0x8] 0x78dc14df80

--------------------------------
Class: AnimNotify_Ragdoll.AnimNotify.Object
	FName reason;//[Offset: 0x38, Size: 0x8] 0x78dc14dd00
	bool bSinkIntoGroundWhenStablized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78dc14dd80
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x78dc14de00
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x48, Size: 0x8] 0x78dc14de80

--------------------------------
Class: AnimNotifyState_AkEventTimed.AnimNotifyState.Object
	AkAudioEvent* Event;//[Offset: 0x30, Size: 0x8] 0x78dc14f500
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78dc14f580
	AkAudioEvent* PlayAdditionalEventOnEnd;//[Offset: 0x40, Size: 0x8] 0x78dc14f600
	AkAudioEvent* AutoPlayEventOnEnd;//[Offset: 0x48, Size: 0x8] 0x78dc14f680
	<SkeletalMeshComponent*,int> AudioDynIdByComponent;//[Offset: 0x50, Size: 0x50] 0x78dbf5d780

--------------------------------
Class: AnimNotifyState_BlendRagdoll.AnimNotifyState.Object
	FName reason;//[Offset: 0x2c, Size: 0x8] 0x78dc14ef80
	bool bSinkIntoGroundWhenStablized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x78dc14f000
	bool bPauseAnimsAtBlendEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x78dc14f080
	CurveFloat* PhysicsBlendWeightCurve;//[Offset: 0x38, Size: 0x8] 0x78dc14f100
	bool bSkipCustomPhysicsType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78dc14f180
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x48, Size: 0x8] 0x78dc14f200
	int NotifyDynId;//[Offset: 0x50, Size: 0x4] 0x78dc14f280
	<SkeletalMeshComponent*,float> TotalTimeByComponent;//[Offset: 0x58, Size: 0x50] 0x78dbf5d600
	<SkeletalMeshComponent*,float> ElapsedTimeByComponent;//[Offset: 0xa8, Size: 0x50] 0x78dbf5d6c0

--------------------------------
Class: AnimNotifyState_HideMesh.AnimNotifyState.Object
	int NotifyDynId;//[Offset: 0x2c, Size: 0x4] 0x78dc14ef00

--------------------------------
Class: AnimNotifyState_MaterialParamTransition.AnimNotifyState.Object
	<FName,MPTScalarParam> ScalarParam;//[Offset: 0x30, Size: 0x50] 0x78dbf5d300
	<FName,MPTVectorParam> VectorParam;//[Offset: 0x80, Size: 0x50] 0x78dbf5d3c0
	<SkeletalMeshComponent*,float> TotalTimeByComponent;//[Offset: 0xd0, Size: 0x50] 0x78dbf5d480
	<SkeletalMeshComponent*,float> ElapsedTimeByComponent;//[Offset: 0x120, Size: 0x50] 0x78dbf5d540

--------------------------------
Class: MPTScalarParam
	float Begin;//[Offset: 0x0, Size: 0x4] 0x78dbe14980
	float End;//[Offset: 0x4, Size: 0x4] 0x78dbe14a00

--------------------------------
Class: MPTVectorParam
	LinearColor Begin;//[Offset: 0x0, Size: 0x10] 0x78dbe14a80
	LinearColor End;//[Offset: 0x10, Size: 0x10] 0x78dbe14b00

--------------------------------
Class: AnimNotifyState_TimedParticleEffectCustom.AnimNotifyState_TimedParticleEffect.AnimNotifyState.Object
	bool bAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78dc14fe80
	Vector Scale;//[Offset: 0x5c, Size: 0xc] 0x78dc14ff00
	bool bSpawnParticleBasedOnVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78dc14ff80
	<SkeletalMeshComponent*,ParticleSystemComponent*> ParticleSystemComponentsBySkeletalMeshComponents;//[Offset: 0x70, Size: 0x50] 0x78dbf5d240

--------------------------------
Class: AnimNotifyState_UseOriginalSocketTransforms.AnimNotifyState.Object

--------------------------------
Class: AnimTriggerActor.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x220, Size: 0x8] 0x78dc151080
	Actor*[] ReleativeActors;//[Offset: 0x228, Size: 0x10] 0x78dc114660
	LevelSequenceActor* ControlActor;//[Offset: 0x238, Size: 0x8] 0x78dc14f880
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x240, Size: 0x8] 0x78dc14f900
	void OnOverlapEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xa4bbae4 0x78dc13d980
	void OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xa4bbc6c 0x78dc13da60

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x230, Size: 0x14] 0x78dbed6980
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x248, Size: 0x8] 0x78dbed6a00
	SoftObjectPath LevelSequence;//[Offset: 0x250, Size: 0x18] 0x78dbed6a80
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x268, Size: 0x2] 0x78dbed6c00
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x270, Size: 0x8] 0x78dbed6c80
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x278, Size: 0x8] 0x78dbed6d00
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1] 0x78dbed6d80
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1] 0x78dbed6e00
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1] 0x78dbed6e80
	Object* DefaultInstanceData;//[Offset: 0x288, Size: 0x8] 0x78dbed6f00
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x290, Size: 0x8] 0x78dbed6f80
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78dbed7000
	void ShowBurnin();// 0xbd689cc 0x78d3605e20
	void SetSequence(LevelSequence* InSequence);// 0xbd68ad8 0x78d3605f00
	void SetReplicatePlayback(bool ReplicatePlayback);// 0xbd68a28 0x78d3605fe0
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0xbd68698 0x78d36060c0
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0xbd68820 0x78d36061a0
	void ResetBindings();// 0xbd68100 0x78d3606280
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0xbd68114 0x78d3606440
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0xbd681e0 0x78d3606520
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0xbd682d0 0x78d3606600
	void OnLevelSequenceLoaded__DelegateSignature();// 0xaa7cd18 0x78d36066e0
	LevelSequence* LoadSequence();// 0xbd68b80 0x78d36067c0
	void HideBurnin();// 0xbd689e0 0x78d36068a0
	LevelSequencePlayer* GetSequencePlayer();// 0xbd689f4 0x78d3606980
	LevelSequence* GetSequence();// 0xbd68bb4 0x78d3606a60
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0xbd67f38 0x78d3606b40
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0xbd68038 0x78d3606c20
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0xbd683e8 0x78d3606d00
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0xbd6852c 0x78d3606de0

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x680, Size: 0x10] 0x78d72bff80
	CameraComponent* GetActiveCameraComponent();// 0xbd6a980 0x78d72c7940
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0xbd6a9b8 0x78d72c7a20

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbed6b00
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1] 0x78dbed6b80

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78d72bf300
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18] 0x78d72bf380
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8] 0x78d72bf400
	void SetBurnIn(SoftClassPath InBurnInClass);// 0xbd67a44 0x78d72c7da0

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10] 0x78d715f560

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 0x18] 0x78dbe4fe00
	Object* Object;//[Offset: 0x18, Size: 0x8] 0x78dbe4fe80
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78dbe4ff00

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x260, Size: 0xb8] 0x78d72bf100
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x318, Size: 0x8] 0x78d72bf180
	void SetSettings(Object* InSettings);// 0xaa7cd18 0x78d72c7be0
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0xbd69b94 0x78d72c7cc0

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10] 0x78dbed7c00
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10] 0x78dbed7c80
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10] 0x78dbed7d00
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10] 0x78dbed7d80
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10] 0x78dbed7e00
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10] 0x78dbed7e80
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10] 0x78dbed7f00
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28] 0x78dbed7f80
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 0xc] 0x78dbed8100
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 0x8] 0x78dbed8180
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 0x4] 0x78dbed8200

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1] 0x78dbed8000
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8] 0x78dbed8080

--------------------------------
Class: ArcSdkMgr.Object
	bool LaunchFromArc();// 0xa4bc2d4 0x78dc13d520
	bool IsLaunchedByArc();// 0xa4bc30c 0x78dc13d600
	static ArcSdkMgr* Instance();// 0xa4bc344 0x78dc13d6e0
	FString GetTokenForLogin();// 0xa4bc12c 0x78dc13d7c0
	FString GetAccountName();// 0xa4bc200 0x78dc13d8a0

--------------------------------
Class: ArtUseAnimComponent.SceneComponent.ActorComponent.Object
	LevelSequenceActor* ControlActor;//[Offset: 0x208, Size: 0x8] 0x78dc150b00
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x210, Size: 0x8] 0x78dc150b80
	LevelSequence* ActiveSequence;//[Offset: 0x218, Size: 0x8] 0x78dc150c00
	LevelSequence* BeginSequence;//[Offset: 0x220, Size: 0x8] 0x78dc150c80
	LevelSequence* LeaveSequence;//[Offset: 0x228, Size: 0x8] 0x78dc150d00
	void TriggerEvent(enum EventType);// 0xa4bc8c4 0x78dc13d1a0
	void OnLeave();// 0xa4bc888 0x78dc13d280
	void OnBegin();// 0xa4bc89c 0x78dc13d360
	void OnActive();// 0xa4bc8b0 0x78dc13d440

--------------------------------
Class: AssetLoadMgr.Object
	bool HasAsyncLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78dc150580
	FString[] PreloadResourcePath;//[Offset: 0x38, Size: 0x10] 0x78dc114520
	<FString,AssetRequested> TotalAssetsMap;//[Offset: 0x130, Size: 0x50] 0x78dbf5d000
	<FString,AssetLoadRequest> LoadRequestMap;//[Offset: 0x1e0, Size: 0x50] 0x78dbf5d0c0
	<int,AssetLoadMultRequest> MultRequestMap;//[Offset: 0x230, Size: 0x50] 0x78dbf5d180
	static AssetLoadMgr* Instance();// 0xa4bd434 0x78dc13ce20
	void GC();// 0xa4bd170 0x78dc13cf00
	void AsyncLoadRequestCallBack(AsyncLoadTask Task);// 0xa4bd2dc 0x78dc13cfe0
	void AsyncLoadCancelCallBack(AsyncLoadTask Task);// 0xa4bd184 0x78dc13d0c0

--------------------------------
Class: AssetRequested
	Object* SoftPtr;//[Offset: 0x0, Size: 0x28] 0x78dbe14380
	Object* HardPtr;//[Offset: 0x28, Size: 0x8] 0x78dbe14400
	uint32 MemFlag;//[Offset: 0x30, Size: 0x4] 0x78dbe14480

--------------------------------
Class: AssetLoadRequest
	int Priority;//[Offset: 0x0, Size: 0x4] 0x78dbe14600
	int[] MultipleAssetRequests;//[Offset: 0x8, Size: 0x10] 0x78d361a4c0

--------------------------------
Class: AssetLoadMultRequest
	int PendingAssetNum;//[Offset: 0x0, Size: 0x4] 0x78dbe14700
	Object*[] LoadedAssets;//[Offset: 0x8, Size: 0x10] 0x78d3617c20

--------------------------------
Class: AsyncLoadTask
	FString PathStr;//[Offset: 0x0, Size: 0x10] 0x78dbe14580

--------------------------------
Class: AttrHelper.Object

--------------------------------
Class: AudioMgr.Object
	FString Language;//[Offset: 0x28, Size: 0x10] 0x78dc153380
	bool bEnableMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78dc153400
	bool bMusicPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x78dc153480
	float MusicVolome;//[Offset: 0x3c, Size: 0x4] 0x78dc153500
	FString SceneMusicName;//[Offset: 0x40, Size: 0x10] 0x78dc153580
	FString BOSSBattleMusicName;//[Offset: 0x50, Size: 0x10] 0x78dc153600
	FString[] BGMStack;//[Offset: 0x60, Size: 0x10] 0x78dc114160
	bool bEnableEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x78dc153700
	bool bEffectPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1] 0x78dc153780
	float EffectVolome;//[Offset: 0x74, Size: 0x4] 0x78dc153800
	int EffectId;//[Offset: 0x78, Size: 0x4] 0x78dc153880
	<int,AudioEffectData> Effects;//[Offset: 0x80, Size: 0x50] 0x78dbf5ce80
	<enum,SharedAudioPlayersInfo> EffectSharedAudioPlayers;//[Offset: 0xd0, Size: 0x50] 0x78dbf5cf40
	float DialogueVolome;//[Offset: 0x120, Size: 0x4] 0x78dc153b00
	int DialogueId;//[Offset: 0x124, Size: 0x4] 0x78dc153b80
	int BGMId;//[Offset: 0x128, Size: 0x4] 0x78dc153c00
	bool bEnableDialogue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1] 0x78dc153c80
	delegate OnAudioMgrVoicePlayFinished;//[Offset: 0x130, Size: 0x10] 0x78dc153d00
	delegate OnCurrentAudioCultureCallback;//[Offset: 0x140, Size: 0x10] 0x78dc153d80
	Actor* DialogueActor;//[Offset: 0x150, Size: 0x8] 0x78dc153e00
	Actor* UISoundActor;//[Offset: 0x158, Size: 0x8] 0x78dc153e80
	Actor* BossSoundActor;//[Offset: 0x160, Size: 0x8] 0x78dc153f00
	Actor* BGMSoundActor;//[Offset: 0x168, Size: 0x8] 0x78dc153f80
	AudioSynDefine* SynDefine;//[Offset: 0x170, Size: 0x8] 0x78dc154000
	FString SynDefinePath;//[Offset: 0x178, Size: 0x10] 0x78dc154080
	AudioBGMSetting* BGMDefine;//[Offset: 0x188, Size: 0x8] 0x78dc154100
	FString BGMDefinePath;//[Offset: 0x190, Size: 0x10] 0x78dc154180
	AudioUISetting* UIDefine;//[Offset: 0x1a0, Size: 0x8] 0x78dc154200
	FString UIDefinePath;//[Offset: 0x1a8, Size: 0x10] 0x78dc152180
	AudioMapObjectSetting* MapObjectDefine;//[Offset: 0x1b8, Size: 0x8] 0x78dc152200
	FString MapobjectDefinePath;//[Offset: 0x1c0, Size: 0x10] 0x78dc152280
	AkAudioEvent* BGMRef;//[Offset: 0x1d0, Size: 0x8] 0x78dc152300
	enum CurrentBGMType;//[Offset: 0x1d8, Size: 0x1] 0x78dc1142a0
	int BGMSwitchEntityId;//[Offset: 0x1dc, Size: 0x4] 0x78dc152400
	int BGMSwitchCfgId;//[Offset: 0x1e0, Size: 0x4] 0x78dc152480
	delegate OnAKPostUISoundCallBack;//[Offset: 0x1f8, Size: 0x10] 0x78dc152500
	PostEventAsync* BGMPostEventAsync;//[Offset: 0x208, Size: 0x8] 0x78dc152580
	PostEventAsync* VoicePostEventAsync;//[Offset: 0x210, Size: 0x8] 0x78dc151c80
	void UpdateBossBGM(float deltTime);// 0xa4bdb88 0x78dc170cc0
	void UnRegisterBossBGM();// 0xa4bdc30 0x78dc170da0
	void UISoundCallBack(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0xa4bdf68 0x78dc170e80
	void SwitchMusic(FString musicSettingName);// 0xa4bf868 0x78dc170f60
	void StopMusicDialogue(int voice_id);// 0xa4be288 0x78dc171040
	void StopMusic();// 0xa4bf7ac 0x78dc171120
	void StopEffect(int effect_id);// 0xa4bed50 0x78dc171200
	void StopCurrentAndResumeLastMusic();// 0xa4bf698 0x78dc1712e0
	void StopAllEffects();// 0xa4bebec 0x78dc1713c0
	void StopActor(Actor* Owner);// 0xa4bde18 0x78dc1714a0
	void SetSwitchOnComponent(out const TorchAudioSwitch Switch, AkComponent* AkComponent);// 0xa4be940 0x78dc171580
	void SetSwitch(out const TorchAudioSwitch Switch, Actor* Owner);// 0xa4be6b8 0x78dc171660
	void SetState(FString Key);// 0xa4be5e0 0x78dc171740
	void SetRTPCOnComponent(out const TorchAudioRTPC RTPC, AkComponent* AkComponent, float Value, float BlendTime);// 0xa4bea38 0x78dc171820
	void SetRTPC(out const TorchAudioRTPC RTPC, float Value, Actor* Owner, float BlendTime);// 0xa4be7b0 0x78dc171900
	void SetMusicVolume(float Volume);// 0xa4bfac0 0x78dc1719e0
	void SetMusicDialogue(float Volume);// 0xa4be05c 0x78dc171ac0
	void SetLanguageCallback(bool success);// 0xa4bf510 0x78dc171ba0
	void SetLanguage(FString Language);// 0xa4bf5c0 0x78dc171c80
	void SetEffectVolume(float Volume);// 0xa4bf384 0x78dc13e780
	void ResumeMusicDialogue(int voice_id);// 0xa4be138 0x78dc13e860
	void ResumeMusic();// 0xa4bf784 0x78dc13e940
	void ResumeEffect(int effect_id);// 0xa4bec00 0x78dc13ea20
	void ResumeAllEffects();// 0xa4bebc4 0x78dc13eb00
	void RegisterBossBGM(int CfgId, int eId);// 0xa4bdc44 0x78dc13ebe0
	int PlaySceneEffect(out const FName audioName, Actor* Owner);// 0xa4bf174 0x78dc13ecc0
	void PlayMusicDialogueWithoutOwner(FString Path);// 0xa4be454 0x78dc13eda0
	void PlayMusicDialogue(FString Path, Actor* Owner);// 0xa4be330 0x78dc13ee80
	void PlayMusic(FString musicSettingName);// 0xa4bf9e8 0x78dc13ef60
	void PlayFightMusic(int LevelId);// 0xa4bf940 0x78dc13f040
	int PlayEffectWithoutOwner(out const FName audioName);// 0xa4bf0b8 0x78dc13f120
	int PlayEffectByAudioEvent(FString assetPath, Actor* Owner, enum multiPosType);// 0xa4bef3c 0x78dc13f200
	int PlayEffect(out const FName audioName, Actor* Owner);// 0xa4bf27c 0x78dc13f2e0
	void PlayBossWarningEffect(float Percent);// 0xa4bdae0 0x78dc13f3c0
	void PauseMusicDialogue(int voice_id);// 0xa4be1e0 0x78dc13f4a0
	void PauseMusic();// 0xa4bf798 0x78dc13f580
	void PauseEffect(int effect_id);// 0xa4beca8 0x78dc13f660
	void PauseCurrentAndPlayNewMusic(FString musicName);// 0xa4bf6ac 0x78dc13f740
	void PauseAllEffects();// 0xa4bebd8 0x78dc13f820
	void OnVoicePostCompleted(int PlayingID);// 0xa4bdec0 0x78dc13f900
	void OnSwitchMusicCompleted(int PlayingID);// 0xa4bf7c0 0x78dc13f9e0
	void OnPreLoadMap(FString Name);// 0xa4bfc4c 0x78dc13fac0
	bool IsLocalPlayerActor(Actor* Actor);// 0xa4be52c 0x78dc13fba0
	static AudioMgr* Instance();// 0xa4bfd24 0x78dc13fc80
	float GetMusicVolume();// 0xa4bfb68 0x78dc13fd60
	float GetMusicDialogue();// 0xa4be104 0x78dc13fe40
	float GetEffectVolume();// 0xa4bf42c 0x78dc13ff20
	void EnableMusic(bool enable);// 0xa4bfb9c 0x78dc13caa0
	void EnableEffect(bool enable);// 0xa4bf460 0x78dc13cb80
	int DoPlayEffect(AkAudioEvent* audioEvt, Actor* Owner, enum multiPosType);// 0xa4bedf8 0x78dc13cc60
	void DebugBank(out FString Out);// 0xa4bdd34 0x78dc13cd40

--------------------------------
Class: AudioEffectData
	Actor* OwnerActor;//[Offset: 0x0, Size: 0x8] 0x78dbe2b480
	int PlayingID;//[Offset: 0x8, Size: 0x4] 0x78dbe2b500
	AkAudioEvent* StopEventEvent;//[Offset: 0x10, Size: 0x8] 0x78dbe2b580
	bool bEventPlayedOnCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78dbe29500
	bool bUseSharedAudioPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78dbe29580
	bool bPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1] 0x78dbe29600
	bool bPendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1] 0x78dbe29680

--------------------------------
Class: SharedAudioPlayersInfo
	<AkAudioEvent*,SharedAudioPlayerEntry> Entries;//[Offset: 0x0, Size: 0x50] 0x78dbe31540

--------------------------------
Class: SharedAudioPlayerEntry
	AkAmbientSound* SoundPlayer;//[Offset: 0x0, Size: 0x8] 0x78dbe29700
	int EffectId;//[Offset: 0x8, Size: 0x4] 0x78dbe29780
	<int,Actor*> Requesters;//[Offset: 0x10, Size: 0x50] 0x78dbe313c0

--------------------------------
Class: TorchAudioRTPC
	FName RTPCName;//[Offset: 0x0, Size: 0x8] 0x78dbe15e80

--------------------------------
Class: AudioSynDefine.DataAsset.Object
	<FName,TorchAudioRTPC> RTPC;//[Offset: 0x30, Size: 0x50] 0x78dbf5cb80
	<FName,TorchAudioState> State;//[Offset: 0x80, Size: 0x50] 0x78dbf5cc40
	<FName,TorchAudioTrigger> trigger;//[Offset: 0xd0, Size: 0x50] 0x78dbf5cd00
	<FName,TorchAudioSwitch> Switch;//[Offset: 0x120, Size: 0x50] 0x78dbf5cdc0

--------------------------------
Class: TorchAudioState
	FName StateGroup;//[Offset: 0x0, Size: 0x8] 0x78dbe15f00
	FName StateName;//[Offset: 0x8, Size: 0x8] 0x78dbe15f80

--------------------------------
Class: TorchAudioTrigger
	FName TriggerName;//[Offset: 0x0, Size: 0x8] 0x78dbe16000

--------------------------------
Class: AudioBGMSetting.DataAsset.Object
	<FName,TorchAudioAkEvent> Events;//[Offset: 0x30, Size: 0x50] 0x78dbf5c7c0
	<FName,TorchAudioAkEvent> BigBossEvents;//[Offset: 0x80, Size: 0x50] 0x78dbf5c880
	<FName,TorchAudioAkEvent> MidBossEvents;//[Offset: 0xd0, Size: 0x50] 0x78dbf5c940
	<FName,TorchAudioAkEvent> SmlBossEvents;//[Offset: 0x120, Size: 0x50] 0x78dbf5ca00
	<FName,TorchAudioAkEvent> SpecialBossEvents;//[Offset: 0x170, Size: 0x50] 0x78dbf5cac0

--------------------------------
Class: TorchAudioAkEvent
	AkAudioEvent* AkEvent;//[Offset: 0x0, Size: 0x28] 0x78dbe16080

--------------------------------
Class: AudioUISetting.DataAsset.Object
	<FName,TorchAudioAkEvent> Events;//[Offset: 0x30, Size: 0x50] 0x78dbf5c700

--------------------------------
Class: AudioMapObjectSetting.DataAsset.Object
	<FName,TorchAudioAkEvent> Events;//[Offset: 0x30, Size: 0x50] 0x78dbf5c640

--------------------------------
Class: AutoTestHelper.BlueprintFunctionLibrary.Object
	static EEntity* TryGetPlayerActor(out FString Output);// 0xa4c6308 0x78dc170940
	static int[] GetPlayerWeaponTypes(int EntityID);// 0xa4c63ec 0x78dc170a20
	static bool FillGearUpSkillStoneArg(out EAutoTestTaskGearUpSkillStone arg, int StoneCfgId, int stoneLevel, int SkillPos);// 0xa4c5fdc 0x78dc170b00
	static bool FillGearUpItemArg(out EAutoTestTaskGearUpItem arg, int itemBaseCfgId, int itemGoldCfgId, int equipSlot);// 0xa4c6174 0x78dc170be0

--------------------------------
Class: EAutoTestTaskGearUpSkillStone
	int SkillPos;//[Offset: 0x0, Size: 0x4] 0x78dbe15a80
	int CfgId;//[Offset: 0x4, Size: 0x4] 0x78dbe15b00
	int Level;//[Offset: 0x8, Size: 0x4] 0x78dbe15b80

--------------------------------
Class: EAutoTestTaskGearUpItem
	int Slot;//[Offset: 0x0, Size: 0x4] 0x78dbe15900
	int ItemBase;//[Offset: 0x4, Size: 0x4] 0x78dbe15980
	int ItemGold;//[Offset: 0x8, Size: 0x4] 0x78dbe15a00

--------------------------------
Class: AutoTestMgr.Object
	<int,EAutoTestRequest*> Requests;//[Offset: 0x28, Size: 0x50] 0x78dbf5f700
	EAutoTestRequestParamMove MoveRequestCfg;//[Offset: 0x78, Size: 0xc] 0x78dc156600
	EAutoTestRequestParamGearUp GearUpRequestCfg;//[Offset: 0x88, Size: 0x20] 0x78dc156680
	EAutoTestRequestParamKillWithSkill KillWithSkillRequestCfg;//[Offset: 0xa8, Size: 0xd8] 0x78dc156700
	int AudioReqUid;//[Offset: 0x180, Size: 0x4] 0x78dc156780
	void TestPlayerEngageWithSkillSetPlayerEngageAICfgId(int aiCfgId);// 0xa4c6f40 0x78dc172a80
	void TestPlayerEngageWithSkillSetBossWaveTimeLimit(float bossWaveTimeLimit);// 0xa4c6df0 0x78dc172b60
	void TestPlayerEngageWithSkillSetAddAdditionalBuffToPlayerDuringEngagement(int BuffCfgId);// 0xa4c6e98 0x78dc172c40
	void TestPlayerEngageWithSkillResetAll();// 0xa4c7620 0x78dc172d20
	void TestPlayerEngageWithSkillAddSupportStoneToSet(int StoneCfgId, int supportSkillsSetId);// 0xa4c7270 0x78dc172e00
	void TestPlayerEngageWithSkillAddSkillToTest(int StoneCfgId, int supportSkillsSetId);// 0xa4c7360 0x78dc172ee0
	void TestPlayerEngageWithSkillAddMonsterToSpawn(int monsterId, int monsterRarity, int monsterLevel, int addNum, int waveId);// 0xa4c7450 0x78dc172fc0
	void TestPlayerEngageWithSkillAddLevelToTest(int Level);// 0xa4c71c8 0x78dc1730a0
	void TestPlayerEngageWithSkillAddItemToWeaponPool(int itemBaseCfgId, int itemGoldCfgId);// 0xa4c70d8 0x78dc173180
	void TestPlayerEngageWithSkillAddBaseEquipment(int itemBaseCfgId, int itemGoldCfgId);// 0xa4c6fe8 0x78dc173260
	void SetSkillAudioLogPrint(bool enable);// 0xa4c69f8 0x78dc173340
	void SetMoveAICfgId(int moveAICfgId);// 0xa4c7bc4 0x78dc173420
	void SetMinDistToStartMoving(int MinDistToStartMoving);// 0xa4c7a74 0x78dc173500
	void SetAcceptableRadius(int AcceptableRadius);// 0xa4c7b1c 0x78dc1735e0
	void RequestTestPlayerGetHit(int RequestID, int monsterId, int monsterRarity, int monsterLevel, float spawnMonsterDist, float testDuration);// 0xa4c785c 0x78dc1736c0
	void RequestTestPlayerEngageWithSkill(int RequestID, bool keepSkillCooldownsAlwaysReady, float TimeLimit, bool collectStatistics, bool logOutput, bool LogJson);// 0xa4c7634 0x78dc1737a0
	void RequestPlayerStopMove(int RequestID);// 0xa4c7c6c 0x78dc173880
	void RequestPlayerMoveTo(int RequestID, out const Vector EndPos);// 0xa4c7e58 0x78dc173960
	void RequestPlayerMoveFromAToB(int RequestID, out const Vector BeginPos, out const Vector EndPos);// 0xa4c7d14 0x78dc170080
	void RequestEquipPlayer(int RequestID);// 0xa4c6d48 0x78dc170160
	void OnPushSkillAudioInfo(EEntity* AEEntity, int SkillCfgId, int StoneCfgId, out const SkillFxToPlay[] SkillFxToPlay);// 0xa4c6848 0x78dc170240
	bool KillMonstersByCfgId(int CfgId);// 0xa4c7f50 0x78dc170320
	static AutoTestMgr* Instance();// 0xa4c8038 0x78dc170400
	void EquipPlayerResetSkillStonesToAdd();// 0xa4c6aa8 0x78dc1704e0
	void EquipPlayerResetItemsToEquip();// 0xa4c6bf8 0x78dc1705c0
	void EquipPlayerAddSkillStoneToAdd(int StoneCfgId, int SkillLevel, int SkillPos);// 0xa4c6abc 0x78dc1706a0
	void EquipPlayerAddItemToEquip(int itemBaseCfgId, int itemGoldCfgId, int equipSlot);// 0xa4c6c0c 0x78dc170780
	int CalcRequestId();// 0xa4c8004 0x78dc170860

--------------------------------
Class: EAutoTestRequest.Object
	<int,EAutoTestTask*> Tasks;//[Offset: 0x48, Size: 0x50] 0x78dbf5f640

--------------------------------
Class: EAutoTestTask.Object

--------------------------------
Class: EAutoTestRequestParamMove
	int MoveAI;//[Offset: 0x0, Size: 0x4] 0x78dbe18480
	int AcceptableRadius;//[Offset: 0x4, Size: 0x4] 0x78dbe18500
	int MinDistToStartMoving;//[Offset: 0x8, Size: 0x4] 0x78dbe18580

--------------------------------
Class: EAutoTestRequestParamGearUp
	EAutoTestTaskGearUpItem[] InitialEquipment;//[Offset: 0x0, Size: 0x10] 0x78d361a1a0
	EAutoTestTaskGearUpSkillStone[] InitialSkillStones;//[Offset: 0x10, Size: 0x10] 0x78d361a240

--------------------------------
Class: EAutoTestRequestParamKillWithSkill
	EAutoTestTaskGearUpItem[] InitialEquipment;//[Offset: 0x0, Size: 0x10] 0x78d36195c0
	EAutoTestTaskGearUpItem[] WeaponPool;//[Offset: 0x10, Size: 0x10] 0x78d3619660
	EAutoTestTaskGearUpSkillStone[] SkillStones;//[Offset: 0x20, Size: 0x10] 0x78d3619700
	int[] SupportSkillSetIds;//[Offset: 0x30, Size: 0x10] 0x78d36197a0
	int[] SkillLevels;//[Offset: 0x40, Size: 0x10] 0x78d3619840
	<int,EAutoTestTaskGearUpSkillStoneArray> SupportSkillSets;//[Offset: 0x50, Size: 0x50] 0x78dbdf9100
	EAutoTestTaskSpawnMonsterMonsterCfgArray[] MonstersWaves;//[Offset: 0xa0, Size: 0x10] 0x78d36198e0
	bool bProtectPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x78dbe18a00
	bool bHealPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1] 0x78dbe18a80
	bool bKeepSkillCooldownReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1] 0x78dbe18b00
	int AdditionalBuffCfgId;//[Offset: 0xb4, Size: 0x4] 0x78dbe18b80
	int PlayerEngageAICfgId;//[Offset: 0xb8, Size: 0x4] 0x78dbe18c00
	int CleanUpTimes;//[Offset: 0xbc, Size: 0x4] 0x78dbe18c80
	float MonsterSpawnDist;//[Offset: 0xc0, Size: 0x4] 0x78dbe18d00
	float TimeLimit;//[Offset: 0xc4, Size: 0x4] 0x78dbe18d80
	float TimeLimitBossWave;//[Offset: 0xc8, Size: 0x4] 0x78dbe18e00
	int SetPlayerLevel;//[Offset: 0xcc, Size: 0x4] 0x78dbe18e80
	bool bCollectStatistics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1] 0x78dbe18f00
	bool bLogJson;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1] 0x78dbe18f80
	bool bLogOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1] 0x78dbe19000

--------------------------------
Class: EAutoTestTaskGearUpSkillStoneArray
	EAutoTestTaskGearUpSkillStone[] Array;//[Offset: 0x0, Size: 0x10] 0x78d361a2e0

--------------------------------
Class: EAutoTestTaskSpawnMonsterMonsterCfgArray
	EAutoTestTaskSpawnMonsterMonsterCfg[] Array;//[Offset: 0x0, Size: 0x10] 0x78d361a380

--------------------------------
Class: EAutoTestTaskSpawnMonsterMonsterCfg
	int CfgId;//[Offset: 0x0, Size: 0x4] 0x78dbe15c80
	int Level;//[Offset: 0x4, Size: 0x4] 0x78dbe15d00
	int Rarity;//[Offset: 0x8, Size: 0x4] 0x78dbe15d80

--------------------------------
Class: SkillFxToPlay
	float Delay;//[Offset: 0x0, Size: 0x4] 0x78dbe26780
	VfxTweak TweakCfg;//[Offset: 0x4, Size: 0x30] 0x78dbe26800
	int VfxId;//[Offset: 0x34, Size: 0x4] 0x78dbe26880
	FString AudioEvent;//[Offset: 0x38, Size: 0x10] 0x78dbe26900
	SfxTweak AudioTweakCfg;//[Offset: 0x48, Size: 0x70] 0x78dbe26980
	FxFashionTweak FashionTweak;//[Offset: 0xb8, Size: 0x10] 0x78dbe26a00

--------------------------------
Class: VfxTweak

--------------------------------
Class: SfxTweak
	FName AudioSocketRequested;//[Offset: 0x0, Size: 0x8] 0x78dbe25980
	<enum,FString> InstigatedAudioEvents;//[Offset: 0x8, Size: 0x50] 0x78dbdfe680
	bool bUseDamageSoundRuleForEndHitWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78dbe25b00
	int SimulatedVictimSoundTypeForWorld;//[Offset: 0x5c, Size: 0x4] 0x78dbe25b80
	bool bHasValidDamageEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78dbe25c00
	enum DmgSndMode;//[Offset: 0x61, Size: 0x1] 0x78d361d760
	int DmgAtkSndType;//[Offset: 0x64, Size: 0x4] 0x78dbe25d00
	enum MultiPositionType;//[Offset: 0x68, Size: 0x1] 0x78d361d800

--------------------------------
Class: FxFashionTweak
	enum FashionFxType;//[Offset: 0x0, Size: 0x1] 0x78d361d940
	int FashionRuleId;//[Offset: 0x4, Size: 0x4] 0x78dbe26080
	enum WeaponFxType;//[Offset: 0x8, Size: 0x1] 0x78d361d9e0
	int Index;//[Offset: 0xc, Size: 0x4] 0x78dbe26180

--------------------------------
Class: EAutoTestRequest_AudioInformation.EAutoTestRequest.Object

--------------------------------
Class: EAutoTestRequest_GearUp.EAutoTestRequest.Object
	EAutoTestRequestParamGearUp arg;//[Offset: 0x98, Size: 0x20] 0x78dc158400
	int EtyId;//[Offset: 0xb8, Size: 0x4] 0x78dc156380

--------------------------------
Class: EAutoTestRequest_GetHit.EAutoTestRequest.Object
	EAutoTestRequestParamGetHit arg;//[Offset: 0x98, Size: 0x14] 0x78dc158180
	int EtyId;//[Offset: 0xac, Size: 0x4] 0x78dc158200
	EAutoTestTask_SpawnMonster* TaskSpawnMonster;//[Offset: 0xb0, Size: 0x8] 0x78dc158280
	EAutoTestTask_ProtectAndHeal* TaskProtectAndHeal;//[Offset: 0xb8, Size: 0x8] 0x78dc158300
	float TimeElasped;//[Offset: 0xc0, Size: 0x4] 0x78dc158380

--------------------------------
Class: EAutoTestRequestParamGetHit
	float MonsterSpawnDist;//[Offset: 0x0, Size: 0x4] 0x78dbe15680
	EAutoTestTaskSpawnMonsterMonsterCfg MonsterToSpawn;//[Offset: 0x4, Size: 0xc] 0x78dbe15700
	float TimeLeft;//[Offset: 0x10, Size: 0x4] 0x78dbe15780

--------------------------------
Class: EAutoTestTask_SpawnMonster.EAutoTestTask.Object
	EAutoTestTaskParamSpawnMonster arg;//[Offset: 0x4c, Size: 0x18] 0x78dc158c80
	int EtyIdSpawned;//[Offset: 0x64, Size: 0x4] 0x78dc158d00

--------------------------------
Class: EAutoTestTaskParamSpawnMonster
	EAutoTestTaskSpawnMonsterMonsterCfg Monster;//[Offset: 0x0, Size: 0xc] 0x78dbe19800
	Vector Pos;//[Offset: 0xc, Size: 0xc] 0x78dbe19880

--------------------------------
Class: EAutoTestTask_ProtectAndHeal.EAutoTestTask.Object
	EAutoTestTaskParamProtectAndHeal arg;//[Offset: 0x4c, Size: 0x18] 0x78dc158d80
	float TimeSinceLastSent;//[Offset: 0x64, Size: 0x4] 0x78dc158e00

--------------------------------
Class: EAutoTestTaskParamProtectAndHeal
	int EtyId;//[Offset: 0x0, Size: 0x4] 0x78dbe19900
	bool bDoHeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78dbe19980
	int ProtectBuffCfgId;//[Offset: 0x8, Size: 0x4] 0x78dbe19a00
	int AdditionalBuffCfgId;//[Offset: 0xc, Size: 0x4] 0x78dbe19a80
	bool bDoKeepSkillsCooldownsReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78dbe19b00
	int bAddInvincibilityState;//[Offset: 0x14, Size: 0x4] 0x78dbe19b80

--------------------------------
Class: EAutoTestRequest_KillWithSkill.EAutoTestRequest.Object
	EAutoTestRequestParamKillWithSkill arg;//[Offset: 0x98, Size: 0xd8] 0x78dc157580
	int EtyId;//[Offset: 0x170, Size: 0x4] 0x78dc157600
	Vector StartPos;//[Offset: 0x174, Size: 0xc] 0x78dc157680
	EAutoTestTask_ProtectAndHeal* TaskProtectAndHeal;//[Offset: 0x180, Size: 0x8] 0x78dc157700
	EAutoTestTask_GearUp* TaskGearUpInitial;//[Offset: 0x188, Size: 0x8] 0x78dc157780
	EAutoTestTask_CleanUp*[] TasksCleanUp;//[Offset: 0x190, Size: 0x10] 0x78dc1165a0
	EAutoTestTask_GearUp* TaskGearUnequipSupportSkill;//[Offset: 0x1a0, Size: 0x8] 0x78dc157880
	EAutoTestTask_GearUp* TaskGearEquipSkill;//[Offset: 0x1a8, Size: 0x8] 0x78dc157900
	EAutoTestTask_GearUp* TaskGearUpForSkill;//[Offset: 0x1b0, Size: 0x8] 0x78dc157980
	EAutoTestTask_Wait* TaskWait;//[Offset: 0x1b8, Size: 0x8] 0x78dc157a00
	EAutoTestTask_SpawnMonster*[] TasksSpawnMonster;//[Offset: 0x1c0, Size: 0x10] 0x78dc116640
	EAutoTestTask_Engage*[] TasksEngage;//[Offset: 0x1d0, Size: 0x10] 0x78dc1166e0
	EAutoTestTask_Wait* TaskWaitPostEngage;//[Offset: 0x1e0, Size: 0x8] 0x78dc157b80
	int[] EtyIdsSpawnedMonsters;//[Offset: 0x1e8, Size: 0x10] 0x78dc113e40
	bool bWaveHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1] 0x78dc157c80
	bool bCombatFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 0x1] 0x78dc157d00
	bool bRefreshSkillStone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fa, Size: 0x1] 0x78dc157d80
	bool bAnyFailure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fb, Size: 0x1] 0x78dc157e00
	int StartRealTimeSecond;//[Offset: 0x1fc, Size: 0x4] 0x78dc157e80
	int SkillLevelIndex;//[Offset: 0x200, Size: 0x4] 0x78dc157f00
	int SkillStoneIndex;//[Offset: 0x204, Size: 0x4] 0x78dc157f80
	int MonsterWaveIndex;//[Offset: 0x208, Size: 0x4] 0x78dc158000
	EAutoTestRequestKillWithSkillStatistics[] TotalStatistics;//[Offset: 0x210, Size: 0x10] 0x78dc113ee0
	int StatisticsIndex;//[Offset: 0x220, Size: 0x4] 0x78dc158100

--------------------------------
Class: EAutoTestTask_GearUp.EAutoTestTask.Object
	EAutoTestTaskParamGearUp arg;//[Offset: 0x50, Size: 0x50] 0x78dc158f80
	bool bDoneRemoveItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x78dc159000
	bool bDoneAddItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1] 0x78dc159080
	bool bDoneReadySkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 0x1] 0x78dc159100
	bool bPendingSendAutoTestMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 0x1] 0x78dc159180

--------------------------------
Class: EAutoTestTaskParamGearUp
	int EtyId;//[Offset: 0x0, Size: 0x4] 0x78dbe19e00
	int[] SlotsToUnequip;//[Offset: 0x8, Size: 0x10] 0x78d3619200
	int[] SkillPosToUnequip;//[Offset: 0x18, Size: 0x10] 0x78d36192a0
	EAutoTestTaskGearUpItem[] ItemsToEquip;//[Offset: 0x28, Size: 0x10] 0x78d3619340
	EAutoTestTaskGearUpSkillStone[] SkillStonesToEquip;//[Offset: 0x38, Size: 0x10] 0x78d36193e0
	bool bReadySkillsCooldownsAfterEquippingSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78dbe1a080

--------------------------------
Class: EAutoTestTask_CleanUp.EAutoTestTask.Object
	EAutoTestTaskParamCleanUp arg;//[Offset: 0x4c, Size: 0x4] 0x78dc159280
	int[] EtyIdsToDestroy;//[Offset: 0x50, Size: 0x10] 0x78dc116500

--------------------------------
Class: EAutoTestTaskParamCleanUp
	int EtyId;//[Offset: 0x0, Size: 0x4] 0x78dbe1a280

--------------------------------
Class: EAutoTestTask_Wait.EAutoTestTask.Object
	EAutoTestTaskParamWait arg;//[Offset: 0x4c, Size: 0xc] 0x78dc158b00
	float TickedWaitTime;//[Offset: 0x58, Size: 0x4] 0x78dc158b80
	bool bGMMsgReceived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x78dc158c00

--------------------------------
Class: EAutoTestTaskParamWait
	float WaitTime;//[Offset: 0x0, Size: 0x4] 0x78dbe19680
	float WaitTimeFight;//[Offset: 0x4, Size: 0x4] 0x78dbe19700
	bool bWaitForGMMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78dbe19780

--------------------------------
Class: EAutoTestTask_Engage.EAutoTestTask.Object
	EAutoTestTaskParamEngage arg;//[Offset: 0x4c, Size: 0xc] 0x78dc159200

--------------------------------
Class: EAutoTestTaskParamEngage
	int EtyId;//[Offset: 0x0, Size: 0x4] 0x78dbe1a100
	int EtyIdToEliminate;//[Offset: 0x4, Size: 0x4] 0x78dbe1a180
	int EngageAI;//[Offset: 0x8, Size: 0x4] 0x78dbe1a200

--------------------------------
Class: EAutoTestRequestKillWithSkillStatistics
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe19300
	int SkillLevelIndex;//[Offset: 0x4, Size: 0x4] 0x78dbe19380
	int TotalSkillLevelCount;//[Offset: 0x8, Size: 0x4] 0x78dbe19400
	int SkillStoneIndex;//[Offset: 0xc, Size: 0x4] 0x78dbe19480
	int TotalSkillStoneCount;//[Offset: 0x10, Size: 0x4] 0x78dbe17400
	int SkillStoneCfgId;//[Offset: 0x14, Size: 0x4] 0x78dbe17480
	int SupportSkillStonesSetId;//[Offset: 0x18, Size: 0x4] 0x78dbe17500
	int[] SupportSkillStonesCfgIds;//[Offset: 0x20, Size: 0x10] 0x78d3619ac0
	int SkillLevel;//[Offset: 0x30, Size: 0x4] 0x78dbe17600
	int MonsterWaveIndex;//[Offset: 0x34, Size: 0x4] 0x78dbe17680
	int TotalMonsterWaveCount;//[Offset: 0x38, Size: 0x4] 0x78dbe17700
	bool bIsBossWave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78dbe17780
	float TickedCombatTime;//[Offset: 0x40, Size: 0x4] 0x78dbe17800
	float StartFightTimeStamp;//[Offset: 0x44, Size: 0x4] 0x78dbe17880
	float EndFightTimeStamp;//[Offset: 0x48, Size: 0x4] 0x78dbe17900
	float MPConsumed;//[Offset: 0x4c, Size: 0x4] 0x78dbe17980
	int CastTimes;//[Offset: 0x50, Size: 0x4] 0x78dbe17a00
	float bFightTimeIncludesCooldownTime;//[Offset: 0x54, Size: 0x4] 0x78dbe17a80
	float CooldownTimeSkippedByGM;//[Offset: 0x58, Size: 0x4] 0x78dbe17b00
	float SkillChargeEnergyFilledByGM;//[Offset: 0x5c, Size: 0x4] 0x78dbe17b80
	float SkillCooldown;//[Offset: 0x60, Size: 0x4] 0x78dbe17c00
	float SkillChargeEnergyRequired;//[Offset: 0x68, Size: 0x4] 0x78dbe17c80

--------------------------------
Class: EAutoTestRequest_Move.EAutoTestRequest.Object
	EAutoTestRequestParamMove arg;//[Offset: 0x98, Size: 0xc] 0x78dc159380
	int EtyId;//[Offset: 0xa4, Size: 0x4] 0x78dc159400
	EAutoTestTask_WPGeneration* TaskWPGeneration;//[Offset: 0xa8, Size: 0x8] 0x78dc159480
	EAutoTestTask_Move* TaskMove;//[Offset: 0xb0, Size: 0x8] 0x78dc157400
	Vector StartPos;//[Offset: 0xb8, Size: 0xc] 0x78dc157480
	Vector EndPos;//[Offset: 0xc4, Size: 0xc] 0x78dc157500

--------------------------------
Class: EAutoTestTask_WPGeneration.EAutoTestTask.Object
	class AutoTestWaypointHelper* WaypointGenerationHelperClass;//[Offset: 0x50, Size: 0x28] 0x78dc1163c0
	Vector StartPos;//[Offset: 0x78, Size: 0xc] 0x78dc15a400
	Vector EndPos;//[Offset: 0x84, Size: 0xc] 0x78dc15a480
	bool bPartial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78dc15a500
	AutoTestWaypointHelper* HelperActor;//[Offset: 0x98, Size: 0x8] 0x78dc158480
	Vector[] Waypoints;//[Offset: 0xa0, Size: 0x10] 0x78dc116460
	void OnWPGenerated(const AutoTestWaypointHelper* helper, out const Vector wpPos, bool finished, bool failed, bool partial);// 0xa4d0abc 0x78dc1729a0

--------------------------------
Class: AutoTestWaypointHelper.Character.Pawn.Actor.Object
	Vector StartPos;//[Offset: 0x4b8, Size: 0xc] 0x78dc158800
	Vector EndPos;//[Offset: 0x4c4, Size: 0xc] 0x78dc158880
	bool bEverStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1] 0x78dc158900
	bool bFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 0x1] 0x78dc158980
	bool bPartial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d2, Size: 0x1] 0x78dc158a00
	EAutoTestTask_WPGeneration* Task;//[Offset: 0x4d8, Size: 0x8] 0x78dc158a80

--------------------------------
Class: EAutoTestTask_Move.EAutoTestTask.Object
	EAutoTestTaskParamMove arg;//[Offset: 0x50, Size: 0x20] 0x78dc158e80
	Vector EndPos;//[Offset: 0x70, Size: 0xc] 0x78dc158f00

--------------------------------
Class: EAutoTestTaskParamMove
	int EtyId;//[Offset: 0x0, Size: 0x4] 0x78dbe19c00
	Vector[] Waypoints;//[Offset: 0x8, Size: 0x10] 0x78d3619160
	int AcceptableRadius;//[Offset: 0x18, Size: 0x4] 0x78dbe19d00
	int MoveAI;//[Offset: 0x1c, Size: 0x4] 0x78dbe19d80

--------------------------------
Class: EAutoTestTask_AudioInformation.EAutoTestTask.Object

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x491, Size: 0x1] 0x78dc115b00
	enum TimingPolicy;//[Offset: 0x492, Size: 0x1] 0x78dc115ba0
	class UserWidget* WidgetClass;//[Offset: 0x498, Size: 0x8] 0x78dc115c40
	IntPoint DrawSize;//[Offset: 0x4a0, Size: 0x8] 0x78dc15c180
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1] 0x78dc15c200
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 0x1] 0x78dc15c280
	float RedrawTime;//[Offset: 0x4ac, Size: 0x4] 0x78dc15c300
	IntPoint CurrentDrawSize;//[Offset: 0x4b8, Size: 0x8] 0x78dc15c380
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1] 0x78dc15c400
	Vector2D Pivot;//[Offset: 0x4c4, Size: 0x8] 0x78dc15c480
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 0x1] 0x78dc15c500
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cd, Size: 0x1] 0x78dc15c580
	enum WindowVisibility;//[Offset: 0x4ce, Size: 0x1] 0x78dc115ce0
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cf, Size: 0x1] 0x78dc15a580
	LocalPlayer* OwnerPlayer;//[Offset: 0x4d0, Size: 0x8] 0x78dc15a600
	LinearColor BackgroundColor;//[Offset: 0x4d8, Size: 0x10] 0x78dc15a680
	LinearColor TintColorAndOpacity;//[Offset: 0x4e8, Size: 0x10] 0x78dc15a700
	float OpacityFromTexture;//[Offset: 0x4f8, Size: 0x4] 0x78dc15a780
	enum BlendMode;//[Offset: 0x4fc, Size: 0x1] 0x78dc115d80
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fd, Size: 0x1] 0x78dc15a880
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fe, Size: 0x1] 0x78dc15a900
	BodySetup* BodySetup;//[Offset: 0x500, Size: 0x8] 0x78dc15a980
	MaterialInterface* TranslucentMaterial;//[Offset: 0x508, Size: 0x8] 0x78dc15aa00
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x510, Size: 0x8] 0x78dc15aa80
	MaterialInterface* OpaqueMaterial;//[Offset: 0x518, Size: 0x8] 0x78dc15ab00
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x520, Size: 0x8] 0x78dc15ab80
	MaterialInterface* MaskedMaterial;//[Offset: 0x528, Size: 0x8] 0x78dc15ac00
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x530, Size: 0x8] 0x78dc15ac80
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x538, Size: 0x8] 0x78dc15ad00
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x540, Size: 0x8] 0x78dc15ad80
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1] 0x78dc15ae00
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 0x1] 0x78dc15ae80
	FName SharedLayerName;//[Offset: 0x54c, Size: 0x8] 0x78dc15af00
	int LayerZOrder;//[Offset: 0x554, Size: 0x4] 0x78dc15af80
	enum GeometryMode;//[Offset: 0x558, Size: 0x1] 0x78dc115e20
	float CylinderArcAngle;//[Offset: 0x55c, Size: 0x4] 0x78dc15b080
	enum TickMode;//[Offset: 0x560, Size: 0x1] 0x78dc115ec0
	UserWidget* Widget;//[Offset: 0x588, Size: 0x8] 0x78dc15b180
	void SetWindowVisibility(enum InVisibility);// 0xbb3d10c 0x78dc174300
	void SetWindowFocusable(bool bInWindowFocusable);// 0xbb3d1d0 0x78dc1743e0
	void SetWidgetSpace(enum NewSpace);// 0xbb3d41c 0x78dc1744c0
	void SetWidget(UserWidget* Widget);// 0xbb3dcec 0x78dc1745a0
	void SetTwoSided(const bool bWantTwoSided);// 0xbb3d950 0x78dc174680
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0xbb3d738 0x78dc174760
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0xbb3d888 0x78dc174840
	void SetTickMode(enum InTickMode);// 0xbb3d064 0x78dc174920
	void SetRedrawTime(float InRedrawTime);// 0xbb3d4dc 0x78dc174a00
	void SetPivot(out const Vector2D InPivot);// 0xbb3d664 0x78dc174ae0
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0xbb3dc44 0x78dc174bc0
	void SetManuallyRedraw(bool bUseManualRedraw);// 0xbb3db78 0x78dc174ca0
	void SetGeometryMode(enum InGeometryMode);// 0xbb3d35c 0x78dc174d80
	void SetDrawSize(Vector2D Size);// 0xbb3da38 0x78dc174e60
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0xbb3d59c 0x78dc174f40
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0xbb3d29c 0x78dc175020
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0xbb3d7e0 0x78dc175100
	void RequestRedraw();// 0xbb3da1c 0x78dc1751e0
	bool IsWidgetVisible();// 0xbb3d02c 0x78dc1752c0
	enum GetWindowVisiblility();// 0xbb3d1b4 0x78dc1753a0
	bool GetWindowFocusable();// 0xbb3d280 0x78dc175480
	enum GetWidgetSpace();// 0xbb3d4c0 0x78dc175560
	UserWidget* GetWidget();// 0xbb3dd9c 0x78dc175640
	UserWidget* GetUserWidgetObject();// 0xbb3de40 0x78dc171d60
	bool GetTwoSided();// 0xbb3da00 0x78dc171e40
	bool GetTickWhenOffscreen();// 0xbb3d934 0x78dc171f20
	TextureRenderTarget2D* GetRenderTarget();// 0xbb3de0c 0x78dc172000
	float GetRedrawTime();// 0xbb3d580 0x78dc1720e0
	Vector2D GetPivot();// 0xbb3d718 0x78dc1721c0
	LocalPlayer* GetOwnerPlayer();// 0xbb3db44 0x78dc1722a0
	MaterialInstanceDynamic* GetMaterialInstance();// 0xbb3ddd8 0x78dc172380
	bool GetManuallyRedraw();// 0xbb3dc28 0x78dc172460
	enum GetGeometryMode();// 0xbb3d400 0x78dc172540
	Vector2D GetDrawSize();// 0xbb3db10 0x78dc172620
	bool GetDrawAtDesiredSize();// 0xbb3d648 0x78dc172700
	float GetCylinderArcAngle();// 0xbb3d340 0x78dc1727e0
	Vector2D GetCurrentDrawSize();// 0xbb3dadc 0x78dc1728c0

--------------------------------
Class: BackgroundWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAutoPlayAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b2, Size: 0x1] 0x78dc15c000

--------------------------------
Class: ByteFile.Object
	byte[] Data;//[Offset: 0x28, Size: 0x10] 0x78dc115a60
	FString ImportPath;//[Offset: 0x38, Size: 0x10] 0x78dc15bf80

--------------------------------
Class: CameraMgr.Object
	void OnSpringArmMoveOver();// 0xa4d1a30 0x78dc174220

--------------------------------
Class: CoreGameInstance.MultiWorldGameInstance.GameInstance.Object
	bool bInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1] 0x78dc15ba00
	void LoadComplete(const float LoadTime, FString MapName);// 0xa4d1fb8 0x78dc173b20
	void InitSDK();// 0xa4d1fa4 0x78dc173c00
	void InitGame();// 0xa4d20ec 0x78dc173ce0
	bool GetVersionServerConfig(FString Key, out FString Value);// 0xa4d1d04 0x78dc173dc0
	void ExitGame();// 0xa4d20d8 0x78dc173ea0
	void EndLoadingScreen(World* InLoadedWorld);// 0xa4d2100 0x78dc173f80
	void BeginLoadingScreen(FString MapName);// 0xa4d21a8 0x78dc174060
	void AddVersionServerConfig(FString Key, FString Value);// 0xa4d1e5c 0x78dc174140

--------------------------------
Class: CoreGameMode.GameModeBase.Info.Actor.Object
	ApplicationLifecycleComponent* LifecycleComponent;//[Offset: 0x2d8, Size: 0x8] 0x78dc15de00
	bool bProcessTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1] 0x78dc15de80
	void SetupPlayerInputComponent();// 0xa4d2864 0x78dc179000
	void SetupAndroidInput();// 0xa4d2850 0x78dc175720
	void OnShoundUnloadResources();// 0xa4d2878 0x78dc175800
	void OnGameWillTerminate();// 0xa4d288c 0x78dc1758e0
	void OnGameResume();// 0xa4d28a0 0x78dc1759c0
	void OnGamePause();// 0xa4d28b4 0x78dc175aa0

--------------------------------
Class: CoreGameUIMode.GameModeBase.Info.Actor.Object
	bool bProcessTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78dc15dc80
	void OnSubLevelUnLoadComplete(int Linkage);// 0xa4d2c78 0x78dc178e40
	void OnSubLevelLoadComplete(int Linkage);// 0xa4d2d20 0x78dc178f20

--------------------------------
Class: CoreWorldSettings.WorldSettings.Info.Actor.Object
	LightSettings* LightSettings;//[Offset: 0x3a8, Size: 0x8] 0x78dc15fd80

--------------------------------
Class: LightSettings.Object
	float Intensity;//[Offset: 0x28, Size: 0x4] 0x78d714c080
	Color LIGHTCOLOR;//[Offset: 0x2c, Size: 0x4] 0x78d714c100
	float AttenuationRadius;//[Offset: 0x30, Size: 0x4] 0x78d714c180
	float SourceRadius;//[Offset: 0x34, Size: 0x4] 0x78d714c200
	float SoftSourceRadius;//[Offset: 0x38, Size: 0x4] 0x78d714c280
	float SpecularScale;//[Offset: 0x3c, Size: 0x4] 0x78d714c300

--------------------------------
Class: CornerIconMgr.Object
	static CornerIconMgr* Instance();// 0xa4d32e8 0x78dc178c80

--------------------------------
Class: DebugMgr.Object
	bool bShowCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1] 0x78dc181c00
	bool bAsTopView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 0x1] 0x78dc181c80
	bool bEnableInsertGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18a, Size: 0x1] 0x78dc181d00
	bool bEnableRemoveGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b, Size: 0x1] 0x78dc181d80
	float DeltaLimit;//[Offset: 0x18c, Size: 0x4] 0x78dc181e00
	float CurrentDelta;//[Offset: 0x190, Size: 0x4] 0x78dc181e80
	float CurrentPitch;//[Offset: 0x194, Size: 0x4] 0x78dc181f00
	void UpdateCollisionInfo();// 0xa4d3dd0 0x78dc17ac00
	void UITextureMemoryStatistics(out FString[] Directorys);// 0xa4d4990 0x78dc17ace0
	void StatisticsMemoryUsage(out float[] requireMemoryArray, out float[] runtimeMemoryArray);// 0xa4d4af0 0x78dc177400
	void StatisticsLimitMemoryUsage();// 0xa4d4874 0x78dc1774e0
	void ShowReferencersLog(Object* Object);// 0xa4d37dc 0x78dc1775c0
	void ShowElevatorRegion(bool enable);// 0xa4d372c 0x78dc1776a0
	void SetPlayerTopView(bool enbale);// 0xa4d3b50 0x78dc177780
	void SetPlayerGridValid(bool Valid);// 0xa4d3c38 0x78dc177860
	void SetEnableRemoveGrid(bool enbale);// 0xa4d3980 0x78dc177940
	void SetEnableInsertGrid(bool enbale);// 0xa4d3a68 0x78dc177a20
	void SetCollisionShow(bool enbale);// 0xa4d3d20 0x78dc177b00
	bool SendDropSimulateComplex(int SimType, int SimNum, int LevelId, int Ratity1, int Ratity2, int Ratity3, out const int[] MapModifierIds, out const int[] ServantIds, out const int[] ModifierIds, FString NpcDropIds, FString DropGroupInfos);// 0xa4d3e20 0x78dc177be0
	bool SendDropSimulate(int SimType, int SimNum);// 0xa4d42c0 0x78dc177cc0
	void PrintSlateDebugName(bool bOpen);// 0xa4d3884 0x78dc177da0
	static DebugMgr* Instance();// 0xa4d4c54 0x78dc177e80
	void HandleMsg();// 0xa4d3de4 0x78dc177f60
	void GMSimulateMonster();// 0xa4d43bc 0x78dc178040
	<FString,FString> GetUIMemoryUsage();// 0xa4d4888 0x78dc178120
	bool GetPlayerTopView();// 0xa4d3b18 0x78dc178200
	bool GetPlayerGridValid();// 0xa4d3c00 0x78dc1782e0
	bool GetEnableRemoveGrid();// 0xa4d3948 0x78dc1783c0
	bool GetEnableInsertGrid();// 0xa4d3a30 0x78dc1784a0
	bool GetCollisionShow();// 0xa4d3ce8 0x78dc178580
	void GenLevelAsynRes();// 0xa4d4860 0x78dc178660
	bool GenerateVirtualMonster(int SimType, int LevelId, int Ratity1, int Ratity2, int Ratity3, out const int[] MapModifierIds, out const int[] ServantIds, out const int[] ModifierIds);// 0xa4d43d0 0x78dc178740
	GatherMonsterInfo[] GatherLevelMonster(int LevelId);// 0xa4d4740 0x78dc178820
	void DumpUIMemoryUsage();// 0xa4d4adc 0x78dc178900
	void DropSimulate();// 0xa4d3e0c 0x78dc1789e0
	void ClearSimulateMonster();// 0xa4d3df8 0x78dc178ac0
	void AddOrRemoveGrid();// 0xa4d3934 0x78dc178ba0

--------------------------------
Class: GatherMonsterInfo
	int NpcID;//[Offset: 0x0, Size: 0x4] 0x78dbe24300
	int Level;//[Offset: 0x4, Size: 0x4] 0x78dbe24380
	int Rarity;//[Offset: 0x8, Size: 0x4] 0x78dbe24400
	int NpcUId;//[Offset: 0xc, Size: 0x4] 0x78dbe24480

--------------------------------
Class: DeviceHelper.BlueprintFunctionLibrary.Object
	static FString GetSIM();// 0xa4d9530 0x78dc17a420
	static FString GetNetworkType();// 0xa4d945c 0x78dc17a500
	static FString GetIPAddress();// 0xa4d9388 0x78dc17a5e0
	static FString GetDeviceType();// 0xa4d98e8 0x78dc17a6c0
	static Vector2D GetDeviceResolution();// 0xa4d9638 0x78dc17a7a0
	static FString GetDeviceOperatingSystem();// 0xa4d9814 0x78dc17a880
	static FString GetDeviceGPU();// 0xa4d966c 0x78dc17a960
	static FString GetDeviceCPU();// 0xa4d9740 0x78dc17aa40
	static float GetBatteryPower();// 0xa4d9604 0x78dc17ab20

--------------------------------
Class: DeviceInfoMgr.Object
	static DeviceInfoMgr* Instance();// 0xa4d9f20 0x78dc17a340

--------------------------------
Class: DropHelper.BlueprintFunctionLibrary.Object

--------------------------------
Class: DropMgr.Object
	FightPool GroundItemActorPool;//[Offset: 0x28, Size: 0x50] 0x78dc184300
	<int,EGroundItem*> GroundItemsActors;//[Offset: 0x78, Size: 0x50] 0x78dbf5f1c0
	<int,EGroundItem*> GroundItemActorsPendingToInit;//[Offset: 0xc8, Size: 0x50] 0x78dbf5f280
	GroundItemData[] BatchOfGroundItems;//[Offset: 0x118, Size: 0x10] 0x78dc116dc0
	int[] DropIdsOfPickableGroundItems;//[Offset: 0x128, Size: 0x10] 0x78dc116e60
	class EGroundItemNameTagWidget* NameTagWidgetClass;//[Offset: 0x138, Size: 0x8] 0x78dc116f00
	float CreateGroundItemActorsBaseDelay;//[Offset: 0x140, Size: 0x4] 0x78dc184680
	float CreateGroundItemActorsOfBatchBaseInterval;//[Offset: 0x144, Size: 0x4] 0x78dc184700
	float CreateGroundItemActorsOfBatchIntervalItemNumberFactor;//[Offset: 0x148, Size: 0x4] 0x78dc184780
	float CreateGroundItemActorsOfBatchFermatsSpiralBaseDistance;//[Offset: 0x14c, Size: 0x4] 0x78dc184800
	Vector2D WidgetOffset;//[Offset: 0x150, Size: 0x8] 0x78dc184880
	float NameTagsDelayToShow;//[Offset: 0x158, Size: 0x4] 0x78dc184900
	<int,GroundItemNameTag> NameTags;//[Offset: 0x178, Size: 0x50] 0x78dbf5f340
	int[] DropIdsOfNameTagsPendingToCreateGroup;//[Offset: 0x1c8, Size: 0x10] 0x78dc116fa0
	<int,GroundItemNameTagGroup> NameTagGroups;//[Offset: 0x1d8, Size: 0x50] 0x78dbf5f400
	int NameTagGroupCount;//[Offset: 0x228, Size: 0x4] 0x78dc184c00
	FName ScreenLayerName;//[Offset: 0x22c, Size: 0x8] 0x78dc184c80
	bool bHideAllNameTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1] 0x78dc184d00
	<int,PendingGroundItems> GroundItemsWaitForRoleDeath;//[Offset: 0x240, Size: 0x50] 0x78dbf5f4c0
	void UpdateVisualsForPickableGroundItems();// 0xa4dbc0c 0x78dc17bbc0
	void SetUnhideDropWidgetOnHide(bool unhide);// 0xa4db850 0x78dc17bca0
	void SetHideText(bool Hide);// 0xa4db7a0 0x78dc17bd80
	void SetHideIcon(bool Hide);// 0xa4db6f0 0x78dc17be60
	void SetHide(bool Hide);// 0xa4db900 0x78dc17bf40
	void SetGroundItemPickable(int DropId);// 0xa4dbc20 0x78dc17c020
	void SetDropHide(bool Hide);// 0xa4db640 0x78dc17c100
	void SetAllGroundItemsUnpickable();// 0xa4dbcc8 0x78dc17c1e0
	void RemoveNameTag(int DropId);// 0xa4da4c0 0x78dc17c2c0
	void RemoveGroundItemActor(int DropId, int64 PlayerId, int servantEtyId);// 0xa4dc11c 0x78dc17c3a0
	void ReleaseGroundItemActor(EGroundItem* Actor);// 0xa4dc49c 0x78dc17c480
	void PrepareNameTag(EGroundItem* itemActor, int DropId);// 0xa4da568 0x78dc17c560
	void PrepareForNewGroundItemsBatch();// 0xa4dc108 0x78dc17c640
	void OnFightUIGlobalVisibilityChanged(bool visible);// 0xa4da410 0x78dc17c720
	bool IsItemActorPickable(int DropId, bool checkDistance, bool checkProtectedTime);// 0xa4da7a8 0x78dc17c800
	static DropMgr* Instance();// 0xa4dc644 0x78dc17c8e0
	void InitGroundItemActor(EGroundItem* Entity, out const GroundItemData groundItem);// 0xa4da670 0x78dc17c9c0
	void InitGameConstants();// 0xa4da65c 0x78dc1790e0
	int GetNumberOfNewGroundItemActors();// 0xa4dbbd8 0x78dc1791c0
	float GetNewProtectedTimeOfNewGroundItemActorsNumberI(int Index);// 0xa4db9c4 0x78dc1792a0
	Vector GetNewOriginPosOfNewGroundItemActorsNumberI(int Index);// 0xa4dba74 0x78dc179380
	EGroundItem* GetGroundItemActor(int DropId);// 0xa4dc25c 0x78dc179460
	int GetDropIdOfNewGroundItemActorsNumberI(int Index);// 0xa4dbb28 0x78dc179540
	int GetDisplayStyleId(int itemBaseId, int itemGoldId, int Rarity, int dropLv, int itemLv, int Cost, bool isIdentified, bool isEroded, int skillLv);// 0xa4da900 0x78dc179620
	int GetDisplayInfoTypeIconResId(int itemBaseId, int itemGoldId, int rareValue);// 0xa4db274 0x78dc179700
	bool GetDisplayInfoShowHighlight(int itemBaseId, int itemGoldId, int rareValue);// 0xa4dad60 0x78dc1797e0
	int GetDisplayInfoPictureSetId(int itemBaseId, int itemGoldId, int rareValue);// 0xa4db4fc 0x78dc1798c0
	int GetDisplayInfoFxType(int itemBaseId, int itemGoldId, int rareValue);// 0xa4dafec 0x78dc1799a0
	int GetDisplayInfoFxLevel(int itemBaseId, int itemGoldId, int rareValue);// 0xa4db130 0x78dc179a80
	int GetDisplayInfoFontStyleId(int itemBaseId, int itemGoldId, int rareValue);// 0xa4db3b8 0x78dc179b60
	int GetDisplayInfoFontColorId(int itemBaseId, int itemGoldId, int rareValue);// 0xa4daea8 0x78dc179c40
	ItemDisplayInfo GetDisplayInfo(int itemBaseId, int itemGoldId, int rareValue);// 0xa4dac0c 0x78dc179d20
	bool DoCreateGroundItemActorsOfBatch(int NpcUId, out GroundItemData[] items, bool Force, bool addToPendingOnFailure);// 0xa4dbcdc 0x78dc179e00
	void CreateGroundItemActorWithDelay(out const GroundItemData groundItem, float Delay, bool calledFromTimer);// 0xa4dc30c 0x78dc179ee0
	void CreateGroundItemActorsOfBatch(int NpcUId);// 0xa4dbf68 0x78dc179fc0
	void CleanUp();// 0xa4db9b0 0x78dc17a0a0
	void AddGroundItemToBatch(out const GroundItemData groundItem);// 0xa4dc010 0x78dc17a180
	EGroundItem* AcquireGroundItemActor(World* World, out const Vector Pos);// 0xa4dc544 0x78dc17a260

--------------------------------
Class: FightPool
	<class Object,PoolStorage> EntityPools;//[Offset: 0x0, Size: 0x50] 0x78dbdfda80

--------------------------------
Class: PoolStorage
	Object*[] FreeItems;//[Offset: 0x8, Size: 0x10] 0x78d361a6a0

--------------------------------
Class: EGroundItem.EEntity.Pawn.Actor.Object

--------------------------------
Class: GroundItemData
	bool bEvaluate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe28f80
	bool bCorrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78dbe29000
	bool bAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78dbe29080
	float ProtectedTime;//[Offset: 0x4, Size: 0x4] 0x78dbe29100
	int PickDistance;//[Offset: 0x8, Size: 0x4] 0x78dbe29180
	int DropId;//[Offset: 0xc, Size: 0x4] 0x78dbe29200
	enum OriginType;//[Offset: 0x10, Size: 0x1] 0x78d361f600
	Vector OriginPos;//[Offset: 0x14, Size: 0xc] 0x78dbe29300
	enum[] Slotdata;//[Offset: 0x20, Size: 0x10] 0x78d361f740
	EEntity* Entity;//[Offset: 0xb8, Size: 0x8] 0x78dbe29400

--------------------------------
Class: EGroundItemNameTagWidget.EPoolableWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* RootView;//[Offset: 0x260, Size: 0x8] 0x78dc1c2d00
	UserWidget* NameTagIcon;//[Offset: 0x268, Size: 0x8] 0x78dc1c2d80
	UserWidget* DropFrameItem;//[Offset: 0x270, Size: 0x8] 0x78dc1c2e00
	Vector2D TextBlockMargin;//[Offset: 0x278, Size: 0x8] 0x78dc1c2e80
	int DropId;//[Offset: 0x280, Size: 0x4] 0x78dc1c2f00
	int GroupID;//[Offset: 0x284, Size: 0x4] 0x78dc1c2f80
	Vector2D LastDesiredSize;//[Offset: 0x288, Size: 0x8] 0x78dc1c3000
	uint64 LastDesiredSizeFrame;//[Offset: 0x290, Size: 0x8] 0x78dc1c3080
	uint64 HasNonZeroDesiredSizeFrame;//[Offset: 0x298, Size: 0x8] 0x78dc1c3100
	void UpdatePickable(bool bPickable);// 0xaa7cd18 0x78dc1b4680
	void SetTextAndBackground(out const GroundItemData Data);// 0xa4fdf38 0x78dc1b4760
	void PostConstructInitialize();// 0xa4fe030 0x78dc1b4840
	void InitDesiredSizeFrameCounter();// 0xa4fdf24 0x78dc1b4920
	Vector2D GetCustomDesiredSize();// 0xa4fdef0 0x78dc1b4a00

--------------------------------
Class: EPoolableWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: GroundItemNameTag
	int DropId;//[Offset: 0x0, Size: 0x4] 0x78dbe28900
	int GroupID;//[Offset: 0x4, Size: 0x4] 0x78dbe28980
	float DelayToShow;//[Offset: 0x8, Size: 0x4] 0x78dbe28a00
	bool bAlwaysShowAsPickable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78dbe28a80
	EGroundItemNameTagWidget* Widget;//[Offset: 0x10, Size: 0x8] 0x78dbe28b00
	EEntity* Actor;//[Offset: 0x18, Size: 0x8] 0x78dbe28b80

--------------------------------
Class: GroundItemNameTagGroup
	Vector WorldPos;//[Offset: 0x0, Size: 0xc] 0x78dbe28c00
	<int,Vector4> ScreenRects;//[Offset: 0x10, Size: 0x50] 0x78dbdffa00
	Vector4 ScreenSizeCache;//[Offset: 0x60, Size: 0x10] 0x78dbe28d80
	bool bInScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78dbe28e00
	Vector2D ScreenPosLastTick;//[Offset: 0x74, Size: 0x8] 0x78dbe28e80

--------------------------------
Class: PendingGroundItems
	float Timeout;//[Offset: 0x0, Size: 0x4] 0x78dbe28f00
	GroundItemData[] ItemsToDrop;//[Offset: 0x8, Size: 0x10] 0x78d361cea0

--------------------------------
Class: ItemDisplayInfo
	int PictureSet;//[Offset: 0x0, Size: 0x4] 0x78dbe29a00
	int FontStyle;//[Offset: 0x4, Size: 0x4] 0x78dbe29a80
	int FontColor;//[Offset: 0x8, Size: 0x4] 0x78dbe29b00
	int TypeIcon;//[Offset: 0xc, Size: 0x4] 0x78dbe29b80
	int FxType;//[Offset: 0x10, Size: 0x4] 0x78dbe29c00
	int FxLevel;//[Offset: 0x14, Size: 0x4] 0x78dbe29c80

--------------------------------
Class: EActionBall.EEntity.Pawn.Actor.Object

--------------------------------
Class: ECfgComponent.EComponent.ActorComponent.Object
	CfgInfo CfgInfo;//[Offset: 0x120, Size: 0x8] 0x78dc18e580
	ArtResInfo ArtResInfo;//[Offset: 0x128, Size: 0x110] 0x78dc18e600
	class EPoolableWidget* HpBarPlayerClass;//[Offset: 0x248, Size: 0x8] 0x78dc118760
	class EPoolableWidget* HpBarPlayerBotClass;//[Offset: 0x250, Size: 0x8] 0x78dc118800
	class EPoolableWidget* HpBarMonsterBossClass;//[Offset: 0x258, Size: 0x8] 0x78dc1188a0
	class EPoolableWidget* HpBarMonsterEliteClass;//[Offset: 0x260, Size: 0x8] 0x78dc118940
	class EPoolableWidget* HpBarMonsterClass;//[Offset: 0x268, Size: 0x8] 0x78dc1189e0
	class EPoolableWidget* HpBarMonsterWoodStakeClass;//[Offset: 0x270, Size: 0x8] 0x78dc118a80
	void SetUpComponents(bool isInit);// 0xa4e5b44 0x78dc190da0
	void SetUpArtRes(bool isInit);// 0xa4e5bf4 0x78dc190e80
	bool IsNeedTarget(int StoneEtyId, int SkillStoneCfgId);// 0xa4e5458 0x78dc190f60
	void InitCfg(out const CfgInfo Info);// 0xa4e5d94 0x78dc191040
	float GetSkillRange(int StoneEtyId, int SkillStoneCfgId);// 0xa4e564c 0x78dc191120
	int GetSkillCtrlTypeId(int StoneEtyId, int SkillStoneCfgId);// 0xa4e5744 0x78dc191200
	SkillCooldown GetSkillCooldown(int StoneEtyId);// 0xa4e583c 0x78dc1912e0
	float GetSkillAOERadius(int StoneEtyId, int SkillStoneCfgId);// 0xa4e5554 0x78dc1913c0
	int GetResourceId();// 0xa4e59d4 0x78dc1914a0
	void CheckArtRes(out const ArtResInfo newArtRes);// 0xa4e5a08 0x78dc191580
	ArtResInfo CalcArtResFromCfgInfo(out const CfgInfo Info);// 0xa4e5ca4 0x78dc191660

--------------------------------
Class: SkillCooldown

--------------------------------
Class: ArtResInfo
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78d361f240
	int ResId;//[Offset: 0x4, Size: 0x4] 0x78dbe2c900
	int MatSetId;//[Offset: 0x8, Size: 0x4] 0x78dbe2c980
	float BaseScale;//[Offset: 0xc, Size: 0x4] 0x78dbe2ca00
	Vector BaseOffset;//[Offset: 0x10, Size: 0xc] 0x78dbe2ca80
	bool UseAnimationShared;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78dbe2cb00
	<FName,FString> ResPaths;//[Offset: 0x20, Size: 0x50] 0x78dbe30880
	<int,FString> MaterialPaths;//[Offset: 0x70, Size: 0x50] 0x78dbe30940
	<FName,FString> AnimeRefResPaths;//[Offset: 0xc0, Size: 0x50] 0x78dbe30a00

--------------------------------
Class: EParticleFxComponent.EComponent.ActorComponent.Object
	<int,PendingFx> PendingFxs;//[Offset: 0x1c8, Size: 0x50] 0x78dbf5fb80
	<int,PlayParticleFxParam> PendingFutureFxs;//[Offset: 0x268, Size: 0x50] 0x78dbf5fc40
	<int,FxData> PrimaryFxData;//[Offset: 0x2b8, Size: 0x50] 0x78dbf5fd00
	<int,VfxBeamData> BeamData;//[Offset: 0x308, Size: 0x50] 0x78dbf5fdc0
	<int,VfxAudioData> AudioData;//[Offset: 0x3a8, Size: 0x50] 0x78dbf5fe80
	<int,VfxReleasePSCs> ReleasePSCsData;//[Offset: 0x448, Size: 0x50] 0x78dbf5ff40
	void StopFxByDynId(int dynId, bool allowDelay);// 0xa524e7c 0x78dc1bf3c0
	void PrepareFx(int CfgId, Object* Owner, out PendingFx[] outAssets);// 0xa5250b8 0x78dc1bf4a0
	void PlayPendingFutureFxs();// 0xa524a1c 0x78dc1bf580
	int PlayFxByCfgId(out const PlayParticleFxParam InParam);// 0xa524f74 0x78dc1bf660
	void OnPSCFinished(ParticleSystemComponent* PSC);// 0xa524a30 0x78dc1bf740
	void OnPreloadFxAssetLoaded(int dynId, Object* Owner, out PendingFx[] outAssets, out PendingFx vfx);// 0xa524ad8 0x78dc1bf820
	void OnPendingFxDelayReached(int dynId);// 0xa524dd4 0x78dc1bf900
	void OnPendingFxAssetLoaded(int dynId);// 0xa524d2c 0x78dc1bf9e0

--------------------------------
Class: PendingFx
	bool bCanStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe25280
	int CfgId;//[Offset: 0x4, Size: 0x4] 0x78dbe23200
	GameVFXRowData Cfg;//[Offset: 0x8, Size: 0x250] 0x78dbe22a80
	bool bDelayDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1] 0x78dbe22b00
	ParticleSystem*[] LoadedParticleRes;//[Offset: 0x260, Size: 0x10] 0x78d361bd20
	AkAudioEvent*[] LoadedSoundRes;//[Offset: 0x270, Size: 0x10] 0x78d361bdc0
	class ECameraShake[] LoadedCameraShakeRes;//[Offset: 0x280, Size: 0x10] 0x78d361bf00
	class EMaterialParameterTimeline* LoadedMatTimelineRes;//[Offset: 0x290, Size: 0x8] 0x78d361bfa0
	class EDecal[] LoadedDecalRes;//[Offset: 0x298, Size: 0x10] 0x78d361c0e0
	StaticMesh*[] LoadedStaticMeshRes;//[Offset: 0x2a8, Size: 0x10] 0x78d361c180
	SkeletalMesh*[] LoadedSkeletalMeshRes;//[Offset: 0x2b8, Size: 0x10] 0x78d361c220
	Object*[] LoadedAnimRes;//[Offset: 0x2c8, Size: 0x10] 0x78d361c2c0
	class EGhostTrailParameter* LoadedGhostTrailParamRes;//[Offset: 0x2d8, Size: 0x8] 0x78d361c360
	bool bHasBeamData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1] 0x78dbe22e00
	Vector Scale;//[Offset: 0x2e4, Size: 0xc] 0x78dbe22e80
	float SkillGroupScale;//[Offset: 0x2f0, Size: 0x4] 0x78dbe22f00
	Rotator Rotation;//[Offset: 0x2f4, Size: 0xc] 0x78dbe22f80
	Vector OffsetScalable;//[Offset: 0x300, Size: 0xc] 0x78dbe23000
	Vector OffsetNonScalable;//[Offset: 0x30c, Size: 0xc] 0x78dbe23080
	VfxBoundingCapsuleCalcMethod BoundingCapsuleCalcMethod;//[Offset: 0x318, Size: 0x18] 0x78dbe21200
	bool bPlayOnTargetPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1] 0x78dbe21280
	Vector TargetPos;//[Offset: 0x334, Size: 0xc] 0x78dbe21300
	int MaterialParameterTimelineInput;//[Offset: 0x340, Size: 0x4] 0x78dbe21380
	EEntity* CameraShakeCauser;//[Offset: 0x344, Size: 0x8] 0x78dbe21400
	float PlayRate;//[Offset: 0x34c, Size: 0x4] 0x78dbe21480
	EEntity* PlayOnActor;//[Offset: 0x350, Size: 0x8] 0x78dbe21500
	EEntity* ParticleTargetActor;//[Offset: 0x358, Size: 0x8] 0x78dbe21580
	int SkillDynId;//[Offset: 0x360, Size: 0x4] 0x78dbe21600
	float StartRotationRateCoefficient;//[Offset: 0x364, Size: 0x4] 0x78dbe21680
	bool bForceZeroRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1] 0x78dbe21700
	AudioEventToPlayTimeline AudioTimeline;//[Offset: 0x370, Size: 0x30] 0x78dbe21780
	AkAudioEvent*[] SoundResToLoad;//[Offset: 0x3a0, Size: 0x10] 0x78d361c400
	float AnimScale;//[Offset: 0x3b0, Size: 0x4] 0x78dbe21880
	enum PlayFxReason;//[Offset: 0x3b4, Size: 0x1] 0x78d361c4a0
	bool bPSCAutoRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 0x1] 0x78dbe21980

--------------------------------
Class: GameVFXRowData.TableRowBase
	FString Description;//[Offset: 0x8, Size: 0x10] 0x78dbe23280
	ParticleSystem*[] ParticleRes;//[Offset: 0x18, Size: 0x10] 0x78d361dc60
	AkAudioEvent*[] SoundRes;//[Offset: 0x28, Size: 0x10] 0x78d361dd00
	class ECameraShake[] CameraShakeRes;//[Offset: 0x38, Size: 0x10] 0x78d361de40
	class EMaterialParameterTimeline* MatTimelineRes;//[Offset: 0x48, Size: 0x28] 0x78d361dee0
	class EDecal[] DecalRes;//[Offset: 0x70, Size: 0x10] 0x78d361e020
	StaticMesh*[] StaticMeshRes;//[Offset: 0x80, Size: 0x10] 0x78d361e0c0
	<SkeletalMesh*,AnimationAsset*> SkeletalMeshRes;//[Offset: 0x90, Size: 0x50] 0x78dbdff1c0
	Vector Scale;//[Offset: 0xe0, Size: 0xc] 0x78dbe23580
	Vector Offset;//[Offset: 0xec, Size: 0xc] 0x78dbe23600
	Vector OffsetNonScalable;//[Offset: 0xf8, Size: 0xc] 0x78dbe23680
	Rotator Rotation;//[Offset: 0x104, Size: 0xc] 0x78dbe23700
	VFXArgs args;//[Offset: 0x110, Size: 0xe8] 0x78dbe22400
	FName SocketName;//[Offset: 0x1f8, Size: 0x8] 0x78dbe22480
	FName SocketName2;//[Offset: 0x200, Size: 0x8] 0x78dbe22500
	bool bAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1] 0x78dbe22580
	bool bRescale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 0x1] 0x78dbe22600
	bool bRotationIsRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20a, Size: 0x1] 0x78dbe22680
	bool bOnEndDeactiveEmitters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20b, Size: 0x1] 0x78dbe22700
	float DeactivateEmittersDelay;//[Offset: 0x20c, Size: 0x4] 0x78dbe22780
	float DestructionDelay;//[Offset: 0x210, Size: 0x4] 0x78dbe22800
	class EGhostTrailParameter* GhostTrailParamRes;//[Offset: 0x218, Size: 0x28] 0x78d361bb40
	GameEffectsAudioEventInfo[] BoundAudioEvents;//[Offset: 0x240, Size: 0x10] 0x78d361bc80

--------------------------------
Class: ECameraShake.MatineeCameraShake.CameraShakeBase.Object
	float InnerRadius;//[Offset: 0x174, Size: 0x4] 0x78dc18d080
	float OuterRadius;//[Offset: 0x178, Size: 0x4] 0x78dc18d100
	float Falloff;//[Offset: 0x17c, Size: 0x4] 0x78dc18d180
	bool bOrientShakeTowardsEpicenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1] 0x78dc18d200
	bool bOrientShakeTowardsCauserDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1] 0x78dc18d280
	bool bOrientShakeTowardsCauserVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 0x1] 0x78dc18d300
	FName Channel;//[Offset: 0x184, Size: 0x8] 0x78dc18d380
	Vector2D RandomFrequencyRange;//[Offset: 0x18c, Size: 0x8] 0x78dc18d400
	float FrequencyScale;//[Offset: 0x194, Size: 0x4] 0x78dc18d480
	bool bEverInstanced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1] 0x78dc18d500
	float OscillationBlendInTime_PreScaled;//[Offset: 0x19c, Size: 0x4] 0x78dc18d580
	float OscillationBlendOutTime_PreScaled;//[Offset: 0x1a0, Size: 0x4] 0x78dc18d600
	float OscillationDuration_PreScaled;//[Offset: 0x1a4, Size: 0x4] 0x78dc18d680

--------------------------------
Class: EMaterialParameterTimeline.Object
	FName Channel;//[Offset: 0x28, Size: 0x8] 0x78dc1cb880
	int Priority;//[Offset: 0x30, Size: 0x4] 0x78dc1cb900
	class EMaterialParameterTimelineTemplate* Template;//[Offset: 0x38, Size: 0x8] 0x78dc11b280
	bool bUseTemplatePlaySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78dc1cb980
	int InputRangeMin;//[Offset: 0x44, Size: 0x4] 0x78dc1cba00
	int InputRangeMax;//[Offset: 0x48, Size: 0x4] 0x78dc1cba80
	float PlayRate;//[Offset: 0x4c, Size: 0x4] 0x78dc1cbb00
	bool bDestroyOnComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78dc1cbb80
	bool bUseTemplateParamTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78dc1cbc00
	<FName,MaterialParameterTimelineTransitionFloat> FloatParamTransition;//[Offset: 0x58, Size: 0x50] 0x78dbf5e140
	<FName,MaterialParameterTimelineTransitionColor> ColorParamTransition;//[Offset: 0xa8, Size: 0x50] 0x78dbf5e200
	bool bUseTemplateParamCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1] 0x78dc1cbe80
	<FName,CurveFloat*> FloatCurves;//[Offset: 0x100, Size: 0x50] 0x78dbf5e2c0
	<FName,CurveLinearColor*> LinearColorCurves;//[Offset: 0x150, Size: 0x50] 0x78dbf5e380
	<FName,MaterialParameterTimelineTextureParam> TextureParams;//[Offset: 0x1a0, Size: 0x50] 0x78dbf5e440
	bool bUseTemplateMaterialOverrides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1] 0x78dc1cc200
	bool bOverrideAllMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1] 0x78dc1cc280
	MaterialParameterTimelineMaterialParam MaterialOverridesAll;//[Offset: 0x1f8, Size: 0x50] 0x78dc1cc300
	<int,MaterialParameterTimelineMaterialParam> MaterialOverrides;//[Offset: 0x248, Size: 0x50] 0x78dbf5e500
	bool bUseTemplateCopyParamsFromDefaultMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78dc1cc480
	FName[] CopyFloatParamsFromDefaultMaterial;//[Offset: 0x2a0, Size: 0x10] 0x78dc11b320
	FName[] CopyLinearColorParamsFromDefaultMaterial;//[Offset: 0x2b0, Size: 0x10] 0x78dc11b3c0
	FName[] CopyTextureParamsFromDefaultMaterial;//[Offset: 0x2c0, Size: 0x10] 0x78dc11b460
	float GetStartTimeFromInput(int Input);// 0xa511e9c 0x78dc1bbf40
	float GetEndTimeFromInput(int Input);// 0xa511dec 0x78dc1bc020

--------------------------------
Class: EMaterialParameterTimelineTemplate.Object
	int InputRangeMin;//[Offset: 0x28, Size: 0x4] 0x78dc1ca780
	int InputRangeMax;//[Offset: 0x2c, Size: 0x4] 0x78dc1ca800
	float PlayRate;//[Offset: 0x30, Size: 0x4] 0x78dc1ca880
	bool bDestroyOnComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x78dc1ca900
	<FName,MaterialParameterTimelineTransitionFloat> FloatParamTransition;//[Offset: 0x38, Size: 0x50] 0x78dbf5e5c0
	<FName,MaterialParameterTimelineTransitionColor> ColorParamTransition;//[Offset: 0x88, Size: 0x50] 0x78dbf5e680
	<FName,CurveFloat*> FloatCurves;//[Offset: 0xd8, Size: 0x50] 0x78dbf5e740
	<FName,CurveLinearColor*> LinearColorCurves;//[Offset: 0x128, Size: 0x50] 0x78dbf5e800
	<FName,MaterialParameterTimelineTextureParam> TextureParams;//[Offset: 0x178, Size: 0x50] 0x78dbf5e8c0
	bool bOverrideAllMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1] 0x78dc1cae80
	MaterialParameterTimelineMaterialParam MaterialOverridesAll;//[Offset: 0x1d0, Size: 0x50] 0x78dc1caf00
	<int,MaterialParameterTimelineMaterialParam> MaterialOverrides;//[Offset: 0x220, Size: 0x50] 0x78dbf5e980
	FName[] CopyFloatParamsFromDefaultMaterial;//[Offset: 0x270, Size: 0x10] 0x78dc11b500
	FName[] CopyLinearColorParamsFromDefaultMaterial;//[Offset: 0x280, Size: 0x10] 0x78dc11b5a0
	FName[] CopyTextureParamsFromDefaultMaterial;//[Offset: 0x290, Size: 0x10] 0x78dc11b640

--------------------------------
Class: MaterialParameterTimelineTransitionFloat
	float Target;//[Offset: 0x0, Size: 0x4] 0x78dbe1b080
	float Speed;//[Offset: 0x4, Size: 0x4] 0x78dbe1b100

--------------------------------
Class: MaterialParameterTimelineTransitionColor
	LinearColor Target;//[Offset: 0x0, Size: 0x10] 0x78dbe1b180
	LinearColor Speed;//[Offset: 0x10, Size: 0x10] 0x78dbe1b200

--------------------------------
Class: MaterialParameterTimelineTextureParam
	<int,Texture*> InputToTexture;//[Offset: 0x0, Size: 0x50] 0x78dbdf8080

--------------------------------
Class: MaterialParameterTimelineMaterialParam
	<int,MaterialInterface*> InputToMaterial;//[Offset: 0x0, Size: 0x50] 0x78dbdf8200

--------------------------------
Class: EDecal.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x28, Size: 0x8] 0x78dc1a4380
	Vector DecalSize;//[Offset: 0x30, Size: 0xc] 0x78dc1a4400
	float LifeSpan;//[Offset: 0x3c, Size: 0x4] 0x78dc1a4480
	float FadeInStartDelay;//[Offset: 0x40, Size: 0x4] 0x78dc1a4500
	float FadeInDuration;//[Offset: 0x44, Size: 0x4] 0x78dc1a4580
	float FadeOutStartDelay;//[Offset: 0x48, Size: 0x4] 0x78dc1a4600
	float FadeOutDuration;//[Offset: 0x4c, Size: 0x4] 0x78dc1a4680
	Rotator DecalProjectionRotation;//[Offset: 0x50, Size: 0xc] 0x78dc1a4700
	int SortOrder;//[Offset: 0x5c, Size: 0x4] 0x78dc1a4780
	float FadeScreenSize;//[Offset: 0x60, Size: 0x4] 0x78dc1a4800

--------------------------------
Class: VFXArgs
	<enum,DataRowArray> InstigatedVfxs;//[Offset: 0x0, Size: 0x50] 0x78dbdff400
	bool bPlayOnParentMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78dbe23a00
	bool bInheritParentScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78dbe23a80
	bool bPlayOnBeginPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x78dbe23b00
	float PlayRate;//[Offset: 0x54, Size: 0x4] 0x78dbe23b80
	bool bScalePlayRateWithAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78dbe23c00
	float DelayAnimScaled;//[Offset: 0x5c, Size: 0x4] 0x78dbe23c80
	float DelayAbsolute;//[Offset: 0x60, Size: 0x4] 0x78dbe23d00
	bool bIsBeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78dbe23d80
	int BeamLinkType;//[Offset: 0x68, Size: 0x4] 0x78dbe23e00
	bool bBeamTargetBuffSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1] 0x78dbe23e80
	bool bIsBeamEndEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1] 0x78dbe23f00
	bool bIsTrail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 0x1] 0x78dbe23f80
	float TrailWidth;//[Offset: 0x70, Size: 0x4] 0x78dbe24000
	byte TrailWidthScaleMode;//[Offset: 0x74, Size: 0x1] 0x78dbe24080
	GameTag[] RequiredTags;//[Offset: 0x78, Size: 0x10] 0x78d361e2a0
	int GroupID;//[Offset: 0x88, Size: 0x4] 0x78dbe24180
	int TranslucencySortPriority;//[Offset: 0x8c, Size: 0x4] 0x78dbe24200
	bool bPlayAnimationOnlyOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78dbe22180
	bool bRemoveSkeletalMeshOnAnimationDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1] 0x78dbe22200
	<enum,IntArray> MiscArgs;//[Offset: 0x98, Size: 0x50] 0x78dbdff580

--------------------------------
Class: DataRowArray
	DataTableRowHandle[] Array;//[Offset: 0x0, Size: 0x10] 0x78d361e160

--------------------------------
Class: DataTableRowHandle
	DataTable* DataTable;//[Offset: 0x0, Size: 0x8] 0x78dbe23780
	FName RowName;//[Offset: 0x8, Size: 0x8] 0x78dbe23800

--------------------------------
Class: GameTag.EnumerableGameInteger

--------------------------------
Class: IntArray
	int[] Array;//[Offset: 0x0, Size: 0x10] 0x78d361ba00

--------------------------------
Class: EGhostTrailParameter.Object
	float SpawnInterval;//[Offset: 0x28, Size: 0x4] 0x78dc1c1800
	float Lifetime;//[Offset: 0x2c, Size: 0x4] 0x78dc1c1880
	bool bSpawnAfterImageForAllMeshs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78dc1c1900
	FName[] TagsToSpawnAfterImage;//[Offset: 0x38, Size: 0x10] 0x78dc119660
	MaterialInterface* AfterImageMaterial;//[Offset: 0x48, Size: 0x8] 0x78dc1c1a00
	AfterImageMaterialParam MatParams;//[Offset: 0x50, Size: 0x10] 0x78dc1c1a80
	bool bScaleOverTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78dc1c1b00
	CurveFloat* ScaleCurve;//[Offset: 0x68, Size: 0x8] 0x78dc1c1b80
	float VisibleDelay;//[Offset: 0x70, Size: 0x4] 0x78dc1c1c00
	bool bVelocityDepending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78dc1c1c80
	float VelocityThreshold;//[Offset: 0x78, Size: 0x4] 0x78dc1c1d00

--------------------------------
Class: GameEffectsAudioEventInfo
	AkAudioEvent* AudioEvent;//[Offset: 0x0, Size: 0x28] 0x78dbe22880
	enum MultiPositionType;//[Offset: 0x28, Size: 0x1] 0x78d361bbe0
	float Delay;//[Offset: 0x2c, Size: 0x4] 0x78dbe22980

--------------------------------
Class: VfxBoundingCapsuleCalcMethod
	bool bIgnoreCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe23100
	bool bUseSocketNameForZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78dbe23180
	Vector ImpactPoint;//[Offset: 0x4, Size: 0xc] 0x78dbe21100
	Vector2D LineTrace2D;//[Offset: 0x10, Size: 0x8] 0x78dbe21180

--------------------------------
Class: AudioEventToPlayTimeline
	AudioEventToPlay[] Nodes;//[Offset: 0x0, Size: 0x10] 0x78d361b820
	FName AudioSocketRequested;//[Offset: 0x10, Size: 0x8] 0x78dbe1c480
	float AnimScale;//[Offset: 0x18, Size: 0x4] 0x78dbe1c500
	bool bOwnerWasSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78dbe1c580
	Actor* Owner;//[Offset: 0x20, Size: 0x8] 0x78dbe1c600
	bool bComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dbe1a580

--------------------------------
Class: AudioEventToPlay
	FString AudioEvent;//[Offset: 0x0, Size: 0x10] 0x78dbe1c180
	enum MultiPositionType;//[Offset: 0x10, Size: 0x1] 0x78d361b780
	float Delay;//[Offset: 0x14, Size: 0x4] 0x78dbe1c280
	int AudioDynId;//[Offset: 0x18, Size: 0x4] 0x78dbe1c300
	bool bStopAudioOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78dbe1c380

--------------------------------
Class: PlayParticleFxParam
	int CfgId;//[Offset: 0x0, Size: 0x4] 0x78dbe27100
	GameVFXRowData Cfg;//[Offset: 0x8, Size: 0x250] 0x78dbe27180
	VfxTweak TweakCfg;//[Offset: 0x258, Size: 0x30] 0x78dbe27200
	bool bCanStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1] 0x78dbe27280
	float AdditionalDelay;//[Offset: 0x28c, Size: 0x4] 0x78dbe27300
	int MaterialInput;//[Offset: 0x290, Size: 0x4] 0x78dbe27380
	float Scale;//[Offset: 0x294, Size: 0x4] 0x78dbe25300
	VfxBoundingCapsuleCalcMethod BoundingCapsuleCalcMethod;//[Offset: 0x298, Size: 0x18] 0x78dbe25380
	Vector Offset;//[Offset: 0x2b0, Size: 0xc] 0x78dbe25400
	Rotator Rotation;//[Offset: 0x2bc, Size: 0xc] 0x78dbe25480
	bool bPlayOnTargetPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78dbe25500
	Vector TargetPos;//[Offset: 0x2cc, Size: 0xc] 0x78dbe25580
	int RoleDamageDataIndex;//[Offset: 0x2d8, Size: 0x4] 0x78dbe25600
	EEntity* CameraShakeCauser;//[Offset: 0x2dc, Size: 0x8] 0x78dbe25680
	float AnimeScale;//[Offset: 0x2e4, Size: 0x4] 0x78dbe25700
	EEntity* TargetActor;//[Offset: 0x2e8, Size: 0x8] 0x78dbe25780
	int SkillDynId;//[Offset: 0x2f0, Size: 0x4] 0x78dbe25800
	float StartRotationRateCoefficient;//[Offset: 0x2f4, Size: 0x4] 0x78dbe25880
	FString AudioEvent;//[Offset: 0x2f8, Size: 0x10] 0x78dbe25900
	SfxTweak AudioTweakCfg;//[Offset: 0x308, Size: 0x70] 0x78dbe25e00
	bool bPlayFuture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1] 0x78dbe25e80
	int ForceDynId;//[Offset: 0x37c, Size: 0x4] 0x78dbe25f00
	enum PlayFxReason;//[Offset: 0x380, Size: 0x1] 0x78d361d8a0
	FxFashionTweak FashionTweak;//[Offset: 0x384, Size: 0x10] 0x78dbe26200

--------------------------------
Class: FxData
	WeakPSCPtr[] PSCWeakPtrs;//[Offset: 0x0, Size: 0x10] 0x78d36190c0
	int CfgId;//[Offset: 0x10, Size: 0x4] 0x78dbe1a880
	float DeactivationDelay;//[Offset: 0x14, Size: 0x4] 0x78dbe1a900
	float TimeToLiveAfterDeactivation;//[Offset: 0x18, Size: 0x4] 0x78dbe1a980
	bool bHasBeamData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78dbe1aa00
	Vector BaseScale;//[Offset: 0x20, Size: 0xc] 0x78dbe1aa80
	int SkillDynId;//[Offset: 0x2c, Size: 0x4] 0x78dbe1ab00
	int Group;//[Offset: 0x30, Size: 0x4] 0x78dbe1ab80

--------------------------------
Class: WeakPSCPtr
	ParticleSystemComponent* Ptr;//[Offset: 0x0, Size: 0x8] 0x78dbe1a780

--------------------------------
Class: VfxBeamData
	EEntity* SourceActor;//[Offset: 0x0, Size: 0x8] 0x78dbe24e00
	EEntity* TargetActor;//[Offset: 0x8, Size: 0x8] 0x78dbe24e80
	FName SourceSocketName;//[Offset: 0x10, Size: 0x8] 0x78dbe24f00
	FName TargetSocketName;//[Offset: 0x18, Size: 0x8] 0x78dbe24f80
	Vector SourcePos;//[Offset: 0x20, Size: 0xc] 0x78dbe25000
	Vector TargetPos;//[Offset: 0x2c, Size: 0xc] 0x78dbe25080
	float SourceZOffset;//[Offset: 0x38, Size: 0x4] 0x78dbe25100
	bool bIsBeamEndEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78dbe25180
	Vector MyPos;//[Offset: 0x40, Size: 0xc] 0x78dbe25200

--------------------------------
Class: VfxAudioData
	AudioEventToPlayTimeline Timeline;//[Offset: 0x0, Size: 0x30] 0x78dbe1a600
	AkAudioEvent*[] LoadedSoundRes;//[Offset: 0x30, Size: 0x10] 0x78d361b8c0

--------------------------------
Class: VfxReleasePSCs
	float DeactivateDelay;//[Offset: 0x0, Size: 0x4] 0x78dbe21a00
	float KillDelay;//[Offset: 0x4, Size: 0x4] 0x78dbe21a80
	bool bWasDeactivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78dbe21b00

--------------------------------
Class: ERoleAttachmentComponent.EComponent.ActorComponent.Object
	<int,MeshAttachment> StaticMeshAttachments;//[Offset: 0x128, Size: 0x50] 0x78d7100dc0
	<int,MeshAttachment> SkeletalMeshAttachments;//[Offset: 0x178, Size: 0x50] 0x78d7100e80
	int[] SkeletalMeshAttachmentsToRemoveOnAnimationDone;//[Offset: 0x218, Size: 0x10] 0x78dc11d6c0
	int[] WeaponAttachmentIds;//[Offset: 0x228, Size: 0x10] 0x78dc11d760
	<int,EEntity*> WeaponActors;//[Offset: 0x238, Size: 0x50] 0x78d7100f40
	float WeaponScale;//[Offset: 0x288, Size: 0x4] 0x78d70eec80
	<FName,AttachmentSockets> AttachmentSockets;//[Offset: 0x298, Size: 0x50] 0x78d7101000
	<int,TimerHandle> PostponedInitPhysicsHandles;//[Offset: 0x2e8, Size: 0x50] 0x78d71010c0
	void UpdateAllAttachmentSocketSceneComponents();// 0xa530b9c 0x78d70f7160
	void SetAttachmentInternal(int dynId, int AsyncLoadCounter, bool isSkeletalMesh);// 0xa5317e0 0x78d70f7240
	void SetAttachmentFromWeapon(bool bMainHand, int weaponResource, int weaponType);// 0xa530eb8 0x78d70f7320
	void RemoveMeshAttachment(int dynId);// 0xa530ff0 0x78d70f3a40
	void RemoveAttachmentFromWeapon(bool bMainHand);// 0xa530e08 0x78d70f3b20
	bool IsOrWillBeRunningSingleAnimation(int dynId);// 0xa530bb0 0x78d70f3c00
	bool GetAttachementSocket(out const FName attachmentName, out const FName SocketName, out SceneComponent*[] outReturn, bool forceMeshSockets);// 0xa5309a4 0x78d70f3ce0
	SceneComponent* FindOrAddSocket(out AttachmentSockets AttachmentSockets, out const FName SocketName);// 0xa530c78 0x78d70f3dc0
	void EnableAttachmentPhysics(int dynId);// 0xa5308fc 0x78d70f3ea0
	void DealWithMeshChange();// 0xa530c64 0x78d70f3f80
	int AddStaticMeshAttachment(out const StaticMesh* mesh, out const MeshAttachmentParam Param, EMeshComponent* useThisComponentInstead);// 0xa531320 0x78d70f4060
	int AddSkeletalMeshAttachment(out const SkeletalMesh* mesh, out const Object* Anim, out const MeshAttachmentParam Param, EAnimeComponent* useThisComponentInstead);// 0xa531098 0x78d70f4140
	int AddMeshAttachmentInternal(bool isSkeletalMesh, out const Object* mesh, out const Object* Anim, out const MeshAttachmentParam Param, EComponent* forceUseThisContainer);// 0xa531510 0x78d70f4220

--------------------------------
Class: MeshAttachment
	MeshComponent* MeshComponent;//[Offset: 0x0, Size: 0x8] 0x78dbe2aa80
	Object* MeshResource;//[Offset: 0x8, Size: 0x28] 0x78dbe2ab00
	Object* AnimResource;//[Offset: 0x30, Size: 0x28] 0x78dbe2ab80
	MeshAttachmentParam Param;//[Offset: 0x58, Size: 0x34] 0x78dbe2b080
	bool bPoolable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1] 0x78dbe2b100
	int AsyncLoadCounter;//[Offset: 0x90, Size: 0x4] 0x78dbe2b180

--------------------------------
Class: MeshAttachmentParam
	FName Socket;//[Offset: 0x0, Size: 0x8] 0x78dbe2ac00
	Vector Scale;//[Offset: 0x8, Size: 0xc] 0x78dbe2ac80
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x78dbe2ad00
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1] 0x78dbe2ad80
	bool bRemoveOnAnimationDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1] 0x78dbe2ae00
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17, Size: 0x1] 0x78dbe2ae80
	Rotator Rotation;//[Offset: 0x18, Size: 0xc] 0x78dbe2af00
	Vector RelativeLocation;//[Offset: 0x24, Size: 0xc] 0x78dbe2af80
	bool bDoAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78dbe2b000

--------------------------------
Class: AttachmentSockets
	SceneComponent* Root;//[Offset: 0x0, Size: 0x8] 0x78dbe2b200
	<FName,SceneComponent*> Sockets;//[Offset: 0x8, Size: 0x50] 0x78dbe310c0

--------------------------------
Class: EMeshComponent.EComponent.ActorComponent.Object
	EStaticMeshComponent* StaticMesh;//[Offset: 0x120, Size: 0x8] 0x78dc1cce80
	MaterialInterface*[] DefaultMaterials;//[Offset: 0x138, Size: 0x10] 0x78dc11b000
	<int,IntArray> DoNotUseDefaultMaterialsCounter;//[Offset: 0x148, Size: 0x50] 0x78dbf5e080
	bool TryAsyncLoad(out const FString[] pathsFirstIsMesh, enum Priority, enum MemFlag);// 0xa5158b8 0x78dc1bb840
	void SetStaticMesh(StaticMesh* NewMesh);// 0xa515dec 0x78dc1bb920
	void SetLightingChannels(bool c0, bool c1, bool c2);// 0xa515e94 0x78dc1bba00
	bool RemoveMaterialOverride(int MaterialIndex, int roleShaderTimelineDynaId);// 0xa515af8 0x78dc1bbae0
	void PostSetUpStaticMeshComponent();// 0xa5158a4 0x78dc1bbbc0
	int GetNumAllMaterialsOverride();// 0xa515ac4 0x78dc1bbca0
	MaterialInterface* GetDefaultMaterial(int MaterialIndex);// 0xa515d3c 0x78dc1bbd80
	bool AddMaterialOverride(int MaterialIndex, int roleShaderTimelineDynaId, MaterialInterface* Material);// 0xa515bf4 0x78dc1bbe60

--------------------------------
Class: EStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	StaticMesh* MeshFuture;//[Offset: 0x508, Size: 0x28] 0x78d712f880
	<int,MaterialInterface*> MaterialFuture;//[Offset: 0x530, Size: 0x50] 0x78d7100340
	EMaterialParamHistory[] MaterialParamHistory;//[Offset: 0x580, Size: 0x10] 0x78dc11fba0
	bool bFullyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1] 0x78d712fa80
	int asynLoadId;//[Offset: 0x594, Size: 0x4] 0x78d712fb00
	StaticMesh* SimpleStaticMesh;//[Offset: 0x5a8, Size: 0x8] 0x78d712fb80
	void WaitForAsyncLoad(int asynLoadId);// 0xa53c8c4 0x78d70fd1a0
	void SetStaticMeshFuture(StaticMesh* mesh);// 0xa53cd2c 0x78d70fd280
	void SetScalarParameterValueOnMaterialsFuture(const FName ParameterName, const float ParameterValue);// 0xa53ca6c 0x78d70fd360
	void SetMaterialFuture(int Index, MaterialInterface* mat);// 0xa53cb60 0x78d70fd440
	void OnFullyLoaded(int asynLoadId);// 0xa53c81c 0x78d70fd520
	StaticMesh* GetStaticMeshFuture();// 0xa53c96c 0x78d70fd600
	void ClearMaterialParamHistoryByIndex(int Index);// 0xa53c760 0x78d70fd6e0
	void ClearFuture();// 0xa53c808 0x78d70fd7c0
	void ApplyMaterialParamHistory();// 0xa53c74c 0x78d70fd8a0

--------------------------------
Class: EMaterialParamHistory
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78dbe1ea80
	EMaterialIndexSelection MatIndice;//[Offset: 0x8, Size: 0x18] 0x78dbe1ec80
	float ScalarValue;//[Offset: 0x20, Size: 0x4] 0x78dbe1ed00

--------------------------------
Class: EMaterialIndexSelection
	bool bApplyOnAllMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe1eb00
	int MaterialIndex;//[Offset: 0x4, Size: 0x4] 0x78dbe1eb80
	int[] ExcludingMaterialIndice;//[Offset: 0x8, Size: 0x10] 0x78d361a7e0

--------------------------------
Class: EAnimeComponent.EComponent.ActorComponent.Object
	ESkeletalMeshComponent* SkeletalMesh;//[Offset: 0x128, Size: 0x8] 0x78dc188f00
	AkComponent* AkComponent;//[Offset: 0x130, Size: 0x8] 0x78dc188f80
	float ResourceBaseScale;//[Offset: 0x138, Size: 0x4] 0x78dc189000
	Vector ResourceBaseOffset;//[Offset: 0x13c, Size: 0xc] 0x78dc189080
	<int,float> ResourceScaleModify;//[Offset: 0x148, Size: 0x50] 0x78dbf5ee00
	FName DefaultCollisionProfile;//[Offset: 0x198, Size: 0x8] 0x78dc189200
	<FName,Object*> AnimeReferencedResources;//[Offset: 0x1a0, Size: 0x50] 0x78dbf5eec0
	AnimSequence* SelectedDeathAnim;//[Offset: 0x1f0, Size: 0x8] 0x78dc189380
	<FName,Object*> NPCMontageResources;//[Offset: 0x1f8, Size: 0x50] 0x78dbf5ef80
	FName[] ReasonsToBecomeRagdoll;//[Offset: 0x248, Size: 0x10] 0x78dc118d00
	FName[] ReasonsToTurnOnRigidBodyOnDefaultBodies;//[Offset: 0x258, Size: 0x10] 0x78dc118da0
	FName[] ReasonsToHideMesh;//[Offset: 0x268, Size: 0x10] 0x78dc118e40
	FName[] ReasonsToFreezePose;//[Offset: 0x278, Size: 0x10] 0x78dc118ee0
	FName[] ReasonsToPauseAnims;//[Offset: 0x288, Size: 0x10] 0x78dc118f80
	FName[] ReasonsToPauseBoneTicks;//[Offset: 0x298, Size: 0x10] 0x78dc119020
	FName[] ReasonsToDisableInstanced;//[Offset: 0x2a8, Size: 0x10] 0x78dc116780
	FName[] ReasonsToHideToBeRemovedOnNextAnimationTick;//[Offset: 0x2b8, Size: 0x10] 0x78dc116820
	bool bAllowRefreshAnimationOnBecomingVisibleFromHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78dc187800
	FName[] ActiveAnimeSquenceSuffix;//[Offset: 0x2d0, Size: 0x10] 0x78dc1168c0
	MaterialInterface*[] DefaultMaterials;//[Offset: 0x2f8, Size: 0x10] 0x78dc116960
	<int,IntArray> DoNotUseDefaultMaterialsCounter;//[Offset: 0x308, Size: 0x50] 0x78dbf5f040
	bool bIsAnimContainerForStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1] 0x78dc187a80
	byte SurfaceType;//[Offset: 0x3e4, Size: 0x1] 0x78dc187b00
	int AudioFootstepType;//[Offset: 0x3e8, Size: 0x4] 0x78dc187b80
	MaterialInterface* AnimContainerForStaticMeshMaterial;//[Offset: 0x460, Size: 0x8] 0x78dc187c00
	void TurnOnRigidBodyOnDefaultBodies(bool ragdoll);// 0xa4df358 0x78dc17f820
	bool TryAsyncLoad(out const FString[] pathsFirstIsMesh, enum Priority, enum MemFlag, bool skipMeshCheck);// 0xa4ddbb8 0x78dc17f900
	void StopAnimMontage(AnimMontage* AnimMontage, float InBlendOutTime);// 0xa4dfdf4 0x78dc17f9e0
	void SnapshotFreezePose();// 0xa4defc4 0x78dc17fac0
	void SetUpAsAnimContainerForStaticMesh(bool isContainer);// 0xa4ddecc 0x78dc17fba0
	void SetSkeletalMeshScale(out const Vector Scale3D);// 0xa4dfab0 0x78dc17fc80
	void SetSkeletalMesh(SkeletalMesh* InSkelMesh, bool bReinitPose);// 0xa4de2a4 0x78dc17fd60
	void SetLightingChannels(bool c0, bool c1, bool c2);// 0xa4df968 0x78dc17fe40
	void RemoveSuffixToActiveAnimeSquenceSuffix(out const FName suffix);// 0xa4de6ac 0x78dc17ff20
	void RemoveReasonToTurnOnRigidBodyOnDefaultBodies(out const FName reason);// 0xa4df1f0 0x78dc17caa0
	void RemoveReasonToPauseBoneTicks(out const FName reason);// 0xa4dea2c 0x78dc17cb80
	void RemoveReasonToPauseAnims(out const FName reason);// 0xa4dec44 0x78dc17cc60
	void RemoveReasonToHideOnNextAnimationTick(out const FName reason);// 0xa4de5e4 0x78dc17cd40
	void RemoveReasonToHideMesh(out const FName reason);// 0xa4defd8 0x78dc17ce20
	void RemoveReasonToFreezePose(out const FName reason);// 0xa4dee5c 0x78dc17cf00
	void RemoveReasonToDisableInstanced(out const FName reason);// 0xa4de814 0x78dc17cfe0
	void RemoveReasonToBecomeRagdoll(out const FName reason);// 0xa4df408 0x78dc17d0c0
	bool RemoveMaterialOverride(int MaterialIndex, int roleShaderTimelineDynaId);// 0xa4ddfb0 0x78dc17d1a0
	void PostSetUpSkeletalMeshComponent();// 0xa4ddba4 0x78dc17d280
	void PlaySingleNodeAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0xa4df754 0x78dc17d360
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0xa4dffc4 0x78dc17d440
	void PauseBoneTicks(bool Freeze);// 0xa4deb94 0x78dc17d520
	void PauseAnims(bool Freeze);// 0xa4dedac 0x78dc17d600
	void NotifyAnimInstanceOnWeaponOrAnimSuffixChanged();// 0xa4de698 0x78dc17d6e0
	bool IsRagdollNearlyStablized(float maxSpeedSqr, float maxAngularSpeedInRadianSqr, float ignoreFarAwayBodiesDistanceSqr);// 0xa4de3a0 0x78dc17d7c0
	bool IsPlayingSingleNodeAnimation();// 0xa4df71c 0x78dc17d8a0
	bool IsAnimMontagePlaying(AnimMontage* AnimMontage);// 0xa4dfc60 0x78dc17d980
	void HideMesh(bool Hide);// 0xa4df140 0x78dc17da60
	int GetNumAllMaterialsOverride();// 0xa4ddf7c 0x78dc17db40
	MaterialInterface* GetDefaultMaterial(int MaterialIndex);// 0xa4de1f4 0x78dc17dc20
	AnimMontage* GetCurrentMontage();// 0xa4dfb60 0x78dc17dd00
	Object* FindMostSuitableAnimResource(FName searchName, int weaponTypesAnimNumber);// 0xa4df620 0x78dc17dde0
	void EnablePhysicsByMeshUserData(bool skipDelay);// 0xa4dde1c 0x78dc17dec0
	void DisableInstanced(bool Disable);// 0xa4de97c 0x78dc17dfa0
	float CalcSpinningRotSpeedFromAnim();// 0xa4df934 0x78dc17e080
	float CalcMontagePlayRate(AnimMontage* Montage, float targetDuration);// 0xa4de4e8 0x78dc17e160
	void BecomeRagdoll(bool ragdoll);// 0xa4df570 0x78dc17e240
	void AddSuffixToActiveAnimeSquenceSuffix(out const FName suffix);// 0xa4de760 0x78dc17e320
	void AddReasonToTurnOnRigidBodyOnDefaultBodies(out const FName reason);// 0xa4df2a4 0x78dc17e400
	void AddReasonToPauseBoneTicks(out const FName reason);// 0xa4deae0 0x78dc17e4e0
	void AddReasonToPauseAnims(out const FName reason);// 0xa4decf8 0x78dc17e5c0
	void AddReasonToHideMesh(out const FName reason);// 0xa4df08c 0x78dc17e6a0
	void AddReasonToFreezePose(out const FName reason);// 0xa4def10 0x78dc17adc0
	void AddReasonToDisableInstanced(out const FName reason);// 0xa4de8c8 0x78dc17aea0
	void AddReasonToBecomeRagdoll(out const FName reason);// 0xa4df4bc 0x78dc17af80
	bool AddMaterialOverride(int MaterialIndex, int roleShaderTimelineDynaId, MaterialInterface* Material);// 0xa4de0ac 0x78dc17b060

--------------------------------
Class: ESkeletalMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* MeshFuture;//[Offset: 0xf50, Size: 0x28] 0x78d7129e80
	bool bReinitPoseFuture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf78, Size: 0x1] 0x78d7129f00
	<int,MaterialInterface*> MaterialFuture;//[Offset: 0xf80, Size: 0x50] 0x78d7100b80
	FName[] SaveSnapshotFuture;//[Offset: 0xfd0, Size: 0x10] 0x78dc11eca0
	EMontageHistory[] MontageFuture;//[Offset: 0xfe0, Size: 0x10] 0x78dc11ed40
	AnimationAsset* AnimToPlayFuture;//[Offset: 0xff0, Size: 0x28] 0x78d712a180
	bool bAnimToPlayLoopingFuture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1018, Size: 0x1] 0x78d712a200
	bool bFullyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1019, Size: 0x1] 0x78d712a280
	int asynLoadId;//[Offset: 0x101c, Size: 0x4] 0x78d712a300
	SkeletalMesh* DefaultSimpleSkeletalMesh;//[Offset: 0x1030, Size: 0x8] 0x78d712a380
	void WaitForAsyncLoad(int asynLoadId);// 0xa5357b4 0x78d70faf80
	void StopAnimMontageFuture(AnimMontage* AnimMontage, float InBlendOutTime);// 0xa535af0 0x78d70fb060
	void SetSkeletalMeshFuture(SkeletalMesh* mesh, bool bReinitPose);// 0xa5363b4 0x78d70fb140
	void SetMaterialFuture(int Index, MaterialInterface* mat);// 0xa5361e8 0x78d70fb220
	void SavePoseSnapshotFuture(FName SnapshotName);// 0xa536140 0x78d70fb300
	float PlayAnimMontageFuture(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0xa535cc0 0x78d70fb3e0
	void PlayAnimationFuture(AnimationAsset* NewAnimToPlay, bool bLooping);// 0xa535f60 0x78d70fb4c0
	void OnFullyLoaded(int asynLoadId);// 0xa53570c 0x78d70fb5a0
	bool IsPlayingNow();// 0xa535f28 0x78d70fb680
	bool IsPlayingFuture();// 0xa535ef0 0x78d70fb760
	bool IsAnimMontagePlayingFuture(AnimMontage* AnimMontage);// 0xa53595c 0x78d70fb840
	AnimMontage* GetCurrentMontageFuture();// 0xa53585c 0x78d70fb920
	void ClearFuture();// 0xa5356f8 0x78d70fba00

--------------------------------
Class: EMontageHistory
	AnimMontage* Montage;//[Offset: 0x0, Size: 0x28] 0x78dbe1f500
	float PlayRate;//[Offset: 0x28, Size: 0x4] 0x78dbe1f580
	FName StartSectionName;//[Offset: 0x2c, Size: 0x8] 0x78dbe1f600
	float GameTime;//[Offset: 0x34, Size: 0x4] 0x78dbe1f680
	bool bPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78dbe1f700

--------------------------------
Class: EVisibilityComponent.EComponent.ActorComponent.Object
	FName[] ReasonsToHide;//[Offset: 0x120, Size: 0x10] 0x78d71513c0
	FName[] IgnoreReasonsToHide;//[Offset: 0x130, Size: 0x10] 0x78d7151460
	Actor*[] RegisteredIndependentActors;//[Offset: 0x140, Size: 0x10] 0x78dc11f7e0
	PrimitiveComponent*[] RegisteredIndependentComponents;//[Offset: 0x150, Size: 0x10] 0x78dc11f880
	EVisibilityComponent* parent;//[Offset: 0x160, Size: 0x8] 0x78d7141980
	EVisibilityComponent*[] Children;//[Offset: 0x168, Size: 0x10] 0x78dc11f920
	void SetParent(EVisibilityComponent* parentVisibilityComponent);// 0xa541928 0x78d70ff660
	void RemoveReasonToHide(out const FName reason, bool HideCmpsOnly);// 0xa541e08 0x78d70ff740
	void RemoveComponentToControlVisibility(PrimitiveComponent* independentComponentToControlVisibility);// 0xa5419d0 0x78d70ff820
	void RemoveActorToControlVisibility(Actor* independentActorToControlVisibility);// 0xa541b20 0x78d70ff900
	void OnGlobalFightEntitiesVisibilityChange(bool visible);// 0xa541c70 0x78d70ff9e0
	bool IsIdStale(int ID);// 0xa541d20 0x78d70ffac0
	void Hide(bool Hide, bool HideCmpsOnly);// 0xa542008 0x78d70ffba0
	int GetId();// 0xa541dd4 0x78d70ffc80
	void AddReasonToHide(out const FName reason, bool HideCmpsOnly);// 0xa541f08 0x78d70ffd60
	void AddComponentToControlVisibility(PrimitiveComponent* independentComponentToControlVisibility);// 0xa541a78 0x78d70ffe40
	void AddActorToControlVisibility(Actor* independentActorToControlVisibility);// 0xa541bc8 0x78d70fff20

--------------------------------
Class: EVisualCandyComponent.EComponent.ActorComponent.Object
	enum State;//[Offset: 0x122, Size: 0x1] 0x78d7151140
	enum Type;//[Offset: 0x123, Size: 0x1] 0x78d71511e0
	bool bIsIndependent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1] 0x78d7143000
	ProjectileMovementComponent* ProjectileMovement;//[Offset: 0x128, Size: 0x8] 0x78d7143080
	int[] AliveFxDynIds;//[Offset: 0x180, Size: 0x10] 0x78d7151280
	int[] UpdateFxDynIds;//[Offset: 0x190, Size: 0x10] 0x78d7151320
	float LifespanExpectation;//[Offset: 0x1a0, Size: 0x4] 0x78d7141100
	float PlayRate;//[Offset: 0x1a4, Size: 0x4] 0x78d7141180
	bool bPlayerInstigated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1] 0x78d7141200
	Vector OldOffset;//[Offset: 0x1ac, Size: 0xc] 0x78d7141280
	VisualCandyOrbit Orbit;//[Offset: 0x1b8, Size: 0x20] 0x78d7141300
	Actor* SpawnedOrbitHelper;//[Offset: 0x1e8, Size: 0x8] 0x78d7141380
	AkComponent* AkComponent;//[Offset: 0x1f0, Size: 0x8] 0x78d7141400
	void PostponeDestructionTime(float newLifespanExpectation);// 0xa542a08 0x78d70fecc0
	void OnEnd();// 0xa542ac4 0x78d70feda0
	void OnDelete();// 0xa542ab0 0x78d70fee80
	void OnBegin();// 0xa542ad8 0x78d70fef60
	bool IsOrbit();// 0xa5429d0 0x78d70ff040
	void InternalSetOffset(out const Vector newOffset);// 0xa542920 0x78d70ff120
	void InitBeginFxCfgID(int ID, float Scale);// 0xa542aec 0x78d70ff200
	void InitAsVisualOnly();// 0xa542bf4 0x78d70ff2e0
	void InitAsSkillSpawned();// 0xa542c08 0x78d70ff3c0
	void InitAsIndependent();// 0xa542be0 0x78d70ff4a0
	float CalcZOffsetAdjustmentIfAttackSpawnsOnUnreachableSlope();// 0xa5428ec 0x78d70ff580

--------------------------------
Class: VisualCandyOrbit
	bool bOrbit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe1fe80
	int OrbitTarget;//[Offset: 0x4, Size: 0x4] 0x78dbe1ff00
	float OrbitAngluarSpeed;//[Offset: 0x8, Size: 0x4] 0x78dbe1ff80
	float OrbitAngle;//[Offset: 0xc, Size: 0x4] 0x78dbe1e780
	float OrbitDistance;//[Offset: 0x10, Size: 0x4] 0x78dbe1e800
	bool bKeepViewOrbitOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x78dbe1e880
	bool bUseTransformForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1] 0x78dbe1e900
	float Z_OriginForView;//[Offset: 0x18, Size: 0x4] 0x78dbe1e980
	bool bOrbitDistanceChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78dbe1ea00

--------------------------------
Class: EAkComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object

--------------------------------
Class: EAffixCarrier.EEntity.Pawn.Actor.Object

--------------------------------
Class: ETransformAttachComponent.EComponent.ActorComponent.Object
	EEntity* AttachedTarget;//[Offset: 0x124, Size: 0x8] 0x78d7140200
	SceneComponent* AttachedComponent;//[Offset: 0x12c, Size: 0x8] 0x78d7140280
	Actor* AttachHelperActor;//[Offset: 0x138, Size: 0x8] 0x78d7140300

--------------------------------
Class: EAnimInstance.AnimInstance.Object
	bool bCfgBlendSkillMontageToWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1] 0x78dc18a380
	float CfgBlendSkillMontageToWalkMaxTime;//[Offset: 0x2bc, Size: 0x4] 0x78dc18a400
	bool bWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x78dc18a480
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1] 0x78dc18a500
	bool bWalkingAndAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2, Size: 0x1] 0x78dc188480
	bool bWalkingAndCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c3, Size: 0x1] 0x78dc188500
	float WalkSpeedForward;//[Offset: 0x2c4, Size: 0x4] 0x78dc188580
	float WalkSpeedRight;//[Offset: 0x2c8, Size: 0x4] 0x78dc188600
	bool bFreezePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1] 0x78dc188680
	EAnimeComponent* Anime;//[Offset: 0x2d0, Size: 0x8] 0x78dc188700
	EMoveComponent* Move;//[Offset: 0x2d8, Size: 0x8] 0x78dc188780
	ERoleComponent* Role;//[Offset: 0x2e0, Size: 0x8] 0x78dc188800
	EGhostAttachComponent* GhostAttach;//[Offset: 0x2e8, Size: 0x8] 0x78dc188880
	AnimSequence* WalkSequence;//[Offset: 0x2f0, Size: 0x8] 0x78dc188900
	AnimSequence* IdleSequence;//[Offset: 0x2f8, Size: 0x8] 0x78dc188980
	AnimSequence* DieSequence;//[Offset: 0x300, Size: 0x8] 0x78dc188a00
	BlendSpaceBase* WalkBlendSpace;//[Offset: 0x308, Size: 0x8] 0x78dc188a80
	bool bWalkBlendspaceValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1] 0x78dc188b00
	AnimMontage* TransWalkToIdleMontage;//[Offset: 0x318, Size: 0x8] 0x78dc188b80
	BlendSpace1D* RotateBlendSpace;//[Offset: 0x320, Size: 0x8] 0x78dc188c00
	PhysicsAsset* AlivePhysicsAsset;//[Offset: 0x328, Size: 0x8] 0x78dc188c80
	PhysicsAsset* DeadPhysicsAsset;//[Offset: 0x330, Size: 0x8] 0x78dc188d00
	float ForwardRotation;//[Offset: 0x33c, Size: 0x4] 0x78dc188d80
	float IdleSequenceRandomPlayRate;//[Offset: 0x340, Size: 0x4] 0x78dc188e00
	float IdleSequenceRandomStartPosition;//[Offset: 0x344, Size: 0x4] 0x78dc188e80

--------------------------------
Class: ERoleComponent.EComponent.ActorComponent.Object
	CurveFloat* SinkIntoGroundTimelineCurve;//[Offset: 0x6c8, Size: 0x8] 0x78d70efe80
	bool bEnterSceneUnhideInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 0x1] 0x78d70eff00
	void SinkIntoGroundTimelineUpdate(float V);// 0xa5322f0 0x78d70f6fa0
	void DealWithArtResChange();// 0xa532398 0x78d70f7080

--------------------------------
Class: EAttack.EEntity.Pawn.Actor.Object

--------------------------------
Class: EIndependentMoveComponent.EComponent.ActorComponent.Object
	SceneComponent* EntityRoot;//[Offset: 0x128, Size: 0x8] 0x78dc1c6d00

--------------------------------
Class: EBeCullComponent.EComponent.ActorComponent.Object
	FName[] RelativeTags;//[Offset: 0x120, Size: 0x10] 0x78dc118c60

--------------------------------
Class: EBoundingCapsuleComponent.EComponent.ActorComponent.Object
	float CapsuleRadius;//[Offset: 0x120, Size: 0x4] 0x78dc189600
	float CylinderHalfHeight;//[Offset: 0x124, Size: 0x4] 0x78dc189680
	float HemisphereHeight;//[Offset: 0x128, Size: 0x4] 0x78dc189700
	float ZOffset;//[Offset: 0x12c, Size: 0x4] 0x78dc189780
	FName MeshCenterSocketName;//[Offset: 0x130, Size: 0x8] 0x78dc189800
	Vector RootToMeshCenterOffset;//[Offset: 0x138, Size: 0xc] 0x78dc189880
	bool InitBoundingCapsuleFromAnimeComponent(float Radius, out const FName topSocketName, out const FName bottomSocketName, out const FName centerSocketName);// 0xa4e3110 0x78dc17f200
	Vector GetCenterWorldLocation();// 0xa4e2c30 0x78dc17f2e0
	Vector CalcWorldExteriorIntersectPointFromCenterToPoint(out const Vector targetPointWorld, out const Vector2D ejectLine);// 0xa4e2ddc 0x78dc17f3c0
	Vector CalcHitVfxLocationWithSocketZ(out const Vector2D hitFrom, out const FName TargetSocketName);// 0xa4e2eec 0x78dc17f4a0
	Vector CalcHitVfxLocation(out const Vector impactLocation, out const Vector2D LineTrace2D);// 0xa4e3000 0x78dc17f580
	bool Calc2DIsInside(out const Vector2D targetPointRel);// 0xa4e2c68 0x78dc17f660
	Vector2D Calc2DIntersectPointFromCenterToPoint(out const Vector2D targetPointRel);// 0xa4e2d24 0x78dc17f740

--------------------------------
Class: EBoxComponent.EComponent.ActorComponent.Object
	BoxComponent* Box;//[Offset: 0x120, Size: 0x8] 0x78dc189580

--------------------------------
Class: EBuffArea.EEntity.Pawn.Actor.Object

--------------------------------
Class: EBuffComponent.EComponent.ActorComponent.Object
	void OnBecomeDead();// 0xa4e3b48 0x78dc17f120

--------------------------------
Class: EBullet.EEntity.Pawn.Actor.Object

--------------------------------
Class: EBulletComponent.EComponent.ActorComponent.Object
	bool bTilted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x78dc18b180
	float OffsetZ;//[Offset: 0x124, Size: 0x4] 0x78dc18b200
	Vector StartPos;//[Offset: 0x128, Size: 0xc] 0x78dc18b280
	Vector TargetPos;//[Offset: 0x134, Size: 0xc] 0x78dc18b300
	void InitBullet();// 0xa4e4224 0x78dc17ee80
	float GetPosZ(out const Vector Pos, float Offset, float Delta);// 0xa4e40d8 0x78dc17ef60
	float GetPitch(bool bInited);// 0xa4e4020 0x78dc17f040

--------------------------------
Class: ECameraComponent.EComponent.ActorComponent.Object
	Vector2D ViewportSize;//[Offset: 0x124, Size: 0x8] 0x78dc18ab80
	float DefaultSpringArmLength;//[Offset: 0x12c, Size: 0x4] 0x78dc18ac00
	Rotator DefaultSpringArmRelativeRotation;//[Offset: 0x130, Size: 0xc] 0x78dc18ac80
	bool bShowLowLifeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1] 0x78dc18ad00
	Object* LowLifeMaterial;//[Offset: 0x140, Size: 0x8] 0x78dc18ad80
	ESpringArmComponent* SpringArm;//[Offset: 0x148, Size: 0x8] 0x78dc18ae00
	CameraComponent* Camera;//[Offset: 0x150, Size: 0x8] 0x78dc18ae80
	void UpdateCameraFOV(out const Vector2D ViewSize);// 0xa4e4788 0x78dc17ea20
	void UpdateCameraEffect();// 0xa4e4774 0x78dc17eb00
	void OnIsPlayerChanged(bool IsPlayerNow);// 0xa4e46c4 0x78dc17ebe0
	float GetSpringArmLengthRatio();// 0xa4e4838 0x78dc17ecc0
	void ApplySpringArmMod(float LengthMod, out const Rotator RelativeRotationMod);// 0xa4e45cc 0x78dc17eda0

--------------------------------
Class: ESpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float BaseVelPerActiveHop;//[Offset: 0x290, Size: 0x4] 0x78d712d900
	float HopLagSpeedPreMiddle;//[Offset: 0x294, Size: 0x4] 0x78d712d980
	float HopLagSpeed;//[Offset: 0x298, Size: 0x4] 0x78d712da00
	float BaseVelDistLinearFactor;//[Offset: 0x29c, Size: 0x4] 0x78d712da80
	float MidPosClamp;//[Offset: 0x2a0, Size: 0x4] 0x78d712db00
	float EndPosClamp;//[Offset: 0x2a4, Size: 0x4] 0x78d712db80
	CurveFloat* LagVelDistCurve;//[Offset: 0x2a8, Size: 0x8] 0x78d712dc00
	SmoothHopInterpInfo[] HopInfo;//[Offset: 0x2b0, Size: 0x10] 0x78dc11fd80
	bool bHopping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x78d712dd00
	float DisableLagDuration;//[Offset: 0x2c4, Size: 0x4] 0x78d712dd80
	float LagDuration;//[Offset: 0x2c8, Size: 0x4] 0x78d712de00
	bool bLagInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1] 0x78d712de80

--------------------------------
Class: SmoothHopInterpInfo
	Vector BeginPos;//[Offset: 0x0, Size: 0xc] 0x78dbe1ed80
	Vector MidPos;//[Offset: 0xc, Size: 0xc] 0x78dbe1ee00
	Vector EndPos;//[Offset: 0x18, Size: 0xc] 0x78dbe1ee80
	Vector CurrentPos;//[Offset: 0x24, Size: 0xc] 0x78dbe1ef00
	bool bPastMidPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78dbe1ef80

--------------------------------
Class: ECameraModifier_CameraShake.CameraModifier_CameraShake.CameraModifier.Object

--------------------------------
Class: ECapsuleComponent.EComponent.ActorComponent.Object
	CapsuleComponent* Capsule;//[Offset: 0x120, Size: 0x8] 0x78dc18d000

--------------------------------
Class: EChangeSkillIconWidget.UserWidget.Widget.Visual.Object
	int KeyIndex;//[Offset: 0x260, Size: 0x4] 0x78dc18e180
	FString[] Cfg_ChangeSkillIconWidgetKeys;//[Offset: 0x268, Size: 0x10] 0x78dc1186c0
	UIImage* Icon;//[Offset: 0x278, Size: 0x8] 0x78dc18e280
	Image* ImageKey;//[Offset: 0x280, Size: 0x8] 0x78dc18e300
	UITextBlock* UITextBlockKey;//[Offset: 0x288, Size: 0x8] 0x78dc18e380
	void UpdateKeyIndex(int Index);// 0xa4e6580 0x78dc190b00
	void UpdateIcon();// 0xa4e656c 0x78dc190be0
	FString LoadSkillIcon(int SkillCfgId);// 0xa4e644c 0x78dc190cc0

--------------------------------
Class: UIImage.Image.Widget.Visual.Object
	bool IsAsyncLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x78d71d5600
	int CurrStyleId;//[Offset: 0x214, Size: 0x4] 0x78d71d5680
	SoftObjectPath SoftObjectPath;//[Offset: 0x220, Size: 0x18] 0x78d71d5700
	void SetImageResource(FString ImageName, const bool MatchSize, const bool IsAsyncLoad);// 0xa598b44 0x78d71cd7c0
	FString GetImageResource();// 0xa598a70 0x78d71cd8a0

--------------------------------
Class: UITextBlock.TextBlock.TextLayoutWidget.Widget.Visual.Object
	int CurrStyleId;//[Offset: 0x2a8, Size: 0x4] 0x78d71dbe00
	FString CurrTextKey;//[Offset: 0x2b0, Size: 0x10] 0x78d71dbe80
	void SetWrapTextAt(const int InWrapTextAt);// 0xa59b9b8 0x78d71e2d20
	void SetTextTableLocalizationText(FString TextTableId);// 0xa59bb08 0x78d71e2e00
	void SetShrinkForceFontSize(const int InFoceFontSize);// 0xa59b910 0x78d71e2ee0
	void SetLocalizationText(FString LocalizationId);// 0xa59bbe0 0x78d71e2fc0
	void SetFontStyleId(int StyleId);// 0xa59ba60 0x78d71e30a0

--------------------------------
Class: EChangeSkillWidget.UserWidget.Widget.Visual.Object
	FName[] Cfg_ChangeSkillIconWidgetNames;//[Offset: 0x260, Size: 0x10] 0x78dc118580
	EChangeSkillIconWidget*[] SkillIconWidgets;//[Offset: 0x270, Size: 0x10] 0x78dc118620
	void PostConstructInitialize();// 0xa4e6b08 0x78dc190940
	EChangeSkillIconWidget* GetSkillIconByIndex(int Index);// 0xa4e6a58 0x78dc190a20

--------------------------------
Class: ECheatManager.CheatManager.Object
	void UsePortal(int UniqueId);// 0xa4e72ec 0x78dc1943e0
	void TriggerSkill(int stoneId);// 0xa4e82b4 0x78dc1944c0
	void TransToLevelRecord(FString Name);// 0xa4e7e98 0x78dc1945a0
	void TP();// 0xa4e72d8 0x78dc194680
	void TGM();// 0xa4e8370 0x78dc194760
	void TestSentry();// 0xa4e73a8 0x78dc194840
	void TestSDKAPI(int Type);// 0xa4e6f1c 0x78dc194920
	void TestLogicCrash(int typeId);// 0xa4e7464 0x78dc194a00
	void TestLogicAssert(int typeId);// 0xa4e73bc 0x78dc194ae0
	void TestHotUpdateWhiteList(FString code);// 0xa4e7200 0x78dc194bc0
	void TestHotUpdateClearAll();// 0xa4e71ec 0x78dc194ca0
	void TestCheatMgr();// 0xa4e96e8 0x78dc194d80
	void TCL();// 0xa4e835c 0x78dc194e60
	void StartRouteEffect(int X, int Y);// 0xa4e750c 0x78dc194f40
	void StartFightTest(bool enable);// 0xa4e7754 0x78dc195020
	void SpawnViewNPC(int NpcID);// 0xa4e85d8 0x78dc195100
	void SpawnPortal(int ID);// 0xa4e820c 0x78dc1951e0
	void SpawnMinion(int NpcID, int locationX, int locationY);// 0xa4e8818 0x78dc1952c0
	void SpawnGuideLine(int X, int Y);// 0xa4e7f70 0x78dc1953a0
	void SpawnFightNPC(int NpcID, int IsInteractive);// 0xa4e8680 0x78dc195480
	void Spawn(int NpcID, int locationX, int locationY);// 0xa4e8954 0x78dc195560
	void SetTimeScale(float Scale);// 0xa4e8384 0x78dc195640
	void SetOutsidePortal(bool enable);// 0xa4e713c 0x78dc191d60
	void SetNewTriggerEnabled(bool enable);// 0xa4e75fc 0x78dc191e40
	void SetLanguage(FString langCode);// 0xa4e6d88 0x78dc191f20
	void SetFightLog(int State);// 0xa4e8c2c 0x78dc192000
	void SetAIPause(int npcEtyId, int isPause);// 0xa4e8440 0x78dc1920e0
	void SDKReset();// 0xa4e6f08 0x78dc1921c0
	void RemoveState(int ID);// 0xa4e8d7c 0x78dc1922a0
	void RemoveStandAddFight(int RemoveNpcUniqueId, int64 addNpcUniqueId);// 0xa4e7adc 0x78dc192380
	void RemoveQuestNPC(int NpcID);// 0xa4e8530 0x78dc192460
	void RemoveNPCFormal(int npcUniqueId);// 0xa4e7bd0 0x78dc192540
	void QuitGM();// 0xa4e7e70 0x78dc192620
	void PlayVFX(int ID);// 0xa4e7d20 0x78dc192700
	void PlaySequence(int ID);// 0xa4e7dc8 0x78dc1927e0
	void OpenTaptapMoment();// 0xa4e7114 0x78dc1928c0
	void OpenOutsideDevice();// 0xa4e7128 0x78dc1929a0
	void MoveAndKillMonsterInGauntletTest(int AIId);// 0xa4e8770 0x78dc192a80
	void Kill();// 0xa4e842c 0x78dc192b60
	void GenLevelAsynRes();// 0xa4e8060 0x78dc192c40
	void ForceEquipment(int Slot, int ItemBase, int ItemGold);// 0xa4e6fc4 0x78dc192d20
	void FlyTo(int X, int Y);// 0xa4e811c 0x78dc192e00
	void EndProf();// 0xa4e7e84 0x78dc192ee0
	void CreateBuffArea(int ID);// 0xa4e9640 0x78dc192fc0
	void Crash1();// 0xa4e7394 0x78dc1930a0
	void ChangeNPCState(int npcUniqueId, bool isAdd, int State);// 0xa4e7804 0x78dc193180
	void AutoPick(int Type);// 0xa4e6e60 0x78dc193260
	void AttrShow(int ID);// 0xa4e8074 0x78dc193340
	void AddState(int ID);// 0xa4e8e24 0x78dc193420
	void AddStandAndRemove(int addNpcUniqueId, int64 RemoveNpcUniqueId);// 0xa4e79e8 0x78dc193500
	void AddNPCFormal(int npcUniqueId);// 0xa4e7c78 0x78dc1935e0
	void AddMonsterState(int ID);// 0xa4e8cd4 0x78dc1936c0
	void AddMonsterBuffList(float dura);// 0xa4e8a90 0x78dc1937a0
	void AddMonsterBuff(int ID, float dura);// 0xa4e8b38 0x78dc193880
	void AddFixedHPToMonster(float fixedValue);// 0xa4e9160 0x78dc193960
	void AddFixedDamageToMonster(float fixedValue);// 0xa4e9208 0x78dc190080
	void AddExistFollowNPC(int npcUniqueId);// 0xa4e7940 0x78dc190160
	void AddBuffList(float dura);// 0xa4e8fc4 0x78dc190240
	void AddBuff(int ID, float dura);// 0xa4e906c 0x78dc190320
	void AddBPComponentToMonster(int CfgId, bool isAdd);// 0xa4e8ecc 0x78dc190400
	void AddAffixToMonster(int ID, FString way);// 0xa4e92b0 0x78dc1904e0
	void AddAffixToEquip(int ID, int equipSlot, FString way);// 0xa4e93c8 0x78dc1905c0
	void AddAffix(int ID, FString way);// 0xa4e9528 0x78dc1906a0
	void ActiveSeasonGamePlay();// 0xa4e7100 0x78dc190780
	void ActiveMonsterPoint(int pointId);// 0xa4e76ac 0x78dc190860

--------------------------------
Class: ECooldownWidget.UserWidget.Widget.Visual.Object
	Image* CooldownImageCircle;//[Offset: 0x260, Size: 0x8] 0x78dc1a0980
	Image* CooldownImage;//[Offset: 0x268, Size: 0x8] 0x78dc1a0a00
	TextBlock* CooldownTextBlock;//[Offset: 0x270, Size: 0x8] 0x78dc1a0a80
	UITextBlock* NumText;//[Offset: 0x278, Size: 0x8] 0x78dc1a0b00
	Image* NumBackgroundImage;//[Offset: 0x280, Size: 0x8] 0x78dc1a0b80
	UISkillCooldown CooldownInfo;//[Offset: 0x288, Size: 0x80] 0x78dc1a0c00
	float Progress;//[Offset: 0x308, Size: 0x4] 0x78dc1a0c80
	int NumTextValue;//[Offset: 0x30c, Size: 0x4] 0x78dc1a0d00
	void UpdateTextAndImage();// 0xa4ecf08 0x78dc193ea0
	void PostConstructInitialize();// 0xa4ecf1c 0x78dc193f80
	void PlayCooldownReadyFeedback();// 0xaa7cd18 0x78dc194060
	void PlayAddPointAnim();// 0xaa7cd18 0x78dc194140
	void OnMoveTouchEnded();// 0xa4ece4c 0x78dc194220
	void DoGameTick(float Delta);// 0xa4ece60 0x78dc194300

--------------------------------
Class: UISkillCooldown
	SkillCooldown ThisTick;//[Offset: 0x0, Size: 0x38] 0x78dbe29e80
	SkillCooldown LastTick;//[Offset: 0x38, Size: 0x38] 0x78dbe29f00
	bool bUpdatedFromLogicTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78dbe29f80
	int LogicFrameId;//[Offset: 0x74, Size: 0x4] 0x78dbe2a000
	float TickScale;//[Offset: 0x78, Size: 0x4] 0x78dbe2a080

--------------------------------
Class: EClickableCooldownWidget.ECooldownWidget.UserWidget.Widget.Visual.Object
	UIImage* Icon;//[Offset: 0x310, Size: 0x8] 0x78dc1a0300
	Image* OverlayImage;//[Offset: 0x318, Size: 0x8] 0x78dc1a0380
	Image* UnderlayImage;//[Offset: 0x320, Size: 0x8] 0x78dc1a0400
	UIImage* LockedIcon;//[Offset: 0x328, Size: 0x8] 0x78dc1a0480
	UITextBlock* UnlockedLevelText;//[Offset: 0x330, Size: 0x8] 0x78dc1a0500
	Image* CannotUseIcon;//[Offset: 0x338, Size: 0x8] 0x78dc1a0580
	Image* PutInSlotHintIcon;//[Offset: 0x340, Size: 0x8] 0x78dc1a0600
	Image* AutoHoldingIcon;//[Offset: 0x348, Size: 0x8] 0x78dc1a0680
	ESkillIconDecoratorParentWidget* DecoratorWidget;//[Offset: 0x350, Size: 0x8] 0x78dc1a0700
	Vector2D ActiveTouchCenterOffset;//[Offset: 0x358, Size: 0x8] 0x78dc1a0780
	Vector2D TouchRectSizeScale;//[Offset: 0x360, Size: 0x8] 0x78dc1a0800
	bool bUIStateInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1] 0x78dc1a0880
	void UpdateUIState();// 0xaa7cd18 0x78dc193ce0
	void SetUIStateInit(bool hasInited);// 0xa4ed308 0x78dc193dc0

--------------------------------
Class: ESkillIconDecoratorParentWidget.UserWidget.Widget.Visual.Object
	<int,ESkillIconDecoratorParentSubWidgetPos> Cfg_SubWidgetPositions;//[Offset: 0x260, Size: 0x50] 0x78d71004c0
	<int,class ESkillIconDecoratorSubWidget> Cfg_SubWidgetTypes;//[Offset: 0x2b0, Size: 0x50] 0x78d7100580
	ESkillIconDecoratorParentWidgetData Cfg_Preview;//[Offset: 0x300, Size: 0x20] 0x78d712d180
	CanvasPanel* Canvas;//[Offset: 0x320, Size: 0x8] 0x78d712d200
	ESkillIconDecoratorSubWidget*[] SubWidgets;//[Offset: 0x328, Size: 0x10] 0x78dc11e3e0
	void Update(out const ESkillIconDecoratorParentWidgetData Data);// 0xa53b198 0x78d70fe5c0
	void TweakPos(int Type, int Index, int totalCount);// 0xa53af18 0x78d70fe6a0
	ESkillIconDecoratorSubWidget* AddSubWidget(int Type, int Index, int totalCount);// 0xa53b054 0x78d70fadc0

--------------------------------
Class: ESkillIconDecoratorParentSubWidgetPos
	<int,Vector2DArray> PosArrayByNum;//[Offset: 0x0, Size: 0x50] 0x78dbdfaf00

--------------------------------
Class: Vector2DArray
	Vector2D[] Array;//[Offset: 0x0, Size: 0x10] 0x78d361a880

--------------------------------
Class: ESkillIconDecoratorParentWidgetData
	int[] SubWidgetTypes;//[Offset: 0x0, Size: 0x10] 0x78d361a920
	ESkillIconDecoratorSubWidgetData[] Data;//[Offset: 0x10, Size: 0x10] 0x78d361a9c0

--------------------------------
Class: ESkillIconDecoratorSubWidgetData
	float ViewEnergy;//[Offset: 0x0, Size: 0x4] 0x78dbe1f200
	float LogicEnergy;//[Offset: 0x4, Size: 0x4] 0x78dbe1f280
	float MaxEnergy;//[Offset: 0x8, Size: 0x4] 0x78dbe1f300

--------------------------------
Class: ESkillIconDecoratorSubWidget.EProgressBarWidget.UserWidget.Widget.Visual.Object
	bool bCfg_AlwaysShowNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1] 0x78d712cb00
	bool bCfg_UseDifferentFontStyleForFullAndNotFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1] 0x78d712cb80
	int Cfg_UIStyleNumFull;//[Offset: 0x2ac, Size: 0x4] 0x78d712cc00
	int Cfg_UIStyleNumNotFull;//[Offset: 0x2b0, Size: 0x4] 0x78d712cc80
	UITextBlock* Num;//[Offset: 0x2b8, Size: 0x8] 0x78d712cd00
	WidgetAnimation* AnimFull;//[Offset: 0x2c0, Size: 0x8] 0x78d712cd80
	WidgetAnimation* AnimNoLongerFull;//[Offset: 0x2c8, Size: 0x8] 0x78d712ce00
	WidgetAnimation* AnimConsumeEnergy;//[Offset: 0x2d0, Size: 0x8] 0x78d712ce80
	bool bWasFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1] 0x78d712cf00
	float LastLogicEnergy;//[Offset: 0x2dc, Size: 0x4] 0x78d712cf80

--------------------------------
Class: EProgressBarWidget.UserWidget.Widget.Visual.Object
	Image* Progress;//[Offset: 0x260, Size: 0x8] 0x78d70ebd00
	WrapBox* Clipper;//[Offset: 0x268, Size: 0x8] 0x78d70ebd80
	CurveFloat* Curve;//[Offset: 0x270, Size: 0x8] 0x78d70ebe00
	EProgressBar Data;//[Offset: 0x278, Size: 0x30] 0x78d70ebe80
	void SetRatio(float cur, float Max);// 0xa5298c8 0x78d70f4680
	void SetPercent(float Percent);// 0xa5299b8 0x78d70f4760

--------------------------------
Class: WrapBox.PanelWidget.Widget.Visual.Object
	Vector2D InnerSlotPadding;//[Offset: 0x11c, Size: 0x8] 0x78d728fc80
	float WrapWidth;//[Offset: 0x124, Size: 0x4] 0x78d728fd00
	float WrapSize;//[Offset: 0x128, Size: 0x4] 0x78d728fd80
	bool bExplicitWrapWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1] 0x78d728fe00
	bool bExplicitWrapSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1] 0x78d728fe80
	byte Orientation;//[Offset: 0x12e, Size: 0x1] 0x78d728ff00
	void SetInnerSlotPadding(Vector2D InPadding);// 0xbb45c3c 0x78d72920e0
	WrapBoxSlot* AddChildToWrapBox(Widget* Content);// 0xbb45b8c 0x78d72921c0

--------------------------------
Class: WrapBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78d72a1080
	bool bFillEmptySpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78d728f800
	float FillSpanWhenLessThan;//[Offset: 0x4c, Size: 0x4] 0x78d728f880
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x78d728f900
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x78d728f980
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbb460dc 0x78d7295640
	void SetPadding(Margin InPadding);// 0xbb46384 0x78d7291d60
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbb46184 0x78d7291e40
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);// 0xbb4622c 0x78d7291f20
	void SetFillEmptySpace(bool InbFillEmptySpace);// 0xbb462d4 0x78d7292000

--------------------------------
Class: EProgressBar
	Image* Progress;//[Offset: 0x0, Size: 0x8] 0x78dbe1d680
	WrapBox* Clipper;//[Offset: 0x8, Size: 0x8] 0x78dbe1b600
	CurveFloat* Curve;//[Offset: 0x10, Size: 0x8] 0x78dbe1b680
	float Length;//[Offset: 0x18, Size: 0x4] 0x78dbe1b700
	bool bHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78dbe1b780
	bool bLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1] 0x78dbe1b800
	float Percent;//[Offset: 0x20, Size: 0x4] 0x78dbe1b880
	Vector2D Margins;//[Offset: 0x24, Size: 0x8] 0x78dbe1b900
	bool bPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78dbe1b980

--------------------------------
Class: ECtrlAimComponent.EComponent.ActorComponent.Object

--------------------------------
Class: ECtrlComponent.EComponent.ActorComponent.Object
	float AxisX;//[Offset: 0x174, Size: 0x4] 0x78dc1a2700
	float AxisY;//[Offset: 0x178, Size: 0x4] 0x78dc1a2780
	bool bMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 0x1] 0x78dc1a2800
	Vector MoveDir;//[Offset: 0x180, Size: 0xc] 0x78dc1a2880
	int PadNum;//[Offset: 0x18c, Size: 0x4] 0x78dc1a2900
	int PadIndex;//[Offset: 0x190, Size: 0x4] 0x78dc1a2980
	int SkillPadIndex;//[Offset: 0x194, Size: 0x4] 0x78dc1a2a00
	int UseKeyboard;//[Offset: 0x198, Size: 0x4] 0x78dc1a2a80
	Vector2D HitLandPosition;//[Offset: 0x19c, Size: 0x8] 0x78dc1a2b00
	EEntity* TraceTarget;//[Offset: 0x1a8, Size: 0x8] 0x78dc1a2b80
	int ValidDistance;//[Offset: 0x1b0, Size: 0x4] 0x78dc1a2c00
	byte[] ObjectTypes;//[Offset: 0x1b8, Size: 0x10] 0x78dc1181c0
	FName CurSkillAction;//[Offset: 0x1c8, Size: 0x8] 0x78dc1a2d00
	ECameraComponent* Camera;//[Offset: 0x1d0, Size: 0x8] 0x78dc1a2d80
	<enum,int> TracePriority;//[Offset: 0x1d8, Size: 0x50] 0x78dbf5ec80
	bool[] DirMoveState;//[Offset: 0x228, Size: 0x10] 0x78dc118300
	bool bEnableGameInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x78dc1a2f80
	bool bBlockMoveOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1] 0x78dc1a3000
	void SkillStopCmd(int StoneEtyId);// 0xa4f39ac 0x78dc1974e0
	void SkillCmd(int StoneEtyId, out const Vector RelativeLocation, int targetEtyId, enum cmdType);// 0xa4f3a54 0x78dc1975c0
	void SetupPlayerInputComponent(InputComponent* PlayerInputComponent);// 0xa4f3de8 0x78dc1976a0
	void ProcessLineTrace();// 0xa4f3588 0x78dc197780
	void PadLeftY(float Value);// 0xa4f2bd0 0x78dc197860
	void PadLeftXY(float X, float Y);// 0xa4f2ae0 0x78dc197940
	void PadLeftX(float Value);// 0xa4f2c78 0x78dc197a20
	void OnZoomOut_Press();// 0xa4f2e38 0x78dc197b00
	void OnZoomIn_Press();// 0xa4f2e4c 0x78dc197be0
	void OnTouchStarted(const byte FingerIndex, const Vector Location);// 0xa4f3484 0x78dc197cc0
	void OnTouchMoved(const byte FingerIndex, const Vector Location);// 0xa4f3394 0x78dc197da0
	void OnTouchEnded(const byte FingerIndex, const Vector Location);// 0xa4f32a4 0x78dc197e80
	void OnTalent_Press();// 0xa4f2e9c 0x78dc197f60
	void OnStrangeHandBook_Press();// 0xa4f2e88 0x78dc198040
	void OnSkin_Press();// 0xa4f2ec4 0x78dc198120
	void OnSkillUnderClick(FName Name);// 0xa4f30ac 0x78dc198200
	void OnSkillRelease(FName Name);// 0xa4f3004 0x78dc1982e0
	void OnSkillClick(FName Name);// 0xa4f3154 0x78dc1983c0
	void OnSkill_Press();// 0xa4f2ed8 0x78dc1984a0
	void OnShop_Press();// 0xa4f2eb0 0x78dc198580
	void OnSettingOrClose_Press();// 0xa4f2e24 0x78dc198660
	void OnSeasonPlay_Press();// 0xa4f2d84 0x78dc198740
	void OnSeasonBook_Press();// 0xa4f2dd4 0x78dc198820
	void OnProperty_Press();// 0xa4f2de8 0x78dc198900
	void OnPickItem_Release();// 0xa4f2d5c 0x78dc1989e0
	void OnPickItem_Press();// 0xa4f2d70 0x78dc198ac0
	void OnPet_Press();// 0xa4f2dfc 0x78dc198ba0
	void OnMouseMove(Vector AxisValue);// 0xa4f31fc 0x78dc198c80
	void OnMap_Press();// 0xa4f2f00 0x78dc198d60
	void OnItem_Press();// 0xa4f2eec 0x78dc198e40
	void OnHelp_Press();// 0xa4f2dac 0x78dc198f20
	void OnFightUIGlobalVisibilityChanged(bool visible);// 0xa4f2980 0x78dc199000
	void OnDraw_Press();// 0xa4f2dc0 0x78dc195720
	void OnCloseAll_Press();// 0xa4f2e60 0x78dc195800
	void OnChat_Press();// 0xa4f2f14 0x78dc1958e0
	void OnBackToCity_Press();// 0xa4f2e10 0x78dc1959c0
	void OnAuction_Press();// 0xa4f2e74 0x78dc195aa0
	void OnAction_Press();// 0xa4f2d98 0x78dc195b80
	void MoveToPosCmd(out const Vector2D destPos, bool isMovingToSkill);// 0xa4f3c8c 0x78dc195c60
	void MoveInForSkillCmd(int StoneEtyId, int targetEtyId, int skillCmdType);// 0xa4f3870 0x78dc195d40
	void MoveCmd();// 0xa4f3d88 0x78dc195e20
	void KeyUp_Release();// 0xa4f2fdc 0x78dc195f00
	void KeyUp_Press();// 0xa4f2ff0 0x78dc195fe0
	void KeyT_Press();// 0xa4f2d20 0x78dc1960c0
	void KeyRight_Release();// 0xa4f2f64 0x78dc1961a0
	void KeyRight_Press();// 0xa4f2f78 0x78dc196280
	void KeyP_Press();// 0xa4f2f28 0x78dc196360
	void KeyLeft_Release();// 0xa4f2f8c 0x78dc196440
	void KeyLeft_Press();// 0xa4f2fa0 0x78dc196520
	void KeyK_Press();// 0xa4f2f3c 0x78dc196600
	void KeyJ_Press();// 0xa4f2f50 0x78dc1966e0
	void KeyDown_Release();// 0xa4f2fb4 0x78dc1967c0
	void KeyDown_Press();// 0xa4f2fc8 0x78dc1968a0
	void KeyB_Press();// 0xa4f2d34 0x78dc196980
	void KeyAndroidBack_Press();// 0xa4f2d48 0x78dc196a60
	bool IsPlatformPC();// 0xa4f27f0 0x78dc196b40
	void InitPCKeyBindState(InputComponent* PlayerInputComponent);// 0xa4f28d8 0x78dc196c20
	void HeroSpecialityCastCmd(int heroSpeciality, enum ctrlType, out const Vector RelativeLocation, int targetEtyId);// 0xa4f36e8 0x78dc196d00
	enum GetSkillPos(int StoneEtyId);// 0xa4f35d0 0x78dc196de0
	int GetNextSkillToUseEtyId();// 0xa4f359c 0x78dc196ec0
	int GetCurrentSkillState();// 0xa4f36b4 0x78dc196fa0
	int GetCurrentSkillEtyId();// 0xa4f3680 0x78dc197080
	void ForwardCmd(out const Vector forwardVector);// 0xa4f3bdc 0x78dc197160
	void EnableGameInput(bool enable);// 0xa4f2a30 0x78dc197240
	void CheckMoveToPos();// 0xa4f3574 0x78dc197320
	bool CalcPadDir();// 0xa4f3d9c 0x78dc193a40
	void CalcKeyboardDir();// 0xa4f3dd4 0x78dc193b20
	void BlockMoveOutput(bool bBlock);// 0xa4f2828 0x78dc193c00

--------------------------------
Class: ECtrlPadComponent.EComponent.ActorComponent.Object
	EPadControlWidget* PadControl;//[Offset: 0x128, Size: 0x8] 0x78dc1a4000
	ECtrlComponent* Ctrl;//[Offset: 0x130, Size: 0x8] 0x78dc1a4080
	int SrcIndexToExchange;//[Offset: 0x2c4, Size: 0x4] 0x78dc1a4100
	int TargetIndexToExchange;//[Offset: 0x2c8, Size: 0x4] 0x78dc1a4180
	int ShownChangeSkillIndex;//[Offset: 0x2cc, Size: 0x4] 0x78dc1a4200
	void SkillUnderClick(int Index);// 0xa4f5848 0x78dc19a500
	void ShowBotSkillTipsOnChangePanelByIndex(int Index);// 0xa4f5698 0x78dc19a5e0
	void ReleaseSkill(int Index);// 0xa4f57a0 0x78dc19a6c0
	void ReleaseAngerSkill();// 0xa4f5778 0x78dc19a7a0
	void OnTouchStarted(const byte FingerIndex, const Vector Location);// 0xa4f5b78 0x78dc19a880
	void OnTouchMoved(const byte FingerIndex, const Vector Location);// 0xa4f5a88 0x78dc19a960
	void OnTouchEnded(const byte FingerIndex, const Vector Location);// 0xa4f5998 0x78dc19aa40
	void HideBotSkillTips();// 0xa4f5684 0x78dc19ab20
	bool ExchangeBotSkillIcon();// 0xa4f5740 0x78dc19ac00
	void ClickSkill(int Index);// 0xa4f58f0 0x78dc19ace0
	void ClickAngerSkill();// 0xa4f578c 0x78dc197400

--------------------------------
Class: EPadControlWidget.UserWidget.Widget.Visual.Object
	EPadWidget* LeftPad;//[Offset: 0x260, Size: 0x8] 0x78d70e1b80
	EPadWidget* RightPad;//[Offset: 0x268, Size: 0x8] 0x78d70e1c00
	EPadWidget* RightPadSkillIcon;//[Offset: 0x270, Size: 0x8] 0x78d70e1c80
	EPadWidget* LeftPadSkillIcon;//[Offset: 0x278, Size: 0x8] 0x78d70e1d00
	UIImage* ClickEventPanel;//[Offset: 0x280, Size: 0x8] 0x78d70e1d80
	Widget* SkillWidget0;//[Offset: 0x288, Size: 0x8] 0x78d70e1e00
	Widget* SkillWidget1;//[Offset: 0x290, Size: 0x8] 0x78d70e1e80
	Widget* SkillWidget2;//[Offset: 0x298, Size: 0x8] 0x78d70e1f00
	Widget* SkillWidget3;//[Offset: 0x2a0, Size: 0x8] 0x78d70e1f80
	Widget* SkillWidget4;//[Offset: 0x2a8, Size: 0x8] 0x78d70e2000
	Widget* CancelCast;//[Offset: 0x2b0, Size: 0x8] 0x78d70e2080
	class EHeroCharacterIceFireWidget* IceFireManWidgetClass;//[Offset: 0x2b8, Size: 0x8] 0x78dc11c900
	class EHeroCharacterRageWidget* RageWidgetClass;//[Offset: 0x2c0, Size: 0x8] 0x78dc11c9a0
	class EHeroCharacterSpaceTimeWidget* SpacetimeWidgetClass;//[Offset: 0x2c8, Size: 0x8] 0x78dc11ca40
	class EHeroCharacterMechCommanderWidget* HeroMechCommanderWidgetClass;//[Offset: 0x2d0, Size: 0x8] 0x78dc11cae0
	class EHeroCharacterMoonGirlWidget* MoonGirlWidgetClass;//[Offset: 0x2d8, Size: 0x8] 0x78dc11cb80
	class EHeroCharacterReloadAmmoWidget* CarinoReloadWidgetClass;//[Offset: 0x2e0, Size: 0x8] 0x78dc11cc20
	class EHeroCharacterReloadAmmoWidget* HeroCarinoSpecial2WidgetClass;//[Offset: 0x2e8, Size: 0x8] 0x78dc11ccc0
	class EHeroCharacterCatAgileWidget* CatAgileWidgetClass;//[Offset: 0x2f0, Size: 0x8] 0x78dc11cd60
	CanvasPanel* CanvasPanel_CharacterSkill;//[Offset: 0x2f8, Size: 0x8] 0x78d70e2100
	Vector2D Cfg_MovePadActiveTouchRectUpperLeftInViewportPercentage;//[Offset: 0x300, Size: 0x8] 0x78d70e0080
	Vector2D Cfg_MovePadActiveTouchRectLowerRightInViewportPercentage;//[Offset: 0x308, Size: 0x8] 0x78d70e0100
	FName[] Cfg_ClickableCooldownWidgetNames;//[Offset: 0x310, Size: 0x10] 0x78dc11ce00
	float Cfg_MovePadDeadZone;//[Offset: 0x320, Size: 0x4] 0x78d70e0200
	FName[] Cfg_SkillBotPosNames;//[Offset: 0x328, Size: 0x10] 0x78dc11a560
	FName[] Cfg_SkillBotKeyNames;//[Offset: 0x338, Size: 0x10] 0x78dc11a600
	EClickableCooldownWidget*[] ClickableWidgets;//[Offset: 0x348, Size: 0x10] 0x78dc11a6a0
	Button*[] SkillBotPosWidgets;//[Offset: 0x358, Size: 0x10] 0x78dc11a740
	bool bGeometryLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1] 0x78d70e0480
	bool bBotSkillTipsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 0x1] 0x78d70e0500
	int[] SkillCfgIds;//[Offset: 0x370, Size: 0x10] 0x78dc11a7e0
	int[] LastCheckSkillStonesUnlockLevel;//[Offset: 0x3e8, Size: 0x10] 0x78dc11a880
	void UpdatePadUIState();// 0xaa7cd18 0x78dc1bcaa0
	void UpdateBotKeyName();// 0xa5212f0 0x78dc1bcb80
	void SyncSkillLogicInfo(int Index, out const UISkillLogicInfo Data, bool softSync);// 0xa5215a8 0x78dc1bcc60
	void SoftSyncCooldownUI(int Index, out const SkillCooldown Data);// 0xa521cf8 0x78dc1bcd40
	void ShowBotSkillTipsByIndex(int posIndex, Vector2D posOffset, int mainIndex);// 0xa521470 0x78dc1bce20
	void SetSkillPadIconBySkillCfgId(int SkillPadIndex, int SkillCfgId);// 0xa521c08 0x78dc1bcf00
	void SetCannotUseLayerVisibility(int Index, bool show);// 0xa52184c 0x78dc1bcfe0
	void SetCancelCastVisibility(bool show);// 0xa522018 0x78dc1bd0c0
	void SetAutoHoldingIconVisibility(int Index, bool show);// 0xa521754 0x78dc1bd1a0
	void RedrawWidgetOnTouchStarted(out const Vector2D CenterPos, enum padType, int cooldownUIIndex);// 0xa522498 0x78dc1bd280
	void RedrawWidgetOnTouchMoved(out const Vector2D CenterPos, out const Vector2D Direction, enum State, enum padType, int cooldownUIIndex);// 0xa5222b8 0x78dc1bd360
	void RedrawWidgetOnTouchEnded(enum padType, int cooldownUIIndex);// 0xa5221c4 0x78dc1bd440
	void PostConstructInitialize();// 0xa5227a0 0x78dc1bd520
	void PlayFireUIAnim(int Index, int commandType);// 0xa521944 0x78dc1bd600
	void PlayCooldownUIAnim(int Index, out const SkillCooldown Data);// 0xa521e88 0x78dc1bd6e0
	void PlayAddPointAnimation(int Index);// 0xaa7cd18 0x78dc1bd7c0
	FString LoadSkillIcon(int SkillCfgId);// 0xa522680 0x78dc1bd8a0
	void HideBotSkillTips();// 0xa52145c 0x78dc1bd980
	EPadWidget* GetPad(enum padType, int cooldownUIIndex);// 0xa5220c8 0x78dc1bda60
	Button* GetBotWidgetByPadIndex(int PadIndex);// 0xa5213ac 0x78dc1bdb40
	void DrawFxOnTouchEnded(int skillIconIndex);// 0xaa7cd18 0x78dc1bdc20
	void DoGameTick(float Delta);// 0xa5225d8 0x78dc1bdd00
	void DoAfterChangeSkillWidgetVisbleChange(enum visible);// 0xa521304 0x78dc1bdde0
	void DealWithOverlayAndUnderlay(int SkillPadIndex, bool bNoIcon, bool bLocked, bool bNoSkill, int unlockLevel);// 0xa521a34 0x78dc1bdec0

--------------------------------
Class: UISkillLogicInfo
	bool bIsSummonSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe2a100
	bool bIsPowerAttackSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78dbe2a180
	bool bIsGroundEffectEnergySkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78dbe2a200
	int CurSummon;//[Offset: 0x4, Size: 0x4] 0x78dbe2a280
	int MaxSummon;//[Offset: 0x8, Size: 0x4] 0x78dbe2a300
	float[] Energy;//[Offset: 0x10, Size: 0x10] 0x78d361f4c0
	float[] MaxEnergy;//[Offset: 0x20, Size: 0x10] 0x78d361f560

--------------------------------
Class: EPadWidget.UserWidget.Widget.Visual.Object
	Widget* DirectionIndicator;//[Offset: 0x260, Size: 0x8] 0x78d70e1380
	Widget* TouchIndicator;//[Offset: 0x268, Size: 0x8] 0x78d70e1400
	Widget* Background;//[Offset: 0x270, Size: 0x8] 0x78d70e1480
	float MaxIndicatorOffset;//[Offset: 0x278, Size: 0x4] 0x78d70e1500
	float AdditionalKeepOnScreenPadding;//[Offset: 0x27c, Size: 0x4] 0x78d70e1580
	float InitialDirectionIndicatorAngle;//[Offset: 0x280, Size: 0x4] 0x78d70e1600
	bool bHideByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1] 0x78d70e1680
	Vector2D InitialIndicatorCanvasPosition;//[Offset: 0x288, Size: 0x8] 0x78d70e1700
	bool bIsFirstTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1] 0x78d70e1780
	void RedrawWidgetOnTouchStarted(out const Vector2D CenterPos);// 0xa524078 0x78dc1bfac0
	void RedrawWidgetOnTouchMoved(out const Vector2D CenterPos, out const Vector2D Direction, enum State);// 0xa523f30 0x78dc1bfba0
	void RedrawWidgetOnTouchEnded();// 0xa523f1c 0x78dc1bfc80
	void PostConstructInitialize();// 0xa523f08 0x78dc1bfd60
	Widget* GetMainSizeWidget();// 0xaa7cd18 0x78dc1bfe40
	float DragDirectionToRenderAngle(out const Vector2D DragDirection);// 0xa523e50 0x78dc1bff20

--------------------------------
Class: EHeroCharacterIceFireWidget.EHeroCharacterWidget.UserWidget.Widget.Visual.Object
	int EntityID;//[Offset: 0x260, Size: 0x4] 0x78dc1c3b80
	int LastIce;//[Offset: 0x264, Size: 0x4] 0x78dc1c3c00
	int LastFire;//[Offset: 0x268, Size: 0x4] 0x78dc1c3c80
	void UpdateNoneEnergy();// 0xaa7cd18 0x78dc1b3a40
	void UpdateIceEnergyOnly(float newPercent, bool isInIceStatus);// 0xaa7cd18 0x78dc1b3b20
	void UpdateIceAndFire(float newIcePercent, float newFirePercent, int Type);// 0xaa7cd18 0x78dc1b3c00
	void UpdateFireEnergyOnly(float newPercent, bool isInFireStatus);// 0xaa7cd18 0x78dc1b3ce0
	void Update(int heroId, float ice, float maxIce, float fire, float maxFire, bool isIceStatus, bool isFireStatus, bool canConvert, bool isFusion, bool iceIconOnly);// 0xa4fefcc 0x78dc1b3dc0
	void ShowIceFireConvertAnim(bool IsVisible);// 0xaa7cd18 0x78dc1b3ea0
	void PlayIceEnergyOnlyAnim(bool isInc, bool isInIceStatus);// 0xaa7cd18 0x78dc1b3f80
	void PlayIceAndFireIceAnim(bool isInc, bool isFull);// 0xaa7cd18 0x78dc1b4060
	void PlayIce2FireOnlyAnim();// 0xaa7cd18 0x78dc1b4140
	void PlayFireEnergyOnlyAnim(bool isInc, bool isInFireStatus);// 0xaa7cd18 0x78dc1b4220
	void PlayFire2IceOnlyAnim();// 0xaa7cd18 0x78dc1b4300

--------------------------------
Class: EHeroCharacterWidget.UserWidget.Widget.Visual.Object
	void OnSendCtrlCmd(out const Vector relLoc, enum ctrlType);// 0xaa7cd18 0x78dc1b44c0

--------------------------------
Class: EHeroCharacterRageWidget.EHeroCharacterWidget.UserWidget.Widget.Visual.Object
	int EntityID;//[Offset: 0x260, Size: 0x4] 0x78dc1c3680
	void Update(float rage, float maxRage, bool bBursting, bool bCanManulBurst);// 0xaa7cd18 0x78dc1b6fa0
	void Reset();// 0xaa7cd18 0x78dc1b7080

--------------------------------
Class: EHeroCharacterSpaceTimeWidget.EHeroCharacterWidget.UserWidget.Widget.Visual.Object
	void OnUpdate(float Percent, bool isMax, bool canUse);// 0xaa7cd18 0x78dc1b68a0
	void onSkillExistTime(float Time);// 0xaa7cd18 0x78dc1b6980

--------------------------------
Class: EHeroCharacterMechCommanderWidget.EHeroCharacterWidget.UserWidget.Widget.Visual.Object
	void SetProgress(float Progress);// 0xaa7cd18 0x78dc1b7240
	void SetNum(bool show, int Num);// 0xaa7cd18 0x78dc1b7320

--------------------------------
Class: EHeroCharacterMoonGirlWidget.EHeroCharacterWidget.UserWidget.Widget.Visual.Object
	void OnUpdate(float cdPercent, bool bJuNengReachLimit);// 0xaa7cd18 0x78dc1b7160

--------------------------------
Class: EHeroCharacterReloadAmmoWidget.EHeroCharacterWidget.UserWidget.Widget.Visual.Object
	void UpdateAmmoSize(int Size);// 0xaa7cd18 0x78dc1b6a60
	void LoadingProgress(bool IsReloading, float Progress);// 0xaa7cd18 0x78dc1b6b40
	void LoadedAmmo(int ammoSlot);// 0xaa7cd18 0x78dc1b6c20
	void EmptyShot();// 0xaa7cd18 0x78dc1b6d00
	void EmptyAmmo();// 0xaa7cd18 0x78dc1b6de0
	void ConsumeAmmo(int ConsumeNum);// 0xaa7cd18 0x78dc1b6ec0

--------------------------------
Class: EHeroCharacterCatAgileWidget.EHeroCharacterWidget.UserWidget.Widget.Visual.Object
	void Update(bool bInCatAgile, float Percent);// 0xaa7cd18 0x78dc1b43e0

--------------------------------
Class: ECullObstacleComponent.EComponent.ActorComponent.Object
	SceneComponent* EntityRoot;//[Offset: 0x128, Size: 0x8] 0x78dc1a3680
	BoxComponent* RayBox;//[Offset: 0x130, Size: 0x8] 0x78dc1a3700
	<int,TimerHandle> OtherActorTimer;//[Offset: 0x138, Size: 0x50] 0x78dbf5eb00
	<int,float> OtherActorAlpha;//[Offset: 0x188, Size: 0x50] 0x78dbf5ebc0
	CurveFloat* EmitterFadeCurve;//[Offset: 0x1d8, Size: 0x8] 0x78dc1a3980
	void SetMaterialParam(Actor* OtherActor, bool isAdd);// 0xa4f6250 0x78dc19a260
	void OnCollisionEnd(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xa4f634c 0x78dc19a340
	void OnCollisionBegin(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xa4f64d4 0x78dc19a420

--------------------------------
Class: ECustomWidgetComponent.EComponent.ActorComponent.Object
	<int,EWidgetComponent*> OwnedWidgetComponents;//[Offset: 0x120, Size: 0x50] 0x78dbf5ea40

--------------------------------
Class: EWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ZOrder;//[Offset: 0x608, Size: 0x4] 0x78d7142d80
	FName SharedLayerNameCustomized;//[Offset: 0x60c, Size: 0x8] 0x78d7142e00
	void SetWidgetZOrder(int ZOrder);// 0xa5432b4 0x78d70febe0

--------------------------------
Class: EDamageNumberWidget.EPoolableWidget.UserWidget.Widget.Visual.Object
	float Cfg_RandomX;//[Offset: 0x260, Size: 0x4] 0x78dc1a5180
	float Cfg_RandomYJumpWords;//[Offset: 0x264, Size: 0x4] 0x78dc1a5200
	float Cfg_RandomYSplashWords;//[Offset: 0x268, Size: 0x4] 0x78dc1a5280
	int Cfg_FastForwardCountThreshold;//[Offset: 0x26c, Size: 0x4] 0x78dc1a3200
	float Cfg_FastForwardPlaybackSpeed;//[Offset: 0x270, Size: 0x4] 0x78dc1a3280
	bool bCfg_AlwaysFadeBelow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1] 0x78dc1a3300
	Widget* wrapper;//[Offset: 0x278, Size: 0x8] 0x78dc1a3380
	EWidgetComponent* OwnerComponent;//[Offset: 0x280, Size: 0x8] 0x78dc1a3400
	int PlayId;//[Offset: 0x288, Size: 0x4] 0x78dc1a3480
	bool bIsFading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1] 0x78dc1a3500

--------------------------------
Class: EDamageNumberWidgetLegacy.EDamageNumberWidget.EPoolableWidget.UserWidget.Widget.Visual.Object
	int Cfg_ArtResIdDamage;//[Offset: 0x290, Size: 0x4] 0x78dc1a4c00
	int Cfg_ArtResIdHurt;//[Offset: 0x294, Size: 0x4] 0x78dc1a4c80
	int Cfg_ArtResIdCrit;//[Offset: 0x298, Size: 0x4] 0x78dc1a4d00
	int Cfg_ArtResIdHeal;//[Offset: 0x29c, Size: 0x4] 0x78dc1a4d80
	int Cfg_ArtResIdCritOverlay;//[Offset: 0x2a0, Size: 0x4] 0x78dc1a4e00
	ETextToImagesWidget* DamageText;//[Offset: 0x2a8, Size: 0x8] 0x78dc1a4e80
	WidgetAnimation* AnimDamageNumberJumpUp;//[Offset: 0x2b0, Size: 0x8] 0x78dc1a4f00
	WidgetAnimation* AnimDamageNumberMoveUp;//[Offset: 0x2b8, Size: 0x8] 0x78dc1a4f80
	WidgetAnimation* AnimDamageNumberMoveLeft;//[Offset: 0x2c0, Size: 0x8] 0x78dc1a5000
	WidgetAnimation* AnimDamageNumberCritMoveUp;//[Offset: 0x2c8, Size: 0x8] 0x78dc1a5080
	WidgetAnimation* AnimDamageNumberEliminate;//[Offset: 0x2d0, Size: 0x8] 0x78dc1a5100

--------------------------------
Class: ETextToImagesWidget.UserWidget.Widget.Visual.Object
	<FString,FSlateBrushArray> Cfg_Resources;//[Offset: 0x260, Size: 0x50] 0x78d7100280
	ImageArray* Line;//[Offset: 0x2b0, Size: 0x8] 0x78d7140f80
	int ArtResIndex;//[Offset: 0x2b8, Size: 0x4] 0x78d7141000
	FString[] Words;//[Offset: 0x2c0, Size: 0x10] 0x78dc11fb00
	bool bPossiblyDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1] 0x78d712f800

--------------------------------
Class: FSlateBrushArray
	SlateBrush[] Array;//[Offset: 0x0, Size: 0x10] 0x78d361f060

--------------------------------
Class: EDamageNumberWidgetNew.EDamageNumberWidget.EPoolableWidget.UserWidget.Widget.Visual.Object
	TextBlock* DamageText;//[Offset: 0x290, Size: 0x8] 0x78dc1a4880
	EDamageNumberMatParameterAnim[] Cfg_Animations;//[Offset: 0x298, Size: 0x10] 0x78dc117fe0
	LinearColor[] Cfg_Colors;//[Offset: 0x2a8, Size: 0x10] 0x78dc118080
	int AnimIndex;//[Offset: 0x2b8, Size: 0x4] 0x78dc1a4a00
	float AnimPosition;//[Offset: 0x2bc, Size: 0x4] 0x78dc1a4a80
	float AnimPlayRate;//[Offset: 0x2c0, Size: 0x4] 0x78dc1a4b00
	void SetCustomPrimitiveData(out const float[] inData);// 0xa4f7060 0x78dc19a180

--------------------------------
Class: EDamageNumberMatParameterAnim
	CurveLinearColor* Curve;//[Offset: 0x0, Size: 0x8] 0x78dbe20100
	float Length;//[Offset: 0x8, Size: 0x4] 0x78dbe20180

--------------------------------
Class: EDialogueComponent.EComponent.ActorComponent.Object
	float TargetYaw;//[Offset: 0x124, Size: 0x4] 0x78dc1a6300
	bool BeginRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x78dc1a4280
	void SetTargetYaw(float Yaw);// 0xa4f75e0 0x78dc19a0a0

--------------------------------
Class: EDirectHit.EEntity.Pawn.Actor.Object

--------------------------------
Class: EDragableWidget.UserWidget.Widget.Visual.Object
	void BeingDragDrop();// 0xa4f9228 0x78dc199fc0

--------------------------------
Class: EDrawNameComponent.EComponent.ActorComponent.Object
	class EPoolableWidget* TextWidgetClass;//[Offset: 0x120, Size: 0x8] 0x78dc117f40
	EWidgetComponent* OwnerComponent;//[Offset: 0x128, Size: 0x8] 0x78dc1a6280

--------------------------------
Class: EDrawNumberPool.EEntity.Pawn.Actor.Object

--------------------------------
Class: EDrawNumberPoolComponent.EComponent.ActorComponent.Object
	float Cfg_HighDamageThresholdResetInterval;//[Offset: 0x120, Size: 0x4] 0x78dc1a5480
	float Cfg_HighDamageThresholdShrinkInterval;//[Offset: 0x124, Size: 0x4] 0x78dc1a5500
	float Cfg_HighDamageThresholdShrinkRadix;//[Offset: 0x128, Size: 0x4] 0x78dc1a5580
	int Cfg_HighDamageThresholdCount;//[Offset: 0x12c, Size: 0x4] 0x78dc1a5600
	FName Cfg_DrawDamageHealNumberMeshSocket;//[Offset: 0x130, Size: 0x8] 0x78dc1a5680
	float Cfg_DrawDamageHealNumberAdditionalHeight;//[Offset: 0x138, Size: 0x4] 0x78dc1a5700
	class EDamageNumberWidget* DamageNumberWidgetClass;//[Offset: 0x140, Size: 0x8] 0x78dc117cc0
	class EPoolableWidget* PickItemNumberWidgetClass;//[Offset: 0x148, Size: 0x8] 0x78dc117d60
	WidgetComponentPoolElem[] FreeElements;//[Offset: 0x150, Size: 0x10] 0x78dc117e00
	float LastKillUnusedTime;//[Offset: 0x160, Size: 0x4] 0x78dc1a5800
	int MaxPoolSize;//[Offset: 0x164, Size: 0x4] 0x78dc1a5880
	EDamageNumberWidget*[] DamageNumberWidgets;//[Offset: 0x170, Size: 0x10] 0x78dc117ea0
	int Cfg_FastForwardCountThreshold;//[Offset: 0x180, Size: 0x4] 0x78dc1a5980
	bool bCfg_AlwaysFadeBelow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1] 0x78dc1a5a00
	void OnFightUIGlobalVisibilityChanged(bool visible);// 0xa4f9a44 0x78dc199a80
	static EDrawNumberPoolComponent* GetInstance();// 0xa4f9a10 0x78dc199b60
	bool DrawPickItemInfo(out const GroundItemData Item, out const Vector Location);// 0xa4f9af4 0x78dc199c40
	bool DrawHealNumber(float Number, const Vector locationOrOffset, bool placeOnTheRight, EEntity* drawAboveThisEntity);// 0xa4f9c54 0x78dc199d20
	bool DrawDamageNumber(out const ViewDmgData Damage, const Vector locationOrOffset, bool isVictimPlayer, bool placeOnTheRight, EEntity* drawAboveThisEntity);// 0xa4f9de8 0x78dc199e00
	void CleanUp();// 0xa4f99fc 0x78dc199ee0

--------------------------------
Class: ViewDmgData
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78d361f2e0
	int Attacker;//[Offset: 0x4, Size: 0x4] 0x78dbe2d500
	int Causer;//[Offset: 0x8, Size: 0x4] 0x78dbe2d580
	int Victim;//[Offset: 0xc, Size: 0x4] 0x78dbe2d600
	float Damage;//[Offset: 0x10, Size: 0x4] 0x78dbe2d680
	float[] Damages;//[Offset: 0x18, Size: 0x10] 0x78d361f380
	float OverkillDamage;//[Offset: 0x28, Size: 0x4] 0x78dbe2b680
	bool bDecapitate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78dbe2b700
	bool bImmunity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x78dbe2b780
	bool bCrit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1] 0x78dbe2b800
	bool bDodged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 0x1] 0x78dbe2b880
	bool bMiss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78dbe2b900
	bool bBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78dbe2b980
	bool bLethal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1] 0x78dbe2ba00
	int LethalType;//[Offset: 0x5c, Size: 0x4] 0x78dbe2ba80
	int CastRepeatIndex;//[Offset: 0x60, Size: 0x4] 0x78dbe2bb00
	bool bCastRepeatMaxIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78dbe2bb80

--------------------------------
Class: WidgetComponentPoolElem
	EWidgetComponent* Com;//[Offset: 0x0, Size: 0x8] 0x78dbe19600

--------------------------------
Class: EDrawNumberWidget.EPoolableWidget.UserWidget.Widget.Visual.Object
	EWidgetComponent* OwnerComponent;//[Offset: 0x260, Size: 0x8] 0x78dc1a5380
	WidgetAnimation* AnimAutoPlay;//[Offset: 0x268, Size: 0x8] 0x78dc1a5400
	void DoReclaim();// 0xa4fa6dc 0x78dc1999a0

--------------------------------
Class: EEditorOnlyActor.Actor.Object

--------------------------------
Class: Elevator.EEntity.Pawn.Actor.Object

--------------------------------
Class: EMapObjectComponent.EComponent.ActorComponent.Object
	bool bVerticalMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 0x1] 0x78dc1c9680
	bool bAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123, Size: 0x1] 0x78dc1c9700
	Actor* StaticObject;//[Offset: 0x128, Size: 0x8] 0x78dc1c9780
	Vector SetPos;//[Offset: 0x130, Size: 0xc] 0x78dc1c9800
	void OnViewStateChanged(int StateId);// 0xa50fb14 0x78dc1b90e0
	void OnInit(int CfgId, Actor* E);// 0xa50fbbc 0x78dc1b91c0
	void OnExit();// 0xa50fb00 0x78dc1b92a0

--------------------------------
Class: EMapElevatorComponent.EComponent.ActorComponent.Object
	enum LastState;//[Offset: 0x120, Size: 0x1] 0x78dc11b960
	bool Debug_ShowBoxSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1] 0x78dc1c9b80
	bool Debug_ShowTriggerAreaSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 0x1] 0x78dc1c9c00
	bool Debug_ShowBlockSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b, Size: 0x1] 0x78dc1c9c80
	bool Debug_ShowBtnTriggerCylinder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1] 0x78dc1c9d00

--------------------------------
Class: EMapIconComponent.EComponent.ActorComponent.Object

--------------------------------
Class: ETouchableComponent.EComponent.ActorComponent.Object
	CapsuleComponent* Capsule;//[Offset: 0x120, Size: 0x8] 0x78d7140d00
	void SetActiveEnable(bool isEnable, float distSqr);// 0xa53d6a8 0x78d70fce20
	void OnTouched();// 0xa53d7c0 0x78d70fcf00
	void OnMouseExit();// 0xa53d798 0x78d70fcfe0
	void OnMouseEnter();// 0xa53d7ac 0x78d70fd0c0

--------------------------------
Class: EFashionComponent.EComponent.ActorComponent.Object
	class EFashionFxRule* FashionFxRuleClass;//[Offset: 0x128, Size: 0x8] 0x78dc11a4c0
	int SkillRepeatVfxId;//[Offset: 0x244, Size: 0x4] 0x78dc1a7300
	int SkillRepeatExtVfxId;//[Offset: 0x248, Size: 0x4] 0x78dc1a7380
	<int> CustomSkillRepeatVfxFashionCfgIds;//[Offset: 0x250, Size: 0x50] 0x78dc117c20
	void InvalidateWeapons();// 0xa4fb310 0x78dc1997e0
	void DealWithVfxOnArtResChange();// 0xa4fb324 0x78dc1998c0

--------------------------------
Class: EFashionFxRule.Object
	GameVFXRowData BodyFx;//[Offset: 0x28, Size: 0x250] 0x78dc1a6f80
	GameVFXRowData FashionBodyFx;//[Offset: 0x278, Size: 0x250] 0x78dc1a7000
	GameVFXRowData WeaponRoundVfx;//[Offset: 0x4c8, Size: 0x250] 0x78dc1a7080
	GameVFXRowData WeaponBoxVfx;//[Offset: 0x718, Size: 0x250] 0x78dc1a7100
	GameVFXRowData WeaponBoxTrailVfx;//[Offset: 0x968, Size: 0x250] 0x78dc1a7180
	GameVFXRowData WeaponRoundTrailVfx;//[Offset: 0xbb8, Size: 0x250] 0x78dc1a7200
	GameVFXRowData[] WeaponRoundDotVfx;//[Offset: 0xe08, Size: 0x10] 0x78dc11a420

--------------------------------
Class: EFightNPC.EEntity.Pawn.Actor.Object

--------------------------------
Class: EFigureShadowComponent.EComponent.ActorComponent.Object
	AfterImageActor* AfterImageActor;//[Offset: 0x128, Size: 0x8] 0x78dc1c0180
	void SetMaterialParam(EGhostTrailParameter* Param);// 0xa4fbe50 0x78dc1b5480
	void RequestRemoveShadow();// 0xa4fbef8 0x78dc1b5560
	void RequestAddShadow();// 0xa4fbf0c 0x78dc1b5640
	void RemoveShadow();// 0xa4fbf20 0x78dc1b1d60
	void AddShadow();// 0xa4fbf34 0x78dc1b1e40

--------------------------------
Class: ENPCComponent.EComponent.ActorComponent.Object
	int NpcID;//[Offset: 0x124, Size: 0x4] 0x78dc1cef00
	int dynId;//[Offset: 0x128, Size: 0x4] 0x78dc1cef80
	int UniqueId;//[Offset: 0x12c, Size: 0x4] 0x78dc1cf000
	bool NeedDestory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x78dc1cf080
	int MainHandWeaponType;//[Offset: 0x134, Size: 0x4] 0x78dc1cf100
	int MainHandWeaponResource;//[Offset: 0x138, Size: 0x4] 0x78dc1cf180
	int OffHandWeaponType;//[Offset: 0x13c, Size: 0x4] 0x78dc1cf200
	int OffHandWeaponResource;//[Offset: 0x140, Size: 0x4] 0x78dc1cf280
	bool IsFightNpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1] 0x78dc1cf300
	float NextIdle2Interval;//[Offset: 0x148, Size: 0x4] 0x78dc1cf380
	float PlayIdle2ElapseTime;//[Offset: 0x14c, Size: 0x4] 0x78dc1cf400
	bool IsPlayIdle2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1] 0x78dc1cf480
	bool bFadeOutOnDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1] 0x78dc1cf500
	FName PlayAnim(enum stage);// 0xa517a8c 0x78dc1be240
	void OnNPCSelected();// 0xa517b70 0x78dc1be320
	FName OnNPCLeaveScene();// 0xa517b3c 0x78dc1be400
	void OnNPCEnterScene(int CfgId, bool PlayAnim);// 0xa517b84 0x78dc1be4e0
	void ChangeLogicNpcWeapon();// 0xa517a78 0x78dc1be5c0
	void ChangeLocalNpcWeapon();// 0xa517a64 0x78dc1be6a0

--------------------------------
Class: EOverheadDialogComponent.EComponent.ActorComponent.Object
	class EPoolableWidget* OverheadWidgetClass;//[Offset: 0x120, Size: 0x8] 0x78dc11ace0
	EWidgetComponent* OwnerComponent;//[Offset: 0x128, Size: 0x8] 0x78dc1cec80
	Vector Offset;//[Offset: 0x130, Size: 0xc] 0x78dc1ced00
	void OnBecomeDead();// 0xa520ff8 0x78dc1bdfa0

--------------------------------
Class: ERoleAppearComponent.EComponent.ActorComponent.Object
	int AppearConfigId;//[Offset: 0x124, Size: 0x4] 0x78d70edf00
	int AppearStep;//[Offset: 0x128, Size: 0x4] 0x78d70edf80
	int NextStep;//[Offset: 0x12c, Size: 0x4] 0x78d70ee000
	float[] StepTime;//[Offset: 0x130, Size: 0x10] 0x78dc11d8a0
	float WaitTime;//[Offset: 0x140, Size: 0x4] 0x78d70ee100
	Vector MoveSpeed;//[Offset: 0x144, Size: 0xc] 0x78d70ee180
	Vector EndPos;//[Offset: 0x150, Size: 0xc] 0x78d70ee200
	SceneComponent* EntityRoot;//[Offset: 0x160, Size: 0x8] 0x78d70ee280
	void MoveToEndPos(float DeltaTime);// 0xa52ae74 0x78d70f4300
	void InitData(int appearId, int appearIndex, int resourceId, out const Vector Pos);// 0xa52af54 0x78d70f43e0
	Vector GetStartPos();// 0xa52af1c 0x78d70f44c0

--------------------------------
Class: ERoleUIComponent.EComponent.ActorComponent.Object
	EWidgetComponent* RoleUI;//[Offset: 0x120, Size: 0x8] 0x78d7120280
	EHpBarWidget* HpBarWidget;//[Offset: 0x128, Size: 0x8] 0x78d7120300
	EHpBarPlayerBotWidget* HpBarPlayerBotWidget;//[Offset: 0x130, Size: 0x8] 0x78d7120380
	class EPoolableWidget* hpBarWidgetClass;//[Offset: 0x138, Size: 0x8] 0x78dc11d4e0
	class EMapGameplayGodOfMachineMonsterOverheadWidget* MonsterOverheadIconWidgetClass;//[Offset: 0x140, Size: 0x8] 0x78dc11d580
	bool bIsLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1] 0x78d7120400
	bool bUpdateBossHpBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1] 0x78d7120480
	bool bBossHpBarIsPossibilyBeingDisplayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1] 0x78d7120500
	int BossHpBarBossCfgId;//[Offset: 0x160, Size: 0x4] 0x78d7120580
	float Cfg_UpdateBossHpBarDistanceSquared;//[Offset: 0x164, Size: 0x4] 0x78d7120600
	ERoleComponent* BossHpBarBossRole;//[Offset: 0x168, Size: 0x8] 0x78d7120680
	float Cfg_DrawHealNumberInterval;//[Offset: 0x170, Size: 0x4] 0x78d7120700
	float LastDrawHealNumberElapsedTime;//[Offset: 0x174, Size: 0x4] 0x78d7120780
	float HealNumberToDraw;//[Offset: 0x178, Size: 0x4] 0x78d7120800
	float DamageNumberAccumulatedFraction;//[Offset: 0x17c, Size: 0x4] 0x78d7120880
	float Cfg_DrawDamageOverTimeNumberInterval;//[Offset: 0x180, Size: 0x4] 0x78d7120900
	float LastDamageOverTimeNumberElapsedTime;//[Offset: 0x184, Size: 0x4] 0x78d7120980
	float DamageOverTimeToDraw;//[Offset: 0x188, Size: 0x4] 0x78d7120a00
	bool bHasAnyDamageOverTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 0x1] 0x78d7120a80
	bool bLastDamageNumberIsOnTheLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d, Size: 0x1] 0x78d7120b00
	bool bLastHealNumberIsOnTheLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18e, Size: 0x1] 0x78d7120b80
	bool bProcessMapGameplayGodOfMachine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f, Size: 0x1] 0x78d7120c00
	int DynIdMapGameplayGodOfMachineMonsterOverheadWidget;//[Offset: 0x190, Size: 0x4] 0x78d7120c80
	void SetHpBarWidgetClass(class EPoolableWidget hpBarWidgetClass);// 0xa533c48 0x78d70f6520
	void ProcessLogicData(float DeltaTime);// 0xa533da0 0x78d70f6600
	void PlayInsufficientMpFeedback();// 0xa533c34 0x78d70f66e0
	void PlayInsufficientHpFeedback();// 0xa533c20 0x78d70f67c0
	void OnIsPlayerChanged(bool IsPlayerNow);// 0xa533b70 0x78d70f68a0
	void OnFightUIGlobalVisibilityChanged(bool visible);// 0xa533cf0 0x78d70f6980
	void OnBecomeDead();// 0xa533b5c 0x78d70f6a60

--------------------------------
Class: EHpBarWidget.EPoolableWidget.UserWidget.Widget.Visual.Object
	EProgressBar[] ProgressBars;//[Offset: 0x260, Size: 0x10] 0x78dc1192a0
	void UpdateProgessBars();// 0xa503fc0 0x78dc1b6280
	void UpdateHpBar(out const RoleLogic Info, float pendingHealHp, float pendingHealMp);// 0xa5043b4 0x78dc1b6360
	void SetProgressBarProgress(Image* imgBar, float perc, int indexOfProgressBars);// 0xa503fd4 0x78dc1b6440
	void SetMonsterHeadAvatar(Texture2D* Texture);// 0xaa7cd18 0x78dc1b6520
	float ClampDividePercent(float A, float B);// 0xa5041c4 0x78dc1b6600
	float ClampDivide(float A, float B);// 0xa5042bc 0x78dc1b66e0
	float CalcDisplayRatio(float Percent);// 0xa504114 0x78dc1b67c0

--------------------------------
Class: RoleLogic
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe2ce80
	int DeadCauser;//[Offset: 0x4, Size: 0x4] 0x78dbe2cf00
	RoleInfo Info;//[Offset: 0x8, Size: 0x24] 0x78dbe2d400
	ViewDmgData[] Damages;//[Offset: 0x30, Size: 0x10] 0x78d361f420
	float HealAmount;//[Offset: 0x40, Size: 0x4] 0x78dbe2bc80
	bool bHasTickedHeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78dbe2bd00
	bool bFriendly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x78dbe2bd80
	bool bIsDeadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1] 0x78dbe2be00
	bool bIsElite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 0x1] 0x78dbe2be80
	bool bIsBoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78dbe2bf00
	bool bIsPlayerMinion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x78dbe2bf80
	bool bIsInWoodStakeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x78dbe2c000
	bool bWantToHideOverheadHpBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1] 0x78dbe2c080
	bool bWantToHideScreenTopHpBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78dbe2c100

--------------------------------
Class: RoleInfo
	int FirstSyncLogicFrame;//[Offset: 0x0, Size: 0x4] 0x78dbe2cf80
	float Hp;//[Offset: 0x4, Size: 0x4] 0x78dbe2d000
	float HpMax;//[Offset: 0x8, Size: 0x4] 0x78dbe2d080
	float HpReserved;//[Offset: 0xc, Size: 0x4] 0x78dbe2d100
	float Mp;//[Offset: 0x10, Size: 0x4] 0x78dbe2d180
	float MpMax;//[Offset: 0x14, Size: 0x4] 0x78dbe2d200
	float MpReserved;//[Offset: 0x18, Size: 0x4] 0x78dbe2d280
	float Shield;//[Offset: 0x1c, Size: 0x4] 0x78dbe2d300
	float ShieldMax;//[Offset: 0x20, Size: 0x4] 0x78dbe2d380

--------------------------------
Class: EHpBarPlayerBotWidget.EHpBarWidget.EPoolableWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* CanvasMain;//[Offset: 0x270, Size: 0x8] 0x78dc1c5980
	ProgressBar* ProgressShieldCur;//[Offset: 0x278, Size: 0x8] 0x78dc1c5a00
	ProgressBar* ProgressHpCur;//[Offset: 0x280, Size: 0x8] 0x78dc1c5a80
	ProgressBar* ProgressHp2Heal;//[Offset: 0x288, Size: 0x8] 0x78dc1c5b00
	ProgressBar* ProgressMpCur;//[Offset: 0x290, Size: 0x8] 0x78dc1c5b80
	ProgressBar* ProgressMp2Heal;//[Offset: 0x298, Size: 0x8] 0x78dc1c5c00
	ProgressBar* ProgressHpResv;//[Offset: 0x2a0, Size: 0x8] 0x78dc1c5c80
	ProgressBar* ProgressMpResv;//[Offset: 0x2a8, Size: 0x8] 0x78dc1c5d00
	UITextBlock* ShieldTitle;//[Offset: 0x2b0, Size: 0x8] 0x78dc1c5d80
	UITextBlock* HpResvTitle;//[Offset: 0x2b8, Size: 0x8] 0x78dc1c5e00
	UITextBlock* HpTitle;//[Offset: 0x2c0, Size: 0x8] 0x78dc1c5e80
	UITextBlock* MpResvTitle;//[Offset: 0x2c8, Size: 0x8] 0x78dc1c5f00
	UITextBlock* MpTitle;//[Offset: 0x2d0, Size: 0x8] 0x78dc1c5f80
	UITextBlock* ShieldValue;//[Offset: 0x2d8, Size: 0x8] 0x78dc1c6000
	UITextBlock* HpResvValue;//[Offset: 0x2e0, Size: 0x8] 0x78dc1c6080
	UITextBlock* HpValue;//[Offset: 0x2e8, Size: 0x8] 0x78dc1c6100
	UITextBlock* MpResvValue;//[Offset: 0x2f0, Size: 0x8] 0x78dc1c6180
	UITextBlock* MpValue;//[Offset: 0x2f8, Size: 0x8] 0x78dc1c6200
	Vector2D PercToProgressMargins;//[Offset: 0x300, Size: 0x8] 0x78dc1c6280
	Vector2D PercToProgressShieldMargins;//[Offset: 0x308, Size: 0x8] 0x78dc1c6300
	WidgetAnimation* HpBarPlayerBotAnim_Mp;//[Offset: 0x310, Size: 0x8] 0x78dc1c4280
	WidgetAnimation* HpBarPlayerBotAnim_Hp;//[Offset: 0x318, Size: 0x8] 0x78dc1c4300

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x1a0] 0x78d7282800
	SlateWidgetStyleAsset* Style;//[Offset: 0x2a8, Size: 0x8] 0x78d7282880
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2b0, Size: 0x8] 0x78d7282900
	SlateBrushAsset* FillImage;//[Offset: 0x2b8, Size: 0x8] 0x78d7282980
	SlateBrushAsset* MarqueeImage;//[Offset: 0x2c0, Size: 0x8] 0x78d7282a00
	float Percent;//[Offset: 0x2c8, Size: 0x4] 0x78d7282a80
	byte BarFillType;//[Offset: 0x2cc, Size: 0x1] 0x78d7282b00
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1] 0x78d7282b80
	Vector2D BorderPadding;//[Offset: 0x2d0, Size: 0x8] 0x78d7282c00
	delegate PercentDelegate;//[Offset: 0x2d8, Size: 0x10] 0x78d7282c80
	LinearColor FillColorAndOpacity;//[Offset: 0x2e8, Size: 0x10] 0x78d7282d00
	delegate FillColorAndOpacityDelegate;//[Offset: 0x2f8, Size: 0x10] 0x78d7282d80
	void SetPercent(float InPercent);// 0xbb0de2c 0x78d7259540
	void SetIsMarquee(bool InbIsMarquee);// 0xbb0dcd4 0x78d7259620
	void SetFillColorAndOpacity(LinearColor InColor);// 0xbb0dd84 0x78d7259700

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x88] 0x78dbe43680
	SlateBrush FillImage;//[Offset: 0x90, Size: 0x88] 0x78dbe43700
	SlateBrush MarqueeImage;//[Offset: 0x118, Size: 0x88] 0x78dbe43780

--------------------------------
Class: EMapGameplayGodOfMachineMonsterOverheadWidget.UserWidget.Widget.Visual.Object
	void SwitchIcon(enum iconSwitch);// 0xaa7cd18 0x78dc1b9380

--------------------------------
Class: ERoleShaderComponent.EComponent.ActorComponent.Object
	<int,MaterialParameterTimeline> Timelines;//[Offset: 0x128, Size: 0x50] 0x78d7100c40
	void SetTextureMaterialParameter(MeshComponent* MeshComponent, int MaterialIndex, out const FName ParamName, Texture* Texture);// 0xa53343c 0x78d70f6b40
	void PlayMaterialParameterTimelineEffect(int vfxCfgId, int Input, bool terminateTransition);// 0xa5335e0 0x78d70f6c20
	bool OverrideMaterial(out const RoleShaderMeshes meshes, int timelineDynaId, MaterialInterface* mat, int Index);// 0xa5330c0 0x78d70f6d00
	bool OverrideAllMaterials(out const RoleShaderMeshes meshes, int timelineDynaId, MaterialInterface* mat);// 0xa5332a0 0x78d70f6de0
	void InvalidateAllMaterialParameterTimelineEffectsRendering();// 0xa5335cc 0x78d70f6ec0

--------------------------------
Class: MaterialParameterTimeline
	EMaterialParameterTimeline* MPTClassDefaultObject;//[Offset: 0x0, Size: 0x8] 0x78dbe1b280
	float Position;//[Offset: 0x8, Size: 0x4] 0x78dbe1b300
	float Destination;//[Offset: 0xc, Size: 0x4] 0x78dbe1b380
	bool bOnGoingTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78dbe1b400
	bool bForceTerminate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1] 0x78dbe1b480
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1] 0x78dbe1b500
	bool bDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1] 0x78dbe1b580

--------------------------------
Class: RoleShaderMeshes
	EAnimeComponent* Anime;//[Offset: 0x0, Size: 0x8] 0x78dbe1f780
	EMeshComponent* mesh;//[Offset: 0x8, Size: 0x8] 0x78dbe1d700
	StaticMeshComponent*[] RoleAttachmentMeshComponents;//[Offset: 0x10, Size: 0x10] 0x78d361aa60
	SkinnedMeshComponent*[] RoleAttachmentSkinnedMeshComponents;//[Offset: 0x20, Size: 0x10] 0x78d361ab00
	MeshComponent*[] UnrealActorMeshComponent;//[Offset: 0x30, Size: 0x10] 0x78d361aba0
	MeshComponent*[] AllMeshComponents;//[Offset: 0x40, Size: 0x10] 0x78d361ac40

--------------------------------
Class: EFightPlayerController.PlayerController.Controller.Actor.Object
	void OnPinch(float AxisValue);// 0xa4fbac4 0x78dc1b1f20

--------------------------------
Class: EGameplaySettings.Object
	bool bAllowCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dc1c1f00
	bool bAllowPlayerInstigatedCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78dc1c1f80
	bool bShowDamageNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78dc1c2000
	bool bCombineDamageNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1] 0x78dc1c2080
	bool bShaderDamageNumberWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78dc1c2100
	bool bAllowAutoHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x78dc1c0080
	float CameraShakeScale;//[Offset: 0x30, Size: 0x4] 0x78dc1c0100

--------------------------------
Class: EGhost.EEntity.Pawn.Actor.Object

--------------------------------
Class: EGhostMinion.EEntity.Pawn.Actor.Object

--------------------------------
Class: EGroundEffect.EEntity.Pawn.Actor.Object

--------------------------------
Class: EGroundItemComponent.EComponent.ActorComponent.Object
	HomingProjectileComponent* HomingProjectileComponent;//[Offset: 0x128, Size: 0x8] 0x78dc1c1200
	GroundItemData Data;//[Offset: 0x130, Size: 0xc0] 0x78dc1c1280
	EEntity* pickerEntity;//[Offset: 0x1f8, Size: 0x8] 0x78dc1c1300
	bool bIsPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1] 0x78dc1c1380
	bool bIsApproached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1] 0x78dc1c1400
	int[] GroundItemAliveFxCfgIds;//[Offset: 0x208, Size: 0x10] 0x78dc1193e0
	int[] GroundItemApproachedFxCfgIds;//[Offset: 0x218, Size: 0x10] 0x78dc119480
	int[] GroundItemLeftFxCfgIds;//[Offset: 0x228, Size: 0x10] 0x78dc119520
	int[] AliveFxDynIds;//[Offset: 0x248, Size: 0x10] 0x78dc1195c0
	int DropStyle;//[Offset: 0x270, Size: 0x4] 0x78dc1c1680
	void OnSphereReachedPicker();// 0xa4fd7a4 0x78dc1b4ae0
	void OnPickedUp(EEntity* pickerEntity);// 0xa4fd7b8 0x78dc1b4bc0
	void OnLeft();// 0xa4fd860 0x78dc1b4ca0
	void OnBegin();// 0xa4fd888 0x78dc1b4d80
	void OnApproached();// 0xa4fd874 0x78dc1b4e60
	void InitData(out const GroundItemData Data);// 0xa4fd89c 0x78dc1b4f40
	void HandleTimerVisualCandyOnEnd();// 0xa4fd790 0x78dc1b5020
	void HandleTimerVisualCandyOnDelete();// 0xa4fd77c 0x78dc1b5100
	void HandleTimerDropMgrRelease();// 0xa4fd768 0x78dc1b51e0

--------------------------------
Class: HomingProjectileComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	delegate OnHomingProjectileGetCloseEnough;//[Offset: 0x1d0, Size: 0x10] 0x78d35a6d80
	Vector2D SpeedClampDistSquareInput;//[Offset: 0x1e0, Size: 0x8] 0x78d35a6e00
	Vector2D SpeedClampSpeedCoefOutput;//[Offset: 0x1e8, Size: 0x8] 0x78d35a6e80
	float speedClampMaxSpeed;//[Offset: 0x1f0, Size: 0x4] 0x78d35a6f00
	float minSpeedFasterThanHomingTarget;//[Offset: 0x1f4, Size: 0x4] 0x78d35a6f80
	FName HomingTargetSocketName;//[Offset: 0x1f8, Size: 0x8] 0x78d35a7000
	MeshComponent* HomingTargetComponentAsMeshComponent;//[Offset: 0x200, Size: 0x8] 0x78d35a7080
	EMoveComponent* HomingTargetEMoveComponent;//[Offset: 0x208, Size: 0x8] 0x78d35a7100
	float closeEnoughDistSquare;//[Offset: 0x210, Size: 0x4] 0x78d35a7180
	void SetSpeedClamp(out const Vector2D inDistSquareInput, out const Vector2D inSpeedCoefOutput, float speedClampMaxSpeed, float minSpeedFasterThanHomingTarget);// 0xa56a10c 0x78cd9ae5c0
	void SetHomingTarget(EEntity* homingTarget, float closeEnoughDistSquare, FName SocketName);// 0xa569fcc 0x78cd9ae6a0
	void OnHomingProjectileGetCloseEnoughDelegate__DelegateSignature();// 0xaa7cd18 0x78cd9aadc0
	void ClampSpeed(float distSquared);// 0xa569f24 0x78cd9aaea0

--------------------------------
Class: EGuideLineItem.EEntity.Pawn.Actor.Object

--------------------------------
Class: EGuildeLineComponent.EComponent.ActorComponent.Object
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x128, Size: 0x8] 0x78dc1c2a00
	ParticleSystemComponent* ParticleLine;//[Offset: 0x130, Size: 0x8] 0x78dc1c2a80
	ParticleSystem* DefualtParticle;//[Offset: 0x138, Size: 0x8] 0x78dc1c2b00
	ParticleSystem* DefualtParticleLine;//[Offset: 0x140, Size: 0x8] 0x78dc1c2b80
	Vector TargetPoint;//[Offset: 0x148, Size: 0xc] 0x78dc1c2c00
	void SetTargetPoint(Vector Point);// 0xa4fe8a4 0x78dc1b45a0

--------------------------------
Class: EHpBarPlayerWidget.EHpBarWidget.EPoolableWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* CanvasMain;//[Offset: 0x270, Size: 0x8] 0x78dc1c4380
	CanvasPanel* CanvasPanel_Main;//[Offset: 0x278, Size: 0x8] 0x78dc1c4400
	ProgressBar* ProgressShieldCur;//[Offset: 0x280, Size: 0x8] 0x78dc1c4480
	ProgressBar* ProgressHpCur;//[Offset: 0x288, Size: 0x8] 0x78dc1c4500
	ProgressBar* ProgressHp2Heal;//[Offset: 0x290, Size: 0x8] 0x78dc1c4580
	ProgressBar* ProgressMpCur;//[Offset: 0x298, Size: 0x8] 0x78dc1c4600
	Image* ImageHpResv;//[Offset: 0x2a0, Size: 0x8] 0x78dc1c4680
	Image* ImageMp2Heal;//[Offset: 0x2a8, Size: 0x8] 0x78dc1c4700
	Image* ImageMpResv;//[Offset: 0x2b0, Size: 0x8] 0x78dc1c4780
	Overlay* OverlayHpBar;//[Offset: 0x2b8, Size: 0x8] 0x78dc1c4800
	Overlay* OverlayShieldBar;//[Offset: 0x2c0, Size: 0x8] 0x78dc1c4880
	Image* ImageHpBarLine;//[Offset: 0x2c8, Size: 0x8] 0x78dc1c4900
	Vector2D PercToProgressMargins;//[Offset: 0x2d0, Size: 0x8] 0x78dc1c4980
	WidgetAnimation* AnimInsufficientMpFeedback;//[Offset: 0x2d8, Size: 0x8] 0x78dc1c4a00
	WidgetAnimation* AnimInsufficientHpFeedback;//[Offset: 0x2e0, Size: 0x8] 0x78dc1c4a80

--------------------------------
Class: EHpBarMonsterWidget.EHpBarWidget.EPoolableWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* CanvasMain;//[Offset: 0x270, Size: 0x8] 0x78dc1c5600
	Image* ImageHpCur;//[Offset: 0x278, Size: 0x8] 0x78dc1c5680
	Image* ImageHpCurFriendly;//[Offset: 0x280, Size: 0x8] 0x78dc1c5700
	Image* ImageHp2Heal;//[Offset: 0x288, Size: 0x8] 0x78dc1c5780
	Image* ImageShieldCur;//[Offset: 0x290, Size: 0x8] 0x78dc1c5800
	Vector2D PercToProgressMargins;//[Offset: 0x298, Size: 0x8] 0x78dc1c5880
	bool bHasFriendlyBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x78dc1c5900

--------------------------------
Class: EHpBarMonsterBossWidget.EHpBarMonsterWidget.EHpBarWidget.EPoolableWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: EHpBarMonsterEliteWidget.EHpBarWidget.EPoolableWidget.UserWidget.Widget.Visual.Object
	Vector2D PercToProgressMargins;//[Offset: 0x270, Size: 0x8] 0x78dc1c7000
	bool bHasFriendlyBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x78dc1c7080
	CanvasPanel* CanvasMain_Bar;//[Offset: 0x280, Size: 0x8] 0x78dc1c7100
	Image* ImageHpCur;//[Offset: 0x288, Size: 0x8] 0x78dc1c7180
	Image* ImageHpCurFriendly;//[Offset: 0x290, Size: 0x8] 0x78dc1c7200
	Image* ImageHp2Heal;//[Offset: 0x298, Size: 0x8] 0x78dc1c7280
	Image* ImageShieldCur;//[Offset: 0x2a0, Size: 0x8] 0x78dc1c7300
	Image* ImageBarBG;//[Offset: 0x2a8, Size: 0x8] 0x78dc1c7380
	Image* ImageIcon;//[Offset: 0x2b0, Size: 0x8] 0x78dc1c5300
	Image* ImageIconBG;//[Offset: 0x2b8, Size: 0x8] 0x78dc1c5380
	Image* ImageIconCentered;//[Offset: 0x2c0, Size: 0x8] 0x78dc1c5400
	Image* ImageIconCenteredBG;//[Offset: 0x2c8, Size: 0x8] 0x78dc1c5480
	void ShowCenterIcon(bool show);// 0xa5052c0 0x78dc1b60c0
	void ShowBar(bool show);// 0xa505210 0x78dc1b61a0

--------------------------------
Class: EHpBarMonsterWoodStakeWidget.EHpBarMonsterWidget.EHpBarWidget.EPoolableWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: EHpBarMapObjectGodOfMachineWidget.EHpBarWidget.EPoolableWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* CanvasMain;//[Offset: 0x270, Size: 0x8] 0x78dc1c6d80
	Image* ImageHpCur;//[Offset: 0x278, Size: 0x8] 0x78dc1c6e00
	Vector2D PercToProgressMargins;//[Offset: 0x280, Size: 0x8] 0x78dc1c6e80
	void SetCustomProgress(float Progress, bool display);// 0xa505750 0x78dc1b5fe0

--------------------------------
Class: EIndependPresentComponent.EComponent.ActorComponent.Object
	SceneComponent* EntityRoot;//[Offset: 0x120, Size: 0x8] 0x78dc1c6c80

--------------------------------
Class: EInteractiveComponent.EComponent.ActorComponent.Object
	TimerHandle TouchWaitHandle;//[Offset: 0x130, Size: 0x8] 0x78dc1c6b80
	delegate InteractiveChanged;//[Offset: 0x138, Size: 0x10] 0x78dc1c6c00
	void OnInteractiveInterrupt();// 0xa506048 0x78dc1b5d40
	void OnInteractiveFinish();// 0xa506034 0x78dc1b5e20
	void OnInteractiveBegin();// 0xa50605c 0x78dc1b5f00

--------------------------------
Class: EInteractiveItem.EEntity.Pawn.Actor.Object

--------------------------------
Class: EMapCollectorComponent.EComponent.ActorComponent.Object
	TimerHandle DelyFinishHandle;//[Offset: 0x138, Size: 0x8] 0x78dc1c8c00
	void UpdateTouchIconVisible();// 0xa50c964 0x78dc1ba180
	void SetWeaponVisible(bool IsVisible);// 0xa50c8b4 0x78dc1ba260
	void RequestRemove();// 0xa50c978 0x78dc1ba340
	void PlayCollectPlayerAnim(bool playBegin, bool needLoop);// 0xa50c98c 0x78dc1ba420
	void OnCollectPendingFinish();// 0xa50ca98 0x78dc1ba500
	void OnCollectorInteractiveChanged(int uid, int status);// 0xa50cac0 0x78dc1ba5e0
	void OnCollectInterrupt();// 0xa50caac 0x78dc1ba6c0
	void OnCollectFinish();// 0xa50ca84 0x78dc1ba7a0
	void CheckGamePlay();// 0xa50c8a0 0x78dc1ba880

--------------------------------
Class: EInteractiveNPC.EEntity.Pawn.Actor.Object

--------------------------------
Class: ELaser.EEntity.Pawn.Actor.Object

--------------------------------
Class: ELastedEffect.EEntity.Pawn.Actor.Object

--------------------------------
Class: ELevelCameraEffect.EEntity.Pawn.Actor.Object

--------------------------------
Class: ELevelCameraEffectComponent.EComponent.ActorComponent.Object
	int[] CurrentVfxIds;//[Offset: 0x120, Size: 0x10] 0x78dc119200
	void StopCameraVfx(int vfxDynaId);// 0xa506ca0 0x78dc1b5aa0
	void StopAllCameraVfx();// 0xa506c8c 0x78dc1b5b80
	int PlayCameraVfx(int vfxCfgId);// 0xa506d48 0x78dc1b5c60

--------------------------------
Class: ELevelSequence.Object
	int ConfigId;//[Offset: 0x28, Size: 0x4] 0x78dc1c7d00
	int SequenceDynId;//[Offset: 0x2c, Size: 0x4] 0x78dc1c7d80
	float Duration;//[Offset: 0x30, Size: 0x4] 0x78dc1c7e00
	bool bSkipPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x78dc1c7e80
	bool bStopPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x78dc1c7f00
	bool bFinishPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1] 0x78dc1c7f80
	UserWidget* SkipWidget;//[Offset: 0x38, Size: 0x8] 0x78dc1c8000
	LevelSequencePlayer* LevelSequencePlayer;//[Offset: 0x40, Size: 0x8] 0x78dc1c8080
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x48, Size: 0x8] 0x78dc1c8100
	TorchAuidoSeqeunceActor* SequenceAudioRef;//[Offset: 0x50, Size: 0x8] 0x78dc1c8180
	class UserWidget* SkipWidgetClass;//[Offset: 0x58, Size: 0x8] 0x78dc119160
	void ShowUI();// 0xa507a84 0x78dc1b7780
	void ShowPortal(bool toAll);// 0xa507970 0x78dc1b7860
	void ShowPlayer();// 0xa507a5c 0x78dc1b7940
	void ShowNpc();// 0xa50748c 0x78dc1b7a20
	void ShowMonster();// 0xa507a34 0x78dc1b7b00
	void ShowMapObject(bool toAll);// 0xa507550 0x78dc1b7be0
	void ShowInteractiveItem(bool toAll);// 0xa5076b0 0x78dc1b7cc0
	void ShowCustomTrap(bool toAll);// 0xa507810 0x78dc1b7da0
	void SetCfgId(int CfgId, int dynId);// 0xa507be0 0x78dc1b7e80
	void RestoreCameraView(float maxBlendTime);// 0xa5073bc 0x78dc1b7f60
	void ResetorePPSetings();// 0xa507394 0x78dc1b8040
	void RecoverMatineeTimeDilation();// 0xa5071c0 0x78dc1b8120
	void RebindNPCObject(int NpcID, FString bindName);// 0xa50727c 0x78dc1b8200
	void PauseNPCAI(int pauseAI);// 0xa5071d4 0x78dc1b82e0
	void OnStopLevelSequence();// 0xa507b90 0x78dc1b83c0
	void OnStart();// 0xa507aac 0x78dc1b84a0
	void OnSkipLevelSequence();// 0xa507ac0 0x78dc1b8580
	void OnPlayLevelSequence();// 0xa507ba4 0x78dc1b8660
	void OnLevelSequencePlayerCameraCut(CameraComponent* CameraComponent);// 0xa507ae8 0x78dc1b8740
	void OnFinishedLevelSequence();// 0xa507ad4 0x78dc1b8820
	void OnComplete();// 0xa507a98 0x78dc1b8900
	void ModifiyCameraView();// 0xa507464 0x78dc1b89e0
	void HideUI();// 0xa507a70 0x78dc1b8ac0
	void HidePortal(bool toAll);// 0xa5078c0 0x78dc1b8ba0
	void HidePlayer();// 0xa507a48 0x78dc1b8c80
	void HideNpc();// 0xa507478 0x78dc1b8d60
	void HideMonster();// 0xa507a20 0x78dc1b8e40
	void HideMapObject(bool toAll);// 0xa5074a0 0x78dc1b8f20
	void HideInteractiveItem(bool toAll);// 0xa507600 0x78dc1b9000
	void HideCustomTrap(bool toAll);// 0xa507760 0x78dc1b5720
	void CreateSkipWidget();// 0xa507bcc 0x78dc1b5800
	void CreateLevelSequence();// 0xa507bb8 0x78dc1b58e0
	void CachePPSetiongs();// 0xa5073a8 0x78dc1b59c0

--------------------------------
Class: TorchAuidoSeqeunceActor.Actor.Object
	delegate OnPlayBegin;//[Offset: 0x220, Size: 0x10] 0x78d71d0200
	delegate OnPlayEnd;//[Offset: 0x230, Size: 0x10] 0x78d71d0280
	AkAudioEvent* AkEvent_SeqeunceBegin;//[Offset: 0x240, Size: 0x8] 0x78d71d0300
	AkAudioEvent* AkEvent_SeqeunceEnd;//[Offset: 0x248, Size: 0x8] 0x78d71d0380
	void OnSeqeunceEndPlay();// 0xa590dfc 0x78d71c7da0
	void OnSeqeunceBeginPlay();// 0xa590e10 0x78d71c7e80

--------------------------------
Class: ELightComponent.EComponent.ActorComponent.Object
	PointLightComponent* PointLight;//[Offset: 0x128, Size: 0x8] 0x78dc1c7980
	MaterialParameterCollection* MPCActor;//[Offset: 0x130, Size: 0x8] 0x78dc1c7a00
	MaterialParameterCollection* MPCCapture;//[Offset: 0x138, Size: 0x8] 0x78dc1c7a80
	MaterialParameterCollectionInstance* InstMPCActor;//[Offset: 0x140, Size: 0x8] 0x78dc1c7b00
	MaterialParameterCollectionInstance* InstMPCCapture;//[Offset: 0x148, Size: 0x8] 0x78dc1c7b80
	void SetUpPropertyAsCharOverheadSpotLight();// 0xa508b00 0x78dc1b7400
	void OnIsPlayerChanged(bool IsPlayerNow);// 0xa508994 0x78dc1b74e0
	void DectivateLight();// 0xa508a44 0x78dc1b75c0
	void ActivateLight(SceneComponent* SceneComponent);// 0xa508a58 0x78dc1b76a0

--------------------------------
Class: ELogicPosComponent.EComponent.ActorComponent.Object
	StaticMeshComponent* StaticMesh;//[Offset: 0x128, Size: 0x8] 0x78dc1c7780
	StaticMesh* mesh;//[Offset: 0x130, Size: 0x8] 0x78dc1c7800
	MaterialInterface* Mat0;//[Offset: 0x138, Size: 0x8] 0x78dc1c7880
	MaterialInterface* Mat1;//[Offset: 0x140, Size: 0x8] 0x78dc1c7900

--------------------------------
Class: EMapArtifact.EEntity.Pawn.Actor.Object

--------------------------------
Class: EMapArtifactComponent.EComponent.ActorComponent.Object
	bool bCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x78dc1c7500
	AnimMontage* CreateMontage;//[Offset: 0x130, Size: 0x28] 0x78dc1c7580
	AnimMontage* ExitMontage;//[Offset: 0x158, Size: 0x28] 0x78dc1c7600
	void OnInit(int CfgId);// 0xa50b9a8 0x78dc1bab20
	float OnExit();// 0xa50b960 0x78dc1bac00
	void OnCreate();// 0xa50b994 0x78dc1bace0

--------------------------------
Class: EMapCameraTriggerPoint.EEntity.Pawn.Actor.Object

--------------------------------
Class: EMapCameraVolumeComponent.EComponent.ActorComponent.Object
	ShapeComponent* ShapeComponent;//[Offset: 0x128, Size: 0x8] 0x78dc1c9000
	ExponentialHeightFog* FogRef;//[Offset: 0x154, Size: 0x8] 0x78dc1c9080
	void OnOverlapEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xa50bfb8 0x78dc1ba960
	void OnOverlapBegin(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xa50c140 0x78dc1baa40

--------------------------------
Class: EMapCheckPointComponent.EComponent.ActorComponent.Object
	AnimMontage* IdleMontage;//[Offset: 0x148, Size: 0x28] 0x78dc1c8f00
	AnimMontage* ActiveMontage;//[Offset: 0x170, Size: 0x28] 0x78dc1c8f80

--------------------------------
Class: EMapCustomTrap.EEntity.Pawn.Actor.Object
	EQAInfoComponent* QAInfo;//[Offset: 0x570, Size: 0x8] 0x78dc1c8b80

--------------------------------
Class: EQAInfoComponent.EComponent.ActorComponent.Object
	uint32 InfoType;//[Offset: 0x120, Size: 0x4] 0x78d70ee600
	float HistorySaveTime;//[Offset: 0x124, Size: 0x4] 0x78d70ee680
	bool bEnableSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x78d70ee700
	int EtyId;//[Offset: 0x12c, Size: 0x4] 0x78d70ec680
	bool bIsEtyActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x78d70ec700
	bool bIsEtyDelayedActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1] 0x78d70ec780
	bool bIsEtyVirtualRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132, Size: 0x1] 0x78d70ec800
	bool bIsEtyGridValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x133, Size: 0x1] 0x78d70ec880
	bool bIsEtyAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1] 0x78d70ec900
	bool bIsEtyValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 0x1] 0x78d70ec980
	int CfgId;//[Offset: 0x138, Size: 0x4] 0x78d70eca00
	enum CreateSourceType;//[Offset: 0x13c, Size: 0x4] 0x78dc11d940
	int MonsterPointId;//[Offset: 0x140, Size: 0x4] 0x78d70ecb00
	int npcUniqueId;//[Offset: 0x144, Size: 0x4] 0x78d70ecb80
	QAIdWithName[] Affixes;//[Offset: 0x148, Size: 0x10] 0x78dc11d9e0
	<int,QAHistory> HistoryOfAffixes;//[Offset: 0x158, Size: 0x50] 0x78d7101180
	FString FullAttrFilter;//[Offset: 0x1a8, Size: 0x10] 0x78d70ecd80
	<FString,QAAttrData> FullAttributes;//[Offset: 0x1b8, Size: 0x50] 0x78d7101240
	<FString,QATagAttrDataArray> TaggedAttributes;//[Offset: 0x208, Size: 0x50] 0x78d7101300
	<FString,float> CharFields;//[Offset: 0x258, Size: 0x50] 0x78d71013c0
	FString[] CharLabels;//[Offset: 0x2a8, Size: 0x10] 0x78dc11da80
	<FString,float> status;//[Offset: 0x2b8, Size: 0x50] 0x78d7101480
	<int,FString> States;//[Offset: 0x308, Size: 0x50] 0x78d7101540
	QABuffData[] Buffs;//[Offset: 0x358, Size: 0x10] 0x78dc11db20
	<int,QAHistory> HistoryOfBuffs;//[Offset: 0x368, Size: 0x50] 0x78d7101600
	QAHurtAbsorbInfo[] HurtAbsorb;//[Offset: 0x3b8, Size: 0x10] 0x78dc11dbc0
	<FString,float> FightResources;//[Offset: 0x3c8, Size: 0x50] 0x78d71016c0
	int CurrentSkill;//[Offset: 0x418, Size: 0x4] 0x78d70ed680
	<FString,float> SkillCooldowns;//[Offset: 0x420, Size: 0x50] 0x78d7101780
	AnimMontage* CurrentMontage;//[Offset: 0x470, Size: 0x8] 0x78d70eb700
	float MontagePlayRate;//[Offset: 0x478, Size: 0x4] 0x78d70eb780
	QAIInfo AIStatus;//[Offset: 0x480, Size: 0x80] 0x78d70eb800
	<FString,FString> AIBlackBoardMainTree;//[Offset: 0x500, Size: 0x50] 0x78d7101840
	<int,QAAIBlackBoard> AIBlackBoards;//[Offset: 0x550, Size: 0x50] 0x78dbf5f7c0
	<FString,FString> LevelBlackBoard;//[Offset: 0x5a0, Size: 0x50] 0x78dbf5f880
	QATriggerInfo TriggerInfo;//[Offset: 0x5f0, Size: 0x10] 0x78d70ebb80
	CustomTrapInfo CustomTrapInfo;//[Offset: 0x600, Size: 0x38] 0x78d70ebc00
	void ProcessLogicData(float DeltaTime);// 0xa52a8b4 0x78d70f45a0

--------------------------------
Class: QAIdWithName
	int ClassId;//[Offset: 0x0, Size: 0x4] 0x78dbe1e300
	int EffectId;//[Offset: 0x4, Size: 0x4] 0x78dbe1e380
	FString UserFriendlyName;//[Offset: 0x8, Size: 0x10] 0x78dbe1e400

--------------------------------
Class: QAHistory
	float ElapsedTime;//[Offset: 0x0, Size: 0x4] 0x78dbe1e280
	QAIdWithName Name;//[Offset: 0x8, Size: 0x18] 0x78dbe1e480

--------------------------------
Class: QAAttrData
	Vector2D QuickValue;//[Offset: 0x0, Size: 0x8] 0x78dbe1d980
	float Base;//[Offset: 0xc, Size: 0x4] 0x78dbe1da00
	float Floating;//[Offset: 0x10, Size: 0x4] 0x78dbe1da80
	float ModIncr;//[Offset: 0x14, Size: 0x4] 0x78dbe1db00
	float[] ModsExtIncr;//[Offset: 0x18, Size: 0x10] 0x78d361ace0
	Vector2D Turn;//[Offset: 0x28, Size: 0x8] 0x78dbe1dc00

--------------------------------
Class: QATagAttrDataArray
	QATagAttrData[] Array;//[Offset: 0x0, Size: 0x10] 0x78d361b000

--------------------------------
Class: QATagAttrData
	QAAttrData AttrData;//[Offset: 0x78, Size: 0x58] 0x78dbe1dc80
	FString[] MyTagAND;//[Offset: 0xd0, Size: 0x10] 0x78d361ad80
	FString[] MyTagOR;//[Offset: 0xe0, Size: 0x10] 0x78d361ae20
	FString[] OtherTagAND;//[Offset: 0xf0, Size: 0x10] 0x78d361aec0
	FString[] OtherTagOR;//[Offset: 0x100, Size: 0x10] 0x78d361af60

--------------------------------
Class: QABuffData
	QAIdWithName Buff;//[Offset: 0x0, Size: 0x18] 0x78dbe1df80
	EEntity* SourceEntity;//[Offset: 0x18, Size: 0x8] 0x78dbe1e000
	int Level;//[Offset: 0x20, Size: 0x4] 0x78dbe1e080
	float Duration;//[Offset: 0x24, Size: 0x4] 0x78dbe1e100
	float BuffPercent;//[Offset: 0x28, Size: 0x4] 0x78dbe1e180
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78dbe1e200

--------------------------------
Class: QAHurtAbsorbInfo
	<FString,float> Rates;//[Offset: 0x0, Size: 0x50] 0x78dbdfbc80
	float LimitValue;//[Offset: 0x50, Size: 0x4] 0x78dbe1d080

--------------------------------
Class: QAIInfo
	EEntity* Threat;//[Offset: 0x0, Size: 0x8] 0x78dbe1e600
	EEntity* Target;//[Offset: 0x8, Size: 0x8] 0x78dbe1e680
	Vector TargetPos;//[Offset: 0x10, Size: 0xc] 0x78dbe1e700
	bool bTargetIsPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78dbe1c680
	int SkillToUse;//[Offset: 0x20, Size: 0x4] 0x78dbe1c700
	int LastSkillUsed;//[Offset: 0x24, Size: 0x4] 0x78dbe1c780
	int LastSkillUsedTimes;//[Offset: 0x28, Size: 0x4] 0x78dbe1c800
	int[] SkillToUseCfgIds;//[Offset: 0x30, Size: 0x10] 0x78d361b0a0
	int[] SkillToUsePriorities;//[Offset: 0x40, Size: 0x10] 0x78d361b140
	EEntity*[] Attackers;//[Offset: 0x50, Size: 0x10] 0x78d361b1e0
	FString GroupName;//[Offset: 0x60, Size: 0x10] 0x78dbe1ca00
	enum Side;//[Offset: 0x70, Size: 0x1] 0x78d361b280
	float ScanThreatRadius;//[Offset: 0x74, Size: 0x4] 0x78dbe1cb00
	EEntity* GroupThreat;//[Offset: 0x78, Size: 0x8] 0x78dbe1cb80

--------------------------------
Class: QAAIBlackBoard
	<FString,FString> Info;//[Offset: 0x0, Size: 0x50] 0x78dbdfb980

--------------------------------
Class: QATriggerInfo
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe1cc00
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78dbe1cc80
	bool bIgnoreCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78dbe1cd00
	bool bPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78dbe1cd80
	float PauseTime;//[Offset: 0x4, Size: 0x4] 0x78dbe1ce00
	float TickTime;//[Offset: 0x8, Size: 0x4] 0x78dbe1ce80
	int ActionStep;//[Offset: 0xc, Size: 0x4] 0x78dbe1cf00

--------------------------------
Class: CustomTrapInfo
	int[] StatusLoop;//[Offset: 0x0, Size: 0x10] 0x78d361b320
	int CurStatusIndex;//[Offset: 0x10, Size: 0x4] 0x78dbe1d180
	int CurStatus;//[Offset: 0x14, Size: 0x4] 0x78dbe1d200
	int TrapExecuteState;//[Offset: 0x18, Size: 0x4] 0x78dbe1d280
	float WaitTime;//[Offset: 0x1c, Size: 0x4] 0x78dbe1d300
	int HitCount;//[Offset: 0x20, Size: 0x4] 0x78dbe1d380
	int WorkCount;//[Offset: 0x24, Size: 0x4] 0x78dbe1d400
	int MaxWorkCount;//[Offset: 0x28, Size: 0x4] 0x78dbe1d480
	int SkillIndex;//[Offset: 0x2c, Size: 0x4] 0x78dbe1d500
	int TriggerIndex;//[Offset: 0x30, Size: 0x4] 0x78dbe1d580
	bool bPlayerEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x78dbe1d600

--------------------------------
Class: EMapCustomTrapComponent.EComponent.ActorComponent.Object
	AnimMontage* AppearMontage;//[Offset: 0x120, Size: 0x28] 0x78dc1ca280
	int AppearVfXCfgId;//[Offset: 0x148, Size: 0x4] 0x78dc1ca300
	AnimMontage* ExitMontage;//[Offset: 0x150, Size: 0x28] 0x78dc1ca380
	int ExitVfXCfgId;//[Offset: 0x178, Size: 0x4] 0x78dc1ca400
	AnimMontage* BrokenMontage;//[Offset: 0x180, Size: 0x28] 0x78dc1ca480
	int BrokenVfXCfgId;//[Offset: 0x1a8, Size: 0x4] 0x78dc1ca500
	AnimMontage* TriggerMontage;//[Offset: 0x1b0, Size: 0x28] 0x78dc1c8480
	int TriggerVfXCfgId;//[Offset: 0x1d8, Size: 0x4] 0x78dc1c8500
	AnimMontage* SkillMontage;//[Offset: 0x1e0, Size: 0x28] 0x78dc1c8580
	int SkillVfXCfgId;//[Offset: 0x208, Size: 0x4] 0x78dc1c8600
	float OnTrigger();// 0xa50d464 0x78dc1b98c0
	void OnTouchTrap();// 0xa50d41c 0x78dc1b99a0
	float OnSkill();// 0xa50d430 0x78dc1b9a80
	void OnInteractiveChanged(int uid, int status);// 0xa50d32c 0x78dc1b9b60
	void OnInit(int CfgId);// 0xa50d5dc 0x78dc1b9c40
	float OnExit();// 0xa50d498 0x78dc1b9d20
	float OnBroken();// 0xa50d4cc 0x78dc1b9e00
	float OnAppear();// 0xa50d500 0x78dc1b9ee0
	void InitStatus(int statusIndex);// 0xa50d534 0x78dc1b9fc0
	int GetStatus();// 0xa50d2f8 0x78dc1ba0a0

--------------------------------
Class: EMapDestructible.EEntity.Pawn.Actor.Object

--------------------------------
Class: EMapDestructibleComponent.EComponent.ActorComponent.Object
	bool bHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x78dc1c9d80
	bool bDroped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1] 0x78dc1c9e00
	FName SoundId;//[Offset: 0x124, Size: 0x8] 0x78dc1c9e80
	int VfxId;//[Offset: 0x12c, Size: 0x4] 0x78dc1c9f00
	CurveFloat* BrokenTimelineCurve;//[Offset: 0x1c8, Size: 0x8] 0x78dc1c9f80
	int AliveFxDynId;//[Offset: 0x1d0, Size: 0x4] 0x78dc1ca000
	void PlayBrokenAnimation();// 0xa50df58 0x78dc1b9460
	void OnPlayBrokenEffect(int atkEtyId);// 0xa50deb0 0x78dc1b9540
	void OnAnimationUpdate(float Value);// 0xa50de08 0x78dc1b9620
	void OnAnimationComplete();// 0xa50ddf4 0x78dc1b9700
	void InitDestructibleActor(enum Type, int CfgId);// 0xa50df6c 0x78dc1b97e0

--------------------------------
Class: EMapFollower.EEntity.Pawn.Actor.Object

--------------------------------
Class: EMapGodOfDarkness.EEntity.Pawn.Actor.Object

--------------------------------
Class: EMapGodOfDarknessComponent.EComponent.ActorComponent.Object

--------------------------------
Class: EMapGodOfHunting.EEntity.Pawn.Actor.Object

--------------------------------
Class: EMapGodOfHuntingComponent.EComponent.ActorComponent.Object

--------------------------------
Class: EMapGodOfMachine.EEntity.Pawn.Actor.Object

--------------------------------
Class: EMapGodOfMachineComponent.EComponent.ActorComponent.Object
	class EHpBarMapObjectGodOfMachineWidget* InteractiveItemHpBarWidgetClass;//[Offset: 0x1b0, Size: 0x8] 0x78dc11b780
	class UserWidget* MachineWidgetClass;//[Offset: 0x1b8, Size: 0x8] 0x78dc11b820
	EWidgetComponent* MachineInfoWidget;//[Offset: 0x1c0, Size: 0x8] 0x78dc1c9a00

--------------------------------
Class: EMapObject.EEntity.Pawn.Actor.Object

--------------------------------
Class: EMapPortalComponent.EComponent.ActorComponent.Object
	void UpdateVisible(float distSqr);// 0xa5101e8 0x78dc1bc2c0
	void UpdateFashion(EEntity* EPlayer, bool needRefresh);// 0xa5100ec 0x78dc1bc3a0
	void StopAnim();// 0xa5105e8 0x78dc1bc480
	void SetValid(bool enableValid);// 0xa5103fc 0x78dc1bc560
	void SetHide(bool needHide);// 0xa510290 0x78dc1bc640
	void OnTouched();// 0xa5103e8 0x78dc1bc720
	void OnActivePortal(int ID);// 0xa510340 0x78dc1bc800
	void InitPortal(int UniqueId, int CfgId, enum Type);// 0xa5104ac 0x78dc1bc8e0
	void FixCityPortRotation(EEntity* EPlayer);// 0xa510044 0x78dc1bc9c0

--------------------------------
Class: EMapTaleCollisionComponent.EComponent.ActorComponent.Object

--------------------------------
Class: EMapTaleCollisionPoint.EEntity.Pawn.Actor.Object

--------------------------------
Class: EMapTaleComponent.EComponent.ActorComponent.Object
	TimerHandle TriggerHandle;//[Offset: 0x130, Size: 0x8] 0x78dc1cb200
	void StartDialogueTale();// 0xa510f24 0x78dc1bc100
	void StartBubbleTale();// 0xa510f38 0x78dc1bc1e0

--------------------------------
Class: EMapTalePoint.EEntity.Pawn.Actor.Object

--------------------------------
Class: EMapTransportCheckPoint.EEntity.Pawn.Actor.Object

--------------------------------
Class: EMinimapWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* CanvasPanel_MiniMap;//[Offset: 0x278, Size: 0x8] 0x78dc1cd800
	CanvasPanel* CanvasPanel_WorldRoot;//[Offset: 0x280, Size: 0x8] 0x78dc1cd880
	CanvasPanel* CanvasPanel_WorldMap;//[Offset: 0x288, Size: 0x8] 0x78dc1cd900
	CanvasPanel* Canvas_Content;//[Offset: 0x290, Size: 0x8] 0x78dc1cd980
	Image* mapPic;//[Offset: 0x298, Size: 0x8] 0x78dc1cda00
	Image* worldMapPic;//[Offset: 0x2a0, Size: 0x8] 0x78dc1cda80
	UITextBlock* LevelName;//[Offset: 0x2a8, Size: 0x8] 0x78dc1cdb00
	UITextBlock* worldLevelName;//[Offset: 0x2b0, Size: 0x8] 0x78dc1cdb80
	Image* iconPic;//[Offset: 0x2b8, Size: 0x8] 0x78dc1cdc00
	Image* worldIconPic;//[Offset: 0x2c0, Size: 0x8] 0x78dc1cdc80
	Image* taskPic;//[Offset: 0x2c8, Size: 0x8] 0x78dc1cdd00
	Image* worldTaskPic;//[Offset: 0x2d0, Size: 0x8] 0x78dc1cdd80
	class UserWidget* WidgetTaskArrowReference;//[Offset: 0x2d8, Size: 0x8] 0x78dc11ae20
	MaterialInstanceDynamic* MapMaterialMID;//[Offset: 0x2e0, Size: 0x8] 0x78dc1cde00
	MaterialInstanceDynamic* FogMaterialMID;//[Offset: 0x2e8, Size: 0x8] 0x78dc1cde80
	MaterialInstanceDynamic* IconMaterialMID;//[Offset: 0x2f0, Size: 0x8] 0x78dc1cdf00
	MaterialInstanceDynamic* TaskMaterialMID;//[Offset: 0x2f8, Size: 0x8] 0x78dc1cdf80
	MaterialInstanceDynamic* TaskCircleMaterialMID;//[Offset: 0x300, Size: 0x8] 0x78dc1ce000
	MaterialInstanceDynamic* TaskMarkMaterialMID;//[Offset: 0x308, Size: 0x8] 0x78dc1ce080
	TextureRenderTarget2D* FogRenderTarget;//[Offset: 0x310, Size: 0x8] 0x78dc1ce100
	CanvasRenderTarget2D* IconRenderTarget;//[Offset: 0x318, Size: 0x8] 0x78dc1ce180
	CanvasRenderTarget2D* TaskRenderTarget;//[Offset: 0x320, Size: 0x8] 0x78dc1ce200
	<int,MapTaskData> TaskArrows;//[Offset: 0x328, Size: 0x50] 0x78dbf5df00
	<int,enum> TaskIconData;//[Offset: 0x378, Size: 0x50] 0x78dbf5dfc0
	CurveFloat* MapCircleTimeLineCurve;//[Offset: 0x3c8, Size: 0x8] 0x78dc1ce480
	MinimapSaveObject* MiniMapSaveObj;//[Offset: 0x3d0, Size: 0x8] 0x78dc1ce500
	TextureRenderTarget2D* MagnifiedMiniMap;//[Offset: 0x3d8, Size: 0x8] 0x78dc1ce580
	bool bIsClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1] 0x78dc1ce600
	MaterialInterface* FogMaterial;//[Offset: 0x3e8, Size: 0x8] 0x78dc1ce680
	MaterialInterface* IconMaterial;//[Offset: 0x3f0, Size: 0x8] 0x78dc1ce700
	MaterialInterface* TaskMaterial;//[Offset: 0x3f8, Size: 0x8] 0x78dc1cc680
	MaterialInterface* MapMaterial;//[Offset: 0x400, Size: 0x8] 0x78dc1cc700
	CanvasRenderTarget2D* IconRTRes;//[Offset: 0x408, Size: 0x8] 0x78dc1cc780
	CanvasRenderTarget2D* TaskRTRes;//[Offset: 0x410, Size: 0x8] 0x78dc1cc800
	void UpdatePos();// 0xa516bb8 0x78dc1badc0
	void Update();// 0xa516bcc 0x78dc1baea0
	void SetMinimapTickEnable(bool isEnable);// 0xa516868 0x78dc1baf80
	void ResetMinimapRT();// 0xa5165dc 0x78dc1bb060
	void PinchMap(float delt);// 0xa516a08 0x78dc1bb140
	void OnReceiveNPCChanged(int State, int npcDynID);// 0xa516918 0x78dc1bb220
	void LocatePosition();// 0xa516ab0 0x78dc1bb300
	bool IsBigMapMode();// 0xa516ac4 0x78dc1bb3e0
	void DrawToCanvasRenderTarget(Canvas* Canvas, int Width, int Height);// 0xa51672c 0x78dc1bb4c0
	void DrawTaskCanvasRenderTarget(Canvas* Canvas, int Width, int Height);// 0xa5165f0 0x78dc1bb5a0
	void ChangeModelToAnother();// 0xa516afc 0x78dc1bb680
	void ChangeModel(enum Model);// 0xa516b10 0x78dc1bb760

--------------------------------
Class: MapTaskData

--------------------------------
Class: MinimapSaveObject.Object
	<int,MinMapRecord> Records;//[Offset: 0x28, Size: 0x50] 0x78d7104300

--------------------------------
Class: MinMapRecord
	int64 Timestamp;//[Offset: 0x0, Size: 0x8] 0x78dbe2fb80
	Vector[] Pos;//[Offset: 0x8, Size: 0x10] 0x78d361e520
	MapIconData[] IconDataArray;//[Offset: 0x18, Size: 0x10] 0x78d361e660

--------------------------------
Class: MapIconData
	enum IconType;//[Offset: 0x0, Size: 0x4] 0x78d361e5c0
	Vector2D WordPos;//[Offset: 0x4, Size: 0x8] 0x78dbe2fd00
	int ZOrder;//[Offset: 0xc, Size: 0x4] 0x78dbe2fd80
	int ID;//[Offset: 0x10, Size: 0x4] 0x78dbe2fe00
	float Scale;//[Offset: 0x14, Size: 0x4] 0x78dbe2fe80
	int NeedUpdate;//[Offset: 0x18, Size: 0x4] 0x78dbe2ff00

--------------------------------
Class: EMinion.EEntity.Pawn.Actor.Object

--------------------------------
Class: EMonster.EEntity.Pawn.Actor.Object

--------------------------------
Class: EMsgComponent.EComponent.ActorComponent.Object

--------------------------------
Class: EObstacle.EEntity.Pawn.Actor.Object

--------------------------------
Class: ESimpleAnimeComponent.EComponent.ActorComponent.Object
	ESimpleAnimInstance* SimpleAnimInstance;//[Offset: 0x128, Size: 0x8] 0x78d7122080
	void OnInit(int CfgId);// 0xa534eb8 0x78d70f61a0
	void OnIdle();// 0xa534ea4 0x78d70f6280
	void OnExit();// 0xa534e90 0x78d70f6360
	void OnDestroy();// 0xa534e7c 0x78d70f6440

--------------------------------
Class: ESimpleAnimInstance.AnimInstance.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x2b8, Size: 0x28] 0x78d7121e80
	AnimSequence* IdleSequence;//[Offset: 0x2e0, Size: 0x28] 0x78d7121f00
	AnimSequence* FadeInSequence;//[Offset: 0x308, Size: 0x28] 0x78d7121f80
	AnimSequence* FadeOutSequence;//[Offset: 0x330, Size: 0x28] 0x78d7122000

--------------------------------
Class: EOrbitFxComponent.EComponent.ActorComponent.Object
	void RemoveSatellite(int orbitKey);// 0xa520be8 0x78dc1be080
	void AddSatellite(int orbitKey, out const OrbitData OrbitData);// 0xa520c90 0x78dc1be160

--------------------------------
Class: OrbitData
	float Radius;//[Offset: 0x0, Size: 0x4] 0x78dbe1ac00
	float SatellateRevolutionVelocity;//[Offset: 0x4, Size: 0x4] 0x78dbe1ac80
	float SatellateRotationVelocity;//[Offset: 0x8, Size: 0x4] 0x78dbe1ad00
	int SatellateFxCfgId;//[Offset: 0xc, Size: 0x4] 0x78dbe1ad80
	int SatellateDestroyFxCfgId;//[Offset: 0x10, Size: 0x4] 0x78dbe1ae00

--------------------------------
Class: EPhantom.EEntity.Pawn.Actor.Object

--------------------------------
Class: EPhantomComponent.EComponent.ActorComponent.Object
	ESkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x128, Size: 0x8] 0x78d70e2600
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0xa527504 0x78dc1bf2e0

--------------------------------
Class: EPlayerCameraManager.PlayerCameraManager.Actor.Object
	int Cfg_CameraLagSkillTag;//[Offset: 0x27b0, Size: 0x4] 0x78d70e6a00
	float Cfg_CameraLagSkillPostCastActiveTime;//[Offset: 0x27b4, Size: 0x4] 0x78d70e6a80
	<FName,int> MaxCameraShakeInstancesPerChannel;//[Offset: 0x27b8, Size: 0x50] 0x78dbf5f940
	int DefaultMaxCameraShakeInstancesPerChannel;//[Offset: 0x2808, Size: 0x4] 0x78d70e6c00
	<FString,float> CameraShakeScaleByDeviceType;//[Offset: 0x2810, Size: 0x50] 0x78dbf5fa00
	SpringArmModParams SpringArmMod;//[Offset: 0x2860, Size: 0x50] 0x78d70e6d80
	<int,CameraModParams> CameraModParamsMap;//[Offset: 0x28b0, Size: 0x50] 0x78dbf5fac0
	EEntity* CameraVfxActor;//[Offset: 0x2900, Size: 0x8] 0x78d70e6f00
	bool bHasInitedMgr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2908, Size: 0x1] 0x78d70e6f80
	void SetSpringArmRotationModifier(out const Rotator rotationMod, out const EViewTargetTransitionParams blendParam);// 0xa527e84 0x78d70f06a0
	void SetSpringArmLengthModifier(float LengthMod, out const EViewTargetTransitionParams blendParam, bool bReset);// 0xa528074 0x78d70f0780
	void SetCamerSaturationToGray(bool bGray);// 0xa527dd4 0x78d70f0860
	void PushVolumeModifier(int VolumeId, out const CameraModParams CameraModParams);// 0xa527ccc 0x78d70f0940
	void PopVolumeModifier(int VolumeId);// 0xa527c24 0x78d70f0a20

--------------------------------
Class: SpringArmModParams
	float[] LengthMod;//[Offset: 0x0, Size: 0x10] 0x78d361b500
	Rotator[] RelativeRotationMod;//[Offset: 0x10, Size: 0x10] 0x78d361b5a0
	float[] BlendTimeToGo;//[Offset: 0x20, Size: 0x10] 0x78d361b640
	EViewTargetTransitionParams[] BlendParams;//[Offset: 0x30, Size: 0x10] 0x78d361b6e0

--------------------------------
Class: EViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4] 0x78dbe1bd00
	byte BlendFunction;//[Offset: 0x4, Size: 0x1] 0x78dbe1bd80
	float BlendExp;//[Offset: 0x8, Size: 0x4] 0x78dbe1be00
	CurveFloat* CurveObject;//[Offset: 0x20, Size: 0x8] 0x78dbe1be80
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78dbe1bf00

--------------------------------
Class: CameraModParams
	float BlendTime;//[Offset: 0x0, Size: 0x4] 0x78dbe1c000
	float LengthMod;//[Offset: 0x4, Size: 0x4] 0x78dbe1c080
	Rotator RelativeRotationMod;//[Offset: 0x8, Size: 0xc] 0x78dbe1c100

--------------------------------
Class: EPlayerCameraShakeComponent.EComponent.ActorComponent.Object
	class ECameraShake[] CameraShakeClasses;//[Offset: 0x128, Size: 0x10] 0x78dc11e2a0
	MatineeCameraShake* ActiveCameraShake;//[Offset: 0x138, Size: 0x8] 0x78d70e6880
	float RemainingTime;//[Offset: 0x140, Size: 0x4] 0x78d70e6900
	int Level;//[Offset: 0x144, Size: 0x4] 0x78d70e6980
	void ResetCameraShakeLevel();// 0xa5286e4 0x78d70f0400
	void LoadCameraShake();// 0xa52870c 0x78d70f04e0
	void IncreaseCameraShakeLevel();// 0xa5286f8 0x78d70f05c0

--------------------------------
Class: EPlayerComponent.EComponent.ActorComponent.Object
	StaticMesh* EffectPlane;//[Offset: 0x1a0, Size: 0x8] 0x78d70e6680
	MaterialInterface* MaterialInterface;//[Offset: 0x1a8, Size: 0x8] 0x78d70e6700
	StaticMeshComponent* StaticMesh;//[Offset: 0x1b0, Size: 0x8] 0x78d70e6780
	PostProcessComponent* PostProcess;//[Offset: 0x1b8, Size: 0x8] 0x78d70e6800

--------------------------------
Class: EPortal.EEntity.Pawn.Actor.Object

--------------------------------
Class: EProximityShield.EEntity.Pawn.Actor.Object

--------------------------------
Class: EReloadComponent.EComponent.ActorComponent.Object

--------------------------------
Class: ERoleAttachment.EEntity.Pawn.Actor.Object

--------------------------------
Class: ERoleAudioComponent.EComponent.ActorComponent.Object
	<FName,Actor*> AudioActorBySlot;//[Offset: 0x120, Size: 0x50] 0x78d7100d00

--------------------------------
Class: ERoleInteractiveComponent.EComponent.ActorComponent.Object

--------------------------------
Class: ERoleMapGamePlayComponent.EComponent.ActorComponent.Object

--------------------------------
Class: ERoleOther.EEntity.Pawn.Actor.Object

--------------------------------
Class: ERolePlayer.EEntity.Pawn.Actor.Object

--------------------------------
Class: ESkillCtrlComponent.EComponent.ActorComponent.Object
	class ESkillCtrlVisualDrawer* SkillCtrlVisualDrawerClass;//[Offset: 0x120, Size: 0x8] 0x78dc11e520
	StaticMeshComponent*[] CtrlMeshes;//[Offset: 0x128, Size: 0x10] 0x78dc11e5c0
	DecalComponent*[] CtrlDecals;//[Offset: 0x138, Size: 0x10] 0x78dc11e660
	SceneComponent*[] CtrlVisuals;//[Offset: 0x148, Size: 0x10] 0x78dc11e700
	<enum,SceneComponent*> CtrlVisualsArms;//[Offset: 0x158, Size: 0x50] 0x78d71007c0
	SceneComponent* CtrlAttachAbsDirHelper;//[Offset: 0x1a8, Size: 0x8] 0x78d712a880
	ESkillCtrlVisualDrawer* CtrlVisualDrawer;//[Offset: 0x1b0, Size: 0x8] 0x78d712a900
	float AttachZOffset;//[Offset: 0x1d8, Size: 0x4] 0x78d712a980
	void AttachCtrlsTo(SceneComponent* attachParentComponent);// 0xa53a6d8 0x78d70faea0

--------------------------------
Class: ESkillCtrlVisualDrawer.Actor.Object
	float Cfg_ArrowBeginLength;//[Offset: 0x220, Size: 0x4] 0x78d712b600
	float Cfg_ArrowEndLength;//[Offset: 0x224, Size: 0x4] 0x78d712b680
	float Cfg_DesiredArrowHalfWidth;//[Offset: 0x228, Size: 0x4] 0x78d712b700
	float Cfg_PlaneRadius;//[Offset: 0x22c, Size: 0x4] 0x78d712b780
	float Cfg_DesiredPointRadius;//[Offset: 0x230, Size: 0x4] 0x78d712b800
	float Cfg_DesiredCircleCenterRadius;//[Offset: 0x234, Size: 0x4] 0x78d712b880
	float Cfg_ThresholdDrawCircleCenter;//[Offset: 0x238, Size: 0x4] 0x78d712b900
	float Cfg_ThresholdDrawAutoPoint;//[Offset: 0x23c, Size: 0x4] 0x78d712b980
	int Cfg_ResIdArrowBegin;//[Offset: 0x240, Size: 0x4] 0x78d712ba00
	int Cfg_ResIdArrowEnd;//[Offset: 0x244, Size: 0x4] 0x78d712ba80
	int Cfg_ResIdArrowLine;//[Offset: 0x248, Size: 0x4] 0x78d712bb00
	int Cfg_ResIdCircle;//[Offset: 0x24c, Size: 0x4] 0x78d712bb80
	int Cfg_ResIdCircleCenter;//[Offset: 0x250, Size: 0x4] 0x78d712bc00
	int Cfg_ResIdRectSide;//[Offset: 0x254, Size: 0x4] 0x78d712bc80
	int Cfg_ResIdSector;//[Offset: 0x258, Size: 0x4] 0x78d712bd00
	int Cfg_ResIdSectorSide;//[Offset: 0x25c, Size: 0x4] 0x78d712bd80
	int Cfg_ResIdPoint;//[Offset: 0x260, Size: 0x4] 0x78d712be00
	StaticMesh* Cfg_PlaneMesh;//[Offset: 0x268, Size: 0x8] 0x78d712be80
	EEntity* MyOwner;//[Offset: 0x270, Size: 0x8] 0x78d712bf00
	SceneComponent* AttachHelper;//[Offset: 0x278, Size: 0x8] 0x78d712bf80
	float SkillScale;//[Offset: 0x280, Size: 0x4] 0x78d712c000
	bool bAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1] 0x78d712c080
	Vector RelOffset;//[Offset: 0x288, Size: 0xc] 0x78d712c100
	float RangeRadius;//[Offset: 0x294, Size: 0x4] 0x78d712c180
	float AOERadius;//[Offset: 0x298, Size: 0x4] 0x78d712c200
	bool bDrawRangeRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1] 0x78d712c280
	Vector SkillDir;//[Offset: 0x2a0, Size: 0xc] 0x78d712c300
	Vector SkillRightDir;//[Offset: 0x2ac, Size: 0xc] 0x78d712c380
	Rotator SkillDirRotation;//[Offset: 0x2b8, Size: 0xc] 0x78d712c400
	<enum,IntArray> ComponentsByType;//[Offset: 0x2c8, Size: 0x50] 0x78d7100640
	<int,SkillCtrlVisualComponent> Components;//[Offset: 0x318, Size: 0x50] 0x78d7100700
	int dynId;//[Offset: 0x368, Size: 0x4] 0x78d712a580

--------------------------------
Class: SkillCtrlVisualComponent
	MeshComponent* Main;//[Offset: 0x0, Size: 0x8] 0x78dbe2a880
	MeshComponent* Start;//[Offset: 0x8, Size: 0x8] 0x78dbe2a900
	MeshComponent* End;//[Offset: 0x10, Size: 0x8] 0x78dbe2a980
	MeshComponent* Additional;//[Offset: 0x18, Size: 0x8] 0x78dbe2aa00

--------------------------------
Class: ESceneCaptureComponent.SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	Actor* CustomViewOwner;//[Offset: 0x8b0, Size: 0x8] 0x78d7120200

--------------------------------
Class: ESceneMaterialCfg.Object
	Material*[] MaterialsRequiringCustomDepthPass;//[Offset: 0x28, Size: 0x10] 0x78dc11d3a0
	FName[] StaticSwitchRequired;//[Offset: 0x38, Size: 0x10] 0x78dc11d440

--------------------------------
Class: ESeasonGamePlayMonsterCorrupt.EEntity.Pawn.Actor.Object

--------------------------------
Class: ESeasonGamePlayMonsterCorruptComponent.EComponent.ActorComponent.Object

--------------------------------
Class: EServant.EEntity.Pawn.Actor.Object

--------------------------------
Class: EServantComponent.EComponent.ActorComponent.Object
	EGroundItem*[] CheckItems;//[Offset: 0x140, Size: 0x10] 0x78dc11d300

--------------------------------
Class: ESkeletalMeshUserData_AnimationBp.AssetUserData.Object
	class AnimInstance* AnimClass;//[Offset: 0x28, Size: 0x8] 0x78dc11ec00

--------------------------------
Class: ESkeletalMeshUserData_AudioFootstepType.AssetUserData.Object
	AudioFootstepType Type;//[Offset: 0x28, Size: 0x4] 0x78d7129e00

--------------------------------
Class: ESkeletalMeshUserData_HitCapsule.AssetUserData.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8] 0x78d7129c00
	float CapsuleRadius;//[Offset: 0x30, Size: 0x4] 0x78d7129c80
	float HalfHeight;//[Offset: 0x34, Size: 0x4] 0x78d7129d00
	float ZOffset;//[Offset: 0x38, Size: 0x4] 0x78d7129d80

--------------------------------
Class: ESkeletalMeshUserData_Offset.AssetUserData.Object
	float ZOffset;//[Offset: 0x28, Size: 0x4] 0x78d7129b80

--------------------------------
Class: ESkeletalMeshUserData_Physics.AssetUserData.Object
	bool bEnablePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78d7129a00
	bool bForceNoStretch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78d7129a80
	bool bDelayedInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78d7129b00

--------------------------------
Class: ESkeletalMeshUserData_SelectRole.AssetUserData.Object
	float Yaw;//[Offset: 0x28, Size: 0x4] 0x78d712b200
	FString[] Material_Res;//[Offset: 0x30, Size: 0x10] 0x78dc11ea20
	MaterialInterface*[] Material_Resource;//[Offset: 0x40, Size: 0x10] 0x78dc11eac0
	float Phyical_Delay;//[Offset: 0x50, Size: 0x4] 0x78d712b380
	float Scale;//[Offset: 0x54, Size: 0x4] 0x78d712b400
	float Offset_Role;//[Offset: 0x58, Size: 0x4] 0x78d712b480
	Vector Light_Site;//[Offset: 0x5c, Size: 0xc] 0x78d712b500
	float Light_Intensity;//[Offset: 0x68, Size: 0x4] 0x78d712b580
	Vector Light_Color;//[Offset: 0x6c, Size: 0xc] 0x78d7129500
	Rotator Light_Rotate;//[Offset: 0x78, Size: 0xc] 0x78d7129580
	Vector Bag_Light_Site;//[Offset: 0x84, Size: 0xc] 0x78d7129600
	float Bag_Light_Intensity;//[Offset: 0x90, Size: 0x4] 0x78d7129680
	Vector Bag_Light_Color;//[Offset: 0x94, Size: 0xc] 0x78d7129700
	Rotator Bag_Light_Rotate;//[Offset: 0xa0, Size: 0xc] 0x78d7129780
	float Bag_Yaw;//[Offset: 0xac, Size: 0x4] 0x78d7129800
	FString Rotation_Angle;//[Offset: 0xb0, Size: 0x10] 0x78d7129880
	<enum,float> WeaponScales;//[Offset: 0xc0, Size: 0x50] 0x78d7100ac0

--------------------------------
Class: ESkeletalMeshUserData_Socket.AssetUserData.Object
	<FName,SocketData> MeshOnlySockets;//[Offset: 0x28, Size: 0x50] 0x78d7100940
	bool bKeepOriginal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78d712b080
	<FName,Transform> Sockets;//[Offset: 0x80, Size: 0x50] 0x78d7100a00

--------------------------------
Class: SocketData
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x78dbe1f400
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x78dbe1f480

--------------------------------
Class: ESkeletalMeshUserData_UIPet.AssetUserData.Object
	float Yaw;//[Offset: 0x28, Size: 0x4] 0x78d712ab80
	FString[] Material_Res;//[Offset: 0x30, Size: 0x10] 0x78dc11e8e0
	MaterialInterface*[] Material_Resource;//[Offset: 0x40, Size: 0x10] 0x78dc11e980
	float Scale;//[Offset: 0x50, Size: 0x4] 0x78d712ad00
	Vector PickCard_Light_Site;//[Offset: 0x54, Size: 0xc] 0x78d712ad80
	float PickCard_Light_Intensity;//[Offset: 0x60, Size: 0x4] 0x78d712ae00
	Vector PickCard_Light_Color;//[Offset: 0x64, Size: 0xc] 0x78d712ae80
	Rotator PickCard_Light_Rotate;//[Offset: 0x70, Size: 0xc] 0x78d712af00

--------------------------------
Class: ESkeletalMeshUserData_WeaponScale.AssetUserData.Object
	<enum,float> Scales;//[Offset: 0x28, Size: 0x50] 0x78d7100880

--------------------------------
Class: ESkillViewDataTableHelper.Object
	void LoadConfigDmgTagToAtkSndTypes(out <int,int> outMap);// 0xaa7cd18 0x78d70fe240
	void LoadConfigDamageSndFilters(out DamageSndFilterIntermediateBPStruct[] outArray);// 0xaa7cd18 0x78d70fe320
	void LoadConfig();// 0xa53bac0 0x78d70fe400
	void EnumArrayToIntArray(out const byte[] ByteArray, out int[] outIntArray);// 0xa53b95c 0x78d70fe4e0

--------------------------------
Class: DamageSndFilterIntermediateBPStruct
	int[] AttackSndTypes;//[Offset: 0x0, Size: 0x10] 0x78d361c540
	int[] VictimSndTypes;//[Offset: 0x10, Size: 0x10] 0x78d361c5e0
	enum CritCond;//[Offset: 0x20, Size: 0x1] 0x78d361c680
	AkAudioEvent* AudioEvent;//[Offset: 0x28, Size: 0x28] 0x78dbe21d00

--------------------------------
Class: ETouchableNameWidget.EPoolableWidget.UserWidget.Widget.Visual.Object
	WidgetComponent* OwnerComponent;//[Offset: 0x260, Size: 0x8] 0x78d7140380
	UITextBlock* UITextBlock_npc;//[Offset: 0x268, Size: 0x8] 0x78d7140400
	UITextBlock* UITextBlock_npc_title;//[Offset: 0x270, Size: 0x8] 0x78d7140480
	UITextBlock* UITextBlock_portal;//[Offset: 0x278, Size: 0x8] 0x78d7140500
	UITextBlock* UITextBlock_interactive;//[Offset: 0x280, Size: 0x8] 0x78d7140580
	WidgetSwitcher* WidgetSwitcher_type;//[Offset: 0x288, Size: 0x8] 0x78d7140600
	CanvasPanel* CanvasPanel_task;//[Offset: 0x290, Size: 0x8] 0x78d7140680
	UIImage* Img_task;//[Offset: 0x298, Size: 0x8] 0x78d7140700
	CanvasPanel* Canvas_Panel_interactive;//[Offset: 0x2a0, Size: 0x8] 0x78d7140780
	CanvasPanel* Canvas_interactive_normal;//[Offset: 0x2a8, Size: 0x8] 0x78d7140800
	UIImage* Image_Interactive;//[Offset: 0x2b0, Size: 0x8] 0x78d7140880
	CanvasPanel* Canvas_gom;//[Offset: 0x2b8, Size: 0x8] 0x78d7140900
	UIImage* Bg_Gom;//[Offset: 0x2c0, Size: 0x8] 0x78d7140980
	UIImage* Icon_Gom;//[Offset: 0x2c8, Size: 0x8] 0x78d7140a00
	EEntity* mEntity;//[Offset: 0x2d0, Size: 0x8] 0x78d7140a80
	int CfgId;//[Offset: 0x2d8, Size: 0x4] 0x78d7140b00
	bool bHaveNameTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1] 0x78d7140b80
	void StopAnim(enum Type);// 0xaa7cd18 0x78d70fcc60
	void PlayAnim(enum Type);// 0xaa7cd18 0x78d70fcd40

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x11c, Size: 0x4] 0x78d728f180
	void SetActiveWidgetIndex(int Index);// 0xbb4425c 0x78d7292a80
	void SetActiveWidget(Widget* Widget);// 0xbb441ac 0x78d7292b60
	Widget* GetWidgetAtIndex(int Index);// 0xbb440fc 0x78d7292c40
	int GetNumWidgets();// 0xbb44340 0x78d7292d20
	int GetActiveWidgetIndex();// 0xbb4430c 0x78d7292e00
	Widget* GetActiveWidget();// 0xbb440c8 0x78d7292ee0

--------------------------------
Class: EVfxPlayer.EEntity.Pawn.Actor.Object
	void Play(int VfxId, float TimeWaitForDestory);// 0xa541504 0x78d70fcaa0
	void OnPlayFinish();// 0xa5414f0 0x78d70fcb80

--------------------------------
Class: FastEntryMgr.Object
	UIFastEntryData FastEntryData;//[Offset: 0x28, Size: 0x40] 0x78d7142b00
	FString TestInfo;//[Offset: 0x68, Size: 0x10] 0x78d7142b80
	void SetFastEntryData(out const UIFastEntryData Data);// 0xa543714 0x78d70fe860
	void OnPressTestCallBack();// 0xa543700 0x78d70fe940
	static FastEntryMgr* Instance();// 0xa5438a0 0x78d70fea20
	UIFastEntryData GetFastEntryData();// 0xa5437fc 0x78d70feb00

--------------------------------
Class: UIFastEntryData
	int LevelId;//[Offset: 0x0, Size: 0x4] 0x78dbe2a480
	int LevelType;//[Offset: 0x4, Size: 0x4] 0x78dbe2a500
	int GameType;//[Offset: 0x8, Size: 0x4] 0x78dbe28480
	int UseRecord;//[Offset: 0xc, Size: 0x4] 0x78dbe28500
	int DisableAI;//[Offset: 0x10, Size: 0x4] 0x78dbe28580
	int DisableMonster;//[Offset: 0x14, Size: 0x4] 0x78dbe28600
	int PlayerAutoEngage;//[Offset: 0x18, Size: 0x4] 0x78dbe28680
	int LogHash;//[Offset: 0x1c, Size: 0x4] 0x78dbe28700
	int ForcePCMode;//[Offset: 0x20, Size: 0x4] 0x78dbe28780
	FString ReplayName;//[Offset: 0x28, Size: 0x10] 0x78dbe28800
	int ReplayStartFrame;//[Offset: 0x38, Size: 0x4] 0x78dbe28880

--------------------------------
Class: FightFunctionalTestGameMode.CoreGameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: FightGameMode.CoreGameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: FightHelper.BlueprintFunctionLibrary.Object
	static void SaveGameplaySettings();// 0xa545cd4 0x78d7161740
	static bool IsGridCollisionBadForSpawningAttack(out const Vector Pos);// 0xa545d1c 0x78d7161820
	static bool GetPosZAsSimpleK2(out const Vector InPos, out Vector outPos);// 0xa545eec 0x78d7161900
	static bool GetPosZAsSimple(out Vector Pos);// 0xa545fec 0x78d71619e0
	static bool GetPosZAsComplex(out Vector Pos);// 0xa545e38 0x78d7161ac0
	static float GetLogicFrameTimeSecond();// 0xa545dd0 0x78d7161ba0
	static int GetLogicFrameCount();// 0xa545e04 0x78d7161c80
	static EGameplaySettings* GetGameplaySettings();// 0xa545ce8 0x78d70fe780

--------------------------------
Class: FightMgr.Object
	FightPool FightPool;//[Offset: 0x210, Size: 0x50] 0x78d7146a80
	int mTickTimes;//[Offset: 0x2f8, Size: 0x4] 0x78d7146b00
	<int,EEntity*> MapRole;//[Offset: 0x300, Size: 0x50] 0x78d7101fc0
	<int,EEntity*> MapRolePlayer;//[Offset: 0x350, Size: 0x50] 0x78d7102080
	<int,EEntity*> MapRoleMonster;//[Offset: 0x3a0, Size: 0x50] 0x78d7102140
	<int,EEntity*> MapBullet;//[Offset: 0x3f0, Size: 0x50] 0x78d7102200
	<int,EEntity*> MapLaser;//[Offset: 0x440, Size: 0x50] 0x78d71022c0
	<int,EEntity*> MapAttack;//[Offset: 0x490, Size: 0x50] 0x78d7102380
	<int,EEntity*> MapLastedEffect;//[Offset: 0x4e0, Size: 0x50] 0x78d7102440
	<int,EEntity*> MapDirectHit;//[Offset: 0x530, Size: 0x50] 0x78d7102500
	<int,EEntity*> MapActionBall;//[Offset: 0x580, Size: 0x50] 0x78d71025c0
	<int,EEntity*> MapObject;//[Offset: 0x5d0, Size: 0x50] 0x78d7102680
	<int,EEntity*> MapAffixCarrier;//[Offset: 0x620, Size: 0x50] 0x78d7102740
	<int,EEntity*> MapDestructible;//[Offset: 0x670, Size: 0x50] 0x78d7102800
	<int,EEntity*> MapPortal;//[Offset: 0x6c0, Size: 0x50] 0x78d71028c0
	<int,EEntity*> MapArtifact;//[Offset: 0x710, Size: 0x50] 0x78d7102980
	<int,EEntity*> MapFollower;//[Offset: 0x760, Size: 0x50] 0x78d7102a40
	<int,EEntity*> MapElevator;//[Offset: 0x7b0, Size: 0x50] 0x78d7102b00
	<int,EEntity*> MapCheckPoint;//[Offset: 0x800, Size: 0x50] 0x78d7102bc0
	<int,EEntity*> MapBuffArea;//[Offset: 0x850, Size: 0x50] 0x78d7102c80
	<int,EEntity*> MapProximityShield;//[Offset: 0x8a0, Size: 0x50] 0x78d7102d40
	<int,EEntity*> MapObstacle;//[Offset: 0x8f0, Size: 0x50] 0x78d7102e00
	<int,EEntity*> MapGroundEffect;//[Offset: 0x940, Size: 0x50] 0x78d7102ec0
	<int,EEntity*> MapNPC;//[Offset: 0x990, Size: 0x50] 0x78d7102f80
	<int,EEntity*> MapInteractiveItem;//[Offset: 0x9e0, Size: 0x50] 0x78d7103040
	<int,EEntity*> MapUnit;//[Offset: 0xa30, Size: 0x50] 0x78d7103100
	<int,EEntity*> MapCustomTrap;//[Offset: 0xa80, Size: 0x50] 0x78d7100040
	<int,EEntity*> MapGamePlay;//[Offset: 0xad0, Size: 0x50] 0x78d7100100
	<int,EEntity*> MapServant;//[Offset: 0xb20, Size: 0x50] 0x78d71001c0
	EEntity*[] PendingDestroyEntitys;//[Offset: 0xb70, Size: 0x10] 0x78d71510a0
	void SetShowFightEntities(FString uiMenuName);// 0xa547ab0 0x78d7160080
	void SetHideFightEntities(FString uiMenuName);// 0xa547b88 0x78d7160160
	bool RemoveReasonToHideFightUI(out const FName reason);// 0xa547de0 0x78d7160240
	bool RemoveReasonToHideAllFightEntities(out const FName reason);// 0xa547c60 0x78d7160320
	static FightMgr* Instance();// 0xa5491c4 0x78d7160400
	EEntity* GetServant(int eId, bool bIncludingRemoved);// 0xa548160 0x78d71604e0
	EEntity* GetRole(int eId, bool bIncludingRemoved);// 0xa548fc0 0x78d71605c0
	EEntity* GetPortalByTrapId(int trapId);// 0xa548610 0x78d71606a0
	Actor* GetPortalActorByTrapId(int trapId);// 0xa548560 0x78d7160780
	EEntity* GetPlayerEntity(int64 PlayerId, bool bIncludingRemoved);// 0xa5490c0 0x78d7160860
	EEntity* GetNPC(int eId, bool bIncludingRemoved);// 0xa547f60 0x78d7160940
	EEntity* GetMapCustomTrap(int eId, bool bIncludingRemoved);// 0xa548260 0x78d7160a20
	EEntity* GetLastedEffect(int eId, bool bIncludingRemoved);// 0xa548bc0 0x78d7160b00
	EEntity* GetLaser(int eId, bool bIncludingRemoved);// 0xa548dc0 0x78d7160be0
	EEntity* GetInteractiveItem(int eId, bool bIncludingRemoved);// 0xa548460 0x78d7160cc0
	EEntity* GetGroundEffect(int eId, bool bIncludingRemoved);// 0xa5486c0 0x78d7160da0
	EEntity* GetGamePlay(int eId, bool bIncludingRemoved);// 0xa548060 0x78d7160e80
	EEntity* GetElevator(int eId, bool bIncludingRemoved);// 0xa548360 0x78d7160f60
	EEntity* GetDirectHit(int eId, bool bIncludingRemoved);// 0xa548ac0 0x78d7161040
	EEntity* GetDestructible(int eId, bool bIncludingRemoved);// 0xa5487c0 0x78d7161120
	EEntity* GetBullet(int eId, bool bIncludingRemoved);// 0xa548ec0 0x78d7161200
	EEntity* GetAttack(int eId, bool bIncludingRemoved);// 0xa548cc0 0x78d71612e0
	EEntity* GetAffixCarrier(int eId, bool bIncludingRemoved);// 0xa5488c0 0x78d71613c0
	EEntity* GetActionBall(int eId, bool bIncludingRemoved);// 0xa5489c0 0x78d71614a0
	bool AddReasonToHideFightUI(out const FName reason);// 0xa547ea0 0x78d7161580
	bool AddReasonToHideAllFightEntities(out const FName reason);// 0xa547d20 0x78d7161660

--------------------------------
Class: FileHelper.BlueprintFunctionLibrary.Object
	static bool WriteStringArrayToFile(FString Filename, out const FString[] FileContent, bool bUserDir);// 0xa55f7e4 0x78d7162e00
	static void WriteFileWithCodeOption(FString Filename, FString FileContent, bool bUserDir, int encodeOption);// 0xa55fc14 0x78d7162ee0
	static void WriteFile(FString Filename, FString FileContent, bool bUserDir);// 0xa55fdf8 0x78d7162fc0
	static void RemoveFloder(FString FloderName, bool bUserDir);// 0xa5605a4 0x78d71630a0
	static void RemoveFile(FString Filename, bool bUserDir);// 0xa56010c 0x78d7163180
	static bool ReadFileToStringArray(FString Filename, out FString[] Result, bool bUserDir);// 0xa55f9fc 0x78d7163260
	static FString ReadFile(FString Filename, bool bUserDir);// 0xa55ff84 0x78d7163340
	static bool IsFloderExist(FString FloderName, bool bUserDir);// 0xa560c94 0x78d7163420
	static bool IsFileExistFromProjectDir(FString Filename, bool bUserDir);// 0xa560344 0x78d7163500
	static bool IsFileExist(FString Filename, bool bUserDir);// 0xa560474 0x78d71635e0
	static FString[] GetFloderList(FString FloderName, bool bUserDir);// 0xa560a6c 0x78d71636c0
	static FString[] GetFileList(FString FloderName, FString Extension, bool bUserDir);// 0xa5607dc 0x78d71637a0
	static void AddFloder(FString FloderName, bool bUserDir);// 0xa5606c0 0x78d7163880
	static void AddFile(FString Filename, bool bUserDir);// 0xa560228 0x78d7163960

--------------------------------
Class: FootPrintMgr.Actor.Object
	EParticleFxComponent* ParticleCmp;//[Offset: 0x220, Size: 0x8] 0x78d7147600

--------------------------------
Class: GameGameplaySettingsLibrary.BlueprintFunctionLibrary.Object

--------------------------------
Class: GameGraphicsConfig.Object
	<enum,GameGraphicsPreset> Presets;//[Offset: 0x28, Size: 0x50] 0x78d7104600
	<enum,GameGraphicsConfig_Bloom> Bloom;//[Offset: 0x78, Size: 0x50] 0x78d71046c0
	<enum,GameGraphicsConfig_Vignette> Vignette;//[Offset: 0xc8, Size: 0x50] 0x78d7104780
	<enum,GameGraphicsConfig_Material> Material;//[Offset: 0x118, Size: 0x50] 0x78d7104840
	<enum,GameGraphicsConfig_Shadow> Shadow;//[Offset: 0x168, Size: 0x50] 0x78d7104900
	<enum,GameGraphicsConfig_Resolution> Resolution;//[Offset: 0x1b8, Size: 0x50] 0x78d71049c0
	<enum,GameGraphicsConfig_FrameRate> FrameRate;//[Offset: 0x208, Size: 0x50] 0x78d7101900
	<enum,GameGraphicsConfig_Mesh> mesh;//[Offset: 0x258, Size: 0x50] 0x78d71019c0
	<enum,GameGraphicsConfig_Effects> Effects;//[Offset: 0x2a8, Size: 0x50] 0x78d7101a80
	<enum,GameGraphicsConfig_Texture> Texture;//[Offset: 0x2f8, Size: 0x50] 0x78d7101b40
	<enum,GameGraphicsConfig_Weather> Weather;//[Offset: 0x348, Size: 0x50] 0x78d7101c00
	<enum,GameGraphicsConfig_AntiAliasing> AntiAliasing;//[Offset: 0x398, Size: 0x50] 0x78d7101cc0
	<enum,GameGraphicsConfig_SkeletalMesh> SkeletalMesh;//[Offset: 0x3e8, Size: 0x50] 0x78d7101d80
	<enum,GameGraphicsConfig_ColorFormat> ColorFormat;//[Offset: 0x438, Size: 0x50] 0x78d7101e40
	<int,FString> RenderQuality;//[Offset: 0x488, Size: 0x50] 0x78d7101f00

--------------------------------
Class: GameGraphicsPreset
	int ScalabilityLevel;//[Offset: 0x0, Size: 0x4] 0x78dbe2f280
	enum Bloom;//[Offset: 0x4, Size: 0x1] 0x78d361e700
	enum Vignette;//[Offset: 0x5, Size: 0x1] 0x78d361e7a0
	enum Material;//[Offset: 0x6, Size: 0x1] 0x78d361e840
	enum Shadow;//[Offset: 0x7, Size: 0x1] 0x78d361e8e0
	enum Resolution;//[Offset: 0x8, Size: 0x1] 0x78d361e980
	enum FrameRate;//[Offset: 0x9, Size: 0x1] 0x78d361ea20
	enum mesh;//[Offset: 0xa, Size: 0x1] 0x78d361eac0
	enum Effects;//[Offset: 0xb, Size: 0x1] 0x78d361eb60
	enum Texture;//[Offset: 0xc, Size: 0x1] 0x78d361ec00
	enum Weather;//[Offset: 0xd, Size: 0x1] 0x78d361eca0
	enum AntiAliasing;//[Offset: 0xe, Size: 0x1] 0x78d361ed40
	enum SkeletalMesh;//[Offset: 0xf, Size: 0x1] 0x78d361ede0
	enum ColorFormat;//[Offset: 0x10, Size: 0x1] 0x78d361ee80
	int RenderQuality;//[Offset: 0x14, Size: 0x4] 0x78dbe2d880

--------------------------------
Class: GameGraphicsConfig_Bloom
	int r_BloomQuality;//[Offset: 0x0, Size: 0x4] 0x78dbe2e880

--------------------------------
Class: GameGraphicsConfig_Vignette
	int ShowFlag_Vignette;//[Offset: 0x0, Size: 0x4] 0x78dbe2e900

--------------------------------
Class: GameGraphicsConfig_Material
	int r_MaterialQualityLevel;//[Offset: 0x0, Size: 0x4] 0x78dbe2e980

--------------------------------
Class: GameGraphicsConfig_Shadow
	int sg_ShadowQuality;//[Offset: 0x0, Size: 0x4] 0x78dbe2ea00
	int r_Shadow_MaxCSMResolution;//[Offset: 0x4, Size: 0x4] 0x78dbe2ea80
	int r_Shadow_MaxCSMResolution_UI;//[Offset: 0x8, Size: 0x4] 0x78dbe2eb00

--------------------------------
Class: GameGraphicsConfig_Resolution
	int ResolutionY;//[Offset: 0x0, Size: 0x4] 0x78dbe2eb80

--------------------------------
Class: GameGraphicsConfig_FrameRate
	int t_maxFPS;//[Offset: 0x0, Size: 0x4] 0x78dbe2ec00

--------------------------------
Class: GameGraphicsConfig_Mesh
	int r_ForceCustomLOD;//[Offset: 0x0, Size: 0x4] 0x78dbe2ec80
	int r_FoliageForceLOD;//[Offset: 0x4, Size: 0x4] 0x78dbe2ed00

--------------------------------
Class: GameGraphicsConfig_Effects
	int sg_EffectsQuality;//[Offset: 0x0, Size: 0x4] 0x78dbe2ee00

--------------------------------
Class: GameGraphicsConfig_Texture
	int sg_TextureQuality;//[Offset: 0x0, Size: 0x4] 0x78dbe2ee80

--------------------------------
Class: GameGraphicsConfig_Weather
	bool bFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe2ef00

--------------------------------
Class: GameGraphicsConfig_AntiAliasing
	int r_MobileMSAA;//[Offset: 0x0, Size: 0x4] 0x78dbe2ef80
	int r_MobileMSAA_UI;//[Offset: 0x4, Size: 0x4] 0x78dbe2f000

--------------------------------
Class: GameGraphicsConfig_SkeletalMesh
	int r_SkeletalMeshLODBias;//[Offset: 0x0, Size: 0x4] 0x78dbe2ed80

--------------------------------
Class: GameGraphicsConfig_ColorFormat
	int r_Mobile_SceneColorFormat;//[Offset: 0x0, Size: 0x4] 0x78dbe2f080
	int r_PostProcessingColorFormat;//[Offset: 0x4, Size: 0x4] 0x78dbe2f100

--------------------------------
Class: GameGraphicsSettings.Object
	enum Preset;//[Offset: 0x28, Size: 0x1] 0x78d71525e0
	enum Bloom;//[Offset: 0x29, Size: 0x1] 0x78d7152680
	enum Vignette;//[Offset: 0x2a, Size: 0x1] 0x78d7152720
	enum Material;//[Offset: 0x2b, Size: 0x1] 0x78d71527c0
	enum Shadow;//[Offset: 0x2c, Size: 0x1] 0x78d7152860
	enum Resolution;//[Offset: 0x2d, Size: 0x1] 0x78d7152900
	enum FrameRate;//[Offset: 0x2e, Size: 0x1] 0x78d7150060
	enum mesh;//[Offset: 0x2f, Size: 0x1] 0x78d7150100
	enum Effects;//[Offset: 0x30, Size: 0x1] 0x78d71501a0
	enum Texture;//[Offset: 0x31, Size: 0x1] 0x78d7150240
	enum Weather;//[Offset: 0x32, Size: 0x1] 0x78d71502e0
	enum AntiAliasing;//[Offset: 0x33, Size: 0x1] 0x78d7150380
	enum SkeletalMesh;//[Offset: 0x34, Size: 0x1] 0x78d7150420
	enum ColorFormat;//[Offset: 0x35, Size: 0x1] 0x78d71504c0
	int RenderQuality;//[Offset: 0x38, Size: 0x4] 0x78d7148680
	bool bInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78d7148700
	bool bCustomed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x78d7148780

--------------------------------
Class: GameGraphicsSettingsLibrary.BlueprintFunctionLibrary.Object
	static void SetWeatherSettings(enum Option);// 0xa563a68 0x78d7163c00
	static void SetVignetteSettings(enum Option);// 0xa5642d4 0x78d7163ce0
	static void SetTextureSettings(enum Option);// 0xa563c00 0x78d7163dc0
	static void SetSkeletalMeshSettings(enum Option);// 0xa5638d0 0x78d7163ea0
	static void SetShadowSettings(enum Option);// 0xa56413c 0x78d7163f80
	static void SetResolutionSettings(enum Option);// 0xa564070 0x78d7164060
	static void SetRenderQualitySettings(int Option);// 0xa563fa4 0x78d7164140
	static void SetPreset(enum Option);// 0xa56446c 0x78d7164220
	static void SetPCScreenResSetting(PCScreenResSetting InResSetting);// 0xa563648 0x78d7164300
	static void SetMeshSettings(enum Option);// 0xa563ccc 0x78d71643e0
	static void SetMaterialSettings(enum Option);// 0xa564208 0x78d71644c0
	static void SetFrameRateSettings(enum Option);// 0xa563d98 0x78d71645a0
	static void SetEffectsSettings(enum Option);// 0xa563b34 0x78d7164680
	static void SetColorFormatSettings(enum Option);// 0xa563804 0x78d7164760
	static void SetBloomSettings(enum Option);// 0xa5643a0 0x78d7164840
	static void SetAntiAliasingSettings(enum Option);// 0xa56399c 0x78d7164920
	static void RunHardwareBenchmarkAndApplyResults();// 0xa5647c4 0x78d7164a00
	static void RestoreShadow();// 0xa564760 0x78d7164ae0
	static void RestoreAntiAliasing();// 0xa564788 0x78d7164bc0
	static void OverrideIntConsoleVariable(FString Name, int Value);// 0xa56464c 0x78d7164ca0
	static void OverrideFloatConsoleVariable(FString Name, float Value);// 0xa564538 0x78d7164d80
	static void OpenHDModeForUI();// 0xa563634 0x78d7164e60
	static bool IsiPad();// 0xa5635e8 0x78d7164f40
	static bool IsHighLevelDevice();// 0xa5635b0 0x78d7165020
	static enum GetWeatherSettings();// 0xa563b00 0x78d7165100
	static enum GetVignetteSettings();// 0xa56436c 0x78d71651e0
	static enum GetTextureSettings();// 0xa563c98 0x78d71652c0
	static enum GetSkeletalMeshSettings();// 0xa563968 0x78d71653a0
	static enum GetShadowSettings();// 0xa5641d4 0x78d7165480
	static enum GetResolutionSettings();// 0xa564108 0x78d7165560
	static int GetRenderQualitySettings();// 0xa56403c 0x78d7165640
	static <int,FString> GetRenderQualityConfig();// 0xa563e9c 0x78d7161d60
	static enum GetPreset();// 0xa564504 0x78d7161e40
	static PCScreenResSetting[] GetPCSupportedResSettings();// 0xa5636f4 0x78d7161f20
	static enum GetMeshSettings();// 0xa563d64 0x78d7162000
	static enum GetMaterialSettings();// 0xa5642a0 0x78d71620e0
	static GameGraphicsSettings* GetGameGraphicsSettings();// 0xa5647d8 0x78d71621c0
	static GameGraphicsConfig* GetGameGraphicsConfig();// 0xa56480c 0x78d71622a0
	static enum GetFrameRateSettings();// 0xa563e30 0x78d7162380
	static bool GetEnableEpicRenderQuality();// 0xa563e64 0x78d7162460
	static enum GetEffectsSettings();// 0xa563bcc 0x78d7162540
	static PCScreenResSetting GetCurPCScreenResSetting();// 0xa5637c8 0x78d7162620
	static enum GetColorFormatSettings();// 0xa56389c 0x78d7162700
	static enum GetBloomSettings();// 0xa564438 0x78d71627e0
	static enum GetAntiAliasingSettings();// 0xa563a34 0x78d71628c0
	static void CloseHDModeForUI();// 0xa563620 0x78d71629a0
	static void ApplyShadowForUI();// 0xa564774 0x78d7162a80
	static void ApplySettings();// 0xa5647b0 0x78d7162b60
	static void ApplyMouseLock();// 0xa56359c 0x78d7162c40
	static void ApplyAntiAliasingForUI();// 0xa56479c 0x78d7162d20

--------------------------------
Class: PCScreenResSetting
	IntPoint res;//[Offset: 0x0, Size: 0x8] 0x78dbe2f180
	byte Mode;//[Offset: 0x8, Size: 0x1] 0x78dbe2f200

--------------------------------
Class: GameInputSettings.Object
	<int,int> BotSkillBindIndex;//[Offset: 0x28, Size: 0x50] 0x78d7104480
	float MouseSensitivity;//[Offset: 0x78, Size: 0x4] 0x78d714aa80
	bool bHasInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x78d7149900

--------------------------------
Class: GameInputSettingsLibrary.BlueprintFunctionLibrary.Object
	static void SetSystemMousSensitivity(float Sensitivity);// 0xa568da0 0x78d7166d00
	static void SetMouseSensitivityInSetting(float Sensi);// 0xa568ea0 0x78d7166de0
	static void RevertMousSensitivity();// 0xa568d8c 0x78d7166ec0
	static void ResetMouseSensitivity();// 0xa568d78 0x78d7166fa0
	static float GetSystemMousSensitivity();// 0xa568e38 0x78d7167080
	static int GetPadIndexByIndex(int Index);// 0xa568fe0 0x78d7167160
	static float GetMouseSensitivityInSetting();// 0xa568e6c 0x78d7167240
	static GameInputSettings* GetGameInputSettings();// 0xa569168 0x78d7167320
	static int GetBotIndexByPadIndex(int botIndex);// 0xa568f38 0x78d7163a40
	static void ChangeBotInput(int src, int tar);// 0xa569088 0x78d7163b20

--------------------------------
Class: GameMasterHelper.BlueprintFunctionLibrary.Object

--------------------------------
Class: GameMgr.Object
	static GameMgr* Instance();// 0xa5698d0 0x78d7166b40
	World* GetWorld();// 0xa569894 0x78d7166c20

--------------------------------
Class: GauntletMgr.Object

--------------------------------
Class: LeaveMgr.Object
	static LeaveMgr* Instance();// 0xa56a690 0x78d7166a60

--------------------------------
Class: LoadMgr.Object
	void StopSequenceAudio(LevelSequenceActor* LevelSequenceActor);// 0xa56b544 0x78d7169000
	void SkipFightSequence();// 0xa56b12c 0x78d7165720
	void ShowFightSequenceInLua(const int SequenceID);// 0xa56b084 0x78d7165800
	void SetLevelSequenceActorLocation(LevelSequenceActor* LevelSequenceActor, out const Vector Location);// 0xa56b73c 0x78d71658e0
	void ResetMatineeTimeDilation();// 0xa56b530 0x78d71659c0
	void RemoveFightSequence(int dynId);// 0xa56b140 0x78d7165aa0
	void PlaySequenceAudioFinish(LevelSequenceActor* LevelSequenceActor);// 0xa56b5ec 0x78d7165b80
	void PlaySequenceAudioBegin(LevelSequenceActor* LevelSequenceActor);// 0xa56b694 0x78d7165c60
	static LoadMgr* Instance();// 0xa56bcac 0x78d7165d40
	ESkeletalMeshUserData_SelectRole* GetUIRoleUserDataByMeshPath(FString Path);// 0xa56acb4 0x78d7165e20
	ESkeletalMeshUserData_SelectRole* GetUIRoleUserData(SkeletalMeshComponent* SkeletalMeshCom);// 0xa56afd4 0x78d7165f00
	ESkeletalMeshUserData_UIPet* GetUIPetUserDataByMeshPath(FString Path);// 0xa56ad94 0x78d7165fe0
	ESkeletalMeshUserData_UIPet* GetUIPetUserData(SkeletalMeshComponent* SkeletalMeshCom);// 0xa56af24 0x78d71660c0
	Texture2D* GetTexture2DWithPath(FString imagePath);// 0xa56bbcc 0x78d71661a0
	ESkeletalMeshUserData_UIPet* GetStaticMeshUIPetUserData(StaticMeshComponent* StaticMeshCom);// 0xa56ae74 0x78d7166280
	MediaPlayer* GetMediaPlayer(FString ResourcePath);// 0xa56b29c 0x78d7166360
	LevelSequence* GetLevelSequenceWithPath(FString FilePath);// 0xa56baec 0x78d7166440
	LevelSequenceActor* GetLevelSequenceActorById(int ID, int LoopCount);// 0xa56b834 0x78d7166520
	LevelSequenceActor* GetLevelSequenceActor(FString SequencePath);// 0xa56b92c 0x78d7166600
	FString GetIniPlatformName();// 0xa56b45c 0x78d71666e0
	MaterialInstanceDynamic* GetDynamicMaterialInstanceWithPath(FString FilePath);// 0xa56ba0c 0x78d71667c0
	AnimSequence* GetAnimSequence(FString ResourcePath);// 0xa56b37c 0x78d71668a0
	bool AddFightSequence(int SequenceID);// 0xa56b1e8 0x78d7166980

--------------------------------
Class: MediaPlayer.Object
	delegate OnEndReached;//[Offset: 0x28, Size: 0x10] 0x78d72bb900
	delegate OnMediaClosed;//[Offset: 0x38, Size: 0x10] 0x78d72bb980
	delegate OnMediaOpened;//[Offset: 0x48, Size: 0x10] 0x78d72bba00
	delegate OnMediaOpenFailed;//[Offset: 0x58, Size: 0x10] 0x78d72bba80
	delegate OnPlaybackResumed;//[Offset: 0x68, Size: 0x10] 0x78d72bbb00
	delegate OnPlaybackSuspended;//[Offset: 0x78, Size: 0x10] 0x78d72bbb80
	delegate OnSeekCompleted;//[Offset: 0x88, Size: 0x10] 0x78d72bbc00
	delegate OnTracksChanged;//[Offset: 0x98, Size: 0x10] 0x78d72bbc80
	Timespan CacheAhead;//[Offset: 0xa8, Size: 0x8] 0x78d72bbd00
	Timespan CacheBehind;//[Offset: 0xb0, Size: 0x8] 0x78d72bbd80
	Timespan CacheBehindGame;//[Offset: 0xb8, Size: 0x8] 0x78d72bbe00
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x78d72bbe80
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x78d72bbf00
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 0x1] 0x78d72bbf80
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 0x1] 0x78d72bc000
	MediaPlaylist* Playlist;//[Offset: 0xc8, Size: 0x8] 0x78d72bc080
	int PlaylistIndex;//[Offset: 0xd0, Size: 0x4] 0x78d72bc100
	Timespan TimeDelay;//[Offset: 0xd8, Size: 0x8] 0x78d72bc180
	float HorizontalFieldOfView;//[Offset: 0xe0, Size: 0x4] 0x78d72bc200
	float VerticalFieldOfView;//[Offset: 0xe4, Size: 0x4] 0x78d72bc280
	Rotator ViewRotation;//[Offset: 0xe8, Size: 0xc] 0x78d72bc300
	Guid PlayerGuid;//[Offset: 0x120, Size: 0x10] 0x78d72bc380
	bool SupportsSeeking();// 0xbd4beec 0x78d72c5fe0
	bool SupportsScrubbing();// 0xbd4bf24 0x78d72c60c0
	bool SupportsRate(float Rate, bool Unthinned);// 0xbd4bf5c 0x78d72c61a0
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0xbd4c108 0x78d72c6280
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0xbd4c218 0x78d72c6360
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0xbd4c368 0x78d72c6440
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0xbd4c4b0 0x78d72c6520
	void SetTimeDelay(Timespan TimeDelay);// 0xbd4c064 0x78d72c6600
	bool SetRate(float Rate);// 0xbd4c6ac 0x78d72c66e0
	bool SetNativeVolume(float Volume);// 0xbd4c5f8 0x78d72c67c0
	void SetMediaOptions(const MediaSource* Options);// 0xbd4c760 0x78d72c68a0
	bool SetLooping(bool Looping);// 0xbd4c808 0x78d72c6980
	void SetDesiredPlayerName(FName PlayerName);// 0xbd4c8c4 0x78d72c6a60
	void SetBlockOnTime(out const Timespan Time);// 0xbd4c96c 0x78d72c6b40
	bool SelectTrack(enum TrackType, int TrackIndex);// 0xbd4ca1c 0x78d72c6c20
	bool Seek(out const Timespan Time);// 0xbd4cb1c 0x78d72c6d00
	bool Rewind();// 0xbd4cbd8 0x78d72c6de0
	bool Reopen();// 0xbd4cc10 0x78d72c6ec0
	bool Previous();// 0xbd4cc48 0x78d72c6fa0
	void PlayAndSeek();// 0xbd4cc80 0x78d72c7080
	bool Play();// 0xbd4cc94 0x78d72c7160
	bool Pause();// 0xbd4cccc 0x78d72c7240
	bool OpenUrl(FString URL);// 0xbd4cd04 0x78d72c7320
	bool OpenSourceWithOptions(MediaSource* MediaSource, out const MediaPlayerOptions Options);// 0xbd4cfe8 0x78d72c3a40
	void OpenSourceLatent(const Object* WorldContextObject, LatentActionInfo LatentInfo, MediaSource* MediaSource, out const MediaPlayerOptions Options, out bool bSuccess);// 0xbd4cde8 0x78d72c3b20
	bool OpenSource(MediaSource* MediaSource);// 0xbd4d104 0x78d72c3c00
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int Index);// 0xbd4d1b8 0x78d72c3ce0
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0xbd4d2b8 0x78d72c3dc0
	bool OpenFile(FString FilePath);// 0xbd4d370 0x78d72c3ea0
	bool Next();// 0xbd4d454 0x78d72c3f80
	bool IsReady();// 0xbd4d48c 0x78d72c4060
	bool IsPreparing();// 0xbd4d4fc 0x78d72c4140
	bool IsPlaying();// 0xbd4d534 0x78d72c4220
	bool IsPaused();// 0xbd4d56c 0x78d72c4300
	bool IsLooping();// 0xbd4d5a4 0x78d72c43e0
	bool IsConnecting();// 0xbd4d5dc 0x78d72c44c0
	bool IsClosed();// 0xbd4d4c4 0x78d72c45a0
	bool IsBuffering();// 0xbd4d614 0x78d72c4680
	bool HasError();// 0xbd4d64c 0x78d72c4760
	Rotator GetViewRotation();// 0xbd4d6b8 0x78d72c4840
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0xbd4d6f0 0x78d72c4920
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0xbd4d858 0x78d72c4a00
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0xbd4d950 0x78d72c4ae0
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0xbd4da48 0x78d72c4bc0
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0xbd4db44 0x78d72c4ca0
	float GetVerticalFieldOfView();// 0xbd4dc3c 0x78d72c4d80
	FString GetUrl();// 0xbd4dc70 0x78d72c4e60
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0xbd4dcf4 0x78d72c4f40
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0xbd4de60 0x78d72c5020
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0xbd4df5c 0x78d72c5100
	MediaTimeStampInfo* GetTimeStamp();// 0xbd4e0c8 0x78d72c51e0
	Timespan GetTimeDelay();// 0xbd4d684 0x78d72c52c0
	Timespan GetTime();// 0xbd4e0fc 0x78d72c53a0
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0xbd4e130 0x78d72c5480
	int GetSelectedTrack(enum TrackType);// 0xbd4e26c 0x78d72c5560
	float GetRate();// 0xbd4e31c 0x78d72c5640
	int GetPlaylistIndex();// 0xbd4e350 0x78d72c1d60
	MediaPlaylist* GetPlaylist();// 0xbd4e36c 0x78d72c1e40
	FName GetPlayerName();// 0xbd4e388 0x78d72c1f20
	int GetNumTracks(enum TrackType);// 0xbd4e4b8 0x78d72c2000
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0xbd4e3bc 0x78d72c20e0
	FText GetMediaName();// 0xbd4e568 0x78d72c21c0
	float GetHorizontalFieldOfView();// 0xbd4e644 0x78d72c22a0
	Timespan GetDuration();// 0xbd4e678 0x78d72c2380
	FName GetDesiredPlayerName();// 0xbd4e6ac 0x78d72c2460
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0xbd4e6e0 0x78d72c2540
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0xbd4e848 0x78d72c2620
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0xbd4e940 0x78d72c2700
	void Close();// 0xbd4ea38 0x78d72c27e0
	bool CanPlayUrl(FString URL);// 0xbd4ea4c 0x78d72c28c0
	bool CanPlaySource(MediaSource* MediaSource);// 0xbd4eb30 0x78d72c29a0
	bool CanPause();// 0xbd4ebe4 0x78d72c2a80

--------------------------------
Class: MediaPlaylist.Object
	MediaSource*[] items;//[Offset: 0x28, Size: 0x10] 0x78d7275420
	bool Replace(int Index, MediaSource* Replacement);// 0xbd50790 0x78d72c8f20
	bool RemoveAt(int Index);// 0xbd50890 0x78d72c9000
	bool Remove(MediaSource* MediaSource);// 0xbd50944 0x78d72c5720
	int Num();// 0xbd509f8 0x78d72c5800
	void Insert(MediaSource* MediaSource, int Index);// 0xbd50a14 0x78d72c58e0
	MediaSource* GetRandom(out int OutIndex);// 0xbd50b08 0x78d72c59c0
	MediaSource* GetPrevious(out int InOutIndex);// 0xbd50bc4 0x78d72c5aa0
	MediaSource* GetNext(out int InOutIndex);// 0xbd50c80 0x78d72c5b80
	MediaSource* Get(int Index);// 0xbd50d3c 0x78d72c5c60
	bool AddUrl(FString URL);// 0xbd50dec 0x78d72c5d40
	bool AddFile(FString FilePath);// 0xbd50ed0 0x78d72c5e20
	bool Add(MediaSource* MediaSource);// 0xbd50fb4 0x78d72c5f00

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0xbd52ac8 0x78d72c30a0
	void SetMediaOptionString(out const FName Key, FString Value);// 0xbd526b0 0x78d72c3180
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0xbd527d8 0x78d72c3260
	void SetMediaOptionFloat(out const FName Key, float Value);// 0xbd528d0 0x78d72c3340
	void SetMediaOptionBool(out const FName Key, bool Value);// 0xbd529c8 0x78d72c3420
	FString GetUrl();// 0xbd52b08 0x78d72c3500

--------------------------------
Class: MediaPlayerOptions
	MediaPlayerTrackOptions Tracks;//[Offset: 0x0, Size: 0x1c] 0x78dbed4280
	Timespan SeekTime;//[Offset: 0x20, Size: 0x8] 0x78dbed4300
	enum PlayOnOpen;//[Offset: 0x28, Size: 0x1] 0x78dbe5a240
	enum Loop;//[Offset: 0x29, Size: 0x1] 0x78dbe5a2e0

--------------------------------
Class: MediaPlayerTrackOptions
	int Audio;//[Offset: 0x0, Size: 0x4] 0x78dbed6000
	int Caption;//[Offset: 0x4, Size: 0x4] 0x78dbed6080
	int MetaData;//[Offset: 0x8, Size: 0x4] 0x78dbed6100
	int Script;//[Offset: 0xc, Size: 0x4] 0x78dbed6180
	int Subtitle;//[Offset: 0x10, Size: 0x4] 0x78dbed6200
	int Text;//[Offset: 0x14, Size: 0x4] 0x78dbed6280
	int Video;//[Offset: 0x18, Size: 0x4] 0x78dbed6300

--------------------------------
Class: MediaTimeStampInfo.Object
	Timespan Time;//[Offset: 0x28, Size: 0x8] 0x78d72b8100
	int64 SequenceIndex;//[Offset: 0x30, Size: 0x8] 0x78d72b8180

--------------------------------
Class: LocalizationMgr.Object
	static void SetOptionsLanguage(FString LanguageCode);// 0xa56c9c4 0x78d7168900
	static void SetLanguageCodeModified();// 0xa56c92c 0x78d71689e0
	static FString ReadOptionsLanguageFromIni();// 0xa56c820 0x78d7168ac0
	static LocalizationMgr* Instance();// 0xa56cac4 0x78d7168ba0
	static FString GetOptionsLanguage();// 0xa56c940 0x78d7168c80
	static bool GetLanguagePackEnable();// 0xa56ca8c 0x78d7168d60
	static bool GetLanguageCodeModified();// 0xa56c8f4 0x78d7168e40
	static FString GetImagePath(FString ImageName);// 0xa56c6e8 0x78d7168f20

--------------------------------
Class: LuaActorMgr.Object
	void SetStaticMeshMaterialsVectorParameterVal(StaticMeshComponent* StaticMeshComponent, FString ParameterName, Vector parameterVal);// 0xa56d3e4 0x78d7167940
	void SetStaticMeshMaterialsScalarParameterVal(StaticMeshComponent* StaticMeshComponent, FString ParameterName, float parameterVal);// 0xa56d548 0x78d7167a20
	void SetStaticMeshMaterialsLinearColorParameterVal(StaticMeshComponent* StaticMeshComponent, FString ParameterName, LinearColor parameterVal);// 0xa56d280 0x78d7167b00
	bool SetStaticMeshMaterialScalarParameterValByIndex(StaticMeshComponent* StaticMeshComponent, int MaterialIndex, FString ParameterName, float parameterVal);// 0xa56d0c4 0x78d7167be0
	void SetStaticMeshMaterial(Actor* Actor, int Index, FString ResourcePath);// 0xa56ddb0 0x78d7167cc0
	void SetStaticMesh(Actor* Actor, FString ResourcePath);// 0xa56dfa4 0x78d7167da0
	void SetParticleTemplate(SceneComponent* ParticleSystem, FString Path);// 0xa56da1c 0x78d7167e80
	void SetEmitterActive(Actor* Emitter, bool Active);// 0xa56e148 0x78d7167f60
	void SetComponentStaticMesh(StaticMeshComponent* StaticMeshComponent, FString Path);// 0xa56dc98 0x78d7168040
	void SetComponentMaterial(StaticMeshComponent* StaticMeshComponent, int Index, FString Path);// 0xa56db34 0x78d7168120
	void SetComponentActive(ActorComponent* ActorComponent, bool Active);// 0xa56e244 0x78d7168200
	void SetActorVectorMaterialParameterVal(Actor* OtherActor, FString ParameterName, Vector parameterVal);// 0xa56d6ac 0x78d71682e0
	void SetActorScalarMaterialParameterVal(Actor* OtherActor, FString ParameterName, float parameterVal);// 0xa56d810 0x78d71683c0
	void ResetParticleComponent(ParticleSystemComponent* ParticleSystem);// 0xa56d974 0x78d71684a0
	static LuaActorMgr* Instance();// 0xa56e7bc 0x78d7168580
	FString GetActorName(Actor* Actor);// 0xa56e69c 0x78d7168660
	void DestroyActor(Actor* Actor);// 0xa56e340 0x78d7168740
	Actor* CreateActor(FString ClassName, Vector Position, FString ResourcePath);// 0xa56e3e8 0x78d7168820

--------------------------------
Class: EventListener.Object

--------------------------------
Class: ButtonEventListener.EventListener.Object
	void OnButtonUnhoveredEvent();// 0xa56f284 0x78d716ace0
	void OnButtonReleasedEvent();// 0xa56f2ac 0x78d7167400
	void OnButtonPressedEvent();// 0xa56f2c0 0x78d71674e0
	void OnButtonHoveredEvent();// 0xa56f298 0x78d71675c0
	void OnButtonClickedEvent();// 0xa56f2d4 0x78d71676a0
	void DelButtonLongClickedListener();// 0xa56f25c 0x78d7167780
	void AddButtonLongClickedListener();// 0xa56f270 0x78d7167860

--------------------------------
Class: WidgetEventListener.EventListener.Object
	void UserScrolled(float CurrentOffset);// 0xa56f79c 0x78d716a500
	void SliderOnValueChangedTrigger(float SliderValue);// 0xa56f938 0x78d716a5e0
	void MediaPlayerEndReached();// 0xa56f788 0x78d716a6c0
	void LevelSequenceFinishedTrigger();// 0xa56fa90 0x78d716a7a0
	void InputTouchTrigger(byte FingerIndex, Actor* TouchedActor);// 0xa56f844 0x78d716a880
	void EditableTextEventTrigger(out const FText InText, byte InCommitMethod);// 0xa56fdc8 0x78d716a960
	void EditableTextChangedEventTrigger(out const FText InText);// 0xa56fc4c 0x78d716aa40
	void ComboBoxStringEventTrigger(FString InSelectedItem, byte InSelectionType);// 0xa56faa4 0x78d716ab20
	void CheckStateChangedTrigger(bool bIsChecked);// 0xa56f9e0 0x78d716ac00

--------------------------------
Class: HotkeyEventListener.EventListener.Object
	void HotkeyTriggered(int ID);// 0xa5704dc 0x78d716a420

--------------------------------
Class: LuaEventMgr.Object
	<int,EventListener*> EventMap;//[Offset: 0x28, Size: 0x50] 0x78d71043c0

--------------------------------
Class: LuaMgr.Object
	bool ReportLuaToBugly(FString msg, FString Stack);// 0xa570a24 0x78d7169c40
	static LuaMgr* Instance();// 0xa5716d0 0x78d7169d20
	void CallObjectBpFunc(Object* Object, FString BpFuncName);// 0xa5714e0 0x78d7169e00
	void CallLuaWithWidgetArray(const FString LuaFuncName, out const UserWidget*[] Widgets);// 0xa570e80 0x78d7169ee0
	void CallLuaWithIntAndWidget(const FString LuaFuncName, int Param1, int Param2, UserWidget* Param3);// 0xa57129c 0x78d7169fc0
	void CallLuaWithInt(const FString LuaFuncName, int Param1, int Param2, int64 Param3);// 0xa571058 0x78d716a0a0
	void CallLevelBpFunc(FString BpFuncName);// 0xa5715f8 0x78d716a180
	void BpCallLuaWithObjectStringIntParam(FString LuaFuncName, Object* ObjectParam, FString StringParam, int IntParam);// 0xa570b78 0x78d716a260
	void BpCallLuaWithIntParam(FString LuaFuncName, int IntParam);// 0xa570d5c 0x78d716a340

--------------------------------
Class: LuaModelShowMgr.Object
	void UpdateRoleRotation(float Yaw);// 0xa573860 0x78d7169620
	void SetRoleAnimBpPropertyValue(FName PropertyName, out const float NewValue);// 0xa5735d0 0x78d7169700
	void SetRoleAnimBpLookYaw(out const float NewValue);// 0xa5736d0 0x78d71697e0
	void SetMainSkeletalMeshComponent(SkeletalMeshComponent* SkeletalMeshComponent);// 0xa5737b8 0x78d71698c0
	static LuaModelShowMgr* Instance();// 0xa573908 0x78d71699a0
	SkeletalMeshComponent* GetRoleSkeletalMeshComponent();// 0xa573784 0x78d7169a80
	float GetRoleAnimBpFloatPropertyValue(FString PropertyName);// 0xa573468 0x78d7169b60

--------------------------------
Class: LuaRunnableMgr.Object
	static LuaRunnableMgr* Instance();// 0xa573e78 0x78d7169540

--------------------------------
Class: MapBossRoom.Actor.Object

--------------------------------
Class: MapBossRoomWall.Actor.Object

--------------------------------
Class: MiniMapSave.SaveGame.Object
	byte[] MinMapData;//[Offset: 0x28, Size: 0x10] 0x78d7153bc0

--------------------------------
Class: MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection* SectionToKey;//[Offset: 0x78, Size: 0x8] 0x78d7190c00
	MovieScenePropertyBinding PropertyBinding;//[Offset: 0x80, Size: 0x14] 0x78d7190c80
	MovieSceneSection*[] Sections;//[Offset: 0x98, Size: 0x10] 0x78d7153b20

--------------------------------
Class: MovieScenePropertyBinding
	FName PropertyName;//[Offset: 0x0, Size: 0x8] 0x78dbe4f300
	FName PropertyPath;//[Offset: 0x8, Size: 0x8] 0x78dbe4f380
	bool bCanUseClassLookup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78dbe4f400

--------------------------------
Class: MovieSceneReloadRoleTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MysteriousCamera.Pawn.Actor.Object
	SpringArmComponent* OurCameraSpringArm;//[Offset: 0x280, Size: 0x8] 0x78d7190b80

--------------------------------
Class: MysteriousMgr.Object
	class AMysteriousFlagActor* MysteriousFlagActorClass;//[Offset: 0x88, Size: 0x8] 0x78d7153a80
	void RestoreCameraToOriginalLocation();// 0xa5752b0 0x78d716c560
	void RemoveMysteriousCamera();// 0xa57529c 0x78d716c640
	bool RemoveAFlagByID(int ID);// 0xa575524 0x78d716c720
	void MoveCameraToNewLocation(const Vector NewLocation);// 0xa5752c4 0x78d716c800
	static MysteriousMgr* Instance();// 0xa57588c 0x78d716c8e0
	UserWidget* GetFlagWidgetComByID(int ID);// 0xa575688 0x78d716c9c0
	AMysteriousFlagActor* GetFlagActorByID(int ID);// 0xa5755d8 0x78d71690e0
	AMysteriousFlagActor* CreateFlagAddToWorld(int ID, const Vector Location, const Rotator Rotation);// 0xa575738 0x78d71691c0
	void ClearAllFlagActor();// 0xa575878 0x78d71692a0
	bool ChangeGameCamera(bool bIsMysterious);// 0xa57536c 0x78d7169380
	bool AddMysteriousCamera(const Vector originalLocation, const Rotator originalRotation);// 0xa575428 0x78d7169460

--------------------------------
Class: NameHelper.BlueprintFunctionLibrary.Object

--------------------------------
Class: NoviceGuideMgr.Object
	bool SetTaskButton(Widget* buttonWidget);// 0xa5760dc 0x78d716c2c0
	bool IsTaskButtonVaild();// 0xa5760a4 0x78d716c3a0
	static NoviceGuideMgr* Instance();// 0xa576190 0x78d716c480

--------------------------------
Class: PadHelper.BlueprintFunctionLibrary.Object
	static Vector2D ViewportPosToUMGPos(Object* WorldContextObject, out const Vector2D ViewportPosition);// 0xa576a58 0x78d716b840
	static Vector2D UMGPosToViewportPos(Object* WorldContextObject, out const Vector2D LocalPosition);// 0xa576960 0x78d716b920
	static Vector2D UMGPosToCanvasPos(CanvasPanelSlot* CanvasSlot, out const Geometry Geometry, out const Vector2D LocalPosition);// 0xa57681c 0x78d716ba00
	static void KeepInRect(out Vector2D byRefPos, out const Vector4 Rect);// 0xa576b50 0x78d716bae0
	static bool IsPosInRect(out const Vector2D Pos, out const Vector4 Rect);// 0xa576c50 0x78d716bbc0
	static void InitPadHelper(int Num);// 0xa5771c4 0x78d716bca0
	static Vector GetPadDir(int Index);// 0xa576d5c 0x78d716bd80
	static Vector2D CanvasPosToUMGPos(CanvasPanelSlot* CanvasSlot, out const Geometry Geometry, out const Vector2D CanvasPosition);// 0xa5766d8 0x78d716be60
	static int CalcPadIndex(float AxisX, float AxisY, float Limit);// 0xa576f48 0x78d716bf40
	static Vector CalcPadDir(float AxisX, float AxisY, float Limit);// 0xa576e08 0x78d716c020
	static Vector CalcKeyboardDir(float AxisX, float AxisY, float Limit);// 0xa577084 0x78d716c100
	static float Atan2Stable(float X, float Y);// 0xa5765e8 0x78d716c1e0

--------------------------------
Class: PCHelper.BlueprintFunctionLibrary.Object
	static bool IsPlatformPC();// 0xa5777f4 0x78d716b760

--------------------------------
Class: PerformMgr.Object

--------------------------------
Class: PlatformDifferencesMgr.Object
	FString LuaSDKCallback;//[Offset: 0x28, Size: 0x10] 0x78d7192800
	CoreGameInstance* InstanceRef;//[Offset: 0x3c, Size: 0x8] 0x78d7192880
	bool RequestSDKEvent(int sdkRequestType, out const PlatformSDKRequestParams Params);// 0xa577d4c 0x78d716e6a0
	void OnRecvSDKDelegate(out const XDSDKResponse response);// 0xa577c48 0x78d716adc0
	bool IsSteam();// 0xa578138 0x78d716aea0
	bool IsNeedQuerryPayOrder();// 0xa578170 0x78d716af80
	bool IsGoogle();// 0xa5780c8 0x78d716b060
	bool IsArc();// 0xa578100 0x78d716b140
	static PlatformDifferencesMgr* Instance();// 0xa5782e8 0x78d716b220
	FString GetVersionServerConfig(FString Key);// 0xa577f88 0x78d716b300
	void GetGamePlatformDifferences(out PlatformDifferencesResult Data);// 0xa5781bc 0x78d716b3e0
	void GetGameLoginModeDifferences();// 0xa5781a8 0x78d716b4c0
	bool CheckPlatformAvaliable();// 0xa577f50 0x78d716b5a0
	void AddSDKNotify(FString luaFunction);// 0xa577e78 0x78d716b680

--------------------------------
Class: PlatformSDKRequestParams
	int SDKEventType;//[Offset: 0x0, Size: 0x4] 0x78dbe40180
	FString CustomParams;//[Offset: 0x8, Size: 0x10] 0x78dbe40200
	FString OrderId;//[Offset: 0x18, Size: 0x10] 0x78dbe40280
	FString productId;//[Offset: 0x28, Size: 0x10] 0x78dbe40300
	FString RoleId;//[Offset: 0x38, Size: 0x10] 0x78dbe40380
	FString RoleName;//[Offset: 0x48, Size: 0x10] 0x78dbe40400
	FString ServerId;//[Offset: 0x58, Size: 0x10] 0x78dbe40480

--------------------------------
Class: XDSDKResponse

--------------------------------
Class: PlatformDifferencesResult
	bool NeedAutoLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe20b00
	bool IsGuestLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78dbe20b80
	bool IsTaptapLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78dbe20c00
	bool IsGoogleLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78dbe20c80
	bool IsAppleLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78dbe20d00
	bool CanRequestRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x78dbe20d80
	bool NeedrealName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x78dbe20e00
	bool CanRequestTapMoment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1] 0x78dbe20e80
	bool OpenCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78dbe20f00
	<FString,int> UserData;//[Offset: 0x10, Size: 0x50] 0x78dbdfd480

--------------------------------
Class: PlayerInfoHelper.Object

--------------------------------
Class: PlayerMgr.Object
	ERolePlayer* PlayerEntity;//[Offset: 0x30, Size: 0x8] 0x78d7192180
	Vector PlayerRecordPos;//[Offset: 0x38, Size: 0xc] 0x78d7192200
	void SetFuncEkeyToDefault();// 0xa578c1c 0x78d716dde0
	void SetFuncEkeyByFuncNameAndId(FString FuncName, int ID);// 0xa578c30 0x78d716dec0
	void RevertMousSensitivity();// 0xa578c08 0x78d716dfa0
	void ResetMouseSensitivity();// 0xa578bf4 0x78d716e080
	void PlaySuitableMontage(FString animString, bool stopPlay);// 0xa5790a4 0x78d716e160
	void PlayEnterSceneAnim(int playerSeqeunceId, int playerVFXId);// 0xa5791d0 0x78d716e240
	void OnPlayerEnterScene(int enterSceneType, FString Params);// 0xa5792c0 0x78d716e320
	void InvalidateViewportSizeForPlayerWidgets();// 0xa579090 0x78d716e400
	static PlayerMgr* Instance();// 0xa5793d8 0x78d716e4e0
	Key GetFuncEkeyByFuncName(FString FuncName);// 0xa578dd8 0x78d716e5c0

--------------------------------
Class: PlayerVoiceMgr.Object
	Actor* VoiceActor;//[Offset: 0x28, Size: 0x8] 0x78d7194080
	PostEventAsync* VoicePostEventAsync;//[Offset: 0xd8, Size: 0x8] 0x78d7194100
	void VoiceEndCallBack(int PlayingID);// 0xa579a38 0x78d716dc20
	static PlayerVoiceMgr* Instance();// 0xa579ae0 0x78d716dd00

--------------------------------
Class: ProjectorActor.Actor.Object
	void LoadPreview(int RTSize, float FOV, Rotator cameraRotation, float Gamma, bool bPostProcess);// 0xa579ed4 0x78d716db40

--------------------------------
Class: ProjectorMgr.Object
	void TryCreateCapturesWithParam(Image*[] images, int RTSize, float FOV, Rotator cameraRotation, float Gamma, bool bPostProcess);// 0xa57a3a0 0x78d716d980
	static ProjectorMgr* Instance();// 0xa57a698 0x78d716da60

--------------------------------
Class: PSOHelper.BlueprintFunctionLibrary.Object
	static void SavePipelineFileCache();// 0xa57d780 0x78d716d6e0
	static int NumPrecompilesRemaining();// 0xa57d794 0x78d716d7c0
	static bool IsGameFirstStart();// 0xa57d7c8 0x78d716d8a0

--------------------------------
Class: QAHelper.BlueprintFunctionLibrary.Object
	static void UnequipSupportSkill(int SkillPos, FString ItemName);// 0xa57ef54 0x78d71c1e40
	static void UnequipSkill(int SkillPos, FString ItemName);// 0xa57f1b0 0x78d71c1f20
	static void UnEquipItem(FString ItemId);// 0xa57f3d4 0x78d71c2000
	static void UnequipEverything(EEntity* viewEntity);// 0xa583b8c 0x78d71c20e0
	static void TrigggerSkill(int skillStoneId, int stoneLevel);// 0xa57ec18 0x78d71c21c0
	static void TransToLevelRecord(FString Name);// 0xa57e8d0 0x78d71c22a0
	static void ToggleTimeDilation();// 0xa57f6f4 0x78d71c2380
	static void ToggleTickKillingMobs(bool bModeOn);// 0xa583658 0x78d71c2460
	static void TogglePlayerAI(bool bTurnOn, int aiCfg);// 0xa5827f4 0x78d71c2540
	static void TogglePauseAnimation(bool bPause);// 0xa580ed8 0x78d71c2620
	static void ToggleDamageShape(bool bToggle, bool bTurnOn);// 0xa582614 0x78d71c2700
	static void ToggleDamageNumber(bool bToggle, bool bTurnOn);// 0xa582704 0x78d71c27e0
	static void ToggleAITargeting(bool bTurnOn);// 0xa5828dc 0x78d71c28c0
	static void ToggleAIPathing(bool bTurnOn);// 0xa58297c 0x78d71c29a0
	static void ToggleAIBehaviorTree(bool bTurnOn);// 0xa582a1c 0x78d71c2a80
	static void Teleport(EEntity* viewEntity, out const Vector TargetPos);// 0xa583c24 0x78d71c2b60
	static void SpeedRun(bool bModeOn);// 0xa583518 0x78d71c2c40
	static void SpawnNPC(int npcCfgId, int isNPC);// 0xa582c84 0x78d71c2d20
	static void SpawnMobGroup(int monsterGrounpId, out const Vector Location, int Level);// 0xa5830d8 0x78d71c2e00
	static int SpawnMob(int npcCfgId, out const Vector Location, int Level, int Rarity, int autoTestRequestId, int fixedLocation);// 0xa58320c 0x78d71c2ee0
	static int SpawnMinion(int npcCfgId, out const Vector Location, int fixedLocation);// 0xa582f04 0x78d71c2fc0
	static void SpawnDrops(int npcCfgId, int Level, out const Vector Location);// 0xa582abc 0x78d71c30a0
	static Actor* SpawnActorInWorld(const Object* WorldContextObject, class Object Class);// 0xa58097c 0x78d71c3180
	static void ShowAttrInfo(int attr);// 0xa581050 0x78d71c3260
	static void SetGameLogFlag(int State);// 0xa57f7ec 0x78d71c3340
	static bool SearchTableForItem(FString inTableName, FString inUserSearchStr, out int[] outSortedIndice);// 0xa5807c4 0x78d71c3420
	static void SaveSetsDataBool(FString infoName, bool boolValue);// 0xa5801d4 0x78d71c3500
	static void SaveSetsData(FString infoName, FString StrValue);// 0xa5802f0 0x78d71c35e0
	static int RotationDirTest(out const Vector From, out const Vector To);// 0xa57e7d4 0x78d71c36c0
	static bool ResetQABoolVarsOnWorldChange();// 0xa5836f8 0x78d71c37a0
	static void RemoveState(EEntity* viewEntity, int stateType);// 0xa581ec0 0x78d71c3880
	static void RemoveSelfState(int ID);// 0xa57f91c 0x78d71c3960
	static void RemoveNPC(int EtyId);// 0xa582bec 0x78d71c0080
	static void RemoveBuff(EEntity* viewEntity, int buffType);// 0xa581bc0 0x78d71c0160
	static void RemoveAffix(EEntity* viewEntity, int affixClassId);// 0xa582088 0x78d71c0240
	static void RegisterHotUpdateQA(FString code);// 0xa57e074 0x78d71c0320
	static void RebornPlayer(int ActionType, int64 PlayerId, int roleType);// 0xa57ee24 0x78d71c0400
	static void ReadySkillsCooldowns(EEntity* viewEntity);// 0xa583d0c 0x78d71c04e0
	static void PlayerMessage(FString String);// 0xa57de4c 0x78d71c05c0
	static void PauseMobsAI(bool bPause);// 0xa5839a8 0x78d71c06a0
	static bool OpenConfigMenu();// 0xa57f6bc 0x78d71c0780
	static void OnKillAllMonstersInGauntlet(int Result, FString msg);// 0xa582d64 0x78d71c0860
	static void MoveAndKillMonstersInGauntlet(int AIId);// 0xa582e6c 0x78d71c0940
	static void MessageDialogue(out const FText msg);// 0xa57e340 0x78d71c0a20
	static void KillRole(EEntity* viewEntity);// 0xa583a48 0x78d71c0b00
	static void KillMobs(int CfgId);// 0xa583910 0x78d71c0be0
	static bool IsPlayerEngagingInADialogue();// 0xa57e998 0x78d71c0cc0
	static bool IsInSkillEditorTestMode();// 0xa57dd38 0x78d71c0da0
	static bool IsEntityAlive(EEntity* viewEntity);// 0xa583ae0 0x78d71c0e80
	static bool IsConfigMenuOpened();// 0xa57f64c 0x78d71c0f60
	static bool IsAllMonsterDead(int npcCfgId);// 0xa57e4c0 0x78d71c1040
	static bool Is2HandedWeapon(int itemBaseId, int itemGoldId);// 0xa5805e0 0x78d71c1120
	static int HitChance(AttrData attackerHit, AttrData defenderDodge);// 0xa5810e8 0x78d71c1200
	static void Heal(EEntity* viewEntity);// 0xa583da4 0x78d71c12e0
	static bool HasState(EEntity* viewEntity, int stateType);// 0xa58187c 0x78d71c13c0
	static void GodMode(bool bModeOn);// 0xa5835b8 0x78d71c14a0
	static int GetWeaponTypeFromItemCfgId(int itemBaseId, int itemGoldId);// 0xa5806d4 0x78d71c1580
	static int GetSkillState(EEntity* viewEntity);// 0xa583e3c 0x78d71c1660
	static FString GetSetsDataString(FString infoName);// 0xa57ffc0 0x78d71c1740
	static bool GetSetsData(FString infoName);// 0xa5800f8 0x78d71c1820
	static FString GetSelectLevelDisplayName(int LevelId);// 0xa57df14 0x78d71c1900
	static RoleLogic GetRoleStat(EEntity* viewEntity);// 0xa581a1c 0x78d71c19e0
	static int GetRoleEntityId(EEntity* viewEntity);// 0xa581b18 0x78d71c1ac0
	static int GetRoleCfgId(EEntity* viewEntity);// 0xa581974 0x78d71c1ba0
	static <int,int> GetRoleBuffList(EEntity* viewEntity);// 0xa581730 0x78d71c1c80
	static bool GetOrSetQABoolVar(enum varEnum, bool bSet, bool bSetTo);// 0xa583730 0x78d716e780
	static SkeletalMesh* GetMeshWithPath(FString Path);// 0xa580f78 0x78d716e860
	static bool GetLogicShape(EEntity* viewEntity, out ViewModelShape outShape);// 0xa5824d8 0x78d716e940
	static float GetLogicScale(EEntity* viewEntity);// 0xa5822e8 0x78d716ea20
	static bool GetLogicPosAndForward(EEntity* viewEntity, out Vector outPos, out Vector outForward);// 0xa582390 0x78d716eb00
	static int GetLevelId();// 0xa57e02c 0x78d716ebe0
	static void GetFieldFromTable(FString inTableName, int inTableId, FString inFieldName, FString inTypeName, out int outInt, out FString outString, out int[] outIntArray, out float[] outFloatArray);// 0xa580a6c 0x78d716ecc0
	static EDebugInfo[] GetDebugInfoArray();// 0xa57ed0c 0x78d716eda0
	static void GenerateMemoryReport();// 0xa57dd24 0x78d716ee80
	static void GatherUnusedParticleSystems(out ParticleSystem*[] outPaths, bool skipArtTest, bool showWindow);// 0xa57e13c 0x78d716ef60
	static Vector[] FormationTest(int formationType, int Count);// 0xa57e674 0x78d716f040
	static void ForceSkills(EEntity* viewEntity, out const int[] SkillCfgIds);// 0xa5804c0 0x78d716f120
	static int FindItemBaseIdBySkillStoneId(int itemBaseIdOrSkillStoneId);// 0xa57db88 0x78d716f200
	static void EraseMobs(int CfgId);// 0xa583878 0x78d716f2e0
	static void EquipSupportSkill(int SkillPos, FString ItemName, int skillId);// 0xa57f05c 0x78d716f3c0
	static void EquipSkill(int SkillPos, out const SkillItemData skillItem);// 0xa57f2b8 0x78d716f4a0
	static void EquipItem(FString ItemId, int itemCfgIdBase, int itemCfgIdGold, int Slot);// 0xa57f49c 0x78d716f580
	static void DoPauseAnimation(bool bPause);// 0xa580e38 0x78d716f660
	static void CreateBuffArea(int ID);// 0xa580428 0x78d716f740
	static void CopyToClipboard(FString String);// 0xa57dd84 0x78d716f820
	static bool CloseConfigMenu();// 0xa57f684 0x78d716f900
	static void ClearOnScreenDebugMessages();// 0xa57dd70 0x78d716f9e0
	static void ClearDebugInfoArray();// 0xa57ecf8 0x78d716fac0
	static void ClearAllHotUpdateCache();// 0xa57e060 0x78d716fba0
	static void BreakPoint();// 0xa57e4ac 0x78d716fc80
	static void BBUnitTest(FString strOprLV, enum intOpLV, FString strOprRV1, enum intOpRV, FString strOprRV2);// 0xa57e9d0 0x78d716fd60
	static void AutoUseSkill(int skillId, FString SkillItemName);// 0xa57e56c 0x78d716fe40
	static bool AutoTest_AddAttr(int attrType, int Number);// 0xa57dc30 0x78d716ff20
	static void AddState(EEntity* viewEntity, int stateType);// 0xa581fa4 0x78d716caa0
	static void AddSelfState(int ID);// 0xa57f9b4 0x78d716cb80
	static void AddSelfBuff(int ID, float dura);// 0xa57fa4c 0x78d716cc60
	static void AddSelfAffix(int ID, FString way);// 0xa57feb8 0x78d716cd40
	static void AddMonsterState(int ID);// 0xa57f884 0x78d716ce20
	static void AddMonsterBuff(int ID, float dura);// 0xa57f708 0x78d716cf00
	static void AddMonsterAffix(int ID, FString way, float fixedValue);// 0xa57fc14 0x78d716cfe0
	static void AddMapAffix(int ID, float fixedValue);// 0xa57fb30 0x78d716d0c0
	static void AddEquipmentAffix(int ID, int Slot, FString way);// 0xa57fd68 0x78d716d1a0
	static int AddBuff(EEntity* viewEntity, EEntity* SourceEntity, int buffType, float Duration, float extraPercent, int buffLevel);// 0xa581ca4 0x78d716d280
	static void AddBPComponentToMonster(int CfgId, bool isAdd);// 0xa581648 0x78d716d360
	static bool AddAttr(int attrType, int Number);// 0xa583424 0x78d716d440
	static int AddAffix(EEntity* viewEntity, int affixClassId, out const float[] Params);// 0xa58216c 0x78d716d520
	static void ActiveTrggerById(int TriggerId);// 0xa583040 0x78d716d600

--------------------------------
Class: AttrData

--------------------------------
Class: ViewModelShape
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78d361d260
	Vector Offset;//[Offset: 0x4, Size: 0xc] 0x78dbe28100
	int Radius;//[Offset: 0x10, Size: 0x4] 0x78dbe28180
	int InnerRadius;//[Offset: 0x14, Size: 0x4] 0x78dbe28200
	int AngleA;//[Offset: 0x18, Size: 0x4] 0x78dbe28280
	int AngleB;//[Offset: 0x1c, Size: 0x4] 0x78dbe28300
	int LengthX;//[Offset: 0x20, Size: 0x4] 0x78dbe28380
	int LengthY;//[Offset: 0x24, Size: 0x4] 0x78dbe28400
	Vector[] Points;//[Offset: 0x28, Size: 0x10] 0x78d361d300

--------------------------------
Class: EDebugInfo
	int[] Int;//[Offset: 0x0, Size: 0x10] 0x78d361da80
	float[] Float;//[Offset: 0x10, Size: 0x10] 0x78d361db20
	Vector[] Pos;//[Offset: 0x20, Size: 0x10] 0x78d361dbc0

--------------------------------
Class: SkillItemData
	FString ItemName;//[Offset: 0x0, Size: 0x10] 0x78dbe29d00
	int ConfigId;//[Offset: 0x10, Size: 0x4] 0x78dbe29d80
	int Level;//[Offset: 0x14, Size: 0x4] 0x78dbe29e00

--------------------------------
Class: RedDotWidget.UserWidget.Widget.Visual.Object
	Button* EffectButton;//[Offset: 0x260, Size: 0x8] 0x78d719b380
	bool bDynamicRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x78d719b400
	enum RedModuleType;//[Offset: 0x269, Size: 0x1] 0x78d7153080
	enum RedLabelType;//[Offset: 0x26a, Size: 0x1] 0x78d7153120
	enum PreviewStyle;//[Offset: 0x26b, Size: 0x1] 0x78d71531c0
	UIImage* WidgetImage;//[Offset: 0x288, Size: 0x8] 0x78d7199500
	void EffectButtonClicked();// 0xa586a10 0x78d71c1d60

--------------------------------
Class: SceneComponentMgr.Object
	void SetVolumeMultiplier(Actor* UMediaActor, FName Tag, float Volume);// 0xa587030 0x78d71c3ea0
	void SetStaticMeshComponentStaticMesh(StaticMeshComponent* StaticMeshComponent, FString Path);// 0xa5882a4 0x78d71c3f80
	void SetStaticMeshComponentMaterialTextureParameterValByIndex(StaticMeshComponent* StaticMeshComponent, const int Index, out const FName ParameterName, Texture* Value);// 0xa5878c8 0x78d71c4060
	void SetStaticMeshComponentMaterialsVectorParameterVal(StaticMeshComponent* StaticMeshComponent, FString ParameterName, Vector parameterVal);// 0xa587bbc 0x78d71c4140
	void SetStaticMeshComponentMaterialsScalarParameterVal(StaticMeshComponent* StaticMeshComponent, FString ParameterName, float parameterVal);// 0xa587d20 0x78d71c4220
	void SetStaticMeshComponentMaterialsLinearColorParameterVal(StaticMeshComponent* StaticMeshComponent, FString ParameterName, LinearColor parameterVal);// 0xa587a58 0x78d71c4300
	bool SetStaticMeshComponentMaterialScalarParameterValByIndex(StaticMeshComponent* StaticMeshComponent, int MaterialIndex, FString ParameterName, float parameterVal);// 0xa5875a8 0x78d71c43e0
	void SetStaticMeshComponentMaterial(StaticMeshComponent* StaticMeshComponent, int Index, FString Path);// 0xa588098 0x78d71c44c0
	void SetSkeletalMeshComponentSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent, FString Path, bool bReinitPose);// 0xa5887a4 0x78d71c45a0
	void SetSkeletalMeshComponentMaterial(SkeletalMeshComponent* SkeletalMeshComponent, int Index, FString Path);// 0xa5883bc 0x78d71c4680
	void SetSkeletalMeshComponentAnimBp(SkeletalMeshComponent* SkeletalMeshComponent, FString ResourcePath);// 0xa587378 0x78d71c4760
	void SetSkeletalMeshComponentAnimationPlay(SkeletalMeshComponent* SkeletalMeshComponent, FString Path, bool bLoop);// 0xa588520 0x78d71c4840
	void SetSkeletalMeshComponentAnimationBp(SkeletalMeshComponent* StaticMeshComponent);// 0xa5881fc 0x78d71c4920
	void SetSkeletalMeshComponentAnimation(SkeletalMeshComponent* SkeletalMeshComponent, FString Path);// 0xa58868c 0x78d71c4a00
	void SetPointLightAttribute(PointLightComponent* PointLightComponent, DLightComponentAttrData DLightComponentAttrData);// 0xa586f18 0x78d71c4ae0
	void SetParticleSystemTemplate(SceneComponent* ParticleSystem, FString Path, bool AllowManagedTicking);// 0xa587f2c 0x78d71c4bc0
	void SetMediaPlayerOpacity(WidgetComponent* MediaPlayerComponent, float Opacity);// 0xa58716c 0x78d71c4ca0
	void SetDirectionalLightAttribute(DirectionalLightComponent* DirectionalLightComponent, DLightComponentAttrData DLightComponentAttrData);// 0xa586e00 0x78d71c4d80
	void SetComponentActive(ActorComponent* ActorComponent, bool Active);// 0xa588910 0x78d71c4e60
	void SetCameraCurrentFocalLength(Actor* CameraActor, float CameraFov);// 0xa586d0c 0x78d71c4f40
	void ResetParticles(ParticleSystemComponent* ParticleSystem);// 0xa587e84 0x78d71c5020
	SceneComponent* NewComponent(FString TypeName, Actor* Owner);// 0xa588ab4 0x78d71c5100
	void MediaPlayerOpenSource(MediaPlayer* MediaPlayer, FString ResourcePath);// 0xa587260 0x78d71c51e0
	static SceneComponentMgr* Instance();// 0xa588c6c 0x78d71c52c0
	int GetMeshComponentMaterialsNum(MeshComponent* MeshComponent);// 0xa587764 0x78d71c53a0
	bool DoesComponentRequireCustomDepthPass(MeshComponent* MeshComponent);// 0xa587814 0x78d71c5480
	void DestroyComponent(ActorComponent* TheComponent);// 0xa588a0c 0x78d71c5560
	void CallAnimationBpFuncWithStringPara(SkeletalMeshComponent* SkeletalMeshComponent, FString FuncNameWithPara);// 0xa587490 0x78d71c5640

--------------------------------
Class: DLightComponentAttrData

--------------------------------
Class: SceneCreaturePawn.Pawn.Actor.Object
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x280, Size: 0x8] 0x78d719cc80
	AkComponent* AkComponent;//[Offset: 0x288, Size: 0x8] 0x78d719cd00
	enum State;//[Offset: 0x290, Size: 0x1] 0x78d7152fe0
	float ActiveRadius;//[Offset: 0x294, Size: 0x4] 0x78d719ce00
	float IdleRotateTime;//[Offset: 0x298, Size: 0x4] 0x78d719ce80
	float EscapeDestoryTime;//[Offset: 0x29c, Size: 0x4] 0x78d719cf00
	float EscapeRadius;//[Offset: 0x2a0, Size: 0x4] 0x78d719cf80
	float EscapeMoveSpeed;//[Offset: 0x2a4, Size: 0x4] 0x78d719d000
	float EscapeRotSpeed;//[Offset: 0x2a8, Size: 0x4] 0x78d719d080
	float EscapeHeight;//[Offset: 0x2ac, Size: 0x4] 0x78d719d100
	SkeletalMesh* EscapeSkeletalMesh;//[Offset: 0x2b0, Size: 0x8] 0x78d719d180
	AnimationAsset* EscapeAnim;//[Offset: 0x2b8, Size: 0x8] 0x78d719d200
	FString SoundId;//[Offset: 0x2c0, Size: 0x10] 0x78d719d280

--------------------------------
Class: SceneEffectMgr.Object
	MaterialParameterCollection* MPCEnv;//[Offset: 0x28, Size: 0x8] 0x78d719c980
	MaterialParameterCollectionInstance* InstMPCEnv;//[Offset: 0x30, Size: 0x8] 0x78d719ca00
	float TimeFrac;//[Offset: 0x38, Size: 0x4] 0x78d719ca80
	class ESceneMaterialCfg* SceneMaterialCfg;//[Offset: 0x40, Size: 0x8] 0x78d7152ea0
	PostProcessVolume* PostProcessActorPtr;//[Offset: 0x48, Size: 0x8] 0x78d719cb00
	float[] Params_VignetteIntensity;//[Offset: 0x50, Size: 0x10] 0x78d7152f40
	int PointMoveDynId;//[Offset: 0x60, Size: 0x4] 0x78d719cc00

--------------------------------
Class: SceneInteractiveMgr.Object
	SceneOutsideEntranceActor* OutsideEntrance;//[Offset: 0x28, Size: 0x8] 0x78d719c900

--------------------------------
Class: SceneOutsideEntranceActor.Actor.Object
	float PortalDelayTime;//[Offset: 0x220, Size: 0x4] 0x78d719fd80
	float SeqeunceDelayTime;//[Offset: 0x224, Size: 0x4] 0x78d719fe00
	int trapCfgId;//[Offset: 0x228, Size: 0x4] 0x78d719fe80
	int UnlockFunctionId;//[Offset: 0x22c, Size: 0x4] 0x78d719ff00
	EPortal* OutSidePortal;//[Offset: 0x290, Size: 0x8] 0x78d719ff80
	void UpdateLightNum();// 0xaa7cd18 0x78d71c8d60
	void SetInteractiveItemVisible(int trapCfgId, bool Hide);// 0xa58cd68 0x78d71c8e40
	void SetActive(bool isInit, int LastCanEnterNum);// 0xa58cee0 0x78d71c8f20
	void OnUnLockOpenDevice();// 0xaa7cd18 0x78d71c9000
	void OnPlayPortalAnim();// 0xa58ce60 0x78d71c5720
	void OnPlayActiveAnim(int LastCanEnterNum);// 0xaa7cd18 0x78d71c5800
	bool IsFunctionLocked();// 0xa58ce74 0x78d71c58e0
	int GetCanEnterNum();// 0xa58ceac 0x78d71c59c0
	void ForceClearLightNum();// 0xaa7cd18 0x78d71c5aa0

--------------------------------
Class: WorldEventListener.Object
	void OnSubWorldLoadComplete(MultiWorldHandle InSubWorldHandle, MultiWorldLoadParameters InSubWorldLoadParameters);// 0xa589e98 0x78d71c3dc0

--------------------------------
Class: SubLevelEventListener.Object

--------------------------------
Class: SceneLevelMgr.Object
	<FString,WorldEventListener*> WorldEventMap;//[Offset: 0x28, Size: 0x50] 0x78d71040c0
	<int,SubLevelEventListener*> SubLevelEventMap;//[Offset: 0x78, Size: 0x50] 0x78d7104180
	static SceneLevelMgr* Instance();// 0xa58a584 0x78d71c3ce0

--------------------------------
Class: SceneMgr.Object
	void UpdateCameraAspectRatio();// 0xa58a940 0x78d71c7320
	void OnLevelSequenceEnd(FString EventName);// 0xa58a954 0x78d71c3a40
	static SceneMgr* Instance();// 0xa58aaac 0x78d71c3b20
	void DealWithHidingSplashScreenProperly();// 0xa58a92c 0x78d71c3c00

--------------------------------
Class: SceneNPCMgr.Object
	bool HideNPCByLevelSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78d719eb00
	bool HideEffectByLevelSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78d719eb80
	delegate OnNotifyNPCChanged;//[Offset: 0x30, Size: 0x10] 0x78d719ec00
	<int,EEntity*> NPCMaps;//[Offset: 0x40, Size: 0x50] 0x78d7103f40
	<int,int> NPCVgxId;//[Offset: 0x90, Size: 0x50] 0x78d7104000
	int dynId;//[Offset: 0xe0, Size: 0x4] 0x78d719ee80
	CurveFloat* FadeOutCurve;//[Offset: 0x1a0, Size: 0x8] 0x78d719ef00
	void TouchNpcCheck();// 0xa58bec8 0x78d71c5b80
	void SetNPCVisible(int npcDynID, bool IsVisible);// 0xa58ba1c 0x78d71c5c60
	void SetNPCTickEnable(int npcDynID, int enable);// 0xa58b268 0x78d71c5d40
	void SetNPCEffectVisible(bool IsVisible);// 0xa58b714 0x78d71c5e20
	void ResetDataWhenExitLevel();// 0xa58af84 0x78d71c5f00
	void RemoveNPC(int npcDynID);// 0xa58c02c 0x78d71c5fe0
	void OnSelectedByDialog(int dynId);// 0xa58bedc 0x78d71c60c0
	void OnSelected(Actor* Actor);// 0xa58bf84 0x78d71c61a0
	bool IsExistByUniqueId(int UniqueId);// 0xa58b04c 0x78d71c6280
	bool IsExistByDyncId(int dynId);// 0xa58af98 0x78d71c6360
	bool IsExistByCfgId(int CfgId);// 0xa58b100 0x78d71c6440
	static SceneNPCMgr* Instance();// 0xa58c184 0x78d71c6520
	int GetNPCUniqueId(int npcDynID);// 0xa58b4b8 0x78d71c6600
	Vector GetNPCPos(int npcDynID);// 0xa58b1b4 0x78d71c66e0
	WidgetComponent* GetNPCNameVisible(int npcDynID);// 0xa58b96c 0x78d71c67c0
	bool GetNPCInRange(int npcDynID, int Radius);// 0xa58b618 0x78d71c68a0
	int GetNPCEtyId(int npcDynID);// 0xa58b408 0x78d71c6980
	int GetNPCDynId(int npcEtyId);// 0xa58b358 0x78d71c6a60
	int GetNPCCfgId(int npcDynID);// 0xa58b568 0x78d71c6b40
	EEntity* GetNPCByUniqueId(int UniqueId);// 0xa58bb14 0x78d71c6c20
	EEntity* GetNPCByCfgId(int npcCfgId);// 0xa58bbc4 0x78d71c6d00
	EEntity* GetNPC(int npcDynID);// 0xa58bc74 0x78d71c6de0
	void ForbiddenPlayerRotation(bool IsForbid);// 0xa58b7c4 0x78d71c6ec0
	void ForbiddenNPCRotation(int npcDynID, bool IsForbid);// 0xa58b874 0x78d71c6fa0
	void DestoryNPCAfterMontage(AnimMontage* Montage, bool bInterrupted);// 0xa58bd24 0x78d71c7080
	void DestoryNPC(int npcDynID);// 0xa58be20 0x78d71c7160
	EEntity* CreateNPCByLogicId(int logicEtyId);// 0xa58c0d4 0x78d71c7240

--------------------------------
Class: ServantMgr.Object

--------------------------------
Class: SettingsMgr.Object
	static SettingsMgr* Instance();// 0xa58ecdc 0x78d71c8820
	bool GetGameSettingValue(int Index);// 0xa58ea10 0x78d71c8900
	int GetGameSettingNums();// 0xa58e9dc 0x78d71c89e0
	FString GetGameSettingName(int Index);// 0xa58eac4 0x78d71c8ac0
	void ExcuteCommand(FString Str);// 0xa58e884 0x78d71c8ba0
	void ChangeGameSettings(int Index, bool Value);// 0xa58ebe4 0x78d71c8c80

--------------------------------
Class: SkillTestGameMode.CoreGameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: SkillViewDataTable.DataTable.Object

--------------------------------
Class: SkillViewDataHelper.BlueprintFunctionLibrary.Object
	static GameVFXRowData ImportVfxInfoFromCfg(int VfxId, const DataTable* DataTable);// 0xa58f544 0x78d71c84a0
	static GameVFXRowData GetVfxInfoEx(int skillEditorExportVfxId);// 0xa58f758 0x78d71c8580
	static SkillEditorSfxInfo GetSfxInfoEx(int skillEditorExportSfxId);// 0xa58f660 0x78d71c8660
	static SkillEditorMontageInfo GetMontageInfoEx(int skillEditorExportMontageId);// 0xa58f808 0x78d71c8740

--------------------------------
Class: SkillEditorSfxInfo.TableRowBase
	FString AudioEvent;//[Offset: 0x8, Size: 0x10] 0x78dbe24c80

--------------------------------
Class: SkillEditorMontageInfo.TableRowBase
	FString Montage;//[Offset: 0x8, Size: 0x10] 0x78dbe24c00

--------------------------------
Class: SteamSdkMgr.Object
	void QueryWithProductIdArray(FString[] ProductIds);// 0xa58fed8 0x78d71c8040
	bool IsSteamInitialized();// 0xa59011c 0x78d71c8120
	bool IsPlayerOffline();// 0xa5900e4 0x78d71c8200
	static SteamSdkMgr* Instance();// 0xa590228 0x78d71c82e0
	FString GetSteamUserId();// 0xa590154 0x78d71c83c0

--------------------------------
Class: TaskLogMgr.Object
	static TaskLogMgr* Instance();// 0xa590784 0x78d71c7f60

--------------------------------
Class: TLAssetLabel.PrimaryAssetLabel.PrimaryDataAsset.DataAsset.Object
	DirectoryPath[] IncludePath;//[Offset: 0x68, Size: 0x10] 0x78d7152ae0
	DirectoryPath[] ExcludePaths;//[Offset: 0x78, Size: 0x10] 0x78d7152b80
	FName desc;//[Offset: 0x88, Size: 0x8] 0x78d71d0500

--------------------------------
Class: TLGameViewportClient.MultiWorldGameViewportClient.GameViewportClient.ScriptViewportClient.Object

--------------------------------
Class: TriggerMsgMgr.Object
	int ButtonId;//[Offset: 0x28, Size: 0x4] 0x78d71d2000
	void UnmarkLevelSequenceToLua();// 0xa591634 0x78d71cac00
	void ShowUI();// 0xa59165c 0x78d71cace0
	void ShowPlayer();// 0xa591684 0x78d71c7400
	void SetCameraViewToTarget(Actor* Actor);// 0xa5914d8 0x78d71c74e0
	void RestoreCameraView();// 0xa5914c4 0x78d71c75c0
	void PostProcessHandle(FString Params);// 0xa591214 0x78d71c76a0
	void PlayHeroAnim(out const FName animName);// 0xa591580 0x78d71c7780
	void MarkLevelSequenceToLua();// 0xa591648 0x78d71c7860
	static TriggerMsgMgr* Instance();// 0xa5916c0 0x78d71c7940
	void HideUI();// 0xa591670 0x78d71c7a20
	void HidePlayer();// 0xa591698 0x78d71c7b00
	void HandleMsg();// 0xa5916ac 0x78d71c7be0
	void ActorPlayAnim(FString Params);// 0xa59136c 0x78d71c7cc0

--------------------------------
Class: TutorialMgr.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78d71d1100
	float ConfigHoldTime;//[Offset: 0x2c, Size: 0x4] 0x78d71d1180
	float CurHoldTime;//[Offset: 0x30, Size: 0x4] 0x78d71d1200
	<FName,LuaTutorialEvents> LuaTutorialEvents;//[Offset: 0x38, Size: 0x50] 0x78d7103dc0
	<int,EEntity*> TutorialLines;//[Offset: 0x88, Size: 0x50] 0x78d7103e80
	FootPrintMgr* RouteEffect;//[Offset: 0xd8, Size: 0x8] 0x78d71d1480
	void UnRegisterRouteFootprint();// 0xa592120 0x78d71c9ee0
	void SetFootprintVisible(bool visible);// 0xa592070 0x78d71c9fc0
	void SetEnableTutorial(bool enable);// 0xa592764 0x78d71ca0a0
	void RemoveTutorialLine(int dynId);// 0xa592290 0x78d71ca180
	bool RemoveLuaTutorialEvent(out const FName EventName, int handleId);// 0xa5923fc 0x78d71ca260
	void RegisterRouteFootprint(out const Vector destPos, float durationTime);// 0xa592134 0x78d71ca340
	bool IsMonsterDeadBodyPresentByCfgId(int monsterId);// 0xa591f08 0x78d71ca420
	bool IsEnterSceneCompletedMonsterPresentByCfgId(int monsterId);// 0xa591fbc 0x78d71ca500
	static TutorialMgr* Instance();// 0xa592814 0x78d71ca5e0
	Widget* GetSkillPadWidget();// 0xa592228 0x78d71ca6c0
	Widget* GetMovePadWidget();// 0xa59225c 0x78d71ca7a0
	int CreateTutorialLine(Vector TargetPoint);// 0xa592338 0x78d71ca880
	void ClearLuaTutorialEvent(out const FName EventName);// 0xa592508 0x78d71ca960
	void ClearAllLuaTutorialEvents();// 0xa5923e8 0x78d71caa40
	int AddLuaTutorialEvent(out const FName EventName, FString luaScript, FString args);// 0xa5925bc 0x78d71cab20

--------------------------------
Class: LuaTutorialEvents
	FName EventName;//[Offset: 0x0, Size: 0x8] 0x78dbe40c80
	<int,FString> Events;//[Offset: 0x8, Size: 0x50] 0x78dbe31e40
	int NextHandleId;//[Offset: 0x58, Size: 0x4] 0x78dbe40e00
	bool bHasAnyEventMarkedToBeRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x78dbe40e80
	int[] MarkedToBeRemoved;//[Offset: 0x60, Size: 0x10] 0x78d361ff60
	bool bIterating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78dbe40f80

--------------------------------
Class: UELogHelper.BlueprintFunctionLibrary.Object
	static void SetUserID(FString userId);// 0xa593a00 0x78d71cbca0
	static void SetLogVerbosity(FString CategoryName, FString Verbosity);// 0xa594150 0x78d71cbd80
	static void SetLogStateINI(FString InState);// 0xa593738 0x78d71cbe60
	static void SetLogOn(FString CategoryName);// 0xa594350 0x78d71cbf40
	static void SetLogOff(FString CategoryName);// 0xa594288 0x78d71cc020
	static void SetLogByState(FString State);// 0xa59359c 0x78d71cc100
	static void SetGamePlayer(FString PlayerId);// 0xa593800 0x78d71cc1e0
	static void SetGameLuaNetLogEnable(bool bEnable);// 0xa593d5c 0x78d71cc2c0
	static void SetGameLogEnableStateModified(bool bEnable);// 0xa593c84 0x78d71cc3a0
	static void SetEngineLogsVerbosity(FString Verbosity);// 0xa593f70 0x78d71cc480
	static void SetEngineLogsOn();// 0xa59404c 0x78d71cc560
	static void SetEngineLogsOff();// 0xa594038 0x78d71cc640
	static void SetDefaultCrashInfluence(int Value);// 0xa593054 0x78d71cc720
	static void SetCustomLog(FString[] Categories);// 0xa593398 0x78d71cc800
	static void SetCrashInfluence(int Value);// 0xa593120 0x78d71cc8e0
	static void SetAllLogsVerbosity(FString Verbosity);// 0xa594060 0x78d71cc9c0
	static void SetAllLogsOn();// 0xa59413c 0x78d71c90e0
	static void SetAllLogsOff();// 0xa594128 0x78d71c91c0
	static bool SendErrorLog(FString msg, FString Stack);// 0xa593ac8 0x78d71c92a0
	static void PrintTestLog();// 0xa593040 0x78d71c9380
	static void InitLog();// 0xa594418 0x78d71c9460
	static FString GetLogStateINI();// 0xa593664 0x78d71c9540
	static bool GetIsShippingVersion();// 0xa5931ec 0x78d71c9620
	static bool GetGameLuaNetLogEnable();// 0xa593d24 0x78d71c9700
	static bool GetGameLogEnableStateModified();// 0xa593c4c 0x78d71c97e0
	static bool GetForceEnableLogForPackaging();// 0xa593c14 0x78d71c98c0
	static FString[] GetEngineLogsName();// 0xa593dfc 0x78d71c99a0
	static int GetDefaultCrashInfluence();// 0xa5930ec 0x78d71c9a80
	static FString[] GetCustomLog();// 0xa593224 0x78d71c9b60
	static int GetCrashInfluence();// 0xa5931b8 0x78d71c9c40
	static void AssertTest();// 0xa59302c 0x78d71c9d20
	static void AddCustomProperty(FString Key, FString Value);// 0xa5938c8 0x78d71c9e00

--------------------------------
Class: UIBackGroundWidget.UserWidget.Widget.Visual.Object
	enum BackGroundType;//[Offset: 0x260, Size: 0x1] 0x78d7155100
	enum BackgroundFitType;//[Offset: 0x261, Size: 0x1] 0x78d71551a0
	bool bAutoPlayAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262, Size: 0x1] 0x78d71d4180
	CanvasPanel* WarpPanel;//[Offset: 0x268, Size: 0x8] 0x78d71d4200
	UserWidget* WarpWidgetBaseItem;//[Offset: 0x270, Size: 0x8] 0x78d71d2180
	UserWidget* BackGroundWidget;//[Offset: 0x278, Size: 0x8] 0x78d71d2200

--------------------------------
Class: UIButton.Button.ContentWidget.PanelWidget.Widget.Visual.Object
	int CurButtonStyleId;//[Offset: 0x428, Size: 0x4] 0x78d71d4580
	bool bIsTransparent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1] 0x78d71d4600
	bool bHasInteractionEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 0x1] 0x78d71d4680
	bool bCustomizeChildrenLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42e, Size: 0x1] 0x78d71d4700
	int CurrStyleId;//[Offset: 0x434, Size: 0x4] 0x78d71d4780
	FString CurrTextKey;//[Offset: 0x440, Size: 0x10] 0x78d71d4800
	FString TextContent;//[Offset: 0x460, Size: 0x10] 0x78d71d4880
	byte TextVAlignment;//[Offset: 0x470, Size: 0x1] 0x78d71d4900
	byte TextHAlignment;//[Offset: 0x471, Size: 0x1] 0x78d71d4980
	bool bOverwriteUnderlyingTextBoxSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x472, Size: 0x1] 0x78d71d4a00
	Margin OverwrittenTextBoxMargin;//[Offset: 0x474, Size: 0x10] 0x78d71d4a80
	class UserWidget* CustomWidgetClass;//[Offset: 0x488, Size: 0x8] 0x78d7154e80
	SlateBrush IconImage;//[Offset: 0x490, Size: 0x88] 0x78d71d4b00
	enum IconVisibility;//[Offset: 0x518, Size: 0x1] 0x78d7154f20
	UIShrinkTextBlock* DefaultCustomizedText;//[Offset: 0x520, Size: 0x8] 0x78d71d4c00
	SizeBox* WrapSizeBox;//[Offset: 0x580, Size: 0x8] 0x78d71d4c80
	CanvasPanel* WrapCanvas;//[Offset: 0x588, Size: 0x8] 0x78d71d4d00
	UIImage* ButtonShaingImage;//[Offset: 0x590, Size: 0x8] 0x78d71d4d80
	UIShrinkTextBlock* UITextBlock;//[Offset: 0x598, Size: 0x8] 0x78d71d4e00
	UserWidget* CustomWidget;//[Offset: 0x5a0, Size: 0x8] 0x78d71d4e80
	UIImage* IconImageWidget;//[Offset: 0x5a8, Size: 0x8] 0x78d71d4f00
	UIImage* TextDecorationImage;//[Offset: 0x5b0, Size: 0x8] 0x78d71d4f80
	UIImage* TempImageResource1;//[Offset: 0x5b8, Size: 0x8] 0x78d71d5000
	UIImage* TempImageResource2;//[Offset: 0x5c0, Size: 0x8] 0x78d71d5080
	UIImage* TempImageResource3;//[Offset: 0x5c8, Size: 0x8] 0x78d71d5100
	void SetTransparent(bool bTransparent);// 0xa5952a0 0x78d71ce6a0
	void SetTextTableLocalizationText(FString TextTableId);// 0xa59566c 0x78d71cadc0
	void SetTextDecorationVisibility(out const enum InVisibility);// 0xa595350 0x78d71caea0
	void SetTextBlockStyleId(out const int StyleId);// 0xa5959a4 0x78d71caf80
	void SetText(FText InText);// 0xa595744 0x78d71cb060
	void SetCustomIconVisibility(out const enum InVisibility);// 0xa5954ac 0x78d71cb140
	void SetCustomIcon(FString IconName);// 0xa595560 0x78d71cb220
	void SetButtonStyleId(int StyleId);// 0xa595a58 0x78d71cb300
	void SetButtonOpacity(const float Opacity);// 0xa595404 0x78d71cb3e0
	UserWidget* GetCustomWidget();// 0xa595638 0x78d71cb4c0

--------------------------------
Class: UIShrinkTextBlock.ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte TextVerticalAlignment;//[Offset: 0x138, Size: 0x1] 0x78d71dae00
	byte TextHAlignment;//[Offset: 0x139, Size: 0x1] 0x78d71dae80
	int CurrStyleId;//[Offset: 0x13c, Size: 0x4] 0x78d71daf00
	FString CurrTextKey;//[Offset: 0x148, Size: 0x10] 0x78d71daf80
	int ShrinkForceFontSize;//[Offset: 0x158, Size: 0x4] 0x78d71db000
	FText TextContent;//[Offset: 0x160, Size: 0x18] 0x78d71db080
	Vector2D ShrinkSize;//[Offset: 0x178, Size: 0x8] 0x78d71db100
	FString ShrintHint;//[Offset: 0x180, Size: 0x10] 0x78d71db180
	int MeasureCount;//[Offset: 0x190, Size: 0x4] 0x78d71db200
	byte TextHJustification;//[Offset: 0x194, Size: 0x1] 0x78d71db280
	void SetTextTableLocalizationText(FString TextTableId);// 0xa59b350 0x78d71e0320
	void SetTextColorAndOpacity(SlateColor InColorAndOpacity);// 0xa59b034 0x78d71e0400
	void SetShrinkSize(const Vector2D ShrikSize);// 0xa59af90 0x78d71e04e0
	void SetLocalizationText(FString LocalizationId);// 0xa59b428 0x78d71e05c0
	void SetFontStyleId(int StyleId);// 0xa59b2a8 0x78d71e06a0

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x119, Size: 0x1] 0x78d71db580
	byte StretchDirection;//[Offset: 0x11a, Size: 0x1] 0x78d71d9500
	float UserSpecifiedScale;//[Offset: 0x11c, Size: 0x4] 0x78d71d9580
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x78d71d9600
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0xbb134a8 0x78d71e0780
	void SetStretchDirection(byte InStretchDirection);// 0xbb13550 0x78d71e0860
	void SetStretch(byte InStretch);// 0xbb135f8 0x78d71e0940
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0xbb133f8 0x78d71e0a20

--------------------------------
Class: UIConfigDataMgr.Object

--------------------------------
Class: UIDebugMgr.Object

--------------------------------
Class: EditableText.Widget.Visual.Object
	FText Text;//[Offset: 0x108, Size: 0x18] 0x78d3570d00
	delegate TextDelegate;//[Offset: 0x120, Size: 0x10] 0x78d3570d80
	FText HintText;//[Offset: 0x130, Size: 0x18] 0x78d3570e00
	delegate HintTextDelegate;//[Offset: 0x148, Size: 0x10] 0x78d3570e80
	EditableTextStyle WidgetStyle;//[Offset: 0x158, Size: 0x220] 0x78cd97f880
	SlateWidgetStyleAsset* Style;//[Offset: 0x378, Size: 0x8] 0x78cd97f900
	SlateBrushAsset* BackgroundImageSelected;//[Offset: 0x380, Size: 0x8] 0x78cd97f980
	SlateBrushAsset* BackgroundImageComposing;//[Offset: 0x388, Size: 0x8] 0x78cd97fa00
	SlateBrushAsset* CaretImage;//[Offset: 0x390, Size: 0x8] 0x78cd97fa80
	SlateFontInfo Font;//[Offset: 0x398, Size: 0x58] 0x78cd97fb00
	SlateColor ColorAndOpacity;//[Offset: 0x3f0, Size: 0x28] 0x78cd97fb80
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1] 0x78cd97fc00
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 0x1] 0x78cd97fc80
	float MinimumDesiredWidth;//[Offset: 0x41c, Size: 0x4] 0x78cd97fd00
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1] 0x78cd97fd80
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1] 0x78cd97fe00
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x422, Size: 0x1] 0x78cd97fe80
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x423, Size: 0x1] 0x78cd97ff00
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1] 0x78cd97ff80
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 0x1] 0x78cd97e780
	byte KeyboardType;//[Offset: 0x426, Size: 0x1] 0x78cd97e800
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x427, Size: 0x1] 0x78cd97e900
	enum VirtualKeyboardTrigger;//[Offset: 0x428, Size: 0x1] 0x78cdd5c0e0
	enum VirtualKeyboardDismissAction;//[Offset: 0x429, Size: 0x1] 0x78cdd5c180
	byte Justification;//[Offset: 0x42a, Size: 0x1] 0x78cd97eb00
	byte VerticalJustification;//[Offset: 0x42b, Size: 0x1] 0x78cd97eb80
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x42c, Size: 0x3] 0x78cd97ee00
	delegate OnTextChanged;//[Offset: 0x430, Size: 0x10] 0x78cd97ee80
	delegate OnTextCommitted;//[Offset: 0x440, Size: 0x10] 0x78cd97ef00
	void SetVerticalJustification(byte InVerticalJustification);// 0xbafbb50 0x78d3d2c020
	void SetText(FText InText);// 0xbafc060 0x78d3d2c100
	void SetJustification(byte InJustification);// 0xbafbbf8 0x78d3d2c1e0
	void SetIsReadOnly(bool InbIsReadyOnly);// 0xbafbca0 0x78d3d2c2c0
	void SetIsPassword(bool InbIsPassword);// 0xbafbfb0 0x78d3d2c3a0
	void SetHintText(FText InHintText);// 0xbafbd50 0x78d3d2c480
	void OnEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0xaa7cd18 0x78d3d2c560
	void OnEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0xaa7cd18 0x78d3d2c640
	FText GetText();// 0xbafc2c0 0x78d3d2c720

--------------------------------
Class: EditableTextStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58] 0x78d3570f00
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x28] 0x78d3570f80
	SlateBrush BackgroundImageSelected;//[Offset: 0x88, Size: 0x88] 0x78d3571000
	SlateBrush BackgroundImageComposing;//[Offset: 0x110, Size: 0x88] 0x78d3571080
	SlateBrush CaretImage;//[Offset: 0x198, Size: 0x88] 0x78cd97f800

--------------------------------
Class: UIEditText.EditableText.Widget.Visual.Object
	int CurrStyleId;//[Offset: 0x460, Size: 0x4] 0x78d71d4480
	void SetFontStyleId(int StyleId);// 0xa5986e8 0x78d71ce5c0

--------------------------------
Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x108, Size: 0x8] 0x78d7154ca0
	float WheelScrollMultiplier;//[Offset: 0x110, Size: 0x4] 0x78d71d7180
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1] 0x78d71d7200
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 0x1] 0x78d71d7280
	float FixedLineScrollOffset;//[Offset: 0x118, Size: 0x4] 0x78d71d7300
	delegate BP_OnEntryGenerated;//[Offset: 0x120, Size: 0x10] 0x78d71d7380
	delegate BP_OnEntryReleased;//[Offset: 0x130, Size: 0x10] 0x78d71d5300
	UserWidgetPool EntryWidgetPool;//[Offset: 0x140, Size: 0x80] 0x78d71d5380
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0xbb06c80 0x78d71cd0c0
	void SetScrollOffset(const float InScrollOffset);// 0xbb06d28 0x78d71cd1a0
	void SetScrollbarVisibility(enum InVisibility);// 0xbb06bd8 0x78d71cd280
	void ScrollToTop();// 0xbb06de4 0x78d71cd360
	void ScrollToBottom();// 0xbb06dd0 0x78d71cd440
	void RequestRefresh();// 0xbb06bc4 0x78d71cd520
	void RegenerateAllEntries();// 0xbb06df8 0x78d71cd600
	UserWidget*[] GetDisplayedEntryWidgets();// 0xbb06e0c 0x78d71cd6e0

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 0x10] 0x78dbe58e40
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 0x10] 0x78dbe58ee0

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object
	byte Orientation;//[Offset: 0x2d8, Size: 0x1] 0x78d71d7e00
	byte SelectionMode;//[Offset: 0x2d9, Size: 0x1] 0x78d71d7e80
	enum ConsumeMouseWheel;//[Offset: 0x2da, Size: 0x1] 0x78d7154980
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 0x1] 0x78d71d7f80
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1] 0x78d71d8000
	float EntrySpacing;//[Offset: 0x2e0, Size: 0x4] 0x78d71d8080
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1] 0x78d71d8100
	Object*[] ListItems;//[Offset: 0x2e8, Size: 0x10] 0x78d7154a20
	delegate BP_OnEntryInitialized;//[Offset: 0x308, Size: 0x10] 0x78d71d8200
	delegate BP_OnItemClicked;//[Offset: 0x318, Size: 0x10] 0x78d71d8280
	delegate BP_OnItemDoubleClicked;//[Offset: 0x328, Size: 0x10] 0x78d71d8300
	delegate BP_OnItemIsHoveredChanged;//[Offset: 0x338, Size: 0x10] 0x78d71d8380
	delegate BP_OnItemSelectionChanged;//[Offset: 0x348, Size: 0x10] 0x78d71d8400
	delegate BP_OnItemScrolledIntoView;//[Offset: 0x358, Size: 0x10] 0x78d71d6380
	void SetSelectionMode(byte SelectionMode);// 0xbb05d00 0x78d71cf200
	void SetSelectedIndex(int Index);// 0xbb05b78 0x78d71cf2e0
	void ScrollIndexIntoView(int Index);// 0xbb05c20 0x78d71cf3c0
	void RemoveItem(Object* Item);// 0xbb05f50 0x78d71cf4a0
	void NavigateToIndex(int Index);// 0xbb05ad0 0x78d71cf580
	bool IsRefreshPending();// 0xbb05cc8 0x78d71cf660
	int GetNumItems();// 0xbb05e6c 0x78d71cf740
	Object*[] GetListItems();// 0xbb060a0 0x78d71cf820
	Object* GetItemAt(int Index);// 0xbb05ea0 0x78d71cf900
	int GetIndexForItem(Object* Item);// 0xbb05dbc 0x78d71cf9e0
	void ClearListItems();// 0xbb05da8 0x78d71cfac0
	void BP_SetSelectedItem(Object* Item);// 0xbb05a28 0x78d71cfba0
	void BP_SetListItems(out const Object*[] InListItems);// 0xbb054f8 0x78d71cfc80
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0xbb0592c 0x78d71cfd60
	void BP_ScrollItemIntoView(Object* Item);// 0xbb055f0 0x78d71cfe40
	void BP_NavigateToItem(Object* Item);// 0xbb05698 0x78d71cff20
	bool BP_IsItemVisible(Object* Item);// 0xbb05740 0x78d71ccaa0
	bool BP_GetSelectedItems(out Object*[] items);// 0xbb057f4 0x78d71ccb80
	Object* BP_GetSelectedItem();// 0xbb054c4 0x78d71ccc60
	int BP_GetNumItemsSelected();// 0xbb058e4 0x78d71ccd40
	void BP_ClearSelection();// 0xbb05918 0x78d71cce20
	void BP_CancelScrollIntoView();// 0xbb055dc 0x78d71ccf00
	void AddItem(Object* Item);// 0xbb05ff8 0x78d71ccfe0

--------------------------------
Class: UIListView.ListView.ListViewBase.Widget.Visual.Object
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x368, Size: 0x4d0] 0x78d71d7a80
	enum ScrollBarVisibility;//[Offset: 0x838, Size: 0x1] 0x78d71548e0
	Vector2D ScrollbarThickness;//[Offset: 0x83c, Size: 0x8] 0x78d71d7b80
	Margin ScrollbarPadding;//[Offset: 0x844, Size: 0x10] 0x78d71d7c00
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 0x1] 0x78d71d7c80
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x855, Size: 0x1] 0x78d71d7d00
	bool AllowStopHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x856, Size: 0x1] 0x78d71d7d80

--------------------------------
Class: UIListViewItem.UserWidget.Widget.Visual.Object
	UIListViewItemData* UIListViewItemData;//[Offset: 0x268, Size: 0x8] 0x78d71d7a00

--------------------------------
Class: UIListViewItemData.Object

--------------------------------
Class: UILoadingMgr.Object
	UserWidget* EnterFightLoadingUI;//[Offset: 0x60, Size: 0x8] 0x78d71d7580
	UserWidget* LeaveFightLoadingUI;//[Offset: 0x68, Size: 0x8] 0x78d71d7600
	UserWidget* EnterFightLoadingRole;//[Offset: 0x70, Size: 0x8] 0x78d71d7680
	UITextBlock* LoadingProgressNum;//[Offset: 0x78, Size: 0x8] 0x78d71d7700
	UIShrinkTextBlock* LoadingTipText;//[Offset: 0x80, Size: 0x8] 0x78d71d7780
	UITextBlock* LoadingDebugText;//[Offset: 0x88, Size: 0x8] 0x78d71d7800
	void Tick(const float DeltaTime, const FString ThreadName);// 0xa5998fc 0x78d71cf040
	static UILoadingMgr* Instance();// 0xa599aa0 0x78d71cf120

--------------------------------
Class: UILoadingWidget.UserWidget.Widget.Visual.Object
	enum UITickFrequency;//[Offset: 0x260, Size: 0x1] 0x78d7154840

--------------------------------
Class: UILogicMsgMgr.Object

--------------------------------
Class: UIPlayerController.PlayerController.Controller.Actor.Object

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18] 0x78d71d8b80
	DataTable* TextStyleSet;//[Offset: 0x140, Size: 0x8] 0x78d71d8c00
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x148, Size: 0x10] 0x78d7154520
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1] 0x78d71d8c80
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x160, Size: 0x270] 0x78d71d8d00
	float MinDesiredWidth;//[Offset: 0x3d0, Size: 0x4] 0x78d71d8d80
	enum TextTransformPolicy;//[Offset: 0x3d4, Size: 0x1] 0x78d71545c0
	TextBlockStyle DefaultTextStyle;//[Offset: 0x3d8, Size: 0x270] 0x78d71d8e80
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x648, Size: 0x10] 0x78d7154660
	void SetTextTransformPolicy(enum InTransformPolicy);// 0xbb1189c 0x78d71e19e0
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0xbb114b4 0x78d71e1ac0
	void SetText(out const FText InText);// 0xbb1155c 0x78d71e1ba0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0xbb119f4 0x78d71e1c80
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0xbb117c8 0x78d71ce780
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0xbb11a9c 0x78d71ce860
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0xbb11fa8 0x78d71ce940
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0xbb1204c 0x78d71cea20
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0xbb11d30 0x78d71ceb00
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0xbb120f4 0x78d71cebe0
	void SetAutoWrapText(bool InAutoTextWrap);// 0xbb11944 0x78d71cecc0
	FText GetText();// 0xbb116e0 0x78d71ceda0
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0xbb11404 0x78d71cee80
	void ClearAllDefaultStyleOverrides();// 0xbb117b4 0x78d71cef60

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: UIRichTextBlock.RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	int CurrStyleId;//[Offset: 0x678, Size: 0x4] 0x78d71d8a80
	SlateColor ColorAndOpacity;//[Offset: 0x680, Size: 0x28] 0x78d71d8b00

--------------------------------
Class: UIRichTextBlockClickableDecorator.RichTextBlockDecorator.Object
	DataTable* TextStyleSet;//[Offset: 0x28, Size: 0x8] 0x78d71d8a00

--------------------------------
Class: UIRichTextBlockClickableBluePrint_C.UIRichTextBlockClickableDecorator.RichTextBlockDecorator.Object

--------------------------------
Class: RichTextBlockImageDecorator.RichTextBlockDecorator.Object
	DataTable* ImageSet;//[Offset: 0x28, Size: 0x8] 0x78d71d8980

--------------------------------
Class: UIRichTextBlockImageDecorator.RichTextBlockImageDecorator.RichTextBlockDecorator.Object

--------------------------------
Class: UIRichTextBlockImageBluePrint_C.UIRichTextBlockImageDecorator.RichTextBlockImageDecorator.RichTextBlockDecorator.Object

--------------------------------
Class: UIScalingRule.DPICustomScalingRule.Object

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x120, Size: 0x228] 0x78d71d9880
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x348, Size: 0x4d0] 0x78d71d9900
	SlateWidgetStyleAsset* Style;//[Offset: 0x818, Size: 0x8] 0x78d71d9980
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x820, Size: 0x8] 0x78d71d9a00
	byte Orientation;//[Offset: 0x828, Size: 0x1] 0x78d71d9a80
	enum ScrollBarVisibility;//[Offset: 0x829, Size: 0x1] 0x78d7154020
	enum ConsumeMouseWheel;//[Offset: 0x82a, Size: 0x1] 0x78d71540c0
	Vector2D ScrollbarThickness;//[Offset: 0x82c, Size: 0x8] 0x78d71d9c00
	Margin ScrollbarPadding;//[Offset: 0x834, Size: 0x10] 0x78d71d9c80
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 0x1] 0x78d71d9d00
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 0x1] 0x78d71d9d80
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x846, Size: 0x1] 0x78d71d9e00
	bool bAnimateWheelScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x847, Size: 0x1] 0x78d71d9e80
	enum NavigationDestination;//[Offset: 0x848, Size: 0x1] 0x78d7154160
	float NavigationScrollPadding;//[Offset: 0x84c, Size: 0x4] 0x78d71d9f80
	enum ScrollWhenFocusChanges;//[Offset: 0x850, Size: 0x1] 0x78d7154200
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 0x1] 0x78d71da080
	float WheelScrollMultiplier;//[Offset: 0x854, Size: 0x4] 0x78d71da100
	delegate OnUserScrolled;//[Offset: 0x858, Size: 0x10] 0x78d71da180
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0xbb14670 0x78d71e0b00
	void SetScrollOffset(float NewScrollOffset);// 0xbb145b4 0x78d71e0be0
	void SetScrollbarVisibility(enum NewScrollBarVisibility);// 0xbb14a8c 0x78d71e0cc0
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0xbb149dc 0x78d71e0da0
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0xbb14928 0x78d71e0e80
	void SetOrientation(byte NewOrientation);// 0xbb14b34 0x78d71e0f60
	void SetConsumeMouseWheel(enum NewConsumeMouseWheel);// 0xbb14bdc 0x78d71e1040
	void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);// 0xbb14718 0x78d71e1120
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0xbb14878 0x78d71e1200
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0xbb147c8 0x78d71e12e0
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination, float Padding);// 0xbb14368 0x78d71e13c0
	void ScrollToStart();// 0xbb14504 0x78d71e14a0
	void ScrollToEnd();// 0xbb144f0 0x78d71e1580
	float GetViewOffsetFraction();// 0xbb14518 0x78d71e1660
	float GetScrollOffsetOfEnd();// 0xbb1454c 0x78d71e1740
	float GetScrollOffset();// 0xbb14580 0x78d71e1820
	void EndInertialScrolling();// 0xbb1465c 0x78d71e1900

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 0x88] 0x78dbe41100
	SlateBrush BottomShadowBrush;//[Offset: 0x90, Size: 0x88] 0x78dbe41180
	SlateBrush LeftShadowBrush;//[Offset: 0x118, Size: 0x88] 0x78dbe41200
	SlateBrush RightShadowBrush;//[Offset: 0x1a0, Size: 0x88] 0x78dbe41280

--------------------------------
Class: UIScrollBox.ScrollBox.PanelWidget.Widget.Visual.Object

--------------------------------
Class: UITickMgr.Object

--------------------------------
Class: UIUserWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: UIVfxParticleHelper.BlueprintFunctionLibrary.Object

--------------------------------
Class: UIWidgetEffectMgr.Object
	static UIWidgetEffectMgr* Instance();// 0xa59c670 0x78d71e2c40

--------------------------------
Class: UIWorldMapMgr.Object
	UIWorldMapData MapData;//[Offset: 0x28, Size: 0xa0] 0x78d71dd600
	Actor*[] CameraActor;//[Offset: 0xc8, Size: 0x10] 0x78d7153e40
	<int,UIMainStoryData> MainStoryDataMap;//[Offset: 0xd8, Size: 0x50] 0x78d7103d00
	void UpdateZoomState();// 0xa59cc98 0x78d71e22a0
	void UpdateMainStoryData(int MainStoryId, bool bActive);// 0xa59cb68 0x78d71e2380
	void UpdateCameraRange(float CurCameraZoom, out float CameraViewLength, out float CameraViewWidget);// 0xa59ca18 0x78d71e2460
	void UpdateCameraLevel(bool bUpLevel, bool bAni);// 0xa59ccac 0x78d71e2540
	void SpawnCamera(int ChapterID);// 0xa59cdb8 0x78d71e2620
	void SetUIWorldMapDataById(int ChapterID);// 0xa59ce60 0x78d71e2700
	void SetUIWorldMapData(out const UIWorldMapData Data);// 0xa59cf08 0x78d71e27e0
	bool IsLoadSubLevelComplete();// 0xa59cc60 0x78d71e28c0
	static UIWorldMapMgr* Instance();// 0xa59d130 0x78d71e29a0
	UIWorldMapData GetUIWorldMapData();// 0xa59d078 0x78d71e2a80
	void DestroyCamera();// 0xa59cda4 0x78d71e2b60

--------------------------------
Class: UIWorldMapData
	int ChapterID;//[Offset: 0x0, Size: 0x4] 0x78dbe2dc80
	int CameraRangeX;//[Offset: 0x4, Size: 0x4] 0x78dbe2dd00
	int CameraRangeY;//[Offset: 0x8, Size: 0x4] 0x78dbe2dd80
	int CameraRangeOffsetX;//[Offset: 0xc, Size: 0x4] 0x78dbe2de00
	int CameraRangeOffsetY;//[Offset: 0x10, Size: 0x4] 0x78dbe2de80
	int CameraZoomScaleX;//[Offset: 0x14, Size: 0x4] 0x78dbe2df00
	int CameraZoomScaleY;//[Offset: 0x18, Size: 0x4] 0x78dbe2df80
	int CameraZoomRangeMax;//[Offset: 0x1c, Size: 0x4] 0x78dbe2e000
	int CameraZoomRangeMin;//[Offset: 0x20, Size: 0x4] 0x78dbe2e080
	int CameraZoomSpeed;//[Offset: 0x24, Size: 0x4] 0x78dbe2e100
	int CameraSpeed;//[Offset: 0x28, Size: 0x4] 0x78dbe2e180
	int CameraLevel;//[Offset: 0x2c, Size: 0x4] 0x78dbe2e200
	int CameraShowDeviation;//[Offset: 0x30, Size: 0x4] 0x78dbe2e280
	float CameraShowTime;//[Offset: 0x34, Size: 0x4] 0x78dbe2e300
	int CameraShowLevel;//[Offset: 0x38, Size: 0x4] 0x78dbe2e380
	float UIZoomRange;//[Offset: 0x3c, Size: 0x4] 0x78dbe2e400
	float InitDistance;//[Offset: 0x40, Size: 0x4] 0x78dbe2e480
	Vector CameraCoordinate;//[Offset: 0x44, Size: 0xc] 0x78dbe2e500
	<int,Vector> LevelList;//[Offset: 0x50, Size: 0x50] 0x78dbe30580

--------------------------------
Class: UIMainStoryData
	int MainStoryId;//[Offset: 0x0, Size: 0x4] 0x78dbe2e680
	int AfterId;//[Offset: 0x4, Size: 0x4] 0x78dbe2e700
	Vector IconLogin;//[Offset: 0x8, Size: 0xc] 0x78dbe2c680
	Vector bUnlock;//[Offset: 0x14, Size: 0xc] 0x78dbe2c700

--------------------------------
Class: UmgMgr.Object
	UserWidget* TickUserWidget;//[Offset: 0x30, Size: 0x8] 0x78d71df300
	EPoolableWidgetsPool WidgetsPool;//[Offset: 0x38, Size: 0x50] 0x78d71df380
	<class EPoolableWidget,int> WidgetClassesToReserveInPool;//[Offset: 0x88, Size: 0x50] 0x78d7103c40
	void WakeupFromSuspend();// 0xa59ddd8 0x78d71e7240
	void UnBindRedDotWidget(UserWidget* RedDotWidget);// 0xa59dab8 0x78d71e7320
	FString StringToMd5AddSuffix(FString SourceString);// 0xa59ddec 0x78d71e3a40
	FString StringToMd5(FString SourceString);// 0xa59df2c 0x78d71e3b20
	UserWidget* SetWidgetPositionInViewport(Widget* TargetWidget, Vector2D Position, int ZOrder);// 0xa59e5f4 0x78d71e3c00
	bool SetScrollBarState(ScrollBox* TargetScrollBox, float Time);// 0xa59e34c 0x78d71e3ce0
	void SetKeyBindNameById(Widget* KeyWidget, int ID);// 0xa59d8f4 0x78d71e3dc0
	void SetKeyBindNameByBindListId(Widget* KeyWidget, int Listid);// 0xa59d800 0x78d71e3ea0
	void SetAllTagedSequencePlayerScreenFit(FString SequencePlayerTag, const float Width, const float Height);// 0xa59ec40 0x78d71e3f80
	void ResetCtrlPadOrder(bool isTop);// 0xa59eb90 0x78d71e4060
	void PrintLogOnViewport(FString LogText, LinearColor Color);// 0xa59e44c 0x78d71e4140
	void NoticeRedDotWidgetAssigned(UserWidget* RedDotWidget, enum ModuleType, enum LabelType, int64 DynamincId);// 0xa59db60 0x78d71e4220
	UITextBlock* NewUITextBlock();// 0xa59ef24 0x78d71e4300
	UIRichTextBlock* NewUIRichTextBlock();// 0xa59eebc 0x78d71e43e0
	UIImage* NewUIImage();// 0xa59eef0 0x78d71e44c0
	bool IsViewportPosInsideSkillCtrlPadRespondArea(out const Vector2D viewportPos);// 0xa59e8ec 0x78d71e45a0
	bool IsScreenSpacePosInsideSkillCtrlPadRespondArea(out const Vector2D screenSpacePos);// 0xa59e830 0x78d71e4680
	bool IsPlayerOperatingSkillCtrlPad(bool ignoreAutoHolding);// 0xa59e9e0 0x78d71e4760
	bool IsPlayerOperatingMoveCtrlPad();// 0xa59ea9c 0x78d71e4840
	bool IsPlayerOperatingAnyCtrlPad(bool ignoreAutoHolding);// 0xa59ead4 0x78d71e4920
	bool IsPlatformPC();// 0xa59e314 0x78d71e4a00
	bool IsCancelSkillCastVisible();// 0xa59e9a8 0x78d71e4ae0
	void InvalidateViewportSizeForWidgets();// 0xa59ddc4 0x78d71e4bc0
	static UmgMgr* Instance();// 0xa59f440 0x78d71e4ca0
	void HitUEAssert(enum Type, bool Expression, FString LogText);// 0xa59e11c 0x78d71e4d80
	Vector2D GetWidgetCachedInfo(Widget* TargetWidget, enum CachedType);// 0xa59e734 0x78d71e4e60
	float GetViewPortSizeAspectRatio();// 0xa59f3a4 0x78d71e4f40
	Vector2D GetViewportSize();// 0xa59f40c 0x78d71e5020
	float GetViewPortScale();// 0xa59f3d8 0x78d71e5100
	UserWidget* GetRageWidgetFromFightUI();// 0xa59da84 0x78d71e51e0
	Vector2D GetMousePosition();// 0xa59f370 0x78d71e52c0
	LinearColor GetLinearColorById(int colorId);// 0xa59f118 0x78d71e53a0
	float GetDistXY(out const Vector v1, out const Vector v2);// 0xa59edb0 0x78d71e5480
	Widget* GetCureWidgetFromFightUI();// 0xa59d9e8 0x78d71e5560
	UserWidget* GetCtrlPad();// 0xa59da50 0x78d71e5640
	SlateColor GetColorById(int colorId);// 0xa59f1cc 0x78d71e1d60
	Widget* GetAngerWidgetFromFightUI();// 0xa59da1c 0x78d71e1e40
	void DebugString(FString DebugInfo);// 0xa59dcec 0x78d71e1f20
	UserWidget* CreateUserWidget(FString FilePath);// 0xa59f038 0x78d71e2000
	Object* CreateListViewItemData(FString FilePath);// 0xa59ef58 0x78d71e20e0
	UserWidget* CastToUserWidget(Object* Target);// 0xa59e06c 0x78d71e21c0

--------------------------------
Class: EPoolableWidgetsPool
	<class EPoolableWidget,EWidgetPool> Pools;//[Offset: 0x0, Size: 0x50] 0x78dbdfc1c0

--------------------------------
Class: EWidgetPool
	EWidgetPoolElem[] FreeElements;//[Offset: 0x18, Size: 0x10] 0x78d361b3c0

--------------------------------
Class: EWidgetPoolElem
	EPoolableWidget* Widget;//[Offset: 0x0, Size: 0x8] 0x78dbe1ba00

--------------------------------
Class: VideoMgr.Object
	MediaPlayer* MediaPlayer;//[Offset: 0x28, Size: 0x8] 0x78d71df100
	void StopVideo();// 0xa5a2a2c 0x78d71e6ec0
	void PlayVideo(FString mediaPlayerName, FString fileMediaName);// 0xa5a2a40 0x78d71e6fa0
	void MovieEnd();// 0xa5a2a18 0x78d71e7080
	static VideoMgr* Instance();// 0xa5a2b88 0x78d71e7160

--------------------------------
Class: ViewMgr.Object
	<FName,SingleView> SingleViews;//[Offset: 0x28, Size: 0x50] 0x78d7103ac0
	<int,MultiView> MultiViews;//[Offset: 0x78, Size: 0x50] 0x78d7103b80
	void TopSingleView(out const FName Name);// 0xa5a3b4c 0x78d71e5b80
	void TopMultiView(int ID);// 0xa5a32cc 0x78d71e5c60
	void ShowSingleView(out const FName Name);// 0xa5a3d70 0x78d71e5d40
	void ShowMultiView(int ID);// 0xa5a34cc 0x78d71e5e20
	void RemoveSingleView(out const FName Name);// 0xa5a40c8 0x78d71e5f00
	void RemoveMultiView(int ID);// 0xa5a38a0 0x78d71e5fe0
	void OrderSingleView(out const FName Name, int order);// 0xa5a3a54 0x78d71e60c0
	void OrderMultiView(int ID, int order);// 0xa5a31dc 0x78d71e61a0
	bool IsVisibleSingleView(out const FName Name);// 0xa5a3e24 0x78d71e6280
	bool IsVisibleMultiView(int ID);// 0xa5a3574 0x78d71e6360
	static ViewMgr* Instance();// 0xa5a423c 0x78d71e6440
	void HideSingleView(out const FName Name);// 0xa5a3cbc 0x78d71e6520
	void HideMultiView(int ID);// 0xa5a3424 0x78d71e6600
	UserWidget* GetSingleView(out const FName Name);// 0xa5a3ee4 0x78d71e66e0
	int GetOrderSingleView(out const FName Name);// 0xa5a3c00 0x78d71e67c0
	int GetOrderMultiView(int ID);// 0xa5a3374 0x78d71e68a0
	int GetMultiViewId(UserWidget* View);// 0xa5a36d8 0x78d71e6980
	UserWidget* GetMultiView(int ID);// 0xa5a3628 0x78d71e6a60
	void CallFuncSingleView(out const FName Name, FString Cmd);// 0xa5a3fa0 0x78d71e6b40
	void CallFuncMultiView(int ID, FString Cmd);// 0xa5a3788 0x78d71e6c20
	bool AddSingleView(out const FName Name);// 0xa5a417c 0x78d71e6d00
	bool AddMultiView(int ID, out const FName Name);// 0xa5a3948 0x78d71e6de0

--------------------------------
Class: SingleView
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbe40780
	bool visible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78dbe40800
	int order;//[Offset: 0xc, Size: 0x4] 0x78dbe40880
	UserWidget* View;//[Offset: 0x10, Size: 0x8] 0x78dbe40900

--------------------------------
Class: MultiView
	int ID;//[Offset: 0x0, Size: 0x4] 0x78dbe40980
	FName Name;//[Offset: 0x4, Size: 0x8] 0x78dbe40a00
	bool visible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78dbe40a80
	int order;//[Offset: 0x10, Size: 0x4] 0x78dbe40b00
	UserWidget* View;//[Offset: 0x18, Size: 0x8] 0x78dbe40b80

--------------------------------
Class: VirtualWorldMgr.Object

--------------------------------
Class: WidgetComponentMgr.Object
	static WidgetComponentMgr* Instance();// 0xa5a4e18 0x78d71e5aa0

--------------------------------
Class: WidgetHelper.BlueprintFunctionLibrary.Object
	static void ScreenMessage(FString msg, int errorType);// 0xa5a51c0 0x78d71e5720
	static bool IsPIEOrPreview(const Object* WorldContextObject);// 0xa5a52d4 0x78d71e5800
	static bool IsInEditor(const Object* WorldContextObject);// 0xa5a5380 0x78d71e58e0
	static WidgetAnimation* GetAnimationFromName(UserWidget* Widget, out const FName Name);// 0xa5a542c 0x78d71e59c0

--------------------------------
Class: WoodStakeMgr.Object
	void StopStatistic();// 0xa5a5904 0x78d71e8900
	void StartStatistic();// 0xa5a5918 0x78d71e89e0
	void LeaveMainCity();// 0xa5a5870 0x78d71e8ac0
	static WoodStakeMgr* Instance();// 0xa5a5aac 0x78d71e8ba0
	WoodStakeHurtStatistic GetStatisticInfo();// 0xa5a58cc 0x78d71e8c80
	void EnterMainCity();// 0xa5a5884 0x78d71e8d60
	void ChangeName(FString Text);// 0xa5a592c 0x78d71e8e40
	void ChangeLevel(int Level);// 0xa5a5a04 0x78d71e8f20
	float CalcDistance();// 0xa5a5898 0x78d71e9000

--------------------------------
Class: WoodStakeHurtStatistic
	int TotalTime;//[Offset: 0x0, Size: 0x4] 0x78dbe20900
	int64 AvgDPS;//[Offset: 0x8, Size: 0x8] 0x78dbe20980
	int64 CurDPS;//[Offset: 0x10, Size: 0x8] 0x78dbe20a00
	int64 MaxDPS;//[Offset: 0x18, Size: 0x8] 0x78dbe20a80

--------------------------------
Class: XDSdkMgr.Object
	delegate OnRecvXDSDKDelegate;//[Offset: 0x28, Size: 0x10] 0x78d71f2800
	void TryFetchMomentNotify();// 0xa5a6a2c 0x78d71e91c0
	static void TraceEvent(FString EventName);// 0xa5a7188 0x78d71e92a0
	static void SwitchLanguage(FString code);// 0xa5a6808 0x78d71e9380
	void SetUser(FString userId);// 0xa5a72d8 0x78d71e9460
	void SetServer(FString server);// 0xa5a7430 0x78d71e9540
	void SetRole(FString RoleId, FString RoleName, FString roleAvatar);// 0xa5a6a7c 0x78d71e9620
	void SetLevel(int Level);// 0xa5a7588 0x78d71e9700
	void SetEnterGame(bool isEnter);// 0xa5a66a8 0x78d71e97e0
	void SDKEvent(FString EventName, FString Param);// 0xa5a68d0 0x78d71e98c0
	void Report(FString ServerId, FString RoleId, FString RoleName);// 0xa5a6ed0 0x78d71e99a0
	void RecordGamePlayTime(bool isStart);// 0xa5a6758 0x78d71e9a80
	void QueryWithProductIdArray();// 0xa5a6ebc 0x78d71e9b60
	void Pay(out const PlatformSDKRequestParams Params);// 0xa5a6dbc 0x78d71e9c40
	void OpenUserCenter();// 0xa5a7870 0x78d71e9d20
	void OpenUserBindView();// 0xa5a6a40 0x78d71e9e00
	void OpenRealName();// 0xa5a7088 0x78d71e9ee0
	void OpenMomentByURL(FString SceneId);// 0xa5a7630 0x78d71e9fc0
	void OpenMoment();// 0xa5a7788 0x78d71ea0a0
	void OpenAccountCancellation();// 0xa5a6a18 0x78d71ea180
	void OnXDSDKSwitchAccount();// 0xa5a8cf0 0x78d71ea260
	void OnXDSDKLogoutSucceed();// 0xa5a8d04 0x78d71ea340
	void OnXDSDKGetUserCompleted(const int code, FString msg);// 0xa5a8830 0x78d71ea420
	void OnXDGSDKUserStateChanged(const int code, FString msg);// 0xa5a8528 0x78d71ea500
	void OnXDGSDKShareCompletedCallback(int code);// 0xa5a8c48 0x78d71ea5e0
	void OnXDGSDKQueryRestoredPurchasesSucceed(FString msg);// 0xa5a7f20 0x78d71ea6c0
	void OnXDGSDKQueryRestoredPurchasesFailed(const int code, FString msg);// 0xa5a7e08 0x78d71ea7a0
	void OnXDGSDKQueryProductIdsSucceed(FString msg);// 0xa5a8110 0x78d71ea880
	void OnXDGSDKQueryProductIdsFailed(const int code, FString msg);// 0xa5a7ff8 0x78d71ea960
	void OnXDGSDKPayWithWebCompleted(FString ServerId, FString RoleId, const int code, FString msg);// 0xa5a7c00 0x78d71eaa40
	void OnXDGSDKPaymentSucceed(FString OrderId, FString productId, FString ServerId, FString RoleId);// 0xa5a8300 0x78d71eab20
	void OnXDGSDKPaymentFailed(const int code, FString msg);// 0xa5a81e8 0x78d71eac00
	void OnXDGSDKMomentCallback(const int code, FString msg);// 0xa5a78f8 0x78d71eace0
	void OnXDGSDKLoginSync(FString msg);// 0xa5a8d18 0x78d71e7400
	void OnXDGSDKLoginSucceed(FString msg);// 0xa5a8f78 0x78d71e74e0
	void OnXDGSDKLoginFailed(const int code, FString msg, FString msg2);// 0xa5a8df0 0x78d71e75c0
	void OnXDGSDKGetUserSucceed(FString msg);// 0xa5a8758 0x78d71e76a0
	void OnXDGSDKGetUserFailed(const int code, FString msg);// 0xa5a8640 0x78d71e7780
	void OnXDGSDKGetRegionInfoCompleted(FString countryCode, FString city, FString timeZone, FString locationInfoType);// 0xa5a8a20 0x78d71e7860
	void OnXDGSDKGetJsonInfo(FString jsonStr);// 0xa5a8948 0x78d71e7940
	void OnXDGSDKCheckRefundStatusSucceed(FString msg);// 0xa5a7b28 0x78d71e7a20
	void OnXDGSDKCheckRefundStatusFailed(const int code, FString msg);// 0xa5a7a10 0x78d71e7b00
	void OnSDKInitCallback(bool isSuccess, FString msg);// 0xa5a9050 0x78d71e7be0
	void Logout();// 0xa5a7884 0x78d71e7cc0
	void LoginByType(FString loginType);// 0xa5a70b0 0x78d71e7da0
	void LoginByTapTap();// 0xa5a6d94 0x78d71e7e80
	void LoginByGuest();// 0xa5a6a54 0x78d71e7f60
	void LoginByApple();// 0xa5a6a68 0x78d71e8040
	void Login();// 0xa5a7898 0x78d71e8120
	bool IsSDKInitialized();// 0xa5a78ac 0x78d71e8200
	static bool IsCN();// 0xa5a6670 0x78d71e82e0
	static XDSdkMgr* Instance();// 0xa5a9170 0x78d71e83c0
	static void InitSDK();// 0xa5a78e4 0x78d71e84a0
	FString GetSDKVersion();// 0xa5a779c 0x78d71e8580
	void GetRegionInfo();// 0xa5a709c 0x78d71e8660
	void CheckRefundStatus();// 0xa5a6ea8 0x78d71e8740
	static void AutoLogin();// 0xa5a6da8 0x78d71e8820

--------------------------------
Class: InputCoreTypes.Object

--------------------------------
Class: FontBulkData.Object

--------------------------------
Class: FontFaceInterface.Interface.Object

--------------------------------
Class: FontProviderInterface.Interface.Object

--------------------------------
Class: SlateTypes.Object

--------------------------------
Class: SlateWidgetStyleContainerInterface.Interface.Object

--------------------------------
Class: ButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ButtonStyle ButtonStyle;//[Offset: 0x30, Size: 0x278] 0x78d71f2700

--------------------------------
Class: CheckBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x30, Size: 0x580] 0x78d71f2680

--------------------------------
Class: ComboBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboBoxStyle ComboBoxStyle;//[Offset: 0x30, Size: 0x3f0] 0x78d71f2600

--------------------------------
Class: ComboButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x30, Size: 0x3b8] 0x78d71f2580

--------------------------------
Class: EditableTextBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextBoxStyle EditableTextBoxStyle;//[Offset: 0x30, Size: 0x7f8] 0x78d71f2500

--------------------------------
Class: EditableTextWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextStyle EditableTextStyle;//[Offset: 0x30, Size: 0x220] 0x78d71f2480

--------------------------------
Class: ProgressWidgetStyle.SlateWidgetStyleContainerBase.Object
	ProgressBarStyle ProgressBarStyle;//[Offset: 0x30, Size: 0x1a0] 0x78d71f2400

--------------------------------
Class: ScrollBarWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x30, Size: 0x4d0] 0x78d71f2380

--------------------------------
Class: ScrollBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBoxStyle ScrollBoxStyle;//[Offset: 0x30, Size: 0x228] 0x78d71f2300

--------------------------------
Class: SlateSettings.Object
	bool bExplicitCanvasChildZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78d71f2280

--------------------------------
Class: SpinBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	SpinBoxStyle SpinBoxStyle;//[Offset: 0x30, Size: 0x2e8] 0x78d71f2200

--------------------------------
Class: SpinBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundBrush;//[Offset: 0x8, Size: 0x88] 0x78d3579000
	SlateBrush HoveredBackgroundBrush;//[Offset: 0x90, Size: 0x88] 0x78d3579080
	SlateBrush ActiveFillBrush;//[Offset: 0x118, Size: 0x88] 0x78d3579100
	SlateBrush InactiveFillBrush;//[Offset: 0x1a0, Size: 0x88] 0x78d3579180
	SlateBrush ArrowsImage;//[Offset: 0x228, Size: 0x88] 0x78d3579200
	SlateColor ForegroundColor;//[Offset: 0x2b0, Size: 0x28] 0x78d3579280
	Margin TextPadding;//[Offset: 0x2d8, Size: 0x10] 0x78d3579300

--------------------------------
Class: TextBlockWidgetStyle.SlateWidgetStyleContainerBase.Object
	TextBlockStyle TextBlockStyle;//[Offset: 0x30, Size: 0x270] 0x78d71f2180

--------------------------------
Class: ToolMenuBase.Object

--------------------------------
Class: ImageWriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void ExportToDisk(Texture* Texture, FString Filename, out const ImageWriteOptions Options);// 0xb003f58 0x78d71e90e0

--------------------------------
Class: ImageWriteOptions
	enum Format;//[Offset: 0x0, Size: 0x1] 0x78d361f880
	delegate OnComplete;//[Offset: 0x4, Size: 0x10] 0x78dbe44480
	int CompressionQuality;//[Offset: 0x14, Size: 0x4] 0x78dbe44500
	bool bOverwriteFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78dbe44580
	bool bAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78dbe44600

--------------------------------
Class: GameNetworkManagerSettings.Object
	int MinDynamicBandwidth;//[Offset: 0x28, Size: 0x4] 0x78d71f4d00
	int MaxDynamicBandwidth;//[Offset: 0x2c, Size: 0x4] 0x78d71f4d80
	int TotalNetBandwidth;//[Offset: 0x30, Size: 0x4] 0x78d71f4e00
	int BadPingThreshold;//[Offset: 0x34, Size: 0x4] 0x78d71f4e80
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78d71f4f00
	float StandbyRxCheatTime;//[Offset: 0x3c, Size: 0x4] 0x78d71f4f80
	float StandbyTxCheatTime;//[Offset: 0x40, Size: 0x4] 0x78d71f5000
	float PercentMissingForRxStandby;//[Offset: 0x44, Size: 0x4] 0x78d71f5080
	float PercentMissingForTxStandby;//[Offset: 0x48, Size: 0x4] 0x78d71f5100
	float PercentForBadPing;//[Offset: 0x4c, Size: 0x4] 0x78d71f5180
	float JoinInProgressStandbyWaitTime;//[Offset: 0x50, Size: 0x4] 0x78d71f5200

--------------------------------
Class: GameSessionSettings.Object
	int MaxSpectators;//[Offset: 0x28, Size: 0x4] 0x78d71f4b80
	int MaxPlayers;//[Offset: 0x2c, Size: 0x4] 0x78d71f4c00
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78d71f4c80

--------------------------------
Class: GeneralEngineSettings.Object

--------------------------------
Class: GeneralProjectSettings.Object
	FString CompanyName;//[Offset: 0x28, Size: 0x10] 0x78d71f6280
	FString CompanyDistinguishedName;//[Offset: 0x38, Size: 0x10] 0x78d71f6300
	FString CopyrightNotice;//[Offset: 0x48, Size: 0x10] 0x78d71f4280
	FString Description;//[Offset: 0x58, Size: 0x10] 0x78d71f4300
	FString Homepage;//[Offset: 0x68, Size: 0x10] 0x78d71f4380
	FString LicensingTerms;//[Offset: 0x78, Size: 0x10] 0x78d71f4400
	FString PrivacyPolicy;//[Offset: 0x88, Size: 0x10] 0x78d71f4480
	Guid ProjectID;//[Offset: 0x98, Size: 0x10] 0x78d71f4500
	FString ProjectName;//[Offset: 0xa8, Size: 0x10] 0x78d71f4580
	FString ProjectVersion;//[Offset: 0xb8, Size: 0x10] 0x78d71f4600
	FString SupportContact;//[Offset: 0xc8, Size: 0x10] 0x78d71f4680
	FText ProjectDisplayedTitle;//[Offset: 0xd8, Size: 0x18] 0x78d71f4700
	FText ProjectDebugTitleInfo;//[Offset: 0xf0, Size: 0x18] 0x78d71f4780
	bool bShouldWindowPreserveAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1] 0x78d71f4800
	bool bUseBorderlessWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1] 0x78d71f4880
	bool bStartInVR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 0x1] 0x78d71f4900
	bool bAllowWindowResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b, Size: 0x1] 0x78d71f4980
	bool bAllowClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x78d71f4a00
	bool bAllowMaximize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1] 0x78d71f4a80
	bool bAllowMinimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1] 0x78d71f4b00

--------------------------------
Class: HudSettings.Object
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78d71f6180
	FName[] DebugDisplay;//[Offset: 0x30, Size: 0x10] 0x78d71560a0

--------------------------------
Class: ChaosPhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4] 0x78d71f5c00
	float StaticFriction;//[Offset: 0x2c, Size: 0x4] 0x78d71f5c80
	float Restitution;//[Offset: 0x30, Size: 0x4] 0x78d71f5d00
	float LinearEtherDrag;//[Offset: 0x34, Size: 0x4] 0x78d71f5d80
	float AngularEtherDrag;//[Offset: 0x38, Size: 0x4] 0x78d71f5e00
	float SleepingLinearVelocityThreshold;//[Offset: 0x3c, Size: 0x4] 0x78d71f5e80
	float SleepingAngularVelocityThreshold;//[Offset: 0x40, Size: 0x4] 0x78d71f5f00

--------------------------------
Class: MeshReconstructorBase.Object
	void StopReconstruction();// 0xb034de0 0x78d71ec1e0
	void StartReconstruction();// 0xb034dfc 0x78d71ec2c0
	void PauseReconstruction();// 0xb034dc4 0x78d71ec3a0
	bool IsReconstructionStarted();// 0xb034d84 0x78d71ec480
	bool IsReconstructionPaused();// 0xb034d44 0x78d71ec560
	void DisconnectMRMesh();// 0xb034c78 0x78d71ec640
	void ConnectMRMesh(MRMeshComponent* mesh);// 0xb034c94 0x78d71ec720

--------------------------------
Class: MRMeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* Material;//[Offset: 0x480, Size: 0x8] 0x78d71f8200
	MaterialInterface* WireframeMaterial;//[Offset: 0x488, Size: 0x8] 0x78d71f8280
	bool bCreateMeshProxySections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1] 0x78d71f8300
	bool bUpdateNavMeshOnMeshUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 0x1] 0x78d71f8380
	bool bNeverCreateCollisionMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 0x1] 0x78d71f8400
	BodySetup* CachedBodySetup;//[Offset: 0x498, Size: 0x8] 0x78d71f6380
	BodySetup*[] BodySetups;//[Offset: 0x4a0, Size: 0x10] 0x78d7156000
	void SetWireframeMaterial(MaterialInterface* InMaterial);// 0xb035a48 0x78d71eb920
	void SetWireframeColor(out const LinearColor InColor);// 0xb035800 0x78d71eba00
	void SetUseWireframe(bool bUseWireframe);// 0xb0358cc 0x78d71ebae0
	void SetEnableMeshOcclusion(bool bEnable);// 0xb035998 0x78d71ebbc0
	bool IsConnected();// 0xb035b28 0x78d71ebca0
	LinearColor GetWireframeColor();// 0xb0357e4 0x78d71ebd80
	bool GetUseWireframe();// 0xb0358b0 0x78d71ebe60
	bool GetEnableMeshOcclusion();// 0xb03597c 0x78d71ebf40
	void ForceNavMeshUpdate();// 0xb035b14 0x78d71ec020
	void Clear();// 0xb035af8 0x78d71ec100

--------------------------------
Class: MockDataMeshTrackerComponent.SceneComponent.ActorComponent.Object
	delegate OnMeshTrackerUpdated;//[Offset: 0x208, Size: 0x10] 0x78d35ad500
	bool ScanWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1] 0x78d35ad580
	bool RequestNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 0x1] 0x78d35ad680
	bool RequestVertexConfidence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a, Size: 0x1] 0x78d35ad600
	enum VertexColorMode;//[Offset: 0x21b, Size: 0x1] 0x78cdd5fe20
	Color[] BlockVertexColors;//[Offset: 0x220, Size: 0x10] 0x78cdd5fec0
	LinearColor VertexColorFromConfidenceZero;//[Offset: 0x230, Size: 0x10] 0x78d35ab700
	LinearColor VertexColorFromConfidenceOne;//[Offset: 0x240, Size: 0x10] 0x78d35ab780
	float UpdateInterval;//[Offset: 0x250, Size: 0x4] 0x78d35ab800
	MRMeshComponent* MRMesh;//[Offset: 0x258, Size: 0x8] 0x78d35ab880
	void OnMockDataMeshTrackerUpdated__DelegateSignature(int Index, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const float[] Confidence);// 0xaa7cd18 0x78d3600b00
	void DisconnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0xb035448 0x78d3600be0
	void ConnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0xb0354f0 0x78d3600cc0

--------------------------------
Class: ARActor.Actor.Object
	ARComponent* AddARComponent(class ARComponent InComponentClass, out const Guid NativeID);// 0xb056df0 0x78d71eb840

--------------------------------
Class: ARComponent.SceneComponent.ActorComponent.Object
	Guid NativeID;//[Offset: 0x204, Size: 0x10] 0x78d71fb980
	bool bUseDefaultReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x78d71fba00
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x250, Size: 0x8] 0x78d71fba80
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x258, Size: 0x8] 0x78d71fbb00
	MRMeshComponent* MRMeshComponent;//[Offset: 0x260, Size: 0x8] 0x78d71fbb80
	ARTrackedGeometry* MyTrackedGeometry;//[Offset: 0x268, Size: 0x8] 0x78d71fbc00
	void UpdateVisualization();// 0xb05f1c8 0x78d7201c80
	void SetNativeID(Guid NativeID);// 0xb05f200 0x78d71ee780
	void ReceiveRemove();// 0xaa7cd18 0x78d71ee860
	void OnRep_Payload();// 0xb05f1ac 0x78d71ee940
	MRMeshComponent* GetMRMesh();// 0xb05f1e4 0x78d71eea20

--------------------------------
Class: ARTrackedGeometry.Object
	Guid UniqueId;//[Offset: 0x28, Size: 0x10] 0x78d7214480
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x30] 0x78d7214500
	Transform LocalToAlignedTrackingTransform;//[Offset: 0x70, Size: 0x30] 0x78d7214580
	enum TrackingState;//[Offset: 0xa0, Size: 0x1] 0x78d7159520
	MRMeshComponent* UnderlyingMesh;//[Offset: 0xb0, Size: 0x8] 0x78d7214680
	enum ObjectClassification;//[Offset: 0xb8, Size: 0x1] 0x78d71595c0
	int LastUpdateFrameNumber;//[Offset: 0xd0, Size: 0x4] 0x78d7214780
	FName DebugName;//[Offset: 0xe0, Size: 0x8] 0x78d7214800
	bool IsTracked();// 0xb071aa8 0x78d7208d60
	MRMeshComponent* GetUnderlyingMesh();// 0xb071954 0x78d7208e40
	enum GetTrackingState();// 0xb071ae0 0x78d7208f20
	enum GetObjectClassification();// 0xb071938 0x78d7209000
	FString GetName();// 0xb0719f0 0x78d7205720
	Transform GetLocalToWorldTransform();// 0xb071b80 0x78d7205800
	Transform GetLocalToTrackingTransform();// 0xb071b14 0x78d72058e0
	float GetLastUpdateTimestamp();// 0xb071988 0x78d72059c0
	int GetLastUpdateFrameNumber();// 0xb0719bc 0x78d7205aa0
	FName GetDebugName();// 0xb071a74 0x78d7205b80

--------------------------------
Class: ARBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void UnpinComponent(SceneComponent* ComponentToUnpin);// 0xb058f10 0x78d71ef200
	static bool ToggleARCapture(const bool bOnOff, const enum CaptureType);// 0xb05a610 0x78d71ef2e0
	static void StopARSession();// 0xb05a81c 0x78d71ef3c0
	static void StartARSession(ARSessionConfig* SessionConfig);// 0xb05a844 0x78d71ef4a0
	static void SetEnabledXRCamera(bool bOnOff);// 0xb05a570 0x78d71ef580
	static void SetARWorldScale(float InWorldScale);// 0xb0579c8 0x78d71ef660
	static void SetARWorldOriginLocationAndRotation(Vector OriginLocation, Rotator OriginRotation, bool bIsTransformInWorldSpace, bool bMaintainUpDirection);// 0xb057a60 0x78d71ef740
	static void SetAlignmentTransform(out const Transform InAlignmentTransform);// 0xb05a3f0 0x78d71ef820
	static bool SaveARPinToLocalStore(FName InSaveName, ARPin* InPin);// 0xb058b38 0x78d71ef900
	static IntPoint ResizeXRCamera(out const IntPoint InSize);// 0xb05a4bc 0x78d71ef9e0
	static void RemovePin(ARPin* PinToRemove);// 0xb058e78 0x78d71efac0
	static void RemoveARPinFromLocalStore(FName InSaveName);// 0xb058aa0 0x78d71efba0
	static void RemoveAllARPinsFromLocalStore();// 0xb058a8c 0x78d71efc80
	static ARPin* PinComponentToTraceResult(SceneComponent* ComponentToPin, out const ARTraceResult TraceResult, const FName DebugName);// 0xb05909c 0x78d71efd60
	static bool PinComponentToARPin(SceneComponent* ComponentToPin, ARPin* Pin);// 0xb058fa8 0x78d71efe40
	static ARPin* PinComponent(SceneComponent* ComponentToPin, out const Transform PinToWorldTransform, ARTrackedGeometry* TrackedGeometry, const FName DebugName);// 0xb0592a8 0x78d71eff20
	static void PauseARSession();// 0xb05a830 0x78d71ecaa0
	static <FName,ARPin*> LoadARPinsFromLocalStore();// 0xb058c2c 0x78d71ecb80
	static ARTraceResult[] LineTraceTrackedObjects3D(const Vector Start, const Vector End, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0xb059c0c 0x78d71ecc60
	static ARTraceResult[] LineTraceTrackedObjects(const Vector2D ScreenCoord, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0xb05a024 0x78d71ecd40
	static bool IsSessionTypeSupported(enum SessionType);// 0xb0597fc 0x78d71ece20
	static bool IsSessionTrackingFeatureSupported(enum SessionType, enum SessionTrackingFeature);// 0xb0580f0 0x78d71ecf00
	static bool IsSceneReconstructionSupported(enum SessionType, enum SceneReconstructionMethod);// 0xb057ff8 0x78d71ecfe0
	static bool IsARSupported();// 0xb05a8dc 0x78d71ed0c0
	static bool IsARPinLocalStoreSupported();// 0xb058d6c 0x78d71ed1a0
	static bool IsARPinLocalStoreReady();// 0xb058d34 0x78d71ed280
	static enum GetWorldMappingStatus();// 0xb058614 0x78d71ed360
	static enum GetTrackingQualityReason();// 0xb059ba4 0x78d71ed440
	static enum GetTrackingQuality();// 0xb059bd8 0x78d71ed520
	static ARVideoFormat[] GetSupportedVideoFormats(enum SessionType);// 0xb058428 0x78d71ed600
	static ARSessionConfig* GetSessionConfig();// 0xb05a704 0x78d71ed6e0
	static Vector[] GetPointCloud();// 0xb058540 0x78d71ed7c0
	static ARTexture* GetPersonSegmentationImage();// 0xb057db4 0x78d71ed8a0
	static ARTexture* GetPersonSegmentationDepthImage();// 0xb057d80 0x78d71ed980
	static bool GetObjectClassificationAtLocation(out const Vector InWorldLocation, out enum OutClassification, out Vector OutClassificationLocation, float MaxLocationDiff);// 0xb057be4 0x78d71eda60
	static int GetNumberOfTrackedFacesSupported();// 0xb0572b0 0x78d71edb40
	static ARLightEstimate* GetCurrentLightEstimate();// 0xb059450 0x78d71edc20
	static bool GetCameraIntrinsics(out ARCameraIntrinsics OutCameraIntrinsics);// 0xb0571dc 0x78d71edd00
	static ARTextureCameraImage* GetCameraImage();// 0xb059984 0x78d71edde0
	static ARTextureCameraDepth* GetCameraDepth();// 0xb059950 0x78d71edec0
	static float GetARWorldScale();// 0xb057994 0x78d71edfa0
	static ARTexture* GetARTexture(enum TextureType);// 0xb0598a8 0x78d71ee080
	static ARSessionStatus GetARSessionStatus();// 0xb05a738 0x78d71ee160
	static ARTrackedPose*[] GetAllTrackedPoses();// 0xb057de8 0x78d71ee240
	static ARTrackedPoint*[] GetAllTrackedPoints();// 0xb0588e4 0x78d71ee320
	static ARPlaneGeometry*[] GetAllTrackedPlanes();// 0xb0589b8 0x78d71ee400
	static ARTrackedImage*[] GetAllTrackedImages();// 0xb058810 0x78d71ee4e0
	static AREnvironmentCaptureProbe*[] GetAllTrackedEnvironmentCaptureProbes();// 0xb05873c 0x78d71ee5c0
	static ARPose2D[] GetAllTracked2DPoses();// 0xb057ebc 0x78d71ee6a0
	static ARPin*[] GetAllPins();// 0xb058da4 0x78d71eadc0
	static ARTrackedGeometry*[] GetAllGeometriesByClass(class ARTrackedGeometry GeometryClass);// 0xb0599b8 0x78d71eaea0
	static ARTrackedGeometry*[] GetAllGeometries();// 0xb059ad0 0x78d71eaf80
	static Transform GetAlignmentTransform();// 0xb057928 0x78d71eb060
	static ARTrackedPoint*[] FindTrackedPointsByName(FString PointName);// 0xb057648 0x78d71eb140
	static void DebugDrawTrackedGeometry(ARTrackedGeometry* TrackedGeometry, Object* WorldContextObject, LinearColor Color, float OutlineThickness, float PersistForSeconds);// 0xb059640 0x78d71eb220
	static void DebugDrawPin(ARPin* ARPin, Object* WorldContextObject, LinearColor Color, float Scale, float PersistForSeconds);// 0xb059484 0x78d71eb300
	static void CalculateClosestIntersection(out const Vector[] StartPoints, out const Vector[] EndPoints, out Vector ClosestIntersection);// 0xb057494 0x78d71eb3e0
	static void CalculateAlignmentTransform(out const Transform TransformInFirstCoordinateSystem, out const Transform TransformInSecondCoordinateSystem, out Transform AlignmentTransform);// 0xb0572e4 0x78d71eb4c0
	static bool AddTrackedPointWithName(out const Transform WorldTransform, FString PointName, bool bDeletePointsWithSameName);// 0xb057780 0x78d71eb5a0
	static ARCandidateImage* AddRuntimeCandidateImage(ARSessionConfig* SessionConfig, Texture2D* CandidateTexture, FString FriendlyName, float PhysicalWidth);// 0xb0581e8 0x78d71eb680
	static bool AddManualEnvironmentCaptureProbe(Vector Location, Vector Extent);// 0xb058648 0x78d71eb760

--------------------------------
Class: ARSessionConfig.DataAsset.Object
	bool bGenerateMeshDataFromTrackedGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78d7211800
	bool bGenerateCollisionForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x78d7211880
	bool bGenerateNavMeshForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1] 0x78d7211900
	bool bUseMeshDataForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1] 0x78d7211980
	bool bRenderMeshDataInWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x78d7211a00
	bool bTrackSceneObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x78d7211a80
	bool bUsePersonSegmentationForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1] 0x78d7211b00
	bool bUseSceneDepthForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1] 0x78d7211b80
	bool bUseAutomaticImageScaleEstimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78d7211c00
	bool bUseStandardOnboardingUX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x78d7211c80
	enum WorldAlignment;//[Offset: 0x3a, Size: 0x1] 0x78d715a2e0
	enum SessionType;//[Offset: 0x3b, Size: 0x1] 0x78d715a380
	enum PlaneDetectionMode;//[Offset: 0x3c, Size: 0x1] 0x78d715a420
	bool bHorizontalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x78d7211e80
	bool bVerticalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1] 0x78d7211f00
	bool bEnableAutoFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 0x1] 0x78d7211f80
	enum LightEstimationMode;//[Offset: 0x40, Size: 0x1] 0x78d715a4c0
	enum FrameSyncMode;//[Offset: 0x41, Size: 0x1] 0x78d7157c20
	bool bEnableAutomaticCameraOverlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x78d7212100
	bool bEnableAutomaticCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x78d7210080
	bool bResetCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78d7210100
	bool bResetTrackedObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x78d7210180
	ARCandidateImage*[] CandidateImages;//[Offset: 0x48, Size: 0x10] 0x78d7157cc0
	int MaxNumSimultaneousImagesTracked;//[Offset: 0x58, Size: 0x4] 0x78d7210280
	enum EnvironmentCaptureProbeType;//[Offset: 0x5c, Size: 0x1] 0x78d7157d60
	byte[] WorldMapData;//[Offset: 0x60, Size: 0x10] 0x78d7157e00
	ARCandidateObject*[] CandidateObjects;//[Offset: 0x70, Size: 0x10] 0x78d7157ea0
	ARVideoFormat DesiredVideoFormat;//[Offset: 0x80, Size: 0xc] 0x78d7210480
	bool bUseOptimalVideoFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1] 0x78d7210500
	enum FaceTrackingDirection;//[Offset: 0x8d, Size: 0x1] 0x78d7157f40
	enum FaceTrackingUpdate;//[Offset: 0x8e, Size: 0x1] 0x78d7157fe0
	int MaxNumberOfTrackedFaces;//[Offset: 0x90, Size: 0x4] 0x78d7210680
	byte[] SerializedARCandidateImageDatabase;//[Offset: 0x98, Size: 0x10] 0x78d7158080
	enum EnabledSessionTrackingFeature;//[Offset: 0xa8, Size: 0x1] 0x78d7158120
	enum SceneReconstructionMethod;//[Offset: 0xa9, Size: 0x1] 0x78d71581c0
	class ARPlaneComponent* PlaneComponentClass;//[Offset: 0xb0, Size: 0x8] 0x78d7158260
	class ARPointComponent* PointComponentClass;//[Offset: 0xb8, Size: 0x8] 0x78d7158300
	class ARFaceComponent* FaceComponentClass;//[Offset: 0xc0, Size: 0x8] 0x78d71583a0
	class ARImageComponent* ImageComponentClass;//[Offset: 0xc8, Size: 0x8] 0x78d7158440
	class ARQRCodeComponent* QRCodeComponentClass;//[Offset: 0xd0, Size: 0x8] 0x78d71584e0
	class ARPoseComponent* PoseComponentClass;//[Offset: 0xd8, Size: 0x8] 0x78d7158580
	class AREnvironmentProbeComponent* EnvironmentProbeComponentClass;//[Offset: 0xe0, Size: 0x8] 0x78d7158620
	class ARObjectComponent* ObjectComponentClass;//[Offset: 0xe8, Size: 0x8] 0x78d71586c0
	class ARMeshComponent* MeshComponentClass;//[Offset: 0xf0, Size: 0x8] 0x78d7158760
	class ARGeoAnchorComponent* GeoAnchorComponentClass;//[Offset: 0xf8, Size: 0x8] 0x78d7158800
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x100, Size: 0x8] 0x78d7210880
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x108, Size: 0x8] 0x78d7210900
	bool ShouldResetTrackedObjects();// 0xb06cd70 0x78d7204060
	bool ShouldResetCameraTracking();// 0xb06ce58 0x78d7204140
	bool ShouldRenderCameraOverlay();// 0xb06cfb0 0x78d7204220
	bool ShouldEnableCameraTracking();// 0xb06cf78 0x78d7204300
	bool ShouldEnableAutoFocus();// 0xb06cf40 0x78d72043e0
	void SetWorldMapData(byte[] WorldMapData);// 0xb06c950 0x78d72044c0
	void SetSessionTrackingFeatureToEnable(enum InSessionTrackingFeature);// 0xb06c390 0x78d72045a0
	void SetSceneReconstructionMethod(enum InSceneReconstructionMethod);// 0xb06c2e8 0x78d7204680
	void SetResetTrackedObjects(bool bNewValue);// 0xb06ccc0 0x78d7204760
	void SetResetCameraTracking(bool bNewValue);// 0xb06cda8 0x78d7204840
	void SetFaceTrackingUpdate(enum InUpdate);// 0xb06c4a0 0x78d7204920
	void SetFaceTrackingDirection(enum InDirection);// 0xb06c57c 0x78d7204a00
	void SetEnableAutoFocus(bool bNewValue);// 0xb06ce90 0x78d7204ae0
	void SetDesiredVideoFormat(ARVideoFormat NewFormat);// 0xb06c658 0x78d7204bc0
	void SetCandidateObjectList(out const ARCandidateObject*[] InCandidateObjects);// 0xb06c7e8 0x78d7204ca0
	byte[] GetWorldMapData();// 0xb06caa8 0x78d7204d80
	enum GetWorldAlignment();// 0xb06d0b8 0x78d7204e60
	enum GetSessionType();// 0xb06d084 0x78d7204f40
	enum GetSceneReconstructionMethod();// 0xb06c438 0x78d7205020
	enum GetPlaneDetectionMode();// 0xb06d050 0x78d7205100
	int GetMaxNumSimultaneousImagesTracked();// 0xb06cb60 0x78d72051e0
	enum GetLightEstimationMode();// 0xb06d01c 0x78d72052c0
	enum GetFrameSyncMode();// 0xb06cfe8 0x78d72053a0
	enum GetFaceTrackingUpdate();// 0xb06c548 0x78d7205480
	enum GetFaceTrackingDirection();// 0xb06c624 0x78d7205560
	enum GetEnvironmentCaptureProbeType();// 0xb06cb2c 0x78d7205640
	enum GetEnabledSessionTrackingFeature();// 0xb06c46c 0x78d7201d60
	ARVideoFormat GetDesiredVideoFormat();// 0xb06c708 0x78d7201e40
	ARCandidateObject*[] GetCandidateObjectList();// 0xb06c8cc 0x78d7201f20
	ARCandidateImage*[] GetCandidateImageList();// 0xb06cc3c 0x78d7202000
	void AddCandidateObject(ARCandidateObject* CandidateObject);// 0xb06c740 0x78d72020e0
	void AddCandidateImage(ARCandidateImage* NewCandidateImage);// 0xb06cb94 0x78d72021c0

--------------------------------
Class: ARVideoFormat
	int FPS;//[Offset: 0x0, Size: 0x4] 0x78dbe4a480
	int Width;//[Offset: 0x4, Size: 0x4] 0x78dbe4a500
	int Height;//[Offset: 0x8, Size: 0x4] 0x78dbe48480

--------------------------------
Class: ARCandidateObject.DataAsset.Object
	byte[] CandidateObjectData;//[Offset: 0x30, Size: 0x10] 0x78d715b460
	FString FriendlyName;//[Offset: 0x40, Size: 0x10] 0x78d7217c80
	Box BoundingBox;//[Offset: 0x50, Size: 0x1c] 0x78d7217d00
	void SetFriendlyName(FString NewName);// 0xb0767f0 0x78d720ac00
	void SetCandidateObjectData(out const byte[] InCandidateObject);// 0xb07699c 0x78d720ace0
	void SetBoundingBox(out const Box InBoundingBox);// 0xb076714 0x78d7207400
	FString GetFriendlyName();// 0xb076918 0x78d72074e0
	byte[] GetCandidateObjectData();// 0xb076ad0 0x78d72075c0
	Box GetBoundingBox();// 0xb0767cc 0x78d72076a0

--------------------------------
Class: ARCandidateImage.DataAsset.Object
	Texture2D* CandidateTexture;//[Offset: 0x30, Size: 0x8] 0x78d7218080
	FString FriendlyName;//[Offset: 0x38, Size: 0x10] 0x78d7218100
	float Width;//[Offset: 0x48, Size: 0x4] 0x78d7218180
	float Height;//[Offset: 0x4c, Size: 0x4] 0x78d7218200
	enum Orientation;//[Offset: 0x50, Size: 0x1] 0x78d715b640
	float GetPhysicalWidth();// 0xb076220 0x78d7207780
	float GetPhysicalHeight();// 0xb076204 0x78d7207860
	enum GetOrientation();// 0xb0761e8 0x78d7207940
	FString GetFriendlyName();// 0xb07623c 0x78d7207a20
	Texture2D* GetCandidateTexture();// 0xb0762c0 0x78d7207b00

--------------------------------
Class: ARPlaneComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPlaneUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x80] 0x78d71fd600
	static void SetPlaneComponentDebugMode(enum NewDebugMode);// 0xb05fb60 0x78d7201740
	static void SetObjectClassificationDebugColors(out const <enum,LinearColor> InColors);// 0xb05fa60 0x78d7201820
	void ServerUpdatePayload(const ARPlaneUpdatePayload NewPayload);// 0xb05f87c 0x78d7201900
	void ReceiveUpdate(out const ARPlaneUpdatePayload Payload);// 0xaa7cd18 0x78d72019e0
	void ReceiveAdd(out const ARPlaneUpdatePayload Payload);// 0xaa7cd18 0x78d7201ac0
	static <enum,LinearColor> GetObjectClassificationDebugColors();// 0xb05f9cc 0x78d7201ba0

--------------------------------
Class: ARPlaneUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x78dbe48e80
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30] 0x78dbe48f00
	Vector Center;//[Offset: 0x50, Size: 0xc] 0x78dbe48f80
	Vector Extents;//[Offset: 0x5c, Size: 0xc] 0x78dbe49000
	Vector[] BoundaryVertices;//[Offset: 0x68, Size: 0x10] 0x78dbe50c40
	enum ObjectClassification;//[Offset: 0x78, Size: 0x1] 0x78dbe50ce0

--------------------------------
Class: ARSessionPayload
	int ConfigFlags;//[Offset: 0x0, Size: 0x4] 0x78dbe47a00
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x8, Size: 0x8] 0x78dbe47a80
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x10, Size: 0x8] 0x78dbe47b00

--------------------------------
Class: ARPointComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPointUpdatePayload ReplicatedPayload;//[Offset: 0x284, Size: 0x1] 0x78d71fd400
	void ServerUpdatePayload(const ARPointUpdatePayload NewPayload);// 0xb0605c4 0x78d72014a0
	void ReceiveUpdate(out const ARPointUpdatePayload Payload);// 0xaa7cd18 0x78d7201580
	void ReceiveAdd(out const ARPointUpdatePayload Payload);// 0xaa7cd18 0x78d7201660

--------------------------------
Class: ARPointUpdatePayload

--------------------------------
Class: ARFaceComponent.ARComponent.SceneComponent.ActorComponent.Object
	enum TransformSetting;//[Offset: 0x284, Size: 0x1] 0x78d71572c0
	bool bUpdateVertexNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1] 0x78d71fd080
	bool bFaceOutOfScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x286, Size: 0x1] 0x78d71fd100
	ARFaceUpdatePayload ReplicatedPayload;//[Offset: 0x288, Size: 0x40] 0x78d71fd180
	static void SetFaceComponentDebugMode(enum NewDebugMode);// 0xb060db8 0x78d7201120
	void ServerUpdatePayload(const ARFaceUpdatePayload NewPayload);// 0xb060ccc 0x78d7201200
	void ReceiveUpdate(out const ARFaceUpdatePayload Payload);// 0xaa7cd18 0x78d72012e0
	void ReceiveAdd(out const ARFaceUpdatePayload Payload);// 0xaa7cd18 0x78d72013c0

--------------------------------
Class: ARFaceUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x78dbe49180
	Vector LeftEyePosition;//[Offset: 0x18, Size: 0xc] 0x78dbe49200
	Vector RightEyePosition;//[Offset: 0x24, Size: 0xc] 0x78dbe49280
	Vector LookAtTarget;//[Offset: 0x30, Size: 0xc] 0x78dbe49300

--------------------------------
Class: ARImageComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARImageUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x60] 0x78d71fcd80
	static void SetImageComponentDebugMode(enum NewDebugMode);// 0xb06165c 0x78d7200da0
	void ServerUpdatePayload(const ARImageUpdatePayload NewPayload);// 0xb061548 0x78d7200e80
	void ReceiveUpdate(out const ARImageUpdatePayload Payload);// 0xaa7cd18 0x78d7200f60
	void ReceiveAdd(out const ARImageUpdatePayload Payload);// 0xaa7cd18 0x78d7201040

--------------------------------
Class: ARImageUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x78dbe49380
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30] 0x78dbe49400
	ARCandidateImage* DetectedImage;//[Offset: 0x50, Size: 0x8] 0x78dbe49480
	Vector2D EstimatedSize;//[Offset: 0x58, Size: 0x8] 0x78dbe47400

--------------------------------
Class: ARQRCodeComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARQRCodeUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x70] 0x78d71fcb00
	static void SetQRCodeComponentDebugMode(enum NewDebugMode);// 0xb061f0c 0x78d7200a20
	void ServerUpdatePayload(const ARQRCodeUpdatePayload NewPayload);// 0xb061de4 0x78d7200b00
	void ReceiveUpdate(out const ARQRCodeUpdatePayload Payload);// 0xaa7cd18 0x78d7200be0
	void ReceiveAdd(out const ARQRCodeUpdatePayload Payload);// 0xaa7cd18 0x78d7200cc0

--------------------------------
Class: ARQRCodeUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x78dbe47480
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30] 0x78dbe47500
	Vector Extents;//[Offset: 0x50, Size: 0xc] 0x78dbe47580
	FString QRCode;//[Offset: 0x60, Size: 0x10] 0x78dbe47600

--------------------------------
Class: ARPoseComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPoseUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x40] 0x78d71fc880
	static void SetPoseComponentDebugMode(enum NewDebugMode);// 0xb06294c 0x78d72006a0
	void ServerUpdatePayload(const ARPoseUpdatePayload NewPayload);// 0xb06282c 0x78d7200780
	void ReceiveUpdate(out const ARPoseUpdatePayload Payload);// 0xaa7cd18 0x78d7200860
	void ReceiveAdd(out const ARPoseUpdatePayload Payload);// 0xaa7cd18 0x78d7200940

--------------------------------
Class: ARPoseUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x30] 0x78dbe47680
	Transform[] JointTransforms;//[Offset: 0x30, Size: 0x10] 0x78dbe50d80

--------------------------------
Class: AREnvironmentProbeComponent.ARComponent.SceneComponent.ActorComponent.Object
	AREnvironmentProbeUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x30] 0x78d71fc680
	void ServerUpdatePayload(const AREnvironmentProbeUpdatePayload NewPayload);// 0xb063288 0x78d7200400
	void ReceiveUpdate(out const AREnvironmentProbeUpdatePayload Payload);// 0xaa7cd18 0x78d72004e0
	void ReceiveAdd(out const AREnvironmentProbeUpdatePayload Payload);// 0xaa7cd18 0x78d72005c0

--------------------------------
Class: AREnvironmentProbeUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x30] 0x78dbe47780

--------------------------------
Class: ARObjectComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARObjectUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x30] 0x78d71fe580
	void ServerUpdatePayload(const ARObjectUpdatePayload NewPayload);// 0xb0639f0 0x78d7200160
	void ReceiveUpdate(out const ARObjectUpdatePayload Payload);// 0xaa7cd18 0x78d7200240
	void ReceiveAdd(out const ARObjectUpdatePayload Payload);// 0xaa7cd18 0x78d7200320

--------------------------------
Class: ARObjectUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x30] 0x78dbe47800

--------------------------------
Class: ARMeshComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARMeshUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x60] 0x78d71fe380
	void ServerUpdatePayload(const ARMeshUpdatePayload NewPayload);// 0xb064158 0x78d7203880
	void ReceiveUpdate(out const ARMeshUpdatePayload Payload);// 0xaa7cd18 0x78d7203960
	void ReceiveAdd(out const ARMeshUpdatePayload Payload);// 0xaa7cd18 0x78d7200080

--------------------------------
Class: ARMeshUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x78dbe47880
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30] 0x78dbe47900
	enum ObjectClassification;//[Offset: 0x50, Size: 0x1] 0x78dbe50e20

--------------------------------
Class: ARGeoAnchorComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARGeoAnchorUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x70] 0x78d71fe100
	static void SetGeoAnchorComponentDebugMode(enum NewDebugMode);// 0xb064a4c 0x78d7203500
	void ServerUpdatePayload(const ARGeoAnchorUpdatePayload NewPayload);// 0xb064914 0x78d72035e0
	void ReceiveUpdate(out const ARGeoAnchorUpdatePayload Payload);// 0xaa7cd18 0x78d72036c0
	void ReceiveAdd(out const ARGeoAnchorUpdatePayload Payload);// 0xaa7cd18 0x78d72037a0

--------------------------------
Class: ARGeoAnchorUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x78dbe47b80
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30] 0x78dbe47c00
	float Longitude;//[Offset: 0x50, Size: 0x4] 0x78dbe47c80
	float Latitude;//[Offset: 0x54, Size: 0x4] 0x78dbe47d00
	float AltitudeMeters;//[Offset: 0x58, Size: 0x4] 0x78dbe47d80
	enum AltitudeSource;//[Offset: 0x5c, Size: 0x1] 0x78dbe50ec0
	FString AnchorName;//[Offset: 0x60, Size: 0x10] 0x78dbe47e80

--------------------------------
Class: ARPin.Object
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x28, Size: 0x8] 0x78d71fe900
	SceneComponent* PinnedComponent;//[Offset: 0x30, Size: 0x8] 0x78d71fe980
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x30] 0x78d71fea00
	Transform LocalToAlignedTrackingTransform;//[Offset: 0x70, Size: 0x30] 0x78d71fea80
	enum TrackingState;//[Offset: 0xa0, Size: 0x1] 0x78d7156b40
	delegate OnARTrackingStateChanged;//[Offset: 0xc0, Size: 0x10] 0x78d71feb80
	delegate OnARTransformUpdated;//[Offset: 0xd0, Size: 0x10] 0x78d71fec00
	enum GetTrackingState();// 0xb06b74c 0x78d72022a0
	ARTrackedGeometry* GetTrackedGeometry();// 0xb06b718 0x78d7202380
	SceneComponent* GetPinnedComponent();// 0xb06b6e4 0x78d7202460
	Transform GetLocalToWorldTransform();// 0xb06b780 0x78d7202540
	Transform GetLocalToTrackingTransform();// 0xb06b7ec 0x78d7202620
	FName GetDebugName();// 0xb06b524 0x78d7202700
	void DebugDraw(World* World, out const LinearColor Color, float Scale, float PersistForSeconds);// 0xb06b558 0x78d72027e0

--------------------------------
Class: ARTraceResult
	float DistanceFromCamera;//[Offset: 0x0, Size: 0x4] 0x78dbe48b80
	enum TraceChannel;//[Offset: 0x4, Size: 0x1] 0x78dbe50ba0
	Transform LocalTransform;//[Offset: 0x10, Size: 0x30] 0x78dbe48c80
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x40, Size: 0x8] 0x78dbe48d00

--------------------------------
Class: ARTexture.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0xd8, Size: 0x1] 0x78d7159980
	float Timestamp;//[Offset: 0xdc, Size: 0x4] 0x78d7215180
	Guid ExternalTextureGuid;//[Offset: 0xe0, Size: 0x10] 0x78d7215200
	Vector2D Size;//[Offset: 0xf0, Size: 0x8] 0x78d7215280

--------------------------------
Class: ARLightEstimate.Object

--------------------------------
Class: ARCameraIntrinsics
	IntPoint ImageResolution;//[Offset: 0x0, Size: 0x8] 0x78dbe48a00
	Vector2D FocalLength;//[Offset: 0x8, Size: 0x8] 0x78dbe48a80
	Vector2D PrincipalPoint;//[Offset: 0x10, Size: 0x8] 0x78dbe48b00

--------------------------------
Class: ARTextureCameraImage.ARTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: ARTextureCameraDepth.ARTexture.Texture.StreamableRenderAsset.Object
	enum DepthQuality;//[Offset: 0xf8, Size: 0x1] 0x78d7159840
	enum DepthAccuracy;//[Offset: 0xf9, Size: 0x1] 0x78d71598e0
	bool bIsTemporallySmoothed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1] 0x78d7215080

--------------------------------
Class: ARSessionStatus
	FString AdditionalInfo;//[Offset: 0x0, Size: 0x10] 0x78dbe4a380
	enum status;//[Offset: 0x10, Size: 0x1] 0x78dbe506a0

--------------------------------
Class: ARTrackedPose.ARTrackedGeometry.Object
	ARPose3D TrackedPose;//[Offset: 0xf8, Size: 0x50] 0x78d7217380
	ARPose3D GetTrackedPoseData();// 0xb074424 0x78d7208040

--------------------------------
Class: ARPose3D
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28] 0x78dbe48800
	Transform[] JointTransforms;//[Offset: 0x28, Size: 0x10] 0x78dbe509c0
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10] 0x78dbe50a60
	enum JointTransformSpace;//[Offset: 0x48, Size: 0x1] 0x78dbe50b00

--------------------------------
Class: ARSkeletonDefinition
	int NumJoints;//[Offset: 0x0, Size: 0x4] 0x78dbe48680
	FName[] JointNames;//[Offset: 0x8, Size: 0x10] 0x78dbe50880
	int[] ParentIndices;//[Offset: 0x18, Size: 0x10] 0x78dbe50920

--------------------------------
Class: ARTrackedPoint.ARTrackedGeometry.Object

--------------------------------
Class: ARPlaneGeometry.ARTrackedGeometry.Object
	enum Orientation;//[Offset: 0xf8, Size: 0x1] 0x78d71592a0
	Vector Center;//[Offset: 0xfc, Size: 0xc] 0x78d7216100
	Vector Extent;//[Offset: 0x108, Size: 0xc] 0x78d7216180
	Vector[] BoundaryPolygon;//[Offset: 0x118, Size: 0x10] 0x78d7159340
	ARPlaneGeometry* SubsumedBy;//[Offset: 0x128, Size: 0x8] 0x78d7216280
	ARPlaneGeometry* GetSubsumedBy();// 0xb072218 0x78d7208900
	enum GetOrientation();// 0xb0721fc 0x78d72089e0
	Vector GetExtent();// 0xb072364 0x78d7208ac0
	Vector GetCenter();// 0xb072388 0x78d7208ba0
	Vector[] GetBoundaryPolygonInLocalSpace();// 0xb072234 0x78d7208c80

--------------------------------
Class: ARTrackedImage.ARTrackedGeometry.Object
	ARCandidateImage* DetectedImage;//[Offset: 0xf8, Size: 0x8] 0x78d7215e80
	Vector2D EstimatedSize;//[Offset: 0x100, Size: 0x8] 0x78d7215f00
	Vector2D GetEstimateSize();// 0xb072bb0 0x78d7208740
	ARCandidateImage* GetDetectedImage();// 0xb072be4 0x78d7208820

--------------------------------
Class: AREnvironmentCaptureProbe.ARTrackedGeometry.Object
	Vector Extent;//[Offset: 0xf8, Size: 0xc] 0x78d7215480
	AREnvironmentCaptureProbeTexture* EnvironmentCaptureTexture;//[Offset: 0x108, Size: 0x8] 0x78d7215500
	Vector GetExtent();// 0xb073b74 0x78d7208200
	AREnvironmentCaptureProbeTexture* GetEnvironmentCaptureTexture();// 0xb073b40 0x78d72082e0

--------------------------------
Class: AREnvironmentCaptureProbeTexture.TextureCube.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0x130, Size: 0x1] 0x78d71597a0
	float Timestamp;//[Offset: 0x134, Size: 0x4] 0x78d7214e00
	Guid ExternalTextureGuid;//[Offset: 0x138, Size: 0x10] 0x78d7214e80
	Vector2D Size;//[Offset: 0x148, Size: 0x8] 0x78d7214f00

--------------------------------
Class: ARPose2D
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28] 0x78dbe48500
	Vector2D[] JointLocations;//[Offset: 0x28, Size: 0x10] 0x78dbe50740
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10] 0x78dbe507e0

--------------------------------
Class: ARTraceResultLibrary.BlueprintFunctionLibrary.Object
	static ARTrackedGeometry* GetTrackedGeometry(out const ARTraceResult TraceResult);// 0xb05bfe0 0x78d71eecc0
	static enum GetTraceChannel(out const ARTraceResult TraceResult);// 0xb05be64 0x78d71eeda0
	static Transform GetLocalTransform(out const ARTraceResult TraceResult);// 0xb05c15c 0x78d71eee80
	static Transform GetLocalToWorldTransform(out const ARTraceResult TraceResult);// 0xb05c2f8 0x78d71eef60
	static Transform GetLocalToTrackingTransform(out const ARTraceResult TraceResult);// 0xb05c494 0x78d71ef040
	static float GetDistanceFromCamera(out const ARTraceResult TraceResult);// 0xb05c630 0x78d71ef120

--------------------------------
Class: ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object

--------------------------------
Class: ARSaveWorldAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x78d71fc080
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x78d71fc100
	static ARSaveWorldAsyncTaskBlueprintProxy* ARSaveWorld(Object* WorldContextObject);// 0xb05cd2c 0x78d71eebe0

--------------------------------
Class: ARGetCandidateObjectAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x78d71fbd80
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x78d71fbe00
	static ARGetCandidateObjectAsyncTaskBlueprintProxy* ARGetCandidateObject(Object* WorldContextObject, Vector Location, Vector Extent);// 0xb05d1ac 0x78d71eeb00

--------------------------------
Class: ARDependencyHandler.Object
	void StartARSessionLatent(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo);// 0xb065550 0x78d72030a0
	void RequestARSessionPermission(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo, out enum OutPermissionResult);// 0xb0656a0 0x78d7203180
	void InstallARService(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutInstallResult);// 0xb065848 0x78d7203260
	static ARDependencyHandler* GetARDependencyHandler();// 0xb065b08 0x78d7203340
	void CheckARServiceAvailability(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutAvailability);// 0xb0659a8 0x78d7203420

--------------------------------
Class: ARGeoTrackingSupport.Object
	static ARGeoTrackingSupport* GetGeoTrackingSupport();// 0xb066798 0x78d7202b60
	enum GetGeoTrackingStateReason();// 0xb066720 0x78d7202c40
	enum GetGeoTrackingState();// 0xb06675c 0x78d7202d20
	enum GetGeoTrackingAccuracy();// 0xb0666e4 0x78d7202e00
	bool AddGeoAnchorAtLocationWithAltitude(float Longitude, float Latitude, float AltitudeMeters, FString OptionalAnchorName);// 0xb066274 0x78d7202ee0
	bool AddGeoAnchorAtLocation(float Longitude, float Latitude, FString OptionalAnchorName);// 0xb0664d8 0x78d7202fc0

--------------------------------
Class: CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x78d35ace00
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x78d35ace80
	void GeoTrackingAvailabilityDelegate__DelegateSignature(bool bIsAvailable, FString Error);// 0xaa7cd18 0x78d3600400
	static CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* CheckGeoTrackingAvailabilityAtLocation(Object* WorldContextObject, float Longitude, float Latitude);// 0xb066c5c 0x78d36004e0
	static CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* CheckGeoTrackingAvailability(Object* WorldContextObject);// 0xb066d98 0x78d36005c0

--------------------------------
Class: GetGeoLocationAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x78d35ac980
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x78d35aca00
	void GetGeoLocationDelegate__DelegateSignature(float Longitude, float Latitude, float Altitude, FString Error);// 0xaa7cd18 0x78d3600240
	static GetGeoLocationAsyncTaskBlueprintProxy* GetGeoLocationAtWorldPosition(Object* WorldContextObject, out const Vector WorldPosition);// 0xb067220 0x78d3600320

--------------------------------
Class: ARLifeCycleComponent.SceneComponent.ActorComponent.Object
	delegate OnARActorSpawnedDelegate;//[Offset: 0x208, Size: 0x10] 0x78d35ae700
	delegate OnARActorToBeDestroyedDelegate;//[Offset: 0x218, Size: 0x10] 0x78d35ac680
	void ServerSpawnARActor(class Object ComponentClass, Guid NativeID);// 0xb06aa04 0x78d3603880
	void ServerDestroyARActor(ARActor* Actor);// 0xb06a91c 0x78d3603960
	void InstanceARActorToBeDestroyedDelegate__DelegateSignature(ARActor* Actor);// 0xaa7cd18 0x78d3600080
	void InstanceARActorSpawnedDelegate__DelegateSignature(class Object ComponentClass, Guid NativeID, ARActor* SpawnedActor);// 0xaa7cd18 0x78d3600160

--------------------------------
Class: ARBasicLightEstimate.ARLightEstimate.Object
	float AmbientIntensityLumens;//[Offset: 0x28, Size: 0x4] 0x78d71ff180
	float AmbientColorTemperatureKelvin;//[Offset: 0x2c, Size: 0x4] 0x78d71ff200
	LinearColor AmbientColor;//[Offset: 0x30, Size: 0x10] 0x78d71ff280
	float GetAmbientIntensityLumens();// 0xb06b0ec 0x78d72028c0
	float GetAmbientColorTemperatureKelvin();// 0xb06b0b8 0x78d72029a0
	LinearColor GetAmbientColor();// 0xb06b080 0x78d7202a80

--------------------------------
Class: AROriginActor.Actor.Object

--------------------------------
Class: ARSharedWorldGameMode.GameMode.GameModeBase.Info.Actor.Object
	int BufferSizePerChunk;//[Offset: 0x304, Size: 0x4] 0x78d7212e00
	void SetPreviewImageData(byte[] ImageData);// 0xb06e0b4 0x78d7206d00
	void SetARWorldSharingIsReady();// 0xb06df48 0x78d7206de0
	void SetARSharedWorldData(byte[] ARWorldData);// 0xb06df5c 0x78d7206ec0
	ARSharedWorldGameState* GetARSharedWorldGameState();// 0xb06df14 0x78d7206fa0

--------------------------------
Class: ARSharedWorldGameState.GameState.GameStateBase.Info.Actor.Object
	byte[] PreviewImageData;//[Offset: 0x288, Size: 0x10] 0x78d7159d40
	byte[] ARWorldData;//[Offset: 0x298, Size: 0x10] 0x78d7159de0
	int PreviewImageBytesTotal;//[Offset: 0x2a8, Size: 0x4] 0x78d7212380
	int ARWorldBytesTotal;//[Offset: 0x2ac, Size: 0x4] 0x78d7212400
	int PreviewImageBytesDelivered;//[Offset: 0x2b0, Size: 0x4] 0x78d7212480
	int ARWorldBytesDelivered;//[Offset: 0x2b4, Size: 0x4] 0x78d7212500
	void K2_OnARWorldMapIsReady();// 0xaa7cd18 0x78d72061a0

--------------------------------
Class: ARSharedWorldPlayerController.PlayerController.Controller.Actor.Object
	void ServerMarkReadyForReceiving();// 0xb06ec14 0x78d7205e20
	void ClientUpdatePreviewImageData(int Offset, const byte[] Buffer);// 0xb06e998 0x78d7205f00
	void ClientUpdateARWorldData(int Offset, const byte[] Buffer);// 0xb06e84c 0x78d7205fe0
	void ClientInitSharedWorld(int PreviewImageSize, int ARWorldDataSize);// 0xb06eae4 0x78d72060c0

--------------------------------
Class: ARSkyLight.SkyLight.Info.Actor.Object
	AREnvironmentCaptureProbe* CaptureProbe;//[Offset: 0x230, Size: 0x8] 0x78d7213e80
	void SetEnvironmentCaptureProbe(AREnvironmentCaptureProbe* InCaptureProbe);// 0xb06f2c8 0x78d7205c60

--------------------------------
Class: ARTraceResultDummy.Object

--------------------------------
Class: ARTrackedQRCode.ARTrackedImage.ARTrackedGeometry.Object
	FString QRCode;//[Offset: 0x108, Size: 0x10] 0x78d7215d80
	int Version;//[Offset: 0x118, Size: 0x4] 0x78d7215e00

--------------------------------
Class: ARFaceGeometry.ARTrackedGeometry.Object
	Vector LookAtTarget;//[Offset: 0xf8, Size: 0xc] 0x78d7215680
	bool bIsTracked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1] 0x78d7215700
	<enum,float> BlendShapes;//[Offset: 0x108, Size: 0x50] 0x78d7103640
	Transform LeftEyeTransform;//[Offset: 0x190, Size: 0x30] 0x78d7215880
	Transform RightEyeTransform;//[Offset: 0x1c0, Size: 0x30] 0x78d7215900
	Transform GetWorldSpaceEyeTransform(enum Eye);// 0xb0732cc 0x78d72083c0
	Transform GetLocalSpaceEyeTransform(enum Eye);// 0xb07338c 0x78d72084a0
	float GetBlendShapeValue(enum BlendShape);// 0xb073554 0x78d7208580
	<enum,float> GetBlendShapes();// 0xb073448 0x78d7208660

--------------------------------
Class: ARTrackedObject.ARTrackedGeometry.Object
	ARCandidateObject* DetectedObject;//[Offset: 0xf8, Size: 0x8] 0x78d7215380
	ARCandidateObject* GetDetectedObject();// 0xb073f8c 0x78d7208120

--------------------------------
Class: ARMeshGeometry.ARTrackedGeometry.Object
	bool GetObjectClassificationAtLocation(out const Vector InWorldLocation, out enum OutClassification, out Vector OutClassificationLocation, float MaxLocationDiff);// 0xb074864 0x78d7207f60

--------------------------------
Class: ARGeoAnchor.ARTrackedGeometry.Object
	float GetLongitude();// 0xb074d78 0x78d7207be0
	float GetLatitude();// 0xb074d5c 0x78d7207cc0
	enum GetAltitudeSource();// 0xb074d24 0x78d7207da0
	float GetAltitudeMeters();// 0xb074d40 0x78d7207e80

--------------------------------
Class: ARTrackableNotifyComponent.ActorComponent.Object
	delegate OnAddTrackedGeometry;//[Offset: 0xb8, Size: 0x10] 0x78d7216480
	delegate OnUpdateTrackedGeometry;//[Offset: 0xc8, Size: 0x10] 0x78d7216500
	delegate OnRemoveTrackedGeometry;//[Offset: 0xd8, Size: 0x10] 0x78d7216580
	delegate OnAddTrackedPlane;//[Offset: 0xe8, Size: 0x10] 0x78d7216600
	delegate OnUpdateTrackedPlane;//[Offset: 0xf8, Size: 0x10] 0x78d7216680
	delegate OnRemoveTrackedPlane;//[Offset: 0x108, Size: 0x10] 0x78d7216700
	delegate OnAddTrackedPoint;//[Offset: 0x118, Size: 0x10] 0x78d7216780
	delegate OnUpdateTrackedPoint;//[Offset: 0x128, Size: 0x10] 0x78d7216800
	delegate OnRemoveTrackedPoint;//[Offset: 0x138, Size: 0x10] 0x78d7216880
	delegate OnAddTrackedImage;//[Offset: 0x148, Size: 0x10] 0x78d7216900
	delegate OnUpdateTrackedImage;//[Offset: 0x158, Size: 0x10] 0x78d7216980
	delegate OnRemoveTrackedImage;//[Offset: 0x168, Size: 0x10] 0x78d7216a00
	delegate OnAddTrackedFace;//[Offset: 0x178, Size: 0x10] 0x78d7216a80
	delegate OnUpdateTrackedFace;//[Offset: 0x188, Size: 0x10] 0x78d7216b00
	delegate OnRemoveTrackedFace;//[Offset: 0x198, Size: 0x10] 0x78d7216b80
	delegate OnAddTrackedEnvProbe;//[Offset: 0x1a8, Size: 0x10] 0x78d7216c00
	delegate OnUpdateTrackedEnvProbe;//[Offset: 0x1b8, Size: 0x10] 0x78d7216c80
	delegate OnRemoveTrackedEnvProbe;//[Offset: 0x1c8, Size: 0x10] 0x78d7216d00
	delegate OnAddTrackedObject;//[Offset: 0x1d8, Size: 0x10] 0x78d7216d80
	delegate OnUpdateTrackedObject;//[Offset: 0x1e8, Size: 0x10] 0x78d7216e00
	delegate OnRemoveTrackedObject;//[Offset: 0x1f8, Size: 0x10] 0x78d7216e80

--------------------------------
Class: ARTypesDummyClass.Object

--------------------------------
Class: HeadMountedDisplayFunctionLibrary.BlueprintFunctionLibrary.Object
	static void UpdateExternalTrackingHMDPosition(out const Transform ExternalTrackingTransform);// 0xb090fd0 0x78d720c020
	static void SetXRTimedInputActionDelegate(out const FName ActionName, out const delegate InDelegate);// 0xb08fe4c 0x78d720c100
	static void SetXRDisconnectDelegate(out const delegate InDisconnectedDelegate);// 0xb08ff64 0x78d720c1e0
	static void SetWorldToMetersScale(Object* WorldContext, float NewScale);// 0xb091394 0x78d720c2c0
	static void SetTrackingOrigin(byte Origin);// 0xb091254 0x78d720c3a0
	static void SetSpectatorScreenTexture(Texture* InTexture);// 0xb090d6c 0x78d720c480
	static void SetSpectatorScreenModeTexturePlusEyeLayout(Vector2D EyeRectMin, Vector2D EyeRectMax, Vector2D TextureRectMin, Vector2D TextureRectMax, bool bDrawEyeFirst, bool bClearBlack, bool bUseAlpha);// 0xb090b20 0x78d720c560
	static void SetSpectatorScreenMode(enum Mode);// 0xb090e04 0x78d720c640
	static void SetClippingPlanes(float Near, float Far);// 0xb0914e0 0x78d720c720
	static void ResetOrientationAndPosition(float Yaw, byte Options);// 0xb0915c0 0x78d720c800
	static bool IsSpectatorScreenModeControllable();// 0xb090e9c 0x78d720c8e0
	static bool IsInLowPersistenceMode();// 0xb091734 0x78d720c9c0
	static bool IsHeadMountedDisplayEnabled();// 0xb092170 0x78d72090e0
	static bool IsHeadMountedDisplayConnected();// 0xb092138 0x78d72091c0
	static bool IsDeviceTracking(out const XRDeviceId XRDeviceId);// 0xb0904e0 0x78d72092a0
	static bool HasValidTrackingPosition();// 0xb091de8 0x78d7209380
	static int GetXRSystemFlags();// 0xb09201c 0x78d7209460
	static float GetWorldToMetersScale(Object* WorldContext);// 0xb0912ec 0x78d7209540
	static void GetVRFocusState(out bool bUseFocus, out bool bHasFocus);// 0xb090ed4 0x78d7209620
	static FString GetVersionString();// 0xb091f48 0x78d7209700
	static Transform GetTrackingToWorldTransform(Object* WorldContext);// 0xb091168 0x78d72097e0
	static void GetTrackingSensorParameters(out Vector Origin, out Rotator Rotation, out float LeftFOV, out float RightFOV, out float TopFOV, out float BottomFOV, out float Distance, out float NearPlane, out float FarPlane, out bool IsActive, int Index);// 0xb0919e0 0x78d72098c0
	static byte GetTrackingOrigin();// 0xb091220 0x78d72099a0
	static float GetScreenPercentage();// 0xb0914ac 0x78d7209a80
	static void GetPositionalTrackingCameraParameters(out Vector CameraOrigin, out Rotator cameraRotation, out float HFOV, out float VFOV, out float CameraDistance, out float NearPlane, out float FarPlane);// 0xb09174c 0x78d7209b60
	static float GetPixelDensity();// 0xb091478 0x78d7209c40
	static void GetOrientationAndPosition(out Rotator DeviceRotation, out Vector DevicePosition);// 0xb091e20 0x78d7209d20
	static int GetNumOfTrackingSensors();// 0xb091db4 0x78d7209e00
	static void GetMotionControllerData(Object* WorldContext, const enum Hand, out XRMotionControllerData MotionControllerData);// 0xb090230 0x78d7209ee0
	static byte GetHMDWornState();// 0xb091f14 0x78d7209fc0
	static FName GetHMDDeviceName();// 0xb092050 0x78d720a0a0
	static void GetHMDData(Object* WorldContext, out XRHMDData HMDData);// 0xb0903f0 0x78d720a180
	static void GetDeviceWorldPose(Object* WorldContext, out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0xb09059c 0x78d720a260
	static void GetDevicePose(out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0xb0907cc 0x78d720a340
	static bool GetControllerTransformForTime(Object* WorldContext, const int ControllerIndex, const FName MotionSource, Timespan Time, out bool bTimeWasUsed, out Rotator Orientation, out Vector Position, out bool bProvidedLinearVelocity, out Vector LinearVelocity, out bool bProvidedAngularVelocity, out Vector AngularVelocityRadPerSec);// 0xb08f9e4 0x78d720a420
	static XRDeviceId[] EnumerateTrackedDevices(const FName SystemId, enum DeviceType);// 0xb0909bc 0x78d720a500
	static void EnableLowPersistenceMode(bool bEnable);// 0xb0916a4 0x78d720a5e0
	static bool EnableHMD(bool bEnable);// 0xb092084 0x78d720a6c0
	static void DisconnectRemoteXRDevice();// 0xb090024 0x78d720a7a0
	static byte ConnectRemoteXRDevice(FString IpAddress, const int BitRate);// 0xb090038 0x78d720a880
	static bool ConfigureGestures(out const XRGestureConfig GestureConfig);// 0xb09016c 0x78d720a960
	static void ClearXRTimedInputActionDelegate(out const FName ActionPath);// 0xb08fda8 0x78d720aa40
	static void CalibrateExternalTrackingToHMD(out const Transform ExternalTrackingTransform);// 0xb09109c 0x78d720ab20

--------------------------------
Class: XRDeviceId
	FName SystemName;//[Offset: 0x0, Size: 0x8] 0x78dbe49880
	int DeviceID;//[Offset: 0x8, Size: 0x4] 0x78dbe49900

--------------------------------
Class: XRMotionControllerData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe49c80
	FName DeviceName;//[Offset: 0x4, Size: 0x8] 0x78dbe49d00
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10] 0x78dbe49d80
	enum DeviceVisualType;//[Offset: 0x1c, Size: 0x1] 0x78dbe502e0
	enum HandIndex;//[Offset: 0x1d, Size: 0x1] 0x78dbe50380
	enum TrackingStatus;//[Offset: 0x1e, Size: 0x1] 0x78dbe50420
	Vector GripPosition;//[Offset: 0x20, Size: 0xc] 0x78dbe49f80
	Quat GripRotation;//[Offset: 0x30, Size: 0x10] 0x78dbe4a000
	Vector AimPosition;//[Offset: 0x40, Size: 0xc] 0x78dbe4a080
	Quat AimRotation;//[Offset: 0x50, Size: 0x10] 0x78dbe4a100
	Vector[] HandKeyPositions;//[Offset: 0x60, Size: 0x10] 0x78dbe504c0
	Quat[] HandKeyRotations;//[Offset: 0x70, Size: 0x10] 0x78dbe50560
	float[] HandKeyRadii;//[Offset: 0x80, Size: 0x10] 0x78dbe50600
	bool bIsGrasped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78dbe4a300

--------------------------------
Class: XRHMDData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe49980
	FName DeviceName;//[Offset: 0x4, Size: 0x8] 0x78dbe49a00
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10] 0x78dbe49a80
	enum TrackingStatus;//[Offset: 0x1c, Size: 0x1] 0x78dbe50240
	Vector Position;//[Offset: 0x20, Size: 0xc] 0x78dbe49b80
	Quat Rotation;//[Offset: 0x30, Size: 0x10] 0x78dbe49c00

--------------------------------
Class: XRGestureConfig
	bool bTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe49580
	bool bHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78dbe49600
	enum AxisGesture;//[Offset: 0x2, Size: 0x1] 0x78dbe501a0
	bool bNavigationAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78dbe49700
	bool bNavigationAxisY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78dbe49780
	bool bNavigationAxisZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x78dbe49800

--------------------------------
Class: MotionControllerComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PlayerIndex;//[Offset: 0x470, Size: 0x4] 0x78d721c000
	enum Hand;//[Offset: 0x474, Size: 0x1] 0x78d715aec0
	FName MotionSource;//[Offset: 0x478, Size: 0x8] 0x78d721c100
	bool bDisableLowLatencyUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x480, Size: 0x1] 0x78d721c180
	enum CurrentTrackingStatus;//[Offset: 0x481, Size: 0x1] 0x78d715af60
	bool bDisplayDeviceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x482, Size: 0x1] 0x78d721c280
	FName DisplayModelSource;//[Offset: 0x484, Size: 0x8] 0x78d721c300
	StaticMesh* CustomDisplayMesh;//[Offset: 0x490, Size: 0x8] 0x78d721c380
	MaterialInterface*[] DisplayMeshMaterialOverrides;//[Offset: 0x498, Size: 0x10] 0x78d715b000
	PrimitiveComponent* DisplayComponent;//[Offset: 0x510, Size: 0x8] 0x78d721c480
	void SetTrackingSource(const enum NewSource);// 0xb094088 0x78d720b680
	void SetTrackingMotionSource(const FName NewSource);// 0xb093fac 0x78d720b760
	void SetShowDeviceModel(const bool bShowControllerModel);// 0xb094280 0x78d720b840
	void SetDisplayModelSource(const FName NewDisplayModelSource);// 0xb0941d8 0x78d720b920
	void SetCustomDisplayMesh(StaticMesh* NewDisplayMesh);// 0xb094130 0x78d720ba00
	void SetAssociatedPlayerIndex(const int NewPlayer);// 0xb093f04 0x78d720bae0
	void OnMotionControllerUpdated();// 0xaa7cd18 0x78d720bbc0
	bool IsTracked();// 0xb094330 0x78d720bca0
	enum GetTrackingSource();// 0xb094054 0x78d720bd80
	float GetParameterValue(FName InName, out bool bValueFound);// 0xb093dfc 0x78d720be60
	Vector GetHandJointPosition(int jointIndex, out bool bValueFound);// 0xb093cf0 0x78d720bf40

--------------------------------
Class: MotionTrackedDeviceFunctionLibrary.BlueprintFunctionLibrary.Object
	static void SetIsControllerMotionTrackingEnabledByDefault(bool enable);// 0xb09546c 0x78d720e080
	static bool IsMotionTrackingEnabledForSource(int PlayerIndex, FName SourceName);// 0xb095214 0x78d720e160
	static bool IsMotionTrackingEnabledForDevice(int PlayerIndex, enum Hand);// 0xb09530c 0x78d720e240
	static bool IsMotionTrackingEnabledForComponent(const MotionControllerComponent* MotionControllerComponent);// 0xb095168 0x78d720e320
	static bool IsMotionTrackedDeviceCountManagementNecessary();// 0xb09550c 0x78d720e400
	static bool IsMotionSourceTracking(int PlayerIndex, FName SourceName);// 0xb0949c0 0x78d720e4e0
	static int GetMotionTrackingEnabledControllerCount();// 0xb095404 0x78d720e5c0
	static int GetMaximumMotionTrackedControllerCount();// 0xb095438 0x78d720e6a0
	static FName GetActiveTrackingSystemName();// 0xb094ab8 0x78d720adc0
	static FName[] EnumerateMotionSources();// 0xb094aec 0x78d720aea0
	static bool EnableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0xb094f78 0x78d720af80
	static bool EnableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0xb095070 0x78d720b060
	static bool EnableMotionTrackingForComponent(MotionControllerComponent* MotionControllerComponent);// 0xb094ecc 0x78d720b140
	static void DisableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0xb094d04 0x78d720b220
	static void DisableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0xb094de8 0x78d720b300
	static void DisableMotionTrackingOfControllersForPlayer(int PlayerIndex);// 0xb094bc0 0x78d720b3e0
	static void DisableMotionTrackingOfAllControllers();// 0xb094c58 0x78d720b4c0
	static void DisableMotionTrackingForComponent(const MotionControllerComponent* MotionControllerComponent);// 0xb094c6c 0x78d720b5a0

--------------------------------
Class: VRNotificationsComponent.ActorComponent.Object
	delegate HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate;//[Offset: 0xb8, Size: 0x10] 0x78d35add80
	delegate HMDTrackingInitializedDelegate;//[Offset: 0xc8, Size: 0x10] 0x78d35ade00
	delegate HMDRecenteredDelegate;//[Offset: 0xd8, Size: 0x10] 0x78d35ade80
	delegate HMDLostDelegate;//[Offset: 0xe8, Size: 0x10] 0x78d35adf00
	delegate HMDReconnectedDelegate;//[Offset: 0xf8, Size: 0x10] 0x78d35adf80
	delegate HMDConnectCanceledDelegate;//[Offset: 0x108, Size: 0x10] 0x78d35ae000
	delegate HMDPutOnHeadDelegate;//[Offset: 0x118, Size: 0x10] 0x78d35ae080
	delegate HMDRemovedFromHeadDelegate;//[Offset: 0x128, Size: 0x10] 0x78d35ae100
	delegate VRControllerRecenteredDelegate;//[Offset: 0x138, Size: 0x10] 0x78d35ae180

--------------------------------
Class: XRAssetFunctionLibrary.BlueprintFunctionLibrary.Object
	static PrimitiveComponent* AddNamedDeviceVisualizationComponentBlocking(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId);// 0xb095e00 0x78d720dec0
	static PrimitiveComponent* AddDeviceVisualizationComponentBlocking(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform);// 0xb096060 0x78d720dfa0

--------------------------------
Class: AsyncTask_LoadXRDeviceVisComponent.BlueprintAsyncActionBase.Object
	delegate OnModelLoaded;//[Offset: 0x30, Size: 0x10] 0x78d721e300
	delegate OnLoadFailure;//[Offset: 0x40, Size: 0x10] 0x78d721e380
	PrimitiveComponent* SpawnedComponent;//[Offset: 0x58, Size: 0x8] 0x78d721e400
	static AsyncTask_LoadXRDeviceVisComponent* AddNamedDeviceVisualizationComponentAsync(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId, out PrimitiveComponent* NewComponent);// 0xb0966b4 0x78d720dd00
	static AsyncTask_LoadXRDeviceVisComponent* AddDeviceVisualizationComponentAsync(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform, out PrimitiveComponent* NewComponent);// 0xb0964a4 0x78d720dde0

--------------------------------
Class: XRLoadingScreenFunctionLibrary.BlueprintFunctionLibrary.Object
	static void ShowLoadingScreen();// 0xb096f18 0x78d720d8a0
	static void SetLoadingScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0xb097150 0x78d720d980
	static void HideLoadingScreen();// 0xb096f04 0x78d720da60
	static void ClearLoadingScreenSplashes();// 0xb09713c 0x78d720db40
	static void AddLoadingScreenSplash(Texture* Texture, Vector Translation, Rotator Rotation, Vector2D Size, Rotator DeltaRotation, bool bClearBeforeAdd);// 0xb096f2c 0x78d720dc20

--------------------------------
Class: FoliageStatistics.BlueprintFunctionLibrary.Object
	static int FoliageOverlappingSphereCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0xb6f6b00 0x78d720ff20
	static int FoliageOverlappingBoxCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Box Box);// 0xb6f69bc 0x78d720caa0

--------------------------------
Class: FoliageType_Actor.FoliageType.Object
	class Actor* ActorClass;//[Offset: 0x3b0, Size: 0x8] 0x78d715c7c0
	bool bShouldAttachToBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1] 0x78d7223c80

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: InteractiveFoliageActor.StaticMeshActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x238, Size: 0x8] 0x78d7224f80
	Vector TouchingActorEntryPosition;//[Offset: 0x240, Size: 0xc] 0x78d7225000
	Vector FoliageVelocity;//[Offset: 0x24c, Size: 0xc] 0x78d7225080
	Vector FoliageForce;//[Offset: 0x258, Size: 0xc] 0x78d7225100
	Vector FoliagePosition;//[Offset: 0x264, Size: 0xc] 0x78d7225180
	float FoliageDamageImpulseScale;//[Offset: 0x270, Size: 0x4] 0x78d7225200
	float FoliageTouchImpulseScale;//[Offset: 0x274, Size: 0x4] 0x78d7225280
	float FoliageStiffness;//[Offset: 0x278, Size: 0x4] 0x78d7223200
	float FoliageStiffnessQuadratic;//[Offset: 0x27c, Size: 0x4] 0x78d7223280
	float FoliageDamping;//[Offset: 0x280, Size: 0x4] 0x78d7223300
	float MaxDamageImpulse;//[Offset: 0x284, Size: 0x4] 0x78d7223380
	float MaxTouchImpulse;//[Offset: 0x288, Size: 0x4] 0x78d7223400
	float MaxForce;//[Offset: 0x28c, Size: 0x4] 0x78d7223480
	float Mass;//[Offset: 0x290, Size: 0x4] 0x78d7223500
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult OverlapInfo);// 0xb6f7da4 0x78d720fd60

--------------------------------
Class: InteractiveFoliageComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ProceduralFoliageBlockingVolume.Volume.Brush.Actor.Object
	ProceduralFoliageVolume* ProceduralFoliageVolume;//[Offset: 0x258, Size: 0x8] 0x78d7224f00

--------------------------------
Class: ProceduralFoliageVolume.Volume.Brush.Actor.Object
	ProceduralFoliageComponent* ProceduralComponent;//[Offset: 0x258, Size: 0x8] 0x78d7224880

--------------------------------
Class: ProceduralFoliageComponent.ActorComponent.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0xb8, Size: 0x8] 0x78d7224d00
	float TileOverlap;//[Offset: 0xc0, Size: 0x4] 0x78d7224d80
	Volume* SpawningVolume;//[Offset: 0xc8, Size: 0x8] 0x78d7224e00
	Guid ProceduralGuid;//[Offset: 0xd0, Size: 0x10] 0x78d7224e80

--------------------------------
Class: ProceduralFoliageSpawner.Object
	int RandomSeed;//[Offset: 0x28, Size: 0x4] 0x78d7224a00
	float TileSize;//[Offset: 0x2c, Size: 0x4] 0x78d7224a80
	int NumUniqueTiles;//[Offset: 0x30, Size: 0x4] 0x78d7224b00
	float MinimumQuadTreeSize;//[Offset: 0x34, Size: 0x4] 0x78d7224b80
	FoliageTypeObject[] FoliageTypes;//[Offset: 0x40, Size: 0x10] 0x78d715c540
	void Simulate(int NumSteps);// 0xb6f8bb0 0x78d720fc80

--------------------------------
Class: FoliageTypeObject
	Object* FoliageTypeObject;//[Offset: 0x0, Size: 0x8] 0x78dbe4a580
	FoliageType* TypeInstance;//[Offset: 0x8, Size: 0x8] 0x78dbe4a600
	bool bIsAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78dbe4a680
	class FoliageType_InstancedStaticMesh* Type;//[Offset: 0x18, Size: 0x8] 0x78dbe50100

--------------------------------
Class: ProceduralFoliageTile.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0x28, Size: 0x8] 0x78d7224900
	ProceduralFoliageInstance[] InstancesArray;//[Offset: 0xd0, Size: 0x10] 0x78d715c4a0

--------------------------------
Class: ProceduralFoliageInstance
	Quat Rotation;//[Offset: 0x0, Size: 0x10] 0x78dbe4c380
	Vector Location;//[Offset: 0x10, Size: 0xc] 0x78dbe4c400
	float Age;//[Offset: 0x1c, Size: 0x4] 0x78dbe4c480
	Vector Normal;//[Offset: 0x20, Size: 0xc] 0x78dbe4c500
	float Scale;//[Offset: 0x2c, Size: 0x4] 0x78dbe4c580
	FoliageType* Type;//[Offset: 0x30, Size: 0x8] 0x78dbe4c600

--------------------------------
Class: ControlPointMeshActor.Actor.Object
	ControlPointMeshComponent* ControlPointMeshComponent;//[Offset: 0x220, Size: 0x8] 0x78d7224800

--------------------------------
Class: LandscapeBlueprintBrushBase.Actor.Object
	void RequestLandscapeUpdate();// 0xb7455cc 0x78d720ef60
	TextureRenderTarget2D* Render(bool InIsHeightmap, TextureRenderTarget2D* InCombinedResult, out const FName InWeightmapLayerName);// 0xb745764 0x78d720f040
	void Initialize(out const Transform InLandscapeTransform, out const IntPoint InLandscapeSize, out const IntPoint InLandscapeRenderTargetSize);// 0xb7455e0 0x78d720f120
	void GetBlueprintRenderDependencies(out Object*[] OutStreamableAssets);// 0xaa7cd18 0x78d720f200

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeInfo.Object
	Landscape* LandscapeActor;//[Offset: 0x28, Size: 0x1c] 0x78d722b580
	Guid LandscapeGuid;//[Offset: 0x44, Size: 0x10] 0x78d7229500
	int ComponentSizeQuads;//[Offset: 0x54, Size: 0x4] 0x78d7229580
	int SubsectionSizeQuads;//[Offset: 0x58, Size: 0x4] 0x78d7229600
	int ComponentNumSubsections;//[Offset: 0x5c, Size: 0x4] 0x78d7229680
	Vector DrawScale;//[Offset: 0x60, Size: 0xc] 0x78d7229700
	LandscapeStreamingProxy*[] Proxies;//[Offset: 0x110, Size: 0x10] 0x78d715dee0

--------------------------------
Class: LandscapeStreamingProxy.LandscapeProxy.Actor.Object
	Landscape* LandscapeActor;//[Offset: 0x588, Size: 0x1c] 0x78d722d080

--------------------------------
Class: LandscapeMaterialInstanceConstant.MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	LandscapeMaterialTextureStreamingInfo[] TextureStreamingInfo;//[Offset: 0x380, Size: 0x10] 0x78d715d940
	bool bIsLayerThumbnail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x390, Size: 0x1] 0x78d722bf00
	bool bDisableTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x390, Size: 0x1] 0x78d722bf80
	bool bMobile;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x390, Size: 0x1] 0x78d722c000
	bool bEditorToolUsage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x390, Size: 0x1] 0x78d722c080

--------------------------------
Class: LandscapeMaterialTextureStreamingInfo
	FName TextureName;//[Offset: 0x0, Size: 0x8] 0x78dbe4c900
	float TexelFactor;//[Offset: 0x8, Size: 0x4] 0x78dbe4c980

--------------------------------
Class: LandscapeMeshCollisionComponent.LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid MeshGuid;//[Offset: 0x550, Size: 0x10] 0x78d722be00

--------------------------------
Class: LandscapeMeshProxyActor.Actor.Object
	LandscapeMeshProxyComponent* LandscapeMeshProxyComponent;//[Offset: 0x220, Size: 0x8] 0x78d722bd80

--------------------------------
Class: LandscapeMeshProxyComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid LandscapeGuid;//[Offset: 0x508, Size: 0x10] 0x78d722bc00
	IntPoint[] ProxyComponentBases;//[Offset: 0x518, Size: 0x10] 0x78d715d8a0
	int8 ProxyLOD;//[Offset: 0x528, Size: 0x1] 0x78d722bd00

--------------------------------
Class: LandscapeSettings.DeveloperSettings.Object
	int MaxNumberOfLayers;//[Offset: 0x38, Size: 0x4] 0x78d722bb80

--------------------------------
Class: LandscapeSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: MaterialExpressionLandscapeGrassOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	GrassInput[] GrassTypes;//[Offset: 0x40, Size: 0x10] 0x78d715d300

--------------------------------
Class: GrassInput
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78dbe4db00
	LandscapeGrassType* GrassType;//[Offset: 0x8, Size: 0x8] 0x78dbe4db80
	ExpressionInput Input;//[Offset: 0x10, Size: 0xc] 0x78dbe4dc00

--------------------------------
Class: MaterialExpressionLandscapeLayerBlend.MaterialExpression.Object
	LayerBlendInput[] Layers;//[Offset: 0x40, Size: 0x10] 0x78d715d260
	Guid ExpressionGUID;//[Offset: 0x50, Size: 0x10] 0x78d722ce80

--------------------------------
Class: LayerBlendInput
	FName LayerName;//[Offset: 0x0, Size: 0x8] 0x78dbe4d780
	byte BlendType;//[Offset: 0x8, Size: 0x1] 0x78dbe4d800
	ExpressionInput LayerInput;//[Offset: 0xc, Size: 0xc] 0x78dbe4d880
	ExpressionInput HeightInput;//[Offset: 0x20, Size: 0xc] 0x78dbe4d900
	float PreviewWeight;//[Offset: 0x34, Size: 0x4] 0x78dbe4d980
	Vector ConstLayerInput;//[Offset: 0x38, Size: 0xc] 0x78dbe4da00
	float ConstHeightInput;//[Offset: 0x44, Size: 0x4] 0x78dbe4da80

--------------------------------
Class: MaterialExpressionLandscapeLayerCoords.MaterialExpression.Object
	byte MappingType;//[Offset: 0x39, Size: 0x1] 0x78d722cb00
	byte CustomUVType;//[Offset: 0x3a, Size: 0x1] 0x78d722cb80
	float MappingScale;//[Offset: 0x3c, Size: 0x4] 0x78d722cc00
	float MappingRotation;//[Offset: 0x40, Size: 0x4] 0x78d722cc80
	float MappingPanU;//[Offset: 0x44, Size: 0x4] 0x78d722cd00
	float MappingPanV;//[Offset: 0x48, Size: 0x4] 0x78d722cd80

--------------------------------
Class: MaterialExpressionLandscapeLayerSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x78d722c980
	float PreviewWeight;//[Offset: 0x44, Size: 0x4] 0x78d722ca00
	Guid ExpressionGUID;//[Offset: 0x48, Size: 0x10] 0x78d722ca80

--------------------------------
Class: MaterialExpressionLandscapeLayerSwitch.MaterialExpression.Object
	ExpressionInput LayerUsed;//[Offset: 0x3c, Size: 0xc] 0x78d722c700
	ExpressionInput LayerNotUsed;//[Offset: 0x50, Size: 0xc] 0x78d722c780
	FName ParameterName;//[Offset: 0x64, Size: 0x8] 0x78d722c800
	bool PreviewUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x78d722c880
	Guid ExpressionGUID;//[Offset: 0x70, Size: 0x10] 0x78d722c900

--------------------------------
Class: MaterialExpressionLandscapeLayerWeight.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x3c, Size: 0xc] 0x78d722e500
	ExpressionInput Layer;//[Offset: 0x50, Size: 0xc] 0x78d722e580
	FName ParameterName;//[Offset: 0x64, Size: 0x8] 0x78d722e600
	float PreviewWeight;//[Offset: 0x6c, Size: 0x4] 0x78d722e680
	Vector ConstBase;//[Offset: 0x70, Size: 0xc] 0x78d722e700
	Guid ExpressionGUID;//[Offset: 0x7c, Size: 0x10] 0x78d722c680

--------------------------------
Class: MaterialExpressionLandscapePhysicalMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	PhysicalMaterialInput[] Inputs;//[Offset: 0x40, Size: 0x10] 0x78d715d1c0

--------------------------------
Class: PhysicalMaterialInput
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8] 0x78dbe4f780
	ExpressionInput Input;//[Offset: 0x8, Size: 0xc] 0x78dbe4d700

--------------------------------
Class: MaterialExpressionLandscapeVisibilityMask.MaterialExpression.Object
	Guid ExpressionGUID;//[Offset: 0x3c, Size: 0x10] 0x78d722e400

--------------------------------
Class: FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object
	FrameRate FixedFrameRate;//[Offset: 0x28, Size: 0x8] 0x78d722e380

--------------------------------
Class: GenlockedCustomTimeStep.FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object

--------------------------------
Class: GenlockedTimecodeProvider.TimecodeProvider.Object
	bool bUseGenlockToCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78d722de80

--------------------------------
Class: TimeManagementBlueprintLibrary.BlueprintFunctionLibrary.Object
	static FrameTime TransformTime(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate DestinationRate);// 0xb774c9c 0x78d7250320
	static FrameNumber Subtract_FrameNumberInteger(FrameNumber A, int B);// 0xb774768 0x78d7250400
	static FrameNumber Subtract_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0xb774948 0x78d72504e0
	static FrameTime SnapFrameTimeToRate(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate SnapToRate);// 0xb774b30 0x78d72505c0
	static FrameTime Multiply_SecondsFrameRate(float TimeInSeconds, out const FrameRate FrameRate);// 0xb775154 0x78d72506a0
	static FrameNumber Multiply_FrameNumberInteger(FrameNumber A, int B);// 0xb774678 0x78d7250780
	static bool IsValid_MultipleOf(out const FrameRate InFrameRate, out const FrameRate OtherFramerate);// 0xb774e08 0x78d7250860
	static bool IsValid_Framerate(out const FrameRate InFrameRate);// 0xb774f20 0x78d7250940
	static FrameRate GetTimecodeFrameRate();// 0xb774434 0x78d7250a20
	static Timecode GetTimecode();// 0xb774468 0x78d7250b00
	static FrameNumber Divide_FrameNumberInteger(FrameNumber A, int B);// 0xb774588 0x78d7250be0
	static FString Conv_TimecodeToString(out const Timecode InTimecode, bool bForceSignDisplay);// 0xb774fe0 0x78d7250cc0
	static float Conv_QualifiedFrameTimeToSeconds(out const QualifiedFrameTime InFrameTime);// 0xb775250 0x78d7250da0
	static float Conv_FrameRateToSeconds(out const FrameRate InFrameRate);// 0xb775310 0x78d7250e80
	static int Conv_FrameNumberToInteger(out const FrameNumber InFrameNumber);// 0xb7744d4 0x78d7250f60
	static FrameNumber Add_FrameNumberInteger(FrameNumber A, int B);// 0xb774858 0x78d7251040
	static FrameNumber Add_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0xb774a3c 0x78d7251120

--------------------------------
Class: TimeSynchronizationSource.Object
	bool bUseForSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78d722e800
	int FrameOffset;//[Offset: 0x2c, Size: 0x4] 0x78d722e880

--------------------------------
Class: MovieSceneCustomClockSource.Interface.Object
	void OnTick(float DeltaSeconds, float InPlayRate);// 0xb81f618 0x78d7253960
	void OnStopPlaying(out const QualifiedFrameTime InStopTime);// 0xb81f488 0x78d7250080
	void OnStartPlaying(out const QualifiedFrameTime InStartTime);// 0xb81f550 0x78d7250160
	FrameTime OnRequestCurrentTime(out const QualifiedFrameTime InCurrentTime, float InPlayRate);// 0xb81f36c 0x78d7250240

--------------------------------
Class: MovieSceneEntityProvider.Interface.Object

--------------------------------
Class: MovieScenePlaybackClient.Interface.Object

--------------------------------
Class: MovieSceneTrackTemplateProducer.Interface.Object

--------------------------------
Class: NodeAndChannelMappings.Interface.Object

--------------------------------
Class: MovieSceneNodeGroup.Object

--------------------------------
Class: MovieSceneNodeGroupCollection.Object

--------------------------------
Class: MovieSceneBindingOwnerInterface.Interface.Object

--------------------------------
Class: MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x78d7260d00
	MovieSceneBoolChannel BoolCurve;//[Offset: 0xe0, Size: 0x90] 0x78d7260d80

--------------------------------
Class: MovieSceneBoolChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x78d361e3e0
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78dbe2f980
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78dbe2fa00
	bool[] Values;//[Offset: 0x20, Size: 0x10] 0x78d361e480

--------------------------------
Class: MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneGenericBoundObjectInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoundSceneComponentInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSceneComponentImpersonator.Interface.Object

--------------------------------
Class: MovieSceneFloatDecomposer.Interface.Object

--------------------------------
Class: MovieSceneEasingExternalCurve.Object
	CurveFloat* Curve;//[Offset: 0x30, Size: 0x8] 0x78d7260300

--------------------------------
Class: MovieSceneEasingFunction.Interface.Object
	float OnEvaluate(float Interp);// 0xaa7cd18 0x78d7253880

--------------------------------
Class: MovieSceneEvalTimeSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneFolder.Object
	FName folderName;//[Offset: 0x28, Size: 0x8] 0x78d7262080
	MovieSceneFolder*[] ChildFolders;//[Offset: 0x30, Size: 0x10] 0x78d715f1a0
	MovieSceneTrack*[] ChildMasterTracks;//[Offset: 0x40, Size: 0x10] 0x78d715f240
	FString[] ChildObjectBindingStrings;//[Offset: 0x50, Size: 0x10] 0x78d715f2e0

--------------------------------
Class: MovieSceneKeyProxy.Interface.Object

--------------------------------
Class: MovieSceneMasterInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreAnimatedStateSystemInterface.Interface.Object

--------------------------------
Class: MovieSceneCachePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneRestorePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSpawnablesSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSpawnSection.MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSpawnTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10] 0x78d715f060
	Guid ObjectGuid;//[Offset: 0x88, Size: 0x10] 0x78d7261f00

--------------------------------
Class: TestMovieSceneTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bHighPassFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x78d7261d80
	MovieSceneSection*[] SectionArray;//[Offset: 0x88, Size: 0x10] 0x78d715efc0

--------------------------------
Class: TestMovieSceneSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: TestMovieSceneSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x78d7261d00

--------------------------------
Class: TestMovieSceneSubTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] SectionArray;//[Offset: 0x88, Size: 0x10] 0x78d715ef20

--------------------------------
Class: TestMovieSceneSubSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTrackInstance.Object
	Object* AnimatedObject;//[Offset: 0x28, Size: 0x8] 0x78d7261a80
	bool bIsMasterTrackInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78d7261b00
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 0x8] 0x78d7261b80
	MovieSceneTrackInstanceInput[] Inputs;//[Offset: 0x40, Size: 0x10] 0x78d715ee80

--------------------------------
Class: MovieSceneTrackInstanceInput
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8] 0x78dbe67080

--------------------------------
Class: MovieSceneTrackInstanceInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTrackInstanceSystem.MovieSceneEntitySystem.Object
	MovieSceneTrackInstanceInstantiator* Instantiator;//[Offset: 0x40, Size: 0x8] 0x78d7261a00

--------------------------------
Class: AnimationDataSourceRegistry.Object
	<FName,Object*> DataSources;//[Offset: 0x28, Size: 0x50] 0x78d7106280

--------------------------------
Class: AnimNotify_PlayMontageNotify.AnimNotify.Object
	FName NotifyName;//[Offset: 0x38, Size: 0x8] 0x78d7261880

--------------------------------
Class: AnimNotify_PlayMontageNotifyWindow.AnimNotifyState.Object
	FName NotifyName;//[Offset: 0x2c, Size: 0x8] 0x78d7261800

--------------------------------
Class: AnimSequencerInstance.AnimInstance.Object

--------------------------------
Class: KismetAnimationLibrary.BlueprintFunctionLibrary.Object
	static void K2_TwoBoneIK(out const Vector RootPos, out const Vector JointPos, out const Vector EndPos, out const Vector JointTarget, out const Vector Effector, out Vector OutJointPos, out Vector OutEndPos, bool bAllowStretching, float StartStretchRatio, float MaxStretchScale);// 0xb8c01f8 0x78d7252fc0
	static void K2_StartProfilingTimer();// 0xb8bef00 0x78d72530a0
	static Vector K2_MakePerlinNoiseVectorAndRemap(float X, float Y, float Z, float RangeOutMinX, float RangeOutMaxX, float RangeOutMinY, float RangeOutMaxY, float RangeOutMinZ, float RangeOutMaxZ);// 0xb8bf800 0x78d7253180
	static float K2_MakePerlinNoiseAndRemap(float Value, float RangeOutMin, float RangeOutMax);// 0xb8bf6c4 0x78d7253260
	static Transform K2_LookAt(out const Transform CurrentTransform, out const Vector TargetPosition, Vector LookAtVector, bool bUseUpVector, Vector UpVector, float ClampConeInDegree);// 0xb8bff84 0x78d7253340
	static float K2_EndProfilingTimer(bool bLog, FString LogPrefix);// 0xb8bede0 0x78d7253420
	static float K2_DistanceBetweenTwoSocketsAndMapRange(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameA, byte SocketSpaceA, const FName SocketOrBoneNameB, byte SocketSpaceB, bool bRemapRange, float InRangeMin, float InRangeMax, float OutRangeMin, float OutRangeMax);// 0xb8bfc40 0x78d7253500
	static Vector K2_DirectionBetweenSockets(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameFrom, const FName SocketOrBoneNameTo);// 0xb8bfb00 0x78d72535e0
	static float K2_CalculateVelocityFromSockets(float DeltaSeconds, SkeletalMeshComponent* Component, const FName SocketOrBoneName, const FName ReferenceSocketOrBone, byte SocketSpace, Vector OffsetInBoneSpace, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax, enum EasingType, out const RuntimeFloatCurve CustomCurve);// 0xb8bef14 0x78d72536c0
	static float K2_CalculateVelocityFromPositionHistory(float DeltaSeconds, Vector Position, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax);// 0xb8bf444 0x78d72537a0

--------------------------------
Class: PositionHistory
	Vector[] Positions;//[Offset: 0x0, Size: 0x10] 0x78dbe552e0
	float Range;//[Offset: 0x10, Size: 0x4] 0x78dbe89100

--------------------------------
Class: PlayMontageCallbackProxy.Object
	delegate OnCompleted;//[Offset: 0x28, Size: 0x10] 0x78d7264f00
	delegate OnBlendOut;//[Offset: 0x38, Size: 0x10] 0x78d7264f80
	delegate OnInterrupted;//[Offset: 0x48, Size: 0x10] 0x78d7265000
	delegate OnNotifyBegin;//[Offset: 0x58, Size: 0x10] 0x78d7265080
	delegate OnNotifyEnd;//[Offset: 0x68, Size: 0x10] 0x78d7265100
	void OnNotifyEndReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0xb8c7490 0x78d7252b60
	void OnNotifyBeginReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0xb8c7590 0x78d7252c40
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0xb8c7690 0x78d7252d20
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0xb8c778c 0x78d7252e00
	static PlayMontageCallbackProxy* CreateProxyObjectForPlayMontage(SkeletalMeshComponent* InSkeletalMeshComponent, AnimMontage* MontageToPlay, float PlayRate, float StartingPosition, FName StartingSection);// 0xb8c7888 0x78d7252ee0

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: SequencerAnimationSupport.Interface.Object

--------------------------------
Class: FloatChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTransformOrigin.Interface.Object
	Transform BP_GetTransformOrigin();// 0xaa7cd18 0x78d7252a80

--------------------------------
Class: MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	Guid ConstraintId;//[Offset: 0xdc, Size: 0x10] 0x78d7264c80
	MovieSceneObjectBindingID ConstraintBindingID;//[Offset: 0xec, Size: 0x18] 0x78d7264d00
	void SetConstraintBindingID(out const MovieSceneObjectBindingID InConstraintBindingID);// 0xb9a193c 0x78d72528c0
	MovieSceneObjectBindingID GetConstraintBindingID();// 0xb9a1a14 0x78d72529a0

--------------------------------
Class: MovieScene3DAttachSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	FName AttachSocketName;//[Offset: 0x110, Size: 0x8] 0x78d7264880
	FName AttachComponentName;//[Offset: 0x118, Size: 0x8] 0x78d7264900
	enum AttachmentLocationRule;//[Offset: 0x120, Size: 0x1] 0x78d715ea20
	enum AttachmentRotationRule;//[Offset: 0x121, Size: 0x1] 0x78d715eac0
	enum AttachmentScaleRule;//[Offset: 0x122, Size: 0x1] 0x78d715eb60
	enum DetachmentLocationRule;//[Offset: 0x123, Size: 0x1] 0x78d715ec00
	enum DetachmentRotationRule;//[Offset: 0x124, Size: 0x1] 0x78d715eca0
	enum DetachmentScaleRule;//[Offset: 0x125, Size: 0x1] 0x78d715ed40

--------------------------------
Class: MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ConstraintSections;//[Offset: 0x78, Size: 0x10] 0x78d715e980

--------------------------------
Class: MovieScene3DAttachTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScene3DPathSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TimingCurve;//[Offset: 0x108, Size: 0xa0] 0x78d7264500
	enum FrontAxisEnum;//[Offset: 0x1a8, Size: 0x1] 0x78d715e840
	enum UpAxisEnum;//[Offset: 0x1a9, Size: 0x1] 0x78d715e8e0
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1aa, Size: 0x1] 0x78d7264680
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1aa, Size: 0x1] 0x78d7264700
	bool bForceUpright;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1aa, Size: 0x1] 0x78d7264780

--------------------------------
Class: MovieScene3DPathTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScenePropertySystem.MovieSceneEntitySystem.Object
	MovieScenePropertyInstantiatorSystem* InstantiatorSystem;//[Offset: 0x40, Size: 0x8] 0x78d7264480

--------------------------------
Class: MovieScenePropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneTransformMask TransformMask;//[Offset: 0xe8, Size: 0x4] 0x78d7266280
	MovieSceneFloatChannel Translation;//[Offset: 0xf0, Size: 0xa0] 0x78d7266300
	MovieSceneFloatChannel Rotation;//[Offset: 0x2d0, Size: 0xa0] 0x78d7264280
	MovieSceneFloatChannel Scale;//[Offset: 0x4b0, Size: 0xa0] 0x78d7264300
	MovieSceneFloatChannel ManualWeight;//[Offset: 0x690, Size: 0xa0] 0x78d7264380
	bool bUseQuaternionInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 0x1] 0x78d7264400

--------------------------------
Class: MovieSceneTransformMask
	uint32 Mask;//[Offset: 0x0, Size: 0x4] 0x78dbe88980

--------------------------------
Class: MovieScene3DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneActorReferenceSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneActorReferenceData ActorReferenceData;//[Offset: 0xe0, Size: 0xb0] 0x78d7266100
	IntegralCurve ActorGuidIndexCurve;//[Offset: 0x190, Size: 0x80] 0x78d7266180
	FString[] ActorGuidStrings;//[Offset: 0x210, Size: 0x10] 0x78d715e7a0

--------------------------------
Class: MovieSceneActorReferenceData.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10] 0x78dbe57720
	MovieSceneActorReferenceKey[] KeyValues;//[Offset: 0x40, Size: 0x10] 0x78dbe577c0

--------------------------------
Class: MovieSceneActorReferenceKey
	MovieSceneObjectBindingID Object;//[Offset: 0x0, Size: 0x18] 0x78dbe8a000
	FName ComponentName;//[Offset: 0x18, Size: 0x8] 0x78dbe8a080
	FName SocketName;//[Offset: 0x20, Size: 0x8] 0x78dbe8a100

--------------------------------
Class: MovieSceneActorReferenceTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneAudioSection.MovieSceneSection.MovieSceneSignedObject.Object
	SoundBase* Sound;//[Offset: 0xe0, Size: 0x8] 0x78d7265700
	FrameNumber StartFrameOffset;//[Offset: 0xe8, Size: 0x4] 0x78d7265780
	float StartOffset;//[Offset: 0xec, Size: 0x4] 0x78d7265800
	float AudioStartTime;//[Offset: 0xf0, Size: 0x4] 0x78d7265880
	float AudioDilationFactor;//[Offset: 0xf4, Size: 0x4] 0x78d7265900
	float AudioVolume;//[Offset: 0xf8, Size: 0x4] 0x78d7265980
	MovieSceneFloatChannel SoundVolume;//[Offset: 0x100, Size: 0xa0] 0x78d7265a00
	MovieSceneFloatChannel PitchMultiplier;//[Offset: 0x1a0, Size: 0xa0] 0x78d7265a80
	MovieSceneActorReferenceData AttachActorData;//[Offset: 0x240, Size: 0xb0] 0x78d7265b00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1] 0x78d7265b80
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1] 0x78d7265c00
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1] 0x78d7265c80
	SoundAttenuation* AttenuationSettings;//[Offset: 0x2f8, Size: 0x8] 0x78d7265d00
	delegate OnQueueSubtitles;//[Offset: 0x300, Size: 0x10] 0x78d7265d80
	delegate OnAudioFinished;//[Offset: 0x310, Size: 0x10] 0x78d7265e00
	delegate OnAudioPlaybackPercent;//[Offset: 0x320, Size: 0x10] 0x78d7265e80
	void SetStartOffset(FrameNumber InStartOffset);// 0xb9a302c 0x78d7252540
	void SetSound(SoundBase* InSound);// 0xb9a30ec 0x78d7252620
	FrameNumber GetStartOffset();// 0xb9a3010 0x78d7252700
	SoundBase* GetSound();// 0xb9a30d0 0x78d72527e0

--------------------------------
Class: MovieSceneAudioTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AudioSections;//[Offset: 0x80, Size: 0x10] 0x78d715e700

--------------------------------
Class: MovieSceneBaseValueEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneByteSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel ByteCurve;//[Offset: 0xe0, Size: 0x98] 0x78d7265600

--------------------------------
Class: MovieSceneByteChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x78dbe51f00
	byte DefaultValue;//[Offset: 0x18, Size: 0x1] 0x78dbe4fb00
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78dbe4fb80
	byte[] Values;//[Offset: 0x20, Size: 0x10] 0x78dbe51fa0
	Enum* Enum;//[Offset: 0x30, Size: 0x8] 0x78dbe4fc80

--------------------------------
Class: MovieSceneByteTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0xb0, Size: 0x8] 0x78d7265580

--------------------------------
Class: MovieSceneCameraAnimSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraAnimSectionData AnimData;//[Offset: 0xe0, Size: 0x20] 0x78d7267300
	CameraAnim* CameraAnim;//[Offset: 0x100, Size: 0x8] 0x78d7267380
	float PlayRate;//[Offset: 0x108, Size: 0x4] 0x78d7265300
	float PlayScale;//[Offset: 0x10c, Size: 0x4] 0x78d7265380
	float BlendInTime;//[Offset: 0x110, Size: 0x4] 0x78d7265400
	float BlendOutTime;//[Offset: 0x114, Size: 0x4] 0x78d7265480
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x78d7265500

--------------------------------
Class: MovieSceneCameraAnimSectionData
	CameraAnim* CameraAnim;//[Offset: 0x0, Size: 0x8] 0x78dbe89b00
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x78dbe89b80
	float PlayScale;//[Offset: 0xc, Size: 0x4] 0x78dbe89c00
	float BlendInTime;//[Offset: 0x10, Size: 0x4] 0x78dbe89c80
	float BlendOutTime;//[Offset: 0x14, Size: 0x4] 0x78dbe89d00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78dbe89d80

--------------------------------
Class: MovieSceneCameraAnimTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraAnimSections;//[Offset: 0x80, Size: 0x10] 0x78d715e660

--------------------------------
Class: MovieSceneCameraCutSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool bLockPreviousCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78d7266f00
	Guid CameraGuid;//[Offset: 0xec, Size: 0x10] 0x78d7266f80
	MovieSceneObjectBindingID CameraBindingID;//[Offset: 0xfc, Size: 0x18] 0x78d7267000
	Transform InitialCameraCutTransform;//[Offset: 0x120, Size: 0x30] 0x78d7267080
	bool bHasInitialCameraCutTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1] 0x78d7267100
	void SetCameraBindingID(out const MovieSceneObjectBindingID InCameraBindingID);// 0xb9a454c 0x78d7252380
	MovieSceneObjectBindingID GetCameraBindingID();// 0xb9a4628 0x78d7252460

--------------------------------
Class: MovieSceneCameraCutTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bCanBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78d7266e00
	MovieSceneSection*[] Sections;//[Offset: 0x80, Size: 0x10] 0x78d715e5c0

--------------------------------
Class: MovieSceneCameraCutTrackInstance.MovieSceneTrackInstance.Object

--------------------------------
Class: MovieSceneCameraShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe0, Size: 0x20] 0x78d7266c00
	class MatineeCameraShake* ShakeClass;//[Offset: 0x100, Size: 0x8] 0x78d715e480
	float PlayScale;//[Offset: 0x108, Size: 0x4] 0x78d7266c80
	enum PlaySpace;//[Offset: 0x10c, Size: 0x1] 0x78d715e520
	Rotator UserDefinedPlaySpace;//[Offset: 0x110, Size: 0xc] 0x78d7266d80

--------------------------------
Class: MovieSceneCameraShakeSectionData
	class MatineeCameraShake* ShakeClass;//[Offset: 0x0, Size: 0x8] 0x78dbe575e0
	float PlayScale;//[Offset: 0x8, Size: 0x4] 0x78dbe89880
	enum PlaySpace;//[Offset: 0xc, Size: 0x1] 0x78dbe57680
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0xc] 0x78dbe89980

--------------------------------
Class: MovieSceneCameraShakeSourceShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe0, Size: 0x20] 0x78d7266b80

--------------------------------
Class: MovieSceneCameraShakeSourceShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x80, Size: 0x10] 0x78d715e3e0

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSourceTriggerChannel Channel;//[Offset: 0xe0, Size: 0x88] 0x78d7266a80

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10] 0x78dbe57360
	MovieSceneCameraShakeSourceTrigger[] KeyValues;//[Offset: 0x18, Size: 0x10] 0x78dbe57540

--------------------------------
Class: MovieSceneCameraShakeSourceTrigger
	class CameraShakeBase* ShakeClass;//[Offset: 0x0, Size: 0x8] 0x78dbe57400
	float PlayScale;//[Offset: 0x8, Size: 0x4] 0x78dbe8b500
	enum PlaySpace;//[Offset: 0xc, Size: 0x1] 0x78dbe574a0
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0xc] 0x78dbe89500

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x80, Size: 0x10] 0x78d715e340

--------------------------------
Class: MovieSceneCameraShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x80, Size: 0x10] 0x78d715ff60

--------------------------------
Class: MovieSceneCinematicShotSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	FString ShotDisplayName;//[Offset: 0x158, Size: 0x10] 0x78d7266780
	FText DisplayName;//[Offset: 0x168, Size: 0x18] 0x78d7266800
	void SetShotDisplayName(FString InShotDisplayName);// 0xb9aa1ac 0x78d72521c0
	FString GetShotDisplayName();// 0xb9aa2e4 0x78d72522a0

--------------------------------
Class: MovieSceneCinematicShotTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneColorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel RedCurve;//[Offset: 0xe0, Size: 0xa0] 0x78d7266580
	MovieSceneFloatChannel GreenCurve;//[Offset: 0x180, Size: 0xa0] 0x78d7266600
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x220, Size: 0xa0] 0x78d7266680
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x2c0, Size: 0xa0] 0x78d7266700

--------------------------------
Class: MovieSceneColorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bIsSlateColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x78d7266500

--------------------------------
Class: MovieSceneComponentAttachmentInvalidatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentAttachmentSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentMobilitySystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreAnimatedComponentTransformSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentTransformSystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEnumSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel EnumCurve;//[Offset: 0xe0, Size: 0x98] 0x78d7266480

--------------------------------
Class: MovieSceneEnumTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0xb0, Size: 0x8] 0x78d7266400

--------------------------------
Class: MovieSceneEulerTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEulerTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventRepeaterSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEvent Event;//[Offset: 0xe8, Size: 0x28] 0x78d7266380

--------------------------------
Class: MovieSceneEvent
	MovieSceneEventPtrs Ptrs;//[Offset: 0x0, Size: 0x28] 0x78dbe8b100

--------------------------------
Class: MovieSceneEventPtrs
	Function* Function;//[Offset: 0x0, Size: 0x8] 0x78dbe8b000
	FieldPathProperty BoundObjectProperty;//[Size: 0x20] 0x78dbe8b080

--------------------------------
Class: MovieSceneEventSection.MovieSceneSection.MovieSceneSignedObject.Object
	NameCurve Events;//[Offset: 0xe0, Size: 0x78] 0x78d7268380
	MovieSceneEventSectionData EventData;//[Offset: 0x158, Size: 0x88] 0x78d7268400

--------------------------------
Class: NameCurve.IndexedCurve
	NameCurveKey[] Keys;//[Offset: 0x68, Size: 0x10] 0x78dbf20b00

--------------------------------
Class: NameCurveKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78dbf30180
	FName Value;//[Offset: 0x4, Size: 0x8] 0x78dbf30200

--------------------------------
Class: MovieSceneEventSectionData.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x78dbe56f00
	EventPayload[] KeyValues;//[Offset: 0x18, Size: 0x10] 0x78dbe56fa0

--------------------------------
Class: EventPayload
	FName EventName;//[Offset: 0x0, Size: 0x8] 0x78dbe8ad00
	MovieSceneEventParameters Parameters;//[Offset: 0x8, Size: 0x28] 0x78dbe8ad80

--------------------------------
Class: MovieSceneEventParameters

--------------------------------
Class: MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePostSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePostEvalEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEventTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78d7268180
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78d7268200
	enum EventPosition;//[Offset: 0x81, Size: 0x1] 0x78d715fe20
	MovieSceneSection*[] Sections;//[Offset: 0x88, Size: 0x10] 0x78d715fec0

--------------------------------
Class: MovieSceneEventTriggerSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEventChannel EventChannel;//[Offset: 0xe8, Size: 0x88] 0x78d7268100

--------------------------------
Class: MovieSceneEventChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10] 0x78dbe57040
	MovieSceneEvent[] KeyValues;//[Offset: 0x18, Size: 0x10] 0x78dbe570e0

--------------------------------
Class: MovieSceneFadeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe0, Size: 0xa0] 0x78d7267f80
	LinearColor FadeColor;//[Offset: 0x180, Size: 0x10] 0x78d7268000
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 0x1] 0x78d7268080

--------------------------------
Class: MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFadeTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFloatPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe8, Size: 0xa0] 0x78d7267f00

--------------------------------
Class: MovieSceneHierarchicalBiasSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneIntegerSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneIntegerChannel IntegerCurve;//[Offset: 0xe0, Size: 0x90] 0x78d7267e80

--------------------------------
Class: MovieSceneIntegerChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x78dbe53bc0
	int DefaultValue;//[Offset: 0x18, Size: 0x4] 0x78dbe62400
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78dbe62480
	int[] Values;//[Offset: 0x20, Size: 0x10] 0x78dbe53c60

--------------------------------
Class: MovieSceneIntegerTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneInterrogatedPropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneLevelVisibilitySection.MovieSceneSection.MovieSceneSignedObject.Object
	enum Visibility;//[Offset: 0xe8, Size: 0x1] 0x78d715fa60
	FName[] LevelNames;//[Offset: 0xf0, Size: 0x10] 0x78d715fb00
	void SetVisibility(enum InVisibility);// 0xb9ae3a0 0x78d7251e40
	void SetLevelNames(out const FName[] InLevelNames);// 0xb9ae1e8 0x78d7251f20
	enum GetVisibility();// 0xb9ae448 0x78d7252000
	FName[] GetLevelNames();// 0xb9ae31c 0x78d72520e0

--------------------------------
Class: MovieSceneLevelVisibilitySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneLevelVisibilityTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10] 0x78d715f9c0

--------------------------------
Class: MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10] 0x78d715f920

--------------------------------
Class: MovieSceneMaterialParameterCollectionTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MaterialParameterCollection* MPC;//[Offset: 0x90, Size: 0x8] 0x78d7267a00

--------------------------------
Class: MovieSceneComponentMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0x90, Size: 0x4] 0x78d7267980

--------------------------------
Class: MovieSceneObjectPropertySection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel ObjectChannel;//[Offset: 0xe0, Size: 0xc0] 0x78d7267900

--------------------------------
Class: MovieSceneObjectPathChannel.MovieSceneChannel
	class Object* PropertyClass;//[Offset: 0x8, Size: 0x8] 0x78dbe539e0
	FrameNumber[] Times;//[Offset: 0x10, Size: 0x10] 0x78dbe53a80
	MovieSceneObjectPathChannelKeyValue[] Values;//[Offset: 0x20, Size: 0x10] 0x78dbe53b20
	MovieSceneObjectPathChannelKeyValue DefaultValue;//[Offset: 0x30, Size: 0x30] 0x78dbe62280

--------------------------------
Class: MovieSceneObjectPathChannelKeyValue
	Object* SoftPtr;//[Offset: 0x0, Size: 0x28] 0x78dbe62180
	Object* HardPtr;//[Offset: 0x28, Size: 0x8] 0x78dbe62200

--------------------------------
Class: MovieSceneObjectPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	class Object* PropertyClass;//[Offset: 0xb0, Size: 0x8] 0x78d715f880

--------------------------------
Class: MovieSceneParameterSection.MovieSceneSection.MovieSceneSignedObject.Object
	BoolParameterNameAndCurve[] BoolParameterNamesAndCurves;//[Offset: 0xe0, Size: 0x10] 0x78d7271140
	ScalarParameterNameAndCurve[] ScalarParameterNamesAndCurves;//[Offset: 0xf0, Size: 0x10] 0x78d72711e0
	Vector2DParameterNameAndCurves[] Vector2DParameterNamesAndCurves;//[Offset: 0x100, Size: 0x10] 0x78d7271280
	VectorParameterNameAndCurves[] VectorParameterNamesAndCurves;//[Offset: 0x110, Size: 0x10] 0x78d7271320
	ColorParameterNameAndCurves[] ColorParameterNamesAndCurves;//[Offset: 0x120, Size: 0x10] 0x78d72713c0
	TransformParameterNameAndCurves[] TransformParameterNamesAndCurves;//[Offset: 0x130, Size: 0x10] 0x78d7271460
	bool RemoveVectorParameter(FName InParameterName);// 0xb9b61f0 0x78d7254ca0
	bool RemoveVector2DParameter(FName InParameterName);// 0xb9b62a4 0x78d7254d80
	bool RemoveTransformParameter(FName InParameterName);// 0xb9b6088 0x78d7254e60
	bool RemoveScalarParameter(FName InParameterName);// 0xb9b640c 0x78d7254f40
	bool RemoveColorParameter(FName InParameterName);// 0xb9b613c 0x78d7255020
	bool RemoveBoolParameter(FName InParameterName);// 0xb9b6358 0x78d7255100
	void GetParameterNames(out <FName> ParameterNames);// 0xb9b5f78 0x78d72551e0
	void AddVectorParameterKey(FName InParameterName, FrameNumber InTime, Vector InValue);// 0xb9b6764 0x78d72552c0
	void AddVector2DParameterKey(FName InParameterName, FrameNumber InTime, Vector2D InValue);// 0xb9b68a0 0x78d72553a0
	void AddTransformParameterKey(FName InParameterName, FrameNumber InTime, out const Transform InValue);// 0xb9b64c0 0x78d7255480
	void AddScalarParameterKey(FName InParameterName, FrameNumber InTime, float InValue);// 0xb9b6b1c 0x78d7255560
	void AddColorParameterKey(FName InParameterName, FrameNumber InTime, LinearColor InValue);// 0xb9b6628 0x78d7255640
	void AddBoolParameterKey(FName InParameterName, FrameNumber InTime, bool InValue);// 0xb9b69d8 0x78d7251d60

--------------------------------
Class: BoolParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78dbe8be00
	MovieSceneBoolChannel ParameterCurve;//[Offset: 0x8, Size: 0x90] 0x78dbe8be80

--------------------------------
Class: ScalarParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78dbe8bc80
	MovieSceneFloatChannel ParameterCurve;//[Offset: 0x8, Size: 0xa0] 0x78dbe8bd00

--------------------------------
Class: Vector2DParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78dbe8bf80
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xa0] 0x78dbe8c000
	MovieSceneFloatChannel YCurve;//[Offset: 0xa8, Size: 0xa0] 0x78dbe8c080

--------------------------------
Class: VectorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78dbe8c180
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xa0] 0x78dbe8c200
	MovieSceneFloatChannel YCurve;//[Offset: 0xa8, Size: 0xa0] 0x78dbe8c280
	MovieSceneFloatChannel ZCurve;//[Offset: 0x148, Size: 0xa0] 0x78dbe8c300

--------------------------------
Class: ColorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78dbe8c400
	MovieSceneFloatChannel RedCurve;//[Offset: 0x8, Size: 0xa0] 0x78dbe8c480
	MovieSceneFloatChannel GreenCurve;//[Offset: 0xa8, Size: 0xa0] 0x78dbe8c500
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x148, Size: 0xa0] 0x78dbe8c580
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x1e8, Size: 0xa0] 0x78dbe8c600

--------------------------------
Class: TransformParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78dbe8a600
	MovieSceneFloatChannel Translation;//[Offset: 0x8, Size: 0xa0] 0x78dbe8a680
	MovieSceneFloatChannel Rotation;//[Offset: 0x1e8, Size: 0xa0] 0x78dbe8a700
	MovieSceneFloatChannel Scale;//[Offset: 0x3c8, Size: 0xa0] 0x78dbe8a780

--------------------------------
Class: MovieSceneParticleParameterTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x80, Size: 0x10] 0x78d72710a0

--------------------------------
Class: MovieSceneParticleSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneParticleChannel ParticleKeys;//[Offset: 0xe0, Size: 0x98] 0x78d7268680

--------------------------------
Class: MovieSceneParticleChannel.MovieSceneByteChannel.MovieSceneChannel

--------------------------------
Class: MovieSceneParticleTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ParticleSections;//[Offset: 0x80, Size: 0x10] 0x78d7271000

--------------------------------
Class: MovieScenePiecewiseFloatBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePrimitiveMaterialSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel MaterialChannel;//[Offset: 0xe0, Size: 0xc0] 0x78d7268580

--------------------------------
Class: MovieScenePrimitiveMaterialTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0xb0, Size: 0x4] 0x78d7268500

--------------------------------
Class: MovieSceneQuaternionInterpolationRotationSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSkeletalAnimationSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSkeletalAnimationParams Params;//[Offset: 0xe0, Size: 0xd8] 0x78d7269c80
	AnimSequence* AnimSequence;//[Offset: 0x1b8, Size: 0x8] 0x78d7269d00
	AnimSequenceBase* Animation;//[Offset: 0x1c0, Size: 0x8] 0x78d7269d80
	float StartOffset;//[Offset: 0x1c8, Size: 0x4] 0x78d7269e00
	float EndOffset;//[Offset: 0x1cc, Size: 0x4] 0x78d7269e80
	float PlayRate;//[Offset: 0x1d0, Size: 0x4] 0x78d7269f00
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 0x1] 0x78d7269f80
	FName SlotName;//[Offset: 0x1d8, Size: 0x8] 0x78d726a000
	Vector StartLocationOffset;//[Offset: 0x1e0, Size: 0xc] 0x78d726a080
	Rotator StartRotationOffset;//[Offset: 0x1ec, Size: 0xc] 0x78d726a100
	bool bMatchWithPrevious;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1] 0x78d726a180
	FName MatchedBoneName;//[Offset: 0x1fc, Size: 0x8] 0x78d726a200
	Vector MatchedLocationOffset;//[Offset: 0x204, Size: 0xc] 0x78d726a280
	Rotator MatchedRotationOffset;//[Offset: 0x210, Size: 0xc] 0x78d726a300
	bool bMatchTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 0x1] 0x78d726a380
	bool bMatchIncludeZHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d, Size: 0x1] 0x78d726a400
	bool bMatchRotationYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21e, Size: 0x1] 0x78d726a480
	bool bMatchRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21f, Size: 0x1] 0x78d726a500
	bool bMatchRotationRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x78d7268480

--------------------------------
Class: MovieSceneSkeletalAnimationParams
	AnimSequenceBase* Animation;//[Offset: 0x0, Size: 0x8] 0x78dbe8ce00
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4] 0x78dbe8ce80
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x78dbe8cf00
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4] 0x78dbe8cf80
	float PlayRate;//[Offset: 0x14, Size: 0x4] 0x78dbe8d000
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78dbe8d080
	FName SlotName;//[Offset: 0x1c, Size: 0x8] 0x78dbe8d100
	MovieSceneFloatChannel Weight;//[Offset: 0x28, Size: 0xa0] 0x78dbe8d180
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x78dbe8d200
	bool bForceCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1] 0x78dbe8d280
	float StartOffset;//[Offset: 0xcc, Size: 0x4] 0x78dbe8d300
	float EndOffset;//[Offset: 0xd0, Size: 0x4] 0x78dbe8d380

--------------------------------
Class: MovieSceneSkeletalAnimationTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x80, Size: 0x10] 0x78d7270f60
	bool bUseLegacySectionIndexBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78d7269b00
	MovieSceneSkeletalAnimRootMotionTrackParams RootMotionParams;//[Offset: 0x98, Size: 0x30] 0x78d7269b80
	bool bBlendFirstChildOfRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x78d7269c00

--------------------------------
Class: MovieSceneSkeletalAnimRootMotionTrackParams

--------------------------------
Class: MovieSceneSlomoSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe0, Size: 0xa0] 0x78d7269a00

--------------------------------
Class: MovieSceneSlomoTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneStringSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneStringChannel StringCurve;//[Offset: 0xe0, Size: 0xa0] 0x78d7269980

--------------------------------
Class: MovieSceneStringChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x78dbe56960
	FString[] Values;//[Offset: 0x18, Size: 0x10] 0x78dbe56a00
	FString DefaultValue;//[Offset: 0x28, Size: 0x10] 0x78dbe8b680
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78dbe8b700

--------------------------------
Class: MovieSceneStringTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTransformOriginSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneVectorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel Curves;//[Offset: 0xe0, Size: 0xa0] 0x78d7269880
	int ChannelsUsed;//[Offset: 0x360, Size: 0x4] 0x78d7269900

--------------------------------
Class: MovieSceneVectorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int NumChannelsUsed;//[Offset: 0xb0, Size: 0x4] 0x78d7269800

--------------------------------
Class: MovieSceneVisibilityTrack.MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneHierarchicalEasingInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: WeightAndEasingEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: AsyncTaskDownloadImage.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78d7269600
	delegate OnFail;//[Offset: 0x40, Size: 0x10] 0x78d7269680
	static AsyncTaskDownloadImage* DownloadImage(FString URL);// 0xbaf07c0 0x78d7254bc0

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0x11c, Size: 0x10] 0x78d726af80
	byte HorizontalAlignment;//[Offset: 0x12c, Size: 0x1] 0x78d726b000
	byte VerticalAlignment;//[Offset: 0x12d, Size: 0x1] 0x78d726b080
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 0x1] 0x78d726b100
	float BlurStrength;//[Offset: 0x130, Size: 0x4] 0x78d726b180
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1] 0x78d726b200
	int BlurRadius;//[Offset: 0x138, Size: 0x4] 0x78d726b280
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x140, Size: 0x88] 0x78d726b300
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbaf114c 0x78d72545a0
	void SetPadding(Margin InPadding);// 0xbaf129c 0x78d7254680
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0xbaf0cb0 0x78d7254760
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbaf11f4 0x78d7254840
	void SetBlurStrength(float InStrength);// 0xbaf0f44 0x78d7254920
	void SetBlurRadius(int InBlurRadius);// 0xbaf0ff4 0x78d7254a00
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0xbaf109c 0x78d7254ae0

--------------------------------
Class: BackgroundBlurSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78d726ab80
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78d726ac00
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78d726ac80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbaf1760 0x78d7254300
	void SetPadding(Margin InPadding);// 0xbaf18b0 0x78d72543e0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbaf1808 0x78d72544c0

--------------------------------
Class: BoolBinding.PropertyBinding.Object
	bool GetValue();// 0xbaf1cd4 0x78d7254220

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x119, Size: 0x1] 0x78d726bd00
	byte VerticalAlignment;//[Offset: 0x11a, Size: 0x1] 0x78d726bd80
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11b, Size: 0x1] 0x78d726be00
	LinearColor ContentColorAndOpacity;//[Offset: 0x11c, Size: 0x10] 0x78d726be80
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x12c, Size: 0x10] 0x78d726bf00
	Margin Padding;//[Offset: 0x13c, Size: 0x10] 0x78d726bf80
	SlateBrush Background;//[Offset: 0x150, Size: 0x88] 0x78d726c000
	delegate BackgroundDelegate;//[Offset: 0x1d8, Size: 0x10] 0x78d726c080
	LinearColor BrushColor;//[Offset: 0x1e8, Size: 0x10] 0x78d726c100
	delegate BrushColorDelegate;//[Offset: 0x1f8, Size: 0x10] 0x78d726c180
	Vector2D DesiredSizeScale;//[Offset: 0x208, Size: 0x8] 0x78d726c200
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x78d726c280
	delegate OnMouseButtonDownEvent;//[Offset: 0x214, Size: 0x10] 0x78d726c300
	delegate OnMouseButtonUpEvent;//[Offset: 0x224, Size: 0x10] 0x78d726c380
	delegate OnMouseMoveEvent;//[Offset: 0x234, Size: 0x10] 0x78d726c400
	delegate OnMouseDoubleClickEvent;//[Offset: 0x244, Size: 0x10] 0x78d726c480
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbaf2544 0x78d7257240
	void SetPadding(Margin InPadding);// 0xbaf2694 0x78d7257320
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbaf25ec 0x78d7253a40
	void SetDesiredSizeScale(Vector2D InScale);// 0xbaf1f38 0x78d7253b20
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0xbaf2740 0x78d7253c00
	void SetBrushFromTexture(Texture2D* Texture);// 0xbaf20b8 0x78d7253ce0
	void SetBrushFromMaterial(MaterialInterface* Material);// 0xbaf2010 0x78d7253dc0
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0xbaf2160 0x78d7253ea0
	void SetBrushColor(LinearColor InBrushColor);// 0xbaf249c 0x78d7253f80
	void SetBrush(out const SlateBrush InBrush);// 0xbaf2208 0x78d7254060
	MaterialInstanceDynamic* GetDynamicMaterial();// 0xbaf1fdc 0x78d7254140

--------------------------------
Class: BorderSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78d726ba00
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78d726ba80
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78d726bb00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbaf2d1c 0x78d7256fa0
	void SetPadding(Margin InPadding);// 0xbaf2e6c 0x78d7257080
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbaf2dc4 0x78d7257160

--------------------------------
Class: BrushBinding.PropertyBinding.Object
	SlateBrush GetValue();// 0xbaf3348 0x78d7256ec0

--------------------------------
Class: ButtonSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78d726b680
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78d726b700
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78d726b780
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbaf42b4 0x78d7256c20
	void SetPadding(Margin InPadding);// 0xbaf4404 0x78d7256d00
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbaf435c 0x78d7256de0

--------------------------------
Class: CheckedStateBinding.PropertyBinding.Object
	enum GetValue();// 0xbaf68c8 0x78d7258d60

--------------------------------
Class: CircularThrobber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x108, Size: 0x4] 0x78d726d780
	float Period;//[Offset: 0x10c, Size: 0x4] 0x78d726d800
	float Radius;//[Offset: 0x110, Size: 0x4] 0x78d726d880
	SlateBrushAsset* PieceImage;//[Offset: 0x118, Size: 0x8] 0x78d726d900
	SlateBrush Image;//[Offset: 0x120, Size: 0x88] 0x78d726d980
	bool bEnableRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1] 0x78d726da00
	void SetRadius(float InRadius);// 0xbaf6b18 0x78d7258ac0
	void SetPeriod(float InPeriod);// 0xbaf6bc0 0x78d7258ba0
	void SetNumberOfPieces(int InNumberOfPieces);// 0xbaf6c68 0x78d7258c80

--------------------------------
Class: ColorBinding.PropertyBinding.Object
	SlateColor GetSlateValue();// 0xbaf86d4 0x78d7258900
	LinearColor GetLinearValue();// 0xbaf869c 0x78d72589e0

--------------------------------
Class: ComboBox.Widget.Visual.Object
	Object*[] items;//[Offset: 0x108, Size: 0x10] 0x78d7270ba0
	delegate OnGenerateWidgetEvent;//[Offset: 0x118, Size: 0x10] 0x78d726f680
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x78d726f700

--------------------------------
Class: DynamicEntryBoxBase.Widget.Visual.Object
	enum EntryBoxType;//[Offset: 0x108, Size: 0x1] 0x78d7270920
	Vector2D EntrySpacing;//[Offset: 0x10c, Size: 0x8] 0x78d726ea80
	Vector2D[] SpacingPattern;//[Offset: 0x118, Size: 0x10] 0x78d72709c0
	SlateChildSize EntrySizeRule;//[Offset: 0x128, Size: 0x8] 0x78d726eb80
	byte EntryHorizontalAlignment;//[Offset: 0x130, Size: 0x1] 0x78d726ec00
	byte EntryVerticalAlignment;//[Offset: 0x131, Size: 0x1] 0x78d726ec80
	int MaxElementSize;//[Offset: 0x134, Size: 0x4] 0x78d726ed00
	RadialBoxSettings RadialBoxSettings;//[Offset: 0x138, Size: 0xc] 0x78d726ed80
	UserWidgetPool EntryWidgetPool;//[Offset: 0x158, Size: 0x80] 0x78d726ee00
	void SetRadialSettings(out const RadialBoxSettings InSettings);// 0xbafb570 0x78d72582e0
	void SetEntrySpacing(out const Vector2D InEntrySpacing);// 0xbafb62c 0x78d72583c0
	int GetNumEntries();// 0xbafb6dc 0x78d72584a0
	UserWidget*[] GetAllEntries();// 0xbafb710 0x78d7258580

--------------------------------
Class: RadialBoxSettings
	bool bDistributeItemsEvenly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbe8e180
	float AngleBetweenItems;//[Offset: 0x4, Size: 0x4] 0x78dbe8e200
	float StartingAngle;//[Offset: 0x8, Size: 0x4] 0x78dbe8e280

--------------------------------
Class: DynamicEntryBox.DynamicEntryBoxBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x1d8, Size: 0x8] 0x78d72707e0
	void Reset(bool bDeleteWidgets);// 0xbafafd8 0x78d7257f60
	void RemoveEntry(UserWidget* EntryWidget);// 0xbafaf30 0x78d7258040
	UserWidget* BP_CreateEntryOfClass(class UserWidget EntryClass);// 0xbafae4c 0x78d7258120
	UserWidget* BP_CreateEntry();// 0xbafaefc 0x78d7258200

--------------------------------
Class: ExpandableArea.Widget.Visual.Object
	ExpandableAreaStyle Style;//[Offset: 0x110, Size: 0x120] 0x78d726fa00
	SlateBrush BorderBrush;//[Offset: 0x230, Size: 0x88] 0x78d726fa80
	SlateColor BorderColor;//[Offset: 0x2b8, Size: 0x28] 0x78d726fb00
	bool bIsExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1] 0x78d726fb80
	float maxHeight;//[Offset: 0x2e4, Size: 0x4] 0x78d726fc00
	Margin HeaderPadding;//[Offset: 0x2e8, Size: 0x10] 0x78d726fc80
	Margin AreaPadding;//[Offset: 0x2f8, Size: 0x10] 0x78d726fd00
	delegate OnExpansionChanged;//[Offset: 0x308, Size: 0x10] 0x78d726fd80
	Widget* HeaderContent;//[Offset: 0x318, Size: 0x8] 0x78d726fe00
	Widget* BodyContent;//[Offset: 0x320, Size: 0x8] 0x78d726fe80
	void SetIsExpanded_Animated(bool IsExpanded);// 0xbafda50 0x78d7257cc0
	void SetIsExpanded(bool IsExpanded);// 0xbafdb00 0x78d7257da0
	bool GetIsExpanded();// 0xbafdbb0 0x78d7257e80

--------------------------------
Class: ExpandableAreaStyle.SlateWidgetStyle
	SlateBrush CollapsedImage;//[Offset: 0x8, Size: 0x88] 0x78dbe43800
	SlateBrush ExpandedImage;//[Offset: 0x90, Size: 0x88] 0x78dbe43880
	float RolloutAnimationSeconds;//[Offset: 0x118, Size: 0x4] 0x78dbe43900

--------------------------------
Class: FloatBinding.PropertyBinding.Object
	float GetValue();// 0xbafded0 0x78d7257be0

--------------------------------
Class: GridPanel.PanelWidget.Widget.Visual.Object
	float[] ColumnFill;//[Offset: 0x120, Size: 0x10] 0x78d72706a0
	float[] RowFill;//[Offset: 0x130, Size: 0x10] 0x78d7270740
	void SetRowFill(int columnIndex, float Coefficient);// 0xbaff7cc 0x78d7257940
	void SetColumnFill(int columnIndex, float Coefficient);// 0xbaff8c0 0x78d7257a20
	GridSlot* AddChildToGrid(Widget* Content, int InRow, int InColumn);// 0xbaff9b4 0x78d7257b00

--------------------------------
Class: GridSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78d7280480
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78d7280500
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78d7280580
	int Row;//[Offset: 0x4c, Size: 0x4] 0x78d7280600
	int RowSpan;//[Offset: 0x50, Size: 0x4] 0x78d7280680
	int Column;//[Offset: 0x54, Size: 0x4] 0x78d7280700
	int ColumnSpan;//[Offset: 0x58, Size: 0x4] 0x78d7280780
	int Layer;//[Offset: 0x5c, Size: 0x4] 0x78d7280800
	Vector2D Nudge;//[Offset: 0x60, Size: 0x8] 0x78d7280880
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbafff28 0x78d725ab20
	void SetRowSpan(int InRowSpan);// 0xbb00314 0x78d725ac00
	void SetRow(int InRow);// 0xbb003bc 0x78d725ace0
	void SetPadding(Margin InPadding);// 0xbb00464 0x78d7257400
	void SetNudge(Vector2D InNudge);// 0xbb00078 0x78d72574e0
	void SetLayer(int InLayer);// 0xbb0011c 0x78d72575c0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbafffd0 0x78d72576a0
	void SetColumnSpan(int InColumnSpan);// 0xbb001c4 0x78d7257780
	void SetColumn(int InColumn);// 0xbb0026c 0x78d7257860

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0xbb00a4c 0x78d725aa40

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x78d7282080
	SlateChildSize Size;//[Offset: 0x50, Size: 0x8] 0x78d7282100
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x78d7280080
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x78d7280100
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbb00e94 0x78d725a6c0
	void SetSize(SlateChildSize InSize);// 0xbb00fe4 0x78d725a7a0
	void SetPadding(Margin InPadding);// 0xbb01098 0x78d725a880
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbb00f3c 0x78d725a960

--------------------------------
Class: InputKeySelector.Widget.Visual.Object
	ButtonStyle WidgetStyle;//[Offset: 0x108, Size: 0x278] 0x78d3573e00
	TextBlockStyle TextStyle;//[Offset: 0x380, Size: 0x270] 0x78d3572200
	InputChord SelectedKey;//[Offset: 0x5f0, Size: 0x20] 0x78d3572280
	SlateFontInfo Font;//[Offset: 0x610, Size: 0x58] 0x78d3572300
	Margin Margin;//[Offset: 0x668, Size: 0x10] 0x78d3572380
	LinearColor ColorAndOpacity;//[Offset: 0x678, Size: 0x10] 0x78d3572400
	FText KeySelectionText;//[Offset: 0x688, Size: 0x18] 0x78d3572480
	FText NoKeySpecifiedText;//[Offset: 0x6a0, Size: 0x18] 0x78d3572500
	bool bAllowModifierKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1] 0x78d3572580
	bool bAllowGamepadKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b9, Size: 0x1] 0x78d3572600
	Key[] EscapeKeys;//[Offset: 0x6c0, Size: 0x10] 0x78cdd5bdc0
	delegate OnKeySelected;//[Offset: 0x6d0, Size: 0x10] 0x78d3572700
	delegate OnIsSelectingKeyChanged;//[Offset: 0x6e0, Size: 0x10] 0x78d3572780
	void SetTextBlockVisibility(const enum InVisibility);// 0xbb02e9c 0x78d3d2e5c0
	void SetSelectedKey(out const InputChord InSelectedKey);// 0xbb0359c 0x78d3d2e6a0
	void SetNoKeySpecifiedText(FText InNoKeySpecifiedText);// 0xbb030dc 0x78d3d2adc0
	void SetKeySelectionText(FText InKeySelectionText);// 0xbb0333c 0x78d3d2aea0
	void SetEscapeKeys(out const Key[] InKeys);// 0xbb02cb8 0x78d3d2af80
	void SetAllowModifierKeys(bool bInAllowModifierKeys);// 0xbb0302c 0x78d3d2b060
	void SetAllowGamepadKeys(bool bInAllowGamepadKeys);// 0xbb02f7c 0x78d3d2b140
	void OnKeySelected__DelegateSignature(InputChord SelectedKey);// 0xaa7cd18 0x78d3d2b220
	void OnIsSelectingKeyChanged__DelegateSignature();// 0xaa7cd18 0x78d3d2b300
	bool GetIsSelectingKey();// 0xbb02f44 0x78d3d2b3e0

--------------------------------
Class: Int32Binding.PropertyBinding.Object
	int GetValue();// 0xbb03b7c 0x78d725a5e0

--------------------------------
Class: InvalidationBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bCanCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78d7281e00
	bool CacheRelativeTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x78d7281e80
	void SetCanCache(bool CanCache);// 0xbb03dcc 0x78d725a340
	void InvalidateCache();// 0xbb03eb4 0x78d725a420
	bool GetCanCache();// 0xbb03e7c 0x78d725a500

--------------------------------
Class: UserListEntry.Interface.Object
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0xaa7cd18 0x78d725a0a0
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0xaa7cd18 0x78d725a180
	void BP_OnEntryReleased();// 0xaa7cd18 0x78d725a260

--------------------------------
Class: UserListEntryLibrary.BlueprintFunctionLibrary.Object
	static bool IsListItemSelected(interface classNone UserListEntry);// 0xbb04830 0x78d7259e00
	static bool IsListItemExpanded(interface classNone UserListEntry);// 0xbb04764 0x78d7259ee0
	static ListViewBase* GetOwningListView(interface classNone UserListEntry);// 0xbb0469c 0x78d7259fc0

--------------------------------
Class: UserObjectListEntry.UserListEntry.Interface.Object
	void OnListItemObjectSet(Object* ListItemObject);// 0xaa7cd18 0x78d7259d20

--------------------------------
Class: UserObjectListEntryLibrary.BlueprintFunctionLibrary.Object
	static Object* GetListItemObject(interface classNone UserObjectListEntry);// 0xbb05020 0x78d7259c40

--------------------------------
Class: ListViewDesignerPreviewItem.Object

--------------------------------
Class: MenuAnchor.ContentWidget.PanelWidget.Widget.Visual.Object
	class UserWidget* MenuClass;//[Offset: 0x120, Size: 0x8] 0x78cdd5bbe0
	delegate OnGetMenuContentEvent;//[Offset: 0x128, Size: 0x10] 0x78d3574700
	delegate OnGetUserMenuContentEvent;//[Offset: 0x138, Size: 0x10] 0x78d3574780
	byte Placement;//[Offset: 0x148, Size: 0x1] 0x78d3574800
	bool bFitInWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1] 0x78d3574880
	bool ShouldDeferPaintingAfterWindowContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1] 0x78d3574900
	bool UseApplicationMenuStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b, Size: 0x1] 0x78d3574980
	delegate OnMenuOpenChanged;//[Offset: 0x150, Size: 0x10] 0x78d3574a00
	void ToggleOpen(bool bFocusOnOpen);// 0xbb08d3c 0x78d3d2ff20
	bool ShouldOpenDueToClick();// 0xbb08c08 0x78d3d2cb80
	void SetPlacement(byte InPlacement);// 0xbb08e9c 0x78d3d2cc60
	void Open(bool bFocusMenu);// 0xbb08c8c 0x78d3d2cd40
	bool IsOpen();// 0xbb08c40 0x78d3d2ce20
	bool HasOpenSubMenus();// 0xbb08b9c 0x78d3d2cf00
	UserWidget* GetUserWidget__DelegateSignature();// 0xaa7cd18 0x78d3d2cfe0
	Vector2D GetMenuPosition();// 0xbb08bd4 0x78d3d2d0c0
	void FitInWindow(bool bFit);// 0xbb08dec 0x78d3d2d1a0
	void Close();// 0xbb08c78 0x78d3d2d280

--------------------------------
Class: MouseCursorBinding.PropertyBinding.Object
	byte GetValue();// 0xbb093e4 0x78d7259b60

--------------------------------
Class: MovieScene2DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene2DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieScene2DTransformMask TransformMask;//[Offset: 0xe8, Size: 0x4] 0x78d7281580
	MovieSceneFloatChannel Translation;//[Offset: 0xf0, Size: 0xa0] 0x78d7281600
	MovieSceneFloatChannel Rotation;//[Offset: 0x230, Size: 0xa0] 0x78d7281680
	MovieSceneFloatChannel Scale;//[Offset: 0x2d0, Size: 0xa0] 0x78d7281700
	MovieSceneFloatChannel Shear;//[Offset: 0x410, Size: 0xa0] 0x78d7281780

--------------------------------
Class: MovieScene2DTransformMask
	uint32 Mask;//[Offset: 0x0, Size: 0x4] 0x78dbe8e600

--------------------------------
Class: MovieScene2DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneMarginSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TopCurve;//[Offset: 0xe0, Size: 0xa0] 0x78d7281380
	MovieSceneFloatChannel LeftCurve;//[Offset: 0x180, Size: 0xa0] 0x78d7281400
	MovieSceneFloatChannel RightCurve;//[Offset: 0x220, Size: 0xa0] 0x78d7281480
	MovieSceneFloatChannel BottomCurve;//[Offset: 0x2c0, Size: 0xa0] 0x78d7281500

--------------------------------
Class: MovieSceneMarginTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneWidgetMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	FName[] BrushPropertyNamePath;//[Offset: 0x90, Size: 0x10] 0x78d7270600
	FName TrackName;//[Offset: 0xa0, Size: 0x8] 0x78d7281300

--------------------------------
Class: MultiLineEditableText.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18] 0x78d3575700
	FText HintText;//[Offset: 0x140, Size: 0x18] 0x78d3575780
	delegate HintTextDelegate;//[Offset: 0x158, Size: 0x10] 0x78d3575800
	TextBlockStyle WidgetStyle;//[Offset: 0x168, Size: 0x270] 0x78d3575880
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1] 0x78d3575900
	SlateFontInfo Font;//[Offset: 0x3e0, Size: 0x58] 0x78d3575980
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1] 0x78d3575a00
	bool ClearTextSelectionOnFocusLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1] 0x78d3575a80
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 0x1] 0x78d3575b00
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 0x1] 0x78d3575b80
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 0x1] 0x78d3575c00
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x43d, Size: 0x1] 0x78d3575c80
	enum VirtualKeyboardDismissAction;//[Offset: 0x43e, Size: 0x1] 0x78cdd5baa0
	delegate OnTextChanged;//[Offset: 0x440, Size: 0x10] 0x78d3575d80
	delegate OnTextCommitted;//[Offset: 0x450, Size: 0x10] 0x78d3575e00
	void SetWidgetStyle(out const TextBlockStyle InWidgetStyle);// 0xbb0a2dc 0x78d3d2f660
	void SetText(FText InText);// 0xbb0a794 0x78d3d2f740
	void SetIsReadOnly(bool bReadOnly);// 0xbb0a3b0 0x78d3d2f820
	void SetHintText(FText InHintText);// 0xbb0a460 0x78d3d2f900
	void OnMultiLineEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0xaa7cd18 0x78d3d2f9e0
	void OnMultiLineEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0xaa7cd18 0x78d3d2fac0
	FText GetText();// 0xbb0a9f4 0x78d3d2fba0
	FText GetHintText();// 0xbb0a6c0 0x78d3d2fc80

--------------------------------
Class: MultiLineEditableTextBox.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18] 0x78d3576b00
	FText HintText;//[Offset: 0x140, Size: 0x18] 0x78d3576b80
	delegate HintTextDelegate;//[Offset: 0x158, Size: 0x10] 0x78d3576c00
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x168, Size: 0x7f8] 0x78d3576c80
	TextBlockStyle TextStyle;//[Offset: 0x960, Size: 0x270] 0x78d3576d00
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd0, Size: 0x1] 0x78d3576d80
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd1, Size: 0x1] 0x78d3576e00
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0xbd2, Size: 0x1] 0x78d3576e80
	enum VirtualKeyboardDismissAction;//[Offset: 0xbd3, Size: 0x1] 0x78cdd5ba00
	SlateWidgetStyleAsset* Style;//[Offset: 0xbd8, Size: 0x8] 0x78d3576f80
	SlateFontInfo Font;//[Offset: 0xbe0, Size: 0x58] 0x78d3577000
	LinearColor ForegroundColor;//[Offset: 0xc38, Size: 0x10] 0x78d3577080
	LinearColor BackgroundColor;//[Offset: 0xc48, Size: 0x10] 0x78d3577100
	LinearColor ReadOnlyForegroundColor;//[Offset: 0xc58, Size: 0x10] 0x78d3577180
	delegate OnTextChanged;//[Offset: 0xc68, Size: 0x10] 0x78d3577200
	delegate OnTextCommitted;//[Offset: 0xc78, Size: 0x10] 0x78d3577280
	void SetTextStyle(out const TextBlockStyle InTextStyle);// 0xbb0b010 0x78d3d2ee80
	void SetText(FText InText);// 0xbb0b728 0x78d3d2ef60
	void SetIsReadOnly(bool bReadOnly);// 0xbb0b0e4 0x78d3d2f040
	void SetHintText(FText InHintText);// 0xbb0b3f4 0x78d3d2f120
	void SetError(FText InError);// 0xbb0b194 0x78d3d2f200
	void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0xaa7cd18 0x78d3d2f2e0
	void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0xaa7cd18 0x78d3d2f3c0
	FText GetText();// 0xbb0b988 0x78d3d2f4a0
	FText GetHintText();// 0xbb0b654 0x78d3d2f580

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: NamedSlotInterface.Interface.Object

--------------------------------
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bRetainRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78d7282180
	bool RenderOnInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x78d7282200
	bool RenderOnPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1] 0x78d7282280
	int Phase;//[Offset: 0x11c, Size: 0x4] 0x78d7282300
	int PhaseCount;//[Offset: 0x120, Size: 0x4] 0x78d7282380
	MaterialInterface* EffectMaterial;//[Offset: 0x128, Size: 0x8] 0x78d7282400
	FName TextureParameter;//[Offset: 0x130, Size: 0x8] 0x78d7282480
	void SetTextureParameter(FName TextureParameter);// 0xbb0e62c 0x78d725c9c0
	void SetRetainRendering(bool bInRetainRendering);// 0xbb0e57c 0x78d72590e0
	void SetRenderingPhase(int RenderPhase, int TotalPhases);// 0xbb0e7c4 0x78d72591c0
	void SetEffectMaterial(MaterialInterface* EffectMaterial);// 0xbb0e6d4 0x78d72592a0
	void RequestRender();// 0xbb0e7b0 0x78d7259380
	MaterialInstanceDynamic* GetEffectMaterial();// 0xbb0e77c 0x78d7259460

--------------------------------
Class: SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object
	bool PadLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78d7283e80
	bool PadRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x78d7283f00
	bool PadTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1] 0x78d7283f80
	bool PadBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1] 0x78d7284000
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);// 0xbb12d4c 0x78d725c8e0

--------------------------------
Class: SafeZoneSlot.PanelSlot.Visual.Object
	bool bIsTitleSafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78d7283c00
	Margin SafeAreaScale;//[Offset: 0x3c, Size: 0x10] 0x78d7283c80
	byte HAlign;//[Offset: 0x4c, Size: 0x1] 0x78d7283d00
	byte VAlign;//[Offset: 0x4d, Size: 0x1] 0x78d7283d80
	Margin Padding;//[Offset: 0x50, Size: 0x10] 0x78d7283e00

--------------------------------
Class: ScaleBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78d7283900
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78d7283980
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78d7283a00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbb139c8 0x78d725c640
	void SetPadding(Margin InPadding);// 0xbb13b18 0x78d725c720
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbb13a70 0x78d725c800

--------------------------------
Class: ScrollBar.Widget.Visual.Object
	ScrollBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x4d0] 0x78d7283480
	SlateWidgetStyleAsset* Style;//[Offset: 0x5d8, Size: 0x8] 0x78d7283500
	bool bAlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1] 0x78d7283580
	bool bAlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 0x1] 0x78d7283600
	byte Orientation;//[Offset: 0x5e2, Size: 0x1] 0x78d7283680
	Vector2D Thickness;//[Offset: 0x5e4, Size: 0x8] 0x78d7283700
	Margin Padding;//[Offset: 0x5ec, Size: 0x10] 0x78d7283780
	void SetState(float InOffsetFraction, float InThumbSizeFraction);// 0xbb13ff4 0x78d725c560

--------------------------------
Class: ScrollBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78d7285280
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78d7283200
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78d7283280
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbb1548c 0x78d725c2c0
	void SetPadding(Margin InPadding);// 0xbb155dc 0x78d725c3a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbb15534 0x78d725c480

--------------------------------
Class: SizeBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78d7284380
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x78d7284400
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x78d7284480
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbb16924 0x78d725b220
	void SetPadding(Margin InPadding);// 0xbb16a74 0x78d725b300
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbb169cc 0x78d725b3e0

--------------------------------
Class: SlateBlueprintLibrary.BlueprintFunctionLibrary.Object
	static Vector2D TransformVectorLocalToAbsolute(out const Geometry Geometry, Vector2D LocalVector);// 0xbb17be8 0x78d725dde0
	static Vector2D TransformVectorAbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteVector);// 0xbb17ce0 0x78d725dec0
	static float TransformScalarLocalToAbsolute(out const Geometry Geometry, float LocalScalar);// 0xbb17dd8 0x78d725dfa0
	static float TransformScalarAbsoluteToLocal(out const Geometry Geometry, float AbsoluteScalar);// 0xbb17ed4 0x78d725e080
	static void ScreenToWidgetLocal(Object* WorldContextObject, out const Geometry Geometry, Vector2D ScreenPosition, out Vector2D LocalCoordinate, bool bIncludeWindowPosition);// 0xbb171fc 0x78d725e160
	static void ScreenToWidgetAbsolute(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D AbsoluteCoordinate, bool bIncludeWindowPosition);// 0xbb1707c 0x78d725e240
	static void ScreenToViewport(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D ViewportPosition);// 0xbb16f50 0x78d725e320
	static void LocalToViewport(Object* WorldContextObject, out const Geometry Geometry, Vector2D LocalCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0xbb17548 0x78d725e400
	static Vector2D LocalToAbsolute(out const Geometry Geometry, Vector2D LocalCoordinate);// 0xbb181f8 0x78d725e4e0
	static bool IsUnderLocation(out const Geometry Geometry, out const Vector2D AbsoluteCoordinate);// 0xbb183e8 0x78d725e5c0
	static Vector2D GetLocalTopLeft(out const Geometry Geometry);// 0xbb18140 0x78d725e6a0
	static Vector2D GetLocalSize(out const Geometry Geometry);// 0xbb18088 0x78d725adc0
	static Vector2D GetAbsoluteSize(out const Geometry Geometry);// 0xbb17fd0 0x78d725aea0
	static bool EqualEqual_SlateBrush(out const SlateBrush A, out const SlateBrush B);// 0xbb17714 0x78d725af80
	static void AbsoluteToViewport(Object* WorldContextObject, Vector2D AbsoluteDesktopCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0xbb173c8 0x78d725b060
	static Vector2D AbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteCoordinate);// 0xbb182f0 0x78d725b140

--------------------------------
Class: SlateVectorArtData.Object
	SlateMeshVertex[] VertexData;//[Offset: 0x28, Size: 0x10] 0x78d72704c0
	uint32[] IndexData;//[Offset: 0x38, Size: 0x10] 0x78d7270560
	MaterialInterface* Material;//[Offset: 0x48, Size: 0x8] 0x78d7286a80
	Vector2D ExtentMin;//[Offset: 0x50, Size: 0x8] 0x78d7286b00
	Vector2D ExtentMax;//[Offset: 0x58, Size: 0x8] 0x78d7286b80

--------------------------------
Class: SlateMeshVertex
	Vector2D Position;//[Offset: 0x0, Size: 0x8] 0x78dbe8dc80
	Color Color;//[Offset: 0x8, Size: 0x4] 0x78dbe8dd00
	Vector2D UV0;//[Offset: 0xc, Size: 0x8] 0x78dbe8dd80
	Vector2D UV1;//[Offset: 0x14, Size: 0x8] 0x78dbe8de00
	Vector2D UV2;//[Offset: 0x1c, Size: 0x8] 0x78dbe8de80
	Vector2D UV3;//[Offset: 0x24, Size: 0x8] 0x78dbe8df00
	Vector2D UV4;//[Offset: 0x2c, Size: 0x8] 0x78dbe8df80
	Vector2D UV5;//[Offset: 0x34, Size: 0x8] 0x78dbe8e000

--------------------------------
Class: Spacer.Widget.Visual.Object
	Vector2D Size;//[Offset: 0x108, Size: 0x8] 0x78d7287b00
	void SetSize(Vector2D InSize);// 0xbb1bcc0 0x78d725d440

--------------------------------
Class: SpinBox.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4] 0x78d3578f00
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10] 0x78d3578f80
	SpinBoxStyle WidgetStyle;//[Offset: 0x120, Size: 0x2e8] 0x78d3579380
	SlateWidgetStyleAsset* Style;//[Offset: 0x408, Size: 0x8] 0x78d3579400
	int MinFractionalDigits;//[Offset: 0x410, Size: 0x4] 0x78d3579480
	int MaxFractionalDigits;//[Offset: 0x414, Size: 0x4] 0x78d3577400
	bool bAlwaysUsesDeltaSnap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1] 0x78d3577480
	float Delta;//[Offset: 0x41c, Size: 0x4] 0x78d3577500
	float SliderExponent;//[Offset: 0x420, Size: 0x4] 0x78d3577580
	SlateFontInfo Font;//[Offset: 0x428, Size: 0x58] 0x78d3577600
	byte Justification;//[Offset: 0x480, Size: 0x1] 0x78d3577680
	float MinDesiredWidth;//[Offset: 0x484, Size: 0x4] 0x78d3577700
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1] 0x78d3577780
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 0x1] 0x78d3577800
	SlateColor ForegroundColor;//[Offset: 0x490, Size: 0x28] 0x78d3577880
	delegate OnValueChanged;//[Offset: 0x4b8, Size: 0x10] 0x78d3577900
	delegate OnValueCommitted;//[Offset: 0x4c8, Size: 0x10] 0x78d3577980
	delegate OnBeginSliderMovement;//[Offset: 0x4d8, Size: 0x10] 0x78d3577a00
	delegate OnEndSliderMovement;//[Offset: 0x4e8, Size: 0x10] 0x78d3577a80
	bool bOverride_MinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f8, Size: 0x1] 0x78d3577b00
	bool bOverride_MaxValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4f8, Size: 0x1] 0x78d3577b80
	bool bOverride_MinSliderValue;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4f8, Size: 0x1] 0x78d3577c00
	bool bOverride_MaxSliderValue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4f8, Size: 0x1] 0x78d3577c80
	float MinValue;//[Offset: 0x4fc, Size: 0x4] 0x78d3577d00
	float MaxValue;//[Offset: 0x500, Size: 0x4] 0x78d3577d80
	float MinSliderValue;//[Offset: 0x504, Size: 0x4] 0x78d3577e00
	float MaxSliderValue;//[Offset: 0x508, Size: 0x4] 0x78d3577e80
	void SetValue(float NewValue);// 0xbb1ca64 0x78cd9a0860
	void SetMinValue(float NewValue);// 0xbb1c60c 0x78cd9a0940
	void SetMinSliderValue(float NewValue);// 0xbb1c42c 0x78cd9a0a20
	void SetMinFractionalDigits(int NewValue);// 0xbb1c988 0x78cd9a0b00
	void SetMaxValue(float NewValue);// 0xbb1c51c 0x78cd9a0be0
	void SetMaxSliderValue(float NewValue);// 0xbb1c33c 0x78cd9a0cc0
	void SetMaxFractionalDigits(int NewValue);// 0xbb1c8ac 0x78cd9a0da0
	void SetForegroundColor(SlateColor InForegroundColor);// 0xbb1c0b4 0x78cd9a0e80
	void SetDelta(float NewValue);// 0xbb1c6e8 0x78cd9a0f60
	void SetAlwaysUsesDeltaSnap(bool bNewValue);// 0xbb1c7c4 0x78cd9a1040
	void OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, byte CommitMethod);// 0xaa7cd18 0x78cd9a1120
	void OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);// 0xaa7cd18 0x78cd9a1200
	void OnSpinBoxBeginSliderMovement__DelegateSignature();// 0xaa7cd18 0x78cd9a12e0
	float GetValue();// 0xbb1cb0c 0x78cd9a13c0
	float GetMinValue();// 0xbb1c6b4 0x78cd9a14a0
	float GetMinSliderValue();// 0xbb1c4d4 0x78cd9a1580
	int GetMinFractionalDigits();// 0xbb1ca30 0x78cd9a1660
	float GetMaxValue();// 0xbb1c5c4 0x78cd9a1740
	float GetMaxSliderValue();// 0xbb1c3e4 0x78cd9a1820
	int GetMaxFractionalDigits();// 0xbb1c954 0x78cd9a1900
	float GetDelta();// 0xbb1c790 0x78cd9a19e0
	bool GetAlwaysUsesDeltaSnap();// 0xbb1c874 0x78cd9a1ac0
	void ClearMinValue();// 0xbb1c5f8 0x78cd9a1ba0
	void ClearMinSliderValue();// 0xbb1c418 0x78cd9a1c80
	void ClearMaxValue();// 0xbb1c508 0x78d3d2e780
	void ClearMaxSliderValue();// 0xbb1c328 0x78d3d2e860

--------------------------------
Class: TextBinding.PropertyBinding.Object
	FText GetTextValue();// 0xbb1d4ec 0x78d725d280
	FString GetStringValue();// 0xbb1d418 0x78d725d360

--------------------------------
Class: Throbber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x108, Size: 0x4] 0x78d7287500
	bool bAnimateHorizontally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x78d7287580
	bool bAnimateVertically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1] 0x78d7287600
	bool bAnimateOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1] 0x78d7287680
	SlateBrushAsset* PieceImage;//[Offset: 0x110, Size: 0x8] 0x78d7287700
	SlateBrush Image;//[Offset: 0x118, Size: 0x88] 0x78d7287780
	void SetNumberOfPieces(int InNumberOfPieces);// 0xbb1f708 0x78d725cf00
	void SetAnimateVertically(bool bInAnimateVertically);// 0xbb1f5a8 0x78d725cfe0
	void SetAnimateOpacity(bool bInAnimateOpacity);// 0xbb1f4f8 0x78d725d0c0
	void SetAnimateHorizontally(bool bInAnimateHorizontally);// 0xbb1f658 0x78d725d1a0

--------------------------------
Class: TileView.ListView.ListViewBase.Widget.Visual.Object
	float EntryHeight;//[Offset: 0x368, Size: 0x4] 0x78d7289200
	float EntryWidth;//[Offset: 0x36c, Size: 0x4] 0x78d7289280
	enum TileAlignment;//[Offset: 0x370, Size: 0x1] 0x78d7270420
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 0x1] 0x78d7289380
	void SetEntryWidth(float NewWidth);// 0xbb1fb34 0x78d725cb80
	void SetEntryHeight(float NewHeight);// 0xbb1fbdc 0x78d725cc60
	float GetEntryWidth();// 0xbb1fafc 0x78d725cd40
	float GetEntryHeight();// 0xbb1fb18 0x78d725ce20

--------------------------------
Class: TreeView.ListView.ListViewBase.Widget.Visual.Object
	delegate BP_OnGetItemChildren;//[Offset: 0x378, Size: 0x10] 0x78d7289000
	delegate BP_OnItemExpansionChanged;//[Offset: 0x388, Size: 0x10] 0x78d7289080
	void SetItemExpansion(Object* Item, bool bExpandItem);// 0xbb21aa8 0x78d725fe40
	void ExpandAll();// 0xbb21a94 0x78d725ff20
	void CollapseAll();// 0xbb21a80 0x78d725caa0

--------------------------------
Class: UniformGridPanel.PanelWidget.Widget.Visual.Object
	Margin SlotPadding;//[Offset: 0x11c, Size: 0x10] 0x78d7288800
	float MinDesiredSlotWidth;//[Offset: 0x12c, Size: 0x4] 0x78d7288880
	float MinDesiredSlotHeight;//[Offset: 0x130, Size: 0x4] 0x78d7288900
	void SetSlotPadding(Margin InSlotPadding);// 0xbb229bc 0x78d725f900
	void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);// 0xbb22914 0x78d725f9e0
	void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);// 0xbb2286c 0x78d725fac0
	UniformGridSlot* AddChildToUniformGrid(Widget* Content, int InRow, int InColumn);// 0xbb22728 0x78d725fba0

--------------------------------
Class: UniformGridSlot.PanelSlot.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x38, Size: 0x1] 0x78d728a500
	byte VerticalAlignment;//[Offset: 0x39, Size: 0x1] 0x78d7288480
	int Row;//[Offset: 0x3c, Size: 0x4] 0x78d7288500
	int Column;//[Offset: 0x40, Size: 0x4] 0x78d7288580
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbb22ee4 0x78d725f580
	void SetRow(int InRow);// 0xbb230dc 0x78d725f660
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbb22f8c 0x78d725f740
	void SetColumn(int InColumn);// 0xbb23034 0x78d725f820

--------------------------------
Class: Viewport.ContentWidget.PanelWidget.Widget.Visual.Object
	LinearColor BackgroundColor;//[Offset: 0x11c, Size: 0x10] 0x78d7289c80
	Actor* Spawn(class Actor ActorClass);// 0xbb2f410 0x78d725ebe0
	void SetViewRotation(Rotator Rotation);// 0xbb2f4c0 0x78d725ecc0
	void SetViewLocation(Vector Location);// 0xbb2f5a0 0x78d725eda0
	Rotator GetViewRotation();// 0xbb2f568 0x78d725ee80
	World* GetViewportWorld();// 0xbb2f680 0x78d725ef60
	Vector GetViewLocation();// 0xbb2f648 0x78d725f040

--------------------------------
Class: VisibilityBinding.PropertyBinding.Object
	enum GetValue();// 0xbb2fa50 0x78d725eb00

--------------------------------
Class: WidgetAnimationDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintWidgetAnimationDelegateBinding[] WidgetAnimationDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78d7270100

--------------------------------
Class: BlueprintWidgetAnimationDelegateBinding
	enum Action;//[Offset: 0x0, Size: 0x1] 0x78dbe58da0
	FName AnimationToBind;//[Offset: 0x4, Size: 0x8] 0x78dbe8f500
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8] 0x78dbe8f580
	FName UserTag;//[Offset: 0x14, Size: 0x8] 0x78dbe8f600

--------------------------------
Class: WidgetAnimationPlayCallbackProxy.Object
	delegate finished;//[Offset: 0x28, Size: 0x10] 0x78d728ab80
	static WidgetAnimationPlayCallbackProxy* CreatePlayAnimationTimeRangeProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0xbb34dc8 0x78d7291820
	static WidgetAnimationPlayCallbackProxy* CreatePlayAnimationProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0xbb35080 0x78d7291900

--------------------------------
Class: WidgetBinding.PropertyBinding.Object
	Widget* GetValue();// 0xbb356b4 0x78d7291740

--------------------------------
Class: WidgetBlueprintLibrary.BlueprintFunctionLibrary.Object
	static EventReply UnlockMouse(out EventReply Reply);// 0xbb39e48 0x78d3d29fc0
	static EventReply Unhandled();// 0xbb3a408 0x78d3d2a0a0
	static void SetWindowTitleBarState(Widget* TitleBarContent, enum Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible);// 0xbb35f08 0x78d3d2a180
	static void SetWindowTitleBarOnCloseClickedDelegate(delegate Delegate);// 0xbb35e4c 0x78d3d2a260
	static void SetWindowTitleBarCloseButtonActive(bool bActive);// 0xbb35dac 0x78d3d2a340
	static EventReply SetUserFocus(out EventReply Reply, Widget* FocusWidget, bool bInAllUsers);// 0xbb39c64 0x78d3d2a420
	static EventReply SetMousePosition(out EventReply Reply, Vector2D NewMousePosition);// 0xbb395ac 0x78d3d2a500
	static void SetInputMode_UIOnlyEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode);// 0xbb3b3e0 0x78d3d2a5e0
	static void SetInputMode_UIOnly(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport);// 0xbb3b50c 0x78d3d2a6c0
	static void SetInputMode_GameOnly(PlayerController* PlayerController);// 0xbb3b044 0x78d3d2a7a0
	static void SetInputMode_GameAndUIEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode, bool bHideCursorDuringCapture);// 0xbb3b0dc 0x78d3d2a880
	static void SetInputMode_GameAndUI(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);// 0xbb3b25c 0x78d3d2a960
	static bool SetHardwareCursor(Object* WorldContextObject, byte CursorShape, FName CursorName, Vector2D HotSpot);// 0xbb360d8 0x78d3d2aa40
	static void SetFocusToGameViewport();// 0xbb3b030 0x78d3d2ab20
	static void SetColorVisionDeficiencyType(enum Type, float Severity, bool CorrectDeficiency, bool ShowCorrectionWithDeficiency);// 0xbb36260 0x78d3d2ac00
	static void SetBrushResourceToTexture(out SlateBrush Brush, Texture2D* Texture);// 0xbb3793c 0x78d3d2ace0
	static void SetBrushResourceToMaterial(out SlateBrush Brush, MaterialInterface* Material);// 0xbb37658 0x78d3d27400
	static void RestorePreviousWindowTitleBarState();// 0xbb35ef4 0x78d3d274e0
	static EventReply ReleaseMouseCapture(out EventReply Reply);// 0xbb3a128 0x78d3d275c0
	static EventReply ReleaseJoystickCapture(out EventReply Reply, bool bInAllJoysticks);// 0xbb39740 0x78d3d276a0
	void OnGameWindowCloseButtonClickedDelegate__DelegateSignature();// 0xaa7cd18 0x78d3d27780
	static SlateBrush NoResourceBrush();// 0xbb3745c 0x78d3d27860
	static SlateBrush MakeBrushFromTexture(Texture2D* Texture, int Width, int Height);// 0xbb386b8 0x78d3d27940
	static SlateBrush MakeBrushFromMaterial(MaterialInterface* Material, int Width, int Height);// 0xbb383dc 0x78d3d27a20
	static SlateBrush MakeBrushFromAsset(SlateBrushAsset* BrushAsset);// 0xbb38994 0x78d3d27b00
	static EventReply LockMouse(out EventReply Reply, Widget* CapturingWidget);// 0xbb39f90 0x78d3d27be0
	static bool IsDragDropping();// 0xbb38c24 0x78d3d27cc0
	static EventReply Handled();// 0xbb3a48c 0x78d3d27da0
	static void GetSafeZonePadding(Object* WorldContextObject, out Vector4 SafePadding, out Vector2D SafePaddingScale, out Vector4 SpillOverPadding);// 0xbb363e8 0x78d3d27e80
	static KeyEvent GetKeyEventFromAnalogInputEvent(out const AnalogInputEvent Event);// 0xbb36924 0x78d3d27f60
	static InputEvent GetInputEventFromPointerEvent(out const PointerEvent Event);// 0xbb36664 0x78d3d28040
	static InputEvent GetInputEventFromNavigationEvent(out const NavigationEvent Event);// 0xbb36580 0x78d3d28120
	static InputEvent GetInputEventFromKeyEvent(out const KeyEvent Event);// 0xbb36c58 0x78d3d28200
	static InputEvent GetInputEventFromCharacterEvent(out const CharacterEvent Event);// 0xbb36840 0x78d3d282e0
	static MaterialInstanceDynamic* GetDynamicMaterial(out SlateBrush Brush);// 0xbb371c8 0x78d3d283c0
	static DragDropOperation* GetDragDroppingContent();// 0xbb38bf0 0x78d3d284a0
	static Texture2D* GetBrushResourceAsTexture2D(out const SlateBrush Brush);// 0xbb37eb4 0x78d3d28580
	static MaterialInterface* GetBrushResourceAsMaterial(out const SlateBrush Brush);// 0xbb37c20 0x78d3d28660
	static Object* GetBrushResource(out const SlateBrush Brush);// 0xbb38148 0x78d3d28740
	static void GetAllWidgetsWithInterface(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class Interface Interface, bool TopLevelOnly);// 0xbb36e14 0x78d3d28820
	static void GetAllWidgetsOfClass(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class UserWidget WidgetClass, bool TopLevelOnly);// 0xbb36fe4 0x78d3d28900
	static EventReply EndDragDrop(out EventReply Reply);// 0xbb38c5c 0x78d3d289e0
	static void DrawTextFormatted(out PaintContext Context, out const FText Text, Vector2D Position, Font* Font, int FontSize, FName FontTypeFace, LinearColor Tint);// 0xbb3a510 0x78d3d28ac0
	static void DrawText(out PaintContext Context, FString inString, Vector2D Position, LinearColor Tint);// 0xbb3a868 0x78d3d28ba0
	static void DrawLines(out PaintContext Context, out const Vector2D[] Points, LinearColor Tint, bool bAntiAlias, float Thickness);// 0xbb3aa24 0x78d3d28c80
	static void DrawLine(out PaintContext Context, Vector2D PositionA, Vector2D PositionB, LinearColor Tint, bool bAntiAlias, float Thickness);// 0xbb3ac54 0x78d3d28d60
	static void DrawBox(out PaintContext Context, Vector2D Position, Vector2D Size, SlateBrushAsset* Brush, LinearColor Tint);// 0xbb3ae68 0x78d3d28e40
	static void DismissAllMenus();// 0xbb371b4 0x78d3d28f20
	static EventReply DetectDragIfPressed(out const PointerEvent PointerEvent, Widget* WidgetDetectingDrag, Key DragKey);// 0xbb38da4 0x78d3d29000
	static EventReply DetectDrag(out EventReply Reply, Widget* WidgetDetectingDrag, Key DragKey);// 0xbb3920c 0x78d3d25720
	static DragDropOperation* CreateDragDropOperation(class DragDropOperation OperationClass);// 0xbb3b640 0x78d3d25800
	static UserWidget* Create(Object* WorldContextObject, class UserWidget WidgetType, PlayerController* OwningPlayer);// 0xbb3b6e8 0x78d3d258e0
	static EventReply ClearUserFocus(out EventReply Reply, bool bInAllUsers);// 0xbb398e0 0x78d3d259c0
	static EventReply CaptureMouse(out EventReply Reply, Widget* CapturingWidget);// 0xbb3a270 0x78d3d25aa0
	static EventReply CaptureJoystick(out EventReply Reply, Widget* CapturingWidget, bool bInAllJoysticks);// 0xbb39a80 0x78d3d25b80
	static void CancelDragDrop();// 0xbb38bdc 0x78d3d25c60

--------------------------------
Class: NavigationEvent.InputEvent

--------------------------------
Class: WidgetInteractionComponent.SceneComponent.ActorComponent.Object
	delegate OnHoveredWidgetChanged;//[Offset: 0x208, Size: 0x10] 0x78d728d000
	int VirtualUserIndex;//[Offset: 0x228, Size: 0x4] 0x78d728d080
	int PointerIndex;//[Offset: 0x22c, Size: 0x4] 0x78d728d100
	byte TraceChannel;//[Offset: 0x230, Size: 0x1] 0x78d728d180
	float InteractionDistance;//[Offset: 0x234, Size: 0x4] 0x78d728d200
	enum InteractionSource;//[Offset: 0x238, Size: 0x1] 0x78d7272540
	bool bEnableHitTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1] 0x78d728d300
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a, Size: 0x1] 0x78d728d380
	float DebugSphereLineThickness;//[Offset: 0x23c, Size: 0x4] 0x78d728d400
	float DebugLineThickness;//[Offset: 0x240, Size: 0x4] 0x78d728d480
	LinearColor DebugColor;//[Offset: 0x244, Size: 0x10] 0x78d728d500
	HitResult CustomHitResult;//[Offset: 0x2d0, Size: 0x8c] 0x78d728d580
	Vector2D LocalHitLocation;//[Offset: 0x35c, Size: 0x8] 0x78d728d600
	Vector2D LastLocalHitLocation;//[Offset: 0x364, Size: 0x8] 0x78d728d680
	WidgetComponent* HoveredWidgetComponent;//[Offset: 0x370, Size: 0x8] 0x78d728b600
	HitResult LastHitResult;//[Offset: 0x378, Size: 0x8c] 0x78d728b680
	bool bIsHoveredWidgetInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 0x1] 0x78d728b700
	bool bIsHoveredWidgetFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 0x1] 0x78d728b780
	bool bIsHoveredWidgetHitTestVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406, Size: 0x1] 0x78d728b800
	void SetFocus(Widget* FocusWidget);// 0xbb40910 0x78d7290a20
	void SetCustomHitResult(out const HitResult HitResult);// 0xbb409b8 0x78d7290b00
	bool SendKeyChar(FString Characters, bool bRepeat);// 0xbb40ca8 0x78d7290be0
	void ScrollWheel(float ScrollDelta);// 0xbb40bf8 0x78d7290cc0
	void ReleasePointerKey(Key Key);// 0xbb4161c 0x78d7290da0
	bool ReleaseKey(Key Key);// 0xbb410e8 0x78d7290e80
	void PressPointerKey(Key Key);// 0xbb41884 0x78d7290f60
	bool PressKey(Key Key, bool bRepeat);// 0xbb4135c 0x78d7291040
	bool PressAndReleaseKey(Key Key);// 0xbb40e74 0x78d7291120
	bool IsOverInteractableWidget();// 0xbb40b8c 0x78d7291200
	bool IsOverHitTestVisibleWidget();// 0xbb40b1c 0x78d72912e0
	bool IsOverFocusableWidget();// 0xbb40b54 0x78d72913c0
	HitResult GetLastHitResult();// 0xbb40abc 0x78d72914a0
	WidgetComponent* GetHoveredWidgetComponent();// 0xbb40bc4 0x78d7291580
	Vector2D Get2DHitLocation();// 0xbb40a88 0x78d7291660

--------------------------------
Class: WidgetLayoutLibrary.BlueprintFunctionLibrary.Object
	static WrapBoxSlot* SlotAsWrapBoxSlot(Widget* Widget);// 0xbb42324 0x78d7292fc0
	static WidgetSwitcherSlot* SlotAsWidgetSwitcherSlot(Widget* Widget);// 0xbb4227c 0x78d72930a0
	static VerticalBoxSlot* SlotAsVerticalBoxSlot(Widget* Widget);// 0xbb4266c 0x78d7293180
	static UniformGridSlot* SlotAsUniformGridSlot(Widget* Widget);// 0xbb42714 0x78d7293260
	static SizeBoxSlot* SlotAsSizeBoxSlot(Widget* Widget);// 0xbb423cc 0x78d7293340
	static ScrollBoxSlot* SlotAsScrollBoxSlot(Widget* Widget);// 0xbb425c4 0x78d7293420
	static ScaleBoxSlot* SlotAsScaleBoxSlot(Widget* Widget);// 0xbb42474 0x78d7293500
	static SafeZoneSlot* SlotAsSafeBoxSlot(Widget* Widget);// 0xbb4251c 0x78d72935e0
	static OverlaySlot* SlotAsOverlaySlot(Widget* Widget);// 0xbb427bc 0x78d72936c0
	static HorizontalBoxSlot* SlotAsHorizontalBoxSlot(Widget* Widget);// 0xbb42864 0x78d72937a0
	static GridSlot* SlotAsGridSlot(Widget* Widget);// 0xbb4290c 0x78d7293880
	static CanvasPanelSlot* SlotAsCanvasSlot(Widget* Widget);// 0xbb429b4 0x78d7293960
	static BorderSlot* SlotAsBorderSlot(Widget* Widget);// 0xbb42a5c 0x78d7290080
	static void RemoveAllWidgets(Object* WorldContextObject);// 0xbb421e4 0x78d7290160
	static bool ProjectWorldLocationToWidgetPosition(PlayerController* PlayerController, Vector WorldLocation, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0xbb43094 0x78d7290240
	static Geometry GetViewportWidgetGeometry(Object* WorldContextObject);// 0xbb42e90 0x78d7290320
	static Vector2D GetViewportSize(Object* WorldContextObject);// 0xbb42f44 0x78d7290400
	static float GetViewPortScale(Object* WorldContextObject);// 0xbb42fec 0x78d72904e0
	static Geometry GetPlayerScreenWidgetGeometry(PlayerController* PlayerController);// 0xbb42ddc 0x78d72905c0
	static bool GetMousePositionScaledByDPI(PlayerController* Player, out float locationX, out float locationY);// 0xbb42b04 0x78d72906a0
	static Vector2D GetMousePositionOnViewportWithScale(Object* WorldContextObject);// 0xbb42c58 0x78d7290780
	static Vector2D GetMousePositionOnViewport(Object* WorldContextObject);// 0xbb42d00 0x78d7290860
	static Vector2D GetMousePositionOnPlatform();// 0xbb42da8 0x78d7290940

--------------------------------
Class: WidgetSwitcherSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x78d728ee80
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x78d728ef00
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x78d728ef80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbb44888 0x78d72927e0
	void SetPadding(Margin InPadding);// 0xbb449d8 0x78d72928c0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbb44930 0x78d72929a0

--------------------------------
Class: WindowTitleBarArea.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bWindowButtonsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78d728eb80
	bool bDoubleClickTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x78d728ec00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbb45150 0x78d7292540
	void SetPadding(Margin InPadding);// 0xbb452a0 0x78d7292620
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbb451f8 0x78d7292700

--------------------------------
Class: WindowTitleBarAreaSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78d728e880
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78d728e900
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78d728e980
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xbb4561c 0x78d72922a0
	void SetPadding(Margin InPadding);// 0xbb4576c 0x78d7292380
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xbb456c4 0x78d7292460

--------------------------------
Class: CameraRig_Crane.Actor.Object
	float CranePitch;//[Offset: 0x220, Size: 0x4] 0x78d72a0c00
	float CraneYaw;//[Offset: 0x224, Size: 0x4] 0x78d72a0c80
	float CraneArmLength;//[Offset: 0x228, Size: 0x4] 0x78d72a0d00
	bool bLockMountPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1] 0x78d72a0d80
	bool bLockMountYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1] 0x78d72a0e00
	SceneComponent* TransformComponent;//[Offset: 0x230, Size: 0x8] 0x78d72a0e80
	SceneComponent* CraneYawControl;//[Offset: 0x238, Size: 0x8] 0x78d72a0f00
	SceneComponent* CranePitchControl;//[Offset: 0x240, Size: 0x8] 0x78d72a0f80
	SceneComponent* CraneCameraMount;//[Offset: 0x248, Size: 0x8] 0x78d72a1000

--------------------------------
Class: CameraRig_Rail.Actor.Object
	float CurrentPositionOnRail;//[Offset: 0x220, Size: 0x4] 0x78d72a0900
	bool bLockOrientationToRail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1] 0x78d72a0980
	SceneComponent* TransformComponent;//[Offset: 0x228, Size: 0x8] 0x78d72a0a00
	SplineComponent* RailSplineComponent;//[Offset: 0x230, Size: 0x8] 0x78d72a0a80
	SceneComponent* RailCameraMount;//[Offset: 0x238, Size: 0x8] 0x78d72a0b00
	SplineComponent* GetRailSplineComponent();// 0xbb4a784 0x78d7295560

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x7a0, Size: 0x50] 0x78d72a0380
	CineCameraComponent* GetCineCameraComponent();// 0xbb4aafc 0x78d72953a0

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbe8ec00
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbe8ec80
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4] 0x78dbe8ed00
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28] 0x78dbe8ed80
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc] 0x78dbe8ee00
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x78dbe8ee80

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x7d0, Size: 0xc] 0x78d72a2c80
	CameraFilmbackSettings Filmback;//[Offset: 0x7dc, Size: 0xc] 0x78d72a2d00
	CameraLensSettings LensSettings;//[Offset: 0x7e8, Size: 0x18] 0x78d72a2d80
	CameraFocusSettings FocusSettings;//[Offset: 0x800, Size: 0x58] 0x78d72a2e00
	float CurrentFocalLength;//[Offset: 0x858, Size: 0x4] 0x78d72a2e80
	float CurrentAperture;//[Offset: 0x85c, Size: 0x4] 0x78d72a2f00
	float CurrentFocusDistance;//[Offset: 0x860, Size: 0x4] 0x78d72a2f80
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x870, Size: 0x10] 0x78d72722c0
	NamedLensPreset[] LensPresets;//[Offset: 0x880, Size: 0x10] 0x78d7272360
	FString DefaultFilmbackPresetName;//[Offset: 0x890, Size: 0x10] 0x78d72a3100
	FString DefaultFilmbackPreset;//[Offset: 0x8a0, Size: 0x10] 0x78d72a3180
	FString DefaultLensPresetName;//[Offset: 0x8b0, Size: 0x10] 0x78d72a1100
	float DefaultLensFocalLength;//[Offset: 0x8c0, Size: 0x4] 0x78d72a1180
	float DefaultLensFStop;//[Offset: 0x8c4, Size: 0x4] 0x78d72a1200
	void SetLensPresetByName(FString InPresetName);// 0xbb4b868 0x78d7293f80
	void SetFilmbackPresetByName(FString InPresetName);// 0xbb4ba14 0x78d7294060
	void SetCurrentFocalLength(float InFocalLength);// 0xbb4bd54 0x78d7294140
	float GetVerticalFieldOfView();// 0xbb4bcec 0x78d7294220
	static NamedLensPreset[] GetLensPresetsCopy();// 0xbb4b580 0x78d7294300
	FString GetLensPresetName();// 0xbb4b940 0x78d72943e0
	float GetHorizontalFieldOfView();// 0xbb4bd20 0x78d72944c0
	static NamedFilmbackPreset[] GetFilmbackPresetsCopy();// 0xbb4b6f4 0x78d72945a0
	FString GetFilmbackPresetName();// 0xbb4bc18 0x78d7294680
	FString GetDefaultFilmbackPresetName();// 0xbb4baec 0x78d7294760

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4] 0x78dbe8f900
	float SensorHeight;//[Offset: 0x4, Size: 0x4] 0x78dbe8f980
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4] 0x78dbe8fa00

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4] 0x78dbe8fb80
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4] 0x78dbe8fc00
	float MinFStop;//[Offset: 0x8, Size: 0x4] 0x78dbe8fc80
	float MaxFStop;//[Offset: 0xc, Size: 0x4] 0x78dbe8fd00
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4] 0x78dbe8fd80
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4] 0x78dbe8fe00

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78dbe8fb00
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18] 0x78dbe8fe80

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78dbe8f880
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc] 0x78dbe8fa80

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1] 0x78dbe58bc0
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4] 0x78dbe8ff80
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38] 0x78dbe8e900
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78dbe8e980
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4] 0x78dbe8ea00
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78dbe8ea80
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4] 0x78dbe8eb00
	float FocusOffset;//[Offset: 0x50, Size: 0x4] 0x78dbe8eb80

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28] 0x78dbe8e780
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc] 0x78dbe8e800
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x78dbe8e880

--------------------------------
Class: AudioGenerator.Object

--------------------------------
Class: AudioMixerBlueprintLibrary.BlueprintFunctionLibrary.Object
	static float TrimAudioCache(float InMegabytesToFree);// 0xbbdbfac 0x78d7295e20
	static SoundWave* StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundSubmix* SubmixToRecord, SoundWave* ExistingSoundWaveToOverwrite);// 0xbbdd5f8 0x78d7295f00
	static void StopAudioBus(const Object* WorldContextObject, AudioBus* AudioBus);// 0xbbdbdec 0x78d7295fe0
	static void StopAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToStopAnalyzing);// 0xbbdd0fc 0x78d72960c0
	static void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration, SoundSubmix* SubmixToRecord);// 0xbbdd8f0 0x78d72961a0
	static void StartAudioBus(const Object* WorldContextObject, AudioBus* AudioBus);// 0xbbdbecc 0x78d7296280
	static void StartAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToAnalyze, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0xbbdd1dc 0x78d7296360
	static void SetSubmixEffectChainOverride(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset*[] SubmixEffectPresetChain, float FadeTimeSec);// 0xbbddb4c 0x78d7296440
	static void SetBypassSourceEffectChainEntry(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex, bool bBypassed);// 0xbbdc2c4 0x78d7296520
	static void ResumeRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0xbbdd438 0x78d7296600
	static void ReplaceSoundEffectSubmix(const Object* WorldContextObject, SoundSubmix* InSoundSubmix, int SubmixChainIndex, SoundEffectSubmixPreset* SubmixEffectPreset);// 0xbbdde64 0x78d72966e0
	static void RemoveSubmixEffectPresetAtIndex(const Object* WorldContextObject, SoundSubmix* SoundSubmix, int SubmixChainIndex);// 0xbbddfdc 0x78d72967c0
	static void RemoveSubmixEffectPreset(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0xbbde108 0x78d72968a0
	static void RemoveSourceEffectFromPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex);// 0xbbdc440 0x78d7296980
	static void RemoveMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0xbbde408 0x78d7296a60
	static void PrimeSoundForPlayback(SoundWave* SoundWave, const delegate OnLoadCompletion);// 0xbbdc0ec 0x78d7296b40
	static void PrimeSoundCueForPlayback(SoundCue* SoundCue);// 0xbbdc054 0x78d7296c20
	static void PauseRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0xbbdd518 0x78d7296d00
	static SoundSubmixSpectralAnalysisBandSettings[] MakePresetSpectralAnalysisBandSettings(enum InBandPresetType, int InNumBands, int InAttackTimeMsec, int InReleaseTimeMsec);// 0xbbdca80 0x78d7296de0
	static SoundSubmixSpectralAnalysisBandSettings[] MakeMusicalSpectralAnalysisBandSettings(int InNumSemitones, enum InStartingMusicalNote, int InStartingOctave, int InAttackTimeMsec, int InReleaseTimeMsec);// 0xbbdceb8 0x78d7296ec0
	static SoundSubmixSpectralAnalysisBandSettings[] MakeFullSpectrumSpectralAnalysisBandSettings(int InNumBands, float InMinimumFrequency, float InMaximumFrequency, int InAttackTimeMsec, int InReleaseTimeMsec);// 0xbbdcc78 0x78d7296fa0
	static bool IsAudioBusActive(const Object* WorldContextObject, AudioBus* AudioBus);// 0xbbdbcf8 0x78d7297080
	static void GetPhaseForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Phases, SoundSubmix* SubmixToAnalyze);// 0xbbdc690 0x78d7297160
	static int GetNumberOfEntriesInSourceEffectChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain);// 0xbbdc1d4 0x78d7297240
	static void GetMagnitudeForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Magnitudes, SoundSubmix* SubmixToAnalyze);// 0xbbdc888 0x78d7297320
	static void ClearSubmixEffects(const Object* WorldContextObject, SoundSubmix* SoundSubmix);// 0xbbddd84 0x78d7293a40
	static void ClearSubmixEffectChainOverride(const Object* WorldContextObject, SoundSubmix* SoundSubmix, float FadeTimeSec);// 0xbbdda20 0x78d7293b20
	static void ClearMasterSubmixEffects(const Object* WorldContextObject);// 0xbbde370 0x78d7293c00
	static int AddSubmixEffect(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0xbbde234 0x78d7293ce0
	static void AddSourceEffectToPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, SourceEffectChainEntry Entry);// 0xbbdc56c 0x78d7293dc0
	static void AddMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0xbbde4e8 0x78d7293ea0

--------------------------------
Class: SubmixEffectDynamicsProcessorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectDynamicsProcessorSettings Settings;//[Offset: 0xe0, Size: 0x50] 0x78d72a6600
	void SetSettings(out const SubmixEffectDynamicsProcessorSettings Settings);// 0xbbe1028 0x78d7298740
	void SetExternalSubmix(SoundSubmix* Submix);// 0xbbe1138 0x78d7298820

--------------------------------
Class: SubmixEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x78dbe589e0
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x78dbe58a80
	enum LinkMode;//[Offset: 0x2, Size: 0x1] 0x78dbe58b20
	float InputGainDb;//[Offset: 0x4, Size: 0x4] 0x78dbed0680
	float ThresholdDb;//[Offset: 0x8, Size: 0x4] 0x78dbed0700
	float ratio;//[Offset: 0xc, Size: 0x4] 0x78dbed0780
	float KneeBandwidthDb;//[Offset: 0x10, Size: 0x4] 0x78dbed0800
	float LookAheadMsec;//[Offset: 0x14, Size: 0x4] 0x78dbed0880
	float AttackTimeMsec;//[Offset: 0x18, Size: 0x4] 0x78dbed0900
	float ReleaseTimeMsec;//[Offset: 0x1c, Size: 0x4] 0x78dbed0980
	SoundSubmix* ExternalSubmix;//[Offset: 0x20, Size: 0x8] 0x78dbed0a00
	bool bChannelLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78dbed0a80
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78dbed0b00
	bool bKeyAudition;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x78dbed0b80
	float KeyGainDb;//[Offset: 0x2c, Size: 0x4] 0x78dbed0c00
	float OutputGainDb;//[Offset: 0x30, Size: 0x4] 0x78dbed0c80
	SubmixEffectDynamicProcessorFilterSettings KeyHighshelf;//[Offset: 0x34, Size: 0xc] 0x78dbed0d00
	SubmixEffectDynamicProcessorFilterSettings KeyLowshelf;//[Offset: 0x40, Size: 0xc] 0x78dbed0f00

--------------------------------
Class: SubmixEffectDynamicProcessorFilterSettings
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbed0d80
	float Cutoff;//[Offset: 0x4, Size: 0x4] 0x78dbed0e00
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x78dbed0e80

--------------------------------
Class: SubmixEffectSubmixEQPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectSubmixEQSettings Settings;//[Offset: 0xa0, Size: 0x10] 0x78d72a6500
	void SetSettings(out const SubmixEffectSubmixEQSettings InSettings);// 0xbbe178c 0x78d7298660

--------------------------------
Class: SubmixEffectSubmixEQSettings
	SubmixEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10] 0x78dbe58940

--------------------------------
Class: SubmixEffectEQBand
	float Frequency;//[Offset: 0x0, Size: 0x4] 0x78dbed0200
	float Bandwidth;//[Offset: 0x4, Size: 0x4] 0x78dbed0280
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x78dbed0300
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78dbed0380

--------------------------------
Class: SubmixEffectReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectReverbSettings Settings;//[Offset: 0xcc, Size: 0x40] 0x78d72a8380
	void SetSettingsWithReverbEffect(const ReverbEffect* InReverbEffect, const float WetLevel, const float DryLevel);// 0xbbe1c40 0x78d72984a0
	void SetSettings(out const SubmixEffectReverbSettings InSettings);// 0xbbe1d7c 0x78d7298580

--------------------------------
Class: SubmixEffectReverbSettings
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbed1b00
	float ReflectionsDelay;//[Offset: 0x4, Size: 0x4] 0x78dbed1b80
	float GainHF;//[Offset: 0x8, Size: 0x4] 0x78dbed1c00
	float ReflectionsGain;//[Offset: 0xc, Size: 0x4] 0x78dbed1c80
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78dbed1d00
	float LateDelay;//[Offset: 0x14, Size: 0x4] 0x78dbed1d80
	float DecayTime;//[Offset: 0x18, Size: 0x4] 0x78dbed1e00
	float Density;//[Offset: 0x1c, Size: 0x4] 0x78dbed1e80
	float Diffusion;//[Offset: 0x20, Size: 0x4] 0x78dbed1f00
	float AirAbsorptionGainHF;//[Offset: 0x24, Size: 0x4] 0x78dbed1f80
	float DecayHFRatio;//[Offset: 0x28, Size: 0x4] 0x78dbed2000
	float LateGain;//[Offset: 0x2c, Size: 0x4] 0x78dbed2080
	float Gain;//[Offset: 0x30, Size: 0x4] 0x78dbed2100
	float WetLevel;//[Offset: 0x34, Size: 0x4] 0x78dbed0080
	float DryLevel;//[Offset: 0x38, Size: 0x4] 0x78dbed0100
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78dbed0180

--------------------------------
Class: QuartzSubsystem.WorldSubsystem.Subsystem.Object
	float GetRoundTripMinLatency(const Object* WorldContextObject);// 0xbbe2190 0x78d7297a20
	float GetRoundTripMaxLatency(const Object* WorldContextObject);// 0xbbe20e0 0x78d7297b00
	float GetRoundTripAverageLatency(const Object* WorldContextObject);// 0xbbe2240 0x78d7297be0
	QuartzClockHandle* GetHandleForClock(const Object* WorldContextObject, FName ClockName);// 0xbbe2698 0x78d7297cc0
	float GetGameThreadToAudioRenderThreadMinLatency(const Object* WorldContextObject);// 0xbbe243c 0x78d7297da0
	float GetGameThreadToAudioRenderThreadMaxLatency(const Object* WorldContextObject);// 0xbbe238c 0x78d7297e80
	float GetGameThreadToAudioRenderThreadAverageLatency(const Object* WorldContextObject);// 0xbbe24ec 0x78d7297f60
	float GetAudioRenderThreadToGameThreadMinLatency();// 0xbbe2324 0x78d7298040
	float GetAudioRenderThreadToGameThreadMaxLatency();// 0xbbe22f0 0x78d7298120
	float GetAudioRenderThreadToGameThreadAverageLatency();// 0xbbe2358 0x78d7298200
	bool DoesClockExist(const Object* WorldContextObject, FName ClockName);// 0xbbe259c 0x78d72982e0
	QuartzClockHandle* CreateNewClock(const Object* WorldContextObject, FName ClockName, QuartzClockSettings InSettings, bool bOverrideSettingsIfClockExists);// 0xbbe2790 0x78d72983c0

--------------------------------
Class: QuartzClockSettings
	QuartzTimeSignature TimeSignature;//[Offset: 0x0, Size: 0x18] 0x78dbf3bd00
	bool bIgnoreLevelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78dbf3bd80

--------------------------------
Class: QuartzTimeSignature
	int NumBeats;//[Offset: 0x0, Size: 0x4] 0x78dbf3ba80
	enum BeatType;//[Offset: 0x4, Size: 0x1] 0x78dbf22360
	QuartzPulseOverrideStep[] OptionalPulseOverride;//[Offset: 0x8, Size: 0x10] 0x78dbf224a0

--------------------------------
Class: QuartzPulseOverrideStep
	int NumberOfPulses;//[Offset: 0x0, Size: 0x4] 0x78dbf3bb80
	enum PulseDuration;//[Offset: 0x4, Size: 0x1] 0x78dbf22400

--------------------------------
Class: NetAnalyticsAggregatorConfig.Object
	NetAnalyticsDataConfig[] NetAnalyticsData;//[Offset: 0x28, Size: 0x10] 0x78d7273940

--------------------------------
Class: NetAnalyticsDataConfig
	FName DataName;//[Offset: 0x0, Size: 0x8] 0x78dbed1a00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78dbed1a80

--------------------------------
Class: AssetRegistryHelpers.Object
	static SoftObjectPath ToSoftObjectPath(out const AssetData InAssetData);// 0xbc6f1f4 0x78d729a880
	static ARFilter SetFilterTagsAndValues(out const ARFilter InFilter, out const TagAndValue[] InTagsAndValues);// 0xbc6e464 0x78d729a960
	static bool IsValid(out const AssetData InAssetData);// 0xbc6f96c 0x78d729aa40
	static bool IsUAsset(out const AssetData InAssetData);// 0xbc6f7c0 0x78d729ab20
	static bool IsRedirector(out const AssetData InAssetData);// 0xbc6f614 0x78d729ac00
	static bool IsAssetLoaded(out const AssetData InAssetData);// 0xbc6ecf8 0x78d729ace0
	static bool GetTagValue(out const AssetData InAssetData, out const FName InTagName, out FString OutTagValue);// 0xbc6e858 0x78d7297400
	static FString GetFullName(out const AssetData InAssetData);// 0xbc6f408 0x78d72974e0
	static FString GetExportTextName(out const AssetData InAssetData);// 0xbc6eaec 0x78d72975c0
	static class Object GetClass(out const AssetData InAssetData);// 0xbc6f04c 0x78d72976a0
	static interface classNone GetAssetRegistry();// 0xbc6fdd0 0x78d7297780
	static Object* GetAsset(out const AssetData InAssetData);// 0xbc6eea4 0x78d7297860
	static AssetData CreateAssetData(const Object* InAsset, bool bAllowBlueprintClass);// 0xbc6fb18 0x78d7297940

--------------------------------
Class: ARFilter
	FName[] PackageNames;//[Offset: 0x0, Size: 0x10] 0x78e6b17a40
	FName[] PackagePaths;//[Offset: 0x10, Size: 0x10] 0x78e6b17ae0
	FName[] ObjectPaths;//[Offset: 0x20, Size: 0x10] 0x78e6b17b80
	FName[] ClassNames;//[Offset: 0x30, Size: 0x10] 0x78e6b152e0
	<FName> RecursiveClassesExclusionSet;//[Offset: 0x90, Size: 0x50] 0x78e6b15380
	bool bRecursivePaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x78e6835480
	bool bRecursiveClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1] 0x78e6835500
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1] 0x78e6835580

--------------------------------
Class: TagAndValue
	FName Tag;//[Offset: 0x0, Size: 0x8] 0x78dbed1900
	FString Value;//[Offset: 0x8, Size: 0x10] 0x78dbed1980

--------------------------------
Class: AssetRegistry.Interface.Object
	void WaitForCompletion();// 0xbc707f4 0x78d7299700
	void UseFilterToExcludeAssets(out AssetData[] AssetDataList, out const ARFilter Filter);// 0xbc70c30 0x78d72997e0
	void SearchAllAssets(bool bSynchronousSearch);// 0xbc70810 0x78d72998c0
	void ScanPathsSynchronous(out const FString[] InPaths, bool bForceRescan);// 0xbc70a7c 0x78d72999a0
	void ScanModifiedAssetFiles(out const FString[] InFilePaths);// 0xbc705c0 0x78d7299a80
	void ScanFilesSynchronous(out const FString[] InFilePaths, bool bForceRescan);// 0xbc708c8 0x78d7299b60
	void RunAssetsThroughFilter(out AssetData[] AssetDataList, out const ARFilter Filter);// 0xbc70dd8 0x78d7299c40
	void PrioritizeSearchPath(FString PathToPrioritize);// 0xbc70714 0x78d7299d20
	bool K2_GetReferencers(FName PackageName, out const AssetRegistryDependencyOptions ReferenceOptions, out FName[] OutReferencers);// 0xbc712f0 0x78d7299e00
	bool K2_GetDependencies(FName PackageName, out const AssetRegistryDependencyOptions DependencyOptions, out FName[] OutDependencies);// 0xbc71488 0x78d7299ee0
	bool IsLoadingAssets();// 0xbc70580 0x78d7299fc0
	bool HasAssets(const FName PackagePath, const bool bRecursive);// 0xbc720bc 0x78d729a0a0
	void GetSubPaths(FString InBasePath, out FString[] OutPathList, bool bInRecurse);// 0xbc70f80 0x78d729a180
	bool GetAssetsByPath(FName PackagePath, out AssetData[] OutAssetData, bool bRecursive, bool bIncludeOnlyOnDiskAssets);// 0xbc71d60 0x78d729a260
	bool GetAssetsByPackageName(FName PackageName, out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0xbc71f34 0x78d729a340
	bool GetAssetsByClass(FName ClassName, out AssetData[] OutAssetData, bool bSearchSubClasses);// 0xbc71bd8 0x78d729a420
	bool GetAssets(out const ARFilter Filter, out AssetData[] OutAssetData);// 0xbc71a24 0x78d729a500
	AssetData GetAssetByObjectPath(const FName ObjectPath, bool bIncludeOnlyOnDiskAssets);// 0xbc7175c 0x78d729a5e0
	void GetAllCachedPaths(out FString[] OutPathList);// 0xbc7119c 0x78d729a6c0
	bool GetAllAssets(out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0xbc71620 0x78d729a7a0

--------------------------------
Class: AssetRegistryDependencyOptions
	bool bIncludeSoftPackageReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbed1680
	bool bIncludeHardPackageReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78dbed1700
	bool bIncludeSearchableNames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78dbed1780
	bool bIncludeSoftManagementReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78dbed1800
	bool bIncludeHardManagementReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78dbed1880

--------------------------------
Class: BlueprintGameplayTagLibrary.BlueprintFunctionLibrary.Object
	static bool RemoveGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0xbc89cb0 0x78d729b680
	static bool NotEqual_TagTag(GameplayTag A, FString B);// 0xbc88cc8 0x78d729b760
	static bool NotEqual_TagContainerTagContainer(GameplayTagContainer A, FString B);// 0xbc88a60 0x78d729b840
	static bool NotEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0xbc897ac 0x78d729b920
	static bool NotEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0xbc8ac80 0x78d729ba00
	static bool MatchesTag(GameplayTag TagOne, GameplayTag TagTwo, bool bExactMatch);// 0xbc8b00c 0x78d729bae0
	static bool MatchesAnyTags(GameplayTag TagOne, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0xbc8ae68 0x78d729bbc0
	static GameplayTagContainer MakeLiteralGameplayTagContainer(GameplayTagContainer Value);// 0xbc895d4 0x78d729bca0
	static GameplayTag MakeLiteralGameplayTag(GameplayTag Value);// 0xbc8aa78 0x78d729bd80
	static GameplayTagQuery MakeGameplayTagQuery(GameplayTagQuery TagQuery);// 0xbc890f4 0x78d729be60
	static GameplayTagContainer MakeGameplayTagContainerFromTag(GameplayTag SingleTag);// 0xbc89394 0x78d729bf40
	static GameplayTagContainer MakeGameplayTagContainerFromArray(out const GameplayTag[] GameplayTags);// 0xbc89498 0x78d729c020
	static bool IsTagQueryEmpty(out const GameplayTagQuery TagQuery);// 0xbc8a2c4 0x78d729c100
	static bool IsGameplayTagValid(GameplayTag GameplayTag);// 0xbc8abd4 0x78d729c1e0
	static bool HasTag(out const GameplayTagContainer TagContainer, GameplayTag Tag, bool bExactMatch);// 0xbc8a7bc 0x78d729c2c0
	static bool HasAnyTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0xbc8a5ac 0x78d729c3a0
	static bool HasAllTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0xbc8a39c 0x78d729c480
	static bool HasAllMatchingGameplayTags(interface classNone TagContainerInterface, out const GameplayTagContainer OtherContainer);// 0xbc88f88 0x78d729c560
	static FName GetTagName(out const GameplayTag GameplayTag);// 0xbc8ab20 0x78d729c640
	static int GetNumGameplayTagsInContainer(out const GameplayTagContainer TagContainer);// 0xbc8a970 0x78d729c720
	static FString GetDebugStringFromGameplayTagContainer(out const GameplayTagContainer TagContainer);// 0xbc888f4 0x78d729c800
	static FString GetDebugStringFromGameplayTag(GameplayTag GameplayTag);// 0xbc887dc 0x78d729c8e0
	static void GetAllActorsOfClassMatchingTagQuery(Object* WorldContextObject, class Actor ActorClass, out const GameplayTagQuery GameplayTagQuery, out Actor*[] OutActors);// 0xbc89f5c 0x78d729c9c0
	static bool EqualEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0xbc8995c 0x78d72990e0
	static bool EqualEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0xbc8ad74 0x78d72991c0
	static bool DoesTagAssetInterfaceHaveTag(interface classNone TagContainerInterface, GameplayTag Tag);// 0xbc88e70 0x78d72992a0
	static bool DoesContainerMatchTagQuery(out const GameplayTagContainer TagContainer, out const GameplayTagQuery TagQuery);// 0xbc8a138 0x78d7299380
	static void BreakGameplayTagContainer(out const GameplayTagContainer GameplayTagContainer, out GameplayTag[] GameplayTags);// 0xbc89214 0x78d7299460
	static void AppendGameplayTagContainers(out GameplayTagContainer InOutTagContainer, out const GameplayTagContainer InTagContainer);// 0xbc89b0c 0x78d7299540
	static void AddGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0xbc89e0c 0x78d7299620

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10] 0x78dbe586c0
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10] 0x78dbe58760

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8] 0x78dbed2d00

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4] 0x78dbed2c80
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10] 0x78dbe58800
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10] 0x78dbe588a0
	FString UserDescription;//[Offset: 0x28, Size: 0x10] 0x78dbed2e80
	FString AutoDescription;//[Offset: 0x38, Size: 0x10] 0x78dbed2f00

--------------------------------
Class: GameplayTagAssetInterface.Interface.Object
	bool HasMatchingGameplayTag(GameplayTag TagToCheck);// 0xbc8c140 0x78d729b300
	bool HasAnyMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0xbc8bf08 0x78d729b3e0
	bool HasAllMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0xbc8c024 0x78d729b4c0
	void GetOwnedGameplayTags(out GameplayTagContainer TagContainer);// 0xbc8c1fc 0x78d729b5a0

--------------------------------
Class: EditableGameplayTagQuery.Object
	FString UserDescription;//[Offset: 0x28, Size: 0x10] 0x78d72aef00
	EditableGameplayTagQueryExpression* RootExpression;//[Offset: 0x48, Size: 0x8] 0x78d72aef80
	GameplayTagQuery TagQueryExportText_Helper;//[Offset: 0x50, Size: 0x48] 0x78d72af000

--------------------------------
Class: EditableGameplayTagQueryExpression.Object

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x78d72aee80

--------------------------------
Class: EditableGameplayTagQueryExpression_AllTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x78d72aee00

--------------------------------
Class: EditableGameplayTagQueryExpression_NoTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x78d72aed80

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x78d7272c20

--------------------------------
Class: EditableGameplayTagQueryExpression_AllExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x78d7272b80

--------------------------------
Class: EditableGameplayTagQueryExpression_NoExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x78d7272ae0

--------------------------------
Class: GameplayTagsManager.Object
	GameplayTagSource[] TagSources;//[Offset: 0xc0, Size: 0x10] 0x78d72729a0
	DataTable*[] GameplayTagTables;//[Offset: 0x1b0, Size: 0x10] 0x78d7272a40

--------------------------------
Class: GameplayTagSource
	FName SourceName;//[Offset: 0x0, Size: 0x8] 0x78dbed2980
	enum SourceType;//[Offset: 0x8, Size: 0x1] 0x78dbe58620
	GameplayTagsList* SourceTagList;//[Offset: 0x10, Size: 0x8] 0x78dbed2a80
	RestrictedGameplayTagsList* SourceRestrictedTagList;//[Offset: 0x18, Size: 0x8] 0x78dbed2b00

--------------------------------
Class: GameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10] 0x78d72aea00
	GameplayTagTableRow[] GameplayTagList;//[Offset: 0x38, Size: 0x10] 0x78d7275240

--------------------------------
Class: GameplayTagTableRow.TableRowBase
	FName Tag;//[Offset: 0x8, Size: 0x8] 0x78dbed2880
	FString DevComment;//[Offset: 0x10, Size: 0x10] 0x78dbed2900

--------------------------------
Class: RestrictedGameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10] 0x78d72ae900
	RestrictedGameplayTagTableRow[] RestrictedGameplayTagList;//[Offset: 0x38, Size: 0x10] 0x78d72751a0

--------------------------------
Class: RestrictedGameplayTagTableRow.GameplayTagTableRow.TableRowBase
	bool bAllowNonRestrictedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78dbed2800

--------------------------------
Class: GameplayTagsSettings.GameplayTagsList.Object
	bool ImportTagsFromConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78d72afc00
	bool WarnOnInvalidTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x78d72afc80
	bool FastReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x78d72afd00
	FString InvalidTagCharacters;//[Offset: 0x50, Size: 0x10] 0x78d72afd80
	GameplayTagCategoryRemap[] CategoryRemapping;//[Offset: 0x60, Size: 0x10] 0x78d7274e80
	SoftObjectPath[] GameplayTagTableList;//[Offset: 0x70, Size: 0x10] 0x78d7274f20
	GameplayTagRedirect[] GameplayTagRedirects;//[Offset: 0x80, Size: 0x10] 0x78d7274fc0
	FName[] CommonlyReplicatedTags;//[Offset: 0x90, Size: 0x10] 0x78d7275060
	int NumBitsForContainerSize;//[Offset: 0xa0, Size: 0x4] 0x78d72ae780
	int NetIndexFirstBitSegment;//[Offset: 0xa4, Size: 0x4] 0x78d72ae800
	RestrictedConfigInfo[] RestrictedConfigFiles;//[Offset: 0xa8, Size: 0x10] 0x78d7275100

--------------------------------
Class: GameplayTagCategoryRemap
	FString BaseCategory;//[Offset: 0x0, Size: 0x10] 0x78dbed2600
	FString[] RemapCategories;//[Offset: 0x10, Size: 0x10] 0x78dbe584e0

--------------------------------
Class: GameplayTagRedirect
	FName OldTagName;//[Offset: 0x0, Size: 0x8] 0x78dbed2500
	FName NewTagName;//[Offset: 0x8, Size: 0x8] 0x78dbed2580

--------------------------------
Class: RestrictedConfigInfo
	FString RestrictedConfigName;//[Offset: 0x0, Size: 0x10] 0x78dbed2700
	FString[] Owners;//[Offset: 0x10, Size: 0x10] 0x78dbe58580

--------------------------------
Class: GameplayTagsDeveloperSettings.DeveloperSettings.Object
	FString DeveloperConfigName;//[Offset: 0x38, Size: 0x10] 0x78d72afb00
	FName FavoriteTagSource;//[Offset: 0x48, Size: 0x8] 0x78d72afb80

--------------------------------
Class: PacketHandlerProfileConfig.Object
	FString[] Components;//[Offset: 0x28, Size: 0x10] 0x78d7274de0

--------------------------------
Class: MeshDescription.Object

--------------------------------
Class: PropertyAccess.Interface.Object

--------------------------------
Class: PropertyEventBroadcaster.Interface.Object

--------------------------------
Class: PropertyEventSubscriber.Interface.Object

--------------------------------
Class: ClothConfigBase.Object

--------------------------------
Class: ClothSharedSimConfigBase.Object

--------------------------------
Class: ClothPhysicalMeshDataBase_Legacy.Object
	Vector[] Vertices;//[Offset: 0x28, Size: 0x10] 0x78d7275c40
	Vector[] Normals;//[Offset: 0x38, Size: 0x10] 0x78d7275ce0
	uint32[] Indices;//[Offset: 0x48, Size: 0x10] 0x78d7275d80
	float[] InverseMasses;//[Offset: 0x58, Size: 0x10] 0x78d7275e20
	ClothVertBoneData[] BoneData;//[Offset: 0x68, Size: 0x10] 0x78d7275ec0
	int NumFixedVerts;//[Offset: 0x78, Size: 0x4] 0x78d72b7300
	int MaxBoneWeights;//[Offset: 0x7c, Size: 0x4] 0x78d72b7380
	uint32[] SelfCollisionIndices;//[Offset: 0x80, Size: 0x10] 0x78d7275f60

--------------------------------
Class: ClothVertBoneData
	int NumInfluences;//[Offset: 0x0, Size: 0x4] 0x78dbed4a00
	uint16 BoneIndices;//[Offset: 0x4, Size: 0x2] 0x78dbed4a80
	float BoneWeights;//[Offset: 0x1c, Size: 0x4] 0x78dbed4b00

--------------------------------
Class: EyeTrackerFunctionLibrary.BlueprintFunctionLibrary.Object
	static void SetEyeTrackedPlayer(PlayerController* PlayerController);// 0xbd140dc 0x78d72c35e0
	static bool IsStereoGazeDataAvailable();// 0xbd142f4 0x78d72c36c0
	static bool IsEyeTrackerConnected();// 0xbd1432c 0x78d72c37a0
	static bool GetStereoGazeData(out EyeTrackerStereoGazeData OutGazeData);// 0xbd14174 0x78d72c3880
	static bool GetGazeData(out EyeTrackerGazeData OutGazeData);// 0xbd14234 0x78d72c3960

--------------------------------
Class: EyeTrackerStereoGazeData
	Vector LeftEyeOrigin;//[Offset: 0x0, Size: 0xc] 0x78dbed4700
	Vector LeftEyeDirection;//[Offset: 0xc, Size: 0xc] 0x78dbed4780
	Vector RightEyeOrigin;//[Offset: 0x18, Size: 0xc] 0x78dbed4800
	Vector RightEyeDirection;//[Offset: 0x24, Size: 0xc] 0x78dbed4880
	Vector FixationPoint;//[Offset: 0x30, Size: 0xc] 0x78dbed4900
	float ConfidenceValue;//[Offset: 0x3c, Size: 0x4] 0x78dbed4980

--------------------------------
Class: EyeTrackerGazeData
	Vector GazeOrigin;//[Offset: 0x0, Size: 0xc] 0x78dbed4500
	Vector GazeDirection;//[Offset: 0xc, Size: 0xc] 0x78dbed4580
	Vector FixationPoint;//[Offset: 0x18, Size: 0xc] 0x78dbed4600
	float ConfidenceValue;//[Offset: 0x24, Size: 0x4] 0x78dbed4680

--------------------------------
Class: JsonUtilitiesDummyObject.Object

--------------------------------
Class: BaseMediaSource.MediaSource.Object
	FName PlayerName;//[Offset: 0x80, Size: 0x8] 0x78d72b6780

--------------------------------
Class: FileMediaSource.BaseMediaSource.MediaSource.Object
	FString FilePath;//[Offset: 0x88, Size: 0x10] 0x78d72b6600
	bool PrecacheFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78d72b6680
	void SetFilePath(FString Path);// 0xbd4a6b4 0x78d72c2fc0

--------------------------------
Class: MediaBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	static void EnumerateWebcamCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0xbd4aee0 0x78d72c2d20
	static void EnumerateVideoCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0xbd4b0bc 0x78d72c2e00
	static void EnumerateAudioCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0xbd4b1cc 0x78d72c2ee0

--------------------------------
Class: MediaCaptureDevice
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x78dbed5f00
	FString URL;//[Offset: 0x18, Size: 0x10] 0x78dbed5f80

--------------------------------
Class: MediaComponent.ActorComponent.Object
	MediaTexture* MediaTexture;//[Offset: 0xb8, Size: 0x8] 0x78d72b8200
	MediaPlayer* MediaPlayer;//[Offset: 0xc0, Size: 0x8] 0x78d72b8280
	MediaTexture* GetMediaTexture();// 0xbd4b5bc 0x78d72c2b60
	MediaPlayer* GetMediaPlayer();// 0xbd4b5f0 0x78d72c2c40

--------------------------------
Class: MediaTexture.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0xd8, Size: 0x1] 0x78d72bdd80
	byte AddressY;//[Offset: 0xd9, Size: 0x1] 0x78d72bde00
	bool AutoClear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1] 0x78d72bde80
	LinearColor ClearColor;//[Offset: 0xdc, Size: 0x10] 0x78d72bdf00
	bool EnableGenMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1] 0x78d72bdf80
	byte NumMips;//[Offset: 0xed, Size: 0x1] 0x78d72be000
	bool NewStyleOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 0x1] 0x78d72be080
	byte OutputFormat;//[Offset: 0xef, Size: 0x1] 0x78d72be100
	float CurrentAspectRatio;//[Offset: 0xf0, Size: 0x4] 0x78d72be180
	byte CurrentOrientation;//[Offset: 0xf4, Size: 0x1] 0x78d72be200
	MediaPlayer* MediaPlayer;//[Offset: 0xf8, Size: 0x8] 0x78d72be280
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0xbd5310c 0x78d72c8200
	int GetWidth();// 0xbd531b4 0x78d72c82e0
	MediaPlayer* GetMediaPlayer();// 0xbd531e8 0x78d72c83c0
	int GetHeight();// 0xbd5321c 0x78d72c84a0
	float GetAspectRatio();// 0xbd53250 0x78d72c8580

--------------------------------
Class: MediaSoundComponent.SynthComponent.SceneComponent.ActorComponent.Object
	enum Channels;//[Offset: 0x6d0, Size: 0x4] 0x78d7277a40
	bool DynamicRateAdjustment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d4, Size: 0x1] 0x78d72be600
	float RateAdjustmentFactor;//[Offset: 0x6d8, Size: 0x4] 0x78d72be680
	FloatRange RateAdjustmentRange;//[Offset: 0x6dc, Size: 0x10] 0x78d72be700
	MediaPlayer* MediaPlayer;//[Offset: 0x6f0, Size: 0x8] 0x78d72bc680
	void SetSpectralAnalysisSettings(float[] InFrequenciesToAnalyze, enum InFFTSize);// 0xbd51cd0 0x78d72c8660
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0xbd51f28 0x78d72c8740
	void SetEnvelopeFollowingsettings(int AttackTimeMsec, int ReleaseTimeMsec);// 0xbd51988 0x78d72c8820
	void SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled);// 0xbd51e78 0x78d72c8900
	void SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing);// 0xbd51a78 0x78d72c89e0
	MediaSoundComponentSpectralData[] GetSpectralData();// 0xbd51bfc 0x78d72c8ac0
	MediaSoundComponentSpectralData[] GetNormalizedSpectralData();// 0xbd51b28 0x78d72c8ba0
	MediaPlayer* GetMediaPlayer();// 0xbd51fd0 0x78d72c8c80
	float GetEnvelopeValue();// 0xbd51954 0x78d72c8d60
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0xbd52004 0x78d72c8e40

--------------------------------
Class: MediaSoundComponentSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4] 0x78dbed5e00
	float Magnitude;//[Offset: 0x4, Size: 0x4] 0x78dbed5e80

--------------------------------
Class: PlatformMediaSource.MediaSource.Object
	MediaSource* MediaSource;//[Offset: 0x80, Size: 0x8] 0x78d72bdd00

--------------------------------
Class: StreamMediaSource.BaseMediaSource.MediaSource.Object
	FString StreamUrl;//[Offset: 0x88, Size: 0x10] 0x78d72bdc80

--------------------------------
Class: TimeSynchronizableMediaSource.BaseMediaSource.MediaSource.Object
	bool bUseTimeSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78d72bdb00
	int FrameDelay;//[Offset: 0x8c, Size: 0x4] 0x78d72bdb80
	double TimeDelay;//[Offset: 0x90, Size: 0x8] 0x78d72bdc00

--------------------------------
Class: AnimSequenceLevelSequenceLink.AssetUserData.Object
	Guid SkelTrackGuid;//[Offset: 0x28, Size: 0x10] 0x78d72bda00
	SoftObjectPath PathToLevelSequence;//[Offset: 0x38, Size: 0x18] 0x78d72bda80

--------------------------------
Class: DefaultLevelSequenceInstanceData.Object
	Actor* TransformOriginActor;//[Offset: 0x30, Size: 0x8] 0x78d72bd900
	Transform TransformOrigin;//[Offset: 0x40, Size: 0x30] 0x78d72bd980

--------------------------------
Class: LevelSequenceMetaData.Interface.Object

--------------------------------
Class: LevelSequenceAnimSequenceLink.AssetUserData.Object
	LevelSequenceAnimSequenceLinkItem[] AnimSequenceLinks;//[Offset: 0x28, Size: 0x10] 0x78d7277680

--------------------------------
Class: LevelSequenceAnimSequenceLinkItem
	Guid SkelTrackGuid;//[Offset: 0x0, Size: 0x10] 0x78dbed6700
	SoftObjectPath PathToAnimSequence;//[Offset: 0x10, Size: 0x18] 0x78dbed6780
	bool bExportTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dbed6800
	bool bExportCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78dbed6880
	bool bRecordInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78dbed6900

--------------------------------
Class: LevelSequenceDirector.Object
	LevelSequencePlayer* Player;//[Offset: 0x28, Size: 0x8] 0x78d72bf080
	void OnCreated();// 0xaa7cd18 0x78d72c7b00

--------------------------------
Class: LegacyLevelSequenceDirectorBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelSequenceMediaController.Actor.Object
	LevelSequenceActor* Sequence;//[Offset: 0x228, Size: 0x8] 0x78d72bfc80
	MediaComponent* MediaComponent;//[Offset: 0x230, Size: 0x8] 0x78d72bfd00
	float ServerStartTimeSeconds;//[Offset: 0x238, Size: 0x4] 0x78d72bfd80
	void SynchronizeToServer(float DesyncThresholdSeconds);// 0xbd6aea0 0x78d72c74e0
	void Play();// 0xbd6af80 0x78d72c75c0
	void OnRep_ServerStartTimeSeconds();// 0xbd6ae8c 0x78d72c76a0
	LevelSequenceActor* GetSequence();// 0xbd6af48 0x78d72c7780
	MediaComponent* GetMediaComponent();// 0xbd6af64 0x78d72c7860

--------------------------------
Class: MovieSceneCaptureProtocolBase.Object
	enum State;//[Offset: 0x50, Size: 0x1] 0x78d72770e0
	bool IsCapturing();// 0xbd88418 0x78d72cace0
	enum GetState();// 0xbd88460 0x78d72c7400

--------------------------------
Class: MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: NullAudioCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: MasterAudioSubmixCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	FString Filename;//[Offset: 0x58, Size: 0x10] 0x78d72bfa80

--------------------------------
Class: MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: CompositionGraphCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	CompositionGraphCapturePasses IncludeRenderPasses;//[Offset: 0x58, Size: 0x10] 0x78d72d1000
	bool bCaptureFramesInHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78d72d1080
	int HDRCompressionQuality;//[Offset: 0x6c, Size: 0x4] 0x78d72bf800
	byte CaptureGamut;//[Offset: 0x70, Size: 0x1] 0x78d72bf880
	SoftObjectPath PostProcessingMaterial;//[Offset: 0x78, Size: 0x18] 0x78d72bf900
	bool bDisableScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78d72bf980
	MaterialInterface* PostProcessingMaterialPtr;//[Offset: 0x98, Size: 0x8] 0x78d72bfa00

--------------------------------
Class: CompositionGraphCapturePasses
	FString[] Value;//[Offset: 0x0, Size: 0x10] 0x78dbe59e80

--------------------------------
Class: FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	int CompressionQuality;//[Offset: 0xd8, Size: 0x4] 0x78d72d0f80

--------------------------------
Class: ImageSequenceProtocol_BMP.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_PNG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_JPG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_EXR.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	bool bCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x78d72d0e80
	byte CaptureGamut;//[Offset: 0xd9, Size: 0x1] 0x78d72d0f00

--------------------------------
Class: MovieSceneCaptureInterface.Interface.Object

--------------------------------
Class: MovieSceneCapture.Object
	SoftClassPath ImageCaptureProtocolType;//[Offset: 0x38, Size: 0x18] 0x78d72d0900
	SoftClassPath AudioCaptureProtocolType;//[Offset: 0x50, Size: 0x18] 0x78d72d0980
	MovieSceneImageCaptureProtocolBase* ImageCaptureProtocol;//[Offset: 0x68, Size: 0x8] 0x78d72d0a00
	MovieSceneAudioCaptureProtocolBase* AudioCaptureProtocol;//[Offset: 0x70, Size: 0x8] 0x78d72d0a80
	MovieSceneCaptureSettings Settings;//[Offset: 0x78, Size: 0x70] 0x78d72d0b00
	bool bUseSeparateProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78d72d0b80
	bool bCloseEditorWhenCaptureStarts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1] 0x78d72d0c00
	FString AdditionalCommandLineArguments;//[Offset: 0xf0, Size: 0x10] 0x78d72d0c80
	FString InheritedCommandLineArguments;//[Offset: 0x100, Size: 0x10] 0x78d72d0d00
	void SetImageCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0xbd877bc 0x78d72ca960
	void SetAudioCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0xbd87714 0x78d72caa40
	MovieSceneCaptureProtocolBase* GetImageCaptureProtocol();// 0xbd87880 0x78d72cab20
	MovieSceneCaptureProtocolBase* GetAudioCaptureProtocol();// 0xbd87864 0x78d72cac00

--------------------------------
Class: MovieSceneCaptureSettings
	DirectoryPath OutputDirectory;//[Offset: 0x0, Size: 0x10] 0x78dbed8f80
	class GameModeBase* GameModeOverride;//[Offset: 0x10, Size: 0x8] 0x78dbe59de0
	FString OutputFormat;//[Offset: 0x18, Size: 0x10] 0x78dbed9000
	bool bOverwriteExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78dbed9080
	bool bUseRelativeFrameNumbers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78dbed9100
	int HandleFrames;//[Offset: 0x2c, Size: 0x4] 0x78dbed9180
	FString MovieExtension;//[Offset: 0x30, Size: 0x10] 0x78dbed9200
	byte ZeroPadFrameNumbers;//[Offset: 0x40, Size: 0x1] 0x78dbed9280
	FrameRate FrameRate;//[Offset: 0x44, Size: 0x8] 0x78dbed9300
	bool bUseCustomFrameRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78dbed9380
	FrameRate CustomFrameRate;//[Offset: 0x50, Size: 0x8] 0x78dbed9400
	CaptureResolution Resolution;//[Offset: 0x58, Size: 0x8] 0x78dbed7480
	bool bEnableTextureStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78dbed7500
	bool bCinematicEngineScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x78dbed7580
	bool bCinematicMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1] 0x78dbed7600
	bool bAllowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1] 0x78dbed7680
	bool bAllowTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78dbed7700
	bool bShowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1] 0x78dbed7780
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1] 0x78dbed7800
	bool bUsePathTracer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1] 0x78dbed7880
	int PathTracerSamplePerPixel;//[Offset: 0x68, Size: 0x4] 0x78dbed7900

--------------------------------
Class: CaptureResolution
	int ResX;//[Offset: 0x0, Size: 0x4] 0x78dbed9480
	int ResY;//[Offset: 0x4, Size: 0x4] 0x78dbed7400

--------------------------------
Class: LevelCapture.MovieSceneCapture.Object
	bool bAutoStartCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x78d72d0800
	Guid PrerequisiteActorId;//[Offset: 0x22c, Size: 0x10] 0x78d72d0880

--------------------------------
Class: MovieSceneCaptureEnvironment.Object
	static bool IsCaptureInProgress();// 0xbd87e50 0x78d72ca500
	static int GetCaptureFrameNumber();// 0xbd87ebc 0x78d72ca5e0
	static float GetCaptureElapsedTime();// 0xbd87e88 0x78d72ca6c0
	static MovieSceneImageCaptureProtocolBase* FindImageCaptureProtocol();// 0xbd87e1c 0x78d72ca7a0
	static MovieSceneAudioCaptureProtocolBase* FindAudioCaptureProtocol();// 0xbd87de8 0x78d72ca880

--------------------------------
Class: UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	World* World;//[Offset: 0x58, Size: 0x8] 0x78d72d2080
	void StopCapturingFinalPixels();// 0xbd88f0c 0x78d72c9700
	void StartCapturingFinalPixels(out const CapturedPixelsID StreamID);// 0xbd88f20 0x78d72c97e0
	void ResolveBuffer(Texture* Buffer, out const CapturedPixelsID BufferID);// 0xbd89030 0x78d72c98c0
	void OnWarmUp();// 0xaa7cd18 0x78d72c99a0
	void OnTick();// 0xaa7cd18 0x78d72c9a80
	void OnStartCapture();// 0xaa7cd18 0x78d72c9b60
	bool OnSetup();// 0xbd891c0 0x78d72c9c40
	void OnPreTick();// 0xaa7cd18 0x78d72c9d20
	void OnPixelsReceived(out const CapturedPixels Pixels, out const CapturedPixelsID ID, FrameMetrics FrameMetrics);// 0xaa7cd18 0x78d72c9e00
	void OnPauseCapture();// 0xaa7cd18 0x78d72c9ee0
	void OnFinalize();// 0xaa7cd18 0x78d72c9fc0
	void OnCaptureFrame();// 0xaa7cd18 0x78d72ca0a0
	bool OnCanFinalize();// 0xbd89180 0x78d72ca180
	void OnBeginFinalize();// 0xaa7cd18 0x78d72ca260
	FrameMetrics GetCurrentFrameMetrics();// 0xbd88dbc 0x78d72ca340
	FString GenerateFilename(out const FrameMetrics InFrameMetrics);// 0xbd88dd8 0x78d72ca420

--------------------------------
Class: CapturedPixelsID
	<FName,FName> Identifiers;//[Offset: 0x0, Size: 0x50] 0x78dbe9a000

--------------------------------
Class: CapturedPixels

--------------------------------
Class: FrameMetrics
	float TotalElapsedTime;//[Offset: 0x0, Size: 0x4] 0x78dbed7980
	float FrameDelta;//[Offset: 0x4, Size: 0x4] 0x78dbed7a00
	int FrameNumber;//[Offset: 0x8, Size: 0x4] 0x78dbed7a80
	int NumDroppedFrames;//[Offset: 0xc, Size: 0x4] 0x78dbed7b00

--------------------------------
Class: UserDefinedImageCaptureProtocol.UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	enum Format;//[Offset: 0xd8, Size: 0x1] 0x78d7276f00
	bool bEnableCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x78d72d1b80
	int CompressionQuality;//[Offset: 0xdc, Size: 0x4] 0x78d72d1c00
	void WriteImageToDisk(out const CapturedPixels PixelData, out const CapturedPixelsID StreamID, out const FrameMetrics FrameMetrics, bool bCopyImageData);// 0xbd89e0c 0x78d72c9460
	FString GenerateFilenameForCurrentFrame();// 0xbd8a100 0x78d72c9540
	FString GenerateFilenameForBuffer(Texture* Buffer, out const CapturedPixelsID StreamID);// 0xbd8a1d4 0x78d72c9620

--------------------------------
Class: VideoCaptureProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	bool bUseCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78d72d1a00
	float CompressionQuality;//[Offset: 0x6c, Size: 0x4] 0x78d72d1a80

--------------------------------
Class: MoviePlayerSettings.Object
	bool bWaitForMoviesToComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78d72d1880
	bool bMoviesAreSkippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78d72d1900
	FString[] StartupMovies;//[Offset: 0x30, Size: 0x10] 0x78d7276e60

--------------------------------
Class: Overlays.Object

--------------------------------
Class: BasicOverlays.Overlays.Object
	OverlayItem[] Overlays;//[Offset: 0x28, Size: 0x10] 0x78d733d1c0

--------------------------------
Class: OverlayItem
	Timespan startTime;//[Offset: 0x0, Size: 0x8] 0x78dbf74500
	Timespan endTime;//[Offset: 0x8, Size: 0x8] 0x78dbf74580
	FString Text;//[Offset: 0x10, Size: 0x10] 0x78dbf74600
	Vector2D Position;//[Offset: 0x20, Size: 0x8] 0x78dbf74680

--------------------------------
Class: LocalizedOverlays.Overlays.Object
	BasicOverlays* DefaultOverlays;//[Offset: 0x28, Size: 0x8] 0x78d7479500
	<FString,BasicOverlays*> LocaleToOverlaysMap;//[Offset: 0x30, Size: 0x50] 0x78d7104b40

--------------------------------
Class: BuildPatchManifest.Object
	byte ManifestFileVersion;//[Offset: 0x28, Size: 0x1] 0x78d747af00
	bool bIsFileData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78d747af80
	uint32 appid;//[Offset: 0x2c, Size: 0x4] 0x78d747b000
	FString AppName;//[Offset: 0x30, Size: 0x10] 0x78d747b080
	FString BuildVersion;//[Offset: 0x40, Size: 0x10] 0x78d747b100
	FString LaunchExe;//[Offset: 0x50, Size: 0x10] 0x78d747b180
	FString LaunchCommand;//[Offset: 0x60, Size: 0x10] 0x78d747b200
	<FString> PrereqIds;//[Offset: 0x70, Size: 0x50] 0x78d733cf40
	FString PrereqName;//[Offset: 0xc0, Size: 0x10] 0x78d747b300
	FString PrereqPath;//[Offset: 0xd0, Size: 0x10] 0x78d747b380
	FString PrereqArgs;//[Offset: 0xe0, Size: 0x10] 0x78d747b400
	FileManifestData[] FileManifestList;//[Offset: 0xf0, Size: 0x10] 0x78d733cfe0
	ChunkInfoData[] ChunkList;//[Offset: 0x100, Size: 0x10] 0x78d733d080
	CustomFieldData[] CustomFields;//[Offset: 0x110, Size: 0x10] 0x78d733d120

--------------------------------
Class: FileManifestData
	FString Filename;//[Offset: 0x0, Size: 0x10] 0x78dbf76000
	SHAHashData FileHash;//[Offset: 0x10, Size: 0x14] 0x78dbf76100
	ChunkPartData[] FileChunkParts;//[Offset: 0x28, Size: 0x10] 0x78dbf243e0
	FString[] InstallTags;//[Offset: 0x38, Size: 0x10] 0x78dbf24480
	bool bIsUnixExecutable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78dbf74300
	FString SymlinkTarget;//[Offset: 0x50, Size: 0x10] 0x78dbf74380
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78dbf74400
	bool bIsCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x78dbf74480

--------------------------------
Class: SHAHashData
	byte Hash;//[Offset: 0x0, Size: 0x1] 0x78dbf76080

--------------------------------
Class: ChunkPartData
	Guid Guid;//[Offset: 0x0, Size: 0x10] 0x78dbf76180
	uint32 Offset;//[Offset: 0x10, Size: 0x4] 0x78dbf76200
	uint32 Size;//[Offset: 0x14, Size: 0x4] 0x78dbf76280

--------------------------------
Class: ChunkInfoData
	Guid Guid;//[Offset: 0x0, Size: 0x10] 0x78dbf75d80
	uint64 Hash;//[Offset: 0x10, Size: 0x8] 0x78dbf75e00
	SHAHashData ShaHash;//[Offset: 0x18, Size: 0x14] 0x78dbf75e80
	int64 FileSize;//[Offset: 0x30, Size: 0x8] 0x78dbf75f00
	byte GroupNumber;//[Offset: 0x38, Size: 0x1] 0x78dbf75f80

--------------------------------
Class: CustomFieldData
	FString Key;//[Offset: 0x0, Size: 0x10] 0x78dbf75c80
	FString Value;//[Offset: 0x10, Size: 0x10] 0x78dbf75d00

--------------------------------
Class: ClothConfigCommon.ClothConfigBase.Object

--------------------------------
Class: ClothSharedConfigCommon.ClothConfigCommon.ClothConfigBase.Object

--------------------------------
Class: ClothingAssetCustomData.Object

--------------------------------
Class: ClothingAssetCommon.ClothingAssetBase.Object
	PhysicsAsset* PhysicsAsset;//[Offset: 0x48, Size: 0x8] 0x78d747a800
	<FName,ClothConfigBase*> ClothConfigs;//[Offset: 0x50, Size: 0x50] 0x78d7104a80
	ClothConfigBase* ClothSharedSimConfig;//[Offset: 0xa0, Size: 0x8] 0x78d747a980
	ClothConfigBase* ClothSimConfig;//[Offset: 0xa8, Size: 0x8] 0x78d747aa00
	ClothConfigBase* ChaosClothSimConfig;//[Offset: 0xb0, Size: 0x8] 0x78d747aa80
	ClothLODDataCommon_Legacy*[] ClothLODData;//[Offset: 0xb8, Size: 0x10] 0x78d733f560
	ClothLODDataCommon[] LODData;//[Offset: 0xc8, Size: 0x10] 0x78d733f600
	int[] LodMap;//[Offset: 0xd8, Size: 0x10] 0x78d733f6a0
	FName[] UsedBoneNames;//[Offset: 0xe8, Size: 0x10] 0x78d733f740
	int[] UsedBoneIndices;//[Offset: 0xf8, Size: 0x10] 0x78d733cea0
	int ReferenceBoneIndex;//[Offset: 0x108, Size: 0x4] 0x78d747ad80
	ClothingAssetCustomData* CustomData;//[Offset: 0x110, Size: 0x8] 0x78d747ae00
	ClothConfig_Legacy ClothConfig;//[Offset: 0x118, Size: 0xd4] 0x78d747ae80

--------------------------------
Class: ClothLODDataCommon_Legacy.Object
	ClothPhysicalMeshDataBase_Legacy* PhysicalMeshData;//[Offset: 0x28, Size: 0x8] 0x78d747a680
	ClothPhysicalMeshData ClothPhysicalMeshData;//[Offset: 0x30, Size: 0xf8] 0x78d747a700
	ClothCollisionData CollisionData;//[Offset: 0x128, Size: 0x40] 0x78d747a780

--------------------------------
Class: ClothPhysicalMeshData
	Vector[] Vertices;//[Offset: 0x0, Size: 0x10] 0x78dbf265a0
	Vector[] Normals;//[Offset: 0x10, Size: 0x10] 0x78dbf26640
	uint32[] Indices;//[Offset: 0x20, Size: 0x10] 0x78dbf266e0
	<uint32,PointWeightMap> WeightMaps;//[Offset: 0x30, Size: 0x50] 0x78dbf58a40
	float[] InverseMasses;//[Offset: 0x80, Size: 0x10] 0x78dbf23ee0
	ClothVertBoneData[] BoneData;//[Offset: 0x90, Size: 0x10] 0x78dbf23f80
	int MaxBoneWeights;//[Offset: 0xa0, Size: 0x4] 0x78dbf76880
	int NumFixedVerts;//[Offset: 0xa4, Size: 0x4] 0x78dbf76900
	uint32[] SelfCollisionIndices;//[Offset: 0xa8, Size: 0x10] 0x78dbf24020
	float[] MaxDistances;//[Offset: 0xb8, Size: 0x10] 0x78dbf240c0
	float[] BackstopDistances;//[Offset: 0xc8, Size: 0x10] 0x78dbf24160
	float[] BackstopRadiuses;//[Offset: 0xd8, Size: 0x10] 0x78dbf24200
	float[] AnimDriveMultipliers;//[Offset: 0xe8, Size: 0x10] 0x78dbf242a0

--------------------------------
Class: PointWeightMap
	float[] Values;//[Offset: 0x0, Size: 0x10] 0x78dbf23e40

--------------------------------
Class: ClothCollisionData
	ClothCollisionPrim_Sphere[] Spheres;//[Offset: 0x0, Size: 0x10] 0x78dbe5a380
	ClothCollisionPrim_SphereConnection[] SphereConnections;//[Offset: 0x10, Size: 0x10] 0x78dbe5a420
	ClothCollisionPrim_Convex[] Convexes;//[Offset: 0x20, Size: 0x10] 0x78dbe57cc0
	ClothCollisionPrim_Box[] Boxes;//[Offset: 0x30, Size: 0x10] 0x78dbe57d60

--------------------------------
Class: ClothCollisionPrim_Sphere
	int BoneIndex;//[Offset: 0x0, Size: 0x4] 0x78dbed4b80
	float Radius;//[Offset: 0x4, Size: 0x4] 0x78dbed4c00
	Vector LocalPosition;//[Offset: 0x8, Size: 0xc] 0x78dbed4c80

--------------------------------
Class: ClothCollisionPrim_SphereConnection
	int SphereIndices;//[Offset: 0x0, Size: 0x4] 0x78dbed4d80

--------------------------------
Class: ClothCollisionPrim_Convex
	Plane[] Planes;//[Offset: 0x0, Size: 0x10] 0x78dbe5a4c0
	Vector[] SurfacePoints;//[Offset: 0x10, Size: 0x10] 0x78dbe57c20
	int BoneIndex;//[Offset: 0x20, Size: 0x4] 0x78dbed4f80

--------------------------------
Class: ClothCollisionPrim_Box
	Vector LocalPosition;//[Offset: 0x0, Size: 0xc] 0x78dbed5080
	Quat LocalRotation;//[Offset: 0x10, Size: 0x10] 0x78dbed5100
	Vector HalfExtents;//[Offset: 0x20, Size: 0xc] 0x78dbed5180
	int BoneIndex;//[Offset: 0x2c, Size: 0x4] 0x78dbed5200

--------------------------------
Class: ClothLODDataCommon
	ClothPhysicalMeshData PhysicalMeshData;//[Offset: 0x0, Size: 0xf8] 0x78dbf76c00
	ClothCollisionData CollisionData;//[Offset: 0xf8, Size: 0x40] 0x78dbf76c80
	bool bUseMultipleInfluences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1] 0x78dbf76d00
	float SkinningKernelRadius;//[Offset: 0x13c, Size: 0x4] 0x78dbf76d80

--------------------------------
Class: ClothConfig_Legacy
	enum WindMethod;//[Offset: 0x0, Size: 0x1] 0x78dbf24340
	ClothConstraintSetup_Legacy VerticalConstraintConfig;//[Offset: 0x4, Size: 0x10] 0x78dbf76e80
	ClothConstraintSetup_Legacy HorizontalConstraintConfig;//[Offset: 0x14, Size: 0x10] 0x78dbf76f00
	ClothConstraintSetup_Legacy BendConstraintConfig;//[Offset: 0x24, Size: 0x10] 0x78dbf76f80
	ClothConstraintSetup_Legacy ShearConstraintConfig;//[Offset: 0x34, Size: 0x10] 0x78dbf77200
	float SelfCollisionRadius;//[Offset: 0x44, Size: 0x4] 0x78dbf77280
	float SelfCollisionStiffness;//[Offset: 0x48, Size: 0x4] 0x78dbf77300
	float SelfCollisionCullScale;//[Offset: 0x4c, Size: 0x4] 0x78dbf77380
	Vector Damping;//[Offset: 0x50, Size: 0xc] 0x78dbf75300
	float Friction;//[Offset: 0x5c, Size: 0x4] 0x78dbf75380
	float WindDragCoefficient;//[Offset: 0x60, Size: 0x4] 0x78dbf75400
	float WindLiftCoefficient;//[Offset: 0x64, Size: 0x4] 0x78dbf75480
	Vector LinearDrag;//[Offset: 0x68, Size: 0xc] 0x78dbf75500
	Vector AngularDrag;//[Offset: 0x74, Size: 0xc] 0x78dbf75580
	Vector LinearInertiaScale;//[Offset: 0x80, Size: 0xc] 0x78dbf75600
	Vector AngularInertiaScale;//[Offset: 0x8c, Size: 0xc] 0x78dbf75680
	Vector CentrifugalInertiaScale;//[Offset: 0x98, Size: 0xc] 0x78dbf75700
	float SolverFrequency;//[Offset: 0xa4, Size: 0x4] 0x78dbf75780
	float StiffnessFrequency;//[Offset: 0xa8, Size: 0x4] 0x78dbf75800
	float GravityScale;//[Offset: 0xac, Size: 0x4] 0x78dbf75880
	Vector GravityOverride;//[Offset: 0xb0, Size: 0xc] 0x78dbf75900
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1] 0x78dbf75980
	float TetherStiffness;//[Offset: 0xc0, Size: 0x4] 0x78dbf75a00
	float TetherLimit;//[Offset: 0xc4, Size: 0x4] 0x78dbf75a80
	float CollisionThickness;//[Offset: 0xc8, Size: 0x4] 0x78dbf75b00
	float AnimDriveSpringStiffness;//[Offset: 0xcc, Size: 0x4] 0x78dbf75b80
	float AnimDriveDamperStiffness;//[Offset: 0xd0, Size: 0x4] 0x78dbf75c00

--------------------------------
Class: ClothConstraintSetup_Legacy
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x78dbf77000
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4] 0x78dbf77080
	float StretchLimit;//[Offset: 0x8, Size: 0x4] 0x78dbf77100
	float CompressionLimit;//[Offset: 0xc, Size: 0x4] 0x78dbf77180

--------------------------------
Class: ClothConfigNv.ClothConfigCommon.ClothConfigBase.Object
	enum ClothingWindMethod;//[Offset: 0x28, Size: 0x1] 0x78d733f420
	ClothConstraintSetupNv VerticalConstraint;//[Offset: 0x2c, Size: 0x10] 0x78d747b800
	ClothConstraintSetupNv HorizontalConstraint;//[Offset: 0x3c, Size: 0x10] 0x78d747b880
	ClothConstraintSetupNv BendConstraint;//[Offset: 0x4c, Size: 0x10] 0x78d747b900
	ClothConstraintSetupNv ShearConstraint;//[Offset: 0x5c, Size: 0x10] 0x78d747b980
	float SelfCollisionRadius;//[Offset: 0x6c, Size: 0x4] 0x78d747ba00
	float SelfCollisionStiffness;//[Offset: 0x70, Size: 0x4] 0x78d747ba80
	float SelfCollisionCullScale;//[Offset: 0x74, Size: 0x4] 0x78d747bb00
	Vector Damping;//[Offset: 0x78, Size: 0xc] 0x78d747bb80
	float Friction;//[Offset: 0x84, Size: 0x4] 0x78d747bc00
	float WindDragCoefficient;//[Offset: 0x88, Size: 0x4] 0x78d747bc80
	float WindLiftCoefficient;//[Offset: 0x8c, Size: 0x4] 0x78d747bd00
	Vector LinearDrag;//[Offset: 0x90, Size: 0xc] 0x78d747bd80
	Vector AngularDrag;//[Offset: 0x9c, Size: 0xc] 0x78d747be00
	Vector LinearInertiaScale;//[Offset: 0xa8, Size: 0xc] 0x78d747be80
	Vector AngularInertiaScale;//[Offset: 0xb4, Size: 0xc] 0x78d747bf00
	Vector CentrifugalInertiaScale;//[Offset: 0xc0, Size: 0xc] 0x78d747bf80
	float SolverFrequency;//[Offset: 0xcc, Size: 0x4] 0x78d747c000
	float StiffnessFrequency;//[Offset: 0xd0, Size: 0x4] 0x78d747c080
	float GravityScale;//[Offset: 0xd4, Size: 0x4] 0x78d747c100
	Vector GravityOverride;//[Offset: 0xd8, Size: 0xc] 0x78d747c180
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1] 0x78d747c200
	float TetherStiffness;//[Offset: 0xe8, Size: 0x4] 0x78d747c280
	float TetherLimit;//[Offset: 0xec, Size: 0x4] 0x78d747c300
	float CollisionThickness;//[Offset: 0xf0, Size: 0x4] 0x78d747c380
	float AnimDriveSpringStiffness;//[Offset: 0xf4, Size: 0x4] 0x78d747c400
	float AnimDriveDamperStiffness;//[Offset: 0xf8, Size: 0x4] 0x78d747c480
	enum WindMethod;//[Offset: 0xfc, Size: 0x1] 0x78d733f4c0
	ClothConstraintSetup_Legacy VerticalConstraintConfig;//[Offset: 0x100, Size: 0x10] 0x78d747c580
	ClothConstraintSetup_Legacy HorizontalConstraintConfig;//[Offset: 0x110, Size: 0x10] 0x78d747c600
	ClothConstraintSetup_Legacy BendConstraintConfig;//[Offset: 0x120, Size: 0x10] 0x78d747a580
	ClothConstraintSetup_Legacy ShearConstraintConfig;//[Offset: 0x130, Size: 0x10] 0x78d747a600

--------------------------------
Class: ClothConstraintSetupNv
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x78dbf78080
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4] 0x78dbf78100
	float StretchLimit;//[Offset: 0x8, Size: 0x4] 0x78dbf78180
	float CompressionLimit;//[Offset: 0xc, Size: 0x4] 0x78dbf78200

--------------------------------
Class: ClothingSimulationFactoryNv.ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractorNv.ClothingSimulationInteractor.Object
	void SetAnimDriveDamperStiffness(float InStiffness);// 0xcb76ba0 0x78d74668a0

--------------------------------
Class: ClothPhysicalMeshDataNv_Legacy.ClothPhysicalMeshDataBase_Legacy.Object
	float[] MaxDistances;//[Offset: 0xe0, Size: 0x10] 0x78d733f1a0
	float[] BackstopDistances;//[Offset: 0xf0, Size: 0x10] 0x78d733f240
	float[] BackstopRadiuses;//[Offset: 0x100, Size: 0x10] 0x78d733f2e0
	float[] AnimDriveMultipliers;//[Offset: 0x110, Size: 0x10] 0x78d733f380

--------------------------------
Class: AndroidRuntimeSettings.Object
	FString PackageName;//[Offset: 0x28, Size: 0x10] 0x78d747fa00
	int StoreVersion;//[Offset: 0x38, Size: 0x4] 0x78d747fa80
	int StoreVersionOffsetArmV7;//[Offset: 0x3c, Size: 0x4] 0x78d747fb00
	int StoreVersionOffsetArm64;//[Offset: 0x40, Size: 0x4] 0x78d747fb80
	int StoreVersionOffsetX8664;//[Offset: 0x44, Size: 0x4] 0x78d747fc00
	FString ApplicationDisplayName;//[Offset: 0x48, Size: 0x10] 0x78d747fc80
	FString VersionDisplayName;//[Offset: 0x58, Size: 0x10] 0x78d747fd00
	int MinSDKVersion;//[Offset: 0x68, Size: 0x4] 0x78d747fd80
	int TargetSDKVersion;//[Offset: 0x6c, Size: 0x4] 0x78d747fe00
	byte InstallLocation;//[Offset: 0x70, Size: 0x1] 0x78d747fe80
	bool bEnableGradle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x78d747ff00
	bool bEnableLint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1] 0x78d747ff80
	bool bPackageDataInsideApk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1] 0x78d747e780
	bool bCreateAllPlatformsInstall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78d747e800
	bool bDisableVerifyOBBOnStartUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1] 0x78d747e880
	bool bForceSmallOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1] 0x78d747e900
	bool bAllowLargeOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 0x1] 0x78d747e980
	bool bAllowPatchOBBFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78d747ea00
	bool bAllowOverflowOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x78d747ea80
	bool bUseExternalFilesDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x78d747eb00
	bool bPublicLogFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1] 0x78d747eb80
	byte Orientation;//[Offset: 0x7c, Size: 0x1] 0x78d747ec00
	float MaxAspectRatio;//[Offset: 0x80, Size: 0x4] 0x78d747ec80
	bool bUseDisplayCutout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x78d747ed00
	bool bRestoreNotificationsOnReboot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1] 0x78d747ed80
	bool bFullScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1] 0x78d747ee00
	bool bEnableNewKeyboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87, Size: 0x1] 0x78d747ee80
	byte DepthBufferPreference;//[Offset: 0x88, Size: 0x1] 0x78d747ef00
	bool bValidateTextureFormats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x78d747ef80
	bool bEnableBundle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1] 0x78d747f000
	bool bEnableUniversalAPK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b, Size: 0x1] 0x78d747f080
	bool bBundleABISplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1] 0x78d747f100
	bool bBundleLanguageSplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 0x1] 0x78d747f180
	bool bBundleDensitySplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 0x1] 0x78d747f200
	FString[] ExtraManifestNodeTags;//[Offset: 0x90, Size: 0x10] 0x78d733ec00
	FString[] ExtraApplicationNodeTags;//[Offset: 0xa0, Size: 0x10] 0x78d733eca0
	FString ExtraApplicationSettings;//[Offset: 0xb0, Size: 0x10] 0x78d747f380
	FString[] ExtraActivityNodeTags;//[Offset: 0xc0, Size: 0x10] 0x78d733ed40
	FString ExtraActivitySettings;//[Offset: 0xd0, Size: 0x10] 0x78d747f480
	FString[] ExtraPermissions;//[Offset: 0xe0, Size: 0x10] 0x78d733ede0
	bool bAndroidVoiceEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x78d747f580
	byte[] PackageForOculusMobile;//[Offset: 0xf8, Size: 0x10] 0x78d733ee80
	bool bRemoveOSIG;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1] 0x78d747f680
	byte[] GoogleVRCaps;//[Offset: 0x110, Size: 0x10] 0x78d733ef20
	bool bGoogleVRSustainedPerformance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x78d747f780
	FString KeyStore;//[Offset: 0x128, Size: 0x10] 0x78d747d700
	FString KeyAlias;//[Offset: 0x138, Size: 0x10] 0x78d747d780
	FString KeyStorePassword;//[Offset: 0x148, Size: 0x10] 0x78d747d800
	FString KeyPassword;//[Offset: 0x158, Size: 0x10] 0x78d747d880
	bool bBuildForArmV7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1] 0x78d747d900
	bool bBuildForArm64;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1] 0x78d747d980
	bool bBuildForX8664;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1] 0x78d747da00
	bool bBuildForES31;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 0x1] 0x78d747da80
	bool bSupportsVulkan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1] 0x78d747db00
	bool bSupportsVulkanSM5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1] 0x78d747db80
	bool bAndroidOpenGLSupportsBackbufferSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e, Size: 0x1] 0x78d747dc00
	bool bDetectVulkanByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1] 0x78d747dc80
	bool bBuildWithHiddenSymbolVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1] 0x78d747dd00
	bool bSaveSymbols;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1] 0x78d747dd80
	bool bForceLDLinker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 0x1] 0x78d747de00
	bool bEnableGooglePlaySupport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x173, Size: 0x1] 0x78d747de80
	bool bUseGetAccounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1] 0x78d747df00
	FString GamesAppID;//[Offset: 0x178, Size: 0x10] 0x78d747df80
	GooglePlayAchievementMapping[] AchievementMap;//[Offset: 0x188, Size: 0x10] 0x78d733efc0
	GooglePlayLeaderboardMapping[] LeaderboardMap;//[Offset: 0x198, Size: 0x10] 0x78d733f060
	bool bEnableSnapshots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1] 0x78d747e100
	bool bSupportAdMob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1] 0x78d747e180
	FString AdMobAdUnitID;//[Offset: 0x1b0, Size: 0x10] 0x78d747e200
	FString[] AdMobAdUnitIDs;//[Offset: 0x1c0, Size: 0x10] 0x78d733f100
	FString GooglePlayLicenseKey;//[Offset: 0x1d0, Size: 0x10] 0x78d747e300
	FString GCMClientSenderID;//[Offset: 0x1e0, Size: 0x10] 0x78d747e380
	bool bShowLaunchImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1] 0x78d747e400
	bool bAllowIMU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1] 0x78d747e480
	bool bAllowControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1] 0x78d747e500
	bool bBlockAndroidKeysOnControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3, Size: 0x1] 0x78d747e580
	bool bControllersBlockDeviceFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 0x1] 0x78d747e600
	byte AndroidAudio;//[Offset: 0x1f5, Size: 0x1] 0x78d747e680
	int AudioSampleRate;//[Offset: 0x1f8, Size: 0x4] 0x78d747e700
	int AudioCallbackBufferFrameSize;//[Offset: 0x1fc, Size: 0x4] 0x78d747c680
	int AudioNumBuffersToEnqueue;//[Offset: 0x200, Size: 0x4] 0x78d747c700
	int AudioMaxChannels;//[Offset: 0x204, Size: 0x4] 0x78d747c780
	int AudioNumSourceWorkers;//[Offset: 0x208, Size: 0x4] 0x78d747c800
	FString SpatializationPlugin;//[Offset: 0x210, Size: 0x10] 0x78d747c880
	FString ReverbPlugin;//[Offset: 0x220, Size: 0x10] 0x78d747c900
	FString OcclusionPlugin;//[Offset: 0x230, Size: 0x10] 0x78d747c980
	PlatformRuntimeAudioCompressionOverrides CompressionOverrides;//[Offset: 0x240, Size: 0x10] 0x78d747ca00
	bool bUseAudioStreamCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x78d747ca80
	int CacheSizeKB;//[Offset: 0x254, Size: 0x4] 0x78d747cb00
	int MaxChunkSizeOverrideKB;//[Offset: 0x258, Size: 0x4] 0x78d747cb80
	bool bResampleForDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1] 0x78d747cc00
	int SoundCueCookQualityIndex;//[Offset: 0x260, Size: 0x4] 0x78d747cc80
	float MaxSampleRate;//[Offset: 0x264, Size: 0x4] 0x78d747cd00
	float HighSampleRate;//[Offset: 0x268, Size: 0x4] 0x78d747cd80
	float MedSampleRate;//[Offset: 0x26c, Size: 0x4] 0x78d747ce00
	float LowSampleRate;//[Offset: 0x270, Size: 0x4] 0x78d747ce80
	float MinSampleRate;//[Offset: 0x274, Size: 0x4] 0x78d747cf00
	float CompressionQualityModifier;//[Offset: 0x278, Size: 0x4] 0x78d747cf80
	float AutoStreamingThreshold;//[Offset: 0x27c, Size: 0x4] 0x78d747d000
	byte AndroidGraphicsDebugger;//[Offset: 0x280, Size: 0x1] 0x78d747d080
	DirectoryPath MaliGraphicsDebuggerPath;//[Offset: 0x288, Size: 0x10] 0x78d747d100
	bool bMultiTargetFormat_ETC2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78d747d180
	bool bMultiTargetFormat_DXT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1] 0x78d747d200
	bool bMultiTargetFormat_ASTC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 0x1] 0x78d747d280
	float TextureFormatPriority_ETC2;//[Offset: 0x29c, Size: 0x4] 0x78d747d300
	float TextureFormatPriority_DXT;//[Offset: 0x2a0, Size: 0x4] 0x78d747d380
	float TextureFormatPriority_ASTC;//[Offset: 0x2a4, Size: 0x4] 0x78d747d400
	FString SDKAPILevelOverride;//[Offset: 0x2a8, Size: 0x10] 0x78d747d480
	FString NDKAPILevelOverride;//[Offset: 0x2b8, Size: 0x10] 0x78d747d500
	bool bStreamLandscapeMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78d747d580

--------------------------------
Class: GooglePlayAchievementMapping
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78dbf77680
	FString AchievementID;//[Offset: 0x10, Size: 0x10] 0x78dbf77700

--------------------------------
Class: GooglePlayLeaderboardMapping
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78dbf77780
	FString LeaderboardID;//[Offset: 0x10, Size: 0x10] 0x78dbf77800

--------------------------------
Class: PlatformRuntimeAudioCompressionOverrides
	bool bOverrideCompressionTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78dbed0f80
	float DurationThreshold;//[Offset: 0x4, Size: 0x4] 0x78dbed1000
	int MaxNumRandomBranches;//[Offset: 0x8, Size: 0x4] 0x78dbed1080
	int SoundCueQualityIndex;//[Offset: 0xc, Size: 0x4] 0x78dbe8f800

--------------------------------
Class: WebBrowserTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x228, Size: 0x8] 0x78d7480d00
	NavDataConfig NavDataConfig;//[Offset: 0x230, Size: 0x78] 0x78d7480d80
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x78d7480e00
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1] 0x78d7480e80
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1] 0x78d7480f00
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 0x1] 0x78d7480f80
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 0x1] 0x78d7481000
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 0x1] 0x78d7481080
	enum RuntimeGeneration;//[Offset: 0x2a9, Size: 0x1] 0x78d733eac0
	float ObservedPathsTickInterval;//[Offset: 0x2ac, Size: 0x4] 0x78d747f880
	uint32 DataVersion;//[Offset: 0x2b0, Size: 0x4] 0x78d747f900
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3c0, Size: 0x10] 0x78d733eb60

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8] 0x78dbf32d00
	Color Color;//[Offset: 0x38, Size: 0x4] 0x78dbf32d80
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc] 0x78dbf32e00
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8] 0x78dbf209c0
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28] 0x78dbf20a60

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10] 0x78dbf79400
	int AreaID;//[Offset: 0x10, Size: 0x4] 0x78dbf79480
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8] 0x78dbf263c0

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: NavArea_Default.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_LowHeight.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Null.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Obstacle.NavArea.NavAreaBase.Object

--------------------------------
Class: NavAreaMeta.NavArea.NavAreaBase.Object

--------------------------------
Class: NavAreaMeta_SwitchByAgent.NavAreaMeta.NavArea.NavAreaBase.Object
	class NavArea* Agent0Area;//[Offset: 0x48, Size: 0x8] 0x78d733fd80
	class NavArea* Agent1Area;//[Offset: 0x50, Size: 0x8] 0x78d733fe20
	class NavArea* Agent2Area;//[Offset: 0x58, Size: 0x8] 0x78d733fec0
	class NavArea* Agent3Area;//[Offset: 0x60, Size: 0x8] 0x78d733ff60
	class NavArea* Agent4Area;//[Offset: 0x68, Size: 0x8] 0x78d733e340
	class NavArea* Agent5Area;//[Offset: 0x70, Size: 0x8] 0x78d733e3e0
	class NavArea* Agent6Area;//[Offset: 0x78, Size: 0x8] 0x78d733e480
	class NavArea* Agent7Area;//[Offset: 0x80, Size: 0x8] 0x78d733e520
	class NavArea* Agent8Area;//[Offset: 0x88, Size: 0x8] 0x78d733e5c0
	class NavArea* Agent9Area;//[Offset: 0x90, Size: 0x8] 0x78d733e660
	class NavArea* Agent10Area;//[Offset: 0x98, Size: 0x8] 0x78d733e700
	class NavArea* Agent11Area;//[Offset: 0xa0, Size: 0x8] 0x78d733e7a0
	class NavArea* Agent12Area;//[Offset: 0xa8, Size: 0x8] 0x78d733e840
	class NavArea* Agent13Area;//[Offset: 0xb0, Size: 0x8] 0x78d733e8e0
	class NavArea* Agent14Area;//[Offset: 0xb8, Size: 0x8] 0x78d733e980
	class NavArea* Agent15Area;//[Offset: 0xc0, Size: 0x8] 0x78d733ea20

--------------------------------
Class: NavigationGraph.NavigationData.Actor.Object

--------------------------------
Class: NavigationGraphNode.Actor.Object

--------------------------------
Class: NavigationGraphNodeComponent.SceneComponent.ActorComponent.Object
	NavGraphNode Node;//[Offset: 0x208, Size: 0x18] 0x78d7482080
	NavigationGraphNodeComponent* NextNodeComponent;//[Offset: 0x220, Size: 0x8] 0x78d7482100
	NavigationGraphNodeComponent* PrevNodeComponent;//[Offset: 0x228, Size: 0x8] 0x78d7480080

--------------------------------
Class: NavGraphNode
	Object* Owner;//[Offset: 0x0, Size: 0x8] 0x78dbf79380

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xb8, Size: 0x4] 0x78d7481f80
	float TileRemovalRadius;//[Offset: 0xbc, Size: 0x4] 0x78d7482000

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x28, Size: 0x10] 0x78d7481980
	Vector[] PathPoints;//[Offset: 0x38, Size: 0x10] 0x78d733fb00
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 0x1] 0x78d7481a80
	bool IsValid();// 0xccf4e8c 0x78d74661a0
	bool IsStringPulled();// 0xccf4e54 0x78d7466280
	bool IsPartial();// 0xccf4ec4 0x78d7466360
	float GetPathLength();// 0xccf4f30 0x78d7466440
	float GetPathCost();// 0xccf4efc 0x78d7466520
	FString GetDebugString();// 0xccf5108 0x78d7466600
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0xccf4f64 0x78d74666e0
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0xccf500c 0x78d74667c0

--------------------------------
Class: NavigationPathGenerator.Interface.Object

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10] 0x78d733fa60
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4] 0x78d7481880
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4] 0x78d7481900

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8] 0x78dbf26320
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4] 0x78dbf78980
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4] 0x78dbf78a00
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78dbf78a80
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x78dbf78b00
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x78dbf78b80

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbf78c00
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbf78c80
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbf78d00
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78dbf78d80
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78dbf78e00
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78dbf78e80
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78dbf78f00
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78dbf78f80
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78dbf79000
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78dbf79080
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78dbf79100
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x78dbf79180
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x78dbf79200
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x78dbf79280
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x78dbf79300
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x78e711e880

--------------------------------
Class: NavigationSystemV1.NavigationSystemBase.Object
	NavigationData* MainNavData;//[Offset: 0x28, Size: 0x8] 0x78d7484300
	NavigationData* AbstractNavData;//[Offset: 0x30, Size: 0x8] 0x78d7484380
	FName DefaultAgentName;//[Offset: 0x38, Size: 0x8] 0x78d7484400
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x40, Size: 0x28] 0x78d7490a60
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78d7484480
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x78d7484500
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x78d7484580
	bool bShouldDiscardSubLevelNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x78d7484600
	bool bTickWhilePaused;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x78d7484680
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x78d7484700
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x78d7484780
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x78d7484800
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x69, Size: 0x1] 0x78d7484880
	float ActiveTilesUpdateInterval;//[Offset: 0x6c, Size: 0x4] 0x78d7484900
	enum DataGatheringMode;//[Offset: 0x70, Size: 0x1] 0x78d7490b00
	float DirtyAreaWarningSizeThreshold;//[Offset: 0x74, Size: 0x4] 0x78d7484a00
	NavDataConfig[] SupportedAgents;//[Offset: 0x78, Size: 0x10] 0x78d7490ba0
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x88, Size: 0x4] 0x78d7484b00
	NavigationData*[] NavDataSet;//[Offset: 0x90, Size: 0x10] 0x78d7490c40
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0xa0, Size: 0x10] 0x78d7490ce0
	delegate OnNavDataRegisteredEvent;//[Offset: 0xc0, Size: 0x10] 0x78d7484c80
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xd0, Size: 0x10] 0x78d7484d00
	enum OperationMode;//[Offset: 0x1bc, Size: 0x1] 0x78d7490d80
	float DirtyAreasUpdateFreq;//[Offset: 0x15bc, Size: 0x4] 0x78d7484e00
	void UnregisterNavigationInvoker(Actor* Invoker);// 0xccf69bc 0x78d7468660
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0xccf5fe4 0x78d7468740
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0xccf60cc 0x78d7468820
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0xccf6bb4 0x78d7468900
	void SetGeometryGatheringMode(enum NewMode);// 0xccf6914 0x78d74689e0
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0xccf6ba0 0x78d7468ac0
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0xccf6a64 0x78d7468ba0
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0xccf6554 0x78d7468c80
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0xccf6724 0x78d7468d60
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0xccf6c5c 0x78d7468e40
	bool K2_ReplaceAreaInOctreeData(const Object* Object, class NavArea OldArea, class NavArea NewArea);// 0xccf67cc 0x78d7468f20
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0xccf7c70 0x78d7469000
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xccf7a48 0x78d7465720
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xccf5dbc 0x78d7465800
	static bool K2_GetRandomLocationInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xccf7820 0x78d74658e0
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0xccf7278 0x78d74659c0
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0xccf7324 0x78d7465aa0
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xccf6380 0x78d7465b80
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xccf61ac 0x78d7465c60
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xccf73d0 0x78d7465d40
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xccf75f8 0x78d7465e20
	static NavigationSystemV1* GetNavigationSystem(Object* WorldContextObject);// 0xccf7e94 0x78d7465f00
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0xccf70a0 0x78d7465fe0
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0xccf6e84 0x78d74660c0

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x258, Size: 0x4] 0x78d7486a80

--------------------------------
Class: NavigationSystemModuleConfig.NavigationSystemConfig.Object
	bool bStrictlyStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d, Size: 0x1] 0x78d7486200
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d, Size: 0x1] 0x78d7486280
	bool bAutoSpawnMissingNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d, Size: 0x1] 0x78d7486300
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4d, Size: 0x1] 0x78d7484280

--------------------------------
Class: NavigationTestingActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x230, Size: 0x8] 0x78d7485300
	NavigationInvokerComponent* InvokerComponent;//[Offset: 0x238, Size: 0x8] 0x78d7485380
	bool bActAsNavigationInvoker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x78d7485400
	NavAgentProperties NavAgentProps;//[Offset: 0x248, Size: 0x30] 0x78d7485480
	Vector QueryingExtent;//[Offset: 0x278, Size: 0xc] 0x78d7485500
	NavigationData* MyNavData;//[Offset: 0x288, Size: 0x8] 0x78d7485580
	Vector ProjectedLocation;//[Offset: 0x290, Size: 0xc] 0x78d7485600
	bool bProjectedLocationValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1] 0x78d7485680
	bool bSearchStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 0x1] 0x78d7485700
	float CostLimitFactor;//[Offset: 0x2a0, Size: 0x4] 0x78d7485780
	float MinimumCostLimit;//[Offset: 0x2a4, Size: 0x4] 0x78d7485800
	bool bBacktracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x78d7485880
	bool bUseHierarchicalPathfinding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1] 0x78d7485900
	bool bGatherDetailedInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1] 0x78d7485980
	bool bDrawDistanceToWall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 0x1] 0x78d7485a00
	bool bShowNodePool;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 0x1] 0x78d7485a80
	bool bShowBestPath;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 0x1] 0x78d7485b00
	bool bShowDiffWithPreviousStep;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a8, Size: 0x1] 0x78d7485b80
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2a8, Size: 0x1] 0x78d7485c00
	byte CostDisplayMode;//[Offset: 0x2a9, Size: 0x1] 0x78d7485c80
	Vector2D TextCanvasOffset;//[Offset: 0x2ac, Size: 0x8] 0x78d7485d00
	bool bPathExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1] 0x78d7485d80
	bool bPathIsPartial;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b4, Size: 0x1] 0x78d7485e00
	bool bPathSearchOutOfNodes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b4, Size: 0x1] 0x78d7485e80
	float PathfindingTime;//[Offset: 0x2b8, Size: 0x4] 0x78d7485f00
	float PathCost;//[Offset: 0x2bc, Size: 0x4] 0x78d7485f80
	int PathfindingSteps;//[Offset: 0x2c0, Size: 0x4] 0x78d7486000
	NavigationTestingActor* OtherActor;//[Offset: 0x2c8, Size: 0x8] 0x78d7486080
	class NavigationQueryFilter* FilterClass;//[Offset: 0x2d0, Size: 0x8] 0x78d74909c0
	int ShowStepIndex;//[Offset: 0x2d8, Size: 0x4] 0x78d7486100
	float OffsetFromCornersDistance;//[Offset: 0x2dc, Size: 0x4] 0x78d7486180

--------------------------------
Class: NavLinkComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NavigationLink[] Links;//[Offset: 0x478, Size: 0x10] 0x78d7490920

--------------------------------
Class: NavLinkCustomInterface.Interface.Object

--------------------------------
Class: NavLinkHostInterface.Interface.Object

--------------------------------
Class: NavLinkRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavLinkTrivial.NavLinkDefinition.Object

--------------------------------
Class: NavMeshRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0xe8, Size: 0x8] 0x78d7490600
	Vector FailsafeExtent;//[Offset: 0xf0, Size: 0xc] 0x78d7486980
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1] 0x78d7486a00
	void SetAreaClass(class NavArea NewAreaClass);// 0xccfcdfc 0x78d74684a0

--------------------------------
Class: NavModifierVolume.Volume.Brush.Actor.Object
	class NavArea* AreaClass;//[Offset: 0x260, Size: 0x8] 0x78d74904c0
	bool bMaskFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x78d7486900
	void SetAreaClass(class NavArea NewAreaClass);// 0xccfd0dc 0x78d74683c0

--------------------------------
Class: NavNodeInterface.Interface.Object

--------------------------------
Class: NavSystemConfigOverride.Actor.Object
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x220, Size: 0x8] 0x78d7486780
	enum OverridePolicy;//[Offset: 0x228, Size: 0x1] 0x78d7490420
	bool bLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x229, Size: 0x1] 0x78d7486880

--------------------------------
Class: NavTestRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: RecastFilter_UseDefaultArea.NavigationQueryFilter.Object

--------------------------------
Class: RecastNavMesh.NavigationData.Actor.Object
	bool bDrawTriangleEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 0x1] 0x78d7488b00
	bool bDrawPolyEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x424, Size: 0x1] 0x78d7488b80
	bool bDrawFilledPolys;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x424, Size: 0x1] 0x78d7488c00
	bool bDrawNavMeshEdges;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x424, Size: 0x1] 0x78d7488c80
	bool bDrawTileBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x424, Size: 0x1] 0x78d7488d00
	bool bDrawPathCollidingGeometry;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x424, Size: 0x1] 0x78d7488d80
	bool bDrawTileLabels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x424, Size: 0x1] 0x78d7488e00
	bool bDrawPolygonLabels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x424, Size: 0x1] 0x78d7488e80
	bool bDrawDefaultPolygonCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x425, Size: 0x1] 0x78d7488f00
	bool bDrawLabelsOnPathNodes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x425, Size: 0x1] 0x78d7488f80
	bool bDrawNavLinks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x425, Size: 0x1] 0x78d7489000
	bool bDrawFailedNavLinks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x425, Size: 0x1] 0x78d7489080
	bool bDrawClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x425, Size: 0x1] 0x78d7489100
	bool bDrawOctree;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x425, Size: 0x1] 0x78d7489180
	bool bDrawOctreeDetails;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x425, Size: 0x1] 0x78d7489200
	bool bDrawMarkedForbiddenPolys;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x425, Size: 0x1] 0x78d7489280
	bool bDistinctlyDrawTilesBeingBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x426, Size: 0x1] 0x78d7489300
	float DrawOffset;//[Offset: 0x428, Size: 0x4] 0x78d7489380
	bool bFixedTilePoolSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x42c, Size: 0x1] 0x78d7489400
	int TilePoolSize;//[Offset: 0x430, Size: 0x4] 0x78d7489480
	float TileSizeUU;//[Offset: 0x434, Size: 0x4] 0x78d7487400
	float CellSize;//[Offset: 0x438, Size: 0x4] 0x78d7487480
	float CellHeight;//[Offset: 0x43c, Size: 0x4] 0x78d7487500
	float AgentRadius;//[Offset: 0x440, Size: 0x4] 0x78d7487580
	float AgentHeight;//[Offset: 0x444, Size: 0x4] 0x78d7487600
	float AgentMaxSlope;//[Offset: 0x448, Size: 0x4] 0x78d7487680
	float AgentMaxStepHeight;//[Offset: 0x44c, Size: 0x4] 0x78d7487700
	float MinRegionArea;//[Offset: 0x450, Size: 0x4] 0x78d7487780
	float MergeRegionSize;//[Offset: 0x454, Size: 0x4] 0x78d7487800
	float MaxSimplificationError;//[Offset: 0x458, Size: 0x4] 0x78d7487880
	int MaxSimultaneousTileGenerationJobsCount;//[Offset: 0x45c, Size: 0x4] 0x78d7487900
	int TileNumberHardLimit;//[Offset: 0x460, Size: 0x4] 0x78d7487980
	int PolyRefTileBits;//[Offset: 0x464, Size: 0x4] 0x78d7487a00
	int PolyRefNavPolyBits;//[Offset: 0x468, Size: 0x4] 0x78d7487a80
	int PolyRefSaltBits;//[Offset: 0x46c, Size: 0x4] 0x78d7487b00
	Vector NavMeshOriginOffset;//[Offset: 0x470, Size: 0xc] 0x78d7487b80
	float DefaultDrawDistance;//[Offset: 0x47c, Size: 0x4] 0x78d7487c00
	float DefaultMaxSearchNodes;//[Offset: 0x480, Size: 0x4] 0x78d7487c80
	float DefaultMaxHierarchicalSearchNodes;//[Offset: 0x484, Size: 0x4] 0x78d7487d00
	byte RegionPartitioning;//[Offset: 0x488, Size: 0x1] 0x78d7487d80
	byte LayerPartitioning;//[Offset: 0x489, Size: 0x1] 0x78d7487e00
	int RegionChunkSplits;//[Offset: 0x48c, Size: 0x4] 0x78d7487e80
	int LayerChunkSplits;//[Offset: 0x490, Size: 0x4] 0x78d7487f00
	bool bSortNavigationAreasByCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x494, Size: 0x1] 0x78d7487f80
	bool bPerformVoxelFiltering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x494, Size: 0x1] 0x78d7488000
	bool bMarkLowHeightAreas;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x494, Size: 0x1] 0x78d7488080
	bool bUseExtraTopCellWhenMarkingAreas;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x494, Size: 0x1] 0x78d7488100
	bool bFilterLowSpanSequences;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x494, Size: 0x1] 0x78d7488180
	bool bFilterLowSpanFromTileCache;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x494, Size: 0x1] 0x78d7488200
	bool bDoFullyAsyncNavDataGathering;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x494, Size: 0x1] 0x78d7488280
	bool bUseBetterOffsetsFromCorners;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x494, Size: 0x1] 0x78d7488300
	bool bStoreEmptyTileLayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x495, Size: 0x1] 0x78d7488380
	bool bUseVirtualFilters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x495, Size: 0x1] 0x78d7488400
	bool bAllowNavLinkAsPathEnd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x495, Size: 0x1] 0x78d7486380
	bool bUseVoxelCache;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x495, Size: 0x1] 0x78d7486400
	float TileSetUpdateInterval;//[Offset: 0x498, Size: 0x4] 0x78d7486480
	float HeuristicScale;//[Offset: 0x49c, Size: 0x4] 0x78d7486500
	float VerticalDeviationFromGroundCompensation;//[Offset: 0x4a0, Size: 0x4] 0x78d7486580
	bool K2_ReplaceAreaInTileBounds(Box Bounds, class NavArea OldArea, class NavArea NewArea, bool ReplaceLinks);// 0xccfdd1c 0x78d74682e0

--------------------------------
Class: RecastNavMeshDataChunk.NavigationDataChunk.Object

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8] 0x78d35ae980
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1] 0x78cdd5f9c0
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8] 0x78d35aea80
	void ReadyForActivation();// 0xcd07054 0x78d36020e0
	void GenericGameplayTaskDelegate__DelegateSignature();// 0xaa7cd18 0x78d36021c0
	void EndTask();// 0xcd07040 0x78d36022a0

--------------------------------
Class: GameplayTask_ClaimResource.GameplayTask.Object
	static GameplayTask_ClaimResource* ClaimResources(interface classNone InTaskOwner, class GameplayTaskResource[] ResourceClasses, const byte Priority, const FName TaskInstanceName);// 0xcd073f8 0x78d7468120
	static GameplayTask_ClaimResource* ClaimResource(interface classNone InTaskOwner, class GameplayTaskResource ResourceClass, const byte Priority, const FName TaskInstanceName);// 0xcd07650 0x78d7468200

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4] 0x78d748a080
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1] 0x78d748a100
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x78d748a180

--------------------------------
Class: GameplayTask_SpawnActor.GameplayTask.Object
	delegate success;//[Offset: 0x60, Size: 0x10] 0x78d748a200
	delegate DidNotSpawn;//[Offset: 0x70, Size: 0x10] 0x78d748a280
	class Actor* ClassToSpawn;//[Offset: 0x98, Size: 0x8] 0x78d7492900
	static GameplayTask_SpawnActor* SpawnActor(interface classNone TaskOwner, Vector SpawnLocation, Rotator SpawnRotation, class Actor Class, bool bSpawnOnlyOnAuthority);// 0xcd07f00 0x78d7467e80
	void FinishSpawningActor(Object* WorldContextObject, Actor* SpawnedActor);// 0xcd07cf4 0x78d7467f60
	bool BeginSpawningActor(Object* WorldContextObject, out Actor* SpawnedActor);// 0xcd07dec 0x78d7468040

--------------------------------
Class: GameplayTask_TimeLimitedExecution.GameplayTask.Object
	delegate OnFinished;//[Offset: 0x60, Size: 0x10] 0x78d35ae780
	delegate OnTimeExpired;//[Offset: 0x70, Size: 0x10] 0x78d35ae800

--------------------------------
Class: GameplayTask_WaitDelay.GameplayTask.Object
	delegate OnFinish;//[Offset: 0x60, Size: 0x10] 0x78d35afd80
	static GameplayTask_WaitDelay* TaskWaitDelay(interface classNone TaskOwner, float Time, const byte Priority);// 0xcd08798 0x78d3605640
	void TaskDelayDelegate__DelegateSignature();// 0xaa7cd18 0x78d3601d60

--------------------------------
Class: GameplayTaskOwnerInterface.Interface.Object

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1] 0x78d7489b80
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc8, Size: 0x10] 0x78d7492360
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd8, Size: 0x10] 0x78d7492400
	GameplayTask*[] TickingTasks;//[Offset: 0xf8, Size: 0x10] 0x78d74924a0
	GameplayTask*[] KnownTasks;//[Offset: 0x108, Size: 0x10] 0x78d7492540
	delegate OnClaimedResourcesChange;//[Offset: 0x118, Size: 0x10] 0x78d7489e00
	void OnRep_SimulatedTasks();// 0xcd093cc 0x78d7467cc0
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0xcd0908c 0x78d7467da0

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x78d7489980
	delegate OnFail;//[Offset: 0x38, Size: 0x10] 0x78d7489a00
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0xcdd3040 0x78d7467be0

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4] 0x78d35afc00

--------------------------------
Class: AIBlueprintHelperLibrary.BlueprintFunctionLibrary.Object
	static void UnlockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bUnlockMovement, bool UnlockAILogic);// 0xcdd3ba0 0x78d746a7a0
	static Pawn* SpawnAIFromClass(Object* WorldContextObject, class Pawn PawnClass, BehaviorTree* BehaviorTree, Vector Location, Rotator Rotation, bool bNoCollisionFail, Actor* Owner);// 0xcdd3f68 0x78d746a880
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0xcdd34b0 0x78d746a960
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0xcdd3598 0x78d746aa40
	static void SendAIMessage(Pawn* Target, FName Message, Object* MessageSource, bool bSuccess);// 0xcdd41c8 0x78d746ab20
	static void LockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bLockMovement, bool LockAILogic);// 0xcdd3cdc 0x78d746ac00
	static bool IsValidAIRotation(Rotator Rotation);// 0xcdd399c 0x78d746ace0
	static bool IsValidAILocation(Vector Location);// 0xcdd3af4 0x78d7467400
	static bool IsValidAIDirection(Vector DirectionVector);// 0xcdd3a48 0x78d74674e0
	static int GetNextNavLinkIndex(const Controller* Controller);// 0xcdd3678 0x78d74675c0
	static Vector[] GetCurrentPathPoints(Controller* Controller);// 0xcdd37c8 0x78d74676a0
	static int GetCurrentPathIndex(const Controller* Controller);// 0xcdd3720 0x78d7467780
	static NavigationPath* GetCurrentPath(Controller* Controller);// 0xcdd38f4 0x78d7467860
	static BlackboardComponent* GetBlackboard(Actor* Target);// 0xcdd3e18 0x78d7467940
	static AIController* GetAIController(Actor* ControlledActor);// 0xcdd3ec0 0x78d7467a20
	static AIAsyncTaskBlueprintProxy* CreateMoveToProxyObject(Object* WorldContextObject, Pawn* Pawn, Vector Destination, Actor* TargetActor, float AcceptanceRadius, bool bStopOnOverlap);// 0xcdd4348 0x78d7467b00

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8] 0x78d74a1800
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8] 0x78d74a1880
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10] 0x78d7493080
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10] 0x78d7493120

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10] 0x78d74929a0
	BTService*[] Services;//[Offset: 0x68, Size: 0x10] 0x78d7492a40
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x78d74a5100

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10] 0x78d74a5180
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8] 0x78d74a5200
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8] 0x78d74a5280

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8] 0x78dbf7a880
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8] 0x78dbf7a900
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10] 0x78dbf25f60
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10] 0x78dbf26000

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10] 0x78d7494de0
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78d74a9a80

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4] 0x78d74a8500
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4] 0x78d74a8580
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78d74a8600
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x78d74a8680

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1] 0x78d74a4e80
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1] 0x78d74a4f00

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1] 0x78dbf7aa00
	uint16 Number;//[Offset: 0x2, Size: 0x2] 0x78dbf7aa80

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* parent;//[Offset: 0x30, Size: 0x8] 0x78d74a3500
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10] 0x78d7492c20
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78d74a3600

--------------------------------
Class: BlackboardEntry
	FName entryName;//[Offset: 0x0, Size: 0x8] 0x78dbf7ab80
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8] 0x78dbf7ac00
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78dbf7ac80

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb8, Size: 0x8] 0x78d74a3680
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xc0, Size: 0x8] 0x78d74a3700
	BlackboardData* BlackboardAsset;//[Offset: 0xc8, Size: 0x8] 0x78d74a3780
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xf0, Size: 0x10] 0x78d7492cc0
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0xcde7978 0x78d746ce20
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0xcde7b68 0x78d746cf00
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0xcde7880 0x78d746cfe0
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0xcde81f8 0x78d746d0c0
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0xcde7a70 0x78d746d1a0
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0xcde7f10 0x78d746d280
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0xcde7e18 0x78d746d360
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0xcde8008 0x78d746d440
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0xcde8100 0x78d746d520
	void SetValueAsBool(out const FName KeyName, bool boolValue);// 0xcde7d18 0x78d746d600
	bool IsVectorValueSet(out const FName KeyName);// 0xcde77c0 0x78d746d6e0
	Vector GetValueAsVector(out const FName KeyName);// 0xcde83b0 0x78d746d7c0
	FString GetValueAsString(out const FName KeyName);// 0xcde852c 0x78d746d8a0
	Rotator GetValueAsRotator(out const FName KeyName);// 0xcde82f0 0x78d746d980
	Object* GetValueAsObject(out const FName KeyName);// 0xcde8a08 0x78d746da60
	FName GetValueAsName(out const FName KeyName);// 0xcde8470 0x78d746db40
	int GetValueAsInt(out const FName KeyName);// 0xcde87d4 0x78d746dc20
	float GetValueAsFloat(out const FName KeyName);// 0xcde8718 0x78d746dd00
	byte GetValueAsEnum(out const FName KeyName);// 0xcde8890 0x78d746dde0
	class Object GetValueAsClass(out const FName KeyName);// 0xcde894c 0x78d746dec0
	bool GetValueAsBool(out const FName KeyName);// 0xcde8658 0x78d746dfa0
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0xcde7598 0x78d746e080
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0xcde76ac 0x78d746e160
	void ClearValue(out const FName KeyName);// 0xcde74e4 0x78d746e240

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xc0, Size: 0x8] 0x78d74a1580
	AIController* AIOwner;//[Offset: 0xc8, Size: 0x8] 0x78d74a1600
	void StopLogic(FString reason);// 0xcdeb100 0x78d746e6a0
	void StartLogic();// 0xcdeb1fc 0x78d746adc0
	void RestartLogic();// 0xcdeb1e0 0x78d746aea0
	bool IsRunning();// 0xcdeb0c0 0x78d746af80
	bool IsPaused();// 0xcdeb080 0x78d746b060

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1] 0x78d748cb00
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 0x1] 0x78d748cb80
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 0x1] 0x78d748cc00
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 0x1] 0x78d748cc80
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d0, Size: 0x1] 0x78d748cd00
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d0, Size: 0x1] 0x78d748cd80
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d0, Size: 0x1] 0x78d748ce00
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2d8, Size: 0x8] 0x78d748ce80
	BrainComponent* BrainComponent;//[Offset: 0x2e0, Size: 0x8] 0x78d748cf00
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x2e8, Size: 0x8] 0x78d748cf80
	PawnActionsComponent* ActionsComp;//[Offset: 0x2f0, Size: 0x8] 0x78d748d000
	BlackboardComponent* Blackboard;//[Offset: 0x2f8, Size: 0x8] 0x78d748d080
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x300, Size: 0x8] 0x78d748d100
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x308, Size: 0x8] 0x78d7491f00
	delegate ReceiveMoveCompleted;//[Offset: 0x310, Size: 0x10] 0x78d748d180
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0xcdd533c 0x78d7469540
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0xcdd51ec 0x78d7469620
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0xcdd4d84 0x78d7469700
	void SetMoveBlockDetection(bool bEnable);// 0xcdd5504 0x78d74697e0
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0xcdd5448 0x78d74698c0
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0xaa7cd18 0x78d74699a0
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0xcdd4e64 0x78d7469a80
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0xcdd5658 0x78d7469b60
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0xcdd592c 0x78d7469c40
	void K2_SetFocus(Actor* NewFocus);// 0xcdd4fa8 0x78d7469d20
	void K2_SetFocalPoint(Vector FP);// 0xcdd5050 0x78d7469e00
	void K2_ClearFocus();// 0xcdd4f60 0x78d7469ee0
	bool HasPartialPath();// 0xcdd55ec 0x78d7469fc0
	PathFollowingComponent* GetPathFollowingComponent();// 0xcdd4e48 0x78d746a0a0
	byte GetMoveStatus();// 0xcdd5624 0x78d746a180
	Vector GetImmediateMoveDestination();// 0xcdd55b4 0x78d746a260
	Actor* GetFocusActor();// 0xcdd4f74 0x78d746a340
	Vector GetFocalPointOnActor(const Actor* Actor);// 0xcdd50f8 0x78d746a420
	Vector GetFocalPoint();// 0xcdd51b4 0x78d746a500
	AIPerceptionComponent* GetAIPerceptionComponent();// 0xcdd4e2c 0x78d746a5e0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0xcdd5294 0x78d746a6c0

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xf0, Size: 0x8] 0x78d74ab780
	NavigationData* MyNavData;//[Offset: 0x100, Size: 0x8] 0x78d74ab800
	void OnNavDataRegistered(NavigationData* NavData);// 0xce0a530 0x78d74b3960
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult hit);// 0xce0a644 0x78d74b0080
	Vector GetPathDestination();// 0xce0a5d8 0x78d74b0160
	byte GetPathActionType();// 0xce0a610 0x78d74b0240

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb8, Size: 0x10] 0x78d7491780
	class AISense* DominantSense;//[Offset: 0xc8, Size: 0x8] 0x78d7491820
	AIController* AIOwner;//[Offset: 0xe0, Size: 0x8] 0x78d748e100
	delegate OnPerceptionUpdated;//[Offset: 0x168, Size: 0x10] 0x78d748e180
	delegate OnTargetPerceptionUpdated;//[Offset: 0x178, Size: 0x10] 0x78d748e200
	delegate OnTargetPerceptionInfoUpdated;//[Offset: 0x188, Size: 0x10] 0x78d748e280
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0xcdd7724 0x78d746c640
	void RequestStimuliListenerUpdate();// 0xcdd7f18 0x78d746c720
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0xcdd7f2c 0x78d746c800
	void GetPerceivedHostileActorsBySense(const class AISense SenseToUse, out Actor*[] OutActors);// 0xcdd7cf0 0x78d746c8e0
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0xcdd7e20 0x78d746c9c0
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0xcdd7960 0x78d74690e0
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0xcdd7a90 0x78d74691c0
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0xcdd7bc0 0x78d74692a0
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0xcdd7820 0x78d7469380
	void ForgetAll();// 0xcdd7f04 0x78d7469460

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4] 0x78d748f980
	float MaxAge;//[Offset: 0x2c, Size: 0x4] 0x78d748fa00
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78d748fa80

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4] 0x78d748d700
	enum NotifyType;//[Offset: 0x2c, Size: 0x1] 0x78d7493bc0
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x78d748d800
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1] 0x78d748d880
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8] 0x78d748d900

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10] 0x78d7493c60
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4] 0x78d748da00
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0xcddb064 0x78d746be60
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0xcddb144 0x78d746bf40
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0xcddaf24 0x78d746c020
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0xcddac6c 0x78d746c100
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0xcddad60 0x78d746c1e0

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8] 0x78d748df80

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18] 0x78d74a0200
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18] 0x78d74a0280
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4] 0x78d74a0300
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4] 0x78d74a0380
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4] 0x78d74a0400
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1] 0x78d74a0480
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1] 0x78d74a0500
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1] 0x78d74a0580
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1] 0x78d74a0600
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78d74a0680
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1] 0x78d74a0700
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1] 0x78d74a0780
	bool bAddBlackboardSelfKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 0x1] 0x78d74a0800
	byte DefaultSightCollisionChannel;//[Offset: 0x9c, Size: 0x1] 0x78d74a0880
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8] 0x78d74a0900
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8] 0x78d74a0980
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8] 0x78d74a0a00
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10] 0x78d74931c0
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8] 0x78d74a0b00
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8] 0x78d74a0b80
	void AILoggingVerbose();// 0xcddfecc 0x78d746b300
	void AIIgnorePlayers();// 0xcddfee8 0x78d746b3e0

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4] 0x78d74a3080
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10] 0x78d7492ea0
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10] 0x78d7492f40

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8] 0x78dbf7af00
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8] 0x78dbf7af80

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x130, Size: 0x10] 0x78d7492fe0
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x280, Size: 0x8] 0x78d74a1180
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0xcde62b8 0x78d746e400
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0xcde64f8 0x78d746e4e0
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0xcde63b0 0x78d746e5c0

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10] 0x78d7496640
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10] 0x78d74966e0
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10] 0x78d7493e40
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4] 0x78d74af300
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x78d74af380
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4] 0x78d74af400
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8] 0x78d74af480
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0xce01910 0x78d74b30a0

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8] 0x78dbf7c300

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8] 0x78d74ad080
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 0x10] 0x78d7494a20

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8] 0x78d74af080
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10] 0x78d74965a0

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10] 0x78d74ac900
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8] 0x78d7494840
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78d74ac980

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4] 0x78d74aca00

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4] 0x78d74aff80
	byte TestPurpose;//[Offset: 0x30, Size: 0x1] 0x78d74ae780
	FString TestComment;//[Offset: 0x38, Size: 0x10] 0x78d74ae800
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1] 0x78d74ae880
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1] 0x78d74ae900
	byte FilterType;//[Offset: 0x4a, Size: 0x1] 0x78d74ae980
	AIDataProviderBoolValue boolValue;//[Offset: 0x50, Size: 0x38] 0x78d74aea00
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38] 0x78d74aea80
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38] 0x78d74aeb00
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1] 0x78d74aeb80
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1] 0x78d74aec00
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1] 0x78d74aec80
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1] 0x78d7496500
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38] 0x78d74aed80
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38] 0x78d74aee00
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38] 0x78d74aee80
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38] 0x78d74aef00
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1] 0x78d74aef80
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1] 0x78d74af000

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78dbf79d00

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8] 0x78dbf26280

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8] 0x78dbf79d80
	FName DataField;//[Offset: 0x18, Size: 0x8] 0x78dbf79e00

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4] 0x78dbf79c80

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4] 0x78cdbb0d00
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8] 0x78d3610e20
	int OptionIndex;//[Offset: 0x60, Size: 0x4] 0x78cdbb0d80
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10] 0x78cdbb0e00
	void SetNamedParam(FName ParamName, float Value);// 0xce001e4 0x78d3604e60
	Vector[] GetResultsAsLocations();// 0xce002d8 0x78d3604f40
	Actor*[] GetResultsAsActors();// 0xce003ac 0x78d3605020
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0xce00480 0x78d3605100
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0xce00570 0x78d36051e0
	float GetItemScore(int ItemIndex);// 0xce00660 0x78d36052c0
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0xaa7cd18 0x78d36053a0

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0xce09c98 0x78d74b2a80
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0xce09280 0x78d74b2b60
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0xce090b0 0x78d74b2c40
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0xce09894 0x78d74b2d20
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0xce09abc 0x78d74b2e00
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0xce093b4 0x78d74b2ee0
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0xce09624 0x78d74b2fc0

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4] 0x78cdbb0780
	float ExpirationAge;//[Offset: 0x4, Size: 0x4] 0x78cdbb0800
	float Strength;//[Offset: 0x8, Size: 0x4] 0x78cdbb0880
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc] 0x78cdbb0900
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc] 0x78cdbb0980
	FName Tag;//[Offset: 0x24, Size: 0x8] 0x78cdbb0a00
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78cdbb0a80

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8] 0x78dbf79a80
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10] 0x78dbf261e0
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78dbf79b80

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb8, Size: 0x8] 0x78d74c3c80
	PawnActionStack[] ActionStacks;//[Offset: 0xc0, Size: 0x10] 0x78d74959c0
	PawnActionEvent[] ActionEvents;//[Offset: 0xd0, Size: 0x10] 0x78d7495a60
	PawnAction* CurrentAction;//[Offset: 0xe0, Size: 0x8] 0x78d74c3e00
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0xce0c2c8 0x78d74b2000
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0xce0c414 0x78d74b20e0
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0xce0c168 0x78d74b21c0
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0xce0c218 0x78d74b22a0

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8] 0x78d74c2f80
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8] 0x78d74c3000
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8] 0x78d74c3080
	Object* Instigator;//[Offset: 0x40, Size: 0x8] 0x78d74c3100
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8] 0x78d74c3180
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78d74c1100
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78d74c1180
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x78d74c1200
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x78d74c1280
	byte GetActionPriority();// 0xce0af5c 0x78d74b27e0
	void Finish(byte WithResult);// 0xce0adbc 0x78d74b28c0
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0xce0ae6c 0x78d74b29a0

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8] 0x78dbf7cd00

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8] 0x78dbf7cc80

--------------------------------
Class: AIDataProvider_QueryParams.AIDataProvider.Object
	FName ParamName;//[Offset: 0x28, Size: 0x8] 0x78d748c900
	float FloatValue;//[Offset: 0x30, Size: 0x4] 0x78d748c980
	int IntValue;//[Offset: 0x34, Size: 0x4] 0x78d748ca00
	bool boolValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78d748ca80

--------------------------------
Class: AIDataProvider_Random.AIDataProvider_QueryParams.AIDataProvider.Object
	float Min;//[Offset: 0x3c, Size: 0x4] 0x78d748c780
	float Max;//[Offset: 0x40, Size: 0x4] 0x78d748c800
	bool bInteger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78d748c880

--------------------------------
Class: AIPerceptionListenerInterface.Interface.Object

--------------------------------
Class: AIPerceptionStimuliSourceComponent.ActorComponent.Object
	bool bAutoRegisterAsSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x78d748e000
	class AISense[] RegisterAsSourceForSenses;//[Offset: 0xc0, Size: 0x10] 0x78d74915a0
	void UnregisterFromSense(class AISense SenseClass);// 0xcdd87b0 0x78d746c2c0
	void UnregisterFromPerceptionSystem();// 0xcdd8858 0x78d746c3a0
	void RegisterWithPerceptionSystem();// 0xcdd8914 0x78d746c480
	void RegisterForSense(class AISense SenseClass);// 0xcdd886c 0x78d746c560

--------------------------------
Class: AIResourceInterface.Interface.Object

--------------------------------
Class: AIResource_Movement.GameplayTaskResource.Object

--------------------------------
Class: AIResource_Logic.GameplayTaskResource.Object

--------------------------------
Class: AISense_Blueprint.AISense.Object
	class UserDefinedStruct* ListenerDataType;//[Offset: 0x78, Size: 0x8] 0x78d7493800
	AIPerceptionComponent*[] ListenerContainer;//[Offset: 0x80, Size: 0x10] 0x78d74938a0
	AISenseEvent*[] UnprocessedEvents;//[Offset: 0x90, Size: 0x10] 0x78d7493940
	float OnUpdate(out const AISenseEvent*[] EventsToProcess);// 0xaa7cd18 0x78d746b840
	void OnListenerUpdated(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0xaa7cd18 0x78d746b920
	void OnListenerUnregistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0xaa7cd18 0x78d746ba00
	void OnListenerRegistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0xaa7cd18 0x78d746bae0
	void K2_OnNewPawn(Pawn* NewPawn);// 0xaa7cd18 0x78d746bbc0
	void GetAllListenerComponents(out AIPerceptionComponent*[] ListenerComponents);// 0xcddc3bc 0x78d746bca0
	void GetAllListenerActors(out Actor*[] ListenerActors);// 0xcddc4a0 0x78d746bd80

--------------------------------
Class: AISense_Damage.AISense.Object
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x78d7493760
	static void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation);// 0xcddce8c 0x78d746b760

--------------------------------
Class: AIDamageEvent
	float Amount;//[Offset: 0x0, Size: 0x4] 0x78dbf79680
	Vector Location;//[Offset: 0x4, Size: 0xc] 0x78dbf79700
	Vector HitLocation;//[Offset: 0x10, Size: 0xc] 0x78dbf79780
	Actor* DamagedActor;//[Offset: 0x20, Size: 0x8] 0x78dbf79800
	Actor* Instigator;//[Offset: 0x28, Size: 0x8] 0x78dbf79880

--------------------------------
Class: AISense_Hearing.AISense.Object
	AINoiseEvent[] NoiseEvents;//[Offset: 0x78, Size: 0x10] 0x78d74936c0
	float SpeedOfSoundSq;//[Offset: 0x88, Size: 0x4] 0x78d748ea80
	static void ReportNoiseEvent(Object* WorldContextObject, Vector NoiseLocation, float Loudness, Actor* Instigator, float MaxRange, FName Tag);// 0xcddd510 0x78d746b680

--------------------------------
Class: AINoiseEvent
	Vector NoiseLocation;//[Offset: 0x4, Size: 0xc] 0x78dbf7b500
	float Loudness;//[Offset: 0x10, Size: 0x4] 0x78dbf7b580
	float MaxRange;//[Offset: 0x14, Size: 0x4] 0x78dbf79500
	Actor* Instigator;//[Offset: 0x18, Size: 0x8] 0x78dbf79580
	FName Tag;//[Offset: 0x20, Size: 0x8] 0x78dbf79600

--------------------------------
Class: AISense_Prediction.AISense.Object
	AIPredictionEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x78d7493620
	static void RequestPawnPredictionEvent(Pawn* Requestor, Actor* PredictedActor, float PredictionTime);// 0xcdddba0 0x78d746b4c0
	static void RequestControllerPredictionEvent(AIController* Requestor, Actor* PredictedActor, float PredictionTime);// 0xcdddccc 0x78d746b5a0

--------------------------------
Class: AIPredictionEvent
	Actor* Requestor;//[Offset: 0x0, Size: 0x8] 0x78dbf7b400
	Actor* PredictedActor;//[Offset: 0x8, Size: 0x8] 0x78dbf7b480

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x140, Size: 0x4] 0x78d748fc00
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x144, Size: 0x4] 0x78d748fc80
	double MaxTimeSlicePerTick;//[Offset: 0x148, Size: 0x8] 0x78d748fd00
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x150, Size: 0x4] 0x78d748fd80
	float MaxQueryImportance;//[Offset: 0x158, Size: 0x4] 0x78d748fe00
	float SightLimitQueryImportance;//[Offset: 0x15c, Size: 0x4] 0x78d748fe80

--------------------------------
Class: AISense_Team.AISense.Object
	AITeamStimulusEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x78d7493580

--------------------------------
Class: AITeamStimulusEvent
	Actor* Broadcaster;//[Offset: 0x28, Size: 0x8] 0x78dbf7b200
	Actor* Enemy;//[Offset: 0x30, Size: 0x8] 0x78dbf7b280

--------------------------------
Class: AISense_Touch.AISense.Object
	AITouchEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x78d74934e0

--------------------------------
Class: AITouchEvent
	Actor* TouchReceiver;//[Offset: 0x10, Size: 0x8] 0x78dbf7b100
	Actor* OtherActor;//[Offset: 0x18, Size: 0x8] 0x78dbf7b180

--------------------------------
Class: AISenseBlueprintListener.UserDefinedStruct.ScriptStruct.Struct.Field.Object

--------------------------------
Class: AISenseConfig_Blueprint.AISenseConfig.Object
	class AISense_Blueprint* Implementation;//[Offset: 0x48, Size: 0x8] 0x78d7493440

--------------------------------
Class: AISenseConfig_Damage.AISenseConfig.Object
	class AISense_Damage* Implementation;//[Offset: 0x48, Size: 0x8] 0x78d74933a0

--------------------------------
Class: AISenseConfig_Hearing.AISenseConfig.Object
	class AISense_Hearing* Implementation;//[Offset: 0x48, Size: 0x8] 0x78d7493300
	float HearingRange;//[Offset: 0x50, Size: 0x4] 0x78d74a1080
	float LoSHearingRange;//[Offset: 0x54, Size: 0x4] 0x78d748f800
	bool bUseLoSHearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78d748f880
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4] 0x78d748f900

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78dbf79900
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78dbf79980
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78dbf79a00

--------------------------------
Class: AISenseConfig_Prediction.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8] 0x78d7493260
	float SightRadius;//[Offset: 0x50, Size: 0x4] 0x78d74a0d00
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4] 0x78d74a0d80
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4] 0x78d74a0e00
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4] 0x78d74a0e80
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x60, Size: 0x4] 0x78d74a0f00
	float PointOfViewBackwardOffset;//[Offset: 0x64, Size: 0x4] 0x78d74a0f80
	float NearClippingRadius;//[Offset: 0x68, Size: 0x4] 0x78d74a1000

--------------------------------
Class: AISenseConfig_Team.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Touch.AISenseConfig.Object

--------------------------------
Class: AISenseEvent_Damage.AISenseEvent.Object
	AIDamageEvent Event;//[Offset: 0x28, Size: 0x30] 0x78d74a0c80

--------------------------------
Class: AISenseEvent_Hearing.AISenseEvent.Object
	AINoiseEvent Event;//[Offset: 0x28, Size: 0x30] 0x78d74a0c00

--------------------------------
Class: AISightTargetInterface.Interface.Object

--------------------------------
Class: AITask.GameplayTask.Object
	AIController* OwnerController;//[Offset: 0x60, Size: 0x8] 0x78d74a0180

--------------------------------
Class: AITask_LockLogic.AITask.GameplayTask.Object

--------------------------------
Class: AITask_MoveTo.AITask.GameplayTask.Object
	delegate OnRequestFailed;//[Offset: 0x68, Size: 0x10] 0x78d74a1b80
	delegate OnMoveFinished;//[Offset: 0x78, Size: 0x10] 0x78d74a1c00
	AIMoveRequest MoveRequest;//[Offset: 0x88, Size: 0x40] 0x78d74a1c80
	static AITask_MoveTo* AIMoveTo(AIController* Controller, Vector GoalLocation, Actor* GoalActor, float AcceptanceRadius, byte StopOnOverlap, byte AcceptPartialPath, bool bUsePathfinding, bool bLockAILogic, bool bUseContinuosGoalTracking, byte ProjectGoalOnNavigation);// 0xcde0688 0x78d746b220

--------------------------------
Class: AIMoveRequest
	Actor* GoalActor;//[Offset: 0x0, Size: 0x8] 0x78dbf7b000

--------------------------------
Class: AITask_RunEQS.AITask.GameplayTask.Object
	static AITask_RunEQS* RunEQS(AIController* Controller, EnvQuery* QueryTemplate);// 0xcde0e38 0x78d746b140

--------------------------------
Class: BehaviorTreeTypes.Object

--------------------------------
Class: BlackboardAssetProvider.Interface.Object
	BlackboardData* GetBlackboardAsset();// 0xcde7280 0x78d746e320

--------------------------------
Class: BlackboardKeyType_Bool.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Class.BlackboardKeyType.Object
	class Object* BaseClass;//[Offset: 0x30, Size: 0x8] 0x78d7492b80

--------------------------------
Class: BlackboardKeyType_Enum.BlackboardKeyType.Object
	Enum* EnumType;//[Offset: 0x30, Size: 0x8] 0x78d74a3380
	FString EnumName;//[Offset: 0x38, Size: 0x10] 0x78d74a3400
	bool bIsEnumNameValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78d74a3480

--------------------------------
Class: BlackboardKeyType_Float.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Int.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Name.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_NativeEnum.BlackboardKeyType.Object
	FString EnumName;//[Offset: 0x30, Size: 0x10] 0x78d74a3280
	Enum* EnumType;//[Offset: 0x40, Size: 0x8] 0x78d74a3300

--------------------------------
Class: BlackboardKeyType_Object.BlackboardKeyType.Object
	class Object* BaseClass;//[Offset: 0x30, Size: 0x8] 0x78d7492ae0

--------------------------------
Class: BlackboardKeyType_Rotator.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_String.BlackboardKeyType.Object
	FString StringValue;//[Offset: 0x30, Size: 0x10] 0x78d74a3200

--------------------------------
Class: BlackboardKeyType_Vector.BlackboardKeyType.Object

--------------------------------
Class: BTComposite_Selector.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_Sequence.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_SimpleParallel.BTCompositeNode.BTNode.Object
	byte FinishMode;//[Offset: 0x8c, Size: 0x1] 0x78d74a4f80

--------------------------------
Class: BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x60, Size: 0x28] 0x78d74a4e00

--------------------------------
Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0x10] 0x78dbf260a0
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8] 0x78dbf7ad80
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x8] 0x78dbf26140
	byte SelectedKeyID;//[Offset: 0x20, Size: 0x1] 0x78dbf7ae00
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1] 0x78dbf7ae80

--------------------------------
Class: BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int IntValue;//[Offset: 0x88, Size: 0x4] 0x78d74a4b00
	float FloatValue;//[Offset: 0x8c, Size: 0x4] 0x78d74a4b80
	FString StringValue;//[Offset: 0x90, Size: 0x10] 0x78d74a4c00
	FString CachedDescription;//[Offset: 0xa0, Size: 0x10] 0x78d74a4c80
	byte OperationType;//[Offset: 0xb0, Size: 0x1] 0x78d74a4d00
	byte NotifyObserver;//[Offset: 0xb1, Size: 0x1] 0x78d74a4d80

--------------------------------
Class: BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x60, Size: 0x8] 0x78d74a5c00
	Actor* ActorOwner;//[Offset: 0x68, Size: 0x8] 0x78d74a5c80
	FName[] ObservedKeyNames;//[Offset: 0x70, Size: 0x10] 0x78d7495240
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x78d74a5d80
	bool bCheckConditionOnlyBlackBoardChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x78d74a5e00
	bool bIsObservingBB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1] 0x78d74a5e80
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0xaa7cd18 0x78d746f740
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0xaa7cd18 0x78d746f820
	void ReceiveObserverDeactivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xaa7cd18 0x78d746f900
	void ReceiveObserverDeactivated(Actor* OwnerActor);// 0xaa7cd18 0x78d746f9e0
	void ReceiveObserverActivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xaa7cd18 0x78d746fac0
	void ReceiveObserverActivated(Actor* OwnerActor);// 0xaa7cd18 0x78d746fba0
	void ReceiveExecutionStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xaa7cd18 0x78d746fc80
	void ReceiveExecutionStart(Actor* OwnerActor);// 0xaa7cd18 0x78d746fd60
	void ReceiveExecutionFinishAI(AIController* OwnerController, Pawn* ControlledPawn, byte NodeResult);// 0xaa7cd18 0x78d746fe40
	void ReceiveExecutionFinish(Actor* OwnerActor, byte NodeResult);// 0xaa7cd18 0x78d746ff20
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xaa7cd18 0x78d746caa0
	bool PerformConditionCheck(Actor* OwnerActor);// 0xaa7cd18 0x78d746cb80
	bool IsDecoratorObserverActive();// 0xcdec480 0x78d746cc60
	bool IsDecoratorExecutionActive();// 0xcdec4b8 0x78d746cd40

--------------------------------
Class: BTDecorator_CheckGameplayTagsOnActor.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector ActorToCheck;//[Offset: 0x60, Size: 0x28] 0x78d74a5a00
	enum TagsToMatch;//[Offset: 0x88, Size: 0x1] 0x78d74951a0
	GameplayTagContainer GameplayTags;//[Offset: 0x90, Size: 0x20] 0x78d74a5b00
	FString CachedDescription;//[Offset: 0xb0, Size: 0x10] 0x78d74a5b80

--------------------------------
Class: BTDecorator_CompareBBEntries.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte Operator;//[Offset: 0x5a, Size: 0x1] 0x78d74a5880
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28] 0x78d74a5900
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28] 0x78d74a5980

--------------------------------
Class: BTDecorator_ConditionalLoop.BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_ConeCheck.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4] 0x78d74a5680
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28] 0x78d74a5700
	BlackboardKeySelector ConeDirection;//[Offset: 0x88, Size: 0x28] 0x78d74a5780
	BlackboardKeySelector Observed;//[Offset: 0xb0, Size: 0x28] 0x78d74a5800

--------------------------------
Class: BTDecorator_Cooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float CoolDownTime;//[Offset: 0x5c, Size: 0x4] 0x78d74a5600

--------------------------------
Class: BTDecorator_DoesPathExist.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28] 0x78d74a5400
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28] 0x78d74a5480
	bool bUseSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78d74a5500
	byte PathQueryType;//[Offset: 0xb1, Size: 0x1] 0x78d74a5580
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb8, Size: 0x8] 0x78d7495100

--------------------------------
Class: BTDecorator_ForceSuccess.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_IsAtLocation.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x88, Size: 0x4] 0x78d74a7200
	AIDataProviderFloatValue ParametrizedAcceptableRadius;//[Offset: 0x90, Size: 0x38] 0x78d74a7280
	enum GeometricDistanceType;//[Offset: 0xc8, Size: 0x1] 0x78d7495060
	bool bUseParametrizedRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc9, Size: 0x1] 0x78d74a7380
	bool bUseNavAgentGoalLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc9, Size: 0x1] 0x78d74a5300
	bool bPathFindingBasedTest;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc9, Size: 0x1] 0x78d74a5380

--------------------------------
Class: BTDecorator_IsBBEntryOfClass.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	class Object* TestClass;//[Offset: 0x88, Size: 0x8] 0x78d7494fc0

--------------------------------
Class: BTDecorator_KeepInCone.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4] 0x78d74a6f80
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28] 0x78d74a7000
	BlackboardKeySelector Observed;//[Offset: 0x88, Size: 0x28] 0x78d74a7080
	bool bUseSelfAsOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78d74a7100
	bool bUseSelfAsObserved;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x78d74a7180

--------------------------------
Class: BTDecorator_Loop.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int NumLoops;//[Offset: 0x5c, Size: 0x4] 0x78d74a6e00
	bool bInfiniteLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78d74a6e80
	float InfiniteLoopTimeoutTime;//[Offset: 0x64, Size: 0x4] 0x78d74a6f00

--------------------------------
Class: BTDecorator_ReachedMoveGoal.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_SetTagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8] 0x78d74a6c80
	float CooldownDuration;//[Offset: 0x64, Size: 0x4] 0x78d74a6d00
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78d74a6d80

--------------------------------
Class: BTDecorator_TagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8] 0x78d74a6a80
	float CooldownDuration;//[Offset: 0x64, Size: 0x4] 0x78d74a6b00
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78d74a6b80
	bool bActivatesCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1] 0x78d74a6c00

--------------------------------
Class: BTDecorator_TimeLimit.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float TimeLimit;//[Offset: 0x5c, Size: 0x4] 0x78d74a6a00

--------------------------------
Class: BTFunctionLibrary.BlueprintFunctionLibrary.Object
	static void StopUsingExternalEvent(BTNode* NodeOwner);// 0xcdf1880 0x78d74b1580
	static void StartUsingExternalEvent(BTNode* NodeOwner, Actor* OwningActor);// 0xcdf1918 0x78d74b1660
	static void SetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key, Vector Value);// 0xcdf1dd4 0x78d74b1740
	static void SetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key, FString Value);// 0xcdf20d8 0x78d74b1820
	static void SetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key, Rotator Value);// 0xcdf1b24 0x78d74b1900
	static void SetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key, Object* Value);// 0xcdf2aa4 0x78d74b19e0
	static void SetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key, FName Value);// 0xcdf1f58 0x78d74b1ac0
	static void SetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key, int Value);// 0xcdf261c 0x78d74b1ba0
	static void SetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key, float Value);// 0xcdf2498 0x78d74b1c80
	static void SetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key, byte Value);// 0xcdf27a0 0x78d746e780
	static void SetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key, class Object Value);// 0xcdf2924 0x78d746e860
	static void SetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key, bool Value);// 0xcdf230c 0x78d746e940
	static BlackboardComponent* GetOwnersBlackboard(BTNode* NodeOwner);// 0xcdf3af4 0x78d746ea20
	static BehaviorTreeComponent* GetOwnerComponent(BTNode* NodeOwner);// 0xcdf3a4c 0x78d746eb00
	static Vector GetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xcdf2d70 0x78d746ebe0
	static FString GetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xcdf3004 0x78d746ecc0
	static Rotator GetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xcdf2c24 0x78d746eda0
	static Object* GetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xcdf3910 0x78d746ee80
	static FName GetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xcdf2ebc 0x78d746ef60
	static int GetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xcdf3420 0x78d746f040
	static float GetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xcdf32e4 0x78d746f120
	static byte GetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xcdf355c 0x78d746f200
	static class Object GetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xcdf3698 0x78d746f2e0
	static bool GetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xcdf31a4 0x78d746f3c0
	static Actor* GetBlackboardValueAsActor(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xcdf37d4 0x78d746f4a0
	static void ClearBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xcdf1ca8 0x78d746f580
	static void ClearBlackboardValue(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xcdf19f8 0x78d746f660

--------------------------------
Class: BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x68, Size: 0x28] 0x78d74a8480

--------------------------------
Class: BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x68, Size: 0x8] 0x78d74a9c00
	Actor* ActorOwner;//[Offset: 0x70, Size: 0x8] 0x78d74a9c80
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x78d74a9d00
	bool bShowEventDetails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1] 0x78d74a9d80
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0xaa7cd18 0x78d74b0da0
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0xaa7cd18 0x78d74b0e80
	void ReceiveSearchStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xaa7cd18 0x78d74b0f60
	void ReceiveSearchStart(Actor* OwnerActor);// 0xaa7cd18 0x78d74b1040
	void ReceiveDeactivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xaa7cd18 0x78d74b1120
	void ReceiveDeactivation(Actor* OwnerActor);// 0xaa7cd18 0x78d74b1200
	void ReceiveActivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xaa7cd18 0x78d74b12e0
	void ReceiveActivation(Actor* OwnerActor);// 0xaa7cd18 0x78d74b13c0
	bool IsServiceActive();// 0xcdf4b70 0x78d74b14a0

--------------------------------
Class: BTService_DefaultFocus.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	byte FocusPriority;//[Offset: 0x90, Size: 0x1] 0x78d74a9b80

--------------------------------
Class: BTService_RunEQS.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0x90, Size: 0x48] 0x78d74a9b00

--------------------------------
Class: EQSParametrizedQueryExecutionRequest
	EnvQuery* QueryTemplate;//[Offset: 0x0, Size: 0x8] 0x78dbf7bd00
	AIDynamicParam[] QueryConfig;//[Offset: 0x8, Size: 0x10] 0x78dbf25d80
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0x18, Size: 0x28] 0x78dbf7c000
	byte RunMode;//[Offset: 0x40, Size: 0x1] 0x78dbf7c080
	bool bUseBBKeyForQueryTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x78dbf7c100

--------------------------------
Class: AIDynamicParam
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x78dbf7bd80
	enum ParamType;//[Offset: 0x8, Size: 0x1] 0x78dbf25ce0
	float Value;//[Offset: 0xc, Size: 0x4] 0x78dbf7be80
	BlackboardKeySelector BBKey;//[Offset: 0x10, Size: 0x28] 0x78dbf7bf00

--------------------------------
Class: BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x70, Size: 0x28] 0x78d74a9980

--------------------------------
Class: BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x70, Size: 0x8] 0x78d74ab000
	Actor* ActorOwner;//[Offset: 0x78, Size: 0x8] 0x78d74ab080
	IntervalCountdown TickInterval;//[Offset: 0x80, Size: 0x8] 0x78d74ab100
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78d74ab180
	void SetFinishOnMessageWithId(FName MessageName, int RequestID);// 0xcdf587c 0x78d74b0320
	void SetFinishOnMessage(FName MessageName);// 0xcdf5970 0x78d74b0400
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0xaa7cd18 0x78d74b04e0
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0xaa7cd18 0x78d74b05c0
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xaa7cd18 0x78d74b06a0
	void ReceiveExecute(Actor* OwnerActor);// 0xaa7cd18 0x78d74b0780
	void ReceiveAbortAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xaa7cd18 0x78d74b0860
	void ReceiveAbort(Actor* OwnerActor);// 0xaa7cd18 0x78d74b0940
	bool IsTaskExecuting();// 0xcdf5844 0x78d74b0a20
	bool IsTaskAborting();// 0xcdf580c 0x78d74b0b00
	void FinishExecute(bool bSuccess);// 0xcdf5a2c 0x78d74b0be0
	void FinishAbort();// 0xcdf5a18 0x78d74b0cc0

--------------------------------
Class: IntervalCountdown
	float Interval;//[Offset: 0x0, Size: 0x4] 0x78dbf7b080

--------------------------------
Class: BTTask_FinishWithResult.BTTaskNode.BTNode.Object
	byte Result;//[Offset: 0x69, Size: 0x1] 0x78d74aaf80

--------------------------------
Class: BTTask_GameplayTaskBase.BTTaskNode.BTNode.Object
	bool bWaitForGameplayTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x78d74aaf00

--------------------------------
Class: BTTask_MakeNoise.BTTaskNode.BTNode.Object
	float Loudnes;//[Offset: 0x6c, Size: 0x4] 0x78d74aae80

--------------------------------
Class: BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x98, Size: 0x4] 0x78d74aa900
	class NavigationQueryFilter* FilterClass;//[Offset: 0xa0, Size: 0x8] 0x78d7494d40
	float ObservedBlackboardValueTolerance;//[Offset: 0xa8, Size: 0x4] 0x78d74aa980
	bool bObserveBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x78d74aaa00
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x78d74aaa80
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1] 0x78d74aab00
	bool bTrackMovingGoal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xac, Size: 0x1] 0x78d74aab80
	bool bProjectGoalLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xac, Size: 0x1] 0x78d74aac00
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xac, Size: 0x1] 0x78d74aac80
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xac, Size: 0x1] 0x78d74aad00
	bool bStopOnOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xac, Size: 0x1] 0x78d74aad80
	bool bStopOnOverlapNeedsUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad, Size: 0x1] 0x78d74aae00

--------------------------------
Class: BTTask_MoveDirectlyToward.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool bDisablePathUpdateOnGoalLocationChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xae, Size: 0x1] 0x78d74aa780
	bool bProjectVectorGoalToNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xae, Size: 0x1] 0x78d74aa800
	bool bUpdatedDeprecatedProperties;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xae, Size: 0x1] 0x78d74aa880

--------------------------------
Class: BTTask_PawnActionBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_PlayAnimation.BTTaskNode.BTNode.Object
	AnimationAsset* AnimationToPlay;//[Offset: 0x70, Size: 0x8] 0x78d74ac600
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78d74aa580
	bool bNonBlocking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x78d74aa600
	BehaviorTreeComponent* MyOwnerComp;//[Offset: 0x80, Size: 0x8] 0x78d74aa680
	SkeletalMeshComponent* CachedSkelMesh;//[Offset: 0x88, Size: 0x8] 0x78d74aa700

--------------------------------
Class: BTTask_PlaySound.BTTaskNode.BTNode.Object
	SoundCue* SoundToPlay;//[Offset: 0x70, Size: 0x8] 0x78d74ac580

--------------------------------
Class: BTTask_PushPawnAction.BTTask_PawnActionBase.BTTaskNode.BTNode.Object
	PawnAction* Action;//[Offset: 0x70, Size: 0x8] 0x78d74ac500

--------------------------------
Class: BTTask_RotateToFaceBBEntry.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float Precision;//[Offset: 0x98, Size: 0x4] 0x78d74ac480

--------------------------------
Class: BTTask_RunBehavior.BTTaskNode.BTNode.Object
	BehaviorTree* BehaviorAsset;//[Offset: 0x70, Size: 0x8] 0x78d74ac400

--------------------------------
Class: BTTask_RunBehaviorDynamic.BTTaskNode.BTNode.Object
	GameplayTag InjectionTag;//[Offset: 0x6c, Size: 0x8] 0x78d74ac280
	BehaviorTree* DefaultBehaviorAsset;//[Offset: 0x78, Size: 0x8] 0x78d74ac300
	BehaviorTree* BehaviorAsset;//[Offset: 0x80, Size: 0x8] 0x78d74ac380

--------------------------------
Class: BTTask_RunEQSQuery.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	EnvQuery* QueryTemplate;//[Offset: 0x98, Size: 0x8] 0x78d74abf00
	EnvNamedValue[] QueryParams;//[Offset: 0xa0, Size: 0x10] 0x78d7494c00
	AIDynamicParam[] QueryConfig;//[Offset: 0xb0, Size: 0x10] 0x78d7494ca0
	byte RunMode;//[Offset: 0xc0, Size: 0x1] 0x78d74ac080
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0xc8, Size: 0x28] 0x78d74ac100
	bool bUseBBKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x78d74ac180
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0xf8, Size: 0x48] 0x78d74ac200

--------------------------------
Class: EnvNamedValue
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x78dbf7ce00
	enum ParamType;//[Offset: 0x8, Size: 0x1] 0x78dbf25920
	float Value;//[Offset: 0xc, Size: 0x4] 0x78dbf7cf00

--------------------------------
Class: BTTask_SetTagCooldown.BTTaskNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x6c, Size: 0x8] 0x78d74abd80
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78d74abe00
	float CooldownDuration;//[Offset: 0x78, Size: 0x4] 0x78d74abe80

--------------------------------
Class: BTTask_Wait.BTTaskNode.BTNode.Object
	float WaitTime;//[Offset: 0x6c, Size: 0x4] 0x78d74abc80
	float RandomDeviation;//[Offset: 0x70, Size: 0x4] 0x78d74abd00

--------------------------------
Class: BTTask_WaitBlackboardTime.BTTask_Wait.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x78, Size: 0x28] 0x78d74abc00

--------------------------------
Class: CrowdAgentInterface.Interface.Object

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	Vector CrowdAgentMoveDirection;//[Offset: 0x270, Size: 0xc] 0x78d74ab680
	void SuspendCrowdSteering(bool bSuspend);// 0xcdf9ed0 0x78d74b3880

--------------------------------
Class: CrowdManager.CrowdManagerBase.Object
	NavigationData* MyNavData;//[Offset: 0x28, Size: 0x8] 0x78d74ad180
	CrowdAvoidanceConfig[] AvoidanceConfig;//[Offset: 0x30, Size: 0x10] 0x78d7494ac0
	CrowdAvoidanceSamplingPattern[] SamplingPatterns;//[Offset: 0x40, Size: 0x10] 0x78d7494b60
	int MaxAgents;//[Offset: 0x50, Size: 0x4] 0x78d74ad300
	float MaxAgentRadius;//[Offset: 0x54, Size: 0x4] 0x78d74ad380
	int MaxAvoidedAgents;//[Offset: 0x58, Size: 0x4] 0x78d74ad400
	int MaxAvoidedWalls;//[Offset: 0x5c, Size: 0x4] 0x78d74ad480
	float NavmeshCheckInterval;//[Offset: 0x60, Size: 0x4] 0x78d74ad500
	float PathOptimizationInterval;//[Offset: 0x64, Size: 0x4] 0x78d74ad580
	float SeparationDirClamp;//[Offset: 0x68, Size: 0x4] 0x78d74ad600
	float PathOffsetRadiusMultiplier;//[Offset: 0x6c, Size: 0x4] 0x78d74ad680
	bool bResolveCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x70, Size: 0x1] 0x78d74ab600

--------------------------------
Class: CrowdAvoidanceConfig
	float VelocityBias;//[Offset: 0x0, Size: 0x4] 0x78dbf7c380
	float DesiredVelocityWeight;//[Offset: 0x4, Size: 0x4] 0x78dbf7c400
	float CurrentVelocityWeight;//[Offset: 0x8, Size: 0x4] 0x78dbf7c480
	float SideBiasWeight;//[Offset: 0xc, Size: 0x4] 0x78dbf7c500
	float ImpactTimeWeight;//[Offset: 0x10, Size: 0x4] 0x78dbf7c580
	float ImpactTimeRange;//[Offset: 0x14, Size: 0x4] 0x78dbf7c600
	byte CustomPatternIdx;//[Offset: 0x18, Size: 0x1] 0x78dbf7a580
	byte AdaptiveDivisions;//[Offset: 0x19, Size: 0x1] 0x78dbf7a600
	byte AdaptiveRings;//[Offset: 0x1a, Size: 0x1] 0x78dbf7a680
	byte AdaptiveDepth;//[Offset: 0x1b, Size: 0x1] 0x78dbf7a700

--------------------------------
Class: CrowdAvoidanceSamplingPattern
	float[] Angles;//[Offset: 0x0, Size: 0x10] 0x78dbf25e20
	float[] Radii;//[Offset: 0x10, Size: 0x10] 0x78dbf25ec0

--------------------------------
Class: DetourCrowdAIController.AIController.Controller.Actor.Object

--------------------------------
Class: EnvQueryContext_BlueprintBase.EnvQueryContext.Object
	void ProvideSingleLocation(Object* QuerierObject, Actor* QuerierActor, out Vector ResultingLocation);// 0xaa7cd18 0x78d74b3500
	void ProvideSingleActor(Object* QuerierObject, Actor* QuerierActor, out Actor* ResultingActor);// 0xaa7cd18 0x78d74b35e0
	void ProvideLocationsSet(Object* QuerierObject, Actor* QuerierActor, out Vector[] ResultingLocationSet);// 0xaa7cd18 0x78d74b36c0
	void ProvideActorsSet(Object* QuerierObject, Actor* QuerierActor, out Actor*[] ResultingActorsSet);// 0xaa7cd18 0x78d74b37a0

--------------------------------
Class: EnvQueryContext_Item.EnvQueryContext.Object

--------------------------------
Class: EnvQueryContext_Querier.EnvQueryContext.Object

--------------------------------
Class: EnvQueryDebugHelpers.Object

--------------------------------
Class: EnvQueryGenerator_ActorsOfClass.EnvQueryGenerator.EnvQueryNode.Object
	class Actor* SearchedActorClass;//[Offset: 0x50, Size: 0x8] 0x78d7494700
	AIDataProviderBoolValue GenerateOnlyActorsInRadius;//[Offset: 0x58, Size: 0x38] 0x78d74ac800
	AIDataProviderFloatValue SearchRadius;//[Offset: 0x90, Size: 0x38] 0x78d74ac880
	class EnvQueryContext* SearchCenter;//[Offset: 0xc8, Size: 0x8] 0x78d74947a0

--------------------------------
Class: EnvQueryGenerator_BlueprintBase.EnvQueryGenerator.EnvQueryNode.Object
	FText GeneratorsActionDescription;//[Offset: 0x50, Size: 0x18] 0x78d74ae680
	class EnvQueryContext* Context;//[Offset: 0x68, Size: 0x8] 0x78d7494520
	class EnvQueryItemType* GeneratedItemType;//[Offset: 0x70, Size: 0x8] 0x78d74945c0
	Object* GetQuerier();// 0xcdfba98 0x78d74b3180
	void DoItemGeneration(out const Vector[] ContextLocations);// 0xaa7cd18 0x78d74b3260
	void AddGeneratedVector(Vector GeneratedVector);// 0xcdfbb74 0x78d74b3340
	void AddGeneratedActor(Actor* GeneratedActor);// 0xcdfbacc 0x78d74b3420

--------------------------------
Class: EnvQueryGenerator_Composite.EnvQueryGenerator.EnvQueryNode.Object
	EnvQueryGenerator*[] Generators;//[Offset: 0x50, Size: 0x10] 0x78d74943e0
	bool bAllowDifferentItemTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78d74ae580
	bool bHasMatchingItemType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x78d74ae600
	class EnvQueryItemType* ForcedItemType;//[Offset: 0x68, Size: 0x8] 0x78d7494480

--------------------------------
Class: EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x50, Size: 0x30] 0x78d74ae480

--------------------------------
Class: EnvTraceData
	int VersionNum;//[Offset: 0x0, Size: 0x4] 0x78dbf7d000
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x8, Size: 0x8] 0x78dbf25ba0
	float ProjectDown;//[Offset: 0x10, Size: 0x4] 0x78dbf7d080
	float ProjectUp;//[Offset: 0x14, Size: 0x4] 0x78dbf7d100
	float ExtentX;//[Offset: 0x18, Size: 0x4] 0x78dbf7d180
	float ExtentY;//[Offset: 0x1c, Size: 0x4] 0x78dbf7d200
	float ExtentZ;//[Offset: 0x20, Size: 0x4] 0x78dbf7d280
	float PostProjectionVerticalOffset;//[Offset: 0x24, Size: 0x4] 0x78dbf7d300
	byte TraceChannel;//[Offset: 0x28, Size: 0x1] 0x78dbf7d380
	byte SerializedChannel;//[Offset: 0x29, Size: 0x1] 0x78dbf7d400
	byte TraceShape;//[Offset: 0x2a, Size: 0x1] 0x78dbf7d480
	byte TraceMode;//[Offset: 0x2b, Size: 0x1] 0x78dbf7d500
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x78dbf7d580
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1] 0x78dbf7d600
	bool bCanTraceOnNavMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1] 0x78dbf7d680
	bool bCanTraceOnGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 0x1] 0x78dbf7b600
	bool bCanDisableTrace;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 0x1] 0x78dbf7b680
	bool bCanProjectDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 0x1] 0x78dbf7b700

--------------------------------
Class: EnvQueryGenerator_Cone.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue AlignedPointsDistance;//[Offset: 0x80, Size: 0x38] 0x78d74ae200
	AIDataProviderFloatValue ConeDegrees;//[Offset: 0xb8, Size: 0x38] 0x78d74ae280
	AIDataProviderFloatValue AngleStep;//[Offset: 0xf0, Size: 0x38] 0x78d74ae300
	AIDataProviderFloatValue Range;//[Offset: 0x128, Size: 0x38] 0x78d74ae380
	class EnvQueryContext* CenterActor;//[Offset: 0x160, Size: 0x8] 0x78d7494340
	bool bIncludeContextLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1] 0x78d74ae400

--------------------------------
Class: EnvQueryGenerator_CurrentLocation.EnvQueryGenerator.EnvQueryNode.Object
	class EnvQueryContext* QueryContext;//[Offset: 0x50, Size: 0x8] 0x78d74942a0

--------------------------------
Class: EnvQueryGenerator_Donut.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue InnerRadius;//[Offset: 0x80, Size: 0x38] 0x78d74ade00
	AIDataProviderFloatValue OuterRadius;//[Offset: 0xb8, Size: 0x38] 0x78d74ade80
	AIDataProviderIntValue NumberOfRings;//[Offset: 0xf0, Size: 0x38] 0x78d74adf00
	AIDataProviderIntValue PointsPerRing;//[Offset: 0x128, Size: 0x38] 0x78d74adf80
	EnvDirection ArcDirection;//[Offset: 0x160, Size: 0x20] 0x78d74ae000
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x180, Size: 0x38] 0x78d74ae080
	bool bUseSpiralPattern;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1] 0x78d74ae100
	class EnvQueryContext* Center;//[Offset: 0x1c0, Size: 0x8] 0x78d7494200
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c8, Size: 0x1] 0x78d74ae180

--------------------------------
Class: AIDataProviderIntValue.AIDataProviderTypedValue.AIDataProviderValue
	int DefaultValue;//[Offset: 0x30, Size: 0x4] 0x78dbf79c00

--------------------------------
Class: EnvDirection
	class EnvQueryContext* LineFrom;//[Offset: 0x0, Size: 0x8] 0x78dbf259c0
	class EnvQueryContext* LineTo;//[Offset: 0x8, Size: 0x8] 0x78dbf25a60
	class EnvQueryContext* Rotation;//[Offset: 0x10, Size: 0x8] 0x78dbf25b00
	byte DirMode;//[Offset: 0x18, Size: 0x1] 0x78dbf7cf80

--------------------------------
Class: EnvQueryGenerator_OnCircle.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue CircleRadius;//[Offset: 0x80, Size: 0x38] 0x78d74ad880
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xb8, Size: 0x38] 0x78d74ad900
	AIDataProviderIntValue NumberOfPoints;//[Offset: 0xf0, Size: 0x38] 0x78d74ad980
	enum PointOnCircleSpacingMethod;//[Offset: 0x128, Size: 0x1] 0x78d74940c0
	EnvDirection ArcDirection;//[Offset: 0x130, Size: 0x20] 0x78d74ada80
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x150, Size: 0x38] 0x78d74adb00
	float AngleRadians;//[Offset: 0x188, Size: 0x4] 0x78d74adb80
	class EnvQueryContext* CircleCenter;//[Offset: 0x190, Size: 0x8] 0x78d7494160
	bool bIgnoreAnyContextActorsWhenGeneratingCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1] 0x78d74adc00
	AIDataProviderFloatValue CircleCenterZOffset;//[Offset: 0x1a0, Size: 0x38] 0x78d74adc80
	EnvTraceData TraceData;//[Offset: 0x1d8, Size: 0x30] 0x78d74add00
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x78d74add80

--------------------------------
Class: EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue GridSize;//[Offset: 0x80, Size: 0x38] 0x78d74ad780
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xb8, Size: 0x38] 0x78d74ad800
	class EnvQueryContext* GenerateAround;//[Offset: 0xf0, Size: 0x8] 0x78d7494020

--------------------------------
Class: EnvQueryGenerator_PathingGrid.EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderBoolValue PathToItem;//[Offset: 0xf8, Size: 0x38] 0x78d74af780
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x130, Size: 0x8] 0x78d7493f80
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x138, Size: 0x38] 0x78d74ad700

--------------------------------
Class: EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Actor.EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Direction.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Point.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest_Distance.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x1f1, Size: 0x1] 0x78d74aff00
	class EnvQueryContext* DistanceTo;//[Offset: 0x1f8, Size: 0x8] 0x78d7496460

--------------------------------
Class: EnvQueryTest_Dot.EnvQueryTest.EnvQueryNode.Object
	EnvDirection LineA;//[Offset: 0x1f8, Size: 0x20] 0x78d74afd00
	EnvDirection LineB;//[Offset: 0x218, Size: 0x20] 0x78d74afd80
	enum TestMode;//[Offset: 0x238, Size: 0x1] 0x78d74963c0
	bool bAbsoluteValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1] 0x78d74afe80

--------------------------------
Class: EnvQueryTest_GameplayTags.EnvQueryTest.EnvQueryNode.Object
	GameplayTagQuery TagQueryToMatch;//[Offset: 0x1f8, Size: 0x48] 0x78d74afb00
	bool bUpdatedToUseQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1] 0x78d74afb80
	enum TagsToMatch;//[Offset: 0x241, Size: 0x1] 0x78d7496320
	GameplayTagContainer GameplayTags;//[Offset: 0x248, Size: 0x20] 0x78d74afc80

--------------------------------
Class: EnvQueryTest_Overlap.EnvQueryTest.EnvQueryNode.Object
	EnvOverlapData OverlapData;//[Offset: 0x1f4, Size: 0x1c] 0x78d74afa80

--------------------------------
Class: EnvOverlapData
	float ExtentX;//[Offset: 0x0, Size: 0x4] 0x78dbf7b780
	float ExtentY;//[Offset: 0x4, Size: 0x4] 0x78dbf7b800
	float ExtentZ;//[Offset: 0x8, Size: 0x4] 0x78dbf7b880
	Vector ShapeOffset;//[Offset: 0xc, Size: 0xc] 0x78dbf7b900
	byte OverlapChannel;//[Offset: 0x18, Size: 0x1] 0x78dbf7b980
	byte OverlapShape;//[Offset: 0x19, Size: 0x1] 0x78dbf7ba00
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1] 0x78dbf7ba80
	bool bOverlapComplex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a, Size: 0x1] 0x78dbf7bb00
	bool bSkipOverlapQuerier;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a, Size: 0x1] 0x78dbf7bb80

--------------------------------
Class: EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x1f1, Size: 0x1] 0x78d74af900
	class EnvQueryContext* Context;//[Offset: 0x1f8, Size: 0x8] 0x78d74961e0
	AIDataProviderBoolValue PathFromContext;//[Offset: 0x200, Size: 0x38] 0x78d74af980
	AIDataProviderBoolValue SkipUnreachable;//[Offset: 0x238, Size: 0x38] 0x78d74afa00
	class NavigationQueryFilter* FilterClass;//[Offset: 0x270, Size: 0x8] 0x78d7496280

--------------------------------
Class: EnvQueryTest_PathfindingBatch.EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x278, Size: 0x38] 0x78d74af880

--------------------------------
Class: EnvQueryTest_Project.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x1f8, Size: 0x30] 0x78d74af800

--------------------------------
Class: EnvQueryTest_Random.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: EnvQueryTest_Trace.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData TraceData;//[Offset: 0x1f8, Size: 0x30] 0x78d74c0f00
	AIDataProviderBoolValue TraceFromContext;//[Offset: 0x228, Size: 0x38] 0x78d74c0f80
	AIDataProviderFloatValue ItemHeightOffset;//[Offset: 0x260, Size: 0x38] 0x78d74c1000
	AIDataProviderFloatValue ContextHeightOffset;//[Offset: 0x298, Size: 0x38] 0x78d74c1080
	class EnvQueryContext* Context;//[Offset: 0x2d0, Size: 0x8] 0x78d7496140

--------------------------------
Class: EnvQueryTest_Volume.EnvQueryTest.EnvQueryNode.Object
	class EnvQueryContext* VolumeContext;//[Offset: 0x1f8, Size: 0x8] 0x78d7496000
	class Volume* VolumeClass;//[Offset: 0x200, Size: 0x8] 0x78d74960a0
	bool bDoComplexVolumeTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x78d74c0e80

--------------------------------
Class: EnvQueryTypes.Object

--------------------------------
Class: EQSQueryResultSourceInterface.Interface.Object

--------------------------------
Class: EQSRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EQSTestingPawn.Character.Pawn.Actor.Object
	EnvQuery* QueryTemplate;//[Offset: 0x4c0, Size: 0x8] 0x78d74c0800
	EnvNamedValue[] QueryParams;//[Offset: 0x4c8, Size: 0x10] 0x78d7495e20
	AIDynamicParam[] QueryConfig;//[Offset: 0x4d8, Size: 0x10] 0x78d7495ec0
	float TimeLimitPerStep;//[Offset: 0x4e8, Size: 0x4] 0x78d74c0980
	int StepToDebugDraw;//[Offset: 0x4ec, Size: 0x4] 0x78d74c0a00
	enum HighlightMode;//[Offset: 0x4f0, Size: 0x1] 0x78d7495f60
	bool bDrawLabels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f1, Size: 0x1] 0x78d74c0b00
	bool bDrawFailedItems;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4f1, Size: 0x1] 0x78d74c0b80
	bool bReRunQueryOnlyOnFinishedMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4f1, Size: 0x1] 0x78d74c0c00
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4f1, Size: 0x1] 0x78d74c0c80
	bool bTickDuringGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4f1, Size: 0x1] 0x78d74c0d00
	byte QueryingMode;//[Offset: 0x4f2, Size: 0x1] 0x78d74c0d80
	NavAgentProperties NavAgentProperties;//[Offset: 0x4f8, Size: 0x30] 0x78d74c0e00

--------------------------------
Class: GenericTeamAgentInterface.Interface.Object

--------------------------------
Class: GridPathAIController.AIController.Controller.Actor.Object

--------------------------------
Class: GridPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	NavLocalGridManager* GridManager;//[Offset: 0x258, Size: 0x8] 0x78d74c0780

--------------------------------
Class: NavFilter_AIControllerDefault.NavigationQueryFilter.Object

--------------------------------
Class: PathFollowingManager.Object

--------------------------------
Class: PawnAction_BlueprintBase.PawnAction.Object
	void ActionTick(Pawn* ControlledPawn, float DeltaSeconds);// 0xaa7cd18 0x78d74b2380
	void ActionStart(Pawn* ControlledPawn);// 0xaa7cd18 0x78d74b2460
	void ActionResume(Pawn* ControlledPawn);// 0xaa7cd18 0x78d74b2540
	void ActionPause(Pawn* ControlledPawn);// 0xaa7cd18 0x78d74b2620
	void ActionFinished(Pawn* ControlledPawn, byte WithResult);// 0xaa7cd18 0x78d74b2700

--------------------------------
Class: PawnAction_Move.PawnAction.Object
	Actor* GoalActor;//[Offset: 0x98, Size: 0x8] 0x78d74c2700
	Vector GoalLocation;//[Offset: 0xa0, Size: 0xc] 0x78d74c2780
	float AcceptableRadius;//[Offset: 0xac, Size: 0x4] 0x78d74c2800
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb0, Size: 0x8] 0x78d7495ba0
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x78d74c2880
	bool bFinishOnOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1] 0x78d74c2900
	bool bUsePathfinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 0x1] 0x78d74c2980
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb8, Size: 0x1] 0x78d74c2a00
	bool bProjectGoalToNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb8, Size: 0x1] 0x78d74c2a80
	bool bUpdatePathToGoal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb8, Size: 0x1] 0x78d74c2b00
	bool bAbortChildActionOnPathChange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb8, Size: 0x1] 0x78d74c2b80

--------------------------------
Class: PawnAction_Repeat.PawnAction.Object
	PawnAction* ActionToRepeat;//[Offset: 0x98, Size: 0x8] 0x78d74c2580
	PawnAction* RecentActionCopy;//[Offset: 0xa0, Size: 0x8] 0x78d74c2600
	byte ChildFailureHandlingMode;//[Offset: 0xa8, Size: 0x1] 0x78d74c2680

--------------------------------
Class: PawnAction_Sequence.PawnAction.Object
	PawnAction*[] ActionSequence;//[Offset: 0x98, Size: 0x10] 0x78d7495b00
	byte ChildFailureHandlingMode;//[Offset: 0xa8, Size: 0x1] 0x78d74c2480
	PawnAction* RecentActionCopy;//[Offset: 0xb0, Size: 0x8] 0x78d74c2500

--------------------------------
Class: PawnAction_Wait.PawnAction.Object
	float TimeToWait;//[Offset: 0x94, Size: 0x4] 0x78d74c2380

--------------------------------
Class: PawnSensingComponent.ActorComponent.Object
	float HearingThreshold;//[Offset: 0xb8, Size: 0x4] 0x78cdbb1b00
	float LOSHearingThreshold;//[Offset: 0xbc, Size: 0x4] 0x78cdbb1b80
	float SightRadius;//[Offset: 0xc0, Size: 0x4] 0x78cdbb1c00
	float SensingInterval;//[Offset: 0xc4, Size: 0x4] 0x78cdbb1c80
	float HearingMaxSoundAge;//[Offset: 0xc8, Size: 0x4] 0x78cdbb1d00
	bool bEnableSensingUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1] 0x78cdbb1d80
	bool bOnlySensePlayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcc, Size: 0x1] 0x78cdbb1e00
	bool bSeePawns;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xcc, Size: 0x1] 0x78cdbb1e80
	bool bHearNoises;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xcc, Size: 0x1] 0x78cdbb1f00
	delegate OnSeePawn;//[Offset: 0xd8, Size: 0x10] 0x78cdbb1f80
	delegate OnHearNoise;//[Offset: 0xe8, Size: 0x10] 0x78cdbb2000
	float PeripheralVisionAngle;//[Offset: 0xf8, Size: 0x4] 0x78cdbb2080
	float PeripheralVisionCosine;//[Offset: 0xfc, Size: 0x4] 0x78cdbb2100
	void SetSensingUpdatesEnabled(const bool bEnabled);// 0xce0cb04 0x78d36044c0
	void SetSensingInterval(const float NewSensingInterval);// 0xce0cbbc 0x78d36045a0
	void SetPeripheralVisionAngle(const float NewPeripheralVisionAngle);// 0xce0ca54 0x78d3604680
	void SeePawnDelegate__DelegateSignature(Pawn* Pawn);// 0xaa7cd18 0x78d3604760
	void HearNoiseDelegate__DelegateSignature(Pawn* Instigator, out const Vector Location, float Volume);// 0xaa7cd18 0x78d3604840
	float GetPeripheralVisionCosine();// 0xce0ca1c 0x78d3604920
	float GetPeripheralVisionAngle();// 0xce0ca38 0x78d3604a00

--------------------------------
Class: VisualLoggerExtension.Object

--------------------------------
Class: InputBehavior.Object

--------------------------------
Class: AnyButtonInputBehavior.InputBehavior.Object

--------------------------------
Class: InteractiveGizmoBuilder.Object

--------------------------------
Class: AxisAngleGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: InteractiveGizmo.Object
	InputBehaviorSet* InputBehaviors;//[Offset: 0x30, Size: 0x8] 0x78d74c3c00

--------------------------------
Class: InputBehaviorSet.Object
	BehaviorInfo[] Behaviors;//[Offset: 0x28, Size: 0x10] 0x78d74957e0

--------------------------------
Class: BehaviorInfo
	InputBehavior* Behavior;//[Offset: 0x0, Size: 0x8] 0x78dbf7cc00

--------------------------------
Class: AxisAngleGizmo.InteractiveGizmo.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x78d74c3580
	interface class None* AngleSource;//[Offset: 0x58, Size: 0x10] 0x78d74c3600
	interface class None* HitTarget;//[Offset: 0x68, Size: 0x10] 0x78d74c3680
	interface class None* StateTarget;//[Offset: 0x78, Size: 0x10] 0x78d74c3700
	bool bInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78d74c3780
	Vector RotationOrigin;//[Offset: 0x8c, Size: 0xc] 0x78d74c3800
	Vector RotationAxis;//[Offset: 0x98, Size: 0xc] 0x78d74c3880
	Vector RotationPlaneX;//[Offset: 0xa4, Size: 0xc] 0x78d74c3900
	Vector RotationPlaneY;//[Offset: 0xb0, Size: 0xc] 0x78d74c3980
	Vector InteractionStartPoint;//[Offset: 0xbc, Size: 0xc] 0x78d74c3a00
	Vector InteractionCurPoint;//[Offset: 0xc8, Size: 0xc] 0x78d74c3a80
	float InteractionStartAngle;//[Offset: 0xd4, Size: 0x4] 0x78d74c3b00
	float InteractionCurAngle;//[Offset: 0xd8, Size: 0x4] 0x78d74c3b80

--------------------------------
Class: AxisPositionGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: AxisPositionGizmo.InteractiveGizmo.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x78d74c5000
	interface class None* ParameterSource;//[Offset: 0x58, Size: 0x10] 0x78d74c5080
	interface class None* HitTarget;//[Offset: 0x68, Size: 0x10] 0x78d74c5100
	interface class None* StateTarget;//[Offset: 0x78, Size: 0x10] 0x78d74c5180
	bool bEnableSignedAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78d74c5200
	bool bInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x78d74c5280
	Vector InteractionOrigin;//[Offset: 0x8c, Size: 0xc] 0x78d74c3200
	Vector InteractionAxis;//[Offset: 0x98, Size: 0xc] 0x78d74c3280
	Vector InteractionStartPoint;//[Offset: 0xa4, Size: 0xc] 0x78d74c3300
	Vector InteractionCurPoint;//[Offset: 0xb0, Size: 0xc] 0x78d74c3380
	float InteractionStartParameter;//[Offset: 0xbc, Size: 0x4] 0x78d74c3400
	float InteractionCurParameter;//[Offset: 0xc0, Size: 0x4] 0x78d74c3480
	float ParameterSign;//[Offset: 0xc4, Size: 0x4] 0x78d74c3500

--------------------------------
Class: GizmoConstantAxisSource.Object
	Vector Origin;//[Offset: 0x30, Size: 0xc] 0x78d74c4f00
	Vector Direction;//[Offset: 0x3c, Size: 0xc] 0x78d74c4f80

--------------------------------
Class: GizmoConstantFrameAxisSource.Object
	Vector Origin;//[Offset: 0x30, Size: 0xc] 0x78d74c4d00
	Vector Direction;//[Offset: 0x3c, Size: 0xc] 0x78d74c4d80
	Vector TangentX;//[Offset: 0x48, Size: 0xc] 0x78d74c4e00
	Vector TangentY;//[Offset: 0x54, Size: 0xc] 0x78d74c4e80

--------------------------------
Class: GizmoWorldAxisSource.Object
	Vector Origin;//[Offset: 0x30, Size: 0xc] 0x78d74c4c00
	int AxisIndex;//[Offset: 0x3c, Size: 0x4] 0x78d74c4c80

--------------------------------
Class: GizmoComponentAxisSource.Object
	SceneComponent* Component;//[Offset: 0x30, Size: 0x8] 0x78d74c4a80
	int AxisIndex;//[Offset: 0x38, Size: 0x4] 0x78d74c4b00
	bool bLocalAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78d74c4b80

--------------------------------
Class: InteractiveToolPropertySet.Object
	InteractiveToolPropertySet* CachedProperties;//[Offset: 0x38, Size: 0x8] 0x78d74c4980
	bool bIsPropertySetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78d74c4a00

--------------------------------
Class: BrushBaseProperties.InteractiveToolPropertySet.Object
	float BrushSize;//[Offset: 0x60, Size: 0x4] 0x78d74c4600
	bool bSpecifyRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78d74c4680
	float BrushRadius;//[Offset: 0x68, Size: 0x4] 0x78d74c4700
	float BrushStrength;//[Offset: 0x6c, Size: 0x4] 0x78d74c4780
	float BrushFalloffAmount;//[Offset: 0x70, Size: 0x4] 0x78d74c4800
	bool bShowStrength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78d74c4880
	bool bShowFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1] 0x78d74c4900

--------------------------------
Class: InteractiveTool.Object
	InputBehaviorSet* InputBehaviors;//[Offset: 0x48, Size: 0x8] 0x78d74c4500
	Object*[] ToolPropertyObjects;//[Offset: 0x50, Size: 0x10] 0x78d7495920

--------------------------------
Class: SingleSelectionTool.InteractiveTool.Object

--------------------------------
Class: MeshSurfacePointTool.SingleSelectionTool.InteractiveTool.Object

--------------------------------
Class: BaseBrushTool.MeshSurfacePointTool.SingleSelectionTool.InteractiveTool.Object
	BrushBaseProperties* BrushProperties;//[Offset: 0xc0, Size: 0x8] 0x78d74c4280
	bool bInBrushStroke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x78d74c4300
	float WorldToLocalScale;//[Offset: 0xcc, Size: 0x4] 0x78d74c4380
	BrushStampData LastBrushStamp;//[Offset: 0xd0, Size: 0xac] 0x78d74c4400
	class BrushBaseProperties* PropertyClass;//[Offset: 0x190, Size: 0x28] 0x78d7495880
	BrushStampIndicator* BrushStampIndicator;//[Offset: 0x1b8, Size: 0x8] 0x78d74c4480

--------------------------------
Class: BrushStampData

--------------------------------
Class: BrushStampIndicator.InteractiveGizmo.Object
	float BrushRadius;//[Offset: 0x38, Size: 0x4] 0x78d74c5c80
	float BrushFalloff;//[Offset: 0x3c, Size: 0x4] 0x78d74c5d00
	Vector BrushPosition;//[Offset: 0x40, Size: 0xc] 0x78d74c5d80
	Vector BrushNormal;//[Offset: 0x4c, Size: 0xc] 0x78d74c5e00
	bool bDrawIndicatorLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78d74c5e80
	bool bDrawRadiusCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78d74c5f00
	int SampleStepCount;//[Offset: 0x5c, Size: 0x4] 0x78d74c5f80
	LinearColor LineColor;//[Offset: 0x60, Size: 0x10] 0x78d74c6000
	float LineThickness;//[Offset: 0x70, Size: 0x4] 0x78d74c6080
	bool bDepthTested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78d74c6100
	bool bDrawSecondaryLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1] 0x78d74c6180
	float SecondaryLineThickness;//[Offset: 0x78, Size: 0x4] 0x78d74c6200
	LinearColor SecondaryLineColor;//[Offset: 0x7c, Size: 0x10] 0x78d74c6280
	PrimitiveComponent* AttachedComponent;//[Offset: 0x90, Size: 0x8] 0x78d74c6300

--------------------------------
Class: BrushStampIndicatorBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: ClickDragInputBehavior.AnyButtonInputBehavior.InputBehavior.Object
	bool bUpdateModifiersDuringDrag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x78d74c5c00

--------------------------------
Class: LocalClickDragInputBehavior.ClickDragInputBehavior.AnyButtonInputBehavior.InputBehavior.Object

--------------------------------
Class: InteractiveToolBuilder.Object

--------------------------------
Class: ClickDragToolBuilder.InteractiveToolBuilder.Object

--------------------------------
Class: ClickDragTool.InteractiveTool.Object

--------------------------------
Class: InternalToolFrameworkActor.Actor.Object

--------------------------------
Class: GizmoActor.InternalToolFrameworkActor.Actor.Object

--------------------------------
Class: GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LinearColor Color;//[Offset: 0x470, Size: 0x10] 0x78d74c5980
	float HoverSizeMultiplier;//[Offset: 0x480, Size: 0x4] 0x78d74c5a00
	float PixelHitDistanceThreshold;//[Offset: 0x484, Size: 0x4] 0x78d74c5a80
	void UpdateWorldLocalState(bool bWorldIn);// 0xce3fab0 0x78d74b1e40
	void UpdateHoverState(bool bHoveringIn);// 0xce3fb70 0x78d74b1f20

--------------------------------
Class: GizmoArrowComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Direction;//[Offset: 0x490, Size: 0xc] 0x78d74c5780
	float Gap;//[Offset: 0x49c, Size: 0x4] 0x78d74c5800
	float Length;//[Offset: 0x4a0, Size: 0x4] 0x78d74c5880
	float Thickness;//[Offset: 0x4a4, Size: 0x4] 0x78d74c5900

--------------------------------
Class: GizmoBoxComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Origin;//[Offset: 0x490, Size: 0xc] 0x78d74c5480
	Quat Rotation;//[Offset: 0x4a0, Size: 0x10] 0x78d74c5500
	Vector Dimensions;//[Offset: 0x4b0, Size: 0xc] 0x78d74c5580
	float LineThickness;//[Offset: 0x4bc, Size: 0x4] 0x78d74c5600
	bool bRemoveHiddenLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1] 0x78d74c5680
	bool bEnableAxisFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 0x1] 0x78d74c5700

--------------------------------
Class: GizmoCircleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Normal;//[Offset: 0x490, Size: 0xc] 0x78d74c7280
	float Radius;//[Offset: 0x49c, Size: 0x4] 0x78d74c7300
	float Thickness;//[Offset: 0x4a0, Size: 0x4] 0x78d74c7380
	int NumSides;//[Offset: 0x4a4, Size: 0x4] 0x78d74c5300
	bool bViewAligned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1] 0x78d74c5380
	bool bOnlyAllowFrontFacingHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 0x1] 0x78d74c5400

--------------------------------
Class: GizmoTransformSource.Interface.Object
	void SetTransform(out const Transform NewTransform);// 0xce40484 0x78d74b5640
	Transform GetTransform();// 0xce40568 0x78d74b1d60

--------------------------------
Class: GizmoAxisSource.Interface.Object
	bool HasTangentVectors();// 0xce40afc 0x78d74b52c0
	void GetTangentVectors(out Vector TangentXOut, out Vector TangentYOut);// 0xce409f8 0x78d74b53a0
	Vector GetOrigin();// 0xce40b7c 0x78d74b5480
	Vector GetDirection();// 0xce40b3c 0x78d74b5560

--------------------------------
Class: GizmoClickTarget.Interface.Object
	void UpdateHoverState(bool bHovering);// 0xce40fbc 0x78d74b51e0

--------------------------------
Class: GizmoStateTarget.Interface.Object
	void EndUpdate();// 0xce41390 0x78d74b5020
	void BeginUpdate();// 0xce413ac 0x78d74b5100

--------------------------------
Class: GizmoFloatParameterSource.Interface.Object
	void SetParameter(float NewValue);// 0xce41740 0x78d74b4ca0
	float GetParameter();// 0xce4180c 0x78d74b4d80
	void EndModify();// 0xce41724 0x78d74b4e60
	void BeginModify();// 0xce417f0 0x78d74b4f40

--------------------------------
Class: GizmoVec2ParameterSource.Interface.Object
	void SetParameter(out const Vector2D NewValue);// 0xce41c58 0x78d74b4920
	Vector2D GetParameter();// 0xce41d2c 0x78d74b4a00
	void EndModify();// 0xce41c3c 0x78d74b4ae0
	void BeginModify();// 0xce41d10 0x78d74b4bc0

--------------------------------
Class: GizmoLineHandleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Normal;//[Offset: 0x490, Size: 0xc] 0x78d74c6980
	float HandleSize;//[Offset: 0x49c, Size: 0x4] 0x78d74c6a00
	float Thickness;//[Offset: 0x4a0, Size: 0x4] 0x78d74c6a80
	Vector Direction;//[Offset: 0x4a4, Size: 0xc] 0x78d74c6b00
	float Length;//[Offset: 0x4b0, Size: 0x4] 0x78d74c6b80
	bool bImageScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 0x1] 0x78d74c6c00

--------------------------------
Class: GizmoRectangleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector DirectionX;//[Offset: 0x490, Size: 0xc] 0x78d74c6580
	Vector DirectionY;//[Offset: 0x49c, Size: 0xc] 0x78d74c6600
	float OffsetX;//[Offset: 0x4a8, Size: 0x4] 0x78d74c6680
	float OffsetY;//[Offset: 0x4ac, Size: 0x4] 0x78d74c6700
	float LengthX;//[Offset: 0x4b0, Size: 0x4] 0x78d74c6780
	float LengthY;//[Offset: 0x4b4, Size: 0x4] 0x78d74c6800
	float Thickness;//[Offset: 0x4b8, Size: 0x4] 0x78d74c6880
	byte SegmentFlags;//[Offset: 0x4bc, Size: 0x1] 0x78d74c6900

--------------------------------
Class: GizmoLambdaHitTarget.Object

--------------------------------
Class: GizmoComponentHitTarget.Object
	PrimitiveComponent* Component;//[Offset: 0x30, Size: 0x8] 0x78d74c6500

--------------------------------
Class: InputBehaviorSource.Interface.Object

--------------------------------
Class: InputRouter.Object
	bool bAutoInvalidateOnHover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78d74c8400
	bool bAutoInvalidateOnCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78d74c6380
	InputBehaviorSet* ActiveInputBehaviors;//[Offset: 0x38, Size: 0x8] 0x78d74c6400

--------------------------------
Class: InteractionMechanic.Object

--------------------------------
Class: InteractiveGizmoManager.Object
	ActiveGizmo[] ActiveGizmos;//[Offset: 0x30, Size: 0x10] 0x78d7495740
	<FString,InteractiveGizmoBuilder*> GizmoBuilders;//[Offset: 0x58, Size: 0x50] 0x78d7107b40

--------------------------------
Class: ActiveGizmo

--------------------------------
Class: ToolContextTransactionProvider.Interface.Object

--------------------------------
Class: InteractiveToolManager.Object
	InteractiveTool* ActiveLeftTool;//[Offset: 0x30, Size: 0x8] 0x78d74c8080
	InteractiveTool* ActiveRightTool;//[Offset: 0x38, Size: 0x8] 0x78d74c8100
	<FString,InteractiveToolBuilder*> ToolBuilders;//[Offset: 0x90, Size: 0x50] 0x78d7107a80

--------------------------------
Class: ToolFrameworkComponent.Interface.Object

--------------------------------
Class: InteractiveToolsContext.Object
	InputRouter* InputRouter;//[Offset: 0x58, Size: 0x8] 0x78d74c7f00
	InteractiveToolManager* ToolManager;//[Offset: 0x60, Size: 0x8] 0x78d74c7f80
	InteractiveGizmoManager* GizmoManager;//[Offset: 0x68, Size: 0x8] 0x78d74c8000
	class InteractiveToolManager* ToolManagerClass;//[Offset: 0x70, Size: 0x28] 0x78d74956a0

--------------------------------
Class: IntervalGizmoActor.GizmoActor.InternalToolFrameworkActor.Actor.Object
	GizmoLineHandleComponent* UpIntervalComponent;//[Offset: 0x220, Size: 0x8] 0x78d74c7d80
	GizmoLineHandleComponent* DownIntervalComponent;//[Offset: 0x228, Size: 0x8] 0x78d74c7e00
	GizmoLineHandleComponent* ForwardIntervalComponent;//[Offset: 0x230, Size: 0x8] 0x78d74c7e80

--------------------------------
Class: IntervalGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: IntervalGizmo.InteractiveGizmo.Object
	GizmoTransformChangeStateTarget* StateTarget;//[Offset: 0x38, Size: 0x8] 0x78d74c7a80
	TransformProxy* TransformProxy;//[Offset: 0x50, Size: 0x8] 0x78d74c7b00
	PrimitiveComponent*[] ActiveComponents;//[Offset: 0x58, Size: 0x10] 0x78d7495560
	InteractiveGizmo*[] ActiveGizmos;//[Offset: 0x68, Size: 0x10] 0x78d7495600
	GizmoComponentAxisSource* AxisYSource;//[Offset: 0x90, Size: 0x8] 0x78d74c7c80
	GizmoComponentAxisSource* AxisZSource;//[Offset: 0x98, Size: 0x8] 0x78d74c7d00

--------------------------------
Class: GizmoTransformChangeStateTarget.Object
	interface class None* TransactionManager;//[Offset: 0x50, Size: 0x10] 0x78d74cb500

--------------------------------
Class: TransformProxy.Object
	bool bRotatePerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78d74cc180
	bool bSetPivotMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x78d74cc200
	Transform SharedTransform;//[Offset: 0x90, Size: 0x30] 0x78d74cc280
	Transform InitialSharedTransform;//[Offset: 0xc0, Size: 0x30] 0x78d74cc300

--------------------------------
Class: GizmoBaseFloatParameterSource.Object

--------------------------------
Class: GizmoAxisIntervalParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* FloatParameterSource;//[Offset: 0x48, Size: 0x10] 0x78d74c7900
	float MinParameter;//[Offset: 0x58, Size: 0x4] 0x78d74c7980
	float MaxParameter;//[Offset: 0x5c, Size: 0x4] 0x78d74c7a00

--------------------------------
Class: KeyAsModifierInputBehavior.InputBehavior.Object

--------------------------------
Class: MeshSurfacePointToolBuilder.InteractiveToolBuilder.Object

--------------------------------
Class: MouseHoverBehavior.InputBehavior.Object

--------------------------------
Class: MultiClickSequenceInputBehavior.AnyButtonInputBehavior.InputBehavior.Object

--------------------------------
Class: MultiSelectionTool.InteractiveTool.Object

--------------------------------
Class: GizmoLocalFloatParameterSource.GizmoBaseFloatParameterSource.Object
	float Value;//[Offset: 0x48, Size: 0x4] 0x78d74c7800
	GizmoFloatParameterChange LastChange;//[Offset: 0x4c, Size: 0x8] 0x78d74c7880

--------------------------------
Class: GizmoFloatParameterChange
	float InitialValue;//[Offset: 0x0, Size: 0x4] 0x78dbf7cb00
	float CurrentValue;//[Offset: 0x4, Size: 0x4] 0x78dbf7cb80

--------------------------------
Class: GizmoBaseVec2ParameterSource.Object

--------------------------------
Class: GizmoLocalVec2ParameterSource.GizmoBaseVec2ParameterSource.Object
	Vector2D Value;//[Offset: 0x48, Size: 0x8] 0x78d74c7700
	GizmoVec2ParameterChange LastChange;//[Offset: 0x50, Size: 0x10] 0x78d74c7780

--------------------------------
Class: GizmoVec2ParameterChange
	Vector2D InitialValue;//[Offset: 0x0, Size: 0x8] 0x78dbf7ca00
	Vector2D CurrentValue;//[Offset: 0x8, Size: 0x8] 0x78dbf7ca80

--------------------------------
Class: GizmoAxisTranslationParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10] 0x78d74c9480
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10] 0x78d74c7400
	float Parameter;//[Offset: 0xb0, Size: 0x4] 0x78d74c7480
	GizmoFloatParameterChange LastChange;//[Offset: 0xb4, Size: 0x8] 0x78d74c7500
	Vector CurTranslationAxis;//[Offset: 0xbc, Size: 0xc] 0x78d74c7580
	Vector CurTranslationOrigin;//[Offset: 0xc8, Size: 0xc] 0x78d74c7600
	Transform InitialTransform;//[Offset: 0xe0, Size: 0x30] 0x78d74c7680

--------------------------------
Class: GizmoPlaneTranslationParameterSource.GizmoBaseVec2ParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10] 0x78d74c9000
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10] 0x78d74c9080
	Vector2D Parameter;//[Offset: 0xb0, Size: 0x8] 0x78d74c9100
	GizmoVec2ParameterChange LastChange;//[Offset: 0xb8, Size: 0x10] 0x78d74c9180
	Vector CurTranslationOrigin;//[Offset: 0xc8, Size: 0xc] 0x78d74c9200
	Vector CurTranslationNormal;//[Offset: 0xd4, Size: 0xc] 0x78d74c9280
	Vector CurTranslationAxisX;//[Offset: 0xe0, Size: 0xc] 0x78d74c9300
	Vector CurTranslationAxisY;//[Offset: 0xec, Size: 0xc] 0x78d74c9380
	Transform InitialTransform;//[Offset: 0x100, Size: 0x30] 0x78d74c9400

--------------------------------
Class: GizmoAxisRotationParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10] 0x78d74c8c80
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10] 0x78d74c8d00
	float Angle;//[Offset: 0xb0, Size: 0x4] 0x78d74c8d80
	GizmoFloatParameterChange LastChange;//[Offset: 0xb4, Size: 0x8] 0x78d74c8e00
	Vector CurRotationAxis;//[Offset: 0xbc, Size: 0xc] 0x78d74c8e80
	Vector CurRotationOrigin;//[Offset: 0xc8, Size: 0xc] 0x78d74c8f00
	Transform InitialTransform;//[Offset: 0xe0, Size: 0x30] 0x78d74c8f80

--------------------------------
Class: GizmoUniformScaleParameterSource.GizmoBaseVec2ParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x78d74c8780
	interface class None* TransformSource;//[Offset: 0x58, Size: 0x10] 0x78d74c8800
	float ScaleMultiplier;//[Offset: 0x68, Size: 0x4] 0x78d74c8880
	Vector2D Parameter;//[Offset: 0x6c, Size: 0x8] 0x78d74c8900
	GizmoVec2ParameterChange LastChange;//[Offset: 0x74, Size: 0x10] 0x78d74c8980
	Vector CurScaleOrigin;//[Offset: 0x84, Size: 0xc] 0x78d74c8a00
	Vector CurScaleNormal;//[Offset: 0x90, Size: 0xc] 0x78d74c8a80
	Vector CurScaleAxisX;//[Offset: 0x9c, Size: 0xc] 0x78d74c8b00
	Vector CurScaleAxisY;//[Offset: 0xa8, Size: 0xc] 0x78d74c8b80
	Transform InitialTransform;//[Offset: 0xc0, Size: 0x30] 0x78d74c8c00

--------------------------------
Class: GizmoAxisScaleParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x78d74ca480
	interface class None* TransformSource;//[Offset: 0x58, Size: 0x10] 0x78d74ca500
	float ScaleMultiplier;//[Offset: 0x68, Size: 0x4] 0x78d74c8480
	float Parameter;//[Offset: 0x6c, Size: 0x4] 0x78d74c8500
	GizmoFloatParameterChange LastChange;//[Offset: 0x70, Size: 0x8] 0x78d74c8580
	Vector CurScaleAxis;//[Offset: 0x78, Size: 0xc] 0x78d74c8600
	Vector CurScaleOrigin;//[Offset: 0x84, Size: 0xc] 0x78d74c8680
	Transform InitialTransform;//[Offset: 0x90, Size: 0x30] 0x78d74c8700

--------------------------------
Class: GizmoPlaneScaleParameterSource.GizmoBaseVec2ParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10] 0x78d74c9f80
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10] 0x78d74ca000
	float ScaleMultiplier;//[Offset: 0xb0, Size: 0x4] 0x78d74ca080
	Vector2D Parameter;//[Offset: 0xb4, Size: 0x8] 0x78d74ca100
	GizmoVec2ParameterChange LastChange;//[Offset: 0xbc, Size: 0x10] 0x78d74ca180
	Vector CurScaleOrigin;//[Offset: 0xcc, Size: 0xc] 0x78d74ca200
	Vector CurScaleNormal;//[Offset: 0xd8, Size: 0xc] 0x78d74ca280
	Vector CurScaleAxisX;//[Offset: 0xe4, Size: 0xc] 0x78d74ca300
	Vector CurScaleAxisY;//[Offset: 0xf0, Size: 0xc] 0x78d74ca380
	Transform InitialTransform;//[Offset: 0x100, Size: 0x30] 0x78d74ca400

--------------------------------
Class: PlanePositionGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: PlanePositionGizmo.InteractiveGizmo.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x78d74c9700
	interface class None* ParameterSource;//[Offset: 0x58, Size: 0x10] 0x78d74c9780
	interface class None* HitTarget;//[Offset: 0x68, Size: 0x10] 0x78d74c9800
	interface class None* StateTarget;//[Offset: 0x78, Size: 0x10] 0x78d74c9880
	bool bEnableSignedAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78d74c9900
	bool bFlipX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x78d74c9980
	bool bFlipY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1] 0x78d74c9a00
	bool bInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b, Size: 0x1] 0x78d74c9a80
	Vector InteractionOrigin;//[Offset: 0x8c, Size: 0xc] 0x78d74c9b00
	Vector InteractionNormal;//[Offset: 0x98, Size: 0xc] 0x78d74c9b80
	Vector InteractionAxisX;//[Offset: 0xa4, Size: 0xc] 0x78d74c9c00
	Vector InteractionAxisY;//[Offset: 0xb0, Size: 0xc] 0x78d74c9c80
	Vector InteractionStartPoint;//[Offset: 0xbc, Size: 0xc] 0x78d74c9d00
	Vector InteractionCurPoint;//[Offset: 0xc8, Size: 0xc] 0x78d74c9d80
	Vector2D InteractionStartParameter;//[Offset: 0xd4, Size: 0x8] 0x78d74c9e00
	Vector2D InteractionCurParameter;//[Offset: 0xdc, Size: 0x8] 0x78d74c9e80
	Vector2D ParameterSigns;//[Offset: 0xe4, Size: 0x8] 0x78d74c9f00

--------------------------------
Class: SelectionSet.Object

--------------------------------
Class: MeshSelectionSet.SelectionSet.Object
	int[] Vertices;//[Offset: 0x40, Size: 0x10] 0x78d74952e0
	int[] Edges;//[Offset: 0x50, Size: 0x10] 0x78d7495380
	int[] Faces;//[Offset: 0x60, Size: 0x10] 0x78d7495420
	int[] Groups;//[Offset: 0x70, Size: 0x10] 0x78d74954c0

--------------------------------
Class: SingleClickInputBehavior.AnyButtonInputBehavior.InputBehavior.Object
	bool HitTestOnRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x78d74cb580

--------------------------------
Class: SingleClickToolBuilder.InteractiveToolBuilder.Object

--------------------------------
Class: SingleClickTool.InteractiveTool.Object

--------------------------------
Class: GizmoNilStateTarget.Object

--------------------------------
Class: GizmoLambdaStateTarget.Object

--------------------------------
Class: GizmoObjectModifyStateTarget.Object

--------------------------------
Class: TransformGizmoActor.GizmoActor.InternalToolFrameworkActor.Actor.Object
	PrimitiveComponent* TranslateX;//[Offset: 0x220, Size: 0x8] 0x78d74cad00
	PrimitiveComponent* TranslateY;//[Offset: 0x228, Size: 0x8] 0x78d74cad80
	PrimitiveComponent* TranslateZ;//[Offset: 0x230, Size: 0x8] 0x78d74cae00
	PrimitiveComponent* TranslateYZ;//[Offset: 0x238, Size: 0x8] 0x78d74cae80
	PrimitiveComponent* TranslateXZ;//[Offset: 0x240, Size: 0x8] 0x78d74caf00
	PrimitiveComponent* TranslateXY;//[Offset: 0x248, Size: 0x8] 0x78d74caf80
	PrimitiveComponent* RotateX;//[Offset: 0x250, Size: 0x8] 0x78d74cb000
	PrimitiveComponent* RotateY;//[Offset: 0x258, Size: 0x8] 0x78d74cb080
	PrimitiveComponent* RotateZ;//[Offset: 0x260, Size: 0x8] 0x78d74cb100
	PrimitiveComponent* UniformScale;//[Offset: 0x268, Size: 0x8] 0x78d74cb180
	PrimitiveComponent* AxisScaleX;//[Offset: 0x270, Size: 0x8] 0x78d74cb200
	PrimitiveComponent* AxisScaleY;//[Offset: 0x278, Size: 0x8] 0x78d74cb280
	PrimitiveComponent* AxisScaleZ;//[Offset: 0x280, Size: 0x8] 0x78d74cb300
	PrimitiveComponent* PlaneScaleYZ;//[Offset: 0x288, Size: 0x8] 0x78d74cb380
	PrimitiveComponent* PlaneScaleXZ;//[Offset: 0x290, Size: 0x8] 0x78d74cb400
	PrimitiveComponent* PlaneScaleXY;//[Offset: 0x298, Size: 0x8] 0x78d74cb480

--------------------------------
Class: TransformGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: TransformGizmo.InteractiveGizmo.Object
	TransformProxy* ActiveTarget;//[Offset: 0x40, Size: 0x8] 0x78d74cc380
	bool bSnapToWorldGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78d74cc400
	bool bGridSizeIsExplicit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x78d74cc480
	Vector ExplicitGridSize;//[Offset: 0x4c, Size: 0xc] 0x78d74cc500
	bool bRotationGridSizeIsExplicit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78d74cc580
	Rotator ExplicitRotationGridSize;//[Offset: 0x5c, Size: 0xc] 0x78d74cc600
	bool bSnapToWorldRotGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78d74ca580
	bool bUseContextCoordinateSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1] 0x78d74ca600
	enum CurrentCoordinateSystem;//[Offset: 0x6c, Size: 0x4] 0x78d74979a0
	PrimitiveComponent*[] ActiveComponents;//[Offset: 0x100, Size: 0x10] 0x78d7497a40
	PrimitiveComponent*[] NonuniformScaleComponents;//[Offset: 0x110, Size: 0x10] 0x78d7497ae0
	InteractiveGizmo*[] ActiveGizmos;//[Offset: 0x120, Size: 0x10] 0x78d7497b80
	GizmoConstantFrameAxisSource* CameraAxisSource;//[Offset: 0x140, Size: 0x8] 0x78d74ca880
	GizmoComponentAxisSource* AxisXSource;//[Offset: 0x148, Size: 0x8] 0x78d74ca900
	GizmoComponentAxisSource* AxisYSource;//[Offset: 0x150, Size: 0x8] 0x78d74ca980
	GizmoComponentAxisSource* AxisZSource;//[Offset: 0x158, Size: 0x8] 0x78d74caa00
	GizmoComponentAxisSource* UnitAxisXSource;//[Offset: 0x160, Size: 0x8] 0x78d74caa80
	GizmoComponentAxisSource* UnitAxisYSource;//[Offset: 0x168, Size: 0x8] 0x78d74cab00
	GizmoComponentAxisSource* UnitAxisZSource;//[Offset: 0x170, Size: 0x8] 0x78d74cab80
	GizmoTransformChangeStateTarget* StateTarget;//[Offset: 0x178, Size: 0x8] 0x78d74cac00
	GizmoScaledTransformSource* ScaledTransformSource;//[Offset: 0x180, Size: 0x8] 0x78d74cac80

--------------------------------
Class: GizmoScaledTransformSource.GizmoBaseTransformSource.Object
	interface class None* ChildTransformSource;//[Offset: 0x48, Size: 0x10] 0x78d74cc000

--------------------------------
Class: GizmoBaseTransformSource.Object

--------------------------------
Class: GizmoComponentWorldTransformSource.GizmoBaseTransformSource.Object
	SceneComponent* Component;//[Offset: 0x48, Size: 0x8] 0x78d74cc080
	bool bModifyComponentOnTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78d74cc100

--------------------------------
Class: GizmoTransformProxyTransformSource.GizmoBaseTransformSource.Object
	TransformProxy* Proxy;//[Offset: 0x48, Size: 0x8] 0x78d74cbf80

--------------------------------
Class: UINoticeTabItem_C.UserWidget.Widget.Visual.Object
	Image* BgImg;//[Offset: 0x260, Size: 0x8] 0x78d74cf600
	Image* DateBg;//[Offset: 0x268, Size: 0x8] 0x78d74cdd80
	UITextBlock* DateText;//[Offset: 0x270, Size: 0x8] 0x78d74cf480
	Button* SelectBtn;//[Offset: 0x278, Size: 0x8] 0x78d74cf400
	Image* SelectImg;//[Offset: 0x280, Size: 0x8] 0x78d74cef00
	UITextBlock* TypeText;//[Offset: 0x288, Size: 0x8] 0x78d74cee00
	void UpdateNoticeTabView(FString Title, DateTime Time, int CallFunc_BreakDateTime_Year, int CallFunc_BreakDateTime_Month, int CallFunc_BreakDateTime_Day, int CallFunc_BreakDateTime_Hour, int CallFunc_BreakDateTime_Minute, int CallFunc_BreakDateTime_Second, int CallFunc_BreakDateTime_Millisecond, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xaa7cd18 0x78d74bb3e0

--------------------------------
Class: Notice_C.UserWidget.Widget.Visual.Object
	Image* BgImg;//[Offset: 0x260, Size: 0x8] 0x78d6f23400
	Image* BgImg2;//[Offset: 0x268, Size: 0x8] 0x78d6f26280
	Image* BgImg4;//[Offset: 0x270, Size: 0x8] 0x78d6f22980
	UIButton* CloseBtn;//[Offset: 0x278, Size: 0x8] 0x78d6f2f880
	Image* Line1;//[Offset: 0x280, Size: 0x8] 0x78d6f23100
	Image* NoTipBg;//[Offset: 0x288, Size: 0x8] 0x78d6f21080
	Image* NoTipBg2;//[Offset: 0x290, Size: 0x8] 0x78d6f21000
	Button* NoTipBtn;//[Offset: 0x298, Size: 0x8] 0x78d6f20f80
	Image* NoTipImg;//[Offset: 0x2a0, Size: 0x8] 0x78d6f20f00
	CanvasPanel* NoTipPanel;//[Offset: 0x2a8, Size: 0x8] 0x78d6f22500
	ScrollBox* TabSBox;//[Offset: 0x2b0, Size: 0x8] 0x78d6f20d80
	Image* TitleBg;//[Offset: 0x2b8, Size: 0x8] 0x78d6f20d00
	WebBrowser* WebBro;//[Offset: 0x2c0, Size: 0x8] 0x78d6f22180
	void EnterLogin(GameInstance* CallFunc_GetGameInstance_ReturnValue, CoreGameInstance* K2Node_DynamicCast_AsCore_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0xaa7cd18 0x78d74b59c0
	void UpdateNoticeView(FString Content, FString Title, DateTime BeginTime, bool NewParam, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, UINoticeTabItem_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue);// 0xaa7cd18 0x78d74b5b80
	void SetNoticeUrl(FString Content);// 0xaa7cd18 0x78d74b5d40

--------------------------------
Class: InitWidgetEff_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78e6986e80
	WidgetAnimation* InitWidgetEffAnim;//[Offset: 0x268, Size: 0x8] 0x78e6986e00
	UIImage* UIImage_L1;//[Offset: 0x270, Size: 0x8] 0x78e6986d80
	UIImage* UIImage_L1;//[Offset: 0x278, Size: 0x8] 0x78e6986d00
	UIImage* UIImage_R1;//[Offset: 0x280, Size: 0x8] 0x78e6986c80
	void Construct();// 0xaa7cd18 0x78e71d4220
	void ExecuteUbergraph_InitWidgetEff(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0xaa7cd18 0x78e71d4060

--------------------------------
Class: HotUpdate_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78e6986680
	WidgetAnimation* InitWidgetBg02Anim;//[Offset: 0x268, Size: 0x8] 0x78e6986600
	WidgetAnimation* InitWidgetBg01Anim;//[Offset: 0x270, Size: 0x8] 0x78e6986580
	CanvasPanel* ContentView;//[Offset: 0x278, Size: 0x8] 0x78e6986500
	UIImage* left01;//[Offset: 0x280, Size: 0x8] 0x78e6986480
	UIImage* left02;//[Offset: 0x288, Size: 0x8] 0x78e6986400
	UIImage* left03;//[Offset: 0x290, Size: 0x8] 0x78e6988500
	UIImage* right01;//[Offset: 0x298, Size: 0x8] 0x78e6986200
	UIImage* right02;//[Offset: 0x2a0, Size: 0x8] 0x78e6986300
	UIImage* right03;//[Offset: 0x2a8, Size: 0x8] 0x78e6986280
	UIImage* UIImage;//[Offset: 0x2b0, Size: 0x8] 0x78e6986380
	UIImage* UIImage;//[Offset: 0x2b8, Size: 0x8] 0x78e6986180
	UIImage* UIImage;//[Offset: 0x2c0, Size: 0x8] 0x78e6986100
	UIImage* UIImage;//[Offset: 0x2c8, Size: 0x8] 0x78e6986080
	UIImage* UIImage;//[Offset: 0x2d0, Size: 0x8] 0x78e6986000
	UIImage* UIImage;//[Offset: 0x2d8, Size: 0x8] 0x78e6985f80
	UIImage* UIImage;//[Offset: 0x2e0, Size: 0x8] 0x78e6985f00
	UIImage* UIImage_BG;//[Offset: 0x2e8, Size: 0x8] 0x78e6985e80
	UIImage* UIImage_center;//[Offset: 0x2f0, Size: 0x8] 0x78e6985e00
	UIImage* UIImage_l3;//[Offset: 0x2f8, Size: 0x8] 0x78e6985d80
	UIImage* UIImage_l4;//[Offset: 0x300, Size: 0x8] 0x78e6985d00
	UIImage* UIImage_line01;//[Offset: 0x308, Size: 0x8] 0x78e6985c80
	UIImage* UIImage_line02;//[Offset: 0x310, Size: 0x8] 0x78e6985c00
	UIImage* UIImage_line03;//[Offset: 0x318, Size: 0x8] 0x78e6985b80
	UIImage* UIImage_line04;//[Offset: 0x320, Size: 0x8] 0x78e6985b00
	UIImage* UIImage_moudeY;//[Offset: 0x328, Size: 0x8] 0x78e6985a80
	UIImage* UIImage_moudeY;//[Offset: 0x330, Size: 0x8] 0x78e6985a00
	UIImage* UIImage_moudeY;//[Offset: 0x338, Size: 0x8] 0x78e6985980
	UIImage* UIImage_moudeY;//[Offset: 0x340, Size: 0x8] 0x78e6985900
	UIImage* UIImage_R1;//[Offset: 0x348, Size: 0x8] 0x78e6985880
	UIImage* UIImage_r2;//[Offset: 0x350, Size: 0x8] 0x78e6985800
	UIImage* UIImage_W1;//[Offset: 0x358, Size: 0x8] 0x78e6985780
	UIImage* UIImage_W2;//[Offset: 0x360, Size: 0x8] 0x78e6985700
	UIImage* UIImage_W3;//[Offset: 0x368, Size: 0x8] 0x78e6985680
	UIParticleEmitter* UIParticleEmitter;//[Offset: 0x370, Size: 0x8] 0x78e6985600
	UIParticleEmitter* UIParticleEmitter;//[Offset: 0x378, Size: 0x8] 0x78e6985580
	void Construct();// 0xaa7cd18 0x78e71d4760
	void ExecuteUbergraph_HotUpdate(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0xaa7cd18 0x78e71d4680

--------------------------------
Class: InitWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78cd655c80
	WidgetAnimation* OpenRestartWidgetAnim;//[Offset: 0x268, Size: 0x8] 0x78cd655c00
	WidgetAnimation* CloseInitWidgetAnim;//[Offset: 0x270, Size: 0x8] 0x78cd655b80
	WidgetAnimation* OpenInitWidgetAnim;//[Offset: 0x278, Size: 0x8] 0x78cd655b00
	TextBlock* AdviceText;//[Offset: 0x280, Size: 0x8] 0x78cd655a80
	Image* Bg1;//[Offset: 0x288, Size: 0x8] 0x78cd655a00
	Image* Bg1;//[Offset: 0x290, Size: 0x8] 0x78cd655980
	Image* Bg1;//[Offset: 0x298, Size: 0x8] 0x78cd655900
	Image* Bg1;//[Offset: 0x2a0, Size: 0x8] 0x78cd655880
	Image* Bg2;//[Offset: 0x2a8, Size: 0x8] 0x78cd655800
	Button* Button_clear;//[Offset: 0x2b0, Size: 0x8] 0x78cd655780
	Button* CancleButton;//[Offset: 0x2b8, Size: 0x8] 0x78cd655700
	Button* CancleButton_cancel;//[Offset: 0x2c0, Size: 0x8] 0x78cd655680
	Button* ComfirmButton;//[Offset: 0x2c8, Size: 0x8] 0x78cd655600
	Button* ComfirmButton_ClearPaks;//[Offset: 0x2d0, Size: 0x8] 0x78cd655580
	Button* ComfirmButton_deletePak;//[Offset: 0x2d8, Size: 0x8] 0x78cd655500
	Button* ComfirmButton_Restart;//[Offset: 0x2e0, Size: 0x8] 0x78cd655480
	Button* ComfirmButton_whiterlist;//[Offset: 0x2e8, Size: 0x8] 0x78cd655400
	Button* ComfirmButtonEx;//[Offset: 0x2f0, Size: 0x8] 0x78cd655380
	TextBlock* DetailProgress;//[Offset: 0x2f8, Size: 0x8] 0x78cd655300
	TextBlock* Downing;//[Offset: 0x300, Size: 0x8] 0x78cd655280
	EditableTextBox* EditableTextBox_code;//[Offset: 0x308, Size: 0x8] 0x78cd655200
	HotUpdate_C* HotUpdate;//[Offset: 0x310, Size: 0x8] 0x78cd655180
	TextBlock* HotUpdateDesc1;//[Offset: 0x318, Size: 0x8] 0x78cd655100
	TextBlock* HotUpdateDesc1;//[Offset: 0x320, Size: 0x8] 0x78cd655080
	TextBlock* HotUpdateStatus;//[Offset: 0x328, Size: 0x8] 0x78cd657100
	Image* ImageInit;//[Offset: 0x330, Size: 0x8] 0x78cd657080
	InitWidgetEff_C* InitWidgetEff;//[Offset: 0x338, Size: 0x8] 0x78cd657000
	UITextBlock* LogControlHintText;//[Offset: 0x340, Size: 0x8] 0x78cd656f80
	UIButton* NetLogBtn;//[Offset: 0x348, Size: 0x8] 0x78cd656f00
	Notice_C* Notice;//[Offset: 0x350, Size: 0x8] 0x78cd656e80
	TextBlock* patch_number;//[Offset: 0x358, Size: 0x8] 0x78cd656e00
	TextBlock* Percent;//[Offset: 0x360, Size: 0x8] 0x78cd656d80
	TextBlock* Progress;//[Offset: 0x368, Size: 0x8] 0x78cd656d00
	CanvasPanel* PSOTipsProgress;//[Offset: 0x370, Size: 0x8] 0x78cd656c80
	CanvasPanel* RestartTips;//[Offset: 0x378, Size: 0x8] 0x78cd656c00
	TextBlock* Text2_ComfirmEX;//[Offset: 0x380, Size: 0x8] 0x78cd656b80
	TextBlock* TextCancel;//[Offset: 0x388, Size: 0x8] 0x78cd656b00
	TextBlock* TextCancel;//[Offset: 0x390, Size: 0x8] 0x78cd656a80
	TextBlock* TextConfirm;//[Offset: 0x398, Size: 0x8] 0x78cd656a00
	TextBlock* TextConfirm;//[Offset: 0x3a0, Size: 0x8] 0x78cd656980
	TextBlock* TextConfirm;//[Offset: 0x3a8, Size: 0x8] 0x78cd656900
	TextBlock* TextConfirm;//[Offset: 0x3b0, Size: 0x8] 0x78cd656880
	TextBlock* TextConfirm_Restart;//[Offset: 0x3b8, Size: 0x8] 0x78cd656800
	TextBlock* TextDisplayTips;//[Offset: 0x3c0, Size: 0x8] 0x78cd656780
	TextBlock* TextDisplayTips_clear;//[Offset: 0x3c8, Size: 0x8] 0x78cd656700
	CanvasPanel* TipsBG;//[Offset: 0x3d0, Size: 0x8] 0x78cd656680
	HorizontalBox* TipsButton;//[Offset: 0x3d8, Size: 0x8] 0x78cd656600
	HorizontalBox* TipsButton;//[Offset: 0x3e0, Size: 0x8] 0x78cd656580
	HorizontalBox* TipsButtonEx;//[Offset: 0x3e8, Size: 0x8] 0x78cd656500
	CanvasPanel* TipsClear;//[Offset: 0x3f0, Size: 0x8] 0x78cd656480
	CanvasPanel* TipsDebug;//[Offset: 0x3f8, Size: 0x8] 0x78cd656400
	CanvasPanel* TipsInfo;//[Offset: 0x400, Size: 0x8] 0x78cd656380
	CanvasPanel* TipsProgress;//[Offset: 0x408, Size: 0x8] 0x78cd656300
	TextBlock* TitleText;//[Offset: 0x410, Size: 0x8] 0x78cd656280
	UIButton* UEAndGameLogBtn;//[Offset: 0x418, Size: 0x8] 0x78cd656200
	UIImage* UIImage;//[Offset: 0x420, Size: 0x8] 0x78cd656180
	UIImage* UIImage_logo_tw;//[Offset: 0x428, Size: 0x8] 0x78cd656100
	byte TipsType;//[Offset: 0x430, Size: 0x1] 0x78cd658180
	bool NeedDoHotUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 0x1] 0x78cd658100
	int CallCount;//[Offset: 0x434, Size: 0x4] 0x78cd658080
	FName TableId;//[Offset: 0x438, Size: 0x8] 0x78cd658000
	bool GameLogEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1] 0x78cd657f80
	int LogTapsCount;//[Offset: 0x444, Size: 0x4] 0x78cd657f00
	bool BoolTrue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1] 0x78cd657e80
	FString LanguageCode;//[Offset: 0x450, Size: 0x10] 0x78cd657e00
	void SetTextFont(Font* DefaultFont, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, bool K2Node_SwitchString_CmpSuccess);// 0xaa7cd18 0x78e71d3c00
	void SetLOGOVisible(bool IsVisible, FString code, bool K2Node_SwitchString_CmpSuccess);// 0xaa7cd18 0x78e71d3b20
	void SyncVersionData(FString[] Value, FString[] Key, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CoreGameInstance* K2Node_DynamicCast_AsCore_Game_Instance, bool K2Node_DynamicCast_bSuccess, FString[] CallFunc_SyncVersonServerData_keys, FString[] CallFunc_SyncVersonServerData_values, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xaa7cd18 0x78e71d3a40
	void ShowMouse(PlayerController* CallFunc_GetPlayerController_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_StartsWith_ReturnValue);// 0xaa7cd18 0x78e71d7320
	void DisplayRestartTip(FText CallFunc_GetStringByMultiLanguage_NewParam, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FText CallFunc_GetStringByMultiLanguage_NewParam);// 0xaa7cd18 0x78e71d7240
	void InitLangaugeDesc(FText CallFunc_TextFromStringTable_ReturnValue, FText CallFunc_TextFromStringTable_ReturnValue, FText CallFunc_TextFromStringTable_ReturnValue, FText CallFunc_TextFromStringTable_ReturnValue, FText CallFunc_TextFromStringTable_ReturnValue, FText CallFunc_TextFromStringTable_ReturnValue, FText CallFunc_TextFromStringTable_ReturnValue);// 0xaa7cd18 0x78e71d7160
	void GetLanguageCode(out FString code, FString CallFunc_ReadOptionsLanguageFromIni_ReturnValue, LocalizationMgr* CallFunc_Instance_ReturnValue, bool CallFunc_IsEmpty_ReturnValue);// 0xaa7cd18 0x78e71d7080
	void RegisterWihteList(FText CallFunc_GetText_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0xaa7cd18 0x78e71d6fa0
	void ShowWhiteList(FString CallFunc_ReadWhiteListCode_magicCode, FText CallFunc_Conv_StringToText_ReturnValue);// 0xaa7cd18 0x78e71d6ec0
	void ShowClearPak(bool visible, FText CallFunc_GetStringByMultiLanguage_NewParam);// 0xaa7cd18 0x78e71d6de0
	void GetStringByMultiLanguage(FString Key, out FText NewParam, FText CallFunc_TextFromStringTable_ReturnValue);// 0xaa7cd18 0x78e71d6d00
	void InitLanguage(GameInstance* CallFunc_GetGameInstance_ReturnValue, FString CallFunc_GetLanguageCode_code, CoreGameInstance* K2Node_DynamicCast_AsCore_Game_Instance, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue);// 0xaa7cd18 0x78e71d6c20
	void ShowDisplayVersion(FString CallFunc_GetDisplayVersion_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0xaa7cd18 0x78e71d6b40
	void ShowNotice(TLNoticeInfo CallFunc_GetHotUpdateNotice_ReturnValue);// 0xaa7cd18 0x78e71d6a60
	void GetDownloadPakStr(out FString Out, int CallFunc_GetDownloadSpeed_ReturnValue, FText CallFunc_GetStringByMultiLanguage_NewParam, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_GetTotalDownloadPakNum_ReturnValue, int CallFunc_GetRemainDownloadPakNum_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0xaa7cd18 0x78e71d6980
	void SetDownloadText(byte code, FString CallFunc_GetDownloadPakStr_out, bool K2Node_SwitchEnum_CmpSuccess, FText CallFunc_Conv_StringToText_ReturnValue);// 0xaa7cd18 0x78e71d68a0
	void OnCancelBtnPressed(bool K2Node_SwitchEnum_CmpSuccess);// 0xaa7cd18 0x78e71d66e0
	void OnConfirmBtnPressed(bool K2Node_SwitchEnum_CmpSuccess);// 0xaa7cd18 0x78e71d6600
	void OnRep_DetailProgress();// 0xaa7cd18 0x78e71d6520
	void ExitGame(FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0xaa7cd18 0x78e71d6440
	void SizeToString(int64 Size, float CurSize);// 0xaa7cd18 0x78e71d6360
	void FinishInit(GameInstance* CallFunc_GetGameInstance_ReturnValue, CoreGameInstance* K2Node_DynamicCast_AsCore_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0xaa7cd18 0x78e71d6280
	void TickProgress(byte CallFunc_GetHotUpdateState_ReturnValue, FString CallFunc_GetDownloadProgressStr_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_GetDownloadProgress_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0xaa7cd18 0x78e71d61a0
	void StartDownload(bool CallFunc_UserConfirmDownload_ReturnValue);// 0xaa7cd18 0x78e71d60c0
	void DisplayTips(bool show, byte OperateType, FString extraMsg, FText CallFunc_GetStringByMultiLanguage_NewParam, FText CallFunc_GetStringByMultiLanguage_NewParam, FText CallFunc_GetStringByMultiLanguage_NewParam, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_GetStringByMultiLanguage_NewParam, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, float CallFunc_GetDiskFreeSizeMB_ReturnValue, float CallFunc_GetDiskNeedSizeMB_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FString CallFunc_GetTotalDownloadStr_ReturnValue, FString CallFunc_GetTotalDownloadStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FText CallFunc_Format_ReturnValue, FText CallFunc_GetStringByMultiLanguage_NewParam, FText CallFunc_Format_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0xaa7cd18 0x78e71d5fe0
	void CheckUpdate(out bool needCheck, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_StartTorchLightHotUpdate_ReturnValue);// 0xaa7cd18 0x78e71d5c60
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xaa7cd18 0x78e71d5b80
	void Construct();// 0xaa7cd18 0x78e71d5aa0
	void OnRecevHotUpdateMsg(byte State, byte msgCode, FString msg);// 0xaa7cd18 0x78e71d59c0
	void BndEvt__ComfirmButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xaa7cd18 0x78e71d20e0
	void BndEvt__CancleButton_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0xaa7cd18 0x78e71d2000
	void BndEvt__ComfirmButtonEx_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0xaa7cd18 0x78e71d1f20
	void BndEvt__Button_clear_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0xaa7cd18 0x78e71d1e40
	void UpdateFinish();// 0xaa7cd18 0x78e71d1d60
	void BndEvt__InitWidget_ComfirmButton_deletePak_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0xaa7cd18 0x78e71d5640
	void BndEvt__InitWidget_ComfirmButton_ClearPaks_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();// 0xaa7cd18 0x78e71d5560
	void BndEvt__InitWidget_CancleButton_cancel_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0xaa7cd18 0x78e71d5480
	void BndEvt__InitWidget_ComfirmButton_whiterlist_K2Node_ComponentBoundEvent_7_OnButtonClickedEvent__DelegateSignature();// 0xaa7cd18 0x78e71d53a0
	void BndEvt__InitWidget_FiveTapsEnableLogBtn_K2Node_ComponentBoundEvent_9_OnButtonClickedEvent__DelegateSignature();// 0xaa7cd18 0x78e71d52c0
	void BndEvt__InitWidget_NetLogBtn_K2Node_ComponentBoundEvent_11_OnButtonClickedEvent__DelegateSignature();// 0xaa7cd18 0x78e71d51e0
	void BndEvt__InitWidget_ComfirmButton_Restart_K2Node_ComponentBoundEvent_9_OnButtonClickedEvent__DelegateSignature();// 0xaa7cd18 0x78e71d5100
	void RunHotUpdate();// 0xaa7cd18 0x78e71d4f40
	void ExecuteUbergraph_InitWidget(int EntryPoint, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int ___int_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FText CallFunc_TextFromStringTable_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, byte K2Node_CustomEvent_state, byte K2Node_CustomEvent_msgCode, FString K2Node_CustomEvent_msg, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HasActiveWiFiConnection_ReturnValue, byte CallFunc_GetHotUpdateState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FText CallFunc_TextFromStringTable_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FText CallFunc_TextFromStringTable_ReturnValue, FText CallFunc_GetStringByMultiLanguage_NewParam, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_GetGameLuaNetLogEnable_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsXDDeveloper_ReturnValue, bool CallFunc_CheckUpdate_needCheck, bool CallFunc_IsCNRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0xaa7cd18 0x78e71d4d80

--------------------------------
Class: InitScene_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8] 0x78cd657d00
	void ReceiveBeginPlay();// 0xaa7cd18 0x78e71d4bc0
	void ExecuteUbergraph_InitScene(int EntryPoint, bool CallFunc_IsPlatformPC_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, InitWidget_C* CallFunc_Create_ReturnValue);// 0xaa7cd18 0x78e71d3ce0

--------------------------------
