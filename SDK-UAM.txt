Class: Package.Object

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x1270e3fee031

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: AndroidJavaSurfaceViewDevices.Object
	JavaSurfaceViewDevice[] SurfaceViewDevices;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: JavaSurfaceViewDevice
	FString Manufacturer;//[Offset: 0x0, Size: 0x10]
	FString Model;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AndroidDeviceProfileMatchingRules.Object
	ProfileMatch[] MatchProfile;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ProfileMatch
	FString Profile;//[Offset: 0x0, Size: 0x10]
	ProfileMatchItem[] Match;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ProfileMatchItem
	byte SourceType;//[Offset: 0x0, Size: 0x1]
	byte CompareType;//[Offset: 0x1, Size: 0x1]
	FString MatchString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: GCObjectReferencer.Object

--------------------------------
Class: AssetRegistryImpl.Object

--------------------------------
Class: DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: SparseDelegateFunction.DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: TextBuffer.Object

--------------------------------
Class: DynamicClass.Class.Struct.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Interface.Object

--------------------------------
Class: LinkerPlaceholderClass.Class.Struct.Field.Object

--------------------------------
Class: LinkerPlaceholderExportObject.Object

--------------------------------
Class: LinkerPlaceholderFunction.Function.Struct.Field.Object

--------------------------------
Class: MetaData.Object

--------------------------------
Class: ObjectRedirector.Object

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: EnumProperty.Property.Field.Object

--------------------------------
Class: ArrayProperty.Property.Field.Object

--------------------------------
Class: ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: BoolProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: ByteProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: ClassProperty.ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: DelegateProperty.Property.Field.Object

--------------------------------
Class: DoubleProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: IntProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: Int8Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: InterfaceProperty.Property.Field.Object

--------------------------------
Class: LazyObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: MapProperty.Property.Field.Object

--------------------------------
Class: MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: MulticastInlineDelegateProperty.MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: MulticastSparseDelegateProperty.MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: NameProperty.Property.Field.Object

--------------------------------
Class: SetProperty.Property.Field.Object

--------------------------------
Class: SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: SoftClassProperty.SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: StrProperty.Property.Field.Object

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: UInt16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt32Property.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: WeakObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: TextProperty.Property.Field.Object

--------------------------------
Class: PropertyWrapper.Object

--------------------------------
Class: MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: MulticastInlineDelegatePropertyWrapper.MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: Model.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 0x1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5d, Size: 0x1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 0x1]
	byte RemoteRole;//[Offset: 0x5f, Size: 0x1]
	bool bComponentsManualReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bActorManualReplicates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x68, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0x9c, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xa0, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xa8, Size: 0x40]
	Actor* Owner;//[Offset: 0xe8, Size: 0x8]
	FName NetDriverName;//[Offset: 0xf0, Size: 0x8]
	byte Role;//[Offset: 0xf8, Size: 0x1]
	byte NetDormancy;//[Offset: 0xf9, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xfa, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0xfb, Size: 0x1]
	int InputPriority;//[Offset: 0xfc, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x100, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x108, Size: 0x4]
	int NetTag;//[Offset: 0x10c, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x110, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x114, Size: 0x4]
	float NetPriority;//[Offset: 0x118, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x120, Size: 0x8]
	Actor*[] Children;//[Offset: 0x128, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x138, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x140, Size: 0x10]
	FName[] Layers;//[Offset: 0x158, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x168, Size: 0x8]
	FName[] Tags;//[Offset: 0x178, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x188, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x189, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x18a, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x18b, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x18c, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x18d, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x18e, Size: 0x1]
	delegate OnClicked;//[Offset: 0x18f, Size: 0x1]
	delegate OnReleased;//[Offset: 0x190, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x191, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x192, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x193, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x194, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x195, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x196, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x197, Size: 0x1]
	<class Object,ActorComponent*> OwnedComponentMap;//[Offset: 0x200, Size: 0x50]
	ActorComponent*[] InstanceComponents;//[Offset: 0x2b0, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x2c0, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x1ad2e3fee041
	void UserConstructionScript();// 0x1ad1e3fee041
	void TearOff();// 0x1ad0e3fee041
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x1acfe3fee041
	void SetTickGroup(byte NewTickGroup);// 0x1acee3fee041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x1acde3fee041
	void SetReplicates(bool bInReplicates);// 0x1acce3fee041
	void SetReplicateMovement(bool bInReplicateMovement);// 0x1acbe3fee041
	void SetOwner(Actor* NewOwner);// 0x1acae3fee041
	void SetNetDormancy(byte NewDormancy);// 0x1ac8e3fee041
	void SetLifeSpan(float InLifespan);// 0x1ac7e3fee041
	void SetAutoDestroyWhenFinished(bool bVal);// 0x1ac6e3fee041
	void SetActorTickInterval(float TickInterval);// 0x1ac5e3fee041
	void SetActorTickEnabled(bool bEnabled);// 0x1ac4e3fee041
	void SetActorScale3D(Vector NewScale3D);// 0x1ac3e3fee041
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x1ac2e3fee041
	void SetActorHiddenInGame(bool bNewHidden);// 0x1ac1e3fee041
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x1ac0e3fee041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1abfe3fee041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1abee3fee041
	void ReceiveTick(float DeltaSeconds);// 0x1abde3fee041
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x1abce3fee041
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x1abbe3fee041
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x1abae3fee041
	void ReceiveEndPlay(byte EndPlayReason);// 0x1ab9e3fee041
	void ReceiveDestroyed();// 0x1ab8e3fee041
	void ReceiveBeginPlay();// 0x1ab7e3fee041
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1ab6e3fee041
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x1ab5e3fee041
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x1ab4e3fee041
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x1ab3e3fee041
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x1ab2e3fee041
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x1ab1e3fee041
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x1ab0e3fee041
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x1aafe3fee041
	void ReceiveActorEndCursorOver();// 0x1aaee3fee041
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x1aade3fee041
	void ReceiveActorBeginCursorOver();// 0x1aace3fee041
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x1aabe3fee041
	void OnRep_ReplicateMovement();// 0x1aaae3fee041
	void OnRep_ReplicatedMovement();// 0x1aa9e3fee041
	void OnRep_Owner();// 0x1aa8e3fee041
	void OnRep_Instigator();// 0x1aa7e3fee041
	void OnRep_AttachmentReplication();// 0x1aa6e3fee041
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x1aa5e3fee041
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x1aa4e3fee041
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x1aa3e3fee041
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1aa2e3fee041
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x1aa1e3fee041
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1aa0e3fee041
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a9fe3fee041
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a9ee3fee041
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a9de3fee041
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a9ce3fee041
	void K2_OnReset();// 0x1a9be3fee041
	void K2_OnEndViewTarget(PlayerController* PC);// 0x1a9ae3fee041
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x1a99e3fee041
	SceneComponent* K2_GetRootComponent();// 0x1a98e3fee041
	void K2_GetRefActorLocation(out Vector OutPosition);// 0x1a97e3fee041
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x1a96e3fee041
	Rotator K2_GetActorRotation();// 0x1a95e3fee041
	float K2_GetActorLocationZ();// 0x1a94e3fee041
	float K2_GetActorLocationY();// 0x1a93e3fee041
	float K2_GetActorLocationX();// 0x1a92e3fee041
	Vector K2_GetActorLocation();// 0x1a91e3fee041
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x1a90e3fee041
	void K2_DestroyComponent(ActorComponent* Component);// 0x1a8fe3fee041
	void K2_DestroyActor();// 0x1a8ee3fee041
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x1a8de3fee041
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x1a8ce3fee041
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x1a8be3fee041
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x1a8ae3fee041
	void K2_AddActorWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a89e3fee041
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a88e3fee041
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a87e3fee041
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a86e3fee041
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a85e3fee041
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a84e3fee041
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a83e3fee041
	bool IsOverlappingActor(const Actor* Other);// 0x1a82e3fee041
	bool IsChildActor();// 0x1a81e3fee041
	bool IsActorTickEnabled();// 0x1a80e3fee041
	bool IsActorBeingDestroyed();// 0x1a7fe3fee041
	bool HasAuthority();// 0x1a7ee3fee041
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x1a7de3fee041
	Vector GetVelocity();// 0x1a7ce3fee041
	Transform GetTransform();// 0x1a7be3fee041
	bool GetTickableWhenPaused();// 0x1a7ae3fee041
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x1a79e3fee041
	byte GetRemoteRole();// 0x1a78e3fee041
	ChildActorComponent* GetParentComponent();// 0x1a77e3fee041
	Actor* GetParentActor();// 0x1a76e3fee041
	Actor* GetOwner();// 0x1a75e3fee041
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x1a74e3fee041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x1a73e3fee041
	byte GetLocalRole();// 0x1a72e3fee041
	float GetLifeSpan();// 0x1a71e3fee041
	Controller* GetInstigatorController();// 0x1a70e3fee041
	Pawn* GetInstigator();// 0x1a6fe3fee041
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x1a6ee3fee041
	float GetInputAxisValue(const FName InputAxisName);// 0x1a6de3fee041
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x1a6ce3fee041
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x1a6be3fee041
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x1a6ae3fee041
	float GetGameTimeSinceCreation();// 0x1a69e3fee041
	float GetDotProductTo(const Actor* OtherActor);// 0x1a68e3fee041
	float GetDistanceTo(const Actor* OtherActor);// 0x1a67e3fee041
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x1a66e3fee041
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x1a65e3fee041
	ActorComponent* GetComponentByInterface(class Interface Interface);// 0x1a64e3fee041
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x1a63e3fee041
	FName GetAttachParentSocketName();// 0x1a62e3fee041
	Actor* GetAttachParentActor();// 0x1a61e3fee041
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x1a60e3fee041
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x1a5fe3fee041
	Vector GetActorUpVector();// 0x1a5ee3fee041
	float GetActorTimeDilation();// 0x1a5de3fee041
	float GetActorTickInterval();// 0x1a5ce3fee041
	Vector GetActorScale3D();// 0x1a5be3fee041
	Vector GetActorRightVector();// 0x1a5ae3fee041
	Vector GetActorRelativeScale3D();// 0x1a59e3fee041
	Vector GetActorForwardVector();// 0x1a58e3fee041
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x1a57e3fee041
	bool GetActorEnableCollision();// 0x1a56e3fee041
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x1a55e3fee041
	void ForceNetUpdate();// 0x1a54e3fee041
	void FlushNetDormancy();// 0x1a53e3fee041
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0x1a52e3fee041
	void EnableInput(PlayerController* PlayerController);// 0x1a51e3fee041
	void DisableInput(PlayerController* PlayerController);// 0x1a50e3fee041
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x1a4fe3fee041
	void ComponentsActiveManualReplicate();// 0x1a4ee3fee041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1a4de3fee041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1a4ce3fee041
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0x1a4be3fee041
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext, bool bDeferredFinish);// 0x1a4ae3fee041
	bool ActorHasTag(FName Tag);// 0x1a49e3fee041

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bEnableTickOpt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	float TickInterval;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xc0, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xc8, Size: 0x8]
	FName AttachSocketName;//[Offset: 0xd0, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd8, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe8, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x124, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x130, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x13c, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x148, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x154, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x154, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x154, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x154, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x154, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x154, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x154, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x155, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x155, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x155, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x155, Size: 0x1]
	byte Mobility;//[Offset: 0x157, Size: 0x1]
	byte DetailMode;//[Offset: 0x158, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x159, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x140fe3fee041
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x140ee3fee041
	void SetWorldScale3D(Vector NewScale);// 0x140de3fee041
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x140ce3fee041
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x140be3fee041
	void SetRelativeScale3D(Vector NewScale3D);// 0x140ae3fee041
	void SetMobility(byte NewMobility);// 0x1408e3fee041
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x1407e3fee041
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x1406e3fee041
	void ResetRelativeTransform();// 0x1405e3fee041
	void OnRep_Visibility(bool OldValue);// 0x1404e3fee041
	void OnRep_Transform();// 0x1403e3fee041
	void OnRep_AttachSocketName();// 0x1402e3fee041
	void OnRep_AttachParent();// 0x1401e3fee041
	void OnRep_AttachChildren();// 0x1400e3fee041
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13ffe3fee041
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13fee3fee041
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13fde3fee041
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13fce3fee041
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13fbe3fee041
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13fae3fee041
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13f9e3fee041
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13f8e3fee041
	Transform K2_GetComponentToWorld();// 0x13f7e3fee041
	Vector K2_GetComponentScale();// 0x13f6e3fee041
	Rotator K2_GetComponentRotation();// 0x13f5e3fee041
	Vector K2_GetComponentLocation();// 0x13f4e3fee041
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x13f2e3fee041
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x13f0e3fee041
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x13eee3fee041
	void K2_AddWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13ede3fee041
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13ece3fee041
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13ebe3fee041
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13eae3fee041
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13e9e3fee041
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13e8e3fee041
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13e7e3fee041
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13e6e3fee041
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13e5e3fee041
	bool IsVisible();// 0x13e4e3fee041
	bool IsSimulatingPhysics(FName BoneName);// 0x13e3e3fee041
	bool IsAnySimulatingPhysics();// 0x13e2e3fee041
	Vector GetUpVector();// 0x13e1e3fee041
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x13dfe3fee041
	Rotator GetSocketRotation(FName InSocketName);// 0x13dee3fee041
	Quat GetSocketQuaternion(FName InSocketName);// 0x13dde3fee041
	Vector GetSocketLocation(FName InSocketName);// 0x13dce3fee041
	bool GetShouldUpdatePhysicsVolume();// 0x13dbe3fee041
	Vector GetRightVector();// 0x13dae3fee041
	Transform GetRelativeTransform();// 0x13d9e3fee041
	PhysicsVolume* GetPhysicsVolume();// 0x13d8e3fee041
	void GetParentComponents(out SceneComponent*[] Parents);// 0x13d7e3fee041
	int GetNumChildrenComponents();// 0x13d6e3fee041
	Vector GetForwardVector();// 0x13d5e3fee041
	Vector GetComponentVelocity();// 0x13d4e3fee041
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x13d3e3fee041
	SceneComponent* GetChildComponent(int ChildIndex);// 0x13d2e3fee041
	FName GetAttachSocketName();// 0x13d1e3fee041
	SceneComponent* GetAttachParent();// 0x13d0e3fee041
	FName[] GetAllSocketNames();// 0x13cfe3fee041
	bool DoesSocketExist(FName InSocketName);// 0x13cee3fee041
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x13cde3fee041

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30]
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 0x4]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1]
	enum CreationMethod;//[Offset: 0x8c, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 0x10]
	bool bManualReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	void ToggleActive();// 0x1386e3fee041
	void SetTickGroup(byte NewTickGroup);// 0x1384e3fee041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x1383e3fee041
	void SetIsReplicated(bool ShouldReplicate);// 0x1382e3fee041
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0x1381e3fee041
	void SetComponentTickInterval(float TickInterval);// 0x1380e3fee041
	void SetComponentTickEnabled(bool bEnabled);// 0x137fe3fee041
	void SetAutoActivate(bool bNewAutoActivate);// 0x137ee3fee041
	void SetActive(bool bNewActive, bool bReset);// 0x137de3fee041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x137ce3fee041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x137be3fee041
	void ReceiveTick(float DeltaSeconds);// 0x137ae3fee041
	void ReceiveEndPlay(byte EndPlayReason);// 0x1379e3fee041
	void ReceiveBeginPlay();// 0x1378e3fee041
	void OnRep_IsActive();// 0x1377e3fee041
	void K2_DestroyComponent(Object* Object);// 0x1376e3fee041
	bool IsComponentTickEnabled();// 0x1375e3fee041
	bool IsBeingDestroyed();// 0x1374e3fee041
	bool IsActive();// 0x1373e3fee041
	Actor* GetOwner();// 0x1372e3fee041
	float GetComponentTickInterval();// 0x1371e3fee041
	void Deactivate();// 0x1370e3fee041
	bool ComponentHasTag(FName Tag);// 0x136fe3fee041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x136ee3fee041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x136de3fee041
	void ActiveManualReplicate();// 0x136ce3fee041
	void Activate(bool bReset);// 0x136be3fee041

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int item;//[Offset: 0x5c, Size: 0x4]
	byte ElementIndex;//[Offset: 0x60, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x64, Size: 0x8]
	Actor* Actor;//[Offset: 0x6c, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x74, Size: 0x8]
	FName BoneName;//[Offset: 0x7c, Size: 0x8]
	FName MyBoneName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	float StaticFriction;//[Offset: 0x2c, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x30, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	float Restitution;//[Offset: 0x34, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x38, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	float Density;//[Offset: 0x3c, Size: 0x4]
	float SleepLinearVelocityThreshold;//[Offset: 0x40, Size: 0x4]
	float SleepAngularVelocityThreshold;//[Offset: 0x44, Size: 0x4]
	int SleepCounterThreshold;//[Offset: 0x48, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x4c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x50, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x58, Size: 0x8]
	byte SurfaceType;//[Offset: 0x60, Size: 0x1]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x210, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x214, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x218, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x21c, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x21d, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x21e, Size: 0x1]
	enum LightmapType;//[Offset: 0x21f, Size: 0x1]
	enum VolumetricLightmapSampleType;//[Offset: 0x220, Size: 0x1]
	enum VolumetricOcclusionMode;//[Offset: 0x221, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x222, Size: 0x1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x222, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x222, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x222, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x223, Size: 0x1]
	PrimitivePhysicsShapes CachedMoveOverlapsShapes;//[Offset: 0x238, Size: 0xb0]
	bool bUseVolumeCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]
	bool bForceSweepIgnoreOverlaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	float CacheVolumeQuerySphereRadius;//[Offset: 0x324, Size: 0x4]
	bool bSweepFindInitialOverlaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 0x1]
	bool bReturnOverlapShapes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x340, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x340, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x340, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x340, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x340, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x340, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x340, Size: 0x1]
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x341, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x341, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x341, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x341, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x341, Size: 0x1]
	bool bRenderInFront;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x341, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x341, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x341, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x342, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x342, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x342, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x342, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x342, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x342, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x342, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x342, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x343, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x343, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x343, Size: 0x1]
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x343, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x343, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x343, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x343, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x343, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 0x1]
	enum ShadowCaptureLayer;//[Offset: 0x345, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x346, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x346, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x346, Size: 0x1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x346, Size: 0x1]
	bool bCSMCacheForceEnable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x346, Size: 0x1]
	bool bCSMCacheEnableRemoveFix;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x346, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x346, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x346, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x347, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x347, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x347, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x347, Size: 0x1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x347, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x347, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x347, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x347, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	bool bReMergeInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x349, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x34b, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x34c, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x34d, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x350, Size: 0x4]
	bool bForceUseSkyReflectionCaptureOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 0x1]
	bool bForceDisableShadowReduceSpecularAO;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x354, Size: 0x1]
	bool bApplyMaterialTranslucencySortOffset;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x354, Size: 0x1]
	CustomRenderMatrixComponent* CustomRenderMatrixComponent;//[Offset: 0x358, Size: 0x8]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x360, Size: 0x10]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x370, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x388, Size: 0x4]
	int VisibilityId;//[Offset: 0x38c, Size: 0x4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x390, Size: 0x10]
	int8 VirtualTextureLodBias;//[Offset: 0x3a0, Size: 0x1]
	int8 VirtualTextureCullMips;//[Offset: 0x3a1, Size: 0x1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x3a2, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x3a3, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x3a8, Size: 0x4]
	float BoundsScale;//[Offset: 0x3b4, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x3c8, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x3d8, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x3f8, Size: 0x150]
	delegate OnComponentHit;//[Offset: 0x548, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x549, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x54a, Size: 0x1]
	delegate OnComponentUpdateOverlap;//[Offset: 0x54b, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x54c, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x54d, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x54f, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x550, Size: 0x1]
	delegate OnClicked;//[Offset: 0x551, Size: 0x1]
	delegate OnReleased;//[Offset: 0x552, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x553, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x554, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x555, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x556, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x570, Size: 0x8]
	PrimitiveComponent* IndirectLightingAttachmentPrimitive;//[Offset: 0x578, Size: 0x8]
	BoxSphereBounds IndirectLightingSampleBounds;//[Offset: 0x580, Size: 0x1c]
	Vector4 IndirectLightingSampleDirection;//[Offset: 0x5a0, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x227fe3fee041
	void WakeRigidBody(FName BoneName);// 0x227ee3fee041
	void WakeAllRigidBodies();// 0x227de3fee041
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x227ce3fee041
	void SetUseVolumeCache(bool bInCachMoveOverlaps);// 0x227be3fee041
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x227ae3fee041
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x2279e3fee041
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x2278e3fee041
	void SetSimulatePhysics(bool bSimulate);// 0x2277e3fee041
	void SetRenderInMainPass(bool bValue);// 0x2276e3fee041
	void SetRenderInFront(bool bNewRenderInFront);// 0x2275e3fee041
	void SetRenderCustomDepth(bool bValue);// 0x2274e3fee041
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x2273e3fee041
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x2272e3fee041
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2271e3fee041
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2270e3fee041
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x226fe3fee041
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x226ee3fee041
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x226de3fee041
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x226ce3fee041
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x226be3fee041
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x226ae3fee041
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x2269e3fee041
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x2268e3fee041
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x2267e3fee041
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x2266e3fee041
	void SetMassScale(FName BoneName, float InMassScale);// 0x2265e3fee041
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x2264e3fee041
	void SetLinearDamping(float InDamping);// 0x2263e3fee041
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x2262e3fee041
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x2261e3fee041
	void SetIndirectLightingSampleDirection(out const Vector4 InDirection);// 0x2260e3fee041
	void SetIndirectLightingSampleBounds(BoxSphereBounds InBounds);// 0x225fe3fee041
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x225ee3fee041
	void SetForceUseSkyReflection(bool NewEnabled);// 0x225de3fee041
	void SetForceDisableShadowReduceSpecularAO(bool NewDisabled);// 0x225ce3fee041
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x225be3fee041
	void SetEnableGravity(bool bGravityEnabled);// 0x225ae3fee041
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x2259e3fee041
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x2258e3fee041
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x2257e3fee041
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x2256e3fee041
	void SetCustomRenderMatrixComponent(CustomRenderMatrixComponent* Target);// 0x2255e3fee041
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x2254e3fee041
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x2253e3fee041
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x2252e3fee041
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x2251e3fee041
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x2250e3fee041
	void SetCustomDepthStencilValue(int Value);// 0x224fe3fee041
	void SetCullDistance(float NewCullDistance);// 0x224ee3fee041
	void SetConstraintMode(byte ConstraintMode);// 0x224de3fee041
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x224ce3fee041
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x224be3fee041
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x224ae3fee041
	void SetCollisionObjectType(byte Channel);// 0x2249e3fee041
	void SetCollisionEnabled(byte NewType);// 0x2248e3fee041
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x2247e3fee041
	void SetCastShadow(bool NewCastShadow);// 0x2246e3fee041
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x2245e3fee041
	void SetBoundsScale(float NewBoundsScale);// 0x2244e3fee041
	void SetAngularDamping(float InDamping);// 0x2243e3fee041
	void SetAllUseCCD(bool InUseCCD);// 0x2242e3fee041
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x2241e3fee041
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x2240e3fee041
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x223fe3fee041
	void SetAllMassScale(float InMassScale);// 0x223ee3fee041
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x223de3fee041
	void PutRigidBodyToSleep(FName BoneName);// 0x223ce3fee041
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x223be3fee041
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x223ae3fee041
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2239e3fee041
	bool K2_IsQueryCollisionEnabled();// 0x2238e3fee041
	bool K2_IsPhysicsCollisionEnabled();// 0x2237e3fee041
	bool K2_IsCollisionEnabled();// 0x2236e3fee041
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2235e3fee041
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x2234e3fee041
	bool IsOverlappingActor(const Actor* Other);// 0x2233e3fee041
	bool IsGravityEnabled();// 0x2232e3fee041
	bool IsAnyRigidBodyAwake();// 0x2231e3fee041
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x2230e3fee041
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x222fe3fee041
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x222de3fee041
	bool GetUseVolumeCache();// 0x222ce3fee041
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x222be3fee041
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x222ae3fee041
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x2229e3fee041
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x2228e3fee041
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x2227e3fee041
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x2226e3fee041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x2225e3fee041
	int GetNumMaterials();// 0x2224e3fee041
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x2223e3fee041
	MaterialInterface* GetMaterial(int ElementIndex);// 0x2222e3fee041
	float GetMassScale(FName BoneName);// 0x2221e3fee041
	float GetMass();// 0x2220e3fee041
	float GetLinearDamping();// 0x221fe3fee041
	Vector GetInertiaTensor(FName BoneName);// 0x221ee3fee041
	Vector4 GetIndirectLightingSampleDirection();// 0x221de3fee041
	bool GetGenerateOverlapEvents();// 0x221ce3fee041
	CustomRenderMatrixComponent* GetCustomRenderMatrixComponent();// 0x221be3fee041
	byte GetCollisionResponseToChannel(byte Channel);// 0x221ae3fee041
	FName GetCollisionProfileName();// 0x2219e3fee041
	byte GetCollisionObjectType();// 0x2218e3fee041
	byte GetCollisionEnabled();// 0x2217e3fee041
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x2216e3fee041
	Vector GetCenterOfMass(FName BoneName);// 0x2215e3fee041
	bool GetBodyBounds(out Box OutBox);// 0x2214e3fee041
	float GetAngularDamping();// 0x2213e3fee041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x2212e3fee041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x2211e3fee041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x2210e3fee041
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x220fe3fee041
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x220ee3fee041
	void ClearMoveIgnoreComponents();// 0x220de3fee041
	void ClearMoveIgnoreActors();// 0x220ce3fee041
	bool CanCharacterStepUp(Pawn* Pawn);// 0x220be3fee041
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x220ae3fee041
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x2209e3fee041
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x2208e3fee041
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x2207e3fee041
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x2206e3fee041
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x2205e3fee041
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x2204e3fee041
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x2203e3fee041
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x2202e3fee041
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x2201e3fee041
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x2200e3fee041
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x21ffe3fee041
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x21fee3fee041

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PrimitivePhysicsShapes
	<PrimitiveComponent*,BodyInstancePhysicsShapes> BlockShapes;//[Offset: 0x0, Size: 0x50]
	<PrimitiveComponent*,BodyInstancePhysicsShapes> TouchShapes;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: BodyInstancePhysicsShapes

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CustomRenderMatrixComponent.ActorComponent.Object

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	byte CurDynamicMode_GameThread;//[Offset: 0x80, Size: 0x1]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x6723e3fee041
	void SetCurDynamicMode(byte InDynamicMode);// 0x6722e3fee041
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x6721e3fee041
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x6720e3fee041
	PhysicalMaterial* GetPhysicalMaterial();// 0x671fe3fee041
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x671ee3fee041
	byte GetCurDynamicMode();// 0x671de3fee041
	Material* GetBaseMaterial();// 0x671ce3fee041

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4]
	byte AddressX;//[Offset: 0x2c, Size: 0x1]
	byte AddressY;//[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0xc]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0xc]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0xc]
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1]
	byte BlendMode;//[Offset: 0x151, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1]
	byte ShadingModel;//[Offset: 0x154, Size: 0x1]
	byte[] MaterialDynamicModes;//[Offset: 0x158, Size: 0x10]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x16a, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0x16c, Size: 0x4]
	byte DirLightShadowBiasMethodOverride;//[Offset: 0x170, Size: 0x1]
	float ShadowBiasScale;//[Offset: 0x174, Size: 0x4]
	float ShadowSlopeBiasScale;//[Offset: 0x178, Size: 0x4]
	float ScreenSpaceVariance;//[Offset: 0x17c, Size: 0x4]
	float threshold;//[Offset: 0x180, Size: 0x4]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x184, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0x198, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x1b0, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x1d0, Size: 0xc]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1e4, Size: 0xc]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1]
	byte TranslucencyLightingMode;//[Offset: 0x1f9, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x1fc, Size: 0x4]
	int NumCustomDataVector;//[Offset: 0x200, Size: 0x4]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x204, Size: 0x4]
	float TranslucentShadowDensityScale;//[Offset: 0x208, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x20c, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x210, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x214, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x218, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x21c, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x22c, Size: 0x4]
	int16 TranslucencySortPriorityOffset;//[Offset: 0x230, Size: 0x2]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x232, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x232, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x232, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x232, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x232, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x232, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x232, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x232, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x233, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x233, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x233, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x233, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x233, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x233, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x233, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x233, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x234, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x234, Size: 0x1]
	bool bUsedWithMergedInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x234, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x234, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x234, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x234, Size: 0x1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x235, Size: 0x1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x235, Size: 0x1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x235, Size: 0x1]
	bool bUsedWithVirtualHeightfieldMesh;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x235, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x235, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x235, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x235, Size: 0x1]
	bool bForceDisableILC;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x235, Size: 0x1]
	bool bForceDisableDynamicLightShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x236, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x236, Size: 0x1]
	byte FloatPrecisionMode;//[Offset: 0x237, Size: 0x1]
	bool bUseFullPrecisionPreZOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 0x1]
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x238, Size: 0x1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x238, Size: 0x1]
	bool bMobilePointLightSSSEnable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x238, Size: 0x1]
	Texture2D* MobilePreIntegratedBRDFLUT;//[Offset: 0x240, Size: 0x8]
	bool bRenderInEarlyDepthPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	bool bDisableInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x248, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x248, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x248, Size: 0x1]
	bool bForceDisableAdditiveReflection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x248, Size: 0x1]
	bool bForceDisableLocalTonemapping;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x248, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x248, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x249, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24a, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24a, Size: 0x1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24a, Size: 0x1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24a, Size: 0x1]
	byte ShadingRate;//[Offset: 0x24b, Size: 0x1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24c, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24c, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24c, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24c, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24c, Size: 0x1]
	bool bApplyCloudFogging;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x24c, Size: 0x1]
	bool bMobileHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24d, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24d, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24d, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24d, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24d, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24d, Size: 0x1]
	byte BlendableLocation;//[Offset: 0x24e, Size: 0x1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24f, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24f, Size: 0x1]
	byte StencilCompare;//[Offset: 0x250, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x251, Size: 0x1]
	byte RefractionMode;//[Offset: 0x252, Size: 0x1]
	int BlendablePriority;//[Offset: 0x254, Size: 0x4]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1]
	bool bIsForceIgnoreBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x25c, Size: 0x4]
	float RefractionDepthBias;//[Offset: 0x260, Size: 0x4]
	Guid StateId;//[Offset: 0x264, Size: 0x10]
	float MaxDisplacement;//[Offset: 0x274, Size: 0x4]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x2a8, Size: 0x228]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xe0, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xe4, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	byte AddressX;//[Offset: 0xe9, Size: 0x1]
	byte AddressY;//[Offset: 0xea, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0xec, Size: 0x8]
	int Blueprint_GetSizeY();// 0x6bc0e3fee041
	int Blueprint_GetSizeX();// 0x6bbfe3fee041

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x68, Size: 0x10]
	int LODBias;//[Offset: 0x78, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x7c, Size: 0x1]
	byte NormalXYChannels;//[Offset: 0x7d, Size: 0x1]
	byte Filter;//[Offset: 0x7e, Size: 0x1]
	byte GroupLODBiasLevel;//[Offset: 0x7f, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x80, Size: 0x1]
	byte LODGroup;//[Offset: 0x81, Size: 0x1]
	PerPlatformFloat Downscale;//[Offset: 0x84, Size: 0x4]
	enum DownscaleOptions;//[Offset: 0x88, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bNotOfflineProcessed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x40, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x48, Size: 0x4]
	int StreamingIndex;//[Offset: 0x4c, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x50, Size: 0x4]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1]
	bool bIs1P;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x1a0]
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 0x10]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 0x10]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 0x10]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 0x10]
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 0x10]
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 0x10]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry RuntimeEntries;//[Offset: 0x0, Size: 0x40]
	float[] ScalarValues;//[Offset: 0x140, Size: 0x10]
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 0x10]
	Texture*[] TextureValues;//[Offset: 0x160, Size: 0x10]
	Font*[] FontValues;//[Offset: 0x170, Size: 0x10]
	int[] FontPageValues;//[Offset: 0x180, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 0x10]

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 0x10]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10]
	bool[] Overrides;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]
	bool InFontLibrary(FString CurString);// 0x6c4fe3fee041

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	bool IsKeepInMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RuntimeVirtualTexture.Object
	int TileCount;//[Offset: 0x28, Size: 0x4]
	int TileSize;//[Offset: 0x2c, Size: 0x4]
	int TileBorderSize;//[Offset: 0x30, Size: 0x4]
	enum MaterialType;//[Offset: 0x34, Size: 0x1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	int RemoveLowMips;//[Offset: 0x3c, Size: 0x4]
	byte LODGroup;//[Offset: 0x40, Size: 0x1]
	int Size;//[Offset: 0x44, Size: 0x4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8]
	int GetTileSize();// 0x70f4e3fee041
	int GetTileCount();// 0x70f3e3fee041
	int GetTileBorderSize();// 0x70f2e3fee041
	int GetSize();// 0x70f1e3fee041
	int GetPageTableSize();// 0x70f0e3fee041

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8]
	float GrassDensity;//[Offset: 0x48, Size: 0x4]
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4]
	int StartCullDistance;//[Offset: 0x50, Size: 0x4]
	int EndCullDistance;//[Offset: 0x54, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 0x10]
	PerPlatformFloat GrassDensity;//[Offset: 0x18, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float PlacementJitter;//[Offset: 0x20, Size: 0x4]
	PerPlatformInt StartCullDistance;//[Offset: 0x24, Size: 0x4]
	PerPlatformInt EndCullDistance;//[Offset: 0x28, Size: 0x4]
	int MinLOD;//[Offset: 0x2c, Size: 0x4]
	enum Scaling;//[Offset: 0x30, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x34, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x3c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x44, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x4f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool bForceUseSkyLightAsDiffuseGI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x54, Size: 0x1]
	bool bReMergeInstancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	enum ShadowCaptureLayer;//[Offset: 0x56, Size: 0x1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x80, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x84, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x88, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x98, Size: 0x4]
	int LightMapResolution;//[Offset: 0x9c, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0xa0, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0xa4, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xa8, Size: 0x8]
	int LODForCollision;//[Offset: 0xb0, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 0x1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb4, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd8, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0xf8, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x104, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x110, Size: 0x1c]
	int ElementToIgnoreForTexFactor;//[Offset: 0x12c, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x130, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x140, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x148, Size: 0x8]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x7165e3fee041
	int GetNumSections(int InLod);// 0x7164e3fee041
	int GetNumLODs();// 0x7163e3fee041
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x7162e3fee041
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x7161e3fee041
	int GetMaterialIndex(FName MaterialSlotName);// 0x7160e3fee041
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x715fe3fee041
	BoxSphereBounds GetBounds();// 0x715ee3fee041
	Box GetBoundingBox();// 0x715de3fee041
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x715ce3fee041
	StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x715be3fee041
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x715ae3fee041
	void AddSocket(StaticMeshSocket* Socket);// 0x7159e3fee041
	FName AddMaterial(MaterialInterface* Material);// 0x7158e3fee041

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BodySetup.BodySetupCore.Object
	KAggregateGeom AggGeom;//[Offset: 0x48, Size: 0x58]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 0x1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa0, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0xa8, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xb0, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x128, Size: 0x150]
	Vector BuildScale3D;//[Offset: 0x280, Size: 0xc]

--------------------------------
Class: BodySetupCore.Object
	FName BoneName;//[Offset: 0x28, Size: 0x8]
	byte PhysicsType;//[Offset: 0x30, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x31, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x32, Size: 0x1]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x19, Size: 0x1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	int[] IndexData;//[Offset: 0x40, Size: 0x10]
	Box ElemBox;//[Offset: 0x50, Size: 0x1c]
	Transform Transform;//[Offset: 0x70, Size: 0x30]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: BodyInstance.BodyInstanceCore
	byte ObjectType;//[Offset: 0x1a, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x1c, Size: 0x1]
	enum SleepFamily;//[Offset: 0x51, Size: 0x1]
	byte DOFMode;//[Offset: 0x52, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53, Size: 0x1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x53, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x53, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x53, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x53, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x53, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x53, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x54, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x64, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x6c, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x6d, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x70, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0xa0, Size: 0x4]
	float MassInKgOverride;//[Offset: 0xa4, Size: 0x4]
	float LinearDamping;//[Offset: 0xb0, Size: 0x4]
	float AngularDamping;//[Offset: 0xb4, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0xb8, Size: 0xc]
	Vector COMNudge;//[Offset: 0xc4, Size: 0xc]
	float MassScale;//[Offset: 0xd0, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0xd4, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xf0, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0x100, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0x108, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0x10c, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0x110, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0x114, Size: 0x4]

--------------------------------
Class: BodyInstanceCore
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x69dce3fee041
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x69dbe3fee041
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x69dae3fee041
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x69d9e3fee041

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector position);// 0x69d8e3fee041
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x69d7e3fee041
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x69d6e3fee041
	void ReversePolygonFacing(PolygonID PolygonID);// 0x69d5e3fee041
	void ReserveNewVertices(int NumberOfNewVertices);// 0x69d4e3fee041
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x69d3e3fee041
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x69d2e3fee041
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x69d1e3fee041
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x69d0e3fee041
	void ReserveNewEdges(int NumberOfNewEdges);// 0x69cfe3fee041
	bool IsVertexValid(VertexID VertexID);// 0x69cee3fee041
	bool IsVertexOrphaned(VertexID VertexID);// 0x69cde3fee041
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x69cce3fee041
	bool IsTriangleValid(const TriangleID TriangleID);// 0x69cbe3fee041
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x69cae3fee041
	bool IsPolygonValid(PolygonID PolygonID);// 0x69c9e3fee041
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x69c8e3fee041
	bool IsEmpty();// 0x69c7e3fee041
	bool IsEdgeValid(EdgeID EdgeID);// 0x69c6e3fee041
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x69c5e3fee041
	bool IsEdgeInternal(EdgeID EdgeID);// 0x69c4e3fee041
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x69c3e3fee041
	Vector GetVertexPosition(VertexID VertexID);// 0x69c2e3fee041
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x69c1e3fee041
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x69c0e3fee041
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x69bfe3fee041
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x69bee3fee041
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x69bde3fee041
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x69bce3fee041
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x69bbe3fee041
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x69bae3fee041
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x69b9e3fee041
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x69b8e3fee041
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x69b7e3fee041
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x69b6e3fee041
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x69b5e3fee041
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x69b4e3fee041
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x69b3e3fee041
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x69b2e3fee041
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x69b1e3fee041
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x69b0e3fee041
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x69afe3fee041
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x69aee3fee041
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x69ade3fee041
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x69ace3fee041
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x69abe3fee041
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x69aae3fee041
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x69a9e3fee041
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x69a8e3fee041
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x69a7e3fee041
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x69a6e3fee041
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x69a5e3fee041
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x69a4e3fee041
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x69a3e3fee041
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x69a2e3fee041
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x69a1e3fee041
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x69a0e3fee041
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x699fe3fee041
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x699ee3fee041
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x699de3fee041
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x699ce3fee041
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x699be3fee041
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x699ae3fee041
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x6999e3fee041
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x6998e3fee041
	void Empty();// 0x6997e3fee041
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x6996e3fee041
	void DeleteVertex(VertexID VertexID);// 0x6995e3fee041
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x6994e3fee041
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x6993e3fee041
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x6992e3fee041
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x6991e3fee041
	void CreateVertexWithID(VertexID VertexID);// 0x6990e3fee041
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x698fe3fee041
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x698ee3fee041
	VertexID CreateVertex();// 0x698de3fee041
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x698ce3fee041
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x698be3fee041
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x698ae3fee041
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x6989e3fee041
	PolygonGroupID CreatePolygonGroup();// 0x6988e3fee041
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x6987e3fee041
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x6986e3fee041
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x6985e3fee041
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x6984e3fee041

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4]
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4]
	float NormalScale;//[Offset: 0x64, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4]
	float IOR;//[Offset: 0x6c, Size: 0x4]
	float Roughness0;//[Offset: 0x70, Size: 0x4]
	float Roughness1;//[Offset: 0x74, Size: 0x4]
	float LobeMix;//[Offset: 0x78, Size: 0x4]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	byte SpecialMode;//[Offset: 0xd, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x7083e3fee041
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x7082e3fee041
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x7081e3fee041
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x7080e3fee041
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x707fe3fee041
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x707ee3fee041
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x707de3fee041
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x707ce3fee041
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x707be3fee041
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x707ae3fee041
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x7079e3fee041
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x7078e3fee041
	float K2_GetScalarParameterValue(FName ParameterName);// 0x7077e3fee041
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x7076e3fee041
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x7075e3fee041
	void CopyInterpParameters(MaterialInstance* Source);// 0x7074e3fee041

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xf8, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x108, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x118, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x128, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x138, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x148, Size: 0x24]
	StaticParameterSet StaticParameters;//[Offset: 0x178, Size: 0x40]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x1b8, Size: 0x1a0]
	Object*[] CachedReferencedTextures;//[Offset: 0x358, Size: 0x10]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadowBiasScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadowSlopeBiasScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ScreenSpaceVariance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_Threshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_TranslucencySortPriorityOffset;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_RenderInEarlyDepthPass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_MaterialFloatPrecisionMode;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ForceDisableDynamicLightShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	byte BlendMode;//[Offset: 0x3, Size: 0x1]
	byte ShadingModel;//[Offset: 0x4, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 0x4]
	float ShadowBiasScale;//[Offset: 0xc, Size: 0x4]
	float ShadowSlopeBiasScale;//[Offset: 0x10, Size: 0x4]
	float ScreenSpaceVariance;//[Offset: 0x14, Size: 0x4]
	float threshold;//[Offset: 0x18, Size: 0x4]
	int16 TranslucencySortPriorityOffset;//[Offset: 0x1c, Size: 0x2]
	bool bRenderInEarlyDepthPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	byte FloatPrecisionMode;//[Offset: 0x1f, Size: 0x1]
	bool bForceDisableDynamicLightShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e8, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e8, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x2ec, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x2f0, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x2f1, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x2f2, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x2f8, Size: 0x8]
	delegate OnReceivePhysicsEvent;//[Offset: 0x300, Size: 0x10]
	PlayerState* PlayerState;//[Offset: 0x310, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x320, Size: 0x8]
	Controller* Controller;//[Offset: 0x328, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x334, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x340, Size: 0xc]
	void SpawnDefaultController();// 0x36bbe3fee041
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x36bae3fee041
	void ReceiveUnpossessed(Controller* OldController);// 0x36b9e3fee041
	void ReceivePossessed(Controller* NewController);// 0x36b8e3fee041
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x36b7e3fee041
	void OnRep_PlayerState();// 0x36b6e3fee041
	void OnRep_Controller();// 0x36b5e3fee041
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x36b4e3fee041
	Vector K2_GetMovementInputVector();// 0x36b3e3fee041
	bool IsPlayerControlled();// 0x36b2e3fee041
	bool IsPawnControlled();// 0x36b1e3fee041
	bool IsMoveInputIgnored();// 0x36b0e3fee041
	bool IsLocallyControlled();// 0x36afe3fee041
	bool IsControlled();// 0x36aee3fee041
	bool IsBotControlled();// 0x36ade3fee041
	Vector GetPendingMovementInputVector();// 0x36ace3fee041
	Vector GetNavAgentLocation();// 0x36abe3fee041
	PawnMovementComponent* GetMovementComponent();// 0x36aae3fee041
	Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x36a9e3fee041
	Vector GetLastMovementInputVector();// 0x36a8e3fee041
	Rotator GetControlRotation();// 0x36a7e3fee041
	Controller* GetController();// 0x36a6e3fee041
	Rotator GetBaseAimRotation();// 0x36a5e3fee041
	void DetachFromControllerPendingDestroy();// 0x36a4e3fee041
	Vector ConsumeMovementInputVector();// 0x36a3e3fee041
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x36a2e3fee041
	void AddControllerYawInput(float Val);// 0x36a1e3fee041
	void AddControllerRollInput(float Val);// 0x36a0e3fee041
	void AddControllerPitchInput(float Val);// 0x369fe3fee041

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x2e8, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x2f8, Size: 0x10]
	FName StateName;//[Offset: 0x308, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x310, Size: 0x8]
	Character* Character;//[Offset: 0x320, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x328, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x348, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 0x1]
	void UnPossess();// 0x1af6e3fee041
	void StopMovement();// 0x1af5e3fee041
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x1af4e3fee041
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x1af3e3fee041
	void SetIgnoreLookInput(bool bNewLookInput);// 0x1af2e3fee041
	void SetControlRotation(out const Rotator NewRotation);// 0x1af1e3fee041
	void ResetIgnoreMoveInput();// 0x1af0e3fee041
	void ResetIgnoreLookInput();// 0x1aefe3fee041
	void ResetIgnoreInputFlags();// 0x1aeee3fee041
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x1aede3fee041
	void ReceivePossess(Pawn* PossessedPawn);// 0x1aece3fee041
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x1aebe3fee041
	void Possess(Pawn* InPawn);// 0x1aeae3fee041
	void OnRep_PlayerState();// 0x1ae9e3fee041
	void OnRep_Pawn();// 0x1ae8e3fee041
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x1ae7e3fee041
	Pawn* K2_GetPawn();// 0x1ae6e3fee041
	bool IsPlayerController();// 0x1ae5e3fee041
	bool IsMoveInputIgnored();// 0x1ae4e3fee041
	bool IsLookInputIgnored();// 0x1ae3e3fee041
	bool IsLocalPlayerController();// 0x1ae2e3fee041
	bool IsLocalController();// 0x1ae1e3fee041
	Actor* GetViewTarget();// 0x1ae0e3fee041
	Rotator GetDesiredRotation();// 0x1adfe3fee041
	Rotator GetControlRotation();// 0x1adee3fee041
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x1adde3fee041
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x1adce3fee041
	PlayerController* CastToPlayerController();// 0x1adbe3fee041

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x358, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x360, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x368, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x370, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x378, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x380, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x38c, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x3a4, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x3b0, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x3c0, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x3d4, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x3d8, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x3e4, Size: 0xc]
	int ClientCap;//[Offset: 0x3f0, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x3f8, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x400, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x408, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x410, Size: 0x10]
	bool bSlateForceFeedbackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	bool bProcessDynamicFeedbackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x498, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x499, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x4d8, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x4e0, Size: 0x8]
	float InputYawScale;//[Offset: 0x4f4, Size: 0x4]
	float InputPitchScale;//[Offset: 0x4f8, Size: 0x4]
	float InputRollScale;//[Offset: 0x4fc, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x500, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x500, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x500, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x500, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x500, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x500, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x504, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x508, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x518, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x519, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x51a, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x51b, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x51c, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x520, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x522, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x598, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a0, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x5b8, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x610, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x620, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x1b8ae3fee041
	bool WasInputKeyJustPressed(Key Key);// 0x1b89e3fee041
	void ToggleSpeaking(bool bInSpeaking);// 0x1b88e3fee041
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x1b87e3fee041
	void SwitchLevel(FString URL);// 0x1b86e3fee041
	void StopHapticEffect(enum Hand);// 0x1b85e3fee041
	void StartFire(byte FireModeNum);// 0x1b84e3fee041
	void SetVirtualJoystickVisibility(bool bVisible);// 0x1b83e3fee041
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x1b82e3fee041
	void SetName(FString S);// 0x1b81e3fee041
	void SetMouseLocation(const int X, const int Y);// 0x1b80e3fee041
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x1b7fe3fee041
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x1b7ee3fee041
	void SetDisableHaptics(bool bNewDisabled);// 0x1b7de3fee041
	void SetControllerLightColor(Color Color);// 0x1b7ce3fee041
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x1b7be3fee041
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x1b7ae3fee041
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x1b79e3fee041
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x1b78e3fee041
	void ServerViewPrevPlayer();// 0x1b77e3fee041
	void ServerViewNextPlayer();// 0x1b76e3fee041
	void ServerVerifyViewTarget();// 0x1b75e3fee041
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x1b74e3fee041
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x1b72e3fee041
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x1b71e3fee041
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x1b70e3fee041
	void ServerToggleAILogging();// 0x1b6fe3fee041
	void ServerShortTimeout();// 0x1b6ee3fee041
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x1b6de3fee041
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x1b6ce3fee041
	void ServerRestartPlayer();// 0x1b6be3fee041
	void ServerPause();// 0x1b6ae3fee041
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x1b69e3fee041
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x1b68e3fee041
	void ServerExecRPC(FString Msg);// 0x1b67e3fee041
	void ServerExec(FString Msg);// 0x1b66e3fee041
	void ServerCheckClientPossessionReliable();// 0x1b65e3fee041
	void ServerCheckClientPossession();// 0x1b64e3fee041
	void ServerChangeName(FString S);// 0x1b63e3fee041
	void ServerCamera(FName NewMode);// 0x1b62e3fee041
	void ServerAcknowledgePossession(Pawn* P);// 0x1b61e3fee041
	void SendToConsole(FString Command);// 0x1b60e3fee041
	void RestartLevel();// 0x1b5fe3fee041
	void ResetControllerLightColor();// 0x1b5ee3fee041
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x1b5de3fee041
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x1b5be3fee041
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x1b59e3fee041
	void Pause();// 0x1b58e3fee041
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x1b57e3fee041
	void LocalTravel(FString URL);// 0x1b56e3fee041
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x1b55e3fee041
	bool IsInputKeyDown(Key Key);// 0x1b54e3fee041
	void GetViewportSize(out int SizeX, out int SizeY);// 0x1b53e3fee041
	SpectatorPawn* GetSpectatorPawn();// 0x1b52e3fee041
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x1b51e3fee041
	Vector GetInputVectorKeyState(Key Key);// 0x1b50e3fee041
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x1b4fe3fee041
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x1b4ee3fee041
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x1b4de3fee041
	float GetInputKeyTimeDown(Key Key);// 0x1b4ce3fee041
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x1b4ae3fee041
	float GetInputAnalogKeyState(Key Key);// 0x1b49e3fee041
	HUD* GetHUD();// 0x1b48e3fee041
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x1b47e3fee041
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x1b46e3fee041
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x1b45e3fee041
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x1b44e3fee041
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x1b43e3fee041
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x1b42e3fee041
	Vector GetFocalLocation();// 0x1b41e3fee041
	void FOV(float NewFOV);// 0x1b40e3fee041
	void EnableCheats();// 0x1b3fe3fee041
	bool DoLineTraceAtScreenPosition(const Vector2D ScreenPosition, const byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x1b3de3fee041
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x1b3ce3fee041
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x1b3be3fee041
	void ConsoleKey(Key Key);// 0x1b3ae3fee041
	void ClientWasKicked(const FText KickReason);// 0x1b39e3fee041
	void ClientVoiceHandshakeComplete();// 0x1b38e3fee041
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x1b36e3fee041
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x1b35e3fee041
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x1b34e3fee041
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x1b33e3fee041
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x1b31e3fee041
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x1b30e3fee041
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x1b2fe3fee041
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x1b2ee3fee041
	void ClientStopCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x1b2de3fee041
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x1b2ce3fee041
	void ClientStartOnlineSession();// 0x1b2be3fee041
	void ClientStartCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent);// 0x1b2ae3fee041
	void ClientStartCameraShake(class CameraShakeBase Shake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x1b29e3fee041
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x1b28e3fee041
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x1b25e3fee041
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x1b24e3fee041
	void ClientSetHUD(class HUD NewHUDClass);// 0x1b23e3fee041
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x1b22e3fee041
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x1b21e3fee041
	void ClientSetCameraMode(FName NewCamMode);// 0x1b20e3fee041
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);// 0x1b1fe3fee041
	void ClientSetBlockOnAsyncLoading();// 0x1b1ee3fee041
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x1b1de3fee041
	void ClientReturnToMainMenu(FString ReturnReason);// 0x1b1ce3fee041
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x1b1be3fee041
	void ClientRestart(Pawn* NewPawn);// 0x1b1ae3fee041
	void ClientReset();// 0x1b19e3fee041
	void ClientRepObjRef(Object* Object);// 0x1b18e3fee041
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x1b17e3fee041
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x1b16e3fee041
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x1b15e3fee041
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x1b14e3fee041
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x1b13e3fee041
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x1b11e3fee041
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum Space, Rotator CustomPlaySpace);// 0x1b0fe3fee041
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x1b0de3fee041
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x1b0ce3fee041
	void ClientIgnoreMoveInput(bool bIgnore);// 0x1b0be3fee041
	void ClientIgnoreLookInput(bool bIgnore);// 0x1b0ae3fee041
	void ClientGotoState(FName NewState);// 0x1b09e3fee041
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x1b08e3fee041
	void ClientForceGarbageCollection();// 0x1b07e3fee041
	void ClientFlushLevelStreaming();// 0x1b06e3fee041
	void ClientEndOnlineSession();// 0x1b05e3fee041
	void ClientEnableNetworkVoice(bool bEnable);// 0x1b04e3fee041
	void ClientCommitMapChange();// 0x1b03e3fee041
	void ClientClearCameraLensEffects();// 0x1b02e3fee041
	void ClientCapBandwidth(int Cap);// 0x1b01e3fee041
	void ClientCancelPendingMapChange();// 0x1b00e3fee041
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x1affe3fee041
	void ClearAudioListenerOverride();// 0x1afee3fee041
	void ClearAudioListenerAttenuationOverride();// 0x1afde3fee041
	bool CanRestartPlayer();// 0x1afce3fee041
	void Camera(FName NewMode);// 0x1afbe3fee041
	void AddYawInput(float Val);// 0x1afae3fee041
	void AddRollInput(float Val);// 0x1af9e3fee041
	void AddPitchInput(float Val);// 0x1af8e3fee041
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x1af7e3fee041

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	bool disableAnimForceLast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	LinearColor ColorAndOpacity;//[Offset: 0x134, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x144, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x158, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x180, Size: 0x10]
	delegate OnVisibilityChanged;//[Offset: 0x190, Size: 0x10]
	Margin Padding;//[Offset: 0x1b8, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1c8, Size: 0x10]
	UMGSequenceTickManager* AnimationTickManager;//[Offset: 0x1d8, Size: 0x8]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1e0, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1f0, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x200, Size: 0x8]
	int Priority;//[Offset: 0x208, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20c, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20c, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20c, Size: 0x1]
	bool bLazyLoad;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20c, Size: 0x1]
	enum TickFrequency;//[Offset: 0x218, Size: 0x1]
	bool BlueprintTickEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x220, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x228, Size: 0x10]
	void UnregisterInputComponent();// 0x3813e3fee041
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x3812e3fee041
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x3811e3fee041
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x3810e3fee041
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x380fe3fee041
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x380ee3fee041
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x380de3fee041
	void StopListeningForAllInputActions();// 0x380ce3fee041
	void StopAnimationsAndLatentActions();// 0x380be3fee041
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x380ae3fee041
	void StopAllAnimations();// 0x3809e3fee041
	void SetPositionInViewport(Vector2D position, bool bRemoveDPIScale);// 0x3808e3fee041
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x3807e3fee041
	void SetPadding(Margin InPadding);// 0x3806e3fee041
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x3805e3fee041
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x3804e3fee041
	void SetInputActionPriority(int NewPriority);// 0x3803e3fee041
	void SetInputActionBlocking(bool bShouldBlock);// 0x3802e3fee041
	void SetForegroundColor(SlateColor InForegroundColor);// 0x3801e3fee041
	void SetDesiredSizeInViewport(Vector2D Size);// 0x3800e3fee041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x37ffe3fee041
	void SetBlueprintTickEnable(bool bTickEnable);// 0x37fee3fee041
	void SetAnimationForceLastEnable(bool Enable);// 0x37fde3fee041
	void SetAnimationCurrentTime(const WidgetAnimation* InAnimation, float InTime);// 0x37fce3fee041
	void SetAnchorsInViewport(Anchors Anchors);// 0x37fbe3fee041
	void SetAlignmentInViewport(Vector2D Alignment);// 0x37fae3fee041
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x37f9e3fee041
	void RemoveFromViewport();// 0x37f8e3fee041
	void RegisterInputComponent();// 0x37f7e3fee041
	void PreConstruct(bool IsDesignTime);// 0x37f6e3fee041
	void PlaySound(SoundBase* SoundToPlay);// 0x37f5e3fee041
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x37f4e3fee041
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x37f3e3fee041
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x37f2e3fee041
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x37f1e3fee041
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x37f0e3fee041
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x37efe3fee041
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x37eee3fee041
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x37ede3fee041
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x37ece3fee041
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x37ebe3fee041
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x37eae3fee041
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x37e9e3fee041
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x37e8e3fee041
	void OnPaint(out PaintContext Context);// 0x37e7e3fee041
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x37e6e3fee041
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x37e5e3fee041
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x37e4e3fee041
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x37e3e3fee041
	void OnMouseCaptureLost();// 0x37e2e3fee041
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x37e1e3fee041
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x37e0e3fee041
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x37dfe3fee041
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x37dee3fee041
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x37dde3fee041
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x37dce3fee041
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x37dbe3fee041
	void OnInitialized();// 0x37dae3fee041
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x37d9e3fee041
	void OnFocusLost(FocusEvent InFocusEvent);// 0x37d8e3fee041
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x37d7e3fee041
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x37d6e3fee041
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x37d5e3fee041
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x37d4e3fee041
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x37d3e3fee041
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x37d2e3fee041
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x37d1e3fee041
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x37d0e3fee041
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x37cfe3fee041
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x37cee3fee041
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x37cde3fee041
	bool IsPlayingAnimation();// 0x37cce3fee041
	bool IsListeningForInputAction(FName ActionName);// 0x37cbe3fee041
	bool IsInViewport();// 0x37cae3fee041
	bool IsInteractable();// 0x37c9e3fee041
	bool IsBlueprintTickEnable();// 0x37c8e3fee041
	bool IsAnyAnimationPlaying();// 0x37c7e3fee041
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x37c6e3fee041
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x37c5e3fee041
	void InvalidateParent();// 0x37c4e3fee041
	Pawn* GetOwningPlayerPawn();// 0x37c3e3fee041
	PlayerCameraManager* GetOwningPlayerCameraManager();// 0x37c2e3fee041
	Widget* GetOrCreateLazyChild(FString Name);// 0x37c1e3fee041
	bool GetIsVisible();// 0x37c0e3fee041
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x37bfe3fee041
	Anchors GetAnchorsInViewport();// 0x37bee3fee041
	Vector2D GetAlignmentInViewport();// 0x37bde3fee041
	void FlushAnimations();// 0x37bce3fee041
	void FinishAnimation(const WidgetAnimation* InAnimation, bool isForceLastFrame);// 0x37bbe3fee041
	void Destruct();// 0x37bae3fee041
	void Construct();// 0x37b9e3fee041
	void CancelLatentActions();// 0x37b8e3fee041
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x37b7e3fee041
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x37b6e3fee041
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x37b5e3fee041
	void AddToViewport(int ZOrder);// 0x37b4e3fee041
	bool AddToPlayerScreen(int ZOrder);// 0x37b3e3fee041

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	enum MaskGeometryType;//[Offset: 0x80, Size: 0x1]
	Vector2D MaskGeometryMargin;//[Offset: 0x84, Size: 0x8]
	delegate VisibilityDelegate;//[Offset: 0x8c, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x9c, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xb8, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xc8, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]
	byte Cursor;//[Offset: 0xd2, Size: 0x1]
	enum Clipping;//[Offset: 0xd3, Size: 0x1]
	enum Visibility;//[Offset: 0xd4, Size: 0x1]
	float RenderOpacity;//[Offset: 0xd8, Size: 0x4]
	WidgetNavigation* Navigation;//[Offset: 0xe0, Size: 0x8]
	enum FlowDirectionPreference;//[Offset: 0xe8, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0x110, Size: 0x10]
	int PaintOffsetFlag;//[Offset: 0x120, Size: 0x4]
	void SetVisibility(enum InVisibility);// 0x191ce3fee041
	void SetUserFocus(PlayerController* PlayerController);// 0x191be3fee041
	void SetToolTipText(out const FText InToolTipText);// 0x191ae3fee041
	void SetToolTip(Widget* Widget);// 0x1919e3fee041
	void SetRenderTranslationXY(float X, float Y);// 0x1918e3fee041
	void SetRenderTranslation(Vector2D Translation);// 0x1917e3fee041
	void SetRenderTransformPivot(Vector2D Pivot);// 0x1916e3fee041
	void SetRenderTransformAngle(float Angle);// 0x1915e3fee041
	void SetRenderTransform(WidgetTransform InTransform);// 0x1913e3fee041
	void SetRenderShear(Vector2D Shear);// 0x1912e3fee041
	void SetRenderScaleXY(float X, float Y);// 0x1911e3fee041
	void SetRenderScale(Vector2D Scale);// 0x1910e3fee041
	void SetRenderOpacity(float InOpacity);// 0x190fe3fee041
	void SetPaintOffsetFlag(int InPaintOffset);// 0x190ee3fee041
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x190de3fee041
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x190ce3fee041
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x190be3fee041
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x190ae3fee041
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x1909e3fee041
	void SetKeyboardFocus();// 0x1908e3fee041
	void SetIsEnabled(bool bInIsEnabled);// 0x1907e3fee041
	void SetFocus();// 0x1906e3fee041
	void SetCursor(byte InCursor);// 0x1905e3fee041
	void SetClipping(enum InClipping);// 0x1904e3fee041
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x1902e3fee041
	void ResetCursor();// 0x1901e3fee041
	void RemoveFromParent();// 0x1900e3fee041
	bool RecursiveIsVisible();// 0x18ffe3fee041
	EventReply OnReply__DelegateSignature();// 0x18fee3fee041
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x18fae3fee041
	bool IsVisible();// 0x18f9e3fee041
	bool IsHovered();// 0x18f8e3fee041
	void InvalidateLayoutAndVolatility();// 0x18f7e3fee041
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x18f6e3fee041
	bool HasUserFocus(PlayerController* PlayerController);// 0x18f5e3fee041
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x18f4e3fee041
	bool HasMouseCapture();// 0x18f3e3fee041
	bool HasKeyboardFocus();// 0x18f2e3fee041
	bool HasFocusedDescendants();// 0x18f1e3fee041
	bool HasAnyUserFocus();// 0x18f0e3fee041
	Widget* GetWidget__DelegateSignature();// 0x18efe3fee041
	enum GetVisibility();// 0x18eee3fee041
	Geometry GetTickSpaceGeometry();// 0x18ede3fee041
	FText GetText__DelegateSignature();// 0x18ece3fee041
	enum GetSlateVisibility__DelegateSignature();// 0x18eae3fee041
	SlateColor GetSlateColor__DelegateSignature();// 0x18e9e3fee041
	SlateBrush GetSlateBrush__DelegateSignature();// 0x18e0e3fee041
	float GetRenderTransformAngle();// 0x18dfe3fee041
	float GetRenderOpacity();// 0x18dee3fee041
	PanelWidget* GetParent();// 0x18dde3fee041
	Geometry GetPaintSpaceGeometry();// 0x18dce3fee041
	PlayerController* GetOwningPlayer();// 0x18dbe3fee041
	LocalPlayer* GetOwningLocalPlayer();// 0x18dae3fee041
	byte GetMouseCursor__DelegateSignature();// 0x18d8e3fee041
	LinearColor GetLinearColor__DelegateSignature();// 0x18d7e3fee041
	bool GetIsEnabled();// 0x18d6e3fee041
	int GetInt32__DelegateSignature();// 0x18d5e3fee041
	GameInstance* GetGameInstance();// 0x18d4e3fee041
	float GetFloat__DelegateSignature();// 0x18d3e3fee041
	Vector2D GetDesiredSize();// 0x18d2e3fee041
	enum GetClipping();// 0x18d0e3fee041
	enum GetCheckBoxState__DelegateSignature();// 0x18cee3fee041
	Geometry GetCachedGeometry();// 0x18cce3fee041
	bool GetBool__DelegateSignature();// 0x18cbe3fee041
	FText GetAccessibleText();// 0x18cae3fee041
	FText GetAccessibleSummaryText();// 0x18c9e3fee041
	Widget* GenerateWidgetForString__DelegateSignature(FString item);// 0x18c8e3fee041
	Widget* GenerateWidgetForObject__DelegateSignature(Object* item);// 0x18c7e3fee041
	void ForceVolatile(bool bForce);// 0x18c6e3fee041
	void ForceLayoutPrepass();// 0x18c5e3fee041

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: EventReply

--------------------------------
Class: Geometry

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	Margin Margin;//[Offset: 0x10, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8]
	FName ResourceName;//[Offset: 0x50, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14]
	byte DrawAs;//[Offset: 0x6c, Size: 0x1]
	byte Tiling;//[Offset: 0x6d, Size: 0x1]
	byte Mirroring;//[Offset: 0x6e, Size: 0x1]
	byte ImageType;//[Offset: 0x6f, Size: 0x1]
	bool UseImageUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool IsDrawAsCircle;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x128, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x19c4e3fee041
	bool RemoveChild(Widget* Content);// 0x19c3e3fee041
	void OnLazyChildCreated(PanelSlot* PanelSlot, Widget* Widget);// 0x19c2e3fee041
	bool HasChild(Widget* Content);// 0x19c1e3fee041
	bool HasAnyChildren();// 0x19c0e3fee041
	int GetChildrenCount();// 0x19bfe3fee041
	int GetChildIndex(const Widget* Content);// 0x19bee3fee041
	Widget* GetChildAt(int Index);// 0x19bde3fee041
	Widget*[] GetAllChildren();// 0x19bce3fee041
	void ClearChildren();// 0x19bbe3fee041
	PanelSlot* AddChild(Widget* Content);// 0x19bae3fee041

--------------------------------
Class: PanelSlot.Visual.Object
	Object* ContentClass;//[Offset: 0x28, Size: 0x28]
	PanelWidget* Parent;//[Offset: 0x50, Size: 0x8]
	Widget* Content;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4]
	World* World;//[Offset: 0x70, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8]
	void SSSwapControllers();// 0x4534e3fee041
	void ShowTitleSafeArea();// 0x4533e3fee041
	void SetConsoleTarget(int PlayerIndex);// 0x4532e3fee041

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x98, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0xc0, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xd0, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xd8, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xe0, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xe8, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xf0, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10e, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x110, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x118, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x120, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x128, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x130, Size: 0x8]
	Level*[] Levels;//[Offset: 0x138, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x148, Size: 0x10]
	GameInstance* OwningGameInstance;//[Offset: 0x180, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x188, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x198, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1a0, Size: 0x8]
	<ActorComponent*> ComponentsThatNeedPreEndOfFrameSync;//[Offset: 0x208, Size: 0x50]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x258, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x268, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x5f8, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x688, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0x71d0e3fee041
	void HandleTimelineScrubbed();// 0x71cfe3fee041

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x2e8, Size: 0x4]
	bool bPHOCUseWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	float PHOCBucketSize;//[Offset: 0x2f0, Size: 0x4]
	int PHOCCellNumPerBucket;//[Offset: 0x2f4, Size: 0x4]
	float PHOCSubLevelSize;//[Offset: 0x2f8, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x2fc, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fd, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fd, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2fd, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2fd, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2fd, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2fd, Size: 0x1]
	bool bEnableDistanceLevelStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2fd, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2fd, Size: 0x1]
	bool bUseStandaloneLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fe, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fe, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2fe, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2fe, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2fe, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2fe, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2fe, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2fe, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ff, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x300, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x308, Size: 0x8]
	float WorldToMeters;//[Offset: 0x310, Size: 0x4]
	float KillZ;//[Offset: 0x314, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x318, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x320, Size: 0x4]
	bool bEnablePRT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 0x1]
	float GlobalGravityZ;//[Offset: 0x328, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x330, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x338, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x340, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x348, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x350, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x354, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x360, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x364, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x368, Size: 0x4]
	bool bMobileUseCustomReflectionCaptureSelectMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1]
	IBLPrecomputedDataAsset* HQAdditiveReflectionCubemap;//[Offset: 0x370, Size: 0x8]
	float AdditiveWeight;//[Offset: 0x378, Size: 0x4]
	float TotalWeight;//[Offset: 0x37c, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x380, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x3a0, Size: 0x24]
	float MonoCullingDistance;//[Offset: 0x3c4, Size: 0x4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x3c8, Size: 0x8]
	float TimeDilation;//[Offset: 0x3d0, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x3d4, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x3d8, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x3dc, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x3e0, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x3e4, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x3e8, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x3ec, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x430, Size: 0x8]
	NetViewer[] ReplicationViewers;//[Offset: 0x438, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x448, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x458, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x460, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x468, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x470, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x480, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x518de3fee041

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4]
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x318, Size: 0x4]
	int Priority;//[Offset: 0x31c, Size: 0x4]
	float FluidFriction;//[Offset: 0x320, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x2e0, Size: 0x1]
	Color BrushColor;//[Offset: 0x2e4, Size: 0x4]
	int PolyFlags;//[Offset: 0x2e8, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ec, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ec, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ec, Size: 0x1]
	Model* Brush;//[Offset: 0x2f0, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x2f8, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x308, Size: 0x10]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x5b0, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x5b8, Size: 0x8]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x30, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x39, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x90, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xe0, Size: 0x24]
	float Duration;//[Offset: 0x104, Size: 0x4]
	float MaxDistance;//[Offset: 0x108, Size: 0x4]
	float TotalSamples;//[Offset: 0x10c, Size: 0x4]
	float Priority;//[Offset: 0x110, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x118, Size: 0x8]
	SoundModulationDefaultRoutingSettings ModulationSettings;//[Offset: 0x120, Size: 0x48]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x168, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x170, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x180, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x188, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x198, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x1a8, Size: 0x10]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x80]
	SoundClass*[] ChildClasses;//[Offset: 0xa8, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0xb8, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4]
	float StereoBleed;//[Offset: 0x10, Size: 0x4]
	float LFEBleed;//[Offset: 0x14, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 0x4]
	SoundModulationDefaultSettings ModulationSettings;//[Offset: 0x30, Size: 0x40]
	byte OutputTarget;//[Offset: 0x70, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x71, Size: 0x1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination;//[Offset: 0x0, Size: 0x10]
	SoundModulationDestinationSettings PitchModulationDestination;//[Offset: 0x10, Size: 0x10]
	SoundModulationDestinationSettings HighpassModulationDestination;//[Offset: 0x20, Size: 0x10]
	SoundModulationDestinationSettings LowpassModulationDestination;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SoundModulationDestinationSettings
	float Value;//[Offset: 0x0, Size: 0x4]
	SoundModulatorBase* Modulator;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundModulatorBase.Object

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	enum GainMode;//[Offset: 0x68, Size: 0x1]
	float OutputVolume;//[Offset: 0x6c, Size: 0x4]
	float WetLevel;//[Offset: 0x70, Size: 0x4]
	float DryLevel;//[Offset: 0x74, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x78, Size: 0x10]
	void StopSpectralAnalysis(const Object* WorldContextObject);// 0x7133e3fee041
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x7132e3fee041
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x7131e3fee041
	void StartSpectralAnalysis(const Object* WorldContextObject, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x7130e3fee041
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x712fe3fee041
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x712ee3fee041
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x712de3fee041
	void RemoveSpectralAnalysisDelegate(const Object* WorldContextObject, out const delegate OnSubmixSpectralAnalysisBP);// 0x712ce3fee041
	void AddSpectralAnalysisDelegate(const Object* WorldContextObject, out const SoundSubmixSpectralAnalysisBandSettings[] InBandSettings, out const delegate OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);// 0x712be3fee041
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x712ae3fee041

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x1b8, Size: 0x4]
	int StreamingPriority;//[Offset: 0x1bc, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x1c0, Size: 0x1]
	byte SoundGroup;//[Offset: 0x1c2, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c3, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c3, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c3, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x1c4, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c5, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c5, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c6, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c6, Size: 0x1]
	float[] FrequenciesToAnalyze;//[Offset: 0x1c8, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x1d8, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x1e8, Size: 0x10]
	int InitialChunkSize;//[Offset: 0x1f8, Size: 0x4]
	FString SpokenText;//[Offset: 0x240, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x250, Size: 0x4]
	float Volume;//[Offset: 0x254, Size: 0x4]
	float Pitch;//[Offset: 0x258, Size: 0x4]
	int NumChannels;//[Offset: 0x25c, Size: 0x4]
	int SampleRate;//[Offset: 0x260, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x270, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x280, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x288, Size: 0x8]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSpectralAnalysisBandSettings
	float BandFrequency;//[Offset: 0x0, Size: 0x4]
	int AttackTimeMsec;//[Offset: 0x4, Size: 0x4]
	int ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4]
	float QFactor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10]
	float InitialDelay;//[Offset: 0x80, Size: 0x4]
	float FadeInTime;//[Offset: 0x84, Size: 0x4]
	float Duration;//[Offset: 0x88, Size: 0x4]
	float FadeoutTime;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4]
	float Gain0;//[Offset: 0x14, Size: 0x4]
	float Bandwidth0;//[Offset: 0x18, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4]
	float Gain1;//[Offset: 0x20, Size: 0x4]
	float Bandwidth1;//[Offset: 0x24, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4]
	float Gain2;//[Offset: 0x2c, Size: 0x4]
	float Bandwidth2;//[Offset: 0x30, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4]
	float Gain3;//[Offset: 0x38, Size: 0x4]
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x24]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float RetriggerTime;//[Offset: 0x8, Size: 0x4]
	float VolumeScale;//[Offset: 0xc, Size: 0x4]
	enum VolumeScaleMode;//[Offset: 0x10, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0x14, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x1c, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1]
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1]
	float OmniRadius;//[Offset: 0xbc, Size: 0x4]
	float StereoSpread;//[Offset: 0xc0, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	enum FalloffMode;//[Offset: 0x10, Size: 0x1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc]
	float ConeOffset;//[Offset: 0x20, Size: 0x4]
	float FalloffDistance;//[Offset: 0x24, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x6bbce3fee041

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x6bbbe3fee041
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x6bbae3fee041

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 0x8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	enum VolumeRouting;//[Offset: 0x40, Size: 0x1]
	enum PitchRouting;//[Offset: 0x41, Size: 0x1]
	enum HighpassRouting;//[Offset: 0x42, Size: 0x1]
	enum LowpassRouting;//[Offset: 0x43, Size: 0x1]

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	enum SendStage;//[Offset: 0x1, Size: 0x1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	AudioBus* AudioBus;//[Offset: 0x10, Size: 0x8]
	float SendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendLevel;//[Offset: 0x1c, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x20, Size: 0x4]
	float MinSendDistance;//[Offset: 0x24, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x28, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x30, Size: 0x88]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x36c, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x370, Size: 0x4]
	AudioBus* AudioBus;//[Offset: 0x378, Size: 0x8]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 0x1]

--------------------------------
Class: AudioBus.Object
	enum AudioBusChannels;//[Offset: 0x28, Size: 0x1]
	bool bIsAutomatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x2e0, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x2f0, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x2f8, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x300, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x308, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x310, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x318, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x320, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x328, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x330, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x338, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x340, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x348, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x350, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x368, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x368, Size: 0x1]
	void StartPlay();// 0x41a1e3fee041
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x41a0e3fee041
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x419fe3fee041
	bool ShouldReset(Actor* ActorToReset);// 0x419ee3fee041
	void ReturnToMainMenuHost();// 0x419de3fee041
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x419ce3fee041
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x419be3fee041
	void RestartPlayer(Controller* NewPlayer);// 0x419ae3fee041
	void ResetLevel();// 0x4199e3fee041
	bool PlayerCanRestart(PlayerController* Player);// 0x4198e3fee041
	bool MustSpectate(PlayerController* NewPlayerController);// 0x4197e3fee041
	void K2_PostLogin(PlayerController* NewPlayer);// 0x4196e3fee041
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x4195e3fee041
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x4194e3fee041
	void K2_OnLogout(Controller* ExitingController);// 0x4193e3fee041
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x4192e3fee041
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x4191e3fee041
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x4190e3fee041
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x418fe3fee041
	bool HasMatchStarted();// 0x418ee3fee041
	bool HasMatchEnded();// 0x418de3fee041
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x418ce3fee041
	int GetNumSpectators();// 0x418be3fee041
	int GetNumPlayers();// 0x418ae3fee041
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x4189e3fee041
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x4188e3fee041
	Actor* ChoosePlayerStart(Controller* Player);// 0x4187e3fee041
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x4186e3fee041
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x4185e3fee041

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x2e0, Size: 0x4]
	int PlayerId;//[Offset: 0x2e4, Size: 0x4]
	byte Ping;//[Offset: 0x2e8, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ea, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ea, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ea, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ea, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ea, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ea, Size: 0x1]
	int StartTime;//[Offset: 0x2ec, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2f0, Size: 0x8]
	float ExactPing;//[Offset: 0x2f8, Size: 0x4]
	float ExactPingV2;//[Offset: 0x2fc, Size: 0x4]
	FString SavedNetworkAddress;//[Offset: 0x300, Size: 0x10]
	UniqueNetIdRepl UniqueID;//[Offset: 0x310, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x340, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x3b8, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x4cede3fee041
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x4cece3fee041
	void OnRep_UniqueId();// 0x4cebe3fee041
	void OnRep_Score();// 0x4ceae3fee041
	void OnRep_PlayerName();// 0x4ce9e3fee041
	void OnRep_PlayerId();// 0x4ce8e3fee041
	void OnRep_bIsInactive();// 0x4ce7e3fee041
	FString GetPlayerName();// 0x4ce6e3fee041

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x2e0, Size: 0x4]
	int MaxPlayers;//[Offset: 0x2e4, Size: 0x4]
	int MaxPartySize;//[Offset: 0x2e8, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x2ec, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 0x1]
	FName SessionName;//[Offset: 0x2f0, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x2e0, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x2e8, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2f0, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x2f8, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x30c, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x310, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x314, Size: 0x4]
	void OnRep_SpectatorClass();// 0x445be3fee041
	void OnRep_ReplicatedWorldTimeSeconds();// 0x445ae3fee041
	void OnRep_ReplicatedHasBegunPlay();// 0x4459e3fee041
	void OnRep_GameModeClass();// 0x4458e3fee041
	bool HasMatchStarted();// 0x4457e3fee041
	bool HasMatchEnded();// 0x4456e3fee041
	bool HasBegunPlay();// 0x4455e3fee041
	float GetServerWorldTimeSeconds();// 0x4454e3fee041
	float GetPlayerStartTime(Controller* Controller);// 0x4453e3fee041
	float GetPlayerRespawnDelay(Controller* Controller);// 0x4452e3fee041

--------------------------------
Class: SpectatorPawn.Character.Pawn.Actor.Object

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x350, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x358, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x360, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x368, Size: 0x38]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x3a0, Size: 0x38]
	float AnimRootMotionTranslationScale;//[Offset: 0x3d8, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x3dc, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x3f0, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x400, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x404, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x408, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x40c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x410, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x410, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x410, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x410, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x410, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x410, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x410, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x410, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x411, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x411, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x411, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x414, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x418, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x41c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x420, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x424, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x428, Size: 0x4]
	int JumpCurrentCountPreJump;//[Offset: 0x42c, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x438, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x458, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x468, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x478, Size: 0x38]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4b0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x4f0, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x500, Size: 0x98]
	void UnCrouch(bool bClientSimulation);// 0x36ece3fee041
	void StopJumping();// 0x36ebe3fee041
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x36eae3fee041
	void ServerMovePacked(const CharacterServerMovePackedBits PackedBits);// 0x36e9e3fee041
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x36e8e3fee041
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x36e7e3fee041
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x36e6e3fee041
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x36e5e3fee041
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x36e4e3fee041
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x36e3e3fee041
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x36e2e3fee041
	bool PreGetCachedMoveOverlapsShapes(out const Transform NewTransform, out const Transform OldTransform, bool bRealMove, bool SweepOrLineTrace);// 0x36e1e3fee041
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x36e0e3fee041
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x36dfe3fee041
	void OnRep_RootMotion();// 0x36dee3fee041
	void OnRep_ReplicatedBasedMovement();// 0x36dde3fee041
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x36dce3fee041
	void OnRep_IsCrouched();// 0x36dbe3fee041
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x36dae3fee041
	void OnLanded(out const HitResult Hit);// 0x36d9e3fee041
	void OnJumped();// 0x36d8e3fee041
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x36d7e3fee041
	void K2_UpdateCustomMovement(float DeltaTime);// 0x36d6e3fee041
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x36d5e3fee041
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x36d4e3fee041
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x36d3e3fee041
	void Jump();// 0x36d2e3fee041
	bool IsPlayingRootMotion();// 0x36d1e3fee041
	bool IsPlayingNetworkedRootMotionMontage();// 0x36d0e3fee041
	bool IsJumpProvidingForce();// 0x36cfe3fee041
	bool HasAnyRootMotion();// 0x36cee3fee041
	AnimMontage* GetCurrentMontage();// 0x36cde3fee041
	Vector GetBaseTranslationOffset();// 0x36cce3fee041
	Rotator GetBaseRotationOffsetRotator();// 0x36cbe3fee041
	float GetAnimRootMotionTranslationScale();// 0x36cae3fee041
	void Crouch(bool bClientSimulation);// 0x36c9e3fee041
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x36c8e3fee041
	void ClientMoveResponsePacked(const CharacterMoveResponsePackedBits PackedBits);// 0x36c7e3fee041
	void ClientCheatWalk();// 0x36c6e3fee041
	void ClientCheatGhost();// 0x36c5e3fee041
	void ClientCheatFly();// 0x36c4e3fee041
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x36c3e3fee041
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x36c2e3fee041
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode, byte ServerSprintFailReason);// 0x36c1e3fee041
	void ClientAckGoodMove(float Timestamp);// 0x36c0e3fee041
	bool CanJumpInternal();// 0x36bfe3fee041
	bool CanJump();// 0x36bee3fee041
	bool CanCrouch();// 0x36bde3fee041
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x36bce3fee041

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x810, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x818, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x820, Size: 0x8]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x828, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x830, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x858, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x864, Size: 0xc]
	AnimInstance*[] LinkedInstances;//[Offset: 0x8a0, Size: 0x10]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x8b0, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x8c0, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0xa20, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0xa24, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0xa25, Size: 0x1]
	byte AnimationMode;//[Offset: 0xa27, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa29, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa29, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa29, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa29, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa29, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa29, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2a, Size: 0x1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa30, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa30, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa30, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa30, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa31, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa31, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa31, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa31, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa31, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa31, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa31, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa32, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa32, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa32, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa32, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa32, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa32, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa32, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa32, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa33, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa33, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa33, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa33, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa33, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa33, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa33, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa33, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa34, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa34, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa34, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0xa36, Size: 0x2]
	enum MassMode;//[Offset: 0xa38, Size: 0x1]
	float UniformMass;//[Offset: 0xa3c, Size: 0x4]
	float TotalMass;//[Offset: 0xa40, Size: 0x4]
	float Density;//[Offset: 0xa44, Size: 0x4]
	float MinPerParticleMass;//[Offset: 0xa48, Size: 0x4]
	float ClothBlendWeight;//[Offset: 0xa4c, Size: 0x4]
	float EdgeStiffness;//[Offset: 0xa50, Size: 0x4]
	float BendingStiffness;//[Offset: 0xa54, Size: 0x4]
	float AreaStiffness;//[Offset: 0xa58, Size: 0x4]
	float VolumeStiffness;//[Offset: 0xa5c, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0xa60, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0xa64, Size: 0x4]
	bool bWaitForParallelClothTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa68, Size: 0x1]
	FName[] DisallowedAnimCurves;//[Offset: 0xa70, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0xa80, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0xa90, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0xaa0, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0xb78, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0xb7c, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0xb88, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xbe0, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xcb0, Size: 0x10]
	bool bEnablePhysicsConstraintDeferredCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf00, Size: 0x1]
	bool bReceiveNotifiesFromMontageInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf01, Size: 0x1]
	bool bEnableUpdateChildTransformsOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1058, Size: 0x1]
	float BoundsChangeThresholdToUpdateChildTransforms;//[Offset: 0x1060, Size: 0x4]
	bool bEnableTickAnimationOnSkeletalMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1084, Size: 0x1]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x39aee3fee041
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x39ade3fee041
	void ToggleDisablePostProcessBlueprint();// 0x39ace3fee041
	void TermBodiesBelow(FName ParentBoneName);// 0x39abe3fee041
	void SuspendClothingSimulation();// 0x39aae3fee041
	void Stop();// 0x39a9e3fee041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x39a8e3fee041
	void SetUpdateClothInEditor(const bool NewUpdateState);// 0x39a7e3fee041
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x39a6e3fee041
	void SetTeleportRotationThreshold(float threshold);// 0x39a5e3fee041
	void SetTeleportDistanceThreshold(float threshold);// 0x39a4e3fee041
	void SetPosition(float InPos, bool bFireNotifies);// 0x39a3e3fee041
	void SetPlayRate(float Rate);// 0x39a2e3fee041
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x39a1e3fee041
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x39a0e3fee041
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x399fe3fee041
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x399ee3fee041
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x399de3fee041
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x399ce3fee041
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x399be3fee041
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x399ae3fee041
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x3999e3fee041
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x3998e3fee041
	void SetClothMaxDistanceScale(float Scale);// 0x3997e3fee041
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x3996e3fee041
	void SetAnimClass(class Object NewClass);// 0x3995e3fee041
	void SetAnimationMode(byte InAnimationMode);// 0x3994e3fee041
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x3993e3fee041
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x3992e3fee041
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x3991e3fee041
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x3990e3fee041
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x398fe3fee041
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x398ee3fee041
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x398de3fee041
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x398ce3fee041
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x398be3fee041
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x398ae3fee041
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x3989e3fee041
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x3988e3fee041
	void ResumeClothingSimulation();// 0x3987e3fee041
	void ResetClothTeleportMode();// 0x3986e3fee041
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x3985e3fee041
	void ResetAllowedAnimCurveEvaluation();// 0x3984e3fee041
	void ResetAllBodiesSimulatePhysics();// 0x3983e3fee041
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x3982e3fee041
	void Play(bool bLooping);// 0x3981e3fee041
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float position, float PlayRate);// 0x3980e3fee041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x397fe3fee041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x397ee3fee041
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x397de3fee041
	bool IsPlaying();// 0x397ce3fee041
	bool IsClothingSimulationSuspended();// 0x397be3fee041
	bool IsBodyGravityEnabled(FName BoneName);// 0x397ae3fee041
	bool HasValidAnimationInstance();// 0x3979e3fee041
	float GetTeleportRotationThreshold();// 0x3978e3fee041
	float GetTeleportDistanceThreshold();// 0x3977e3fee041
	bool GetStringAttribute_Ref(out const FName BoneName, out const FName AttributeName, out FString OutValue, enum LookupType);// 0x3976e3fee041
	bool GetStringAttribute(out const FName BoneName, out const FName AttributeName, FString DefaultValue, out FString OutValue, enum LookupType);// 0x3975e3fee041
	Vector GetSkeletalCenterOfMass();// 0x3974e3fee041
	AnimInstance* GetPostProcessInstance();// 0x3973e3fee041
	float GetPosition();// 0x3972e3fee041
	float GetPlayRate();// 0x3971e3fee041
	float GetMorphTarget(FName MorphTargetName);// 0x3970e3fee041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x396fe3fee041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x396ee3fee041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x396de3fee041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x396ce3fee041
	bool GetIntegerAttribute_Ref(out const FName BoneName, out const FName AttributeName, out int OutValue, enum LookupType);// 0x396be3fee041
	bool GetIntegerAttribute(out const FName BoneName, out const FName AttributeName, int DefaultValue, out int OutValue, enum LookupType);// 0x396ae3fee041
	bool GetFloatAttribute_Ref(out const FName BoneName, out const FName AttributeName, out float OutValue, enum LookupType);// 0x3969e3fee041
	bool GetFloatAttribute(out const FName BoneName, out const FName AttributeName, float DefaultValue, out float OutValue, enum LookupType);// 0x3968e3fee041
	bool GetDisablePostProcessBlueprint();// 0x3967e3fee041
	bool GetDisableAnimCurves();// 0x3966e3fee041
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x3965e3fee041
	float GetClothMaxDistanceScale();// 0x3964e3fee041
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x3963e3fee041
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x3962e3fee041
	AnimInstance* GetAnimInstance();// 0x3961e3fee041
	class Object GetAnimClass();// 0x3960e3fee041
	byte GetAnimationMode();// 0x395fe3fee041
	bool GetAllowRigidBodyAnimNode();// 0x395ee3fee041
	bool GetAllowedAnimCurveEvaluate();// 0x395de3fee041
	void ForceClothNextUpdateTeleportAndReset();// 0x395ce3fee041
	void ForceClothNextUpdateTeleport();// 0x395be3fee041
	FName FindConstraintBoneName(int ConstraintIndex);// 0x395ae3fee041
	void ClearMorphTargets();// 0x3959e3fee041
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x3958e3fee041
	void BindClothToMasterPoseComponent();// 0x3957e3fee041
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x3956e3fee041
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x3955e3fee041
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x3954e3fee041
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x3953e3fee041

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x5f0, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x5f8, Size: 0x8]
	enum[] SkinCacheUsage;//[Offset: 0x600, Size: 0x10]
	VertexOffsetUsage[] VertexOffsetUsage;//[Offset: 0x610, Size: 0x10]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x718, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x720, Size: 0x4]
	int MinLodModel;//[Offset: 0x724, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x730, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x740, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x774, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x776, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x776, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x776, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x776, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x776, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x777, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x777, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x777, Size: 0x1]
	bool bComponentConsiderChildMeshBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x777, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x777, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x777, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x777, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x777, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x778, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x778, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x778, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x778, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x778, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x778, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x778, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x779, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x779, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x77c, Size: 0x4]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x790, Size: 0x1c]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x7b0, Size: 0x40]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x3952e3fee041
	void UnHideBoneByName(FName BoneName);// 0x3951e3fee041
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x3950e3fee041
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x394fe3fee041
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x394ee3fee041
	void ShowAllMaterialSections(int LODIndex);// 0x394de3fee041
	void SetVertexOffsetUsage(int LODIndex, int Usage);// 0x394ce3fee041
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x394be3fee041
	bool SetSkinWeightProfile(FName InProfileName);// 0x394ae3fee041
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x3949e3fee041
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x3948e3fee041
	void SetRenderStatic(bool bNewValue);// 0x3947e3fee041
	void SetPreSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x3946e3fee041
	void SetPostSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x3945e3fee041
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x3944e3fee041
	void SetMinLOD(int InNewMinLOD);// 0x3943e3fee041
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x3942e3fee041
	void SetForcedLOD(int InNewForcedLOD);// 0x3941e3fee041
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x3940e3fee041
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x393fe3fee041
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x393ee3fee041
	bool IsUsingSkinWeightProfile();// 0x393de3fee041
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x393ce3fee041
	bool IsBoneHiddenByName(FName BoneName);// 0x393be3fee041
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x393ae3fee041
	int GetVertexOffsetUsage(int LODIndex);// 0x3939e3fee041
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x3938e3fee041
	FName GetSocketBoneName(FName InSocketName);// 0x3937e3fee041
	Vector GetRefPosePosition(int BoneIndex);// 0x3936e3fee041
	FName GetParentBone(FName BoneName);// 0x3935e3fee041
	int GetNumLODs();// 0x3934e3fee041
	int GetNumBones();// 0x3933e3fee041
	int GetForcedLOD();// 0x3932e3fee041
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x3931e3fee041
	FName GetCurrentSkinWeightProfileName();// 0x3930e3fee041
	FName GetBoneName(int BoneIndex);// 0x392fe3fee041
	int GetBoneIndex(FName BoneName);// 0x392ee3fee041
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x392de3fee041
	void ClearVertexColorOverride(int LODIndex);// 0x392ce3fee041
	void ClearSkinWeightProfile();// 0x392be3fee041
	void ClearSkinWeightOverride(int LODIndex);// 0x392ae3fee041
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x3929e3fee041

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x5b0, Size: 0x10]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d0, Size: 0x1]
	Actor* IndirectLightingSampleActor;//[Offset: 0x5d8, Size: 0x8]
	bool bUseIndirectLightingSampleActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e0, Size: 0x1]
	bool bUpdateChildTransformEvenHidden;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5e0, Size: 0x1]
	bool bTickComponentEvenHidden;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5e0, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x2291e3fee041
	void SetVector4ParameterValueOnMaterials(const FName ParameterName, out const Vector4 ParameterValue);// 0x2290e3fee041
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x228fe3fee041
	void SetLinearColorParameterValueOnMaterials(const FName ParameterName, out const LinearColor ParameterValue);// 0x228ee3fee041
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x228de3fee041
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x228ce3fee041
	FName[] GetMaterialSlotNames();// 0x228be3fee041
	MaterialInterface*[] GetMaterials();// 0x228ae3fee041
	int GetMaterialIndex(FName MaterialSlotName);// 0x2289e3fee041

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x367ee3fee041
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x367de3fee041
	Pawn* TryGetPawnOwner();// 0x367ce3fee041
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x367be3fee041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x367ae3fee041
	void SetRootMotionMode(byte Value);// 0x3679e3fee041
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x3678e3fee041
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x3677e3fee041
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x3676e3fee041
	void SavePoseSnapshot(FName SnapshotName);// 0x3675e3fee041
	void ResetDynamics(enum InTeleportType);// 0x3674e3fee041
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x3673e3fee041
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x3672e3fee041
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x3671e3fee041
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x3670e3fee041
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x366fe3fee041
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x366ee3fee041
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x366de3fee041
	void Montage_Resume(const AnimMontage* Montage);// 0x366ce3fee041
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x366be3fee041
	void Montage_Pause(const AnimMontage* Montage);// 0x366ae3fee041
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x3669e3fee041
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x3668e3fee041
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x3667e3fee041
	bool Montage_IsActive(const AnimMontage* Montage);// 0x3666e3fee041
	float Montage_GetPosition(const AnimMontage* Montage);// 0x3665e3fee041
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x3664e3fee041
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x3663e3fee041
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x3662e3fee041
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x3661e3fee041
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x3660e3fee041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x365fe3fee041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x365ee3fee041
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x365de3fee041
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x365ce3fee041
	bool IsAnyMontagePlaying();// 0x365be3fee041
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x365ae3fee041
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x3659e3fee041
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x3658e3fee041
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x3657e3fee041
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x3656e3fee041
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x3655e3fee041
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x3654e3fee041
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x3653e3fee041
	bool GetReceiveNotifiesFromLinkedInstances();// 0x3652e3fee041
	bool GetPropagateNotifiesToLinkedInstances();// 0x3651e3fee041
	SkeletalMeshComponent* GetOwningComponent();// 0x3650e3fee041
	Actor* GetOwningActor();// 0x364fe3fee041
	void GetLinkedAnimLayerInstancesByGroup(FName InGroup, out AnimInstance*[] OutLinkedInstances);// 0x364ee3fee041
	AnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class AnimInstance InClass);// 0x364de3fee041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x364ce3fee041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x364be3fee041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x364ae3fee041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x3649e3fee041
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x3648e3fee041
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x3647e3fee041
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x3646e3fee041
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x3645e3fee041
	float GetInstanceMachineWeight(int MachineIndex);// 0x3644e3fee041
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x3643e3fee041
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x3642e3fee041
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x3641e3fee041
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x3640e3fee041
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x363fe3fee041
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x363ee3fee041
	float GetCurveValue(FName CurveName);// 0x363de3fee041
	FName GetCurrentStateName(int MachineIndex);// 0x363ce3fee041
	AnimMontage* GetCurrentActiveMontage();// 0x363be3fee041
	void GetAllCurveNames(out FName[] OutNames);// 0x363ae3fee041
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x3639e3fee041
	void ClearMorphTargets();// 0x3638e3fee041
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x3637e3fee041
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x3636e3fee041
	void BlueprintPostEvaluateAnimation();// 0x3635e3fee041
	void BlueprintLinkedAnimationLayersInitialized();// 0x3634e3fee041
	void BlueprintInitializeAnimation();// 0x3633e3fee041
	void BlueprintBeginPlay();// 0x3632e3fee041

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x6a8de3fee041

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	int TrackIndex;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x313ce3fee041
	FString GetNotifyName();// 0x313be3fee041

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x5aa3e3fee041
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x5aa2e3fee041
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x5aa1e3fee041
	FString GetNotifyName();// 0x5aa0e3fee041

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30]
	float BlendOutTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4]
	FName SyncGroup;//[Offset: 0x118, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x6a8ee3fee041

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x710be3fee041
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x710ae3fee041

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x69e7e3fee041
	void PhysicsAssetUpdated();// 0x69e6e3fee041
	float GetSimulationTime();// 0x69e5e3fee041
	int GetNumSubsteps();// 0x69e4e3fee041
	int GetNumKinematicParticles();// 0x69e3e3fee041
	int GetNumIterations();// 0x69e2e3fee041
	int GetNumDynamicParticles();// 0x69e1e3fee041
	int GetNumCloths();// 0x69e0e3fee041
	void EnableGravityOverride(out const Vector InVector);// 0x69dfe3fee041
	void DisableGravityOverride();// 0x69dee3fee041
	void ClothConfigUpdated();// 0x69dde3fee041

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x80, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x88, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xa4, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0xc0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xcc, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xd8, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xe8, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xf8, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x158, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x15c, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x15d, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x15e, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15f, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15f, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15f, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15f, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15f, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x160, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x168, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x170, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x178, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x188, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x310, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x318, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x328, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x368, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x388, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x7105e3fee041
	void SetDefaultAnimatingRig(Object* InAnimatingRig);// 0x7104e3fee041
	int NumSockets();// 0x7103e3fee041
	FString[] K2_GetAllMorphTargetNames();// 0x7102e3fee041
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x7101e3fee041
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x7100e3fee041
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x70ffe3fee041
	BoxSphereBounds GetImportedBounds();// 0x70fee3fee041
	Object* GetDefaultAnimatingRig();// 0x70fde3fee041
	BoxSphereBounds GetBounds();// 0x70fce3fee041
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x70fbe3fee041
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x70fae3fee041
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x70f9e3fee041

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4]
	float ThresholdUV;//[Offset: 0xc, Size: 0x4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1]
	byte RefPoseType;//[Offset: 0x151, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4]
	FName RetargetSource;//[Offset: 0x164, Size: 0x8]
	enum Interpolation;//[Offset: 0x16c, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x16e, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 0x10]
	BakedCustomAttributePerBoneData[] BakedPerBoneCustomAttributeData;//[Offset: 0x1a0, Size: 0x10]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: BakedCustomAttributePerBoneData
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]
	BakedStringCustomAttribute[] StringAttributes;//[Offset: 0x8, Size: 0x10]
	BakedIntegerCustomAttribute[] IntAttributes;//[Offset: 0x18, Size: 0x10]
	BakedFloatCustomAttribute[] FloatAttributes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BakedStringCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	StringCurve StringCurve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: StringCurve.IndexedCurve
	FString DefaultValue;//[Offset: 0x68, Size: 0x10]
	StringCurveKey[] Keys;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: StringCurveKey
	float Time;//[Offset: 0x0, Size: 0x4]
	FString Value;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BakedIntegerCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	IntegralCurve IntCurve;//[Offset: 0x8, Size: 0x80]

--------------------------------
Class: IntegralCurve.IndexedCurve
	IntegralKey[] Keys;//[Offset: 0x68, Size: 0x10]
	int DefaultValue;//[Offset: 0x78, Size: 0x4]
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]

--------------------------------
Class: IntegralKey
	float Time;//[Offset: 0x0, Size: 0x4]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BakedFloatCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	SimpleCurve FloatCurve;//[Offset: 0x8, Size: 0x80]

--------------------------------
Class: SimpleCurve.RealCurve.IndexedCurve
	byte InterpMode;//[Offset: 0x6e, Size: 0x1]
	SimpleCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: SimpleCurveKey
	float Time;//[Offset: 0x0, Size: 0x4]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x1c]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10]

--------------------------------
Class: SkeletalBodySetup.BodySetup.BodySetupCore.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2a0, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1c0]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e8, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f8, Size: 0x10c]

--------------------------------
Class: ConstraintInstance.ConstraintInstanceBase
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x10c]

--------------------------------
Class: ConstraintInstanceBase

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float ProjectionLinearAlpha;//[Offset: 0x8, Size: 0x4]
	float ProjectionAngularAlpha;//[Offset: 0xc, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x10, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0x14, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x18, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x34, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x54, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x70, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xbc, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1]
	bool bEnableSoftProjection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x10c]
	FName ProfileName;//[Offset: 0x10c, Size: 0x8]

--------------------------------
Class: SolverIterations
	float FixedTimeStep;//[Offset: 0x0, Size: 0x4]
	int SolverIterations;//[Offset: 0x4, Size: 0x4]
	int JointIterations;//[Offset: 0x8, Size: 0x4]
	int CollisionIterations;//[Offset: 0xc, Size: 0x4]
	int SolverPushOutIterations;//[Offset: 0x10, Size: 0x4]
	int JointPushOutIterations;//[Offset: 0x14, Size: 0x4]
	int CollisionPushOutIterations;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	bool bOverrideLODStreamingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x36, Size: 0x1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	byte BlueprintType;//[Offset: 0x58, Size: 0x1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48]
	FName AttachToName;//[Offset: 0x80, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	FName VariableName;//[Offset: 0x90, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x6bc5e3fee041

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	LinearColor GetLinearColorValue(float InTime);// 0x6bbee3fee041
	LinearColor GetClampedLinearColorValue(float InTime);// 0x6bbde3fee041

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: VertexOffsetUsage
	int Usage;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x150, Size: 0x8]
	float GravityScale;//[Offset: 0x158, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x15c, Size: 0x4]
	float MaxStepHeightWithoutConsiderWalkable;//[Offset: 0x160, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x164, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x168, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x16c, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x170, Size: 0x4]
	byte MovementMode;//[Offset: 0x174, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x175, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x176, Size: 0x1]
	float GroundFriction;//[Offset: 0x178, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x19c, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x1a0, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x1a4, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x1a8, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x1ac, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1b0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1b4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1b8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1bc, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x1c0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1c4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1c8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1cc, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1d0, Size: 0x4]
	float AirControl;//[Offset: 0x1d4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1d8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1dc, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1e0, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x1e4, Size: 0x4]
	float Buoyancy;//[Offset: 0x1e8, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1ec, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1f0, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1f4, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x200, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x200, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x201, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x201, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x201, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x201, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x201, Size: 0x1]
	bool bSimulateMovementUseNavData;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x201, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x202, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x202, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x202, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x202, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x202, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x202, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x203, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x203, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x208, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x210, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x214, Size: 0x4]
	float Mass;//[Offset: 0x218, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x21c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x220, Size: 0x4]
	float PushForceFactor;//[Offset: 0x224, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x228, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x22c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x230, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x234, Size: 0x4]
	float RepulsionForce;//[Offset: 0x238, Size: 0x4]
	Vector Acceleration;//[Offset: 0x23c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x250, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x260, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x26c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x278, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x27c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x280, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x284, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x290, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x29c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x2ac, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2b0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2b4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2b8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2bc, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2c0, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2c4, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2c8, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2cc, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2d0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2d4, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2d8, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2dc, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2e0, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2e4, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2e8, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2ec, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2f0, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2f4, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x2f8, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x2fc, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x300, Size: 0xa8]
	byte DefaultLandMovementMode;//[Offset: 0x3a8, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x3a9, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x3aa, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ab, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3ab, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3ab, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3ab, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3ab, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3ab, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3ab, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3ab, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ac, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3ac, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3ac, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3ac, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3ac, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3ac, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3ac, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3ac, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ad, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3ad, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3ad, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3ad, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3ad, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3ad, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3ad, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ae, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3ae, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3ae, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3ae, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3ae, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3ae, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3c0, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x3c4, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3d0, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3d4, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3d8, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3dc, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3e0, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3e4, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x4a0, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x4a4, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x4a8, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x4ac, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x4b0, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x4b4, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x4b8, Size: 0x30]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x500, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x9b0, Size: 0x38]
	RootMotionSourceGroup ServerCorrectionRootMotion;//[Offset: 0x9e8, Size: 0x38]
	RootMotionMovementParams RootMotionParams;//[Offset: 0xab0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0xaf0, Size: 0xc]
	bool bEnableRootMotionMontageParallelUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xafc, Size: 0x1]
	bool bEnableLedgeMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xafc, Size: 0x1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x39fde3fee041
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x39fce3fee041
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x39fbe3fee041
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x39fae3fee041
	void SetGroupsToIgnore(int GroupFlags);// 0x39f9e3fee041
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x39f8e3fee041
	void SetGroupsToAvoid(int GroupFlags);// 0x39f7e3fee041
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x39f6e3fee041
	void SetAvoidanceGroup(int GroupFlags);// 0x39f5e3fee041
	void SetAvoidanceEnabled(bool bEnable);// 0x39f4e3fee041
	float K2_GetWalkableFloorZ();// 0x39f3e3fee041
	float K2_GetWalkableFloorAngle();// 0x39f2e3fee041
	float K2_GetModifiedMaxAcceleration();// 0x39f1e3fee041
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x39f0e3fee041
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x39efe3fee041
	bool IsWalking();// 0x39eee3fee041
	bool IsWalkable(out const HitResult Hit);// 0x39ede3fee041
	float GetValidPerchRadius();// 0x39ece3fee041
	float GetPerchRadiusThreshold();// 0x39ebe3fee041
	PrimitiveComponent* GetMovementBase();// 0x39eae3fee041
	float GetMinAnalogSpeed();// 0x39e9e3fee041
	float GetMaxJumpHeightWithJumpTime();// 0x39e8e3fee041
	float GetMaxJumpHeight();// 0x39e7e3fee041
	float GetMaxBrakingDeceleration();// 0x39e6e3fee041
	float GetMaxAcceleration();// 0x39e5e3fee041
	Vector GetLastUpdateVelocity();// 0x39e4e3fee041
	Rotator GetLastUpdateRotation();// 0x39e3e3fee041
	Vector GetLastUpdateLocation();// 0x39e2e3fee041
	Vector GetImpartedMovementBaseVelocity();// 0x39e1e3fee041
	Vector GetCurrentAcceleration();// 0x39e0e3fee041
	Character* GetCharacterOwner();// 0x39dfe3fee041
	float GetAnalogInputModifier();// 0x39dee3fee041
	void DisableMovement();// 0x39dde3fee041
	void ClearAccumulatedForces();// 0x39dce3fee041
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x39dbe3fee041
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x39dae3fee041
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x39d9e3fee041
	void AddForce(Vector Force);// 0x39d8e3fee041

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x138, Size: 0x8]
	Vector K2_GetInputVector();// 0x39d7e3fee041
	bool IsMoveInputIgnored();// 0x39d6e3fee041
	Vector GetPendingInputVector();// 0x39d5e3fee041
	Pawn* GetPawnOwner();// 0x39d4e3fee041
	Vector GetLastInputVector();// 0x39d3e3fee041
	Vector ConsumeInputVector();// 0x39d2e3fee041
	void AddInputVector(Vector WorldVector, bool bForce);// 0x39d1e3fee041

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf8, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x128, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12c, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12c, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x12d, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x130, Size: 0x8]
	void StopMovementKeepPathing();// 0x39d0e3fee041
	void StopActiveMovement();// 0x39cfe3fee041
	bool IsSwimming();// 0x39cee3fee041
	bool IsMovingOnGround();// 0x39cde3fee041
	bool IsFlying();// 0x39cce3fee041
	bool IsFalling();// 0x39cbe3fee041
	bool IsCrouching();// 0x39cae3fee041

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb8, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xc0, Size: 0x8]
	Vector Velocity;//[Offset: 0xcc, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0xd8, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0xe4, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf0, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf0, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf0, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf0, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xf3, Size: 0x1]
	void StopMovementImmediately();// 0x13bde3fee041
	void SnapUpdatedComponentToPlane();// 0x13bce3fee041
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x13bbe3fee041
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x13bae3fee041
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x13b9e3fee041
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x13b8e3fee041
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x13b7e3fee041
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x13b6e3fee041
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x13b5e3fee041
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x13b4e3fee041
	float K2_GetModifiedMaxSpeed();// 0x13b3e3fee041
	float K2_GetMaxSpeedModifier();// 0x13b2e3fee041
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x13b1e3fee041
	Vector GetPlaneConstraintOrigin();// 0x13b0e3fee041
	Vector GetPlaneConstraintNormal();// 0x13afe3fee041
	enum GetPlaneConstraintAxisSetting();// 0x13ade3fee041
	PhysicsVolume* GetPhysicsVolume();// 0x13ace3fee041
	float GetMaxSpeed();// 0x13abe3fee041
	float GetGravityZ();// 0x13aae3fee041
	Vector ConstrainNormalToPlane(Vector Normal);// 0x13a9e3fee041
	Vector ConstrainLocationToPlane(Vector Location);// 0x13a8e3fee041
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x13a7e3fee041

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0x10, Size: 0x98]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: CharacterServerMovePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterMoveResponsePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x5c8, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x5cc, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x6b81e3fee041
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x6b80e3fee041
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x6b7fe3fee041
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x6b7ee3fee041
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x6b7de3fee041
	float GetUnscaledCapsuleRadius();// 0x6b7ce3fee041
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x6b7be3fee041
	float GetUnscaledCapsuleHalfHeight();// 0x6b7ae3fee041
	float GetShapeScale();// 0x6b79e3fee041
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x6b78e3fee041
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x6b77e3fee041
	float GetScaledCapsuleRadius();// 0x6b76e3fee041
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x6b75e3fee041
	float GetScaledCapsuleHalfHeight();// 0x6b74e3fee041

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x5b0, Size: 0x8]
	class NavAreaBase* AreaClass;//[Offset: 0x5b8, Size: 0x8]
	Color ShapeColor;//[Offset: 0x5c0, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c4, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c4, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c4, Size: 0x1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc]

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x2e0, Size: 0x8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e8, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x2ec, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f0, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x2f8, Size: 0x10]
	FName[] DebugDisplay;//[Offset: 0x310, Size: 0x10]
	FName[] ToggledDebugCategories;//[Offset: 0x320, Size: 0x10]
	Canvas* Canvas;//[Offset: 0x330, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x338, Size: 0x8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x340, Size: 0x10]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x350, Size: 0x8]
	Actor* ShowDebugTargetActor;//[Offset: 0x358, Size: 0x8]
	void ShowHUD();// 0x45a5e3fee041
	void ShowDebugToggleSubCategory(FName Category);// 0x45a4e3fee041
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x45a3e3fee041
	void ShowDebug(FName DebugType);// 0x45a2e3fee041
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x45a1e3fee041
	void RemoveAllDebugStrings();// 0x45a0e3fee041
	void ReceiveHitBoxRelease(const FName BoxName);// 0x459fe3fee041
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x459ee3fee041
	void ReceiveHitBoxClick(const FName BoxName);// 0x459de3fee041
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x459ce3fee041
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x459be3fee041
	Vector Project(Vector Location);// 0x459ae3fee041
	void PreviousDebugTarget();// 0x4599e3fee041
	void NextDebugTarget();// 0x4598e3fee041
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x4597e3fee041
	PlayerController* GetOwningPlayerController();// 0x4596e3fee041
	Pawn* GetOwningPawn();// 0x4595e3fee041
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x4594e3fee041
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x4593e3fee041
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x4592e3fee041
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x4591e3fee041
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x4590e3fee041
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x458fe3fee041
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x458ee3fee041
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x458de3fee041
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x458ce3fee041
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x458be3fee041
	void AddHitBox(Vector2D position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x458ae3fee041
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x4589e3fee041

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x6b6fe3fee041
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x6b6ee3fee041
	Vector K2_Project(Vector WorldLocation);// 0x6b6de3fee041
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x6b6ce3fee041
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x6b6be3fee041
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x6b6ae3fee041
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x6b69e3fee041
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x6b68e3fee041
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x6b67e3fee041
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x6b66e3fee041
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x6b65e3fee041
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x6b64e3fee041
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x6b63e3fee041

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc]
	FString DebugText;//[Offset: 0x20, Size: 0x10]
	float TimeRemaining;//[Offset: 0x30, Size: 0x4]
	float Duration;//[Offset: 0x34, Size: 0x4]
	Color TextColor;//[Offset: 0x38, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc]
	Font* Font;//[Offset: 0x50, Size: 0x8]
	float FontScale;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 0x1]
	uint32 Channels;//[Offset: 0x2e4, Size: 0x4]
	uint32 InRate;//[Offset: 0x2e8, Size: 0x4]
	uint32 OutRate;//[Offset: 0x2ec, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x2f4, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x2f8, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x2fc, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x300, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x304, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x308, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x30c, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x310, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x314, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x318, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x31c, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x320, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x324, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x328, Size: 0x4]
	uint32 InPackets;//[Offset: 0x32c, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x330, Size: 0x4]
	uint32 InBunches;//[Offset: 0x334, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x338, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x33c, Size: 0x4]
	uint32 InLoss;//[Offset: 0x340, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x344, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x348, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x34c, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x350, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x354, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x358, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x35c, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x360, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x364, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x368, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x36c, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x370, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x374, Size: 0x4]
	uint32 NumActors;//[Offset: 0x378, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x37c, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x380, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x384, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x388, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x38c, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x390, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x394, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x398, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x39c, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x3a0, Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x2e0, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x2e4, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x2e8, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x2ec, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x2f0, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x2f4, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x2f8, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x2fc, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x300, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x304, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x304, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x308, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x30c, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x310, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x314, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x318, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x31c, Size: 0x4]
	float MoveRepSize;//[Offset: 0x320, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x324, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x328, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x32c, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x330, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x334, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x338, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x33c, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x340, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x344, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x348, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x34c, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x350, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x354, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x358, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x360, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x364, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x368, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36d, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x370, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x374, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x378, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x37c, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 0x1]

--------------------------------
Class: IBLPrecomputedDataAsset.DataAsset.Object
	TextureCube* FilteredCubemap;//[Offset: 0x30, Size: 0x8]
	float AverageBrightness;//[Offset: 0x38, Size: 0x4]
	byte EncodeType;//[Offset: 0x3c, Size: 0x1]
	float MaxValueRGBM;//[Offset: 0x40, Size: 0x4]
	float[] IrradianceEnvironmentMapFloats;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ReflectionsDelay;//[Offset: 0x2c, Size: 0x4]
	float GainHF;//[Offset: 0x30, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x34, Size: 0x4]
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float LateDelay;//[Offset: 0x3c, Size: 0x4]
	float DecayTime;//[Offset: 0x40, Size: 0x4]
	float Density;//[Offset: 0x44, Size: 0x4]
	float Diffusion;//[Offset: 0x48, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x4c, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x50, Size: 0x4]
	float LateGain;//[Offset: 0x54, Size: 0x4]
	float Gain;//[Offset: 0x58, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool bClientNotSendClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa5, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x160, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1d0, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x1520, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1b00, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10]
	float Time;//[Offset: 0x210, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6e8, Size: 0x8]
	delegate ReliableRpcMonitorDel;//[Offset: 0x898, Size: 0x10]
	delegate UnreliableRpcMonitorDel;//[Offset: 0x8a8, Size: 0x10]
	float ReliableTriggerRate;//[Offset: 0x908, Size: 0x4]
	int ReliableMonitorThreshold;//[Offset: 0x90c, Size: 0x4]
	FName[] ReliableIngoreNames;//[Offset: 0x910, Size: 0x10]
	float UnreliableTriggerRate;//[Offset: 0x970, Size: 0x4]
	int UnreliableMonitorThreshold;//[Offset: 0x974, Size: 0x4]
	FName[] UnreliableIngoreNames;//[Offset: 0x978, Size: 0x10]

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10]
	Guid LevelBuildDataId;//[Offset: 0x1e8, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1f8, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x200, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20c, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20c, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20c, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x280, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x290, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x2b0, Size: 0x10]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x5c8, Size: 0x8]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x705de3fee041
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x705ce3fee041
	bool RemoteEvent(FName EventName);// 0x705be3fee041
	void LevelReset();// 0x705ae3fee041

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2e8, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x2f0, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x2f8, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x5b0, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b8, Size: 0x1]
	float ScreenSize;//[Offset: 0x5bc, Size: 0x4]
	float U;//[Offset: 0x5c0, Size: 0x4]
	float UL;//[Offset: 0x5c4, Size: 0x4]
	float V;//[Offset: 0x5c8, Size: 0x4]
	float VL;//[Offset: 0x5cc, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x6ae4e3fee041
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x6ae3e3fee041
	void SetSprite(Texture2D* NewSprite);// 0x6ae2e3fee041

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4]
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xe8, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0xf8, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x108, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x118, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x128, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 0x8]
	bool ShouldBeLoaded();// 0x706be3fee041
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x706ae3fee041
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x7069e3fee041
	void SetPriority(int NewPriority);// 0x7068e3fee041
	void SetLevelLODIndex(int LODIndex);// 0x7067e3fee041
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);// 0x7066e3fee041
	bool IsStreamingStatePending();// 0x7065e3fee041
	bool IsLevelVisible();// 0x7064e3fee041
	bool IsLevelLoaded();// 0x7063e3fee041
	FName GetWorldAssetPackageFName();// 0x7062e3fee041
	Level* GetLoadedLevel();// 0x7061e3fee041
	LevelScriptActor* GetLevelScriptActor();// 0x7060e3fee041
	bool GetIsRequestingUnloadAndRemoval();// 0x705fe3fee041
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x705ee3fee041

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FString[] StreamingLevelFilterStrings;//[Offset: 0x318, Size: 0x10]
	FString[] StreamingLevelIgnoreStrings;//[Offset: 0x328, Size: 0x10]
	bool bExcludeWorldComposition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	FName[] StreamingLevelNames;//[Offset: 0x340, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x350, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x351, Size: 0x1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreaming*[] StreamingLevels;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0xa80, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xc2c, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xc50, Size: 0x10]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xc68, Size: 0x10]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x38, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x6ae1e3fee041
	int GetObjectCount();// 0x6ae0e3fee041
	int GetNewAvoidanceUID();// 0x6adfe3fee041
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x6adee3fee041

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	delegate OnPawnControllerChangedDelegates;//[Offset: 0x78, Size: 0x10]
	void ReceiveShutdown();// 0x1447e3fee041
	void ReceiveInit();// 0x1446e3fee041
	void HandleTravelError(byte FailureType);// 0x1444e3fee041
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x1442e3fee041
	void DebugRemovePlayer(int ControllerId);// 0x1441e3fee041
	void DebugCreatePlayer(int ControllerId);// 0x1440e3fee041

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x34, Size: 0x4]
	float WarmupTime;//[Offset: 0x38, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x3c, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4]
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4]
	float[] LODDistances;//[Offset: 0x68, Size: 0x10]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4]
	float Delay;//[Offset: 0xa8, Size: 0x4]
	float DelayLow;//[Offset: 0xac, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1]
	byte LODMethod;//[Offset: 0xb3, Size: 0x1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 0x4]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x7092e3fee041

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4]
	uint32 PoolPrimeSize;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	byte SortMode;//[Offset: 0x5a, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10]
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4]
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1]
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc]
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4]
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8]
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float TimeBias;//[Offset: 0x4, Size: 0x4]
	float[] Values;//[Offset: 0x8, Size: 0x10]
	byte Op;//[Offset: 0x18, Size: 0x1]
	byte EntryCount;//[Offset: 0x19, Size: 0x1]
	byte EntryStride;//[Offset: 0x1a, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1]
	byte LockFlag;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30]
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x48]
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 0x48]
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 0x48]
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x5b0, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x5b8, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x5c8, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d9, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d9, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5d9, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5d9, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5d9, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5da, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5da, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5da, Size: 0x1]
	byte LODMethod;//[Offset: 0x5e5, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x5e6, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x5e8, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x5f8, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x608, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x618, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x628, Size: 0x10]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	Vector OldPosition;//[Offset: 0x63c, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x648, Size: 0xc]
	float WarmupTime;//[Offset: 0x654, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x658, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x660, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x668, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x688, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x6a0, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x6f8, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x700, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x708, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x709, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x70a, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x738, Size: 0x10]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x5c03e3fee041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x5c02e3fee041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x5c01e3fee041
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x5c00e3fee041
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x5bffe3fee041
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x5bfee3fee041
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x5bfde3fee041
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x5bfce3fee041
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x5bfbe3fee041
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x5bfae3fee041
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x5bf9e3fee041
	int GetNumActiveParticles();// 0x5bf8e3fee041
	MaterialInterface* GetNamedMaterial(FName InName);// 0x5bf7e3fee041
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x5bf6e3fee041
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x5bf5e3fee041
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x5bf4e3fee041
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x5bf3e3fee041
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x5bf2e3fee041
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x5bf1e3fee041
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x5bf0e3fee041
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x5befe3fee041
	void EndTrails();// 0x5beee3fee041
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x5bede3fee041
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x5bece3fee041

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x5a2ce3fee041
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x5a2be3fee041
	void SetIntParameter(FName ParameterName, int Param);// 0x5a2ae3fee041
	void SetFloatParameter(FName ParameterName, float Param);// 0x5a29e3fee041
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x5a28e3fee041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x5a27e3fee041
	void SetBoolParameter(FName ParameterName, bool Param);// 0x5a26e3fee041
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x5a25e3fee041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x5a24e3fee041
	void ReleaseToPool();// 0x5a23e3fee041
	FXSystemAsset* GetFXSystemAsset();// 0x5a22e3fee041

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x410, Size: 0x8]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x420, Size: 0xe8]
	void SetUserTag(FName InUserTag);// 0x6861e3fee041
	FName GetUserTag();// 0x6860e3fee041

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x68, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x80, Size: 0x10]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x6882e3fee041
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x6881e3fee041
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x6880e3fee041
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x687fe3fee041
	float GetStartTime();// 0x687ee3fee041
	float GetEndTime();// 0x687de3fee041
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x687ce3fee041
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x687be3fee041

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneCompiledData* CompiledData;//[Offset: 0x50, Size: 0x8]
	enum DefaultCompletionMode;//[Offset: 0x58, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	enum SequenceFlags;//[Offset: 0x5b, Size: 0x1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x5bc2e3fee041
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x5bc1e3fee041

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8]
	enum EvaluationType;//[Offset: 0x118, Size: 0x1]
	enum ClockSource;//[Offset: 0x119, Size: 0x1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bEvaluateTracksWhenNotSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	Guid EvaluationFieldGuid;//[Offset: 0x58, Size: 0x10]
	MovieSceneTrackEvaluationField EvaluationField;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MovieSceneTrackEvaluationField
	MovieSceneTrackEvaluationFieldEntry[] Entries;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneTrackEvaluationFieldEntry
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8]
	FrameNumberRange Range;//[Offset: 0x8, Size: 0x10]
	FrameNumber ForcedTime;//[Offset: 0x18, Size: 0x4]
	enum Flags;//[Offset: 0x1c, Size: 0x1]
	int16 LegacySortOrder;//[Offset: 0x1e, Size: 0x2]

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x2]
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 0x38]
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 0x10]
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 0x4]
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 0x4]
	int RowIndex;//[Offset: 0xa8, Size: 0x4]
	int OverlapPriority;//[Offset: 0xac, Size: 0x4]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	float StartTime;//[Offset: 0xb4, Size: 0x4]
	float EndTime;//[Offset: 0xb8, Size: 0x4]
	float PrerollTime;//[Offset: 0xbc, Size: 0x4]
	float PostrollTime;//[Offset: 0xc0, Size: 0x4]
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1]
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc6, Size: 0x2]
	void SetRowIndex(int NewRowIndex);// 0x31b8e3fee041
	void SetPreRollFrames(int InPreRollFrames);// 0x31b7e3fee041
	void SetPostRollFrames(int InPostRollFrames);// 0x31b6e3fee041
	void SetOverlapPriority(int NewPriority);// 0x31b5e3fee041
	void SetIsLocked(bool bInIsLocked);// 0x31b4e3fee041
	void SetIsActive(bool bInIsActive);// 0x31b3e3fee041
	void SetCompletionMode(enum InCompletionMode);// 0x31b2e3fee041
	void SetBlendType(enum InBlendType);// 0x31b1e3fee041
	bool IsLocked();// 0x31b0e3fee041
	bool IsActive();// 0x31afe3fee041
	int GetRowIndex();// 0x31aee3fee041
	int GetPreRollFrames();// 0x31ade3fee041
	int GetPostRollFrames();// 0x31ace3fee041
	int GetOverlapPriority();// 0x31abe3fee041
	enum GetCompletionMode();// 0x31aae3fee041
	OptionalMovieSceneBlendType GetBlendType();// 0x31a9e3fee041

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 0x1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum CompletionMode;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: MovieSceneEasingSettings
	int AutoEaseInDuration;//[Offset: 0x0, Size: 0x4]
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 0x4]
	interface class None* EaseIn;//[Offset: 0x8, Size: 0x10]
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 0x4]
	interface class None* EaseOut;//[Offset: 0x20, Size: 0x10]
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: FrameNumberRange
	FrameNumberRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FrameNumberRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FrameNumberRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	FrameNumber Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString label;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: MovieSceneCompiledData.Object
	MovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x28, Size: 0x160]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x188, Size: 0x118]
	MovieSceneEntityComponentField EntityComponentField;//[Offset: 0x2a0, Size: 0xf0]
	MovieSceneEvaluationField TrackTemplateField;//[Offset: 0x390, Size: 0x30]
	FrameTime[] DeterminismFences;//[Offset: 0x3c0, Size: 0x10]
	Guid CompiledSignature;//[Offset: 0x3d0, Size: 0x10]
	Guid CompilerVersion;//[Offset: 0x3e0, Size: 0x10]
	MovieSceneSequenceCompilerMaskStruct AccumulatedMask;//[Offset: 0x3f0, Size: 0x1]
	MovieSceneSequenceCompilerMaskStruct AllocatedMask;//[Offset: 0x3f1, Size: 0x1]
	enum AccumulatedFlags;//[Offset: 0x3f2, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	Guid SequenceSignature;//[Offset: 0xa0, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0xb0, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0xb8, Size: 0xa8]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneTrack* SourceTrack;//[Offset: 0x14, Size: 0x8]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0x68, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceHierarchy
	MovieSceneSequenceHierarchyNode RootNode;//[Offset: 0x0, Size: 0x18]
	MovieSceneSubSequenceTree Tree;//[Offset: 0x18, Size: 0x60]
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x78, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSubSequenceTree

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0x20]
	FrameRate TickResolution;//[Offset: 0x38, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 0x10]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 0x10]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 0x10]
	int16 HierarchicalBias;//[Offset: 0x94, Size: 0x2]
	bool bHasHierarchicalEasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 0x20]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4]
	FrameNumber End;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneEntityComponentField
	MovieSceneEvaluationFieldEntityTree PersistentEntityTree;//[Offset: 0x0, Size: 0x60]
	MovieSceneEvaluationFieldEntityTree OneShotEntityTree;//[Offset: 0x60, Size: 0x60]
	MovieSceneEvaluationFieldEntity[] Entities;//[Offset: 0xc0, Size: 0x10]
	MovieSceneEvaluationFieldEntityMetaData[] EntityMetaData;//[Offset: 0xd0, Size: 0x10]
	MovieSceneEvaluationFieldSharedEntityMetaData[] SharedMetaData;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationFieldEntityTree

--------------------------------
Class: MovieSceneEvaluationFieldEntity
	MovieSceneEvaluationFieldEntityKey Key;//[Offset: 0x0, Size: 0xc]
	int SharedMetaDataIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldEntityKey
	Object* EntityOwner;//[Offset: 0x0, Size: 0x8]
	uint32 EntityID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldEntityMetaData
	FrameNumber ForcedTime;//[Offset: 0x0, Size: 0x4]
	enum Flags;//[Offset: 0x8, Size: 0x1]
	bool bEvaluateInSequencePreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bEvaluateInSequencePostRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationFieldSharedEntityMetaData
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneFieldEntry_EvaluationTrack[] TrackLUT;//[Offset: 0x10, Size: 0x10]
	MovieSceneFieldEntry_ChildTemplate[] SectionLUT;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int NumInitPtrs;//[Offset: 0x0, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneFieldEntry_EvaluationTrack
	MovieSceneEvaluationFieldTrackPtr TrackPtr;//[Offset: 0x0, Size: 0x8]
	uint16 NumChildren;//[Offset: 0x8, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneFieldEntry_ChildTemplate
	uint16 ChildIndex;//[Offset: 0x0, Size: 0x2]
	enum Flags;//[Offset: 0x2, Size: 0x1]
	FrameNumber ForcedTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceCompilerMaskStruct
	bool bHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvaluationTemplate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluationTemplateField;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEntityComponentField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	MovieSceneSequence* WeakRootSequence;//[Offset: 0x0, Size: 0x8]
	MovieSceneCompiledDataManager* CompiledDataManager;//[Offset: 0x8, Size: 0x8]
	MovieSceneEntitySystemLinker* EntitySystemLinker;//[Offset: 0x18, Size: 0x8]
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x90, Size: 0x50]

--------------------------------
Class: MovieSceneCompiledDataManager.Object
	<int,MovieSceneSequenceHierarchy> Hierarchies;//[Offset: 0xd8, Size: 0x50]
	<int,MovieSceneEvaluationTemplate> TrackTemplates;//[Offset: 0x128, Size: 0x50]
	<int,MovieSceneEvaluationField> TrackTemplateFields;//[Offset: 0x178, Size: 0x50]
	<int,MovieSceneEntityComponentField> EntityComponentFields;//[Offset: 0x1c8, Size: 0x50]

--------------------------------
Class: MovieSceneEntitySystemLinker.Object
	MovieSceneEntitySystemGraph SystemGraph;//[Offset: 0x238, Size: 0x138]

--------------------------------
Class: MovieSceneEntitySystemGraph
	MovieSceneEntitySystemGraphNodes Nodes;//[Offset: 0x80, Size: 0x38]

--------------------------------
Class: MovieSceneEntitySystemGraphNodes

--------------------------------
Class: UMGSequenceTickManager.Object
	<UserWidget*> WeakUserWidgets;//[Offset: 0x28, Size: 0x50]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]
	LazyLoadBinding[] LazyLoadBindings;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: LazyLoadBinding
	FString Name;//[Offset: 0x0, Size: 0x10]
	PanelSlot* PanelSlot;//[Offset: 0x10, Size: 0x8]
	enum Visibility;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x67d9e3fee041
	void Dragged(out const PointerEvent PointerEvent);// 0x67d8e3fee041
	void DragCancelled(out const PointerEvent PointerEvent);// 0x67d7e3fee041

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x2e0, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x2e8, Size: 0x8]
	float DefaultFOV;//[Offset: 0x2f8, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x300, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x308, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x350, Size: 0x6b0]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0xa00, Size: 0x6b0]
	TViewTarget ViewTarget;//[Offset: 0x10b0, Size: 0x6c0]
	TViewTarget PendingViewTarget;//[Offset: 0x1770, Size: 0x6c0]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1e60, Size: 0x6b0]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2510, Size: 0x6b0]
	CameraModifier*[] ModifierList;//[Offset: 0x2bc0, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2bd0, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x2be0, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x2be4, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x2bf0, Size: 0xc]
	delegate OnAudioFadeChangeEvent;//[Offset: 0x2c00, Size: 0x10]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2c20, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2c30, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2c38, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2c78, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2c98, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2ca8, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x2cb8, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc0, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc0, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2cc0, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2cc0, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cc1, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x2cc4, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2cc8, Size: 0x4]
	float ViewYawMin;//[Offset: 0x2ccc, Size: 0x4]
	float ViewYawMax;//[Offset: 0x2cd0, Size: 0x4]
	float ViewRollMin;//[Offset: 0x2cd4, Size: 0x4]
	float ViewRollMax;//[Offset: 0x2cd8, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x2ce0, Size: 0x4]
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();// 0x4ccfe3fee041
	void StopCameraShake(CameraShakeBase* ShakeInstance, bool bImmediately);// 0x4ccee3fee041
	void StopCameraFade();// 0x4ccde3fee041
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x4ccce3fee041
	void StopAllInstancesOfCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x4ccbe3fee041
	void StopAllInstancesOfCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x4ccae3fee041
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x4cc9e3fee041
	void StopAllCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x4cc8e3fee041
	void StopAllCameraShakes(bool bImmediately);// 0x4cc7e3fee041
	void StopAllCameraAnims(bool bImmediate);// 0x4cc6e3fee041
	MatineeCameraShake* StartMatineeCameraShakeFromSource(class MatineeCameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x4cc5e3fee041
	MatineeCameraShake* StartMatineeCameraShake(class MatineeCameraShake ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x4cc4e3fee041
	CameraShakeBase* StartCameraShakeFromSource(class CameraShakeBase ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x4cc3e3fee041
	CameraShakeBase* StartCameraShake(class CameraShakeBase ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x4cc2e3fee041
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x4cc1e3fee041
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x4cc0e3fee041
	void SetGameCameraCutThisFrame();// 0x4cbfe3fee041
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x4cbee3fee041
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x4cbde3fee041
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x4cbce3fee041
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x4cbbe3fee041
	void OnPhotographySessionStart();// 0x4cbae3fee041
	void OnPhotographySessionEnd();// 0x4cb9e3fee041
	void OnPhotographyMultiPartCaptureStart();// 0x4cb8e3fee041
	void OnPhotographyMultiPartCaptureEnd();// 0x4cb7e3fee041
	PlayerController* GetOwningPlayerController();// 0x4cb6e3fee041
	float GetFOVAngle();// 0x4cb5e3fee041
	Rotator GetCameraRotation();// 0x4cb4e3fee041
	Vector GetCameraLocation();// 0x4cb3e3fee041
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x4cb2e3fee041
	void ClearCameraLensEffects();// 0x4cb1e3fee041
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x4cb0e3fee041
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x4cafe3fee041
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x4caee3fee041

--------------------------------
Class: CameraShakeBase.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ShakeScale;//[Offset: 0x2c, Size: 0x4]
	PlayerCameraManager* CameraManager;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x6a0]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x610]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x650, Size: 0x8]
	byte FOVMode;//[Offset: 0x658, Size: 0x1]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_MobileLDRColorSaturation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_MobileLDRColorOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_MobileLDRColorGain;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_ToneCurveAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_FXExposureCompensationOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_FXExposureCompensationSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_FXExposureCompensationSecondSlope;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureFallBackEV;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFarRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_GTAOColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_FarGTAOColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionFarIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeOutRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeOutDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_GTAOFarFalloffEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_GTAOParametersEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_RayTracingAOIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_RayTracingAORadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_SkyVisibilityScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_TODGIAndSkyVisibilityScaleChangeSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_SkyVisibilityScaleFallBackMultiplier;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_ShadowReduceSpecularAOIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_MinimalIndirectLightingLuminance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_LocalTonemappingBrighterAreaIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_LocalTonemappingBrighterAreaEVDiffThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_LocalTonemappingDarkerAreaIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_LocalTonemappingDarkerAreaEVDiffThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_LocalTonemappingSceneEVOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_LocalTonemappingMinSkyVisibility;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_UABlurScopeRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_UABlurScopeThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bOverride_UABlurCircle;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	bool bOverride_UABlurOptimal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a, Size: 0x1]
	byte BloomMethod;//[Offset: 0x1b, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x1c, Size: 0x1]
	float WhiteTemp;//[Offset: 0x20, Size: 0x4]
	float WhiteTint;//[Offset: 0x24, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 0x10]
	Vector4 MobileLDRColorSaturation;//[Offset: 0x80, Size: 0x10]
	Vector4 MobileLDRColorGain;//[Offset: 0x90, Size: 0x10]
	Vector4 MobileLDRColorOffset;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x160, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x170, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x180, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x190, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x1a0, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x1a4, Size: 0x4]
	float BlueCorrection;//[Offset: 0x1a8, Size: 0x4]
	float ExpandGamut;//[Offset: 0x1ac, Size: 0x4]
	float ToneCurveAmount;//[Offset: 0x1b0, Size: 0x4]
	float FilmSlope;//[Offset: 0x1b4, Size: 0x4]
	float FilmToe;//[Offset: 0x1b8, Size: 0x4]
	float FilmShoulder;//[Offset: 0x1bc, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x1c0, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x1c4, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x1c8, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1d8, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1e8, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1ec, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1f0, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1f4, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x204, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x214, Size: 0x10]
	float FilmContrast;//[Offset: 0x224, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x228, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x22c, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x230, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x234, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x244, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x248, Size: 0x4]
	float BloomIntensity;//[Offset: 0x24c, Size: 0x4]
	float BloomThreshold;//[Offset: 0x250, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x254, Size: 0x4]
	float Bloom1Size;//[Offset: 0x258, Size: 0x4]
	float Bloom2Size;//[Offset: 0x25c, Size: 0x4]
	float Bloom3Size;//[Offset: 0x260, Size: 0x4]
	float Bloom4Size;//[Offset: 0x264, Size: 0x4]
	float Bloom5Size;//[Offset: 0x268, Size: 0x4]
	float Bloom6Size;//[Offset: 0x26c, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x270, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x280, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x290, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x2a0, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x2b0, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x2c0, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2d0, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2d8, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2e0, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2e8, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2ec, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2f0, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2f4, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x2f8, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x300, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x304, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x314, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x324, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x328, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x330, Size: 0x4]
	float CameraISO;//[Offset: 0x334, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x338, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x33c, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x340, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x344, Size: 0x4]
	float AutoExposureBiasBackup;//[Offset: 0x348, Size: 0x4]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34c, Size: 0x1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34c, Size: 0x1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x350, Size: 0x8]
	Texture* AutoExposureMeterMask;//[Offset: 0x358, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x360, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x364, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x368, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x36c, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x370, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x374, Size: 0x4]
	float FXExposureCompensationOffset;//[Offset: 0x378, Size: 0x4]
	float FXExposureCompensationSlope;//[Offset: 0x37c, Size: 0x4]
	float FXExposureCompensationSecondSlope;//[Offset: 0x380, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x384, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x388, Size: 0x4]
	float AutoExposureFallBackEV;//[Offset: 0x38c, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x390, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x394, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x398, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x3a8, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x3ac, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x3b0, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x3b8, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x438, Size: 0x4]
	float GrainJitter;//[Offset: 0x43c, Size: 0x4]
	float GrainIntensity;//[Offset: 0x440, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x444, Size: 0x4]
	float AmbientOcclusionFarIntensity;//[Offset: 0x448, Size: 0x4]
	float AmbientOcclusionFadeOutRadius;//[Offset: 0x44c, Size: 0x4]
	float AmbientOcclusionFadeOutDistance;//[Offset: 0x450, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x454, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x458, Size: 0x4]
	float AmbientOcclusionFarRadius;//[Offset: 0x45c, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x464, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x468, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x46c, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x470, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x474, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x478, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x47c, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x480, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x484, Size: 0x4]
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x488, Size: 0x4]
	LinearColor GTAOColor;//[Offset: 0x48c, Size: 0x10]
	LinearColor FarGTAOColor;//[Offset: 0x49c, Size: 0x10]
	bool EnableGTAOParameters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4ac, Size: 0x1]
	bool GTAOCombined;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4ac, Size: 0x1]
	bool GTAODownsample;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4ac, Size: 0x1]
	float GTAOFalloffEnd;//[Offset: 0x4b0, Size: 0x4]
	float GTAOFalloffStartRatio;//[Offset: 0x4b4, Size: 0x4]
	float GTAOFarFalloffEnd;//[Offset: 0x4b8, Size: 0x4]
	int GTAOFilterWidth;//[Offset: 0x4bc, Size: 0x4]
	float GTAONumAngles;//[Offset: 0x4c0, Size: 0x4]
	bool GTAOPauseJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c4, Size: 0x1]
	bool GTAOSpatialFilter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c4, Size: 0x1]
	bool GTAOTemporalFilter;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c4, Size: 0x1]
	float GTAOThicknessBlend;//[Offset: 0x4c8, Size: 0x4]
	bool GTAOUpsample;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4cc, Size: 0x1]
	bool GTAOUseNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4cc, Size: 0x1]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4cc, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x4d0, Size: 0x4]
	float RayTracingAOIntensity;//[Offset: 0x4d4, Size: 0x4]
	float RayTracingAORadius;//[Offset: 0x4d8, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x4dc, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x4ec, Size: 0x4]
	float SkyVisibilityScale;//[Offset: 0x4f0, Size: 0x4]
	float TODGIAndSkyVisibilityScaleChangeSpeed;//[Offset: 0x4f4, Size: 0x4]
	float SkyVisibilityScaleFallBackMultiplier;//[Offset: 0x4f8, Size: 0x4]
	float ShadowReduceSpecularAOIntensity;//[Offset: 0x4fc, Size: 0x4]
	float MinimalIndirectLightingLuminance;//[Offset: 0x500, Size: 0x4]
	float LocalTonemappingBrighterAreaIntensity;//[Offset: 0x504, Size: 0x4]
	float LocalTonemappingBrighterAreaEVDiffThreshold;//[Offset: 0x508, Size: 0x4]
	float LocalTonemappingDarkerAreaIntensity;//[Offset: 0x50c, Size: 0x4]
	float LocalTonemappingDarkerAreaEVDiffThreshold;//[Offset: 0x510, Size: 0x4]
	float LocalTonemappingSceneEVOffset;//[Offset: 0x514, Size: 0x4]
	float LocalTonemappingMinSkyVisibility;//[Offset: 0x518, Size: 0x4]
	enum RayTracingGIType;//[Offset: 0x51c, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x520, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x524, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x528, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x530, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x538, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x53c, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x540, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x544, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x548, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x54c, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x550, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x554, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x558, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x55c, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x560, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x564, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x568, Size: 0x4]
	float UABlurScopeRadius;//[Offset: 0x56c, Size: 0x4]
	float UABlurScopeThreshold;//[Offset: 0x570, Size: 0x4]
	bool bUABlurCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x574, Size: 0x1]
	bool bUABlurOptimal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x574, Size: 0x1]
	float MotionBlurAmount;//[Offset: 0x578, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x57c, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x580, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x584, Size: 0x4]
	float LPVIntensity;//[Offset: 0x588, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x58c, Size: 0x4]
	float LPVSize;//[Offset: 0x590, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x594, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x598, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x59c, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x5a0, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x5a4, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x5a8, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x5ac, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x5b0, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x5b4, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x5b8, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x5bc, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x5c0, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x5c4, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x5c8, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x5cc, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x5d0, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x5d4, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x5d8, Size: 0x1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d9, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x5da, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x5dc, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x5e0, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x5e4, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x5e8, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e9, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x5ec, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x5f0, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x5f4, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x5f8, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x5fc, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x600, Size: 0x10]

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x6a0]
	PlayerState* PlayerState;//[Offset: 0x6b0, Size: 0x8]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	enum PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x6b57e3fee041
	void SetScale(float NewDuration);// 0x6b56e3fee041
	void SetDuration(float NewDuration);// 0x6b55e3fee041

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x610]
	float BasePostProcessBlendWeight;//[Offset: 0x670, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x6b5de3fee041
	Actor* GetViewTarget();// 0x6b5ce3fee041
	void EnableModifier();// 0x6b5be3fee041
	void DisableModifier(bool bImmediate);// 0x6b5ae3fee041
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x6b59e3fee041
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x6b58e3fee041

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x202, Size: 0x1]
	float InnerAttenuationRadius;//[Offset: 0x204, Size: 0x4]
	float OuterAttenuationRadius;//[Offset: 0x208, Size: 0x4]
	class CameraShakeBase* CameraShake;//[Offset: 0x210, Size: 0x8]
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	void StopAllCameraShakesOfType(class CameraShakeBase InCameraShake, bool bImmediately);// 0x6b62e3fee041
	void StopAllCameraShakes(bool bImmediately);// 0x6b61e3fee041
	void StartCameraShake(class CameraShakeBase InCameraShake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x6b60e3fee041
	void Start();// 0x6b5fe3fee041
	float GetAttenuationFactor(out const Vector Location);// 0x6b5ee3fee041

--------------------------------
Class: MatineeCameraShake.CameraShakeBase.Object
	float OscillationDuration;//[Offset: 0x98, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x9c, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0xa0, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0xa4, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0xc8, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0xec, Size: 0xc]
	float AnimPlayRate;//[Offset: 0xf8, Size: 0x4]
	float AnimScale;//[Offset: 0xfc, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x100, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x104, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x108, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0x110, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1]
	float OscillatorTimeRemaining;//[Offset: 0x11c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x120, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x38f7e3fee041
	void ReceivePlayShake(float Scale);// 0x38f6e3fee041
	bool ReceiveIsFinished();// 0x38f5e3fee041
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x38f4e3fee041

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x330, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x338, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x340, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x350, Size: 0x30]
	float BaseFOV;//[Offset: 0x380, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x384, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x384, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x388, Size: 0x10]
	float DistFromCamera;//[Offset: 0x398, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x2e0, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e8, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x2f0, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x300, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x310, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x320, Size: 0x10]
	void ToggleActive();// 0x6c35e3fee041
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x6c34e3fee041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x6c33e3fee041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x6c32e3fee041
	void SetFloatParameter(FName ParameterName, float Param);// 0x6c31e3fee041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x6c30e3fee041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x6c2fe3fee041
	void OnRep_bCurrentlyActive();// 0x6c2ee3fee041
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x6c2de3fee041
	bool IsActive();// 0x6c2ce3fee041
	void Deactivate();// 0x6c2be3fee041
	void Activate();// 0x6c2ae3fee041

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShakeBase,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShakeBase* ShakeInstance;//[Offset: 0x0, Size: 0x8]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PooledCameraShakes
	CameraShakeBase*[] PooledShakes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x2e0, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x2e8, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x2f0, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 0x1]
	float AspectRatio;//[Offset: 0x304, Size: 0x4]
	float FOVAngle;//[Offset: 0x308, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x30c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x310, Size: 0x610]
	int GetAutoActivatePlayerIndex();// 0x68e7e3fee041

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x204, Size: 0x4]
	float OrthoWidth;//[Offset: 0x208, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x20c, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x210, Size: 0x4]
	float AspectRatio;//[Offset: 0x214, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x218, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x219, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x250, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x280, Size: 0x610]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x68f5e3fee041
	void SetProjectionMode(byte InProjectionMode);// 0x68f4e3fee041
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x68f3e3fee041
	void SetOrthoWidth(float InOrthoWidth);// 0x68f2e3fee041
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x68f1e3fee041
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x68f0e3fee041
	void SetFieldOfView(float InFieldOfView);// 0x68efe3fee041
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x68eee3fee041
	void SetAspectRatio(float InAspectRatio);// 0x68ede3fee041
	void RemoveBlendable(interface classNone InBlendableObject);// 0x68ece3fee041
	void OnCameraMeshHiddenChanged();// 0x68ebe3fee041
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x68eae3fee041
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x68e9e3fee041

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x128, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x6cb2e3fee041
	bool WasControllerKeyJustPressed(Key Key);// 0x6cb1e3fee041
	bool IsControllerKeyDown(Key Key);// 0x6cb0e3fee041
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x6cafe3fee041
	Vector GetControllerVectorKeyState(Key Key);// 0x6caee3fee041
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x6cade3fee041
	float GetControllerKeyTimeDown(Key Key);// 0x6cace3fee041
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x6cabe3fee041
	float GetControllerAnalogKeyState(Key Key);// 0x6caae3fee041

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x4adae3fee041
	void SetBind(FName BindName, FString Command);// 0x4ad9e3fee041
	void PreviewPinyin();// 0x4ad8e3fee041
	void PreviewLanguage(FString InLanguage);// 0x4ad7e3fee041
	void PreviewEnglish();// 0x4ad6e3fee041
	void PreviewChinese();// 0x4ad5e3fee041
	void InvertAxisKey(const Key AxisKey);// 0x4ad4e3fee041
	void InvertAxis(const FName AxisName);// 0x4ad3e3fee041
	void ClearSmoothing();// 0x4ad2e3fee041

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x6bb8e3fee041
	void ViewSelf();// 0x6bb7e3fee041
	void ViewPlayer(FString S);// 0x6bb6e3fee041
	void ViewClass(class Actor DesiredClass);// 0x6bb5e3fee041
	void ViewActor(FName ActorName);// 0x6bb4e3fee041
	void UpdateSafeArea();// 0x6bb3e3fee041
	void ToggleServerStatReplicatorUpdateStatNet();// 0x6bb2e3fee041
	void ToggleServerStatReplicatorClientOverwrite();// 0x6bb1e3fee041
	void ToggleDebugCamera();// 0x6bb0e3fee041
	void ToggleAILogging();// 0x6bafe3fee041
	void TestCollisionDistance();// 0x6baee3fee041
	void Teleport();// 0x6bade3fee041
	void Summon(FString ClassName);// 0x6bace3fee041
	void StreamLevelOut(FName PackageName);// 0x6babe3fee041
	void StreamLevelIn(FName PackageName);// 0x6baae3fee041
	void SpawnServerStatReplicator();// 0x6ba9e3fee041
	void Slomo(float NewTimeDilation);// 0x6ba8e3fee041
	void SetWorldOrigin();// 0x6ba7e3fee041
	void SetMouseSensitivityToDefault();// 0x6ba6e3fee041
	void ServerToggleAILogging();// 0x6ba5e3fee041
	void ReceiveInitCheatManager();// 0x6ba4e3fee041
	void ReceiveEndPlay();// 0x6ba3e3fee041
	void PlayersOnly();// 0x6ba2e3fee041
	void OnlyLoadLevel(FName PackageName);// 0x6ba1e3fee041
	void LogLoc();// 0x6ba0e3fee041
	void InvertMouse();// 0x6b9fe3fee041
	void God();// 0x6b9ee3fee041
	void Ghost();// 0x6b9de3fee041
	void FreezeFrame(float Delay);// 0x6b9ce3fee041
	void Fly();// 0x6b9be3fee041
	void FlushLog();// 0x6b9ae3fee041
	void EnableDebugCamera();// 0x6b99e3fee041
	void DumpVoiceMutingState();// 0x6b98e3fee041
	void DumpPartyState();// 0x6b97e3fee041
	void DumpOnlineSessionState();// 0x6b96e3fee041
	void DumpChatState();// 0x6b95e3fee041
	void DisableDebugCamera();// 0x6b94e3fee041
	void DestroyTarget();// 0x6b93e3fee041
	void DestroyServerStatReplicator();// 0x6b92e3fee041
	void DestroyPawns(class Pawn aClass);// 0x6b91e3fee041
	void DestroyAllPawnsExceptTarget();// 0x6b90e3fee041
	void DestroyAll(class Actor aClass);// 0x6b8fe3fee041
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x6b8ee3fee041
	void DebugCapsuleSweepPawn();// 0x6b8de3fee041
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x6b8ce3fee041
	void DebugCapsuleSweepClear();// 0x6b8be3fee041
	void DebugCapsuleSweepChannel(byte Channel);// 0x6b8ae3fee041
	void DebugCapsuleSweepCapture();// 0x6b89e3fee041
	void DebugCapsuleSweep();// 0x6b88e3fee041
	void DamageTarget(float DamageAmount);// 0x6b87e3fee041
	void CheatScript(FString ScriptName);// 0x6b86e3fee041
	void ChangeSize(float F);// 0x6b85e3fee041
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x6b84e3fee041
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x6b83e3fee041
	void BugIt(FString ScreenShotDescription);// 0x6b82e3fee041

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x635, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x635, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x635, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x635, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x635, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x635, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x635, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x635, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x638, Size: 0x8]
	Actor* SelectedActor;//[Offset: 0x640, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x648, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x650, Size: 0x98]
	PlayerController* OriginalControllerRef;//[Offset: 0x6e8, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x6f0, Size: 0x8]
	float SpeedScale;//[Offset: 0x6f8, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x6fc, Size: 0x4]
	float InitialAccel;//[Offset: 0x700, Size: 0x4]
	float InitialDecel;//[Offset: 0x704, Size: 0x4]
	void ToggleDisplay();// 0x6bd1e3fee041
	void ShowDebugSelectedInfo();// 0x6bd0e3fee041
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x6bcfe3fee041
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x6bcee3fee041
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x6bcde3fee041
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x6bcce3fee041
	Actor* GetSelectedActor();// 0x6bcbe3fee041

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x5b0, Size: 0x4]
	float FrustumAngle;//[Offset: 0x5b4, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x5b8, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x5bc, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x5c0, Size: 0x4]
	Texture* Texture;//[Offset: 0x5c8, Size: 0x8]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x18]
	Key AltInputKey;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x208, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x210, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x218, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x6bb9e3fee041

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x2e0, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x2e8, Size: 0x8]
	float PlayRate;//[Offset: 0x2f0, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f4, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x2f8, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fc, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2fc, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2fc, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2fc, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2fc, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2fc, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2fc, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x300, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x304, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x304, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x304, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x304, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x308, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x320, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x330, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x340, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x340, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x340, Size: 0x1]
	float InterpPosition;//[Offset: 0x344, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x34c, Size: 0x1]
	delegate OnPlay;//[Offset: 0x350, Size: 0x10]
	delegate OnStop;//[Offset: 0x360, Size: 0x10]
	delegate OnPause;//[Offset: 0x370, Size: 0x10]
	void Stop();// 0x708be3fee041
	void SetPosition(float NewPosition, bool bJump);// 0x708ae3fee041
	void SetLoopingState(bool bNewLooping);// 0x7089e3fee041
	void Reverse();// 0x7088e3fee041
	void Play();// 0x7087e3fee041
	void Pause();// 0x7086e3fee041
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x7085e3fee041
	void ChangePlaybackDirection();// 0x7084e3fee041

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ActorChannel.Channel.Object
	Actor* Actor;//[Offset: 0x70, Size: 0x8]
	Object*[] CreateSubObjects;//[Offset: 0x180, Size: 0x10]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float AnimLength;//[Offset: 0x8c, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8]
	bool bUseOverrideInterpolationParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bActualUseOverrideInterpolationParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	InterpolationParameter OverrideInterpolationParam;//[Offset: 0xac, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xc4, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xc8, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xd0, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xe0, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xe8, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0xf8, Size: 0x10]
	BlendParameter BlendParameters;//[Offset: 0x108, Size: 0x20]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x168, Size: 0x1]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]

--------------------------------
Class: AimOffsetBlendSpace1D.BlendSpace1D.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: AmbientSound.Actor.Object
	AudioComponent* AudioComponent;//[Offset: 0x2e0, Size: 0x8]
	void Stop();// 0x6a8ce3fee041
	void Play(float StartTime);// 0x6a8be3fee041
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);// 0x6a8ae3fee041
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);// 0x6a89e3fee041
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);// 0x6a88e3fee041

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x208, Size: 0x8]
	AudioComponentParam[] InstanceParameters;//[Offset: 0x210, Size: 0x10]
	SoundClass* SoundClassOverride;//[Offset: 0x220, Size: 0x8]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1]
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x228, Size: 0x1]
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x228, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x228, Size: 0x1]
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x228, Size: 0x1]
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x229, Size: 0x1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x229, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22a, Size: 0x1]
	FName AudioComponentUserID;//[Offset: 0x230, Size: 0x8]
	float PitchModulationMin;//[Offset: 0x238, Size: 0x4]
	float PitchModulationMax;//[Offset: 0x23c, Size: 0x4]
	float VolumeModulationMin;//[Offset: 0x240, Size: 0x4]
	float VolumeModulationMax;//[Offset: 0x244, Size: 0x4]
	float VolumeMultiplier;//[Offset: 0x248, Size: 0x4]
	int EnvelopeFollowerAttackTime;//[Offset: 0x24c, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x250, Size: 0x4]
	float Priority;//[Offset: 0x254, Size: 0x4]
	float SubtitlePriority;//[Offset: 0x258, Size: 0x4]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x260, Size: 0x8]
	float PitchMultiplier;//[Offset: 0x268, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x26c, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x278, Size: 0x8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x280, Size: 0x3a0]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x620, Size: 0x8]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x628, Size: 0x50]
	enum AutoAttachLocationRule;//[Offset: 0x684, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x685, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x686, Size: 0x1]
	SoundModulationDefaultRoutingSettings ModulationRouting;//[Offset: 0x688, Size: 0x48]
	delegate OnAudioPlayStateChanged;//[Offset: 0x6d0, Size: 0x10]
	delegate OnAudioVirtualizationChanged;//[Offset: 0x6f8, Size: 0x10]
	delegate OnAudioFinished;//[Offset: 0x720, Size: 0x10]
	delegate OnAudioPlaybackPercent;//[Offset: 0x748, Size: 0x10]
	delegate OnAudioSingleEnvelopeValue;//[Offset: 0x770, Size: 0x10]
	delegate OnAudioMultiEnvelopeValue;//[Offset: 0x798, Size: 0x10]
	delegate OnQueueSubtitles;//[Offset: 0x7c0, Size: 0x10]
	SceneComponent* AutoAttachParent;//[Offset: 0x7d0, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x7d8, Size: 0x8]
	void StopDelayed(float DelayTime);// 0x6ad5e3fee041
	void Stop();// 0x6ad4e3fee041
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0x6ad3e3fee041
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0x6ad2e3fee041
	void SetUISound(bool bInUISound);// 0x6ad1e3fee041
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x6ad0e3fee041
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x6acfe3fee041
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x6acee3fee041
	void SetSound(SoundBase* NewSound);// 0x6acde3fee041
	void SetPitchMultiplier(float NewPitchMultiplier);// 0x6acce3fee041
	void SetPaused(bool bPause);// 0x6acbe3fee041
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x6acae3fee041
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x6ac9e3fee041
	void SetIntParameter(FName InName, int inInt);// 0x6ac8e3fee041
	void SetFloatParameter(FName InName, float InFloat);// 0x6ac7e3fee041
	void SetBoolParameter(FName InName, bool InBool);// 0x6ac6e3fee041
	void SetAudioBusSendPreEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x6ac5e3fee041
	void SetAudioBusSendPostEffect(AudioBus* AudioBus, float SourceBusSendLevel);// 0x6ac4e3fee041
	void PlayQuantized(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle, out QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum InFadeCurve);// 0x6ac3e3fee041
	void Play(float StartTime);// 0x6ac2e3fee041
	bool IsVirtualized();// 0x6ac1e3fee041
	bool IsPlaying();// 0x6ac0e3fee041
	bool HasCookedFFTData();// 0x6abfe3fee041
	bool HasCookedAmplitudeEnvelopeData();// 0x6abee3fee041
	enum GetPlayState();// 0x6abde3fee041
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0x6abce3fee041
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0x6abbe3fee041
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0x6abae3fee041
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0x6ab9e3fee041
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0x6ab8e3fee041
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const enum FadeCurve);// 0x6ab7e3fee041
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x6ab6e3fee041
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0x6ab5e3fee041
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0x6ab4e3fee041

--------------------------------
Class: AudioComponentParam
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	float FloatParam;//[Offset: 0x8, Size: 0x4]
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int IntParam;//[Offset: 0x10, Size: 0x4]
	SoundWave* SoundWaveParam;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: QuartzClockHandle.Object
	void UnsubscribeFromTimeDivision(const Object* WorldContextObject, enum InQuantizationBoundary);// 0x692fe3fee041
	void UnsubscribeFromAllTimeDivisions(const Object* WorldContextObject);// 0x692ee3fee041
	void SubscribeToQuantizationEvent(const Object* WorldContextObject, enum InQuantizationBoundary, out const delegate OnQuantizationEvent);// 0x692de3fee041
	void SubscribeToAllQuantizationEvents(const Object* WorldContextObject, out const delegate OnQuantizationEvent);// 0x692ce3fee041
	void SetTicksPerSecond(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float TicksPerSecond);// 0x692be3fee041
	void SetThirtySecondNotesPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float ThirtySecondsNotesPerMinute);// 0x692ae3fee041
	void SetSecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float SecondsPerTick);// 0x6929e3fee041
	void SetMillisecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float MillisecondsPerTick);// 0x6928e3fee041
	void SetBeatsPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float BeatsPerMinute);// 0x6927e3fee041
	void ResumeClock(const Object* WorldContextObject);// 0x6926e3fee041
	void ResetTransport(const Object* WorldContextObject, out const delegate InDelegate);// 0x6925e3fee041
	void PauseClock(const Object* WorldContextObject);// 0x6924e3fee041
	float GetTicksPerSecond(const Object* WorldContextObject);// 0x6923e3fee041
	float GetThirtySecondNotesPerMinute(const Object* WorldContextObject);// 0x6922e3fee041
	float GetSecondsPerTick(const Object* WorldContextObject);// 0x6921e3fee041
	float GetMillisecondsPerTick(const Object* WorldContextObject);// 0x6920e3fee041
	float GetBeatsPerMinute(const Object* WorldContextObject);// 0x691fe3fee041

--------------------------------
Class: QuartzQuantizationBoundary
	enum Quantization;//[Offset: 0x0, Size: 0x1]
	float Multiplier;//[Offset: 0x4, Size: 0x4]
	enum CountingReferencePoint;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundWaveSpectralDataPerSound
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 0x10]
	float PlaybackTime;//[Offset: 0x10, Size: 0x4]
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4]
	float Magnitude;//[Offset: 0x4, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeDataPerSound
	float Envelope;//[Offset: 0x0, Size: 0x4]
	float PlaybackTime;//[Offset: 0x4, Size: 0x4]
	SoundWave* SoundWave;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: AnimationSettings.DeveloperSettings.Object
	int CompressCommandletVersion;//[Offset: 0x38, Size: 0x4]
	FString[] KeyEndEffectorsMatchNameArray;//[Offset: 0x40, Size: 0x10]
	bool ForceRecompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bForceBelowThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bFirstRecompressUsingCurrentOrDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool bRaiseMaxErrorToExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]
	bool bEnablePerformanceLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bStripAnimationDataOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bTickAnimationOnSkeletalMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	CustomAttributeSetting[] BoneCustomAttributesNames;//[Offset: 0x58, Size: 0x10]
	FString[] BoneNamesWithCustomAttributes;//[Offset: 0x68, Size: 0x10]
	<FName,enum> AttributeBlendModes;//[Offset: 0x78, Size: 0x50]
	enum DefaultAttributeBlendMode;//[Offset: 0xc8, Size: 0x1]
	bool bEnableAnimNodeModifyBoneSkipEvaluateWhenBoneTransformUnchanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]

--------------------------------
Class: CustomAttributeSetting
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString Meaning;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AnimBlueprint.Blueprint.BlueprintCore.Object
	Skeleton* TargetSkeleton;//[Offset: 0xa8, Size: 0x8]
	AnimGroupInfo[] Groups;//[Offset: 0xb0, Size: 0x10]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: AnimGroupInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	LinearColor Color;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BlueprintGeneratedClass.Class.Struct.Field.Object
	int NumReplicatedProperties;//[Offset: 0x260, Size: 0x4]
	bool bHasNativizedParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1]
	bool bHasCookedComponentInstancingData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1]
	DynamicBlueprintBinding*[] DynamicBindingObjects;//[Offset: 0x268, Size: 0x10]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x278, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x288, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x298, Size: 0x10]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x2a8, Size: 0x8]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x2b0, Size: 0x8]
	StructProperty* UberGraphFramePointerProperty;//[Offset: 0x2b8, Size: 0x8]
	Function* UberGraphFunction;//[Offset: 0x2c8, Size: 0x8]
	<FName,BlueprintCookedComponentInstancingData> CookedComponentInstancingData;//[Offset: 0x2d0, Size: 0x50]

--------------------------------
Class: DynamicBlueprintBinding.Object

--------------------------------
Class: AnimBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x360, Size: 0x10]
	Skeleton* TargetSkeleton;//[Offset: 0x370, Size: 0x8]
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x378, Size: 0x10]
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x388, Size: 0x50]
	FName[] SyncGroupNames;//[Offset: 0x458, Size: 0x10]
	ExposedValueHandler[] EvaluateGraphExposedInputs;//[Offset: 0x468, Size: 0x10]
	<FName,GraphAssetPlayerInformation> GraphAssetPlayerInformation;//[Offset: 0x478, Size: 0x50]
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x4c8, Size: 0x50]
	PropertyAccessLibrary PropertyAccessLibrary;//[Offset: 0x518, Size: 0xc8]

--------------------------------
Class: BakedAnimationStateMachine
	FName MachineName;//[Offset: 0x0, Size: 0x8]
	int InitialState;//[Offset: 0x8, Size: 0x4]
	BakedAnimationState[] States;//[Offset: 0x10, Size: 0x10]
	AnimationTransitionBetweenStates[] Transitions;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BakedAnimationState
	FName StateName;//[Offset: 0x0, Size: 0x8]
	BakedStateExitTransition[] Transitions;//[Offset: 0x8, Size: 0x10]
	int StateRootNodeIndex;//[Offset: 0x18, Size: 0x4]
	int StartNotify;//[Offset: 0x1c, Size: 0x4]
	int EndNotify;//[Offset: 0x20, Size: 0x4]
	int FullyBlendedNotify;//[Offset: 0x24, Size: 0x4]
	bool bIsAConduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int EntryRuleNodeIndex;//[Offset: 0x2c, Size: 0x4]
	int[] PlayerNodeIndices;//[Offset: 0x30, Size: 0x10]
	int[] LayerNodeIndices;//[Offset: 0x40, Size: 0x10]
	bool bAlwaysResetOnEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: BakedStateExitTransition
	int CanTakeDelegateIndex;//[Offset: 0x0, Size: 0x4]
	int CustomResultNodeIndex;//[Offset: 0x4, Size: 0x4]
	int TransitionIndex;//[Offset: 0x8, Size: 0x4]
	bool bDesiredTransitionReturnValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bAutomaticRemainingTimeRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	int[] PoseEvaluatorLinks;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AnimationTransitionBetweenStates.AnimationStateBase
	int PreviousState;//[Offset: 0x8, Size: 0x4]
	int NextState;//[Offset: 0xc, Size: 0x4]
	float CrossfadeDuration;//[Offset: 0x10, Size: 0x4]
	int StartNotify;//[Offset: 0x14, Size: 0x4]
	int EndNotify;//[Offset: 0x18, Size: 0x4]
	int InterruptNotify;//[Offset: 0x1c, Size: 0x4]
	enum BlendMode;//[Offset: 0x20, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x28, Size: 0x8]
	BlendProfile* BlendProfile;//[Offset: 0x30, Size: 0x8]
	byte LogicType;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: AnimationStateBase
	FName StateName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: CachedPoseIndices
	int[] OrderedSavedPoseNodeIndices;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ExposedValueHandler
	FName BoundFunction;//[Offset: 0x0, Size: 0x8]
	ExposedValueCopyRecord[] CopyRecords;//[Offset: 0x8, Size: 0x10]
	Function* Function;//[Offset: 0x18, Size: 0x8]
	FieldPathProperty ValueHandlerNodeProperty;//[Size: 0x20]

--------------------------------
Class: ExposedValueCopyRecord
	int CopyIndex;//[Offset: 0x0, Size: 0x4]
	enum PostCopyOperation;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: GraphAssetPlayerInformation
	int[] PlayerNodeIndices;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimGraphBlendOptions
	float BlendInTime;//[Offset: 0x0, Size: 0x4]
	float BlendOutTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PropertyAccessLibrary
	PropertyAccessSegment[] PathSegments;//[Offset: 0x0, Size: 0x10]
	PropertyAccessPath[] SrcPaths;//[Offset: 0x10, Size: 0x10]
	PropertyAccessPath[] DestPaths;//[Offset: 0x20, Size: 0x10]
	PropertyAccessCopyBatch CopyBatches;//[Offset: 0x30, Size: 0x10]
	PropertyAccessIndirectionChain[] SrcAccesses;//[Offset: 0x70, Size: 0x10]
	PropertyAccessIndirectionChain[] DestAccesses;//[Offset: 0x80, Size: 0x10]
	PropertyAccessIndirection[] Indirections;//[Offset: 0x90, Size: 0x10]
	int[] EventAccessIndices;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: PropertyAccessSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	Struct* Struct;//[Offset: 0x8, Size: 0x8]
	FieldPathProperty Property;//[Size: 0x20]
	Function* Function;//[Offset: 0x30, Size: 0x8]
	int ArrayIndex;//[Offset: 0x38, Size: 0x4]
	uint16 Flags;//[Offset: 0x3c, Size: 0x2]

--------------------------------
Class: PropertyAccessPath
	int PathSegmentStartIndex;//[Offset: 0x0, Size: 0x4]
	int PathSegmentCount;//[Offset: 0x4, Size: 0x4]
	bool bHasEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: PropertyAccessCopyBatch
	PropertyAccessCopy[] Copies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PropertyAccessCopy
	int AccessIndex;//[Offset: 0x0, Size: 0x4]
	int DestAccessStartIndex;//[Offset: 0x4, Size: 0x4]
	int DestAccessEndIndex;//[Offset: 0x8, Size: 0x4]
	enum Type;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: PropertyAccessIndirectionChain
	FieldPathProperty Property;//[Size: 0x20]
	int IndirectionStartIndex;//[Offset: 0x20, Size: 0x4]
	int IndirectionEndIndex;//[Offset: 0x24, Size: 0x4]
	int EventID;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: PropertyAccessIndirection
	FieldPathProperty ArrayProperty;//[Size: 0x20]
	Function* Function;//[Offset: 0x20, Size: 0x8]
	int ReturnBufferSize;//[Offset: 0x28, Size: 0x4]
	int ReturnBufferAlignment;//[Offset: 0x2c, Size: 0x4]
	int ArrayIndex;//[Offset: 0x30, Size: 0x4]
	uint32 Offset;//[Offset: 0x34, Size: 0x4]
	enum ObjectType;//[Offset: 0x38, Size: 0x1]
	enum Type;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: AnimClassData.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x30, Size: 0x10]
	Skeleton* TargetSkeleton;//[Offset: 0x40, Size: 0x8]
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x48, Size: 0x10]
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x58, Size: 0x50]
	AnimBlueprintFunction[] AnimBlueprintFunctions;//[Offset: 0xa8, Size: 0x10]
	AnimBlueprintFunctionData[] AnimBlueprintFunctionData;//[Offset: 0xb8, Size: 0x10]
	AnimNodeProperties(FieldPathProperty)[] AnimNodeProperties;//[Offset: 0xc8, Size: 0x10]
	LinkedAnimGraphNodeProperties(FieldPathProperty)[] LinkedAnimGraphNodeProperties;//[Offset: 0xe8, Size: 0x10]
	LinkedAnimLayerNodeProperties(FieldPathProperty)[] LinkedAnimLayerNodeProperties;//[Offset: 0x108, Size: 0x10]
	PreUpdateNodeProperties(FieldPathProperty)[] PreUpdateNodeProperties;//[Offset: 0x128, Size: 0x10]
	DynamicResetNodeProperties(FieldPathProperty)[] DynamicResetNodeProperties;//[Offset: 0x148, Size: 0x10]
	StateMachineNodeProperties(FieldPathProperty)[] StateMachineNodeProperties;//[Offset: 0x168, Size: 0x10]
	InitializationNodeProperties(FieldPathProperty)[] InitializationNodeProperties;//[Offset: 0x188, Size: 0x10]
	<FName,GraphAssetPlayerInformation> GraphNameAssetPlayers;//[Offset: 0x1a8, Size: 0x50]
	FName[] SyncGroupNames;//[Offset: 0x1f8, Size: 0x10]
	ExposedValueHandler[] EvaluateGraphExposedInputs;//[Offset: 0x208, Size: 0x10]
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x218, Size: 0x50]
	PropertyAccessLibrary PropertyAccessLibrary;//[Offset: 0x268, Size: 0xc8]

--------------------------------
Class: AnimBlueprintFunction
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName Group;//[Offset: 0x8, Size: 0x8]
	int OutputPoseNodeIndex;//[Offset: 0x10, Size: 0x4]
	FName[] InputPoseNames;//[Offset: 0x18, Size: 0x10]
	int[] InputPoseNodeIndices;//[Offset: 0x28, Size: 0x10]
	bool bImplemented;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: AnimBlueprintFunctionData
	FieldPathProperty OutputPoseNodeProperty;//[Size: 0x20]
	InputPoseNodeProperties(FieldPathProperty)[] InputPoseNodeProperties;//[Offset: 0x20, Size: 0x10]
	InputProperties(FieldPathProperty)[] InputProperties;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AnimClassInterface.Interface.Object

--------------------------------
Class: AnimComposite.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AnimTrack AnimationTrack;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: AnimCompress.AnimBoneCompressionCodec.Object
	bool bNeedsSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	byte TranslationCompressionFormat;//[Offset: 0x39, Size: 0x1]
	byte RotationCompressionFormat;//[Offset: 0x3a, Size: 0x1]
	byte ScaleCompressionFormat;//[Offset: 0x3b, Size: 0x1]

--------------------------------
Class: AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimCompress_LeastDestructive.AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4]
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4]
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4]
	float MaxEffectorDiff;//[Offset: 0x48, Size: 0x4]
	float MinEffectorDiff;//[Offset: 0x4c, Size: 0x4]
	float EffectorDiffSocket;//[Offset: 0x50, Size: 0x4]
	float ParentKeyScale;//[Offset: 0x54, Size: 0x4]
	bool bRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bActuallyFilterLinearKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: AnimCompress_PerTrackCompression.AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxZeroingThreshold;//[Offset: 0x5c, Size: 0x4]
	float MaxPosDiffBitwise;//[Offset: 0x60, Size: 0x4]
	float MaxAngleDiffBitwise;//[Offset: 0x64, Size: 0x4]
	float MaxScaleDiffBitwise;//[Offset: 0x68, Size: 0x4]
	byte[] AllowedRotationFormats;//[Offset: 0x70, Size: 0x10]
	byte[] AllowedTranslationFormats;//[Offset: 0x80, Size: 0x10]
	byte[] AllowedScaleFormats;//[Offset: 0x90, Size: 0x10]
	bool bResampleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	float ResampledFramerate;//[Offset: 0xa4, Size: 0x4]
	int MinKeysForResampling;//[Offset: 0xa8, Size: 0x4]
	bool bUseAdaptiveError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseOverrideForEndEffectors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	int TrackHeightBias;//[Offset: 0xb0, Size: 0x4]
	float ParentingDivisor;//[Offset: 0xb4, Size: 0x4]
	float ParentingDivisorExponent;//[Offset: 0xb8, Size: 0x4]
	bool bUseAdaptiveError2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]
	float RotationErrorSourceRatio;//[Offset: 0xc0, Size: 0x4]
	float TranslationErrorSourceRatio;//[Offset: 0xc4, Size: 0x4]
	float ScaleErrorSourceRatio;//[Offset: 0xc8, Size: 0x4]
	float MaxErrorPerTrackRatio;//[Offset: 0xcc, Size: 0x4]
	float PerturbationProbeSize;//[Offset: 0xd0, Size: 0x4]

--------------------------------
Class: AnimCompress_RemoveEverySecondKey.AnimCompress.AnimBoneCompressionCodec.Object
	int MinKeys;//[Offset: 0x3c, Size: 0x4]
	bool bStartAtSecondKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: AnimCompress_RemoveTrivialKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4]
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4]
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: AnimCurveCompressionCodec_CompressedRichCurve.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_UniformIndexable.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_UniformlySampled.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimLayerInterface.Interface.Object

--------------------------------
Class: AnimNotify_PauseClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_PlayParticleEffect.AnimNotify.Object
	ParticleSystem* PSTemplate;//[Offset: 0x38, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc]
	Vector Scale;//[Offset: 0x58, Size: 0xc]
	int TranslucentSortPriority;//[Offset: 0x64, Size: 0x4]
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	FName SocketName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: AnimNotify_PlaySound.AnimNotify.Object
	SoundBase* Sound;//[Offset: 0x38, Size: 0x8]
	float VolumeMultiplier;//[Offset: 0x40, Size: 0x4]
	float PitchMultiplier;//[Offset: 0x44, Size: 0x4]
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	FName AttachName;//[Offset: 0x4c, Size: 0x8]

--------------------------------
Class: AnimNotify_ResetClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResetDynamics.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResumeClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotifyState_DisableRootMotion.AnimNotifyState.Object

--------------------------------
Class: AnimNotifyState_TimedParticleEffect.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8]
	FName SocketName;//[Offset: 0x38, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc]
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: AnimNotifyState_Trail.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8]
	FName FirstSocketName;//[Offset: 0x38, Size: 0x8]
	FName SecondSocketName;//[Offset: 0x40, Size: 0x8]
	byte WidthScaleMode;//[Offset: 0x48, Size: 0x1]
	FName WidthScaleCurve;//[Offset: 0x4c, Size: 0x8]
	bool bRecycleSpawnedSystems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	ParticleSystem* OverridePSTemplate(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x6a8fe3fee041

--------------------------------
Class: AnimSet.Object
	bool bAnimRotationOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	FName[] TrackBoneNames;//[Offset: 0x30, Size: 0x10]
	AnimSetMeshLinkup[] LinkupCache;//[Offset: 0x40, Size: 0x10]
	byte[] BoneUseAnimTranslation;//[Offset: 0x50, Size: 0x10]
	byte[] ForceUseMeshTranslation;//[Offset: 0x60, Size: 0x10]
	FName[] UseTranslationBoneNames;//[Offset: 0x70, Size: 0x10]
	FName[] ForceMeshTranslationBoneNames;//[Offset: 0x80, Size: 0x10]
	FName PreviewSkelMeshName;//[Offset: 0x90, Size: 0x8]
	FName BestRatioSkelMeshName;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: AnimSetMeshLinkup
	int[] BoneToTrackTable;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSingleNodeInstance.AnimInstance.Object
	AnimationAsset* CurrentAsset;//[Offset: 0x2b8, Size: 0x8]
	delegate PostEvaluateAnimEvent;//[Offset: 0x2c0, Size: 0x10]
	void StopAnim();// 0x6a9ce3fee041
	void SetReverse(bool bInReverse);// 0x6a9be3fee041
	void SetPreviewCurveOverride(out const FName PoseName, float Value, bool bRemoveIfZero);// 0x6a9ae3fee041
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);// 0x6a99e3fee041
	void SetPosition(float InPosition, bool bFireNotifies);// 0x6a98e3fee041
	void SetPlayRate(float InPlayRate);// 0x6a97e3fee041
	void SetPlaying(bool bIsPlaying);// 0x6a96e3fee041
	void SetLooping(bool bIsLooping);// 0x6a95e3fee041
	void SetBlendSpaceInput(out const Vector InBlendInput);// 0x6a94e3fee041
	void SetAnimationAsset(AnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);// 0x6a93e3fee041
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);// 0x6a92e3fee041
	float GetLength();// 0x6a91e3fee041
	AnimationAsset* GetAnimationAsset();// 0x6a90e3fee041

--------------------------------
Class: AnimStateMachineTypes.Object

--------------------------------
Class: AnimStreamable.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	enum Interpolation;//[Offset: 0xac, Size: 0x1]
	FName RetargetSource;//[Offset: 0xb0, Size: 0x8]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xc8, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0xd9, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1]

--------------------------------
Class: ApplicationLifecycleComponent.ActorComponent.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0xb8, Size: 0x10]
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0xc8, Size: 0x10]
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0xd8, Size: 0x10]
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0xe8, Size: 0x10]
	delegate ApplicationWillTerminateDelegate;//[Offset: 0xf8, Size: 0x10]
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x108, Size: 0x10]
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x118, Size: 0x10]
	delegate OnTemperatureChangeDelegate;//[Offset: 0x128, Size: 0x10]
	delegate OnLowPowerModeDelegate;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: PhysicsSettingsCore.DeveloperSettings.Object
	float DefaultGravityZ;//[Offset: 0x38, Size: 0x4]
	float DefaultTerminalVelocity;//[Offset: 0x3c, Size: 0x4]
	float DefaultFluidFriction;//[Offset: 0x40, Size: 0x4]
	int SimulateScratchMemorySize;//[Offset: 0x44, Size: 0x4]
	int RagdollAggregateThreshold;//[Offset: 0x48, Size: 0x4]
	float TriangleMeshTriangleMinAreaThreshold;//[Offset: 0x4c, Size: 0x4]
	bool bEnableShapeSharing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bEnablePCM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bEnableStabilization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool bWarnMissingLocks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]
	bool bEnable2DPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bDefaultHasComplexCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	float BounceThresholdVelocity;//[Offset: 0x58, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x5c, Size: 0x1]
	byte RestitutionCombineMode;//[Offset: 0x5d, Size: 0x1]
	float MaxAngularVelocity;//[Offset: 0x60, Size: 0x4]
	float MaxDepenetrationVelocity;//[Offset: 0x64, Size: 0x4]
	float ContactOffsetMultiplier;//[Offset: 0x68, Size: 0x4]
	float MinContactOffset;//[Offset: 0x6c, Size: 0x4]
	float MaxContactOffset;//[Offset: 0x70, Size: 0x4]
	bool bSimulateSkeletalMeshOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	byte DefaultShapeComplexity;//[Offset: 0x75, Size: 0x1]
	ChaosSolverConfiguration SolverOptions;//[Offset: 0x78, Size: 0x68]

--------------------------------
Class: ChaosSolverConfiguration
	int Iterations;//[Offset: 0x0, Size: 0x4]
	int CollisionPairIterations;//[Offset: 0x4, Size: 0x4]
	int PushOutIterations;//[Offset: 0x8, Size: 0x4]
	int CollisionPushOutPairIterations;//[Offset: 0xc, Size: 0x4]
	float CollisionMarginFraction;//[Offset: 0x10, Size: 0x4]
	float CollisionMarginMax;//[Offset: 0x14, Size: 0x4]
	float CollisionCullDistance;//[Offset: 0x18, Size: 0x4]
	int JointPairIterations;//[Offset: 0x1c, Size: 0x4]
	int JointPushOutPairIterations;//[Offset: 0x20, Size: 0x4]
	float ClusterConnectionFactor;//[Offset: 0x24, Size: 0x4]
	enum ClusterUnionConnectionType;//[Offset: 0x28, Size: 0x1]
	bool bGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x2c, Size: 0x10]
	bool bGenerateBreakData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x40, Size: 0x10]
	bool bGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x54, Size: 0x10]
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]

--------------------------------
Class: SolverCollisionFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float MinMass;//[Offset: 0x4, Size: 0x4]
	float MinSpeed;//[Offset: 0x8, Size: 0x4]
	float MinImpulse;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SolverBreakingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float MinMass;//[Offset: 0x4, Size: 0x4]
	float MinSpeed;//[Offset: 0x8, Size: 0x4]
	float MinVolume;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SolverTrailingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float MinMass;//[Offset: 0x4, Size: 0x4]
	float MinSpeed;//[Offset: 0x8, Size: 0x4]
	float MinVolume;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PhysicsSettings.PhysicsSettingsCore.DeveloperSettings.Object
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0xe0, Size: 0x34]
	byte LockedAxis;//[Offset: 0x114, Size: 0x1]
	byte DefaultDegreesOfFreedom;//[Offset: 0x115, Size: 0x1]
	bool bSuppressFaceRemapTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116, Size: 0x1]
	bool bSupportUVFromHitResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117, Size: 0x1]
	bool bDisableActiveActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bDisableKinematicStaticPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	bool bDisableKinematicKinematicPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1]
	bool bDisableCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1]
	bool bEnableEnhancedDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	float AnimPhysicsMinDeltaTime;//[Offset: 0x120, Size: 0x4]
	bool bSimulateAnimPhysicsAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	float MaxPhysicsDeltaTime;//[Offset: 0x128, Size: 0x4]
	bool bSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	bool bSubsteppingAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1]
	float MaxSubstepDeltaTime;//[Offset: 0x130, Size: 0x4]
	int MaxSubsteps;//[Offset: 0x134, Size: 0x4]
	float SyncSceneSmoothingFactor;//[Offset: 0x138, Size: 0x4]
	float InitialAverageFrameRate;//[Offset: 0x13c, Size: 0x4]
	int PhysXTreeRebuildRate;//[Offset: 0x140, Size: 0x4]
	PhysicalSurfaceName[] PhysicalSurfaces;//[Offset: 0x148, Size: 0x10]
	BroadphaseSettings DefaultBroadphaseSettings;//[Offset: 0x158, Size: 0x40]
	float MinDeltaVelocityForHitEvents;//[Offset: 0x198, Size: 0x4]
	ChaosPhysicsSettings ChaosSettings;//[Offset: 0x19c, Size: 0x3]

--------------------------------
Class: RigidBodyErrorCorrection
	float PingExtrapolation;//[Offset: 0x0, Size: 0x4]
	float PingLimit;//[Offset: 0x4, Size: 0x4]
	float ErrorPerLinearDifference;//[Offset: 0x8, Size: 0x4]
	float ErrorPerAngularDifference;//[Offset: 0xc, Size: 0x4]
	float MaxRestoredStateError;//[Offset: 0x10, Size: 0x4]
	float MaxLinearHardSnapDistance;//[Offset: 0x14, Size: 0x4]
	float PositionLerp;//[Offset: 0x18, Size: 0x4]
	float AngleLerp;//[Offset: 0x1c, Size: 0x4]
	float LinearVelocityCoefficient;//[Offset: 0x20, Size: 0x4]
	float AngularVelocityCoefficient;//[Offset: 0x24, Size: 0x4]
	float ErrorAccumulationSeconds;//[Offset: 0x28, Size: 0x4]
	float ErrorAccumulationDistanceSq;//[Offset: 0x2c, Size: 0x4]
	float ErrorAccumulationSimilarity;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: PhysicalSurfaceName
	byte Type;//[Offset: 0x0, Size: 0x1]
	FName Name;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ChaosPhysicsSettings
	enum DefaultThreadingModel;//[Offset: 0x0, Size: 0x1]
	enum DedicatedThreadTickMode;//[Offset: 0x1, Size: 0x1]
	enum DedicatedThreadBufferMode;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: CollisionProfile.DeveloperSettings.Object
	CollisionResponseTemplate[] Profiles;//[Offset: 0x38, Size: 0x10]
	CustomChannelSetup[] DefaultChannelResponses;//[Offset: 0x48, Size: 0x10]
	CustomProfile[] EditProfiles;//[Offset: 0x58, Size: 0x10]
	Redirector[] ProfileRedirects;//[Offset: 0x68, Size: 0x10]
	Redirector[] CollisionChannelRedirects;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: CollisionResponseTemplate
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	bool bCanModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	FName ObjectTypeName;//[Offset: 0x2c, Size: 0x8]
	ResponseChannel[] CustomResponses;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: CustomChannelSetup
	byte Channel;//[Offset: 0x0, Size: 0x1]
	byte DefaultResponse;//[Offset: 0x1, Size: 0x1]
	bool bTraceType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bStaticObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	FName Name;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: CustomProfile
	FName Name;//[Offset: 0x0, Size: 0x8]
	ResponseChannel[] CustomResponses;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Redirector
	FName OldName;//[Offset: 0x0, Size: 0x8]
	FName NewName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x5b0, Size: 0x4]
	float ArrowSize;//[Offset: 0x5b4, Size: 0x4]
	float ArrowLength;//[Offset: 0x5b8, Size: 0x4]
	float ScreenSize;//[Offset: 0x5bc, Size: 0x4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c0, Size: 0x1]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c0, Size: 0x1]
	void SetArrowColor(LinearColor NewColor);// 0x6a9de3fee041

--------------------------------
Class: AssetExportTask.Object
	Object* Object;//[Offset: 0x28, Size: 0x8]
	Exporter* Exporter;//[Offset: 0x30, Size: 0x8]
	FString Filename;//[Offset: 0x38, Size: 0x10]
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bReplaceIdentical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bAutomated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bUseFileArchive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bWriteEmptyFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	Object*[] IgnoreObjectList;//[Offset: 0x50, Size: 0x10]
	Object* Options;//[Offset: 0x60, Size: 0x8]
	FString[] Errors;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: Exporter.Object
	class Object* SupportedClass;//[Offset: 0x28, Size: 0x8]
	Object* ExportRootScope;//[Offset: 0x30, Size: 0x8]
	FString[] FormatExtension;//[Offset: 0x38, Size: 0x10]
	FString[] FormatDescription;//[Offset: 0x48, Size: 0x10]
	int PreferredFormatIndex;//[Offset: 0x58, Size: 0x4]
	int TextIndent;//[Offset: 0x5c, Size: 0x4]
	bool bText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bSelectedOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool bForceFileOperations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	AssetExportTask* ExportTask;//[Offset: 0x68, Size: 0x8]
	bool ScriptRunAssetExportTask(AssetExportTask* Task);// 0x6c4ee3fee041
	bool RunAssetExportTasks(out const AssetExportTask*[] ExportTasks);// 0x6c4de3fee041
	bool RunAssetExportTask(AssetExportTask* Task);// 0x6c4ce3fee041

--------------------------------
Class: AssetImportData.Object

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x2c0, Size: 0x10]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 0x1]
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 0x1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	bool bHasCompletedInitialScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 0x1]
	int NumberOfSpawnedNotifications;//[Offset: 0x2dc, Size: 0x4]

--------------------------------
Class: AssetManagerSettings.DeveloperSettings.Object
	PrimaryAssetTypeInfo[] PrimaryAssetTypesToScan;//[Offset: 0x38, Size: 0x10]
	DirectoryPath[] DirectoriesToExclude;//[Offset: 0x48, Size: 0x10]
	PrimaryAssetRulesOverride[] PrimaryAssetRules;//[Offset: 0x58, Size: 0x10]
	PrimaryAssetRulesCustomOverride[] CustomPrimaryAssetRules;//[Offset: 0x68, Size: 0x10]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bShouldManagerDetermineTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool bShouldGuessTypeAndNameInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1]
	AssetManagerRedirect[] PrimaryAssetIdRedirects;//[Offset: 0x80, Size: 0x10]
	AssetManagerRedirect[] PrimaryAssetTypeRedirects;//[Offset: 0x90, Size: 0x10]
	AssetManagerRedirect[] AssetPathRedirects;//[Offset: 0xa0, Size: 0x10]
	<FName> MetaDataTagsForAssetRegistry;//[Offset: 0xb0, Size: 0x50]

--------------------------------
Class: PrimaryAssetTypeInfo
	FName PrimaryAssetType;//[Offset: 0x0, Size: 0x8]
	class Object* AssetBaseClass;//[Offset: 0x8, Size: 0x28]
	class Object* AssetBaseClassLoaded;//[Offset: 0x30, Size: 0x8]
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	DirectoryPath[] Directories;//[Offset: 0x40, Size: 0x10]
	SoftObjectPath[] SpecificAssets;//[Offset: 0x50, Size: 0x10]
	PrimaryAssetRules rules;//[Offset: 0x60, Size: 0xc]
	FString[] AssetScanPaths;//[Offset: 0x70, Size: 0x10]
	bool bIsDynamicAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int NumberOfAssets;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PrimaryAssetRules
	int Priority;//[Offset: 0x0, Size: 0x4]
	int ChunkId;//[Offset: 0x4, Size: 0x4]
	bool bApplyRecursively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum CookRule;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: PrimaryAssetRulesOverride
	PrimaryAssetId PrimaryAssetId;//[Offset: 0x0, Size: 0x10]
	PrimaryAssetRules rules;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: PrimaryAssetId
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8]
	FName PrimaryAssetName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PrimaryAssetType
	FName Name;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PrimaryAssetRulesCustomOverride
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8]
	DirectoryPath FilterDirectory;//[Offset: 0x8, Size: 0x10]
	FString FilterString;//[Offset: 0x18, Size: 0x10]
	PrimaryAssetRules rules;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: AssetManagerRedirect
	FString Old;//[Offset: 0x0, Size: 0x10]
	FString New;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AssetMappingTable.Object
	AssetMapping[] MappedAssets;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AssetMapping
	AnimationAsset* SourceAsset;//[Offset: 0x0, Size: 0x8]
	AnimationAsset* TargetAsset;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x1e28e3fee041

--------------------------------
Class: AsyncActionHandleSaveGame.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x30, Size: 0x10]
	SaveGame* SaveGameObject;//[Offset: 0x60, Size: 0x8]
	AsyncActionHandleSaveGame* AsyncSaveGameToSlot(Object* WorldContextObject, SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0x6a9fe3fee041
	AsyncActionHandleSaveGame* AsyncLoadGameFromSlot(Object* WorldContextObject, FString SlotName, const int UserIndex);// 0x6a9ee3fee041

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: AsyncActionLoadPrimaryAsset.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10]
	AsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0x6aa0e3fee041

--------------------------------
Class: AsyncActionLoadPrimaryAssetClass.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10]
	AsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0x6aa1e3fee041

--------------------------------
Class: AsyncActionLoadPrimaryAssetList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10]
	AsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0x6aa2e3fee041

--------------------------------
Class: AsyncActionLoadPrimaryAssetClassList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10]
	AsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0x6aa3e3fee041

--------------------------------
Class: AsyncActionChangePrimaryAssetBundles.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10]
	AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] AddBundles, out const FName[] RemoveBundles);// 0x6aa5e3fee041
	AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(Object* WorldContextObject, out const FName[] NewBundles, out const FName[] OldBundles);// 0x6aa4e3fee041

--------------------------------
Class: AtmosphericFog.Info.Actor.Object
	AtmosphericFogComponent* AtmosphericFogComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: AtmosphericFogComponent.SceneComponent.ActorComponent.Object
	float SunMultiplier;//[Offset: 0x204, Size: 0x4]
	float FogMultiplier;//[Offset: 0x208, Size: 0x4]
	float DensityMultiplier;//[Offset: 0x20c, Size: 0x4]
	float DensityOffset;//[Offset: 0x210, Size: 0x4]
	float DistanceScale;//[Offset: 0x214, Size: 0x4]
	float AltitudeScale;//[Offset: 0x218, Size: 0x4]
	float DistanceOffset;//[Offset: 0x21c, Size: 0x4]
	float GroundOffset;//[Offset: 0x220, Size: 0x4]
	float StartDistance;//[Offset: 0x224, Size: 0x4]
	float SunDiscScale;//[Offset: 0x228, Size: 0x4]
	float DefaultBrightness;//[Offset: 0x22c, Size: 0x4]
	Color DefaultLightColor;//[Offset: 0x230, Size: 0x4]
	bool bDisableSunDisk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1]
	bool bAtmosphereAffectsSunIlluminance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1]
	bool bDisableGroundScattering;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x234, Size: 0x1]
	AtmospherePrecomputeParameters PrecomputeParams;//[Offset: 0x238, Size: 0x2c]
	Texture2D* TransmittanceTexture;//[Offset: 0x268, Size: 0x8]
	Texture2D* IrradianceTexture;//[Offset: 0x270, Size: 0x8]
	void StartPrecompute();// 0x6ab3e3fee041
	void SetSunMultiplier(float NewSunMultiplier);// 0x6ab2e3fee041
	void SetStartDistance(float NewStartDistance);// 0x6ab1e3fee041
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);// 0x6ab0e3fee041
	void SetFogMultiplier(float NewFogMultiplier);// 0x6aafe3fee041
	void SetDistanceScale(float NewDistanceScale);// 0x6aaee3fee041
	void SetDistanceOffset(float NewDistanceOffset);// 0x6aade3fee041
	void SetDensityOffset(float NewDensityOffset);// 0x6aace3fee041
	void SetDensityMultiplier(float NewDensityMultiplier);// 0x6aabe3fee041
	void SetDefaultLightColor(LinearColor NewLightColor);// 0x6aaae3fee041
	void SetDefaultBrightness(float NewBrightness);// 0x6aa9e3fee041
	void SetAltitudeScale(float NewAltitudeScale);// 0x6aa8e3fee041
	void DisableSunDisk(bool NewSunDisk);// 0x6aa7e3fee041
	void DisableGroundScattering(bool NewGroundScattering);// 0x6aa6e3fee041

--------------------------------
Class: AtmospherePrecomputeParameters
	float DensityHeight;//[Offset: 0x0, Size: 0x4]
	float DecayHeight;//[Offset: 0x4, Size: 0x4]
	int MaxScatteringOrder;//[Offset: 0x8, Size: 0x4]
	int TransmittanceTexWidth;//[Offset: 0xc, Size: 0x4]
	int TransmittanceTexHeight;//[Offset: 0x10, Size: 0x4]
	int IrradianceTexWidth;//[Offset: 0x14, Size: 0x4]
	int IrradianceTexHeight;//[Offset: 0x18, Size: 0x4]
	int InscatterAltitudeSampleNum;//[Offset: 0x1c, Size: 0x4]
	int InscatterMuNum;//[Offset: 0x20, Size: 0x4]
	int InscatterMuSNum;//[Offset: 0x24, Size: 0x4]
	int InscatterNuNum;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: AudioSettings.DeveloperSettings.Object
	SoftObjectPath DefaultSoundClassName;//[Offset: 0x38, Size: 0x18]
	SoftObjectPath DefaultMediaSoundClassName;//[Offset: 0x50, Size: 0x18]
	SoftObjectPath DefaultSoundConcurrencyName;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath DefaultBaseSoundMix;//[Offset: 0x80, Size: 0x18]
	SoftObjectPath VoiPSoundClass;//[Offset: 0x98, Size: 0x18]
	SoftObjectPath MasterSubmix;//[Offset: 0xb0, Size: 0x18]
	SoftObjectPath ReverbSubmix;//[Offset: 0xc8, Size: 0x18]
	SoftObjectPath EQSubmix;//[Offset: 0xe0, Size: 0x18]
	enum VoiPSampleRate;//[Offset: 0xf8, Size: 0x4]
	float DefaultReverbSendLevel;//[Offset: 0xfc, Size: 0x4]
	int MaximumConcurrentStreams;//[Offset: 0x100, Size: 0x4]
	float GlobalMinPitchScale;//[Offset: 0x104, Size: 0x4]
	float GlobalMaxPitchScale;//[Offset: 0x108, Size: 0x4]
	AudioQualitySettings[] QualityLevels;//[Offset: 0x110, Size: 0x10]
	bool bAllowPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]
	bool bDisableMasterEQ;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x120, Size: 0x1]
	bool bAllowCenterChannel3DPanning;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x120, Size: 0x1]
	uint32 NumStoppingSources;//[Offset: 0x124, Size: 0x4]
	enum PanningMethod;//[Offset: 0x128, Size: 0x1]
	enum MonoChannelUpmixMethod;//[Offset: 0x129, Size: 0x1]
	FString DialogueFilenameFormat;//[Offset: 0x130, Size: 0x10]

--------------------------------
Class: AudioQualitySettings
	FText DisplayName;//[Offset: 0x0, Size: 0x18]
	int MaxChannels;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AudioVolume.Volume.Brush.Actor.Object
	float Priority;//[Offset: 0x318, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 0x1]
	ReverbSettings Settings;//[Offset: 0x320, Size: 0x20]
	InteriorSettings AmbientZoneSettings;//[Offset: 0x340, Size: 0x24]
	AudioVolumeSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x368, Size: 0x10]
	AudioVolumeSubmixOverrideSettings[] SubmixOverrideSettings;//[Offset: 0x378, Size: 0x10]
	void SetSubmixSendSettings(out const AudioVolumeSubmixSendSettings[] NewSubmixSendSettings);// 0x6adce3fee041
	void SetSubmixOverrideSettings(out const AudioVolumeSubmixOverrideSettings[] NewSubmixOverrideSettings);// 0x6adbe3fee041
	void SetReverbSettings(out const ReverbSettings NewReverbSettings);// 0x6adae3fee041
	void SetPriority(float NewPriority);// 0x6ad9e3fee041
	void SetInteriorSettings(out const InteriorSettings NewInteriorSettings);// 0x6ad8e3fee041
	void SetEnabled(bool bNewEnabled);// 0x6ad7e3fee041
	void OnRep_bEnabled();// 0x6ad6e3fee041

--------------------------------
Class: AudioVolumeSubmixSendSettings
	enum ListenerLocationState;//[Offset: 0x0, Size: 0x1]
	enum SourceLocationState;//[Offset: 0x1, Size: 0x1]
	SoundSubmixSendInfo[] SubmixSends;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AudioVolumeSubmixOverrideSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x8, Size: 0x10]
	float CrossfadeTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: AutoDestroySubsystem.WorldSubsystem.Subsystem.Object
	Actor*[] ActorsToPoll;//[Offset: 0x38, Size: 0x10]
	void OnActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x6adde3fee041

--------------------------------
Class: AutomationTestSettings.Object
	FString[] EngineTestModules;//[Offset: 0x28, Size: 0x10]
	FString[] EditorTestModules;//[Offset: 0x38, Size: 0x10]
	SoftObjectPath AutomationTestmap;//[Offset: 0x48, Size: 0x18]
	EditorMapPerformanceTestDefinition[] EditorPerformanceTestMaps;//[Offset: 0x60, Size: 0x10]
	SoftObjectPath[] AssetsToOpen;//[Offset: 0x70, Size: 0x10]
	FString[] MapsToPIETest;//[Offset: 0x80, Size: 0x10]
	BuildPromotionTestSettings BuildPromotionTest;//[Offset: 0x90, Size: 0x1f0]
	MaterialEditorPromotionSettings MaterialEditorPromotionTest;//[Offset: 0x280, Size: 0x30]
	ParticleEditorPromotionSettings ParticleEditorPromotionTest;//[Offset: 0x2b0, Size: 0x10]
	BlueprintEditorPromotionSettings BlueprintEditorPromotionTest;//[Offset: 0x2c0, Size: 0x30]
	FString[] TestLevelFolders;//[Offset: 0x2f0, Size: 0x10]
	ExternalToolDefinition[] ExternalTools;//[Offset: 0x300, Size: 0x10]
	EditorImportExportTestDefinition[] ImportExportTestDefinitions;//[Offset: 0x310, Size: 0x10]
	LaunchOnTestSettings[] LaunchOnSettings;//[Offset: 0x320, Size: 0x10]
	IntPoint DefaultScreenshotResolution;//[Offset: 0x330, Size: 0x8]
	float PIETestDuration;//[Offset: 0x338, Size: 0x4]

--------------------------------
Class: EditorMapPerformanceTestDefinition
	SoftObjectPath PerformanceTestmap;//[Offset: 0x0, Size: 0x18]
	int TestTimer;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BuildPromotionTestSettings
	FilePath DefaultStaticMeshAsset;//[Offset: 0x0, Size: 0x10]
	BuildPromotionImportWorkflowSettings ImportWorkflow;//[Offset: 0x10, Size: 0x150]
	BuildPromotionOpenAssetSettings OpenAssets;//[Offset: 0x160, Size: 0x60]
	BuildPromotionNewProjectSettings NewProjectSettings;//[Offset: 0x1c0, Size: 0x20]
	FilePath SourceControlMaterial;//[Offset: 0x1e0, Size: 0x10]

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BuildPromotionImportWorkflowSettings
	EditorImportWorkflowDefinition Diffuse;//[Offset: 0x0, Size: 0x20]
	EditorImportWorkflowDefinition Normal;//[Offset: 0x20, Size: 0x20]
	EditorImportWorkflowDefinition StaticMesh;//[Offset: 0x40, Size: 0x20]
	EditorImportWorkflowDefinition ReimportStaticMesh;//[Offset: 0x60, Size: 0x20]
	EditorImportWorkflowDefinition BlendShapeMesh;//[Offset: 0x80, Size: 0x20]
	EditorImportWorkflowDefinition MorphMesh;//[Offset: 0xa0, Size: 0x20]
	EditorImportWorkflowDefinition SkeletalMesh;//[Offset: 0xc0, Size: 0x20]
	EditorImportWorkflowDefinition Animation;//[Offset: 0xe0, Size: 0x20]
	EditorImportWorkflowDefinition Sound;//[Offset: 0x100, Size: 0x20]
	EditorImportWorkflowDefinition SurroundSound;//[Offset: 0x120, Size: 0x20]
	EditorImportWorkflowDefinition[] OtherAssetsToImport;//[Offset: 0x140, Size: 0x10]

--------------------------------
Class: EditorImportWorkflowDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10]
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ImportFactorySettingValues
	FString SettingName;//[Offset: 0x0, Size: 0x10]
	FString Value;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: BuildPromotionOpenAssetSettings
	FilePath BlueprintAsset;//[Offset: 0x0, Size: 0x10]
	FilePath MaterialAsset;//[Offset: 0x10, Size: 0x10]
	FilePath ParticleSystemAsset;//[Offset: 0x20, Size: 0x10]
	FilePath SkeletalMeshAsset;//[Offset: 0x30, Size: 0x10]
	FilePath StaticMeshAsset;//[Offset: 0x40, Size: 0x10]
	FilePath TextureAsset;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: BuildPromotionNewProjectSettings
	DirectoryPath NewProjectFolderOverride;//[Offset: 0x0, Size: 0x10]
	FString NewProjectNameOverride;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MaterialEditorPromotionSettings
	FilePath DefaultMaterialAsset;//[Offset: 0x0, Size: 0x10]
	FilePath DefaultDiffuseTexture;//[Offset: 0x10, Size: 0x10]
	FilePath DefaultNormalTexture;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ParticleEditorPromotionSettings
	FilePath DefaultParticleAsset;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BlueprintEditorPromotionSettings
	FilePath FirstMeshPath;//[Offset: 0x0, Size: 0x10]
	FilePath SecondMeshPath;//[Offset: 0x10, Size: 0x10]
	FilePath DefaultParticleAsset;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ExternalToolDefinition
	FString ToolName;//[Offset: 0x0, Size: 0x10]
	FilePath ExecutablePath;//[Offset: 0x10, Size: 0x10]
	FString CommandLineOptions;//[Offset: 0x20, Size: 0x10]
	DirectoryPath WorkingDirectory;//[Offset: 0x30, Size: 0x10]
	FString ScriptExtension;//[Offset: 0x40, Size: 0x10]
	DirectoryPath ScriptDirectory;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: EditorImportExportTestDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10]
	FString ExportFileExtension;//[Offset: 0x10, Size: 0x10]
	bool bSkipExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LaunchOnTestSettings
	FilePath LaunchOnTestmap;//[Offset: 0x0, Size: 0x10]
	FString DeviceID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: BandwidthTestActor.Actor.Object
	BandwidthTestGenerator BandwidthGenerator;//[Offset: 0x2e0, Size: 0x20]

--------------------------------
Class: BandwidthTestGenerator
	BandwidthTestItem[] ReplicatedBuffers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BandwidthTestItem
	byte[] Kilobyte;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BlendableInterface.Interface.Object

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: BlueprintExtension.Object

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: BlueprintMapLibrary.BlueprintFunctionLibrary.Object
	void SetMapPropertyByName(Object* Object, FName PropertyName, out const <int,int> Value);// 0x6aede3fee041
	void Map_Values(out const <int,int> TargetMap, out int[] Values);// 0x6aece3fee041
	bool Map_Remove(out const <int,int> TargetMap, out const int Key);// 0x6aebe3fee041
	int Map_Length(out const <int,int> TargetMap);// 0x6aeae3fee041
	void Map_Keys(out const <int,int> TargetMap, out int[] Keys);// 0x6ae9e3fee041
	bool Map_Find(out const <int,int> TargetMap, out const int Key, out int Value);// 0x6ae8e3fee041
	bool Map_Contains(out const <int,int> TargetMap, out const int Key);// 0x6ae7e3fee041
	void Map_Clear(out const <int,int> TargetMap);// 0x6ae6e3fee041
	void Map_Add(out const <int,int> TargetMap, out const int Key, out const int Value);// 0x6ae5e3fee041

--------------------------------
Class: BlueprintPathsLibrary.BlueprintFunctionLibrary.Object
	FString VideoCaptureDir();// 0x6b3fe3fee041
	void ValidatePath(FString inPath, out bool bDidSucceed, out FText OutReason);// 0x6b3ee3fee041
	void Split(FString inPath, out FString PathPart, out FString FilenamePart, out FString ExtensionPart);// 0x6b3de3fee041
	FString SourceConfigDir();// 0x6b3ce3fee041
	bool ShouldSaveToUserDir();// 0x6b3be3fee041
	FString ShaderWorkingDir();// 0x6b3ae3fee041
	void SetProjectFilePath(FString NewGameProjectFilePath);// 0x6b39e3fee041
	FString SetExtension(FString inPath, FString InNewExtension);// 0x6b38e3fee041
	FString ScreenShotDir();// 0x6b37e3fee041
	FString SandboxesDir();// 0x6b36e3fee041
	FString RootDir();// 0x6b35e3fee041
	void RemoveDuplicateSlashes(FString inPath, out FString OutPath);// 0x6b34e3fee041
	FString ProjectUserDir();// 0x6b33e3fee041
	FString ProjectSavedDir();// 0x6b32e3fee041
	FString ProjectPluginsDir();// 0x6b31e3fee041
	FString ProjectPersistentDownloadDir();// 0x6b30e3fee041
	FString ProjectModsDir();// 0x6b2fe3fee041
	FString ProjectLogDir();// 0x6b2ee3fee041
	FString ProjectIntermediateDir();// 0x6b2de3fee041
	FString ProjectDir();// 0x6b2ce3fee041
	FString ProjectContentDir();// 0x6b2be3fee041
	FString ProjectConfigDir();// 0x6b2ae3fee041
	FString ProfilingDir();// 0x6b29e3fee041
	void NormalizeFilename(FString inPath, out FString OutPath);// 0x6b28e3fee041
	void NormalizeDirectoryName(FString inPath, out FString OutPath);// 0x6b27e3fee041
	FString MakeValidFileName(FString inString, FString InReplacementChar);// 0x6b26e3fee041
	void MakeStandardFilename(FString inPath, out FString OutPath);// 0x6b25e3fee041
	void MakePlatformFilename(FString inPath, out FString OutPath);// 0x6b24e3fee041
	bool MakePathRelativeTo(FString inPath, FString InRelativeTo, out FString OutPath);// 0x6b23e3fee041
	FString LaunchDir();// 0x6b22e3fee041
	bool IsSamePath(FString PathA, FString PathB);// 0x6b21e3fee041
	bool IsRestrictedPath(FString inPath);// 0x6b20e3fee041
	bool IsRelative(FString inPath);// 0x6b1fe3fee041
	bool IsProjectFilePathSet();// 0x6b1ee3fee041
	bool IsDrive(FString inPath);// 0x6b1de3fee041
	bool HasProjectPersistentDownloadDir();// 0x6b1ce3fee041
	FString[] GetToolTipLocalizationPaths();// 0x6b1be3fee041
	FString[] GetRestrictedFolderNames();// 0x6b1ae3fee041
	FString GetRelativePathToRoot();// 0x6b19e3fee041
	FString[] GetPropertyNameLocalizationPaths();// 0x6b18e3fee041
	FString GetProjectFilePath();// 0x6b17e3fee041
	FString GetPath(FString inPath);// 0x6b16e3fee041
	FString GetInvalidFileSystemChars();// 0x6b15e3fee041
	FString[] GetGameLocalizationPaths();// 0x6b14e3fee041
	FString GetExtension(FString inPath, bool bIncludeDot);// 0x6b13e3fee041
	FString[] GetEngineLocalizationPaths();// 0x6b12e3fee041
	FString[] GetEditorLocalizationPaths();// 0x6b11e3fee041
	FString GetCleanFilename(FString inPath);// 0x6b10e3fee041
	FString GetBaseFilename(FString inPath, bool bRemovePath);// 0x6b0fe3fee041
	FString GeneratedConfigDir();// 0x6b0ee3fee041
	FString GameUserDeveloperDir();// 0x6b0de3fee041
	FString GameSourceDir();// 0x6b0ce3fee041
	FString GameDevelopersDir();// 0x6b0be3fee041
	FString GameAgnosticSavedDir();// 0x6b0ae3fee041
	bool FileExists(FString inPath);// 0x6b09e3fee041
	FString FeaturePackDir();// 0x6b08e3fee041
	FString EnterprisePluginsDir();// 0x6b07e3fee041
	FString EnterpriseFeaturePackDir();// 0x6b06e3fee041
	FString EnterpriseDir();// 0x6b05e3fee041
	FString EngineVersionAgnosticUserDir();// 0x6b04e3fee041
	FString EngineUserDir();// 0x6b03e3fee041
	FString EngineSourceDir();// 0x6b02e3fee041
	FString EngineSavedDir();// 0x6b01e3fee041
	FString EnginePluginsDir();// 0x6b00e3fee041
	FString EngineIntermediateDir();// 0x6affe3fee041
	FString EngineDir();// 0x6afee3fee041
	FString EngineContentDir();// 0x6afde3fee041
	FString EngineConfigDir();// 0x6afce3fee041
	bool DirectoryExists(FString inPath);// 0x6afbe3fee041
	FString DiffDir();// 0x6afae3fee041
	FString CreateTempFilename(FString Path, FString Prefix, FString Extension);// 0x6af9e3fee041
	FString ConvertToSandboxPath(FString inPath, FString InSandboxName);// 0x6af8e3fee041
	FString ConvertRelativePathToFull(FString inPath, FString InBasePath);// 0x6af7e3fee041
	FString ConvertFromSandboxPath(FString inPath, FString InSandboxName);// 0x6af6e3fee041
	FString Combine(out const FString[] InPaths);// 0x6af5e3fee041
	bool CollapseRelativeDirectories(FString inPath, out FString OutPath);// 0x6af4e3fee041
	FString CloudDir();// 0x6af3e3fee041
	FString ChangeExtension(FString inPath, FString InNewExtension);// 0x6af2e3fee041
	FString BugItDir();// 0x6af1e3fee041
	FString AutomationTransientDir();// 0x6af0e3fee041
	FString AutomationLogDir();// 0x6aefe3fee041
	FString AutomationDir();// 0x6aeee3fee041

--------------------------------
Class: PlatformGameInstance.GameInstance.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0x1a8, Size: 0x10]
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0x1b8, Size: 0x10]
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0x1c8, Size: 0x10]
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0x1d8, Size: 0x10]
	delegate ApplicationWillTerminateDelegate;//[Offset: 0x1e8, Size: 0x10]
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x1f8, Size: 0x10]
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x208, Size: 0x10]
	delegate ApplicationRegisteredForRemoteNotificationsDelegate;//[Offset: 0x218, Size: 0x10]
	delegate ApplicationRegisteredForUserNotificationsDelegate;//[Offset: 0x228, Size: 0x10]
	delegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;//[Offset: 0x238, Size: 0x10]
	delegate ApplicationReceivedRemoteNotificationDelegate;//[Offset: 0x248, Size: 0x10]
	delegate ApplicationReceivedLocalNotificationDelegate;//[Offset: 0x258, Size: 0x10]
	delegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;//[Offset: 0x268, Size: 0x10]

--------------------------------
Class: BlueprintPlatformLibrary.BlueprintFunctionLibrary.Object
	int ScheduleLocalNotificationFromNow(int inSecondsFromNow, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0x6b48e3fee041
	void ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, FString ActivationEvent);// 0x6b47e3fee041
	int ScheduleLocalNotificationBadgeAtTime(out const DateTime FireDateTime, bool LocalTime, FString ActivationEvent);// 0x6b46e3fee041
	int ScheduleLocalNotificationAtTime(out const DateTime FireDateTime, bool LocalTime, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0x6b45e3fee041
	void GetLaunchNotification(out bool NotificationLaunchedApp, out FString ActivationEvent, out int FireDate);// 0x6b44e3fee041
	byte GetDeviceOrientation();// 0x6b43e3fee041
	void ClearAllLocalNotifications();// 0x6b42e3fee041
	void CancelLocalNotificationById(int NotificationId);// 0x6b41e3fee041
	void CancelLocalNotification(FString ActivationEvent);// 0x6b40e3fee041

--------------------------------
Class: DateTime

--------------------------------
Class: BlueprintSetLibrary.BlueprintFunctionLibrary.Object
	void SetSetPropertyByName(Object* Object, FName PropertyName, out const <int> Value);// 0x6b54e3fee041
	void Set_Union(out const <int> A, out const <int> B, out <int> Result);// 0x6b53e3fee041
	void Set_ToArray(out const <int> A, out int[] Result);// 0x6b52e3fee041
	void Set_RemoveItems(out const <int> TargetSet, out const int[] Items);// 0x6b51e3fee041
	bool Set_Remove(out const <int> TargetSet, out const int item);// 0x6b50e3fee041
	int Set_Length(out const <int> TargetSet);// 0x6b4fe3fee041
	void Set_Intersection(out const <int> A, out const <int> B, out <int> Result);// 0x6b4ee3fee041
	void Set_Difference(out const <int> A, out const <int> B, out <int> Result);// 0x6b4de3fee041
	bool Set_Contains(out const <int> TargetSet, out const int ItemToFind);// 0x6b4ce3fee041
	void Set_Clear(out const <int> TargetSet);// 0x6b4be3fee041
	void Set_AddItems(out const <int> TargetSet, out const int[] NewItems);// 0x6b4ae3fee041
	void Set_Add(out const <int> TargetSet, out const int NewItem);// 0x6b49e3fee041

--------------------------------
Class: BoneMaskFilter.Object
	InputBlendPose[] BlendPoses;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: InputBlendPose
	BranchFilter[] BranchFilters;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BranchFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	int BlendDepth;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BookMark.BookmarkBase.Object
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]
	FString[] HiddenLevels;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BookMark2D.BookmarkBase.Object
	float Zoom2D;//[Offset: 0x28, Size: 0x4]
	IntPoint Location;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: BoundsCopyComponent.ActorComponent.Object
	Actor* BoundsSourceActor;//[Offset: 0xb8, Size: 0x28]
	bool bUseCollidingComponentsForSourceBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bKeepOwnBoundsScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	bool bUseCollidingComponentsForOwnBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1]
	Transform PostTransform;//[Offset: 0xf0, Size: 0x30]
	bool bCopyXBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool bCopyYBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	bool bCopyZBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 0x1]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x5c8, Size: 0xc]
	float LineThickness;//[Offset: 0x5d4, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x5a16e3fee041
	Vector GetUnscaledBoxExtent();// 0x5a15e3fee041
	Vector GetScaledBoxExtent();// 0x5a14e3fee041

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x208, Size: 0x8]
	enum ReflectionSourceType;//[Offset: 0x210, Size: 0x1]
	enum MobileReflectionCompression;//[Offset: 0x211, Size: 0x1]
	TextureCube* Cubemap;//[Offset: 0x218, Size: 0x8]
	IBLPrecomputedDataAsset* PrecomputedData;//[Offset: 0x220, Size: 0x8]
	float SourceCubemapAngle;//[Offset: 0x228, Size: 0x4]
	float Brightness;//[Offset: 0x22c, Size: 0x4]
	bool bModifyMaxValueRGBM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	float MaxValueRGBM;//[Offset: 0x234, Size: 0x4]
	Vector CaptureOffset;//[Offset: 0x238, Size: 0xc]
	Guid MapBuildDataId;//[Offset: 0x244, Size: 0x10]
	TextureCube* CachedEncodedHDRCubemap;//[Offset: 0x268, Size: 0x8]

--------------------------------
Class: BoxReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: BoxReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float BoxTransitionDistance;//[Offset: 0x288, Size: 0x4]
	BoxComponent* PreviewInfluenceBox;//[Offset: 0x290, Size: 0x8]
	BoxComponent* PreviewCaptureBox;//[Offset: 0x298, Size: 0x8]

--------------------------------
Class: Breakpoint.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	EdGraphNode* Node;//[Offset: 0x30, Size: 0x8]
	bool bStepOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bStepOnce_WasPreviouslyDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bStepOnce_RemoveAfterHit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: EdGraphNode.Object
	EdGraphPin_Deprecated*[] DeprecatedPins;//[Offset: 0x38, Size: 0x10]
	int NodePosX;//[Offset: 0x48, Size: 0x4]
	int NodePosY;//[Offset: 0x4c, Size: 0x4]
	int NodeWidth;//[Offset: 0x50, Size: 0x4]
	int NodeHeight;//[Offset: 0x54, Size: 0x4]
	byte AdvancedPinDisplay;//[Offset: 0x58, Size: 0x1]
	enum EnabledState;//[Offset: 0x59, Size: 0x1]
	bool bDisplayAsDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bUserSetEnabledState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bIsNodeEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1]
	bool bHasCompilerMessage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b, Size: 0x1]
	FString NodeComment;//[Offset: 0x60, Size: 0x10]
	int ErrorType;//[Offset: 0x70, Size: 0x4]
	FString ErrorMsg;//[Offset: 0x78, Size: 0x10]
	Guid NodeGuid;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: EdGraphPin_Deprecated.Object
	FString PinName;//[Offset: 0x28, Size: 0x10]
	FString PinToolTip;//[Offset: 0x38, Size: 0x10]
	byte Direction;//[Offset: 0x48, Size: 0x1]
	EdGraphPinType PinType;//[Offset: 0x50, Size: 0x58]
	FString DefaultValue;//[Offset: 0xa8, Size: 0x10]
	FString AutogeneratedDefaultValue;//[Offset: 0xb8, Size: 0x10]
	Object* DefaultObject;//[Offset: 0xc8, Size: 0x8]
	FText DefaultTextValue;//[Offset: 0xd0, Size: 0x18]
	EdGraphPin_Deprecated*[] LinkedTo;//[Offset: 0xe8, Size: 0x10]
	EdGraphPin_Deprecated*[] SubPins;//[Offset: 0xf8, Size: 0x10]
	EdGraphPin_Deprecated* ParentPin;//[Offset: 0x108, Size: 0x8]
	EdGraphPin_Deprecated* ReferencePassThroughConnection;//[Offset: 0x110, Size: 0x8]

--------------------------------
Class: EdGraphPinType
	FName PinCategory;//[Offset: 0x0, Size: 0x8]
	FName PinSubCategory;//[Offset: 0x8, Size: 0x8]
	Object* PinSubCategoryObject;//[Offset: 0x10, Size: 0x8]
	SimpleMemberReference PinSubCategoryMemberReference;//[Offset: 0x18, Size: 0x20]
	EdGraphTerminalType PinValueType;//[Offset: 0x38, Size: 0x1c]
	enum ContainerType;//[Offset: 0x54, Size: 0x1]
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1]
	bool bIsReference;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1]
	bool bIsConst;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1]
	bool bIsWeakPointer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 0x1]
	bool bIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 0x1]

--------------------------------
Class: EdGraphTerminalType
	FName TerminalCategory;//[Offset: 0x0, Size: 0x8]
	FName TerminalSubCategory;//[Offset: 0x8, Size: 0x8]
	Object* TerminalSubCategoryObject;//[Offset: 0x10, Size: 0x8]
	bool bTerminalIsConst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bTerminalIsWeakPointer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bTerminalIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: BrushBuilder.Object
	FString BitmapFilename;//[Offset: 0x28, Size: 0x10]
	FString ToolTip;//[Offset: 0x38, Size: 0x10]
	bool NotifyBadParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	Vector[] Vertices;//[Offset: 0x50, Size: 0x10]
	BuilderPoly[] Polys;//[Offset: 0x60, Size: 0x10]
	FName Layer;//[Offset: 0x70, Size: 0x8]
	bool MergeCoplanars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: BuilderPoly
	int[] VertexIndices;//[Offset: 0x0, Size: 0x10]
	int Direction;//[Offset: 0x10, Size: 0x4]
	FName ItemName;//[Offset: 0x14, Size: 0x8]
	int PolyFlags;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: BrushShape.Brush.Actor.Object

--------------------------------
Class: ButtonStyleAsset.Object
	ButtonStyle ButtonStyle;//[Offset: 0x28, Size: 0x298]

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x90]
	SlateBrush Hovered;//[Offset: 0x98, Size: 0x90]
	SlateBrush Pressed;//[Offset: 0x128, Size: 0x90]
	SlateBrush Disabled;//[Offset: 0x1b8, Size: 0x90]
	Margin NormalPadding;//[Offset: 0x248, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x258, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x268, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x280, Size: 0x18]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: CameraBlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: CameraShakeSourceActor.Actor.Object
	CameraShakeSourceComponent* CameraShakeSourceComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: DeviceProfileManager.Object
	Object*[] Profiles;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DeviceProfile.TextureLODSettings.Object
	FString DeviceType;//[Offset: 0x38, Size: 0x10]
	FString BaseProfileName;//[Offset: 0x48, Size: 0x10]
	Object* Parent;//[Offset: 0x58, Size: 0x8]
	FString[] CVars;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: TextureLODSettings.Object
	TextureLODGroup[] TextureLODGroups;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: TextureLODGroup
	byte Group;//[Offset: 0x0, Size: 0x1]
	int ASTCSizeExpected;//[Offset: 0xc, Size: 0x4]
	int LODBias;//[Offset: 0x10, Size: 0x4]
	int LODBias_Smaller;//[Offset: 0x14, Size: 0x4]
	int LODBias_Smallest;//[Offset: 0x18, Size: 0x4]
	int NumStreamedMips;//[Offset: 0x20, Size: 0x4]
	byte MipGenSettings;//[Offset: 0x24, Size: 0x1]
	int MinLODSize;//[Offset: 0x28, Size: 0x4]
	int MaxLODSize;//[Offset: 0x2c, Size: 0x4]
	int MaxLODSize_Smaller;//[Offset: 0x30, Size: 0x4]
	int MaxLODSize_Smallest;//[Offset: 0x34, Size: 0x4]
	int OptionalLODBias;//[Offset: 0x38, Size: 0x4]
	int OptionalMaxLODSize;//[Offset: 0x3c, Size: 0x4]
	int NoStreamMipCount;//[Offset: 0x44, Size: 0x4]
	FName MinMagFilter;//[Offset: 0x48, Size: 0x8]
	FName MipFilter;//[Offset: 0x50, Size: 0x8]
	enum MipLoadOptions;//[Offset: 0x58, Size: 0x1]
	bool DuplicateNonOptionalMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	TextureLODGroupUseScene[] ArrayLODBiasValues;//[Offset: 0x60, Size: 0x10]
	float Downscale;//[Offset: 0x70, Size: 0x4]
	enum DownscaleOptions;//[Offset: 0x74, Size: 0x1]
	int VirtualTextureTileCountBias;//[Offset: 0x78, Size: 0x4]
	int VirtualTextureTileSizeBias;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: TextureLODGroupUseScene
	byte[] ArrayBiasValue;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xe0, Size: 0x4]

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe8, Size: 0x4]
	int SizeY;//[Offset: 0xec, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xf0, Size: 0x10]
	byte AddressX;//[Offset: 0x100, Size: 0x1]
	byte AddressY;//[Offset: 0x101, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x102, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x102, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x102, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0x103, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0x105, Size: 0x1]
	byte MipsAddressU;//[Offset: 0x106, Size: 0x1]
	byte MipsAddressV;//[Offset: 0x107, Size: 0x1]
	byte OverrideFormat;//[Offset: 0x108, Size: 0x1]

--------------------------------
Class: CanvasRenderTarget2D.TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	delegate OnCanvasRenderTargetUpdate;//[Offset: 0x110, Size: 0x10]
	World* World;//[Offset: 0x120, Size: 0x8]
	bool bShouldClearRenderTargetOnReceiveUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	void UpdateResource();// 0x6b73e3fee041
	void ReceiveUpdate(Canvas* Canvas, int Width, int Height);// 0x6b72e3fee041
	void GetSize(out int Width, out int Height);// 0x6b71e3fee041
	CanvasRenderTarget2D* CreateCanvasRenderTarget2D(Object* WorldContextObject, class CanvasRenderTarget2D CanvasRenderTarget2DClass, int Width, int Height);// 0x6b70e3fee041

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8]
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18]
	Font* SmallFont;//[Offset: 0x50, Size: 0x8]
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18]
	Font* MediumFont;//[Offset: 0x70, Size: 0x8]
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18]
	Font* LargeFont;//[Offset: 0x90, Size: 0x8]
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18]
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8]
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18]
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10]
	FString[] AdditionalFontNames;//[Offset: 0xe0, Size: 0x10]
	class Console* ConsoleClass;//[Offset: 0xf0, Size: 0x8]
	SoftClassPath ConsoleClassName;//[Offset: 0xf8, Size: 0x18]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x110, Size: 0x8]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x118, Size: 0x18]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x130, Size: 0x8]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x138, Size: 0x18]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x150, Size: 0x8]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x158, Size: 0x18]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x170, Size: 0x18]
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x188, Size: 0x8]
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x190, Size: 0x18]
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1a8, Size: 0x8]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b0, Size: 0x18]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1c8, Size: 0x8]
	SoftClassPath AIControllerClassName;//[Offset: 0x1d0, Size: 0x18]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1e8, Size: 0x8]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1f0, Size: 0x18]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x208, Size: 0x18]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x220, Size: 0x8]
	GameUserSettings* GameUserSettings;//[Offset: 0x228, Size: 0x8]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x230, Size: 0x8]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x238, Size: 0x18]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x250, Size: 0x18]
	SoftClassPath GameSingletonClassName;//[Offset: 0x268, Size: 0x18]
	Object* GameSingleton;//[Offset: 0x280, Size: 0x8]
	SoftClassPath AssetManagerClassName;//[Offset: 0x288, Size: 0x18]
	AssetManager* AssetManager;//[Offset: 0x2a0, Size: 0x8]
	Texture2D* DefaultTexture;//[Offset: 0x2a8, Size: 0x8]
	SoftObjectPath DefaultTextureName;//[Offset: 0x2b0, Size: 0x18]
	Texture* DefaultDiffuseTexture;//[Offset: 0x2c8, Size: 0x8]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2d0, Size: 0x18]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2e8, Size: 0x8]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2f0, Size: 0x18]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x308, Size: 0x8]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x310, Size: 0x18]
	Texture2D* DefaultBokehTexture;//[Offset: 0x328, Size: 0x8]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x330, Size: 0x18]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x348, Size: 0x8]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x350, Size: 0x18]
	Material* WireframeMaterial;//[Offset: 0x368, Size: 0x8]
	FString WireframeMaterialName;//[Offset: 0x370, Size: 0x10]
	Material* DebugMeshMaterial;//[Offset: 0x380, Size: 0x8]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x388, Size: 0x18]
	Material* EmissiveMeshMaterial;//[Offset: 0x3a0, Size: 0x8]
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3a8, Size: 0x18]
	Material* LevelColorationLitMaterial;//[Offset: 0x3c0, Size: 0x8]
	FString LevelColorationLitMaterialName;//[Offset: 0x3c8, Size: 0x10]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x3d8, Size: 0x8]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x3e0, Size: 0x10]
	Material* LightingTexelDensityMaterial;//[Offset: 0x3f0, Size: 0x8]
	FString LightingTexelDensityName;//[Offset: 0x3f8, Size: 0x10]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x408, Size: 0x8]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x410, Size: 0x10]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x420, Size: 0x8]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x428, Size: 0x10]
	Material* RemoveSurfaceMaterial;//[Offset: 0x438, Size: 0x8]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x440, Size: 0x18]
	Material* VertexColorMaterial;//[Offset: 0x458, Size: 0x8]
	FString VertexColorMaterialName;//[Offset: 0x460, Size: 0x10]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x470, Size: 0x8]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x478, Size: 0x10]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x488, Size: 0x8]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x490, Size: 0x10]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4a0, Size: 0x8]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4a8, Size: 0x10]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4b8, Size: 0x8]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4c0, Size: 0x10]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4d0, Size: 0x8]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x4d8, Size: 0x10]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x4e8, Size: 0x18]
	Material* ConstraintLimitMaterial;//[Offset: 0x500, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x508, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x510, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x518, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x520, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x528, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x530, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x538, Size: 0x8]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x540, Size: 0x8]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x548, Size: 0x18]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x560, Size: 0x8]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x568, Size: 0x18]
	Material* ArrowMaterial;//[Offset: 0x580, Size: 0x8]
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x588, Size: 0x8]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x590, Size: 0x18]
	LinearColor LightingOnlyBrightness;//[Offset: 0x5a8, Size: 0x10]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5b8, Size: 0x10]
	LinearColor[] QuadComplexityColors;//[Offset: 0x5c8, Size: 0x10]
	LinearColor[] LightComplexityColors;//[Offset: 0x5d8, Size: 0x10]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x5e8, Size: 0x10]
	LinearColor[] LODColorationColors;//[Offset: 0x5f8, Size: 0x10]
	LinearColor[] HLODColorationColors;//[Offset: 0x608, Size: 0x10]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x618, Size: 0x10]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x628, Size: 0x4]
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x62c, Size: 0x4]
	float MinLightMapDensity;//[Offset: 0x630, Size: 0x4]
	float IdealLightMapDensity;//[Offset: 0x634, Size: 0x4]
	float MaxLightMapDensity;//[Offset: 0x638, Size: 0x4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63c, Size: 0x1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x640, Size: 0x4]
	float RenderLightMapDensityColorScale;//[Offset: 0x644, Size: 0x4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x648, Size: 0x10]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x658, Size: 0x10]
	StatColorMapping[] StatColorMappings;//[Offset: 0x668, Size: 0x10]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x678, Size: 0x8]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x680, Size: 0x18]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x698, Size: 0x10]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6a8, Size: 0x10]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6b8, Size: 0x10]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x6c8, Size: 0x10]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x6d8, Size: 0x8]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x6e0, Size: 0x18]
	Texture2D* BlueNoiseTexture;//[Offset: 0x6f8, Size: 0x8]
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x700, Size: 0x18]
	Texture2D* MiniFontTexture;//[Offset: 0x718, Size: 0x8]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x720, Size: 0x18]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x738, Size: 0x8]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x740, Size: 0x18]
	Texture2D* LightMapDensityTexture;//[Offset: 0x758, Size: 0x8]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x760, Size: 0x18]
	GameViewportClient* GameViewport;//[Offset: 0x780, Size: 0x8]
	FString[] DeferredCommands;//[Offset: 0x788, Size: 0x10]
	float NearClipPlane;//[Offset: 0x798, Size: 0x4]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79c, Size: 0x1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x79c, Size: 0x1]
	int MaximumLoopIterationCount;//[Offset: 0x7a0, Size: 0x4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a4, Size: 0x1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7a4, Size: 0x1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7a4, Size: 0x1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7a4, Size: 0x1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7a4, Size: 0x1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7a4, Size: 0x1]
	float FixedFrameRate;//[Offset: 0x7a8, Size: 0x4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7ac, Size: 0x10]
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x7c0, Size: 0x8]
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x7e8, Size: 0x18]
	TimecodeProvider* TimecodeProvider;//[Offset: 0x800, Size: 0x8]
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x828, Size: 0x18]
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 0x1]
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x844, Size: 0x8]
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x84c, Size: 0x4]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x850, Size: 0x1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x854, Size: 0x4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x858, Size: 0x1]
	Color C_WorldBox;//[Offset: 0x85c, Size: 0x4]
	Color C_BrushWire;//[Offset: 0x860, Size: 0x4]
	Color C_AddWire;//[Offset: 0x864, Size: 0x4]
	Color C_SubtractWire;//[Offset: 0x868, Size: 0x4]
	Color C_SemiSolidWire;//[Offset: 0x86c, Size: 0x4]
	Color C_NonSolidWire;//[Offset: 0x870, Size: 0x4]
	Color C_WireBackground;//[Offset: 0x874, Size: 0x4]
	Color C_ScaleBoxHi;//[Offset: 0x878, Size: 0x4]
	Color C_VolumeCollision;//[Offset: 0x87c, Size: 0x4]
	Color C_BSPCollision;//[Offset: 0x880, Size: 0x4]
	Color C_OrthoBackground;//[Offset: 0x884, Size: 0x4]
	Color C_Volume;//[Offset: 0x888, Size: 0x4]
	Color C_BrushShape;//[Offset: 0x88c, Size: 0x4]
	float StreamingDistanceFactor;//[Offset: 0x890, Size: 0x4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x898, Size: 0x10]
	enum TransitionType;//[Offset: 0x8a8, Size: 0x1]
	FString TransitionDescription;//[Offset: 0x8b0, Size: 0x10]
	FString TransitionGameMode;//[Offset: 0x8c0, Size: 0x10]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d0, Size: 0x1]
	float CameraRotationThreshold;//[Offset: 0x8d4, Size: 0x4]
	float CameraTranslationThreshold;//[Offset: 0x8d8, Size: 0x4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x8dc, Size: 0x4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x8e0, Size: 0x4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e4, Size: 0x1]
	int MaxParticleResize;//[Offset: 0x8e8, Size: 0x4]
	int MaxParticleResizeWarn;//[Offset: 0x8ec, Size: 0x4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x8f0, Size: 0x10]
	float NetClientTicksPerSecond;//[Offset: 0x900, Size: 0x4]
	float DisplayGamma;//[Offset: 0x904, Size: 0x4]
	float MinDesiredFrameRate;//[Offset: 0x908, Size: 0x4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x90c, Size: 0x10]
	LinearColor SelectedMaterialColor;//[Offset: 0x91c, Size: 0x10]
	LinearColor SelectionOutlineColor;//[Offset: 0x92c, Size: 0x10]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x93c, Size: 0x10]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x94c, Size: 0x10]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 0x1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x95d, Size: 0x1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x95d, Size: 0x1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x95d, Size: 0x1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x95d, Size: 0x1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x960, Size: 0x4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x964, Size: 0x4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x968, Size: 0x1]
	FString ParticleEventManagerClassPath;//[Offset: 0x970, Size: 0x10]
	float SelectionHighlightIntensity;//[Offset: 0x980, Size: 0x4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x984, Size: 0x4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x988, Size: 0x4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xc28, Size: 0x10]
	FString[] ServerActors;//[Offset: 0xc38, Size: 0x10]
	FString[] RuntimeServerActors;//[Offset: 0xc48, Size: 0x10]
	float NetErrorLogInterval;//[Offset: 0xc58, Size: 0x4]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc5c, Size: 0x1]
	int NextWorldContextHandle;//[Offset: 0xc70, Size: 0x4]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 0x4]
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 0x4]
	int WindowPosX;//[Offset: 0x90, Size: 0x4]
	int WindowPosY;//[Offset: 0x94, Size: 0x4]
	int FullscreenMode;//[Offset: 0x98, Size: 0x4]
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 0x4]
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 0x4]
	uint32 Version;//[Offset: 0xa4, Size: 0x4]
	int AudioQualityLevel;//[Offset: 0xa8, Size: 0x4]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 0x4]
	float FrameRateLimit;//[Offset: 0xb0, Size: 0x4]
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 0x4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 0x4]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 0x4]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 0x4]
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 0x4]
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 0x4]
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 0x4]
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 0x4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 0x10]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 0x10]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 0x4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 0x4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x110, Size: 0x10]
	void ValidateSettings();// 0x6c9be3fee041
	bool SupportsHDRDisplayOutput();// 0x6c9ae3fee041
	void SetVSyncEnabled(bool bEnable);// 0x6c99e3fee041
	void SetVisualEffectQuality(int Value);// 0x6c98e3fee041
	void SetViewDistanceQuality(int Value);// 0x6c97e3fee041
	void SetToDefaults();// 0x6c96e3fee041
	void SetTextureQuality(int Value);// 0x6c95e3fee041
	void SetShadowQuality(int Value);// 0x6c94e3fee041
	void SetShadingQuality(int Value);// 0x6c93e3fee041
	void SetScreenResolution(IntPoint Resolution);// 0x6c92e3fee041
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x6c91e3fee041
	void SetResolutionScaleValue(int NewScaleValue);// 0x6c90e3fee041
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x6c8fe3fee041
	void SetPostProcessingQuality(int Value);// 0x6c8ee3fee041
	void SetOverallScalabilityLevel(int Value);// 0x6c8de3fee041
	void SetFullscreenMode(byte InFullscreenMode);// 0x6c8ce3fee041
	void SetFrameRateLimit(float NewLimit);// 0x6c8be3fee041
	void SetFoliageQuality(int Value);// 0x6c8ae3fee041
	void SetDynamicResolutionEnabled(bool bEnable);// 0x6c89e3fee041
	void SetBenchmarkFallbackValues();// 0x6c88e3fee041
	void SetAudioQualityLevel(int QualityLevel);// 0x6c87e3fee041
	void SetAntiAliasingQuality(int Value);// 0x6c86e3fee041
	void SaveSettings();// 0x6c85e3fee041
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x6c84e3fee041
	void RevertVideoMode();// 0x6c83e3fee041
	void ResetToCurrentSettings();// 0x6c82e3fee041
	void LoadSettings(bool bForceReload);// 0x6c81e3fee041
	bool IsVSyncEnabled();// 0x6c80e3fee041
	bool IsVSyncDirty();// 0x6c7fe3fee041
	bool IsScreenResolutionDirty();// 0x6c7ee3fee041
	bool IsHDREnabled();// 0x6c7de3fee041
	bool IsFullscreenModeDirty();// 0x6c7ce3fee041
	bool IsDynamicResolutionEnabled();// 0x6c7be3fee041
	bool IsDynamicResolutionDirty();// 0x6c7ae3fee041
	bool IsDirty();// 0x6c79e3fee041
	int GetVisualEffectQuality();// 0x6c78e3fee041
	int GetViewDistanceQuality();// 0x6c77e3fee041
	int GetTextureQuality();// 0x6c76e3fee041
	int GetSyncInterval();// 0x6c75e3fee041
	int GetShadowQuality();// 0x6c74e3fee041
	int GetShadingQuality();// 0x6c73e3fee041
	IntPoint GetScreenResolution();// 0x6c72e3fee041
	float GetResolutionScaleNormalized();// 0x6c71e3fee041
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x6c70e3fee041
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x6c6fe3fee041
	float GetRecommendedResolutionScale();// 0x6c6ee3fee041
	byte GetPreferredFullscreenMode();// 0x6c6de3fee041
	int GetPostProcessingQuality();// 0x6c6ce3fee041
	int GetOverallScalabilityLevel();// 0x6c6be3fee041
	IntPoint GetLastConfirmedScreenResolution();// 0x6c6ae3fee041
	byte GetLastConfirmedFullscreenMode();// 0x6c69e3fee041
	GameUserSettings* GetGameUserSettings();// 0x6c68e3fee041
	byte GetFullscreenMode();// 0x6c67e3fee041
	float GetFrameRateLimit();// 0x6c66e3fee041
	int GetFramePace();// 0x6c65e3fee041
	int GetFoliageQuality();// 0x6c64e3fee041
	IntPoint GetDesktopResolution();// 0x6c63e3fee041
	IntPoint GetDefaultWindowPosition();// 0x6c62e3fee041
	byte GetDefaultWindowMode();// 0x6c61e3fee041
	float GetDefaultResolutionScale();// 0x6c60e3fee041
	IntPoint GetDefaultResolution();// 0x6c5fe3fee041
	int GetCurrentHDRDisplayNits();// 0x6c5ee3fee041
	int GetAudioQualityLevel();// 0x6c5de3fee041
	int GetAntiAliasingQuality();// 0x6c5ce3fee041
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x6c5be3fee041
	void ConfirmVideoMode();// 0x6c5ae3fee041
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x6c59e3fee041
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x6c58e3fee041
	void ApplyNonResolutionSettings();// 0x6c57e3fee041
	void ApplyHardwareBenchmarkResults();// 0x6c56e3fee041

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10]
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4]
	Color Out;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8]
	FName NewGameName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	FName OldClassName;//[Offset: 0x8, Size: 0x8]
	FName NewClassName;//[Offset: 0x10, Size: 0x8]
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8]
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8]
	FName NewClassClass;//[Offset: 0x28, Size: 0x8]
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10]
	FString NewPluginName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8]
	FName NewStructName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: EngineCustomTimeStep.Object

--------------------------------
Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4]
	Timecode GetTimecode();// 0x672fe3fee041
	enum GetSynchronizationState();// 0x672ee3fee041
	QualifiedFrameTime GetQualifiedFrameTime();// 0x672de3fee041
	FrameRate GetFrameRate();// 0x672ce3fee041
	Timecode GetDelayedTimecode();// 0x672be3fee041
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x672ae3fee041
	bool FetchTimecode(out QualifiedFrameTime OutFrameTime);// 0x6729e3fee041
	void FetchAndUpdate();// 0x6728e3fee041

--------------------------------
Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4]
	int Minutes;//[Offset: 0x4, Size: 0x4]
	int Seconds;//[Offset: 0x8, Size: 0x4]
	int Frames;//[Offset: 0xc, Size: 0x4]
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8]
	FrameRate Rate;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	FString Comment;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8]
	FName DriverClassName;//[Offset: 0x8, Size: 0x8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: CheckBoxStyleAsset.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x28, Size: 0x5c8]

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1]
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0x90]
	SlateBrush UncheckedHoveredImage;//[Offset: 0xa0, Size: 0x90]
	SlateBrush UncheckedPressedImage;//[Offset: 0x130, Size: 0x90]
	SlateBrush CheckedImage;//[Offset: 0x1c0, Size: 0x90]
	SlateBrush CheckedHoveredImage;//[Offset: 0x250, Size: 0x90]
	SlateBrush CheckedPressedImage;//[Offset: 0x2e0, Size: 0x90]
	SlateBrush UndeterminedImage;//[Offset: 0x370, Size: 0x90]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x400, Size: 0x90]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x490, Size: 0x90]
	Margin Padding;//[Offset: 0x520, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x530, Size: 0x28]
	SlateColor BorderBackgroundColor;//[Offset: 0x558, Size: 0x28]
	SlateSound CheckedSlateSound;//[Offset: 0x580, Size: 0x18]
	SlateSound UncheckedSlateSound;//[Offset: 0x598, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x5b0, Size: 0x18]

--------------------------------
Class: GameMapsSettings.Object
	FString LocalMapOptions;//[Offset: 0x28, Size: 0x10]
	SoftObjectPath TransitionMap;//[Offset: 0x38, Size: 0x18]
	bool bUseSplitscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	byte TwoPlayerSplitscreenLayout;//[Offset: 0x51, Size: 0x1]
	byte ThreePlayerSplitscreenLayout;//[Offset: 0x52, Size: 0x1]
	enum FourPlayerSplitscreenLayout;//[Offset: 0x53, Size: 0x1]
	bool bOffsetPlayerGamepadIds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	SoftClassPath GameInstanceClass;//[Offset: 0x58, Size: 0x18]
	SoftObjectPath GameDefaultMap;//[Offset: 0x70, Size: 0x18]
	SoftObjectPath ServerDefaultMap;//[Offset: 0x88, Size: 0x18]
	SoftClassPath GlobalDefaultGameMode;//[Offset: 0xa0, Size: 0x18]
	SoftClassPath GlobalDefaultServerGameMode;//[Offset: 0xb8, Size: 0x18]
	GameModeName[] GameModeMapPrefixes;//[Offset: 0xd0, Size: 0x10]
	GameModeName[] GameModeClassAliases;//[Offset: 0xe0, Size: 0x10]
	void SetSkipAssigningGamepadToPlayer1(bool bSkipFirstPlayer);// 0x65b9e3fee041
	bool GetSkipAssigningGamepadToPlayer1();// 0x65b8e3fee041
	GameMapsSettings* GetGameMapsSettings();// 0x65b7e3fee041

--------------------------------
Class: GameModeName
	FString Name;//[Offset: 0x0, Size: 0x10]
	SoftClassPath GameMode;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: PlatformInterfaceBase.Object
	DelegateArray[] AllDelegates;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DelegateArray
	delegate[] Delegates;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CloudStorageBase.PlatformInterfaceBase.Object
	FString[] LocalCloudFiles;//[Offset: 0x38, Size: 0x10]
	bool bSuppressDelegateCalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: Commandlet.Object
	FString HelpDescription;//[Offset: 0x28, Size: 0x10]
	FString HelpUsage;//[Offset: 0x38, Size: 0x10]
	FString HelpWebLink;//[Offset: 0x48, Size: 0x10]
	FString[] HelpParamNames;//[Offset: 0x58, Size: 0x10]
	FString[] HelpParamDescriptions;//[Offset: 0x68, Size: 0x10]
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	bool IsClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]
	bool IsEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1]
	bool LogToConsole;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78, Size: 0x1]
	bool ShowErrorCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 0x1]
	bool ShowProgress;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ComponentDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintComponentDelegateBinding[] ComponentDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintComponentDelegateBinding
	FName ComponentPropertyName;//[Offset: 0x0, Size: 0x8]
	FName DelegatePropertyName;//[Offset: 0x8, Size: 0x8]
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ActorComponentInstanceDataTransientOuter.Object

--------------------------------
Class: CompositeCurveTable.CurveTable.Object
	CurveTable*[] ParentTables;//[Offset: 0xa0, Size: 0x10]
	CurveTable*[] OldParentTables;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: CompositeDataTable.DataTable.Object
	DataTable*[] ParentTables;//[Offset: 0xb0, Size: 0x10]
	DataTable*[] OldParentTables;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: ConsoleSettings.Object
	int MaxScrollbackSize;//[Offset: 0x28, Size: 0x4]
	AutoCompleteCommand[] ManualAutoCompleteList;//[Offset: 0x30, Size: 0x10]
	FString[] AutoCompleteMapPaths;//[Offset: 0x40, Size: 0x10]
	float BackgroundOpacityPercentage;//[Offset: 0x50, Size: 0x4]
	bool bOrderTopToBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bDisplayHelpInAutoComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	Color InputColor;//[Offset: 0x58, Size: 0x4]
	Color HistoryColor;//[Offset: 0x5c, Size: 0x4]
	Color AutoCompleteCommandColor;//[Offset: 0x60, Size: 0x4]
	Color AutoCompleteCVarColor;//[Offset: 0x64, Size: 0x4]
	Color AutoCompleteFadedColor;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: AutoCompleteCommand
	FString Command;//[Offset: 0x0, Size: 0x10]
	FString Desc;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ControlChannel.Channel.Object

--------------------------------
Class: StreamingSettings.DeveloperSettings.Object
	bool AsyncLoadingThreadEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool WarnIfTimeLimitExceeded;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	float TimeLimitExceededMultiplier;//[Offset: 0x3c, Size: 0x4]
	float TimeLimitExceededMinTime;//[Offset: 0x40, Size: 0x4]
	int MinBulkDataSizeForAsyncLoading;//[Offset: 0x44, Size: 0x4]
	bool UseBackgroundLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool AsyncLoadingUseFullTimeLimit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	float AsyncLoadingTimeLimit;//[Offset: 0x4c, Size: 0x4]
	float PriorityAsyncLoadingExtraTime;//[Offset: 0x50, Size: 0x4]
	float LevelStreamingActorsUpdateTimeLimit;//[Offset: 0x54, Size: 0x4]
	float PriorityLevelStreamingActorsUpdateExtraTime;//[Offset: 0x58, Size: 0x4]
	int LevelStreamingComponentsRegistrationGranularity;//[Offset: 0x5c, Size: 0x4]
	float LevelStreamingUnregisterComponentsTimeLimit;//[Offset: 0x60, Size: 0x4]
	int LevelStreamingComponentsUnregistrationGranularity;//[Offset: 0x64, Size: 0x4]
	bool FlushStreamingOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool EventDrivenLoaderEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: GarbageCollectionSettings.DeveloperSettings.Object
	float TimeBetweenPurgingPendingKillObjects;//[Offset: 0x38, Size: 0x4]
	bool FlushStreamingOnGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool AllowParallelGC;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool IncrementalBeginDestroyEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool MultithreadedDestructionEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool CreateGCClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool AssetClusteringEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool ActorClusteringEnabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool BlueprintClusteringEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool UseDisregardForGCOnDedicatedServers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	int MinGCClusterSize;//[Offset: 0x40, Size: 0x4]
	int NumRetriesBeforeForcingGC;//[Offset: 0x44, Size: 0x4]
	int MaxObjectsNotConsideredByGC;//[Offset: 0x48, Size: 0x4]
	int SizeOfPermanentObjectPool;//[Offset: 0x4c, Size: 0x4]
	int MaxObjectsInGame;//[Offset: 0x50, Size: 0x4]
	int MaxObjectsInEditor;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistanceSizePair[] CullDistances;//[Offset: 0x318, Size: 0x10]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 0x1]

--------------------------------
Class: CullDistanceSizePair
	float Size;//[Offset: 0x0, Size: 0x4]
	float CullDistance;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CurveEdPresetCurve.Object

--------------------------------
Class: CurveLinearColorAtlas.Texture2D.Texture.StreamableRenderAsset.Object
	uint32 TextureSize;//[Offset: 0x108, Size: 0x4]
	CurveLinearColor*[] GradientCurves;//[Offset: 0x110, Size: 0x10]
	bool GetCurvePosition(CurveLinearColor* InCurve, out float position);// 0x6bc1e3fee041

--------------------------------
Class: CurveSourceInterface.Interface.Object
	float GetCurveValue(FName CurveName);// 0x6bc4e3fee041
	void GetCurves(out NamedCurveValue[] OutValues);// 0x6bc3e3fee041
	FName GetBindingName();// 0x6bc2e3fee041

--------------------------------
Class: NamedCurveValue
	FName Name;//[Offset: 0x0, Size: 0x8]
	float Value;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: DataTableFunctionLibrary.BlueprintFunctionLibrary.Object
	void GetDataTableRowNames(DataTable* Table, out FName[] OutRowNames);// 0x6bcae3fee041
	bool GetDataTableRowFromName(DataTable* Table, FName RowName, out TableRowBase OutRow);// 0x6bc9e3fee041
	FString[] GetDataTableColumnAsString(const DataTable* DataTable, FName PropertyName);// 0x6bc8e3fee041
	void EvaluateCurveTableRow(CurveTable* CurveTable, FName RowName, float InXY, out byte OutResult, out float OutXY, FString ContextString);// 0x6bc7e3fee041
	bool DoesDataTableRowExist(DataTable* Table, FName RowName);// 0x6bc6e3fee041

--------------------------------
Class: TableRowBase

--------------------------------
Class: DebugCameraControllerSettings.DeveloperSettings.Object
	DebugCameraControllerSettingsViewModeIndex[] CycleViewModes;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: DebugCameraControllerSettingsViewModeIndex
	byte ViewModeIndex;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: DebugCameraHUD.HUD.Actor.Object

--------------------------------
Class: DebugDrawService.BlueprintFunctionLibrary.Object

--------------------------------
Class: DecalActor.Actor.Object
	DecalComponent* Decal;//[Offset: 0x2e0, Size: 0x8]
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x6bd4e3fee041
	MaterialInterface* GetDecalMaterial();// 0x6bd3e3fee041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x6bd2e3fee041

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x208, Size: 0x8]
	int sortOrder;//[Offset: 0x210, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x214, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x218, Size: 0x4]
	float FadeDuration;//[Offset: 0x21c, Size: 0x4]
	float FadeInDuration;//[Offset: 0x220, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x224, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	Vector DecalSize;//[Offset: 0x22c, Size: 0xc]
	void SetSortOrder(int Value);// 0x6bdfe3fee041
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x6bdee3fee041
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x6bdde3fee041
	void SetFadeIn(float StartDelay, float Duaration);// 0x6bdce3fee041
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x6bdbe3fee041
	float GetFadeStartDelay();// 0x6bdae3fee041
	float GetFadeInStartDelay();// 0x6bd9e3fee041
	float GetFadeInDuration();// 0x6bd8e3fee041
	float GetFadeDuration();// 0x6bd7e3fee041
	MaterialInterface* GetDecalMaterial();// 0x6bd6e3fee041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x6bd5e3fee041

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x34c, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x350, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x358, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x360, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x368, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x370, Size: 0x1]
	void TurnAtRate(float Rate);// 0x52c7e3fee041
	void MoveUp_World(float Val);// 0x52c6e3fee041
	void MoveRight(float Val);// 0x52c5e3fee041
	void MoveForward(float Val);// 0x52c4e3fee041
	void LookUpAtRate(float Rate);// 0x52c3e3fee041

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x5c8, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x6c29e3fee041
	float GetUnscaledSphereRadius();// 0x6c28e3fee041
	float GetShapeScale();// 0x6c27e3fee041
	float GetScaledSphereRadius();// 0x6c26e3fee041

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x5e4, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x5e8, Size: 0x4]
	int MinLOD;//[Offset: 0x5ec, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x5f0, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x5f8, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x600, Size: 0x4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x604, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x604, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x604, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x604, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x604, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x604, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x604, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x604, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x605, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x605, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x605, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x605, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x605, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x608, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x60c, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x610, Size: 0x4]
	bool bStaticShadowMaskOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x614, Size: 0x1]
	bool bForceUseSkyLightAsDiffuseGI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x614, Size: 0x1]
	bool bSkipWorldCollisionManagerControl;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x614, Size: 0x1]
	float StreamingDistanceMultiplier;//[Offset: 0x618, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x620, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x630, Size: 0x10]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x640, Size: 0x18]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x4210e3fee041
	void SetReverseCulling(bool ReverseCulling);// 0x420fe3fee041
	void SetForcedLodModel(int NewForcedLodModel);// 0x420ee3fee041
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);// 0x420de3fee041
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x420ce3fee041
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x420be3fee041
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x420ae3fee041
	bool ClearRenderDataOnly();// 0x4209e3fee041

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x140, Size: 0x4]
	float Acceleration;//[Offset: 0x144, Size: 0x4]
	float Deceleration;//[Offset: 0x148, Size: 0x4]
	float TurningBoost;//[Offset: 0x14c, Size: 0x4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1]

--------------------------------
Class: DemoNetConnection.NetConnection.Player.Object

--------------------------------
Class: PendingNetGame.Object
	NetDriver* NetDriver;//[Offset: 0x30, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: DemoPendingNetGame.PendingNetGame.Object

--------------------------------
Class: DestructibleInterface.Interface.Object

--------------------------------
Class: DeviceProfileFragment.Object

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x40, Size: 0x10]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: MaterialShaderQualitySettings.Object
	<FName,ShaderPlatformQualitySettings*> ForwardSettingMap;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: ShaderPlatformQualitySettings.Object
	MaterialQualityOverrides QualityOverrides;//[Offset: 0x28, Size: 0xe]

--------------------------------
Class: MaterialQualityOverrides
	bool bDiscardQualityDuringCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bEnableOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bForceFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bForceNonMetal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bForceDisableLMDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bForceLQReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bForceDisablePreintegratedGF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bDisableMaterialNormalCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	enum MobileShadowQuality;//[Offset: 0x8, Size: 0x1]
	bool bDisableAdditiveReflection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bDisableMaterialPlanarReflection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bCalcILCPerVertex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool b1dSHForTransferTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bDisableGeometricSpecularAA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: DialogueSoundWaveProxy.SoundBase.Object

--------------------------------
Class: DialogueVoice.Object
	byte Gender;//[Offset: 0x28, Size: 0x1]
	byte Plurality;//[Offset: 0x29, Size: 0x1]
	Guid LocalizationGUID;//[Offset: 0x2c, Size: 0x10]

--------------------------------
Class: DialogueWave.Object
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bOverride_SubtitleOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	FString SpokenText;//[Offset: 0x30, Size: 0x10]
	FString SubtitleOverride;//[Offset: 0x40, Size: 0x10]
	DialogueContextMapping[] ContextMappings;//[Offset: 0x50, Size: 0x10]
	Guid LocalizationGUID;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: DialogueContextMapping
	DialogueContext Context;//[Offset: 0x0, Size: 0x18]
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8]
	FString LocalizationKeyFormat;//[Offset: 0x20, Size: 0x10]
	DialogueSoundWaveProxy* Proxy;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: DialogueContext
	DialogueVoice* Speaker;//[Offset: 0x0, Size: 0x8]
	DialogueVoice*[] Targets;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x2e0, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]
	void ToggleEnabled();// 0x6bece3fee041
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x6bebe3fee041
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x6beae3fee041
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x6be9e3fee041
	void SetLightColor(LinearColor NewLightColor);// 0x6be8e3fee041
	void SetEnabled(bool bSetEnabled);// 0x6be7e3fee041
	void SetCastShadows(bool bNewValue);// 0x6be6e3fee041
	void SetBrightness(float NewBrightness);// 0x6be5e3fee041
	void SetAffectTranslucentLighting(bool bNewValue);// 0x6be4e3fee041
	void OnRep_bEnabled();// 0x6be3e3fee041
	bool IsEnabled();// 0x6be2e3fee041
	LinearColor GetLightColor();// 0x6be1e3fee041
	float GetBrightness();// 0x6be0e3fee041

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x238, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x23c, Size: 0x4]
	float MaxDistanceFadeRange;//[Offset: 0x240, Size: 0x4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	int ShadowMapChannel;//[Offset: 0x248, Size: 0x4]
	float MinRoughness;//[Offset: 0x250, Size: 0x4]
	float SpecularScale;//[Offset: 0x254, Size: 0x4]
	float ShadowResolutionScale;//[Offset: 0x258, Size: 0x4]
	float ShadowBias;//[Offset: 0x25c, Size: 0x4]
	float ShadowSlopeBias;//[Offset: 0x260, Size: 0x4]
	float ShadowReceiverBias;//[Offset: 0x264, Size: 0x4]
	float ShadowReceiverNormalBias;//[Offset: 0x268, Size: 0x4]
	float ShadowSharpen;//[Offset: 0x26c, Size: 0x4]
	float ContactShadowLength;//[Offset: 0x270, Size: 0x4]
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 0x1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274, Size: 0x1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x274, Size: 0x1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x274, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x275, Size: 0x1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x278, Size: 0x8]
	Vector LightFunctionScale;//[Offset: 0x280, Size: 0xc]
	TextureLightProfile* IESTexture;//[Offset: 0x290, Size: 0x8]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x29c, Size: 0x4]
	float LightFunctionFadeDistance;//[Offset: 0x2a0, Size: 0x4]
	float DisabledBrightness;//[Offset: 0x2a4, Size: 0x4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	float BloomScale;//[Offset: 0x2ac, Size: 0x4]
	float BloomThreshold;//[Offset: 0x2b0, Size: 0x4]
	float BloomMaxBrightness;//[Offset: 0x2b4, Size: 0x4]
	Color BloomTint;//[Offset: 0x2b8, Size: 0x4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	float RayStartOffsetDepthScale;//[Offset: 0x2c0, Size: 0x4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x6c11e3fee041
	void SetUseIESBrightness(bool bNewValue);// 0x6c10e3fee041
	void SetTransmission(bool bNewValue);// 0x6c0fe3fee041
	void SetTemperature(float NewTemperature);// 0x6c0ee3fee041
	void SetSpecularScale(float NewValue);// 0x6c0de3fee041
	void SetShadowSlopeBias(float NewValue);// 0x6c0ce3fee041
	void SetShadowResolutionScale(float NewValue);// 0x6c0be3fee041
	void SetShadowReceiverNormalBias(float NewValue);// 0x6c0ae3fee041
	void SetShadowReceiverBias(float NewValue);// 0x6c09e3fee041
	void SetShadowBias(float NewValue);// 0x6c08e3fee041
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x6c07e3fee041
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x6c06e3fee041
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x6c05e3fee041
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x6c04e3fee041
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x6c03e3fee041
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x6c02e3fee041
	void SetIntensity(float NewIntensity);// 0x6c01e3fee041
	void SetIndirectLightingIntensity(float NewIntensity);// 0x6c00e3fee041
	void SetIESTexture(TextureLightProfile* NewValue);// 0x6bffe3fee041
	void SetIESBrightnessScale(float NewValue);// 0x6bfee3fee041
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x6bfde3fee041
	void SetExtraIndirectLightingSaturation(float NewValue);// 0x6bfce3fee041
	void SetEnableLightShaftBloom(bool bNewValue);// 0x6bfbe3fee041
	void SetBloomTint(Color NewValue);// 0x6bfae3fee041
	void SetBloomThreshold(float NewValue);// 0x6bf9e3fee041
	void SetBloomScale(float NewValue);// 0x6bf8e3fee041
	void SetBloomMaxBrightness(float NewValue);// 0x6bf7e3fee041
	void SetAffectTranslucentLighting(bool bNewValue);// 0x6bf6e3fee041
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x6bf5e3fee041

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x204, Size: 0x10]
	float Brightness;//[Offset: 0x214, Size: 0x4]
	float Intensity;//[Offset: 0x218, Size: 0x4]
	Color LightColor;//[Offset: 0x21c, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x220, Size: 0x1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x220, Size: 0x1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x220, Size: 0x1]
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x220, Size: 0x1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x220, Size: 0x1]
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x220, Size: 0x1]
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x221, Size: 0x1]
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x221, Size: 0x1]
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x221, Size: 0x1]
	float DeepShadowLayerDistribution;//[Offset: 0x224, Size: 0x4]
	float IndirectLightingIntensity;//[Offset: 0x228, Size: 0x4]
	float ExtraIndirectLightingSaturation;//[Offset: 0x22c, Size: 0x4]
	float VolumetricScatteringIntensity;//[Offset: 0x230, Size: 0x4]
	int SamplesPerPixel;//[Offset: 0x234, Size: 0x4]
	void SetSamplesPerPixel(int NewValue);// 0x6bf4e3fee041
	void SetCastVolumetricShadow(bool bNewValue);// 0x6bf3e3fee041
	void SetCastShadows(bool bNewValue);// 0x6bf2e3fee041
	void SetCastRaytracedShadow(bool bNewValue);// 0x6bf1e3fee041
	void SetCastDeepShadow(bool bNewValue);// 0x6bf0e3fee041
	void SetAffectReflection(bool bNewValue);// 0x6befe3fee041
	void SetAffectGlobalIllumination(bool bNewValue);// 0x6beee3fee041
	LinearColor GetLightColor();// 0x6bede3fee041

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x108, Size: 0x4]
	float TextureMultiplier;//[Offset: 0x10c, Size: 0x4]

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float ShadowCascadeBiasDistribution;//[Offset: 0x334, Size: 0x4]
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	float OcclusionMaskDarkness;//[Offset: 0x33c, Size: 0x4]
	float OcclusionDepthRange;//[Offset: 0x340, Size: 0x4]
	Vector LightShaftOverrideDirection;//[Offset: 0x344, Size: 0xc]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x350, Size: 0x4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x354, Size: 0x4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x358, Size: 0x4]
	int DynamicShadowCascades;//[Offset: 0x35c, Size: 0x4]
	float CascadeDistributionExponent;//[Offset: 0x360, Size: 0x4]
	float CascadeTransitionFraction;//[Offset: 0x364, Size: 0x4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x368, Size: 0x4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36c, Size: 0x1]
	int FarShadowCascadeCount;//[Offset: 0x370, Size: 0x4]
	float FarShadowDistance;//[Offset: 0x374, Size: 0x4]
	float DistanceFieldShadowDistance;//[Offset: 0x378, Size: 0x4]
	float LightSourceAngle;//[Offset: 0x37c, Size: 0x4]
	float LightSourceSoftAngle;//[Offset: 0x380, Size: 0x4]
	float ShadowSourceAngleFactor;//[Offset: 0x384, Size: 0x4]
	float TraceDistance;//[Offset: 0x388, Size: 0x4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 0x1]
	int AtmosphereSunLightIndex;//[Offset: 0x390, Size: 0x4]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x394, Size: 0x10]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a4, Size: 0x1]
	bool bCastShadowsOnClouds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a4, Size: 0x1]
	bool bCastShadowsOnAtmosphere;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a4, Size: 0x1]
	bool bCastCloudShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a4, Size: 0x1]
	float CloudShadowStrength;//[Offset: 0x3a8, Size: 0x4]
	float CloudShadowOnAtmosphereStrength;//[Offset: 0x3ac, Size: 0x4]
	float CloudShadowOnSurfaceStrength;//[Offset: 0x3b0, Size: 0x4]
	float CloudShadowDepthBias;//[Offset: 0x3b4, Size: 0x4]
	float CloudShadowExtent;//[Offset: 0x3b8, Size: 0x4]
	float CloudShadowMapResolutionScale;//[Offset: 0x3bc, Size: 0x4]
	float CloudShadowRaySampleCountScale;//[Offset: 0x3c0, Size: 0x4]
	LinearColor CloudScatteredLuminanceScale;//[Offset: 0x3c4, Size: 0x10]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x3d4, Size: 0x10]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e4, Size: 0x1]
	Color ModulatedShadowColor;//[Offset: 0x3e8, Size: 0x4]
	float ShadowAmount;//[Offset: 0x3ec, Size: 0x4]
	bool bEnableCSMCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 0x1]
	bool bCSMCacheLockViewMatrix;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f0, Size: 0x1]
	float CSMCacheLockedFOV;//[Offset: 0x3f4, Size: 0x4]
	float CSMCacheLockedNearPlane;//[Offset: 0x3f8, Size: 0x4]
	bool bEnableLobbyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3fc, Size: 0x1]
	Vector LobbyModeCenter;//[Offset: 0x400, Size: 0xc]
	float LobbyModeRadius;//[Offset: 0x40c, Size: 0x4]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x6c25e3fee041
	void SetShadowAmount(float NewValue);// 0x6c24e3fee041
	void SetOcclusionMaskDarkness(float NewValue);// 0x6c23e3fee041
	void SetOcclusionDepthRange(float NewValue);// 0x6c22e3fee041
	void SetLobbyModeRadius(float InLobbyModeRadius);// 0x6c21e3fee041
	void SetLobbyModeCenter(Vector InLobbyModeCenter);// 0x6c20e3fee041
	void SetLobbyMode(bool InbEnableLobbyMode);// 0x6c1fe3fee041
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x6c1ee3fee041
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x6c1de3fee041
	void SetEnableCSMCache(bool InbEnableCSMCache);// 0x6c1ce3fee041
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x6c1be3fee041
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x6c1ae3fee041
	void SetDynamicShadowCascades(int NewValue);// 0x6c19e3fee041
	void SetCSMCacheLockViewMatrix(bool InbCSMCacheLockViewMatrix);// 0x6c18e3fee041
	void SetCSMCacheLockedNearPlane(float InCSMCacheLockedNearPlane);// 0x6c17e3fee041
	void SetCSMCacheLockedFOV(float InCSMCacheLockedFOV);// 0x6c16e3fee041
	void SetCascadeTransitionFraction(float NewValue);// 0x6c15e3fee041
	void SetCascadeDistributionExponent(float NewValue);// 0x6c14e3fee041
	void SetAtmosphereSunLightIndex(int NewValue);// 0x6c13e3fee041
	void SetAtmosphereSunLight(bool bNewValue);// 0x6c12e3fee041

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4]
	float ShadowExponent;//[Offset: 0x4, Size: 0x4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: DistributionFloatConstant.DistributionFloat.Distribution.Object
	float Constant;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: DistributionFloatConstantCurve.DistributionFloat.Distribution.Object
	InterpCurveFloat ConstantCurve;//[Offset: 0x38, Size: 0x18]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object
	FName ParameterName;//[Offset: 0x38, Size: 0x8]
	float MinInput;//[Offset: 0x40, Size: 0x4]
	float MaxInput;//[Offset: 0x44, Size: 0x4]
	float MinOutput;//[Offset: 0x48, Size: 0x4]
	float MaxOutput;//[Offset: 0x4c, Size: 0x4]
	byte ParamMode;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: DistributionFloatParticleParameter.DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object

--------------------------------
Class: DistributionFloatUniform.DistributionFloat.Distribution.Object
	float Min;//[Offset: 0x34, Size: 0x4]
	float Max;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: DistributionFloatUniformCurve.DistributionFloat.Distribution.Object
	InterpCurveVector2D ConstantCurve;//[Offset: 0x38, Size: 0x18]

--------------------------------
Class: InterpCurveVector2D
	InterpCurvePointVector2D[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector2D
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector2D OutVal;//[Offset: 0x4, Size: 0x8]
	Vector2D ArriveTangent;//[Offset: 0xc, Size: 0x8]
	Vector2D LeaveTangent;//[Offset: 0x14, Size: 0x8]
	byte InterpMode;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: DistributionVectorConstant.DistributionVector.Distribution.Object
	Vector Constant;//[Offset: 0x34, Size: 0xc]
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	byte LockedAxes;//[Offset: 0x41, Size: 0x1]

--------------------------------
Class: DistributionVectorConstantCurve.DistributionVector.Distribution.Object
	InterpCurveVector ConstantCurve;//[Offset: 0x38, Size: 0x18]
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	byte LockedAxes;//[Offset: 0x51, Size: 0x1]

--------------------------------
Class: DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object
	FName ParameterName;//[Offset: 0x44, Size: 0x8]
	Vector MinInput;//[Offset: 0x4c, Size: 0xc]
	Vector MaxInput;//[Offset: 0x58, Size: 0xc]
	Vector MinOutput;//[Offset: 0x64, Size: 0xc]
	Vector MaxOutput;//[Offset: 0x70, Size: 0xc]
	byte ParamModes;//[Offset: 0x7c, Size: 0x1]

--------------------------------
Class: DistributionVectorParticleParameter.DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object

--------------------------------
Class: DistributionVectorUniform.DistributionVector.Distribution.Object
	Vector Max;//[Offset: 0x34, Size: 0xc]
	Vector Min;//[Offset: 0x40, Size: 0xc]
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	byte LockedAxes;//[Offset: 0x4d, Size: 0x1]
	byte MirrorFlags;//[Offset: 0x4e, Size: 0x1]
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 0x1]

--------------------------------
Class: DistributionVectorUniformCurve.DistributionVector.Distribution.Object
	InterpCurveTwoVectors ConstantCurve;//[Offset: 0x38, Size: 0x18]
	bool bLockAxes1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bLockAxes2;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	byte LockedAxes;//[Offset: 0x51, Size: 0x1]
	byte MirrorFlags;//[Offset: 0x53, Size: 0x1]
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 0x1]

--------------------------------
Class: InterpCurveTwoVectors
	InterpCurvePointTwoVectors[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointTwoVectors
	float InVal;//[Offset: 0x0, Size: 0x4]
	TwoVectors OutVal;//[Offset: 0x4, Size: 0x18]
	TwoVectors ArriveTangent;//[Offset: 0x1c, Size: 0x18]
	TwoVectors LeaveTangent;//[Offset: 0x34, Size: 0x18]
	byte InterpMode;//[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: TwoVectors
	Vector v1;//[Offset: 0x0, Size: 0xc]
	Vector v2;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: DocumentationActor.Actor.Object

--------------------------------
Class: DPICustomScalingRule.Object

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EdGraph.Object
	class EdGraphSchema* Schema;//[Offset: 0x28, Size: 0x8]
	EdGraphNode*[] Nodes;//[Offset: 0x30, Size: 0x10]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bAllowDeletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	bool bAllowRenaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: EdGraphSchema.Object

--------------------------------
Class: GraphNodeContextMenuContext.Object
	Blueprint* Blueprint;//[Offset: 0x28, Size: 0x8]
	EdGraph* Graph;//[Offset: 0x30, Size: 0x8]
	EdGraphNode* Node;//[Offset: 0x38, Size: 0x8]
	bool bIsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: EdGraphNode_Documentation.EdGraphNode.Object
	FString Link;//[Offset: 0x98, Size: 0x10]
	FString Excerpt;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: ViewModeUtils.Object

--------------------------------
Class: EngineBaseTypes.Object

--------------------------------
Class: HandlerComponentFactory.Object

--------------------------------
Class: EngineHandlerComponentFactory.HandlerComponentFactory.Object

--------------------------------
Class: EngineMessage.LocalMessage.Object
	FString FailedPlaceMessage;//[Offset: 0x28, Size: 0x10]
	FString MaxedOutMessage;//[Offset: 0x38, Size: 0x10]
	FString EnteredMessage;//[Offset: 0x48, Size: 0x10]
	FString LeftMessage;//[Offset: 0x58, Size: 0x10]
	FString GlobalNameChange;//[Offset: 0x68, Size: 0x10]
	FString SpecEnteredMessage;//[Offset: 0x78, Size: 0x10]
	FString NewPlayerMessage;//[Offset: 0x88, Size: 0x10]
	FString NewSpecMessage;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: DynamicSubsystem.Subsystem.Object

--------------------------------
Class: EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: EngineTypes.Object

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x2e0, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]
	void OnRep_bEnabled();// 0x6c36e3fee041

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x204, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x208, Size: 0x4]
	ExponentialHeightFogData SecondFogData;//[Offset: 0x20c, Size: 0xc]
	LinearColor FogInscatteringColor;//[Offset: 0x218, Size: 0x10]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x228, Size: 0x8]
	float InscatteringColorCubemapAngle;//[Offset: 0x230, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x234, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x244, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x248, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x24c, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x250, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x254, Size: 0x10]
	float FogMaxOpacity;//[Offset: 0x264, Size: 0x4]
	float StartDistance;//[Offset: 0x268, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x26c, Size: 0x4]
	float LightAttenuation;//[Offset: 0x270, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x278, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x27c, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x280, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x290, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x294, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x298, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x6c4be3fee041
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x6c4ae3fee041
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x6c49e3fee041
	void SetVolumetricFogDistance(float NewValue);// 0x6c48e3fee041
	void SetVolumetricFogAlbedo(Color NewValue);// 0x6c47e3fee041
	void SetVolumetricFog(bool bNewValue);// 0x6c46e3fee041
	void SetStartDistance(float Value);// 0x6c45e3fee041
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x6c44e3fee041
	void SetLightAttenuation(float Value);// 0x6c43e3fee041
	void SetInscatteringTextureTint(LinearColor Value);// 0x6c42e3fee041
	void SetInscatteringColorCubemapAngle(float Value);// 0x6c41e3fee041
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x6c40e3fee041
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x6c3fe3fee041
	void SetFogMaxOpacity(float Value);// 0x6c3ee3fee041
	void SetFogInscatteringColor(LinearColor Value);// 0x6c3de3fee041
	void SetFogHeightFalloff(float Value);// 0x6c3ce3fee041
	void SetFogDensity(float Value);// 0x6c3be3fee041
	void SetFogCutoffDistance(float Value);// 0x6c3ae3fee041
	void SetDirectionalInscatteringStartDistance(float Value);// 0x6c39e3fee041
	void SetDirectionalInscatteringExponent(float Value);// 0x6c38e3fee041
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x6c37e3fee041

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: FontFace.Object
	FString SourceFilename;//[Offset: 0x30, Size: 0x10]
	enum Hinting;//[Offset: 0x40, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x41, Size: 0x1]
	bool IsKeepInMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	enum LayoutMethod;//[Offset: 0x43, Size: 0x1]

--------------------------------
Class: FontImportOptions.Object
	FontImportOptionsData Data;//[Offset: 0x28, Size: 0xa8]

--------------------------------
Class: ForceFeedbackAttenuation.Object
	ForceFeedbackAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0xb0]

--------------------------------
Class: ForceFeedbackAttenuationSettings.BaseAttenuationSettings

--------------------------------
Class: ForceFeedbackComponent.SceneComponent.ActorComponent.Object
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x208, Size: 0x8]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x210, Size: 0x1]
	float IntensityMultiplier;//[Offset: 0x214, Size: 0x4]
	ForceFeedbackAttenuation* AttenuationSettings;//[Offset: 0x218, Size: 0x8]
	ForceFeedbackAttenuationSettings AttenuationOverrides;//[Offset: 0x220, Size: 0xb0]
	delegate OnForceFeedbackFinished;//[Offset: 0x2d0, Size: 0x10]
	void Stop();// 0x6c55e3fee041
	void SetIntensityMultiplier(float NewIntensityMultiplier);// 0x6c54e3fee041
	void SetForceFeedbackEffect(ForceFeedbackEffect* NewForceFeedbackEffect);// 0x6c53e3fee041
	void Play(float StartTime);// 0x6c52e3fee041
	bool BP_GetAttenuationSettingsToApply(out ForceFeedbackAttenuationSettings OutAttenuationSettings);// 0x6c51e3fee041
	void AdjustAttenuation(out const ForceFeedbackAttenuationSettings InAttenuationSettings);// 0x6c50e3fee041

--------------------------------
Class: GameEngine.Engine.Object
	float MaxDeltaTime;//[Offset: 0xe08, Size: 0x4]
	float ServerFlushLogInterval;//[Offset: 0xe0c, Size: 0x4]
	GameInstance* GameInstance;//[Offset: 0xe10, Size: 0x8]

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x380, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 0x1]
	int NumSpectators;//[Offset: 0x38c, Size: 0x4]
	int NumPlayers;//[Offset: 0x390, Size: 0x4]
	int NumBots;//[Offset: 0x394, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x398, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x39c, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x3a0, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x3a8, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x3b8, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x3bc, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	void StartMatch();// 0x41ade3fee041
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x41ace3fee041
	void Say(FString Msg);// 0x41abe3fee041
	void RestartGame();// 0x41aae3fee041
	bool ReadyToStartMatch();// 0x41a9e3fee041
	bool ReadyToEndMatch();// 0x41a8e3fee041
	bool NeedBlockLoadLevelWhenStartMatch();// 0x41a7e3fee041
	void K2_OnSetMatchState(FName NewState);// 0x41a6e3fee041
	bool IsMatchInProgress();// 0x41a5e3fee041
	FName GetMatchState();// 0x41a4e3fee041
	void EndMatch();// 0x41a3e3fee041
	void AbortMatch();// 0x41a2e3fee041

--------------------------------
Class: GameplayStatics.BlueprintFunctionLibrary.Object
	void UnloadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0x4436e3fee041
	void UnloadStreamLevel(const Object* WorldContextObject, FName LevelName, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0x4435e3fee041
	bool SuggestProjectileVelocity_CustomArc(const Object* WorldContextObject, out Vector OutLaunchVelocity, Vector StartPos, Vector EndPos, float OverrideGravityZ, float ArcParam);// 0x4434e3fee041
	AudioComponent* SpawnSoundAttached(SoundBase* Sound, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0x4433e3fee041
	AudioComponent* SpawnSoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0x4432e3fee041
	AudioComponent* SpawnSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0x4431e3fee041
	Object* SpawnObject(class Object ObjectClass, Object* Outer);// 0x4430e3fee041
	ForceFeedbackComponent* SpawnForceFeedbackAttached(ForceFeedbackEffect* ForceFeedbackEffect, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x442fe3fee041
	ForceFeedbackComponent* SpawnForceFeedbackAtLocation(const Object* WorldContextObject, ForceFeedbackEffect* ForceFeedbackEffect, Vector Location, Rotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x442ee3fee041
	ParticleSystemComponent* SpawnEmitterAttached(ParticleSystem* EmitterTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivate);// 0x442de3fee041
	ParticleSystemComponent* SpawnEmitterAtLocation(const Object* WorldContextObject, ParticleSystem* EmitterTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivateSystem);// 0x442ce3fee041
	AudioComponent* SpawnDialogueAttached(DialogueWave* Dialogue, out const DialogueContext Context, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x442be3fee041
	AudioComponent* SpawnDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x442ae3fee041
	AudioComponent* SpawnDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy);// 0x4429e3fee041
	DecalComponent* SpawnDecalAttached(MaterialInterface* DecalMaterial, Vector DecalSize, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, float LifeSpan);// 0x4428e3fee041
	DecalComponent* SpawnDecalAtLocation(const Object* WorldContextObject, MaterialInterface* DecalMaterial, Vector DecalSize, Vector Location, Rotator Rotation, float LifeSpan);// 0x4427e3fee041
	void SetWorldOriginLocation(const Object* WorldContextObject, IntVector NewLocation);// 0x4426e3fee041
	void SetViewportMouseCaptureMode(const Object* WorldContextObject, const enum MouseCaptureMode);// 0x4425e3fee041
	void SetSubtitlesEnabled(bool bEnabled);// 0x4424e3fee041
	void SetSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);// 0x4423e3fee041
	void SetSoundClassDistanceScale(const Object* WorldContextObject, SoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec);// 0x4422e3fee041
	void SetPlayerControllerID(PlayerController* Player, int ControllerId);// 0x4421e3fee041
	void SetMaxAudioChannelsScaled(const Object* WorldContextObject, float MaxChannelCountScale);// 0x4420e3fee041
	void SetGlobalTimeDilation(const Object* WorldContextObject, float TimeDilation);// 0x441fe3fee041
	void SetGlobalPitchModulation(const Object* WorldContextObject, float PitchModulation, float TimeSec);// 0x441ee3fee041
	void SetGlobalListenerFocusParameters(const Object* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);// 0x441de3fee041
	bool SetGamePaused(const Object* WorldContextObject, bool bPaused);// 0x441ce3fee041
	void SetForceDisableSplitscreen(const Object* WorldContextObject, bool bDisable);// 0x441be3fee041
	void SetEnableWorldRendering(const Object* WorldContextObject, bool bEnable);// 0x441ae3fee041
	void SetBaseSoundMix(const Object* WorldContextObject, SoundMix* InSoundMix);// 0x4419e3fee041
	bool SaveGameToSlot(SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0x4418e3fee041
	void RemovePlayer(PlayerController* Player, bool bDestroyPawn);// 0x4417e3fee041
	Vector RebaseZeroOriginOntoLocal(Object* WorldContextObject, Vector WorldLocation);// 0x4416e3fee041
	Vector RebaseLocalOriginOntoZero(Object* WorldContextObject, Vector WorldLocation);// 0x4415e3fee041
	void PushSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0x4414e3fee041
	bool ProjectWorldToScreen(PlayerController* Player, out const Vector WorldPosition, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0x4413e3fee041
	void PrimeSound(SoundBase* InSound);// 0x4412e3fee041
	void PopSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0x4411e3fee041
	void PlayWorldCameraShake(const Object* WorldContextObject, class CameraShakeBase Shake, Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);// 0x4410e3fee041
	void PlaySoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, Actor* OwningActor);// 0x440fe3fee041
	void PlaySound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, Actor* OwningActor, bool bIsUISound);// 0x440ee3fee041
	void PlayDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings);// 0x440de3fee041
	void PlayDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);// 0x440ce3fee041
	FString ParseOption(FString Options, FString Key);// 0x440be3fee041
	void OpenLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bAbsolute, FString Options);// 0x440ae3fee041
	void OpenLevel(const Object* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);// 0x4409e3fee041
	HitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, Vector Location, Vector ImpactPoint, Vector Normal, Vector ImpactNormal, PhysicalMaterial* PhysMat, Actor* HitActor, PrimitiveComponent* HitComponent, FName HitBoneName, int HitItem, int FaceIndex, Vector TraceStart, Vector TraceEnd);// 0x4408e3fee041
	void LoadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0x4407e3fee041
	void LoadStreamLevel(const Object* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0x4406e3fee041
	SaveGame* LoadGameFromSlot(FString SlotName, const int UserIndex);// 0x4405e3fee041
	bool IsSplitscreenForceDisabled(const Object* WorldContextObject);// 0x4404e3fee041
	bool IsGamePaused(const Object* WorldContextObject);// 0x4403e3fee041
	bool HasOption(FString Options, FString InKey);// 0x4402e3fee041
	bool HasLaunchOption(FString OptionToCheck);// 0x4401e3fee041
	int GrassOverlappingSphereCount(const Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x4400e3fee041
	IntVector GetWorldOriginLocation(const Object* WorldContextObject);// 0x43ffe3fee041
	float GetWorldDeltaSeconds(const Object* WorldContextObject);// 0x43fee3fee041
	void GetViewProjectionMatrix(MinimalViewInfo DesiredView, out Matrix ViewMatrix, out Matrix ProjectionMatrix, out Matrix ViewProjectionMatrix);// 0x43fde3fee041
	enum GetViewportMouseCaptureMode(const Object* WorldContextObject);// 0x43fce3fee041
	float GetUnpausedTimeSeconds(const Object* WorldContextObject);// 0x43fbe3fee041
	float GetTimeSeconds(const Object* WorldContextObject);// 0x43fae3fee041
	byte GetSurfaceType(out const HitResult Hit);// 0x43f9e3fee041
	LevelStreaming* GetStreamingLevel(const Object* WorldContextObject, FName PackageName);// 0x43f8e3fee041
	float GetRealTimeSeconds(const Object* WorldContextObject);// 0x43f7e3fee041
	Pawn* GetPlayerPawn(const Object* WorldContextObject, int PlayerIndex);// 0x43f6e3fee041
	int GetPlayerControllerID(PlayerController* Player);// 0x43f5e3fee041
	PlayerController* GetPlayerControllerFromID(const Object* WorldContextObject, int ControllerId);// 0x43f4e3fee041
	PlayerController* GetPlayerController(const Object* WorldContextObject, int PlayerIndex);// 0x43f3e3fee041
	Character* GetPlayerCharacter(const Object* WorldContextObject, int PlayerIndex);// 0x43f2e3fee041
	PlayerCameraManager* GetPlayerCameraManager(const Object* WorldContextObject, int PlayerIndex);// 0x43f1e3fee041
	FString GetPlatformName();// 0x43f0e3fee041
	class Object GetObjectClass(const Object* Object);// 0x43efe3fee041
	int GetMaxAudioChannelCount(const Object* WorldContextObject);// 0x43eee3fee041
	void GetKeyValue(FString Pair, out FString Key, out FString Value);// 0x43ede3fee041
	int GetIntOption(FString Options, FString Key, int DefaultValue);// 0x43ece3fee041
	float GetGlobalTimeDilation(const Object* WorldContextObject);// 0x43ebe3fee041
	GameStateBase* GetGameState(const Object* WorldContextObject);// 0x43eae3fee041
	GameModeBase* GetGameMode(const Object* WorldContextObject);// 0x43e9e3fee041
	GameInstance* GetGameInstance(const Object* WorldContextObject);// 0x43e8e3fee041
	bool GetEnableWorldRendering(const Object* WorldContextObject);// 0x43e7e3fee041
	ReverbEffect* GetCurrentReverbEffect(const Object* WorldContextObject);// 0x43e6e3fee041
	FString GetCurrentLevelName(const Object* WorldContextObject, bool bRemovePrefixString);// 0x43e5e3fee041
	bool GetClosestListenerLocation(const Object* WorldContextObject, out const Vector Location, float MaximumRange, const bool bAllowAttenuationOverride, out Vector ListenerPosition);// 0x43e4e3fee041
	float GetAudioTimeSeconds(const Object* WorldContextObject);// 0x43e3e3fee041
	void GetAllActorsWithTag(const Object* WorldContextObject, FName Tag, out Actor*[] OutActors);// 0x43e2e3fee041
	void GetAllActorsWithInterface(const Object* WorldContextObject, class Interface Interface, out Actor*[] OutActors);// 0x43e1e3fee041
	void GetAllActorsOfClassWithTag(const Object* WorldContextObject, class Actor ActorClass, FName Tag, out Actor*[] OutActors);// 0x43e0e3fee041
	void GetAllActorsOfClass(const Object* WorldContextObject, class Actor ActorClass, out Actor*[] OutActors);// 0x43dfe3fee041
	Actor* GetActorOfClass(const Object* WorldContextObject, class Actor ActorClass);// 0x43dee3fee041
	void GetActorArrayBounds(out const Actor*[] Actors, bool bOnlyCollidingComponents, out Vector Center, out Vector BoxExtent);// 0x43dde3fee041
	Vector GetActorArrayAverageLocation(out const Actor*[] Actors);// 0x43dce3fee041
	void GetAccurateRealTime(const Object* WorldContextObject, out int Seconds, out float PartialSeconds);// 0x43dbe3fee041
	void FlushLevelStreaming(const Object* WorldContextObject);// 0x43dae3fee041
	Actor* FinishSpawningActor(Actor* Actor, out const Transform SpawnTransform);// 0x43d9e3fee041
	bool FindCollisionUV(out const HitResult Hit, int UVChannel, out Vector2D UV);// 0x43d8e3fee041
	void EnableLiveStreaming(bool Enable);// 0x43d7e3fee041
	bool DoesSaveGameExist(FString SlotName, const int UserIndex);// 0x43d6e3fee041
	bool DeprojectScreenToWorld(PlayerController* Player, out const Vector2D ScreenPosition, out Vector WorldPosition, out Vector WorldDirection);// 0x43d5e3fee041
	bool DeleteGameInSlot(FString SlotName, const int UserIndex);// 0x43d4e3fee041
	void DeactivateReverbEffect(const Object* WorldContextObject, FName TagName);// 0x43d3e3fee041
	AudioComponent* CreateSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0x43d2e3fee041
	SaveGame* CreateSaveGameObject(class SaveGame SaveGameClass);// 0x43d1e3fee041
	PlayerController* CreatePlayer(const Object* WorldContextObject, int ControllerId, bool bSpawnPlayerController);// 0x43d0e3fee041
	void ClearSoundMixModifiers(const Object* WorldContextObject);// 0x43cfe3fee041
	void ClearSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float FadeoutTime);// 0x43cee3fee041
	void CancelAsyncLoading();// 0x43cde3fee041
	void BreakHitResult(out const HitResult Hit, out bool bBlockingHit, out bool bInitialOverlap, out float Time, out float Distance, out Vector Location, out Vector ImpactPoint, out Vector Normal, out Vector ImpactNormal, out PhysicalMaterial* PhysMat, out Actor* HitActor, out PrimitiveComponent* HitComponent, out FName HitBoneName, out int HitItem, out int FaceIndex, out Vector TraceStart, out Vector TraceEnd);// 0x43cce3fee041
	bool BlueprintSuggestProjectileVelocity(const Object* WorldContextObject, out Vector TossVelocity, Vector StartLocation, Vector EndLocation, float LaunchSpeed, float OverrideGravityZ, byte TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);// 0x43cbe3fee041
	bool Blueprint_PredictProjectilePath_ByTraceChannel(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x43cae3fee041
	bool Blueprint_PredictProjectilePath_ByObjectType(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x43c9e3fee041
	bool Blueprint_PredictProjectilePath_Advanced(const Object* WorldContextObject, out const PredictProjectilePathParams PredictParams, out PredictProjectilePathResult PredictResult);// 0x43c8e3fee041
	Actor* BeginSpawningActorFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, bool bNoCollisionFail, Actor* Owner);// 0x43c7e3fee041
	Actor* BeginSpawningActorFromBlueprint(const Object* WorldContextObject, const Blueprint* Blueprint, out const Transform SpawnTransform, bool bNoCollisionFail);// 0x43c6e3fee041
	Actor* BeginDeferredActorSpawnFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner);// 0x43c5e3fee041
	bool AreSubtitlesEnabled();// 0x43c4e3fee041
	bool AreAnyListenersWithinRange(const Object* WorldContextObject, out const Vector Location, float MaximumRange);// 0x43c3e3fee041
	bool ApplyRadialDamageWithFalloff(const Object* WorldContextObject, float BaseDamage, float MinimumDamage, out const Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, byte DamagePreventionChannel);// 0x43c2e3fee041
	bool ApplyRadialDamage(const Object* WorldContextObject, float BaseDamage, out const Vector Origin, float DamageRadius, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, bool bDoFullDamage, byte DamagePreventionChannel);// 0x43c1e3fee041
	float ApplyPointDamage(Actor* DamagedActor, float BaseDamage, out const Vector HitFromDirection, out const HitResult HitInfo, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x43c0e3fee041
	float ApplyDamage(Actor* DamagedActor, float BaseDamage, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x43bfe3fee041
	void AnnounceAccessibleString(FString AnnouncementString);// 0x43bee3fee041
	void ActivateReverbEffect(const Object* WorldContextObject, ReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime);// 0x43bde3fee041

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 0xc]
	Vector LaunchVelocity;//[Offset: 0xc, Size: 0xc]
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float ProjectileRadius;//[Offset: 0x1c, Size: 0x4]
	float MaxSimTime;//[Offset: 0x20, Size: 0x4]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	byte TraceChannel;//[Offset: 0x25, Size: 0x1]
	byte[] ObjectTypes;//[Offset: 0x28, Size: 0x10]
	Actor*[] ActorsToIgnore;//[Offset: 0x38, Size: 0x10]
	float SimFrequency;//[Offset: 0x48, Size: 0x4]
	float OverrideGravityZ;//[Offset: 0x4c, Size: 0x4]
	byte DrawDebugType;//[Offset: 0x50, Size: 0x1]
	float DrawDebugTime;//[Offset: 0x54, Size: 0x4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 0x10]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 0x1c]
	HitResult HitResult;//[Offset: 0x30, Size: 0x98]

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x32c, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x334, Size: 0x8]
	int ElapsedTime;//[Offset: 0x33c, Size: 0x4]
	void OnRep_MatchState();// 0x445de3fee041
	void OnRep_ElapsedTime();// 0x445ce3fee041

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x2f0, Size: 0x8]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x6c9de3fee041
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x6c9ce3fee041

--------------------------------
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x368, Size: 0x4]
	float OuterConeAngle;//[Offset: 0x36c, Size: 0x4]
	float MobileSpotLightAnglesFalloffExponent;//[Offset: 0x370, Size: 0x4]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x7154e3fee041
	void SetMobileSpotLightAnglesFalloffExponent(float NewMobileSpotLightAnglesFalloffExponent);// 0x7153e3fee041
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x7152e3fee041

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 0x1]
	float LightFalloffExponent;//[Offset: 0x358, Size: 0x4]
	float SourceRadius;//[Offset: 0x35c, Size: 0x4]
	float SoftSourceRadius;//[Offset: 0x360, Size: 0x4]
	float SourceLength;//[Offset: 0x364, Size: 0x4]
	void SetSourceRadius(float bNewValue);// 0x70d7e3fee041
	void SetSourceLength(float NewValue);// 0x70d6e3fee041
	void SetSoftSourceRadius(float bNewValue);// 0x70d5e3fee041
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x70d4e3fee041

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	int LocalLightID;//[Offset: 0x334, Size: 0x4]
	int SampleRadius;//[Offset: 0x338, Size: 0x4]
	enum IntensityUnits;//[Offset: 0x33c, Size: 0x1]
	float Radius;//[Offset: 0x340, Size: 0x4]
	float AttenuationRadius;//[Offset: 0x344, Size: 0x4]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x348, Size: 0xc]
	void SetIntensityUnits(enum NewIntensityUnits);// 0x7070e3fee041
	void SetAttenuationRadius(float NewRadius);// 0x706fe3fee041
	float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0x706ee3fee041

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: GeneratedMeshAreaLight.SpotLight.Light.Actor.Object

--------------------------------
Class: GlobalILCActor.Actor.Object
	bool bIsGlobalILC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	GlobalILCComponent* ILCComponent;//[Offset: 0x2e8, Size: 0x8]

--------------------------------
Class: GlobalILCComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte VolumeType;//[Offset: 0x5b0, Size: 0x1]
	Vector BoxExtent;//[Offset: 0x5b4, Size: 0xc]
	float LineThickness;//[Offset: 0x5c0, Size: 0x4]

--------------------------------
Class: HapticFeedbackEffect_Buffer.HapticFeedbackEffect_Base.Object
	byte[] Amplitudes;//[Offset: 0x28, Size: 0x10]
	int SampleRate;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: HapticFeedbackEffect_Curve.HapticFeedbackEffect_Base.Object
	HapticFeedbackDetails_Curve HapticDetails;//[Offset: 0x28, Size: 0x110]

--------------------------------
Class: HapticFeedbackDetails_Curve
	RuntimeFloatCurve Frequency;//[Offset: 0x0, Size: 0x88]
	RuntimeFloatCurve Amplitude;//[Offset: 0x88, Size: 0x88]

--------------------------------
Class: HapticFeedbackEffect_SoundWave.HapticFeedbackEffect_Base.Object
	SoundWave* SoundWave;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: HealthSnapshotBlueprintLibrary.BlueprintFunctionLibrary.Object
	void StopPerformanceSnapshots();// 0x6ca0e3fee041
	void StartPerformanceSnapshots();// 0x6c9fe3fee041
	void LogPerformanceSnapshot(const FString SnapshotTitle, bool bResetStats);// 0x6c9ee3fee041

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x658, Size: 0x10]
	int NumCustomDataFloats;//[Offset: 0x668, Size: 0x4]
	float[] PerInstanceSMCustomData;//[Offset: 0x670, Size: 0x10]
	int InstancingRandomSeed;//[Offset: 0x680, Size: 0x4]
	int InstanceStartCullDistance;//[Offset: 0x684, Size: 0x4]
	int InstanceEndCullDistance;//[Offset: 0x688, Size: 0x4]
	int[] InstanceReorderTable;//[Offset: 0x690, Size: 0x10]
	int NumPendingLightmaps;//[Offset: 0x6e8, Size: 0x4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x6f0, Size: 0x10]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x6703e3fee041
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0x6702e3fee041
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x6701e3fee041
	bool RemoveInstance(int InstanceIndex);// 0x6700e3fee041
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x66ffe3fee041
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x66fee3fee041
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x66fde3fee041
	int GetInstanceCount();// 0x66fce3fee041
	void ClearInstances();// 0x66fbe3fee041
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x66fae3fee041
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x66f9e3fee041
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x66f8e3fee041
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices);// 0x66f7e3fee041
	int AddInstance(out const Transform InstanceTransform);// 0x66f6e3fee041

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x718, Size: 0x10]
	int NumBuiltInstances;//[Offset: 0x728, Size: 0x4]
	Box BuiltInstanceBounds;//[Offset: 0x730, Size: 0x1c]
	Box UnbuiltInstanceBounds;//[Offset: 0x74c, Size: 0x1c]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x768, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x778, Size: 0x1]
	int OcclusionLayerNumNodes;//[Offset: 0x780, Size: 0x4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x784, Size: 0x1c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 0x1]
	int InstanceCountToRender;//[Offset: 0x7a4, Size: 0x4]
	bool bReceivePointLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a8, Size: 0x1]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x6704e3fee041

--------------------------------
Class: HLODEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: HLODProxy.Object
	HLODProxyMesh[] ProxyMeshes;//[Offset: 0x28, Size: 0x10]
	<HLODProxyDesc*,HLODProxyMesh> HLODActors;//[Offset: 0x38, Size: 0x50]

--------------------------------
Class: HLODProxyMesh
	LODActor* LODActor;//[Offset: 0x0, Size: 0x1c]
	StaticMesh* StaticMesh;//[Offset: 0x20, Size: 0x8]
	FName Key;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: LODActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2e0, Size: 0x8]
	<MaterialInterface*,InstancedStaticMeshComponent*> ImpostersStaticMeshComponents;//[Offset: 0x2e8, Size: 0x50]
	HLODProxy* Proxy;//[Offset: 0x338, Size: 0x8]
	FName Key;//[Offset: 0x340, Size: 0x8]
	float LODDrawDistance;//[Offset: 0x348, Size: 0x4]
	int LODLevel;//[Offset: 0x34c, Size: 0x4]
	Actor*[] SubActors;//[Offset: 0x350, Size: 0x10]
	Actor*[] LazySubActors;//[Offset: 0x360, Size: 0x10]
	Level* ParentLevel;//[Offset: 0x370, Size: 0x1c]
	byte CachedNumHLODLevels;//[Offset: 0x398, Size: 0x1]

--------------------------------
Class: HLODProxyDesc.Object

--------------------------------
Class: ILCDynamicScaleComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ImportanceSamplingLibrary.BlueprintFunctionLibrary.Object
	float RandomSobolFloat(int Index, int Dimension, float Seed);// 0x6ca9e3fee041
	Vector RandomSobolCell3D(int Index, int NumCells, Vector Cell, Vector Seed);// 0x6ca8e3fee041
	Vector2D RandomSobolCell2D(int Index, int NumCells, Vector2D Cell, Vector2D Seed);// 0x6ca7e3fee041
	float NextSobolFloat(int Index, int Dimension, float PreviousValue);// 0x6ca6e3fee041
	Vector NextSobolCell3D(int Index, int NumCells, Vector PreviousValue);// 0x6ca5e3fee041
	Vector2D NextSobolCell2D(int Index, int NumCells, Vector2D PreviousValue);// 0x6ca4e3fee041
	ImportanceTexture MakeImportanceTexture(Texture2D* Texture, byte WeightingFunc);// 0x6ca3e3fee041
	void ImportanceSample(out const ImportanceTexture Texture, out const Vector2D Rand, int Samples, float Intensity, out Vector2D SamplePosition, out LinearColor SampleColor, out float SampleIntensity, out float SampleSize);// 0x6ca2e3fee041
	void BreakImportanceTexture(out const ImportanceTexture ImportanceTexture, out Texture2D* Texture, out byte WeightingFunc);// 0x6ca1e3fee041

--------------------------------
Class: ImportanceTexture
	IntPoint Size;//[Offset: 0x0, Size: 0x8]
	int NumMips;//[Offset: 0x8, Size: 0x4]
	float[] MarginalCDF;//[Offset: 0x10, Size: 0x10]
	float[] ConditionalCDF;//[Offset: 0x20, Size: 0x10]
	Color[] TextureData;//[Offset: 0x30, Size: 0x10]
	Texture2D* Texture;//[Offset: 0x40, Size: 0x8]
	byte Weighting;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ImportantToggleSettingInterface.Interface.Object

--------------------------------
Class: InGameAdManager.PlatformInterfaceBase.Object
	bool bShouldPauseWhileAdOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	delegate[] ClickedBannerDelegates;//[Offset: 0x40, Size: 0x10]
	delegate[] ClosedAdDelegates;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: InputActionDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputActionDelegateBinding[] InputActionDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintInputActionDelegateBinding.BlueprintInputDelegateBinding
	FName InputActionName;//[Offset: 0x4, Size: 0x8]
	byte InputKeyEvent;//[Offset: 0xc, Size: 0x1]
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: BlueprintInputDelegateBinding
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bExecuteWhenPaused;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverrideParentBinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: InputAxisDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisDelegateBinding[] InputAxisDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintInputAxisDelegateBinding.BlueprintInputDelegateBinding
	FName InputAxisName;//[Offset: 0x4, Size: 0x8]
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisKeyDelegateBinding[] InputAxisKeyDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintInputAxisKeyDelegateBinding.BlueprintInputDelegateBinding
	Key AxisKey;//[Offset: 0x8, Size: 0x18]
	FName FunctionNameToBind;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: InputKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputKeyDelegateBinding[] InputKeyDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintInputKeyDelegateBinding.BlueprintInputDelegateBinding
	InputChord InputChord;//[Offset: 0x8, Size: 0x20]
	byte InputKeyEvent;//[Offset: 0x28, Size: 0x1]
	FName FunctionNameToBind;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: InputChord
	Key Key;//[Offset: 0x0, Size: 0x18]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: InputSettings.Object
	InputAxisConfigEntry[] AxisConfig;//[Offset: 0x28, Size: 0x10]
	bool bAltEnterTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bF11TogglesFullscreen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bUseMouseForTouch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]
	bool bEnableMouseSmoothing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1]
	bool bEnableFOVScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1]
	bool bCaptureMouseOnLaunch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1]
	bool bDefaultViewportMouseLock;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1]
	bool bAlwaysShowTouchInterface;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1]
	bool bShowConsoleOnFourFingerTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1]
	bool bEnableGestureRecognizer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1]
	bool bUseAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	FString[] ExcludedAutocorrectOS;//[Offset: 0x40, Size: 0x10]
	FString[] ExcludedAutocorrectCultures;//[Offset: 0x50, Size: 0x10]
	FString[] ExcludedAutocorrectDeviceModels;//[Offset: 0x60, Size: 0x10]
	enum DefaultViewportMouseCaptureMode;//[Offset: 0x70, Size: 0x1]
	enum DefaultViewportMouseLockMode;//[Offset: 0x71, Size: 0x1]
	float FOVScale;//[Offset: 0x74, Size: 0x4]
	float DoubleClickTime;//[Offset: 0x78, Size: 0x4]
	InputActionKeyMapping[] ActionMappings;//[Offset: 0x80, Size: 0x10]
	InputAxisKeyMapping[] AxisMappings;//[Offset: 0x90, Size: 0x10]
	InputActionSpeechMapping[] SpeechMappings;//[Offset: 0xa0, Size: 0x10]
	class PlayerInput* DefaultPlayerInputClass;//[Offset: 0xb0, Size: 0x28]
	class InputComponent* DefaultInputComponentClass;//[Offset: 0xd8, Size: 0x28]
	SoftObjectPath DefaultTouchInterface;//[Offset: 0x100, Size: 0x18]
	Key ConsoleKey;//[Offset: 0x118, Size: 0x18]
	Key[] ConsoleKeys;//[Offset: 0x130, Size: 0x10]
	void SaveKeyMappings();// 0x6cbde3fee041
	void RemoveAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x6cbce3fee041
	void RemoveActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x6cbbe3fee041
	InputSettings* GetInputSettings();// 0x6cbae3fee041
	void GetAxisNames(out FName[] AxisNames);// 0x6cb9e3fee041
	void GetAxisMappingByName(const FName InAxisName, out InputAxisKeyMapping[] OutMappings);// 0x6cb8e3fee041
	void GetActionNames(out FName[] ActionNames);// 0x6cb7e3fee041
	void GetActionMappingByName(const FName InActionName, out InputActionKeyMapping[] OutMappings);// 0x6cb6e3fee041
	void ForceRebuildKeymaps();// 0x6cb5e3fee041
	void AddAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x6cb4e3fee041
	void AddActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x6cb3e3fee041

--------------------------------
Class: InputAxisKeyMapping
	FName AxisName;//[Offset: 0x0, Size: 0x8]
	float Scale;//[Offset: 0x8, Size: 0x4]
	Key Key;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: InputActionKeyMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	Key Key;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: InputAxisConfigEntry
	FName AxisKeyName;//[Offset: 0x0, Size: 0x8]
	InputAxisProperties AxisProperties;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: InputAxisProperties
	float DeadZone;//[Offset: 0x0, Size: 0x4]
	float Sensitivity;//[Offset: 0x4, Size: 0x4]
	float Exponent;//[Offset: 0x8, Size: 0x4]
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: InputActionSpeechMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8]
	FName SpeechKeyword;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InputTouchDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputTouchDelegateBinding[] InputTouchDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintInputTouchDelegateBinding.BlueprintInputDelegateBinding
	byte InputKeyEvent;//[Offset: 0x1, Size: 0x1]
	FName FunctionNameToBind;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: InputVectorAxisDelegateBinding.InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: Interface_AssetUserData.Interface.Object

--------------------------------
Class: BoneReferenceSkeletonProvider.Interface.Object

--------------------------------
Class: Interface_CollisionDataProvider.Interface.Object

--------------------------------
Class: Interface_PostProcessVolume.Interface.Object

--------------------------------
Class: Interface_PreviewMeshProvider.Interface.Object

--------------------------------
Class: InterpFilter.Object
	FString Caption;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: InterpFilter_Classes.InterpFilter.Object

--------------------------------
Class: InterpFilter_Custom.InterpFilter.Object

--------------------------------
Class: InterpGroupCamera.InterpGroup.Object
	CameraAnim* CameraAnimInst;//[Offset: 0x50, Size: 0x8]
	float CompressTolerance;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: InterpGroupInstCamera.InterpGroupInst.Object

--------------------------------
Class: InterpGroupInstDirector.InterpGroupInst.Object

--------------------------------
Class: InterpToMovementComponent.MovementComponent.ActorComponent.Object
	float Duration;//[Offset: 0xf4, Size: 0x4]
	bool bPauseOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1]
	bool bSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	enum TeleportType;//[Offset: 0xfa, Size: 0x1]
	enum BehaviourType;//[Offset: 0xfb, Size: 0x1]
	bool bCheckIfStillInWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfd, Size: 0x1]
	delegate OnInterpToReverse;//[Offset: 0x100, Size: 0x10]
	delegate OnInterpToStop;//[Offset: 0x110, Size: 0x10]
	delegate OnWaitBeginDelegate;//[Offset: 0x120, Size: 0x10]
	delegate OnWaitEndDelegate;//[Offset: 0x130, Size: 0x10]
	delegate OnResetDelegate;//[Offset: 0x140, Size: 0x10]
	float MaxSimulationTimeStep;//[Offset: 0x150, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x154, Size: 0x4]
	InterpControlPoint[] ControlPoints;//[Offset: 0x158, Size: 0x10]
	void StopSimulating(out const HitResult HitResult);// 0x13c5e3fee041
	void RestartMovement(float InitialDirection);// 0x13c4e3fee041
	void OnInterpToWaitEndDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x13c3e3fee041
	void OnInterpToWaitBeginDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x13c2e3fee041
	void OnInterpToStopDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x13c1e3fee041
	void OnInterpToReverseDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x13c0e3fee041
	void OnInterpToResetDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x13bfe3fee041
	void FinaliseControlPoints();// 0x13bee3fee041

--------------------------------
Class: InterpControlPoint
	Vector PositionControlPoint;//[Offset: 0x0, Size: 0xc]
	bool bPositionIsRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: InterpTrackFloatBase.InterpTrack.Object
	InterpCurveFloat FloatTrack;//[Offset: 0x70, Size: 0x18]
	float CurveTension;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: InterpTrackAnimControl.InterpTrackFloatBase.InterpTrack.Object
	FName SlotName;//[Offset: 0x8c, Size: 0x8]
	AnimControlTrackKey[] AnimSeqs;//[Offset: 0x98, Size: 0x10]
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: AnimControlTrackKey
	float StartTime;//[Offset: 0x0, Size: 0x4]
	AnimSequence* AnimSeq;//[Offset: 0x8, Size: 0x8]
	float AnimStartOffset;//[Offset: 0x10, Size: 0x4]
	float AnimEndOffset;//[Offset: 0x14, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x18, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: InterpTrackVectorBase.InterpTrack.Object
	InterpCurveVector VectorTrack;//[Offset: 0x70, Size: 0x18]
	float CurveTension;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: InterpTrackAudioMaster.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackBoolProp.InterpTrack.Object
	BoolTrackKey[] BoolTrack;//[Offset: 0x70, Size: 0x10]
	FName PropertyName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: BoolTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: InterpTrackColorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8]

--------------------------------
Class: InterpTrackColorScale.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackDirector.InterpTrack.Object
	DirectorTrackCut[] CutTrack;//[Offset: 0x70, Size: 0x10]
	bool bSimulateCameraCutsOnClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: DirectorTrackCut
	float Time;//[Offset: 0x0, Size: 0x4]
	float TransitionTime;//[Offset: 0x4, Size: 0x4]
	FName TargetCamGroup;//[Offset: 0x8, Size: 0x8]
	int ShotNumber;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpTrackEvent.InterpTrack.Object
	EventTrackKey[] EventTrack;//[Offset: 0x70, Size: 0x10]
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bUseCustomEventName;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: EventTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	FName EventName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: InterpTrackFade.InterpTrackFloatBase.InterpTrack.Object
	bool bPersistFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1]
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1]
	LinearColor FadeColor;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: InterpTrackFloatAnimBPParam.InterpTrackFloatBase.InterpTrack.Object
	class Object* AnimBlueprintClass;//[Offset: 0x90, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x98, Size: 0x8]
	FName ParamName;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: InterpTrackFloatMaterialParam.InterpTrackFloatBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10]
	FName ParamName;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: InterpTrackFloatParticleParam.InterpTrackFloatBase.InterpTrack.Object
	FName ParamName;//[Offset: 0x8c, Size: 0x8]

--------------------------------
Class: InterpTrackFloatProp.InterpTrackFloatBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8]

--------------------------------
Class: InterpTrackInstAnimControl.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstAudioMaster.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstProperty.InterpTrackInst.Object
	FieldPathProperty InterpProperty;//[Size: 0x20]
	Object* PropertyOuterObjectInst;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: InterpTrackInstBoolProp.InterpTrackInstProperty.InterpTrackInst.Object
	bool ResetBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: InterpTrackInstColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Color ResetColor;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: InterpTrackInstColorScale.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstEvent.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstFade.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstFloatAnimBPParam.InterpTrackInst.Object
	AnimInstance* AnimScriptInstance;//[Offset: 0x28, Size: 0x8]
	float ResetFloat;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: InterpTrackInstFloatMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10]
	float[] ResetFloats;//[Offset: 0x38, Size: 0x10]
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10]
	InterpTrackFloatMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: PrimitiveMaterialRef
	PrimitiveComponent* Primitive;//[Offset: 0x0, Size: 0x8]
	DecalComponent* Decal;//[Offset: 0x8, Size: 0x8]
	int ElementIndex;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpTrackInstFloatParticleParam.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstFloatProp.InterpTrackInstProperty.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: InterpTrackInstLinearColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	LinearColor ResetColor;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: InterpTrackInstParticleReplay.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstSlomo.InterpTrackInst.Object
	float OldTimeDilation;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstSound.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]
	AudioComponent* PlayAudioComp;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: InterpTrackInstToggle.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1]
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4]
	bool bSavedActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: InterpTrackInstVectorMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10]
	Vector[] ResetVectors;//[Offset: 0x38, Size: 0x10]
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10]
	InterpTrackVectorMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: InterpTrackVectorMaterialParam.InterpTrackVectorBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10]
	FName ParamName;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: InterpTrackInstVectorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Vector ResetVector;//[Offset: 0x58, Size: 0xc]

--------------------------------
Class: InterpTrackInstVisibility.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1]
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: InterpTrackLinearColorBase.InterpTrack.Object
	InterpCurveLinearColor LinearColorTrack;//[Offset: 0x70, Size: 0x18]
	float CurveTension;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: InterpCurveLinearColor
	InterpCurvePointLinearColor[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointLinearColor
	float InVal;//[Offset: 0x0, Size: 0x4]
	LinearColor OutVal;//[Offset: 0x4, Size: 0x10]
	LinearColor ArriveTangent;//[Offset: 0x14, Size: 0x10]
	LinearColor LeaveTangent;//[Offset: 0x24, Size: 0x10]
	byte InterpMode;//[Offset: 0x34, Size: 0x1]

--------------------------------
Class: InterpTrackLinearColorProp.InterpTrackLinearColorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8]

--------------------------------
Class: InterpTrackMoveAxis.InterpTrackFloatBase.InterpTrack.Object
	byte MoveAxis;//[Offset: 0x8c, Size: 0x1]
	InterpLookupTrack LookupTrack;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: InterpTrackParticleReplay.InterpTrack.Object
	ParticleReplayTrackKey[] TrackKeys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: ParticleReplayTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	int ClipIDNumber;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackSlomo.InterpTrackFloatBase.InterpTrack.Object

--------------------------------
Class: InterpTrackSound.InterpTrackVectorBase.InterpTrack.Object
	SoundTrackKey[] Sounds;//[Offset: 0x90, Size: 0x10]
	bool bPlayOnReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bContinueSoundOnMatineeEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1]
	bool bTreatAsDialogue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1]
	bool bAttach;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: SoundTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	float Volume;//[Offset: 0x4, Size: 0x4]
	float Pitch;//[Offset: 0x8, Size: 0x4]
	SoundBase* Sound;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: InterpTrackToggle.InterpTrack.Object
	ToggleTrackKey[] ToggleTrack;//[Offset: 0x70, Size: 0x10]
	bool bActivateSystemEachUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bActivateWithJustAttachedFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: ToggleTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	byte ToggleAction;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: InterpTrackVectorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8]

--------------------------------
Class: InterpTrackVisibility.InterpTrack.Object
	VisibilityTrackKey[] VisibilityTrack;//[Offset: 0x70, Size: 0x10]
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: VisibilityTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	byte Action;//[Offset: 0x4, Size: 0x1]
	byte ActiveCondition;//[Offset: 0x5, Size: 0x1]

--------------------------------
Class: IntSerialization.Object
	uint16 UnsignedInt16Variable;//[Offset: 0x28, Size: 0x2]
	uint32 UnsignedInt32Variable;//[Offset: 0x2c, Size: 0x4]
	uint64 UnsignedInt64Variable;//[Offset: 0x30, Size: 0x8]
	int8 SignedInt8Variable;//[Offset: 0x38, Size: 0x1]
	int16 SignedInt16Variable;//[Offset: 0x3a, Size: 0x2]
	int64 SignedInt64Variable;//[Offset: 0x40, Size: 0x8]
	byte UnsignedInt8Variable;//[Offset: 0x48, Size: 0x1]
	int SignedInt32Variable;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KillZVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: KismetArrayLibrary.BlueprintFunctionLibrary.Object
	void SetArrayPropertyByName(Object* Object, FName PropertyName, out const int[] Value);// 0x6cd4e3fee041
	void FilterArray(out const Actor*[] TargetArray, class Actor FilterClass, out Actor*[] FilteredArray);// 0x6cd3e3fee041
	void Array_Swap(out const int[] TargetArray, int FirstIndex, int SecondIndex);// 0x6cd2e3fee041
	void Array_Shuffle(out const int[] TargetArray);// 0x6cd1e3fee041
	void Array_Set(out const int[] TargetArray, int Index, out const int item, bool bSizeToFit);// 0x6cd0e3fee041
	void Array_Reverse(out const int[] TargetArray);// 0x6ccfe3fee041
	void Array_Resize(out const int[] TargetArray, int Size);// 0x6ccee3fee041
	bool Array_RemoveItem(out const int[] TargetArray, out const int item);// 0x6ccde3fee041
	void Array_Remove(out const int[] TargetArray, int IndexToRemove);// 0x6ccce3fee041
	void Array_RandomFromStream(out const int[] TargetArray, out RandomStream RandomStream, out int OutItem, out int OutIndex);// 0x6ccbe3fee041
	void Array_Random(out const int[] TargetArray, out int OutItem, out int OutIndex);// 0x6ccae3fee041
	int Array_Length(out const int[] TargetArray);// 0x6cc9e3fee041
	int Array_LastIndex(out const int[] TargetArray);// 0x6cc8e3fee041
	bool Array_IsValidIndex(out const int[] TargetArray, int IndexToTest);// 0x6cc7e3fee041
	void Array_Insert(out const int[] TargetArray, out const int NewItem, int Index);// 0x6cc6e3fee041
	bool Array_Identical(out const int[] ArrayA, out const int[] ArrayB);// 0x6cc5e3fee041
	void Array_Get(out const int[] TargetArray, int Index, out int item);// 0x6cc4e3fee041
	int Array_Find(out const int[] TargetArray, out const int ItemToFind);// 0x6cc3e3fee041
	bool Array_Contains(out const int[] TargetArray, out const int ItemToFind);// 0x6cc2e3fee041
	void Array_Clear(out const int[] TargetArray);// 0x6cc1e3fee041
	void Array_Append(out const int[] TargetArray, out const int[] SourceArray);// 0x6cc0e3fee041
	int Array_AddUnique(out const int[] TargetArray, out const int NewItem);// 0x6cbfe3fee041
	int Array_Add(out const int[] TargetArray, out const int NewItem);// 0x6cbee3fee041

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]
	int Seed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: KismetGuidLibrary.BlueprintFunctionLibrary.Object
	void Parse_StringToGuid(FString GuidString, out Guid OutGuid, out bool Success);// 0x6cdbe3fee041
	bool NotEqual_GuidGuid(out const Guid A, out const Guid B);// 0x6cdae3fee041
	Guid NewGuid();// 0x6cd9e3fee041
	bool IsValid_Guid(out const Guid InGuid);// 0x6cd8e3fee041
	void Invalidate_Guid(out Guid InGuid);// 0x6cd7e3fee041
	bool EqualEqual_GuidGuid(out const Guid A, out const Guid B);// 0x6cd6e3fee041
	FString Conv_GuidToString(out const Guid InGuid);// 0x6cd5e3fee041

--------------------------------
Class: KismetInputLibrary.BlueprintFunctionLibrary.Object
	bool PointerEvent_IsTouchEvent(out const PointerEvent Input);// 0x6d0ce3fee041
	bool PointerEvent_IsMouseButtonDown(out const PointerEvent Input, Key MouseButton);// 0x6d0be3fee041
	float PointerEvent_GetWheelDelta(out const PointerEvent Input);// 0x6d0ae3fee041
	int PointerEvent_GetUserIndex(out const PointerEvent Input);// 0x6d09e3fee041
	int PointerEvent_GetTouchpadIndex(out const PointerEvent Input);// 0x6d08e3fee041
	Vector2D PointerEvent_GetScreenSpacePosition(out const PointerEvent Input);// 0x6d07e3fee041
	int PointerEvent_GetPointerIndex(out const PointerEvent Input);// 0x6d06e3fee041
	Vector2D PointerEvent_GetLastScreenSpacePosition(out const PointerEvent Input);// 0x6d05e3fee041
	enum PointerEvent_GetGestureType(out const PointerEvent Input);// 0x6d04e3fee041
	Vector2D PointerEvent_GetGestureDelta(out const PointerEvent Input);// 0x6d03e3fee041
	Key PointerEvent_GetEffectingButton(out const PointerEvent Input);// 0x6d02e3fee041
	Vector2D PointerEvent_GetCursorDelta(out const PointerEvent Input);// 0x6d01e3fee041
	bool Key_IsVectorAxis(out const Key Key);// 0x6d00e3fee041
	bool Key_IsValid(out const Key Key);// 0x6cffe3fee041
	bool Key_IsMouseButton(out const Key Key);// 0x6cfee3fee041
	bool Key_IsModifierKey(out const Key Key);// 0x6cfde3fee041
	bool Key_IsKeyboardKey(out const Key Key);// 0x6cfce3fee041
	bool Key_IsGamepadKey(out const Key Key);// 0x6cfbe3fee041
	bool Key_IsDigital(out const Key Key);// 0x6cfae3fee041
	bool Key_IsButtonAxis(out const Key Key);// 0x6cf9e3fee041
	bool Key_IsAxis3D(out const Key Key);// 0x6cf8e3fee041
	bool Key_IsAxis2D(out const Key Key);// 0x6cf7e3fee041
	bool Key_IsAxis1D(out const Key Key);// 0x6cf6e3fee041
	bool Key_IsAnalog(out const Key Key);// 0x6cf5e3fee041
	enum Key_GetNavigationDirectionFromKey(out const KeyEvent InKeyEvent);// 0x6cf4e3fee041
	enum Key_GetNavigationDirectionFromAnalog(out const AnalogInputEvent InAnalogEvent);// 0x6cf3e3fee041
	enum Key_GetNavigationActionFromKey(out const KeyEvent InKeyEvent);// 0x6cf2e3fee041
	enum Key_GetNavigationAction(out const Key InKey);// 0x6cf1e3fee041
	FText Key_GetDisplayName(out const Key Key);// 0x6cf0e3fee041
	bool InputEvent_IsShiftDown(out const InputEvent Input);// 0x6cefe3fee041
	bool InputEvent_IsRightShiftDown(out const InputEvent Input);// 0x6ceee3fee041
	bool InputEvent_IsRightControlDown(out const InputEvent Input);// 0x6cede3fee041
	bool InputEvent_IsRightCommandDown(out const InputEvent Input);// 0x6cece3fee041
	bool InputEvent_IsRightAltDown(out const InputEvent Input);// 0x6cebe3fee041
	bool InputEvent_IsRepeat(out const InputEvent Input);// 0x6ceae3fee041
	bool InputEvent_IsLeftShiftDown(out const InputEvent Input);// 0x6ce9e3fee041
	bool InputEvent_IsLeftControlDown(out const InputEvent Input);// 0x6ce8e3fee041
	bool InputEvent_IsLeftCommandDown(out const InputEvent Input);// 0x6ce7e3fee041
	bool InputEvent_IsLeftAltDown(out const InputEvent Input);// 0x6ce6e3fee041
	bool InputEvent_IsControlDown(out const InputEvent Input);// 0x6ce5e3fee041
	bool InputEvent_IsCommandDown(out const InputEvent Input);// 0x6ce4e3fee041
	bool InputEvent_IsAltDown(out const InputEvent Input);// 0x6ce3e3fee041
	FText InputChord_GetDisplayName(out const InputChord Key);// 0x6ce2e3fee041
	int GetUserIndex(out const KeyEvent Input);// 0x6ce1e3fee041
	Key GetKey(out const KeyEvent Input);// 0x6ce0e3fee041
	float GetAnalogValue(out const AnalogInputEvent Input);// 0x6cdfe3fee041
	bool EqualEqual_KeyKey(Key A, Key B);// 0x6cdee3fee041
	bool EqualEqual_InputChordInputChord(InputChord A, InputChord B);// 0x6cdde3fee041
	void CalibrateTilt();// 0x6cdce3fee041

--------------------------------
Class: KismetInternationalizationLibrary.BlueprintFunctionLibrary.Object
	bool SetCurrentLocale(FString culture, const bool SaveToConfig);// 0x6d1ae3fee041
	bool SetCurrentLanguageAndLocale(FString culture, const bool SaveToConfig);// 0x6d19e3fee041
	bool SetCurrentLanguage(FString culture, const bool SaveToConfig);// 0x6d18e3fee041
	bool SetCurrentCulture(FString culture, const bool SaveToConfig);// 0x6d17e3fee041
	bool SetCurrentAssetGroupCulture(const FName AssetGroup, FString culture, const bool SaveToConfig);// 0x6d16e3fee041
	FString GetSuitableCulture(out const FString[] AvailableCultures, FString CultureToMatch, FString FallbackCulture);// 0x6d15e3fee041
	FString GetNativeCulture(const enum TextCategory);// 0x6d14e3fee041
	FString[] GetLocalizedCultures(const bool IncludeGame, const bool IncludeEngine, const bool IncludeEditor, const bool IncludeAdditional);// 0x6d13e3fee041
	FString GetCurrentLocale();// 0x6d12e3fee041
	FString GetCurrentLanguage();// 0x6d11e3fee041
	FString GetCurrentCulture();// 0x6d10e3fee041
	FString GetCurrentAssetGroupCulture(const FName AssetGroup);// 0x6d0fe3fee041
	FString GetCultureDisplayName(FString culture, const bool Localized);// 0x6d0ee3fee041
	void ClearCurrentAssetGroupCulture(const FName AssetGroup, const bool SaveToConfig);// 0x6d0de3fee041

--------------------------------
Class: KismetMaterialLibrary.BlueprintFunctionLibrary.Object
	void SetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, out const LinearColor ParameterValue);// 0x6d1fe3fee041
	void SetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, float ParameterValue);// 0x6d1ee3fee041
	LinearColor GetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x6d1de3fee041
	float GetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x6d1ce3fee041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(Object* WorldContextObject, MaterialInterface* Parent, FName OptionalName, enum CreationFlags);// 0x6d1be3fee041

--------------------------------
Class: KismetMathLibrary.BlueprintFunctionLibrary.Object
	int Xor_IntInt(int A, int B);// 0x6fc0e3fee041
	int64 Xor_Int64Int64(int64 A, int64 B);// 0x6fbfe3fee041
	int Wrap(int Value, int Min, int Max);// 0x6fbee3fee041
	Vector WeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float Weight);// 0x6fbde3fee041
	Rotator WeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float Weight);// 0x6fbce3fee041
	float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);// 0x6fbbe3fee041
	float VSizeXYSquared(Vector A);// 0x6fbae3fee041
	float VSizeXY(Vector A);// 0x6fb9e3fee041
	float VSizeSquared(Vector A);// 0x6fb8e3fee041
	float VSize2DSquared(Vector2D A);// 0x6fb7e3fee041
	float VSize2D(Vector2D A);// 0x6fb6e3fee041
	float VSize(Vector A);// 0x6fb5e3fee041
	Vector VLerp(Vector A, Vector B, float Alpha);// 0x6fb4e3fee041
	Vector VInterpTo_Constant(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0x6fb3e3fee041
	Vector VInterpTo(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0x6fb2e3fee041
	Vector VectorSpringInterp(Vector Current, Vector Target, out VectorSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0x6fb1e3fee041
	Vector Vector_Zero();// 0x6fb0e3fee041
	Vector Vector_Up();// 0x6fafe3fee041
	void Vector_UnwindEuler(out Vector A);// 0x6faee3fee041
	Vector2D Vector_UnitCartesianToSpherical(Vector A);// 0x6fade3fee041
	Vector Vector_ToRadians(Vector A);// 0x6face3fee041
	Vector Vector_ToDegrees(Vector A);// 0x6fabe3fee041
	Vector Vector_SnappedToGrid(Vector InVect, float InGridSize);// 0x6faae3fee041
	void Vector_Set(out Vector A, float X, float Y, float Z);// 0x6fa9e3fee041
	Vector Vector_Right();// 0x6fa8e3fee041
	Vector Vector_Reciprocal(out const Vector A);// 0x6fa7e3fee041
	Vector Vector_ProjectOnToNormal(Vector V, Vector InNormal);// 0x6fa6e3fee041
	Vector Vector_One();// 0x6fa5e3fee041
	Vector Vector_NormalUnsafe(out const Vector A);// 0x6fa4e3fee041
	void Vector_Normalize(out Vector A, float Tolerance);// 0x6fa3e3fee041
	Vector Vector_Normal2D(Vector A, float Tolerance);// 0x6fa2e3fee041
	Vector Vector_MirrorByPlane(Vector A, out const Plane InPlane);// 0x6fa1e3fee041
	Vector Vector_Left();// 0x6fa0e3fee041
	bool Vector_IsZero(out const Vector A);// 0x6f9fe3fee041
	bool Vector_IsUnit(out const Vector A, float SquaredLenthTolerance);// 0x6f9ee3fee041
	bool Vector_IsUniform(out const Vector A, float Tolerance);// 0x6f9de3fee041
	bool Vector_IsNormal(out const Vector A);// 0x6f9ce3fee041
	bool Vector_IsNearlyZero(out const Vector A, float Tolerance);// 0x6f9be3fee041
	bool Vector_IsNAN(out const Vector A);// 0x6f9ae3fee041
	float Vector_HeadingAngle(Vector A);// 0x6f99e3fee041
	Vector Vector_GetSignVector(Vector A);// 0x6f98e3fee041
	Vector Vector_GetProjection(Vector A);// 0x6f97e3fee041
	float Vector_GetAbsMin(Vector A);// 0x6f96e3fee041
	float Vector_GetAbsMax(Vector A);// 0x6f95e3fee041
	Vector Vector_GetAbs(Vector A);// 0x6f94e3fee041
	Vector Vector_Forward();// 0x6f93e3fee041
	Vector Vector_Down();// 0x6f92e3fee041
	float Vector_DistanceSquared(Vector v1, Vector v2);// 0x6f91e3fee041
	float Vector_Distance2DSquared(Vector v1, Vector v2);// 0x6f90e3fee041
	float Vector_Distance2D(Vector v1, Vector v2);// 0x6f8fe3fee041
	float Vector_Distance(Vector v1, Vector v2);// 0x6f8ee3fee041
	float Vector_CosineAngle2D(Vector A, Vector B);// 0x6f8de3fee041
	Vector Vector_ComponentMin(Vector A, Vector B);// 0x6f8ce3fee041
	Vector Vector_ComponentMax(Vector A, Vector B);// 0x6f8be3fee041
	Vector Vector_ClampSizeMax2D(Vector A, float Max);// 0x6f8ae3fee041
	Vector Vector_ClampSizeMax(Vector A, float Max);// 0x6f89e3fee041
	Vector Vector_ClampSize2D(Vector A, float Min, float Max);// 0x6f88e3fee041
	Vector Vector_BoundedToCube(Vector InVect, float InRadius);// 0x6f87e3fee041
	Vector Vector_BoundedToBox(Vector InVect, Vector InBoxMin, Vector InBoxMax);// 0x6f86e3fee041
	Vector Vector_Backward();// 0x6f85e3fee041
	void Vector_Assign(out Vector A, out const Vector InVector);// 0x6f84e3fee041
	void Vector_AddBounded(out Vector A, Vector InAddVect, float InRadius);// 0x6f83e3fee041
	Vector4 Vector4_Zero();// 0x6f82e3fee041
	float Vector4_SizeSquared3(out const Vector4 A);// 0x6f81e3fee041
	float Vector4_SizeSquared(out const Vector4 A);// 0x6f80e3fee041
	float Vector4_Size3(out const Vector4 A);// 0x6f7fe3fee041
	float Vector4_Size(out const Vector4 A);// 0x6f7ee3fee041
	void Vector4_Set(out Vector4 A, float X, float Y, float Z, float W);// 0x6f7de3fee041
	Vector4 Vector4_NormalUnsafe3(out const Vector4 A);// 0x6f7ce3fee041
	void Vector4_Normalize3(out Vector4 A, float Tolerance);// 0x6f7be3fee041
	Vector4 Vector4_Normal3(out const Vector4 A, float Tolerance);// 0x6f7ae3fee041
	Vector4 Vector4_Negated(out const Vector4 A);// 0x6f79e3fee041
	Vector4 Vector4_MirrorByVector3(out const Vector4 Direction, out const Vector4 SurfaceNormal);// 0x6f78e3fee041
	bool Vector4_IsZero(out const Vector4 A);// 0x6f77e3fee041
	bool Vector4_IsUnit3(out const Vector4 A, float SquaredLenthTolerance);// 0x6f76e3fee041
	bool Vector4_IsNormal3(out const Vector4 A);// 0x6f75e3fee041
	bool Vector4_IsNearlyZero3(out const Vector4 A, float Tolerance);// 0x6f74e3fee041
	bool Vector4_IsNAN(out const Vector4 A);// 0x6f73e3fee041
	float Vector4_DotProduct3(out const Vector4 A, out const Vector4 B);// 0x6f72e3fee041
	float Vector4_DotProduct(out const Vector4 A, out const Vector4 B);// 0x6f71e3fee041
	Vector4 Vector4_CrossProduct3(out const Vector4 A, out const Vector4 B);// 0x6f70e3fee041
	void Vector4_Assign(out Vector4 A, out const Vector4 InVector);// 0x6f6fe3fee041
	Vector2D Vector2DInterpTo_Constant(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0x6f6ee3fee041
	Vector2D Vector2DInterpTo(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0x6f6de3fee041
	Vector2D Vector2D_Zero();// 0x6f6ce3fee041
	Vector2D Vector2D_Unit45Deg();// 0x6f6be3fee041
	Vector2D Vector2D_One();// 0x6f6ae3fee041
	Vector VEase(Vector A, Vector B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x6f69e3fee041
	DateTime UtcNow();// 0x6f68e3fee041
	Vector4 TransformVector4(out const Matrix Matrix, out const Vector4 Vec4);// 0x6f67e3fee041
	Rotator TransformRotation(out const Transform T, Rotator Rotation);// 0x6f66e3fee041
	Vector TransformLocation(out const Transform T, Vector Location);// 0x6f65e3fee041
	Vector TransformDirection(out const Transform T, Vector Direction);// 0x6f64e3fee041
	float Transform_Determinant(out const Transform Transform);// 0x6f63e3fee041
	Vector2D ToSign2D(Vector2D A);// 0x6f62e3fee041
	Vector2D ToRounded2D(Vector2D A);// 0x6f61e3fee041
	void ToDirectionAndLength2D(Vector2D A, out Vector2D OutDir, out float OutLength);// 0x6f60e3fee041
	DateTime Today();// 0x6f5fe3fee041
	Transform TLerp(out const Transform A, out const Transform B, float Alpha, byte InterpMode);// 0x6f5ee3fee041
	Transform TInterpTo(out const Transform Current, out const Transform Target, float DeltaTime, float InterpSpeed);// 0x6f5de3fee041
	Timespan TimespanZeroValue();// 0x6f5ce3fee041
	float TimespanRatio(Timespan A, Timespan B);// 0x6f5be3fee041
	Timespan TimespanMinValue();// 0x6f5ae3fee041
	Timespan TimespanMaxValue();// 0x6f59e3fee041
	bool TimespanFromString(FString TimespanString, out Timespan Result);// 0x6f58e3fee041
	Transform TEase(out const Transform A, out const Transform B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x6f57e3fee041
	float Tan(float A);// 0x6f56e3fee041
	Vector Subtract_VectorVector(Vector A, Vector B);// 0x6f55e3fee041
	Vector Subtract_VectorInt(Vector A, int B);// 0x6f54e3fee041
	Vector Subtract_VectorFloat(Vector A, float B);// 0x6f53e3fee041
	Vector4 Subtract_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x6f52e3fee041
	Vector2D Subtract_Vector2DVector2D(Vector2D A, Vector2D B);// 0x6f51e3fee041
	Vector2D Subtract_Vector2DFloat(Vector2D A, float B);// 0x6f50e3fee041
	Timespan Subtract_TimespanTimespan(Timespan A, Timespan B);// 0x6f4fe3fee041
	Quat Subtract_QuatQuat(out const Quat A, out const Quat B);// 0x6f4ee3fee041
	LinearColor Subtract_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x6f4de3fee041
	IntPoint Subtract_IntPointIntPoint(IntPoint A, IntPoint B);// 0x6f4ce3fee041
	IntPoint Subtract_IntPointInt(IntPoint A, int B);// 0x6f4be3fee041
	int Subtract_IntInt(int A, int B);// 0x6f4ae3fee041
	int64 Subtract_Int64Int64(int64 A, int64 B);// 0x6f49e3fee041
	float Subtract_FloatFloat(float A, float B);// 0x6f48e3fee041
	DateTime Subtract_DateTimeTimespan(DateTime A, Timespan B);// 0x6f47e3fee041
	Timespan Subtract_DateTimeDateTime(DateTime A, DateTime B);// 0x6f46e3fee041
	byte Subtract_ByteByte(byte A, byte B);// 0x6f45e3fee041
	float Square(float A);// 0x6f44e3fee041
	float Sqrt(float A);// 0x6f43e3fee041
	Vector Spherical2DToUnitCartesian(Vector2D A);// 0x6f42e3fee041
	float Sin(float A);// 0x6f41e3fee041
	int64 SignOfInteger64(int64 A);// 0x6f40e3fee041
	int SignOfInteger(int A);// 0x6f3fe3fee041
	float SignOfFloat(float A);// 0x6f3ee3fee041
	void SetRandomStreamSeed(out RandomStream Stream, int NewSeed);// 0x6f3de3fee041
	void Set2D(out Vector2D A, float X, float Y);// 0x6f3ce3fee041
	Vector SelectVector(Vector A, Vector B, bool bPickA);// 0x6f3be3fee041
	Transform SelectTransform(out const Transform A, out const Transform B, bool bPickA);// 0x6f3ae3fee041
	FString SelectString(FString A, FString B, bool bPickA);// 0x6f39e3fee041
	Rotator SelectRotator(Rotator A, Rotator B, bool bPickA);// 0x6f38e3fee041
	Object* SelectObject(Object* A, Object* B, bool bSelectA);// 0x6f37e3fee041
	int SelectInt(int A, int B, bool bPickA);// 0x6f36e3fee041
	float SelectFloat(float A, float B, bool bPickA);// 0x6f35e3fee041
	LinearColor SelectColor(LinearColor A, LinearColor B, bool bPickA);// 0x6f34e3fee041
	class Object SelectClass(class Object A, class Object B, bool bSelectA);// 0x6f33e3fee041
	void SeedRandomStream(out RandomStream Stream);// 0x6f32e3fee041
	float SafeDivide(float A, float B);// 0x6f31e3fee041
	int64 Round64(float A);// 0x6f30e3fee041
	int Round(float A);// 0x6f2fe3fee041
	Rotator RotatorFromAxisAndAngle(Vector Axis, float Angle);// 0x6f2ee3fee041
	Vector RotateAngleAxis(Vector InVect, float AngleDeg, Vector Axis);// 0x6f2de3fee041
	Rotator RLerp(Rotator A, Rotator B, float Alpha, bool bShortestPath);// 0x6f2ce3fee041
	Rotator RInterpTo_Constant(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0x6f2be3fee041
	Rotator RInterpTo(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0x6f2ae3fee041
	void RGBToHSV_Vector(LinearColor RGB, out LinearColor HSV);// 0x6f29e3fee041
	void RGBToHSV(LinearColor InColor, out float H, out float S, out float V, out float A);// 0x6f28e3fee041
	LinearColor RGBLinearToHSV(LinearColor RGB);// 0x6f27e3fee041
	void ResetVectorSpringState(out VectorSpringState SpringState);// 0x6f26e3fee041
	void ResetRandomStream(out const RandomStream Stream);// 0x6f25e3fee041
	void ResetFloatSpringState(out FloatSpringState SpringState);// 0x6f24e3fee041
	Rotator REase(Rotator A, Rotator B, float Alpha, bool bShortestPath, byte EasingFunc, float BlendExp, int Steps);// 0x6f23e3fee041
	Vector RandomUnitVectorInEllipticalConeInRadiansFromStream(out const Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians, out const RandomStream Stream);// 0x6f22e3fee041
	Vector RandomUnitVectorInEllipticalConeInRadians(Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);// 0x6f21e3fee041
	Vector RandomUnitVectorInEllipticalConeInDegreesFromStream(out const Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, out const RandomStream Stream);// 0x6f20e3fee041
	Vector RandomUnitVectorInEllipticalConeInDegrees(Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);// 0x6f1fe3fee041
	Vector RandomUnitVectorInConeInRadiansFromStream(out const Vector ConeDir, float ConeHalfAngleInRadians, out const RandomStream Stream);// 0x6f1ee3fee041
	Vector RandomUnitVectorInConeInRadians(Vector ConeDir, float ConeHalfAngleInRadians);// 0x6f1de3fee041
	Vector RandomUnitVectorInConeInDegreesFromStream(out const Vector ConeDir, float ConeHalfAngleInDegrees, out const RandomStream Stream);// 0x6f1ce3fee041
	Vector RandomUnitVectorInConeInDegrees(Vector ConeDir, float ConeHalfAngleInDegrees);// 0x6f1be3fee041
	Vector RandomUnitVectorFromStream(out const RandomStream Stream);// 0x6f1ae3fee041
	Vector RandomUnitVector();// 0x6f19e3fee041
	Rotator RandomRotatorFromStream(bool bRoll, out const RandomStream Stream);// 0x6f18e3fee041
	Rotator RandomRotator(bool bRoll);// 0x6f17e3fee041
	Vector RandomPointInBoundingBox(Vector Origin, Vector BoxExtent);// 0x6f16e3fee041
	int RandomIntegerInRangeFromStream(int Min, int Max, out const RandomStream Stream);// 0x6f15e3fee041
	int RandomIntegerInRange(int Min, int Max);// 0x6f14e3fee041
	int RandomIntegerFromStream(int Max, out const RandomStream Stream);// 0x6f13e3fee041
	int64 RandomInteger64InRange(int64 Min, int64 Max);// 0x6f12e3fee041
	int64 RandomInteger64(int64 Max);// 0x6f11e3fee041
	int RandomInteger(int Max);// 0x6f10e3fee041
	float RandomFloatInRangeFromStream(float Min, float Max, out const RandomStream Stream);// 0x6f0fe3fee041
	float RandomFloatInRange(float Min, float Max);// 0x6f0ee3fee041
	float RandomFloatFromStream(out const RandomStream Stream);// 0x6f0de3fee041
	float RandomFloat();// 0x6f0ce3fee041
	bool RandomBoolWithWeightFromStream(float Weight, out const RandomStream RandomStream);// 0x6f0be3fee041
	bool RandomBoolWithWeight(float Weight);// 0x6f0ae3fee041
	bool RandomBoolFromStream(out const RandomStream Stream);// 0x6f09e3fee041
	bool RandomBool();// 0x6f08e3fee041
	float RadiansToDegrees(float A);// 0x6f07e3fee041
	Vector Quat_VectorUp(out const Quat Q);// 0x6f06e3fee041
	Vector Quat_VectorRight(out const Quat Q);// 0x6f05e3fee041
	Vector Quat_VectorForward(out const Quat Q);// 0x6f04e3fee041
	Vector Quat_UnrotateVector(out const Quat Q, out const Vector V);// 0x6f03e3fee041
	float Quat_SizeSquared(out const Quat Q);// 0x6f02e3fee041
	float Quat_Size(out const Quat Q);// 0x6f01e3fee041
	void Quat_SetFromEuler(out Quat Q, out const Vector Euler);// 0x6f00e3fee041
	void Quat_SetComponents(out Quat Q, float X, float Y, float Z, float W);// 0x6effe3fee041
	Rotator Quat_Rotator(out const Quat Q);// 0x6efee3fee041
	Vector Quat_RotateVector(out const Quat Q, out const Vector V);// 0x6efde3fee041
	Quat Quat_Normalized(out const Quat Q, float Tolerance);// 0x6efce3fee041
	void Quat_Normalize(out Quat Q, float Tolerance);// 0x6efbe3fee041
	Quat Quat_MakeFromEuler(out const Vector Euler);// 0x6efae3fee041
	Quat Quat_Log(out const Quat Q);// 0x6ef9e3fee041
	bool Quat_IsNormalized(out const Quat Q);// 0x6ef8e3fee041
	bool Quat_IsNonFinite(out const Quat Q);// 0x6ef7e3fee041
	bool Quat_IsIdentity(out const Quat Q, float Tolerance);// 0x6ef6e3fee041
	bool Quat_IsFinite(out const Quat Q);// 0x6ef5e3fee041
	Quat Quat_Inversed(out const Quat Q);// 0x6ef4e3fee041
	Quat Quat_Identity();// 0x6ef3e3fee041
	Vector Quat_GetRotationAxis(out const Quat Q);// 0x6ef2e3fee041
	Vector Quat_GetAxisZ(out const Quat Q);// 0x6ef1e3fee041
	Vector Quat_GetAxisY(out const Quat Q);// 0x6ef0e3fee041
	Vector Quat_GetAxisX(out const Quat Q);// 0x6eefe3fee041
	float Quat_GetAngle(out const Quat Q);// 0x6eeee3fee041
	Quat Quat_Exp(out const Quat Q);// 0x6eede3fee041
	Vector Quat_Euler(out const Quat Q);// 0x6eece3fee041
	void Quat_EnforceShortestArcWith(out Quat A, out const Quat B);// 0x6eebe3fee041
	float Quat_AngularDistance(out const Quat A, out const Quat B);// 0x6eeae3fee041
	Vector ProjectVectorOnToVector(Vector V, Vector Target);// 0x6ee9e3fee041
	Vector ProjectVectorOnToPlane(Vector V, Vector PlaneNormal);// 0x6ee8e3fee041
	Vector ProjectPointOnToPlane(Vector Point, Vector PlaneBase, Vector PlaneNormal);// 0x6ee7e3fee041
	bool PointsAreCoplanar(out const Vector[] Points, float Tolerance);// 0x6ee6e3fee041
	float PerlinNoise1D(const float Value);// 0x6ee5e3fee041
	int Percent_IntInt(int A, int B);// 0x6ee4e3fee041
	float Percent_FloatFloat(float A, float B);// 0x6ee3e3fee041
	byte Percent_ByteByte(byte A, byte B);// 0x6ee2e3fee041
	int Or_IntInt(int A, int B);// 0x6ee1e3fee041
	int64 Or_Int64Int64(int64 A, int64 B);// 0x6ee0e3fee041
	DateTime Now();// 0x6edfe3fee041
	bool NotEqualExactly_VectorVector(Vector A, Vector B);// 0x6edee3fee041
	bool NotEqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x6edde3fee041
	bool NotEqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0x6edce3fee041
	bool NotEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0x6edbe3fee041
	bool NotEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0x6edae3fee041
	bool NotEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0x6ed9e3fee041
	bool NotEqual_TimespanTimespan(Timespan A, Timespan B);// 0x6ed8e3fee041
	bool NotEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0x6ed7e3fee041
	bool NotEqual_QuatQuat(out const Quat A, out const Quat B, float ErrorTolerance);// 0x6ed6e3fee041
	bool NotEqual_ObjectObject(Object* A, Object* B);// 0x6ed5e3fee041
	bool NotEqual_NameName(FName A, FName B);// 0x6ed4e3fee041
	bool NotEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0x6ed3e3fee041
	bool NotEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x6ed2e3fee041
	bool NotEqual_IntPointIntPoint(IntPoint A, IntPoint B);// 0x6ed1e3fee041
	bool NotEqual_IntInt(int A, int B);// 0x6ed0e3fee041
	bool NotEqual_Int64Int64(int64 A, int64 B);// 0x6ecfe3fee041
	bool NotEqual_FloatFloat(float A, float B);// 0x6ecee3fee041
	bool NotEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x6ecde3fee041
	bool NotEqual_ClassClass(class Object A, class Object B);// 0x6ecce3fee041
	bool NotEqual_ByteByte(byte A, byte B);// 0x6ecbe3fee041
	bool NotEqual_BoolBool(bool A, bool B);// 0x6ecae3fee041
	bool Not_PreBool(bool A);// 0x6ec9e3fee041
	int64 Not_Int64(int64 A);// 0x6ec8e3fee041
	int Not_Int(int A);// 0x6ec7e3fee041
	Vector2D NormalSafe2D(Vector2D A, float Tolerance);// 0x6ec6e3fee041
	float NormalizeToRange(float Value, float RangeMin, float RangeMax);// 0x6ec5e3fee041
	Rotator NormalizedDeltaRotator(Rotator A, Rotator B);// 0x6ec4e3fee041
	float NormalizeAxis(float Angle);// 0x6ec3e3fee041
	void Normalize2D(out Vector2D A, float Tolerance);// 0x6ec2e3fee041
	Vector2D Normal2D(Vector2D A);// 0x6ec1e3fee041
	Vector Normal(Vector A, float Tolerance);// 0x6ec0e3fee041
	Vector NegateVector(Vector A);// 0x6ebfe3fee041
	Rotator NegateRotator(Rotator A);// 0x6ebee3fee041
	Vector2D Negated2D(out const Vector2D A);// 0x6ebde3fee041
	bool NearlyEqual_TransformTransform(out const Transform A, out const Transform B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);// 0x6ebce3fee041
	bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);// 0x6ebbe3fee041
	float MultiplyMultiply_FloatFloat(float Base, float Exp);// 0x6ebae3fee041
	float MultiplyByPi(float Value);// 0x6eb9e3fee041
	Vector Multiply_VectorVector(Vector A, Vector B);// 0x6eb8e3fee041
	Vector Multiply_VectorInt(Vector A, int B);// 0x6eb7e3fee041
	Vector Multiply_VectorFloat(Vector A, float B);// 0x6eb6e3fee041
	Vector4 Multiply_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x6eb5e3fee041
	Vector2D Multiply_Vector2DVector2D(Vector2D A, Vector2D B);// 0x6eb4e3fee041
	Vector2D Multiply_Vector2DFloat(Vector2D A, float B);// 0x6eb3e3fee041
	Timespan Multiply_TimespanFloat(Timespan A, float Scalar);// 0x6eb2e3fee041
	Rotator Multiply_RotatorInt(Rotator A, int B);// 0x6eb1e3fee041
	Rotator Multiply_RotatorFloat(Rotator A, float B);// 0x6eb0e3fee041
	Quat Multiply_QuatQuat(out const Quat A, out const Quat B);// 0x6eafe3fee041
	Matrix Multiply_MatrixMatrix(out const Matrix A, out const Matrix B);// 0x6eaee3fee041
	Matrix Multiply_MatrixFloat(out const Matrix A, float B);// 0x6eade3fee041
	LinearColor Multiply_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x6eace3fee041
	LinearColor Multiply_LinearColorFloat(LinearColor A, float B);// 0x6eabe3fee041
	IntPoint Multiply_IntPointIntPoint(IntPoint A, IntPoint B);// 0x6eaae3fee041
	IntPoint Multiply_IntPointInt(IntPoint A, int B);// 0x6ea9e3fee041
	int Multiply_IntInt(int A, int B);// 0x6ea8e3fee041
	float Multiply_IntFloat(int A, float B);// 0x6ea7e3fee041
	int64 Multiply_Int64Int64(int64 A, int64 B);// 0x6ea6e3fee041
	float Multiply_FloatFloat(float A, float B);// 0x6ea5e3fee041
	byte Multiply_ByteByte(byte A, byte B);// 0x6ea4e3fee041
	Vector MirrorVectorByNormal(Vector InVect, Vector InNormal);// 0x6ea3e3fee041
	void MinOfIntArray(out const int[] IntArray, out int IndexOfMinValue, out int MinValue);// 0x6ea2e3fee041
	void MinOfFloatArray(out const float[] FloatArray, out int IndexOfMinValue, out float MinValue);// 0x6ea1e3fee041
	void MinOfByteArray(out const byte[] ByteArray, out int IndexOfMinValue, out byte MinValue);// 0x6ea0e3fee041
	int64 MinInt64(int64 A, int64 B);// 0x6e9fe3fee041
	void MinimumAreaRectangle(Object* WorldContextObject, out const Vector[] InVerts, out const Vector SampleSurfaceNormal, out Vector OutRectCenter, out Rotator OutRectRotation, out float OutSideLengthX, out float OutSideLengthY, bool bDebugDraw);// 0x6e9ee3fee041
	int Min(int A, int B);// 0x6e9de3fee041
	void MaxOfIntArray(out const int[] IntArray, out int IndexOfMaxValue, out int MaxValue);// 0x6e9ce3fee041
	void MaxOfFloatArray(out const float[] FloatArray, out int IndexOfMaxValue, out float MaxValue);// 0x6e9be3fee041
	void MaxOfByteArray(out const byte[] ByteArray, out int IndexOfMaxValue, out byte MaxValue);// 0x6e9ae3fee041
	int64 MaxInt64(int64 A, int64 B);// 0x6e99e3fee041
	int Max(int A, int B);// 0x6e98e3fee041
	Vector4 Matrix_TransformVector4(out const Matrix M, Vector4 V);// 0x6e97e3fee041
	Vector4 Matrix_TransformVector(out const Matrix M, Vector V);// 0x6e96e3fee041
	Vector4 Matrix_TransformPosition(out const Matrix M, Vector V);// 0x6e95e3fee041
	Quat Matrix_ToQuat(out const Matrix M);// 0x6e94e3fee041
	void Matrix_SetOrigin(out Matrix M, Vector NewOrigin);// 0x6e93e3fee041
	void Matrix_SetColumn(out Matrix M, byte Column, Vector Value);// 0x6e92e3fee041
	void Matrix_SetAxis(out Matrix M, byte Axis, Vector AxisVector);// 0x6e91e3fee041
	Matrix Matrix_ScaleTranslation(out const Matrix M, Vector Scale3D);// 0x6e90e3fee041
	Matrix Matrix_RemoveTranslation(out const Matrix M);// 0x6e8fe3fee041
	void Matrix_RemoveScaling(out Matrix M, float Tolerance);// 0x6e8ee3fee041
	Matrix Matrix_Mirror(out const Matrix M, byte MirrorAxis, byte FlipAxis);// 0x6e8de3fee041
	Vector Matrix_InverseTransformVector(out const Matrix M, Vector V);// 0x6e8ce3fee041
	Vector Matrix_InverseTransformPosition(out const Matrix M, Vector V);// 0x6e8be3fee041
	Matrix Matrix_Identity();// 0x6e8ae3fee041
	Vector Matrix_GetUnitAxis(out const Matrix M, byte Axis);// 0x6e89e3fee041
	void Matrix_GetUnitAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0x6e88e3fee041
	Matrix Matrix_GetTransposed(out const Matrix M);// 0x6e87e3fee041
	Matrix Matrix_GetTransposeAdjoint(out const Matrix M);// 0x6e86e3fee041
	Vector Matrix_GetScaleVector(out const Matrix M, float Tolerance);// 0x6e85e3fee041
	Vector Matrix_GetScaledAxis(out const Matrix M, byte Axis);// 0x6e84e3fee041
	void Matrix_GetScaledAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0x6e83e3fee041
	float Matrix_GetRotDeterminant(out const Matrix M);// 0x6e82e3fee041
	Rotator Matrix_GetRotator(out const Matrix M);// 0x6e81e3fee041
	Vector Matrix_GetOrigin(out const Matrix InMatrix);// 0x6e80e3fee041
	float Matrix_GetMaximumAxisScale(out const Matrix M);// 0x6e7fe3fee041
	Matrix Matrix_GetMatrixWithoutScale(out const Matrix M, float Tolerance);// 0x6e7ee3fee041
	Matrix Matrix_GetInverse(out const Matrix M);// 0x6e7de3fee041
	bool Matrix_GetFrustumTopPlane(out const Matrix M, out Plane OutPlane);// 0x6e7ce3fee041
	bool Matrix_GetFrustumRightPlane(out const Matrix M, out Plane OutPlane);// 0x6e7be3fee041
	bool Matrix_GetFrustumNearPlane(out const Matrix M, out Plane OutPlane);// 0x6e7ae3fee041
	bool Matrix_GetFrustumLeftPlane(out const Matrix M, out Plane OutPlane);// 0x6e79e3fee041
	bool Matrix_GetFrustumFarPlane(out const Matrix M, out Plane OutPlane);// 0x6e78e3fee041
	bool Matrix_GetFrustumBottomPlane(out const Matrix M, out Plane OutPlane);// 0x6e77e3fee041
	float Matrix_GetDeterminant(out const Matrix M);// 0x6e76e3fee041
	Vector Matrix_GetColumn(out const Matrix M, byte Column);// 0x6e75e3fee041
	bool Matrix_ContainsNaN(out const Matrix M);// 0x6e74e3fee041
	Matrix Matrix_ConcatenateTranslation(out const Matrix M, Vector Translation);// 0x6e73e3fee041
	Matrix Matrix_ApplyScale(out const Matrix M, float Scale);// 0x6e72e3fee041
	float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0x6e71e3fee041
	float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0x6e70e3fee041
	Vector4 MakeVector4(float X, float Y, float Z, float W);// 0x6e6fe3fee041
	Vector2D MakeVector2D(float X, float Y);// 0x6e6ee3fee041
	Vector MakeVector(float X, float Y, float Z);// 0x6e6de3fee041
	Transform MakeTransform(Vector Location, Rotator Rotation, Vector Scale);// 0x6e6ce3fee041
	Timespan MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano);// 0x6e6be3fee041
	Timespan MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds);// 0x6e6ae3fee041
	Rotator MakeRotFromZY(out const Vector Z, out const Vector Y);// 0x6e69e3fee041
	Rotator MakeRotFromZX(out const Vector Z, out const Vector X);// 0x6e68e3fee041
	Rotator MakeRotFromZ(out const Vector Z);// 0x6e67e3fee041
	Rotator MakeRotFromYZ(out const Vector Y, out const Vector Z);// 0x6e66e3fee041
	Rotator MakeRotFromYX(out const Vector Y, out const Vector X);// 0x6e65e3fee041
	Rotator MakeRotFromY(out const Vector Y);// 0x6e64e3fee041
	Rotator MakeRotFromXZ(out const Vector X, out const Vector Z);// 0x6e63e3fee041
	Rotator MakeRotFromXY(out const Vector X, out const Vector Y);// 0x6e62e3fee041
	Rotator MakeRotFromX(out const Vector X);// 0x6e61e3fee041
	Rotator MakeRotator(float Roll, float Pitch, float Yaw);// 0x6e60e3fee041
	Rotator MakeRotationFromAxes(Vector Forward, Vector Right, Vector Up);// 0x6e5fe3fee041
	Transform MakeRelativeTransform(out const Transform A, out const Transform RelativeTo);// 0x6e5ee3fee041
	RandomStream MakeRandomStream(int InitialSeed);// 0x6e5de3fee041
	QualifiedFrameTime MakeQualifiedFrameTime(FrameNumber Frame, FrameRate FrameRate, float SubFrame);// 0x6e5ce3fee041
	float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);// 0x6e5be3fee041
	Plane MakePlaneFromPointAndNormal(Vector Point, Vector Normal);// 0x6e5ae3fee041
	FrameRate MakeFrameRate(int Numerator, int Denominator);// 0x6e59e3fee041
	DateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);// 0x6e58e3fee041
	LinearColor MakeColor(float R, float G, float B, float A);// 0x6e57e3fee041
	Box2D MakeBox2D(Vector2D Min, Vector2D Max);// 0x6e56e3fee041
	Box MakeBox(Vector Min, Vector Max);// 0x6e55e3fee041
	float Loge(float A);// 0x6e54e3fee041
	float Log(float A, float Base);// 0x6e53e3fee041
	bool LinePlaneIntersection_OriginNormal(out const Vector LineStart, out const Vector LineEnd, Vector PlaneOrigin, Vector PlaneNormal, out float T, out Vector Intersection);// 0x6e52e3fee041
	bool LinePlaneIntersection(out const Vector LineStart, out const Vector LineEnd, out const Plane APlane, out float T, out Vector Intersection);// 0x6e51e3fee041
	LinearColor LinearColorLerpUsingHSV(LinearColor A, LinearColor B, float Alpha);// 0x6e50e3fee041
	LinearColor LinearColorLerp(LinearColor A, LinearColor B, float Alpha);// 0x6e4fe3fee041
	LinearColor LinearColor_Yellow();// 0x6e4ee3fee041
	LinearColor LinearColor_White();// 0x6e4de3fee041
	LinearColor LinearColor_Transparent();// 0x6e4ce3fee041
	Color LinearColor_ToRGBE(LinearColor InLinearColor);// 0x6e4be3fee041
	LinearColor LinearColor_ToNewOpacity(LinearColor InColor, float InOpacity);// 0x6e4ae3fee041
	void LinearColor_SetTemperature(out LinearColor InOutColor, float InTemperature);// 0x6e49e3fee041
	void LinearColor_SetRGBA(out LinearColor InOutColor, float R, float G, float B, float A);// 0x6e48e3fee041
	void LinearColor_SetRandomHue(out LinearColor InOutColor);// 0x6e47e3fee041
	void LinearColor_SetFromSRGB(out LinearColor InOutColor, out const Color InSRGB);// 0x6e46e3fee041
	void LinearColor_SetFromPow22(out LinearColor InOutColor, out const Color InColor);// 0x6e45e3fee041
	void LinearColor_SetFromHSV(out LinearColor InOutColor, float H, float S, float V, float A);// 0x6e44e3fee041
	void LinearColor_Set(out LinearColor InOutColor, LinearColor InColor);// 0x6e43e3fee041
	LinearColor LinearColor_Red();// 0x6e42e3fee041
	Color LinearColor_QuantizeRound(LinearColor InColor);// 0x6e41e3fee041
	Color LinearColor_Quantize(LinearColor InColor);// 0x6e40e3fee041
	bool LinearColor_IsNearEqual(LinearColor A, LinearColor B, float Tolerance);// 0x6e3fe3fee041
	LinearColor LinearColor_Green();// 0x6e3ee3fee041
	LinearColor LinearColor_Gray();// 0x6e3de3fee041
	float LinearColor_GetMin(LinearColor InColor);// 0x6e3ce3fee041
	float LinearColor_GetMax(LinearColor InColor);// 0x6e3be3fee041
	float LinearColor_GetLuminance(LinearColor InColor);// 0x6e3ae3fee041
	float LinearColor_Distance(LinearColor C1, LinearColor C2);// 0x6e39e3fee041
	LinearColor LinearColor_Desaturated(LinearColor InColor, float InDesaturation);// 0x6e38e3fee041
	LinearColor LinearColor_Blue();// 0x6e37e3fee041
	LinearColor LinearColor_Black();// 0x6e36e3fee041
	Vector LessLess_VectorRotator(Vector A, Rotator B);// 0x6e35e3fee041
	bool LessEqual_TimespanTimespan(Timespan A, Timespan B);// 0x6e34e3fee041
	bool LessEqual_IntInt(int A, int B);// 0x6e33e3fee041
	bool LessEqual_Int64Int64(int64 A, int64 B);// 0x6e32e3fee041
	bool LessEqual_FloatFloat(float A, float B);// 0x6e31e3fee041
	bool LessEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x6e30e3fee041
	bool LessEqual_ByteByte(byte A, byte B);// 0x6e2fe3fee041
	bool Less_TimespanTimespan(Timespan A, Timespan B);// 0x6e2ee3fee041
	bool Less_IntInt(int A, int B);// 0x6e2de3fee041
	bool Less_Int64Int64(int64 A, int64 B);// 0x6e2ce3fee041
	bool Less_FloatFloat(float A, float B);// 0x6e2be3fee041
	bool Less_DateTimeDateTime(DateTime A, DateTime B);// 0x6e2ae3fee041
	bool Less_ByteByte(byte A, byte B);// 0x6e29e3fee041
	float Lerp(float A, float B, float Alpha);// 0x6e28e3fee041
	bool IsZero2D(out const Vector2D A);// 0x6e27e3fee041
	bool IsPointInBoxWithTransform(Vector Point, out const Transform BoxWorldTransform, Vector BoxExtent);// 0x6e26e3fee041
	bool IsPointInBox(Vector Point, Vector BoxOrigin, Vector BoxExtent);// 0x6e25e3fee041
	bool IsNearlyZero2D(out const Vector2D A, float Tolerance);// 0x6e24e3fee041
	bool IsMorning(DateTime A);// 0x6e23e3fee041
	bool IsLeapYear(int Year);// 0x6e22e3fee041
	bool IsAfternoon(DateTime A);// 0x6e21e3fee041
	Transform InvertTransform(out const Transform T);// 0x6e20e3fee041
	Rotator InverseTransformRotation(out const Transform T, Rotator Rotation);// 0x6e1fe3fee041
	Vector InverseTransformLocation(out const Transform T, Vector Location);// 0x6e1ee3fee041
	Vector InverseTransformDirection(out const Transform T, Vector Direction);// 0x6e1de3fee041
	IntPoint IntPoint_Zero();// 0x6e1ce3fee041
	IntPoint IntPoint_Up();// 0x6e1be3fee041
	IntPoint IntPoint_Right();// 0x6e1ae3fee041
	IntPoint IntPoint_One();// 0x6e19e3fee041
	IntPoint IntPoint_Left();// 0x6e18e3fee041
	IntPoint IntPoint_Down();// 0x6e17e3fee041
	bool InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax);// 0x6e16e3fee041
	bool InRange_Int64Int64(int64 Value, int64 Min, int64 Max, bool InclusiveMin, bool InclusiveMax);// 0x6e15e3fee041
	bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);// 0x6e14e3fee041
	float Hypotenuse(float Width, float Height);// 0x6e13e3fee041
	LinearColor HSVToRGBLinear(LinearColor HSV);// 0x6e12e3fee041
	void HSVToRGB_Vector(LinearColor HSV, out LinearColor RGB);// 0x6e11e3fee041
	LinearColor HSVToRGB(float H, float S, float V, float A);// 0x6e10e3fee041
	float GridSnap_Float(float Location, float GridSize);// 0x6e0fe3fee041
	Vector GreaterGreater_VectorRotator(Vector A, Rotator B);// 0x6e0ee3fee041
	bool GreaterEqual_TimespanTimespan(Timespan A, Timespan B);// 0x6e0de3fee041
	bool GreaterEqual_IntInt(int A, int B);// 0x6e0ce3fee041
	bool GreaterEqual_Int64Int64(int64 A, int64 B);// 0x6e0be3fee041
	bool GreaterEqual_FloatFloat(float A, float B);// 0x6e0ae3fee041
	bool GreaterEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x6e09e3fee041
	bool GreaterEqual_ByteByte(byte A, byte B);// 0x6e08e3fee041
	bool Greater_TimespanTimespan(Timespan A, Timespan B);// 0x6e07e3fee041
	bool Greater_IntInt(int A, int B);// 0x6e06e3fee041
	bool Greater_Int64Int64(int64 A, int64 B);// 0x6e05e3fee041
	bool Greater_FloatFloat(float A, float B);// 0x6e04e3fee041
	bool Greater_DateTimeDateTime(DateTime A, DateTime B);// 0x6e03e3fee041
	bool Greater_ByteByte(byte A, byte B);// 0x6e02e3fee041
	int GetYear(DateTime A);// 0x6e01e3fee041
	void GetYawPitchFromVector(Vector InVec, out float Yaw, out float Pitch);// 0x6e00e3fee041
	Vector GetVectorArrayAverage(out const Vector[] Vectors);// 0x6dffe3fee041
	Vector GetUpVector(Rotator InRot);// 0x6dfee3fee041
	float GetTotalSeconds(Timespan A);// 0x6dfde3fee041
	float GetTotalMinutes(Timespan A);// 0x6dfce3fee041
	float GetTotalMilliseconds(Timespan A);// 0x6dfbe3fee041
	float GetTotalHours(Timespan A);// 0x6dfae3fee041
	float GetTotalDays(Timespan A);// 0x6df9e3fee041
	Timespan GetTimeOfDay(DateTime A);// 0x6df8e3fee041
	float GetTAU();// 0x6df7e3fee041
	void GetSlopeDegreeAngles(out const Vector MyRightYAxis, out const Vector FloorNormal, out const Vector UpVector, out float OutSlopePitchDegreeAngle, out float OutSlopeRollDegreeAngle);// 0x6df6e3fee041
	int GetSeconds(Timespan A);// 0x6df5e3fee041
	int GetSecond(DateTime A);// 0x6df4e3fee041
	Vector2D GetRotated2D(Vector2D A, float AngleDeg);// 0x6df3e3fee041
	Vector GetRightVector(Rotator InRot);// 0x6df2e3fee041
	Vector GetReflectionVector(Vector Direction, Vector SurfaceNormal);// 0x6df1e3fee041
	float GetPointDistanceToSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0x6df0e3fee041
	float GetPointDistanceToLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0x6defe3fee041
	float GetPI();// 0x6deee3fee041
	int GetMonth(DateTime A);// 0x6dede3fee041
	int GetMinutes(Timespan A);// 0x6dece3fee041
	int GetMinute(DateTime A);// 0x6debe3fee041
	float GetMinElement(Vector A);// 0x6deae3fee041
	float GetMin2D(Vector2D A);// 0x6de9e3fee041
	int GetMilliseconds(Timespan A);// 0x6de8e3fee041
	int GetMillisecond(DateTime A);// 0x6de7e3fee041
	float GetMaxElement(Vector A);// 0x6de6e3fee041
	float GetMax2D(Vector2D A);// 0x6de5e3fee041
	int GetHours(Timespan A);// 0x6de4e3fee041
	int GetHour12(DateTime A);// 0x6de3e3fee041
	int GetHour(DateTime A);// 0x6de2e3fee041
	Vector GetForwardVector(Rotator InRot);// 0x6de1e3fee041
	Timespan GetDuration(Timespan A);// 0x6de0e3fee041
	Vector GetDirectionUnitVector(Vector from, Vector To);// 0x6ddfe3fee041
	int GetDays(Timespan A);// 0x6ddee3fee041
	int GetDayOfYear(DateTime A);// 0x6ddde3fee041
	int GetDay(DateTime A);// 0x6ddce3fee041
	DateTime GetDate(DateTime A);// 0x6ddbe3fee041
	void GetAzimuthAndElevation(Vector InDirection, out const Transform ReferenceFrame, out float Azimuth, out float Elevation);// 0x6ddae3fee041
	void GetAxes(Rotator A, out Vector X, out Vector Y, out Vector Z);// 0x6dd9e3fee041
	float GetAbsMax2D(Vector2D A);// 0x6dd8e3fee041
	Vector2D GetAbs2D(Vector2D A);// 0x6dd7e3fee041
	float FWrap(float Value, float Min, float Max);// 0x6dd6e3fee041
	IntVector FTruncVector(out const Vector InVector);// 0x6dd5e3fee041
	int64 FTrunc64(float A);// 0x6dd4e3fee041
	int FTrunc(float A);// 0x6dd3e3fee041
	Timespan FromSeconds(float Seconds);// 0x6dd2e3fee041
	Timespan FromMinutes(float Minutes);// 0x6dd1e3fee041
	Timespan FromMilliseconds(float Milliseconds);// 0x6dd0e3fee041
	Timespan FromHours(float Hours);// 0x6dcfe3fee041
	Timespan FromDays(float Days);// 0x6dcee3fee041
	float Fraction(float A);// 0x6dcde3fee041
	int FMod(float Dividend, float Divisor, out float Remainder);// 0x6dcce3fee041
	float FMin(float A, float B);// 0x6dcbe3fee041
	float FMax(float A, float B);// 0x6dcae3fee041
	float FloatSpringInterp(float Current, float Target, out FloatSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0x6dc9e3fee041
	float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);// 0x6dc8e3fee041
	float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);// 0x6dc7e3fee041
	float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);// 0x6dc6e3fee041
	float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);// 0x6dc5e3fee041
	void FindNearestPointsOnLineSegments(Vector Segment1Start, Vector Segment1End, Vector Segment2Start, Vector Segment2End, out Vector Segment1Point, out Vector Segment2Point);// 0x6dc4e3fee041
	Rotator FindLookAtRotation(out const Vector Start, out const Vector Target);// 0x6dc3e3fee041
	Vector FindClosestPointOnSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0x6dc2e3fee041
	Vector FindClosestPointOnLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0x6dc1e3fee041
	int64 FFloor64(float A);// 0x6dc0e3fee041
	int FFloor(float A);// 0x6dbfe3fee041
	float FClamp(float Value, float Min, float Max);// 0x6dbee3fee041
	int64 FCeil64(float A);// 0x6dbde3fee041
	int FCeil(float A);// 0x6dbce3fee041
	float Exp(float A);// 0x6dbbe3fee041
	bool EqualExactly_VectorVector(Vector A, Vector B);// 0x6dbae3fee041
	bool EqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x6db9e3fee041
	bool EqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0x6db8e3fee041
	bool EqualEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0x6db7e3fee041
	bool EqualEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0x6db6e3fee041
	bool EqualEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0x6db5e3fee041
	bool EqualEqual_TransformTransform(out const Transform A, out const Transform B);// 0x6db4e3fee041
	bool EqualEqual_TimespanTimespan(Timespan A, Timespan B);// 0x6db3e3fee041
	bool EqualEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0x6db2e3fee041
	bool EqualEqual_QuatQuat(out const Quat A, out const Quat B, float Tolerance);// 0x6db1e3fee041
	bool EqualEqual_ObjectObject(Object* A, Object* B);// 0x6db0e3fee041
	bool EqualEqual_NameName(FName A, FName B);// 0x6dafe3fee041
	bool EqualEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0x6daee3fee041
	bool EqualEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x6dade3fee041
	bool EqualEqual_IntInt(int A, int B);// 0x6dace3fee041
	bool EqualEqual_Int64Int64(int64 A, int64 B);// 0x6dabe3fee041
	bool EqualEqual_FloatFloat(float A, float B);// 0x6daae3fee041
	bool EqualEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x6da9e3fee041
	bool EqualEqual_ClassClass(class Object A, class Object B);// 0x6da8e3fee041
	bool EqualEqual_ByteByte(byte A, byte B);// 0x6da7e3fee041
	bool EqualEqual_BoolBool(bool A, bool B);// 0x6da6e3fee041
	bool Equal_IntPointIntPoint(IntPoint A, IntPoint B);// 0x6da5e3fee041
	float Ease(float A, float B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x6da4e3fee041
	Vector DynamicWeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x6da3e3fee041
	Rotator DynamicWeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x6da2e3fee041
	float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x6da1e3fee041
	float DotProduct2D(Vector2D A, Vector2D B);// 0x6da0e3fee041
	float Dot_VectorVector(Vector A, Vector B);// 0x6d9fe3fee041
	Vector Divide_VectorVector(Vector A, Vector B);// 0x6d9ee3fee041
	Vector Divide_VectorInt(Vector A, int B);// 0x6d9de3fee041
	Vector Divide_VectorFloat(Vector A, float B);// 0x6d9ce3fee041
	Vector4 Divide_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x6d9be3fee041
	Vector2D Divide_Vector2DVector2D(Vector2D A, Vector2D B);// 0x6d9ae3fee041
	Vector2D Divide_Vector2DFloat(Vector2D A, float B);// 0x6d99e3fee041
	Timespan Divide_TimespanFloat(Timespan A, float Scalar);// 0x6d98e3fee041
	LinearColor Divide_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x6d97e3fee041
	IntPoint Divide_IntPointIntPoint(IntPoint A, IntPoint B);// 0x6d96e3fee041
	IntPoint Divide_IntPointInt(IntPoint A, int B);// 0x6d95e3fee041
	int Divide_IntInt(int A, int B);// 0x6d94e3fee041
	int64 Divide_Int64Int64(int64 A, int64 B);// 0x6d93e3fee041
	float Divide_FloatFloat(float A, float B);// 0x6d92e3fee041
	byte Divide_ByteByte(byte A, byte B);// 0x6d91e3fee041
	float DistanceSquared2D(Vector2D v1, Vector2D v2);// 0x6d90e3fee041
	float Distance2D(Vector2D v1, Vector2D v2);// 0x6d8fe3fee041
	float DegTan(float A);// 0x6d8ee3fee041
	float DegSin(float A);// 0x6d8de3fee041
	float DegreesToRadians(float A);// 0x6d8ce3fee041
	float DegCos(float A);// 0x6d8be3fee041
	float DegAtan2(float Y, float X);// 0x6d8ae3fee041
	float DegAtan(float A);// 0x6d89e3fee041
	float DegAsin(float A);// 0x6d88e3fee041
	float DegAcos(float A);// 0x6d87e3fee041
	int DaysInYear(int Year);// 0x6d86e3fee041
	int DaysInMonth(int Year, int Month);// 0x6d85e3fee041
	DateTime DateTimeMinValue();// 0x6d84e3fee041
	DateTime DateTimeMaxValue();// 0x6d83e3fee041
	bool DateTimeFromString(FString DateTimeString, out DateTime Result);// 0x6d82e3fee041
	bool DateTimeFromIsoString(FString IsoString, out DateTime Result);// 0x6d81e3fee041
	float CrossProduct2D(Vector2D A, Vector2D B);// 0x6d80e3fee041
	Vector Cross_VectorVector(Vector A, Vector B);// 0x6d7fe3fee041
	Vector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);// 0x6d7ee3fee041
	float Cos(float A);// 0x6d7de3fee041
	Transform ConvertTransformToRelative(out const Transform Transform, out const Transform ParentTransform);// 0x6d7ce3fee041
	DateTime Convert2CurTime(DateTime IndateTime);// 0x6d7be3fee041
	Vector2D Conv_VectorToVector2D(Vector InVector);// 0x6d7ae3fee041
	Transform Conv_VectorToTransform(Vector InLocation);// 0x6d79e3fee041
	Rotator Conv_VectorToRotator(Vector InVec);// 0x6d78e3fee041
	Quat Conv_VectorToQuaternion(Vector InVec);// 0x6d77e3fee041
	LinearColor Conv_VectorToLinearColor(Vector InVec);// 0x6d76e3fee041
	Vector Conv_Vector4ToVector(out const Vector4 InVector4);// 0x6d75e3fee041
	Rotator Conv_Vector4ToRotator(out const Vector4 InVec);// 0x6d74e3fee041
	Quat Conv_Vector4ToQuaternion(out const Vector4 InVec);// 0x6d73e3fee041
	Vector Conv_Vector2DToVector(Vector2D InVector2D, float Z);// 0x6d72e3fee041
	IntPoint Conv_Vector2DToIntPoint(Vector2D InVector2D);// 0x6d71e3fee041
	Matrix Conv_TransformToMatrix(out const Transform Transform);// 0x6d70e3fee041
	Vector Conv_RotatorToVector(Rotator InRot);// 0x6d6fe3fee041
	Transform Conv_RotatorToTransform(out const Rotator InRotator);// 0x6d6ee3fee041
	Transform Conv_MatrixToTransform(out const Matrix InMatrix);// 0x6d6de3fee041
	Rotator Conv_MatrixToRotator(out const Matrix InMatrix);// 0x6d6ce3fee041
	Vector Conv_LinearColorToVector(LinearColor InLinearColor);// 0x6d6be3fee041
	Color Conv_LinearColorToColor(LinearColor InLinearColor, bool InUseSRGB);// 0x6d6ae3fee041
	Vector Conv_IntVectorToVector(out const IntVector InIntVector);// 0x6d69e3fee041
	IntVector Conv_IntToIntVector(int inInt);// 0x6d68e3fee041
	int64 Conv_IntToInt64(int inInt);// 0x6d67e3fee041
	float Conv_IntToFloat(int inInt);// 0x6d66e3fee041
	byte Conv_IntToByte(int inInt);// 0x6d65e3fee041
	bool Conv_IntToBool(int inInt);// 0x6d64e3fee041
	Vector2D Conv_IntPointToVector2D(IntPoint InIntPoint);// 0x6d63e3fee041
	int Conv_Int64ToInt(int64 inInt);// 0x6d62e3fee041
	byte Conv_Int64ToByte(int64 inInt);// 0x6d61e3fee041
	Vector Conv_FloatToVector(float InFloat);// 0x6d60e3fee041
	LinearColor Conv_FloatToLinearColor(float InFloat);// 0x6d5fe3fee041
	LinearColor Conv_ColorToLinearColor(Color InColor);// 0x6d5ee3fee041
	int Conv_ByteToInt(byte InByte);// 0x6d5de3fee041
	float Conv_ByteToFloat(byte InByte);// 0x6d5ce3fee041
	int Conv_BoolToInt(bool InBool);// 0x6d5be3fee041
	float Conv_BoolToFloat(bool InBool);// 0x6d5ae3fee041
	byte Conv_BoolToByte(bool InBool);// 0x6d59e3fee041
	Transform ComposeTransforms(out const Transform A, out const Transform B);// 0x6d58e3fee041
	Rotator ComposeRotators(Rotator A, Rotator B);// 0x6d57e3fee041
	bool ClassIsChildOf(class Object TestClass, class Object ParentClass);// 0x6d56e3fee041
	Vector ClampVectorSize(Vector A, float Min, float Max);// 0x6d55e3fee041
	int64 ClampInt64(int64 Value, int64 Min, int64 Max);// 0x6d54e3fee041
	float ClampAxis(float Angle);// 0x6d53e3fee041
	Vector2D ClampAxes2D(Vector2D A, float MinAxisVal, float MaxAxisVal);// 0x6d52e3fee041
	float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);// 0x6d51e3fee041
	int Clamp(int Value, int Min, int Max);// 0x6d50e3fee041
	LinearColor CInterpTo(LinearColor Current, LinearColor Target, float DeltaTime, float InterpSpeed);// 0x6d4fe3fee041
	void BreakVector4(out const Vector4 InVec, out float X, out float Y, out float Z, out float W);// 0x6d4ee3fee041
	void BreakVector2D(Vector2D InVec, out float X, out float Y);// 0x6d4de3fee041
	void BreakVector(Vector InVec, out float X, out float Y, out float Z);// 0x6d4ce3fee041
	void BreakTransform(out const Transform InTransform, out Vector Location, out Rotator Rotation, out Vector Scale);// 0x6d4be3fee041
	void BreakTimespan2(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int FractionNano);// 0x6d4ae3fee041
	void BreakTimespan(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int Milliseconds);// 0x6d49e3fee041
	void BreakRotIntoAxes(out const Rotator InRot, out Vector X, out Vector Y, out Vector Z);// 0x6d48e3fee041
	void BreakRotator(Rotator InRot, out float Roll, out float Pitch, out float Yaw);// 0x6d47e3fee041
	void BreakRandomStream(out const RandomStream InRandomStream, out int InitialSeed);// 0x6d46e3fee041
	void BreakQualifiedFrameTime(out const QualifiedFrameTime InFrameTime, out FrameNumber Frame, out FrameRate FrameRate, out float SubFrame);// 0x6d45e3fee041
	void BreakFrameRate(out const FrameRate InFrameRate, out int Numerator, out int Denominator);// 0x6d44e3fee041
	void BreakDateTime(DateTime IndateTime, out int Year, out int Month, out int Day, out int Hour, out int Minute, out int Second, out int Millisecond);// 0x6d43e3fee041
	void BreakColor(LinearColor InColor, out float R, out float G, out float B, out float A);// 0x6d42e3fee041
	bool BooleanXOR(bool A, bool B);// 0x6d41e3fee041
	bool BooleanOR(bool A, bool B);// 0x6d40e3fee041
	bool BooleanNOR(bool A, bool B);// 0x6d3fe3fee041
	bool BooleanNAND(bool A, bool B);// 0x6d3ee3fee041
	bool BooleanAND(bool A, bool B);// 0x6d3de3fee041
	byte BMin(byte A, byte B);// 0x6d3ce3fee041
	byte BMax(byte A, byte B);// 0x6d3be3fee041
	float Atan2(float Y, float X);// 0x6d3ae3fee041
	float Atan(float A);// 0x6d39e3fee041
	float Asin(float A);// 0x6d38e3fee041
	int And_IntInt(int A, int B);// 0x6d37e3fee041
	int64 And_Int64Int64(int64 A, int64 B);// 0x6d36e3fee041
	Vector Add_VectorVector(Vector A, Vector B);// 0x6d35e3fee041
	Vector Add_VectorInt(Vector A, int B);// 0x6d34e3fee041
	Vector Add_VectorFloat(Vector A, float B);// 0x6d33e3fee041
	Vector4 Add_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x6d32e3fee041
	Vector2D Add_Vector2DVector2D(Vector2D A, Vector2D B);// 0x6d31e3fee041
	Vector2D Add_Vector2DFloat(Vector2D A, float B);// 0x6d30e3fee041
	Timespan Add_TimespanTimespan(Timespan A, Timespan B);// 0x6d2fe3fee041
	Quat Add_QuatQuat(out const Quat A, out const Quat B);// 0x6d2ee3fee041
	Matrix Add_MatrixMatrix(out const Matrix A, out const Matrix B);// 0x6d2de3fee041
	LinearColor Add_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x6d2ce3fee041
	IntPoint Add_IntPointIntPoint(IntPoint A, IntPoint B);// 0x6d2be3fee041
	IntPoint Add_IntPointInt(IntPoint A, int B);// 0x6d2ae3fee041
	int Add_IntInt(int A, int B);// 0x6d29e3fee041
	int64 Add_Int64Int64(int64 A, int64 B);// 0x6d28e3fee041
	float Add_FloatFloat(float A, float B);// 0x6d27e3fee041
	DateTime Add_DateTimeTimespan(DateTime A, Timespan B);// 0x6d26e3fee041
	DateTime Add_DateTimeDateTime(DateTime A, DateTime B);// 0x6d25e3fee041
	byte Add_ByteByte(byte A, byte B);// 0x6d24e3fee041
	float Acos(float A);// 0x6d23e3fee041
	int64 Abs_Int64(int64 A);// 0x6d22e3fee041
	int Abs_Int(int A);// 0x6d21e3fee041
	float Abs(float A);// 0x6d20e3fee041

--------------------------------
Class: VectorSpringState

--------------------------------
Class: Timespan

--------------------------------
Class: FloatSpringState

--------------------------------
Class: KismetNodeHelperLibrary.BlueprintFunctionLibrary.Object
	void MarkBit(out int Data, int Index);// 0x6fcde3fee041
	bool HasUnmarkedBit(int Data, int NumBits);// 0x6fcce3fee041
	bool HasMarkedBit(int Data, int NumBits);// 0x6fcbe3fee041
	byte GetValidValue(const Enum* Enum, byte EnumeratorValue);// 0x6fcae3fee041
	int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);// 0x6fc9e3fee041
	int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);// 0x6fc8e3fee041
	int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);// 0x6fc7e3fee041
	byte GetEnumeratorValueFromIndex(const Enum* Enum, byte EnumeratorIndex);// 0x6fc6e3fee041
	FString GetEnumeratorUserFriendlyName(const Enum* Enum, byte EnumeratorValue);// 0x6fc5e3fee041
	FName GetEnumeratorName(const Enum* Enum, byte EnumeratorValue);// 0x6fc4e3fee041
	void ClearBit(out int Data, int Index);// 0x6fc3e3fee041
	void ClearAllBits(out int Data);// 0x6fc2e3fee041
	bool BitIsMarked(int Data, int Index);// 0x6fc1e3fee041

--------------------------------
Class: KismetRenderingLibrary.BlueprintFunctionLibrary.Object
	void SetCastInsetShadowForAllAttachments(PrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);// 0x6fe2e3fee041
	Texture2D* RenderTargetCreateStaticTexture2DEditorOnly(TextureRenderTarget2D* RenderTarget, FString Name, byte CompressionSettings, byte MipSettings);// 0x6fe1e3fee041
	void ReleaseRenderTarget2D(TextureRenderTarget2D* TextureRenderTarget);// 0x6fe0e3fee041
	Color ReadRenderTargetUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0x6fdfe3fee041
	LinearColor ReadRenderTargetRawUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0x6fdee3fee041
	LinearColor ReadRenderTargetRawPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0x6fdde3fee041
	Color ReadRenderTargetPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0x6fdce3fee041
	SkelMeshSkinWeightInfo MakeSkinWeightInfo(int Bone0, byte Weight0, int Bone1, byte Weight1, int Bone2, byte Weight2, int Bone3, byte Weight3);// 0x6fdbe3fee041
	Texture2D* ImportFileAsTexture2D(Object* WorldContextObject, FString Filename);// 0x6fdae3fee041
	Texture2D* ImportBufferAsTexture2D(Object* WorldContextObject, out const byte[] Buffer);// 0x6fd9e3fee041
	void ExportTexture2D(Object* WorldContextObject, Texture2D* Texture, FString FilePath, FString Filename);// 0x6fd8e3fee041
	void ExportRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename);// 0x6fd7e3fee041
	void EndDrawCanvasToRenderTarget(Object* WorldContextObject, out const DrawToRenderTargetContext Context);// 0x6fd6e3fee041
	void DrawMaterialToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, MaterialInterface* Material);// 0x6fd5e3fee041
	TextureRenderTargetVolume* CreateRenderTargetVolume(Object* WorldContextObject, int Width, int Height, int Depth, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x6fd4e3fee041
	TextureRenderTarget2DArray* CreateRenderTarget2DArray(Object* WorldContextObject, int Width, int Height, int Slices, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x6fd3e3fee041
	TextureRenderTarget2D* CreateRenderTarget2D(Object* WorldContextObject, int Width, int Height, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps, FName TargetName);// 0x6fd2e3fee041
	void ConvertRenderTargetToTexture2DEditorOnly(Object* WorldContextObject, TextureRenderTarget2D* RenderTarget, Texture2D* Texture);// 0x6fd1e3fee041
	void ClearRenderTarget2D(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, LinearColor ClearColor);// 0x6fd0e3fee041
	void BreakSkinWeightInfo(SkelMeshSkinWeightInfo InWeight, out int Bone0, out byte Weight0, out int Bone1, out byte Weight1, out int Bone2, out byte Weight2, out int Bone3, out byte Weight3);// 0x6fcfe3fee041
	void BeginDrawCanvasToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out Canvas* Canvas, out Vector2D Size, out DrawToRenderTargetContext Context);// 0x6fcee3fee041

--------------------------------
Class: DrawToRenderTargetContext
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TextureRenderTargetVolume.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe8, Size: 0x4]
	int SizeY;//[Offset: 0xec, Size: 0x4]
	int SizeZ;//[Offset: 0xf0, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xf4, Size: 0x10]
	byte OverrideFormat;//[Offset: 0x104, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x105, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x105, Size: 0x1]

--------------------------------
Class: TextureRenderTarget2DArray.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe8, Size: 0x4]
	int SizeY;//[Offset: 0xec, Size: 0x4]
	int Slices;//[Offset: 0xf0, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xf4, Size: 0x10]
	byte OverrideFormat;//[Offset: 0x104, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x105, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x105, Size: 0x1]

--------------------------------
Class: KismetStringLibrary.BlueprintFunctionLibrary.Object
	FString TrimTrailing(FString SourceString);// 0x7024e3fee041
	FString Trim(FString SourceString);// 0x7023e3fee041
	FString ToUpper(FString SourceString);// 0x7022e3fee041
	FString ToLower(FString SourceString);// 0x7021e3fee041
	FString TimeSecondsToString(float InSeconds);// 0x7020e3fee041
	bool StartsWith(FString SourceString, FString InPrefix, byte SearchCase);// 0x701fe3fee041
	bool Split(FString SourceString, FString InStr, out FString LeftS, out FString RightS, byte SearchCase, byte SearchDir);// 0x701ee3fee041
	FString RightPad(FString SourceString, int ChCount);// 0x701de3fee041
	FString RightChop(FString SourceString, int Count);// 0x701ce3fee041
	FString Right(FString SourceString, int Count);// 0x701be3fee041
	FString Reverse(FString SourceString);// 0x701ae3fee041
	int ReplaceInline(out FString SourceString, FString SearchText, FString ReplacementText, byte SearchCase);// 0x7019e3fee041
	FString Replace(FString SourceString, FString from, FString To, byte SearchCase);// 0x7018e3fee041
	FString[] ParseIntoArray(FString SourceString, FString Delimiter, const bool CullEmptyStrings);// 0x7017e3fee041
	bool NotEqual_StrStr(FString A, FString B);// 0x7016e3fee041
	bool NotEqual_StriStri(FString A, FString B);// 0x7015e3fee041
	FString Mid(FString SourceString, int Start, int Count);// 0x7014e3fee041
	bool MatchesWildcard(FString SourceString, FString Wildcard, byte SearchCase);// 0x7013e3fee041
	int Len(FString S);// 0x7012e3fee041
	FString LeftPad(FString SourceString, int ChCount);// 0x7011e3fee041
	FString LeftChop(FString SourceString, int Count);// 0x7010e3fee041
	FString Left(FString SourceString, int Count);// 0x700fe3fee041
	FString JoinStringArray(out const FString[] SourceArray, FString Separator);// 0x700ee3fee041
	bool IsNumeric(FString SourceString);// 0x700de3fee041
	bool IsEmpty(FString inString);// 0x700ce3fee041
	FString GetSubstring(FString SourceString, int StartIndex, int Length);// 0x700be3fee041
	int GetCharacterAsNumber(FString SourceString, int Index);// 0x700ae3fee041
	FString[] GetCharacterArrayFromString(FString SourceString);// 0x7009e3fee041
	int FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);// 0x7008e3fee041
	bool EqualEqual_StrStr(FString A, FString B);// 0x7007e3fee041
	bool EqualEqual_StriStri(FString A, FString B);// 0x7006e3fee041
	bool EndsWith(FString SourceString, FString InSuffix, byte SearchCase);// 0x7005e3fee041
	int CullArray(FString SourceString, out FString[] inArray);// 0x7004e3fee041
	FString Conv_VectorToString(Vector InVec);// 0x7003e3fee041
	FString Conv_Vector2dToString(Vector2D InVec);// 0x7002e3fee041
	FString Conv_TransformToString(out const Transform InTrans);// 0x7001e3fee041
	void Conv_StringToVector2D(FString inString, out Vector2D OutConvertedVector2D, out bool OutIsValid);// 0x7000e3fee041
	void Conv_StringToVector(FString inString, out Vector OutConvertedVector, out bool OutIsValid);// 0x6fffe3fee041
	void Conv_StringToRotator(FString inString, out Rotator OutConvertedRotator, out bool OutIsValid);// 0x6ffee3fee041
	FName Conv_StringToName(FString inString);// 0x6ffde3fee041
	int Conv_StringToInt(FString inString);// 0x6ffce3fee041
	float Conv_StringToFloat(FString inString);// 0x6ffbe3fee041
	void Conv_StringToColor(FString inString, out LinearColor OutConvertedColor, out bool OutIsValid);// 0x6ffae3fee041
	FString Conv_RotatorToString(Rotator InRot);// 0x6ff9e3fee041
	FString Conv_ObjectToString(Object* InObj);// 0x6ff8e3fee041
	FString Conv_NameToString(FName InName);// 0x6ff7e3fee041
	FString Conv_MatrixToString(out const Matrix InMatrix);// 0x6ff6e3fee041
	FString Conv_IntVectorToString(IntVector InIntVec);// 0x6ff5e3fee041
	FString Conv_IntToString(int inInt);// 0x6ff4e3fee041
	FString Conv_IntPointToString(IntPoint InIntPoint);// 0x6ff3e3fee041
	FString Conv_FloatToString(float InFloat);// 0x6ff2e3fee041
	FString Conv_ColorToString(LinearColor InColor);// 0x6ff1e3fee041
	FString Conv_ByteToString(byte InByte);// 0x6ff0e3fee041
	FString Conv_BoolToString(bool InBool);// 0x6fefe3fee041
	bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd);// 0x6feee3fee041
	FString Concat_StrStr(FString A, FString B);// 0x6fede3fee041
	FString BuildString_Vector2d(FString AppendTo, FString Prefix, Vector2D InVector2D, FString Suffix);// 0x6fece3fee041
	FString BuildString_Vector(FString AppendTo, FString Prefix, Vector InVector, FString Suffix);// 0x6febe3fee041
	FString BuildString_Rotator(FString AppendTo, FString Prefix, Rotator InRot, FString Suffix);// 0x6feae3fee041
	FString BuildString_Object(FString AppendTo, FString Prefix, Object* InObj, FString Suffix);// 0x6fe9e3fee041
	FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix);// 0x6fe8e3fee041
	FString BuildString_IntVector(FString AppendTo, FString Prefix, IntVector InIntVector, FString Suffix);// 0x6fe7e3fee041
	FString BuildString_Int(FString AppendTo, FString Prefix, int inInt, FString Suffix);// 0x6fe6e3fee041
	FString BuildString_Float(FString AppendTo, FString Prefix, float InFloat, FString Suffix);// 0x6fe5e3fee041
	FString BuildString_Color(FString AppendTo, FString Prefix, LinearColor InColor, FString Suffix);// 0x6fe4e3fee041
	FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix);// 0x6fe3e3fee041

--------------------------------
Class: KismetStringTableLibrary.BlueprintFunctionLibrary.Object
	bool IsRegisteredTableId(const FName TableId);// 0x702ce3fee041
	bool IsRegisteredTableEntry(const FName TableId, FString Key);// 0x702be3fee041
	FString GetTableNamespace(const FName TableId);// 0x702ae3fee041
	FString GetTableEntrySourceString(const FName TableId, FString Key);// 0x7029e3fee041
	FString GetTableEntryMetaData(const FName TableId, FString Key, const FName MetaDataId);// 0x7028e3fee041
	FName[] GetRegisteredStringTables();// 0x7027e3fee041
	FName[] GetMetaDataIdsFromStringTableEntry(const FName TableId, FString Key);// 0x7026e3fee041
	FString[] GetKeysFromStringTable(const FName TableId);// 0x7025e3fee041

--------------------------------
Class: KismetSystemLibrary.BlueprintFunctionLibrary.Object
	void UnregisterForRemoteNotifications();// 0x1556e3fee041
	void UnloadPrimaryAssetList(out const PrimaryAssetId[] PrimaryAssetIdList);// 0x1555e3fee041
	void UnloadPrimaryAsset(PrimaryAssetId PrimaryAssetId);// 0x1554e3fee041
	void TransactObject(Object* Object);// 0x1553e3fee041
	void StackTrace();// 0x1552e3fee041
	bool SphereTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime, FString InTraceTag);// 0x1551e3fee041
	bool SphereTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x1550e3fee041
	bool SphereTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime, FString InTraceTag);// 0x154fe3fee041
	bool SphereTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x154ee3fee041
	bool SphereTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x154de3fee041
	bool SphereTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x154ce3fee041
	bool SphereOverlapComponents(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x154be3fee041
	bool SphereOverlapActors(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x154ae3fee041
	void SnapshotObject(Object* Object);// 0x1549e3fee041
	void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);// 0x1548e3fee041
	void ShowPlatformSpecificAchievementsScreen(const PlayerController* SpecificPlayer);// 0x1547e3fee041
	void ShowInterstitialAd();// 0x1546e3fee041
	void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);// 0x1545e3fee041
	void SetWindowTitle(out const FText Title);// 0x1544e3fee041
	void SetVolumeButtonsHandledBySystem(bool bEnabled);// 0x1543e3fee041
	void SetVectorPropertyByName(Object* Object, FName PropertyName, out const Vector Value);// 0x1542e3fee041
	void SetUserActivity(out const UserActivity UserActivity);// 0x1540e3fee041
	void SetTransformPropertyByName(Object* Object, FName PropertyName, out const Transform Value);// 0x153fe3fee041
	void SetTextPropertyByName(Object* Object, FName PropertyName, out const FText Value);// 0x153ee3fee041
	void SetSuppressViewportTransitionMessage(const Object* WorldContextObject, bool bState);// 0x153de3fee041
	void SetStructurePropertyByName(Object* Object, FName PropertyName, out const GenericStruct Value);// 0x153be3fee041
	void SetStringPropertyByName(Object* Object, FName PropertyName, FString Value);// 0x153ae3fee041
	void SetSoftObjectPropertyByName(Object* Object, FName PropertyName, out const Object* Value);// 0x1539e3fee041
	void SetSoftClassPropertyByName(Object* Object, FName PropertyName, out const class Object Value);// 0x1538e3fee041
	void SetRotatorPropertyByName(Object* Object, FName PropertyName, out const Rotator Value);// 0x1537e3fee041
	void SetObjectPropertyByName(Object* Object, FName PropertyName, Object* Value);// 0x1536e3fee041
	void SetNamePropertyByName(Object* Object, FName PropertyName, out const FName Value);// 0x1535e3fee041
	void SetLinearColorPropertyByName(Object* Object, FName PropertyName, out const LinearColor Value);// 0x1534e3fee041
	void SetIntPropertyByName(Object* Object, FName PropertyName, int Value);// 0x1533e3fee041
	void SetInterfacePropertyByName(Object* Object, FName PropertyName, out const interface classNone Value);// 0x1532e3fee041
	void SetInt64PropertyByName(Object* Object, FName PropertyName, int64 Value);// 0x1531e3fee041
	void SetGamepadsBlockDeviceFeedback(bool bBlock);// 0x1530e3fee041
	void SetFloatPropertyByName(Object* Object, FName PropertyName, float Value);// 0x152fe3fee041
	void SetFieldPathPropertyByName(Object* Object, FName PropertyName, out const Value(FieldPathProperty) Value);// 0x152ee3fee041
	void SetColorPropertyByName(Object* Object, FName PropertyName, out const Color Value);// 0x152de3fee041
	void SetCollisionProfileNameProperty(Object* Object, FName PropertyName, out const CollisionProfileName Value);// 0x152be3fee041
	void SetClassPropertyByName(Object* Object, FName PropertyName, class Object Value);// 0x152ae3fee041
	void SetBytePropertyByName(Object* Object, FName PropertyName, byte Value);// 0x1529e3fee041
	void SetBoolPropertyByName(Object* Object, FName PropertyName, bool Value);// 0x1528e3fee041
	void RetriggerableDelay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0x1527e3fee041
	void ResetGamepadAssignmentToController(int ControllerId);// 0x1526e3fee041
	void ResetGamepadAssignments();// 0x1525e3fee041
	void RegisterForRemoteNotifications();// 0x1524e3fee041
	void QuitGame(const Object* WorldContextObject, PlayerController* SpecificPlayer, byte QuitPreference, bool bIgnorePlatformRestrictions);// 0x1522e3fee041
	void PrintWarning(FString inString);// 0x1521e3fee041
	void PrintText(const Object* WorldContextObject, const FText InText, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0x1520e3fee041
	void PrintString(const Object* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0x151fe3fee041
	bool ParseParamValue(FString inString, FString InParam, out FString OutValue);// 0x151ee3fee041
	bool ParseParam(FString inString, FString InParam);// 0x151de3fee041
	void ParseCommandLine(FString InCmdLine, out FString[] OutTokens, out FString[] OutSwitches, out <FString,FString> OutParams);// 0x151ce3fee041
	void OnAssetLoaded__DelegateSignature(Object* Loaded);// 0x1506e3fee041
	void OnAssetClassLoaded__DelegateSignature(class Object Loaded);// 0x1509e3fee041
	bool NotEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0x151be3fee041
	bool NotEqual_SoftClassReference(out const class Object A, out const class Object B);// 0x151ae3fee041
	bool NotEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0x1519e3fee041
	bool NotEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0x1518e3fee041
	FString NormalizeFilename(FString InFilename);// 0x1517e3fee041
	void MoveComponentTo(SceneComponent* Component, Vector TargetRelativeLocation, Rotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, byte MoveAction, LatentActionInfo LatentInfo);// 0x1515e3fee041
	SoftObjectPath MakeSoftObjectPath(FString PathString);// 0x1514e3fee041
	SoftClassPath MakeSoftClassPath(FString PathString);// 0x1513e3fee041
	FText MakeLiteralText(FText Value);// 0x1512e3fee041
	FString MakeLiteralString(FString Value);// 0x1511e3fee041
	FName MakeLiteralName(FName Value);// 0x1510e3fee041
	int MakeLiteralInt(int Value);// 0x150fe3fee041
	float MakeLiteralFloat(float Value);// 0x150ee3fee041
	byte MakeLiteralByte(byte Value);// 0x150de3fee041
	bool MakeLiteralBool(bool Value);// 0x150ce3fee041
	void LoadInterstitialAd(int AdIdIndex);// 0x150be3fee041
	class Object LoadClassAsset_Blocking(class Object AssetClass);// 0x150ae3fee041
	void LoadAssetClass(const Object* WorldContextObject, class Object AssetClass, delegate OnLoaded, LatentActionInfo LatentInfo);// 0x1508e3fee041
	Object* LoadAsset_Blocking(Object* Asset);// 0x1507e3fee041
	void LoadAsset(const Object* WorldContextObject, Object* Asset, delegate OnLoaded, LatentActionInfo LatentInfo);// 0x1505e3fee041
	bool LineTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x1504e3fee041
	bool LineTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x1503e3fee041
	bool LineTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime, FString InTraceTag);// 0x1502e3fee041
	bool LineTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x1501e3fee041
	bool LineTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x1500e3fee041
	bool LineTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime, FString InTraceTag);// 0x14ffe3fee041
	void LaunchURL(FString URL);// 0x14fee3fee041
	void K2_UnPauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x14fde3fee041
	void K2_UnPauseTimerDelegate(delegate Delegate);// 0x14fce3fee041
	void K2_UnPauseTimer(Object* Object, FString FunctionName);// 0x14fbe3fee041
	bool K2_TimerExistsHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x14fae3fee041
	bool K2_TimerExistsDelegate(delegate Delegate);// 0x14f9e3fee041
	bool K2_TimerExists(Object* Object, FString FunctionName);// 0x14f8e3fee041
	TimerHandle K2_SetTimerDelegate(delegate Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0x14f7e3fee041
	TimerHandle K2_SetTimer(Object* Object, FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0x14f6e3fee041
	void K2_PauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x14f5e3fee041
	void K2_PauseTimerDelegate(delegate Delegate);// 0x14f4e3fee041
	void K2_PauseTimer(Object* Object, FString FunctionName);// 0x14f3e3fee041
	bool K2_IsValidTimerHandle(TimerHandle Handle);// 0x14f2e3fee041
	bool K2_IsTimerPausedHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x14f1e3fee041
	bool K2_IsTimerPausedDelegate(delegate Delegate);// 0x14f0e3fee041
	bool K2_IsTimerPaused(Object* Object, FString FunctionName);// 0x14efe3fee041
	bool K2_IsTimerActiveHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x14eee3fee041
	bool K2_IsTimerActiveDelegate(delegate Delegate);// 0x14ede3fee041
	bool K2_IsTimerActive(Object* Object, FString FunctionName);// 0x14ece3fee041
	TimerHandle K2_InvalidateTimerHandle(out TimerHandle Handle);// 0x14ebe3fee041
	float K2_GetTimerRemainingTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x14eae3fee041
	float K2_GetTimerRemainingTimeDelegate(delegate Delegate);// 0x14e9e3fee041
	float K2_GetTimerRemainingTime(Object* Object, FString FunctionName);// 0x14e8e3fee041
	float K2_GetTimerElapsedTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x14e7e3fee041
	float K2_GetTimerElapsedTimeDelegate(delegate Delegate);// 0x14e6e3fee041
	float K2_GetTimerElapsedTime(Object* Object, FString FunctionName);// 0x14e5e3fee041
	void K2_ClearTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x14e4e3fee041
	void K2_ClearTimerDelegate(delegate Delegate);// 0x14e3e3fee041
	void K2_ClearTimer(Object* Object, FString FunctionName);// 0x14e2e3fee041
	void K2_ClearAndInvalidateTimerHandle(const Object* WorldContextObject, out TimerHandle Handle);// 0x14e0e3fee041
	bool IsValidSoftObjectReference(out const Object* SoftObjectReference);// 0x14dfe3fee041
	bool IsValidSoftClassReference(out const class Object SoftClassReference);// 0x14dee3fee041
	bool IsValidPrimaryAssetType(PrimaryAssetType PrimaryAssetType);// 0x14dde3fee041
	bool IsValidPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x14dce3fee041
	bool IsValidClass(class Object Class);// 0x14dbe3fee041
	bool IsValid(const Object* Object);// 0x14dae3fee041
	bool IsUnattended();// 0x14d9e3fee041
	bool IsStandalone(const Object* WorldContextObject);// 0x14d8e3fee041
	bool IsSplitScreen(const Object* WorldContextObject);// 0x14d7e3fee041
	bool IsServer(const Object* WorldContextObject);// 0x14d6e3fee041
	bool IsScreensaverEnabled();// 0x14d5e3fee041
	bool IsPackagedForDistribution();// 0x14d4e3fee041
	bool IsLoggedIn(const PlayerController* SpecificPlayer);// 0x14d3e3fee041
	bool IsInterstitialAdRequested();// 0x14d2e3fee041
	bool IsInterstitialAdAvailable();// 0x14d1e3fee041
	bool IsDedicatedServer(const Object* WorldContextObject);// 0x14d0e3fee041
	bool IsControllerAssignedToGamepad(int ControllerId);// 0x14cfe3fee041
	void HideAdBanner();// 0x14cee3fee041
	bool GetVolumeButtonsHandledBySystem();// 0x14cde3fee041
	FString GetUniqueDeviceId();// 0x14cce3fee041
	FString GetSystemPath(const Object* Object);// 0x14cbe3fee041
	bool GetSupportedFullscreenResolutions(out IntPoint[] Resolutions);// 0x14cae3fee041
	Object* GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x14c9e3fee041
	class Object GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x14c8e3fee041
	int GetRenderingMaterialQualityLevel();// 0x14c7e3fee041
	int GetRenderingDetailMode();// 0x14c6e3fee041
	FString GetProjectSavedDirectory();// 0x14c5e3fee041
	FString GetProjectDirectory();// 0x14c4e3fee041
	FString GetProjectContentDirectory();// 0x14c3e3fee041
	void GetPrimaryAssetsWithBundleState(out const FName[] RequiredBundles, out const FName[] ExcludedBundles, out const PrimaryAssetType[] ValidTypes, bool bForceCurrentState, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0x14c2e3fee041
	void GetPrimaryAssetIdList(PrimaryAssetType PrimaryAssetType, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0x14c1e3fee041
	PrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(Object* SoftObjectReference);// 0x14c0e3fee041
	PrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(class Object SoftClassReference);// 0x14bfe3fee041
	PrimaryAssetId GetPrimaryAssetIdFromObject(Object* Object);// 0x14bee3fee041
	PrimaryAssetId GetPrimaryAssetIdFromClass(class Object Class);// 0x14bde3fee041
	FString[] GetPreferredLanguages();// 0x14bce3fee041
	FString GetPlatformUserName();// 0x14bbe3fee041
	FString GetPlatformUserDir();// 0x14bae3fee041
	FString GetPathName(const Object* Object);// 0x14b9e3fee041
	Object* GetOuterObject(const Object* Object);// 0x14b8e3fee041
	FString GetObjectName(const Object* Object);// 0x14b7e3fee041
	Object* GetObjectFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x14b6e3fee041
	int GetMinYResolutionForUI();// 0x14b5e3fee041
	int GetMinYResolutionFor3DView();// 0x14b4e3fee041
	FString GetLocalCurrencySymbol();// 0x14b3e3fee041
	FString GetLocalCurrencyCode();// 0x14b2e3fee041
	float GetGameTimeInSeconds(const Object* WorldContextObject);// 0x14b1e3fee041
	FString GetGamepadControllerName(int ControllerId);// 0x14b0e3fee041
	Texture2D* GetGamepadButtonGlyph(FString ButtonKey, int ControllerIndex);// 0x14afe3fee041
	FString GetGameName();// 0x14aee3fee041
	FString GetGameBundleId();// 0x14ade3fee041
	int64 GetFrameCount();// 0x14ace3fee041
	FString GetEngineVersion();// 0x14abe3fee041
	FString GetDisplayName(const Object* Object);// 0x14aae3fee041
	FString GetDeviceId();// 0x14a9e3fee041
	FString GetDefaultLocale();// 0x14a8e3fee041
	FString GetDefaultLanguage();// 0x14a7e3fee041
	bool GetCurrentBundleState(PrimaryAssetId PrimaryAssetId, bool bForceCurrentState, out FName[] OutBundles);// 0x14a6e3fee041
	bool GetConvenientWindowedResolutions(out IntPoint[] Resolutions);// 0x14a5e3fee041
	int GetConsoleVariableIntValue(FString VariableName);// 0x14a4e3fee041
	float GetConsoleVariableFloatValue(FString VariableName);// 0x14a3e3fee041
	bool GetConsoleVariableBoolValue(FString VariableName);// 0x14a2e3fee041
	void GetComponentBounds(const SceneComponent* Component, out Vector Origin, out Vector BoxExtent, out float SphereRadius);// 0x14a1e3fee041
	FString GetCommandLine();// 0x14a0e3fee041
	class Object GetClassFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x149fe3fee041
	FString GetClassDisplayName(class Object Class);// 0x149ee3fee041
	int GetAdIDCount();// 0x149de3fee041
	void GetActorListFromComponentList(out const PrimitiveComponent*[] ComponentList, class Object ActorClassFilter, out Actor*[] OutActorList);// 0x149ce3fee041
	void GetActorBounds(const Actor* Actor, out Vector Origin, out Vector BoxExtent);// 0x149be3fee041
	void ForceCloseAdBanner();// 0x149ae3fee041
	void FlushPersistentDebugLines(const Object* WorldContextObject);// 0x1499e3fee041
	void FlushDebugStrings(const Object* WorldContextObject);// 0x1498e3fee041
	void ExecuteConsoleCommand(const Object* WorldContextObject, FString Command, PlayerController* SpecificPlayer);// 0x1497e3fee041
	bool EqualEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0x1496e3fee041
	bool EqualEqual_SoftClassReference(out const class Object A, out const class Object B);// 0x1495e3fee041
	bool EqualEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0x1494e3fee041
	bool EqualEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0x1493e3fee041
	int EndTransaction();// 0x1492e3fee041
	void DrawDebugString(const Object* WorldContextObject, const Vector TextLocation, FString Text, Actor* TestBaseActor, LinearColor TextColor, float Duration);// 0x1491e3fee041
	void DrawDebugSphere(const Object* WorldContextObject, const Vector Center, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0x1490e3fee041
	void DrawDebugPoint(const Object* WorldContextObject, const Vector position, float Size, LinearColor PointColor, float Duration);// 0x148fe3fee041
	void DrawDebugPlane(const Object* WorldContextObject, out const Plane PlaneCoordinates, const Vector Location, float Size, LinearColor PlaneColor, float Duration);// 0x148ee3fee041
	void DrawDebugLine(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, LinearColor LineColor, float Duration, float Thickness);// 0x148de3fee041
	void DrawDebugFrustum(const Object* WorldContextObject, out const Transform FrustumTransform, LinearColor FrustumColor, float Duration, float Thickness);// 0x148ce3fee041
	void DrawDebugFloatHistoryTransform(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, out const Transform DrawTransform, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0x148be3fee041
	void DrawDebugFloatHistoryLocation(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, Vector DrawLocation, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0x148ae3fee041
	void DrawDebugCylinder(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0x1489e3fee041
	void DrawDebugCoordinateSystem(const Object* WorldContextObject, const Vector AxisLoc, const Rotator AxisRot, float Scale, float Duration, float Thickness);// 0x1488e3fee041
	void DrawDebugConeInDegrees(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0x1487e3fee041
	void DrawDebugCone(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0x1486e3fee041
	void DrawDebugCircle(const Object* WorldContextObject, Vector Center, float Radius, int NumSegments, LinearColor LineColor, float Duration, float Thickness, Vector YAxis, Vector ZAxis, bool bDrawAxis);// 0x1485e3fee041
	void DrawDebugCapsule(const Object* WorldContextObject, const Vector Center, float HalfHeight, float Radius, const Rotator Rotation, LinearColor LineColor, float Duration, float Thickness);// 0x1484e3fee041
	void DrawDebugCamera(const CameraActor* CameraActor, LinearColor CameraColor, float Duration);// 0x1483e3fee041
	void DrawDebugBox(const Object* WorldContextObject, const Vector Center, Vector Extent, LinearColor LineColor, const Rotator Rotation, float Duration, float Thickness);// 0x1482e3fee041
	void DrawDebugArrow(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, float ArrowSize, LinearColor LineColor, float Duration, float Thickness);// 0x1481e3fee041
	bool DoesImplementInterface(const Object* TestObject, class Interface Interface);// 0x1480e3fee041
	void Delay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0x147ee3fee041
	void CreateCopyForUndoBuffer(Object* ObjectToModify);// 0x147de3fee041
	FString ConvertToRelativePath(FString Filename);// 0x147ce3fee041
	FString ConvertToAbsolutePath(FString Filename);// 0x147be3fee041
	Object* Conv_SoftObjPathToSoftObjRef(out const SoftObjectPath SoftObjectPath);// 0x147ae3fee041
	FString Conv_SoftObjectReferenceToString(out const Object* SoftObjectReference);// 0x1479e3fee041
	Object* Conv_SoftObjectReferenceToObject(out const Object* SoftObject);// 0x1478e3fee041
	FString Conv_SoftClassReferenceToString(out const class Object SoftClassReference);// 0x1477e3fee041
	class Object Conv_SoftClassReferenceToClass(out const class Object SoftClass);// 0x1476e3fee041
	class Object Conv_SoftClassPathToSoftClassRef(out const SoftClassPath SoftClassPath);// 0x1475e3fee041
	FString Conv_PrimaryAssetTypeToString(PrimaryAssetType PrimaryAssetType);// 0x1474e3fee041
	FString Conv_PrimaryAssetIdToString(PrimaryAssetId PrimaryAssetId);// 0x1473e3fee041
	Object* Conv_ObjectToSoftObjectReference(Object* Object);// 0x1472e3fee041
	Object* Conv_InterfaceToObject(out const interface classNone Interface);// 0x1471e3fee041
	class Object Conv_ClassToSoftClassReference(out const class Object Class);// 0x1470e3fee041
	void ControlScreensaver(bool bAllowScreenSaver);// 0x146fe3fee041
	bool ComponentOverlapComponents(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x146ee3fee041
	bool ComponentOverlapActors(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x146de3fee041
	void CollectGarbage();// 0x146ce3fee041
	bool CapsuleTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x146be3fee041
	bool CapsuleTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x146ae3fee041
	bool CapsuleTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x1469e3fee041
	bool CapsuleTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x1468e3fee041
	bool CapsuleTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x1467e3fee041
	bool CapsuleTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x1466e3fee041
	bool CapsuleOverlapComponents(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x1465e3fee041
	bool CapsuleOverlapActors(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x1464e3fee041
	bool CanLaunchURL(FString URL);// 0x1463e3fee041
	void CancelTransaction(const int Index);// 0x1462e3fee041
	void BreakSoftObjectPath(SoftObjectPath InSoftObjectPath, out FString PathString);// 0x1461e3fee041
	void BreakSoftClassPath(SoftClassPath InSoftClassPath, out FString PathString);// 0x1460e3fee041
	bool BoxTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x145fe3fee041
	bool BoxTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x145ee3fee041
	bool BoxTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x145de3fee041
	bool BoxTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x145ce3fee041
	bool BoxTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x145be3fee041
	bool BoxTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x1458e3fee041
	bool BoxOverlapComponents(const Object* WorldContextObject, const Vector BoxPos, Vector Extent, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x1457e3fee041
	bool BoxOverlapActors(const Object* WorldContextObject, const Vector BoxPos, Vector BoxExtent, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x1455e3fee041
	int BeginTransaction(FString Context, FText Description, Object* PrimaryObject);// 0x1454e3fee041
	DebugFloatHistory AddFloatHistorySample(float Value, out const DebugFloatHistory FloatHistory);// 0x1452e3fee041

--------------------------------
Class: UserActivity
	FString ActionName;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: GenericStruct
	int Data;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: CollisionProfileName
	FName Name;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DebugFloatHistory
	float[] Samples;//[Offset: 0x0, Size: 0x10]
	float MaxSamples;//[Offset: 0x10, Size: 0x4]
	float MinValue;//[Offset: 0x14, Size: 0x4]
	float MaxValue;//[Offset: 0x18, Size: 0x4]
	bool bAutoAdjustMinMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: KismetTextLibrary.BlueprintFunctionLibrary.Object
	FText TextTrimTrailing(out const FText InText);// 0x7059e3fee041
	FText TextTrimPrecedingAndTrailing(out const FText InText);// 0x7058e3fee041
	FText TextTrimPreceding(out const FText InText);// 0x7057e3fee041
	FText TextToUpper(out const FText InText);// 0x7056e3fee041
	FText TextToLower(out const FText InText);// 0x7055e3fee041
	bool TextIsTransient(out const FText InText);// 0x7054e3fee041
	bool TextIsFromStringTable(out const FText Text);// 0x7053e3fee041
	bool TextIsEmpty(out const FText InText);// 0x7052e3fee041
	bool TextIsCultureInvariant(out const FText InText);// 0x7051e3fee041
	FText TextFromStringTable(const FName TableId, FString Key);// 0x7050e3fee041
	bool StringTableIdAndKeyFromText(FText Text, out FName OutTableId, out FString OutKey);// 0x704fe3fee041
	FText PolyglotDataToText(out const PolyglotTextData PolyglotData);// 0x704ee3fee041
	bool NotEqual_TextText(out const FText A, out const FText B);// 0x704de3fee041
	bool NotEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0x704ce3fee041
	void IsPolyglotDataValid(out const PolyglotTextData PolyglotData, out bool IsValid, out FText ErrorMessage);// 0x704be3fee041
	FText GetEmptyText();// 0x704ae3fee041
	FText Format(FText InPattern, FormatArgumentData[] InArgs);// 0x7049e3fee041
	bool FindTextInLocalizationTable(FString Namespace, FString Key, out FText OutText);// 0x7048e3fee041
	bool EqualEqual_TextText(out const FText A, out const FText B);// 0x7047e3fee041
	bool EqualEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0x7046e3fee041
	FText Conv_VectorToText(Vector InVec);// 0x7045e3fee041
	FText Conv_Vector2dToText(Vector2D InVec);// 0x7044e3fee041
	FText Conv_TransformToText(out const Transform InTrans);// 0x7043e3fee041
	FString Conv_TextToString(out const FText InText);// 0x7042e3fee041
	FText Conv_StringToText(FString inString);// 0x7041e3fee041
	FText Conv_RotatorToText(Rotator InRot);// 0x7040e3fee041
	FText Conv_ObjectToText(Object* InObj);// 0x703fe3fee041
	FText Conv_NameToText(FName InName);// 0x703ee3fee041
	FText Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0x703de3fee041
	FText Conv_Int64ToText(int64 Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0x703ce3fee041
	FText Conv_FloatToText(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x703be3fee041
	FText Conv_ColorToText(LinearColor InColor);// 0x703ae3fee041
	FText Conv_ByteToText(byte Value);// 0x7039e3fee041
	FText Conv_BoolToText(bool InBool);// 0x7038e3fee041
	FText AsTimeZoneTime_DateTime(out const DateTime IndateTime, FString InTimeZone);// 0x7037e3fee041
	FText AsTimeZoneDateTime_DateTime(out const DateTime IndateTime, FString InTimeZone);// 0x7036e3fee041
	FText AsTimeZoneDate_DateTime(out const DateTime IndateTime, FString InTimeZone);// 0x7035e3fee041
	FText AsTimespan_Timespan(out const Timespan InTimespan);// 0x7034e3fee041
	FText AsTime_DateTime(out const DateTime In);// 0x7033e3fee041
	FText AsPercent_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x7032e3fee041
	FText AsDateTime_DateTime(out const DateTime In);// 0x7031e3fee041
	FText AsDate_DateTime(out const DateTime IndateTime);// 0x7030e3fee041
	FText AsCurrencyBase(int BaseValue, FString CurrencyCode);// 0x702fe3fee041
	FText AsCurrency_Integer(int Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0x702ee3fee041
	FText AsCurrency_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0x702de3fee041

--------------------------------
Class: PolyglotTextData
	enum Category;//[Offset: 0x0, Size: 0x1]
	FString NativeCulture;//[Offset: 0x8, Size: 0x10]
	FString Namespace;//[Offset: 0x18, Size: 0x10]
	FString Key;//[Offset: 0x28, Size: 0x10]
	FString NativeString;//[Offset: 0x38, Size: 0x10]
	<FString,FString> LocalizedStrings;//[Offset: 0x48, Size: 0x50]
	bool bIsMinimalPatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	FText CachedText;//[Offset: 0xa0, Size: 0x18]

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10]
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1]
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18]
	int ArgumentValueInt;//[Offset: 0x30, Size: 0x4]
	float ArgumentValueFloat;//[Offset: 0x34, Size: 0x4]
	enum ArgumentValueGender;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: Layer.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	LayerActorStats[] ActorStats;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: LayerActorStats
	class Object* Type;//[Offset: 0x0, Size: 0x8]
	int Total;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LevelPartitionInterface.Interface.Object

--------------------------------
Class: LevelBounds.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x2e0, Size: 0x8]
	bool bAutoUpdateBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]

--------------------------------
Class: LevelScriptBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelStreamingAlwaysLoaded.LevelStreaming.Object

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1]
	LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride);// 0x706de3fee041
	LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride);// 0x706ce3fee041

--------------------------------
Class: LevelStreamingPersistent.LevelStreaming.Object

--------------------------------
Class: LightmappedSurfaceCollection.Object
	Model* SourceModel;//[Offset: 0x28, Size: 0x8]
	int[] Surfaces;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: LightMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: LightMapVirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	int8[] TypeToLayer;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: LightmassCharacterIndirectDetailVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassInteriorMaskActor.Volume.Brush.Actor.Object
	uint32 Maskid;//[Offset: 0x318, Size: 0x4]
	bool bIsGlobalMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 0x1]
	bool bUseToDivideILC;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 0x1]
	bool bUseToOcclusionILC;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31c, Size: 0x1]

--------------------------------
Class: LightmassPortal.Actor.Object
	LightmassPortalComponent* PortalComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: LightmassPortalComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x208, Size: 0x8]

--------------------------------
Class: LightmassPrimitiveSettingsObject.Object
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: LocalPlayerSubsystem.Subsystem.Object

--------------------------------
Class: LODSyncComponent.ActorComponent.Object
	int NumLODs;//[Offset: 0xb8, Size: 0x4]
	int ForcedLOD;//[Offset: 0xbc, Size: 0x4]
	ComponentSync[] ComponentsToSync;//[Offset: 0xc0, Size: 0x10]
	<FName,LODMappingData> CustomLODMapping;//[Offset: 0xd0, Size: 0x50]
	int CurrentLOD;//[Offset: 0x120, Size: 0x4]
	int CurrentNumLODs;//[Offset: 0x124, Size: 0x4]
	PrimitiveComponent*[] DriveComponents;//[Offset: 0x128, Size: 0x10]
	PrimitiveComponent*[] SubComponents;//[Offset: 0x138, Size: 0x10]
	FString GetLODSyncDebugText();// 0x7071e3fee041

--------------------------------
Class: ComponentSync
	FName Name;//[Offset: 0x0, Size: 0x8]
	enum SyncOption;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: LODMappingData
	int[] Mapping;//[Offset: 0x0, Size: 0x10]
	int[] InverseMapping;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: LODSyncInterface.Interface.Object

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x5b0, Size: 0x10]
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x7073e3fee041
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x7072e3fee041

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x8, Size: 0x8]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float BaseSizeX;//[Offset: 0x14, Size: 0x4]
	float BaseSizeY;//[Offset: 0x18, Size: 0x4]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8]
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MaterialExpressionAbs.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionActorPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAdd.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]
	float ConstA;//[Offset: 0x64, Size: 0x4]
	float ConstB;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionTextureBase.MaterialExpression.Object
	Texture* Texture;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x48, Size: 0xc]

--------------------------------
Class: MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x5c, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x64, Size: 0x10]
	FName Group;//[Offset: 0x74, Size: 0x8]

--------------------------------
Class: MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAntialiasedTextureMask.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	float threshold;//[Offset: 0x7c, Size: 0x4]
	byte Channel;//[Offset: 0x80, Size: 0x1]

--------------------------------
Class: MaterialExpressionAppendVector.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionArccosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionArccosineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionArcsine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionArcsineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionArctangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionArctangent2.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput X;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionArctangent2Fast.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput X;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionArctangentFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionAtmosphericFogColor.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionAtmosphericLightColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAtmosphericLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCustomOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionBentNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionBlackBody.MaterialExpression.Object
	ExpressionInput Temp;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionBlendMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput A;//[Offset: 0x40, Size: 0x10]
	MaterialAttributesInput B;//[Offset: 0x60, Size: 0x10]
	ExpressionInput Alpha;//[Offset: 0x80, Size: 0xc]
	byte PixelAttributeBlendType;//[Offset: 0x94, Size: 0x1]
	byte VertexAttributeBlendType;//[Offset: 0x95, Size: 0x1]

--------------------------------
Class: MaterialExpressionBreakMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: MaterialExpressionBumpOffset.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Height;//[Offset: 0x50, Size: 0xc]
	ExpressionInput HeightRatioInput;//[Offset: 0x64, Size: 0xc]
	float HeightRatio;//[Offset: 0x78, Size: 0x4]
	float ReferencePlane;//[Offset: 0x7c, Size: 0x4]
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: MaterialExpressionCameraPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCameraVectorWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCeil.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionParameter.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x44, Size: 0x10]

--------------------------------
Class: MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	LinearColor DefaultValue;//[Offset: 0x54, Size: 0x10]
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	byte PrimitiveDataIndex;//[Offset: 0x65, Size: 0x1]

--------------------------------
Class: MaterialExpressionChannelMaskParameter.MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	byte MaskChannel;//[Offset: 0x66, Size: 0x1]

--------------------------------
Class: MaterialExpressionClamp.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Min;//[Offset: 0x50, Size: 0xc]
	ExpressionInput Max;//[Offset: 0x64, Size: 0xc]
	byte ClampMode;//[Offset: 0x78, Size: 0x1]
	float MinDefault;//[Offset: 0x7c, Size: 0x4]
	float MaxDefault;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: MaterialExpressionClearCoatNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionCloudSampleAttribute.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCollectionParameter.MaterialExpression.Object
	MaterialParameterCollection* Collection;//[Offset: 0x40, Size: 0x8]
	FName ParameterName;//[Offset: 0x48, Size: 0x8]
	Guid ParameterId;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MaterialExpressionComment.MaterialExpression.Object
	int SizeX;//[Offset: 0x3c, Size: 0x4]
	int SizeY;//[Offset: 0x40, Size: 0x4]
	FString Text;//[Offset: 0x48, Size: 0x10]
	LinearColor CommentColor;//[Offset: 0x58, Size: 0x10]
	int FontSize;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionComponentMask.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: MaterialExpressionConstant.MaterialExpression.Object
	float R;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: MaterialExpressionConstant2Vector.MaterialExpression.Object
	float R;//[Offset: 0x3c, Size: 0x4]
	float G;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MaterialExpressionConstant3Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: MaterialExpressionConstant4Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: MaterialExpressionConstantBiasScale.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]
	float Bias;//[Offset: 0x50, Size: 0x4]
	float Scale;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: MaterialExpressionCosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]
	float Period;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MaterialExpressionCrossProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	float DefaultValue;//[Offset: 0x54, Size: 0x4]
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	byte PrimitiveDataIndex;//[Offset: 0x59, Size: 0x1]

--------------------------------
Class: MaterialExpressionCurveAtlasRowParameter.MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	CurveLinearColor* Curve;//[Offset: 0x60, Size: 0x8]
	CurveLinearColorAtlas* Atlas;//[Offset: 0x68, Size: 0x8]
	ExpressionInput InputTime;//[Offset: 0x70, Size: 0xc]

--------------------------------
Class: MaterialExpressionCustom.MaterialExpression.Object
	FString code;//[Offset: 0x40, Size: 0x10]
	byte OutputType;//[Offset: 0x50, Size: 0x1]
	FString Description;//[Offset: 0x58, Size: 0x10]
	CustomInput[] Inputs;//[Offset: 0x68, Size: 0x10]
	CustomOutput[] AdditionalOutputs;//[Offset: 0x78, Size: 0x10]
	CustomDefine[] AdditionalDefines;//[Offset: 0x88, Size: 0x10]
	FString[] IncludeFilePaths;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: CustomInput
	FName InputName;//[Offset: 0x0, Size: 0x8]
	ExpressionInput Input;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: CustomOutput
	FName OutputName;//[Offset: 0x0, Size: 0x8]
	byte OutputType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: CustomDefine
	FString DefineName;//[Offset: 0x0, Size: 0x10]
	FString DefineValue;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MaterialExpressionDDX.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionDDY.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionDecalDerivative.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalLifetimeOpacity.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalMipmapLevel.MaterialExpression.Object
	ExpressionInput TextureSize;//[Offset: 0x3c, Size: 0xc]
	float ConstWidth;//[Offset: 0x50, Size: 0x4]
	float ConstHeight;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: MaterialExpressionDeltaTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDepthFade.MaterialExpression.Object
	ExpressionInput InOpacity;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput FadeDistance;//[Offset: 0x50, Size: 0xc]
	float OpacityDefault;//[Offset: 0x64, Size: 0x4]
	float FadeDistanceDefault;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionDepthOfFieldFunction.MaterialExpression.Object
	byte FunctionValue;//[Offset: 0x39, Size: 0x1]
	ExpressionInput Depth;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionDeriveNormalZ.MaterialExpression.Object
	ExpressionInput InXY;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionDesaturation.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Fraction;//[Offset: 0x50, Size: 0xc]
	LinearColor LuminanceFactors;//[Offset: 0x64, Size: 0x10]

--------------------------------
Class: MaterialExpressionDistance.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionDistanceCullFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDistanceFieldGradient.MaterialExpression.Object
	ExpressionInput position;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionDistanceToNearestSurface.MaterialExpression.Object
	ExpressionInput position;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionDivide.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]
	float ConstA;//[Offset: 0x64, Size: 0x4]
	float ConstB;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionDotProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionDynamicModeSwitch.MaterialExpression.Object
	ExpressionInput Inputs;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionDynamicParameter.MaterialExpression.Object
	FString[] ParamNames;//[Offset: 0x40, Size: 0x10]
	LinearColor DefaultValue;//[Offset: 0x50, Size: 0x10]
	uint32 ParameterIndex;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: MaterialExpressionEyeAdaptation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionFeatureLevelSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionFloor.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionFmod.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionFontSample.MaterialExpression.Object
	Font* Font;//[Offset: 0x40, Size: 0x8]
	int FontTexturePage;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: MaterialExpressionFontSampleParameter.MaterialExpressionFontSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x4c, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x54, Size: 0x10]
	FName Group;//[Offset: 0x64, Size: 0x8]

--------------------------------
Class: MaterialExpressionFrac.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionFresnel.MaterialExpression.Object
	ExpressionInput ExponentIn;//[Offset: 0x3c, Size: 0xc]
	float Exponent;//[Offset: 0x50, Size: 0x4]
	ExpressionInput BaseReflectFractionIn;//[Offset: 0x54, Size: 0xc]
	float BaseReflectFraction;//[Offset: 0x68, Size: 0x4]
	ExpressionInput Normal;//[Offset: 0x6c, Size: 0xc]

--------------------------------
Class: MaterialExpressionFunctionInput.MaterialExpression.Object
	ExpressionInput Preview;//[Offset: 0x3c, Size: 0xc]
	FName InputName;//[Offset: 0x50, Size: 0x8]
	FString Description;//[Offset: 0x58, Size: 0x10]
	Guid ID;//[Offset: 0x68, Size: 0x10]
	byte InputType;//[Offset: 0x78, Size: 0x1]
	Vector4 PreviewValue;//[Offset: 0x80, Size: 0x10]
	bool bUsePreviewValueAsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int SortPriority;//[Offset: 0x94, Size: 0x4]
	bool bCompilingFunctionPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]

--------------------------------
Class: MaterialExpressionFunctionOutput.MaterialExpression.Object
	FName OutputName;//[Offset: 0x3c, Size: 0x8]
	FString Description;//[Offset: 0x48, Size: 0x10]
	int SortPriority;//[Offset: 0x58, Size: 0x4]
	ExpressionInput A;//[Offset: 0x5c, Size: 0xc]
	bool bLastPreviewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	Guid ID;//[Offset: 0x74, Size: 0x10]

--------------------------------
Class: MaterialExpressionGetMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x40, Size: 0x10]
	Guid[] AttributeGetTypes;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: MaterialExpressionGIReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput StaticIndirect;//[Offset: 0x50, Size: 0xc]
	ExpressionInput DynamicIndirect;//[Offset: 0x64, Size: 0xc]

--------------------------------
Class: MaterialExpressionHairAttributes.MaterialExpression.Object
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: MaterialExpressionHairColor.MaterialExpression.Object
	ExpressionInput Melanin;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Redness;//[Offset: 0x50, Size: 0xc]
	ExpressionInput DyeColor;//[Offset: 0x64, Size: 0xc]

--------------------------------
Class: MaterialExpressionIf.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]
	ExpressionInput AGreaterThanB;//[Offset: 0x64, Size: 0xc]
	ExpressionInput AEqualsB;//[Offset: 0x78, Size: 0xc]
	ExpressionInput ALessThanB;//[Offset: 0x8c, Size: 0xc]
	float EqualsThreshold;//[Offset: 0xa0, Size: 0x4]
	float ConstB;//[Offset: 0xa4, Size: 0x4]
	float ConstAEqualsB;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: MaterialExpressionInverseLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]
	ExpressionInput Value;//[Offset: 0x64, Size: 0xc]
	float ConstA;//[Offset: 0x78, Size: 0x4]
	float ConstB;//[Offset: 0x7c, Size: 0x4]
	float ConstValue;//[Offset: 0x80, Size: 0x4]
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]

--------------------------------
Class: MaterialExpressionLightmapUVs.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLightmassReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Lightmass;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]
	ExpressionInput Alpha;//[Offset: 0x64, Size: 0xc]
	float ConstA;//[Offset: 0x78, Size: 0x4]
	float ConstB;//[Offset: 0x7c, Size: 0x4]
	float ConstAlpha;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: MaterialExpressionLogarithm10.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionLogarithm2.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionMakeMaterialAttributes.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Metallic;//[Offset: 0x50, Size: 0xc]
	ExpressionInput Specular;//[Offset: 0x64, Size: 0xc]
	ExpressionInput Roughness;//[Offset: 0x78, Size: 0xc]
	ExpressionInput Anisotropy;//[Offset: 0x8c, Size: 0xc]
	ExpressionInput EmissiveColor;//[Offset: 0xa0, Size: 0xc]
	ExpressionInput Opacity;//[Offset: 0xb4, Size: 0xc]
	ExpressionInput OpacityMask;//[Offset: 0xc8, Size: 0xc]
	ExpressionInput Normal;//[Offset: 0xdc, Size: 0xc]
	ExpressionInput Tangent;//[Offset: 0xf0, Size: 0xc]
	ExpressionInput WorldPositionOffset;//[Offset: 0x104, Size: 0xc]
	ExpressionInput WorldDisplacement;//[Offset: 0x118, Size: 0xc]
	ExpressionInput TessellationMultiplier;//[Offset: 0x12c, Size: 0xc]
	ExpressionInput SubsurfaceColor;//[Offset: 0x140, Size: 0xc]
	ExpressionInput ClearCoat;//[Offset: 0x154, Size: 0xc]
	ExpressionInput ClearCoatRoughness;//[Offset: 0x168, Size: 0xc]
	ExpressionInput AmbientOcclusion;//[Offset: 0x17c, Size: 0xc]
	ExpressionInput Refraction;//[Offset: 0x190, Size: 0xc]
	ExpressionInput CustomizedUVs;//[Offset: 0x1a4, Size: 0xc]
	ExpressionInput PixelDepthOffset;//[Offset: 0x244, Size: 0xc]
	ExpressionInput ShadingModel;//[Offset: 0x258, Size: 0xc]
	ExpressionInput CustomDataVector;//[Offset: 0x26c, Size: 0xc]

--------------------------------
Class: MaterialExpressionMapARPassthroughCameraUV.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionMaterialAttributeLayers.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x44, Size: 0x10]
	MaterialAttributesInput Input;//[Offset: 0x58, Size: 0x10]
	MaterialLayersFunctions DefaultLayers;//[Offset: 0x78, Size: 0x40]
	MaterialExpressionMaterialFunctionCall*[] LayerCallers;//[Offset: 0xb8, Size: 0x10]
	int NumActiveLayerCallers;//[Offset: 0xc8, Size: 0x4]
	MaterialExpressionMaterialFunctionCall*[] BlendCallers;//[Offset: 0xd0, Size: 0x10]
	int NumActiveBlendCallers;//[Offset: 0xe0, Size: 0x4]
	bool bIsLayerGraphBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]

--------------------------------
Class: MaterialExpressionMaterialFunctionCall.MaterialExpression.Object
	MaterialFunctionInterface* MaterialFunction;//[Offset: 0x40, Size: 0x8]
	MaterialParameterInfo FunctionParameterInfo;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: MaterialExpressionMaterialLayerOutput.MaterialExpressionFunctionOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionMaterialProxyReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput MaterialProxy;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionMax.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]
	float ConstA;//[Offset: 0x64, Size: 0x4]
	float ConstB;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionMin.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]
	float ConstA;//[Offset: 0x64, Size: 0x4]
	float ConstB;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionMultiply.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]
	float ConstA;//[Offset: 0x64, Size: 0x4]
	float ConstB;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionNoise.MaterialExpression.Object
	ExpressionInput position;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput FilterWidth;//[Offset: 0x50, Size: 0xc]
	float Scale;//[Offset: 0x64, Size: 0x4]
	int quality;//[Offset: 0x68, Size: 0x4]
	byte NoiseFunction;//[Offset: 0x6c, Size: 0x1]
	bool bTurbulence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 0x1]
	int Levels;//[Offset: 0x70, Size: 0x4]
	float OutputMin;//[Offset: 0x74, Size: 0x4]
	float OutputMax;//[Offset: 0x78, Size: 0x4]
	float LevelScale;//[Offset: 0x7c, Size: 0x4]
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	uint32 RepeatSize;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: MaterialExpressionNormalize.MaterialExpression.Object
	ExpressionInput VectorInput;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionObjectBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectOrientation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionOneMinus.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionPanner.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Time;//[Offset: 0x50, Size: 0xc]
	ExpressionInput Speed;//[Offset: 0x64, Size: 0xc]
	float SpeedX;//[Offset: 0x78, Size: 0x4]
	float SpeedY;//[Offset: 0x7c, Size: 0x4]
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4]
	bool bFractionalPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]

--------------------------------
Class: MaterialExpressionParticleColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleDirection.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMacroUV.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMotionBlurFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticlePositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRelativeTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSpeed.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSubUV.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]

--------------------------------
Class: MaterialExpressionParticleSubUVProperties.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPerInstanceCustomData.MaterialExpression.Object
	ExpressionInput DefaultValue;//[Offset: 0x3c, Size: 0xc]
	float ConstDefaultValue;//[Offset: 0x50, Size: 0x4]
	uint32 DataIndex;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: MaterialExpressionPerInstanceFadeAmount.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPerInstanceRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelDepth.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPower.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Exponent;//[Offset: 0x50, Size: 0xc]
	float ConstExponent;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: MaterialExpressionPrecomputedAOMask.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedLocalBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedNormal.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreviousFrameSwitch.MaterialExpression.Object
	ExpressionInput CurrentFrame;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput PreviousFrame;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionQualitySwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionRayTracingQualitySwitch.MaterialExpression.Object
	ExpressionInput Normal;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput RayTraced;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionReflectionCapturePassSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Reflection;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionReflectionVectorWS.MaterialExpression.Object
	ExpressionInput CustomWorldNormal;//[Offset: 0x3c, Size: 0xc]
	bool bNormalizeCustomWorldNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: MaterialExpressionReroute.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionRotateAboutAxis.MaterialExpression.Object
	ExpressionInput NormalizedRotationAxis;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput RotationAngle;//[Offset: 0x50, Size: 0xc]
	ExpressionInput PivotPoint;//[Offset: 0x64, Size: 0xc]
	ExpressionInput position;//[Offset: 0x78, Size: 0xc]
	float Period;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: MaterialExpressionRotator.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Time;//[Offset: 0x50, Size: 0xc]
	float CenterX;//[Offset: 0x64, Size: 0x4]
	float CenterY;//[Offset: 0x68, Size: 0x4]
	float Speed;//[Offset: 0x6c, Size: 0x4]
	uint32 ConstCoordinate;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: MaterialExpressionRound.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Specular;//[Offset: 0x50, Size: 0xc]
	ExpressionInput Roughness;//[Offset: 0x64, Size: 0xc]
	ExpressionInput Normal;//[Offset: 0x78, Size: 0xc]
	ExpressionInput WorldHeight;//[Offset: 0x8c, Size: 0xc]
	ExpressionInput Opacity;//[Offset: 0xa0, Size: 0xc]
	ExpressionInput Mask;//[Offset: 0xb4, Size: 0xc]

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput VirtualTextureOutput;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput WorldPosition;//[Offset: 0x50, Size: 0xc]
	ExpressionInput MipValue;//[Offset: 0x64, Size: 0xc]
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x78, Size: 0x8]
	enum MaterialType;//[Offset: 0x80, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	byte MipValueMode;//[Offset: 0x83, Size: 0x1]
	byte TextureAddressMode;//[Offset: 0x84, Size: 0x1]

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSampleParameter.MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x88, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x90, Size: 0x10]
	FName Group;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: MaterialExpressionSaturate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionSceneColor.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1]
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput OffsetFraction;//[Offset: 0x50, Size: 0xc]
	Vector2D ConstInput;//[Offset: 0x64, Size: 0x8]

--------------------------------
Class: MaterialExpressionSceneDepth.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1]
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Coordinates;//[Offset: 0x50, Size: 0xc]
	Vector2D ConstInput;//[Offset: 0x64, Size: 0x8]

--------------------------------
Class: MaterialExpressionSceneDepthWithoutWater.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1]
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]
	Vector2D ConstInput;//[Offset: 0x50, Size: 0x8]
	float FallbackDepth;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: MaterialExpressionSceneTexelSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSceneTexture.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0xc]
	byte SceneTextureId;//[Offset: 0x50, Size: 0x1]
	bool bFiltered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]

--------------------------------
Class: MaterialExpressionScreenPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSetMaterialAttributes.MaterialExpression.Object
	ExpressionInput[] Inputs;//[Offset: 0x40, Size: 0x10]
	Guid[] AttributeSetTypes;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MaterialExpressionShaderStageSwitch.MaterialExpression.Object
	ExpressionInput PixelShader;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput VertexShader;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionShadingModel.MaterialExpression.Object
	byte ShadingModel;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: MaterialExpressionShadingPathSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionShadowReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Shadow;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionSign.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionSine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]
	float Period;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MaterialExpressionSingleLayerWaterMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput ScatteringCoefficients;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput AbsorptionCoefficients;//[Offset: 0x50, Size: 0xc]
	ExpressionInput PhaseG;//[Offset: 0x64, Size: 0xc]
	ExpressionInput ColorScaleBehindWater;//[Offset: 0x78, Size: 0xc]

--------------------------------
Class: MaterialExpressionSkinningVertexOffsets.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDirection.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightIlluminance.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4]
	ExpressionInput WorldPosition;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDiskLuminance.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: MaterialExpressionSkyAtmosphereAerialPerspective.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSkyAtmosphereViewLuminance.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSmoothStep.MaterialExpression.Object
	ExpressionInput Min;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Max;//[Offset: 0x50, Size: 0xc]
	ExpressionInput Value;//[Offset: 0x64, Size: 0xc]
	float ConstMin;//[Offset: 0x78, Size: 0x4]
	float ConstMax;//[Offset: 0x7c, Size: 0x4]
	float ConstValue;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: MaterialExpressionSobol.MaterialExpression.Object
	ExpressionInput Cell;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Index;//[Offset: 0x50, Size: 0xc]
	ExpressionInput Seed;//[Offset: 0x64, Size: 0xc]
	uint32 ConstIndex;//[Offset: 0x78, Size: 0x4]
	Vector2D ConstSeed;//[Offset: 0x7c, Size: 0x8]

--------------------------------
Class: MaterialExpressionSpeedTree.MaterialExpression.Object
	ExpressionInput GeometryInput;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput WindInput;//[Offset: 0x50, Size: 0xc]
	ExpressionInput LODInput;//[Offset: 0x64, Size: 0xc]
	ExpressionInput ExtraBendWS;//[Offset: 0x78, Size: 0xc]
	byte GeometryType;//[Offset: 0x8c, Size: 0x1]
	byte WindType;//[Offset: 0x8d, Size: 0x1]
	byte LODType;//[Offset: 0x8e, Size: 0x1]
	float BillboardThreshold;//[Offset: 0x90, Size: 0x4]
	bool bAccurateWindVelocities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]

--------------------------------
Class: MaterialExpressionSphereMask.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]
	ExpressionInput Radius;//[Offset: 0x64, Size: 0xc]
	ExpressionInput Hardness;//[Offset: 0x78, Size: 0xc]
	float AttenuationRadius;//[Offset: 0x8c, Size: 0x4]
	float HardnessPercent;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: MaterialExpressionSphericalParticleOpacity.MaterialExpression.Object
	ExpressionInput Density;//[Offset: 0x3c, Size: 0xc]
	float ConstantDensity;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MaterialExpressionSquareRoot.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionStaticBool.MaterialExpression.Object
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: MaterialExpressionStaticComponentMaskParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool DefaultG;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool DefaultB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	bool DefaultA;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: MaterialExpressionStaticSwitch.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1]
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]
	ExpressionInput Value;//[Offset: 0x64, Size: 0xc]

--------------------------------
Class: MaterialExpressionStaticSwitchParameter.MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionStep.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput X;//[Offset: 0x50, Size: 0xc]
	float ConstY;//[Offset: 0x64, Size: 0x4]
	float ConstX;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionSubtract.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput B;//[Offset: 0x50, Size: 0xc]
	float ConstA;//[Offset: 0x64, Size: 0x4]
	float ConstB;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionTangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]
	float Period;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MaterialExpressionTangentOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionTemporalSobol.MaterialExpression.Object
	ExpressionInput Index;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Seed;//[Offset: 0x50, Size: 0xc]
	uint32 ConstIndex;//[Offset: 0x64, Size: 0x4]
	Vector2D ConstSeed;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: MaterialExpressionTextureCoordinate.MaterialExpression.Object
	int CoordinateIndex;//[Offset: 0x3c, Size: 0x4]
	float UTiling;//[Offset: 0x40, Size: 0x4]
	float VTiling;//[Offset: 0x44, Size: 0x4]
	bool UnMirrorU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool UnMirrorV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: MaterialExpressionTextureObject.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureObjectParameter.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureProperty.MaterialExpression.Object
	ExpressionInput TextureObject;//[Offset: 0x3c, Size: 0xc]
	byte Property;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: MaterialExpressionTextureSampleParameter2DArray.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterCube.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterSubUV.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]

--------------------------------
Class: MaterialExpressionTextureSampleParameterVolume.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: VolumeTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialExpressionThinTranslucentMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput TransmittanceColor;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionTime.MaterialExpression.Object
	bool bIgnorePause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1]
	bool bOverride_Period;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1]
	float Period;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: MaterialExpressionTransform.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1]
	byte TransformType;//[Offset: 0x51, Size: 0x1]

--------------------------------
Class: MaterialExpressionTransformPosition.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1]
	byte TransformType;//[Offset: 0x51, Size: 0x1]

--------------------------------
Class: MaterialExpressionTruncate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionTwoSidedSign.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVectorNoise.MaterialExpression.Object
	ExpressionInput position;//[Offset: 0x3c, Size: 0xc]
	byte NoiseFunction;//[Offset: 0x50, Size: 0x1]
	int quality;//[Offset: 0x54, Size: 0x4]
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	uint32 TileSize;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: MaterialExpressionVertexColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexInterpolator.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: MaterialExpressionVertexNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexTangentWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionViewProperty.MaterialExpression.Object
	byte Property;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: MaterialExpressionViewSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVirtualTextureFeatureSwitch.MaterialExpression.Object
	ExpressionInput No;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Yes;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionVolumetricAdvancedMaterialInput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVolumetricAdvancedMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput PhaseG;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput PhaseG2;//[Offset: 0x50, Size: 0xc]
	ExpressionInput PhaseBlend;//[Offset: 0x64, Size: 0xc]
	ExpressionInput MultiScatteringContribution;//[Offset: 0x78, Size: 0xc]
	ExpressionInput MultiScatteringOcclusion;//[Offset: 0x8c, Size: 0xc]
	ExpressionInput MultiScatteringEccentricity;//[Offset: 0xa0, Size: 0xc]
	ExpressionInput ConservativeDensity;//[Offset: 0xb4, Size: 0xc]
	float ConstPhaseG;//[Offset: 0xc8, Size: 0x4]
	float ConstPhaseG2;//[Offset: 0xcc, Size: 0x4]
	float ConstPhaseBlend;//[Offset: 0xd0, Size: 0x4]
	bool PerSamplePhaseEvaluation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	uint32 MultiScatteringApproximationOctaveCount;//[Offset: 0xd8, Size: 0x4]
	float ConstMultiScatteringContribution;//[Offset: 0xdc, Size: 0x4]
	float ConstMultiScatteringOcclusion;//[Offset: 0xe0, Size: 0x4]
	float ConstMultiScatteringEccentricity;//[Offset: 0xe4, Size: 0x4]
	bool bGroundContribution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bGrayScaleMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	bool bRayMarchVolumeShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]

--------------------------------
Class: MaterialExpressionWorldPosition.MaterialExpression.Object
	byte WorldPositionShaderOffset;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: MaterialFunctionInstance.MaterialFunctionInterface.Object
	MaterialFunctionInterface* Parent;//[Offset: 0x40, Size: 0x8]
	MaterialFunctionInterface* Base;//[Offset: 0x48, Size: 0x8]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x50, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x60, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x70, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x80, Size: 0x10]
	StaticSwitchParameter[] StaticSwitchParameterValues;//[Offset: 0x90, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameterValues;//[Offset: 0xa0, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: MaterialFunctionMaterialLayer.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlend.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlendInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialInstanceActor.Actor.Object
	Actor*[] TargetActors;//[Offset: 0x2e0, Size: 0x10]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x390, Size: 0x8]
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x6726e3fee041
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x6725e3fee041
	float K2_GetScalarParameterValue(FName ParameterName);// 0x6724e3fee041

--------------------------------
Class: MatineeActorCameraAnim.MatineeActor.Actor.Object
	CameraAnim* CameraAnim;//[Offset: 0x388, Size: 0x8]

--------------------------------
Class: MatineeAnimInterface.Interface.Object

--------------------------------
Class: MatineeInterface.Interface.Object

--------------------------------
Class: MeshMergeCullingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: MeshSimplificationSettings.DeveloperSettings.Object
	FName MeshReductionModuleName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: MeshVertexPainterKismetLibrary.BlueprintFunctionLibrary.Object
	void RemovePaintedVertices(StaticMeshComponent* StaticMeshComponent);// 0x708ee3fee041
	void PaintVerticesSingleColor(StaticMeshComponent* StaticMeshComponent, out const LinearColor FillColor, bool bConvertToSRGB);// 0x708de3fee041
	void PaintVerticesLerpAlongAxis(StaticMeshComponent* StaticMeshComponent, out const LinearColor StartColor, out const LinearColor EndColor, enum Axis, bool bConvertToSRGB);// 0x708ce3fee041

--------------------------------
Class: MicroTransactionBase.PlatformInterfaceBase.Object
	PurchaseInfo[] AvailableProducts;//[Offset: 0x38, Size: 0x10]
	FString LastError;//[Offset: 0x48, Size: 0x10]
	FString LastErrorSolution;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: PurchaseInfo
	FString Identifier;//[Offset: 0x0, Size: 0x10]
	FString DisplayName;//[Offset: 0x10, Size: 0x10]
	FString DisplayDescription;//[Offset: 0x20, Size: 0x10]
	FString DisplayPrice;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: NavAgentInterface.Interface.Object

--------------------------------
Class: NavEdgeProviderInterface.Interface.Object

--------------------------------
Class: NavigationDataInterface.Interface.Object

--------------------------------
Class: NullNavSysConfig.NavigationSystemConfig.Object

--------------------------------
Class: NavLinkDefinition.Object
	NavigationLink[] Links;//[Offset: 0x28, Size: 0x10]
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: NavigationLink.NavigationLinkBase
	Vector Left;//[Offset: 0x30, Size: 0xc]
	Vector Right;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: NavigationLinkBase
	float LeftProjectHeight;//[Offset: 0x0, Size: 0x4]
	float MaxFallDownLength;//[Offset: 0x4, Size: 0x4]
	float SnapRadius;//[Offset: 0xc, Size: 0x4]
	float SnapHeight;//[Offset: 0x10, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x14, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1]
	byte Direction;//[Offset: 0x1c, Size: 0x1]
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 0x1]
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 0x1]
	class NavAreaBase* AreaClass;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: NavigationSegmentLink.NavigationLinkBase
	Vector LeftStart;//[Offset: 0x30, Size: 0xc]
	Vector LeftEnd;//[Offset: 0x3c, Size: 0xc]
	Vector RightStart;//[Offset: 0x48, Size: 0xc]
	Vector RightEnd;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: NavPathObserverInterface.Interface.Object

--------------------------------
Class: NavRelevantInterface.Interface.Object

--------------------------------
Class: SimulatedClientNetConnection.NetConnection.Player.Object

--------------------------------
Class: NetPushModelHelpers.BlueprintFunctionLibrary.Object
	void MarkPropertyDirtyFromRepIndex(Object* Object, int RepIndex, FName PropertyName);// 0x7090e3fee041
	void MarkPropertyDirty(Object* Object, FName PropertyName);// 0x708fe3fee041

--------------------------------
Class: DefferedDestroyActorManager.Object
	Actor*[] DestroyActorQueue;//[Offset: 0x28, Size: 0x10]
	ActorChannel*[] PendingCloseChannels;//[Offset: 0x38, Size: 0x10]
	void OnQueuedActorDestroyed(Actor* InActor);// 0x7091e3fee041

--------------------------------
Class: NetworkObjPoolInterface.Interface.Object

--------------------------------
Class: NetworkObjPoolRulesObject.Object
	FString RuleClassName;//[Offset: 0x28, Size: 0x10]
	bool IsNeedWaitJITTemplate(World* World, class Object Class, float Dis);// 0x63fbe3fee041
	int GetJITTempletePriority(World* World, class Object Class, float Distance);// 0x63fae3fee041
	void BP_Init(World* World);// 0x63f9e3fee041

--------------------------------
Class: NetworkPredictionInterface.Interface.Object

--------------------------------
Class: NetworkSettings.DeveloperSettings.Object
	bool bVerifyPeer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bEnableMultiplayerWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	int MaxRepArraySize;//[Offset: 0x3c, Size: 0x4]
	int MaxRepArrayMemory;//[Offset: 0x40, Size: 0x4]
	NetworkEmulationProfileDescription[] NetworkEmulationProfiles;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: NetworkEmulationProfileDescription
	FString ProfileName;//[Offset: 0x0, Size: 0x10]
	FString ToolTip;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NodeMappingProviderInterface.Interface.Object

--------------------------------
Class: Note.Actor.Object

--------------------------------
Class: ObjectLibrary.Object
	class Object* ObjectBaseClass;//[Offset: 0x28, Size: 0x8]
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	Object*[] Objects;//[Offset: 0x38, Size: 0x10]
	Object*[] WeakObjects;//[Offset: 0x48, Size: 0x10]
	bool bUseWeakReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bIsFullyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: ObjectReferencer.Object
	Object*[] ReferencedObjects;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ObjectTraceWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: OnlineEngineInterface.Object

--------------------------------
Class: PackageMapClient.PackageMap.Object

--------------------------------
Class: PainCausingVolume.PhysicsVolume.Volume.Brush.Actor.Object
	bool bPainCausing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x325, Size: 0x1]
	float DamagePerSec;//[Offset: 0x328, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x330, Size: 0x8]
	float PainInterval;//[Offset: 0x338, Size: 0x4]
	bool bEntryPain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33c, Size: 0x1]
	bool BACKUP_bPainCausing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33c, Size: 0x1]
	Controller* DamageInstigator;//[Offset: 0x340, Size: 0x8]

--------------------------------
Class: ParticleModuleAccelerationBase.ParticleModule.Object
	bool bAlwaysInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleAcceleration.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector Acceleration;//[Offset: 0x30, Size: 0x48]
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ParticleModuleAccelerationConstant.ParticleModuleAccelerationBase.ParticleModule.Object
	Vector Acceleration;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: ParticleModuleAccelerationDrag.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragCoefficient;//[Offset: 0x30, Size: 0x8]
	RawDistributionFloat DragCoefficientRaw;//[Offset: 0x38, Size: 0x30]

--------------------------------
Class: ParticleModuleAccelerationDragScaleOverLife.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragScale;//[Offset: 0x30, Size: 0x8]
	RawDistributionFloat DragScaleRaw;//[Offset: 0x38, Size: 0x30]

--------------------------------
Class: ParticleModuleAccelerationOverLifetime.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector AccelOverLife;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ParticleModuleAttractorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleAttractorLine.ParticleModuleAttractorBase.ParticleModule.Object
	Vector EndPoint0;//[Offset: 0x2c, Size: 0xc]
	Vector EndPoint1;//[Offset: 0x38, Size: 0xc]
	RawDistributionFloat Range;//[Offset: 0x48, Size: 0x30]
	RawDistributionFloat Strength;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: ParticleModuleAttractorParticle.ParticleModuleAttractorBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8]
	RawDistributionFloat Range;//[Offset: 0x38, Size: 0x30]
	bool bStrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	RawDistributionFloat Strength;//[Offset: 0x70, Size: 0x30]
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	byte SelectionMethod;//[Offset: 0xa1, Size: 0x1]
	bool bRenewSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2, Size: 0x1]
	bool bInheritSourceVel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 0x1]
	int LastSelIndex;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: ParticleModuleAttractorPoint.ParticleModuleAttractorBase.ParticleModule.Object
	RawDistributionVector position;//[Offset: 0x30, Size: 0x48]
	RawDistributionFloat Range;//[Offset: 0x78, Size: 0x30]
	RawDistributionFloat Strength;//[Offset: 0xa8, Size: 0x30]
	bool StrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	bool bOverrideVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd8, Size: 0x1]
	bool bUseWorldSpacePosition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd8, Size: 0x1]
	bool Positive_X;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd8, Size: 0x1]
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd8, Size: 0x1]
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd8, Size: 0x1]
	bool Negative_X;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd8, Size: 0x1]
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd9, Size: 0x1]
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd9, Size: 0x1]

--------------------------------
Class: ParticleModuleAttractorPointGravity.ParticleModuleAttractorBase.ParticleModule.Object
	Vector position;//[Offset: 0x2c, Size: 0xc]
	float Radius;//[Offset: 0x38, Size: 0x4]
	DistributionFloat* Strength;//[Offset: 0x40, Size: 0x8]
	RawDistributionFloat StrengthRaw;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: ParticleModuleBeamBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleBeamModifier.ParticleModuleBeamBase.ParticleModule.Object
	byte ModifierType;//[Offset: 0x2b, Size: 0x1]
	BeamModifierOptions PositionOptions;//[Offset: 0x2c, Size: 0x4]
	RawDistributionVector position;//[Offset: 0x30, Size: 0x48]
	BeamModifierOptions TangentOptions;//[Offset: 0x78, Size: 0x4]
	RawDistributionVector Tangent;//[Offset: 0x80, Size: 0x48]
	bool bAbsoluteTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	BeamModifierOptions StrengthOptions;//[Offset: 0xcc, Size: 0x4]
	RawDistributionFloat Strength;//[Offset: 0xd0, Size: 0x30]

--------------------------------
Class: BeamModifierOptions
	bool bModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLock;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleBeamNoise.ParticleModuleBeamBase.ParticleModule.Object
	bool bLowFreq_Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	int Frequency;//[Offset: 0x2c, Size: 0x4]
	int Frequency_LowRange;//[Offset: 0x30, Size: 0x4]
	RawDistributionVector NoiseRange;//[Offset: 0x38, Size: 0x48]
	RawDistributionFloat NoiseRangeScale;//[Offset: 0x80, Size: 0x30]
	bool bNRScaleEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	RawDistributionVector NoiseSpeed;//[Offset: 0xb8, Size: 0x48]
	bool bSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	float NoiseLockRadius;//[Offset: 0x104, Size: 0x4]
	bool bNoiseLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]
	bool bOscillate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1]
	float NoiseLockTime;//[Offset: 0x10c, Size: 0x4]
	float NoiseTension;//[Offset: 0x110, Size: 0x4]
	bool bUseNoiseTangents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x114, Size: 0x1]
	RawDistributionFloat NoiseTangentStrength;//[Offset: 0x118, Size: 0x30]
	int NoiseTessellation;//[Offset: 0x148, Size: 0x4]
	bool bTargetNoise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]
	float FrequencyDistance;//[Offset: 0x150, Size: 0x4]
	bool bApplyNoiseScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x154, Size: 0x1]
	RawDistributionFloat NoiseScale;//[Offset: 0x158, Size: 0x30]

--------------------------------
Class: ParticleModuleBeamSource.ParticleModuleBeamBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1]
	FName SourceName;//[Offset: 0x2c, Size: 0x8]
	bool bSourceAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	RawDistributionVector Source;//[Offset: 0x38, Size: 0x48]
	bool bLockSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	byte SourceTangentMethod;//[Offset: 0x81, Size: 0x1]
	RawDistributionVector SourceTangent;//[Offset: 0x88, Size: 0x48]
	bool bLockSourceTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]
	RawDistributionFloat SourceStrength;//[Offset: 0xd8, Size: 0x30]
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]

--------------------------------
Class: ParticleModuleBeamTarget.ParticleModuleBeamBase.ParticleModule.Object
	byte TargetMethod;//[Offset: 0x2b, Size: 0x1]
	FName TargetName;//[Offset: 0x2c, Size: 0x8]
	RawDistributionVector Target;//[Offset: 0x38, Size: 0x48]
	bool bTargetAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bLockTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	byte TargetTangentMethod;//[Offset: 0x81, Size: 0x1]
	RawDistributionVector TargetTangent;//[Offset: 0x88, Size: 0x48]
	bool bLockTargetTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]
	RawDistributionFloat TargetStrength;//[Offset: 0xd8, Size: 0x30]
	bool bLockTargetStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]
	float LockRadius;//[Offset: 0x10c, Size: 0x4]

--------------------------------
Class: ParticleModuleCameraBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCameraOffset.ParticleModuleCameraBase.ParticleModule.Object
	RawDistributionFloat CameraOffset;//[Offset: 0x30, Size: 0x30]
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	byte UpdateMethod;//[Offset: 0x61, Size: 0x1]

--------------------------------
Class: ParticleModuleCollisionBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCollision.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionVector DampingFactor;//[Offset: 0x30, Size: 0x48]
	RawDistributionVector DampingFactorRotation;//[Offset: 0x78, Size: 0x48]
	RawDistributionFloat MaxCollisions;//[Offset: 0xc0, Size: 0x30]
	byte CollisionCompletionOption;//[Offset: 0xf0, Size: 0x1]
	byte[] CollisionTypes;//[Offset: 0xf8, Size: 0x10]
	bool bApplyPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
	bool bIgnoreTriggerVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1]
	RawDistributionFloat ParticleMass;//[Offset: 0x118, Size: 0x30]
	float DirScalar;//[Offset: 0x148, Size: 0x4]
	bool bPawnsDoNotDecrementCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]
	bool bOnlyVerticalNormalsDecrementCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14c, Size: 0x1]
	float VerticalFudgeFactor;//[Offset: 0x150, Size: 0x4]
	RawDistributionFloat DelayAmount;//[Offset: 0x158, Size: 0x30]
	bool bDropDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1]
	bool bCollideOnlyIfVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x188, Size: 0x1]
	bool bIgnoreSourceActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x188, Size: 0x1]
	float MaxCollisionDistance;//[Offset: 0x18c, Size: 0x4]

--------------------------------
Class: ParticleModuleCollisionGPU.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionFloat Resilience;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat ResilienceScaleOverLife;//[Offset: 0x60, Size: 0x30]
	float Friction;//[Offset: 0x90, Size: 0x4]
	float RandomSpread;//[Offset: 0x94, Size: 0x4]
	float RandomDistribution;//[Offset: 0x98, Size: 0x4]
	float RadiusScale;//[Offset: 0x9c, Size: 0x4]
	float RadiusBias;//[Offset: 0xa0, Size: 0x4]
	byte Response;//[Offset: 0xa4, Size: 0x1]
	byte CollisionMode;//[Offset: 0xa5, Size: 0x1]

--------------------------------
Class: ParticleModuleColorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector StartColor;//[Offset: 0x30, Size: 0x48]
	RawDistributionFloat StartAlpha;//[Offset: 0x78, Size: 0x30]
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: ParticleModuleColor_Seeded.ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xb0, Size: 0x20]

--------------------------------
Class: ParticleRandomSeedInfo
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	bool bGetSeedFromInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bInstanceSeedIsIndex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bResetSeedOnEmitterLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bRandomlySelectSeedArray;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	int[] RandomSeeds;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ParticleModuleColorOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorOverLife;//[Offset: 0x30, Size: 0x48]
	RawDistributionFloat AlphaOverLife;//[Offset: 0x78, Size: 0x30]
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: ParticleModuleColorScaleOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x30, Size: 0x48]
	RawDistributionFloat AlphaScaleOverLife;//[Offset: 0x78, Size: 0x30]
	bool bEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverKillParticles.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	bool bStopSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverSpawn.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	RawDistributionFloat SpawnCount;//[Offset: 0x38, Size: 0x30]
	bool bUseParticleTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bUsePSysLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bInheritVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	RawDistributionVector InheritVelocityScale;//[Offset: 0x70, Size: 0x48]
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0xb8, Size: 0x10]
	bool bBanPhysicalMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: ParticleModuleKillBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleKillBox.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionVector LowerLeftCorner;//[Offset: 0x30, Size: 0x48]
	RawDistributionVector UpperRightCorner;//[Offset: 0x78, Size: 0x48]
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bKillInside;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bAxisAlignedAndFixedSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: ParticleModuleKillHeight.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionFloat Height;//[Offset: 0x30, Size: 0x30]
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool bApplyPSysScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: ParticleModuleLifetimeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	RawDistributionFloat LifeTime;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: ParticleModuleLifetime_Seeded.ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: ParticleModuleLightBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bPreviewLightRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float SpawnFraction;//[Offset: 0x30, Size: 0x4]
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x38, Size: 0x48]
	RawDistributionFloat BrightnessOverLife;//[Offset: 0x80, Size: 0x30]
	RawDistributionFloat RadiusScale;//[Offset: 0xb0, Size: 0x30]
	RawDistributionFloat LightExponent;//[Offset: 0xe0, Size: 0x30]
	LightingChannels LightingChannels;//[Offset: 0x110, Size: 0x1]
	float VolumetricScatteringIntensity;//[Offset: 0x114, Size: 0x4]
	bool bHighQualityLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bShadowCastingLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]

--------------------------------
Class: ParticleModuleLight_Seeded.ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x120, Size: 0x20]

--------------------------------
Class: ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartLocation;//[Offset: 0x30, Size: 0x48]
	float DistributeOverNPoints;//[Offset: 0x78, Size: 0x4]
	float DistributeThreshold;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: ParticleModuleLocation_Seeded.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20]

--------------------------------
Class: ParticleModuleLocationBoneSocket.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x2b, Size: 0x1]
	Vector UniversalOffset;//[Offset: 0x2c, Size: 0xc]
	LocationBoneSocketInfo[] SourceLocations;//[Offset: 0x38, Size: 0x10]
	byte SelectionMethod;//[Offset: 0x48, Size: 0x1]
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49, Size: 0x1]
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49, Size: 0x1]
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x49, Size: 0x1]
	float InheritVelocityScale;//[Offset: 0x4c, Size: 0x4]
	FName SkelMeshActorParamName;//[Offset: 0x50, Size: 0x8]
	int NumPreSelectedIndices;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: LocationBoneSocketInfo
	FName BoneSocketName;//[Offset: 0x0, Size: 0x8]
	Vector Offset;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: ParticleModuleLocationDirect.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector Location;//[Offset: 0x30, Size: 0x48]
	RawDistributionVector LocationOffset;//[Offset: 0x78, Size: 0x48]
	RawDistributionVector ScaleFactor;//[Offset: 0xc0, Size: 0x48]
	RawDistributionVector Direction;//[Offset: 0x108, Size: 0x48]

--------------------------------
Class: ParticleModuleLocationEmitter.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8]
	byte SelectionMethod;//[Offset: 0x34, Size: 0x1]
	bool InheritSourceVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 0x1]
	float InheritSourceVelocityScale;//[Offset: 0x38, Size: 0x4]
	bool bInheritSourceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	float InheritSourceRotationScale;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: ParticleModuleLocationEmitterDirect.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool Positive_X;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1]
	bool Negative_X;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b, Size: 0x1]
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b, Size: 0x1]
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b, Size: 0x1]
	bool SurfaceOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b, Size: 0x1]
	bool Velocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b, Size: 0x1]
	RawDistributionFloat VelocityScale;//[Offset: 0x30, Size: 0x30]
	RawDistributionVector StartLocation;//[Offset: 0x60, Size: 0x48]

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool RadialVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	RawDistributionFloat StartRadius;//[Offset: 0xb0, Size: 0x30]
	RawDistributionFloat StartHeight;//[Offset: 0xe0, Size: 0x30]
	byte HeightAxis;//[Offset: 0x110, Size: 0x1]

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder_Seeded.ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x118, Size: 0x20]

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionFloat StartRadius;//[Offset: 0xa8, Size: 0x30]

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere_Seeded.ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xd8, Size: 0x20]

--------------------------------
Class: ParticleModuleLocationPrimitiveTriangle.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartOffset;//[Offset: 0x30, Size: 0x48]
	RawDistributionFloat Height;//[Offset: 0x78, Size: 0x30]
	RawDistributionFloat Angle;//[Offset: 0xa8, Size: 0x30]
	RawDistributionFloat Thickness;//[Offset: 0xd8, Size: 0x30]

--------------------------------
Class: ParticleModuleLocationSkelVertSurface.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x2b, Size: 0x1]
	Vector UniversalOffset;//[Offset: 0x2c, Size: 0xc]
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]
	float InheritVelocityScale;//[Offset: 0x3c, Size: 0x4]
	FName SkelMeshActorParamName;//[Offset: 0x40, Size: 0x8]
	FName[] ValidAssociatedBones;//[Offset: 0x48, Size: 0x10]
	bool bEnforceNormalCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	Vector NormalToCompare;//[Offset: 0x5c, Size: 0xc]
	float NormalCheckToleranceDegrees;//[Offset: 0x68, Size: 0x4]
	float NormalCheckTolerance;//[Offset: 0x6c, Size: 0x4]
	int[] ValidMaterialIndices;//[Offset: 0x70, Size: 0x10]
	bool bInheritVertexColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bInheritUV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	uint32 InheritUVChannel;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocationWorldOffset_Seeded.ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20]

--------------------------------
Class: ParticleModuleMaterialBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshMaterial.ParticleModuleMaterialBase.ParticleModule.Object
	MaterialInterface*[] MeshMaterials;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleRotationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionVector StartRotation;//[Offset: 0x30, Size: 0x48]
	bool bInheritParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ParticleModuleMeshRotation_Seeded.ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20]

--------------------------------
Class: ParticleModuleRotationRateBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector StartRotationRate;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ParticleModuleMeshRotationRate_Seeded.ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x78, Size: 0x20]

--------------------------------
Class: ParticleModuleMeshRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ParticleModuleMeshRotationRateOverLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector RotRate;//[Offset: 0x30, Size: 0x48]
	bool bScaleRotRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ParticleModuleOrientationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleOrientationAxisLock.ParticleModuleOrientationBase.ParticleModule.Object
	byte LockAxisFlags;//[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleParameterBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	EmitterDynamicParameter[] DynamicParams;//[Offset: 0x30, Size: 0x10]
	int UpdateFlags;//[Offset: 0x40, Size: 0x4]
	bool bUsesVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: EmitterDynamicParameter
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	byte ValueMethod;//[Offset: 0x9, Size: 0x1]
	bool bScaleVelocityByParamValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	RawDistributionFloat ParamValue;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: ParticleModuleParameterDynamic_Seeded.ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x48, Size: 0x20]

--------------------------------
Class: ParticleModulePivotOffset.ParticleModuleLocationBase.ParticleModule.Object
	Vector2D PivotOffset;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat StartRotation;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: ParticleModuleRotation_Seeded.ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: ParticleModuleRotationOverLifetime.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat RotationOverLife;//[Offset: 0x30, Size: 0x30]
	bool Scale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat StartRotationRate;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: ParticleModuleRotationRate_Seeded.ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: ParticleModuleRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat LifeMultiplier;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: ParticleModuleSizeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector StartSize;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ParticleModuleSize_Seeded.ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x78, Size: 0x20]

--------------------------------
Class: ParticleModuleSizeMultiplyLife.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x48]
	bool MultiplyX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	bool MultiplyY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]
	bool MultiplyZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ParticleModuleSizeScale.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector SizeScale;//[Offset: 0x30, Size: 0x48]
	bool EnableX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	bool EnableY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]
	bool EnableZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ParticleModuleSizeScaleBySpeed.ParticleModuleSizeBase.ParticleModule.Object
	Vector2D SpeedScale;//[Offset: 0x2c, Size: 0x8]
	Vector2D MaxScale;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: ParticleModuleSourceMovement.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector SourceMovementScale;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ParticleModuleSpawnPerUnit.ParticleModuleSpawnBase.ParticleModule.Object
	float UnitScalar;//[Offset: 0x2c, Size: 0x4]
	float MovementTolerance;//[Offset: 0x30, Size: 0x4]
	RawDistributionFloat SpawnPerUnit;//[Offset: 0x38, Size: 0x30]
	float MaxFrameDistance;//[Offset: 0x68, Size: 0x4]
	bool bIgnoreSpawnRateWhenMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	bool bIgnoreMovementAlongX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1]
	bool bIgnoreMovementAlongY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1]
	bool bIgnoreMovementAlongZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1]

--------------------------------
Class: ParticleModuleSubUVBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	SubUVAnimation* Animation;//[Offset: 0x30, Size: 0x8]
	RawDistributionFloat SubImageIndex;//[Offset: 0x38, Size: 0x30]
	bool bUseRealTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: SubUVAnimation.Object
	Texture2D* SubUVTexture;//[Offset: 0x28, Size: 0x8]
	int SubImages_Horizontal;//[Offset: 0x30, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0x34, Size: 0x4]
	byte BoundingMode;//[Offset: 0x38, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0x39, Size: 0x1]
	float AlphaThreshold;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: ParticleModuleSubUVMovie.ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1]
	RawDistributionFloat FrameRate;//[Offset: 0x70, Size: 0x30]
	int StartingFrame;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: ParticleModuleTrailBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleTrailSource.ParticleModuleTrailBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1]
	FName SourceName;//[Offset: 0x2c, Size: 0x8]
	RawDistributionFloat SourceStrength;//[Offset: 0x38, Size: 0x30]
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	int SourceOffsetCount;//[Offset: 0x6c, Size: 0x4]
	Vector[] SourceOffsetDefaults;//[Offset: 0x70, Size: 0x10]
	byte SelectionMethod;//[Offset: 0x80, Size: 0x1]
	bool bInheritRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1]

--------------------------------
Class: ParticleModuleTypeDataAnimTrail.ParticleModuleTypeDataBase.ParticleModule.Object
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1]
	float TilingDistance;//[Offset: 0x2c, Size: 0x4]
	float DistanceTessellationStepSize;//[Offset: 0x30, Size: 0x4]
	float TangentTessellationStepSize;//[Offset: 0x34, Size: 0x4]
	float WidthTessellationStepSize;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBeam2.ParticleModuleTypeDataBase.ParticleModule.Object
	byte BeamMethod;//[Offset: 0x2b, Size: 0x1]
	int TextureTile;//[Offset: 0x2c, Size: 0x4]
	float TextureTileDistance;//[Offset: 0x30, Size: 0x4]
	int Sheets;//[Offset: 0x34, Size: 0x4]
	int MaxBeamCount;//[Offset: 0x38, Size: 0x4]
	float Speed;//[Offset: 0x3c, Size: 0x4]
	int InterpolationPoints;//[Offset: 0x40, Size: 0x4]
	bool bAlwaysOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	int UpVectorStepSize;//[Offset: 0x48, Size: 0x4]
	FName BranchParentName;//[Offset: 0x4c, Size: 0x8]
	RawDistributionFloat Distance;//[Offset: 0x58, Size: 0x30]
	byte TaperMethod;//[Offset: 0x88, Size: 0x1]
	RawDistributionFloat TaperFactor;//[Offset: 0x90, Size: 0x30]
	RawDistributionFloat TaperScale;//[Offset: 0xc0, Size: 0x30]
	bool RenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool RenderDirectLine;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool RenderLines;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]
	bool RenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: ParticleModuleTypeDataGpu.ParticleModuleTypeDataBase.ParticleModule.Object
	GPUSpriteEmitterInfo EmitterInfo;//[Offset: 0x30, Size: 0x270]
	GPUSpriteResourceData ResourceData;//[Offset: 0x2a0, Size: 0x160]
	float CameraMotionBlurAmount;//[Offset: 0x400, Size: 0x4]
	bool bClearExistingParticlesOnInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x404, Size: 0x1]

--------------------------------
Class: GPUSpriteEmitterInfo
	ParticleModuleRequired* RequiredModule;//[Offset: 0x0, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x8, Size: 0x8]
	ParticleModuleSpawnPerUnit* SpawnPerUnitModule;//[Offset: 0x10, Size: 0x8]
	ParticleModule*[] SpawnModules;//[Offset: 0x18, Size: 0x10]
	GPUSpriteLocalVectorFieldInfo LocalVectorField;//[Offset: 0x30, Size: 0x70]
	FloatDistribution VectorFieldScale;//[Offset: 0xa0, Size: 0x20]
	FloatDistribution DragCoefficient;//[Offset: 0xc0, Size: 0x20]
	FloatDistribution PointAttractorStrength;//[Offset: 0xe0, Size: 0x20]
	FloatDistribution Resilience;//[Offset: 0x100, Size: 0x20]
	Vector ConstantAcceleration;//[Offset: 0x120, Size: 0xc]
	Vector PointAttractorPosition;//[Offset: 0x12c, Size: 0xc]
	float PointAttractorRadiusSq;//[Offset: 0x138, Size: 0x4]
	Vector OrbitOffsetBase;//[Offset: 0x13c, Size: 0xc]
	Vector OrbitOffsetRange;//[Offset: 0x148, Size: 0xc]
	Vector2D InvMaxSize;//[Offset: 0x154, Size: 0x8]
	float InvRotationRateScale;//[Offset: 0x15c, Size: 0x4]
	float MaxLifetime;//[Offset: 0x160, Size: 0x4]
	int MaxParticleCount;//[Offset: 0x164, Size: 0x4]
	byte ScreenAlignment;//[Offset: 0x168, Size: 0x1]
	byte LockAxisFlag;//[Offset: 0x169, Size: 0x1]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16a, Size: 0x1]
	byte CollisionMode;//[Offset: 0x16b, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16c, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x170, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x174, Size: 0x4]
	RawDistributionVector DynamicColor;//[Offset: 0x178, Size: 0x48]
	RawDistributionFloat DynamicAlpha;//[Offset: 0x1c0, Size: 0x30]
	RawDistributionVector DynamicColorScale;//[Offset: 0x1f0, Size: 0x48]
	RawDistributionFloat DynamicAlphaScale;//[Offset: 0x238, Size: 0x30]

--------------------------------
Class: GPUSpriteLocalVectorFieldInfo
	VectorField* Field;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]
	Rotator MinInitialRotation;//[Offset: 0x40, Size: 0xc]
	Rotator MaxInitialRotation;//[Offset: 0x4c, Size: 0xc]
	Rotator RotationRate;//[Offset: 0x58, Size: 0xc]
	float Intensity;//[Offset: 0x64, Size: 0x4]
	float Tightness;//[Offset: 0x68, Size: 0x4]
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1]
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1]
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1]
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c, Size: 0x1]

--------------------------------
Class: VectorField.Object
	Box Bounds;//[Offset: 0x28, Size: 0x1c]
	float Intensity;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: FloatDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: GPUSpriteResourceData
	Color[] QuantizedColorSamples;//[Offset: 0x0, Size: 0x10]
	Color[] QuantizedMiscSamples;//[Offset: 0x10, Size: 0x10]
	Color[] QuantizedSimulationAttrSamples;//[Offset: 0x20, Size: 0x10]
	Vector4 ColorScale;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorBias;//[Offset: 0x40, Size: 0x10]
	Vector4 MiscScale;//[Offset: 0x50, Size: 0x10]
	Vector4 MiscBias;//[Offset: 0x60, Size: 0x10]
	Vector4 SimulationAttrCurveScale;//[Offset: 0x70, Size: 0x10]
	Vector4 SimulationAttrCurveBias;//[Offset: 0x80, Size: 0x10]
	Vector4 SubImageSize;//[Offset: 0x90, Size: 0x10]
	Vector4 SizeBySpeed;//[Offset: 0xa0, Size: 0x10]
	Vector ConstantAcceleration;//[Offset: 0xb0, Size: 0xc]
	Vector OrbitOffsetBase;//[Offset: 0xbc, Size: 0xc]
	Vector OrbitOffsetRange;//[Offset: 0xc8, Size: 0xc]
	Vector OrbitFrequencyBase;//[Offset: 0xd4, Size: 0xc]
	Vector OrbitFrequencyRange;//[Offset: 0xe0, Size: 0xc]
	Vector OrbitPhaseBase;//[Offset: 0xec, Size: 0xc]
	Vector OrbitPhaseRange;//[Offset: 0xf8, Size: 0xc]
	float GlobalVectorFieldScale;//[Offset: 0x104, Size: 0x4]
	float GlobalVectorFieldTightness;//[Offset: 0x108, Size: 0x4]
	float PerParticleVectorFieldScale;//[Offset: 0x10c, Size: 0x4]
	float PerParticleVectorFieldBias;//[Offset: 0x110, Size: 0x4]
	float DragCoefficientScale;//[Offset: 0x114, Size: 0x4]
	float DragCoefficientBias;//[Offset: 0x118, Size: 0x4]
	float ResilienceScale;//[Offset: 0x11c, Size: 0x4]
	float ResilienceBias;//[Offset: 0x120, Size: 0x4]
	float CollisionRadiusScale;//[Offset: 0x124, Size: 0x4]
	float CollisionRadiusBias;//[Offset: 0x128, Size: 0x4]
	float CollisionTimeBias;//[Offset: 0x12c, Size: 0x4]
	float CollisionRandomSpread;//[Offset: 0x130, Size: 0x4]
	float CollisionRandomDistribution;//[Offset: 0x134, Size: 0x4]
	float OneMinusFriction;//[Offset: 0x138, Size: 0x4]
	float RotationRateScale;//[Offset: 0x13c, Size: 0x4]
	float CameraMotionBlurAmount;//[Offset: 0x140, Size: 0x4]
	byte ScreenAlignment;//[Offset: 0x144, Size: 0x1]
	byte LockAxisFlag;//[Offset: 0x145, Size: 0x1]
	Vector2D PivotOffset;//[Offset: 0x148, Size: 0x8]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x154, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x158, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataMesh.ParticleModuleTypeDataBase.ParticleModule.Object
	StaticMesh* Mesh;//[Offset: 0x30, Size: 0x8]
	float LODSizeScale;//[Offset: 0x40, Size: 0x4]
	bool bUseStaticMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	bool DoCollisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1]
	byte MeshAlignment;//[Offset: 0x45, Size: 0x1]
	bool bOverrideMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46, Size: 0x1]
	bool bOverrideDefaultMotionBlurSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x46, Size: 0x1]
	bool bEnableMotionBlur;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x46, Size: 0x1]
	RawDistributionVector RollPitchYawRange;//[Offset: 0x48, Size: 0x48]
	byte AxisLockOption;//[Offset: 0x90, Size: 0x1]
	bool bCameraFacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91, Size: 0x1]
	byte CameraFacingUpAxisOption;//[Offset: 0x92, Size: 0x1]
	byte CameraFacingOption;//[Offset: 0x93, Size: 0x1]
	bool bApplyParticleRotationAsSpin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1]
	bool bFaceCameraDirectionRatherThanPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1]
	bool bCollisionsConsiderPartilceSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 0x1]

--------------------------------
Class: ParticleModuleTypeDataRibbon.ParticleModuleTypeDataBase.ParticleModule.Object
	int MaxTessellationBetweenParticles;//[Offset: 0x2c, Size: 0x4]
	int SheetsPerTrail;//[Offset: 0x30, Size: 0x4]
	int MaxTrailCount;//[Offset: 0x34, Size: 0x4]
	int MaxParticleInTrailCount;//[Offset: 0x38, Size: 0x4]
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bDeadTrailsOnSourceLoss;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bClipSourceSegement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSpawnInitialParticle;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	byte RenderAxis;//[Offset: 0x3d, Size: 0x1]
	float TangentSpawningScalar;//[Offset: 0x40, Size: 0x4]
	bool bRenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bRenderSpawnPoints;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	bool bRenderTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1]
	bool bRenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 0x1]
	float TilingDistance;//[Offset: 0x48, Size: 0x4]
	float DistanceTessellationStepSize;//[Offset: 0x4c, Size: 0x4]
	bool bEnableTangentDiffInterpScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	float TangentTessellationScalar;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: ParticleModuleVectorFieldBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleVectorFieldGlobal.ParticleModuleVectorFieldBase.ParticleModule.Object
	bool bOverrideGlobalVectorFieldTightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	float GlobalVectorFieldScale;//[Offset: 0x2c, Size: 0x4]
	float GlobalVectorFieldTightness;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: ParticleModuleVectorFieldLocal.ParticleModuleVectorFieldBase.ParticleModule.Object
	VectorField* VectorField;//[Offset: 0x30, Size: 0x8]
	Vector RelativeTranslation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x50, Size: 0xc]
	float Intensity;//[Offset: 0x5c, Size: 0x4]
	float Tightness;//[Offset: 0x60, Size: 0x4]
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1]
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64, Size: 0x1]
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x64, Size: 0x1]
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x64, Size: 0x1]

--------------------------------
Class: ParticleModuleVectorFieldRotation.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector MinInitialRotation;//[Offset: 0x2c, Size: 0xc]
	Vector MaxInitialRotation;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: ParticleModuleVectorFieldRotationRate.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector RotationRate;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: ParticleModuleVectorFieldScale.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScale;//[Offset: 0x30, Size: 0x8]
	RawDistributionFloat VectorFieldScaleRaw;//[Offset: 0x38, Size: 0x30]

--------------------------------
Class: ParticleModuleVectorFieldScaleOverLife.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScaleOverLife;//[Offset: 0x30, Size: 0x8]
	RawDistributionFloat VectorFieldScaleOverLifeRaw;//[Offset: 0x38, Size: 0x30]

--------------------------------
Class: ParticleModuleVelocityBase.ParticleModule.Object
	bool bInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector StartVelocity;//[Offset: 0x30, Size: 0x48]
	RawDistributionFloat StartVelocityRadial;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: ParticleModuleVelocity_Seeded.ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xa8, Size: 0x20]

--------------------------------
Class: ParticleModuleVelocityCone.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionFloat Angle;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat Velocity;//[Offset: 0x60, Size: 0x30]
	Vector Direction;//[Offset: 0x90, Size: 0xc]

--------------------------------
Class: ParticleModuleVelocityInheritParent.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector Scale;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ParticleModuleVelocityOverLifetime.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector VelOverLife;//[Offset: 0x30, Size: 0x48]
	bool Absolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ParticleSpriteEmitter.ParticleEmitter.Object

--------------------------------
Class: PathFollowingAgentInterface.Interface.Object

--------------------------------
Class: PawnNoiseEmitterComponent.ActorComponent.Object
	bool bAIPerceptionSystemCompatibilityMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1]
	Vector LastRemoteNoisePosition;//[Offset: 0xbc, Size: 0xc]
	float NoiseLifetime;//[Offset: 0xc8, Size: 0x4]
	float LastRemoteNoiseVolume;//[Offset: 0xcc, Size: 0x4]
	float LastRemoteNoiseTime;//[Offset: 0xd0, Size: 0x4]
	float LastLocalNoiseVolume;//[Offset: 0xd4, Size: 0x4]
	float LastLocalNoiseTime;//[Offset: 0xd8, Size: 0x4]
	void MakeNoise(Actor* NoiseMaker, float Loudness, out const Vector NoiseLocation);// 0x7093e3fee041

--------------------------------
Class: PHOCCustomSampler.Actor.Object

--------------------------------
Class: PhysicalAnimationComponent.ActorComponent.Object
	float StrengthMultiplyer;//[Offset: 0xb8, Size: 0x4]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0xc0, Size: 0x8]
	void SetStrengthMultiplyer(float InStrengthMultiplyer);// 0x7099e3fee041
	void SetSkeletalMeshComponent(SkeletalMeshComponent* InSkeletalMeshComponent);// 0x7098e3fee041
	Transform GetBodyTargetTransform(FName BodyName);// 0x7097e3fee041
	void ApplyPhysicalAnimationSettingsBelow(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData, bool bIncludeSelf);// 0x7096e3fee041
	void ApplyPhysicalAnimationSettings(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData);// 0x7095e3fee041
	void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);// 0x7094e3fee041

--------------------------------
Class: RigidBodyBase.Actor.Object

--------------------------------
Class: PhysicsConstraintActor.RigidBodyBase.Actor.Object
	PhysicsConstraintComponent* ConstraintComp;//[Offset: 0x2e0, Size: 0x8]
	Actor* ConstraintActor1;//[Offset: 0x2e8, Size: 0x8]
	Actor* ConstraintActor2;//[Offset: 0x2f0, Size: 0x8]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 0x1]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x208, Size: 0x8]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x210, Size: 0x8]
	Actor* ConstraintActor2;//[Offset: 0x218, Size: 0x8]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x220, Size: 0x8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x238, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x240, Size: 0x10]
	ConstraintInstance ConstraintInstance;//[Offset: 0x250, Size: 0x1c0]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x70bbe3fee041
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x70bae3fee041
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x70b9e3fee041
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x70b8e3fee041
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x70b7e3fee041
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x70b6e3fee041
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x70b5e3fee041
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x70b4e3fee041
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x70b3e3fee041
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x70b2e3fee041
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x70b1e3fee041
	void SetDisableCollision(bool bDisableCollision);// 0x70b0e3fee041
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x70afe3fee041
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x70aee3fee041
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x70ade3fee041
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x70ace3fee041
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x70abe3fee041
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x70aae3fee041
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x70a9e3fee041
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x70a8e3fee041
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x70a7e3fee041
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x70a6e3fee041
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x70a5e3fee041
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x70a4e3fee041
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x70a3e3fee041
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x70a2e3fee041
	void SetAngularDriveMode(byte DriveMode);// 0x70a1e3fee041
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x70a0e3fee041
	bool IsBroken();// 0x709fe3fee041
	float GetCurrentTwist();// 0x709ee3fee041
	float GetCurrentSwing2();// 0x709de3fee041
	float GetCurrentSwing1();// 0x709ce3fee041
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x709be3fee041
	void BreakConstraint();// 0x709ae3fee041

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PhysicsHandleComponent.ActorComponent.Object
	PrimitiveComponent* GrabbedComponent;//[Offset: 0xb8, Size: 0x8]
	bool bSoftAngularConstraint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1]
	bool bSoftLinearConstraint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc8, Size: 0x1]
	bool bInterpolateTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc8, Size: 0x1]
	float LinearDamping;//[Offset: 0xcc, Size: 0x4]
	float LinearStiffness;//[Offset: 0xd0, Size: 0x4]
	float AngularDamping;//[Offset: 0xd4, Size: 0x4]
	float AngularStiffness;//[Offset: 0xd8, Size: 0x4]
	float InterpolationSpeed;//[Offset: 0x140, Size: 0x4]
	void SetTargetRotation(Rotator NewRotation);// 0x70c9e3fee041
	void SetTargetLocationAndRotation(Vector NewLocation, Rotator NewRotation);// 0x70c8e3fee041
	void SetTargetLocation(Vector NewLocation);// 0x70c7e3fee041
	void SetLinearStiffness(float NewLinearStiffness);// 0x70c6e3fee041
	void SetLinearDamping(float NewLinearDamping);// 0x70c5e3fee041
	void SetInterpolationSpeed(float NewInterpolationSpeed);// 0x70c4e3fee041
	void SetAngularStiffness(float NewAngularStiffness);// 0x70c3e3fee041
	void SetAngularDamping(float NewAngularDamping);// 0x70c2e3fee041
	void ReleaseComponent();// 0x70c1e3fee041
	void GrabComponentAtLocationWithRotation(PrimitiveComponent* Component, FName InBoneName, Vector Location, Rotator Rotation);// 0x70c0e3fee041
	void GrabComponentAtLocation(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation);// 0x70bfe3fee041
	void GrabComponent(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation, bool bConstrainRotation);// 0x70bee3fee041
	void GetTargetLocationAndRotation(out Vector TargetLocation, out Rotator TargetRotation);// 0x70bde3fee041
	PrimitiveComponent* GetGrabbedComponent();// 0x70bce3fee041

--------------------------------
Class: PhysicsSpringComponent.SceneComponent.ActorComponent.Object
	float SpringStiffness;//[Offset: 0x204, Size: 0x4]
	float SpringDamping;//[Offset: 0x208, Size: 0x4]
	float SpringLengthAtRest;//[Offset: 0x20c, Size: 0x4]
	float SpringRadius;//[Offset: 0x210, Size: 0x4]
	byte SpringChannel;//[Offset: 0x214, Size: 0x1]
	bool bIgnoreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x215, Size: 0x1]
	float SpringCompression;//[Offset: 0x218, Size: 0x4]
	Vector GetSpringRestingPoint();// 0x70cde3fee041
	Vector GetSpringDirection();// 0x70cce3fee041
	Vector GetSpringCurrentEndPoint();// 0x70cbe3fee041
	float GetNormalizedCompressionScalar();// 0x70cae3fee041

--------------------------------
Class: PhysicsThruster.RigidBodyBase.Actor.Object
	PhysicsThrusterComponent* ThrusterComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: PhysicsThrusterComponent.SceneComponent.ActorComponent.Object
	float ThrustStrength;//[Offset: 0x204, Size: 0x4]

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x2e0, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x2e8, Size: 0x8]

--------------------------------
Class: PlanarReflection.SceneCapture.Actor.Object
	PlanarReflectionComponent* PlanarReflectionComponent;//[Offset: 0x2f0, Size: 0x8]
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	void OnInterpToggle(bool bEnable);// 0x70cee3fee041

--------------------------------
Class: PlanarReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x2d0, Size: 0x8]
	float NormalDistortionStrength;//[Offset: 0x2d8, Size: 0x4]
	float PrefilterRoughness;//[Offset: 0x2dc, Size: 0x4]
	float PrefilterRoughnessDistance;//[Offset: 0x2e0, Size: 0x4]
	int ScreenPercentage;//[Offset: 0x2e4, Size: 0x4]
	float ExtraFOV;//[Offset: 0x2e8, Size: 0x4]
	float MinDrawDistance;//[Offset: 0x2ec, Size: 0x4]
	float DistanceFromPlaneFadeStart;//[Offset: 0x2f0, Size: 0x4]
	float DistanceFromPlaneFadeEnd;//[Offset: 0x2f4, Size: 0x4]
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x2f8, Size: 0x4]
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x2fc, Size: 0x4]
	float AngleFromPlaneFadeStart;//[Offset: 0x300, Size: 0x4]
	float AngleFromPlaneFadeEnd;//[Offset: 0x304, Size: 0x4]
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool bRenderSceneTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x202, Size: 0x1]
	byte CaptureSource;//[Offset: 0x203, Size: 0x1]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x205, Size: 0x1]
	SkyLightComponent* SkyLightComponent;//[Offset: 0x208, Size: 0x8]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x210, Size: 0x10]
	Actor*[] HiddenActors;//[Offset: 0x220, Size: 0x10]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x230, Size: 0x10]
	Actor*[] ShowOnlyActors;//[Offset: 0x240, Size: 0x10]
	float LODDistanceFactor;//[Offset: 0x250, Size: 0x4]
	float MaxViewDistanceOverride;//[Offset: 0x254, Size: 0x4]
	int CaptureSortPriority;//[Offset: 0x258, Size: 0x4]
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x260, Size: 0x10]
	FString ProfilingEventName;//[Offset: 0x2b0, Size: 0x10]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x505fe3fee041
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x505ee3fee041
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x505de3fee041
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x505ce3fee041
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x505be3fee041
	void HideComponent(PrimitiveComponent* InComponent);// 0x505ae3fee041
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x5059e3fee041
	void ClearShowOnlyComponents();// 0x5058e3fee041
	void ClearHiddenComponents();// 0x5057e3fee041

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bRealTimeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	byte SourceType;//[Offset: 0x239, Size: 0x1]
	TextureCube* Cubemap;//[Offset: 0x240, Size: 0x8]
	IBLPrecomputedDataAsset* PrecomputedData;//[Offset: 0x248, Size: 0x8]
	float SourceCubemapAngle;//[Offset: 0x250, Size: 0x4]
	int CubemapResolution;//[Offset: 0x254, Size: 0x4]
	float SkyDistanceThreshold;//[Offset: 0x258, Size: 0x4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	LinearColor LowerHemisphereColor;//[Offset: 0x260, Size: 0x10]
	bool bProvideDefaultIrradiance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	float OcclusionMaxDistance;//[Offset: 0x274, Size: 0x4]
	float Contrast;//[Offset: 0x278, Size: 0x4]
	float OcclusionExponent;//[Offset: 0x27c, Size: 0x4]
	float MinOcclusion;//[Offset: 0x280, Size: 0x4]
	Color OcclusionTint;//[Offset: 0x284, Size: 0x4]
	bool bCloudAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	float CloudAmbientOcclusionStrength;//[Offset: 0x28c, Size: 0x4]
	float CloudAmbientOcclusionExtent;//[Offset: 0x290, Size: 0x4]
	float CloudAmbientOcclusionMapResolutionScale;//[Offset: 0x294, Size: 0x4]
	float CloudAmbientOcclusionApertureScale;//[Offset: 0x298, Size: 0x4]
	byte OcclusionCombineMode;//[Offset: 0x29c, Size: 0x1]
	bool bUsedForSceneCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 0x1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x348, Size: 0x8]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x7129e3fee041
	void SetOcclusionTint(out const Color InTint);// 0x7128e3fee041
	void SetOcclusionExponent(float InOcclusionExponent);// 0x7127e3fee041
	void SetOcclusionContrast(float InOcclusionContrast);// 0x7126e3fee041
	void SetMinOcclusion(float InMinOcclusion);// 0x7125e3fee041
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0x7124e3fee041
	void SetLightColor(LinearColor NewLightColor);// 0x7123e3fee041
	void SetIntensity(float NewIntensity);// 0x7122e3fee041
	void SetIndirectLightingIntensity(float NewIntensity);// 0x7121e3fee041
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x7120e3fee041
	void SetCubemap(TextureCube* NewCubemap);// 0x711fe3fee041
	void RecaptureSky();// 0x711ee3fee041

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PlaneReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: PlaneReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadiusScale;//[Offset: 0x288, Size: 0x4]
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x290, Size: 0x8]
	BoxComponent* PreviewCaptureBox;//[Offset: 0x298, Size: 0x8]

--------------------------------
Class: PlatformEventsComponent.ActorComponent.Object
	delegate PlatformChangedToLaptopModeDelegate;//[Offset: 0xb8, Size: 0x10]
	delegate PlatformChangedToTabletModeDelegate;//[Offset: 0xc8, Size: 0x10]
	bool SupportsConvertibleLaptops();// 0x13cce3fee041
	void PlatformEventDelegate__DelegateSignature();// 0x13cbe3fee041
	bool IsInTabletMode();// 0x13cae3fee041
	bool IsInLaptopMode();// 0x13c9e3fee041

--------------------------------
Class: PlatformInterfaceWebResponse.Object
	FString OriginalURL;//[Offset: 0x28, Size: 0x10]
	int ResponseCode;//[Offset: 0x38, Size: 0x4]
	int Tag;//[Offset: 0x3c, Size: 0x4]
	FString StringResponse;//[Offset: 0x40, Size: 0x10]
	byte[] BinaryResponse;//[Offset: 0x50, Size: 0x10]
	int GetNumHeaders();// 0x70d1e3fee041
	FString GetHeaderValue(FString HeaderName);// 0x70d0e3fee041
	void GetHeader(int HeaderIndex, out FString Header, out FString Value);// 0x70cfe3fee041

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x304, Size: 0x8]

--------------------------------
Class: PlayerStartPIE.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: PluginCommandlet.Commandlet.Object

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x2f0, Size: 0x8]
	void SetRadius(float NewRadius);// 0x70d3e3fee041
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x70d2e3fee041

--------------------------------
Class: Polys.Object

--------------------------------
Class: PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetBoneTransformByName(FName BoneName, out const Transform InTransform, byte BoneSpace);// 0x70e1e3fee041
	void SetBoneScaleByName(FName BoneName, Vector InScale3D, byte BoneSpace);// 0x70e0e3fee041
	void SetBoneRotationByName(FName BoneName, Rotator InRotation, byte BoneSpace);// 0x70dfe3fee041
	void SetBoneLocationByName(FName BoneName, Vector InLocation, byte BoneSpace);// 0x70dee3fee041
	void ResetBoneTransformByName(FName BoneName);// 0x70dde3fee041
	Transform GetBoneTransformByName(FName BoneName, byte BoneSpace);// 0x70dce3fee041
	Vector GetBoneScaleByName(FName BoneName, byte BoneSpace);// 0x70dbe3fee041
	Rotator GetBoneRotationByName(FName BoneName, byte BoneSpace);// 0x70dae3fee041
	Vector GetBoneLocationByName(FName BoneName, byte BoneSpace);// 0x70d9e3fee041
	void CopyPoseFromSkeletalComponent(SkeletalMeshComponent* InComponentToCopy);// 0x70d8e3fee041

--------------------------------
Class: PoseAsset.AnimationAsset.Object
	PoseDataContainer PoseContainer;//[Offset: 0x80, Size: 0x90]
	bool bAdditivePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	int BasePoseIndex;//[Offset: 0x114, Size: 0x4]
	FName RetargetSource;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: PoseDataContainer
	SmartName[] PoseNames;//[Offset: 0x0, Size: 0x10]
	FName[] Tracks;//[Offset: 0x10, Size: 0x10]
	<FName,int> TrackMap;//[Offset: 0x20, Size: 0x50]
	PoseData[] Poses;//[Offset: 0x70, Size: 0x10]
	AnimCurveBase[] Curves;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: PoseData
	Transform[] LocalSpacePose;//[Offset: 0x0, Size: 0x10]
	<int,int> TrackToBufferIndex;//[Offset: 0x10, Size: 0x50]
	float[] CurveData;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: PoseWatch.Object
	EdGraphNode* Node;//[Offset: 0x28, Size: 0x8]
	Color PoseWatchColour;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x210, Size: 0x610]
	float Priority;//[Offset: 0x820, Size: 0x4]
	float BlendRadius;//[Offset: 0x824, Size: 0x4]
	float BlendWeight;//[Offset: 0x828, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x82c, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x82c, Size: 0x1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x70e2e3fee041

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x320, Size: 0x610]
	float Priority;//[Offset: 0x930, Size: 0x4]
	float BlendRadius;//[Offset: 0x934, Size: 0x4]
	float BlendWeight;//[Offset: 0x938, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x93c, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x93c, Size: 0x1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x70e3e3fee041

--------------------------------
Class: PrecomputedVisibilityOverrideVolume.Volume.Brush.Actor.Object
	Actor*[] OverrideVisibleActors;//[Offset: 0x318, Size: 0x10]
	Actor*[] OverrideInvisibleActors;//[Offset: 0x328, Size: 0x10]
	FName[] OverrideInvisibleLevels;//[Offset: 0x338, Size: 0x10]

--------------------------------
Class: PrecomputedVisibilityVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PreviewCollectionInterface.Interface.Object

--------------------------------
Class: PreviewMeshCollection.DataAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	PreviewMeshCollectionEntry[] SkeletalMeshes;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: PreviewMeshCollectionEntry
	SkeletalMesh* SkeletalMesh;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: PrimaryAssetLabel.PrimaryDataAsset.DataAsset.Object
	PrimaryAssetRules rules;//[Offset: 0x30, Size: 0xc]
	bool bLabelAssetsInMyDirectory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bIsRuntimeLabel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	Object*[] ExplicitAssets;//[Offset: 0x40, Size: 0x10]
	class Object[] ExplicitBlueprints;//[Offset: 0x50, Size: 0x10]
	CollectionReference AssetCollection;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: CollectionReference
	FName CollectionName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf4, Size: 0x4]
	float MaxSpeed;//[Offset: 0xf8, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfc, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfc, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfc, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfc, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfc, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xfc, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfd, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfd, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfd, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfd, Size: 0x1]
	float PreviousHitTime;//[Offset: 0x100, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x104, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x110, Size: 0x4]
	float Buoyancy;//[Offset: 0x114, Size: 0x4]
	float Bounciness;//[Offset: 0x118, Size: 0x4]
	float Friction;//[Offset: 0x11c, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x120, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x124, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x128, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x138, Size: 0x10]
	delegate OnProjectileStick;//[Offset: 0x148, Size: 0x10]
	bool bCheckStick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	float HomingAccelerationMagnitude;//[Offset: 0x15c, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x160, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x168, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x16c, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x170, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x174, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x178, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x17c, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x180, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x143fe3fee041
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x143ee3fee041
	void SetInterpolatedComponent(SceneComponent* Component);// 0x143de3fee041
	void ResetInterpolation();// 0x143ce3fee041
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x143be3fee041
	void OnProjectileStickDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x143ae3fee041
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x1439e3fee041
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x1438e3fee041
	Vector LimitVelocity(Vector NewVelocity);// 0x1437e3fee041
	bool IsVelocityUnderSimulationThreshold();// 0x1436e3fee041
	bool IsInterpolationComplete();// 0x1435e3fee041

--------------------------------
Class: ProxyLODMeshSimplificationSettings.DeveloperSettings.Object
	FName ProxyLODMeshReductionModuleName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: RadialForceActor.RigidBodyBase.Actor.Object
	RadialForceComponent* ForceComponent;//[Offset: 0x2e0, Size: 0x8]
	void ToggleForce();// 0x70e7e3fee041
	void FireImpulse();// 0x70e6e3fee041
	void EnableForce();// 0x70e5e3fee041
	void DisableForce();// 0x70e4e3fee041

--------------------------------
Class: RadialForceComponent.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x204, Size: 0x4]
	byte Falloff;//[Offset: 0x208, Size: 0x1]
	float ImpulseStrength;//[Offset: 0x20c, Size: 0x4]
	bool bImpulseVelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	bool bIgnoreOwningActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1]
	float ForceStrength;//[Offset: 0x214, Size: 0x4]
	float DestructibleDamage;//[Offset: 0x218, Size: 0x4]
	byte[] ObjectTypesToAffect;//[Offset: 0x220, Size: 0x10]
	void RemoveObjectTypeToAffect(byte ObjectType);// 0x70eae3fee041
	void FireImpulse();// 0x70e9e3fee041
	void AddObjectTypeToAffect(byte ObjectType);// 0x70e8e3fee041

--------------------------------
Class: RectLight.Light.Actor.Object
	RectLightComponent* RectLightComponent;//[Offset: 0x2f0, Size: 0x8]

--------------------------------
Class: RectLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float SourceWidth;//[Offset: 0x354, Size: 0x4]
	float SourceHeight;//[Offset: 0x358, Size: 0x4]
	float BarnDoorAngle;//[Offset: 0x35c, Size: 0x4]
	float BarnDoorLength;//[Offset: 0x360, Size: 0x4]
	Texture* SourceTexture;//[Offset: 0x368, Size: 0x8]
	void SetSourceWidth(float bNewValue);// 0x70efe3fee041
	void SetSourceTexture(Texture* bNewValue);// 0x70eee3fee041
	void SetSourceHeight(float NewValue);// 0x70ede3fee041
	void SetBarnDoorLength(float NewValue);// 0x70ece3fee041
	void SetBarnDoorAngle(float NewValue);// 0x70ebe3fee041

--------------------------------
Class: RendererSettings.DeveloperSettings.Object
	bool bMobileDisableVertexFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	int MaxMobileCascades;//[Offset: 0x3c, Size: 0x4]
	byte MobileMSAASampleCount;//[Offset: 0x40, Size: 0x1]
	bool bMobileAllowDitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]
	bool bMobileAllowSoftwareOcclusionCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1]
	bool bMobileVirtualTextures;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 0x1]
	bool bDiscardUnusedQualityLevels;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 0x1]
	bool bOcclusionCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41, Size: 0x1]
	float MinScreenRadiusForLights;//[Offset: 0x44, Size: 0x4]
	float MinScreenRadiusForEarlyZPass;//[Offset: 0x48, Size: 0x4]
	float MinScreenRadiusForCSMdepth;//[Offset: 0x4c, Size: 0x4]
	bool bPrecomputedVisibilityWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bTextureStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	bool bUseDXT5NormalMaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1]
	bool bVirtualTextures;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1]
	bool bVirtualTexturedLightmaps;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x50, Size: 0x1]
	uint32 VirtualTextureTileSize;//[Offset: 0x54, Size: 0x4]
	uint32 VirtualTextureTileBorderSize;//[Offset: 0x58, Size: 0x4]
	uint32 VirtualTextureFeedbackFactor;//[Offset: 0x5c, Size: 0x4]
	bool bVirtualTextureEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bVirtualTextureEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool bClearCoatEnableSecondNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	int ReflectionCaptureResolution;//[Offset: 0x64, Size: 0x4]
	bool bReflectionCaptureCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool ReflectionEnvironmentLightmapMixBasedOnRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bForwardShading;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bVertexFoggingForOpaque;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bAllowStaticLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bUseNormalMapsForStaticLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bGenerateMeshDistanceFields;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bEightBitMeshDistanceFields;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]
	bool bGenerateLandscapeGIData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1]
	bool bCompressMeshDistanceFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x69, Size: 0x1]
	float TessellationAdaptivePixelsPerTriangle;//[Offset: 0x6c, Size: 0x4]
	bool bSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	byte TranslucentSortPolicy;//[Offset: 0x71, Size: 0x1]
	Vector TranslucentSortAxis;//[Offset: 0x74, Size: 0xc]
	byte CustomDepthStencil;//[Offset: 0x80, Size: 0x1]
	bool bCustomDepthTaaJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1]
	byte bEnableAlphaChannelInPostProcessing;//[Offset: 0x82, Size: 0x1]
	bool bDefaultFeatureBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83, Size: 0x1]
	bool bDefaultFeatureAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83, Size: 0x1]
	bool bDefaultFeatureAmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83, Size: 0x1]
	bool bDefaultFeatureAutoExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x83, Size: 0x1]
	byte DefaultFeatureAutoExposure;//[Offset: 0x84, Size: 0x1]
	float DefaultFeatureAutoExposureBias;//[Offset: 0x88, Size: 0x4]
	bool bExtendDefaultLuminanceRangeInAutoExposureSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1]
	bool bUsePreExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1]
	bool bEnablePreExposureOnlyInTheEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c, Size: 0x1]
	bool bDefaultFeatureMotionBlur;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c, Size: 0x1]
	bool bDefaultFeatureLensFlare;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c, Size: 0x1]
	bool bTemporalUpsampling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c, Size: 0x1]
	bool bSSGI;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c, Size: 0x1]
	byte DefaultFeatureAntiAliasing;//[Offset: 0x8d, Size: 0x1]
	enum DefaultLightUnits;//[Offset: 0x8e, Size: 0x1]
	byte DefaultBackBufferPixelFormat;//[Offset: 0x8f, Size: 0x1]
	bool bRenderUnbuiltPreviewShadowsInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bStencilForLODDither;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	byte EarlyZPass;//[Offset: 0x91, Size: 0x1]
	bool bEarlyZPassOnlyMaterialMasking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x92, Size: 0x1]
	bool bDBuffer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x92, Size: 0x1]
	byte ClearSceneMethod;//[Offset: 0x93, Size: 0x1]
	bool bBasePassOutputsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1]
	bool bVertexDeformationOutputsVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1]
	bool bSelectiveBasePassOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 0x1]
	bool bDefaultParticleCutouts;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x94, Size: 0x1]
	int GPUSimulationTextureSizeX;//[Offset: 0x98, Size: 0x4]
	int GPUSimulationTextureSizeY;//[Offset: 0x9c, Size: 0x4]
	bool bGlobalClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	byte GBufferFormat;//[Offset: 0xa1, Size: 0x1]
	bool bUseGPUMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2, Size: 0x1]
	bool bNvidiaAftermathEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 0x1]
	bool bMultiView;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa2, Size: 0x1]
	bool bMobilePostProcessing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa2, Size: 0x1]
	bool bMobileMultiView;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa2, Size: 0x1]
	bool bMobileUseHWsRGBEncoding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa2, Size: 0x1]
	bool bRoundRobinOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa2, Size: 0x1]
	bool bODSCapture;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa2, Size: 0x1]
	bool bMeshStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa3, Size: 0x1]
	float WireframeCullThreshold;//[Offset: 0xa4, Size: 0x4]
	bool bEnableRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	bool bEnableRayTracingTextureLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1]
	bool bSupportStationarySkylight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8, Size: 0x1]
	bool bSupportLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa8, Size: 0x1]
	bool bSupportPointLightWholeSceneShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa8, Size: 0x1]
	bool bSupportAtmosphericFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa8, Size: 0x1]
	bool bSupportSkyAtmosphere;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa8, Size: 0x1]
	bool bSupportSkyAtmosphereAffectsHeightFog;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa8, Size: 0x1]
	bool bSupportSkinCacheShaders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9, Size: 0x1]
	enum DefaultSkinCacheBehavior;//[Offset: 0xaa, Size: 0x1]
	float SkinCacheSceneMemoryLimitInMB;//[Offset: 0xac, Size: 0x4]
	bool bMobileEnableStaticAndCSMShadowReceivers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bMobileEnableMovableLightCSMShaderCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bMobileAllowDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bMobileAllowMovableDirectionalLights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	uint32 MobileNumDynamicPointLights;//[Offset: 0xb4, Size: 0x4]
	bool bMobileDynamicPointLightsUseStaticBranch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1]
	bool bMobileAllowMovableSpotlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1]
	bool bMobileAllowMovableSpotlightShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 0x1]
	bool bSupport16BitBoneIndex;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb8, Size: 0x1]
	bool bGPUSkinLimit2BoneInfluences;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb8, Size: 0x1]
	bool bSupportDepthOnlyIndexBuffers;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb8, Size: 0x1]
	bool bSupportReversedIndexBuffers;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb8, Size: 0x1]
	bool bLPV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb8, Size: 0x1]
	bool bMobileAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb9, Size: 0x1]
	bool bUseUnlimitedBoneInfluences;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb9, Size: 0x1]
	int UnlimitedBonInfluencesThreshold;//[Offset: 0xbc, Size: 0x4]
	byte MobilePlanarReflectionMode;//[Offset: 0xc0, Size: 0x1]
	PerPlatformBool bStreamSkeletalMeshLODs;//[Offset: 0xc1, Size: 0x1]
	PerPlatformBool bDiscardSkeletalMeshOptionalLODs;//[Offset: 0xc2, Size: 0x1]
	SoftObjectPath VisualizeCalibrationColorMaterialPath;//[Offset: 0xc8, Size: 0x18]
	SoftObjectPath VisualizeCalibrationCustomMaterialPath;//[Offset: 0xe0, Size: 0x18]
	SoftObjectPath VisualizeCalibrationGrayscaleMaterialPath;//[Offset: 0xf8, Size: 0x18]
	bool bMobileCustomCSM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
	byte MobileCustomCSMDirectionalLightShadowBiasMethod;//[Offset: 0x111, Size: 0x1]
	bool bMobileCustomIBL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x112, Size: 0x1]
	byte MobileCustomIBLSkyNormalizationMethod;//[Offset: 0x113, Size: 0x1]

--------------------------------
Class: RendererOverrideSettings.DeveloperSettings.Object
	bool bSupportAllShaderPermutations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bForceRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: ReplayNetConnection.NetConnection.Player.Object

--------------------------------
Class: ReplaySubsystem.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: ReplicationConnectionDriver.Object

--------------------------------
Class: Rig.Object
	TransformBase[] TransformBases;//[Offset: 0x30, Size: 0x10]
	Node[] Nodes;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TransformBase
	FName Node;//[Offset: 0x0, Size: 0x8]
	TransformBaseConstraint Constraints;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TransformBaseConstraint
	RigTransformConstraint[] TransformConstraints;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RigTransformConstraint
	byte TranformType;//[Offset: 0x0, Size: 0x1]
	FName ParentSpace;//[Offset: 0x4, Size: 0x8]
	float Weight;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Node
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName ParentName;//[Offset: 0x8, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]
	FString DisplayName;//[Offset: 0x40, Size: 0x10]
	bool bAdvanced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: RotatingMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationRate;//[Offset: 0xf4, Size: 0xc]
	Vector PivotTranslation;//[Offset: 0x100, Size: 0xc]
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10c, Size: 0x1]

--------------------------------
Class: RuntimeOptionsBase.Object

--------------------------------
Class: RuntimeVirtualTextureComponent.SceneComponent.ActorComponent.Object
	Actor* BoundsAlignActor;//[Offset: 0x208, Size: 0x28]
	bool bSetBoundsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool bSnapBoundsToLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x238, Size: 0x8]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	uint32 ScalabilityGroup;//[Offset: 0x244, Size: 0x4]
	bool bHidePrimitives;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	VirtualTextureBuilder* StreamingTexture;//[Offset: 0x250, Size: 0x8]
	int StreamLowMips;//[Offset: 0x258, Size: 0x4]
	bool bBuildStreamingMipsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	bool bUseStreamingLowMipsInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 0x1]
	bool bBuildDebugStreamingMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f, Size: 0x1]
	void Invalidate(out const BoxSphereBounds WorldBounds);// 0x70f5e3fee041

--------------------------------
Class: VirtualTextureBuilder.Object
	VirtualTexture2D* Texture;//[Offset: 0x28, Size: 0x8]
	uint64 BuildHash;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: VirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0x108, Size: 0xc]
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 0x1]

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4]
	int TileBorderSize;//[Offset: 0x4, Size: 0x4]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: RuntimeVirtualTextureVolume.Actor.Object
	RuntimeVirtualTextureComponent* VirtualTextureComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: RVOAvoidanceInterface.Interface.Object

--------------------------------
Class: Scene.Object

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x2f0, Size: 0x8]
	void OnInterpToggle(bool bEnable);// 0x70f6e3fee041

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2d0, Size: 0x1]
	float FOVAngle;//[Offset: 0x2d4, Size: 0x4]
	float OrthoWidth;//[Offset: 0x2d8, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2e0, Size: 0x8]
	byte CompositeMode;//[Offset: 0x2e8, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2f0, Size: 0x610]
	bool bPostProcessSettingsBlendWithWorldPPV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x900, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x904, Size: 0x4]
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x908, Size: 0x1]
	float CustomNearClippingPlane;//[Offset: 0x90c, Size: 0x4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0x920, Size: 0x40]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960, Size: 0x1]
	Vector ClipPlaneBase;//[Offset: 0x964, Size: 0xc]
	Vector ClipPlaneNormal;//[Offset: 0x970, Size: 0xc]
	bool bForceDisableMobileMSAA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97c, Size: 0x1]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x97d, Size: 0x1]
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x97d, Size: 0x1]
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97e, Size: 0x1]
	void CaptureScene();// 0x5061e3fee041
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x5060e3fee041

--------------------------------
Class: SceneCaptureComponentCube.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	TextureRenderTargetCube* TextureTarget;//[Offset: 0x2d0, Size: 0x8]
	bool bCaptureRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	TextureRenderTargetCube* TextureTargetLeft;//[Offset: 0x2e0, Size: 0x8]
	TextureRenderTargetCube* TextureTargetRight;//[Offset: 0x2e8, Size: 0x8]
	TextureRenderTarget2D* TextureTargetODS;//[Offset: 0x2f0, Size: 0x8]
	float IPD;//[Offset: 0x2f8, Size: 0x4]
	void CaptureScene();// 0x70f7e3fee041

--------------------------------
Class: TextureRenderTargetCube.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe8, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xec, Size: 0x10]
	byte OverrideFormat;//[Offset: 0xfc, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfd, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfd, Size: 0x1]

--------------------------------
Class: SceneCaptureCube.SceneCapture.Actor.Object
	SceneCaptureComponentCube* CaptureComponentCube;//[Offset: 0x2f0, Size: 0x8]
	void OnInterpToggle(bool bEnable);// 0x70f8e3fee041

--------------------------------
Class: SceneSOCVolume.Volume.Brush.Actor.Object
	SceneSOCSettings Settings;//[Offset: 0x318, Size: 0x2]

--------------------------------
Class: SceneSOCSettings
	bool bUseLandscapeAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMeshAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: Selection.Object

--------------------------------
Class: ShadowCaptureComponent.SceneComponent.ActorComponent.Object
	uint32 CaptureLayerMask;//[Offset: 0x204, Size: 0x4]
	TextureRenderTargetDepth* RenderTarget;//[Offset: 0x208, Size: 0x8]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	float CaptureExtent;//[Offset: 0x214, Size: 0x4]
	float CaptureMaxDepth;//[Offset: 0x218, Size: 0x4]
	float ShadowBias;//[Offset: 0x21c, Size: 0x4]
	float ShadowSlopeBias;//[Offset: 0x220, Size: 0x4]
	bool bCaptureBehind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1]
	bool bEnableCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225, Size: 0x1]
	float RefreshAreaThreshold;//[Offset: 0x228, Size: 0x4]
	int RefreshFramesThreshold;//[Offset: 0x22c, Size: 0x4]
	Matrix WorldToShadowMatrix;//[Offset: 0x240, Size: 0x40]
	Vector PreShadowTranslation;//[Offset: 0x280, Size: 0xc]
	Matrix TranslatedLightToWorld;//[Offset: 0x290, Size: 0x40]
	uint16 ForceRefreshFramesCountdown;//[Offset: 0x2d0, Size: 0x2]
	delegate OnShadowCaptureMatrixUpdated_Dynamic;//[Offset: 0x2d8, Size: 0x10]
	void UpdateCaptureThisFrame();// 0x141de3fee041
	void SetWorldToShadowMatrixToMPC(Object* WorldContextObject, MaterialParameterCollection* MPC, FName Row0Name, FName Row1Name, FName Row2Name, FName Row3Name, Vector Offset);// 0x141ce3fee041
	void SetWorldToShadowMatrixToMID(MaterialInstanceDynamic* Mid, FName Row0Name, FName Row1Name, FName Row2Name, FName Row3Name, Vector Offset);// 0x141be3fee041
	void SetShadowSlopeBias(float NewValue);// 0x141ae3fee041
	void SetShadowBias(float NewValue);// 0x1419e3fee041
	void SetRefreshFramesThreshold(int NewValue);// 0x1418e3fee041
	void SetRefreshAreaThreshold(float NewValue);// 0x1417e3fee041
	void SetEnableCaching(bool NewValue);// 0x1416e3fee041
	void SetCaptureMaxDepth(float NewValue);// 0x1415e3fee041
	void SetCaptureExtent(float NewValue);// 0x1414e3fee041
	void SetCaptureBehind(bool NewValue);// 0x1413e3fee041
	void OnShadowCaptureUpdated_Dynamic__DelegateSignature(Matrix NewMatrix);// 0x1412e3fee041
	Matrix GetCurrentWorldToShadowMatrix();// 0x1411e3fee041

--------------------------------
Class: TextureRenderTargetDepth.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe8, Size: 0x4]
	int SizeY;//[Offset: 0xec, Size: 0x4]
	float ClearDepth;//[Offset: 0xf0, Size: 0x4]
	byte AddressX;//[Offset: 0xf4, Size: 0x1]
	byte AddressY;//[Offset: 0xf5, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf6, Size: 0x1]

--------------------------------
Class: ShadowCapture.Actor.Object
	ShadowCaptureComponent* Component;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: ShadowCaptureLayerProfile.DeveloperSettings.Object
	FName[] LayerNames;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ShadowMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	byte ShadowmapFlags;//[Offset: 0x108, Size: 0x1]

--------------------------------
Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8, Size: 0x1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x2f0, Size: 0x8]
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x2f8, Size: 0x8]
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x300, Size: 0x8]
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x308, Size: 0x8]
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x310, Size: 0x8]
	void OnRep_ReplicatedPhysAsset();// 0x7109e3fee041
	void OnRep_ReplicatedMesh();// 0x7108e3fee041
	void OnRep_ReplicatedMaterial1();// 0x7107e3fee041
	void OnRep_ReplicatedMaterial0();// 0x7106e3fee041

--------------------------------
Class: SkeletalMeshEditorData.Object

--------------------------------
Class: SkeletalMeshSimplificationSettings.DeveloperSettings.Object
	FName SkeletalMeshReductionModuleName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SkyAtmosphereComponent.SceneComponent.ActorComponent.Object
	enum TransformMode;//[Offset: 0x202, Size: 0x1]
	float BottomRadius;//[Offset: 0x204, Size: 0x4]
	Color GroundAlbedo;//[Offset: 0x208, Size: 0x4]
	float AtmosphereHeight;//[Offset: 0x20c, Size: 0x4]
	float MultiScatteringFactor;//[Offset: 0x210, Size: 0x4]
	float TraceSampleCountScale;//[Offset: 0x214, Size: 0x4]
	float RayleighScatteringScale;//[Offset: 0x218, Size: 0x4]
	LinearColor RayleighScattering;//[Offset: 0x21c, Size: 0x10]
	float RayleighExponentialDistribution;//[Offset: 0x22c, Size: 0x4]
	float MieScatteringScale;//[Offset: 0x230, Size: 0x4]
	LinearColor MieScattering;//[Offset: 0x234, Size: 0x10]
	float MieAbsorptionScale;//[Offset: 0x244, Size: 0x4]
	LinearColor MieAbsorption;//[Offset: 0x248, Size: 0x10]
	float MieAnisotropy;//[Offset: 0x258, Size: 0x4]
	float MieExponentialDistribution;//[Offset: 0x25c, Size: 0x4]
	float OtherAbsorptionScale;//[Offset: 0x260, Size: 0x4]
	LinearColor OtherAbsorption;//[Offset: 0x264, Size: 0x10]
	TentDistribution OtherTentDistribution;//[Offset: 0x274, Size: 0xc]
	LinearColor ExtraSceneLightTransmittance;//[Offset: 0x280, Size: 0x10]
	bool bDisableSceneColorModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	bool bSkyColorFixEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]
	LinearColor SkyLuminanceFactor;//[Offset: 0x294, Size: 0x10]
	float AerialPespectiveViewDistanceScale;//[Offset: 0x2a4, Size: 0x4]
	float HeightFogContribution;//[Offset: 0x2a8, Size: 0x4]
	float TransmittanceMinLightElevationAngle;//[Offset: 0x2ac, Size: 0x4]
	float AerialPerspectiveStartDepth;//[Offset: 0x2b0, Size: 0x4]
	Guid bStaticLightingBuiltGUID;//[Offset: 0x2dc, Size: 0x10]
	void SetSkyLuminanceFactor(LinearColor NewValue);// 0x711de3fee041
	void SetSkyColorFixEnabled(bool NewValue);// 0x711ce3fee041
	void SetRayleighScatteringScale(float NewValue);// 0x711be3fee041
	void SetRayleighScattering(LinearColor NewValue);// 0x711ae3fee041
	void SetRayleighExponentialDistribution(float NewValue);// 0x7119e3fee041
	void SetOtherAbsorptionScale(float NewValue);// 0x7118e3fee041
	void SetOtherAbsorption(LinearColor NewValue);// 0x7117e3fee041
	void SetMieScatteringScale(float NewValue);// 0x7116e3fee041
	void SetMieScattering(LinearColor NewValue);// 0x7115e3fee041
	void SetMieExponentialDistribution(float NewValue);// 0x7114e3fee041
	void SetMieAnisotropy(float NewValue);// 0x7113e3fee041
	void SetMieAbsorptionScale(float NewValue);// 0x7112e3fee041
	void SetMieAbsorption(LinearColor NewValue);// 0x7111e3fee041
	void SetHeightFogContribution(float NewValue);// 0x7110e3fee041
	void SetExtraSceneLightTransmittance(LinearColor NewValue);// 0x710fe3fee041
	void SetDisableSceneColorModulation(bool NewValue);// 0x710ee3fee041
	void SetAerialPespectiveViewDistanceScale(float NewValue);// 0x710de3fee041
	void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, out const Vector LightDirection);// 0x710ce3fee041

--------------------------------
Class: TentDistribution
	float TipAltitude;//[Offset: 0x0, Size: 0x4]
	float TipValue;//[Offset: 0x4, Size: 0x4]
	float Width;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SkyAtmosphere.Info.Actor.Object
	SkyAtmosphereComponent* SkyAtmosphereComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x2e0, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]
	void OnRep_bEnabled();// 0x667ae3fee041

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x90]

--------------------------------
Class: SlateTextureAtlasInterface.Interface.Object

--------------------------------
Class: SmokeTestCommandlet.Commandlet.Object

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bPrimeOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b8, Size: 0x1]
	SoundNode* FirstNode;//[Offset: 0x1c0, Size: 0x8]
	float VolumeMultiplier;//[Offset: 0x1c8, Size: 0x4]
	float PitchMultiplier;//[Offset: 0x1cc, Size: 0x4]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x1d0, Size: 0x3a0]
	float SubtitlePriority;//[Offset: 0x570, Size: 0x4]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x578, Size: 0x1]
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x578, Size: 0x1]
	int CookedQualityIndex;//[Offset: 0x57c, Size: 0x4]
	bool bHasPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x580, Size: 0x1]

--------------------------------
Class: SoundNode.Object
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundGroups.Object
	SoundGroup[] SoundGroupProfiles;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundGroup
	byte SoundGroup;//[Offset: 0x0, Size: 0x1]
	FString DisplayName;//[Offset: 0x8, Size: 0x10]
	bool bAlwaysDecompressOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	float DecompressedDuration;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SoundNodeAssetReferencer.SoundNode.Object

--------------------------------
Class: SoundNodeAttenuation.SoundNode.Object
	SoundAttenuation* AttenuationSettings;//[Offset: 0x48, Size: 0x8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x50, Size: 0x3a0]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 0x1]

--------------------------------
Class: SoundNodeBranch.SoundNode.Object
	FName BoolParameterName;//[Offset: 0x44, Size: 0x8]

--------------------------------
Class: SoundNodeConcatenator.SoundNode.Object
	float[] InputVolume;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SoundNodeDelay.SoundNode.Object
	float DelayMin;//[Offset: 0x44, Size: 0x4]
	float DelayMax;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: SoundNodeDialoguePlayer.SoundNode.Object
	DialogueWaveParameter DialogueWaveParameter;//[Offset: 0x48, Size: 0x20]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: DialogueWaveParameter
	DialogueWave* DialogueWave;//[Offset: 0x0, Size: 0x8]
	DialogueContext Context;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: SoundNodeDistanceCrossFade.SoundNode.Object
	DistanceDatum[] CrossFadeInput;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: DistanceDatum
	float FadeInDistanceStart;//[Offset: 0x0, Size: 0x4]
	float FadeInDistanceEnd;//[Offset: 0x4, Size: 0x4]
	float FadeOutDistanceStart;//[Offset: 0x8, Size: 0x4]
	float FadeOutDistanceEnd;//[Offset: 0xc, Size: 0x4]
	float Volume;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundNodeDoppler.SoundNode.Object
	float DopplerIntensity;//[Offset: 0x44, Size: 0x4]
	bool bUseSmoothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float SmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: SoundNodeEnveloper.SoundNode.Object
	float LoopStart;//[Offset: 0x44, Size: 0x4]
	float LoopEnd;//[Offset: 0x48, Size: 0x4]
	float DurationAfterLoop;//[Offset: 0x4c, Size: 0x4]
	int LoopCount;//[Offset: 0x50, Size: 0x4]
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	DistributionFloatConstantCurve* VolumeInterpCurve;//[Offset: 0x58, Size: 0x8]
	DistributionFloatConstantCurve* PitchInterpCurve;//[Offset: 0x60, Size: 0x8]
	RuntimeFloatCurve VolumeCurve;//[Offset: 0x68, Size: 0x88]
	RuntimeFloatCurve PitchCurve;//[Offset: 0xf0, Size: 0x88]
	float PitchMin;//[Offset: 0x178, Size: 0x4]
	float PitchMax;//[Offset: 0x17c, Size: 0x4]
	float VolumeMin;//[Offset: 0x180, Size: 0x4]
	float VolumeMax;//[Offset: 0x184, Size: 0x4]

--------------------------------
Class: SoundNodeGroupControl.SoundNode.Object
	int[] GroupSizes;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SoundNodeLooping.SoundNode.Object
	int LoopCount;//[Offset: 0x44, Size: 0x4]
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: SoundNodeMature.SoundNode.Object

--------------------------------
Class: SoundNodeMixer.SoundNode.Object
	float[] InputVolume;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SoundNodeModulator.SoundNode.Object
	float PitchMin;//[Offset: 0x44, Size: 0x4]
	float PitchMax;//[Offset: 0x48, Size: 0x4]
	float VolumeMin;//[Offset: 0x4c, Size: 0x4]
	float VolumeMax;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: SoundNodeModulatorContinuous.SoundNode.Object
	ModulatorContinuousParams PitchModulationParams;//[Offset: 0x44, Size: 0x20]
	ModulatorContinuousParams VolumeModulationParams;//[Offset: 0x64, Size: 0x20]

--------------------------------
Class: ModulatorContinuousParams
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	float Default;//[Offset: 0x8, Size: 0x4]
	float MinInput;//[Offset: 0xc, Size: 0x4]
	float MaxInput;//[Offset: 0x10, Size: 0x4]
	float MinOutput;//[Offset: 0x14, Size: 0x4]
	float MaxOutput;//[Offset: 0x18, Size: 0x4]
	byte ParamMode;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: SoundNodeOscillator.SoundNode.Object
	bool bModulateVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]
	bool bModulatePitch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1]
	float AmplitudeMin;//[Offset: 0x44, Size: 0x4]
	float AmplitudeMax;//[Offset: 0x48, Size: 0x4]
	float FrequencyMin;//[Offset: 0x4c, Size: 0x4]
	float FrequencyMax;//[Offset: 0x50, Size: 0x4]
	float OffsetMin;//[Offset: 0x54, Size: 0x4]
	float OffsetMax;//[Offset: 0x58, Size: 0x4]
	float CenterMin;//[Offset: 0x5c, Size: 0x4]
	float CenterMax;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: SoundNodeParamCrossFade.SoundNodeDistanceCrossFade.SoundNode.Object
	FName ParamName;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: SoundNodeQualityLevel.SoundNode.Object
	int CookedQualityLevelIndex;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: SoundNodeRandom.SoundNode.Object
	float[] Weights;//[Offset: 0x48, Size: 0x10]
	bool[] HasBeenUsed;//[Offset: 0x58, Size: 0x10]
	int NumRandomUsed;//[Offset: 0x68, Size: 0x4]
	int PreselectAtLevelLoad;//[Offset: 0x6c, Size: 0x4]
	bool bShouldExcludeFromBranchCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool bSoundCueExcludedFromBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]
	bool bRandomizeWithoutReplacement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: SoundNodeSoundClass.SoundNode.Object
	SoundClass* SoundClassOverride;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SoundNodeSwitch.SoundNode.Object
	FName IntParameterName;//[Offset: 0x44, Size: 0x8]

--------------------------------
Class: SoundNodeWaveParam.SoundNode.Object
	FName WaveParameterName;//[Offset: 0x44, Size: 0x8]

--------------------------------
Class: SoundNodeWavePlayer.SoundNodeAssetReferencer.SoundNode.Object
	SoundWave* SoundWaveAssetPtr;//[Offset: 0x48, Size: 0x28]
	SoundWave* SoundWave;//[Offset: 0x70, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: SoundfieldSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	FName SoundfieldEncodingFormat;//[Offset: 0x40, Size: 0x8]
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x48, Size: 0x8]
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x50, Size: 0x10]
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: SoundfieldEffectBase.Object
	SoundfieldEffectSettingsBase* Settings;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SoundfieldEffectSettingsBase.Object

--------------------------------
Class: EndpointSubmix.SoundSubmixBase.Object
	FName EndpointType;//[Offset: 0x38, Size: 0x8]
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x40, Size: 0x8]
	AudioEndpointSettingsBase* EndpointSettings;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: AudioEndpointSettingsBase.Object

--------------------------------
Class: SoundfieldEndpointSubmix.SoundSubmixBase.Object
	FName SoundfieldEndpointType;//[Offset: 0x38, Size: 0x8]
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x40, Size: 0x8]
	SoundfieldEndpointSettingsBase* EndpointSettings;//[Offset: 0x48, Size: 0x8]
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x50, Size: 0x8]
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x58, Size: 0x8]
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: SoundfieldEndpointSettingsBase.Object

--------------------------------
Class: SoundWaveProcedural.SoundWave.SoundBase.Object

--------------------------------
Class: SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1]

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x2e8, Size: 0x8]

--------------------------------
Class: SphereReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadius;//[Offset: 0x288, Size: 0x4]
	float CaptureDistanceScale;//[Offset: 0x28c, Size: 0x4]
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x290, Size: 0x8]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x5b0, Size: 0x70]
	InterpCurveVector SplineInfo;//[Offset: 0x620, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x638, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x650, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x668, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x684, Size: 0x4]
	float Duration;//[Offset: 0x688, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68e, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68f, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x692, Size: 0x1]
	float LoopPosition;//[Offset: 0x694, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x698, Size: 0xc]
	void UpdateSpline();// 0x5233e3fee041
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x5232e3fee041
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x5231e3fee041
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x5230e3fee041
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x522fe3fee041
	void SetTangentColor(out const LinearColor TangentColor);// 0x522ee3fee041
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x522de3fee041
	void SetSplineWorldPoints(out const Vector[] Points);// 0x522ce3fee041
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x522be3fee041
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x522ae3fee041
	void SetSplineLocalPoints(out const Vector[] Points);// 0x5229e3fee041
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x5228e3fee041
	void SetScaleAtSplinePoint(int PointIndex, out const Vector InScaleVector, bool bUpdateSpline);// 0x5227e3fee041
	void SetRotationAtSplinePoint(int PointIndex, out const Rotator InRotation, byte CoordinateSpace, bool bUpdateSpline);// 0x5226e3fee041
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x5225e3fee041
	void SetDrawDebug(bool bShow);// 0x5224e3fee041
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x5223e3fee041
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x5222e3fee041
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x5221e3fee041
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x5220e3fee041
	bool IsClosedLoop();// 0x521fe3fee041
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x521ee3fee041
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x521de3fee041
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x521ce3fee041
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x521be3fee041
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x521ae3fee041
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x5219e3fee041
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x5218e3fee041
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x5217e3fee041
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x5216e3fee041
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x5215e3fee041
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x5214e3fee041
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x5213e3fee041
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x5212e3fee041
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x5211e3fee041
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x5210e3fee041
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x520fe3fee041
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x520ee3fee041
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x520de3fee041
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x520ce3fee041
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x520be3fee041
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x520ae3fee041
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x5209e3fee041
	byte GetSplinePointType(int PointIndex);// 0x5208e3fee041
	float GetSplineLength();// 0x5207e3fee041
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x5206e3fee041
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x5205e3fee041
	Vector GetScaleAtSplineInputKey(float InKey);// 0x5204e3fee041
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x5203e3fee041
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x5202e3fee041
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x5201e3fee041
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x5200e3fee041
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x51ffe3fee041
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x51fee3fee041
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x51fde3fee041
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x51fce3fee041
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x51fbe3fee041
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x51fae3fee041
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x51f9e3fee041
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x51f8e3fee041
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x51f7e3fee041
	int GetNumberOfSplineSegments();// 0x51f6e3fee041
	int GetNumberOfSplinePoints();// 0x51f5e3fee041
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x51f4e3fee041
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x51f3e3fee041
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x51f2e3fee041
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x51f1e3fee041
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x51f0e3fee041
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x51efe3fee041
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x51eee3fee041
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x51ede3fee041
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x51ece3fee041
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x51ebe3fee041
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x51eae3fee041
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x51e9e3fee041
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x51e8e3fee041
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x51e7e3fee041
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x51e6e3fee041
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x51e5e3fee041
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x51e4e3fee041
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x51e3e3fee041
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x51e2e3fee041
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x51e1e3fee041
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x51e0e3fee041
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x51dfe3fee041
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x51dee3fee041
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x51dde3fee041
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x51dce3fee041
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x51dbe3fee041
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x51dae3fee041
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x51d9e3fee041
	void ClearSplinePoints(bool bUpdateSpline);// 0x51d8e3fee041
	void AddSplineWorldPoint(out const Vector position);// 0x51d7e3fee041
	void AddSplinePointAtIndex(out const Vector position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x51d6e3fee041
	void AddSplinePoint(out const Vector position, byte CoordinateSpace, bool bUpdateSpline);// 0x51d5e3fee041
	void AddSplineLocalPoint(out const Vector position);// 0x51d4e3fee041
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x51d3e3fee041
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x51d2e3fee041

--------------------------------
Class: SplineCurves
	InterpCurveVector position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8]
	uint32 Version;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SplineMeshActor.Actor.Object
	SplineMeshComponent* SplineMeshComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x660, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x6b8, Size: 0xc]
	float SplineBoundaryMin;//[Offset: 0x6c4, Size: 0x4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x6c8, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x6d8, Size: 0x8]
	float SplineBoundaryMax;//[Offset: 0x6e0, Size: 0x4]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e4, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6e4, Size: 0x1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6e4, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x6e5, Size: 0x1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x6e8, Size: 0x4]
	void UpdateMesh();// 0x7151e3fee041
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x7150e3fee041
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x714fe3fee041
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x714ee3fee041
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x714de3fee041
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x714ce3fee041
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x714be3fee041
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x714ae3fee041
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x7149e3fee041
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x7148e3fee041
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x7147e3fee041
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x7146e3fee041
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x7145e3fee041
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x7144e3fee041
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x7143e3fee041
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x7142e3fee041
	Vector GetStartTangent();// 0x7141e3fee041
	Vector2D GetStartScale();// 0x7140e3fee041
	float GetStartRoll();// 0x713fe3fee041
	Vector GetStartPosition();// 0x713ee3fee041
	Vector2D GetStartOffset();// 0x713de3fee041
	Vector GetSplineUpDir();// 0x713ce3fee041
	byte GetForwardAxis();// 0x713be3fee041
	Vector GetEndTangent();// 0x713ae3fee041
	Vector2D GetEndScale();// 0x7139e3fee041
	float GetEndRoll();// 0x7138e3fee041
	Vector GetEndPosition();// 0x7137e3fee041
	Vector2D GetEndOffset();// 0x7136e3fee041
	float GetBoundaryMin();// 0x7135e3fee041
	float GetBoundaryMax();// 0x7134e3fee041

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x38, Size: 0x8]
	Vector EndTangent;//[Offset: 0x40, Size: 0xc]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x204, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x208, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x214, Size: 0xc]
	float ProbeSize;//[Offset: 0x220, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x224, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x225, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x225, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x225, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x225, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x225, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x225, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x225, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x225, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x226, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x228, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x22c, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x230, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x234, Size: 0x4]
	bool IsCollisionFixApplied();// 0x7157e3fee041
	Vector GetUnfixedCameraPosition();// 0x7156e3fee041
	Rotator GetTargetRotation();// 0x7155e3fee041

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2e0, Size: 0x8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x2e9, Size: 0x1]
	void SetMobility(byte InMobility);// 0x4f61e3fee041

--------------------------------
Class: StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeQuad.StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeCylinder.StereoLayerShape.Object
	float Radius;//[Offset: 0x28, Size: 0x4]
	float OverlayArc;//[Offset: 0x2c, Size: 0x4]
	int Height;//[Offset: 0x30, Size: 0x4]
	void SetRadius(float InRadius);// 0x7168e3fee041
	void SetOverlayArc(float InOverlayArc);// 0x7167e3fee041
	void SetHeight(int InHeight);// 0x7166e3fee041

--------------------------------
Class: StereoLayerShapeCubemap.StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeEquirect.StereoLayerShape.Object
	Box2D LeftUVRect;//[Offset: 0x28, Size: 0x14]
	Box2D RightUVRect;//[Offset: 0x3c, Size: 0x14]
	Vector2D LeftScale;//[Offset: 0x50, Size: 0x8]
	Vector2D RightScale;//[Offset: 0x58, Size: 0x8]
	Vector2D LeftBias;//[Offset: 0x60, Size: 0x8]
	Vector2D RightBias;//[Offset: 0x68, Size: 0x8]
	void SetEquirectProps(EquirectProps InScaleBiases);// 0x7169e3fee041

--------------------------------
Class: EquirectProps
	Box2D LeftUVRect;//[Offset: 0x0, Size: 0x14]
	Box2D RightUVRect;//[Offset: 0x14, Size: 0x14]
	Vector2D LeftScale;//[Offset: 0x28, Size: 0x8]
	Vector2D RightScale;//[Offset: 0x30, Size: 0x8]
	Vector2D LeftBias;//[Offset: 0x38, Size: 0x8]
	Vector2D RightBias;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: StereoLayerComponent.SceneComponent.ActorComponent.Object
	bool bLiveTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x202, Size: 0x1]
	bool bSupportsDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x202, Size: 0x1]
	bool bNoAlphaChannel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x202, Size: 0x1]
	Texture* Texture;//[Offset: 0x208, Size: 0x8]
	Texture* LeftTexture;//[Offset: 0x210, Size: 0x8]
	bool bQuadPreserveTextureRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	Vector2D QuadSize;//[Offset: 0x21c, Size: 0x8]
	Box2D UVRect;//[Offset: 0x224, Size: 0x14]
	float CylinderRadius;//[Offset: 0x238, Size: 0x4]
	float CylinderOverlayArc;//[Offset: 0x23c, Size: 0x4]
	int CylinderHeight;//[Offset: 0x240, Size: 0x4]
	EquirectProps EquirectProps;//[Offset: 0x244, Size: 0x48]
	byte StereoLayerType;//[Offset: 0x28c, Size: 0x1]
	byte StereoLayerShape;//[Offset: 0x28d, Size: 0x1]
	StereoLayerShape* Shape;//[Offset: 0x290, Size: 0x8]
	int Priority;//[Offset: 0x298, Size: 0x4]
	void SetUVRect(Box2D InUVRect);// 0x7175e3fee041
	void SetTexture(Texture* InTexture);// 0x7174e3fee041
	void SetQuadSize(Vector2D InQuadSize);// 0x7173e3fee041
	void SetPriority(int InPriority);// 0x7172e3fee041
	void SetLeftTexture(Texture* InTexture);// 0x7171e3fee041
	void SetEquirectProps(EquirectProps InScaleBiases);// 0x7170e3fee041
	void MarkTextureForUpdate();// 0x716fe3fee041
	Box2D GetUVRect();// 0x716ee3fee041
	Texture* GetTexture();// 0x716de3fee041
	Vector2D GetQuadSize();// 0x716ce3fee041
	int GetPriority();// 0x716be3fee041
	Texture* GetLeftTexture();// 0x716ae3fee041

--------------------------------
Class: StereoLayerFunctionLibrary.BlueprintFunctionLibrary.Object
	void ShowSplashScreen();// 0x7179e3fee041
	void SetSplashScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0x7178e3fee041
	void HideSplashScreen();// 0x7177e3fee041
	void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);// 0x7176e3fee041

--------------------------------
Class: StringTable.Object

--------------------------------
Class: SubsystemBlueprintLibrary.BlueprintFunctionLibrary.Object
	WorldSubsystem* GetWorldSubsystem(Object* ContextObject, class WorldSubsystem Class);// 0x717ee3fee041
	LocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(PlayerController* PlayerController, class LocalPlayerSubsystem Class);// 0x717de3fee041
	LocalPlayerSubsystem* GetLocalPlayerSubsystem(Object* ContextObject, class LocalPlayerSubsystem Class);// 0x717ce3fee041
	GameInstanceSubsystem* GetGameInstanceSubsystem(Object* ContextObject, class GameInstanceSubsystem Class);// 0x717be3fee041
	EngineSubsystem* GetEngineSubsystem(class EngineSubsystem Class);// 0x717ae3fee041

--------------------------------
Class: SystemTimeTimecodeProvider.TimecodeProvider.Object
	FrameRate FrameRate;//[Offset: 0x2c, Size: 0x8]
	bool bGenerateFullFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bUseHighPerformanceClock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]

--------------------------------
Class: TargetPoint.Actor.Object

--------------------------------
Class: TextPropertyTestObject.Object
	FText DefaultedText;//[Offset: 0x28, Size: 0x18]
	FText UndefaultedText;//[Offset: 0x40, Size: 0x18]
	FText TransientText;//[Offset: 0x58, Size: 0x18]

--------------------------------
Class: TextRenderActor.Actor.Object
	TextRenderComponent* TextRender;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x5b0, Size: 0x18]
	MaterialInterface* TextMaterial;//[Offset: 0x5c8, Size: 0x8]
	Font* Font;//[Offset: 0x5d0, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x5d8, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x5d9, Size: 0x1]
	Color TextRenderColor;//[Offset: 0x5dc, Size: 0x4]
	float XScale;//[Offset: 0x5e0, Size: 0x4]
	float YScale;//[Offset: 0x5e4, Size: 0x4]
	float WorldSize;//[Offset: 0x5e8, Size: 0x4]
	float InvDefaultSize;//[Offset: 0x5ec, Size: 0x4]
	float HorizSpacingAdjust;//[Offset: 0x5f0, Size: 0x4]
	float VertSpacingAdjust;//[Offset: 0x5f4, Size: 0x4]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f8, Size: 0x1]
	void SetYScale(float Value);// 0x718ce3fee041
	void SetXScale(float Value);// 0x718be3fee041
	void SetWorldSize(float Value);// 0x718ae3fee041
	void SetVertSpacingAdjust(float Value);// 0x7189e3fee041
	void SetVerticalAlignment(byte Value);// 0x7188e3fee041
	void SetTextRenderColor(Color Value);// 0x7187e3fee041
	void SetTextMaterial(MaterialInterface* Material);// 0x7186e3fee041
	void SetText(FString Value);// 0x7185e3fee041
	void SetHorizSpacingAdjust(float Value);// 0x7184e3fee041
	void SetHorizontalAlignment(byte Value);// 0x7183e3fee041
	void SetFont(Font* Value);// 0x7182e3fee041
	void K2_SetText(out const FText Value);// 0x7181e3fee041
	Vector GetTextWorldSize();// 0x7180e3fee041
	Vector GetTextLocalSize();// 0x717fe3fee041

--------------------------------
Class: Texture2DArray.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0x138, Size: 0x1]
	byte AddressY;//[Offset: 0x139, Size: 0x1]
	byte AddressZ;//[Offset: 0x13a, Size: 0x1]

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xe8, Size: 0x1]

--------------------------------
Class: TextureMipDataProviderFactory.AssetUserData.Object

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb8, Size: 0x98]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1]
	void Stop();// 0x71a3e3fee041
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x71a2e3fee041
	void SetTimelineLengthMode(byte NewLengthMode);// 0x71a1e3fee041
	void SetTimelineLength(float NewLength);// 0x71a0e3fee041
	void SetPlayRate(float NewRate);// 0x719fe3fee041
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x719ee3fee041
	void SetNewTime(float NewTime);// 0x719de3fee041
	void SetLooping(bool bNewLooping);// 0x719ce3fee041
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x719be3fee041
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x719ae3fee041
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x7199e3fee041
	void ReverseFromEnd();// 0x7198e3fee041
	void Reverse();// 0x7197e3fee041
	void PlayFromStart();// 0x7196e3fee041
	void Play();// 0x7195e3fee041
	void OnRep_Timeline();// 0x7194e3fee041
	bool IsReversing();// 0x7193e3fee041
	bool IsPlaying();// 0x7192e3fee041
	bool IsLooping();// 0x7191e3fee041
	float GetTimelineLength();// 0x7190e3fee041
	float GetPlayRate();// 0x718fe3fee041
	float GetPlaybackPosition();// 0x718ee3fee041
	bool GetIgnoreTimeDilation();// 0x718de3fee041

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: TriggerBase.Actor.Object
	ShapeComponent* CollisionComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: TriggerBox.TriggerBase.Actor.Object

--------------------------------
Class: TriggerCapsule.TriggerBase.Actor.Object

--------------------------------
Class: TriggerSphere.TriggerBase.Actor.Object

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: TwitterIntegrationBase.PlatformInterfaceBase.Object
	bool TwitterRequest(FString URL, out const FString[] ParamKeysAndValues, byte RequestMethod, int AccountIndex);// 0x71aae3fee041
	bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);// 0x71a9e3fee041
	void Init();// 0x71a8e3fee041
	int GetNumAccounts();// 0x71a7e3fee041
	FString GetAccountName(int AccountIndex);// 0x71a6e3fee041
	bool CanShowTweetUI();// 0x71a5e3fee041
	bool AuthorizeAccounts();// 0x71a4e3fee041

--------------------------------
Class: UserDefinedEnum.Enum.Field.Object
	<FName,FText> DisplayNameMap;//[Offset: 0x60, Size: 0x50]

--------------------------------
Class: UserDefinedStruct.ScriptStruct.Struct.Field.Object
	byte Status;//[Offset: 0xc0, Size: 0x1]
	Guid Guid;//[Offset: 0xc4, Size: 0x10]

--------------------------------
Class: UserInterfaceSettings.DeveloperSettings.Object
	enum RenderFocusRule;//[Offset: 0x38, Size: 0x1]
	<byte,HardwareCursorReference> HardwareCursors;//[Offset: 0x40, Size: 0x50]
	<byte,SoftClassPath> SoftwareCursors;//[Offset: 0x90, Size: 0x50]
	SoftClassPath DefaultCursor;//[Offset: 0xe0, Size: 0x18]
	SoftClassPath TextEditBeamCursor;//[Offset: 0xf8, Size: 0x18]
	SoftClassPath CrosshairsCursor;//[Offset: 0x110, Size: 0x18]
	SoftClassPath HandCursor;//[Offset: 0x128, Size: 0x18]
	SoftClassPath GrabHandCursor;//[Offset: 0x140, Size: 0x18]
	SoftClassPath GrabHandClosedCursor;//[Offset: 0x158, Size: 0x18]
	SoftClassPath SlashedCircleCursor;//[Offset: 0x170, Size: 0x18]
	float ApplicationScale;//[Offset: 0x188, Size: 0x4]
	enum UIScaleRule;//[Offset: 0x18c, Size: 0x1]
	SoftClassPath CustomScalingRuleClass;//[Offset: 0x190, Size: 0x18]
	RuntimeFloatCurve UIScaleCurve;//[Offset: 0x1a8, Size: 0x88]
	bool bAllowHighDPIInGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	IntPoint DesignScreenSize;//[Offset: 0x234, Size: 0x8]
	bool bLoadWidgetsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	Object*[] CursorClasses;//[Offset: 0x240, Size: 0x10]
	class Object* CustomScalingRuleClassInstance;//[Offset: 0x250, Size: 0x8]
	DPICustomScalingRule* CustomScalingRule;//[Offset: 0x258, Size: 0x8]

--------------------------------
Class: HardwareCursorReference
	FName CursorPath;//[Offset: 0x0, Size: 0x8]
	Vector2D HotSpot;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: VectorFieldAnimated.VectorField.Object
	Texture2D* Texture;//[Offset: 0x48, Size: 0x8]
	byte ConstructionOp;//[Offset: 0x50, Size: 0x1]
	int VolumeSizeX;//[Offset: 0x54, Size: 0x4]
	int VolumeSizeY;//[Offset: 0x58, Size: 0x4]
	int VolumeSizeZ;//[Offset: 0x5c, Size: 0x4]
	int SubImagesX;//[Offset: 0x60, Size: 0x4]
	int SubImagesY;//[Offset: 0x64, Size: 0x4]
	int FrameCount;//[Offset: 0x68, Size: 0x4]
	float FramesPerSecond;//[Offset: 0x6c, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	VectorFieldStatic* NoiseField;//[Offset: 0x78, Size: 0x8]
	float NoiseScale;//[Offset: 0x80, Size: 0x4]
	float NoiseMax;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: VectorFieldStatic.VectorField.Object
	int SizeX;//[Offset: 0x48, Size: 0x4]
	int SizeY;//[Offset: 0x4c, Size: 0x4]
	int SizeZ;//[Offset: 0x50, Size: 0x4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: VectorFieldComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VectorField* VectorField;//[Offset: 0x5b0, Size: 0x8]
	float Intensity;//[Offset: 0x5b8, Size: 0x4]
	float Tightness;//[Offset: 0x5bc, Size: 0x4]
	bool bPreviewVectorField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c0, Size: 0x1]
	void SetIntensity(float NewIntensity);// 0x71abe3fee041

--------------------------------
Class: VectorFieldVolume.Actor.Object
	VectorFieldComponent* VectorFieldComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: ViewportStatsSubsystem.WorldSubsystem.Subsystem.Object
	void RemoveDisplayDelegate(const int IndexToRemove);// 0x71aee3fee041
	void AddTimedDisplay(FText Text, LinearColor Color, float Duration);// 0x71ade3fee041
	int AddDisplayDelegate(out const delegate Delegate);// 0x71ace3fee041

--------------------------------
Class: VirtualTexture.Object

--------------------------------
Class: LightMapVirtualTexture.VirtualTexture.Object

--------------------------------
Class: VirtualTexturePoolConfig.Object
	int DefaultSizeInMegabyte;//[Offset: 0x28, Size: 0x4]
	VirtualTextureSpacePoolConfig[] Pools;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: VirtualTextureSpacePoolConfig
	int MinTileSize;//[Offset: 0x0, Size: 0x4]
	int MaxTileSize;//[Offset: 0x4, Size: 0x4]
	byte[] Formats;//[Offset: 0x8, Size: 0x10]
	int SizeInMegabyte;//[Offset: 0x18, Size: 0x4]
	bool bAllowSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	uint32 ScalabilityGroup;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: VisualLoggerAutomationTests.Object

--------------------------------
Class: VisualLoggerDebugSnapshotInterface.Interface.Object

--------------------------------
Class: VisualLoggerKismetLibrary.BlueprintFunctionLibrary.Object
	void RedirectVislog(Object* SourceOwner, Object* DestinationOwner);// 0x71b4e3fee041
	void LogText(Object* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog);// 0x71b3e3fee041
	void LogSegment(Object* WorldContextObject, const Vector SegmentStart, const Vector SegmentEnd, FString Text, LinearColor ObjectColor, const float Thickness, FName CategoryName, bool bAddToMessageLog);// 0x71b2e3fee041
	void LogLocation(Object* WorldContextObject, Vector Location, FString Text, LinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog);// 0x71b1e3fee041
	void LogBox(Object* WorldContextObject, Box BoxShape, FString Text, LinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog);// 0x71b0e3fee041
	void EnableRecording(bool bEnabled);// 0x71afe3fee041

--------------------------------
Class: VoiceChannel.Channel.Object

--------------------------------
Class: VOIPTalker.ActorComponent.Object
	VoiceSettings Settings;//[Offset: 0xb8, Size: 0x18]
	void RegisterWithPlayerState(PlayerState* OwningState);// 0x71b9e3fee041
	float GetVoiceLevel();// 0x71b8e3fee041
	VOIPTalker* CreateTalkerForPlayer(PlayerState* OwningState);// 0x71b7e3fee041
	void BPOnTalkingEnd();// 0x71b6e3fee041
	void BPOnTalkingBegin(AudioComponent* AudioComponent);// 0x71b5e3fee041

--------------------------------
Class: VoiceSettings
	SceneComponent* ComponentToAttachTo;//[Offset: 0x0, Size: 0x8]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x8, Size: 0x8]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: VOIPStatics.BlueprintFunctionLibrary.Object
	void SetMicThreshold(float InThreshold);// 0x71bae3fee041

--------------------------------
Class: VolumetricCloudComponent.SceneComponent.ActorComponent.Object
	float LayerBottomAltitude;//[Offset: 0x204, Size: 0x4]
	float LayerHeight;//[Offset: 0x208, Size: 0x4]
	float TracingStartMaxDistance;//[Offset: 0x20c, Size: 0x4]
	float TracingMaxDistance;//[Offset: 0x210, Size: 0x4]
	float PlanetRadius;//[Offset: 0x214, Size: 0x4]
	Color GroundAlbedo;//[Offset: 0x218, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x220, Size: 0x8]
	bool bUsePerSampleAtmosphericLightTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	float SkyLightCloudBottomOcclusion;//[Offset: 0x22c, Size: 0x4]
	float ViewSampleCountScale;//[Offset: 0x230, Size: 0x4]
	float ReflectionSampleCountScale;//[Offset: 0x234, Size: 0x4]
	float ShadowViewSampleCountScale;//[Offset: 0x238, Size: 0x4]
	float ShadowReflectionSampleCountScale;//[Offset: 0x23c, Size: 0x4]
	float ShadowTracingDistance;//[Offset: 0x240, Size: 0x4]
	void SetViewSampleCountScale(float NewValue);// 0x71c8e3fee041
	void SetTracingStartMaxDistance(float NewValue);// 0x71c7e3fee041
	void SetTracingMaxDistance(float NewValue);// 0x71c6e3fee041
	void SetSkyLightCloudBottomOcclusion(float NewValue);// 0x71c5e3fee041
	void SetShadowViewSampleCountScale(float NewValue);// 0x71c4e3fee041
	void SetShadowTracingDistance(float NewValue);// 0x71c3e3fee041
	void SetShadowReflectionSampleCountScale(float NewValue);// 0x71c2e3fee041
	void SetReflectionSampleCountScale(float NewValue);// 0x71c1e3fee041
	void SetPlanetRadius(float NewValue);// 0x71c0e3fee041
	void SetMaterial(MaterialInterface* NewValue);// 0x71bfe3fee041
	void SetLayerHeight(float NewValue);// 0x71bee3fee041
	void SetLayerBottomAltitude(float NewValue);// 0x71bde3fee041
	void SetGroundAlbedo(Color NewValue);// 0x71bce3fee041
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);// 0x71bbe3fee041

--------------------------------
Class: VolumetricCloud.Info.Actor.Object
	VolumetricCloudComponent* VolumetricCloudComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: VolumetricLightmapDensityVolume.Volume.Brush.Actor.Object
	Int32Interval AllowedMipLevelRange;//[Offset: 0x318, Size: 0x8]

--------------------------------
Class: Int32Interval
	int Min;//[Offset: 0x0, Size: 0x4]
	int Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WindDirectionalSource.Info.Actor.Object
	WindDirectionalSourceComponent* Component;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: WindDirectionalSourceComponent.SceneComponent.ActorComponent.Object
	float Strength;//[Offset: 0x204, Size: 0x4]
	float Speed;//[Offset: 0x208, Size: 0x4]
	float MinGustAmount;//[Offset: 0x20c, Size: 0x4]
	float MaxGustAmount;//[Offset: 0x210, Size: 0x4]
	float Radius;//[Offset: 0x214, Size: 0x4]
	bool bPointWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	void SetWindType(enum InNewType);// 0x71cee3fee041
	void SetStrength(float InNewStrength);// 0x71cde3fee041
	void SetSpeed(float InNewSpeed);// 0x71cce3fee041
	void SetRadius(float InNewRadius);// 0x71cbe3fee041
	void SetMinimumGustAmount(float InNewMinGust);// 0x71cae3fee041
	void SetMaximumGustAmount(float InNewMaxGust);// 0x71c9e3fee041

--------------------------------
Class: LandscapeInfoMap.Object

--------------------------------
Class: WorldCollisionManagerSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: HierarchicalLODSetup.Object
	HierarchicalSimplification[] HierarchicalLODSetup;//[Offset: 0x28, Size: 0x10]
	MaterialInterface* OverrideBaseMaterial;//[Offset: 0x38, Size: 0x28]

--------------------------------
Class: HierarchicalSimplification
	float TransitionScreenSize;//[Offset: 0x0, Size: 0x4]
	float OverrideDrawDistance;//[Offset: 0x4, Size: 0x4]
	bool bUseOverrideDrawDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bAllowSpecificExclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float MinExtentSizeSquared;//[Offset: 0xc, Size: 0x4]
	bool bSimplifyMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOnlyGenerateClustersForVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bReusePreviousLevelClusters;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	MeshProxySettings ProxySetting;//[Offset: 0x14, Size: 0xb0]
	MeshMergingSettings MergeSetting;//[Offset: 0xc4, Size: 0xa8]
	float DesiredBoundRadius;//[Offset: 0x16c, Size: 0x4]
	float DesiredFillingPercentage;//[Offset: 0x170, Size: 0x4]
	int MinNumberOfActorsToBuild;//[Offset: 0x174, Size: 0x4]

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 0x4]
	float VoxelSize;//[Offset: 0x4, Size: 0x4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x8, Size: 0x90]
	float MergeDistance;//[Offset: 0x98, Size: 0x4]
	Color UnresolvedGeometryColor;//[Offset: 0x9c, Size: 0x4]
	float MaxRayCastDist;//[Offset: 0xa0, Size: 0x4]
	float HardAngleThreshold;//[Offset: 0xa4, Size: 0x4]
	int LightMapResolution;//[Offset: 0xa8, Size: 0x4]
	byte NormalCalculationMethod;//[Offset: 0xac, Size: 0x1]
	byte LandscapeCullingPrecision;//[Offset: 0xad, Size: 0x1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xae, Size: 0x1]
	bool bOverrideVoxelSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xae, Size: 0x1]
	bool bOverrideTransferDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xae, Size: 0x1]
	bool bUseHardAngleThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xae, Size: 0x1]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xae, Size: 0x1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xae, Size: 0x1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xae, Size: 0x1]
	bool bAllowAdjacency;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xae, Size: 0x1]
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1]
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaf, Size: 0x1]
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xaf, Size: 0x1]
	bool bAllowVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xaf, Size: 0x1]
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xaf, Size: 0x1]

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 0x8]
	bool bDetermineTextureSizeByMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float DetermineTextureSizeScale;//[Offset: 0xc, Size: 0x4]
	float GutterSpace;//[Offset: 0x10, Size: 0x4]
	float MetallicConstant;//[Offset: 0x14, Size: 0x4]
	float RoughnessConstant;//[Offset: 0x18, Size: 0x4]
	float AnisotropyConstant;//[Offset: 0x1c, Size: 0x4]
	float SpecularConstant;//[Offset: 0x20, Size: 0x4]
	float OpacityConstant;//[Offset: 0x24, Size: 0x4]
	float OpacityMaskConstant;//[Offset: 0x28, Size: 0x4]
	float AmbientOcclusionConstant;//[Offset: 0x2c, Size: 0x4]
	byte TextureSizingType;//[Offset: 0x30, Size: 0x1]
	byte MaterialMergeType;//[Offset: 0x31, Size: 0x1]
	byte BlendMode;//[Offset: 0x32, Size: 0x1]
	bool bAllowTwoSidedMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33, Size: 0x1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33, Size: 0x1]
	bool bTangentMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33, Size: 0x1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33, Size: 0x1]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33, Size: 0x1]
	bool bAnisotropyMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33, Size: 0x1]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33, Size: 0x1]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33, Size: 0x1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 0x1]
	IntPoint DiffuseTextureSize;//[Offset: 0x38, Size: 0x8]
	IntPoint NormalTextureSize;//[Offset: 0x40, Size: 0x8]
	IntPoint TangentTextureSize;//[Offset: 0x48, Size: 0x8]
	IntPoint MetallicTextureSize;//[Offset: 0x50, Size: 0x8]
	IntPoint RoughnessTextureSize;//[Offset: 0x58, Size: 0x8]
	IntPoint AnisotropyTextureSize;//[Offset: 0x60, Size: 0x8]
	IntPoint SpecularTextureSize;//[Offset: 0x68, Size: 0x8]
	IntPoint EmissiveTextureSize;//[Offset: 0x70, Size: 0x8]
	IntPoint OpacityTextureSize;//[Offset: 0x78, Size: 0x8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80, Size: 0x8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: MeshMergingSettings
	int TargetLightMapResolution;//[Offset: 0x0, Size: 0x4]
	enum OutputUVs;//[Offset: 0x4, Size: 0x1]
	MaterialProxySettings MaterialSettings;//[Offset: 0xc, Size: 0x90]
	int GutterSize;//[Offset: 0x9c, Size: 0x4]
	int SpecificLOD;//[Offset: 0xa0, Size: 0x4]
	enum LODSelectionType;//[Offset: 0xa4, Size: 0x1]
	bool bGenerateLightMapUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa5, Size: 0x1]
	bool bComputedLightMapResolution;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa5, Size: 0x1]
	bool bPivotPointAtZero;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa5, Size: 0x1]
	bool bMergePhysicsData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa5, Size: 0x1]
	bool bMergeMaterials;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa5, Size: 0x1]
	bool bCreateMergedMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa5, Size: 0x1]
	bool bBakeVertexDataToMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa5, Size: 0x1]
	bool bUseVertexDataForBakingMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa5, Size: 0x1]
	bool bUseTextureBinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa6, Size: 0x1]
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa6, Size: 0x1]
	bool bMergeEquivalentMaterials;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa6, Size: 0x1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa6, Size: 0x1]
	bool bIncludeImposters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa6, Size: 0x1]
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa6, Size: 0x1]

--------------------------------
Class: DmgTypeBP_Environmental_C.DamageType.Object

--------------------------------
Class: AkAcousticPortal.Volume.Brush.Actor.Object
	enum InitialState;//[Offset: 0x318, Size: 0x1]
	float ObstructionRefreshInterval;//[Offset: 0x31c, Size: 0x4]
	byte ObstructionCollisionChannel;//[Offset: 0x320, Size: 0x1]
	void OpenPortal();// 0x308ee3fee041
	enum GetCurrentState();// 0x308de3fee041
	void ClosePortal();// 0x308ce3fee041

--------------------------------
Class: AkSettings.Object
	byte MaxSimultaneousReverbVolumes;//[Offset: 0x28, Size: 0x1]
	FilePath WwiseProjectPath;//[Offset: 0x30, Size: 0x10]
	DirectoryPath WwiseSoundDataFolder;//[Offset: 0x40, Size: 0x10]
	bool bAutoConnectToWAAPI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	byte DefaultOcclusionCollisionChannel;//[Offset: 0x51, Size: 0x1]
	<PhysicalMaterial*,AkGeometrySurfacePropertiesToMap> AkGeometryMap;//[Offset: 0x58, Size: 0x50]
	bool SplitSwitchContainerMedia;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool SplitMediaPerFolder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	bool UseEventBasedPackaging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 0x1]
	bool EnableAutomaticAssetSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab, Size: 0x1]
	FString CommandletCommitMessage;//[Offset: 0xb0, Size: 0x10]
	<FString,FString> UnrealCultureToWwiseCulture;//[Offset: 0xc0, Size: 0x50]
	bool AskedToUseNewAssetManagement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	bool bEnableMultiCoreRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	bool MigratedEnableMultiCoreRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1]
	bool FixupRedirectorsDuringMigration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x113, Size: 0x1]
	DirectoryPath WwiseWindowsInstallationPath;//[Offset: 0x118, Size: 0x10]
	FilePath WwiseMacInstallationPath;//[Offset: 0x128, Size: 0x10]

--------------------------------
Class: AkGeometrySurfacePropertiesToMap
	AkAcousticTexture* AcousticTexture;//[Offset: 0x0, Size: 0x28]
	float OcclusionValue;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: AkAcousticTexture.AkAudioType.Object

--------------------------------
Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 0x4]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AkPortalComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: AkAmbientSound.Actor.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x2e0, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x2e8, Size: 0x8]
	bool StopWhenOwnerIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	void StopAmbientSound();// 0x3090e3fee041
	void StartAmbientSound();// 0x308fe3fee041

--------------------------------
Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x58, Size: 0x50]
	AkAudioBank* RequiredBank;//[Offset: 0xa8, Size: 0x8]
	AkAudioBank* LastRequiredBank;//[Offset: 0xb0, Size: 0x8]
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb8, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0xc0, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	float MinimumDuration;//[Offset: 0xc8, Size: 0x4]
	float MaximumDuration;//[Offset: 0xcc, Size: 0x4]
	float GetMinimumDuration();// 0x3095e3fee041
	float GetMaximumDuration();// 0x3094e3fee041
	float GetMaxAttenuationRadius();// 0x3093e3fee041
	bool GetIsInfinite();// 0x3092e3fee041

--------------------------------
Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AkAssetData.Object
	uint32 CachedHash;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x58, Size: 0x50]
	<AkAudioEvent*> LinkedAkEvents;//[Offset: 0xa8, Size: 0x50]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xf8, Size: 0x8]

--------------------------------
Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x222, Size: 0x1]
	byte OcclusionCollisionChannel;//[Offset: 0x228, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x229, Size: 0x1]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x230, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x238, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x248, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x24c, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x250, Size: 0x4]
	float roomReverbAuxBusGain;//[Offset: 0x254, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x258, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x25c, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x260, Size: 0x4]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x268, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x26c, Size: 0x4]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	bool bUseSpatialAudioRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]
	<AkComponent*> Listeners;//[Offset: 0x330, Size: 0x50]
	<AkComponent*> Emitters;//[Offset: 0x380, Size: 0x50]
	AkRoomComponent* CurrentRoom;//[Offset: 0x3d0, Size: 0x8]
	AkLateReverbComponent* CurrentLateReverbComponent;//[Offset: 0x3d8, Size: 0x8]
	bool DynamicTickInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 0x1]
	bool AutoPostEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 0x1]
	bool UseFloorSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fe, Size: 0x1]
	int CurrentFloor;//[Offset: 0x400, Size: 0x4]
	byte TickIntervalInFrames;//[Offset: 0x448, Size: 0x1]
	float DistanceToListener;//[Offset: 0x44c, Size: 0x4]
	bool IsListeningToSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	VoicePlayingData CurrentSpeakingDialog;//[Offset: 0x458, Size: 0x28]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x30b0e3fee041
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x30afe3fee041
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x30aee3fee041
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x30ade3fee041
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0x30ace3fee041
	void SetOutputBusVolume(float BusVolume);// 0x30abe3fee041
	void SetListeners(out const AkComponent*[] Listeners);// 0x30aae3fee041
	void SetEarlyReflectionsVolume(float SendVolume);// 0x30a9e3fee041
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0x30a8e3fee041
	bool SetAttenuationScalingFactor(float Value);// 0x30a7e3fee041
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0x30a6e3fee041
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x30a5e3fee041
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x30a4e3fee041
	int PostAkEventByName(FString in_EventName);// 0x30a3e3fee041
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x30a2e3fee041
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x30a1e3fee041
	int PlayVoiceDialog(FString VoiceEventName, bool WaitUntilCurrentEnd, FString ExternalFileName, int RandomCount);// 0x30a0e3fee041
	void OnVoiceDialogEndCallback(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x309fe3fee041
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0x309ee3fee041
	AkRoomComponent* GetCurrentRoom();// 0x309de3fee041
	AkLateReverbComponent* GetCurrentLateReverb();// 0x309ce3fee041
	float GetAttenuationRadius();// 0x309be3fee041

--------------------------------
Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x208, Size: 0x8]
	FString EventName;//[Offset: 0x210, Size: 0x10]
	void Stop();// 0x309ae3fee041
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0x3099e3fee041
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x3098e3fee041
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x3097e3fee041
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x3096e3fee041

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10]
	enum CodecID;//[Offset: 0x10, Size: 0x1]
	FString Filename;//[Offset: 0x18, Size: 0x10]
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 0x8]
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AkExternalMediaAsset.AkMediaAsset.Object

--------------------------------
Class: AkMediaAsset.Object
	uint32 ID;//[Offset: 0x28, Size: 0x4]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: AkRoomComponent.AkGameObject.SceneComponent.ActorComponent.Object
	Volume* ParentVolume;//[Offset: 0x228, Size: 0x8]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	AkRoomComponent* NextLowerPriorityComponent;//[Offset: 0x238, Size: 0x8]
	float Priority;//[Offset: 0x240, Size: 0x4]
	float WallOcclusion;//[Offset: 0x244, Size: 0x4]
	float RoomOcclusionValue;//[Offset: 0x248, Size: 0x4]
	float AuxSendLevel;//[Offset: 0x24c, Size: 0x4]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	AkLateReverbComponent* SameAVolumeLateReverbCom;//[Offset: 0x258, Size: 0x8]

--------------------------------
Class: AkLateReverbComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x202, Size: 0x1]
	AkAuxBus* AuxBus;//[Offset: 0x208, Size: 0x8]
	FString AuxBusName;//[Offset: 0x210, Size: 0x10]
	float SendLevel;//[Offset: 0x220, Size: 0x4]
	float FadeRate;//[Offset: 0x224, Size: 0x4]
	float Priority;//[Offset: 0x228, Size: 0x4]
	AkLateReverbComponent* NextLowerPriorityComponent;//[Offset: 0x230, Size: 0x8]
	Volume* ParentVolume;//[Offset: 0x260, Size: 0x8]
	SplineSound* ParentSplineRegion;//[Offset: 0x268, Size: 0x8]

--------------------------------
Class: SplineSound.AudioEmitter3D.Actor.Object
	float SplineRadius;//[Offset: 0x30c, Size: 0x4]
	float RegionHeight;//[Offset: 0x310, Size: 0x4]
	bool OverrideGlobalAmbienceSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	SplineComponent* SplineComponent;//[Offset: 0x318, Size: 0x8]
	Color OutlineColor;//[Offset: 0x334, Size: 0x4]
	void SetInSamePlane();// 0x31cbe3fee041
	void ReversePointsOrder();// 0x31cae3fee041
	bool IsEmitterWithinRegion(Vector EmitterLocation);// 0x31c9e3fee041

--------------------------------
Class: AudioEmitter3D.Actor.Object
	AkAudioEvent* AudioEvent;//[Offset: 0x2e0, Size: 0x8]
	bool AutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	bool AutoStartStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 0x1]
	float DistanceToStopSound;//[Offset: 0x2ec, Size: 0x4]
	AudioStudioComponent*[] AudioStudioComponents;//[Offset: 0x2f0, Size: 0x10]
	AkComponent* AkComponent;//[Offset: 0x300, Size: 0x8]
	bool bIsSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool bIsSoundPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	void DeactivateSoundData();// 0x3141e3fee041
	void ActivateSoundData();// 0x3140e3fee041

--------------------------------
Class: AudioStudioComponent.ActorComponent.Object
	void OnDeactivate(ActorComponent* Component);// 0x31a3e3fee041
	void OnActivate(ActorComponent* Component, bool bReset);// 0x31a2e3fee041
	void DeactivateSoundData();// 0x31a1e3fee041
	void ActivateSoundData();// 0x31a0e3fee041

--------------------------------
Class: VoicePlayingData

--------------------------------
Class: AkSwitchValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkGroupValue.AkAudioType.Object
	uint32 GroupShortID;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: AkRtpc.AkAudioType.Object

--------------------------------
Class: AkTrigger.AkAudioType.Object

--------------------------------
Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AkAndroidInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28]
	AkAndroidAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb8, Size: 0x40]
	void MigrateMultiCoreRendering(bool NewValue);// 0x3091e3fee041

--------------------------------
Class: AkCommonInitializationSettingsWithSampleRate.AkCommonInitializationSettings
	uint32 SampleRate;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: AkCommonInitializationSettings
	uint32 MaximumNumberOfMemoryPools;//[Offset: 0x0, Size: 0x4]
	uint32 MaximumNumberOfPositioningPaths;//[Offset: 0x4, Size: 0x4]
	uint32 CommandQueueSize;//[Offset: 0x8, Size: 0x4]
	uint32 SamplesPerFrame;//[Offset: 0xc, Size: 0x4]
	AkMainOutputSettings MainOutputSettings;//[Offset: 0x10, Size: 0x28]
	float StreamingLookAheadRatio;//[Offset: 0x38, Size: 0x4]
	uint16 NumberOfRefillsInVoice;//[Offset: 0x3c, Size: 0x2]
	AkSpatialAudioSettings SpatialAudioSettings;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: AkMainOutputSettings
	FString AudioDeviceShareset;//[Offset: 0x0, Size: 0x10]
	uint32 DeviceID;//[Offset: 0x10, Size: 0x4]
	enum PanningRule;//[Offset: 0x14, Size: 0x4]
	enum ChannelConfigType;//[Offset: 0x18, Size: 0x4]
	uint32 ChannelMask;//[Offset: 0x1c, Size: 0x4]
	uint32 NumberOfChannels;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: AkSpatialAudioSettings
	uint32 MaxSoundPropagationDepth;//[Offset: 0x0, Size: 0x4]
	uint32 DiffractionFlags;//[Offset: 0x4, Size: 0x4]
	float MovementThreshold;//[Offset: 0x8, Size: 0x4]
	uint32 NumberOfPrimaryRays;//[Offset: 0xc, Size: 0x4]
	uint32 ReflectionOrder;//[Offset: 0x10, Size: 0x4]
	bool EnableDiffractionOnReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool EnableDirectPathDiffraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	float MaximumPathLength;//[Offset: 0x18, Size: 0x4]
	bool EnableTransmission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: AkCommunicationSettingsWithSystemInitialization.AkCommunicationSettings
	bool InitializeSystemComms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: AkCommunicationSettings
	uint32 PoolSize;//[Offset: 0x0, Size: 0x4]
	uint16 DiscoveryBroadcastPort;//[Offset: 0x4, Size: 0x2]
	uint16 CommandPort;//[Offset: 0x6, Size: 0x2]
	uint16 NotificationPort;//[Offset: 0x8, Size: 0x2]
	FString NetworkName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AkAndroidAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	uint32 AudioAPI;//[Offset: 0x38, Size: 0x4]
	bool RoundFrameSizeToHardwareSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	bool EnableMultiCoreRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: AkAdvancedInitializationSettings
	uint32 IO_MemorySize;//[Offset: 0x0, Size: 0x4]
	uint32 IO_Granularity;//[Offset: 0x4, Size: 0x4]
	float TargetAutoStreamBufferLength;//[Offset: 0x8, Size: 0x4]
	bool UseStreamCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	uint32 MaximumPinnedBytesInCache;//[Offset: 0x10, Size: 0x4]
	bool EnableGameSyncPreparation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	uint32 ContinuousPlaybackLookAhead;//[Offset: 0x18, Size: 0x4]
	uint32 MonitorQueuePoolSize;//[Offset: 0x1c, Size: 0x4]
	uint32 MaximumHardwareTimeoutMs;//[Offset: 0x20, Size: 0x4]
	bool DebugOutOfRangeCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	float DebugOutOfRangeLimit;//[Offset: 0x28, Size: 0x4]
	AkAdvancedSpatialAudioSettings SpatialAudioSettings;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: AkAdvancedSpatialAudioSettings
	float DiffractionShadowAttenuationFactor;//[Offset: 0x0, Size: 0x4]
	float DiffractionShadowDegrees;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AkPlatformInfo.Object

--------------------------------
Class: AkAndroidPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkAssetDataWithMedia.AkAssetData.Object
	AkMediaAsset*[] MediaList;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AkAssetDataSwitchContainerData.Object
	AkGroupValue* GroupValue;//[Offset: 0x28, Size: 0x28]
	AkGroupValue* DefaultGroupValue;//[Offset: 0x50, Size: 0x8]
	AkMediaAsset*[] MediaList;//[Offset: 0x58, Size: 0x10]
	AkAssetDataSwitchContainerData*[] Children;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: AkAssetDataSwitchContainer.AkAssetDataWithMedia.AkAssetData.Object
	AkAssetDataSwitchContainerData*[] SwitchContainers;//[Offset: 0x90, Size: 0x10]
	AkGroupValue* DefaultGroupValue;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: AkAudioEventData.AkAssetDataSwitchContainer.AkAssetDataWithMedia.AkAssetData.Object
	float MaxAttenuationRadius;//[Offset: 0xb8, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float MinimumDuration;//[Offset: 0xc0, Size: 0x4]
	float MaximumDuration;//[Offset: 0xc4, Size: 0x4]
	<FString,AkAssetDataSwitchContainer*> LocalizedMedia;//[Offset: 0xc8, Size: 0x50]
	<AkAudioEvent*> PostedEvents;//[Offset: 0x118, Size: 0x50]
	<AkAuxBus*> UserDefinedSends;//[Offset: 0x168, Size: 0x50]
	<AkTrigger*> PostedTriggers;//[Offset: 0x1b8, Size: 0x50]
	<AkGroupValue*> GroupValues;//[Offset: 0x208, Size: 0x50]

--------------------------------
Class: AkAudioInputComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	int PostAssociatedAudioInputEvent();// 0x30b1e3fee041

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x19c7e3fee041
	PanelSlot* GetContentSlot();// 0x19c6e3fee041
	Widget* GetContent();// 0x19c5e3fee041

--------------------------------
Class: AkCheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x510, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0x514, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0x528, Size: 0x5c8]
	byte HorizontalAlignment;//[Offset: 0xaf0, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf1, Size: 0x1]
	AkBoolPropertyToControl ThePropertyToControl;//[Offset: 0xaf8, Size: 0x10]
	AkWwiseItemToControl ItemToControl;//[Offset: 0xb08, Size: 0x40]
	delegate AkOnCheckStateChanged;//[Offset: 0xb48, Size: 0x10]
	delegate OnItemDropped;//[Offset: 0xb58, Size: 0x10]
	delegate OnPropertyDropped;//[Offset: 0xb68, Size: 0x10]
	void SetIsChecked(bool InIsChecked);// 0x30bae3fee041
	void SetCheckedState(enum InCheckedState);// 0x30b9e3fee041
	void SetAkItemId(out const Guid ItemID);// 0x30b8e3fee041
	void SetAkBoolProperty(FString ItemProperty);// 0x30b7e3fee041
	bool IsPressed();// 0x30b6e3fee041
	bool IsChecked();// 0x30b5e3fee041
	enum GetCheckedState();// 0x30b4e3fee041
	FString GetAkProperty();// 0x30b3e3fee041
	Guid GetAkItemId();// 0x30b2e3fee041

--------------------------------
Class: AkBoolPropertyToControl
	FString ItemProperty;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AkWwiseItemToControl
	AkWwiseObjectDetails ItemPicked;//[Offset: 0x0, Size: 0x30]
	FString ItemPath;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AkWwiseObjectDetails
	FString ItemName;//[Offset: 0x0, Size: 0x10]
	FString ItemPath;//[Offset: 0x10, Size: 0x10]
	FString ItemID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: AkGameplayStatics.BlueprintFunctionLibrary.Object
	void UseReverbVolumes(bool inUseReverbVolumes, Actor* Actor);// 0x30f3e3fee041
	void UseEarlyReflections(Actor* Actor, AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x30f2e3fee041
	void UnloadBankByName(FString BankName);// 0x30f1e3fee041
	void UnloadBankAsync(AkAudioBank* Bank, out const delegate BankUnloadedCallback);// 0x30f0e3fee041
	void UnloadBank(AkAudioBank* Bank, FString BankName, LatentActionInfo LatentInfo, Object* WorldContextObject);// 0x30efe3fee041
	void StopProfilerCapture();// 0x30eee3fee041
	void StopOutputCapture();// 0x30ede3fee041
	void StopAllAmbientSounds(Object* WorldContextObject);// 0x30ece3fee041
	void StopAll();// 0x30ebe3fee041
	void StopActor(Actor* Actor);// 0x30eae3fee041
	void StartProfilerCapture(FString Filename);// 0x30e9e3fee041
	void StartOutputCapture(FString Filename);// 0x30e8e3fee041
	void StartAllAmbientSounds(Object* WorldContextObject);// 0x30e7e3fee041
	AkComponent* SpawnAkComponentAtLocation(Object* WorldContextObject, AkAudioEvent* AkEvent, Vector Location, Rotator Orientation, bool AutoPost, FString EventName, bool AutoDestroy);// 0x30e6e3fee041
	void SetSwitch(AkSwitchValue* SwitchValue, Actor* Actor, FName SwitchGroup, FName SwitchState);// 0x30e5e3fee041
	void SetState(AkStateValue* StateValue, FName StateGroup, FName State);// 0x30e4e3fee041
	void SetSpeakerAngles(out const float[] SpeakerAngles, float HeightAngle, FString DeviceShareset);// 0x30e3e3fee041
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, Actor* Actor, FName RTPC);// 0x30e2e3fee041
	void SetReflectionsOrder(int Order, bool RefreshPaths);// 0x30e1e3fee041
	void SetPanningRule(enum PanRule);// 0x30e0e3fee041
	void SetOutputBusVolume(float BusVolume, Actor* Actor);// 0x30dfe3fee041
	void SetOcclusionScalingFactor(float ScalingFactor);// 0x30dee3fee041
	void SetOcclusionRefreshInterval(float RefreshInterval, Actor* Actor);// 0x30dde3fee041
	void SetMultiplePositions(AkComponent* GameObjectAkComponent, Transform[] Positions, enum MultiPositionType);// 0x30dce3fee041
	void SetMultipleChannelMaskEmitterPositions(AkComponent* GameObjectAkComponent, AkChannelMask[] ChannelMasks, Transform[] Positions, enum MultiPositionType);// 0x30dbe3fee041
	void SetMultipleChannelEmitterPositions(AkComponent* GameObjectAkComponent, enum[] ChannelMasks, Transform[] Positions, enum MultiPositionType);// 0x30dae3fee041
	void SetCurrentAudioCultureAsync(FString AudioCulture, out const delegate Completed);// 0x30d9e3fee041
	void SetCurrentAudioCulture(FString AudioCulture, LatentActionInfo LatentInfo, Object* WorldContextObject);// 0x30d8e3fee041
	void SetBusConfig(FString BusName, enum ChannelConfiguration);// 0x30d7e3fee041
	void PostTrigger(AkTrigger* TriggerValue, Actor* Actor, FName Trigger);// 0x30d6e3fee041
	void PostEventByName(FString EventName, Actor* Actor, bool bStopWhenAttachedToDestroyed);// 0x30d5e3fee041
	int PostEventAttached(AkAudioEvent* AkEvent, Actor* Actor, FName AttachPointName, bool bStopWhenAttachedToDestroyed, FString EventName);// 0x30d4e3fee041
	void PostEventAtLocationByName(FString EventName, Vector Location, Rotator Orientation, Object* WorldContextObject);// 0x30d3e3fee041
	int PostEventAtLocation(AkAudioEvent* AkEvent, Vector Location, Rotator Orientation, FString EventName, Object* WorldContextObject);// 0x30d2e3fee041
	int PostEvent(AkAudioEvent* AkEvent, Actor* Actor, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool bStopWhenAttachedToDestroyed, FString EventName);// 0x30d1e3fee041
	void PostAndWaitForEndOfEventAsync(AkAudioEvent* AkEvent, Actor* Actor, out int PlayingID, bool bStopWhenAttachedToDestroyed, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x30d0e3fee041
	int PostAndWaitForEndOfEvent(AkAudioEvent* AkEvent, Actor* Actor, bool bStopWhenAttachedToDestroyed, out const AkExternalSourceInfo[] ExternalSources, FString EventName, LatentActionInfo LatentInfo);// 0x30cfe3fee041
	void LoadInitBank();// 0x30cee3fee041
	void LoadBanks(out const AkAudioBank*[] SoundBanks, bool SynchronizeSoundBanks);// 0x30cde3fee041
	void LoadBankByName(FString BankName);// 0x30cce3fee041
	void LoadBankAsync(AkAudioBank* Bank, out const delegate BankLoadedCallback);// 0x30cbe3fee041
	void LoadBank(AkAudioBank* Bank, FString BankName, LatentActionInfo LatentInfo, Object* WorldContextObject);// 0x30cae3fee041
	bool IsGame(Object* WorldContextObject);// 0x30c9e3fee041
	bool IsEditor();// 0x30c8e3fee041
	void GetSpeakerAngles(out float[] SpeakerAngles, out float HeightAngle, FString DeviceShareset);// 0x30c7e3fee041
	void GetRTPCValue(AkRtpc* RTPCValue, int PlayingID, enum InputValueType, out float Value, out enum OutputValueType, Actor* Actor, FName RTPC);// 0x30c6e3fee041
	float GetOcclusionScalingFactor();// 0x30c5e3fee041
	FString GetCurrentAudioCulture();// 0x30c4e3fee041
	FString[] GetAvailableAudioCultures();// 0x30c3e3fee041
	Object* GetAkMediaAssetUserData(const AkMediaAsset* Instance, const class Object Type);// 0x30c2e3fee041
	AkComponent* GetAkComponent(SceneComponent* AttachToComponent, out bool ComponentCreated, FName AttachPointName, Vector Location, byte LocationType);// 0x30c1e3fee041
	Object* GetAkAudioTypeUserData(const AkAudioType* Instance, const class Object Type);// 0x30c0e3fee041
	void ExecuteActionOnPlayingID(enum ActionType, int PlayingID, int TransitionDuration, enum FadeCurve);// 0x30bfe3fee041
	void ExecuteActionOnEvent(AkAudioEvent* AkEvent, enum ActionType, Actor* Actor, int TransitionDuration, enum FadeCurve, int PlayingID);// 0x30bee3fee041
	void ClearBanks();// 0x30bde3fee041
	void CancelEventCallback(out const delegate PostEventCallback);// 0x30bce3fee041
	void AddOutputCaptureMarker(FString MarkerText);// 0x30bbe3fee041

--------------------------------
Class: AkStateValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkChannelMask
	int ChannelMask;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AkEventCallbackInfo.AkCallbackInfo.Object
	int PlayingID;//[Offset: 0x30, Size: 0x4]
	int EventID;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: AkMIDIEventCallbackInfo.AkEventCallbackInfo.AkCallbackInfo.Object
	enum GetType();// 0x30fde3fee041
	bool GetProgramChange(out AkMidiProgramChange AsProgramChange);// 0x30fce3fee041
	bool GetPitchBend(out AkMidiPitchBend AsPitchBend);// 0x30fbe3fee041
	bool GetNoteOn(out AkMidiNoteOnOff AsNoteOn);// 0x30fae3fee041
	bool GetNoteOff(out AkMidiNoteOnOff AsNoteOff);// 0x30f9e3fee041
	bool GetNoteAftertouch(out AkMidiNoteAftertouch AsNoteAftertouch);// 0x30f8e3fee041
	bool GetGeneric(out AkMidiGeneric AsGeneric);// 0x30f7e3fee041
	bool GetChannelAftertouch(out AkMidiChannelAftertouch AsChannelAftertouch);// 0x30f6e3fee041
	byte GetChannel();// 0x30f5e3fee041
	bool GetCc(out AkMidiCc AsCc);// 0x30f4e3fee041

--------------------------------
Class: AkMidiProgramChange.AkMidiEventBase
	byte ProgramNum;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: AkMidiEventBase
	enum Type;//[Offset: 0x0, Size: 0x1]
	byte Chan;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: AkMidiPitchBend.AkMidiEventBase
	byte ValueLsb;//[Offset: 0x2, Size: 0x1]
	byte ValueMsb;//[Offset: 0x3, Size: 0x1]
	int FullValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AkMidiNoteOnOff.AkMidiEventBase
	byte Note;//[Offset: 0x2, Size: 0x1]
	byte Velocity;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: AkMidiNoteAftertouch.AkMidiEventBase
	byte Note;//[Offset: 0x2, Size: 0x1]
	byte Value;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: AkMidiGeneric.AkMidiEventBase
	byte Param1;//[Offset: 0x2, Size: 0x1]
	byte Param2;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: AkMidiChannelAftertouch.AkMidiEventBase
	byte Value;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: AkMidiCc.AkMidiEventBase
	enum Cc;//[Offset: 0x2, Size: 0x1]
	byte Value;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: AkMarkerCallbackInfo.AkEventCallbackInfo.AkCallbackInfo.Object
	int Identifier;//[Offset: 0x38, Size: 0x4]
	int position;//[Offset: 0x3c, Size: 0x4]
	FString label;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: AkDurationCallbackInfo.AkEventCallbackInfo.AkCallbackInfo.Object
	float Duration;//[Offset: 0x38, Size: 0x4]
	float EstimatedDuration;//[Offset: 0x3c, Size: 0x4]
	int AudioNodeID;//[Offset: 0x40, Size: 0x4]
	int MediaID;//[Offset: 0x44, Size: 0x4]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: AkMusicSyncCallbackInfo.AkCallbackInfo.Object
	int PlayingID;//[Offset: 0x30, Size: 0x4]
	AkSegmentInfo SegmentInfo;//[Offset: 0x34, Size: 0x24]
	enum MusicSyncType;//[Offset: 0x58, Size: 0x1]
	FString UserCueName;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: AkSegmentInfo
	int CurrentPosition;//[Offset: 0x0, Size: 0x4]
	int PreEntryDuration;//[Offset: 0x4, Size: 0x4]
	int ActiveDuration;//[Offset: 0x8, Size: 0x4]
	int PostExitDuration;//[Offset: 0xc, Size: 0x4]
	int RemainingLookAheadTime;//[Offset: 0x10, Size: 0x4]
	float BeatDuration;//[Offset: 0x14, Size: 0x4]
	float BarDuration;//[Offset: 0x18, Size: 0x4]
	float GridDuration;//[Offset: 0x1c, Size: 0x4]
	float GridOffset;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: AkGeometryComponent.SceneComponent.ActorComponent.Object
	enum MeshType;//[Offset: 0x202, Size: 0x1]
	int LOD;//[Offset: 0x204, Size: 0x4]
	float WeldingThreshold;//[Offset: 0x208, Size: 0x4]
	<MaterialInterface*,AkGeometrySurfaceOverride> StaticMeshSurfaceOverride;//[Offset: 0x210, Size: 0x50]
	AkGeometrySurfaceOverride CollisionMeshSurfaceOverride;//[Offset: 0x260, Size: 0x10]
	bool bEnableDiffraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]
	bool bEnableDiffractionOnBoundaryEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x270, Size: 0x1]
	Actor* AssociatedRoom;//[Offset: 0x278, Size: 0x8]
	StaticMeshComponent* Parent;//[Offset: 0x280, Size: 0x8]
	AkGeometryData GeometryData;//[Offset: 0x290, Size: 0x50]
	<MaterialInterface*,AkGeometrySurfaceOverride> PreviousStaticMeshSurfaceOverride;//[Offset: 0x2e0, Size: 0x50]
	void UpdateGeometry();// 0x3100e3fee041
	void RemoveGeometry();// 0x30ffe3fee041
	void ConvertMesh();// 0x30fee3fee041

--------------------------------
Class: AkGeometrySurfaceOverride
	AkAcousticTexture* AcousticTexture;//[Offset: 0x0, Size: 0x8]
	bool bEnableOcclusionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OcclusionValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AkGeometryData
	Vector[] Vertices;//[Offset: 0x0, Size: 0x10]
	AkAcousticSurface[] Surfaces;//[Offset: 0x10, Size: 0x10]
	AkTriangle[] Triangles;//[Offset: 0x20, Size: 0x10]
	PhysicalMaterial*[] ToOverrideAcousticTexture;//[Offset: 0x30, Size: 0x10]
	PhysicalMaterial*[] ToOverrideOcclusion;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: AkAcousticSurface
	uint32 Texture;//[Offset: 0x0, Size: 0x4]
	float Occlusion;//[Offset: 0x4, Size: 0x4]
	FString Name;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AkTriangle
	uint16 Point0;//[Offset: 0x0, Size: 0x2]
	uint16 Point1;//[Offset: 0x2, Size: 0x2]
	uint16 Point2;//[Offset: 0x4, Size: 0x2]
	uint16 Surface;//[Offset: 0x6, Size: 0x2]

--------------------------------
Class: AkInitBankAssetData.AkAssetDataWithMedia.AkAssetData.Object
	AkPluginInfo[] PluginInfos;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: AkPluginInfo
	FString Name;//[Offset: 0x0, Size: 0x10]
	uint32 PluginID;//[Offset: 0x10, Size: 0x4]
	FString DLL;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: AkInitBank.AkAssetBase.AkAudioType.Object
	FString[] AvailableAudioCultures;//[Offset: 0x58, Size: 0x10]
	FString DefaultLanguage;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: AkIOSInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68]
	AkAudioSession AudioSession;//[Offset: 0x90, Size: 0xc]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0xa0, Size: 0x28]
	AkAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xc8, Size: 0x34]

--------------------------------
Class: AkAudioSession
	enum AudioSessionCategory;//[Offset: 0x0, Size: 0x4]
	uint32 AudioSessionCategoryOptions;//[Offset: 0x4, Size: 0x4]
	enum AudioSessionMode;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AkIOSPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkItemBoolPropertiesConv.BlueprintFunctionLibrary.Object
	FText Conv_FAkBoolPropertyToControlToText(out const AkBoolPropertyToControl INAkBoolPropertyToControl);// 0x3102e3fee041
	FString Conv_FAkBoolPropertyToControlToString(out const AkBoolPropertyToControl INAkBoolPropertyToControl);// 0x3101e3fee041

--------------------------------
Class: AkItemBoolProperties.Widget.Visual.Object
	delegate OnSelectionChanged;//[Offset: 0x128, Size: 0x10]
	delegate OnPropertyDragged;//[Offset: 0x138, Size: 0x10]
	void SetSearchText(FString newText);// 0x3105e3fee041
	FString GetSelectedProperty();// 0x3104e3fee041
	FString GetSearchText();// 0x3103e3fee041

--------------------------------
Class: AkItemPropertiesConv.BlueprintFunctionLibrary.Object
	FText Conv_FAkPropertyToControlToText(out const AkPropertyToControl INAkPropertyToControl);// 0x3107e3fee041
	FString Conv_FAkPropertyToControlToString(out const AkPropertyToControl INAkPropertyToControl);// 0x3106e3fee041

--------------------------------
Class: AkPropertyToControl
	FString ItemProperty;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AkItemProperties.Widget.Visual.Object
	delegate OnSelectionChanged;//[Offset: 0x128, Size: 0x10]
	delegate OnPropertyDragged;//[Offset: 0x138, Size: 0x10]
	void SetSearchText(FString newText);// 0x310ae3fee041
	FString GetSelectedProperty();// 0x3109e3fee041
	FString GetSearchText();// 0x3108e3fee041

--------------------------------
Class: AkLinuxInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28]
	AkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;//[Offset: 0xb8, Size: 0x38]
	void MigrateMultiCoreRendering(bool NewValue);// 0x310be3fee041

--------------------------------
Class: AkLinuxPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkMacInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28]
	AkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;//[Offset: 0xb8, Size: 0x38]
	void MigrateMultiCoreRendering(bool NewValue);// 0x310ce3fee041

--------------------------------
Class: AkMacPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkLocalizedMediaAsset.AkMediaAsset.Object

--------------------------------
Class: AkObstructionVolume.Volume.Brush.Actor.Object
	float ObstructionValue;//[Offset: 0x318, Size: 0x4]

--------------------------------
Class: AkReverbVolume.Volume.Brush.Actor.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1]
	AkAuxBus* AuxBus;//[Offset: 0x320, Size: 0x8]
	FString AuxBusName;//[Offset: 0x328, Size: 0x10]
	float SendLevel;//[Offset: 0x338, Size: 0x4]
	float FadeRate;//[Offset: 0x33c, Size: 0x4]
	float Priority;//[Offset: 0x340, Size: 0x4]
	AkLateReverbComponent* LateReverbComponent;//[Offset: 0x348, Size: 0x8]

--------------------------------
Class: AkSettingsPerUser.Object
	DirectoryPath WwiseWindowsInstallationPath;//[Offset: 0x28, Size: 0x10]
	FilePath WwiseMacInstallationPath;//[Offset: 0x38, Size: 0x10]
	bool EnableAutomaticAssetSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	FString WaapiIPAddress;//[Offset: 0x50, Size: 0x10]
	uint32 WaapiPort;//[Offset: 0x60, Size: 0x4]
	bool bAutoConnectToWAAPI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool AutoSyncSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool SuppressWwiseProjectPathWarnings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]
	bool SoundDataGenerationSkipLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1]

--------------------------------
Class: AkSlider.Widget.Visual.Object
	float Value;//[Offset: 0x124, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0x128, Size: 0x10]
	SliderStyle WidgetStyle;//[Offset: 0x138, Size: 0x370]
	byte Orientation;//[Offset: 0x4a8, Size: 0x1]
	LinearColor SliderBarColor;//[Offset: 0x4ac, Size: 0x10]
	LinearColor SliderHandleColor;//[Offset: 0x4bc, Size: 0x10]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cd, Size: 0x1]
	float StepSize;//[Offset: 0x4d0, Size: 0x4]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 0x1]
	AkPropertyToControl ThePropertyToControl;//[Offset: 0x4d8, Size: 0x10]
	AkWwiseItemToControl ItemToControl;//[Offset: 0x4e8, Size: 0x40]
	delegate OnValueChanged;//[Offset: 0x528, Size: 0x10]
	delegate OnItemDropped;//[Offset: 0x538, Size: 0x10]
	delegate OnPropertyDropped;//[Offset: 0x548, Size: 0x10]
	void SetValue(float InValue);// 0x3117e3fee041
	void SetStepSize(float InValue);// 0x3116e3fee041
	void SetSliderHandleColor(LinearColor InValue);// 0x3115e3fee041
	void SetSliderBarColor(LinearColor InValue);// 0x3114e3fee041
	void SetLocked(bool InValue);// 0x3113e3fee041
	void SetIndentHandle(bool InValue);// 0x3112e3fee041
	void SetAkSliderItemProperty(FString ItemProperty);// 0x3111e3fee041
	void SetAkSliderItemId(out const Guid ItemID);// 0x3110e3fee041
	float GetValue();// 0x310fe3fee041
	FString GetAkSliderItemProperty();// 0x310ee3fee041
	Guid GetAkSliderItemId();// 0x310de3fee041

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x8, Size: 0x90]
	SlateBrush HoveredBarImage;//[Offset: 0x98, Size: 0x90]
	SlateBrush DisabledBarImage;//[Offset: 0x128, Size: 0x90]
	SlateBrush NormalThumbImage;//[Offset: 0x1b8, Size: 0x90]
	SlateBrush HoveredThumbImage;//[Offset: 0x248, Size: 0x90]
	SlateBrush DisabledThumbImage;//[Offset: 0x2d8, Size: 0x90]
	float BarThickness;//[Offset: 0x368, Size: 0x4]

--------------------------------
Class: AkSpatialAudioVolume.Volume.Brush.Actor.Object
	AkSurfaceReflectorSetComponent* SurfaceReflectorSet;//[Offset: 0x318, Size: 0x8]
	AkLateReverbComponent* LateReverb;//[Offset: 0x320, Size: 0x8]
	AkRoomComponent* Room;//[Offset: 0x328, Size: 0x8]
	int RoomIndex;//[Offset: 0x330, Size: 0x4]
	SetStateComponent* SetStateComponent;//[Offset: 0x338, Size: 0x8]
	SetSwitchComponent* SetSwitchComponent;//[Offset: 0x340, Size: 0x8]
	int Floor;//[Offset: 0x348, Size: 0x4]
	float ObstructionValue;//[Offset: 0x350, Size: 0x4]
	float GetVolumeInMeters();// 0x3118e3fee041

--------------------------------
Class: AkSurfaceReflectorSetComponent.SceneComponent.ActorComponent.Object
	bool bEnableSurfaceReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x202, Size: 0x1]
	AkPoly[] AcousticPolys;//[Offset: 0x208, Size: 0x10]
	bool bEnableDiffraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	bool bEnableDiffractionOnBoundaryEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 0x1]
	Actor* AssociatedRoom;//[Offset: 0x220, Size: 0x8]
	Model* ParentBrush;//[Offset: 0x228, Size: 0x8]
	void UpdateSurfaceReflectorSet();// 0x311be3fee041
	void SendSurfaceReflectorSet();// 0x311ae3fee041
	void RemoveSurfaceReflectorSet();// 0x3119e3fee041

--------------------------------
Class: AkPoly
	AkAcousticTexture* Texture;//[Offset: 0x0, Size: 0x8]
	float Occlusion;//[Offset: 0x8, Size: 0x4]
	bool EnableSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: SetStateComponent.AudioStudioComponent.ActorComponent.Object
	FString StateGroupName;//[Offset: 0xb8, Size: 0x10]
	FString ActivateStateName;//[Offset: 0xc8, Size: 0x10]
	FString DeactivateStateName;//[Offset: 0xd8, Size: 0x10]

--------------------------------
Class: SetSwitchComponent.AudioStudioComponent.ActorComponent.Object
	FString SwitchGroupName;//[Offset: 0xb8, Size: 0x10]
	FString ActivateSwitchName;//[Offset: 0xc8, Size: 0x10]
	FString DeactivateSwitchName;//[Offset: 0xd8, Size: 0x10]
	void DeactivateSwitchOnOtherActor(Actor* Actor);// 0x31c8e3fee041
	void ActivateSwitchOnOtherActor(Actor* Actor);// 0x31c7e3fee041

--------------------------------
Class: AkSpotReflector.Actor.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x2e0, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x2e8, Size: 0x10]
	AkAcousticTexture* AcousticTexture;//[Offset: 0x2f8, Size: 0x8]
	float DistanceScalingFactor;//[Offset: 0x300, Size: 0x4]
	float Level;//[Offset: 0x304, Size: 0x4]

--------------------------------
Class: AkWaapiCalls.BlueprintFunctionLibrary.Object
	AKWaapiJsonObject Unsubscribe(out const AkWaapiSubscriptionId SubscriptionId, out bool UnsubscriptionDone);// 0x3124e3fee041
	AKWaapiJsonObject SubscribeToWaapi(out const AkWaapiUri WaapiUri, out const AKWaapiJsonObject WaapiOptions, out const delegate Callback, out AkWaapiSubscriptionId SubscriptionId, out bool SubscriptionDone);// 0x3123e3fee041
	void SetSubscriptionID(out const AkWaapiSubscriptionId Subscription, int ID);// 0x3122e3fee041
	bool RegisterWaapiProjectLoadedCallback(out const delegate Callback);// 0x3121e3fee041
	bool RegisterWaapiConnectionLostCallback(out const delegate Callback);// 0x3120e3fee041
	int GetSubscriptionID(out const AkWaapiSubscriptionId Subscription);// 0x311fe3fee041
	FText Conv_FAkWaapiSubscriptionIdToText(out const AkWaapiSubscriptionId INAkWaapiSubscriptionId);// 0x311ee3fee041
	FString Conv_FAkWaapiSubscriptionIdToString(out const AkWaapiSubscriptionId INAkWaapiSubscriptionId);// 0x311de3fee041
	AKWaapiJsonObject CallWaapi(out const AkWaapiUri WaapiUri, out const AKWaapiJsonObject WaapiArgs, out const AKWaapiJsonObject WaapiOptions);// 0x311ce3fee041

--------------------------------
Class: AkWaapiSubscriptionId

--------------------------------
Class: AKWaapiJsonObject

--------------------------------
Class: AkWaapiUri
	FString Uri;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SAkWaapiFieldNamesConv.BlueprintFunctionLibrary.Object
	FText Conv_FAkWaapiFieldNamesToText(out const AkWaapiFieldNames INAkWaapiFieldNames);// 0x3126e3fee041
	FString Conv_FAkWaapiFieldNamesToString(out const AkWaapiFieldNames INAkWaapiFieldNames);// 0x3125e3fee041

--------------------------------
Class: AkWaapiFieldNames
	FString FieldName;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AkWaapiJsonManager.BlueprintFunctionLibrary.Object
	AKWaapiJsonObject SetStringField(out const AkWaapiFieldNames FieldName, FString FieldValue, AKWaapiJsonObject Target);// 0x3134e3fee041
	AKWaapiJsonObject SetObjectField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject FieldValue, AKWaapiJsonObject Target);// 0x3133e3fee041
	AKWaapiJsonObject SetNumberField(out const AkWaapiFieldNames FieldName, float FieldValue, AKWaapiJsonObject Target);// 0x3132e3fee041
	AKWaapiJsonObject SetBoolField(out const AkWaapiFieldNames FieldName, bool FieldValue, AKWaapiJsonObject Target);// 0x3131e3fee041
	AKWaapiJsonObject SetArrayStringFields(out const AkWaapiFieldNames FieldName, out const FString[] FieldStringValues, AKWaapiJsonObject Target);// 0x3130e3fee041
	AKWaapiJsonObject SetArrayObjectFields(out const AkWaapiFieldNames FieldName, out const AKWaapiJsonObject[] FieldObjectValues, AKWaapiJsonObject Target);// 0x312fe3fee041
	FString GetStringField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x312ee3fee041
	AKWaapiJsonObject GetObjectField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x312de3fee041
	float GetNumberField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x312ce3fee041
	int GetIntegerField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x312be3fee041
	bool GetBoolField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x312ae3fee041
	AKWaapiJsonObject[] GetArrayField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x3129e3fee041
	FText Conv_FAKWaapiJsonObjectToText(AKWaapiJsonObject INAKWaapiJsonObject);// 0x3128e3fee041
	FString Conv_FAKWaapiJsonObjectToString(AKWaapiJsonObject INAKWaapiJsonObject);// 0x3127e3fee041

--------------------------------
Class: AkWaapiUriConv.BlueprintFunctionLibrary.Object
	FText Conv_FAkWaapiUriToText(out const AkWaapiUri INAkWaapiUri);// 0x3136e3fee041
	FString Conv_FAkWaapiUriToString(out const AkWaapiUri INAkWaapiUri);// 0x3135e3fee041

--------------------------------
Class: AkWindowsInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28]
	AkWindowsAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb8, Size: 0x40]
	void MigrateMultiCoreRendering(bool NewValue);// 0x3137e3fee041

--------------------------------
Class: AkWindowsAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	uint32 AudioAPI;//[Offset: 0x38, Size: 0x4]
	bool GlobalFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool UseHeadMountedDisplayAudioDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: AkWin32PlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkWin64PlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkWindowsPlatformInfo.AkWin64PlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkWwiseTree.Widget.Visual.Object
	delegate OnSelectionChanged;//[Offset: 0x128, Size: 0x10]
	delegate OnItemDragged;//[Offset: 0x138, Size: 0x10]
	void SetSearchText(FString newText);// 0x313ae3fee041
	AkWwiseObjectDetails GetSelectedItem();// 0x3139e3fee041
	FString GetSearchText();// 0x3138e3fee041

--------------------------------
Class: AkWwiseTreeSelector.Widget.Visual.Object
	delegate OnSelectionChanged;//[Offset: 0x128, Size: 0x10]
	delegate OnItemDragged;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: AnimNotify_AudioBank.AnimNotify.Object
	AkAudioBank* Bank;//[Offset: 0x38, Size: 0x8]
	byte Operation;//[Offset: 0x40, Size: 0x1]
	int DelaySecond;//[Offset: 0x44, Size: 0x4]
	void UnloadBank();// 0x313ee3fee041
	void LoadBank();// 0x313de3fee041

--------------------------------
Class: AnimNotify_PlayAudio.AnimNotify.Object
	AkAudioEvent* AudioEvent;//[Offset: 0x38, Size: 0x8]
	bool bUseConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bEnableSoundIndicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bEnableHUDShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool Stoppable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	bool FollowMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	FString ComponentName;//[Offset: 0x48, Size: 0x10]
	bool UseEmitLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	Vector EmitLocation;//[Offset: 0x5c, Size: 0xc]
	bool TriggerOnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool IgnoreOnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	FString SwitchGroupName;//[Offset: 0x70, Size: 0x10]
	FString SwitchName;//[Offset: 0x80, Size: 0x10]
	bool NotifyToAudioConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	FName AudioNotifyName;//[Offset: 0x94, Size: 0x8]
	AnimInstance* AnimInstance;//[Offset: 0x9c, Size: 0x8]
	void OnMontageEnded(AnimMontage* Montage, bool Interrupted);// 0x313fe3fee041

--------------------------------
Class: AudioManager.BlueprintFunctionLibrary.Object
	void WakeupWwiseFromSuspend();// 0x318ce3fee041
	void UnmuteWwiseAudio();// 0x318be3fee041
	int UnloadBankByName(FString BankName, FString Source, bool IgnoreCounter, bool Async, out const delegate UnloadFinishCallback);// 0x318ae3fee041
	int UnloadBank(AkAudioBank* BankReference, Object* Source, bool IgnoreCounter, bool Async, out const delegate UnloadFinishCallback);// 0x3189e3fee041
	void TogglePortalAtLocation(Vector Location, bool Open, Object* Source);// 0x3188e3fee041
	void SuspendWwise(bool in_bRenderAnyway);// 0x3187e3fee041
	void StopWwiseEventByName(FString EventName, Actor* Emitter, float FadeoutTime, FString ComponentName, int PlayingID);// 0x3186e3fee041
	void StopWwiseEvent(AkAudioEvent* EventReference, Actor* Emitter, float FadeoutTime, FString ComponentName, int PlayingID);// 0x3185e3fee041
	void StopMIDIMetronome(FString EventName, Actor* Emitter, bool StopCurrentNote);// 0x3184e3fee041
	void StopBackgroundMusic(float FadeoutTime);// 0x3183e3fee041
	void StopAnimationSound(Actor* Emitter, float FadeoutTime);// 0x3182e3fee041
	void StopAll(Actor* Emitter);// 0x3181e3fee041
	void StartMIDIMetronome(float TickInterval, FString EventName, Actor* Emitter);// 0x3180e3fee041
	void SetVoiceVolume(float Volume);// 0x317fe3fee041
	void SetVoiceLanguage(FString NewCulture);// 0x317ee3fee041
	void SetVoiceEnabled(bool Enabled);// 0x317de3fee041
	void SetUserExternalBluetoothState(bool UserExternalBluetoothState);// 0x317ce3fee041
	void SetSwitchByReference(AkSwitchValue* SwitchReference, Actor* TargetActor, FString ComponentName);// 0x317be3fee041
	void SetSwitchByName(FString SwitchGroupName, FString SwitchName, Actor* TargetActor, FString ComponentName);// 0x317ae3fee041
	void SetStateByReference(AkStateValue* StateReference, Object* Source);// 0x3179e3fee041
	void SetStateByName(FString StateGroupName, FString StateName, FString Source);// 0x3178e3fee041
	void SetSoundVolume(float Volume);// 0x3177e3fee041
	void SetSoundEnabled(bool Enabled);// 0x3176e3fee041
	void SetRTPCByReference(AkRtpc* ParameterReference, float Value, Actor* TargetActor, float InterpolateTime, FString ComponentName);// 0x3175e3fee041
	void SetReverbEnabled(bool Enabled);// 0x3174e3fee041
	void SetOcclusionObstructionEnabled(bool Enabled);// 0x3173e3fee041
	void SetMusicVolume(float Volume);// 0x3172e3fee041
	void SetMusicEnabled(bool Enabled);// 0x3171e3fee041
	void SetLastUnplugHeadsetTime();// 0x3170e3fee041
	void SetGlobalRTPC(FString ParameterName, float Value, FString Source, float InterpolateTime);// 0x316fe3fee041
	void SetEmitterRTPC(FString ParameterName, float Value, Actor* Emitter, float InterpolateTime, FString ComponentName);// 0x316ee3fee041
	void SetEarlyReflectionEnabled(bool Enabled);// 0x316de3fee041
	void SetDiffractionEnabled(bool Enabled);// 0x316ce3fee041
	void SetBluetoothState(bool BluetoothState);// 0x316be3fee041
	void SetAudioQuality(byte NewQuality);// 0x316ae3fee041
	bool SetAttenuationScaling(Actor* Emitter, float Scale, bool IsAbsolute, FString ComponentName);// 0x3169e3fee041
	void SeekOnWwiseEventByName(FString EventName, int Location);// 0x3168e3fee041
	void SeekOnWwiseEvent(AkAudioEvent* EventReference, int Location);// 0x3167e3fee041
	void ResumeSound(AkAudioEvent* EventReference, Actor* Emitter, FString ComponentName, int PlayingID);// 0x3166e3fee041
	void ResetRTPCValue(FString ParameterName, Actor* GameObject, float InterpolateTime, FString ComponentName);// 0x3165e3fee041
	void ReloadBank(FString BankName, FString Source);// 0x3164e3fee041
	void ReloadAllLoadedBanks();// 0x3163e3fee041
	int PostWwiseEventByName(FString EventName, Actor* Emitter, bool StopOnDestroy);// 0x3162e3fee041
	int PostWwiseEvent(AkAudioEvent* EventReference, Actor* Emitter, bool StopOnDestroy);// 0x3161e3fee041
	void PostTriggerByReference(AkTrigger* TriggerReference, Actor* TargetActor, FString ComponentName);// 0x3160e3fee041
	void PostTriggerByName(FString TriggerName, Actor* TargetActor, FString ComponentName);// 0x315fe3fee041
	int PlayVoice3DByName(FString EventName, Actor* Speaker, bool WaitUntilCurrentEnd, FString ExternalFileName, int RandomCount);// 0x315ee3fee041
	int PlayVoice3D(AkAudioEvent* EventReference, Actor* Speaker, bool WaitUntilCurrentEnd, FString ExternalFileName, int RandomCount);// 0x315de3fee041
	int PlayVoice2DByName(FString EventName, FString ExternalFileName, int RandomCount, FString Source);// 0x315ce3fee041
	int PlayVoice2D(AkAudioEvent* EventReference, FString ExternalFileName, int RandomCount, FString Source);// 0x315be3fee041
	int64 PlaySoundAtLocationByName(FString EventName, Object* Source, Vector Location, Rotator Orientation, bool UseAuxSend);// 0x315ae3fee041
	int64 PlaySoundAtLocation(AkAudioEvent* EventReference, Object* Source, Vector Location, Rotator Orientation, bool UseAuxSend);// 0x3159e3fee041
	int PlaySound3DByName(FString EventName, Actor* Emitter, FString ComponentName, bool StopOnDestroy, FString Source);// 0x3158e3fee041
	int PlaySound3D(AkAudioEvent* EventReference, Actor* Emitter, FString ComponentName, bool StopOnDestroy, FString Source);// 0x3157e3fee041
	int PlaySound2DByName(FString EventName, FString Source);// 0x3156e3fee041
	int PlaySound2D(AkAudioEvent* EventReference, Object* Source);// 0x3155e3fee041
	int PlayMovieSound(AkAudioEvent* EventReference, Object* Source, int CallbackTypes);// 0x3154e3fee041
	int PlayIncidentalMusicByName(FString EventName, Actor* Player);// 0x3153e3fee041
	int PlayIncidentalMusic(AkAudioEvent* EventReference, Actor* Player);// 0x3152e3fee041
	int PlayBackgroundMusicByName(FString EventName, FString Source);// 0x3151e3fee041
	int PlayBackgroundMusic(AkAudioEvent* EventReference, Object* Source);// 0x3150e3fee041
	void PauseSound(AkAudioEvent* EventReference, Actor* Emitter, FString ComponentName, int PlayingID);// 0x314fe3fee041
	void MuteWwiseAudio();// 0x314ee3fee041
	int LoadBankByName(FString BankName, FString Source, bool Async, out const delegate LoadFinishCallback);// 0x314de3fee041
	int LoadBank(AkAudioBank* BankReference, Object* Source, bool Async, out const delegate LoadFinishCallback);// 0x314ce3fee041
	bool IsSwitchAt(FString SwitchGroupName, FString SwitchName, Actor* TargetActor, FString ComponentName);// 0x314be3fee041
	bool IsStateAt(FString StateGroupName, FString StateName);// 0x314ae3fee041
	bool IsPlayingIDActiveByName(FString EventName, int PlayingID);// 0x3149e3fee041
	bool IsPlayingIDActive(AkAudioEvent* EventReference, int PlayingID);// 0x3148e3fee041
	bool IsCharacterSpeakingVoice(Actor* Speaker);// 0x3147e3fee041
	int GetSourcePlayPosition(int PlayingID);// 0x3146e3fee041
	float GetRTPCValue(FString ParameterName, Actor* Emitter, FString ComponentName);// 0x3145e3fee041
	bool GetBluetoothState();// 0x3144e3fee041
	void BreakSoundByName(FString EventName, Actor* Emitter, FString ComponentName, int PlayingID);// 0x3143e3fee041
	void BreakSound(AkAudioEvent* EventReference, Actor* Emitter, FString ComponentName, int PlayingID);// 0x3142e3fee041

--------------------------------
Class: AudioProfileInfoManager.BlueprintFunctionLibrary.Object
	void UnRegister();// 0x319fe3fee041
	void StartAvgRecord();// 0x319ee3fee041
	void SetShowSplineSoundOpen(bool Value);// 0x319de3fee041
	void SetShowSpatialVolumeOpen(bool Value);// 0x319ce3fee041
	void SetShowEmitHintOpen(bool Value);// 0x319be3fee041
	void SetReverbOpen(bool Value);// 0x319ae3fee041
	void SetOBOCOpen(bool Value);// 0x3199e3fee041
	void Register();// 0x3198e3fee041
	void PTStopWwiseEventByName(FString EventName);// 0x3197e3fee041
	void PTPostWwiseEventByName(FString EventName, int Count);// 0x3196e3fee041
	AudioStudioProfileData GetLastAudioDebugInfo();// 0x3195e3fee041
	AudioStudioProfileData GetAverageAvgAudioDebugInfo(bool clearEvents);// 0x3194e3fee041
	AudioStudioProfileData GetAverageAudioDebugInfo(bool clearEvents);// 0x3193e3fee041
	AudioConsoleMessage GetAudioEventMsg(int Index);// 0x3192e3fee041
	int GetAudioEventCount();// 0x3191e3fee041
	void EndAvgRecord();// 0x3190e3fee041
	void DebugEmitHintAnim();// 0x318fe3fee041
	void ClearAudioEventMsg();// 0x318ee3fee041
	void AddEmitHintIgnoreEvent(FString ignoreEvent);// 0x318de3fee041

--------------------------------
Class: AudioStudioProfileData
	double ak_totalCPU;//[Offset: 0x0, Size: 0x8]
	double ak_pluginCPU;//[Offset: 0x8, Size: 0x8]
	double ak_calCpuByRendertime;//[Offset: 0x10, Size: 0x8]
	uint32 ak_physicalVoices;//[Offset: 0x18, Size: 0x4]
	uint32 ak_virtualVoices;//[Offset: 0x1c, Size: 0x4]
	uint32 ak_totalVoices;//[Offset: 0x20, Size: 0x4]
	uint32 ak_nbActiveEvents;//[Offset: 0x24, Size: 0x4]
	float ak_memory;//[Offset: 0x28, Size: 0x4]
	float gameCPU;//[Offset: 0x2c, Size: 0x4]
	float FrameTime;//[Offset: 0x30, Size: 0x4]
	float gameThreadTime;//[Offset: 0x34, Size: 0x4]
	float gameMemory;//[Offset: 0x38, Size: 0x4]
	uint32 ak_memory_Used;//[Offset: 0x3c, Size: 0x4]
	uint32 ak_memory_DeviceUsed;//[Offset: 0x40, Size: 0x4]
	uint32 ak_memory_Reserved;//[Offset: 0x44, Size: 0x4]
	uint32 ak_memory_Max;//[Offset: 0x48, Size: 0x4]
	float ak_volume_bus_weapon;//[Offset: 0x4c, Size: 0x4]
	float ak_volume_bus_action;//[Offset: 0x50, Size: 0x4]
	float ak_volume_bus_ambience;//[Offset: 0x54, Size: 0x4]
	float ak_volume_bus_voice;//[Offset: 0x58, Size: 0x4]
	int ak_dolby_switch;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: AudioConsoleMessage
	float TimeSeconds;//[Offset: 0x0, Size: 0x4]
	byte Verbosity;//[Offset: 0x4, Size: 0x1]
	byte Action;//[Offset: 0x5, Size: 0x1]
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	FString ObjectName;//[Offset: 0x8, Size: 0x10]
	FString GameObject;//[Offset: 0x18, Size: 0x10]
	float Value;//[Offset: 0x28, Size: 0x4]
	FString Source;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AudioStudioSettings.Object
	FString[] PersistentBanks;//[Offset: 0x28, Size: 0x10]
	FString[] InitialStates;//[Offset: 0x38, Size: 0x10]
	FString[] InitialEvents;//[Offset: 0x48, Size: 0x10]
	<FString,LevelAudioData> LevelAudioConfigs;//[Offset: 0x58, Size: 0x50]
	byte DiffractionEnabledQuality;//[Offset: 0xa8, Size: 0x1]
	byte EarlyReflectionEnabledQuality;//[Offset: 0xa9, Size: 0x1]
	byte OcclusionObstructionEnabledQuality;//[Offset: 0xaa, Size: 0x1]
	byte LateReverbEnabledQuality;//[Offset: 0xab, Size: 0x1]
	byte SoundObjectPoolSize;//[Offset: 0xac, Size: 0x1]
	bool UnloadLevelAudioData(FString LevelName);// 0x31a7e3fee041
	bool LoadLevelAudioData(FString LevelName);// 0x31a6e3fee041
	void LoadInitAudioData();// 0x31a5e3fee041
	FString[] GetBankReferencedLevels(FString BankName);// 0x31a4e3fee041

--------------------------------
Class: LevelAudioData
	FString InheritedConfigName;//[Offset: 0x0, Size: 0x10]
	FString[] Levels;//[Offset: 0x10, Size: 0x10]
	FString[] Banks;//[Offset: 0x20, Size: 0x10]
	FString[] States;//[Offset: 0x30, Size: 0x10]
	FString[] Events;//[Offset: 0x40, Size: 0x10]
	bool UnloadBanksOnLevelUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool StopEventsOnLevelUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool StopAll2DSoundsOnLevelUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool LevelNameExactMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]

--------------------------------
Class: AudioStudioEditorSettings.Object
	bool ShowEmitterIcons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: EmitterListenerManager.WorldSubsystem.Subsystem.Object
	delegate OnVoiceDialogEnd;//[Offset: 0x30, Size: 0x10]
	AkComponent*[] DefaultEmitters;//[Offset: 0x50, Size: 0x10]
	AudioEmitter3D*[] AmbienceEmitters;//[Offset: 0x60, Size: 0x10]
	AkComponent*[] DefaultListeners;//[Offset: 0x70, Size: 0x10]
	AkAcousticPortal*[] Portals;//[Offset: 0x80, Size: 0x10]
	AkComponent* SpatialAudioListener;//[Offset: 0x90, Size: 0x8]
	<AkRoomComponent*,AkLateReverbComponent*> AkRoomLateReverbMap;//[Offset: 0x98, Size: 0x50]
	<Actor*,FString> AnimationSoundMap;//[Offset: 0xf0, Size: 0x50]
	<AkAudioEvent*,TArrUMultiSourceSoundComponent> MultiSourceEvents;//[Offset: 0x140, Size: 0x50]
	FoliageSoundPlaybackData*[] FoliageSoundPlaybackDatas;//[Offset: 0x198, Size: 0x10]
	EmitterListenerManager* GetInstance(Object* WorldContextObject);// 0x31a8e3fee041

--------------------------------
Class: TArrUMultiSourceSoundComponent
	MultiSourceSoundComponent*[] TArrUMultiSourceSoundComponent;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MultiSourceSoundComponent.SceneComponent.ActorComponent.Object
	AkAudioEvent* AudioEvent;//[Offset: 0x208, Size: 0x8]
	void DeactivateSoundData();// 0x31bae3fee041
	void ActivateSoundData();// 0x31b9e3fee041

--------------------------------
Class: FoliageSoundPlaybackData.Object
	FoliageSoundConfig* SoundConfig;//[Offset: 0x28, Size: 0x8]
	FoliageSoundComponent*[] FoliageSoundInstances;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: FoliageSoundConfig.DataAsset.Object
	AkAudioEvent* AudioEvent;//[Offset: 0x30, Size: 0x8]
	float TriggerIntervalMin;//[Offset: 0x38, Size: 0x4]
	float TriggerIntervalMax;//[Offset: 0x3c, Size: 0x4]
	float MinHeight;//[Offset: 0x40, Size: 0x4]
	float MaxHeight;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: FoliageSoundComponent.AudioStudioComponent.ActorComponent.Object
	FoliageSoundConfig*[] SoundConfigs;//[Offset: 0xb8, Size: 0x10]
	float SearchRadius;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: GlobalAmbienceEmitter.AudioEmitter3D.Actor.Object
	SplineSound* OverridingSplineSound;//[Offset: 0x310, Size: 0x8]
	AkLateReverbComponent* LateReverb;//[Offset: 0x318, Size: 0x8]

--------------------------------
Class: InterpTrackAkAudioEvent.InterpTrackVectorBase.InterpTrack.Object
	AkAudioEventTrackKey[] Events;//[Offset: 0x90, Size: 0x10]
	bool bContinueEventOnMatineeEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: AkAudioEventTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x8, Size: 0x8]
	FString EventName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: InterpTrackAkAudioRTPC.InterpTrackFloatBase.InterpTrack.Object
	FString Param;//[Offset: 0x90, Size: 0x10]
	bool bPlayOnReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bContinueRTPCOnMatineeEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: InterpTrackInstAkAudioEvent.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstAkAudioRTPC.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: LoadBankComponent.AudioStudioComponent.ActorComponent.Object
	AkAudioBank* SoundBank;//[Offset: 0xb8, Size: 0x8]
	bool UseCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: MovieSceneBuiltInEasingFunction.Object
	enum Type;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MovieSceneAkAudioEventSection.MovieSceneSection.MovieSceneSignedObject.Object
	AkAudioEvent* Event;//[Offset: 0x120, Size: 0x8]
	bool RetriggerEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	int ScrubTailLengthMs;//[Offset: 0x12c, Size: 0x4]
	bool StopAtSectionEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	FString EventName;//[Offset: 0x138, Size: 0x10]
	float MaxSourceDuration;//[Offset: 0x168, Size: 0x4]
	FString MaxDurationSourceID;//[Offset: 0x170, Size: 0x10]

--------------------------------
Class: MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10]
	bool bIsAMasterTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: MovieSceneAkAudioEventTrack.MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneAkAudioRTPCSection.MovieSceneSection.MovieSceneSignedObject.Object
	AkRtpc* RTPC;//[Offset: 0xe0, Size: 0x8]
	FString Name;//[Offset: 0xe8, Size: 0x10]
	RichCurve FloatCurve;//[Offset: 0xf8, Size: 0x80]
	MovieSceneFloatChannelSerializationHelper FloatChannelSerializationHelper;//[Offset: 0x178, Size: 0x30]
	MovieSceneFloatChannel RTPCChannel;//[Offset: 0x1a8, Size: 0xa0]

--------------------------------
Class: MovieSceneFloatChannelSerializationHelper
	byte PreInfinityExtrap;//[Offset: 0x0, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x1, Size: 0x1]
	int[] Times;//[Offset: 0x8, Size: 0x10]
	MovieSceneFloatValueSerializationHelper[] Values;//[Offset: 0x18, Size: 0x10]
	float DefaultValue;//[Offset: 0x28, Size: 0x4]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: MovieSceneFloatValueSerializationHelper
	float Value;//[Offset: 0x0, Size: 0x4]
	byte InterpMode;//[Offset: 0x4, Size: 0x1]
	byte TangentMode;//[Offset: 0x5, Size: 0x1]
	MovieSceneTangentDataSerializationHelper Tangent;//[Offset: 0x8, Size: 0x14]

--------------------------------
Class: MovieSceneTangentDataSerializationHelper
	float ArriveTangent;//[Offset: 0x0, Size: 0x4]
	float LeaveTangent;//[Offset: 0x4, Size: 0x4]
	byte TangentWeightMode;//[Offset: 0x8, Size: 0x1]
	float ArriveTangentWeight;//[Offset: 0xc, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: MovieSceneFloatChannel.MovieSceneChannel
	byte PreInfinityExtrap;//[Offset: 0x8, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x9, Size: 0x1]
	FrameNumber[] Times;//[Offset: 0x10, Size: 0x10]
	MovieSceneFloatValue[] Values;//[Offset: 0x20, Size: 0x10]
	float DefaultValue;//[Offset: 0x30, Size: 0x4]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	MovieSceneKeyHandleMap KeyHandles;//[Offset: 0x38, Size: 0x60]
	FrameRate TickResolution;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: MovieSceneChannel

--------------------------------
Class: MovieSceneFloatValue
	float Value;//[Offset: 0x0, Size: 0x4]
	MovieSceneTangentData Tangent;//[Offset: 0x4, Size: 0x14]
	byte InterpMode;//[Offset: 0x18, Size: 0x1]
	byte TangentMode;//[Offset: 0x19, Size: 0x1]
	byte PaddingByte;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: MovieSceneTangentData
	float ArriveTangent;//[Offset: 0x0, Size: 0x4]
	float LeaveTangent;//[Offset: 0x4, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x8, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0xc, Size: 0x4]
	byte TangentWeightMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MovieSceneKeyHandleMap.KeyHandleLookupTable

--------------------------------
Class: KeyHandleLookupTable

--------------------------------
Class: MovieSceneAkAudioRTPCTrack.MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MultiPositionSound.AudioEmitter3D.Actor.Object
	SceneComponent*[] EmitterPoints;//[Offset: 0x310, Size: 0x10]

--------------------------------
Class: MyAudioDebugEmitHint.Actor.Object
	void OnAudioDebugSpatialVolumeHintTrigger();// 0x31bce3fee041
	void OnAudioDebugEmitHintTrigger();// 0x31bbe3fee041

--------------------------------
Class: ParticleSoundComponent.AudioStudioComponent.ActorComponent.Object
	ParticleSoundData[] SoundData;//[Offset: 0xb8, Size: 0x10]
	bool PlaySoundAtLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	void OnParticleSpawn(FName EventName, float EmitterTime, Vector Location, Vector Velocity);// 0x31c0e3fee041
	void OnParticleDeath(FName EventName, float EmitterTime, int ParticleTime, Vector Location, Vector Velocity, Vector Direction);// 0x31bfe3fee041
	void OnParticleCollide(FName EventName, float EmitterTime, int ParticleTime, Vector Location, Vector Velocity, Vector Direction, Vector Normal, FName BoneName, PhysicalMaterial* PhysMat);// 0x31bee3fee041
	void OnParticleBurst(FName EventName, float EmitterTime, int ParticleCount);// 0x31bde3fee041

--------------------------------
Class: ParticleSoundData
	byte ParticleEventType;//[Offset: 0x0, Size: 0x1]
	FName ParticleEventName;//[Offset: 0x4, Size: 0x8]
	AkAudioEvent* AudioEvent;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: PostEventAsync.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x30, Size: 0x10]
	AkAudioEvent* AkEvent;//[Offset: 0x48, Size: 0x8]
	Actor* Actor;//[Offset: 0x50, Size: 0x8]
	AkExternalSourceInfo[] ExternalSources;//[Offset: 0x70, Size: 0x10]
	PostEventAsync* PostEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, Actor* Actor, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool bStopWhenAttachedToDestroyed);// 0x31c2e3fee041
	void PollPostEventFuture();// 0x31c1e3fee041

--------------------------------
Class: PostEventAtLocationAsync.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x30, Size: 0x10]
	Object* WorldContextObject;//[Offset: 0x40, Size: 0x8]
	AkAudioEvent* AkEvent;//[Offset: 0x48, Size: 0x8]
	PostEventAtLocationAsync* PostEventAtLocationAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, Vector Location, Rotator Orientation);// 0x31c4e3fee041
	void PollPostEventFuture();// 0x31c3e3fee041

--------------------------------
Class: RainSoundPlane.AudioEmitter3D.Actor.Object

--------------------------------
Class: SetAttenuationComponent.AudioStudioComponent.ActorComponent.Object
	float ActivateValue;//[Offset: 0xb8, Size: 0x4]
	float ResetValue;//[Offset: 0xbc, Size: 0x4]
	bool IsGlobal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool IsAbsoluteValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: SetRTPCComponent.AudioStudioComponent.ActorComponent.Object
	FString RTPCName;//[Offset: 0xb8, Size: 0x10]
	float InitialValue;//[Offset: 0xc8, Size: 0x4]
	float ResetValue;//[Offset: 0xcc, Size: 0x4]
	bool IsGlobal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool BindToGeographicRTPCType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	enum GeographicRTPCType;//[Offset: 0xd2, Size: 0x1]
	bool TickWithAkComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 0x1]
	bool SlewWithDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	float CooldownTime;//[Offset: 0xd8, Size: 0x4]
	bool IgnoreTickWhenListeningToSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	float CurrentValue;//[Offset: 0xe8, Size: 0x4]
	Actor* ConnectedActor;//[Offset: 0xf0, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0xf8, Size: 0x8]
	void TickRTPC(float DeltaTime);// 0x31c6e3fee041
	void ConnectToGameParameter(out float ConnectingParameter, Actor* TargetActor);// 0x31c5e3fee041

--------------------------------
Class: LODViewDistanceVolume.PhysicsVolume.Volume.Brush.Actor.Object
	Actor*[] SubActors;//[Offset: 0x338, Size: 0x10]
	FString[] LevelPathNames;//[Offset: 0x348, Size: 0x10]
	float DrawDistanceMultiply;//[Offset: 0x358, Size: 0x4]
	float DrawDistanceAdd;//[Offset: 0x35c, Size: 0x4]
	void ActorEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x31cde3fee041
	void ActorBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x31cce3fee041

--------------------------------
Class: ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 0x1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f1, Size: 0x1]
	BodySetup* ProcMeshBodySetup;//[Offset: 0x5f8, Size: 0x8]
	ProcMeshSection[] ProcMeshSections;//[Offset: 0x600, Size: 0x10]
	KConvexElem[] CollisionConvexElems;//[Offset: 0x610, Size: 0x10]
	BoxSphereBounds LocalBounds;//[Offset: 0x620, Size: 0x1c]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x640, Size: 0x10]
	void UpdateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x31d8e3fee041
	void UpdateMeshSection(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x31d7e3fee041
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x31d6e3fee041
	bool IsMeshSectionVisible(int SectionIndex);// 0x31d5e3fee041
	int GetNumSections();// 0x31d4e3fee041
	void CreateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x31d3e3fee041
	void CreateMeshSection(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x31d2e3fee041
	void ClearMeshSection(int SectionIndex);// 0x31d1e3fee041
	void ClearCollisionConvexMeshes();// 0x31d0e3fee041
	void ClearAllMeshSections();// 0x31cfe3fee041
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x31cee3fee041

--------------------------------
Class: ProcMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0xc]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ProcMeshSection
	ProcMeshVertex[] ProcVertexBuffer;//[Offset: 0x0, Size: 0x10]
	uint32[] ProcIndexBuffer;//[Offset: 0x10, Size: 0x10]
	Box SectionLocalBox;//[Offset: 0x20, Size: 0x1c]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bSectionVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: ProcMeshVertex
	Vector position;//[Offset: 0x0, Size: 0xc]
	Vector Normal;//[Offset: 0xc, Size: 0xc]
	ProcMeshTangent Tangent;//[Offset: 0x18, Size: 0x10]
	Color Color;//[Offset: 0x28, Size: 0x4]
	Vector2D UV0;//[Offset: 0x2c, Size: 0x8]
	Vector2D UV1;//[Offset: 0x34, Size: 0x8]
	Vector2D UV2;//[Offset: 0x3c, Size: 0x8]
	Vector2D UV3;//[Offset: 0x44, Size: 0x8]

--------------------------------
Class: MFFoliageBillboardMeshComponent.ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: MFFoliageBillboardProxy.Actor.Object
	MaterialInterface* MaterialInterface;//[Offset: 0x2f8, Size: 0x8]
	<Level*,MFFoliageBillboardInstanceInfo> LoadedLevels;//[Offset: 0x300, Size: 0x50]
	int TotalProcMeshSectionNums;//[Offset: 0x350, Size: 0x4]
	MFFoliageBillboardMeshComponent* FoliageBillboardComponent;//[Offset: 0x358, Size: 0x8]

--------------------------------
Class: MFFoliageBillboardInstanceInfo
	int SectionIndex;//[Offset: 0x0, Size: 0x4]
	bool bVisibile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: MFGeneralDynamicCombineMeshComponent.ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: MFGeneralDynamicCombineProxy.Actor.Object
	MaterialInterface*[] MaterialInterfaces;//[Offset: 0x2f0, Size: 0x10]
	int MaxVertexNumsPerMesh;//[Offset: 0x300, Size: 0x4]
	int DistanceToUseMaxLOD;//[Offset: 0x304, Size: 0x4]
	int DistanceToHideMesh;//[Offset: 0x308, Size: 0x4]
	<Level*,MFStaticMeshComponentGroupForCombine> AddStaticMeshComponentGroups;//[Offset: 0x310, Size: 0x50]
	<MaterialInterface*,int> AddedMaterials;//[Offset: 0x360, Size: 0x50]
	MFGeneralDynamicCombineMeshComponent*[] CombinedMeshComponents;//[Offset: 0x3b0, Size: 0x10]
	<uint32,int> SectionIndexMap;//[Offset: 0x3c0, Size: 0x50]

--------------------------------
Class: MFStaticMeshComponentGroupForCombine
	MFStaticMeshComponentForCombine[] StaticMeshComponents;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MFStaticMeshComponentForCombine
	StaticMeshComponent* Component;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]
	uint32 HashCode;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: MFWorldComposition.WorldComposition.Object
	FString[] ClientLevelPathFilters;//[Offset: 0x68, Size: 0x10]
	FString[] ClientLevelPathIgnores;//[Offset: 0x78, Size: 0x10]
	FString[] ClientLevelPathConsider;//[Offset: 0x88, Size: 0x10]
	FString[] ServerLevelPathFilters;//[Offset: 0x98, Size: 0x10]
	FString[] ServerLevelPathIgnores;//[Offset: 0xa8, Size: 0x10]
	FString[] ServerLevelPathConsider;//[Offset: 0xb8, Size: 0x10]
	bool bOverrideStreamingDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	float StreamingDistance;//[Offset: 0xcc, Size: 0x4]
	LevelStreaming*[] DiscardTilesStreaming;//[Offset: 0xf0, Size: 0x10]
	LevelStreaming*[] VolumedLevelStreaming;//[Offset: 0x100, Size: 0x10]
	bool LimitLoadLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	int MaxAsynLoadNum;//[Offset: 0x124, Size: 0x4]
	LevelStreaming*[] CentreLevels;//[Offset: 0x128, Size: 0x10]
	int PerFrameCount;//[Offset: 0x13c, Size: 0x4]
	void UnLoadLevel(FString LevelName);// 0x31dde3fee041
	void SetOverrideStreamingDistance(bool bOverride, float StreamingDistance);// 0x31dce3fee041
	void RestoreLevel(FString LevelName);// 0x31dbe3fee041
	bool IsCenterLevelLoadComplete();// 0x31dae3fee041
	void AddtionFilterTiles(FString[] AddtionIgnores);// 0x31d9e3fee041

--------------------------------
Class: MFWorldCompositionActor.Actor.Object
	FString[] ClientLevelPathFilters;//[Offset: 0x2e0, Size: 0x10]
	FString[] ClientLevelPathIgnores;//[Offset: 0x2f0, Size: 0x10]
	FString[] ClientLevelPathConsider;//[Offset: 0x300, Size: 0x10]
	FString[] ServerLevelPathFilters;//[Offset: 0x310, Size: 0x10]
	FString[] ServerLevelPathIgnores;//[Offset: 0x320, Size: 0x10]
	FString[] ServerLevelPathConsider;//[Offset: 0x330, Size: 0x10]
	bool bUseLandscapeMeshProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	LandscapeMeshProxyActor* CachedLandscapeMeshProxyActor;//[Offset: 0x348, Size: 0x8]
	LandscapeComponent*[] CachedLandscapeComponents;//[Offset: 0x350, Size: 0x10]
	LODActor*[] CachedLODActors;//[Offset: 0x360, Size: 0x10]
	MaterialParameterCollection* MPC_LandscapeRegion;//[Offset: 0x370, Size: 0x8]
	float LandscapeViewDistance;//[Offset: 0x378, Size: 0x4]
	bool bOverrideStreamingDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1]
	float StreamingDistance;//[Offset: 0x380, Size: 0x4]

--------------------------------
Class: LandscapeMeshProxyActor.Actor.Object
	LandscapeMeshProxyComponent* LandscapeMeshProxyComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: LandscapeMeshProxyComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid LandscapeGuid;//[Offset: 0x658, Size: 0x10]
	IntPoint[] ProxyComponentBases;//[Offset: 0x668, Size: 0x10]
	int8 ProxyLOD;//[Offset: 0x678, Size: 0x1]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x5b0, Size: 0x4]
	int SectionBaseY;//[Offset: 0x5b4, Size: 0x4]
	int ComponentSizeQuads;//[Offset: 0x5b8, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x5bc, Size: 0x4]
	int NumSubsections;//[Offset: 0x5c0, Size: 0x4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x5c8, Size: 0x8]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x5d0, Size: 0x8]
	LandscapeComponentMaterialOverride[] OverrideMaterials;//[Offset: 0x5d8, Size: 0x10]
	bool bRemoveMobileWeightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 0x1]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x5f0, Size: 0x10]
	MaterialInstanceDynamic*[] MaterialInstancesDynamic;//[Offset: 0x600, Size: 0x10]
	int8[] LODIndexToMaterialIndex;//[Offset: 0x610, Size: 0x10]
	int8[] MaterialIndexToDisabledTessellationMaterial;//[Offset: 0x620, Size: 0x10]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x630, Size: 0x8]
	Vector4 WeightmapScaleBias;//[Offset: 0x640, Size: 0x10]
	float WeightmapSubsectionOffset;//[Offset: 0x650, Size: 0x4]
	Vector4 HeightmapScaleBias;//[Offset: 0x660, Size: 0x10]
	Box CachedLocalBox;//[Offset: 0x670, Size: 0x1c]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x68c, Size: 0x1c]
	Texture2D* HeightmapTexture;//[Offset: 0x6a8, Size: 0x8]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x6b0, Size: 0x10]
	Texture2D*[] WeightmapTextures;//[Offset: 0x6c0, Size: 0x10]
	LandscapeLODStreamingProxy* LODStreamingProxy;//[Offset: 0x6d0, Size: 0x8]
	Guid MapBuildDataId;//[Offset: 0x6d8, Size: 0x10]
	Guid[] IrrelevantLights;//[Offset: 0x6e8, Size: 0x10]
	int CollisionMipLevel;//[Offset: 0x6f8, Size: 0x4]
	int SimpleCollisionMipLevel;//[Offset: 0x6fc, Size: 0x4]
	float NegativeZBoundsExtension;//[Offset: 0x700, Size: 0x4]
	float PositiveZBoundsExtension;//[Offset: 0x704, Size: 0x4]
	float StaticLightingResolution;//[Offset: 0x708, Size: 0x4]
	int ForcedLOD;//[Offset: 0x70c, Size: 0x4]
	int LODBias;//[Offset: 0x710, Size: 0x4]
	Guid StateId;//[Offset: 0x714, Size: 0x10]
	Guid BakedTextureMaterialGuid;//[Offset: 0x724, Size: 0x10]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x738, Size: 0x8]
	byte MobileBlendableLayerMask;//[Offset: 0x740, Size: 0x1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x748, Size: 0x8]
	MaterialInterface*[] MobileMaterialInterfaces;//[Offset: 0x750, Size: 0x10]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x760, Size: 0x10]
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0x671ae3fee041
	float EditorGetPaintLayerWeightByNameAtLocation(out const Vector InLocation, const FName InPaintLayerName);// 0x6719e3fee041
	float EditorGetPaintLayerWeightAtLocation(out const Vector InLocation, LandscapeLayerInfoObject* PaintLayer);// 0x6718e3fee041

--------------------------------
Class: LandscapeComponentMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x5b0, Size: 0x10]
	int SectionBaseX;//[Offset: 0x5c0, Size: 0x4]
	int SectionBaseY;//[Offset: 0x5c4, Size: 0x4]
	int CollisionSizeQuads;//[Offset: 0x5c8, Size: 0x4]
	float CollisionScale;//[Offset: 0x5cc, Size: 0x4]
	int SimpleCollisionSizeQuads;//[Offset: 0x5d0, Size: 0x4]
	byte[] CollisionQuadFlags;//[Offset: 0x5d8, Size: 0x10]
	Guid HeightfieldGuid;//[Offset: 0x5e8, Size: 0x10]
	Box CachedLocalBox;//[Offset: 0x5f8, Size: 0x1c]
	LandscapeComponent* RenderComponent;//[Offset: 0x614, Size: 0x1c]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x640, Size: 0x10]
	LandscapeComponent* GetRenderComponent();// 0x671be3fee041

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8]
	float Hardness;//[Offset: 0x38, Size: 0x4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8]
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 0x1]
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: LandscapeLODStreamingProxy.StreamableRenderAsset.Object

--------------------------------
Class: MFWorldCompositionStatics.BlueprintFunctionLibrary.Object
	void UnLoadLevel(Object* WorldContextObject, FString LevelName);// 0x31e3e3fee041
	void SetOverrideStreamingDistance(Object* WorldContextObject, bool bOverride, float StreamingDistance);// 0x31e2e3fee041
	void SetLimitLoadLevelEnable(Object* WorldContextObject, bool bEnable);// 0x31e1e3fee041
	void RestoreLevel(Object* WorldContextObject, FString LevelName);// 0x31e0e3fee041
	void ReloadLimitLoadLevel(Object* WorldContextObject);// 0x31dfe3fee041
	bool IsCenterLevelLoadComplete(Object* WorldContextObject);// 0x31dee3fee041

--------------------------------
Class: KismetProceduralMeshLibrary.BlueprintFunctionLibrary.Object
	void SliceProceduralMesh(ProceduralMeshComponent* InProcMesh, Vector PlanePosition, Vector PlaneNormal, bool bCreateOtherHalf, out ProceduralMeshComponent* OutOtherHalfProcMesh, enum CapOption, MaterialInterface* CapMaterial);// 0x31ede3fee041
	void GetSectionFromStaticMesh(StaticMesh* InMesh, int LODIndex, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x31ece3fee041
	void GetSectionFromProceduralMesh(ProceduralMeshComponent* InProcMesh, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x31ebe3fee041
	void GenerateBoxMesh(Vector BoxRadius, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x31eae3fee041
	void CreateGridMeshWelded(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, float GridSpacing);// 0x31e9e3fee041
	void CreateGridMeshTriangles(int NumX, int NumY, bool bWinding, out int[] Triangles);// 0x31e8e3fee041
	void CreateGridMeshSplit(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, out Vector2D[] UV1s, float GridSpacing);// 0x31e7e3fee041
	void CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent* StaticMeshComponent, int LODIndex, ProceduralMeshComponent* ProcMeshComponent, bool bCreateCollision);// 0x31e6e3fee041
	void ConvertQuadToTriangles(out int[] Triangles, int Vert0, int Vert1, int Vert2, int Vert3);// 0x31e5e3fee041
	void CalculateTangentsForMesh(out const Vector[] Vertices, out const int[] Triangles, out const Vector2D[] UVs, out Vector[] Normals, out ProcMeshTangent[] Tangents);// 0x31e4e3fee041

--------------------------------
Class: MFPWObject.Object

--------------------------------
Class: MFGCloudService.MFPWObject.Object

--------------------------------
Class: MFBoxService.MFGCloudService.MFPWObject.Object
	bool OpenCommunity(FString URL);// 0x31f1e3fee041
	void OnBoxCallbackUnreal(int ClientType, FString Msg);// 0x31f0e3fee041
	bool IsRunning();// 0x31efe3fee041
	void InitCommunity(FString JsonString);// 0x31eee3fee041

--------------------------------
Class: MFComplianceService.MFGCloudService.MFPWObject.Object
	MFIntlComplianceObserver* INTLComplianceObserver;//[Offset: 0x40, Size: 0x8]
	bool ComplianceSetUserProfile(const FString GameId, const FString Openid, const FString Token, const int ChannelId, const FString Region);// 0x31f9e3fee041
	void ComplianceSetParentCertificateStatus(int Status);// 0x31f8e3fee041
	void ComplianceSetEUAgreeStatus(int Status);// 0x31f7e3fee041
	void ComplianceSetAdulthood(int Status);// 0x31f6e3fee041
	void ComplianceSendEmail(const FString email, const FString userName);// 0x31f5e3fee041
	void ComplianceQueryUserStatus();// 0x31f4e3fee041
	void ComplianceQueryIsEEA(const FString Region);// 0x31f3e3fee041
	void ComplianceCommitBirthday(const int BirthdayYear, const int BirthdayMonth, const int BirthdayDay);// 0x31f2e3fee041

--------------------------------
Class: MFIntlComplianceObserver.MFPWObject.Object

--------------------------------
Class: MFCTIPayObserver.MFPWObject.Object

--------------------------------
Class: MFGCloudCommonStatics.BlueprintFunctionLibrary.Object
	FString GetNetworkConnectionType();// 0x31fbe3fee041
	FString GetCarrier();// 0x31fae3fee041

--------------------------------
Class: MFGCloudCrashObserver.MFPWObject.Object

--------------------------------
Class: MFGCloudCrashService.MFGCloudService.MFPWObject.Object
	MFGCloudCrashObserver* CrashObserver;//[Offset: 0x40, Size: 0x8]
	void UACrastTest();// 0x3208e3fee041
	void SetWaterMarkInfo(FString Info);// 0x3207e3fee041
	void SetUserValue(FString Key, FString Value);// 0x3206e3fee041
	void SetUserId(FString userId);// 0x3205e3fee041
	void RepportWithLogLua(Object* WorldContextObject, FString Name, FString buf);// 0x3204e3fee041
	void ReportException(int Type, FString exceptionName, FString exceptionMsg, FString exceptionStack, out <FString,FString> extInfo, int repFlag);// 0x3203e3fee041
	void OnStepToGameCall();// 0x3202e3fee041
	void OnConsoleDumphitches(int from, bool bStart);// 0x3201e3fee041
	void LogMonitorInfo(FString Info);// 0x3200e3fee041
	void LogInfo(int Level, FString Tag, FString Log);// 0x31ffe3fee041
	bool is_RUNNING_WITH_ASAN();// 0x31fee3fee041
	FString GetWaterMarkInfo();// 0x31fde3fee041
	void ConsoleDumphitches(bool bStart);// 0x31fce3fee041

--------------------------------
Class: MFGCloudDolphinService.MFGCloudService.MFPWObject.Object
	void SetPreDownloadDir(FString InDir);// 0x3218e3fee041
	void SetGrayInfo(FString InUserID, FString InWorldID);// 0x3217e3fee041
	void OnNoticeInstallApk(FString InApkPath, bool InResult);// 0x3216e3fee041
	void OnDolphinVersionInfoImplement(bool isAppUpdating, bool isNeedUpdating, bool isForcedUpdating, FString InGameVersion, int64 needDownloadSize, FString userDefineStr);// 0x3215e3fee041
	void OnDolphinStageChanged(int InNewStage);// 0x3214e3fee041
	void OnDolphinRestart();// 0x3213e3fee041
	void OnDolphinProgress(int64 TotalSize, int64 currentSize);// 0x3212e3fee041
	void OnDolphinCallBackSuccess();// 0x3211e3fee041
	void OnDolphinCallBackError(int VersionStage, int ErrorCode);// 0x3210e3fee041
	void OnContinueDolphin(bool bContinue);// 0x320fe3fee041
	void OnCancelDolphin();// 0x320ee3fee041
	bool InstallApk(FString InApkPath);// 0x320de3fee041
	bool InAppInstalled(FString InPackageName);// 0x320ce3fee041
	FString GetPreDownloadDir();// 0x320be3fee041
	FString GetCacheDir();// 0x320ae3fee041
	void CheckUpdate(int InUpdateType, int InChannelId, FString InAppVersion, FString InAssetVersion, FString InRemoteURL, FString InUpdateDir, bool InFixupMode);// 0x3209e3fee041

--------------------------------
Class: MFGCloudFriendObserver.MFPWObject.Object

--------------------------------
Class: MFGCloudFriendService.MFGCloudService.MFPWObject.Object
	Image* Image;//[Offset: 0xe0, Size: 0x8]
	Texture2DDynamic* InDyTexture;//[Offset: 0xe8, Size: 0x8]
	MFGCloudFriendObserver* MFGCloudFriendObserver;//[Offset: 0x100, Size: 0x8]
	MFIntlFriendObserver* MFIntlFriendObserver;//[Offset: 0x108, Size: 0x8]
	void ShareQQZone(FString ThumbPath, FString Link);// 0x3237e3fee041
	void ShareLink(FString Channel, FString Link, FString Thumb, FString Title, FString Desc);// 0x3236e3fee041
	void ShareImgWeChat(FString ImgPath);// 0x3235e3fee041
	void ShareImgQQ(FString ImgPath);// 0x3234e3fee041
	void SendText(FString Channel, FString User, FString Desc, FString extraJson);// 0x3233e3fee041
	void SendResultImg(int Window, FString ThumbPath, FString img);// 0x3232e3fee041
	void SendMiniApp(FString extraJson, FString Channel, FString Thumb, FString Link, FString Title, FString Desc, FString MediaPath, FString User);// 0x3231e3fee041
	void SendLink(FString Channel, FString User, FString Link, FString Thumb, FString Openid, FString Title, FString Desc);// 0x3230e3fee041
	void SendInviteSilent(FString ImgPath, FString User);// 0x322fe3fee041
	void SendInvite(FString ImgPath, int Type, FString extraJson, FString Link, FString Channel, FString Desc, FString User, FString Title);// 0x322ee3fee041
	void SendImgWeChat(FString ImgPath, FString User, FString ThumbPath);// 0x322de3fee041
	void SendImgQQ(FString ImgPath, FString User, FString ThumbPath);// 0x322ce3fee041
	void ScreenShotEvent(bool IsWindow);// 0x322be3fee041
	void SaveResultImg(int X, int Y, int Width, int Height, int Window);// 0x322ae3fee041
	void RobotOpen(bool IsOpen);// 0x3229e3fee041
	void RequestStoragePermissions();// 0x3228e3fee041
	void PullUpMiniApp(FString MediaPath, FString ExtralJson, FString Channel);// 0x3227e3fee041
	void OnShare();// 0x3226e3fee041
	void OnScreenShotPanel();// 0x3225e3fee041
	void OnLoadUrlFinish(FString miniPath, FString bgPath, int bErWeiMa, float Scale);// 0x3224e3fee041
	void OnIOSPhotoPermissionsRequestReturn(bool Status);// 0x3223e3fee041
	void OnIOSPhotoPermissionsCallback(bool Status);// 0x3222e3fee041
	void OnImageFinish(Object* Image1);// 0x3221e3fee041
	void OnAndroidExternalStagePermissionRequestReturn(out const FString[] Permissions, out const bool[] GrantResults);// 0x3220e3fee041
	bool LoadLogoFinish(FString Path);// 0x321fe3fee041
	void LoadImageFromScreenShot(Image* img, int Type, bool specifyRect, int minX, int minY, int maxX, int maxY);// 0x321ee3fee041
	bool GenerateLogoImg();// 0x321de3fee041
	void DestroyDynamicImage();// 0x321ce3fee041
	int CheckStoragePermission();// 0x321be3fee041
	void BindResult(int RetCode);// 0x321ae3fee041
	bool Bind(int channelType, FString subChannel, FString extraJson);// 0x3219e3fee041

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x128, Size: 0x90]
	delegate BrushDelegate;//[Offset: 0x1b8, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x1c8, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1d8, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	bool bAsyncLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e9, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1ec, Size: 0x10]
	Object* DeferredObject;//[Offset: 0x238, Size: 0x28]
	void SetOpacity(float InOpacity);// 0x5df5e3fee041
	void SetColorAndOpacityRBGA(float R, float B, float G, float A);// 0x5df4e3fee041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x5df3e3fee041
	void SetBrushTintColor(SlateColor TintColor);// 0x5df2e3fee041
	void SetBrushSizeXY(float X, float Y);// 0x5df1e3fee041
	void SetBrushSize(Vector2D DesiredSize);// 0x5df0e3fee041
	void SetBrushResourceObject(Object* ResourceObject);// 0x5defe3fee041
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x5deee3fee041
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x5dede3fee041
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x5dece3fee041
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x5debe3fee041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x5deae3fee041
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x5de9e3fee041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x5de8e3fee041
	void SetBrush(out const SlateBrush InBrush);// 0x5de7e3fee041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x5de6e3fee041

--------------------------------
Class: MFIntlFriendObserver.MFPWObject.Object

--------------------------------
Class: AndroidPermissionCallbackProxy.Object
	delegate OnPermissionsGrantedDynamicDelegate;//[Offset: 0x28, Size: 0x10]
	delegate OnExternalStagePermissionsGrantedDynamicDelegate;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MFGCloudGroupObserver.MFPWObject.Object

--------------------------------
Class: MFGCloudGroupService.MFGCloudService.MFPWObject.Object
	MFGCloudGroupObserver* MFGCloudGroupObserver;//[Offset: 0x40, Size: 0x8]
	void UnbindGroup(FString Channel, FString unionID, FString unionName, FString zoneid, FString roleID, FString AreaID);// 0x3244e3fee041
	void SendGroupMessage(FString Channel, FString unionID, FString Link, FString extraJson, FString AreaID, FString Title, FString Desc);// 0x3243e3fee041
	void RemindToBindGroup(FString unionID, FString zoneid, FString roleID, FString roleName, FString leaderOpenID, FString leaderRoleID, FString AreaID);// 0x3242e3fee041
	void OnUnBindGroup(int Status, int thirdCode, FString ThirdMsg);// 0x3241e3fee041
	void OnRemindToBindGroup(int Status, int thirdCode, FString ThirdMsg);// 0x3240e3fee041
	void OnJoinGroup(int Status, int thirdCode, FString ThirdMsg);// 0x323fe3fee041
	void OnGetGroupState(int Status, FString GroupID);// 0x323ee3fee041
	void OnGetGroupRelation(int Status);// 0x323de3fee041
	void OnCreateGroup(int Status, int thirdCode, FString ThirdMsg);// 0x323ce3fee041
	void JoinGroup(FString Channel, FString unionID, FString zoneid, FString roleID, FString GroupID, FString AreaID);// 0x323be3fee041
	void GetGroupState(FString Channel, FString unionID, FString zoneid, FString AreaID);// 0x323ae3fee041
	void GetGroupRelation(FString Channel, FString groupIDOrUnionID, FString AreaID);// 0x3239e3fee041
	void CreateGroup(FString Channel, FString unionID, FString unionName, FString roleName, FString zoneid, FString roleID, FString AreaID);// 0x3238e3fee041

--------------------------------
Class: MFGCloudLoginObserver.MFPWObject.Object

--------------------------------
Class: MFGCloudLoginService.MFGCloudService.MFPWObject.Object
	MFGCloudLoginObserver* LoginObserver;//[Offset: 0x40, Size: 0x8]
	MFIntlLoginObserver* IntlLoginObserver;//[Offset: 0x48, Size: 0x8]
	delegate HttpPostDelegate;//[Offset: 0x50, Size: 0x10]
	void SwitchUser(bool bSwitch);// 0x12d4e3fee041
	bool SetLoginServiceSubClass(class MFGCloudLoginService InSubClass);// 0x12d3e3fee041
	void OnWakeUpProc(int RetCode, FString extraJson);// 0x12d2e3fee041
	void OnINTLAccountResult(int RetCode, int thirdCode, int methodId, FString userName, FString uid, int isRegister, int isReceiveEmail, int isSetPassword);// 0x12d1e3fee041
	void OnAccountLoginProc(int Result, int thirdCode, FString reason, int channelType, FString strOpenID, FString strUserID, FString strTokenAccess, FString strTokenRefresh, FString strTokenPay, FString strPF, FString strPFKey, FString strSTKey, FString regChannel, int FirstLogin, int DeleteAccountStatus);// 0x12d0e3fee041
	void Logout();// 0x12cfe3fee041
	bool Login(int channelType, FString fakeOpenID, FString subChannel, FString extraJson);// 0x12cee3fee041
	void HttpPostRequest(FString URL, FString StrContent);// 0x12cde3fee041
	void HttpPostDelegate__DelegateSignature(FString RspContent);// 0x12cce3fee041
	void GetLoginRet();// 0x12cbe3fee041
	FString GetCachedToken();// 0x12cae3fee041
	FString GetCachedSigKey();// 0x12c9e3fee041
	FString GetCachedOpenID();// 0x12c8e3fee041
	int GetCachedLoginChannel();// 0x12c7e3fee041
	FString GetCachedHeadURL();// 0x12c6e3fee041
	void BindResult(int RetCode);// 0x12c5e3fee041
	bool Bind(int channelType, FString subChannel, FString extraJson);// 0x12c4e3fee041
	void AutoLogin(FString fakeOpenID);// 0x12c3e3fee041

--------------------------------
Class: MFIntlLoginObserver.MFPWObject.Object

--------------------------------
Class: MFGCloudMessageHandler.Object
	void UnInitialize();// 0x325ce3fee041
	void Tick(float DeltaSeconds);// 0x325be3fee041
	void SetSendPkgHeaderZoneID(FString ID);// 0x325ae3fee041
	void SetDevUrl(FString ip, FString Port);// 0x3259e3fee041
	void RequestLogin(FString inPlayerName, bool isReconnected, float overTimeSeconds);// 0x3258e3fee041
	void RelayConnect();// 0x3257e3fee041
	void OnWaitingReliableNumChanged(int NewWaitingReliableNum);// 0x3256e3fee041
	void OnStateChangedProc(int connectorState, int ErrorCode, int extend1, int extend2);// 0x3255e3fee041
	void OnRelayConnectedProc(int ErrorCode);// 0x3254e3fee041
	void OnOverTime(int MsgID, int SerialID, int overtimes, bool isShowError);// 0x3253e3fee041
	void OnDisconnectProc(int ErrorCode);// 0x3252e3fee041
	void OnDataRecvedProc(int ErrorCode);// 0x3251e3fee041
	void OnConnectorInvalid();// 0x3250e3fee041
	void OnConnected(int ErrorCode);// 0x324fe3fee041
	void OnAcquiredWeGameToken(FString PlayerId, FString PlayerName, FString Token);// 0x324ee3fee041
	bool IsConnectedTest();// 0x324de3fee041
	bool IsConnected();// 0x324ce3fee041
	bool HasAcquiredWeGameToken();// 0x324be3fee041
	MFGCloudService* GetService();// 0x324ae3fee041
	FString GetIP();// 0x3249e3fee041
	FString GetConnectInfo();// 0x3248e3fee041
	void Disconnect();// 0x3247e3fee041
	bool DevConnect(int Channel, FString uin, FString pwd, out const FString[] urlList, bool Clear);// 0x3246e3fee041
	bool Connect(int Channel, out const FString[] urlList, bool Clear, FString Openid, FString openKey);// 0x3245e3fee041

--------------------------------
Class: MFGCloudMessageHandlerChildTss.MFGCloudMessageHandler.Object

--------------------------------
Class: MFGCloudMessageObserver.MFPWObject.Object
	MFPWMessageHeader* SendPkgHeader;//[Offset: 0x60, Size: 0x8]
	MFPWMessageHeader* RecvPkgHeader;//[Offset: 0x68, Size: 0x8]
	bool IsDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	bool IsNetworkOptimizationOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]

--------------------------------
Class: MFPWMessageHeader.Object

--------------------------------
Class: MFGCloudMessageService.MFGCloudService.MFPWObject.Object
	MFGCloudMessageHandler*[] MsgHandlerArr;//[Offset: 0x40, Size: 0x10]
	MFGCloudMessageObserver* ConnectorObserver;//[Offset: 0x50, Size: 0x8]
	bool UnRegisterMessageHandlerByClass(class MFGCloudMessageHandler InClass);// 0x326ae3fee041
	void UnRegisterAllMessageHandler();// 0x3269e3fee041
	void SetRecvMessage(bool recvMsg);// 0x3268e3fee041
	void RelayConnect();// 0x3267e3fee041
	MFGCloudMessageHandler* RegisterMessageHandlerByClass(class MFGCloudMessageHandler InClass);// 0x3266e3fee041
	bool ManualReconnect();// 0x3265e3fee041
	MFGCloudMessageHandler* GetMsgHandlerByType(class MFGCloudMessageHandler classType);// 0x3264e3fee041
	FString GetIP();// 0x3263e3fee041
	FString GetConnectInfo();// 0x3262e3fee041
	void Disconnect();// 0x3261e3fee041
	bool DevConnect(int Channel, FString uin, FString pwd, out const FString[] urlList, bool Clear);// 0x3260e3fee041
	bool Connect(int Channel, out const FString[] urlList, bool Clear, const FString Openid, const FString openKey);// 0x325fe3fee041
	void ClipPendingResponseArr(bool IsReconnect);// 0x325ee3fee041
	void ClearAckID();// 0x325de3fee041

--------------------------------
Class: MFGCloudNetWorkStateObserver.MFPWObject.Object

--------------------------------
Class: MFGCloudNetWorkStateService.MFGCloudService.MFPWObject.Object
	MFGCloudNetWorkStateObserver* NetworkObserver;//[Offset: 0x40, Size: 0x8]
	void OnNetworkStateChanged(int State);// 0x326be3fee041

--------------------------------
Class: MFGCloudNotice.MFGCloudService.MFPWObject.Object
	delegate OnLoadNoticeCompleted;//[Offset: 0x3c, Size: 0x10]
	MSDKNoticeReturnData LastReturnData;//[Offset: 0x50, Size: 0x60]
	FString CachedGroup;//[Offset: 0xb0, Size: 0x10]
	FString CachedLanguage;//[Offset: 0xc0, Size: 0x10]
	int CachedRegion;//[Offset: 0xd0, Size: 0x4]
	FString CachedPartition;//[Offset: 0xd8, Size: 0x10]
	FString CachedExtra;//[Offset: 0xe8, Size: 0x10]
	void OnLoadNoticeCompleted__DelegateSignature();// 0x12d7e3fee041
	FString LoadNotice(FString InGroup, FString InLanguage, int InRegion, FString InPartition, FString InExtra);// 0x12d6e3fee041

--------------------------------
Class: MSDKNoticeReturnData
	int MethodNameID;//[Offset: 0x0, Size: 0x4]
	int RetCode;//[Offset: 0x4, Size: 0x4]
	FString RetMsg;//[Offset: 0x8, Size: 0x10]
	int thirdCode;//[Offset: 0x18, Size: 0x4]
	FString ThirdMsg;//[Offset: 0x20, Size: 0x10]
	FString extraJson;//[Offset: 0x30, Size: 0x10]
	FString RequestID;//[Offset: 0x40, Size: 0x10]
	MSDKNoticeInfo[] NoticeInfoList;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MSDKNoticeInfo
	int NoticeID;//[Offset: 0x0, Size: 0x4]
	int NoticeType;//[Offset: 0x4, Size: 0x4]
	FString NoticeGroup;//[Offset: 0x8, Size: 0x10]
	int BeginTime;//[Offset: 0x18, Size: 0x4]
	int EndTime;//[Offset: 0x1c, Size: 0x4]
	int UpdateTime;//[Offset: 0x20, Size: 0x4]
	int Order;//[Offset: 0x24, Size: 0x4]
	int ContentType;//[Offset: 0x28, Size: 0x4]
	FString Language;//[Offset: 0x30, Size: 0x10]
	MSDKNoticeTextInfo TextInfo;//[Offset: 0x40, Size: 0x30]
	MSDKNoticePictureInfo[] PicUrlList;//[Offset: 0x70, Size: 0x10]
	FString WebUrl;//[Offset: 0x80, Size: 0x10]
	FString extraJson;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: MSDKNoticeTextInfo
	FString NoticeTitle;//[Offset: 0x0, Size: 0x10]
	FString NoticeContent;//[Offset: 0x10, Size: 0x10]
	FString NoticeRedirectUrl;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MSDKNoticePictureInfo
	FString NoticePicUrl;//[Offset: 0x0, Size: 0x10]
	FString NoticePicHashcode;//[Offset: 0x10, Size: 0x10]
	FString NoticePicTitle;//[Offset: 0x20, Size: 0x10]
	FString NoticePicSize;//[Offset: 0x30, Size: 0x10]
	int ScreenDir;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MFPWPlugin.MFPWObject.Object

--------------------------------
Class: MFGCloudPlugin.MFPWPlugin.MFPWObject.Object
	<class MFGCloudService,MFGCloudService*> ServiceMap;//[Offset: 0x40, Size: 0x50]
	MFGCloudXGService* GetGCloudXGService();// 0x3278e3fee041
	MFGCloudToolsService* GetGCloudToolsService();// 0x3277e3fee041
	MFGCloudPufferService* GetGCloudPufferService();// 0x3276e3fee041
	MFGCloudPlugin* GetGCloudPlugin(Object* WorldContextObject);// 0x3275e3fee041
	MFGCloudNotice* GetGCloudNoticeService();// 0x3274e3fee041
	MFGCloudMessageService* GetGCloudMessageService();// 0x3273e3fee041
	MFGCloudLoginService* GetGCloudLoginService();// 0x3272e3fee041
	MFHttpDNSService* GetGCloudHttpDNSService();// 0x3271e3fee041
	MFGCloudGroupService* GetGCloudGroupService();// 0x3270e3fee041
	MFGCloudFriendService* GetGCloudFriendService();// 0x326fe3fee041
	MFGCloudDolphinService* GetGCloudDolphinService();// 0x326ee3fee041
	MFGCloudCrashService* GetGCloudCrashService();// 0x326de3fee041
	MFGCloudService* AddServiceByClass(class MFGCloudService InClass);// 0x326ce3fee041

--------------------------------
Class: MFGCloudXGService.MFGCloudService.MFPWObject.Object
	MFGCloudXGObserver* XGObserver;//[Offset: 0x40, Size: 0x8]
	void UnregisterPush(FString Channel);// 0x32c1e3fee041
	void SetTag(FString Channel, FString Tag);// 0x32c0e3fee041
	void SetAccount(FString Channel, FString account);// 0x32bfe3fee041
	void RegisterPush(FString Channel, FString account);// 0x32bee3fee041
	void DeleteTag(FString Channel, FString Tag);// 0x32bde3fee041
	void DeleteAccount(FString Channel, FString account);// 0x32bce3fee041
	void AddLocalNotification(int Year, int Month, int Day, int Hour, int Min, FString Title, FString Content, FString content_ios);// 0x32bbe3fee041

--------------------------------
Class: MFGCloudXGObserver.MFPWObject.Object

--------------------------------
Class: MFGCloudToolsService.MFGCloudService.MFPWObject.Object
	MFGCloudToolsObserver* ToolsObserver;//[Offset: 0x40, Size: 0x8]
	void OpenPrajnaWebView(FString jsonStr);// 0x32b8e3fee041
	bool IsAppInstall(FString Channel, FString extra);// 0x32b7e3fee041
	FString GetConfigChannelID();// 0x32b6e3fee041

--------------------------------
Class: MFGCloudToolsObserver.MFPWObject.Object

--------------------------------
Class: MFGCloudPufferService.MFGCloudService.MFPWObject.Object
	int64 StartRestoreFiles(int Priority);// 0x32a8e3fee041
	bool SetTaskPriority(int64 TaskId, int Priority);// 0x32a7e3fee041
	bool SetImmDLMaxTask(int InTaskNum);// 0x32a6e3fee041
	bool SetImmDLMaxSpeed(int InMaxSpeed);// 0x32a5e3fee041
	void SaveTaskProgress(FString InTaskName, int InNowSize, int InTotalSize);// 0x32a4e3fee041
	bool ResumeTask(int64 TaskId);// 0x32a3e3fee041
	int ResumeAllTask();// 0x32a2e3fee041
	bool RestartPuffer(int InRestoreFlag);// 0x32a1e3fee041
	bool RemoveTask(int64 InTaskID);// 0x32a0e3fee041
	int RemoveAllTask();// 0x329fe3fee041
	void ReceiveTick(float InDeltaTime);// 0x329ee3fee041
	int ReadCachedTotalSizeByName(FString InTaskName);// 0x329de3fee041
	int ReadCachedCurrentSizeByName(FString InTaskName);// 0x329ce3fee041
	bool PauseTask(int64 TaskId);// 0x329be3fee041
	int PauseAllTask();// 0x329ae3fee041
	void OnStageChanged(int InOldStage, int InNewStage);// 0x3299e3fee041
	void OnRestoreReturn(bool IsSuccess, int ErrorCode);// 0x3298e3fee041
	void OnRestoreProgress(int stage, int NowSize, int TotalSize);// 0x3297e3fee041
	void OnPufferFileListItem(FString InFilename, int InState);// 0x3296e3fee041
	void OnInitReturn(bool IsSuccess, int ErrorCode);// 0x3295e3fee041
	void OnInitProgress(int stage, int NowSize, int TotalSize);// 0x3294e3fee041
	void OnDownloadReturn(int64 TaskId, int fileID, bool IsSuccess, int ErrorCode);// 0x3293e3fee041
	void OnDownloadProgress(int64 TaskId, int64 NowSize, int64 TotalSize);// 0x3292e3fee041
	void OnDownloadIOSBackgroundDone();// 0x3291e3fee041
	void OnDownloadBatchReturn(int64 batchTaskId, int fileID, bool IsSuccess, int ErrorCode, int batchType, FString strRet);// 0x3290e3fee041
	void OnDownloadBatchProgress(int64 batchTaskId, int64 NowSize, int64 TotalSize);// 0x328fe3fee041
	bool IsInitDone();// 0x328ee3fee041
	bool IsFileReadyByName(FString InFile);// 0x328de3fee041
	bool IsFileReady(int64 InFileID);// 0x328ce3fee041
	bool IsBatchDirReady(const FString Dir, bool blSubDir, out int nTotal, out int nReady, out int nNotReady);// 0x328be3fee041
	bool InitPufferConfig(out const PufferInitConfigData InParam);// 0x328ae3fee041
	enum GetTaskState(int InTaskID);// 0x3289e3fee041
	PufferTaskInfo GetTaskInfoByTaskName(FString InTaskName);// 0x3288e3fee041
	PufferTaskInfo GetTaskInfoByTaskID(int InTaskID);// 0x3287e3fee041
	FString GetRestoreTaskName();// 0x3286e3fee041
	int GetRestoreTaskID();// 0x3285e3fee041
	int GetLastProgressState();// 0x3284e3fee041
	int GetFileSizeCompressed(int64 fileID);// 0x3283e3fee041
	FString GetFileMd5(int fileID);// 0x3282e3fee041
	int64 GetFileId(FString InFile);// 0x3281e3fee041
	PufferTaskInfo[] GetDownloadingTaskInfoList(bool bIncludePaused);// 0x3280e3fee041
	float GetCurrentSpeed();// 0x327fe3fee041
	int GetCurrentDownloadingTaskNum(bool bIncludePaused);// 0x327ee3fee041
	int64 GetBatchDirSizeCompressed(const FString Dir, bool blSubDir);// 0x327de3fee041
	int GetBatchDirFileCount(FString Dir, bool blSubDir);// 0x327ce3fee041
	int64 DownloadFile(FString InFile, bool InForceSync, int InPriority, FString InTaskName);// 0x327be3fee041
	int64 DownloadBatchList(FString InFileList, bool forceSync, int Priority, FString InTaskName);// 0x327ae3fee041
	int64 DownloadBatchDir(FString Dir, bool blSubDir, bool forceSync, int Priority, FString InTaskName);// 0x3279e3fee041

--------------------------------
Class: PufferInitConfigData
	int MaxDownloadSpeed;//[Offset: 0x0, Size: 0x4]
	int MaxDownTask;//[Offset: 0x4, Size: 0x4]
	int MaxDownloadsPerTask;//[Offset: 0x8, Size: 0x4]
	int64 PufferProductId;//[Offset: 0x10, Size: 0x8]
	int NeedCheck;//[Offset: 0x18, Size: 0x4]
	int NeedFileRestore;//[Offset: 0x1c, Size: 0x4]
	int RemoveOldWhenUpdate;//[Offset: 0x20, Size: 0x4]
	FString StrSourceDir;//[Offset: 0x28, Size: 0x10]
	FString StrPufferServerUrl;//[Offset: 0x38, Size: 0x10]
	FString StrPufferGroupMarkId;//[Offset: 0x48, Size: 0x10]
	FString strUserID;//[Offset: 0x58, Size: 0x10]
	int64 PufferGameId;//[Offset: 0x68, Size: 0x8]
	int PufferUpdateType;//[Offset: 0x70, Size: 0x4]
	int64 PufferDolphinProductId;//[Offset: 0x78, Size: 0x8]
	FString StrDolphinAppVersion;//[Offset: 0x80, Size: 0x10]
	FString StrDolphinResVersion;//[Offset: 0x90, Size: 0x10]
	int EnableIOSBGDownload;//[Offset: 0xa0, Size: 0x4]
	int ShowFileList;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: PufferTaskInfo
	int TaskId;//[Offset: 0x0, Size: 0x4]
	FString TaskName;//[Offset: 0x8, Size: 0x10]
	enum TaskState;//[Offset: 0x18, Size: 0x1]
	int NowSize;//[Offset: 0x1c, Size: 0x4]
	int TotalSize;//[Offset: 0x20, Size: 0x4]
	bool bIsFileTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bIsBatchTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool bIsRestoreTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]

--------------------------------
Class: MFHttpDNSService.MFGCloudService.MFPWObject.Object
	void QueryIpByHostAsync(FString Host);// 0x3357e3fee041
	FString QueryIpByHost(FString Host);// 0x3356e3fee041

--------------------------------
Class: MFGCloudRobotService.MFGCloudService.MFPWObject.Object
	bool ShowRobot(Object* InWorldContext, FString roleID, FString question, FString Scene, FString ext, int isLandscape, int newActivity);// 0x32aee3fee041
	void OnURLCallback(FString InParam);// 0x32ade3fee041
	void OnShowCallback();// 0x32ace3fee041
	void OnCloseCallback();// 0x32abe3fee041
	MFGCloudRobotService* GetDefault();// 0x32aae3fee041
	void CloseRobot();// 0x32a9e3fee041

--------------------------------
Class: MFGCloudSetting.Object
	FString GameId;//[Offset: 0x28, Size: 0x10]
	FString GameKey;//[Offset: 0x38, Size: 0x10]
	FString QQAppID;//[Offset: 0x48, Size: 0x10]
	FString QQAppKey;//[Offset: 0x58, Size: 0x10]
	FString WeiXinAppID;//[Offset: 0x68, Size: 0x10]
	FString WeiXinAppKey;//[Offset: 0x78, Size: 0x10]
	FString MSDK_GAME_ID;//[Offset: 0x88, Size: 0x10]
	FString MSDK_SDK_Key;//[Offset: 0x98, Size: 0x10]
	FString ConnectorDHP;//[Offset: 0xa8, Size: 0x10]
	int Dumphitches;//[Offset: 0xb8, Size: 0x4]
	int TssSDKID;//[Offset: 0xbc, Size: 0x4]
	int GRobotGameID;//[Offset: 0xc0, Size: 0x4]
	FString GRobotGameCode;//[Offset: 0xc8, Size: 0x10]
	FString GetWeiXinAppID();// 0x32b4e3fee041
	int GetTssSDKID();// 0x32b3e3fee041
	FString GetQQAppID();// 0x32b2e3fee041
	FString GetMSDKSDKKey();// 0x32b1e3fee041
	FString GetMSDKGameID();// 0x32b0e3fee041
	FString GetGameId();// 0x32afe3fee041

--------------------------------
Class: MFGCloudTGPAObserver.MFPWObject.Object

--------------------------------
Class: MFGCloudTGPAService.MFGCloudService.MFPWObject.Object
	MFGCloudTGPAObserver* GCLoudTGPAObserver;//[Offset: 0x40, Size: 0x8]
	void OnNotifySystemInfo(out FString Json);// 0x32b5e3fee041

--------------------------------
Class: MFGCloudTssService.MFGCloudService.MFPWObject.Object

--------------------------------
Class: MFGCloudWebViewObserver.MFPWObject.Object

--------------------------------
Class: MFGCloudWebViewService.MFGCloudService.MFPWObject.Object
	MFGCloudWebViewObserver* WebViewObserver;//[Offset: 0x40, Size: 0x8]
	MFIntlWebViewObserver* IntlWebViewObserver;//[Offset: 0x48, Size: 0x8]
	void OnWebViewBackCall(int methodId, int MsgType, FString MsgJsonData);// 0x32bae3fee041
	void OnCustomerServiceBackCall(int MsgType, FString MsgJsonData);// 0x32b9e3fee041

--------------------------------
Class: MFIntlWebViewObserver.MFPWObject.Object

--------------------------------
Class: MFGMEObserver.MFPWObject.Object

--------------------------------
Class: MFGMEService.MFGCloudService.MFPWObject.Object
	MFGMEObserver* gmeObserver;//[Offset: 0x60, Size: 0x8]
	FString mRoomId;//[Offset: 0x98, Size: 0x10]
	int mRoomQualityType;//[Offset: 0xa8, Size: 0x4]
	int UploadRecordedFile(const FString FilePath);// 0x3311e3fee041
	int UnInitMFVoiceEngine();// 0x3310e3fee041
	int TestMic();// 0x330fe3fee041
	int StopRecording();// 0x330ee3fee041
	int StopPlayFile();// 0x330de3fee041
	int StartRecording(const FString FilePath);// 0x330ce3fee041
	int SpeechToText(const FString fileID, const FString SpeechLanguage, const FString TranslateLanguage);// 0x330be3fee041
	int SetVoiceMode(int VoiceMode);// 0x330ae3fee041
	int SetSpeakerVolume(int Volume);// 0x3309e3fee041
	int SetReportedPlayerInfo(const FString[] cszOpenID, int[] nMemberID, int nCount);// 0x3308e3fee041
	void SetReportBufferTime(int nTimeSec);// 0x3307e3fee041
	int SetPlayerVolume(const FString PlayerId, int vol);// 0x3306e3fee041
	int SetMicVolume(int Volume);// 0x3305e3fee041
	int SetLogLevel(int LevelWrite, int LevelPrint);// 0x3304e3fee041
	int SetAppInfo(const FString AppID, const FString AppKey, const FString Openid);// 0x3303e3fee041
	int ReportPlayer(const FString[] cszOpenID, int nCount, FString cszInfo);// 0x3302e3fee041
	int QuitRoom(const FString RoomName);// 0x3301e3fee041
	int QueryPermission();// 0x3300e3fee041
	int PlayRecordedFile(const FString FilePath);// 0x32ffe3fee041
	int OpenSpeaker();// 0x32fee3fee041
	int OpenMic();// 0x32fde3fee041
	void OnVoiceRecording();// 0x32fce3fee041
	void OnUploadedFile(int code, FString FilePath, FString fileID);// 0x32fbe3fee041
	void OnStreamSpeechToTextDone(int code, int Error, FString Result, FString VoicePath);// 0x32fae3fee041
	void OnStatusUpdate(int Status, FString RoomName, int memberID);// 0x32f9e3fee041
	void OnSpeechToTextDone(int code, FString fileID, FString Result);// 0x32f8e3fee041
	void OnRoomMemberInfo(int code, FString RoomName, int memid, FString Openid);// 0x32f7e3fee041
	void OnQuitedRoom(int code, FString RoomName);// 0x32f6e3fee041
	void OnPlayedRecordedFile(int code, FString FilePath);// 0x32f5e3fee041
	void OnMultiRoomMemberVoice(FString RoomName, int memid, int Status);// 0x32f4e3fee041
	void OnMemberVoice(int memid, int Status);// 0x32f3e3fee041
	void OnJoinedRoom(int code, FString RoomName, int memberID);// 0x32f2e3fee041
	void OnIOSPermissionRequestReturn(bool Status);// 0x32f1e3fee041
	void OnEvent(int Event, FString Info);// 0x32f0e3fee041
	void OnDownloadedFile(int code, FString FilePath, FString fileID);// 0x32efe3fee041
	void OnAppliedMessageKey(int code);// 0x32eee3fee041
	void OnAndroidPermissionRequestReturn(out const FString[] Permissions, out const bool[] GrantResults);// 0x32ede3fee041
	int JoinTeamRoom3(const FString RoomName, int[] authbuffer, int Length);// 0x32ece3fee041
	int JoinTeamRoom(const FString RoomName);// 0x32ebe3fee041
	int JoinRangeRoom(const FString RoomName);// 0x32eae3fee041
	int JoinNationRoom(const FString RoomName);// 0x32e9e3fee041
	bool IsSpeaking();// 0x32e8e3fee041
	bool IsRoomEntered();// 0x32e7e3fee041
	int InitMFVoiceEngine(const FString AppID, const FString AppKey, const FString Openid);// 0x32e6e3fee041
	int GetVoiceFileSize(FString FilePath);// 0x32e5e3fee041
	int GetVoiceFileDuration(FString FilePath);// 0x32e4e3fee041
	int GetSpeakerState();// 0x32e3e3fee041
	int GetSpeakerLevel();// 0x32e2e3fee041
	int GetRoomMembers(FString RoomName);// 0x32e1e3fee041
	int GetRecvStreamLevel(const FString Openid);// 0x32e0e3fee041
	int GetPlayerVolume(const FString PlayerId);// 0x32dfe3fee041
	int GetMicState();// 0x32dee3fee041
	int GetMicLevel(bool bFadeOut);// 0x32dde3fee041
	float GetFileTime(const FString FilePath);// 0x32dce3fee041
	int GetAudioDeviceConnectionState();// 0x32dbe3fee041
	int GameResume();// 0x32dae3fee041
	int GamePause();// 0x32d9e3fee041
	int EnableSpeakerOn(bool bEnable);// 0x32d8e3fee041
	int EnableRoomSpeaker(const FString RoomName, bool Enable);// 0x32d7e3fee041
	int EnableRoomMicrophone(const FString RoomName, bool Enable);// 0x32d6e3fee041
	int EnableReportALLAbroad(bool bEnable);// 0x32d5e3fee041
	int EnableReportALL(bool bEnable);// 0x32d4e3fee041
	int EnableMultiRoom(bool Enable);// 0x32d3e3fee041
	int EnableLogCallBack(bool bEnable);// 0x32d2e3fee041
	void EnableLog(bool bEnable);// 0x32d1e3fee041
	int EnableCivilVoice(bool bEnable);// 0x32d0e3fee041
	int EnableBluetoothSCO(bool bEnable);// 0x32cfe3fee041
	int DownloadRecordedFile(const FString fileID, const FString DownloadFilePath);// 0x32cee3fee041
	int CloseSpeaker();// 0x32cde3fee041
	int CloseMic();// 0x32cce3fee041
	int CheckPermission();// 0x32cbe3fee041
	int CheckMicPermission();// 0x32cae3fee041
	int CaptureMicrophoneData(bool bCapture);// 0x32c9e3fee041
	int CancelRecording();// 0x32c8e3fee041
	int ApplyPTTAuthbuffer();// 0x32c7e3fee041
	int ApplyMessageKey();// 0x32c6e3fee041
	void ApplicationWillEnterBackground();// 0x32c5e3fee041
	void ApplicationWillDeactivate();// 0x32c4e3fee041
	void ApplicationHasReactivated();// 0x32c3e3fee041
	void ApplicationHasEnteredForeground();// 0x32c2e3fee041

--------------------------------
Class: MFGPMAgent.BlueprintFunctionLibrary.Object
	void WriteGraphicStyleQualityLevel(byte InGraphicStyleQualityLevel);// 0x3331e3fee041
	void WriteGraphicsQualityLevel(byte GraphicsQualityLevel);// 0x3330e3fee041
	void WriteFrameRateLevel(byte InFrameRateLevel);// 0x332fe3fee041
	void WriteAntiAliasingState(bool bOpen);// 0x332ee3fee041
	void SetGraphicStyleQualityLevel(byte GraphicStyleQualityLevel, World* World);// 0x332de3fee041
	void SetGraphicsQualityLevel(byte InQuality, World* World);// 0x332ce3fee041
	void SetFrameRateLevel(byte InFrameRateLevel, World* World);// 0x332be3fee041
	void SetForceBlockFXAA(bool bBlock, World* World);// 0x332ae3fee041
	void SetAntiAliasingState(bool bOpen, World* World);// 0x3329e3fee041
	void ReportNetworkReconnectTimes(int ReconnectTimes);// 0x3328e3fee041
	void ReportMemInfo();// 0x3327e3fee041
	byte ReadGraphicStyleQualityLevel();// 0x3326e3fee041
	byte ReadGraphicsQualityLevel();// 0x3325e3fee041
	byte ReadFrameRateLevel();// 0x3324e3fee041
	bool ReadAntiAliasingState();// 0x3323e3fee041
	void InitContext();// 0x3322e3fee041
	byte GetMinGraphicsQualityLevel();// 0x3321e3fee041
	byte GetMaxGraphicsQualityLevel();// 0x3320e3fee041
	byte GetGraphicStyleQualityLevel();// 0x331fe3fee041
	byte GetGraphicsQualityLevel();// 0x331ee3fee041
	byte GetFrameRateLevel();// 0x331de3fee041
	int GetFrameRateFromFrameRateLevel(byte InFrameRateLevel);// 0x331ce3fee041
	bool GetForceBlockFXAA();// 0x331be3fee041
	byte GetDefaultGraphicsQualityLevel();// 0x331ae3fee041
	byte GetDefaultFrameRateLevel();// 0x3319e3fee041
	bool GetAntiAliasingState();// 0x3318e3fee041
	FString GetAndroidGPUFamily();// 0x3317e3fee041
	void GameSwitchConfig(World* World);// 0x3316e3fee041
	void FPS90BlackListHit();// 0x3315e3fee041
	void FPS120BlackListHit();// 0x3314e3fee041
	byte DeviceLevelToGraphicsQualityLevel(int DeviceLevel);// 0x3313e3fee041
	void BlackListHitReport();// 0x3312e3fee041

--------------------------------
Class: MFGPMHelperFunctionLibrary.BlueprintFunctionLibrary.Object
	void TGPAUpdateGameInfoStringMap(FString Key, <FString,FString> mapData);// 0x3355e3fee041
	void TGPAUpdateGameInfoIntString(int Key, FString Value);// 0x3354e3fee041
	void TGPAUpdateGameInfo2String(FString Key, FString Value);// 0x3353e3fee041
	void TGPAUpdateGameInfo2Int(int Key, int Value);// 0x3352e3fee041
	void SetVersionIden(FString versionName);// 0x3351e3fee041
	void SetQuality(int quality);// 0x3350e3fee041
	void SetOpenId(FString InOpenID);// 0x334fe3fee041
	void ReportPayStep(int Step, bool Result, int ErrorCode, const FString StepName, FString Key, FString Value, bool authorize, bool Finish);// 0x334ee3fee041
	void ReportLoginStep(int Step, bool Result, int ErrorCode, const FString StepName, const FString StepComment, FString Key, FString Value, bool authorize, bool Finish);// 0x334de3fee041
	void ReportEvent(FString EventName, FString SpecialChannel, <FString,FString> paramsMap, FString extraJson);// 0x334ce3fee041
	void ReleaseStepEventContext();// 0x334be3fee041
	void PostValueS(FString Category, FString Key, FString InVal);// 0x334ae3fee041
	void PostValueI(FString Category, FString Key, int A);// 0x3349e3fee041
	void PostValueF(FString Category, FString Key, float A);// 0x3348e3fee041
	void PostValue3I(FString Category, FString Key, int A, int B, int C);// 0x3347e3fee041
	void PostValue3F(FString Category, FString Key, float A, float B, float C);// 0x3346e3fee041
	void PostValue2I(FString Category, FString Key, int A, int B);// 0x3345e3fee041
	void PostValue2F(FString Category, FString Key, float A, float B);// 0x3344e3fee041
	void PostStepEvent(FString eventCategory, int stepId, int Status, int code, FString Msg, FString extraKey, <FString,FString> paramsMap, bool authorize, bool Finish);// 0x3343e3fee041
	void PostNTL(int latency);// 0x3342e3fee041
	bool PostFrame(float DeltaTime);// 0x3341e3fee041
	void PostEventSS(FString Key, FString Value);// 0x3340e3fee041
	void PostEventIS(int Key, const FString Info);// 0x333fe3fee041
	void MarkStartUpFinish();// 0x333ee3fee041
	void MarkLevelLoadCompleted();// 0x333de3fee041
	void MarkLevelLoad(FString sceneName);// 0x333ce3fee041
	void MarkLevelFin();// 0x333be3fee041
	void InitStepEventContext();// 0x333ae3fee041
	int InitContext(FString AppID);// 0x3339e3fee041
	FString GetSDKVersion();// 0x3338e3fee041
	int GetDeviceLevel(FString ConfigName, FString FilePath);// 0x3337e3fee041
	FString GetDataFromTGPA(FString Key, FString Value);// 0x3336e3fee041
	void EndTupleWrap();// 0x3335e3fee041
	void EndTag();// 0x3334e3fee041
	void BeginTupleWrap(FString Key);// 0x3333e3fee041
	void BeginTag(FString TagName);// 0x3332e3fee041

--------------------------------
Class: MFIntlLBSObserver.MFPWObject.Object

--------------------------------
Class: MFIOSRuntimeHelper.BlueprintFunctionLibrary.Object
	void RequestUserAgent();// 0x335fe3fee041
	void RequestASAAttribution();// 0x335ee3fee041
	FString GetUserAgentError();// 0x335de3fee041
	FString GetUserAgent();// 0x335ce3fee041
	int GetUniversalLinkActivityID();// 0x335be3fee041
	FString GetASAInfoError();// 0x335ae3fee041
	FString GetASAInfo();// 0x3359e3fee041
	void ClearUniversalLinkActivityID();// 0x3358e3fee041

--------------------------------
Class: MFLBSService.MFGCloudService.MFPWObject.Object
	MFIntlLBSObserver* INTLLBSObserver;//[Offset: 0x40, Size: 0x8]
	void RequestIPInfo();// 0x3360e3fee041

--------------------------------
Class: MFMidasObserver.MFPWObject.Object

--------------------------------
Class: MFMidasService.MFGCloudService.MFPWObject.Object
	MFMidasObserver* MFMidasObserver;//[Offset: 0x88, Size: 0x8]
	MFCTIPayObserver* MFCTIPayObserver;//[Offset: 0x90, Size: 0x8]
	void PayGoods(FString GoodsTokenUrl, int GoodsPrice, int GoodsNum, int callBackData);// 0x336de3fee041
	void PayCoin(FString ProductId, int GoodsNum, int callBackData);// 0x336ce3fee041
	void OnMidasReprovideFinished(FString resultJson);// 0x336be3fee041
	void OnMidasPayFinished(int ResultCode, FString payChannel, FString realSaveNum, FString resultMsg, int callBackData);// 0x336ae3fee041
	void OnMidasOvertime(bool overtimeState);// 0x3369e3fee041
	void OnMidasLoginExpired();// 0x3368e3fee041
	void OnMidasInitFinished(FString resultJson);// 0x3367e3fee041
	void OnMidasGetLocalPrice(FString Result);// 0x3366e3fee041
	void OnMidasGetIntroPrice(FString Result);// 0x3365e3fee041
	void OnMidasGetInfoFinished(FString Result);// 0x3364e3fee041
	bool Init(bool IsSandBox, bool EnableLog, int GoodsZoneId);// 0x3363e3fee041
	void GetLocalPriceInfo(out const FString[] ProductIds);// 0x3362e3fee041
	void GetChargeInfo();// 0x3361e3fee041

--------------------------------
Class: MFMNAService.MFGCloudService.MFPWObject.Object
	class UserWidget* StartingWidgetClass;//[Offset: 0x40, Size: 0x8]
	UserWidget* CurrentWidget;//[Offset: 0x48, Size: 0x8]
	void TransportInfo();// 0x337ee3fee041
	void StopMNA();// 0x337de3fee041
	void StartSpeed();// 0x337ce3fee041
	void SetZoneId(int zoneid);// 0x337be3fee041
	void SetUserName(int channelType, FString Openid);// 0x337ae3fee041
	void SetObserver(FString Tag, class MFMNAService InClass);// 0x3379e3fee041
	void SetGameIp();// 0x3378e3fee041
	void QueryPreciseKartin();// 0x3377e3fee041
	void QueryKartin(FString Tag);// 0x3376e3fee041
	void OnWebViewBackCall(int methodId, int MsgType, FString MsgJsonData);// 0x3375e3fee041
	void OnNetWorkTestCall(int flag, int jump_network, int jump_signal, int jump_direct, int direct_status, FString direct_desc, int jump_export, int export_status, FString export_desc, int jump_terminal, int terminal_status, FString terminal_desc, int jump_router, int router_status, FString router_desc);// 0x3374e3fee041
	void IsQOSWork();// 0x3373e3fee041
	void Init(FString QQAppID);// 0x3372e3fee041
	MFMNAService* GetStaticMNAService();// 0x3371e3fee041
	void EndSpeed();// 0x3370e3fee041
	void ChangeMenuWidget(class UserWidget NewWidgetClass);// 0x336fe3fee041
	MFMNAService* AddServiceByClass(class MFMNAService InClass);// 0x336ee3fee041

--------------------------------
Class: MFPandoraService.MFGCloudService.MFPWObject.Object
	void ShowItemTips(CanvasPanel* Anchor, FString ItemID);// 0x3390e3fee041
	void ShowItemIcon(Image* Image, FString ItemID);// 0x338fe3fee041
	void ShowItemEx(CanvasPanel* Anchor, FString ItemID, int itemCnt);// 0x338ee3fee041
	void SetUserData(out const <FString,FString> UserData);// 0x338de3fee041
	void SetSDKVersion(int InVersion);// 0x338ce3fee041
	void SetSDKCoreDataPath(FString InFilePath);// 0x338be3fee041
	void RemoveUserWidgetFromGame(UserWidget* Widget, FString panelName);// 0x338ae3fee041
	void PlaySound(FString ID);// 0x3389e3fee041
	void PdrPanic(FString InErrorMsg);// 0x3388e3fee041
	void Jump(FString Type, FString Content);// 0x3387e3fee041
	bool Init(GameInstance* InGI);// 0x3386e3fee041
	void GetCurrency(out <FString,FString> Results);// 0x3385e3fee041
	void GetAccountToken(out <FString,FString> Results);// 0x3384e3fee041
	void DoCmdWithParams(out const <FString,FString> Cmd);// 0x3383e3fee041
	void DoCmd(FString Cmd);// 0x3382e3fee041
	bool Close();// 0x3381e3fee041
	int CallGameCmd(FString InCmd);// 0x3380e3fee041
	void AddUserWidgetToGame(UserWidget* Widget, FString panelName);// 0x337fe3fee041

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x1e62e3fee041

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x60, Size: 0x28]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	int ZOrder;//[Offset: 0x8c, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x67c8e3fee041
	void SetSizeXY(float InLeft, float InBottom);// 0x67c7e3fee041
	void SetSize(Vector2D InSize);// 0x67c6e3fee041
	void SetPositionXY(float X, float Y);// 0x67c5e3fee041
	void SetPosition(Vector2D InPosition);// 0x67c4e3fee041
	void SetOffsets(Margin InOffset);// 0x67c3e3fee041
	void SetMinimum(Vector2D InMinimumAnchors);// 0x67c2e3fee041
	void SetMaximum(Vector2D InMaximumAnchors);// 0x67c1e3fee041
	void SetLayout(out const AnchorData InLayoutData);// 0x67c0e3fee041
	void SetAutoSize(bool InbAutoSize);// 0x67bfe3fee041
	void SetAnchorsXYZW(float X, float Y, float Z, float W);// 0x67bee3fee041
	void SetAnchors(Anchors InAnchors);// 0x67bde3fee041
	void SetAlignmentXY(float X, float Y);// 0x67bce3fee041
	void SetAlignment(Vector2D InAlignment);// 0x67bbe3fee041
	int GetZOrder();// 0x67bae3fee041
	float GetSizeY();// 0x67b9e3fee041
	float GetSizeX();// 0x67b8e3fee041
	Vector2D GetSize();// 0x67b7e3fee041
	void GetRefSize(out Vector2D OutSize);// 0x67b6e3fee041
	void GetRefPosition(out Vector2D OutPosition);// 0x67b5e3fee041
	float GetPositionY();// 0x67b4e3fee041
	float GetPositionX();// 0x67b3e3fee041
	Vector2D GetPosition();// 0x67b2e3fee041
	Margin GetOffsets();// 0x67b1e3fee041
	AnchorData GetLayout();// 0x67b0e3fee041
	bool GetAutoSize();// 0x67afe3fee041
	Anchors GetAnchors();// 0x67aee3fee041
	Vector2D GetAlignment();// 0x67ade3fee041

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: MFPWGetPluginManagerInterface.Interface.Object

--------------------------------
Class: MFPWPluginManager.Object
	<class MFPWPlugin,MFPWPlugin*> PluginMap;//[Offset: 0x28, Size: 0x50]
	void OpenWebViewWithoutEncode(const FString URL);// 0x33a8e3fee041
	void OpenWebViewWithEncodeDebug(const FString URL, int InOrientation);// 0x33a7e3fee041
	void OpenWebViewWithEncode(const FString URL, int InOrientation);// 0x33a6e3fee041
	void OpenWebViewInterface(const FString URL, int InOrientation, bool IsEncode, bool ShowDebugUrl, bool IsEmbedWebView);// 0x33a5e3fee041
	void OpenWebViewEx(const FString URL, int InOrientation);// 0x33a4e3fee041
	void OpenWebViewCustomerService(FString ScenceId, FString GameZone, FString ZoneName, FString roleName, FString roleID);// 0x33a3e3fee041
	void OpenWebView(const FString URL);// 0x33a2e3fee041
	void OpenRateWindow();// 0x33a1e3fee041
	void OnTssServerLogin(FString feature_name, int feature_name_len, FString Data, int data_len, int data_crc);// 0x33a0e3fee041
	void NicoTest2(int nParam, FString strParam, int nParam2);// 0x339fe3fee041
	void NicoTest(int nParam);// 0x339ee3fee041
	bool IsEmulator();// 0x339de3fee041
	MFPWPlugin* GetMFPWPluginByClass(Object* WorldContextObject, class MFPWPlugin InClass);// 0x339ce3fee041
	FString GetEmulatorName();// 0x339be3fee041
	void GetDeviceId();// 0x339ae3fee041
	void CustomPostValueS(FString Category, FString Key, FString InVal);// 0x3399e3fee041
	void CustomPostValueI(FString Category, FString Key, int A);// 0x3398e3fee041
	void CustomPostValueF(FString Category, FString Key, float A);// 0x3397e3fee041
	void CustomEndTupleWrap();// 0x3396e3fee041
	void CustomBeginTupleWrap(FString Category);// 0x3395e3fee041
	void CppVMTest(int nParam);// 0x3394e3fee041
	void CloseWebView();// 0x3393e3fee041
	void ChangeWebView(const FString Json);// 0x3392e3fee041
	void AddFriend(FString Openid, Object* WorldContextObject, FString Channel);// 0x3391e3fee041

--------------------------------
Class: MFTGALiveService.MFGCloudService.MFPWObject.Object
	void OnTGACallbackUnreal(int ClientType, FString Msg);// 0x33afe3fee041
	void MFTGALiveSDKUpdateUserInfo(FString JsonString);// 0x33aee3fee041
	void MFTGALiveSDKUpdateStartParams(FString JsonString);// 0x33ade3fee041
	bool MFTGALiveSDKTVAvailable(int SourceType);// 0x33ace3fee041
	bool MFTGALiveSDKStartTV(FString Token, int SourceType);// 0x33abe3fee041
	bool MFTGALiveSDKQuitTGALiveSDK(FString JsonString);// 0x33aae3fee041
	void MFTGALiveSDKInitialize(FString JsonString);// 0x33a9e3fee041

--------------------------------
Class: MFVoiceObserver.MFPWObject.Object

--------------------------------
Class: MFVoiceService.MFGCloudService.MFPWObject.Object
	MFVoiceObserver* MFVoiceObserver;//[Offset: 0x60, Size: 0x8]
	int UploadRecordedFile(const FString FilePath);// 0x341ae3fee041
	int TextTranslate(const FString Text, int srcLang, int targetLang, int nTimeoutMS);// 0x3419e3fee041
	int TextToStreamSpeechStop();// 0x3418e3fee041
	int TextToStreamSpeechStart(const FString Text, const FString VoiceType, int nTimeoutMS, FString FilePath);// 0x3417e3fee041
	int TextToSpeechFile(const FString Text, int lang, const FString FilePath, int VoiceType, float voiceRate, float Volume, int nTimeoutMS);// 0x3416e3fee041
	int TextToSpeech(const FString Text, int lang, int VoiceType, int nTimeoutMS);// 0x3415e3fee041
	int TestMic();// 0x3414e3fee041
	UserWidget* TestHotFixOverloadReturnChild4();// 0x3413e3fee041
	int[] TestHotFixOverloadReturnChild2();// 0x3412e3fee041
	int TestHotFixOverloadReturnChild1();// 0x3411e3fee041
	void TestHotFixOverloadParent(int test1, bool test2, int[] test3, <int,FString> test4, <FString> test5, FString test6, MyHotfixStruct test7, out MyHotfixStruct test8);// 0x3410e3fee041
	void TestHotFixOverloadParamChild8(MFVoiceService* Test);// 0x340fe3fee041
	void TestHotFixOverloadParamChild7(out MyHotfixStruct Test);// 0x340ee3fee041
	void TestHotFixOverloadParamChild6(MyHotfixStruct Test);// 0x340de3fee041
	void TestHotFixOverloadParamChild5(out int[] Test);// 0x340ce3fee041
	void TestHotFixOverloadParamChild4(int[] Test);// 0x340be3fee041
	void TestHotFixOverloadParamChild3(out int Test);// 0x340ae3fee041
	void TestHotFixOverloadParamChild2(int Test);// 0x3409e3fee041
	void TestHotFixOverloadParamChild1();// 0x3408e3fee041
	Object* TestHotFix7(int test1, bool test2, int[] test3, <int,FString> test4, <FString> test5, FString test6, MyHotfixStruct test7, out MyHotfixStruct test8, UserWidget* test9);// 0x3407e3fee041
	MyHotfixStruct TestHotFix6(int test1, bool test2, int[] test3, <int,FString> test4, <FString> test5, FString test6, MyHotfixStruct test7, out MyHotfixStruct test8);// 0x3406e3fee041
	FString TestHotFix5(int test1, bool test2, int[] test3, <int,FString> test4, <FString> test5, FString test6, MyHotfixStruct test7, out MyHotfixStruct test8);// 0x3405e3fee041
	<int,FString> TestHotFix4(int test1, bool test2, int[] test3, <int,FString> test4, <FString> test5, FString test6, MyHotfixStruct test7, out MyHotfixStruct test8);// 0x3404e3fee041
	int[] TestHotFix3(int test1, bool test2, int[] test3, <int,FString> test4, <FString> test5, FString test6, MyHotfixStruct test7, out MyHotfixStruct test8);// 0x3403e3fee041
	bool TestHotFix2(int test1, bool test2, int[] test3, <int,FString> test4, <FString> test5, FString test6, MyHotfixStruct test7, out MyHotfixStruct test8);// 0x3402e3fee041
	int TestHotFix1(int test1, bool test2, int[] test3, <int,FString> test4, <FString> test5, FString test6, MyHotfixStruct test7, out MyHotfixStruct test8);// 0x3401e3fee041
	int StopRecording();// 0x3400e3fee041
	int StopPlayFile();// 0x33ffe3fee041
	int StartRecording(const FString FilePath);// 0x33fee3fee041
	int SpeechTranslate(const FString fileID, int srcLang, int targetLang, int transType, int nTimeoutMS);// 0x33fde3fee041
	int SpeechToText(const FString fileID, enum Language);// 0x33fce3fee041
	int SpeechFileTranslate(const FString FilePath, int srcLang, int targetLang, int VoiceType, float voiceRate, float Volume, int nTimeoutMS);// 0x33fbe3fee041
	int SpeechFileToText(const FString FilePath, int srcLang, int targetLang, int nTimeoutMS);// 0x33fae3fee041
	int SetVoiceMode(int VoiceMode);// 0x33f9e3fee041
	void SetTransSecInfo(FString secInfo);// 0x33f8e3fee041
	int SetSpeakerVolume(int Volume);// 0x33f7e3fee041
	int SetRSTTServerInfo(const FString RSTTUrl, const FString httpDnsIPs, const FString wxAppID);// 0x33f6e3fee041
	int SetReportedPlayerInfo(const FString[] cszOpenID, int[] nMemberID, int nCount);// 0x33f5e3fee041
	void SetReportBufferTime(int nTimeSec);// 0x33f4e3fee041
	int SetPlayerVolume(FString PlayerId, int vol);// 0x33f3e3fee041
	int SetMicVolume(int Volume);// 0x33f2e3fee041
	int SetCivilBinPath(FString pPath);// 0x33f1e3fee041
	int SetBitRate(int bitrate);// 0x33f0e3fee041
	int SetAudience(int[] members, int Count, FString RoomName);// 0x33efe3fee041
	int SetAppInfo(const FString AppID, const FString AppKey, const FString Openid);// 0x33eee3fee041
	int RSTSSpeechToText(int srcLang, int[] pTargetLangs, int nTargetLangCnt, int nTimeoutMS);// 0x33ede3fee041
	int RSTSSpeechToSpeech(int srcLang, int[] pTargetLangs, int nTargetLangCnt, const FString dirPath, int VoiceType, float voiceRate, float Volume, int nTimeoutMS);// 0x33ece3fee041
	int ReportPlayer(const FString[] cszOpenID, int nCount, FString cszInfo);// 0x33ebe3fee041
	int QuitRoom(const FString RoomName);// 0x33eae3fee041
	int QueryPermission();// 0x33e9e3fee041
	int PlayRecordedFile(const FString FilePath);// 0x33e8e3fee041
	int OpenSpeaker();// 0x33e7e3fee041
	int OpenMic();// 0x33e6e3fee041
	void OnVoiceRecording();// 0x33e5e3fee041
	void OnUploadedFile(int code, FString FilePath, FString fileID);// 0x33e4e3fee041
	void OnStreamSpeechToTextDone(int code, int Error, FString Result, FString VoicePath);// 0x33e3e3fee041
	void OnStatusUpdate(int Status, FString RoomName, int memberID);// 0x33e2e3fee041
	void OnSpeechToTextDone(int code, FString fileID, FString Result);// 0x33e1e3fee041
	void OnRoomMemberInfo(int code, FString RoomName, int memid, FString Openid);// 0x33e0e3fee041
	void OnReportPlayer(int code, FString cszInfo);// 0x33dfe3fee041
	void OnQuitedRoom(int code, FString RoomName);// 0x33dee3fee041
	void OnPlayedRecordedFile(int code, FString FilePath);// 0x33dde3fee041
	void OnMultiRoomMemberVoice(FString RoomName, int memid, int Status);// 0x33dce3fee041
	void OnMemberVoice(int memid, int Status);// 0x33dbe3fee041
	void OnJoinedRoom(int code, FString RoomName, int memberID);// 0x33dae3fee041
	void OnIOSPermissionRequestReturn(bool Status);// 0x33d9e3fee041
	void OnEvent(int Event, FString Info);// 0x33d8e3fee041
	void OnDownloadedFile(int code, FString FilePath, FString fileID);// 0x33d7e3fee041
	void OnAppliedMessageKey(int code);// 0x33d6e3fee041
	void OnAndroidPermissionRequestReturn(out const FString[] Permissions, out const bool[] GrantResults);// 0x33d5e3fee041
	int JoinTeamRoom(const FString RoomName);// 0x33d4e3fee041
	int JoinRangeRoom(const FString RoomName);// 0x33d3e3fee041
	int JoinNationalRoom(const FString RoomName);// 0x33d2e3fee041
	bool IsSpeaking();// 0x33d1e3fee041
	int InitMFVoiceEngine(const FString AppID, const FString AppKey, const FString Openid);// 0x33d0e3fee041
	int GetSpeakerState();// 0x33cfe3fee041
	int GetSpeakerLevel();// 0x33cee3fee041
	int GetRoomMembers(FString RoomName);// 0x33cde3fee041
	int GetPlayerVolume(FString PlayerId);// 0x33cce3fee041
	int GetMicState();// 0x33cbe3fee041
	int GetMicLevel(bool FadeOut);// 0x33cae3fee041
	float GetFileTime(const FString FilePath);// 0x33c9e3fee041
	int GetAudioDeviceConnectionState();// 0x33c8e3fee041
	int GameResume();// 0x33c7e3fee041
	int GamePause();// 0x33c6e3fee041
	int ForbidMemberVoice(int member, bool Enable, FString RoomName);// 0x33c5e3fee041
	int EnableTranslate(const FString RoomName, bool bEnable, int myLang, int transType);// 0x33c4e3fee041
	int EnableSpeakerOn(bool Enable);// 0x33c3e3fee041
	int EnableRoomSpeaker(const FString RoomName, bool Enable);// 0x33c2e3fee041
	int EnableRoomMicrophone(const FString RoomName, bool Enable);// 0x33c1e3fee041
	int EnableReportALLAbroad(bool bEnable);// 0x33c0e3fee041
	int EnableReportALL(bool bEnable);// 0x33bfe3fee041
	int EnableMultiRoom(bool Enable);// 0x33bee3fee041
	int EnableLogCallBack(bool bEnable);// 0x33bde3fee041
	void EnableLog(bool bEnable);// 0x33bce3fee041
	int EnableCivilVoice(bool bEnable);// 0x33bbe3fee041
	int EnableCivilFile(bool bEnable);// 0x33bae3fee041
	int EnableBluetoothSCO(bool Enable);// 0x33b9e3fee041
	int DownloadRecordedFile(const FString fileID, const FString DownloadFilePath);// 0x33b8e3fee041
	int CloseSpeaker();// 0x33b7e3fee041
	int CloseMic();// 0x33b6e3fee041
	int CheckPermission();// 0x33b5e3fee041
	int ApplyMessageKey();// 0x33b4e3fee041
	void ApplicationWillEnterBackground();// 0x33b3e3fee041
	void ApplicationWillDeactivate();// 0x33b2e3fee041
	void ApplicationHasReactivated();// 0x33b1e3fee041
	void ApplicationHasEnteredForeground();// 0x33b0e3fee041

--------------------------------
Class: MyHotfixStruct
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MFWeGameEvent.MFPWObject.Object

--------------------------------
Class: MFWeGamePlugin.MFPWPlugin.MFPWObject.Object
	MFWeGameEvent* RailEvent;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AndroidDevicePermissionHelper.Object
	void SetQQLogin();// 0x341ee3fee041
	void JumpPermissionPage();// 0x341de3fee041
	FString GetDeviceId_V2();// 0x341ce3fee041
	FString GetAndroidMemInfo();// 0x341be3fee041

--------------------------------
Class: DynamicRichTextBlockDecorator.Object
	bool bReveal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int RevealedIndex;//[Offset: 0x2c, Size: 0x4]
	RichTextBox* ParentRichTextBox;//[Offset: 0x30, Size: 0x8]
	Object*[] m_UObjectRefArray;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: RichTextBox.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x148, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x160, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x170, Size: 0x58]
	LinearColor Color;//[Offset: 0x1c8, Size: 0x10]
	DynamicRichTextBlockDecorator*[] Decorators;//[Offset: 0x1d8, Size: 0x10]
	delegate OnHyperlinkClicked;//[Offset: 0x1e8, Size: 0x10]
	delegate OnDynamicTextAppended;//[Offset: 0x1f8, Size: 0x10]
	FText HighLightText;//[Offset: 0x208, Size: 0x18]
	void SetText(out const FText InText);// 0x3425e3fee041
	void SetHighlightText(out const FText InHighlightText);// 0x3424e3fee041
	void RemoveFrontTextLines(int RemovedLineCount);// 0x3423e3fee041
	void OnRichTextHyperlinkClicked__DelegateSignature(out const FString[] MetaData);// 0x3422e3fee041
	void OnDynamicTextAppendedEvent__DelegateSignature(FString AppendString);// 0x3421e3fee041
	void ClearAllDisplayText();// 0x3420e3fee041
	int AppendDynamicTextString(FString AppendString);// 0x341fe3fee041

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x124, Size: 0x3]
	byte Justification;//[Offset: 0x127, Size: 0x1]
	enum WrappingPolicy;//[Offset: 0x128, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x129, Size: 0x1]
	float WrapTextAt;//[Offset: 0x12c, Size: 0x4]
	Margin Margin;//[Offset: 0x130, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x140, Size: 0x4]
	void SetJustification(byte InJustification);// 0x19d3e3fee041

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20]
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8]
	int Size;//[Offset: 0x48, Size: 0x4]
	int LetterSpacing;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: MFBaseServices.Object
	bool ZipLogFile();// 0x343ce3fee041
	int ZipLogDirectory(FString InZipName, int IgnoreBigFile, int MaxFileCount);// 0x343be3fee041
	int ZipFiles(FString InZipName, out const FString[] InFiles);// 0x343ae3fee041
	bool RestartApplication();// 0x3439e3fee041
	bool MountPak(FString InPakFile, int InOrder, FString InMountPoint);// 0x3438e3fee041
	bool IsUAGameDebugMode();// 0x3437e3fee041
	bool IsEditor();// 0x3436e3fee041
	IntPoint GetScreenSize();// 0x3435e3fee041
	FString GetPublishedVersionType();// 0x3434e3fee041
	FString GetPlatform();// 0x3433e3fee041
	FString GetNetModeByWorldContextObject(Object* WorldContextObject);// 0x3432e3fee041
	FString GetNetMode();// 0x3431e3fee041
	FString GetLocalIPAddress();// 0x3430e3fee041
	GameUserSettings* GetGameUserSettings();// 0x342fe3fee041
	enum GetGameSceneType(World* InWorld);// 0x342ee3fee041
	FString GetExecutablePath();// 0x342de3fee041
	Engine* GetEngine();// 0x342ce3fee041
	FString GetDeviceModel();// 0x342be3fee041
	FString GetAppVersionDisplay();// 0x342ae3fee041
	FString EncodeBase64(FString Source);// 0x3429e3fee041
	void DownloadVersionPakPackage();// 0x3428e3fee041
	void DownloadLuaFixPackage();// 0x3427e3fee041
	void CreateProc(FString URL, FString Parms);// 0x3426e3fee041

--------------------------------
Class: MFDeviceConsole.Object
	void InitDeviceConsoleConfig();// 0x343de3fee041

--------------------------------
Class: MFDeviceQualityScalability.Object
	void InitQualitySettingConfig();// 0x343ee3fee041

--------------------------------
Class: MFMemoryScalability.Object
	void SetMemoryScalabilityIndex(int Index);// 0x3445e3fee041
	void InitMemorySettingConfig();// 0x3444e3fee041
	int GetTotalMemoryInGB();// 0x3443e3fee041
	int GetIntValue(FString Key, int DefaultValue);// 0x3442e3fee041
	float GetFloatValue(FString Key, float DefaultValue);// 0x3441e3fee041
	void ExecConsoleVarsInLobby();// 0x3440e3fee041
	void ExecConsoleVarsInBattle();// 0x343fe3fee041

--------------------------------
Class: MFPhoneModelLimitation.Object
	void UpdateMobileQCCConfig();// 0x3451e3fee041
	bool NeedEnableAA();// 0x3450e3fee041
	bool IsVeryLowDevice();// 0x344fe3fee041
	bool IsConfigLoaded();// 0x344ee3fee041
	void InitMobileQCCConfig();// 0x344de3fee041
	FString GetModelName();// 0x344ce3fee041
	int GetMobileMaxFrameRate();// 0x344be3fee041
	bool GetMobileLimition();// 0x344ae3fee041
	int GetMobileDeviceLevel();// 0x3449e3fee041
	int GetMobileCurrentFrameRate();// 0x3448e3fee041
	bool GetIsInFPS90BlackList();// 0x3447e3fee041
	bool GetIsInFPS120BlackList();// 0x3446e3fee041

--------------------------------
Class: MFUObjectCheckTool.Object
	<FString,FString> CheckUObjectLeak(out FString[] WhiteList);// 0x3452e3fee041

--------------------------------
Class: UnLuaInterface.Interface.Object
	FString GetModuleName();// 0x3455e3fee041

--------------------------------
Class: UnLuaLatentAction.Object
	delegate Callback;//[Offset: 0x30, Size: 0x10]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x345be3fee041
	void OnLegacyCallback(int InLinkage);// 0x345ae3fee041
	void OnCompleted(int InLinkage);// 0x3459e3fee041
	bool GetTickableWhenPaused();// 0x3458e3fee041
	LatentActionInfo CreateInfoForLegacy();// 0x3457e3fee041
	LatentActionInfo CreateInfo(int Linkage);// 0x3456e3fee041

--------------------------------
Class: UnLuaManager.Object
	<class Object,FString> ModuleNames;//[Offset: 0x28, Size: 0x50]
	<FString,class Object> Classes;//[Offset: 0x78, Size: 0x50]
	<class Object,class Object> Derived2BaseClasses;//[Offset: 0x2a8, Size: 0x50]
	<Actor*> AttachedActors;//[Offset: 0x3f8, Size: 0x50]
	Function* InputActionFunc;//[Offset: 0x448, Size: 0x8]
	Function* InputAxisFunc;//[Offset: 0x450, Size: 0x8]
	Function* InputTouchFunc;//[Offset: 0x458, Size: 0x8]
	Function* InputVectorAxisFunc;//[Offset: 0x460, Size: 0x8]
	Function* InputGestureFunc;//[Offset: 0x468, Size: 0x8]
	Function* AnimNotifyFunc;//[Offset: 0x470, Size: 0x8]
	void TriggerAnimNotify();// 0x3464e3fee041
	void OnLatentActionCompleted(int LinkID);// 0x3463e3fee041
	void OnActorDestroyed(Actor* Actor);// 0x3462e3fee041
	void InputVectorAxis(out const Vector AxisValue);// 0x3461e3fee041
	void InputTouch(byte FingerIndex, out const Vector Location);// 0x3460e3fee041
	void InputGesture(float Value);// 0x345fe3fee041
	void InputAxis(float AxisValue);// 0x345ee3fee041
	void InputAction(Key Key);// 0x345de3fee041
	bool HasPostEngineInited();// 0x345ce3fee041

--------------------------------
Class: UnLuaPerformanceTestProxy.Actor.Object
	int MeshID;//[Offset: 0x2e8, Size: 0x4]
	FString MeshName;//[Offset: 0x2f0, Size: 0x10]
	Vector COM;//[Offset: 0x300, Size: 0xc]
	int[] Indices;//[Offset: 0x310, Size: 0x10]
	Vector[] Positions;//[Offset: 0x320, Size: 0x10]
	Vector[] PredictedPositions;//[Offset: 0x330, Size: 0x10]
	void UpdatePositions(out const Vector[] NewPositions);// 0x3472e3fee041
	FString UpdateMeshName(FString NewName);// 0x3471e3fee041
	int UpdateMeshID(int NewID);// 0x3470e3fee041
	void UpdateIndices(out const int[] NewIndices);// 0x346fe3fee041
	void Simulate(float DeltaTime);// 0x346ee3fee041
	bool Raycast(out const Vector Origin, out const Vector Direction);// 0x346de3fee041
	void NOP();// 0x346ce3fee041
	Vector[] GetPredictedPositions();// 0x346be3fee041
	void GetPositions(out Vector[] OutPositions);// 0x346ae3fee041
	FString GetMeshName();// 0x3469e3fee041
	bool GetMeshInfo(out int OutMeshID, out FString OutMeshName, out Vector OutCOM, out int[] OutIndices, out Vector[] OutPositions, out Vector[] OutPredictedPositions);// 0x3468e3fee041
	int GetMeshID();// 0x3467e3fee041
	void GetIndices(out int[] OutIndices);// 0x3466e3fee041
	Vector GetCOM();// 0x3465e3fee041

--------------------------------
Class: AndroidPermissionFunctionLibrary.BlueprintFunctionLibrary.Object
	bool CheckPermission(FString permission);// 0x3476e3fee041
	AndroidPermissionCallbackProxy* AcquirePermissions(out const FString[] Permissions);// 0x3475e3fee041

--------------------------------
Class: ReplicationGraph.ReplicationDriver.Object
	class NetReplicationGraphConnection* ReplicationConnectionManagerClass;//[Offset: 0x28, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x30, Size: 0x8]
	NetReplicationGraphConnection*[] Connections;//[Offset: 0x38, Size: 0x10]
	NetReplicationGraphConnection*[] PendingConnections;//[Offset: 0x48, Size: 0x10]
	ReplicationGraphNode*[] GlobalGraphNodes;//[Offset: 0x98, Size: 0x10]
	ReplicationGraphNode*[] PrepareForReplicationNodes;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: NetReplicationGraphConnection.ReplicationConnectionDriver.Object
	NetConnection* NetConnection;//[Offset: 0x28, Size: 0x8]
	ReplicationGraphDebugActor* DebugActor;//[Offset: 0x170, Size: 0x8]
	LastLocationGatherInfo[] LastGatherLocations;//[Offset: 0x188, Size: 0x10]
	ReplicationGraphNode*[] ConnectionGraphNodes;//[Offset: 0x1a0, Size: 0x10]
	ReplicationGraphNode_TearOff_ForConnection* TearOffNode;//[Offset: 0x1b0, Size: 0x8]
	ReplicationGraph* OwnerReplicationGraph;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: ReplicationGraphDebugActor.Actor.Object
	ReplicationGraph* ReplicationGraph;//[Offset: 0x2e0, Size: 0x8]
	NetReplicationGraphConnection* ConnectionManager;//[Offset: 0x2e8, Size: 0x8]
	void ServerStopDebugging();// 0x347fe3fee041
	void ServerStartDebugging();// 0x347ee3fee041
	void ServerSetPeriodFrameForClass(class Object Class, int PeriodFrame);// 0x347de3fee041
	void ServerSetCullDistanceForClass(class Object Class, float CullDistance);// 0x347ce3fee041
	void ServerSetConditionalActorBreakpoint(Actor* Actor);// 0x347be3fee041
	void ServerPrintCullDistances();// 0x347ae3fee041
	void ServerPrintAllActorInfo(FString Str);// 0x3479e3fee041
	void ServerCellInfo();// 0x3478e3fee041
	void ClientCellInfo(Vector CellLocation, Vector CellExtent, const Actor*[] Actors);// 0x3477e3fee041

--------------------------------
Class: LastLocationGatherInfo
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Vector LastLocation;//[Offset: 0x8, Size: 0xc]
	Vector LastOutOfRangeLocationCheck;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: ReplicationGraphNode.Object
	ReplicationGraphNode*[] AllChildNodes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ReplicationGraphNode_TearOff_ForConnection.ReplicationGraphNode.Object
	TearOffActorInfo[] TearOffActors;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: TearOffActorInfo
	Actor* Actor;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BasicReplicationGraph.ReplicationGraph.ReplicationDriver.Object
	ReplicationGraphNode_GridSpatialization2D* GridNode;//[Offset: 0x4a0, Size: 0x8]
	ReplicationGraphNode_ActorList* AlwaysRelevantNode;//[Offset: 0x4a8, Size: 0x8]
	ConnectionAlwaysRelevantNodePair[] AlwaysRelevantForConnectionList;//[Offset: 0x4b0, Size: 0x10]
	Actor*[] ActorsWithoutNetConnection;//[Offset: 0x4c0, Size: 0x10]

--------------------------------
Class: ReplicationGraphNode_GridSpatialization2D.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: ConnectionAlwaysRelevantNodePair
	NetConnection* NetConnection;//[Offset: 0x0, Size: 0x8]
	ReplicationGraphNode_AlwaysRelevant_ForConnection* Node;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ReplicationGraphNode_AlwaysRelevant_ForConnection.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object
	AlwaysRelevantActorInfo[] PastRelevantActors;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: AlwaysRelevantActorInfo
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* LastViewer;//[Offset: 0x8, Size: 0x8]
	Actor* LastViewTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ReplicationGraphNode_ActorListFrequencyBuckets.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_DynamicSpatialFrequency.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_ConnectionDormancyNode.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_DormancyNode.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_GridCell.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object
	ReplicationGraphNode* DynamicNode;//[Offset: 0x140, Size: 0x8]
	ReplicationGraphNode_DormancyNode* DormancyNode;//[Offset: 0x148, Size: 0x8]

--------------------------------
Class: ReplicationGraphNode_AlwaysRelevant.ReplicationGraphNode.Object
	ReplicationGraphNode* ChildNode;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: AnimNotify_EjectBulletShell.AnimNotify.Object

--------------------------------
Class: AnimNotify_FootstepSmoke.AnimNotify_PlayParticleEffect.AnimNotify.Object

--------------------------------
Class: AnimNotify_FootstepSound.AnimNotify_PlayAudio.AnimNotify.Object

--------------------------------
Class: AnimNotify_HideThrowWeapon.AnimNotify.Object

--------------------------------
Class: AnimNotify_HUDShake.AnimNotify.Object
	enum[] StartShakeEvents;//[Offset: 0x38, Size: 0x10]
	enum[] EndShakeEvents;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: AnimNotify_MeleeHit.AnimNotify.Object

--------------------------------
Class: AnimNotify_MeleeHitCanNextPhase.AnimNotify.Object

--------------------------------
Class: AnimNotify_MeleeHitCanNotNextPhase.AnimNotify.Object

--------------------------------
Class: AnimNotify_MeleeHitCanReenter.AnimNotify.Object

--------------------------------
Class: AnimNotify_PlayCameraShake.AnimNotify.Object
	class MatineeCameraShake* CSTemplate;//[Offset: 0x38, Size: 0x8]
	FName SocketName;//[Offset: 0x40, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x48, Size: 0xc]
	float ShakeInnerRadius;//[Offset: 0x54, Size: 0x4]
	float ShakeOuterRadius;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: AnimNotify_PlayHeadwearUIAnim.AnimNotify.Object

--------------------------------
Class: AnimNotify_ReloadOneByOne.AnimNotify.Object

--------------------------------
Class: AnimNotify_SGPlayAudio.AnimNotify_PlayAudio.AnimNotify.Object
	bool bPlayAudioOnly1P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]

--------------------------------
Class: AnimNotify_TriggerSoundIndicator.AnimNotify.Object
	enum SoundType;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: CompetitionGameManageActor.Actor.Object

--------------------------------
Class: CompetitionOBGlobalDateComponent.ActorComponent.Object
	float SynchronizationInterval;//[Offset: 0xb8, Size: 0x4]
	CompetitionOBGlobalDataInfo CompetitionOBGlobalDataInfo;//[Offset: 0xc0, Size: 0x18]
	TimerHandle SynchronizationHandle;//[Offset: 0xd8, Size: 0x8]
	CompetitionGamePlayerDataInfo TempPlayerDataInfo;//[Offset: 0xe0, Size: 0x60]
	CompetitionGamePlayerDataInfo TryGetCompetitionGamePlayerDataInfoByIndex(int TeamID, int PlayerIndex);// 0x349be3fee041
	bool TryGetCompetitionGamePlayerDataInfoByGID(int64 PlayerGID, out CompetitionGamePlayerDataInfo PlayerDataInfo);// 0x349ae3fee041
	CompetitionGamePlayerDataInfo TryGetCompetitionGamePlayerDataInfoByController(SGPlayerController* PC, out bool bFind);// 0x3499e3fee041
	void RefreshAllPlayerDateInfo();// 0x3498e3fee041
	void PlayerFinishGame(PlayerController* C, enum FinishType, Actor* EscapeVolume);// 0x3497e3fee041
	void OnSynchronizationGlobalData();// 0x3496e3fee041
	void OnStackableItemSourceInfoChange(Character* Character, SGInventory* SourceInventory, bool bAdd, StackableItemSourceInfo[] ChangedItemInfo, int ItemID);// 0x3495e3fee041
	void OnSpawnDeathBoxHandle(Character* Character, SGInventory* Inventory, out const CachedDeadCharacterInfo CachedDeadCharacterInfo, enum DeathDropType, bool bDuplicationDrop);// 0x3494e3fee041
	void OnRep_CompetitionOBGlobalDataInfo();// 0x3493e3fee041
	void OnRemoveToTeamHandle(SGTeamInfo* TeamInfo, Controller* C);// 0x3492e3fee041
	void OnProcessPawnHandle(PlayerController* PC, Pawn* Pawn);// 0x3491e3fee041
	void OnKilledHandle(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x3490e3fee041
	void OnInventoryRemoved(Character* Character, SGInventory* Inventory);// 0x348fe3fee041
	void OnInventoryAdded(Character* Character, SGInventory* Inventory);// 0x348ee3fee041
	void OnEnduranceChangedHandle(enum Type, float EnduranceDelta, float CurrentVal, float MaxVal, Character* Character);// 0x348de3fee041
	void OnCalcInventoryPrice(Character* Character, SGInventory* Inventory, bool bAdd);// 0x348ce3fee041
	int OnCalcDiePlayerAllInventoryValue(SGCharacter* DieCharacter);// 0x348be3fee041
	void OnAISpawnedHandle(Actor* SpawnPoint, Character* AICharacter);// 0x348ae3fee041
	void OnAddToTeamHandle(SGTeamInfo* TeamInfo, Controller* C);// 0x3489e3fee041
	int GetVailPlayerNumber();// 0x3488e3fee041
	FString GetTeamNameByPlayerState(PlayerState* PS);// 0x3487e3fee041
	void GetTeamIDByPlayerState(PlayerState* PS, out int TeamID, out int TeamIndex);// 0x3486e3fee041
	void GetTeamIDByPlayerController(Controller* C, out int TeamID, out int TeamIndex);// 0x3485e3fee041
	int GetTeamArrayIndex(PlayerState* PS);// 0x3484e3fee041
	void GetPlayerNumberByPlayerResult(int TeamID, enum Result, out int TeamNum, out int ResultNum);// 0x3483e3fee041
	int GetCommonItemValue(int ItemID, int Count);// 0x3482e3fee041
	uint32 GetAlivePlayerNumByTeamID(uint32 TeamID);// 0x3481e3fee041
	void AssemblyCompetitionGamePlayerDataInfoByController(out CompetitionGamePlayerDataInfo PlayerDataInfo, SGPlayerController* PC);// 0x3480e3fee041

--------------------------------
Class: CompetitionOBGlobalDataInfo
	uint32 LeftPMCNumber;//[Offset: 0x0, Size: 0x4]
	uint32 LeftScavNumber;//[Offset: 0x4, Size: 0x4]
	CompetitionTeamDataInfo[] AllTeamInfoList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CompetitionTeamDataInfo
	uint32 TeamID;//[Offset: 0x0, Size: 0x4]
	FText TeamName;//[Offset: 0x8, Size: 0x18]
	CompetitionGamePlayerDataInfo[] AllPlayerList;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CompetitionGamePlayerDataInfo
	SGPlayerController* PC;//[Offset: 0x0, Size: 0x8]
	PlayerState* PS;//[Offset: 0x8, Size: 0x8]
	uint64 GID;//[Offset: 0x10, Size: 0x8]
	FString PlayerName;//[Offset: 0x18, Size: 0x10]
	uint32 PlayerKillNum;//[Offset: 0x28, Size: 0x4]
	float PlayerCurAllEndurance;//[Offset: 0x2c, Size: 0x4]
	float PlayerCurAllEnduranceMax;//[Offset: 0x30, Size: 0x4]
	int64 PlayerTakeOutAllValue;//[Offset: 0x38, Size: 0x8]
	enum PlayerResult;//[Offset: 0x40, Size: 0x1]
	Vector PlayerPosition;//[Offset: 0x44, Size: 0xc]
	uint32 KillPlayerNum;//[Offset: 0x50, Size: 0x4]
	uint32 KillScavNum;//[Offset: 0x54, Size: 0x4]
	uint32 KillBossNum;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: SGPlayerController.PlayerController.Controller.Actor.Object
	bool bDebugShowDamageInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x635, Size: 0x1]
	class HUD* HUDClass;//[Offset: 0x638, Size: 0x8]
	class HUD* HUDClassMobile;//[Offset: 0x640, Size: 0x8]
	FString HUDClassPathName;//[Offset: 0x648, Size: 0x10]
	FString HUDClassMobilePathName;//[Offset: 0x658, Size: 0x10]
	class SGCharacterCaptureActor* CharacterCaptureActorClass;//[Offset: 0x668, Size: 0x8]
	SoundIndicator* SoundIndicator;//[Offset: 0x670, Size: 0x8]
	class SoundIndicator* SoundIndicatorClass;//[Offset: 0x678, Size: 0x8]
	class PlayerInput* PlayerInputClass;//[Offset: 0x680, Size: 0x8]
	class PlayerInput* PlayerInputClassMobile;//[Offset: 0x688, Size: 0x8]
	FString PlayerInputClassPathName;//[Offset: 0x690, Size: 0x10]
	FString PlayerInputClassMobilePathName;//[Offset: 0x6a0, Size: 0x10]
	SGPlayerInput* SGPlayerInput;//[Offset: 0x6b0, Size: 0x8]
	delegate PawnPendingDestroyEvent;//[Offset: 0x6b8, Size: 0x10]
	delegate OnProcessPawn;//[Offset: 0x6c8, Size: 0x10]
	delegate OnEscaped;//[Offset: 0x6d8, Size: 0x10]
	delegate OnViewTargetChanged;//[Offset: 0x6e8, Size: 0x10]
	delegate OnPlayerZoomChanged;//[Offset: 0x6f8, Size: 0x10]
	delegate OnOperated;//[Offset: 0x708, Size: 0x10]
	PlayerStart* PlayerStart;//[Offset: 0x728, Size: 0x8]
	class ActorComponent[] DebugCompInfoClasses;//[Offset: 0x730, Size: 0x10]
	delegate OnAutoMoveFin;//[Offset: 0x740, Size: 0x10]
	delegate OnAutoMoveDir;//[Offset: 0x750, Size: 0x10]
	delegate OnArrivedAtLocationDelegate;//[Offset: 0x760, Size: 0x10]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x770, Size: 0x1]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x778, Size: 0x8]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x7a0, Size: 0x8]
	bool bAllowInMemoryReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 0x1]
	SGCharacterCaptureActor* CharacterCaptureActor;//[Offset: 0x7b0, Size: 0x8]
	SGPCUIModeComponent* UIModeComponent;//[Offset: 0x7b8, Size: 0x8]
	SGPCStatisComponent* PCStatisComponent;//[Offset: 0x7c0, Size: 0x8]
	SGPCSpectatingComponent* SpectatingComponent;//[Offset: 0x7c8, Size: 0x8]
	SGPCFPPModeComponent* FPPModeComponent;//[Offset: 0x7d0, Size: 0x8]
	bool bMoveTimeDiffEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e2, Size: 0x1]
	int TimeOutValue;//[Offset: 0x7e4, Size: 0x4]
	DSSwitchConfig DSSwitchConfig;//[Offset: 0x7e8, Size: 0x1c]
	bool IsReconnectPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 0x1]
	int EndGameType;//[Offset: 0x80c, Size: 0x4]
	bool HasBeginGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 0x1]
	int nGetAttachLoopMaxNum;//[Offset: 0x814, Size: 0x4]
	int InputFlowDataSplitSize;//[Offset: 0x818, Size: 0x4]
	void TimerForServerDebugRPC();// 0x1bbfe3fee041
	void TimerForHeartbeat();// 0x1bbee3fee041
	void ServerSendTssAntiData(const byte[] AntiData);// 0x1bbde3fee041
	void ServerSendShootInputFlowData(const ShootInputFlowData InputData);// 0x1bbbe3fee041
	void ServerNotifyPCSpawned();// 0x1bbae3fee041
	void ServerHeartbeat(int PingNum);// 0x1bb9e3fee041
	void ServerDebugRPCTwo(FString Key, FString Value);// 0x1bb8e3fee041
	void ServerDebugRPC(FString Str);// 0x1bb7e3fee041
	void SendDebugRPC(int Len, int Last, int Num);// 0x1bb6e3fee041
	void OnRepDSSwitchConfig();// 0x1bb5e3fee041
	void OnPlayerOnReconnect(PlayerController* InPC);// 0x1bb4e3fee041
	void OnGameBegin(PlayerController* PlayerController);// 0x1bb3e3fee041
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x1b97e3fee041
	void InitNewPlayer(const UniqueNetIdRepl UniqueID, const FString Options, const FString Portal);// 0x1b96e3fee041
	SGPCUIModeComponent* GetUIModeComponent();// 0x1b95e3fee041
	SGPCSpectatingComponent* GetSpecatingComponent();// 0x1b94e3fee041
	float GetMoveTimeDiff();// 0x1b93e3fee041
	int GetLostPingSeconds();// 0x1b92e3fee041
	SGPCFPPModeComponent* GetFPPModeComponent();// 0x1b91e3fee041
	void DSInitConfig();// 0x1b90e3fee041
	void CloseConnection();// 0x1b8fe3fee041
	void ClientHeartbeat(int PingNum);// 0x1b8ee3fee041
	void BeforeCloseConnection();// 0x1b8de3fee041
	void AfterPostInitializeComponents();// 0x1b8ce3fee041

--------------------------------
Class: ShootInputFlowData
	FString InputFlowDataSlice;//[Offset: 0x0, Size: 0x10]
	bool bComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int SequenceNum;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SGCharacterCaptureActor.Actor.Object
	SGInventoryEquipMeshComponent*[] DressedEquipMeshComponents;//[Offset: 0x2e8, Size: 0x10]
	SGInventoryEquipMeshComponent* BodyEquipMeshComponent;//[Offset: 0x2f8, Size: 0x8]
	<SGInventoryEquipMeshComponent*,BadgeAttachInfo> BadgeAttachComponents;//[Offset: 0x300, Size: 0x50]
	bool bEnableAvatarMerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	bool bTurnOnMemoryOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 0x1]
	SceneCaptureComponent2D* SceneCaptureNode;//[Offset: 0x358, Size: 0x8]
	SkeletalMeshComponent* CharacterMeshComponent;//[Offset: 0x360, Size: 0x8]
	SceneComponent* WeaponRootComponent;//[Offset: 0x368, Size: 0x8]
	Vector ActorRelativeLocation;//[Offset: 0x370, Size: 0xc]
	Character* OwnerCharacter;//[Offset: 0x380, Size: 0x8]
	AnimMontage* HandAnimation;//[Offset: 0x388, Size: 0x8]
	SGInventory* CachedCurrentWeapon;//[Offset: 0x3b8, Size: 0x8]
	<SGInventory*,MeshComponent*> WeaponMeshComponetLookupMap;//[Offset: 0x3d0, Size: 0x50]
	SGInventory*[] WeaponMeshLoadingList;//[Offset: 0x420, Size: 0x10]
	<SGInventory*,WeaponMeshWaitToAttach> WeaponMeshWaitToAttachMap;//[Offset: 0x430, Size: 0x50]
	SGInventory* CachedAdapterToDetach;//[Offset: 0x480, Size: 0x8]
	SGInventory* CachedAdapterToAttach;//[Offset: 0x488, Size: 0x8]
	SkeletalMeshComponent* MergedSkeletalMeshComponent;//[Offset: 0x4b8, Size: 0x8]
	SkeletalMeshMergeParams MeshMergeParams;//[Offset: 0x4c0, Size: 0x78]
	void SetOwnerCharacter(Pawn* Character);// 0x3c37e3fee041
	void ResetRotation();// 0x3c36e3fee041
	void OnWeaponEquipPositionChanged(SGInventory* Inventory, enum EquipPosition);// 0x3c35e3fee041
	void OnShowMergedAvatar(SkeletalMeshComponent* MergedMeshComp, bool bShow);// 0x3c34e3fee041
	void OnRemoveInventoryEvent(Character* Character, SGInventory* TargetInventory);// 0x3c33e3fee041
	void OnPlayInventoryAnimation(SGInventory* Inventory, AnimSequenceBase* Anim);// 0x3c32e3fee041
	void OnOwnerEquipSkeletalMeshLoadCompleted(SkeletalMeshComponent* SkeletalMeshComp);// 0x3c31e3fee041
	void OnInventoryAttachPositionChanged(SGInventory* Inventory, out const InventoryContainerBase[] OldParentGridBaseTraceList, InventoryContainerBase NewParentContainerBase, enum OldAttachPos, enum NewAttachPos);// 0x3c30e3fee041
	void OnInventoryAnimPoseChanged(SGInventory* Inv, out const InventoryAnimPoseInfo AnimPoseInfo);// 0x3c2fe3fee041
	void OnFoldStock(SGInventory* StockInventory, bool bFold);// 0x3c2ee3fee041
	void OnCharacterSexChanged(enum CharacterSex);// 0x3c2de3fee041
	void OnCharacterMeshChanged(SkeletalMesh* CharacterMesh);// 0x3c2ce3fee041
	void OnBagOpen();// 0x3c2be3fee041
	void OnBagClose();// 0x3c2ae3fee041
	void OnBadgeAttachPositionChanged(SGInventory* Inv, SGInventory* AttachInv);// 0x3c29e3fee041
	void OnAvatarRemoved(SGInventory* TargetInventory);// 0x3c28e3fee041
	void OnAvatarAdded(SGInventory* TargetInventory);// 0x3c27e3fee041
	void OnAfterCharacterUpdateAvatarLayers();// 0x3c26e3fee041
	void MergeMesh();// 0x3c25e3fee041
	SGInventoryEquipMeshComponent* GetWearableComponent(SGInventory* Inv);// 0x3c24e3fee041
	void DeferredCaptureCharacterUpdateLayers();// 0x3c23e3fee041
	void CaptureCharacterUpdateMeshLayers();// 0x3c22e3fee041
	void CaptureCharacter(bool bEnableCapture);// 0x3c21e3fee041
	void AddRotation(Rotator Rotation);// 0x3c20e3fee041

--------------------------------
Class: SGInventory.Actor.Object
	delegate PreGiveToEvent;//[Offset: 0x2f0, Size: 0x10]
	delegate AddedEvent;//[Offset: 0x300, Size: 0x10]
	delegate RemovedEvent;//[Offset: 0x310, Size: 0x10]
	delegate DragedEvent;//[Offset: 0x320, Size: 0x10]
	delegate OnRollUpStateChanged;//[Offset: 0x330, Size: 0x10]
	delegate AssembledEvent;//[Offset: 0x340, Size: 0x10]
	delegate OnAssembledEvent;//[Offset: 0x350, Size: 0x10]
	delegate AdpaterFreshEvent;//[Offset: 0x360, Size: 0x10]
	delegate DisassembledEvent;//[Offset: 0x370, Size: 0x10]
	delegate BeDisassembledEvent;//[Offset: 0x380, Size: 0x10]
	delegate AllAssembleFinishedEvent;//[Offset: 0x390, Size: 0x10]
	delegate RemovedFromGridWidgetEvent;//[Offset: 0x3a0, Size: 0x10]
	delegate ChangeAttachPosEvent;//[Offset: 0x3b0, Size: 0x10]
	delegate OnOwnerChangedEvent;//[Offset: 0x3c0, Size: 0x10]
	delegate ChangeParentActorEvent;//[Offset: 0x3d0, Size: 0x10]
	delegate ClientChangeParentActorEvent;//[Offset: 0x3e0, Size: 0x10]
	delegate LockedByCharacterChangedEvent;//[Offset: 0x3f0, Size: 0x10]
	delegate OnWeaponActivedEvent;//[Offset: 0x400, Size: 0x10]
	delegate OnInventoryDropped;//[Offset: 0x410, Size: 0x10]
	delegate OnSwitchToSimpleMeshEvent;//[Offset: 0x420, Size: 0x10]
	delegate OnInventorySkeletalMeshLoadCompleted;//[Offset: 0x430, Size: 0x10]
	delegate OnInventoryStaticMeshLoadCompleted;//[Offset: 0x440, Size: 0x10]
	delegate OnInventorySimpleSkeletalMeshLoadCompleted;//[Offset: 0x450, Size: 0x10]
	delegate OnEquipSkeletalMeshLoadCompleted;//[Offset: 0x460, Size: 0x10]
	delegate OnEquipStaticMeshLoadCompleted;//[Offset: 0x470, Size: 0x10]
	delegate OnInventoryHiddenStateChanged;//[Offset: 0x480, Size: 0x10]
	delegate OnInventoryVisibilityChanged;//[Offset: 0x490, Size: 0x10]
	delegate OnInventoryAttachToBack;//[Offset: 0x4a0, Size: 0x10]
	delegate OnInventoryDressed;//[Offset: 0x4b0, Size: 0x10]
	delegate OnInventoryUnDressed;//[Offset: 0x4c0, Size: 0x10]
	delegate OnStartInteractBoxInventory;//[Offset: 0x4d0, Size: 0x10]
	delegate OnInstIdReplicated;//[Offset: 0x5c8, Size: 0x10]
	SGInventoryZoneInfoComponent* ZoneInfoComponent;//[Offset: 0x5f0, Size: 0x8]
	uint64 ItemID;//[Offset: 0x5f8, Size: 0x8]
	uint32 ArmorLevel;//[Offset: 0x600, Size: 0x4]
	FString MagazineTypeName;//[Offset: 0x610, Size: 0x10]
	FString UniqueID;//[Offset: 0x620, Size: 0x10]
	SGInventoryCommonDataComponent* CommonDataComponent;//[Offset: 0x630, Size: 0x8]
	enum RelevantCheckType;//[Offset: 0x658, Size: 0x1]
	Actor*[] RelevantForActors;//[Offset: 0x660, Size: 0x10]
	uint64 LastRefreshFrame;//[Offset: 0x678, Size: 0x8]
	int LastInfoChangeMask;//[Offset: 0x680, Size: 0x4]
	int RuntimeID;//[Offset: 0x688, Size: 0x4]
	enum EquipPosition;//[Offset: 0x68c, Size: 0x1]
	float MinComponentTickOptDist;//[Offset: 0x690, Size: 0x4]
	float MinComponentTickOptInterval;//[Offset: 0x694, Size: 0x4]
	float MinActorTickOptDist;//[Offset: 0x698, Size: 0x4]
	float MinActorTickOptInterval;//[Offset: 0x69c, Size: 0x4]
	bool bForceUseOwnerTickInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 0x1]
	bool bFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 0x1]
	bool bBeDormantWhenFollowOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a6, Size: 0x1]
	SGInventoryAssembleComponent* AssembleComp;//[Offset: 0x6a8, Size: 0x8]
	SGInventoryEquipMeshComponent* EquipMeshComp;//[Offset: 0x6b0, Size: 0x8]
	SGInventoryMeshComponent* MeshComponent;//[Offset: 0x6b8, Size: 0x8]
	SGInventoryCameraComponent* InventoryCameraComp;//[Offset: 0x6c0, Size: 0x8]
	SGInventoryModifyAttributeComponent* InventoryModifyAttributeComp;//[Offset: 0x6c8, Size: 0x8]
	SGWeaponMovementComponent* WeaponMovementComponent;//[Offset: 0x6d0, Size: 0x8]
	SGInventoryTypeComponent_Avatar* InventoryTypeAvatarComponent;//[Offset: 0x6d8, Size: 0x8]
	SGInventoryHearingAidComponent* InventoryHearingAidComponent;//[Offset: 0x6e0, Size: 0x8]
	SGInventoryAbilityComponent* InventoryAbilityComponent;//[Offset: 0x6e8, Size: 0x8]
	SGInventoryZoomComponent* InventoryZoomComponent;//[Offset: 0x6f0, Size: 0x8]
	SGInventorySoundDiffuseComponent* SoundDiffuseComponent;//[Offset: 0x6f8, Size: 0x8]
	bool SkipTickOptimize();// 0x4637e3fee041
	bool ShouldDisplayHitEffect(int AttemptedDamage, int DamageAmount, int FinalHealth, int FinalArmor);// 0x4636e3fee041
	void SetShowInvID(bool bShow);// 0x4635e3fee041
	void SetRefreshFrame(enum InfoChangeType);// 0x4634e3fee041
	void SetIsForbbidenDiscardByCharacter(bool NewSetValue);// 0x4633e3fee041
	void SetFreezed(bool bInFreezed);// 0x4632e3fee041
	void ReceiveChangeAttachPositionEvent(Character* OwnerCharacter, enum NewPosition);// 0x4631e3fee041
	void OnRep_RuntimeID();// 0x4630e3fee041
	void OnPreGiveTo(Pawn* Target, enum SourceType, enum Pos, ItemGridInfo DropPosition, Actor* InParentActor);// 0x462fe3fee041
	void OnInventoryRemoved(Character* OwnerCharacter);// 0x462ee3fee041
	void OnInventoryAttachPositionChanged(Character* OwnerCharacter, enum NewAttachPosition);// 0x462de3fee041
	void OnInventoryAdded(Character* OwnerCharacter);// 0x462ce3fee041
	bool IsFreezed();// 0x462be3fee041
	uint64 GetRefreshFrameInfoChangeMask(uint64 LastCheckRefreshFrame);// 0x462ae3fee041
	bool GetIsForbbidenDiscardByCharacter();// 0x4629e3fee041
	FString GetInvName();// 0x4628e3fee041
	SGInventoryZoomComponent* GetInventoryZoomComponent();// 0x4627e3fee041
	SGInventoryTypeComponent_Avatar* GetInventoryTypeComponent_Avatar();// 0x4626e3fee041
	SGInventorySoundDiffuseComponent* GetInventorySoundDiffuseComponent();// 0x4625e3fee041
	FString GetInventoryName();// 0x4624e3fee041
	SGInventoryModifyAttributeComponent* GetInventoryModifyAttributeComp();// 0x4623e3fee041
	SGInventoryMeshComponent* GetInventoryMeshComponent();// 0x4622e3fee041
	SGInventoryHearingAidComponent* GetInventoryHearingAidComponent();// 0x4621e3fee041
	SGInventoryEquipMeshComponent* GetInventoryEquipMeshComponent();// 0x4620e3fee041
	SGInventoryCameraComponent* GetInventoryCameraComp();// 0x461fe3fee041
	SGInventoryAssembleComponent* GetInventoryAssembleComp();// 0x461ee3fee041
	SGInventoryAbilityComponent* GetInventoryAbilityComponent();// 0x461de3fee041
	Character* GetCharacterOwner();// 0x461ce3fee041
	void DestroySelf();// 0x461be3fee041
	void DelayDestroySelf();// 0x461ae3fee041
	void CacheComponents();// 0x4619e3fee041

--------------------------------
Class: ItemGridInfo
	int Row;//[Offset: 0x0, Size: 0x4]
	int Column;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SGInventoryZoneInfoComponent.ActorComponent.Object
	uint64 InstId;//[Offset: 0xd0, Size: 0x8]
	uint64 TakeInPlayerGID;//[Offset: 0xd8, Size: 0x8]
	int InsureType;//[Offset: 0xe0, Size: 0x4]
	uint64 OldInstID;//[Offset: 0xe8, Size: 0x8]
	uint64 OldTakeInPlayerGID;//[Offset: 0xf0, Size: 0x8]
	bool IsBlackLoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	int ExpireTime;//[Offset: 0xfc, Size: 0x4]
	void OnRep_InstID();// 0x491fe3fee041

--------------------------------
Class: SGInventoryCommonDataComponent.ActorComponent.Object
	int MaxTotalCount;//[Offset: 0xc0, Size: 0x4]
	int TotalCount;//[Offset: 0xc4, Size: 0x4]
	int StandardPrice;//[Offset: 0xc8, Size: 0x4]
	int rarity;//[Offset: 0xcc, Size: 0x4]
	float RollUpTime;//[Offset: 0xd0, Size: 0x4]
	float Durability;//[Offset: 0xd4, Size: 0x4]
	float DurabilityMax;//[Offset: 0xd8, Size: 0x4]
	int RecoveryItemDurabilityCostStrategyBreakPoint;//[Offset: 0xdc, Size: 0x4]
	float MoistureCostRatio;//[Offset: 0xe8, Size: 0x4]
	float FoodCostRatio;//[Offset: 0xec, Size: 0x4]
	FString DisplayName;//[Offset: 0xf0, Size: 0x10]
	FString Description;//[Offset: 0x100, Size: 0x10]
	FString SimpleDisplayName;//[Offset: 0x110, Size: 0x10]
	Object* IconNormal;//[Offset: 0x120, Size: 0x8]
	Object* IconKill;//[Offset: 0x128, Size: 0x8]
	Object* IconRotate;//[Offset: 0x130, Size: 0x8]
	Object* IconSmall;//[Offset: 0x138, Size: 0x8]
	Object* IconWhite;//[Offset: 0x140, Size: 0x8]
	TextureRenderTarget2D* AssembleRTTexture;//[Offset: 0x148, Size: 0x8]
	MaterialInstanceDynamic* AssembleRTMaterial;//[Offset: 0x150, Size: 0x8]
	float MeshSizeToRTSizeScale;//[Offset: 0x158, Size: 0x4]
	FString IconResourcePath;//[Offset: 0x160, Size: 0x10]
	bool bCaptutred;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	float Weight;//[Offset: 0x174, Size: 0x4]
	float JumpZVelocityScale;//[Offset: 0x178, Size: 0x4]
	FString PickupSound;//[Offset: 0x180, Size: 0x10]
	FString UseSound;//[Offset: 0x190, Size: 0x10]
	FString DropSound;//[Offset: 0x1a0, Size: 0x10]
	TimerHandle CheckResourceTimerHandler;//[Offset: 0x1b0, Size: 0x8]
	float RTLoadDistance;//[Offset: 0x1b8, Size: 0x4]
	void SetTotalCount(int InTotalCount, bool bCalculateWeight);// 0x4692e3fee041
	void SetStandardPrice(int InStandardPrice);// 0x4691e3fee041
	void SetRollUpTime(float InRollUpTime);// 0x4690e3fee041
	void SetMaxTotalCount(int InMaxTotalCount);// 0x468fe3fee041
	void SetDurabilityMax(float InDurabilityMax);// 0x468ee3fee041
	void SetDurability(float InDurability);// 0x468de3fee041
	void OnRep_TotalCount();// 0x468ce3fee041
	void OnRep_Durability();// 0x468be3fee041
	void OnDurabilityChanged();// 0x468ae3fee041
	int GetTotalCount();// 0x4689e3fee041
	int GetStandardPrice();// 0x4688e3fee041
	float GetRollUpTime();// 0x4687e3fee041
	int GetMaxTotalCount();// 0x4686e3fee041
	enum GetInventoryDurabilityCostType();// 0x4685e3fee041
	Object* GetIcon(enum IconType);// 0x4684e3fee041
	float GetDurabilityPercent();// 0x4683e3fee041
	float GetDurabilityMax();// 0x4682e3fee041
	float GetDurability(bool bUseClientValue);// 0x4681e3fee041
	void CostDurability(float Value, bool bDurationCost);// 0x4680e3fee041
	void CheckRTResource();// 0x467fe3fee041

--------------------------------
Class: SGInventoryAssembleComponent.ActorComponent.Object
	GameplayTag AssembleTag;//[Offset: 0xc8, Size: 0x8]
	GameplayTag AssembleForGripTag;//[Offset: 0xd0, Size: 0x8]
	GameplayTag SubAssembleTag;//[Offset: 0xd8, Size: 0x8]
	uint32[] ConflictClassList;//[Offset: 0xe0, Size: 0x10]
	int DisplayContainerIndexOnParent;//[Offset: 0xf0, Size: 0x4]
	ItemGridInfo ContainerGridInfoOnParent;//[Offset: 0xf4, Size: 0x8]
	AssembleSocketInfo[] AssembleSupportSocketList;//[Offset: 0x100, Size: 0x10]
	Actor* ParentItem;//[Offset: 0x110, Size: 0x8]
	int ParentSocketIndex;//[Offset: 0x118, Size: 0x4]
	int InventoryWidth;//[Offset: 0x11c, Size: 0x4]
	int InventoryHeight;//[Offset: 0x120, Size: 0x4]
	Transform ScopeAimTransform;//[Offset: 0x130, Size: 0x30]
	FName ScopeAimSocketName;//[Offset: 0x160, Size: 0x8]
	FName ZeroPointSocketName;//[Offset: 0x168, Size: 0x8]
	FName[] SubScopeAimSocketNames;//[Offset: 0x170, Size: 0x10]
	FName[] SubMagnificationScopeAimSocketNames;//[Offset: 0x180, Size: 0x10]
	FName BoreSocketName;//[Offset: 0x190, Size: 0x8]
	FName[] MultiBoreSockets;//[Offset: 0x198, Size: 0x10]
	Vector WeaponWtihStockHoldingOffset;//[Offset: 0x1a8, Size: 0xc]
	Vector WeaponWtihHandguardOffset_LeftHand;//[Offset: 0x1b4, Size: 0xc]
	bool DisableHandguardOffsetWithoutForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	float LFingerAdaptiveAlpha;//[Offset: 0x1c4, Size: 0x4]
	float ScopeRadius;//[Offset: 0x1c8, Size: 0x4]
	SightBlockArea[] SightSubBlockAreas;//[Offset: 0x1d0, Size: 0x10]
	float IronSightDiffHeight;//[Offset: 0x1e0, Size: 0x4]
	bool bUnAssemable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 0x1]
	bool bStockCanBeFolded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5, Size: 0x1]
	float ADSShakeScale;//[Offset: 0x1e8, Size: 0x4]
	<class Actor,SGInventoryBulletMeshComponent*> CachedBulletMeshComps;//[Offset: 0x1f0, Size: 0x50]
	GameplayTagContainer ExtraFireRequireTagList;//[Offset: 0x240, Size: 0x20]
	GameplayTag DeducteFireRequireTag;//[Offset: 0x260, Size: 0x8]
	float BipodHeight;//[Offset: 0x268, Size: 0x4]
	AssembleParentInfo[] ParentItemList;//[Offset: 0x270, Size: 0x10]
	bool ShowBulletWhenSpectated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	StaticMeshComponent* CachedBullet;//[Offset: 0x288, Size: 0x8]
	StaticMeshComponent*[] CachedBores;//[Offset: 0x290, Size: 0x10]
	bool bFireRequiredTagFilled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	<FName,bool> MatchTagResults;//[Offset: 0x2a8, Size: 0x50]
	void UpdateCachedBulletAttachment();// 0x4652e3fee041
	void ServerRemoveChildInventory(SGInventory* AdapterItem);// 0x4651e3fee041
	void ServerAttachChildInventoryToSocket(SGInventory* AdapterItem, AssembleSocketInfo TargetSocket, int InContainerIndex);// 0x4650e3fee041
	void OnRepParentItemList();// 0x464fe3fee041
	void OnRep_ShowBulletWhenSpectated();// 0x464ee3fee041
	void OnParentActorChanged(Actor* NewParent, int NewContainerIndex);// 0x464de3fee041
	void OnInventoryHiddenStateChanged(bool bMeshHidden);// 0x464ce3fee041
	SGInventory* GetTopParentInventory(SGInventory* Inv, bool bIncludeSelf);// 0x464be3fee041
	SGInventory* GetParentWeaponFromList(SGInventory* Inv);// 0x464ae3fee041
	SGInventory* GetParentWeapon(SGInventory* Inv);// 0x4649e3fee041
	bool DoesAimSocketExist(MeshComponent* MeshComp);// 0x4648e3fee041

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AssembleSocketInfo
	FName SocketName;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer SupportAdapterTagList;//[Offset: 0x8, Size: 0x20]
	bool bDisplaySocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	Vector UIStartOffest;//[Offset: 0x2c, Size: 0xc]
	Vector UIEndOffest;//[Offset: 0x38, Size: 0xc]
	FText UIPartName;//[Offset: 0x48, Size: 0x18]
	SGInventory* AttachedInventory;//[Offset: 0x60, Size: 0x8]
	SocketOffsetInfo[] SocketOffsetInfo;//[Offset: 0x68, Size: 0x10]
	bool bPlaceHolderInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	uint32 FakeID;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SocketOffsetInfo
	FName OffsetName;//[Offset: 0x0, Size: 0x8]
	Vector OffsetLoc;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: SightBlockArea
	Vector Offset;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SGInventoryBulletMeshComponent.ActorComponent.Object
	StaticMesh* Mesh;//[Offset: 0xc0, Size: 0x28]
	StaticMesh* ShellMesh;//[Offset: 0xe8, Size: 0x28]
	StaticMesh* BeltMesh;//[Offset: 0x110, Size: 0x28]
	bool bBulletTraceForPerShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	EffectParticleInfo BulletTraceTemplate;//[Offset: 0x140, Size: 0x50]
	EffectParticleInfo BulletTraceTemplate1P;//[Offset: 0x190, Size: 0x50]
	float TracerEffectSpeed;//[Offset: 0x1e0, Size: 0x4]
	float TracerEffectLength;//[Offset: 0x1e4, Size: 0x4]
	bool bAdsHideBulletLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	void OnParticleTemplateLoadCompleted(bool bFirstPerson);// 0x4665e3fee041
	StaticMesh* GetShellMesh();// 0x4664e3fee041
	StaticMesh* GetMesh();// 0x4663e3fee041
	StaticMesh* GetBeltMesh();// 0x4662e3fee041
	void AsyncLoadComplete(FString PackageName);// 0x4661e3fee041

--------------------------------
Class: EffectParticleInfo
	ParticleSystem* PSTemplate;//[Offset: 0x0, Size: 0x28]
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Rotator PSRotation;//[Offset: 0x30, Size: 0xc]
	float PSScale;//[Offset: 0x3c, Size: 0x4]
	CurveFloat* PSScaleCurveByDistance;//[Offset: 0x40, Size: 0x8]
	float PSLifeTime;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: AssembleParentInfo
	Actor* ParentItem;//[Offset: 0x0, Size: 0x8]
	int OffsetIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SGInventoryEquipMeshComponent.ActorComponent.Object
	WearableMesh WearableMesh;//[Offset: 0xc0, Size: 0x360]
	int LayerIndex;//[Offset: 0x420, Size: 0x4]
	bool bIsAdapter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	bool bCanPlayAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 0x1]
	InventoryAnimPoseInfo AnimPoseInfo;//[Offset: 0x428, Size: 0x18]
	int ItemLevel;//[Offset: 0x450, Size: 0x4]
	int TranslucencySortPriority;//[Offset: 0x454, Size: 0x4]
	BoneModifyInfo[] BoneModifyInfoList;//[Offset: 0x458, Size: 0x10]
	bool ForceUseLobbyMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	bool HideBackPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 0x1]
	Vector BadgeAttachOffset;//[Offset: 0x46c, Size: 0xc]
	SkeletalMeshComponent*[] CachedLoadedSkeletalMeshCompList;//[Offset: 0x488, Size: 0x10]
	SceneComponent* SavedAttachParent;//[Offset: 0x498, Size: 0x8]
	FName SavedAttachSocketName;//[Offset: 0x4a0, Size: 0x8]
	MeshComponent*[] EquipMeshComponentList;//[Offset: 0x4a8, Size: 0x10]
	SGInventory* CachedInventory;//[Offset: 0x4b8, Size: 0x8]
	void OnUndressed();// 0x465be3fee041
	void OnLoadCompleted_StaticMeshTemplate(SoftObjectPath Path);// 0x465ae3fee041
	void OnLoadCompleted_SkeletalMeshTemplate(SoftObjectPath Path);// 0x4659e3fee041
	void OnInventoryRemoved(Character* OwnerCharacter);// 0x4658e3fee041
	void OnInventoryAttachPositionChanged(Character* OwnerCharacter, enum NewAttachPosition);// 0x4657e3fee041
	void OnInventoryAnimPoseChanged(SGInventory* Inv, out const InventoryAnimPoseInfo InAnimPoseInfo);// 0x4656e3fee041
	void OnInventoryAdded(Character* OwnerCharacter);// 0x4655e3fee041
	void OnDressed();// 0x4654e3fee041
	void CheckCharacterOwnerIsReady();// 0x4653e3fee041

--------------------------------
Class: WearableMesh
	bool bSwitchPrefab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	WearableMeshPrefab PrefabForMale;//[Offset: 0x8, Size: 0xa0]
	WearableMeshPrefab PrefabForFemale;//[Offset: 0xa8, Size: 0xa0]
	FName Tag;//[Offset: 0x148, Size: 0x8]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x150, Size: 0x28]
	SkeletalMesh* SkeletalMeshInGame;//[Offset: 0x178, Size: 0x28]
	SkeletalMesh* SkeletalMeshInGameForFemale;//[Offset: 0x1a0, Size: 0x28]
	SkeletalMesh* SkeletalMeshInLobby;//[Offset: 0x1c8, Size: 0x28]
	SkeletalMesh* SkeletalMeshInLobbyForFemale;//[Offset: 0x1f0, Size: 0x28]
	StaticMesh* StaticMesh;//[Offset: 0x218, Size: 0x28]
	<int64,SkeletalMesh*> AISkeletalMeshMap;//[Offset: 0x240, Size: 0x50]
	class AnimInstance* AnimInstance;//[Offset: 0x290, Size: 0x8]
	class AnimInstance* AnimInstanceInGame;//[Offset: 0x298, Size: 0x8]
	class AnimInstance* AnimInstanceInLobby;//[Offset: 0x2a0, Size: 0x8]
	enum AnimInstanceUseType;//[Offset: 0x2a8, Size: 0x1]
	FName AttachSocket;//[Offset: 0x2ac, Size: 0x8]
	FName SkeletalMeshAttachSocket;//[Offset: 0x2b4, Size: 0x8]
	bool bCastShadowInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	bool bUseLegacyPrefab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 0x1]
	WearableMorphTarget[] UnderMorphTargets;//[Offset: 0x2c0, Size: 0x10]
	FName[] UnderHiddenTags;//[Offset: 0x2d0, Size: 0x10]
	WearableMaterialSection[] UnderHiddenMaterialSectionTags;//[Offset: 0x2e0, Size: 0x10]
	MeshComponent* MeshComponent;//[Offset: 0x2f0, Size: 0x8]
	BackAttachSocketOffset[] BackAttachingSocketOffsets;//[Offset: 0x2f8, Size: 0x10]
	<enum,Transform> BadgeAttachingSocketOffsets;//[Offset: 0x308, Size: 0x50]
	byte HiddenFlag;//[Offset: 0x358, Size: 0x1]
	byte DisableTickFlag;//[Offset: 0x359, Size: 0x1]

--------------------------------
Class: WearableMeshPrefab
	WearableMorphTarget[] UnderMorphTargets;//[Offset: 0x0, Size: 0x10]
	WearableMorphTarget[] UnderMorphTargetsSharing;//[Offset: 0x10, Size: 0x10]
	FName[] UnderHiddenTags;//[Offset: 0x20, Size: 0x10]
	WearableMaterialSection[] UnderHiddenMaterialSectionTags;//[Offset: 0x30, Size: 0x10]
	BackAttachSocketOffset[] BackAttachingSocketOffsets;//[Offset: 0x40, Size: 0x10]
	<enum,Transform> BadgeAttachingSocketOffsets;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: WearableMorphTarget
	FName MorphTargetName;//[Offset: 0x0, Size: 0x8]
	float MorphTargetValue;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WearableMaterialSection
	FName Tag;//[Offset: 0x0, Size: 0x8]
	int MaterialID;//[Offset: 0x8, Size: 0x4]
	int SectionIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BackAttachSocketOffset
	FString AttachSocketName;//[Offset: 0x0, Size: 0x10]
	Transform AttachSocketOffset;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: InventoryAnimPoseInfo
	bool bHasInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float PositionToStay;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneModifyInfo
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	float BoneScale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SGInventoryMeshComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMeshTemplate;//[Offset: 0xc8, Size: 0x28]
	SkeletalMesh* SkeletalMeshTemplate_InGame;//[Offset: 0xf0, Size: 0x28]
	SkeletalMesh* SkeletalMeshTemplate_InLobby;//[Offset: 0x118, Size: 0x28]
	StaticMesh* StaticMeshTemplate_InGame;//[Offset: 0x140, Size: 0x28]
	StaticMesh* StaticMeshTemplate_InLobby;//[Offset: 0x168, Size: 0x28]
	SkeletalMesh* SimpleMeshTemplate;//[Offset: 0x190, Size: 0x28]
	class AnimInstance* SimpleMeshDefaultAnimInstance;//[Offset: 0x1b8, Size: 0x28]
	StaticMesh* ProjectileMeshTemplate;//[Offset: 0x1e0, Size: 0x28]
	MaterialInterface* InnerScopeBlurMaterial;//[Offset: 0x208, Size: 0x28]
	MaterialInterface* ThermalScopeUnlitMaterial;//[Offset: 0x230, Size: 0x28]
	int ScopeMaterialElementIndex;//[Offset: 0x258, Size: 0x4]
	int ThermalViewOpaqueMaterialElementIndex;//[Offset: 0x25c, Size: 0x4]
	int ThermalScopeUnlitMaterialElementIndex;//[Offset: 0x260, Size: 0x4]
	StaticMesh* StaticMeshTemplate;//[Offset: 0x268, Size: 0x28]
	enum MeshTickPolicy;//[Offset: 0x290, Size: 0x1]
	bool bEnableMeshOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]
	bool bAdsLod0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 0x1]
	Vector PickupTrans;//[Offset: 0x294, Size: 0xc]
	Rotator PickupRot;//[Offset: 0x2a0, Size: 0xc]
	bool bForceUseLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	MaterialInstanceDynamic*[] MaterialInstanceDynamicArray;//[Offset: 0x2b0, Size: 0x10]
	LinearColor PickUpMaterialColor;//[Offset: 0x2c0, Size: 0x10]
	FName FresnelColorName;//[Offset: 0x2d0, Size: 0x8]
	int8 CustomIndex;//[Offset: 0x2d8, Size: 0x1]
	delegate OnAfterRecalcPickupAndHiddenState;//[Offset: 0x2e0, Size: 0x10]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	bool bMeshHiddenInServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1]
	bool bMeshVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f3, Size: 0x1]
	Transform DropTransform;//[Offset: 0x300, Size: 0x30]
	MeshComponent* MeshComponent;//[Offset: 0x330, Size: 0x8]
	SkeletalMeshComponent* ConstructSkeletalMeshComponent;//[Offset: 0x338, Size: 0x8]
	StaticMeshComponent* ConstructStaticMeshComponent;//[Offset: 0x340, Size: 0x8]
	SGPlayerController* PlayerController;//[Offset: 0x348, Size: 0x8]
	bool bWithZoomMatiral;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	float TurnOnZoomMatiralThreshold;//[Offset: 0x354, Size: 0x4]
	bool bTurnOnZoomMaterialSwitchingScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	Vector4 LocalScopeParamAndRadius;//[Offset: 0x360, Size: 0x10]
	FName ThermalViewInstanceEnabledName;//[Offset: 0x370, Size: 0x8]
	FName ThermalScopeOpaqueOverrideName;//[Offset: 0x378, Size: 0x8]
	int64[] OnlyClipScopeMtrlSightList;//[Offset: 0x380, Size: 0x10]
	bool NotClipWithScopeMtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	Actor* CachedParentActor;//[Offset: 0x3b8, Size: 0x8]
	enum CachedAttachPosition;//[Offset: 0x3c0, Size: 0x1]
	Character* CachedOwnerCharacter;//[Offset: 0x3c8, Size: 0x8]
	MaterialInstanceDynamic* BackupScopeMI;//[Offset: 0x3d0, Size: 0x8]
	MaterialInstanceDynamic* InnerScopeBlurMI;//[Offset: 0x3d8, Size: 0x8]
	MaterialInstanceDynamic* BackupThermalScopeMI;//[Offset: 0x3e0, Size: 0x8]
	MaterialInstanceDynamic* ThermalScopeUnlitMI;//[Offset: 0x3e8, Size: 0x8]
	class Object* SavedAnimInstanceClass;//[Offset: 0x3f0, Size: 0x8]
	TimerHandle CheckWeaponFullyLoadTimerHandle;//[Offset: 0x3f8, Size: 0x8]
	byte HiddenFlag;//[Offset: 0x423, Size: 0x1]
	class AnimInstance* SkeletalMeshAnimClass;//[Offset: 0x428, Size: 0x28]
	class AnimInstance* SkeletalMeshAnimClassInLobby;//[Offset: 0x450, Size: 0x28]
	bool bRemarkableAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47b, Size: 0x1]
	bool ShouldUseFresnel();// 0x4735e3fee041
	void SetIsMeshVisible(bool bIsVisible);// 0x4734e3fee041
	void OnToggleThermalHeadwearWhenUsingThermalScope(bool bThermalHeadwearActive);// 0x4733e3fee041
	void OnThermalScopeActivatedOrInactivated(bool bActivated);// 0x4732e3fee041
	void OnSwichFPP(bool bFPP);// 0x4731e3fee041
	void OnSpectatedStateChanged(PlayerController* PC);// 0x4730e3fee041
	void OnRep_MeshHidden();// 0x472fe3fee041
	void OnRep_IsVisible();// 0x472ee3fee041
	void OnRep_IsPickup();// 0x472de3fee041
	void OnParentActorChanged(Actor* NewParent, int NewContainerIndex);// 0x472ce3fee041
	void OnLoadProjectileMeshCompleted();// 0x472be3fee041
	void OnLoadCompleted_StaticMeshTemplate(SoftObjectPath Path);// 0x472ae3fee041
	void OnLoadCompleted_SkeletalMeshTemplate(SoftObjectPath[] Paths);// 0x4729e3fee041
	void OnInventoryRemoved(Character* OwnerCharacter);// 0x4728e3fee041
	void OnInventoryOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x4727e3fee041
	void OnInventoryAssembled(SGInventory* Inventory);// 0x4726e3fee041
	void OnInventoryAdded(Character* OwnerCharacter);// 0x4725e3fee041
	void OnAttachPositionChanged(Character* OwnerCharacter, enum NewAttachPosition);// 0x4724e3fee041
	Vector4 GetLocalScopeParamAndRadius();// 0x4723e3fee041
	void CheckWeaponFullyLoad();// 0x4722e3fee041

--------------------------------
Class: SGInventoryCameraComponent.ActorComponent.Object
	SubCameraInfo[] SubCameraInfoList;//[Offset: 0xc0, Size: 0x10]
	SubCameraInfo[] SubMagnificationInfoList;//[Offset: 0xd0, Size: 0x10]
	int SightPriority;//[Offset: 0xe0, Size: 0x4]
	int CurrentCameraNum_Server;//[Offset: 0xe4, Size: 0x4]
	bool bSkipLimitPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bChangeCrossHairWithMagnChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	bool bChangeCrossHairWithCameraChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]
	int CurrentMagnification_Server;//[Offset: 0x104, Size: 0x4]
	int ScopeLevel;//[Offset: 0x120, Size: 0x4]
	float ZoomingSensitivity;//[Offset: 0x124, Size: 0x4]
	float ShoulderZoomingSensitivity;//[Offset: 0x128, Size: 0x4]
	float BlurRadius;//[Offset: 0x12c, Size: 0x4]
	float BlurThresHold;//[Offset: 0x130, Size: 0x4]
	Vector FiringZoomInVector;//[Offset: 0x134, Size: 0xc]
	float NormalFireSensitivity;//[Offset: 0x140, Size: 0x4]
	float FiringAnimTranslationWeight;//[Offset: 0x144, Size: 0x4]
	float FiringAnimRotationWeight;//[Offset: 0x148, Size: 0x4]
	float ADSGunKickWeight;//[Offset: 0x14c, Size: 0x4]
	FName AimingBase;//[Offset: 0x150, Size: 0x8]
	FName AimingPivotSocket;//[Offset: 0x158, Size: 0x8]
	enum SwitchAnim;//[Offset: 0x160, Size: 0x1]
	enum FoldAnim;//[Offset: 0x161, Size: 0x1]
	bool bIsFold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x162, Size: 0x1]
	SGMontagePlayParams SwitchBackCharMontageParam;//[Offset: 0x168, Size: 0x48]
	SGMontagePlayParams SwitchBackWeapMontageParam;//[Offset: 0x1b0, Size: 0x48]
	float CameraPreparationTime;//[Offset: 0x1f8, Size: 0x4]
	int CrossHairMtrlIndex;//[Offset: 0x1fc, Size: 0x4]
	CrossHairTexInfo[] CrossHairTextures;//[Offset: 0x200, Size: 0x10]
	CrossHairTexInfo[] CrossHairTexturesWithCamera;//[Offset: 0x210, Size: 0x10]
	float ZoomFOV;//[Offset: 0x228, Size: 0x4]
	float HoldingBreathZoomFOV;//[Offset: 0x22c, Size: 0x4]
	float DefaultCameraGunKickWeight;//[Offset: 0x230, Size: 0x4]
	SGThermalImagerParams ThermalImagerParams;//[Offset: 0x234, Size: 0x14]
	bool bIsThermalScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	bool bShouldForceRebaseOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 0x1]
	float SwitchBackSubCameraTime;//[Offset: 0x24c, Size: 0x4]
	GameplayTagContainer SuspendThermalScopeTags;//[Offset: 0x250, Size: 0x20]
	float SuspendThermalScopeTimeInProneTransition;//[Offset: 0x270, Size: 0x4]
	void ServerSetCurrentMagnification(int Magnification);// 0x467ee3fee041
	void ServerSetCurrentCameraNum(int CameraNum);// 0x467de3fee041
	void ResetToDefaultCamera();// 0x467ce3fee041
	void OnZoomCompleteUsingThisSight();// 0x467be3fee041
	void OnUnzoomFromUsingThisSight();// 0x467ae3fee041
	void OnThermalScopeOwnerProneTransitionEnd();// 0x4679e3fee041
	void OnThermalScopeOwnerPoseChanged(enum NewPoseType);// 0x4678e3fee041
	void OnThermalScopeOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x4677e3fee041
	void OnThermalScopeConceredGameplayTagChanged(GameplayTag Tag, int Count);// 0x4676e3fee041
	void OnRep_CurrentMagnification();// 0x4675e3fee041
	void OnRep_CurrentCameraNum();// 0x4674e3fee041
	void OnInventoryAssembledEvent(SGInventory* ParentInventory);// 0x4673e3fee041
	void OnEndPredictingMagnification();// 0x4672e3fee041
	void OnEndPredictingCameraNum();// 0x4671e3fee041
	void MoveToNextMagnification();// 0x4670e3fee041
	void MoveToNextCamera();// 0x466fe3fee041
	bool IsThermalScope();// 0x466ee3fee041
	bool IsSuspendedThermalScope();// 0x466de3fee041
	bool IsCameraPrepared();// 0x466ce3fee041
	SGThermalImagerParams GetThermalImagerParams();// 0x466be3fee041
	enum GetSwitchAnim();// 0x466ae3fee041
	int GetSubMagnificationCount();// 0x4669e3fee041
	int GetSubCameraCount();// 0x4668e3fee041
	int GetCurrentMagnification();// 0x4667e3fee041
	int GetCurrentCameraNum();// 0x4666e3fee041

--------------------------------
Class: SubCameraInfo
	int ScopeLevel;//[Offset: 0x0, Size: 0x4]
	float ZoomingSensitivity;//[Offset: 0x4, Size: 0x4]
	float ShoulderZoomingSensitivity;//[Offset: 0x8, Size: 0x4]
	float NormalFireSensitivity;//[Offset: 0xc, Size: 0x4]
	float ZoomFOV;//[Offset: 0x10, Size: 0x4]
	float HoldingBreathZoomFOV;//[Offset: 0x14, Size: 0x4]
	Vector FiringZoomInVector;//[Offset: 0x18, Size: 0xc]
	float BlurRadius;//[Offset: 0x24, Size: 0x4]
	float BlurThresHold;//[Offset: 0x28, Size: 0x4]
	float FiringAnimTranslationWeight;//[Offset: 0x2c, Size: 0x4]
	float FiringAnimRotationWeight;//[Offset: 0x30, Size: 0x4]
	FName AimingBase;//[Offset: 0x34, Size: 0x8]
	FName AimingPivotSocket;//[Offset: 0x3c, Size: 0x8]
	enum SwitchAnim;//[Offset: 0x44, Size: 0x1]
	float CameraGunkickWeight;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: SGMontagePlayParams
	AnimMontage* MontagePath;//[Offset: 0x0, Size: 0x28]
	AnimMontage* Montage;//[Offset: 0x28, Size: 0x8]
	AnimMontage* MontageHardPtr;//[Offset: 0x30, Size: 0x8]
	FName SectionName;//[Offset: 0x38, Size: 0x8]
	float PlayRate;//[Offset: 0x40, Size: 0x4]
	float StartTime;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: CrossHairTexInfo
	Texture2D* Tex;//[Offset: 0x0, Size: 0x8]
	float Scale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SGThermalImagerParams
	enum Type;//[Offset: 0x0, Size: 0x1]
	float ThermalModeParameter;//[Offset: 0x4, Size: 0x4]
	float BloomIntensity;//[Offset: 0x8, Size: 0x4]
	float BloomThreshold;//[Offset: 0xc, Size: 0x4]
	float ChromaticAberrationIntensity;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SGInventoryModifyAttributeComponent.ActorComponent.Object
	bool bEnableErgonomicsModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	int ErgonomicsValue;//[Offset: 0xc4, Size: 0x4]
	bool bEnableRecoilModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	float VerticalRecoilValue_Multiplier;//[Offset: 0xcc, Size: 0x4]
	float HorizentalRecoilValue_Multiplier;//[Offset: 0xd0, Size: 0x4]
	bool bEnableSpreadModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	float AccuracyValue_Multiplier;//[Offset: 0xd8, Size: 0x4]
	float MoaScaleX_Multiplier;//[Offset: 0xdc, Size: 0x4]
	float MoaScaleY_Multiplier;//[Offset: 0xe0, Size: 0x4]
	bool bEnableFireInitSpeedModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	float FireInitSpeedScale;//[Offset: 0xe8, Size: 0x4]
	float BulletZeroDropDistance;//[Offset: 0xec, Size: 0x4]
	float AdapterAdjustDamage;//[Offset: 0xf0, Size: 0x4]
	bool bEnableChangeClipSpeedModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	bool bEnableSwitchToADSTimeModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 0x1]
	float SwitchToADSTimeScale;//[Offset: 0xf8, Size: 0x4]
	bool WeaponEquipTimeTimeModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	float WeaponEquipTimeScale;//[Offset: 0x100, Size: 0x4]
	bool bEnableShoulderZoomSpreadShrinkModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	float ShoulderZoomSpreadShrinkSpeedScale;//[Offset: 0x108, Size: 0x4]
	bool bEnableHoldBreathEnergyCostModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	float HoldBreathEnergyCostScale;//[Offset: 0x110, Size: 0x4]
	EffectParticleInfo FPMergeFireHDRTemplate;//[Offset: 0x118, Size: 0x50]
	EffectParticleInfo FPMergeFireLDRTemplate;//[Offset: 0x168, Size: 0x50]
	EffectParticleInfo TPMergeFireHDRTemplate;//[Offset: 0x1b8, Size: 0x50]
	EffectParticleInfo TPMergeFireLDRTemplate;//[Offset: 0x208, Size: 0x50]
	bool bEnableFlameModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	EffectParticleInfo Flame1PTemplate;//[Offset: 0x260, Size: 0x50]
	EffectParticleInfo Flame3PTemplate;//[Offset: 0x2b0, Size: 0x50]
	bool bEnableFogModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	EffectParticleInfo FogTemplate;//[Offset: 0x308, Size: 0x50]
	bool bEnableFireLightModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	EffectParticleInfo FireLightTemplate;//[Offset: 0x360, Size: 0x50]
	float IntensityOfFireLight;//[Offset: 0x3b0, Size: 0x4]
	float FireLightSize;//[Offset: 0x3b4, Size: 0x4]
	EffectParticleInfo FireLightTemplate_LDR;//[Offset: 0x3b8, Size: 0x50]
	Vector IntensityColorOfFireLight_LDR;//[Offset: 0x408, Size: 0xc]
	Vector FireLightSize_LDR;//[Offset: 0x414, Size: 0xc]
	EffectParticleInfo FireLightTemplate3P;//[Offset: 0x420, Size: 0x50]
	float IntensityOfFireLight3P;//[Offset: 0x470, Size: 0x4]
	float FireLightSize3P;//[Offset: 0x474, Size: 0x4]
	EffectParticleInfo FireLightTemplate3P_LDR;//[Offset: 0x478, Size: 0x50]
	Vector IntensityColorOfFireLight3P_LDR;//[Offset: 0x4c8, Size: 0xc]
	Vector FireLightSize3P_LDR;//[Offset: 0x4d4, Size: 0xc]
	EffectParticleInfo CompositeFireTemplate;//[Offset: 0x4e0, Size: 0x50]
	Vector CompositeFireLightSize;//[Offset: 0x530, Size: 0xc]
	Vector CompositeFireLightColor;//[Offset: 0x53c, Size: 0xc]
	EffectParticleInfo CompositeFireTemplate3P;//[Offset: 0x548, Size: 0x50]
	Vector CompositeFireLightSize3P;//[Offset: 0x598, Size: 0xc]
	Vector CompositeFireLightColor3P;//[Offset: 0x5a4, Size: 0xc]
	bool bEnableSoundModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1]
	float SuppressorRTPCValue;//[Offset: 0x5b4, Size: 0x4]
	bool bOnlyModifyWhenSwitchOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	int RaceStrategy;//[Offset: 0x5bc, Size: 0x4]
	float ReloadSpeedRatio_Multiplier;//[Offset: 0x5c4, Size: 0x4]
	float ADSMoveSpeedRatio_Multiplier;//[Offset: 0x5c8, Size: 0x4]
	float MoveSpeedRatio_Multiplier;//[Offset: 0x5cc, Size: 0x4]
	float MoveSpeedRatio_Walk_Multiplier;//[Offset: 0x5d0, Size: 0x4]
	float MoveSpeedRatio_Sprint_Multiplier;//[Offset: 0x5d4, Size: 0x4]
	float MoveSpeedRatio_SlientWalk_Multiplier;//[Offset: 0x5d8, Size: 0x4]
	float SprintToIdleConefficient;//[Offset: 0x5dc, Size: 0x4]
	float LeanRatio_Multiplier;//[Offset: 0x5e0, Size: 0x4]
	float AccuracyPunishRatio_Multiplier;//[Offset: 0x5e4, Size: 0x4]
	float CheckMagSpeedRatio_Multiplier;//[Offset: 0x5e8, Size: 0x4]
	SGInventory* CachedWeapon;//[Offset: 0x6c0, Size: 0x8]
	void OnTacticalInvSwitchStateChanged(out GameplayTag GameplayTag, bool bSwitchStateOn);// 0x4739e3fee041
	void OnStockFoldStateChanged(SGInventory* Weapon, bool bFoldStock);// 0x4738e3fee041
	void OnParticleTemplateLoadCompleted(enum EffectType);// 0x4737e3fee041
	void OnMergedFireTemplateLoadCompleted(enum EffectType);// 0x4736e3fee041

--------------------------------
Class: SGInventoryZoomComponent.ActorComponent.Object
	bool bZoomParamsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	float WeaponZoomTime;//[Offset: 0xc4, Size: 0x4]
	float WeaponUnZoomTime;//[Offset: 0xc8, Size: 0x4]
	float WeaponZoomFOVBlendTime;//[Offset: 0xcc, Size: 0x4]
	float WeaponUnZoomFOVBlendTime;//[Offset: 0xd0, Size: 0x4]
	float WeaponZoomFOVBlendDelay;//[Offset: 0xd4, Size: 0x4]
	float WeaponUnZoomFOVBlendDelay;//[Offset: 0xd8, Size: 0x4]
	CurveFloat* ErgADSTimeScaleCurve;//[Offset: 0xe0, Size: 0x8]

--------------------------------
Class: SGInventoryTypeComponent_Avatar.SGInventoryTypeComponent.ActorComponent.Object
	enum avatarType;//[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: SGInventoryTypeComponent.ActorComponent.Object
	enum InventoryType;//[Offset: 0xc0, Size: 0x1]
	byte[] RejectAttachPositions;//[Offset: 0xc8, Size: 0x10]
	byte AssignableAttachPosition;//[Offset: 0xe8, Size: 0x1]
	int sortIndex;//[Offset: 0xec, Size: 0x4]

--------------------------------
Class: SGInventorySoundDiffuseComponent.ActorComponent.Object

--------------------------------
Class: SGInventoryHearingAidComponent.ActorComponent.Object
	<enum> IgnoreSoundIndicatorType;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: SGInventoryAbilityComponent.ActorComponent.Object
	class GameplayAbility* AbilityClass;//[Offset: 0xc0, Size: 0x8]
	enum ActiveAttachPosition;//[Offset: 0xc8, Size: 0x1]
	bool bPassive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	bool bCancelAbilityWhileMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]
	float CancelAbilityMovingThreshold;//[Offset: 0xcc, Size: 0x4]
	enum SetupGEDataTableType;//[Offset: 0xd0, Size: 0x1]
	Actor* TargetUser;//[Offset: 0xd8, Size: 0x8]
	CurveFloat* AuxiliaryCurve1;//[Offset: 0xf0, Size: 0x8]
	CurveFloat* AuxiliaryCurve2;//[Offset: 0xf8, Size: 0x8]
	SGGADataReference SGGADataRef;//[Offset: 0x100, Size: 0x10]
	SGGEDataReference SetupGEDataReference;//[Offset: 0x110, Size: 0x10]
	ActiveGameplayEffectHandle SetupHandle;//[Offset: 0x120, Size: 0x8]
	bool bPreloadGARequiredAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	void StopAllCharacterMontage();// 0x463ee3fee041
	void OnInventoryRemoved(Character* OwnerCharacter);// 0x463de3fee041
	void OnInventoryAttachPositionChanged(Character* OwnerCharacter, enum NewAttachPosition);// 0x463ce3fee041
	void OnInventoryAdded(Character* OwnerCharacter);// 0x463be3fee041
	void OnAbilityEnded(out const AbilityEndedData Data);// 0x463ae3fee041
	void EndAbility();// 0x4639e3fee041
	void ActivateBy(Actor* User);// 0x4638e3fee041

--------------------------------
Class: GameplayAbility.Object
	GameplayTagContainer AbilityTags;//[Offset: 0xa8, Size: 0x20]
	bool bReplicateInputDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool RemoteInstanceEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	byte ReplicationPolicy;//[Offset: 0xce, Size: 0x1]
	byte InstancingPolicy;//[Offset: 0xcf, Size: 0x1]
	bool bServerRespectsRemoteAbilityCancellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bRetriggerInstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	GameplayAbilityActivationInfo CurrentActivationInfo;//[Offset: 0xd8, Size: 0x18]
	GameplayEventData CurrentEventData;//[Offset: 0xf0, Size: 0xb0]
	byte NetExecutionPolicy;//[Offset: 0x1a0, Size: 0x1]
	bool bFlushServerMovesPreActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 0x1]
	byte NetSecurityPolicy;//[Offset: 0x1a2, Size: 0x1]
	byte NetSecurityAdvancedPolicy;//[Offset: 0x1a3, Size: 0x1]
	class GameplayEffect* CostGameplayEffectClass;//[Offset: 0x1a8, Size: 0x8]
	AbilityTriggerData[] AbilityTriggers;//[Offset: 0x1b0, Size: 0x10]
	class GameplayEffect* CooldownGameplayEffectClass;//[Offset: 0x1c0, Size: 0x8]
	GameplayTagContainer CancelAbilitiesWithTag;//[Offset: 0x1c8, Size: 0x20]
	GameplayTagContainer BlockAbilitiesWithTag;//[Offset: 0x1e8, Size: 0x20]
	GameplayTagContainer ActivationOwnedTags;//[Offset: 0x208, Size: 0x20]
	GameplayTagContainer ActivationRequiredTags;//[Offset: 0x228, Size: 0x20]
	GameplayTagContainer ActivationBlockedTags;//[Offset: 0x248, Size: 0x20]
	GameplayTagContainer SourceRequiredTags;//[Offset: 0x268, Size: 0x20]
	GameplayTagContainer SourceBlockedTags;//[Offset: 0x288, Size: 0x20]
	GameplayTagContainer TargetRequiredTags;//[Offset: 0x2a8, Size: 0x20]
	GameplayTagContainer TargetBlockedTags;//[Offset: 0x2c8, Size: 0x20]
	GameplayTask*[] ActiveTasks;//[Offset: 0x308, Size: 0x10]
	AnimMontage* CurrentMontage;//[Offset: 0x328, Size: 0x8]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 0x1]
	bool bIsBlockingOtherAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 0x1]
	bool bMarkPendingKillOnAbilityEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	void SetShouldBlockOtherAbilities(bool bShouldBlockAbilities);// 0x34dde3fee041
	void SetCanBeCanceled(bool bCanBeCanceled);// 0x34dce3fee041
	void SendGameplayEvent(GameplayTag EventTag, GameplayEventData Payload);// 0x34dbe3fee041
	void RemoveGrantedByEffect();// 0x34dae3fee041
	void MontageStop(float OverrideBlendOutTime);// 0x34d9e3fee041
	void MontageSetNextSectionName(FName FromSectionName, FName ToSectionName);// 0x34d8e3fee041
	void MontageJumpToSection(FName SectionName);// 0x34d7e3fee041
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(FName SocketName);// 0x34d6e3fee041
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerActor();// 0x34d5e3fee041
	GameplayEffectSpecHandle MakeOutgoingGameplayEffectSpec(class GameplayEffect GameplayEffectClass, float Level);// 0x34d4e3fee041
	bool K2_ShouldAbilityRespondToEvent(GameplayAbilityActorInfo ActorInfo, GameplayEventData Payload);// 0x34d3e3fee041
	void K2_RemoveGameplayCue(GameplayTag GameplayCueTag);// 0x34d2e3fee041
	void K2_OnEndAbility(bool bWasCancelled);// 0x34d1e3fee041
	bool K2_HasAuthority();// 0x34d0e3fee041
	void K2_ExecuteGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x34cfe3fee041
	void K2_ExecuteGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context);// 0x34cee3fee041
	void K2_EndAbility();// 0x34cde3fee041
	void K2_CommitExecute();// 0x34cce3fee041
	bool K2_CommitAbilityCost(bool BroadcastCommitEvent);// 0x34cbe3fee041
	bool K2_CommitAbilityCooldown(bool BroadcastCommitEvent, bool ForceCooldown);// 0x34cae3fee041
	bool K2_CommitAbility();// 0x34c9e3fee041
	bool K2_CheckAbilityCost();// 0x34c8e3fee041
	bool K2_CheckAbilityCooldown();// 0x34c7e3fee041
	void K2_CancelAbility();// 0x34c6e3fee041
	bool K2_CanActivateAbility(GameplayAbilityActorInfo ActorInfo, out GameplayTagContainer RelevantTags);// 0x34c5e3fee041
	ActiveGameplayEffectHandle[] K2_ApplyGameplayEffectSpecToTarget(const GameplayEffectSpecHandle EffectSpecHandle, GameplayAbilityTargetDataHandle TargetData);// 0x34c4e3fee041
	ActiveGameplayEffectHandle K2_ApplyGameplayEffectSpecToOwner(const GameplayEffectSpecHandle EffectSpecHandle);// 0x34c3e3fee041
	void K2_AddGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter, bool bRemoveOnAbilityEnd);// 0x34c2e3fee041
	void K2_AddGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context, bool bRemoveOnAbilityEnd);// 0x34c1e3fee041
	void K2_ActivateAbilityFromEvent(out const GameplayEventData EventData);// 0x34c0e3fee041
	void K2_ActivateAbility();// 0x34bfe3fee041
	bool IsLocallyControlled();// 0x34bee3fee041
	void InvalidateClientPredictionKey();// 0x34bde3fee041
	SkeletalMeshComponent* GetOwningComponentFromActorInfo();// 0x34bce3fee041
	Actor* GetOwningActorFromActorInfo();// 0x34bbe3fee041
	GameplayEffectContextHandle GetGrantedByEffectContext();// 0x34bae3fee041
	Object* GetCurrentSourceObject();// 0x34b9e3fee041
	AnimMontage* GetCurrentMontage();// 0x34b8e3fee041
	float GetCooldownTimeRemaining();// 0x34b7e3fee041
	GameplayEffectContextHandle GetContextFromOwner(GameplayAbilityTargetDataHandle OptionalTargetData);// 0x34b6e3fee041
	Actor* GetAvatarActorFromActorInfo();// 0x34b5e3fee041
	GameplayAbilityActorInfo GetActorInfo();// 0x34b4e3fee041
	AbilitySystemComponent* GetAbilitySystemComponentFromActorInfo();// 0x34b3e3fee041
	int GetAbilityLevel();// 0x34b2e3fee041
	void EndTaskByInstanceName(FName InstanceName);// 0x34b1e3fee041
	void EndAbilityState(FName OptionalStateNameToEnd);// 0x34b0e3fee041
	void ConfirmTaskByInstanceName(FName InstanceName, bool bEndTask);// 0x34afe3fee041
	void CancelTaskByInstanceName(FName InstanceName);// 0x34aee3fee041
	void BP_RemoveGameplayEffectFromOwnerWithHandle(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x34ade3fee041
	void BP_RemoveGameplayEffectFromOwnerWithGrantedTags(GameplayTagContainer WithGrantedTags, int StacksToRemove);// 0x34ace3fee041
	void BP_RemoveGameplayEffectFromOwnerWithAssetTags(GameplayTagContainer WithAssetTags, int StacksToRemove);// 0x34abe3fee041
	ActiveGameplayEffectHandle[] BP_ApplyGameplayEffectToTarget(GameplayAbilityTargetDataHandle TargetData, class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x34aae3fee041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToOwner(class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x34a9e3fee041

--------------------------------
Class: GameplayEventData
	GameplayTag EventTag;//[Offset: 0x0, Size: 0x8]
	Actor* Instigator;//[Offset: 0x8, Size: 0x8]
	Actor* Target;//[Offset: 0x10, Size: 0x8]
	Object* OptionalObject;//[Offset: 0x18, Size: 0x8]
	Object* OptionalObject2;//[Offset: 0x20, Size: 0x8]
	GameplayEffectContextHandle ContextHandle;//[Offset: 0x28, Size: 0x18]
	GameplayTagContainer InstigatorTags;//[Offset: 0x40, Size: 0x20]
	GameplayTagContainer TargetTags;//[Offset: 0x60, Size: 0x20]
	float EventMagnitude;//[Offset: 0x80, Size: 0x4]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x88, Size: 0x28]

--------------------------------
Class: GameplayEffectContextHandle

--------------------------------
Class: GameplayAbilityTargetDataHandle

--------------------------------
Class: GameplayAbilityActivationInfo
	byte ActivationMode;//[Offset: 0x0, Size: 0x1]
	bool bCanBeEndedByOtherInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	PredictionKey PredictionKeyWhenActivated;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: PredictionKey
	PackageMap* PredictiveConnection;//[Offset: 0x0, Size: 0x8]
	int16 Current;//[Offset: 0x8, Size: 0x2]
	int16 Base;//[Offset: 0xa, Size: 0x2]
	bool bIsStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: GameplayAbilityTargetingLocationInfo
	byte LocationType;//[Offset: 0x8, Size: 0x1]
	Transform LiteralTransform;//[Offset: 0x10, Size: 0x30]
	Actor* SourceActor;//[Offset: 0x40, Size: 0x8]
	MeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8]
	GameplayAbility* SourceAbility;//[Offset: 0x50, Size: 0x8]
	FName SourceSocketName;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: GameplayEffect.Object
	enum DurationPolicy;//[Offset: 0x30, Size: 0x1]
	GameplayEffectModifierMagnitude DurationMagnitude;//[Offset: 0x38, Size: 0x1a8]
	ScalableFloat Period;//[Offset: 0x1e0, Size: 0x20]
	bool bExecutePeriodicEffectOnApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	bool bProcessExecutionNoPeriod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1]
	enum PeriodicInhibitionPolicy;//[Offset: 0x202, Size: 0x1]
	GameplayModifierInfo[] Modifiers;//[Offset: 0x208, Size: 0x10]
	GameplayEffectExecutionDefinition[] Executions;//[Offset: 0x218, Size: 0x10]
	ScalableFloat ChanceToApplyToTarget;//[Offset: 0x228, Size: 0x20]
	class GameplayEffectCustomApplicationRequirement[] ApplicationRequirements;//[Offset: 0x248, Size: 0x10]
	class GameplayEffect[] TargetEffectClasses;//[Offset: 0x258, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x268, Size: 0x10]
	class GameplayEffect[] OverflowEffects;//[Offset: 0x278, Size: 0x10]
	bool bDenyOverflowApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bClearStackOnOverflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	class GameplayEffect[] PrematureExpirationEffectClasses;//[Offset: 0x290, Size: 0x10]
	class GameplayEffect[] RoutineExpirationEffectClasses;//[Offset: 0x2a0, Size: 0x10]
	bool bRequireModifierSuccessToTriggerCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool bSuppressStackingCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	GameplayEffectCue[] GameplayCues;//[Offset: 0x2b8, Size: 0x10]
	GameplayEffectUIData* UIData;//[Offset: 0x2c8, Size: 0x8]
	bool bEnableAddGrantedTagsToMinimalTagMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	InheritedTagContainer InheritableGameplayEffectTags;//[Offset: 0x2d8, Size: 0x60]
	InheritedTagContainer InheritableOwnedTagsContainer;//[Offset: 0x338, Size: 0x60]
	GameplayTagRequirements OngoingTagRequirements;//[Offset: 0x398, Size: 0x40]
	GameplayTagRequirements ApplicationTagRequirements;//[Offset: 0x3d8, Size: 0x40]
	GameplayTagRequirements RemovalTagRequirements;//[Offset: 0x418, Size: 0x40]
	InheritedTagContainer RemoveGameplayEffectsWithTags;//[Offset: 0x458, Size: 0x60]
	GameplayTagRequirements GrantedApplicationImmunityTags;//[Offset: 0x4b8, Size: 0x40]
	GameplayEffectQuery GrantedApplicationImmunityQuery;//[Offset: 0x4f8, Size: 0x150]
	GameplayEffectQuery RemoveGameplayEffectQuery;//[Offset: 0x650, Size: 0x150]
	enum StackingType;//[Offset: 0x7a1, Size: 0x1]
	int StackLimitCount;//[Offset: 0x7a4, Size: 0x4]
	enum StackDurationRefreshPolicy;//[Offset: 0x7a8, Size: 0x1]
	enum StackPeriodResetPolicy;//[Offset: 0x7a9, Size: 0x1]
	enum StackExpirationPolicy;//[Offset: 0x7aa, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilities;//[Offset: 0x7b0, Size: 0x10]

--------------------------------
Class: GameplayEffectModifierMagnitude
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 0x1]
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x8, Size: 0x20]
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x28, Size: 0xf8]
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0x120, Size: 0x78]
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0x198, Size: 0x10]

--------------------------------
Class: ScalableFloat
	float Value;//[Offset: 0x0, Size: 0x4]
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CurveTableRowHandle
	CurveTable* CurveTable;//[Offset: 0x0, Size: 0x8]
	FName RowName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AttributeBasedFloat
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x20, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x40, Size: 0x20]
	GameplayEffectAttributeCaptureDefinition BackingAttribute;//[Offset: 0x60, Size: 0x40]
	CurveTableRowHandle AttributeCurve;//[Offset: 0xa0, Size: 0x10]
	enum AttributeCalculationType;//[Offset: 0xb0, Size: 0x1]
	enum FinalChannel;//[Offset: 0xb1, Size: 0x1]
	GameplayTagContainer SourceTagFilter;//[Offset: 0xb8, Size: 0x20]
	GameplayTagContainer TargetTagFilter;//[Offset: 0xd8, Size: 0x20]

--------------------------------
Class: GameplayEffectAttributeCaptureDefinition
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 0x38]
	enum AttributeSource;//[Offset: 0x38, Size: 0x1]
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: GameplayAttribute
	FString AttributeName;//[Offset: 0x0, Size: 0x10]
	FieldPathProperty Attribute;//[Size: 0x20]
	Struct* AttributeOwner;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: CustomCalculationBasedFloat
	class GameplayModMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 0x8]
	ScalableFloat Coefficient;//[Offset: 0x8, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x28, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x48, Size: 0x20]
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float CalculateBaseMagnitude(out const GameplayEffectSpec Spec);// 0x34f1e3fee041

--------------------------------
Class: GameplayEffectCalculation.Object
	GameplayEffectAttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GameplayEffectSpec
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectAttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x18, Size: 0x28]
	float Duration;//[Offset: 0x50, Size: 0x4]
	float Period;//[Offset: 0x54, Size: 0x4]
	float ChanceToApplyToTarget;//[Offset: 0x58, Size: 0x4]
	TagContainerAggregator CapturedSourceTags;//[Offset: 0x60, Size: 0x88]
	TagContainerAggregator CapturedTargetTags;//[Offset: 0xe8, Size: 0x88]
	GameplayTagContainer DynamicGrantedTags;//[Offset: 0x170, Size: 0x20]
	GameplayTagContainer DynamicAssetTags;//[Offset: 0x190, Size: 0x20]
	ModifierSpec[] Modifiers;//[Offset: 0x1b0, Size: 0x10]
	int StackCount;//[Offset: 0x1c0, Size: 0x4]
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bDurationLocked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilitySpecs;//[Offset: 0x1c8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x278, Size: 0x18]
	float Level;//[Offset: 0x290, Size: 0x4]

--------------------------------
Class: GameplayEffectModifiedAttribute
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	float TotalMagnitude;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameplayEffectAttributeCaptureSpecContainer
	GameplayEffectAttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 0x10]
	GameplayEffectAttributeCaptureSpec[] TargetAttributes;//[Offset: 0x10, Size: 0x10]
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: GameplayEffectAttributeCaptureSpec
	GameplayEffectAttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: TagContainerAggregator
	GameplayTagContainer CapturedActorTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer CapturedSpecTags;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer ScopedTags;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: ModifierSpec
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 0x4]
	byte Priority;//[Offset: 0x4, Size: 0x1]
	byte ModsSelector;//[Offset: 0x5, Size: 0x1]

--------------------------------
Class: GameplayAbilitySpecDef
	class GameplayAbility* Ability;//[Offset: 0x0, Size: 0x8]
	ScalableFloat LevelScalableFloat;//[Offset: 0x8, Size: 0x20]
	int InputID;//[Offset: 0x28, Size: 0x4]
	enum RemovalPolicy;//[Offset: 0x2c, Size: 0x1]
	Object* SourceObject;//[Offset: 0x30, Size: 0x8]
	GameplayAbilitySpecHandle AssignedHandle;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: GameplayAbilitySpecHandle
	int Handle;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SetByCallerFloat
	FName DataName;//[Offset: 0x0, Size: 0x8]
	GameplayTag DataTag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameplayModifierInfo
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	byte ModifiersSelector;//[Offset: 0x39, Size: 0x1]
	byte Priority;//[Offset: 0x3a, Size: 0x1]
	ScalableFloat Magnitude;//[Offset: 0x40, Size: 0x20]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x60, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x208, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x210, Size: 0x40]
	GameplayTagRequirements TargetTags;//[Offset: 0x250, Size: 0x40]

--------------------------------
Class: GameplayModEvaluationChannelSettings
	enum Channel;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: GameplayTagRequirements
	GameplayTagContainer RequireTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer IgnoreTags;//[Offset: 0x20, Size: 0x20]

--------------------------------
Class: GameplayEffectExecutionDefinition
	class GameplayEffectExecutionCalculation* CalculationClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer PassedInTags;//[Offset: 0x8, Size: 0x20]
	GameplayEffectExecutionScopedModifierInfo[] CalculationModifiers;//[Offset: 0x28, Size: 0x10]
	class GameplayEffect[] ConditionalGameplayEffectClasses;//[Offset: 0x38, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object
	bool bRequiresPassedInTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	void Execute(out const GameplayEffectCustomExecutionParameters ExecutionParams, out GameplayEffectCustomExecutionOutput OutExecutionOutput);// 0x34f0e3fee041

--------------------------------
Class: GameplayEffectCustomExecutionParameters

--------------------------------
Class: GameplayEffectCustomExecutionOutput
	GameplayModifierEvaluatedData[] OutputModifiers;//[Offset: 0x0, Size: 0x10]
	bool bTriggerConditionalGameplayEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bHandledStackCountManually;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bHandledGameplayCuesManually;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: GameplayModifierEvaluatedData
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	float Magnitude;//[Offset: 0x3c, Size: 0x4]
	byte Priority;//[Offset: 0x40, Size: 0x1]
	byte ModsSelector;//[Offset: 0x41, Size: 0x1]
	enum ModsChannel;//[Offset: 0x42, Size: 0x1]
	ActiveGameplayEffectHandle Handle;//[Offset: 0x44, Size: 0x8]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: ActiveGameplayEffectHandle
	int Handle;//[Offset: 0x0, Size: 0x4]
	bool bPassedFiltersAndWasExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: GameplayEffectExecutionScopedModifierInfo
	GameplayEffectAttributeCaptureDefinition CapturedAttribute;//[Offset: 0x0, Size: 0x40]
	GameplayTag TransientAggregatorIdentifier;//[Offset: 0x40, Size: 0x8]
	enum AggregatorType;//[Offset: 0x48, Size: 0x1]
	byte ModifierOp;//[Offset: 0x49, Size: 0x1]
	byte ModifiersSelector;//[Offset: 0x4a, Size: 0x1]
	byte Priority;//[Offset: 0x4b, Size: 0x1]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x50, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x1f8, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x200, Size: 0x40]
	GameplayTagRequirements TargetTags;//[Offset: 0x240, Size: 0x40]

--------------------------------
Class: ConditionalGameplayEffect
	class GameplayEffect* EffectClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer RequiredSourceTags;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: GameplayEffectCustomApplicationRequirement.Object
	bool CanApplyGameplayEffect(const GameplayEffect* GameplayEffect, out const GameplayEffectSpec Spec, AbilitySystemComponent* ASC);// 0x43bce3fee041

--------------------------------
Class: AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	AttributeDefaults[] DefaultStartingData;//[Offset: 0x138, Size: 0x10]
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x148, Size: 0x10]
	FName AffectedAnimInstanceTag;//[Offset: 0x158, Size: 0x8]
	float OutgoingDuration;//[Offset: 0x2f8, Size: 0x4]
	float IncomingDuration;//[Offset: 0x2fc, Size: 0x4]
	FString[] ClientDebugStrings;//[Offset: 0x320, Size: 0x10]
	FString[] ServerDebugStrings;//[Offset: 0x330, Size: 0x10]
	bool UserAbilityActivationInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	bool ReplicationProxyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 0x1]
	bool bSuppressGrantAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 0x1]
	bool bSuppressGameplayCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 0x1]
	GameplayAbilityTargetActor*[] SpawnedTargetActors;//[Offset: 0x3a0, Size: 0x10]
	Actor* OwnerActor;//[Offset: 0x3d8, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x3e0, Size: 0x8]
	GameplayAbilitySpecContainer ActivatableAbilities;//[Offset: 0x3f8, Size: 0x120]
	GameplayAbility*[] AllReplicatedInstancedAbilities;//[Offset: 0x548, Size: 0x10]
	GameplayAbilityRepAnimMontage RepAnimMontageInfo;//[Offset: 0x768, Size: 0x58]
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 0x1]
	bool bPendingMontageRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c1, Size: 0x1]
	GameplayAbilityLocalAnimMontage LocalAnimMontageInfo;//[Offset: 0x7c8, Size: 0x28]
	ActiveGameplayEffectsContainer ActiveGameplayEffects;//[Offset: 0x890, Size: 0x4c8]
	ActiveGameplayCueContainer ActiveGameplayCues;//[Offset: 0xd58, Size: 0x128]
	ActiveGameplayCueContainer MinimalReplicationGameplayCues;//[Offset: 0xe80, Size: 0x128]
	byte[] BlockedAbilityBindings;//[Offset: 0x1120, Size: 0x10]
	MinimalReplicationTagCountMap MinimalReplicationTags;//[Offset: 0x12a8, Size: 0x60]
	ReplicatedPredictionKeyMap ReplicatedPredictionKeyMap;//[Offset: 0x1320, Size: 0x118]
	bool TryActivateAbilityByClass(class GameplayAbility InAbilityToActivate, bool bAllowRemoteActivation);// 0x160ce3fee041
	bool TryActivateAbilitiesByTag(out const GameplayTagContainer GameplayTagContainer, bool bAllowRemoteActivation);// 0x160be3fee041
	void TargetConfirm();// 0x160ae3fee041
	void TargetCancel();// 0x1609e3fee041
	void SetUserAbilityActivationInhibited(bool NewInhibit);// 0x1608e3fee041
	void SetActiveGameplayEffectLevelUsingQuery(GameplayEffectQuery Query, int NewLevel);// 0x1607e3fee041
	void SetActiveGameplayEffectLevel(ActiveGameplayEffectHandle ActiveHandle, int NewLevel);// 0x1606e3fee041
	void ServerTryActivateAbilityWithEventData(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x1605e3fee041
	void ServerTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey);// 0x1604e3fee041
	void ServerSetReplicatedTargetDataCancelled(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x1603e3fee041
	void ServerSetReplicatedTargetData(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const GameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, GameplayTag ApplicationTag, PredictionKey CurrentPredictionKey);// 0x1602e3fee041
	void ServerSetReplicatedEventWithPayload(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey, Vector_NetQuantize100 VectorPayload);// 0x1600e3fee041
	void ServerSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x15ffe3fee041
	void ServerSetInputReleased(GameplayAbilitySpecHandle AbilityHandle);// 0x15fee3fee041
	void ServerSetInputPressed(GameplayAbilitySpecHandle AbilityHandle);// 0x15fde3fee041
	void ServerPrintDebug_RequestWithStrings(const FString[] Strings);// 0x15fce3fee041
	void ServerPrintDebug_Request();// 0x15fbe3fee041
	void ServerEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo, PredictionKey PredictionKey);// 0x15fae3fee041
	void ServerCurrentMontageSetPlayRate(AnimMontage* ClientAnimMontage, float InPlayRate);// 0x15f9e3fee041
	void ServerCurrentMontageSetNextSectionName(AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x15f8e3fee041
	void ServerCurrentMontageJumpToSectionName(AnimMontage* ClientAnimMontage, FName SectionName);// 0x15f7e3fee041
	void ServerCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x15f6e3fee041
	void ServerAbilityRPCBatch(ServerAbilityRPCBatch BatchInfo);// 0x15f4e3fee041
	void RemoveActiveGameplayEffectBySourceEffect(class GameplayEffect GameplayEffect, AbilitySystemComponent* InstigatorAbilitySystemComponent, int StacksToRemove);// 0x15f3e3fee041
	bool RemoveActiveGameplayEffect(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x15f2e3fee041
	int RemoveActiveEffectsWithTags(GameplayTagContainer Tags);// 0x15f1e3fee041
	int RemoveActiveEffectsWithSourceTags(GameplayTagContainer Tags);// 0x15f0e3fee041
	int RemoveActiveEffectsWithGrantedTags(GameplayTagContainer Tags);// 0x15efe3fee041
	int RemoveActiveEffectsWithAppliedTags(GameplayTagContainer Tags);// 0x15eee3fee041
	void OnRep_ServerDebugString();// 0x15ede3fee041
	void OnRep_ReplicatedAnimMontage();// 0x15ece3fee041
	void OnRep_OwningActor();// 0x15ebe3fee041
	void OnRep_ClientDebugString();// 0x15eae3fee041
	void OnRep_ActivateAbilities();// 0x15e9e3fee041
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x15e8e3fee041
	void NetMulticast_InvokeGameplayCuesExecuted(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x15e7e3fee041
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x15e6e3fee041
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x15e5e3fee041
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x15e4e3fee041
	void NetMulticast_InvokeGameplayCueExecuted(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x15e3e3fee041
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x15e2e3fee041
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x15e0e3fee041
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters Parameters);// 0x15dde3fee041
	void NetMulticast_InvokeGameplayCueAdded(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x15dce3fee041
	GameplayEffectSpecHandle MakeOutgoingSpec(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle Context);// 0x15dbe3fee041
	GameplayEffectContextHandle MakeEffectContext();// 0x15dae3fee041
	void K2_InitStats(class AttributeSet Attributes, const DataTable* DataTable);// 0x15d9e3fee041
	bool IsGameplayCueActive(const GameplayTag GameplayCueTag);// 0x15d8e3fee041
	bool GetUserAbilityActivationInhibited();// 0x15d7e3fee041
	float GetGameplayEffectMagnitude(ActiveGameplayEffectHandle Handle, GameplayAttribute Attribute);// 0x15d6e3fee041
	int GetGameplayEffectCount(class GameplayEffect SourceGameplayEffect, AbilitySystemComponent* OptionalInstigatorFilterComponent, bool bEnforceOnGoingCheck);// 0x15d5e3fee041
	ActiveGameplayEffectHandle[] GetActiveEffectsWithAllTags(GameplayTagContainer Tags);// 0x15d4e3fee041
	ActiveGameplayEffectHandle[] GetActiveEffects(out const GameplayEffectQuery Query);// 0x15d1e3fee041
	void ClientTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate);// 0x15d0e3fee041
	void ClientSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey);// 0x15cee3fee041
	void ClientPrintDebug_Response(const FString[] Strings, int GameFlags);// 0x15cde3fee041
	void ClientEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo);// 0x15cce3fee041
	void ClientCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x15c9e3fee041
	void ClientActivateAbilitySucceedWithEventData(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x15c8e3fee041
	void ClientActivateAbilitySucceed(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey);// 0x15c7e3fee041
	void ClientActivateAbilityFailed(GameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey);// 0x15c6e3fee041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToTarget(class GameplayEffect GameplayEffectClass, AbilitySystemComponent* Target, float Level, GameplayEffectContextHandle Context);// 0x15c5e3fee041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToSelf(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle EffectContext);// 0x15c4e3fee041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToTarget(out const GameplayEffectSpecHandle SpecHandle, AbilitySystemComponent* Target);// 0x15c3e3fee041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToSelf(out const GameplayEffectSpecHandle SpecHandle);// 0x15c2e3fee041
	void AbilityConfirmOrCancel__DelegateSignature();// 0x15c1e3fee041
	void AbilityAbilityKey__DelegateSignature(int InputID);// 0x15c0e3fee041

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc8, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd8, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0xf8, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x108, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x118, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x15bfe3fee041
	enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x15bde3fee041

--------------------------------
Class: AttributeDefaults
	class AttributeSet* Attributes;//[Offset: 0x0, Size: 0x8]
	DataTable* DefaultStartingTable;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AttributeSet.Object

--------------------------------
Class: GameplayEffectQuery
	delegate CustomMatchDelegate_BP;//[Offset: 0x10, Size: 0x10]
	GameplayTagQuery OwningTagQuery;//[Offset: 0x20, Size: 0x48]
	GameplayTagQuery EffectTagQuery;//[Offset: 0x68, Size: 0x48]
	GameplayTagQuery SourceTagQuery;//[Offset: 0xb0, Size: 0x48]
	GameplayAttribute ModifyingAttribute;//[Offset: 0xf8, Size: 0x38]
	Object* EffectSource;//[Offset: 0x130, Size: 0x8]
	class GameplayEffect* EffectDefinition;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4]
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10]
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10]
	FString UserDescription;//[Offset: 0x28, Size: 0x10]
	FString AutoDescription;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8]
	void ReadyForActivation();// 0x15b5e3fee041
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x15b4e3fee041
	void EndTask();// 0x15b3e3fee041

--------------------------------
Class: GameplayAbilityTargetActor.Actor.Object
	bool ShouldProduceTargetDataOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	GameplayAbilityTargetingLocationInfo StartLocation;//[Offset: 0x2f0, Size: 0x60]
	PlayerController* MasterPC;//[Offset: 0x380, Size: 0x8]
	GameplayAbility* OwningAbility;//[Offset: 0x388, Size: 0x8]
	bool bDestroyOnConfirmation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	Actor* SourceActor;//[Offset: 0x398, Size: 0x8]
	WorldReticleParameters ReticleParams;//[Offset: 0x3a0, Size: 0xc]
	class GameplayAbilityWorldReticle* ReticleClass;//[Offset: 0x3b0, Size: 0x8]
	GameplayTargetDataFilterHandle Filter;//[Offset: 0x3b8, Size: 0x10]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	AbilitySystemComponent* GenericDelegateBoundASC;//[Offset: 0x3e0, Size: 0x8]
	void ConfirmTargeting();// 0x5317e3fee041
	void CancelTargeting();// 0x5316e3fee041

--------------------------------
Class: WorldReticleParameters
	Vector AOEScale;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: GameplayAbilityWorldReticle.Actor.Object
	WorldReticleParameters Parameters;//[Offset: 0x2e0, Size: 0xc]
	bool bFaceOwnerFlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	bool bSnapToTargetedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 0x1]
	bool bIsTargetValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee, Size: 0x1]
	bool bIsTargetAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ef, Size: 0x1]
	PlayerController* MasterPC;//[Offset: 0x2f0, Size: 0x8]
	Actor* TargetingActor;//[Offset: 0x2f8, Size: 0x8]
	void SetReticleMaterialParamVector(FName ParamName, Vector Value);// 0x531de3fee041
	void SetReticleMaterialParamFloat(FName ParamName, float Value);// 0x531ce3fee041
	void OnValidTargetChanged(bool bNewValue);// 0x531be3fee041
	void OnTargetingAnActor(bool bNewValue);// 0x531ae3fee041
	void OnParametersInitialized();// 0x5319e3fee041
	void FaceTowardSource(bool bFaceIn2D);// 0x5318e3fee041

--------------------------------
Class: GameplayTargetDataFilterHandle

--------------------------------
Class: GameplayAbilitySpecContainer.FastArraySerializer
	GameplayAbilitySpec[] Items;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 0x4]
	enum DeltaFlags;//[Offset: 0x100, Size: 0x1]

--------------------------------
Class: GameplayAbilitySpec.FastArraySerializerItem
	GameplayAbilitySpecHandle Handle;//[Offset: 0xc, Size: 0x4]
	GameplayAbility* Ability;//[Offset: 0x10, Size: 0x8]
	int Level;//[Offset: 0x18, Size: 0x4]
	int InputID;//[Offset: 0x1c, Size: 0x4]
	Object* SourceObject;//[Offset: 0x20, Size: 0x8]
	byte ActiveCount;//[Offset: 0x28, Size: 0x1]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool RemoveAfterActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bActivateOnce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	GameplayAbilityActivationInfo ActivationInfo;//[Offset: 0x30, Size: 0x18]
	GameplayTagContainer DynamicAbilityTags;//[Offset: 0x48, Size: 0x20]
	GameplayAbility*[] NonReplicatedInstances;//[Offset: 0x68, Size: 0x10]
	GameplayAbility*[] ReplicatedInstances;//[Offset: 0x78, Size: 0x10]
	ActiveGameplayEffectHandle GameplayEffectHandle;//[Offset: 0x88, Size: 0x8]
	byte RequestCount;//[Offset: 0xe0, Size: 0x1]
	byte MaxRequestCount;//[Offset: 0xe1, Size: 0x1]

--------------------------------
Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 0x4]
	int ReplicationKey;//[Offset: 0x4, Size: 0x4]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: GameplayAbilityRepAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float position;//[Offset: 0xc, Size: 0x4]
	float BlendTime;//[Offset: 0x10, Size: 0x4]
	byte NextSectionID;//[Offset: 0x14, Size: 0x1]
	bool bRepPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool IsStopped;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool SkipPositionCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bSkipPlayRate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x10]
	byte SectionIdToPlay;//[Offset: 0x28, Size: 0x1]
	byte bStopAllMontages;//[Offset: 0x29, Size: 0x1]
	FName[] SectionLoopCountKeys;//[Offset: 0x30, Size: 0x10]
	int[] SectionLoopCountValues;//[Offset: 0x40, Size: 0x10]
	bool bRepStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRepPendingForWeapon;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: GameplayAbilityLocalAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x10]
	GameplayAbility* AnimatingAbility;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ActiveGameplayEffectsContainer.FastArraySerializer
	ActiveGameplayEffect[] GameplayEffects_Internal;//[Offset: 0x130, Size: 0x10]
	GameplayEffect*[] ApplicationImmunityQueryEffects;//[Offset: 0x4a0, Size: 0x10]

--------------------------------
Class: ActiveGameplayEffect.FastArraySerializerItem
	GameplayEffectSpec Spec;//[Offset: 0x18, Size: 0x298]
	PredictionKey PredictionKey;//[Offset: 0x2b0, Size: 0x10]
	float StartServerWorldTime;//[Offset: 0x2c0, Size: 0x4]
	float CachedStartServerWorldTime;//[Offset: 0x2c4, Size: 0x4]
	float StartWorldTime;//[Offset: 0x2c8, Size: 0x4]
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]

--------------------------------
Class: ActiveGameplayCueContainer.FastArraySerializer
	ActiveGameplayCue[] GameplayCues;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x120, Size: 0x8]

--------------------------------
Class: ActiveGameplayCue.FastArraySerializerItem
	GameplayTag GameplayCueTag;//[Offset: 0xc, Size: 0x8]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x10]
	GameplayCueParameters Parameters;//[Offset: 0x28, Size: 0xb8]
	bool bPredictivelyRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]

--------------------------------
Class: GameplayCueParameters
	float NormalizedMagnitude;//[Offset: 0x0, Size: 0x4]
	float RawMagnitude;//[Offset: 0x4, Size: 0x4]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x8, Size: 0x18]
	GameplayTag MatchedTagName;//[Offset: 0x20, Size: 0x8]
	GameplayTag OriginalTag;//[Offset: 0x28, Size: 0x8]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	Vector_NetQuantize10 Location;//[Offset: 0x70, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x7c, Size: 0xc]
	Actor* Instigator;//[Offset: 0x88, Size: 0x8]
	Actor* EffectCauser;//[Offset: 0x90, Size: 0x8]
	Object* SourceObject;//[Offset: 0x98, Size: 0x8]
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0xa0, Size: 0x8]
	int GameplayEffectLevel;//[Offset: 0xa8, Size: 0x4]
	int AbilityLevel;//[Offset: 0xac, Size: 0x4]
	SceneComponent* TargetAttachComponent;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: MinimalReplicationTagCountMap
	AbilitySystemComponent* Owner;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: ReplicatedPredictionKeyMap.FastArraySerializer
	ReplicatedPredictionKeyItem[] PredictionKeys;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ReplicatedPredictionKeyItem.FastArraySerializerItem
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ServerAbilityRPCBatch
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x0, Size: 0x4]
	PredictionKey PredictionKey;//[Offset: 0x8, Size: 0x10]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x18, Size: 0x28]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool Ended;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool Started;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]

--------------------------------
Class: GameplayEffectSpecForRPC
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x18, Size: 0x18]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	float Level;//[Offset: 0x70, Size: 0x4]
	float AbilityLevel;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: GameplayEffectSpecHandle

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: GameplayEffectCue
	GameplayAttribute MagnitudeAttribute;//[Offset: 0x0, Size: 0x38]
	float MinLevel;//[Offset: 0x38, Size: 0x4]
	float MaxLevel;//[Offset: 0x3c, Size: 0x4]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: GameplayEffectUIData.Object

--------------------------------
Class: InheritedTagContainer
	GameplayTagContainer CombinedTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer Added;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer Removed;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: AbilityTriggerData
	GameplayTag TriggerTag;//[Offset: 0x0, Size: 0x8]
	byte TriggerSource;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GameplayAbilityActorInfo
	Actor* OwnerActor;//[Offset: 0x8, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x10, Size: 0x8]
	PlayerController* PlayerController;//[Offset: 0x18, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x20, Size: 0x8]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x28, Size: 0x8]
	AnimInstance* AnimInstance;//[Offset: 0x30, Size: 0x8]
	MovementComponent* MovementComponent;//[Offset: 0x38, Size: 0x8]
	FName AffectedAnimInstanceTag;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AbilityEndedData
	GameplayAbility* AbilityThatEnded;//[Offset: 0x0, Size: 0x8]
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x8, Size: 0x4]
	bool bReplicateEndAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bWasCancelled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: SGGADataReference
	Object* DataOwner;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SGGEDataReference
	Object* DataOwner;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SGWeaponMovementComponent.ActorComponent.Object
	float WeaponZoomingMovingScale;//[Offset: 0xc0, Size: 0x4]
	float WeaponShoulderZoomMovingScale;//[Offset: 0xc4, Size: 0x4]
	float WeaponChangeClipMovingScale;//[Offset: 0xc8, Size: 0x4]
	float WeaponShootingMovingScale;//[Offset: 0xcc, Size: 0x4]
	float ADSMoveSpeedRatioByWeaponAccessory;//[Offset: 0xd4, Size: 0x4]
	float MoveSpeedRatioByWeaponAccessory;//[Offset: 0xd8, Size: 0x4]
	float MoveSpeedRatioByWeaponAccessory_Walk;//[Offset: 0xdc, Size: 0x4]
	float MoveSpeedRatioByWeaponAccessory_Sprint;//[Offset: 0xe0, Size: 0x4]
	float MoveSpeedRatioByWeaponAccessory_SilentWalk;//[Offset: 0xe4, Size: 0x4]
	float SprintToIdleConefficient;//[Offset: 0xe8, Size: 0x4]
	float MoveSpeedRatioByMeleeWeapon;//[Offset: 0xec, Size: 0x4]
	float LeanRateCoefficient;//[Offset: 0xf0, Size: 0x4]

--------------------------------
Class: BadgeAttachInfo
	SGInventoryEquipMeshComponent* AttachEquipMeshComp;//[Offset: 0x0, Size: 0x8]
	Transform AttachOffset;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: InventoryContainerBase
	int RowNum;//[Offset: 0x0, Size: 0x4]
	int ColumnNum;//[Offset: 0x4, Size: 0x4]
	int RuleID;//[Offset: 0x8, Size: 0x4]
	SGBagGridInfo[] GridList;//[Offset: 0x10, Size: 0x10]
	int ContainerIndex;//[Offset: 0x20, Size: 0x4]
	Actor*[] ChildActorList;//[Offset: 0x28, Size: 0x10]
	SGInventory* Inventory;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SGBagGridInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	Actor* Inventory;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WeaponMeshWaitToAttach
	<SGInventory*,MeshComponent*> WaitToAttachMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: SkeletalMeshMergeParams
	SkelMeshMergeSectionMapping_BP[] MeshSectionMappings;//[Offset: 0x0, Size: 0x10]
	SkelMeshMergeUVTransformMapping[] UVTransformsPerMesh;//[Offset: 0x10, Size: 0x10]
	SkeletalMesh*[] MeshesToMerge;//[Offset: 0x20, Size: 0x10]
	int StripTopLODS;//[Offset: 0x30, Size: 0x4]
	bool bNeedsCpuAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bSkeletonBefore;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	SkeletalMesh* ReferenceSkeletalMesh;//[Offset: 0x40, Size: 0x8]
	FName MergedMeshName;//[Offset: 0x48, Size: 0x8]
	bool bNeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	MaterialInterface* CommonMaterial;//[Offset: 0x58, Size: 0x8]
	LinearColor SkinType;//[Offset: 0x60, Size: 0x10]
	bool b1PUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bMergeMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]

--------------------------------
Class: SkelMeshMergeSectionMapping_BP
	int[] SectionIDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SkelMeshMergeUVTransformMapping
	SkelMeshMergeUVTransform[] UVTransformsPerMesh;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SkelMeshMergeUVTransform
	Transform[] UVTransforms;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SoundIndicator.Object
	<enum,SoundIndicatorConfig> SoundIndicatorConfig;//[Offset: 0x28, Size: 0x50]
	<enum,SoundSourceTypeSet> SoundSelfInfluenceFactorConfig;//[Offset: 0x78, Size: 0x50]
	SoundInfluenceAdditiveParams SoundInfluenceAdditiveParams;//[Offset: 0xc8, Size: 0xa0]
	<enum> DefaultHiddenType;//[Offset: 0x168, Size: 0x50]
	<enum,GunSilencerInfluenceParamsArray> GunSilencerInfluenceMap;//[Offset: 0x1b8, Size: 0x50]
	PlayerController* LocalPC;//[Offset: 0x208, Size: 0x8]
	SGCharacter* ViewChar;//[Offset: 0x210, Size: 0x8]
	void TriggerSoundIndicatorPreview(Vector RelativePos, float LevelInfluenceFactor, float MaxDistanceInfluenceFactor, enum SoundType, enum GunWeaponSubType);// 0x51a2e3fee041
	void TriggerSoundIndicator(Actor* SourceActor, enum SoundType);// 0x51a1e3fee041
	void OnStartSpectating(SGCharacter* ViewCharacter);// 0x51a0e3fee041
	void OnDestroy();// 0x519fe3fee041
	void OnAnimNotifyPlayAudio(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, int NotifyIndex, bool bUseConfig, bool bEnableSoundIndicator, bool bEnableHUDShake);// 0x519ee3fee041
	void Initialize();// 0x519de3fee041
	void CheckTlog(Actor* SourceActor, enum SoundType);// 0x519ce3fee041

--------------------------------
Class: SoundIndicatorConfig
	float BaseLevel;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	float FadeTime;//[Offset: 0x8, Size: 0x4]
	int IconIndex;//[Offset: 0xc, Size: 0x4]
	float Interval;//[Offset: 0x10, Size: 0x4]
	float MaxDistance;//[Offset: 0x14, Size: 0x4]
	float Frequency;//[Offset: 0x18, Size: 0x4]
	CurveFloat* OpacityCurve;//[Offset: 0x20, Size: 0x8]
	CurveFloat* AnimSpeedCurve;//[Offset: 0x28, Size: 0x8]
	CurveFloat* SoundWaveHeightCurve;//[Offset: 0x30, Size: 0x8]
	CurveFloat* HeightSideContrast;//[Offset: 0x38, Size: 0x8]
	MaterialInterface* MatUpper;//[Offset: 0x40, Size: 0x8]
	MaterialInterface* MatMiddle;//[Offset: 0x48, Size: 0x8]
	MaterialInterface* MatLower;//[Offset: 0x50, Size: 0x8]
	LinearColor WaveColor;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: SoundSourceTypeSet
	<enum> SoundSourceTypeSet;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: SoundInfluenceAdditiveParams
	<enum> SoundSourceTypeSet;//[Offset: 0x0, Size: 0x50]
	<enum,SoundIndicatorAdditive> SoundInfluenceAdditiveMap;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: SoundIndicatorAdditive
	float BaseLevelAdditive;//[Offset: 0x0, Size: 0x4]
	float DurationAdditive;//[Offset: 0x4, Size: 0x4]
	float FadeTimeAdditive;//[Offset: 0x8, Size: 0x4]
	float MaxDistanceAdditive;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: GunSilencerInfluenceParamsArray
	GunSilencerInfluenceParams[] GunSilencerInfluenceArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: GunSilencerInfluenceParams
	enum SilencerType;//[Offset: 0x0, Size: 0x1]
	SoundInfluenceFactor InfluenceFactor;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: SoundInfluenceFactor
	float LevelInfluence;//[Offset: 0x0, Size: 0x4]
	float MaxDistanceInfluence;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SGCharacter.Character.Pawn.Actor.Object
	delegate LandedEvent;//[Offset: 0x5b8, Size: 0x10]
	delegate MoveBlockedByEvent;//[Offset: 0x5c8, Size: 0x10]
	delegate ContinuallyMoveBlockedByEvent;//[Offset: 0x5d8, Size: 0x10]
	delegate DeafEvent;//[Offset: 0x5e8, Size: 0x10]
	delegate LackInMoistureEvent;//[Offset: 0x5f8, Size: 0x10]
	delegate LackInFoodEvent;//[Offset: 0x608, Size: 0x10]
	delegate EnduranceChangedEvent;//[Offset: 0x618, Size: 0x10]
	delegate HealthConditionChangedEvent;//[Offset: 0x628, Size: 0x10]
	delegate HealthChangedEvent;//[Offset: 0x638, Size: 0x10]
	delegate EnergyChangeEvent;//[Offset: 0x648, Size: 0x10]
	delegate EnergyRecoverScaleEvent;//[Offset: 0x658, Size: 0x10]
	delegate MoistureChangeEvent;//[Offset: 0x668, Size: 0x10]
	delegate FoodChangeEvent;//[Offset: 0x678, Size: 0x10]
	delegate ReloadEvent;//[Offset: 0x688, Size: 0x10]
	delegate OutOfEnduranceEvent;//[Offset: 0x698, Size: 0x10]
	delegate DamageSpreadingRoundFinishEvent;//[Offset: 0x6a8, Size: 0x10]
	delegate RecoverFromEnduranceEvent;//[Offset: 0x6b8, Size: 0x10]
	delegate PreTakeDamageEvent;//[Offset: 0x6c8, Size: 0x10]
	delegate TakeDamageEvent;//[Offset: 0x6d8, Size: 0x10]
	delegate PostTakeDamageEvent;//[Offset: 0x6e8, Size: 0x10]
	delegate TakeRealDamageEvent;//[Offset: 0x6f8, Size: 0x10]
	delegate TakeDamageByDebuffEvent;//[Offset: 0x708, Size: 0x10]
	delegate FFPTakeHitEvent;//[Offset: 0x718, Size: 0x10]
	delegate CauseDamageEvent;//[Offset: 0x728, Size: 0x10]
	delegate CauseRealDamageEvent;//[Offset: 0x738, Size: 0x10]
	delegate ArmorTakeDamageEvent;//[Offset: 0x748, Size: 0x10]
	delegate CauseDebuffEvent;//[Offset: 0x758, Size: 0x10]
	delegate CauseArmorDurabilityReduce;//[Offset: 0x768, Size: 0x10]
	delegate PreDiedEvent;//[Offset: 0x778, Size: 0x10]
	delegate PostDiedEvent;//[Offset: 0x788, Size: 0x10]
	delegate OnDeathAnimationEndedEvent;//[Offset: 0x798, Size: 0x10]
	delegate KillEvent;//[Offset: 0x7a8, Size: 0x10]
	delegate BeKilledEvent;//[Offset: 0x7b8, Size: 0x10]
	delegate BeKilledEquipmentEvent;//[Offset: 0x7c8, Size: 0x10]
	delegate PoseChangedEvent;//[Offset: 0x7d8, Size: 0x10]
	delegate LeanTypeChangedEvent;//[Offset: 0x7e8, Size: 0x10]
	delegate LeanRatioChangedEvent;//[Offset: 0x7f8, Size: 0x10]
	DamageBlackborad DamageBlackborad;//[Offset: 0x808, Size: 0x80]
	delegate TornOffEvent;//[Offset: 0x888, Size: 0x10]
	delegate OnCharacterEnterTearGas;//[Offset: 0x898, Size: 0x10]
	delegate StartInteractBoxInventoryEvent;//[Offset: 0x8a8, Size: 0x10]
	delegate FinishGameEvent;//[Offset: 0x8b8, Size: 0x10]
	delegate RotaterEvent;//[Offset: 0x8c8, Size: 0x10]
	delegate OpenContextMenuEvent;//[Offset: 0x8d8, Size: 0x10]
	delegate OpenContextMenuDTEvent;//[Offset: 0x8e8, Size: 0x10]
	delegate BoxInventoryOpenedEvent;//[Offset: 0x8f8, Size: 0x10]
	delegate DoorEvent;//[Offset: 0x908, Size: 0x10]
	delegate LootContainerEvent;//[Offset: 0x918, Size: 0x10]
	delegate LootItemEvent;//[Offset: 0x928, Size: 0x10]
	delegate WalkEvent;//[Offset: 0x938, Size: 0x10]
	delegate LocationReport;//[Offset: 0x948, Size: 0x10]
	Vector LastLocation;//[Offset: 0x958, Size: 0xc]
	delegate StartUsingRecoveryItemEvent;//[Offset: 0x9a0, Size: 0x10]
	delegate RecoveryItemActivatedEvent;//[Offset: 0x9b0, Size: 0x10]
	delegate ReceiveRecoveryEffectEvent;//[Offset: 0x9c0, Size: 0x10]
	delegate OnCharacterInvEquipPositionChangedEvent;//[Offset: 0x9d0, Size: 0x10]
	delegate SwitchWeaponEvent;//[Offset: 0x9e0, Size: 0x10]
	delegate SwitchWeaponCompletedEvent;//[Offset: 0x9f0, Size: 0x10]
	delegate UseInventoryFlashEvent;//[Offset: 0xa00, Size: 0x10]
	delegate InventoryFlashDebuffEvent;//[Offset: 0xa10, Size: 0x10]
	delegate OnSetCurrentWeaponEvent;//[Offset: 0xa20, Size: 0x10]
	delegate OnSetCurrentWeaponAfterMontageEvent;//[Offset: 0xa30, Size: 0x10]
	delegate OnUpdateWeaponAnimationSetsEvent;//[Offset: 0xa40, Size: 0x10]
	delegate UnProne;//[Offset: 0xa50, Size: 0x10]
	delegate ProneToCrouch;//[Offset: 0xa60, Size: 0x10]
	delegate CrouchToProne;//[Offset: 0xa70, Size: 0x10]
	delegate StandToProne;//[Offset: 0xa80, Size: 0x10]
	delegate EnterDBNOStatusEvent;//[Offset: 0xa90, Size: 0x10]
	delegate ExitDBNOStatusEvent;//[Offset: 0xaa0, Size: 0x10]
	delegate AbortRescueTeammateEvent;//[Offset: 0xab0, Size: 0x10]
	delegate OnClickAtk;//[Offset: 0xac0, Size: 0x10]
	delegate OnClickStopAtk;//[Offset: 0xad0, Size: 0x10]
	delegate PreAddInventoryEvent;//[Offset: 0xae0, Size: 0x10]
	delegate OnPeriodicGameplayEffectExecuteEvent;//[Offset: 0xaf0, Size: 0x10]
	delegate OnGameplayEffectAppliedEvent;//[Offset: 0xb00, Size: 0x10]
	delegate OnAnyGameplayEffectRemovedEvent;//[Offset: 0xb10, Size: 0x10]
	delegate OnGameplayDebuffStatusChangedEvent;//[Offset: 0xb20, Size: 0x10]
	delegate OnStartSearchingContainerEvent;//[Offset: 0xb30, Size: 0x10]
	delegate OnContainerRoughSearchEndEvent;//[Offset: 0xb40, Size: 0x10]
	delegate OnContainerSearchEnd;//[Offset: 0xb50, Size: 0x10]
	delegate OnRecvMsg;//[Offset: 0xb60, Size: 0x10]
	delegate OnAvatarAddedEvent;//[Offset: 0xb70, Size: 0x10]
	delegate OnAvatarRemovedEvent;//[Offset: 0xb80, Size: 0x10]
	delegate OnBadgeUpdateEvent;//[Offset: 0xb90, Size: 0x10]
	delegate OnEnterCheckVolumeEvent;//[Offset: 0xba0, Size: 0x10]
	delegate OnBecomeViewTarget;//[Offset: 0xbb0, Size: 0x10]
	delegate OnPossessedByController;//[Offset: 0xbc0, Size: 0x10]
	delegate OnUnPossessedByController;//[Offset: 0xbd0, Size: 0x10]
	delegate OnStartSpectatedByController;//[Offset: 0xbe0, Size: 0x10]
	delegate OnStopSpectatedByController;//[Offset: 0xbf0, Size: 0x10]
	delegate OnGetViewedByController;//[Offset: 0xc00, Size: 0x10]
	delegate OnLockInventoriesInContainer;//[Offset: 0xc10, Size: 0x10]
	delegate OnUsingInventoryChanged;//[Offset: 0xc20, Size: 0x10]
	delegate EnterDSSendWeaponAttri;//[Offset: 0xc30, Size: 0x10]
	delegate OnKillQuestProgressAdd;//[Offset: 0xc40, Size: 0x10]
	delegate OnCollectQuestProgressChanged;//[Offset: 0xc50, Size: 0x10]
	delegate OnKillMissionProgressAdd;//[Offset: 0xc60, Size: 0x10]
	delegate OnCollectMissionProgressChanged;//[Offset: 0xc70, Size: 0x10]
	delegate ClientLocationCorrectionEvent;//[Offset: 0xc80, Size: 0x10]
	delegate FrameRateJitterEvent;//[Offset: 0xc90, Size: 0x10]
	delegate ThermalViewHackEvent;//[Offset: 0xca0, Size: 0x10]
	delegate CharacterPreAddInventoryEvent;//[Offset: 0xcb0, Size: 0x10]
	delegate CharacterAddInventoryEvent;//[Offset: 0xcc0, Size: 0x10]
	delegate CharacterRemoveInventoryEvent;//[Offset: 0xcd0, Size: 0x10]
	delegate CharacterRemoveWeaponEvent;//[Offset: 0xce0, Size: 0x10]
	delegate CharacterInventoryMovedEvent;//[Offset: 0xcf0, Size: 0x10]
	delegate Client_InventoryGridInfoChangedEvent;//[Offset: 0xd00, Size: 0x10]
	delegate OnCharacterSexChanged;//[Offset: 0xd10, Size: 0x10]
	delegate OnCharacterMeshChanged;//[Offset: 0xd20, Size: 0x10]
	delegate OnCharacterAvatarMeshLoaded;//[Offset: 0xd30, Size: 0x10]
	delegate OnCharacterAllAvatarMeshLoaded;//[Offset: 0xd40, Size: 0x10]
	delegate OnPrimaryWeaponAllMeshLoaded;//[Offset: 0xd50, Size: 0x10]
	delegate OnCharacterAvatarListChanged;//[Offset: 0xd60, Size: 0x10]
	delegate OnShowMergedAvatar;//[Offset: 0xd70, Size: 0x10]
	delegate OnSetNewOwner;//[Offset: 0xd80, Size: 0x10]
	delegate OnOwnerOrRoleChanged;//[Offset: 0xd90, Size: 0x10]
	delegate OnRepControllerEvent;//[Offset: 0xda0, Size: 0x10]
	delegate OnSetNewPlayerState;//[Offset: 0xdb0, Size: 0x10]
	delegate OnChangeCustomFOV;//[Offset: 0xdc0, Size: 0x10]
	delegate OnEnableCustomFOV;//[Offset: 0xdd0, Size: 0x10]
	delegate OnSprintRequest;//[Offset: 0xde0, Size: 0x10]
	delegate OnCharacterZoomChanged;//[Offset: 0xdf0, Size: 0x10]
	delegate OnAbilityActivated;//[Offset: 0xe00, Size: 0x10]
	delegate DBNOEndReport;//[Offset: 0xe10, Size: 0x10]
	delegate InventoryGiveComplete;//[Offset: 0xe20, Size: 0x10]
	delegate InventoryLoadComplete;//[Offset: 0xe30, Size: 0x10]
	delegate OnInventorySkeletalMeshLoadComplete;//[Offset: 0xe40, Size: 0x10]
	delegate OnCharacterSkeletalMeshLoadComplete;//[Offset: 0xe50, Size: 0x10]
	delegate OnInventoryStaticMeshLoadComplete;//[Offset: 0xe60, Size: 0x10]
	delegate OnCharacterStaticMeshLoadComplete;//[Offset: 0xe70, Size: 0x10]
	delegate OnBeforeCharacterUpdateAvatarLayers;//[Offset: 0xe80, Size: 0x10]
	delegate OnAfterCharacterUpdateAvatarLayers;//[Offset: 0xe90, Size: 0x10]
	delegate OnEnableHighPowerScope;//[Offset: 0xea0, Size: 0x10]
	delegate OnCharacterLoadProtectStateChanged;//[Offset: 0xeb0, Size: 0x10]
	delegate OnAutoAimAntiHackStatisReceived;//[Offset: 0xec0, Size: 0x10]
	delegate OnCarriedFaceShieldActivated;//[Offset: 0xed0, Size: 0x10]
	delegate OnCharacterCastShadow;//[Offset: 0xee0, Size: 0x10]
	delegate OnWeaponHarmVerifyFail;//[Offset: 0xef0, Size: 0x10]
	delegate OnPickUpInventory;//[Offset: 0xf00, Size: 0x10]
	delegate OnActivateInteract;//[Offset: 0xf10, Size: 0x10]
	delegate OnSoundLevelInfluenceFactorChanged;//[Offset: 0xf20, Size: 0x10]
	delegate OnSoundMaxDistanceInfluenceFactorChanged;//[Offset: 0xf30, Size: 0x10]
	delegate TinnitusDelegate;//[Offset: 0xf40, Size: 0x10]
	delegate OnDestroyActor;//[Offset: 0xf50, Size: 0x10]
	delegate OnCharacterDestroyed;//[Offset: 0xf60, Size: 0x10]
	delegate OnFSMEscapeStateChange;//[Offset: 0xf70, Size: 0x10]
	delegate OnWeaponListChange;//[Offset: 0xf80, Size: 0x10]
	delegate OnCharacterTwoHandGestureActivate;//[Offset: 0xf90, Size: 0x10]
	delegate OnCharacterResetToLastSavedState;//[Offset: 0xfa0, Size: 0x10]
	delegate OnActiveLongDistanceTacticalInv;//[Offset: 0xfb0, Size: 0x10]
	delegate OnEquipSkeletalMeshLoadCompleted;//[Offset: 0xfc0, Size: 0x10]
	delegate OnEquipStaticMeshLoadCompleted;//[Offset: 0xfd0, Size: 0x10]
	delegate OnPreUpdateAvatars;//[Offset: 0xfe0, Size: 0x10]
	delegate OnUpdateAvatarsAddInventory;//[Offset: 0xff0, Size: 0x10]
	delegate OnUpdateAvatarsAfterAddInventory;//[Offset: 0x1000, Size: 0x10]
	delegate OnEquipMeshDecideLoadSkeletalMeshInLobby;//[Offset: 0x1010, Size: 0x10]
	delegate OnInvMeshDecideLoadSkeletalMeshInLobby;//[Offset: 0x1020, Size: 0x10]
	delegate OnInvAnimInstanceLoad;//[Offset: 0x1030, Size: 0x10]
	delegate OnUpdateAvatarsFinish;//[Offset: 0x1040, Size: 0x10]
	SGCharacterTestDamageComponent* TestDamageComponent;//[Offset: 0x1058, Size: 0x8]
	bool bShouldDeferConstructionAIC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1060, Size: 0x1]
	SGCharacterLocalDataComponent* LocalDataComponent;//[Offset: 0x1068, Size: 0x8]
	CameraComponent* CharacterCameraComponent;//[Offset: 0x1070, Size: 0x8]
	CameraComponent* FPPCameraComponent;//[Offset: 0x1078, Size: 0x8]
	uint32 PlayerViewInfo;//[Offset: 0x1080, Size: 0x4]
	float PlayerViewPitch;//[Offset: 0x1084, Size: 0x4]
	float PlayerViewYaw;//[Offset: 0x1088, Size: 0x4]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x10a4, Size: 0x4]
	SGPlayerController* CurrentViewerPC;//[Offset: 0x10a8, Size: 0x8]
	enum PlayerTurnInfo;//[Offset: 0x10b0, Size: 0x1]
	bool bIsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b1, Size: 0x1]
	bool bEnableBeAutoAimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b2, Size: 0x1]
	int UROLoadBalanceBudget;//[Offset: 0x10f4, Size: 0x4]
	SGCharacterMovementComponent* SGCharacterMovement;//[Offset: 0x10f8, Size: 0x8]
	int64 ProxyCharacterCounter;//[Offset: 0x1120, Size: 0x8]
	bool bWeaponDebugMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1130, Size: 0x1]
	delegate OnReadyToPlay;//[Offset: 0x1138, Size: 0x10]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x1148, Size: 0x8]
	SGContextMenu* Menu;//[Offset: 0x1150, Size: 0x8]
	TimerHandle LocationReportHandle;//[Offset: 0x1158, Size: 0x8]
	Vector CharacterMeshLocationOffset;//[Offset: 0x1160, Size: 0xc]
	bool bReadyToPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116c, Size: 0x1]
	<ActorComponent*> WaitingForInitComponents;//[Offset: 0x1170, Size: 0x50]
	<SGInventory*> ActiveLongDistanceTacticalInvs;//[Offset: 0x11c0, Size: 0x50]
	bool bTickingOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1210, Size: 0x1]
	Actor* LastHitByDamageCauser;//[Offset: 0x1218, Size: 0x8]
	enum CachedCharacterType;//[Offset: 0x1222, Size: 0x1]
	Vector Acceleration;//[Offset: 0x1224, Size: 0xc]
	Vector PredictStopLocation;//[Offset: 0x1230, Size: 0xc]
	bool bIsReplayViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1254, Size: 0x1]
	bool bSimulateNavWalkSnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1255, Size: 0x1]
	byte LaserTraceCollisionChannel;//[Offset: 0x1256, Size: 0x1]
	float CharacterSpawnTime;//[Offset: 0x1258, Size: 0x4]
	uint64 GID;//[Offset: 0x1260, Size: 0x8]
	enum CharacterSex;//[Offset: 0x1268, Size: 0x1]
	bool bRestarting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1269, Size: 0x1]
	SGCharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x1270, Size: 0x8]
	SGCharacterDeathComponent* DeathComponent;//[Offset: 0x1278, Size: 0x8]
	SGCharacterMovementAbilityComponent* MovementAbilityComponent;//[Offset: 0x1280, Size: 0x8]
	SGCharacterBaseTurnComponent* TurnComponent;//[Offset: 0x1288, Size: 0x8]
	SGCharacterBulletPassComponent* BulletPassComponent;//[Offset: 0x1290, Size: 0x8]
	SGCharacterInputProcessComponent* InputProcessComponent;//[Offset: 0x1298, Size: 0x8]
	SGCharacterMovementProneComponent* MovementProneComponent;//[Offset: 0x12a0, Size: 0x8]
	SGCharacterMovementDBNOComponent* MovementDBNOComponent;//[Offset: 0x12a8, Size: 0x8]
	SGCharacterMovementVaultComponent* MovementVaultComponent;//[Offset: 0x12b0, Size: 0x8]
	SGCharacterDBNOComponent* DBNOComponent;//[Offset: 0x12b8, Size: 0x8]
	SGCharacterFallComponent* CharacterFallComponent;//[Offset: 0x12c0, Size: 0x8]
	SGCharacterLeanWallComponent* LeanComponent;//[Offset: 0x12c8, Size: 0x8]
	SGCharacterRagdollNewComponent* RagdollComponent;//[Offset: 0x12d0, Size: 0x8]
	SGCharacterAIComponent* AIComponent;//[Offset: 0x12d8, Size: 0x8]
	SGCharacterAIPoseComponent* AIPoseComponent;//[Offset: 0x12e0, Size: 0x8]
	SGCharacterWeaponSwayComponent* WeaponSwayComponent;//[Offset: 0x12e8, Size: 0x8]
	SGUAMCharacterPoseCacheComponent* PoseCacheComponent;//[Offset: 0x12f0, Size: 0x8]
	SGCharacterEnergyComponent* EnergyComponent;//[Offset: 0x12f8, Size: 0x8]
	SGCharacterSprintComponent* SprintComponent;//[Offset: 0x1300, Size: 0x8]
	SGActorUseComponent* UseComponent;//[Offset: 0x1308, Size: 0x8]
	SGCharacterAnimationComponent* AnimationComponent;//[Offset: 0x1310, Size: 0x8]
	SGCharacterPreviewComponent* PreviewComponent;//[Offset: 0x1318, Size: 0x8]
	SGCharacterWeaponTraceComponent* WeaponTraceComponent;//[Offset: 0x1320, Size: 0x8]
	SGCharacterCurveBreathComponent* CurveBreathComponent;//[Offset: 0x1328, Size: 0x8]
	SGCharacterTakeHitEffectComponent* TakeHitEffectComponent;//[Offset: 0x1330, Size: 0x8]
	SGCharacterTakeCoverComponent* TakeCoverComponent;//[Offset: 0x1338, Size: 0x8]
	SGCharacterMovementLadderClimbComponent* MovementLadderClimbComponent;//[Offset: 0x1340, Size: 0x8]
	SGCharacterInteractionComponent* InteractionComponent;//[Offset: 0x1348, Size: 0x8]
	SGCharacterTeamRescueComponent* TeamRescueComponent;//[Offset: 0x1350, Size: 0x8]
	SGCharacterIKComponent* IKComponent;//[Offset: 0x1358, Size: 0x8]
	SGCharacterStunGrenadeEffectComponent* StunGrenadeEffectComponent;//[Offset: 0x1360, Size: 0x8]
	SGCharacterWeightComponent* WeightComponent;//[Offset: 0x1368, Size: 0x8]
	SGCharacterSenseAbilityComponent* SenseAbilityComponent;//[Offset: 0x1370, Size: 0x8]
	SGCharacterCastShadowComponent* CastShadowComp;//[Offset: 0x1378, Size: 0x8]
	SGCharacterAvatarComponent* AvatarComp;//[Offset: 0x1380, Size: 0x8]
	SGCharacterAvatarManagerComponent* AvatarManagerComp;//[Offset: 0x1388, Size: 0x8]
	SGCharacterMeshComponent* CharacterMeshComp;//[Offset: 0x1390, Size: 0x8]
	SGCharacterAvatarMergeComponent* AvatarMergeComp;//[Offset: 0x1398, Size: 0x8]
	SGCharacterFreshWoundComponent* CharacterFreshWoundComponent;//[Offset: 0x13a0, Size: 0x8]
	SGCharacterBoneBreakComponent* CharacterBoneBreakComponent;//[Offset: 0x13a8, Size: 0x8]
	SGCharacterFootEffectComponent* FootEffectComponent;//[Offset: 0x13b0, Size: 0x8]
	SGCharacterMovementLadderClimbComponent* CharacterMovementLadderClimbComponent;//[Offset: 0x13b8, Size: 0x8]
	SGCharacterFragGrenadeEffectComponent* FragEffectComponent;//[Offset: 0x13c0, Size: 0x8]
	SGCharacterDebugMovementComponent* CharacterDebugMovementComponent;//[Offset: 0x13c8, Size: 0x8]
	SGCharacterWeaponManagerComponent* CharacterWeaponManagerComponent;//[Offset: 0x13d0, Size: 0x8]
	SGCharacterLoadProtectComponent* CharacterLoadProtectComponent;//[Offset: 0x13d8, Size: 0x8]
	SGCharacterTLogComponent* CharacterTLogComponent;//[Offset: 0x13e0, Size: 0x8]
	SGCharacterInventoryManagerComponent* CharacterInventoryManagerComponent;//[Offset: 0x13e8, Size: 0x8]
	SGMotionWarpingComponent* MotionWarpingComponent;//[Offset: 0x13f0, Size: 0x8]
	SGCharacterInventoryComponent* CharacterInventoryComponent;//[Offset: 0x13f8, Size: 0x8]
	SGCharacterMoveBlockedAvoidanceComponent* MoveBlockedAvoidanceComponent;//[Offset: 0x1400, Size: 0x8]
	SGCharacterSoundComponent* CharacterSoundComponent;//[Offset: 0x1408, Size: 0x8]
	SGCharacterArmorManagerComponent* CharacterArmorManagerComponent;//[Offset: 0x1410, Size: 0x8]
	void SetLastUpdateMeshRotation(Rotator InLastUpdateMeshRotation);// 0x375ae3fee041
	void SetCharacterSex(enum InCharacterSex);// 0x3759e3fee041
	void SetCharacterLocationReliable(Vector position);// 0x3758e3fee041
	void ServerSetTurnInfo(byte InputPlayerTurnInfo);// 0x3757e3fee041
	void ServerPredictStopLocation(const Vector InPredictStopLocation);// 0x3756e3fee041
	void ServerNotifyInteractEvent(Actor* InteractTarget, enum EventType, SGInteractComponentBase* SGInteractComponentBase);// 0x3755e3fee041
	void RemoveGameplayTagChangedEventByTagName(delegate InDelegate, FString TagName, byte EventType);// 0x3754e3fee041
	void RemoveGameplayTagChangedEvent(delegate InDelegate, out const GameplayTag Tag, byte EventType);// 0x3753e3fee041
	void RegisterGameplayTagChangedEventByTagName(delegate InDelegate, FString TagName, byte EventType);// 0x3752e3fee041
	void RegisterGameplayTagChangedEvent(delegate InDelegate, out const GameplayTag Tag, byte EventType);// 0x3751e3fee041
	void OnZoomChanged(bool bIsZooming);// 0x3750e3fee041
	void OnTinnitus(GameplayTag Tag, int Count);// 0x374fe3fee041
	void OnSwitchWeaponCompleted(SGWeapon* Weapon, FString WeaponName, SGWeapon* OldWeapon);// 0x374ee3fee041
	void OnSwitchWeapon(SGWeapon* Weapon, FString WeaponName);// 0x374de3fee041
	void OnRep_TickingOnDeath();// 0x374ce3fee041
	void OnRep_ReadyToPlay();// 0x374be3fee041
	void OnRep_PlayerViewInfo();// 0x374ae3fee041
	void OnRep_CharacterSex();// 0x3749e3fee041
	void OnRefreshVisibilityBasedAnimTickOption(bool bActiveLongDistanceTacticalInv);// 0x3748e3fee041
	void OnPeriodicGameplayEffectExecute(AbilitySystemComponent* AbilitySystemComp, out const GameplayEffectSpec GameplayEffectSpec, ActiveGameplayEffectHandle ActiveGameplayEffectHandle);// 0x3747e3fee041
	void OnGameplayEffectApplied(AbilitySystemComponent* AbilitySystemComp, out const GameplayEffectSpec GameplayEffectSpec, ActiveGameplayEffectHandle ActiveGameplayEffectHandle);// 0x3746e3fee041
	void OnCharacterEnableHighPowerScope(bool bAssembled);// 0x3745e3fee041
	void OnBeginGame(PlayerController* PC);// 0x3744e3fee041
	void OnAnyGameplayEffectRemoved(out const ActiveGameplayEffect ActiveGameplayEffect);// 0x3743e3fee041
	void NotifyInteractEvent(Actor* InteractTarget, enum EventType, SGInteractComponentBase* SGInteractComponentBase);// 0x3742e3fee041
	void MulticastSetCharacterLocation(Vector position);// 0x3741e3fee041
	void K2_OnStartProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x3740e3fee041
	void K2_OnStartDBNO(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x373fe3fee041
	void K2_OnEndProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x373ee3fee041
	void K2_OnEndDBNO(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x373de3fee041
	bool IsReadyToPlay();// 0x373ce3fee041
	SGCharacterWeightComponent* GetWeightComponent();// 0x373be3fee041
	SGCharacterWeaponTraceComponent* GetWeaponTraceComponent();// 0x373ae3fee041
	SGCharacterWeaponSwayComponent* GetWeaponSwayComponent();// 0x3739e3fee041
	SGCharacterWeaponManagerComponent* GetWeaponManagerComponent();// 0x3738e3fee041
	float GetWantToMoveDirAngle();// 0x3737e3fee041
	Rotator GetViewRotOffset();// 0x3736e3fee041
	SGActorUseComponent* GetUseComponent();// 0x3735e3fee041
	SGCharacterBaseTurnComponent* GetTurnComponent();// 0x3734e3fee041
	SGCharacterTeamRescueComponent* GetTeamRescueComponent();// 0x3733e3fee041
	SGCharacterTakeHitEffectComponent* GetTakeHitEffectComponent();// 0x3732e3fee041
	SGCharacterTakeCoverComponent* GetTakeCoverComponent();// 0x3731e3fee041
	SGCharacterStunGrenadeEffectComponent* GetStunGrenadeEffectComponent();// 0x3730e3fee041
	SGInventory* GetSteadyCurrentWeapon();// 0x372fe3fee041
	SGCharacterSprintComponent* GetSprintComponent();// 0x372ee3fee041
	SGCharacterSenseAbilityComponent* GetSenseAbilityComponent();// 0x372de3fee041
	SGCharacterRagdollNewComponent* GetRagdollComponent();// 0x372ce3fee041
	Rotator GetPronePlaneRot();// 0x372be3fee041
	SGCharacterPreviewComponent* GetPreviewComponent();// 0x372ae3fee041
	SGUAMCharacterPoseCacheComponent* GetPoseCacheComponent();// 0x3729e3fee041
	Rotator GetPlayerViewRotation();// 0x3728e3fee041
	PlayerCameraManager* GetPlayerCameraManager();// 0x3727e3fee041
	float GetMovingDirAngle();// 0x3726e3fee041
	SGCharacterMovementVaultComponent* GetMovementVaultComponent();// 0x3725e3fee041
	SGCharacterMovementProneComponent* GetMovementProneComponent();// 0x3724e3fee041
	SGCharacterMovementLadderClimbComponent* GetMovementLadderClimbComponent();// 0x3723e3fee041
	SGCharacterMovementDBNOComponent* GetMovementDBNOComponent();// 0x3722e3fee041
	SGCharacterMovementAbilityComponent* GetMovementAbilityComponent();// 0x3721e3fee041
	SGMotionWarpingComponent* GetMotionWarpingComponent();// 0x3720e3fee041
	Rotator GetMeshRotation();// 0x371fe3fee041
	float GetLeaveSmokeTime();// 0x371ee3fee041
	SGCharacterLeanWallComponent* GetLeanComponent();// 0x371de3fee041
	Rotator GetLastUpdateMeshRotation();// 0x371ce3fee041
	bool GetIsEnterTearGas();// 0x371be3fee041
	SGCharacterInteractionComponent* GetInteractionComponent();// 0x371ae3fee041
	SGCharacterInputProcessComponent* GetInputProcessComponent();// 0x3719e3fee041
	SGCharacterIKComponent* GetIKComponent();// 0x3718e3fee041
	float GetEnterSmokeTime();// 0x3717e3fee041
	SGCharacterEnergyComponent* GetEnergyComponent();// 0x3716e3fee041
	SGCharacterDeathComponent* GetDeathComponent();// 0x3715e3fee041
	SGCharacterDBNOComponent* GetDBNOComponent();// 0x3714e3fee041
	SGCharacterCurveBreathComponent* GetCurveBreathComponent();// 0x3713e3fee041
	SGCharacterWeaponManagerComponent* GetCharacterWeaponManagerComponent();// 0x3712e3fee041
	SGCharacterTLogComponent* GetCharacterTLogComponent();// 0x3711e3fee041
	SGCharacterSoundComponent* GetCharacterSoundComponent();// 0x3710e3fee041
	enum GetCharacterSex();// 0x370fe3fee041
	SGCharacterMovementLadderClimbComponent* GetCharacterMovementLadderClimbComponent();// 0x370ee3fee041
	SGCharacterMoveBlockedAvoidanceComponent* GetCharacterMoveBlockedAvoidanceComponent();// 0x370de3fee041
	SGCharacterMeshComponent* GetCharacterMeshComponent();// 0x370ce3fee041
	SGCharacterLoadProtectComponent* GetCharacterLoadProtectComponent();// 0x370be3fee041
	SGCharacterInventoryManagerComponent* GetCharacterInventoryManagerComponent();// 0x370ae3fee041
	SGCharacterInventoryComponent* GetCharacterInventoryComponent();// 0x3709e3fee041
	SGCharacterFreshWoundComponent* GetCharacterFreshWoundComponent();// 0x3708e3fee041
	SGCharacterFragGrenadeEffectComponent* GetCharacterFragGrenadeEffectComponent();// 0x3707e3fee041
	SGCharacterFootEffectComponent* GetCharacterFootEffectComponent();// 0x3706e3fee041
	SGCharacterFallComponent* GetCharacterFallComponent();// 0x3705e3fee041
	SGCharacterDebugMovementComponent* GetCharacterDebugMovementComponent();// 0x3704e3fee041
	SGCharacterBoneBreakComponent* GetCharacterBoneBreakComponent();// 0x3703e3fee041
	SGCharacterArmorManagerComponent* GetCharacterArmorManagerComponent();// 0x3702e3fee041
	SGCharacterCastShadowComponent* GetCastShadowComponent();// 0x3701e3fee041
	enum GetCachedCharacterType();// 0x3700e3fee041
	SGCharacterBulletPassComponent* GetBulletPassComponent();// 0x36ffe3fee041
	SGCharacterAvatarMergeComponent* GetAvatarMergeComponent();// 0x36fee3fee041
	SGCharacterAvatarManagerComponent* GetAvatarManagerComponent();// 0x36fde3fee041
	SGCharacterAvatarComponent* GetAvatarComponent();// 0x36fce3fee041
	SGCharacterAnimationComponent* GetAnimationComponent();// 0x36fbe3fee041
	SGCharacterAIPoseComponent* GetAIPoseComponent();// 0x36fae3fee041
	SGCharacterAIComponent* GetAIComponent();// 0x36f9e3fee041
	float GetAccDirAngle();// 0x36f8e3fee041
	void FreezeEnableWorldOriginRebaseLogic(bool bInFreezeRebaseLogic);// 0x36f7e3fee041
	void EnableWorldOriginRebaseLogic(bool bEnable);// 0x36f6e3fee041
	void DisableTickOnDeath();// 0x36f5e3fee041
	void ClientBroadcastOnGameHUD(BroadcastOnGameHUDConfig GameHUDConfig);// 0x36f4e3fee041
	void ClientBroadcastAchievement(int AchievementID, bool bSubAchievement);// 0x36f3e3fee041
	bool CheckIsInSmoke();// 0x36f2e3fee041
	void CacheComponents();// 0x36f1e3fee041
	void CacheCharacterType();// 0x36f0e3fee041
	void BroadcastOnEntersTearGasGrenade(bool bEnter);// 0x36efe3fee041
	void BroadcastOnEntersSmokeGrenade(bool bEnter);// 0x36eee3fee041
	void BroadcastGameHUDConfigQueue();// 0x36ede3fee041

--------------------------------
Class: DamageBlackborad
	Actor* DamageCauser;//[Offset: 0x0, Size: 0x8]
	enum HitGroup;//[Offset: 0x8, Size: 0x1]
	enum HitHeadPart;//[Offset: 0x9, Size: 0x1]
	Vector Momentum;//[Offset: 0xc, Size: 0xc]
	Vector HitLocation;//[Offset: 0x18, Size: 0xc]
	int64 FireCounter;//[Offset: 0x28, Size: 0x8]
	Actor* HitArmor;//[Offset: 0x30, Size: 0x8]
	FName HitBoneName;//[Offset: 0x38, Size: 0x8]
	bool bPenetrateArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float PenetrateArmorProbability;//[Offset: 0x44, Size: 0x4]
	float Damage;//[Offset: 0x48, Size: 0x4]
	int64 BulletID;//[Offset: 0x50, Size: 0x8]
	int DamageCauserType;//[Offset: 0x58, Size: 0x4]
	int8 bHitFace;//[Offset: 0x5c, Size: 0x1]
	FString BullentName;//[Offset: 0x68, Size: 0x10]
	uint32 BulletItemID;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: SGCharacterTestDamageComponent.ActorComponent.Object
	TextRenderComponent* TextRenderComp;//[Offset: 0xc0, Size: 0x8]
	FString WholeDamageInfo;//[Offset: 0x128, Size: 0x10]
	Controller* KillerController;//[Offset: 0x138, Size: 0x8]
	bool bShowDamageTextUpHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	bool bShowAvatarInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]
	FString[] InfoStrings;//[Offset: 0x148, Size: 0x10]
	FString LatestKillDamageInfo;//[Offset: 0x158, Size: 0x10]
	void ServerSendClientDamageInfo(const SGCharacter* DamageTaker, FString DamageInfoString, int Type);// 0x4154e3fee041
	void ServerGetLatestKillDamageInfo();// 0x4153e3fee041
	void OnCharacterDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x4152e3fee041
	void GetLatestKillDamageInfo();// 0x4151e3fee041
	void ClientRespLatestKillDamageInfo(FString KillDamageInfo);// 0x4150e3fee041
	void ClientPrintDeathDamageInfo(FString DeathDamageInfo);// 0x414fe3fee041
	void ClientNotifyBeHitedDamageInfo(FString BeHitedDamageInfo);// 0x414ee3fee041

--------------------------------
Class: DamageEventObject.Object
	class DamageType* DamageTypeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SGCharacterLocalDataComponent.ActorComponent.Object

--------------------------------
Class: SGInteractComponentBase.ActorComponent.Object
	SGCharacter* LocalControlledCharacter;//[Offset: 0xb8, Size: 0x8]
	UserWidgetPopInfo[] UserWidgetPopInfos;//[Offset: 0xc0, Size: 0x10]
	enum ActorFilterType;//[Offset: 0xd0, Size: 0x1]
	Actor*[] CheckTargets;//[Offset: 0xd8, Size: 0x10]
	bool bIsOwnerInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	void SetIsActorInteractable(bool bInteractable);// 0x460be3fee041
	void SetActorFilterType(enum Input);// 0x460ae3fee041
	void RemoveCheckTarget(Actor* InCheckTarget);// 0x4609e3fee041
	bool OnNotifyInteractEvent(SGCharacter* Character, Actor* Target, enum EventType, SGInteractComponentBase* SGInteractComponentBase);// 0x4608e3fee041
	bool IsTargetEnableInteract(Actor* Target);// 0x4607e3fee041
	void ClearCheckTarget();// 0x4606e3fee041
	void AddCheckTarget(Actor* InCheckTarget);// 0x4605e3fee041

--------------------------------
Class: UserWidgetPopInfo
	class SGInteractUserWidget* UserWidgetClass;//[Offset: 0x0, Size: 0x8]
	Object* DisplaySprite;//[Offset: 0x8, Size: 0x8]
	FText DisplayText;//[Offset: 0x10, Size: 0x18]
	FText UsingDisplayText;//[Offset: 0x28, Size: 0x18]
	Vector2D PopAnchors;//[Offset: 0x40, Size: 0x8]
	Vector2D PopPosition;//[Offset: 0x48, Size: 0x8]
	float InteractRequireTime;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: SGInteractUserWidget.SGUserWidget.UserWidget.Widget.Visual.Object
	Actor* InteractActor;//[Offset: 0x2c8, Size: 0x8]
	SGInteractComponentBase* InteractComponent;//[Offset: 0x2d0, Size: 0x8]
	float InteractRequireTime;//[Offset: 0x2d8, Size: 0x4]
	Object* DisplayIcon;//[Offset: 0x2e0, Size: 0x8]
	FText DisplayText;//[Offset: 0x2e8, Size: 0x18]
	FText UsingDisplayText;//[Offset: 0x300, Size: 0x18]
	void SetUsingDisplayText(FText InUsingDisplayText);// 0x4618e3fee041
	void SetPosition(Vector2D InPosition);// 0x4617e3fee041
	void SetInteractComponent(SGInteractComponentBase* InInteractComponent);// 0x4616e3fee041
	void SetInteractActor(Actor* Target);// 0x4615e3fee041
	void SetDisplayText(FText InDisplayText);// 0x4614e3fee041
	void SetDisplayIcon(Object* InDisplayIcon);// 0x4613e3fee041
	void SetAnchors(Anchors InAnchors);// 0x4612e3fee041
	void OnInteractActorDestroyed(Actor* InActor);// 0x4611e3fee041
	FText GetUsingDisplayText();// 0x4610e3fee041
	SGInteractComponentBase* GetInteractComponent();// 0x460fe3fee041
	Actor* GetInteractActor();// 0x460ee3fee041
	FText GetDisplayText();// 0x460de3fee041
	Object* GetDisplayIcon();// 0x460ce3fee041

--------------------------------
Class: SGUserWidget.UserWidget.Widget.Visual.Object
	FName[] ComponentTags;//[Offset: 0x288, Size: 0x10]
	int ZOrderOnHud;//[Offset: 0x298, Size: 0x4]
	bool bConditionalUpdateEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	bool bFrameUpdateEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 0x1]
	bool bDontRemoveWhileLoadMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29e, Size: 0x1]
	bool bShouldCheckVisibleWhenSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29f, Size: 0x1]
	UserWidget*[] DynamicContentPoolList;//[Offset: 0x2a0, Size: 0x10]
	bool bReceiveTouchEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	void VisibleStateChanged(bool bNewVisible);// 0x383ae3fee041
	bool SyncLoadIconByPath(FString IconPath, Image* TargetImage);// 0x3839e3fee041
	bool ShouldVisibleWhenSpectating();// 0x3838e3fee041
	bool ShouldVisibleWhenCompetitionGame();// 0x3837e3fee041
	bool ShouldVisible();// 0x3836e3fee041
	bool ShouldShowMouseCursor();// 0x3835e3fee041
	bool ShouldCheckVisibleWhenSpectating();// 0x3834e3fee041
	void SGInvalidate();// 0x3833e3fee041
	void SetVisibleForHidden(bool bVisible);// 0x3832e3fee041
	void SetVisible(bool bVisible);// 0x3831e3fee041
	void SetTickInterval(float Interval);// 0x3830e3fee041
	void SetSlotPostionXY(float X, float Y);// 0x382fe3fee041
	void SetReceiveInputTouchTemporary(bool bNewReceiveInputTouchTemporary);// 0x382ee3fee041
	void SetInputEnable(bool bEnable);// 0x382de3fee041
	void SetFrameUpdateEnable(bool bEnable);// 0x382ce3fee041
	void SetConditionalUpdateEnable(bool bEnable);// 0x382be3fee041
	void PostSetDown();// 0x382ae3fee041
	void PostInit();// 0x3829e3fee041
	void OnSGUserWidgetIconLoadComplete(int AsyncLoadId, Image* TargetImage, Object* icon);// 0x3828e3fee041
	void OnInputTouch();// 0x3827e3fee041
	void LoadGMCommandJsonConfig(FString Path, out <FString,GMCommandMap> CommandInfoMap);// 0x3826e3fee041
	bool IsInputEnable();// 0x3825e3fee041
	SGCharacter* GetViewedCharacter();// 0x3824e3fee041
	Pawn* GetVehicle();// 0x3823e3fee041
	enum GetUIMode();// 0x3822e3fee041
	float GetTickInterval();// 0x3821e3fee041
	SGPlayerState* GetPlayerState();// 0x3820e3fee041
	SGPlayerInput* GetPlayerInput();// 0x381fe3fee041
	SGPlayerController* GetPlayerController();// 0x381ee3fee041
	SGHUD* GetHUDOwner();// 0x381de3fee041
	SGGameState* GetGameState();// 0x381ce3fee041
	SGCharacter* GetCharacter();// 0x381be3fee041
	void FrameUpdate(float InDeltaTime);// 0x381ae3fee041
	void ConditionalUpdate(float InDeltaTime);// 0x3819e3fee041
	void ClearDynamicContentPoolList();// 0x3818e3fee041
	void ClearConditionalUpdateDeltaTime();// 0x3817e3fee041
	void CanvasDraw(float InDeltaTime, Canvas* InCanvas, Vector2D InCanvasCenter);// 0x3816e3fee041
	int AsyncLoadIconByPathWithTexOnMID(FString IconPath, Image* TargetImage, MaterialInstanceDynamic* Mid, FName MatTexParamName);// 0x3815e3fee041
	int AsyncLoadIconByPath(FString IconPath, Image* TargetImage);// 0x3814e3fee041

--------------------------------
Class: GMCommandMap
	<FString,FString> CommandMap;//[Offset: 0x0, Size: 0x50]
	<FString,FString> TooltipMap;//[Offset: 0x50, Size: 0x50]
	<FString,FString> OptionalParamsMap;//[Offset: 0xa0, Size: 0x50]

--------------------------------
Class: SGPlayerState.PlayerState.Info.Actor.Object
	bool bApplyZoneSvrInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	bool bHasInitNewPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 0x1]
	uint64 GID;//[Offset: 0x408, Size: 0x8]
	uint32 GOpenID;//[Offset: 0x410, Size: 0x4]
	bool OnReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1]
	uint64 roomid;//[Offset: 0x418, Size: 0x8]
	int TeamIndex;//[Offset: 0x420, Size: 0x4]
	FString TeamName;//[Offset: 0x428, Size: 0x10]
	int SquadIndex;//[Offset: 0x438, Size: 0x4]
	int SeasonID;//[Offset: 0x43c, Size: 0x4]
	bool bInitFromZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	int TeamType;//[Offset: 0x444, Size: 0x4]
	int game_mode;//[Offset: 0x448, Size: 0x4]
	int channelType;//[Offset: 0x44c, Size: 0x4]
	uint32 ranked_Level;//[Offset: 0x450, Size: 0x4]
	uint32 ranked_Score;//[Offset: 0x454, Size: 0x4]
	uint32 ranking;//[Offset: 0x458, Size: 0x4]
	uint32 pranking;//[Offset: 0x45c, Size: 0x4]
	uint32 ranked_rd;//[Offset: 0x460, Size: 0x4]
	uint32 rank;//[Offset: 0x464, Size: 0x4]
	uint32 CurSeason_ID;//[Offset: 0x468, Size: 0x4]
	uint32 Server_Season_ID;//[Offset: 0x46c, Size: 0x4]
	uint32 PrivilegeLevel;//[Offset: 0x470, Size: 0x4]
	uint32 ranked_status;//[Offset: 0x474, Size: 0x4]
	uint32 Area_ID;//[Offset: 0x478, Size: 0x4]
	uint32 PMC_KillCountByPMC;//[Offset: 0x47c, Size: 0x4]
	uint32 SCAV_KillCountByPMC;//[Offset: 0x480, Size: 0x4]
	uint32 DeathCountByPMC;//[Offset: 0x484, Size: 0x4]
	uint32 cur_title_star_num;//[Offset: 0x488, Size: 0x4]
	int PlatId;//[Offset: 0x48c, Size: 0x4]
	uint32 bIsSingle;//[Offset: 0x490, Size: 0x4]
	uint32 AutoMatch;//[Offset: 0x494, Size: 0x4]
	uint32 PlayerLevel;//[Offset: 0x498, Size: 0x4]
	FString ZonePlayerName;//[Offset: 0x4a0, Size: 0x10]
	enum CharacterSex;//[Offset: 0x4b0, Size: 0x1]
	uint32 Mentor_Identity;//[Offset: 0x4b4, Size: 0x4]
	uint32 Mentor_Gid;//[Offset: 0x4b8, Size: 0x4]
	int[] Student_gid_List;//[Offset: 0x4c0, Size: 0x10]
	FString Mentor_Name;//[Offset: 0x4d0, Size: 0x10]
	FString[] Student_Name_List;//[Offset: 0x4e0, Size: 0x10]
	int TitleID;//[Offset: 0x4f0, Size: 0x4]
	int HeadBoxID;//[Offset: 0x4f4, Size: 0x4]
	uint32 GameActivityId;//[Offset: 0x4f8, Size: 0x4]
	float EnterGameLeftTime;//[Offset: 0x4fc, Size: 0x4]
	float EnterGameTime;//[Offset: 0x500, Size: 0x4]
	uint32 MapUnlockId;//[Offset: 0x504, Size: 0x4]
	int[] TakeOutInspectionLootPointIDArray;//[Offset: 0x508, Size: 0x10]
	int[] TakeInInspectionLootPointIDArray;//[Offset: 0x518, Size: 0x10]
	<int,GuranteedItemLimitInfo> GuranteedPool;//[Offset: 0x528, Size: 0x50]
	FString[] ClientXIDArray;//[Offset: 0x578, Size: 0x10]
	enum IdentityType;//[Offset: 0x588, Size: 0x1]
	class ActorComponent[] ComponentClasses;//[Offset: 0x590, Size: 0x10]
	class ActorComponent[] ComponentClassesAdditional;//[Offset: 0x5a0, Size: 0x10]
	class SGPlayerState* TemplateClass;//[Offset: 0x5b0, Size: 0x8]
	bool bIsReconnectSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	bool bCancelReconnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 0x1]
	FString KillByEnemy;//[Offset: 0x5c8, Size: 0x10]
	int TotalDamageToEnemy;//[Offset: 0x5d8, Size: 0x4]
	int DamageToEnemyHead;//[Offset: 0x5dc, Size: 0x4]
	int DamageToEnemyChest;//[Offset: 0x5e0, Size: 0x4]
	int DamageToEnemyStomach;//[Offset: 0x5e4, Size: 0x4]
	int DamageToEnemyLeftArm;//[Offset: 0x5e8, Size: 0x4]
	int DamageToEnemyRightArm;//[Offset: 0x5ec, Size: 0x4]
	int DamageToEnemyLeg;//[Offset: 0x5f0, Size: 0x4]
	int TotalHitTimes;//[Offset: 0x5f4, Size: 0x4]
	int HitTimesToEnemyHead;//[Offset: 0x5f8, Size: 0x4]
	int HitTimesToEnemyChest;//[Offset: 0x5fc, Size: 0x4]
	int HitTimesToEnemyStomach;//[Offset: 0x600, Size: 0x4]
	int HitTimesToEnemyLeftArm;//[Offset: 0x604, Size: 0x4]
	int HitTimesToEnemyRightArm;//[Offset: 0x608, Size: 0x4]
	int HitTimesToEnemyLeg;//[Offset: 0x60c, Size: 0x4]
	int TotalAmmoCost;//[Offset: 0x610, Size: 0x4]
	int EnemyArmorDamageReduceAmount;//[Offset: 0x614, Size: 0x4]
	enum DeathType;//[Offset: 0x618, Size: 0x1]
	int KillEnemyCount;//[Offset: 0x61c, Size: 0x4]
	int TotalGetDamage;//[Offset: 0x620, Size: 0x4]
	int TotalGetDamageTimes;//[Offset: 0x624, Size: 0x4]
	int HeadGetDamage;//[Offset: 0x628, Size: 0x4]
	int ChestGetDamage;//[Offset: 0x62c, Size: 0x4]
	int StomachGetDamage;//[Offset: 0x630, Size: 0x4]
	int LeftArmGetDamage;//[Offset: 0x634, Size: 0x4]
	int RightArmGetDamage;//[Offset: 0x638, Size: 0x4]
	int LegGetDamage;//[Offset: 0x63c, Size: 0x4]
	int MyselfArmorDamageReduceAmount;//[Offset: 0x640, Size: 0x4]
	SGCharacter* LastAimEnemy;//[Offset: 0x648, Size: 0x8]
	float LastAimEnemyTime;//[Offset: 0x650, Size: 0x4]
	int[] ChatVoiceIDs;//[Offset: 0x658, Size: 0x10]
	int[] GestureIDs;//[Offset: 0x668, Size: 0x10]
	int[] PlayerVoiceIDs;//[Offset: 0x678, Size: 0x10]
	FString EscapePointName;//[Offset: 0x688, Size: 0x10]
	int KillPlayerPMC;//[Offset: 0x698, Size: 0x4]
	int KillPlayerScav;//[Offset: 0x69c, Size: 0x4]
	int KillTeammate;//[Offset: 0x6a0, Size: 0x4]
	int KillAIScav;//[Offset: 0x6a4, Size: 0x4]
	int KillAIScavBoss;//[Offset: 0x6a8, Size: 0x4]
	int KillAIPMC;//[Offset: 0x6ac, Size: 0x4]
	int KillTotalCount;//[Offset: 0x6b0, Size: 0x4]
	int KillAIThemeBOSS;//[Offset: 0x6b4, Size: 0x4]
	bool IsOpenMic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1]
	int SignType;//[Offset: 0x6bc, Size: 0x4]
	uint32 NetOutLoss;//[Offset: 0x6c0, Size: 0x4]
	uint32 NetInLoss;//[Offset: 0x6c4, Size: 0x4]
	uint32 NetInRate;//[Offset: 0x6c8, Size: 0x4]
	uint32 NetOutRate;//[Offset: 0x6cc, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x6d0, Size: 0x4]
	uint32 NetOutTotalPackets;//[Offset: 0x6d4, Size: 0x4]
	uint32 NetTotalOutLoss;//[Offset: 0x6d8, Size: 0x4]
	uint32 NetTotalInLoss;//[Offset: 0x6dc, Size: 0x4]
	int TakeInValue;//[Offset: 0x6e0, Size: 0x4]
	int TakeOutTotalValue;//[Offset: 0x6e4, Size: 0x4]
	int TakeOutValue_Self;//[Offset: 0x6e8, Size: 0x4]
	int TakeOutValue_Loot;//[Offset: 0x6ec, Size: 0x4]
	int TakeOutValue_PMC;//[Offset: 0x6f0, Size: 0x4]
	int TakeOutValue_SCAV;//[Offset: 0x6f4, Size: 0x4]
	int TakeOutValue_AISCAV;//[Offset: 0x6f8, Size: 0x4]
	int TakeOutValue_AIBOSS;//[Offset: 0x6fc, Size: 0x4]
	int TakeOutValue_AIPMC;//[Offset: 0x700, Size: 0x4]
	int TakeOutValue_Other;//[Offset: 0x704, Size: 0x4]
	int TakeOutValue_AIFollower;//[Offset: 0x708, Size: 0x4]
	int TakeOutValue_AIElit;//[Offset: 0x70c, Size: 0x4]
	int TakeOutValue_BOSS;//[Offset: 0x710, Size: 0x4]
	int TakeOutValue_QuestEffectGive;//[Offset: 0x714, Size: 0x4]
	int TakeOutValue_GMCheat;//[Offset: 0x718, Size: 0x4]
	void UpdateServerOpenMicState(bool bOpen);// 0x4d05e3fee041
	void UpdatePing(float InPing);// 0x4d04e3fee041
	void UpdateOpenMicState(bool bOpen);// 0x4d03e3fee041
	void SetZonePlayerName(FString NewName);// 0x4d02e3fee041
	void SetTeamTypeForTest(int InTeamType);// 0x4d01e3fee041
	void SetSquadID(int ID);// 0x4d00e3fee041
	void SetSignType(int Stype);// 0x4cffe3fee041
	void ServerSetSignType(int Stype);// 0x4cfee3fee041
	void ServerMarkLastCameraAimTime();// 0x4cfde3fee041
	void ServerClearLastCameraAimTime();// 0x4cfce3fee041
	void OnReq_RoomID();// 0x4cfbe3fee041
	void OnRep_PlayerVoiceIDs();// 0x4cfae3fee041
	void OnRep_PlayerIdentityType();// 0x4cf9e3fee041
	void OnRep_PlayerGestureIDs();// 0x4cf8e3fee041
	void OnRep_ChatVoiceIDs();// 0x4cf7e3fee041
	void OnPostDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x4cf6e3fee041
	void OnCharacterReadyToPlay(SGCharacter* Character);// 0x4cf5e3fee041
	bool IsReconnectSpawn();// 0x4cf4e3fee041
	bool IsOBPlayer();// 0x4cf3e3fee041
	bool IsCancelReconnection();// 0x4cf2e3fee041
	int GetSignType();// 0x4cf1e3fee041
	enum GetPlayerTeamType();// 0x4cf0e3fee041
	void ClientBroadcastOnGameHUD(BroadcastOnGameHUDConfig GameHUDConfig);// 0x4cefe3fee041
	void BroadcastGameHUDConfigQueue();// 0x4ceee3fee041

--------------------------------
Class: GuranteedItemLimitInfo
	int GuranteedTotalNum;//[Offset: 0x0, Size: 0x4]
	int CurGuranteedProgress;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BroadcastOnGameHUDConfig
	enum ReportType;//[Offset: 0x0, Size: 0x1]
	int OptionalMessageID;//[Offset: 0x4, Size: 0x4]
	FText OptionalText;//[Offset: 0x8, Size: 0x18]
	int CheckServerTimeIndex;//[Offset: 0x20, Size: 0x4]
	bool bCheckOutOfTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	float BroadcastServerTime;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: SGPlayerInput.PlayerInput.Object
	bool LeftFireBtnPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	bool RightFireBtnPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 0x1]
	float DefaultSensitivitySettingScale;//[Offset: 0x44c, Size: 0x4]
	float DefaultSensitivitySettingScaleNormal;//[Offset: 0x450, Size: 0x4]
	float DefaultSensitivitySettingScaleOnFire;//[Offset: 0x454, Size: 0x4]
	float DefaultSensitivitySettingScaleGyro;//[Offset: 0x458, Size: 0x4]
	CurveFloat* DefaultSensitivityCurveNormal;//[Offset: 0x460, Size: 0x8]
	CurveFloat* DefaultSensitivityCurveOnFire;//[Offset: 0x468, Size: 0x8]
	CurveFloat* DefaultSensitivityCurveGyro;//[Offset: 0x470, Size: 0x8]
	MagnificationSensitivitySetting CustomSensitivitySetting;//[Offset: 0x478, Size: 0xf0]
	void SetUserSensitivitySettingScale(float Val, bool Save);// 0x4ae5e3fee041
	void SetDefaultSensitivitySettingScaleOnFire(float ValueFix);// 0x4ae4e3fee041
	void SetDefaultSensitivitySettingScaleNormal(float ValueFix);// 0x4ae3e3fee041
	void SetDefaultSensitivitySettingScaleGyro(float ValueFix);// 0x4ae2e3fee041
	void SetDefaultSensitivitySettingScale(float ValueFix);// 0x4ae1e3fee041
	void SetCustomSensitivitySetting(out const MagnificationSensitivitySetting SensitivitySetting, bool Save);// 0x4ae0e3fee041
	void SetAdvancedBind(FName BindName, FString Command, byte Control);// 0x4adfe3fee041
	Vector2D GetMovementAccel();// 0x4adee3fee041
	byte GetJoyStickMode();// 0x4adde3fee041
	void GetCustomSensitivitySetting(out MagnificationSensitivitySetting OutSensitivitySetting);// 0x4adce3fee041
	void AddBtnPointIndex(byte PointIndexType, int RPointIndex);// 0x4adbe3fee041

--------------------------------
Class: MagnificationSensitivitySetting
	<enum,float> SensitivityNormal;//[Offset: 0x0, Size: 0x50]
	<enum,float> SensitivityOnFire;//[Offset: 0x50, Size: 0x50]
	<enum,float> SensitivityGyro;//[Offset: 0xa0, Size: 0x50]

--------------------------------
Class: SGHUD.HUD.Actor.Object
	class SGUserWidget[] ComponentClasses;//[Offset: 0x3e8, Size: 0x10]
	class SGUserWidget[] LoadedComponentClasses;//[Offset: 0x3f8, Size: 0x10]
	class SGUserWidget[] ComponentClassesAdditional;//[Offset: 0x408, Size: 0x10]
	class SGUserWidget[] LoadedComponentClassesAdditional;//[Offset: 0x418, Size: 0x10]
	class SGUserWidget[] ComponentClassesDynamic;//[Offset: 0x428, Size: 0x10]
	SGUserWidget*[] Components;//[Offset: 0x438, Size: 0x10]
	class SGHUD* TemplateClass;//[Offset: 0x448, Size: 0x8]
	class SGUserWidget[] DebugAppInfoClasses;//[Offset: 0x450, Size: 0x10]
	PendingLoadHUDClassInfo[] PendingLoadHUDClassInfoList;//[Offset: 0x460, Size: 0x10]
	SGUserWidget* DebugAppInfoWidget;//[Offset: 0x470, Size: 0x8]
	SafeZoneCache SafeZoneCache;//[Offset: 0x47c, Size: 0x10]
	bool bForceEnableSafeZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1]
	int CurrentCmdIndex;//[Offset: 0x4a8, Size: 0x4]
	SGHUDShakeEvents* HUDShakeEvents;//[Offset: 0x4b0, Size: 0x8]
	void ToggleGM();// 0x45bfe3fee041
	void PreviousDebugCmd();// 0x45bee3fee041
	void OnLoadCompleted_HUDClass(SoftObjectPath Path, int CurrentPendingID);// 0x45bde3fee041
	void NextDebugCmd();// 0x45bce3fee041
	void InitDebugCmds();// 0x45bbe3fee041
	bool HasSafeZone(Canvas* InCanvas);// 0x45bae3fee041
	SGUserWidget* GetUserWidget(class Object StaticClass);// 0x45b9e3fee041
	void EnableSafeZone(Canvas* InCanvas, bool bEnable);// 0x45b8e3fee041
	void DumpHUDDetails();// 0x45b7e3fee041
	void DestroyHUD(out FString ClassName);// 0x45b6e3fee041
	void DestroyAllComponentClasses();// 0x45b5e3fee041
	void DebugWeapon(int DebugFlag);// 0x45b4e3fee041
	void DebugSelfMovement(bool bDebugSelfMovement);// 0x45b3e3fee041
	void DebugPlayerState(bool bDebugPlayerState);// 0x45b2e3fee041
	void DebugLocation();// 0x45b1e3fee041
	void DebugInput();// 0x45b0e3fee041
	void DebugDamage(bool bDebugDamage);// 0x45afe3fee041
	void DebugCamera(bool bDebugCamera);// 0x45aee3fee041
	void DebugBreath(bool bDebugBreath);// 0x45ade3fee041
	void DebugAttributeSets_Movement(bool bDebugAttributeSets_Movement);// 0x45ace3fee041
	void DebugAppInfo();// 0x45abe3fee041
	void DebugAnimationCurve(bool bDebugAnimationCurve);// 0x45aae3fee041
	void DebugAllMovement(bool bDebugAllMovement);// 0x45a9e3fee041
	void CreateHUD(out FString ClassName);// 0x45a8e3fee041
	void ClearDebugCanvas();// 0x45a7e3fee041
	void CallCreateComponents();// 0x45a6e3fee041

--------------------------------
Class: PendingLoadHUDClassInfo
	class SGUserWidget* Class;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SafeZoneCache
	int SafeZonePadX;//[Offset: 0x0, Size: 0x4]
	int SafeZonePadY;//[Offset: 0x4, Size: 0x4]
	int SafeZonePadEX;//[Offset: 0x8, Size: 0x4]
	int SafeZonePadEY;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SGHUDShakeEvents.SGGameInstanceComponent.Object
	SGHUDShakeCanvasPanel*[] ShakePanels;//[Offset: 0x38, Size: 0x10]
	delegate SetUseHUDShakeEvent;//[Offset: 0x48, Size: 0x10]
	void SetUseHUDShake(bool bInUseHUDShake);// 0x45c4e3fee041
	bool GetUseHUDShakeCVar();// 0x45c3e3fee041
	bool GetUseHUDShake();// 0x45c2e3fee041
	SGHUDShakeEvents* GetSGHUDShakeEvents(Object* InWorldContextObject);// 0x45c1e3fee041

--------------------------------
Class: SGGameInstanceComponent.Object

--------------------------------
Class: SGHUDShakeCanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	SGCharacter* CachedCharacter;//[Offset: 0x3b8, Size: 0x8]
	SGHUDShakeEvents* CachedShakeEvents;//[Offset: 0x3c0, Size: 0x8]
	HUDShakeConfig* HUDShakeConfig;//[Offset: 0x400, Size: 0x8]
	<CanvasPanel*,Vector> HUDShakePanels;//[Offset: 0x408, Size: 0x50]
	<CanvasPanel*,enum> HUDShakePanelsAndTags;//[Offset: 0x458, Size: 0x50]
	Vector2D[] HUDShakePanelsScales;//[Offset: 0x4a8, Size: 0x10]
	void CharacterDie(SGCharacter* DieCharacter);// 0x45c0e3fee041

--------------------------------
Class: HUDShakeConfig.DataAsset.Object
	float HUDShakeDamping;//[Offset: 0x30, Size: 0x4]
	Vector MaxOffset;//[Offset: 0x34, Size: 0xc]
	Vector2D HeavyWalkShakeScale;//[Offset: 0x40, Size: 0x8]
	Vector2D HeavyCrouchShakeScale;//[Offset: 0x48, Size: 0x8]
	float HeavyCrouchTime;//[Offset: 0x50, Size: 0x4]
	float HeavyCrouchDownProportion;//[Offset: 0x54, Size: 0x4]
	Vector2D HeavyProneShakeScale;//[Offset: 0x58, Size: 0x8]
	float HeavyProneTime;//[Offset: 0x60, Size: 0x4]
	float HeavyProneDownProportion;//[Offset: 0x64, Size: 0x4]
	Vector2D HeavyStandUpShakeScale;//[Offset: 0x68, Size: 0x8]
	float HeavyStandUpTime;//[Offset: 0x70, Size: 0x4]
	Vector2D RunShakeScale;//[Offset: 0x74, Size: 0x8]
	float RunShakeFadeInTime;//[Offset: 0x7c, Size: 0x4]
	float RunShakePeroid;//[Offset: 0x80, Size: 0x4]
	float RunRollOffset;//[Offset: 0x84, Size: 0x4]
	Vector2D JumpShakeScale;//[Offset: 0x88, Size: 0x8]
	float JumpTime;//[Offset: 0x90, Size: 0x4]
	float LandedTime;//[Offset: 0x94, Size: 0x4]
	Vector2D LeanShakeScale;//[Offset: 0x98, Size: 0x8]
	Vector2D RotateViewShakeScale;//[Offset: 0xa0, Size: 0x8]
	float RotateViewShakeDamping;//[Offset: 0xa8, Size: 0x4]
	Vector2D DartleFireScale;//[Offset: 0xac, Size: 0x8]
	Vector2D SingleFireShakeScale;//[Offset: 0xb4, Size: 0x8]
	<enum,float> RecoilShakeScales;//[Offset: 0xc0, Size: 0x50]
	Vector2D MeleeShakeScale;//[Offset: 0x110, Size: 0x8]
	float MeleeShakeDamping;//[Offset: 0x118, Size: 0x4]
	Vector2D UseItemShakeScale;//[Offset: 0x11c, Size: 0x8]
	Vector2D CheckMagazineShakeScale;//[Offset: 0x124, Size: 0x8]
	float CheckMagazineShakeDamping;//[Offset: 0x12c, Size: 0x4]
	Vector2D AttachMagazineShakeScale;//[Offset: 0x130, Size: 0x8]
	float AttachMagazineShakeDamping;//[Offset: 0x138, Size: 0x4]
	float AttachMagazineTime;//[Offset: 0x13c, Size: 0x4]
	Vector2D ChangeClipShakeScale;//[Offset: 0x140, Size: 0x8]
	float ChangeClipShakeDamping;//[Offset: 0x148, Size: 0x4]
	Vector TakeDamageShakeScale;//[Offset: 0x14c, Size: 0xc]
	float TakeDamageTime;//[Offset: 0x158, Size: 0x4]
	Vector2D ExplodeShakeScale;//[Offset: 0x15c, Size: 0x8]
	float ExplodeShakeSmallMultiplier;//[Offset: 0x164, Size: 0x4]
	float ExplodeShakeDistanceMultiplier;//[Offset: 0x168, Size: 0x4]
	float ExplodeShakeFurthestDistance;//[Offset: 0x16c, Size: 0x4]
	float ExplodeTime;//[Offset: 0x170, Size: 0x4]
	int ExplodeCount;//[Offset: 0x174, Size: 0x4]
	float ExplodeViewAngle;//[Offset: 0x178, Size: 0x4]

--------------------------------
Class: SGGameState.GameState.GameStateBase.Info.Actor.Object
	bool bDamageHurtsHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	uint64 roomid;//[Offset: 0x398, Size: 0x8]
	uint32 Server_Season_ID;//[Offset: 0x3a0, Size: 0x4]
	class ActorComponent[] ComponentClasses;//[Offset: 0x3a8, Size: 0x10]
	class ActorComponent[] ComponentClassesAdditional;//[Offset: 0x3b8, Size: 0x10]
	class SGGameState* TemplateClass;//[Offset: 0x3c8, Size: 0x8]
	Timespan ServerRealTimeDelta;//[Offset: 0x3d0, Size: 0x8]
	Timespan ServerRealTimeDeltaAdjust;//[Offset: 0x3d8, Size: 0x8]
	DateTime ReplicateServerTime;//[Offset: 0x3e8, Size: 0x8]
	class ActorComponent[] DebugCompInfoClasses;//[Offset: 0x400, Size: 0x10]
	void OnRep_ReplicateServerTime();// 0x4469e3fee041
	void OnLoadCompleted_DebugCompClass(SoftObjectPath Path);// 0x4468e3fee041
	void OnEscapeReport(int EscapePointID, bool IsGlobal, bool bIsOpen, const PlayerState*[] TriggerPlayerStates, const PlayerState*[] InVolumePlayerStates);// 0x4467e3fee041
	void OnApplicationWillDeactive();// 0x4466e3fee041
	void OnApplicationHasReactive();// 0x4465e3fee041
	int GetSubModeID();// 0x4464e3fee041
	DateTime GetServerNowTime();// 0x4463e3fee041
	int GetPlayerCountByTeamType(enum InTeamType);// 0x4462e3fee041
	int GetMapID();// 0x4461e3fee041
	int GetMainModeID();// 0x4460e3fee041
	int GetDifficulty();// 0x445fe3fee041
	void ClientEscapeReport(int EscapePointID, bool IsGlobal, bool bIsOpen, out const PlayerController*[] TriggerPlayerControllers, out const PlayerController*[] InVolumePlayerControllers);// 0x445ee3fee041

--------------------------------
Class: SGWeapon.SGInventory.Actor.Object
	enum WeaponType;//[Offset: 0x708, Size: 0x1]
	enum GunWeaponSubType;//[Offset: 0x709, Size: 0x1]
	enum MeleeWeaponSubType;//[Offset: 0x70a, Size: 0x1]
	bool bThrowableWeaponHasFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70b, Size: 0x1]
	SGWeaponViewEffectComponent* CurrentWeaponViewEffectComp;//[Offset: 0x710, Size: 0x8]
	delegate OnProcessWeaponInnerEvent;//[Offset: 0x720, Size: 0x10]
	delegate OnFinishAssemble;//[Offset: 0x730, Size: 0x10]
	delegate ChangeWeaponOwner;//[Offset: 0x740, Size: 0x10]
	delegate OnWeaponAdapterAssembled;//[Offset: 0x750, Size: 0x10]
	delegate OnWeaponAdapterDisassembled;//[Offset: 0x760, Size: 0x10]
	delegate OnMeleeWeaponCanReenterFire;//[Offset: 0x770, Size: 0x10]
	delegate OnMeleeWeaponCanNextPhase;//[Offset: 0x780, Size: 0x10]
	delegate OnMeleeWeaponCanNotNextPhase;//[Offset: 0x790, Size: 0x10]
	delegate OnAnimationSetLoaded;//[Offset: 0x7a0, Size: 0x10]
	delegate OnWeaponMergeFinished;//[Offset: 0x7b0, Size: 0x10]
	delegate OnAllWeaponMeshLoaded;//[Offset: 0x7c0, Size: 0x10]
	delegate OnSightListChanged;//[Offset: 0x7d0, Size: 0x10]
	delegate OnWeaponRemoved;//[Offset: 0x7e0, Size: 0x10]
	delegate OnWeaponAttachedToHand;//[Offset: 0x7f0, Size: 0x10]
	delegate OnWeaponDetachedFromHand;//[Offset: 0x800, Size: 0x10]
	delegate OnWeaponPlayedMontage;//[Offset: 0x810, Size: 0x10]
	delegate OnZoomProgressChanged;//[Offset: 0x820, Size: 0x10]
	<uint32> NeedRecoverTickComponentsSet;//[Offset: 0x830, Size: 0x50]
	Character*[] EnemyCharacters;//[Offset: 0x888, Size: 0x10]
	float EngageAngle;//[Offset: 0x898, Size: 0x4]
	SGWeaponAssembleComponent* WeaponAssembleComp;//[Offset: 0x8a0, Size: 0x8]
	SGWeaponMeshComponent* WeaponMeshComp;//[Offset: 0x8a8, Size: 0x8]
	SGWeaponMergeComponent* WeaponMergeComp;//[Offset: 0x8b0, Size: 0x8]
	SGWeaponZoomComponent* WeaponZoomComp;//[Offset: 0x8b8, Size: 0x8]
	SGWeaponFiringComponent* WeaponFiringComp;//[Offset: 0x8c0, Size: 0x8]
	SGWeaponImpactComponent* WeaponImpactComp;//[Offset: 0x8c8, Size: 0x8]
	SGWeaponRecoilComponent* WeaponRecoilComp;//[Offset: 0x8d0, Size: 0x8]
	SGUAMWeaponAnimationComponent* WeaponAnimationComp;//[Offset: 0x8d8, Size: 0x8]
	SGWeaponAppearanceComponent* WeaponAppearanceComp;//[Offset: 0x8e0, Size: 0x8]
	SGWeaponMovementComponent* WeaponMovementComp;//[Offset: 0x8e8, Size: 0x8]
	SGWeaponBoreComponent* WeaponBoreComp;//[Offset: 0x8f0, Size: 0x8]
	SGWeaponFireIntervalComponent* WeaponFireIntervalComp;//[Offset: 0x8f8, Size: 0x8]
	SGGunSoundComponent* GunSoundComp;//[Offset: 0x900, Size: 0x8]
	SGUAMWeaponModifyBoneComponent* ModifyBoneComp;//[Offset: 0x908, Size: 0x8]
	SGWeaponCameraComponent* WeaponCameraComp;//[Offset: 0x910, Size: 0x8]
	SGWeaponSpreadComponent* WeaponSpreadComp;//[Offset: 0x918, Size: 0x8]
	AbilitySystemComponent* WeaponASC;//[Offset: 0x920, Size: 0x8]
	void RefreshAllComponents();// 0x4f75e3fee041
	SGWeaponZoomComponent* GetWeaponZoomComp();// 0x4f74e3fee041
	enum GetWeaponType();// 0x4f73e3fee041
	SGWeaponSpreadComponent* GetWeaponSpreadComp();// 0x4f72e3fee041
	SGWeaponRecoilComponent* GetWeaponRecoilComp();// 0x4f71e3fee041
	SGWeaponMovementComponent* GetWeaponMovementComp();// 0x4f70e3fee041
	SGWeaponMeshComponent* GetWeaponMeshComp();// 0x4f6fe3fee041
	SGWeaponMergeComponent* GetWeaponMergeComp();// 0x4f6ee3fee041
	SGWeaponImpactComponent* GetWeaponImpactComp();// 0x4f6de3fee041
	SGWeaponFiringComponent* GetWeaponFiringComp();// 0x4f6ce3fee041
	SGWeaponFireIntervalComponent* GetWeaponFireIntervalComp();// 0x4f6be3fee041
	SGWeaponCameraComponent* GetWeaponCameraComp();// 0x4f6ae3fee041
	SGWeaponBoreComponent* GetWeaponBoreComp();// 0x4f69e3fee041
	SGWeaponAssembleComponent* GetWeaponAssembleComp();// 0x4f68e3fee041
	SGWeaponAppearanceComponent* GetWeaponAppearanceComp();// 0x4f67e3fee041
	SGUAMWeaponAnimationComponent* GetWeaponAnimationComp();// 0x4f66e3fee041
	SGUAMWeaponModifyBoneComponent* GetModifyBoneComp();// 0x4f65e3fee041
	enum GetMeleeWeaponSubType();// 0x4f64e3fee041
	enum GetGunWeaponSubType();// 0x4f63e3fee041
	SGGunSoundComponent* GetGunSoundComp();// 0x4f62e3fee041

--------------------------------
Class: SGWeaponZoomComponent.SGWeaponCustomTickComponent.ActorComponent.Object
	float WeaponZoomTime;//[Offset: 0xd0, Size: 0x4]
	float WeaponUnZoomTime;//[Offset: 0xd4, Size: 0x4]
	float ScopeAdsScale;//[Offset: 0xd8, Size: 0x4]
	FName CameraBaseCharacterSocket;//[Offset: 0xdc, Size: 0x8]
	FName AimLimitPlaneSocketName;//[Offset: 0xe4, Size: 0x8]
	bool bOnlyAdsOnSupport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	CurveVector* Curve_ZoominOffset;//[Offset: 0xf0, Size: 0x8]
	CurveVector* Curve_ZoominRotation;//[Offset: 0xf8, Size: 0x8]
	CurveVector* Curve_ZoomOutOffset;//[Offset: 0x100, Size: 0x8]
	CurveVector* Curve_ZoomOutRotation;//[Offset: 0x108, Size: 0x8]
	AnimSequence* ZoomInAnimation_GripBased;//[Offset: 0x110, Size: 0x28]
	AnimSequence* ZoomOutAnimation_GripBased;//[Offset: 0x138, Size: 0x28]
	float WeaponZoomAnimTime;//[Offset: 0x160, Size: 0x4]
	float WeaponUnZoomAnimTime;//[Offset: 0x164, Size: 0x4]
	Vector ZoomOffset_Location_3P;//[Offset: 0x178, Size: 0xc]
	bool bEnableZoomFOVOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	float WeaponZoomFOVBlendTime;//[Offset: 0x188, Size: 0x4]
	float WeaponUnZoomFOVBlendTime;//[Offset: 0x18c, Size: 0x4]
	float WeaponZoomFOVBlendDelay;//[Offset: 0x190, Size: 0x4]
	float WeaponUnZoomFOVBlendDelay;//[Offset: 0x194, Size: 0x4]
	CurveFloat* Curve_SwitchScope;//[Offset: 0x198, Size: 0x8]
	WeaponSwitchScopeParams[] SwitchScopeParams;//[Offset: 0x1a0, Size: 0x10]
	Rotator MaxRecoilRotator;//[Offset: 0x1b0, Size: 0xc]
	float RecoilPitchScale;//[Offset: 0x1bc, Size: 0x4]
	float RecoilYawScale;//[Offset: 0x1c0, Size: 0x4]
	float RecoilRollScale;//[Offset: 0x1c4, Size: 0x4]
	float GunRotSpeed;//[Offset: 0x1c8, Size: 0x4]
	float ErgonomicsBase;//[Offset: 0x1cc, Size: 0x4]
	CurveFloat* ErgADSTimeScaleCurve;//[Offset: 0x1d0, Size: 0x8]
	CurveFloat* ErgEnergyCostScaleCurve;//[Offset: 0x1d8, Size: 0x8]
	CurveFloat* ErgBreathScaleCurve;//[Offset: 0x1e0, Size: 0x8]
	bool bSupportShoulderZoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	enum ZoomingType;//[Offset: 0x1e9, Size: 0x1]
	float AimScale;//[Offset: 0x1ec, Size: 0x4]
	bool bCachedZoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	float AfterFiringDelta;//[Offset: 0x214, Size: 0x4]
	SGInventory* LastSight;//[Offset: 0x240, Size: 0x8]
	SGInventory* LastSight_OnCurrentSightChangedInternalUse;//[Offset: 0x248, Size: 0x8]
	float ZoomingCheckThreshold;//[Offset: 0x260, Size: 0x4]
	void SetZoomFOVApplied(bool bNewZoomFOVApplied);// 0x4f12e3fee041
	void SetIsFullyUnzoomed(bool bInIsFullyUnzoomed);// 0x4f11e3fee041
	void ServerSendAntiHackZoomEvent(byte AntiHackZoomEventType, float ClientTimeStamp);// 0x4f10e3fee041
	void OnRep_ZoomingType();// 0x4f0fe3fee041
	void OnOBSpectateStateChange(enum OBSpectateState);// 0x4f0ee3fee041
	void OnFinishSwitchScope();// 0x4f0de3fee041
	void OnFinishAssemble();// 0x4f0ce3fee041
	void OnCurrentSightChanged();// 0x4f0be3fee041
	void OnAllWeaponMeshLoaded();// 0x4f0ae3fee041
	bool IsZooming(bool bCheckProgress);// 0x4f09e3fee041
	AnimSequence* GetZoomOutAnimation();// 0x4f08e3fee041
	AnimSequence* GetZoomInAnimation();// 0x4f07e3fee041

--------------------------------
Class: SGWeaponCustomTickComponent.ActorComponent.Object
	void OnStartSpectating(SGCharacter* BeSpectatedPawn);// 0x4f06e3fee041
	void OnOwnerCharSetNewOwner(Actor* NewOwner);// 0x4f05e3fee041
	void OnOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x4f04e3fee041
	void On1PGamePlayerCurrentWeaponChanged(SGInventory* Weapon);// 0x4f03e3fee041

--------------------------------
Class: WeaponSwitchScopeParams
	enum AnimOffsetType;//[Offset: 0x0, Size: 0x1]
	byte Axis;//[Offset: 0x1, Size: 0x1]
	float MinValue;//[Offset: 0x4, Size: 0x4]
	float MaxValue;//[Offset: 0x8, Size: 0x4]
	CurveFloat* Curve_ScaleInterp;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SGWeaponSpreadComponent.SGWeaponCustomTickComponent.ActorComponent.Object
	float SpreadShowScale;//[Offset: 0xd0, Size: 0x4]
	float NormalShotSpreadRatio;//[Offset: 0xd4, Size: 0x4]
	float SpreadInterpSpeed;//[Offset: 0xd8, Size: 0x4]
	SGWeaponSpreadParams SpreadParams;//[Offset: 0xdc, Size: 0x28]
	SGWeaponSpreadParams SpreadParams_ShoulderZoom;//[Offset: 0x104, Size: 0x28]
	CurveFloat* SpreadRadiusPDF;//[Offset: 0x130, Size: 0x8]
	CurveFloat* SpreadAnglePDF;//[Offset: 0x138, Size: 0x8]
	CurveFloat* SpreadRadiusScaleCurve;//[Offset: 0x140, Size: 0x8]
	float SpreadScaleForArmBreak;//[Offset: 0x148, Size: 0x4]
	float MinSpreadValueWhenJump;//[Offset: 0x14c, Size: 0x4]
	SGWeaponSpreadParams BuckshotSpreadParams;//[Offset: 0x150, Size: 0x28]
	SGWeaponMovingRatioParams BuckshotSpreadAccuracyRatios;//[Offset: 0x178, Size: 0x30]
	CurveFloat* BuckshotSpreadRadiusPDF;//[Offset: 0x1a8, Size: 0x8]
	CurveFloat* BuckshotSpreadAnglePDF;//[Offset: 0x1b0, Size: 0x8]
	float InnerRadiusScaleWhenMultiShots;//[Offset: 0x1b8, Size: 0x4]
	float OutterRadiusScaleWhenMultiShots;//[Offset: 0x1bc, Size: 0x4]
	float ShotNumInInnerRadiusPercent;//[Offset: 0x1c0, Size: 0x4]
	float SpreadToGunRotScale;//[Offset: 0x1d4, Size: 0x4]
	float AccuracyValue;//[Offset: 0x1d8, Size: 0x4]
	float AccuracyValue_Multiplier;//[Offset: 0x1dc, Size: 0x4]
	float AccuracyPunishRatio_Multiplier;//[Offset: 0x1e0, Size: 0x4]
	CurveFloat* AccToSpreadScaleCurve;//[Offset: 0x1e8, Size: 0x8]
	float ShootAimingSpreadValue;//[Offset: 0x1f0, Size: 0x4]
	SGWeaponMovingRatioParams SpreadAccuracyRatios;//[Offset: 0x1f4, Size: 0x30]
	SGWeaponMovingRatioParams SpreadAccuracyRatios_ShoulderZoom;//[Offset: 0x224, Size: 0x30]
	float MaxSpreadGunRotValue;//[Offset: 0x254, Size: 0x4]
	float GunRotSpeed;//[Offset: 0x258, Size: 0x4]
	float AdsMoaX;//[Offset: 0x25c, Size: 0x4]
	float AdsMoaY;//[Offset: 0x260, Size: 0x4]
	float AdapterMoaScaleX_Multiplier;//[Offset: 0x264, Size: 0x4]
	float AdapterMoaScaleY_Multiplier;//[Offset: 0x268, Size: 0x4]
	CurveFloat* MoaPDF;//[Offset: 0x270, Size: 0x8]
	CurveFloat* MoaScaleCurveByShootCount;//[Offset: 0x278, Size: 0x8]
	CurveFloat* MoaCurveForMultiShots;//[Offset: 0x280, Size: 0x8]
	CurveFloat* MoaCurveForOneShot;//[Offset: 0x288, Size: 0x8]
	float AngleOfOneMoa;//[Offset: 0x2a0, Size: 0x4]
	float MoaBiasRadius;//[Offset: 0x2a4, Size: 0x4]

--------------------------------
Class: SGWeaponSpreadParams
	float SpreadMin;//[Offset: 0x0, Size: 0x4]
	float SpreadMax;//[Offset: 0x4, Size: 0x4]
	float SpreadModifierBase;//[Offset: 0x8, Size: 0x4]
	float SpreadModifierInc;//[Offset: 0xc, Size: 0x4]
	float SpreadModifierMax;//[Offset: 0x10, Size: 0x4]
	float SpreadIncreaseSpeed;//[Offset: 0x14, Size: 0x4]
	float SpreadIncreaseSpeed_Firing;//[Offset: 0x18, Size: 0x4]
	float SpreadDecreaseSpeed;//[Offset: 0x1c, Size: 0x4]
	float SpreadDecreaseSpeed_Firing;//[Offset: 0x20, Size: 0x4]
	float SpreadDelayRecoverTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SGWeaponMovingRatioParams
	float AccuracyRatio_Jump;//[Offset: 0x0, Size: 0x4]
	float AccuracyRatio_Prone;//[Offset: 0x4, Size: 0x4]
	float AccuracyRatio_ProneWalk;//[Offset: 0x8, Size: 0x4]
	float AccuracyRatio_Stand;//[Offset: 0xc, Size: 0x4]
	float AccuracyRatio_StandWalk;//[Offset: 0x10, Size: 0x4]
	float AccuracyRatio_Sprint;//[Offset: 0x14, Size: 0x4]
	float AccuracyRatio_Crouch;//[Offset: 0x18, Size: 0x4]
	float AccuracyRatio_CrouchWalk;//[Offset: 0x1c, Size: 0x4]
	float AccuracyRatio_StandBlindFire;//[Offset: 0x20, Size: 0x4]
	float AccuracyRatio_CrouchBlindFire;//[Offset: 0x24, Size: 0x4]
	float AccuracyRatio_SlientWalkFire;//[Offset: 0x28, Size: 0x4]
	float AccuracyRatio_SlientCrouchWalkFire;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: SGWeaponRecoilComponent.ActorComponent.Object
	float IntensityHorizontalBase;//[Offset: 0xc0, Size: 0x4]
	float IntensityHorizontal;//[Offset: 0xc4, Size: 0x4]
	float IntensityVerticalBase;//[Offset: 0xc8, Size: 0x4]
	float IntensityVertical;//[Offset: 0xcc, Size: 0x4]
	WeaponRecoilRepInfo RepRecoilInfo;//[Offset: 0xd8, Size: 0x30]
	bool bEnableRecoil_Pitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	bool bEnableRecoil_Yaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	float FirstRecoilToRightChance;//[Offset: 0x12c, Size: 0x4]
	float MaxVerticalRecoil;//[Offset: 0x130, Size: 0x4]
	float MaxHorizontalRecoil;//[Offset: 0x134, Size: 0x4]
	float BurstStateEndTime;//[Offset: 0x138, Size: 0x4]
	bool bAlwaysUseMaxRandNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]
	SGWeaponOverrideRecoilInfo[] OverrideRecoilInfoList;//[Offset: 0x140, Size: 0x10]
	CurveFloat* VerticalRecoilSpeedCurve;//[Offset: 0x150, Size: 0x8]
	CurveFloat* HorizontalRecoilSpeedCurve;//[Offset: 0x158, Size: 0x8]
	SGWeaponMovingRatioParams RecoilAccuracyRatios;//[Offset: 0x160, Size: 0x30]
	SGWeaponMovingRatioParams RecoilAccuracyRatios_ShoulderZoom;//[Offset: 0x190, Size: 0x30]
	SGWeaponMovingRatioParams RecoilAccuracyRatios_ADS;//[Offset: 0x1c0, Size: 0x30]
	float MaxVerticalRecoilDisturbRange;//[Offset: 0x1f0, Size: 0x4]
	float BeginRecoverTime;//[Offset: 0x1f4, Size: 0x4]
	enum RecoverAlgorithm;//[Offset: 0x1f8, Size: 0x1]
	float ConfigDisturbRecoverSpeed;//[Offset: 0x1fc, Size: 0x4]
	float RecoverScale;//[Offset: 0x200, Size: 0x4]
	float ConfigRecoverTime;//[Offset: 0x204, Size: 0x4]
	float MinBeginRecoverSpeed_Yaw;//[Offset: 0x208, Size: 0x4]
	float MinBeginRecoverSpeed_Pitch;//[Offset: 0x20c, Size: 0x4]
	CurveFloat* RecoverSpeedCurve;//[Offset: 0x210, Size: 0x8]
	<enum,WeaponRecoilRecoverParams> RecoverParamsOverrideConfig;//[Offset: 0x218, Size: 0x50]
	float PadMeshCheckDistance;//[Offset: 0x268, Size: 0x4]
	float ConfigPadMeshRecoilScale_Horizontal;//[Offset: 0x26c, Size: 0x4]
	float ConfigPadMeshRecoilScale_Vertical;//[Offset: 0x270, Size: 0x4]
	float ConfigPadMeshSpreadScale;//[Offset: 0x274, Size: 0x4]
	CurveFloat* IntensityHorizontalValueCurve;//[Offset: 0x278, Size: 0x8]
	CurveFloat* IntensityVerticalValueCurve;//[Offset: 0x280, Size: 0x8]
	float VerticalRecoilScaleOnMaxVertical;//[Offset: 0x288, Size: 0x4]
	float VerticalRecoilOnMaxVertical_Max;//[Offset: 0x28c, Size: 0x4]
	float VerticalRecoilOnMaxVertical_Min;//[Offset: 0x290, Size: 0x4]
	CurveVector* VerticalRecoilValueCurveByShotCount;//[Offset: 0x298, Size: 0x8]
	SGRandomDistributionCurve VerticalRecoilDistributionByShotCount;//[Offset: 0x2a0, Size: 0x8]
	CurveVector* HorizontalRecoilValueCurveByShotCount;//[Offset: 0x2a8, Size: 0x8]
	SGRandomDistributionCurve HorizontalRecoilDistributionByShotCount;//[Offset: 0x2b0, Size: 0x8]
	float MaxVerticalRecoverSpeedInStateRecoil;//[Offset: 0x2b8, Size: 0x4]
	float VerticalRecoilTime;//[Offset: 0x2bc, Size: 0x4]
	float MaxHorizonRecoverSpeedInStateRecoil;//[Offset: 0x2c0, Size: 0x4]
	float HorizonRecoilTime;//[Offset: 0x2c4, Size: 0x4]
	CurveFloat* AdapterReocoilOnFireNumCurve;//[Offset: 0x2c8, Size: 0x8]
	TimerHandle RecoverTimeHandler;//[Offset: 0x3a0, Size: 0x8]
	enum CurrentShootingMode;//[Offset: 0x3c0, Size: 0x1]
	<enum,WeaponRecoilRecoverParams> RecoverParamsByShootingMode;//[Offset: 0x3c8, Size: 0x50]
	bool bEnableDataAssetOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	WeaponRecoilDataSet* RecoilAnimConfigDataAssetOverride;//[Offset: 0x4a0, Size: 0x8]
	WeaponRecoilAnimConfig ADSFireRecoilAnimConfig;//[Offset: 0x4a8, Size: 0x58]
	WeaponRecoilAnimConfig FireRecoilAnimConfig;//[Offset: 0x500, Size: 0x58]
	CurveFloat* RecoilKickEnable_ByFireCount;//[Offset: 0x558, Size: 0x8]
	void ServerRepRecoilInfo(WeaponRecoilRepInfo RecoilInfo);// 0x503be3fee041
	void OnRecoilConfigChanged();// 0x503ae3fee041
	void OnInventoryOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x5039e3fee041
	void OnContinuousFireCountIncreased(float FireTimeSeconds);// 0x5038e3fee041
	float GetVerticalRecoilAttribute();// 0x5037e3fee041
	float GetLastFireTime();// 0x5036e3fee041
	float GetHorizontalRecoilAttribute();// 0x5035e3fee041

--------------------------------
Class: WeaponRecoilRepInfo
	int ShotNum;//[Offset: 0x0, Size: 0x4]
	Rotator FireRecoil;//[Offset: 0x4, Size: 0xc]
	float BulletHorzRecoil;//[Offset: 0x10, Size: 0x4]
	float BulletVertRecoil;//[Offset: 0x14, Size: 0x4]
	Rotator RotatorDelta;//[Offset: 0x18, Size: 0xc]
	Rotator TargetRecoil;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: SGWeaponOverrideRecoilInfo
	byte ShotCount;//[Offset: 0x0, Size: 0x1]
	float ModifyRecoil_Vertical;//[Offset: 0x4, Size: 0x4]
	float ModifyRecoil_Horizontal;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WeaponRecoilRecoverParams
	float BeginRecoverTime;//[Offset: 0x0, Size: 0x4]
	enum RecoverAlgorithm;//[Offset: 0x4, Size: 0x1]
	float ConfigDisturbRecoverSpeed;//[Offset: 0x8, Size: 0x4]
	float RecoverScale;//[Offset: 0xc, Size: 0x4]
	float ConfigRecoverTime;//[Offset: 0x10, Size: 0x4]
	float MinBeginRecoverSpeed_Yaw;//[Offset: 0x14, Size: 0x4]
	float MinBeginRecoverSpeed_Pitch;//[Offset: 0x18, Size: 0x4]
	CurveFloat* RecoverSpeedCurve;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: SGRandomDistributionCurve
	CurveFloat* ParameterCurve;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WeaponRecoilDataSet.DataAsset.Object
	WeaponRecoilAnimConfig ADSFireRecoilAnimConfig;//[Offset: 0x30, Size: 0x58]
	WeaponRecoilAnimConfig FireRecoilAnimConfig;//[Offset: 0x88, Size: 0x58]
	CurveFloat* RecoilKickEnable_ByFireCount;//[Offset: 0xe0, Size: 0x8]

--------------------------------
Class: WeaponRecoilAnimConfig
	WeaponRecoilAnimParams[] RecoilAnimParams;//[Offset: 0x0, Size: 0x10]
	FName PivotSocket;//[Offset: 0x10, Size: 0x8]
	Vector PivotSocketOffset;//[Offset: 0x18, Size: 0xc]
	CurveFloat* Curve_FOVWeight;//[Offset: 0x28, Size: 0x8]
	float WAR_RotRollOffsetMin;//[Offset: 0x30, Size: 0x4]
	float WAR_RotRollOffsetMax;//[Offset: 0x34, Size: 0x4]
	float WAR_RotPitchoffsetMin;//[Offset: 0x38, Size: 0x4]
	float WAR_RotPitchOffsetMax;//[Offset: 0x3c, Size: 0x4]
	float WAR_RotYawOffsetMin;//[Offset: 0x40, Size: 0x4]
	float WAR_RotYawOffsetMax;//[Offset: 0x44, Size: 0x4]
	WeaponRecoilAnimParams[] RecoilAnimParamInstances;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: WeaponRecoilAnimParams
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bKeepCurrentValueOnReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bSkipFirstShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	enum WeapAnimRecoilType;//[Offset: 0x3, Size: 0x1]
	enum AnimOffsetType;//[Offset: 0x4, Size: 0x1]
	byte Axis;//[Offset: 0x5, Size: 0x1]
	CurveVector* WeaponAnimRecoilCurve;//[Offset: 0x8, Size: 0x8]
	RandomNumberGenerationParam RandomRecoilValueGenerationParam;//[Offset: 0x10, Size: 0x10]
	byte InitialOffsetType;//[Offset: 0x20, Size: 0x1]
	float Duration;//[Offset: 0x24, Size: 0x4]
	enum Waveform;//[Offset: 0x28, Size: 0x1]
	float WaveAmplitude;//[Offset: 0x2c, Size: 0x4]
	float WavePeriod;//[Offset: 0x30, Size: 0x4]
	float PowerBaseValue;//[Offset: 0x34, Size: 0x4]
	float PowerFrequency;//[Offset: 0x38, Size: 0x4]
	float BlendInTime;//[Offset: 0x3c, Size: 0x4]
	CurveFloat* BlendInProgressCurve;//[Offset: 0x40, Size: 0x8]
	float BlendOutTime;//[Offset: 0x48, Size: 0x4]
	CurveFloat* BlendOutProgressCurve;//[Offset: 0x50, Size: 0x8]
	bool bTimeSyncWithFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	CurveFloat* Curve_FOVWeight;//[Offset: 0x60, Size: 0x8]
	float InterpSpeed;//[Offset: 0x68, Size: 0x4]
	CurveFloat* Curve_Interp;//[Offset: 0x70, Size: 0x8]
	float MaxSpringSpeed;//[Offset: 0x78, Size: 0x4]
	float SpringAccel;//[Offset: 0x7c, Size: 0x4]
	float SpeedDecay;//[Offset: 0x80, Size: 0x4]
	float StaticDecay;//[Offset: 0x84, Size: 0x4]
	float ResetMinSpeedThresh;//[Offset: 0x88, Size: 0x4]
	float MinKickValue;//[Offset: 0x8c, Size: 0x4]
	float MaxKickValue;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: RandomNumberGenerationParam
	float FlipSideChance;//[Offset: 0x0, Size: 0x4]
	CurveFloat* Seed2DistributionMap;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SGWeaponMeshComponent.ActorComponent.Object
	MeshComponent* SimpleMeshComponent;//[Offset: 0xc0, Size: 0x8]
	SkeletalMeshComponent* ConstructSkeletalMeshComponent;//[Offset: 0xc8, Size: 0x8]
	StaticMeshComponent* ConstructStaticMeshComponent;//[Offset: 0xd0, Size: 0x8]
	SkeletalMesh* SimpleSkeletalMesh;//[Offset: 0xd8, Size: 0x8]
	class Object* SimpleSkeletalMeshAnim;//[Offset: 0xe0, Size: 0x8]
	FString[] ImportantAdapterNameList;//[Offset: 0xe8, Size: 0x10]
	StaticMeshSocket*[] SavedSockets;//[Offset: 0xf8, Size: 0x10]
	SkeletalMeshComponent* ModularBaseSkelMeshComp;//[Offset: 0x108, Size: 0x8]
	void OnWeaponVisibilityChanged(bool bVisible);// 0x5034e3fee041
	void OnWeaponRemoved();// 0x5033e3fee041
	void OnWeaponOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x5032e3fee041
	void OnWeaponMeshLoaded(SkeletalMesh* SkeletalMesh);// 0x5031e3fee041
	void OnWeaponMergeFinished(StaticMesh* TargetSM);// 0x5030e3fee041
	void OnWeaponBaseDropped();// 0x502fe3fee041
	void OnWeaponAttachToBack(FName AttachSocketName);// 0x502ee3fee041
	void OnLoadCompleted_SimpleSkeletalMeshTemplate(SoftObjectPath Path);// 0x502de3fee041
	void OnLoadCompleted_SimpleSkeletalMeshAnimInstanceClass(SoftClassPath Path);// 0x502ce3fee041
	void OnGraphicsQualityLevelChenged(byte InQuality);// 0x502be3fee041
	void OnCharacterCastShadow(bool bCastShadow);// 0x502ae3fee041
	void DisableWeaponBaseTick();// 0x5029e3fee041

--------------------------------
Class: SGWeaponMergeComponent.ActorComponent.Object
	MaterialInterface* SharedMaterial;//[Offset: 0xc0, Size: 0x8]
	bool bCanEverMergeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bAllWeaponPartsRemarkable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	float DelayTimeToMergeWeapon;//[Offset: 0xcc, Size: 0x4]
	int MaxDelayMergeTimes;//[Offset: 0xd0, Size: 0x4]
	FString[] ToMergeAssetNameList;//[Offset: 0xd8, Size: 0x10]
	FString[] CurrentMergedAssetNameList;//[Offset: 0xe8, Size: 0x10]
	MeshComponent*[] CachedMeshComponents;//[Offset: 0x108, Size: 0x10]
	Actor*[] CachedWeaponActors;//[Offset: 0x118, Size: 0x10]
	StaticMesh* MergedStaticMesh;//[Offset: 0x140, Size: 0x8]
	MeshComponent*[] CachedSourceMeshComponents;//[Offset: 0x158, Size: 0x10]
	void OnWeaponOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x5028e3fee041
	void OnWeaponAdapterRemoved(SGInventory* Inventory);// 0x5027e3fee041
	void OnWeaponAdapterAdded(SGInventory* Inventory);// 0x5026e3fee041
	void OnDropWeapon();// 0x5025e3fee041
	void OnAllWeaponMeshLoaded();// 0x5024e3fee041
	void DelayConditionMergeWeapon();// 0x5023e3fee041
	void ConditionalDoWeaponMerge();// 0x5022e3fee041
	void AsyncMergeWeapon();// 0x5021e3fee041

--------------------------------
Class: SGWeaponImpactComponent.ActorComponent.Object
	bool bEnableImpactEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	float ImpactEffectSkipDistance;//[Offset: 0xdc, Size: 0x4]
	float MaxImpactEffectSkipTime;//[Offset: 0xe0, Size: 0x4]
	float MaxDistanceToPlayEffect;//[Offset: 0xe4, Size: 0x4]
	ImpactMaterialAndAudioEvent[] ImpactMaterialAndAudioEventList;//[Offset: 0xe8, Size: 0x10]
	Rotator MeleeRecoilRot;//[Offset: 0xf8, Size: 0xc]
	Rotator DecalRotationOffset;//[Offset: 0x104, Size: 0xc]
	SGWeapon* OwnerWeapon;//[Offset: 0x110, Size: 0x8]
	HitResult LastHitTargetResult;//[Offset: 0x118, Size: 0x98]
	MeleeImpactProperty MeleeImpactInfo;//[Offset: 0x1b0, Size: 0xa8]
	Rotator MeleeRecoilTarRot;//[Offset: 0x258, Size: 0xc]
	float MeleeRecoilAnimSpeed;//[Offset: 0x264, Size: 0x4]
	bool bEnableMeleeRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	int AliveImpactPSCNumConf;//[Offset: 0x27c, Size: 0x4]
	void OnRep_MeleeHitResultUpdated();// 0x5020e3fee041

--------------------------------
Class: ImpactMaterialAndAudioEvent
	FText MaterialName;//[Offset: 0x0, Size: 0x18]

--------------------------------
Class: MeleeImpactProperty
	HitResult MeleeHitTargetResult;//[Offset: 0x0, Size: 0x98]
	Vector MeleeHitVector;//[Offset: 0x98, Size: 0xc]

--------------------------------
Class: SGWeaponFiringComponent.ActorComponent.Object
	PlayerController* CacheLocalPC;//[Offset: 0xd8, Size: 0x8]
	class SGWeaponFireMode[] SupportFireModeList;//[Offset: 0xe0, Size: 0x10]
	delegate OnFiringEvent;//[Offset: 0xf0, Size: 0x10]
	delegate OnHoldGrenadeEvent;//[Offset: 0x100, Size: 0x10]
	delegate OnGrenadeTimeoutEvent;//[Offset: 0x110, Size: 0x10]
	delegate ContinuousFireCountIncreasedEvent;//[Offset: 0x120, Size: 0x10]
	delegate OnClientNotifyFireFailed;//[Offset: 0x130, Size: 0x10]
	delegate DoFireEvent;//[Offset: 0x140, Size: 0x10]
	SGUAMPerWeaponAnimationSets* PerWeaponAnimationSets;//[Offset: 0x150, Size: 0x8]
	Vector ThrowableProjectileSpawnLocation;//[Offset: 0x158, Size: 0xc]
	Rotator ThrowableProjectileSpawnRotation;//[Offset: 0x164, Size: 0xc]
	Vector ThrowableProjectileLaunchDirection;//[Offset: 0x170, Size: 0xc]
	SGThrowableProjectile* ThrowableProjectile;//[Offset: 0x180, Size: 0x8]
	SGWeaponFireMode*[] FireModeList;//[Offset: 0x188, Size: 0x10]
	SGFireRepInfo3P[] FireRepInfos3P;//[Offset: 0x1a0, Size: 0x10]
	bool bIsHoldGreande;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	SGServerHitInfo[] ServerHitInfos;//[Offset: 0x1e0, Size: 0x10]
	float PreFireTime;//[Offset: 0x280, Size: 0x4]
	float EndPreFireTime;//[Offset: 0x284, Size: 0x4]
	float KeepPreFireTime;//[Offset: 0x288, Size: 0x4]
	float DelaySpawnProjectileTimeForThrowDown;//[Offset: 0x28c, Size: 0x4]
	float DelaySpawnProjectileTimeForThrowUp;//[Offset: 0x290, Size: 0x4]
	float DelaySpawnProjectileTimeForFastThrow;//[Offset: 0x294, Size: 0x4]
	float DelayHideWeaponTime;//[Offset: 0x298, Size: 0x4]
	float CoolDownTimeAfterFire;//[Offset: 0x29c, Size: 0x4]
	bool bEndZoomWhenStopFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	bool bEndAndRestoreZoomWhenStopFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	bool bIsShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 0x1]
	float DirectFlyDistance;//[Offset: 0x2a4, Size: 0x4]
	bool bGrenadeCanHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	int ForceReplicateFireInfo3PCount;//[Offset: 0x2ac, Size: 0x4]
	int AutoModeFrontBurstNum;//[Offset: 0x2b0, Size: 0x4]
	bool GrenadeBeHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	bool GrenadeCancel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1]
	bool GrenadeBeThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b6, Size: 0x1]
	bool bIsHoldGrenadeButtonVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b7, Size: 0x1]
	SGFireRepInfo MeleeOrThrowableFireInfo;//[Offset: 0x2b8, Size: 0x50]
	CurveFloat* FlyVelocityToDistanceCurve;//[Offset: 0x308, Size: 0x8]
	<int,CurveFloat*> SpecializedFlyVelocityToDistanceCurveMap;//[Offset: 0x310, Size: 0x50]
	float AdapterAdjustingDamage;//[Offset: 0x364, Size: 0x4]
	float ReloadSpeedRatioByWeaponAccessory;//[Offset: 0x368, Size: 0x4]
	float EnableFireRequestCacheDelay;//[Offset: 0x36c, Size: 0x4]
	enum CurrentShootMode;//[Offset: 0x370, Size: 0x1]
	CurveFloat* ModifyCurve;//[Offset: 0x378, Size: 0x8]
	CurveFloat* DamageScaleCurve;//[Offset: 0x380, Size: 0x8]
	float DefaultPenetration;//[Offset: 0x388, Size: 0x4]
	float Radius;//[Offset: 0x38c, Size: 0x4]
	enum[] SupportShootingMode;//[Offset: 0x390, Size: 0x10]
	int MaxBurstShotCount;//[Offset: 0x3a0, Size: 0x4]
	enum BurstStopMode;//[Offset: 0x3a4, Size: 0x1]
	bool bSupportAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5, Size: 0x1]
	class SGWeapon* ControlledWeaponClass;//[Offset: 0x3a8, Size: 0x8]
	class SGWeapon* ControllerWeaponClass;//[Offset: 0x3b0, Size: 0x8]
	FName BulletTrajectoryType;//[Offset: 0x3b8, Size: 0x8]
	float ZoomSupportCheckHeight;//[Offset: 0x3c0, Size: 0x4]
	bool bBipOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 0x1]
	bool bProjectileWeap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5, Size: 0x1]
	bool bIsShootAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ce, Size: 0x1]
	float BulletZeroFlyDistance;//[Offset: 0x3d8, Size: 0x4]
	float ShootAimingDelayEnterTime;//[Offset: 0x3e4, Size: 0x4]
	float ShootAimingFOV;//[Offset: 0x3e8, Size: 0x4]
	int MeleeWeaponPhaseNumber;//[Offset: 0x3ec, Size: 0x4]
	int MeleeWeaponCurPhase;//[Offset: 0x3f0, Size: 0x4]
	SGWeaponMovingRatioParams CrosshairAccuracyRatios;//[Offset: 0x418, Size: 0x30]
	class SGProjectile_GravityBullet* ProjectileClass;//[Offset: 0x448, Size: 0x28]
	float ProjectileInitSpeed;//[Offset: 0x470, Size: 0x4]
	float ProjectileGravityZeroDistance;//[Offset: 0x474, Size: 0x4]
	float ProjectileHorizontalVelocityDecRate;//[Offset: 0x478, Size: 0x4]
	float ProjectileZeroHorizontalVelocityDecDistance;//[Offset: 0x47c, Size: 0x4]
	float BipodHeight;//[Offset: 0x488, Size: 0x4]
	bool bInSupportOnState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1]
	Vector LastHitLoc;//[Offset: 0x490, Size: 0xc]
	float JudgeFireEndTime;//[Offset: 0x4bc, Size: 0x4]
	CurveFloat* LastGetBulletDropDistanceCurve;//[Offset: 0x540, Size: 0x8]
	TimerHandle StopFireTimerHandle;//[Offset: 0x560, Size: 0x8]
	BulletPassStruct[] BulletPassInfoList;//[Offset: 0x570, Size: 0x10]
	SGCharacter* CurrWeaponOwner;//[Offset: 0x580, Size: 0x8]
	void TimeoutCleanup();// 0x501fe3fee041
	void ShowHoldGrenadeButton();// 0x501ee3fee041
	void SetProjectileSpeed();// 0x501de3fee041
	void ServerTestFireInServer(Vector StartFireLoc, Vector EndFireLoc);// 0x501ce3fee041
	void ServerStopReload(SGCharacter* Character);// 0x501be3fee041
	void ServerStartFire();// 0x501ae3fee041
	void ServerSetShootAiming(bool IsAiming);// 0x5019e3fee041
	void ServerSetFlagToAvoidValidation(enum FlagType, bool bEnableGM);// 0x5018e3fee041
	void ServerSendProjectileSpawnLocation(const Vector Location, const Vector LaunchDirection);// 0x5017e3fee041
	void ServerSendHitInfos(const SGServerHitInfo[] HitInfos);// 0x5016e3fee041
	void ServerSendFireInfos(const SGFireRepInfo[] FireInfos, const byte[] AntiData);// 0x5015e3fee041
	void ServerSendFireEndInfo(int64 FireID);// 0x5014e3fee041
	void ServerFireStickOnInterface(class SGThrowableProjectile InProjectileClass, HitResult InHitResult, float PlayEffectTime);// 0x5013e3fee041
	void SendThrowFireLoaction();// 0x5012e3fee041
	void RefreshComponent();// 0x5011e3fee041
	void OnWeaponAnimationSetLoaded(SGWeapon* TargetWeapon, bool bLoadedOrUnloaded);// 0x5010e3fee041
	void OnStartThrowFire(byte InFireMode);// 0x500fe3fee041
	void OnStartSpectating(SGCharacter* BeSpectatedPawn);// 0x500ee3fee041
	void OnStartHoldGrenade();// 0x500de3fee041
	void OnStartFire(byte InFireMode);// 0x500ce3fee041
	void OnRepFireInfos();// 0x500be3fee041
	void OnRep_HoldGrenadeStatus();// 0x500ae3fee041
	void OnRep_CurrentShootModeChanged();// 0x5009e3fee041
	void OnPreFire();// 0x5008e3fee041
	void OnInventoryOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x5007e3fee041
	void OnInventoryEquipPosChanged(enum EquipPos);// 0x5006e3fee041
	void OnEndFire(byte FireMode);// 0x5005e3fee041
	void OnCancelFire();// 0x5004e3fee041
	void LogAndServerStartMeleeFire(SGFireRepInfo FireInfo, bool bNeedToCallSeverStartFire, int MeleeFirePhaseForMontage);// 0x5003e3fee041
	bool IsShooting();// 0x5002e3fee041
	void InitComponent();// 0x5001e3fee041
	void HandleEnergyWhenFire();// 0x5000e3fee041
	int GetWeaponHoldingPose();// 0x4fffe3fee041
	enum GetShootingMode();// 0x4ffee3fee041
	void DettachProjectileAhead();// 0x4ffde3fee041
	void ClientTestFireResult(Vector StartFireLoc, HitResult HitResult);// 0x4ffce3fee041
	void ClientNotifyFireFailed();// 0x4ffbe3fee041
	bool CanHoldGrenade();// 0x4ffae3fee041
	float CalculateThrowDelay(SGWeapon* OwnerWeapon);// 0x4ff9e3fee041

--------------------------------
Class: SGServerHitInfo
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	SGBulletID BulletID;//[Offset: 0x8, Size: 0x10]
	Vector ShotDirection;//[Offset: 0x18, Size: 0xc]
	Actor* HitActor;//[Offset: 0x28, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x30, Size: 0x8]
	Vector HitActorLocation;//[Offset: 0x38, Size: 0xc]
	Vector FireEndLocation;//[Offset: 0x44, Size: 0xc]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 0x8]
	enum HitGroup;//[Offset: 0x58, Size: 0x1]
	enum HeadHitSubGroup;//[Offset: 0x59, Size: 0x1]
	bool bBodyHitThrough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool bIsBestHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	FName BoneName;//[Offset: 0x5c, Size: 0x8]
	Vector[] ImportantLocations;//[Offset: 0x68, Size: 0x10]
	enum CaptureWeaponZoomType;//[Offset: 0x78, Size: 0x1]

--------------------------------
Class: SGBulletID
	int64 FireID;//[Offset: 0x0, Size: 0x8]
	byte ShotIndex;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SGFireRepInfo
	int64 FireID;//[Offset: 0x0, Size: 0x8]
	float Timestamp;//[Offset: 0x8, Size: 0x4]
	SGFireShots Shots;//[Offset: 0x10, Size: 0x20]
	class Actor* AmmoClass;//[Offset: 0x30, Size: 0x8]
	byte FireMode;//[Offset: 0x38, Size: 0x1]
	Vector AttackerPos;//[Offset: 0x3c, Size: 0xc]
	float ExpiredTimeOnServer;//[Offset: 0x48, Size: 0x4]
	byte CurFOV;//[Offset: 0x4c, Size: 0x1]
	bool bHandledHitInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	byte FireIntervalShotNum;//[Offset: 0x4e, Size: 0x1]

--------------------------------
Class: SGFireShots
	Vector ShotLocation;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantizeNormal[] ShotDirections;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SGThrowableProjectile.Actor.Object
	SphereComponent* CollisionComponent;//[Offset: 0x2e8, Size: 0x8]
	ProjectileMovementComponent* ProjectileMovementComponent;//[Offset: 0x2f0, Size: 0x8]
	bool bDestroyOnBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	bool bDestroyWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	bool bIsSticky;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa, Size: 0x1]
	StaticMesh* StickyMeshPath;//[Offset: 0x300, Size: 0x28]
	bool bHitAndBoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	class SGPoisonGas* PoisonGas;//[Offset: 0x330, Size: 0x8]
	class SGTrigger* Trigger;//[Offset: 0x338, Size: 0x8]
	SGThrowableProjectileInfo ProjectileInfo;//[Offset: 0x350, Size: 0xd0]
	bool bGrenadeBeHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	bool bGrenadeBeThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1]
	Vector TempVelocity;//[Offset: 0x424, Size: 0xc]
	float PlayEffectTimeForClient;//[Offset: 0x430, Size: 0x4]
	Vector FireLocation;//[Offset: 0x434, Size: 0xc]
	StaticMesh* MeshPath;//[Offset: 0x440, Size: 0x28]
	ParticleSystem* Particle;//[Offset: 0x468, Size: 0x28]
	float DefaultGravityScale;//[Offset: 0x490, Size: 0x4]
	SGWeapon* OwnerWeapon;//[Offset: 0x498, Size: 0x8]
	enum ThrowableType;//[Offset: 0x4a0, Size: 0x1]
	SGThrowableProjectile* PrePerformanceProjectile;//[Offset: 0x4a8, Size: 0x8]
	MaterialInstanceDynamic* EffectInsDyna;//[Offset: 0x4b0, Size: 0x8]
	bool bApplyVisionPersistentEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	KillerStaticData BackupOwnerData;//[Offset: 0x4c0, Size: 0xa0]
	void UpdateProjectileSpeed(out const Vector InitSpeed, bool bInGrenadeBeHold, bool bInGrenadeBethrow);// 0x3506e3fee041
	void UpdateProjectileFireLocation(Vector InFireLocation);// 0x3505e3fee041
	void UpdatePrePerformaceInfo(Vector Location, Vector Speed);// 0x3504e3fee041
	void SetProjectileInfo(SGWeapon* InOwnerWeapon, out const Vector InitSpeed, float MaxSpeed, float InLifespan, float InPlayEffectTime, bool InFiredByOvertime, bool bInGrenadeBeHold, bool bInGrenadeBethrow, bool bInGoThrowBody);// 0x3503e3fee041
	void SetPrePerformaceInfo(SGWeapon* InOwnerWeapon, out const Vector InitSpeed, float MaxSpeed, float InLifespan, float InPlayEffectTime);// 0x3502e3fee041
	void PrePerformanceWrapUp();// 0x3501e3fee041
	void OnStickyMeshAsyncLoadComplete();// 0x3500e3fee041
	void OnRep_ProjectileInfo();// 0x34ffe3fee041
	void OnRep_GrenadeBeThrowUpdateFireLocation();// 0x34fee3fee041
	void OnRep_GrenadeBeThrowUpdateAttributes();// 0x34fde3fee041
	void OnRep_GrenadeBeHoldUpdateAttributes();// 0x34fce3fee041
	void OnProjectileStop(out const HitResult ImpactResult);// 0x34fbe3fee041
	void OnProjectileStick(out const HitResult ImpactResult);// 0x34fae3fee041
	void OnProjectileSpawn(out const Vector SpawnLoc);// 0x34f9e3fee041
	void OnProjectileBounce(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x34f8e3fee041
	void OnParticleAsyncLoadComplete();// 0x34f7e3fee041
	void OnMeshAsyncLoadComplete();// 0x34f6e3fee041
	void OnCollisionComponentEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x34f5e3fee041
	void OnCollisionComponentBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x34f4e3fee041
	void BP_SetStaticMesh(StaticMesh* Mesh);// 0x34f3e3fee041
	void BP_SetParticle(ParticleSystem* Partical);// 0x34f2e3fee041

--------------------------------
Class: SGPoisonGas.Actor.Object
	bool bPenetrateCollison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	bool bNeedPlayParticleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1]
	bool SpawnSmokeBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6, Size: 0x1]
	class Actor* SmokeEffectBPSoftClass;//[Offset: 0x2f8, Size: 0x28]
	class Actor* MiddleSmokeEffectBPSoftClass;//[Offset: 0x320, Size: 0x28]
	SGVolume* PoisonGasVolume;//[Offset: 0x348, Size: 0x8]
	float SmokeEffectTime;//[Offset: 0x350, Size: 0x4]
	float SmokeExpandTime;//[Offset: 0x354, Size: 0x4]
	float SmokeFadeoutTime;//[Offset: 0x358, Size: 0x4]
	float FadeOutOffsetTime;//[Offset: 0x35c, Size: 0x4]
	Actor* SmokeBP;//[Offset: 0x360, Size: 0x8]
	Actor* OwnerActor;//[Offset: 0x368, Size: 0x8]
	ParticleSystemComponent* SmokePSC;//[Offset: 0x370, Size: 0x8]
	ActorComponent*[] PSCArray;//[Offset: 0x410, Size: 0x10]
	Vector BlockBoxExtent;//[Offset: 0x420, Size: 0xc]
	Vector EffectBoxExtent;//[Offset: 0x42c, Size: 0xc]
	float BlockStartTime;//[Offset: 0x438, Size: 0x4]
	float BlockDurationTime;//[Offset: 0x43c, Size: 0x4]
	float LeftSmokeEffectTimeRep;//[Offset: 0x440, Size: 0x4]
	bool bStartPlayEffectInServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 0x1]
	Vector RealEffectLocation;//[Offset: 0x448, Size: 0xc]
	void UpdateThrowableHitInfo(SGCharacter* OwnerCharacter, SGWeapon* OwnerWeapon, SGCharacter* HitCharacter);// 0x4deee3fee041
	void PlayEffect();// 0x4dede3fee041
	void OnSmokeClassLoadComplete();// 0x4dece3fee041
	void OnOverlapEnd(Actor* OverlappedComponent, Actor* OtherActor);// 0x4debe3fee041
	void OnOverlapBegin(Actor* OverlappedComponent, Actor* OtherActor);// 0x4deae3fee041
	float GetSmokeFaseOutTime();// 0x4de9e3fee041
	float GetSmokeEffectTime();// 0x4de8e3fee041
	void GenerateSmokeEffectActor();// 0x4de7e3fee041
	void DestroySmokeBP();// 0x4de6e3fee041
	void CheckCharacterInTearGas();// 0x4de5e3fee041

--------------------------------
Class: SGVolume.PhysicsVolume.Volume.Brush.Actor.Object
	class ActorComponent[] VolumeComponentClasses;//[Offset: 0x328, Size: 0x10]
	ActorComponent*[] VolumeComponents;//[Offset: 0x338, Size: 0x10]
	int VolumeID;//[Offset: 0x348, Size: 0x4]
	FString VolumeName;//[Offset: 0x350, Size: 0x10]
	int64 KeyItemID;//[Offset: 0x360, Size: 0x8]
	bool IsPointInside(out const Vector Point, float SphereRadius, out float OutDistanceToPoint);// 0x3681e3fee041
	void ActorEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3680e3fee041
	void ActorBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x367fe3fee041

--------------------------------
Class: SGTrigger.Actor.Object
	SGCharacter* SpawnCharacter;//[Offset: 0x2f0, Size: 0x8]
	bool bSpawnCharacterIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	bool bActivityUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	SGInventory* SpawnWeapon;//[Offset: 0x300, Size: 0x8]
	uint64 SpawnItemID;//[Offset: 0x308, Size: 0x8]
	ImpactResultWrapper ImpactResultWrapper;//[Offset: 0x310, Size: 0xa0]
	bool bAttractAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1]
	float ConfigLifeSpan;//[Offset: 0x3b4, Size: 0x4]
	bool bEffectLifeExpired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	FString WeaponName;//[Offset: 0x3c0, Size: 0x10]
	float WeaponAddTime;//[Offset: 0x3d0, Size: 0x4]
	void OnRep_ImpactResult();// 0x4ed1e3fee041
	void OnRep_EffectLifeExpired();// 0x4ed0e3fee041
	void OnNewPlayerRestarted(PlayerController* NewPlayerController);// 0x4ecfe3fee041
	void K2_InitTrigger(out const HitResult mImpactResult, SGCharacter* mSpawnCharacter, SGInventory* mSpawnWeapon);// 0x4ecee3fee041
	SGInventory* GetSpawnWeapon();// 0x4ecde3fee041
	int64 GetSpawnItemID();// 0x4ecce3fee041
	SGCharacter* GetSpawnCharacter();// 0x4ecbe3fee041
	void EffectLifeSpanExpired();// 0x4ecae3fee041

--------------------------------
Class: ImpactResultWrapper
	HitResult HitResult;//[Offset: 0x0, Size: 0x98]
	bool bFirstCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bEffectLifeExpired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]

--------------------------------
Class: SGThrowableProjectileInfo
	SGWeapon* OwnerWeapon;//[Offset: 0x0, Size: 0x8]
	Vector InitSpeed;//[Offset: 0x8, Size: 0xc]
	float MaxSpeed;//[Offset: 0x14, Size: 0x4]
	float LifeSpan;//[Offset: 0x18, Size: 0x4]
	float PlayEffectTime;//[Offset: 0x1c, Size: 0x4]
	bool bFiredByOvertime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bGoThrowBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	int Count;//[Offset: 0x24, Size: 0x4]
	bool bHasPlayedEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	Character* SpawnCharacter;//[Offset: 0x30, Size: 0x8]
	HitResult ImpactResult;//[Offset: 0x38, Size: 0x98]

--------------------------------
Class: KillerStaticData
	FString KillerName;//[Offset: 0x0, Size: 0x10]
	int64 KillerWeaponId;//[Offset: 0x10, Size: 0x8]
	uint32 KillerLevel;//[Offset: 0x18, Size: 0x4]
	uint32 KillerRankLevel;//[Offset: 0x1c, Size: 0x4]
	uint32 KillerRankrd;//[Offset: 0x20, Size: 0x4]
	uint32 KillerRankScore;//[Offset: 0x24, Size: 0x4]
	uint32 KillerRank;//[Offset: 0x28, Size: 0x4]
	uint32 KillerRanking;//[Offset: 0x2c, Size: 0x4]
	uint32 KillerPranking;//[Offset: 0x30, Size: 0x4]
	uint64 KillerGID;//[Offset: 0x38, Size: 0x8]
	int KillerTeamTypeId;//[Offset: 0x40, Size: 0x4]
	int KillerTeamId;//[Offset: 0x44, Size: 0x4]
	Vector KillerPos;//[Offset: 0x48, Size: 0xc]
	int TitleID;//[Offset: 0x54, Size: 0x4]
	FString SightName;//[Offset: 0x58, Size: 0x10]
	int64 KillerVestID;//[Offset: 0x68, Size: 0x8]
	int64 KillerHelmetID;//[Offset: 0x70, Size: 0x8]
	int64 KillerFaceShieldID;//[Offset: 0x78, Size: 0x8]
	int KillerWeaponValue;//[Offset: 0x80, Size: 0x4]
	bool bIsAICharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	CharacterHealthStaticsWhenDead[] AllHealthStatics;//[Offset: 0x88, Size: 0x10]
	SGPlayerItemInfoBase* PlayerItemInfo;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: CharacterHealthStaticsWhenDead
	int64 PlayerId;//[Offset: 0x0, Size: 0x8]
	int EnduranceType;//[Offset: 0x8, Size: 0x4]
	float Health;//[Offset: 0xc, Size: 0x4]
	float MaxHealth;//[Offset: 0x10, Size: 0x4]
	int[] BuffList;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: SGPlayerItemInfoBase.Object
	uint64 GID;//[Offset: 0x28, Size: 0x8]
	uint64 ItemID;//[Offset: 0x30, Size: 0x8]
	uint32 ItemNum;//[Offset: 0x38, Size: 0x4]
	bool IsRotated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool IsRolldeUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool IsHelmetDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	bool IsFoldButt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 0x1]
	bool IsBlackLoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool IsCanNotSellItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool IsFunctionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	uint32 ExpireTime;//[Offset: 0x44, Size: 0x4]
	uint32 Pos;//[Offset: 0x48, Size: 0x4]
	uint32 Durability;//[Offset: 0x4c, Size: 0x4]
	uint32 MaxDurability;//[Offset: 0x50, Size: 0x4]
	ItemGridInfo ItemPosition;//[Offset: 0x54, Size: 0x8]
	int InContainerIndex;//[Offset: 0x5c, Size: 0x4]
	int SocketIndex;//[Offset: 0x60, Size: 0x4]
	int64 ParentFakeID;//[Offset: 0x68, Size: 0x8]
	uint64 TakeInPlayerGID;//[Offset: 0x70, Size: 0x8]
	int InsureType;//[Offset: 0x78, Size: 0x4]
	int DogTagLevel;//[Offset: 0x7c, Size: 0x4]
	uint64[] SpecialInfoIntParams;//[Offset: 0x80, Size: 0x10]
	FString[] SpecialInfoStrParams;//[Offset: 0x90, Size: 0x10]
	FString DeathCharacterName;//[Offset: 0xa0, Size: 0x10]
	uint64 DeathCharacterGID;//[Offset: 0xb0, Size: 0x8]
	uint64 OldGID;//[Offset: 0xb8, Size: 0x8]
	uint64 OldTakeInPlayerGID;//[Offset: 0xc0, Size: 0x8]
	StackableItemSourceInfo[] StackableItemSourceInfos;//[Offset: 0xc8, Size: 0x10]
	int SpawnSourceType;//[Offset: 0xd8, Size: 0x4]
	SGPlayerItemInfoBase*[] ChildPlayerInfoList;//[Offset: 0xe0, Size: 0x10]
	FString ToString();// 0x4de3e3fee041
	void ResetPlayerItemInfo();// 0x4de2e3fee041
	SGPlayerItemInfoBase* NewClassCreate();// 0x4de1e3fee041
	SGPlayerItemInfoBase* GetPlayerContainerInfoPtr(SGPlayerItemInfoBase* ParentPlayerItemInfo);// 0x4de0e3fee041

--------------------------------
Class: StackableItemSourceInfo
	int64 FromPlayerGID;//[Offset: 0x0, Size: 0x8]
	int FromTeamIndex;//[Offset: 0x8, Size: 0x4]
	int Count;//[Offset: 0xc, Size: 0x4]
	enum FromCharacterType;//[Offset: 0x10, Size: 0x1]
	enum FromSpawnSourceType;//[Offset: 0x11, Size: 0x1]

--------------------------------
Class: SGWeaponFireMode.Object
	SGWeapon* OwnerWeapon;//[Offset: 0x28, Size: 0x8]
	enum FireMode;//[Offset: 0x30, Size: 0x1]
	float ModeTraceRange;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: SGUAMPerWeaponAnimationSets.SGPerWeaponAnimationSets.Object
	SGUAMHandAnimationSet UAMHandAnimationSet;//[Offset: 0x28, Size: 0xb58]
	SGUAMWeaponAnimationSet UAMWeaponAnimationSet;//[Offset: 0xb80, Size: 0x960]

--------------------------------
Class: SGPerWeaponAnimationSets.Object

--------------------------------
Class: SGUAMHandAnimationSet
	AnimSequence* IdleSeqBasePose;//[Offset: 0x0, Size: 0x8]
	AnimSequence* IdleSeq;//[Offset: 0x8, Size: 0x8]
	AnimSequence* IdleSeq3P_Prone;//[Offset: 0x10, Size: 0x8]
	AnimSequence* IdleSeq_Additive;//[Offset: 0x18, Size: 0x8]
	AnimSequence* IdleSeq_Additive_3P_Prone;//[Offset: 0x20, Size: 0x8]
	AnimSequence* ADS_IdleSeq_Additive;//[Offset: 0x28, Size: 0x8]
	AnimSequence* Idle_FixUpRightHandAdditive;//[Offset: 0x30, Size: 0x8]
	BlendSpace1D* GripIdleBS;//[Offset: 0x38, Size: 0x8]
	BlendSpace1D* GripProne3PIdleBS;//[Offset: 0x40, Size: 0x8]
	BlendSpace1D* RearGripIdleBS;//[Offset: 0x48, Size: 0x8]
	BlendSpace1D* CasualRearGripIdleBS_Female;//[Offset: 0x50, Size: 0x8]
	AnimSequence* CasualIdleSeq;//[Offset: 0x58, Size: 0x8]
	AnimSequence* CasualIdleSeq_Female;//[Offset: 0x60, Size: 0x8]
	bool bEnableInGameCasual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	BlendSpace1D* CasualGripIdleBS;//[Offset: 0x70, Size: 0x8]
	BlendSpace1D* CasualGripIdleBS_Female;//[Offset: 0x78, Size: 0x8]
	BlendSpace1D* CasualGripAdjustmentBS;//[Offset: 0x80, Size: 0x8]
	BlendSpace1D* CasualGripAdjustmentBS_Female;//[Offset: 0x88, Size: 0x8]
	BlendSpace1D* CasualRearGripIdleBS;//[Offset: 0x90, Size: 0x8]
	BlendSpace1D* LFingerAdaptiveBS;//[Offset: 0x98, Size: 0x8]
	BlendSpace1D* WeaponShakeBS;//[Offset: 0xa0, Size: 0x8]
	AnimMontage* FireSeq;//[Offset: 0xa8, Size: 0x28]
	AnimMontage* ProneFireSeq;//[Offset: 0xd0, Size: 0x28]
	AnimMontage* AutoBurstFireSeq;//[Offset: 0xf8, Size: 0x28]
	AnimMontage*[] MeleeFireSeq;//[Offset: 0x120, Size: 0x10]
	AnimMontage* MeleeFireProneSeq;//[Offset: 0x130, Size: 0x28]
	AnimMontage* LoopFireSeq;//[Offset: 0x158, Size: 0x28]
	AnimMontage* ZoomFireSeq;//[Offset: 0x180, Size: 0x28]
	AnimMontage* EmptyFireSeq;//[Offset: 0x1a8, Size: 0x28]
	AnimMontage* ThrowDownSeq;//[Offset: 0x1d0, Size: 0x28]
	AnimMontage* ProneThrowDownSeq;//[Offset: 0x1f8, Size: 0x28]
	AnimMontage* FireWithoutChargeSeq;//[Offset: 0x220, Size: 0x28]
	AnimMontage* FastThrowFireSeq;//[Offset: 0x248, Size: 0x28]
	AnimMontage* ProneFastThrowFireSeq;//[Offset: 0x270, Size: 0x28]
	AnimMontage* ReloadSeq;//[Offset: 0x298, Size: 0x28]
	AnimMontage* CheckMagazineSeq;//[Offset: 0x2c0, Size: 0x28]
	AnimMontage* UnloadMagSeq;//[Offset: 0x2e8, Size: 0x28]
	AnimMontage* LoadMagSeq;//[Offset: 0x310, Size: 0x28]
	AnimMontage* OpenBoltBeforeReloadingSeq;//[Offset: 0x338, Size: 0x28]
	AnimMontage* CloseBoltAfterReloadingSeq;//[Offset: 0x360, Size: 0x28]
	AnimMontage* BeltOutSeq;//[Offset: 0x388, Size: 0x28]
	AnimMontage* BeltInSeq;//[Offset: 0x3b0, Size: 0x28]
	AnimMontage* ReloadLoopSeq;//[Offset: 0x3d8, Size: 0x28]
	AnimMontage* ReloadLoopBeginSeq;//[Offset: 0x400, Size: 0x28]
	AnimMontage* ReloadLoopEndSeq;//[Offset: 0x428, Size: 0x28]
	AnimMontage* PullBoltSeq;//[Offset: 0x450, Size: 0x28]
	AnimMontage* PullBoltADSSeq;//[Offset: 0x478, Size: 0x28]
	AnimMontage* EndEquipSeq;//[Offset: 0x4a0, Size: 0x28]
	AnimMontage* EndEquipSeq_Left;//[Offset: 0x4c8, Size: 0x28]
	AnimMontage* EndEquipSeq_Right;//[Offset: 0x4f0, Size: 0x28]
	AnimMontage* EquipSeq;//[Offset: 0x518, Size: 0x28]
	AnimMontage* EquipSeq_Left;//[Offset: 0x540, Size: 0x28]
	AnimMontage* EquipSeq_Right;//[Offset: 0x568, Size: 0x28]
	AnimMontage* EquipWithChargeSeq;//[Offset: 0x590, Size: 0x28]
	AnimMontage* HoldOpenSeq;//[Offset: 0x5b8, Size: 0x28]
	AnimMontage* ProneHoldOpenSeq;//[Offset: 0x5e0, Size: 0x28]
	AnimMontage* ReleaseHoldSeq;//[Offset: 0x608, Size: 0x28]
	AnimMontage* ProneReleaseHoldSeq;//[Offset: 0x630, Size: 0x28]
	AnimMontage* SwitchFireMode0Seq;//[Offset: 0x658, Size: 0x28]
	AnimMontage* SwitchFireMode1Seq;//[Offset: 0x680, Size: 0x28]
	AnimMontage* SwitchFireMode2Seq;//[Offset: 0x6a8, Size: 0x28]
	AnimMontage* SetBipodOnSeq;//[Offset: 0x6d0, Size: 0x28]
	AnimMontage* SetBipodOffSeq;//[Offset: 0x6f8, Size: 0x28]
	AnimMontage* AddNewMagzineSeq;//[Offset: 0x720, Size: 0x28]
	<FString,SGMontargeWithPlayRateChangeClip> AddNewMagzineSeqMap;//[Offset: 0x748, Size: 0x50]
	<FString,SGMontargeWithPlayRateChangeClip> CheckMagzineSeqMap;//[Offset: 0x798, Size: 0x50]
	<FString,SGMontargeWithPlayRateChangeClip> ReloadSeqMap;//[Offset: 0x7e8, Size: 0x50]
	<FString,SGMontargeWithPlayRateChangeClip> TacticalReloadSeqMap;//[Offset: 0x838, Size: 0x50]
	<FString,SGMontargeWithPlayRateChangeClip> FastReloadSeqMap;//[Offset: 0x888, Size: 0x50]
	AnimMontage* BeginBagOpenSeq;//[Offset: 0x8d8, Size: 0x28]
	AnimMontage* EndBagOpenSeq;//[Offset: 0x900, Size: 0x28]
	AnimMontage* BeginBagOpenSeq_Prone;//[Offset: 0x928, Size: 0x28]
	AnimMontage* EndBagOpenSeq_Prone;//[Offset: 0x950, Size: 0x28]
	AnimMontage* EndKeepPreFireMontage;//[Offset: 0x978, Size: 0x28]
	AnimMontage* ProneEndKeepPreFireMontage;//[Offset: 0x9a0, Size: 0x28]
	AnimMontage* SetupAdapterMontage;//[Offset: 0x9c8, Size: 0x28]
	AnimMontage* BeginLowReadyeMontage;//[Offset: 0x9f0, Size: 0x28]
	AnimMontage* EndLowReadyeMontage;//[Offset: 0xa18, Size: 0x28]
	AnimMontage* LootSeq;//[Offset: 0xa40, Size: 0x28]
	AnimMontage* ViewWeaponMontage;//[Offset: 0xa68, Size: 0x28]
	AnimMontage* ViewWeaponGripMontage;//[Offset: 0xa90, Size: 0x28]
	AnimMontage* FoldScopeSeq;//[Offset: 0xab8, Size: 0x28]
	AnimMontage* FoldScopeADSSeq;//[Offset: 0xae0, Size: 0x28]
	AnimMontage* UnfoldScopeSeq;//[Offset: 0xb08, Size: 0x28]
	AnimMontage* UnfoldScopeADSSeq;//[Offset: 0xb30, Size: 0x28]

--------------------------------
Class: SGMontargeWithPlayRateChangeClip
	AnimMontage* AnimSeq;//[Offset: 0x0, Size: 0x28]
	float PlayRate;//[Offset: 0x28, Size: 0x4]
	float BlendInWhenPlayStandAlone;//[Offset: 0x2c, Size: 0x4]
	float BlendOutWhenPlayStandAlone;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: SGUAMWeaponAnimationSet
	SGMontargeWithPlayRate WeaponFireResource;//[Offset: 0x0, Size: 0x30]
	SGMontargeWithPlayRate WeaponAutoBurstFireResource;//[Offset: 0x30, Size: 0x30]
	SGMontargeWithPlayRate WeaponDownFireResource;//[Offset: 0x60, Size: 0x30]
	SGMontargeWithPlayRate WeaponFastFireResource;//[Offset: 0x90, Size: 0x30]
	SGMontargeWithPlayRate WeaponEmptyFireResource;//[Offset: 0xc0, Size: 0x30]
	SGMontargeWithPlayRate WeaponReloadResource;//[Offset: 0xf0, Size: 0x30]
	SGMontargeWithPlayRate WeaponTacticalReloadResource;//[Offset: 0x120, Size: 0x30]
	SGMontargeWithPlayRate WeaponUnloadMagResource;//[Offset: 0x150, Size: 0x30]
	SGMontargeWithPlayRate WeaponLoadMagResource;//[Offset: 0x180, Size: 0x30]
	SGMontargeWithPlayRate MagazineCheckResource;//[Offset: 0x1b0, Size: 0x30]
	SGMontargeWithPlayRate ReloadLoopEndResource;//[Offset: 0x1e0, Size: 0x30]
	SGMontargeWithPlayRate ReloadLoopResource;//[Offset: 0x210, Size: 0x30]
	SGMontargeWithPlayRate ReloadLoopBeginResource;//[Offset: 0x240, Size: 0x30]
	SGMontargeWithPlayRate WeaponPullBoltResource;//[Offset: 0x270, Size: 0x30]
	SGMontargeWithPlayRate WeaponPullBoltADSResource;//[Offset: 0x2a0, Size: 0x30]
	SGMontargeWithPlayRate WeaponEndEquipResource;//[Offset: 0x2d0, Size: 0x30]
	SGMontargeWithPlayRate WeaponEquipResource;//[Offset: 0x300, Size: 0x30]
	SGMontargeWithPlayRate WeaponOpenBoltBeforeReloadResource;//[Offset: 0x330, Size: 0x30]
	SGMontargeWithPlayRate WeaponCloseBoltAfterReloadResource;//[Offset: 0x360, Size: 0x30]
	SGMontargeWithPlayRate WeaponBeltOutResource;//[Offset: 0x390, Size: 0x30]
	SGMontargeWithPlayRate WeaponBeltInResource;//[Offset: 0x3c0, Size: 0x30]
	SGMontargeWithPlayRate WeaponEquipWithChargeResource;//[Offset: 0x3f0, Size: 0x30]
	SGMontargeWithPlayRate WeaponHoldOpenResource;//[Offset: 0x420, Size: 0x30]
	SGMontargeWithPlayRate WeaponReleaseOpenResource;//[Offset: 0x450, Size: 0x30]
	SGMontargeWithPlayRate WeaponSwitchFireMode0Resource;//[Offset: 0x480, Size: 0x30]
	SGMontargeWithPlayRate WeaponSwitchFireMode1Resource;//[Offset: 0x4b0, Size: 0x30]
	SGMontargeWithPlayRate WeaponSwitchFireMode2Resource;//[Offset: 0x4e0, Size: 0x30]
	SGMontargeWithPlayRate WeaponSetBipodOnResource;//[Offset: 0x510, Size: 0x30]
	SGMontargeWithPlayRate WeaponSetBipodOffResource;//[Offset: 0x540, Size: 0x30]
	SGMontargeWithPlayRate AddNewMagzineResource;//[Offset: 0x570, Size: 0x30]
	<FString,SGMontargeWithPlayRateChangeClip> AddNewMagzineSeqMap;//[Offset: 0x5a0, Size: 0x50]
	<FString,SGMontargeWithPlayRateChangeClip> CheckMagzineSeqMap;//[Offset: 0x5f0, Size: 0x50]
	<FString,SGMontargeWithPlayRateChangeClip> ReloadSeqMap;//[Offset: 0x640, Size: 0x50]
	<FString,SGMontargeWithPlayRateChangeClip> TacticalReloadSeqMap;//[Offset: 0x690, Size: 0x50]
	<FString,SGMontargeWithPlayRateChangeClip> FastReloadSeqMap;//[Offset: 0x6e0, Size: 0x50]
	SGMontargeWithPlayRate WeaponBeginBagOpenResource;//[Offset: 0x730, Size: 0x30]
	SGMontargeWithPlayRate WeaponBagOpenResource;//[Offset: 0x760, Size: 0x30]
	SGMontargeWithPlayRate WeaponEndBagOpenResource;//[Offset: 0x790, Size: 0x30]
	SGMontargeWithPlayRate WeaponEndKeepPreFireResource;//[Offset: 0x7c0, Size: 0x30]
	SGMontargeWithPlayRate WeaponSetupAdapterResource;//[Offset: 0x7f0, Size: 0x30]
	SGMontargeWithPlayRate ViewWeaponResource;//[Offset: 0x820, Size: 0x30]
	<FString,AnimMontage*> CustomAnimations;//[Offset: 0x850, Size: 0x50]
	SGMontargeWithPlayRate WeaponFoldScopeResource;//[Offset: 0x8a0, Size: 0x30]
	SGMontargeWithPlayRate WeaponFoldScopeADSResource;//[Offset: 0x8d0, Size: 0x30]
	SGMontargeWithPlayRate WeaponUnfoldScopeResource;//[Offset: 0x900, Size: 0x30]
	SGMontargeWithPlayRate WeaponUnfoldScopeADSResource;//[Offset: 0x930, Size: 0x30]

--------------------------------
Class: SGMontargeWithPlayRate
	AnimMontage* AnimSeq;//[Offset: 0x0, Size: 0x28]
	float PlayRate;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: SGFireRepInfo3P
	int64 FireID;//[Offset: 0x0, Size: 0x8]
	SGFireShots Shots;//[Offset: 0x8, Size: 0x20]
	class Actor* AmmoClass;//[Offset: 0x28, Size: 0x8]
	float ExpiredTimeOnServer;//[Offset: 0x30, Size: 0x4]
	bool bFireEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	enum ShootingMode;//[Offset: 0x35, Size: 0x1]
	byte FireIntervalShotNum;//[Offset: 0x36, Size: 0x1]

--------------------------------
Class: SGProjectile_GravityBullet.PooledActor.Actor.Object
	bool bDebugBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 0x1]
	bool bDebugBulletTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a, Size: 0x1]
	bool bDrawDebugPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b, Size: 0x1]
	float DrawDebugTime;//[Offset: 0x36c, Size: 0x4]
	SphereComponent* BulletCollisionComp;//[Offset: 0x370, Size: 0x8]
	ParticleSystemComponent* BulleParticleComp;//[Offset: 0x378, Size: 0x8]
	float MaxConsiderThickness;//[Offset: 0x380, Size: 0x4]
	BulletTraceDataAsset* CurrentBulletTraceDataAsset;//[Offset: 0x388, Size: 0x8]
	class Actor* AmmoClass;//[Offset: 0x3b8, Size: 0x8]
	SGBulletMovementComponent* BulletMovementComp;//[Offset: 0x3c0, Size: 0x8]
	Rotator BulletRotationOffset;//[Offset: 0x3c8, Size: 0xc]
	bool bStayAfterStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 0x1]
	float ProjectileStayTime;//[Offset: 0x3d8, Size: 0x4]
	bool bSpawnOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 0x1]
	bool bShouldDamageDynamicObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 0x1]
	Vector BulletInitVelocity;//[Offset: 0x3e0, Size: 0xc]
	Vector BulletInitLocation;//[Offset: 0x3ec, Size: 0xc]
	float ZeroGravityDistance;//[Offset: 0x408, Size: 0x4]
	float HorizontalVelocityDecRate;//[Offset: 0x40c, Size: 0x4]
	float ZeroHorizontalVelocityDecDistance;//[Offset: 0x410, Size: 0x4]
	Vector LastCheckLocation;//[Offset: 0x418, Size: 0xc]
	bool bShouldStopDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	SGPointDamageEvent PointDamageEvent;//[Offset: 0x430, Size: 0x110]
	bool bEnableToBetterPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	enum CaptureWeaponZoomingType;//[Offset: 0x559, Size: 0x1]
	void PoolEndPlay();// 0x4df5e3fee041
	void PoolBeginPlay();// 0x4df4e3fee041
	void OnBulletStopDamage();// 0x4df3e3fee041
	void OnBulletStop(out const HitResult ImpactResult);// 0x4df2e3fee041
	void MoveAndHitOnInit();// 0x4df1e3fee041
	void InitializeMovement(Vector BulletSpawnLoc, Rotator BulletSpawnRot, SGWeapon* InOwnerWeapon);// 0x4df0e3fee041
	void Destroyed();// 0x4defe3fee041

--------------------------------
Class: PooledActor.Actor.Object
	bool Spawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	ObjectPool* OwningPool;//[Offset: 0x2e8, Size: 0x8]
	SharedObjectPool* SharedPool;//[Offset: 0x2f0, Size: 0x8]
	TimerHandle LifeSpanHandle;//[Offset: 0x2f8, Size: 0x8]
	float SpawnTimeSeconds;//[Offset: 0x300, Size: 0x4]
	float LifeSpanPool;//[Offset: 0x304, Size: 0x4]
	delegate OnPoolBeginPlay;//[Offset: 0x308, Size: 0x10]
	delegate OnPoolEndPlay;//[Offset: 0x318, Size: 0x10]
	void SpawnFromPool(const bool Reconstruct, out const PoolSpawnOptions SpawnOptions, out const Transform SpawnTransform);// 0x4600e3fee041
	void SetLifeSpanPool(float InLifespan);// 0x45ffe3fee041
	void ReturnToPool();// 0x45fee3fee041
	SharedObjectPool* GetSharedPool();// 0x45fde3fee041
	ObjectPool* GetOwningPool();// 0x45fce3fee041
	float GetLifeSpanPool();// 0x45fbe3fee041
	void EVENT_OnPoolEndPlay();// 0x45fae3fee041
	void EVENT_OnPoolBeginPlay();// 0x45f9e3fee041

--------------------------------
Class: PoolSpawnOptions
	enum CollisionType;//[Offset: 0x0, Size: 0x1]
	bool EnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool SimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool ActorTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: ObjectPool.ActorComponent.Object
	PooledActor*[] Pool;//[Offset: 0xb8, Size: 0x10]
	class PooledActor* TemplateClass;//[Offset: 0xc8, Size: 0x8]
	int PoolSize;//[Offset: 0xd0, Size: 0x4]
	bool AutoInitialize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	bool bAlwaysUseOldestObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]
	bool bInstantiateOnDemand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1]
	void ReturnActor(PooledActor* PooledActor);// 0x594de3fee041
	void InitializeObjectPoolWithNewTemplateClass(const class PooledActor Template, const int SizeOfPool);// 0x594ce3fee041
	void InitializeObjectPool();// 0x594be3fee041
	void GetSpawnedObjects(out PooledActor*[] Spawned);// 0x594ae3fee041
	PooledActor* GetSpawnedObject();// 0x5949e3fee041
	void GetObjectsFromPool(out PooledActor*[] Spawned, out PooledActor*[] Inactive);// 0x5948e3fee041
	PooledActor*[] GetObjectArray();// 0x5947e3fee041
	void GetInactiveObjects(out PooledActor*[] Inactive);// 0x5946e3fee041
	PooledActor* GetInactiveObject();// 0x5945e3fee041
	PooledActor* FinishDeferredSpawnFromPool(PooledActor* Actor, const bool Reconstruct, out const Transform SpawnTransform);// 0x5944e3fee041
	void EmptyObjectPool();// 0x5943e3fee041
	PooledActor* BeginDeferredSpawnFromPool(const Object* WorldContextObject, ObjectPool* ObjectPool, class Object PooledClass, out const PoolSpawnOptions SpawnOptions, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner, const bool Reconstruct, out bool SpawnSuccessful);// 0x5942e3fee041

--------------------------------
Class: SharedObjectPool.ActorComponent.Object
	PooledActor*[] Pool;//[Offset: 0xb8, Size: 0x10]
	bool AutoInitialize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	<class PooledActor,int> TemplateClasses;//[Offset: 0xd0, Size: 0x50]
	void ReturnActor(PooledActor* PooledActor);// 0x5970e3fee041
	void InitializeObjectPool();// 0x596fe3fee041
	void GetSpawnedObjects(const class Object Class, out PooledActor*[] Spawned);// 0x596ee3fee041
	PooledActor* GetSpawnedObject(const class Object Class);// 0x596de3fee041
	void GetObjectsFromPool(const class Object Class, out PooledActor*[] Spawned, out PooledActor*[] Inactive);// 0x596ce3fee041
	PooledActor*[] GetObjectArray();// 0x596be3fee041
	void GetInactiveObjects(const class Object Class, out PooledActor*[] Inactive);// 0x596ae3fee041
	PooledActor* GetInactiveObject(const class Object Class);// 0x5969e3fee041
	PooledActor* FinishDeferredSpawnFromPool(PooledActor* Actor, const bool Reconstruct, out const Transform SpawnTransform);// 0x5968e3fee041
	void EmptyObjectPool(const class Object Class);// 0x5967e3fee041
	PooledActor* BeginDeferredSpawnFromPool(const Object* WorldContextObject, SharedObjectPool* SharedPool, class Object Class, out const PoolSpawnOptions SpawnOptions, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner, const bool Reconstruct, out bool SpawnSuccessful);// 0x5966e3fee041

--------------------------------
Class: BulletTraceDataAsset.DataAsset.Object
	BulletTraceParams BulletTraceParams;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: BulletTraceParams
	float BaseTraceRadius;//[Offset: 0x0, Size: 0x4]
	CurveFloat* TraceRadiusScaleByDistanceCurve;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SGBulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	CurveFloat* FlyVelocityToDistanceCurve;//[Offset: 0x1e0, Size: 0x8]
	float XAxis;//[Offset: 0x1e8, Size: 0x4]
	float LastXAxis;//[Offset: 0x1ec, Size: 0x4]
	float InitSpeed;//[Offset: 0x1f0, Size: 0x4]
	Vector InitFlyDir;//[Offset: 0x1f4, Size: 0xc]

--------------------------------
Class: SGPointDamageEvent.PointDamageEvent.DamageEvent
	SGBulletID BulletID;//[Offset: 0xb8, Size: 0x10]
	float Impulse;//[Offset: 0xc8, Size: 0x4]
	enum HitGroup;//[Offset: 0xcc, Size: 0x1]
	class Actor* AmmoClass;//[Offset: 0xd0, Size: 0x8]
	enum HeadHitSubGroup;//[Offset: 0xd8, Size: 0x1]
	enum CaptureWeaponZoomType;//[Offset: 0xd9, Size: 0x1]
	byte FireModeNum;//[Offset: 0xda, Size: 0x1]
	bool bBodyHitThrough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1]
	bool bIsBestHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	Vector[] ImportantLocations;//[Offset: 0xe0, Size: 0x10]
	BulletInfo BulletInfo;//[Offset: 0xf0, Size: 0x20]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x14, Size: 0xc]
	HitResult HitInfo;//[Offset: 0x20, Size: 0x98]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BulletInfo
	float CurSpeed;//[Offset: 0x0, Size: 0x4]
	float DropDistance;//[Offset: 0x4, Size: 0x4]
	Vector SpawnLocation;//[Offset: 0x8, Size: 0xc]
	float FlyDistance;//[Offset: 0x14, Size: 0x4]
	float FlyTime;//[Offset: 0x18, Size: 0x4]
	float DamageScale;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: BulletPassStruct
	Vector PassDir;//[Offset: 0x0, Size: 0xc]
	Vector PassLocation;//[Offset: 0xc, Size: 0xc]
	float BulletPassAngle;//[Offset: 0x18, Size: 0x4]
	float TimeToReach;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SGWeaponFireIntervalComponent.ActorComponent.Object
	float JumpFireInterval;//[Offset: 0xc8, Size: 0x4]
	float ContinuousFirePersistTime;//[Offset: 0xcc, Size: 0x4]
	float ContinuousFireInterval;//[Offset: 0xd0, Size: 0x4]
	CurveFloat*[] FireIntervalCurveList;//[Offset: 0xd8, Size: 0x10]
	float FireAnimTime;//[Offset: 0xe8, Size: 0x4]
	float FireAnimBlendOutTime;//[Offset: 0xec, Size: 0x4]
	float FireEndContinusTime;//[Offset: 0xf0, Size: 0x4]
	float GetFireInterval(int FireModeNum, bool bBusrtFireInnerInterval);// 0x4ff2e3fee041

--------------------------------
Class: SGWeaponCameraComponent.SGInventoryCameraComponent.ActorComponent.Object
	bool bEnableCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	class MatineeCameraShake* ShotCameraShake;//[Offset: 0x2d8, Size: 0x8]
	class MatineeCameraShake* ShotCameraShakeFirstShot;//[Offset: 0x2e0, Size: 0x8]
	class MatineeCameraShake* ShotCameraShakeIronsight;//[Offset: 0x2e8, Size: 0x8]
	class MatineeCameraShake* ShotCameraShakeIronsightFirstShot;//[Offset: 0x2f0, Size: 0x8]
	class MatineeCameraShake* ShotCameraShakeADS;//[Offset: 0x2f8, Size: 0x8]
	class MatineeCameraShake* ShotCameraShakeADSFirstShot;//[Offset: 0x300, Size: 0x8]
	float CameraShakeScale;//[Offset: 0x308, Size: 0x4]
	CurveFloat* FOVToCameraShakeScaleCurve;//[Offset: 0x310, Size: 0x8]
	CurveFloat* RecoilToCameraShakeScaleCurve;//[Offset: 0x318, Size: 0x8]
	class MatineeCameraShake* TakeHitCameraShakeADS;//[Offset: 0x320, Size: 0x8]
	class MatineeCameraShake* TakeHitCameraShake;//[Offset: 0x328, Size: 0x8]
	TimerHandle CrosshairDisplayHandler;//[Offset: 0x338, Size: 0x8]
	class MatineeCameraShake GetTakeHitCameraShakeADS();// 0x4fd3e3fee041
	class MatineeCameraShake GetTakeHitCameraShake();// 0x4fd2e3fee041

--------------------------------
Class: SGWeaponBoreComponent.ActorComponent.Object
	bool bOpenBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bCanFillAmmoOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bNeedOpenBoltBeforeReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	bool bPullBoltOnStopFireCmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 0x1]
	bool bPumpAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	bool bFillAmmoOnOpenBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]
	bool bLastRoundHoldOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1]
	float ReentryTimeAfterFireEvent;//[Offset: 0xd8, Size: 0x4]
	float ChargeTimeAfterPullBolt;//[Offset: 0xdc, Size: 0x4]
	float ReentryTimeAfterOpenByHandEvent;//[Offset: 0xe0, Size: 0x4]
	bool bNeedRemoveMagBeforeCheckBore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	bool bClearShellOnShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 0x1]
	float BoltMeshCloseAfterOpenTime;//[Offset: 0xe8, Size: 0x4]
	class Actor* CurShotBulletClass;//[Offset: 0xf0, Size: 0x8]
	class Actor* ShellInBulletClass;//[Offset: 0xf8, Size: 0x8]
	SGInventory* CachedFillingBullet;//[Offset: 0x100, Size: 0x8]
	enum BoreCheckState;//[Offset: 0x108, Size: 0x1]
	Character* BoreCheckCharacter;//[Offset: 0x110, Size: 0x8]
	FString BulletName;//[Offset: 0x118, Size: 0x10]
	int MaxBoreNum;//[Offset: 0x128, Size: 0x4]
	bool bBoreLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	class Actor[] DefaultBulletClass;//[Offset: 0x130, Size: 0x10]
	bool bBoresPumpFromMag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	class SGCaliber* CaliberClass;//[Offset: 0x148, Size: 0x8]
	bool bForbiddenFireOnFoldStock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	bool bForbiddenPullBoltOnFoldStock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]
	bool bForbiddenReloadOnFoldStock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 0x1]
	SGInventoryAssembleComponent* CachedAssembleComponent;//[Offset: 0x158, Size: 0x8]
	BoreInfo[] BoreList;//[Offset: 0x160, Size: 0x10]
	BoreInfo[] BoreListForRep;//[Offset: 0x170, Size: 0x10]
	class Actor* BulletClass;//[Offset: 0x180, Size: 0x8]
	StackableItemSourceInfo BulletFromPlayerInfo;//[Offset: 0x188, Size: 0x18]
	class Actor* BulletClassForRep;//[Offset: 0x1a0, Size: 0x8]
	bool bHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	bool bHoldingBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1]
	bool bChambering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa, Size: 0x1]
	TimerHandle TimerHandle;//[Offset: 0x1b0, Size: 0x8]
	TimerHandle BoltOpenTimerHandle;//[Offset: 0x1b8, Size: 0x8]
	TimerHandle HoldOpenTimerHandle;//[Offset: 0x1c0, Size: 0x8]
	void SetBoreInspectState(enum InBoreCheckState, Character* InCharacter);// 0x4fd1e3fee041
	void OnRep_BulletClass();// 0x4fd0e3fee041
	void OnRep_BoreList();// 0x4fcfe3fee041
	void OnRep_BoreCheckState();// 0x4fcee3fee041
	void OnPullBoltBegin();// 0x4fcde3fee041
	void OnHoldOpenTimer();// 0x4fcce3fee041
	void OnClientNotifyFireFailed();// 0x4fcbe3fee041
	bool IsNeedPullBoltAfterReloading();// 0x4fcae3fee041
	StackableItemSourceInfo GetBulletFromPlayerInfo();// 0x4fc9e3fee041
	void BroadcastHoldingChanged();// 0x4fc8e3fee041

--------------------------------
Class: SGCaliber.Object

--------------------------------
Class: BoreInfo
	class Actor* BoreBullet;//[Offset: 0x0, Size: 0x8]
	bool bCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	StackableItemSourceInfo FromPlayerInfo;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: SGWeaponAssembleComponent.ActorComponent.Object
	SGInventory* CurrentFrontSight;//[Offset: 0xc8, Size: 0x8]
	SGInventory*[] SightListByPriority;//[Offset: 0xd0, Size: 0x10]
	SGInventory*[] IllegalSightList;//[Offset: 0xe0, Size: 0x10]
	SGInventory*[] CachedRangedScopeList;//[Offset: 0xf0, Size: 0x10]
	SGInventory*[] CachedRearSightList;//[Offset: 0x100, Size: 0x10]
	SGInventory*[] CachedFrontSightList;//[Offset: 0x110, Size: 0x10]
	SGInventory*[] CachedTiltingRearSightList;//[Offset: 0x120, Size: 0x10]
	SGInventory*[] CachedTiltingFrontSightList;//[Offset: 0x130, Size: 0x10]
	SGInventory* CachedMechanicalAim;//[Offset: 0x140, Size: 0x8]
	SGInventory* CachedMuzzleInventory;//[Offset: 0x148, Size: 0x8]
	SGInventory* CachedBarrelInventory;//[Offset: 0x150, Size: 0x8]
	SGInventory* CachedGastubeInventory;//[Offset: 0x158, Size: 0x8]
	SGInventory* CachedRecieverInventory;//[Offset: 0x160, Size: 0x8]
	SGInventory* CachedBipodInventory;//[Offset: 0x168, Size: 0x8]
	SGInventory* CachedForegripInventory;//[Offset: 0x170, Size: 0x8]
	SGInventory* CachedReargripInventory;//[Offset: 0x178, Size: 0x8]
	SGInventory* CachedHandguardInventory;//[Offset: 0x180, Size: 0x8]
	SGInventory*[] CachedSightBlockTestAdapters;//[Offset: 0x188, Size: 0x10]
	SGInventory*[] AssembledInventoryList;//[Offset: 0x198, Size: 0x10]
	SGInventory*[] AssembledInventoryList_CachedOnRefresh;//[Offset: 0x1a8, Size: 0x10]
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	Transform CachedForegripComponentTransform;//[Offset: 0x1c0, Size: 0x30]
	SightGroup[] SightGroupList;//[Offset: 0x1f0, Size: 0x10]
	FName AttachHandSocketName;//[Offset: 0x200, Size: 0x8]
	FName MagazineSocketName;//[Offset: 0x208, Size: 0x8]
	int AssembledAdapterTotalCount_Server;//[Offset: 0x210, Size: 0x4]
	SGInventory* CachedMagazine;//[Offset: 0x218, Size: 0x8]
	bool bClientPredictCurrentSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a, Size: 0x1]
	SGInventory* CurrentSight;//[Offset: 0x230, Size: 0x8]
	SGInventory* CurrentSight_Server;//[Offset: 0x238, Size: 0x8]
	int WeaponWidth;//[Offset: 0x244, Size: 0x4]
	int WeaponHeight;//[Offset: 0x248, Size: 0x4]
	float ErrorIronSightXAngle;//[Offset: 0x24c, Size: 0x4]
	float ErrorIronSightYAngle;//[Offset: 0x250, Size: 0x4]
	GameplayTagContainer FireRequireTagList;//[Offset: 0x258, Size: 0x20]
	FireRequireInfo[] AddedFireRequireTagList;//[Offset: 0x278, Size: 0x10]
	bool EnableIllegaSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	FName BipCheckSocketName;//[Offset: 0x28c, Size: 0x8]
	Vector BipCheckVec;//[Offset: 0x294, Size: 0xc]
	TimerHandle ResetSightTimeHandler;//[Offset: 0x2a8, Size: 0x8]
	SGInventory*[] AssembledInventory_Server;//[Offset: 0x2b0, Size: 0x10]
	SGInventory*[] AssembledInventory_Client;//[Offset: 0x2c0, Size: 0x10]
	bool bCanEverCaptureWeaponRT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1]
	bool bIsInFoldStockState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1]
	Vector FoldScopeMontageHandOffset;//[Offset: 0x2d4, Size: 0xc]
	SGInventory* CurrentAimCameraInv;//[Offset: 0x2e8, Size: 0x8]
	SGInventory* CurrentAlignFrontInv;//[Offset: 0x2f0, Size: 0x8]
	SGInventory* CurrentAimBaseInv;//[Offset: 0x2f8, Size: 0x8]
	void UpdateSightGroupList(SGInventory* SightInv, bool IsAdd);// 0x4fc6e3fee041
	void UpdateRearGripType();// 0x4fc5e3fee041
	void UpdateIronSightFoldUsingCache();// 0x4fc4e3fee041
	void UpdateFrontSight();// 0x4fc3e3fee041
	void UpdateForeGripType();// 0x4fc2e3fee041
	void UpdateCachedInv(SGInventory* Inv, bool bIsAssemble);// 0x4fc1e3fee041
	void UpdateAimCameraAndAimBaseInv();// 0x4fc0e3fee041
	void UnFoldAllTiltingIronSight();// 0x4fbfe3fee041
	void UnFoldAllIronSight();// 0x4fbee3fee041
	bool SightYZPlaneBlockTest(Vector WeaponRelativeLocation, float Radius, out const Transform AdapterWeaponRelativeTransform, out const SightBlockArea[] SightBlockAreas);// 0x4fbde3fee041
	void SetFoldScopeMontageHandOffset(Vector InOffset);// 0x4fbce3fee041
	void ServerSetFoldScopeMontageHandOffset(Vector InOffset);// 0x4fbbe3fee041
	void ServerSetCurrentSight(SGInventory* Sight);// 0x4fbae3fee041
	void ResetSightBlockTestAdapters();// 0x4fb9e3fee041
	void ResetReciever();// 0x4fb8e3fee041
	void ResetRearSight();// 0x4fb7e3fee041
	void ResetReargrip();// 0x4fb6e3fee041
	void ResetRangedScope();// 0x4fb5e3fee041
	void ResetMuzzle();// 0x4fb4e3fee041
	void ResetMagazine();// 0x4fb3e3fee041
	void ResetHandguard();// 0x4fb2e3fee041
	void ResetGastube();// 0x4fb1e3fee041
	void ResetFrontSight();// 0x4fb0e3fee041
	void ResetForegrip();// 0x4fafe3fee041
	void ResetCachedInventoryPart();// 0x4faee3fee041
	void ResetBipod();// 0x4fade3fee041
	void ResetBarrel();// 0x4face3fee041
	void RefreshCurrentSight();// 0x4fabe3fee041
	void OnWeaponOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x4faae3fee041
	void OnStartSpectating(SGCharacter* BeSpectatedPawn);// 0x4fa9e3fee041
	void OnRepCachedScopeAndRearSight();// 0x4fa8e3fee041
	void OnRep_RepAdapterTotalCount();// 0x4fa7e3fee041
	void OnRep_FoldStockStateChanged();// 0x4fa6e3fee041
	void OnRep_CurrentSight();// 0x4fa5e3fee041
	void OnRep_CachedMagazineChanged();// 0x4fa4e3fee041
	void OnInventoryGiveComplette();// 0x4fa3e3fee041
	void OnInventoryDisassembled(SGInventory* ChildInventory);// 0x4fa2e3fee041
	void OnInventoryAssembled(SGInventory* ChildInventory);// 0x4fa1e3fee041
	void OnClientInvDestroy(SGInventory* Inv);// 0x4fa0e3fee041
	void OnCharacterSetNewOwner(Character* Character, Actor* NewOwner);// 0x4f9fe3fee041
	void OnAllWeaponMeshLoaded();// 0x4f9ee3fee041
	bool IsTiltingSightTagMatch(SGInventory* TiltingRearSight, SGInventory* TiltingFrontSight);// 0x4f9de3fee041
	bool HaveIllegalSight();// 0x4f9ce3fee041
	SGInventory*[] GetTiltingRearSightList();// 0x4f9be3fee041
	SGInventory*[] GetRearSightList();// 0x4f9ae3fee041
	SGInventory*[] GetRangedScopeList();// 0x4f99e3fee041
	SGInventory* GetMatchAlignFrontInv(SGInventory* RearSight);// 0x4f98e3fee041
	SGInventory* GetMagazine();// 0x4f97e3fee041
	void GetGroupErgonomic(SGInventory* Sight, const SGInventory* OutRootSight, out int OutErgonomicValue);// 0x4f96e3fee041
	SGInventory*[] GetFrontSightList();// 0x4f95e3fee041
	Vector GetFoldScopeMontageHandOffset();// 0x4f94e3fee041
	bool GetAlignFrontSocketCosAngle(SGInventory* Adapter, Vector CompareDir, Vector AlignRearLocation, out float CosValue);// 0x4f93e3fee041
	bool GetAimBaseSocketCosAngle(SGInventory* Adapter, Vector CompareDir, Vector AimCameraLocation, out float CosValue);// 0x4f92e3fee041
	void FoldAllTiltingIronSight();// 0x4f91e3fee041
	void FoldAllIronSight();// 0x4f90e3fee041
	bool AdpterHasBothAlignRearAndAlignFront(SGInventory* Adapter);// 0x4f8fe3fee041

--------------------------------
Class: SightGroup
	int MostNegativeErgonomic;//[Offset: 0x0, Size: 0x4]
	SGInventory* RootSight;//[Offset: 0x8, Size: 0x8]
	SGInventory*[] SightList;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: FireRequireInfo
	GameplayTag FireTag;//[Offset: 0x0, Size: 0x8]
	SGInventory* TagInv;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SGWeaponAppearanceComponent.ActorComponent.Object
	AnimInstance* PlayerAnimInst;//[Offset: 0xd0, Size: 0x8]
	SkeletalMeshComponent* TargetParentMesh;//[Offset: 0xd8, Size: 0x8]
	int ForceAttachIndex;//[Offset: 0xe0, Size: 0x4]
	Transform BackWeaponAttachTransform;//[Offset: 0xf0, Size: 0x30]
	bool bDifferentWeaponAttachTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	Transform DTBackWeaponAttachTransform;//[Offset: 0x130, Size: 0x30]
	Vector HandWeaponOffset;//[Offset: 0x160, Size: 0xc]
	Transform RightHandWeaponOffsetWhenSprint;//[Offset: 0x170, Size: 0x30]
	FName WeaponBackAttachCustomSocket;//[Offset: 0x1a0, Size: 0x8]
	enum WeaponBackAttachType;//[Offset: 0x1a8, Size: 0x1]
	SkeletalMesh* DeferredCreatedWeaponMesh;//[Offset: 0x1b0, Size: 0x8]
	FName MeshAttachCharacterSocket;//[Offset: 0x1d0, Size: 0x8]
	FName MeshAttachCharacterSocket_Left;//[Offset: 0x1d8, Size: 0x8]
	FName MeshAttachCharacterSocket_Hang;//[Offset: 0x1e0, Size: 0x8]
	FName MeshAttachCharacterSocket_FPP;//[Offset: 0x1e8, Size: 0x8]
	bool bHangToBackWhenDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	FName SimpleMeshAttachSocketName;//[Offset: 0x1f4, Size: 0x8]
	Vector BackWeaponLeftAttachOffsetInLobby;//[Offset: 0x1fc, Size: 0xc]
	bool HideOnBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	SkeletalMeshComponent* WeaponMeshComp;//[Offset: 0x210, Size: 0x8]
	FName WeaponAttachSocket;//[Offset: 0x218, Size: 0x8]
	Vector WeaponGripOffset;//[Offset: 0x220, Size: 0xc]
	EffectParticleInfo FPFireTemplate;//[Offset: 0x230, Size: 0x50]
	EffectParticleInfo TPFireTemplate;//[Offset: 0x280, Size: 0x50]
	EffectParticleInfo FogTemplate;//[Offset: 0x2d0, Size: 0x50]
	EffectParticleInfo FireLightTemplate;//[Offset: 0x320, Size: 0x50]
	float IntensityOfFireLight;//[Offset: 0x370, Size: 0x4]
	float FireLightSize;//[Offset: 0x374, Size: 0x4]
	EffectParticleInfo FireLightTemplate_LDR;//[Offset: 0x378, Size: 0x50]
	Vector IntensityColorOfFireLight_LDR;//[Offset: 0x3c8, Size: 0xc]
	Vector FireLightSize_LDR;//[Offset: 0x3d4, Size: 0xc]
	EffectParticleInfo FireLightTemplate3P;//[Offset: 0x3e0, Size: 0x50]
	float IntensityOfFireLight3P;//[Offset: 0x430, Size: 0x4]
	float FireLightSize3P;//[Offset: 0x434, Size: 0x4]
	EffectParticleInfo FireLightTemplate3P_LDR;//[Offset: 0x438, Size: 0x50]
	Vector IntensityColorOfFireLight3P_LDR;//[Offset: 0x488, Size: 0xc]
	Vector FireLightSize3P_LDR;//[Offset: 0x494, Size: 0xc]
	EffectParticleInfo FPMergeFireHDRTemplate;//[Offset: 0x4a0, Size: 0x50]
	EffectParticleInfo FPMergeFireLDRTemplate;//[Offset: 0x4f0, Size: 0x50]
	EffectParticleInfo TPMergeFireHDRTemplate;//[Offset: 0x540, Size: 0x50]
	EffectParticleInfo TPMergeFireLDRTemplate;//[Offset: 0x590, Size: 0x50]
	EffectParticleInfo CompositeFireTemplate3P;//[Offset: 0x5e0, Size: 0x50]
	EffectParticleInfo CompositeFireTemplate;//[Offset: 0x630, Size: 0x50]
	int AliveShotFireEffectNum;//[Offset: 0x680, Size: 0x4]
	int AliveShotFogEffectNum;//[Offset: 0x684, Size: 0x4]
	int AliveMergedEffectNum;//[Offset: 0x688, Size: 0x4]
	int AliveBulletShellEffectNum;//[Offset: 0x68c, Size: 0x4]
	float LastRenderTimeNotPlayEffect;//[Offset: 0x690, Size: 0x4]
	int BulletTraceParticleLiveCountMax;//[Offset: 0x694, Size: 0x4]
	int FireCountShowContinuousFireFog;//[Offset: 0x698, Size: 0x4]
	EffectParticleInfo ShellTemplate;//[Offset: 0x6a0, Size: 0x50]
	bool bCustomShellADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]
	EffectParticleInfo ShellADSTemplate;//[Offset: 0x6f8, Size: 0x50]
	bool bCustomShellParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 0x1]
	ShellParticleInfo ShellParticleInfo;//[Offset: 0x74c, Size: 0xa0]
	ShellParticleInfo ShellParticleADSInfo;//[Offset: 0x7ec, Size: 0xa0]
	EffectParticleInfo SmokeTemplate;//[Offset: 0x890, Size: 0x50]
	int SmokeEffectContinuousCount;//[Offset: 0x8e0, Size: 0x4]
	Vector CompositeFireLightSize;//[Offset: 0x8e4, Size: 0xc]
	Vector CompositeFireLightColor;//[Offset: 0x8f0, Size: 0xc]
	Vector CompositeFireLightSize3P;//[Offset: 0x8fc, Size: 0xc]
	Vector CompositeFireLightColor3P;//[Offset: 0x908, Size: 0xc]
	SGPooledFireEffect* PooledFogEffect;//[Offset: 0x918, Size: 0x8]
	ParticleSystemComponent* FogEffectPSC;//[Offset: 0x920, Size: 0x8]
	float FogOpacityDecSpeed;//[Offset: 0x928, Size: 0x4]
	<enum,CachePooledEffectActorQueueInfo> PooledEffectLiveQueuesMap;//[Offset: 0x938, Size: 0x50]
	<enum,CachePSCQueueInfo> PooledPSCQueuesMap;//[Offset: 0x988, Size: 0x50]
	ParticleSystemComponent* WeaponPSC;//[Offset: 0x9d8, Size: 0x8]
	ParticleSystemComponent* WeaponShellPSC;//[Offset: 0x9e0, Size: 0x8]
	FName MuzzleSocket;//[Offset: 0x9ec, Size: 0x8]
	FName AdapterMuzzleSocket;//[Offset: 0x9f4, Size: 0x8]
	EffectParticleInfo BlastingFuseTemplate;//[Offset: 0xa00, Size: 0x50]
	SGPooledFireEffect* BlastingFusePooledEffect;//[Offset: 0xa50, Size: 0x8]
	int MaxCachedShellNum;//[Offset: 0xa58, Size: 0x4]
	void WeaponDetaching(bool bHangToBack);// 0x4efbe3fee041
	void WeaponAttaching();// 0x4efae3fee041
	void SpawnBulletTracerTimerFunc(SGFireShots Shots, class Actor AmmoClass, bool bFirstPerson);// 0x4ef9e3fee041
	void SpawnBulletTracer(out const SGFireShots Shots, class Actor AmmoClass, bool bFirstPerson);// 0x4ef8e3fee041
	void SetHiddenWeapon(bool bHidden, bool bSetByBackWeapon);// 0x4ef7e3fee041
	void RefreshComponent();// 0x4ef6e3fee041
	void OnWeaponOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x4ef5e3fee041
	void OnWeaponHiddenStateChanged(bool bHidden);// 0x4ef4e3fee041
	void OnWeaponAssembleFinished();// 0x4ef3e3fee041
	void OnWeaponAdapterDissassemble(SGInventory* ChildInventory);// 0x4ef2e3fee041
	void OnWeaponAdapterAssemble(SGInventory* ChildInventory);// 0x4ef1e3fee041
	void OnParticleTemplateLoadCompleted(enum EffectType);// 0x4ef0e3fee041
	void OnMergedFireEffectsTemplateLoadCompleted(enum EffectType);// 0x4eefe3fee041
	bool IsAttachedToBack();// 0x4eeee3fee041
	FName GetWeaponAttachSocket();// 0x4eede3fee041
	Transform GetRightHandWeaponOffsetWhenSprint();// 0x4eece3fee041
	bool GetIsHiddenOnBack();// 0x4eebe3fee041
	Vector GetHandWeaponOffset();// 0x4eeae3fee041
	bool CheckAndSetWeaponHideOnBack();// 0x4ee9e3fee041
	void AttachWeaponToBack();// 0x4ee8e3fee041

--------------------------------
Class: ShellParticleInfo
	Vector ShellParticleAccMin;//[Offset: 0x0, Size: 0xc]
	Vector ShellParticleAccMax;//[Offset: 0xc, Size: 0xc]
	Vector ShellParticleVelocityMin;//[Offset: 0x18, Size: 0xc]
	Vector ShellParticleVelocityMax;//[Offset: 0x24, Size: 0xc]
	Vector ShellParticleRateMin;//[Offset: 0x30, Size: 0xc]
	Vector ShellParticleRateMax;//[Offset: 0x3c, Size: 0xc]
	Vector ShellParticleLocationMin;//[Offset: 0x48, Size: 0xc]
	Vector ShellParticleLocationMax;//[Offset: 0x54, Size: 0xc]
	Vector ShellParticleRotaMin;//[Offset: 0x60, Size: 0xc]
	Vector ShellParticleRotaMax;//[Offset: 0x6c, Size: 0xc]
	Vector ShellParticleSizeMin;//[Offset: 0x78, Size: 0xc]
	Vector ShellParticleSizeMax;//[Offset: 0x84, Size: 0xc]
	float ShellParticleLifeTimeMin;//[Offset: 0x90, Size: 0x4]
	float ShellParticleLifeTimeMax;//[Offset: 0x94, Size: 0x4]
	float ShellParticleDragMin;//[Offset: 0x98, Size: 0x4]
	float ShellParticleDragMax;//[Offset: 0x9c, Size: 0x4]

--------------------------------
Class: SGPooledFireEffect.PooledActor.Actor.Object
	ParticleSystemComponent* FireParticleCmp;//[Offset: 0x328, Size: 0x8]
	SGWeaponEffectFOVComponent* ParticleFovComp;//[Offset: 0x330, Size: 0x8]
	SGInventory* Weapon;//[Offset: 0x338, Size: 0x8]
	void PoolEndPlay();// 0x4f7fe3fee041
	void PoolBeginPlay();// 0x4f7ee3fee041

--------------------------------
Class: SGWeaponEffectFOVComponent.SGCustomFOVRenderMatrixComponent.CustomRenderMatrixComponent.ActorComponent.Object
	SGCharacter* CharacterOwner;//[Offset: 0x1b8, Size: 0x8]

--------------------------------
Class: SGCustomFOVRenderMatrixComponent.CustomRenderMatrixComponent.ActorComponent.Object
	float CustomFOV;//[Offset: 0x10c, Size: 0x4]
	float ZoomCustomFOV;//[Offset: 0x110, Size: 0x4]
	float CustomFOVBlendSpeed;//[Offset: 0x114, Size: 0x4]
	bool bCanEverEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	SGCharacter* CachedCharacterOwner;//[Offset: 0x120, Size: 0x8]
	SGPCMCameraFOVComponent* CachedFOVComponent;//[Offset: 0x130, Size: 0x8]
	PrimitiveComponent* CachedPrimitiveComponent;//[Offset: 0x138, Size: 0x8]
	bool bEnableCustomFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 0x1]
	void OnStopSpectated(PlayerController* PC);// 0x3d0ce3fee041
	void OnStartSpectated(PlayerController* PC);// 0x3d0be3fee041
	void OnInventoryOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x3d0ae3fee041

--------------------------------
Class: SGPCMCameraFOVComponent.ActorComponent.Object
	SGCameraFOV*[] CameraFOVList;//[Offset: 0xe0, Size: 0x10]
	class SGCameraFOV[] CameraFOVClassList;//[Offset: 0xf0, Size: 0x10]
	bool bEnableBlendOnSwitchingViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	float BlendTime;//[Offset: 0x104, Size: 0x4]
	Pawn* CachedViewTargetPawn;//[Offset: 0x118, Size: 0x8]
	Character* CachedViewTaretForTick;//[Offset: 0x120, Size: 0x8]
	PlayerCameraManager* CachedPCM;//[Offset: 0x128, Size: 0x8]

--------------------------------
Class: SGCameraFOV.Object
	float FOV;//[Offset: 0x28, Size: 0x4]
	float BlendTime;//[Offset: 0x2c, Size: 0x4]
	void Initialize();// 0x38e5e3fee041
	float GetDesiredFOV(Pawn* ViewedPawn);// 0x38e4e3fee041
	float GetDefaultFov();// 0x38e3e3fee041
	float GetBlendTime();// 0x38e2e3fee041
	bool EvaluateBestFOV(PlayerCameraManager* CameraManager);// 0x38e1e3fee041

--------------------------------
Class: CachePooledEffectActorQueueInfo
	SGPooledFireEffect*[] AlivePooledEffectActorsQueue;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CachePSCQueueInfo
	ParticleSystemComponent*[] AlivePSCQueue;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SGUAMWeaponAnimationComponent.SGWeaponAnimationComponent.ActorComponent.Object
	SGUAMPerWeaponAnimationSets* PerWeaponAnimationSets;//[Offset: 0x518, Size: 0x8]

--------------------------------
Class: SGWeaponAnimationComponent.ActorComponent.Object
	bool bImmediateOrDefferLoadAnimationSet_InGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bImmediateOrDefferLoadAnimationSet_Lobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	SoftObjectPath CharacterAnimationSetsPath;//[Offset: 0xd0, Size: 0x18]
	SoftObjectPath PerWeaponAnimationSetsPath;//[Offset: 0xe8, Size: 0x18]
	class SGCharacterAnimationSets* CharacterAnimationSetsClass;//[Offset: 0x100, Size: 0x8]
	class SGPerWeaponAnimationSets* PerWeaponAnimationSetsClass;//[Offset: 0x108, Size: 0x28]
	Vector LeftArmOffset;//[Offset: 0x130, Size: 0xc]
	Vector RightHandOffset;//[Offset: 0x13c, Size: 0xc]
	Vector RightArmAimOffset;//[Offset: 0x148, Size: 0xc]
	Vector RightUpperArmOffset_ADS;//[Offset: 0x154, Size: 0xc]
	SGWeaponSwaySpringInfo WeaponSwaySpringInfo;//[Offset: 0x170, Size: 0x24]
	SGWeaponSwayADSInfo WeaponSwayADSInfo;//[Offset: 0x194, Size: 0x30]
	FName WeaponOriginBoneName;//[Offset: 0x1c4, Size: 0x8]
	FName WeaponGripBoneName;//[Offset: 0x1cc, Size: 0x8]
	FString[] PreloadCustomAnimationsForAI;//[Offset: 0x1e8, Size: 0x10]
	AnimSequence*[] BaseForeGrips;//[Offset: 0x1f8, Size: 0x10]
	<AnimSequence*> BaseForeCharacterGrips;//[Offset: 0x208, Size: 0x50]
	FName BaseGripOffsetCurveName_X;//[Offset: 0x258, Size: 0x8]
	FName BaseGripOffsetCurveName_Y;//[Offset: 0x260, Size: 0x8]
	FName BaseGripOffsetCurveName_Z;//[Offset: 0x268, Size: 0x8]
	Vector ForeGripOffset;//[Offset: 0x2cc, Size: 0xc]
	SGCharacter* CurrentWeaponOwner;//[Offset: 0x2f0, Size: 0x8]
	enum CurrentPreloadAnimationMode;//[Offset: 0x2f8, Size: 0x1]
	float DetachMeshTimePercent;//[Offset: 0x2fc, Size: 0x4]
	float AttachMeshTimePercent;//[Offset: 0x300, Size: 0x4]
	SGWeaponLocalAnimInfo LocalAnimInfo;//[Offset: 0x308, Size: 0x98]
	SGWeaponRepAnimInfo RepAnimInfo;//[Offset: 0x3a0, Size: 0xa8]
	SGWeaponRepStopAnimInfo RepStopAnimInfo;//[Offset: 0x448, Size: 0x98]
	AnimMontage* LastPlayAnimMontage3P;//[Offset: 0x4e0, Size: 0x8]
	void WeaponAnimationJumpToSection(AnimMontage* MontagePlaying, FName SectionName);// 0x4ee7e3fee041
	void TryPreLoadAnimations(SGInventory* Weapon);// 0x4ee6e3fee041
	void StopWeaponAnimation(AnimMontage* MontagePlaying, float BlendOutTime);// 0x4ee5e3fee041
	void RefreshForeGripOffset();// 0x4ee4e3fee041
	void PlayWeaponAnimation(AnimMontage* MontageToPlay, FName SectionName, float RateOverride, float StartTime, bool bReplayWhileIsPlaying);// 0x4ee3e3fee041
	void PlayAdapterAnimation(enum AnimType);// 0x4ee2e3fee041
	void OnRep_RepStopAnimInfo();// 0x4ee1e3fee041
	void OnRep_RepAnimInfo();// 0x4ee0e3fee041
	void OnOwnerCharacterSexChanged(enum CharacterSex);// 0x4edfe3fee041
	void OnCurrentWeaponChanged(SGInventory* NewWeapon);// 0x4edee3fee041
	bool ImmediateOrDefferLoadAnimationSet();// 0x4edde3fee041
	AnimMontage* GetWeaponAnimation(FString AniamtionName);// 0x4edce3fee041
	void GetTriggerOffset(out Vector OutTriggerOffset);// 0x4edbe3fee041
	AnimMontage* GetHandAnimationSoftPath(FString AnimationName);// 0x4edae3fee041
	AnimMontage* GetHandAnimation(FString AniamtionName);// 0x4ed9e3fee041
	void GetForeGripOffset(out Vector OutForeGripOffset, enum ForegripType, AnimSequence* PlayGripAnimation, float bDisableKeepForeGripOffset);// 0x4ed8e3fee041
	AnimSequence* GetDTCustomizeSequence(FString AniamtionName);// 0x4ed7e3fee041

--------------------------------
Class: SGCharacterAnimationSets.Object
	class SGCharacterAnimationSetsPerCharacterSex* Male;//[Offset: 0x28, Size: 0x28]
	class SGCharacterAnimationSetsPerCharacterSex* Female;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: SGCharacterAnimationSetsPerCharacterSex.Object
	SGUAMLocomotionAnimationSet UAMStandAnimations_1P;//[Offset: 0x28, Size: 0xa0]
	SGUAMLocomotionAnimationSet UAMStandAnimations_3P;//[Offset: 0xc8, Size: 0xa0]
	SGUAMLocomotionAnimationSet UAMCrouchAnimations_1P;//[Offset: 0x168, Size: 0xa0]
	SGUAMLocomotionAnimationSet UAMCrouchAnimations_3P;//[Offset: 0x208, Size: 0xa0]
	SGUAMLocomotionAnimationSet UAMProneAnimations_1P;//[Offset: 0x2a8, Size: 0xa0]
	SGUAMLocomotionAnimationSet UAMProneAnimations_3P;//[Offset: 0x348, Size: 0xa0]
	SGUAMLocomotionAnimationSet UAMDBNOAnimations_1P;//[Offset: 0x3e8, Size: 0xa0]
	SGUAMLocomotionAnimationSet UAMDBNOAnimations_3P;//[Offset: 0x488, Size: 0xa0]
	SGUAMLocomotionAnimationSet UAMCasualAnimations_1P;//[Offset: 0x528, Size: 0xa0]
	SGUAMLocomotionAnimationSet UAMCasualAnimations_3P;//[Offset: 0x5c8, Size: 0xa0]
	SGUAMJumpAnimationSet UAMJumpAnimations_1P;//[Offset: 0x668, Size: 0x30]
	SGUAMJumpAnimationSet UAMJumpAnimations_3P;//[Offset: 0x698, Size: 0x30]
	SGUAMTransitionAnimationSet UAMTransitionAnimations_1P;//[Offset: 0x6c8, Size: 0x88]
	SGUAMTransitionAnimationSet UAMTransitionAnimations_3P;//[Offset: 0x750, Size: 0x88]
	SGUAMInteractionAnimationSet UAMInteractionAnimations_1P;//[Offset: 0x7d8, Size: 0xf0]
	SGUAMInteractionAnimationSet UAMInteractionAnimations_3P;//[Offset: 0x8c8, Size: 0xf0]
	SGUAMTakeHitAnimationSet TakeHitAnimationSet;//[Offset: 0x9b8, Size: 0x30]
	<FString,AnimMontage*> UAMCustomAnimations;//[Offset: 0x9e8, Size: 0x50]
	<FString,AnimSequence*> UAMDTAnimSequences;//[Offset: 0xa38, Size: 0x50]
	SGHeadwearAnimationSet HeadwearAnimationSet;//[Offset: 0xa88, Size: 0xa0]
	SGVaultAnimationSet VaultAnimationSet;//[Offset: 0xb28, Size: 0x10]

--------------------------------
Class: SGUAMLocomotionAnimationSet
	AnimSequence* Idle;//[Offset: 0x0, Size: 0x8]
	AnimSequence* IdleLeanLeft;//[Offset: 0x8, Size: 0x8]
	AnimSequence* IdleLeanRight;//[Offset: 0x10, Size: 0x8]
	AimOffsetBlendSpace* AimOffset;//[Offset: 0x18, Size: 0x8]
	AimOffsetBlendSpace* AimOffsetLeanLeft;//[Offset: 0x20, Size: 0x8]
	AimOffsetBlendSpace* AimOffsetLeanRight;//[Offset: 0x28, Size: 0x8]
	BlendSpaceBase* Locomotion;//[Offset: 0x30, Size: 0x8]
	BlendSpaceBase* Locomotion_Fracture;//[Offset: 0x38, Size: 0x8]
	AnimSequence* Locomotion_HandSway;//[Offset: 0x40, Size: 0x8]
	BlendSpaceBase* WalkLocomotion;//[Offset: 0x48, Size: 0x8]
	BlendSpaceBase* RunLocomotion;//[Offset: 0x50, Size: 0x8]
	BlendSpaceBase* SprintLocomotion;//[Offset: 0x58, Size: 0x8]
	BlendSpaceBase* MovementAccelerationLeanBS;//[Offset: 0x60, Size: 0x8]
	AnimSequence* TurnLeft90;//[Offset: 0x68, Size: 0x8]
	AnimSequence* TurnRight90;//[Offset: 0x70, Size: 0x8]
	AnimSequence* TurnLeft180;//[Offset: 0x78, Size: 0x8]
	AnimSequence* TurnRight180;//[Offset: 0x80, Size: 0x8]
	BlendSpaceBase* MovingStartBS;//[Offset: 0x88, Size: 0x8]
	BlendSpaceBase* MovingStopBS;//[Offset: 0x90, Size: 0x8]
	BlendSpaceBase* MovingPivotBS;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: SGUAMJumpAnimationSet
	AnimSequence* JumpStart;//[Offset: 0x0, Size: 0x8]
	AnimSequence* JumpLoop;//[Offset: 0x8, Size: 0x8]
	AnimSequence* JumpEnd;//[Offset: 0x10, Size: 0x8]
	BlendSpaceBase* RunJumpStart;//[Offset: 0x18, Size: 0x8]
	BlendSpaceBase* RunJumpLoop;//[Offset: 0x20, Size: 0x8]
	BlendSpaceBase* RunJumpEnd;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SGUAMTransitionAnimationSet
	BlendSpaceBase* TransitionAnimationSet;//[Offset: 0x0, Size: 0x8]
	AnimSequence* StandToCrouch;//[Offset: 0x8, Size: 0x8]
	AnimSequence* StandToProne;//[Offset: 0x10, Size: 0x8]
	AnimSequence* SprintToProne;//[Offset: 0x18, Size: 0x8]
	AnimSequence* CrouchToStand;//[Offset: 0x20, Size: 0x8]
	AnimSequence* CrouchToProne;//[Offset: 0x28, Size: 0x8]
	AnimSequence* ProneToStand;//[Offset: 0x30, Size: 0x8]
	AnimSequence* ProneToCrouch;//[Offset: 0x38, Size: 0x8]
	AnimSequence* StandToDBNO;//[Offset: 0x40, Size: 0x8]
	AnimSequence* SprintToDBNO;//[Offset: 0x48, Size: 0x8]
	AnimSequence* CrouchToDBNO;//[Offset: 0x50, Size: 0x8]
	AnimSequence* ProneToDBNO;//[Offset: 0x58, Size: 0x8]
	AnimSequence* DBNOToCrouch;//[Offset: 0x60, Size: 0x8]
	AnimSequence* DBNOToProne;//[Offset: 0x68, Size: 0x8]
	BlendSpaceBase* StandToSprint;//[Offset: 0x70, Size: 0x8]
	BlendSpaceBase* SprintToStand;//[Offset: 0x78, Size: 0x8]
	BlendSpaceBase* SprintToCrouch;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: SGUAMInteractionAnimationSet
	AnimMontage* Pickup;//[Offset: 0x0, Size: 0x28]
	AnimMontage* PushDoor;//[Offset: 0x28, Size: 0x28]
	AnimMontage* PullDoor;//[Offset: 0x50, Size: 0x28]
	AnimMontage* KeyDoor;//[Offset: 0x78, Size: 0x28]
	AnimMontage* CardDoor;//[Offset: 0xa0, Size: 0x28]
	AnimMontage* Rescue;//[Offset: 0xc8, Size: 0x28]

--------------------------------
Class: SGUAMTakeHitAnimationSet
	BlendSpaceBase* TakeHitHead;//[Offset: 0x0, Size: 0x8]
	BlendSpaceBase* TakeHitChest;//[Offset: 0x8, Size: 0x8]
	BlendSpaceBase* TakeHitLeftLeg;//[Offset: 0x10, Size: 0x8]
	BlendSpaceBase* TakeHitRightLeg;//[Offset: 0x18, Size: 0x8]
	BlendSpaceBase* TakeHitRightArm;//[Offset: 0x20, Size: 0x8]
	BlendSpaceBase* TakeHitLeftArm;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SGHeadwearAnimationSet
	<enum,AnimMontage*> PutUpHeadwearMap;//[Offset: 0x0, Size: 0x50]
	<enum,AnimMontage*> PutDownHeadwearMap;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: SGVaultAnimationSet
	AnimMontage* Vault;//[Offset: 0x0, Size: 0x8]
	AnimMontage* Climb;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SGWeaponSwaySpringInfo
	float SpringStiffness;//[Offset: 0x0, Size: 0x4]
	float SpringDamping;//[Offset: 0x4, Size: 0x4]
	float SpringClamp;//[Offset: 0x8, Size: 0x4]
	float SpringAlpha;//[Offset: 0xc, Size: 0x4]
	float SpringInterpSpeed;//[Offset: 0x10, Size: 0x4]
	Vector SpringPivotOffset;//[Offset: 0x14, Size: 0xc]
	float AngularVelocityToMaxWeaponShake;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SGWeaponSwayADSInfo
	float SmoothAngularVelocityInterpSpeed;//[Offset: 0x0, Size: 0x4]
	Vector2D AngularVelocityNormalizedRange_Yaw;//[Offset: 0x4, Size: 0x8]
	Vector2D AngularVelocityNormalizedRange_Pitch;//[Offset: 0xc, Size: 0x8]
	Vector2D ADSWeaponSwayClamp_Yaw;//[Offset: 0x14, Size: 0x8]
	Vector2D ADSWeaponSwayClamp_Pitch;//[Offset: 0x1c, Size: 0x8]
	float WeaponSwayDelay_Yaw;//[Offset: 0x24, Size: 0x4]
	float WeaponSwayDelay_Pitch;//[Offset: 0x28, Size: 0x4]
	float WeaponSwayOffsetScaler_ADS;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: SGWeaponLocalAnimInfo
	SGMontagePlayParams CharacterMontageParams;//[Offset: 0x0, Size: 0x48]
	SGMontagePlayParams WeaponMontageParams;//[Offset: 0x48, Size: 0x48]
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: SGWeaponRepAnimInfo
	SGMontagePlayParams CharacterMontageParams;//[Offset: 0x0, Size: 0x48]
	SGMontagePlayParams WeaponMontageParams;//[Offset: 0x48, Size: 0x48]
	float Timestamp;//[Offset: 0x90, Size: 0x4]
	float BlendOutTime;//[Offset: 0x94, Size: 0x4]
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	bool bDisableBlendIn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x98, Size: 0x1]
	bool bDisableBlendOut;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x98, Size: 0x1]
	float ForceBlendInTime;//[Offset: 0x9c, Size: 0x4]
	float ForceBlendOutTime;//[Offset: 0xa0, Size: 0x4]
	enum AdapterAnimType;//[Offset: 0xa4, Size: 0x1]
	bool bJumpSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa5, Size: 0x1]
	bool bLockAnimationSet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa5, Size: 0x1]

--------------------------------
Class: SGWeaponRepStopAnimInfo
	SGMontagePlayParams CharacterMontageParams;//[Offset: 0x0, Size: 0x48]
	SGMontagePlayParams WeaponMontageParams;//[Offset: 0x48, Size: 0x48]
	float Timestamp;//[Offset: 0x90, Size: 0x4]
	float BlendOutTime;//[Offset: 0x94, Size: 0x4]

--------------------------------
Class: SGUAMWeaponModifyBoneComponent.ActorComponent.Object
	CurveVector* BoneRotationModifier_Fire;//[Offset: 0xc0, Size: 0x8]
	CurveVector* BoneLocationModifier_Fire;//[Offset: 0xc8, Size: 0x8]
	CurveVector* ADSBoneRotationModifier_Fire;//[Offset: 0xd0, Size: 0x8]
	CurveVector* ADSBoneLocationModifier_Fire;//[Offset: 0xd8, Size: 0x8]
	CurveVector* CurrentLocationCurve;//[Offset: 0xe8, Size: 0x8]
	CurveVector* CurrentRotationCurve;//[Offset: 0xf0, Size: 0x8]
	Vector CurrentLocationValue;//[Offset: 0x100, Size: 0xc]
	Vector CurrentRotationValue;//[Offset: 0x10c, Size: 0xc]

--------------------------------
Class: SGGunSoundComponent.SGWeaponSoundComponent.ActorComponent.Object
	FString WeaponTypeSwitchGroup;//[Offset: 0xf0, Size: 0x10]
	FString WeaponNameSwitch;//[Offset: 0x100, Size: 0x10]
	bool bStableFireInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	float BasePriority;//[Offset: 0x114, Size: 0x4]
	float PriorityDropPerMeter;//[Offset: 0x118, Size: 0x4]
	float PriorityDropPerDegree;//[Offset: 0x11c, Size: 0x4]
	bool PlayBulletDropSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	FString BulletSizeSwitch;//[Offset: 0x128, Size: 0x10]
	float BulletDropDelay;//[Offset: 0x138, Size: 0x4]
	float GenSoundVisualInterval;//[Offset: 0x13c, Size: 0x4]
	FString ShootingMode;//[Offset: 0x140, Size: 0x10]
	float CurrentPriority;//[Offset: 0x150, Size: 0x4]
	bool IsMutedByPriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	SGFireRepInfo3P FireInfo;//[Offset: 0x170, Size: 0x38]
	SGWeaponAmmoComponent* AmmoComponent;//[Offset: 0x1a8, Size: 0x8]
	SGWeaponFiringComponent* FiringComponent;//[Offset: 0x1b0, Size: 0x8]
	SGWeaponFireIntervalComponent* FireIntervalComponent;//[Offset: 0x1b8, Size: 0x8]
	SGWeaponBoreComponent* BoreComp;//[Offset: 0x1c0, Size: 0x8]
	SGCharacter* CachedWeaponOwner;//[Offset: 0x1c8, Size: 0x8]
	SGGameStateSoundComponent* GameStateSoundComp;//[Offset: 0x1d0, Size: 0x8]
	bool bIsAutoFireSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]
	bool bIsBulletDropSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 0x1]
	bool bIsOwnedByLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fa, Size: 0x1]
	bool bIsSuppressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fb, Size: 0x1]
	FString LoadedFiringBank;//[Offset: 0x200, Size: 0x10]
	bool bIsMechBankLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	FString CachedAutoFiringEventName;//[Offset: 0x218, Size: 0x10]
	void TriggerSingleFiringSound();// 0x4588e3fee041
	void TriggerAutoFiringSound(bool bForceBurst);// 0x4587e3fee041
	void StopAutoFiringSound();// 0x4586e3fee041
	void OnWeaponOwnerDied(SGCharacter* Character);// 0x4585e3fee041
	void OnWeaponOwnerDestroyed(SGCharacter* Character);// 0x4584e3fee041
	void OnSuppressedBankLoadedCallback(enum Result);// 0x4583e3fee041
	void OnStartSpectating(SGCharacter* Character);// 0x4582e3fee041
	void OnNormalBankLoadedCallback(enum Result);// 0x4581e3fee041
	void OnCommonBankLoadedCallback(enum Result);// 0x4580e3fee041
	void OnBoltOpen();// 0x457fe3fee041
	void OnBankLoadedCallbackBecauseOfNoSuppressedBank(enum Result);// 0x457ee3fee041
	void CalculateSoundPriority();// 0x457de3fee041

--------------------------------
Class: SGWeaponSoundComponent.ActorComponent.Object
	void BankUnLoadComplete(enum Result);// 0x4557e3fee041
	void BankLoadComplete(enum Result);// 0x4556e3fee041

--------------------------------
Class: SGWeaponAmmoComponent.ActorComponent.Object
	int OriginalClipAmmoCount;//[Offset: 0xc8, Size: 0x4]
	bool bInitialAmmoEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	bool bAllowAutoChangeMagazineNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe7, Size: 0x1]
	int WeaponAmmoCost;//[Offset: 0xe8, Size: 0x4]
	int ClipAmmoCount;//[Offset: 0xec, Size: 0x4]
	float AmmoGravityScale;//[Offset: 0xf0, Size: 0x4]
	float AmmoResistanceFactorScale;//[Offset: 0xf4, Size: 0x4]
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	Actor* CachedToFillAmmo;//[Offset: 0x100, Size: 0x8]
	void ServerCostAmmo();// 0x4f7de3fee041
	void ServerChangeClip(bool bReloading);// 0x4f7ce3fee041
	int GetMaxAmmoCount();// 0x4f7be3fee041
	int GetClipAmmoCount();// 0x4f7ae3fee041
	int GetAmmoCountInMag();// 0x4f79e3fee041
	int GetAmmoCountInBore();// 0x4f78e3fee041
	int GetAmmoCount();// 0x4f77e3fee041
	int GetAmmoCost();// 0x4f76e3fee041

--------------------------------
Class: SGGameStateSoundComponent.ActorComponent.Object
	float DistantGunSoundCooldown;//[Offset: 0xc0, Size: 0x4]
	int MaxGunSoundInstances;//[Offset: 0xc4, Size: 0x4]
	SGGunSoundComponent*[] ActiveGunSoundInstances;//[Offset: 0xd0, Size: 0x10]
	SGCharacter*[] RealPlayerCharacters;//[Offset: 0xe0, Size: 0x10]
	<SGCharacter*,float> VirtualSoundInfoMap;//[Offset: 0xf0, Size: 0x50]
	void QuickChatEndCallback(FString EventName, FString ExternalFileName, Actor* Speaker);// 0x44afe3fee041

--------------------------------
Class: SGWeaponViewEffectComponent.ActorComponent.Object

--------------------------------
Class: SGCharacterWeightComponent.ActorComponent.Object
	float fDamage;//[Offset: 0xc0, Size: 0x4]
	float fJumpHeight;//[Offset: 0xc4, Size: 0x4]
	float fSpeed;//[Offset: 0xc8, Size: 0x4]
	float fDamageComplete;//[Offset: 0xcc, Size: 0x4]
	float fJumpHeightComplete;//[Offset: 0xd0, Size: 0x4]
	float fSpeedComplete;//[Offset: 0xd4, Size: 0x4]
	float WeightCondition1;//[Offset: 0xd8, Size: 0x4]
	float WeightCondition2;//[Offset: 0xdc, Size: 0x4]
	float MinRecoverScale;//[Offset: 0xe0, Size: 0x4]
	float MaxReduceScale;//[Offset: 0xe4, Size: 0x4]
	SoundInfluenceFactor OverweightSoundFactor;//[Offset: 0xe8, Size: 0x8]
	SoundInfluenceFactor CompletelyOverweightSoundFactor;//[Offset: 0xf0, Size: 0x8]
	bool bEnableWeightSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	class GameplayAbility* PersistentScaleMovementSpeedAbilityClass;//[Offset: 0x100, Size: 0x8]
	class GameplayAbility* PersistentScaleJumpZVelocityAbilityClass;//[Offset: 0x108, Size: 0x8]
	class GameplayAbility* PersistentScaleEnergyReduceSpeedAbilityClass;//[Offset: 0x110, Size: 0x8]
	class GameplayAbility* PersistentOverWeightAbilityClass;//[Offset: 0x128, Size: 0x8]
	class GameplayAbility* PersistentCompleteOverWeightAbilityClass;//[Offset: 0x130, Size: 0x8]
	class SGCharacterWeightAttributeSet* AttributeSetClass;//[Offset: 0x140, Size: 0x8]
	bool Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	bool IsOverWeight();// 0x4174e3fee041
	bool IsCompleteOverWeight();// 0x4173e3fee041
	float GetWeightMaxDistanceFactor();// 0x4172e3fee041
	float GetWeightMax();// 0x4171e3fee041
	float GetWeightLevelFactor();// 0x4170e3fee041
	float GetWeight();// 0x416fe3fee041
	float GetSpeedScale();// 0x416ee3fee041
	float GetJumpZScale();// 0x416de3fee041
	float GetJumpHeightScale();// 0x416ce3fee041
	float GetEnergyReduceScale();// 0x416be3fee041
	float GetEnergyRecoverScale();// 0x416ae3fee041
	float GetDamageScale();// 0x4169e3fee041
	float GetConditionWeight(bool bIsComplete);// 0x4168e3fee041

--------------------------------
Class: SGCharacterWeightAttributeSet.AttributeSet.Object
	float fCondition;//[Offset: 0x34, Size: 0x4]
	float fConditionComplete;//[Offset: 0x38, Size: 0x4]
	float WeightMax;//[Offset: 0x3c, Size: 0x4]
	void OnRep_WeightConditionChange();// 0x4167e3fee041

--------------------------------
Class: SGCharacterWeaponTraceComponent.ActorComponent.Object
	Vector WeaponTraceOffset;//[Offset: 0xc8, Size: 0xc]
	Vector CameraOffsetForWeaponTrace_1P;//[Offset: 0xd4, Size: 0xc]
	Vector CameraOffsetForWeaponTrace_3P;//[Offset: 0xe0, Size: 0xc]
	float Tolerance;//[Offset: 0xec, Size: 0x4]
	float WeaponTraceRadius;//[Offset: 0xf0, Size: 0x4]
	float InterpSpeed;//[Offset: 0xf4, Size: 0x4]
	Vector2D PullBackRange;//[Offset: 0xf8, Size: 0x8]
	Vector2D FoldRange;//[Offset: 0x100, Size: 0x8]
	FName WeaponTraceBone;//[Offset: 0x108, Size: 0x8]
	FName CameraToWeaponRootBone;//[Offset: 0x110, Size: 0x8]
	float WeaponMinLength_Long;//[Offset: 0x118, Size: 0x4]
	float ExtraTraceDistance_Long;//[Offset: 0x11c, Size: 0x4]
	WeaponTraceRightHandOffsetParam RightHandOffset_Long_1P;//[Offset: 0x120, Size: 0x24]
	WeaponTraceRightHandOffsetParam RightHandOffset_Long_3P;//[Offset: 0x144, Size: 0x24]
	Vector LHandJointOffset_Common;//[Offset: 0x168, Size: 0xc]
	float WeaponMinLength_Mid;//[Offset: 0x174, Size: 0x4]
	float ExtraTraceDistance_Mid;//[Offset: 0x178, Size: 0x4]
	WeaponTraceRightHandOffsetParam RightHandOffset_Mid_1P;//[Offset: 0x17c, Size: 0x24]
	WeaponTraceRightHandOffsetParam RightHandOffset_Mid_3P;//[Offset: 0x1a0, Size: 0x24]
	float ExtraTraceDistance_Short;//[Offset: 0x1c4, Size: 0x4]
	WeaponTraceRightHandOffsetParam RightHandOffset_Short_1P;//[Offset: 0x1c8, Size: 0x24]
	WeaponTraceRightHandOffsetParam RightHandOffset_Short_3P;//[Offset: 0x1ec, Size: 0x24]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	float AIProne_Trace_OffsetZ;//[Offset: 0x214, Size: 0x4]
	Vector AI_WeaponTrace_StartPointOffset;//[Offset: 0x218, Size: 0xc]
	float AI_MuzzleMeshLength;//[Offset: 0x224, Size: 0x4]
	<enum,float> WeaponMeshLengthDic;//[Offset: 0x228, Size: 0x50]
	Rotator RotOffset_RightHand;//[Offset: 0x278, Size: 0xc]
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2af, Size: 0x1]
	float FoldDelay;//[Offset: 0x2b0, Size: 0x4]
	float FoldDelayTick;//[Offset: 0x2b4, Size: 0x4]
	float FoldDelaySmoothInterpSpeed;//[Offset: 0x2b8, Size: 0x4]
	float EmptyHandTraceDistance;//[Offset: 0x2bc, Size: 0x4]
	FName EmptyHandTraceStartBone;//[Offset: 0x2c0, Size: 0x8]
	Vector EmptyHandPullBack_LocOffset;//[Offset: 0x2c8, Size: 0xc]
	float EmptyHandTraceRadius;//[Offset: 0x2d4, Size: 0x4]
	Vector Empty_RHandJointOffset;//[Offset: 0x2d8, Size: 0xc]
	TickSettingBaseOnURO TickSetting_HighEndDevice;//[Offset: 0x2e8, Size: 0x10]
	TickSettingBaseOnURO TickSetting_LowEndDevice;//[Offset: 0x2f8, Size: 0x10]
	float TickTimeScalerWhenIdle;//[Offset: 0x308, Size: 0x4]
	SGInventory* CurrentWeapon;//[Offset: 0x310, Size: 0x8]
	Actor*[] IgnoreActor;//[Offset: 0x410, Size: 0x10]
	byte[] AIObjectTypeQuery;//[Offset: 0x420, Size: 0x10]
	SGCharacterWeaponManagerComponent* WeaponMgr;//[Offset: 0x430, Size: 0x8]
	AnimInstance* AnimIns;//[Offset: 0x448, Size: 0x8]
	SGCharacterMovementComponent* MovementComponent;//[Offset: 0x450, Size: 0x8]
	SGCharacterAnimInstance* CharacterAnimInstance;//[Offset: 0x458, Size: 0x8]
	void EnableDebug(bool bOpen);// 0x4166e3fee041

--------------------------------
Class: WeaponTraceRightHandOffsetParam
	Rotator RotationOffset;//[Offset: 0x0, Size: 0xc]
	Vector LocationOffset_PullBack;//[Offset: 0xc, Size: 0xc]
	Vector LocationOffset_Fold;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: TickSettingBaseOnURO
	TickSettingPerURO[] URO;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TickSettingPerURO
	bool bEnableUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float TickInternal;//[Offset: 0x4, Size: 0x4]
	float TickAccumulate;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SGCharacterWeaponManagerComponent.ActorComponent.Object
	SGInventory*[] CarriedAmmoList;//[Offset: 0xc8, Size: 0x10]
	class SGInventory* EmptyHandInvClass;//[Offset: 0xd8, Size: 0x8]
	SGInventory* EmptyHand;//[Offset: 0xe0, Size: 0x8]
	SGInventory* LeftHandWeapon;//[Offset: 0xe8, Size: 0x8]
	SGInventory* CurrentWeapon;//[Offset: 0xf0, Size: 0x8]
	SGWeaponChangedInfo CurrentWeaponChangeInfo;//[Offset: 0xf8, Size: 0xb0]
	bool bIsThrowableWeaponThrowDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	SGInventory* LastUsedLeftHandWeapon;//[Offset: 0x1b0, Size: 0x8]
	SGInventory* CurrentThrowWeapon;//[Offset: 0x1b8, Size: 0x8]
	StaticMeshComponent* CachedBullet;//[Offset: 0x1c0, Size: 0x8]
	SGInventory* CurrentSpecialWeapon;//[Offset: 0x1c8, Size: 0x8]
	SGInventory* LastUsedWeapon;//[Offset: 0x1d0, Size: 0x8]
	SGInventory* LastUsedWeaponWhenUseInventory;//[Offset: 0x1d8, Size: 0x8]
	SGInventory* LastNoneThrowableWeapon;//[Offset: 0x1e0, Size: 0x8]
	bool bInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	bool bEnableAutoGive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 0x1]
	SGInventory*[] MainWeaponList;//[Offset: 0x1f8, Size: 0x10]
	SGInventory*[] ThrowWeaponList;//[Offset: 0x208, Size: 0x10]
	SGInventory*[] SpecialWeaponList;//[Offset: 0x218, Size: 0x10]
	SGInventory*[] CarriedMagazineList;//[Offset: 0x228, Size: 0x10]
	SGInventory*[] WeaponList;//[Offset: 0x238, Size: 0x10]
	class SGWeaponManagerAttributeSet* AttributeSetClass;//[Offset: 0x248, Size: 0x8]
	float fBallisticEffectAngle;//[Offset: 0x250, Size: 0x4]
	float MaxBulletPassByDistance;//[Offset: 0x254, Size: 0x4]
	float MaxBulletPassByDistanceInHud;//[Offset: 0x258, Size: 0x4]
	float MaxFillContainerTimeScale;//[Offset: 0x25c, Size: 0x4]
	float ZoomingAlphaWhenLean;//[Offset: 0x260, Size: 0x4]
	float ZoomingAlphaWhenProne;//[Offset: 0x264, Size: 0x4]
	float ZoomingAlpha;//[Offset: 0x268, Size: 0x4]
	bool bCanReloadDuringCheckMag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 0x1]
	float ReloadStartTimeDuringCheckMag;//[Offset: 0x270, Size: 0x4]
	CurveFloat* Curve_SwitchWeaponRate_ErgonomicsScale;//[Offset: 0x290, Size: 0x8]
	<int,float> SwitchWeaponRate_ItemTypeScale;//[Offset: 0x298, Size: 0x50]
	SGInventory* StashedDestWeapon;//[Offset: 0x300, Size: 0x8]
	class SGInventory* DefaultEquipWeaponClass;//[Offset: 0x308, Size: 0x8]
	bool bDefaultEquipWeaponInfiniteFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool bForcePullBoltReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]
	TimerHandle KeepFireTimeHandler;//[Offset: 0x318, Size: 0x8]
	TimerHandle AutoBurstFireTimeHandler;//[Offset: 0x328, Size: 0x8]
	void ValidateCurrentWeapon();// 0x3b5fe3fee041
	void UpdateLocalAttachments();// 0x3b5ee3fee041
	void UnloadMagazine();// 0x3b5de3fee041
	void TickAutoBurstFire();// 0x3b5ce3fee041
	void ThrowWeaponGroup(int Index);// 0x3b5be3fee041
	void ThrowWeapon(SGInventory* InWeapon);// 0x3b5ae3fee041
	void SwitchToWeaponGroup(int Index);// 0x3b59e3fee041
	void SwitchToThrowWeapon();// 0x3b58e3fee041
	void SwitchToSpecialWeapon(enum subtype);// 0x3b57e3fee041
	bool SwitchToPrevWeapon();// 0x3b56e3fee041
	bool SwitchToNextWeapon();// 0x3b55e3fee041
	void SwitchToNextThrowableWeapon();// 0x3b54e3fee041
	void SwitchToMeleeWeapon();// 0x3b53e3fee041
	bool SwitchToLastUsedWeapon();// 0x3b52e3fee041
	bool SwitchToEmptyHand(bool bLastWeaponRemoved);// 0x3b51e3fee041
	bool SwitchToDestWeapon(SGInventory* TargetInv, bool bLastWeaponRemoved);// 0x3b50e3fee041
	void SwitchToBestWeapon(bool bLastWeaponRemoved);// 0x3b4fe3fee041
	void SwitchFirstAndSecondWeapon();// 0x3b4ee3fee041
	void StopPreFire();// 0x3b4de3fee041
	void StopFire_LeftHand(byte FireModeNum);// 0x3b4ce3fee041
	void StopFire(byte FireModeNum);// 0x3b4be3fee041
	void StartFire_LeftHand(byte FireModeNum);// 0x3b4ae3fee041
	void StartFire(byte FireModeNum);// 0x3b49e3fee041
	void SetLeftHandWeaponThroughComponent(SGInventory* InLeftHandWeapon, bool bLeftHandWeapon);// 0x3b48e3fee041
	void SetLeftHandWeapon(SGInventory* InLeftHandWeapon);// 0x3b47e3fee041
	void SetInfiniteAmmo(bool bInfinite);// 0x3b46e3fee041
	void SetFreeAssemble(bool bFree);// 0x3b45e3fee041
	void SetCurrentWeaponWithPlayMontage(SGInventory* InCurrentWeapon, out SGMontagePlayParams CharacterMontageParams, out SGMontagePlayParams WeaponMontageParams, bool bLastWeaponRemoved, bool bDisableBlendIn);// 0x3b44e3fee041
	void SetCurrentWeaponNullTemp();// 0x3b43e3fee041
	void SetCurrentWeaponAfterPlayMontage(SGInventory* InCurrentWeapon, out SGMontagePlayParams CharacterMontageParams, out SGMontagePlayParams WeaponMontageParams, bool bLastWeaponRemoved, bool bDisableBlendIn);// 0x3b42e3fee041
	void SetCurrentWeapon(SGInventory* InCurrentWeapon, bool bLastWeaponRemoved, bool bResetMontage, bool bReplicated);// 0x3b41e3fee041
	void ServerStopFire();// 0x3b40e3fee041
	void ServerSetThrowableWeaponThrowDown(bool bIsThrowDown);// 0x3b3fe3fee041
	void ServerSetLeftHandWeapon(SGInventory* InLeftHandWeapon);// 0x3b3ee3fee041
	void ServerSetInfiniteAmmo(bool bInfinite);// 0x3b3de3fee041
	void ServerSetFreeAssemble(bool bFree);// 0x3b3ce3fee041
	void ServerHoldGrenade();// 0x3b3be3fee041
	void ServerCancelFire(SGCharacter* Character);// 0x3b3ae3fee041
	void ServerAutoGive(bool bInEnableAutoGive);// 0x3b39e3fee041
	void ResetCurrentWeapon();// 0x3b38e3fee041
	void RemoveLeftHandWeapon(out SGInventory* InLeftHandWeapon);// 0x3b37e3fee041
	bool RemoveInventory(SGInventory* Inv);// 0x3b36e3fee041
	bool RemoveCarriedAmmo(SGInventory* InAmmoInv);// 0x3b35e3fee041
	void ReloadFast();// 0x3b34e3fee041
	void RefreshBackWeaponAttachPoint(SGInventory*[] NotRefreshList);// 0x3b33e3fee041
	void PlayerSetupMod();// 0x3b32e3fee041
	void PlayerSetLowReady(bool bInOrOutLowReady);// 0x3b31e3fee041
	void PlayerInteraction(Actor* InteractActor);// 0x3b30e3fee041
	void PlayerCheckWeapon();// 0x3b2fe3fee041
	void PlayerCheckMagazine();// 0x3b2ee3fee041
	void PlayerCheckFireMode();// 0x3b2de3fee041
	void PlayerCheckBore();// 0x3b2ce3fee041
	void OnThrowWeaponChanged();// 0x3b2be3fee041
	void OnSpectatedStateChanged(PlayerController* PC);// 0x3b2ae3fee041
	void OnSetNewOwner(Actor* NewOwner);// 0x3b29e3fee041
	void OnRepController(Controller* Controller);// 0x3b28e3fee041
	void OnRep_UpdateLeftHandWeapon();// 0x3b27e3fee041
	void OnRep_UpdateCurrentWeaponInfo(SGWeaponChangedInfo LastWeaponInfo);// 0x3b26e3fee041
	void OnRep_UpdateCurrentWeapon(SGInventory* LastWeapon);// 0x3b25e3fee041
	void OnRep_EmptyHand();// 0x3b24e3fee041
	void OnRep_CurrentThrowWeapon();// 0x3b23e3fee041
	void OnReconnect(PlayerController* ReConnectPlayerController);// 0x3b22e3fee041
	void OnPlayWeaponMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x3b21e3fee041
	void OnMontageTimeUp();// 0x3b20e3fee041
	void OnInventoryMoved(SGInventory* Inventory, out const InventoryGridInfo OldGridInfo, out const InventoryGridInfo NewGridInfo);// 0x3b1fe3fee041
	void OnInfiniteAmmo();// 0x3b1ee3fee041
	void OnCurrentWeaponChangeIn1PPlayer();// 0x3b1de3fee041
	void OnCharaterLoadProtectFinish(Character* Character, bool ProtectState);// 0x3b1ce3fee041
	void OnCharacterRemoveInventoryEvent(Character* Character, SGInventory* Inventory);// 0x3b1be3fee041
	void OnCharacterReadyToPlay(SGCharacter* Character);// 0x3b1ae3fee041
	void OnCharacterInventoryGiveComplete();// 0x3b19e3fee041
	void OnCharacterAddInventoryEvent(Character* Character, SGInventory* Inventory);// 0x3b18e3fee041
	void NetMulticastSpawnLargePhyActor(const HitResult Hit, class SGWeaponDamagePhysActor ImpactActorClass, float DamageAmount, int InPenetrationLevel);// 0x3b17e3fee041
	void LoadMagazine(SGInventory* TargetInventory);// 0x3b16e3fee041
	void KeepStartFire();// 0x3b15e3fee041
	void KeepFire();// 0x3b14e3fee041
	bool IsEmptyHand();// 0x3b13e3fee041
	bool HasWeapon();// 0x3b12e3fee041
	SGInventory* GetSecondMainWeapon();// 0x3b11e3fee041
	SGInventory* GetNextThrowWeapon(const SGInventory* RefInvectory, bool bFindSameClass);// 0x3b10e3fee041
	SGInventory* GetNextSpecialWeapon(SGInventory* Current);// 0x3b0fe3fee041
	SGInventory* GetNextBestThrowWeapon(const SGInventory* RefInvectory);// 0x3b0ee3fee041
	SGInventory* GetMeleeWeapon();// 0x3b0de3fee041
	SGInventory* GetLeftHandWeapon();// 0x3b0ce3fee041
	SGInventory* GetLastUsedWeapon();// 0x3b0be3fee041
	SGInventory* GetInventory(class SGInventory InvClass, bool bExactClass);// 0x3b0ae3fee041
	SGInventory* GetFirstMainWeapon();// 0x3b09e3fee041
	SGInventory* GetFastThrowWeapon();// 0x3b08e3fee041
	SGInventory* GetEmptyHand();// 0x3b07e3fee041
	SGInventory* GetCurrentWeapon();// 0x3b06e3fee041
	SGInventory* GetCarriedAmmoInventory(class SGCaliber InCaliberType);// 0x3b05e3fee041
	SGInventory* GetCarriedAmmoCanReachedNotInVestAndPock(class SGCaliber InCaliberType);// 0x3b04e3fee041
	SGInventory* GetCarriedAmmoCanReachedByHand(class SGCaliber InCaliberType);// 0x3b03e3fee041
	int GetCarriedAmmo(class SGCaliber InCaliber);// 0x3b02e3fee041
	SGInventory* GetAssistWeapon();// 0x3b01e3fee041
	void GetAllWeapons(out SGInventory*[] OutWeaponList);// 0x3b00e3fee041
	void GetAllThrowWeaponInPos(out SGInventory*[] ItemArray, enum Pos);// 0x3affe3fee041
	SGInventory*[] GetAllCarriedAmmoInventoryReachable(class SGCaliber InCaliberType);// 0x3afee3fee041
	SGInventory*[] GetAllCarriedAmmoInventory(class SGCaliber InCaliberType);// 0x3afde3fee041
	SGInventory* FindBestWeaponToSwitch();// 0x3afce3fee041
	void DelayBeginPlay();// 0x3afbe3fee041
	int ConsumeMagazinedAmmo(SGInventory* TargetMagazine, int InConsumeCount);// 0x3afae3fee041
	int ConsumeCarriedAmmo(class SGCaliber InCaliberType, int InConsumeCount);// 0x3af9e3fee041
	void ChangeClipOnAmmo(SGInventory* TargetInventory);// 0x3af8e3fee041
	void ChangeClip_LeftWeapon();// 0x3af7e3fee041
	bool ChangeClip();// 0x3af6e3fee041
	bool CanThrowWeaponGroup(int Index);// 0x3af5e3fee041
	bool CanThrowWeapon(SGInventory* InWeapon);// 0x3af4e3fee041
	bool CanStartFire_LeftHand(byte FireModeNum);// 0x3af3e3fee041
	bool CanStartFire(byte FireModeNum);// 0x3af2e3fee041
	bool CanProcessWeaponState();// 0x3af1e3fee041
	void CancelSetCurrentWeaponAfterPlayMontage();// 0x3af0e3fee041
	void AutoGive(bool bInEnableAutoGive);// 0x3aefe3fee041
	bool AddWeapon(SGInventory* Inv);// 0x3aeee3fee041
	bool AddInventory(SGInventory* Inv);// 0x3aede3fee041
	bool AddCarriedAmmoByType(class SGCaliber InCaliberType, int InAddCount);// 0x3aece3fee041
	bool AddCarriedAmmo(SGInventory* NewAmmo);// 0x3aebe3fee041

--------------------------------
Class: SGWeaponChangedInfo
	SGInventory* DestWeapon;//[Offset: 0x0, Size: 0x8]
	SGInventory* LastWeapon;//[Offset: 0x8, Size: 0x8]
	SGMontagePlayParams CharacterMontageParams;//[Offset: 0x10, Size: 0x48]
	SGMontagePlayParams WeaponMontageParams;//[Offset: 0x58, Size: 0x48]
	float BlendOutTime;//[Offset: 0xa0, Size: 0x4]
	float BlendInTime;//[Offset: 0xa4, Size: 0x4]
	bool PlayMontageFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bDisableBlendIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	bool bDisableBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 0x1]

--------------------------------
Class: SGWeaponManagerAttributeSet.AttributeSet.Object
	float HaveExtraMainWeaponSlot;//[Offset: 0x34, Size: 0x4]
	float ChangeClipDurationScaleMultiplier;//[Offset: 0x38, Size: 0x4]
	float FillContainerDurationScaleMultiplier;//[Offset: 0x3c, Size: 0x4]
	float SwitchWeaponDurationScaleMultiplier;//[Offset: 0x40, Size: 0x4]
	float RecoilScaleMultiplier;//[Offset: 0x44, Size: 0x4]
	float SpreadScaleMultiplier;//[Offset: 0x48, Size: 0x4]
	float AimingScaleMultiplier;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: InventoryGridInfo
	Actor* OwnerActor;//[Offset: 0x0, Size: 0x8]
	Actor* ParentActor;//[Offset: 0x8, Size: 0x8]
	ItemGridInfo GridInfo;//[Offset: 0x10, Size: 0x8]
	ItemGridInfo StartGridPosition;//[Offset: 0x18, Size: 0x8]
	int ContainerIndex;//[Offset: 0x20, Size: 0x4]
	enum AttachPosition;//[Offset: 0x24, Size: 0x1]
	bool IsRotated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	uint64 ServerFrameCounter;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SGWeaponDamagePhysActor.Actor.Object
	float Damage;//[Offset: 0x2e0, Size: 0x4]
	Vector HitNormal;//[Offset: 0x2e4, Size: 0xc]
	int DamageLevel;//[Offset: 0x2f0, Size: 0x4]

--------------------------------
Class: SGCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bWantsToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 0x1]
	bool bWantsToDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb91, Size: 0x1]
	bool bWantsToSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb92, Size: 0x1]
	bool bWantsToSilentWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb93, Size: 0x1]
	bool bWantsToAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb94, Size: 0x1]
	bool bWantsToHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb95, Size: 0x1]
	float OptShouldDoMovementSimulation;//[Offset: 0xb98, Size: 0x4]
	bool bJumpCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9c, Size: 0x1]
	CurveFloat* AccelerationCurve;//[Offset: 0xba0, Size: 0x8]
	CurveFloat* AcceWeightScaleCurve;//[Offset: 0xba8, Size: 0x8]
	bool bSilentWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc0, Size: 0x1]
	float JumpCoolDownTime;//[Offset: 0xbc4, Size: 0x4]
	float NeedAddJumpCoolDown;//[Offset: 0xbc8, Size: 0x4]
	bool bHiSpeedFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbcd, Size: 0x1]
	float HeaveLandSpeed;//[Offset: 0xbd0, Size: 0x4]
	float HeaveLandMaxSpeed;//[Offset: 0xbd4, Size: 0x4]
	float NormalMaxAcceleration;//[Offset: 0xbd8, Size: 0x4]
	float SprintMaxAcceleration;//[Offset: 0xbdc, Size: 0x4]
	CurveFloat* JumpCoolDownCurveBySpeed;//[Offset: 0xbe0, Size: 0x8]
	SGTrapComponent* Trap;//[Offset: 0xbf8, Size: 0x8]
	SGFireTrapComponent* FireComp;//[Offset: 0xc00, Size: 0x8]
	PhysicsAsset* PhyscisAsset;//[Offset: 0xc08, Size: 0x8]
	SGCharacter* SGCharacterOwner;//[Offset: 0xd60, Size: 0x8]
	float MinCharacterMovementSpeed;//[Offset: 0xd6c, Size: 0x4]
	float MaxCharacterMovementSpeed;//[Offset: 0xd70, Size: 0x4]
	float StandBasicSpeed;//[Offset: 0xd74, Size: 0x4]
	<float,float> StandRunAngleSpeedSamples;//[Offset: 0xd78, Size: 0x50]
	<float,float> StandSprintAngleSpeedSamples;//[Offset: 0xdc8, Size: 0x50]
	float StandSprintSpeedScale;//[Offset: 0xe18, Size: 0x4]
	float StandSprintExhaustedSpeedScale;//[Offset: 0xe1c, Size: 0x4]
	float StandStrafeSpeedScale;//[Offset: 0xe20, Size: 0x4]
	float StandBackwardSpeedScale;//[Offset: 0xe24, Size: 0x4]
	float StandSilentWalkSpeedScale;//[Offset: 0xe28, Size: 0x4]
	float StandLeanWalkSpeedScale;//[Offset: 0xe2c, Size: 0x4]
	float CrouchBasicSpeed;//[Offset: 0xe30, Size: 0x4]
	float CrouchSprintSpeedScale;//[Offset: 0xe34, Size: 0x4]
	float CrouchSprintExhaustedSpeedScale;//[Offset: 0xe38, Size: 0x4]
	float CrouchStrafeSpeedScale;//[Offset: 0xe3c, Size: 0x4]
	float CrouchBackwardSpeedScale;//[Offset: 0xe40, Size: 0x4]
	float CrouchSilentWalkSpeedScale;//[Offset: 0xe44, Size: 0x4]
	float CrouchLeanWalkSpeedScale;//[Offset: 0xe48, Size: 0x4]
	float ProneBasicSpeed;//[Offset: 0xe4c, Size: 0x4]
	float ProneStrafeSpeedScale;//[Offset: 0xe50, Size: 0x4]
	float ProneBackwardSpeedScale;//[Offset: 0xe54, Size: 0x4]
	float ProneSilentWalkSpeedScale;//[Offset: 0xe58, Size: 0x4]
	float ProneLeanWalkSpeedScale;//[Offset: 0xe5c, Size: 0x4]
	float DBNOBasicSpeed;//[Offset: 0xe60, Size: 0x4]
	float DBNOStrafeSpeedScale;//[Offset: 0xe64, Size: 0x4]
	float DBNOBackwardSpeedScale;//[Offset: 0xe68, Size: 0x4]
	float WeakBasicSpeed;//[Offset: 0xe6c, Size: 0x4]
	bool bCanWalkOffLedgesWhenProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe70, Size: 0x1]
	bool bCanWalkOffLedgesWhenDBNO;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe70, Size: 0x1]
	float SpeedWarping_Scaler_Normal;//[Offset: 0xe74, Size: 0x4]
	float SpeedWarping_Scaler_ADS;//[Offset: 0xe78, Size: 0x4]
	float SpeedWarping_Scaler_OutOfEndurance;//[Offset: 0xe7c, Size: 0x4]
	float ClientAuthorityMaxSpeedExceedScale;//[Offset: 0xe80, Size: 0x4]
	float ClientAuthorityMaxZDiffPerSecond;//[Offset: 0xe84, Size: 0x4]
	float ServerMaxSpeedInCurrentMovePack;//[Offset: 0xe88, Size: 0x4]
	float TotalDeltaTimeInCurrentMovePack;//[Offset: 0xe8c, Size: 0x4]
	Vector ServerLocAfterLastMovePackProcessed;//[Offset: 0xe90, Size: 0xc]
	float ServerTimeStampAfterLastMovePackProcessed;//[Offset: 0xe9c, Size: 0x4]
	float MaxPositionErrorScaleDecreaseSpeed;//[Offset: 0xea0, Size: 0x4]
	float MaxPositionErrorScale;//[Offset: 0xea4, Size: 0x4]
	float MaxPositionErrorScale_Min;//[Offset: 0xea8, Size: 0x4]
	float StandCollisionRadius;//[Offset: 0xf00, Size: 0x4]
	bool bUseInputAixCheckMoveForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf04, Size: 0x1]
	float fTimerRate;//[Offset: 0xf10, Size: 0x4]
	<enum,float> CharacterMoveDistances;//[Offset: 0xf18, Size: 0x50]
	bool bPlayAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf68, Size: 0x1]
	float ResetServerVelocityTime;//[Offset: 0xf78, Size: 0x4]
	float ReportMoveLossThreshold;//[Offset: 0xf7c, Size: 0x4]
	bool bEnableDCLocomotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8c, Size: 0x1]
	int PredictSimulationIterations;//[Offset: 0xf90, Size: 0x4]
	bool bEnableDCLocomotionLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf94, Size: 0x1]
	float DCLocomotionDistance;//[Offset: 0xf98, Size: 0x4]
	Vector PredictStopLocation;//[Offset: 0xf9c, Size: 0xc]
	int ForcePositionUpdateCount;//[Offset: 0xfa8, Size: 0x4]
	bool bStopMovingOnForcePositionUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfac, Size: 0x1]
	Vector MovingStartLocation;//[Offset: 0xfb0, Size: 0xc]
	bool bEnableCheckUpdateComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0, Size: 0x1]
	float ProneCheckZOffset;//[Offset: 0xfd4, Size: 0x4]
	float ProneCheckDistance;//[Offset: 0xfd8, Size: 0x4]
	float ProneCheckRadius;//[Offset: 0xfdc, Size: 0x4]
	float GroundLeanInterpSpeed;//[Offset: 0xfe0, Size: 0x4]
	float GroundLeanBrakeFactor;//[Offset: 0xfe4, Size: 0x4]
	float ProneBrakingDuration;//[Offset: 0x101c, Size: 0x4]
	float ProneBrakingFriction;//[Offset: 0x1020, Size: 0x4]
	float ProneBrakingDeceleration;//[Offset: 0x1024, Size: 0x4]
	float CrouchBrakingDuration;//[Offset: 0x1028, Size: 0x4]
	float CrouchBrakingFriction;//[Offset: 0x102c, Size: 0x4]
	float CrouchBrakingDeceleration;//[Offset: 0x1030, Size: 0x4]
	float SlidingDistance;//[Offset: 0x1034, Size: 0x4]
	bool bEnableSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1038, Size: 0x1]
	SGCharacterSprintComponent* SprintComponent;//[Offset: 0x1040, Size: 0x8]
	SGCharacterMovementProneComponent* MovementProneComponent;//[Offset: 0x1048, Size: 0x8]
	SGCharacterMovementDBNOComponent* MovementDBNOComponent;//[Offset: 0x1050, Size: 0x8]
	SGCharacterSoundComponent* SoundComp;//[Offset: 0x1058, Size: 0x8]
	float ReturnNavWalkingCheckInterval;//[Offset: 0x12b4, Size: 0x4]
	SGDoorBase* NearbyMovingDoor;//[Offset: 0x12b8, Size: 0x8]
	Vector DoorPushPlayerAddtiveVelocity;//[Offset: 0x12c0, Size: 0xc]
	Vector LastFallLocation;//[Offset: 0x12cc, Size: 0xc]
	TimerHandle FallProtectHandle;//[Offset: 0x12d8, Size: 0x8]
	float GameStrilessMoreThanTimeThreshold;//[Offset: 0x12f8, Size: 0x4]
	bool bCanAttemptStuckInGeometryPopUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12fc, Size: 0x1]
	float MaxStuckInGeometryPopUpRadiusScaler;//[Offset: 0x1300, Size: 0x4]
	FString NotifyStuckInGeometryPopUpMessage;//[Offset: 0x1308, Size: 0x10]
	bool bEnableCorrectStance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1318, Size: 0x1]
	bool bCompleteCorrectStance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1319, Size: 0x1]
	bool bEnableFindFloorBetweenSteeps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131a, Size: 0x1]
	bool ShouldWaitForCorrectStance();// 0x3a18e3fee041
	void SetIsSilentWalk(bool InIsSilentWalk);// 0x3a17e3fee041
	void SetEnableSliding(bool bEnable);// 0x3a16e3fee041
	void SetBasicSpeed(float InBasicSpeed, float InCrouchBasicSpeed, float InProneBasicSpeed, float InDBNOBasicSpeed);// 0x3a15e3fee041
	void ServerCorrectStance();// 0x3a14e3fee041
	void ResetMovementSpeed(float InStandBasicSpeed, float InCrouchBasicSpeed, float InProneBasicSpeed);// 0x3a13e3fee041
	void ResetCharacterMoveDistances();// 0x3a12e3fee041
	void OnUpdateCharacterStateBeforeMovement(float DeltaSeconds);// 0x3a11e3fee041
	void OnUpdateCharacterStateAfterMovement(float DeltaSeconds);// 0x3a10e3fee041
	void OnRep_NotifyStuckInGeometryPopUpMessage();// 0x3a0fe3fee041
	void OnRep_ForcePositionUpdateCount();// 0x3a0ee3fee041
	void OnRep_bSilentWalk();// 0x3a0de3fee041
	void OnPreUpdateCharacterState(float DeltaSeconds);// 0x3a0ce3fee041
	void OnOverlapEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3a0be3fee041
	void OnOverlapCapsuleEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3a0ae3fee041
	void OnOverlapCapsuleBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3a09e3fee041
	void OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3a08e3fee041
	void JumpLandFinishCallBack(AnimMontage* Montage, bool bInterrupted);// 0x3a07e3fee041
	bool IsMovingForward();// 0x3a06e3fee041
	bool Is3DMovementMode();// 0x3a05e3fee041
	float GetMovingProjectionOnAccel();// 0x3a04e3fee041
	bool GetIsSilentWalk();// 0x3a03e3fee041
	float GetCharacterMoveDistance(enum DistanceType);// 0x3a02e3fee041
	float GetAckReceivedTimeDiff();// 0x3a01e3fee041
	void ClientResponseCorrectStance(enum Stance);// 0x3a00e3fee041
	void CheckFallState();// 0x39ffe3fee041
	bool CalcPredictStopLocation(out Vector OutStopLocation, out const Vector CurrentLocation, out const Vector InVelocity, out const Vector InAcceleration, float InFriction, float InBrakingDeceleration, const float InTimeStep);// 0x39fee3fee041

--------------------------------
Class: SGTrapComponent.ActorComponent.Object
	float fDamagePerSec;//[Offset: 0xb8, Size: 0x4]
	AkAudioEvent* TriggerTrapSound;//[Offset: 0xc0, Size: 0x8]
	float fWalkSpeedScale;//[Offset: 0xc8, Size: 0x4]
	float fSoundTimerRate;//[Offset: 0xcc, Size: 0x4]
	void OnOverlapEnd(Actor* OwnerActor, Actor* OtherActor);// 0x4e9de3fee041
	void OnOverlapBegin(Actor* OwnerActor, Actor* OtherActor);// 0x4e9ce3fee041

--------------------------------
Class: SGFireTrapComponent.ActorComponent.Object
	float fBurnDmgPerSec;//[Offset: 0xb8, Size: 0x4]
	float fPainProbability;//[Offset: 0xbc, Size: 0x4]
	AkAudioEvent* BurnSound;//[Offset: 0xc0, Size: 0x8]
	bool bSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	void StopFireSound();// 0x4279e3fee041
	void PlayFireSound();// 0x4278e3fee041

--------------------------------
Class: SGCharacterSprintComponent.ActorComponent.Object
	float SprintMinSpeed;//[Offset: 0xc8, Size: 0x4]
	CurveVector* SprintTranslationADSCurve;//[Offset: 0xd0, Size: 0x8]
	CurveVector* SprintRotationADSCurve;//[Offset: 0xd8, Size: 0x8]
	CurveFloat* Ergonomic_AlphaCurve;//[Offset: 0xe0, Size: 0x8]
	CurveFloat* SprintAccelerationCurve;//[Offset: 0xe8, Size: 0x8]
	CurveFloat* SprintAcceWeightScaleCurve;//[Offset: 0xf0, Size: 0x8]
	float SprintMaxSpeedLowerLimit;//[Offset: 0xf8, Size: 0x4]
	bool bEnableSprintAccelerationCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	bool bSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 0x1]
	float SprintingTime;//[Offset: 0x100, Size: 0x4]
	SGCharacterEvents* SprintChangedEvents;//[Offset: 0x108, Size: 0x8]
	void OnUpdateCharacterStateBeforeMovementEvent(float DeltaSeconds);// 0x3e75e3fee041
	void OnUpdateCharacterStateAfterMovement(float DeltaSeconds);// 0x3e74e3fee041
	void OnRep_Sprinting();// 0x3e73e3fee041
	void OnOwnerOrRoleChanged(Actor* NewOwner, byte NewRole);// 0x3e72e3fee041

--------------------------------
Class: SGCharacterEvents.SGGameInstanceComponent.Object
	delegate ToggleRescueUI;//[Offset: 0x30, Size: 0x10]
	delegate StartRescueTeammate;//[Offset: 0x40, Size: 0x10]
	delegate StopRescueTeammate;//[Offset: 0x50, Size: 0x10]
	delegate PostStopRescueTeammate;//[Offset: 0x60, Size: 0x10]
	delegate FinishRescueTeammate;//[Offset: 0x70, Size: 0x10]
	delegate StartRescueProcess;//[Offset: 0x80, Size: 0x10]
	delegate StartRescueFailureEvent;//[Offset: 0x90, Size: 0x10]
	delegate EndRescueAbilityEvent;//[Offset: 0xa0, Size: 0x10]
	delegate DetectInRoomEvent;//[Offset: 0xb0, Size: 0x10]
	delegate OnDefaultInventoryReplicateComplete;//[Offset: 0xc0, Size: 0x10]
	delegate OnPreUnPossessed;//[Offset: 0xd0, Size: 0x10]
	delegate OnKeepCorpseAfterDie;//[Offset: 0xe0, Size: 0x10]
	delegate OnDestroy;//[Offset: 0xf0, Size: 0x10]
	delegate TakeDamageEvent;//[Offset: 0x100, Size: 0x10]
	delegate OnUsedInventory;//[Offset: 0x110, Size: 0x10]
	delegate OnMoveInventory;//[Offset: 0x120, Size: 0x10]
	delegate OnSpawnDeathBox;//[Offset: 0x130, Size: 0x10]
	delegate OnGameplayEffectChangedEvent;//[Offset: 0x140, Size: 0x10]
	delegate PreApplyTinnitusEffectEvent;//[Offset: 0x150, Size: 0x10]
	delegate ToggleDyingEffect;//[Offset: 0x160, Size: 0x10]
	delegate DyingEffectChanged;//[Offset: 0x170, Size: 0x10]
	delegate DeathForEffectMessage;//[Offset: 0x180, Size: 0x10]
	delegate UseRecoveryInventory;//[Offset: 0x190, Size: 0x10]
	delegate SwitchWeaponCompleted;//[Offset: 0x1a0, Size: 0x10]
	delegate InitPlayerEquipmentsCompleted;//[Offset: 0x1b0, Size: 0x10]
	delegate CostBullet;//[Offset: 0x1c0, Size: 0x10]
	delegate ModifyInventoryTotalCount;//[Offset: 0x1d0, Size: 0x10]
	delegate StackableItemSourceInfoChange;//[Offset: 0x1e0, Size: 0x10]
	delegate OnReadyToPlay;//[Offset: 0x1f0, Size: 0x10]
	delegate OnSprintChanged;//[Offset: 0x200, Size: 0x10]
	delegate OnTotalWeightChanged;//[Offset: 0x210, Size: 0x10]
	delegate OnWeightConditionChanged;//[Offset: 0x220, Size: 0x10]
	delegate OnClientNearByCharacterActivateAbility;//[Offset: 0x230, Size: 0x10]
	delegate OnClientNearByCharacterEndAbility;//[Offset: 0x240, Size: 0x10]
	delegate OnSpectatedCharProgressAbilityUpdated;//[Offset: 0x250, Size: 0x10]
	delegate CharacterEnterDangerArea;//[Offset: 0x260, Size: 0x10]
	delegate OnCharacterSetNewOwner;//[Offset: 0x270, Size: 0x10]
	delegate OnPreSpawnDeathBox;//[Offset: 0x280, Size: 0x10]
	delegate OnCharSoundLevelInfluenceFactorChanged;//[Offset: 0x290, Size: 0x10]
	delegate OnCharSoundMaxDistanceInfluenceFactorChanged;//[Offset: 0x2a0, Size: 0x10]
	delegate OnCharacterBeingSpectatedTinnitus;//[Offset: 0x2b0, Size: 0x10]
	delegate OnCharacterDestroyActor;//[Offset: 0x2c0, Size: 0x10]
	delegate OnCharacterEnterLadder;//[Offset: 0x330, Size: 0x10]
	SGCharacterEvents* GetSGCharacterEvents(Object* InWorldContextObject);// 0x3cf0e3fee041

--------------------------------
Class: SGCharacterMovementProneComponent.ActorComponent.Object
	float ProneEyeHeight;//[Offset: 0xc8, Size: 0x4]
	float ProneHalfHeight;//[Offset: 0xcc, Size: 0x4]
	float SlopeRotationInterpSpeed;//[Offset: 0xd0, Size: 0x4]
	Rotator TargetProneRotationOffset;//[Offset: 0xd4, Size: 0xc]
	Rotator SmoothProneRotationOffset;//[Offset: 0xe0, Size: 0xc]
	Rotator TargetProneLegsRotationOffset;//[Offset: 0xec, Size: 0xc]
	Rotator SmoothProneLegsRotationOffset;//[Offset: 0xf8, Size: 0xc]
	Vector ProneMeshLocationOffset;//[Offset: 0x104, Size: 0xc]
	Vector TargetProneMeshLocationOffset;//[Offset: 0x110, Size: 0xc]
	float MeshLocationOffsetInterpSpeed;//[Offset: 0x11c, Size: 0x4]
	float CollisionIgnoreHeight;//[Offset: 0x120, Size: 0x4]
	float MaxUnproneAdjustDistance;//[Offset: 0x124, Size: 0x4]
	bool bIsProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	float DefaultCapsuleHalfHeight;//[Offset: 0x12c, Size: 0x4]
	float DefaultCapsuleRadius;//[Offset: 0x130, Size: 0x4]
	CapsuleComponent* ProneCollisionComponent;//[Offset: 0x140, Size: 0x8]
	bool bProneMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	float SlopeRayTraceDistance;//[Offset: 0x14c, Size: 0x4]
	bool bStandOnStairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	float CanProneInCurrentEnvironmentTickInterval;//[Offset: 0x158, Size: 0x4]
	FName RibCageBoneName;//[Offset: 0x15c, Size: 0x8]
	bool bExitZoomWhenSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 0x1]
	float ProneWalkableFloorAngle;//[Offset: 0x168, Size: 0x4]
	float ProneMaxStepHeight;//[Offset: 0x16c, Size: 0x4]
	float CamerTraceStartOffset;//[Offset: 0x170, Size: 0x4]
	float CamerTraceRadius;//[Offset: 0x174, Size: 0x4]
	float FaceForwardDistance;//[Offset: 0x178, Size: 0x4]
	PhysicalMaterial* StairMaterial;//[Offset: 0x180, Size: 0x8]
	float CanProneOnStairMaxAngle;//[Offset: 0x188, Size: 0x4]
	float CanProneMaxAngle;//[Offset: 0x18c, Size: 0x4]
	bool bEnableProneAvoidObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	float ProneAdditionalBodyLength;//[Offset: 0x194, Size: 0x4]
	float AvoidObstacleAdjustmentAdditionalDistance;//[Offset: 0x198, Size: 0x4]
	void UnProne();// 0x3e28e3fee041
	void UnDoProne(bool bClientSimulation);// 0x3e27e3fee041
	void Prone(bool bCheck);// 0x3e26e3fee041
	void OnUpdateCharacterStateBeforeMovement(float DeltaSeconds);// 0x3e25e3fee041
	void OnUpdateCharacterStateAfterMovement(float DeltaSeconds);// 0x3e24e3fee041
	void OnRep_IsProne();// 0x3e23e3fee041
	void OnPreUpdateCharacterState(float DeltaSeconds);// 0x3e22e3fee041
	void OnMovementModeChanged(byte PreviousMovementMode, byte PreviousCustomMode);// 0x3e21e3fee041
	bool IsProne();// 0x3e20e3fee041
	Rotator GetMeshRotationOffset();// 0x3e1fe3fee041
	Vector GetMeshLocationOffset();// 0x3e1ee3fee041
	Rotator GetMeshLegsRotationOffset();// 0x3e1de3fee041
	void DoProne(bool bClientSimulation);// 0x3e1ce3fee041
	bool CanProneMove(float Value);// 0x3e1be3fee041
	bool CanProneInCurrentState();// 0x3e1ae3fee041
	bool CanProneInCurrentEnvironment();// 0x3e19e3fee041
	bool CanProne();// 0x3e18e3fee041

--------------------------------
Class: SGCharacterMovementDBNOComponent.ActorComponent.Object
	float DBNOEyeHeight;//[Offset: 0xc0, Size: 0x4]
	float DBNOHalfHeight;//[Offset: 0xc4, Size: 0x4]
	float RampRotationInterpSpeed;//[Offset: 0xc8, Size: 0x4]
	float DBNOMeshOffsetInterpSpeed;//[Offset: 0xcc, Size: 0x4]
	float UnDBNOMeshOffsetInterpSpeed;//[Offset: 0xd0, Size: 0x4]
	float EnterDBNOTime;//[Offset: 0xd4, Size: 0x4]
	float ExitDBNOTime;//[Offset: 0xd8, Size: 0x4]
	float DBNOMeshZOffset;//[Offset: 0xdc, Size: 0x4]
	float DBNOMeshXOffset;//[Offset: 0xe0, Size: 0x4]
	float DBNOMeshYOffset;//[Offset: 0xe4, Size: 0x4]
	float CollisionIgnoreHeight;//[Offset: 0xe8, Size: 0x4]
	bool bIsPlayingAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	bool bIsDBNOMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 0x1]
	float RampRayTraceDistance;//[Offset: 0xf0, Size: 0x4]
	float RampDetectAngleThreshold;//[Offset: 0xf4, Size: 0x4]
	FName RibCageBoneName;//[Offset: 0xf8, Size: 0x8]
	bool bExitZoomWhenSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	float DBNOWalkableFloorAngle;//[Offset: 0x104, Size: 0x4]
	float DBNOMaxStepHeight;//[Offset: 0x108, Size: 0x4]
	float CamerTraceStartOffset;//[Offset: 0x10c, Size: 0x4]
	float CamerTraceRadius;//[Offset: 0x110, Size: 0x4]
	CapsuleComponent* DBNOCollisionComponent;//[Offset: 0x120, Size: 0x8]
	bool bDBNOMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 0x1]
	Rotator DBNORotationOffset;//[Offset: 0x12c, Size: 0xc]
	void OnUpdateCharacterStateBeforeMovement(float DeltaSeconds);// 0x3df2e3fee041
	void OnUpdateCharacterStateAfterMovement(float DeltaSeconds);// 0x3df1e3fee041
	void OnRep_IsPlayingnimation();// 0x3df0e3fee041
	void OnRep_IsDBNOMove();// 0x3defe3fee041
	void OnPreUpdateCharacterState(float DeltaSeconds);// 0x3deee3fee041
	void OnMovementModeChanged(byte PreviousMovementMode, byte PreviousCustomMode);// 0x3dede3fee041
	void OnExitDBNOStatus(bool bClientSimulation);// 0x3dece3fee041
	void OnEnterDBNOStatus(bool bClientSimulation);// 0x3debe3fee041
	bool IsDBNOMove();// 0x3deae3fee041
	float GetActorRotationPitchOffset();// 0x3de9e3fee041
	void ExitDBNO(bool bClientSimulation);// 0x3de8e3fee041
	void EnterDBNO(bool bClientSimulation);// 0x3de7e3fee041

--------------------------------
Class: SGCharacterSoundComponent.ActorComponent.Object
	AkAudioEvent* DeathGrunt;//[Offset: 0xc0, Size: 0x8]
	AkAudioEvent* GetHitGrunt;//[Offset: 0xc8, Size: 0x8]
	float GetHitGruntCooldown;//[Offset: 0xd0, Size: 0x4]
	AkAudioEvent* BreathSound;//[Offset: 0xd8, Size: 0x8]
	AkAudioEvent* DyingEffectBeginEvent;//[Offset: 0xe0, Size: 0x8]
	AkAudioEvent* DyingEffectEndEvent;//[Offset: 0xe8, Size: 0x8]
	AkAudioEvent* TinnitusEffectBeginEvent;//[Offset: 0xf0, Size: 0x8]
	AkAudioEvent* TinnitusEffectEndEvent;//[Offset: 0xf8, Size: 0x8]
	FString TinnitusRTPCName;//[Offset: 0x100, Size: 0x10]
	float MaxTinnitusRTPC;//[Offset: 0x110, Size: 0x4]
	AkAudioEvent* JumpSound;//[Offset: 0x118, Size: 0x8]
	AkAudioEvent* LandSound;//[Offset: 0x120, Size: 0x8]
	AkAudioEvent* CrouchSound;//[Offset: 0x128, Size: 0x8]
	AkAudioEvent* ProneSound;//[Offset: 0x130, Size: 0x8]
	AkAudioEvent* StandUpSound;//[Offset: 0x138, Size: 0x8]
	AkAudioEvent* LeanSound;//[Offset: 0x140, Size: 0x8]
	AkAudioEvent* LeanBackSound;//[Offset: 0x148, Size: 0x8]
	AkAudioEvent* LeanWithGunSound;//[Offset: 0x150, Size: 0x8]
	AkAudioEvent* LeanBackWithGunSound;//[Offset: 0x158, Size: 0x8]
	AkAudioEvent* DeathEffectSound;//[Offset: 0x160, Size: 0x8]
	AkAudioEvent* BulletHeadshotSound;//[Offset: 0x168, Size: 0x8]
	AkAudioEvent* BulletHitHelmetSound;//[Offset: 0x170, Size: 0x8]
	AkAudioEvent* BulletHitArmorSound;//[Offset: 0x178, Size: 0x8]
	AkAudioEvent* BulletHitBodySound;//[Offset: 0x180, Size: 0x8]
	float HitMarkerCoolDown;//[Offset: 0x188, Size: 0x4]
	AkAudioEvent* MoveInBushSound;//[Offset: 0x190, Size: 0x8]
	float EnvironmentInteractionCooldown;//[Offset: 0x198, Size: 0x4]
	int TickCullDistance;//[Offset: 0x19c, Size: 0x4]
	float TickThresholdQuick;//[Offset: 0x1a0, Size: 0x4]
	float TickThresholdSlow;//[Offset: 0x1a4, Size: 0x4]
	int AngularVelocityRatio;//[Offset: 0x1a8, Size: 0x4]
	AkAudioEvent* CharacterVoiceEvent;//[Offset: 0x1b0, Size: 0x8]
	SGCharacter* CachedCharacter;//[Offset: 0x1b8, Size: 0x8]
	float fDistanceToListener;//[Offset: 0x1c0, Size: 0x4]
	FString CachedHealthStatus;//[Offset: 0x1c8, Size: 0x10]
	TimerHandle BreathSoundTimerHandle;//[Offset: 0x1d8, Size: 0x8]
	float BreathSoundIntervalDefault;//[Offset: 0x1e0, Size: 0x4]
	enum CacheSoundSourceType;//[Offset: 0x1e4, Size: 0x1]
	SGCharacterSenseAbilityComponent* SenseComp;//[Offset: 0x1e8, Size: 0x8]
	bool bIsPlayingBreathSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 0x1]
	bool bIsUnderDyingEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x205, Size: 0x1]
	bool bIsLocalGamePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x206, Size: 0x1]
	bool bIsUnderTinnitusEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x207, Size: 0x1]
	bool bIsMovingInBush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	FString CachedMovingStatus;//[Offset: 0x210, Size: 0x10]
	FString CachedEnergyStatus;//[Offset: 0x220, Size: 0x10]
	FString CachedWeightStatus;//[Offset: 0x230, Size: 0x10]
	float CachedTinnitusRTPC;//[Offset: 0x240, Size: 0x4]
	AINearGrassBounds NearGrassBounds;//[Offset: 0x248, Size: 0x20]
	FString SuppressorRTPCParameterName;//[Offset: 0x280, Size: 0x10]
	float SuppressorRTPCDefaultValue;//[Offset: 0x290, Size: 0x4]
	enum CurWeaponSuppressorType;//[Offset: 0x294, Size: 0x1]
	float SuppressorRTPCValue;//[Offset: 0x298, Size: 0x4]
	SGInventory* CachedListenerWeapon;//[Offset: 0x2a0, Size: 0x8]
	void UpdateSuppressorRTPCValue(float InSuppressorRTPCValue, enum SilencerType);// 0x3aade3fee041
	void UnregistWeaponEvent(SGInventory* Weapon);// 0x3aace3fee041
	void ServerPlayCharacterVoice(FString ExternalFileName, bool WaitUntilCurrentEnd, int VoiceID, int Triggertype);// 0x3aabe3fee041
	void RegistWeaponEvent(SGInventory* Weapon);// 0x3aaae3fee041
	void RefreshSuppressorRTPCValue(SGInventory* Weapon);// 0x3aa9e3fee041
	void RefreshNetRoleSwitch();// 0x3aa8e3fee041
	void PlayTakeHitSound(out const TakeHitInfo TakeHitInfo);// 0x3aa7e3fee041
	void PlayCharacterVoiceFrontEnd(FString ExternalFileName, bool WaitUntilCurrentEnd);// 0x3aa6e3fee041
	void PlayCharacterVoice(FString ExternalFileName, bool WaitUntilCurrentEnd, int VoiceID, int Triggertype);// 0x3aa5e3fee041
	void PlayBodyLeanSound(enum LeanType);// 0x3aa4e3fee041
	void OnToggleDyingEffect(bool bDying, int DyingEffect);// 0x3aa3e3fee041
	void OnTinnitus(GameplayTag Tag, int Count);// 0x3aa2e3fee041
	void OnStartSpectating(SGCharacter* Character);// 0x3aa1e3fee041
	void OnSlightTearGas(GameplayTag Tag, int Count);// 0x3aa0e3fee041
	void OnSetNewOwner(Actor* NewOwner);// 0x3a9fe3fee041
	void OnSetCurrentWeaponEvent(SGInventory* NewWeapon);// 0x3a9ee3fee041
	void OnRep_SuppressorRTPCValue();// 0x3a9de3fee041
	void OnOverWeight(GameplayTag Tag, int Count);// 0x3a9ce3fee041
	void OnMediumTearGas(GameplayTag Tag, int Count);// 0x3a9be3fee041
	void OnLegFracture(GameplayTag Tag, int Count);// 0x3a9ae3fee041
	void OnLackInMoisture(GameplayTag Tag, int Count);// 0x3a99e3fee041
	void OnLackInFood(GameplayTag Tag, int Count);// 0x3a98e3fee041
	void OnItemPickedUp(Character* Character, Actor* item);// 0x3a97e3fee041
	void OnInventoryUnequipped(SGInventory* Inventory);// 0x3a96e3fee041
	void OnInventoryEquipped(SGInventory* Inventory);// 0x3a95e3fee041
	void OnHealthConditionChanged(enum OldHealthConditionType, enum NewHealthConditionType);// 0x3a94e3fee041
	void OnExplosionSoundImpact(Character* SourceCharacter, float TinnitusIntensity, float TinnitusMaxDistance, Vector ExplosionCenter);// 0x3a93e3fee041
	void OnCurrentWeaponDisassembled(SGInventory* InInventory);// 0x3a92e3fee041
	void OnCurrentWeaponAssembled(SGInventory* InInventory);// 0x3a91e3fee041
	void OnCompleteOverWeight(GameplayTag Tag, int Count);// 0x3a90e3fee041
	void OnClientNearByCharacterEndAbility(Character* NearByCharacter, enum AbilityType, Actor* OptionalActor);// 0x3a8fe3fee041
	void OnClientNearByCharacterActivateAbility(Character* NearByCharacter, enum AbilityType, Actor* OptionalActor);// 0x3a8ee3fee041
	void OnClearBuff(GameplayTag Tag, int Count);// 0x3a8de3fee041
	void OnCharacterSexChanged(enum InCharacterSex);// 0x3a8ce3fee041
	void OnCharacterDeath(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x3a8be3fee041
	void OnCharacterDeadInClient(SGCharacter* DeadCharacter);// 0x3a8ae3fee041
	void OnCarriedFaceShieldActivated(SGInventory* FaceShield, bool bActive);// 0x3a89e3fee041
	void OnBreathSoundMarkerCallback(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x3a88e3fee041
	void NetMulticast_PlayPickUpSound(Character* Character, FString PickUpCound);// 0x3a87e3fee041
	void MulticastPlayCharacterVoice(FString ExternalFileName, bool WaitUntilCurrentEnd, int VoiceID, int Triggertype);// 0x3a86e3fee041
	bool IsViewedCharacter();// 0x3a85e3fee041
	bool IsLocalGamePlayer();// 0x3a84e3fee041
	bool IsCharacterInGrass();// 0x3a83e3fee041
	void ClientPlayVirtualFiringSound(FString EventName, const Vector SoundLoaction, SGCharacter* SoundCharacter);// 0x3a82e3fee041
	void BroadcastSoundVisualizerEvent(enum SoundSourceType);// 0x3a81e3fee041

--------------------------------
Class: SGCharacterSenseAbilityComponent.ActorComponent.Object
	<GameplayTag,GameplayEffectArrayWrap> GeneralGameplayEffectConfigMap;//[Offset: 0xc8, Size: 0x50]
	<GameplayTag,GameplayEffectHandleArrayWrap> GeneralActiveGameEffectHandleMap;//[Offset: 0x118, Size: 0x50]
	bool bInTearGasArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	bool bInSceneGasArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	float TearGasToxinValue;//[Offset: 0x16c, Size: 0x4]
	float MaxTearGasToxinValue;//[Offset: 0x174, Size: 0x4]
	float AddTearGasToxinStep;//[Offset: 0x178, Size: 0x4]
	CurveFloat* AddTearGasToxinStepCurve;//[Offset: 0x180, Size: 0x8]
	float MinusTearGasToxinStep;//[Offset: 0x188, Size: 0x4]
	CurveFloat* MinusTearGasToxinStepCurve;//[Offset: 0x190, Size: 0x8]
	float SlightTearGasThreshold;//[Offset: 0x198, Size: 0x4]
	float MediumTearGasThreshold;//[Offset: 0x19c, Size: 0x4]
	bool bImmuneTearGas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	enum TearGasState;//[Offset: 0x1a1, Size: 0x1]
	float TearGasToxinCalInterval;//[Offset: 0x1a4, Size: 0x4]
	SGInventory* CacheGasMask;//[Offset: 0x1a8, Size: 0x8]
	CurveFloat* GasMaskResistanceByDurabililtyCurve;//[Offset: 0x1b0, Size: 0x8]
	float ErgonomicsAll;//[Offset: 0x1c0, Size: 0x4]
	float EquipmentEffectToSpeedAll;//[Offset: 0x1c4, Size: 0x4]
	float SevereFlashBurnChangeVal;//[Offset: 0x240, Size: 0x4]
	float ModerateFlashBurnChangeVal;//[Offset: 0x244, Size: 0x4]
	float MildFlashBurnChangeVal;//[Offset: 0x248, Size: 0x4]
	float SevereFlashBurnDecreaseVal;//[Offset: 0x24c, Size: 0x4]
	float ModerateFlashBurnDecreaseVal;//[Offset: 0x250, Size: 0x4]
	float MildFlashBurnDecreaseVal;//[Offset: 0x254, Size: 0x4]
	CurveFloat* ChangeFlashBurnValCurve;//[Offset: 0x260, Size: 0x8]
	CurveFloat* FlashLightRelativeLocation;//[Offset: 0x268, Size: 0x8]
	CurveFloat* EffectScaleDistanceCurve;//[Offset: 0x270, Size: 0x8]
	float FlashBurnVal;//[Offset: 0x278, Size: 0x4]
	float MildFlashBurnThreshold;//[Offset: 0x2b0, Size: 0x4]
	float ModerateFlashBurnThreshold;//[Offset: 0x2b4, Size: 0x4]
	float SevereFlashBurnThreshold;//[Offset: 0x2b8, Size: 0x4]
	float EarCheckTimeInterval;//[Offset: 0x2d4, Size: 0x4]
	CharacterGameEffectTags BleedTags;//[Offset: 0x2d8, Size: 0x40]
	CharacterGameEffectTags PainTags;//[Offset: 0x318, Size: 0x40]
	CharacterGameEffectTags BoneBreakTags;//[Offset: 0x358, Size: 0x40]
	CharacterGameEffectTags OutOfEnduranceTags;//[Offset: 0x398, Size: 0x40]
	CharacterGameEffectTags TunnelVisionTags;//[Offset: 0x3d8, Size: 0x40]
	CharacterGameEffectTags TrembleTags;//[Offset: 0x418, Size: 0x40]
	CharacterGameEffectTags FreshWoundTags;//[Offset: 0x458, Size: 0x40]
	GameplayTag IsOverWeightTag;//[Offset: 0x498, Size: 0x8]
	GameplayTag IsCompleteOverWeightTag;//[Offset: 0x4a0, Size: 0x8]
	GameplayTag LackInMoistureTag;//[Offset: 0x4a8, Size: 0x8]
	GameplayTag LackInFoodTag;//[Offset: 0x4b0, Size: 0x8]
	GameplayTag LackInFoodSlightTag;//[Offset: 0x4b8, Size: 0x8]
	GameplayTag LackInFoodMediumTag;//[Offset: 0x4c0, Size: 0x8]
	GameplayTag TinnitusTag;//[Offset: 0x4c8, Size: 0x8]
	GameplayTag SlightTearGasTag;//[Offset: 0x4d0, Size: 0x8]
	GameplayTag MediumTearGasTag;//[Offset: 0x4d8, Size: 0x8]
	CharacterGameEffectTags RegenerationTags;//[Offset: 0x4e0, Size: 0x40]
	GameplayTag PainInhibiteTag;//[Offset: 0x520, Size: 0x8]
	GameplayTag IsClearTag;//[Offset: 0x528, Size: 0x8]
	GameplayTag ExcitedTag;//[Offset: 0x530, Size: 0x8]
	GameplayTag FortitudeTag;//[Offset: 0x538, Size: 0x8]
	GameplayTag PoisonTag;//[Offset: 0x540, Size: 0x8]
	GameplayTag ActivityBeMarkedTag;//[Offset: 0x548, Size: 0x8]
	GameplayTag ActivityMarkTag;//[Offset: 0x550, Size: 0x8]
	GameplayTag HearingEnhanceTag;//[Offset: 0x558, Size: 0x8]
	GameplayTag HearingReduceTag;//[Offset: 0x560, Size: 0x8]
	class SGCharacterSenseAttributeSet* AttributeSetClass;//[Offset: 0x568, Size: 0x8]
	<GameplayTag,class GameplayAbility> InhibiteSenseAbilityClasses;//[Offset: 0x570, Size: 0x50]
	float BleedDurabilityCost;//[Offset: 0x5c0, Size: 0x4]
	float BoneBreakDurabilityCost;//[Offset: 0x5c4, Size: 0x4]
	float OutOfEnduranceDurabilityCost;//[Offset: 0x5c8, Size: 0x4]
	<GameplayTag,GameplayAbilitySpecHandle> InhibiteSenseAbilitySpecHandles;//[Offset: 0x5d0, Size: 0x50]
	AbilitySystemComponent* AbilitySystemComp;//[Offset: 0x620, Size: 0x8]
	void SetBleedAlpha(float NewValue);// 0x3a7ee3fee041
	void ServerUpdateFlashLightState(bool bInSevere, bool bInModerate, bool bInMild, float CharFaceAngleDegree, float CounterSevere, float CounterModerate, float CounterMild);// 0x3a7de3fee041
	void ResetTearGasState();// 0x3a7ce3fee041
	void OnRep_TearGasToxinValue();// 0x3a7be3fee041
	void OnRep_ChangeFlashBurnVal();// 0x3a7ae3fee041
	void OnRep_bInSceneGasArea();// 0x3a79e3fee041
	void OnLeaveTearGasArea();// 0x3a78e3fee041
	void OnFaceCoverUnEquipedEvent(Actor* Character);// 0x3a77e3fee041
	void OnFaceCoverEquipedEvent(SGInventory* Inventory, Actor* Character);// 0x3a76e3fee041
	void OnEnterTearGasArea();// 0x3a75e3fee041
	void OnEnterSceneGasArea(bool bEnter);// 0x3a74e3fee041
	void OnCharacterTriggerTearGasArea(bool bEnter);// 0x3a73e3fee041
	bool IsUnderGameEffectByEndurance(enum GameEffectType, enum EnduranceType);// 0x3a72e3fee041
	bool IsUnderGameEffect(enum GameEffectType);// 0x3a71e3fee041
	bool IsTunnelVisonByEnduranceType(enum Type);// 0x3a70e3fee041
	bool IsTunnelVison();// 0x3a6fe3fee041
	bool IsTrembleByEnduranceType(enum Type);// 0x3a6ee3fee041
	bool IsTremble();// 0x3a6de3fee041
	bool IsPainInhibited();// 0x3a6ce3fee041
	bool IsPainByEnduranceType(enum Type);// 0x3a6be3fee041
	bool IsPain();// 0x3a6ae3fee041
	bool IsOverWeight();// 0x3a69e3fee041
	bool IsOutOfEnduranceByEnduranceType(enum Type);// 0x3a68e3fee041
	bool IsOutOfEndurance();// 0x3a67e3fee041
	bool IsLegOutOfEndurance();// 0x3a66e3fee041
	bool IsLegBoneBreak();// 0x3a65e3fee041
	bool IsLackInMoisture();// 0x3a64e3fee041
	bool IsLackInFood();// 0x3a63e3fee041
	bool IsInTearGasState();// 0x3a62e3fee041
	bool IsInSense(FName Sense);// 0x3a61e3fee041
	bool IsFreshWoundByEnduranceType(enum Type);// 0x3a60e3fee041
	bool IsFreshWound(out enum Type);// 0x3a5fe3fee041
	bool IsEarCovered();// 0x3a5ee3fee041
	bool IsCompleteOverWeight();// 0x3a5de3fee041
	bool IsClear();// 0x3a5ce3fee041
	bool IsBoneBreakByEnduranceType(enum Type);// 0x3a5be3fee041
	bool IsBoneBreak();// 0x3a5ae3fee041
	bool IsBleedByEnduranceType(enum Type);// 0x3a59e3fee041
	bool IsBleed();// 0x3a58e3fee041
	bool IsArmOutOfEndurance();// 0x3a57e3fee041
	bool IsArmBoneBreak();// 0x3a56e3fee041
	void InhibiteSense(FName Sense, bool Value);// 0x3a55e3fee041
	int GetTearGasLevel();// 0x3a54e3fee041
	GameplayTag GetTagByGameEffectAndEndurance(enum EffectType, enum EnduranceType);// 0x3a53e3fee041
	GameplayTag GetSenseAnyTag(enum EffectType);// 0x3a52e3fee041
	int GetPainCount();// 0x3a51e3fee041
	void GetOwnedEffectTypeByEndurance(enum Endurance, out enum[] GameEffectTypes);// 0x3a50e3fee041
	float GetFlashBurnValue();// 0x3a4fe3fee041
	enum GetEnduranceTypeFromTag(GameplayTag Tag);// 0x3a4ee3fee041
	float GetDebuffDurabilityCostWithTag(out const GameplayTag DebuffTag);// 0x3a4de3fee041
	float GetDebuffDurabilityCost(enum DebuffType);// 0x3a4ce3fee041
	int GetBoneOutOfEnduranceCount();// 0x3a4be3fee041
	int GetBoneBreakCount();// 0x3a4ae3fee041
	int GetBleedCount();// 0x3a49e3fee041
	float GetBleedAlpha();// 0x3a48e3fee041
	void GetAllBodypartBuffList(out CharacterBuffInfo[] BodypartBufflist);// 0x3a47e3fee041
	FName[] GetActiveSenses();// 0x3a46e3fee041
	void GeneralGameEffectChange(bool bAddOrRemove, const GameplayTag Tag);// 0x3a45e3fee041
	void ClientPlayScreenEffect(bool bPlayEffect);// 0x3a44e3fee041
	void CalTearGasToxinValue();// 0x3a43e3fee041
	float CalTearGasToxinDuration();// 0x3a42e3fee041
	enum CalTearGasState();// 0x3a41e3fee041

--------------------------------
Class: GameplayEffectArrayWrap
	class GameplayEffect[] GameplayEffectList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: GameplayEffectHandleArrayWrap
	ActiveGameplayEffectHandle[] GameplayEffectHandleList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CharacterBuffInfo
	int EnduranceType;//[Offset: 0x0, Size: 0x4]
	int[] BuffList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CharacterGameEffectTags
	GameplayTag AnyTag;//[Offset: 0x0, Size: 0x8]
	GameplayTag HeadTag;//[Offset: 0x8, Size: 0x8]
	GameplayTag ChestTag;//[Offset: 0x10, Size: 0x8]
	GameplayTag StomachTag;//[Offset: 0x18, Size: 0x8]
	GameplayTag LeftArmTag;//[Offset: 0x20, Size: 0x8]
	GameplayTag RightArmTag;//[Offset: 0x28, Size: 0x8]
	GameplayTag LeftLegTag;//[Offset: 0x30, Size: 0x8]
	GameplayTag RightLegTag;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SGCharacterSenseAttributeSet.AttributeSet.Object
	float EarCover;//[Offset: 0x34, Size: 0x4]
	float EarCoverMultiplier;//[Offset: 0x38, Size: 0x4]
	float BleedAlpha;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AINearGrassBounds
	Vector Center;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]
	int[] GrassIndexs;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TakeHitInfo
	float Damage;//[Offset: 0x0, Size: 0x4]
	Vector_NetQuantize RelHitLocation;//[Offset: 0x4, Size: 0xc]
	Vector_NetQuantize Momentum;//[Offset: 0x10, Size: 0xc]
	class DamageType* DamageType;//[Offset: 0x20, Size: 0x8]
	byte ShotDirPitch;//[Offset: 0x28, Size: 0x1]
	byte ShotDirYaw;//[Offset: 0x29, Size: 0x1]
	Vector ShotDir;//[Offset: 0x2c, Size: 0xc]
	enum HitGroup;//[Offset: 0x38, Size: 0x1]
	bool bPenerateArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bIsBestHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	byte Count;//[Offset: 0x3b, Size: 0x1]
	class SGInventory* HitArmor;//[Offset: 0x40, Size: 0x8]
	Actor* Causer;//[Offset: 0x48, Size: 0x8]
	Actor* DamageCauser;//[Offset: 0x50, Size: 0x8]
	byte ShotIndex;//[Offset: 0x58, Size: 0x1]

--------------------------------
Class: SGDoorBase.NPCAINavLinkProxy.NavLinkProxy.Actor.Object
	enum DoorType;//[Offset: 0x368, Size: 0x1]
	int64 DoorKeyItemID;//[Offset: 0x370, Size: 0x8]
	bool bShowWreck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	bool bCanOpenFromInner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 0x1]
	bool bIsControlledByGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37a, Size: 0x1]
	float CloseDoorDetectDistance;//[Offset: 0x37c, Size: 0x4]
	Rotator ClosedRotation;//[Offset: 0x380, Size: 0xc]
	enum CardReaderDoorType;//[Offset: 0x38c, Size: 0x1]
	float ResetCoolDownTime;//[Offset: 0x390, Size: 0x4]
	delegate OnDoorStateChange;//[Offset: 0x398, Size: 0x10]
	delegate OnDoorCardStateChange;//[Offset: 0x3a8, Size: 0x10]
	delegate OnDoorMoveFinish;//[Offset: 0x3b8, Size: 0x10]
	delegate OnDoorUnLockEvent;//[Offset: 0x3c8, Size: 0x10]
	float CurrentCoolDownTime;//[Offset: 0x3f0, Size: 0x4]
	bool bCurrentGeneratorOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 0x1]
	enum DoorState;//[Offset: 0x3f5, Size: 0x1]
	enum CardDoorState;//[Offset: 0x3f6, Size: 0x1]
	enum DoorOpenType;//[Offset: 0x3f7, Size: 0x1]
	enum CurAction;//[Offset: 0x3f8, Size: 0x1]
	enum DoorCategory;//[Offset: 0x3f9, Size: 0x1]
	SGDoorMovmentComponentBase* CachedDoorMovmentComponent;//[Offset: 0x400, Size: 0x8]
	SGTwoWayDoorPlankComponent* CachedTwoWayDoorPlankComponent;//[Offset: 0x408, Size: 0x8]
	MFILCDynamicScaleComponent* CachedILCDynamicScaleComponent;//[Offset: 0x410, Size: 0x8]
	float ShadowProxyThickness;//[Offset: 0x418, Size: 0x4]
	float ShadowProxyFrame;//[Offset: 0x41c, Size: 0x4]
	StaticMeshComponent* ShadowProxy;//[Offset: 0x420, Size: 0x8]
	class ActorComponent[] DoorComponentClasses;//[Offset: 0x428, Size: 0x10]
	Character* InteractCharacter;//[Offset: 0x438, Size: 0x8]
	float MaxDrawDistance;//[Offset: 0x440, Size: 0x4]
	Vector CachedDoorHandleClosedDir;//[Offset: 0x450, Size: 0xc]
	bool GateOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 0x1]
	DateTime GateOnTime;//[Offset: 0x460, Size: 0x8]
	FString GateName;//[Offset: 0x468, Size: 0x10]
	SphereComponent* LeftDoorMarker;//[Offset: 0x478, Size: 0x8]
	SphereComponent* RightDoorMarker;//[Offset: 0x480, Size: 0x8]
	SphereComponent* LeftDoorLockMarker;//[Offset: 0x488, Size: 0x8]
	SphereComponent* RightDoorLockMarker;//[Offset: 0x490, Size: 0x8]
	ParticleSystemComponent* ParticleSystemLock;//[Offset: 0x498, Size: 0x8]
	ParticleSystemComponent* ParticleSystemUnlockCoolDown;//[Offset: 0x4a0, Size: 0x8]
	ParticleSystemComponent* ParticleSystemUnlock;//[Offset: 0x4a8, Size: 0x8]
	ParticleSystemComponent* ParticleSystemUnlockCountDown;//[Offset: 0x4b0, Size: 0x8]
	ParticleSystemComponent* ParticleSystemLockBack;//[Offset: 0x4b8, Size: 0x8]
	ParticleSystemComponent* ParticleSystemUnlockCoolDownBack;//[Offset: 0x4c0, Size: 0x8]
	ParticleSystemComponent* ParticleSystemUnlockBack;//[Offset: 0x4c8, Size: 0x8]
	ParticleSystemComponent* ParticleSystemUnlockCountDownBack;//[Offset: 0x4d0, Size: 0x8]
	Actor*[] OverlapActors;//[Offset: 0x4d8, Size: 0x10]
	Vector LastTickDoorHandleDir;//[Offset: 0x4e8, Size: 0xc]
	float DoorWidth;//[Offset: 0x4f4, Size: 0x4]
	float OutOfDoorVelocityWhenOpen;//[Offset: 0x4f8, Size: 0x4]
	Vector2D OutOfDoorVelocityWhenOpenScale;//[Offset: 0x4fc, Size: 0x8]
	float OutOfDoorVelocityWhenClose;//[Offset: 0x504, Size: 0x4]
	Vector2D OutOfDoorVelocityWhenCloseScale;//[Offset: 0x508, Size: 0x8]
	float PronePushMiddleAdditionVelocity;//[Offset: 0x510, Size: 0x4]
	void WreckDoor(Character* WhoIsIt);// 0x4250e3fee041
	void UpdateOverlapActors(bool bIsMoving);// 0x424fe3fee041
	void UpdateGeneratorStateChange();// 0x424ee3fee041
	void UnlockDoorState();// 0x424de3fee041
	void UnlockDoor(Character* WhoIsIt);// 0x424ce3fee041
	void UnlockByGenerator();// 0x424be3fee041
	void TogglePortal(bool Open);// 0x424ae3fee041
	void ToggleDoor(Character* WhoIsIt);// 0x4249e3fee041
	void StopPlayDoorSound(AkAudioEvent* AudioEvent);// 0x4248e3fee041
	void SetEnableUseDoor(bool bCanUse);// 0x4247e3fee041
	void SetDoorState(enum NewState);// 0x4246e3fee041
	void SetDoorOpenType(enum OpenType);// 0x4245e3fee041
	void SetCurAction(enum InAction);// 0x4244e3fee041
	void ResetDoorLock();// 0x4243e3fee041
	void ReleaseAllOverlapActor();// 0x4242e3fee041
	void PlayDoorSound(AkAudioEvent* AudioEvent, bool bPlaySoundFromDoor);// 0x4241e3fee041
	void OpenDoorAuto(enum OpenState);// 0x4240e3fee041
	void OpenDoor(Character* WhoIsIt);// 0x423fe3fee041
	void OnSmartLinkReached_Event(Actor* Agent, out const Vector Destination);// 0x423ee3fee041
	void OnRep_DoorState();// 0x423de3fee041
	void OnRep_DoorOpenType();// 0x423ce3fee041
	void OnRep_CurrentGeneratorOn();// 0x423be3fee041
	void OnRep_CardDoorState();// 0x423ae3fee041
	void OnMovementInfoChanged(out const SGDoorMovementInfo MovementInfo);// 0x4239e3fee041
	void OnGeneratorStateChange(Character* WhoIsIt, bool bNewIsGeneratorOn);// 0x4238e3fee041
	void OnGateOn(Character* Character, Actor* Door, float WaitTime);// 0x4237e3fee041
	void OnDoorMovmentFinished();// 0x4236e3fee041
	void MulticastTogglePortal(bool Open);// 0x4235e3fee041
	void MulticastStopPlayDoorSound(AkAudioEvent* SoundToPlay);// 0x4234e3fee041
	void MulticastSetCurAction(enum InAction);// 0x4233e3fee041
	void MulticastPlayDoorSound(AkAudioEvent* SoundToPlay, bool bPlaySoundFromDoor);// 0x4232e3fee041
	void LockByGenerator();// 0x4231e3fee041
	bool IsDoorMoving();// 0x4230e3fee041
	float IsCharacterInsideDoorFrame(Character* Character);// 0x422fe3fee041
	bool IsCharacterInClockWise(Character* Character);// 0x422ee3fee041
	bool IsBulletPenetration();// 0x422de3fee041
	SGTwoWayDoorPlankComponent* GetTwoWayDoorPlankComponent();// 0x422ce3fee041
	MFILCDynamicScaleComponent* GetILCDynamicScaleComponent();// 0x422be3fee041
	float GetGateRemainTime();// 0x422ae3fee041
	bool GetEnableUseDoor();// 0x4229e3fee041
	float GetDoorWidth();// 0x4228e3fee041
	Vector GetDoorPushPlayertAddtiveVelocity(Character* OverlapCharacter);// 0x4227e3fee041
	Vector GetDoorPlankDir();// 0x4226e3fee041
	SGDoorMovmentComponentBase* GetDoorMovmentComponent();// 0x4225e3fee041
	SGDoorMovementInfo GetDoorMovementInfo();// 0x4224e3fee041
	Vector GetDoorMarkerLocation(bool IsRight, bool IsRelative);// 0x4223e3fee041
	Vector GetDoorLockMarkerLocation(bool IsRight, bool IsRelative);// 0x4222e3fee041
	Vector GetDoorHandleClosedDir();// 0x4221e3fee041
	bool GetDoorAccessForAI();// 0x4220e3fee041
	enum GetDefaultAction(Character* WhoIsIt);// 0x421fe3fee041
	void CustomNotifySmartLinkLeaved(NavLinkCustomComponent* LinkComp, Object* PathingAgent);// 0x421ee3fee041
	void CloseDoor(Character* WhoIsIt);// 0x421de3fee041

--------------------------------
Class: NPCAINavLinkProxy.NavLinkProxy.Actor.Object
	enum LinkType;//[Offset: 0x330, Size: 0x1]
	uint64 PolyRef;//[Offset: 0x338, Size: 0x8]
	int NodeIndex;//[Offset: 0x340, Size: 0x4]
	Vector GetSmartLinkRightLocation();// 0x421ce3fee041
	Vector GetSmartLinkLeftLocation();// 0x421be3fee041
	NavLinkCustomComponent* GetSmartLinkComponent();// 0x421ae3fee041

--------------------------------
Class: NavLinkProxy.Actor.Object
	NavigationLink[] PointLinks;//[Offset: 0x2f0, Size: 0x10]
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x300, Size: 0x10]
	NavLinkCustomComponent* SmartLinkComp;//[Offset: 0x310, Size: 0x8]
	bool bSmartLinkIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	delegate OnSmartLinkReached;//[Offset: 0x320, Size: 0x10]
	void SetSmartLinkEnabled(bool bEnabled);// 0x4219e3fee041
	void ResumePathFollowing(Actor* Agent);// 0x4218e3fee041
	void ReceiveSmartLinkReached(Actor* Agent, out const Vector Destination);// 0x4217e3fee041
	bool IsSmartLinkEnabled();// 0x4216e3fee041
	bool HasMovingAgents();// 0x4215e3fee041

--------------------------------
Class: SGDoorMovementInfo
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float MovingProgress;//[Offset: 0x4, Size: 0x4]
	enum PreState;//[Offset: 0x8, Size: 0x1]
	enum NewState;//[Offset: 0x9, Size: 0x1]
	float MoveSpeed;//[Offset: 0xc, Size: 0x4]
	int OptCount;//[Offset: 0x10, Size: 0x4]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: SGDoorMovmentComponentBase.ActorComponent.Object
	SGDoorBase* DoorOwner;//[Offset: 0xc0, Size: 0x8]
	float DoorSpeed;//[Offset: 0xc8, Size: 0x4]
	float DoorWreckSpeed;//[Offset: 0xcc, Size: 0x4]
	float ActualDoorSpeed;//[Offset: 0xd0, Size: 0x4]
	float MaxDeltaTime;//[Offset: 0xd4, Size: 0x4]
	bool bCanRevertWhenMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	SGDoorMovementInfo MovementInfo;//[Offset: 0xe0, Size: 0x18]
	SGDoorMovementInfo ClientMovementInfo;//[Offset: 0xf8, Size: 0x18]
	SGDoorMovementSyncInfo DoorStatusSyncInfo;//[Offset: 0x110, Size: 0x1c]
	void UpdatePushPlayerCount(int PlayerCount);// 0x425ae3fee041
	void UpdateDoorProcess(float DeltaTime);// 0x4259e3fee041
	void StartDoorMovement(enum FromState, enum ToState, Character* Character, int SpeedType);// 0x4258e3fee041
	void OnRep_DoorStatusSyncInfo();// 0x4257e3fee041
	void OnEvent_StartDoorMovement(enum ToState);// 0x4256e3fee041
	void OnDoorMovmentFinished();// 0x4255e3fee041

--------------------------------
Class: SGDoorMovementSyncInfo
	SGDoorMovementInfo MovementInfo;//[Offset: 0x0, Size: 0x18]
	int Count;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SGTwoWayDoorPlankComponent.MFILCTwoSideSampleStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SGDoorBase* DoorOwner;//[Offset: 0x6a0, Size: 0x8]
	float DoorOpenAngle;//[Offset: 0x6a8, Size: 0x4]
	Vector DoorHandleDir;//[Offset: 0x6ac, Size: 0xc]
	float DoorPlankThickness;//[Offset: 0x6b8, Size: 0x4]

--------------------------------
Class: MFILCTwoSideSampleStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseTwoSideILCSample;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x658, Size: 0x1]
	float ForwardSampleHeightOffset;//[Offset: 0x65c, Size: 0x4]
	float BackSampleHeightOffset;//[Offset: 0x660, Size: 0x4]
	float ForwardSampleDistanceOffset;//[Offset: 0x664, Size: 0x4]
	float BackSampleDistanceOffset;//[Offset: 0x668, Size: 0x4]
	float ForwardSampleHorizontalOffset;//[Offset: 0x66c, Size: 0x4]
	float BackSampleHorizontalOffset;//[Offset: 0x670, Size: 0x4]
	float IndoorSkyVisibilityCompensation;//[Offset: 0x674, Size: 0x4]
	Vector CachedActorForwardDirection;//[Offset: 0x678, Size: 0xc]
	Vector CachedActorRightDirection;//[Offset: 0x684, Size: 0xc]

--------------------------------
Class: MFILCDynamicScaleComponent.ILCDynamicScaleComponent.SceneComponent.ActorComponent.Object
	float CenterRadius;//[Offset: 0x210, Size: 0x4]
	float SkyLightLerpFactor;//[Offset: 0x214, Size: 0x4]
	float ILCScaleFactor;//[Offset: 0x218, Size: 0x4]
	float SkyLightScaleFactor;//[Offset: 0x21c, Size: 0x4]
	void SetSkyLightScaleFactor(float SkyLightScaleFactor);// 0x58c7e3fee041
	void SetSkyLightLerpFactor(float SkyLightLerpFactor);// 0x58c6e3fee041
	void SetILCScaleFactor(float ILCScaleFactor);// 0x58c5e3fee041

--------------------------------
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	uint32 NavLinkUserId;//[Offset: 0xf0, Size: 0x4]
	class NavArea* EnabledAreaClass;//[Offset: 0xf8, Size: 0x8]
	class NavArea* DisabledAreaClass;//[Offset: 0x100, Size: 0x8]
	NavAgentSelector SupportedAgents;//[Offset: 0x108, Size: 0x4]
	Vector LinkRelativeStart;//[Offset: 0x10c, Size: 0xc]
	Vector LinkRelativeEnd;//[Offset: 0x118, Size: 0xc]
	byte LinkDirection;//[Offset: 0x124, Size: 0x1]
	bool bLinkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x125, Size: 0x1]
	bool bNotifyWhenEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x125, Size: 0x1]
	bool bNotifyWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x125, Size: 0x1]
	bool bCreateBoxObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x125, Size: 0x1]
	Vector ObstacleOffset;//[Offset: 0x128, Size: 0xc]
	Vector ObstacleExtent;//[Offset: 0x134, Size: 0xc]
	class NavArea* ObstacleAreaClass;//[Offset: 0x140, Size: 0x8]
	float BroadcastRadius;//[Offset: 0x148, Size: 0x4]
	float BroadcastInterval;//[Offset: 0x14c, Size: 0x4]
	byte BroadcastChannel;//[Offset: 0x150, Size: 0x1]

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 0x1]
	Object* CachedNavParent;//[Offset: 0xe0, Size: 0x8]
	void SetNavigationRelevancy(bool bRelevant);// 0x71ede3fee041

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4]
	Color DrawColor;//[Offset: 0x34, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: SGCharacterAnimInstance.SGCharacterAnimInstanceBase.AnimInstance.Object
	SGCharacterAnimInstanceProxy LocalProxy;//[Offset: 0x360, Size: 0x10a0]
	bool IsUpperbody();// 0x3bc6e3fee041
	float IsTransitioning();// 0x3bc5e3fee041
	bool IsStand();// 0x3bc4e3fee041
	bool IsRagdoll();// 0x3bc3e3fee041
	bool IsProne();// 0x3bc2e3fee041
	bool IsPlayingSlotAnim();// 0x3bc1e3fee041
	bool IsMoving();// 0x3bc0e3fee041
	bool IsLanding();// 0x3bbfe3fee041
	bool IsJumping();// 0x3bbee3fee041
	bool IsFPP();// 0x3bbde3fee041
	float IsForbiddenFire();// 0x3bbce3fee041
	bool IsFiring();// 0x3bbbe3fee041
	bool IsFalling();// 0x3bbae3fee041
	bool IsDBNO();// 0x3bb9e3fee041
	bool IsCrouch();// 0x3bb8e3fee041
	bool IsArmedWithThrow();// 0x3bb7e3fee041
	bool IsArmedWithGun();// 0x3bb6e3fee041
	bool IsAiming();// 0x3bb5e3fee041
	bool IsADSOrScoping();// 0x3bb4e3fee041
	bool Is1P();// 0x3bb3e3fee041
	enum GetWeaponType();// 0x3bb2e3fee041
	Vector GetScalableCameraTranslationOffset();// 0x3bb1e3fee041
	Rotator GetScalableCameraRotationOffset();// 0x3bb0e3fee041
	enum GetRootYawOffsetMode();// 0x3bafe3fee041
	PoseSnapshot GetRagdollPose();// 0x3baee3fee041
	SGCharacterAnimInstanceProxy GetProxy();// 0x3bade3fee041
	enum GetMovementStance();// 0x3bace3fee041
	float GetLeanDuration();// 0x3babe3fee041
	float GetLandingAlpha();// 0x3baae3fee041
	Vector GetHandWeaponOffset();// 0x3ba9e3fee041
	Vector GetGunTranslation();// 0x3ba8e3fee041
	Rotator GetGunRotation();// 0x3ba7e3fee041
	float GetEnableWeaponTraceCurveValue();// 0x3ba6e3fee041
	float GetCurve_FootLock_R();// 0x3ba5e3fee041
	float GetCurve_FootLock_L();// 0x3ba4e3fee041
	Rotator GetCameraRotationOffset();// 0x3ba3e3fee041
	float GetCameraAnimatedRotationAlpha();// 0x3ba2e3fee041
	PoseSnapshot GetCachedPose();// 0x3ba1e3fee041
	float GetAORotationYaw();// 0x3ba0e3fee041
	float GetAORotationRoll();// 0x3b9fe3fee041
	float GetAORotationPitch();// 0x3b9ee3fee041
	enum GetAnimStance();// 0x3b9de3fee041
	bool GetAnimSetReady();// 0x3b9ce3fee041
	float FindPositionFromDistanceCurve(float Distance, AnimSequence* InAnimSequence);// 0x3b9be3fee041

--------------------------------
Class: SGCharacterAnimInstanceBase.AnimInstance.Object
	class SGCharacterAnimationSets* CharacterAnimationSetsClass;//[Offset: 0x2b8, Size: 0x8]
	class SGPerWeaponAnimationSets* PerWeaponAnimationSetsClass;//[Offset: 0x2c0, Size: 0x8]
	class SGPerWeaponAnimationSets* PerWeaponAnimationSetsClass_Left;//[Offset: 0x2c8, Size: 0x8]
	float Trigger_RunJump_Loop2End_LandPredicAlpha;//[Offset: 0x2d0, Size: 0x4]
	float Trigger_IdleJump_Loop2End_LandPredicAlpha;//[Offset: 0x2d4, Size: 0x4]
	bool bUseOverrideAOInterpolationTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	float AOInterpolationDecreaseScalerByTurnInPlaceRootMotion;//[Offset: 0x2dc, Size: 0x4]
	float AOInterpolationTime;//[Offset: 0x2e0, Size: 0x4]
	SpineOffsetPreset SpineOffsets;//[Offset: 0x2e4, Size: 0x18]
	bool bIsCrouchToStanding_cpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	bool bIsStandToCrouching_cpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 0x1]
	Vector HandWeaponOffset_3P;//[Offset: 0x350, Size: 0xc]
	bool bEnableLODLoadBalance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 0x1]
	void SetPerWeaponAnimationSetsClass_Left(class SGPerWeaponAnimationSets InPerWeaponAnimationSetsClass_Left);// 0x3b9ae3fee041
	void SetPerWeaponAnimationSetsClass(class SGPerWeaponAnimationSets InPerWeaponAnimationSetsClass);// 0x3b99e3fee041
	void SetCharacterAnimationSetsClass(class SGCharacterAnimationSets InCharacterAnimationSetsClass);// 0x3b98e3fee041
	SGCharacterAnimInstanceProxyBase GetProxyBase();// 0x3b97e3fee041

--------------------------------
Class: SGCharacterAnimInstanceProxy.SGCharacterAnimInstanceProxyLOD.SGCharacterAnimInstanceProxyBase.AnimInstanceProxy
	SGCharacterCastShadowComponent* CachedCastShadowComponent;//[Offset: 0x1098, Size: 0x8]

--------------------------------
Class: SGCharacterAnimInstanceProxyLOD.SGCharacterAnimInstanceProxyBase.AnimInstanceProxy
	float LocomotionHandIK_CurveValue_Scaler;//[Offset: 0x1088, Size: 0x4]

--------------------------------
Class: SGCharacterAnimInstanceProxyBase.AnimInstanceProxy
	AnimSequence* Stand_Idle;//[Offset: 0x760, Size: 0x8]
	AnimSequence* CasualStandAnimations_3P;//[Offset: 0x768, Size: 0x8]
	AnimSequence* StandAnimations_3P;//[Offset: 0x770, Size: 0x8]
	AnimSequence* Idle_FixUpRightHand;//[Offset: 0x778, Size: 0x8]
	AnimSequence* Stand_IdleLeanLeft;//[Offset: 0x780, Size: 0x8]
	AnimSequence* Stand_IdleLeanRight;//[Offset: 0x788, Size: 0x8]
	AimOffsetBlendSpace* Stand_AimOffset;//[Offset: 0x790, Size: 0x8]
	AimOffsetBlendSpace* Stand_AimOffsetLeanLeft;//[Offset: 0x798, Size: 0x8]
	AimOffsetBlendSpace* Stand_AimOffsetLeanRight;//[Offset: 0x7a0, Size: 0x8]
	enum Stand_Locomotion_Type;//[Offset: 0x7a8, Size: 0x1]
	bool bHasLocomotion_Fracture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a9, Size: 0x1]
	BlendSpaceBase* Stand_AccelerationLeanBS;//[Offset: 0x7b0, Size: 0x8]
	bool bHasStand_AccelerationLeanBS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 0x1]
	AnimSequence* Crouch_Idle;//[Offset: 0x7c0, Size: 0x8]
	AnimSequence* Crouch_IdleLeanLeft;//[Offset: 0x7c8, Size: 0x8]
	AnimSequence* Crouch_IdleLeanRight;//[Offset: 0x7d0, Size: 0x8]
	AimOffsetBlendSpace* Crouch_AimOffset;//[Offset: 0x7d8, Size: 0x8]
	AimOffsetBlendSpace* Crouch_AimOffsetLeanLeft;//[Offset: 0x7e0, Size: 0x8]
	AimOffsetBlendSpace* Crouch_AimOffsetLeanRight;//[Offset: 0x7e8, Size: 0x8]
	AnimSequence* Prone_Idle;//[Offset: 0x7f0, Size: 0x8]
	AnimSequence* Prone_IdleLeanLeft;//[Offset: 0x7f8, Size: 0x8]
	AnimSequence* Prone_IdleLeanRight;//[Offset: 0x800, Size: 0x8]
	AimOffsetBlendSpace* Prone_AimOffset;//[Offset: 0x808, Size: 0x8]
	AimOffsetBlendSpace* Prone_AimOffsetLeanLeft;//[Offset: 0x810, Size: 0x8]
	AimOffsetBlendSpace* Prone_AimOffsetLeanRight;//[Offset: 0x818, Size: 0x8]
	AnimSequence* DBNO_Idle;//[Offset: 0x820, Size: 0x8]
	AnimSequence* DBNO_IdleLeanLeft;//[Offset: 0x828, Size: 0x8]
	AnimSequence* DBNO_IdleLeanRight;//[Offset: 0x830, Size: 0x8]
	AimOffsetBlendSpace* DBNO_AimOffset;//[Offset: 0x838, Size: 0x8]
	AimOffsetBlendSpace* DBNO_AimOffsetLeanLeft;//[Offset: 0x840, Size: 0x8]
	AimOffsetBlendSpace* DBNO_AimOffsetLeanRight;//[Offset: 0x848, Size: 0x8]
	AnimSequence* Current_Idle;//[Offset: 0x850, Size: 0x8]
	AnimSequenceBase* DeathAnim;//[Offset: 0x858, Size: 0x8]
	enum Stance;//[Offset: 0x860, Size: 0x1]
	enum WeaponStance;//[Offset: 0x861, Size: 0x1]
	bool bIsStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x862, Size: 0x1]
	bool bIsCasual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x863, Size: 0x1]
	bool bIsCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x864, Size: 0x1]
	bool bIsProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x865, Size: 0x1]
	bool bIsDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x866, Size: 0x1]
	bool bIsLadderClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x867, Size: 0x1]
	float PronePlayRate;//[Offset: 0x868, Size: 0x4]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86c, Size: 0x1]
	bool bIsNotMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86d, Size: 0x1]
	bool bIsLocationChagned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86e, Size: 0x1]
	bool bILastLocationChagned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86f, Size: 0x1]
	bool bIsMovingForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 0x1]
	bool bIsMovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x871, Size: 0x1]
	bool bIsNotSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x872, Size: 0x1]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x873, Size: 0x1]
	bool bIs1PSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x874, Size: 0x1]
	bool bIsSprintingLastTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x875, Size: 0x1]
	float MovementStance;//[Offset: 0x878, Size: 0x4]
	bool bIsLeaning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 0x1]
	bool bIsLeaningLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87d, Size: 0x1]
	bool bIsLeaningRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87e, Size: 0x1]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87f, Size: 0x1]
	enum LeanAimType;//[Offset: 0x880, Size: 0x1]
	float LeanAOAdditiveAlpha_3P;//[Offset: 0x884, Size: 0x4]
	bool bIsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 0x1]
	bool bIsLocalPlayerControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x889, Size: 0x1]
	bool bIs1P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88a, Size: 0x1]
	enum CharacterSex;//[Offset: 0x88b, Size: 0x1]
	float IdleBreathAlpha;//[Offset: 0x88c, Size: 0x4]
	bool bIsAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 0x1]
	bool bIsSwitchingScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x891, Size: 0x1]
	bool bIsScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x892, Size: 0x1]
	float CurrentSightFov;//[Offset: 0x894, Size: 0x4]
	bool bIsScopingWithRearSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x898, Size: 0x1]
	bool bIsArmedWithGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x899, Size: 0x1]
	bool bIsArmedWithThrown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89a, Size: 0x1]
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89b, Size: 0x1]
	bool bIsUpperbody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89c, Size: 0x1]
	bool bIsMirrorAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89d, Size: 0x1]
	bool bIsUsingItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89e, Size: 0x1]
	bool bIsCheckingWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89f, Size: 0x1]
	bool bShouldUseHandOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a0, Size: 0x1]
	bool bCanPlayIdleAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a1, Size: 0x1]
	int IdleAnimIndex;//[Offset: 0x8a4, Size: 0x4]
	bool bIsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a8, Size: 0x1]
	bool bIsSilentWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a9, Size: 0x1]
	bool bIsPlayingSlotAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8aa, Size: 0x1]
	bool bIsPlayingSlotAnimation_UpperBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ab, Size: 0x1]
	bool bIsEmptyHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ac, Size: 0x1]
	bool bIsPrviewCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ad, Size: 0x1]
	float FPPAnimWeight_Translation;//[Offset: 0x8b0, Size: 0x4]
	float FPPAnimWeight_Rotation;//[Offset: 0x8b4, Size: 0x4]
	bool bShouldBlendFPPAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8, Size: 0x1]
	bool bShouldFPPWeaponSway;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b9, Size: 0x1]
	bool bAnimSetReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ba, Size: 0x1]
	bool bIsShadowMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bb, Size: 0x1]
	bool bShouldModifyAOCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bc, Size: 0x1]
	bool bShouldMovementSway;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bd, Size: 0x1]
	bool bShouldStandToCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8be, Size: 0x1]
	bool bShouldCrouchingToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bf, Size: 0x1]
	bool bIsFPPAndAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 0x1]
	bool bIsFPPAndNotAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c1, Size: 0x1]
	bool bIsLegOutOfEndurance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c2, Size: 0x1]
	float MovementSpeedScale;//[Offset: 0x8d4, Size: 0x4]
	bool bWantStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d8, Size: 0x1]
	float MovingDirection;//[Offset: 0x8dc, Size: 0x4]
	float MovingDirectionClamped;//[Offset: 0x8e0, Size: 0x4]
	float MovingDirectionCompensation;//[Offset: 0x8e4, Size: 0x4]
	float MovingDirectionOrientationWarpCopyBoneAlpha;//[Offset: 0x8e8, Size: 0x4]
	float WantToMoveDirAngle;//[Offset: 0x8ec, Size: 0x4]
	float PawnToCamerAngle;//[Offset: 0x8f0, Size: 0x4]
	float NormalizedSpeed;//[Offset: 0x8f4, Size: 0x4]
	float VerticalVelocity;//[Offset: 0x8f8, Size: 0x4]
	float HorizontalVelocity;//[Offset: 0x8fc, Size: 0x4]
	float AccLength;//[Offset: 0x900, Size: 0x4]
	float AccDirection;//[Offset: 0x904, Size: 0x4]
	float VelocityBeforStop;//[Offset: 0x908, Size: 0x4]
	float AccDirBeforStop;//[Offset: 0x90c, Size: 0x4]
	float DirectionBeforStop;//[Offset: 0x910, Size: 0x4]
	float ProneRampRotationPitch;//[Offset: 0x914, Size: 0x4]
	float ProneRampRotation;//[Offset: 0x918, Size: 0x4]
	float MovementPlayRate;//[Offset: 0x91c, Size: 0x4]
	float MovementStartPosition;//[Offset: 0x920, Size: 0x4]
	float MovementSpeedWarping;//[Offset: 0x924, Size: 0x4]
	Vector FPPLowerBodyOffset;//[Offset: 0x928, Size: 0xc]
	Vector FPPJumpUpperBodyOffset;//[Offset: 0x934, Size: 0xc]
	Vector BreathTranslation;//[Offset: 0x940, Size: 0xc]
	Vector BreathTranslation_SilentWalk;//[Offset: 0x94c, Size: 0xc]
	Rotator BreathRotation;//[Offset: 0x958, Size: 0xc]
	float RotationYaw;//[Offset: 0x964, Size: 0x4]
	float RotationPitch;//[Offset: 0x968, Size: 0x4]
	float Yaw;//[Offset: 0x96c, Size: 0x4]
	float Pitch;//[Offset: 0x970, Size: 0x4]
	float Roll;//[Offset: 0x974, Size: 0x4]
	Rotator ViewRotation_LastFrame;//[Offset: 0x978, Size: 0xc]
	Rotator ViewRotation;//[Offset: 0x984, Size: 0xc]
	Rotator AORotation;//[Offset: 0x990, Size: 0xc]
	Rotator AORotationWithWeaponSway;//[Offset: 0x99c, Size: 0xc]
	Rotator AORotationWithWeaponSway_OnlyYaw;//[Offset: 0x9a8, Size: 0xc]
	Rotator AORotationWithWeaponSway_OnlyPitch;//[Offset: 0x9b4, Size: 0xc]
	Vector SpineOffset;//[Offset: 0x9c0, Size: 0xc]
	Vector SpineOffsetWhenPitch;//[Offset: 0x9cc, Size: 0xc]
	float WeaponSwayAlpha_Yaw;//[Offset: 0x9d8, Size: 0x4]
	float WeaponSwayAlpha_Pitch;//[Offset: 0x9dc, Size: 0x4]
	float WeaponSwayDelay_Yaw;//[Offset: 0x9e0, Size: 0x4]
	float WeaponSwayDelay_Pitch;//[Offset: 0x9e4, Size: 0x4]
	bool bShouldUseAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e8, Size: 0x1]
	Rotator MeshRotationOffset;//[Offset: 0x9ec, Size: 0xc]
	Vector MeshLocationOffset;//[Offset: 0x9f8, Size: 0xc]
	Rotator MeshLegsRotationOffset;//[Offset: 0xa04, Size: 0xc]
	bool bUseOverrideInterpolationParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10, Size: 0x1]
	InterpolationParameter OverrideInterpolationParam_X;//[Offset: 0xa14, Size: 0x8]
	InterpolationParameter OverrideInterpolationParam_Y;//[Offset: 0xa1c, Size: 0x8]
	float WeaponShakeAlpha;//[Offset: 0xa24, Size: 0x4]
	float WeaponShakeType;//[Offset: 0xa28, Size: 0x4]
	float RootBoneRotationYaw;//[Offset: 0xa2c, Size: 0x4]
	enum RootYawOffsetMode;//[Offset: 0xa30, Size: 0x1]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa31, Size: 0x1]
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa32, Size: 0x1]
	bool bIsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa33, Size: 0x1]
	bool bIsNotInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa34, Size: 0x1]
	bool bIsLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa35, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa36, Size: 0x1]
	float SlideAngle;//[Offset: 0xa38, Size: 0x4]
	float FallingAlpha;//[Offset: 0xa3c, Size: 0x4]
	float LandingAlpha;//[Offset: 0xa40, Size: 0x4]
	float LandPredictionAlpha;//[Offset: 0xa44, Size: 0x4]
	bool bTrigger_RunJump_Loop2End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa48, Size: 0x1]
	bool bTrigger_IdleJump_Loop2End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa49, Size: 0x1]
	Vector LandingTranslation_Ribcage;//[Offset: 0xa4c, Size: 0xc]
	Vector LandingTranslation_RCollarBone;//[Offset: 0xa58, Size: 0xc]
	Rotator LandingRotation_RPalm;//[Offset: 0xa64, Size: 0xc]
	float LeanRollOffset;//[Offset: 0xa70, Size: 0x4]
	Rotator LeanRotation_Ribcage;//[Offset: 0xa74, Size: 0xc]
	float LeanHorizontalOffset;//[Offset: 0xa80, Size: 0x4]
	Vector LeanTranslation_Spine1;//[Offset: 0xa84, Size: 0xc]
	float LeanDuration;//[Offset: 0xa90, Size: 0x4]
	bool bEnableAccelerationLean;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa94, Size: 0x1]
	float AccelerateLeanAmount_X;//[Offset: 0xa98, Size: 0x4]
	float AccelerateLeanAmount_Y;//[Offset: 0xa9c, Size: 0x4]
	bool bIsRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa0, Size: 0x1]
	PoseSnapshot RagdollPose;//[Offset: 0xaa8, Size: 0x38]
	float DeathDirection;//[Offset: 0xae0, Size: 0x4]
	int DeathStance;//[Offset: 0xae4, Size: 0x4]
	int DeathBodyPart;//[Offset: 0xae8, Size: 0x4]
	SGCharacterAnimInstanceBase* SGAnimInstance;//[Offset: 0xaf0, Size: 0x8]
	SGCharacter* SGCharacter;//[Offset: 0xaf8, Size: 0x8]
	SGWeapon* SGWeapon;//[Offset: 0xb00, Size: 0x8]
	bool bIsWeaponChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb08, Size: 0x1]
	bool bHasTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb09, Size: 0x1]
	float TransitionType;//[Offset: 0xb0c, Size: 0x4]
	bool bHasAnimStanceTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb10, Size: 0x1]
	float AnimStanceTransitionType;//[Offset: 0xb14, Size: 0x4]
	float SprintTransitionOutPlayRate;//[Offset: 0xb18, Size: 0x4]
	SkeletalMeshComponent* CopyPoseFrom;//[Offset: 0xb20, Size: 0x8]
	Rotator MeleeRecoilRotation;//[Offset: 0xb28, Size: 0xc]
	float WeaponStabilityAlpha;//[Offset: 0xb34, Size: 0x4]
	float AimingScale;//[Offset: 0xb38, Size: 0x4]
	Vector WeaponSwayTranslation_RPalm;//[Offset: 0xb3c, Size: 0xc]
	Rotator WeaponSwayRotation_RPalm;//[Offset: 0xb48, Size: 0xc]
	Vector WeaponSwaySpringPivotOffset;//[Offset: 0xb54, Size: 0xc]
	Rotator WeaponADSRotation_Shake;//[Offset: 0xb60, Size: 0xc]
	Vector WeaponADSLocation_Shake;//[Offset: 0xb6c, Size: 0xc]
	Vector WeaponADSLocation_Shake_Camera;//[Offset: 0xb78, Size: 0xc]
	bool bShouldUseADSBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb84, Size: 0x1]
	bool bShouldUseFPPBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb85, Size: 0x1]
	Vector WeaponWithStockHoldingOffset;//[Offset: 0xb88, Size: 0xc]
	Vector WeaponGunTranslation;//[Offset: 0xb94, Size: 0xc]
	Rotator WeaponGunRotator;//[Offset: 0xba0, Size: 0xc]
	Vector WeaponShakePivotOffset;//[Offset: 0xbac, Size: 0xc]
	Vector ADSWeaponGunTranslation;//[Offset: 0xbb8, Size: 0xc]
	Rotator ADSWeaponGunRotator;//[Offset: 0xbc4, Size: 0xc]
	Rotator ADSWeaponSightRotator;//[Offset: 0xbd0, Size: 0xc]
	Vector ADSWeaponShakePivotOffset;//[Offset: 0xbdc, Size: 0xc]
	Vector ADSWeaponSightShakePivotOffset;//[Offset: 0xbe8, Size: 0xc]
	Rotator WeaponSwayRotation_ADS_RPalm;//[Offset: 0xbf4, Size: 0xc]
	Vector WeaponTraceLocationOffset_RightHand;//[Offset: 0xc00, Size: 0xc]
	Rotator WeaponTraceRotationOffset_RightHand;//[Offset: 0xc0c, Size: 0xc]
	Vector WeaponTraceLocationOffset_LeftHand;//[Offset: 0xc18, Size: 0xc]
	Rotator WeaponTraceRotationOffset_LeftHand;//[Offset: 0xc24, Size: 0xc]
	Rotator WeaponTraceRUpperArmRot;//[Offset: 0xc30, Size: 0xc]
	Rotator WeaponTraceRForeArm1Rot;//[Offset: 0xc3c, Size: 0xc]
	Vector CameraOffsetForWeaponTrace;//[Offset: 0xc48, Size: 0xc]
	Rotator WeaponMovementSwayRotation;//[Offset: 0xc54, Size: 0xc]
	float WeaponZoomTime;//[Offset: 0xc60, Size: 0x4]
	float WeaponUnZoomTime;//[Offset: 0xc64, Size: 0x4]
	float WeaponZoomAnimRate;//[Offset: 0xc68, Size: 0x4]
	float WeaponUnZoomAnimRate;//[Offset: 0xc6c, Size: 0x4]
	float ZoomingAlpha;//[Offset: 0xc70, Size: 0x4]
	float UnZoomingAlpha;//[Offset: 0xc74, Size: 0x4]
	float AlphaForZoomingBranch;//[Offset: 0xc78, Size: 0x4]
	float AlphaForUnzoomingBranch;//[Offset: 0xc7c, Size: 0x4]
	bool bCachedIsAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc80, Size: 0x1]
	bool bInitFromHipFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc81, Size: 0x1]
	bool bInitFromADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc82, Size: 0x1]
	float HoldingWeaponAlpha;//[Offset: 0xc84, Size: 0x4]
	Vector ZoomingOffset_Location_3P;//[Offset: 0xc88, Size: 0xc]
	Vector ZoomingLagPivotOffset;//[Offset: 0xc94, Size: 0xc]
	Vector ZoomingHandOffset;//[Offset: 0xca0, Size: 0xc]
	Rotator ZoomingHandRotOffset;//[Offset: 0xcac, Size: 0xc]
	Vector ZoomingIronSightOffset;//[Offset: 0xcd0, Size: 0xc]
	Rotator ZoomingIronSightRotOffset;//[Offset: 0xcdc, Size: 0xc]
	Vector CurrentZoomingHandOffset;//[Offset: 0xce8, Size: 0xc]
	Rotator CurrentZoomingHandRotOffset;//[Offset: 0xcf4, Size: 0xc]
	bool bExperimentalADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd00, Size: 0x1]
	SGAnimationBreathInfo BreathInfo;//[Offset: 0xd28, Size: 0x18]
	BlendSpaceBase* TakeHitBlendSpace;//[Offset: 0xd40, Size: 0x8]
	float TakeHitAnimationPlayRate;//[Offset: 0xd48, Size: 0x4]
	bool bBlendShapeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4c, Size: 0x1]
	float TakeHitDirX;//[Offset: 0xd50, Size: 0x4]
	float TakeHitDirY;//[Offset: 0xd54, Size: 0x4]
	float TakeHitAlpha;//[Offset: 0xd58, Size: 0x4]
	float StartPos;//[Offset: 0xd5c, Size: 0x4]
	bool bIsPoseCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 0x1]
	PoseSnapshot PoseCache;//[Offset: 0xd68, Size: 0x38]
	float WeaponHandgripType;//[Offset: 0xda0, Size: 0x4]
	bool bHasIdleSeqBasePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda4, Size: 0x1]
	AnimSequence* IdleSeqBasePose;//[Offset: 0xda8, Size: 0x8]
	bool bHasIdleSeq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb0, Size: 0x1]
	AnimSequence* IdleSeq;//[Offset: 0xdb8, Size: 0x8]
	bool bHasIdleSeq_Additive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc0, Size: 0x1]
	AnimSequence* IdleSeq_Additive;//[Offset: 0xdc8, Size: 0x8]
	AnimSequence* ADS_IdleSeq_Additive;//[Offset: 0xdd0, Size: 0x8]
	AnimSequence* ZoomInSeq_GripBased_Additive;//[Offset: 0xdd8, Size: 0x8]
	AnimSequence* ZoomOutSeq_GripBased_Additive;//[Offset: 0xde0, Size: 0x8]
	bool bShouldUseZoomAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde8, Size: 0x1]
	bool bHasCasualIdleSeq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde9, Size: 0x1]
	AnimSequence* CasualIdleSeq;//[Offset: 0xdf0, Size: 0x8]
	Vector ForeGripOffset;//[Offset: 0xdf8, Size: 0xc]
	BlendSpace1D* WeaponShakeBS;//[Offset: 0xe08, Size: 0x8]
	bool bHasWeaponShakeBS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe10, Size: 0x1]
	Vector HandWeaponOffset_LeftHand;//[Offset: 0xe14, Size: 0xc]
	Vector HandWeaponOffset_RightHand_Location;//[Offset: 0xe20, Size: 0xc]
	Rotator HandWeaponOffset_RightHand_Rotation;//[Offset: 0xe2c, Size: 0xc]
	Vector HandOffset_L_Location;//[Offset: 0xe38, Size: 0xc]
	float Enable_HandOffset_L_Alpha;//[Offset: 0xe44, Size: 0x4]
	Vector HandOffset_R_Location;//[Offset: 0xe48, Size: 0xc]
	float Enable_HandOffset_R_Alpha;//[Offset: 0xe54, Size: 0x4]
	float WeaponReargripType;//[Offset: 0xe58, Size: 0x4]
	BlendSpace1D* RearGripIdleBS;//[Offset: 0xe60, Size: 0x8]
	BlendSpace1D* CasualRearGripIdleBS;//[Offset: 0xe68, Size: 0x8]
	float Enable_RightHandGripPose;//[Offset: 0xe70, Size: 0x4]
	bool bHasForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe74, Size: 0x1]
	float WeaponForegripType;//[Offset: 0xe78, Size: 0x4]
	float GripPoseAdjustmentAlpha;//[Offset: 0xe7c, Size: 0x4]
	BlendSpace1D* CasualGripAdjustmentBS;//[Offset: 0xe80, Size: 0x8]
	Vector HandWeaponOffset;//[Offset: 0xe88, Size: 0xc]
	bool EnableTargetIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe94, Size: 0x1]
	Vector LeftHandTarget;//[Offset: 0xe98, Size: 0xc]
	Vector LeftShoudlerLocation;//[Offset: 0xea4, Size: 0xc]
	Rotator LeftShoudlerRotation;//[Offset: 0xeb0, Size: 0xc]
	float Enable_AdaptiveWeaponTriggerAlpha;//[Offset: 0xebc, Size: 0x4]
	Vector HandOffset_R_AdaptiveWeaponTrigger;//[Offset: 0xec0, Size: 0xc]
	BlendSpace1D* AdjustGripIdleBS;//[Offset: 0xed0, Size: 0x8]
	BlendSpace1D* AICasualGripIdleBS;//[Offset: 0xed8, Size: 0x8]
	BlendSpace1D* CasualGripIdleBS;//[Offset: 0xee0, Size: 0x8]
	BlendSpace1D* GripIdleBS;//[Offset: 0xee8, Size: 0x8]
	bool bHasReargrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef0, Size: 0x1]
	BlendSpace1D* LFingerAdaptiveBS;//[Offset: 0xef8, Size: 0x8]
	float bEnableLFingerAdaptive;//[Offset: 0xf00, Size: 0x4]
	float LFingerAdaptiveAlpha;//[Offset: 0xf04, Size: 0x4]
	float IsTransitioning;//[Offset: 0xf08, Size: 0x4]
	float IsForbiddenFire;//[Offset: 0xf0c, Size: 0x4]
	float BlendLeftRightArmPose;//[Offset: 0xf10, Size: 0x4]
	float Enable_Override_BlendPerBone;//[Offset: 0xf14, Size: 0x4]
	float Override_UpperBody_MS;//[Offset: 0xf18, Size: 0x4]
	float Override_UpperBody;//[Offset: 0xf1c, Size: 0x4]
	float Override_RightHand;//[Offset: 0xf20, Size: 0x4]
	float Override_RightHand_PostAdditive;//[Offset: 0xf24, Size: 0x4]
	float Override_RightHandIndex_PostAdditive;//[Offset: 0xf28, Size: 0x4]
	float Enable_CopyCameraIKBone;//[Offset: 0xf2c, Size: 0x4]
	float Enable_WeaponTrace;//[Offset: 0xf30, Size: 0x4]
	float Enable_WeaponTraceClamped;//[Offset: 0xf34, Size: 0x4]
	float Enable_WeaponTraceSquard;//[Offset: 0xf38, Size: 0x4]
	float Enable_AO;//[Offset: 0xf3c, Size: 0x4]
	float Enable_AO_1P;//[Offset: 0xf40, Size: 0x4]
	float Enable_HandIK;//[Offset: 0xf44, Size: 0x4]
	float Enable_AdaptiveWeaponHandGripPose;//[Offset: 0xf48, Size: 0x4]
	float Enable_LeftHandGripPose;//[Offset: 0xf4c, Size: 0x4]
	float Enable_BlendLeftHandGrip;//[Offset: 0xf50, Size: 0x4]
	float Enable_BlendRightHandGrip;//[Offset: 0xf54, Size: 0x4]
	float LeftHandIK_Offset;//[Offset: 0xf58, Size: 0x4]
	float RecoilUp;//[Offset: 0xf5c, Size: 0x4]
	float RecoilBack;//[Offset: 0xf60, Size: 0x4]
	float Enable_CameraAnimated_Rotation;//[Offset: 0xf64, Size: 0x4]
	Rotator CameraRotationOffset;//[Offset: 0xf68, Size: 0xc]
	Rotator ScalableCameraRotationOffset;//[Offset: 0xf74, Size: 0xc]
	Vector ScalableCameraTranslationOffset;//[Offset: 0xf80, Size: 0xc]
	float Enable_CopyBone_Item_R_To_IK_Hand_Gun;//[Offset: 0xf8c, Size: 0x4]
	float Enable_Additive;//[Offset: 0xf90, Size: 0x4]
	float Enable_Additive_BlendPerBone;//[Offset: 0xf94, Size: 0x4]
	float Enable_Pelvis_Additive;//[Offset: 0xf98, Size: 0x4]
	float Enable_Head_Additive;//[Offset: 0xf9c, Size: 0x4]
	float Enable_RightArm_Additive;//[Offset: 0xfa0, Size: 0x4]
	float Enable_RightHand_Additive;//[Offset: 0xfa4, Size: 0x4]
	float Enable_RightHandIK_Additive;//[Offset: 0xfa8, Size: 0x4]
	float Disable_IKHandGun_Additive;//[Offset: 0xfac, Size: 0x4]
	float Enable_LocomotionHandIK_Position;//[Offset: 0xfb0, Size: 0x4]
	float LocomotionHandIK_Position_Speed;//[Offset: 0xfb4, Size: 0x4]
	float Enable_LeftArm_Additive;//[Offset: 0xfb8, Size: 0x4]
	float Enable_LeftHand_Additive;//[Offset: 0xfbc, Size: 0x4]
	float Enable_LeftHandIK_Additive;//[Offset: 0xfc0, Size: 0x4]
	float Enable_Additive_Montage_BlendPerBone;//[Offset: 0xfc4, Size: 0x4]
	float Enable_Pelvis_Additive_Montage;//[Offset: 0xfc8, Size: 0x4]
	float Enable_Head_Additive_Montage;//[Offset: 0xfcc, Size: 0x4]
	float Enable_RightArm_Additive_Montage;//[Offset: 0xfd0, Size: 0x4]
	float Enable_RightHand_Additive_Montage;//[Offset: 0xfd4, Size: 0x4]
	float Enable_RightHandIK_Additive_Montage;//[Offset: 0xfd8, Size: 0x4]
	float Enable_LeftArm_Additive_Montage;//[Offset: 0xfdc, Size: 0x4]
	float Enable_LeftHand_Additive_Montage;//[Offset: 0xfe0, Size: 0x4]
	float Enable_LeftHandIK_Additive_Montage;//[Offset: 0xfe4, Size: 0x4]
	float Override_Stand_Spine_03;//[Offset: 0xfe8, Size: 0x4]
	float Disable_Montage;//[Offset: 0xfec, Size: 0x4]
	float FootLock_L;//[Offset: 0xff0, Size: 0x4]
	float FootLock_R;//[Offset: 0xff4, Size: 0x4]
	float Enable_LookAt;//[Offset: 0xff8, Size: 0x4]
	float LookAtClamp;//[Offset: 0xffc, Size: 0x4]
	float Enable_ADS;//[Offset: 0x1000, Size: 0x4]
	bool bOverrideUpperBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1004, Size: 0x1]
	float WeaponStanceAlpha_Throwable;//[Offset: 0x1008, Size: 0x4]
	float WeaponStanceAlpha_Melle;//[Offset: 0x100c, Size: 0x4]
	float WeaponStanceAlpha_Unarmed;//[Offset: 0x1010, Size: 0x4]
	float WeaponStanceAlpha_Rifle;//[Offset: 0x1014, Size: 0x4]
	bool bIsProneMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1018, Size: 0x1]
	bool bIsSilentWalkMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101a, Size: 0x1]
	bool bIsSprintAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101b, Size: 0x1]
	float SprintADSTime;//[Offset: 0x101c, Size: 0x4]
	float SprintADSAlpha;//[Offset: 0x1020, Size: 0x4]
	Vector SprintADSTranslation;//[Offset: 0x1024, Size: 0xc]
	Rotator SprintADSRotation;//[Offset: 0x1030, Size: 0xc]
	bool bIsSprintingLastTime_3P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103c, Size: 0x1]
	bool bIsCrouchAndNotDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103d, Size: 0x1]
	bool bIsProneAndNotDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103e, Size: 0x1]
	bool bIsPlayingSlotAnimation_UpperBody_WhenInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103f, Size: 0x1]
	bool bCanCallapseGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1040, Size: 0x1]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1041, Size: 0x1]
	bool bPlayMontageAddjustAddjustGrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1056, Size: 0x1]
	float GripAdjustLeftHandBlendWeight;//[Offset: 0x1058, Size: 0x4]
	float GripAdjustRightHandBlendWeight;//[Offset: 0x105c, Size: 0x4]
	SGCharacterAnimationSetsPerCharacterSex* CurrentCharacterAnimationSetsPerCharacterSex;//[Offset: 0x1060, Size: 0x8]
	class SGCharacterAnimationSets* CurrentPerWeaponAnimationSetsClass;//[Offset: 0x1068, Size: 0x8]
	class SGCharacterAnimationSets* CurrentPerWeaponAnimationSetsClass_Left;//[Offset: 0x1070, Size: 0x8]
	enum FromMovementStance;//[Offset: 0x1078, Size: 0x1]
	enum ToMovementStance;//[Offset: 0x1079, Size: 0x1]
	enum FromAnimStance;//[Offset: 0x107a, Size: 0x1]
	enum ToAnimStance;//[Offset: 0x107b, Size: 0x1]

--------------------------------
Class: AnimInstanceProxy

--------------------------------
Class: SGCharacterCastShadowComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bCanEverEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1090, Size: 0x1]
	bool bEnableFor1P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1091, Size: 0x1]
	bool bUseLocomotionShadowFor1p;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1092, Size: 0x1]
	SkeletalMesh* ProxySkeletalMesh;//[Offset: 0x1098, Size: 0x8]
	int ForceLOD;//[Offset: 0x10a0, Size: 0x4]
	class AnimInstance* AnimInstanceClass;//[Offset: 0x10a8, Size: 0x8]
	byte TickOptLevel;//[Offset: 0x10c0, Size: 0x1]
	float TickIntervalOpt;//[Offset: 0x10c4, Size: 0x4]
	void OnStopSpectatedByController(PlayerController* PC);// 0x39b3e3fee041
	void OnStartSpectatedByController(PlayerController* PC);// 0x39b2e3fee041
	void OnSetNewOwner(Actor* NewOwner);// 0x39b1e3fee041
	void OnGraphicsQualityLevelChenged(byte InQuality);// 0x39b0e3fee041
	void OnCharacterMeshChanged(SkeletalMesh* CharacterMesh);// 0x39afe3fee041

--------------------------------
Class: SGAnimationBreathInfo
	Vector BreathTranslation;//[Offset: 0x0, Size: 0xc]
	Rotator BreathRotation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SpineOffsetPreset
	Vector TranslationOffset;//[Offset: 0x0, Size: 0xc]
	Vector TranslationOffsetAccordingToPitch;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SGCharacterWeaponSwayComponent.ActorComponent.Object
	float TimeSteps;//[Offset: 0x12c, Size: 0x4]
	CurveFloat* WeaponSwayScalerByEngonomicsCurve;//[Offset: 0x130, Size: 0x8]
	float DefaultWeaponSwayScaler;//[Offset: 0x138, Size: 0x4]
	float SmoothAngularVelocityInterpSpeed;//[Offset: 0x164, Size: 0x4]
	Vector2D AngularVelocityNormalizedRange_Yaw;//[Offset: 0x168, Size: 0x8]
	Vector2D AngularVelocityNormalizedRange_Pitch;//[Offset: 0x170, Size: 0x8]
	Vector2D ADSWeaponSwayClamp_Yaw;//[Offset: 0x178, Size: 0x8]
	Vector2D ADSWeaponSwayClamp_Pitch;//[Offset: 0x180, Size: 0x8]
	float WeaponSwayDelay_Yaw;//[Offset: 0x188, Size: 0x4]
	float WeaponSwayDelay_Pitch;//[Offset: 0x18c, Size: 0x4]
	bool bShouldWeaponSway;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	float PowerBaseValue;//[Offset: 0x19c, Size: 0x4]
	float PowerUpdateFrequency;//[Offset: 0x1a0, Size: 0x4]
	float SinePeriod;//[Offset: 0x1a4, Size: 0x4]
	float WeaponSwayLocOffsetScaler;//[Offset: 0x1c8, Size: 0x4]
	float WeaponSwayRotOffsetScaler;//[Offset: 0x1cc, Size: 0x4]
	float WeaponSwayOffsetScaler_ADS;//[Offset: 0x204, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x208, Size: 0x4]
	void OnStopSpectatedByController(PlayerController* PC);// 0x4165e3fee041
	void OnStartSpectatedByController(PlayerController* PC);// 0x4164e3fee041
	void OnOwnerOrRoleChanged(Actor* NewOwner, byte NewRole);// 0x4163e3fee041

--------------------------------
Class: SGActorUseComponent.ActorComponent.Object
	Actor* CachedActor;//[Offset: 0xc0, Size: 0x8]
	Actor* UsingActorCache;//[Offset: 0xd8, Size: 0x8]
	Actor*[] UsingActors;//[Offset: 0xe0, Size: 0x10]
	Actor*[] InteractBoxInventoryHistory;//[Offset: 0xf0, Size: 0x10]
	void UseActorAfterThrow();// 0x3630e3fee041
	void UnuseActor(Actor* ActorToUnuse, FName UsageType);// 0x362fe3fee041
	void TryToUseActorBroadcastEvent(Actor* TryToUseActor, enum TryToUseActorFailureReason);// 0x362ee3fee041
	void SetUsingActorCache(Actor* InActor);// 0x362de3fee041
	void ServerUseActor(Actor* ActorToUse, FName UsageType, enum UseInBodyType, int Mode);// 0x362ce3fee041
	void ServerUnuseActor(Actor* ActorToUse, FName UsageType);// 0x362be3fee041
	void OnRep_UsingActorCache();// 0x362ae3fee041
	bool IsUsingActor();// 0x3629e3fee041
	Actor* GetUsingActorCache();// 0x3628e3fee041
	void ClientTryToUseActorBroadcastEvent(Actor* TryToUseActor, enum TryToUseActorFailureReason);// 0x3627e3fee041

--------------------------------
Class: SGCharacterBaseTurnComponent.ActorComponent.Object
	bool bTurnLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bTurnRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bTurn180;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bIsChangeActorRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1]
	bool bTickTurnInPlaceAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	SGTurnInPlaceAnimationConfig TurnInPlaceAnimation_Stand;//[Offset: 0xd0, Size: 0x30]
	SGTurnInPlaceAnimationConfig TurnInPlaceAnimation_Crouch;//[Offset: 0x100, Size: 0x30]
	SGTurnInPlaceAnimationConfig TurnInPlaceAnimation_Prone;//[Offset: 0x130, Size: 0x30]
	SGTurnInPlaceAnimationConfig TurnInPlaceAnimation_DBNO;//[Offset: 0x160, Size: 0x30]
	SGTurnInPlaceAnimSequenceConfig TurnInPlaceAnimation_Stand_Sequence;//[Offset: 0x190, Size: 0x30]
	SGTurnInPlaceAnimSequenceConfig TurnInPlaceAnimation_Crouch_Sequence;//[Offset: 0x1c0, Size: 0x30]
	SGTurnInPlaceAnimSequenceConfig TurnInPlaceAnimation_Prone_Sequence;//[Offset: 0x1f0, Size: 0x30]
	SGTurnInPlaceAnimSequenceConfig TurnInPlaceAnimation_DBNO_Sequence;//[Offset: 0x220, Size: 0x30]
	bool bUseNewTrun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	bool bTickTurnInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1]
	float TurnYawLimit;//[Offset: 0x254, Size: 0x4]
	float TurnInPlaceMinThreshold;//[Offset: 0x258, Size: 0x4]
	float TurnInPlaceMaxThreshold;//[Offset: 0x25c, Size: 0x4]
	float TurnInPlaceMinThreshold;//[Offset: 0x260, Size: 0x4]
	float TurnInPlaceMaxThreshold;//[Offset: 0x264, Size: 0x4]
	float DBNOTurnInPlaceMinThreshold;//[Offset: 0x268, Size: 0x4]
	float DBNOTurnInPlaceMaxThreshold;//[Offset: 0x26c, Size: 0x4]
	float TurnInPlaceInterpSpeed;//[Offset: 0x270, Size: 0x4]
	float LimitTurnInPlaceInterpSpeed;//[Offset: 0x274, Size: 0x4]
	float StopTurnInPlaceThreshold;//[Offset: 0x278, Size: 0x4]
	float MinRootBoneRotationYawThreshold;//[Offset: 0x27c, Size: 0x4]
	float MaxRootBoneRotationYawThreshold;//[Offset: 0x280, Size: 0x4]
	AnimSequence* TurnInAnimSequence;//[Offset: 0x288, Size: 0x8]
	float RotationYawBlendOutSpeed;//[Offset: 0x2ac, Size: 0x4]
	SGCharacterAnimInstance* AnimInstance;//[Offset: 0x2b8, Size: 0x8]
	RepTurnInPlaceAnimMontage RepAnimMontageInfo;//[Offset: 0x2c8, Size: 0x10]
	RepTurnInPlaceAnimMontage LocalAnimMontageInfo;//[Offset: 0x2d8, Size: 0x10]
	void ServerStopTurnInPlaceRootMotion();// 0x3ae4e3fee041
	void ServerPlayTurnInPlaceRootMotion(AnimMontage* InMontage);// 0x3ae3e3fee041
	void PreAvatarDied(Controller* Killer, DamageEventObject* DamageEventObject, out bool bWantToDie);// 0x3ae2e3fee041
	void OnUpdateCharacterStateBeforeMovementEvent(float DeltaSeconds);// 0x3ae1e3fee041
	void OnRep_ReplicatedAnimMontage();// 0x3ae0e3fee041
	void OnAvatarUnPossessed(Controller* NewController);// 0x3adfe3fee041
	void OnAvatarDieInClient(SGCharacter* DiedCharacter);// 0x3adee3fee041
	AnimMontage* GetTurnInPlaceMontage(bool bInTurnLeft);// 0x3adde3fee041
	float GetTurnInPlaceInterpSpeed();// 0x3adce3fee041

--------------------------------
Class: SGTurnInPlaceAnimationConfig
	AnimMontage* TurnLeft90;//[Offset: 0x0, Size: 0x8]
	AnimMontage* TurnRight90;//[Offset: 0x8, Size: 0x8]
	AnimMontage* TurnLeft90_Casual;//[Offset: 0x10, Size: 0x8]
	AnimMontage* TurnRight90_Casual;//[Offset: 0x18, Size: 0x8]
	AnimMontage* TurnLeft90_EmptyHands;//[Offset: 0x20, Size: 0x8]
	AnimMontage* TurnRight90_EmptyHands;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SGTurnInPlaceAnimSequenceConfig
	AnimSequence* TurnLeft90;//[Offset: 0x0, Size: 0x8]
	AnimSequence* TurnRight90;//[Offset: 0x8, Size: 0x8]
	AnimSequence* TurnLeft90_Casual;//[Offset: 0x10, Size: 0x8]
	AnimSequence* TurnRight90_Casual;//[Offset: 0x18, Size: 0x8]
	AnimSequence* TurnLeft90_EmptyHands;//[Offset: 0x20, Size: 0x8]
	AnimSequence* TurnRight90_EmptyHands;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RepTurnInPlaceAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SGCharacterTeamRescueComponent.ActorComponent.Object
	float FindRescueTargetInterval;//[Offset: 0xc4, Size: 0x4]
	float MaxRescueTeammateDist;//[Offset: 0xc8, Size: 0x4]
	float Duration;//[Offset: 0xcc, Size: 0x4]
	float CrouchDelayTime;//[Offset: 0xd0, Size: 0x4]
	float InterpSpeed_Location;//[Offset: 0xd4, Size: 0x4]
	float InterpSpeed_ControlRotation;//[Offset: 0xd8, Size: 0x4]
	FName RescuerRibCageBoneName;//[Offset: 0xdc, Size: 0x8]
	FName RescueeRibCageBoneName;//[Offset: 0xe4, Size: 0x8]
	float RefreshRescueUIDelay;//[Offset: 0xec, Size: 0x4]
	bool bJustLeaveDBNOStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	Character* CachedRescuer;//[Offset: 0x100, Size: 0x8]
	Character* CachedRescuee;//[Offset: 0x108, Size: 0x8]
	SGInventory* CachedWeapon;//[Offset: 0x110, Size: 0x8]
	bool bIsRescuingTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bIsBeRescuingByTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	bool bIsPlayRescueProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1]
	float RescueTimeScale;//[Offset: 0x11c, Size: 0x4]
	SkeletalMeshComponent* InventorySkeletalMeshComponent;//[Offset: 0x120, Size: 0x8]
	void StopRescueTeammate();// 0x3adbe3fee041
	void StartRescueTeammate(Character* TargetTeammate);// 0x3adae3fee041
	bool ShouldShowRescueInteractionUI(Character* TargetTeammate);// 0x3ad9e3fee041
	void OnStartSpectating(SGCharacter* BeSpectatedPawn);// 0x3ad8e3fee041
	void OnSetNewOwner(Actor* NewOwner);// 0x3ad7e3fee041
	void OnRescueAbilityEnded(Character* Rescuer, bool bWasCancelled, float EndRescueRemainingTime);// 0x3ad6e3fee041
	void OnRep_IsRescuingTeammate();// 0x3ad5e3fee041
	void OnRep_IsBeingRescuedByTeammate();// 0x3ad4e3fee041
	void OnExitDBNOStatusMessage(Character* Character);// 0x3ad3e3fee041
	bool IsAllowShowRescueUIWithWeaponState();// 0x3ad2e3fee041
	void FinishRescueTeammate();// 0x3ad1e3fee041
	void EndJustLeaveDBNOStatus();// 0x3ad0e3fee041
	void ClientNotifyFailureMessage(enum FailureReason);// 0x3acfe3fee041

--------------------------------
Class: SGCharacterTakeHitEffectComponent.ActorComponent.Object
	SGTakeHitInfo TakeHitAnimationInfo;//[Offset: 0xc0, Size: 0x20]
	float PreviousTakeHitPlayReactionTime;//[Offset: 0xe0, Size: 0x4]
	float TakeHitPlayReactionTime;//[Offset: 0xe4, Size: 0x4]
	float TakeHitReactionInterval;//[Offset: 0xe8, Size: 0x4]
	bool bUseTakeHitAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	int TakeHitAnimationLength;//[Offset: 0xf0, Size: 0x4]
	int MinRandomFrame;//[Offset: 0xf4, Size: 0x4]
	int MaxRandomFrame;//[Offset: 0xf8, Size: 0x4]
	float HeadTakeHitAnimationPlayRate;//[Offset: 0xfc, Size: 0x4]
	float ChestTakeHitAnimationPlayRate;//[Offset: 0x100, Size: 0x4]
	float LeftArmTakeHitAnimationPlayRate;//[Offset: 0x104, Size: 0x4]
	float RightArmTakeHitAnimationPlayRate;//[Offset: 0x108, Size: 0x4]
	float LeftLegTakeHitAnimationPlayRate;//[Offset: 0x10c, Size: 0x4]
	float RightLegTakeHitAnimationPlayRate;//[Offset: 0x110, Size: 0x4]
	float TakeHitAnimationAlpha;//[Offset: 0x114, Size: 0x4]
	float TakeHitImpulseMagnitudeScaler;//[Offset: 0x118, Size: 0x4]
	float TakeHitPhysicStateDuration;//[Offset: 0x11c, Size: 0x4]
	FName HeadTakeHitSimulateRoot;//[Offset: 0x120, Size: 0x8]
	FName ChestTakeHitSimulateRoot;//[Offset: 0x128, Size: 0x8]
	FName LeftArmTakeHitSimulateRoot;//[Offset: 0x130, Size: 0x8]
	FName RightArmTakeHitSimulateRoot;//[Offset: 0x138, Size: 0x8]
	FName LeftLegTakeHitSimulateRoot;//[Offset: 0x140, Size: 0x8]
	FName RightLegTakeHitSimulateRoot;//[Offset: 0x148, Size: 0x8]
	CurveFloat* TakeHitPhysicAnimationBlendWeight;//[Offset: 0x150, Size: 0x8]
	bool bEnableBlood;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	RepTakeHitInfo RepTakeHitInfo;//[Offset: 0x160, Size: 0xf8]
	void OnTakeDamage(Controller* Causer, float AttemptedDamage, float Damage, Vector Momentum, Actor* HitArmor, out const SGPointDamageEvent DamageEvent, Actor* DamageCauser, DamageEventObject* DamageEventObject, bool bHitPenetrateArmor);// 0x414be3fee041
	void OnRep_TakeHitInfo();// 0x414ae3fee041

--------------------------------
Class: SGTakeHitInfo
	BlendSpaceBase* TakeHitBlendSpace;//[Offset: 0x0, Size: 0x8]
	float TakeHitAnimationPlayRate;//[Offset: 0x8, Size: 0x4]
	bool bBlendShapeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	Vector2D TakeHitDir;//[Offset: 0x10, Size: 0x8]
	float TakeHitAlpha;//[Offset: 0x18, Size: 0x4]
	float StartPos;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: RepTakeHitInfo
	TakeHitInfo TakeHitInfo;//[Offset: 0x0, Size: 0x60]
	HitResult TakeHitResult;//[Offset: 0x60, Size: 0x98]

--------------------------------
Class: SGCharacterTakeCoverComponent.ActorComponent.Object
	bool bAutoTakeCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	float TraceDistance;//[Offset: 0xc4, Size: 0x4]
	float StandCoverDetectHeigh;//[Offset: 0xc8, Size: 0x4]
	float CrouchCoverDetectHeigh;//[Offset: 0xcc, Size: 0x4]
	float CoverDetectWidthHalf;//[Offset: 0xd0, Size: 0x4]
	float TriggerDistance;//[Offset: 0xd4, Size: 0x4]
	float EndTakeCoverControllerAngle;//[Offset: 0xd8, Size: 0x4]
	float StartTakeCoverMaxVelocity;//[Offset: 0xdc, Size: 0x4]
	float CoverResetRotationTriggerAngle;//[Offset: 0xe0, Size: 0x4]
	float TakeCoverCDTime;//[Offset: 0xe4, Size: 0x4]
	float QuitCoverInputTime;//[Offset: 0xe8, Size: 0x4]
	bool bIsTakingCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	byte TraceChannel;//[Offset: 0xed, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 0x1]
	bool bLeanLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef, Size: 0x1]
	bool bWantLeanLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool bLimitCharacterLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	float CurrToCoverDistance;//[Offset: 0xf4, Size: 0x4]
	float QuitCoverAccAngleCos;//[Offset: 0xf8, Size: 0x4]
	bool bAutoCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	bool bAutoSwitchWeaponHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 0x1]
	float CoverEdgeDectectSideOffset;//[Offset: 0x100, Size: 0x4]
	float CoverEdgeDectectHeighOffset;//[Offset: 0x104, Size: 0x4]
	float CoverAimAnimationTime;//[Offset: 0x108, Size: 0x4]
	float CoverFireAnimationTime;//[Offset: 0x10c, Size: 0x4]
	float CoverAimFireBackDistance;//[Offset: 0x110, Size: 0x4]
	float TranslationAnimPlayProgress;//[Offset: 0x114, Size: 0x4]
	float CoverAimTraceRadius;//[Offset: 0x118, Size: 0x4]
	float AimPointToEdgeDistance;//[Offset: 0x11c, Size: 0x4]
	float SideAimMaxYaw;//[Offset: 0x120, Size: 0x4]
	bool bSideAimingAutoSwitchToForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	float StandHeightMax;//[Offset: 0x128, Size: 0x4]
	float CrouchHeightMax;//[Offset: 0x12c, Size: 0x4]
	float CrouchHeightMin;//[Offset: 0x130, Size: 0x4]
	float CoverHeightValue;//[Offset: 0x134, Size: 0x4]
	bool bTakeCoverStandBy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	float MoveForwardDeadZoneAngle;//[Offset: 0x13c, Size: 0x4]
	float ControlFollowCameraAngle;//[Offset: 0x140, Size: 0x4]
	float CoverStandMoveSpeedScale;//[Offset: 0x144, Size: 0x4]
	float CoverCrouchMoveSpeedScale;//[Offset: 0x148, Size: 0x4]
	float CoverSwitchLeanSideInputTime;//[Offset: 0x14c, Size: 0x4]
	float CoverSideToTopTriggerAngle;//[Offset: 0x150, Size: 0x4]
	enum TakeCoverType;//[Offset: 0x154, Size: 0x1]
	enum CoverHeight;//[Offset: 0x155, Size: 0x1]
	enum CharacterCoverAimingState;//[Offset: 0x156, Size: 0x1]
	enum CharacterCoverState;//[Offset: 0x157, Size: 0x1]
	Vector CharacterAimFireTargetLocation;//[Offset: 0x158, Size: 0xc]
	Vector CharacterOriginLocation;//[Offset: 0x164, Size: 0xc]
	SGCharacter* SGCharacter;//[Offset: 0x178, Size: 0x8]
	Actor* CurrCoverActor;//[Offset: 0x1c0, Size: 0x8]
	Actor* PreCoverActor;//[Offset: 0x1c8, Size: 0x8]
	bool UseCameraBaseControl(Vector MovingDirection, out bool OutCanMoveForward, out float OutMoveDirScale);// 0x3ac3e3fee041
	void SetLeanSide(bool bFacingLeft);// 0x3ac2e3fee041
	void OnTakeCoverFlagChanged();// 0x3ac1e3fee041
	void OnSwitchSideMontageBlendOut(AnimMontage* Montage, bool bInterrupted);// 0x3ac0e3fee041
	void ManualToggleTakeCover();// 0x3abfe3fee041
	bool IsLeanLeft();// 0x3abee3fee041
	enum GetTakeCoverType();// 0x3abde3fee041
	enum GetCoverHeight();// 0x3abce3fee041
	enum GetCharacterCoverState();// 0x3abbe3fee041
	enum GetCharacterCoverAimingState();// 0x3abae3fee041
	void CoverStopFire(byte FireMode);// 0x3ab9e3fee041
	void CoverStartFire(byte FireMode);// 0x3ab8e3fee041
	bool CanMoveForward(Vector MovingDirection, out float OutScaleValue);// 0x3ab7e3fee041

--------------------------------
Class: SGCharacterStunGrenadeEffectComponent.ActorComponent.Object
	bool bIsStunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	float StunEndTime;//[Offset: 0xc4, Size: 0x4]
	float MoveSpeedScale;//[Offset: 0xc8, Size: 0x4]
	AkAudioEvent*[] StunGrenadeDeafAudioEvents;//[Offset: 0xd0, Size: 0x10]
	void OnStunStateChanged();// 0x4144e3fee041
	void ClearStunEffect();// 0x4143e3fee041
	bool CheckIsStunning();// 0x4142e3fee041

--------------------------------
Class: SGCharacterRagdollNewComponent.ActorComponent.Object
	float RagdollBlendSpeed;//[Offset: 0xc8, Size: 0x4]
	float CapsuleInterpSpeed;//[Offset: 0xcc, Size: 0x4]
	float PelvisGroundDistance;//[Offset: 0xd0, Size: 0x4]
	FName[] SnapshotBoneNames;//[Offset: 0xd8, Size: 0x10]
	FName[] CriticalBoneNames;//[Offset: 0xe8, Size: 0x10]
	float LinearVelocityThreshold;//[Offset: 0xf8, Size: 0x4]
	float AngularVelocityThreshold;//[Offset: 0xfc, Size: 0x4]
	<FName,FString> ApplyImpulseAdjustMap;//[Offset: 0x100, Size: 0x50]
	SGRagdollImpulseLinkInfo[] ImpulseLinkInfo;//[Offset: 0x150, Size: 0x10]
	float HitImpulseMagnitudeScaler;//[Offset: 0x160, Size: 0x4]
	float DelayEnablePhysicsTime;//[Offset: 0x164, Size: 0x4]
	float DelayBakePhysicsPoseTime;//[Offset: 0x168, Size: 0x4]
	float BlendPhysicsTime;//[Offset: 0x16c, Size: 0x4]
	bool bEnableRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	SGRagdollBakedBoneInfo RagdollBakedBoneInfo;//[Offset: 0x178, Size: 0x18]
	void StopRagdoll();// 0x3e5ae3fee041
	void StartRagdoll();// 0x3e59e3fee041
	void OnRep_RagdollBakedBoneInfo();// 0x3e58e3fee041
	PoseSnapshot GetRagdollPose();// 0x3e57e3fee041
	bool GetIsRagdollBaked();// 0x3e56e3fee041
	bool GetIsRagdoll();// 0x3e55e3fee041
	void BakeRagdoll();// 0x3e54e3fee041
	void BakeBoneRotationTranslations();// 0x3e53e3fee041

--------------------------------
Class: SGRagdollImpulseLinkInfo
	FName Bone1;//[Offset: 0x0, Size: 0x8]
	FName Bone2;//[Offset: 0x8, Size: 0x8]
	float LinkRatio;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SGRagdollBakedBoneInfo
	enum ServerRagdollStage;//[Offset: 0x0, Size: 0x1]
	float ServerRagdollStartTime;//[Offset: 0x4, Size: 0x4]
	SGPoseSnapshotRotationTranslation[] BakedBoneRotationTranslations;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SGPoseSnapshotRotationTranslation
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector_NetQuantize Translation;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: SGCharacterPreviewComponent.ActorComponent.Object
	bool bForceTickPoseAndRefreshBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	AnimSequence* DefaultDTCustomAnimSeq_Male;//[Offset: 0xc8, Size: 0x8]
	AnimSequence* DefaultDTCustomAnimSeq_Female;//[Offset: 0xd0, Size: 0x8]
	AnimSequence* DefaultDTFacialAnimSeq;//[Offset: 0xd8, Size: 0x8]
	AnimSequence* DefaultDTBreathAnimSeq;//[Offset: 0xe0, Size: 0x8]
	float StartTimeOffset;//[Offset: 0xe8, Size: 0x4]
	float BaseAccumulateTime;//[Offset: 0xec, Size: 0x4]
	delegate AllMeshLoaded;//[Offset: 0xf8, Size: 0x10]
	delegate UpdateAvatarsFinish;//[Offset: 0x108, Size: 0x10]
	CameraComponent* PreviewCameraComponent;//[Offset: 0x118, Size: 0x8]
	SceneCaptureComponent2D* SceneCaptureNode;//[Offset: 0x120, Size: 0x8]
	void SetCurCaptureScene(FString sceneName);// 0x3e4ae3fee041
	void ResetScale();// 0x3e49e3fee041
	void ResetRotation();// 0x3e48e3fee041
	void RefreshCapture();// 0x3e47e3fee041
	CameraComponent* GetPreviewCamera();// 0x3e46e3fee041
	bool GetIsCasual();// 0x3e45e3fee041
	void AddRotation(Rotator Rotation);// 0x3e44e3fee041
	void AddLocalScale();// 0x3e43e3fee041
	void AddCaptureMesh(MeshComponent* MeshComp);// 0x3e42e3fee041

--------------------------------
Class: SGUAMCharacterPoseCacheComponent.ActorComponent.Object
	SGCharacter* OwnerCharacter;//[Offset: 0xc8, Size: 0x8]
	<enum,CachedPose> CachedPoseList;//[Offset: 0xe0, Size: 0x50]
	void PoseChangedTriggerSoundIndicator(enum InNewPose);// 0x3a23e3fee041
	void OnServerTickPoseTimer();// 0x3a22e3fee041
	void OnCharacterPoseChanged(enum InNewPose);// 0x3a21e3fee041
	void OnCharacterLeanTypeChanged(enum NewLeanType);// 0x3a20e3fee041
	void OnCharacterLeanRatioChanged();// 0x3a1fe3fee041
	enum GetPoseAIType();// 0x3a1ee3fee041

--------------------------------
Class: CachedPose

--------------------------------
Class: SGCharacterMovementVaultComponent.ActorComponent.Object
	SGVaultAnimationConfig[] VaultAnimationList;//[Offset: 0xc8, Size: 0x10]
	int[] VaultObstacleHeights;//[Offset: 0xd8, Size: 0x10]
	float VaultObstacleMaxThick;//[Offset: 0xe8, Size: 0x4]
	float ThickTraceExtraTime;//[Offset: 0xec, Size: 0x4]
	float AngleTowardsObstacleTolerance;//[Offset: 0xf0, Size: 0x4]
	float ForwardTraceDistance;//[Offset: 0xf4, Size: 0x4]
	float ForwardTraceExtraTime;//[Offset: 0xf8, Size: 0x4]
	float CanClimbObstacleFloorMaxAngle;//[Offset: 0xfc, Size: 0x4]
	float ApexPointAdjustmentMaxErrorTolerance;//[Offset: 0x100, Size: 0x4]
	float EarlyOutVaultFallHeight;//[Offset: 0x104, Size: 0x4]
	float MinVelocityZWhenExitVault;//[Offset: 0x108, Size: 0x4]
	byte ObjectCanVaultCollisionChannel;//[Offset: 0x10c, Size: 0x1]
	byte ObjectBlockVaultCollisionChannel;//[Offset: 0x10d, Size: 0x1]
	bool bVerifyPathNode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1]
	float PathNodeErrorTolerance;//[Offset: 0x110, Size: 0x4]
	float MinVelocityZToTriggerVault;//[Offset: 0x114, Size: 0x4]
	float MaxVaultDistance2D;//[Offset: 0x118, Size: 0x4]
	VaultRepInfo RepVaultInfo;//[Offset: 0x120, Size: 0x30]
	VaultResult VaultResult;//[Offset: 0x150, Size: 0xa0]
	enum VaultPhase;//[Offset: 0x1f0, Size: 0x1]
	Actor*[] ActorsToIgnore;//[Offset: 0x208, Size: 0x10]
	bool TryVault(bool bClientSimulated);// 0x3e32e3fee041
	void ServerStartVaulting(VaultResult InVaultResult);// 0x3e31e3fee041
	void ServerEndVaulting();// 0x3e30e3fee041
	void PhysCustom(float DeltaTime, int Iterations);// 0x3e2fe3fee041
	void OnRep_VaultInfo();// 0x3e2ee3fee041
	void OnMovementModeChanged(byte PreviousMovementMode, byte PreviousCustomMode);// 0x3e2de3fee041
	void Landed(out const HitResult Hit);// 0x3e2ce3fee041
	bool KeepTryVault(bool bClientSimulated);// 0x3e2be3fee041
	void ClientEndVaulting();// 0x3e2ae3fee041
	bool CanUpdatedComponent(out const Vector Delta, out const Quat NewRotation);// 0x3e29e3fee041

--------------------------------
Class: SGVaultAnimationConfig
	enum VaultChoice;//[Offset: 0x0, Size: 0x1]
	enum ObstacleHeightLevel;//[Offset: 0x1, Size: 0x1]
	float PassabilityMinRadius;//[Offset: 0x4, Size: 0x4]
	float PassabilityMinHalfHeight;//[Offset: 0x8, Size: 0x4]
	float PassabilityHeightOffset;//[Offset: 0xc, Size: 0x4]
	float ApexEdgeDistance;//[Offset: 0x10, Size: 0x4]
	float HoriMoveDistancePreJump;//[Offset: 0x14, Size: 0x4]
	float HoriMoveDistancePreApex;//[Offset: 0x18, Size: 0x4]
	float HoriMoveDistancePostApex;//[Offset: 0x1c, Size: 0x4]
	float HoriMoveDistancePostFall;//[Offset: 0x20, Size: 0x4]
	float VerticalMoveDistanceApex;//[Offset: 0x24, Size: 0x4]
	float PlayRate;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: VaultRepInfo
	enum VaultPhase;//[Offset: 0x0, Size: 0x1]
	enum VaultChoice;//[Offset: 0x1, Size: 0x1]
	enum ObstacleHeightLevel;//[Offset: 0x2, Size: 0x1]
	Vector CharacterForwardDiretion;//[Offset: 0x4, Size: 0xc]
	Vector CharacterTowardsObstacleDiretion;//[Offset: 0x10, Size: 0xc]
	SGPredictPathNode[] PathNodes;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SGPredictPathNode
	Vector PredictLocation;//[Offset: 0x0, Size: 0xc]
	Rotator PredictRotation;//[Offset: 0xc, Size: 0xc]
	FName Name;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: VaultResult
	enum VaultFailReason;//[Offset: 0x0, Size: 0x1]
	Vector CharacterWantsToVaultLocation;//[Offset: 0x4, Size: 0xc]
	Vector CharacterLocation;//[Offset: 0x10, Size: 0xc]
	Vector CharacterFloorLocation;//[Offset: 0x1c, Size: 0xc]
	Vector CharacterForwardDiretion;//[Offset: 0x28, Size: 0xc]
	Vector CharacterTowardsObstacleDiretion;//[Offset: 0x34, Size: 0xc]
	float CharacterVelocity_Horizontal;//[Offset: 0x40, Size: 0x4]
	float ForwardTraceDistance;//[Offset: 0x44, Size: 0x4]
	enum VaultChoice;//[Offset: 0x48, Size: 0x1]
	float FallHeight;//[Offset: 0x4c, Size: 0x4]
	float ObstacleHeight;//[Offset: 0x50, Size: 0x4]
	enum ObstacleHeightLevel;//[Offset: 0x54, Size: 0x1]
	Vector VaultApexPoint;//[Offset: 0x58, Size: 0xc]
	Vector ObstacleImpactPoint;//[Offset: 0x64, Size: 0xc]
	Vector ObstacleImpactNormal;//[Offset: 0x70, Size: 0xc]
	byte MovementModeAfterVault;//[Offset: 0x7c, Size: 0x1]
	SGPredictPathNode[] PathNodes;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: SGCharacterMovementLadderClimbComponent.ActorComponent.Object
	SGPredictPathNode[] MotionWarpingPathNodes;//[Offset: 0xc0, Size: 0x10]
	float UnEquipWeaponRateScale;//[Offset: 0xd0, Size: 0x4]
	SGCharacter* CharacterOwner;//[Offset: 0xd8, Size: 0x8]
	LadderClimbAnimInfo NetworkClimbData;//[Offset: 0xe0, Size: 0x38]
	float MaxHandClampDistanceScaler;//[Offset: 0x118, Size: 0x4]
	float MaxDistanceBetweenUpperArmAndHand;//[Offset: 0x11c, Size: 0x4]
	ActorComponent*[] CurrentLadderMarkers;//[Offset: 0x120, Size: 0x10]
	ActorComponent* NearestMarker_Hand_L_LastTime;//[Offset: 0x138, Size: 0x8]
	ActorComponent* NearestMarker_Hand_R_LastTime;//[Offset: 0x140, Size: 0x8]
	Vector ModifiedLocation_Hand_L_LastTime;//[Offset: 0x148, Size: 0xc]
	Vector ModifiedLocation_Hand_R_LastTime;//[Offset: 0x154, Size: 0xc]
	float ModifiedLocationInterpSpeed;//[Offset: 0x160, Size: 0x4]
	<enum,AnimMontage*> LadderClimbAnims;//[Offset: 0x168, Size: 0x50]
	float LadderMoveAnimPlayRate;//[Offset: 0x1b8, Size: 0x4]
	float IdleItemLOffsetZ;//[Offset: 0x1bc, Size: 0x4]
	float IdleItemROffsetZ;//[Offset: 0x1c0, Size: 0x4]
	float CheckExitLadderTriggerBoxDisSquared;//[Offset: 0x1c4, Size: 0x4]
	enum CurrentClimbState;//[Offset: 0x1c8, Size: 0x1]
	bool bIsLadderClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1]
	LadderInfo CurrentLadderInfo;//[Offset: 0x1d0, Size: 0x10]
	int CurrentBarIndex;//[Offset: 0x1e0, Size: 0x4]
	LadderInfo[] LadderArray;//[Offset: 0x1e8, Size: 0x10]
	SGInventory* CachedWeapon;//[Offset: 0x1f8, Size: 0x8]
	float FixPosDisSquared;//[Offset: 0x200, Size: 0x4]
	bool UpperEnterLadder();// 0x3e17e3fee041
	bool UpdateStatesImpl(enum TargetClimbState);// 0x3e16e3fee041
	bool UpdateStatesFromInput(float AxisY);// 0x3e15e3fee041
	bool UpdateStates(enum TargetClimbState);// 0x3e14e3fee041
	void UpdateHandLockLocation(float DeltaSeconds, float CurveValue_HandLock_L, float CurveValue_HandLock_R, out const Vector OriginalLocation_Hand_L, out const Vector OriginalLocation_Hand_R, out Vector ModifiedLocation_Hand_L, out Vector ModifiedLocation_Hand_R);// 0x3e13e3fee041
	void SetOnAnimEndTransform();// 0x3e12e3fee041
	void SetLadderMoveAnimPlayRate(float InRate);// 0x3e11e3fee041
	void SetCurrentLadder(out LadderInfo InLadderInfo);// 0x3e10e3fee041
	void ServerUpdateStates(LadderClimbAnimInfo AnimInfo);// 0x3e0fe3fee041
	void ResetClimbLadderState();// 0x3e0ee3fee041
	void RemoveSyncPoint();// 0x3e0de3fee041
	bool OrientationCanEnterLadder();// 0x3e0ce3fee041
	void OnRep_CurrentLadderInfoChanged();// 0x3e0be3fee041
	void OnRep_CurrentClimbStateChanged();// 0x3e0ae3fee041
	void OnLanded(out const HitResult Hit);// 0x3e09e3fee041
	void OnEndAbility(bool bWasCancelled);// 0x3e08e3fee041
	void OnComponentEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3e07e3fee041
	void OnComponentBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3e06e3fee041
	void OnActivateAbility();// 0x3e05e3fee041
	bool IsEnteringLadder();// 0x3e04e3fee041
	float GetUnEquipWeaponRateScale();// 0x3e03e3fee041
	Vector GetLadderTopSyncPoint();// 0x3e02e3fee041
	Vector GetLadderTopExitPos();// 0x3e01e3fee041
	Rotator GetLadderTopEnterRot();// 0x3e00e3fee041
	Vector GetLadderTopEnterPos();// 0x3dffe3fee041
	Vector GetLadderTopEnterEndPos();// 0x3dfee3fee041
	float GetLadderMoveAnimPlayRate();// 0x3dfde3fee041
	Vector GetLadderJumpEnterPos();// 0x3dfce3fee041
	Rotator GetLadderBottomEnterRot();// 0x3dfbe3fee041
	SGGameplayAbility_ClimbLadder* GetGameplayAbility();// 0x3dfae3fee041
	enum GetEnterMethod();// 0x3df9e3fee041
	Vector GetCharacterPosByCurrentIndex();// 0x3df8e3fee041
	void FixOnAnimCompletedPos(enum ExitType);// 0x3df7e3fee041
	void DrawDebugServerTransform(Vector InLoc, Rotator InRot);// 0x3df6e3fee041
	void ClearCurrentLadder();// 0x3df5e3fee041
	bool CanClimbLadder();// 0x3df4e3fee041
	void AddOrUpdateSyncPoint(out SGPredictPathNode[] InPathNodes);// 0x3df3e3fee041

--------------------------------
Class: LadderInfo
	SGLadderBase* Ladder;//[Offset: 0x0, Size: 0x8]
	PrimitiveComponent* LadderArea;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SGLadderBase.Actor.Object
	Vector TopEnterPos;//[Offset: 0x2e0, Size: 0xc]
	Vector TopSyncPoint;//[Offset: 0x2ec, Size: 0xc]
	Vector TopEnterEndPos;//[Offset: 0x2f8, Size: 0xc]
	Vector TopExitPos;//[Offset: 0x304, Size: 0xc]
	Vector BottomEnterPos;//[Offset: 0x310, Size: 0xc]
	ActorComponent*[] LadderMarkers;//[Offset: 0x320, Size: 0x10]
	PrimitiveComponent* TopBoxTrigger;//[Offset: 0x330, Size: 0x8]
	PrimitiveComponent* BottomBoxTrigger;//[Offset: 0x338, Size: 0x8]
	<SGCharacter*,enum> CharacterEnterLadderTypeMap;//[Offset: 0x348, Size: 0x50]
	SGCharacter* Character;//[Offset: 0x398, Size: 0x8]
	Vector LadderTopEnterRelativePos;//[Offset: 0x3a0, Size: 0xc]
	Rotator TopEnterRot;//[Offset: 0x3ac, Size: 0xc]
	Rotator BottomEnterRot;//[Offset: 0x3b8, Size: 0xc]
	float Width;//[Offset: 0x3c4, Size: 0x4]
	float LengthEachLevel;//[Offset: 0x3c8, Size: 0x4]
	void SetClimbingCharacter(SGCharacter* InCharacter);// 0x492be3fee041
	bool IsCharacterClimbing();// 0x492ae3fee041
	Vector GetTopSyncPoint();// 0x4929e3fee041
	Vector GetTopExitPos();// 0x4928e3fee041
	Rotator GetTopEnterRot();// 0x4927e3fee041
	Vector GetTopEnterPos();// 0x4926e3fee041
	Vector GetTopEnterEndPos();// 0x4925e3fee041
	ActorComponent*[] GetLadderMarkers();// 0x4924e3fee041
	float GetLadderMarkerLocationZ(int InIndex);// 0x4923e3fee041
	Rotator GetBottomEnterRot();// 0x4922e3fee041
	Vector GetBottomEnterPos();// 0x4921e3fee041
	void ClearClimbingCharacter();// 0x4920e3fee041

--------------------------------
Class: LadderClimbAnimInfo
	enum CurrentClimbState;//[Offset: 0x0, Size: 0x1]
	AnimMontage* CurrentAnimMontage;//[Offset: 0x8, Size: 0x8]
	SGLadderBase* CurrentLadder;//[Offset: 0x10, Size: 0x8]
	PrimitiveComponent* CurrentLadderArea;//[Offset: 0x18, Size: 0x8]
	int CurrentBarIndex;//[Offset: 0x20, Size: 0x4]
	ActorComponent*[] CurrentLadderMarkers;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SGGameplayAbility_ClimbLadder.SGGameplayAbility.GameplayAbility.Object
	enum TargetClimbState;//[Offset: 0x471, Size: 0x1]
	void PlayTargetAnim(enum InTargetClimbState);// 0x430ce3fee041
	void OnMoveAnimCompleted();// 0x430be3fee041
	void OnExitAnimCompleted();// 0x430ae3fee041
	void OnEnterAnimCompleted();// 0x4309e3fee041
	void K2_PlayMoveAnim();// 0x4308e3fee041
	void K2_PlayIdleAnim();// 0x4307e3fee041
	void K2_PlayExitAnim();// 0x4306e3fee041
	void K2_PlayEnterAnim();// 0x4305e3fee041
	void K2_JumpExit();// 0x4304e3fee041

--------------------------------
Class: SGGameplayAbility.GameplayAbility.Object
	GameplayTag AsyncLoadCompleteTag;//[Offset: 0x3b4, Size: 0x8]
	bool bActivatableWhenDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 0x1]
	bool bCancelByDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 0x1]
	bool bCancelByUnPossessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be, Size: 0x1]
	bool bCancelByPoseChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bf, Size: 0x1]
	bool bCancelByMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	bool bCancelByCurrentWeaponRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 0x1]
	bool bActivateNextTickWhenRequiredWeaponSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c2, Size: 0x1]
	GameplayTagContainer ActivationOwnedTagsForRep;//[Offset: 0x3c8, Size: 0x20]
	GameplayTagContainer InterruptByTags;//[Offset: 0x3e8, Size: 0x20]
	SGWeapon* CachedCurrentWeapon;//[Offset: 0x458, Size: 0x8]
	Actor* EventTargetActor;//[Offset: 0x468, Size: 0x8]
	void WeaponMontageJumpToSection(SGInventory* Weapon, FName CharacterSection, FName WeaponSection);// 0x34ece3fee041
	void WaitRequiredWeaponSync();// 0x34ebe3fee041
	void WaitForRequiredAssetPrerequisites();// 0x34eae3fee041
	void TryActivateAbilityWithRequiredWeaponForNextFrame();// 0x34e9e3fee041
	void PreAvatarDied(Controller* Killer, DamageEventObject* DamageEventObject, out bool bWantToDie);// 0x34e8e3fee041
	void OnWeaponRemoved(Character* Character, SGInventory* RemovedWeapon);// 0x34e7e3fee041
	void OnUpdateCharacterStateBeforeMovementEvent(float DeltaSeconds);// 0x34e6e3fee041
	void OnPoseChanged(enum NewPoseType);// 0x34e5e3fee041
	void OnGameModePlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x34e4e3fee041
	void OnAvatarUnPossessed(Controller* NewController);// 0x34e3e3fee041
	void OnAvatarDieInClient(SGCharacter* DiedCharacter);// 0x34e2e3fee041
	void K2_PreNativeActivateAbility();// 0x34e1e3fee041
	void K2_PreActivateAbility();// 0x34e0e3fee041
	void ActivateAbilityWithRequiredWeapon();// 0x34dfe3fee041
	void ActivateAbilityWithRequiredPrerequisites();// 0x34dee3fee041

--------------------------------
Class: SGCharacterMovementAbilityComponent.ActorComponent.Object
	class SGCharacterMovementAttributeSet* AttributeSetClass;//[Offset: 0xc0, Size: 0x8]
	float MinSpeedScaleByBuff;//[Offset: 0xc8, Size: 0x4]
	float MaxSpeedScaleByBuff;//[Offset: 0xcc, Size: 0x4]
	class GameplayAbility* MovementScaleGameAbilityByLandscapeClass;//[Offset: 0xd0, Size: 0x8]
	float PunishMoveTime_NoPenetrate;//[Offset: 0xdc, Size: 0x4]
	float PunishMoveScale_NoPenetrate;//[Offset: 0xe0, Size: 0x4]
	float PunishMoveTime_Penetrate;//[Offset: 0xe4, Size: 0x4]
	float PunishMoveScale_Penetrate;//[Offset: 0xe8, Size: 0x4]
	float Temp_PunishMoveTime_Penetrate;//[Offset: 0xec, Size: 0x4]
	float Temp_PunishMoveTime_NoPenetrate;//[Offset: 0xf0, Size: 0x4]
	void OnTakeDamage(Controller* Causer, float AttemptedDamage, float Damage, Vector Momentum, Actor* HitArmor, out const SGPointDamageEvent DamageEvent, Actor* DamageCauser, DamageEventObject* DamageEventObject, bool bHitPenetrateArmor);// 0x3de6e3fee041
	bool IsWeaponStateForbidden();// 0x3de5e3fee041
	bool IsVaultForbidden();// 0x3de4e3fee041
	bool IsTakeCoverForbidden();// 0x3de3e3fee041
	bool IsSprintForbidden();// 0x3de2e3fee041
	bool IsProneForbidden();// 0x3de1e3fee041
	bool IsJumpForbidden();// 0x3de0e3fee041
	float GetSearchScale();// 0x3ddfe3fee041
	float GetMovementSpeedScaleWhenLegOutOfEndurance();// 0x3ddee3fee041
	float GetMovementSpeedScale();// 0x3ddde3fee041
	float GetMovementForbiddenScale();// 0x3ddce3fee041
	float GetJumpZVelocityScale();// 0x3ddbe3fee041
	float CalTakeDamageMovementScaleInTick();// 0x3ddae3fee041

--------------------------------
Class: SGCharacterMovementAttributeSet.AttributeSet.Object
	float MovementSpeedScaleAdder;//[Offset: 0x34, Size: 0x4]
	float MovementForbiddenMultiplier;//[Offset: 0x38, Size: 0x4]
	float MovementSpeedScaleWhenLegOutofEnduranceAdder;//[Offset: 0x3c, Size: 0x4]
	float JumpZVelocityScaleMultiplier;//[Offset: 0x40, Size: 0x4]
	float ForbiddenJumpMultiplier;//[Offset: 0x44, Size: 0x4]
	float ForbiddenVaultMultiplier;//[Offset: 0x48, Size: 0x4]
	float ForbiddenSprintMultiplier;//[Offset: 0x4c, Size: 0x4]
	float ForbiddenTakeCoverMultiplier;//[Offset: 0x50, Size: 0x4]
	float ForbiddenProneMultiplier;//[Offset: 0x54, Size: 0x4]
	float ForbiddenWeaponStateMultiplier;//[Offset: 0x58, Size: 0x4]
	float InstantMovementSpeedScale;//[Offset: 0x5c, Size: 0x4]
	float InstantJumpZVelocityScale;//[Offset: 0x60, Size: 0x4]
	float SearchScaleMultiplier;//[Offset: 0x64, Size: 0x4]
	float MovementSpeedScaleWhenBothLegsOutofEndurance;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: SGMotionWarpingComponent.MotionWarpingComponent.ActorComponent.Object
	MotionWarpingNetSyncPoint[] NetSyncPoints;//[Offset: 0x190, Size: 0x10]
	MotionWarpingNetSyncPoint TempSyncPoint;//[Offset: 0x1a0, Size: 0x30]
	void ResetNetSyncPoint();// 0x4a14e3fee041
	int RemoveNetSyncPoint(MotionWarpingNetSyncPoint NetSyncPoint);// 0x4a13e3fee041
	void OnRep_NetSyncPointsChanged();// 0x4a12e3fee041
	MotionWarpingNetSyncPoint FindNetSyncPoint(FName Name);// 0x4a11e3fee041
	void AddOrUpdateNetSyncPoint(out MotionWarpingNetSyncPoint NetSyncPoint);// 0x4a10e3fee041

--------------------------------
Class: MotionWarpingComponent.ActorComponent.Object
	bool bSearchForWindowsInAnimsWithinMontages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	delegate OnPreUpdate;//[Offset: 0xc0, Size: 0x10]
	Character* CharacterOwner;//[Offset: 0xd0, Size: 0x8]
	RootMotionModifier*[] Modifiers;//[Offset: 0xd8, Size: 0x10]
	<FName,MotionWarpingSyncPoint> SyncPoints;//[Offset: 0xe8, Size: 0x50]
	<FName,float> SyncTargetToTime;//[Offset: 0x138, Size: 0x50]
	int RemoveSyncPoint(FName Name);// 0x4a0fe3fee041
	void AddOrUpdateSyncPoint(FName Name, out const MotionWarpingSyncPoint SyncPoint);// 0x4a0ee3fee041

--------------------------------
Class: MotionWarpingNetSyncPoint
	FName Name;//[Offset: 0x0, Size: 0x8]
	MotionWarpingSyncPoint SyncPoint;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: MotionWarpingSyncPoint
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Quat Rotation;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: RootMotionModifier.Object
	AnimSequenceBase* Animation;//[Offset: 0x28, Size: 0x8]
	float StartTime;//[Offset: 0x30, Size: 0x4]
	float EndTime;//[Offset: 0x34, Size: 0x4]
	float PreviousPosition;//[Offset: 0x38, Size: 0x4]
	float CurrentPosition;//[Offset: 0x3c, Size: 0x4]
	float Weight;//[Offset: 0x40, Size: 0x4]
	bool bInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	delegate OnActivateDelegate;//[Offset: 0x48, Size: 0x10]
	delegate OnUpdateDelegate;//[Offset: 0x58, Size: 0x10]
	delegate OnDeactivateDelegate;//[Offset: 0x68, Size: 0x10]
	enum State;//[Offset: 0x78, Size: 0x1]

--------------------------------
Class: SGCharacterLeanWallComponent.ActorComponent.Object
	float CurrLeanAimRatio;//[Offset: 0xc8, Size: 0x4]
	float CurrLeanAimYOffset;//[Offset: 0xcc, Size: 0x4]
	float CurrLeanAimAngleOffset;//[Offset: 0xd0, Size: 0x4]
	FName HeadBoneName;//[Offset: 0xf0, Size: 0x8]
	float BlockByWall_SideDistance;//[Offset: 0xf8, Size: 0x4]
	float BlockByWall_ForwardDistance;//[Offset: 0xfc, Size: 0x4]
	float BoxTraceHeight;//[Offset: 0x100, Size: 0x4]
	float TraceCenterOffsetZ;//[Offset: 0x104, Size: 0x4]
	float WeaponLeanAimYOffset;//[Offset: 0x108, Size: 0x4]
	float WeaponLeanAimAngle;//[Offset: 0x10c, Size: 0x4]
	float WeaponLeanChangeSpeed;//[Offset: 0x110, Size: 0x4]
	float WeaponLeanAimSpeedDecPerc;//[Offset: 0x114, Size: 0x4]
	float StandLeanRollOffset;//[Offset: 0x118, Size: 0x4]
	float ProneLeanRollOffset;//[Offset: 0x11c, Size: 0x4]
	float LeanHorizontalOffsetL;//[Offset: 0x120, Size: 0x4]
	float LeanHorizontalOffsetR;//[Offset: 0x124, Size: 0x4]
	float LeanDuration;//[Offset: 0x128, Size: 0x4]
	CurveFloat* Curve_LeanSpeedErgonomicsScale;//[Offset: 0x130, Size: 0x8]
	float LeanRollInterpSpeed;//[Offset: 0x138, Size: 0x4]
	bool bRotateWhenLeanBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]
	float BlockWallLeanOffset;//[Offset: 0x140, Size: 0x4]
	float LeanAdditiveInterpSpeed;//[Offset: 0x144, Size: 0x4]
	float StandBoxTraceOffsetZ;//[Offset: 0x148, Size: 0x4]
	float CrouchBoxTraceOffsetZ;//[Offset: 0x14c, Size: 0x4]
	bool bBlockByWall_Left;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	bool bBlockByWall_Right;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]
	enum WeaponLeanAimType;//[Offset: 0x152, Size: 0x1]
	float LeanRate;//[Offset: 0x17c, Size: 0x4]
	void TickWeaponLeanAnimType(float DeltaTime);// 0x3daae3fee041
	void TickLeanOffset(float DeltaTime);// 0x3da9e3fee041
	void TickIfBlockByWall(float DeltaTime);// 0x3da8e3fee041
	void SetWeaponLeanAimType(enum InLeanAimType);// 0x3da7e3fee041
	void SetLeanRate(float InRate);// 0x3da6e3fee041
	void SetBlockByWall(bool bInBlockByWall_Left, bool bInBlockByWall_Right);// 0x3da5e3fee041
	void ServerSetDestLeanAimType(enum InLeanAimType);// 0x3da4e3fee041
	void ServerSetBlockByWall(bool bInBlockByWall_Left, bool bInBlockByWall_Right);// 0x3da3e3fee041
	void OnStopSpectatedByController(PlayerController* PC);// 0x3da2e3fee041
	void OnStartSpectatedByController(PlayerController* PC);// 0x3da1e3fee041
	void OnRep_WeaponLeanAimTypeChanged();// 0x3da0e3fee041
	void OnPoseChanged(enum InNewPose);// 0x3d9fe3fee041
	void OnOwnerOrRoleChanged(Actor* NewOwner, byte NewRole);// 0x3d9ee3fee041
	void MulticastSetDestLeanAimType(enum InLeanAimType);// 0x3d9de3fee041
	enum GetWeaponLeanAimTypeConsiderWallBlock();// 0x3d9ce3fee041
	enum GetWeaponLeanAimType();// 0x3d9be3fee041
	void EnableLeanDrawDebugTrace(byte InDrawType);// 0x3d9ae3fee041
	void DebugEnableRotateWhenLeanBlock(int RotateWhenLeanBlock);// 0x3d99e3fee041
	void CalculateLeanRatio(float DeltaTime, enum WeaponLeanAimType);// 0x3d98e3fee041

--------------------------------
Class: SGCharacterInteractionComponent.ActorComponent.Object
	KeyDoorIKInfo KeyDoorIKInfo;//[Offset: 0xc8, Size: 0x50]
	float InterpSpeed_Location;//[Offset: 0x118, Size: 0x4]
	float InterpSpeed_ControlRotation;//[Offset: 0x11c, Size: 0x4]
	float MaxMoveTime;//[Offset: 0x120, Size: 0x4]
	AnimMontage* CachedMontageToPlay;//[Offset: 0x128, Size: 0x8]
	AnimMontage* CachedAdditionalMontageToPlay;//[Offset: 0x130, Size: 0x8]
	Actor* CachedInteractActor;//[Offset: 0x138, Size: 0x8]
	SGInventory* CachedKeyItem;//[Offset: 0x140, Size: 0x8]
	enum CachedDoorCategory;//[Offset: 0x148, Size: 0x1]
	FName KeyAttachSocket_1P;//[Offset: 0x14c, Size: 0x8]
	FName KeyAttachSocket_3P;//[Offset: 0x154, Size: 0x8]
	float KeyAttachDelayTime;//[Offset: 0x15c, Size: 0x4]
	float KeyDetachDelayTime;//[Offset: 0x160, Size: 0x4]
	FName LShoulderBoneName;//[Offset: 0x164, Size: 0x8]
	Vector LockWristOffset;//[Offset: 0x16c, Size: 0xc]
	float UnCrouchDelayTime;//[Offset: 0x178, Size: 0x4]
	float UnProneDelayTime;//[Offset: 0x17c, Size: 0x4]
	float MoveToDoorSpeed;//[Offset: 0x180, Size: 0x4]
	SkeletalMeshComponent* KeyMeshComponent;//[Offset: 0x188, Size: 0x8]
	SkeletalMesh* KeySkeletonMesh;//[Offset: 0x190, Size: 0x8]
	void ServerSetInteractActor(Actor* InActor);// 0x3d59e3fee041
	void ServerSetCachedDoorAction(enum DoorAction);// 0x3d58e3fee041
	void OnRep_KeyDoorIKInfo();// 0x3d57e3fee041
	void OnKeyMeshTemplateLoadCompleted(SoftObjectPath Path);// 0x3d56e3fee041
	void MulticastSetInteractActor(Actor* InActor);// 0x3d55e3fee041
	void MulticastSetCachedDoorAction(enum DoorAction);// 0x3d54e3fee041
	void ClientOpenBoxInventoryOrCorpse(Actor* Actor);// 0x3d53e3fee041

--------------------------------
Class: KeyDoorIKInfo
	bool EnableIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector LockLocation;//[Offset: 0x4, Size: 0xc]
	Vector ShoulderLocation;//[Offset: 0x10, Size: 0xc]
	Rotator ShoulderRotator;//[Offset: 0x1c, Size: 0xc]
	SkeletalMesh* KeySkeletalMeshTemplate;//[Offset: 0x28, Size: 0x28]

--------------------------------
Class: SGCharacterInputProcessComponent.SGActorInputProcessComponent.ActorComponent.Object
	SGInventory* CachedInventory;//[Offset: 0xc8, Size: 0x8]
	Actor* CachedLootActor;//[Offset: 0xd0, Size: 0x8]
	SGInventory* CachedPickupInventory;//[Offset: 0xd8, Size: 0x8]
	Character* CachedTeammate;//[Offset: 0xe0, Size: 0x8]
	float LongShortPressInterval;//[Offset: 0xf4, Size: 0x4]
	Vector2D CachedMoveInputXY;//[Offset: 0x104, Size: 0x8]
	void UseActor(Actor* ActorToUse, FName UsageType, enum UseInBodyType, int Mode);// 0x3d4de3fee041
	void UnHoldBreath();// 0x3d4ce3fee041
	void ThrowWeaponGroup(int Index);// 0x3d4be3fee041
	void ThrowWeapon5();// 0x3d4ae3fee041
	void ThrowWeapon4();// 0x3d49e3fee041
	void ThrowWeapon3();// 0x3d48e3fee041
	void ThrowWeapon2();// 0x3d47e3fee041
	void ThrowWeapon1();// 0x3d46e3fee041
	void ThrowWeapon(SGInventory* TargetInv);// 0x3d45e3fee041
	void ThrowItem(SGInventory* TargetInv, bool bIsPlayerRpc);// 0x3d44e3fee041
	void SwitchToWeaponGroup(int Index);// 0x3d43e3fee041
	void SwitchToWeaponAfterGAEnds();// 0x3d42e3fee041
	void SwitchFirstAndSecondWeapon(bool bForceSwitch);// 0x3d41e3fee041
	void StopRescueTeammate();// 0x3d40e3fee041
	void ServerThrowWeaponGroup(int Index);// 0x3d3fe3fee041
	void ServerThrowWeapon(SGInventory* TargetInv);// 0x3d3ee3fee041
	void ServerThrowItem(SGInventory* TargetInv);// 0x3d3de3fee041
	void ServerSwitchSeat(Character* Character, int SeatIndex);// 0x3d3ce3fee041
	void ServerSwitchFirstAndSecondWeapon();// 0x3d3be3fee041
	void ServerStopRescueTeammate();// 0x3d3ae3fee041
	void ServerStandToProne(SGCharacter* SGCharacter);// 0x3d39e3fee041
	void ServerSetSilentWalkState(bool bSilentWalk);// 0x3d38e3fee041
	void ServerRescueTeammate(Character* TargetTeammate);// 0x3d37e3fee041
	void ServerProneToStand(SGCharacter* SGCharacter);// 0x3d36e3fee041
	void ServerProneToCrouch(SGCharacter* SGCharacter);// 0x3d35e3fee041
	void ServerPlayingAnim(Character* SGCharacter);// 0x3d34e3fee041
	void ServerMirrorCamera(bool bMirror);// 0x3d33e3fee041
	void ServerGrenadeFastThrow();// 0x3d32e3fee041
	void ServerEquipThrowWeapon(SGInventory* TargetInv);// 0x3d31e3fee041
	void ServerDoChat(FString Content);// 0x3d30e3fee041
	void ServerCrouchToProne(SGCharacter* SGCharacter);// 0x3d2fe3fee041
	void ServerCanAddInventoryToTargetContainer(SGInventory* Inventory, SGInventory* TargetContainerInventory, bool bIsAutoAdd, enum ExtraOperType);// 0x3d2ee3fee041
	void ServerAttachAdapterInGameHud(SGInventory* Adapter, SGInventory* ParentInventory, int InContainerIndex, bool bIsDetachConflicted);// 0x3d2de3fee041
	void ServerAddInventoryToBag(SGInventory* Inventory, bool bToReachable, bool bIsCheckRoughSearch);// 0x3d2ce3fee041
	void RescueTeammateAfterThrow();// 0x3d2be3fee041
	void RescueTeammate(Character* TargetTeammate);// 0x3d2ae3fee041
	void PickupInventoryAfterThrow();// 0x3d29e3fee041
	void LootInventoryAfterThrow();// 0x3d28e3fee041
	void HoldBreath();// 0x3d27e3fee041
	void EquipThrowWeapon(SGInventory* TargetInv);// 0x3d26e3fee041
	void DoorUnlockAfterThrow();// 0x3d25e3fee041
	void CheckLongPressStartAltFire();// 0x3d24e3fee041
	bool CanSwitchToWeaponGroup(int Index);// 0x3d23e3fee041
	bool CanSprint(SGCharacter* SGCharacter);// 0x3d22e3fee041

--------------------------------
Class: SGActorInputProcessComponent.ActorComponent.Object
	void ZoomUp();// 0x35e4e3fee041
	void ZoomDown();// 0x35e3e3fee041
	void ZeroUp();// 0x35e2e3fee041
	void ZeroReset();// 0x35e1e3fee041
	void ZeroDown();// 0x35e0e3fee041
	void VehicleSeat6();// 0x35dfe3fee041
	void VehicleSeat5();// 0x35dee3fee041
	void VehicleSeat4();// 0x35dde3fee041
	void VehicleSeat3();// 0x35dce3fee041
	void VehicleSeat2();// 0x35dbe3fee041
	void VehicleSeat1();// 0x35dae3fee041
	void UseItem4();// 0x35d9e3fee041
	void UseItem3();// 0x35d8e3fee041
	void UseItem2();// 0x35d7e3fee041
	void UseItem1();// 0x35d6e3fee041
	void UnSprint();// 0x35d5e3fee041
	void UnSilentWalk();// 0x35d4e3fee041
	void UnlockMoveForward();// 0x35d3e3fee041
	void UnloadMagazine();// 0x35d2e3fee041
	void UnJump();// 0x35d1e3fee041
	void TurnRate(float Rate);// 0x35d0e3fee041
	void ToggleTakeCover();// 0x35cfe3fee041
	void ToggleProne();// 0x35cee3fee041
	void ToggleMap();// 0x35cde3fee041
	void ToggleMainMenu();// 0x35cce3fee041
	void ToggleHeadwear();// 0x35cbe3fee041
	void ToggleCrouch();// 0x35cae3fee041
	void ToggleCamera();// 0x35c9e3fee041
	void ToggleBag();// 0x35c8e3fee041
	void ToggleAIDebug();// 0x35c7e3fee041
	void ToggleADSFire();// 0x35c6e3fee041
	void SwitchToWeapon5();// 0x35c5e3fee041
	void SwitchToWeapon4();// 0x35c4e3fee041
	void SwitchToWeapon3();// 0x35c3e3fee041
	void SwitchToWeapon2();// 0x35c2e3fee041
	void SwitchToWeapon1();// 0x35c1e3fee041
	void SwitchToEmptyHand();// 0x35c0e3fee041
	void SwitchFireMode();// 0x35bfe3fee041
	void StopPreFire();// 0x35bee3fee041
	void StopLeanRight();// 0x35bde3fee041
	void StopLeanLeft();// 0x35bce3fee041
	void StopFire();// 0x35bbe3fee041
	void StopAltFire();// 0x35bae3fee041
	void StartSearch();// 0x35b9e3fee041
	void StartQTE();// 0x35b8e3fee041
	void StartLeanRight();// 0x35b7e3fee041
	void StartLeanLeft();// 0x35b6e3fee041
	void StartHoldGrenade();// 0x35b5e3fee041
	void StartFire();// 0x35b4e3fee041
	void StartAltFire();// 0x35b3e3fee041
	void Sprint();// 0x35b2e3fee041
	void SlideToCrouch();// 0x35b1e3fee041
	void SilentWalk();// 0x35b0e3fee041
	void ScopeNextMagnification();// 0x35afe3fee041
	void ScopeNextCamera();// 0x35aee3fee041
	void RotateInventoryItem();// 0x35ade3fee041
	void ReloadFast();// 0x35ace3fee041
	void QuickHeal();// 0x35abe3fee041
	void PlayerSetupMod();// 0x35aae3fee041
	void PlayerInteraction(Actor* InteractActor);// 0x35a9e3fee041
	void PlayerCheckWeapon();// 0x35a8e3fee041
	void PlayerCheckMagazinePC();// 0x35a7e3fee041
	void PlayerCheckMagazine();// 0x35a6e3fee041
	void PlayerCheckFireMode();// 0x35a5e3fee041
	void PlayerCheckBore();// 0x35a4e3fee041
	void Pause();// 0x35a3e3fee041
	void OpenStats();// 0x35a2e3fee041
	void NextScopeTotal();// 0x35a1e3fee041
	void NextScope();// 0x35a0e3fee041
	void MoveUp(float Value);// 0x359fe3fee041
	void MoveRight(float Value);// 0x359ee3fee041
	void MoveForward(float Value);// 0x359de3fee041
	void MirrorCamera();// 0x359ce3fee041
	void MarkViewpoint();// 0x359be3fee041
	void LootInventoryReleased();// 0x359ae3fee041
	void LootInventoryPressed();// 0x3599e3fee041
	void LookUpRate(float Rate);// 0x3598e3fee041
	void LockMoveForward();// 0x3597e3fee041
	void LoadMagazine(Actor* TargetInventory);// 0x3596e3fee041
	void Jump();// 0x3595e3fee041
	bool IsLockMoveForward();// 0x3594e3fee041
	bool InteractDoor();// 0x3593e3fee041
	bool InteractAlarm();// 0x3592e3fee041
	void Interact();// 0x3591e3fee041
	void InsertMark();// 0x3590e3fee041
	void GrenadeFastThrow();// 0x358fe3fee041
	void FreeLook();// 0x358ee3fee041
	void FillBores(Actor* TargetInventory);// 0x358de3fee041
	void DoorUnlock();// 0x358ce3fee041
	void DoorKick();// 0x358be3fee041
	void DoChat(FString ChatContent);// 0x358ae3fee041
	void DeleteMark();// 0x3589e3fee041
	void CloseStats();// 0x3588e3fee041
	void ChangeClipPC();// 0x3587e3fee041
	void ChangeClip();// 0x3586e3fee041
	void AutoRun();// 0x3585e3fee041

--------------------------------
Class: SGCharacterIKComponent.ActorComponent.Object
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bEnableRightHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bEnableFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	bool bEnableDSFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	float FootIKMaxScreenSize;//[Offset: 0x114, Size: 0x4]
	float IK_TraceDistanceAboveFoot;//[Offset: 0x118, Size: 0x4]
	float IK_TraceDistanceBelowFoot_Stand;//[Offset: 0x11c, Size: 0x4]
	float IK_TraceDistanceBelowFoot_Crouch;//[Offset: 0x120, Size: 0x4]
	float IK_TraceDistanceBelowFoot_Prone;//[Offset: 0x124, Size: 0x4]
	float FootOffset_InterpSpeed;//[Offset: 0x128, Size: 0x4]
	float PelvisOffset_InterpSpeed;//[Offset: 0x12c, Size: 0x4]
	float FootIK_InterpSpeed;//[Offset: 0x130, Size: 0x4]
	float FootHeight;//[Offset: 0x134, Size: 0x4]
	float HandHeight;//[Offset: 0x138, Size: 0x4]
	float EnableHandOffset_MaxDistance;//[Offset: 0x13c, Size: 0x4]
	float MaxHandOffsetHeight;//[Offset: 0x140, Size: 0x4]
	float CapsuleTraceRadius;//[Offset: 0x144, Size: 0x4]
	FName Root_Bone;//[Offset: 0x148, Size: 0x8]
	FName IKFoot_L_Bone;//[Offset: 0x150, Size: 0x8]
	FName IKFoot_R_Bone;//[Offset: 0x158, Size: 0x8]
	FName Thigh_L_Bone;//[Offset: 0x160, Size: 0x8]
	FName Thigh_R_Bone;//[Offset: 0x168, Size: 0x8]
	Vector IKFoot_Root_Offset_When_Prone;//[Offset: 0x170, Size: 0xc]
	FName IKHand_L_Bone;//[Offset: 0x17c, Size: 0x8]
	FName IKHand_R_Bone;//[Offset: 0x184, Size: 0x8]
	float IK_TraceDistanceBelowHand_Prone;//[Offset: 0x18c, Size: 0x4]
	float IK_TraceDistanceAboveHand;//[Offset: 0x190, Size: 0x4]
	float DSIKFootOffsetsDiff;//[Offset: 0x1fc, Size: 0x4]
	NPCAIGlobalSharedInfo* GSharedInfo;//[Offset: 0x200, Size: 0x8]
	float Max_FootLock_Rotation_Difference;//[Offset: 0x208, Size: 0x4]
	Rotator Accumulate_FootLock_L_Rotation;//[Offset: 0x20c, Size: 0xc]
	Rotator Accumulate_FootLock_R_Rotation;//[Offset: 0x218, Size: 0xc]
	float Accumulate_FootLock_L_Rotation_Difference;//[Offset: 0x224, Size: 0x4]
	float Accumulate_FootLock_R_Rotation_Difference;//[Offset: 0x228, Size: 0x4]
	float StandingStillToFootPlacementDormantTime;//[Offset: 0x234, Size: 0x4]
	TickSettingBaseOnURO TickSetting_HighEndDevice;//[Offset: 0x238, Size: 0x10]
	TickSettingBaseOnURO TickSetting_LowEndDevice;//[Offset: 0x248, Size: 0x10]
	void UpdateHandIKWhenProne(float DeltaTime, out float Enable_HandOffset_L_Alpha, out float Enable_HandOffset_R_Alpha, out Vector HandOffset_L_Location, out Vector HandOffset_R_Location);// 0x3d21e3fee041
	void UpdateFootLock(float DeltaTime, out float FootLock_L_Alpha, out Vector FootLock_L_Location, out Rotator FootLock_L_Rotation, out float FootLock_R_Alpha, out Vector FootLock_R_Location, out Rotator FootLock_R_Rotation);// 0x3d20e3fee041
	void UpdateFootIK(float DeltaTime, out float FootIKAlpha, out Vector PelvisOffset_Location, out Vector FootOffset_L_Location, out Vector FootOffset_R_Location, out Rotator FootOffset_L_Rotation, out Rotator FootOffset_R_Rotation, out Rotator ThighOffset_L_Rotation_WhenProne, out Rotator ThighOffset_R_Rotation_WhenProne);// 0x3d1fe3fee041
	void SetPelvisOffsets(float DeltaTime, out Vector FootOffset_L_Target, out Vector FootOffset_R_Target, out Vector PelvisOffset_Location);// 0x3d1ee3fee041
	void SetHandOffsets(float DeltaTime, FName In_IKHand_Bone, FName In_Root_Bone, out bool bHitIKHand, out Vector HandOffset_Target_Location);// 0x3d1de3fee041
	void SetFootOffsets(const float DeltaTime, out const FName In_IKFoot_Bone, out const FName In_Root_Bone, out const FName In_Thigh_Bone, out Vector FootOffset_Location, out Vector FootOffset_Target_Location, out Rotator FootOffset_Rotation, out Rotator FootOffset_Target_Rotation, out bool bHitIKFoot, out Rotator IKFootOffset_Rotation_WhenProne, out Rotator ThighOffset_Rotation_WhenProne);// 0x3d1ce3fee041
	Vector GetIKFootRootOffset();// 0x3d1be3fee041

--------------------------------
Class: NPCAIGlobalSharedInfo.Object
	float TimeOfRunEQS_FindBackUpCoverPoint;//[Offset: 0x28, Size: 0x4]
	<class Actor,AIGlobalCacheActors> CacheActorsInWorld;//[Offset: 0x30, Size: 0x50]
	<uint32,AIEnemyInfo> AIEnemyInfos;//[Offset: 0x80, Size: 0x50]
	bool bEnableAIPerceptionLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	float AITrackLOGLastAutoReleaseTime;//[Offset: 0xd4, Size: 0x4]
	<FString,AITrackLOGUnit*> AITrackLOGData;//[Offset: 0xd8, Size: 0x50]
	bool bAITrackEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	<enum,FString> AITrackLOGTemplate;//[Offset: 0x130, Size: 0x50]
	Actor*[] DSPoseUpdateWaitList;//[Offset: 0x180, Size: 0x10]
	Actor* DSPoseUpdateCharacter;//[Offset: 0x190, Size: 0x8]
	Actor*[] DSIKUpdateWaitList;//[Offset: 0x198, Size: 0x10]
	Actor* DSIKUpdateCharacter;//[Offset: 0x1a8, Size: 0x8]
	<class Object,enum> AIPropClassTypes;//[Offset: 0x1b0, Size: 0x50]

--------------------------------
Class: AIGlobalCacheActors
	float LastTimeSeconds;//[Offset: 0x0, Size: 0x4]
	Actor*[] CacheActors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AIEnemyInfo
	float FireTime;//[Offset: 0x0, Size: 0x4]
	Vector FireLocation;//[Offset: 0x4, Size: 0xc]
	Vector FireDirection;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: AITrackLOGUnit.Object
	Actor* AIPawn;//[Offset: 0x28, Size: 0x8]
	FString AIName;//[Offset: 0x30, Size: 0x10]
	AITrackLOG[] TrackLOGList;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: AITrackLOG
	enum LogType;//[Offset: 0x0, Size: 0x1]
	int64 LOGTime;//[Offset: 0x8, Size: 0x8]
	FName LOGKValues;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SGCharacterEnergyComponent.ActorComponent.Object
	CurveFloat* EnergyReduceScaleCurveBySlopeSprint;//[Offset: 0xc8, Size: 0x8]
	class GameplayEffect* AutoRecoverAbilityClass;//[Offset: 0xe8, Size: 0x8]
	class GameplayEffect* PersistentReducedByVaultAbilityClass;//[Offset: 0xf0, Size: 0x8]
	class GameplayEffect* PersistentReducedByJumpAbilityClass;//[Offset: 0xf8, Size: 0x8]
	class GameplayEffect* PunishmentByExhaustedAbilityClass;//[Offset: 0x100, Size: 0x8]
	class GameplayEffect* PersistentReducedByProneToCrouchClass;//[Offset: 0x108, Size: 0x8]
	class GameplayEffect* PersistentReducedByProneToStandClass;//[Offset: 0x110, Size: 0x8]
	class GameplayEffect* PersistentReducedByCrouchToProneClass;//[Offset: 0x118, Size: 0x8]
	class GameplayEffect* PersistentReducedByStandToProneClass;//[Offset: 0x120, Size: 0x8]
	class GameplayEffect* PersistentReducedByThrowClass;//[Offset: 0x128, Size: 0x8]
	class GameplayEffect* PersistentReducedByMeleeAtkClass;//[Offset: 0x130, Size: 0x8]
	class GameplayEffect* LowAutoRecoverStandClass;//[Offset: 0x138, Size: 0x8]
	float AccumulateDamageToReduceEnergyMax;//[Offset: 0x140, Size: 0x4]
	float ContinuousDamageInterval;//[Offset: 0x144, Size: 0x4]
	float ExhaustAnimRate;//[Offset: 0x148, Size: 0x4]
	float DelayTimeBeforeRecover;//[Offset: 0x14c, Size: 0x4]
	class SGCharacterEnergyAttributeSet* AttributeSetClass;//[Offset: 0x1c8, Size: 0x8]
	SGCharacterEnergyAttributeSet* CachedEnergyAttributeSet;//[Offset: 0x1e0, Size: 0x8]
	void Vault();// 0x3cefe3fee041
	void SetLowEnergyMax(float Value, Actor* Instigator);// 0x3ceee3fee041
	void SetLowEnergy(float Value, Actor* Instigator);// 0x3cede3fee041
	void SetEnergyMax(float Value, Actor* Instigator);// 0x3cece3fee041
	void SetEnergy(float Value, Actor* Instigator);// 0x3cebe3fee041
	void SendServerVerifyInfo(bool bCheat);// 0x3ceae3fee041
	void OnUnProne();// 0x3ce9e3fee041
	void OnStopFire();// 0x3ce8e3fee041
	void OnStartFire(bool bIsFastThrow);// 0x3ce7e3fee041
	void OnStandToProne();// 0x3ce6e3fee041
	void OnReconnect(PlayerController* ReConnectPlayerController);// 0x3ce5e3fee041
	void OnProneToCrouch();// 0x3ce4e3fee041
	void OnCrouchToProne();// 0x3ce3e3fee041
	void Jump();// 0x3ce2e3fee041
	bool IsLowEmpty();// 0x3ce1e3fee041
	bool IsEmpty();// 0x3ce0e3fee041
	bool IsCheat();// 0x3cdfe3fee041
	float GetThresholdLeavingExhausted();// 0x3cdee3fee041
	float GetLowThresholdLeavingExhausted();// 0x3cdde3fee041
	bool GetLowExhausted();// 0x3cdce3fee041
	float GetLowEnergyReduceSpeedScale();// 0x3cdbe3fee041
	float GetLowEnergyRecoverSpeedScale();// 0x3cdae3fee041
	float GetLowEnergyMax();// 0x3cd9e3fee041
	float GetLowEnergy();// 0x3cd8e3fee041
	bool GetExhausted();// 0x3cd7e3fee041
	float GetExhaustAnimRate();// 0x3cd6e3fee041
	float GetEnergyReduceSpeedScaleOfBuff();// 0x3cd5e3fee041
	float GetEnergyReduceSpeedScale();// 0x3cd4e3fee041
	float GetEnergyRecoverSpeedScaleOfBuff();// 0x3cd3e3fee041
	float GetEnergyRecoverSpeedScale();// 0x3cd2e3fee041
	float GetEnergyMax();// 0x3cd1e3fee041
	void GetEnergyAttributes(out float upEnergy, out float upEnergyMax, out float LowEnergy, out float LowEnergyMax);// 0x3cd0e3fee041
	float GetEnergy();// 0x3ccfe3fee041
	void EndVault();// 0x3ccee3fee041
	void DeductEnergyOnThrowWeapon();// 0x3ccde3fee041
	void DeductEnergyOnMeleeAtk();// 0x3ccce3fee041
	void AddLowEnergy(float Value, Actor* Instigator);// 0x3ccbe3fee041
	void AddEnergy(float Value, Actor* Instigator);// 0x3ccae3fee041

--------------------------------
Class: SGCharacterEnergyAttributeSet.AttributeSet.Object
	float Energy;//[Offset: 0x34, Size: 0x4]
	float EnergyMax;//[Offset: 0x3c, Size: 0x4]
	float MinimumEnergyMax;//[Offset: 0x40, Size: 0x4]
	float MaximumEnergyMax;//[Offset: 0x44, Size: 0x4]
	float ThresholdLeavingExhausted;//[Offset: 0x48, Size: 0x4]
	float bExhausted;//[Offset: 0x4c, Size: 0x4]
	float EnergyRecoverSpeedScaleMultiplier;//[Offset: 0x50, Size: 0x4]
	float EnergyReduceSpeedScaleMultiplier;//[Offset: 0x54, Size: 0x4]
	float EnergyRecoverSpeedScaleOfBuff;//[Offset: 0x58, Size: 0x4]
	float EnergyReduceSpeedScaleOfBuff;//[Offset: 0x5c, Size: 0x4]
	float LowEnergy;//[Offset: 0x60, Size: 0x4]
	float LowEnergyMax;//[Offset: 0x68, Size: 0x4]
	float LowMinimumEnergyMax;//[Offset: 0x6c, Size: 0x4]
	float LowMaximumEnergyMax;//[Offset: 0x70, Size: 0x4]
	float LowThresholdLeavingExhausted;//[Offset: 0x74, Size: 0x4]
	float bLowExhausted;//[Offset: 0x78, Size: 0x4]
	float LowEnergyRecoverSpeedScaleMultiplier;//[Offset: 0x7c, Size: 0x4]
	float LowEnergyReduceSpeedScaleMultiplier;//[Offset: 0x80, Size: 0x4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	void OnRep_LowEnergyChanged();// 0x3cc9e3fee041
	void OnRep_EnergyRecoverSpeedScaleOfBuffChanged();// 0x3cc8e3fee041
	void OnRep_EnergyChanged();// 0x3cc7e3fee041

--------------------------------
Class: SGCharacterDeathComponent.SGActorDeathComponent.ActorComponent.Object
	Character* CachedKillerCharacter;//[Offset: 0xf0, Size: 0x8]
	Vector AdjustBoxExtend;//[Offset: 0x108, Size: 0xc]
	float ReturnToLobbyTime;//[Offset: 0x114, Size: 0x4]
	bool bKeepCorpse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	float DeathCountInterval;//[Offset: 0x11c, Size: 0x4]
	<int,class SGInventory> DogTagClassMap;//[Offset: 0x120, Size: 0x50]
	int DogTagType;//[Offset: 0x170, Size: 0x4]
	bool bDogTagEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]
	float CorpseDestroyTime;//[Offset: 0x178, Size: 0x4]
	float DelaySpawnDeathBoxTime;//[Offset: 0x17c, Size: 0x4]
	class Actor* DeathBoxClass;//[Offset: 0x180, Size: 0x8]
	<enum,class Actor> OverrideDeathBoxClass;//[Offset: 0x188, Size: 0x50]
	float IgnoreDeathEffectHiddenTime;//[Offset: 0x1d8, Size: 0x4]
	ParticleSystem* DeathEffect;//[Offset: 0x1e0, Size: 0x8]
	float FPAnimationPlayRate;//[Offset: 0x1e8, Size: 0x4]
	float TPAnimationPlayRate;//[Offset: 0x1ec, Size: 0x4]
	float DeathAnimationBlendIn;//[Offset: 0x1f0, Size: 0x4]
	CharacterDeathInfo DeathInfo;//[Offset: 0x1f8, Size: 0x48]
	CharacterDeathInfo OldDeathInfo;//[Offset: 0x240, Size: 0x48]
	SGInventory* CachedDeathBox;//[Offset: 0x288, Size: 0x8]
	TimerHandle DeathCountTimerHandle;//[Offset: 0x290, Size: 0x8]
	TimerHandle DelayPlayDeathEffectTimerHandle;//[Offset: 0x298, Size: 0x8]
	TimerHandle DisableCompReplicationHandle;//[Offset: 0x2a0, Size: 0x8]
	Controller* CachedVictimPlayerController;//[Offset: 0x2a8, Size: 0x8]
	AnimMontage* CachedDeathAnimation;//[Offset: 0x2b0, Size: 0x8]
	float MeshInterpDuration;//[Offset: 0x2f0, Size: 0x4]
	KillerStaticData KillerBackupData;//[Offset: 0x2f8, Size: 0xa0]
	KillerStaticData KillerBackupData_CauseDBNO;//[Offset: 0x398, Size: 0xa0]
	PlayerState* CachedPlayerStateBeforeDied;//[Offset: 0x504, Size: 0x8]
	CachedDeadCharacterInfo CachedDeadCharacterInfo;//[Offset: 0x510, Size: 0x30]
	SGInventory* DogTagInv;//[Offset: 0x550, Size: 0x8]
	void SpawnDogTag(DogTagCreateInfo DogTagCreateInfo);// 0x3c8ce3fee041
	void SpawnDeathBox();// 0x3c8be3fee041
	bool ShouldKeepCorpse();// 0x3c8ae3fee041
	void SetSpawnDogTagEnable(bool bEnable);// 0x3c89e3fee041
	void SetOverrideDeathBoxClass(enum CharacterType, class Actor DeathBoxClass);// 0x3c88e3fee041
	void SetDogTagType(int InDogTagType);// 0x3c87e3fee041
	void ResetMaterialParent(MaterialInstance* MatInst, MaterialInterface* NewParent);// 0x3c86e3fee041
	void PlayDeathEffect();// 0x3c85e3fee041
	void OnTakeDamage(Controller* Causer, float AttemptedDamage, float Damage, Vector Momentum, Actor* HitArmor, out const SGPointDamageEvent DamageEvent, Actor* DamageCauser, DamageEventObject* DamageEventObject, bool bHitPenetrateArmor);// 0x3c84e3fee041
	void OnRep_DeathInfo();// 0x3c83e3fee041
	void OnRep_DeathBox();// 0x3c82e3fee041
	void OnPreStartSpectating(PlayerController* Controller);// 0x3c81e3fee041
	void OnIgnoreDeathEffectHiddenTimer();// 0x3c80e3fee041
	void OnGameModePlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x3c7fe3fee041
	void OnDeathCountTimer();// 0x3c7ee3fee041
	void OnDeathAnimationEnded();// 0x3c7de3fee041
	bool IsDead();// 0x3c7ce3fee041
	Actor* GetDeathDamageCauser();// 0x3c7be3fee041
	float GetDeadTimeStamp();// 0x3c7ae3fee041
	void ForceSpawnDeathBox();// 0x3c79e3fee041
	void DelayHideCharacter();// 0x3c78e3fee041
	void ClientReceiveKillerInfo(Character* KillerCharacter, Controller* KilledController);// 0x3c77e3fee041

--------------------------------
Class: SGActorDeathComponent.ActorComponent.Object
	Controller* DeferEventInstigator;//[Offset: 0xb8, Size: 0x8]
	Actor* DeferEffectCauser;//[Offset: 0xc0, Size: 0x8]
	DamageEventObject* DeferDamageEventObject;//[Offset: 0xc8, Size: 0x8]
	bool DeferbForceDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	void Died(Controller* EventInstigator, Actor* EffectCauser, DamageEventObject* DamageEventObject, bool bForceDied);// 0x3579e3fee041
	void DeferDiedLogic();// 0x3578e3fee041
	void DeferDied(Controller* EventInstigator, Actor* EffectCauser, DamageEventObject* DamageEventObject, bool bForceDied, float DeferTime);// 0x3577e3fee041

--------------------------------
Class: DogTagCreateInfo
	FString PlayerName;//[Offset: 0x0, Size: 0x10]
	int PlayerLevel;//[Offset: 0x10, Size: 0x4]
	uint64 DeathTime;//[Offset: 0x18, Size: 0x8]
	FString KillerPlayerName;//[Offset: 0x20, Size: 0x10]
	uint64 KillerPlayerWeaponID;//[Offset: 0x30, Size: 0x8]
	enum KillerCharacterType;//[Offset: 0x38, Size: 0x1]
	bool IsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	FString MapName;//[Offset: 0x40, Size: 0x10]
	int DeathReason;//[Offset: 0x50, Size: 0x4]
	int PlayerRank;//[Offset: 0x54, Size: 0x4]
	uint32 GOpenID;//[Offset: 0x58, Size: 0x4]
	uint64 GID;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: CharacterDeathInfo
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bForceDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float Timestamp;//[Offset: 0x4, Size: 0x4]
	int DeathCount;//[Offset: 0x8, Size: 0x4]
	Vector DeathLocation;//[Offset: 0xc, Size: 0xc]
	Rotator DeathRotation;//[Offset: 0x18, Size: 0xc]
	Actor* DamageCauser;//[Offset: 0x28, Size: 0x8]
	enum DamageCauserType;//[Offset: 0x30, Size: 0x1]
	enum DeathBodyPart;//[Offset: 0x31, Size: 0x1]
	Vector Momentum;//[Offset: 0x34, Size: 0xc]
	bool bPenetrateArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	enum DeathAnimationState;//[Offset: 0x41, Size: 0x1]
	enum HitGroup;//[Offset: 0x42, Size: 0x1]

--------------------------------
Class: CachedDeadCharacterInfo
	int64 DeadCharacterGID;//[Offset: 0x0, Size: 0x8]
	int channelType;//[Offset: 0x8, Size: 0x4]
	int PlatId;//[Offset: 0xc, Size: 0x4]
	int PlayerLevel;//[Offset: 0x10, Size: 0x4]
	int RankLevel;//[Offset: 0x14, Size: 0x4]
	int CurSeason_ID;//[Offset: 0x18, Size: 0x4]
	enum DeadCharacterType;//[Offset: 0x1c, Size: 0x1]
	int DeadCharacterTeamID;//[Offset: 0x20, Size: 0x4]
	uint32 Area_ID;//[Offset: 0x24, Size: 0x4]
	int TeamType;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: SGCharacterDBNOComponent.ActorComponent.Object
	bool bDebugDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	Actor* HitArmorEnterDBNO;//[Offset: 0xd0, Size: 0x8]
	float ShowFullProgressThreshold;//[Offset: 0xd8, Size: 0x4]
	float AbortShowProgressThreshold;//[Offset: 0xdc, Size: 0x4]
	SGCharacterDBNOInfo[] DBNOInfoList;//[Offset: 0xe0, Size: 0x10]
	bool bDebugDBNONoCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool bLeftArmOutOfEnduranceAfterRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	bool bRightArmOutOfEnduranceAfterRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 0x1]
	bool bLeftLegOutOfEnduranceAfterRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3, Size: 0x1]
	bool bRightLegOutOfEnduranceAfterRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	float MinHeadEnduranceRescued;//[Offset: 0xf8, Size: 0x4]
	float MinChestEnduranceRescued;//[Offset: 0xfc, Size: 0x4]
	float FoodDeductionWhenRescued;//[Offset: 0x100, Size: 0x4]
	float MoistureDeductionWhenRescued;//[Offset: 0x104, Size: 0x4]
	float LeftArmTakeDamageScale;//[Offset: 0x108, Size: 0x4]
	float RightArmTakeDamageScale;//[Offset: 0x10c, Size: 0x4]
	float LeftLegTakeDamageScale;//[Offset: 0x110, Size: 0x4]
	float RightLegTakeDamageScale;//[Offset: 0x114, Size: 0x4]
	float HeadTakeDamageScale;//[Offset: 0x118, Size: 0x4]
	float ChestTakeDamageScale;//[Offset: 0x11c, Size: 0x4]
	float StomachTakeDamageScale;//[Offset: 0x120, Size: 0x4]
	float GodTimeWhenEnterDBNO;//[Offset: 0x124, Size: 0x4]
	float GodTimeWhenLeaveDBNO;//[Offset: 0x128, Size: 0x4]
	class GameplayAbility* DBNODamageAbilityClass;//[Offset: 0x130, Size: 0x8]
	class GameplayAbility* DBNOStatusAbilityClass;//[Offset: 0x138, Size: 0x8]
	bool bIsDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	float ShowWeaponDelayTime;//[Offset: 0x154, Size: 0x4]
	Actor* DBNODamageCauser;//[Offset: 0x160, Size: 0x8]
	Controller* DBNOInstigator;//[Offset: 0x180, Size: 0x8]
	void StartDBNODamage();// 0x39c6e3fee041
	void SetIsDBNO(bool NewbIsDBNO);// 0x39c5e3fee041
	void PreDied(Controller* InstigatedBy, DamageEventObject* DamageEventObject, out bool bWantToDie);// 0x39c4e3fee041
	void PostDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x39c3e3fee041
	void OnTakeDamage(Controller* Causer, float AttemptedDamage, float Damage, Vector Momentum, Actor* HitArmor, out const SGPointDamageEvent DamageEvent, Actor* DamageCauser, DamageEventObject* DamageEventObject, bool bHitPenetrateArmor);// 0x39c2e3fee041
	void OnStopBeingRescued(Character* Rescuer, Character* DBNOer);// 0x39c1e3fee041
	void OnStartBeingRescued(Character* Rescuer, Character* DBNOer, float Duration, float RemainingTime);// 0x39c0e3fee041
	void OnRep_bIsDBNO();// 0x39bfe3fee041
	void OnGameModePlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x39bee3fee041
	void OnFinishRescueTeammate(Character* Rescuer, Character* DBNOer);// 0x39bde3fee041
	void OnDamageSpreadingRoundFinish(Actor* Instigator);// 0x39bce3fee041
	void LeaveDBNOMovement();// 0x39bbe3fee041
	bool GetIsDBNO();// 0x39bae3fee041
	bool GetIsDamageInhibite();// 0x39b9e3fee041
	void EnterDBNOMovement();// 0x39b8e3fee041
	void EndDBNODamage();// 0x39b7e3fee041
	void DeferredEnterDBNOMovement(out const HitResult HitResult);// 0x39b6e3fee041
	void ClientNotifyStartBeingRescued(Character* Rescuer, Character* Rescuee, float Duration, float ServerTimeStamp);// 0x39b5e3fee041

--------------------------------
Class: SGCharacterDBNOInfo
	float InitialDBNOHealth;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SGCharacterCurveBreathComponent.ActorComponent.Object
	bool bEnableBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bEnableNoise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	bool bSmoothBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]
	float SideSwayScale_LocationX;//[Offset: 0xcc, Size: 0x4]
	float SideSwayScale_RotationX;//[Offset: 0xd0, Size: 0x4]
	float SideSwayScale_LocationX_ADS;//[Offset: 0xd4, Size: 0x4]
	float SideSwayScale_RotationX_ADS;//[Offset: 0xd8, Size: 0x4]
	float CameraRotationScale;//[Offset: 0xdc, Size: 0x4]
	CurveVector* LocationCurve_Idle;//[Offset: 0xe0, Size: 0x8]
	CurveVector* RotationCurve_Idle;//[Offset: 0xe8, Size: 0x8]
	CurveFloat* FrequencyCurve_Idle;//[Offset: 0xf0, Size: 0x8]
	CurveFloat* AmplitudeCurve_Idle;//[Offset: 0xf8, Size: 0x8]
	CurveVector* LocationCurve_Idle_ADS;//[Offset: 0x100, Size: 0x8]
	CurveVector* RotationCurve_Idle_ADS;//[Offset: 0x108, Size: 0x8]
	CurveFloat* FrequencyCurve_Idle_ADS;//[Offset: 0x110, Size: 0x8]
	CurveFloat* AmplitudeCurve_Idle_ADS;//[Offset: 0x118, Size: 0x8]
	CurveVector* LocationCurve_Move;//[Offset: 0x120, Size: 0x8]
	CurveVector* RotationCurve_Move;//[Offset: 0x128, Size: 0x8]
	CurveFloat* FrequencyCurve_Move;//[Offset: 0x130, Size: 0x8]
	CurveFloat* AmplitudeCurve_Move;//[Offset: 0x138, Size: 0x8]
	CurveVector* LocationCurve_Move_ADS;//[Offset: 0x140, Size: 0x8]
	CurveVector* RotationCurve_Move_ADS;//[Offset: 0x148, Size: 0x8]
	CurveFloat* FrequencyCurve_Move_ADS;//[Offset: 0x150, Size: 0x8]
	CurveFloat* AmplitudeCurve_Move_ADS;//[Offset: 0x158, Size: 0x8]
	CurveVector* LocationCurve_SilentWalk;//[Offset: 0x160, Size: 0x8]
	CurveVector* RotationCurve_SilentWalk;//[Offset: 0x168, Size: 0x8]
	CurveFloat* FrequencyCurve_SilentWalk;//[Offset: 0x170, Size: 0x8]
	CurveFloat* AmplitudeCurve_SilentWalk;//[Offset: 0x178, Size: 0x8]
	CurveVector* LocationCurve_SilentWalk_ADS;//[Offset: 0x180, Size: 0x8]
	CurveVector* RotationCurve_SilentWalk_ADS;//[Offset: 0x188, Size: 0x8]
	CurveFloat* FrequencyCurve_SilentWalk_ADS;//[Offset: 0x190, Size: 0x8]
	CurveFloat* AmplitudeCurve_SilentWalk_ADS;//[Offset: 0x198, Size: 0x8]
	CurveVector* LocationCurve_Fire_ADS;//[Offset: 0x1a0, Size: 0x8]
	CurveVector* RotationCurve_Fire_ADS;//[Offset: 0x1a8, Size: 0x8]
	CurveFloat* FrequencyCurve_Fire_ADS;//[Offset: 0x1b0, Size: 0x8]
	CurveFloat* AmplitudeCurve_Fire_ADS;//[Offset: 0x1b8, Size: 0x8]
	CurveVector* LocationCurve_BreakLeg_Move;//[Offset: 0x1c0, Size: 0x8]
	CurveVector* RotationCurve_BreakLeg_Move;//[Offset: 0x1c8, Size: 0x8]
	CurveFloat* FrequencyCurve_BreakLeg_Move;//[Offset: 0x1d0, Size: 0x8]
	CurveFloat* AmplitudeCurve_BreakLeg_Move;//[Offset: 0x1d8, Size: 0x8]
	CurveVector* LocationCurve_BreakLeg_Move_ADS;//[Offset: 0x1e0, Size: 0x8]
	CurveVector* RotationCurve_BreakLeg_Move_ADS;//[Offset: 0x1e8, Size: 0x8]
	CurveFloat* FrequencyCurve_BreakLeg_Move_ADS;//[Offset: 0x1f0, Size: 0x8]
	CurveFloat* AmplitudeCurve_BreakLeg_Move_ADS;//[Offset: 0x1f8, Size: 0x8]
	CurveVector* AdditiveLocationCurve_Idle;//[Offset: 0x200, Size: 0x8]
	CurveVector* AdditiveRotationCurve_Idle;//[Offset: 0x208, Size: 0x8]
	CurveFloat* AdditiveAmplitudeCurve_Idle;//[Offset: 0x210, Size: 0x8]
	CurveVector* AdditiveLocationCurve_Idle_ADS;//[Offset: 0x218, Size: 0x8]
	CurveVector* AdditiveRotationCurve_Idle_ADS;//[Offset: 0x220, Size: 0x8]
	CurveFloat* AdditiveAmplitudeCurve_Idle_ADS;//[Offset: 0x228, Size: 0x8]
	CurveVector* AdditiveLocationCurve_BreakArm;//[Offset: 0x230, Size: 0x8]
	CurveVector* AdditiveRotationCurve_BreakArm;//[Offset: 0x238, Size: 0x8]
	CurveFloat* AdditiveAmplitudeCurve_BreakArm;//[Offset: 0x240, Size: 0x8]
	CurveVector* AdditiveLocationCurve_BreakArm_ADS;//[Offset: 0x248, Size: 0x8]
	CurveVector* AdditiveRotationCurve_BreakArm_ADS;//[Offset: 0x250, Size: 0x8]
	CurveFloat* AdditiveAmplitudeCurve_BreakArm_ADS;//[Offset: 0x258, Size: 0x8]
	CurveVector* AdditiveLocationCurve_Exhausted;//[Offset: 0x260, Size: 0x8]
	CurveVector* AdditiveRotationCurve_Exhausted;//[Offset: 0x268, Size: 0x8]
	CurveFloat* AdditiveAmplitudeCurve_Exhausted;//[Offset: 0x270, Size: 0x8]
	CurveVector* AdditiveLocationCurve_Exhausted_ADS;//[Offset: 0x278, Size: 0x8]
	CurveVector* AdditiveRotationCurve_Exhausted_ADS;//[Offset: 0x280, Size: 0x8]
	CurveFloat* AdditiveAmplitudeCurve_Exhausted_ADS;//[Offset: 0x288, Size: 0x8]
	CurveVector* CurrentLocationCurve;//[Offset: 0x290, Size: 0x8]
	CurveVector* CurrentRotationCurve;//[Offset: 0x298, Size: 0x8]
	CurveFloat* CurrentFrequencyCurve;//[Offset: 0x2a0, Size: 0x8]
	CurveFloat* CurrentAmplitudeCurve;//[Offset: 0x2a8, Size: 0x8]
	CurveVector* ExtraLocationCurve;//[Offset: 0x2b0, Size: 0x8]
	CurveVector* ExtraRotationCurve;//[Offset: 0x2b8, Size: 0x8]
	CurveFloat* ExtraAmplitudeCurve;//[Offset: 0x2c0, Size: 0x8]
	float InterpSpeed;//[Offset: 0x2c8, Size: 0x4]
	float MaxVelocityToNormalize;//[Offset: 0x2cc, Size: 0x4]
	float WeaponTypeBaseZero_Common;//[Offset: 0x2d0, Size: 0x4]
	float WeaponTypeBaseZero_Throwable;//[Offset: 0x2d4, Size: 0x4]
	float WeaponTypeBaseZero_EmptyHand;//[Offset: 0x2d8, Size: 0x4]
	float NoiseScale;//[Offset: 0x2dc, Size: 0x4]
	float FixedUpdateTime;//[Offset: 0x2e0, Size: 0x4]
	float CameraAnimatedRotationFadeOutInterpSpeed;//[Offset: 0x2e4, Size: 0x4]
	float CurrentSpeedNormalized;//[Offset: 0x2e8, Size: 0x4]
	float CurveUpdateStepScale;//[Offset: 0x2ec, Size: 0x4]
	float CurveAmplitudeScale;//[Offset: 0x2f0, Size: 0x4]
	float ExtraAmplitudeScale;//[Offset: 0x2f4, Size: 0x4]
	float CurveTime_NonAdditive;//[Offset: 0x2f8, Size: 0x4]
	float CurveTime_Additive;//[Offset: 0x2fc, Size: 0x4]
	Vector CurrentLocationValue;//[Offset: 0x300, Size: 0xc]
	Vector CurrentRotationValue;//[Offset: 0x30c, Size: 0xc]
	Vector ExtraLocationValue;//[Offset: 0x318, Size: 0xc]
	Vector ExtraRotationValue;//[Offset: 0x324, Size: 0xc]
	Vector SmoothedLocationValue;//[Offset: 0x330, Size: 0xc]
	Vector SmoothedRotationValue;//[Offset: 0x33c, Size: 0xc]
	bool bEnableAnimationDriven_CameraAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	float CameraAnimatedScaler_Small;//[Offset: 0x34c, Size: 0x4]
	float CameraAnimatedScaler_Large;//[Offset: 0x350, Size: 0x4]
	Rotator BaseCameraAnimatedRotation;//[Offset: 0x360, Size: 0xc]
	Rotator CameraAnimatedRotationOffset;//[Offset: 0x36c, Size: 0xc]
	Vector CameraAnimatedTranslationOffset;//[Offset: 0x378, Size: 0xc]
	float BreathZoffsetScaler_SilentWalk;//[Offset: 0x384, Size: 0x4]
	float BreathZoffsetScaler_SilentWalk_ADS;//[Offset: 0x388, Size: 0x4]
	<CurveVector*,float> LocationCurveMaxTimes;//[Offset: 0x390, Size: 0x50]
	bool bServerExhausted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fe, Size: 0x1]
	void RefreshExhaust();// 0x3c75e3fee041

--------------------------------
Class: SGCharacterTLogComponent.ActorComponent.Object
	void ServerTlogActivityFootStepMaker(Vector Locaction);// 0x4155e3fee041

--------------------------------
Class: SGCharacterMoveBlockedAvoidanceComponent.ActorComponent.Object
	bool bEnableMoveBlockedAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bMoveBlockedCurrentFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	float MoveBlockedTimeToTriggerAvoidance;//[Offset: 0xc4, Size: 0x4]
	float MoveBlockedEcpliseTime;//[Offset: 0xc8, Size: 0x4]
	Actor* IgnoreActorWhenMoving;//[Offset: 0xd0, Size: 0x8]
	float ResolvePenetrationVelocity;//[Offset: 0xd8, Size: 0x4]
	void SetIgnoreActorWhenMoving(Actor* InIgnoreActorWhenMoving);// 0x3dd9e3fee041
	bool ResolvePenetrationWithIgnoreActor(bool ImmediatelyResolve, float DeltaTime);// 0x3dd8e3fee041
	void OnUpdateCharacterStateBeforeMovement(float DeltaSeconds);// 0x3dd7e3fee041
	void OnUpdateCharacterStateAfterMovement(float DeltaSeconds);// 0x3dd6e3fee041
	void OnRep_IgnoreActorWhenMoving();// 0x3dd5e3fee041
	void OnMoveBlockBy(out const HitResult Impact);// 0x3dd4e3fee041
	bool IsIgnoreMoveBlockedActorWhenMoving();// 0x3dd3e3fee041

--------------------------------
Class: SGCharacterMeshComponent.ActorComponent.Object
	FName HeadBoneName;//[Offset: 0xc8, Size: 0x8]
	FName PelvisBoneName;//[Offset: 0xd0, Size: 0x8]
	FName SpineBoneName;//[Offset: 0xd8, Size: 0x8]
	FName[] FPPHiddenBones;//[Offset: 0xe0, Size: 0x10]
	float DeadBodyMeshDrawDistance;//[Offset: 0xf0, Size: 0x4]
	bool bForceShowModularMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	bool bEnableVisiualMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	Character* ReticleTargetActor;//[Offset: 0x108, Size: 0x8]
	uint64 MessageIndex;//[Offset: 0x110, Size: 0x8]
	uint32 CharacterTrisCount;//[Offset: 0x118, Size: 0x4]
	uint32 WeaponTrisCount;//[Offset: 0x11c, Size: 0x4]
	SGInventory* CachedHeadInventory;//[Offset: 0x120, Size: 0x8]
	SGInventory* CachedHairInventory;//[Offset: 0x128, Size: 0x8]
	SGInventory* CachedChestHangingInventory;//[Offset: 0x130, Size: 0x8]
	SGInventory* CachedArmorInventory;//[Offset: 0x138, Size: 0x8]
	enum SpecificCharacterMeshPolicy;//[Offset: 0x143, Size: 0x1]
	SkeletalMesh* SimpleMesh_Male;//[Offset: 0x148, Size: 0x8]
	SkeletalMesh* SimpleMesh_Female_Game;//[Offset: 0x150, Size: 0x8]
	SkeletalMesh* SimpleMesh_Female_Lobby;//[Offset: 0x158, Size: 0x8]
	SkeletalMesh*[] SimpleMeshs_ForTest;//[Offset: 0x160, Size: 0x10]
	int[] AvatarIdGroup_Female;//[Offset: 0x170, Size: 0x10]
	SkeletalMesh* DynamicLoadMeshTemplate;//[Offset: 0x180, Size: 0x28]
	class SGInventory[] DynamicLoadAvatarInventories;//[Offset: 0x1a8, Size: 0x10]
	class AnimInstance* DynamicLoadAnimClass;//[Offset: 0x1b8, Size: 0x28]
	void WrapShowCharacterSimpleMesh(bool bShow);// 0x3dcbe3fee041
	void UpdateMeshLODsDebugString(ActorComponent* Child, out FString DebugString, out uint32 TrisCount);// 0x3dcae3fee041
	void ShowMasterSimpleMesh(bool bShow, bool bForceUpdate);// 0x3dc9e3fee041
	void ShowComplexAvatarMesh(bool bShow);// 0x3dc8e3fee041
	void OnCharacterSexChanged(enum InCharacterSex);// 0x3dc7e3fee041
	void OnCharacterAvatarLoaded(MeshComponent* LoadedMeshComp);// 0x3dc6e3fee041
	void OnCharacterAvatarListChanged(bool bServerAvatar);// 0x3dc5e3fee041
	void OnBecomeViewTarget(PlayerController* PC);// 0x3dc4e3fee041
	void OnAvatarRemoved(SGInventory* TargetMesh);// 0x3dc3e3fee041
	void OnAvatarAdded(SGInventory* TargetMesh);// 0x3dc2e3fee041
	Character* GetReticleTargetActor();// 0x3dc1e3fee041
	float GetDistanceToLocalViewer(Character* Character);// 0x3dc0e3fee041
	FName GetBoneName(enum BoneType);// 0x3dbfe3fee041
	Vector GetBoneLocation(enum BoneType);// 0x3dbee3fee041
	void DrawMeshLODsDebugString(Character* Character);// 0x3dbde3fee041
	void ConditionalWrapShowCharacterSimpleMesh(bool bShow, bool bForceUpdate);// 0x3dbce3fee041

--------------------------------
Class: SGCharacterLoadProtectComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bIsProtect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	<ActorComponent*,ProtectCacheComponent> ProtectCacheMap;//[Offset: 0xc8, Size: 0x50]
	<SGInventory*,bool> HiddenInventoryMap;//[Offset: 0x118, Size: 0x50]
	float LoadProtectEndTime;//[Offset: 0x168, Size: 0x4]
	void UnProtectCharacter();// 0x3dbae3fee041
	void SetProject(bool InIsProtect);// 0x3db9e3fee041
	void SetClientNotSendClose();// 0x3db8e3fee041
	void RestoreAllWeaponInventory();// 0x3db7e3fee041
	void RestoreAllAvatar();// 0x3db6e3fee041
	void ProtectCharacter();// 0x3db5e3fee041
	void OnShowMergedAvatar(SkeletalMeshComponent* MergedMeshComp, bool bShow);// 0x3db4e3fee041
	void OnRep_IsProtect();// 0x3db3e3fee041
	void OnInventoryGiveComplette();// 0x3db2e3fee041
	void OnAvatarAddedEvent(SGInventory* EquipInventory);// 0x3db1e3fee041
	void OnAfterRecalcPickupAndHiddenState(SGInventory* Inventory);// 0x3db0e3fee041
	void LockMovement(bool bLock);// 0x3dafe3fee041
	float GetTimeAfterLoadProtect();// 0x3daee3fee041
	bool GetIsProtect();// 0x3dade3fee041
	void DisposeAvatarComponent(ActorComponent* ActorComponent);// 0x3dace3fee041
	void DisposeAllAvatar();// 0x3dabe3fee041

--------------------------------
Class: ProtectCacheComponent
	ActorComponent* HiddenComponent;//[Offset: 0x0, Size: 0x8]
	bool bCastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: SGCharacterInventoryManagerComponent.ActorComponent.Object
	SGInventory* CurGivedInventory;//[Offset: 0xc8, Size: 0x8]
	SGInventory*[] InventoryArray;//[Offset: 0xd0, Size: 0x10]
	enum[] CustomEffectCharacterAttributeInventoryPosArr;//[Offset: 0xe0, Size: 0x10]
	SGInventory*[] EffectCharacterAttributeInventoryArr;//[Offset: 0xf0, Size: 0x10]
	float TotalWeight;//[Offset: 0x118, Size: 0x4]
	int TotalInventoryValue;//[Offset: 0x11c, Size: 0x4]
	int DefaultInventoryNum;//[Offset: 0x130, Size: 0x4]
	TimerHandle CheckDefaultReplicateInventoryTimeHandle;//[Offset: 0x138, Size: 0x8]
	void SetDefaultInventoryNum();// 0x3d7ae3fee041
	bool RemoveInventory(SGInventory* InvToRemove);// 0x3d79e3fee041
	void OnRep_TotalWeightChange();// 0x3d78e3fee041
	void OnRep_TotalInventoryValue();// 0x3d77e3fee041
	void OnInventoryDestroyed(Actor* Inv);// 0x3d76e3fee041
	bool IsInventoryExist(const SGInventory* TestInv);// 0x3d75e3fee041
	void InventoriesBeChanged();// 0x3d74e3fee041
	float GetInventoryToCharacterSpeedEffectValue();// 0x3d73e3fee041
	float GetInventoryToCharacterErgonomicsEffectValue();// 0x3d72e3fee041
	void GetEquipedInventories(out SGInventory*[] OutAllInventories);// 0x3d71e3fee041
	void GetCustomPosEquipedInventories(enum[] CustomPosArr, out SGInventory*[] OutAllInventories);// 0x3d70e3fee041
	void GetAllInventories(out SGInventory*[] OutAllInventories);// 0x3d6fe3fee041
	void FindInventoryListByID(int64 ItemID, out SGInventory*[] OutInventoryList);// 0x3d6ee3fee041
	SGInventory* FindInventoryByID(int64 ItemID);// 0x3d6de3fee041
	SGInventory* FindInventory(class SGInventory InvClass);// 0x3d6ce3fee041
	void DiscardAll(bool bFrame);// 0x3d6be3fee041
	SGInventory* CreateInventory(class SGInventory NewInvClass, bool bActivate);// 0x3d6ae3fee041
	void CheckDefaultReplicateInventory();// 0x3d69e3fee041
	bool AddInventory(SGInventory* InvToAdd);// 0x3d68e3fee041

--------------------------------
Class: SGCharacterInventoryComponent.ActorComponent.Object
	ItemGridInfo AutoFindDropPos_OutPos;//[Offset: 0xc0, Size: 0x8]
	bool AutoFindDropPos_OutResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool AutoFindDropPos_OutIsDoRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	float MAX_INV_INTERACT_SQR_DIST;//[Offset: 0xcc, Size: 0x4]
	<SGInventory*,PreOccupiedContainerList> GridPreOccupyContainerList;//[Offset: 0xd0, Size: 0x50]
	enum LastPlayerMoveInventoryResult;//[Offset: 0x120, Size: 0x1]
	SGInventory* DelayDropInventory;//[Offset: 0x128, Size: 0x8]
	void ThrowItem(SGInventory* TargetInv, bool bForceDestory, bool bIsPlayerRpc);// 0x3c71e3fee041
	void SplitInventory(SGInventory* InInventory, int SplitCount, out const ItemGridInfo DestGridInfo, enum DestAttachPos, Actor* DestParentActor, int DestContainerIndex, SGInventory* MergeInventory);// 0x3c70e3fee041
	void SortContainerByStandardPrice(SGInventory* ContainerInventory, int ContainerIndex, out <Actor*,ItemGridInfo> OutSortedActorPosInfo, out Actor*[] OutDiscardedActorList, out Actor*[] InNewTryAddActorList);// 0x3c6fe3fee041
	void SetLastPlayerMoveInventoryResult(enum ResultCode, uint64 ExtraItemIDParam, SGInventory* CurInventory);// 0x3c6ee3fee041
	void SetInventoryStartGridPositionInfo(SGInventory* TargetInv, out const ItemGridInfo PositionInfo);// 0x3c6de3fee041
	void SetInventoryParentActor(SGInventory* TargetInv, Actor* InParentActor, int InContainerIndex);// 0x3c6ce3fee041
	void SetInventoryIsRotatedInfo(SGInventory* TargetInv, const bool RotatedState);// 0x3c6be3fee041
	void SetInventoryAttachPosition(SGInventory* TargetInv, enum NewAttachPosition);// 0x3c6ae3fee041
	bool SetContainerRollUpState(SGInventory* Container, bool bIsNewRolledUp, bool bIsUnfoldAutoFindPos);// 0x3c69e3fee041
	void ServerThrowItem(SGInventory* TargetInv, bool bForceDestory);// 0x3c68e3fee041
	void ServerSplitInventory(SGInventory* InInventory, int SplitCount, const ItemGridInfo DestGridInfo, enum DestAttachPos, Actor* DestParentActor, int DestContainerIndex, SGInventory* MergeInventory);// 0x3c67e3fee041
	void ServerSetInventoryIsRotatedInfo(SGInventory* TargetInv, const bool RotatedState);// 0x3c66e3fee041
	void ServerSetContainerRollUpState(SGInventory* Container, bool bIsNewRolledUp, bool bIsUnfoldAutoFindPos);// 0x3c65e3fee041
	void ServerReplaceEquippedInventory(SGInventory* FromInventory, SGInventory* ToInventory, bool bIsForceDropConflictedInv);// 0x3c64e3fee041
	void ServerPlayerTrySetWeaponFoldStockState(SGInventory* WeaponInv, bool newFoldStockState);// 0x3c63e3fee041
	void ServerPlayerSwitchFunctionDisabled(SGInventory* TargetInv, bool newIsFunctionDisabled);// 0x3c62e3fee041
	void ServerPlayerMoveInventory(SGInventory* TargetInv, SGCharacter* ToCharacter, Actor* InParentActor, enum Pos, ItemGridInfo DropPosition, int InContainerIndex, enum OccypyHandleOption, enum ExtraOper, bool isDetachConflicted);// 0x3c61e3fee041
	void ServerMoveInventoryToCorpseBagOrDrop(Character* CorpseCharacter, SGInventory* Inventory, bool bToReachable);// 0x3c60e3fee041
	void ServerMoveInventoryToBagOrDrop(SGInventory* Inventory, bool bToReachable);// 0x3c5fe3fee041
	void ServerMergeInventory(SGInventory* DestInventory, SGInventory* SourceInventory);// 0x3c5ee3fee041
	void ServerLockInventorysInContainer(const SGInventory*[] InventoriesToLock, enum LockType);// 0x3c5de3fee041
	void ServerDiscardAllInventory();// 0x3c5ce3fee041
	void ServerDestoryAllInventory();// 0x3c5be3fee041
	bool RemoveInventoryAndChildren(SGInventory* InvToRemove);// 0x3c5ae3fee041
	bool RemoveInventory(SGInventory* InvToRemove);// 0x3c59e3fee041
	void PreDied(Controller* Killer, DamageEventObject* DamageEventObject, out bool bWantToDie);// 0x3c58e3fee041
	void OnInventoryMoved(SGInventory* Inventory, out const InventoryGridInfo OldGridInfo, out const InventoryGridInfo NewGridInfo);// 0x3c57e3fee041
	void NotifyUseActorFailureReason(Actor* UseActor, enum FailureReason);// 0x3c56e3fee041
	void MoveInventoryToCorpseBagOrDrop(Character* CorpseCharacter, SGInventory* Inventory, bool bToReachable);// 0x3c55e3fee041
	void MoveInventoryToBagOrDrop(SGInventory* Inventory, bool bToReachable, bool isNoTriggerSetup);// 0x3c54e3fee041
	void MergeInventory(SGInventory* DestInventory, SGInventory* SourceInventory);// 0x3c53e3fee041
	bool GridPreOccupyAccurate_End(SGInventory* OccupyKeyInventory, out SGInventory* OutContainerInventory, out int OutContainerIndex, out SGGridOccupyInfo OutGridOccupiedInfo);// 0x3c52e3fee041
	bool GridPreOccupyAccurate_Begin(SGInventory* OccupyKeyInventory, out SGGlobalGridOccupyInfo GlobalGridOccupiedInfo);// 0x3c51e3fee041
	void GridPreOccupy_End(SGInventory* OccupyKeyInventory);// 0x3c50e3fee041
	SGInventory* GetParentActorByAttachPosition(out const enum NewAttachPosition);// 0x3c4fe3fee041
	SGInventory* FindInventory(class SGInventory InvClass);// 0x3c4ee3fee041
	void DiscardInventory(SGInventory* Inv, int Count, bool bNoCheck, Vector ExtraVelocity, bool bForceDestory);// 0x3c4de3fee041
	void DiscardAllInventory();// 0x3c4ce3fee041
	void DestoryAllInventory();// 0x3c4be3fee041
	void ClientReceivePlayerMoveInventoryResult(enum ResultCode, uint64 ExtraItemIDParam, SGInventory* CurInventory);// 0x3c4ae3fee041
	void ClientNotifyUseActorFailureReason(Actor* UseActor, enum FailureReason);// 0x3c49e3fee041
	bool CanThrowItem(SGInventory* TargetInv);// 0x3c48e3fee041
	bool CanRemove(SGInventory* Inv);// 0x3c47e3fee041
	bool CanDetachItem(SGInventory* TargetInv);// 0x3c46e3fee041
	void AutoFindDropPosAroundClickPos(SGInventory* TargetInv, SGInventory* InParentInv, int InContainerIndex, out ItemGridInfo InOriginClickSize, out ItemGridInfo InClickPos, out ItemGridInfo InNewSize, SGInventory* IngoreInventory, SGInventory* IngoreInventory2);// 0x3c45e3fee041
	bool AddInventoryToBag(SGInventory* Inventory, bool bToReachable, bool bIsCheckRoughSearch, bool bIsNoTips, bool isNoTriggerSetup);// 0x3c44e3fee041
	bool AddInventoryAndChildren(SGInventory* InvToAdd);// 0x3c43e3fee041
	bool AddInventory(SGInventory* InvToAdd);// 0x3c42e3fee041

--------------------------------
Class: PreOccupiedContainerList
	SGInventory*[] ContainerInvList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SGGridOccupyInfo
	int StartRow;//[Offset: 0x0, Size: 0x4]
	int StartColumn;//[Offset: 0x4, Size: 0x4]
	int EndRow;//[Offset: 0x8, Size: 0x4]
	int EndColumn;//[Offset: 0xc, Size: 0x4]
	SGInventory* MergeTargetInventory;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SGGlobalGridOccupyInfo
	SGInventory* ContainerInventory;//[Offset: 0x0, Size: 0x8]
	int ContainerIndex;//[Offset: 0x8, Size: 0x4]
	SGGridOccupyInfo OccupyInfo;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: SGCharacterFreshWoundComponent.ActorComponent.Object
	float ChanceToTrigger_Bleed_When_Jump;//[Offset: 0xc0, Size: 0x4]
	float ChanceToTrigger_Bleed_When_Sprint;//[Offset: 0xc4, Size: 0x4]
	float PeriodToTrigger_Bleed_When_Sprint;//[Offset: 0xc8, Size: 0x4]
	void OnMovementModeChanged(byte PreviousMovementMode, byte PreviousCustomMode);// 0x3d12e3fee041
	void OnBleedAbilityCanceled(enum EnduranceType);// 0x3d11e3fee041

--------------------------------
Class: SGCharacterFragGrenadeEffectComponent.ActorComponent.Object
	MaterialInstance* OffensiveScreenEffectIns;//[Offset: 0xc0, Size: 0x8]
	ScreenEffectConfArray[] OffensiveScreenEffectConfArray;//[Offset: 0xc8, Size: 0x10]
	MaterialInstance* M67ScreenEffectIns;//[Offset: 0xd8, Size: 0x8]
	ScreenEffectConfArray[] M67ScreenEffectConfArray;//[Offset: 0xe0, Size: 0x10]
	SGThrowableProjectile* FragProjectile;//[Offset: 0xf8, Size: 0x8]
	PostProcessVolume* PPV;//[Offset: 0x100, Size: 0x8]
	bool bDizzyByGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	bool bApplyDizzyDuringDizzy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1]
	Actor* LastDizzyByGrenade;//[Offset: 0x118, Size: 0x8]
	class GameplayEffect* FlashPersistentenceVisionClass;//[Offset: 0x128, Size: 0x8]

--------------------------------
Class: ScreenEffectConfArray
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	bool ApplyCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float DefaultValue;//[Offset: 0xc, Size: 0x4]
	CurveFloat* Curve;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SGCharacterFootEffectComponent.ActorComponent.Object
	<byte,SoundInfluenceFactor> PhysicalSurfaceInfluenceFactorConfig;//[Offset: 0xc8, Size: 0x50]
	SoundIndicator* SoundIndicator;//[Offset: 0x118, Size: 0x8]
	bool EnableFootstepSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	<byte,FString> FootAudioSwitch;//[Offset: 0x128, Size: 0x50]
	byte[] FootSmokeList;//[Offset: 0x178, Size: 0x10]
	<FString,FootAudioSettings> FootAudioSettings;//[Offset: 0x188, Size: 0x50]
	float BodyHeight;//[Offset: 0x1d8, Size: 0x4]
	float DefaultTimerInterval;//[Offset: 0x1dc, Size: 0x4]
	byte LadderPhysicalSurface;//[Offset: 0x1e0, Size: 0x1]
	<byte,float> CharSpeedSwitch;//[Offset: 0x1e8, Size: 0x50]
	ParticleSystem* InteractiveWaterFootPS1;//[Offset: 0x238, Size: 0x8]
	ParticleSystem* InteractiveWaterFootPS2;//[Offset: 0x240, Size: 0x8]
	ParticleSystem* InteractiveWaterBodyPS;//[Offset: 0x248, Size: 0x8]
	ParticleSystem* InteractiveMudFootPS1;//[Offset: 0x250, Size: 0x8]
	ParticleSystem* InteractiveMudFootPS2;//[Offset: 0x258, Size: 0x8]
	float UpdateMaterialInterval;//[Offset: 0x260, Size: 0x4]
	float MatIntervalEnableDis;//[Offset: 0x264, Size: 0x4]
	float FootstepSpreadDis;//[Offset: 0x268, Size: 0x4]
	float SoundDiffusionLevelFactor;//[Offset: 0x26c, Size: 0x4]
	float SoundDiffusionMaxDistanceFactor;//[Offset: 0x270, Size: 0x4]
	SGCharacter* CachedCharacter;//[Offset: 0x2cc, Size: 0x8]
	SGCharacterSoundComponent* SoundComp;//[Offset: 0x2d4, Size: 0x8]
	void UpdateSoundStance();// 0x3d09e3fee041
	void UpdateFootstepMaterial();// 0x3d08e3fee041
	byte GetCurrentPhysicalPSurface();// 0x3d07e3fee041
	float GetCurrentCharSpeedScale();// 0x3d06e3fee041
	bool CanCreateFootstepSmoke();// 0x3d05e3fee041
	void BroadcastFootstepSound();// 0x3d04e3fee041

--------------------------------
Class: FootAudioSettings
	float FootstepInterval;//[Offset: 0x0, Size: 0x4]
	AkAudioEvent* FootstepAudioEvent;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SGCharacterFallComponent.ActorComponent.Object
	float MaxSafeFallSpeed;//[Offset: 0xc8, Size: 0x4]
	CurveFloat* FallingDamageCurve;//[Offset: 0xd0, Size: 0x8]
	class GameplayAbility* ContinuouslyJumpDampingClass;//[Offset: 0xd8, Size: 0x8]
	GameplayAbilitySpecHandle[] ContinuouslyJumpDampingSpecHandles;//[Offset: 0xe0, Size: 0x10]
	int ContinuouslyJumpMaxDampingTimes;//[Offset: 0xf0, Size: 0x4]
	float CancelContinuouslyJumpDampingDelayTime;//[Offset: 0xf4, Size: 0x4]
	void OnMovementModeChanged(byte PreviousMovementMode, byte PreviousCustomMode);// 0x3cf4e3fee041
	void Landed(out const HitResult Hit);// 0x3cf3e3fee041
	void ClientPlayLandedSound();// 0x3cf2e3fee041
	void CancelContinuouslyJumpDamping();// 0x3cf1e3fee041

--------------------------------
Class: SGCharacterDebugMovementComponent.ActorComponent.Object
	float SpeedUpScale;//[Offset: 0xc0, Size: 0x4]
	SGCharacterDebugMovementInfo DebugMovementData_Server;//[Offset: 0xc4, Size: 0x54]
	class GameplayAbility* DebugSpeedUpAbilityClass;//[Offset: 0x170, Size: 0x8]
	MontageTickCondition MontageTickCondition_Server;//[Offset: 0x180, Size: 0x28]
	CharacterAbilityDebugInfo CharacterAbilityInfo_Server;//[Offset: 0x1d0, Size: 0x50]
	SGServerMoveResult[] ServerMoveResultQueue;//[Offset: 0x280, Size: 0x10]
	SGClientMoveInfo[] ClientMoveInfoQueue;//[Offset: 0x290, Size: 0x10]
	int ServerMoveResultQueueSize;//[Offset: 0x2a0, Size: 0x4]
	int ClientMoveInfoQueueSize;//[Offset: 0x2a4, Size: 0x4]
	bool bDebugLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	void SetDebugMovementInfoEnabled(bool bEnabled);// 0x3c93e3fee041
	void ServerSetDebugMovementInfoEnabled(bool bEnabled);// 0x3c92e3fee041
	void ServerDebugMovementInfo();// 0x3c91e3fee041
	void ServerDebugMontageTickCondition();// 0x3c90e3fee041
	void ServerDebugAbilityInfo();// 0x3c8fe3fee041
	void OnRepDebugMovementInfo();// 0x3c8ee3fee041
	void DisableDebugMovementInfo();// 0x3c8de3fee041

--------------------------------
Class: SGCharacterDebugMovementInfo
	float MaxSpeed;//[Offset: 0x0, Size: 0x4]
	Vector Velocity;//[Offset: 0x4, Size: 0xc]
	Vector Acceleration;//[Offset: 0x10, Size: 0xc]
	Vector CharacterLocation;//[Offset: 0x1c, Size: 0xc]
	Rotator CharacterRotation;//[Offset: 0x28, Size: 0xc]
	float TotalWeaponMovementSpeedScale;//[Offset: 0x34, Size: 0x4]
	float ShootingSpeedScale;//[Offset: 0x38, Size: 0x4]
	float ReloadMovingScale;//[Offset: 0x3c, Size: 0x4]
	float ADSZoomMovingScale;//[Offset: 0x40, Size: 0x4]
	float MovementAbilitySpeedScale;//[Offset: 0x44, Size: 0x4]
	float OverweightMovingScale;//[Offset: 0x48, Size: 0x4]
	float EquipmentMovingScale;//[Offset: 0x4c, Size: 0x4]
	bool IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	enum SprintFailureReason;//[Offset: 0x51, Size: 0x1]

--------------------------------
Class: MontageTickCondition
	bool bShouldTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	FString AnimScriptInstanceName;//[Offset: 0x8, Size: 0x10]
	FString VisibilityBasedAnimTickOptionName;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: CharacterAbilityDebugInfo
	FString[] ActiveAbiltiyNameList;//[Offset: 0x0, Size: 0x10]
	FString[] ActiveGameEffectNameList;//[Offset: 0x10, Size: 0x10]
	FString[] OwnedTagsList;//[Offset: 0x20, Size: 0x10]
	FString[] BlockedTagsStringList;//[Offset: 0x30, Size: 0x10]
	FString[] MinimalTagsList;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SGServerMoveResult
	float ClientTimeStamp;//[Offset: 0x0, Size: 0x4]
	float DeltaTime;//[Offset: 0x4, Size: 0x4]
	enum MoveResultType;//[Offset: 0x8, Size: 0x1]
	int MoveType;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SGClientMoveInfo
	float ClientTimeStamp;//[Offset: 0x0, Size: 0x4]
	float DeltaTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SGCharacterBoneBreakComponent.ActorComponent.Object
	float DamageWhenJump;//[Offset: 0xc0, Size: 0x4]
	float DamageWhenSprint;//[Offset: 0xc4, Size: 0x4]
	float TakeDamageWhenSprintPeriod;//[Offset: 0xc8, Size: 0x4]
	void OnMovementModeChanged(byte PreviousMovementMode, byte PreviousCustomMode);// 0x3c1ae3fee041

--------------------------------
Class: SGCharacterArmorManagerComponent.ActorComponent.Object
	delegate ArmorEvent;//[Offset: 0xc8, Size: 0x10]
	<enum,Color> PointsColorMap;//[Offset: 0xe0, Size: 0x50]
	float PointsDrawDensity;//[Offset: 0x130, Size: 0x4]
	float OutlineOffset;//[Offset: 0x134, Size: 0x4]
	float DrawSocketSphereRadius;//[Offset: 0x138, Size: 0x4]
	bool bDrawSocketsInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]
	bool bDrawColorSamples;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 0x1]
	class UserWidget* DebugPanelClass;//[Offset: 0x140, Size: 0x8]
	float HeadSubgroupTextScale;//[Offset: 0x148, Size: 0x4]
	SGConfigUtil* Config;//[Offset: 0x150, Size: 0x8]
	class SGConfigUtil* ConfigClass;//[Offset: 0x158, Size: 0x8]
	UserWidget* HeadSubgroupDebugPanel;//[Offset: 0x170, Size: 0x8]
	<SGInventory*,Actor*> CachedArmorDamageCauserMap;//[Offset: 0x188, Size: 0x50]
	<SGInventory*,float> LastArmorDamageMap;//[Offset: 0x1d8, Size: 0x50]
	float GasMaskDurabilityReduceInterval;//[Offset: 0x228, Size: 0x4]
	float GasMaskDurabilityReduceValue;//[Offset: 0x22c, Size: 0x4]
	int SeedForPenetrateArmor;//[Offset: 0x238, Size: 0x4]
	SGInventory*[] ArmorList;//[Offset: 0x240, Size: 0x10]
	SGInventory*[] ProtectiveArmorList;//[Offset: 0x250, Size: 0x10]
	Object* StaticHeadwearScreenEffectPtr;//[Offset: 0x280, Size: 0x28]
	Object* MaterialHeadwearScreenEffectPtr;//[Offset: 0x2a8, Size: 0x28]
	SGInventory* ScreenEffectOwner;//[Offset: 0x2d0, Size: 0x8]
	<byte,SGInventory*> ArmorListStateCacheMapFor1P;//[Offset: 0x2d8, Size: 0x50]
	bool bDebugArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	HeadSubGroupInfo[] HeadSubGroupInfos;//[Offset: 0x338, Size: 0x10]
	void SetScreenEffectOwner(SGInventory* NewOwner);// 0x3beae3fee041
	bool RemoveInventory(SGInventory* Inv);// 0x3be9e3fee041
	bool RemoveArmor(SGInventory* Inv);// 0x3be8e3fee041
	void OnStopSpectatedByController(PlayerController* SpectatingController);// 0x3be7e3fee041
	void OnStartSpectatedByController(PlayerController* SpectatingController);// 0x3be6e3fee041
	void OnSetNewOwner(Actor* Owner);// 0x3be5e3fee041
	void OnRep_ArmorList();// 0x3be4e3fee041
	void OnPlayHeadwearUIAnimation(SGInventory* HelmetInv, SGInventory* HeadwearInv, bool bTurnOff, float AnimLength);// 0x3be3e3fee041
	void OnInventoryMoved(SGInventory* Inventory, out const InventoryGridInfo OldGridInfo, out const InventoryGridInfo NewGridInfo);// 0x3be2e3fee041
	void OnInventoryDisassembled(SGInventory* ChildInv);// 0x3be1e3fee041
	void OnInventoryAssembled(SGInventory* ChildInv);// 0x3be0e3fee041
	void OnHeadwearScreenEffectLoadCompleted();// 0x3bdfe3fee041
	void OnEquipChanged();// 0x3bdee3fee041
	void OnCharacterTriggerTearGasArea(bool bEnter);// 0x3bdde3fee041
	void OnCharacterRemoveInventoryEvent(Character* Character, SGInventory* Inventory);// 0x3bdce3fee041
	void OnCharacterPreDie(Controller* Killer, DamageEventObject* DamageEventObject, out bool bWantToDie);// 0x3bdbe3fee041
	void OnCharacterAddInventoryEvent(Character* Character, SGInventory* Inventory);// 0x3bdae3fee041
	void OnCarriedFaceShieldActivated(SGInventory* FaceShield, bool bActive);// 0x3bd9e3fee041
	SGInventory* GetVest();// 0x3bd8e3fee041
	bool GetRandomHeadProtectedSubGroup(out enum OutHitSubGroupType);// 0x3bd7e3fee041
	SGInventory* GetHelmet();// 0x3bd6e3fee041
	SGInventory* GetHeadset();// 0x3bd5e3fee041
	enum GetHeadHitSubGroup(out const HitResult HitInfo);// 0x3bd4e3fee041
	float GetHeadArmor();// 0x3bd3e3fee041
	SGInventory* GetFaceShield();// 0x3bd2e3fee041
	SGInventory* GetFaceCover();// 0x3bd1e3fee041
	SGInventory* GetEyeWear();// 0x3bd0e3fee041
	float GetDurabilityPercentage(SGInventory* Inv);// 0x3bcfe3fee041
	float GetDestructibility(SGInventory* Inv);// 0x3bcee3fee041
	float GetBulletBlockScale(SGInventory* Inv);// 0x3bcde3fee041
	SGInventory* GetBackPack();// 0x3bcce3fee041
	float GetAntiPenetrationFactor(SGInventory* Inv);// 0x3bcbe3fee041
	SGInventory* GetAdapter();// 0x3bcae3fee041
	void GasMaskDurabilityReduce();// 0x3bc9e3fee041
	bool AddInventory(SGInventory* Inv);// 0x3bc8e3fee041
	bool AddArmor(SGInventory* Inv);// 0x3bc7e3fee041

--------------------------------
Class: SGConfigUtil.Object

--------------------------------
Class: HeadSubGroupInfo
	FName SocketName;//[Offset: 0x0, Size: 0x8]
	enum HeadHitSubGroupType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SGCharacterBulletPassComponent.ActorComponent.Object
	float SenseRadius;//[Offset: 0xc0, Size: 0x4]
	float MinDistanceToSense;//[Offset: 0xc4, Size: 0x4]
	BulletPassStructDeprecated[] BulletPassInfoList;//[Offset: 0xc8, Size: 0x10]
	BulletPassStructDeprecated CurrentNotifyBulletInfo;//[Offset: 0xd8, Size: 0x34]
	void OnRep_NotifyBulletInfoChanged();// 0x3c1ce3fee041
	void ClientPlayBulletPassEffect(float PassVelocity, Vector PassDir, Vector BulletPassLocation, Character* SourceChar, float BulletFlyAngle);// 0x3c1be3fee041

--------------------------------
Class: BulletPassStructDeprecated
	float Velocity;//[Offset: 0x0, Size: 0x4]
	Vector PassDir;//[Offset: 0x4, Size: 0xc]
	Vector PassLocation;//[Offset: 0x10, Size: 0xc]
	float BulletPassAngle;//[Offset: 0x1c, Size: 0x4]
	float TimeToReach;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SGCharacterAvatarMergeComponent.ActorComponent.Object
	SkeletalMeshComponent* MergedSkeletalMeshComponent;//[Offset: 0xc8, Size: 0x8]
	bool bCanEverMerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	int MaxMergedMaterialCount;//[Offset: 0xdc, Size: 0x4]
	int MaxMergedMeshCount;//[Offset: 0xe0, Size: 0x4]
	FString[] MeshSortNameList;//[Offset: 0xe8, Size: 0x10]
	FString[] NecessaryNameList;//[Offset: 0xf8, Size: 0x10]
	FString[] MergedMeshNameList;//[Offset: 0x108, Size: 0x10]
	SkeletalMeshMergeParams MergedSkeletalMeshParams;//[Offset: 0x118, Size: 0x78]
	SGSkeletalMeshMerge* SkeletalMeshMerger;//[Offset: 0x190, Size: 0x8]
	Texture2D* MergedDiffuseTexture;//[Offset: 0x198, Size: 0x8]
	Texture2D* MergedMetalAOTexture;//[Offset: 0x1a0, Size: 0x8]
	Texture2D* MergedNormalRoughnessTexture;//[Offset: 0x1a8, Size: 0x8]
	MaterialInterface* CommonParentMaterial;//[Offset: 0x1c0, Size: 0x8]
	FString[] SavedToMergeDiffuseTextureListName;//[Offset: 0x1c8, Size: 0x10]
	FString[] BlockMergeMeshNameList;//[Offset: 0x1d8, Size: 0x10]
	SkeletalMeshMergeParams SavedMergeParams;//[Offset: 0x1e8, Size: 0x78]
	Texture2D*[] ToMergeDiffuseTextureList;//[Offset: 0x270, Size: 0x10]
	Texture2D*[] ToMergeMetalAOTextureList;//[Offset: 0x280, Size: 0x10]
	Texture2D*[] ToMergeNormalRoughnessTextureList;//[Offset: 0x290, Size: 0x10]
	void OnGraphicsQualityLevelChenged(byte InQuality);// 0x3772e3fee041
	void OnCharacterAvatarMeshLoaded(MeshComponent* LoadedMeshComp);// 0x3771e3fee041
	void OnCharacterAvatarListChanged(bool bServerAvatar);// 0x3770e3fee041
	void OnCharacterAllAvatarMeshLoaded(int AvatarCount);// 0x376fe3fee041
	void OnAvatarRemoved(SGInventory* RemovedInv);// 0x376ee3fee041

--------------------------------
Class: SGSkeletalMeshMerge.Object
	SkeletalMesh* CachedMergedSkeletalMesh;//[Offset: 0x28, Size: 0x8]
	SGCharacterAvatarMergeComponent* CachedAvatarMergeComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: SGCharacterAvatarManagerComponent.ActorComponent.Object
	SGInventory* AvatarList;//[Offset: 0xc0, Size: 0x8]
	SGInventory*[] BadgeList;//[Offset: 0x128, Size: 0x10]
	SGInventory* WearBadgeList;//[Offset: 0x138, Size: 0x8]
	bool bEnableAvatarFallback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x162, Size: 0x1]
	class SGInventory[] DefaultAvatarInventories;//[Offset: 0x168, Size: 0x10]
	class SGInventory[] PmcAvatarInventories;//[Offset: 0x178, Size: 0x10]
	class SGInventory[] ScavAvatarInventories;//[Offset: 0x188, Size: 0x10]
	class SGInventory[] CachedAvatarInventories;//[Offset: 0x198, Size: 0x10]
	int64[] ServerAvatarIDList;//[Offset: 0x1a8, Size: 0x10]
	class SGInventory[] ServerAvatarInventories;//[Offset: 0x1b8, Size: 0x10]
	int64[] AvatarIDListFromConsole;//[Offset: 0x1c8, Size: 0x10]
	class SGInventory[] AvatarInventoriesFromConsole;//[Offset: 0x1d8, Size: 0x10]
	int MaxPreloadAvatarNum;//[Offset: 0x1e8, Size: 0x4]
	<class SGInventory,AvatarPreloadAsset> PreloadAvatarCaches;//[Offset: 0x1f0, Size: 0x50]
	class SGInventory* TestPendingAvatarClass;//[Offset: 0x240, Size: 0x8]
	int LoadingPreloadAvatarNum;//[Offset: 0x248, Size: 0x4]
	enum PreloadCharacterSex;//[Offset: 0x24c, Size: 0x1]
	int64[] WaitPreloadAvatarCaches;//[Offset: 0x250, Size: 0x10]
	void SetCharacterType(enum InCharacterType);// 0x3c18e3fee041
	bool RemoveInventory(SGInventory* Inv);// 0x3c17e3fee041
	bool RemoveBadge(SGInventory* Inv);// 0x3c16e3fee041
	bool RemoveAvatar(SGInventory* Inv);// 0x3c15e3fee041
	void PreloadAvatars(int64[] AvatarIds, enum CharacterSex);// 0x3c14e3fee041
	void PreloadAvatar(class SGInventory AvatarInventoryClass, SGInventoryEquipMeshComponent* EquipMeshComponent, out SkeletalMesh* SkeletalMesh, enum CharacterSex);// 0x3c13e3fee041
	void OnLoadCompleted_PreloadAvatar(SoftObjectPath Path, class SGInventory AvatarInventoryClass, bool bSkeletalMesh, enum CharacterSex);// 0x3c12e3fee041
	void OnCharacterRemoveInventoryEvent(Character* Character, SGInventory* Inventory);// 0x3c11e3fee041
	void OnCharacterAddInventoryEvent(Character* Character, SGInventory* Inventory);// 0x3c10e3fee041
	void OnBeginGameInit();// 0x3c0fe3fee041
	bool IsAvatarsLoaded();// 0x3c0ee3fee041
	SGInventory* GetTorso();// 0x3c0de3fee041
	SGInventory* GetShoes();// 0x3c0ce3fee041
	SGInventory* GetPants();// 0x3c0be3fee041
	SGInventory* GetLegs();// 0x3c0ae3fee041
	SGInventory* GetJacket();// 0x3c09e3fee041
	SGInventory* GetHeadMask();// 0x3c08e3fee041
	SGInventory* GetHead();// 0x3c07e3fee041
	SGInventory* GetHair();// 0x3c06e3fee041
	SGInventory* GetGloves();// 0x3c05e3fee041
	SGInventory* GetGlass();// 0x3c04e3fee041
	SGInventory* GetCoat();// 0x3c03e3fee041
	void ClearPreloadAvatars();// 0x3c02e3fee041
	bool AddInventory(SGInventory* Inv);// 0x3c01e3fee041
	bool AddBadge(SGInventory* Inv);// 0x3c00e3fee041
	bool AddAvatar(SGInventory* Inv);// 0x3bffe3fee041

--------------------------------
Class: AvatarPreloadAsset
	bool bStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	StreamableRenderAsset* StaticAsset;//[Offset: 0x8, Size: 0x8]
	StreamableRenderAsset* MaleAsset;//[Offset: 0x10, Size: 0x8]
	StreamableRenderAsset* FemaleAsset;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SGCharacterAvatarComponent.ActorComponent.Object
	MaterialParameterCollection* SkinTypeParamCollection;//[Offset: 0xc8, Size: 0x8]
	SGInventory* CachedPackBag;//[Offset: 0xd0, Size: 0x8]
	SGInventory* CachedVestBag;//[Offset: 0xd8, Size: 0x8]
	SGInventory* CachedEyeWear;//[Offset: 0xe0, Size: 0x8]
	SGInventory* CachedPocket;//[Offset: 0xe8, Size: 0x8]
	Actor*[] WearableInventoryList;//[Offset: 0xf8, Size: 0x10]
	SGInventoryEquipMeshComponent* BodyMesh;//[Offset: 0x110, Size: 0x8]
	SGInventoryEquipMeshComponent* AvatarMergedMesh;//[Offset: 0x118, Size: 0x8]
	MeshComponent* BagMeshInst;//[Offset: 0x120, Size: 0x8]
	SGInventoryEquipMeshComponent* BagWearableComponent;//[Offset: 0x128, Size: 0x8]
	LightingChannels MeshLightChannels;//[Offset: 0x130, Size: 0x1]
	bool bForceCastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132, Size: 0x1]
	bool bForceUse1PTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x133, Size: 0x1]
	enum[] ArmorForceHiddenList;//[Offset: 0x138, Size: 0x10]
	SGInventoryEquipMeshComponent*[] DressedWearableComponents;//[Offset: 0x148, Size: 0x10]
	bool bEnableUse1PTextureBasedOnDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	void UpdateSkin();// 0x3bfee3fee041
	void UpdateLayers();// 0x3bfde3fee041
	void UpdateAvatarFPPStateInner(bool bFPPMode);// 0x3bfce3fee041
	void UpdateAvatarFPPState();// 0x3bfbe3fee041
	void OnSwitchFPPEvent(bool bFPPMode);// 0x3bfae3fee041
	void OnStopSpectatedByController(PlayerController* PC);// 0x3bf9e3fee041
	void OnStartSpectatedByController(PlayerController* PC);// 0x3bf8e3fee041
	void OnShowMergedAvatar(SkeletalMeshComponent* MergedMeshComp, bool bShow);// 0x3bf7e3fee041
	void OnSetNewOwner(Actor* NewOwner);// 0x3bf6e3fee041
	void OnGetViewedByController(PlayerController* PC);// 0x3bf5e3fee041
	void OnEquipStaticMeshLoadCompleted(StaticMeshComponent* LoadedStaticMeshComponent);// 0x3bf4e3fee041
	void OnEquipSkeletalMeshLoadCompleted(SkeletalMeshComponent* LoadedSkeletalMeshComponent);// 0x3bf3e3fee041
	void OnCharacterSexChanged(enum CharacterSex);// 0x3bf2e3fee041
	void OnCharacterAvatarMeshLoaded(MeshComponent* MeshComp);// 0x3bf1e3fee041
	void OnAvatarUndressed(out const WearableMesh TargetMesh);// 0x3bf0e3fee041
	void OnAvatarDressed(out const WearableMesh TargetMesh);// 0x3befe3fee041
	void HideAvatar(enum avatarType, bool bHide);// 0x3beee3fee041
	SGInventoryEquipMeshComponent*[] GetLayeredWearableMeshComponents(int LayerIndex, bool IncludeUnder);// 0x3bede3fee041
	void ForceSetAvatarFPPState(bool bFPPMode);// 0x3bece3fee041
	void DeferredUpdateLayers();// 0x3bebe3fee041

--------------------------------
Class: SGCharacterAnimationComponent.ActorComponent.Object
	float BSAnimNormalizedSpeed;//[Offset: 0xc0, Size: 0x4]
	float BSAnimPlayingRate;//[Offset: 0xc4, Size: 0x4]
	bool bLastFiringState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	float ToRestIdleTime;//[Offset: 0xcc, Size: 0x4]
	float PlayRestAnimTime;//[Offset: 0xd0, Size: 0x4]
	Vector FPPRunJumpOffset;//[Offset: 0xd4, Size: 0xc]
	Vector SwitchStanceOffset;//[Offset: 0xe0, Size: 0xc]
	FName JumpDistanceWeightCurveName;//[Offset: 0xec, Size: 0x8]
	FName SwitchStanceCurveName;//[Offset: 0xf4, Size: 0x8]
	FName DistanceCurveName;//[Offset: 0xfc, Size: 0x8]
	bool bEnableDebugDrawDistanceCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	FString CustomizeSequenceName;//[Offset: 0x108, Size: 0x10]
	FString FacialSequenceName;//[Offset: 0x118, Size: 0x10]
	AnimSequence* DTCustomizeSequence;//[Offset: 0x128, Size: 0x8]
	AnimSequence* DTFacialSequence;//[Offset: 0x130, Size: 0x8]
	<AnimSequence*> BaseForeCharacterGrips;//[Offset: 0x138, Size: 0x50]
	bool bShouldHandleNetTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	bool bShouldCacheForeGripOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 0x1]
	bool bRestMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18a, Size: 0x1]
	class AnimInstance* TestFirstPersonAnimInstanceClass;//[Offset: 0x190, Size: 0x8]
	class AnimInstance* TestThirdPersonAnimInstanceClass;//[Offset: 0x198, Size: 0x8]
	class AnimInstance* FirstPersonAnimInstanceClass;//[Offset: 0x1a0, Size: 0x8]
	class AnimInstance* ThirdPersonAnimInstanceClass;//[Offset: 0x1a8, Size: 0x8]
	class AnimInstance* FirstPersonAnimInstanceClass_Fallback;//[Offset: 0x1b0, Size: 0x8]
	class AnimInstance* ThirdPersonAnimInstanceClass_Fallback;//[Offset: 0x1b8, Size: 0x8]
	FString CustomizeMontageName;//[Offset: 0x1c0, Size: 0x10]
	FName CustomizeMontageSectionName;//[Offset: 0x1d0, Size: 0x8]
	FString FacialMontageName;//[Offset: 0x1d8, Size: 0x10]
	FName FacialMontageSectionName;//[Offset: 0x1e8, Size: 0x8]
	class SGCharacterFacialAnimationSets* CharacterFacialAnimationSetsClass;//[Offset: 0x1f8, Size: 0x8]
	class SGCharacterDeathAnimationSets* DeathAnimationSetClass;//[Offset: 0x200, Size: 0x8]
	SkeletalMeshComponent* InventorySkeletalMeshComponent;//[Offset: 0x208, Size: 0x8]
	SGUsingInventoryRepAnimInfo UsingInventoryInfo;//[Offset: 0x210, Size: 0x38]
	SGWeapon* CacheWeapon;//[Offset: 0x250, Size: 0x8]
	void UpdateDTAnimSequences();// 0x3b95e3fee041
	void UpdateCustomizeAnimation();// 0x3b94e3fee041
	void StopUsingInventoryAnimation(AnimMontage* CharacterMontage, float Rate);// 0x3b93e3fee041
	void StopCharacterAnimation(AnimMontage* MontagePlaying, float BlendOutTime);// 0x3b92e3fee041
	void StopAllCharacterAnimations(FName InGroupName, float BlendOutTime);// 0x3b91e3fee041
	bool ShouldUseCustomLocomotion();// 0x3b90e3fee041
	bool ShouldUseAO();// 0x3b8fe3fee041
	void SetAnimInstanceClass(class AnimInstance FirstAnimInstClass, class AnimInstance ThirdAnimInstClass);// 0x3b8ee3fee041
	void ServerPlayAnimOnAllClient(AnimMontage* MontageToPlay, FName SectionName, float RateOverride, float StartTime);// 0x3b8de3fee041
	void PlayUsingInventoryAnimation(AnimMontage* CharacterMontage, AnimMontage* InventoryMontage, SkeletalMesh* InventoryMesh, float Rate, FName StartSection, FName AttachSocket);// 0x3b8ce3fee041
	void PlayInventoryAccessoryAnimation(AnimMontage* InventoryMontage, SkeletalMesh* InventoryMesh, float Rate, FName Section, FName AttachSocket);// 0x3b8be3fee041
	float PlayCharacterAnimation(AnimMontage* MontageToPlay, FName SectionName, float RateOverride, float StartTime, bool bReplayWhileIsPlaying, bool bStopAllMontages);// 0x3b8ae3fee041
	void PlayAnimOnAllClent(AnimMontage* MontageToPlay, FName SectionName, float RateOverride, float StartTime);// 0x3b89e3fee041
	void OnUsingInventoryMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x3b88e3fee041
	void OnUsingInventoryAnimationEnded();// 0x3b87e3fee041
	void OnSwitchFPPEvent(bool bFPP);// 0x3b86e3fee041
	void OnSetCurrentWeapon(SGInventory* Weapon);// 0x3b85e3fee041
	void OnRep_UsingInventoryInfo();// 0x3b84e3fee041
	void OnPossessedByController(Controller* PC);// 0x3b83e3fee041
	void OnCurrentWeaponAnimationSetLoaded(SGWeapon* TargetWeapon, bool bLoadedOrUnloaded);// 0x3b82e3fee041
	void OnCharacterSexChanged(enum CharacterSex);// 0x3b81e3fee041
	void OnCharacterAvatarMeshLoaded(MeshComponent* LoadedMeshComp);// 0x3b80e3fee041
	void OnAvatarAdded(SGInventory* AvatarInv);// 0x3b7fe3fee041
	void MulticastStopCustomAnimation();// 0x3b7ee3fee041
	void MulticastStopCharacterAnimation(AnimMontage* MontagePlaying, float BlendOutTime);// 0x3b7de3fee041
	void MulticastPlayCustomAnimation(const FString InCustomizeMontageName, const FName InCustomizeMontageSectionName);// 0x3b7ce3fee041
	void MulticastPlayCharacterAnimation(AnimMontage* MontageToPlay, FName SectionName, float RateOverride, float StartTime);// 0x3b7be3fee041
	bool IsPlayingSlotAnimation(FName SlotName);// 0x3b7ae3fee041
	bool IsPlayingFacialAnimation();// 0x3b79e3fee041
	bool IsInTransitionAnim();// 0x3b78e3fee041
	bool IsForbiddenFireAnim();// 0x3b77e3fee041
	void Internal_StopCharacterAnimation(AnimInstance* LocalAnimInstance, AnimMontage* MontagePlaying, float BlendOutTime);// 0x3b76e3fee041
	void Internal_StopAllCharacterAnimations(AnimInstance* LocalAnimInstance, FName InGroupName, float BlendOutTime);// 0x3b75e3fee041
	void Internal_PlayCharacterAnimation(AnimInstance* LocalAnimInstance, AnimMontage* MontageToPlay, FName SectionName, out float CurrentPosition, float RateOverride, float StartTime, bool bReplayWhileIsPlaying, bool bStopAllMontages);// 0x3b74e3fee041
	void Internal_CharacterAnimationJumpToSection(AnimInstance* LocalAnimInstance, AnimMontage* MontagePlaying, FName SectionName);// 0x3b73e3fee041
	Vector GetScalableCameraTranslationOffset();// 0x3b72e3fee041
	Rotator GetScalableCameraRotationOffset();// 0x3b71e3fee041
	bool GetRootmotionRedirector(out Rotator Redirector);// 0x3b70e3fee041
	bool GetHandRightHandGrip();// 0x3b6fe3fee041
	AnimSequence* GetFacialAnimationSequence(FString AniamtionName);// 0x3b6ee3fee041
	AnimMontage* GetFacialAnimation(FString AniamtionName);// 0x3b6de3fee041
	AnimMontage* GetDefaultDeathAnimation();// 0x3b6ce3fee041
	class SGCharacterDeathAnimationSets GetDeathAnimationSet();// 0x3b6be3fee041
	AnimMontage* GetDeathAnimation(enum DeathAnimationState, Vector Momentum, enum HitEndurance);// 0x3b6ae3fee041
	BlendSpace* GetCustomAnimationStandMoving();// 0x3b69e3fee041
	AnimSequence* GetCustomAnimationStandIdle();// 0x3b68e3fee041
	BlendSpace* GetCustomAnimationCrouchMoving();// 0x3b67e3fee041
	AnimSequence* GetCustomAnimationCrouchIdle();// 0x3b66e3fee041
	Rotator GetCameraRotationOffset();// 0x3b65e3fee041
	float GetCameraAnimatedRotationAlpha();// 0x3b64e3fee041
	float GetBSAnimPlayingRate();// 0x3b63e3fee041
	float GetBSAnimNomalizedSpeed();// 0x3b62e3fee041
	void DeferredUpdateCustomizeAnimation();// 0x3b61e3fee041
	void CharacterAnimationJumpToSection(AnimMontage* MontagePlaying, FName SectionName);// 0x3b60e3fee041

--------------------------------
Class: SGCharacterFacialAnimationSets.Object
	SGCharacterFacialAnimationSetsPerCharacterSex Male;//[Offset: 0x28, Size: 0xa0]
	SGCharacterFacialAnimationSetsPerCharacterSex Female;//[Offset: 0xc8, Size: 0xa0]
	<FString,AnimMontage*> FacialAnimations;//[Offset: 0x168, Size: 0x50]
	<FString,AnimSequence*> DTFacialAnimaSequences;//[Offset: 0x1b8, Size: 0x50]

--------------------------------
Class: SGCharacterFacialAnimationSetsPerCharacterSex
	<FString,AnimMontage*> FacialAnimations;//[Offset: 0x0, Size: 0x50]
	<FString,AnimSequence*> DTFacialAnimaSequences;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: SGCharacterDeathAnimationSets.Object
	SGUAMDeathAnimationSet DeathAnimationSet;//[Offset: 0x28, Size: 0x1a0]

--------------------------------
Class: SGUAMDeathAnimationSet
	SGUAMPerBodyPartDeathAnimationSet StandDeathSet;//[Offset: 0x0, Size: 0x68]
	SGUAMPerBodyPartDeathAnimationSet CrouchDeathSet;//[Offset: 0x68, Size: 0x68]
	SGUAMPerBodyPartDeathAnimationSet ProneDeathSet;//[Offset: 0xd0, Size: 0x68]
	SGUAMPerBodyPartDeathAnimationSet DBNODeathSet;//[Offset: 0x138, Size: 0x68]

--------------------------------
Class: SGUAMPerBodyPartDeathAnimationSet
	AnimMontage* DefaultAnimtion;//[Offset: 0x0, Size: 0x8]
	SGUAMPerDirectionDeathAnimationSet HitHeadDeathset;//[Offset: 0x8, Size: 0x20]
	SGUAMPerDirectionDeathAnimationSet HitBodyDeathset;//[Offset: 0x28, Size: 0x20]
	SGUAMPerDirectionDeathAnimationSet HitLegDeathset;//[Offset: 0x48, Size: 0x20]

--------------------------------
Class: SGUAMPerDirectionDeathAnimationSet
	AnimMontage* FrontHit;//[Offset: 0x0, Size: 0x8]
	AnimMontage* BackHit;//[Offset: 0x8, Size: 0x8]
	AnimMontage* LeftHit;//[Offset: 0x10, Size: 0x8]
	AnimMontage* RightHit;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SGUsingInventoryRepAnimInfo
	AnimMontage* CharacterMontage;//[Offset: 0x0, Size: 0x8]
	AnimMontage* InventoryMontage;//[Offset: 0x8, Size: 0x8]
	SkeletalMesh* InventoryMesh;//[Offset: 0x10, Size: 0x8]
	float Rate;//[Offset: 0x18, Size: 0x4]
	FName StartSection;//[Offset: 0x1c, Size: 0x8]
	FName AttachSocket;//[Offset: 0x24, Size: 0x8]
	float StartTimeStamp;//[Offset: 0x2c, Size: 0x4]
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SGCharacterAIPoseComponent.SGUAMCharacterPoseCacheComponent.ActorComponent.Object
	bool bIsCasual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	<enum,float> LeanHorizontalOffset;//[Offset: 0x140, Size: 0x50]
	PoseTransition[] PoseTransitions;//[Offset: 0x190, Size: 0x10]
	AnimMontage* CasualToStandMontage;//[Offset: 0x1a0, Size: 0x28]
	AnimMontage* StandToCasualMontage;//[Offset: 0x1c8, Size: 0x28]
	AnimMontage*[] CasualMontages;//[Offset: 0x1f0, Size: 0x10]
	bool bDisableDSPoseSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	SGCharacterLeanWallComponent* LeanComponent;//[Offset: 0x208, Size: 0x8]
	SGCharacterAIFireComponent* AIFireComponent;//[Offset: 0x210, Size: 0x8]
	NPCAIGlobalSharedInfo* ShareInfo;//[Offset: 0x218, Size: 0x8]
	SGUAMWeaponAnimationComponent* WeaponAnimationCompnent;//[Offset: 0x220, Size: 0x8]
	bool bSkipProneCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	void OnSprintChanged(Character* Character, bool bSprinting);// 0x3a27e3fee041
	void OnRep_IsCasual();// 0x3a26e3fee041
	void OnOwnerPoseChanged(enum NewPoseType);// 0x3a25e3fee041
	void OnLoadCompleted_TransitionAnim(SoftObjectPath Path);// 0x3a24e3fee041

--------------------------------
Class: PoseTransition
	enum FromPose;//[Offset: 0x0, Size: 0x1]
	enum ToPose;//[Offset: 0x1, Size: 0x1]
	enum TransitionState;//[Offset: 0x2, Size: 0x1]
	bool bForceStopMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: SGCharacterAIFireComponent.ActorComponent.Object
	int TotalHitCount;//[Offset: 0xc8, Size: 0x4]
	int TotalShotCount;//[Offset: 0xcc, Size: 0x4]
	float LastTimeFire;//[Offset: 0xd0, Size: 0x4]
	float LastTimeStopFire;//[Offset: 0xd4, Size: 0x4]
	float LastTimeHit;//[Offset: 0xd8, Size: 0x4]
	<enum,NPCFireBodyPartBoneNameMap> AIBodyPartBoneNameMap;//[Offset: 0xe0, Size: 0x50]
	float CheckHitTimeThreshold;//[Offset: 0x130, Size: 0x4]
	bool bIsInHitInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	bool IsWeaponCollapsedCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 0x1]
	float CheckWeaponCollapsedTime;//[Offset: 0x138, Size: 0x4]
	bool bEnableInstantBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]
	float PredestinedHitLastTime;//[Offset: 0x140, Size: 0x4]
	SGProjectile_InstantBullet* InstantBullet;//[Offset: 0x148, Size: 0x8]
	float BulletFireEffectReplicateInterval;//[Offset: 0x150, Size: 0x4]
	float BulletFireReplicateLastTime;//[Offset: 0x154, Size: 0x4]
	float LockAmmoCountAtPercentage;//[Offset: 0x158, Size: 0x4]
	bool bFireNextTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1]
	bool bPersistentFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 0x1]
	bool bInFiringState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e, Size: 0x1]
	float PersistentFireEndtime;//[Offset: 0x160, Size: 0x4]
	NPCAIFireSetting FireSetting;//[Offset: 0x168, Size: 0x28]
	SGCharacterBulletPassComponent* BulletPassComponent;//[Offset: 0x190, Size: 0x8]
	SGCharacterAIAimingComponent* AimingComponent;//[Offset: 0x198, Size: 0x8]
	SGCharacterAIRecoilComponent* AIRecoilComponent;//[Offset: 0x1a0, Size: 0x8]
	NPCAIMemorySystemComponent* AIMemoryComponent;//[Offset: 0x1a8, Size: 0x8]
	NPCAIZoneGroupInfo* ZoneGroupInfo;//[Offset: 0x1b0, Size: 0x8]
	NPCAIPropertyComponent_Shoot* ShootProps;//[Offset: 0x1b8, Size: 0x8]
	NPCAIPropertyComponent_Aiming* AimingProps;//[Offset: 0x1c0, Size: 0x8]

--------------------------------
Class: NPCFireBodyPartBoneNameMap
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIsSocketBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SGProjectile_InstantBullet.Object
	class Actor* AmmoClass;//[Offset: 0x70, Size: 0x8]
	Vector BulletInitFlyDir;//[Offset: 0x78, Size: 0xc]
	Vector BulletInitLocation;//[Offset: 0x84, Size: 0xc]
	bool IsPredestineHited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	SGBulletID BulletID;//[Offset: 0x98, Size: 0x10]
	bool bShouldDamageDynamicObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	SGPointDamageEvent PointDamageEvent;//[Offset: 0xb0, Size: 0x110]
	enum CaptureWeaponZoomingType;//[Offset: 0x1c0, Size: 0x1]
	enum SpecifiedHitGroup;//[Offset: 0x1c1, Size: 0x1]
	bool bEnableToBetterPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2, Size: 0x1]
	bool bEnableToHelmetPartIfHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c3, Size: 0x1]
	float MaxConsiderThickness;//[Offset: 0x1c4, Size: 0x4]
	void ReportFireInfo();// 0x4dfce3fee041
	void ProcessProjectileDamage(out HitResult HitResult);// 0x4dfbe3fee041
	void MakeDamage(SGCharacter* DamageCauser, enum HitGroup, out const HitResult HitResult, bool bBodyHitThrough);// 0x4dfae3fee041
	void InitializeMovement(Vector BulletSpawnLoc, Rotator BulletSpawnRot, SGWeapon* InOwnerWeapon);// 0x4df9e3fee041
	void DelayToProcessInstantHitEvent();// 0x4df8e3fee041
	bool CheckHitAndDamage(float InBulletCheckDistance);// 0x4df7e3fee041
	void BroadcastBulletShotEvt(out HitResult InHitResult);// 0x4df6e3fee041

--------------------------------
Class: NPCAIFireSetting
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Actor* EnemyTarget;//[Offset: 0x10, Size: 0x8]
	bool bCalcSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bCalcShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	float FireInterval;//[Offset: 0x1c, Size: 0x4]
	bool bSkipFirstRoundAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	enum ShootPartID;//[Offset: 0x21, Size: 0x1]
	bool bPressureAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	float WaitEndtime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SGCharacterAIAimingComponent.ActorComponent.Object
	float MAX_ANGLE_COEF;//[Offset: 0xc8, Size: 0x4]
	float AimTimeReduce;//[Offset: 0xcc, Size: 0x4]
	CurveFloat* AimAngleCoefCurve;//[Offset: 0xd0, Size: 0x8]
	CurveFloat* AimTime2DistCurve;//[Offset: 0xd8, Size: 0x8]
	float PredestinedShootWeight;//[Offset: 0xe0, Size: 0x4]
	bool bReachMaxShotCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xec, Size: 0x1]
	bool bNextShotMiss;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xec, Size: 0x1]
	bool bNextShotHit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xec, Size: 0x1]
	int MaxShotCount;//[Offset: 0xf0, Size: 0x4]
	int CurrentShotCount;//[Offset: 0xf4, Size: 0x4]
	int PersistNotHitCount;//[Offset: 0xf8, Size: 0x4]
	int FakeRandomNotHitMaxCount;//[Offset: 0xfc, Size: 0x4]
	bool bFakeRandomHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	float RequiredAimingTime;//[Offset: 0x104, Size: 0x4]
	float ElapsedAimingTime;//[Offset: 0x108, Size: 0x4]
	float StartAimingTimestamp;//[Offset: 0x10c, Size: 0x4]
	float NextAimingDelayTime;//[Offset: 0x110, Size: 0x4]
	float OffsetRatio;//[Offset: 0x114, Size: 0x4]
	float LastDist2Target;//[Offset: 0x118, Size: 0x4]
	float LastSpreadCount;//[Offset: 0x11c, Size: 0x4]
	Vector RealTargetPoint;//[Offset: 0x120, Size: 0xc]
	Vector TargetCenterPoint;//[Offset: 0x12c, Size: 0xc]
	Vector EndTargetPoint;//[Offset: 0x138, Size: 0xc]
	Vector SpreadOffset;//[Offset: 0x144, Size: 0xc]
	Vector SteeringDirection;//[Offset: 0x150, Size: 0xc]
	Vector LookDirection;//[Offset: 0x15c, Size: 0xc]
	enum AimStatus;//[Offset: 0x168, Size: 0x4]
	NPCAIPropertyComponent_Aiming* AimingPropsCache;//[Offset: 0x170, Size: 0x8]
	float LastUpdateTimestamp;//[Offset: 0x178, Size: 0x4]
	Actor* EnemyPawn;//[Offset: 0x180, Size: 0x8]
	uint32 EnemyUniqueId;//[Offset: 0x188, Size: 0x4]
	float FirstGunFinalHitRate;//[Offset: 0x18c, Size: 0x4]
	float HitRateNormal;//[Offset: 0x190, Size: 0x4]
	void SetPersistNotHitCount(int Value);// 0x3928e3fee041
	void SetNextAimingDelay(float DelayTime);// 0x3927e3fee041
	void NextShotMiss();// 0x3926e3fee041
	void NextShotHit();// 0x3925e3fee041
	bool IsUsingPredestined();// 0x3924e3fee041
	bool IsNextShotMiss();// 0x3923e3fee041
	bool IsNextShotHit();// 0x3922e3fee041
	bool IsFakeRandomHit();// 0x3921e3fee041
	Vector GetSpreadOffset();// 0x3920e3fee041
	int GetPersistNotHitCount();// 0x391fe3fee041
	int GetFakeRandomNotHitMaxCount();// 0x391ee3fee041
	void ClearNextShotMiss();// 0x391de3fee041
	void ClearNextShotHit();// 0x391ce3fee041
	void ClearNextShotFlags();// 0x391be3fee041
	float CalculatePredestinedWeight(Actor* InEnemy);// 0x391ae3fee041
	void CalculateEndTargetPoint();// 0x3919e3fee041

--------------------------------
Class: NPCAIPropertyComponent_Aiming.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	float SetMaxAimTime(float Value);// 0x5567e3fee041
	enum SetAimingBodyPartTrend(enum AimingTrend);// 0x5566e3fee041
	void RemoveAimingTypeInRuntime(enum InBulkType, bool bIsForPlayer);// 0x5565e3fee041
	bool IsUsePerdestinedFakeRandom();// 0x5564e3fee041
	bool IsAimingChoicesContains(enum InBodyPartType, bool bIsForPlayer);// 0x5563e3fee041
	float GetYTopOffsetCoef();// 0x5562e3fee041
	float GetYBottomOffsetCoef();// 0x5561e3fee041
	float GetXzCoef();// 0x5560e3fee041
	float GetUaSpreadOffsetXYClamp();// 0x555fe3fee041
	float GetUaSpreadOffsetMinZClamp();// 0x555ee3fee041
	float GetUaSpreadOffsetMaxZClamp();// 0x555de3fee041
	float[] GetUaShootHitRatesAI();// 0x555ce3fee041
	float[] GetUaShootHitRates();// 0x555be3fee041
	float GetUAShootHitRateIfWeaponAdsMoaBias(float AdsMoaBias);// 0x555ae3fee041
	float GetUAShootHitRateIfUnderFlashLight();// 0x5559e3fee041
	float GetUAShootHitRateIfShootHead();// 0x5558e3fee041
	float GetUAShootHitRateIfInCoverSafe();// 0x5557e3fee041
	float GetUAShootHitRateIfEnemyMoveSpeed();// 0x5556e3fee041
	float GetUAShootHitRateIfEnemyMove();// 0x5555e3fee041
	float GetUAShootHitRateIfBeHited();// 0x5554e3fee041
	float GetUAShootHitRateIfBattleDuration(float BattleDurationTime);// 0x5553e3fee041
	float GetUAShootHitRateIfArmBroken();// 0x5552e3fee041
	float GetUAShootHitRateIfAIMove();// 0x5551e3fee041
	float GetUAShootHitRateForDistanceToPlayer(float InDistance);// 0x5550e3fee041
	float GetUAShootHitRateForDistanceToAI(float InDistance);// 0x554fe3fee041
	float GetUAShootHitLimitedTime();// 0x554ee3fee041
	float GetUAShootHeadFaceRateIfUsedPredstined();// 0x554de3fee041
	float GetUaScatteringByDist(float Distance);// 0x554ce3fee041
	float GetUaQuickAimTime();// 0x554be3fee041
	float GetUaQuickAimOffsetDisRate();// 0x554ae3fee041
	float GetUaMinAimTime();// 0x5549e3fee041
	CurveFloat* GetUaAimTime2DistMultiplierCurve();// 0x5548e3fee041
	float GetUaAddAimingTickWhenAngleSmallerThan_Cos();// 0x5547e3fee041
	float GetTimeCoefIfMove();// 0x5546e3fee041
	float GetShootToChangeRndPartDelta();// 0x5545e3fee041
	float GetReclcZDist();// 0x5544e3fee041
	float GetRecalcSqrDist();// 0x5543e3fee041
	int GetRecalcMustTimeMin();// 0x5542e3fee041
	int GetRecalcMustTimeMax();// 0x5541e3fee041
	float GetRecalcDist();// 0x5540e3fee041
	float GetOffsetRecalAnywayTime();// 0x553fe3fee041
	float GetNextShotMissYOffset();// 0x553ee3fee041
	float GetMinTimeDiscardAimSec();// 0x553de3fee041
	float GetMaxTimeDiscardAimSec();// 0x553ce3fee041
	float GetMaxAimTime();// 0x553be3fee041
	float GetMaxAimPrecicing();// 0x553ae3fee041
	float GetMaxAimingUpgradeByTime();// 0x5539e3fee041
	bool GetIsFilterNotSeenPartToAiming();// 0x5538e3fee041
	float GetFirstContactAddSec();// 0x5537e3fee041
	float GetFirstContactAddChance100();// 0x5536e3fee041
	float GetDistToShootNoOffset();// 0x5535e3fee041
	float GetDamageToDiscardAim0100();// 0x5534e3fee041
	float GetCoefIfMove();// 0x5533e3fee041
	float GetCoefFromCover();// 0x5532e3fee041
	float GetBottomCoef();// 0x5531e3fee041
	float GetBetterPrecicingCoef();// 0x5530e3fee041
	float GetAnyPartShootTime();// 0x552fe3fee041
	enum GetAIProfileType();// 0x552ee3fee041
	float GetAimingTypeWeightInRuntime(enum InBulkType, bool bIsForPlayer);// 0x552de3fee041
	AIBodyBulkAimingChoice[] GetAimingBulks(bool bIsForPlayer);// 0x552ce3fee041
	enum GetAimingBodyPartTrend();// 0x552be3fee041
	void AddAimingTypeInRuntime(enum InBulkType, float InWeight, bool bIsForPlayer);// 0x552ae3fee041

--------------------------------
Class: NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object

--------------------------------
Class: NPCAIProfileBaseComponent.Object
	NPCAIPropertyProfileBase* PropertyProfile;//[Offset: 0x28, Size: 0x8]
	Actor* Owner;//[Offset: 0x30, Size: 0x8]
	float GetTimeSeconds();// 0x5463e3fee041
	Actor* GetOwner();// 0x5462e3fee041

--------------------------------
Class: NPCAIPropertyProfileBase.Object
	class NPCAIProfileBaseComponent* PropertyComponentClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AIBodyBulkAimingChoice
	enum BodyBulk;//[Offset: 0x0, Size: 0x1]
	float Weight;//[Offset: 0x4, Size: 0x4]
	AIBodyPartAimingChoice[] BodyParts;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AIBodyPartAimingChoice
	enum BodyPart;//[Offset: 0x0, Size: 0x1]
	float Weight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SGCharacterAIRecoilComponent.ActorComponent.Object
	bool bUseXYCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	float MIN_DIST_TO_TARGET;//[Offset: 0xcc, Size: 0x4]
	bool bResetWhenEndRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	float EffectRemainTime;//[Offset: 0xd4, Size: 0x4]
	float EffectDuration;//[Offset: 0xd8, Size: 0x4]
	float EffectEndTimestamp;//[Offset: 0xdc, Size: 0x4]
	Vector CurrentOffset;//[Offset: 0xe0, Size: 0xc]
	Vector EffectOffset;//[Offset: 0xec, Size: 0xc]
	bool bEnabledSimulateRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool bEnabledExactAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	float WeaponRecoilInheritScale;//[Offset: 0xfc, Size: 0x4]
	Rotator OriginalViewRotation;//[Offset: 0x100, Size: 0xc]
	Vector OriginalFocalPoint;//[Offset: 0x10c, Size: 0xc]
	float DistToOriginalFocalPoint;//[Offset: 0x118, Size: 0x4]
	Rotator WeaponRecoilRotation;//[Offset: 0x11c, Size: 0xc]
	Rotator MultiFireShakeSpeed;//[Offset: 0x128, Size: 0xc]
	bool bEnabledDrawPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	float ModifyYawMax;//[Offset: 0x138, Size: 0x4]
	float ModifyPitchMin;//[Offset: 0x13c, Size: 0x4]
	float ModifyPitchMax;//[Offset: 0x140, Size: 0x4]
	byte WeaponMultiFireShakeWay;//[Offset: 0x144, Size: 0x1]
	SGInventory* Weapon;//[Offset: 0x148, Size: 0x8]
	Vector ExactAimingPoint;//[Offset: 0x150, Size: 0xc]
	float ExactAimingTurnTime;//[Offset: 0x15c, Size: 0x4]
	float PressureWeaponTime;//[Offset: 0x160, Size: 0x4]
	float PressureWeaponRecoverPowerXY;//[Offset: 0x164, Size: 0x4]
	float PressureWeaponRecoverPowerZ;//[Offset: 0x168, Size: 0x4]
	Vector FocalPointOffset;//[Offset: 0x16c, Size: 0xc]
	Rotator PressureWeaponTargetRotationOffset;//[Offset: 0x178, Size: 0xc]
	Vector2D PressureWeaponSpeed;//[Offset: 0x184, Size: 0x8]
	SGCharacterAIFireComponent* AIFireComponent;//[Offset: 0x190, Size: 0x8]
	SGCharacterAIAimingComponent* AIAimingComponent;//[Offset: 0x198, Size: 0x8]
	NPCAIPropertyComponent_Shoot* ShootProps;//[Offset: 0x1a0, Size: 0x8]
	NPCAIPropertyComponent_Aiming* AimingProps;//[Offset: 0x1a8, Size: 0x8]
	void SetShotTarget(out const Vector AimingPoint, out const Vector ShotPoint, float PrepareTime);// 0x3a40e3fee041
	void SetExactAimingPoint(out const Vector AimingPoint, float TurnTime);// 0x3a3fe3fee041
	float Recoil(int CurrentShotCount);// 0x3a3ee3fee041
	void ModifyViewRotation_Weapon(float DeltaTime, out Rotator OutViewRotation);// 0x3a3de3fee041
	void ModifyViewRotation_PressureAiming(float DeltaTime, out Rotator OutViewRotation);// 0x3a3ce3fee041
	void ModifyViewRotation_MultiFire(float DeltaTime, out Rotator OutViewRotation);// 0x3a3be3fee041
	void ModifyViewRotation_Limit(float DeltaTime, out Rotator OutViewRotation);// 0x3a3ae3fee041
	bool ModifyViewRotation_InterpToRotaton(float DeltaTime, out const Rotator TargetRotation, out Rotator OutViewRotation, float SpeedV, float SpeedH);// 0x3a39e3fee041
	bool ModifyViewRotation_InterpToPointInTime(float DeltaTime, out const Vector TargetPoint, out Rotator OutViewRotation, float InterpTime, float SpeedPower);// 0x3a38e3fee041
	bool ModifyViewRotation_InterpToPoint(float DeltaTime, out const Vector TargetPoint, out Rotator OutViewRotation, float SpeedV, float SpeedH);// 0x3a37e3fee041
	void ModifyViewRotation_Inherit(float DeltaTime, out Rotator OutViewRotation);// 0x3a36e3fee041
	bool ModifyViewRotation_FlyToPoint(float DeltaTime, out const Vector TargetPoint, out Rotator OutViewRotation, float Ratio);// 0x3a35e3fee041
	void ModifyViewRotation_ExactAiming(float DeltaTime, out Rotator OutViewRotation);// 0x3a34e3fee041
	void ModifyViewRotation(float DeltaTime, bool bUpdateControlRotaion, out const Vector FocalPoint, out Rotator OutViewRotation);// 0x3a33e3fee041
	void LosingRecoil(float DeltaTime);// 0x3a32e3fee041
	bool IsInPressureWeapon();// 0x3a31e3fee041
	Vector GetRecoilOffset();// 0x3a30e3fee041
	float CalcXYFinalValue(bool UseXYCorrection, float Current, float OffsetMin, float OffsetMax);// 0x3a2fe3fee041

--------------------------------
Class: NPCAIPropertyComponent_Shoot.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	void SetHitIntervalRate(float Value);// 0x5625e3fee041
	bool IsEnabledHitIntervalByGroup();// 0x5624e3fee041
	float GetUaZRecoilRecoverPowerMin();// 0x5623e3fee041
	float GetUaZRecoilRecoverPowerMax();// 0x5622e3fee041
	float GetUaXYRecoilRecoverPowerMin();// 0x5621e3fee041
	float GetUaXYRecoilRecoverPowerMax();// 0x5620e3fee041
	float GetUAWeaponRecoilPower();// 0x561fe3fee041
	float GetUaShootPositionZOffset();// 0x561ee3fee041
	Vector GetUaShootPositionOffsetByPosture(enum PoseType, enum LeanType);// 0x561de3fee041
	Vector GetUaShootPositionOffset();// 0x561ce3fee041
	float GetUaRecoilOffsetZClamp();// 0x561be3fee041
	float GetUaRecoilOffsetXYClamp();// 0x561ae3fee041
	float GetUaMaxRecoilTime();// 0x5619e3fee041
	CurveFloat* GetUaCurveShootAccuracyByRecoil();// 0x5618e3fee041
	float GetTryLeanRayCheckDistanceSqr();// 0x5617e3fee041
	float GetTryLeanRayCheckDistance();// 0x5616e3fee041
	float GetStandShootZLocation();// 0x5615e3fee041
	float GetRecoilTimeNormalize();// 0x5614e3fee041
	float GetRecoilPerMeter();// 0x5613e3fee041
	float GetMaxRecoilPerMeter();// 0x5612e3fee041
	float GetInstantBulletVaildDistance();// 0x5611e3fee041
	int GetHorizontRecoilStepSizeNum();// 0x5610e3fee041
	float GetHorizontRecoilCoef();// 0x560fe3fee041
	float GetHitIntervalRate();// 0x560ee3fee041
	int GetHitIntervalIncreaseByShoot();// 0x560de3fee041
	int GetHitIntervalCountBase();// 0x560ce3fee041
	float GetFaceToTargetAngleLimitCanFire();// 0x560be3fee041
	bool GetEnabledTransfterHitBetterPart();// 0x560ae3fee041
	float GetCrouchHeadTopZLocation();// 0x5609e3fee041
	int GetCountIfHitHeadTransferToOther();// 0x5608e3fee041
	int GetCountIfHitChestTransferToOther();// 0x5607e3fee041
	enum GetAIProfileType();// 0x5606e3fee041

--------------------------------
Class: NPCAIMemorySystemComponent.NPCAISubSystemComponent.ActorComponent.Object
	AIController* AIOwner;//[Offset: 0xc8, Size: 0x8]
	NPCAIPerceptionComponent* CachedPerceptionComponent;//[Offset: 0xd0, Size: 0x8]
	bool IsLockingGoalEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	NPCAITargetInfo* GoalEnemy;//[Offset: 0xf0, Size: 0x8]
	NPCAITargetInfo* LastEnemy;//[Offset: 0xf8, Size: 0x8]
	NPCAIGoalTarget* GoalTarget;//[Offset: 0x100, Size: 0x8]
	Vector PanicPoint;//[Offset: 0x108, Size: 0xc]
	float PanicPointEndTime;//[Offset: 0x114, Size: 0x4]
	Vector CheckCoverPointPosition;//[Offset: 0x118, Size: 0xc]
	int CurrentCoverPointID;//[Offset: 0x124, Size: 0x4]
	AIBackUpCoverPointFinder BackUpCoverPointFinder;//[Offset: 0x128, Size: 0x1c]
	<Actor*,int> PickUpInventoryMemoryList;//[Offset: 0x148, Size: 0x50]
	float LastMolotovHurttime;//[Offset: 0x198, Size: 0x4]
	float SightWeakenEndTime;//[Offset: 0x19c, Size: 0x4]
	bool bIsInTryLeanShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	float PauseBehaviorEndTime;//[Offset: 0x1a4, Size: 0x4]
	AIStackGunRecord StackGunRecord;//[Offset: 0x1a8, Size: 0x44]
	int[] AcceptedSceneEvtUniqueIds;//[Offset: 0x1f0, Size: 0x10]
	AISteeringInfo SteeringInfo;//[Offset: 0x200, Size: 0x20]
	Vector Cache_AmbushAgainstStartPoint;//[Offset: 0x230, Size: 0xc]
	Vector Cache_AmbushAgainstEndPoint;//[Offset: 0x23c, Size: 0xc]
	Vector Cache_AmbushAgainstResultPoint;//[Offset: 0x248, Size: 0xc]
	NPCAIQueryRoundEnvironmentResult Cache_QREResult;//[Offset: 0x254, Size: 0x5c]
	ActorComponent* AIStaticComponent;//[Offset: 0x2b0, Size: 0x8]
	AISceneEventsTriggerManager* AISceneEventsTriggerManager;//[Offset: 0x2b8, Size: 0x8]
	bool UpdateSteeringLocationByViewDirection(out const Vector ViewDir, enum Type);// 0x5461e3fee041
	bool UpdateSteeringLocation(out const Vector Location, enum Type);// 0x5460e3fee041
	void SetSteeringToPoint(out const Vector Location);// 0x545fe3fee041
	void SetSteeringToMoveDirection();// 0x545ee3fee041
	void SetSteeringToAimingFinish();// 0x545de3fee041
	void SetSteeringToAiming();// 0x545ce3fee041
	void SetStackGunRecord(out const Vector InMyPos, out const Vector InEnemyPos, out const enum InPose, out const enum InLean);// 0x545be3fee041
	void SetSightWeakenTime(float WeakenTime);// 0x545ae3fee041
	void SetPauseBehaviorTime(float Time);// 0x5459e3fee041
	void SetPanicPoint(Vector Point, float ExpiredTime);// 0x5458e3fee041
	void SetLastEnemy(NPCAITargetInfo* InEnemy);// 0x5457e3fee041
	void SetLastCalculateBackUpCoverPointNearBy(out const Vector InEnemyPos);// 0x5456e3fee041
	void SetIsMolotovHurted(bool bInHurted);// 0x5455e3fee041
	void SetIsInTryLeanShoot(bool bTryLean);// 0x5454e3fee041
	void SetInventoryHasSeen(Actor* Inventory);// 0x5453e3fee041
	void SetInventoryHasChecked(Actor* Inventory);// 0x5452e3fee041
	void SetGoalTarget(Actor* InOwner, NPCAIAttentionPoint* InPoint);// 0x5451e3fee041
	void SetGoalEnemy(Actor* InOwner, NPCAITargetInfo* InEnemy);// 0x5450e3fee041
	void SetCurrentCoverPoint(Actor* InOwner, int InCoverPointID);// 0x544fe3fee041
	void RemoveSceneEvent(int EventUniqueId);// 0x544ee3fee041
	void RemoveInventoryHasChecked(Actor* Inventory);// 0x544de3fee041
	bool IsSightWeaken();// 0x544ce3fee041
	bool IsInventoryHasSeen(Actor* Inventory);// 0x544be3fee041
	bool IsInventoryHasChecked(Actor* Inventory);// 0x544ae3fee041
	bool IsInSteeringType(enum Type);// 0x5449e3fee041
	bool IsInCover();// 0x5448e3fee041
	bool IsGoalEnemyThreaten(float ThreatenDistance);// 0x5447e3fee041
	bool HasGoldEnemyOrTarget();// 0x5446e3fee041
	enum GetSteeringType();// 0x5445e3fee041
	Vector GetSteeringLocation();// 0x5444e3fee041
	float GetSightWeakenEndTime();// 0x5443e3fee041
	float GetPauseBehaviorEndTime();// 0x5442e3fee041
	Vector GetPanicPoint();// 0x5441e3fee041
	NPCAITargetInfo* GetLastEnemy();// 0x5440e3fee041
	bool GetIsPanic();// 0x543fe3fee041
	bool GetIsMolotovHurted();// 0x543ee3fee041
	bool GetIsInTryLeanShoot();// 0x543de3fee041
	NPCAIGoalTarget* GetGoalTarget(Actor* InOwner);// 0x543ce3fee041
	NPCAITargetInfo* GetGoalEnemy(Actor* InOwner);// 0x543be3fee041
	bool GetCurrentCoverPoint(Actor* InOwner, out CoverPointOctreeData Out_CoverPoint);// 0x543ae3fee041
	bool CanCalculateBackUpCoverPointNearBy(out const Vector InEnemyPos, float InRadiusNoCheck);// 0x5439e3fee041
	bool AcceptSceneEvent(int EventUniqueId);// 0x5438e3fee041

--------------------------------
Class: NPCAISubSystemComponent.ActorComponent.Object
	Character* OwnerPawn;//[Offset: 0xb8, Size: 0x8]
	AIController* OwnerController;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x390, Size: 0x1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x390, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x390, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x390, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x390, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x390, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x390, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x398, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x3a0, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x3a8, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x3b0, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x3b8, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x3c0, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x3c8, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x3d0, Size: 0x10]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x3787e3fee041
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3786e3fee041
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x3785e3fee041
	void SetMoveBlockDetection(bool bEnable);// 0x3784e3fee041
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x3783e3fee041
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x3782e3fee041
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x3781e3fee041
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x3780e3fee041
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x377fe3fee041
	void K2_SetFocus(Actor* NewFocus);// 0x377ee3fee041
	void K2_SetFocalPoint(Vector FP);// 0x377de3fee041
	void K2_ClearFocus();// 0x377ce3fee041
	bool HasPartialPath();// 0x377be3fee041
	PathFollowingComponent* GetPathFollowingComponent();// 0x377ae3fee041
	byte GetMoveStatus();// 0x3779e3fee041
	Vector GetImmediateMoveDestination();// 0x3778e3fee041
	Actor* GetFocusActor();// 0x3777e3fee041
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x3776e3fee041
	Vector GetFocalPoint();// 0x3775e3fee041
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x3774e3fee041
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3773e3fee041

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xf0, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0x100, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x4a19e3fee041
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x4a18e3fee041
	Vector GetPathDestination();// 0x4a17e3fee041
	byte GetPathActionType();// 0x4a16e3fee041

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x2e8, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x2f0, Size: 0x78]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x368, Size: 0x1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x368, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x368, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x368, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x368, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x369, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x36c, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x370, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x480, Size: 0x10]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xc0, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xc8, Size: 0x8]
	void StopLogic(FString reason);// 0x721ae3fee041
	void StartLogic();// 0x7219e3fee041
	void RestartLogic();// 0x7218e3fee041
	bool IsRunning();// 0x7217e3fee041
	bool IsPaused();// 0x7216e3fee041

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb8, Size: 0x8]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xc0, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0xc8, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xf0, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x7236e3fee041
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x7235e3fee041
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x7234e3fee041
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x7233e3fee041
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x7232e3fee041
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x7231e3fee041
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x7230e3fee041
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x722fe3fee041
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x722ee3fee041
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x722de3fee041
	bool IsVectorValueSet(out const FName KeyName);// 0x722ce3fee041
	Vector GetValueAsVector(out const FName KeyName);// 0x722be3fee041
	FString GetValueAsString(out const FName KeyName);// 0x722ae3fee041
	Rotator GetValueAsRotator(out const FName KeyName);// 0x7229e3fee041
	Object* GetValueAsObject(out const FName KeyName);// 0x7228e3fee041
	FName GetValueAsName(out const FName KeyName);// 0x7227e3fee041
	int GetValueAsInt(out const FName KeyName);// 0x7226e3fee041
	float GetValueAsFloat(out const FName KeyName);// 0x7225e3fee041
	byte GetValueAsEnum(out const FName KeyName);// 0x7224e3fee041
	class Object GetValueAsClass(out const FName KeyName);// 0x7223e3fee041
	bool GetValueAsBool(out const FName KeyName);// 0x7222e3fee041
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x7221e3fee041
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x7220e3fee041
	void ClearValue(out const FName KeyName);// 0x721fe3fee041

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	FName Category;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb8, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0xc8, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xe0, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x168, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x178, Size: 0x10]
	delegate OnTargetPerceptionInfoUpdated;//[Offset: 0x188, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x5522e3fee041
	void RequestStimuliListenerUpdate();// 0x5521e3fee041
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x5520e3fee041
	void GetPerceivedHostileActorsBySense(const class AISense SenseToUse, out Actor*[] OutActors);// 0x551fe3fee041
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x551ee3fee041
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x551de3fee041
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x551ce3fee041
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x551be3fee041
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x551ae3fee041
	void ForgetAll();// 0x5519e3fee041

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4]
	void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x5527e3fee041
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x5526e3fee041
	bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x5525e3fee041
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x5524e3fee041
	class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x5523e3fee041

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18]
	SoftClassPath EnvQueryManagerClassName;//[Offset: 0x70, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x88, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0xa0, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0xa4, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0xa8, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1]
	bool bAddBlackboardSelfKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0xb4, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xb8, Size: 0x8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xc0, Size: 0x8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xc8, Size: 0x8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xd0, Size: 0x10]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xe0, Size: 0x8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xe8, Size: 0x8]
	void AILoggingVerbose();// 0x5777e3fee041
	void AIIgnorePlayers();// 0x5776e3fee041

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4]
	bool bEnabledStatMonitor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10]
	<FString,BehaviorTreeNodeMonitorStat> MonitorStat;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10]
	BTService*[] Services;//[Offset: 0x68, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4]
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	void SetTickInterval(float TickInterval, float TickRandomDeviation);// 0x3683e3fee041

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x130, Size: 0x10]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x280, Size: 0x8]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x721de3fee041
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x721ce3fee041
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x721be3fee041

--------------------------------
Class: BehaviorTreeNodeMonitorStat
	FString NodeName;//[Offset: 0x0, Size: 0x10]
	float[] ExecuteTimes;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8]
	EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass, byte QueryPriority);// 0x53c4e3fee041

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8]
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4]
	byte TestPurpose;//[Offset: 0x30, Size: 0x1]
	FString TestComment;//[Offset: 0x38, Size: 0x10]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1]
	byte FilterType;//[Offset: 0x4a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38]
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1]
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1]
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8]
	FName DataField;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8]
	int OptionIndex;//[Offset: 0x60, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10]
	void SetNamedParam(FName ParamName, float Value);// 0x1ba3e3fee041
	Vector[] GetResultsAsLocations();// 0x1ba2e3fee041
	Actor*[] GetResultsAsActors();// 0x1ba1e3fee041
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x1ba0e3fee041
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x1b9fe3fee041
	float GetItemScore(int ItemIndex);// 0x1b9ee3fee041
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x1b9ce3fee041

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x71f5e3fee041

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x725de3fee041
	void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x725ce3fee041
	bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x725be3fee041
	int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x725ae3fee041
	int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x7259e3fee041
	int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x7258e3fee041
	int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x7257e3fee041

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb8, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0xc0, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0xd0, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0xe0, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x7269e3fee041
	bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x7268e3fee041
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x7267e3fee041
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x7266e3fee041

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0x7260e3fee041
	void Finish(byte WithResult);// 0x725fe3fee041
	PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x725ee3fee041

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NPCAIPerceptionComponent.AIPerceptionComponent.ActorComponent.Object
	bool EnabledRecedeSightWhileRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	float RateDrawLine;//[Offset: 0x19c, Size: 0x4]
	bool bIsDebugSightRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	bool bIsLogShootPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 0x1]
	bool bIsDebugFogRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2, Size: 0x1]
	bool bEnabledDebugCanSeePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a3, Size: 0x1]
	float LastTimeCheckFlashBlocks;//[Offset: 0x1a4, Size: 0x4]
	Vector FlashLightPos;//[Offset: 0x1a8, Size: 0xc]
	float CheckAutoLeanInterval;//[Offset: 0x1b4, Size: 0x4]
	Character* AIOwnerPawn;//[Offset: 0x1c0, Size: 0x8]
	enum WeaponChannel;//[Offset: 0x1c8, Size: 0x1]
	enum AISightChannel;//[Offset: 0x1c9, Size: 0x1]
	NPCAIPerceptionAssistActor* PerceptionAssistActor;//[Offset: 0x1d0, Size: 0x8]
	NPCAIPerceptionDynamicActor* PerceptionDynamicActor;//[Offset: 0x1d8, Size: 0x8]
	NPCAIMoverSystemComponent* OwnerMoverComponent;//[Offset: 0x1e0, Size: 0x8]
	NPCAIMemorySystemComponent* OwnerMemoryComponent;//[Offset: 0x1e8, Size: 0x8]
	NPCAIMultiTargetSystemComponent* OwnerMultiTargetComponent;//[Offset: 0x1f0, Size: 0x8]
	NPCAIPropertyComponent_Shoot* ShootProps;//[Offset: 0x1f8, Size: 0x8]
	NPCAIPropertyComponent_Look* LookProps;//[Offset: 0x200, Size: 0x8]
	NPCAIPropertyComponent_Aiming* AimingProps;//[Offset: 0x208, Size: 0x8]
	ActorComponent* AIFireComponent;//[Offset: 0x210, Size: 0x8]
	ActorComponent* AIStaticsComponent;//[Offset: 0x218, Size: 0x8]
	ActorComponent* AIPoseComponent;//[Offset: 0x220, Size: 0x8]
	ActorComponent* IKComponent;//[Offset: 0x228, Size: 0x8]
	ActorComponent* AISenseAbilityComponent;//[Offset: 0x230, Size: 0x8]
	NPCAIGlobalSharedInfo* AISharedInfo;//[Offset: 0x238, Size: 0x8]
	ActorComponent* AITurnComponent;//[Offset: 0x240, Size: 0x8]
	float NextCheckLeanCanShootTime;//[Offset: 0x248, Size: 0x4]
	float SelfIKFootOffsets;//[Offset: 0x24c, Size: 0x4]
	float TargetIKFootOffsets;//[Offset: 0x250, Size: 0x4]
	float TurnSightWeakenScale;//[Offset: 0x254, Size: 0x4]
	float LastTimeRecoverSight;//[Offset: 0x258, Size: 0x4]
	enum AutoLeanType;//[Offset: 0x25c, Size: 0x1]
	enum AIPoseType;//[Offset: 0x25d, Size: 0x1]
	enum TargetPoseType;//[Offset: 0x25e, Size: 0x1]
	enum AILeanType;//[Offset: 0x25f, Size: 0x1]
	bool bInitAIGrassElements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	AIGrassOctreeElement[] AIGrassElements;//[Offset: 0x268, Size: 0x10]

--------------------------------
Class: NPCAIPerceptionAssistActor.Actor.Object
	AIGrassMapInfo MapInfo;//[Offset: 0x2e0, Size: 0x80]
	AIFoliageGrassBlock[] FoliageGrassBlockList;//[Offset: 0x360, Size: 0x10]
	AILandscapeGrassBlock[] LandscapeGrassBlockList;//[Offset: 0x370, Size: 0x10]
	AIGrassBlock[] GrassBlockAssets;//[Offset: 0x380, Size: 0x10]
	bool bIsDebugAIGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	enum DebugAIGrassBox;//[Offset: 0x391, Size: 0x1]
	void DebugShowAIGrassCluster(enum Type);// 0x5518e3fee041

--------------------------------
Class: AIGrassMapInfo
	FString MapName;//[Offset: 0x0, Size: 0x10]
	float MapTopX;//[Offset: 0x10, Size: 0x4]
	float MapTopY;//[Offset: 0x14, Size: 0x4]
	float MapSizeX;//[Offset: 0x18, Size: 0x4]
	float MapSizeY;//[Offset: 0x1c, Size: 0x4]
	int MapLandscapeGrassCellCountX;//[Offset: 0x20, Size: 0x4]
	int MapLandscapeGrassCellCountY;//[Offset: 0x24, Size: 0x4]
	float LandscapeGrassCellSize;//[Offset: 0x28, Size: 0x4]
	int MinLandscapeGrassCountInCell;//[Offset: 0x2c, Size: 0x4]
	float MinCellCoverPercent;//[Offset: 0x30, Size: 0x4]
	float MinLandscapeGrassHeight;//[Offset: 0x34, Size: 0x4]
	float LandscapeGrassZGapLimit;//[Offset: 0x38, Size: 0x4]
	float MinGrassHeight;//[Offset: 0x3c, Size: 0x4]
	float AverageDensityLimit;//[Offset: 0x40, Size: 0x4]
	FString IgnoreFoliageTags;//[Offset: 0x48, Size: 0x10]
	bool bIsGenerateMeshGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	FString MeshGrassTags;//[Offset: 0x60, Size: 0x10]
	FString SaveLevelName;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AIFoliageGrassBlock
	int Index;//[Offset: 0x0, Size: 0x4]
	Box Bounds;//[Offset: 0x4, Size: 0x1c]
	Vector Location;//[Offset: 0x20, Size: 0xc]
	float RotatonYaw;//[Offset: 0x2c, Size: 0x4]
	byte Density;//[Offset: 0x30, Size: 0x1]
	float ScaleValue;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: AILandscapeGrassBlock
	Box Bounds;//[Offset: 0x0, Size: 0x1c]
	Vector Location;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: AIGrassBlock.AILandscapeGrassBlock
	FName AIGrassName;//[Offset: 0x28, Size: 0x8]
	byte Density;//[Offset: 0x30, Size: 0x1]
	AIGrassBox[] GrassBoxList;//[Offset: 0x38, Size: 0x10]
	AIGrassCylinder[] GrassCylinderList;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: AIGrassBox
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Vector Extent;//[Offset: 0xc, Size: 0xc]
	float Density;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AIGrassCylinder
	float ZCenter;//[Offset: 0x0, Size: 0x4]
	float HalfHeight;//[Offset: 0x4, Size: 0x4]
	float Radius;//[Offset: 0x8, Size: 0x4]
	byte[] PartsDensities;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NPCAIPerceptionDynamicActor.Actor.Object
	AIBlockArea[] DynamicAreaList;//[Offset: 0x2e0, Size: 0x10]
	AISenseFlashBlock[] SenseFlashBlockList;//[Offset: 0x2f0, Size: 0x10]
	bool bDebugBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	int IndexOfUpdateFlashBlock;//[Offset: 0x304, Size: 0x4]
	int IndexOfCheckEnemyFlashBlock;//[Offset: 0x308, Size: 0x4]

--------------------------------
Class: AIBlockArea
	enum TileType;//[Offset: 0x0, Size: 0x1]
	Box BlockBox;//[Offset: 0x4, Size: 0x1c]
	Box EffectiveBox;//[Offset: 0x20, Size: 0x1c]
	Vector Center;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Heigh;//[Offset: 0x4c, Size: 0x4]
	float StartTime;//[Offset: 0x50, Size: 0x4]
	float EndTime;//[Offset: 0x54, Size: 0x4]
	float BlockStartTime;//[Offset: 0x58, Size: 0x4]
	float BlockEndTime;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: AISenseFlashBlock
	Vector StartPos;//[Offset: 0x8, Size: 0xc]
	Vector StartPosOffset;//[Offset: 0x14, Size: 0xc]
	Vector Dir;//[Offset: 0x20, Size: 0xc]
	float FarDim;//[Offset: 0x2c, Size: 0x4]
	float NearDim;//[Offset: 0x30, Size: 0x4]
	float ZoneAngle;//[Offset: 0x34, Size: 0x4]
	float FaceAngle;//[Offset: 0x38, Size: 0x4]
	float SevereDebuffDistance;//[Offset: 0x3c, Size: 0x4]
	float ModerateDebuffDistance;//[Offset: 0x40, Size: 0x4]
	float MildDebuffDistance;//[Offset: 0x44, Size: 0x4]
	float Height;//[Offset: 0x48, Size: 0x4]
	float MaxHeight;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: NPCAIMoverSystemComponent.NPCAISubSystemComponent.ActorComponent.Object
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	float AcceptableRadius;//[Offset: 0xcc, Size: 0x4]
	float OffsetFromCornersDistance;//[Offset: 0xd0, Size: 0x4]
	float DisposableOffsetFromCornersDistance;//[Offset: 0xd4, Size: 0x4]
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1]
	bool bProjectGoalLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 0x1]
	bool bHandleLandedDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bEnableMoverSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	enum MovementKind;//[Offset: 0xe2, Size: 0x1]
	int GotoPointDecision;//[Offset: 0xe4, Size: 0x4]
	Volume*[] AvoidVolumes;//[Offset: 0xe8, Size: 0x10]
	Vector Destination;//[Offset: 0xf8, Size: 0xc]
	Vector DestinationInIgroreTime;//[Offset: 0x104, Size: 0xc]
	Vector DirCurPoint;//[Offset: 0x128, Size: 0xc]
	enum LastMoveResult;//[Offset: 0x134, Size: 0x1]
	float CurrentSprintEngery;//[Offset: 0x14c, Size: 0x4]
	NPCAIPropertyComponent_Move* MoveProperty;//[Offset: 0x150, Size: 0x8]
	Actor* CaredActorWhenMoving;//[Offset: 0x17c, Size: 0x8]
	float CaredActorEffectRadius;//[Offset: 0x184, Size: 0x4]
	Vector BlendingVelocity;//[Offset: 0x188, Size: 0xc]
	int CheckPointCountOnPath;//[Offset: 0x194, Size: 0x4]
	delegate OnAIPathChecked;//[Offset: 0x198, Size: 0x10]
	delegate OnAIGoDirectlyFinished;//[Offset: 0x1a8, Size: 0x10]
	bool bEnableDrawPathPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	bool bUseFlanking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 0x1]
	Vector DangerPoint;//[Offset: 0x1bc, Size: 0xc]
	Vector DangerPointDirection;//[Offset: 0x1c8, Size: 0xc]
	float DangerPointEffectRadius;//[Offset: 0x1d4, Size: 0x4]
	float MaxTurnDistance;//[Offset: 0x1dc, Size: 0x4]
	float MinTurnDistance;//[Offset: 0x1e0, Size: 0x4]
	float DistanceCheck;//[Offset: 0x1e4, Size: 0x4]
	float SwayWidthCheck;//[Offset: 0x1e8, Size: 0x4]
	float SwayWidth;//[Offset: 0x1ec, Size: 0x4]
	float RandSwayWidthRate;//[Offset: 0x1f0, Size: 0x4]
	float PathOffset;//[Offset: 0x1f4, Size: 0x4]
	int SampleTimes;//[Offset: 0x1f8, Size: 0x4]
	int RegionWhereNavLinksNeedDisable;//[Offset: 0x1fc, Size: 0x4]
	ActorComponent* AIDoorOpenerComponent;//[Offset: 0x200, Size: 0x8]
	ActorComponent* AIPoseComponent;//[Offset: 0x208, Size: 0x8]
	int Blending_Count;//[Offset: 0x210, Size: 0x4]
	float Blending_Time;//[Offset: 0x214, Size: 0x4]
	void SetupRegionWhereNavLinksNeedDisable(const int RegionIndex);// 0x5485e3fee041
	void SetupFlanking(out const Vector InDangerPoint, out const Vector InDangerPointDirection, float InDangerPointEffectRadius);// 0x5484e3fee041
	void SetIgnoreGotoPoint(float IgnoreTime);// 0x5483e3fee041
	void SetDisposableOffsetFromCornersDistance(float OffsetDistance);// 0x5482e3fee041
	void SetDestination(Vector InPosition);// 0x5481e3fee041
	void SetCurrentMoveType(enum InMoveType);// 0x5480e3fee041
	void SetAvoidVolumes(const Volume*[] Volumes);// 0x547fe3fee041
	void PauseMovement(float PauseTime);// 0x547ee3fee041
	void OnMovementModeChanged(Character* MovedCharacter, byte PrevMovementMode, byte PreviousCustomMode);// 0x547de3fee041
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x547ce3fee041
	void OnLanded(out const HitResult Hit);// 0x547be3fee041
	bool IsSprintEnergyEnough(bool bSprinting);// 0x547ae3fee041
	bool IsPauseMovement();// 0x5479e3fee041
	bool IsLastPathPassDoor();// 0x5478e3fee041
	bool IsLastMoveSuccess();// 0x5477e3fee041
	bool IsInIgnoreGotoPoint();// 0x5476e3fee041
	bool IsGoalPositionReached();// 0x5475e3fee041
	bool IsComeTo(bool OnCover);// 0x5474e3fee041
	bool IsCloseToDestination(float InRadius);// 0x5473e3fee041
	bool IsAnyLegBroken();// 0x5472e3fee041
	void GoToPoint(Vector InPosition, bool bSlowAtTheEnd, float InReachDist, bool bShoudGetUp, bool bGetUpWithCheck, Actor* CaredActor, float CaredActorEffectRadius, int GoDecision);// 0x5471e3fee041
	void GoDirectly(out const Vector Direction, float Seconds, out const Vector InBlendingVelocity);// 0x5470e3fee041
	int GetNearestDoorState();// 0x546fe3fee041
	Vector GetNearestDoorLocation();// 0x546ee3fee041
	enum GetMoveType();// 0x546de3fee041
	NPCAIPropertyComponent_Move* GetMoveProperty();// 0x546ce3fee041
	enum GetMovementKind();// 0x546be3fee041
	enum GetLastMoveResult();// 0x546ae3fee041
	Vector GetDirCurPoint();// 0x5469e3fee041
	Vector GetDestination();// 0x5468e3fee041
	void ClearMovement();// 0x5467e3fee041

--------------------------------
Class: NPCAIPropertyComponent_Move.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	float GetYApproximation();// 0x5602e3fee041
	float GetWeaponShootingMovingScale();// 0x5601e3fee041
	float GetSoundDiffusionMaxDistanceFactor();// 0x5600e3fee041
	float GetSoundDiffusionLevelFactor();// 0x55ffe3fee041
	float GetRotateAngleMinDeviation();// 0x55fee3fee041
	float GetRotateAngleMaxDeviation();// 0x55fde3fee041
	float GetRotateAngleInterval();// 0x55fce3fee041
	float GetRecoverPointPerSecond();// 0x55fbe3fee041
	float GetReachDist();// 0x55fae3fee041
	float GetMinRotateSpeed();// 0x55f9e3fee041
	float GetMinRequiredTimeToSrpint();// 0x55f8e3fee041
	float GetMaxSprintDuration();// 0x55f7e3fee041
	float GetMaxRotateAngle();// 0x55f6e3fee041
	float GetMaxRequiredTimeToRecover();// 0x55f5e3fee041
	bool GetEnabledUseRotateAngleLimit();// 0x55f4e3fee041
	float GetCanMoveTestDistance();// 0x55f3e3fee041
	enum GetAIProfileType();// 0x55f2e3fee041

--------------------------------
Class: NPCAIMultiTargetSystemComponent.NPCAISubSystemComponent.ActorComponent.Object
	bool bDebugSuspectedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bDebugShootOffsetScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	float TimeOfShootOffsetScopeDraw;//[Offset: 0xcc, Size: 0x4]
	bool bDebugShootScopeTestPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bLogGoalEnemyScore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bWantCalculateGoalTargetPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	bool bWantCalculateGoalEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 0x1]
	NPCAIZoneGroupInfo* ZoneGroupInfo;//[Offset: 0xd8, Size: 0x8]
	int DynamicGroupId;//[Offset: 0xe0, Size: 0x4]
	NPCAITargetInfo*[] AllTargetInfoList;//[Offset: 0xe8, Size: 0x10]
	float NextUpdateTimeForTarget;//[Offset: 0xf8, Size: 0x4]
	float LastChangeEnemyTime;//[Offset: 0xfc, Size: 0x4]
	NPCAIMemorySystemComponent* MemoryComponent;//[Offset: 0x100, Size: 0x8]
	NPCAIPerceptionComponent* PerceptionComponent;//[Offset: 0x108, Size: 0x8]
	ActorComponent* AIStaticComponent;//[Offset: 0x110, Size: 0x8]
	NPCAIPropertyComponent_Mind* MindProps;//[Offset: 0x118, Size: 0x8]
	NPCAIPropertyComponent_Hearing* HearProps;//[Offset: 0x120, Size: 0x8]
	NPCAIPropertyComponent_Aiming* AimingProps;//[Offset: 0x128, Size: 0x8]
	NPCAIPropertyComponent_Health* HealthProps;//[Offset: 0x130, Size: 0x8]
	NPCAIPropertyComponent_Grenade* GrenadeProps;//[Offset: 0x138, Size: 0x8]
	NPCAIPropertyComponent_Damage* DamageProps;//[Offset: 0x140, Size: 0x8]
	float CD_CHANGE_GOALENEMY_IF_BOTH_NOT_SEE;//[Offset: 0x148, Size: 0x4]
	void WantToCalculateGoalEnemy();// 0x54b3e3fee041
	void UpdateGroupEnemyVisibleInfo(Actor* InEnemy, Vector InLastSeenPosition, float SeenTime);// 0x54b2e3fee041
	bool SwitchToTemporaryEnemy(Actor* InNeutral, float InEndTime);// 0x54b1e3fee041
	bool SwitchEnemyToNeutral(Actor* InEnemy);// 0x54b0e3fee041
	bool SwitchEnemyToAlly(Actor* InEnemy);// 0x54afe3fee041
	void SetZoneGroupInfo(NPCAIZoneGroupInfo* InGroupInfo);// 0x54aee3fee041
	void SetKnowEnemySeenTimeAndPosition(Actor* InTargetPawn, bool bCanSeenSoon);// 0x54ade3fee041
	NPCAIAttentionPoint* SearchDangerPoint();// 0x54ace3fee041
	NPCAITargetInfo* SearchDangerEnemy();// 0x54abe3fee041
	void RemoveSuspectedPointByType(enum InPlaceType, Actor* InCreator);// 0x54aae3fee041
	void RemoveSuspectedPoint(NPCAIAttentionPoint* InAttentionPoint, bool bRemoveNearCanSee);// 0x54a9e3fee041
	void RemoveNeutral(Actor* InNeutral);// 0x54a8e3fee041
	void RemoveEnemy(Actor* InEnemy);// 0x54a7e3fee041
	void RemoveAlly(Actor* InAlly);// 0x54a6e3fee041
	void QuitToDynamicGroup();// 0x54a5e3fee041
	bool JoinToDynamicGroup(int DyGroupId);// 0x54a4e3fee041
	bool IsPointInVShootScope(out const Vector GunPoint, out const Vector ShootPoint, float HRadin, float VTopRadin, float VLowRadin, out const Vector InPoint);// 0x54a3e3fee041
	bool IsPointInHShootScope(out const Vector GunPoint, out const Vector ShootPoint, float HRadin, float VTopRadin, float VLowRadin, out const Vector InPoint);// 0x54a2e3fee041
	bool IsNeutral(Actor* InNeutral);// 0x54a1e3fee041
	bool IsInSameZoneGroup(Actor* InTarget);// 0x54a0e3fee041
	bool IsGroupEnemy(Actor* InEnemy);// 0x549fe3fee041
	bool IsAlly(Actor* InAlly);// 0x549ee3fee041
	bool HasOthersAllyInShootScope();// 0x549de3fee041
	NPCAIZoneGroupInfo* GetZoneGroupInfo();// 0x549ce3fee041
	NPCAIAttentionPoint* GetYoungestSuspectedPoint(Actor* InCharacter, float InRadius, bool InPriorityDanger);// 0x549be3fee041
	int GetNeutralsNum();// 0x549ae3fee041
	int GetEnemyNum();// 0x5499e3fee041
	NPCAIEnemyGroupSingleInfo* GetEnemyGroupInfo(Actor* InTarget);// 0x5498e3fee041
	int GetDynamicGroupId();// 0x5497e3fee041
	int GetBulletFireDangerPower(bool IsHitNoise, Vector InNoisePosition, float InNoiseDistance, Vector InBulletVelocity);// 0x5496e3fee041
	int GetAllyNum();// 0x5495e3fee041
	NPCAITargetInfo*[] GetAllTargetInfoList();// 0x5494e3fee041
	void GetAllInSightEnemys(out Actor*[] OutEnemys);// 0x5493e3fee041
	void GetAllHadSeenEnemys(out Actor*[] OutEnemys);// 0x5492e3fee041
	void FilterNotValidEnemyOrPoints();// 0x5491e3fee041
	<Actor*,NPCAIEnemyGroupSingleInfo*> EnemyInfoMap();// 0x5490e3fee041
	bool CanHeardNoise(float InNoiseDistance, float InNoisePower);// 0x548fe3fee041
	bool CalculateShootScope(out Vector GunPoint, out Vector ShootPoint, out float HRadian, out float VTopRadian, out float VLowRadian, out Vector HMaxPoint1, out Vector HMaxPoint2, out Vector VTopPoint, out Vector VLowPoint);// 0x548ee3fee041
	void CalculateGoalPointForBot();// 0x548de3fee041
	void CalculateGoalForBot();// 0x548ce3fee041
	void CalculateGoalEnemyForBot();// 0x548be3fee041
	NPCAIAttentionPoint* AddSuspectedPointToSearch(Vector InPoint, enum InPlaceType, Actor* InCreator, bool bIsAutoReCalculate, bool bIsAddSuspectedNum);// 0x548ae3fee041
	void AddNeutral(Actor* InNeutral);// 0x5489e3fee041
	NPCAIEnemyGroupSingleInfo* AddEnemy(Actor* InEnemy);// 0x5488e3fee041
	NPCAITargetInfo* AddAllyGoalEnemyIfNotTarget(float InRange);// 0x5487e3fee041
	void AddAlly(Actor* InAlly);// 0x5486e3fee041

--------------------------------
Class: NPCAIZoneGroupInfo.NPCAITeam.Actor.Object
	int FactionType;//[Offset: 0x3b0, Size: 0x4]
	int GroupType;//[Offset: 0x3b4, Size: 0x4]
	NPCAIDynamicGroupInfo*[] DynamicGroupList;//[Offset: 0x3b8, Size: 0x10]
	NPCAIDynamicGroupInfo* GetDynamicGroupInfo(int GroupID);// 0x5814e3fee041
	NPCAIDynamicGroupInfo* CreateDynamicGroup(Actor* InCreator, class NPCAIDynamicGroupInfo DynamicGroupClass);// 0x5813e3fee041
	void BP_OnInitGroupMessage(int InGroupType);// 0x5812e3fee041
	void BP_OnAllyRemoved(Actor* InAlly);// 0x5811e3fee041
	void BP_OnAllyDied(Actor* InAlly);// 0x5810e3fee041
	void BP_OnAllyAdded(Actor* InAlly);// 0x580fe3fee041
	void AutoReleaseDynamicGroup();// 0x580ee3fee041

--------------------------------
Class: NPCAITeam.Actor.Object
	AIShotCountStat AllyBeHitCount;//[Offset: 0x2f0, Size: 0x10]
	Actor*[] AllyList;//[Offset: 0x300, Size: 0x10]
	Actor*[] PlayerAllyList;//[Offset: 0x310, Size: 0x10]
	<Actor*,NPCAIEnemyGroupSingleInfo*> EnemyInfoMap;//[Offset: 0x320, Size: 0x50]
	Actor*[] NeutralList;//[Offset: 0x370, Size: 0x10]
	NPCAIAttentionPoint*[] SuspectedPoints;//[Offset: 0x380, Size: 0x10]
	AIGroupAllyDeathInfo[] AllyDeathList;//[Offset: 0x390, Size: 0x10]
	NPCAIGroupRequestController* GroupRequestController;//[Offset: 0x3a0, Size: 0x8]
	ActorComponent* FactionComponent;//[Offset: 0x3a8, Size: 0x8]
	void UpdateTemporaryEnemyEndTime(Actor* InEnemy, float InEndTime);// 0x57f2e3fee041
	void UpdateGroupEnemyEstimatePosition(Actor* InEnemy, Vector InPosition);// 0x57f1e3fee041
	void UpdateEnemyVisibleInfo(Actor* InEnemy, Vector InLastSeenPosition, float InLastSeenTime);// 0x57f0e3fee041
	bool SwitchToEnemy(Actor* InMember);// 0x57efe3fee041
	bool SwitchEnemyToNeutral(Actor* InEnemy);// 0x57eee3fee041
	bool SwitchEnemyToAlly(Actor* InEnemy);// 0x57ede3fee041
	void SetTemporaryEnemyInfo(Actor* InEnemy, bool InIsTemporaryEnemy, float InEndTime, bool InIsFromAlly);// 0x57ece3fee041
	void SetEnemyHartedValue(Actor* InEnemy, int InHartedValue, float IndateTime);// 0x57ebe3fee041
	void RemoveSuspectedPointByType(enum InPlaceType, Actor* InCreator);// 0x57eae3fee041
	void RemoveSuspectedPoint(Character* AIPawn, NPCAIAttentionPoint* InAttentionPoint, bool bRemoveNearCanSee);// 0x57e9e3fee041
	void RemoveNeutral(Actor* InNeutral);// 0x57e8e3fee041
	void RemoveNearSuspectedPoint(const Object* WorldContext, out const Vector InLocation, float XYRange, float ZRange, float PointExistTime);// 0x57e7e3fee041
	bool RemoveFromTeam(Actor* C, bool bRemoveAll);// 0x57e6e3fee041
	void RemoveEnemy(Actor* InEnemy);// 0x57e5e3fee041
	void RemoveAlly(Actor* InAlly);// 0x57e4e3fee041
	bool IsNeutral(Actor* InNeutral);// 0x57e3e3fee041
	bool IsGroupEnemy(Actor* InEnemy);// 0x57e2e3fee041
	bool IsEnoughAllyKillInRange(const Object* WorldContext, out const Vector InSearchCenter, out const float InSearchRange, out const float InSearchTime, out const int InSearchCount);// 0x57e1e3fee041
	bool IsEnoughAllyDeathInRange(const Object* WorldContext, out const Vector InSearchCenter, out const float InSearchRange, out const float InSearchTime, out const int InSearchCount);// 0x57e0e3fee041
	bool IsAlly(Actor* InAlly);// 0x57dfe3fee041
	NPCAIAttentionPoint* GetYoungestSuspectedPoint(Actor* InPawn, float InRadius, bool InPriorityDanger);// 0x57dee3fee041
	int GetValidPointsCount();// 0x57dde3fee041
	Actor*[] GetTeamMembers();// 0x57dce3fee041
	int GetSuspectedPointsNum();// 0x57dbe3fee041
	NPCAIAttentionPoint*[] GetSuspectedPoints();// 0x57dae3fee041
	Actor*[] GetPlayerAllyList();// 0x57d9e3fee041
	int GetNeutralsNum();// 0x57d8e3fee041
	NPCAIAttentionPoint* GetNearestSuspectedPoint(out const Vector InLocation, float Range, out float OutMinDist);// 0x57d7e3fee041
	int GetNearEnemyNum(Vector InCenter, float InRadius);// 0x57d6e3fee041
	bool GetLatestAllyDeathInfo(out AIGroupAllyDeathInfo OutDeathInfo);// 0x57d5e3fee041
	NPCAIGroupRequestController* GetGroupRequestController();// 0x57d4e3fee041
	void GetGroupKnowEnemys(Actor* AIPawn, float InRange, out Actor*[] Enemys, out int EnemysNum, bool bIncludeEnemys);// 0x57d3e3fee041
	ActorComponent* GetFactionComp();// 0x57d2e3fee041
	int GetEnemyNum();// 0x57d1e3fee041
	<Actor*,NPCAIEnemyGroupSingleInfo*> GetEnemyInfoMap();// 0x57d0e3fee041
	NPCAIEnemyGroupSingleInfo* GetEnemyInfo(Actor* InTarget);// 0x57cfe3fee041
	int GetEnemyHartedValue(Actor* InEnemy);// 0x57cee3fee041
	int GetAllyTotalDeathNum();// 0x57cde3fee041
	Actor*[] GetAllyList();// 0x57cce3fee041
	void GetAllInSightEnemys(float InWorldTimeSeconds, out Actor*[] InEnemys);// 0x57cbe3fee041
	void GetAllHadSeenEnemys(float InWorldTimeSeconds, out Actor*[] InEnemys);// 0x57cae3fee041
	void GetAllAllyDeathInfo(out AIGroupAllyDeathInfo[] OutDeathInfoList);// 0x57c9e3fee041
	void FilterInValidTemporaryEnemys(float InTimeSeconds);// 0x57c8e3fee041
	void FilterInValidSuspectedPoints();// 0x57c7e3fee041
	void FilterInValidAllyAndNeutrals();// 0x57c6e3fee041
	bool AddToTeam(Actor* C);// 0x57c5e3fee041
	NPCAIAttentionPoint* AddPointToSearch(Actor* InActor, Vector InPosition, enum InPlaceType, Actor* InCreator);// 0x57c4e3fee041
	void AddNeutral(Actor* InNeutral);// 0x57c3e3fee041
	void AddEnemyForAllyKnow(Actor* InEnemy);// 0x57c2e3fee041
	NPCAIEnemyGroupSingleInfo* AddEnemy(Actor* InEnemy);// 0x57c1e3fee041
	void AddAllyDeathInfo(out const Vector InDeathLocation, out const Vector InKillerLocation, float InNowTime);// 0x57c0e3fee041
	void AddAlly(Actor* InAlly);// 0x57bfe3fee041

--------------------------------
Class: AIShotCountStat
	int Count;//[Offset: 0x0, Size: 0x4]
	float LastTime;//[Offset: 0x4, Size: 0x4]
	float FirstTime;//[Offset: 0x8, Size: 0x4]
	float IntervalToClear;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: NPCAIAttentionPoint.Object
	bool bIsCome;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	Actor* Creator;//[Offset: 0x30, Size: 0x8]
	bool IsFootSounder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	Actor* FootSounderSpawnCharacter;//[Offset: 0x40, Size: 0x8]
	AIController* CheckingPlayer;//[Offset: 0x48, Size: 0x8]
	bool bReachable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	enum PointType;//[Offset: 0x51, Size: 0x1]
	float CreatedTime;//[Offset: 0x54, Size: 0x4]
	float DiedTime;//[Offset: 0x58, Size: 0x4]
	void UpdatePointData(float InNewCreateTime, Vector InNewPosition);// 0x5379e3fee041
	void SetIsCome(bool InIsCome);// 0x5378e3fee041
	void SetDieTime(float LifeTime);// 0x5377e3fee041
	void SetCreator(Actor* InCreator);// 0x5376e3fee041
	bool IsThisPointClose(Vector InCheckLoc);// 0x5375e3fee041
	bool IsOld();// 0x5374e3fee041
	bool IsGrenadeHolding();// 0x5373e3fee041
	bool IsGrenadeHit();// 0x5372e3fee041
	bool IsGrenadeComing();// 0x5371e3fee041
	bool IsFatal();// 0x5370e3fee041
	bool IsDanger();// 0x536fe3fee041
	Vector GetPosition();// 0x536ee3fee041
	NPCAIAttentionPoint* CreateNewAttentionPointWithCoverPointID(Object* InHolder, int InCoverPointID, Vector InBaseLoc, enum InType, Actor* InCreator);// 0x536de3fee041
	NPCAIAttentionPoint* CreateNewAttentionPoint(Object* InHolder, Vector InLoc, enum InType, Actor* InCreator);// 0x536ce3fee041

--------------------------------
Class: AIGroupAllyDeathInfo
	float DeathTime;//[Offset: 0x0, Size: 0x4]
	Vector DeathLocation;//[Offset: 0x4, Size: 0xc]
	Vector KillerLocation;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: NPCAIDynamicGroupInfo.Object
	int DyGroupId;//[Offset: 0x30, Size: 0x4]
	float CreateTime;//[Offset: 0x34, Size: 0x4]
	bool CanAutoRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Actor*[] AllyList;//[Offset: 0x40, Size: 0x10]
	World* WorldPrivate;//[Offset: 0x50, Size: 0x8]
	float GetTimeSeconds();// 0x53a1e3fee041
	Actor*[] GetAllyList();// 0x53a0e3fee041

--------------------------------
Class: NPCAIEnemyGroupSingleInfo.NPCAITargetInfoBase.Object
	bool IsTemporaryEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool IsTemporaryEnemyFromAlly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	float EndTimeOfTemporaryEnemy;//[Offset: 0x60, Size: 0x4]
	Vector EnemyLastSeenPosition;//[Offset: 0x64, Size: 0xc]
	float EndTimeOfSupressed;//[Offset: 0x70, Size: 0x4]
	float LastTimeCreateSuspectedPoint;//[Offset: 0x74, Size: 0x4]
	int HatredValue;//[Offset: 0x78, Size: 0x4]
	float HatredEndtime;//[Offset: 0x7c, Size: 0x4]
	float LastShootGroupAllyTime;//[Offset: 0x80, Size: 0x4]
	int SuspectedPointCreatedNum;//[Offset: 0x84, Size: 0x4]
	float LastIncreaseTimeSuspectedPoint;//[Offset: 0x88, Size: 0x4]
	Vector EnemyLastEstimatePosition;//[Offset: 0x8c, Size: 0xc]
	void SetTemporaryEnemyInfo(bool InIsTemporaryEnemy, float InExpiredTime, bool InIsFromAlly);// 0x53bee3fee041
	void SetSuppressEndTime(float InEndTime);// 0x53bde3fee041
	void SetLastShootGroupAllyTime(float InTime);// 0x53bce3fee041
	void SetHatredValue(int InHatredValue, float InEndTime);// 0x53bbe3fee041
	void SetEnemyLastVisibleInfo(Vector InLastSeenPosition, float InLastSeenTime);// 0x53bae3fee041
	void SetEnemyLastEstimatePosition(Actor* InEnemy, Vector InPosition);// 0x53b9e3fee041
	bool IsRealValidEnemy(float InNowTime);// 0x53b8e3fee041
	int GetSuspectedPointCreatedNum(Actor* InAIPawn);// 0x53b7e3fee041
	float GetLastShootGroupAllyTime();// 0x53b6e3fee041
	int GetHatredValue(float InNowTime);// 0x53b5e3fee041
	Vector GetEnemyLastEstimatePosition();// 0x53b4e3fee041
	void CalculateSuspectedPointCreatedNum(Actor* InAIPawn);// 0x53b3e3fee041
	void AddSuspectedPointCreatedNum(Actor* InAIPawn);// 0x53b2e3fee041

--------------------------------
Class: NPCAITargetInfoBase.Object
	float FirstTimeSeen;//[Offset: 0x28, Size: 0x4]
	float TimeToForgorAboutEnemySec;//[Offset: 0x2c, Size: 0x4]
	AIShotCountStat BeFireCount;//[Offset: 0x30, Size: 0x10]
	AIShotCountStat BeHitCount;//[Offset: 0x40, Size: 0x10]
	float EnemyStartSeenTime;//[Offset: 0x50, Size: 0x4]
	float EnemyLastSeenTime;//[Offset: 0x54, Size: 0x4]
	float EnemyLastKnowTime;//[Offset: 0x58, Size: 0x4]
	void SetTimeToForgorAboutEnemySec(float Value);// 0x53b1e3fee041
	void SetTimeLastSeen(float InNowTime);// 0x53b0e3fee041
	void SetTimeLastKnow(float InNowTime);// 0x53afe3fee041
	void SetFirstTimeSeen(float InNowTime);// 0x53aee3fee041
	void SetBeHitTime(float InNowTime);// 0x53ade3fee041
	void SetBeFireTime(float InNowTime);// 0x53ace3fee041
	float GetTimeToForgorAboutEnemySec();// 0x53abe3fee041
	float GetTimeLastSeen();// 0x53aae3fee041
	float GetTimeLastKnow();// 0x53a9e3fee041
	float GetLastBeHitTime();// 0x53a8e3fee041
	float GetLastBeFireTime();// 0x53a7e3fee041
	float GetFirstTimeSeen();// 0x53a6e3fee041
	float GetFirstBeHitTime();// 0x53a5e3fee041
	float GetFirstBeFireTime();// 0x53a4e3fee041
	int GetBeHitCount();// 0x53a3e3fee041
	int GetBeFireCount();// 0x53a2e3fee041

--------------------------------
Class: NPCAIGroupRequestController.Object
	NPCAIGroupBaseRequest*[] GroupRequestsList;//[Offset: 0x28, Size: 0x10]
	float LastTimeAutoFiltRequests;//[Offset: 0x38, Size: 0x4]
	bool TryAddRequest(NPCAIGroupBaseRequest* InRequest);// 0x5427e3fee041
	NPCAIGroupBaseRequest* TryActivateWarnPlayerRequest(Actor* InRequester, Character* InWarnPlayer, int InMaxExecuterCount, class NPCAIGroupWarnPlayerRequest InRequestClass, bool InIsNeedAllCompleted);// 0x5426e3fee041
	NPCAIGroupBaseRequest* TryActivateThrowGrenadeRequest(Actor* InRequester, Character* InEnemy, Vector InThrowPoint, int InMaxExecuterCount, class NPCAIGroupThrowGrenadeRequest InRequestClass, bool InIsNeedAllCompleted);// 0x5425e3fee041
	NPCAIGroupBaseRequest* TryActivateSussperssionFireRequest(Actor* InRequester, Character* InEnemy, Vector InFirePoint, int InMaxExecuterCount, class NPCAIGroupSusspressionFireRequest InRequestClass, bool InIsNeedAllCompleted);// 0x5424e3fee041
	NPCAIGroupBaseRequest* TryActivateRequestByGroup(Object* InWorldContextObject, class NPCAIGroupBaseRequest InRequestClass, int InMaxExecuterCount, bool InIsNeedAllCompleted, bool InOnlyInDynamicGroup, bool InCanExecuteByMyself, out const Actor*[] InPossibleExecuterList);// 0x5423e3fee041
	NPCAIGroupBaseRequest* TryActivateRequestByClass(Actor* InRequester, class NPCAIGroupBaseRequest InRequestClass, int InMaxExecuterCount, bool InIsNeedAllCompleted, bool InCanExecuteByMyself, out const Actor*[] InPossibleExecuterList);// 0x5422e3fee041
	NPCAIGroupBaseRequest* TryActivateRequest(Actor* InRequester, NPCAIGroupBaseRequest* InRequestInstance, int InMaxExecuterCount, bool InIsNeedAllCompleted, bool InCanExecuteByMyself, out const Actor*[] InPossibleExecuterList);// 0x5421e3fee041
	NPCAIGroupBaseRequest* TryActivateOpenDoorRequest(Actor* InRequester, Actor* InDoor, class NPCAIGroupDoorOpenRequest InRequestClass, bool InIsNeedAllCompleted);// 0x5420e3fee041
	NPCAIGroupBaseRequest* TryActivateHoldRequest(Actor* InRequester, Vector InDirection, int InMaxExecuterCount, class NPCAIGroupHoldRequest InRequestClass, bool InIsNeedAllCompleted);// 0x541fe3fee041
	NPCAIGroupBaseRequest* TryActivateHideRequest(Actor* InRequester, int InMaxExecuterCount, class NPCAIGroupHideRequest InRequestClass, bool InIsNeedAllCompleted);// 0x541ee3fee041
	NPCAIGroupBaseRequest* TryActivateGoToPointRequest(Actor* InRequester, Vector InPoint, float InRadius, int InMaxExecuterCount, class NPCAIGroupGoToPointRequest InRequestClass, bool InIsNeedAllCompleted);// 0x541de3fee041
	NPCAIGroupBaseRequest* TryActivateFollowMeRequest(Actor* InRequester, int InMaxExecuterCount, class NPCAIGroupFollowMeRequest InRequestClass, bool InIsNeedAllCompleted);// 0x541ce3fee041
	NPCAIGroupBaseRequest* TryActivateCustomRequest(Actor* InRequester, NPCAIGroupCustomRequest* InRequest, Actor* PossibleExecuter, bool bResetSearchTime, bool InIsNeedAllCompleted, bool bCleanPendingRequest);// 0x541be3fee041
	void RequestGiveUpToDo(NPCAIGroupBaseRequest* InRequest, Actor* InExecuter);// 0x541ae3fee041
	void RequestCompletedToDo(NPCAIGroupBaseRequest* InRequest, Actor* InExecuter);// 0x5419e3fee041
	void RemoveRequestInList(NPCAIGroupBaseRequest* InRequest);// 0x5418e3fee041
	void RemoveAllByRequester(Actor* InRequester);// 0x5417e3fee041
	NPCAIGroupBaseRequest*[] GetGroupRequestsList();// 0x5416e3fee041
	int GetGroupRequestListByType(int InRequestType, out NPCAIGroupBaseRequest*[] OutRequestsList);// 0x5415e3fee041
	int GetGroupRequestCountByType(int InRequestType);// 0x5414e3fee041
	int GetGroupRequestCount();// 0x5413e3fee041
	NPCAIGroupBaseRequest* GetGroupRequestByType(int InRequestType);// 0x5412e3fee041
	NPCAIGroupBaseRequest* FindForMe(Actor* InExecuter);// 0x5411e3fee041
	void FilterInValidRequest(const Object* WorldContext);// 0x5410e3fee041

--------------------------------
Class: NPCAIGroupBaseRequest.Object
	int RequestType;//[Offset: 0x28, Size: 0x4]
	int DynamicGroupId;//[Offset: 0x2c, Size: 0x4]
	bool bOnlyInDynamicGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	enum RequestPriority;//[Offset: 0x31, Size: 0x1]
	bool bCanExecuteByMyself;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	int MaxTakenCount;//[Offset: 0x34, Size: 0x4]
	bool IsNeedAllCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int CurrentTakenCount;//[Offset: 0x3c, Size: 0x4]
	int CurrentCompleteCount;//[Offset: 0x40, Size: 0x4]
	int MaxRequestCount;//[Offset: 0x44, Size: 0x4]
	int RequestTypeNeedCompletedInPast;//[Offset: 0x48, Size: 0x4]
	float StartTimeOfTake;//[Offset: 0x4c, Size: 0x4]
	float EndTimeOfTake;//[Offset: 0x50, Size: 0x4]
	float EndTimeOfExecute;//[Offset: 0x54, Size: 0x4]
	Actor* Requester;//[Offset: 0x60, Size: 0x8]
	Object* WorldContext;//[Offset: 0x68, Size: 0x8]
	Actor*[] ExecuterList;//[Offset: 0x70, Size: 0x10]
	Actor*[] HistoryExecuterList;//[Offset: 0x80, Size: 0x10]
	Actor*[] PossibleExecuterList;//[Offset: 0x90, Size: 0x10]
	void Take(Actor* InExecuter);// 0x53ffe3fee041
	bool SetRequestTypeNeedCompletedInPast();// 0x53fee3fee041
	void SetPossibleExecuterList(out const Actor*[] InExecuterList);// 0x53fde3fee041
	void SetEndTimeOnTake(float InEndTime);// 0x53fce3fee041
	void SetEndTimeOnExecute(float InEndTime);// 0x53fbe3fee041
	void RemoveFromExecuterList(Actor* InExecuter);// 0x53fae3fee041
	bool IsPossibleExecuter(Actor* InExecuter);// 0x53f9e3fee041
	bool IsInHistoryExecuter(Actor* InExecuter);// 0x53f8e3fee041
	bool IsInExecuter(Actor* InExecuter);// 0x53f7e3fee041
	bool IsGroupAsRequester();// 0x53f6e3fee041
	bool InitRequestType();// 0x53f5e3fee041
	void InitRequestInfo(Actor* InRequester, int InMaxTakenCount, float InEndOfTakeTime, Object* InWorldContext);// 0x53f4e3fee041
	bool InitRequestByBluePrint();// 0x53f3e3fee041
	float GetStartTimeOfTake();// 0x53f2e3fee041
	FString GetRequestName();// 0x53f1e3fee041
	Actor* GetRequester();// 0x53f0e3fee041
	Actor*[] GetExecuterList();// 0x53efe3fee041
	float GetEndTimeOfTake();// 0x53eee3fee041
	void Dispose();// 0x53ede3fee041
	bool CheckIsEndOfTake(float InCurrentRuntime);// 0x53ece3fee041
	bool CheckIsEndOfExecute(float InCurrentRuntime);// 0x53ebe3fee041
	bool CheckCanTakeRequestForLastRequestLimit(Actor* InExecuter);// 0x53eae3fee041
	bool CheckCanTakeRequestForGroupLimit(Actor* InExecuter);// 0x53e9e3fee041
	bool CheckCanTakeRequestAllLimit(Actor* InExecuter);// 0x53e8e3fee041
	bool CheckCanTakeRequest(Actor* InExecuter);// 0x53e7e3fee041
	bool CanRequest();// 0x53e6e3fee041
	bool CanProceed(Actor* InExecuter);// 0x53e5e3fee041
	void AddPossibleExecuter(Actor* InExecuter);// 0x53e4e3fee041

--------------------------------
Class: NPCAIGroupWarnPlayerRequest.NPCAIGroupBaseRequest.Object
	Actor* WarnPlayer;//[Offset: 0xa8, Size: 0x8]
	enum StateWarnPlayer;//[Offset: 0xb0, Size: 0x1]
	float DistanceToRequester;//[Offset: 0xb4, Size: 0x4]
	Vector PointToShoot;//[Offset: 0xb8, Size: 0xc]
	float TimeOfStay;//[Offset: 0xc4, Size: 0x4]
	int CountOfWarns;//[Offset: 0xc8, Size: 0x4]
	bool ShallEndStay(Actor* InExecuter);// 0x5433e3fee041
	void OnStateToDo(Actor* InExecuter);// 0x5432e3fee041
	void NextState(Actor* InExecuter);// 0x5431e3fee041
	bool IsWarnPlayerAwayFromRequester();// 0x5430e3fee041
	void InitData(Actor* InTargetToWarn);// 0x542fe3fee041
	Vector GetPointToShoot();// 0x542ee3fee041
	void CalculatePointToShoot();// 0x542de3fee041

--------------------------------
Class: NPCAIGroupThrowGrenadeRequest.NPCAIGroupBaseRequest.Object
	Actor* EnemyTarget;//[Offset: 0xa8, Size: 0x8]
	Vector PointTarget;//[Offset: 0xb0, Size: 0xc]
	bool IsThrowEnemy();// 0x542ce3fee041
	bool IsEnemyLost();// 0x542be3fee041
	void InitEnemy(Actor* InEnemy, Vector InThrowPoint);// 0x542ae3fee041

--------------------------------
Class: NPCAIGroupSusspressionFireRequest.NPCAIGroupBaseRequest.Object
	enum TargetType;//[Offset: 0xa4, Size: 0x1]
	Actor* EnemyTarget;//[Offset: 0xa8, Size: 0x8]
	Vector PointTarget;//[Offset: 0xb0, Size: 0xc]
	bool IsEnemyLost();// 0x5429e3fee041
	void InitEnemy(Actor* InEnemy, Vector InFirePoint);// 0x5428e3fee041

--------------------------------
Class: NPCAIGroupDoorOpenRequest.NPCAIGroupBaseRequest.Object
	Actor* Door;//[Offset: 0xa8, Size: 0x8]
	void InitData(Actor* InDoor);// 0x5400e3fee041

--------------------------------
Class: NPCAIGroupHoldRequest.NPCAIGroupBaseRequest.Object
	Vector Direction;//[Offset: 0xa4, Size: 0xc]
	void InitData(Vector InDirection);// 0x5405e3fee041
	Vector GetProjectionPoint(Vector InP1, Vector InP2, Vector InP3);// 0x5404e3fee041
	void CalculateDirection(Actor* InExecuter, Vector InDirection, Vector InRequesterHeadPos);// 0x5403e3fee041

--------------------------------
Class: NPCAIGroupHideRequest.NPCAIGroupBaseRequest.Object

--------------------------------
Class: NPCAIGroupGoToPointRequest.NPCAIGroupBaseRequest.Object
	Vector PointToGo;//[Offset: 0xa4, Size: 0xc]
	float Radius;//[Offset: 0xb0, Size: 0x4]
	void InitTargetPoint(Vector InTargetPoint, float InRadius);// 0x5402e3fee041

--------------------------------
Class: NPCAIGroupFollowMeRequest.NPCAIGroupBaseRequest.Object
	float TimeLimit;//[Offset: 0xa4, Size: 0x4]
	bool IsExecuterFar(Actor* InExecuter);// 0x5401e3fee041

--------------------------------
Class: NPCAIGroupCustomRequest.NPCAIGroupBaseRequest.Object

--------------------------------
Class: NPCAITargetInfo.NPCAITargetInfoBase.Object
	enum[] BodyPartsInArmor;//[Offset: 0x60, Size: 0x10]
	float LastCalculateBodyPartsInArmorTime;//[Offset: 0x70, Size: 0x4]
	Actor* Person;//[Offset: 0x2b0, Size: 0x8]
	Actor* AIPawn;//[Offset: 0x2b8, Size: 0x8]
	NPCAIPropertyComponent_Look* LookProps;//[Offset: 0x2c0, Size: 0x8]
	NPCAIPropertyComponent_Aiming* AimingProps;//[Offset: 0x2c8, Size: 0x8]
	enum VisibileOnlyBySense;//[Offset: 0x2d0, Size: 0x1]
	bool ShallSeenEnemy();// 0x57bee3fee041
	bool ShallKnowEnemy();// 0x57bde3fee041
	void SetVisibleFlashLight(bool InVisible);// 0x57bce3fee041
	void SetVisible(bool InVisible);// 0x57bbe3fee041
	void SetCanShoot(bool Value);// 0x57bae3fee041
	void ResetCalculatePartInterval();// 0x57b9e3fee041
	void RandomUpperPartToShoot();// 0x57b8e3fee041
	void RandomArmToShoot();// 0x57b7e3fee041
	bool IsVisibleFlashLight(float FlashLightSeeDuration);// 0x57b6e3fee041
	bool IsVisible();// 0x57b5e3fee041
	bool IsRealVisible();// 0x57b4e3fee041
	bool IsPersonValid();// 0x57b3e3fee041
	bool IsInShotProtectedTime();// 0x57b2e3fee041
	bool IsHideInGrassOrSmoke();// 0x57b1e3fee041
	bool IsDBNO();// 0x57b0e3fee041
	bool IsArmorCanProtected(enum PartType, bool bRealtimeUpdate);// 0x57afe3fee041
	bool HaveSeenPerson();// 0x57aee3fee041
	enum GetVisibleOnlyBySense();// 0x57ade3fee041
	Actor* GetPerson();// 0x57ace3fee041
	enum GetPartTypeToShoot();// 0x57abe3fee041
	float GetPartToShootOfGrassRatio();// 0x57aae3fee041
	enum GetPartToShootOfBarrier();// 0x57a9e3fee041
	Vector GetPartToShoot();// 0x57a8e3fee041
	float GetLastFireMeTime();// 0x57a7e3fee041
	float GetInSightBodyPartsLocation(out Vector[] BodyPartsLocation);// 0x57a6e3fee041
	float GetGroupSharedTimeLastSeen();// 0x57a5e3fee041
	Vector GetGroupSharedPositionLastSeen();// 0x57a4e3fee041
	Vector GetGroupSharedPositionEstimate();// 0x57a3e3fee041
	Vector GetEnemyLastPosition();// 0x57a2e3fee041
	Vector GetEnemyEstimatePosition();// 0x57a1e3fee041
	float GetDistance();// 0x57a0e3fee041
	Vector GetCurrentPositon();// 0x579fe3fee041
	int GetCanSeeBodyPartsNum();// 0x579ee3fee041
	bool GetBodyPartVisibleInfo(enum InBodyPart, out AIBodyPartVisibilityInfo OutInfo);// 0x579de3fee041
	bool GetBodyPartCanShoot(out const enum InBodyPart);// 0x579ce3fee041
	AIBodyPartVisibilityInfo[] GetAllBodyPartVisibleInfo();// 0x579be3fee041
	Actor* GetAlivePerson();// 0x579ae3fee041
	bool CanShoot();// 0x5799e3fee041
	void CalculatePartToShoot(bool bIgnoreInterval);// 0x5798e3fee041
	void CalculateBodyPartForShoot(bool InCanHead, bool InCanChest, bool InStomach, bool InCanLArm, bool InCanRArm, bool InCanLLeg, bool InCanRLeg);// 0x5797e3fee041
	void CalculateBodyPartByEnemyArmor(bool bRealtimeUpdate);// 0x5796e3fee041

--------------------------------
Class: AIBodyPartVisibilityInfo
	enum BodyPartType;//[Offset: 0x0, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float LastCanSeeTime;//[Offset: 0x4, Size: 0x4]
	int GrassWeight;//[Offset: 0x8, Size: 0x4]
	int ShootCalculateCount;//[Offset: 0xc, Size: 0x4]
	enum Barrier;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NPCAIPropertyComponent_Look.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	float GetWeakenVisionRadiusScaleWhileRotate();// 0x55e2e3fee041
	float GetWeakenVisionRadiusScaleMaxWhileRotate();// 0x55e1e3fee041
	float GetVisibleAngNormal();// 0x55e0e3fee041
	float GetVisibleAngNight();// 0x55dfe3fee041
	float GetVisibleAngLight();// 0x55dee3fee041
	float GetTimeCreateSuspectedPointCheckIfOutSideSightPIE();// 0x55dde3fee041
	float GetTimeCanSeeEnemyIfFlashLight();// 0x55dce3fee041
	float GetTimeCanSeeEnemyIfBeenShoot();// 0x55dbe3fee041
	float GetSmokeSightIgnoreDistance();// 0x55dae3fee041
	enum GetSightPriority();// 0x55d9e3fee041
	float GetRecoverVisionRadiusSpeedAfterWeaken();// 0x55d8e3fee041
	float GetRainySightRadiusMin();// 0x55d7e3fee041
	float GetRainySightRadiusMax();// 0x55d6e3fee041
	float GetNormalVisionRadiusLost();// 0x55d5e3fee041
	float GetNormalVisionRadius();// 0x55d4e3fee041
	float GetNormalVisionCoef();// 0x55d3e3fee041
	float GetNightVisionRadiusLost();// 0x55d2e3fee041
	float GetNightVisionRadius();// 0x55d1e3fee041
	float GetMiddleDistance();// 0x55d0e3fee041
	float GetLostSightRatioByFlashLightBurn(float FlashBurnValue);// 0x55cfe3fee041
	Vector GetLookPositionOffsetByPosture(enum PoseType, enum LeanType);// 0x55cee3fee041
	Vector GetLookPositionOffset();// 0x55cde3fee041
	float GetLightVisionRadiusLost();// 0x55cce3fee041
	float GetLightVisionRadius();// 0x55cbe3fee041
	float GetLandscapeGrassSightIgnoreAngle();// 0x55cae3fee041
	float GetIntervalCheckIfOutSideSightPIE();// 0x55c9e3fee041
	float GetIngoreNolightRadius();// 0x55c8e3fee041
	float GetGrassSightIgnoreDistance();// 0x55c7e3fee041
	float GetGrassSightBlockPowner();// 0x55c6e3fee041
	float GetGrassSightBlockDensity100();// 0x55c5e3fee041
	float GetGoalToFullDissapear();// 0x55c4e3fee041
	float GetGoalNeedToCalculateFirstAppearDistance();// 0x55c3e3fee041
	float GetGoalFirstAppearMinTime();// 0x55c2e3fee041
	float GetGoalFirstAppearMaxTime();// 0x55c1e3fee041
	float GetGoalFirstAppearCalculateCoef();// 0x55c0e3fee041
	float GetGoalFirstAppearAngleCalculateCoef();// 0x55bfe3fee041
	void GetFogVisionInfo(float FogDensity, out float OutFogMin, out float OutFogMax);// 0x55bee3fee041
	float GetFogShotInTimeCanIgnoreFogVision();// 0x55bde3fee041
	float GetFogDensityAffectLimit();// 0x55bce3fee041
	float GetFogDelayTimeToSeeMax();// 0x55bbe3fee041
	float GetFarDistance();// 0x55bae3fee041
	float GetDistNormalSuspectedPointInterval();// 0x55b9e3fee041
	float GetDistDangerSuspectedPointInterval();// 0x55b8e3fee041
	float GetDistanceCheckIfOutSideSightPIE();// 0x55b7e3fee041
	float GetCloseDistance();// 0x55b6e3fee041
	enum GetAIProfileType();// 0x55b5e3fee041

--------------------------------
Class: NPCAIPropertyComponent_Mind.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	float GetTimeToForgorAboutEnemySec();// 0x55f1e3fee041
	float GetTimeOfHitForGoalEnemy();// 0x55f0e3fee041
	float GetTimeNotSeeForGoalEnemy();// 0x55efe3fee041
	float GetScoreToDistanceForGoalEnemy();// 0x55eee3fee041
	float GetScoreMultipleFaceAngleForGoalEnemyByCos(float AngleCos);// 0x55ede3fee041
	float GetScoreCutOfZoomWeaponForGoalEnemy();// 0x55ece3fee041
	float GetScoreCutOfHitMeForGoalEnemy();// 0x55ebe3fee041
	float GetScoreCutOfHitAllyForGoalEnemy();// 0x55eae3fee041
	float GetNoRepeatQREMyselfAtDistance();// 0x55e9e3fee041
	float GetNoRepeatQREEnemyAtDistance();// 0x55e8e3fee041
	int GetItemCheapPriceCanDestoryWhenPickUp();// 0x55e7e3fee041
	float GetHatredValueToDist();// 0x55e6e3fee041
	float GetCareTargetHasZoomWeaponDistance();// 0x55e5e3fee041
	float GetCalculateGoalEnemyPriporityInterval();// 0x55e4e3fee041
	enum GetAIProfileType();// 0x55e3e3fee041

--------------------------------
Class: NPCAIPropertyComponent_Hearing.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	float GetSuspectedPointPosUpdateInterval();// 0x55ade3fee041
	int GetSuspectedPointAccuracyMaxNum();// 0x55ace3fee041
	float GetSuspectedPointAccuracyIncreaseGapTime();// 0x55abe3fee041
	float GetSuspectedPointAccuracyDampingGapTime();// 0x55aae3fee041
	float GetPowerDanger();// 0x55a9e3fee041
	float GetNoisePowerWalk();// 0x55a8e3fee041
	float GetNoisePowerSprint();// 0x55a7e3fee041
	float GetNoisePowerSlientWalk();// 0x55a6e3fee041
	float GetNoisePowerSlientCrouch();// 0x55a5e3fee041
	float GetNoisePowerSilencedFire();// 0x55a4e3fee041
	float GetNoisePowerProne();// 0x55a3e3fee041
	float GetNoisePowerGunFire();// 0x55a2e3fee041
	float GetNoisePowerGrenadeExplosive();// 0x55a1e3fee041
	float GetNoisePowerFootStepSounder();// 0x55a0e3fee041
	float GetNoisePowerDoorWreck();// 0x559fe3fee041
	float GetNoisePowerDoorOpen();// 0x559ee3fee041
	float GetNoisePowerCrouch();// 0x559de3fee041
	float GetHearingPowerCoef();// 0x559ce3fee041
	float GetGunHitCloseDist();// 0x559be3fee041
	float GetGunFarDist();// 0x559ae3fee041
	float GetGunBulletTrackFromMeRadius();// 0x5599e3fee041
	float GetGunBulletTrackCheckInFireDistance();// 0x5598e3fee041
	float GetFootStepFarDist();// 0x5597e3fee041
	float GetCoefSilentGunSuspectedPointOffset();// 0x5596e3fee041
	float GetCoefGunSuspectedPointOffset();// 0x5595e3fee041
	float GetCoefFootStepSuspectedPointOffset();// 0x5594e3fee041
	bool GetAutoBeEnemyIfCreateDanageNoise();// 0x5593e3fee041
	enum GetAIProfileType();// 0x5592e3fee041

--------------------------------
Class: NPCAIPropertyComponent_Health.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	float GetStomachEnduranceMax();// 0x5591e3fee041
	float GetRightLegEnduranceMax();// 0x5590e3fee041
	float GetRightArmEnduranceMax();// 0x558fe3fee041
	float GetMaxHealthAdjustment();// 0x558ee3fee041
	float GetLeftLegEnduranceMax();// 0x558de3fee041
	float GetLeftArmEnduranceMax();// 0x558ce3fee041
	float GetHeadEnduranceMax();// 0x558be3fee041
	bool GetEnableDBNO();// 0x558ae3fee041
	float GetDangerCoefOfDBNO();// 0x5589e3fee041
	float GetChestEnduranceMax();// 0x5588e3fee041
	enum GetAIProfileType();// 0x5587e3fee041

--------------------------------
Class: NPCAIPropertyComponent_Grenade.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	Vector GetUaThrowPositionOffsetByPosture(enum PoseType, enum LeanType, out const Rotator Rotator);// 0x5586e3fee041
	Vector GetUaThrowPositionOffset(out const Rotator Rotator);// 0x5585e3fee041
	float GetSelfHoldingGrenadeProbability();// 0x5584e3fee041
	float GetHoldingGrenadeBeKonwIfInDistance();// 0x5583e3fee041
	float GetComingGrenadeBeKonwIfFallInDistance();// 0x5582e3fee041
	float GetCloseGrenadeHitDistance();// 0x5581e3fee041
	enum GetAIProfileType();// 0x5580e3fee041

--------------------------------
Class: NPCAIPropertyComponent_Damage.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	void SetDamageScale(float Value);// 0x557ee3fee041
	bool GetTeamGrenadeHarmEnable();// 0x557de3fee041
	bool GetFactionGrenadeHarmEnable();// 0x557ce3fee041
	float GetDamageScale();// 0x557be3fee041
	enum GetAIProfileType();// 0x557ae3fee041

--------------------------------
Class: AIGrassOctreeElement

--------------------------------
Class: NPCAIGoalTarget.Object
	NPCAIAttentionPoint* AttentionPoint;//[Offset: 0x28, Size: 0x8]
	AIController* AIOwner;//[Offset: 0x30, Size: 0x8]
	void SetZeroGoal();// 0x53e3e3fee041
	void SetGoalTargetPoint(NPCAIAttentionPoint* InPoint);// 0x53e2e3fee041
	void SetAIOwner(AIController* InOwner);// 0x53e1e3fee041
	void PointLookComplete(int InLookingIndex);// 0x53e0e3fee041
	bool IsDanger();// 0x53dfe3fee041
	bool HaveZeroTarget();// 0x53dee3fee041
	bool HavePlaceTarget();// 0x53dde3fee041
	bool HaveMainTarget();// 0x53dce3fee041
	enum GetPointType();// 0x53dbe3fee041
	NPCAIAttentionPoint* GetGoalTargetPoint();// 0x53dae3fee041
	float GetCreatedTime();// 0x53d9e3fee041
	void ClearGoalTarget();// 0x53d8e3fee041
	bool CanCheckBody();// 0x53d7e3fee041

--------------------------------
Class: AIBackUpCoverPointFinder
	Vector AIPosistion;//[Offset: 0x0, Size: 0xc]
	Vector EnemyPosition;//[Offset: 0xc, Size: 0xc]
	float LastTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AIStackGunRecord
	bool CanStackGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector MyPosition;//[Offset: 0x4, Size: 0xc]
	Vector EnemyPosition;//[Offset: 0x10, Size: 0xc]
	enum AILean;//[Offset: 0x1c, Size: 0x1]
	enum AIPose;//[Offset: 0x1d, Size: 0x1]
	Vector GunPoint;//[Offset: 0x20, Size: 0xc]
	Vector EeyPoint;//[Offset: 0x2c, Size: 0xc]
	Vector ShootPoint;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: AISteeringInfo
	float FowardDistance;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Vector Direction;//[Offset: 0x10, Size: 0xc]
	enum Type;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: NPCAIQueryRoundEnvironmentResult
	Vector AILocation;//[Offset: 0x0, Size: 0xc]
	Vector EnemyLocation;//[Offset: 0xc, Size: 0xc]
	bool LCanMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	Vector LMovePoint;//[Offset: 0x1c, Size: 0xc]
	bool RCanMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	Vector RMovePoint;//[Offset: 0x2c, Size: 0xc]
	bool FCanMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Vector FMovePoint;//[Offset: 0x3c, Size: 0xc]
	bool BCanMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	Vector BMovePoint;//[Offset: 0x4c, Size: 0xc]
	bool LCanDefense;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool RCanDefense;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool LCanAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool RCanAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]

--------------------------------
Class: AISceneEventsTriggerManager.Object
	AISceneEventMessage*[] SceneEventsList;//[Offset: 0x28, Size: 0x10]
	int TriggerSceneEvent(AISceneEventMessage* SceneEvtMessage, out const Vector TriggerLocation, float CoverInRange);// 0x5335e3fee041
	void RemoveSceneEventByUniqueId(int EvtUniqueId);// 0x5334e3fee041
	void RemoveSceneEvent(AISceneEventMessage* SceneEvtMessage);// 0x5333e3fee041
	void OnDSTick();// 0x5332e3fee041
	AISceneEventMessage* GetSceneEventByUniqueId(int EvtUniqueId);// 0x5331e3fee041
	bool FindNearSceneEvents(AISceneEventMessage*[] ActivedEvents, out const Vector CenterPos, float Radius);// 0x5330e3fee041
	void FilterExpiredSceneEvents();// 0x532fe3fee041
	void ClearExpiredSceneEventOnAI(int EvtUniqueId);// 0x532ee3fee041

--------------------------------
Class: AISceneEventMessage.Object
	float ValidTime;//[Offset: 0x28, Size: 0x4]
	float ValidScope;//[Offset: 0x2c, Size: 0x4]
	int EvtUniqueId;//[Offset: 0x30, Size: 0x4]
	float StartTime;//[Offset: 0x34, Size: 0x4]
	float EndTime;//[Offset: 0x38, Size: 0x4]
	Vector TriggerLocation;//[Offset: 0x3c, Size: 0xc]
	bool IsExpired(float CurrentTimeSec);// 0x532de3fee041

--------------------------------
Class: CoverPointOctreeData
	int CoverID;//[Offset: 0x0, Size: 0x4]
	enum PointType;//[Offset: 0x4, Size: 0x1]
	Vector Location;//[Offset: 0x10, Size: 0xc]
	Vector Direction;//[Offset: 0x1c, Size: 0xc]
	Vector RightDirection;//[Offset: 0x28, Size: 0xc]
	CoverPoseData[] PoseData;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: CoverPoseData
	enum PoseType;//[Offset: 0x0, Size: 0x1]
	bool bLShootable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bRShootable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bMShootable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Vector Direction;//[Offset: 0x10, Size: 0xc]
	float DefenceRatio;//[Offset: 0x1c, Size: 0x4]
	float LDefenceAngle;//[Offset: 0x20, Size: 0x4]
	float RDefenceAngle;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SGCharacterAIComponent.ActorComponent.Object
	bool bForceShowHighPrecisionHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bShowBagMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bShowVestMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bShowVestBagMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1]
	bool bShowHelmetMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	void OnTakeDamage(Controller* Causer, float AttemptedDamage, float Damage, Vector Momentum, Actor* HitArmor, out const SGPointDamageEvent DamageEvent, Actor* DamageCauser, DamageEventObject* DamageEventObject, bool bHitPenetrateArmor);// 0x39b4e3fee041

--------------------------------
Class: SGContextMenu.SGUserWidget.UserWidget.Widget.Visual.Object
	class UserWidget* SlotClass;//[Offset: 0x2c8, Size: 0x8]
	SGContextMenuSlot*[] SlotArray;//[Offset: 0x2d0, Size: 0x10]
	ContextMenuSlotType[] SlotTypeArray;//[Offset: 0x2e0, Size: 0x10]
	VerticalBox* SlotVerticalBox;//[Offset: 0x2f0, Size: 0x8]

--------------------------------
Class: SGContextMenuSlot.SGUserWidget.UserWidget.Widget.Visual.Object
	DataTable* SlotSettings;//[Offset: 0x2c8, Size: 0x8]
	SGContextMenu* ParentWidget;//[Offset: 0x2d0, Size: 0x8]
	Button* SlotButton;//[Offset: 0x2e0, Size: 0x8]
	TextBlock* TextName;//[Offset: 0x2e8, Size: 0x8]
	Image* SlotIcon;//[Offset: 0x2f0, Size: 0x8]

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x140, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x148, Size: 0x298]
	LinearColor ColorAndOpacity;//[Offset: 0x3e0, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x3f0, Size: 0x10]
	byte ClickMethod;//[Offset: 0x400, Size: 0x1]
	byte TouchMethod;//[Offset: 0x401, Size: 0x1]
	byte PressMethod;//[Offset: 0x402, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x403, Size: 0x1]
	bool isGray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 0x1]
	float ClickCdTime;//[Offset: 0x408, Size: 0x4]
	delegate OnClicked;//[Offset: 0x418, Size: 0x10]
	delegate OnPressed;//[Offset: 0x428, Size: 0x10]
	delegate OnReleased;//[Offset: 0x438, Size: 0x10]
	delegate OnHovered;//[Offset: 0x448, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x458, Size: 0x10]
	void TransSizeToOutlineMaterial();// 0x4275e3fee041
	void ShowButtonOutlineMaterial(MaterialInstanceDynamic* matDynamic, out SlateBrush OriginalBrush, out float OriginalAlpha);// 0x4274e3fee041
	void SetTouchMethod(byte InTouchMethod);// 0x4273e3fee041
	void SetStyle(out const ButtonStyle InStyle);// 0x4272e3fee041
	void SetPressMethod(byte InPressMethod);// 0x4271e3fee041
	void SetGray(bool gray);// 0x4270e3fee041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x426fe3fee041
	void SetClickMethod(byte InClickMethod);// 0x426ee3fee041
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x426de3fee041
	bool IsPressed();// 0x426ce3fee041
	void HideButtonOutlineMaterial(out SlateBrush OriginalBrush, float OriginalAlpha);// 0x426be3fee041
	Vector2D GetPressedScreenSpacePosition();// 0x426ae3fee041

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x148, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x160, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x170, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x198, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x1a8, Size: 0x58]
	SlateBrush StrikeBrush;//[Offset: 0x200, Size: 0x90]
	Vector2D ShadowOffset;//[Offset: 0x290, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x298, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x2a8, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x2b8, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 0x1]
	enum TextTransformPolicy;//[Offset: 0x2be, Size: 0x1]
	enum LocalizationFeature;//[Offset: 0x2bf, Size: 0x1]
	bool LocalizationUpper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x685be3fee041
	void SetText(FText InText);// 0x685ae3fee041
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x6859e3fee041
	void SetShadowOffset(Vector2D InShadowOffset);// 0x6858e3fee041
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x6857e3fee041
	void SetOpacity(float InOpacity);// 0x6856e3fee041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x6855e3fee041
	void SetFont(SlateFontInfo InFontInfo);// 0x6854e3fee041
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x6853e3fee041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x6852e3fee041
	FText GetText();// 0x6851e3fee041
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x6850e3fee041
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x684fe3fee041

--------------------------------
Class: ContextMenuSlotType.TableRowBase
	enum SlotType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x686ae3fee041

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x60, Size: 0x8]
	Margin Padding;//[Offset: 0x68, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x80, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x81, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x686ee3fee041
	void SetSize(SlateChildSize InSize);// 0x686de3fee041
	void SetPadding(Margin InPadding);// 0x686ce3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x686be3fee041

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4]
	byte SizeRule;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SGPCUIModeComponent.ActorComponent.Object
	void SetUIMode(enum InUIMode);// 0x4c9ae3fee041
	void ServerSetUIMode(enum InUIMode);// 0x4c99e3fee041
	bool IsBagOpen();// 0x4c98e3fee041
	enum GetUIModeEx();// 0x4c97e3fee041
	enum GetUIMode();// 0x4c96e3fee041

--------------------------------
Class: SGPCStatisComponent.ActorComponent.Object
	<int,StatisDefaultParams> DeviceLevel_Config;//[Offset: 0xb8, Size: 0x50]
	StatisDefaultParams CurSelectConfigParam;//[Offset: 0x108, Size: 0x14]
	PCReportStatisInfo CurReportStatisInfo;//[Offset: 0x11c, Size: 0x24]
	bool bEnableLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	int SvrMaxPing;//[Offset: 0x154, Size: 0x4]
	int SvrMinPing;//[Offset: 0x158, Size: 0x4]
	int SvrAvgPing;//[Offset: 0x15c, Size: 0x4]
	int SvrStddevPing;//[Offset: 0x160, Size: 0x4]
	int SvrPingTimes;//[Offset: 0x164, Size: 0x4]
	int SvrAbnormalPingTimes;//[Offset: 0x168, Size: 0x4]
	int SvrMaxPingCount;//[Offset: 0x188, Size: 0x4]
	int SvrAbnormalPingConfInMS;//[Offset: 0x18c, Size: 0x4]
	int SvrReconnectTimes;//[Offset: 0x190, Size: 0x4]
	int SvrRewriteTimes;//[Offset: 0x194, Size: 0x4]
	int SvrDupAckTimes;//[Offset: 0x198, Size: 0x4]
	int SvrWnzpReqTimes;//[Offset: 0x19c, Size: 0x4]
	int SvrPosPullTimes;//[Offset: 0x1a0, Size: 0x4]
	int SvrKickReason;//[Offset: 0x1a4, Size: 0x4]
	int SvrPlayerDuration;//[Offset: 0x1a8, Size: 0x4]
	int SvrSrcDev;//[Offset: 0x1ac, Size: 0x4]
	FString SvrDsSvrIP;//[Offset: 0x1b0, Size: 0x10]
	FString SvrListenIP;//[Offset: 0x1c0, Size: 0x10]
	int SvrListenPort;//[Offset: 0x1d0, Size: 0x4]
	void ServerReportStaticsData(PCReportStatisInfo Data);// 0x4c8de3fee041
	void ReportScopeOpaque(FString CurrentSight, float ZoomProgressRate, FString ScopeMtrl);// 0x4c8ce3fee041
	void ReportReliableRpc(FName RPCName, int Num, float Time);// 0x4c8be3fee041
	void ReportObjPool();// 0x4c8ae3fee041
	void ReportLocDiff(float LocDiff);// 0x4c89e3fee041
	void PeriodicalReportClientSide();// 0x4c88e3fee041
	void OnSpawnActorMilliseconds2Lua(FString ActorName, float Milliseconds);// 0x4c87e3fee041
	void OnSpawnActorMilliseconds(Actor* Actor, float Milliseconds);// 0x4c86e3fee041
	void OnRep_EnbaleLogicChange_BP();// 0x4c85e3fee041
	void OnRep_EnbaleLogicChange();// 0x4c84e3fee041
	void OnReliableRpcMonitorDel(FName RPCName, int Num, float Time);// 0x4c83e3fee041
	int GetDeviceClassLevel();// 0x4c82e3fee041
	int GetComponentNetMode();// 0x4c81e3fee041
	void ClientReportStaticsData(PCReportStatisInfo Data);// 0x4c80e3fee041
	void CalcStatis();// 0x4c7fe3fee041

--------------------------------
Class: PCReportStatisInfo
	int ClientReconnectTimes;//[Offset: 0x0, Size: 0x4]
	int ClientMaxFps;//[Offset: 0x4, Size: 0x4]
	int ClientMinFps;//[Offset: 0x8, Size: 0x4]
	int ClientAverFps;//[Offset: 0xc, Size: 0x4]
	int ClientPingTimes;//[Offset: 0x10, Size: 0x4]
	int ClientPingLoseTimes;//[Offset: 0x14, Size: 0x4]
	int ClientPullTimes;//[Offset: 0x18, Size: 0x4]
	int ClientPullDiffDistance;//[Offset: 0x1c, Size: 0x4]
	int ClientPullAvgPing;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: StatisDefaultParams
	float FrameRateJitterThreshold;//[Offset: 0x0, Size: 0x4]
	float APMReportPeriod;//[Offset: 0x4, Size: 0x4]
	float MaxLocDiff;//[Offset: 0x8, Size: 0x4]
	float FrameRateJitterLagerWaveRate;//[Offset: 0xc, Size: 0x4]
	float SpawnActorMaxMilliseconds;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SGPCSpectatingComponent.ActorComponent.Object
	enum OBSpectateState;//[Offset: 0xc0, Size: 0x1]
	float LastGoalYaw;//[Offset: 0xc4, Size: 0x4]
	Actor* FinalViewTarget;//[Offset: 0xc8, Size: 0x8]
	float StartSpectatingTime;//[Offset: 0xd0, Size: 0x4]
	bool bOnlySpectatingTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	PlayerState* CurrentPlayerState;//[Offset: 0xd8, Size: 0x8]
	PlayerController* CachePlayerController;//[Offset: 0xe0, Size: 0x8]
	SGCharacter* BeSpectatedViewTarget;//[Offset: 0xe8, Size: 0x8]
	Character* OriginViewTarget;//[Offset: 0xf0, Size: 0x8]
	uint64[] RecommendGIDS;//[Offset: 0x108, Size: 0x10]
	float SpectatedTimeSecondsConfToRecommend;//[Offset: 0x118, Size: 0x4]
	void ViewPrevPlayerState(PlayerState* StartPlayerState);// 0x4c7ee3fee041
	void ViewNextPlayerState(PlayerState* StartPlayerState, PlayerState* ViewTargetPlayerState);// 0x4c7de3fee041
	void ViewChosenPlayerState(PlayerState* ChosenPlayerState);// 0x4c7ce3fee041
	void TimerStartSpectating();// 0x4c7be3fee041
	void TimerFuncCheckCanSpectate();// 0x4c7ae3fee041
	void StartSpectatingAI(Actor* SelectedPawn);// 0x4c79e3fee041
	void StartSpectating();// 0x4c78e3fee041
	void SpectatingViewTarget(PlayerState* ViewTargetPlayerState);// 0x4c77e3fee041
	void ServerViewPrevPlayerState(PlayerState* StartPlayerState);// 0x4c76e3fee041
	void ServerViewNextPlayerState(PlayerState* StartPlayerState, PlayerState* ViewTargetPlayerState);// 0x4c75e3fee041
	void ServerViewChosenPlayerState(PlayerState* ChosenPlayerState);// 0x4c74e3fee041
	void ServerViewAITarget(Actor* SelectedPawn);// 0x4c73e3fee041
	void ServerStartSpectatingAI(Actor* SpectatingAI);// 0x4c72e3fee041
	void ServerStartSpectating(PlayerState* ViewTargetPlayerState);// 0x4c71e3fee041
	void ServerSetOBSpectateState(enum NewState);// 0x4c70e3fee041
	void ServerQuitSpectatingAI(Character* InputOriginViewTarget);// 0x4c6fe3fee041
	void ServerQuitSpectating();// 0x4c6ee3fee041
	void ServerBroadcastPreSpectating(PlayerController* Controller);// 0x4c6de3fee041
	void QuitSpectatingAI();// 0x4c6ce3fee041
	void QuitSpectating();// 0x4c6be3fee041
	void OnWatchGameStateChanged(PlayerController* InPlayerController, enum NewState);// 0x4c6ae3fee041
	void OnViewTargetDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x4c69e3fee041
	void OnViewTargetChanged(Actor* NewTarget);// 0x4c68e3fee041
	void OnServerChangeViewTarget(Controller* C, int TeamID, int PlayerIndex);// 0x4c67e3fee041
	void OnRep_SetSpectatingViewTarget();// 0x4c66e3fee041
	void OnRep_OBSpectateState();// 0x4c65e3fee041
	void OnReconnect(PlayerController* ReConnectPlayerController);// 0x4c64e3fee041
	void OnPlayerTryReconnect(NetConnection* NetConnection);// 0x4c63e3fee041
	void OnPlayerFinishGame(PlayerController* FinishGamePlayerController, enum FinishType, Actor* EscapeVolume);// 0x4c62e3fee041
	void OnClientChangeViewTarget(Controller* C, int TeamID, int PlayerIndex);// 0x4c61e3fee041
	void OnCancelSpectateViewTarget();// 0x4c60e3fee041
	bool IsSpectatingFreeView();// 0x4c5fe3fee041
	bool IsSpectating();// 0x4c5ee3fee041
	Rotator GetSpectatingRotation(out const Vector ViewLoc, float DeltaTime);// 0x4c5de3fee041
	void GetGIDS_SpectatedLongTime();// 0x4c5ce3fee041
	void FindGoodView(out const Vector TargetLoc, bool bIsUpdate);// 0x4c5be3fee041
	void ClientNtfSpectatingStop(SGCharacter* LastSpectatedPawn);// 0x4c5ae3fee041
	void ClientEndSpectating();// 0x4c59e3fee041
	void ClientBroadcastPreSpectating(PlayerController* Controller);// 0x4c58e3fee041
	void BroadcastPreSpectating(PlayerController* Controller);// 0x4c57e3fee041
	void AutoChangeSpectatingTarget();// 0x4c56e3fee041

--------------------------------
Class: SGPCFPPModeComponent.ActorComponent.Object
	delegate SwitchFPPEvent;//[Offset: 0xc0, Size: 0x10]
	bool bDefaultFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	void SwitchFPPMode();// 0x4a87e3fee041
	void SetFPPMode(bool NewFPPMode, bool bChangeCameraStyle);// 0x4a86e3fee041
	void OnRepFPPMode();// 0x4a85e3fee041
	bool IsFPPMode();// 0x4a84e3fee041
	bool IsDefaultFPPMode();// 0x4a83e3fee041
	void ClientSetFPPMode(bool bNewMode);// 0x4a82e3fee041
	bool CanSwitchFPPMode();// 0x4a81e3fee041

--------------------------------
Class: DSSwitchConfig
	int ReliableRPCThreshold;//[Offset: 0x0, Size: 0x4]
	float ReliableTriggerRate;//[Offset: 0x4, Size: 0x4]
	int UnreliableRPCThreshold;//[Offset: 0x8, Size: 0x4]
	float UnreliableTriggerRate;//[Offset: 0xc, Size: 0x4]
	int nGetAttachLoopMaxNum;//[Offset: 0x10, Size: 0x4]
	float CheckLimitTime;//[Offset: 0x14, Size: 0x4]
	bool bTouchCheckSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: SGTeamInfo.SGTeam.Actor.Object
	int TeamIndex;//[Offset: 0x308, Size: 0x4]
	int TeamMemberCount;//[Offset: 0x30c, Size: 0x4]
	int MaxTeamMemberCount;//[Offset: 0x310, Size: 0x4]
	FText TeamName;//[Offset: 0x318, Size: 0x18]
	bool bPeriodicalDBNOWipeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	Actor*[] OBTeamMembers;//[Offset: 0x340, Size: 0x10]
	PlayerState*[] TeamMemberPlayerStates;//[Offset: 0x350, Size: 0x10]
	PlayerState*[] InBattleTeamMemberPlayerStates;//[Offset: 0x360, Size: 0x10]
	FString[] InBattleTeamMemberPlayerNames;//[Offset: 0x370, Size: 0x10]
	int[] InBattleTeamMemberPlayerLevels;//[Offset: 0x380, Size: 0x10]
	enum[] InBattleTeamMemberPlayerCondition;//[Offset: 0x390, Size: 0x10]
	int[] InBattleTeamMemberHeadBoxID;//[Offset: 0x3a0, Size: 0x10]
	int64[] TeamGuid2VisualIdxMapKey;//[Offset: 0x3b0, Size: 0x10]
	int[] TeamGuid2VisualIdxMapValue;//[Offset: 0x3c0, Size: 0x10]
	int64[] TeamGuidIncludeNotConnect;//[Offset: 0x3d0, Size: 0x10]
	int CurVisualIdx;//[Offset: 0x3e0, Size: 0x4]
	float CheckDBNOWipeOutPeriod;//[Offset: 0x3e4, Size: 0x4]
	Vector2D[] TeamMemberDeathLocationArray;//[Offset: 0x3e8, Size: 0x10]
	int[] TeamAreaIDArray;//[Offset: 0x3f8, Size: 0x10]
	delegate OnAreaIDArrayChange;//[Offset: 0x408, Size: 0x10]
	delegate OnTeamMemberKillOther;//[Offset: 0x418, Size: 0x10]
	delegate OnTeamMemberCauseDamage;//[Offset: 0x428, Size: 0x10]
	delegate OnTeamMemberAddInventory;//[Offset: 0x438, Size: 0x10]
	void SetTeamMemberDeathLocationArray(int PlayerIndex, Vector2D Pos);// 0x4e80e3fee041
	void SetTeamAreaIDArray(int PlayerIndex, int AreaID);// 0x4e7fe3fee041
	void SetInBattleTeamMemberPlayerCondition(int PlayerIndex, enum Condition);// 0x4e7ee3fee041
	void ServerSetTeamMemberDeathLocationArray(int PlayerIndex, Vector2D Pos);// 0x4e7de3fee041
	void ServerClearTeamMemberInfo(int PlayerIndex);// 0x4e7ce3fee041
	void RemoveOBTeamMemberPlayer(Controller* C);// 0x4e7be3fee041
	void PlayerFinishGame(PlayerController* C, enum FinishType, Actor* EscapeVolume);// 0x4e7ae3fee041
	void OnRep_TeamMemberSignArray();// 0x4e79e3fee041
	void OnRep_TeamMemberPlayerState();// 0x4e78e3fee041
	void OnRep_TeamIndex();// 0x4e77e3fee041
	void OnRep_TeamAreaID();// 0x4e76e3fee041
	void OnRep_InBattleTeamMemberPlayerStates();// 0x4e75e3fee041
	void OnRep_InBattleTeamMemberPlayerNames();// 0x4e74e3fee041
	void OnRep_InBattleTeamMemberPlayerLevels();// 0x4e73e3fee041
	void OnPlayerTryReconnect(NetConnection* NetConnection);// 0x4e72e3fee041
	void OnPlayerOnReconnect(PlayerController* PlayerController);// 0x4e71e3fee041
	void OnPlayerFinishReconnect(NetConnection* NetConnection);// 0x4e70e3fee041
	void OnPlayerAddToTeam(Actor* C);// 0x4e6fe3fee041
	void MulticastInBattleTeamMemberPlayerStates(const PlayerState*[] PlayerStates);// 0x4e6ee3fee041
	bool IsFriendlyToAll();// 0x4e6de3fee041
	uint32 GetUnSettmentTeamMembersCount();// 0x4e6ce3fee041
	int GetTeamSignTypeMemberByIndex(int Index);// 0x4e6be3fee041
	FString GetTeamPlayerNameByIndex(int PlayerIndex);// 0x4e6ae3fee041
	int64 GetTeamPlayerGIDByIndex(int PlayerIndex);// 0x4e69e3fee041
	Vector2D GetTeamMemberSignArrayVectorByIndex(int Index);// 0x4e68e3fee041
	Vector2D[] GetTeamMemberSignArray();// 0x4e67e3fee041
	uint32 GetTeamMembersCount();// 0x4e66e3fee041
	PlayerState*[] GetTeamMemberPlayerStates();// 0x4e65e3fee041
	int GetTeamMemberIndex(PlayerState* PS);// 0x4e64e3fee041
	Vector2D GetTeamMemberDeathLocationByIndex(int Index);// 0x4e63e3fee041
	Vector2D[] GetTeamMemberDeathLocationArray();// 0x4e62e3fee041
	enum GetTeamMemberConditionByIndex(int Index);// 0x4e61e3fee041
	enum[] GetTeamMemberCondition();// 0x4e60e3fee041
	PlayerState* GetTeamMemberByIndex(int Index);// 0x4e5fe3fee041
	byte GetTeamIndex();// 0x4e5ee3fee041
	int GetTeamIDMemberByIndex(int Index);// 0x4e5de3fee041
	int64[] GetTeamGuidIncludeNotConnect();// 0x4e5ce3fee041
	int GetPlayerVisualIdx(int64 Guid);// 0x4e5be3fee041
	int GetPlayerInSquadIndex(PlayerState* PS);// 0x4e5ae3fee041
	Actor*[] GetOBTeamMembers();// 0x4e59e3fee041
	uint32 GetNumHumans();// 0x4e58e3fee041
	uint32 GetNoDBNOTeamMembersCount(Controller* ExceptPlayer);// 0x4e57e3fee041
	int GetInBattleTeamMembersIndex(PlayerState* PS);// 0x4e56e3fee041
	PlayerState*[] GetInBattleTeamMemberPlayerStates();// 0x4e55e3fee041
	int[] GetInBattleTeamMemberPlayerLevels();// 0x4e54e3fee041
	FString[] GetInBattleTeamMemberNames();// 0x4e53e3fee041
	int[] GetInBattleTeamMemberHeadBoxID();// 0x4e52e3fee041
	int GetInBattlePlayerIndexByPS(PlayerState* CurPlayerState);// 0x4e51e3fee041
	int GetAreaIDByIndex(int Index);// 0x4e50e3fee041
	int64[] GetAllTeammateGID();// 0x4e4fe3fee041
	uint32 GetAliveTeamMembersCount();// 0x4e4ee3fee041
	void ClearTeamMemberInfo(int PlayerIndex);// 0x4e4de3fee041
	void AddTeamGuidIncludeNotConnect(int64 NewGuid);// 0x4e4ce3fee041
	void AddOBTeamMemberPlayer(Controller* C);// 0x4e4be3fee041

--------------------------------
Class: SGTeam.Actor.Object
	Actor*[] TeamMembers;//[Offset: 0x2e8, Size: 0x10]
	bool RemoveFromTeam(Actor* C, bool bRemoveAll);// 0x4e4ae3fee041
	Actor*[] GetTeamMembers();// 0x4e49e3fee041
	ActorComponent* GetFactionComp();// 0x4e48e3fee041
	bool AddToTeam(Actor* C);// 0x4e47e3fee041

--------------------------------
Class: CompetitionOBHUDManageComponent.ActorComponent.Object
	SGUserWidget*[] Components;//[Offset: 0xb8, Size: 0x10]
	class SGUserWidget[] ComponentClasses;//[Offset: 0xc8, Size: 0x10]
	void OnLoadCompleted_HUDClass(SoftObjectPath Path, int PendingID);// 0x349ce3fee041

--------------------------------
Class: CompetitionOBPersonCtlComponent.ActorComponent.Object
	SGPlayerController*[] CompetitionPlayerArray;//[Offset: 0xb8, Size: 0x10]
	SGPlayerController*[] OBPlayerArray;//[Offset: 0xc8, Size: 0x10]
	SGPlayerController*[] CacheCompetitionPC;//[Offset: 0xd8, Size: 0x10]
	SGPlayerController*[] CacheOBPC;//[Offset: 0xe8, Size: 0x10]
	void OnProcessPawn(PlayerController* PC, Pawn* Pawn);// 0x34a2e3fee041
	void OnLaterKilledHandle(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x34a1e3fee041
	void OBPlayerRestart(Controller* PC);// 0x34a0e3fee041
	PlayerState* FindViewTargetByPlayerController(Controller* PlayerController);// 0x349fe3fee041
	PlayerState* FindTeamOtherViewTarget(CompetitionTeamDataInfo TeamInfo);// 0x349ee3fee041
	PlayerState* FindAllTeamOtherViewTarget(CompetitionOBGlobalDataInfo GlobalDataInfo);// 0x349de3fee041

--------------------------------
Class: CompetitionReportComponent.ActorComponent.Object
	bool TryGetFallReportData(Controller* Killer, Controller* KilledPlayer, out CompetitionPlayerFallReportData FallReportData);// 0x34a8e3fee041
	void OnPlayerFinishGameHandle(PlayerController* C, enum FinishType, Actor* EscapeVolume);// 0x34a7e3fee041
	void OnKilledHandle(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x34a6e3fee041
	void OnDBNOHandle(Controller* Killer, Controller* KilledPlayer);// 0x34a5e3fee041
	void OnCompetitionPlayerFallReport(const CompetitionPlayerFallReportData FallReportData);// 0x34a4e3fee041
	void OnCompetitionPlayerEscapeReport(const CompetitionEscapeReportData EscapeReportData);// 0x34a3e3fee041

--------------------------------
Class: CompetitionPlayerFallReportData
	int KillerTeamId;//[Offset: 0x0, Size: 0x4]
	int KillerTeamIndex;//[Offset: 0x4, Size: 0x4]
	FString KillerPlayerName;//[Offset: 0x8, Size: 0x10]
	uint64 KillerPlayerWeaponID;//[Offset: 0x18, Size: 0x8]
	int KilledTeamId;//[Offset: 0x20, Size: 0x4]
	int KilledTeamIndex;//[Offset: 0x24, Size: 0x4]
	FString KilledPlayerName;//[Offset: 0x28, Size: 0x10]
	bool BTeamAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	enum KilledCharacterType;//[Offset: 0x39, Size: 0x1]
	enum FallResult;//[Offset: 0x3a, Size: 0x1]

--------------------------------
Class: CompetitionEscapeReportData
	uint32 EscapePlayerTeamId;//[Offset: 0x0, Size: 0x4]
	uint32 EscapePlayerTeamIndex;//[Offset: 0x4, Size: 0x4]
	FString EscapePlayerName;//[Offset: 0x8, Size: 0x10]
	int EscapePointID;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CreateCompetitionActorComponent.ActorComponent.Object
	class CompetitionGameManageActor* ManageActorClass;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: PointDamageEventObject.DamageEventObject.Object
	float Damage;//[Offset: 0x30, Size: 0x4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x34, Size: 0xc]
	HitResult HitInfo;//[Offset: 0x40, Size: 0x98]

--------------------------------
Class: RadialDamageEventObject.DamageEventObject.Object
	RadialDamageParams Params;//[Offset: 0x30, Size: 0x14]
	Vector Origin;//[Offset: 0x44, Size: 0xc]
	HitResult[] ComponentHits;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 0x4]
	float MinimumDamage;//[Offset: 0x4, Size: 0x4]
	float InnerRadius;//[Offset: 0x8, Size: 0x4]
	float OuterRadius;//[Offset: 0xc, Size: 0x4]
	float DamageFalloff;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: GameplayTagsManager.Object
	GameplayTagSource[] TagSources;//[Offset: 0xc0, Size: 0x10]
	DataTable*[] GameplayTagTables;//[Offset: 0x1b0, Size: 0x10]

--------------------------------
Class: GameplayTagSource
	FName SourceName;//[Offset: 0x0, Size: 0x8]
	enum SourceType;//[Offset: 0x8, Size: 0x1]
	GameplayTagsList* SourceTagList;//[Offset: 0x10, Size: 0x8]
	RestrictedGameplayTagsList* SourceRestrictedTagList;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: GameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10]
	GameplayTagTableRow[] GameplayTagList;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: GameplayTagTableRow.TableRowBase
	FName Tag;//[Offset: 0x8, Size: 0x8]
	FString DevComment;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: RestrictedGameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10]
	RestrictedGameplayTagTableRow[] RestrictedGameplayTagList;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: RestrictedGameplayTagTableRow.GameplayTagTableRow.TableRowBase
	bool bAllowNonRestrictedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: GameplayTagsSettings.GameplayTagsList.Object
	bool ImportTagsFromConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool WarnOnInvalidTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool FastReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	FString InvalidTagCharacters;//[Offset: 0x50, Size: 0x10]
	GameplayTagCategoryRemap[] CategoryRemapping;//[Offset: 0x60, Size: 0x10]
	SoftObjectPath[] GameplayTagTableList;//[Offset: 0x70, Size: 0x10]
	GameplayTagRedirect[] GameplayTagRedirects;//[Offset: 0x80, Size: 0x10]
	FName[] CommonlyReplicatedTags;//[Offset: 0x90, Size: 0x10]
	int NumBitsForContainerSize;//[Offset: 0xa0, Size: 0x4]
	int NetIndexFirstBitSegment;//[Offset: 0xa4, Size: 0x4]
	RestrictedConfigInfo[] RestrictedConfigFiles;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: GameplayTagCategoryRemap
	FString BaseCategory;//[Offset: 0x0, Size: 0x10]
	FString[] RemapCategories;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: GameplayTagRedirect
	FName OldTagName;//[Offset: 0x0, Size: 0x8]
	FName NewTagName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: RestrictedConfigInfo
	FString RestrictedConfigName;//[Offset: 0x0, Size: 0x10]
	FString[] Owners;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: GameplayAbility_Duration.SGGameplayAbility.GameplayAbility.Object
	class GameplayEffect[] GameplayEffectClasses;//[Offset: 0x480, Size: 0x10]
	ActiveGameplayEffectHandle[] AppliedEffectHandles;//[Offset: 0x490, Size: 0x10]
	class GameplayEffect[] GameplayEffectClassesWhileEnded;//[Offset: 0x4a0, Size: 0x10]
	float Duration;//[Offset: 0x4b0, Size: 0x4]
	Object* icon;//[Offset: 0x4b8, Size: 0x8]
	bool bShowProgressUIButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	bool bScaleIconToFit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 0x1]
	void OnAbilityTimesUp();// 0x34efe3fee041
	float GetSubprogressPerElement();// 0x34eee3fee041
	float GetSubprogress();// 0x34ede3fee041

--------------------------------
Class: GameplayAbility_Instant.GameplayAbility.Object
	class GameplayEffect[] ActivateGameplayEffectClasses;//[Offset: 0x3c0, Size: 0x10]
	class GameplayEffect[] EndGameplayEffectClasses;//[Offset: 0x3d0, Size: 0x10]

--------------------------------
Class: GameplayAbility_MontageNet.SGGameplayAbility.GameplayAbility.Object

--------------------------------
Class: GameplayAbility_Persistent.GameplayAbility.Object
	int CauserGID;//[Offset: 0x3c0, Size: 0x4]
	int CauserTeamId;//[Offset: 0x3c4, Size: 0x4]
	byte CauserTeamType;//[Offset: 0x3c8, Size: 0x1]
	int64 CauserWeaponId;//[Offset: 0x3d0, Size: 0x8]
	int64 CauserBulletId;//[Offset: 0x3d8, Size: 0x8]
	float Distance;//[Offset: 0x3e0, Size: 0x4]
	FString CauserName;//[Offset: 0x3e8, Size: 0x10]
	class GameplayEffect[] GameplayEffectClasses;//[Offset: 0x3f8, Size: 0x10]
	ActiveGameplayEffectHandle[] GameplayEffectHandles;//[Offset: 0x408, Size: 0x10]

--------------------------------
Class: GEEC_AttributeModifier.GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object

--------------------------------
Class: GMMC_AttributeQuery.GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object
	GameplayAttribute QueryAttribute;//[Offset: 0x40, Size: 0x38]

--------------------------------
Class: GMMC_EnergyAutoRecover.GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object
	float Recovercoefficient;//[Offset: 0x3c, Size: 0x4]
	float AimStandReduceCoefficient;//[Offset: 0x40, Size: 0x4]
	float AimCrouchReduceCoefficient;//[Offset: 0x44, Size: 0x4]
	float AimProneReduceCoefficient;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: GMMC_LowEnergyAutoRecover.GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object
	float Recovercoefficient;//[Offset: 0x3c, Size: 0x4]
	float AimStandRecoverCoefficient;//[Offset: 0x40, Size: 0x4]
	float AimCrouchRecoverCoefficient;//[Offset: 0x44, Size: 0x4]
	float AimProneRecoverCoefficient;//[Offset: 0x48, Size: 0x4]
	float ReduceSprintCoefficient;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: LoadingAnimation.Object
	WidgetAnimation* Animation;//[Offset: 0x48, Size: 0x8]
	UserWidget* UserWidget;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SGAbility_ThrowProjectile.SGThrowableProjectile.Actor.Object
	class GameplayAbility* AfterHittedAbility;//[Offset: 0x5a8, Size: 0x8]
	void TakeFireDamage();// 0x3507e3fee041

--------------------------------
Class: SGAbilityStatics.BlueprintFunctionLibrary.Object
	bool ShouldIgnoreTag(out const GameplayEffectSpec GameplayEffectSpec, out FString Container);// 0x3528e3fee041
	void SetupInventoryGE(SGInventory* InInventory, Actor* TargetActor, bool bSetup);// 0x3527e3fee041
	void RemoveGameplayEffectsWithTags(SGCharacter* Character, out const GameplayTag GameplayTag);// 0x3526e3fee041
	void RemoveAllGameplayEffectByCharacter(SGCharacter* Character);// 0x3525e3fee041
	GameplayEffectSpecHandle MakeOutgoingGameplayEffectSpecFromGEData(AbilitySystemComponent* ASC, out const SGGEData InGEData, Object* DataOwner, GameplayAbility* InAbility);// 0x3524e3fee041
	bool IsUnderGameEffect(Character* Character, enum GameEffectType);// 0x3523e3fee041
	bool IsGameEffectFromUsingInventory(Character* Character, out const GameplayEffectSpec Spec);// 0x3522e3fee041
	GameplayTag GetTagByGameEffectAndEnduranceType(Character* Character, enum GameEffectType, enum EnduranceType);// 0x3521e3fee041
	void GetOwnedEffectTypeByEndurance(Character* Character, enum Endurance, out enum[] GameEffectTypes);// 0x3520e3fee041
	GameplayEffect* GetMeleeReduceEnergyGameEffect(SGInventory* Inventory);// 0x351fe3fee041
	Actor* GetInventoryFromGameplayEffectSpec(out const GameplayEffectSpec Spec);// 0x351ee3fee041
	Actor* GetInstigatorFromGameplayEffectSpec(out const GameplayEffectSpec Spec);// 0x351de3fee041
	FString[] GetInhibitedActiveGameplayEffectHandle(AbilitySystemComponent* OwningComponent);// 0x351ce3fee041
	FString GetHandleFromActiveGameplayEffect(out ActiveGameplayEffect ActiveGameplayEffect);// 0x351be3fee041
	GameplayTag[] GetGameplayTagArray(out GameplayTagContainer GameplayTagContainer);// 0x351ae3fee041
	bool GetGameplayEffectModifierMagnitude(class GameplayEffect EffectClass, GameplayAttribute Attribute, int Level, out float OutCalculatedMagnitude);// 0x3519e3fee041
	enum GetGameEffectTypeByTagName(Character* Character, FString TagName);// 0x3518e3fee041
	GameplayEffect* GetFirstGameEffectFromGameplayAbilityClass(class GameplayAbility AbilityClass);// 0x3517e3fee041
	enum GetEnduranceTypeFromGameEffectClass(Character* Character, class GameplayEffect EffectClass);// 0x3516e3fee041
	enum GetEffectTypeFromGameEffectInstance(Character* Character, const GameplayEffect* EffectInstance);// 0x3515e3fee041
	enum GetEffectTypeFromGameEffectClass(Character* Character, class GameplayEffect EffectClass);// 0x3514e3fee041
	GameplayTag GetAnyTagByGameEffectType(Character* Character, enum GameEffectType);// 0x3513e3fee041
	GameplayTag[] GetAllGrantTagArray(out const GameplayEffectSpec GameplayEffectSpec);// 0x3512e3fee041
	void GetAllBodypartBuffList(Character* Character, out CharacterBuffInfo[] BodypartBufflist);// 0x3511e3fee041
	void GetAIOwnedGameplayEffects(Character* AICharacter, out enum[] GameEffectTypes, out enum[] EnduranceTypes);// 0x3510e3fee041
	float GetActiveGameplayEffectTimeRemaining(out const ActiveGameplayEffect ActiveGE, Object* Owner);// 0x350fe3fee041
	float GetActiveEffectTimeRemaingByTag(Character* Character, GameplayTag Tag);// 0x350ee3fee041
	GameplayAbility* GetActiveAbilityInstanceFromProgressInterface(AbilitySystemComponent* AbilitySystemComponent);// 0x350de3fee041
	GameplayAbility* GetActiveAbilityInstanceFromInventoryInterface(AbilitySystemComponent* AbilitySystemComponent);// 0x350ce3fee041
	GameplayAbility* GetActiveAbilityInstanceByClass(AbilitySystemComponent* AbilitySystemComponent, class Object Class);// 0x350be3fee041
	FString GameplayTagContainerToStringSimple(out const GameplayTagContainer TagContainer);// 0x350ae3fee041
	void DispatchCloseBagEvent(Character* Character);// 0x3509e3fee041
	void CollectEffectModifyEnduranceTypes(class GameplayEffect GameplayEffect, out enum[] ModifyEnduranceTypes);// 0x3508e3fee041

--------------------------------
Class: SGGEData
	class GameplayEffect* GameplayEffect;//[Offset: 0x0, Size: 0x8]
	InventoryGEAttributeModifier[] AttributeModifiers;//[Offset: 0x8, Size: 0x10]
	float Duation;//[Offset: 0x18, Size: 0x4]
	float Period;//[Offset: 0x1c, Size: 0x4]
	class GameplayModMagnitudeCalculation* DurationCalcClass;//[Offset: 0x20, Size: 0x8]
	float Chance;//[Offset: 0x28, Size: 0x4]
	GameplayTagContainer GrantedTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer RemoveGEWithGameplayTag;//[Offset: 0x50, Size: 0x20]
	GameplayTagContainer GEAssetGameplayTag;//[Offset: 0x70, Size: 0x20]

--------------------------------
Class: InventoryGEAttributeModifier
	GameplayAttribute ModifyAttribute;//[Offset: 0x0, Size: 0x38]
	float ModifyValue;//[Offset: 0x38, Size: 0x4]
	byte ModifierOp;//[Offset: 0x3c, Size: 0x1]
	class GameplayModMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x40, Size: 0x8]
	float Coefficient;//[Offset: 0x48, Size: 0x4]
	byte Priority;//[Offset: 0x4c, Size: 0x1]
	byte ModsSelector;//[Offset: 0x4d, Size: 0x1]
	enum ModChannel;//[Offset: 0x4e, Size: 0x1]

--------------------------------
Class: SGAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	class GameplayAbility* ActionAbilities;//[Offset: 0x1438, Size: 0x8]
	GameplayAbilitySpecHandle ActionAbilitySpecHandles;//[Offset: 0x1580, Size: 0x4]
	GameplayAbilityRepAdvancedAnimMontage RepAdvancedAnimMontageInfo;//[Offset: 0x1648, Size: 0x38]
	GameplayAbilityRepAdvancedAnimMontage LocalAdvancedAnimMontageInfo;//[Offset: 0x1680, Size: 0x38]
	GameplayAbilityRepEquipAnimMontage RepEquipAnimMontageInfo;//[Offset: 0x16b8, Size: 0x20]
	GameplayAbilityRepEquipAnimMontage LocalEquipAnimMontageInfo;//[Offset: 0x16d8, Size: 0x20]
	SkeletalMeshComponentBudgeted* MeshComponent;//[Offset: 0x16f8, Size: 0x8]
	float ProgressLocalTimeStampOnRep;//[Offset: 0x1708, Size: 0x4]
	float ProgressRemainingDurationOnRep;//[Offset: 0x170c, Size: 0x4]
	float SimulateFullProgressThreshold;//[Offset: 0x1710, Size: 0x4]
	float AbortProgressSimulationThreshold;//[Offset: 0x1714, Size: 0x4]
	ProgressAbilitySimulationInfo ProgressAbilitySimulationInfo;//[Offset: 0x1718, Size: 0x28]
	<GameplayTag,class GameplayAbility> DefaultAbilities;//[Offset: 0x1748, Size: 0x50]
	AbilitySlot[] InstancedAbilities;//[Offset: 0x1798, Size: 0x10]
	void SetRepEquipAnimMontageInfo(out const GameplayAbilityRepEquipAnimMontage NewRepEquipAnimMontageInfo);// 0x3543e3fee041
	void SetRepAdvanceAnimMontageInfo(out const GameplayAbilityRepAdvancedAnimMontage NewRepAdvancedAnimMontageInfo);// 0x3542e3fee041
	void ServerSetForceCancelAbility(bool InbForceCancelAbility);// 0x3541e3fee041
	void OnWeaponInfoCurrentWeaponChanged(SGInventory* NewWeapon);// 0x3540e3fee041
	void OnUpdateCurrentWeaponAnimationSets();// 0x353fe3fee041
	void OnStartSpectating(SGCharacter* BeSpectatedPawn);// 0x353ee3fee041
	void OnRep_ReplicatedEquipAnimMontage();// 0x353de3fee041
	void OnRep_ReplicatedAdvancedAnimMontage();// 0x353ce3fee041
	void OnRep_ProgressAbilitySimulationInfo();// 0x353be3fee041
	void OnPlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x353ae3fee041
	void OnEquipMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x3539e3fee041
	void OnCurrentWeaponChanged(SGInventory* NewWeapon);// 0x3538e3fee041
	void OnAdvanceMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x3537e3fee041
	void OnAbilityActiveFailed(const GameplayAbility* Ability, out const GameplayTagContainer FailureReason);// 0x3536e3fee041
	void MulticastNotifyEndAbility(Character* InCharacter, enum AbilityType, Actor* OptionalActor);// 0x3535e3fee041
	void MulticastNotifyActiveAbility(Character* InCharacter, enum AbilityType, Actor* OptionalActor);// 0x3534e3fee041
	bool IsActionAbilityActive(enum ActionAbilityType);// 0x3533e3fee041
	void InternalStopMontagesByGroupName(float InBlendOutTime, FName GroupName);// 0x3532e3fee041
	void InternalStopEquipMontage();// 0x3531e3fee041
	void InternalStopAdvanceMontage();// 0x3530e3fee041
	void InternalPlayEquipMontage();// 0x352fe3fee041
	void InternalPlayAdvanceMontage();// 0x352ee3fee041
	void ForceCancelAbility(GameplayAbility* Ability);// 0x352de3fee041
	void ClientTryActivateAbilityWithEventData(GameplayAbilitySpecHandle AbilityToActivate, GameplayEventData TriggerEventData);// 0x352ce3fee041
	void ClientSetForceCancelAbility(bool InbForceCancelAbility);// 0x352be3fee041
	bool CanForceCancelAbility();// 0x352ae3fee041
	void ActivateSimulatedProgressAbilityReplication(enum Type, float Duration, SGInventory* TargetInv, Actor* OptionalActor1, float Magnitude);// 0x3529e3fee041

--------------------------------
Class: GameplayAbilityRepEquipAnimMontage
	bool bHasPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	SGInventory* EquipInv;//[Offset: 0x8, Size: 0x8]
	AnimMontage* InventoryMontage;//[Offset: 0x10, Size: 0x8]
	AnimMontage* CharacterMontage;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: GameplayAbilityRepAdvancedAnimMontage
	bool bHasPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	SkeletalMesh* InventoryMesh;//[Offset: 0x8, Size: 0x8]
	AnimMontage* InventoryMontage;//[Offset: 0x10, Size: 0x8]
	class AnimInstance* InventoryAnimInstanceClass;//[Offset: 0x18, Size: 0x8]
	FName InventoryAttachSocket;//[Offset: 0x20, Size: 0x8]
	float Timestamp;//[Offset: 0x28, Size: 0x4]
	FName StopMontagesByGroupName;//[Offset: 0x2c, Size: 0x8]
	float StopMontagesBlendOutTime;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10a8, Size: 0x1]
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10a8, Size: 0x1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10a8, Size: 0x1]
	float[] BaseVisibleDistanceFactorThesholds;//[Offset: 0x10b0, Size: 0x10]
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0x5be8e3fee041

--------------------------------
Class: ProgressAbilitySimulationInfo
	enum Type;//[Offset: 0x0, Size: 0x1]
	SGInventory* TargetInv;//[Offset: 0x8, Size: 0x8]
	Actor* OptionalActor1;//[Offset: 0x10, Size: 0x8]
	float ProgressStartServerTimeStamp;//[Offset: 0x18, Size: 0x4]
	float Duration;//[Offset: 0x1c, Size: 0x4]
	float Magnitude;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: AbilitySlot
	GameplayTag InstancedAbilityKey;//[Offset: 0x0, Size: 0x8]
	GameplayAbilitySpecHandle InstancedAbilityHandle;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AbilitySystemGlobals.Object
	SoftClassPath AbilitySystemGlobalsClassName;//[Offset: 0x28, Size: 0x18]
	GameplayTag ActivateFailIsDeadTag;//[Offset: 0x68, Size: 0x8]
	FName ActivateFailIsDeadName;//[Offset: 0x70, Size: 0x8]
	GameplayTag ActivateFailCooldownTag;//[Offset: 0x78, Size: 0x8]
	FName ActivateFailCooldownName;//[Offset: 0x80, Size: 0x8]
	GameplayTag ActivateFailCostTag;//[Offset: 0x88, Size: 0x8]
	FName ActivateFailCostName;//[Offset: 0x90, Size: 0x8]
	GameplayTag ActivateFailTagsBlockedTag;//[Offset: 0x98, Size: 0x8]
	FName ActivateFailTagsBlockedName;//[Offset: 0xa0, Size: 0x8]
	GameplayTag ActivateFailTagsMissingTag;//[Offset: 0xa8, Size: 0x8]
	FName ActivateFailTagsMissingName;//[Offset: 0xb0, Size: 0x8]
	GameplayTag ActivateFailNetworkingTag;//[Offset: 0xb8, Size: 0x8]
	FName ActivateFailNetworkingName;//[Offset: 0xc0, Size: 0x8]
	int MinimalReplicationTagCountBits;//[Offset: 0xc8, Size: 0x4]
	NetSerializeScriptStructCache TargetDataStructCache;//[Offset: 0xd0, Size: 0x10]
	bool bAllowGameplayModEvaluationChannels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	enum DefaultGameplayModEvaluationChannel;//[Offset: 0xe1, Size: 0x1]
	FName GameplayModEvaluationChannelAliases;//[Offset: 0xe4, Size: 0x8]
	SoftObjectPath GlobalCurveTableName;//[Offset: 0x138, Size: 0x18]
	CurveTable* GlobalCurveTable;//[Offset: 0x150, Size: 0x8]
	SoftObjectPath GlobalAttributeMetaDataTableName;//[Offset: 0x158, Size: 0x18]
	DataTable* GlobalAttributeMetaDataTable;//[Offset: 0x170, Size: 0x8]
	SoftObjectPath GlobalAttributeSetDefaultsTableName;//[Offset: 0x178, Size: 0x18]
	SoftObjectPath[] GlobalAttributeSetDefaultsTableNames;//[Offset: 0x190, Size: 0x10]
	CurveTable*[] GlobalAttributeDefaultsTables;//[Offset: 0x1a0, Size: 0x10]
	SoftObjectPath GlobalGameplayCueManagerClass;//[Offset: 0x1b0, Size: 0x18]
	SoftObjectPath GlobalGameplayCueManagerName;//[Offset: 0x1c8, Size: 0x18]
	FString[] GameplayCueNotifyPaths;//[Offset: 0x1e0, Size: 0x10]
	SoftObjectPath GameplayTagResponseTableName;//[Offset: 0x1f0, Size: 0x18]
	GameplayTagReponseTable* GameplayTagResponseTable;//[Offset: 0x208, Size: 0x8]
	bool PredictTargetGameplayEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	GameplayCueManager* GlobalGameplayCueManager;//[Offset: 0x218, Size: 0x8]
	void ToggleIgnoreAbilitySystemCosts();// 0x3549e3fee041
	void ToggleIgnoreAbilitySystemCooldowns();// 0x3548e3fee041
	void ServerEndPlayerAbility(FString AbilityNameMatch);// 0x3547e3fee041
	void ServerCancelPlayerAbility(FString AbilityNameMatch);// 0x3546e3fee041
	void ServerActivatePlayerAbility(FString AbilityNameMatch);// 0x3545e3fee041
	void ListPlayerAbilities();// 0x3544e3fee041

--------------------------------
Class: NetSerializeScriptStructCache
	ScriptStruct*[] ScriptStructs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: GameplayTagReponseTable.DataAsset.Object
	GameplayTagResponseTableEntry[] Entries;//[Offset: 0x30, Size: 0x10]
	void TagResponseEvent(const GameplayTag Tag, int NewCount, AbilitySystemComponent* ASC, int idx);// 0x532ce3fee041

--------------------------------
Class: GameplayTagResponseTableEntry
	GameplayTagReponsePair Positive;//[Offset: 0x0, Size: 0x28]
	GameplayTagReponsePair Negative;//[Offset: 0x28, Size: 0x28]

--------------------------------
Class: GameplayTagReponsePair
	GameplayTag Tag;//[Offset: 0x0, Size: 0x8]
	class GameplayEffect* ResponseGameplayEffect;//[Offset: 0x8, Size: 0x8]
	class GameplayEffect[] ResponseGameplayEffects;//[Offset: 0x10, Size: 0x10]
	int SoftCountCap;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: GameplayCueManager.DataAsset.Object
	GameplayCueObjectLibrary RuntimeGameplayCueObjectLibrary;//[Offset: 0x48, Size: 0x50]
	GameplayCueObjectLibrary EditorGameplayCueObjectLibrary;//[Offset: 0x98, Size: 0x50]
	class Object[] LoadedGameplayCueNotifyClasses;//[Offset: 0x2b0, Size: 0x10]
	class GameplayCueNotify_Actor[] GameplayCueClassesForPreallocation;//[Offset: 0x2c0, Size: 0x10]
	GameplayCuePendingExecute[] PendingExecuteCues;//[Offset: 0x2d0, Size: 0x10]
	int GameplayCueSendContextCount;//[Offset: 0x2e0, Size: 0x4]
	PreallocationInfo[] PreallocationInfoList_Internal;//[Offset: 0x2e8, Size: 0x10]

--------------------------------
Class: GameplayCueObjectLibrary
	FString[] Paths;//[Offset: 0x0, Size: 0x10]
	ObjectLibrary* ActorObjectLibrary;//[Offset: 0x30, Size: 0x8]
	ObjectLibrary* StaticObjectLibrary;//[Offset: 0x38, Size: 0x8]
	GameplayCueSet* CueSet;//[Offset: 0x40, Size: 0x8]
	bool bShouldSyncScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bShouldAsyncLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bShouldSyncLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	bool bHasBeenInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1]

--------------------------------
Class: GameplayCueSet.DataAsset.Object
	GameplayCueNotifyData[] GameplayCueData;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: GameplayCueNotifyData
	GameplayTag GameplayCueTag;//[Offset: 0x0, Size: 0x8]
	SoftObjectPath GameplayCueNotifyObj;//[Offset: 0x8, Size: 0x18]
	class Object* LoadedGameplayCueClass;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: GameplayCueNotify_Actor.Actor.Object
	bool bAutoDestroyOnRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	float AutoDestroyDelay;//[Offset: 0x2e4, Size: 0x4]
	bool WarnIfTimelineIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	bool WarnIfLatentActionIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 0x1]
	GameplayTag GameplayCueTag;//[Offset: 0x2ec, Size: 0x8]
	FName GameplayCueName;//[Offset: 0x2f4, Size: 0x8]
	bool bAutoAttachToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]
	bool IsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1]
	bool bUniqueInstancePerInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fe, Size: 0x1]
	bool bUniqueInstancePerSourceObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ff, Size: 0x1]
	bool bAllowMultipleOnActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	bool bAllowMultipleWhileActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1]
	int NumPreallocatedInstances;//[Offset: 0x304, Size: 0x4]
	bool WhileActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x5326e3fee041
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x5325e3fee041
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0x5324e3fee041
	bool OnExecute(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x5323e3fee041
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x5322e3fee041
	void K2_HandleGameplayCue(Actor* MyTarget, byte EventType, out const GameplayCueParameters Parameters);// 0x5321e3fee041
	void K2_EndGameplayCue();// 0x5320e3fee041

--------------------------------
Class: GameplayCuePendingExecute
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x10]
	enum PayloadType;//[Offset: 0x28, Size: 0x1]
	AbilitySystemComponent* OwningComponent;//[Offset: 0x30, Size: 0x8]
	GameplayEffectSpecForRPC FromSpec;//[Offset: 0x38, Size: 0x78]
	GameplayCueParameters CueParameters;//[Offset: 0xb0, Size: 0xb8]

--------------------------------
Class: PreallocationInfo
	class GameplayCueNotify_Actor[] ClassesNeedingPreallocation;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: SGAbilitySystemGlobals.AbilitySystemGlobals.Object
	GameplayEffect* SimpleModifyAttributeGE;//[Offset: 0x260, Size: 0x8]

--------------------------------
Class: AbilityTask.GameplayTask.Object
	GameplayAbility* Ability;//[Offset: 0x60, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object
	FName ForceName;//[Offset: 0x74, Size: 0x8]
	enum FinishVelocityMode;//[Offset: 0x7c, Size: 0x1]
	Vector FinishSetVelocity;//[Offset: 0x80, Size: 0xc]
	float FinishClampVelocity;//[Offset: 0x8c, Size: 0x4]
	CharacterMovementComponent* MovementComponent;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: AbilityTask_ApplyRootMotionMoveToForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object
	delegate OnTimedOut;//[Offset: 0xa8, Size: 0x10]
	delegate OnTimedOutAndDestinationReached;//[Offset: 0xb8, Size: 0x10]
	Vector StartLocation;//[Offset: 0xc8, Size: 0xc]
	Vector TargetLocation;//[Offset: 0xd4, Size: 0xc]
	float Duration;//[Offset: 0xe0, Size: 0x4]
	bool bSetNewMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	byte NewMovementMode;//[Offset: 0xe5, Size: 0x1]
	bool bRestrictSpeedToExpected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6, Size: 0x1]
	CurveVector* PathOffsetCurve;//[Offset: 0xe8, Size: 0x8]
	AbilityTask_ApplyRootMotionMoveToForce* ApplyRootMotionMoveToForce(GameplayAbility* OwningAbility, FName TaskInstanceName, Vector TargetLocation, float Duration, bool bSetNewMovementMode, byte MovementMode, bool bRestrictSpeedToExpected, CurveVector* PathOffsetCurve, enum VelocityOnFinishMode, Vector SetVelocityOnFinish, float ClampVelocityOnFinish);// 0x354ae3fee041

--------------------------------
Class: SGAbilityTask_ApplyRootMotionMoveToTarget.AbilityTask_ApplyRootMotionMoveToForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object
	enum AccumulateMode;//[Offset: 0xf4, Size: 0x1]
	enum SettingsFlag;//[Offset: 0xf5, Size: 0x1]
	SGAbilityTask_ApplyRootMotionMoveToTarget* ApplyRootMotionMoveToTarget(GameplayAbility* OwningAbility, FName TaskInstanceName, Vector InTargetLocation, float InDuration, bool bInSetNewMovementMode, byte InMovementMode, bool bInRestrictSpeedToExpected, CurveVector* InPathOffsetCurve, enum InVelocityOnFinishMode, Vector InSetVelocityOnFinish, float ClampVelocityOnFinish, enum InAccumulateMode, enum InSettingsFlag);// 0x354be3fee041

--------------------------------
Class: SGAbilityTask_AsyncLoad.AbilityTask.GameplayTask.Object
	delegate OnFinished;//[Offset: 0x78, Size: 0x10]
	delegate OnFailed;//[Offset: 0x88, Size: 0x10]
	Object*[] Assets;//[Offset: 0xa8, Size: 0x10]
	SGAbilityTask_AsyncLoad* AsyncLoad(GameplayAbility* OwningAbility, SoftObjectPath[] Paths);// 0x354ce3fee041

--------------------------------
Class: SGAbilityTask_BoresPump.AbilityTask.GameplayTask.Object
	delegate OnTaskFinished;//[Offset: 0x78, Size: 0x10]
	SGInventory* Weapon;//[Offset: 0x88, Size: 0x8]
	Character* Character;//[Offset: 0x90, Size: 0x8]
	SGWeaponBoreComponent* BoreComp;//[Offset: 0x98, Size: 0x8]
	SGAbilityTask_PlayWeaponMontage* PlayBoresPumpMontageTask;//[Offset: 0xa0, Size: 0x8]
	void OnMontageFinished();// 0x354ee3fee041
	SGAbilityTask_BoresPump* CreateBoresPumpProxy(GameplayAbility* OwningAbility, SGInventory* Weapon);// 0x354de3fee041

--------------------------------
Class: SGAbilityTask_PlayWeaponMontage.AbilityTask.GameplayTask.Object
	delegate OnCompleted;//[Offset: 0x78, Size: 0x10]
	delegate OnBlendOut;//[Offset: 0x88, Size: 0x10]
	delegate OnInterrupted;//[Offset: 0x98, Size: 0x10]
	delegate OnCancelled;//[Offset: 0xa8, Size: 0x10]
	SGMontagePlayParams CharacterMontageParams;//[Offset: 0xb8, Size: 0x48]
	SGMontagePlayParams WeaponMontageParams;//[Offset: 0x100, Size: 0x48]
	enum AdapterAnimType;//[Offset: 0x148, Size: 0x1]
	void OnMontageInterrupted();// 0x355be3fee041
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x355ae3fee041
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x3559e3fee041
	SGAbilityTask_PlayWeaponMontage* CreatePlayWeaponMontageProxy(GameplayAbility* OwningAbility, FName TaskInstanceName, SGMontagePlayParams CharacterMontageParams, SGMontagePlayParams WeaponMontageParams, bool bDisableBlendIn, bool bDisableBlendOut, bool bStopWhenAbilityEnds, SGInventory* WeaponForPlayingMontage, float ForceBlendInTime, float ForceBlendOutTime, enum AdapAnimType, bool bStopWhenAbilityEndsManulControl, bool bStopWhenMontageBlendingOut, bool bLockAnimationSet);// 0x3558e3fee041

--------------------------------
Class: SGAbilityTask_Fire.AbilityTask.GameplayTask.Object
	delegate OnFireEnd;//[Offset: 0x78, Size: 0x10]
	SGAbilityTaskFireTickFunction FireTickFunction;//[Offset: 0x100, Size: 0x30]
	void OnFireEvent(enum Event);// 0x3550e3fee041
	SGAbilityTask_Fire* Fire(GameplayAbility* OwningAbility, SGInventory* Weapon, int FireMode);// 0x354fe3fee041

--------------------------------
Class: SGAbilityTaskFireTickFunction.TickFunction
	SGAbilityTask_Fire* Target;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SGAbilityTask_MeleeFire.AbilityTask.GameplayTask.Object
	delegate OnStopFireEvent;//[Offset: 0x78, Size: 0x10]
	delegate DoFireEvent;//[Offset: 0x88, Size: 0x10]
	delegate OnCanNotFireEvent;//[Offset: 0x98, Size: 0x10]
	delegate JumpToNextPhaseEvent;//[Offset: 0xa8, Size: 0x10]
	delegate ResetFirePhaseEvent;//[Offset: 0xb8, Size: 0x10]
	void UnbindFireEvent();// 0x3556e3fee041
	void OnMeleeWeaponCanReenterFire();// 0x3555e3fee041
	void OnMeleeWeaponCanNotNextPhase();// 0x3554e3fee041
	void OnMeleeWeaponCanNextPhase();// 0x3553e3fee041
	void OnFireEvent(enum Event);// 0x3552e3fee041
	SGAbilityTask_MeleeFire* MeleeFire(GameplayAbility* OwningAbility, SGInventory* Weapon);// 0x3551e3fee041

--------------------------------
Class: SGAbilityTask_PlayInventoryMontage.AbilityTask.GameplayTask.Object
	delegate OnCompleted;//[Offset: 0x78, Size: 0x10]
	AnimMontage* CharacterMontage;//[Offset: 0x88, Size: 0x8]
	AnimMontage* InventoryMontage;//[Offset: 0x90, Size: 0x8]
	SkeletalMesh* InventoryMesh;//[Offset: 0x98, Size: 0x8]
	SGAbilityTask_PlayInventoryMontage* CreatePlayInventoryMontageProxy(GameplayAbility* OwningAbility, FName TaskInstanceName, AnimMontage* CharacterMontage, AnimMontage* InventoryMontage, SkeletalMesh* InventoryMesh, float Rate, FName StartSection, FName AttachPosition, bool bStopWhenAbilityEnds);// 0x3557e3fee041

--------------------------------
Class: SGAbilityTask_PrepareToFire.AbilityTask.GameplayTask.Object
	delegate OnPrepareToFireEnd;//[Offset: 0x78, Size: 0x10]
	delegate OnAbortFire;//[Offset: 0x88, Size: 0x10]
	SGAbilityTaskPrepareToFireTickFunction PrepareToFireTickFunction;//[Offset: 0xa8, Size: 0x30]
	SGAbilityTask_PrepareToFire* PrepareToFire(GameplayAbility* OwningAbility, SGInventory* Weapon);// 0x355de3fee041
	void OnFireEvent(enum Event);// 0x355ce3fee041

--------------------------------
Class: SGAbilityTaskPrepareToFireTickFunction.TickFunction
	SGAbilityTask_PrepareToFire* Target;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SGAbilityTask_PullBolt.AbilityTask.GameplayTask.Object
	delegate OnTaskFinished;//[Offset: 0x78, Size: 0x10]
	SGInventory* Weapon;//[Offset: 0x88, Size: 0x8]
	Character* Character;//[Offset: 0x90, Size: 0x8]
	SGWeaponBoreComponent* BoreComp;//[Offset: 0x98, Size: 0x8]
	SGWeaponStateComponent* StateComp;//[Offset: 0xa0, Size: 0x8]
	SGAbilityTask_PlayWeaponMontage* PlayPullBoltMontageTask;//[Offset: 0xa8, Size: 0x8]
	void OnMontageFinished();// 0x355fe3fee041
	SGAbilityTask_PullBolt* CreatePullBoltProxy(GameplayAbility* OwningAbility, SGInventory* Weapon);// 0x355ee3fee041

--------------------------------
Class: SGWeaponStateComponent.ActorComponent.Object
	float WeaponEquipWithChargeTime;//[Offset: 0xc0, Size: 0x4]
	float WeaponUnequipTime;//[Offset: 0xc4, Size: 0x4]
	float WeaponChangeClipTime;//[Offset: 0xc8, Size: 0x4]
	float WeaponAddMagazineTime;//[Offset: 0xcc, Size: 0x4]
	<FString,float> WeaponChangeClipTimeMap;//[Offset: 0xd0, Size: 0x50]
	<FString,float> WeaponOutMagazineAnimationTimeMap;//[Offset: 0x120, Size: 0x50]
	float WeaponAddCommonMagazineTime;//[Offset: 0x170, Size: 0x4]
	bool bOverrideAddMagazineAnimTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]
	<FString,float> WeaponAddMagazineTimeMap;//[Offset: 0x178, Size: 0x50]
	<FString,float> WeaponAddMagazineAnimationTimeMap;//[Offset: 0x1c8, Size: 0x50]
	bool bOverrideEmptyBoreAddMagazineAnimTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	<FString,float> WeaponEmptyBoreAddMagazineTimeMap;//[Offset: 0x220, Size: 0x50]
	float WeaponCheckCommonMagazineTime;//[Offset: 0x270, Size: 0x4]
	bool bOverrideCheckMagazineAnimTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	<FString,float> WeaponCheckMagazineTimeMap;//[Offset: 0x278, Size: 0x50]
	<FString,float> WeaponCheckMagazineAnimationTimeMap;//[Offset: 0x2c8, Size: 0x50]
	float OpenBoltBeforeReloadingTimeSeconds;//[Offset: 0x318, Size: 0x4]
	float CloseBoltBeforeReloadingTimeSeconds;//[Offset: 0x31c, Size: 0x4]
	float MagazineCheckTime;//[Offset: 0x320, Size: 0x4]
	float CheckMagTimeFromAdapterRatio;//[Offset: 0x324, Size: 0x4]
	float OneByOneChangeClipTime_Loop_PerBullet;//[Offset: 0x328, Size: 0x4]
	float OneByOneChangeClipTime_End;//[Offset: 0x32c, Size: 0x4]
	float OneByOneReloadScale;//[Offset: 0x330, Size: 0x4]
	float WeaponPullBoltTime;//[Offset: 0x334, Size: 0x4]
	bool bOverrideReleaseHoldOpenAnimTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	float WeaponReleaseHoldOpenTime;//[Offset: 0x33c, Size: 0x4]
	float WeaponSwitchFireModeTime;//[Offset: 0x340, Size: 0x4]
	float HoldOpenTimeAfterFire;//[Offset: 0x344, Size: 0x4]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	float GetWeapReloadTime();// 0x5063e3fee041

--------------------------------
Class: SGAbilityTask_ReleaseHoldOpen.AbilityTask.GameplayTask.Object
	delegate OnTaskFinished;//[Offset: 0x78, Size: 0x10]
	SGInventory* Weapon;//[Offset: 0x88, Size: 0x8]
	Character* Character;//[Offset: 0x90, Size: 0x8]
	SGWeaponBoreComponent* BoreComp;//[Offset: 0x98, Size: 0x8]
	SGWeaponStateComponent* StateComp;//[Offset: 0xa0, Size: 0x8]
	SGAbilityTask_PlayWeaponMontage* PlayReleaseHoldOpenMontageTask;//[Offset: 0xa8, Size: 0x8]
	void OnMontageFinished();// 0x3561e3fee041
	SGAbilityTask_ReleaseHoldOpen* CreateReleaseHoldOpenProxy(GameplayAbility* OwningAbility, SGInventory* Weapon);// 0x3560e3fee041

--------------------------------
Class: SGAbilityTask_SwitchWeapon.AbilityTask.GameplayTask.Object
	delegate OnFinished;//[Offset: 0x78, Size: 0x10]
	delegate OnFailed;//[Offset: 0x88, Size: 0x10]
	void OnDestWeaponReplicated(SGInventory* NewWeapon);// 0x3563e3fee041
	SGAbilityTask_SwitchWeapon* NetworkSyncedSwitchWeapon(GameplayAbility* OwningAbility, SGInventory* CurrentWeapon, SGInventory* DestWeapon, bool bLastWeaponRemoved);// 0x3562e3fee041

--------------------------------
Class: SGAbilityTask_SwitchWeaponWithPlayMontage.AbilityTask.GameplayTask.Object
	delegate OnCompleted;//[Offset: 0x78, Size: 0x10]
	delegate OnBlendOut;//[Offset: 0x88, Size: 0x10]
	delegate OnInterrupted;//[Offset: 0x98, Size: 0x10]
	delegate OnCancelled;//[Offset: 0xa8, Size: 0x10]
	SGMontagePlayParams CharacterMontageParams;//[Offset: 0xb8, Size: 0x48]
	SGMontagePlayParams WeaponMontageParams;//[Offset: 0x100, Size: 0x48]
	enum AdapterAnimType;//[Offset: 0x148, Size: 0x1]
	void OnMontageInterrupted();// 0x3567e3fee041
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x3566e3fee041
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x3565e3fee041
	SGAbilityTask_SwitchWeaponWithPlayMontage* CreateSwitchWeaponWithPlayMontageProxy(GameplayAbility* OwningAbility, FName TaskInstanceName, SGMontagePlayParams CharacterMontageParams, SGMontagePlayParams WeaponMontageParams, SGInventory* DestWeapon, bool bStopWhenAbilityEnds, bool bLastWeaponRemoved, bool bPlayMontageFirst, bool bDisableBlendOut);// 0x3564e3fee041

--------------------------------
Class: SGAbilityTask_WaitMeshCompleted.AbilityTask.GameplayTask.Object
	delegate OnCompleted;//[Offset: 0x78, Size: 0x10]
	delegate OnFail;//[Offset: 0x88, Size: 0x10]
	SGInventory* WaitInventory;//[Offset: 0x98, Size: 0x8]
	SGAbilityTask_WaitMeshCompleted* WaitForMeshCompleted(GameplayAbility* OwningAbility, SGInventory* InInventory);// 0x3569e3fee041
	void OnMeshAsyncLoadCompleted(SkeletalMesh* LoadedMesh);// 0x3568e3fee041

--------------------------------
Class: SGAbilityTask_WaitNextTick.AbilityTask.GameplayTask.Object
	delegate OnFinish;//[Offset: 0x78, Size: 0x10]
	SGAbilityTask_WaitNextTick* WaitNextTick(GameplayAbility* OwningAbility);// 0x356ae3fee041

--------------------------------
Class: SGAbilityTask_WaitUntilAnimationSetReady.AbilityTask.GameplayTask.Object
	delegate OnReady;//[Offset: 0x78, Size: 0x10]
	SGInventory*[] Targets;//[Offset: 0x88, Size: 0x10]
	SGInventory*[] WaitingTargets;//[Offset: 0x98, Size: 0x10]
	void OnAnimationSetLoaded(SGWeapon* Target, bool bLoadedOrUnloaded);// 0x356ce3fee041
	SGAbilityTask_WaitUntilAnimationSetReady* CreateWaitUntilAnimationSetReadyProxy(GameplayAbility* OwningAbility, SGInventory*[] Targets);// 0x356be3fee041

--------------------------------
Class: SGActorBeUsedComponent.ActorComponent.Object
	Actor* UserActor;//[Offset: 0xc0, Size: 0x8]
	enum UseInBodyPart;//[Offset: 0xc8, Size: 0x1]
	Actor*[] UserActors;//[Offset: 0xd0, Size: 0x10]
	TimerHandle TickTimer;//[Offset: 0xe0, Size: 0x8]
	AnimMontage* CharacterUsingAnim;//[Offset: 0x108, Size: 0x8]
	AnimMontage* CharacterUnUsingAnim;//[Offset: 0x110, Size: 0x8]
	void UsedBy(Actor* User, int Mode);// 0x3576e3fee041
	void UnusedBy(Actor* User);// 0x3575e3fee041
	void SetUseInBodyPart(Actor* User, enum Type);// 0x3574e3fee041
	void OnRep_UseInBodyPart();// 0x3573e3fee041
	Actor* GetUserActor();// 0x3572e3fee041
	enum GetUseInBodyPart();// 0x3571e3fee041
	FName GetUsageType();// 0x3570e3fee041
	void CheckUserActorsState();// 0x356fe3fee041
	enum CanBeUsedByWithFailureReason(Actor* User);// 0x356ee3fee041
	bool CanBeUsedBy(Actor* User);// 0x356de3fee041

--------------------------------
Class: SGActorEnduranceComponent.ActorComponent.Object
	float MaxEndurance;//[Offset: 0xb8, Size: 0x4]
	float CurrentEndurance;//[Offset: 0xbc, Size: 0x4]
	delegate ActorEnduranceChangedEvent;//[Offset: 0xc0, Size: 0x10]
	void OnRep_CurrentEndurance();// 0x357ce3fee041
	float GetEndurance();// 0x357be3fee041
	void ChangeEndurance(float NewEndurance);// 0x357ae3fee041

--------------------------------
Class: SGActorFactionComponent.ActorComponent.Object
	SGFaction* Faction;//[Offset: 0xc0, Size: 0x8]
	void SetFaction(SGFaction* CurFaction);// 0x357fe3fee041
	void OnRep_FactionChanged();// 0x357ee3fee041
	SGFaction* GetFaction();// 0x357de3fee041

--------------------------------
Class: SGFaction.Actor.Object
	int FactionIndex;//[Offset: 0x2e8, Size: 0x4]
	enum FactionType;//[Offset: 0x2ec, Size: 0x1]
	interface classNone[] TeamArray;//[Offset: 0x2f0, Size: 0x10]
	bool RemoveFromFaction(interface classNone Team);// 0x4262e3fee041
	bool AddToFaction(interface classNone Team);// 0x4261e3fee041

--------------------------------
Class: SGActorHealthAttributeSet.AttributeSet.Object
	float Health;//[Offset: 0x34, Size: 0x4]
	float HealthMax;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SGActorHealthComponent.ActorComponent.Object
	class SGActorHealthAttributeSet* AttributeSetClass;//[Offset: 0xb8, Size: 0x8]
	void SetHealthMax(float Value, Actor* Instigator);// 0x3584e3fee041
	void SetHealth(float Value, Actor* Instigator);// 0x3583e3fee041
	float GetHealthMax();// 0x3582e3fee041
	float GetHealth();// 0x3581e3fee041
	void AddHealth(float Value, Actor* Instigator);// 0x3580e3fee041

--------------------------------
Class: SGActorInventoryFactoryComponent.SceneComponent.ActorComponent.Object
	class SGInventory* InventoryClass;//[Offset: 0x208, Size: 0x28]
	StaticMesh* EditorEmptyMesh;//[Offset: 0x230, Size: 0x8]
	DataTable* ConfigDataTable;//[Offset: 0x238, Size: 0x8]
	SGInventory* LootContainer;//[Offset: 0x240, Size: 0x8]
	SGInventory*[] SpawnedRootInventories;//[Offset: 0x248, Size: 0x10]
	SGInventory*[] SpawnedInventories;//[Offset: 0x258, Size: 0x10]
	float OffsetRange;//[Offset: 0x268, Size: 0x4]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 0x1]
	bool bContainerAutoCheckPlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 0x1]
	bool bAutoCheckPlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 0x1]
	float CheckPlacementZOffset;//[Offset: 0x270, Size: 0x4]
	bool bDisableRegistToGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	void SpawnInvntory(int MatchType);// 0x35eae3fee041
	int GetStayLootVolumeID();// 0x35e9e3fee041
	SGInventory* GetSpawnedLootContainer();// 0x35e8e3fee041
	SGInventory*[] GetSpawnedInventories();// 0x35e7e3fee041
	int GetLootPointID();// 0x35e6e3fee041
	void ClearSpawnedInventories();// 0x35e5e3fee041

--------------------------------
Class: SGActorRadiusCheckComp.SceneComponent.ActorComponent.Object
	enum RadiusCheckType;//[Offset: 0x202, Size: 0x1]
	float CheckRadius;//[Offset: 0x204, Size: 0x4]
	float CheckInterval;//[Offset: 0x208, Size: 0x4]
	SphereComponent* SphereComponentInstance;//[Offset: 0x210, Size: 0x8]
	SGVolume* OverrideCheckVolume;//[Offset: 0x218, Size: 0x8]
	delegate ActorRadiusCheckOverlap;//[Offset: 0x220, Size: 0x10]
	void OnOverlapEnd(Actor* OverlappedComponent, Actor* OtherActor);// 0x35efe3fee041
	void OnOverlapBegin(Actor* OverlappedComponent, Actor* OtherActor);// 0x35eee3fee041
	void DeactivateCheck();// 0x35ede3fee041
	void AttachCollisionComponent();// 0x35ece3fee041
	void ActivateCheck();// 0x35ebe3fee041

--------------------------------
Class: SGActorRotationComponent.ActorComponent.Object
	MeshComponent* TargetMesh;//[Offset: 0xe8, Size: 0x8]
	enum GetCurrentRotationState();// 0x35f2e3fee041
	bool Forward(float Time, Rotator TargetRotation);// 0x35f1e3fee041
	bool BackWard(float Time);// 0x35f0e3fee041

--------------------------------
Class: SGActorSoundOwner.Actor.Object

--------------------------------
Class: SGActorSoundComponent.ActorComponent.Object
	<FName,AkAudioEvent*> SoundMap;//[Offset: 0xb8, Size: 0x50]

--------------------------------
Class: SGActorStatics.BlueprintFunctionLibrary.Object
	void UseActor(Actor* User, Actor* BeUsed, FName UsageType, enum UseInBodyType);// 0x3625e3fee041
	float TakeDamage(Actor* Actor, float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x3624e3fee041
	void SetStaticMeshRegardlessMobility(StaticMeshComponent* StaticMeshComponent, StaticMesh* StaticMesh);// 0x3623e3fee041
	void SetHealthMax(Actor* Actor, float HealthMax, Actor* Instigator);// 0x3622e3fee041
	void SetHealth(Actor* Actor, float Health, Actor* Instigator);// 0x3621e3fee041
	void SetCacheUsingActor(Actor* User, Actor* Inventory);// 0x3620e3fee041
	bool SaveTextureToPNG(Texture2D* Texture2D, FString Path, FString Filename);// 0x361fe3fee041
	void RegisterComponent(ActorComponent* Component);// 0x361ee3fee041
	ActorComponent* K2_FindComponentByName(Actor* Actor, class Object Class, FName Name);// 0x361de3fee041
	ActorComponent* K2_FindComponentByClass(Actor* Actor, class ActorComponent Class);// 0x361ce3fee041
	ActorComponent* K2_AddComponentByClass(Actor* Actor, class ActorComponent Class);// 0x361be3fee041
	bool IsWaterActor(Actor* Actor);// 0x361ae3fee041
	bool IsThrowableProjectile(Actor* Actor);// 0x3619e3fee041
	bool IsInShootingRoom(World* World);// 0x3618e3fee041
	bool IsInLobby(World* World);// 0x3617e3fee041
	bool IsInBattleOrShootingRoom(World* World);// 0x3616e3fee041
	bool IsInBattle(World* World);// 0x3615e3fee041
	bool IsDead(Actor* Actor);// 0x3614e3fee041
	bool GetWorldTickEnable();// 0x3613e3fee041
	FString GetUniqueID(Actor* Actor);// 0x3612e3fee041
	Character* GetTopCharacterOwner(ActorComponent* ActorComp);// 0x3611e3fee041
	FString GetTickableActorComponentInfo(Actor* Inv);// 0x3610e3fee041
	Texture2D*[] GetSkeletalMeshUsedTextures(SkeletalMesh* SkelMesh);// 0x360fe3fee041
	void GetRefActorLocationBeforeRebase(Actor* Actor, out Vector Pos);// 0x360ee3fee041
	Actor* GetParentActorWithName(Actor* InActor, FString SearchName);// 0x360de3fee041
	float GetHealthMax(Actor* Actor);// 0x360ce3fee041
	float GetHealth(Actor* Actor);// 0x360be3fee041
	enum GetGameSceneType(World* World);// 0x360ae3fee041
	float GetDistanceToLocalViewTarget(Actor* Actor);// 0x3609e3fee041
	float GetDeadTimeStamp(Actor* Actor);// 0x3608e3fee041
	SGActorBeUsedComponent* GetComponentByUsageType(Actor* ActorBeUsed, FName UsageType);// 0x3607e3fee041
	Actor* GetCacheUsingActor(Actor* InOwner);// 0x3606e3fee041
	void GetAllAttachedActors(Actor* ParentActor, out Actor*[] ChildActorList, bool bIncludeParent, int nLoopNum, int nSource);// 0x3605e3fee041
	StreamableRenderAsset* GetActorMesh(Actor* InActor);// 0x3604e3fee041
	Vector GetActorLocationBeforeRebase(Actor* Actor);// 0x3603e3fee041
	float GetActorCreateTime(Actor* Actor);// 0x3602e3fee041
	AbilitySystemComponent* GetAbilitySystemComponent(Actor* Actor);// 0x3601e3fee041
	float Get3DDistanceToLocalViewTarget(Actor* Actor);// 0x3600e3fee041
	void ForceSetLOD(SkinnedMeshComponent* SkeletalMeshComp, int TargetLod);// 0x35ffe3fee041
	void ForceDied(Actor* Actor, Controller* EventInstigator, Actor* EffectCauser, DamageEventObject* DamageEventObject);// 0x35fee3fee041
	void EnableWorldTick(bool bEnable);// 0x35fde3fee041
	void EnableRigidBodyAnimNode(bool bEnable);// 0x35fce3fee041
	void Died(Actor* Actor, Controller* EventInstigator, Actor* EffectCauser, DamageEventObject* DamageEventObject);// 0x35fbe3fee041
	void DeferDied(Actor* Actor, Controller* EventInstigator, Actor* EffectCauser, DamageEventObject* DamageEventObject, float DeferTime);// 0x35fae3fee041
	StaticMeshComponent* CreateNewStaticMeshComponent(Actor* InOwner, FName InName);// 0x35f9e3fee041
	SkeletalMeshComponent* CreateNewSkeletalMeshComponent(Actor* InOwner, FName InName);// 0x35f8e3fee041
	void ClearAIDeathBox();// 0x35f7e3fee041
	bool CanBeUsed(Actor* ActorBeUsed, Actor* User);// 0x35f6e3fee041
	void AddLoacalRotationY(SceneComponent* Component, float rotate);// 0x35f5e3fee041
	void AddInstanceComponentToOwner(Actor* InOwner, ActorComponent* Component);// 0x35f4e3fee041
	bool ActorIsValid(Actor* Actor);// 0x35f3e3fee041

--------------------------------
Class: SGActorSyncToOwnerComponent.ActorComponent.Object

--------------------------------
Class: SGActorTakeDamageComponent.ActorComponent.Object
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x3626e3fee041

--------------------------------
Class: SGActorTemplateInterface.Interface.Object

--------------------------------
Class: SGActorTickManagerInterface.Interface.Object

--------------------------------
Class: SGActorZoneInfoComponentBase.ActorComponent.Object
	void OnResProtocol();// 0x3631e3fee041

--------------------------------
Class: SGAdapterAnimInstance.AnimInstance.Object
	AnimSequence* Sequence_BipOn;//[Offset: 0x2b8, Size: 0x8]
	SGAdapterAnimInstanceProxy LocalProxy;//[Offset: 0x2c0, Size: 0x770]

--------------------------------
Class: SGAdapterAnimInstanceProxy.AnimInstanceProxy
	SGAdapterAnimInstance* AnimInstance;//[Offset: 0x760, Size: 0x8]
	float BipOnAlpha;//[Offset: 0x768, Size: 0x4]

--------------------------------
Class: SGAdapterRefManager.Object
	SGAdapterInfo[] AdapterReferenceList;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SGAdapterInfo
	FName AdapterItemID;//[Offset: 0x0, Size: 0x8]
	SGWeaponAdapterInfo AdapterType;//[Offset: 0x8, Size: 0x20]
	class SGWeaponAdapterItem* AdapterClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SGWeaponAdapterInfo
	enum AdapterSocketType;//[Offset: 0x0, Size: 0x1]
	enum AdapterSubType;//[Offset: 0x1, Size: 0x1]
	FString AdapterString;//[Offset: 0x8, Size: 0x10]
	bool bDisplaySocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: SGWeaponAdapterItem.Object
	FName MeshAttachSocket_1P;//[Offset: 0x28, Size: 0x8]
	SoftObjectPath MeshResouceRef_1P;//[Offset: 0x30, Size: 0x18]
	FName MeshAttachSocket_3P;//[Offset: 0x48, Size: 0x8]
	SoftObjectPath MeshResouceRef_3P;//[Offset: 0x50, Size: 0x18]
	SoftObjectPath MeshResouceRef_3P_Low;//[Offset: 0x68, Size: 0x18]
	FName ParticlesSocket;//[Offset: 0x80, Size: 0x8]
	SoftObjectPath ParticlesTemplate;//[Offset: 0x88, Size: 0x18]
	int AdapterAnimFactor;//[Offset: 0xa0, Size: 0x4]
	SGWeapon* OwnerWeapon;//[Offset: 0xa8, Size: 0x8]
	SkeletalMeshComponent* WeaponMeshComp;//[Offset: 0xb0, Size: 0x8]
	FName AttachSocketName;//[Offset: 0xb8, Size: 0x8]
	FName AttachHandSocketName;//[Offset: 0xc0, Size: 0x8]
	WeaponAdapterAttchingInfo LocalAttachInfo;//[Offset: 0xc8, Size: 0x10]
	bool bItemAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	bool bShouldAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	TimerHandle MeshAttachTimerHandler;//[Offset: 0xe0, Size: 0x8]
	bool bAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	SGInventory* AdapterInventory;//[Offset: 0x110, Size: 0x8]
	ParticleSystemComponent* AdapterParticleComponent;//[Offset: 0x118, Size: 0x8]
	SoftObjectPath MeshPath;//[Offset: 0x120, Size: 0x18]
	StaticMeshComponent* AdapterMeshComponent;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: WeaponAdapterAttchingInfo
	class SGWeaponAdapterItem* AdapterClass;//[Offset: 0x0, Size: 0x8]
	float AttachingScale_1P;//[Offset: 0x8, Size: 0x4]
	float AttachingScale_3P;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SGAIVolume.SGVolume.PhysicsVolume.Volume.Brush.Actor.Object
	Color DisplayColor;//[Offset: 0x368, Size: 0x4]

--------------------------------
Class: SGAIAreaVolume.SGAIVolume.SGVolume.PhysicsVolume.Volume.Brush.Actor.Object
	SGAIVolume* ParentVolume;//[Offset: 0x378, Size: 0x8]
	Volume* GetParentVolume();// 0x3682e3fee041

--------------------------------
Class: SGAIBattleVolume.SGAIVolume.SGVolume.PhysicsVolume.Volume.Brush.Actor.Object
	bool bShouldSaveNavSkeletonPointsInVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	bool bUseAreaVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 0x1]
	float OverriddenVisiblityMaxRangeInVolume;//[Offset: 0x37c, Size: 0x4]
	interface classNone[] AreaVolumes;//[Offset: 0x380, Size: 0x10]
	int[] NavSkeletonPointIDs;//[Offset: 0x390, Size: 0x10]

--------------------------------
Class: SGAIBotZoneVolume.SGAIVolume.SGVolume.PhysicsVolume.Volume.Brush.Actor.Object
	bool bTriggerSpawnVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1]

--------------------------------
Class: BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x68, Size: 0x8]
	Actor* ActorOwner;//[Offset: 0x70, Size: 0x8]
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	bool bShowEventDetails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1]
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x368ce3fee041
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x368be3fee041
	void ReceiveSearchStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x368ae3fee041
	void ReceiveSearchStart(Actor* OwnerActor);// 0x3689e3fee041
	void ReceiveDeactivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x3688e3fee041
	void ReceiveDeactivation(Actor* OwnerActor);// 0x3687e3fee041
	void ReceiveActivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x3686e3fee041
	void ReceiveActivation(Actor* OwnerActor);// 0x3685e3fee041
	bool IsServiceActive();// 0x3684e3fee041

--------------------------------
Class: SGAIBTService_CalcHealthPercentage.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	float HeadEnduranceNow;//[Offset: 0x8c, Size: 0x4]
	float ChestEnduranceNow;//[Offset: 0x90, Size: 0x4]
	float StomachEnduranceNow;//[Offset: 0x94, Size: 0x4]
	float LArmEnduranceNow;//[Offset: 0x98, Size: 0x4]
	float RArmEnduranceNow;//[Offset: 0x9c, Size: 0x4]
	float LLegEnduranceNow;//[Offset: 0xa0, Size: 0x4]
	float RLegEnduranceNow;//[Offset: 0xa4, Size: 0x4]
	float TotalEnduranceNow;//[Offset: 0xa8, Size: 0x4]
	float StomachEnduranceLast;//[Offset: 0xac, Size: 0x4]
	float LArmEnduranceLast;//[Offset: 0xb0, Size: 0x4]
	float RArmEnduranceLast;//[Offset: 0xb4, Size: 0x4]
	float LLegEnduranceLast;//[Offset: 0xb8, Size: 0x4]
	float RLegEnduranceLast;//[Offset: 0xbc, Size: 0x4]
	void SaveEnduranceValuesAsLastCache();// 0x3691e3fee041
	void InitBodyEnduranceValues(Character* AIPawn);// 0x3690e3fee041
	float GetEnduraceFromLocalCache(out const enum Type);// 0x368fe3fee041
	bool CheckHasPartLostEndurance(out enum EnduranceType);// 0x368ee3fee041
	void CalculateHurtedPartNum(Character* AIPawn, out int HurtedPartNum, out int HurtedImportantPartNum, out float TotalHealthPercent);// 0x368de3fee041

--------------------------------
Class: BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x70, Size: 0x8]
	Actor* ActorOwner;//[Offset: 0x78, Size: 0x8]
	IntervalCountdown TickInterval;//[Offset: 0x80, Size: 0x8]
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	void SetFinishOnMessageWithId(FName MessageName, int RequestID);// 0x369de3fee041
	void SetFinishOnMessage(FName MessageName);// 0x369ce3fee041
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x369be3fee041
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x369ae3fee041
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x3699e3fee041
	void ReceiveExecute(Actor* OwnerActor);// 0x3698e3fee041
	void ReceiveAbortAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x3697e3fee041
	void ReceiveAbort(Actor* OwnerActor);// 0x3696e3fee041
	bool IsTaskExecuting();// 0x3695e3fee041
	bool IsTaskAborting();// 0x3694e3fee041
	void FinishExecute(bool bSuccess);// 0x3693e3fee041
	void FinishAbort();// 0x3692e3fee041

--------------------------------
Class: IntervalCountdown
	float Interval;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: NPCBTTask_BlueprintBase.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	bool bWithTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2, Size: 0x1]
	FString TagText;//[Offset: 0xa8, Size: 0x10]
	FString Message;//[Offset: 0xb8, Size: 0x10]

--------------------------------
Class: NPCBTTask_LatenTaskBase.NPCBTTask_BlueprintBase.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	float TaskDuration;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: SGAIBTTask_FastThrowProjectile.NPCBTTask_LatenTaskBase.NPCBTTask_BlueprintBase.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector ProjectileID;//[Offset: 0xd0, Size: 0x28]
	BlackboardKeySelector ProjectileInitSpeed;//[Offset: 0xf8, Size: 0x28]
	BlackboardKeySelector TargetLocation;//[Offset: 0x120, Size: 0x28]
	class Object* ClassWeaponMissile;//[Offset: 0x148, Size: 0x8]
	bool bMustThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	bool bHigherFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]
	SGAICharacter* AICharacter;//[Offset: 0x178, Size: 0x8]
	SGInventory* OriginalWeapon;//[Offset: 0x180, Size: 0x8]
	SGInventory* ProjectileWeapon;//[Offset: 0x188, Size: 0x8]
	SGCharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x190, Size: 0x8]

--------------------------------
Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0x10]
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8]
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x8]
	byte SelectedKeyID;//[Offset: 0x20, Size: 0x1]
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: SGAICharacter.SGCharacter.Character.Pawn.Actor.Object
	AIRankData RankData;//[Offset: 0x1420, Size: 0xc]
	float PatrolRadius;//[Offset: 0x142c, Size: 0x4]
	float CautionRadius;//[Offset: 0x1430, Size: 0x4]
	float CrossFireRadius;//[Offset: 0x1434, Size: 0x4]
	int Kill_PMCAI_Count;//[Offset: 0x1438, Size: 0x4]
	int Kill_ScavAI_Count;//[Offset: 0x143c, Size: 0x4]
	int Kill_PMCPlayer_Count;//[Offset: 0x1440, Size: 0x4]
	int Kill_ScavPlayer_Count;//[Offset: 0x1444, Size: 0x4]
	int Loot_Count;//[Offset: 0x1448, Size: 0x4]
	FName SpawnedGroupID;//[Offset: 0x144c, Size: 0x8]
	int EquipmentPoolID;//[Offset: 0x1454, Size: 0x4]
	int64 AIID;//[Offset: 0x1458, Size: 0x8]
	int64 PathGroupID;//[Offset: 0x1460, Size: 0x8]
	int AILevel;//[Offset: 0x1468, Size: 0x4]
	float GrenadeThrowAngle;//[Offset: 0x146c, Size: 0x4]
	float GrenadeInitSpeed;//[Offset: 0x1470, Size: 0x4]
	float LastBattleEnterTime;//[Offset: 0x1474, Size: 0x4]
	delegate OnAICharacterReady;//[Offset: 0x1478, Size: 0x10]
	DataTable* SoundData;//[Offset: 0x1488, Size: 0x8]
	float DeathNetCullDistanceSquared;//[Offset: 0x1490, Size: 0x4]
	<int,NPCAICoverEnvQueryData*> EQSDataInstances;//[Offset: 0x1498, Size: 0x50]
	bool bAIReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e8, Size: 0x1]
	bool bCanStartAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e9, Size: 0x1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ea, Size: 0x1]
	FString AIName;//[Offset: 0x14f0, Size: 0x10]
	int Handle;//[Offset: 0x1500, Size: 0x4]
	SpawnRecord MySpawnRecord;//[Offset: 0x1508, Size: 0x50]
	SGCharacterAIStaticsComponent* AIStaticsComponent;//[Offset: 0x1558, Size: 0x8]
	int TotalKillCount();// 0x376de3fee041
	void SetCanStartAI();// 0x376ce3fee041
	void SetAIActive(bool Active);// 0x376be3fee041
	bool RemoveEQSDataInstance(int QueryID);// 0x376ae3fee041
	void OnRep_AIReady();// 0x3769e3fee041
	void OnPostDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x3768e3fee041
	void OnKillOther(out const KillInfo KillInfo, out const KillOtherStatis KillOtherStatics);// 0x3767e3fee041
	bool MarkBattleLeave(enum reason);// 0x3766e3fee041
	bool MarkBattleEnter();// 0x3765e3fee041
	Actor* GetStartSpot();// 0x3764e3fee041
	int64 GetPathGroupID();// 0x3763e3fee041
	int64 GetID();// 0x3762e3fee041
	int GetHandle();// 0x3761e3fee041
	NPCAICoverEnvQueryData* GetEQSDataInstance(int QueryID);// 0x3760e3fee041
	float GetBattleDuration();// 0x375fe3fee041
	int GetAILevel();// 0x375ee3fee041
	bool GetAIActive();// 0x375de3fee041
	NPCAICoverEnvQueryData* CreateEQSDataInstance(int QueryID);// 0x375ce3fee041
	bool BackToSpawnPoint();// 0x375be3fee041

--------------------------------
Class: AIRankData
	int ranking;//[Offset: 0x0, Size: 0x4]
	int pranking;//[Offset: 0x4, Size: 0x4]
	int ranked_rd;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: KillInfo
	Controller* KillerController;//[Offset: 0x0, Size: 0x8]
	Controller* KilledController;//[Offset: 0x8, Size: 0x8]
	Pawn* KillerPawn;//[Offset: 0x10, Size: 0x8]
	Pawn* KilledPawn;//[Offset: 0x18, Size: 0x8]
	Actor* KillerWeapon;//[Offset: 0x20, Size: 0x8]
	DamageEventObject* DamageEventObject;//[Offset: 0x28, Size: 0x8]
	int64 KillerWeaponId;//[Offset: 0x30, Size: 0x8]
	int64 KilledWeaponId;//[Offset: 0x38, Size: 0x8]
	int KillerBulletPenetrateFactor;//[Offset: 0x40, Size: 0x4]
	int KilledBulletPenetrateFactor;//[Offset: 0x44, Size: 0x4]
	int KillDistance;//[Offset: 0x48, Size: 0x4]
	bool bDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bHitArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bPenetrateArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	enum EnduranceType;//[Offset: 0x4f, Size: 0x1]

--------------------------------
Class: KillOtherStatis
	float AllDamage;//[Offset: 0x0, Size: 0x4]
	int HitCount;//[Offset: 0x4, Size: 0x4]
	float AllArmorReduceDamage;//[Offset: 0x8, Size: 0x4]
	int64 ArmorId;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: NPCAICoverEnvQueryData.Object
	Vector Generator_Location;//[Offset: 0xd0, Size: 0xc]
	float Generator_Radius;//[Offset: 0xdc, Size: 0x4]
	Volume* Generator_BotZoneVolume;//[Offset: 0xe0, Size: 0x8]
	float IsFree_TreatAsFreeAfterSeconds;//[Offset: 0xe8, Size: 0x4]
	float IsSafe_TreatAsSafeAfterSeconds;//[Offset: 0xec, Size: 0x4]
	Vector IsNear_Location;//[Offset: 0xf0, Size: 0xc]
	float IsNear_Distance;//[Offset: 0xfc, Size: 0x4]
	bool IsNear_Reversed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	Vector CloserRatio_Location;//[Offset: 0x104, Size: 0xc]
	float CloserRatio_Ratio;//[Offset: 0x110, Size: 0x4]
	Vector CanContain_TargetLocation;//[Offset: 0x114, Size: 0xc]
	float CanContain_HorizontalAngle;//[Offset: 0x120, Size: 0x4]
	float CanContain_TopAngle;//[Offset: 0x124, Size: 0x4]
	float CanContain_BottomAngle;//[Offset: 0x128, Size: 0x4]
	Vector CanAttackTo_TargetLocation;//[Offset: 0x12c, Size: 0xc]
	Actor*[] CanAttackTo_IgnoredActors;//[Offset: 0x138, Size: 0x10]
	Vector PathLength_StartLocation;//[Offset: 0x148, Size: 0xc]
	float PathLength_MaxPathLength;//[Offset: 0x154, Size: 0x4]
	float PathLength_MaxRatio;//[Offset: 0x158, Size: 0x4]
	float PathLength_CheckPoint;//[Offset: 0x15c, Size: 0x4]
	float DefenceRatio_MinRatio;//[Offset: 0x160, Size: 0x4]
	float DefenceAngle_MinAngle;//[Offset: 0x164, Size: 0x4]
	Vector[] DistanceToHotPoint_Locations;//[Offset: 0x168, Size: 0x10]
	Vector DistanceToAllyCover_Location;//[Offset: 0x178, Size: 0xc]
	float DistanceToAllyCover_MinDistance;//[Offset: 0x184, Size: 0x4]
	Vector IsSameSideToTarget_TargetLocation;//[Offset: 0x188, Size: 0xc]
	Vector IsSameSideToTarget_TargetDirection;//[Offset: 0x194, Size: 0xc]
	Vector IsInCone_Location;//[Offset: 0x1a0, Size: 0xc]
	Vector IsInCone_Direction;//[Offset: 0x1ac, Size: 0xc]
	float IsInCone_Radius;//[Offset: 0x1b8, Size: 0x4]
	float IsInCone_Angle;//[Offset: 0x1bc, Size: 0x4]
	Vector CoverDist_Location;//[Offset: 0x1c0, Size: 0xc]
	float CoverDist_MaxDistance;//[Offset: 0x1cc, Size: 0x4]
	void SetupPathLength(out const Vector Location, float MaxPathLength, float MaxRatio, float CheckPointPathLength);// 0x5388e3fee041
	void SetupIsSameSideToTarget(out const Vector Location, out const Vector Direction);// 0x5387e3fee041
	void SetupIsSafe(float TreatAsSafeAfterSeconds);// 0x5386e3fee041
	void SetupIsIsNear(out const Vector Location, float Distance, bool bReversed);// 0x5385e3fee041
	void SetupIsInCone(out const Vector Location, out const Vector Direction, float Radius, float Angle);// 0x5384e3fee041
	void SetupIsFree(float TreatAsFreeAfterSeconds);// 0x5383e3fee041
	void SetupIsCloserRatio(out const Vector Location, float Ratio);// 0x5382e3fee041
	void SetupGenerator(out const Vector Location, float Radius, Volume* BotZoneVolume);// 0x5381e3fee041
	void SetupDistanceToHotPoint(out const Vector[] Locations);// 0x5380e3fee041
	void SetupDistanceToAllyCover(out const Vector Location, float MinDistance);// 0x537fe3fee041
	void SetupDefenceRatio(float MinRatio);// 0x537ee3fee041
	void SetupDefenceAngle(float MinAngle);// 0x537de3fee041
	void SetupCoverDist(out const Vector Location, float MaxDistance);// 0x537ce3fee041
	void SetupCanContain(out const Vector Location, float HorizontalAngle, float TopAngle, float BottomAngle);// 0x537be3fee041
	void SetupCanAttackTo(out const Vector Location, out const Actor*[] IgnoredActors);// 0x537ae3fee041

--------------------------------
Class: SpawnRecord
	SpawnPointInfo* SpawnPointInfo;//[Offset: 0x0, Size: 0x8]
	Actor* SpawnPoint;//[Offset: 0x8, Size: 0x8]
	int SpawnSquadID;//[Offset: 0x10, Size: 0x4]
	FString SpawnArea;//[Offset: 0x18, Size: 0x10]
	enum SpawnReason;//[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: SpawnPointInfo.Object

--------------------------------
Class: SGCharacterAIStaticsComponent.ActorComponent.Object
	enum AIMainType;//[Offset: 0xc8, Size: 0x1]
	enum AIFactionType;//[Offset: 0xc9, Size: 0x1]
	float ChangeFactionTime;//[Offset: 0xcc, Size: 0x4]
	class Object* AmmoClassCache;//[Offset: 0xd0, Size: 0x8]
	NPCAIPropertyComponent_AIType* AITypeProps;//[Offset: 0xd8, Size: 0x8]
	NPCAIMultiTargetSelectorComponent* MultiTargetSelectorComponent;//[Offset: 0xe0, Size: 0x8]
	void OnLoadCompleted_ChangeAIProfileFaction(SoftObjectPath Path);// 0x3ab6e3fee041
	bool IsInTransitionAnim(Character* Character);// 0x3ab5e3fee041
	bool IsAIReady(Actor* TargetPawn);// 0x3ab4e3fee041
	bool IsAIActive(Actor* TargetPawn);// 0x3ab3e3fee041
	int64 GetAIPathGroupID();// 0x3ab2e3fee041
	int64 GetAIID();// 0x3ab1e3fee041
	enum GetAIBodyPartTypeByHitGroupType(byte HitGroupType);// 0x3ab0e3fee041
	bool ChangeAIProfileFaction(class NPCAIFactionComponent FactionClass);// 0x3aafe3fee041

--------------------------------
Class: NPCAIFactionComponent.NPCAIActorComponent.ActorComponent.Object
	NPCAIPropertyProfile*[] PropertyProfiles;//[Offset: 0xc8, Size: 0x10]

--------------------------------
Class: NPCAIActorComponent.ActorComponent.Object
	NPCAIProfileBaseComponent*[] PropertyComponents;//[Offset: 0xb8, Size: 0x10]
	NPCAIProfileBaseComponent* GetAIPropertyByClass(class NPCAIProfileBaseComponent InPropertyClass);// 0x5348e3fee041

--------------------------------
Class: NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object

--------------------------------
Class: NPCAIPropertyComponent_AIType.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	NPCAIModifierComponent_AIType* Modifier_AIType;//[Offset: 0x38, Size: 0x8]
	bool InitModifierComponents();// 0x556ae3fee041
	enum GetAIProfileType();// 0x5569e3fee041
	enum GetAIMainType();// 0x5568e3fee041

--------------------------------
Class: NPCAIModifierComponent_AIType.NPCAIModifierComponent.NPCAIProfileBaseComponent.Object

--------------------------------
Class: NPCAIModifierComponent.NPCAIProfileBaseComponent.Object

--------------------------------
Class: NPCAIMultiTargetSelectorComponent.NPCAIMultiTargetSystemComponent.NPCAISubSystemComponent.ActorComponent.Object
	FString PerceptionTag1;//[Offset: 0x150, Size: 0x10]
	FString PerceptionTag2;//[Offset: 0x160, Size: 0x10]
	FString PerceptionTag3;//[Offset: 0x170, Size: 0x10]
	float DistanceToPercActor;//[Offset: 0x180, Size: 0x4]
	float DistanceToPercLoc;//[Offset: 0x184, Size: 0x4]
	Actor* PerceptionActor;//[Offset: 0x188, Size: 0x8]
	AIStimulus PerceptionStimulus;//[Offset: 0x190, Size: 0x3c]
	bool bIsTeamEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 0x1]
	bool bIsTeamFriendly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 0x1]
	bool bIsGroupEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce, Size: 0x1]
	bool bIsGroupAlly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf, Size: 0x1]
	bool bIsSounder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	Actor* SounderThrower;//[Offset: 0x1d8, Size: 0x8]
	Actor* LastFireToMePerson;//[Offset: 0x1e0, Size: 0x8]
	float LastFireToMeTime;//[Offset: 0x1e8, Size: 0x4]
	Actor* LastShootMePerson;//[Offset: 0x1f0, Size: 0x8]
	Vector LastShootMePersonLocation;//[Offset: 0x1f8, Size: 0xc]
	float LastBeenShootTime;//[Offset: 0x204, Size: 0x4]
	AIShotCountStat BeHitCount;//[Offset: 0x208, Size: 0x10]
	bool bIsCheatGhost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	float LastCalculateWarnPlayerTime;//[Offset: 0x21c, Size: 0x4]
	float LastCalculateGoalEnemyTime;//[Offset: 0x220, Size: 0x4]
	float LastCalculateGoalPointTime;//[Offset: 0x224, Size: 0x4]
	float LastFilterNotValidDataTime;//[Offset: 0x228, Size: 0x4]
	float NextLeanAutoRelaxTime;//[Offset: 0x22c, Size: 0x4]
	float LastTodoHearingTime;//[Offset: 0x230, Size: 0x4]
	float TEMPORARY_ENEMY_DURATION_TIME;//[Offset: 0x234, Size: 0x4]
	float SWITCH_TO_ENEMY_IF_ATK_INRADIUS;//[Offset: 0x238, Size: 0x4]
	float SWITCH_TO_ENEMY_IF_NEARBY_BETRAYER;//[Offset: 0x23c, Size: 0x4]
	void SetScavPlayerTeamAsGroupEnemy(Actor* InScavPlayer);// 0x54c3e3fee041
	void SetBeHitTime(float InTimeSec);// 0x54c2e3fee041
	void SeparateMultiTags(FName InTotalTag);// 0x54c1e3fee041
	void OnSmokeExplosionToDo();// 0x54c0e3fee041
	void OnSightToDo();// 0x54bfe3fee041
	void OnPerceptionUpdated(Actor* InTarget, AIStimulus InAIStimulus);// 0x54bee3fee041
	void OnHearingToDo();// 0x54bde3fee041
	void OnDamageToDo();// 0x54bce3fee041
	void OnBulletFireToDo(Actor* InInstigator, Vector InBulletLocation, Vector InBulletVelocity, FName InNoiseType);// 0x54bbe3fee041
	bool IsGunNoise(FString InTag);// 0x54bae3fee041
	bool IsBeingFireHited(float InTime, out Actor* OutWhoFire);// 0x54b9e3fee041
	float GetLastBeHitTime();// 0x54b8e3fee041
	float GetFuzzyPointCoef(FString InHearTag);// 0x54b7e3fee041
	float GetFirstBeHitTime();// 0x54b6e3fee041
	int GetBeHitCount();// 0x54b5e3fee041
	Vector CreateFuzzyPoint(Vector InCenterPoint, float InFuzzyRadius);// 0x54b4e3fee041

--------------------------------
Class: BlackboardKeyType_String.BlackboardKeyType.Object
	FString StringValue;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: BlackboardKeyType_Float.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Vector.BlackboardKeyType.Object

--------------------------------
Class: SGAIBTTask_FillBullets.NPCBTTask_LatenTaskBase.NPCBTTask_BlueprintBase.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	SGInventory* ReplacedMagazine;//[Offset: 0xd0, Size: 0x8]
	NPCAIPropertyComponent_Weapon* WeaponProperty;//[Offset: 0xe0, Size: 0x8]

--------------------------------
Class: NPCAIPropertyComponent_Weapon.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	float GetWeaponBaseSpread();// 0x5638e3fee041
	float GetWeaponBaseRecoil();// 0x5637e3fee041
	float GetReloadMinPercentage();// 0x5636e3fee041
	float GetReloadMaxPercentage();// 0x5635e3fee041
	int GetRecalcMustTimeMin();// 0x5634e3fee041
	int GetRecalcMustTimeMax();// 0x5633e3fee041
	float GetMultiShootShakePower();// 0x5632e3fee041
	float GetMinFillBulletTime();// 0x5631e3fee041
	int64 GetMeleeWeaponID();// 0x5630e3fee041
	enum GetAIProfileType();// 0x562fe3fee041

--------------------------------
Class: SGAIBTTask_ThrowProjectile.NPCBTTask_LatenTaskBase.NPCBTTask_BlueprintBase.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector ProjectileID;//[Offset: 0xd0, Size: 0x28]
	BlackboardKeySelector ProjectileInitSpeed;//[Offset: 0xf8, Size: 0x28]
	BlackboardKeySelector TargetLocation;//[Offset: 0x120, Size: 0x28]
	bool bUseFastThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	bool bMustThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]
	bool bMaybeHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1]
	bool bHigherFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1]
	SGAICharacter* AICharacter;//[Offset: 0x178, Size: 0x8]
	SGInventory* OriginalWeapon;//[Offset: 0x180, Size: 0x8]
	SGInventory* ProjectileWeapon;//[Offset: 0x188, Size: 0x8]
	SGCharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x190, Size: 0x8]

--------------------------------
Class: SGAIBTTask_UseInventory.NPCBTTask_LatenTaskBase.NPCBTTask_BlueprintBase.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector InventoryID;//[Offset: 0xd0, Size: 0x28]
	SGAICharacter* AICharacter;//[Offset: 0x108, Size: 0x8]
	SGInventory* RecoveryInventory;//[Offset: 0x110, Size: 0x8]
	void OnUseRecoveryInventory(Character* Character, SGInventory* Inventory, enum InUseInventoryPhase);// 0x369ee3fee041

--------------------------------
Class: SGCharacterAIMoveComponent.SGCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bExitCasualIfSprintOrRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1328, Size: 0x1]
	float LastTimeDoStuck;//[Offset: 0x132c, Size: 0x4]

--------------------------------
Class: SGAICharacterAvatarMergeComponent.SGCharacterAvatarMergeComponent.ActorComponent.Object

--------------------------------
Class: SGAIController.AIController.Controller.Actor.Object
	BehaviorTree* BehaviorTreeTemplate;//[Offset: 0x3f8, Size: 0x8]
	BehaviorTreeComponent* BehaviorTreeComp;//[Offset: 0x400, Size: 0x8]
	delegate OnProcessPawn;//[Offset: 0x408, Size: 0x10]
	NPCAIPropertyComponent*[] AIPropComponents;//[Offset: 0x418, Size: 0x10]
	<class Object,enum> AIPropClassMap;//[Offset: 0x428, Size: 0x50]
	NPCAIMemorySystemComponent* MemoryComponent;//[Offset: 0x478, Size: 0x8]
	NPCAIMultiTargetSelectorComponent* MultiTargetComponent;//[Offset: 0x480, Size: 0x8]
	SGCharacterAIRecoilComponent* AIRecoilComponent;//[Offset: 0x488, Size: 0x8]
	NPCAIMoverSystemComponent* AIMoverComponent;//[Offset: 0x490, Size: 0x8]
	SGAIGlobalManagerComponent* AIGlobalComponent;//[Offset: 0x498, Size: 0x8]
	Rotator LastControlRotation;//[Offset: 0x4a0, Size: 0xc]
	bool bControlInterpCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 0x1]
	bool bInitAIPropClassMapCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ad, Size: 0x1]
	float RotationInterval;//[Offset: 0x4b0, Size: 0x4]
	float RotationIntervalCache;//[Offset: 0x4b4, Size: 0x4]
	bool UpdatingRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	void SetRotationInterval(float InRotationInterval);// 0x378ce3fee041
	void OnPostDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x378be3fee041
	void ModifyRotation_Recoil(float DeltaTime, bool bUpdateControlRotation, out const Vector FocalPoint, out Rotator ViewRotation);// 0x378ae3fee041
	bool IsTargetLastBeenSeen(const Actor* InTarget);// 0x3789e3fee041
	Actor* GetStartSpot();// 0x3788e3fee041

--------------------------------
Class: SGAIGlobalManagerComponent.ActorComponent.Object
	NPCAIPerceptionAssistActor* PerceptionAssistActor;//[Offset: 0xd0, Size: 0x8]
	NPCAIPerceptionDynamicActor* PerceptionDynamicActor;//[Offset: 0xd8, Size: 0x8]
	CoverSystemActor* CoverSystemActor;//[Offset: 0xe0, Size: 0x8]
	TacticSystemActor* TacticSystemActor;//[Offset: 0xe8, Size: 0x8]
	AISceneEventsTriggerManager* AISceneEventsTriggerManager;//[Offset: 0xf0, Size: 0x8]
	AISGDoorManager* AISGDoorManager;//[Offset: 0xf8, Size: 0x8]
	NPCAIAsyncTaskSystem* AsyncTaskSystem;//[Offset: 0x100, Size: 0x8]
	ExponentialHeightFog* HeightFogSystem;//[Offset: 0x108, Size: 0x8]
	int PmcRelativeMaxLevel;//[Offset: 0x120, Size: 0x4]
	int DefaultPmcMinLevel;//[Offset: 0x124, Size: 0x4]
	int DefaultPmcMaxLevel;//[Offset: 0x128, Size: 0x4]
	int MaxRandomEquipCountPerPull;//[Offset: 0x1a0, Size: 0x4]
	int MinEquipSuiteCountPerPool;//[Offset: 0x1a4, Size: 0x4]
	int MaxEquipSuiteCountPerPool;//[Offset: 0x1a8, Size: 0x4]
	int MaxRandomEquipCountInGame;//[Offset: 0x1ac, Size: 0x4]
	SGAIRandomEquipManager* RandomEquipManager;//[Offset: 0x1b0, Size: 0x8]
	AIIDSegInfo AIIDSegInfo;//[Offset: 0x270, Size: 0x40]
	<int,int> PMCEquipValue;//[Offset: 0x2b0, Size: 0x50]
	bool bEnableAppendTestActivityIDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	int64[] TestActivityIDs;//[Offset: 0x308, Size: 0x10]
	<uint64,AIWeaponDefaultBulletClassInfo> AIWeaponDefaultBulletClassInfo;//[Offset: 0x318, Size: 0x50]
	Actor*[] LockPickUpInventorysList;//[Offset: 0x368, Size: 0x10]
	float LastTimeFindIetmsCanPickUpInWorld;//[Offset: 0x378, Size: 0x4]
	Actor*[] CacheItemsCanPickUpInWorld;//[Offset: 0x380, Size: 0x10]
	float DelayTimeReportSpawnedInventoryValue;//[Offset: 0x390, Size: 0x4]
	NPCAIGlobalSharedInfo* SharedVariables;//[Offset: 0x3f0, Size: 0x8]
	float LastAITrackLOGAutoReleaseTime;//[Offset: 0x3f8, Size: 0x4]
	float GrenadeMinLifeTime;//[Offset: 0x3fc, Size: 0x4]
	void OnPerceptionAssistManagerInit();// 0x3855e3fee041
	void OnFoliageBurnFireBlock(MFEnvBurnBlockBound NewBurnBlockBound);// 0x3854e3fee041
	void NotifySceneEvent(AISceneEventMessage* SceneEvent, out const enum EventState, Actor* AIPawn);// 0x3853e3fee041
	void InitAITrackLOGTemplateStr(enum LogType, out FString TemplateStr);// 0x3852e3fee041
	TacticSystemActor* GetTacticSystemActor();// 0x3851e3fee041
	bool GetStillNeededCountOfGroups(out <int,int> OutStillNeededCountOfGroups);// 0x3850e3fee041
	SGAIRandomEquipManager* GetRandomEquipManager();// 0x384fe3fee041
	NPCAIPerceptionDynamicActor* GetPerceptionDynamicActor();// 0x384ee3fee041
	NPCAIPerceptionAssistActor* GetPerceptionAssistActor();// 0x384de3fee041
	float GetCurrentFogDensity();// 0x384ce3fee041
	CoverSystemActor* GetCoverSystemActor();// 0x384be3fee041
	class Actor GetAIWeaponDefaultBulletClass(int64 InWeaponID);// 0x384ae3fee041
	void GetAITrackLOGTemplateStr(enum LogType, out FString TemplateStr);// 0x3849e3fee041
	AISGDoorManager* GetAISGDoorManager();// 0x3848e3fee041
	AISceneEventsTriggerManager* GetAISceneEventsTriggerManager();// 0x3847e3fee041
	DataTable* GetAISceneEventDataTable();// 0x3846e3fee041
	NPCAIGlobalSharedInfo* GetAIGlobalShareInfo();// 0x3845e3fee041
	DataTable* GetActivityAIIDModifierConfig();// 0x3844e3fee041
	void FindAllSGDoorsInWorld(out Actor*[] DoorsInWorld);// 0x3843e3fee041
	bool CanStartPullEquipment(float TimeThreshould);// 0x3842e3fee041
	bool AddUsedEquipmentPoolID(out const FName AIID, int EquipmentPoolID);// 0x3841e3fee041
	bool AddUsedEquipmentLevel(class AIPortraitBase PortraitClass, int EquipmentLevel);// 0x3840e3fee041
	void AddPMCAIInfo(uint64 GID, out FString Name, uint32 sex, uint32 Level, uint32 rank);// 0x383fe3fee041

--------------------------------
Class: MFEnvBurnBlockBound
	Vector CenterPos;//[Offset: 0x0, Size: 0xc]
	int16 RotYaw;//[Offset: 0xc, Size: 0x2]
	byte Extent;//[Offset: 0xe, Size: 0x1]

--------------------------------
Class: CoverSystemActor.ActionPointSystemActor.Actor.Object
	CoverSystem* CoverSystem;//[Offset: 0x338, Size: 0x8]
	DTOCoverData[] RawCoverPoints;//[Offset: 0x340, Size: 0x10]
	int GeneratorVersion;//[Offset: 0x478, Size: 0x4]
	NavMeshCoverPointPoseSamplingConfig[] PoseSamplingConfigs;//[Offset: 0x480, Size: 0x10]
	bool bTestEndpointMovable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 0x1]
	byte TraceChannel;//[Offset: 0x492, Size: 0x1]
	FString[] RejectedActorNames;//[Offset: 0x498, Size: 0x10]
	Volume*[] ExclusionVolumes;//[Offset: 0x4a8, Size: 0x10]
	float GeneratableEdgeMinLength;//[Offset: 0x4b8, Size: 0x4]
	float HoleTestOffset;//[Offset: 0x4bc, Size: 0x4]
	float SamplingHeight;//[Offset: 0x4c0, Size: 0x4]
	float SamplingWidth;//[Offset: 0x4c4, Size: 0x4]
	float HalfAbsoluteWidth;//[Offset: 0x4c8, Size: 0x4]
	float HalfShoulderWidth;//[Offset: 0x4cc, Size: 0x4]
	float ScanStep;//[Offset: 0x4d0, Size: 0x4]
	float ScanReach;//[Offset: 0x4d4, Size: 0x4]
	float CoverPointMinDistance;//[Offset: 0x4d8, Size: 0x4]
	float CoverPointGroundOffset;//[Offset: 0x4dc, Size: 0x4]
	float FireTestOffset;//[Offset: 0x4e0, Size: 0x4]
	float FireLineRadius;//[Offset: 0x4e4, Size: 0x4]
	float FireLineLength;//[Offset: 0x4e8, Size: 0x4]
	float DefenceTraceLength;//[Offset: 0x4ec, Size: 0x4]
	float DefenceAngleStep;//[Offset: 0x4f0, Size: 0x4]
	float RemoveDistance;//[Offset: 0x4f4, Size: 0x4]
	float RemoveAngle;//[Offset: 0x4f8, Size: 0x4]
	float CliffEdgeDistance;//[Offset: 0x4fc, Size: 0x4]
	float StraightCliffErrorTolerance;//[Offset: 0x500, Size: 0x4]
	bool bEnableNavmeshHeightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 0x1]
	bool bUseFastTestNoDefenceRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x505, Size: 0x1]
	bool bParallelNavMeshTile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x506, Size: 0x1]
	bool bParallelDefenceTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x507, Size: 0x1]
	bool bParallelDefenceAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	bool bParallelCollectBoundaryEdge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x509, Size: 0x1]
	bool bParallelGenerateSamplePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50a, Size: 0x1]
	bool bParallelGenerateDefenceMapPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50b, Size: 0x1]
	bool bParallelCalculatePointDefenceRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 0x1]
	bool bParallelCalculatePointDefenceAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 0x1]
	float CoverPointRuntimeInfoExpireTime;//[Offset: 0x510, Size: 0x4]
	bool bInitOctree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 0x1]
	bool bKeepRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x515, Size: 0x1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x516, Size: 0x1]

--------------------------------
Class: ActionPointSystemActor.Actor.Object
	<int64,float> PointToOtherNavPathLengths;//[Offset: 0x2e0, Size: 0x50]
	float MAX_NAV_PATH_DISTANCE;//[Offset: 0x330, Size: 0x4]
	int PointToOtherNavPathLengthsCount;//[Offset: 0x334, Size: 0x4]

--------------------------------
Class: CoverSystem.BlueprintFunctionLibrary.Object
	<int,CoverPointRuntimeInfo> CoverPointRuntimeInfoMap;//[Offset: 0xc8, Size: 0x50]
	<Actor*,TakeCoverPointIDListInfo> ActorTakeCoverPointMap;//[Offset: 0x118, Size: 0x50]
	ChangeNotifyingRecastNavMesh* NavMesh;//[Offset: 0x1b8, Size: 0x8]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 0x1]
	CoverSystemActor* CoverPointGenerator;//[Offset: 0x1c8, Size: 0x8]
	TacticSystemActor* TacticPointGenerator;//[Offset: 0x1d0, Size: 0x8]
	void RemoveStaleCoverPoints(Vector Origin, Vector Extent);// 0x58b7e3fee041
	void RemoveCoverPointsOfObject(const Actor* CoverObject);// 0x58b6e3fee041
	void RemoveAll();// 0x58b5e3fee041
	void OnNavMeshTilesUpdated(out const <uint32> UpdatedTiles);// 0x58b4e3fee041
	void OnBeginPlay();// 0x58b3e3fee041
	void NotifyCoverActorDied(Actor* InCheckActor);// 0x58b2e3fee041

--------------------------------
Class: CoverPointRuntimeInfo
	Actor* TakenActor;//[Offset: 0x0, Size: 0x8]
	float TakenBeginTime;//[Offset: 0x8, Size: 0x4]
	float NextAvailableTime;//[Offset: 0xc, Size: 0x4]
	float LastSpottedTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TakeCoverPointIDListInfo
	int[] List;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ChangeNotifyingRecastNavMesh.RecastNavMesh.NavigationData.Actor.Object
	delegate NavmeshTilesUpdatedImmediateDelegate;//[Offset: 0x670, Size: 0x10]
	delegate NavmeshTilesUpdatedBufferedDelegate;//[Offset: 0x680, Size: 0x10]
	delegate NavmeshTilesUpdatedUntilFinishedDelegate;//[Offset: 0x690, Size: 0x10]
	void ProcessQueuedTiles();// 0x58b1e3fee041
	void OnNavmeshGenerationFinishedHandler(NavigationData* NavData);// 0x58b0e3fee041

--------------------------------
Class: RecastNavMesh.NavigationData.Actor.Object
	bool bDrawTriangleEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e4, Size: 0x1]
	bool bDrawPolyEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e4, Size: 0x1]
	bool bDrawFilledPolys;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4e4, Size: 0x1]
	bool bDrawNavMeshEdges;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4e4, Size: 0x1]
	bool bDrawTileBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4e4, Size: 0x1]
	bool bDrawPathCollidingGeometry;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4e4, Size: 0x1]
	bool bDrawTileLabels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4e4, Size: 0x1]
	bool bDrawPolygonLabels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4e4, Size: 0x1]
	bool bDrawDefaultPolygonCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e5, Size: 0x1]
	bool bDrawLabelsOnPathNodes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e5, Size: 0x1]
	bool bDrawNavLinks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4e5, Size: 0x1]
	bool bDrawFailedNavLinks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4e5, Size: 0x1]
	bool bDrawClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4e5, Size: 0x1]
	bool bDrawOctree;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4e5, Size: 0x1]
	bool bDrawOctreeDetails;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4e5, Size: 0x1]
	bool bDrawMarkedForbiddenPolys;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4e5, Size: 0x1]
	bool bDistinctlyDrawTilesBeingBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e6, Size: 0x1]
	float DrawOffset;//[Offset: 0x4e8, Size: 0x4]
	bool bFixedTilePoolSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4ec, Size: 0x1]
	int TilePoolSize;//[Offset: 0x4f0, Size: 0x4]
	float TileSizeUU;//[Offset: 0x4f4, Size: 0x4]
	float CellSize;//[Offset: 0x4f8, Size: 0x4]
	float CellHeight;//[Offset: 0x4fc, Size: 0x4]
	float AgentRadius;//[Offset: 0x500, Size: 0x4]
	float AgentHeight;//[Offset: 0x504, Size: 0x4]
	float AgentMaxSlope;//[Offset: 0x508, Size: 0x4]
	float AgentMaxStepHeight;//[Offset: 0x50c, Size: 0x4]
	float MinRegionArea;//[Offset: 0x510, Size: 0x4]
	float MergeRegionSize;//[Offset: 0x514, Size: 0x4]
	float MaxSimplificationError;//[Offset: 0x518, Size: 0x4]
	int MaxSimultaneousTileGenerationJobsCount;//[Offset: 0x51c, Size: 0x4]
	int TileNumberHardLimit;//[Offset: 0x520, Size: 0x4]
	int PolyRefTileBits;//[Offset: 0x524, Size: 0x4]
	int PolyRefNavPolyBits;//[Offset: 0x528, Size: 0x4]
	int PolyRefSaltBits;//[Offset: 0x52c, Size: 0x4]
	Vector NavMeshOriginOffset;//[Offset: 0x530, Size: 0xc]
	float DefaultDrawDistance;//[Offset: 0x53c, Size: 0x4]
	float DefaultMaxSearchNodes;//[Offset: 0x540, Size: 0x4]
	float DefaultMaxHierarchicalSearchNodes;//[Offset: 0x544, Size: 0x4]
	byte RegionPartitioning;//[Offset: 0x548, Size: 0x1]
	byte LayerPartitioning;//[Offset: 0x549, Size: 0x1]
	int RegionChunkSplits;//[Offset: 0x54c, Size: 0x4]
	int LayerChunkSplits;//[Offset: 0x550, Size: 0x4]
	bool bSortNavigationAreasByCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x554, Size: 0x1]
	bool bPerformVoxelFiltering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x554, Size: 0x1]
	bool bMarkLowHeightAreas;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x554, Size: 0x1]
	bool bUseExtraTopCellWhenMarkingAreas;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x554, Size: 0x1]
	bool bFilterLowSpanSequences;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x554, Size: 0x1]
	bool bFilterLowSpanFromTileCache;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x554, Size: 0x1]
	bool bDoFullyAsyncNavDataGathering;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x554, Size: 0x1]
	bool bUseBetterOffsetsFromCorners;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x554, Size: 0x1]
	bool bStoreEmptyTileLayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x555, Size: 0x1]
	bool bUseVirtualFilters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x555, Size: 0x1]
	bool bAllowNavLinkAsPathEnd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x555, Size: 0x1]
	bool bUseVoxelCache;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x555, Size: 0x1]
	float TileSetUpdateInterval;//[Offset: 0x558, Size: 0x4]
	float HeuristicScale;//[Offset: 0x55c, Size: 0x4]
	float VerticalDeviationFromGroundCompensation;//[Offset: 0x560, Size: 0x4]
	bool K2_ReplaceAreaInTileBounds(Box Bounds, class NavArea OldArea, class NavArea NewArea, bool ReplaceLinks);// 0x563ce3fee041

--------------------------------
Class: TacticSystemActor.ActionPointSystemActor.Actor.Object
	CoverSystem* CoverSystem;//[Offset: 0x338, Size: 0x8]
	TacticPointData[] TacticPoints;//[Offset: 0x340, Size: 0x10]
	TacticPointData[] DoorTacticPoints;//[Offset: 0x350, Size: 0x10]
	TacticPointData[] WindowTacticPoints;//[Offset: 0x360, Size: 0x10]
	TacticPointData[] EscapeTacticPoints;//[Offset: 0x370, Size: 0x10]
	TacticPointTypeColor TacticPointTypeColor;//[Offset: 0x380, Size: 0xd0]
	enum[] GenerateOrientSafetyTypes;//[Offset: 0x450, Size: 0x10]
	KeyRoutePointData[] KeyRoutePoints;//[Offset: 0x460, Size: 0x10]
	<int,float> KeyRoutePointsChians;//[Offset: 0x470, Size: 0x50]
	int NumOfOrientPointSafe;//[Offset: 0x4c0, Size: 0x4]
	int LengthOfOrientPointSafe;//[Offset: 0x4c4, Size: 0x4]

--------------------------------
Class: TacticPointData.ActionPointData
	enum TacticPointType;//[Offset: 0x10, Size: 0x1]
	int PointID;//[Offset: 0x14, Size: 0x4]
	float Interval;//[Offset: 0x18, Size: 0x4]
	bool AlwaysActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool ShouldCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	TacticPointGuardTargetAndDirection[] GuardTargetAndDirections;//[Offset: 0x20, Size: 0x10]
	bool FieldTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float Radius;//[Offset: 0x34, Size: 0x4]
	bool bCustomized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	uint32 ActorID;//[Offset: 0x3c, Size: 0x4]
	int8 IndRelatedToActor;//[Offset: 0x40, Size: 0x1]
	float CustomValue;//[Offset: 0x44, Size: 0x4]
	Vector CustomVector;//[Offset: 0x48, Size: 0xc]
	Rotator Rotation;//[Offset: 0x54, Size: 0xc]
	ActionPointRadianSafe[] OrientSafetys;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: ActionPointData
	int UniqueIndex;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: TacticPointGuardTargetAndDirection
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Direction;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: ActionPointRadianSafe
	float Radian;//[Offset: 0x0, Size: 0x4]
	float CoverDistance;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TacticPointTypeColor
	LinearColor None_Color;//[Offset: 0x0, Size: 0x10]
	LinearColor FlashBag_Color;//[Offset: 0x10, Size: 0x10]
	LinearColor Smoke_Color;//[Offset: 0x20, Size: 0x10]
	LinearColor HighValue_Color;//[Offset: 0x30, Size: 0x10]
	LinearColor FatalGate_Color;//[Offset: 0x40, Size: 0x10]
	LinearColor Escape_Color;//[Offset: 0x50, Size: 0x10]
	LinearColor Trap_Color;//[Offset: 0x60, Size: 0x10]
	LinearColor OverWatch_Color;//[Offset: 0x70, Size: 0x10]
	LinearColor Prone_Color;//[Offset: 0x80, Size: 0x10]
	LinearColor Window_Color;//[Offset: 0x90, Size: 0x10]
	LinearColor Door_Color;//[Offset: 0xa0, Size: 0x10]
	LinearColor Retreat_Color;//[Offset: 0xb0, Size: 0x10]
	LinearColor Transfer_Color;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: KeyRoutePointData.ActionPointData
	int PointID;//[Offset: 0x10, Size: 0x4]
	float Radius;//[Offset: 0x14, Size: 0x4]
	float MaxNavPathForMultipleOfRadius;//[Offset: 0x18, Size: 0x4]
	KeyRoutePointLink[] LinkPoints;//[Offset: 0x20, Size: 0x10]
	ActionPointRadianSafe[] OrientSafetys;//[Offset: 0x30, Size: 0x10]
	float DangerValue;//[Offset: 0x40, Size: 0x4]
	float CalculateDangerTime;//[Offset: 0x44, Size: 0x4]
	int64 PolyRef;//[Offset: 0x48, Size: 0x8]
	int64[] NeighborPolyRefs;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: KeyRoutePointLink
	int Index;//[Offset: 0x0, Size: 0x4]
	float NavPathLength;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DTOCoverData.ActionPointData
	uint64 NavPolyRef;//[Offset: 0x10, Size: 0x8]
	int EdgeIndex;//[Offset: 0x18, Size: 0x4]
	bool bCustomized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bMarked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bAddable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bLMovable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bRMovable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	float BaseWeight;//[Offset: 0x20, Size: 0x4]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	Vector RightDir;//[Offset: 0x30, Size: 0xc]
	CoverPoseData[] PoseData;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: NavMeshCoverPointPoseSamplingConfig
	enum PoseType;//[Offset: 0x0, Size: 0x1]
	float DefenceHeight;//[Offset: 0x4, Size: 0x4]
	float DefenceRatio;//[Offset: 0x8, Size: 0x4]
	float FireHeight;//[Offset: 0xc, Size: 0x4]
	float RequiredMinimumDefenceAngle;//[Offset: 0x10, Size: 0x4]
	float LimitedMaximumDefenceAngle;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: AISGDoorManager.Object
	AISGDoorUsed[] AISGDoorUsedList;//[Offset: 0x28, Size: 0x10]
	Actor*[] DoorsInWorld;//[Offset: 0x38, Size: 0x10]
	float TimeFindDoorsInWorld;//[Offset: 0x48, Size: 0x4]
	void WantToWaitUsed(Character* AIPawn, Actor* SGDoor);// 0x533de3fee041
	bool WantToUsedDoor(Character* AIPawn, Actor* SGDoor);// 0x533ce3fee041
	void ReleaseUsedDoor(Character* AIPawn);// 0x533be3fee041
	void InitDoorsInWorld(Object* WorldContext);// 0x533ae3fee041
	Actor* GetPawnUsedDoor(Actor* SGDoor);// 0x5339e3fee041
	Actor* GetDoor(Object* WorldContext, out const Vector DoorPoint);// 0x5338e3fee041
	bool DoorIsBusy(Actor* SGDoor, Character* AIPawn);// 0x5337e3fee041
	void AutoRemoveInValidUsed();// 0x5336e3fee041

--------------------------------
Class: AISGDoorUsed
	Actor* SGDoor;//[Offset: 0x0, Size: 0x8]
	Character* AIPawn;//[Offset: 0x8, Size: 0x8]
	float UsedTime;//[Offset: 0x10, Size: 0x4]
	byte WaitPersons;//[Offset: 0x14, Size: 0x1]

--------------------------------
Class: NPCAIAsyncTaskSystem.WorldSubsystem.Subsystem.Object
	NPCAIAsyncTask[] AsyncTasks;//[Offset: 0x30, Size: 0x10]
	void OnDSTick();// 0x536be3fee041
	bool HasTask(Actor* AIPawn, out const enum InType);// 0x536ae3fee041
	NPCAIAsyncTaskBase* GetTask(Actor* AIPawn, out const enum InType);// 0x5369e3fee041

--------------------------------
Class: NPCAIAsyncTask
	Actor* AIPawn;//[Offset: 0x0, Size: 0x8]
	enum Type;//[Offset: 0x8, Size: 0x1]
	NPCAIAsyncTaskBase* AsyncTask;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: NPCAIAsyncTaskBase.BlueprintAsyncActionBase.Object
	bool bSimpleTodo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	Actor* AIPawn;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SGAIRandomEquipManager.Object
	<int,SGAIRandomEquipPool*> EquipPools;//[Offset: 0x28, Size: 0x50]
	void MakeReadyFlag();// 0x385ee3fee041
	SGAIRandomEquipPool* GetPool(int PoolID);// 0x385de3fee041

--------------------------------
Class: SGAIRandomEquipPool.Object
	SGAIEquipInfo*[] Equips;//[Offset: 0x38, Size: 0x10]
	int GetStillNeededCount();// 0x385ce3fee041
	SGAIEquipInfo* GetRandomEquip();// 0x385be3fee041
	bool AddEquip(SGAIEquipInfo* InEquip);// 0x385ae3fee041

--------------------------------
Class: SGAIEquipInfo.Object
	SGPlayerItemInfoBase*[] Items;//[Offset: 0x28, Size: 0x10]
	FString RandomNpcName;//[Offset: 0x38, Size: 0x10]
	enum NpcSex;//[Offset: 0x48, Size: 0x1]
	uint64[] AvatarItemIds;//[Offset: 0x50, Size: 0x10]
	SGPlayerItemInfoBase*[] DropItems;//[Offset: 0x68, Size: 0x10]
	SGAIEquipInfo* NewInstance();// 0x3859e3fee041

--------------------------------
Class: AIPortraitBase.Object

--------------------------------
Class: AIIDSegInfo
	AIIDSegInfoData MainCategory;//[Offset: 0x0, Size: 0x10]
	AIIDSegInfoData Career;//[Offset: 0x10, Size: 0x10]
	AIIDSegInfoData Tendency;//[Offset: 0x20, Size: 0x10]
	AIIDSegInfoData Difficulty;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AIIDSegInfoData
	int64 Div;//[Offset: 0x0, Size: 0x8]
	int64 Mod;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AIWeaponDefaultBulletClassInfo
	class Actor* DefaultBulletClassPtr;//[Offset: 0x0, Size: 0x28]
	class Actor* DefaultBulletClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SGAIDebugInfoComponent.ActorComponent.Object
	SGAICharacter* AICharacter;//[Offset: 0xc0, Size: 0x8]
	SGAIDebugInfoDisplayedTextColor[] DisplayedTextColors;//[Offset: 0xc8, Size: 0x10]
	bool bAllBlackboardKeysConcerned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	FString[] ConcernedBlackboardKeys;//[Offset: 0xe0, Size: 0x10]
	int TreeActiveInstanceIndex;//[Offset: 0xf0, Size: 0x4]
	int TaskExecutionIndex;//[Offset: 0xf4, Size: 0x4]
	float LastBlackboardChangeTime;//[Offset: 0xf8, Size: 0x4]
	float LastDistanceChangeTime;//[Offset: 0xfc, Size: 0x4]
	float LastTickTime;//[Offset: 0x100, Size: 0x4]
	float DistanceToPlayerSq;//[Offset: 0x104, Size: 0x4]
	float ProjectToPlayerView;//[Offset: 0x108, Size: 0x4]
	bool bDisplayable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1]
	FString AIName;//[Offset: 0x120, Size: 0x10]
	int64 AIID;//[Offset: 0x130, Size: 0x8]
	int64 PathGroupID;//[Offset: 0x138, Size: 0x8]
	int64 EquipPoolID;//[Offset: 0x140, Size: 0x8]
	float HpTotal;//[Offset: 0x148, Size: 0x4]
	float HpHead;//[Offset: 0x14c, Size: 0x4]
	float HpChest;//[Offset: 0x150, Size: 0x4]
	float HpStomach;//[Offset: 0x154, Size: 0x4]
	float HpLeftArm;//[Offset: 0x158, Size: 0x4]
	float HpRightArm;//[Offset: 0x15c, Size: 0x4]
	float HpLeftLeg;//[Offset: 0x160, Size: 0x4]
	float HpRightLeg;//[Offset: 0x164, Size: 0x4]
	float ElapsedAimingTime;//[Offset: 0x168, Size: 0x4]
	float RequiredAimingTime;//[Offset: 0x16c, Size: 0x4]
	int AimStatus;//[Offset: 0x170, Size: 0x4]
	Color TextColor;//[Offset: 0x174, Size: 0x4]
	FString BehaviorTreeName;//[Offset: 0x178, Size: 0x10]
	FString BlackboardName;//[Offset: 0x188, Size: 0x10]
	FString PreviousTaskNames;//[Offset: 0x198, Size: 0x10]
	FString ActiveTaskNames;//[Offset: 0x1a8, Size: 0x10]
	Rotator Rotator;//[Offset: 0x1b8, Size: 0xc]
	FName[] BlackboardKeys;//[Offset: 0x1c8, Size: 0x10]
	FString[] BlackboardValues;//[Offset: 0x1d8, Size: 0x10]
	FString ShootPartName;//[Offset: 0x1e8, Size: 0x10]
	float HitRatePredestined;//[Offset: 0x1f8, Size: 0x4]
	float HitRateNormal;//[Offset: 0x1fc, Size: 0x4]
	float FirstTimeSeenScore;//[Offset: 0x200, Size: 0x4]
	float FirstTimeSeenTotalUse;//[Offset: 0x204, Size: 0x4]
	int DelayFrames;//[Offset: 0x208, Size: 0x4]
	FString SpawnPointCheckResult;//[Offset: 0x210, Size: 0x10]
	bool bIsCasual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x222, Size: 0x1]
	BehaviorTreeComponent* CachedBehaviorTreeComponent;//[Offset: 0x228, Size: 0x8]
	FString SpawnPointName;//[Offset: 0x248, Size: 0x10]
	FString SpawnVolumeName;//[Offset: 0x258, Size: 0x10]
	int SpawnSquad;//[Offset: 0x268, Size: 0x4]
	void OnRep_InfoChange();// 0x3791e3fee041
	void OnRep_Health();// 0x3790e3fee041
	void OnRep_BlackboardValues();// 0x378fe3fee041
	void OnRep_ActiveTaskNames();// 0x378ee3fee041
	void OnAIPawnTouch();// 0x378de3fee041

--------------------------------
Class: SGAIDebugInfoDisplayedTextColor
	FString BTNameSuffix;//[Offset: 0x0, Size: 0x10]
	Color DisplayColor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SGAIDebugInfoDisplayComponent.ActorComponent.Object
	delegate AIDebugEvents_LockOnAI;//[Offset: 0xc0, Size: 0x10]
	bool bToggleAIDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bToggleAIDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	FString[] ConcernedBlackboardKeys;//[Offset: 0xd8, Size: 0x10]
	SpawnedAIInfoForDebug[] DebugAIInfoList;//[Offset: 0xe8, Size: 0x10]
	SGAICharacter*[] AICharacterList;//[Offset: 0xf8, Size: 0x10]
	AIDebugInfoDetail[] AIDebugInfoDetailList;//[Offset: 0x108, Size: 0x10]
	SGAISpawnManagerComponent* SpawnManager;//[Offset: 0x120, Size: 0x8]
	SGAIDebugInfoTextColor[] DisplayedTextColors;//[Offset: 0x128, Size: 0x10]
	bool bIsAIDirectorEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x139, Size: 0x1]
	bool bToggleAIDirectorDebugInfo;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x139, Size: 0x1]
	int MaxDisplayedInfoCount;//[Offset: 0x144, Size: 0x4]
	TimerHandle UpdateDistanceHandle;//[Offset: 0x148, Size: 0x8]
	void WatchAICharactersByIndexs(const int[] Indexs);// 0x37afe3fee041
	void WatchAICharacters(const SGAICharacter*[] AICharacters);// 0x37aee3fee041
	void ToggleAIDirectorDebugInfo();// 0x37ade3fee041
	void ToggleAIDebugInfo();// 0x37ace3fee041
	void ToggleAIDebugDraw();// 0x37abe3fee041
	void SetMaxDisplayedCount(int Count);// 0x37aae3fee041
	void SetIsAIDirectorDebugInfoEnabled(bool bEnable);// 0x37a9e3fee041
	void RefreshBigMapWidget();// 0x37a8e3fee041
	void RefrashAllAISimpleInfoForLua();// 0x37a7e3fee041
	void RefrashAllAISimpleInfo();// 0x37a6e3fee041
	void OnRep_DebugAIInfoList();// 0x37a5e3fee041
	void OnRep_AIDebugInfoDetailList();// 0x37a4e3fee041
	void OnClient_PrintDebugString(FString Msg, int Type, float Duration);// 0x37a3e3fee041
	void OnClient_DrawDebugSphere(const Vector position, int Type, float Duration);// 0x37a2e3fee041
	void OnClient_DrawDebugLine(const Vector Start, const Vector End, int Type, float Duration);// 0x37a1e3fee041
	void OnAIPawnTouch(byte FingerIndex, Actor* TouchedActor);// 0x37a0e3fee041
	bool IsWatchingAI(const SGAICharacter* AI);// 0x379fe3fee041
	bool IsEnabled();// 0x379ee3fee041
	bool IsAIDirectorEnabled();// 0x379de3fee041
	bool IsAIDirectorDebugInfoToggled();// 0x379ce3fee041
	bool IsAIDebugInfoToggled();// 0x379be3fee041
	bool IsAIDebugDrawToggled();// 0x379ae3fee041
	SGAICharacter* GetAILockedOn();// 0x3799e3fee041
	FString GenerateBlackboardDisplayString(out const AIDebugInfoDetail AIDebugInfo);// 0x3798e3fee041
	FString GenerateBehaviorTreeString(out const AIDebugInfoDetail AIDebugInfo);// 0x3797e3fee041
	FString GenerateBaseAIString(out const AIDebugInfoDetail AIDebugInfo);// 0x3796e3fee041
	FString GenerateAIBattleInfoString(out const AIDebugInfoDetail AIDebugInfo);// 0x3795e3fee041
	void BP_OnClient_PrintDebugString(FString Msg, int Type, float Duration);// 0x3794e3fee041
	void BP_OnClient_DrawDebugSphere(out const Vector position, int Type, float Duration);// 0x3793e3fee041
	void BP_OnClient_DrawDebugLine(out const Vector Start, out const Vector End, int Type, float Duration);// 0x3792e3fee041

--------------------------------
Class: SpawnedAIInfoForDebug
	Character* Character;//[Offset: 0x0, Size: 0x8]
	float SpawnTime;//[Offset: 0x8, Size: 0x4]
	float DeadTime;//[Offset: 0xc, Size: 0x4]
	Vector position;//[Offset: 0x10, Size: 0xc]
	enum AIType;//[Offset: 0x1c, Size: 0x1]
	bool IsAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	int DeadReason;//[Offset: 0x20, Size: 0x4]
	int SquadID;//[Offset: 0x24, Size: 0x4]
	int CurrentAllyNum;//[Offset: 0x28, Size: 0x4]
	int MaxAllyNum;//[Offset: 0x2c, Size: 0x4]
	int EquipmentID;//[Offset: 0x30, Size: 0x4]
	int Difficulty;//[Offset: 0x34, Size: 0x4]
	FString AreaID;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: AIDebugInfoDetail
	SGAICharacter* AICharacterPtr;//[Offset: 0x0, Size: 0x8]
	bool bAllBlackboardKeysConcerned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	int TreeActiveInstanceIndex;//[Offset: 0xc, Size: 0x4]
	int TaskExecutionIndex;//[Offset: 0x10, Size: 0x4]
	float LastBlackboardChangeTime;//[Offset: 0x14, Size: 0x4]
	float LastDistanceChangeTime;//[Offset: 0x18, Size: 0x4]
	float LastTickTime;//[Offset: 0x1c, Size: 0x4]
	float DistanceToPlayerSq;//[Offset: 0x20, Size: 0x4]
	float ProjectToPlayerView;//[Offset: 0x24, Size: 0x4]
	bool bDisplayable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	FString ClientAIName;//[Offset: 0x30, Size: 0x10]
	FString AIName;//[Offset: 0x40, Size: 0x10]
	int64 AIID;//[Offset: 0x50, Size: 0x8]
	int64 PathGroupID;//[Offset: 0x58, Size: 0x8]
	int64 EquipPoolID;//[Offset: 0x60, Size: 0x8]
	int64 CampID;//[Offset: 0x68, Size: 0x8]
	float HpTotal;//[Offset: 0x70, Size: 0x4]
	float HpHead;//[Offset: 0x74, Size: 0x4]
	float HpChest;//[Offset: 0x78, Size: 0x4]
	float HpStomach;//[Offset: 0x7c, Size: 0x4]
	float HpLeftArm;//[Offset: 0x80, Size: 0x4]
	float HpRightArm;//[Offset: 0x84, Size: 0x4]
	float HpLeftLeg;//[Offset: 0x88, Size: 0x4]
	float HpRightLeg;//[Offset: 0x8c, Size: 0x4]
	float ElapsedAimingTime;//[Offset: 0x90, Size: 0x4]
	float RequiredAimingTime;//[Offset: 0x94, Size: 0x4]
	int AimStatus;//[Offset: 0x98, Size: 0x4]
	Color TextColor;//[Offset: 0x9c, Size: 0x4]
	FString BehaviorTreeName;//[Offset: 0xa0, Size: 0x10]
	FString BlackboardName;//[Offset: 0xb0, Size: 0x10]
	FString PreviousTaskNames;//[Offset: 0xc0, Size: 0x10]
	FString ActiveTaskNames;//[Offset: 0xd0, Size: 0x10]
	Rotator Rotator;//[Offset: 0xe0, Size: 0xc]
	FName[] BlackboardKeys;//[Offset: 0xf0, Size: 0x10]
	FString[] BlackboardValues;//[Offset: 0x100, Size: 0x10]
	FString ShootPartName;//[Offset: 0x110, Size: 0x10]
	float HitRatePredestined;//[Offset: 0x120, Size: 0x4]
	float HitRateNormal;//[Offset: 0x124, Size: 0x4]
	int PersistNotHitCount;//[Offset: 0x128, Size: 0x4]
	int MaxNotHitCount;//[Offset: 0x12c, Size: 0x4]
	bool bInHitInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int HitIntervalCount;//[Offset: 0x134, Size: 0x4]
	float FirstTimeSeenScore;//[Offset: 0x138, Size: 0x4]
	float FirstTimeSeenTotalUse;//[Offset: 0x13c, Size: 0x4]
	bool bInBombRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	int DelayFrames;//[Offset: 0x144, Size: 0x4]
	FString SpawnPointCheckResult;//[Offset: 0x148, Size: 0x10]
	bool bIsCasual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	BehaviorTreeComponent* CachedBehaviorTreeComponent;//[Offset: 0x160, Size: 0x8]
	FString SpawnPointName;//[Offset: 0x168, Size: 0x10]
	FString SpawnVolumeName;//[Offset: 0x178, Size: 0x10]
	int SpawnSquad;//[Offset: 0x188, Size: 0x4]

--------------------------------
Class: SGAISpawnManagerComponent.ActorComponent.Object
	SpawnPointInfo*[] SpawnPointsCandidates;//[Offset: 0xc0, Size: 0x10]
	float SpawnCD;//[Offset: 0xd0, Size: 0x4]
	SGAICharacter*[] SleepingAICharacters;//[Offset: 0xd8, Size: 0x10]
	bool bPlayerPMCSpawnFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool SpawnAtUnderGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1]
	int SpawnAtUnderGroundOffset;//[Offset: 0x110, Size: 0x4]
	bool bSkipSpawnPointValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	float PlayerAroundRadius;//[Offset: 0x118, Size: 0x4]
	float PlayerLineOfSightDistance;//[Offset: 0x11c, Size: 0x4]
	float PlayerViewAngle;//[Offset: 0x120, Size: 0x4]
	float MaxHeightDiff;//[Offset: 0x124, Size: 0x4]
	int ReadyDelayFrame;//[Offset: 0x128, Size: 0x4]
	double PriorityExpiredSeconds;//[Offset: 0x130, Size: 0x8]
	float SpawnPointCheckRadius;//[Offset: 0x138, Size: 0x4]
	PendingSpawnInfo[] PendingSpawnPoints;//[Offset: 0x148, Size: 0x10]
	PendingSpawnInfo[] PendingAICharacters;//[Offset: 0x158, Size: 0x10]
	PendingSpawnInfo[] ReadyAICharacters;//[Offset: 0x168, Size: 0x10]
	SpawnedAIInfo[] SpawnedAIInfos;//[Offset: 0x178, Size: 0x10]
	int MaxAINum;//[Offset: 0x190, Size: 0x4]
	<Actor*,SpawnPointInfo*> SpawnPointInfos;//[Offset: 0x198, Size: 0x50]
	SpawnPointInfo*[] AllSpawnPointInfos;//[Offset: 0x1e8, Size: 0x10]
	SGAISpawnController* AISpawnController;//[Offset: 0x1f8, Size: 0x8]
	<enum> HighPriorityReason;//[Offset: 0x200, Size: 0x50]
	void StartAICharacter(SGAIController* SpawnedAI);// 0x3880e3fee041
	void SpawnAICharacterByVector(out const Vector SpawnPosition, int GroupID, int EquipPoolID, int CampID, int SquadID, float InputPlayerAroundRadius, float InputPlayerLineOfSightDistance, float InputPlayerViewAngle);// 0x387fe3fee041
	void SpawnAICharacter(SGAISpawnPoint* SpawnPoint, out const FName GroupID, int EquipPoolID);// 0x387ee3fee041
	void SetPendingRemoveCharacter(SGAICharacter* AICharacter);// 0x387de3fee041
	void OnWeaponReady(SGCharacter* OwnerCharacter);// 0x387ce3fee041
	void OnLoadCompleted_SoundData(SoftObjectPath Path, int PendingID);// 0x387be3fee041
	void OnLoadCompleted_RoleClass(SoftObjectPath Path, int PendingID);// 0x387ae3fee041
	void OnLoadCompleted_FactionClass(SoftObjectPath Path, int PendingID);// 0x3879e3fee041
	void OnLoadCompleted_EventAvatarClass(SoftObjectPath Path, int PendingID);// 0x3878e3fee041
	void OnLoadCompleted_DeathBoxClass(SoftObjectPath Path, int PendingID);// 0x3877e3fee041
	void OnLoadCompleted_AvatarClass(SoftObjectPath Path, int PendingID);// 0x3876e3fee041
	void OnLoadCompleted_ArchetypeTemplate(SoftObjectPath Path, int PendingID);// 0x3875e3fee041
	void OnLoadCompleted_AIControllerClass(SoftObjectPath Path, int PendingID);// 0x3874e3fee041
	void OnLoadCompleted_AICharacterClass(SoftObjectPath Path, int PendingID);// 0x3873e3fee041
	void OnLimitChanged(SGAISpawnStuff* VolumeComponent);// 0x3872e3fee041
	void OnGameFlowStateChanged(FName NewState, FName OldState);// 0x3871e3fee041
	void OnAllPMCFinishSpawning();// 0x3870e3fee041
	bool IsSpawnAtUnderGround();// 0x386fe3fee041
	int GetPMCAINum();// 0x386ee3fee041
	SGAICharacter*[] GetAIByAreaID(FString AreaID);// 0x386de3fee041
	SGAICharacter* GetAIByAIID(int64 AIID);// 0x386ce3fee041
	SGAICharacter*[] GetAIArrByAIID(int64 AIID);// 0x386be3fee041
	void EnableNearbySpawnPointsOnly(bool Enable);// 0x386ae3fee041
	void AdjustAIMaxHealthAndEndurance(Character* Character, out const SpawnRecord SpawnRecord);// 0x3869e3fee041

--------------------------------
Class: SGAISpawnPoint.NavigationObjectBase.Actor.Object
	bool bUseRandomEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x301, Size: 0x1]
	class NPCAIFactionComponent* FactionClass;//[Offset: 0x308, Size: 0x8]
	class NPCAIRoleComponent* RoleClass;//[Offset: 0x310, Size: 0x8]
	int SpawnPointID;//[Offset: 0x318, Size: 0x4]
	class Character* AICharacterClass;//[Offset: 0x320, Size: 0x8]
	class AIController* AIControllerClass;//[Offset: 0x328, Size: 0x8]
	BehaviorTree* ArchetypeTemplate;//[Offset: 0x330, Size: 0x8]
	FName LastUsedSpawnGroupID;//[Offset: 0x33c, Size: 0x8]
	int CampID;//[Offset: 0x344, Size: 0x4]
	SGAIPathNode*[] ExtraInitPathNodes;//[Offset: 0x348, Size: 0x10]
	bool bRespawnAIWhenDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	int LastUsedEquipPoolID;//[Offset: 0x35c, Size: 0x4]
	SGNPCSpawnGroupWeight[] SpawnGroupWeights;//[Offset: 0x360, Size: 0x10]
	float AIPatrolRadius;//[Offset: 0x370, Size: 0x4]
	float AICautionRadius;//[Offset: 0x374, Size: 0x4]
	float AICrossFireRadius;//[Offset: 0x378, Size: 0x4]
	NPCAIProfile* NPCProfile;//[Offset: 0x380, Size: 0x8]
	SGAIPathNode* InitPathNode;//[Offset: 0x388, Size: 0x8]
	bool bShouldSpawnAtBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	float SpawnDelayTime;//[Offset: 0x394, Size: 0x4]
	bool bCanSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	float CheckAITimeSeconds;//[Offset: 0x39c, Size: 0x4]
	float NextAvailableTime;//[Offset: 0x3a0, Size: 0x4]
	SGAICharacter* WatchingAICharacter;//[Offset: 0x3a4, Size: 0x8]
	void UpdateSpawnGroupProbabilities();// 0x388be3fee041
	void SpawnAICharacterImmediately();// 0x388ae3fee041
	void SpawnAICharacterByGroupID(out const FName GroupID, int EquipPoolID);// 0x3889e3fee041
	void SpawnAICharacter(int EquipPoolID, FName GroupID);// 0x3888e3fee041
	void SetWatchingAICharacter(SGAICharacter* Character);// 0x3887e3fee041
	void SetCanSpawnAI(bool bEnable);// 0x3886e3fee041
	void RespawnAICharacter();// 0x3885e3fee041
	void OnMatchStateChanged(FName NewState);// 0x3884e3fee041
	bool IsForPMCAI();// 0x3883e3fee041
	SGNPCSpawnGroupWeight[] GetSpawnGroupWeights();// 0x3882e3fee041
	void CheckIfRespawnAI(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x3881e3fee041

--------------------------------
Class: SGNPCSpawnGroupWeight
	FName GroupID;//[Offset: 0x0, Size: 0x8]
	float SpawnWeight;//[Offset: 0x8, Size: 0x4]
	float Probability;//[Offset: 0xc, Size: 0x4]
	int TakenCount;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: NPCAIRoleComponent.NPCAIActorComponent.ActorComponent.Object
	NPCAIModifierProfile*[] PropertyProfiles;//[Offset: 0xc8, Size: 0x10]

--------------------------------
Class: NPCAIModifierProfile.NPCAIPropertyProfileBase.Object

--------------------------------
Class: SGAIPathNode.Note.Actor.Object
	SGAIPathNode*[] NextPathNodeArray;//[Offset: 0x2e0, Size: 0x10]
	float WaitTimeAtThisNode;//[Offset: 0x2f0, Size: 0x4]

--------------------------------
Class: NPCAIProfile.Object
	class NPCAIActorComponent* FactionClass;//[Offset: 0x28, Size: 0x8]
	class NPCAIActorComponent* RoleClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: SGAISpawnStuff.Object
	delegate OnAIDiedDelegate;//[Offset: 0x28, Size: 0x10]
	delegate OnRemoveRedundantAIDelegate;//[Offset: 0x38, Size: 0x10]
	SGAIBotZoneVolume*[] ZoneVolumeList;//[Offset: 0x60, Size: 0x10]
	Actor*[] SpawnPointsCandidates;//[Offset: 0x70, Size: 0x10]
	Actor* SpawnController;//[Offset: 0x80, Size: 0x8]
	class Object* GroupClass;//[Offset: 0x88, Size: 0x8]
	int GroupType;//[Offset: 0x94, Size: 0x4]
	NPCAIZoneGroupInfo* GroupInfo;//[Offset: 0x98, Size: 0x8]
	int CurrentWave;//[Offset: 0xa4, Size: 0x4]
	Character* TeamLeader;//[Offset: 0xa8, Size: 0x8]
	Character*[] TeamMembers;//[Offset: 0xb0, Size: 0x10]
	Actor*[] GoalEnemys;//[Offset: 0xc0, Size: 0x10]
	delegate AddEnemyEvent;//[Offset: 0xd0, Size: 0x10]
	delegate RemoveEnemyEvent;//[Offset: 0xe0, Size: 0x10]
	SGAICharacter*[] SquadMembers;//[Offset: 0xf0, Size: 0x10]
	void SetZoneGroup(NPCAIZoneGroupInfo* ZoneGroupIn);// 0x389ae3fee041
	void RegisterSpawnPoint(Actor* SpawnPoint);// 0x3899e3fee041
	void OnSpawnedAIDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x3898e3fee041
	void OnGoalEnemyChanged(Character* OwnerCharacter, Actor* LastEnemy, Actor* CurrentEnemy);// 0x3897e3fee041
	void OnAISpawned(Actor* SpawnPoint, Character* AICharacter);// 0x3896e3fee041
	NPCAIZoneGroupInfo* GetZoneGroup();// 0x3895e3fee041
	SGAICharacter*[] GetSquadMembers();// 0x3894e3fee041
	int GetSpawnSquadID();// 0x3893e3fee041
	int GetSpawnPointGroupID(Actor* SpawnPoint);// 0x3892e3fee041
	int GetCurrentAICount();// 0x3891e3fee041
	NPCAIZoneGroupInfo* CreateZoneGroupForPMCAI();// 0x3890e3fee041
	Actor*[] ChooseValidSpawnPoint(out const Actor*[] AllSpawnPoints, int ChooseNum, bool bIgnoreCheckIfNotEnoughNum);// 0x388fe3fee041
	void BP_OnSpawnedAIDied(Character* AICharacter);// 0x388ee3fee041
	void BP_OnAISpawned(Actor* SpawnPoint, Character* AICharacter);// 0x388de3fee041
	void BP_BeginInitialize();// 0x388ce3fee041

--------------------------------
Class: PendingSpawnInfo
	SpawnRecord SpawnRecord;//[Offset: 0x10, Size: 0x50]
	bool bIsPMCAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int DelayFrame;//[Offset: 0x6c, Size: 0x4]
	class Character* AICharacterClass;//[Offset: 0x78, Size: 0x8]
	class AIController* AIControllerClass;//[Offset: 0x80, Size: 0x8]
	BehaviorTree* ArchetypeTemplate;//[Offset: 0x88, Size: 0x8]
	class NPCAIFactionComponent* FactionClass;//[Offset: 0x90, Size: 0x8]
	class NPCAIRoleComponent* RoleClass;//[Offset: 0x98, Size: 0x8]
	class SGInventory[] AvatarInventories;//[Offset: 0xb8, Size: 0x10]
	class SGInventory[] EventAvatarInventories;//[Offset: 0xc8, Size: 0x10]
	DataTable* SoundData;//[Offset: 0xd8, Size: 0x8]
	class SGInventory* DeathBoxClass;//[Offset: 0xe0, Size: 0x8]

--------------------------------
Class: SpawnedAIInfo

--------------------------------
Class: SGAISpawnController.Actor.Object
	delegate OnLimitChangedDelegate;//[Offset: 0x2e0, Size: 0x10]
	<Actor*,SpawnPointInfo*> SpawnPointInfos;//[Offset: 0x2f0, Size: 0x50]
	float PlayerScavAIDelayTime;//[Offset: 0x354, Size: 0x4]
	<int,class NPCAIZoneGroupInfo> GroupInfoClassMap;//[Offset: 0x358, Size: 0x50]
	<int,SGAISpawnStuff*> SquadInfo;//[Offset: 0x3a8, Size: 0x50]
	bool bEnableTestData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	int MyMapID;//[Offset: 0x3fc, Size: 0x4]
	int MySpawnConfID;//[Offset: 0x400, Size: 0x4]
	float ScavAIDynamicLimitInterval;//[Offset: 0x410, Size: 0x4]
	float PMCDelayTime;//[Offset: 0x418, Size: 0x4]
	<int,int> EquipIDCounter;//[Offset: 0x430, Size: 0x50]
	enum AISpawnStep;//[Offset: 0x480, Size: 0x1]
	enum[] AISpawnProcess;//[Offset: 0x488, Size: 0x10]
	int CurrentSpawnSquadIndex;//[Offset: 0x498, Size: 0x4]
	int PMCSquadIDCounter;//[Offset: 0x49c, Size: 0x4]
	void TriggerSpawnByEvent(out const FString TriggerEvent, enum Triggertype);// 0x3868e3fee041
	void OnGameFlowStateChanged(FName NewState, FName OldState);// 0x3867e3fee041
	void NextStep();// 0x3866e3fee041
	SGAISpawnStuff* GetSpawnStuff(int SpawnGroupID);// 0x3865e3fee041
	int GetSpawnConfigID();// 0x3864e3fee041
	int GetScavLimitPerPMCPlayer();// 0x3863e3fee041
	int GetMapID();// 0x3862e3fee041
	int GetExpectedPMCPlayerNum();// 0x3861e3fee041
	void DivideGroupForNewSpawnedAI(Actor* InSpawnedAI);// 0x3860e3fee041
	void AISpawnAction();// 0x385fe3fee041

--------------------------------
Class: SGAIDebugInfoTextColor
	FString BTNameSuffix;//[Offset: 0x0, Size: 0x10]
	Color DisplayColor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SGAIDebugStatics.BlueprintFunctionLibrary.Object
	void AIDebug_PrintDebugString(const SGAICharacter* AICharacter, FString Msg, int Type, float Duration);// 0x37b2e3fee041
	void AIDebug_DrawDebugShpere(const SGAICharacter* AICharacter, out const Vector position, int Type, float Duration);// 0x37b1e3fee041
	void AIDebug_DrawDebugLine(const SGAICharacter* AICharacter, out const Vector Start, out const Vector End, int Type, float Duration);// 0x37b0e3fee041

--------------------------------
Class: SGAIDebugInfoHUDWidget.SGUserWidget.UserWidget.Widget.Visual.Object
	Actor* VPawn;//[Offset: 0x2c8, Size: 0x8]
	void StopPawnVLOG();// 0x383ee3fee041
	void StartPawnVLOG();// 0x383de3fee041
	void SetHudMessage(FString Msg, bool bVisible);// 0x383ce3fee041
	void InitVLogPawn(Actor* InPawn);// 0x383be3fee041

--------------------------------
Class: SGAIDirector.Actor.Object

--------------------------------
Class: SGAIIDManager.WorldSubsystem.Subsystem.Object
	<int64,AIIDMappedInfo> OriginalAIIDToMappedInfo;//[Offset: 0x30, Size: 0x50]
	bool ToActualID(out const FName AIID, int EquipPoolID, out FName ActualAIID, out int ActualEquipPoolID);// 0x3858e3fee041
	bool IsIDMappingReady();// 0x3857e3fee041
	AIIDMappedData GetMappedData(int64 AIID);// 0x3856e3fee041

--------------------------------
Class: AIIDMappedInfo

--------------------------------
Class: AIIDMappedData

--------------------------------
Class: SGAIStatics.BlueprintFunctionLibrary.Object
	void StopCustomAnimOnAllClient(Pawn* Character, FString MontageName);// 0x38cfe3fee041
	float SetupFesiableGrenadeThrowAngle(Actor* AIActor, out const Vector Location, float InitSpeed, bool bMustThrow, bool bHigherFirst, out float FlyingTime);// 0x38cee3fee041
	void SetRotationInterval(Actor* AIController, float RotationInterval);// 0x38cde3fee041
	bool SetLockAmmoCountAtPercentange(Actor* AIActor, float Percentage);// 0x38cce3fee041
	bool SetDisposableOffsetFromCornersDistance(Actor* AIActor, float OffsetDistance);// 0x38cbe3fee041
	void SetBehaviorTree(SGAIController* AIController, BehaviorTree* BTAsset);// 0x38cae3fee041
	void SetAIProfileClass(Character* AICharacter, class NPCAIProfile ProfileClass, bool bCallControllerSpawnFinsih);// 0x38c9e3fee041
	void SetAIName(SGAICharacter* AICharacter, FString AIName);// 0x38c8e3fee041
	void SetAICharacterIgnoreOtherPawn(Actor* AIPawn, bool bIgnorePawn);// 0x38c7e3fee041
	bool ResumeMove(AIController* AIController, AIRequestID InRequestID);// 0x38c6e3fee041
	void ReportSpawnedInventoryValue(const Object* WorldContextObject);// 0x38c5e3fee041
	void ReportAISpawnInfo(SGAICharacter* AICharacter);// 0x38c4e3fee041
	void PlayCustomAnimOnAllClient(Pawn* Character, FString MontageName, FName SectionName, bool bPlayFacialAnimation, out float SectionLength);// 0x38c3e3fee041
	void PlayAnimOnAllClient(Pawn* InPawn, AnimMontage* MontageToPlay, FName SectionName, out float SectionLength);// 0x38c2e3fee041
	void PlayActionActionAbilityType(Character* AIPawn, enum Type, Object* OptionalObject);// 0x38c1e3fee041
	bool PauseMove(AIController* AIController, out AIRequestID OutRequestID);// 0x38c0e3fee041
	void NotifyUpdateTacticAdapterActived(Character* OwnerCharacter, SGInventoryTacticComponent* TacticComponent, bool bNewActive, out const Vector StartPos, float FlashDistance, float FlashFarDim, float FlashNearDim, float FlashZoneAngle, float FlashFaceAngle, float SevereDebuffDistance, float ModerateDebuffDistance, float MildDebuffDistance);// 0x38bfe3fee041
	void NotifyCharacterTakeDamageForAI(Character* DamageCauser, Character* DamageTaker);// 0x38bee3fee041
	void NotifyBulletFireNoise(Character* InInstigator, out const Vector InBulletLocation, out const Vector InBulletVelocity);// 0x38bde3fee041
	bool LineTraceCanShoot(const Object* WorldContextObject, const Vector Start, const Vector End, bool bTraceComplex, out const Actor*[] ActorsToIgnore, bool bIgnoreSelf, out HitResult OutHit, bool EnableDebugLine, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x38bce3fee041
	bool IsSeriouslyInjured(Actor* Character);// 0x38bbe3fee041
	bool IsLastPathPassDoor(Actor* AIOwner, out enum DoorState, out Vector DoorLocation);// 0x38bae3fee041
	bool IsImmuneTearGas(Actor* Character);// 0x38b9e3fee041
	bool IsEnterTearGasRange(Actor* Pawn);// 0x38b8e3fee041
	bool IsEnemyArmorCanProtected(Actor* AIPawn, Actor* EnemyPawn);// 0x38b7e3fee041
	bool IsCurrentWeaponMagazineFull(Character* Character);// 0x38b6e3fee041
	bool IsCurrentWeaponMagazineBulletCountEnough(Character* Character, int RequiredCount);// 0x38b5e3fee041
	bool IsCharacterUnderWeakenDebuff(Actor* Pawn, enum WeakenType, out float RemainTime);// 0x38b4e3fee041
	bool IsAICharacter(Character* Character);// 0x38b3e3fee041
	float GetRemainTimeInOccupyHandAbility(Character* InCharacter);// 0x38b2e3fee041
	int GetReachableAmmoCount(Character* Character);// 0x38b1e3fee041
	int GetPmcAIRankLevel(Actor* InActor);// 0x38b0e3fee041
	int GetMagazineCountByWeapon(Character* Character, SGInventory* Weapon, out const enum[] CountedPositions);// 0x38afe3fee041
	int GetMagazineCount(Character* Character, out const enum[] CountedPositions);// 0x38aee3fee041
	SGGameStateStatisComponent* GetGameStateStatisComponent(const Object* WorldContextObject);// 0x38ade3fee041
	int GetCurrentWeaponMagazineBulletCount(Character* Character);// 0x38ace3fee041
	int GetCurrentWeaponMagazineBulletCapacity(Character* Character);// 0x38abe3fee041
	SGInventory* GetCurrentWeaponMagazine(Character* Character);// 0x38aae3fee041
	bool GetCharacterLootState(Actor* Pawn, out enum LootType);// 0x38a9e3fee041
	class Actor GetAvailabeDefaultBulletClass(Character* Character);// 0x38a8e3fee041
	SGAICharacter*[] GetAllAIInBox(out const Vector Center, float HalfEdgeSize);// 0x38a7e3fee041
	class NPCAIFactionComponent GetAIUsedProfileFactionClass(Actor* AICharacter);// 0x38a6e3fee041
	SGAISpawnManagerComponent* GetAISpawnManagerComponent(const Object* WorldContextObject);// 0x38a5e3fee041
	int GetAINum(World* World);// 0x38a4e3fee041
	FString GetAIName(Actor* InActor);// 0x38a3e3fee041
	int GetAILevel(Actor* InActor);// 0x38a2e3fee041
	SGAIGlobalManagerComponent* GetAIGlobalManagerComponent(const Object* WorldContextObject);// 0x38a1e3fee041
	bool GetAIActive(Character* Character);// 0x38a0e3fee041
	Actor* FindNearEnemyFootSounder(Actor* AIPawn, class SGTrigger TriggerClass, float InRange);// 0x389fe3fee041
	Actor* FastFindNearestActor(const Object* WorldContextObject, out const Vector InCenter, float InRange, class Actor ActorClass, bool bNoUseCached);// 0x389ee3fee041
	void FastFindActorsOfClassInRange(const Object* WorldContextObject, out const Vector InCenter, float InRange, class Actor ActorClass, out Actor*[] OutActors, bool bNoUseCached);// 0x389de3fee041
	void FastFindActorsOfClass(const Object* WorldContextObject, class Actor ActorClass, out Actor*[] OutActors, bool bNoUseCached);// 0x389ce3fee041
	bool ChangeAIProfileFaction(Actor* AICharacter, class NPCAIFactionComponent FactionClass);// 0x389be3fee041

--------------------------------
Class: SGInventoryTacticComponent.ActorComponent.Object
	GameplayTag TacticTag;//[Offset: 0xc0, Size: 0x8]
	bool bSwitchStateOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	SGInventory* SwitcherInventory;//[Offset: 0xd0, Size: 0x8]
	void SetSwitchState(bool bNewSwitchStateOn);// 0x46dae3fee041
	void SetSwitcherInventory(SGInventory* InSwitcherInventory);// 0x46d9e3fee041
	void SetInvActive(bool bNewActive);// 0x46d8e3fee041
	bool IsSwitchStateOn();// 0x46d7e3fee041
	bool IsInvActive();// 0x46d6e3fee041
	SGInventory* GetSwitcherInventory();// 0x46d5e3fee041

--------------------------------
Class: SGGameStateStatisComponent.ActorComponent.Object
	SGStatBulletInfo*[] StatBulletInfoPool;//[Offset: 0xc0, Size: 0x10]
	<SGBulletID,SGStatBulletInfo*> StatBulletInfos;//[Offset: 0xd0, Size: 0x50]
	HighOutputGameEndReportData HighOutputGameEndReportData;//[Offset: 0x120, Size: 0x18]
	<int,int> AllCharacterTakeOutRareItemCount;//[Offset: 0x148, Size: 0x50]
	<int,int> AllCharacterTakeOutRareByScavItemCount;//[Offset: 0x198, Size: 0x50]
	<int,int> AllCharacterTakeOutRareByGuaranteeItemCount;//[Offset: 0x1e8, Size: 0x50]
	<int,ItemDetailedSourceInfo> AllCharacterTakeOutItemSource;//[Offset: 0x238, Size: 0x50]
	float AIRL_SumTime;//[Offset: 0x288, Size: 0x4]
	bool AIRL_SwitchToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	bool AIRL_Survival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d, Size: 0x1]
	void Tlog(FString MsgName, FString BufferHead, FString BufferBody);// 0x44c7e3fee041
	void ShowMessageDialogForTest(FString Title, FString Content);// 0x44c6e3fee041
	void SaveCharacterTakeOutRareItemCount(SGCharacter* Character, bool bDead);// 0x44c5e3fee041
	void ReportSpawnedInventoryValue();// 0x44c4e3fee041
	void ReportReliableRpc(FName RPCName, int Num, float Time);// 0x44c3e3fee041
	void ReportAISpawnedInfo(Character* AICharacter);// 0x44c2e3fee041
	void ReportAIFireTrackLOG(SGStatBulletInfo* StatData);// 0x44c1e3fee041
	void ReportAIBattleInfo(SGAICharacter* InAICharacter, float BattleDuration, int BattleLeaveReason, int64 ID, int64 PgId, int CharacterType, float GameTime);// 0x44c0e3fee041
	void OnSpawnLootItem(SGPickup* SGPickup, SGInventory* LootContainer, bool bIsFullWeapon, int64 ItemID, int ItemCount, int Value, bool bLootGuarantee);// 0x44bfe3fee041
	void OnSpawnLootContainer(SGPickup* SGPickup, SGInventory* LootContainer);// 0x44bee3fee041
	void OnReliableRpcMonitorDel(FName RPCName, int Num, float Time);// 0x44bde3fee041
	void OnQuestEffectGiveItem(Character* Character, int ItemID, int Count);// 0x44bce3fee041
	void OnMissionActionGiveItem(Character* Character, int ItemID, int Count);// 0x44bbe3fee041
	void OnGameFlowStateChanged(FName NewState, FName OldState);// 0x44bae3fee041
	void OnChaseActivityStateChange(out const ChaseActivityStateChangeInfo ChaseActivityStateChangeInfo);// 0x44b9e3fee041
	void OnBulletDestroyed(SGStatBulletInfo* StatData);// 0x44b8e3fee041
	void OnActorSpawn(Actor* NewActor);// 0x44b7e3fee041
	SGStatBulletInfo* GetStatBullet(out const SGBulletID Key);// 0x44b6e3fee041
	void GetCharacterTakeOutRareItemCount(SGCharacter* Character, bool bDead, out <int,int> ItemMap);// 0x44b5e3fee041
	void GetCharacterTakeOutItemCount(SGCharacter* Character, bool bDead, out <int,int> ItemMap, out <int,int> ScavItemMap, out <int,int> GuaranteedItemMap);// 0x44b4e3fee041
	void GetCharacterAllInventorySourceInfo(SGCharacter* Character, bool bDead, out InventorySourceInfo[] InventorySourceInfos);// 0x44b3e3fee041
	SGActorInventoryFactoryComponent*[] GetAllInventoryFactory();// 0x44b2e3fee041
	void FinishStatBullet(out const SGBulletID Key);// 0x44b1e3fee041
	AIDieOrKillBattleInfo CollectAIDieOrKillBattleInfo(SGCharacter* Killer, SGCharacter* Killed);// 0x44b0e3fee041

--------------------------------
Class: SGStatBulletInfo.Object
	Actor* AIOwner;//[Offset: 0x28, Size: 0x8]
	bool bAIShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bHit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bIsUsePredestined;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	byte ShootPartID;//[Offset: 0x31, Size: 0x1]
	byte HitPartID;//[Offset: 0x32, Size: 0x1]
	byte InstigatorType;//[Offset: 0x33, Size: 0x1]
	float ShootDistance;//[Offset: 0x34, Size: 0x4]
	float ArmorDamage;//[Offset: 0x38, Size: 0x4]
	float BodyDamage;//[Offset: 0x3c, Size: 0x4]
	int64 WeaponId;//[Offset: 0x40, Size: 0x8]
	int64 InstigatorID;//[Offset: 0x48, Size: 0x8]
	Vector ShootOffset;//[Offset: 0x50, Size: 0xc]
	int64 AIPathGroupID;//[Offset: 0x60, Size: 0x8]
	Vector PositionWantToShoot;//[Offset: 0x68, Size: 0xc]
	Vector PositionActualShoot;//[Offset: 0x74, Size: 0xc]
	FString EnemyName;//[Offset: 0x80, Size: 0x10]
	int64 EnemyID;//[Offset: 0x90, Size: 0x8]
	int BulletPenetrationFactor;//[Offset: 0x98, Size: 0x4]
	byte EnemyType;//[Offset: 0x9c, Size: 0x1]
	bool bPrevSeriouslyInjured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d, Size: 0x1]
	bool bNowSeriouslyInjured;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9d, Size: 0x1]
	byte PrevBrokenBodyPartNum;//[Offset: 0x9e, Size: 0x1]
	byte NowBrokenBodyPartNum;//[Offset: 0x9f, Size: 0x1]

--------------------------------
Class: HighOutputGameEndReportData
	bool WeaponBoxIsOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool MovingTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool StaticTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool ScavOrderDelivered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool ScavOrderSigned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool PMCOrderDelivered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool PMCOrderSigned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool MediateOrderSigned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool CloseForNoWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool CloseScavOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool CloseMovingTheater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	int ScavRefreshTimes;//[Offset: 0xc, Size: 0x4]
	int PMC_FeedActions;//[Offset: 0x10, Size: 0x4]
	int MediateStopReason;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ItemDetailedSourceInfo
	<int,int> DetailedNumMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: SGPickup.Actor.Object
	SGActorInventoryFactoryComponent* InventoryFactoryComponent;//[Offset: 0x2e0, Size: 0x8]
	SGActorInventoryFactoryComponent* GetInventoryFactoryComponent();// 0x4cade3fee041

--------------------------------
Class: ChaseActivityStateChangeInfo
	enum PreviousState;//[Offset: 0x0, Size: 0x1]
	enum CurrentState;//[Offset: 0x1, Size: 0x1]
	float ServerTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: InventorySourceInfo
	int InventoryID;//[Offset: 0x0, Size: 0x4]
	int64 FromPlayerGID;//[Offset: 0x8, Size: 0x8]
	int InventoryCount;//[Offset: 0x10, Size: 0x4]
	enum FromCharacterType;//[Offset: 0x14, Size: 0x1]
	enum InventorySourceType;//[Offset: 0x15, Size: 0x1]

--------------------------------
Class: AIDieOrKillBattleInfo
	float KillerBattleDuration;//[Offset: 0x0, Size: 0x4]
	float KillerFoundTargetDuration;//[Offset: 0x4, Size: 0x4]
	float KillerShootTargetDuration;//[Offset: 0x8, Size: 0x4]
	float KillerFirstHitDuration;//[Offset: 0xc, Size: 0x4]
	int KillerCumulativeHitTimes;//[Offset: 0x10, Size: 0x4]
	int KillerTeamCumulativeHitTimes;//[Offset: 0x14, Size: 0x4]
	bool KillerHasGoal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool KillerIsKilledMyGoal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	float KilledFirstTakeHitDuration;//[Offset: 0x1c, Size: 0x4]
	int KilledCumulativeTakeHitTimes;//[Offset: 0x20, Size: 0x4]
	float KilledBattleDuration;//[Offset: 0x24, Size: 0x4]
	float KilledFoundTargetDuration;//[Offset: 0x28, Size: 0x4]
	float KilledShootTargetDuration;//[Offset: 0x2c, Size: 0x4]
	float KilledFirstHitDuration;//[Offset: 0x30, Size: 0x4]
	int KilledCumulativeHitTimes;//[Offset: 0x34, Size: 0x4]
	bool KilledHasGoal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool KilledIsKillerMyGoal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: SGAlarm.Actor.Object
	SphereComponent* AlarmMarker;//[Offset: 0x2e0, Size: 0x8]
	SphereComponent* LockMarker;//[Offset: 0x2e8, Size: 0x8]
	ParticleSystemComponent* ParticleSystemLock;//[Offset: 0x2f0, Size: 0x8]
	ParticleSystemComponent* ParticleSystemUnlock;//[Offset: 0x2f8, Size: 0x8]
	enum AlarmState;//[Offset: 0x300, Size: 0x1]
	int64 KeyItemID;//[Offset: 0x308, Size: 0x8]
	void OnRep_AlarmState();// 0x38d0e3fee041

--------------------------------
Class: SGAssembleBase.Actor.Object
	WeaponAssembleEnvironmentInfo[] AssembleInfoArray;//[Offset: 0x2e0, Size: 0x10]
	SkeletalMeshComponent* BaseSkeletalMeshComp;//[Offset: 0x2f0, Size: 0x8]
	StaticMeshComponent* BaseStaticMeshComp;//[Offset: 0x2f8, Size: 0x8]
	SGConfigUtil* Config;//[Offset: 0x300, Size: 0x8]
	Box Bounds;//[Offset: 0x308, Size: 0x1c]
	SGInventory* CachedInv;//[Offset: 0x328, Size: 0x8]
	class SGConfigUtil* ConfigClass;//[Offset: 0x330, Size: 0x8]
	byte ILCQ_Type;//[Offset: 0x338, Size: 0x1]
	int LightChannel;//[Offset: 0x33c, Size: 0x4]
	float Margin;//[Offset: 0x340, Size: 0x4]
	class AnimInstance* AnimInstance;//[Offset: 0x348, Size: 0x8]
	<int,Object*> LoadedMesh;//[Offset: 0x350, Size: 0x50]
	<int,int> AdditionalCameraPosXForAdapter;//[Offset: 0x3a0, Size: 0x50]
	<int,AnimSequenceBase*> CollapseInvIDAnimMap;//[Offset: 0x410, Size: 0x50]
	void ResetMesh(SceneCaptureComponent2D* InSceneCaptureComponent);// 0x38d1e3fee041

--------------------------------
Class: WeaponAssembleEnvironmentInfo
	FName SocketName;//[Offset: 0x0, Size: 0x8]
	int SocketIndex;//[Offset: 0x8, Size: 0x4]
	AssembleSocketInfo SocketInfo;//[Offset: 0x10, Size: 0x80]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x90, Size: 0x8]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x98, Size: 0x8]
	StaticMeshComponent* ParentStaticMeshComp;//[Offset: 0xa0, Size: 0x8]
	SkeletalMeshComponent* ParentSkeletalMeshComp;//[Offset: 0xa8, Size: 0x8]
	SGInventory* AttachedInv;//[Offset: 0xb0, Size: 0x8]
	SGInventory* ParentInv;//[Offset: 0xb8, Size: 0x8]
	bool bStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	ParticleSystemComponent*[] OwnedParticleSystemComponents;//[Offset: 0xc8, Size: 0x10]

--------------------------------
Class: SGAssetLoadManager.Object

--------------------------------
Class: SGAutoRegisterObject.Object

--------------------------------
Class: SGAutoTestNote.Note.Actor.Object
	int NoteIndex;//[Offset: 0x2e0, Size: 0x4]

--------------------------------
Class: SGBackpackAnimInstance.AnimInstance.Object
	SGBackpackAnimInstanceProxy LocalProxy;//[Offset: 0x2c0, Size: 0x770]

--------------------------------
Class: SGBackpackAnimInstanceProxy.AnimInstanceProxy
	SGBackpackAnimInstance* AnimInstance;//[Offset: 0x760, Size: 0x8]

--------------------------------
Class: SGBaseWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: SGBreakableItem.Actor.Object
	StaticMeshComponent* BreakableMesh;//[Offset: 0x2e0, Size: 0x8]
	ParticleSystem*[] BrokenPSTemplateList;//[Offset: 0x2e8, Size: 0x10]
	BreakInfo BreakInfo;//[Offset: 0x2f8, Size: 0x14]
	void OnRep_BreakInfo();// 0x38d2e3fee041

--------------------------------
Class: BreakInfo
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector Dir;//[Offset: 0x4, Size: 0xc]
	int Count;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SGBulletPenetrationInterface.Interface.Object
	bool ShouldStopProjectile(enum ProjectileType);// 0x38dce3fee041
	bool ShouldStopLaterHitEffect();// 0x38dbe3fee041
	bool ShouldPlayOutHitEffects();// 0x38dae3fee041
	bool ShouldPlayImpactEffects();// 0x38d9e3fee041
	bool ShouldBulletPenetration(out const HitResult HitResult);// 0x38d8e3fee041
	void OnOverlapThrowableProjectile(SGThrowableProjectile* ProjectileActor, out const HitResult SweepResult);// 0x38d7e3fee041
	void OnOverlapEndThrowableProjectile(SGThrowableProjectile* ProjectileActor);// 0x38d6e3fee041
	void OnBulletDamping(SGProjectile_GravityBullet* Bullet, out const HitResult HitResult, float PenetrationDepth);// 0x38d5e3fee041
	void OnBulletBlocked(Object* Bullet, out const HitResult HitResult);// 0x38d4e3fee041
	enum GetPenetrationObjectType();// 0x38d3e3fee041

--------------------------------
Class: SGBurnableItem.Actor.Object
	StaticMeshComponent* BurningMesh;//[Offset: 0x2e0, Size: 0x8]
	MaterialInstance* BurningMaterial;//[Offset: 0x2e8, Size: 0x8]
	TempBurningMaterialParamInfo[] BurningMaterialParamsInfo;//[Offset: 0x2f0, Size: 0x10]
	float BurningMaterialParamDuration;//[Offset: 0x300, Size: 0x4]
	float SpreadCheckInterval;//[Offset: 0x304, Size: 0x4]
	ParticleSystemComponent* BurningPSC;//[Offset: 0x308, Size: 0x8]
	float Damage;//[Offset: 0x310, Size: 0x4]
	SphereComponent* DamageSphere;//[Offset: 0x318, Size: 0x8]
	TempBurningInfo BurningInfo;//[Offset: 0x320, Size: 0x8]
	MaterialInstanceDynamic* BurningMaterialRuntime;//[Offset: 0x328, Size: 0x8]
	MFEnvSystem* EnvSystem;//[Offset: 0x338, Size: 0x8]
	void OnBurningInfoRep();// 0x38dde3fee041

--------------------------------
Class: TempBurningMaterialParamInfo
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	float MaxValue;//[Offset: 0x8, Size: 0x4]
	float CurrValue;//[Offset: 0xc, Size: 0x4]
	float ValuePerSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TempBurningInfo
	bool bIsBurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int Count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MFEnvSystem.Actor.Object
	MFEnvBurnComponent* BurnComponent;//[Offset: 0x2e0, Size: 0x8]
	SceneCaptureComponent2D* HeightMapCaptureComponent;//[Offset: 0x2f0, Size: 0x8]
	SceneCaptureComponent2D* RainDepthCaptureComponent;//[Offset: 0x2f8, Size: 0x8]
	MFEnvSceneInfoComponent* SceneInfoComponent;//[Offset: 0x300, Size: 0x8]
	MFEnvWaterComponent* WaterComponent;//[Offset: 0x308, Size: 0x8]
	MFEnvTrailComponent* TrailComponent;//[Offset: 0x310, Size: 0x8]
	MFEnvWindComponent* WindComponent;//[Offset: 0x318, Size: 0x8]
	MFEnvMudComponent* MudComponent;//[Offset: 0x320, Size: 0x8]
	MFEnvPhysFoliageComponent* PhysFoliageComponent;//[Offset: 0x328, Size: 0x8]
	MFEnvAutoExposureComponent* AutoExposureComponent;//[Offset: 0x330, Size: 0x8]
	MaterialInstanceDynamic* DebugActorMID;//[Offset: 0x340, Size: 0x8]
	PlayerController* CacheLocalPC;//[Offset: 0x348, Size: 0x8]
	MaterialParameterCollection* EnvMPC;//[Offset: 0x360, Size: 0x8]
	bool Debug_TryFindDebugActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	bool Debug_UseAssetTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 0x1]
	bool Debug_IsMonsterHunterDemo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a, Size: 0x1]
	bool Debug_ForRenderDocCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b, Size: 0x1]
	void BPTestSetFire();// 0x5273e3fee041
	void BPTestBlowAir(Vector InForceOrigin, Vector InForceDir, float InMomentum);// 0x5272e3fee041

--------------------------------
Class: MFEnvBurnComponent.MFEnvBaseComponent.ActorComponent.Object
	MFEnvBurnBlockBound[] BurnedBlocks;//[Offset: 0xc0, Size: 0x10]
	MFEnvBurnFireComponent*[] FireComponents;//[Offset: 0xd0, Size: 0x10]
	Texture2D* BurnMaskTex;//[Offset: 0xe0, Size: 0x8]
	ParticleSystemComponent*[] AshesPSCArray;//[Offset: 0xe8, Size: 0x10]
	delegate BurnFireBlockEvent;//[Offset: 0xf8, Size: 0x10]
	int BurnTexSize;//[Offset: 0x10c, Size: 0x4]
	int BurnAreaSize;//[Offset: 0x110, Size: 0x4]
	Vector2D BurnAreaCenter;//[Offset: 0x114, Size: 0x8]
	int SpreadTimes;//[Offset: 0x11c, Size: 0x4]
	int Extent;//[Offset: 0x120, Size: 0x4]
	float DitherScale;//[Offset: 0x124, Size: 0x4]
	float BurnProbability;//[Offset: 0x128, Size: 0x4]
	float BurnWeightProbabilityScale;//[Offset: 0x12c, Size: 0x4]
	float BurnWindDirWeightScale;//[Offset: 0x130, Size: 0x4]
	float SpreadInv;//[Offset: 0x134, Size: 0x4]
	float BurnTimePlantDown;//[Offset: 0x138, Size: 0x4]
	float BurnTimePlantBufferRatio;//[Offset: 0x13c, Size: 0x4]
	float BurnTimeEffectOff;//[Offset: 0x140, Size: 0x4]
	float FireDamagePerSec;//[Offset: 0x144, Size: 0x4]
	float FireDamageDuration;//[Offset: 0x148, Size: 0x4]
	MaterialInterface* BurnDecalMaterial;//[Offset: 0x150, Size: 0x8]
	float DecalFadeInTime;//[Offset: 0x158, Size: 0x4]
	ParticleSystem* ContinuousFiringPS1;//[Offset: 0x160, Size: 0x8]
	ParticleSystem* ContinuousFiringPS2;//[Offset: 0x168, Size: 0x8]
	float FiringPS1Probability;//[Offset: 0x170, Size: 0x4]
	float AshesPSProbability;//[Offset: 0x174, Size: 0x4]
	float TexBoxExpand;//[Offset: 0x178, Size: 0x4]
	ParticleSystem* AshesPS;//[Offset: 0x180, Size: 0x8]
	void OnRep_BurnedBlocks();// 0x5269e3fee041

--------------------------------
Class: MFEnvBaseComponent.ActorComponent.Object

--------------------------------
Class: MFEnvBurnFireComponent.MFEnvBaseComponent.ActorComponent.Object
	MFEnvBurnComponent* BurnComponent;//[Offset: 0xc0, Size: 0x8]
	MFEnvBurnFireBlockComponent*[] FireBlocks;//[Offset: 0xc8, Size: 0x10]

--------------------------------
Class: MFEnvBurnFireBlockComponent.MFEnvBaseComponent.ActorComponent.Object
	MFEnvBlockInitInfo BlockInfo;//[Offset: 0xbc, Size: 0x14]
	bool bRemovePlants;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	bool bTurnOffEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1]
	ParticleSystemComponent* ContinuousFiringPSC;//[Offset: 0xe8, Size: 0x8]
	MFEnvBurnFireComponent* FireComponent;//[Offset: 0xf0, Size: 0x8]
	void OnRep_TurnOffEffect();// 0x526ce3fee041
	void OnRep_RemovePlants();// 0x526be3fee041
	void OnRep_BurnRep();// 0x526ae3fee041

--------------------------------
Class: MFEnvBlockInitInfo
	MFEnvBurnBlockBound BurnBounds;//[Offset: 0x0, Size: 0x10]
	byte DamageScale;//[Offset: 0x10, Size: 0x1]
	byte TimeScale;//[Offset: 0x11, Size: 0x1]
	bool bNoEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]

--------------------------------
Class: MFEnvSceneInfoComponent.MFEnvBaseComponent.ActorComponent.Object
	SkinnedMeshComponent*[] CaptureObjectData_RenderThread;//[Offset: 0xc0, Size: 0x10]
	MFEnvActorInfoComponent*[] ActorInfoArray;//[Offset: 0x120, Size: 0x10]
	SceneCaptureComponent2D* HeightMapCaptureComponent;//[Offset: 0x160, Size: 0x8]
	SceneCaptureComponent2D* RainDepthCaptureComponent;//[Offset: 0x168, Size: 0x8]
	TextureRenderTarget2D* CaptureCharacterRT;//[Offset: 0x170, Size: 0x8]
	TextureRenderTarget2D* CaptureHeightMapRT;//[Offset: 0x178, Size: 0x8]
	TextureRenderTarget2D* CaptureRainDepthRT;//[Offset: 0x180, Size: 0x8]
	MaterialInterface* CaptureHeightMat;//[Offset: 0x188, Size: 0x8]
	MaterialInterface* CaptureRainDepthMat;//[Offset: 0x190, Size: 0x8]
	float IdleWaveInv;//[Offset: 0x198, Size: 0x4]
	float IdleWaveWindow;//[Offset: 0x19c, Size: 0x4]
	float CaptureExtent;//[Offset: 0x1a0, Size: 0x4]
	float CaptureCharacterRange;//[Offset: 0x1a4, Size: 0x4]
	float CaptureZOffsetMax;//[Offset: 0x1a8, Size: 0x4]
	float CaptureZOffsetMin;//[Offset: 0x1ac, Size: 0x4]
	float CaptureHeightMapUpdateDistance;//[Offset: 0x1b0, Size: 0x4]
	bool DebugUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 0x1]
	bool enableShowOnlyRainBlockerMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b5, Size: 0x1]

--------------------------------
Class: MFEnvActorInfoComponent.ActorComponent.Object
	MFEnvSystem* EnvSystem;//[Offset: 0xb8, Size: 0x8]
	SkinnedMeshComponent*[] SkinMeshArray;//[Offset: 0xc0, Size: 0x10]
	Vector PreviousPosition;//[Offset: 0xd0, Size: 0xc]
	float PreviousPositionTime;//[Offset: 0xdc, Size: 0x4]
	enum EnvActorType;//[Offset: 0xe0, Size: 0x1]
	int LatentFrames;//[Offset: 0xe4, Size: 0x4]

--------------------------------
Class: MFEnvWaterComponent.MFEnvBaseComponent.ActorComponent.Object
	int SimulateFrame;//[Offset: 0xc0, Size: 0x4]
	float Extent;//[Offset: 0xc4, Size: 0x4]
	TextureRenderTarget2D* WaterHeightRT0;//[Offset: 0xc8, Size: 0x8]
	TextureRenderTarget2D* WaterHeightRT1;//[Offset: 0xd0, Size: 0x8]
	TextureRenderTarget2D* WaterHeightRT2;//[Offset: 0xd8, Size: 0x8]
	TextureRenderTarget2D* WaterCompositeRT;//[Offset: 0xe0, Size: 0x8]

--------------------------------
Class: MFEnvTrailComponent.MFEnvBaseComponent.ActorComponent.Object
	MaterialInstanceDynamic* TrailRTMID;//[Offset: 0xc0, Size: 0x8]
	MaterialInstanceDynamic* TrailRTCopyMID;//[Offset: 0xc8, Size: 0x8]
	float Extent;//[Offset: 0x1c8, Size: 0x4]
	float TrailPosExtent;//[Offset: 0x1cc, Size: 0x4]
	float TrailOldScale;//[Offset: 0x1d0, Size: 0x4]
	float ZHeight;//[Offset: 0x1d4, Size: 0x4]
	float ZFootOffset;//[Offset: 0x1d8, Size: 0x4]
	float Radius;//[Offset: 0x1dc, Size: 0x4]
	float ReserveTime;//[Offset: 0x1e0, Size: 0x4]
	float UpdateInv;//[Offset: 0x1e4, Size: 0x4]
	TextureRenderTarget2D* TrailRT;//[Offset: 0x1e8, Size: 0x8]
	TextureRenderTarget2D* TrailRTCopy;//[Offset: 0x1f0, Size: 0x8]
	TextureRenderTarget2D* TrailPosRT;//[Offset: 0x1f8, Size: 0x8]
	TextureRenderTarget2D* TrailPosRTCopy;//[Offset: 0x200, Size: 0x8]
	Vector4[] PlayerInfos_RenderThread;//[Offset: 0x210, Size: 0x10]

--------------------------------
Class: MFEnvWindComponent.MFEnvBaseComponent.ActorComponent.Object
	float SwayTexUpdateInv;//[Offset: 0xec, Size: 0x4]
	float SwayTexUpdateDist;//[Offset: 0xf0, Size: 0x4]
	float SwayTexExtent;//[Offset: 0xf4, Size: 0x4]
	Texture2D* SwayParamTex;//[Offset: 0xf8, Size: 0x8]
	TextureRenderTarget2D* WindSwayRT;//[Offset: 0x100, Size: 0x8]
	TextureRenderTarget2D* WindSwayRTCopy;//[Offset: 0x108, Size: 0x8]
	float Extent;//[Offset: 0x110, Size: 0x4]
	int IterCountDiffuse;//[Offset: 0x114, Size: 0x4]
	int IterCountProjection;//[Offset: 0x118, Size: 0x4]
	float ForceDirectMomentum;//[Offset: 0x11c, Size: 0x4]
	float ForceDirectExponent;//[Offset: 0x120, Size: 0x4]
	float ForceExplodeMomentum;//[Offset: 0x124, Size: 0x4]
	float ForceExplodeExponent;//[Offset: 0x128, Size: 0x4]
	float ForceExplodeLastTime;//[Offset: 0x12c, Size: 0x4]
	float WindDeltaTimeScale;//[Offset: 0x130, Size: 0x4]
	float WindViscosity;//[Offset: 0x134, Size: 0x4]
	float WindForce;//[Offset: 0x13c, Size: 0x4]
	Vector2D WindDirection;//[Offset: 0x140, Size: 0x8]
	float WindMax;//[Offset: 0x148, Size: 0x4]
	float WindSpeedLarge;//[Offset: 0x14c, Size: 0x4]
	float WindSpeedDetail;//[Offset: 0x150, Size: 0x4]
	float WindScaleLarge;//[Offset: 0x154, Size: 0x4]
	float WindScaleDetail;//[Offset: 0x158, Size: 0x4]
	LevelSequence* WindSequence;//[Offset: 0x160, Size: 0x8]
	TextureRenderTarget2D* WindRTV1;//[Offset: 0x168, Size: 0x8]
	TextureRenderTarget2D* WindRTV2;//[Offset: 0x170, Size: 0x8]
	TextureRenderTarget2D* WindRTV3;//[Offset: 0x178, Size: 0x8]
	TextureRenderTarget2D* WindRTP1;//[Offset: 0x180, Size: 0x8]
	TextureRenderTarget2D* WindRTP2;//[Offset: 0x188, Size: 0x8]
	TextureRenderTarget2D* WindRTVelocity;//[Offset: 0x190, Size: 0x8]
	LevelSequencePlayer* WindSequencePlayer;//[Offset: 0x198, Size: 0x8]
	TextureRenderTarget2D* WindRTV_Slot1_RenderThread;//[Offset: 0x1a0, Size: 0x8]
	TextureRenderTarget2D* WindRTV_Slot2_RenderThread;//[Offset: 0x1a8, Size: 0x8]
	TextureRenderTarget2D* WindRTV_Slot3_RenderThread;//[Offset: 0x1b0, Size: 0x8]
	TextureRenderTarget2D* WindRTP_Slot1_RenderThread;//[Offset: 0x1b8, Size: 0x8]
	TextureRenderTarget2D* WindRTP_Slot2_RenderThread;//[Offset: 0x1c0, Size: 0x8]
	TextureRenderTarget2D* WindRTDebugSlot1_RenderThread;//[Offset: 0x1c8, Size: 0x8]
	TextureRenderTarget2D* WindRTDebugSlot2_RenderThread;//[Offset: 0x1d0, Size: 0x8]
	TextureRenderTarget2D* WindRTJacobi1_RenderThread;//[Offset: 0x1d8, Size: 0x8]
	TextureRenderTarget2D* WindRTJacobi2_RenderThread;//[Offset: 0x1e0, Size: 0x8]
	float Jacobi_Alpha;//[Offset: 0x1e8, Size: 0x4]
	float Jacobi_Beta;//[Offset: 0x1ec, Size: 0x4]

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x68, Size: 0x8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x70, Size: 0x50]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0xc0, Size: 0xa0]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x160, Size: 0x50]
	class Object* DirectorClass;//[Offset: 0x1b0, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x1b8, Size: 0x10]
	void RemoveMetaDataByClass(class Object InClass);// 0x5bc6e3fee041
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x5bc5e3fee041
	Object* FindMetaDataByClass(class Object InClass);// 0x5bc4e3fee041
	Object* CopyMetaData(Object* InMetaData);// 0x5bc3e3fee041

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x20, Size: 0x10]
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x680, Size: 0x10]
	CameraComponent* GetActiveCameraComponent();// 0x6a64e3fee041
	LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x6a63e3fee041

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x410, Size: 0x10]
	delegate OnPlayReverse;//[Offset: 0x420, Size: 0x10]
	delegate OnStop;//[Offset: 0x430, Size: 0x10]
	delegate OnPause;//[Offset: 0x440, Size: 0x10]
	delegate OnFinished;//[Offset: 0x450, Size: 0x10]
	byte Status;//[Offset: 0x460, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x461, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x468, Size: 0x8]
	FrameNumber StartTime;//[Offset: 0x470, Size: 0x4]
	int DurationFrames;//[Offset: 0x474, Size: 0x4]
	float DurationSubFrames;//[Offset: 0x478, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x47c, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x480, Size: 0x14]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x498, Size: 0xe8]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x5e8, Size: 0x10]
	interface class None* PlaybackClient;//[Offset: 0x5f8, Size: 0x10]
	MovieSceneSequenceTickManager* TickManager;//[Offset: 0x608, Size: 0x8]
	void StopAtCurrentTime();// 0x676de3fee041
	void Stop();// 0x676ce3fee041
	void SetTimeRange(float StartTime, float Duration);// 0x676be3fee041
	void SetPlayRate(float PlayRate);// 0x676ae3fee041
	void SetPlaybackPosition(MovieSceneSequencePlaybackParams PlaybackParams);// 0x6769e3fee041
	void SetFrameRate(FrameRate FrameRate);// 0x6768e3fee041
	void SetFrameRange(int StartFrame, int Duration, float SubFrames);// 0x6767e3fee041
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x6766e3fee041
	void ScrubToSeconds(float TimeInSeconds);// 0x6765e3fee041
	bool ScrubToMarkedFrame(FString InLabel);// 0x6764e3fee041
	void ScrubToFrame(FrameTime NewPosition);// 0x6763e3fee041
	void Scrub();// 0x6762e3fee041
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x6761e3fee041
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x6760e3fee041
	void PlayToSeconds(float TimeInSeconds);// 0x675fe3fee041
	bool PlayToMarkedFrame(FString InLabel);// 0x675ee3fee041
	void PlayToFrame(FrameTime NewPosition);// 0x675de3fee041
	void PlayTo(MovieSceneSequencePlaybackParams PlaybackParams);// 0x675ce3fee041
	void PlayReverse();// 0x675be3fee041
	void PlayLooping(int NumLoops);// 0x675ae3fee041
	void Play();// 0x6759e3fee041
	void Pause();// 0x6758e3fee041
	void JumpToSeconds(float TimeInSeconds);// 0x6757e3fee041
	bool JumpToMarkedFrame(FString InLabel);// 0x6756e3fee041
	void JumpToFrame(FrameTime NewPosition);// 0x6755e3fee041
	bool IsReversed();// 0x6754e3fee041
	bool IsPlaying();// 0x6753e3fee041
	bool IsPaused();// 0x6752e3fee041
	void GoToEndAndStop();// 0x6751e3fee041
	QualifiedFrameTime GetStartTime();// 0x6750e3fee041
	float GetPlayRate();// 0x674fe3fee041
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x674ee3fee041
	FrameRate GetFrameRate();// 0x674de3fee041
	int GetFrameDuration();// 0x674ce3fee041
	QualifiedFrameTime GetEndTime();// 0x674be3fee041
	QualifiedFrameTime GetDuration();// 0x674ae3fee041
	bool GetDisableCameraCuts();// 0x6749e3fee041
	QualifiedFrameTime GetCurrentTime();// 0x6748e3fee041
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x6747e3fee041
	void ChangePlaybackDirection();// 0x6746e3fee041

--------------------------------
Class: MovieSceneSequencePlaybackParams
	FrameTime Frame;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
	FString MarkedFrame;//[Offset: 0x10, Size: 0x10]
	enum PositionType;//[Offset: 0x20, Size: 0x1]
	enum UpdateMethod;//[Offset: 0x21, Size: 0x1]

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8]
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceTickManager.Object
	Actor*[] SequenceActors;//[Offset: 0x28, Size: 0x10]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x2f0, Size: 0x14]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x308, Size: 0x8]
	SoftObjectPath LevelSequence;//[Offset: 0x310, Size: 0x18]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x328, Size: 0x2]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x330, Size: 0x8]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x338, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 0x1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x340, Size: 0x1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x340, Size: 0x1]
	Object* DefaultInstanceData;//[Offset: 0x348, Size: 0x8]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x350, Size: 0x8]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	void ShowBurnin();// 0x2d9ae3fee041
	void SetSequence(LevelSequence* InSequence);// 0x2d99e3fee041
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x2d98e3fee041
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x2d97e3fee041
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x2d96e3fee041
	void ResetBindings();// 0x2d95e3fee041
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x2d94e3fee041
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x2d93e3fee041
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x2d92e3fee041
	void OnLevelSequenceLoaded__DelegateSignature();// 0x2d91e3fee041
	LevelSequence* LoadSequence();// 0x2d90e3fee041
	void HideBurnin();// 0x2d8fe3fee041
	LevelSequencePlayer* GetSequencePlayer();// 0x2d8ee3fee041
	LevelSequence* GetSequence();// 0x2d8de3fee041
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x2d8ce3fee041
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x2d8be3fee041
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x2d8ae3fee041
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x2d89e3fee041

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x6a5fe3fee041

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x288, Size: 0xb8]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x340, Size: 0x8]
	void SetSettings(Object* InSettings);// 0x6a61e3fee041
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x6a60e3fee041

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10]
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10]
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 0xc]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 0x8]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: MFEnvMudComponent.MFEnvBaseComponent.ActorComponent.Object
	MaterialInstanceDynamic* MudRTMID;//[Offset: 0xe0, Size: 0x8]
	MaterialInstanceDynamic* MudRTCopyMID;//[Offset: 0xe8, Size: 0x8]
	float UpdateInv;//[Offset: 0x108, Size: 0x4]
	float SampleInv;//[Offset: 0x10c, Size: 0x4]
	float MudDepth;//[Offset: 0x110, Size: 0x4]
	float MudRoll;//[Offset: 0x114, Size: 0x4]
	float MudBottom;//[Offset: 0x118, Size: 0x4]
	float MudBottomTime;//[Offset: 0x11c, Size: 0x4]
	TextureRenderTarget2D* MudRT;//[Offset: 0x120, Size: 0x8]
	TextureRenderTarget2D* MudRTCopy;//[Offset: 0x128, Size: 0x8]
	TextureRenderTarget2D* MudRTComposite;//[Offset: 0x130, Size: 0x8]
	TextureRenderTarget2D* MudRTBlur;//[Offset: 0x138, Size: 0x8]
	TextureRenderTarget2D* MudRTNormal;//[Offset: 0x140, Size: 0x8]

--------------------------------
Class: MFEnvPhysFoliageComponent.MFEnvBaseComponent.ActorComponent.Object
	float FoliageReplaceInv;//[Offset: 0xbc, Size: 0x4]
	float FoliageReplaceRadius;//[Offset: 0xc0, Size: 0x4]
	byte CollisionObjectType;//[Offset: 0xc4, Size: 0x1]
	byte CollisionResponse;//[Offset: 0xc5, Size: 0x1]
	class MFEnvPhysFoliageActor* EnvPhysFoliageActorTemplate;//[Offset: 0xc8, Size: 0x8]
	DataTable* PhysFoliageMeshDT;//[Offset: 0xd0, Size: 0x8]
	MFEnvPhysFoliageActor*[] EnvPhysFoliageActorList;//[Offset: 0xf0, Size: 0x10]

--------------------------------
Class: MFEnvPhysFoliageActor.Actor.Object
	HierarchicalInstancedStaticMeshComponent* HISMInc;//[Offset: 0x2f0, Size: 0x8]
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x308, Size: 0x8]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x310, Size: 0x8]

--------------------------------
Class: MFEnvAutoExposureComponent.MFEnvBaseComponent.ActorComponent.Object
	FName ComponentTag;//[Offset: 0xbc, Size: 0x8]
	bool TakeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	StaticMeshComponent* AEComp;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: SGBurnableItemComponent.SceneComponent.ActorComponent.Object
	MaterialInstance* BurningMaterial;//[Offset: 0x208, Size: 0x8]
	BurningMaterialParamInfo[] BurningMaterialParamsInfo;//[Offset: 0x210, Size: 0x10]
	float BurningMaterialParamDuration;//[Offset: 0x220, Size: 0x4]
	float SpreadCheckInterval;//[Offset: 0x224, Size: 0x4]
	float SetFireCheckInterval;//[Offset: 0x228, Size: 0x4]
	ParticleSystem* BurningPS;//[Offset: 0x230, Size: 0x8]
	ParticleSystemComponent* BurningPSC;//[Offset: 0x238, Size: 0x8]
	float Damage;//[Offset: 0x240, Size: 0x4]
	SphereComponent* DamageSphere;//[Offset: 0x248, Size: 0x8]
	BurningInfo BurningInfo;//[Offset: 0x250, Size: 0x8]
	MaterialInstanceDynamic* BurningMaterialRuntime;//[Offset: 0x258, Size: 0x8]
	MFEnvSystem* EnvSystem;//[Offset: 0x270, Size: 0x8]
	void OnTakePointDamage(Actor* DamagedActor, float DamageAmount, Controller* InstigatedBy, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector ShotFromDirection, const DamageType* DamageType, Actor* DamageCauser);// 0x38e0e3fee041
	void OnOwnerActorOverlap(Actor* OverlappedActor, Actor* OtherActor);// 0x38dfe3fee041
	void OnBurningInfoRep();// 0x38dee3fee041

--------------------------------
Class: BurningMaterialParamInfo
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	float MaxValue;//[Offset: 0x8, Size: 0x4]
	float CurrValue;//[Offset: 0xc, Size: 0x4]
	float ValuePerSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BurningInfo
	bool bIsBurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int Count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SGCameraDebugComponent.ActorComponent.Object
	bool bDrawWorstLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bDrawLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bDrawDesireLocationBeforeAfter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bDrawDOFFocalPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1]

--------------------------------
Class: SGCameraDOF.Object
	bool bAdjustDOF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bForceChooseThisDOF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	float RelativeForwardOffset;//[Offset: 0x2c, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x30, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x34, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x38, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x3c, Size: 0x4]
	float DepthOfFieldSensorWidth;//[Offset: 0x40, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x44, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x48, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x4c, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x50, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x54, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x58, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x5c, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x60, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x64, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x68, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x6c, Size: 0x4]
	float DepthOfFieldDistanceInterpSpeed;//[Offset: 0x70, Size: 0x4]
	float DepthOfFieldRadiusFalloff;//[Offset: 0x74, Size: 0x4]
	Vector2D DepthOfFieldRadiusRange;//[Offset: 0x78, Size: 0x8]
	Vector2D DepthOfFieldRadiusDistRange;//[Offset: 0x80, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: SGCameraDOF_ADS.SGCameraDOF.Object
	SGCameraDebugComponent* DebugComponent;//[Offset: 0xa0, Size: 0x8]
	int ScopeLevel;//[Offset: 0xa8, Size: 0x4]
	Texture* UABlurScopeTexture;//[Offset: 0xb0, Size: 0x8]
	float UABlurIntensity;//[Offset: 0xb8, Size: 0x4]
	float UABlurScopeInnerEdge;//[Offset: 0xbc, Size: 0x4]
	float UABlurScopeOutterEdge;//[Offset: 0xc0, Size: 0x4]
	float UABlurDepthBlackPoint;//[Offset: 0xc4, Size: 0x4]
	float UABlurDepthWhitePoint;//[Offset: 0xc8, Size: 0x4]
	float UABlurDepthGamma;//[Offset: 0xcc, Size: 0x4]
	float UAScopeRadiusMul;//[Offset: 0xd0, Size: 0x4]
	float UAScopeRadiusAdd;//[Offset: 0xd4, Size: 0x4]
	Vector2D UABlurReticleCenter;//[Offset: 0xd8, Size: 0x8]
	float UABlurReticleSize;//[Offset: 0xe0, Size: 0x4]
	Vector4 UABlurReticleRotation;//[Offset: 0xf0, Size: 0x10]
	bool bUABlurUseBranching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	float ReticleCenterMoveScale_Yaw;//[Offset: 0x104, Size: 0x4]
	float ReticleCenterMoveScale_Pitch;//[Offset: 0x108, Size: 0x4]
	float ReticleBeforeActiveTime;//[Offset: 0x10c, Size: 0x4]
	bool bEnableReticleSway;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	bool bEnableReticleBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1]
	float SwayInterpSpeed;//[Offset: 0x114, Size: 0x4]
	float SwayScale_Horizontal;//[Offset: 0x118, Size: 0x4]
	float SwayScale_Vertical;//[Offset: 0x11c, Size: 0x4]
	float MaxSwayAmount_Horizontal;//[Offset: 0x120, Size: 0x4]
	float MaxSwayAmount_Vertical;//[Offset: 0x124, Size: 0x4]

--------------------------------
Class: SGCameraDOF_Cover.SGCameraDOF.Object

--------------------------------
Class: SGCameraDOF_Default.SGCameraDOF.Object

--------------------------------
Class: SGCameraDOF_EnergyExhausted.SGCameraDOF.Object

--------------------------------
Class: SGCameraDOF_Targeting.SGCameraDOF.Object

--------------------------------
Class: SGCameraFOV_ADS.SGCameraFOV.Object

--------------------------------
Class: SGCameraFOV_Default.SGCameraFOV.Object

--------------------------------
Class: SGCameraFOV_Sprinting.SGCameraFOV.Object

--------------------------------
Class: SGCameraFOV_Targeting.SGCameraFOV.Object

--------------------------------
Class: SGCameraMaterial.Object
	MaterialInterface* MaterialTemplate;//[Offset: 0x28, Size: 0x8]
	MaterialInterface* MaterialTemplateLowLod;//[Offset: 0x30, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x38, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstanceHighLod;//[Offset: 0x40, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstanceLowLod;//[Offset: 0x48, Size: 0x8]
	float FadeInTime;//[Offset: 0x54, Size: 0x4]
	float FadeoutTime;//[Offset: 0x58, Size: 0x4]
	void Initialize();// 0x38e8e3fee041
	void EndPlay();// 0x38e7e3fee041
	void ApplyCameraPostProcess(out TViewTarget OutVT, float DeltaTime);// 0x38e6e3fee041

--------------------------------
Class: SGCameraMaterial_Bleed.SGCameraMaterial.Object

--------------------------------
Class: SGCameraMaterial_Clear.SGCameraMaterial.Object
	float Saturation;//[Offset: 0x5c, Size: 0x4]
	float Gain;//[Offset: 0x60, Size: 0x4]
	float Offset;//[Offset: 0x64, Size: 0x4]
	float BaseSaturation;//[Offset: 0x68, Size: 0x4]
	float BaseGain;//[Offset: 0x6c, Size: 0x4]
	float MaxBlendWeight;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: SGCameraMaterial_Death.SGCameraMaterial.Object

--------------------------------
Class: SGCameraMaterial_Drought.SGCameraMaterial.Object
	float PercentThresholdShowingDrought;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: SGCameraMaterial_Dying.SGCameraMaterial.Object
	float PercentThresholdShowingDying;//[Offset: 0x5c, Size: 0x4]
	float HeadPercentThresholdShowingDying;//[Offset: 0x60, Size: 0x4]
	float ChestPercentThresholdShowingDying;//[Offset: 0x64, Size: 0x4]
	float FadeOutDurationAfterDeath;//[Offset: 0x68, Size: 0x4]
	CurveFloat* BlendWeight;//[Offset: 0x70, Size: 0x8]
	float DyingWhiteTemp;//[Offset: 0x78, Size: 0x4]
	Vector4 DyingContrast;//[Offset: 0x80, Size: 0x10]
	Vector4 DyingSaturation;//[Offset: 0x90, Size: 0x10]
	Vector4 DyingColorGain;//[Offset: 0xa0, Size: 0x10]
	Vector4 DyingColorOffset;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: SGCameraMaterial_Fatigue.SGCameraMaterial.Object
	float PercentThresholdShowingFatigue;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: SGCameraMaterial_FlashGrenade.SGCameraMaterial.Object

--------------------------------
Class: SGCameraMaterial_InTrap.SGCameraMaterial.Object
	float fSpeed;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: SGCameraMaterial_Pain.SGCameraMaterial.Object

--------------------------------
Class: SGCameraMaterial_SmokeGrenade.SGCameraMaterial.Object
	CurveFloat* FadeInAlphaFactorCurve;//[Offset: 0x60, Size: 0x8]
	CurveFloat* FadeOutAlphaFactorCurve;//[Offset: 0x68, Size: 0x8]
	SGCharacter* PrevCharacter;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: SGCameraMaterial_TearGas.SGCameraMaterial.Object
	CurveFloat* MaskRadiusCurve;//[Offset: 0x60, Size: 0x8]
	CurveFloat* ScreenTexAlphaCurve;//[Offset: 0x68, Size: 0x8]
	CurveFloat* MaskHardnessCurve;//[Offset: 0x70, Size: 0x8]
	SGCharacterSenseAbilityComponent* SenseAbilityComponent;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: SGCameraMaterial_TunnelVison.SGCameraMaterial.Object

--------------------------------
Class: SGCameraMaterial_VisionPersistence.SGCameraMaterial.Object
	MaterialInstanceDynamic* MaterialInstanceM67;//[Offset: 0x60, Size: 0x8]
	EffectDistanceConfArray[] EffectDistanceConfArray;//[Offset: 0x68, Size: 0x10]
	CurveFloat* BasicEffectCurve;//[Offset: 0x78, Size: 0x8]
	CurveFloat* WhiteEffectCurve;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: EffectDistanceConfArray
	float MinDistance;//[Offset: 0x0, Size: 0x4]
	float MaxDistance;//[Offset: 0x4, Size: 0x4]
	MaterialInstance* StunEffectIns;//[Offset: 0x8, Size: 0x8]
	float DurationTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SGCameraMode.Object
	bool bKeepLastViewLimitInTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	SGCameraStyle* OwnerCameraStyle;//[Offset: 0x30, Size: 0x8]
	float NearClippingPlane;//[Offset: 0x38, Size: 0x4]
	float BlendTime;//[Offset: 0x3c, Size: 0x4]
	float ViewOffsetInterpScale;//[Offset: 0x40, Size: 0x4]
	bool bInterpLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	float OriginLocInterpSpeed;//[Offset: 0x48, Size: 0x4]
	bool bUsePerAxisOriginLocInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	Vector PerAxisOriginLocInterpSpeed;//[Offset: 0x50, Size: 0xc]
	InterpSpeedOverride[] InterpSpeedOverrides;//[Offset: 0x60, Size: 0x10]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float OriginRotInterpSpeed;//[Offset: 0x74, Size: 0x4]
	bool bRotInterpSpeedConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	float MinInterpSpeed;//[Offset: 0x7c, Size: 0x4]
	bool bInterpViewOffsetOnlyForCamTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bInterpCameraLimited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	float CameraLimitedInterpSpeed;//[Offset: 0x84, Size: 0x4]
	float MaxRoll;//[Offset: 0x88, Size: 0x4]
	float MinRoll;//[Offset: 0x8c, Size: 0x4]
	float MaxYaw;//[Offset: 0x90, Size: 0x4]
	float MinYaw;//[Offset: 0x94, Size: 0x4]
	float MaxPitch;//[Offset: 0x98, Size: 0x4]
	float MinPitch;//[Offset: 0x9c, Size: 0x4]
	SGCameraMode* PrevMode;//[Offset: 0xa0, Size: 0x8]
	bool bNextModeInterpCameraLimited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	void UpdatePostProcess(out TViewTarget VT, float DeltaTime);// 0x38f3e3fee041
	void ProcessViewRotation(float DeltaTime, Actor* ViewTarget, out Rotator OutViewRotation, out Rotator OutDeltaRot);// 0x38f2e3fee041
	void OnBecomeInactive(Pawn* TargetPawn, SGCameraMode* NewMode);// 0x38f1e3fee041
	void OnBecomeActive(Pawn* TargetPawn, SGCameraMode* InPrevMode);// 0x38f0e3fee041
	void InterpolateCameraOrigin(Pawn* TargetPawn, float DeltaTime, out Vector out_ActualCameraOrigin, out const Vector IdealCameraOrigin, out Rotator out_ActualCameraOriginRot, out const Rotator IdealCameraOriginRot);// 0x38efe3fee041
	void Init();// 0x38eee3fee041
	Rotator GetViewRotatorOffset(Pawn* ViewedPawn, float DeltaTime, out const Rotator ViewOrigin, out const Rotator ViewRotation);// 0x38ede3fee041
	Vector GetViewOffset(Pawn* ViewedPawn, float DeltaTime, out const Vector ViewOrigin, out const Rotator ViewRotation);// 0x38ece3fee041
	void GetCameraOrigin(Pawn* TargetPawn, out Vector OriginLoc, out Rotator OriginRot);// 0x38ebe3fee041
	bool EvaluateBestCameraMode(Pawn* P);// 0x38eae3fee041
	void ApplyCameraModifiers(float DeltaTime, out MinimalViewInfo InOutPOV);// 0x38e9e3fee041

--------------------------------
Class: SGCameraStyle.Object
	bool bDebugCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x30, Size: 0x8]
	class SGCameraMode[] CameraModeClasses;//[Offset: 0x38, Size: 0x10]
	SGCameraMode*[] CameraModes;//[Offset: 0x48, Size: 0x10]
	class SGCameraMode* DefaultCameraModeClass;//[Offset: 0x58, Size: 0x8]
	Vector DefaultViewOffsetWhenActive;//[Offset: 0x60, Size: 0xc]
	SGCameraMode* DefaultCameraMode;//[Offset: 0x70, Size: 0x8]
	SGCameraMode* CurrentCameraMode;//[Offset: 0x78, Size: 0x8]
	SGCameraMode* LastCameraMode;//[Offset: 0x80, Size: 0x8]
	bool bResetCameraInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float CameraRadius;//[Offset: 0x118, Size: 0x4]
	float CameraRadiusScale;//[Offset: 0x11c, Size: 0x4]
	Vector WorstLocOffset;//[Offset: 0x120, Size: 0xc]
	PenetrationAvoidanceFeeler[] PenetrationAvoidanceFeelers;//[Offset: 0x130, Size: 0x10]
	float WorstLocBlockedPct;//[Offset: 0x140, Size: 0x4]
	float WorstLocPenetrationExtentScale;//[Offset: 0x144, Size: 0x4]
	float PenetrationBlendOutTime;//[Offset: 0x148, Size: 0x4]
	float PenetrationBlendInTime;//[Offset: 0x14c, Size: 0x4]
	float PenetrationBlockedPct;//[Offset: 0x150, Size: 0x4]
	float PenetrationExtentScale;//[Offset: 0x154, Size: 0x4]
	float CameraLocatationClamp;//[Offset: 0x158, Size: 0x4]
	void UpdateCameraMode(Pawn* P, float DeltaTime);// 0x390ce3fee041
	void UpdateCamera(Pawn* P, PlayerCameraManager* CameraActor, float DeltaTime, out TViewTarget OutVT);// 0x390be3fee041
	void ResetInterpolation();// 0x390ae3fee041
	void ProcessViewRotation(float DeltaTime, Actor* ViewTarget, out Rotator OutViewRotation, out Rotator OutDeltaRot);// 0x3909e3fee041
	void OnBecomeInactive(SGCameraStyle* NewCamera, out TViewTarget OutVT);// 0x3908e3fee041
	void OnBecomeActive(SGCameraStyle* OldCamera, out TViewTarget OutVT);// 0x3907e3fee041
	void Init();// 0x3906e3fee041
	Rotator GetPawnMeshRotation(Pawn* P);// 0x3905e3fee041
	Vector GetPawnMeshLocation(Pawn* P);// 0x3904e3fee041
	SGCameraMode* FindBestCameraMode(Pawn* P);// 0x3903e3fee041
	bool EvaluateBestCameraStyle(PlayerCameraManager* CameraActor);// 0x3902e3fee041
	SGCameraMode* CreateCameraMode(class SGCameraMode CameraModeClass);// 0x3901e3fee041
	void ApplyCameraModifiers(float DeltaTime, out MinimalViewInfo InOutPOV);// 0x3900e3fee041

--------------------------------
Class: PenetrationAvoidanceFeeler
	Rotator AdjustmentRot;//[Offset: 0x0, Size: 0xc]
	float WorldWeight;//[Offset: 0xc, Size: 0x4]
	float PawnWeight;//[Offset: 0x10, Size: 0x4]
	Vector Extent;//[Offset: 0x14, Size: 0xc]
	int TraceInterval;//[Offset: 0x20, Size: 0x4]
	int FramesUntilNextTrace;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: InterpSpeedOverride
	class SGCameraMode* PrevCameraModeClass;//[Offset: 0x0, Size: 0x8]
	float OriginLocInterpSpeed;//[Offset: 0x8, Size: 0x4]
	Vector PerAxisOriginLocInterpSpeed;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SGCameraShake.MatineeCameraShake.CameraShakeBase.Object
	CurveFloat* OscillationBlendCurve;//[Offset: 0x178, Size: 0x8]
	bool bUseCustomOscillator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	bool bShowCameraShakeInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	OscillatorInfo[] OscillatorInfoSettings;//[Offset: 0x188, Size: 0x10]
	CurveFloat* FOVToFOVAmplitudeCurve;//[Offset: 0x198, Size: 0x8]
	bool bUseFixedStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	bool bClampSineOffsetWhenOverPeak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 0x1]
	bool bClampSineOffsetWhenExtremePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2, Size: 0x1]
	CurveFloat* AmplitudeCurve;//[Offset: 0x1a8, Size: 0x8]
	float CurveAdditiveMaxTime;//[Offset: 0x1b0, Size: 0x4]
	float CurveBlnedOutTime;//[Offset: 0x1b4, Size: 0x4]

--------------------------------
Class: OscillatorInfo
	enum ShakeAxis;//[Offset: 0x0, Size: 0x1]
	SineOscillator OscillatorSetting;//[Offset: 0x8, Size: 0x38]

--------------------------------
Class: SineOscillator
	float DurationTime;//[Offset: 0x0, Size: 0x4]
	float SingleFireDurationTime;//[Offset: 0x4, Size: 0x4]
	float BlendInTime;//[Offset: 0x8, Size: 0x4]
	float BlendOutTime;//[Offset: 0xc, Size: 0x4]
	float AmplitudeAdditiveTime;//[Offset: 0x10, Size: 0x4]
	float Period;//[Offset: 0x14, Size: 0x4]
	float Delay;//[Offset: 0x18, Size: 0x4]
	float BaseAmplitude;//[Offset: 0x1c, Size: 0x4]
	float PerAmplitudeAdd;//[Offset: 0x20, Size: 0x4]
	float MinAmplitudeScale;//[Offset: 0x24, Size: 0x4]
	float MaxAmplitudeScale;//[Offset: 0x28, Size: 0x4]
	CurveFloat* AmplitudeCurve;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: SGCameraShakeBase.Object
	class MatineeCameraShake* CameraShakeClass;//[Offset: 0x28, Size: 0x8]
	class MatineeCameraShake* ADSCameraShakeClass;//[Offset: 0x30, Size: 0x8]
	PlayerController* ControllerCache;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SGCameraShake_Animation.SGCameraShakeBase.Object
	FName ConfigActiveAnimStateName;//[Offset: 0x40, Size: 0x8]
	FName ConfigStateMachineName;//[Offset: 0x48, Size: 0x8]
	AnimInstance* CachedAnimInstance;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SGCameraShake_Landing.SGCameraShakeBase.Object
	enum ConfigLandingType;//[Offset: 0x40, Size: 0x1]
	void BeginLanding(out const HitResult Hit);// 0x38f8e3fee041

--------------------------------
Class: SGCameraShake_LegBoneBreak.SGCameraShakeBase.Object

--------------------------------
Class: SGCameraShake_TakeHit.SGCameraShakeBase.Object
	class MatineeCameraShake* TrapHitCameraShakeClass;//[Offset: 0x40, Size: 0x8]
	class MatineeCameraShake* TrapHitADSCameraShakeClass;//[Offset: 0x48, Size: 0x8]
	class MatineeCameraShake* CS_NormalTakeHit_330;//[Offset: 0x50, Size: 0x8]
	class MatineeCameraShake* CS_NormalTakeHit_30;//[Offset: 0x58, Size: 0x8]
	class MatineeCameraShake* CS_NormalTakeHit_90;//[Offset: 0x60, Size: 0x8]
	class MatineeCameraShake* CS_NormalTakeHit_150;//[Offset: 0x68, Size: 0x8]
	class MatineeCameraShake* CS_NormalTakeHit_210;//[Offset: 0x70, Size: 0x8]
	class MatineeCameraShake* CS_NormalTakeHit_270;//[Offset: 0x78, Size: 0x8]
	class MatineeCameraShake* CS_TakeHit_330;//[Offset: 0x80, Size: 0x8]
	class MatineeCameraShake* CS_TakeHit_30;//[Offset: 0x88, Size: 0x8]
	class MatineeCameraShake* CS_TakeHit_90;//[Offset: 0x90, Size: 0x8]
	class MatineeCameraShake* CS_TakeHit_150;//[Offset: 0x98, Size: 0x8]
	class MatineeCameraShake* CS_TakeHit_210;//[Offset: 0xa0, Size: 0x8]
	class MatineeCameraShake* CS_TakeHit_270;//[Offset: 0xa8, Size: 0x8]
	class MatineeCameraShake* CS_HeadChestTakeHit_330;//[Offset: 0xb0, Size: 0x8]
	class MatineeCameraShake* CS_HeadChestTakeHit_30;//[Offset: 0xb8, Size: 0x8]
	class MatineeCameraShake* CS_HeadChestTakeHit_90;//[Offset: 0xc0, Size: 0x8]
	class MatineeCameraShake* CS_HeadChestTakeHit_150;//[Offset: 0xc8, Size: 0x8]
	class MatineeCameraShake* CS_HeadChestTakeHit_210;//[Offset: 0xd0, Size: 0x8]
	class MatineeCameraShake* CS_HeadChestTakeHit_270;//[Offset: 0xd8, Size: 0x8]
	bool bStopLastShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	class MatineeCameraShake* CS_OutOfEnduranceTakeHit_330;//[Offset: 0xe8, Size: 0x8]
	class MatineeCameraShake* CS_OutOfEnduranceTakeHit_30;//[Offset: 0xf0, Size: 0x8]
	class MatineeCameraShake* CS_OutOfEnduranceTakeHit_90;//[Offset: 0xf8, Size: 0x8]
	class MatineeCameraShake* CS_OutOfEnduranceTakeHit_150;//[Offset: 0x100, Size: 0x8]
	class MatineeCameraShake* CS_OutOfEnduranceTakeHit_210;//[Offset: 0x108, Size: 0x8]
	class MatineeCameraShake* CS_OutOfEnduranceTakeHit_270;//[Offset: 0x110, Size: 0x8]
	float CameraShake_TakeHit_Interval;//[Offset: 0x11c, Size: 0x4]
	Actor* CachedDamageCauser;//[Offset: 0x120, Size: 0x8]
	CurveFloat* DamageRotScaleCurve;//[Offset: 0x128, Size: 0x8]
	CurveFloat* DamageFOVScaleCurve;//[Offset: 0x130, Size: 0x8]
	SGCharacter* CurCharacter;//[Offset: 0x138, Size: 0x8]
	class MatineeCameraShake* CameraShakeClassToUse;//[Offset: 0x160, Size: 0x8]
	void OutOfEnduranceTakeHit(float Damage, Vector Momentum);// 0x38fce3fee041
	void OnStartSpectating(SGCharacter* BeSpectatedPawn);// 0x38fbe3fee041
	void OnNotifyTakeHit(Actor* CauserActor, float ActuralDamage, Vector Momentum, Actor* DamageCauser, enum HitGroup, bool bHitPenetrateArmor);// 0x38fae3fee041
	void OnEnduranceChanged(enum Type, float EnduranceDelta, float CurrentVal, float MaxVal);// 0x38f9e3fee041

--------------------------------
Class: SGCameraShake_WeaponBob.SGCameraShakeBase.Object
	float WeaponBobBeginSpeed;//[Offset: 0x40, Size: 0x4]
	float WeaponBobScaleBySpeed;//[Offset: 0x44, Size: 0x4]
	float CheckInterval;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: SGCameraStatics.BlueprintFunctionLibrary.Object
	void SetCameraMirror(PlayerCameraManager* PCM, bool bMirror);// 0x38ffe3fee041
	bool IsCameraMirror(PlayerCameraManager* PCM);// 0x38fee3fee041
	float GetCameraFOV(PlayerCameraManager* PCM);// 0x38fde3fee041

--------------------------------
Class: SGCameraStyle_Customize.SGCameraStyle.Object

--------------------------------
Class: SGCameraStyle_Death.SGCameraStyle.Object

--------------------------------
Class: SGCameraStyle_FirstPerson.SGCameraStyle.Object

--------------------------------
Class: SGCameraStyle_Fixed.SGCameraStyle.Object

--------------------------------
Class: SGCameraStyle_ThirdPerson.SGCameraStyle.Object
	float OriginOffsetInterpSpeed;//[Offset: 0x17c, Size: 0x4]
	CameraFocusPointParams FocusPoint;//[Offset: 0x210, Size: 0x38]
	Vector StyleGeneralViewOffset;//[Offset: 0x25c, Size: 0xc]
	void UpdateFocusPoint(Pawn* P);// 0x3914e3fee041
	void SetFocusOnLoc(Vector FocusWorldLoc, Vector2D InterpSpeedRange, Vector2D InFocusFOV, float CameraFOV, bool bAlwaysFocus, bool bAdjustCamera, bool bIgnoreTrace, float FocusPitchOffsetDeg);// 0x3913e3fee041
	void SetFocusOnActor(Actor* FocusActor, FName FocusBoneName, Vector2D InterpSpeedRange, Vector2D InFocusFOV, float CameraFOV, bool bAlwaysFocus, bool bAdjustCamera, bool bIgnoreTrace, float FocusPitchOffsetDeg);// 0x3912e3fee041
	Actor* GetFocusActor();// 0x3911e3fee041
	void EndTurn();// 0x3910e3fee041
	void ClearFocusPoint(bool bLeaveCameraRotation);// 0x390fe3fee041
	void BeginTurn(int StartAngle, int EndAngle, float TimeSec, float DelaySec, bool bAlignTargetWhenFinished);// 0x390ee3fee041
	void AdjustTurn(int AngleOffset);// 0x390de3fee041

--------------------------------
Class: CameraFocusPointParams
	Actor* FocusActor;//[Offset: 0x0, Size: 0x8]
	FName FocusBoneName;//[Offset: 0x8, Size: 0x8]
	Vector FocusWorldLoc;//[Offset: 0x10, Size: 0xc]
	float CameraFOV;//[Offset: 0x1c, Size: 0x4]
	Vector2D InterpSpeedRange;//[Offset: 0x20, Size: 0x8]
	Vector2D InFocusFOV;//[Offset: 0x28, Size: 0x8]
	bool bAlwaysFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bAdjustCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bIgnoreTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	float FocusPitchOffsetDeg;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: SGCameraStyle_UAMFirstPerson.SGCameraStyle_FirstPerson.SGCameraStyle.Object
	float DefaultOffsetInterpSpeed;//[Offset: 0x17c, Size: 0x4]
	CurveFloat* InterpSpeedCurve;//[Offset: 0x180, Size: 0x8]

--------------------------------
Class: SGCaptureCharacterLights.Actor.Object
	SkyLightComponent* SkyLightComp;//[Offset: 0x2e0, Size: 0x8]
	SkyLightComponent* GetSkyLightComp();// 0x3915e3fee041

--------------------------------
Class: SGCardReader.Actor.Object
	SGDoorBase* OwnedDoor;//[Offset: 0x2e0, Size: 0x8]
	ParticleSystemComponent* ParticleSystemLock;//[Offset: 0x2e8, Size: 0x8]
	ParticleSystemComponent* ParticleSystemUnlockCoolDown;//[Offset: 0x2f0, Size: 0x8]
	ParticleSystemComponent* ParticleSystemUnlock;//[Offset: 0x2f8, Size: 0x8]
	void OnDoorCardStateChanged(SGDoorBase* Door, enum NewState);// 0x3916e3fee041

--------------------------------
Class: SGCharacterActivityComponent.ActorComponent.Object
	class GameplayEffect* MarkEffectClass;//[Offset: 0xc8, Size: 0x8]
	class GameplayEffect* BeMarkedEffectClass;//[Offset: 0xd0, Size: 0x8]
	void OnMarkedStateChange(Character* InCharacter, bool bAdded, float ScanningInterval);// 0x3918e3fee041
	void OnBeMarkedStateChange(Character* InCharacter, bool bAdded, float ScanningInterval);// 0x3917e3fee041

--------------------------------
Class: SGCharacterAICastShadowComponent.SGCharacterCastShadowComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: SGCharacterAIDBNOComponent.SGCharacterDBNOComponent.ActorComponent.Object
	bool bCheckDiedWipeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]

--------------------------------
Class: SGCharacterAIDoorOpenerComponent.ActorComponent.Object
	float FarAwayFromDoorDistance;//[Offset: 0xc8, Size: 0x4]
	float CloseFromDoorDistance;//[Offset: 0xcc, Size: 0x4]
	float DoorCheckDist;//[Offset: 0xd0, Size: 0x4]
	SGDoorBase* DoorInFront;//[Offset: 0xd8, Size: 0x8]
	Vector WaitAgainstPointToGo;//[Offset: 0xe0, Size: 0xc]
	Vector WaitSafetyPointToGo;//[Offset: 0xec, Size: 0xc]
	Vector WaitSafetyDoorNavLinkPoint;//[Offset: 0xf8, Size: 0xc]
	bool bWantToStopSafetyWaitOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	SGDoorBase* WaitSafetyOpenDoor;//[Offset: 0x108, Size: 0x8]
	Vector[] SafetyDoorPointsInPath;//[Offset: 0x110, Size: 0x10]
	float RandWaitRadius;//[Offset: 0x120, Size: 0x4]
	float MinWaitRadius;//[Offset: 0x124, Size: 0x4]
	float MaxWaitRadius;//[Offset: 0x128, Size: 0x4]
	Vector LastPointToGo;//[Offset: 0x12c, Size: 0xc]
	AISGDoorManager* AISGDoorManager;//[Offset: 0x148, Size: 0x8]
	NPCAIMoverSystemComponent* MoverSystemComponent;//[Offset: 0x150, Size: 0x8]
	NPCAIMemorySystemComponent* MemorySystemComponent;//[Offset: 0x158, Size: 0x8]
	SGCharacterAITurnComponent* AITurnComponent;//[Offset: 0x160, Size: 0x8]

--------------------------------
Class: SGCharacterAITurnComponent.SGCharacterBaseTurnComponent.ActorComponent.Object
	float ControllerInterpSpeed;//[Offset: 0x2f0, Size: 0x4]
	float ControllerAcceleratedSpeed;//[Offset: 0x2f4, Size: 0x4]
	float ControllerTurnSpeedMax;//[Offset: 0x2f8, Size: 0x4]
	float ControllerTurnSpeedMin;//[Offset: 0x2fc, Size: 0x4]
	bool bTurnSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	bool bEnabledUseTurnComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1]
	float ActualActorRTurnSpeed;//[Offset: 0x304, Size: 0x4]
	Rotator ActorLastRotation;//[Offset: 0x308, Size: 0xc]
	float UpdateInterval;//[Offset: 0x314, Size: 0x4]
	float ElapsedTimeFromLastUpdate;//[Offset: 0x318, Size: 0x4]
	float WaitTimeForUpdate;//[Offset: 0x31c, Size: 0x4]
	float LookToPointLockTime;//[Offset: 0x320, Size: 0x4]
	enum LookPointMode;//[Offset: 0x324, Size: 0x1]
	Vector LookDirection;//[Offset: 0x328, Size: 0xc]
	Vector TurnTargetPoint;//[Offset: 0x334, Size: 0xc]
	bool bCompletedSegmentTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	float TotalTurnRotateYaw;//[Offset: 0x344, Size: 0x4]
	Vector CacheTurnTargetPoint;//[Offset: 0x348, Size: 0xc]
	enum CacheLookPointMode;//[Offset: 0x354, Size: 0x1]
	NPCAIPropertyComponent_Move* MoveProps;//[Offset: 0x358, Size: 0x8]
	NPCAIMoverSystemComponent* AIMoverComponent;//[Offset: 0x360, Size: 0x8]
	SGCharacterMovementComponent* MovementComponent;//[Offset: 0x368, Size: 0x8]
	void TickUpdateTurnToLook(float DeltaTime);// 0x3aeae3fee041
	void StoreCurrentLookMode();// 0x3ae9e3fee041
	void RecoverLookMode();// 0x3ae8e3fee041
	void LookToPoint(out const Vector Point, float RotateSpeedInDegree, float AcceleratedSpeedInDegree, bool bQuickly);// 0x3ae7e3fee041
	void LookToMovingDirection(float RotateSpeedInDegree, float AcceleratedSpeedInDegree);// 0x3ae6e3fee041
	void LockLookToPoint(float LockTime);// 0x3ae5e3fee041

--------------------------------
Class: SGCharacterAIExplodeComponent.ActorComponent.Object
	ParticleSystem* ExplodePS;//[Offset: 0xc8, Size: 0x8]
	float DamageRange;//[Offset: 0xd0, Size: 0x4]
	float MinRadiusDamage;//[Offset: 0xd4, Size: 0x4]
	float MaxRadiusDamage;//[Offset: 0xd8, Size: 0x4]
	class DamageType* DamageTypeClass;//[Offset: 0xe0, Size: 0x8]
	bool bExplodeAtDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	void OnPostDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x39c9e3fee041
	void NetMulticastExplodeInner();// 0x39c8e3fee041
	void Explode();// 0x39c7e3fee041

--------------------------------
Class: SGCharacterAIMovementComponent.ActorComponent.Object
	float LastOverlapOtherTime;//[Offset: 0xc8, Size: 0x4]
	float LastStopMovingTime;//[Offset: 0xcc, Size: 0x4]
	float LastTimeGoAwayIfOverlapOthers;//[Offset: 0xd0, Size: 0x4]
	bool bDefaultIgnoreOtherPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	bool IsIgnoreOtherPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]
	bool IsEnabledRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1]
	float TimeOfIgnorePawn;//[Offset: 0xd8, Size: 0x4]
	float DistanceToDestinationStopIfOverlapOther;//[Offset: 0xdc, Size: 0x4]
	float DistanceToWallStop;//[Offset: 0xe0, Size: 0x4]
	Vector DestinationToGo;//[Offset: 0xe4, Size: 0xc]
	bool bCheckIsMovingToWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	float CheckKeepAwayWallTime;//[Offset: 0xf4, Size: 0x4]
	void OnTickMovingToWall();// 0x3a1de3fee041
	void OnTickMovingIgnoreOthers();// 0x3a1ce3fee041
	void OnRep_IsIgnoreOtherPawn();// 0x3a1be3fee041
	void OnRep_IsEnabledRVOAvoidance();// 0x3a1ae3fee041
	float GetDistanceToWall(out const Vector CheckPoint, out Vector HitPoint);// 0x3a19e3fee041

--------------------------------
Class: SGCharacterAIPathNodeComponent.ActorComponent.Object
	SGAIPathNode* InitPathNode;//[Offset: 0xc8, Size: 0x8]
	SGAIPathNode* CurrentPathNode;//[Offset: 0xd0, Size: 0x8]
	SGAIPathNode* NextPathNode;//[Offset: 0xd8, Size: 0x8]

--------------------------------
Class: SGCharacterAIPickUpComponent.ActorComponent.Object
	float DistanceToInventoryForPickUp;//[Offset: 0xc8, Size: 0x4]
	float PickUpInterval;//[Offset: 0xcc, Size: 0x4]
	float NextPickUpTime;//[Offset: 0xd0, Size: 0x4]
	int IndexOfPickUpList;//[Offset: 0xd4, Size: 0x4]
	bool bCheckIsCanAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	bool bHadCheckTryReplaceLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	bool bHasCollectInventoryItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]
	bool bPickUpFromContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1]
	Actor* WaitPickUpBoxContainer;//[Offset: 0xe0, Size: 0x8]
	Actor*[] WaitPickUpList;//[Offset: 0xe8, Size: 0x10]
	Actor* PendingInventory;//[Offset: 0x100, Size: 0x8]
	NPCAIMemorySystemComponent* MemoryComp;//[Offset: 0x110, Size: 0x8]
	NPCAIPropertyComponent_Mind* MindProp;//[Offset: 0x118, Size: 0x8]
	SGAIGlobalManagerComponent* AIGlobalMgr;//[Offset: 0x120, Size: 0x8]

--------------------------------
Class: SGCharacterRagdollComponent.ActorComponent.Object
	bool bStartingRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bInRagdollRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	float RagdollGravityScale;//[Offset: 0xc4, Size: 0x4]
	AkAudioEvent* RagdollFallSound;//[Offset: 0xc8, Size: 0x8]
	float RagdollCollisionBleedThreshold;//[Offset: 0xd0, Size: 0x4]
	float RagdollBlendOutTime;//[Offset: 0xd4, Size: 0x4]
	void StopRagdoll();// 0x3a2ee3fee041
	void StartRagdoll();// 0x3a2de3fee041
	void SetRagdollGravityScale(float NewScale);// 0x3a2ce3fee041
	void PreRagdoll();// 0x3a2be3fee041
	void OnRagdollCollision(PrimitiveComponent* ThisComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x3a2ae3fee041
	bool IsRagdoll();// 0x3a29e3fee041
	float GetRagdollGravityScale();// 0x3a28e3fee041

--------------------------------
Class: SGCharacterAIRagdollComponent.SGCharacterRagdollComponent.ActorComponent.Object

--------------------------------
Class: SGCharacterRandomrDefaultInvComp.ActorComponent.Object
	CharacterDefaultInventoryList[] CharacterDefaultInventoryListPool;//[Offset: 0xc0, Size: 0x10]
	CharacterDefaultInventoryList CurrDefaultInventoryList;//[Offset: 0xd0, Size: 0x20]

--------------------------------
Class: CharacterDefaultInventoryList
	class Actor[] DefaultPickupInventories;//[Offset: 0x0, Size: 0x10]
	class Actor[] DefaultPickupToBagInventories;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SGCharacterAIRandomrDefaultInvComp.SGCharacterRandomrDefaultInvComp.ActorComponent.Object

--------------------------------
Class: SGCharacterAISenseAbilityComponent.SGCharacterSenseAbilityComponent.ActorComponent.Object
	void ProcessOnEnterInventoryFlash(bool bInSevere, bool bInModerate, bool bInMild, float CharFaceAngleDegree, Vector SocketLoc);// 0x3a80e3fee041
	bool IsInGasArea();// 0x3a7fe3fee041

--------------------------------
Class: SGCharacterAISoundComponent.SGCharacterSoundComponent.ActorComponent.Object
	AkAudioEvent* ConfirmTargetScream;//[Offset: 0x2b0, Size: 0x8]
	AISoundRepInfo CurrSoundRepInfo;//[Offset: 0x2b8, Size: 0x8]
	void OnRep_AISoundRepInfo();// 0x3aaee3fee041

--------------------------------
Class: AISoundRepInfo
	enum SoundType;//[Offset: 0x0, Size: 0x1]
	int Count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SGCharacterAISteeringComponent.ActorComponent.Object

--------------------------------
Class: SGCharacterAITakeCoverComponent.SGCharacterTakeCoverComponent.ActorComponent.Object
	bool bAITakeCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]
	void OnRep_AITakeCover();// 0x3ac4e3fee041

--------------------------------
Class: SGCharacterTakeDamageComponent.SGActorTakeDamageComponent.ActorComponent.Object
	bool bDamageHurtsHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bDebugDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bDebugGrenadeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	bool bTeamGrenadeHarmEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 0x1]
	bool bFactionGrenadeHarmEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	SGConfigUtil* Config;//[Offset: 0xd8, Size: 0x8]
	DamageEventObject* LastHitByDamageEventObject;//[Offset: 0xe0, Size: 0x8]
	Controller* LastEventInstigator;//[Offset: 0xe8, Size: 0x8]
	class SGConfigUtil* ConfigClass;//[Offset: 0xf0, Size: 0x8]
	bool bEnableTeammateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool bDebugHitPhyMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	HitPartInfo[] HitPartInfoLookupTable;//[Offset: 0x100, Size: 0x10]
	<PhysicalMaterial*,HitPartInfo> HitMaterialToHitPartInfoMap;//[Offset: 0x110, Size: 0x50]
	<enum,HitPartInfo> HitGroupToHitPartInfoMap;//[Offset: 0x160, Size: 0x50]
	void SetTeamGrenadeHarmEnable(bool bEnable);// 0x3acee3fee041
	void SetFactionGrenadeHarmEnable(bool bEnable);// 0x3acde3fee041
	void ServerSetDebugGrenadeDamageFlag(bool bDebugDamageFlag);// 0x3acce3fee041
	void ServerSetDebugDamageFlag(bool bDebugDamageFlag);// 0x3acbe3fee041
	bool GetTeamGrenadeHarmEnable();// 0x3acae3fee041
	PhysicalMaterial* GetPhysMaterialByHitGroup(const enum HitGroup);// 0x3ac9e3fee041
	enum GetHitGroupByPhysMaterial(const PhysicalMaterial* InPhysicalMaterial);// 0x3ac8e3fee041
	bool GetFriendHarmEnableResult(Character* Causer, Character* Suffer);// 0x3ac7e3fee041
	bool GetFactionGrenadeHarmEnable();// 0x3ac6e3fee041
	float GetDamageScaleByPhysMaterial(const PhysicalMaterial* InPhysicalMaterial);// 0x3ac5e3fee041

--------------------------------
Class: HitPartInfo
	PhysicalMaterial* HitMaterial;//[Offset: 0x0, Size: 0x8]
	float DamageScale;//[Offset: 0x8, Size: 0x4]
	enum HitGroup;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: SGCharacterAITakeDamageComponent.SGCharacterTakeDamageComponent.SGActorTakeDamageComponent.ActorComponent.Object

--------------------------------
Class: SGCharacterAITeamRescueComponent.SGCharacterTeamRescueComponent.ActorComponent.Object

--------------------------------
Class: SGCharacterAIWeaponManagerComponent.SGCharacterWeaponManagerComponent.ActorComponent.Object
	float CheckWeaponSwitchInterval;//[Offset: 0x330, Size: 0x4]
	float NextCheckWeaponTime;//[Offset: 0x334, Size: 0x4]
	enum GoalWeaponType;//[Offset: 0x338, Size: 0x1]
	enum FromWeaponType;//[Offset: 0x339, Size: 0x1]
	TimerHandle TimeHandler;//[Offset: 0x340, Size: 0x8]
	bool bEnabledTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]

--------------------------------
Class: AnimInstanceEvaluator.Object
	class AnimInstance* AnimInstanceClass;//[Offset: 0x28, Size: 0x28]
	bool bAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool Evaluate(Character* Character);// 0x3b96e3fee041

--------------------------------
Class: SGCharacterAnimationManagerComponent.ActorComponent.Object
	class AnimInstanceEvaluator[] AnimInstanceEvaluatorClasses;//[Offset: 0xc0, Size: 0x10]
	class AnimInstanceEvaluator* DefaultAnimInstanceEvaluatorClass;//[Offset: 0xd0, Size: 0x8]
	AnimInstanceEvaluator*[] AnimInstanceEvaluators;//[Offset: 0xd8, Size: 0x10]
	AnimInstanceEvaluator* DefaultAnimInstanceEvaluator;//[Offset: 0xe8, Size: 0x8]
	AnimInstanceEvaluator* CurrentEvaluator;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: SGCharacterArmorAttributeSet.AttributeSet.Object
	float HeadProtectMask;//[Offset: 0x34, Size: 0x4]
	float HeadDetailProtectMask;//[Offset: 0x38, Size: 0x4]
	float Head_DurabilityConsumeScale_Blocked;//[Offset: 0x3c, Size: 0x4]
	float Head_DurabilityConsumeScale_Penetrated;//[Offset: 0x40, Size: 0x4]
	float Head_AntiPenetrationFactor;//[Offset: 0x44, Size: 0x4]
	float Head_DamageScaleForPenetration;//[Offset: 0x48, Size: 0x4]
	float Head_DamageScaleForBlock;//[Offset: 0x4c, Size: 0x4]
	float BodyProtectMask;//[Offset: 0x50, Size: 0x4]
	float Body_DurabilityConsumeScale_Blocked;//[Offset: 0x54, Size: 0x4]
	float Body_DurabilityConsumeScale_Penetrated;//[Offset: 0x58, Size: 0x4]
	float Body_AntiPenetrationFactor;//[Offset: 0x5c, Size: 0x4]
	float Destructibility;//[Offset: 0x60, Size: 0x4]
	float Body_DamageScaleForPenetration;//[Offset: 0x64, Size: 0x4]
	float Body_DamageScaleForBlock;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: SGCharacterBeUsedCorpseComponent.SGActorBeUsedComponent.ActorComponent.Object
	Actor*[] BeUsedHistory;//[Offset: 0x120, Size: 0x10]
	bool bIsReadyForLoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	void SetIsReadyForLoot(bool bInReadyForLoot);// 0x3c19e3fee041

--------------------------------
Class: SGCharacterBeUsedRescueComponent.SGActorBeUsedComponent.ActorComponent.Object

--------------------------------
Class: SGCharacterBoneControlComponent.ActorComponent.Object
	CurveFloat* animationCurve;//[Offset: 0x4e8, Size: 0x8]
	CurveFloat* HeadRotationCurve;//[Offset: 0x4f8, Size: 0x8]

--------------------------------
Class: SGCharacterBurnEffectComponent.ActorComponent.Object
	bool bShowBurnEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	ParticleSystem* BurnEffectPS;//[Offset: 0xc8, Size: 0x8]
	ParticleSystem* BodyBurnEffectPS1;//[Offset: 0xd0, Size: 0x8]
	ParticleSystem* BodyBurnEffectPS2;//[Offset: 0xd8, Size: 0x8]
	ParticleSystem* BodyBurnEffectPS3;//[Offset: 0xe0, Size: 0x8]
	ParticleSystem* BodyBurnEffectPS4;//[Offset: 0xe8, Size: 0x8]
	FName SocketName;//[Offset: 0xf0, Size: 0x8]
	FName SocketBodyName1;//[Offset: 0xf8, Size: 0x8]
	FName SocketBodyName2;//[Offset: 0x100, Size: 0x8]
	FName SocketBodyName3;//[Offset: 0x108, Size: 0x8]
	FName SocketBodyName4;//[Offset: 0x110, Size: 0x8]
	ParticleSystemComponent* BurnEffectPSC;//[Offset: 0x118, Size: 0x8]
	ParticleSystemComponent* BodyBurnEffectPSC1;//[Offset: 0x120, Size: 0x8]
	ParticleSystemComponent* BodyBurnEffectPSC2;//[Offset: 0x128, Size: 0x8]
	ParticleSystemComponent* BodyBurnEffectPSC3;//[Offset: 0x130, Size: 0x8]
	ParticleSystemComponent* BodyBurnEffectPSC4;//[Offset: 0x138, Size: 0x8]
	Controller* DamageInstigator;//[Offset: 0x140, Size: 0x8]
	Actor* DamageCauser;//[Offset: 0x148, Size: 0x8]
	DamageEvent DamageEvent;//[Offset: 0x150, Size: 0x10]
	MFEnvSystem* EnvSys;//[Offset: 0x170, Size: 0x8]
	float EffectFadeOutTime;//[Offset: 0x180, Size: 0x4]
	float RepEffectFadeOutTime;//[Offset: 0x184, Size: 0x4]
	void OnTakeDamage(Controller* Instigator, float AttemptedDamage, float Damage, Vector Momentum, Actor* HitArmor, out const SGPointDamageEvent DamageEvent, Actor* Causer, DamageEventObject* DamageEventObject, bool bHitPenetrateArmor);// 0x3c1fe3fee041
	void OnRep_ShowBurnEffect();// 0x3c1ee3fee041
	void OnRep_RepEffectFadeOutTime();// 0x3c1de3fee041

--------------------------------
Class: SGCharacterCaptureAnimInstance.AnimInstance.Object
	SGCharacterCaptureAnimInstanceProxy LocalProxy;//[Offset: 0x2c0, Size: 0x7c0]

--------------------------------
Class: SGCharacterCaptureAnimInstanceProxy.AnimInstanceProxy
	Vector HandWeaponOffset_LeftHand;//[Offset: 0x75c, Size: 0xc]
	bool bIsEmptyHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 0x1]
	bool bHasCasualSeq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 0x1]
	bool bHasReargrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76a, Size: 0x1]
	float GripPoseAdjustmentAlpha;//[Offset: 0x76c, Size: 0x4]
	float CasualGripBSAplha;//[Offset: 0x770, Size: 0x4]
	float RearGripTypeAlpha;//[Offset: 0x774, Size: 0x4]
	float ForegripTypeAlpha;//[Offset: 0x778, Size: 0x4]
	float Disable_LeftHandGripPose;//[Offset: 0x77c, Size: 0x4]
	float Disable_LeftHandIK;//[Offset: 0x780, Size: 0x4]
	float Enable_AdaptiveWeaponHandGripPose;//[Offset: 0x784, Size: 0x4]
	BlendSpace1D* RearGripCasualBS;//[Offset: 0x788, Size: 0x8]
	BlendSpace1D* CasualGripBS;//[Offset: 0x790, Size: 0x8]
	BlendSpace1D* CasualGripAdjustmentBS;//[Offset: 0x798, Size: 0x8]
	AnimSequence* CasualIdleSeq;//[Offset: 0x7a0, Size: 0x8]
	SGCharacterCaptureAnimInstance* SGAnimInstance;//[Offset: 0x7a8, Size: 0x8]
	Character* OwnerCharacter;//[Offset: 0x7b0, Size: 0x8]
	SGCharacterCaptureActor* SGCaptureCharacter;//[Offset: 0x7b8, Size: 0x8]

--------------------------------
Class: SGCharacterComponentInterface.Interface.Object
	bool ShouldDisableReplicationAfterOwnerDead();// 0x3c41e3fee041
	void SetOwnerOfOwner(Actor* NewOwner);// 0x3c40e3fee041
	PlayerState* GetPlayerState();// 0x3c3fe3fee041
	PlayerController* GetPlayerController();// 0x3c3ee3fee041
	PlayerCameraManager* GetPlayerCameraManager();// 0x3c3de3fee041
	SGCharacterMovementComponent* GetMovementComponent();// 0x3c3ce3fee041
	GameState* GetGameState();// 0x3c3be3fee041
	Controller* GetController();// 0x3c3ae3fee041
	SGCharacter* GetCharacter();// 0x3c39e3fee041
	AbilitySystemComponent* GetAbilitySystemComponent();// 0x3c38e3fee041

--------------------------------
Class: SGCharacterContainerGridMgrComponent.ActorComponent.Object

--------------------------------
Class: SGCharacterContainerInventoryComponent.SGCharacterInventoryComponent.ActorComponent.Object
	class SGInventory* CorpseContainerClass;//[Offset: 0x148, Size: 0x8]
	void ServerDiscardInventoryFromCharacterNotDrop(SGInventory* TargetInv);// 0x3c74e3fee041
	void ServerDiscardInventoryFromCharacterNotDeatchAdapt(SGInventory* TargetInv);// 0x3c73e3fee041
	bool RemoveInventoryNotDeatchAdapt(SGInventory* InvToRemove);// 0x3c72e3fee041

--------------------------------
Class: SGCharacterDamageDebugComponent.ActorComponent.Object
	TextRenderComponent* TextRenderComp;//[Offset: 0xc0, Size: 0x8]
	FString TakeDamageInformation;//[Offset: 0xd0, Size: 0x10]
	DebugPhysicsBodyInfos DebugBodyInfos;//[Offset: 0xe0, Size: 0x40]
	void OnRep_DebugBodyInfos();// 0x3c76e3fee041

--------------------------------
Class: DebugPhysicsBodyInfos
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	DebugBoxBodyInfo[] BoxBodies;//[Offset: 0x8, Size: 0x10]
	DebugCapsuleBodyInfo[] CapsuleBodies;//[Offset: 0x18, Size: 0x10]
	Vector ServerLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ServerRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: DebugBoxBodyInfo
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Quat Rotation;//[Offset: 0x10, Size: 0x10]
	Vector BoxExtent;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: DebugCapsuleBodyInfo
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Quat Rotation;//[Offset: 0x10, Size: 0x10]
	float Radius;//[Offset: 0x20, Size: 0x4]
	float HalfHeight;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SGCharacterDefaultInventoryComponent.ActorComponent.Object
	float DelayTimeToGiveInventory;//[Offset: 0xc0, Size: 0x4]
	float CacheEquipInventoriesTotalValue;//[Offset: 0xc4, Size: 0x4]
	bool IsNeedDelayBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	TimerHandle TimerHandle;//[Offset: 0xd0, Size: 0x8]
	class Actor[] DefaultPickupInventoriesSoft;//[Offset: 0xd8, Size: 0x10]
	class Actor[] DefaultPickupToBagInventoriesSoft;//[Offset: 0xe8, Size: 0x10]
	void SetIsNeedDelayBeginPlay(bool isNeedDelay);// 0x3c99e3fee041
	void OnInventoryGiveComplete();// 0x3c98e3fee041
	void InventoriesBeChanged();// 0x3c97e3fee041
	float GetAllInventoriesValue();// 0x3c96e3fee041
	float GetAllEquipInventoriesValue(bool bExact);// 0x3c95e3fee041
	void DelayBeginPlay();// 0x3c94e3fee041

--------------------------------
Class: SGCharacterEnduranceAttributeSet.AttributeSet.Object
	float HeadEndurance;//[Offset: 0x34, Size: 0x4]
	float HeadEnduranceMax;//[Offset: 0x38, Size: 0x4]
	float ChestEndurance;//[Offset: 0x3c, Size: 0x4]
	float ChestEnduranceMax;//[Offset: 0x40, Size: 0x4]
	float StomachEndurance;//[Offset: 0x44, Size: 0x4]
	float StomachEnduranceMax;//[Offset: 0x48, Size: 0x4]
	float LeftArmEndurance;//[Offset: 0x4c, Size: 0x4]
	float LeftArmEnduranceMax;//[Offset: 0x50, Size: 0x4]
	float RightArmEndurance;//[Offset: 0x54, Size: 0x4]
	float RightArmEnduranceMax;//[Offset: 0x58, Size: 0x4]
	float LeftLegEndurance;//[Offset: 0x5c, Size: 0x4]
	float LeftLegEnduranceMax;//[Offset: 0x60, Size: 0x4]
	float RightLegEndurance;//[Offset: 0x64, Size: 0x4]
	float RightLegEnduranceMax;//[Offset: 0x68, Size: 0x4]
	SGCharacterEnduranceExtraCureContext ExtraCureContext;//[Offset: 0x70, Size: 0x70]
	float MinEnduraceWhenChangedByBleed;//[Offset: 0xe0, Size: 0x4]
	float MinEnduraceWhenChangedByLackDebuff;//[Offset: 0xe4, Size: 0x4]
	void OnRep_StomachEnduranceChanged();// 0x3ca0e3fee041
	void OnRep_RightLegEnduranceChanged();// 0x3c9fe3fee041
	void OnRep_RightArmEnduranceChanged();// 0x3c9ee3fee041
	void OnRep_LeftLegEnduranceChanged();// 0x3c9de3fee041
	void OnRep_LeftArmEnduranceChanged();// 0x3c9ce3fee041
	void OnRep_HeadEnduranceChanged();// 0x3c9be3fee041
	void OnRep_ChestEnduranceChanged();// 0x3c9ae3fee041

--------------------------------
Class: SGCharacterEnduranceExtraCureContext
	float Vaule;//[Offset: 0x0, Size: 0x4]
	GameplayAttribute TargetAttribute;//[Offset: 0x8, Size: 0x38]
	Actor* TargetActor;//[Offset: 0x40, Size: 0x8]
	Actor* SourceActor;//[Offset: 0x48, Size: 0x8]
	byte ModifierOp;//[Offset: 0x50, Size: 0x1]
	Actor* EffectCauser;//[Offset: 0x58, Size: 0x8]
	GameplayAbility* ContextGA;//[Offset: 0x60, Size: 0x8]
	int LastCureCount;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: SGCharacterEnduranceComponent.ActorComponent.Object
	CharacterEnduranceAbility EnduranceAbility;//[Offset: 0xc8, Size: 0x138]
	Vector2D InjuredEnduranceRange;//[Offset: 0x950, Size: 0x8]
	Vector2D InjuredHeadEnduranceRange;//[Offset: 0x958, Size: 0x8]
	Vector2D InjuredChestEnduranceRange;//[Offset: 0x960, Size: 0x8]
	float PercentThresholdShowingDying;//[Offset: 0x968, Size: 0x4]
	float HeadPercentThresholdShowingDying;//[Offset: 0x96c, Size: 0x4]
	float ChestPercentThresholdShowingDying;//[Offset: 0x970, Size: 0x4]
	bool bDrawDebugText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x974, Size: 0x1]
	float DamageToEnduranceRatio;//[Offset: 0x978, Size: 0x4]
	class SGCharacterEnduranceAttributeSet* AttributeSetClass;//[Offset: 0x980, Size: 0x8]
	enum CurrentHealthCondition;//[Offset: 0x9c0, Size: 0x1]
	float DyingPercent;//[Offset: 0x9d4, Size: 0x4]
	void TrySpreadDamageToOthersWhenOutOfEndurance(enum EnduranceType, float Damage, Actor* Instigator, const GameplayAbility* ContextGA, enum EffectType);// 0x3cc6e3fee041
	void TryRemoveDebuffAbilityWithTargetGameEffect(CharacterEnduranceDebuffAbility DebuffAbility, out const ActiveGameplayEffect ActiveGameplayEffect);// 0x3cc5e3fee041
	void TryActivateFreshWoundAbility(enum EnduranceType);// 0x3cc4e3fee041
	void TryActivateBleedAbilityByDuration(enum EnduranceType, float Duration);// 0x3cc3e3fee041
	void TryActivateBleedAbility(enum EnduranceType);// 0x3cc2e3fee041
	void TestDebuff(enum EnduranceType, FString DebuffName);// 0x3cc1e3fee041
	void SetOutOfEndurance(enum EnduranceType, Actor* Instigator);// 0x3cc0e3fee041
	void SetEnduranceMax(enum Type, float Value, Actor* Instigator);// 0x3cbfe3fee041
	void SetEndurance(enum Type, float Value, Actor* Instigator, const GameplayAbility* ContextGA, enum EffectType);// 0x3cbee3fee041
	void ServerActivateTinnitusAbility(float Intensity, float DurationTime);// 0x3cbde3fee041
	void RefacotryEnduranceAfterSpreadDamage(enum EnduranceType, enum EffectType, out float NewEnResultEndurancedurance);// 0x3cbce3fee041
	void OnTakeDamage(Controller* Causer, float AttemptedDamage, float Damage, Vector Momentum, Actor* HitArmor, out const SGPointDamageEvent DamageEvent, Actor* DamageCauser, DamageEventObject* DamageEventObject, bool bHitPenetrateArmor);// 0x3cbbe3fee041
	void OnRep_CurrentHealthConditionChanged();// 0x3cbae3fee041
	void OnRecoverFromEndurance(enum EnduranceType, Actor* Instigator);// 0x3cb9e3fee041
	void OnOutOfEndurance(enum EnduranceType, Actor* Instigator, float LastDamage);// 0x3cb8e3fee041
	void OnGameModePlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x3cb7e3fee041
	void OnExplosionSoundImpact(Character* SourceCharacter, float TinnitusIntensity, float TinnitusMaxDistance, Vector ExplosionCenter);// 0x3cb6e3fee041
	void OnEnduranceChanged(enum EnduranceType, float ChangeValue, float CurrentValue, float EnduranceMax);// 0x3cb5e3fee041
	void OnAnyGameplayEffectRemoved(out const ActiveGameplayEffect ActiveGameplayEffect);// 0x3cb4e3fee041
	bool IsDying(int DyingLevel);// 0x3cb3e3fee041
	float GetEndurancePercent(enum Type);// 0x3cb2e3fee041
	float GetEnduranceMax(enum Type);// 0x3cb1e3fee041
	float GetEndurance(enum Type);// 0x3cb0e3fee041
	FString GetDebugString();// 0x3cafe3fee041
	bool GetCureOutOfEnduranceCandidates(Character* Character, out enum[] Candidates);// 0x3caee3fee041
	bool GetCureEnduranceLossCandidates(Character* Character, out enum[] Candidates);// 0x3cade3fee041
	bool GetCureBoneBreakCandidates(Character* Character, out enum[] Candidates);// 0x3cace3fee041
	bool GetCureBleedCandidates(Character* Character, out enum[] Candidates);// 0x3cabe3fee041
	float GetAllEnduranceMax();// 0x3caae3fee041
	float GetAllEndurance();// 0x3ca9e3fee041
	void FillOutOfEnduraceStatis(enum EnduranceType, Actor* Instigator);// 0x3ca8e3fee041
	void CancelPainAbility(enum EnduranceType);// 0x3ca7e3fee041
	void CancelFreshWoundAbility(enum EnduranceType);// 0x3ca6e3fee041
	void CancelBoneBreakAbility(enum EnduranceType);// 0x3ca5e3fee041
	void CancelBleedAbility(enum EnduranceType);// 0x3ca4e3fee041
	bool CanBodyPartBeSpreadedTo(enum EnduranceType, enum EffectType);// 0x3ca3e3fee041
	void ActivateDebuff(enum EnduranceType, FString DebuffName);// 0x3ca2e3fee041
	void ActivateAbilityOnTakeDamage(enum HitEndurance, float Damage, bool bHitArmor, bool bHitPenetrateArmor, Actor* DamageCauser, out const SGPointDamageEvent DamageEvent);// 0x3ca1e3fee041

--------------------------------
Class: CharacterEnduranceAbility
	CharacterEnduranceDebuffAbility_Bleed BleedDebuffAbilitiesByChance;//[Offset: 0x0, Size: 0x30]
	CharacterEnduranceDebuffAbility PainDebuffAbilitiesByChance;//[Offset: 0x30, Size: 0x28]
	CharacterEnduranceDebuffAbility BoneBreakDebuffAbilitiesByChance;//[Offset: 0x58, Size: 0x28]
	CharacterEnduranceDebuffAbility TunnelVisonDebuffAbilitiesByChance;//[Offset: 0x80, Size: 0x28]
	CharacterEnduranceDebuffAbility FreshWoundDebuffAbilitiesByChance;//[Offset: 0xa8, Size: 0x28]
	CharacterEnduranceDebuffAbility_Tinnitus TinnitusDebuffAbilities;//[Offset: 0xd0, Size: 0x28]
	class GameplayAbility* AutoRecoverAbilityClass;//[Offset: 0xf8, Size: 0x8]
	class GameplayAbility* ForbiddenAutoRecoverByTakeDamageAbilityClass;//[Offset: 0x100, Size: 0x8]
	class GameplayAbility* InfiniteForbiddenAutoRecoverByTakeDamageAbilityClass;//[Offset: 0x108, Size: 0x8]
	class GameplayAbility* OutOfEnduranceAbilityClass;//[Offset: 0x110, Size: 0x8]
	bool bSpreadDamageToOthersWhenOutOfEndurance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	float SpreadDamageScale;//[Offset: 0x11c, Size: 0x4]
	float EffectDuration;//[Offset: 0x120, Size: 0x4]

--------------------------------
Class: CharacterEnduranceDebuffAbility_Bleed.CharacterEnduranceDebuffAbility
	float TrapTriggerChance;//[Offset: 0x24, Size: 0x4]
	float BurnTriggerChance;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: CharacterEnduranceDebuffAbility
	float ChanceToTrigger;//[Offset: 0x0, Size: 0x4]
	class GameplayAbility* DebuffAbilityClass;//[Offset: 0x8, Size: 0x8]
	CurveFloat* TriggerChanceCurve;//[Offset: 0x10, Size: 0x8]
	CurveFloat* DurationTimeCurve;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CharacterEnduranceDebuffAbility_Tinnitus.CharacterEnduranceDebuffAbility

--------------------------------
Class: SGCharacterFacialAnimInstance.AnimInstance.Object
	SGCharacterFacialAnimInstanceProxy LocalProxy;//[Offset: 0x2c0, Size: 0x790]

--------------------------------
Class: SGCharacterFacialAnimInstanceProxy.AnimInstanceProxy
	AnimSequence* FacialAnimeSeq;//[Offset: 0x760, Size: 0x8]
	float bShouldBlendMouth;//[Offset: 0x768, Size: 0x4]
	SGCharacterFacialAnimInstance* SGAnimInstance;//[Offset: 0x770, Size: 0x8]
	SGCharacter* SGCharacter;//[Offset: 0x778, Size: 0x8]
	float StartTimeOffset;//[Offset: 0x780, Size: 0x4]
	float bIsEquipMask;//[Offset: 0x784, Size: 0x4]

--------------------------------
Class: SGCharacterFlashGrenadeEffectComponent.ActorComponent.Object
	float RTWidth;//[Offset: 0xc0, Size: 0x4]
	float RTHeight;//[Offset: 0xc4, Size: 0x4]
	float FlashLightCircleFadeoutAddTime;//[Offset: 0xc8, Size: 0x4]
	float FlashFOVAngle;//[Offset: 0xcc, Size: 0x4]
	class GameplayEffect* FlashBlindClass;//[Offset: 0xd0, Size: 0x8]
	FlashData FlashData;//[Offset: 0xd8, Size: 0x18]
	void ResetFlashTime();// 0x3cfbe3fee041
	void OnRep_FlashDurationTimeChanged();// 0x3cfae3fee041
	float GetFlashOpacity();// 0x3cf9e3fee041
	float GetFlashLightCircleOpacity();// 0x3cf8e3fee041
	float GetFlashFadeoutHalfEndTime();// 0x3cf7e3fee041
	float GetFlashEffectInfluenceFactor();// 0x3cf6e3fee041
	float GetDistortionOpacity();// 0x3cf5e3fee041

--------------------------------
Class: FlashData
	float EffectInfulenceFactor;//[Offset: 0x0, Size: 0x4]
	float FlashDurationTime;//[Offset: 0x4, Size: 0x4]
	float FadeoutTime;//[Offset: 0x8, Size: 0x4]
	float FlashLightCircleFadeoutTime;//[Offset: 0xc, Size: 0x4]
	float DistortionFadeoutTime;//[Offset: 0x10, Size: 0x4]
	float TimeSeconds;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SGCharacterFoodAttributeSet.AttributeSet.Object
	float Food;//[Offset: 0x34, Size: 0x4]
	float FoodMax;//[Offset: 0x38, Size: 0x4]
	void OnRep_FoodChanged();// 0x3cfce3fee041

--------------------------------
Class: SGCharacterFoodComponent.ActorComponent.Object
	float HeavyLackInFoodThreshold;//[Offset: 0xc0, Size: 0x4]
	float MediumLackInFoodThreshold;//[Offset: 0xc4, Size: 0x4]
	float SlightLackInFoodThreshold;//[Offset: 0xc8, Size: 0x4]
	enum FoodState;//[Offset: 0xcd, Size: 0x1]
	<enum,class GameplayAbility> FoodStateConfigMap;//[Offset: 0xd0, Size: 0x50]
	class GameplayAbility* AutoReducedAbilityClass;//[Offset: 0x120, Size: 0x8]
	class SGCharacterFoodAttributeSet* AttributeSetClass;//[Offset: 0x130, Size: 0x8]
	void SetFoodMax(float Value, Actor* Instigator);// 0x3d03e3fee041
	void SetFood(float Value, Actor* Instigator);// 0x3d02e3fee041
	void OnLackInFood(bool bLackFood);// 0x3d01e3fee041
	void OnCharacterFoodChanged(out const GameplayEffectSpec EffectSpec, float FoodDelta, float FoodDelta_Unclamp, float CurrentVal, float MaxVal);// 0x3d00e3fee041
	float GetFoodMax();// 0x3cffe3fee041
	float GetFood();// 0x3cfee3fee041
	void AddFood(float Value, Actor* Instigator);// 0x3cfde3fee041

--------------------------------
Class: SGCharacterFootIKAnimInstance.AnimInstance.Object
	SGCharacterFootIKAnimInstanceProxy LocalProxy;//[Offset: 0x2c0, Size: 0x820]
	AnimInstance* MainAnimInstance;//[Offset: 0xae0, Size: 0x8]

--------------------------------
Class: SGCharacterFootIKAnimInstanceProxy.AnimInstanceProxy
	Vector IKFoot_Root_Offset;//[Offset: 0x75c, Size: 0xc]
	Rotator FootLock_L_Rotation;//[Offset: 0x768, Size: 0xc]
	Vector FootLock_L_Location;//[Offset: 0x774, Size: 0xc]
	float FootLock_L_Alpha;//[Offset: 0x780, Size: 0x4]
	Rotator FootLock_R_Rotation;//[Offset: 0x784, Size: 0xc]
	Vector FootLock_R_Location;//[Offset: 0x790, Size: 0xc]
	float FootLock_R_Alpha;//[Offset: 0x79c, Size: 0x4]
	Vector FootOffset_L_Location;//[Offset: 0x7a0, Size: 0xc]
	Rotator FootOffset_L_Rotation;//[Offset: 0x7ac, Size: 0xc]
	Vector FootOffset_R_Location;//[Offset: 0x7b8, Size: 0xc]
	Rotator FootOffset_R_Rotation;//[Offset: 0x7c4, Size: 0xc]
	Vector PelvisOffset_Location;//[Offset: 0x7d0, Size: 0xc]
	float FootIKAlpha;//[Offset: 0x7dc, Size: 0x4]
	Rotator ThighOffset_L_Rotation_WhenProne;//[Offset: 0x7e0, Size: 0xc]
	Rotator ThighOffset_R_Rotation_WhenProne;//[Offset: 0x7ec, Size: 0xc]
	bool bIsProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 0x1]
	bool bShouldUpdateFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f9, Size: 0x1]
	SGCharacterFootIKAnimInstance* SGAnimInstance;//[Offset: 0x800, Size: 0x8]
	AnimInstance* SGMainAnimInstance;//[Offset: 0x808, Size: 0x8]
	SGCharacter* SGCharacter;//[Offset: 0x810, Size: 0x8]

--------------------------------
Class: SGCharacterFOVComponent.SGCustomFOVRenderMatrixComponent.CustomRenderMatrixComponent.ActorComponent.Object
	void OnSetNewCharacterOwner(Actor* NewOwner);// 0x3d10e3fee041
	void OnEnableCustomFOV(bool bEnable);// 0x3d0fe3fee041
	void OnCharacterDieInClient(SGCharacter* DiedCharacter);// 0x3d0ee3fee041
	void OnChangeCustomFOV(float NewCustomFOV);// 0x3d0de3fee041

--------------------------------
Class: SGCharacterFreeClimbComponent.ActorComponent.Object

--------------------------------
Class: SGCharacterHandIKAnimInstance.AnimInstance.Object
	SGCharacterHandIKAnimInstanceProxy LocalProxy;//[Offset: 0x2c0, Size: 0x890]
	SGCharacterAnimInstance* MainAnimInstance;//[Offset: 0xb50, Size: 0x8]
	float LeftHandIK_CurveValue_Scaler;//[Offset: 0xb58, Size: 0x4]
	float RightHandIK_CurveValue_Scaler;//[Offset: 0xb5c, Size: 0x4]

--------------------------------
Class: SGCharacterHandIKAnimInstanceProxy.AnimInstanceProxy
	bool bShouldUpdateHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75a, Size: 0x1]
	float Enable_LeftHandIK;//[Offset: 0x75c, Size: 0x4]
	float Enable_RightHandIK;//[Offset: 0x760, Size: 0x4]
	float Enable_HandIK;//[Offset: 0x764, Size: 0x4]
	float Enable_LeftArm_Offset;//[Offset: 0x768, Size: 0x4]
	float Enable_LeftArm_Adjust_Stretch;//[Offset: 0x76c, Size: 0x4]
	Vector HandWeaponOffset_LeftHand;//[Offset: 0x788, Size: 0xc]
	Vector HandWeaponOffset_RightHand_Location;//[Offset: 0x794, Size: 0xc]
	Rotator HandWeaponOffset_RightHand_Rotation;//[Offset: 0x7a0, Size: 0xc]
	Vector LeftHandJointOffset;//[Offset: 0x7ac, Size: 0xc]
	Vector RightHandJointOffset;//[Offset: 0x7b8, Size: 0xc]
	Vector LeftArmOffset;//[Offset: 0x7c4, Size: 0xc]
	Vector RightHandOffset;//[Offset: 0x7d0, Size: 0xc]
	Vector RightArmAimOffset;//[Offset: 0x7dc, Size: 0xc]
	Vector RightUpperArmOffset_ADS;//[Offset: 0x7e8, Size: 0xc]
	Vector HandOffset_L_Location;//[Offset: 0x7f4, Size: 0xc]
	float Enable_HandOffset_L_Alpha;//[Offset: 0x800, Size: 0x4]
	Vector HandOffset_R_Location;//[Offset: 0x804, Size: 0xc]
	bool bShouldModified_IK_Hand_L;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 0x1]
	Vector ModifiedLocation_IK_Hand_L;//[Offset: 0x814, Size: 0xc]
	bool bShouldModified_IK_Hand_R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 0x1]
	Vector ModifiedLocation_IK_Hand_R;//[Offset: 0x824, Size: 0xc]
	float Enable_HandOffset_R_Alpha;//[Offset: 0x830, Size: 0x4]
	float bShouldCopyRightToGun;//[Offset: 0x834, Size: 0x4]
	Vector LeftHandParentBoneSpaceOffset;//[Offset: 0x838, Size: 0xc]
	float LeftHandParentBoneSpaceAlpha;//[Offset: 0x844, Size: 0x4]
	Vector RightHandParentBoneSpaceOffset;//[Offset: 0x848, Size: 0xc]
	float RightHandParentBoneSpaceAlpha;//[Offset: 0x854, Size: 0x4]
	bool bIsPrviewCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 0x1]
	enum WeaponStance;//[Offset: 0x859, Size: 0x1]
	bool bIsUsingItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85a, Size: 0x1]
	bool bIsRescuingTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85b, Size: 0x1]
	SGCharacterHandIKAnimInstance* SGAnimInstance;//[Offset: 0x860, Size: 0x8]
	SGCharacterAnimInstance* SGMainAnimInstance;//[Offset: 0x868, Size: 0x8]
	SGCharacter* SGCharacter;//[Offset: 0x870, Size: 0x8]
	SGWeapon* SGWeapon;//[Offset: 0x878, Size: 0x8]

--------------------------------
Class: SGCharacterHealthAttributeSet.SGActorHealthAttributeSet.AttributeSet.Object
	float DBNOHealth;//[Offset: 0x44, Size: 0x4]
	float DBNOHealthMax;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: SGCharacterHealthComponent.SGActorHealthComponent.ActorComponent.Object
	class GameplayAbility* EnteringBleedAbilityClass;//[Offset: 0xd0, Size: 0x8]
	class GameplayAbility* EnteringPainAbilityClass;//[Offset: 0xd8, Size: 0x8]
	float HealthPercentThresholdEnteringPain;//[Offset: 0xe8, Size: 0x4]
	void SetDBNOHealthMax(float Value, Actor* Instigator);// 0x3d19e3fee041
	void SetDBNOHealth(float Value, Actor* Instigator);// 0x3d18e3fee041
	void OnTakeDamage(Controller* Causer, float AttemptedDamage, float Damage, Vector Momentum, Actor* HitArmor, out const SGPointDamageEvent DamageEvent, Actor* DamageCauser, DamageEventObject* DamageEventObject, bool bHitPenetrateArmor);// 0x3d17e3fee041
	void OnHealthChanged(out const GameplayEffectSpec EffectSpec, float HealthDelta);// 0x3d16e3fee041
	float GetDBNOHealthMax();// 0x3d15e3fee041
	float GetDBNOHealth();// 0x3d14e3fee041
	void AddDBNOHealth(float Value, Actor* Instigator);// 0x3d13e3fee041

--------------------------------
Class: SGCharacterHoldBreathComponent.ActorComponent.Object
	bool bIsHoldingBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	void OnHoldingBreathChanged();// 0x3d1ae3fee041

--------------------------------
Class: SGCharacterInRoomComponent.ActorComponent.Object
	bool bDebugTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	float TraceLength;//[Offset: 0xc4, Size: 0x4]
	float TraceBeginOffset;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: SGCharacterInspectionComponent.ActorComponent.Object
	int[] RecordInspectionLootPointIDArray;//[Offset: 0xc0, Size: 0x10]
	int[] ExploreInspectionLootPointIDArray;//[Offset: 0xd0, Size: 0x10]
	void PlayerFinishGame(PlayerController* C, enum FinishType, Actor* EscapeVolume);// 0x3d52e3fee041
	void OnRep_RecordInspectionLootPointIDArray();// 0x3d51e3fee041
	void OnRep_ExploreInspectionLootPointIDArray();// 0x3d50e3fee041
	void OnPostDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x3d4fe3fee041
	void OnContainerRoughSearchEndEvent(Character* Looter, SGInventory* ContainerInventory);// 0x3d4ee3fee041

--------------------------------
Class: SGCharacterInterfaceComponent.ActorComponent.Object

--------------------------------
Class: SGCharacterInventoryDetectComponent.ActorComponent.Object
	float FindPickupMaxRadius;//[Offset: 0xc0, Size: 0x4]
	Actor*[] InventorysNearby;//[Offset: 0xc8, Size: 0x10]
	<Actor*,InteractionTriggerPosInfo> InventorysNearbyInteractInfoMap;//[Offset: 0xd8, Size: 0x50]
	bool IsHitResultAccept(HitResult HitResult);// 0x3d5de3fee041
	Actor*[] GetTotalNearInventories();// 0x3d5ce3fee041
	Actor* GetNearestInventory();// 0x3d5be3fee041
	Actor*[] GetInventorysNearby();// 0x3d5ae3fee041

--------------------------------
Class: InteractionTriggerPosInfo
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector EndPos;//[Offset: 0xc, Size: 0xc]
	FName LineTraceHitBoneName;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SGCharacterInventoryGiveComponent.ActorComponent.Object
	float PickupAnimRate;//[Offset: 0xc0, Size: 0x4]
	void ServerGiveWeaponByClass(const class SGInventory[] InventoryClasses, int InCount, enum Pos, Actor* InParentActor, int InContainerIndex, int Durability, FName SocketName, int64 InInstId, int64 TakeInPlayerGID, int InsureType, enum GiveInventoryReason);// 0x3d67e3fee041
	void ServerGiveInventoryToPlayer(SGInventory* Inventory, enum Pos, int Count, ItemGridInfo DropPosition, Actor* InParentActor, int InContainerIndex, FName SocketName, bool bInGameHud, bool bDestroyItem);// 0x3d66e3fee041
	void ServerGiveInventoryClass(class SGInventory InventoryClass, int InCount, enum Pos, Actor* InParentActor, int InContainerIndex, int Durability, FName SocketName, int64 InInstId, int64 TakeInPlayerGID, int InsureType, enum GiveInventoryReason, bool bDestroyItem);// 0x3d65e3fee041
	void GiveWeaponByClass(out const class SGInventory[] InventoryClasses, int InCount, enum Pos, Actor* InParentActor, int InContainerIndex, int Durability, FName SocketName, int64 InInstId, int64 TakeInPlayerGID, int InsureType, enum GiveInventoryReason);// 0x3d64e3fee041
	SGInventory*[] GiveWeapon(out const class SGInventory[] InventoryClasses, out const int[] InvCounts, enum GiveInventoryReason);// 0x3d63e3fee041
	bool GiveInventoryClass(class SGInventory InventoryClass, int InCount, enum Pos, Actor* InParentActor, int InContainerIndex, int Durability, FName SocketName, int64 InInstId, int64 TakeInPlayerGID, int InsureType, enum GiveInventoryReason, bool bDestroyItem);// 0x3d62e3fee041
	SGInventory*[] GiveInventoryByItemID(int64 ItemID, int Count, bool bAllowMerge, out const SGGlobalGridOccupyInfo GlobalOccupyInfo, enum GiveInventoryReason, StackableItemSourceInfo FromPlayerInfos, bool bDestroyItem);// 0x3d61e3fee041
	SGInventory*[] GiveInventoryByClassImpl(class SGInventory InventoryClass, int InCount, enum Pos, Actor* InParentActor, int InContainerIndex, int Durability, FName SocketName, int64 InInstId, int64 TakeInPlayerGID, int InsureType, enum GiveInventoryReason, StackableItemSourceInfo FromPlayerInfos, bool bDestroyItem);// 0x3d60e3fee041
	void GiveInventory(SGInventory* Inventory, enum Pos, ItemGridInfo DropPosition, int GiveCount, Actor* InParentActor, int InContainerIndex, bool IsFlagNewInv, bool bDestroyItem);// 0x3d5fe3fee041
	float GetInventoryAnimRate();// 0x3d5ee3fee041

--------------------------------
Class: SGCharacterInventorySearchComponent.ActorComponent.Object
	SGInventoryContainerSearchingComponent*[] CurSyncAutoSearchingComList;//[Offset: 0xc0, Size: 0x10]
	ContainerSearchingInfo[] SearchingContainerInfoList;//[Offset: 0xd0, Size: 0x10]
	SGInventorySearchComponent*[] DetailSearchingInvComList;//[Offset: 0xe0, Size: 0x10]
	SGInventorySearchComponent*[] ClientOld_DetailSearchingInvComList;//[Offset: 0xf0, Size: 0x10]
	float SearchSlowScaleFatigue;//[Offset: 0x104, Size: 0x4]
	float SearchSlowScaleSizePerUnit;//[Offset: 0x108, Size: 0x4]
	float SearchSlowScaleWeightPerKg;//[Offset: 0x10c, Size: 0x4]
	float RoughSearchStandardTime;//[Offset: 0x110, Size: 0x4]
	float SearchStandardTime;//[Offset: 0x114, Size: 0x4]
	Actor* CurrentLootingActor;//[Offset: 0x118, Size: 0x8]
	void ServerStartPlayerAutoSearching(SGInventory* ContainerInventory);// 0x3d86e3fee041
	void ServerSetInventoryAndBelongAdaptorsQuickSearched(SGInventory* Inventory);// 0x3d85e3fee041
	void ServerQuickSearchCorpseContainer(SGInventory* Inventory);// 0x3d84e3fee041
	void ServerQuickSearchCorpse(Character* CorpseCharacter);// 0x3d83e3fee041
	void ServerCancelPlayerAutoSearching(SGInventory* ContainerInventory);// 0x3d82e3fee041
	void RemoveCurrentDetailSearchingInv(SGInventorySearchComponent* DetailSearchingInvCom);// 0x3d81e3fee041
	void OnRep_DetailSearchingInvComList();// 0x3d80e3fee041
	void OnRep_CurrentLootingActor();// 0x3d7fe3fee041
	void OnDetailSearchInvParentActorChanged(Actor* NewParent, int NewContainerIndex);// 0x3d7ee3fee041
	void OnDetailSearchInvOwnerChanged(Actor* Owner1, Actor* Owner2);// 0x3d7de3fee041
	void CancelCurrentDetailSearching();// 0x3d7ce3fee041
	void AddCurrentDetailSearchingInv(SGInventorySearchComponent* DetailSearchingInvCom);// 0x3d7be3fee041

--------------------------------
Class: SGInventoryContainerSearchingComponent.ActorComponent.Object
	SGCharacter*[] SearchingCharacterList;//[Offset: 0xc0, Size: 0x10]
	int64[] RoughSearchedFinishedCharacterList;//[Offset: 0xd8, Size: 0x10]
	bool IsLootOpenStartSearching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	delegate OnSearchingRoleListChanged;//[Offset: 0xf0, Size: 0x10]
	void OnRep_SearchingCharacterList();// 0x46bbe3fee041
	void OnRep_RoughSearchedFinishedCharacterList();// 0x46bae3fee041
	void OnParentActorChanged(Actor* NewParent, int NewContainerIndex);// 0x46b9e3fee041
	void OnOwnerChanged(Actor* Owner1, Actor* Owner2);// 0x46b8e3fee041
	bool CheckIsSearchingByAnyone();// 0x46b7e3fee041
	bool CheckIsRoughSearched(SGCharacter* Character);// 0x46b6e3fee041
	bool CheckIsNeedSearch();// 0x46b5e3fee041
	bool CheckIsInAutoSearching();// 0x46b4e3fee041
	void CancelPlayerAutoSearching();// 0x46b3e3fee041

--------------------------------
Class: ContainerSearchingInfo
	SGInventoryContainerSearchingComponent* ContainerSearchingCom;//[Offset: 0x0, Size: 0x8]
	bool IsPendingStartAutoSearch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool IsInAutoSearching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	float RoughSearchFinishTime;//[Offset: 0xc, Size: 0x4]
	SGInventorySearchComponent* CurAutoSearchingInventorySearchCom;//[Offset: 0x10, Size: 0x8]
	float DetailSearchFinishTime;//[Offset: 0x18, Size: 0x4]
	int64 BeginSeachTimeStamp;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: SGInventorySearchComponent.ActorComponent.Object
	int64[] SearchFinishedCharacterList;//[Offset: 0xc8, Size: 0x10]
	bool IsSearched_LocalClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	bool IsInSearching_LocalClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	TimerHandle WaitGIDTimerHandle;//[Offset: 0xe0, Size: 0x8]
	void OnWaitGIDTimerHandle();// 0x4748e3fee041
	void OnRep_SearchFinishedCharacterList();// 0x4747e3fee041
	void OnReceivedDisassembledEvent(SGInventory* Inv);// 0x4746e3fee041
	void OnReceivedAssembledEvent(SGInventory* Inv);// 0x4745e3fee041
	int64 GetPlayerCharacterGID(SGCharacter* Character);// 0x4744e3fee041
	void CheckSearchFinishedCharacterList();// 0x4743e3fee041
	bool CheckIsSearched();// 0x4742e3fee041
	bool CheckIsInSearching();// 0x4741e3fee041
	bool CheckIsInSearchFinishedListByGID(int64 PlayerGID);// 0x4740e3fee041
	bool CheckIsInSearchFinishedList(SGCharacter* Character);// 0x473fe3fee041

--------------------------------
Class: SGCharacterInvInteractFlagComponent.ActorComponent.Object
	SGInventory*[] IsNewFlagInvList;//[Offset: 0xc0, Size: 0x10]
	SGInventory*[] LastIsNewFlagInvList;//[Offset: 0xd0, Size: 0x10]
	InventoryInteractionRepInfo CurrentInteractingInfo;//[Offset: 0xe0, Size: 0x18]
	SGInventory* InventoryJustReplaced;//[Offset: 0xf8, Size: 0x8]
	SGWishListItemInfo[] PlayerWishList;//[Offset: 0x100, Size: 0x10]
	<int> PlayerWishListSellItemSet;//[Offset: 0x110, Size: 0x50]
	<int> PlayerWishListRecipeItemSet;//[Offset: 0x160, Size: 0x50]
	int[] NewInspectedItemIDs;//[Offset: 0x1b0, Size: 0x10]
	TimerHandle WaitGIDTimerHandle;//[Offset: 0x210, Size: 0x8]
	void SetNewInspectedItemID(int NewInspectedItemID);// 0x3d97e3fee041
	void SetNewInspectedInventory(SGInventory* InInventory);// 0x3d96e3fee041
	void SetItemInspectDisabled(bool bNewDisable);// 0x3d95e3fee041
	void SetChangeCurrentInteractingTypeResult(bool bIsSuccess);// 0x3d94e3fee041
	void ServerSetNewInspectedInventory(SGInventory* InInventory);// 0x3d93e3fee041
	void ServerSetInventoryJustReplaced(SGInventory* Inventory);// 0x3d92e3fee041
	void ServerSetInventoryIsNewInPlayerUI(SGInventory* Inventory, bool bIsNewInPlayerUI, bool bIsClearCached);// 0x3d91e3fee041
	void OnWaitGIDTimerHandle();// 0x3d90e3fee041
	void OnRep_PlayerWishList();// 0x3d8fe3fee041
	void OnRep_NewInspectedItemIDs();// 0x3d8ee3fee041
	void OnRep_IsNewFlagInvList();// 0x3d8de3fee041
	void OnRep_InventoryJustReplaced();// 0x3d8ce3fee041
	void OnRep_CurrentInteractingInfo();// 0x3d8be3fee041
	void OnCharacterRemoveInventoryEvent(Character* Character, SGInventory* Inventory);// 0x3d8ae3fee041
	void OnCharacterAddInventoryEvent(Character* Character, SGInventory* Inventory);// 0x3d89e3fee041
	void ClientChangeCurrentInteractingTypeResult(bool bIsSuccess);// 0x3d88e3fee041
	bool CheckItemIDIsInspected(int InItemID);// 0x3d87e3fee041

--------------------------------
Class: InventoryInteractionRepInfo
	enum InvInteractType;//[Offset: 0x0, Size: 0x1]
	SGInventory*[] InteractInvList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SGWishListItemInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int HaveNum;//[Offset: 0x4, Size: 0x4]
	int RequireNum;//[Offset: 0x8, Size: 0x4]
	int CurrentOwnedNum;//[Offset: 0xc, Size: 0x4]
	int SellItemID;//[Offset: 0x10, Size: 0x4]
	int LastReduceFromFulfillFrame;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SGCharacterLagCompensationComponent.ActorComponent.Object

--------------------------------
Class: SGCharacterLeanSideComponent.ActorComponent.Object

--------------------------------
Class: SGCharacterLocomotionAnimInstance.AnimInstance.Object
	SGCharacterLocomotionAnimInstanceProxy LocalProxy;//[Offset: 0x2c0, Size: 0xa70]
	SGCharacterAnimInstance* MainAnimInstance;//[Offset: 0xd30, Size: 0x8]
	class SGCharacterAnimationSets* CharacterAnimationSetsClass;//[Offset: 0xd38, Size: 0x8]
	class SGPerWeaponAnimationSets* PerWeaponAnimationSetsClass;//[Offset: 0xd40, Size: 0x8]
	class SGPerWeaponAnimationSets* PerWeaponAnimationSetsClass_Left;//[Offset: 0xd48, Size: 0x8]
	SGCharacterLocomotionAnimInstanceProxy GetProxy();// 0x3dbbe3fee041

--------------------------------
Class: SGCharacterLocomotionAnimInstanceProxy.AnimInstanceProxy
	AnimSequence* Stand_Idle;//[Offset: 0x760, Size: 0x8]
	AnimSequence* Idle_FixUpRightHand;//[Offset: 0x768, Size: 0x8]
	BlendSpaceBase* Stand_Locomotion;//[Offset: 0x770, Size: 0x8]
	enum Stand_Locomotion_Type;//[Offset: 0x778, Size: 0x1]
	AnimSequence* Stand_Locomotion_HandSway;//[Offset: 0x780, Size: 0x8]
	BlendSpaceBase* Stand_WalkLocomotion;//[Offset: 0x788, Size: 0x8]
	BlendSpaceBase* Stand_RunLocomotion;//[Offset: 0x790, Size: 0x8]
	BlendSpaceBase* Stand_SprintLocomotion;//[Offset: 0x798, Size: 0x8]
	AnimSequence* Crouch_Idle;//[Offset: 0x7a0, Size: 0x8]
	BlendSpaceBase* Crouch_Locomotion;//[Offset: 0x7a8, Size: 0x8]
	BlendSpaceBase* Crouch_WalkLocomotion;//[Offset: 0x7b0, Size: 0x8]
	BlendSpaceBase* Crouch_RunLocomotion;//[Offset: 0x7b8, Size: 0x8]
	BlendSpaceBase* Crouch_SprintLocomotion;//[Offset: 0x7c0, Size: 0x8]
	AnimSequence* Prone_Idle;//[Offset: 0x7c8, Size: 0x8]
	BlendSpaceBase* Prone_Locomotion;//[Offset: 0x7d0, Size: 0x8]
	BlendSpaceBase* Prone_WalkLocomotion;//[Offset: 0x7d8, Size: 0x8]
	BlendSpaceBase* Prone_RunLocomotion;//[Offset: 0x7e0, Size: 0x8]
	BlendSpaceBase* Prone_SprintLocomotion;//[Offset: 0x7e8, Size: 0x8]
	AnimSequence* DBNO_Idle;//[Offset: 0x7f0, Size: 0x8]
	BlendSpaceBase* DBNO_Locomotion;//[Offset: 0x7f8, Size: 0x8]
	BlendSpaceBase* DBNO_WalkLocomotion;//[Offset: 0x800, Size: 0x8]
	BlendSpaceBase* DBNO_RunLocomotion;//[Offset: 0x808, Size: 0x8]
	BlendSpaceBase* DBNO_SprintLocomotion;//[Offset: 0x810, Size: 0x8]
	AnimSequence* Current_Idle;//[Offset: 0x818, Size: 0x8]
	BlendSpaceBase* TransitionAnimationSet;//[Offset: 0x820, Size: 0x8]
	AnimSequence* StandToCrouch;//[Offset: 0x828, Size: 0x8]
	AnimSequence* StandToProne;//[Offset: 0x830, Size: 0x8]
	AnimSequence* SprintToProne;//[Offset: 0x838, Size: 0x8]
	AnimSequence* CrouchToStand;//[Offset: 0x840, Size: 0x8]
	AnimSequence* CrouchToProne;//[Offset: 0x848, Size: 0x8]
	AnimSequence* ProneToStand;//[Offset: 0x850, Size: 0x8]
	AnimSequence* ProneToCrouch;//[Offset: 0x858, Size: 0x8]
	AnimSequence* StandToDBNO;//[Offset: 0x860, Size: 0x8]
	AnimSequence* SprintToDBNO;//[Offset: 0x868, Size: 0x8]
	AnimSequence* CrouchToDBNO;//[Offset: 0x870, Size: 0x8]
	AnimSequence* ProneToDBNO;//[Offset: 0x878, Size: 0x8]
	AnimSequence* DBNOToCrouch;//[Offset: 0x880, Size: 0x8]
	AnimSequence* DBNOToProne;//[Offset: 0x888, Size: 0x8]
	BlendSpaceBase* StandToSprint;//[Offset: 0x890, Size: 0x8]
	BlendSpaceBase* SprintToStand;//[Offset: 0x898, Size: 0x8]
	BlendSpaceBase* SprintToCrouch;//[Offset: 0x8a0, Size: 0x8]
	AnimSequence* JumpStart;//[Offset: 0x8a8, Size: 0x8]
	AnimSequence* JumpLoop;//[Offset: 0x8b0, Size: 0x8]
	AnimSequence* JumpEnd;//[Offset: 0x8b8, Size: 0x8]
	BlendSpaceBase* RunJumpStart;//[Offset: 0x8c0, Size: 0x8]
	BlendSpaceBase* RunJumpLoop;//[Offset: 0x8c8, Size: 0x8]
	BlendSpaceBase* RunJumpEnd;//[Offset: 0x8d0, Size: 0x8]
	AnimSequenceBase* DeathAnim;//[Offset: 0x8d8, Size: 0x8]
	enum Stance;//[Offset: 0x8e0, Size: 0x1]
	enum WeaponStance;//[Offset: 0x8e1, Size: 0x1]
	bool bIsSprintingLastTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e2, Size: 0x1]
	bool bIsViewTargetLocomotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e3, Size: 0x1]
	bool bIs1P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e4, Size: 0x1]
	float IdleBreathAlpha;//[Offset: 0x8e8, Size: 0x4]
	float bIs1PAiming;//[Offset: 0x8ec, Size: 0x4]
	bool bLastLocationChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 0x1]
	bool bIsAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f1, Size: 0x1]
	bool bIsScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f2, Size: 0x1]
	bool bIsSprintingLastTime_3P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f3, Size: 0x1]
	bool bIsCrouchAndNotDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f4, Size: 0x1]
	bool bIsProneAndNotDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f5, Size: 0x1]
	bool bIsStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f6, Size: 0x1]
	bool bIsCasual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f7, Size: 0x1]
	bool bIsCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 0x1]
	bool bIsProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f9, Size: 0x1]
	bool bIsDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8fa, Size: 0x1]
	float PronePlayRate;//[Offset: 0x8fc, Size: 0x4]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x900, Size: 0x1]
	bool bIsMovingForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x901, Size: 0x1]
	bool bIsMovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x902, Size: 0x1]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x903, Size: 0x1]
	float MovementStance;//[Offset: 0x904, Size: 0x4]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x908, Size: 0x1]
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x909, Size: 0x1]
	bool bIsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90a, Size: 0x1]
	float MovementPlayRate;//[Offset: 0x90c, Size: 0x4]
	float MovementStartPosition;//[Offset: 0x910, Size: 0x4]
	float MovementSpeedWarping;//[Offset: 0x914, Size: 0x4]
	float DirectionBeforStop;//[Offset: 0x918, Size: 0x4]
	bool bIsNotMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91c, Size: 0x1]
	bool bIsNotSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91d, Size: 0x1]
	bool bIsNotInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91e, Size: 0x1]
	bool bEnableSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91f, Size: 0x1]
	float MovingDirection;//[Offset: 0x920, Size: 0x4]
	float MovingDirectionWithOffset;//[Offset: 0x924, Size: 0x4]
	float MovingDirectionClamped;//[Offset: 0x928, Size: 0x4]
	float MovingDirectionCompensation;//[Offset: 0x92c, Size: 0x4]
	float MovingDirectionOrientationWarpCopyBoneAlpha;//[Offset: 0x930, Size: 0x4]
	AnimSequence* TurnInPlaceAnimationSequence;//[Offset: 0x938, Size: 0x8]
	float TurnInPlaceAnimationTime;//[Offset: 0x940, Size: 0x4]
	float RootBoneRotationYaw;//[Offset: 0x944, Size: 0x4]
	float NegRootBoneRotationYaw;//[Offset: 0x948, Size: 0x4]
	float TurnYawWeight;//[Offset: 0x94c, Size: 0x4]
	enum TurnInPlaceState;//[Offset: 0x950, Size: 0x1]
	enum RootYawOffsetMode;//[Offset: 0x951, Size: 0x1]
	bool bShouldTurnInIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x952, Size: 0x1]
	bool bShouldTurnInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x953, Size: 0x1]
	bool bShouldTurnInPlaceRecvoery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x954, Size: 0x1]
	SGCharacterLocomotionAnimInstance* SGAnimInstance;//[Offset: 0x958, Size: 0x8]
	SGCharacterAnimInstance* SGMainAnimInstance;//[Offset: 0x960, Size: 0x8]
	SGCharacter* SGCharacter;//[Offset: 0x968, Size: 0x8]
	SGWeapon* SGWeapon;//[Offset: 0x970, Size: 0x8]
	bool bIsWeaponChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x978, Size: 0x1]
	bool bHasTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x979, Size: 0x1]
	float TransitionType;//[Offset: 0x97c, Size: 0x4]
	bool bHasAnimStanceTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x980, Size: 0x1]
	float AnimStanceTransitionType;//[Offset: 0x984, Size: 0x4]
	float SprintTransitionOutPlayRate;//[Offset: 0x988, Size: 0x4]
	SkeletalMeshComponent* CopyPoseFrom;//[Offset: 0x990, Size: 0x8]
	float FixedMovingDirection;//[Offset: 0x998, Size: 0x4]
	float FixedMovingDirectionWithOffset;//[Offset: 0x99c, Size: 0x4]
	BlendSpaceBase* Stand_MovingStartBS;//[Offset: 0x9a0, Size: 0x8]
	BlendSpaceBase* Crouch_MovingStartBS;//[Offset: 0x9a8, Size: 0x8]
	BlendSpaceBase* Stand_MovingStopBS;//[Offset: 0x9b0, Size: 0x8]
	BlendSpaceBase* Crouch_MovingStopBS;//[Offset: 0x9b8, Size: 0x8]
	BlendSpaceBase* Stand_MovingPivotBS;//[Offset: 0x9c0, Size: 0x8]
	BlendSpaceBase* Crouch_MovingPivotBS;//[Offset: 0x9c8, Size: 0x8]
	AnimSequenceBase* MovingStartAnimSeq;//[Offset: 0x9d0, Size: 0x8]
	AnimSequenceBase* MovingStopAnimSeq;//[Offset: 0x9d8, Size: 0x8]
	bool bShouldMovingStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1]
	bool bShouldJumpToMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e1, Size: 0x1]
	bool bShouldMovingStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e2, Size: 0x1]
	bool bShouldJumpToIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e3, Size: 0x1]
	bool bShouldJumpToStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e4, Size: 0x1]
	bool bPivot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e5, Size: 0x1]
	bool bPostPivot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e6, Size: 0x1]
	float AnimSeqMovingStartTime;//[Offset: 0x9e8, Size: 0x4]
	float MovingStartNormalizeTime;//[Offset: 0x9ec, Size: 0x4]
	float AnimSeqMovingStopTime;//[Offset: 0x9f0, Size: 0x4]
	float MovingStopNormalizeTime;//[Offset: 0x9f4, Size: 0x4]
	float MovingStopDirection;//[Offset: 0x9f8, Size: 0x4]
	float MovingPivotNormalizeTime;//[Offset: 0x9fc, Size: 0x4]
	float MovingPivotDirection;//[Offset: 0xa00, Size: 0x4]
	float MovingStartNormalizeSpeed;//[Offset: 0xa04, Size: 0x4]
	float MovingStopNormalizeSpeed;//[Offset: 0xa08, Size: 0x4]
	bool bMovingStartInvalid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0c, Size: 0x1]
	bool bMovingStopInvalid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0d, Size: 0x1]
	SGCharacterAnimationSetsPerCharacterSex* CurrentCharacterAnimationSetsPerCharacterSex;//[Offset: 0xa48, Size: 0x8]
	class SGPerWeaponAnimationSets* CurrentPerWeaponAnimationSetsClass;//[Offset: 0xa50, Size: 0x8]
	class SGPerWeaponAnimationSets* CurrentPerWeaponAnimationSetsClass_Left;//[Offset: 0xa58, Size: 0x8]
	enum FromMovementStance;//[Offset: 0xa60, Size: 0x1]
	enum ToMovementStance;//[Offset: 0xa61, Size: 0x1]
	enum FromAnimStance;//[Offset: 0xa62, Size: 0x1]
	enum ToAnimStance;//[Offset: 0xa63, Size: 0x1]

--------------------------------
Class: SGCharacterMoistureAttributeSet.AttributeSet.Object
	float Moisture;//[Offset: 0x34, Size: 0x4]
	float MoistureMax;//[Offset: 0x38, Size: 0x4]
	void OnRep_MoistureChanged();// 0x3dcce3fee041

--------------------------------
Class: SGCharacterMoistureComponent.ActorComponent.Object
	class GameplayAbility* LackInMoistureAbilityClass;//[Offset: 0xc0, Size: 0x8]
	class GameplayAbility* AutoReducedAbilityClass;//[Offset: 0xd0, Size: 0x8]
	class SGCharacterMoistureAttributeSet* AttributeSetClass;//[Offset: 0xe0, Size: 0x8]
	void SetMoistureMax(float Value, Actor* Instigator);// 0x3dd2e3fee041
	void SetMoisture(float Value, Actor* Instigator);// 0x3dd1e3fee041
	void OnLackInMoisture(bool bLackMoisture);// 0x3dd0e3fee041
	float GetMoistureMax();// 0x3dcfe3fee041
	float GetMoisture();// 0x3dcee3fee041
	void AddMoisture(float Value, Actor* Instigator);// 0x3dcde3fee041

--------------------------------
Class: SGCharacterMovementWalkComponent.ActorComponent.Object

--------------------------------
Class: SGCharacterOutlineEffectComponent.ActorComponent.Object
	byte MyCustomStencilValue;//[Offset: 0xc0, Size: 0x1]
	byte TeammateCustomStencilValue;//[Offset: 0xc1, Size: 0x1]
	byte EnemyCustomStencilValue;//[Offset: 0xc2, Size: 0x1]
	void SetCustomStencilValue(byte CustomStencilValue);// 0x3e34e3fee041
	byte GetCustomStencilValue(Character* CheckCharacter);// 0x3e33e3fee041

--------------------------------
Class: SGCharacterPerspectiveComponent.ActorComponent.Object
	MeshComponent*[] SkeletalMeshArray;//[Offset: 0xb8, Size: 0x10]
	byte TargetDepth;//[Offset: 0xc8, Size: 0x1]
	bool bTargetRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	bool bIsVailCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]
	byte DefaultTeamDepth;//[Offset: 0xd8, Size: 0x1]
	byte DefaultEnemyDepth;//[Offset: 0xd9, Size: 0x1]
	byte DefaultAIDepth;//[Offset: 0xda, Size: 0x1]
	float VailDistance;//[Offset: 0xdc, Size: 0x4]
	void UpdateMeshComponentArray();// 0x3e41e3fee041
	void OnWeaponListChange();// 0x3e40e3fee041
	void OnStartSpectating(SGCharacter* BeSpectatedPawn);// 0x3e3fe3fee041
	void OnSpectatingStop(SGCharacter* BeSpectatedPawn);// 0x3e3ee3fee041
	void OnShowMergedAvatar(SkeletalMeshComponent* MergedMeshComp, bool bShow);// 0x3e3de3fee041
	void OnRefreshCharacterCustomDepthPass(Character* ViewTarget);// 0x3e3ce3fee041
	void OnPostDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x3e3be3fee041
	void OnOBSpectateStateChange(enum OBSpectateState);// 0x3e3ae3fee041
	void OnGameFlowStateChanged(FName NewState, FName OldState);// 0x3e39e3fee041
	void OnCharacterAvatarMeshLoaded(MeshComponent* LoadedMeshComp);// 0x3e38e3fee041
	void OnChangePerspectiveState(bool State);// 0x3e37e3fee041
	void DecideDisplayPerspective();// 0x3e36e3fee041
	void ChangeCharacterCustomDepth(bool bRenderCustomDepth, int CustomDepthValue, bool bRecord);// 0x3e35e3fee041

--------------------------------
Class: SGCharacterPreviewAnimInstance.AnimInstance.Object
	SGCharacterPreviewAnimInstanceProxy LocalProxy;//[Offset: 0x2c0, Size: 0x8c0]

--------------------------------
Class: SGCharacterPreviewAnimInstanceProxy.AnimInstanceProxy
	bool bShouldUseFPPBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75a, Size: 0x1]
	bool bHasIdleSeq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75b, Size: 0x1]
	AnimSequence* IdleSeq;//[Offset: 0x760, Size: 0x8]
	AnimSequence* IdleBreathAdditiveSeq;//[Offset: 0x768, Size: 0x8]
	bool bHasCasualIdleSeq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 0x1]
	AnimSequence* CasualIdleSeq;//[Offset: 0x778, Size: 0x8]
	AnimSequence* DTCustomizeAnimeSeq;//[Offset: 0x780, Size: 0x8]
	AnimSequence* DefaultDTCustomAnimSeq;//[Offset: 0x788, Size: 0x8]
	float StartTimeOffset;//[Offset: 0x790, Size: 0x4]
	float WeaponHandgripType;//[Offset: 0x794, Size: 0x4]
	float Enable_AdaptiveWeaponHandGripPose;//[Offset: 0x798, Size: 0x4]
	float Enable_LeftHandGripPose;//[Offset: 0x79c, Size: 0x4]
	float Enable_BlendLeftHandGrip;//[Offset: 0x7a0, Size: 0x4]
	float Enable_BlendLeftHandGrip_FPGrip;//[Offset: 0x7a4, Size: 0x4]
	float Enable_Breath_Additive_FP;//[Offset: 0x7a8, Size: 0x4]
	SGWeapon* SGWeapon;//[Offset: 0x7b0, Size: 0x8]
	bool bIsWeaponChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 0x1]
	enum WeaponStance;//[Offset: 0x7b9, Size: 0x1]
	bool bLockChangeAnimationSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ba, Size: 0x1]
	Vector HandWeaponOffset_LeftHand;//[Offset: 0x7bc, Size: 0xc]
	Vector HandWeaponOffset_RightHand_Location;//[Offset: 0x7c8, Size: 0xc]
	Rotator HandWeaponOffset_RightHand_Rotation;//[Offset: 0x7d4, Size: 0xc]
	Vector HandOffset_L_Location;//[Offset: 0x7e0, Size: 0xc]
	float Enable_HandOffset_L_Alpha;//[Offset: 0x7ec, Size: 0x4]
	Vector HandOffset_R_Location;//[Offset: 0x7f0, Size: 0xc]
	Vector HandOffset_R_Trigger;//[Offset: 0x7fc, Size: 0xc]
	float Enable_HandOffset_R_Alpha;//[Offset: 0x808, Size: 0x4]
	Vector ForeGripOffset;//[Offset: 0x80c, Size: 0xc]
	float WeaponReargripType;//[Offset: 0x818, Size: 0x4]
	BlendSpace1D* RearGripIdleBS;//[Offset: 0x820, Size: 0x8]
	BlendSpace1D* CasualRearGripIdleBS;//[Offset: 0x828, Size: 0x8]
	float Enable_RightHandGripPose;//[Offset: 0x830, Size: 0x4]
	bool bHasForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x834, Size: 0x1]
	float WeaponForegripType;//[Offset: 0x838, Size: 0x4]
	float GripPoseAdjustmentAlpha;//[Offset: 0x83c, Size: 0x4]
	BlendSpace1D* CasualGripAdjustmentBS;//[Offset: 0x840, Size: 0x8]
	BlendSpace1D* AdjustGripIdleBS;//[Offset: 0x848, Size: 0x8]
	BlendSpace1D* ForeGripBS;//[Offset: 0x850, Size: 0x8]
	BlendSpace1D* CasualGripIdleBS;//[Offset: 0x858, Size: 0x8]
	BlendSpace1D* GripIdleBS;//[Offset: 0x860, Size: 0x8]
	bool bHasReargrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x868, Size: 0x1]
	BlendSpace1D* LFingerAdaptiveBS;//[Offset: 0x870, Size: 0x8]
	bool bEnableLFingerAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x878, Size: 0x1]
	float LFingerAdaptiveAlpha;//[Offset: 0x87c, Size: 0x4]
	float Enable_AdaptiveWeaponTriggerPointAlpha;//[Offset: 0x880, Size: 0x4]
	float Enable_RightHandCasualGripPose;//[Offset: 0x884, Size: 0x4]
	float DTAnimSequenceScaleRate;//[Offset: 0x88c, Size: 0x4]
	enum CharacterSex;//[Offset: 0x890, Size: 0x1]
	bool bIsMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x891, Size: 0x1]
	SGCharacterPreviewAnimInstance* SGAnimInstance;//[Offset: 0x898, Size: 0x8]
	SGCharacter* SGCharacter;//[Offset: 0x8a0, Size: 0x8]
	SGCharacterPreviewComponent* CachedPreviewComponent;//[Offset: 0x8a8, Size: 0x8]
	bool bPreviewCaptureCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b1, Size: 0x1]
	bool bIsCasual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b2, Size: 0x1]
	bool bIs1P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b3, Size: 0x1]

--------------------------------
Class: SGCharacterProgressManagerComponent.ActorComponent.Object
	SGCharacterProgressAbility_FillMagazineExtra FillMagazineAbilityExtra;//[Offset: 0xc0, Size: 0x20]
	SGCharacterProgressAbility_ChangeMagazine ChangeMagazineAbility;//[Offset: 0xe0, Size: 0x20]
	SGCharacterProgressAbility_SetupC4 SetupC4Ability;//[Offset: 0x100, Size: 0x38]

--------------------------------
Class: SGCharacterProgressAbility_FillMagazineExtra.SGCharacterProgressAbility
	Actor* CachedTargetContainer;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SGCharacterProgressAbility
	class GameplayAbility* AbilityClass;//[Offset: 0x0, Size: 0x8]
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x8, Size: 0x4]
	Character* Owner;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SGCharacterProgressAbility_ChangeMagazine.SGCharacterProgressAbility
	Actor* CachedFillInventory;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SGCharacterProgressAbility_SetupC4.SGCharacterProgressAbility
	Actor* CachedFillSource;//[Offset: 0x18, Size: 0x8]
	float CachedUseTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SGCharacterQTEBase.ActorComponent.Object
	enum QTEType;//[Offset: 0xb8, Size: 0x1]
	enum CurrentStep;//[Offset: 0xb9, Size: 0x1]
	SGCharacterQTEManageComponent* QTEManager;//[Offset: 0xc0, Size: 0x8]
	void UpdateQTEState(float DeltaTime);// 0x3e51e3fee041
	void StartQTE();// 0x3e50e3fee041
	void OnQTEStart();// 0x3e4fe3fee041
	void OnQTEInterrupt();// 0x3e4ee3fee041
	void OnQTEEnd();// 0x3e4de3fee041
	bool CheckQTEPreCondition(float DeltaTime, EnvInfo EnvInfo);// 0x3e4ce3fee041
	void BreakQTE();// 0x3e4be3fee041

--------------------------------
Class: EnvInfo
	Actor*[] ActorsNearBy;//[Offset: 0x0, Size: 0x10]
	float DetectRadius;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SGCharacterQTEManageComponent.ActorComponent.Object
	class SGCharacterQTEBase[] QTEList;//[Offset: 0xc0, Size: 0x10]
	float CheckTargetRadius;//[Offset: 0xd0, Size: 0x4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	byte TraceChannel;//[Offset: 0xd5, Size: 0x1]
	SGCharacterQTEBase*[] QTEInstList;//[Offset: 0xd8, Size: 0x10]
	SGCharacterQTEBase* BestPlayQTE;//[Offset: 0xe8, Size: 0x8]
	bool CanStartQTE();// 0x3e52e3fee041

--------------------------------
Class: SGCharacterQTECooperateBase.SGCharacterQTEBase.ActorComponent.Object
	CooperateQTECharacterInfo SponsorInfo;//[Offset: 0xc8, Size: 0x10]
	CooperateQTECharacterInfo[] TargetsInfo;//[Offset: 0xd8, Size: 0x10]
	CooperateQTECharacterInfo MineCharacterInfo;//[Offset: 0xe8, Size: 0x10]

--------------------------------
Class: CooperateQTECharacterInfo
	Character* Character;//[Offset: 0x0, Size: 0x8]
	AnimMontage* TargetAnimMontage;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SGCharacterQTECooperateAttack.SGCharacterQTECooperateBase.SGCharacterQTEBase.ActorComponent.Object
	float ToTargetYawMin;//[Offset: 0xf8, Size: 0x4]
	float ToTargetYawMax;//[Offset: 0xfc, Size: 0x4]
	float ToTargetPitchMin;//[Offset: 0x100, Size: 0x4]
	float ToTargetPitchMax;//[Offset: 0x104, Size: 0x4]
	float TriggerRelativeFaceDirection;//[Offset: 0x108, Size: 0x4]
	float TriggerMaxDistance;//[Offset: 0x10c, Size: 0x4]
	float TriggerMinDistance;//[Offset: 0x110, Size: 0x4]
	Transform StartAttackRelativeTransform;//[Offset: 0x120, Size: 0x30]
	float ToStartLocationSpeed;//[Offset: 0x150, Size: 0x4]
	float ToStartRotationSpeed;//[Offset: 0x154, Size: 0x4]
	float ArriveStartPointDist;//[Offset: 0x158, Size: 0x4]
	float DamageValue;//[Offset: 0x15c, Size: 0x4]
	Vector StartAttackWorldLocation;//[Offset: 0x160, Size: 0xc]

--------------------------------
Class: SGCharacterRushSlideComponent.ActorComponent.Object
	AnimMontage* SlideToCrouchAnim;//[Offset: 0xc0, Size: 0x8]
	FName ForwardSection;//[Offset: 0xc8, Size: 0x8]
	FName RightForwardSection;//[Offset: 0xd0, Size: 0x8]
	FName LeftForwardSection;//[Offset: 0xd8, Size: 0x8]
	void SlideToCrouch();// 0x3e5be3fee041

--------------------------------
Class: SGCharacterSearchComponent.ActorComponent.Object
	bool IsSearchEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	float SearchSpeedMin;//[Offset: 0xc4, Size: 0x4]
	float SearchDistanceMax;//[Offset: 0xc8, Size: 0x4]
	float SearchEnergyMax;//[Offset: 0xcc, Size: 0x4]
	float ReduceSearchEnergySpeed;//[Offset: 0xd0, Size: 0x4]
	float RecoverSearchEnergySpeed;//[Offset: 0xd4, Size: 0x4]
	bool IsCouldStartSearch();// 0x3e5ee3fee041
	float GetUseSkillProgress();// 0x3e5de3fee041
	float GetCDProgress();// 0x3e5ce3fee041

--------------------------------
Class: SGCharacterShadowAnimInstance.AnimInstance.Object
	SGCharacterShadowAnimInstanceProxy LocalProxy;//[Offset: 0x2c0, Size: 0x790]
	SGCharacterShadowAnimInstanceProxy GetProxy();// 0x3e5fe3fee041

--------------------------------
Class: SGCharacterShadowAnimInstanceProxy.AnimInstanceProxy
	SGCharacterCastShadowComponent* CachedCastShadowComponent;//[Offset: 0x760, Size: 0x8]
	Rotator AORotationWithWeaponSway_OnlyYaw;//[Offset: 0x768, Size: 0xc]
	Rotator AORotationWithWeaponSway_OnlyPitch;//[Offset: 0x774, Size: 0xc]
	float Enable_AO_1P;//[Offset: 0x780, Size: 0x4]

--------------------------------
Class: SGCharacterSignificanceComponent.ActorComponent.Object
	bool bEverEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	FName SignificanceManagerTag;//[Offset: 0xc4, Size: 0x8]
	float NonRenderedHighSignificance;//[Offset: 0xcc, Size: 0x4]
	float NonRenderedLowSignificance;//[Offset: 0xd0, Size: 0x4]
	float NonRenderedLowSignificanceDistance;//[Offset: 0xd4, Size: 0x4]
	float TreatAsNonRenderedLowSignificanceForDeadTime;//[Offset: 0xd8, Size: 0x4]
	float TreatAsNonRenderedHighSignificanceUnderLevel;//[Offset: 0xdc, Size: 0x4]
	bool bUseLoadBalance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	float[] LoadBalanceBudgets;//[Offset: 0xe8, Size: 0x10]
	float MaxSignificanceDemoteValueForLoadBalance;//[Offset: 0xf8, Size: 0x4]
	float CharacterMovementSignificanceBias;//[Offset: 0xfc, Size: 0x4]
	float HighSignificanceMovingVelocity;//[Offset: 0x100, Size: 0x4]
	float LowestSignificanceForCharacterMovementWhileMovingWhenRendered;//[Offset: 0x104, Size: 0x4]
	float LowestSignificanceForCharacterMovementWhileMovingWhenNonRendered;//[Offset: 0x108, Size: 0x4]
	bool bEnableCharacterMeshTickOptForNonRenderedLowSignificance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	float LowSignificanceForCharacterMesh;//[Offset: 0x110, Size: 0x4]
	void OnStopSpectatedByController(PlayerController* PC);// 0x3e62e3fee041
	void OnStartSpectatedByController(PlayerController* PC);// 0x3e61e3fee041
	void OnSetNewOwner(Actor* NewOwner);// 0x3e60e3fee041

--------------------------------
Class: SGCharacterSkillAttributeSet.AttributeSet.Object
	float SoundLevelInfluenceFactor;//[Offset: 0x34, Size: 0x4]
	float SoundMaxDistanceInfluenceFactor;//[Offset: 0x38, Size: 0x4]
	float MedicalTypeRTPCValue;//[Offset: 0x3c, Size: 0x4]
	float ImmuneTearGas;//[Offset: 0x40, Size: 0x4]
	void OnStopSpectatedByController(PlayerController* SpectatingController);// 0x3e6ae3fee041
	void OnStartSpectatedByController(PlayerController* SpectatingController);// 0x3e69e3fee041
	void OnRep_SoundMaxDistanceInfluenceFactor();// 0x3e68e3fee041
	void OnRep_SoundLevelInfluenceFactor();// 0x3e67e3fee041
	void OnRep_MedicalTypeRTPCValue();// 0x3e66e3fee041
	void OnRegisterDefaultEmitter(AkComponent* AkComponent);// 0x3e65e3fee041
	void OnCharacterSetNewOwner(Actor* NewOwner);// 0x3e64e3fee041
	void OnCharacterDieInClient(SGCharacter* DiedCharacter);// 0x3e63e3fee041

--------------------------------
Class: SGCharacterSkillComponent.ActorComponent.Object
	class SGCharacterSkillAttributeSet* AttributeSetClass;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: SGCharacterSlideComponent.ActorComponent.Object
	float SlideAngle;//[Offset: 0xc0, Size: 0x4]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	bool bRotateCharacterToVelcityDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	float TraceDeltaDistance;//[Offset: 0xc8, Size: 0x4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	float TriggerAngle;//[Offset: 0xd0, Size: 0x4]
	float TraceDownDistance;//[Offset: 0xd4, Size: 0x4]
	SGCharacter* SGCharacter;//[Offset: 0xd8, Size: 0x8]
	CharacterMovementComponent* MovementComponent;//[Offset: 0xe0, Size: 0x8]
	float GetSlideSurfaceAngle();// 0x3e6ce3fee041
	bool CanSlide();// 0x3e6be3fee041

--------------------------------
Class: SGCharacterSmokeGrenadeEffectComponent.ActorComponent.Object
	Actor*[] SmokeGrenadeCacheList;//[Offset: 0xc0, Size: 0x10]
	float SmokeEffectRadiusSq;//[Offset: 0xd0, Size: 0x4]
	MaterialInstance* SmokeScreenMaterialTemplate;//[Offset: 0xd8, Size: 0x8]
	MaterialInstanceDynamic* SmokeScreenMaterial;//[Offset: 0xe0, Size: 0x8]
	FName DensityParamName;//[Offset: 0xe8, Size: 0x8]
	CurveFloat* DesityTimeCurve;//[Offset: 0xf0, Size: 0x8]
	float GetClosestDistanceToSmokeGrenade();// 0x3e6ee3fee041
	float CalcDensityValue();// 0x3e6de3fee041

--------------------------------
Class: SGCharacterSpectatingComponent.ActorComponent.Object
	UIOpStruct UIOpInfo;//[Offset: 0xc0, Size: 0x2]
	bool bSpectated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	void ServerSendUIOp(enum Op, bool bOpen);// 0x3e71e3fee041
	void OnRep_UIOpChanged();// 0x3e70e3fee041
	UIOpStruct GetUIOpInfo();// 0x3e6fe3fee041

--------------------------------
Class: UIOpStruct
	enum Op;//[Offset: 0x0, Size: 0x1]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: SGCharacterStatics.SGActorStatics.BlueprintFunctionLibrary.Object
	void WrapShowCharacterSimpleMesh(Character* Character, bool bShow);// 0x4141e3fee041
	bool WasJumping(Character* Character);// 0x4140e3fee041
	void ViewWeapon(const Character* Character);// 0x413fe3fee041
	void ValidateCurrentWeapon(Character* Character);// 0x413ee3fee041
	bool UpperEnterLadder(Character* Character);// 0x413de3fee041
	void UpdateTurnInPlace(Character* Character, float DeltaSeconds);// 0x413ce3fee041
	void UpdateSkin(SGCharacter* Character, out SGInventoryEquipMeshComponent*[] DressedWearableComponents);// 0x413be3fee041
	void UpdatePreviewCaptureSceneName(const Character* Character, FString sceneName);// 0x413ae3fee041
	void UpdateMeshLayers(out SGInventoryEquipMeshComponent*[] DressedWearableComponents, Character* Character, SGInventoryEquipMeshComponent* AvatarMergedMesh, SGInventoryEquipMeshComponent* BodyMesh, bool bCaptureCharacter);// 0x4139e3fee041
	void UpdateGripComponentLocation(Character* Character);// 0x4138e3fee041
	void UpdateDTAnimSequence(Character* Character, FString SequenceName);// 0x4137e3fee041
	void UpdateCharacterWeaponSway(Character* Character, float DeltaTime);// 0x4136e3fee041
	void UpdateBadgeOffsetByMorphTarget(out SGInventoryEquipMeshComponent*[] DressedWearableComponents);// 0x4135e3fee041
	bool TrySetCurrentInteractingType(Character* Character, enum NewInteractingType, out SGInventory*[] InteractInvList, bool bIsForceSet);// 0x4134e3fee041
	bool TryMergeAvatar(Character* Character);// 0x4133e3fee041
	SGCharacter* TryGetCharacterFromActor(Actor* Target);// 0x4132e3fee041
	void TryActivateFreshWoundAbility(Character* Character, enum Type);// 0x4131e3fee041
	void TryActivateBleedAbility(Character* Character, enum Type);// 0x4130e3fee041
	void ThrowItem(Character* Character, SGInventory* TargetInv);// 0x412fe3fee041
	void TestDebuff(Character* Character, enum EnduranceType, FString DebuffName);// 0x412ee3fee041
	void SwitchToWeaponBySwitchType(Character* Character, enum SwitchType);// 0x412de3fee041
	void SwitchToWeapon(Character* Character, SGInventory* Weapon);// 0x412ce3fee041
	void SwitchToLastUsedWeapon(Character* Character);// 0x412be3fee041
	void SwitchToEmptyHand(Character* Character);// 0x412ae3fee041
	void SwitchToBestWeaponAfterThrowWeapon(Character* Character, bool bIsFastThrow);// 0x4129e3fee041
	void SwitchSeating(Character* Character, Pawn* Vehicle, int NewSeatIndex);// 0x4128e3fee041
	void StopViewWeapon(const Character* Character, float BlendOutTime);// 0x4127e3fee041
	void StopTakeCoverLookOut(Character* Character);// 0x4126e3fee041
	void StopSeating(Character* NewPassenger, Pawn* Vehicle, Vector ExitLocation, Rotator ExitRotation);// 0x4125e3fee041
	void StopReload(Character* Character);// 0x4124e3fee041
	void StopRagdoll(Character* Character);// 0x4123e3fee041
	void StopInvDetecting(Character* Character);// 0x4122e3fee041
	void StopGesture(const Character* Character);// 0x4121e3fee041
	void StopFacialAnimationBySlotName(Character* Character, FName SlotName, float BlendOutTime);// 0x4120e3fee041
	void StopFacialAnimation(Character* Character);// 0x411fe3fee041
	void StopDriving(Character* NewDriver, Pawn* Vehicle, Vector ExitLocation, Rotator ExitRotation);// 0x411ee3fee041
	void StopCharacterWeaponMontage(Character* Character);// 0x411de3fee041
	void StopCharacterMontageAnim(SGCharacter* Character, AnimMontage* MontageToPlay, float InBlendOutTime);// 0x411ce3fee041
	void StopAnimation(Character* Character);// 0x411be3fee041
	void StopAllMontages(Character* Character, float BlendOutTime);// 0x411ae3fee041
	void StartTakeCoverLookOut(Character* Character);// 0x4119e3fee041
	void StartSeating(Character* NewPassenger, Pawn* Vehicle, int NewSeatIndex);// 0x4118e3fee041
	void StartRagdoll(Character* Character);// 0x4117e3fee041
	void StartPlayerAutoSearching(Character* Character, SGInventory* ContainerInventory);// 0x4116e3fee041
	void StartInvDetecting(Character* Character);// 0x4115e3fee041
	void StartDriving(Character* NewDriver, Pawn* Vehicle);// 0x4114e3fee041
	void SplitInventory(Character* Character, SGInventory* InInventory, int SplitCount, out const ItemGridInfo DestGridInfo, enum DestAttachPos, Actor* DestParentActor, int DestContainerIndex, SGInventory* MergeInventory);// 0x4113e3fee041
	SGInventory*[] SortInventoryArrayByRecommendation(Character* Character, SGInventory*[] InventoryList, enum RecommendationOrder, int ExtraParam);// 0x4112e3fee041
	bool SortContainerByStandardPriceAndCheckAddNew(Character* Character, SGInventory* ContainerInventory, int ContainerIndex, SGInventory* TryAddNewInv, out Actor*[] OutDiscardedActorList);// 0x4111e3fee041
	void SortContainerByStandardPrice(Character* Character, SGInventory* ContainerInventory, int ContainerIndex, out <Actor*,ItemGridInfo> OutSortedActorPosInfo, out Actor*[] OutDiscardedActorList, out Actor*[] InNewTryAddActorList);// 0x4110e3fee041
	void ShowBeard(out SGInventoryEquipMeshComponent*[] DressedWearableComponents, bool bShow);// 0x410fe3fee041
	void ShowBagMoveInvTipsOnClient(Character* Character, enum ResultCode, uint64 ExtraItemIDParam, SGInventory* CurInventory);// 0x410ee3fee041
	bool ShouldShowSimpleWeaponMesh(Character* Character);// 0x410de3fee041
	bool ShouldShowSimpleMesh(Character* Character, World* World);// 0x410ce3fee041
	bool ShouldShowHighPrecisionHead(Character* Character);// 0x410be3fee041
	bool ShouldPlayCameraSocketAnimation(Character* Character);// 0x410ae3fee041
	bool ShouldEnableRightHandIK(Character* Character);// 0x4109e3fee041
	bool ShouldEnableLeftHandIK(Character* Character);// 0x4108e3fee041
	bool ShouldEnableHandIK(Character* Character);// 0x4107e3fee041
	int64 SGGetPlayerCharacterGID(SGCharacter* Character);// 0x4106e3fee041
	int64 SGGetCharacterID(SGCharacter* Character);// 0x4105e3fee041
	int64 SGGetAIPathGroupID(SGCharacter* Character);// 0x4104e3fee041
	int64 SGGetAICharacterID(SGCharacter* Character);// 0x4103e3fee041
	void SetZooming(Character* Character, enum ZoomType);// 0x4102e3fee041
	void SetWeaponLeanAimType(Character* Character, enum InLeanAimType);// 0x4101e3fee041
	void SetUse1PTextureBaseOnDistance(Character* Char, bool bSet1PFlag);// 0x4100e3fee041
	void SetThrowableWeaponThrowDown(Character* Character, bool bIsThrowDown);// 0x40ffe3fee041
	void SetSwitchWeaponBaseRate(Character* Character, float PlayRate);// 0x40fee3fee041
	void SetSprint(Character* Character, bool bInSprint);// 0x40fde3fee041
	void SetSpawnDogTagEnable(Character* Character, bool bEnable);// 0x40fce3fee041
	void SetSoundMaxDistanceInfluenceFactor(Character* Character, float SoundMaxDistanceInfluenceFactor, Actor* Instigator);// 0x40fbe3fee041
	void SetSoundLevelInfluenceFactor(Character* Character, float SoundLevelInfluenceFactor, Actor* Instigator);// 0x40fae3fee041
	void SetSilentWalk(Character* Character, bool bInSilentWalk);// 0x40f9e3fee041
	void SetPreviewCharacterIdlePose(const Character* Character, bool bEnable);// 0x40f8e3fee041
	void SetPlayerBodyPartBuffIds(Character* Character, out int[] BuffList, enum BodyPart);// 0x40f7e3fee041
	void SetOutOfEndurance(Character* Character, enum Type, Actor* Instigator);// 0x40f6e3fee041
	void SetNewInspectedInventory(Character* Character, SGInventory* InInventory);// 0x40f5e3fee041
	void SetMovementSpeed(Character* Character, float BasicStandSpeed, float BasicCrouchSpeed, float BasicProneSpeed);// 0x40f4e3fee041
	void SetMoistureMax(Character* Character, float Value, Actor* Instigator);// 0x40f3e3fee041
	void SetMoisture(Character* Character, float Value, Actor* Instigator);// 0x40f2e3fee041
	void SetLowEnergyMax(Character* Character, float Value, Actor* Instigator);// 0x40f1e3fee041
	void SetLowEnergy(Character* Character, float Value, Actor* Instigator);// 0x40f0e3fee041
	void SetLockChangeAnimationSet(Character* Character, bool bLock);// 0x40efe3fee041
	void SetLoadProtect(Character* Character, bool IsProtect);// 0x40eee3fee041
	void SetLeanRate(SGCharacter* Character, float InRate);// 0x40ede3fee041
	void SetItemInspectDisabled(Character* Character, bool bInEnable);// 0x40ece3fee041
	void SetIsRotated(Character* Character, SGInventory* TargetInv, bool RotatedState);// 0x40ebe3fee041
	bool SetIsPlayingAnim(Character* Character);// 0x40eae3fee041
	bool SetIsFunctionDisabled(Character* Character, SGInventory* Inventory, bool newIsFunctionDisabled);// 0x40e9e3fee041
	void SetInventoryStartGridPositionInfo(Character* Character, SGInventory* TargetInv, out const ItemGridInfo PositionInfo);// 0x40e8e3fee041
	void SetInventoryQuickSearched(Character* Character, SGInventory* Inventory);// 0x40e7e3fee041
	void SetInventoryParentActor(Character* Character, SGInventory* TargetInv, Actor* InParentActor, int InContainerIndex);// 0x40e6e3fee041
	void SetInventoryJustReplacedInPlayerUI(Character* Character, SGInventory* Inventory);// 0x40e5e3fee041
	void SetInventoryIsNewInPlayerUI(Character* Character, SGInventory* Inventory, bool bIsNewInPlayerUI, bool bIsClearCached);// 0x40e4e3fee041
	void SetInventoryDefaultIsSearched(Character* Character, SGInventory* Inventory);// 0x40e3e3fee041
	void SetInventoryAttachPosition(Character* Character, SGInventory* TargetInv, enum NewAttachPosition);// 0x40e2e3fee041
	void SetInventoryAndBelongAdaptorsQuickSearched(Character* Character, SGInventory* Inventory);// 0x40e1e3fee041
	void SetInteractActor(Character* Character, Actor* AimedActor);// 0x40e0e3fee041
	void SetInstantHitInfoEffect(Character* Character, int InDamage, out const HitResult InHitResult, Vector InHitDir, Vector InMomentum, Actor* DamageCauser, out const SGPointDamageEvent DamageEvent);// 0x40dfe3fee041
	void SetIndirectLightingAttachmentComponent(MeshComponent* InMeshComponent, SGCharacter* InCharacter);// 0x40dee3fee041
	void SetFreeView_FirstPerson(Character* Character, Vector MoveDir);// 0x40dde3fee041
	void SetFoodMax(Character* Character, float Value, Actor* Instigator);// 0x40dce3fee041
	void SetFood(Character* Character, float Value, Actor* Instigator);// 0x40dbe3fee041
	void SetEquipSlotForbiddenState(Character* Character, enum TargetPos, bool bIsLock);// 0x40dae3fee041
	void SetEnergyMax(Character* Character, float Value, Actor* Instigator);// 0x40d9e3fee041
	void SetEnergy(Character* Character, float Value, Actor* Instigator);// 0x40d8e3fee041
	void SetEnduranceMax(Character* Character, enum Type, float Value, Actor* Instigator);// 0x40d7e3fee041
	void SetEndurance(Character* Character, enum Type, float Value, Actor* Instigator, const GameplayAbility* AbilityInstance);// 0x40d6e3fee041
	void SetEnableSliding(Character* Character, bool bEnable);// 0x40d5e3fee041
	void SetDualFOV(Character* Character, float InFOVValue);// 0x40d4e3fee041
	void SetDefaultInventoryNum(Character* Character);// 0x40d3e3fee041
	void SetDBNOHealthMax(Character* Character, float DBNOHealthMax, Actor* Instigator);// 0x40d2e3fee041
	void SetDBNOHealth(Character* Character, float DBNOHealth, Actor* Instigator);// 0x40d1e3fee041
	bool SetCurrentLootingActor(Character* Character, Actor* LootingActor);// 0x40d0e3fee041
	bool SetContainerRollUpState(Character* Character, SGInventory* Container, bool bNewIsRollUp, bool bIsUnfoldAutoFindPos);// 0x40cfe3fee041
	void SetClientLocalCharacterInvInteractType(enum InvInteractType);// 0x40cee3fee041
	void SetCharMeshLOD(Character* Character, int ForcedLOD, int MinLOD);// 0x40cde3fee041
	void SetCharacterSex(Actor* Character, enum InCharacterSex);// 0x40cce3fee041
	void SetCharacterEnterSceneGasArea(Character* Character, bool bEnable);// 0x40cbe3fee041
	void SetCharacterCollapsedGunCacheZooming(Character* Character, enum ZoomType);// 0x40cae3fee041
	void SetCameraAnimatedScaler(enum ScalerLevel);// 0x40c9e3fee041
	void SetBleedAlpha(Character* Character, float NewValue);// 0x40c8e3fee041
	void ServerLockInventorysInContainer(Character* Character, SGInventory*[] InventoriesToLock, enum LockType);// 0x40c7e3fee041
	void SendUIOpWhenSpectated(Character* Character, enum Op, bool bOpen);// 0x40c6e3fee041
	void ResetCurrentInteractingType(Character* Character, enum DebugPredictOldInteractingType);// 0x40c5e3fee041
	bool ReplaceEquippedInventory(Character* Character, SGInventory* FromInventory, SGInventory* ToInventory, bool bIsForceDropConflictedInv);// 0x40c4e3fee041
	void RemoveThrowableWeaponWhenFire(Character* Character, SGWeapon* Inventory);// 0x40c3e3fee041
	void RemoveMainWeaponBySlot(Character* Character, byte WeaponSlot);// 0x40c2e3fee041
	void RemoveInventory(Character* Character, SGInventory* Inventory);// 0x40c1e3fee041
	bool RemoveAllMainWeapon(Character* Character);// 0x40c0e3fee041
	void RefreshPreviewCharacterCapture(Character* Character);// 0x40bfe3fee041
	void RecordBrilliantTimeRange(Character* Character, int Index, DateTime StartTime, DateTime EndTime);// 0x40bee3fee041
	void QuickSearchCorpseContainer(Character* Character, SGInventory* Inventory);// 0x40bde3fee041
	void QuickSearchCorpse(Character* Character, Character* CorpseCharacter);// 0x40bce3fee041
	void PreviewCharacterViewWeapon(const Character* Character);// 0x40bbe3fee041
	void PlayGesture(const Character* Character, int GestureID, int UiTriggerType);// 0x40bae3fee041
	void PlayFacialAnimation(Character* Character, FString MontageName, FName SectionName, float CurrentPosition, bool bReplayWhileIsPlaying, bool bStopAllMontages);// 0x40b9e3fee041
	void PlayerSetWeaponFoldStockState(Character* Character, SGInventory* WeaponInv, bool newFoldStockState);// 0x40b8e3fee041
	bool PlayerMoveInventory(Character* Character, SGInventory* TargetInv, SGCharacter* ToCharacter, Actor* InParentActor, enum Pos, ItemGridInfo DropPosition, int InContainerIndex, enum ExtraOper, enum OccypyHandleOption, bool isDetachConflicted);// 0x40b7e3fee041
	void PlayCharacterWeaponMontage(Character* Character, FString CharacterAnimationName, FString WeaponAnimName);// 0x40b6e3fee041
	void PlayCharacterVoice(const Character* Character, FString ExternalFileName, bool WaitUntilCurrentEnd, int VoiceID, int Triggertype);// 0x40b5e3fee041
	float PlayCharacterMontageAnim(SGCharacter* Character, AnimMontage* MontageToPlay, FName SectionName, float RateOverride, float StartTime, bool bReplayWhileIsPlaying, bool bStopAllMontages);// 0x40b4e3fee041
	void PlayAnimation(Character* Character, FString MontageName, FName SectionName, bool bPlayFacialAnimation, bool bReplayWhileIsPlaying);// 0x40b3e3fee041
	enum PickupInventoryFromActor(Character* Character, SGInventory* Inventory, bool bToReachable, bool bIsCheckRoughSearch);// 0x40b2e3fee041
	void NPCYellSoundVisualize(Actor* NPC);// 0x40b1e3fee041
	void NotifyUseActorFailureReason(Character* Character, Actor* UseActor, enum FailureReason);// 0x40b0e3fee041
	bool NeedShowUIInGestureState(const Character* Character);// 0x40afe3fee041
	void MoveInventoryToCorpseBagOrDrop(Character* Character, Character* CorpseCharacter, SGInventory* Inventory, bool bToReachable);// 0x40aee3fee041
	void MoveInventoryToBagOrDrop(Character* Character, SGInventory* Inventory, bool bToReachable, bool isNoTriggerSetup);// 0x40ade3fee041
	void MergeInventory(Character* Character, SGInventory* DestInventory, SGInventory* SourceInventory);// 0x40ace3fee041
	void MakeCharacterCastShadow(Character* Character, bool bShouldCastShadow);// 0x40abe3fee041
	void LockMovement(Character* Character, bool bLock);// 0x40aae3fee041
	void LeaveDBNOStatus(Character* Character);// 0x40a9e3fee041
	bool IsZoomTraning(Character* Character);// 0x40a8e3fee041
	bool IsZooming(Character* Character);// 0x40a7e3fee041
	bool IsZoomFOVApplied(Character* Character);// 0x40a6e3fee041
	float IsWeaponStateForbidden(Character* Character);// 0x40a5e3fee041
	bool IsWeaponCollapsed(SGCharacter* Character);// 0x40a4e3fee041
	bool IsWeaponBeingCollapsed(Character* Character);// 0x40a3e3fee041
	bool IsWantProne(Character* Character);// 0x40a2e3fee041
	bool IsWantCrouch(Character* Character);// 0x40a1e3fee041
	bool IsVisible(Actor* Target, float Tolerance);// 0x40a0e3fee041
	bool IsVaulting(Character* Character);// 0x409fe3fee041
	float IsVaultForbidden(Character* Character);// 0x409ee3fee041
	bool IsUsingMergedAvatar(Character* Character);// 0x409de3fee041
	bool IsUsingItem(Character* Character);// 0x409ce3fee041
	bool IsUsingInventory(Character* Character);// 0x409be3fee041
	bool IsUnderGameEffectByEndurance(Character* Character, enum GameEffectType, enum EnduranceType);// 0x409ae3fee041
	bool IsUnderGameEffect(Character* Character, enum GameEffectType);// 0x4099e3fee041
	bool IsUAMCharacter(Character* Character);// 0x4098e3fee041
	bool IsTurningInPlace(Character* Character);// 0x4097e3fee041
	bool IsTunnelVisonByEnduranceType(Character* Character, enum Type);// 0x4096e3fee041
	bool IsTunnelVison(Character* Character);// 0x4095e3fee041
	bool IsTrembleByEnduranceType(Character* Character, enum Type);// 0x4094e3fee041
	bool IsTremble(Character* Character);// 0x4093e3fee041
	bool IsThrowableWeaponThrowDown(Character* Character);// 0x4092e3fee041
	bool IsThrowableWeaponAiming(Character* Character);// 0x4091e3fee041
	bool IsTakingCoverRight(Character* Character);// 0x4090e3fee041
	bool IsTakingCoverLookingOut(Character* Character);// 0x408fe3fee041
	bool IsTakingCoverLeft(Character* Character);// 0x408ee3fee041
	bool IsTakingCoverBlindFire(Character* Character);// 0x408de3fee041
	bool IsTakingCoverAimingTop(Character* Character);// 0x408ce3fee041
	bool IsTakingCoverAimingSide(Character* Character);// 0x408be3fee041
	bool IsTakingCoverAimingForward(Character* Character);// 0x408ae3fee041
	bool IsTakingCover(Character* Character);// 0x4089e3fee041
	float IsTakeCoverForbidden(Character* Character);// 0x4088e3fee041
	bool IsSwitchingWeapon(Character* Character);// 0x4087e3fee041
	bool IsSwitchingFireMode(Character* Character);// 0x4086e3fee041
	bool IsSwimming(Character* Character);// 0x4085e3fee041
	bool IsStraddling(Character* Character);// 0x4084e3fee041
	bool IsStandingStill(Character* Character);// 0x4083e3fee041
	bool IsStanding(Character* Character);// 0x4082e3fee041
	bool IsSprintRequest(Character* Character);// 0x4081e3fee041
	bool IsSprinting(Character* Character);// 0x4080e3fee041
	float IsSprintForbidden(Character* Character);// 0x407fe3fee041
	bool IsSpectated(Character* Character);// 0x407ee3fee041
	bool IsSliding(Character* Character);// 0x407de3fee041
	bool IsSilentWalk(Character* Character);// 0x407ce3fee041
	bool IsShowingSimpleMesh(Character* Character);// 0x407be3fee041
	bool IsShoulderZooming(Character* Character);// 0x407ae3fee041
	bool IsShooting(Character* Character);// 0x4079e3fee041
	bool IsScavPlayer(Character* Character);// 0x4078e3fee041
	bool IsRoleSimulatedProxy(Character* Character);// 0x4077e3fee041
	bool IsRoleAutonomousProxy(Character* Character);// 0x4076e3fee041
	bool IsRescuingTeammate(Character* Character);// 0x4075e3fee041
	bool IsReloading(Character* Character);// 0x4074e3fee041
	bool IsRagdollEnabled(Character* Character);// 0x4073e3fee041
	bool IsRagdollBaked(Character* Character);// 0x4072e3fee041
	bool IsRagdoll(Character* Character);// 0x4071e3fee041
	float IsProneForbidden(Character* Character);// 0x4070e3fee041
	bool IsProne(Character* Character);// 0x406fe3fee041
	bool IsPreviewCharacter(const Character* Character);// 0x406ee3fee041
	bool IsPreviewCaptureCharacter(const Character* Character);// 0x406de3fee041
	bool IsPreFiring(Character* Character);// 0x406ce3fee041
	bool IsPMCPlayer(Character* Character);// 0x406be3fee041
	bool IsPMC(const SGCharacter* SGCharacter);// 0x406ae3fee041
	bool IsPlayingSlotAnimation_UpperBody(Character* Character);// 0x4069e3fee041
	bool IsPlayingSlotAnimation_LeftHand(Character* Character);// 0x4068e3fee041
	bool IsPlayingSlotAnimation(Character* Character);// 0x4067e3fee041
	bool IsPlayingFacialAnimation(Character* Character);// 0x4066e3fee041
	bool IsPlayerDying(Character* Character, int DyingLevel);// 0x4065e3fee041
	bool IsPlayerDead(Character* Character);// 0x4064e3fee041
	bool IsPerformingWeaponOperation(Character* Character);// 0x4063e3fee041
	bool IsPainInhibited(Character* Character);// 0x4062e3fee041
	bool IsPainByEnduranceType(Character* Character, enum Type);// 0x4061e3fee041
	bool IsPain(Character* Character);// 0x4060e3fee041
	bool IsOverWeight(Character* Character);// 0x405fe3fee041
	bool IsOverloadFor(Character* Character, Actor* InItem);// 0x405ee3fee041
	bool IsOutOfEnduranceByEnduranceType(Character* Character, enum Type);// 0x405de3fee041
	bool IsOutOfEndurance(Character* Character);// 0x405ce3fee041
	bool IsMovingXY(Character* Character);// 0x405be3fee041
	bool IsMovingOnGround(Character* Character);// 0x405ae3fee041
	bool IsMovingForward(Character* Character);// 0x4059e3fee041
	bool IsMoving(Character* Character);// 0x4058e3fee041
	bool IsMergingAvatar(Character* Character);// 0x4057e3fee041
	bool IsMale(Character* Character);// 0x4056e3fee041
	bool IsLowOrUpExhausted(Character* Character);// 0x4055e3fee041
	bool IsLowExhausted(Character* Character);// 0x4054e3fee041
	bool IsLowEnergyEmpty(Character* Character);// 0x4053e3fee041
	bool IsLoseEndurance(Character* Character);// 0x4052e3fee041
	bool IsLockInteracitonAnimation(Character* Character);// 0x4051e3fee041
	bool IsLocalPlayerControlled(Character* Character);// 0x4050e3fee041
	bool IsLocallyViewed(Character* Character);// 0x404fe3fee041
	bool IsLoadProtect(Character* Character);// 0x404ee3fee041
	bool IsLoadingDefaultAvatar(Character* Character);// 0x404de3fee041
	bool IsLegOutOfEndurance(Character* Character);// 0x404ce3fee041
	bool IsLegBoneBreak(Character* Character);// 0x404be3fee041
	bool IsLeaning(Character* Character);// 0x404ae3fee041
	bool IsLadderClimbing(Character* Character);// 0x4049e3fee041
	bool IsLackInMoisture(Character* Character);// 0x4048e3fee041
	bool IsLackInFood(Character* Character);// 0x4047e3fee041
	bool IsKeepPreFiring(Character* Character);// 0x4046e3fee041
	float IsJumpForbidden(Character* Character);// 0x4045e3fee041
	bool IsJumpCoolDown(Character* Character);// 0x4044e3fee041
	bool IsInZoomOut(Character* Character);// 0x4043e3fee041
	bool IsInZoomInto(Character* Character);// 0x4042e3fee041
	bool IsInViewWeapon(Character* Character);// 0x4041e3fee041
	bool IsInventoryOrChildLockedByOtherCharacter(Character* Character, SGInventory* Inventory);// 0x4040e3fee041
	enum IsInventoryIsFitForAttachPositionRejectID_Internal(SGInventory*[] AllInventories, SGInventory* TargetInv, enum TargetPos, out SGInventory* BlockedInvParent, out SGInventory* BlockedInv, out SGInventory*[] IgnoreCheckInvs, SGInventory* TargetInvNewTryAddAdapter, bool bIsIgnoreOccupy);// 0x403fe3fee041
	enum IsInventoryIsFitForAttachPositionRejectID_CorpseBox(Actor* CorpseBoxInv, SGInventory* TargetInv, enum TargetPos, out SGInventory* BlockedInvParent, out SGInventory* BlockedInv, SGInventory* TargetInvNewTryAddAdapter, bool bIsIgnoreOccupy);// 0x403ee3fee041
	enum IsInventoryIsFitForAttachPositionRejectID(Character* Character, SGInventory* TargetInv, enum Pos, out SGInventory* BlockedInvParent, out SGInventory* BlockedInv, SGInventory* TargetInvNewTryAddAdapter, bool bIsIgnoreOccupy);// 0x403de3fee041
	enum IsInventoryIsFitForAttachPosition_Internal(SGInventory*[] AllInventories, SGInventory* TargetInv, enum TargetPos, out SGInventory* BlockedInv, out SGInventory*[] IgnoreCheckInvs, bool bIsIgnoreOccupy);// 0x403ce3fee041
	enum IsInventoryIsFitForAttachPosition_CorpseBox2(Actor* CorpseBoxInv, SGInventory* TargetInv, enum Pos, out SGInventory* BlockedInvParent, out SGInventory* BlockedInv, out SGInventory*[] IgnoreCheckInvs, bool bIsIgnoreOccupy);// 0x403be3fee041
	enum IsInventoryIsFitForAttachPosition_CorpseBox(Actor* CorpseBoxInv, SGInventory* TargetInv, enum TargetPos, out SGInventory* BlockedInvParent, out SGInventory* BlockedInv, bool bIsIgnoreOccupy);// 0x403ae3fee041
	enum IsInventoryIsFitForAttachPosition2(Character* Character, SGInventory* TargetInv, enum Pos, out SGInventory* BlockedInvParent, out SGInventory* BlockedInv, out SGInventory*[] IgnoreCheckInvs, bool bIsIgnoreOccupy);// 0x4039e3fee041
	enum IsInventoryIsFitForAttachPosition(Character* Character, SGInventory* TargetInv, enum Pos, out SGInventory* BlockedInvParent, out SGInventory* BlockedInv, bool bIsIgnoreOccupy);// 0x4038e3fee041
	bool IsInVehicle(Character* Character);// 0x4037e3fee041
	bool IsInTwoHandGestureState(const Character* Character);// 0x4036e3fee041
	bool IsInTransitionAnim(const Character* Character);// 0x4035e3fee041
	bool IsInTinnitus(const Character* Character);// 0x4034e3fee041
	bool IsInThermalScopeActive(Character* Character);// 0x4033e3fee041
	bool IsInThermalHeadwearActive(Character* Character);// 0x4032e3fee041
	bool IsInTearGasState(Character* Character);// 0x4031e3fee041
	bool IsInStunning(Character* Character);// 0x4030e3fee041
	bool IsInSense(Character* Character, FName Sense);// 0x402fe3fee041
	bool IsInRestState(Character* Character);// 0x402ee3fee041
	bool IsInReloadingOneByOne(Character* Character);// 0x402de3fee041
	bool IsInOneHandGestureState(const Character* Character);// 0x402ce3fee041
	bool IsInNormalReloading(Character* Character);// 0x402be3fee041
	bool IsInFirstPersonFreeViewMode(Character* Character);// 0x402ae3fee041
	bool IsInFiringState(Character* Character);// 0x4029e3fee041
	bool IsInFiringAndLoadComplete(Character* Character);// 0x4028e3fee041
	bool IsInfiniteMoisture(Character* Character);// 0x4027e3fee041
	bool IsInfiniteFood(Character* Character);// 0x4026e3fee041
	bool IsInfiniteEnergy(Character* Character);// 0x4025e3fee041
	bool IsInfiniteEndurance(Character* Character);// 0x4024e3fee041
	bool IsInfiniteAmmo(Character* Character);// 0x4023e3fee041
	bool IsInCheckMagazine(Character* Character);// 0x4022e3fee041
	bool IsInCasual(Character* Character);// 0x4021e3fee041
	bool IsInAnyAbilityState(const Character* Character, out const GameplayTagContainer AbilityTags);// 0x4020e3fee041
	bool IsInAbilityState(const Character* Character, out const GameplayTag AbilityTag);// 0x401fe3fee041
	bool IsIgnoreMoveBlockedActorWhenMoving(Character* Character);// 0x401ee3fee041
	bool IsHoldingBreathWhenUsingInventory(Character* Character);// 0x401de3fee041
	bool IsHoldingBreath(Character* Character);// 0x401ce3fee041
	bool IsHoldBreathRequest(Character* Character);// 0x401be3fee041
	bool IsHitByFragGrenade(Character* Character);// 0x401ae3fee041
	bool IsHaveBagAvatarMesh(SGCharacter* Character);// 0x4019e3fee041
	bool IsGodEndurance(Character* Character);// 0x4018e3fee041
	bool IsGamePlayer(const Character* Character);// 0x4017e3fee041
	bool IsFrobiddenFireAnim(Character* Character);// 0x4016e3fee041
	bool IsFreshWoundByEnduranceType(Character* Character, enum Type);// 0x4015e3fee041
	bool IsFreshWound(Character* Character, out enum Type);// 0x4014e3fee041
	bool IsFreeLooking(Character* Character);// 0x4013e3fee041
	bool IsFPPMode(Character* Character);// 0x4012e3fee041
	bool IsForceUse1PTexture(Character* Char);// 0x4011e3fee041
	bool IsFiring(Character* Character);// 0x4010e3fee041
	bool IsFalling(Character* Character);// 0x400fe3fee041
	bool IsExhausted(Character* Character);// 0x400ee3fee041
	bool IsEnergyEmpty(Character* Character);// 0x400de3fee041
	bool IsEnduranceFull(Character* Character);// 0x400ce3fee041
	bool IsEnableDualFOV(Character* Character);// 0x400be3fee041
	bool IsEarCovered(Character* Character);// 0x400ae3fee041
	bool IsDizzy(Character* Character);// 0x4009e3fee041
	bool IsDisplayCanNotSellItem(Character* Character, SGInventory* Inventory);// 0x4008e3fee041
	bool IsDBNOMove(Character* Character);// 0x4007e3fee041
	bool IsDBNO(Character* Character);// 0x4006e3fee041
	bool IsCrouchingStill(Character* Character);// 0x4005e3fee041
	bool IsCrouched(Character* Character);// 0x4004e3fee041
	bool IsCorpse(Actor* Character);// 0x4003e3fee041
	bool IsCompleteOverWeight(Character* Character);// 0x4002e3fee041
	bool IsClientAvatarSpawnComplete(Character* Character);// 0x4001e3fee041
	bool IsClear(Character* Character);// 0x4000e3fee041
	bool IsCheckingStartTakeCover(Character* Character);// 0x3fffe3fee041
	bool IsChangeActorRotation(Character* Character);// 0x3ffee3fee041
	bool IsCasual(Character* Character);// 0x3ffde3fee041
	bool IsCastingShadow(Character* Character);// 0x3ffce3fee041
	bool IsCanSwapBag(Character* Character, Actor* NewBag, out enum OutPosition, out SGInventory* NeedDiscardInventory);// 0x3ffbe3fee041
	bool IsCanAddItemSimple(Character* Character, Actor* CheckItem);// 0x3ffae3fee041
	bool IsCanAddItem(Character* Character, Actor* CheckItem, out SGGridOccupyInfo OccupyInfo, out enum OutPosition, out SGInventory* NeedDiscardInventory, out int OutContainerIndex, out Actor* OutOwnerContainer, out bool OutRotateInfo, out int OutRemainNotMergedCount, out SGInventory*[] ToMergeInvs, out enum OutAddContaienrResult, bool bInGameHud, bool bIsTryMerge);// 0x3ff9e3fee041
	bool IsBraking(Character* Character);// 0x3ff8e3fee041
	bool IsBoss(const Actor* Actor);// 0x3ff7e3fee041
	bool IsBoneBreakByEnduranceType(Character* Character, enum Type);// 0x3ff6e3fee041
	bool IsBoneBreak(Character* Character);// 0x3ff5e3fee041
	bool IsBleedByEnduranceType(Character* Character, enum Type);// 0x3ff4e3fee041
	bool IsBleed(Character* Character);// 0x3ff3e3fee041
	bool IsBeRescuingByTeammate(Character* Character);// 0x3ff2e3fee041
	bool IsBeingSpectated(Pawn* Pawn);// 0x3ff1e3fee041
	bool IsBagOpen(Character* Character);// 0x3ff0e3fee041
	bool IsAvatarsLoaded(Character* Character);// 0x3fefe3fee041
	bool IsAvatarMeshContainsNecessaryParts(Character* Character, out const FString[] NecessaryAvatarNameList);// 0x3feee3fee041
	bool IsAssemblingWeapon(Character* Character);// 0x3fede3fee041
	bool IsArmOutOfEndurance(Character* Character);// 0x3fece3fee041
	bool IsArmedWithThrown(Character* Character);// 0x3febe3fee041
	bool IsArmedWithGun(Character* Character);// 0x3feae3fee041
	bool IsArmBoneBreak(Character* Character);// 0x3fe9e3fee041
	bool IsAnyLegBroken(Character* Character);// 0x3fe8e3fee041
	bool IsAnimRightHandGripWeapon(Character* Character);// 0x3fe7e3fee041
	bool IsAllowOperatingWithWeaponState(Character* Character);// 0x3fe6e3fee041
	bool IsAllAvatarMeshLoaded(Character* Character);// 0x3fe5e3fee041
	bool IsAICharacter(const Character* Character);// 0x3fe4e3fee041
	bool IsAIBoss(Character* Character);// 0x3fe3e3fee041
	bool IsADSZooming(Character* Character);// 0x3fe2e3fee041
	bool Is1PGamePlayer(const Character* Character);// 0x3fe1e3fee041
	void InitAvatarStaticMeshComponent(StaticMeshComponent* EquipStaticMesh, SGInventoryEquipMeshComponent* DressedEquipMesh, MeshComponent* AttachParentMesh, LightingChannels LightingChannels);// 0x3fe0e3fee041
	void InitAvatarSkeletalMeshComponent(SkeletalMeshComponent* CharacterMesh, SkeletalMeshComponent* EquipSkeletal, SGInventoryEquipMeshComponent* DressedEquipMesh, MeshComponent* AttachParentMesh, LightingChannels LightingChannels);// 0x3fdfe3fee041
	bool InInAbilityStates(const Character* Character, out const GameplayTag[] AbilityTags);// 0x3fdee3fee041
	void InhibiteSense(Character* Character, FName Sense, bool Value);// 0x3fdde3fee041
	void InfiniteMoisture(Character* Character, bool bInfiniteMoisture);// 0x3fdce3fee041
	void InfiniteFood(Character* Character, bool bInfiniteFood);// 0x3fdbe3fee041
	void InfiniteEnergy(Character* Character, bool bInfiniteEnergy);// 0x3fdae3fee041
	void InfiniteEndurance(Character* Character, bool bInfiniteEndurance);// 0x3fd9e3fee041
	void InfiniteAmmo(Character* Character, bool bInfiniteAmmo);// 0x3fd8e3fee041
	void IgnoreCharacterMoveInput(Character* Character, bool bIgnore);// 0x3fd7e3fee041
	void IgnoreCharacterLookInput(Character* Character, bool bIgnore);// 0x3fd6e3fee041
	void HideBackPistol(Character* Character, bool bHide, bool bSetByBackWeapon);// 0x3fd5e3fee041
	bool HaveBag(Character* Character);// 0x3fd4e3fee041
	bool HasNonzeroViewKick(Character* Character);// 0x3fd3e3fee041
	bool HasGamePlayTag(const Character* Character, FString Tag);// 0x3fd2e3fee041
	bool HasEquipedWeapon(Character* Character);// 0x3fd1e3fee041
	bool HasEquipedMainWeapon(Character* Character);// 0x3fd0e3fee041
	bool GridPreOccupyAccurate_End(Character* Character, SGInventory* OccupyKeyInventory, out SGInventory* OutContainerInventory, out int OutContainerIndex, out SGGridOccupyInfo OutGridOccupiedInfo);// 0x3fcfe3fee041
	bool GridPreOccupyAccurate_Begin(Character* Character, SGInventory* OccupyKeyInventory, out SGGlobalGridOccupyInfo GlobalGridOccupiedInfo);// 0x3fcee3fee041
	void GridPreOccupy_End(Character* Character, SGInventory* OccupyKeyInventory);// 0x3fcde3fee041
	SGInventory* GiveWeaponPart(Character* Character, out class SGInventory InventoryClasses, SGInventory* ParentInv, int Count, enum GiveInventoryReason);// 0x3fcce3fee041
	void GiveWeaponByClass(Character* Character, class SGInventory[] InventoryClasses, int InCount, enum Pos, Actor* InParentActor, int InContainerIndex, int Durability, FName SocketName, int64 InInstId, int64 TakeInPlayerGID, int InsureType, enum GiveInventoryReason);// 0x3fcbe3fee041
	SGInventory*[] GiveWeapon(Character* Character, out const class SGInventory[] InventoryClasses, out const int[] InvCounts, enum GiveInventoryReason);// 0x3fcae3fee041
	void GivePickupOrInventoryByClass(Character* Character, class Actor InItemClass, int InCount, enum Pos);// 0x3fc9e3fee041
	void GivePickup(Character* Character, Actor* InItem, enum Pos, ItemGridInfo DropPosition, int GiveCount, Actor* InParentActor, int InContainerIndex, bool IsFlagNewInv);// 0x3fc8e3fee041
	SGInventory*[] GiveInventoryById_DsOnly(Character* Character, int64 InventoryID, int InCount, enum Pos, Actor* InParentActor, int InContainerIndex, int Durability, FName SocketName, int64 InInstId, int64 TakeInPlayerGID, int InsureType, enum GiveInventoryReason, bool bDestroyItem);// 0x3fc7e3fee041
	void GiveInventoryById(Character* Character, int64 InventoryID, int InCount, enum Pos, Actor* InParentActor, int InContainerIndex, int Durability, FName SocketName, int64 InInstId, int64 TakeInPlayerGID, int InsureType, enum GiveInventoryReason, bool bDestroyItem);// 0x3fc6e3fee041
	bool GiveInventoryByClass(Character* Character, class SGInventory InventoryClass, int InCount, enum Pos, Actor* InParentActor, int InContainerIndex, int Durability, FName SocketName, int64 InInstId, int64 TakeInPlayerGID, int InsureType, enum GiveInventoryReason, bool bDestroyItem);// 0x3fc5e3fee041
	Vector GetZoomOffset_Location_3P(Character* Character);// 0x3fc4e3fee041
	float GetZoomFovAppliedStartFime(Character* Character);// 0x3fc3e3fee041
	float GetWeightMax(Character* Character);// 0x3fc2e3fee041
	float GetWeight(Character* Character);// 0x3fc1e3fee041
	float GetWeaponMovementSpeedScale(Character* Character);// 0x3fc0e3fee041
	int GetWeaponMeshLODDisplay(SGInventory* Weapon, out FString WeaponMeshInfo, out int TotalTriangle);// 0x3fbfe3fee041
	int GetWeaponMeshInfoDisplay(SGInventory* Weapon, out FString WeaponMeshInfo);// 0x3fbee3fee041
	float GetWeaponLeanAimYOffset(Character* Character);// 0x3fbde3fee041
	enum GetWeaponLeanAimTypeConsiderWallBlock(Character* Character);// 0x3fbce3fee041
	enum GetWeaponLeanAimType(Character* Character);// 0x3fbbe3fee041
	int GetWeaponInfoDisplay(SGInventory* Weapon, out FString WeaponInfo);// 0x3fbae3fee041
	SGInventory* GetWeaponFromSwitchType(Character* Character, enum SwitchType);// 0x3fb9e3fee041
	AnimSequence* GetWeaponCasualIdleSequence(SGInventory* Weapon);// 0x3fb8e3fee041
	enum GetVisibilityBasedAnimTickOption(Character* Character);// 0x3fb7e3fee041
	Rotator GetViewRotationOffset(Character* Character);// 0x3fb6e3fee041
	SGCharacter* GetViewedCharacter(Object* WorldContextObject);// 0x3fb5e3fee041
	SGInventory* GetVest(Character* Character);// 0x3fb4e3fee041
	Pawn* GetVehicle(Character* Character);// 0x3fb3e3fee041
	SGInventory* GetUsingInventory(const Character* Character);// 0x3fb2e3fee041
	float GetUAMCharacterLeanRollOffset(Character* Character);// 0x3fb1e3fee041
	float GetUAMCharacterLeanHorizontalOffset(Character* Character);// 0x3fb0e3fee041
	float GetUAMCharacterLeanDuration(Character* Character);// 0x3fafe3fee041
	float GetUAMCharacterConfigLeanHorizontalOffset(Character* Character);// 0x3faee3fee041
	AnimMontage* GetTurnInPlaceMontage(Character* Character, bool bTurnLeft);// 0x3fade3fee041
	float GetTotalInventoryValue(Character* Character);// 0x3face3fee041
	float GetTimeAfterLoadProtect(Character* Character);// 0x3fabe3fee041
	void GetThrowWeapons(Character* Character, out SGInventory*[] ThrowWeaponArray, enum Pos);// 0x3faae3fee041
	float GetThresholdLeavingExhausted(Character* Character);// 0x3fa9e3fee041
	int GetTearGasLevel(Character* Character);// 0x3fa8e3fee041
	byte GetTeamType(Character* Character);// 0x3fa7e3fee041
	int GetTeamIndex(Character* Character);// 0x3fa6e3fee041
	SGCharacterTakeCoverComponent* GetTakeCoverComponent(Character* Character);// 0x3fa5e3fee041
	float GetSwitchWeaponRate(Character* Character, SGInventory* Weapon);// 0x3fa4e3fee041
	float GetSwitchWeaponDurationScale(Character* Character);// 0x3fa3e3fee041
	enum GetSwitchTypeFromWeapon(Character* Character, SGInventory* Weapon);// 0x3fa2e3fee041
	float GetSwitchToADSTimeScale(Character* Character);// 0x3fa1e3fee041
	float GetStunEffectMovementSpeedScale(Character* Character);// 0x3fa0e3fee041
	bool GetSprintRequestState(Character* Character);// 0x3f9fe3fee041
	float GetSpreadScale(Character* Character);// 0x3f9ee3fee041
	float GetSpeedUpScaleForDebug(Character* Character);// 0x3f9de3fee041
	float GetSoundMaxDistanceInfluenceFactor(Character* Character);// 0x3f9ce3fee041
	float GetSoundLevelInfluenceFactor(Character* Character);// 0x3f9be3fee041
	float GetSlopeLegsAdaptationPitch(SGCharacter* Character);// 0x3f9ae3fee041
	float GetSlopeAdaptationPitch(SGCharacter* Character);// 0x3f99e3fee041
	LinearColor GetSkinType(SGCharacter* Character, out SGInventoryEquipMeshComponent*[] DressedWearableComponents);// 0x3f98e3fee041
	Vector GetSimpleMeshAttachSocket(Character* Character);// 0x3f97e3fee041
	float[] GetShoeBoneModifyScaleList(Character* Character);// 0x3f96e3fee041
	SGInventory* GetSecondMainWeapon(Character* Character);// 0x3f95e3fee041
	float GetSearchScale(Character* Character);// 0x3f94e3fee041
	Vector GetScalableCameraTranslationOffset(Character* Character);// 0x3f93e3fee041
	Rotator GetScalableCameraRotationOffset(Character* Character);// 0x3f92e3fee041
	bool GetRootmotionRedirector(SGCharacter* Character, out Rotator RootmotionRedir);// 0x3f91e3fee041
	uint64 GetRoomID(Character* Character);// 0x3f90e3fee041
	Transform GetRightHandBoneSpaceIKTransform(Character* Character);// 0x3f8fe3fee041
	Character* GetRescuer(Character* Character);// 0x3f8ee3fee041
	float GetReloadUsedTime(Character* Character);// 0x3f8de3fee041
	float GetReloadTime(Character* Character);// 0x3f8ce3fee041
	float GetRecoveryAnimStanceSpeedScale(Character* Character);// 0x3f8be3fee041
	float GetRecoilScale(Character* Character);// 0x3f8ae3fee041
	SGInventory* GetRecentUsedGun(const Character* Character);// 0x3f89e3fee041
	SGInventory* GetRealWeapon(Character* Character);// 0x3f88e3fee041
	bool GetRandomHeadProtectedSubGroup(Character* Character, out enum OutHitSubGroupType);// 0x3f87e3fee041
	PoseSnapshot GetRagdollPose(Character* Character);// 0x3f86e3fee041
	SGCharacter* GetPreviewCharacter(World* World, FName Tag);// 0x3f85e3fee041
	PoseSnapshot GetPoseCache(Character* Character);// 0x3f84e3fee041
	PlayerState* GetPlayerState(Character* Character);// 0x3f83e3fee041
	void GetPlayerRecordInGame(Character* Character, out int PlayerLevel, out int KillAIScav, out int KillAIPMC, out int KillAIScavBoss, out int KillPlayerPMC, out int KillPlayerScav, out int PMC_KillPMCTotal, out int PMC_KillScavTotal, out int DeathCountByPMC);// 0x3f82e3fee041
	SGInventorySearchComponent* GetPlayerNextUnsearchedInvSearchComInContainer(Character* Character, SGInventory* ContainerInventory);// 0x3f81e3fee041
	FString GetPlayerName(Character* Character);// 0x3f80e3fee041
	float GetPlayerLeanWallAngle(Character* Character);// 0x3f7fe3fee041
	Vector[] GetPlayerDetectedInvPos(Character* Character);// 0x3f7ee3fee041
	float GetPhysMatSpeedScale(Character* Character);// 0x3f7de3fee041
	PhysicalMaterial* GetPhysMaterialByHitGroup(Character* Character, enum HitGroup);// 0x3f7ce3fee041
	Vector GetPelvisLocation(Character* Character);// 0x3f7be3fee041
	SGInventory* GetParentActorByAttachPosition(Character* Character, out const enum NewAttachPosition);// 0x3f7ae3fee041
	int GetPainCount(Character* Character);// 0x3f79e3fee041
	float GetOverWeightSpeedScale(Character* Character);// 0x3f78e3fee041
	float GetOverWeightJumpHeightScale(Character* Character);// 0x3f77e3fee041
	float GetOverWeightEnergyReduceScale(Character* Character);// 0x3f76e3fee041
	float GetOverWeightEnergyRecoverScale(Character* Character);// 0x3f75e3fee041
	float GetOverWeightDamageScale(Character* Character);// 0x3f74e3fee041
	int GetOutLossPercentage(Character* Character);// 0x3f73e3fee041
	float GetNormalizedVelocity(Character* Character);// 0x3f72e3fee041
	SGInventory* GetNextBestThrowWeapon(const Character* Character, const SGInventory* Current);// 0x3f71e3fee041
	SGWeapon* GetNearestWeapon(World* InWorld, Character* LocalChar);// 0x3f70e3fee041
	Character* GetNearest3PCharacter(World* InWorld, Character* LocalChar);// 0x3f6fe3fee041
	float GetMovementSpeedScaleWhenLegOutOfEndurance(Character* Character);// 0x3f6ee3fee041
	float GetMovementSpeedScale(Character* Character);// 0x3f6de3fee041
	float GetMovementForbiddenScale(Character* Character);// 0x3f6ce3fee041
	float GetMovementAbilitySpeedScale(Character* Character);// 0x3f6be3fee041
	float GetMoistureMax(Character* Character);// 0x3f6ae3fee041
	float GetMoisture(Character* Character);// 0x3f69e3fee041
	Vector GetMeshLocation(Character* Character);// 0x3f68e3fee041
	Vector GetMeshCenterLocation(Character* Character);// 0x3f67e3fee041
	SkeletalMeshComponent* GetMergedAvatarMeshComponent(Character* Character);// 0x3f66e3fee041
	SGInventory* GetMeleeWeapon(Character* Character);// 0x3f65e3fee041
	float GetMaxSpeed(Character* Character);// 0x3f64e3fee041
	float GetLowThresholdLeavingExhausted(Character* Character);// 0x3f63e3fee041
	EndurancePartInfo GetLowestEnduranceByPercent(Character* Character, ActorComponent* InEnduranceComponent);// 0x3f62e3fee041
	float GetLowEnergyReduceSpeedScale(Character* Character);// 0x3f61e3fee041
	float GetLowEnergyRecoverSpeedScale(Character* Character);// 0x3f60e3fee041
	float GetLowEnergyMax(Character* Character);// 0x3f5fe3fee041
	float GetLowEnergy(Character* Character);// 0x3f5ee3fee041
	FString GetLocalRoleString(Character* Character);// 0x3f5de3fee041
	SGCharacter* GetLocalControlledCharacter(World* World);// 0x3f5ce3fee041
	float GetLeftZoomTime(Character* Character);// 0x3f5be3fee041
	SGInventoryEquipMeshComponent*[] GetLayeredWearableMeshComponents(SGInventoryEquipMeshComponent*[] DressedWearableComponents, int LayerIndex, bool IncludeUnder);// 0x3f5ae3fee041
	SGInventory* GetLastUsedWeapon(const Character* Character);// 0x3f59e3fee041
	float GetJumpZVelocityScale(Character* Character);// 0x3f58e3fee041
	float GetJumpZScaleFromWeight(Character* Character);// 0x3f57e3fee041
	void GetItemChildListByIndex(Actor* ActorContainer, out SGInventory*[] Out_InverntoryList, int InContainerIndex);// 0x3f56e3fee041
	bool GetItemChildList(Actor* ActorContainer, out SGInventory*[] Out_InverntoryList);// 0x3f55e3fee041
	float GetInventoryWeight(Actor* InItem);// 0x3f54e3fee041
	enum GetInventoryType(Actor* InItem);// 0x3f53e3fee041
	int GetInventoryStackCount(Actor* InItem);// 0x3f52e3fee041
	Actor*[] GetInventorysNearby(Character* Character, bool bForceRedetect);// 0x3f51e3fee041
	void GetInventoryListByID(Character* Character, int64 ItemID, out SGInventory*[] InventoryList);// 0x3f50e3fee041
	SGInventory* GetInventoryJustReplacedInPlayerUI(Character* Character);// 0x3f4fe3fee041
	bool GetInventoryIsNewInPlayerUI(Character* Character, SGInventory* Inventory);// 0x3f4ee3fee041
	SGInventory* GetInventoryByClass(Character* Character, class SGInventory InvClass);// 0x3f4de3fee041
	SGInventory*[] GetInventoryArrayByType(Character* Character, enum InventoryType);// 0x3f4ce3fee041
	SGInventory*[] GetInventoryArray(Character* Character);// 0x3f4be3fee041
	SGInventory* GetInventory(Character* Character, int64 InventoryItemID);// 0x3f4ae3fee041
	void GetInventories(Character* Character, out SGInventory*[] InventoryArray, enum Pos);// 0x3f49e3fee041
	int GetInLossPercentage(Character* Character);// 0x3f48e3fee041
	AnimSequence* GetIdleSequenceAdditive(Character* Character);// 0x3f47e3fee041
	AnimSequence* GetIdleSequence(Character* Character);// 0x3f46e3fee041
	float GetHoldBreathEnergyReduceSpeedScale(Character* Character);// 0x3f45e3fee041
	enum GetHitGroupByPhysMaterial(Character* Character, PhysicalMaterial* InPhysicalMaterial);// 0x3f44e3fee041
	SGInventory* GetHelmet(Character* Character);// 0x3f43e3fee041
	float GetHealthAddPreview(SGCharacter* Character);// 0x3f42e3fee041
	SGInventory* GetHeadset(Character* Character);// 0x3f41e3fee041
	Vector GetHeadLocation(Character* Character);// 0x3f40e3fee041
	SGInventory* GetHeadInventory(Character* Character);// 0x3f3fe3fee041
	enum GetHeadHitSubGroup(Character* Character, out const HitResult HitInfo);// 0x3f3ee3fee041
	float GetHeadArmor(Character* Character);// 0x3f3de3fee041
	ItemGridInfo GetGridInfo(Actor* InItem);// 0x3f3ce3fee041
	int64 GetGopenidByGid(int64 GID);// 0x3f3be3fee041
	bool GetFriendHarmEnableResult(Character* Causer, Character* Suffer);// 0x3f3ae3fee041
	float GetFoodMax(Character* Character);// 0x3f39e3fee041
	float GetFood(Character* Character);// 0x3f38e3fee041
	AnimSequence* GetFixUpRightHandAdditive(Character* Character);// 0x3f37e3fee041
	Vector2D GetFirstPersonFreeViewMovement(Character* Character);// 0x3f36e3fee041
	SGInventory* GetFirstMainWeapon(Character* Character);// 0x3f35e3fee041
	float GetFillContainerDurationScale(Character* Character);// 0x3f34e3fee041
	float GetFacialAnimationMontagePosition(Character* Character);// 0x3f33e3fee041
	SGInventory* GetFaceShield(Character* Character);// 0x3f32e3fee041
	float GetExhaustAnimRate(Character* Character);// 0x3f31e3fee041
	bool GetEquipSlotForbiddenState(Character* Character, enum TargetPos);// 0x3f30e3fee041
	SGInventory* GetEquippedVestBag(Character* Character);// 0x3f2fe3fee041
	SGInventory* GetEquippedPocket(Character* Character);// 0x3f2ee3fee041
	SGInventory* GetEquippedPackBag(Character* Character);// 0x3f2de3fee041
	float GetEquipmentEffectScaleToSpeed(Character* Character);// 0x3f2ce3fee041
	void GetEquipedInventories(Character* Character, out SGInventory*[] OutAllInventories);// 0x3f2be3fee041
	SGInventory* GetEquipedAvatarInventory(Character* Character, enum avatarType);// 0x3f2ae3fee041
	void GetEquipedArmorDataInfo(Character* Character, enum ArmorType, out int PenetrationLevel, out float Durability, out float MaxDurability);// 0x3f29e3fee041
	float GetEnergyReduceSpeedScaleOfSlopeSprint(Character* Character);// 0x3f28e3fee041
	float GetEnergyReduceSpeedScaleOfBuff(Character* Character);// 0x3f27e3fee041
	float GetEnergyReduceSpeedScaleInADS(Character* Character);// 0x3f26e3fee041
	float GetEnergyReduceSpeedScale(Character* Character);// 0x3f25e3fee041
	float GetEnergyRecoverSpeedScaleOfBuff(Character* Character);// 0x3f24e3fee041
	float GetEnergyRecoverSpeedScale(Character* Character);// 0x3f23e3fee041
	float GetEnergyMax(Character* Character);// 0x3f22e3fee041
	void GetEnergyAttributes(Character* Character, out float upEnergy, out float upEnergyMax, out float LowEnergy, out float LowEnergyMax);// 0x3f21e3fee041
	float GetEnergy(Character* Character);// 0x3f20e3fee041
	enum GetEnduranceTypeByHitGroup(enum HitGroup);// 0x3f1fe3fee041
	float GetEndurancePercent(Character* Character, enum Type);// 0x3f1ee3fee041
	float GetEnduranceMax(Character* Character, enum Type);// 0x3f1de3fee041
	float GetEndurance(Character* Character, enum Type);// 0x3f1ce3fee041
	SGInventory* GetEmptyHandWeapon(Character* Character);// 0x3f1be3fee041
	float GetDistSquared2D(Character* CharacterA, Character* CharacterB);// 0x3f1ae3fee041
	FString GetDisplayOwnerName(ActorComponent* TestComponent);// 0x3f19e3fee041
	FString GetDisplayName(Actor* InItem);// 0x3f18e3fee041
	float GetDefaultZoomFov(Character* Character);// 0x3f17e3fee041
	float GetDBNOHealthMax(Character* Character);// 0x3f16e3fee041
	float GetDBNOHealth(Character* Character);// 0x3f15e3fee041
	enum GetCustomizeAnimationSpecificVersionInCharacterSex(SGCharacter* InCharacter);// 0x3f14e3fee041
	float GetCustomFOVBlendSpeed(Character* Character);// 0x3f13e3fee041
	float GetCustomFOV(Character* Character);// 0x3f12e3fee041
	SGInventory* GetCurrentWeapon(const Character* Character);// 0x3f11e3fee041
	Actor* GetCurrentLootingActor(Character* Character);// 0x3f10e3fee041
	float GetCurrentLeanAdditiveAlpha_3P(Character* Character);// 0x3f0fe3fee041
	enum GetCurrentHealthCondition(Character* Character);// 0x3f0ee3fee041
	bool GetCureOutOfEnduranceCandidates(Character* Character, out enum[] Candidates);// 0x3f0de3fee041
	bool GetCureEnduranceLossCandidates(Character* Character, out enum[] Candidates);// 0x3f0ce3fee041
	bool GetCureBoneBreakCandidates(Character* Character, out enum[] Candidates);// 0x3f0be3fee041
	bool GetCureBleedCandidates(Character* Character, out enum[] Candidates);// 0x3f0ae3fee041
	float GetControlRotationYaw(Character* Character);// 0x3f09e3fee041
	float GetConditionWeight(Character* Character, bool bIsComplete);// 0x3f08e3fee041
	Rotator GetCombinedCameraRotationOffset(Character* Character);// 0x3f07e3fee041
	Pawn* GetClosestVehicle(Character* Character);// 0x3f06e3fee041
	int64 GetClientPlatByGid(int64 GID);// 0x3f05e3fee041
	enum GetClientLocalCharacterInvInteractType();// 0x3f04e3fee041
	int GetCharMeshInfoDisplay(Character* Character, out FString CharMeshInfo, out int TotalTriangle);// 0x3f03e3fee041
	int GetCharAvatarInfoDisplay(Character* Character, out FString CharMeshInfo);// 0x3f02e3fee041
	Vector GetCharacterWeaponSwaySpringPivotOffset(Character* Character);// 0x3f01e3fee041
	Rotator GetCharacterWeaponSwayRotOffset(Character* Character);// 0x3f00e3fee041
	Vector GetCharacterWeaponSwayLocOffset(Character* Character);// 0x3effe3fee041
	float GetCharacterWeaponSwayAlpha_Yaw(Character* Character);// 0x3efee3fee041
	float GetCharacterWeaponSwayAlpha_Pitch(Character* Character);// 0x3efde3fee041
	bool GetCharacterTeamGrenadeHarmEnable(SGCharacter* Character);// 0x3efce3fee041
	int GetCharacterSignType(PlayerState* PlayerState);// 0x3efbe3fee041
	enum GetCharacterSex(Actor* Character);// 0x3efae3fee041
	Character* GetCharacterOwner(ActorComponent* TestComponent);// 0x3ef9e3fee041
	FString GetCharacterName(Character* Character);// 0x3ef8e3fee041
	FString GetCharacterMovementInfo(Character* LocalChar, Character* TestChar);// 0x3ef7e3fee041
	enum GetCharacterMeshPolicy(SGCharacter* Character, World* World);// 0x3ef6e3fee041
	void GetCharacterListNearView(Actor* Character, out Actor*[] CurCharacterList);// 0x3ef5e3fee041
	void GetCharacterList(Actor* Character, out Actor*[] CurCharacterList);// 0x3ef4e3fee041
	SGInventory* GetCharacterLastGivedInventory(Character* Character);// 0x3ef3e3fee041
	SGCharacter* GetCharacterFromController(Controller* Controller);// 0x3ef2e3fee041
	bool GetCharacterFactionGrenadeHarmEnable(SGCharacter* Character);// 0x3ef1e3fee041
	float GetCharacterCurrentWeaponZoomInTimes(Character* Character);// 0x3ef0e3fee041
	enum GetCharacterCurrentInteractingType(Character* Character);// 0x3eefe3fee041
	SGInventory*[] GetCharacterCurrentInteractingInvList(Character* Character);// 0x3eeee3fee041
	Rotator GetCharacterADSWeaponSwayRotOffset(Character* Character);// 0x3eede3fee041
	float GetChangeClipDurationScale(Character* Character);// 0x3eece3fee041
	AnimSequence* GetCasualIdleSequence(Character* Character);// 0x3eebe3fee041
	Rotator GetCameraRotationOffset(Character* Character);// 0x3eeae3fee041
	enum GetCameraAnimatedScaler();// 0x3ee9e3fee041
	float GetCameraAnimatedRotationAlpha(Character* Character);// 0x3ee8e3fee041
	SGPlayerState* GetCachedSGPlayerStateBeforeDied(Actor* Character);// 0x3ee7e3fee041
	PlayerState* GetCachedPlayerStateBeforeDied(Actor* Character);// 0x3ee6e3fee041
	Transform GetCachedGripComponentTransform(Character* Character);// 0x3ee5e3fee041
	float GetBSAnimNomalizedSpeed(Character* Character);// 0x3ee4e3fee041
	int GetBoneOutOfEnduranceCount(Character* Character);// 0x3ee3e3fee041
	FName GetBoneName(Character* Character, enum BoneType);// 0x3ee2e3fee041
	Vector GetBoneLocationByName(Character* Character, out FName BoneName);// 0x3ee1e3fee041
	int GetBoneEmptyEnduranceCount(Character* Character);// 0x3ee0e3fee041
	int GetBoneBreakCount(Character* Character);// 0x3edfe3fee041
	float GetBodyArmor(Character* Character);// 0x3edee3fee041
	int GetBleedCount(Character* Character);// 0x3edde3fee041
	float GetBleedAlpha(Character* Character);// 0x3edce3fee041
	SGInventory* GetBestWeaponAfterThrowWeapon(Character* Character, bool bIsFastThrow);// 0x3edbe3fee041
	MeshComponent* GetBagAvatarMeshComponent(SGCharacter* Character, out FString OutSocketName);// 0x3edae3fee041
	enum GetAvatarType(Character* Character, SGInventoryEquipMeshComponent* AvatarComponent);// 0x3ed9e3fee041
	MeshComponent*[] GetAvatarMeshComponent(Character* Character);// 0x3ed8e3fee041
	enum GetAutoZoomWeaponType(Character* Character);// 0x3ed7e3fee041
	MeshComponent* GetAttachParentMeshComponent(bool bCaptureActor, MeshComponent* CharacterMesh, SGInventoryEquipMeshComponent* EquipMeshToAdd, SGInventoryEquipMeshComponent*[] DressedEquipMeshComponents);// 0x3ed6e3fee041
	SGInventory* GetAssistWeapon(Character* Character);// 0x3ed5e3fee041
	enum GetAnimStance(Character* Character);// 0x3ed4e3fee041
	int GetAnimInfoDisplay(Character* Character, out FString WeaponMeshInfo, int DisplayIndex);// 0x3ed3e3fee041
	float GetAnimCurveValue(Character* Character, FName CurveName);// 0x3ed2e3fee041
	int GetAngleOfCharacterCurrentSignByXY(PlayerController* PC, float X, float Y);// 0x3ed1e3fee041
	int GetAngleOfCharacterCurrentSign(PlayerController* PC, Vector2D SignVector);// 0x3ed0e3fee041
	int GetAngleOfCharacter(Character* Character, Character* OtherCharacter);// 0x3ecfe3fee041
	void GetAllWeapons(Character* Character, out SGInventory*[] OutWeaponList);// 0x3ecee3fee041
	void GetAllThrowWeapon(SGCharacter* Character, out SGInventory*[] ItemArray);// 0x3ecde3fee041
	void GetAllInventories(Character* Character, out SGInventory*[] OutAllInventories);// 0x3ecce3fee041
	int GetAllEquipInventoriesValue(Character* Character, bool bExact);// 0x3ecbe3fee041
	float GetAllEnduranceMax(Character* Character);// 0x3ecae3fee041
	float GetAllEndurance(Character* Character);// 0x3ec9e3fee041
	SGInventory*[] GetAllAvatarInventories(Character* Character);// 0x3ec8e3fee041
	void GetAllArmorInventory(SGCharacter* Character, out SGInventory*[] AllArmorInventorys);// 0x3ec7e3fee041
	float GetAimingScale(Character* Character);// 0x3ec6e3fee041
	float GetADSZoomPersistTime(Character* Character);// 0x3ec5e3fee041
	AnimSequence* GetADSIdleSequenceAdditive(Character* Character);// 0x3ec4e3fee041
	enum GetActorCharacterType(Actor* Target);// 0x3ec3e3fee041
	FName[] GetActiveSenses(Character* Character);// 0x3ec2e3fee041
	void FreeAssemble(Character* Character, bool bFree);// 0x3ec1e3fee041
	void ForceShowArmor(const Character* Character, enum ArmorType, bool bShow);// 0x3ec0e3fee041
	void ForceSetAvatarFPPState(SGCharacter* Character, bool bIsFPP);// 0x3ebfe3fee041
	void ForceMacAccel(SGCharacter* Character, bool bForce);// 0x3ebee3fee041
	SGInventory* FindWeaponByClass(Character* Character, class SGInventory InventoryClass);// 0x3ebde3fee041
	SGInventory* FindEquipedAvatarInventory(Character* Character, enum avatarType);// 0x3ebce3fee041
	void EnterDBNOStatus(Character* Character, Controller* InstigatedBy);// 0x3ebbe3fee041
	void EnableSlaveComponentTick(Character* Character, bool bEnable);// 0x3ebae3fee041
	void EnablePhysicsSimulation_Bag(Character* Character, bool bEnable);// 0x3eb9e3fee041
	void EnableDualFOV(Character* Character, bool bEnable);// 0x3eb8e3fee041
	void EnableDeadCharacterMeshMaxDrawDistance(Character* Character, bool bEnable);// 0x3eb7e3fee041
	bool EnableAutoGive(Character* Character);// 0x3eb6e3fee041
	void DropItem(const Character* Character, SGInventory* TargetInv, out const Vector ExtraVelocity);// 0x3eb5e3fee041
	bool DoMoveInventory(Character* Character, SGInventory* TargetInv, Character* ToCharacter, enum ToPos, Actor* ToParentActor, int ToContainerIndex, ItemGridInfo ToDropPosition, enum ExtraOper, bool isNoTriggerSetup);// 0x3eb4e3fee041
	void DiscardInventoryFromCharacterNotDrop(Character* Character, SGInventory* TargetInv);// 0x3eb3e3fee041
	void DiscardInventoryFromCharacterNotDeatchAdapt(Character* Character, SGInventory* TargetInv);// 0x3eb2e3fee041
	void DiscardAllInventoryFrame(Character* Character, bool bFrame);// 0x3eb1e3fee041
	void DiscardAllInventory(Character* Character);// 0x3eb0e3fee041
	void DestoryAllInventory(Character* Character);// 0x3eafe3fee041
	void DeactivateExplorer(const SGCharacter* Character);// 0x3eaee3fee041
	void ClearCharacterMovementVelocity(Character* Character);// 0x3eade3fee041
	enum ChooseBestBagPosForItem(Character* Character, Actor* CheckItem, out SGGridOccupyInfo OccupyInfo, out enum OutPosition, out SGInventory* NeedDiscardInventory, out int OutContainerIndex, out Actor* OutOwnerContainer, out bool OutRotateInfo, out int OutRemainNotMergedCount, out SGInventory*[] ToMergeInvs, bool bToReachable, bool bIsCheckRoughSearch, bool bIsTryMerge);// 0x3eace3fee041
	bool CheckSelfBeingSpectated(Pawn* Pawn);// 0x3eabe3fee041
	bool CheckPositionIsInCharacterCapsule(Character* Character, out const Vector position, float ExtraHeight);// 0x3eaae3fee041
	bool CheckIsNewInspectedItemID(Character* Character, int InItemID);// 0x3ea9e3fee041
	bool CheckIsInventorySelfSearched(SGCharacter* Character, SGInventory* Inventory);// 0x3ea8e3fee041
	bool CheckIsInventorySearchedByGID(int64 PlayerGID, SGInventory* Inventory);// 0x3ea7e3fee041
	bool CheckIsInventorySearched(SGCharacter* Character, SGInventory* Inventory);// 0x3ea6e3fee041
	bool CheckIsInCurDetailSearchingInv(Character* Character, SGInventory* Inventory);// 0x3ea5e3fee041
	bool CheckIsCurMaxSearching(Character* Character);// 0x3ea4e3fee041
	void CheckEquipmentHiddenConflict(Character* Character, uint64 ItemID, out uint64[] ConflictItemIdList);// 0x3ea3e3fee041
	bool CheckCanSetCurrentInteractingType(Character* Character, enum NewInteractingType, out SGInventory*[] InteractInvList);// 0x3ea2e3fee041
	enum CheckCanMoveToParentActor(Character* Character, SGInventory* TargetInv, Actor* InParentActor);// 0x3ea1e3fee041
	bool CheckCanDoInstantOperation(Character* Character);// 0x3ea0e3fee041
	void Check_SortCarriedMagazineList(const Character* Character, int ThresholdValue);// 0x3e9fe3fee041
	void ChangeCapsuleComponentSize(Character* Character, float NewRadius, float NewHalfHeight);// 0x3e9ee3fee041
	bool CanSwitchFireMode(Character* Character);// 0x3e9de3fee041
	bool CanReloadDuringCheckMag(Character* Character);// 0x3e9ce3fee041
	bool CanMoveMultipleInventoriesToBag(Character* Character, out SGInventory*[] Inventories, bool bLockTriedGridIfCan);// 0x3e9be3fee041
	enum CanMoveInvTo(Character* Character, SGInventory* TargetInv, Character* ToCharacter, enum ToPos, SGInventory* ToParentInv, enum ExtraOper, bool bSkipAttachPosCheck, bool bSkipOccupied, bool bToastErrorTips);// 0x3e9ae3fee041
	bool CanMoveInventoryToBag(Character* Character, SGInventory* Inventory);// 0x3e99e3fee041
	bool CanMove(Character* Character);// 0x3e98e3fee041
	bool CanMergeAvatar(Character* Character);// 0x3e97e3fee041
	bool CanMeleeFire(Character* Character);// 0x3e96e3fee041
	bool CanEnterLadder(Character* Character, enum EnterType);// 0x3e95e3fee041
	bool CanCureEnduranceLoss(Character* Character);// 0x3e94e3fee041
	bool CanCheckWeapon(Character* Character);// 0x3e93e3fee041
	bool CanCheckMagazine(Character* Character);// 0x3e92e3fee041
	bool CanChangeClip(Character* Character);// 0x3e91e3fee041
	void CancelPlayerAutoSearching(Character* Character, SGInventory* ContainerInventory);// 0x3e90e3fee041
	void CancelPainAbility(Character* Character, enum Type);// 0x3e8fe3fee041
	void CancelGestureAbility(const Character* Character, int afterCancelAction);// 0x3e8ee3fee041
	void CancelFreshWoundAbility(Character* Character, enum Type);// 0x3e8de3fee041
	void CancelBoneBreakAbility(Character* Character, enum Type);// 0x3e8ce3fee041
	void CancelBleedAbility(Character* Character, enum Type);// 0x3e8be3fee041
	void CancelActionAbility(const Character* Character, enum ActionAbilityType);// 0x3e8ae3fee041
	bool CanCastProxyMeshShadow(SGCharacter* Character);// 0x3e89e3fee041
	enum CanAddInventoryToTargetContainer(Character* Character, SGInventory* Inventory, SGInventory* TargetContainerInventory, bool bIsAutoAdd, enum ExtraOperType);// 0x3e88e3fee041
	bool CanActivateActionAbility(const Character* Character, enum ActionAbilityType);// 0x3e87e3fee041
	Vector CalDirectionBaseOnCamera(SGCharacter* Character, Vector InVector);// 0x3e86e3fee041
	float CalDegreePitchAngleBetweenVec(Vector VectorA, Vector VectorB);// 0x3e85e3fee041
	float CalDegreePitchAngleBetweenCharacter(Character* Character, Character* TargetCharacter);// 0x3e84e3fee041
	float CalculateEnduranceRecoverDuration(Character* Character, out const GameplayEffectSpec Spec);// 0x3e83e3fee041
	float CalculateCharacterForwardAndVectorAngleInXYDir(SGCharacter* Character, const float X, const float Y, const float Z);// 0x3e82e3fee041
	float CalculateCharacterForwardAndVectorAngleInXY(SGCharacter* Character, Vector vec);// 0x3e81e3fee041
	void BroadcastOnLoadProtectStateChanged(Character* Character, bool bEnable);// 0x3e80e3fee041
	void BroadCastOnCharacterEnterDangerArea(Character* Character);// 0x3e7fe3fee041
	void BackupInstigatorInfo(Character* Instigator, SGInventory* Weapon, out KillerStaticData staticData, SGCharacter* DataSender);// 0x3e7ee3fee041
	void AutoGive(Character* Character, bool bInEnable);// 0x3e7de3fee041
	bool AttachAdapterInGameHud(Character* Character, SGInventory* Adapter, SGInventory* ParentInventory, int InContainerIndex, bool bIsDetachConflicted);// 0x3e7ce3fee041
	void AlignUseInventoryMontages(Character* Character);// 0x3e7be3fee041
	void AddPreviewCaptureMesh(const Character* Character, MeshComponent* MeshComp);// 0x3e7ae3fee041
	void AddMoisture(Character* Character, float Value, Actor* Instigator);// 0x3e79e3fee041
	void AddFood(Character* Character, float Value, Actor* Instigator);// 0x3e78e3fee041
	void AddCharacterEquipmentReplayExternalData(Character* Character);// 0x3e77e3fee041
	bool ActivateExplorer(const SGCharacter* Character);// 0x3e76e3fee041

--------------------------------
Class: EndurancePartInfo
	enum EndurancePart;//[Offset: 0x0, Size: 0x1]
	float NowEndurance;//[Offset: 0x4, Size: 0x4]
	float MaxEndurance;//[Offset: 0x8, Size: 0x4]
	float EndurancePercent;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SGCharacterSwimComponent.ActorComponent.Object
	Actor* CachedWaterActor;//[Offset: 0xc0, Size: 0x8]
	AkAudioEvent* MoveInWaterAudioEvent;//[Offset: 0xc8, Size: 0x8]
	ParticleSystem* MoveInWaterPS;//[Offset: 0xd0, Size: 0x8]
	Vector MoveInWaterPSEmitterOffset;//[Offset: 0xd8, Size: 0xc]
	float UnitWalkLength;//[Offset: 0xe4, Size: 0x4]
	void ServerSetPlayerInWater(Actor* InWaterActor);// 0x4149e3fee041
	void OnRepPlayerInWater();// 0x4148e3fee041
	void OnComponentUpdateOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4147e3fee041
	void OnComponentEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4146e3fee041
	void OnComponentBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4145e3fee041

--------------------------------
Class: SGCharacterTeamMoveComponent.ActorComponent.Object
	void BP_AddTeamMember(Actor* TeamMember);// 0x414de3fee041
	void BP_ActivateLeader();// 0x414ce3fee041

--------------------------------
Class: SGCharacterTurnComponent.SGCharacterBaseTurnComponent.ActorComponent.Object
	float DefaultTurningActionTime;//[Offset: 0x2f0, Size: 0x4]
	float ProneTurnningActionTime;//[Offset: 0x2f4, Size: 0x4]
	float DefaultTurningAngle;//[Offset: 0x2f8, Size: 0x4]
	float ProneTruningAngle;//[Offset: 0x2fc, Size: 0x4]
	bool bUseConstTurnInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	float ConstRotateSpeed;//[Offset: 0x304, Size: 0x4]
	float RotateSpeed;//[Offset: 0x308, Size: 0x4]
	float TurningProgress;//[Offset: 0x30c, Size: 0x4]
	bool bLockedRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool bDisableTurningProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]
	bool bUsingAnimRotationCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x312, Size: 0x1]
	FName RootMotionRotationCurveName;//[Offset: 0x314, Size: 0x8]
	float RootMotionTurn;//[Offset: 0x31c, Size: 0x4]
	float RotationTolerance;//[Offset: 0x320, Size: 0x4]
	float StandingStillTransitionTime;//[Offset: 0x324, Size: 0x4]
	bool bEnableImmediateTurnInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]

--------------------------------
Class: SGCharacterUseComponent.SGActorUseComponent.ActorComponent.Object

--------------------------------
Class: SGCharacterVehicleComponent.ActorComponent.Object
	SGCharacterVehicleReplicationData CharacterVehicleReplicationData;//[Offset: 0xc0, Size: 0x38]
	Pawn* Vehicle;//[Offset: 0xf8, Size: 0x8]
	Pawn* ClosestVehicle;//[Offset: 0x100, Size: 0x8]
	void SwitchSeating(Pawn* InVehicle, int NewSeatIndex);// 0x415de3fee041
	void StopSeating(Pawn* InVehicle, Vector ExitLocation, Rotator ExitRotation);// 0x415ce3fee041
	void StopDriving(Pawn* InVehicle, Vector ExitLocation, Rotator ExitRotation);// 0x415be3fee041
	void StartSeating(Pawn* InVehicle, int NewSeatIndex);// 0x415ae3fee041
	void StartDriving(Pawn* InVehicle);// 0x4159e3fee041
	void OnRep_CharacterVehicleReplicationData();// 0x4158e3fee041
	Pawn* GetVehicle();// 0x4157e3fee041
	Pawn* GetClosestVehicle();// 0x4156e3fee041

--------------------------------
Class: SGCharacterVehicleReplicationData
	enum SyncType;//[Offset: 0x0, Size: 0x1]
	Pawn* Vehicle;//[Offset: 0x8, Size: 0x8]
	int SeatIndex;//[Offset: 0x10, Size: 0x4]
	Vector ExitLocation;//[Offset: 0x14, Size: 0xc]
	Rotator ExitRotation;//[Offset: 0x20, Size: 0xc]
	Pawn* LastVehicle;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: SGCharacterWeaponAttachComponent.ActorComponent.Object
	FString[] WeaponBackAttachSockets;//[Offset: 0xc0, Size: 0x10]
	WeaponAttachInfoStruct[] AttachedInventorySocketIndexMap;//[Offset: 0xd0, Size: 0x10]
	<FString,Transform> AttachSocketOffsets;//[Offset: 0xe0, Size: 0x50]
	bool bForceWeaponHangToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 0x1]
	void OnReceivePhysicsEvent(out const Transform InPhysicsDeltaTransform);// 0x4162e3fee041
	void OnBoneTransformsFinalizedAndMaybeUpdateWeaponRelativeTransform();// 0x4161e3fee041
	void OnBeforeCharacterUpdateAvatarLayers();// 0x4160e3fee041
	void OnAfterCharacterUpdateAvatarLayers();// 0x415fe3fee041
	bool CheckAndSetWeaponHideOnBack(SGInventory* TargetWeapon);// 0x415ee3fee041

--------------------------------
Class: WeaponAttachInfoStruct
	SGInventory* TargetWeapon;//[Offset: 0x0, Size: 0x8]
	int SocketIndex;//[Offset: 0x8, Size: 0x4]
	Transform OriginalTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: SGCharacterZoneInfoTransComponent.ActorComponent.Object

--------------------------------
Class: SGCmdObjectManager.Object
	<class Object,Object*> CmdObjectMap;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: SGShowSwithBaseComponent.Object
	bool bOnlyServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bCacheActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	SGShowControlComponent* ShowControlComponent;//[Offset: 0x30, Size: 0x8]
	void ShowSwith(bool InState);// 0x4179e3fee041
	void PreviewShowSwith(bool PreviewState);// 0x4178e3fee041
	bool IsOnlyServer();// 0x4177e3fee041
	bool HasBegunSwitcher();// 0x4176e3fee041
	void BeginSwitcher(SGShowControlComponent* InShowControlComponent);// 0x4175e3fee041

--------------------------------
Class: SGShowControlComponent.ActorComponent.Object
	SGShowSwithBaseComponent*[] GlobalSwithComponents;//[Offset: 0xb8, Size: 0x10]
	SGShowSwithBaseComponent*[] OrientationSwithComponents;//[Offset: 0xc8, Size: 0x10]
	bool bGlobleShowCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	bool bOrientationShowCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	bool bOrientationContainPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]
	bool bActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1]
	PlayerController*[] OrientationPlayers;//[Offset: 0xe0, Size: 0x10]
	bool bHasActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	float BeginSecond;//[Offset: 0xf4, Size: 0x4]
	void RemoveOrientationPlayer(PlayerController* PlayerController);// 0x4e31e3fee041
	void RefreshShow();// 0x4e30e3fee041
	void OrientationShowEnable(bool NewShowState);// 0x4e2fe3fee041
	void OnReq_OrientationPlayers();// 0x4e2ee3fee041
	void OnReq_ActiveState();// 0x4e2de3fee041
	void GlobleShowEnable(bool NewShowState);// 0x4e2ce3fee041
	void Deactive();// 0x4e2be3fee041
	void AddOrientationPlayer(PlayerController* PlayerController);// 0x4e2ae3fee041
	void Active();// 0x4e29e3fee041

--------------------------------
Class: SGCollisionSwitherComponent.SGShowSwithBaseComponent.Object
	Actor*[] CollisionActors;//[Offset: 0x40, Size: 0x10]
	bool bShowState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: SGCompetitionAPIReport.ActorComponent.Object
	int CachePackgetNum;//[Offset: 0xb8, Size: 0x4]
	int64[] RecordGIDArray;//[Offset: 0xc8, Size: 0x10]
	float SendPackgetCoolTime;//[Offset: 0xd8, Size: 0x4]
	int BossTokenID;//[Offset: 0xdc, Size: 0x4]
	int RecordRarity;//[Offset: 0xe0, Size: 0x4]
	bool SendRowDate();// 0x4183e3fee041
	void OnTakeOutValueChange(SGPlayerController* PC, SGInventory* Inventory, bool bAdd);// 0x4182e3fee041
	void OnRecordPlayerDynamicInfo(int64 PlayerGID, bool bImmediately);// 0x4181e3fee041
	void OnGatherPlayerDynamicInfo(int64 GID);// 0x4180e3fee041
	void OnCheckRecordPlayerDynamicInfo();// 0x417fe3fee041
	int64 GetPlayerGID(PlayerController* PC);// 0x417ee3fee041
	bool BP_SendRowDate();// 0x417de3fee041
	void BP_OnRecordReportInfo(APIReportInfo Info);// 0x417ce3fee041
	void BP_OnRecordPlayerStaticInfo(APIPlayerStaticInfo Info);// 0x417be3fee041
	void BP_OnRecordPlayerDynamicInfo(APIPlayerDynamicInfo Info);// 0x417ae3fee041

--------------------------------
Class: APIReportInfo
	uint64 GID;//[Offset: 0x0, Size: 0x8]
	enum ReportType;//[Offset: 0x8, Size: 0x1]
	CompetitionKillInfo KillInfo;//[Offset: 0x10, Size: 0x58]
	uint32 ItemID;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: CompetitionKillInfo
	uint64 KilledGid;//[Offset: 0x0, Size: 0x8]
	FString KilledName;//[Offset: 0x8, Size: 0x10]
	enum KilledPlayerType;//[Offset: 0x18, Size: 0x1]
	uint32 RankedLevel;//[Offset: 0x1c, Size: 0x4]
	uint32 Score;//[Offset: 0x20, Size: 0x4]
	uint32 Level;//[Offset: 0x24, Size: 0x4]
	uint32 KilledTime;//[Offset: 0x28, Size: 0x4]
	uint64 KillWeaponId;//[Offset: 0x30, Size: 0x8]
	enum KillPart;//[Offset: 0x38, Size: 0x1]
	int KillAllDamage;//[Offset: 0x3c, Size: 0x4]
	int KillAllArmorDamage;//[Offset: 0x40, Size: 0x4]
	int HitNum;//[Offset: 0x44, Size: 0x4]
	int64 ArmorId;//[Offset: 0x48, Size: 0x8]
	enum PlayerTypeDetail;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: APIPlayerStaticInfo
	uint64 GID;//[Offset: 0x0, Size: 0x8]
	uint32 TeamID;//[Offset: 0x8, Size: 0x4]
	uint32 TeamIndex;//[Offset: 0xc, Size: 0x4]
	FString TeamName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: APIPlayerDynamicInfo
	uint64 GID;//[Offset: 0x0, Size: 0x8]
	uint64 TakeOutAllValue;//[Offset: 0x8, Size: 0x8]
	uint64 HarvestValue;//[Offset: 0x10, Size: 0x8]
	enum AliveState;//[Offset: 0x18, Size: 0x1]
	uint32 KillPMCNum;//[Offset: 0x1c, Size: 0x4]
	APIEquipmentInfo[] AllTakeEquipmentArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: APIEquipmentInfo
	uint32 ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemValue;//[Offset: 0x4, Size: 0x4]
	uint32 ItemNum;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SGCompetitionGameEvents.SGGameInstanceComponent.Object
	delegate OBPlayerRestart;//[Offset: 0x30, Size: 0x10]
	delegate CompetitionGameGlobalDataInfoChange;//[Offset: 0x40, Size: 0x10]
	delegate OnCompetitionGameAllTeamPanelVisibilityChange;//[Offset: 0x50, Size: 0x10]
	delegate OnCompetitionGameFallReport;//[Offset: 0x60, Size: 0x10]
	delegate OnCompetitionEscapeReport;//[Offset: 0x70, Size: 0x10]
	delegate OnChangePerspectiveState;//[Offset: 0x90, Size: 0x10]
	delegate OnChangeCharacterStatusArrays;//[Offset: 0xa0, Size: 0x10]
	delegate OnAPIPlayerStaticInfo;//[Offset: 0xb0, Size: 0x10]
	delegate OnAPIPlayerDynamicInfo;//[Offset: 0xc0, Size: 0x10]
	delegate OnAPIReportInfo;//[Offset: 0xd0, Size: 0x10]
	delegate OnTakeOutValueChange;//[Offset: 0xe0, Size: 0x10]
	delegate OnOBSpectateStateChange;//[Offset: 0xf0, Size: 0x10]
	SGCompetitionGameEvents* GetSGCompetitionGameEvents(Object* InWorldContextObject);// 0x4184e3fee041

--------------------------------
Class: SGGameMode.GameMode.GameModeBase.Info.Actor.Object
	float ExitGameDelayTime;//[Offset: 0x3c4, Size: 0x4]
	class SGGameStateSoundComponent* SoundPlayerClass;//[Offset: 0x3c8, Size: 0x8]
	int MainModeIDPIE;//[Offset: 0x3d0, Size: 0x4]
	int SubModeIDPIE;//[Offset: 0x3d4, Size: 0x4]
	int DifficultyPIE;//[Offset: 0x3d8, Size: 0x4]
	int SpecialIDPIE;//[Offset: 0x3dc, Size: 0x4]
	FString[] PlayersToken;//[Offset: 0x3e0, Size: 0x10]
	Controller*[] DelayRestartPlayerQueue;//[Offset: 0x3f0, Size: 0x10]
	int64[] PreLoginPlayers;//[Offset: 0x400, Size: 0x10]
	bool IsZoneSvrValid();// 0x41b5e3fee041
	int GetValidPlayerNum();// 0x41b4e3fee041
	PlayerController* FindPlayerControllerByGid(const int64 InGid);// 0x41b3e3fee041
	void CleanPlayerInfoForReconnection(uint64 InGid);// 0x41b2e3fee041
	void BroadcastReqPlayerFinishEvent(GameMode* GameMode, PlayerController* Exiting);// 0x41b1e3fee041
	void BroadcastReqOBPlayerFinishEvent(GameMode* GameMode, PlayerController* Exiting);// 0x41b0e3fee041
	void BroadcastPlayerStartEvent(PlayerController* Exiting);// 0x41afe3fee041
	void BroadcastPlayerFinishEvent(PlayerController* Exiting, enum ResultType, Actor* EscapeVolume);// 0x41aee3fee041

--------------------------------
Class: SGCompetitionGameMode.SGGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: SGCompetitionGameStatics.Object
	void UnRegisterCharacterStatus(Character* Character);// 0x41d5e3fee041
	void UnRegisterCharacterKillInfo(Character* Character);// 0x41d4e3fee041
	bool TryGetCompetitionGamePlayerDataInfoByGID(const Object* WorldContextObject, int64 PlayerGID, out CompetitionGamePlayerDataInfo PlayerDataInfo);// 0x41d3e3fee041
	bool SetPlayerControllerSpectatorState(PlayerController* PC, bool bFreeView);// 0x41d2e3fee041
	void RegisterCharacterStatus(Character* Character);// 0x41d1e3fee041
	void RegisterCharacterKillInfo(Character* Character);// 0x41d0e3fee041
	bool IsValidCharacter(Character* Character);// 0x41cfe3fee041
	bool IsTraceLineToShoot(Character* Character);// 0x41cee3fee041
	bool IsOBPlayer(const Controller* Controller);// 0x41cde3fee041
	bool IsCompetitionGame();// 0x41cce3fee041
	Character* GetViewTargetByPlayerController(PlayerController* PC);// 0x41cbe3fee041
	void GetTeamIDByPlayerState(PlayerState* PS, out int TeamID, out int TeamIndex);// 0x41cae3fee041
	void GetTeamIDByPlayerController(Controller* C, out int TeamID, out int TeamIndex);// 0x41c9e3fee041
	int GetTeamArrayIndex(PlayerState* PS);// 0x41c8e3fee041
	void GetPlayerNumberByPlayerResult(const Object* WorldContextObject, int TeamID, enum Result, out int TeamNum, out int ResultNum);// 0x41c7e3fee041
	void GetPlayerKillInfoList(const Object* WorldContextObject, int64 PlayerGID, out CompetitionKillInfo[] KillInfoList);// 0x41c6e3fee041
	bool GetPerspectiveState(const Object* WorldContextObject);// 0x41c5e3fee041
	void GetPerspectiveHUDCharacterArray(out SGCharacter*[] CharacterArray, Character* LocalCharacter, int MaxCharacterNum, float MaxDistance);// 0x41c4e3fee041
	bool GetPCConnectionIsOBPlayer(Controller* Controller);// 0x41c3e3fee041
	int GetNumLength(int Num);// 0x41c2e3fee041
	bool GetIsMarkInHighRatioGame(Object* WorldContextObject);// 0x41c1e3fee041
	int GetFrontNumByItemID(int ItemID, int Digit);// 0x41c0e3fee041
	FString GetCompetitionTeamName(PlayerState* PS);// 0x41bfe3fee041
	uint64 GetCompetitionRoomID(Object* WorldContextObject);// 0x41bee3fee041
	CompetitionOBGlobalDataInfo GetCompetitionOBGlobalDataInfo(const Object* WorldContextObject);// 0x41bde3fee041
	CompetitionGameManageActor* GetCompetitionGameManageActor(const Object* WorldContextObject);// 0x41bce3fee041
	bool GetCharacterStatusByGID(const Object* WorldContextObject, int64 CharacterGID, enum StatusType);// 0x41bbe3fee041
	bool GetCharacterStatus(SGCharacter* Character, enum StatusType);// 0x41bae3fee041
	enum GetCharacterBestStatusTypeByGID(const Object* WorldContextObject, int64 CharacterGID);// 0x41b9e3fee041
	enum GetCharacterBestStatusType(SGCharacter* Character);// 0x41b8e3fee041
	int GetAlivePlayerNumByTeamID(const Object* WorldContextObject, int TeamID);// 0x41b7e3fee041
	void ClearCompetitionGameManageActor();// 0x41b6e3fee041

--------------------------------
Class: SGCompetitionKillInfoManage.ActorComponent.Object
	CompetitionPlayerKillList[] AllPlayerKillListData;//[Offset: 0xb8, Size: 0x10]
	void UnRegisterPlayer(SGCharacter* Character);// 0x41dbe3fee041
	void RegisterPlayer(SGCharacter* Character);// 0x41dae3fee041
	void OnKilledHandle(out const KillInfo KillInfo, out const KillOtherStatis KillOtherStatics);// 0x41d9e3fee041
	void InsertPlayerKillInfo(SGCharacter* Killer, CompetitionKillInfo KillInfo);// 0x41d8e3fee041
	void GetPlayerKillInfoList(out CompetitionKillInfo[] KillInfoList, int64 PlayerGID);// 0x41d7e3fee041
	uint64 GetPlayerGID(SGCharacter* Character);// 0x41d6e3fee041

--------------------------------
Class: CompetitionPlayerKillList
	uint64 KillerGID;//[Offset: 0x0, Size: 0x8]
	PlayerState* PS;//[Offset: 0x8, Size: 0x8]
	CompetitionKillInfo[] KillInfoArray;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SGCompetitionPerspectiveManage.ActorComponent.Object
	MaterialInterface* SourceMaterial;//[Offset: 0xc8, Size: 0x8]
	SGCharacter*[] AliveCharacterList;//[Offset: 0xd0, Size: 0x10]
	PostProcessVolume* PostProcessVolume;//[Offset: 0xe0, Size: 0x8]
	void OnChangePerspectiveState(bool State);// 0x41e0e3fee041
	PostProcessVolume* InitCompetitionPostProcessVolume();// 0x41dfe3fee041
	bool GetPerspectiveState();// 0x41dee3fee041
	void FindOrCreatePerspectiveComponent(Character* Character);// 0x41dde3fee041
	void FilterCharacter(out SGCharacter*[] CharacterArray, Character* LocalCharacter, int MaxCharacterNum, float MaxDistance);// 0x41dce3fee041

--------------------------------
Class: SGCompetitionPlayerStatusManage.ActorComponent.Object
	SGCompetitionStatusBase*[] StatusArray;//[Offset: 0xb8, Size: 0x10]
	PlayerStatusInfo[] CharacterStatusArrays;//[Offset: 0xc8, Size: 0x10]
	void UnRegisterPlayer(SGCharacter* Character);// 0x41e7e3fee041
	bool SetCharacterStatus(SGCharacter* Character, enum StatusType, bool Val);// 0x41e6e3fee041
	void RegisterPlayer(SGCharacter* Character);// 0x41e5e3fee041
	void OnRep_CharacterStatusArrays();// 0x41e4e3fee041
	void OnMessage(SGCharacter* Character, enum StatusType, bool Val);// 0x41e3e3fee041
	bool GetCharacterStatusByGID(uint64 CharacterGID, enum StatusType);// 0x41e2e3fee041
	bool GetCharacterStatus(SGCharacter* Character, enum StatusType);// 0x41e1e3fee041

--------------------------------
Class: SGCompetitionStatusBase.Object
	enum StatusType;//[Offset: 0x28, Size: 0x1]
	SGCompetitionPlayerStatusManage* OwnerStatusManage;//[Offset: 0x30, Size: 0x8]
	SGCharacter*[] RegisterCharacterArray;//[Offset: 0x38, Size: 0x10]
	void SetOwnerStatusManage(SGCompetitionPlayerStatusManage* Owner);// 0x41f0e3fee041
	void SendMessage(SGCharacter* Character, bool Val, enum StateType);// 0x41efe3fee041
	bool HasCharacter(SGCharacter* Character);// 0x41eee3fee041
	void BP_OnUnRegisterEvent();// 0x41ede3fee041
	void BP_OnUnRegisterCharacter(SGCharacter* Character);// 0x41ece3fee041
	void BP_OnStart();// 0x41ebe3fee041
	void BP_OnRegisterEvent();// 0x41eae3fee041
	void BP_OnRegisterCharacter(SGCharacter* Character);// 0x41e9e3fee041
	void BP_OnEnd();// 0x41e8e3fee041

--------------------------------
Class: PlayerStatusInfo
	uint64 PlayerGID;//[Offset: 0x0, Size: 0x8]
	int StatusValue;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SGContextMenuSpawner.SGUserWidget.UserWidget.Widget.Visual.Object
	MenuAnchor* ContextMenuAnchor;//[Offset: 0x2c8, Size: 0x8]
	SGContextMenu* ContextMenu;//[Offset: 0x2d0, Size: 0x8]
	void OpenContextMenuDT(DataTable* InSlotTypeDT);// 0x41f3e3fee041
	void OpenContextMenu(ContextMenuSlotType[] InSlotTypeArray);// 0x41f2e3fee041
	Widget* InitContextMenu();// 0x41f1e3fee041

--------------------------------
Class: MenuAnchor.ContentWidget.PanelWidget.Widget.Visual.Object
	class UserWidget* MenuClass;//[Offset: 0x140, Size: 0x8]
	delegate OnGetMenuContentEvent;//[Offset: 0x148, Size: 0x10]
	delegate OnGetUserMenuContentEvent;//[Offset: 0x158, Size: 0x10]
	byte Placement;//[Offset: 0x168, Size: 0x1]
	bool bFitInWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	bool ShouldDeferPaintingAfterWindowContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1]
	bool UseApplicationMenuStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 0x1]
	delegate OnMenuOpenChanged;//[Offset: 0x170, Size: 0x10]
	void ToggleOpen(bool bFocusOnOpen);// 0x19d2e3fee041
	bool ShouldOpenDueToClick();// 0x19d1e3fee041
	void SetPlacement(byte InPlacement);// 0x19cfe3fee041
	void Open(bool bFocusMenu);// 0x19cee3fee041
	bool IsOpen();// 0x19cde3fee041
	bool HasOpenSubMenus();// 0x19cce3fee041
	UserWidget* GetUserWidget__DelegateSignature();// 0x19cbe3fee041
	Vector2D GetMenuPosition();// 0x19cae3fee041
	void FitInWindow(bool bFit);// 0x19c9e3fee041
	void Close();// 0x19c8e3fee041

--------------------------------
Class: SGCreateInteractActorComponent.ActorComponent.Object
	class Actor* InteractActorClass;//[Offset: 0xb8, Size: 0x8]
	Actor* CreatedActor;//[Offset: 0xc0, Size: 0x8]
	Actor* GetCreatedActor();// 0x41f6e3fee041
	void DestroyCreatedActor();// 0x41f5e3fee041
	Actor* CreateGasActor(Vector Location, Rotator ActorRotation);// 0x41f4e3fee041

--------------------------------
Class: SGCrosshairStyleWidget.SGUserWidget.UserWidget.Widget.Visual.Object
	WidgetAnimation* Spread;//[Offset: 0x2c8, Size: 0x8]

--------------------------------
Class: SGCrosshairWidget.SGUserWidget.UserWidget.Widget.Visual.Object
	SGCrosshairStyleWidget* StyleWidget;//[Offset: 0x2c8, Size: 0x8]
	CanvasPanel* StyleContainer;//[Offset: 0x2d0, Size: 0x8]
	Image* CentralDot;//[Offset: 0x2d8, Size: 0x8]
	void PlayHitAnimation(bool bPenerateArmor);// 0x41fce3fee041
	void PlayHeadshotAnimation(bool bPenerateArmor);// 0x41fbe3fee041
	void CrosshairStyleFadeOut();// 0x41fae3fee041
	void CrosshairStyleFadeIn();// 0x41f9e3fee041
	void CrosshairFadeOut();// 0x41f8e3fee041
	void CrosshairFadeIn();// 0x41f7e3fee041

--------------------------------
Class: SGCustomizeCameraMode.SGCameraMode.Object

--------------------------------
Class: SGCustomizeCameraMode_WeaponAssemble.SGCustomizeCameraMode.SGCameraMode.Object

--------------------------------
Class: SGDamageStatics.BlueprintFunctionLibrary.Object
	void RegisterDamageEventObjectClass(class DamageEventObject DamageEventObjectClass);// 0x41fee3fee041
	DamageEventObject* CreateDamageEventObject(out const DamageEvent DamageEvent);// 0x41fde3fee041

--------------------------------
Class: SGDamageType.DamageType.Object
	float WalkMovementReductionPct;//[Offset: 0x3c, Size: 0x4]
	float WalkMovementReductionDuration;//[Offset: 0x40, Size: 0x4]
	float ForceZMomentumPct;//[Offset: 0x44, Size: 0x4]
	float SelfMomentumBoost;//[Offset: 0x48, Size: 0x4]
	bool bSelfMomentumBoostOnlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bForceZMomentum;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bPreventWalkingZMomentum;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bCausesBlood;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool WallHitType;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]
	void PlayDeathEffects(SGCharacter* DyingPawn);// 0x41ffe3fee041

--------------------------------
Class: SGDamageType_Burn.SGDamageType.DamageType.Object
	float Duration;//[Offset: 0x50, Size: 0x4]
	float DamagePerSecond;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: SGDamageType_Explode.SGDamageType.DamageType.Object

--------------------------------
Class: SGDataTableManager.Object
	FString[] DataTablePathList;//[Offset: 0x28, Size: 0x10]
	<enum,DataTable*> DataTables;//[Offset: 0x38, Size: 0x50]
	FString[] UnloadTableByRelativePath(FString InPathToContent);// 0x4208e3fee041
	bool UnloadTableByName(FString InTableName);// 0x4207e3fee041
	FText ServerKey2Text(FString InServerKey);// 0x4206e3fee041
	FName GetTableRowStructNameByTag(FName T);// 0x4205e3fee041
	FString GetTableName(enum Type);// 0x4204e3fee041
	DataTable* GetTableByTag(FName T);// 0x4203e3fee041
	DataTable* GetTable(enum Type);// 0x4202e3fee041
	void GetAllTableTags(out FName[] A);// 0x4201e3fee041
	SGDataTableManager* Get();// 0x4200e3fee041

--------------------------------
Class: SGDecalComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float FadeStartDelay;//[Offset: 0x658, Size: 0x4]
	float FadeDuration;//[Offset: 0x65c, Size: 0x4]
	bool bRandomRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 0x1]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x661, Size: 0x1]
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x4213e3fee041
	float GetFadeStartDelay();// 0x4212e3fee041
	float GetFadeDuration();// 0x4211e3fee041

--------------------------------
Class: SGDefaultDataSubsystem.GameInstanceSubsystem.Subsystem.Object
	void LevelPreLoad(FString LevelName);// 0x4214e3fee041

--------------------------------
Class: SGDemoNetDriver.DemoNetDriver.NetDriver.Object
	SGReplayInfo ReplayInfo;//[Offset: 0x1500, Size: 0x48]

--------------------------------
Class: SGReplayInfo
	FName ReplayType;//[Offset: 0x0, Size: 0x8]
	float StartTime;//[Offset: 0x8, Size: 0x4]
	FString OnFinish;//[Offset: 0x10, Size: 0x10]
	class SGReplayController* ObserverControllerClass;//[Offset: 0x20, Size: 0x8]
	int ObserverPlayerControllerId;//[Offset: 0x28, Size: 0x4]
	FString ReplayFileName;//[Offset: 0x30, Size: 0x10]
	bool bIsInBattleDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SGReplayController.SGPlayerController.PlayerController.Controller.Actor.Object
	Actor* FollowTarget;//[Offset: 0x858, Size: 0x8]
	delegate OnFollowTargetChanged;//[Offset: 0x860, Size: 0x10]
	bool bFollowTargetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 0x1]
	float FollowLocationInterpMax;//[Offset: 0x874, Size: 0x4]
	float FollowLocationInterpSpeed;//[Offset: 0x878, Size: 0x4]
	float FollowRotationInterpSpeed;//[Offset: 0x87c, Size: 0x4]
	Vector FollowLocationOffsetWhenNoCamera;//[Offset: 0x880, Size: 0xc]
	Vector ObserverAttachToMeshLocation;//[Offset: 0x88c, Size: 0xc]
	Rotator ObserverAttachToMeshRotation;//[Offset: 0x898, Size: 0xc]
	float Follow3PDist;//[Offset: 0x8a4, Size: 0x4]
	SpectatorPawn* ObserverPawn;//[Offset: 0x8a8, Size: 0x8]
	void StartSpectating(Actor* ViewTarget, bool bFPP);// 0x1bcee3fee041
	void SetFollowTarget(Actor* NewFollowActor, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x1bcde3fee041
	void SetCameraMode(FName NewCamMode);// 0x1bcce3fee041
	void OnReplayStateReset();// 0x1bcbe3fee041
	void OnFollowTargetChanged__DelegateSignature(Actor* FollowTarget);// 0x1bcae3fee041
	void ObserveActor(Actor* Actor, bool bTryAttachToMesh, bool bTryAttachToCamera);// 0x1bc9e3fee041
	void MoveObserverTo(Actor* Actor, bool Detach, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x1bc8e3fee041
	void MoveCameraToMesh(Character* InCharacter);// 0x1bc7e3fee041
	SpectatorPawn* GetObserverPawn();// 0x1bc6e3fee041
	bool GetMeshViewLocation(Pawn* InPawn, out Vector OutLocation);// 0x1bc5e3fee041
	bool GetMeshRotation(Pawn* InPawn, out Rotator OutRotation);// 0x1bc4e3fee041
	bool GetMeshLocationAndRotation(Pawn* InPawn, out Vector OutLocation, out Rotator OutRotation);// 0x1bc3e3fee041
	bool GetMeshLocation(Pawn* InPawn, out Vector OutLocation);// 0x1bc2e3fee041
	void AttachObserverToActor(Actor* TargetActor, Pawn* Observer, bool bTryAttachToMesh, bool bTryAttachToCamera);// 0x1bc1e3fee041

--------------------------------
Class: SGDoorBeUsedComponent.SGActorBeUsedComponent.ActorComponent.Object
	float MaxUseDistance;//[Offset: 0x11c, Size: 0x4]
	void PreUnlockAddUser(Actor* User);// 0x4251e3fee041

--------------------------------
Class: SGDoorLockComponent.ActorComponent.Object
	SGInventory*[] LootContainers;//[Offset: 0xb8, Size: 0x10]
	int VolumeID;//[Offset: 0xc8, Size: 0x4]
	void OnDoorUnLockHandle(enum DoorAction, SGCharacter* SGWhoIsItm, SGDoorBase* Door, SGInventory* BestKey);// 0x4254e3fee041
	void InitLootContainers();// 0x4253e3fee041
	void GetUnLockCofnigByVolumeID(int InVolumeID, out float LootExtendTime, out float LootExtendValidTime);// 0x4252e3fee041

--------------------------------
Class: SGDoorMovingPartInterface.Interface.Object

--------------------------------
Class: SGDoorSoundComponent.ActorComponent.Object
	AkAudioEvent* OpenSound;//[Offset: 0xb8, Size: 0x8]
	AkAudioEvent* CloseSound;//[Offset: 0xc0, Size: 0x8]
	AkAudioEvent* KickOpenSound;//[Offset: 0xc8, Size: 0x8]
	AkAudioEvent* KickFailSound;//[Offset: 0xd0, Size: 0x8]
	AkAudioEvent* UnlockSound;//[Offset: 0xd8, Size: 0x8]
	AkAudioEvent* CardUnlockSound;//[Offset: 0xe0, Size: 0x8]
	AkAudioEvent* ReLockSound;//[Offset: 0xe8, Size: 0x8]
	AkAudioEvent* LockCoolDownSound;//[Offset: 0xf0, Size: 0x8]
	bool PlaySoundFromDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]

--------------------------------
Class: SGDoorStateSwitcherComponent.SGShowSwithBaseComponent.Object
	float DelayTime;//[Offset: 0x48, Size: 0x4]
	SGDoorBase* Door;//[Offset: 0x50, Size: 0x8]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	void UpdateDoorState();// 0x425be3fee041

--------------------------------
Class: SGDoorSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: SGDynamicContentWidget.ContentWidget.PanelWidget.Widget.Visual.Object
	class UserWidget* ContentWidgetClass;//[Offset: 0x140, Size: 0x8]
	UserWidget* CreatedContentWidget;//[Offset: 0x148, Size: 0x8]
	SGUserWidget* DynamicContentPoolListOwner_Observer;//[Offset: 0x150, Size: 0x8]
	void RemoveContentWidget();// 0x4260e3fee041
	bool HasContentWidget();// 0x425fe3fee041
	UserWidget* GetContentWidget();// 0x425ee3fee041
	void CreateContentWidgetWithPool(SGUserWidget* PoolOwnerWidget);// 0x425de3fee041
	void CreateContentWidget();// 0x425ce3fee041

--------------------------------
Class: SGEffectSwitherComponent.SGShowSwithBaseComponent.Object
	SGShowControlEffectActor*[] EffectActorArr;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SGShowControlEffectActor.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x2e0, Size: 0x8]
	ParticleSystem* ParticleSystem;//[Offset: 0x2e8, Size: 0x8]
	BillboardComponent* BillboardComponent;//[Offset: 0x2f0, Size: 0x8]
	Object*[] NeedShowObjArr;//[Offset: 0x2f8, Size: 0x10]
	void RefreshShow();// 0x4e34e3fee041
	void NotNeedShow(Object* InObj);// 0x4e33e3fee041
	void NeedShow(Object* InObj);// 0x4e32e3fee041

--------------------------------
Class: SGEventsObjectInterface.Interface.Object

--------------------------------
Class: SGFactionStatics.BlueprintFunctionLibrary.Object
	bool OnSameFaction(Actor* Actor1, Actor* Actor2);// 0x4269e3fee041
	void MoveTeamToFaction(interface classNone TeamInfo, enum FactionType);// 0x4268e3fee041
	enum GetFactionTypeByCharacter(Character* Character);// 0x4267e3fee041
	enum GetFactionType(interface classNone TeamInfo);// 0x4266e3fee041
	enum GetFactionRelationType(const Object* WorldContext, enum FirstFactionType, enum SecondFactionType);// 0x4265e3fee041
	SGFaction* GetFaction(interface classNone TeamInfo);// 0x4264e3fee041
	enum GetCharacterFactionRelationType(Character* Character1, Character* Character2);// 0x4263e3fee041

--------------------------------
Class: SGFEAvatarCameraFOVComponent.ActorComponent.Object
	Actor* Owner;//[Offset: 0xb8, Size: 0x8]
	CameraActor* CameraActor;//[Offset: 0xc0, Size: 0x8]
	CameraComponent* CameraComponent;//[Offset: 0xc8, Size: 0x8]
	bool Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	float OriginAspectRatio;//[Offset: 0xf0, Size: 0x4]
	float OriginFOV;//[Offset: 0xf4, Size: 0x4]

--------------------------------
Class: SGReactionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: SGFence.Actor.Object
	bool bSplineEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	SplineComponent* SplineComponent;//[Offset: 0x2e8, Size: 0x8]
	enum BeginSelector;//[Offset: 0x2f0, Size: 0x1]
	StaticMesh* BeginMesh1;//[Offset: 0x2f8, Size: 0x8]
	StaticMesh* BeginMesh2;//[Offset: 0x300, Size: 0x8]
	StaticMesh* BeginMesh3;//[Offset: 0x308, Size: 0x8]
	StaticMesh* BeginMesh4;//[Offset: 0x310, Size: 0x8]
	bool bUseRandomForMiddle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	bool bUseMiddleSegmentsInOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 0x1]
	float UnitLengthForMiddle;//[Offset: 0x31c, Size: 0x4]
	float UnitSpacingForMiddle;//[Offset: 0x320, Size: 0x4]
	float PivotOffsetForMiddle;//[Offset: 0x324, Size: 0x4]
	RandomStream RandomStreamForMiddle;//[Offset: 0x328, Size: 0x8]
	StaticMesh* MiddleMesh1;//[Offset: 0x330, Size: 0x8]
	StaticMesh* MiddleMesh2;//[Offset: 0x338, Size: 0x8]
	StaticMesh* MiddleMesh3;//[Offset: 0x340, Size: 0x8]
	StaticMesh* MiddleMesh4;//[Offset: 0x348, Size: 0x8]
	enum EndSelector;//[Offset: 0x350, Size: 0x1]
	StaticMesh* EndMesh1;//[Offset: 0x358, Size: 0x8]
	StaticMesh* EndMesh2;//[Offset: 0x360, Size: 0x8]
	StaticMesh* EndMesh3;//[Offset: 0x368, Size: 0x8]
	StaticMesh* EndMesh4;//[Offset: 0x370, Size: 0x8]

--------------------------------
Class: SGStaticFence.SGFence.Actor.Object

--------------------------------
Class: SGBreakableFence.SGFence.Actor.Object

--------------------------------
Class: SGFireButton.Button.ContentWidget.PanelWidget.Widget.Visual.Object
	delegate PostStartFireByPress;//[Offset: 0x490, Size: 0x10]
	bool bIsLeftFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1]
	void OnReleasedEvent();// 0x4277e3fee041
	void OnPressedEvent();// 0x4276e3fee041

--------------------------------
Class: SGFirstPersonCameraMode.SGCameraMode.Object
	FName CameraSocketName;//[Offset: 0xb4, Size: 0x8]
	CurveVector* LocationModifyCurve;//[Offset: 0xc0, Size: 0x8]
	CurveVector* RotationModifyCurve;//[Offset: 0xc8, Size: 0x8]
	SGHUDShakeEvents* HUDShakeEvents;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: SGFirstPersonCameraMode_ClimbLadder.SGFirstPersonCameraMode.SGCameraMode.Object
	float UnlimitedMaxPitch;//[Offset: 0xe0, Size: 0x4]
	float UnlimitedMinPitch;//[Offset: 0xe4, Size: 0x4]
	float LimitToggleDistanceThreshold;//[Offset: 0xe8, Size: 0x4]

--------------------------------
Class: SGFirstPersonCameraMode_Crouch.SGFirstPersonCameraMode.SGCameraMode.Object
	float UnlimitedMaxPitch;//[Offset: 0xe0, Size: 0x4]
	float UnlimitedMinPitch;//[Offset: 0xe4, Size: 0x4]
	float LimitToggleDistanceThreshold;//[Offset: 0xe8, Size: 0x4]

--------------------------------
Class: SGFirstPersonCameraMode_DBNO.SGFirstPersonCameraMode.SGCameraMode.Object
	float UnlimitedMaxPitch;//[Offset: 0xe0, Size: 0x4]
	float UnlimitedMinPitch;//[Offset: 0xe4, Size: 0x4]
	float LimitToggleDistanceThreshold;//[Offset: 0xe8, Size: 0x4]

--------------------------------
Class: SGFirstPersonCameraMode_Default.SGFirstPersonCameraMode.SGCameraMode.Object
	float InterpScaleWithSpeedSq;//[Offset: 0xe0, Size: 0x4]

--------------------------------
Class: SGFirstPersonCameraMode_FreeView.SGFirstPersonCameraMode.SGCameraMode.Object
	Vector2D FreeViewMovement;//[Offset: 0xe0, Size: 0x8]
	float FreeViewMinYaw;//[Offset: 0xe8, Size: 0x4]
	float FreeViewMaxYaw;//[Offset: 0xec, Size: 0x4]
	float FreeViewMinPitch;//[Offset: 0xf0, Size: 0x4]
	float FreeViewMaxPitch;//[Offset: 0xf4, Size: 0x4]

--------------------------------
Class: SGFirstPersonCameraMode_Prone.SGFirstPersonCameraMode.SGCameraMode.Object
	float UnlimitedMaxPitch;//[Offset: 0xe0, Size: 0x4]
	float UnlimitedMinPitch;//[Offset: 0xe4, Size: 0x4]
	float LimitToggleDistanceThreshold;//[Offset: 0xe8, Size: 0x4]

--------------------------------
Class: SGFirstPersonCameraMode_ProneZooming.SGFirstPersonCameraMode.SGCameraMode.Object
	bool bEnableCameraSway;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	float SwayScale_Horizontal;//[Offset: 0xe4, Size: 0x4]
	float SwayScale_Vertical;//[Offset: 0xe8, Size: 0x4]
	float MaxSwayAmount_Vertical;//[Offset: 0xec, Size: 0x4]
	float MaxSwayAmount_Horizontal;//[Offset: 0xf0, Size: 0x4]
	float SwayInterpSpeed;//[Offset: 0xf4, Size: 0x4]
	float SwayDeltaTimeLimit;//[Offset: 0xf8, Size: 0x4]
	float ConfigSpeedThreashold;//[Offset: 0xfc, Size: 0x4]

--------------------------------
Class: SGFirstPersonCameraMode_Rescuer.SGFirstPersonCameraMode.SGCameraMode.Object
	float UnlimitedMaxPitch;//[Offset: 0xe0, Size: 0x4]
	float UnlimitedMinPitch;//[Offset: 0xe4, Size: 0x4]
	float LimitToggleDistanceThreshold;//[Offset: 0xe8, Size: 0x4]

--------------------------------
Class: SGFirstPersonCameraMode_Zooming.SGFirstPersonCameraMode.SGCameraMode.Object
	bool bEnableCameraSway;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	float SwayScale_Horizontal;//[Offset: 0xe4, Size: 0x4]
	float SwayScale_Vertical;//[Offset: 0xe8, Size: 0x4]
	float MaxSwayAmount_Vertical;//[Offset: 0xec, Size: 0x4]
	float MaxSwayAmount_Horizontal;//[Offset: 0xf0, Size: 0x4]
	float SwayInterpSpeed;//[Offset: 0xf4, Size: 0x4]
	float SwayDeltaTimeLimit;//[Offset: 0xf8, Size: 0x4]
	float ConfigSpeedThreashold;//[Offset: 0xfc, Size: 0x4]

--------------------------------
Class: SGFlowBase.Object
	void ExecEndFlow(byte InState);// 0x427ce3fee041
	void EndFlow(byte InState);// 0x427be3fee041
	void BeginFlow();// 0x427ae3fee041

--------------------------------
Class: SGFlowManager.Actor.Object
	class SGFlowBase[] FlowComponentClasses;//[Offset: 0x2e0, Size: 0x10]
	SGFlowBase*[] FlowComponents;//[Offset: 0x2f0, Size: 0x10]

--------------------------------
Class: SGFoliageSoundComponent.FoliageSoundComponent.AudioStudioComponent.ActorComponent.Object

--------------------------------
Class: SGFreeLadder.Actor.Object
	BoxComponent* TriggerBox;//[Offset: 0x2e0, Size: 0x8]
	SceneComponent* TopEnter;//[Offset: 0x2e8, Size: 0x8]
	SceneComponent* BottomEnter;//[Offset: 0x2f0, Size: 0x8]
	void OnLadderEndOverlap(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4282e3fee041
	void OnLadderBeginOverlap(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult OverlapInfo);// 0x4281e3fee041
	Rotator GetTopEnterRotation();// 0x4280e3fee041
	Vector GetTopEnterLocation();// 0x427fe3fee041
	Rotator GetBottomEnterRotation();// 0x427ee3fee041
	Vector GetBottomEnterLocation();// 0x427de3fee041

--------------------------------
Class: SGGameInstance.GameInstance.Object
	bool ShaderPipelineCacheOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1, Size: 0x1]
	FString ShaderPipelineCacheVersion;//[Offset: 0x1b8, Size: 0x10]
	delegate OnWorldBeginPlay;//[Offset: 0x1d0, Size: 0x10]
	int DeviceLevel_HighEnd;//[Offset: 0x200, Size: 0x4]
	delegate OnScreenOrientationChanged;//[Offset: 0x208, Size: 0x10]
	PlayerController* CacheLocalPC;//[Offset: 0x218, Size: 0x8]
	class SGGameInstanceComponent[] ComponentClasses;//[Offset: 0x220, Size: 0x10]
	SGGameInstanceComponent*[] Components;//[Offset: 0x230, Size: 0x10]
	void SendLog(out const FString savePath);// 0x4288e3fee041
	void SendLocalLog(out const FString savePath, out const FString LocalLogName);// 0x4287e3fee041
	void SendCppPatch(out const FString PatchPath, out const FString SymPath);// 0x4286e3fee041
	void ReportLuaErrorMsg(out FString Err);// 0x4285e3fee041
	SGGameInstanceComponent* FindGIComponentByClass(class SGGameInstanceComponent InClass);// 0x4284e3fee041
	FString ExecDoString(out FString Cmd);// 0x4283e3fee041

--------------------------------
Class: SGGameInstanceCmdObjectManagerComponent.SGGameInstanceComponent.Object
	SGCmdObjectManager* CmdObjectManager;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SGGameInstanceConsoleCommandComponent.SGGameInstanceComponent.Object
	void DumpUserWidgetDetailInfo(out FString UserWidgetName);// 0x428ce3fee041
	void DumpPlatformAndAllocatorStats();// 0x428be3fee041
	void DebugInfo(FString position);// 0x428ae3fee041
	void CloseUMG(FString UMGClass);// 0x4289e3fee041

--------------------------------
Class: SGGameInstanceG6PlatformComponent.SGGameInstanceComponent.Object
	class G6PlatformGameInstance* G6PlatformGameInstanceClass;//[Offset: 0x28, Size: 0x8]
	G6PlatformGameInstance* G6PlatformGameInstance;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: G6PlatformGameInstance.Object
	DebugConsole* DebugConsole;//[Offset: 0x28, Size: 0x8]
	G6CustomScriptStatProfiler* Profiler;//[Offset: 0x30, Size: 0x8]
	bool bUseG6OnlineSession;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	G6LogicStepProcessor* LogicStepProcessor;//[Offset: 0x70, Size: 0x8]
	void Lua(FString strLua);// 0x58f5e3fee041
	void DAWLua(FString strLua);// 0x58f4e3fee041
	void ConsoleCMD(out FString Cmd);// 0x58f3e3fee041

--------------------------------
Class: DebugConsole.Object
	delegate OnCustomConsoleCommandCommit;//[Offset: 0x38, Size: 0x10]
	delegate OnErrorMessageReceived;//[Offset: 0x48, Size: 0x10]
	delegate OnNewMessageReceived;//[Offset: 0x58, Size: 0x10]
	void UnregisterCustomConsoleCommandInfo(out const FString[] InCustomCommandList);// 0x58dbe3fee041
	void SetNonFilterMessagesUIDRange(int InStartId, int InEndId);// 0x58dae3fee041
	void SetMaxMessagesCount(int InMaxCount);// 0x58d9e3fee041
	void SetLogLevel(byte LogLevel);// 0x58d8e3fee041
	void SetLogFilterText(out const FText InFilterText);// 0x58d7e3fee041
	void SetLogDisplayCategory(out const FName CategoryName);// 0x58d6e3fee041
	void ResetMessageFilter();// 0x58d5e3fee041
	void RegisterCustomConsoleCommandInfo(out const FString[] InCustomCommandList);// 0x58d4e3fee041
	void OnNewMessageReceivedEvent__DelegateSignature(FString MessageMarkupText);// 0x58d3e3fee041
	void OnErrorMessageReceivedEvent__DelegateSignature();// 0x58d2e3fee041
	void OnCustomConsoleCommandCommittedEvent__DelegateSignature(FString CommandName, FString ExtraArgs);// 0x58d1e3fee041
	bool IsMessageFiltered(int InMessageIndex);// 0x58d0e3fee041
	int GetMessageUID(int InMessageIndex);// 0x58cfe3fee041
	FString GetMessageText(int InMessageIndex);// 0x58cee3fee041
	int GetCurrentMessagesCount();// 0x58cde3fee041
	void GetConsoleInputHistory(out FString[] OutHistoryInputList);// 0x58cce3fee041
	void GetCommandAutoCompleteSuggestions(out const FText InInputText, out FString[] OutAutoCompleteList);// 0x58cbe3fee041
	FName[] GetAvailableLogCategories();// 0x58cae3fee041
	void CommitConsoleCommand(out const FText InText);// 0x58c9e3fee041
	void ClearAllDisplayText();// 0x58c8e3fee041

--------------------------------
Class: G6CustomScriptStatProfiler.Object
	void UpdateStatProfilerData();// 0x58eae3fee041
	void StartScopeByIndex(int InStatIndex);// 0x58e9e3fee041
	int StartScope(FString InStatName);// 0x58e8e3fee041
	bool IsStatProfileEnabled();// 0x58e7e3fee041
	FString GetStatItemUniqueFullName(int InStatItemIndex);// 0x58e6e3fee041
	void GetStatItemParentLevel(int InStatItemIndex, out int[] OutParentLevelItems);// 0x58e5e3fee041
	int GetStatItemParentIndex(int InStatItemIndex);// 0x58e4e3fee041
	int GetStatItemMaxChildCallDepth(int InStatItemIndex);// 0x58e3e3fee041
	FString GetStatItemDisplayName(int InStatItemIndex);// 0x58e2e3fee041
	FString GetStatItemData(int InStatItemIndex, out float[] OutItemData);// 0x58e1e3fee041
	void GetStatItemChildren(int InStatItemIndex, out int[] OutChildItems, bool bScriptOnly);// 0x58e0e3fee041
	int GetStatItemCallDepth(int InStatItemIndex);// 0x58dfe3fee041
	int GetItemIndexByNameAndDepth(FString InName, int InCallDepth, FString InFullUniqueName);// 0x58dee3fee041
	void EndScope(FString InStatName);// 0x58dde3fee041
	int CreateScriptStat(FString InStatName, FString InStatDesc);// 0x58dce3fee041

--------------------------------
Class: G6LogicStepProcessor.Object
	G6LogicStep* m_Cur_Running_LogicStep;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: G6LogicStep.Object
	bool Shutdown();// 0x58ebe3fee041

--------------------------------
Class: SGGameInstanceGameInfoComponent.SGGameInstanceComponent.Object
	SGGameInfo SGGameInfo;//[Offset: 0x28, Size: 0x14]
	delegate OverrideGameModeID;//[Offset: 0x40, Size: 0x10]
	int SwitchesFlag;//[Offset: 0x50, Size: 0x4]
	void RefreshDifficulty();// 0x429ce3fee041
	void PostLoadMap(World* World);// 0x429be3fee041
	void OnWorldBeginTearDown(World* World);// 0x429ae3fee041
	void OnLevelRemoveFromWorld(Level* Level, World* World);// 0x4299e3fee041
	void OnLevelAddToWorld(Level* Level, World* World);// 0x4298e3fee041
	void OnBeginGameInit();// 0x4297e3fee041
	void OnAddToRoot(FString Name);// 0x4296e3fee041
	bool GetTypeSwitch(enum SwitcherType);// 0x4295e3fee041
	void GetModeIDByModeOption(FString ModeOption, out uint32 InMainModeID, out uint32 InSubModeID, out uint32 Difficulty, out uint32 SpecialID);// 0x4294e3fee041
	uint32 GetMapIDByMapName(FString MapName);// 0x4293e3fee041
	class GameModeBase GetGameModeByModeID(uint32 MainModeID, uint32 SubModeID);// 0x4292e3fee041
	void DoOverrideGameModeID(int InMainModeID, int InSubModeID);// 0x4291e3fee041
	void CheckLoadLevel(World* World, ActorComponent* ActorComponent);// 0x4290e3fee041
	void BeginLoadingScreen(FString MapName);// 0x428fe3fee041
	void AdjustWorldComposition(World* World);// 0x428ee3fee041
	void AdjustLoadLevel(World* World);// 0x428de3fee041

--------------------------------
Class: SGGameInfo
	uint32 MainModeID;//[Offset: 0x0, Size: 0x4]
	uint32 SubModeID;//[Offset: 0x4, Size: 0x4]
	uint32 MapID;//[Offset: 0x8, Size: 0x4]
	uint32 Difficulty;//[Offset: 0xc, Size: 0x4]
	uint32 SpecialID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SGGameInstanceLoadingScreenComponent.SGGameInstanceComponent.Object
	int PanelZOrder;//[Offset: 0x28, Size: 0x4]
	delegate LoadingFinishDelegate;//[Offset: 0x30, Size: 0x10]
	SGLoadingInfo[] LoadingInfoArray;//[Offset: 0x40, Size: 0x10]
	UserWidget* UMGLoadingScreenWidget;//[Offset: 0x50, Size: 0x8]
	LoadingAnimation* LoadingAnimation;//[Offset: 0x58, Size: 0x8]
	CanvasPanel* rootCanvas;//[Offset: 0x60, Size: 0x8]
	bool bUsePostLoadingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	FString LastLoadingPath;//[Offset: 0x70, Size: 0x10]
	FString[] LoadingScreenMovie;//[Offset: 0x80, Size: 0x10]
	float MinMovieTime;//[Offset: 0x90, Size: 0x4]
	FString MovieOrderLevel;//[Offset: 0x98, Size: 0x10]
	void TickAnimation(float DeltaTime);// 0x1741e3fee041
	void SetTopRootCanvas(CanvasPanel* rootCanvasNew, int InPanelZOrder);// 0x1740e3fee041
	void SetLoadingScreenMovies(FString[] InMovies, float InMinMovieTime, FString OrderLevel);// 0x173fe3fee041
	void SetBattleResult(bool bSucess);// 0x173ee3fee041
	void ReAddToViewport(World* World);// 0x173de3fee041
	void PlayLoadingAnimation(UserWidget* Widget);// 0x173ce3fee041
	void LoadingFinishDelegate__DelegateSignature();// 0x173be3fee041
	void InitOBBattleResult();// 0x173ae3fee041
	void HiddenLoadingWidget();// 0x1739e3fee041
	WidgetAnimation* GetLoadScreenAnimation(FString AnimName);// 0x1738e3fee041
	bool GetBattleResult();// 0x1737e3fee041
	void EndLoadingScreen(World* World);// 0x1736e3fee041
	void BeginLoadingScreen(FString MapName);// 0x1735e3fee041
	void AddToRootCanvas(UserWidget* panel);// 0x1734e3fee041

--------------------------------
Class: SGLoadingInfo
	FString MapTag;//[Offset: 0x0, Size: 0x10]
	FString PreMapTag;//[Offset: 0x10, Size: 0x10]
	bool bUsePostLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	FString[] LoadingPathArray;//[Offset: 0x28, Size: 0x10]
	int CurrentMovieIndex;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SGGameInstancePluginManagerComponent.SGGameInstanceComponent.Object
	class MFPWPluginManager* PluginManagerClass;//[Offset: 0x28, Size: 0x8]
	MFPWPluginManager* PluginManager;//[Offset: 0x30, Size: 0x8]
	void InitOnFEngineLoopInitComplete();// 0x429de3fee041

--------------------------------
Class: SGGameInstanceReplaySubsystem.GameInstanceSubsystem.Subsystem.Object
	delegate OnReplayStateGameEvent;//[Offset: 0x30, Size: 0x10]
	delegate PreKillCamRecordingStop;//[Offset: 0x40, Size: 0x10]
	delegate PostKillCamRecordingStop;//[Offset: 0x50, Size: 0x10]
	SGLocalFileKillCamInfo LocalFileKillCamInfo;//[Offset: 0x90, Size: 0x60]
	void StopRecordingKillCam();// 0x42b8e3fee041
	void StartRecordingReplay(FString ReplayName, FString ReplayFriendlyName, out const SGReplayInfo ReplayInfo, out FString[] AdditionalOptions);// 0x42b7e3fee041
	void StartRecordingKillCam(bool bForce);// 0x42b6e3fee041
	void StartDSReplayRecording(bool bForce);// 0x42b5e3fee041
	void PreGotoHallroom();// 0x42b4e3fee041
	bool PlayReplay(FString ReplayName, out const SGReplayInfo ReplayInfo, out FString[] Options);// 0x42b3e3fee041
	void PauseReplayByPlayer(bool InPause, PlayerController* InPlayer);// 0x42b2e3fee041
	void PauseReplay(bool InPause);// 0x42b1e3fee041
	void OnCharacterReadyToPlay(Character* Character);// 0x42b0e3fee041
	bool IsReplayPlaybackStarted();// 0x42afe3fee041
	bool IsRecordingReplay();// 0x42aee3fee041
	bool IsRecordingKillCam();// 0x42ade3fee041
	bool IsPlayingReplayPaused();// 0x42ace3fee041
	bool IsPlayingReplay();// 0x42abe3fee041
	bool IsPlaybackLevelFullyLoaded(int LogLevels, bool bRemoveFailedLevels);// 0x42aae3fee041
	bool IsKillCamEnabled(bool bWriteLog);// 0x42a9e3fee041
	void GotoTime(const float TimeInSeconds, delegate InOnGotoTimeDelegate);// 0x42a8e3fee041
	SGDemoNetDriver* GetSGDemoNetDriver();// 0x42a7e3fee041
	FString GetGUIDForActor(const Actor* InActor);// 0x42a6e3fee041
	float GetDemoTotalTime();// 0x42a5e3fee041
	float GetDemoCurrentTime();// 0x42a4e3fee041
	SGGameInstanceReplaySubsystem* Get(Object* WorldContextObject);// 0x42a3e3fee041
	void GameFlowStateChanged(FName NewState, FName OldState);// 0x42a2e3fee041
	void EnableKillCam(bool bEnable);// 0x42a1e3fee041
	void DestroyGameNetDriver();// 0x42a0e3fee041
	LocalPlayer* CreateObserverPlayer(class SGReplayController ObserverControllerClass, int ControllerId);// 0x429fe3fee041
	bool BP_GetCurrentReplayInfo(out SGReplayInfo OutReplayInfo);// 0x429ee3fee041

--------------------------------
Class: SGLocalFileKillCamInfo
	float DeathServerTime;//[Offset: 0x0, Size: 0x4]
	int64 VictimGID;//[Offset: 0x8, Size: 0x8]
	int64 KillerGID;//[Offset: 0x10, Size: 0x8]
	FString KillerName;//[Offset: 0x18, Size: 0x10]
	int VictimNetGUID;//[Offset: 0x28, Size: 0x4]
	Vector VictimLocation;//[Offset: 0x2c, Size: 0xc]
	int KillerNetGUID;//[Offset: 0x38, Size: 0x4]
	Vector KillerLocation;//[Offset: 0x3c, Size: 0xc]
	float ReplayDemoStartTime;//[Offset: 0x48, Size: 0x4]
	float ReplayDemoEndTime;//[Offset: 0x4c, Size: 0x4]
	FString ReplayFileName;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: SGGameInstanceStatics.BlueprintFunctionLibrary.Object
	void StopMovie(const Object* WorldContextObject);// 0x42d4e3fee041
	void SetNextLoadingMovie(const Object* WorldContextObject, FString[] InMovies, float MinMovieTime, FString OrderLevel);// 0x42d3e3fee041
	void RecoverStreamingLevel(const Object* WorldContextObject);// 0x42d2e3fee041
	void PlayLoadingScreenAnimation(UserWidget* Widget);// 0x42d1e3fee041
	bool PlayKillCamReplay(const Object* WorldContextObject, FString OnFinish, bool bForce);// 0x42d0e3fee041
	void PausePlayReplay(const Object* WorldContextObject, bool bPause);// 0x42cfe3fee041
	bool IsReplayPlaybackStarted(const Object* WorldContextObject);// 0x42cee3fee041
	bool IsRecordingReplay(const Object* WorldContextObject);// 0x42cde3fee041
	bool IsRecordingKillCam(const Object* WorldContextObject);// 0x42cce3fee041
	bool IsPlayingReplay(const Object* WorldContextObject);// 0x42cbe3fee041
	bool IsPlayingKillCam(const Object* WorldContextObject);// 0x42cae3fee041
	bool IsMoviePlaying(const Object* WorldContextObject);// 0x42c9e3fee041
	bool IsKillCamFullyLoaded(const Object* WorldContextObject);// 0x42c8e3fee041
	bool IsKillCamEnabled(const Object* WorldContextObject);// 0x42c7e3fee041
	bool HasKillCamReplay(const Object* WorldContextObject);// 0x42c6e3fee041
	GameplayTag GetRecoveryTagTearGas(const Object* WorldContextObject);// 0x42c5e3fee041
	GameplayTag GetRecoveryTagPain(const Object* WorldContextObject);// 0x42c4e3fee041
	GameplayTag GetRecoveryTagOutOfEndurance(const Object* WorldContextObject);// 0x42c3e3fee041
	GameplayTag GetRecoveryTagEnduranceLoss(const Object* WorldContextObject);// 0x42c2e3fee041
	GameplayTag GetRecoveryTagBoneBreak(const Object* WorldContextObject);// 0x42c1e3fee041
	GameplayTag GetRecoveryTagBleed(const Object* WorldContextObject);// 0x42c0e3fee041
	SGGameInstanceLoadingScreenComponent* GetLoadingScreenComponent(SGGameInstance* GameInstance);// 0x42bfe3fee041
	SGGameInstance* GetGameInstance(const Object* WorldContextObject);// 0x42bee3fee041
	SGGameInstanceGameInfoComponent* GetGameInfoComponent(SGGameInstance* GameInstance);// 0x42bde3fee041
	SGCmdObjectManager* GetCmdObjectManager(SGGameInstance* GameInstance);// 0x42bce3fee041
	void EnableKillCam(const Object* WorldContextObject, bool bEnable);// 0x42bbe3fee041
	void DeactiveStreamingLevel(const Object* WorldContextObject);// 0x42bae3fee041
	void ActiveStreamingLevel(const Object* WorldContextObject, FString LevelName);// 0x42b9e3fee041

--------------------------------
Class: SGGameInstanceSwitchConfigComponent.SGGameInstanceComponent.Object
	World* InitWorld;//[Offset: 0x28, Size: 0x8]
	void OnPostLoadMapWithWorld(World* InWorld);// 0x42d5e3fee041

--------------------------------
Class: SGGameInstanceSwitchLevelComponent.SGGameInstanceComponent.Object
	FString LevelName;//[Offset: 0x28, Size: 0x10]
	FString CachedLevelName;//[Offset: 0x38, Size: 0x10]
	World* InitWorld;//[Offset: 0x48, Size: 0x8]
	void RecoverStreamingLevel();// 0x42dbe3fee041
	void OnPostLoadMapWithWorld(World* InWorld);// 0x42dae3fee041
	void OnGraphicsQualityLevelChanged(byte InQuality);// 0x42d9e3fee041
	void DeactiveStreamingLevel();// 0x42d8e3fee041
	void CheckMemoryState();// 0x42d7e3fee041
	void ActiveStreamingLevel(FString LevelName);// 0x42d6e3fee041

--------------------------------
Class: SGGameInstanceWeakNetworkComponent.SGGameInstanceComponent.Object
	delegate OnNetWorkChanged;//[Offset: 0x28, Size: 0x10]
	MFGCloudNetworkObserver* NetworkObserver;//[Offset: 0x38, Size: 0x8]
	UserWidget* ReconnectWidget;//[Offset: 0x40, Size: 0x8]
	void PreLoadMap(FString Name);// 0x174be3fee041
	void PostLoadMap(World* World);// 0x174ae3fee041
	void OnNetworkTryReconnect(NetConnection* NetConnection);// 0x1749e3fee041
	void OnNetworkReconnect(NetConnection* NetConnection);// 0x1748e3fee041
	void OnNetWorkChangedEvent__DelegateSignature(int InNetType);// 0x1747e3fee041

--------------------------------
Class: MFGCloudNetworkObserver.Object

--------------------------------
Class: SGGameModeActivityManagerComponent.ActorComponent.Object
	<enum,ActivityRequireComponentInfo> ActivityRequireComponentInfos;//[Offset: 0xc0, Size: 0x50]
	enum[] ActivatedActivities;//[Offset: 0x110, Size: 0x10]
	bool bisThemeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	enum[] EditorTestActivities;//[Offset: 0x138, Size: 0x10]
	void OnSetPawn(PlayerController* PC, Pawn* NewPawn);// 0x42dde3fee041
	void OnBeginGameInit();// 0x42dce3fee041

--------------------------------
Class: ActivityRequireComponentInfo
	class ActorComponent* ActivityGameStateComponent;//[Offset: 0x0, Size: 0x8]
	class ActorComponent* ActivityPlayerStateComponent;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SGGameModeChoosePlayerStartComponent.ActorComponent.Object
	Actor* LastStartSpot;//[Offset: 0xc0, Size: 0x8]
	bool ShouldSpawnAtStartSpot(Controller* Player);// 0x42e3e3fee041
	bool ShouldSpawnAtPlayerStart(Controller* Player, PlayerStart* PlayerStart);// 0x42e2e3fee041
	float RatePlayerStart(Controller* Player, PlayerStart* P);// 0x42e1e3fee041
	PlayerStartGroup[] GetAllUnUsePMCPlayerStart();// 0x42e0e3fee041
	Actor* ChoosePlayerStart(Controller* Player);// 0x42dfe3fee041
	float AdjustNearbyPlayerStartScore(const Controller* Player, const Controller* OtherController, const Character* OtherCharacter, out const Vector StartLoc, const PlayerStart* P);// 0x42dee3fee041

--------------------------------
Class: PlayerStartGroup
	int GroupIndex;//[Offset: 0x0, Size: 0x4]
	Actor*[] PlayerStarts;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SGGameModeComponentInterface.Interface.Object
	void StartPlay();// 0x42e6e3fee041
	GameState* GetGameState();// 0x42e5e3fee041
	GameMode* GetGameMode();// 0x42e4e3fee041

--------------------------------
Class: SGGameModeEndCondition.Object
	GameState* GetAGameState();// 0x42e8e3fee041
	bool Evaluate();// 0x42e7e3fee041

--------------------------------
Class: SGGameModeEndCondition_Tickets.SGGameModeEndCondition.Object

--------------------------------
Class: SGGameModeEndCondition_TimesUp.SGGameModeEndCondition.Object

--------------------------------
Class: SGGameModeEndConditionComponent.ActorComponent.Object
	class SGGameModeEndCondition[] EndConditionClasses;//[Offset: 0xb8, Size: 0x10]
	SGGameModeEndCondition*[] EndConditions;//[Offset: 0xc8, Size: 0x10]
	bool Evaluate();// 0x42e9e3fee041

--------------------------------
Class: SGGameModeEvents.SGGameInstanceComponent.Object
	delegate Login;//[Offset: 0x30, Size: 0x10]
	delegate PostLogin;//[Offset: 0x40, Size: 0x10]
	delegate Logout;//[Offset: 0x50, Size: 0x10]
	delegate Killed;//[Offset: 0x60, Size: 0x10]
	delegate LaterKilled;//[Offset: 0x70, Size: 0x10]
	delegate DBNOPlayer;//[Offset: 0x80, Size: 0x10]
	delegate MatchStateChanged;//[Offset: 0x90, Size: 0x10]
	delegate PreGameFlowStateChanged;//[Offset: 0xa0, Size: 0x10]
	delegate GameFlowStateChanged;//[Offset: 0xb0, Size: 0x10]
	delegate GameModePlayerFinishGameEvent;//[Offset: 0xc0, Size: 0x10]
	delegate GameModePrePlayerFinishGameEvent;//[Offset: 0xd0, Size: 0x10]
	delegate ReqPlayerFinishGameEvent;//[Offset: 0xe0, Size: 0x10]
	delegate ReqOBPlayerFinishGameEvent;//[Offset: 0xf0, Size: 0x10]
	delegate OnReqExitWatchGame;//[Offset: 0x100, Size: 0x10]
	delegate OnDSParamPrepared;//[Offset: 0x110, Size: 0x10]
	delegate OnQuestStateChange;//[Offset: 0x120, Size: 0x10]
	delegate OnQuestGraphStatusChange;//[Offset: 0x130, Size: 0x10]
	delegate OnQuestProgressChange;//[Offset: 0x140, Size: 0x10]
	delegate OnMissionReplicateDataChanged;//[Offset: 0x150, Size: 0x10]
	bool bQuestReportInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	delegate OnMissionFlowReplicateDataChanged;//[Offset: 0x168, Size: 0x10]
	delegate OnAllPMCFinishSpawning;//[Offset: 0x178, Size: 0x10]
	delegate RestartPlayer;//[Offset: 0x188, Size: 0x10]
	delegate OnAISpawned;//[Offset: 0x198, Size: 0x10]
	delegate OnAISpawnedForDebug;//[Offset: 0x1a8, Size: 0x10]
	delegate OnAIActived;//[Offset: 0x1b8, Size: 0x10]
	delegate OnApplicationWillDeactive;//[Offset: 0x1c8, Size: 0x10]
	delegate OnApplicationHasReactive;//[Offset: 0x1d8, Size: 0x10]
	delegate OnServerLoadComplete;//[Offset: 0x1e8, Size: 0x10]
	delegate OnGameTimeOut;//[Offset: 0x1f8, Size: 0x10]
	delegate OnGameBegin;//[Offset: 0x208, Size: 0x10]
	delegate OnGameDeployIn;//[Offset: 0x218, Size: 0x10]
	delegate OnBeginGameInit;//[Offset: 0x228, Size: 0x10]
	delegate OnActivityInit;//[Offset: 0x238, Size: 0x10]
	delegate BeginHook;//[Offset: 0x248, Size: 0x10]
	delegate PreGotoHallroom;//[Offset: 0x258, Size: 0x10]
	delegate OnEscapePointReport;//[Offset: 0x268, Size: 0x10]
	delegate GameModePlayerStartGameEvent;//[Offset: 0x278, Size: 0x10]
	delegate OnChaseActivityStateChange;//[Offset: 0x288, Size: 0x10]
	delegate OnLevelAddToWorld;//[Offset: 0x298, Size: 0x10]
	delegate OnLevelRemoveFromWorld;//[Offset: 0x2a8, Size: 0x10]
	delegate OnDoorGateReport;//[Offset: 0x2b8, Size: 0x10]
	delegate OnLootPointSpawnCompleted;//[Offset: 0x2c8, Size: 0x10]
	delegate OnWatchGameStateChanged;//[Offset: 0x2d8, Size: 0x10]
	SGGameModeEvents* GetSGGameModeEvents(Object* InWorldContextObject);// 0x42ece3fee041
	bool CanBroadcastMissionReplicateDataChanged();// 0x42ebe3fee041
	bool CanBroadcastMissionFlowReplicateDataChanged();// 0x42eae3fee041

--------------------------------
Class: SGGameModeGameFlowComponent.ActorComponent.Object
	bool BeginGameInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool HasBeginGameInit();// 0x42efe3fee041
	void DelayForBroadcastBeginGameInit(float Time);// 0x42eee3fee041
	void BroadcastBeginGameInit();// 0x42ede3fee041

--------------------------------
Class: SGGameModeInventoryManagerComponent.ActorComponent.Object
	SGActorInventoryFactoryComponent*[] InventoryFactoryComponents;//[Offset: 0xd0, Size: 0x10]
	int OneTickMaxSpawnCount;//[Offset: 0xe0, Size: 0x4]
	float OneTickMaxSecondCost;//[Offset: 0xe4, Size: 0x4]
	<int,int> ItemShieldRandom;//[Offset: 0xf0, Size: 0x50]
	<int,int> GuaranteeItemShieldRandom;//[Offset: 0x140, Size: 0x50]
	delegate OnSpawnLootInventoryOver;//[Offset: 0x190, Size: 0x10]
	void SetShieldRandomByItemID(int64 ItemID, int Val);// 0x42f8e3fee041
	void SetGuaranteeShieldRandomByItemID(int64 ItemID, int Val);// 0x42f7e3fee041
	void ResetAllLootPoint(bool bRespawn);// 0x42f6e3fee041
	void OnSpawnLootItem(SGPickup* SGPickup, SGInventory* LootContainer, bool bIsFullWeapon, int64 ItemID, int ItemCount, int Value, bool bLootGuarantee);// 0x42f5e3fee041
	void OnBeginGameInit();// 0x42f4e3fee041
	float GetShieldRandomByItemID(int64 ItemID);// 0x42f3e3fee041
	void GetLootContainersByStayLootVolume(SGVolume* Volume, out SGInventory*[] LootContainers);// 0x42f2e3fee041
	float GetGuaranteeShieldRandomByItemID(int64 ItemID);// 0x42f1e3fee041
	int64 GetAllLootInventoryValue();// 0x42f0e3fee041

--------------------------------
Class: SGGameModeRespawnCondition.Object
	GameState* GetAGameState();// 0x42fae3fee041
	bool Evaluate(Controller* Controller);// 0x42f9e3fee041

--------------------------------
Class: SGGameModeRespawnCondition_Interval.SGGameModeRespawnCondition.Object

--------------------------------
Class: SGGameModeRespawnCondition_Lifes.SGGameModeRespawnCondition.Object

--------------------------------
Class: SGGameModeRespawnConditionComponent.ActorComponent.Object
	class SGGameModeRespawnCondition[] RespawnConditionClasses;//[Offset: 0xb8, Size: 0x10]
	SGGameModeRespawnCondition*[] RespawnConditions;//[Offset: 0xc8, Size: 0x10]
	bool Evaluate(Controller* Controller);// 0x42fbe3fee041

--------------------------------
Class: SGGameModeRoundGameInventoryManagerComponent.SGGameModeInventoryManagerComponent.ActorComponent.Object

--------------------------------
Class: SGGameModeStartMatchComponent.ActorComponent.Object
	delegate OnLoadComplete;//[Offset: 0xc0, Size: 0x10]
	bool bLoadingChecking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bIsLoadComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bNotStartMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	bool bStartWithTeamMakeWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 0x1]
	void StartMatch();// 0x42ffe3fee041
	void OnBeginGameInit();// 0x42fee3fee041
	bool LoadCompleteCheck();// 0x42fde3fee041
	void LoadComplete();// 0x42fce3fee041

--------------------------------
Class: SGGameModeVictoryCondition.Object
	GameState* GetAGameState();// 0x4301e3fee041
	bool Evaluate();// 0x4300e3fee041

--------------------------------
Class: SGGameModeVictoryConditionComponent.ActorComponent.Object
	class SGGameModeVictoryCondition[] VictoryConditionClasses;//[Offset: 0xb8, Size: 0x10]
	SGGameModeVictoryCondition*[] VictoryConditions;//[Offset: 0xc8, Size: 0x10]
	bool Evaluate();// 0x4302e3fee041

--------------------------------
Class: SGGameplayAbility_Aim.SGGameplayAbility.GameplayAbility.Object
	SGInventory* CurrentWeapon;//[Offset: 0x470, Size: 0x8]

--------------------------------
Class: SGGameplayAbility_BoresPump.SGGameplayAbility.GameplayAbility.Object
	SGInventory* CurrentWeapon;//[Offset: 0x470, Size: 0x8]
	void GetBoresPumpMontage(out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x4303e3fee041

--------------------------------
Class: SGGameplayAbility_CameraShake.GameplayAbility.Object
	CameraAnim* CameraAnim;//[Offset: 0x3b8, Size: 0x8]
	float BlendInTime;//[Offset: 0x3c0, Size: 0x4]
	float BlendOutTime;//[Offset: 0x3c4, Size: 0x4]

--------------------------------
Class: SGGameplayAbility_ChangeMagazine.GameplayAbility_Duration.SGGameplayAbility.GameplayAbility.Object

--------------------------------
Class: SGGameplayAbility_CheckMagazine.SGGameplayAbility.GameplayAbility.Object

--------------------------------
Class: SGGameplayAbility_CloseBolt.SGGameplayAbility.GameplayAbility.Object
	SGInventory* CurrentWeapon;//[Offset: 0x470, Size: 0x8]
	void GetCloseBoltMontage(out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x430ee3fee041
	void CloseBolt();// 0x430de3fee041

--------------------------------
Class: SGGameplayAbility_EmptyTrigger.SGGameplayAbility.GameplayAbility.Object
	SGInventory* CurrentWeapon;//[Offset: 0x470, Size: 0x8]
	void OnEmptyTrigger();// 0x4310e3fee041
	void GetEmptyMontage(out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x430fe3fee041

--------------------------------
Class: SGGameplayAbility_FillContainer.GameplayAbility_Duration.SGGameplayAbility.GameplayAbility.Object
	SGInventory* InFillInventory;//[Offset: 0x4d0, Size: 0x8]
	SGInventory* ContainerInventory;//[Offset: 0x4d8, Size: 0x8]
	float FillContainerBasicTime;//[Offset: 0x4e0, Size: 0x4]
	float FillContainerTotalTime;//[Offset: 0x4e4, Size: 0x4]
	float FillContainerTimePerElement;//[Offset: 0x4e8, Size: 0x4]

--------------------------------
Class: SGGameplayAbility_FillContainerExtra.GameplayAbility_Duration.SGGameplayAbility.GameplayAbility.Object

--------------------------------
Class: SGGameplayAbility_Fire.SGGameplayAbility.GameplayAbility.Object
	SGInventory* CurrentWeapon;//[Offset: 0x470, Size: 0x8]
	int FireMode;//[Offset: 0x478, Size: 0x4]
	bool ShouldPullBoltOnFireEnd();// 0x4315e3fee041
	void PullBolt();// 0x4314e3fee041
	void OnCharacterPoseChanged(enum InNewPose);// 0x4313e3fee041
	float GetPullBoltTime();// 0x4312e3fee041
	float GetBoltCloseTime();// 0x4311e3fee041

--------------------------------
Class: SGGameplayAbility_FoldScope.SGGameplayAbility.GameplayAbility.Object
	SGInventory* CurrentWeapon;//[Offset: 0x470, Size: 0x8]
	SGInventory* ScopeInv;//[Offset: 0x478, Size: 0x8]
	bool bIsFold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	enum AdapterAnimationType;//[Offset: 0x481, Size: 0x1]
	AnimMontage* CurrentHandMontage;//[Offset: 0x488, Size: 0x28]

--------------------------------
Class: SGGameplayAbility_FoldStock.SGGameplayAbility.GameplayAbility.Object
	SGMontagePlayParams CharacterMontageParams;//[Offset: 0x488, Size: 0x48]
	SGMontagePlayParams WeaponMontageParams;//[Offset: 0x4d0, Size: 0x48]
	void GetSetupAdapterMontage(out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x4318e3fee041
	float GetDoFoldOpDelay();// 0x4317e3fee041
	void DoFoldOperation();// 0x4316e3fee041

--------------------------------
Class: SGGameplayAbility_Gesture.SGGameplayAbility.GameplayAbility.Object
	Character* Character;//[Offset: 0x470, Size: 0x8]
	TimerHandle PlayAnimHandle;//[Offset: 0x488, Size: 0x8]
	SGMontagePlayParams CurrentHandMontageParams;//[Offset: 0x490, Size: 0x48]
	SGMontagePlayParams CurrentEquipMontage;//[Offset: 0x4d8, Size: 0x48]
	GestureAnim CurrentGesture;//[Offset: 0x520, Size: 0x58]
	int GestureActionId;//[Offset: 0x578, Size: 0x4]
	<int,GestureAnim> GestureMontagesMap;//[Offset: 0x580, Size: 0x50]
	bool IsOneHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	int UiTriggerType;//[Offset: 0x5d4, Size: 0x4]
	SGInventory* CurrentWeapon;//[Offset: 0x5d8, Size: 0x8]
	SGInventory* EmptyHand;//[Offset: 0x5e0, Size: 0x8]
	void PlayGestureAfterGAEnd();// 0x4324e3fee041
	void OnSwitchWeaponEndCallback(AnimMontage* Montage, bool bInterrupted);// 0x4323e3fee041
	void OnSprintRequestCallback(bool bSprint);// 0x4322e3fee041
	void OnCurrentWeaponChanged(SGWeapon* Weapon, FString WeaponName, SGWeapon* OldWeapon);// 0x4321e3fee041
	bool IsOneHandGesture(int ID);// 0x4320e3fee041
	SGMontagePlayParams GetHandMontageParams();// 0x431fe3fee041
	void GetHandMontage(out SGMontagePlayParams OutHandMontageParams);// 0x431ee3fee041
	SGInventory* GetEmptyHand();// 0x431de3fee041
	AnimMontage* GetCharacterMontage();// 0x431ce3fee041
	void EndGestureAbility();// 0x431be3fee041
	void EndGesture(int afterCancelAction);// 0x431ae3fee041
	bool ActiveAbilityIsEmptyHand();// 0x4319e3fee041

--------------------------------
Class: GestureAnim
	bool bOneHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* GestureRifle;//[Offset: 0x8, Size: 0x28]
	AnimMontage* GestureEmptyHand;//[Offset: 0x30, Size: 0x28]

--------------------------------
Class: SGGameplayAbility_HandLUseItem.SGGameplayAbility.GameplayAbility.Object
	AnimMontage* MontageToPlayWithWeapon;//[Offset: 0x470, Size: 0x8]
	AnimMontage* MontageToEmptyHands;//[Offset: 0x478, Size: 0x8]
	AnimMontage* MontageToPlay;//[Offset: 0x480, Size: 0x8]
	void OnSprintInterrupt(Character* InCharacter, bool bSprint);// 0x4326e3fee041
	void OnProneInterrupt(Character* InCharacter, bool bProne);// 0x4325e3fee041

--------------------------------
Class: SGGameplayAbility_HoldOpen.SGGameplayAbility.GameplayAbility.Object
	SGInventory* CurrentWeapon;//[Offset: 0x470, Size: 0x8]
	void OnHoldOpen();// 0x4328e3fee041
	void GetHoldOpenMontage(out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x4327e3fee041

--------------------------------
Class: SGGameplayAbility_Interact.SGGameplayAbility.GameplayAbility.Object
	Character* Character;//[Offset: 0x470, Size: 0x8]
	enum InteractType;//[Offset: 0x478, Size: 0x1]
	Actor* ActorToUse;//[Offset: 0x480, Size: 0x8]
	int UseMode;//[Offset: 0x488, Size: 0x4]
	float MAX_INV_INTERACT_SQR_DIST;//[Offset: 0x48c, Size: 0x4]
	Vector LockWristOffset;//[Offset: 0x490, Size: 0xc]
	SGCharacterInteractionComponent* InteractionComp;//[Offset: 0x4a0, Size: 0x8]
	void TriggerBeUsed();// 0x4332e3fee041
	void ResetLocalPlayerInput();// 0x4331e3fee041
	float PreMoveToTarget();// 0x4330e3fee041
	void PostMoveToTarget();// 0x432fe3fee041
	void NotifyActivateInteract();// 0x432ee3fee041
	KeyDoorTagetInfo GetMoveToTargetLocation();// 0x432de3fee041
	AnimMontage* GetCharacterMontage();// 0x432ce3fee041
	void FinishUnlockDoor();// 0x432be3fee041
	bool CanPlayAnimation();// 0x432ae3fee041
	void ApplyUnlockDoor();// 0x4329e3fee041

--------------------------------
Class: KeyDoorTagetInfo
	Vector DoorLocation;//[Offset: 0x0, Size: 0xc]
	Vector FaceDirection;//[Offset: 0xc, Size: 0xc]
	Vector LockLocation;//[Offset: 0x18, Size: 0xc]
	float MoveDuration;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SGGameplayAbility_LowReady.SGGameplayAbility.GameplayAbility.Object
	SGMontagePlayParams CharacterBeginLowReadyMontageParams;//[Offset: 0x470, Size: 0x48]
	SGMontagePlayParams CharacterEndLowReadyMontageParams;//[Offset: 0x4b8, Size: 0x48]
	void GetEndLowReadyMontage(out SGMontagePlayParams OutCharacterMontageParams);// 0x4334e3fee041
	void GetBeginLowReadyMontage(out SGMontagePlayParams OutCharacterMontageParams);// 0x4333e3fee041

--------------------------------
Class: SGGameplayAbility_MeleeFire.SGGameplayAbility.GameplayAbility.Object
	SGInventory* CurrentWeapon;//[Offset: 0x470, Size: 0x8]
	Character* CurrentCharacter;//[Offset: 0x478, Size: 0x8]
	int FireMode;//[Offset: 0x480, Size: 0x4]
	SGMontagePlayParams MontagePlayParams;//[Offset: 0x488, Size: 0x48]
	SGMontagePlayParams[] MontagePlayParamsArray;//[Offset: 0x4d0, Size: 0x10]
	SGMontagePlayParams MontagePlayParamsProne;//[Offset: 0x4e0, Size: 0x48]
	bool bIsProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	void StopCurrentMontage(float BlendOutTime);// 0x4336e3fee041
	float GetFireInterval();// 0x4335e3fee041

--------------------------------
Class: SGGameplayAbility_MoveBlockedAvoidance.SGGameplayAbility.GameplayAbility.Object
	Vector TargetLocation;//[Offset: 0x470, Size: 0xc]
	float Duration;//[Offset: 0x47c, Size: 0x4]

--------------------------------
Class: SGGameplayAbility_OpenBag.SGGameplayAbility.GameplayAbility.Object
	enum UIOperation;//[Offset: 0x470, Size: 0x1]
	Actor* InteractTarget;//[Offset: 0x478, Size: 0x8]
	SGMontagePlayParams CharacterOpenBagMontageParams;//[Offset: 0x480, Size: 0x48]
	SGMontagePlayParams CharacterCloseBagMontageParams;//[Offset: 0x4c8, Size: 0x48]
	void StopPlayingOpenBagAnim();// 0x433ee3fee041
	void OnCurrentWeaponChanged(SGInventory* NewWeapon);// 0x433de3fee041
	void OnCloseBag();// 0x433ce3fee041
	void K2_OnCurrentWeaponChanged();// 0x433be3fee041
	bool IsPlayingUpperBodyAnim();// 0x433ae3fee041
	void GetOpenBagMontage(out SGMontagePlayParams OutCharacterMontageParams);// 0x4339e3fee041
	Actor* GetInteractTarget();// 0x4338e3fee041
	void GetCloseBagMontage(out SGMontagePlayParams OutCharacterMontageParams);// 0x4337e3fee041

--------------------------------
Class: SGGameplayAbility_PullBolt.SGGameplayAbility.GameplayAbility.Object
	SGInventory* CurrentWeapon;//[Offset: 0x470, Size: 0x8]
	void GetPullBoltMontage(out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x433fe3fee041

--------------------------------
Class: SGGameplayAbility_ReleaseHoldOpen.SGGameplayAbility.GameplayAbility.Object
	SGInventory* CurrentWeapon;//[Offset: 0x470, Size: 0x8]
	void GetReleaseHoldOpenMontage(out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x4340e3fee041

--------------------------------
Class: SGGameplayAbility_Reload.SGGameplayAbility.GameplayAbility.Object
	SGInventory* CurrentWeapon;//[Offset: 0x478, Size: 0x8]
	SGInventory* OldMagazine;//[Offset: 0x480, Size: 0x8]
	SGInventory* NewMagazine;//[Offset: 0x488, Size: 0x8]
	SGInventory* ParentInventory;//[Offset: 0x490, Size: 0x8]
	SGMontagePlayParams CharacterMagazineOutMontageParams;//[Offset: 0x498, Size: 0x48]
	SGMontagePlayParams CharacterMagazineInMontageParams;//[Offset: 0x4e0, Size: 0x48]
	SGMontagePlayParams CharacterOpenBoltMontageParams;//[Offset: 0x528, Size: 0x48]
	SGMontagePlayParams CharacterCloseBoltMontageParams;//[Offset: 0x570, Size: 0x48]
	SGMontagePlayParams CharacterBeltOutMontageParams;//[Offset: 0x5b8, Size: 0x48]
	SGMontagePlayParams CharacterBeltInMontageParams;//[Offset: 0x600, Size: 0x48]
	SGMontagePlayParams WeaponMagazineOutMontageParams;//[Offset: 0x648, Size: 0x48]
	SGMontagePlayParams WeaponMagazineInMontageParams;//[Offset: 0x690, Size: 0x48]
	SGMontagePlayParams WeaponOpenBoltMontageParams;//[Offset: 0x6d8, Size: 0x48]
	SGMontagePlayParams WeaponCloseBoltMontageParams;//[Offset: 0x720, Size: 0x48]
	SGMontagePlayParams WeaponBeltOutMontageParams;//[Offset: 0x768, Size: 0x48]
	SGMontagePlayParams WeaponBeltInMontageParams;//[Offset: 0x7b0, Size: 0x48]
	SGMontagePlayParams CharacterReleaseHoldOpenMontageParams;//[Offset: 0x7f8, Size: 0x48]
	SGMontagePlayParams WeaponReleaseHoldOpenMontageParams;//[Offset: 0x840, Size: 0x48]
	SGMontagePlayParams CharacterPullBoltMontageParams;//[Offset: 0x888, Size: 0x48]
	SGMontagePlayParams WeaponPullBoltMontageParams;//[Offset: 0x8d0, Size: 0x48]
	float AddNewMagTime;//[Offset: 0x928, Size: 0x4]
	float RemoveOldMagTime;//[Offset: 0x92c, Size: 0x4]
	void SetAdapterAnimOnMagRep(enum AdapterAnimType);// 0x4350e3fee041
	void OnCloseBoltBegin();// 0x434fe3fee041
	void OnBoltOpen();// 0x434ee3fee041
	void OnBoltClose();// 0x434de3fee041
	bool IsRemovingBeltMag();// 0x434ce3fee041
	bool IsReloadDuringCheckMag();// 0x434be3fee041
	bool IsOpenBoltReloading();// 0x434ae3fee041
	bool IsNeedReleaseHoldOpenAfterReload();// 0x4349e3fee041
	bool IsNeedPullBoltOnNormalReload();// 0x4348e3fee041
	bool IsHoldOpenOrEmptyBore();// 0x4347e3fee041
	bool IsBoreHolding();// 0x4346e3fee041
	bool IsBagOpen();// 0x4345e3fee041
	bool IsAddingBeltMag();// 0x4344e3fee041
	float GetUsedTime();// 0x4343e3fee041
	void DetachOldMagazine();// 0x4342e3fee041
	void AttachNewMagazine();// 0x4341e3fee041

--------------------------------
Class: SGGameplayAbility_ReloadBores.SGGameplayAbility.GameplayAbility.Object
	SGInventory* CurrentWeapon;//[Offset: 0x470, Size: 0x8]
	SGInventory* FillBullet;//[Offset: 0x478, Size: 0x8]
	SGMontagePlayParams CharacterClearBoresMontageParams;//[Offset: 0x480, Size: 0x48]
	SGMontagePlayParams CharacterPushBoresMontageParams;//[Offset: 0x4c8, Size: 0x48]
	SGMontagePlayParams CharacterOpenBoltMontageParams;//[Offset: 0x510, Size: 0x48]
	SGMontagePlayParams CharacterCloseBoltMontageParams;//[Offset: 0x558, Size: 0x48]
	SGMontagePlayParams WeaponClearBoresMontageParams;//[Offset: 0x5a0, Size: 0x48]
	SGMontagePlayParams WeaponPushBoresMontageParams;//[Offset: 0x5e8, Size: 0x48]
	SGMontagePlayParams WeaponOpenBoltMontageParams;//[Offset: 0x630, Size: 0x48]
	SGMontagePlayParams WeaponCloseBoltMontageParams;//[Offset: 0x678, Size: 0x48]
	void PushBores();// 0x4356e3fee041
	void OnBoltOpen();// 0x4355e3fee041
	void OnBoltClose();// 0x4354e3fee041
	bool IsBoresEmpty();// 0x4353e3fee041
	float GetUsedTime();// 0x4352e3fee041
	void ClearBores();// 0x4351e3fee041

--------------------------------
Class: SGGameplayAbility_ReloadBoresOnHang.SGGameplayAbility.GameplayAbility.Object
	SGInventory* TgtWeapon;//[Offset: 0x470, Size: 0x8]
	SGInventory* FillBullet;//[Offset: 0x478, Size: 0x8]
	SGCharacter* OpCharacter;//[Offset: 0x480, Size: 0x8]
	void PushBoreBullet();// 0x4357e3fee041

--------------------------------
Class: SGGameplayAbility_ReloadOneByOne.SGGameplayAbility.GameplayAbility.Object
	SGInventory* CurrentWeapon;//[Offset: 0x470, Size: 0x8]
	SGInventory* TgtMagazine;//[Offset: 0x478, Size: 0x8]
	SGInventory* FillBullet;//[Offset: 0x480, Size: 0x8]
	bool bInOpenBoltReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	bool bClientNeedPullBoltAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 0x1]
	int BulletToFill;//[Offset: 0x48c, Size: 0x4]
	bool bInWaitingStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	bool bFinWithAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 0x1]
	SGMontagePlayParams CharacterReloadBeginMontageParams;//[Offset: 0x498, Size: 0x48]
	SGMontagePlayParams CharacterReloadLoopMontageParams;//[Offset: 0x4e0, Size: 0x48]
	SGMontagePlayParams CharacterReloadEndMontageParams;//[Offset: 0x528, Size: 0x48]
	SGMontagePlayParams WeaponReloadBeginMontageParams;//[Offset: 0x570, Size: 0x48]
	SGMontagePlayParams WeaponReloadLoopMontageParams;//[Offset: 0x5b8, Size: 0x48]
	SGMontagePlayParams WeaponReloadEndMontageParams;//[Offset: 0x600, Size: 0x48]
	SGMontagePlayParams CharacterReleaseHoldOpenMontageParams;//[Offset: 0x648, Size: 0x48]
	SGMontagePlayParams WeaponReleaseHoldOpenMontageParams;//[Offset: 0x690, Size: 0x48]
	SGMontagePlayParams CharacterPullBoltMontageParams;//[Offset: 0x6d8, Size: 0x48]
	SGMontagePlayParams WeaponPullBoltMontageParams;//[Offset: 0x720, Size: 0x48]
	bool StopReload();// 0x4365e3fee041
	void PushOneBullet();// 0x4364e3fee041
	void OnOpenBolt();// 0x4363e3fee041
	void OnFinishReloading();// 0x4362e3fee041
	void OnCloseBolt();// 0x4361e3fee041
	bool IsWaitingStopReload();// 0x4360e3fee041
	bool IsOpenBoltReloading();// 0x435fe3fee041
	bool IsNeedPullBolt();// 0x435ee3fee041
	bool IsHoldOpenOrEmptyBore();// 0x435de3fee041
	bool IsFinWithAnim();// 0x435ce3fee041
	float GetUsedTime();// 0x435be3fee041
	float GetReloadEndTime();// 0x435ae3fee041
	float GetPushOneBulletTime();// 0x4359e3fee041
	int GetPushBulletNum();// 0x4358e3fee041

--------------------------------
Class: SGGameplayAbility_ReloadOneByOneOnHang.SGGameplayAbility.GameplayAbility.Object
	SGInventory* TgtMagazine;//[Offset: 0x470, Size: 0x8]
	SGInventory* FillBullet;//[Offset: 0x478, Size: 0x8]
	SGCharacter* OpCharacter;//[Offset: 0x480, Size: 0x8]
	int BulletToFill;//[Offset: 0x488, Size: 0x4]
	void PushOneBullet();// 0x4369e3fee041
	float GetUsedTime();// 0x4368e3fee041
	float GetPushOneBulletTime();// 0x4367e3fee041
	int GetPushBulletNum();// 0x4366e3fee041

--------------------------------
Class: SGGameplayAbility_Rescuee.GameplayAbility_Duration.SGGameplayAbility.GameplayAbility.Object

--------------------------------
Class: SGGameplayAbility_Rescuer.SGGameplayAbility.GameplayAbility.Object
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x470, Size: 0x8]
	Character* Character;//[Offset: 0x478, Size: 0x8]
	Character* Rescuee;//[Offset: 0x480, Size: 0x8]
	SGInventory* CurrentWeapon;//[Offset: 0x488, Size: 0x8]
	AnimMontage* RescueMontage;//[Offset: 0x490, Size: 0x8]
	float EndRescueRemainingTime;//[Offset: 0x498, Size: 0x4]
	float StandToCrouchTime;//[Offset: 0x49c, Size: 0x4]
	float ProneToCrouchTime;//[Offset: 0x4a0, Size: 0x4]
	float RescueMontagePlayRate;//[Offset: 0x4a4, Size: 0x4]
	SGMontagePlayParams CharacterRescueMontageParams;//[Offset: 0x4a8, Size: 0x48]
	void SwitchToCrouch();// 0x4373e3fee041
	void PrePlayingRescueMotange();// 0x4372e3fee041
	float GetSwitchPosTime();// 0x4371e3fee041
	float GetRescueRemainingTimePercent();// 0x4370e3fee041
	float GetRescueRemainingTime();// 0x436fe3fee041
	float GetRescueMontagePlayRate();// 0x436ee3fee041
	void GetRescueMontage(out SGMontagePlayParams OutCharacterMontageParams);// 0x436de3fee041
	float GetEndRescueRemainingTime();// 0x436ce3fee041
	float GetCurrentRescuerMontagePos();// 0x436be3fee041
	FName GetCurrentPlaySection();// 0x436ae3fee041

--------------------------------
Class: SGGameplayAbility_RollUpBag.SGGameplayAbility.GameplayAbility.Object
	SGInventory* TargetBag;//[Offset: 0x470, Size: 0x8]
	float GetRollUpRemainTime();// 0x4376e3fee041
	float GetRollUpMaxTime();// 0x4375e3fee041
	float GetRollUpBeginTime();// 0x4374e3fee041

--------------------------------
Class: SGGameplayAbility_SetBipod.SGGameplayAbility.GameplayAbility.Object
	SGInventory* CurrentWeapon;//[Offset: 0x470, Size: 0x8]
	SGInventory* CurrentBipod;//[Offset: 0x478, Size: 0x8]
	bool bToSetOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	void SetBipod();// 0x4378e3fee041
	void GetSwitchMontage(out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams, out enum AdapterAnim);// 0x4377e3fee041

--------------------------------
Class: SGGameplayAbility_SetupAdapter.SGGameplayAbility.GameplayAbility.Object
	SGMontagePlayParams CharacterSetupMontageParams;//[Offset: 0x478, Size: 0x48]
	SGMontagePlayParams WeaponSetupMontageParams;//[Offset: 0x4c0, Size: 0x48]
	float SetupDuration;//[Offset: 0x508, Size: 0x4]
	void SetupAdapter();// 0x437ae3fee041
	void GetSetupAdapterMontage(out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x4379e3fee041

--------------------------------
Class: SGGameplayAbility_SetupC4.GameplayAbility_MontageNet.SGGameplayAbility.GameplayAbility.Object

--------------------------------
Class: SGGameplayAbility_SwitchFireMode.SGGameplayAbility.GameplayAbility.Object
	SGInventory* CurrentWeapon;//[Offset: 0x470, Size: 0x8]
	void SwitchFireMode();// 0x437ee3fee041
	void GetSwitchMontage(out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x437de3fee041
	float GetSwitchFireModeTime();// 0x437ce3fee041
	enum GetNextFireMode();// 0x437be3fee041

--------------------------------
Class: SGGameplayAbility_SwitchWeapon.SGGameplayAbility.GameplayAbility.Object
	SGWeapon* CurrentWeapon;//[Offset: 0x470, Size: 0x8]
	SGWeapon* DestWeapon;//[Offset: 0x478, Size: 0x8]
	SGCharacter* WeaponOwner;//[Offset: 0x480, Size: 0x8]
	bool bLastWeaponRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	float FromGrenadeAccelerateVal;//[Offset: 0x48c, Size: 0x4]
	float ToGrenadeAccelerateVal;//[Offset: 0x490, Size: 0x4]
	float MainToAssistWeaponExtraSwitchSpeedScale;//[Offset: 0x494, Size: 0x4]
	void TryReleaseHoldingOpen();// 0x438ae3fee041
	void SwitchWeaponPullBolt();// 0x4389e3fee041
	void StopLastWeaponAnimation();// 0x4388e3fee041
	void OnSwitchWeaponPullBoltBegin();// 0x4387e3fee041
	void OnDestWeaponOwnerChanged(SGCharacter* NewOwner);// 0x4386e3fee041
	bool IsWeaponEquipWithCharge();// 0x4385e3fee041
	bool IsNeedReleaseHoldOpen();// 0x4384e3fee041
	SGMontagePlayParams GetUnEquipWeaponMontage();// 0x4383e3fee041
	SGMontagePlayParams GetUnEquipCharacterMontage();// 0x4382e3fee041
	void GetEquipWithChargeMontage(SGInventory* Weapon, out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x4381e3fee041
	SGMontagePlayParams GetEquipWeaponMontage();// 0x4380e3fee041
	SGMontagePlayParams GetEquipCharacterMontage();// 0x437fe3fee041

--------------------------------
Class: SGGameplayAbility_ThrowWeapon.SGGameplayAbility.GameplayAbility.Object
	SGWeapon* CurrentWeapon;//[Offset: 0x470, Size: 0x8]
	SGWeapon* WeaponToThrow;//[Offset: 0x478, Size: 0x8]
	bool bIsFastThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	bool bCancelThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 0x1]
	bool bIsHoldGrenadeThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x482, Size: 0x1]
	bool bIsStopFireTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x483, Size: 0x1]
	void HideThrowWeapon();// 0x4396e3fee041
	void GetThrowMontage(SGInventory* Weapon, out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x4395e3fee041
	void GetReleaseHoldMontage(SGInventory* Weapon, out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x4394e3fee041
	void GetHoldOpenMontage(SGInventory* Weapon, out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x4393e3fee041
	float GetFastThrowMontageLength();// 0x4392e3fee041
	void GetFastThrowMontage(SGInventory* Weapon, out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x4391e3fee041
	void GetCancelMontage(SGInventory* Weapon, out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x4390e3fee041
	void FinishPreFire();// 0x438fe3fee041
	void FinishHoldGrenade();// 0x438ee3fee041
	void FastThrowShowMesh();// 0x438de3fee041
	void ApplyPreFire();// 0x438ce3fee041
	void ApplyHoldGrenade();// 0x438be3fee041

--------------------------------
Class: SGGameplayAbility_ToggleHeadwear.SGGameplayAbility.GameplayAbility.Object
	float SwitchOnHeadwearDelay;//[Offset: 0x470, Size: 0x4]
	float SwitchOffHeadwearDelay;//[Offset: 0x474, Size: 0x4]
	TimerHandle ToggleHeadwearHandle;//[Offset: 0x478, Size: 0x8]
	GameplayTag TacticTag;//[Offset: 0x480, Size: 0x8]
	bool bTryTurnOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	bool bHasToggleActivationState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 0x1]
	enum HeadwearType;//[Offset: 0x48a, Size: 0x1]
	TimerHandle TimeOutHandle;//[Offset: 0x490, Size: 0x8]
	<enum,AnimMontage*> PutUpMontagesMap_Inventory;//[Offset: 0x4a8, Size: 0x50]
	<enum,AnimMontage*> PutDownMontagesMap_Inventory;//[Offset: 0x4f8, Size: 0x50]
	SGMontagePlayParams HandMontageParams;//[Offset: 0x548, Size: 0x48]
	SGMontagePlayParams InvMontageParams;//[Offset: 0x590, Size: 0x48]
	SGInventory* HeadwearInv;//[Offset: 0x5d8, Size: 0x8]
	SGInventoryToggleableHeadwearComponent* HeadwearComp;//[Offset: 0x5e0, Size: 0x8]
	SGInventory* HelmetInv;//[Offset: 0x5e8, Size: 0x8]
	SGInventoryHelmetSwitchComponent* HelmetSwitchsComp;//[Offset: 0x5f0, Size: 0x8]
	void SwitchOnHeadwear();// 0x439ce3fee041
	void SwitchOffHeadwear();// 0x439be3fee041
	void OnTimeOut();// 0x439ae3fee041
	void OnPutUpMontageEndCallback(AnimMontage* Montage, bool bInterrupted);// 0x4399e3fee041
	void OnPutDownMontageEndCallback(AnimMontage* Montage, bool bInterrupted);// 0x4398e3fee041
	void GetHandAndInvMontage(out SGMontagePlayParams OutHandMontageParams, out SGMontagePlayParams OutInvMontageParams);// 0x4397e3fee041

--------------------------------
Class: SGInventoryToggleableHeadwearComponent.SGInventoryTacticComponent.ActorComponent.Object
	AnimMontage* PutUpMontagePtr;//[Offset: 0xe8, Size: 0x28]
	enum HeadwearType;//[Offset: 0x110, Size: 0x1]
	enum GetHeadwearType();// 0x46dbe3fee041

--------------------------------
Class: SGInventoryHelmetSwitchComponent.SGInventorySwitchComponent.ActorComponent.Object
	bool bPendingActivationToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	enum CurrentEnabledHeadwearType;//[Offset: 0x104, Size: 0x1]
	bool TryToggleSwitch(out const GameplayTag TacticTag);// 0x471de3fee041
	void TryHelmetSwitchAfterThrow();// 0x471ce3fee041
	void ServerTryToggleSwitch(const GameplayTag TacticTag);// 0x471be3fee041
	void RefreshStates();// 0x471ae3fee041
	void OnRep_CurrentEnabledHeadwearType();// 0x4719e3fee041
	void OnInventoryAttachPositionChanged(Character* OwnerCharacter, enum NewAttachPosition);// 0x4718e3fee041
	enum GetCurrentEnabledHeadwearType();// 0x4717e3fee041
	SGInventory* GetAttachedMainHeadwear();// 0x4716e3fee041

--------------------------------
Class: SGInventorySwitchComponent.ActorComponent.Object
	GameplayTag[] ManagedTags;//[Offset: 0xc8, Size: 0x10]
	TacticalInvStateInfo[] TacticalInvStateInfos;//[Offset: 0xd8, Size: 0x10]
	Character* CachedCharacterOwner;//[Offset: 0xe8, Size: 0x8]
	void SetSwitchState(out const GameplayTag TacticTag, bool bInSwitchStateOn);// 0x4715e3fee041
	void ServerSetSwitchState(const GameplayTag TacticTag, bool bInSwitchStateOn);// 0x4714e3fee041
	void OnRep_TacticalInvStateInfos();// 0x4713e3fee041
	void OnPostDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x4712e3fee041
	void OnOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x4711e3fee041
	void OnDisassembled(SGInventory* ChildInventory);// 0x4710e3fee041
	void OnCharacterSetNewOwner(Character* Character, Actor* NewOwner);// 0x470fe3fee041
	void OnAssembled(SGInventory* ChildInventory);// 0x470ee3fee041
	bool IsTacticalInvsActive(out const GameplayTag TacticTag);// 0x470de3fee041
	bool IsSwitchEnabled(out const GameplayTag TacticTag);// 0x470ce3fee041
	bool HasAttachedTacticalInv();// 0x470be3fee041
	int GetTacticalInvStateInfoIndexByTag(out const GameplayTag TacticTag);// 0x470ae3fee041
	TacticalInvStateInfo GetTacticalInvStateInfoByTag(out const GameplayTag TacticTag);// 0x4709e3fee041
	bool GetSwitchState(out const GameplayTag TacticTag);// 0x4708e3fee041
	GameplayTag[] GetManagedTags();// 0x4707e3fee041
	SGInventory*[] GetAttachedTacticalInvsByTag(out const GameplayTag TacticTag);// 0x4706e3fee041

--------------------------------
Class: TacticalInvStateInfo
	GameplayTag TacticTag;//[Offset: 0x0, Size: 0x8]
	SGInventory*[] AttachedTacticalInvs;//[Offset: 0x8, Size: 0x10]
	bool bShouldEnableSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bSwitchStateOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bTacticalInvsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bCachedSwitchStateOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool bCachedShouldEnableSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: SGGameplayAbility_TurnInPlace.SGGameplayAbility.GameplayAbility.Object
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x470, Size: 0x8]
	Character* Character;//[Offset: 0x478, Size: 0x8]
	AnimMontage* GetTurnInPlaceMontage();// 0x439de3fee041

--------------------------------
Class: SGGameplayAbility_UnFillContainer.GameplayAbility_Duration.SGGameplayAbility.GameplayAbility.Object
	SGInventory* ContainerInventory;//[Offset: 0x4d0, Size: 0x8]
	float UnfillContainerBasicTime;//[Offset: 0x4d8, Size: 0x4]
	float UnfillContainerTotalTime;//[Offset: 0x4dc, Size: 0x4]
	float UnfillContainerTimePerElement;//[Offset: 0x4e0, Size: 0x4]
	SGInventory* LastPoppedBullet;//[Offset: 0x4e8, Size: 0x8]
	SGGlobalGridOccupyInfo NextBulletGlobalOccupyInfo;//[Offset: 0x4f8, Size: 0x28]
	SGGlobalGridOccupyInfo[] BulletGlobalOccupyInfoBucket;//[Offset: 0x520, Size: 0x10]

--------------------------------
Class: SGGameplayAbility_UseInventory.SGGameplayAbility.GameplayAbility.Object
	AnimMontage* InventoryMontageToPlay;//[Offset: 0x480, Size: 0x28]
	SkeletalMesh* InventorySkeletalMesh;//[Offset: 0x4a8, Size: 0x28]
	class AnimInstance* InventoryAnimInstance;//[Offset: 0x4d0, Size: 0x28]
	FName InventoryAttachSocket;//[Offset: 0x4f8, Size: 0x8]
	SGInventory* Inventory;//[Offset: 0x500, Size: 0x8]
	SGCharacter* Character;//[Offset: 0x508, Size: 0x8]
	float CurePeriod;//[Offset: 0x534, Size: 0x4]
	float CureValueOncePeriod;//[Offset: 0x538, Size: 0x4]
	AnimMontage* MontageToPlay;//[Offset: 0x540, Size: 0x28]
	float PlayRate;//[Offset: 0x568, Size: 0x4]
	FName SectionName;//[Offset: 0x56c, Size: 0x8]
	class GameplayEffect[] GameplayEffectClassesWhileBegined;//[Offset: 0x578, Size: 0x10]
	float AnimatingGameplayEffectDelayTime;//[Offset: 0x588, Size: 0x4]
	float AnimatingGameplayEffectEndTime;//[Offset: 0x58c, Size: 0x4]
	bool UseDynamicLoopCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1]
	bool bActiveGameplayEffectClassesWhileAnimatingOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x591, Size: 0x1]
	class GameplayEffect[] GameplayEffectClassesWhileAnimating;//[Offset: 0x598, Size: 0x10]
	class GameplayEffect[] GameplayEffectClassesWhileEnded;//[Offset: 0x5a8, Size: 0x10]
	Object* icon;//[Offset: 0x5b8, Size: 0x8]
	bool bShowProgressUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	bool bShowProgressUIButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c1, Size: 0x1]
	bool bScaleIconToFit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c2, Size: 0x1]
	ActiveGameplayEffectHandle[] AppliedEffectHandlesWhileBegined;//[Offset: 0x620, Size: 0x10]
	ActiveGameplayEffectHandle[] AppliedEffectHandlesWhileAnimating;//[Offset: 0x630, Size: 0x10]
	SGGADataReference SGGADataRef;//[Offset: 0x668, Size: 0x10]
	void StartMontageLoop();// 0x43a6e3fee041
	void PreCalculateMontageLoopCount(float MontageDuration);// 0x43a5e3fee041
	void OnMontageStartCallback(AnimMontage* Montage);// 0x43a4e3fee041
	void OnMontageEndCallback(AnimMontage* Montage, bool bInterrupted);// 0x43a3e3fee041
	void OnCharacterMoistureChanged(out const GameplayEffectSpec EffectSpec, float MoistureDelta, float MoistureDelta_Unclamp, float CurrentVal, float MaxVal);// 0x43a2e3fee041
	void OnCharacterFoodChanged(out const GameplayEffectSpec EffectSpec, float FoodDelta, float FoodDelta_Unclamp, float CurrentVal, float MaxVal);// 0x43a1e3fee041
	void OnCharacterEnduranceChanged(enum EnduranceType, float EnduranceDelta, float CurrentVal, float MaxVal);// 0x43a0e3fee041
	void OnAnyGameplayEffectRemoved(out const ActiveGameplayEffect ActiveGameplayEffect);// 0x439fe3fee041
	void MontageLoopCheck();// 0x439ee3fee041

--------------------------------
Class: SGGameplayAbility_ViewWeapon.SGGameplayAbility.GameplayAbility.Object
	Character* Character;//[Offset: 0x470, Size: 0x8]
	SGMontagePlayParams CurrentHandMontageParams;//[Offset: 0x478, Size: 0x48]
	SGAbilityTask_PlayWeaponMontage* PlayViewWeaponMontageTask;//[Offset: 0x4c0, Size: 0x8]
	void OnSprintRequestCallback(bool bSprint);// 0x43ade3fee041
	void OnMontageFinished();// 0x43ace3fee041
	void OnMontageEndCallback(AnimMontage* Montage, bool bInterrupted);// 0x43abe3fee041
	void OnMontageCanceled();// 0x43aae3fee041
	AnimMontage* GetCharacterMontage();// 0x43a9e3fee041
	void EndAbilityWithBlendTime(float BlendOutTime);// 0x43a8e3fee041
	bool CanPlayAnimation();// 0x43a7e3fee041

--------------------------------
Class: SGGameplayAbilityInventoryInterface.Interface.Object
	void SetInventory(SGInventory* Inventory);// 0x43b1e3fee041
	SGInventory* GetInventory();// 0x43b0e3fee041
	Object* GetIcon(enum IconType);// 0x43afe3fee041
	FString GetDisplayName();// 0x43aee3fee041

--------------------------------
Class: SGGameplayAbilityMagnitudeInterface.Interface.Object
	float GetMagnitude(GameplayAttribute Attribute);// 0x43b2e3fee041

--------------------------------
Class: SGGameplayAbilityProgressInterface.Interface.Object
	bool NeedShowUIProgressButton();// 0x43bbe3fee041
	bool NeedShowUIProgress();// 0x43bae3fee041
	bool NeedScaleIconToFit();// 0x43b9e3fee041
	float GetTimeRemainingForUILoading();// 0x43b8e3fee041
	float GetTimeRemaining();// 0x43b7e3fee041
	float GetDurationForUILoading();// 0x43b6e3fee041
	float GetDuration();// 0x43b5e3fee041
	FText GetDisplayText();// 0x43b4e3fee041
	Object* GetDisplayIcon();// 0x43b3e3fee041

--------------------------------
Class: SGGameplayCalculation_WeightDependent.GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object

--------------------------------
Class: SGGameplayEffect_TakeDamage.GameplayEffect.Object
	DamageEventObject* DamageEventObject;//[Offset: 0x7c0, Size: 0x8]

--------------------------------
Class: SGGameplayEffectApplicationRequirement_RecoverEndurance.GameplayEffectCustomApplicationRequirement.Object

--------------------------------
Class: SGGameplayEffectApplicationRequirement_RecoverFromOutOfEndurance.GameplayEffectCustomApplicationRequirement.Object

--------------------------------
Class: SGGameplayEffectApplicationRequirement_RemoveBleed.GameplayEffectCustomApplicationRequirement.Object

--------------------------------
Class: SGGameplayEffectApplicationRequirement_RemoveBoneBreak.GameplayEffectCustomApplicationRequirement.Object

--------------------------------
Class: SGGameplayEffectApplicationRequirement_RemovePain.GameplayEffectCustomApplicationRequirement.Object

--------------------------------
Class: SGGameplayEffectExecutionCalculation_RecordRemoveEffect.GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object
	enum EffectType;//[Offset: 0x39, Size: 0x1]
	enum EnduranceType;//[Offset: 0x3a, Size: 0x1]

--------------------------------
Class: SGGameplayEffectExecutionCalculation_UseInBodyType.GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object
	bool UseInBestMatchBodyPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	enum EnduranceType;//[Offset: 0x3a, Size: 0x1]

--------------------------------
Class: SGGameplayStatics.GameplayStatics.BlueprintFunctionLibrary.Object
	void UnloadSubLevel(const Object* WorldContextObject, FString LevelName);// 0x4451e3fee041
	void SetGraphicStyleQualityLevel(byte GraphicStyleQualityLevel, World* World);// 0x4450e3fee041
	void SetCanGotoHallroom(Object* WorldContextObject, bool Enable);// 0x444fe3fee041
	void RebaseHitResultOntoZeroOrigin(out HitResult HitResult, const ActorComponent* Comp);// 0x444ee3fee041
	void RebaseHitResultOntoLocalOrigin(out HitResult HitResult, const ActorComponent* Comp);// 0x444de3fee041
	void LoadSubLevel(const Object* WorldContextObject, FString LevelName);// 0x444ce3fee041
	bool LineTracePlayerStatic(World* InWorld, Vector TraceStart, Vector TraceEnd, out const Actor*[] ActorsToIgnore, out HitResult OutHit, LinearColor TraceColor);// 0x444be3fee041
	bool IsWorldHasBegunPlay(Object* WorldContextObject);// 0x444ae3fee041
	bool IsSupportPostProcess();// 0x4449e3fee041
	bool IsPlayInEdit(Object* WorldContextObject);// 0x4448e3fee041
	bool IsMobilePlatform();// 0x4447e3fee041
	bool IsInHallRoom(World* InWorld);// 0x4446e3fee041
	bool IsInEditorPreview(Object* WorldContextObject);// 0x4445e3fee041
	bool IsDedicatedServer(Object* WorldContextObject);// 0x4444e3fee041
	void GotoHallRoom(Object* WorldContextObject, int Type);// 0x4443e3fee041
	float GetPlatformSeconds();// 0x4442e3fee041
	class Object GetParentClass(const class Object Class);// 0x4441e3fee041
	int64 GetGameFrameCounter();// 0x4440e3fee041
	float GetGameFPS();// 0x443fe3fee041
	FString GetCurrentWorldMapName(World* InWorld);// 0x443ee3fee041
	void GetBlueprintsOf(class Object TypeClass, FString InFolder, out class Object[] Into);// 0x443de3fee041
	class Object GetBlueprintsByName(class Object TypeClass, FString InFolder, FString ToFindName);// 0x443ce3fee041
	FString FlushUserDefineStringValue(FString Section, FString Key, bool bIsRead, FString FlushValue, FString DefaultFlushValue);// 0x443be3fee041
	int FlushUserDefineIntValue(FString Section, FString Key, bool bIsRead, int FlushValue, int DefaultFlushValue);// 0x443ae3fee041
	float FlushUserDefineFloatValue(FString Section, FString Key, bool bIsRead, float FlushValue, float DefaultFlushValue);// 0x4439e3fee041
	bool FlushUserDefineBoolValue(FString Section, FString Key, bool bIsRead, bool FlushValue, bool DefaultFlushValue);// 0x4438e3fee041
	int FlushMouseSensitivity(bool bRead, int SensitivityValue);// 0x4437e3fee041

--------------------------------
Class: SGGameSettings_Sensitivity.DeveloperSettings.Object
	int SensitivityMaxValue;//[Offset: 0x38, Size: 0x4]
	int SensitivityMinValue;//[Offset: 0x3c, Size: 0x4]
	float SensitiveScale;//[Offset: 0x40, Size: 0x4]
	float SensitiveScaleForSimulator;//[Offset: 0x44, Size: 0x4]
	int bUseFireSensitivity;//[Offset: 0x48, Size: 0x4]
	SensitivityData[] CameraSensitivities;//[Offset: 0x50, Size: 0x10]
	SensitivityData CurrentCameraSensitivity;//[Offset: 0x60, Size: 0x28]
	SensitivityData[] FireSensitivities;//[Offset: 0x88, Size: 0x10]
	SensitivityData CurrentFireSensitivity;//[Offset: 0x98, Size: 0x28]
	SensitivityData[] GyroSensitivities;//[Offset: 0xc0, Size: 0x10]
	SensitivityData CurrentGyroSensitivity;//[Offset: 0xd0, Size: 0x28]
	byte CameraSensitivityMode;//[Offset: 0xf8, Size: 0x1]
	byte FireSensitivityMode;//[Offset: 0xf9, Size: 0x1]
	byte GyroSensitivityMode;//[Offset: 0xfa, Size: 0x1]

--------------------------------
Class: SensitivityData
	int NoGlass;//[Offset: 0x0, Size: 0x4]
	int RedSpot;//[Offset: 0x4, Size: 0x4]
	int Holographic;//[Offset: 0x8, Size: 0x4]
	int MechinicalAim;//[Offset: 0xc, Size: 0x4]
	int VSS;//[Offset: 0x10, Size: 0x4]
	int Scale2;//[Offset: 0x14, Size: 0x4]
	int Scale3;//[Offset: 0x18, Size: 0x4]
	int Scale4;//[Offset: 0x1c, Size: 0x4]
	int Scale6;//[Offset: 0x20, Size: 0x4]
	int Scale8;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SGGameStateActorPoolComponent.ActorComponent.Object

--------------------------------
Class: SGGameStateAIDebugInfoComponent.ActorComponent.Object
	int[] BossSquadIDs;//[Offset: 0xc8, Size: 0x10]
	int SquadIDRangeMin;//[Offset: 0xd8, Size: 0x4]
	int SquadIDRangeMax;//[Offset: 0xdc, Size: 0x4]
	bool bShowDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	int ShowSquadType;//[Offset: 0xe4, Size: 0x4]
	int AISenseTotalQueries;//[Offset: 0xe8, Size: 0x4]
	int AISenseAverageCount;//[Offset: 0xec, Size: 0x4]
	SpawnedAIInfoForDebug[] DebugAIInfoList;//[Offset: 0xf0, Size: 0x10]
	<int,ScavInfo> SpawnedAI;//[Offset: 0x108, Size: 0x50]
	ScavInfo[] ScavInfos;//[Offset: 0x158, Size: 0x10]
	int MapID;//[Offset: 0x168, Size: 0x4]
	int SpawnConfigID;//[Offset: 0x16c, Size: 0x4]
	FString AISpawnLevelName;//[Offset: 0x170, Size: 0x10]
	bool bAISpawnStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	bool bCanSpawnAIPMC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	bool bPlayerPMCSpawnFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 0x1]
	bool bAISpawnControllerIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183, Size: 0x1]
	BTreeStatPerFrameData[] StatFrameInfo;//[Offset: 0x188, Size: 0x10]
	UserWidget* AIHudMobileWidget;//[Offset: 0x1a0, Size: 0x8]
	void SetBTreeMonitorEnabled(bool Value);// 0x4472e3fee041
	void ServerSetBTreeMonitorEnabled(bool Value);// 0x4471e3fee041
	void OnReq_UpdateAISenseAverageCount();// 0x4470e3fee041
	void OnRemoveRedundantAI(SGAISpawnStuff* VolumeComponent, Character* Character);// 0x446fe3fee041
	void OnLimitChanged(SGAISpawnStuff* VolumeComponent);// 0x446ee3fee041
	void OnAISpawned(SGAISpawnStuff* VolumeComponent, Character* AICharacter);// 0x446de3fee041
	void OnAIDied(SGAISpawnStuff* VolumeComponent, Character* AICharacter);// 0x446ce3fee041
	void GetStatFrameInfo(out BTreeStatPerFrameData[] OutStatFrameInfo);// 0x446be3fee041
	void BP_AIDebugCommand(out const FString CommandName, out const FString[] Params);// 0x446ae3fee041

--------------------------------
Class: ScavInfo
	int SquadID;//[Offset: 0x0, Size: 0x4]
	int[] MaxNum;//[Offset: 0x8, Size: 0x10]
	int LimitMin;//[Offset: 0x18, Size: 0x4]
	int LimitMax;//[Offset: 0x1c, Size: 0x4]
	int ALiveNum;//[Offset: 0x20, Size: 0x4]
	int DeadNum;//[Offset: 0x24, Size: 0x4]
	int TotalNum;//[Offset: 0x28, Size: 0x4]
	int BossNum;//[Offset: 0x2c, Size: 0x4]
	int FollowerNum;//[Offset: 0x30, Size: 0x4]
	int PMCNum;//[Offset: 0x34, Size: 0x4]
	AIIDNum[] AIIDNum;//[Offset: 0x38, Size: 0x10]
	WaveInfo[] WaveNum;//[Offset: 0x48, Size: 0x10]
	int DestroyedNum;//[Offset: 0x58, Size: 0x4]
	float FirstSpawnTime;//[Offset: 0x5c, Size: 0x4]
	bool bIsPrioritySquad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int SquadType;//[Offset: 0x64, Size: 0x4]
	PendingSpawnAIDebugInfo[] PendingInfo;//[Offset: 0x68, Size: 0x10]
	SGAICharacter*[] CharacterArray;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: AIIDNum
	int Handle;//[Offset: 0x0, Size: 0x4]
	int64 AIID;//[Offset: 0x8, Size: 0x8]
	int AIState;//[Offset: 0x10, Size: 0x4]
	int AIPriority;//[Offset: 0x14, Size: 0x4]
	int RemoveReason;//[Offset: 0x18, Size: 0x4]
	FString PriorityContextString;//[Offset: 0x20, Size: 0x10]
	FString RemoveContextString;//[Offset: 0x30, Size: 0x10]
	bool bIsPending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: WaveInfo
	int WaveIndex;//[Offset: 0x0, Size: 0x4]
	int Total;//[Offset: 0x4, Size: 0x4]
	int Dead;//[Offset: 0x8, Size: 0x4]
	int Destroyed;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PendingSpawnAIDebugInfo
	int PendingIndex;//[Offset: 0x0, Size: 0x4]
	FName AIID;//[Offset: 0x4, Size: 0x8]
	FString SpawnArea;//[Offset: 0x10, Size: 0x10]
	FString SpawnPoint;//[Offset: 0x20, Size: 0x10]
	FString ContextString;//[Offset: 0x30, Size: 0x10]
	bool bSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: BTreeStatPerFrameData
	FString NodeName;//[Offset: 0x0, Size: 0x10]
	float IncAvg;//[Offset: 0x10, Size: 0x4]
	float IncMax;//[Offset: 0x14, Size: 0x4]
	float IncTotal;//[Offset: 0x18, Size: 0x4]
	int CallCount;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SGGameStateChaseActivityInfoComp.ActorComponent.Object
	float MinScanInterval;//[Offset: 0xc0, Size: 0x4]
	ChaseActivityStateChangeInfo ChaseActivityStateChangeInfo;//[Offset: 0xc4, Size: 0x8]
	ChaseActivityAvatarInfo[] ActivityAvatarInfos;//[Offset: 0xd0, Size: 0x10]
	int[] ActivityInventoryIDs;//[Offset: 0xe0, Size: 0x10]
	Character*[] HasActivityInventoryAliveAI;//[Offset: 0xf0, Size: 0x10]
	void BroadcastChaseActivityStateChangeEvent();// 0x4473e3fee041

--------------------------------
Class: ChaseActivityAvatarInfo
	int AvatarItemID;//[Offset: 0x0, Size: 0x4]
	float ScanningRange;//[Offset: 0x4, Size: 0x4]
	float ScanningInterval;//[Offset: 0x8, Size: 0x4]
	int ScanningIntervalScale;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SGGameStateCheckPointManagerComp.ActorComponent.Object

--------------------------------
Class: SGGameStateClientInventoryComponent.ActorComponent.Object
	delegate InvUIFlagChangedEvent;//[Offset: 0xc0, Size: 0x10]
	<int,SGInventory*> LocalInventoryMap;//[Offset: 0xd0, Size: 0x50]
	void OnInvRuntimeIDRep(SGInventory* Inv, int RuntimeID);// 0x4474e3fee041

--------------------------------
Class: SGGameStateComponentInterface.Interface.Object
	GameState* GetGameState();// 0x4475e3fee041

--------------------------------
Class: SGGameStateDeathDropComponent.ActorComponent.Object
	enum DeathDropType;//[Offset: 0xc8, Size: 0x1]
	float DuplicationDropRate;//[Offset: 0xcc, Size: 0x4]
	float ConvertToMoneyItemCountMinCoefficient;//[Offset: 0xd0, Size: 0x4]
	float ConvertToMoneyItemCountMaxCoefficient;//[Offset: 0xd4, Size: 0x4]
	float MaxValueAdapterConvertRateMin;//[Offset: 0xd8, Size: 0x4]
	float MaxValueAdapterConvertRateMax;//[Offset: 0xdc, Size: 0x4]
	float ConvertWeightPow;//[Offset: 0xe0, Size: 0x4]
	int MoneyItemID;//[Offset: 0xe4, Size: 0x4]
	float ItemTotalValueToMoneyCoefficient;//[Offset: 0xe8, Size: 0x4]
	float ArmorDurabilityConvertCoefficientMin;//[Offset: 0xec, Size: 0x4]
	float ArmorDurabilityConvertCoefficientMax;//[Offset: 0xf0, Size: 0x4]
	float HighValueItemConvertCoefficient;//[Offset: 0xf4, Size: 0x4]
	FString DebugInfo;//[Offset: 0xf8, Size: 0x10]
	TeammateCurseInfo[] CurseInfos;//[Offset: 0x108, Size: 0x10]
	void UpdateDebugInfo();// 0x4494e3fee041
	void UpdateDeathDropParams();// 0x4493e3fee041
	void SetMoneyItemID(int InMoneyItemID);// 0x4492e3fee041
	void SetMaxValueAdapterConvertRateMin(int InMaxValueAdapterConvertRateMin);// 0x4491e3fee041
	void SetMaxValueAdapterConvertRateMax(int InMaxValueAdapterConvertRateMax);// 0x4490e3fee041
	void SetItemTotalValueToMoneyCoefficient(int InItemTotalValueToMoneyCoefficient);// 0x448fe3fee041
	void SetHighValueItemConvertCoefficient(int InHighValueItemConvertCoefficient);// 0x448ee3fee041
	void SetDuplicationDropRate(int InDuplicationDropRate);// 0x448de3fee041
	void SetDeathDropType(enum InDeathDropType);// 0x448ce3fee041
	void SetConvertWeightPow(int InConvertWeightPow);// 0x448be3fee041
	void SetConvertToMoneyItemCountMinCoefficient(int InMinCoefficient);// 0x448ae3fee041
	void SetConvertToMoneyItemCountMaxCoefficient(int InMaxCoefficient);// 0x4489e3fee041
	void SetArmorDurabilityConvertCoefficientMin(int InArmorDurabilityConvertCoefficientMin);// 0x4488e3fee041
	void SetArmorDurabilityConvertCoefficientMax(int InArmorDurabilityConvertCoefficientMax);// 0x4487e3fee041
	bool PlaceCurseOnTeammate(uint64 SelfGID, uint64 TargetTeammateGID, bool bIsPlaceOrRemove);// 0x4486e3fee041
	void OnRep_CurseInfos();// 0x4485e3fee041
	void OnBeginGameInit();// 0x4484e3fee041
	int GetMoneyItemID();// 0x4483e3fee041
	float GetMaxValueAdapterConvertRateMin();// 0x4482e3fee041
	float GetMaxValueAdapterConvertRateMax();// 0x4481e3fee041
	float GetItemTotalValueToMoneyCoefficient();// 0x4480e3fee041
	float GetHighValueItemConvertCoefficient();// 0x447fe3fee041
	float GetDuplicationDropRate();// 0x447ee3fee041
	enum GetDeathDropType();// 0x447de3fee041
	float GetConvertWeightPow();// 0x447ce3fee041
	float GetConvertToMoneyItemCountMinCoefficient();// 0x447be3fee041
	float GetConvertToMoneyItemCountMaxCoefficient();// 0x447ae3fee041
	float GetArmorDurabilityConvertCoefficientMin();// 0x4479e3fee041
	float GetArmorDurabilityConvertCoefficientMax();// 0x4478e3fee041
	bool CheckCharacterCanLootCorpseContainerByGID(uint64 CharacterGID, uint64 CorpseBoxCharacterGID);// 0x4477e3fee041
	bool CheckCharacterCanLootCorpseContainer(uint64 CharacterGID, Actor* CorpseOrContainer);// 0x4476e3fee041

--------------------------------
Class: TeammateCurseInfo
	uint64 SelfGID;//[Offset: 0x0, Size: 0x8]
	uint64[] CursedCharacters;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SGGameStateDestroyActorManagerComponent.ActorComponent.Object
	DeferDestroyActorInFrameInfo[] DestroyActorInfoQueue;//[Offset: 0xc0, Size: 0x10]
	DeferDestroyCharacterInFrameInfo[] DestroyCharacterInfoQueue;//[Offset: 0xd0, Size: 0x10]
	SGInventory*[] InventoryToRemove;//[Offset: 0xe8, Size: 0x10]

--------------------------------
Class: DeferDestroyActorInFrameInfo
	Actor* SpawningActor;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DeferDestroyCharacterInFrameInfo
	Actor* SpawningCharacter;//[Offset: 0x0, Size: 0x8]
	Vector DeathLocation;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: SGGameStateEscapeComponent.ActorComponent.Object
	EscapeInfo[] EscapeInfoArr;//[Offset: 0xc0, Size: 0x10]
	EscapeInfo FindEscapeInfoByTeamID(int TeamID);// 0x4495e3fee041

--------------------------------
Class: EscapeInfo
	int TeamID;//[Offset: 0x0, Size: 0x4]
	SGVolume*[] EscapeVolumes;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SGGameStateEventManagerComponent.ActorComponent.Object
	class Object[] EventsObjectClasses;//[Offset: 0xc0, Size: 0x10]
	Object*[] EventsObjects;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: SGGameStateFactionManagerComponent.ActorComponent.Object
	SGFaction*[] Factions;//[Offset: 0xc0, Size: 0x10]
	class SGFaction* FactionClass;//[Offset: 0xd0, Size: 0x8]
	enum GetFactionRelationType(enum FirstFactionType, enum SecondFactionType);// 0x4496e3fee041

--------------------------------
Class: SGGameStateGameFlowStateComponent.ActorComponent.Object
	FName GameFlowState;//[Offset: 0xc0, Size: 0x8]
	FName OldState;//[Offset: 0xc8, Size: 0x8]
	bool bIsServerInPIE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	float GameTime;//[Offset: 0xd4, Size: 0x4]
	DateTime BeginTime;//[Offset: 0xd8, Size: 0x8]
	void SetGameTime(int TimeScend);// 0x44a8e3fee041
	void SetGameFlowState(FName NewState);// 0x44a7e3fee041
	void OnRep_GameFlowState();// 0x44a6e3fee041
	void OnMatchStateChange(FName StateName);// 0x44a5e3fee041
	void OnGameFlowStateSet();// 0x44a4e3fee041
	void NativeSetGameTime(int TimeScend);// 0x44a3e3fee041
	void LoadingSign();// 0x44a2e3fee041
	bool GetIsServerInPIE();// 0x44a1e3fee041
	float GetGameTime();// 0x44a0e3fee041
	int GetGameFlowStateDuration(FName InState);// 0x449fe3fee041
	FName GetGameFlowState();// 0x449ee3fee041
	float GetCommondGameTime();// 0x449de3fee041
	DateTime GetBeginTime();// 0x449ce3fee041
	void GameBeginSign();// 0x449be3fee041
	void EndGameSign();// 0x449ae3fee041
	void DSCloseProtect();// 0x4499e3fee041
	void DeployInSign();// 0x4498e3fee041
	void BeginGameFlow();// 0x4497e3fee041

--------------------------------
Class: SGGameStateInterfaceComponent.ActorComponent.Object

--------------------------------
Class: SGGameStatePendingMatchComponent.ActorComponent.Object
	FString CharacterPath;//[Offset: 0xc0, Size: 0x10]
	class Object* PlayerCharacterClass;//[Offset: 0xd0, Size: 0x8]
	void OnRep_CharacterPath();// 0x44a9e3fee041

--------------------------------
Class: SGGameStateReplayComponent.ActorComponent.Object
	bool bIsDSRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	void SetIsDSRecording(bool bIsRecording);// 0x44ade3fee041
	void OnCharacterReadyToPlay(Character* Character);// 0x44ace3fee041
	bool GetIsDSRecording();// 0x44abe3fee041
	void AddExternalData(Object* Object, enum ReplayExternalDataType, out byte[] SerializedData);// 0x44aae3fee041

--------------------------------
Class: SGGameStateRoundGameStateComponent.SGGameStateGameFlowStateComponent.ActorComponent.Object
	int TotalRounds;//[Offset: 0xe0, Size: 0x4]
	int CurrentRound;//[Offset: 0xe4, Size: 0x4]
	float PreRoundWaitingTime;//[Offset: 0xe8, Size: 0x4]
	float PreparingTime;//[Offset: 0xec, Size: 0x4]
	float InProgressTime;//[Offset: 0xf0, Size: 0x4]
	float EndRoundTime;//[Offset: 0xf4, Size: 0x4]
	float PostRoundWaitingTime;//[Offset: 0xf8, Size: 0x4]

--------------------------------
Class: SGGameStateScoreComponent.ActorComponent.Object
	void Killed(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x44aee3fee041

--------------------------------
Class: SGGameStateTeamManagerComponent.ActorComponent.Object
	SGTeamInfo*[] Teams;//[Offset: 0xc0, Size: 0x10]
	class SGTeamInfo* TeamClass;//[Offset: 0xd0, Size: 0x8]
	int TeamCount;//[Offset: 0xd8, Size: 0x4]

--------------------------------
Class: SGGameStateTicketComponent.ActorComponent.Object
	int TotalTickets;//[Offset: 0xc0, Size: 0x4]
	int CurrentTickets;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: SGGameStateTimeComponent.ActorComponent.Object
	float TotalTime;//[Offset: 0xc0, Size: 0x4]
	float CurrentTime;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: SGGameStateWorldSettingsCacheComponent.ActorComponent.Object
	SGWorldSettingsActor* CachedWorldSettings;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: SGWorldSettingsActor.Actor.Object
	class ActorComponent[] WorldSettingsComponentClasses;//[Offset: 0x2e0, Size: 0x10]
	ActorComponent*[] WorldSettingsComponents;//[Offset: 0x2f0, Size: 0x10]

--------------------------------
Class: SGGameStatics.BlueprintFunctionLibrary.Object
	void SpawnAICharacter(SGAISpawnPoint* SpawnPoint, out const FName GroupID, int EquipPoolID);// 0x4531e3fee041
	bool ShouldSpawnAtStartSpot(GameMode* GameMode, Controller* Player);// 0x4530e3fee041
	bool ShouldGiveBackTeammateItem(Object* WorldContextObject);// 0x452fe3fee041
	void SetTotalTime(GameState* GameState, float TotalTime);// 0x452ee3fee041
	void SetTotalTickets(GameState* GameState, int TotalTickets);// 0x452de3fee041
	void SetTimeDilation(Object* WorldContextObject, float NewDilation);// 0x452ce3fee041
	void SetPlayerWhere(Object* WorldContextObject, int WhereId);// 0x452be3fee041
	void SetMatchIsolationInfo(Object* WorldContextObject, int MatchType);// 0x452ae3fee041
	void SetLevelLoadLimitTime(Object* WorldContextObject, float Millisecond);// 0x4529e3fee041
	void SetGameFlowState(GameState* GameState, FName NewState);// 0x4528e3fee041
	bool SetDeathDropType(Object* WorldContextObject, enum DeathDropType);// 0x4527e3fee041
	void SetCurrentTime(GameState* GameState, float CurrentTime);// 0x4526e3fee041
	void SetCurrentTickets(GameState* GameState, int CurrentTickets);// 0x4525e3fee041
	void SaveCharacterTakeOutRareItemCount(SGCharacter* Character, bool bDead);// 0x4524e3fee041
	void ResetAllLootPoint(Object* WorldContextObject, bool bRespawn);// 0x4523e3fee041
	bool ReqPlayerFinishGame(GameMode* GameMode, PlayerController* InPlayerController);// 0x4522e3fee041
	bool ReqOBPlayerFinishGame(GameMode* GameMode, PlayerController* InPlayerController);// 0x4521e3fee041
	bool ReqExitWatchGame(GameMode* GameMode, PlayerController* InPlayerController);// 0x4520e3fee041
	bool RemovePlayerFromTeam(GameState* GameState, PlayerController* PlayerController);// 0x451fe3fee041
	bool RemoveCurseOnTeammate(Object* WorldContextObject, uint64 SelfGID, uint64 TargetTeammateGID);// 0x451ee3fee041
	void ReleaseStaticMesh(World* World);// 0x451de3fee041
	void RefreshDifficulty(Object* WorldContextObject);// 0x451ce3fee041
	bool PlaceCurseOnTeammate(Object* WorldContextObject, uint64 SelfGID, uint64 TargetTeammateGID);// 0x451be3fee041
	bool MarkPackageDirty(Object* Object);// 0x451ae3fee041
	FString MapNameShortToLong(FString InShortMapName);// 0x4519e3fee041
	bool IsZoneSvrValid(FString Options, out FString Out_ZoneSvrPlayerGid);// 0x4518e3fee041
	bool IsSeedDS(Object* WorldContextObject);// 0x4517e3fee041
	bool IsReconnectValid(FString Options, out FString Out_bIsReconnect);// 0x4516e3fee041
	bool IsRangeMode(Object* WorldContextObject);// 0x4515e3fee041
	bool IsOffLineDS(Object* WorldContextObject);// 0x4514e3fee041
	bool IsLoadingLevel(Object* WorldContextObject);// 0x4513e3fee041
	bool IsLevelLoadComplete(Object* WorldContextObject, FString LevelName);// 0x4512e3fee041
	bool IsHighRatioGame(int SpecialID);// 0x4511e3fee041
	bool IsGameDS(Object* WorldContextObject);// 0x4510e3fee041
	bool IsDiscardToken(Object* WorldContextObject, FString Token);// 0x450fe3fee041
	void IncreaseCurrentRound(GameState* GameState);// 0x450ee3fee041
	WeatherInfo GetWeatherInfo(Object* WorldContextObject);// 0x450de3fee041
	bool GetTypeSwitch(Object* WorldContextObject, enum SwitcherType);// 0x450ce3fee041
	float GetTotalTime(GameState* GameState);// 0x450be3fee041
	int GetTotalTickets(GameState* GameState);// 0x450ae3fee041
	int GetTotalRounds(GameState* GameState);// 0x4509e3fee041
	FString GetTlogActivatedActivities(Object* WorldContextObject);// 0x4508e3fee041
	int GetTeamTickets(SGTeamInfo* Team);// 0x4507e3fee041
	SGTeamInfo*[] GetTeams(GameState* GameState);// 0x4506e3fee041
	int GetSubModeID(Object* WorldContextObject);// 0x4505e3fee041
	FString GetSimpleDeviceName();// 0x4504e3fee041
	float GetServerWorldTime(Object* WorldContextObject);// 0x4503e3fee041
	DateTime GetServerNowTime(Object* WorldContextObject);// 0x4502e3fee041
	FText GetRoundInProgressTimeText(GameState* GameState);// 0x4501e3fee041
	float GetRoundInProgressTime(GameState* GameState);// 0x4500e3fee041
	int GetRoomRanking(Object* WorldContextObject);// 0x44ffe3fee041
	FText GetRemainTimeText(GameState* GameState);// 0x44fee3fee041
	float GetRemainTime(GameState* GameState);// 0x44fde3fee041
	int GetPMCNum(Object* WorldContextObject);// 0x44fce3fee041
	FString GetPlayerTokenByGID(Object* WorldContextObject, int64 GID);// 0x44fbe3fee041
	int GetPlayerControllerNum(Object* WorldContextObject);// 0x44fae3fee041
	int GetPlayerAverageLevel(Object* WorldContextObject);// 0x44f9e3fee041
	int GetOBNum(Object* WorldContextObject);// 0x44f8e3fee041
	int GetMatchIsolationInfo(Object* WorldContextObject);// 0x44f7e3fee041
	int GetMapID(Object* WorldContextObject);// 0x44f6e3fee041
	int GetMainModeID(Object* WorldContextObject);// 0x44f5e3fee041
	SGInventory* GetLocalInventoryByRuntimeID(Object* WorldContextObj, int InRumtimeID);// 0x44f4e3fee041
	bool GetIsTakeInThresholdGame(Object* WorldContextObject);// 0x44f3e3fee041
	bool GetIsServerInPIE(GameState* GameState);// 0x44f2e3fee041
	bool GetIsGameUAM();// 0x44f1e3fee041
	float GetGameTime(Object* WorldContextObject);// 0x44f0e3fee041
	int GetGameSpecialID(Object* WorldContextObject);// 0x44efe3fee041
	float GetGameRunningTime(Object* WorldContextObject);// 0x44eee3fee041
	FString GetGameRemainingTimeStr(Object* WorldContextObject);// 0x44ede3fee041
	float GetGameRemainingTime(Object* WorldContextObject);// 0x44ece3fee041
	int GetGameFlowStateDuration(GameState* GameState, FName InState);// 0x44ebe3fee041
	FName GetGameFlowState(GameState* GameState);// 0x44eae3fee041
	FString GetDSVersion();// 0x44e9e3fee041
	bool GetDSParamIsPrepared(Object* WorldContextObject);// 0x44e8e3fee041
	SGGSDSParamComponent* GetDsParamComponent(Object* WorldContextObj);// 0x44e7e3fee041
	int GetDifficulty(Object* WorldContextObject);// 0x44e6e3fee041
	FString GetDeviceName();// 0x44e5e3fee041
	enum GetDeathDropType(Object* WorldContextObject);// 0x44e4e3fee041
	float GetCurrentTime(GameState* GameState);// 0x44e3e3fee041
	int GetCurrentTickets(GameState* GameState);// 0x44e2e3fee041
	int GetCurrentRound(GameState* GameState);// 0x44e1e3fee041
	bool GetCompareResult(int CheckNum, enum CompareType, int Value1, int Value2);// 0x44e0e3fee041
	SGWorldSettingsActor* GetCachedWorldSettings(World* World);// 0x44dfe3fee041
	<int,int> GetBossShield(Object* WorldContextObject);// 0x44dee3fee041
	PlayerStartGroup[] GetAllUnUsePMCPlayerStart(Object* WorldContextObject);// 0x44dde3fee041
	uint64[] GetAllPlayerGIDS(World* World);// 0x44dce3fee041
	<int,int> GetAllCharacterTakeOutRareItemCount(Object* WorldContextObject);// 0x44dbe3fee041
	<int,int> GetAllCharacterTakeOutRareByScavItemCount(Object* WorldContextObject);// 0x44dae3fee041
	<int,int> GetAllCharacterTakeOutRareByGuaranteeItemCount(Object* WorldContextObject);// 0x44d9e3fee041
	int GetAliveTeamCount(GameState* GameState);// 0x44d8e3fee041
	SGTeamInfo* GetAliveTeam(GameState* GameState);// 0x44d7e3fee041
	int GetActorLevelCollectionType(Actor* Actor);// 0x44d6e3fee041
	ActivityInfo[] GetActivityList(Object* WorldContextObject);// 0x44d5e3fee041
	bool GameModePlayerFinishGame(GameMode* GameMode, PlayerController* InPlayerController, enum InFinishType, Actor* EscapeVolume);// 0x44d4e3fee041
	bool DrawIcon(SGCharacter* SelfChar, Canvas* InCanvas, Texture* RenderTexture);// 0x44d3e3fee041
	Actor* ChoosePlayerStart(GameMode* GameMode, Controller* Player);// 0x44d2e3fee041
	bool CheckCharacterCanLootCorpseContainerByGID(Object* WorldContextObject, uint64 CharacterGID, uint64 CorpseBoxCharacterGID);// 0x44d1e3fee041
	bool CheckCharacterCanLootCorpseContainer(Object* WorldContextObject, uint64 CharacterGID, Actor* CorpseOrContainer);// 0x44d0e3fee041
	bool ChangeTeam(GameState* GameState, PlayerController* NewPlayerController, byte NewTeamIndex, FString TeamName);// 0x44cfe3fee041
	bool ChangeFaction(GameState* GameState, interface classNone CurTeam, enum NewFaction);// 0x44cee3fee041
	void BroadcastBeginGameInit(Object* WorldContextObject);// 0x44cde3fee041
	bool AppendInventoryArrForRemoveInFrame(Object* WorldContextObject, SGInventory*[] Inventorys);// 0x44cce3fee041
	bool AddPlayerToTeam(GameState* GameState, PlayerController* NewPlayerController);// 0x44cbe3fee041
	bool AddInventoryForRemoveInFrame(Object* WorldContextObject, SGInventory* Inventory);// 0x44cae3fee041
	bool AddCharacterForDestroyInFrame(Object* WorldContextObject, Actor* DestoryCharacter, Vector DeathLocation);// 0x44c9e3fee041
	bool AddActorForDestroyInFrame(Object* WorldContextObject, Actor* DestoryActor);// 0x44c8e3fee041

--------------------------------
Class: WeatherInfo
	int Time;//[Offset: 0x0, Size: 0x4]
	int[] WeatherList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SGGSDSParamComponent.ActorComponent.Object
	bool isPrepared;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	int PMCNum;//[Offset: 0xc4, Size: 0x4]
	int OBNum;//[Offset: 0xc8, Size: 0x4]
	<int,int> BossShield;//[Offset: 0xd0, Size: 0x50]
	ActivityInfo[] ActivityList;//[Offset: 0x120, Size: 0x10]
	PlayerAuthInfo[] PlayerAuthInfoList;//[Offset: 0x130, Size: 0x10]
	<int,FString> PlayerTokenMap;//[Offset: 0x140, Size: 0x50]
	FString[] DiscardTokenArr;//[Offset: 0x190, Size: 0x10]
	WeatherInfo WeatherInfo;//[Offset: 0x1a0, Size: 0x18]
	int RoomRanking;//[Offset: 0x1b8, Size: 0x4]
	bool bGiveBackTeammateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 0x1]
	<int,int> ItemValueMap;//[Offset: 0x1c0, Size: 0x50]
	uint32 MatchIsolationType;//[Offset: 0x210, Size: 0x4]
	bool IsTakeInThresholdGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 0x1]
	bool IsMarkInHighRatio_CompetitionGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x215, Size: 0x1]
	uint64 CompetitionRoomID;//[Offset: 0x218, Size: 0x8]
	bool ShouldGiveBackTeammateItem();// 0x457ce3fee041
	void SetWeatherInfo(WeatherInfo InWeatherInfo);// 0x457be3fee041
	void SetRoomRanking(int InRoomRanking);// 0x457ae3fee041
	void SetPMCNum(int InPMCNum);// 0x4579e3fee041
	void SetOBNum(int InOBNum);// 0x4578e3fee041
	void SetMatchIsolationType(uint32 IsolationType);// 0x4577e3fee041
	void SetItemValue(int ItemID, int ItemValue);// 0x4576e3fee041
	void SetIsTakeInThresholdGame(bool bInput);// 0x4575e3fee041
	void SetGiveBackTeammateItem(bool bInGiveBackTeammateItem);// 0x4574e3fee041
	void SetDSParamPrepared();// 0x4573e3fee041
	void SetCompetitionRoomID(uint64 InRoomID);// 0x4572e3fee041
	void SetCompetitionGameIsMarkInHighRatio(bool bInput);// 0x4571e3fee041
	void OnRep_PMCNum();// 0x4570e3fee041
	void OnRep_OBNum();// 0x456fe3fee041
	void OnRep_GiveBackTeammateItem();// 0x456ee3fee041
	void OnRep_Activity();// 0x456de3fee041
	bool IsDSParamPrepared();// 0x456ce3fee041
	bool IsDiscardToken(FString Token);// 0x456be3fee041
	WeatherInfo GetWeatherInfo();// 0x456ae3fee041
	int GetRoomRanking();// 0x4569e3fee041
	int GetPMCNum();// 0x4568e3fee041
	FString GetPlayerTokenByGID(int64 GID);// 0x4567e3fee041
	int GetPlayerAverageLevel();// 0x4566e3fee041
	int GetOBNum();// 0x4565e3fee041
	uint32 GetMatchIsolationType();// 0x4564e3fee041
	int GetItemValue(int ItemID);// 0x4563e3fee041
	bool GetIsTakeInThresholdGame();// 0x4562e3fee041
	uint64 GetCompetitionRoomID();// 0x4561e3fee041
	bool GetCompetitionGameIsMarkInHighRatio();// 0x4560e3fee041
	<int,int> GetBossShield();// 0x455fe3fee041
	ActivityInfo[] GetActivityList();// 0x455ee3fee041
	void DiscardToken(FString Token);// 0x455de3fee041
	void DiscardPlayerToken(int64 GID);// 0x455ce3fee041
	void AddTokenInfo(int64 GID, FString Token);// 0x455be3fee041
	void AddPlayerAuthInfo(int64 GID, FString Token, int Level);// 0x455ae3fee041
	void AddBossShield(int ID, int Value);// 0x4559e3fee041
	void AddActivity(int InActivityID, int InDisplayOrder, int InnerActType);// 0x4558e3fee041

--------------------------------
Class: ActivityInfo
	int ActivityID;//[Offset: 0x0, Size: 0x4]
	int DisplayOrder;//[Offset: 0x4, Size: 0x4]
	int ActivityType;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PlayerAuthInfo
	int64 GID;//[Offset: 0x0, Size: 0x8]
	FString Token;//[Offset: 0x8, Size: 0x10]
	int Level;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SGGameViewportClient.GameViewportClient.ScriptViewportClient.Object
	PlayerController* CachedPlayerController;//[Offset: 0x368, Size: 0x8]

--------------------------------
Class: SGGas.Actor.Object
	float CurrentIntensity;//[Offset: 0x2e0, Size: 0x4]
	void SetCurrentIntensity(float NewIntensity);// 0x4538e3fee041
	void RefreshCurrentGasIntensity();// 0x4537e3fee041
	void OnRep_CurrentIntensity();// 0x4536e3fee041
	float GetCurrentIntensity();// 0x4535e3fee041

--------------------------------
Class: SGGECAR_WithInventoryEffectTag.GameplayEffectCustomApplicationRequirement.Object

--------------------------------
Class: SGGIGASGlobalComponent.SGGameInstanceComponent.Object
	GameplayTag RecoveryTag_OutOfEndurance;//[Offset: 0x28, Size: 0x8]
	GameplayTag RecoveryTag_BoneBreak;//[Offset: 0x30, Size: 0x8]
	GameplayTag RecoveryTag_Bleed;//[Offset: 0x38, Size: 0x8]
	GameplayTag RecoveryTag_Pain;//[Offset: 0x40, Size: 0x8]
	GameplayTag RecoveryTag_EnduranceLoss;//[Offset: 0x48, Size: 0x8]
	GameplayTag RecoveryTag_TearGas;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: MFGlobalEventSubsystem.WorldSubsystem.Subsystem.Object
	MFGlobalEventSubsystem* Get(Object* WorldContextObject);// 0x4539e3fee041

--------------------------------
Class: SGGlobalEventSubsystem.MFGlobalEventSubsystem.WorldSubsystem.Subsystem.Object
	void UnRegisterCharacterEvents(SGCharacter* SGCharacter);// 0x4554e3fee041
	void RegisterCharacterEvents(SGCharacter* SGCharacter);// 0x4553e3fee041
	void OnWorldBeginPlay();// 0x4552e3fee041
	void OnVolumeActorChanged(int64 InVolumeID);// 0x4551e3fee041
	void OnUseRecoveryInventory(Character* Character, SGInventory* Inventory, enum InUseInventoryPhase);// 0x4550e3fee041
	void OnThrowableProjectileSpawn(SGThrowableProjectile* InProjectile, Vector SpawnLocation, float PlayEffectTime);// 0x454fe3fee041
	void OnTakeDamageEvent(SGCharacter* Taker, SGCharacter* Causer, float AttemptedDamage, float ActuralDamage, Vector Momentum, Actor* HitArmor, out const SGPointDamageEvent DamageEvent, Actor* DamageCauser, DamageEventObject* DamageEventObject);// 0x454ee3fee041
	void OnSwitchWeaponCompleted(Character* Character, SGWeapon* Weapon);// 0x454de3fee041
	void OnReadyToPlay(Character* Character);// 0x454ce3fee041
	void OnPushBullet(Character* Character, SGInventory* Bullet, SGInventory* Mag, int BulletCount);// 0x454be3fee041
	void OnPrePlayerFinishGameEvent(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x454ae3fee041
	void OnPlayerBeginGame(PlayerController* PC);// 0x4549e3fee041
	void OnNotifyInteractEvent(SGCharacter* Character, Actor* Target, enum EventType, SGInteractComponentBase* SGInteractComponentBase);// 0x4548e3fee041
	void OnModifyInventoryTotalCount(Character* Character, SGInventory* Inventory, int OldCount, int NewCount);// 0x4547e3fee041
	void OnLootContainerEvent(int64 ContainerType, Character* Looter, SGInventory* LootContainer);// 0x4546e3fee041
	void OnLocationReport(Character* Character, bool bIsMoving, float MovDist);// 0x4545e3fee041
	void OnKilledEvent(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x4544e3fee041
	void OnInventoryRemoved(Character* Character, SGInventory* Inventory);// 0x4543e3fee041
	void OnInventoryAttractAI(Actor* Actor, Character* AICharacter);// 0x4542e3fee041
	void OnInventoryAdded(Character* Character, SGInventory* Inventory);// 0x4541e3fee041
	void OnGameplayEffectAppliedEvent(AbilitySystemComponent* AbilitySystemComp, out const GameplayEffectSpec GameplayEffectSpec, ActiveGameplayEffectHandle ActiveGameplayEffectHandle, Character* Character);// 0x4540e3fee041
	void OnGameBegin();// 0x453fe3fee041
	void OnFlowStateChange(PlayerController* PlayerController, FName NewState, FName OldState);// 0x453ee3fee041
	void OnContainerInteractStateChanged(SGInventory* ContainerInv, Character* Character, bool bNewInteractState);// 0x453de3fee041
	void OnCharacterCostBullet(Character* Character, SGInventory* Inventory, out const uint64[] BulletItemIDs);// 0x453ce3fee041
	void OnAttachPositionChanged(SGInventory* Inventory, Actor* ParentActor, enum NewAttachPosition, enum OldAttachPosition);// 0x453be3fee041
	void OnAIActived(Character* AICharacter);// 0x453ae3fee041

--------------------------------
Class: SGGMLootContainerUnLockManager.ActorComponent.Object
	<SGInventory*,LootContainerUnLockInfo> LootContainerUnLockInfoMap;//[Offset: 0xc0, Size: 0x50]
	bool TryGetLootContainerUnLockInfo(SGInventory* Inventory, out LootContainerUnLockInfo UnLockInfo);// 0x4555e3fee041

--------------------------------
Class: LootContainerUnLockInfo
	uint64[] UnLockPlayerGIDs;//[Offset: 0x0, Size: 0x10]
	float UnLockTime;//[Offset: 0x10, Size: 0x4]
	float LootExtendTime;//[Offset: 0x14, Size: 0x4]
	float LootExtendValidTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SGGraphicStyleOverridePPVActor.Actor.Object
	byte MaxNumStyle;//[Offset: 0x2e0, Size: 0x1]
	byte MaxNumQuality;//[Offset: 0x2e1, Size: 0x1]
	bool bResetWhenBeginOrEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e2, Size: 0x1]
	PostProcessComponent*[] SortedPPComps;//[Offset: 0x2e8, Size: 0x10]

--------------------------------
Class: SGGraphicStyleSubSystem.SGBaseWorldSubsystem.WorldSubsystem.Subsystem.Object
	SGGraphicStyleOverridePPVActor*[] OverridePPVActors;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SGGrenadeSoundComponent.SGWeaponSoundComponent.ActorComponent.Object
	AkAudioBank* SoundBank;//[Offset: 0xe8, Size: 0x8]

--------------------------------
Class: SGGSAILevelComponent.ActorComponent.Object
	bool LevelLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: SGHUDStatics.Object
	void UpdateTeammateIocnPos(PlayerController* PC, PlayerState* LocalPS, Character* SpectCharacter, WidgetSwitcher* HealthBarSwitcher, CanvasPanel* InfoCanvas, TextBlock* PlayerNameText, Image* Image, int Index, PanelSlot* PanelSlot, bool bDBNO, float WorldOffsetZDBNO, float InfoOffsetX, float InfoOffsetYDBNO, float WorldOffsetZ, float InfoOffsetY, float Opac, WidgetSwitcher* ValuablesSwitcher, float EffectDistance, float OpacRadius, float MinOpac, Image* MentorImage, Image* PupilImage);// 0x45f8e3fee041
	void UpdatePerspectiveIocnPos(Character* SpectCharacter, WidgetSwitcher* TeamInfoSwitcher, CanvasPanel* InfoCanvas, TextBlock* PlayerNameText, TextBlock* TeamNameText, Image* ImageBg, Image* ImageBottom, SGCharacter* PerspoectiveCharacter, PanelSlot* PanelSlot, LinearColor Color, SlateColor TextColor, bool bDBNO, float WorldOffsetZDBNO, float InfoOffsetX, float InfoOffsetYDBNO, float WorldOffsetZ, float InfoOffsetY, float Opac, float OpacRadius, float MinOpac, float ScaleZoomVal);// 0x45f7e3fee041
	void UpdateDBNOPercent(PlayerState* PS, WidgetSwitcher* HealthBarSwitcher, int Index);// 0x45f6e3fee041
	void TriggerGlobalInvalidate(PlayerController* PC);// 0x45f5e3fee041
	Vector2D TransWidgetPositionToTargetAnchor(SGUserWidget* Widget, Anchors TargetAnchors);// 0x45f4e3fee041
	Vector2D TransWidgetPositionToLeftTopAnchor(SGUserWidget* Widget);// 0x45f3e3fee041
	Vector2D TransPositionToTargetAnchor(Vector2D Pos, Vector2D AnchorsMin);// 0x45f2e3fee041
	bool StopAnimation(UMGSequencePlayer* Player);// 0x45f1e3fee041
	void StartFire(PlayerController* PC, SGInventory* CurWeapon);// 0x45f0e3fee041
	int ShouldShowKillCamPlayerName(Character* Character, Character* Killer, Character* Victim, float Range);// 0x45efe3fee041
	void SetWidgetZOrder(SGUserWidget* Widget, int ZOrder);// 0x45eee3fee041
	void SetWidgetRenderTranlation(SGUserWidget* Widget, float X, float Y);// 0x45ede3fee041
	void SetWidgetPositionFromLeftTopAnchorPos(SGUserWidget* Widget, Vector2D LeftTopAnchorPos);// 0x45ece3fee041
	void SetWidgetPosition(SGUserWidget* Widget, float X, float Y);// 0x45ebe3fee041
	void SetProgressImage(ProgressBar* ProgressBar, Object* icon);// 0x45eae3fee041
	void SetProgressColor(ProgressBar* ProgressBar, LinearColor InColor, bool RefershBackColor);// 0x45e9e3fee041
	void SetImageWithTexOnMID(Image* Image, Object* Tex, MaterialInstanceDynamic* Mid, FName MatTexParamName);// 0x45e8e3fee041
	void SetImageRenderTranlation(Image* Image, float X, float Y);// 0x45e7e3fee041
	void SetImageFromImage(Image* Image, Image* FromImage);// 0x45e6e3fee041
	void SetImageColor(Image* Image, float R, float G, float B, float A);// 0x45e5e3fee041
	void SetImage(Image* Image, Object* icon);// 0x45e4e3fee041
	void SetGridItemPosition(Widget* Content, int InRow, int InColumn);// 0x45e3e3fee041
	void SetGlobalInvalidationEnable(PlayerController* PC, bool bEnable);// 0x45e2e3fee041
	void SetBrushSize(out SlateBrush InBrush, Vector2D InSize);// 0x45e1e3fee041
	void SetAllChildrenVisibility(PanelWidget* PanelWidget, enum InVisibility);// 0x45e0e3fee041
	void PrintUserWidgetDetailInfoNode(UserWidgetDetailInfoNode* InDetailInfoNode, int Indent);// 0x45dfe3fee041
	void PopMessage(FString Title, FString Message);// 0x45dee3fee041
	bool IsImageEmpty(Image* Image);// 0x45dde3fee041
	bool HasGameViewport(World* World);// 0x45dce3fee041
	World* GetWidgetWorld(Widget* Widget);// 0x45dbe3fee041
	float GetWidgetSizeY(SGUserWidget* Widget);// 0x45dae3fee041
	float GetWidgetSizeX(SGUserWidget* Widget);// 0x45d9e3fee041
	Vector2D GetWidgetSize(Widget* Widget);// 0x45d8e3fee041
	Vector2D GetScreenResolution();// 0x45d7e3fee041
	LinearColor GetRTColor(Image* Image);// 0x45d6e3fee041
	MaterialInstanceDynamic* GetRT(Image* Image);// 0x45d5e3fee041
	void GetRefWidgetSize(Widget* Widget, out Vector2D InSize);// 0x45d4e3fee041
	FText GetMapLocationNameByKey(out const FName InKey);// 0x45d3e3fee041
	byte GetImageType(Image* Image);// 0x45d2e3fee041
	Vector2D GetImageTexSizeFromMID(Image* Image, FName MatTexParamName);// 0x45d1e3fee041
	Vector2D GetImageIconSize(Image* Image);// 0x45d0e3fee041
	Vector2D GetImageBrushSize(Image* Image);// 0x45cfe3fee041
	Vector2D GetIconSize(Object* icon);// 0x45cee3fee041
	float GetCanvasWidth(Widget* InWidget);// 0x45cde3fee041
	float GetCanvasHigh(Widget* InWidget);// 0x45cce3fee041
	UserWidgetDetailInfoNode* GenerateUserWidgetDetailInfoNode(UserWidget* InUserWidget, UserWidgetDetailInfoNode* InUserWidgetDetailInfoNode);// 0x45cbe3fee041
	void FireLuaEvent(FString Event);// 0x45cae3fee041
	void DumpUserWidgetDetailInfo(UserWidget* InUserWidget);// 0x45c9e3fee041
	MaterialInstanceDynamic* CreateMIDFromMI(MaterialInstance* MI, Object* WorldContextObject);// 0x45c8e3fee041
	void CopyToClipboard(FString TextStr);// 0x45c7e3fee041
	void ChangeImageMIDForHUDWeaponSlot(Image* Image, MaterialInstanceDynamic* NewMID, FName NewMatTexParamName);// 0x45c6e3fee041
	void ChangeImageMID(Image* Image, MaterialInstanceDynamic* NewMID, FName NewMatTexParamName);// 0x45c5e3fee041

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x13c, Size: 0x4]
	void SetActiveWidgetIndex(int Index);// 0x68d5e3fee041
	void SetActiveWidget(Widget* Widget);// 0x68d4e3fee041
	Widget* GetWidgetAtIndex(int Index);// 0x68d3e3fee041
	int GetNumWidgets();// 0x68d2e3fee041
	int GetActiveWidgetIndex();// 0x68d1e3fee041
	Widget* GetActiveWidget();// 0x68d0e3fee041

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x128, Size: 0x1b8]
	SlateWidgetStyleAsset* Style;//[Offset: 0x2e0, Size: 0x8]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2e8, Size: 0x8]
	SlateBrushAsset* FillImage;//[Offset: 0x2f0, Size: 0x8]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x2f8, Size: 0x8]
	float Percent;//[Offset: 0x300, Size: 0x4]
	byte BarFillType;//[Offset: 0x304, Size: 0x1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	Vector2D BorderPadding;//[Offset: 0x308, Size: 0x8]
	delegate PercentDelegate;//[Offset: 0x310, Size: 0x10]
	LinearColor FillColorAndOpacity;//[Offset: 0x320, Size: 0x10]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x330, Size: 0x10]
	void SetPercent(float InPercent);// 0x6808e3fee041
	void SetIsMarquee(bool InbIsMarquee);// 0x6807e3fee041
	void SetFillColorAndOpacity(LinearColor InColor);// 0x6806e3fee041

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x90]
	SlateBrush FillImage;//[Offset: 0x98, Size: 0x90]
	SlateBrush MarqueeImage;//[Offset: 0x128, Size: 0x90]

--------------------------------
Class: UserWidgetDetailInfoNode.Object
	class Object* WidgetClass;//[Offset: 0x28, Size: 0x8]
	int WidgetCount;//[Offset: 0x30, Size: 0x4]
	UserWidgetDetailInfoNode*[] ChildNodes;//[Offset: 0x38, Size: 0x10]
	int[] SelfWidgetCountList;//[Offset: 0x48, Size: 0x10]
	int[] TotalWidgetCountList;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: SGPooledImpactEffect.PooledActor.Actor.Object
	SceneComponent* DummyRoot;//[Offset: 0x328, Size: 0x8]
	StaticMeshComponent* ImpactMeshComp;//[Offset: 0x330, Size: 0x8]
	DecalComponent* ImpactDecalComp;//[Offset: 0x338, Size: 0x8]
	void PoolEndPlay();// 0x4602e3fee041
	void PoolBeginPlay();// 0x4601e3fee041

--------------------------------
Class: SGPooledImpactEffectManager.Object
	PooledImpactEffectBind[] PooledImpactEffectBindList;//[Offset: 0x28, Size: 0x10]
	PooledImpactEffectResource EffectResouceHead;//[Offset: 0x38, Size: 0x78]
	PooledImpactEffectResource EffectResouceArm;//[Offset: 0xb0, Size: 0x78]
	PooledImpactEffectResource EffectResouceLeg;//[Offset: 0x128, Size: 0x78]
	PooledImpactEffectResource EffectResouceBody;//[Offset: 0x1a0, Size: 0x78]
	PooledImpactEffectResource EffectResouceHitArmor;//[Offset: 0x218, Size: 0x78]
	PooledImpactEffectResource EffectResouceHead_3P;//[Offset: 0x290, Size: 0x78]
	PooledImpactEffectResource EffectResouceArm_3P;//[Offset: 0x308, Size: 0x78]
	PooledImpactEffectResource EffectResouceLeg_3P;//[Offset: 0x380, Size: 0x78]
	PooledImpactEffectResource EffectResouceBody_3P;//[Offset: 0x3f8, Size: 0x78]
	PooledImpactEffectResource EffectResouceHitArmor_3P;//[Offset: 0x470, Size: 0x78]
	PooledImpactEffectResource MeleeEffectResouceHead;//[Offset: 0x4e8, Size: 0x78]
	PooledImpactEffectResource MeleeEffectResouceArm;//[Offset: 0x560, Size: 0x78]
	PooledImpactEffectResource MeleeEffectResouceLeg;//[Offset: 0x5d8, Size: 0x78]
	PooledImpactEffectResource MeleeEffectResouceBody;//[Offset: 0x650, Size: 0x78]
	PooledImpactEffectResource MeleeEffectResouceHitArmor;//[Offset: 0x6c8, Size: 0x78]
	PooledImpactEffectResource GetPooledImpactEffectFromPhysicalMaterial(PhysicalMaterial* InPhysicalMaterial, SGWeapon* Weapon, out const Vector SpawnLoc, World* World);// 0x4604e3fee041
	PooledImpactEffectResource GetPooledHittingBodyImpactEffect(bool bCanPenetrateArmor, enum HitGroup, SGWeapon* Weapon, out const Vector SpawnLoc, World* World);// 0x4603e3fee041

--------------------------------
Class: PooledImpactEffectBind
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8]
	PooledImpactEffectResource EffectResouce;//[Offset: 0x8, Size: 0x78]
	PooledImpactEffectResource MeleeEffectResource;//[Offset: 0x80, Size: 0x78]

--------------------------------
Class: PooledImpactEffectResource
	ParticleSystem* ParticleTemplate;//[Offset: 0x0, Size: 0x8]
	ParticleSystem* ParticleNegagiveTemplate;//[Offset: 0x8, Size: 0x8]
	AkAudioEvent* AudioEvent;//[Offset: 0x10, Size: 0x8]
	MeleeAudioEvent MeleeAudioEvent;//[Offset: 0x18, Size: 0x10]
	StaticMesh* StaticMeshTemplate;//[Offset: 0x28, Size: 0x8]
	StaticMesh* NegagiveStaticMeshTemplate;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* DecalOverridenMaterial;//[Offset: 0x38, Size: 0x8]
	MaterialInterface* NegagiveDecalOverridenMaterial;//[Offset: 0x40, Size: 0x8]
	Vector DecalScale;//[Offset: 0x48, Size: 0xc]
	CurveFloat* ScaleCurveByDistance;//[Offset: 0x58, Size: 0x8]
	CurveFloat* ScaleCurveByFOV;//[Offset: 0x60, Size: 0x8]
	float LifeSpan;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: MeleeAudioEvent
	AkAudioEvent* BluntMeleeAudioEvent;//[Offset: 0x0, Size: 0x8]
	AkAudioEvent* SharpMeleeAudioEvent;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SGInteractiveObjectGridActor.Actor.Object
	int GridSize;//[Offset: 0x2e0, Size: 0x4]
	int NearGridCount;//[Offset: 0x2e4, Size: 0x4]
	<int,SGInteractiveObjectGrid> Grids;//[Offset: 0x2e8, Size: 0x50]
	int[] VisibleGrids;//[Offset: 0x338, Size: 0x10]

--------------------------------
Class: SGInteractiveObjectGrid
	int GridX;//[Offset: 0x0, Size: 0x4]
	int GridY;//[Offset: 0x4, Size: 0x4]
	int GridZ;//[Offset: 0x8, Size: 0x4]
	interface classNone[] InteractiveObjects;//[Offset: 0x10, Size: 0x10]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: SGInteractiveObjectInterface.Interface.Object

--------------------------------
Class: SGInventoryAnimationComponent.ActorComponent.Object
	InventoryAnimPoseInfo EquipAnimPoseInfo;//[Offset: 0xc8, Size: 0x18]
	bool bIsAssembled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bOnlyEnableAnimWhenAssembled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	SGAdapterAnimSet AdapterAnimSet;//[Offset: 0xe8, Size: 0x50]
	AnimSequence* FoldStockAnimSeq;//[Offset: 0x138, Size: 0x28]
	AnimSequence* UnFoldStockAnimSeq;//[Offset: 0x160, Size: 0x28]
	Vector FoldScopeAnimAdapterOffset;//[Offset: 0x188, Size: 0xc]
	AnimMontage* CharacterFoldScopeHandMontage;//[Offset: 0x198, Size: 0x28]
	AnimMontage* CharacterUnfoldScopeHandMontage;//[Offset: 0x1c0, Size: 0x28]
	void ResetToDefaultAnimPose();// 0x4647e3fee041
	void PlayAnimation(enum AnimType);// 0x4646e3fee041
	void OnSkeletalMeshLoadComplete(SkeletalMesh* InventorySkeletalMesh);// 0x4645e3fee041
	void OnOwnerChange(Actor* OldOwner, Actor* NewOwner);// 0x4644e3fee041
	void OnInventoryAnimPoseChanged(SGInventory* Inv, out const InventoryAnimPoseInfo InAnimPoseInfo);// 0x4643e3fee041
	void OnBeDisassembled(SGInventory* ParentInventory);// 0x4642e3fee041
	void OnBeAssembled(SGInventory* ParentInventory);// 0x4641e3fee041
	void ChangeToEquipAnimPose();// 0x4640e3fee041
	void AsyncLoadComplete();// 0x463fe3fee041

--------------------------------
Class: SGAdapterAnimSet
	<enum,AnimSequenceBase*> AdapterAnimMontages;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: SGInventoryAnimInstance.AnimInstance.Object
	SGInventoryAnimInstanceProxy LocalProxy;//[Offset: 0x2c0, Size: 0x770]

--------------------------------
Class: SGInventoryAnimInstanceProxy.AnimInstanceProxy
	bool bIs1P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75a, Size: 0x1]
	SGInventoryAnimInstance* AnimInstance;//[Offset: 0x760, Size: 0x8]

--------------------------------
Class: SGInventoryArmorComponent.ActorComponent.Object

--------------------------------
Class: AttachWithNum.Object
	AttachInventoryInfo* Attach;//[Offset: 0x28, Size: 0x8]
	int Num;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: AttachInventoryInfo.Object
	class SGInventory* CurrentInventory;//[Offset: 0x28, Size: 0x8]
	<FName,AttachWithNum*> SocketAttachmentMap;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: SGInventoryAttachDefaultClassesComponent.ActorComponent.Object
	bool bForceCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bUseOldLst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	AttachInvInfo[] AttachmentInfoLst;//[Offset: 0xc8, Size: 0x10]
	AttachInventoryInfo* AttachmentInfo;//[Offset: 0xd8, Size: 0x8]
	bool bForceMakeMagFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	SGInventory*[] DefaultInventories;//[Offset: 0xf0, Size: 0x10]

--------------------------------
Class: AttachInvInfo
	class SGInventory* AttachmentClass;//[Offset: 0x0, Size: 0x8]
	int Num;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SGInventoryBagEquipMeshComponent.SGInventoryEquipMeshComponent.ActorComponent.Object
	Vector LeftWeaponSocketOffset;//[Offset: 0x4d0, Size: 0xc]
	Vector RightWeaponSocketOffset;//[Offset: 0x4dc, Size: 0xc]

--------------------------------
Class: SGInventoryBeUsedComponent.SGActorBeUsedComponent.ActorComponent.Object
	bool PreCheckEnduranceLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool PreCheckBoneBreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	bool PreCheckBleed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 0x1]
	bool PreCheckOutOfEndurance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123, Size: 0x1]
	bool UseForMoisture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	bool UseForHungry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 0x1]
	delegate UseInBodyPartChangedEvent;//[Offset: 0x128, Size: 0x10]
	enum[] GetEnableUseParts(Actor* User);// 0x465de3fee041
	enum AutoDecideUseInBodyPart(Actor* User);// 0x465ce3fee041

--------------------------------
Class: SGInventoryBeUsedGiveComponent.SGActorBeUsedComponent.ActorComponent.Object

--------------------------------
Class: SGInventoryBeUsedLootComponent.SGActorBeUsedComponent.ActorComponent.Object
	Actor*[] BeUsedHistory;//[Offset: 0x120, Size: 0x10]
	bool bIsReadyForLoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	void SetIsReadyForLoot(bool bInReadyForLoot);// 0x4660e3fee041
	void OnInteractPerformanceStateChanged(Actor* Inventory, enum IteractAnimState);// 0x465fe3fee041
	void CheckAndNotifyOpenEvent(Actor* User, SGInventory* SGInventory);// 0x465ee3fee041

--------------------------------
Class: SGInventoryBulletDamageComponent.ActorComponent.Object
	float BaseDamage;//[Offset: 0xc0, Size: 0x4]
	float BaseSpeed;//[Offset: 0xc4, Size: 0x4]
	float PenetrationFactor;//[Offset: 0xc8, Size: 0x4]
	CurveFloat* PenetrationFactorScaleByNormalizedFlyDistance;//[Offset: 0xd0, Size: 0x8]
	int PenetrationLevel;//[Offset: 0xd8, Size: 0x4]
	bool bPenetrationCovers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	float BrokenProbability;//[Offset: 0xe0, Size: 0x4]
	float BrokenDamageScale;//[Offset: 0xe4, Size: 0x4]
	float ArmorDamage;//[Offset: 0xe8, Size: 0x4]
	int ShotsInOneBullet;//[Offset: 0xec, Size: 0x4]
	float BodyHitThroughDamageFactor;//[Offset: 0xf0, Size: 0x4]
	FName[] PrimaryHitBones;//[Offset: 0xf8, Size: 0x10]
	FName[] SecondaryHitBones;//[Offset: 0x108, Size: 0x10]
	float MoaX;//[Offset: 0x118, Size: 0x4]
	float MoaY;//[Offset: 0x11c, Size: 0x4]
	float HorizontalRecoil;//[Offset: 0x120, Size: 0x4]
	float VerticalRecoil;//[Offset: 0x124, Size: 0x4]
	float BleedProbabilityForPenetration;//[Offset: 0x128, Size: 0x4]
	float BleedProbabilityForBlock;//[Offset: 0x12c, Size: 0x4]
	float BleedProbabilityForBody;//[Offset: 0x130, Size: 0x4]
	class SGThrowableProjectile* SpecialProjectileClass;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: SGInventoryComponentInterface.Interface.Object
	bool ShouldDisableIn3PMode();// 0x4696e3fee041
	void SetOwnerOfOwner(Actor* NewOwner);// 0x4695e3fee041
	SGInventory* GetInventory();// 0x4694e3fee041
	bool DisableComponentTickWhenInactive();// 0x4693e3fee041

--------------------------------
Class: SGInventoryContainerBaseComponent.ActorComponent.Object
	int RowNum;//[Offset: 0xc0, Size: 0x4]
	int ColumnNum;//[Offset: 0xc4, Size: 0x4]
	int RuleID;//[Offset: 0xc8, Size: 0x4]
	SGBagGridInfo[] GridList;//[Offset: 0xd0, Size: 0x10]
	GridPreOccupiedInfo[] PreOccupiedActorInfoMap;//[Offset: 0xe0, Size: 0x10]
	int ContainerIndex;//[Offset: 0xf0, Size: 0x4]
	Actor*[] ChildActorList;//[Offset: 0xf8, Size: 0x10]
	void SortContainerByStandardPrice(out <Actor*,ItemGridInfo> OutSortedActorPosInfo, out Actor*[] OutDiscardedActorList, out Actor*[] InNewTryAddActorList);// 0x469ae3fee041
	void OnRep_PreOccupiedActorInfoMap();// 0x4699e3fee041
	SGBagGridInfo[] GetGridList();// 0x4698e3fee041
	Actor*[] GetChildActorList();// 0x4697e3fee041

--------------------------------
Class: GridPreOccupiedInfo
	Actor* OccupyKeyInventory;//[Offset: 0x0, Size: 0x8]
	SGGridOccupyInfo GridOccupyInfo;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: SGInventoryContainerChildComponent.ActorComponent.Object
	class SGInventory[] DefaultChildInventories;//[Offset: 0xc0, Size: 0x10]
	void DelayGiveChildInventoriesToParent();// 0x469be3fee041

--------------------------------
Class: SGInventoryContainerInteractPerformanceComponent.ActorComponent.Object
	SGCharacter* InteractCharacter;//[Offset: 0xc0, Size: 0x8]
	int MeshComponentIndex;//[Offset: 0xc8, Size: 0x4]
	bool bUseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	bool bEndSearchAutoClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 0x1]
	MeshComponent* TargetMesh;//[Offset: 0xd0, Size: 0x8]
	bool bUseRotateAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	Vector DummyPivotOffset;//[Offset: 0xdc, Size: 0xc]
	Vector RotateAxis;//[Offset: 0xe8, Size: 0xc]
	float RotateAngle;//[Offset: 0xf4, Size: 0x4]
	float RotateDuration;//[Offset: 0xf8, Size: 0x4]
	float RotateAnimProgress;//[Offset: 0xfc, Size: 0x4]
	enum RotateAnimState;//[Offset: 0x100, Size: 0x1]
	Vector DummyPivotRelativeLocation;//[Offset: 0x104, Size: 0xc]
	Rotator DummyPivotOriginRelativeRotation;//[Offset: 0x110, Size: 0xc]
	bool bUseTranslateAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	Vector TranslateOffset;//[Offset: 0x120, Size: 0xc]
	float TranslateDuration;//[Offset: 0x12c, Size: 0x4]
	float TranslateProgress;//[Offset: 0x130, Size: 0x4]
	enum TranslateAnimState;//[Offset: 0x134, Size: 0x1]
	Vector PivotOriginRelativeLocation;//[Offset: 0x138, Size: 0xc]
	Vector PivotRelativeLocation;//[Offset: 0x144, Size: 0xc]
	Rotator PivotOriginRelativeRotation;//[Offset: 0x150, Size: 0xc]
	SGCharacter*[] InteractingCharacters;//[Offset: 0x160, Size: 0x10]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bForceRecalc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	delegate OnInteractPerformanceStateChanged;//[Offset: 0x178, Size: 0x10]
	delegate OnSearchingRoleCountChanged;//[Offset: 0x188, Size: 0x10]
	SGCharacter* LastSearchingCharacter;//[Offset: 0x198, Size: 0x8]
	void StartInteract(SGCharacter* SGCharacter);// 0x46a7e3fee041
	void PlayInteractAnim(float DeltaTime);// 0x46a6e3fee041
	void OnSearchingRoleListChanged(SGCharacter*[] SearchingRoleList);// 0x46a5e3fee041
	void OnRep_AnimStateChanged();// 0x46a4e3fee041
	void OnInventoryOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x46a3e3fee041
	bool HasInteractAnim();// 0x46a2e3fee041
	enum GetIteractAnimState();// 0x46a1e3fee041
	void ForceSetAnimState(enum ContainerIteractAnimState);// 0x46a0e3fee041
	void EndInteract(SGCharacter* SGCharacter);// 0x469fe3fee041
	void CloseContainer(SGCharacter* SGCharacter);// 0x469ee3fee041
	void CloseBox(SGCharacter* SGCharacter);// 0x469de3fee041
	void CheckInteractingCharacters();// 0x469ce3fee041

--------------------------------
Class: SGInventoryContainerMgrComponent.ActorComponent.Object
	InventoryContainerBase_PreOccupiedActorInfoMap[] PreOccupiedActorInfoMapList;//[Offset: 0xe0, Size: 0x10]
	int[] InventoryContainerBaseExtraRowNumList;//[Offset: 0xf0, Size: 0x10]
	InventoryContainerBase[] InventoryContainerBaseList;//[Offset: 0x100, Size: 0x10]
	bool IsRolledUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	void UpdateInventoryContainerBaseList(bool bDoClear);// 0x46b2e3fee041
	void UpdateGridOccupyInfo(out InventoryContainerBase InventoryContainerBase);// 0x46b1e3fee041
	void SortContainerByStandardPrice(out InventoryContainerBase InventoryContainerBase, out <Actor*,ItemGridInfo> OutSortedActorPosInfo, out Actor*[] OutDiscardedActorList, out Actor*[] InNewTryAddActorList);// 0x46b0e3fee041
	bool RemoveChildActor(out InventoryContainerBase InventoryContainerBase, Actor* InActor);// 0x46afe3fee041
	void OnRep_PreOccupiedActorInfoMapList();// 0x46aee3fee041
	void OnRep_IsRolledUp();// 0x46ade3fee041
	void OnRep_InventoryContainerBaseExtraRowNumList();// 0x46ace3fee041
	Actor* GetAnyContentActor();// 0x46abe3fee041
	void ExtendRowNum(int ContainerIndex, int InExtraRowNum);// 0x46aae3fee041
	bool CheckCanTypeIdPutIn(uint32 ItemTypeID);// 0x46a9e3fee041
	bool AddChildActor(int ContinerIndex, Actor* InActor);// 0x46a8e3fee041

--------------------------------
Class: InventoryContainerBase_PreOccupiedActorInfoMap
	GridPreOccupiedInfo[] PreOccupiedActorInfoMap;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SGDataAsset.DataAsset.Object

--------------------------------
Class: SGInventoryDataAsset.SGDataAsset.DataAsset.Object
	StaticMesh* StaticMesh;//[Offset: 0x30, Size: 0x28]
	bool bCanPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	Vector PickupTrans;//[Offset: 0x5c, Size: 0xc]
	Rotator PickupRot;//[Offset: 0x68, Size: 0xc]
	float LDMaxDrawDistance;//[Offset: 0x74, Size: 0x4]
	Transform Transform;//[Offset: 0x80, Size: 0x30]
	LinearColor PickUpMaterialColor;//[Offset: 0xb0, Size: 0x10]
	FName FresnelColorName;//[Offset: 0xc0, Size: 0x8]
	Actor* UserActor;//[Offset: 0xc8, Size: 0x8]
	enum UseInBodyPart;//[Offset: 0xd0, Size: 0x1]
	AnimMontage* CharacterUsingAnim;//[Offset: 0xd8, Size: 0x8]
	AnimMontage* CharacterUnUsingAnim;//[Offset: 0xe0, Size: 0x8]
	bool bInitFromDataTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	int MaxTotalCount;//[Offset: 0xec, Size: 0x4]
	int TotalCount;//[Offset: 0xf0, Size: 0x4]
	int StandardPrice;//[Offset: 0xf4, Size: 0x4]
	float RollUpTime;//[Offset: 0xf8, Size: 0x4]
	float Durability;//[Offset: 0xfc, Size: 0x4]
	float DurabilityMax;//[Offset: 0x100, Size: 0x4]
	float MoistureCostRatio;//[Offset: 0x104, Size: 0x4]
	float FoodCostRatio;//[Offset: 0x108, Size: 0x4]
	FString DisplayName;//[Offset: 0x110, Size: 0x10]
	FString Description;//[Offset: 0x120, Size: 0x10]
	FString SimpleDisplayName;//[Offset: 0x130, Size: 0x10]
	float Weight;//[Offset: 0x140, Size: 0x4]
	float JumpZVelocityScale;//[Offset: 0x144, Size: 0x4]
	FString PickupSound;//[Offset: 0x148, Size: 0x10]
	FString UseSound;//[Offset: 0x158, Size: 0x10]
	FString DropSound;//[Offset: 0x168, Size: 0x10]
	enum InventoryType;//[Offset: 0x178, Size: 0x1]
	byte[] RejectAttachPositions;//[Offset: 0x180, Size: 0x10]
	byte AssignableAttachPosition;//[Offset: 0x1a0, Size: 0x1]
	int sortIndex;//[Offset: 0x1a4, Size: 0x4]
	GameplayTag AssembleTag;//[Offset: 0x1a8, Size: 0x8]
	GameplayTag AssembleForGripTag;//[Offset: 0x1b0, Size: 0x8]
	GameplayTag SubAssembleTag;//[Offset: 0x1b8, Size: 0x8]
	uint32[] ConflictClassList;//[Offset: 0x1c0, Size: 0x10]
	int DisplayContainerIndexOnParent;//[Offset: 0x1d0, Size: 0x4]
	ItemGridInfo ContainerGridInfoOnParent;//[Offset: 0x1d4, Size: 0x8]
	AssembleSocketInfo[] AssembleSupportSocketList;//[Offset: 0x1e0, Size: 0x10]
	int InventoryWidth;//[Offset: 0x1f0, Size: 0x4]
	int InventoryHeight;//[Offset: 0x1f4, Size: 0x4]
	Transform ScopeAimTransform;//[Offset: 0x200, Size: 0x30]
	FName ScopeAimSocketName;//[Offset: 0x230, Size: 0x8]
	FName ZeroPointSocketName;//[Offset: 0x238, Size: 0x8]
	FName[] SubScopeAimSocketNames;//[Offset: 0x240, Size: 0x10]
	FName[] SubMagnificationScopeAimSocketNames;//[Offset: 0x250, Size: 0x10]
	FName BoreSocketName;//[Offset: 0x260, Size: 0x8]
	FName[] MultiBoreSockets;//[Offset: 0x268, Size: 0x10]
	Vector WeaponWtihStockHoldingOffset;//[Offset: 0x278, Size: 0xc]
	Vector WeaponWtihHandguardOffset_LeftHand;//[Offset: 0x284, Size: 0xc]
	float LFingerAdaptiveAlpha;//[Offset: 0x290, Size: 0x4]
	float ScopeSize;//[Offset: 0x294, Size: 0x4]
	float IronSightDiffHeight;//[Offset: 0x298, Size: 0x4]
	bool bUnAssemable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	bool bStockCanBeFolded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 0x1]
	GameplayTagContainer ExtraFireRequireTagList;//[Offset: 0x2a0, Size: 0x20]
	GameplayTag DeducteFireRequireTag;//[Offset: 0x2c0, Size: 0x8]
	float BipodHeight;//[Offset: 0x2c8, Size: 0x4]
	bool EnableCustomFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 0x1]
	float CustomFOV;//[Offset: 0x2d0, Size: 0x4]
	float ZoomCustomFOV;//[Offset: 0x2d4, Size: 0x4]
	float CustomFOVBlendSpeed;//[Offset: 0x2d8, Size: 0x4]
	bool bCanEverEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]

--------------------------------
Class: SGWeaponDataAsset.SGInventoryDataAsset.SGDataAsset.DataAsset.Object
	bool bDrawWeaponDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 0x1]
	bool bAllowAutoChangeMagazineNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2de, Size: 0x1]
	int WeaponAmmoCost;//[Offset: 0x2e0, Size: 0x4]
	int ClipAmmoCount;//[Offset: 0x2e4, Size: 0x4]
	float AmmoGravityScale;//[Offset: 0x2e8, Size: 0x4]
	float AmmoResistanceFactorScale;//[Offset: 0x2ec, Size: 0x4]
	bool bImmediateOrDefferLoadAnimationSet_InGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool bImmediateOrDefferLoadAnimationSet_Lobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	class SGCharacterAnimationSets* CharacterAnimationSetsClass;//[Offset: 0x2f8, Size: 0x28]
	class SGPerWeaponAnimationSets* PerWeaponAnimationSetsClass;//[Offset: 0x320, Size: 0x28]
	Vector LeftArmOffset;//[Offset: 0x348, Size: 0xc]
	SGWeaponSwaySpringInfo WeaponSwaySpringInfo;//[Offset: 0x354, Size: 0x24]
	FName WeaponOriginBoneName;//[Offset: 0x378, Size: 0x8]
	FName WeaponGripBoneName;//[Offset: 0x380, Size: 0x8]
	AnimSequence*[] BaseForeGrips;//[Offset: 0x388, Size: 0x10]
	<AnimSequence*> BaseForeCharacterGrips;//[Offset: 0x398, Size: 0x50]
	float DetachMeshTimePercent;//[Offset: 0x3e8, Size: 0x4]
	float AttachMeshTimePercent;//[Offset: 0x3ec, Size: 0x4]
	int ForceAttachIndex;//[Offset: 0x3f0, Size: 0x4]
	Transform BackWeaponAttachTransform;//[Offset: 0x400, Size: 0x30]
	Vector HandWeaponOffset;//[Offset: 0x430, Size: 0xc]
	Transform RightHandWeaponOffsetWhenSprint;//[Offset: 0x440, Size: 0x30]
	FName WeaponBackAttachCustomSocket;//[Offset: 0x470, Size: 0x8]
	enum WeaponBackAttachType;//[Offset: 0x478, Size: 0x1]
	FName MeshAttachCharacterSocket;//[Offset: 0x47c, Size: 0x8]
	FName MeshAttachCharacterSocket_Left;//[Offset: 0x484, Size: 0x8]
	FName MeshAttachCharacterSocket_Hang;//[Offset: 0x48c, Size: 0x8]
	FName MeshAttachCharacterSocket_FPP;//[Offset: 0x494, Size: 0x8]
	bool bHangToBackWhenDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	FName SimpleMeshAttachSocketName;//[Offset: 0x4a0, Size: 0x8]
	Vector BackWeaponLeftAttachOffsetInLobby;//[Offset: 0x4a8, Size: 0xc]
	bool HideOnBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 0x1]
	EffectParticleInfo FPFireTemplate;//[Offset: 0x4b8, Size: 0x50]
	EffectParticleInfo TPFireTemplate;//[Offset: 0x508, Size: 0x50]
	EffectParticleInfo FogTemplate;//[Offset: 0x558, Size: 0x50]
	EffectParticleInfo FireLightTemplate;//[Offset: 0x5a8, Size: 0x50]
	float IntensityOfFireLight;//[Offset: 0x5f8, Size: 0x4]
	float FireLightSize;//[Offset: 0x5fc, Size: 0x4]
	EffectParticleInfo FireLightTemplate_LDR;//[Offset: 0x600, Size: 0x50]
	Vector IntensityColorOfFireLight_LDR;//[Offset: 0x650, Size: 0xc]
	Vector FireLightSize_LDR;//[Offset: 0x65c, Size: 0xc]
	EffectParticleInfo FireLightTemplate3P;//[Offset: 0x668, Size: 0x50]
	float IntensityOfFireLight3P;//[Offset: 0x6b8, Size: 0x4]
	float FireLightSize3P;//[Offset: 0x6bc, Size: 0x4]
	EffectParticleInfo FireLightTemplate3P_LDR;//[Offset: 0x6c0, Size: 0x50]
	Vector IntensityColorOfFireLight3P_LDR;//[Offset: 0x710, Size: 0xc]
	Vector FireLightSize3P_LDR;//[Offset: 0x71c, Size: 0xc]
	EffectParticleInfo FPMergeFireHDRTemplate;//[Offset: 0x728, Size: 0x50]
	EffectParticleInfo FPMergeFireLDRTemplate;//[Offset: 0x778, Size: 0x50]
	EffectParticleInfo TPMergeFireHDRTemplate;//[Offset: 0x7c8, Size: 0x50]
	EffectParticleInfo TPMergeFireLDRTemplate;//[Offset: 0x818, Size: 0x50]
	int AliveShotFireEffectNum;//[Offset: 0x868, Size: 0x4]
	int AliveShotFogEffectNum;//[Offset: 0x86c, Size: 0x4]
	int AliveMergedEffectNum;//[Offset: 0x870, Size: 0x4]
	int AliveBulletShellEffectNum;//[Offset: 0x874, Size: 0x4]
	float LastRenderTimeNotPlayEffect;//[Offset: 0x878, Size: 0x4]
	int BulletTraceParticleLiveCountMax;//[Offset: 0x87c, Size: 0x4]
	EffectParticleInfo ShellTemplate;//[Offset: 0x880, Size: 0x50]
	EffectParticleInfo SmokeTemplate;//[Offset: 0x8d0, Size: 0x50]
	int SmokeEffectContinuousCount;//[Offset: 0x920, Size: 0x4]
	float FogOpacityDecSpeed;//[Offset: 0x924, Size: 0x4]
	FName MuzzleSocket;//[Offset: 0x928, Size: 0x8]
	FName AdapterMuzzleSocket;//[Offset: 0x930, Size: 0x8]
	EffectParticleInfo BlastingFuseTemplate;//[Offset: 0x938, Size: 0x50]
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x988, Size: 0x1]
	FName AttachHandSocketName;//[Offset: 0x98c, Size: 0x8]
	FName MagazineSocketName;//[Offset: 0x994, Size: 0x8]
	int WeaponWidth;//[Offset: 0x99c, Size: 0x4]
	int WeaponHeight;//[Offset: 0x9a0, Size: 0x4]
	float ErrorIronSightXAngle;//[Offset: 0x9a4, Size: 0x4]
	float ErrorIronSightYAngle;//[Offset: 0x9a8, Size: 0x4]
	GameplayTagContainer FireRequireTagList;//[Offset: 0x9b0, Size: 0x20]
	bool EnableIllegaSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0, Size: 0x1]
	FName BipCheckSocketName;//[Offset: 0x9d4, Size: 0x8]
	Vector BipCheckVec;//[Offset: 0x9dc, Size: 0xc]
	bool bOpenBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e8, Size: 0x1]
	bool bCanFillAmmoOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e9, Size: 0x1]
	bool bNeedOpenBoltBeforeReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ea, Size: 0x1]
	bool bPullBoltOnStopFireCmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9eb, Size: 0x1]
	bool bFillAmmoOnOpenBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ec, Size: 0x1]
	bool bLastRoundHoldOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ed, Size: 0x1]
	float ReentryTimeAfterFireEvent;//[Offset: 0x9f0, Size: 0x4]
	float ChargeTimeAfterPullBolt;//[Offset: 0x9f4, Size: 0x4]
	float ReentryTimeAfterOpenByHandEvent;//[Offset: 0x9f8, Size: 0x4]
	bool bNeedRemoveMagBeforeCheckBore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fc, Size: 0x1]
	bool bClearShellOnShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fd, Size: 0x1]
	float BoltMeshCloseAfterOpenTime;//[Offset: 0xa00, Size: 0x4]
	int MaxBoreNum;//[Offset: 0xa04, Size: 0x4]
	bool bBoreLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa08, Size: 0x1]
	class Actor[] DefaultBulletClass;//[Offset: 0xa10, Size: 0x10]
	class SGCaliber* CaliberClass;//[Offset: 0xa20, Size: 0x8]
	bool bForbiddenFireOnFoldStock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28, Size: 0x1]
	bool bForbiddenPullBoltOnFoldStock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa29, Size: 0x1]
	bool bForbiddenReloadOnFoldStock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2a, Size: 0x1]
	float TimerInterval;//[Offset: 0xa2c, Size: 0x4]
	bool bEnableCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 0x1]
	class MatineeCameraShake* ShotCameraShake;//[Offset: 0xa38, Size: 0x8]
	class MatineeCameraShake* ShotCameraShakeFirstShot;//[Offset: 0xa40, Size: 0x8]
	class MatineeCameraShake* ShotCameraShakeIronsight;//[Offset: 0xa48, Size: 0x8]
	class MatineeCameraShake* ShotCameraShakeIronsightFirstShot;//[Offset: 0xa50, Size: 0x8]
	class MatineeCameraShake* ShotCameraShakeADS;//[Offset: 0xa58, Size: 0x8]
	class MatineeCameraShake* ShotCameraShakeADSFirstShot;//[Offset: 0xa60, Size: 0x8]
	float CameraShakeScale;//[Offset: 0xa68, Size: 0x4]
	CurveFloat* FOVToCameraShakeScaleCurve;//[Offset: 0xa70, Size: 0x8]
	CurveFloat* RecoilToCameraShakeScaleCurve;//[Offset: 0xa78, Size: 0x8]
	class MatineeCameraShake* TakeHitCameraShakeADS;//[Offset: 0xa80, Size: 0x8]
	class MatineeCameraShake* TakeHitCameraShake;//[Offset: 0xa88, Size: 0x8]
	SubCameraInfo[] SubCameraInfoList;//[Offset: 0xa90, Size: 0x10]
	SubCameraInfo[] SubMagnificationInfoList;//[Offset: 0xaa0, Size: 0x10]
	int SightPriority;//[Offset: 0xab0, Size: 0x4]
	int ScopeLevel;//[Offset: 0xab4, Size: 0x4]
	float ZoomingSensitivity;//[Offset: 0xab8, Size: 0x4]
	float ShoulderZoomingSensitivity;//[Offset: 0xabc, Size: 0x4]
	float BlurRadius;//[Offset: 0xac0, Size: 0x4]
	float BlurThresHold;//[Offset: 0xac4, Size: 0x4]
	Vector FiringZoomInVector;//[Offset: 0xac8, Size: 0xc]
	float NormalFireSensitivity;//[Offset: 0xad4, Size: 0x4]
	float FiringAnimTranslationWeight;//[Offset: 0xad8, Size: 0x4]
	float FiringAnimRotationWeight;//[Offset: 0xadc, Size: 0x4]
	float ADSGunKickWeight;//[Offset: 0xae0, Size: 0x4]
	FName AimingBase;//[Offset: 0xae4, Size: 0x8]
	FName AimingPivotSocket;//[Offset: 0xaec, Size: 0x8]
	enum SwitchAnim;//[Offset: 0xaf4, Size: 0x1]
	float ZoomFOV;//[Offset: 0xaf8, Size: 0x4]
	float HoldingBreathZoomFOV;//[Offset: 0xafc, Size: 0x4]
	float DefaultCameraGunKickWeight;//[Offset: 0xb00, Size: 0x4]
	bool bIsThermalScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb04, Size: 0x1]
	bool bShouldForceRebaseOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb05, Size: 0x1]
	GameplayTagContainer SuspendThermalScopeTags;//[Offset: 0xb08, Size: 0x20]
	float SuspendThermalScopeTimeInProneTransition;//[Offset: 0xb28, Size: 0x4]
	WeaponDamageInfo[] WeapDamageParams;//[Offset: 0xb30, Size: 0x10]
	float[] MeleeBaseDamage;//[Offset: 0xb40, Size: 0x10]
	float MeleeArmorDamage;//[Offset: 0xb50, Size: 0x4]
	float[] MeleeDamageReductionArray;//[Offset: 0xb58, Size: 0x10]
	float MeleeArmorDamageRatio;//[Offset: 0xb68, Size: 0x4]
	float MeleeBleedTriggerChance;//[Offset: 0xb6c, Size: 0x4]
	float MeleeTraceRange;//[Offset: 0xb70, Size: 0x4]
	float MeleeDamageScaleHead;//[Offset: 0xb74, Size: 0x4]
	float MeleeDamageScaleArms;//[Offset: 0xb78, Size: 0x4]
	float MeleeDamageScaleLegs;//[Offset: 0xb7c, Size: 0x4]
	float MeleeDamageScaleStomach;//[Offset: 0xb80, Size: 0x4]
	float MeleeDamageScaleChest;//[Offset: 0xb84, Size: 0x4]
	class GameplayAbility* EnergyReduceAbilityByMeleeAtk;//[Offset: 0xb88, Size: 0x8]
	float JumpFireInterval;//[Offset: 0xb90, Size: 0x4]
	float ContinuousFirePersistTime;//[Offset: 0xb94, Size: 0x4]
	float ContinuousFireInterval;//[Offset: 0xb98, Size: 0x4]
	CurveFloat*[] FireIntervalCurveList;//[Offset: 0xba0, Size: 0x10]
	float FireAnimTime;//[Offset: 0xbb0, Size: 0x4]
	float FireAnimBlendOutTime;//[Offset: 0xbb4, Size: 0x4]
	class SGWeaponFireMode[] SupportFireModeList;//[Offset: 0xbb8, Size: 0x10]
	float PreFireTime;//[Offset: 0xbc8, Size: 0x4]
	float EndPreFireTime;//[Offset: 0xbcc, Size: 0x4]
	float KeepPreFireTime;//[Offset: 0xbd0, Size: 0x4]
	float DelaySpawnProjectileTimeForThrowDown;//[Offset: 0xbd4, Size: 0x4]
	float DelaySpawnProjectileTimeForThrowUp;//[Offset: 0xbd8, Size: 0x4]
	float DelaySpawnProjectileTimeForFastThrow;//[Offset: 0xbdc, Size: 0x4]
	float DelayHideWeaponTime;//[Offset: 0xbe0, Size: 0x4]
	float CoolDownTimeAfterFire;//[Offset: 0xbe4, Size: 0x4]
	bool bEndZoomWhenStopFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe8, Size: 0x1]
	bool bEndAndRestoreZoomWhenStopFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe9, Size: 0x1]
	float DirectFlyDistance;//[Offset: 0xbec, Size: 0x4]
	bool bGrenadeCanHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf0, Size: 0x1]
	CurveFloat* FlyVelocityToDistanceCurve;//[Offset: 0xbf8, Size: 0x8]
	<int,CurveFloat*> SpecializedFlyVelocityToDistanceCurveMap;//[Offset: 0xc00, Size: 0x50]
	float EnableFireRequestCacheDelay;//[Offset: 0xc50, Size: 0x4]
	CurveFloat* DamageScaleCurve;//[Offset: 0xc58, Size: 0x8]
	float DefaultPenetration;//[Offset: 0xc60, Size: 0x4]
	float Radius;//[Offset: 0xc64, Size: 0x4]
	enum[] SupportShootingMode;//[Offset: 0xc68, Size: 0x10]
	int MaxBurstShotCount;//[Offset: 0xc78, Size: 0x4]
	bool bSupportAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7c, Size: 0x1]
	class SGWeapon* ControlledWeaponClass;//[Offset: 0xc80, Size: 0x8]
	class SGWeapon* ControllerWeaponClass;//[Offset: 0xc88, Size: 0x8]
	FName BulletTrajectoryType;//[Offset: 0xc90, Size: 0x8]
	float ZoomSupportCheckHeight;//[Offset: 0xc98, Size: 0x4]
	float ShootAimingDelayEnterTime;//[Offset: 0xc9c, Size: 0x4]
	float ShootAimingFOV;//[Offset: 0xca0, Size: 0x4]
	int MeleeWeaponPhaseNumber;//[Offset: 0xca4, Size: 0x4]
	int MeleeWeaponCurPhase;//[Offset: 0xca8, Size: 0x4]
	SGWeaponMovingRatioParams CrosshairAccuracyRatios;//[Offset: 0xcac, Size: 0x30]
	class SGProjectile_GravityBullet* ProjectileClass;//[Offset: 0xce0, Size: 0x28]
	float ProjectileInitSpeed;//[Offset: 0xd08, Size: 0x4]
	float ProjectileGravityZeroDistance;//[Offset: 0xd0c, Size: 0x4]
	float ProjectileHorizontalVelocityDecRate;//[Offset: 0xd10, Size: 0x4]
	float ProjectileZeroHorizontalVelocityDecDistance;//[Offset: 0xd14, Size: 0x4]
	float JudgeFireEndTime;//[Offset: 0xd18, Size: 0x4]
	float WeaponZoomingMovingScale;//[Offset: 0xd1c, Size: 0x4]
	float WeaponShoulderZoomMovingScale;//[Offset: 0xd20, Size: 0x4]
	float WeaponChangeClipMovingScale;//[Offset: 0xd24, Size: 0x4]
	float WeaponShootingMovingScale;//[Offset: 0xd28, Size: 0x4]
	float ADSMoveSpeedRatioByWeaponAccessory;//[Offset: 0xd2c, Size: 0x4]
	float MoveSpeedRatioByWeaponAccessory;//[Offset: 0xd30, Size: 0x4]
	float MoveSpeedRatioByMeleeWeapon;//[Offset: 0xd34, Size: 0x4]
	float SpreadShowScale;//[Offset: 0xd38, Size: 0x4]
	float NormalShotSpreadRatio;//[Offset: 0xd3c, Size: 0x4]
	float SpreadInterpSpeed;//[Offset: 0xd40, Size: 0x4]
	SGWeaponSpreadParams SpreadParams;//[Offset: 0xd44, Size: 0x28]
	SGWeaponSpreadParams SpreadParams_ShoulderZoom;//[Offset: 0xd6c, Size: 0x28]
	CurveFloat* SpreadRadiusPDF;//[Offset: 0xd98, Size: 0x8]
	CurveFloat* SpreadAnglePDF;//[Offset: 0xda0, Size: 0x8]
	CurveFloat* SpreadRadiusScaleCurve;//[Offset: 0xda8, Size: 0x8]
	float SpreadScaleForArmBreak;//[Offset: 0xdb0, Size: 0x4]
	SGWeaponSpreadParams BuckshotSpreadParams;//[Offset: 0xdb4, Size: 0x28]
	CurveFloat* BuckshotSpreadRadiusPDF;//[Offset: 0xde0, Size: 0x8]
	CurveFloat* BuckshotSpreadAnglePDF;//[Offset: 0xde8, Size: 0x8]
	float InnerRadiusScaleWhenMultiShots;//[Offset: 0xdf0, Size: 0x4]
	float OutterRadiusScaleWhenMultiShots;//[Offset: 0xdf4, Size: 0x4]
	float ShotNumInInnerRadiusPercent;//[Offset: 0xdf8, Size: 0x4]
	float SpreadToGunRotScale;//[Offset: 0xdfc, Size: 0x4]
	float AccuracyValue;//[Offset: 0xe00, Size: 0x4]
	float AccuracyValue_Multiplier;//[Offset: 0xe04, Size: 0x4]
	CurveFloat* AccToSpreadScaleCurve;//[Offset: 0xe08, Size: 0x8]
	float ShootAimingSpreadValue;//[Offset: 0xe10, Size: 0x4]
	SGWeaponMovingRatioParams SpreadAccuracyRatios;//[Offset: 0xe14, Size: 0x30]
	SGWeaponMovingRatioParams SpreadAccuracyRatios_ShoulderZoom;//[Offset: 0xe44, Size: 0x30]
	float MaxSpreadGunRotValue;//[Offset: 0xe74, Size: 0x4]
	float GunRotSpeed;//[Offset: 0xe78, Size: 0x4]
	float AdsMoaX;//[Offset: 0xe7c, Size: 0x4]
	float AdsMoaY;//[Offset: 0xe80, Size: 0x4]
	float AdapterMoaScaleX_Multiplier;//[Offset: 0xe84, Size: 0x4]
	float AdapterMoaScaleY_Multiplier;//[Offset: 0xe88, Size: 0x4]
	CurveFloat* MoaPDF;//[Offset: 0xe90, Size: 0x8]
	CurveFloat* MoaScaleCurveByShootCount;//[Offset: 0xe98, Size: 0x8]
	CurveFloat* MoaCurveForMultiShots;//[Offset: 0xea0, Size: 0x8]
	CurveFloat* MoaCurveForOneShot;//[Offset: 0xea8, Size: 0x8]
	float WeaponZoomTime;//[Offset: 0xeb0, Size: 0x4]
	float WeaponUnZoomTime;//[Offset: 0xeb4, Size: 0x4]
	FName CameraBaseCharacterSocket;//[Offset: 0xeb8, Size: 0x8]
	FName AimLimitPlaneSocketName;//[Offset: 0xec0, Size: 0x8]
	bool bOnlyAdsOnSupport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 0x1]
	CurveVector* Curve_ZoominOffset;//[Offset: 0xed0, Size: 0x8]
	CurveVector* Curve_ZoominRotation;//[Offset: 0xed8, Size: 0x8]
	CurveVector* Curve_ZoomOutOffset;//[Offset: 0xee0, Size: 0x8]
	CurveVector* Curve_ZoomOutRotation;//[Offset: 0xee8, Size: 0x8]
	AnimSequence* ZoomInAnimation_GripBased;//[Offset: 0xef0, Size: 0x28]
	AnimSequence* ZoomOutAnimation_GripBased;//[Offset: 0xf18, Size: 0x28]
	float WeaponZoomAnimTime;//[Offset: 0xf40, Size: 0x4]
	float WeaponUnZoomAnimTime;//[Offset: 0xf44, Size: 0x4]
	Vector ZoomOffset_Location_3P;//[Offset: 0xf48, Size: 0xc]
	bool bEnableZoomFOVOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf54, Size: 0x1]
	float WeaponZoomFOVBlendTime;//[Offset: 0xf58, Size: 0x4]
	float WeaponUnZoomFOVBlendTime;//[Offset: 0xf5c, Size: 0x4]
	float WeaponZoomFOVBlendDelay;//[Offset: 0xf60, Size: 0x4]
	float WeaponUnZoomFOVBlendDelay;//[Offset: 0xf64, Size: 0x4]
	CurveFloat* Curve_SwitchScope;//[Offset: 0xf68, Size: 0x8]
	WeaponSwitchScopeParams[] SwitchScopeParams;//[Offset: 0xf70, Size: 0x10]
	Rotator MaxRecoilRotator;//[Offset: 0xf80, Size: 0xc]
	float RecoilPitchScale;//[Offset: 0xf8c, Size: 0x4]
	float RecoilYawScale;//[Offset: 0xf90, Size: 0x4]
	float RecoilRollScale;//[Offset: 0xf94, Size: 0x4]
	float GunRotSpeed;//[Offset: 0xf98, Size: 0x4]
	float ErgonomicsBase;//[Offset: 0xf9c, Size: 0x4]
	CurveFloat* ErgADSTimeScaleCurve;//[Offset: 0xfa0, Size: 0x8]
	CurveFloat* ErgEnergyCostScaleCurve;//[Offset: 0xfa8, Size: 0x8]
	CurveFloat* ErgBreathScaleCurve;//[Offset: 0xfb0, Size: 0x8]
	bool bSupportShoulderZoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb8, Size: 0x1]
	enum ZoomingType;//[Offset: 0xfb9, Size: 0x1]
	float AimScale;//[Offset: 0xfbc, Size: 0x4]
	bool bCachedZoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc0, Size: 0x1]
	float AfterFiringDelta;//[Offset: 0xfc4, Size: 0x4]
	bool bCanDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc8, Size: 0x1]
	bool IsCanPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc9, Size: 0x1]
	FName AttachSocketName;//[Offset: 0xfcc, Size: 0x8]
	SkeletalMesh* SkeletalMeshTemplate_InGame;//[Offset: 0xfd8, Size: 0x28]
	SkeletalMesh* SkeletalMeshTemplate_InLobby;//[Offset: 0x1000, Size: 0x28]
	StaticMesh* StaticMeshTemplate_InGame;//[Offset: 0x1028, Size: 0x28]
	StaticMesh* StaticMeshTemplate_InLobby;//[Offset: 0x1050, Size: 0x28]
	SkeletalMesh* SimpleMeshTemplate;//[Offset: 0x1078, Size: 0x28]
	class AnimInstance* SimpleMeshDefaultAnimInstance;//[Offset: 0x10a0, Size: 0x28]
	StaticMesh* ProjectileMeshTemplate;//[Offset: 0x10c8, Size: 0x28]
	MaterialInterface* InnerScopeBlurMaterial;//[Offset: 0x10f0, Size: 0x28]
	MaterialInterface* ThermalScopeUnlitMaterial;//[Offset: 0x1118, Size: 0x28]
	int ScopeMaterialElementIndex;//[Offset: 0x1140, Size: 0x4]
	int ThermalViewOpaqueMaterialElementIndex;//[Offset: 0x1144, Size: 0x4]
	int ThermalScopeUnlitMaterialElementIndex;//[Offset: 0x1148, Size: 0x4]
	enum MeshTickPolicy;//[Offset: 0x114c, Size: 0x1]
	bool bEnableMeshOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114d, Size: 0x1]
	bool bAdsLod0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114e, Size: 0x1]
	Vector PickupTrans;//[Offset: 0x1150, Size: 0xc]
	Rotator PickupRot;//[Offset: 0x115c, Size: 0xc]
	bool bForceUseLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1168, Size: 0x1]
	LinearColor PickUpMaterialColor;//[Offset: 0x116c, Size: 0x10]
	FName FresnelColorName;//[Offset: 0x117c, Size: 0x8]
	int8 CustomIndex;//[Offset: 0x1184, Size: 0x1]
	bool bWithZoomMatiral;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1185, Size: 0x1]
	float TurnOnZoomMatiralThreshold;//[Offset: 0x1188, Size: 0x4]
	Vector4 LocalScopeParamAndRadius;//[Offset: 0x1190, Size: 0x10]
	FName ThermalViewInstanceEnabledName;//[Offset: 0x11a0, Size: 0x8]
	FName ThermalScopeOpaqueOverrideName;//[Offset: 0x11a8, Size: 0x8]
	class AnimInstance* SkeletalMeshAnimClass;//[Offset: 0x11b0, Size: 0x28]
	bool bUseComplexPickupMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d8, Size: 0x1]
	bool bRemarkableAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d9, Size: 0x1]
	bool bEnableImpactEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11da, Size: 0x1]
	float ImpactEffectSkipDistance;//[Offset: 0x11dc, Size: 0x4]
	float MaxImpactEffectSkipTime;//[Offset: 0x11e0, Size: 0x4]
	float MaxDistanceToPlayEffect;//[Offset: 0x11e4, Size: 0x4]
	ImpactMaterialAndAudioEvent[] ImpactMaterialAndAudioEventList;//[Offset: 0x11e8, Size: 0x10]
	Rotator MeleeRecoilRot;//[Offset: 0x11f8, Size: 0xc]
	Rotator DecalRotationOffset;//[Offset: 0x1204, Size: 0xc]
	Rotator MeleeRecoilTarRot;//[Offset: 0x1210, Size: 0xc]
	float MeleeRecoilAnimSpeed;//[Offset: 0x121c, Size: 0x4]
	bool bEnableMeleeRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1220, Size: 0x1]
	int AliveImpactPSCNumConf;//[Offset: 0x1224, Size: 0x4]
	float FireIntervalCheckMaxTolerance;//[Offset: 0x1228, Size: 0x4]
	int FireIntervalCheckFailPunishShots;//[Offset: 0x122c, Size: 0x4]
	float FireIntervalCheckFailPunishDuration;//[Offset: 0x1230, Size: 0x4]
	int AmmoCountCheckFailPunishShots;//[Offset: 0x1234, Size: 0x4]
	float MaxPlayerOwnerDistanceToleranceSq;//[Offset: 0x1238, Size: 0x4]
	float MaxDriverDistanceToleranceSq;//[Offset: 0x123c, Size: 0x4]
	float MaxTargetDistanceToleranceSq;//[Offset: 0x1240, Size: 0x4]
	float MaxHitPointDistanceToleranceSq;//[Offset: 0x1244, Size: 0x4]
	float ClientRotationCosTolerance;//[Offset: 0x1248, Size: 0x4]
	float ServerRotationCosTolerance;//[Offset: 0x124c, Size: 0x4]
	bool bUseLagCompensation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1250, Size: 0x1]
	bool bCentralDotVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1251, Size: 0x1]
	class SGCrosshairStyleWidget* CrosshairStyleWidgetClass;//[Offset: 0x1258, Size: 0x8]
	float CrosshairExpandRatio;//[Offset: 0x1260, Size: 0x4]
	float IntensityHorizontalBase;//[Offset: 0x1264, Size: 0x4]
	float IntensityVerticalBase;//[Offset: 0x1268, Size: 0x4]
	bool bViewKickFromGunKick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x126c, Size: 0x1]
	bool bIgnoreTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x126d, Size: 0x1]
	bool bIgnoreRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x126e, Size: 0x1]
	float ViewKickScale;//[Offset: 0x1270, Size: 0x4]
	bool bEnableRecoil_Pitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1274, Size: 0x1]
	bool bEnableRecoil_Yaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1275, Size: 0x1]
	float FirstRecoilToRightChance;//[Offset: 0x1278, Size: 0x4]
	float MaxVerticalRecoil;//[Offset: 0x127c, Size: 0x4]
	float MaxHorizontalRecoil;//[Offset: 0x1280, Size: 0x4]
	float BeginRecoverTime;//[Offset: 0x1284, Size: 0x4]
	float BurstStateEndTime;//[Offset: 0x1288, Size: 0x4]
	bool bAlwaysUseMaxRandNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128c, Size: 0x1]
	SGWeaponOverrideRecoilInfo[] OverrideRecoilInfoList;//[Offset: 0x1290, Size: 0x10]
	CurveFloat* VerticalRecoilSpeedCurve;//[Offset: 0x12a0, Size: 0x8]
	CurveFloat* HorizontalRecoilSpeedCurve;//[Offset: 0x12a8, Size: 0x8]
	SGWeaponMovingRatioParams RecoilAccuracyRatios;//[Offset: 0x12b0, Size: 0x30]
	SGWeaponMovingRatioParams RecoilAccuracyRatios_ShoulderZoom;//[Offset: 0x12e0, Size: 0x30]
	SGWeaponMovingRatioParams RecoilAccuracyRatios_ADS;//[Offset: 0x1310, Size: 0x30]
	enum RecoverAlgorithm;//[Offset: 0x1340, Size: 0x1]
	float ConfigDisturbRecoverSpeed;//[Offset: 0x1344, Size: 0x4]
	float MaxVerticalRecoilDisturbRange;//[Offset: 0x1348, Size: 0x4]
	float RecoverScale;//[Offset: 0x134c, Size: 0x4]
	float ConfigRecoverTime;//[Offset: 0x1350, Size: 0x4]
	float MinBeginRecoverSpeed_Yaw;//[Offset: 0x1354, Size: 0x4]
	float MinBeginRecoverSpeed_Pitch;//[Offset: 0x1358, Size: 0x4]
	float MinVerticalSpeedDiffOfRecoilAndRecover;//[Offset: 0x135c, Size: 0x4]
	CurveFloat* RecoverSpeedCurve;//[Offset: 0x1360, Size: 0x8]
	float PadMeshCheckDistance;//[Offset: 0x1368, Size: 0x4]
	float ConfigPadMeshRecoilScale_Horizontal;//[Offset: 0x136c, Size: 0x4]
	float ConfigPadMeshRecoilScale_Vertical;//[Offset: 0x1370, Size: 0x4]
	float ConfigPadMeshSpreadScale;//[Offset: 0x1374, Size: 0x4]
	CurveFloat* IntensityHorizontalValueCurve;//[Offset: 0x1378, Size: 0x8]
	CurveFloat* IntensityVerticalValueCurve;//[Offset: 0x1380, Size: 0x8]
	float VerticalRecoilScaleOnMaxVertical;//[Offset: 0x1388, Size: 0x4]
	float VerticalRecoilOnMaxVertical_Max;//[Offset: 0x138c, Size: 0x4]
	float VerticalRecoilOnMaxVertical_Min;//[Offset: 0x1390, Size: 0x4]
	CurveVector* VerticalRecoilValueCurveByShotCount;//[Offset: 0x1398, Size: 0x8]
	SGRandomDistributionCurve VerticalRecoilDistributionByShotCount;//[Offset: 0x13a0, Size: 0x8]
	CurveVector* HorizontalRecoilValueCurveByShotCount;//[Offset: 0x13a8, Size: 0x8]
	SGRandomDistributionCurve HorizontalRecoilDistributionByShotCount;//[Offset: 0x13b0, Size: 0x8]
	float MaxVerticalRecoverSpeedInStateRecoil;//[Offset: 0x13b8, Size: 0x4]
	float VerticalRecoilTime;//[Offset: 0x13bc, Size: 0x4]
	float MaxHorizonRecoverSpeedInStateRecoil;//[Offset: 0x13c0, Size: 0x4]
	float HorizonRecoilTime;//[Offset: 0x13c4, Size: 0x4]
	CurveFloat* AdapterReocoilOnFireNumCurve;//[Offset: 0x13c8, Size: 0x8]
	bool bEnableDataAssetOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d0, Size: 0x1]
	WeaponRecoilDataSet* RecoilAnimConfigDataAssetOverride;//[Offset: 0x13d8, Size: 0x8]
	WeaponRecoilAnimConfig ADSFireRecoilAnimConfig;//[Offset: 0x13e0, Size: 0x58]
	WeaponRecoilAnimConfig FireRecoilAnimConfig;//[Offset: 0x1438, Size: 0x58]
	FString WeaponTypeSwitchGroup;//[Offset: 0x1490, Size: 0x10]
	FString WeaponNameSwitch;//[Offset: 0x14a0, Size: 0x10]
	float BasePriority;//[Offset: 0x14b0, Size: 0x4]
	float PriorityDropPerMeter;//[Offset: 0x14b4, Size: 0x4]
	float PriorityDropPerDegree;//[Offset: 0x14b8, Size: 0x4]
	bool PlayBulletDropSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14bc, Size: 0x1]
	FString BulletSizeSwitch;//[Offset: 0x14c0, Size: 0x10]
	float BulletDropDelay;//[Offset: 0x14d0, Size: 0x4]
	float GenSoundVisualInterval;//[Offset: 0x14d4, Size: 0x4]
	float ZeroingDistance;//[Offset: 0x14d8, Size: 0x4]
	GameplayTag[] ManagedTags;//[Offset: 0x14e0, Size: 0x10]
	MaterialInterface* SharedMaterial;//[Offset: 0x14f0, Size: 0x8]
	bool bCanEverMergeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f8, Size: 0x1]
	bool bAllWeaponPartsRemarkable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f9, Size: 0x1]
	float DelayTimeToMergeWeapon;//[Offset: 0x14fc, Size: 0x4]
	int MaxDelayMergeTimes;//[Offset: 0x1500, Size: 0x4]
	FString[] ImportantAdapterNameList;//[Offset: 0x1508, Size: 0x10]
	AutoAimParamsSet* AutoAimParamsSet;//[Offset: 0x1518, Size: 0x8]
	AutoAimParamsSet*[] AutoAimParamsSetAdditional;//[Offset: 0x1520, Size: 0x10]
	BulletTraceDataAsset* BulletTraceDataAsset;//[Offset: 0x1530, Size: 0x8]
	float TouchRotateSpeed;//[Offset: 0x1538, Size: 0x4]
	float MaxPitch;//[Offset: 0x153c, Size: 0x4]
	float MaxYaw;//[Offset: 0x1540, Size: 0x4]
	float MaxRoll;//[Offset: 0x1544, Size: 0x4]
	float MinPitch;//[Offset: 0x1548, Size: 0x4]
	float MinYaw;//[Offset: 0x154c, Size: 0x4]
	float MinRoll;//[Offset: 0x1550, Size: 0x4]
	float RotChangeSpeed;//[Offset: 0x1554, Size: 0x4]
	float PosChangeSpeed;//[Offset: 0x1558, Size: 0x4]
	float FixCamMaxPosX;//[Offset: 0x155c, Size: 0x4]
	float FocusCamPosXScale;//[Offset: 0x1560, Size: 0x4]
	int ShakeAnimPeriod;//[Offset: 0x1564, Size: 0x4]
	float Tolerance;//[Offset: 0x1568, Size: 0x4]
	float OnePEffectDis;//[Offset: 0x156c, Size: 0x4]
	float PinchSpeed;//[Offset: 0x1570, Size: 0x4]
	float MinPinchDisPercent;//[Offset: 0x1574, Size: 0x4]
	float MaxPinchDisPercent;//[Offset: 0x1578, Size: 0x4]
	<FName,FocusPartConfig> FocusPartCfgMap;//[Offset: 0x1580, Size: 0x50]
	float FixCamFullScreenPosX;//[Offset: 0x15d0, Size: 0x4]
	float FocusCamFullScreenPosXScale;//[Offset: 0x15d4, Size: 0x4]
	Vector CameraPosOffset;//[Offset: 0x15d8, Size: 0xc]

--------------------------------
Class: WeaponDamageInfo
	enum FireModeType;//[Offset: 0x0, Size: 0x1]
	int Damage;//[Offset: 0x4, Size: 0x4]
	int DamageMin;//[Offset: 0x8, Size: 0x4]
	float DamageModifyZeroDistance;//[Offset: 0xc, Size: 0x4]
	float DamageDistanceModifier;//[Offset: 0x10, Size: 0x4]
	float BulletBeginDropDistance;//[Offset: 0x14, Size: 0x4]
	float DistanceBulletDropZ;//[Offset: 0x18, Size: 0x4]
	float DamageScale_Head;//[Offset: 0x1c, Size: 0x4]
	float DamageScale_Arms;//[Offset: 0x20, Size: 0x4]
	float DamageScale_Stomach;//[Offset: 0x24, Size: 0x4]
	float DamageScale_Chest;//[Offset: 0x28, Size: 0x4]
	float DamageScale_Legs;//[Offset: 0x2c, Size: 0x4]
	float TraceRange;//[Offset: 0x30, Size: 0x4]
	float TraceHalfAngle;//[Offset: 0x34, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x38, Size: 0x8]
	float Momentum;//[Offset: 0x40, Size: 0x4]
	Vector ImpluseRange;//[Offset: 0x44, Size: 0xc]
	int SubWeaponWallID;//[Offset: 0x50, Size: 0x4]
	float BleedTriggerChance;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: AutoAimParamsSet.DataAsset.Object
	bool bBoneBasedSpeedDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	AutoAimFloat AutoAimingStartRange;//[Offset: 0x34, Size: 0x1c]
	AutoAimFloat AutoAimingEndRange;//[Offset: 0x50, Size: 0x1c]
	AutoAimFloat AutoAimingLowerBoundHeightScale;//[Offset: 0x6c, Size: 0x1c]
	AutoAimFloat AutoAimingUpperBoundHeightScale;//[Offset: 0x88, Size: 0x1c]
	AutoAimFloat AutoAimingConstantFollowSpeed;//[Offset: 0xa4, Size: 0x1c]
	AutoAimFloat AutoAimingDistanceMax;//[Offset: 0xc0, Size: 0x1c]
	AutoAimFloat AutoAimingDistanceMin;//[Offset: 0xdc, Size: 0x1c]
	AutoAimFloat AutoAimingMaxAngleSpeed;//[Offset: 0xf8, Size: 0x1c]
	AutoAimFloat AutoAimingMaxStartRange;//[Offset: 0x114, Size: 0x1c]
	float LowerTurnSensitivityRange;//[Offset: 0x130, Size: 0x4]
	float ConfigLimitedRotateXRateScaleMax;//[Offset: 0x134, Size: 0x4]
	float ConfigLimitedRotateXRateScaleMin;//[Offset: 0x138, Size: 0x4]
	float ConfigLimitedRotateYRateScale;//[Offset: 0x13c, Size: 0x4]
	float TurnAmountToLimitRotate;//[Offset: 0x140, Size: 0x4]
	bool bRestrainWhenTargetMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	float AutoAimingCheckInterval;//[Offset: 0x148, Size: 0x4]
	RuntimeFloatCurve Distance2StartRangeScaleHorizontal;//[Offset: 0x150, Size: 0x88]
	RuntimeFloatCurve Distance2EndRangeScaleHorizontal;//[Offset: 0x1d8, Size: 0x88]
	RuntimeFloatCurve Distance2RangeScaleVertical;//[Offset: 0x260, Size: 0x88]
	CurveFloat* Distance2SpeedScaleHorizontal;//[Offset: 0x2e8, Size: 0x8]
	CurveFloat* Distance2SpeedScaleVertical;//[Offset: 0x2f0, Size: 0x8]
	RuntimeFloatCurve FOV2StartRangeScaleHorizontal;//[Offset: 0x2f8, Size: 0x88]
	RuntimeFloatCurve FOV2EndRangeScaleHorizontal;//[Offset: 0x380, Size: 0x88]
	RuntimeFloatCurve FOV2RangeScaleVertical;//[Offset: 0x408, Size: 0x88]
	RuntimeFloatCurve FOV2SpeedScaleHorizontal;//[Offset: 0x490, Size: 0x88]
	RuntimeFloatCurve FOV2SpeedScaleVertical;//[Offset: 0x518, Size: 0x88]
	float AutoAimingMoveStartRangeCompensateScale;//[Offset: 0x5a0, Size: 0x4]
	AutoAimFloat AutoAimingMoveCompensateRatio;//[Offset: 0x5a4, Size: 0x1c]
	AutoAimFloat MoveCompensateStartRange;//[Offset: 0x5c0, Size: 0x1c]
	CurveFloat* NormalizedDistance2MoveCompensateScaleCurve;//[Offset: 0x5e0, Size: 0x8]
	AutoAimFloat AutoAimingCompensateMaxAngleSpeed;//[Offset: 0x5e8, Size: 0x1c]
	AutoAimFloatCurve NormalizedDistance2FollowSpeedScaleCurve;//[Offset: 0x608, Size: 0x38]
	CurveFloat* RecoilTime2FollowSpeedScaleCurve;//[Offset: 0x640, Size: 0x8]
	AutoAimFloatCurve HorizontalRecoilValue2FollowSpeedScaleCurve;//[Offset: 0x648, Size: 0x38]
	CurveFloat* FireCount2HorizontalRecoilValueWeight;//[Offset: 0x680, Size: 0x8]
	CurveFloat* SelfMovePenaltyScaleCurve;//[Offset: 0x688, Size: 0x8]
	CurveFloat* TargetMovePenaltyScaleCurve;//[Offset: 0x690, Size: 0x8]
	AutoAimFloat AutoAimingConstantFollowSpeedVerti;//[Offset: 0x698, Size: 0x1c]
	float SlideScreenDirectionSensitivity;//[Offset: 0x6b4, Size: 0x4]
	RuntimeFloatCurve SlideScreenDirectionDampCurve;//[Offset: 0x6b8, Size: 0x88]
	float ADSSnapSpeed;//[Offset: 0x740, Size: 0x4]
	float ADSBlendTime;//[Offset: 0x744, Size: 0x4]
	AutoAimTargetBoneList TargetBoneList;//[Offset: 0x748, Size: 0x28]
	CurveFloat* FireCount2FollowSpeedScale;//[Offset: 0x770, Size: 0x8]
	float ResetFireCountDelay;//[Offset: 0x778, Size: 0x4]
	float ExitFireStateDelay;//[Offset: 0x77c, Size: 0x4]

--------------------------------
Class: AutoAimFloat
	float BaseValue;//[Offset: 0x0, Size: 0x4]
	float FireStateValue;//[Offset: 0x4, Size: 0x4]
	bool bFireStateOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float SlideScreenValue;//[Offset: 0xc, Size: 0x4]
	bool bSlideScreenOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float AdsValue;//[Offset: 0x14, Size: 0x4]
	bool bAdsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: AutoAimFloatCurve
	CurveFloat* BaseCurve;//[Offset: 0x0, Size: 0x8]
	CurveFloat* FireCurve;//[Offset: 0x8, Size: 0x8]
	bool bFireStateOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	CurveFloat* SlideScreenCurve;//[Offset: 0x18, Size: 0x8]
	bool bSlideScreenOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	CurveFloat* AdsCurve;//[Offset: 0x28, Size: 0x8]
	bool bAdsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AutoAimTargetBoneList
	AutoAimTargetBone[] BaseConfigs;//[Offset: 0x0, Size: 0x10]
	AutoAimTargetBone[] FireStateConfigs;//[Offset: 0x10, Size: 0x10]
	bool bFireStateOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: AutoAimTargetBone
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	float RadiusBias;//[Offset: 0x8, Size: 0x4]
	float HalfLengthBias;//[Offset: 0xc, Size: 0x4]
	AutoAimFloat StartRange;//[Offset: 0x10, Size: 0x1c]

--------------------------------
Class: FocusPartConfig
	Rotator FocusRot;//[Offset: 0x0, Size: 0xc]
	float TouchRotateSpeed;//[Offset: 0xc, Size: 0x4]
	float MaxPitch;//[Offset: 0x10, Size: 0x4]
	float MaxYaw;//[Offset: 0x14, Size: 0x4]
	float MaxRoll;//[Offset: 0x18, Size: 0x4]
	float MinPitch;//[Offset: 0x1c, Size: 0x4]
	float MinYaw;//[Offset: 0x20, Size: 0x4]
	float MinRoll;//[Offset: 0x24, Size: 0x4]
	float PinchSpeed;//[Offset: 0x28, Size: 0x4]
	float MinPinchDisPercent;//[Offset: 0x2c, Size: 0x4]
	float MaxPinchDisPercent;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: SGAdapterDataAsset.SGInventoryDataAsset.SGDataAsset.DataAsset.Object
	bool IsCanPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 0x1]
	FName AttachSocketName;//[Offset: 0x2e0, Size: 0x8]
	bool bEnableErgonomicsModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	int ErgonomicsValue;//[Offset: 0x2ec, Size: 0x4]
	bool bEnableRecoilModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	float VerticalRecoilValue_Multiplier;//[Offset: 0x2f4, Size: 0x4]
	float HorizentalRecoilValue_Multiplier;//[Offset: 0x2f8, Size: 0x4]
	bool bEnableSpreadModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]
	float AccuracyValue_Multiplier;//[Offset: 0x300, Size: 0x4]
	float MoaScaleX_Multiplier;//[Offset: 0x304, Size: 0x4]
	float MoaScaleY_Multiplier;//[Offset: 0x308, Size: 0x4]
	bool bEnableFireInitSpeedModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	float FireInitSpeedScale;//[Offset: 0x310, Size: 0x4]
	float BulletZeroDropDistance;//[Offset: 0x314, Size: 0x4]
	float AdapterAdjustDamage;//[Offset: 0x318, Size: 0x4]
	bool bEnableChangeClipSpeedModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	float ChangeClipSpeedScale;//[Offset: 0x320, Size: 0x4]
	bool bEnableSwitchToADSTimeModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	float SwitchToADSTimeScale;//[Offset: 0x328, Size: 0x4]
	bool WeaponEquipTimeTimeModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	float WeaponEquipTimeScale;//[Offset: 0x330, Size: 0x4]
	bool bEnableHoldBreathEnergyCostModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	float HoldBreathEnergyCostScale;//[Offset: 0x338, Size: 0x4]
	EffectParticleInfo FPMergeFireHDRTemplate;//[Offset: 0x340, Size: 0x50]
	EffectParticleInfo FPMergeFireLDRTemplate;//[Offset: 0x390, Size: 0x50]
	EffectParticleInfo TPMergeFireHDRTemplate;//[Offset: 0x3e0, Size: 0x50]
	EffectParticleInfo TPMergeFireLDRTemplate;//[Offset: 0x430, Size: 0x50]
	bool bEnableFlameModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	EffectParticleInfo Flame1PTemplate;//[Offset: 0x488, Size: 0x50]
	EffectParticleInfo Flame3PTemplate;//[Offset: 0x4d8, Size: 0x50]
	bool bEnableFogModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	EffectParticleInfo FogTemplate;//[Offset: 0x530, Size: 0x50]
	bool bEnableFireLightModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	EffectParticleInfo FireLightTemplate;//[Offset: 0x588, Size: 0x50]
	float IntensityOfFireLight;//[Offset: 0x5d8, Size: 0x4]
	float FireLightSize;//[Offset: 0x5dc, Size: 0x4]
	EffectParticleInfo FireLightTemplate_LDR;//[Offset: 0x5e0, Size: 0x50]
	Vector IntensityColorOfFireLight_LDR;//[Offset: 0x630, Size: 0xc]
	Vector FireLightSize_LDR;//[Offset: 0x63c, Size: 0xc]
	EffectParticleInfo FireLightTemplate3P;//[Offset: 0x648, Size: 0x50]
	float IntensityOfFireLight3P;//[Offset: 0x698, Size: 0x4]
	float FireLightSize3P;//[Offset: 0x69c, Size: 0x4]
	EffectParticleInfo FireLightTemplate3P_LDR;//[Offset: 0x6a0, Size: 0x50]
	Vector IntensityColorOfFireLight3P_LDR;//[Offset: 0x6f0, Size: 0xc]
	Vector FireLightSize3P_LDR;//[Offset: 0x6fc, Size: 0xc]
	EffectParticleInfo CompositeFireTemplate;//[Offset: 0x708, Size: 0x50]
	Vector CompositeFireLightSize;//[Offset: 0x758, Size: 0xc]
	Vector CompositeFireLightColor;//[Offset: 0x764, Size: 0xc]
	EffectParticleInfo CompositeFireTemplate3P;//[Offset: 0x770, Size: 0x50]
	Vector CompositeFireLightSize3P;//[Offset: 0x7c0, Size: 0xc]
	Vector CompositeFireLightColor3P;//[Offset: 0x7cc, Size: 0xc]
	bool bEnableSoundModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 0x1]
	bool bOnlyModifyWhenSwitchOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d9, Size: 0x1]
	int RaceStrategy;//[Offset: 0x7dc, Size: 0x4]
	bool PreCheckEnduranceLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 0x1]
	bool PreCheckBoneBreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e1, Size: 0x1]
	bool PreCheckBleed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e2, Size: 0x1]
	bool PreCheckOutOfEndurance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e3, Size: 0x1]
	bool UseForMoisture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4, Size: 0x1]
	bool UseForHungry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e5, Size: 0x1]

--------------------------------
Class: SGAdapterExtDataAsset.DataAsset.Object
	class GameplayAbility* AbilityClass;//[Offset: 0x30, Size: 0x8]
	enum ActiveAttachPosition;//[Offset: 0x38, Size: 0x1]
	bool bPassive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bCancelAbilityWhileMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	float CancelAbilityMovingThreshold;//[Offset: 0x3c, Size: 0x4]
	CurveFloat* AuxiliaryCurve1;//[Offset: 0x40, Size: 0x8]
	CurveFloat* AuxiliaryCurve2;//[Offset: 0x48, Size: 0x8]
	class SGCaliber* CaliberClass;//[Offset: 0x50, Size: 0x8]
	class Actor* DefaultBulletClass;//[Offset: 0x58, Size: 0x8]
	BulletContainerInfo[] BulletClassFilledWhenBeginPlay;//[Offset: 0x60, Size: 0x10]
	int MaxStackCount;//[Offset: 0x70, Size: 0x4]
	bool bFillOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	bool bNeedAmmoInBeforeReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	bool bAlwaysShowBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1]
	int ShowBulletNum;//[Offset: 0x78, Size: 0x4]
	float FillContainerBasicTime;//[Offset: 0x7c, Size: 0x4]
	float FillMagazineTimeDefaultPerBullet;//[Offset: 0x80, Size: 0x4]
	float FillMagazineTimeInBagPerBullet;//[Offset: 0x84, Size: 0x4]
	float FillMagazineTimeInVestBagPerBullet;//[Offset: 0x88, Size: 0x4]
	float FillMagazineTimeInGunPerBullet;//[Offset: 0x8c, Size: 0x4]
	float UnfillContainerBasicTime;//[Offset: 0x90, Size: 0x4]
	float UnfillMagazineTimeDefaultPerBullet;//[Offset: 0x94, Size: 0x4]
	float UnfillMagazineTimeInBagPerBullet;//[Offset: 0x98, Size: 0x4]
	float UnfillMagazineTimeInVestBagPerBullet;//[Offset: 0x9c, Size: 0x4]
	float UnfillMagazineTimeInGunPerBullet;//[Offset: 0xa0, Size: 0x4]
	BulletMeshInfo[] BulletSockets;//[Offset: 0xa8, Size: 0x10]
	SoftObjectPath FillMagazineMontage;//[Offset: 0xb8, Size: 0x18]
	SoftObjectPath UnfillMagazineMontage;//[Offset: 0xd0, Size: 0x18]
	bool bBelt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bOnlyEnableAnimWhenAssembled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	SGAdapterAnimSet AdapterAnimSet;//[Offset: 0xf0, Size: 0x50]
	AnimSequence* FoldStockAnimSeq;//[Offset: 0x140, Size: 0x28]
	AnimSequence* UnFoldStockAnimSeq;//[Offset: 0x168, Size: 0x28]
	byte LaserTraceCollisionChannel;//[Offset: 0x190, Size: 0x1]
	ParticleSystem* LaserBeamParticleSystemTemplate;//[Offset: 0x198, Size: 0x28]
	ParticleSystem* LaserBeamParticleSystemTemplate_Lobby;//[Offset: 0x1c0, Size: 0x28]
	float LaserBeamMaxDistance;//[Offset: 0x1e8, Size: 0x4]
	bool bCameraBasedZeroingWhenHipFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 0x1]
	FName BeamSocketName;//[Offset: 0x1f0, Size: 0x8]
	LinearColor BeamColor;//[Offset: 0x1f8, Size: 0x10]
	ParticleSystem* LaserDotParticleSystemTemplate;//[Offset: 0x208, Size: 0x28]
	ParticleSystem* LaserDotParticleSystemTemplate_Lobby;//[Offset: 0x230, Size: 0x28]
	bool bAlwaysShowLaserDot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	float DistBtwnLaserDotAndWallMaxRatio;//[Offset: 0x25c, Size: 0x4]
	float DistBtwnLaserDotAndWallMaxValue;//[Offset: 0x260, Size: 0x4]
	CurveFloat* ScaleWithDistanceCurve;//[Offset: 0x268, Size: 0x8]
	LinearColor DotColor;//[Offset: 0x270, Size: 0x10]
	bool bAdjustBeamSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool bAdjustTraceStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	float TraceDirLerpSpeed;//[Offset: 0x284, Size: 0x4]
	GameplayTag TacticTag;//[Offset: 0x288, Size: 0x8]

--------------------------------
Class: BulletContainerInfo
	uint64 BulletItemID;//[Offset: 0x0, Size: 0x8]
	int StackCount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BulletMeshInfo
	FName SocketName;//[Offset: 0x0, Size: 0x8]
	StaticMeshComponent* Mesh;//[Offset: 0x8, Size: 0x8]
	StaticMeshComponent* BeltMesh;//[Offset: 0x10, Size: 0x8]
	SoftObjectPath BulletClass;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: SGInventoryDataAssetComponent.ActorComponent.Object
	DataAsset*[] DataAssetArray;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: SGInventoryDataSettings.DeveloperSettings.Object
	FString ConfigFileName;//[Offset: 0x38, Size: 0x10]
	InventoryIdClass[] InventoryIdClassList;//[Offset: 0x48, Size: 0x10]
	<uint64,class SGInventory> InventoryIDClassMap;//[Offset: 0x58, Size: 0x50]
	<class SGInventory,uint64> InventoryClassIDMap;//[Offset: 0xa8, Size: 0x50]

--------------------------------
Class: InventoryIdClass
	uint64 ID;//[Offset: 0x0, Size: 0x8]
	class SGInventory* Class;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: SGInventoryDBNOComponent.ActorComponent.Object
	float RescueTimeScale;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: SGInventoryDebugPhysicsComponent.ActorComponent.Object
	bool bEnableDebugPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bForAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	MaterialInterface* DisplayMaterial_NoPhysics;//[Offset: 0xc8, Size: 0x8]
	SkeletalMeshComponent* DebugSkeletalMeshComponent;//[Offset: 0xd0, Size: 0x8]
	void OnWeaponPlayedMontage(AnimMontage* InMontage, FName InSectionName, float InRateOverride, float InStartTime);// 0x46c0e3fee041
	void OnWeaponDetachedFromHand();// 0x46bfe3fee041
	void OnWeaponAttachedToHand();// 0x46bee3fee041
	void OnInventoryUnDressed(Character* Character);// 0x46bde3fee041
	void OnInventoryDressed(Character* Character);// 0x46bce3fee041

--------------------------------
Class: SGInventoryDogTagComponent.ActorComponent.Object
	InventoryDogTagInfo DogTagInfo;//[Offset: 0xc0, Size: 0x60]
	void OnRep_DogTagInfo();// 0x46c3e3fee041
	void InitDogTagInfo(out FString PlayerName, int PlayerLevel, uint64 DeathTime, out FString KillerPlayerName, uint64 KillerPlayerWeaponID, out FString MapName, int KillerCharacterType, int DeathReason, bool bIsSameTeam, int PlayerRank, uint32 GOpenID, uint64 PlayerGID);// 0x46c2e3fee041
	InventoryDogTagInfo GetDogTagInfo();// 0x46c1e3fee041

--------------------------------
Class: InventoryDogTagInfo
	FString RecordedDeathCharacterName;//[Offset: 0x0, Size: 0x10]
	int RecordedDeathCharacterLevel;//[Offset: 0x10, Size: 0x4]
	uint32 RecordedDeathCharacterGOpenID;//[Offset: 0x14, Size: 0x4]
	uint64 RecordedDeathCharacterGID;//[Offset: 0x18, Size: 0x8]
	uint64 RecordedDeathCharacterTime;//[Offset: 0x20, Size: 0x8]
	FString RecordedDeathCauserName;//[Offset: 0x28, Size: 0x10]
	uint64 RecordedDeathCauserWeaponID;//[Offset: 0x38, Size: 0x8]
	FString RecordedDeathMapName;//[Offset: 0x40, Size: 0x10]
	int RecordedDeathCauserCharacterType;//[Offset: 0x50, Size: 0x4]
	int RecordedDeathReason;//[Offset: 0x54, Size: 0x4]
	bool RecordedDeathCauserIsTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	int RecordedDeathCharacterRankLevel;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: SGInventoryDropComponent.ActorComponent.Object
	DropTransformInfo DropTransformInfo;//[Offset: 0xd0, Size: 0x40]
	void OnRep_SetInventoryDropTransform();// 0x46c9e3fee041
	void OnInventoryAdded(Character* OwnerCharacter);// 0x46c8e3fee041
	void OnChangeParentActor(Actor* ParentActor, int ContainerIndex);// 0x46c7e3fee041
	void DropInventory(out const Vector StartLocation, out const Rotator StartRot);// 0x46c6e3fee041
	void DropFrom(const Actor* FromActor, out const Vector StartLocation, out const Vector TossVelocity);// 0x46c5e3fee041
	void ClientSetInventoryPosition(Vector StartLocation, Rotator StartRot);// 0x46c4e3fee041

--------------------------------
Class: DropTransformInfo
	Transform DropTransform;//[Offset: 0x0, Size: 0x30]
	bool bShouldDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int Count;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: SGInventoryDurabilityComponent.ActorComponent.Object
	float Durability;//[Offset: 0xc0, Size: 0x4]
	float DurabilityMax;//[Offset: 0xc4, Size: 0x4]
	float MoistureCostRatio;//[Offset: 0xcc, Size: 0x4]
	float FoodCostRatio;//[Offset: 0xd0, Size: 0x4]
	void SetDurabilityMax(float InDurabilityMax);// 0x46d1e3fee041
	void SetDurability(float InDurability);// 0x46d0e3fee041
	void OnRepDurability();// 0x46cfe3fee041
	void OnDurabilityChanged();// 0x46cee3fee041
	float GetDurabilityPercent();// 0x46cde3fee041
	float GetDurabilityMax();// 0x46cce3fee041
	float GetDurability();// 0x46cbe3fee041
	void CostDurability(float Value, bool bDurationCost);// 0x46cae3fee041

--------------------------------
Class: SGInventoryEventMessageComponent.SceneComponent.ActorComponent.Object
	void OnInventoryRemoved(Character* OwnerCharacter);// 0x46d3e3fee041
	void OnInventoryAdded(Character* OwnerCharacter);// 0x46d2e3fee041

--------------------------------
Class: SGInventoryEvents.SGGameInstanceComponent.Object
	delegate VisableChanged;//[Offset: 0x30, Size: 0x10]
	delegate ParentActorChanged;//[Offset: 0x40, Size: 0x10]
	delegate PosChanged;//[Offset: 0x50, Size: 0x10]
	delegate OwnerChanged;//[Offset: 0x60, Size: 0x10]
	delegate InventoryAddedEvent;//[Offset: 0x70, Size: 0x10]
	delegate InventoryRemovedEvent;//[Offset: 0x80, Size: 0x10]
	delegate ActivityInventoryAddedEvent;//[Offset: 0x90, Size: 0x10]
	delegate AttachPositionChanged;//[Offset: 0xa0, Size: 0x10]
	delegate GameplayDefinedVisableChanged;//[Offset: 0xb0, Size: 0x10]
	delegate OnTacticalInvSwitchRefreshed;//[Offset: 0xc0, Size: 0x10]
	delegate OnInventorySearched;//[Offset: 0xd0, Size: 0x10]
	delegate OnPlayerCarriedThermalDeviceEvent;//[Offset: 0xe0, Size: 0x10]
	delegate OnInventoryPickStateChanged;//[Offset: 0xf0, Size: 0x10]
	delegate OnContainerInteractStateChanged;//[Offset: 0x100, Size: 0x10]
	delegate OnInventoryBeginPlay;//[Offset: 0x110, Size: 0x10]
	delegate OnInventoryUpdateDropPosition;//[Offset: 0x120, Size: 0x10]
	SGInventoryEvents* GetSGInventoryEvents(Object* InWorldContextObject);// 0x46d4e3fee041

--------------------------------
Class: SGInventoryFaceShieldComponent.SGInventoryToggleableHeadwearComponent.SGInventoryTacticComponent.ActorComponent.Object

--------------------------------
Class: SGInventoryFastThrowComponent.ActorComponent.Object
	float FastThrowPreFireTime;//[Offset: 0xc8, Size: 0x4]
	bool bIsSwitchOnFastThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]

--------------------------------
Class: SGInventoryFlashComponent.SGInventoryTacticComponent.ActorComponent.Object
	SGWeapon* CachedWeapon;//[Offset: 0xd8, Size: 0x8]
	ParticleSystem* FlashParticleSystemTemplate;//[Offset: 0xe0, Size: 0x28]
	ParticleSystem* Flash1PParticleSystemTemplate;//[Offset: 0x108, Size: 0x28]
	float FlashNearDim;//[Offset: 0x130, Size: 0x4]
	float FlashFarDim;//[Offset: 0x134, Size: 0x4]
	float FlashDistance;//[Offset: 0x138, Size: 0x4]
	Color FlashColor;//[Offset: 0x13c, Size: 0x4]
	float LensFlareAngleScale;//[Offset: 0x140, Size: 0x4]
	float IntersityScale;//[Offset: 0x144, Size: 0x4]
	byte FlashTraceCollisionChannel;//[Offset: 0x148, Size: 0x1]
	CurveFloat* FlareAngleCurve;//[Offset: 0x150, Size: 0x8]
	CurveFloat* FlareScreenAngleCurve;//[Offset: 0x158, Size: 0x8]
	CurveFloat* FlareLengthCurve;//[Offset: 0x160, Size: 0x8]
	CurveFloat* FlareLengthSizeCurve;//[Offset: 0x168, Size: 0x8]
	ParticleSystemComponent* FlashParticleSystem;//[Offset: 0x170, Size: 0x8]
	ParticleSystemComponent* Flash1PParticleSystem;//[Offset: 0x178, Size: 0x8]
	FName FlashSocketName;//[Offset: 0x180, Size: 0x8]
	class Actor* FlashLightClass;//[Offset: 0x188, Size: 0x8]
	class Actor* LensFlareClass;//[Offset: 0x190, Size: 0x8]
	float MildDebuffDistance;//[Offset: 0x198, Size: 0x4]
	float ModerateDebuffDistance;//[Offset: 0x19c, Size: 0x4]
	float SevereDebuffDistance;//[Offset: 0x1a0, Size: 0x4]
	float FlashZoneAngle;//[Offset: 0x1a4, Size: 0x4]
	float MinFlashAngle;//[Offset: 0x1a8, Size: 0x4]
	Actor* FlashLight;//[Offset: 0x1c0, Size: 0x8]
	Actor* LensFlare;//[Offset: 0x1c8, Size: 0x8]
	void OnParentWeaponFinishAssemble();// 0x46dde3fee041
	void OnOwnerActorHiddenInGame(bool bNewHidden);// 0x46dce3fee041

--------------------------------
Class: SGInventoryFOVComponent.SGCustomFOVRenderMatrixComponent.CustomRenderMatrixComponent.ActorComponent.Object

--------------------------------
Class: SGInventoryGiveComponent.ActorComponent.Object
	bool IsCanPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	FName AttachSocketName;//[Offset: 0xcc, Size: 0x8]
	void SetCanPickup(bool bCanPick);// 0x46e1e3fee041
	void ClientRemoved();// 0x46e0e3fee041
	void ClientAddToCharacter(bool bAutoActivateInput);// 0x46dfe3fee041
	bool AllowGiveTo(Pawn* Other, bool bDefaultAllowPickup);// 0x46dee3fee041

--------------------------------
Class: SGInventoryGridComponent.ActorComponent.Object
	InventoryGridInfo InventoryGridInfo;//[Offset: 0xd0, Size: 0x30]
	InventoryGridInfo OldInventoryGridInfo;//[Offset: 0x100, Size: 0x30]
	InventoryLockInfo LockInfo;//[Offset: 0x150, Size: 0x18]
	bool IsRotated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	bool IsPlayerInteracting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	void SetUnLockedByCharacter(SGCharacter* InLockedByCharacter, enum LockType);// 0x4705e3fee041
	void SetRolledUpGridInfo(int Row, int Column);// 0x4704e3fee041
	void SetRefershBag();// 0x4703e3fee041
	void SetLockedByCharacter(SGCharacter* InLockedByCharacter, enum LockType, bool bNeedLockSelf);// 0x4702e3fee041
	void SetLocalIsRotated(bool RotatedState);// 0x4701e3fee041
	void SetIsRotated(bool RotatedState);// 0x4700e3fee041
	void SetInventoryAssembleExtendSize(int InAssembleExtendSize_UP, int InAssembleExtendSize_DOWN, int InAssembleExtendSize_LEFT, int InAssembleExtendSize_RIGHT);// 0x46ffe3fee041
	void SetDefaultGridInfo(int Row, int Column);// 0x46fee3fee041
	void RevertLocalRotateState();// 0x46fde3fee041
	void OnRollUpStateChanged();// 0x46fce3fee041
	void OnRep_LockedInfo();// 0x46fbe3fee041
	void OnRep_IsRotated();// 0x46fae3fee041
	void OnRep_InventoryGridInfo();// 0x46f9e3fee041
	void OnLockedByCharacterSetLockInventories(SGInventory*[] LockInventories, enum LockType);// 0x46f8e3fee041
	void OnLockedByCharacterDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x46f7e3fee041
	void OnInventoryOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x46f6e3fee041
	void OnInventoryDisassembledEvent(SGInventory* ParentInventory);// 0x46f5e3fee041
	void OnInventoryAssembledEvent(SGInventory* ParentInventory);// 0x46f4e3fee041
	void OnInventoryAddToCharacter(Character* Character);// 0x46f3e3fee041
	void OnGameModePlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x46f2e3fee041
	void NotifySizeChanged();// 0x46f1e3fee041
	ItemGridInfo GetStartGridPosition();// 0x46f0e3fee041
	ItemGridInfo GetRolledUpGridInfo();// 0x46efe3fee041
	ItemGridInfo GetPredictedAssembleExtendGridInfo(out AssembleSocketInfo PredictModifiedSocket, SGInventory* PredictTriedAdapterParentInv, SGInventory* TriedAdapterInv, bool bIsQuickRandomAttach, out ItemSizeModifyInfo OutSizeModifyInfo);// 0x46eee3fee041
	Actor* GetParentActor();// 0x46ede3fee041
	ItemGridInfo GetOriginalGridInfo();// 0x46ece3fee041
	SGCharacter* GetLockedByCharacter();// 0x46ebe3fee041
	uint64 GetLastRefreshBagFrame();// 0x46eae3fee041
	bool GetIsRotated();// 0x46e9e3fee041
	void GetInventoryAssembleExtendSize(out int OutAssembleExtendSize_UP, out int OutAssembleExtendSize_DOWN, out int OutAssembleExtendSize_LEFT, out int OutAssembleExtendSize_RIGHT);// 0x46e8e3fee041
	int GetInContainerIndex();// 0x46e7e3fee041
	ItemGridInfo GetGridInfo();// 0x46e6e3fee041
	enum GetAttachPosition();// 0x46e5e3fee041
	ItemGridInfo GetAssembleExtendGridInfo(bool bIsPredictFoldStock, bool newPredictFoldStockState);// 0x46e4e3fee041
	void BroadcastClientInventoryDestroyEvent(out InventoryContainerBase OldParentContainerBase, out InventoryContainerBase NewParentContainerBase, enum OldAttachPos, enum NewAttachPos);// 0x46e3e3fee041
	void BroadcastClientInventoryChangeEvent(out InventoryContainerBase OldParentContainerBase, out InventoryContainerBase NewParentContainerBase, enum OldAttachPos, enum NewAttachPos);// 0x46e2e3fee041

--------------------------------
Class: InventoryLockInfo
	SGCharacter* LockedByCharacter;//[Offset: 0x0, Size: 0x8]
	enum[] LockTypeArray;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ItemSizeModifyInfo
	int Up;//[Offset: 0x0, Size: 0x4]
	int Down;//[Offset: 0x4, Size: 0x4]
	int Left;//[Offset: 0x8, Size: 0x4]
	int Right;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SGInventoryInitDataComponent.ActorComponent.Object

--------------------------------
Class: SGInventoryLaserComponent.SGInventoryTacticComponent.ActorComponent.Object
	SGWeapon* CachedWeapon;//[Offset: 0xd8, Size: 0x8]
	byte LaserTraceCollisionChannel;//[Offset: 0xe4, Size: 0x1]
	ParticleSystem* LaserBeamParticleSystemTemplate;//[Offset: 0xe8, Size: 0x28]
	ParticleSystem* LaserBeamParticleSystemTemplate_Lobby;//[Offset: 0x110, Size: 0x28]
	ParticleSystem* SecLaserBeamParticleSystemTemplate_Lobby;//[Offset: 0x138, Size: 0x28]
	float LaserBeamMaxDistance;//[Offset: 0x160, Size: 0x4]
	bool bCameraBasedZeroingWhenHipFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 0x1]
	FName BeamSocketName;//[Offset: 0x168, Size: 0x8]
	LinearColor BeamColor;//[Offset: 0x170, Size: 0x10]
	bool bSecLaserActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	FName SecondBeamSocketName;//[Offset: 0x184, Size: 0x8]
	LinearColor SecondBeamColor;//[Offset: 0x18c, Size: 0x10]
	ParticleSystem* LaserDotParticleSystemTemplate;//[Offset: 0x1a0, Size: 0x28]
	ParticleSystem* LaserDotParticleSystemTemplate_Lobby;//[Offset: 0x1c8, Size: 0x28]
	bool bAlwaysShowLaserDot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	float DistBtwnLaserDotAndWallMaxRatio;//[Offset: 0x1f4, Size: 0x4]
	float DistBtwnLaserDotAndWallMaxValue;//[Offset: 0x1f8, Size: 0x4]
	CurveFloat* ScaleWithDistanceCurve;//[Offset: 0x200, Size: 0x8]
	LinearColor DotColor;//[Offset: 0x208, Size: 0x10]
	LinearColor SecDotColor;//[Offset: 0x218, Size: 0x10]
	bool bAdjustBeamSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	bool bAdjustTraceStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	ParticleSystemComponent* LaserBeamParticleSystem;//[Offset: 0x230, Size: 0x8]
	ParticleSystemComponent* LaserDotParticleSystem;//[Offset: 0x238, Size: 0x8]
	ParticleSystemComponent* SecLaserBeamParticleSystem;//[Offset: 0x240, Size: 0x8]
	ParticleSystemComponent* SecLaserDotParticleSystem;//[Offset: 0x248, Size: 0x8]
	Vector CameraBasedTraceDirection_WeaponSpace;//[Offset: 0x270, Size: 0xc]
	float TraceDirLerpSpeed;//[Offset: 0x27c, Size: 0x4]
	void OnParentWeaponFinishAssemble();// 0x4721e3fee041
	void OnOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x4720e3fee041
	void OnOwnerActorHiddenInGame(bool bNewHidden);// 0x471fe3fee041
	bool GetSwitchState();// 0x471ee3fee041

--------------------------------
Class: SGInventoryModifyFireFlameComponent.ActorComponent.Object

--------------------------------
Class: SGInventoryModifyFireRecoilComponent.ActorComponent.Object
	float VerticalRecoilScale;//[Offset: 0xc0, Size: 0x4]
	float HorizentalRecoilScale;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: SGInventoryModifyFireSoundComponent.ActorComponent.Object

--------------------------------
Class: SGInventoryModifyFireSpreadComponent.ActorComponent.Object
	float SpreadScale;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: SGInventoryModifyFOVComponent.ActorComponent.Object

--------------------------------
Class: SGInventoryNameComponent.ActorComponent.Object
	FName InventoryName;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: SGInventoryOperationComponent.ActorComponent.Object

--------------------------------
Class: SGInventoryPickupMeshComponent.ActorComponent.Object
	StaticMesh* StaticMesh;//[Offset: 0xc8, Size: 0x28]
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0xf0, Size: 0x8]
	bool bCanPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	Vector PickupTrans;//[Offset: 0xfc, Size: 0xc]
	Rotator PickupRot;//[Offset: 0x108, Size: 0xc]
	Transform DropTransform;//[Offset: 0x120, Size: 0x30]
	MaterialInstanceDynamic*[] MaterialInstanceDynamicArray;//[Offset: 0x150, Size: 0x10]
	LinearColor PickUpMaterialColor;//[Offset: 0x160, Size: 0x10]
	FName FresnelColorName;//[Offset: 0x170, Size: 0x8]
	Actor* CachedParentActor;//[Offset: 0x178, Size: 0x8]
	Character* CachedOwnerCharacter;//[Offset: 0x180, Size: 0x8]
	float LDMaxDrawDistance;//[Offset: 0x188, Size: 0x4]
	Transform Transform;//[Offset: 0x190, Size: 0x30]
	void OnRep_CanPickup();// 0x473de3fee041
	void OnParentActorChanged(Actor* NewParent, int NewContainerIndex);// 0x473ce3fee041
	void OnInventoryRemoved(Character* OwnerCharacter);// 0x473be3fee041
	void OnInventoryAdded(Character* OwnerCharacter);// 0x473ae3fee041

--------------------------------
Class: SGInventoryPriorityComponent.ActorComponent.Object
	int Priority;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: SGInventoryQuickUseContainerComp.SGInventoryContainerBaseComponent.ActorComponent.Object

--------------------------------
Class: SGInventoryQuickUseInterface.Interface.Object
	SGInventory* GetQuickUseInventory(int UseIndex);// 0x473ee3fee041

--------------------------------
Class: SGInventorySoundComponent.ActorComponent.Object
	FString PickupSound;//[Offset: 0xc0, Size: 0x10]
	FString UseSound;//[Offset: 0xd0, Size: 0x10]
	FString DropSound;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: SGInventorySourceTypeComponent.ActorComponent.Object
	enum OldOwnerCharacterType;//[Offset: 0xc8, Size: 0x1]
	uint64 OldCharaterGuid;//[Offset: 0xd0, Size: 0x8]
	uint64 OldCharaterOpenId;//[Offset: 0xd8, Size: 0x8]
	enum SourceType;//[Offset: 0xe0, Size: 0x1]
	enum SpawnSourceType;//[Offset: 0xe1, Size: 0x1]
	Actor* FromLootPoint;//[Offset: 0xe8, Size: 0x8]
	int FromLootPointID;//[Offset: 0xf0, Size: 0x4]
	int64 WeaponAssembleID;//[Offset: 0xf8, Size: 0x8]
	enum FromCharacterType;//[Offset: 0x100, Size: 0x1]
	uint64 FromPlayerGID;//[Offset: 0x108, Size: 0x8]
	int FromTeamIndex;//[Offset: 0x110, Size: 0x4]
	bool CanNotSellItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	LastCharacterOwnerInfo LastCharacterOwnerInfo;//[Offset: 0x118, Size: 0x10]
	StackableItemSourceInfo[] StackableItemSourceInfos;//[Offset: 0x130, Size: 0x10]
	void UpdateOldOwnerInfo(SGCharacter* OldSGCharacter);// 0x475fe3fee041
	void SetWeaponAssembleID(int64 InWeaponAssembleID);// 0x475ee3fee041
	void SetPickupSourceType(enum InSourceType);// 0x475de3fee041
	void SetLastCharacterOwnerInfo(SGCharacter* SGCharacter);// 0x475ce3fee041
	void SetIsStackableItem(bool bInIsStackableItem);// 0x475be3fee041
	void SetInventorySpawnSourceType(enum InSourceType);// 0x475ae3fee041
	void SetFromTeamIndex(int InTeamIndex);// 0x4759e3fee041
	void SetFromPlayerGid(uint64 InFromPlayerGid);// 0x4758e3fee041
	void SetFromLootPointID(int InLootPointID);// 0x4757e3fee041
	void SetFromLootPoint(Actor* LootPoint);// 0x4756e3fee041
	void SetFromCharacterType(enum InFromCharacterType);// 0x4755e3fee041
	void SetCanNotSellItem(bool newIsCanNotSellItem);// 0x4754e3fee041
	void OnStackableInvTotalCountChanged(SGInventory* SGInventory, int OldTotalCount, int NewTotalCount);// 0x4753e3fee041
	bool IsCanNotSellItem();// 0x4752e3fee041
	int64 GetWeaponAssembleID();// 0x4751e3fee041
	enum GetPickupSourceType();// 0x4750e3fee041
	LastCharacterOwnerInfo GetLastCharacterOwnerInfo();// 0x474fe3fee041
	enum GetInventorySpawnSourceType();// 0x474ee3fee041
	int GetFromTeamIndex();// 0x474de3fee041
	uint64 GetFromPlayerGid();// 0x474ce3fee041
	int GetFromLootPointID();// 0x474be3fee041
	Actor* GetFromLootPoint();// 0x474ae3fee041
	enum GetFromCharacterType();// 0x4749e3fee041

--------------------------------
Class: LastCharacterOwnerInfo
	SGCharacter* LastOwner;//[Offset: 0x0, Size: 0x8]
	int64 RemoveFrame;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SGInventorySpritesComponent.ActorComponent.Object
	Object* IconNormal;//[Offset: 0xc0, Size: 0x8]
	Object* IconKill;//[Offset: 0xc8, Size: 0x8]
	Object* IconRotate;//[Offset: 0xd0, Size: 0x8]
	Object* IconSmall;//[Offset: 0xd8, Size: 0x8]
	Object* IconWhite;//[Offset: 0xe0, Size: 0x8]
	TextureRenderTarget2D* AssembleRTTexture;//[Offset: 0xe8, Size: 0x8]
	MaterialInstanceDynamic* AssembleRTMaterial;//[Offset: 0xf0, Size: 0x8]
	float MeshSizeToRTSizeScale;//[Offset: 0xf8, Size: 0x4]
	FString IconResourcePath;//[Offset: 0x100, Size: 0x10]
	bool bCaptutred;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]

--------------------------------
Class: SGInventoryStatics.BlueprintFunctionLibrary.Object
	void UpdateMeshMaterialDynamicMode(MeshComponent* InMeshComp, byte InMatDynamicMode);// 0x490ce3fee041
	void UpdateInventoryMeshBoneTransform(SGInventory* Inventory);// 0x490be3fee041
	void UpdateInventoryMaterialDynamicMode(SGInventory* Inventory, byte InMatDynamicMode);// 0x490ae3fee041
	bool UnFoldIronSight(SGInventory* Inventory);// 0x4909e3fee041
	bool TrySetThermalViewActivated(bool bActivated, SGInventory* SourceInventory);// 0x4908e3fee041
	enum TranslateMoveCodeToAddContainerCode(enum MoveResultCode);// 0x4907e3fee041
	Object* SyncLoadLocalImage(FString UniqueID);// 0x4906e3fee041
	void StopInventoryActorAndMeshTick(SGInventory* Inventory);// 0x4905e3fee041
	SGInventory* SplitInventory(SGInventory* InInventory, int SplitCount, out const ItemGridInfo DestGridInfo, enum DestAttachPos, Actor* DestParentActor, int DestContainerIndex);// 0x4904e3fee041
	void SpawnTrigger(HitResult ImpactResult, class SGTrigger Trigger, Vector SpawnLoc, World* World, SGCharacter* OwnerChar, SGWeapon* OwnerWeapon);// 0x4903e3fee041
	SGAssembleBase* SpawnAssembleActor(class SGAssembleBase AssembleSceneClass, SGPlayerController* PCOwner, Vector SpawnPos);// 0x4902e3fee041
	void SortContainer(SGInventory* ContainerInventory, int InContainerIndex);// 0x4901e3fee041
	bool ShouldForceRebaseOrigin(SGInventory* Inventory);// 0x4900e3fee041
	bool ShouldDrop(SGInventory* Inventory);// 0x48ffe3fee041
	void SetWeaponAssembleID(SGWeapon* Inventory, int64 WeaponAssembleID);// 0x48fee3fee041
	void SetUseInBodyPart(SGInventory* Inventory, Actor* User, enum BodyType);// 0x48fde3fee041
	void SetUnLockedByCharacter(SGInventory* Inv, SGCharacter* LockedByCharacter, enum LockType);// 0x48fce3fee041
	void SetTotalCount(SGInventory* Inventory, int TotalCount, bool bCalculateWeight);// 0x48fbe3fee041
	void SetTotalAssembleCount(SGInventory* Inventory, int InTotalCount);// 0x48fae3fee041
	void SetStartGridPosition(SGInventory* Inventory, out const ItemGridInfo StartGrid);// 0x48f9e3fee041
	void SetSpawnFromTeamIndex(SGInventory* Inventory, int InFromTeamIndex);// 0x48f8e3fee041
	void SetSpawnFromPlayerGid(SGInventory* Inventory, uint64 InFromPlayerGid);// 0x48f7e3fee041
	void SetSpawnFromCharacterType(SGInventory* Inventory, enum InFromCharacterType);// 0x48f6e3fee041
	void SetSourceType(SGInventory* Inventory, enum SourceType);// 0x48f5e3fee041
	void SetParentActor(SGInventory* Inventory, Actor* InParentActor, int InContainerIndex);// 0x48f4e3fee041
	void SetMeshVisibility(Actor* Inventory, bool NewVisibility);// 0x48f3e3fee041
	void SetMeshComponentLOD(MeshComponent* InMeshComp, int LODNum);// 0x48f2e3fee041
	void SetMaxDurability(SGInventory* Inventory, float MaxDurability);// 0x48f1e3fee041
	void SetLockedByCharacter(SGInventory* Inv, SGCharacter* LockedByCharacter, enum LockType, bool bNeedLockSelf);// 0x48f0e3fee041
	void SetLastCharacterOwnerInfo(SGInventory* Inv, SGCharacter* SGCharacter);// 0x48efe3fee041
	void SetIsRotatedInfo(SGInventory* Inventory, bool RotatedState);// 0x48eee3fee041
	void SetIsFunctionDisabled(SGInventory* Inventory, bool newIsFunctionDisabled);// 0x48ede3fee041
	void SetIsBlackLoot(SGInventory* Inventory, bool newIsBlackLoot);// 0x48ece3fee041
	void SetInventorySpawnSourceType(SGInventory* Inventory, enum InSourceType);// 0x48ebe3fee041
	void SetInventoryName(SGInventory* Inventory, FName InInventoryName);// 0x48eae3fee041
	void SetInventoryMeshLOD(SGInventory* Inventory, int LODNum);// 0x48e9e3fee041
	bool SetInventoryInteractState(SGInventory* Inventory, bool bIsInteracting);// 0x48e8e3fee041
	void SetGameplayDefinedVisable(SGInventory* Inventory, bool bVisable);// 0x48e7e3fee041
	void SetFromLootPointID(SGInventory* Inventory, int FromLootPointID);// 0x48e6e3fee041
	void SetFromLootPoint(SGInventory* Inventory, Actor* FromLootPointID);// 0x48e5e3fee041
	void SetExpireTime(SGInventory* Inventory, int ExpireTime);// 0x48e4e3fee041
	void SetDurability(SGInventory* Inventory, float Durability);// 0x48e3e3fee041
	void SetDogTagInfo(SGInventory* DogTagInv, out FString PlayerName, int PlayerLevel, uint64 DeathTime, out FString KillerPlayerName, uint64 KillerPlayerWeaponID, out FString MapName, int KillerCharacterType, int DeathReason, bool bIsSameTeam, int PlayerRank, uint32 GOpenID, uint64 GID);// 0x48e2e3fee041
	void SetCustomFOV(SGInventory* Inv, float NewFOV);// 0x48e1e3fee041
	void SetCanNotSellItem(SGInventory* Inventory, bool newIsCanNotSellItem);// 0x48e0e3fee041
	void SetBadgeAttachPosition(Character* OwnerCharacter, SGInventoryEquipMeshComponent* EquipMeshComp, MeshComponent* CharacterMesh, SGCharacterCaptureActor* CaptureActor);// 0x48dfe3fee041
	void SetAttachPosition(SGInventory* Inventory, enum Pos, bool bAllChildren);// 0x48dee3fee041
	bool RemoveConversionChildActor(SGInventory* Inventory, Actor* InActor, int Count);// 0x48dde3fee041
	bool RemoveAvatarInventory(SGInventory* Inventory);// 0x48dce3fee041
	void RemoveAllPMCSelfTakeInAdapter(SGWeapon* ParentInventory, out SGInventory*[] OutTakeInInventories, int64 InFromPlayerGid, bool bEnablePMCAI);// 0x48dbe3fee041
	void PrepareInventoryOperationRep(SGInventory* InInventory, Actor* NewAttachParent, int NewContainerIndex, enum AttachPos, ItemGridInfo GridPos);// 0x48dae3fee041
	bool PredictAttachAdapter(SGInventory* Adapter, out SGInventory* PredictConflictedInv, SGInventory* ParentInventory, int InContainerIndex, bool bForceReplace);// 0x48d9e3fee041
	bool PopStackableItemSourceInfos(out StackableItemSourceInfo[] InStackableItemSourceInfos, int RemoveCount, out StackableItemSourceInfo[] OutRemovedItemSourceInfos);// 0x48d8e3fee041
	void PerformInventoryOperation_SetStartGrid(SGInventory* Inventory, out const ItemGridInfo NewGridPos);// 0x48d7e3fee041
	void PerformInventoryOperation_SetParentActor(SGInventory* Inventory, Actor* NewAttachParent, int NewContainerIndex);// 0x48d6e3fee041
	void PerformInventoryOperation_SetGridAndParent(SGInventory* Inventory, Actor* NewAttachParent, int NewContainerIndex, out const ItemGridInfo NewGridPos);// 0x48d5e3fee041
	void PerformInventoryOperation_SetAttachPos(SGInventory* Inventory, enum NewAttachPos);// 0x48d4e3fee041
	void PerformInventoryOperation(SGInventory* Inventory, Actor* NewAttachParent, int NewContainerIndex, enum NewAttachPos, out const ItemGridInfo NewGridPos);// 0x48d3e3fee041
	void NodifySelfAndChildrenPositionChanged(SGInventory* TargetInv);// 0x48d2e3fee041
	void ModifyInventoryTransform(SGInventory* ContainerInventory, Vector Location, Rotator Rotation);// 0x48d1e3fee041
	bool MergeInventory(SGInventory* DestInventory, SGInventory* SourceInventory, int PartMergeNum);// 0x48d0e3fee041
	bool MarkMeshComponentAs1PUse(MeshComponent* MeshComp, bool bFlag);// 0x48cfe3fee041
	void MarkInventoryAs1PUse(SGInventory* InInventory, bool bFlag);// 0x48cee3fee041
	bool IsWishListRecipeItem_Client(SGInventory* Inventory);// 0x48cde3fee041
	bool IsWishListRecipeItem(SGInventory* Inventory, Character* Character);// 0x48cce3fee041
	bool IsWeaponEquipAdditionalAttachPosition(enum Pos);// 0x48cbe3fee041
	bool IsWeaponContainerFull(SGInventory* Inventory);// 0x48cae3fee041
	bool IsWeaponContainerClass(Object* WorldContextObject, class SGInventory InventoryClass);// 0x48c9e3fee041
	bool IsWeaponContainer(SGInventory* Inventory);// 0x48c8e3fee041
	bool IsWeaponAdapter(SGInventory* Inventory);// 0x48c7e3fee041
	bool IsThermalScope(SGInventory* Inventory);// 0x48c6e3fee041
	bool IsThermalHeadwear(SGInventory* Inventory);// 0x48c5e3fee041
	bool IsTaskOrActivityIntenvory(int ItemID);// 0x48c4e3fee041
	bool IsTakeInSourceType(SGInventory* Inventory, enum Type);// 0x48c3e3fee041
	bool IsTacticalInvsActive(SGInventory* Inventory, out const GameplayTag TacticTag);// 0x48c2e3fee041
	bool IsStreamingToMaxMip(Texture* Texture);// 0x48c1e3fee041
	bool IsStreamingComplete(MeshComponent* MeshComp);// 0x48c0e3fee041
	bool IsStockCanBeFolded(SGInventory* Inventory);// 0x48bfe3fee041
	bool IsStaticMesh(SGInventory* Inventory);// 0x48bee3fee041
	bool IsScreenEffectArmor(SGInventory* Inventory);// 0x48bde3fee041
	bool IsScope(SGInventory* Inv);// 0x48bce3fee041
	bool IsRemarkableAppearanceInventory(SGInventory* Inventory);// 0x48bbe3fee041
	bool IsRecovery(SGInventory* Inventory);// 0x48bae3fee041
	bool IsQuestInventory(SGInventory* Inv);// 0x48b9e3fee041
	bool IsProtectiveEquipAttachPosition(enum Pos);// 0x48b8e3fee041
	bool IsProtectiveArmor(SGInventory* Inventory);// 0x48b7e3fee041
	bool IsPMCSelfTakeInInventory(SGInventory* Inventory, int64 InFromPlayerGid, bool bEnablePMCAI);// 0x48b6e3fee041
	bool IsOwnerCharacter(Actor* Inventory);// 0x48b5e3fee041
	bool IsMeshMaterialDynamicMode(MeshComponent* InMeshComp, byte InMaterialDynamicMode, bool bUseDynamicMaterialInstance);// 0x48b4e3fee041
	bool IsMeshFullyLoad(SGInventory* Inventory, bool bIgnoreInvalidMesh);// 0x48b3e3fee041
	bool IsMedicine(SGInventory* Inventory);// 0x48b2e3fee041
	bool IsMainWeaponEquipAttachPosition(enum Pos);// 0x48b1e3fee041
	bool IsItemIDMatchPrefix(int ItemID, int Prefix);// 0x48b0e3fee041
	bool IsIronSight(SGInventory* Inv);// 0x48afe3fee041
	bool IsIronRearSight(SGInventory* Inv);// 0x48aee3fee041
	bool IsInventoryInLootBox(SGInventory* Inv);// 0x48ade3fee041
	bool IsInventoryHasAssembleTag(SGInventory* Inventory, GameplayTag InventoryTag, bool bDefaultForGrip);// 0x48ace3fee041
	bool IsInventoryDrop(SGInventory* Inventory);// 0x48abe3fee041
	bool IsInventoryBelongTo1P(SGInventory* Inventory);// 0x48aae3fee041
	bool IsInventoryAssembled(SGInventory* InInv);// 0x48a9e3fee041
	bool IsInParentActorChain(SGInventory* ParentInventory, SGInventory* ChildInventory);// 0x48a8e3fee041
	bool IsInitDataComFinished(SGInventory* InInventory);// 0x48a7e3fee041
	bool IsInactiveTacticalInv(SGInventory* Inventory);// 0x48a6e3fee041
	bool IsHaveFreeGridForTargetGridSize(SGInventory* Inventory, out const ItemGridInfo TargetGridInfo, out const SGFreeGridQueryParams QueryParams, out SGGlobalGridOccupyInfo OutOccupyInfo);// 0x48a5e3fee041
	bool IsGridDropPositionValid(SGInventory* TargetInv, Actor* InParentActor, ItemGridInfo DropPosition, int InContainerIndex);// 0x48a4e3fee041
	bool IsGameplayDefinedVisable(SGInventory* Inventory);// 0x48a3e3fee041
	bool IsFood(SGInventory* Inventory);// 0x48a2e3fee041
	bool IsFitItemIDType(SGInventory* Inventory, int MainType, int MidType, int subtype);// 0x48a1e3fee041
	bool IsFirRequireTagUsing(SGInventory* ChildInventory, SGInventory* ParentInventory);// 0x48a0e3fee041
	bool IsFaceShield(SGInventory* Inventory);// 0x489fe3fee041
	bool IsEquipAttachPosition(enum Pos);// 0x489ee3fee041
	bool IsEnoughDurabilityToRemoveDebuffWithTag(Character* InCharacter, Actor* Inventory, out const GameplayTag DebuffTag);// 0x489de3fee041
	bool IsEnoughDurabilityToRemoveDebuff(SGInventory* Inventory, enum DebuffType);// 0x489ce3fee041
	bool IsDisplayInScene(SGInventory* Inventory);// 0x489be3fee041
	bool IsDisplayCanNotSellItem(SGInventory* Inventory, int TeamIndex);// 0x489ae3fee041
	bool IsDeathBoxBelongToTeammate(Actor* DeathBox, Character* InCharacter);// 0x4899e3fee041
	bool IsCorpseContainer(Actor* Actor);// 0x4898e3fee041
	bool IsContainsTeammateInventory_Client(SGInventory* Inventory);// 0x4897e3fee041
	bool IsContainsTeammateInventory(SGCharacter* SGCharacter, SGInventory* Inventory);// 0x4896e3fee041
	bool IsCompoundItemContainsTeammateInventory(SGCharacter* Character, SGInventory* Inventory);// 0x4895e3fee041
	bool IsCanStacking(Actor* Inventory);// 0x4894e3fee041
	bool IsCanPickup(Actor* Inventory);// 0x4893e3fee041
	bool IsCanNotSellItem(SGInventory* Inventory);// 0x4892e3fee041
	bool IsBullet(SGInventory* Inventory);// 0x4891e3fee041
	bool IsBreakableFaceShield(SGInventory* Inventory);// 0x4890e3fee041
	bool IsBoxContainer(Actor* Inventory);// 0x488fe3fee041
	bool IsBlackLootOrContainsBlackLoot(SGInventory* Inventory);// 0x488ee3fee041
	bool IsBlackLoot(SGInventory* Inventory);// 0x488de3fee041
	bool IsBadgeByClass(Object* WorldContextObject, class SGInventory InventoryClass);// 0x488ce3fee041
	bool IsBadge(SGInventory* Inventory);// 0x488be3fee041
	bool IsAvatarClass(Object* WorldContextObject, class SGInventory InventoryClass);// 0x488ae3fee041
	bool IsAvatar(SGInventory* Inventory);// 0x4889e3fee041
	bool IsAttachPositionOnWeapon(SGInventory* Inventory);// 0x4888e3fee041
	bool IsAssembleItem(SGInventory* Inventory);// 0x4887e3fee041
	bool IsArmorClass(Object* WorldContextObject, class SGInventory InventoryClass);// 0x4886e3fee041
	bool IsArmor(SGInventory* Inventory);// 0x4885e3fee041
	bool IsAllMeshFullyLoad(SGInventory* Inventory);// 0x4884e3fee041
	bool IsAimAdapter(SGInventory* Inv);// 0x4883e3fee041
	bool IsAdapterSupportedWithSocketInfo(SGInventory* ChildInventory, AssembleSocketInfo SocketInfo, bool bInHud);// 0x4882e3fee041
	bool IsAdapterSupportedWithChildren(SGInventory* ChildInventory, SGInventory* ParentInventory, bool bInHud);// 0x4881e3fee041
	bool IsAdapterSupported(SGInventory* ChildInventory, SGInventory* ParentInventory, bool bForceReplace, bool bInHud);// 0x4880e3fee041
	bool IsAdapterFastAddable(SGInventory* ChildInventory, SGInventory* ParentInventory);// 0x487fe3fee041
	SGInventory* IsAdapterConflicted(SGInventory* ChildInventory, SGInventory* ParentInventory);// 0x487ee3fee041
	bool IsAdapterBeAttachedToParent(SGInventory* Inventory);// 0x487de3fee041
	bool IsAdapterAlreadyAssembled(SGInventory* ChildInventory);// 0x487ce3fee041
	bool IsActiveInventory(SGInventory* Inventory);// 0x487be3fee041
	bool InVestBag(SGInventory* Inventory, SGCharacter* Character);// 0x487ae3fee041
	bool InPocketBag(SGInventory* Inventory, SGCharacter* Character);// 0x4879e3fee041
	bool HasOtherdpterOn(SGInventory* Inventory, SGInventory* ParentItem);// 0x4878e3fee041
	bool HasForbbidenDiscardInventory(SGInventory* Inventory);// 0x4877e3fee041
	bool HasAttachedTacticalInv(SGInventory* Inventory);// 0x4876e3fee041
	bool GridPreOccupy_End(SGInventory* OccupyKeyInventory, SGInventory* ContainerInventory, out int OutContainerIndex, out SGGridOccupyInfo OutGridOccupiedInfo);// 0x4875e3fee041
	bool GridPreOccupy_Begin(SGInventory* OccupyKeyInventory, out SGGlobalGridOccupyInfo GlobalGridOccupiedInfo);// 0x4874e3fee041
	int GiveToPlayer(SGInventory* Inventory, Pawn* TargetPlayer, enum Pos, int Count, ItemGridInfo DropPosition, Actor* InParentActor, int InContainerIndex, FName SocketName, bool bInGameHud, bool bDestroyItem);// 0x4873e3fee041
	float GetWeight(SGInventory* Inventory);// 0x4872e3fee041
	int GetWeaponContainerMaxCapacity(SGInventory* Inventory);// 0x4871e3fee041
	int GetWeaponContainerLeftSpace(SGInventory* Inventory);// 0x4870e3fee041
	float GetWeaponContainerFullPercent(SGInventory* Inventory);// 0x486fe3fee041
	FString GetWeaponContainerCapacityDisplayString(SGInventory* Inventory);// 0x486ee3fee041
	int GetWeaponContainerCapacity(SGInventory* Inventory);// 0x486de3fee041
	int GetWeaponContainedObjectCount(SGInventory* Inventory);// 0x486ce3fee041
	int64 GetWeaponAssembleID(SGInventory* Inventory);// 0x486be3fee041
	GameplayTag GetViewWeaponTag();// 0x486ae3fee041
	int GetVestBagCountPropagate(SGInventory* ParentInv);// 0x4869e3fee041
	enum GetUseInBodyPart(SGInventory* Inventory);// 0x4868e3fee041
	GameplayTag GetUpperReceiverTag();// 0x4867e3fee041
	AnimMontage* GetUnfillMagazineMontage(SGInventory* Magazine);// 0x4866e3fee041
	float GetUnfillContainerTimePerElement(SGInventory* Inventory, SGCharacter* CharOperator);// 0x4865e3fee041
	float GetUnfillContainerTime(SGInventory* Inventory, SGCharacter* CharOperator);// 0x4864e3fee041
	float GetTotalFillContainerTime(SGInventory* Inventory, bool bInReachable, SGCharacter* CharOperator);// 0x4863e3fee041
	int GetTotalCount(SGInventory* Inventory);// 0x4862e3fee041
	SGInventory* GetTopParentInventory(SGInventory* InInv, bool bIncludeSelf);// 0x4861e3fee041
	GameplayTag GetTiltingIronRearTag();// 0x4860e3fee041
	GameplayTag GetTiltingIronFrontTag();// 0x485fe3fee041
	void GetThrowWeaponsInPocketAndVestBag(SGCharacter* SGCharacter, out Actor*[] OutArray);// 0x485ee3fee041
	GameplayTag GetThermalImagerTag();// 0x485de3fee041
	SGThermalImagerParams GetThermalImagerParams(SGInventory* Inventory);// 0x485ce3fee041
	bool GetSwitchState(SGInventory* Inventory, out GameplayTag TacticTag);// 0x485be3fee041
	GameplayTag GetStockTag();// 0x485ae3fee041
	ItemGridInfo GetStartGridPosition(SGInventory* Inventory);// 0x4859e3fee041
	int GetStandardPrice(SGInventory* Inventory);// 0x4858e3fee041
	int GetSpawnFromTeamIndex(SGInventory* Inventory);// 0x4857e3fee041
	uint64 GetSpawnFromPlayerGid(SGInventory* Inventory);// 0x4856e3fee041
	enum GetSpawnFromCharacterType(SGInventory* Inventory);// 0x4855e3fee041
	enum GetSourceType(SGInventory* Inventory);// 0x4854e3fee041
	float GetSoundMaxDistanceInfluenceFactor(SGInventory* Inventory);// 0x4853e3fee041
	float GetSoundLevelInfluenceFactor(SGInventory* Inventory);// 0x4852e3fee041
	FString GetSocketName(enum SocketEnum);// 0x4851e3fee041
	enum GetSocketEnum(FString SocketName);// 0x4850e3fee041
	int GetSize(SGInventory* Inventory);// 0x484fe3fee041
	float GetSightFOV(SGInventory* Inv, SGInventory* InWeapon);// 0x484ee3fee041
	int GetSetParentRingDebugCountMax();// 0x484de3fee041
	GameplayTag GetScopeTag();// 0x484ce3fee041
	int GetRowSize(SGInventory* Inventory);// 0x484be3fee041
	float GetRollUpTime(SGInventory* Inventory);// 0x484ae3fee041
	ItemGridInfo GetRolledUpGridInfo(SGInventory* Inventory);// 0x4849e3fee041
	GameplayTag GetReargripTag();// 0x4848e3fee041
	int GetPriorityByClass(Object* WorldContextObject, class SGInventory InventoryClass);// 0x4847e3fee041
	int GetPriority(SGInventory* Inventory);// 0x4846e3fee041
	void GetPreOccupyGridList(SGInventory* ContainerInventory, int ContainerIndex, out SGGridOccupyInfo[] OccupyGridList);// 0x4845e3fee041
	float GetPieceInventoryWeight(SGInventory* Inventory);// 0x4844e3fee041
	int GetPieceInventoryPrice(SGInventory* Inventory);// 0x4843e3fee041
	bool GetParentActorOutmostEx(Actor* Inventory, out Actor* FirstTopParentInv, out Actor* SecondTopParentInv);// 0x4842e3fee041
	Actor* GetParentActorOutmost(SGInventory* Inventory);// 0x4841e3fee041
	Actor* GetParentActor(SGInventory* Inventory);// 0x4840e3fee041
	GameplayTag GetMuzzleTag();// 0x483fe3fee041
	SGInventory* GetMostFullMagazineInVestBag(SGInventory* TargetWeapon, SGInventory* ExceptMag, SGCharacter* ToCheckCharacter);// 0x483ee3fee041
	SGInventory* GetMostFullMagazineInExceptBag(SGInventory* TargetWeapon, SGInventory* ExceptMag);// 0x483de3fee041
	SGInventory* GetMostFullMagazineInBag(SGInventory* TargetWeapon, SGInventory* ExceptMag);// 0x483ce3fee041
	byte GetMeshMaterialDynamicMode(MeshComponent* InMeshComp);// 0x483be3fee041
	MeshComponent* GetMesh(SGInventory* Inventory);// 0x483ae3fee041
	float GetMaxDurability(SGInventory* Inventory);// 0x4839e3fee041
	int GetMaxCount(SGInventory* Inventory);// 0x4838e3fee041
	GameplayTag GetMainHeadwearTag();// 0x4837e3fee041
	GameplayTag GetMagazineTag();// 0x4836e3fee041
	SGCharacter* GetLockedByCharacter(SGInventory* Inv);// 0x4835e3fee041
	FString GetLocalUnassembledAdapterRTPath(int64 ItemID);// 0x4834e3fee041
	FString GetLocalRTPath(FString UniqueID);// 0x4833e3fee041
	LastCharacterOwnerInfo GetLastCharacterOwnerInfo(SGInventory* Inv);// 0x4832e3fee041
	GameplayTag GetLaserTag();// 0x4831e3fee041
	float GetJumpZScale(SGInventory* Inventory);// 0x4830e3fee041
	bool GetIsRotatedInfo(SGInventory* Inventory);// 0x482fe3fee041
	bool GetIsMeshHidden(Actor* Inventory);// 0x482ee3fee041
	GameplayTag GetIronRearTag();// 0x482de3fee041
	GameplayTag GetIronFrontTag();// 0x482ce3fee041
	float GetInvSelfWeight(SGInventory* Inventory);// 0x482be3fee041
	void GetInvSelfRejectItemIDs(SGInventory* Inventory, out <int,SGInventory*> InOutRejectItemIDMap);// 0x482ae3fee041
	float GetInventoryWeightFromItemClass(Object* WorldContextObject, class Actor ItemClass);// 0x4829e3fee041
	class SGInventory GetInventoryTypeByDataTable(Object* WorldContextObject, uint64 QueryID);// 0x4828e3fee041
	enum GetInventoryTypeBeforeRegiest(SGInventory* Inventory);// 0x4827e3fee041
	enum GetInventoryType(SGInventory* Inventory);// 0x4826e3fee041
	float GetInventoryTotalWeight(SGInventory* Inventory);// 0x4825e3fee041
	void GetInventoryTotalValueTrade(SGInventory* Inventory, out int OutValue, bool bIncludeSelf, bool bIncludeChild, bool bIncludeBullet);// 0x4824e3fee041
	void GetInventoryTotalValue(SGInventory* Inventory, out int OutValue, bool bIncludeSelf, bool bIncludeChild, bool bIncludeBullet);// 0x4823e3fee041
	StaticMesh* GetInventoryStaticMesh(SGInventory* Inventory);// 0x4822e3fee041
	enum GetInventorySpawnSourceType(SGInventory* Inventory);// 0x4821e3fee041
	FString GetInventorySkeletalMeshName(SGInventory* Inventory);// 0x4820e3fee041
	SkeletalMesh* GetInventorySkeletalMesh(SGInventory* Inventory);// 0x481fe3fee041
	FString GetInventorySimpleDisplayName(SGInventory* Inventory);// 0x481ee3fee041
	int GetInventoryRarity(SGInventory* Inventory);// 0x481de3fee041
	void GetInventoryPredictedAssembleExtendSize(SGInventory* Inventory, SGInventory* FoldedStockInv, out AssembleSocketInfo PredictModifiedSocket, SGInventory* PredictTriedAdapterParentInv, SGInventory* TriedAdapterInv, bool bIsQuickRandomAttach, out bool bHasFirstMatch, out int AssembleExtendSize_UP, out int AssembleExtendSize_DOWN, out int AssembleExtendSize_LEFT, out int AssembleExtendSize_RIGHT);// 0x481ce3fee041
	void GetInventoryPredictAssembleSizeModifyInfo(SGInventory* Inventory, SGInventory* TriedAdapterInv, int InContainerIndex, out ItemSizeModifyInfo OutSizeModifyInfo);// 0x481be3fee041
	void GetInventoryPredictAssembleExtendSizeInfo(SGInventory* Inventory, SGInventory* TriedAdapterInv, int InContainerIndex, out SGInventory* OutFirstParentGridContainerInv, out int OutFirstParentGridContainerIndex, out SGInventory* OutFirstParentGridContainerChildInv, out ItemGridInfo OutFirstParentGridContainerChildPredictNewSize, out ItemSizeModifyInfo OutSizeModifyInfo);// 0x481ae3fee041
	FString GetInventoryNameFromCommonTable(SGInventory* TempInventory);// 0x4819e3fee041
	FName GetInventoryNameByClass(Object* WorldContextObject, class SGInventory InventoryClass);// 0x4818e3fee041
	FName GetInventoryName(SGInventory* Inventory);// 0x4817e3fee041
	FString GetInventoryMeshName(SGInventory* Inventory);// 0x4816e3fee041
	int64 GetInventoryItemID(SGInventory* Inventory);// 0x4815e3fee041
	bool GetInventoryInteractState(SGInventory* Inventory);// 0x4814e3fee041
	InventoryGridInfo GetInventoryGridInfo(const SGInventory* Inventory);// 0x4813e3fee041
	void GetInventoryFinalAssembleExtendSize(SGInventory* Inventory, SGInventory* FoldedStockInv, out int AssembleExtendSize_UP, out int AssembleExtendSize_DOWN, out int AssembleExtendSize_LEFT, out int AssembleExtendSize_RIGHT);// 0x4812e3fee041
	FString GetInventoryDisplayName(SGInventory* Inventory);// 0x4811e3fee041
	SGInventory*[] GetInventoryByAttachPosition(SGCharacter* SGCharacter, enum AttachPosition);// 0x4810e3fee041
	int GetInvCountInPocketAndVest(SGCharacter* SGCharacter);// 0x480fe3fee041
	int GetInContainerIndex(SGInventory* Inventory);// 0x480ee3fee041
	FString GetIconPath(SGInventory* Inventory);// 0x480de3fee041
	Object* GetIconByClass(Object* WorldContextObject, class SGInventory InventoryClass, enum IconType);// 0x480ce3fee041
	Object* GetIcon(SGInventory* Inventory, enum IconType);// 0x480be3fee041
	SGInventory* GetHelmetAttachedMask(SGInventory* Inventory);// 0x480ae3fee041
	GameplayTag GetHandguardTag();// 0x4809e3fee041
	ItemGridInfo GetGridInfo(SGInventory* Inventory);// 0x4808e3fee041
	SGWeaponFireMode_ProjectileHit* GetGrenadeSettingByID(Object* WorldContextObject, int64 ItemID);// 0x4807e3fee041
	float GetGrenadePlayEffectTimeByID(Object* WorldContextObject, int64 ItemID);// 0x4806e3fee041
	float GetGrenadeInitSpeedByID(Object* WorldContextObject, int64 ItemID);// 0x4805e3fee041
	GameplayTag GetGestureTag();// 0x4804e3fee041
	GameplayTag GetGasBlockTag();// 0x4803e3fee041
	int GetFromLootPointID(SGInventory* Inventory);// 0x4802e3fee041
	Actor* GetFromLootPoint(SGInventory* Inventory);// 0x4801e3fee041
	float GetFOV(SGInventory* Inv);// 0x4800e3fee041
	GameplayTag GetForegripTag();// 0x47ffe3fee041
	Actor* GetFirstParentGridContainerChild(SGInventory* Inventory);// 0x47fee3fee041
	uint64 GetFinallyPlayerRoleId(SGInventory* Inventory);// 0x47fde3fee041
	uint64 GetFinallyPlayerOpenId(SGInventory* Inventory);// 0x47fce3fee041
	enum GetFinallyCharacterType(SGInventory* Inventory);// 0x47fbe3fee041
	AnimMontage* GetFillMagazineMontage(SGInventory* Magazine);// 0x47fae3fee041
	float GetFillContainerTimePerElement(SGInventory* Inventory, SGCharacter* CharOperator);// 0x47f9e3fee041
	float GetFillContainerTime(SGInventory* Inventory, Actor* FillSource, bool bInReloading, SGCharacter* CharOperator);// 0x47f8e3fee041
	int GetFillBulletTotalNumInVestBag(SGInventory* TargetWeapon);// 0x47f7e3fee041
	SGInventory* GetFillBulletNotInVestAndPock(SGInventory* TargetWeapon);// 0x47f6e3fee041
	SGInventory* GetFillBulletInVestBag(SGInventory* TargetWeapon);// 0x47f5e3fee041
	GameplayTag GetFaceShieldTag();// 0x47f4e3fee041
	int GetExpireTime(SGInventory* Inventory);// 0x47f3e3fee041
	enum GetEquipAttachPosition(SGInventory* Inventory);// 0x47f2e3fee041
	float GetDurabilityPercent(SGInventory* Inventory);// 0x47f1e3fee041
	enum GetDurabilityCostType(Actor* Inventory);// 0x47f0e3fee041
	float GetDurability(Actor* Inventory, bool bUseClientValue);// 0x47efe3fee041
	bool GetDogTagInfo(SGInventory* DogTagInv, out InventoryDogTagInfo DogTagInfo);// 0x47eee3fee041
	FString GetDisplayNameByClass(Object* WorldContextObject, class SGInventory InventoryClass);// 0x47ede3fee041
	FString GetDisplayName(SGInventory* Inventory);// 0x47ece3fee041
	FString GetDescriptionByClass(Object* WorldContextObject, class SGInventory InventoryClass);// 0x47ebe3fee041
	FString GetDescription(SGInventory* Inventory);// 0x47eae3fee041
	int GetDepthLevelInContainer(SGInventory* Inventory);// 0x47e9e3fee041
	enum GetDamageCauserType(Actor* DamageCauser);// 0x47e8e3fee041
	enum GetCorpseContainerBelongCharacterType(Actor* Actor);// 0x47e7e3fee041
	ConversionContainerInfo[] GetConversionChildActorList(SGInventory* Inventory);// 0x47e6e3fee041
	int GetContainerTotalSize(Actor* Inventory);// 0x47e5e3fee041
	int GetContainerChildMaxDepthLevel(SGInventory* Inventory);// 0x47e4e3fee041
	void GetContainerChildListByIndex(Actor* Inventory, out Actor*[] Out_ContainerChildList, int InContainerIndex);// 0x47e3e3fee041
	InventoryContainerBase GetContainerBaseByIndex(Actor* Inventory, int InContainerIndex);// 0x47e2e3fee041
	Actor* GetContainerAnyContentActor(Actor* ContainerInventory);// 0x47e1e3fee041
	int GetCommonItemValueFromTrade(SGInventory* Inventory, uint64 ItemID, int Count);// 0x47e0e3fee041
	int GetColumnSize(SGInventory* Inventory);// 0x47dfe3fee041
	SGInventory*[] GetCarriedAmmoList(SGCharacter* InCharacter);// 0x47dee3fee041
	int GetCanMergeToCount(SGInventory* MergeTargetInventory, int64 MergeSourceItemID);// 0x47dde3fee041
	float GetBlurThresholds(SGInventory* Inv);// 0x47dce3fee041
	float GetBlurRadius(SGInventory* Inv);// 0x47dbe3fee041
	GameplayTag GetBipodTag();// 0x47dae3fee041
	GameplayTag GetBarrelTag();// 0x47d9e3fee041
	int GetBagCountPropagate(SGInventory* ParentInv);// 0x47d8e3fee041
	enum GetAvatarTypeByClass(Object* WorldContextObject, class SGInventory InventoryClass);// 0x47d7e3fee041
	enum GetAvatarType(SGInventory* Inventory);// 0x47d6e3fee041
	bool GetAttachSupport(out AssembleSocketInfo SocketInfo, class SGInventory Parent, class SGInventory Child);// 0x47d5e3fee041
	FName GetAttachSocket(SGInventory* Inventory);// 0x47d4e3fee041
	enum GetAttachPosition(SGInventory* Inventory);// 0x47d3e3fee041
	SGInventory* GetAttachedInventoryOnSocket(SGInventory* ParentInv, FName InSocketName);// 0x47d2e3fee041
	SGInventory* GetAttachedChildInventoryByTag(SGInventory* Inventory, out const GameplayTag GameTag);// 0x47d1e3fee041
	void GetAttachedAdapterList(SGInventory* Inventory, out SGInventory*[] AttachedAdapterList, bool bIncludeSelf, bool bRecursive);// 0x47d0e3fee041
	SGInventory* GetAttachableInventory(SGInventory* Adapter, SGInventory* TopParentInventory, bool bForceReplace);// 0x47cfe3fee041
	GameplayTag GetAssembleTag(SGInventory* Inventory);// 0x47cee3fee041
	SGInventory* GetAssembleParentInv(SGInventory* InInv);// 0x47cde3fee041
	ItemGridInfo GetAssembleExtendGridInfo(SGInventory* Inventory, bool bIsPredictFoldStock, bool newPredictFoldStockState);// 0x47cce3fee041
	enum GetArmorType(SGInventory* Inventory);// 0x47cbe3fee041
	class SGCaliber GetAmmoCaliberTypeByClass(Object* WorldContextObject, class SGInventory InventoryClass);// 0x47cae3fee041
	class SGCaliber GetAmmoCaliberType(SGInventory* Inventory);// 0x47c9e3fee041
	AssembleSocketInfo[] GetAllSupportedSockets(SGInventory* Inventory);// 0x47c8e3fee041
	void GetAllParentInventories(SGInventory* InInv, out SGInventory*[] OutRes);// 0x47c7e3fee041
	void GetAllInventoryContainerBaseList(Actor* Inventory, out InventoryContainerBase[] Out_InventoryContainerBaseList);// 0x47c6e3fee041
	void GetAllInventoriesPropagate(SGInventory* ParentInventory, out SGInventory*[] OutInventoryList, bool bIncludeSelf, bool bSkipAssembleChild);// 0x47c5e3fee041
	void GetAllFakeIDOfItem(SGPlayerItemInfoBase* ItemInfo, out <uint64,SGPlayerItemInfoBase*> ItemIDMap, int Index, int ParentLayerIndex, int64 ParentFakeID, int64 ParentItemID);// 0x47c4e3fee041
	void GetAllFakeIDOfInv(SGInventory* Inv, out <uint64,SGInventory*> IDMap, int SocketIndex, int ParentLayerIndex, int64 ParentFakeID);// 0x47c3e3fee041
	void GetAllContainerChildList(Actor* Inventory, out Actor*[] Out_ContainerChildList);// 0x47c2e3fee041
	SGInventory*[] GetAllCompatibleInventoryOnSocket(SGInventory* ParentInv, FName InSocketName);// 0x47c1e3fee041
	void GetAllChildItemInventory(SGInventory* Inventory, out Actor*[] Out_ChildList);// 0x47c0e3fee041
	void GetAllChildInventories(SGInventory* Inventory, out SGInventory*[] ChildInventories);// 0x47bfe3fee041
	void GetAllAttachedChildInvRejectItemIDs(SGInventory* Inventory, out <int,SGInventory*> InOutRejectItemIDMap, out SGInventory*[] IgnoreCheckInvs);// 0x47bee3fee041
	void GetAllAttachedChildInventoryPropagate(SGInventory* Inventory, out SGInventory*[] OutInventoryList);// 0x47bde3fee041
	uint64[] GetAllAttachedChildInventoryIDsPropagate(SGInventory* Inventory);// 0x47bce3fee041
	SGInventory*[] GetAllAttachedChildInventory(SGInventory* Inventory, bool propagate);// 0x47bbe3fee041
	void GetAllAttachedAdapterList(SGInventory* Inventory, out SGInventory*[] AttachedAdapterList, bool bIncludeSelf, bool bRecursive);// 0x47bae3fee041
	void GetAllAssembleStr(SGInventory* Inv, out FString Str);// 0x47b9e3fee041
	GameplayTag GetActionSwitchFireModeTag();// 0x47b8e3fee041
	GameplayTag GetActionReloadTag();// 0x47b7e3fee041
	GameplayTag GetActionReloadOneByOneTag();// 0x47b6e3fee041
	GameplayTag GetActionPullBoltTag();// 0x47b5e3fee041
	GameplayTag GetActionFireTag();// 0x47b4e3fee041
	GameplayTag GetActionCheckMagazineTag();// 0x47b3e3fee041
	void ForceStaticMeshStreaming(StaticMesh* StaticMesh);// 0x47b2e3fee041
	void ForceSkeletalMeshStreaming(SkeletalMesh* SkeletalMesh);// 0x47b1e3fee041
	void ForceSetContainerAnimState(SGInventory* ContainerInventory, enum ContainerIteractAnimState);// 0x47b0e3fee041
	bool FoldIronSight(SGInventory* Inventory);// 0x47afe3fee041
	class SGInventory FindInventoryTypeByDataTable(Object* WorldContextObject, uint64 QueryID);// 0x47aee3fee041
	ActorComponent* FindComponentCDOByClass(class SGInventory InventoryClass, const class ActorComponent ComponentClassToFind);// 0x47ade3fee041
	ActorComponent*[] FindAllComponentsCDOByClass(class SGInventory InventoryClass, const class ActorComponent ComponentClassToFind);// 0x47ace3fee041
	void ExpandAndAddToInventoryContainer(SGInventory* TargetInventory, SGInventory* SourceContainerInventory, int ContainerIndex);// 0x47abe3fee041
	void EnablePhysicsSimulation(SGInventory* Inventory, bool bEnable);// 0x47aae3fee041
	void EnableCustomFOV(SGInventory* Inv, bool bEnable);// 0x47a9e3fee041
	void DropFrom(SGInventory* Inventory, const Actor* FromActor, out const Vector StartLocation, out const Vector TossVelocity);// 0x47a8e3fee041
	bool DetachAdapterNoCharacter(SGInventory* Adapter, Actor* ParentInventory);// 0x47a7e3fee041
	bool DetachAdapterInGameHud(SGInventory* Adapter, SGInventory* ParentInventory);// 0x47a6e3fee041
	bool DestroyInventory(SGInventory* Inventory);// 0x47a5e3fee041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromResourceMaterial(MeshComponent* InMeshComp, int InMaterialIndex);// 0x47a4e3fee041
	void CostDurability(SGInventory* Inventory, float Value, bool bDurationCost);// 0x47a3e3fee041
	void CopySourceTypeInfo(SGInventory* FromInventory, SGInventory* ToInventory);// 0x47a2e3fee041
	int CompareServerFrame(const SGInventory* Inventory1, const SGInventory* Inventory2);// 0x47a1e3fee041
	void CloneSearchFinishedCharacterList(SGInventory* FromInventory, SGInventory* ToInventory);// 0x47a0e3fee041
	void ClientSetRuntimeID(SGInventory* InInventory, int InRuntimeID);// 0x479fe3fee041
	void ClearFillBulletCached(SGInventory* TargetWeapon);// 0x479ee3fee041
	void ClearContainer(SGInventory* ContainerInventory);// 0x479de3fee041
	bool CheckPlayerCanMoveInventoryToOtherCharacter(SGCharacter* CheckCharacter, SGCharacter* DestOtherCharacter);// 0x479ce3fee041
	bool CheckPlayerCanMoveInventoryToDestParentActor(SGCharacter* CheckCharacter, Actor* DestParentActor, int DestContainerIndex);// 0x479be3fee041
	bool CheckPlayerCanInteractInventory(SGCharacter* CheckCharacter, SGInventory* CheckInventory);// 0x479ae3fee041
	enum CheckItemIdCanPutInContainer(uint64 ItemID, Actor* InParentActor);// 0x4799e3fee041
	bool CheckIsSizeGridDropPositionValid(out ItemGridInfo TestItemSize, Actor* InParentActor, out ItemGridInfo DropPosition, int InContainerIndex, Actor* IgnoreInventory, Actor* IgnoreInventory2);// 0x4798e3fee041
	bool CheckIsSearched(SGInventory* Inventory);// 0x4797e3fee041
	bool CheckIsInvPutInContainerOverflow(SGInventory* Inventory, SGInventory* ContainerInventory, enum ExtraOper);// 0x4796e3fee041
	bool CheckIsInventoryListRejectByRejectItemIDMap(out <int,SGInventory*> RejectItemIDMap, out SGInventory*[] InInventoryList, out SGInventory* BlockedInvInMap, out SGInventory* BlockedChildInv);// 0x4795e3fee041
	bool CheckIsInSearching(SGInventory* Inventory);// 0x4794e3fee041
	bool CheckIsGridContainer(SGInventory* Inventory);// 0x4793e3fee041
	bool CheckIsFunctionDisabled(SGInventory* Inventory);// 0x4792e3fee041
	bool CheckIsContainerRoughSearched(SGInventory* Inventory, SGCharacter* InCharacter);// 0x4791e3fee041
	bool CheckIsContainerNeedSearch(SGInventory* Inventory);// 0x4790e3fee041
	bool CheckIsContainerHasContentInventory(Actor* ContainerInventory);// 0x478fe3fee041
	bool CheckIsContainerAutoSearching_LocalClient(SGInventory* Inventory);// 0x478ee3fee041
	bool CheckIsCompoundInvRejectByRejectItemIDMap(out <int,SGInventory*> RejectItemIDMap, SGInventory* CompoundInv, out SGInventory* BlockedInvInMap, out SGInventory* BlockedChildInv, out SGInventory*[] IgnoreCheckInvs, SGInventory* TargetInvNewTryAddAdapter);// 0x478de3fee041
	bool CheckInvItemTypeFromItemId(uint64 ItemID, enum CheckType);// 0x478ce3fee041
	bool CheckInvItemType(SGInventory* Inventory, enum CheckType);// 0x478be3fee041
	enum CheckInventoryCanPutInContainer(SGInventory* Inventory, Actor* InParentActor, enum ExtraOper);// 0x478ae3fee041
	bool CheckIfHasAnyAttachedAdapter(SGInventory* Inventory);// 0x4789e3fee041
	bool CheckHasCapture(SGInventory* Inventory);// 0x4788e3fee041
	bool CheckContainerIsRolledUp(SGInventory* ContainerInv);// 0x4787e3fee041
	bool CheckCanRollUp(SGInventory* Inventory);// 0x4786e3fee041
	void ChangeMeshMIDParent(MeshComponent* MeshComponent, <MaterialInstance*,MaterialInstance*> MaterialInstanceMap);// 0x4785e3fee041
	bool CanPlayAnimation(SGInventory* Inventory);// 0x4784e3fee041
	bool CanMerge(SGInventory* MergeTargetInventory, int64 MergeSourceItemID);// 0x4783e3fee041
	bool CanInventoryDetachFromParent(SGInventory* ChildInventory);// 0x4782e3fee041
	bool CanFillInventory(SGInventory* Inventory, Actor* FromActor, bool bIsIgnoreFull);// 0x4781e3fee041
	bool CanFillBoreByInventory(SGInventory* Inventory, Actor* FromActor);// 0x4780e3fee041
	bool CanCureTearGas(Actor* Inv);// 0x477fe3fee041
	bool CanCureTargetGameEffect(Actor* Inv, enum EffectType);// 0x477ee3fee041
	bool CanCurePain(Actor* Inv);// 0x477de3fee041
	bool CanCureOutOfEndurance(Actor* Inv);// 0x477ce3fee041
	bool CanCureMoisture(Actor* Inv);// 0x477be3fee041
	bool CanCureHungry(Actor* Inv);// 0x477ae3fee041
	bool CanCureEnduranceLoss(Actor* Inv);// 0x4779e3fee041
	bool CanCureBoneBreak(Actor* Inv);// 0x4778e3fee041
	bool CanCureBleed(Actor* Inv);// 0x4777e3fee041
	bool CanAssembleAutoFindParent(SGInventory* ChildInventory, SGInventory* TopParent, bool bForceReplace);// 0x4776e3fee041
	bool CanAssembleAddInv(SGInventory* ChildInventory, SGInventory* ParentInventory);// 0x4775e3fee041
	bool CanAssemble(SGInventory* ChildInventory, SGInventory* ParentInventory, bool bForceReplace);// 0x4774e3fee041
	enum CanAddToInventoryContainerExtra(SGInventory* TargetInventory, SGInventory* SourceContainerInventory, bool bIsAutoAdd, out ItemGridInfo NewModifiedStartPos, out bool NewModifiedRotateState, Character* DoAddCharacter, enum ExtraOperType, int ContainerIndex);// 0x4773e3fee041
	bool CanAddToInventoryContainerByItemID(SGInventory* TargetContainerInventory, int64 ItemID, bool bPreferMerge, out SGGlobalGridOccupyInfo OutGlobalOccupyInfo);// 0x4772e3fee041
	enum CanAddToInventoryContainer(SGInventory* TargetInventory, SGInventory* SourceContainerInventory, bool bIsAutoAdd, Character* DoAddCharacter, enum ExtraOperType, int ContainerIndex);// 0x4771e3fee041
	enum CanAddMultipleItemToContainer(SGInventory* SourceContainerInventory, out ItemGridInfo[] CheckGridInfoList, out InventoryContainerBase[] OutContainerBaseComList, out SGGridOccupyInfo[] OutOccupyInfoList);// 0x4770e3fee041
	bool CanAddMultipleInventoryToContainer(SGInventory* SourceContainerInventory, SGInventory*[] CheckInvList);// 0x476fe3fee041
	void CalcInventorySpawnSourceType(SGInventory* Inventory, Character* Character, enum GiveInventoryReason, int64 TakeInGid);// 0x476ee3fee041
	void BroadcastStackableItemSourceInfoChange(Character* Character, SGInventory* SourceInventory, bool bAdd, StackableItemSourceInfo[] ChangedItemInfo, int ItemID);// 0x476de3fee041
	void BreakAssembleInventory(SGInventory* ParentInventory, out SGInventory*[] OutTakeInInventories, int64 InFromPlayerGid, bool bEnablePMCAI);// 0x476ce3fee041
	bool BoxEncroachesBlockingGeometry_WithAdjustment(Object* WorldContextObject, Vector WorldLocation, Quat Quat, Vector BoxExtend, out Vector OutProposedAdjustment);// 0x476be3fee041
	void AutoAssemble(SGInventory* ParentInventory, SGInventory*[] SubInventorys);// 0x476ae3fee041
	bool AttachAdapterNoCharacter(SGInventory* Adapter, SGInventory* ParentInventory, int InContainerIndex, bool bRemoveToReachable, bool bForceReplace);// 0x4769e3fee041
	bool AttachAdapterInGameHud(SGInventory* Adapter, SGInventory* ParentInventory, int InContainerIndex);// 0x4768e3fee041
	bool AttachAdapterAutoFindParent(SGInventory* Adapter, int InContainerIndex);// 0x4767e3fee041
	bool AttachAdapterAuto(SGInventory* Adapter, SGInventory* InParentActor, int InContainerIndex, bool bRemoveToReachable, bool bForceReplace);// 0x4766e3fee041
	void AsyncLoadByDataTable(Object* WorldContextObject, uint64 QueryID);// 0x4765e3fee041
	int ApplyToMergeInvList(SGInventory* Inventory, out SGInventory*[] ToMergeInvs);// 0x4764e3fee041
	bool AllowGiveTo(SGInventory* Inventory, Character* ToCharacter);// 0x4763e3fee041
	void AdjustInventoryLocation(SGInventory* Inv, out const Vector Location);// 0x4762e3fee041
	bool AddToInventoryContainer(SGInventory* TargetInventory, SGInventory* SourceContainerInventory);// 0x4761e3fee041
	bool AddConversionChildActor(SGInventory* Inventory, Actor* InActor, int Count);// 0x4760e3fee041

--------------------------------
Class: SGFreeGridQueryParams
	Actor* IgnoreInventory;//[Offset: 0x0, Size: 0x8]
	Actor* IgnoreInventory2;//[Offset: 0x8, Size: 0x8]
	bool bAllowMerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int64 SelfItemID;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SGWeaponFireMode_ProjectileHit.SGWeaponFireMode_WithProjectileTrajectory.SGWeaponFireMode.Object
	class SGThrowableProjectile* ThrowableProjcetileClass;//[Offset: 0x120, Size: 0x8]
	float StandFireDelay;//[Offset: 0x128, Size: 0x4]
	float ProneFireDelay;//[Offset: 0x12c, Size: 0x4]
	float CrouchFireDelay;//[Offset: 0x130, Size: 0x4]
	float PlayEffectTime;//[Offset: 0x134, Size: 0x4]
	float PlayEffectTimeRandLimit;//[Offset: 0x138, Size: 0x4]
	bool bAutoCountdownFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]
	float AutoFireDelay;//[Offset: 0x140, Size: 0x4]
	SGThrowableProjectile* ThrowableProjectile;//[Offset: 0x148, Size: 0x8]
	float DefaultGravityScale;//[Offset: 0x150, Size: 0x4]
	SGThrowableProjectile* PrePerformanceProjectile;//[Offset: 0x158, Size: 0x8]
	SGWeapon* CachedThrowableWeapon;//[Offset: 0x198, Size: 0x8]
	void OnPlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x4f02e3fee041
	void DelayHideWeaponInv();// 0x4f01e3fee041

--------------------------------
Class: SGWeaponFireMode_WithProjectileTrajectory.SGWeaponFireMode.Object
	bool bShowProjectileTrajectory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	SGProjectileTrajectory* ProjectileTrajectory;//[Offset: 0x40, Size: 0x8]
	class SGProjectileTrajectory* ProjectileTrajectoryClass;//[Offset: 0x60, Size: 0x8]
	class SGThrowableProjectile* ProjcetileClass;//[Offset: 0x68, Size: 0x8]
	float InitSpeed;//[Offset: 0x70, Size: 0x4]
	float MaxSpeed;//[Offset: 0x74, Size: 0x4]
	float ProjectileTraceRadius;//[Offset: 0x78, Size: 0x4]
	float LeanRightOffset;//[Offset: 0x7c, Size: 0x4]
	float LeanLeftOffset;//[Offset: 0x80, Size: 0x4]
	Vector ProneFireLocationOffset;//[Offset: 0x84, Size: 0xc]
	Vector StandFireLocationOffset;//[Offset: 0x90, Size: 0xc]
	Vector CrouchFireLocationOffset;//[Offset: 0x9c, Size: 0xc]
	Rotator ProneFireRotationOffset;//[Offset: 0xa8, Size: 0xc]
	Rotator StandFireRotationOffset;//[Offset: 0xb4, Size: 0xc]
	Rotator CrouchFireRotationOffset;//[Offset: 0xc0, Size: 0xc]
	Vector ProneFireLocationOffsetThrowDown;//[Offset: 0xcc, Size: 0xc]
	Vector StandFireLocationOffsetThrowDown;//[Offset: 0xd8, Size: 0xc]
	Vector CrouchFireLocationOffsetThrowDown;//[Offset: 0xe4, Size: 0xc]
	Rotator ProneFireRotationOffsetThrowDown;//[Offset: 0xf0, Size: 0xc]
	Rotator StandFireRotationOffsetThrowDown;//[Offset: 0xfc, Size: 0xc]
	Rotator CrouchFireRotationOffsetThrowDown;//[Offset: 0x108, Size: 0xc]
	void OnWeaponOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x4f00e3fee041
	void OnStartSpectating(SGCharacter* ViewTarget);// 0x4effe3fee041
	void OnHoldGerenadaChange(enum HoldType);// 0x4efee3fee041
	void OnCurrentWeaponChange(SGInventory* OldWeapon, SGInventory* NewWeapon);// 0x4efde3fee041
	void NextTickHideProjectileTrajectory();// 0x4efce3fee041

--------------------------------
Class: SGProjectileTrajectory.Actor.Object
	enum TrajectoryDrawPolicy;//[Offset: 0x2e0, Size: 0x1]
	SplineComponent* SplineComponent;//[Offset: 0x2e8, Size: 0x8]
	StaticMesh* SplineStaticMesh;//[Offset: 0x2f0, Size: 0x8]
	MaterialInstance* SplineMaterial;//[Offset: 0x2f8, Size: 0x8]
	MaterialInstance* SplineMaterialStart;//[Offset: 0x300, Size: 0x8]
	InstancedStaticMeshComponent* InstancedStaticMesh;//[Offset: 0x308, Size: 0x8]
	StaticMesh* HISM;//[Offset: 0x310, Size: 0x8]
	MaterialInstance* HISMMat;//[Offset: 0x318, Size: 0x8]
	ProceduralMeshComponent* ProceduralMesh;//[Offset: 0x320, Size: 0x8]
	MaterialInterface* ProceduralMeshMat;//[Offset: 0x328, Size: 0x8]
	MaterialInstanceDynamic* ProceduralMeshDynamicMat;//[Offset: 0x330, Size: 0x8]
	float CylinderRadius;//[Offset: 0x338, Size: 0x4]
	int CylinderSlice;//[Offset: 0x33c, Size: 0x4]
	bool bInverseUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	float NormalGrenadeOpacity;//[Offset: 0x344, Size: 0x4]
	float OnHoldGrenadeOpacity;//[Offset: 0x348, Size: 0x4]
	float TraceRadiusForProcedrualDraw;//[Offset: 0x354, Size: 0x4]
	float FixRotateAngle;//[Offset: 0x358, Size: 0x4]
	bool bDebugPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 0x1]
	float DebugNormalLength;//[Offset: 0x360, Size: 0x4]
	CurveFloat* FarEndLineScaleCurve;//[Offset: 0x368, Size: 0x8]
	CurveFloat* NearHandLineScaleCurve;//[Offset: 0x370, Size: 0x8]
	byte NearHandScaleLineNum;//[Offset: 0x378, Size: 0x1]
	<Vector,Vector> PointLocAndVelocityMap;//[Offset: 0x380, Size: 0x50]
	Vector StartLocation;//[Offset: 0x3d0, Size: 0xc]
	Vector InitialVelocity;//[Offset: 0x3dc, Size: 0xc]
	float Gravity;//[Offset: 0x3e8, Size: 0x4]
	float PathLifeTime;//[Offset: 0x3ec, Size: 0x4]
	float TimeInterval;//[Offset: 0x3f0, Size: 0x4]
	ParticleSystem* BeamSegmentParticleSystem;//[Offset: 0x3f8, Size: 0x8]
	ParticleSystem* BeamForeSegmentParticleSystem;//[Offset: 0x400, Size: 0x8]
	int BeamForeCount;//[Offset: 0x408, Size: 0x4]
	int TranslucencySortPriorityOverride;//[Offset: 0x40c, Size: 0x4]
	ParticleSystemComponent*[] BeamSegmentParticleSystemComponentArray;//[Offset: 0x410, Size: 0x10]
	SplineMeshComponent*[] SplineMeshComponentArray;//[Offset: 0x420, Size: 0x10]
	ParticleSystemComponent* WarningParticleSystemComponent;//[Offset: 0x430, Size: 0x8]
	void VisualizeBeamSegment(int Index, BeamSegmentData BeamSegmentData);// 0x4e17e3fee041
	void SetProceduralMeshLineOpacity(float Opacity);// 0x4e16e3fee041
	BeamSegmentData GetBeamSegmentDataAtTime(float BeginTime, float EndTime);// 0x4e15e3fee041
	void CreateProceduralMesh_Complex(out <Vector,Vector> TrajectoryPointsWithVelocity);// 0x4e14e3fee041
	void CreateProceduralMesh(out <Vector,Vector> TrajectoryPointsWithVelocity);// 0x4e13e3fee041
	Vector CalcTargetLocation(out const Vector InStartLocation, out const Vector InInitialVelocity, float InTime);// 0x4e12e3fee041

--------------------------------
Class: BeamSegmentData

--------------------------------
Class: ConversionContainerInfo
	class Actor* ChildActorClass;//[Offset: 0x0, Size: 0x8]
	int StackCount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InventoryStaticsTask.Object
	int TaskId;//[Offset: 0x28, Size: 0x4]
	int loadCount;//[Offset: 0x2c, Size: 0x4]
	SGInventory* CurInventory;//[Offset: 0x30, Size: 0x8]
	uint64 rootItemGid;//[Offset: 0x38, Size: 0x8]
	SGPlayerItemInfoBase*[] ItemInfos;//[Offset: 0x40, Size: 0x10]
	bool IsHelmetDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool IsFoldButt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]

--------------------------------
Class: SGInventorySubsystem.GameInstanceSubsystem.Subsystem.Object
	<uint64,class SGInventory> BulletClassPreLoadMap;//[Offset: 0x30, Size: 0x50]
	void PostLoadMap(World* World);// 0x490de3fee041

--------------------------------
Class: SGInventorySyncToOwnerComponent.SGActorSyncToOwnerComponent.ActorComponent.Object

--------------------------------
Class: SGInventoryTextsComponent.ActorComponent.Object
	FText DisplayName;//[Offset: 0xc0, Size: 0x18]
	FText Description;//[Offset: 0xd8, Size: 0x18]
	FText SimpleDisplayName;//[Offset: 0xf0, Size: 0x18]

--------------------------------
Class: SGInventoryThermalHeadwearComponent.SGInventoryToggleableHeadwearComponent.SGInventoryTacticComponent.ActorComponent.Object
	SGThermalImagerParams ThermalImagerParams;//[Offset: 0x114, Size: 0x14]
	void OnStartSpectating(SGCharacter* Character);// 0x4913e3fee041
	void OnOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x4912e3fee041
	void OnOBSpectateStateChange(enum OBSpectateState);// 0x4911e3fee041
	void OnBagOpen();// 0x4910e3fee041
	void OnBagClose();// 0x490fe3fee041
	SGThermalImagerParams GetThermalImagerParams();// 0x490ee3fee041

--------------------------------
Class: SGInventoryTypeComponent_Adapter.SGInventoryTypeComponent.ActorComponent.Object
	SGWeaponAdapterInfo WeaponAdapterType;//[Offset: 0xf0, Size: 0x20]

--------------------------------
Class: SGInventoryTypeComponent_Ammo.SGInventoryTypeComponent.ActorComponent.Object
	class SGCaliber* CaliberType;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: SGInventoryTypeComponent_Armor.SGInventoryTypeComponent.ActorComponent.Object
	enum ArmorType;//[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: SGInventoryTypeComponent_Badge.SGInventoryTypeComponent.ActorComponent.Object
	SGInventory* AttachInventory;//[Offset: 0xf0, Size: 0x8]
	enum AttachPos;//[Offset: 0xf8, Size: 0x1]
	void UpdateBadgeOffset(Vector AttachOffset);// 0x4918e3fee041
	void UpdateAttachPosition();// 0x4917e3fee041
	void UpdateAttachOwner(SGInventory* Inv);// 0x4916e3fee041
	void SetAttachPosition(enum newPos);// 0x4915e3fee041
	void OnRep_AttachPositionChange();// 0x4914e3fee041

--------------------------------
Class: SGInventoryTypeComponent_CorpseContainer.SGInventoryTypeComponent.ActorComponent.Object
	enum DeadCharacterType;//[Offset: 0xf0, Size: 0x1]
	uint64 DeadCharacterGID;//[Offset: 0xf8, Size: 0x8]
	int DeadCharacterTeamID;//[Offset: 0x100, Size: 0x4]
	bool IsDropReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	bool bIsRewardBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 0x1]
	SGInventory*[] DeathDropWhiteList;//[Offset: 0x108, Size: 0x10]
	SGInventory* OriginVestBag;//[Offset: 0x118, Size: 0x8]
	SGInventory* OriginBag;//[Offset: 0x120, Size: 0x8]
	<SGInventory*,SGInventory*> OriginBagToReplacedBag;//[Offset: 0x128, Size: 0x50]
	<SGInventory*,SGInventory*> ReplacedInvToOriginInv;//[Offset: 0x178, Size: 0x50]
	<SGInventory*,SGInventory*> InvParentMap;//[Offset: 0x1c8, Size: 0x50]
	SGInventory*[] ForceInVestContainerInvs;//[Offset: 0x218, Size: 0x10]
	void UpdateContainerBaseByDeadCharacterType();// 0x491ee3fee041
	void SetDeadCharacterType(enum InDeadCharacterType);// 0x491de3fee041
	void SetDeadCharacterInfo(uint64 InDeadCharacterGID, int InDeadCharacterTeamID);// 0x491ce3fee041
	void OnBeUsedEvent(Actor* User);// 0x491be3fee041
	bool IsBelongToTeammate(Character* InCharater);// 0x491ae3fee041
	SGInventory* GetMoveTargetContainer(SGInventory* Inventory);// 0x4919e3fee041

--------------------------------
Class: SGInventoryTypeComponent_Item.SGInventoryTypeComponent.ActorComponent.Object
	enum ItemType;//[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: SGInventoryTypeComponent_Recovery.SGInventoryTypeComponent.ActorComponent.Object
	enum RecoveryType;//[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: SGInventoryTypeComponent_Weapon.SGInventoryTypeComponent.ActorComponent.Object

--------------------------------
Class: SGInventoryWeightComponent.ActorComponent.Object
	float Weight;//[Offset: 0xc0, Size: 0x4]
	float JumpZVelocityScale;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: SGLocalPlayer.LocalPlayer.Player.Object

--------------------------------
Class: SGMathUtils.Object
	Vector4 V4InterpTo(out const Vector4 Current, out const Vector4 Target, float DeltaTime, float InterpSpeed);// 0x4932e3fee041
	Vector4 V4InterpConstantTo(out const Vector4 Current, out const Vector4 Target, float DeltaTime, float InterpSpeed);// 0x4931e3fee041
	void GetSafeNormal2D(out Vector2D Vector);// 0x4930e3fee041
	void GetSafeNormal(out Vector Vector);// 0x492fe3fee041
	Quat FindBetween(out const Vector Vector1, out const Vector Vector2);// 0x492ee3fee041
	Vector ClampVectorByAxises(out const Vector Vector, out const Vector Min, out const Vector Max);// 0x492de3fee041
	float CalculateAngle(out const Vector VectorA, out const Vector VectorB);// 0x492ce3fee041

--------------------------------
Class: SGMeleeWeaponSoundComponent.SGWeaponSoundComponent.ActorComponent.Object
	AkAudioBank* SoundBank;//[Offset: 0xe8, Size: 0x8]
	float UnloadBankDelayTime;//[Offset: 0xf0, Size: 0x4]

--------------------------------
Class: SGMeshLightSwitherComponent.SGShowSwithBaseComponent.Object
	Actor*[] MeshActors;//[Offset: 0x40, Size: 0x10]
	bool HasCreateDynamicMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	LinearColor ShinnColor;//[Offset: 0x54, Size: 0x10]
	void SwitchLight(MeshComponent* MeshComponent, bool bSwithcer);// 0x4934e3fee041
	void CreateDynamicMaterial(MeshComponent* MeshComponent);// 0x4933e3fee041

--------------------------------
Class: SGMeshSwitherComponent.SGShowSwithBaseComponent.Object
	Actor*[] MeshActors;//[Offset: 0x40, Size: 0x10]
	bool bKeepCollisoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bPreviewState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bCacheState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool bShowState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]

--------------------------------
Class: SGMessageEvents.SGGameInstanceComponent.Object
	delegate TakeHitMessage;//[Offset: 0x30, Size: 0x10]
	delegate OnDropOfBlood;//[Offset: 0x40, Size: 0x10]
	delegate DeathMessage;//[Offset: 0x50, Size: 0x10]
	delegate MatchStateChanged;//[Offset: 0x60, Size: 0x10]
	delegate CurrentWeaponChanged;//[Offset: 0x70, Size: 0x10]
	delegate CurrentWeaponHoldOpenChanged;//[Offset: 0x80, Size: 0x10]
	delegate CurrentThrowWeaponChanged;//[Offset: 0x90, Size: 0x10]
	delegate NewBagTipMessage;//[Offset: 0xa0, Size: 0x10]
	delegate InventoryAdded;//[Offset: 0xb0, Size: 0x10]
	delegate InventoryRemoved;//[Offset: 0xc0, Size: 0x10]
	delegate WeaponInnerEvent;//[Offset: 0xd0, Size: 0x10]
	delegate WidgetInputAction;//[Offset: 0xe0, Size: 0x10]
	delegate InputTouchEvent;//[Offset: 0xf0, Size: 0x10]
	delegate OnAcceptRotationInput;//[Offset: 0x100, Size: 0x10]
	delegate ThrowWeaponChangedEvent;//[Offset: 0x110, Size: 0x10]
	delegate ThrowConnectionTimeOutEvent;//[Offset: 0x120, Size: 0x10]
	delegate InvDurabilityCost;//[Offset: 0x130, Size: 0x10]
	delegate OnGenerateSound;//[Offset: 0x140, Size: 0x10]
	delegate OnGenerateSoundPreview;//[Offset: 0x150, Size: 0x10]
	delegate OnGenerateExplosionSound;//[Offset: 0x160, Size: 0x10]
	delegate OnSelfGenerateSound;//[Offset: 0x170, Size: 0x10]
	delegate OnSelfToggleBreathSound;//[Offset: 0x180, Size: 0x10]
	delegate InventoryMoved;//[Offset: 0x190, Size: 0x10]
	delegate OnClientInventoryChanged;//[Offset: 0x1a0, Size: 0x10]
	delegate OnQuickUseItemScrollChanged;//[Offset: 0x1b0, Size: 0x10]
	delegate OnClientThrowWeaponGridChange;//[Offset: 0x1c0, Size: 0x10]
	delegate OnClientAddVestBag;//[Offset: 0x1d0, Size: 0x10]
	delegate OnGetPlayerInventoryMoveResult;//[Offset: 0x1e0, Size: 0x10]
	delegate OnChangeCurrentInteractingTypeResult;//[Offset: 0x1f0, Size: 0x10]
	delegate OnRepInspectedItemList;//[Offset: 0x200, Size: 0x10]
	delegate RepForcePositionUpdate;//[Offset: 0x210, Size: 0x10]
	delegate OnRepPlayerDetectedInvPosList;//[Offset: 0x220, Size: 0x10]
	delegate OnCharacterInspecting;//[Offset: 0x230, Size: 0x10]
	delegate OnFocusLost;//[Offset: 0x240, Size: 0x10]
	delegate ChangeSoundVisualPlan;//[Offset: 0x250, Size: 0x10]
	delegate RequestChangeBagTopMenu;//[Offset: 0x260, Size: 0x10]
	delegate RequestShowQuestTraceInfoInMap;//[Offset: 0x270, Size: 0x10]
	delegate BulletPassBy;//[Offset: 0x280, Size: 0x10]
	delegate WeaponLoadComplete;//[Offset: 0x290, Size: 0x10]
	delegate AsyncLoadImageComplete;//[Offset: 0x2a0, Size: 0x10]
	delegate ThrowWeaponBeSearched;//[Offset: 0x2b0, Size: 0x10]
	delegate QuickUseInvBeSearched;//[Offset: 0x2c0, Size: 0x10]
	delegate OnNetworkTryReconnect;//[Offset: 0x2d0, Size: 0x10]
	delegate OnNetworkReconnect;//[Offset: 0x2e0, Size: 0x10]
	delegate OnNotifyInteractEvent;//[Offset: 0x2f0, Size: 0x10]
	delegate OnGameHUDShowMessageByID;//[Offset: 0x300, Size: 0x10]
	delegate OnGameHUDClearMessageByID;//[Offset: 0x310, Size: 0x10]
	delegate GamePadMessageByID;//[Offset: 0x320, Size: 0x10]
	delegate OnChangeGamePadVisibility;//[Offset: 0x330, Size: 0x10]
	delegate OnGamePadEffectVisibility;//[Offset: 0x340, Size: 0x10]
	delegate OnGameHUDClearAllMessage;//[Offset: 0x350, Size: 0x10]
	delegate OnWeaponLoaded;//[Offset: 0x360, Size: 0x10]
	delegate UseActorFailedEvent;//[Offset: 0x370, Size: 0x10]
	delegate UseActorSuccess;//[Offset: 0x380, Size: 0x10]
	delegate OnBagScrollEnabled;//[Offset: 0x390, Size: 0x10]
	delegate OnCorpseBagScrollEnabled;//[Offset: 0x3a0, Size: 0x10]
	delegate OnPinchStarted;//[Offset: 0x3b0, Size: 0x10]
	delegate OnPinchUpdate;//[Offset: 0x3c0, Size: 0x10]
	delegate OnShowTutorialMask;//[Offset: 0x3d0, Size: 0x10]
	delegate OnShowMovementRun;//[Offset: 0x3e0, Size: 0x10]
	delegate OnAddQuestReport;//[Offset: 0x3f0, Size: 0x10]
	delegate OnQuestReportVisibleChanged;//[Offset: 0x400, Size: 0x10]
	delegate OnBroadcastAchievement;//[Offset: 0x410, Size: 0x10]
	delegate EnterDBNOStatusMessage;//[Offset: 0x420, Size: 0x10]
	delegate ExitDBNOStatusMessage;//[Offset: 0x430, Size: 0x10]
	delegate OnShowLifeStateInfoPanel;//[Offset: 0x440, Size: 0x10]
	delegate OnBigMapEffectShow;//[Offset: 0x450, Size: 0x10]
	delegate OnBigMapLoadAssestCompelete;//[Offset: 0x460, Size: 0x10]
	delegate OnPadSettingBtnShow;//[Offset: 0x470, Size: 0x10]
	delegate OnFlashGrenade;//[Offset: 0x480, Size: 0x10]
	delegate OnInventoryFlash;//[Offset: 0x490, Size: 0x10]
	delegate OnOffensiveGrenade;//[Offset: 0x4a0, Size: 0x10]
	delegate OnShowGetInventoryCloseBtn;//[Offset: 0x4b0, Size: 0x10]
	delegate OnPadSettingResetLayout;//[Offset: 0x4c0, Size: 0x10]
	delegate OnHelmetEquiped;//[Offset: 0x4d0, Size: 0x10]
	delegate OnHelmetUnEquiped;//[Offset: 0x4e0, Size: 0x10]
	delegate OnVestEquiped;//[Offset: 0x4f0, Size: 0x10]
	delegate OnVestUnEquiped;//[Offset: 0x500, Size: 0x10]
	delegate OnHeadSetEquiped;//[Offset: 0x510, Size: 0x10]
	delegate OnHeadSetUnEquiped;//[Offset: 0x520, Size: 0x10]
	delegate OnArmorAdapterEquiped;//[Offset: 0x530, Size: 0x10]
	delegate OnArmorAdapterUnEquiped;//[Offset: 0x540, Size: 0x10]
	delegate OnFaceCoverEquiped;//[Offset: 0x550, Size: 0x10]
	delegate OnFaceCoverUnEquiped;//[Offset: 0x560, Size: 0x10]
	delegate OnToggleThermalHeadwear;//[Offset: 0x570, Size: 0x10]
	delegate OnBigMapEffect;//[Offset: 0x580, Size: 0x10]
	delegate OnBigMapStateChange;//[Offset: 0x590, Size: 0x10]
	delegate Crouch;//[Offset: 0x5a0, Size: 0x10]
	delegate SilentWalk;//[Offset: 0x5b0, Size: 0x10]
	delegate Sprint;//[Offset: 0x5c0, Size: 0x10]
	delegate LeanTypeChanged;//[Offset: 0x5d0, Size: 0x10]
	delegate IsZoom;//[Offset: 0x5e0, Size: 0x10]
	delegate ToggleScopeMagnitudeUI;//[Offset: 0x5f0, Size: 0x10]
	delegate OnHoldBreathChanged;//[Offset: 0x600, Size: 0x10]
	delegate OnThrowWeaponFire;//[Offset: 0x610, Size: 0x10]
	delegate OnThrowWeaponEnd;//[Offset: 0x620, Size: 0x10]
	delegate OnThrowWeaponFireCanBeHold;//[Offset: 0x630, Size: 0x10]
	delegate OnProneChanged;//[Offset: 0x640, Size: 0x10]
	delegate TeammateCurseChanged;//[Offset: 0x650, Size: 0x10]
	delegate BigMapRefreshAllModule;//[Offset: 0x660, Size: 0x10]
	delegate BigMapLowRefreshAllModule;//[Offset: 0x670, Size: 0x10]
	delegate BigMapEnableModule;//[Offset: 0x680, Size: 0x10]
	delegate GameTipsEnableRefresh;//[Offset: 0x690, Size: 0x10]
	delegate BigmapDetailBoardShow;//[Offset: 0x6a0, Size: 0x10]
	delegate GraphicQualityChanged;//[Offset: 0x6b0, Size: 0x10]
	delegate OnTeammatesCountsChanged;//[Offset: 0x6c0, Size: 0x10]
	delegate NotifyExplosion;//[Offset: 0x6d0, Size: 0x10]
	delegate EnableAllGamePadView;//[Offset: 0x6e0, Size: 0x10]
	delegate OnTimeLimitedQuestCountDown;//[Offset: 0x6f0, Size: 0x10]
	delegate OnMissionTimeLimitedCountDown;//[Offset: 0x700, Size: 0x10]
	delegate OnWeaponActionAbilityActive;//[Offset: 0x710, Size: 0x10]
	delegate OnCharacterDieInClient;//[Offset: 0x720, Size: 0x10]
	delegate OnCharacterEnterSmoke;//[Offset: 0x730, Size: 0x10]
	delegate EnduranceChangedEvent;//[Offset: 0x740, Size: 0x10]
	delegate FoodChangedEvent;//[Offset: 0x750, Size: 0x10]
	delegate MoistureChangedEvent;//[Offset: 0x760, Size: 0x10]
	delegate TearGasDurationSetEvent;//[Offset: 0x770, Size: 0x10]
	delegate TearGasStateChangedEvent;//[Offset: 0x780, Size: 0x10]
	delegate OnGameplayTagsChangedEvent;//[Offset: 0x790, Size: 0x10]
	delegate OnGameplayEffectAppliedEvent;//[Offset: 0x7a0, Size: 0x10]
	delegate OnAnyGameplayEffectRemovedEvent;//[Offset: 0x7b0, Size: 0x10]
	delegate OnGameplayEffectAppliedDataEvent;//[Offset: 0x7c0, Size: 0x10]
	delegate OnMagazineChanged;//[Offset: 0x7d0, Size: 0x10]
	delegate OnTraceQuestChange;//[Offset: 0x7e0, Size: 0x10]
	delegate OnContainerTopMenuChangeEvent;//[Offset: 0x7f0, Size: 0x10]
	delegate OnReceiveUseActorFailureReason;//[Offset: 0x800, Size: 0x10]
	delegate OnReplayRecordStarted;//[Offset: 0x810, Size: 0x10]
	delegate OnReplayPlaybackStarted;//[Offset: 0x820, Size: 0x10]
	delegate OnReplayStartPlaybackFailed;//[Offset: 0x830, Size: 0x10]
	delegate OnReplayFinishPlayback;//[Offset: 0x840, Size: 0x10]
	delegate OnChangeGamePadHighEffect;//[Offset: 0x850, Size: 0x10]
	delegate TutorialMaskShow;//[Offset: 0x860, Size: 0x10]
	delegate TutorialSetSprintEnable;//[Offset: 0x870, Size: 0x10]
	delegate SpawnLootContainer;//[Offset: 0x880, Size: 0x10]
	delegate SpawnLootInventoryItem;//[Offset: 0x890, Size: 0x10]
	delegate OnGameSettingClicked;//[Offset: 0x8a0, Size: 0x10]
	delegate OnBackToGame;//[Offset: 0x8b0, Size: 0x10]
	delegate OnOpenBagClicked;//[Offset: 0x8c0, Size: 0x10]
	delegate OnOpenMapClicked;//[Offset: 0x8d0, Size: 0x10]
	delegate OnQuickUseItem;//[Offset: 0x8e0, Size: 0x10]
	delegate OnChangeClip;//[Offset: 0x8f0, Size: 0x10]
	delegate OnCheckMagazine;//[Offset: 0x900, Size: 0x10]
	delegate OnLootPressed;//[Offset: 0x910, Size: 0x10]
	delegate OnLootReleased;//[Offset: 0x920, Size: 0x10]
	delegate OnTeaminfoRepFinish;//[Offset: 0x930, Size: 0x10]
	delegate OnEnterAreaVolume;//[Offset: 0x940, Size: 0x10]
	delegate OnLeavingAreaVolume;//[Offset: 0x950, Size: 0x10]
	delegate OnPreEnterReportAreaVolume;//[Offset: 0x960, Size: 0x10]
	delegate OnPreLeavingReportAreaVolume;//[Offset: 0x970, Size: 0x10]
	delegate IllegalSight;//[Offset: 0x980, Size: 0x10]
	delegate OnSceneEventTrigger;//[Offset: 0x990, Size: 0x10]
	delegate OnSceneEventExpired;//[Offset: 0x9a0, Size: 0x10]
	delegate OnSceneEventCompleted;//[Offset: 0x9b0, Size: 0x10]
	delegate OnSceneEventRemoved;//[Offset: 0x9c0, Size: 0x10]
	delegate OnThrowableProjectileSpawn;//[Offset: 0x9d0, Size: 0x10]
	delegate OnThrowableProjectileExplode;//[Offset: 0x9e0, Size: 0x10]
	delegate OnThrowableProjectileDestory;//[Offset: 0x9f0, Size: 0x10]
	delegate OnCharacterEffectAdded;//[Offset: 0xa00, Size: 0x10]
	delegate OnKillCamFullyLoaded;//[Offset: 0xa10, Size: 0x10]
	delegate ShowTextSubTitle;//[Offset: 0xa20, Size: 0x10]
	delegate ShowAudioSubTitle;//[Offset: 0xa30, Size: 0x10]
	delegate AddSystemChatMessage;//[Offset: 0xa40, Size: 0x10]
	delegate EscapeStateChange;//[Offset: 0xa50, Size: 0x10]
	delegate EscapeBeginTimeChange;//[Offset: 0xa60, Size: 0x10]
	delegate ChaseActivityTargetsUpdate;//[Offset: 0xa70, Size: 0x10]
	delegate ChaseActivityStateChange;//[Offset: 0xa80, Size: 0x10]
	delegate ActivityInventoryStateChange;//[Offset: 0xa90, Size: 0x10]
	delegate TraceableActorInfoUpdate;//[Offset: 0xaa0, Size: 0x10]
	delegate OnUIModeChanged;//[Offset: 0xab0, Size: 0x10]
	delegate OnSetBagSelectPanelLocked;//[Offset: 0xac0, Size: 0x10]
	delegate OnQuestEffectGiveItem;//[Offset: 0xad0, Size: 0x10]
	delegate OnMissionActionGiveItem;//[Offset: 0xae0, Size: 0x10]
	delegate ChangeAdviseItemProity;//[Offset: 0xaf0, Size: 0x10]
	delegate OnBagOpenEvent;//[Offset: 0xb00, Size: 0x10]
	delegate OnBagCloseEvent;//[Offset: 0xb10, Size: 0x10]
	delegate OnRecordParamTransmit;//[Offset: 0xb20, Size: 0x10]
	delegate OnChaseActivityInventoryDestroyed;//[Offset: 0xb30, Size: 0x10]
	delegate OnMarkBuffChanged;//[Offset: 0xb40, Size: 0x10]
	delegate OnBeMarkBuffChanged;//[Offset: 0xb50, Size: 0x10]
	delegate OnWeaponSupportOnStateChange;//[Offset: 0xb60, Size: 0x10]
	delegate OnClientTakeDamageObjective;//[Offset: 0xb70, Size: 0x10]
	delegate OnBigMapTeamSign;//[Offset: 0xb80, Size: 0x10]
	delegate OnBigMapClearTeamSign;//[Offset: 0xb90, Size: 0x10]
	delegate PlayHeadwearUIAnimation;//[Offset: 0xba0, Size: 0x10]
	delegate HeadwearScreenEffectChanged;//[Offset: 0xbb0, Size: 0x10]
	delegate OnSetScreenEffectPaddingByCmd;//[Offset: 0xbc0, Size: 0x10]
	delegate ShowGameTimeCountDown;//[Offset: 0xbd0, Size: 0x10]
	delegate VolumeActorChanged;//[Offset: 0xbe0, Size: 0x10]
	delegate DoorGateOn;//[Offset: 0xbf0, Size: 0x10]
	delegate OnInventoryAttractAI;//[Offset: 0xc00, Size: 0x10]
	delegate OnAIEscaped;//[Offset: 0xc10, Size: 0x10]
	delegate OnShowQuestReport;//[Offset: 0xc20, Size: 0x10]
	delegate OnMainWeaponListChanged;//[Offset: 0xc30, Size: 0x10]
	delegate OnOutOfAmmo;//[Offset: 0xc40, Size: 0x10]
	delegate OnHasAmmo;//[Offset: 0xc50, Size: 0x10]
	delegate OnAmmmoCountChanged;//[Offset: 0xc60, Size: 0x10]
	delegate OnCurrentShootingModeChanged;//[Offset: 0xc70, Size: 0x10]
	delegate OnInputTouchEnded;//[Offset: 0xc80, Size: 0x10]
	delegate OnAimedDoorChanged;//[Offset: 0xc90, Size: 0x10]
	delegate OnAimedContainerChanged;//[Offset: 0xca0, Size: 0x10]
	delegate OnCanPickUpInventoriesChanged;//[Offset: 0xcb0, Size: 0x10]
	delegate OnWeaponFoldStock;//[Offset: 0xcc0, Size: 0x10]
	delegate OnWeaponFoldStateChange;//[Offset: 0xcd0, Size: 0x10]
	delegate OnAddToTeamEvent;//[Offset: 0xce0, Size: 0x10]
	delegate OnAddToTeamSpecialmemberEvent;//[Offset: 0xcf0, Size: 0x10]
	delegate OnRemoveToTeamEvent;//[Offset: 0xd00, Size: 0x10]
	delegate OnPlayInventoryAnimation;//[Offset: 0xd10, Size: 0x10]
	delegate OnPlayerIdentityTypeChange;//[Offset: 0xd20, Size: 0x10]
	delegate OnPlayerChatVoiceIDsChange;//[Offset: 0xd30, Size: 0x10]
	delegate OnPlayerGestureVoiceIDsChange;//[Offset: 0xd40, Size: 0x10]
	delegate OnGoToTimeProcessed;//[Offset: 0xd50, Size: 0x10]
	delegate OnTeamEscapeStateChange;//[Offset: 0xd60, Size: 0x10]
	delegate OnX5Spawn;//[Offset: 0xd70, Size: 0x10]
	delegate OnX5Deactive;//[Offset: 0xd80, Size: 0x10]
	delegate OnLockedByCharacterChangedEvent;//[Offset: 0xd90, Size: 0x10]
	delegate OnInspectItemClick;//[Offset: 0xda0, Size: 0x10]
	delegate OnClientInvDestroy;//[Offset: 0xdb0, Size: 0x10]
	delegate OnGameHudAddToast;//[Offset: 0xdc0, Size: 0x10]
	delegate OnSwitchInputMode;//[Offset: 0xdd0, Size: 0x10]
	delegate CharacterEnterTrainPopArea;//[Offset: 0xde0, Size: 0x10]
	delegate OnFootStepMakerTriggerSoundIndicator;//[Offset: 0xdf0, Size: 0x10]
	delegate CharacterEnterSceneGasArea;//[Offset: 0xe00, Size: 0x10]
	delegate GasGateToggled;//[Offset: 0xe10, Size: 0x10]
	delegate OnShowMergedAvatar;//[Offset: 0xe20, Size: 0x10]
	delegate PickItemClick;//[Offset: 0xe30, Size: 0x10]
	delegate OnDragEnabled;//[Offset: 0xe40, Size: 0x10]
	delegate OnEnableItemToolTip;//[Offset: 0xe50, Size: 0x10]
	delegate OnLockMoveForward;//[Offset: 0xe60, Size: 0x10]
	delegate OnRecordInspectionLootPointIDChange;//[Offset: 0xe70, Size: 0x10]
	delegate OnExploreInspectionLootPointIDChange;//[Offset: 0xe80, Size: 0x10]
	delegate OnEnableFullScreenHudCloseEvent;//[Offset: 0xe90, Size: 0x10]
	delegate TestEventToLua;//[Offset: 0xea0, Size: 0x10]
	delegate ReportClientIP;//[Offset: 0xeb0, Size: 0x10]
	delegate SetLadderClimbingBtnVisibility;//[Offset: 0xec0, Size: 0x10]
	delegate SceneInteractActorTriggerTlog;//[Offset: 0xed0, Size: 0x10]
	SGMessageEvents* GetSGMessageEvents(Object* InWorldContextObject);// 0x4935e3fee041

--------------------------------
Class: SGMessageStatics.BlueprintFunctionLibrary.Object
	void SetIsPlayingVoice(bool bPlaying);// 0x497ae3fee041
	bool GetIsPlayingVoice();// 0x4979e3fee041
	void BroadcastUseActorFailed(Actor* User, Actor* Actor, enum FailureReason);// 0x4978e3fee041
	void BroadcastTutorialMaskShow(Object* WorldContextObject, bool State);// 0x4977e3fee041
	void BroadcastTraceableActorInfoUpdate(Object* WorldContextObject, int Handle, float LastUpdateServerTime);// 0x4976e3fee041
	void BroadcastShowGameTimeCountDown(Object* WorldContextObject, bool bShow);// 0x4975e3fee041
	void BroadcastShowBigMapEffect(Object* WorldContextObject, int Index, Vector2D EffectPos, bool bShow);// 0x4974e3fee041
	void BroadcastOnUIModeChanged(Object* WorldContextObject, enum NewUIMode, enum OldUIMode);// 0x4973e3fee041
	void BroadcastOnTeammatesCountsChanged(Object* WorldContextObject, int TeamIndex, int Count);// 0x4972e3fee041
	void BroadcastOnTeamInfoRepFinish(Object* WorldContextObject);// 0x4971e3fee041
	void BroadcastOnShowVoiceSubTile(Object* WorldContextObject, int Messageid, Actor* Speaker);// 0x4970e3fee041
	void BroadcastOnShowTutorialHUDMask(Object* WorldContextObject, int Maskid, bool Showed, bool bShowMaskVisual);// 0x496fe3fee041
	void BroadcastOnShowTextSubTile(Object* WorldContextObject, int Messageid);// 0x496ee3fee041
	void BroadcastOnShowQuestReport(Object* WorldContextObject, bool bShow);// 0x496de3fee041
	void BroadcastOnShowMovementRunEnabled(Object* WorldContextObject, bool bEnable);// 0x496ce3fee041
	void BroadCastOnShowLifeStateInfoPanel(Object* WorldContextObject, bool bEnable);// 0x496be3fee041
	void BroadcastOnShowGetInventoryCloseBtn(Object* WorldContextObject, bool bEnable);// 0x496ae3fee041
	void BroadcastOnSetBagSelectPanelLocked(Object* WorldContextObject, bool bLocked);// 0x4969e3fee041
	void BroadcastOnSceneInteractActorTriggerTlog(Object* WorldContextObject, int ObjectId, enum ObjectType, int EventType, int AreaID, int Triggertype, int TriggerTime);// 0x4968e3fee041
	void BroadcastOnQuestEffectGiveItem(Object* WorldContextObject, Character* Character, int ItemID, int Count);// 0x4967e3fee041
	void BroadcastOnPadSettingBtnShow(Object* WorldContextObject, bool bShow);// 0x4966e3fee041
	void BroadcastOnPadResetLayout(Object* WorldContextObject, bool bReset);// 0x4965e3fee041
	void BroadcastOnMissionActionGiveItem(Object* WorldContextObject, Character* Character, int ItemID, int Count);// 0x4964e3fee041
	void BroadcastOnInventoryAttractAI(Object* WorldContextObject, Actor* Actor, Character* Character);// 0x4963e3fee041
	void BroadcastOnGasGateToggled(Object* WorldContextObject, Character* Character, bool bOpen, Actor* GateVolume);// 0x4962e3fee041
	void BroadcastOnGamePadHighEffect(Object* WorldContextObject, int PadID, int WidgetType, Vector2D Offset, bool bEnable);// 0x4961e3fee041
	void BroadcastOnGamePadEffectVisibility(Object* WorldContextObject, int Messageid, bool bVisible);// 0x4960e3fee041
	void BroadcastOnGameHUDShowMessageByID(Object* WorldContextObject, int Messageid, FString ShowText);// 0x495fe3fee041
	void BroadcastOnGameHUDClearMessageByID(Object* WorldContextObject, int Messageid, bool bNotClearQueue);// 0x495ee3fee041
	void BroadcastOnGameHudAddToast(Object* WorldContextObject, FString ToastKey);// 0x495de3fee041
	void BroadcastOnEnableItemToolTip(Object* WorldContextObject, bool bEnable);// 0x495ce3fee041
	void BroadcastOnEnableFullScreenHudClose(Object* WorldContextObject, bool bEnable);// 0x495be3fee041
	void BroadcastOnEnableAllGamePad(Object* WorldContextObject, bool bVisible);// 0x495ae3fee041
	void BroadcastOnDragEnbled(Object* WorldContextObject, bool bEnable);// 0x4959e3fee041
	void BroadcastOnCorpseBagScrollEnabled(Object* WorldContextObject, bool bEnable);// 0x4958e3fee041
	void BroadcastOnContainerTopManuChange(Object* WorldContextObject, int TopMenuType, bool bEnable);// 0x4957e3fee041
	void BroadcastOnClientTakeDamageObjective(Object* WorldContextObject, SGCharacter* DamageTaker, SGCharacter* DamageCauser);// 0x4956e3fee041
	void BroadcastOnClickPickItemButton(Object* WorldContextObject);// 0x4955e3fee041
	void BroadcastOnClickInspectButton(Object* WorldContextObject);// 0x4954e3fee041
	void BroadcastOnCharacterEnterTrainPopArea(Object* WorldContextObject, Character* Character, bool bEnter);// 0x4953e3fee041
	void BroadcastOnCharacterEnterSceneGasArea(Object* WorldContextObject, Character* Character, bool bEnter);// 0x4952e3fee041
	void BroadcastOnCharacterEffectAdded(Object* WorldContextObject, FString EffectName);// 0x4951e3fee041
	void BroadcastOnChangeGamePadVisibility(Object* WorldContextObject, int Messageid, bool bVisible);// 0x4950e3fee041
	void BroadcastOnChangeAdviseItemProity(Object* WorldContextObject, int Type);// 0x494fe3fee041
	void BroadcastOnBigMapStateChange(Object* WorldContextObject, bool State);// 0x494ee3fee041
	void BroadcastOnBigMapEffect(Object* WorldContextObject, int Messageid, bool bVisible);// 0x494de3fee041
	void BroadcastOnBagScrollEnabled(Object* WorldContextObject, bool bEnable);// 0x494ce3fee041
	void BroadcastOnAIEscaped(Object* WorldContextObject, Character* AICharacter, Actor* EscapeVolume);// 0x494be3fee041
	void BroadcastOnAddQuestReport(Object* WorldContextObject, int ReportID);// 0x494ae3fee041
	void BroadcastNewBagTipsMessage(PlayerController* PC, enum TipsType);// 0x4949e3fee041
	void BroadcastLatentShowVoiceSubTile(Object* WorldContextObject, int Messageid, Actor* Speaker, LatentActionInfo LatentInfo);// 0x4948e3fee041
	void BroadcastGraphicSettingChanged(Object* WorldContextObject, int GraphicQualityLevel);// 0x4947e3fee041
	void BroadcastGameTipsEnableRefresh(Object* WorldContextObject);// 0x4946e3fee041
	void BroadcastGamePadMessageByID(Object* WorldContextObject, int Messageid);// 0x4945e3fee041
	void BroadcastGameHUDMessageIDByArray(Object* WorldContextObject, int64[] MessageArray);// 0x4944e3fee041
	void BroadcastDeathMessageToAll(World* World, PlayerState* KillerPlayerState, PlayerState* VictimPlayerState, Vector VictimLocation, class DamageType DamageTypeClass);// 0x4943e3fee041
	void BroadcastDeathMessage(PlayerController* PC, PlayerState* KillerPlayerState, PlayerState* VictimPlayerState, Vector VictimLocation, class DamageType DamageTypeClass);// 0x4942e3fee041
	void BroadcastCurrentWeaponChanged(PlayerController* PC, SGInventory* OldInventory, SGInventory* NewInventory);// 0x4941e3fee041
	void BroadcastClearGameHUDMessageIDByArray(Object* WorldContextObject, int64[] MessageArray);// 0x4940e3fee041
	void BroadcastClearAllGameHUDMessage(Object* WorldContextObject);// 0x493fe3fee041
	void BroadcastChaseActivityTargetsUpdate(Object* WorldContextObject, SGPlayerStateChaseActivityInfoComponent* ChaseActivityInfoComponent, float Interval);// 0x493ee3fee041
	void BroadcastChaseActivityStateChange(Object* WorldContextObject, enum CurActivityState);// 0x493de3fee041
	void BroadcastBigMapRefreshAllModule(Object* WorldContextObject);// 0x493ce3fee041
	void BroadcastBigMapLowRefreshAllModule(Object* WorldContextObject);// 0x493be3fee041
	void BroadcastBigMapEnableModule(Object* WorldContextObject, int ModuleId, bool bEnable);// 0x493ae3fee041
	void BroadcastBigMapDetailBoardShow(Object* WorldContextObject, int ItemType, int ItenID, bool bEnable, int TaskId);// 0x4939e3fee041
	void BroadcastAddSystemChatMessage(Object* WorldContextObject, FText Message);// 0x4938e3fee041
	void BroadcastActivityInventoryStateChange(Object* WorldContextObject, enum CurActivityInventoryState);// 0x4937e3fee041
	void AddQuestReport(Object* WorldContextObject, int[] ReportIDList);// 0x4936e3fee041

--------------------------------
Class: SGPlayerStateChaseActivityInfoComponent.ActorComponent.Object
	float TraceableActorUpdateServerTime;//[Offset: 0xc0, Size: 0x4]
	bool bIsActivityFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	ChaseActivityAvatarInfo ChaseActivityAvatarInfo;//[Offset: 0xc8, Size: 0x10]
	ChaseActivityStateChangeInfo ChaseActivityStateChangeInfo;//[Offset: 0xd8, Size: 0x8]
	ActivityReportConfigArray ChaseActivityAvatarInfoReport;//[Offset: 0xe0, Size: 0x10]
	<ChaseActivityStateChangeInfo,ActivityReportConfigArray> ChaseActivityReportConfig;//[Offset: 0xf0, Size: 0x50]
	OwnedActivityInventoryInfo OwnedActivityInventoryInfo;//[Offset: 0x140, Size: 0x28]
	SGInventory*[] TeammateOwnedActivityInventories;//[Offset: 0x168, Size: 0x10]
	int[] TeammateOwnedActivityInventoryHandles;//[Offset: 0x178, Size: 0x10]
	ActivityInventoryStateChangeInfo ActivityInventoryStateChangeInfo;//[Offset: 0x188, Size: 0x2]
	<enum,ActivityReportConfigArray> ActivityInventoryStateReportConfig;//[Offset: 0x190, Size: 0x50]
	<enum,ActivityReportConfigArray> ActivityMessageConfigs;//[Offset: 0x1e0, Size: 0x50]
	FText MapScanIntervalText;//[Offset: 0x240, Size: 0x18]
	int[] SpectatingGameHUDClearMessageIDs;//[Offset: 0x258, Size: 0x10]
	int[] StartSpectatingIgnoreMessageIDs;//[Offset: 0x268, Size: 0x10]
	int[] AlreadyReportCheckTimeConfigs;//[Offset: 0x278, Size: 0x10]
	void OnRep_TraceableActorUpdateServerTime();// 0x4d0fe3fee041
	void OnRep_ChaseActivityStateChangeInfo();// 0x4d0ee3fee041
	void OnRep_ChaseActivityAvatarInfo();// 0x4d0de3fee041
	void OnRep_ActivityInventoryStateChangeInfo();// 0x4d0ce3fee041
	int GetOwnedActivityInventoryHandlesNum();// 0x4d0be3fee041
	ChaseActivityAvatarInfo GetChaseActivityAvatarInfo();// 0x4d0ae3fee041

--------------------------------
Class: ActivityReportConfigArray
	ActivityReportConfig[] ReportInfos;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ActivityReportConfig
	enum ReportType;//[Offset: 0x0, Size: 0x1]
	enum ReportCondition;//[Offset: 0x1, Size: 0x1]
	int OptionalMessageID;//[Offset: 0x4, Size: 0x4]
	FText OptionalText;//[Offset: 0x8, Size: 0x18]
	int CheckServerTimeIndex;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: OwnedActivityInventoryInfo
	SGInventory*[] Inventories;//[Offset: 0x0, Size: 0x10]
	int[] InventoryHandles;//[Offset: 0x10, Size: 0x10]
	int LastReportInventoryCount;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ActivityInventoryStateChangeInfo
	enum PreviousState;//[Offset: 0x0, Size: 0x1]
	enum CurrentState;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: MFMission.Object
	MFMissionFlowNode* MissionFlowNode;//[Offset: 0x30, Size: 0x8]
	MFMissionObjective* Objective;//[Offset: 0x38, Size: 0x8]
	<MFMissionFlowComponent*,enum> InstigatorStatus;//[Offset: 0x40, Size: 0x50]
	void UnRegisterInstigator(MFMissionFlowComponent* InInstigator);// 0x498ee3fee041
	void ShowLog(FString LogStr, bool bImportant);// 0x498de3fee041
	void RegisterInstigator(MFMissionFlowComponent* InInstigator);// 0x498ce3fee041
	void OnMissionStatusChanged(MFMissionFlowComponent* InInstigator, enum NewStatus, enum OldStatus);// 0x498be3fee041
	bool IsNeedReport();// 0x498ae3fee041
	void InitializeMission(MFMissionFlowNode* InNode);// 0x4989e3fee041
	MFMissionObjective* GetObjective();// 0x4988e3fee041
	FString GetMissionName();// 0x4987e3fee041
	int GetMissionIndex();// 0x4986e3fee041
	MFMissionFlowNode* GetMissionFlowNode();// 0x4985e3fee041
	FString GetMissionFlowName();// 0x4984e3fee041
	int GetMissionFlowIndex();// 0x4983e3fee041
	enum GetMissionFlowDataType();// 0x4982e3fee041
	MFMissionFlow* GetMissionFlow();// 0x4981e3fee041
	<MFMissionFlowComponent*,enum> GetInstigatorStatus();// 0x4980e3fee041
	enum GetHelpType();// 0x497fe3fee041
	enum GetDataType();// 0x497ee3fee041
	void DestroyMission();// 0x497de3fee041
	void DeactivateMission(MFMissionFlowComponent* InInstigator, out const enum InStatus);// 0x497ce3fee041
	void ActivateMission(MFMissionFlowComponent* InInstigator);// 0x497be3fee041

--------------------------------
Class: MFMissionFlowComponent.ActorComponent.Object
	enum InstigatorType;//[Offset: 0xb8, Size: 0x1]
	<FString,MFMissionFlow*> MissionFlowMap;//[Offset: 0xc0, Size: 0x50]
	<FString,MFMission*> MissionMap;//[Offset: 0x110, Size: 0x50]
	<enum,MFMissionDataComponent*> DataComponentMap;//[Offset: 0x160, Size: 0x50]
	<MFMissionFlow*,MFMissionFlowExecutingNodeConfig> MissionFlowExecutingNodes;//[Offset: 0x1b0, Size: 0x50]
	FString[] DrawTexts;//[Offset: 0x200, Size: 0x10]
	void UpdateLastTriggerCharacter(MFMission* InMission, Character* InCharacter);// 0x49f7e3fee041
	void StopMissionFlow(MFMissionFlow* InMissionFlow);// 0x49f6e3fee041
	void StartMissionFlow(MFMissionFlow* InMissionFlow);// 0x49f5e3fee041
	void SetNodeStatus(MFMissionFlowNode* InMissionFlowNode, enum InStatus);// 0x49f4e3fee041
	void SetNodeForceExecute(MFMissionFlowNode* InMissionFlowNode, bool bForce);// 0x49f3e3fee041
	void SetMissionStatus(MFMission* InMission, enum InStatus, bool bExecuteNode);// 0x49f2e3fee041
	void SetMissionRemainTime(MFMission* InMission, float InRemainTime, float InRemainTimeUpdateServerTime);// 0x49f1e3fee041
	void SetMissionHasTryInteract(MFMission* InMission, bool bHasTry);// 0x49f0e3fee041
	void SetMissionFlowSeasonTask(MFMissionFlow* InMissionFlow, bool bSeasonTask);// 0x49efe3fee041
	void SetMissionFlowLastTriggerCharacter(MFMissionFlow* InMissionFlow, Character* InCharacter);// 0x49eee3fee041
	void SetMissionFlowCompleteType(MFMissionFlow* InMissionFlow, enum CompleteType);// 0x49ede3fee041
	void SetMissionFlowBeforeState(MFMissionFlow* InMissionFlow, bool bBeforeState);// 0x49ece3fee041
	void SetMissionFlowActTask(MFMissionFlow* InMissionFlow, bool bActTask);// 0x49ebe3fee041
	void SetMissionFinishTime(MFMission* InMission, float InFinishTime);// 0x49eae3fee041
	void SetMissionFailedType(MFMission* InMission, enum FailedType);// 0x49e9e3fee041
	int SetMissionCurProgress(MFMission* InMission, int InPorgress);// 0x49e8e3fee041
	void SetMissionActTask(MFMission* InMission, bool bActTask);// 0x49e7e3fee041
	void SetMissionActivationTime(MFMission* InMission, float InActivationTime);// 0x49e6e3fee041
	void SetInstigatorType(enum InType);// 0x49e5e3fee041
	void RegisterMissionFlow(MFMissionFlow* InMissionFlow, bool Replicate);// 0x49e4e3fee041
	void OnMissionFlowStatusChange(MFMissionFlow* InMissionFlow, enum InStatus);// 0x49e3e3fee041
	bool IsWorldMember(MFMissionFlowComponent* Other);// 0x49e2e3fee041
	bool IsValidInstigatorType(out enum InDataType);// 0x49e1e3fee041
	bool IsTeamMember(MFMissionFlowComponent* Other);// 0x49e0e3fee041
	bool IsSameWorld(MFMissionFlowComponent* Other);// 0x49dfe3fee041
	bool IsSameTeam(MFMissionFlowComponent* Other);// 0x49dee3fee041
	bool IsReachEndNotComplete(MFMission* InMission);// 0x49dde3fee041
	bool IsOwnerWorld(MFMissionFlowComponent* Other);// 0x49dce3fee041
	bool IsOwnerTeam(MFMissionFlowComponent* Other);// 0x49dbe3fee041
	bool IsNodeForceExecute(MFMissionFlowNode* InMissionFlowNode);// 0x49dae3fee041
	bool IsMissionFinished(MFMission* InMission);// 0x49d9e3fee041
	bool IsFailWhenAchieved(MFMission* InMission);// 0x49d8e3fee041
	int InitMissionEndProgress(MFMission* InMission, int InPorgress);// 0x49d7e3fee041
	int InitMissionCurProgress(MFMission* InMission, int InPorgress);// 0x49d6e3fee041
	enum GetNodeStatus(MFMissionFlowNode* InMissionFlowNode);// 0x49d5e3fee041
	enum GetNodeMissionStatus(MFMissionFlowNode* InMissionFlowNode);// 0x49d4e3fee041
	enum GetMissionStatus(MFMission* InMission);// 0x49d3e3fee041
	MFMissionReplicateData[] GetMissionReplicateDatas(FString InMissionFlowName);// 0x49d2e3fee041
	MFMissionReplicateData GetMissionReplicateData(FString InMissionName);// 0x49d1e3fee041
	float GetMissionRemainTimeUpdateServerTime(MFMission* InMission);// 0x49d0e3fee041
	float GetMissionRemainTime(MFMission* InMission);// 0x49cfe3fee041
	int GetMissionProgress(MFMission* InMission);// 0x49cee3fee041
	MFMissionInstanceData GetMissionInstanceData(MFMission* InMission);// 0x49cde3fee041
	enum GetMissionFlowStatus(MFMissionFlow* InMissionFlow);// 0x49cce3fee041
	MFMissionFlowReplicateData GetMissionFlowReplicateData(FString InMissionFlowName);// 0x49cbe3fee041
	Character* GetMissionFlowLastTriggerCharacter(MFMissionFlow* InMissionFlow);// 0x49cae3fee041
	float GetMissionFinisTime(MFMission* InMission);// 0x49c9e3fee041
	MFMissionDataComponent* GetMissionDataComponent(enum InDataType);// 0x49c8e3fee041
	float GetMissionActivationTime(MFMission* InMission);// 0x49c7e3fee041
	MFMission* GetMission(FString InMissionName);// 0x49c6e3fee041
	enum GetInstigatorType();// 0x49c5e3fee041
	MFMissionFlowReplicateData[] GetAllMissionFlowReplicateDatas();// 0x49c4e3fee041
	void ExecuteNode(MFMissionFlowNode* InMissionFlowNode);// 0x49c3e3fee041
	void DeactivateNode(MFMissionFlowNode* InMissionFlowNode, enum InStatus);// 0x49c2e3fee041
	void DeactivateMission(MFMission* InMission, enum InStatus);// 0x49c1e3fee041
	void ClientDebugMissionInfos(const FString[] InInfos);// 0x49c0e3fee041
	int ClearMissionProgress(MFMission* InMission);// 0x49bfe3fee041
	bool CheckMissionAchieved(MFMission* InMission);// 0x49bee3fee041
	int AddMissionProgress(MFMission* InMission, int InProgressToAdd);// 0x49bde3fee041
	void ActivateNode(MFMissionFlowNode* InMissionFlowNode, enum InStatus);// 0x49bce3fee041
	void ActivateMission(MFMission* InMission, enum InStatus);// 0x49bbe3fee041

--------------------------------
Class: MFMissionFlow.Object
	MFMissionFlowNode_Start* StartNode;//[Offset: 0x28, Size: 0x8]
	MFMissionFlowNode_End* EndNode;//[Offset: 0x30, Size: 0x8]
	MFMissionFlowNode*[] NodeList;//[Offset: 0x38, Size: 0x10]
	MFMission*[] MissionList;//[Offset: 0x48, Size: 0x10]
	MFMissionFlowComponent*[] InstigatorList;//[Offset: 0x58, Size: 0x10]
	bool bCustomName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	FString MissionFlowName;//[Offset: 0x70, Size: 0x10]
	enum MissionFlowType;//[Offset: 0x80, Size: 0x1]
	enum DataType;//[Offset: 0x81, Size: 0x1]
	enum CompleteType;//[Offset: 0x82, Size: 0x1]
	void UnRegisterInstigator(MFMissionFlowComponent* InInstigator);// 0x5abce3fee041
	void SetStartNode(MFMissionFlowNode_Start* InStartNode);// 0x5abbe3fee041
	void SetMissionFlowName(FString InName);// 0x5abae3fee041
	void SetEndNode(MFMissionFlowNode_End* InEndNode);// 0x5ab9e3fee041
	void ResetNodeList();// 0x5ab8e3fee041
	void RegisterInstigator(MFMissionFlowComponent* InInstigator);// 0x5ab7e3fee041
	bool IsValidMissionFlow();// 0x5ab6e3fee041
	bool IsCustomName();// 0x5ab5e3fee041
	bool IsCompleteInOneBattle();// 0x5ab4e3fee041
	bool IsActivityMission();// 0x5ab3e3fee041
	void InitializeMissionFlow();// 0x5ab2e3fee041
	MFMissionFlowNode_Start* GetStartNode();// 0x5ab1e3fee041
	MFMissionFlowNode*[] GetNodeList();// 0x5ab0e3fee041
	MFMission*[] GetMissionList();// 0x5aafe3fee041
	MFMissionFlowNode* GetMissionFlowNode(FString InName);// 0x5aaee3fee041
	FString GetMissionFlowName();// 0x5aade3fee041
	MFMissionFlowComponent*[] GetInstigatorList();// 0x5aace3fee041
	MFMissionFlowNode_End* GetEndNode();// 0x5aabe3fee041
	enum GetDataType();// 0x5aaae3fee041
	enum GetCompleteType();// 0x5aa9e3fee041
	void DestroyFlow();// 0x5aa8e3fee041
	void AddNode(MFMissionFlowNode* InNode);// 0x5aa7e3fee041
	void AddMission(MFMission* InMission);// 0x5aa6e3fee041

--------------------------------
Class: MFMissionFlowNode_Start.MFMissionFlowNode.Object

--------------------------------
Class: MFMissionFlowNode.Object
	MFMissionFlow* MissionFlowAsset;//[Offset: 0x28, Size: 0x8]
	MFMission* Mission;//[Offset: 0x30, Size: 0x8]
	MFMissionFlowNode* ParentNode;//[Offset: 0x38, Size: 0x8]
	MissionFlowConnection[] PrevConnections;//[Offset: 0x40, Size: 0x10]
	MissionFlowConnection[] NextConnections;//[Offset: 0x50, Size: 0x10]
	MissionFlowConnection[] FailedConnections;//[Offset: 0x60, Size: 0x10]
	MFMissionFlowComponent*[] InstigatorList;//[Offset: 0x70, Size: 0x10]
	class MFMission* MissionClass;//[Offset: 0x80, Size: 0x28]
	bool bCustomName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	FString MissionName;//[Offset: 0xb0, Size: 0x10]
	enum DataType;//[Offset: 0xc0, Size: 0x1]
	enum HelpType;//[Offset: 0xc1, Size: 0x1]
	enum CompareType;//[Offset: 0xc2, Size: 0x1]
	int BeginProgress;//[Offset: 0xc4, Size: 0x4]
	int EndProgress;//[Offset: 0xc8, Size: 0x4]
	bool bNeedReportProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	bool bReachEndNotComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 0x1]
	bool bFailWhenAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 0x1]
	enum NodeType;//[Offset: 0xcf, Size: 0x1]
	FString NodeName;//[Offset: 0xd0, Size: 0x10]
	void UnRegisterInstigator(MFMissionFlowComponent* InInstigator);// 0x5ae5e3fee041
	void SetupPrevConnections(out const MFMissionFlowNode*[] InNodeList);// 0x5ae4e3fee041
	void SetupNextConnection(MFMissionFlowNode* InNode);// 0x5ae3e3fee041
	void SetParentNode(MFMissionFlowNode* InParentNode);// 0x5ae2e3fee041
	void SetMissionName(FString InName);// 0x5ae1e3fee041
	void RegisterInstigator(MFMissionFlowComponent* InInstigator);// 0x5ae0e3fee041
	bool IsValidMission();// 0x5adfe3fee041
	bool IsReachEndNotComplete();// 0x5adee3fee041
	bool IsNeedReportProgress();// 0x5adde3fee041
	bool IsMyMission(const MFMission* InMission);// 0x5adce3fee041
	bool IsFailWhenAchieved();// 0x5adbe3fee041
	bool IsCustomName();// 0x5adae3fee041
	bool HasPrevConnection();// 0x5ad9e3fee041
	MFMissionFlowNode*[] GetPrevConnections();// 0x5ad8e3fee041
	MFMissionFlowNode* GetParentNode();// 0x5ad7e3fee041
	enum GetNodeMissionStatus(MFMissionFlowComponent* InInstigator);// 0x5ad6e3fee041
	MFMissionFlowNode*[] GetNextConnections();// 0x5ad5e3fee041
	FString GetMissionName();// 0x5ad4e3fee041
	enum GetMissionFlowDataType();// 0x5ad3e3fee041
	MFMissionFlow* GetMissionFlow();// 0x5ad2e3fee041
	class MFMission GetMissionClass();// 0x5ad1e3fee041
	MFMission* GetMission();// 0x5ad0e3fee041
	MFMissionFlowComponent*[] GetInstigatorList();// 0x5acfe3fee041
	enum GetHelpType();// 0x5acee3fee041
	MFMissionFlowNode*[] GetFailedConnections();// 0x5acde3fee041
	int GetEndProgress();// 0x5acce3fee041
	enum GetDataType();// 0x5acbe3fee041
	enum GetCompareType();// 0x5acae3fee041
	int GetBeginProgress();// 0x5ac9e3fee041
	bool ExecuteNode(MFMissionFlowComponent* InInstigator);// 0x5ac8e3fee041
	bool EnableActivate(MFMissionFlowComponent* InInstigator, enum ActivatorStatus);// 0x5ac7e3fee041
	void DestroyNode();// 0x5ac6e3fee041
	void DeactivateNode(MFMissionFlowComponent* InInstigator, out const enum InMissionStatus);// 0x5ac5e3fee041
	void DeactivateNextConnections(MFMissionFlowComponent* InInstigator, out const enum InMissionStatus, out const MFMissionFlowNode*[] NextNodeList);// 0x5ac4e3fee041
	void AddPrevConnection(MFMissionFlowNode* InNode, bool bSuccessConnection);// 0x5ac3e3fee041
	void AddNextConnection(MFMissionFlowNode* InNode);// 0x5ac2e3fee041
	void AddFailedConnection(MFMissionFlowNode* InNode);// 0x5ac1e3fee041
	void ActivateNode(MFMissionFlowComponent* InInstigator, enum ActivatorStatus);// 0x5ac0e3fee041
	void ActivateNextConnections(MFMissionFlowComponent* InInstigator, out const enum InMissionStatus, out const MFMissionFlowNode*[] NextNodeList);// 0x5abfe3fee041

--------------------------------
Class: MissionFlowConnection
	MFMissionFlowNode* ConnectNode;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: MFMissionFlowNode_End.MFMissionFlowNode.Object

--------------------------------
Class: MFMissionDataComponent.ActorComponent.Object
	<MFMissionFlow*,MFMissionFlowInstanceData> MissionFlowInstanceDataMap;//[Offset: 0xb8, Size: 0x50]
	<MFMissionFlowNode*,MFMissionFlowNodeInstanceData> NodeInstanceDataMap;//[Offset: 0x108, Size: 0x50]
	<MFMission*,MFMissionInstanceData> MissionInstanceDataMap;//[Offset: 0x158, Size: 0x50]
	MFMissionFlowReplicateData[] MissionFlowReplicateDatas;//[Offset: 0x1a8, Size: 0x10]
	MFMissionReplicateData[] MissionReplicateDatas;//[Offset: 0x1b8, Size: 0x10]
	void SetMissionReplicateValid(FString InMissionName, bool bValid);// 0x49b6e3fee041
	void SetMissionReplicateStatus(FString InMissionName, int InNewStatus, int InOldStatus);// 0x49b5e3fee041
	void SetMissionReplicateRemainTime(FString InMissionName, float InRemainTime, float InRemainTimeUpdateServerTime);// 0x49b4e3fee041
	void SetMissionReplicateCurProgress(FString InMissionName, int InPorgress);// 0x49b3e3fee041
	void SetMissionReplicateAffiliate(FString InMissionName, bool bAffiliate);// 0x49b2e3fee041
	void SetMissionFlowReplicateStatusChangeTime(FString InMissionFlowName, int InTime);// 0x49b1e3fee041
	void SetMissionFlowReplicateStatus(FString InMissionFlowName, int InStatus);// 0x49b0e3fee041
	void SetMissionFlowReplicateBeforeState(FString InMissionFlowName, bool bBeforeState);// 0x49afe3fee041
	void OnRep_MissionReplicateDatas();// 0x49aee3fee041
	void OnRep_MissionFlowReplicateDatas();// 0x49ade3fee041
	void NotifyMissionReplicateDataChanged(enum InChangeType, MFMissionReplicateData InMissionReplicateData);// 0x49ace3fee041
	void NotifyMissionFlowReplicateDataChanged(enum InChangeType, MFMissionFlowReplicateData InMissionFlowReplicateData);// 0x49abe3fee041
	void MulticastMissionReplicateDataChanged(enum InChangeType, MFMissionReplicateData InMissionReplicateData);// 0x49aae3fee041
	void MulticastMissionFlowReplicateDataChanged(enum InChangeType, MFMissionFlowReplicateData InMissionFlowReplicateData);// 0x49a9e3fee041
	void InitQuestReplicateData(FString InMissionName, int InCurPorgress, int InEndPorgress);// 0x49a8e3fee041
	void InitQuestInstanceData(FString InMissionName, bool bActTask);// 0x49a7e3fee041
	void InitQuestGraphInstanceData(FString InMissionFlowName, bool bCompleteInOneBattle, bool bActTask);// 0x49a6e3fee041
	void InitMissionReplicateData(MFMissionFlowNode* InMissionFlowNode, out MFMissionInstanceData MissionInstanceData);// 0x49a5e3fee041
	void InitMissionFlowReplicateData(MFMissionFlow* InMissionFlow, out MFMissionFlowInstanceData MissionFlowInstanceData);// 0x49a4e3fee041
	MFMissionReplicateData GetRefMissionReplicateData(MFMissionFlowNode* InMissionFlowNode);// 0x49a3e3fee041
	MFMissionInstanceData GetRefMissionInstanceData(MFMission* InMission);// 0x49a2e3fee041
	MFMissionFlowReplicateData GetRefMissionFlowReplicateDataByName(FString InMissionFlowName);// 0x49a1e3fee041
	MFMissionFlowReplicateData GetRefMissionFlowReplicateData(MFMissionFlow* InMissionFlow);// 0x49a0e3fee041
	MFMissionFlowNodeInstanceData GetRefMissionFlowNodeInstanceData(MFMissionFlowNode* InMissionFlowNode);// 0x499fe3fee041
	MFMissionFlowInstanceData GetRefMissionFlowInstanceData(MFMissionFlow* InMissionFlow);// 0x499ee3fee041
	MFMissionReplicateData[] GetMissionReplicateDatas(FString InMissionFlowName);// 0x499de3fee041
	MFMissionReplicateData GetMissionReplicateData(FString InMissionName);// 0x499ce3fee041
	MFMissionInstanceData GetMissionInstanceData(MFMission* InMission);// 0x499be3fee041
	MFMissionFlowReplicateData GetMissionFlowReplicateData(FString InMissionFlowName);// 0x499ae3fee041
	MFMissionFlowNodeInstanceData GetMissionFlowNodeInstanceData(MFMissionFlowNode* InMissionFlowNode);// 0x4999e3fee041
	MFMissionFlowInstanceData GetMissionFlowInstanceData(MFMissionFlow* InMissionFlow);// 0x4998e3fee041
	MFMissionFlowReplicateData[] GetAllMissionFlowReplicateDatas();// 0x4997e3fee041
	void ClientNotifyMissionReplicateDataChanged(enum InChangeType, MFMissionReplicateData InMissionReplicateData);// 0x4996e3fee041
	void ClientNotifyMissionFlowReplicateDataChanged(enum InChangeType, MFMissionFlowReplicateData InMissionFlowReplicateData);// 0x4995e3fee041
	void AddMissionReplicateData(out MFMissionReplicateData InData);// 0x4994e3fee041
	void AddMissionReplicateAffiliateIndex(FString InAssembleMissionName, FString InAffiliateMissionName);// 0x4993e3fee041
	void AddMissionFlowReplicateData(out MFMissionFlowReplicateData InData);// 0x4992e3fee041
	MFMissionInstanceData Add_GetRefMissionInstanceData(MFMission* InMission);// 0x4991e3fee041
	MFMissionFlowNodeInstanceData Add_GetRefMissionFlowNodeInstanceData(MFMissionFlowNode* InMissionFlowNode);// 0x4990e3fee041
	MFMissionFlowInstanceData Add_GetRefMissionFlowInstanceData(MFMissionFlow* InMissionFlow);// 0x498fe3fee041

--------------------------------
Class: MFMissionReplicateData
	Actor* Instigator;//[Offset: 0x0, Size: 0x8]
	FString MissionName;//[Offset: 0x8, Size: 0x10]
	FString MissionFlowName;//[Offset: 0x18, Size: 0x10]
	enum MissionStatus;//[Offset: 0x28, Size: 0x1]
	enum OldMissionStatus;//[Offset: 0x29, Size: 0x1]
	int OldProgress;//[Offset: 0x2c, Size: 0x4]
	int CurProgress;//[Offset: 0x30, Size: 0x4]
	int EndProgress;//[Offset: 0x34, Size: 0x4]
	float RemainTime;//[Offset: 0x38, Size: 0x4]
	float RemainTimeUpdateServerTime;//[Offset: 0x3c, Size: 0x4]
	bool bFailWhenAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bNeedReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bNeedReportProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool bAffiliate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	FString[] AffiliateMissionList;//[Offset: 0x48, Size: 0x10]
	enum FailedType;//[Offset: 0x58, Size: 0x1]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: MFMissionFlowReplicateData
	Actor* Instigator;//[Offset: 0x0, Size: 0x8]
	FString MissionFlowName;//[Offset: 0x8, Size: 0x10]
	enum MissionFlowStatus;//[Offset: 0x18, Size: 0x1]
	enum OldMissionFlowStatus;//[Offset: 0x19, Size: 0x1]
	enum CompleteType;//[Offset: 0x1a, Size: 0x1]
	bool bActTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool bSeasonTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bBeforeState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	float StatusChangeTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: MFMissionFlowInstanceData
	Actor* Instigator;//[Offset: 0x0, Size: 0x8]
	MFMissionFlow* MissionFlow;//[Offset: 0x8, Size: 0x8]
	enum NodeStatus;//[Offset: 0x10, Size: 0x1]
	enum MissionStatus;//[Offset: 0x11, Size: 0x1]
	enum CompleteType;//[Offset: 0x12, Size: 0x1]
	bool bActTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bSeasonTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bBeforeState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	Character* LastTriggerCharacter;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: MFMissionFlowNodeInstanceData
	MFMissionFlowNode* MissionFlowNode;//[Offset: 0x0, Size: 0x8]
	enum NodeStatus;//[Offset: 0x8, Size: 0x1]
	enum MissionStatus;//[Offset: 0x9, Size: 0x1]
	bool bForceExecute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: MFMissionInstanceData
	Actor* Instigator;//[Offset: 0x0, Size: 0x8]
	MFMission* Mission;//[Offset: 0x8, Size: 0x8]
	enum MissionStatus;//[Offset: 0x10, Size: 0x1]
	enum CompareType;//[Offset: 0x11, Size: 0x1]
	int CurProgress;//[Offset: 0x14, Size: 0x4]
	int BeginProgress;//[Offset: 0x18, Size: 0x4]
	int EndProgress;//[Offset: 0x1c, Size: 0x4]
	int CacheProgress;//[Offset: 0x20, Size: 0x4]
	bool bReachEndNotComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	float ActivationTime;//[Offset: 0x28, Size: 0x4]
	float FinishTime;//[Offset: 0x2c, Size: 0x4]
	float RemainTime;//[Offset: 0x30, Size: 0x4]
	float RemainTimeUpdateServerTime;//[Offset: 0x34, Size: 0x4]
	bool bFailWhenAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bActTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bHasTryInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum FailedType;//[Offset: 0x3b, Size: 0x1]

--------------------------------
Class: MFMissionFlowExecutingNodeConfig
	bool bExecutingFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	MFMissionFlowNode*[] NodeList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MFMissionObjective.MFMissionNode.Object
	enum InstigatorType;//[Offset: 0x38, Size: 0x1]
	MissionObjectiveCheckConditions CheckConditions;//[Offset: 0x40, Size: 0x38]
	MissionObjectivePreConditions PreConditions;//[Offset: 0x78, Size: 0x28]
	bool bNeedReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: MFMissionNode.Object
	MFMission* Mission;//[Offset: 0x28, Size: 0x8]
	MFGlobalEventParameterTag InstigatorTag;//[Offset: 0x30, Size: 0x8]
	void ShowLog(FString LogStr, bool bImportant);// 0x4a04e3fee041
	void OnMissionStatusChanged(MFMissionFlowComponent* InInstigator, enum NewStatus, enum OldStatus);// 0x4a03e3fee041
	void InitializeNode(MFMission* InMission);// 0x4a02e3fee041
	MFMission* GetMission();// 0x4a01e3fee041
	enum GetDataType();// 0x4a00e3fee041
	void ExecuteNode(MFMissionFlowComponent* InInstigator);// 0x49ffe3fee041
	void DestroyNode();// 0x49fee3fee041
	void DeactivateNode(MFMissionFlowComponent* InInstigator, out const enum InStatus);// 0x49fde3fee041
	void ActivateNode(MFMissionFlowComponent* InInstigator);// 0x49fce3fee041

--------------------------------
Class: MissionObjectiveCheckConditions
	enum CheckType;//[Offset: 0x0, Size: 0x1]
	MissionObjectiveConditionContainer[] ConditionContainers;//[Offset: 0x8, Size: 0x10]
	MFMissionAction*[] SuccessActions;//[Offset: 0x18, Size: 0x10]
	MFMissionAction*[] FailedActions;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MissionObjectiveConditionContainer
	enum CheckType;//[Offset: 0x0, Size: 0x1]
	MFMissionCondition*[] Conditions;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MFMissionCondition.MFMissionNode.Object
	bool bEqualCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MFMissionAction.MFMissionNode.Object

--------------------------------
Class: MissionObjectivePreConditions
	enum CheckType;//[Offset: 0x0, Size: 0x1]
	MissionObjectiveConditionContainer[] ConditionContainers;//[Offset: 0x8, Size: 0x10]
	MFMissionAction*[] ActivateActions;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: MFGlobalEventParameterTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SGMission.MFMission.Object

--------------------------------
Class: SGMissionDataComponent.MFMissionDataComponent.ActorComponent.Object
	MissionFlowReplicateDataChangedEvent[] WaitingMissionFlowReplicateDataChangedList;//[Offset: 0x1c8, Size: 0x10]
	MissionReplicateDataChangedEvent[] WaitingMissionReplicateDataChangedList;//[Offset: 0x1d8, Size: 0x10]
	void AddWaitingMissionReplicateDataChanged(enum InChangeType, out MFMissionReplicateData InMissionReplicateData);// 0x49b8e3fee041
	void AddWaitingMissionFlowReplicateDataChanged(enum InChangeType, out MFMissionFlowReplicateData InMissionFlowReplicateData);// 0x49b7e3fee041

--------------------------------
Class: MissionFlowReplicateDataChangedEvent
	enum ChangeType;//[Offset: 0x0, Size: 0x1]
	MFMissionFlowReplicateData ReplicateData;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: MissionReplicateDataChangedEvent
	enum ChangeType;//[Offset: 0x0, Size: 0x1]
	MFMissionReplicateData ReplicateData;//[Offset: 0x8, Size: 0x60]

--------------------------------
Class: SGMissionDataInterface.Interface.Object
	SGMissionDataComponent* GetMissionDataComponent();// 0x49bae3fee041
	SGMissionDataComponent* CreateMissionDataComponent();// 0x49b9e3fee041

--------------------------------
Class: SGMissionDataNoOwnerComponent.SGMissionDataComponent.MFMissionDataComponent.ActorComponent.Object

--------------------------------
Class: SGMissionDataOwnerOnlyComponent.SGMissionDataComponent.MFMissionDataComponent.ActorComponent.Object

--------------------------------
Class: SGMissionFlowComponent.MFMissionFlowComponent.ActorComponent.Object
	void GetPlayerMissionsPartByState(out MFMissionFlowReplicateData[] InProgress, out MFMissionFlowReplicateData[] Success, out MFMissionFlowReplicateData[] Fail);// 0x49f8e3fee041

--------------------------------
Class: SGMissionFlowInterface.Interface.Object
	bool IsReady();// 0x49fbe3fee041
	SGMissionFlowComponent* GetMissionFlowComponent();// 0x49fae3fee041
	SGMissionFlowComponent* CreateMissionFlowComponent();// 0x49f9e3fee041

--------------------------------
Class: MFGlobalEventParameterTagsManager.Object
	MFGlobalEventParameterTagSource[] TagSources;//[Offset: 0xc0, Size: 0x10]
	DataTable*[] MFGlobalEventParameterTagTables;//[Offset: 0x1b0, Size: 0x10]

--------------------------------
Class: MFGlobalEventParameterTagSource
	FName SourceName;//[Offset: 0x0, Size: 0x8]
	enum SourceType;//[Offset: 0x8, Size: 0x1]
	MFGlobalEventParameterTagsList* SourceTagList;//[Offset: 0x10, Size: 0x8]
	RestrictedMFGlobalEventParameterTagsList* SourceRestrictedTagList;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: MFGlobalEventParameterTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10]
	MFGlobalEventParameter[] MFGlobalEventParameterTagList;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MFGlobalEventParameter.TableRowBase
	FName Tag;//[Offset: 0x8, Size: 0x8]
	FString DevComment;//[Offset: 0x10, Size: 0x10]
	FName PropertyType;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: RestrictedMFGlobalEventParameterTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10]
	RestrictedMFGlobalEventParameterTagTableRow[] RestrictedMFGlobalEventParameterTagList;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: RestrictedMFGlobalEventParameterTagTableRow.MFGlobalEventParameter.TableRowBase
	bool bAllowNonRestrictedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: MFGlobalEventParameterTagsSettings.MFGlobalEventParameterTagsList.Object
	bool ImportTagsFromConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool WarnOnInvalidTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool FastReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	FString InvalidTagCharacters;//[Offset: 0x50, Size: 0x10]
	MFGlobalEventParameterTagCategoryRemap[] CategoryRemapping;//[Offset: 0x60, Size: 0x10]
	SoftObjectPath[] MFGlobalEventParameterTagTableList;//[Offset: 0x70, Size: 0x10]
	MFGlobalEventParameterTagRedirect[] MFGlobalEventParameterTagRedirects;//[Offset: 0x80, Size: 0x10]
	FName[] CommonlyReplicatedTags;//[Offset: 0x90, Size: 0x10]
	int NumBitsForContainerSize;//[Offset: 0xa0, Size: 0x4]
	int NetIndexFirstBitSegment;//[Offset: 0xa4, Size: 0x4]
	RestrictedMFGlobalEventParameterConfigInfo[] RestrictedConfigFiles;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: MFGlobalEventParameterTagCategoryRemap
	FString BaseCategory;//[Offset: 0x0, Size: 0x10]
	FString[] RemapCategories;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MFGlobalEventParameterTagRedirect
	FName OldTagName;//[Offset: 0x0, Size: 0x8]
	FName NewTagName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: RestrictedMFGlobalEventParameterConfigInfo
	FString RestrictedConfigName;//[Offset: 0x0, Size: 0x10]
	FString[] Owners;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	bool bOnlyOneSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	void OnPlayerBeginGame(MFGlobalEventTag InEventTag, out const GlobalEventMessage_PlayerBeginGame InMessage);// 0x4a05e3fee041

--------------------------------
Class: MFGlobalEventTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: GlobalEventMessage_PlayerBeginGame
	PlayerController* Instigator;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SGMissionStatics.BlueprintFunctionLibrary.Object
	int GetMissionSubTypeByTaskID(int InTaskID);// 0x4a09e3fee041
	int GetMissionMainTypeByTaskID(int InTaskID);// 0x4a08e3fee041
	SGMissionFlowComponent* GetMissionFlowComponent(Actor* Actor);// 0x4a07e3fee041
	SGMissionDataComponent* GetMissionDataComponent(Actor* Actor);// 0x4a06e3fee041

--------------------------------
Class: SGModeDataTableManager.Object
	int CurrMainModeID;//[Offset: 0x28, Size: 0x4]
	int CurrSubModeID;//[Offset: 0x2c, Size: 0x4]
	int CurrMapID;//[Offset: 0x30, Size: 0x4]
	int CurrDifficulty;//[Offset: 0x34, Size: 0x4]
	int CurrSpecialID;//[Offset: 0x38, Size: 0x4]
	DataTable*[] DataTableArr;//[Offset: 0x40, Size: 0x10]
	void RefreshModeData(const Object* WorldContextObject);// 0x4a0be3fee041
	SGModeDataTableManager* Get();// 0x4a0ae3fee041

--------------------------------
Class: SGModeLevelInterface.Interface.Object
	void GetModeLevel(out FString[] ServerOnlyMaps, out FString[] ClientOnlyMaps, out FString[] ServerAndClientMaps);// 0x4a0de3fee041
	void GetAdditionFilterLevel(out FString[] AddtionIgnores);// 0x4a0ce3fee041

--------------------------------
Class: SGNetRelevantConfigurableActor.Actor.Object
	Actor*[] RelevantForActors;//[Offset: 0x2e8, Size: 0x10]
	int InteractID;//[Offset: 0x2f8, Size: 0x4]

--------------------------------
Class: SGOBPlayerInputProcessComponent.SGActorInputProcessComponent.ActorComponent.Object
	bool CanSprint(Character* Character);// 0x4a15e3fee041

--------------------------------
Class: SGOnlineSession.OnlineSession.Object

--------------------------------
Class: SGParticleModule.ParticleModule.Object

--------------------------------
Class: SGParticleModule_KillDistance.SGParticleModule.ParticleModule.Object
	RawDistributionFloat Distance;//[Offset: 0x30, Size: 0x30]
	bool bConsiderSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: SGPathFollowingComponent.PathFollowingComponent.ActorComponent.Object

--------------------------------
Class: SGPCAimingComponent.ActorComponent.Object
	Actor* AimedActorCache;//[Offset: 0xc0, Size: 0x8]
	float CheckDistance;//[Offset: 0xc8, Size: 0x4]
	float Angle;//[Offset: 0xcc, Size: 0x4]
	float CosAngle;//[Offset: 0xd0, Size: 0x4]
	float LastGetAllAimedActorsTime;//[Offset: 0xd4, Size: 0x4]
	Actor*[] CachedAimedActors;//[Offset: 0xd8, Size: 0x10]
	<Actor*,InteractionTriggerPosInfo> CachedAimedActorsInteractInfoMap;//[Offset: 0xe8, Size: 0x50]
	float LastCalcCanPickUpTime;//[Offset: 0x138, Size: 0x4]
	Actor*[] CachedCanPickUpInventories;//[Offset: 0x140, Size: 0x10]
	Actor* CachedDoor;//[Offset: 0x150, Size: 0x8]
	Actor* CachedContainer;//[Offset: 0x158, Size: 0x8]
	float RecalcInteval;//[Offset: 0x160, Size: 0x4]
	float ProneSizeSquared2D;//[Offset: 0x164, Size: 0x4]
	class Actor[] TraceIgnoreClasses;//[Offset: 0x168, Size: 0x10]
	void UpdateAimedTargetsInfo();// 0x4a26e3fee041
	bool ShouldIgnoreTraceActor(Actor* InActor);// 0x4a25e3fee041
	void OnUIModeChanged(enum NewUIMode, enum OldUIMode);// 0x4a24e3fee041
	void OnInventoryPickStateChanged(SGInventory* Inventory, bool bNewPickState);// 0x4a23e3fee041
	Actor*[] GetCanPickUpInventories(bool bForceRedetect, float InCheckDistance);// 0x4a22e3fee041
	Actor* GetAimedDoor(float InCheckDistance);// 0x4a21e3fee041
	Actor* GetAimedCorpse(float InCheckDistance);// 0x4a20e3fee041
	Actor* GetAimedContainer(float InCheckDistance);// 0x4a1fe3fee041
	Actor* GetAimedCardReader(float InCheckDistance);// 0x4a1ee3fee041
	Actor* GetAimedAlarm(float InCheckDistance);// 0x4a1de3fee041
	Actor*[] GetAimedActors(bool bForceRedetect, float InCheckDistance);// 0x4a1ce3fee041
	Actor* GetAimedActor(float InCheckDistance, bool bForceRedetect);// 0x4a1be3fee041
	void AddCacheAimedActor(Actor* NewCachedAimedActor, Vector TraceStartPos, Vector TraceEndPos, out FName TraceEndBoneName);// 0x4a1ae3fee041

--------------------------------
Class: SGPCAssetLoadManager.ActorComponent.Object
	bool bEnableBulletPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bEnableImpactEffectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bEnableFireEffectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bEnableProjectileEffectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1]
	ObjectPool* ImpactEffectPool;//[Offset: 0xc8, Size: 0x8]
	ObjectPool* GravityBulletPool;//[Offset: 0xd0, Size: 0x8]
	ObjectPool* ProjectileEffectPool;//[Offset: 0xd8, Size: 0x8]
	ObjectPool*[] GeneralPoolList;//[Offset: 0xe0, Size: 0x10]
	ObjectPool* ShotFire1PEffectPool;//[Offset: 0xf0, Size: 0x8]
	ObjectPool* ShotFire1PEffectPoolAnyThread;//[Offset: 0xf8, Size: 0x8]
	ObjectPool* ShotFire3PEffectPool;//[Offset: 0x100, Size: 0x8]
	ObjectPool* ShotFire3PEffectPoolAnyThread;//[Offset: 0x108, Size: 0x8]
	ObjectPool* ShotLightEffectPool;//[Offset: 0x110, Size: 0x8]
	ObjectPool* ShotLightEffectPoolAnyThread;//[Offset: 0x118, Size: 0x8]
	ObjectPool* BulletShellEffectPool;//[Offset: 0x120, Size: 0x8]
	ObjectPool* BulletShellEffectPoolAnyThread;//[Offset: 0x128, Size: 0x8]
	ObjectPool* ShotFogEffectPool;//[Offset: 0x130, Size: 0x8]
	ObjectPool* ShotFogEffectPoolAnyThread;//[Offset: 0x138, Size: 0x8]
	ObjectPool* BulletTracerEffectPool;//[Offset: 0x140, Size: 0x8]
	ObjectPool* BulletTracerEffectPoolAnyThread;//[Offset: 0x148, Size: 0x8]
	ObjectPool* NormalFireEffectPool;//[Offset: 0x150, Size: 0x8]
	ObjectPool* NormalFireEffectPoolAnyThread;//[Offset: 0x158, Size: 0x8]
	int PoolSize_GravityBullet;//[Offset: 0x160, Size: 0x4]
	int PoolSize_HitImpact;//[Offset: 0x164, Size: 0x4]
	int PoolSize_FireEffect;//[Offset: 0x168, Size: 0x4]
	int PoolSize_BulletLineEffect;//[Offset: 0x16c, Size: 0x4]
	int PoolSize_NormalFireEffect;//[Offset: 0x170, Size: 0x4]
	int PoolSize_ProjectileEffect;//[Offset: 0x174, Size: 0x4]
	class SGPooledImpactEffectManager* PooledImpactEffectManagerClass;//[Offset: 0x178, Size: 0x8]
	class SGProjectile_GravityBullet* GeneralGravityBulletClass;//[Offset: 0x180, Size: 0x8]
	int PoolSize_FireEffect_WhenInit_PerTempate;//[Offset: 0x188, Size: 0x4]
	int PoolSize_BulletLineEffect_WhenInit_PerTempate;//[Offset: 0x18c, Size: 0x4]
	int PoolSize_BulletShellEffect_WhenInit_PerTempate;//[Offset: 0x190, Size: 0x4]
	int PoolSize_ImpactEffect_WhenInit_PerTempate;//[Offset: 0x194, Size: 0x4]
	class SGProjectileTrajectory* ProjectileTrajectoryClass;//[Offset: 0x1a0, Size: 0x8]
	SGProjectileTrajectory* TrajectoryActor;//[Offset: 0x1a8, Size: 0x8]
	PSCInfo[] PSCCreatingList;//[Offset: 0x1b0, Size: 0x10]
	SGPooledImpactEffectManager* PooledImpactEffectManager;//[Offset: 0x1c8, Size: 0x8]
	AvatarMergeMeshShareInfo[] AvatarMergeMeshShareInfoList;//[Offset: 0x1d0, Size: 0x10]
	WeaponMergeMeshShareInfo[] WeaponMergeMeshShareInfoList;//[Offset: 0x1e0, Size: 0x10]
	int GetSharedWeaponMeshCount();// 0x4a28e3fee041
	int GetSharedMeshCount();// 0x4a27e3fee041

--------------------------------
Class: PSCInfo
	ParticleSystem* Template;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AvatarMergeMeshShareInfo
	FString[] ModularMeshList;//[Offset: 0x0, Size: 0x10]
	LinearColor SkinType;//[Offset: 0x10, Size: 0x10]
	bool b1PUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	SkeletalMesh* MergedMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WeaponMergeMeshShareInfo
	FString[] ModularMeshList;//[Offset: 0x0, Size: 0x10]
	FString[] SpecialMeshNameList;//[Offset: 0x10, Size: 0x10]
	StaticMesh* MergedWeaponMesh;//[Offset: 0x20, Size: 0x8]
	FString DebugInfo;//[Offset: 0x28, Size: 0x10]
	int SharedCount;//[Offset: 0x38, Size: 0x4]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	byte MergeStatus;//[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: AutoAimDebugDataAsset.DataAsset.Object
	bool bShowViewDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bShowViewPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	Color ViewPointColor;//[Offset: 0x34, Size: 0x4]
	bool bShowSnapTargetPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Color SnapTargetPointColor;//[Offset: 0x3c, Size: 0x4]
	bool bShowBoneCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Color BoneCapsuleColor;//[Offset: 0x44, Size: 0x4]
	Color BoneCapsuleStartRangeColor;//[Offset: 0x48, Size: 0x4]
	bool bShowBaseStateRectangles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bShowSlideStateRectangles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bShowFireStateRectangles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	bool bShowADSStateRectangles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1]
	bool bAutoRectangleStatesOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	float ShowRangeDuration;//[Offset: 0x54, Size: 0x4]
	bool bShowStartRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	Color StartRangeColor;//[Offset: 0x5c, Size: 0x4]
	bool bShowEndRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	Color EndRangeColor;//[Offset: 0x64, Size: 0x4]
	bool bShowLowerTurnSensitivityRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	Color LowerTurnSensitivityColor;//[Offset: 0x6c, Size: 0x4]
	bool bShowMoveCompensateRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	Color MoveCompensateColor;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: SGPCAutoAimingComponent.ActorComponent.Object
	AutoAimParamsSet* DefaultParamsSet;//[Offset: 0xc0, Size: 0x8]
	AutoAimParamsSet*[] DefaultAdditionalParamsSet;//[Offset: 0xc8, Size: 0x10]
	AutoAimDebugDataAsset* DebugDataAsset;//[Offset: 0xd8, Size: 0x8]
	bool bOverWrittenByWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bEnableAutoAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	bool bDebugAutoAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1]
	AutoAimFrameRecord LastFrameRecord;//[Offset: 0xe4, Size: 0x84]
	float MaxTimeSicneLastRendered;//[Offset: 0x168, Size: 0x4]
	AutoAimParamsSet* MainParamsSet;//[Offset: 0x170, Size: 0x8]
	AutoAimParamsSet*[] AdditionalParamsSet;//[Offset: 0x178, Size: 0x10]
	AutoAimParamsSet* SnappingParamsSet;//[Offset: 0x188, Size: 0x8]
	AutoAimContext Context;//[Offset: 0x1e8, Size: 0x2c]
	SGInventory* CurrentWeapon;//[Offset: 0x218, Size: 0x8]
	AutoAimAntiHackStatis AntiHackStatis;//[Offset: 0x220, Size: 0x8]
	float LastSendRecordTime;//[Offset: 0x228, Size: 0x4]
	float SendRecordInterval;//[Offset: 0x22c, Size: 0x4]
	float AntiHackMaxAngularSpeedH;//[Offset: 0x230, Size: 0x4]
	float AntiHackMaxStartRangeH;//[Offset: 0x234, Size: 0x4]
	int ServerRecordNum;//[Offset: 0x238, Size: 0x4]
	int InvalidRecordNum;//[Offset: 0x23c, Size: 0x4]
	void SetAutoAimingEnabled(bool bEnabled);// 0x4a30e3fee041
	void ServerReportAntiHackStatis(AutoAimAntiHackStatis ClientAntiHackStatis);// 0x4a2fe3fee041
	void ServerReportAntiHackRecord(AutoAimFrameRecord FrameRecord);// 0x4a2ee3fee041
	void OnParamReset();// 0x4a2de3fee041
	void OnCurrentWeaponChanged(SGInventory* OldWeapon, SGInventory* NewWeapon);// 0x4a2ce3fee041
	void OnContinuousFireCountIncreased(float FireTimeSeconds);// 0x4a2be3fee041
	void OnCharacterDieInClient(SGCharacter* Character);// 0x4a2ae3fee041
	bool IsServerRecordValid();// 0x4a29e3fee041

--------------------------------
Class: AutoAimAntiHackStatis
	float MaxRange;//[Offset: 0x0, Size: 0x4]
	float MaxAngularSpeed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AutoAimFrameRecord
	float Distance;//[Offset: 0x0, Size: 0x4]
	float FOV;//[Offset: 0x4, Size: 0x4]
	float BaseStartRangeH;//[Offset: 0x8, Size: 0x4]
	float Distance2StartRangeScaleH;//[Offset: 0xc, Size: 0x4]
	float FOV2StartRangeScaleH;//[Offset: 0x10, Size: 0x4]
	float ModifiedStartRangeH;//[Offset: 0x14, Size: 0x4]
	float BaseEndRangeH;//[Offset: 0x18, Size: 0x4]
	float Distance2EndRangeScaleH;//[Offset: 0x1c, Size: 0x4]
	float FOV2EndRangeScaleH;//[Offset: 0x20, Size: 0x4]
	float ModifiedEndRangeH;//[Offset: 0x24, Size: 0x4]
	float BaseSpeedH;//[Offset: 0x28, Size: 0x4]
	float BaseAngularSpeedH;//[Offset: 0x2c, Size: 0x4]
	float Distance2SpeedScaleH;//[Offset: 0x30, Size: 0x4]
	float FOV2SpeedScaleH;//[Offset: 0x34, Size: 0x4]
	float RecoilTime2SpeedScaleH;//[Offset: 0x38, Size: 0x4]
	float RectDist2SpeedScaleH;//[Offset: 0x3c, Size: 0x4]
	float HorizontalRecoil2SpeedScaleH;//[Offset: 0x40, Size: 0x4]
	float SpeedDampingScale;//[Offset: 0x44, Size: 0x4]
	float SlideScreenSpeedDamp;//[Offset: 0x48, Size: 0x4]
	float FireCount2SpeedScale;//[Offset: 0x4c, Size: 0x4]
	float SelfMovePenaltyScale;//[Offset: 0x50, Size: 0x4]
	float TargetMovePenaltyScale;//[Offset: 0x54, Size: 0x4]
	float ModifiedAngularSpeedH;//[Offset: 0x58, Size: 0x4]
	float ModifiedAngularSpeedV;//[Offset: 0x5c, Size: 0x4]
	Vector TargetVelocity;//[Offset: 0x60, Size: 0xc]
	float MoveCompensateRatioScale;//[Offset: 0x6c, Size: 0x4]
	float TargetMovingCompensateRatioScaled;//[Offset: 0x70, Size: 0x4]
	Vector MoveCompensateVelocityScaled;//[Offset: 0x74, Size: 0xc]
	float MoveCompensateAngularSpeedH;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: AutoAimContext
	bool bFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bSlidingScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Vector2D SlideScreenDirAvg;//[Offset: 0x4, Size: 0x8]
	Vector ViewLocation;//[Offset: 0xc, Size: 0xc]
	Vector ViewDirection;//[Offset: 0x18, Size: 0xc]
	float CurrentTime;//[Offset: 0x24, Size: 0x4]
	float CurrentFOV;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: SGPCAutoTestComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	float MovementSpeed;//[Offset: 0xc4, Size: 0x4]
	float LocationErrorToleranceSq;//[Offset: 0xc8, Size: 0x4]
	bool bDumpCustomStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	TacticSystemActor* CachedTaticSysActor;//[Offset: 0xd0, Size: 0x8]
	float TimeLeft;//[Offset: 0xd8, Size: 0x4]
	bool bIsRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	Vector[] AutoTestNoteList;//[Offset: 0xe0, Size: 0x10]
	int NextTargetNoteIndex;//[Offset: 0xf0, Size: 0x4]
	enum LockOwner;//[Offset: 0xf4, Size: 0x1]
	Vector NextPathNode;//[Offset: 0xf8, Size: 0xc]
	Vector CachedLastPos;//[Offset: 0x104, Size: 0xc]
	bool bShouldCheckArrived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	bool bAutoSearchAndLoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	bool bAutoSearchAndKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1]
	Vector[] OverWatchPoints;//[Offset: 0x118, Size: 0x10]
	float ADSDelay;//[Offset: 0x128, Size: 0x4]
	float StopFireDelay;//[Offset: 0x12c, Size: 0x4]
	float SearchingRadiusForWindows;//[Offset: 0x130, Size: 0x4]
	float FireDurationForWin;//[Offset: 0x134, Size: 0x4]
	float SearchingRadiusForEnemys;//[Offset: 0x138, Size: 0x4]
	float FireDurationForEnemy;//[Offset: 0x13c, Size: 0x4]
	float SearchingRadiusForBox;//[Offset: 0x140, Size: 0x4]
	<Actor*> LootedActors;//[Offset: 0x148, Size: 0x50]
	Vector LastPosOnLooting;//[Offset: 0x198, Size: 0xc]
	void UseInventory(int64 ItemID);// 0x4a4ce3fee041
	void ToggleSearchAndLoot(bool bActive);// 0x4a4be3fee041
	void ToggleSearchAndKill(bool bActive);// 0x4a4ae3fee041
	void ToggleCheckArrived(bool bActive);// 0x4a49e3fee041
	void ThrowGrenade(int64 ItemID);// 0x4a48e3fee041
	void ThrowAndPickupItem();// 0x4a47e3fee041
	void SetNextTargetNoteIndex(int InIndex);// 0x4a46e3fee041
	void SetIsRunning(bool bInIsRunning);// 0x4a45e3fee041
	void ServerGetTrappedOverWatchPoints();// 0x4a44e3fee041
	void SearchAndLootABox();// 0x4a43e3fee041
	void SearchAndKillAnEnemy();// 0x4a42e3fee041
	FString RebaseOntoZeroOriginString(FString LocationStr);// 0x4a41e3fee041
	Vector RebaseOntoZeroOrigin(out const Vector Location);// 0x4a40e3fee041
	FString RebaseOntoLocalOriginString(FString LocationStr);// 0x4a3fe3fee041
	Vector RebaseOntoLocalOrigin(out const Vector Location);// 0x4a3ee3fee041
	void OnRep_NextTargetNoteIndex();// 0x4a3de3fee041
	void OnRep_IsRunning();// 0x4a3ce3fee041
	void OnRep_AutoTestNoteList();// 0x4a3be3fee041
	void NavToTarget(Vector Node);// 0x4a3ae3fee041
	FString IsAllowLuaTestCast();// 0x4a39e3fee041
	int GetNextTargetNoteIndex();// 0x4a38e3fee041
	bool GetIsRunning();// 0x4a37e3fee041
	int GetComponentNetMode();// 0x4a36e3fee041
	Vector[] GetAutoTestNoteList();// 0x4a35e3fee041
	void ClientSetNextPathNode(out const Vector Location);// 0x4a34e3fee041
	void ClientAutoScript(FString LuaScript, bool bStart, bool bLoop, bool bRandSpawn);// 0x4a33e3fee041
	void BreakWindow();// 0x4a32e3fee041
	void AddNode(Vector Node);// 0x4a31e3fee041

--------------------------------
Class: SGPCBehaviorControlComponent.ActorComponent.Object
	BehaviorControlData BehaviorControlData;//[Offset: 0xc0, Size: 0x2]
	BehaviorControlData LocalBehaviorControlData;//[Offset: 0xc2, Size: 0x2]
	void SetLockMovementOnlyLocal(bool bLock);// 0x4a55e3fee041
	void SetLockMovement(bool bLock);// 0x4a54e3fee041
	void SetLockInputOnlyLocal(bool bLock);// 0x4a53e3fee041
	void SetLockInput(bool bLock);// 0x4a52e3fee041
	void ResetPhysicalVelocity();// 0x4a51e3fee041
	void ResetFireState();// 0x4a50e3fee041
	void RefreshLockMovement();// 0x4a4fe3fee041
	void RefreshLockInputLock();// 0x4a4ee3fee041
	void OnRep_BehaviorControlData();// 0x4a4de3fee041

--------------------------------
Class: BehaviorControlData
	bool bLockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bLockMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: SGPCDeathCameraComponent.ActorComponent.Object
	float MinDistanceCameraToKiller;//[Offset: 0xc0, Size: 0x4]
	float MoveCameraToKillerTime;//[Offset: 0xc4, Size: 0x4]
	Character* KillerMoveTo;//[Offset: 0xf8, Size: 0x8]
	void PostDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x4a58e3fee041
	void ClientStartMoveCameraToKiller(Character* Killer);// 0x4a57e3fee041
	void ClientChangeToSpectatingState();// 0x4a56e3fee041

--------------------------------
Class: SGPCFlowControlComponent.ActorComponent.Object
	enum PlayerEndGameType;//[Offset: 0xc0, Size: 0x1]
	FName PlayerFlowState;//[Offset: 0xc4, Size: 0x8]
	FName OldState;//[Offset: 0xcc, Size: 0x8]
	bool bLoadComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	bool IsCheckingLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]
	bool bClientQuitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1]
	bool IsTimeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 0x1]
	TimerHandle CheckLoadTimeHandle;//[Offset: 0xd8, Size: 0x8]
	bool bNotSendComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool HasSettment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	SGInventory*[] PlayerWeapons;//[Offset: 0xe8, Size: 0x10]
	int PlayerWeaponNum;//[Offset: 0xf8, Size: 0x4]
	float ClientCountDown;//[Offset: 0x104, Size: 0x4]
	WorldSettings* WorldSettingActor;//[Offset: 0x108, Size: 0x8]
	double CheckBeginTime;//[Offset: 0x110, Size: 0x8]
	void UnLimitLevelLoad(bool Enable);// 0x4a80e3fee041
	void SetPlayerEndGameType(enum EndType);// 0x4a7fe3fee041
	void SetIsTimeOut();// 0x4a7ee3fee041
	void SetFlowState(FName NewState);// 0x4a7de3fee041
	void ServerTransmitClientXID(FString ClientXID);// 0x4a7ce3fee041
	void ServerLoadComplete();// 0x4a7be3fee041
	void ServerBroadcastPlayerFinishEvent(PlayerController* Exiting, enum ResultType);// 0x4a7ae3fee041
	void RestartPlayerStateFlow();// 0x4a79e3fee041
	void RefreNeedCheckWeapons();// 0x4a78e3fee041
	void QuitMatch();// 0x4a77e3fee041
	void OnSettlement();// 0x4a76e3fee041
	void OnResRequestEquip();// 0x4a75e3fee041
	void OnRep_PlayerFlowState();// 0x4a74e3fee041
	void OnRep_LoadComplete();// 0x4a73e3fee041
	void OnRep_IsCheckingLoad();// 0x4a72e3fee041
	void OnRep_HasSettment();// 0x4a71e3fee041
	void OnRep_bClientQuitGame();// 0x4a70e3fee041
	void OnProcessPawn(Pawn* Pawn);// 0x4a6fe3fee041
	void OnPlayerReconnect(PlayerController* PlayerController);// 0x4a6ee3fee041
	void OnLoadComplete();// 0x4a6de3fee041
	void OnInventoryGiveComplete();// 0x4a6ce3fee041
	void OnFlowStateSet();// 0x4a6be3fee041
	void NotSendComplete();// 0x4a6ae3fee041
	bool IsSceneLoadCompleted();// 0x4a69e3fee041
	bool HasSettlement();// 0x4a68e3fee041
	bool HasBegunGame();// 0x4a67e3fee041
	void GotoHallRoom(PlayerController* PC);// 0x4a66e3fee041
	bool GetIsLoadComplete();// 0x4a65e3fee041
	FName GetFlowState();// 0x4a64e3fee041
	int GetComponentNetMode();// 0x4a63e3fee041
	void FlushLoading();// 0x4a62e3fee041
	void DismissPlayerTips();// 0x4a61e3fee041
	void DismissPlayer();// 0x4a60e3fee041
	void ClientQuitMatch();// 0x4a5fe3fee041
	void CheckLoad();// 0x4a5ee3fee041
	bool CanWatchGame();// 0x4a5de3fee041
	void BroadcastPlayerFinishEvent(PlayerController* Exiting, enum ResultType);// 0x4a5ce3fee041
	void BroadcastOnReturnToHallRoomEvent(PlayerController* PC);// 0x4a5be3fee041
	void BeginPlayerStateFlow_BP();// 0x4a5ae3fee041
	void BeginPlayerStateFlow();// 0x4a59e3fee041

--------------------------------
Class: SGPCFOVComponent.ActorComponent.Object

--------------------------------
Class: SGPCInputHandleComponent.ActorComponent.Object
	SGInputControlStruct SGInputControlStruct;//[Offset: 0xc4, Size: 0x3]
	void UnSprint();// 0x4abbe3fee041
	void UnlockMoveForward();// 0x4abae3fee041
	void UnloadMagazine();// 0x4ab9e3fee041
	void ToggleProne();// 0x4ab8e3fee041
	void ToggleHeadwear();// 0x4ab7e3fee041
	void ToggleCrouch();// 0x4ab6e3fee041
	void ToggleADSFire();// 0x4ab5e3fee041
	void ThrowWeapon();// 0x4ab4e3fee041
	void ThrowCurrentWeapon();// 0x4ab3e3fee041
	void SwitchFireMode();// 0x4ab2e3fee041
	void StopPreFiring();// 0x4ab1e3fee041
	void StopFire_LeftWeapon();// 0x4ab0e3fee041
	void StopFire();// 0x4aafe3fee041
	void StopAltFire();// 0x4aaee3fee041
	void StartHoldGrenade();// 0x4aade3fee041
	void StartFire_LeftWeapon();// 0x4aace3fee041
	void StartFire();// 0x4aabe3fee041
	void StartAltFire();// 0x4aaae3fee041
	void Sprint();// 0x4aa9e3fee041
	void ScopeNextMagnification();// 0x4aa8e3fee041
	void ReloadFast();// 0x4aa7e3fee041
	void QuickHeal();// 0x4aa6e3fee041
	void PlayerSetupMod();// 0x4aa5e3fee041
	void PlayerCheckWeapon();// 0x4aa4e3fee041
	void PlayerCheckMagazinePC();// 0x4aa3e3fee041
	void PlayerCheckMagazine();// 0x4aa2e3fee041
	void PlayerCheckFireMode();// 0x4aa1e3fee041
	void PlayerCheckBore();// 0x4aa0e3fee041
	void PickupInventory(SGInventory* TargetInv);// 0x4a9fe3fee041
	void OnActivationStateChanged(const bool IsActive);// 0x4a9ee3fee041
	void NextScope();// 0x4a9de3fee041
	void MoveForward(float Value);// 0x4a9ce3fee041
	void LootInventoryReleased();// 0x4a9be3fee041
	void LootInventoryPressed();// 0x4a9ae3fee041
	void LootInventory(Actor* TargetActor);// 0x4a99e3fee041
	void LockMoveForward();// 0x4a98e3fee041
	void LockMove(bool bEnable);// 0x4a97e3fee041
	void LoadMagazine(Actor* TargetInventory);// 0x4a96e3fee041
	void Jump();// 0x4a95e3fee041
	bool IsLockMoveForward();// 0x4a94e3fee041
	bool InteractDoor();// 0x4a93e3fee041
	bool InteractAlarm();// 0x4a92e3fee041
	void Interact();// 0x4a91e3fee041
	bool HasLeftHandWeapon();// 0x4a90e3fee041
	SGInputControlStruct GetInputControlStruct();// 0x4a8fe3fee041
	bool GetCanSprint();// 0x4a8ee3fee041
	bool GetCanMove();// 0x4a8de3fee041
	void DoorUnlock();// 0x4a8ce3fee041
	void DoorKick();// 0x4a8be3fee041
	void DoChat(FString ChatContent);// 0x4a8ae3fee041
	void ChangeClipPC();// 0x4a89e3fee041
	void ChangeClip();// 0x4a88e3fee041

--------------------------------
Class: SGInputControlStruct
	bool BCanMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bCanTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: SGPCInterfaceComponent.ActorComponent.Object

--------------------------------
Class: SGPCLobbyPreviewComponent.ActorComponent.Object

--------------------------------
Class: MFPCLocalFileKillCamComponent.ActorComponent.Object
	int ClientCapWhenDownLoad;//[Offset: 0xb8, Size: 0x4]
	void ServerDownloadReplayData(float ServerTime);// 0x4abfe3fee041
	void OnDownloadReplayDataComplete(const FString ReplayFileName);// 0x4abee3fee041
	void DownloadReplayData(float ServerTime);// 0x4abde3fee041
	void ClientRecieveReplayData(FString ReplayName, const int64 TotalSize, const uint32 StartPos, const byte[] Datas);// 0x4abce3fee041

--------------------------------
Class: SGPCLocalFileKillCamComponent.MFPCLocalFileKillCamComponent.ActorComponent.Object
	void OnPlayerDied(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x4ac1e3fee041
	SGGameInstanceReplaySubsystem* GetReplaySubsystem();// 0x4ac0e3fee041

--------------------------------
Class: SGPCMCameraMaterialComponent.ActorComponent.Object
	class SGCameraMaterial[] CameraMaterialClassList;//[Offset: 0xc0, Size: 0x10]
	SGCameraMaterial*[] CameraMaterialList;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: SGPCMCameraShakeComponent.ActorComponent.Object
	class SGCameraShakeBase[] CameraShakeClassList;//[Offset: 0xc0, Size: 0x10]
	SGCameraShakeBase*[] CameraShakeList;//[Offset: 0xd0, Size: 0x10]
	PlayerCameraManager* PlayerCameraManagerCache;//[Offset: 0xe0, Size: 0x8]

--------------------------------
Class: SGPCMCameraStyleComponent.ActorComponent.Object
	class SGCameraStyle[] CameraStyleClasses;//[Offset: 0xc0, Size: 0x10]
	class SGCameraStyle* DefaultCameraStyleClass;//[Offset: 0xd0, Size: 0x8]
	SGCameraStyle*[] CameraStyles;//[Offset: 0xd8, Size: 0x10]
	SGCameraStyle* DefaultCameraStyle;//[Offset: 0xe8, Size: 0x8]
	delegate ChangeCameraStyleEvent;//[Offset: 0xf0, Size: 0x10]
	void Init();// 0x4ac4e3fee041
	SGCameraStyle* FindBestCameraStyle(Actor* CameraTarget);// 0x4ac3e3fee041
	SGCameraStyle* CreateCameraStyle(class SGCameraStyle CameraStyleClass);// 0x4ac2e3fee041

--------------------------------
Class: SGPCMComponentInterface.Interface.Object
	PlayerCameraManager* GetPlayerCameraManager();// 0x4ac7e3fee041
	FName GetCameraStyle();// 0x4ac6e3fee041
	void ApplyCameraPostProcess(out TViewTarget OutVT, float DeltaTime);// 0x4ac5e3fee041

--------------------------------
Class: SGPCMDepthOfFieldComponent.ActorComponent.Object
	class SGCameraDOF[] CameraDOFClassList;//[Offset: 0xc0, Size: 0x10]
	SGCameraDOF*[] CameraDOFList;//[Offset: 0xd0, Size: 0x10]
	class SGCameraDOF[] ReticleClassList;//[Offset: 0xe0, Size: 0x10]
	SGCameraDOF*[] ReticleEffectList;//[Offset: 0xf0, Size: 0x10]
	SGCameraDOF* CurrentActiveDOF;//[Offset: 0x100, Size: 0x8]
	SGCameraDOF* CurrentActiveReticleEffect;//[Offset: 0x108, Size: 0x8]

--------------------------------
Class: SGPCMessageComponent.ActorComponent.Object
	void BroadcastUseActorFailed(Actor* User, Actor* Actor, enum FailureReason);// 0x4acbe3fee041
	void BroadcastNewBagTipsMessage(enum TipsType);// 0x4acae3fee041
	void BroadcastDeathMessage(PlayerState* KillerPlayerState, PlayerState* VictimPlayerState, Vector VictimLocation, class DamageType DamageTypeClass);// 0x4ac9e3fee041
	void BroadcastCurrentWeaponChanged(SGInventory* OldInventory, SGInventory* NewInventory);// 0x4ac8e3fee041

--------------------------------
Class: SGPCMInterpolationComponent.ActorComponent.Object

--------------------------------
Class: SGPCMMirrorComponent.ActorComponent.Object
	bool bMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: SGPCMotionSensorComponent.ActorComponent.Object
	enum MotionRotateMode;//[Offset: 0xc0, Size: 0x1]
	float MotionRotateSensitivity;//[Offset: 0xc4, Size: 0x4]
	bool bInverseHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bInverseVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	void SetMotionRotateSensitivity(float Sensitivity);// 0x4acfe3fee041
	void SetMotionRotateMode(enum Mode);// 0x4acee3fee041
	void SetInverseVertical(bool bNewInverseVertical);// 0x4acde3fee041
	void SetInverseHorizontal(bool bNewInverseHorizontal);// 0x4acce3fee041

--------------------------------
Class: SGPCMUpdateViewTargetComponent.ActorComponent.Object
	SGCameraStyle* CurrentCameraStyle;//[Offset: 0xc0, Size: 0x8]
	Actor* CurrentViewTarget;//[Offset: 0xc8, Size: 0x8]
	bool bResetInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bRangeLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]

--------------------------------
Class: SGPCOptimizeCharacterDrawPolicyComponent.ActorComponent.Object
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bEnableOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	float ShowSingleMeshScreenSizeThreshold;//[Offset: 0xc4, Size: 0x4]
	float CheckInterval;//[Offset: 0xc8, Size: 0x4]
	int MaxProcessCountPerFrame;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: SGPCPendingMatchComponent.ActorComponent.Object
	void ServerNotifyClientLoadingProcessComplete();// 0x4ad1e3fee041
	void ClientCheckLoadingProcessComplete();// 0x4ad0e3fee041

--------------------------------
Class: SGPCPlayerInput.SGPlayerInput.PlayerInput.Object

--------------------------------
Class: SGPCProcessPenetrationComponent.ActorComponent.Object
	SGInventory* CachedCurrentWeapon;//[Offset: 0xc0, Size: 0x8]
	bool bCanEverEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	void OnShowMergedAvatar(SkeletalMeshComponent* MergedMeshComp, bool bShow);// 0x4ae9e3fee041
	void OnSetPawn(PlayerController* PC, Pawn* NewPawn);// 0x4ae8e3fee041
	void OnChangeCurrentWeaponAdapters(SGInventory* Adapter);// 0x4ae7e3fee041
	void OnChangeCurrentWeapon(SGInventory* OldInventory, SGInventory* NewInventory);// 0x4ae6e3fee041

--------------------------------
Class: SGPCReplayComp.ActorComponent.Object
	bool bNeedHandlePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1]
	bool bNeedHandleRecord;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1]
	void OnReplayStartPlayback(FString MapName, FString ReplayType);// 0x1a41e3fee041
	void OnReplayRecordStarted(FName ReplayType);// 0x1a40e3fee041
	void OnRecordStarted();// 0x1a3fe3fee041
	void OnPlaybackStarted();// 0x1a3ee3fee041
	SGDemoNetDriver* GetSGDemoNetDriver();// 0x1a3de3fee041
	SGGameInstanceReplaySubsystem* GetReplaySubsystem();// 0x1a3ce3fee041
	SGReplayController* GetReplayController();// 0x1a3be3fee041

--------------------------------
Class: SGPCReplayKillCamPlayComp.SGPCReplayComp.ActorComponent.Object
	class SGHUD* HUDClass;//[Offset: 0xc0, Size: 0x8]
	Character* Victim;//[Offset: 0xc8, Size: 0x8]
	Character* Killer;//[Offset: 0xd0, Size: 0x8]
	int bIsAllActorsReady;//[Offset: 0xd8, Size: 0x4]
	delegate OnAllActorsReady;//[Offset: 0xe0, Size: 0x10]
	delegate OnKillCamReady;//[Offset: 0xf0, Size: 0x10]
	void OnVictimReady(Character* InVictim);// 0x1a48e3fee041
	void OnTriggerReplayPlayback(FString MapName, FString ReplayType);// 0x1a47e3fee041
	void OnSpectatingTargetDestroyed(Actor* InActor);// 0x1a46e3fee041
	void OnKillerReady(Character* InKiller);// 0x1a45e3fee041
	void OnKillCamReady__DelegateSignature();// 0x1a44e3fee041
	void OnCharacterReady__DelegateSignature(Actor* FollowTarget);// 0x1a43e3fee041
	void OnAllActorsReady__DelegateSignature();// 0x1a42e3fee041

--------------------------------
Class: SGPCReplayKillCamRecComp.SGPCReplayComp.ActorComponent.Object
	float RecordLengthBeforeDead;//[Offset: 0xbc, Size: 0x4]
	float RecordLengthAfterDead;//[Offset: 0xc0, Size: 0x4]
	void OnRecordKillCamEnd();// 0x4aefe3fee041
	void OnKilled(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x4aeee3fee041
	void OnGameFlowStateChanged(FName NewState, FName OldState);// 0x4aede3fee041
	void OnCharacterDieInClient(SGCharacter* DiedCharacter);// 0x4aece3fee041
	float GetRecordLengthBeforeDead();// 0x4aebe3fee041
	float GetRecordLengthAfterDead();// 0x4aeae3fee041

--------------------------------
Class: SGPCReplayObserverComp.SGPCReplayComp.ActorComponent.Object
	class SGHUD* ObserverHUDClass;//[Offset: 0xc0, Size: 0x8]
	class SpectatorPawn* ObserverPawnClass;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: SGPCRotateRateComponent.ActorComponent.Object
	float BaseTurnRate;//[Offset: 0xc0, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0xc4, Size: 0x4]
	float BaseTurnRateMobile;//[Offset: 0xc8, Size: 0x4]
	float BaseLookUpRateMobile;//[Offset: 0xcc, Size: 0x4]
	float GlobalRotateSensitivity;//[Offset: 0xd0, Size: 0x4]
	float RotateSensitivityScale_Crouch;//[Offset: 0xd4, Size: 0x4]
	float RotateSensitivityScale_Prone;//[Offset: 0xd8, Size: 0x4]
	Vector2D RotateSensitivityScaleByYawDelta_ProneTurnInPlace;//[Offset: 0xdc, Size: 0x8]
	float RotateSensitivityTargetScale_ProneTurnInPlace;//[Offset: 0xe4, Size: 0x4]
	float RotateSensitivityScale_ProneTurnInPlace;//[Offset: 0xe8, Size: 0x4]
	float ScopeRotateRate_NoGlass;//[Offset: 0xec, Size: 0x4]
	float ScopeRotateRate_RedPoint;//[Offset: 0xf0, Size: 0x4]
	float ScopeRotateRate_Hologram;//[Offset: 0xf4, Size: 0x4]
	float ScopeRotateRate_Mechanical;//[Offset: 0xf8, Size: 0x4]
	float ScopeRotateRate_VSS;//[Offset: 0xfc, Size: 0x4]
	float ScopeRotateRate_x2;//[Offset: 0x100, Size: 0x4]
	float ScopeRotateRate_x3;//[Offset: 0x104, Size: 0x4]
	float ScopeRotateRate_x4;//[Offset: 0x108, Size: 0x4]
	float ScopeRotateRate_x6;//[Offset: 0x10c, Size: 0x4]
	float ScopeRotateRate_x8;//[Offset: 0x110, Size: 0x4]
	bool bUseFireSensitive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	float FireScopeRotateRate_NoGlass;//[Offset: 0x118, Size: 0x4]
	float FireScopeRotateRate_Mechanical;//[Offset: 0x11c, Size: 0x4]
	float FireScopeRotateRate_RedPoint;//[Offset: 0x120, Size: 0x4]
	float FireScopeRotateRate_x1;//[Offset: 0x124, Size: 0x4]
	float FireScopeRotateRate_x2;//[Offset: 0x128, Size: 0x4]
	float FireScopeRotateRate_x3;//[Offset: 0x12c, Size: 0x4]
	float FireScopeRotateRate_x4;//[Offset: 0x130, Size: 0x4]
	float FireScopeRotateRate_x6;//[Offset: 0x134, Size: 0x4]
	float FireScopeRotateRate_x8;//[Offset: 0x138, Size: 0x4]
	float FireScopeRotateRate_VSS;//[Offset: 0x13c, Size: 0x4]
	float FireScopeRotateRate_Hologram;//[Offset: 0x140, Size: 0x4]
	float CurrentRotateRateScale;//[Offset: 0x180, Size: 0x4]

--------------------------------
Class: SGPCRPCFunTransformComponent.ActorComponent.Object

--------------------------------
Class: SGPCServerCommandComponent.ActorComponent.Object
	ParticleSystemComponent*[] ParticleSystemComponentArray;//[Offset: 0xc0, Size: 0x10]
	PlayerStart*[] PlayerStartArray;//[Offset: 0xd0, Size: 0x10]
	Controller* MyController;//[Offset: 0xe8, Size: 0x8]
	class Character[] FakeCharacterClassList;//[Offset: 0xf0, Size: 0x10]
	class SGInventory[] TestAvatarList;//[Offset: 0x100, Size: 0x10]
	void WeaponTraceDebug(bool bEnable);// 0x4c55e3fee041
	void WeaponDebugMode(bool bEnable);// 0x4c54e3fee041
	void Walk();// 0x4c53e3fee041
	void UpdateBadgeByTag(FName CharacterTag, int64 badgeId, int AttachPos);// 0x4c52e3fee041
	void UpdateAvatarByTag(FName CharacterTag, enum InCharacterSex, FString InAvatarsIdStr);// 0x4c51e3fee041
	void UnlockPlayer();// 0x4c50e3fee041
	void UnloadCharacterMesh();// 0x4c4fe3fee041
	void TraceWeight();// 0x4c4ee3fee041
	void TraceWeaponState(FName CharacterTag);// 0x4c4de3fee041
	void TraceEquipedInventories(FName CharacterTag);// 0x4c4ce3fee041
	void TraceCharacterMorphTargets(FName CharacterTag);// 0x4c4be3fee041
	void TraceAllInventories(FName CharacterTag);// 0x4c4ae3fee041
	void ToggleVisualLoggerRecordingOnServer();// 0x4c49e3fee041
	void ToggleLight(FString LightName);// 0x4c48e3fee041
	void ToggleGameplayDebuggerSlot(int SlotIdx);// 0x4c47e3fee041
	void ToggleGameplayDebuggerCamera();// 0x4c46e3fee041
	void ToggleGameplayDebugger();// 0x4c45e3fee041
	void ToggleCharacterDebugArrow(bool bJustAI);// 0x4c44e3fee041
	void ToggleCamera();// 0x4c43e3fee041
	void ToggleBulletSpread();// 0x4c42e3fee041
	void ToggleBulletRecoil();// 0x4c41e3fee041
	void ToggleBulletHitLog();// 0x4c40e3fee041
	void ToggleBulletGravity();// 0x4c3fe3fee041
	void ToggleAutoAim();// 0x4c3ee3fee041
	void ToggleAITrackLOG();// 0x4c3de3fee041
	void ToggleAIDirectorDebugInfo();// 0x4c3ce3fee041
	void ToggleAIDebugInfo();// 0x4c3be3fee041
	void ToggleAIDebugDraw();// 0x4c3ae3fee041
	void ToBeScav();// 0x4c39e3fee041
	void ThrowEquip(enum AttachPos);// 0x4c38e3fee041
	void ThrowDown(bool bIsThrowDown);// 0x4c37e3fee041
	void TestWeaponTrace();// 0x4c36e3fee041
	void TestUpdateAvatar();// 0x4c35e3fee041
	void TestThrowWeaponGroup(int Slot);// 0x4c34e3fee041
	void TestSwitchWeaponGroup(int Slot);// 0x4c33e3fee041
	void TestStopFire(int FireMode);// 0x4c32e3fee041
	void TestStopDumpStat();// 0x4c31e3fee041
	void TestStopAutoMove();// 0x4c30e3fee041
	void TestStartFire(int FireMode);// 0x4c2fe3fee041
	void TestSpawnParticle(FString ClassName, FString position);// 0x4c2ee3fee041
	void TestShowAvatarInfo(bool bShow);// 0x4c2de3fee041
	void TestSetWeaponLOD(int InLod);// 0x4c2ce3fee041
	void TestSetEndurance();// 0x4c2be3fee041
	void TestSetCharacterMeshLoc(bool bNearestCharacter);// 0x4c2ae3fee041
	void TestRewindBody(FName BoneName);// 0x4c29e3fee041
	void TestMergeWeapon();// 0x4c28e3fee041
	void TestMergeAvatar();// 0x4c27e3fee041
	void TestMerge3PAvatar();// 0x4c26e3fee041
	void TestMatDynamicMode(int MatModeID);// 0x4c25e3fee041
	void TestFunctionHaotao();// 0x4c24e3fee041
	void TestFoldStock(bool bDoFoldStock, bool bCurrentWeapon);// 0x4c23e3fee041
	void TestFireInServer(float x1, float y1, float z1, float x2, float y2, float z2);// 0x4c22e3fee041
	void TestEscape();// 0x4c21e3fee041
	void TestEnvironment();// 0x4c20e3fee041
	void TestDying();// 0x4c1fe3fee041
	void TestDrawSphereServer(out FString CenterLocStr, float Radius);// 0x4c1ee3fee041
	void TestDrawLineTraceServer(out FString StartLocStr, out FString EndLocStr);// 0x4c1de3fee041
	void TestDestroyParticle();// 0x4c1ce3fee041
	void TestDebuff(enum EnduranceType, FString DebuffName);// 0x4c1be3fee041
	void TestDamageHead(float Damage, enum HeadHitSubGroupType);// 0x4c1ae3fee041
	void TestDamage(float Damage, enum EnduranceType);// 0x4c19e3fee041
	void TestBoneDamage(int Damage, FString BoneName);// 0x4c18e3fee041
	void TestBeginDumpStat();// 0x4c17e3fee041
	void TestBeginAutoMove();// 0x4c16e3fee041
	void TestAudioVolume(float Volume);// 0x4c15e3fee041
	void TestAnim(FString AnimationName);// 0x4c14e3fee041
	void TestAddNode(FString TargetPosition);// 0x4c13e3fee041
	void SwitchWeaponLOD(int LODNum);// 0x4c12e3fee041
	void SwitchViewTarget(FName CameraTag);// 0x4c11e3fee041
	void SwitchToPCControl();// 0x4c10e3fee041
	void SwitchToMobileControl();// 0x4c0fe3fee041
	void SuicideAndSpecAI();// 0x4c0ee3fee041
	void SuicideAndSpec();// 0x4c0de3fee041
	void Suicide();// 0x4c0ce3fee041
	void StopSpawnAIAtAllSpawnPoint();// 0x4c0be3fee041
	void StopRecordingReplay();// 0x4c0ae3fee041
	void StopMovie();// 0x4c09e3fee041
	void StopDSRecordingReplay();// 0x4c08e3fee041
	void StatStopFile(bool bServerSide);// 0x4c07e3fee041
	void StatStartFile(bool bServerSide);// 0x4c06e3fee041
	void StartSpectatingAI(Character* SpecAIPawn);// 0x4c05e3fee041
	void StartSpectating();// 0x4c04e3fee041
	void StartSpawnAIAtAllSpawnPoint(bool bRandomGroupID, bool bUseDataTableRandom);// 0x4c03e3fee041
	void StartRecordingReplay(FString InName, FString FriendlyName);// 0x4c02e3fee041
	void StartMatch();// 0x4c01e3fee041
	void SpeedUp(bool bEnable, float Scale);// 0x4c00e3fee041
	void SpawnNPCAI(int Count);// 0x4bffe3fee041
	void SpawnFakeCharacter(int Index);// 0x4bfee3fee041
	void Slomo(float NewTimeDilation);// 0x4bfde3fee041
	void ShowSprintADSInfo(bool bShow);// 0x4bfce3fee041
	void ShowInvID(bool bShow);// 0x4bfbe3fee041
	void ShowHeadHitSubgroup(float Period, bool bDrawSocketsInfo, bool bDrawColorSamples);// 0x4bfae3fee041
	void ShowDormancyActor();// 0x4bf9e3fee041
	void ShowAIInfo(FString ShowAIInfoParams);// 0x4bf8e3fee041
	void SetWeaponSwayProperty(FString PropertyName, const float Value);// 0x4bf7e3fee041
	void SetSpreadAccuracyTemp(float Value);// 0x4bf6e3fee041
	void SetSpeedSen(float Value, float ValueFix);// 0x4bf5e3fee041
	void SetScreenEffectPadding(float Left, float Top, float Right, float Bottom);// 0x4bf4e3fee041
	void SetScopeScale(float TranslationScale, float RotationScale);// 0x4bf3e3fee041
	void SetRightAnalogDeadZone(float X, float Y);// 0x4bf2e3fee041
	void SetRecoilVerticalTemp(float Value);// 0x4bf1e3fee041
	void SetRecoilHorizontalTemp(float Value);// 0x4bf0e3fee041
	void SetOutOfEndurance(enum Type);// 0x4befe3fee041
	void SetNextLoadingMovie(FString MovieName, float MinMovieTime, FString OrderMap);// 0x4beee3fee041
	void SetMotionRotateSensitivity(float Sensitivity);// 0x4bede3fee041
	void SetMotionRotateMode(byte Mode);// 0x4bece3fee041
	void SetMoisture(float Value);// 0x4bebe3fee041
	void SetMaxAxis(float Value);// 0x4beae3fee041
	void SetLoadProtect(bool bEnable);// 0x4be9e3fee041
	void SetLightRot(FString LightName, float X, float Y, float Z);// 0x4be8e3fee041
	void SetLightPos(FString LightName, float X, float Y, float Z);// 0x4be7e3fee041
	void SetLightColor(FString LightName, float R, float G, float B);// 0x4be6e3fee041
	void SetLightBrightness(FString LightName, float Brightness);// 0x4be5e3fee041
	void SetItemInspectedByItemID(int ItemID);// 0x4be4e3fee041
	void SetHealthMax(float Value);// 0x4be3e3fee041
	void SetHealth(float Value);// 0x4be2e3fee041
	void SetGlobalRTPC(FString RTPCParamName, float RTPCValue);// 0x4be1e3fee041
	void SetGameTime(int TimeSecond);// 0x4be0e3fee041
	void SetFood(float Value);// 0x4bdfe3fee041
	void SetFixedSen(float Value);// 0x4bdee3fee041
	void SetEnergyMax(float Value);// 0x4bdde3fee041
	void SetEnergy(float Value);// 0x4bdce3fee041
	void SetEndurance(enum Type, float Value);// 0x4bdbe3fee041
	void SetEmitterRTPC(FString RTPCParamName, float RTPCValue, int TargetType);// 0x4bdae3fee041
	void SetDualFOV(float DualFOVValue);// 0x4bd9e3fee041
	void SetDisSen(float Value);// 0x4bd8e3fee041
	void SetDisOrigSen(float Value);// 0x4bd7e3fee041
	void SetCameraStyle(FName NewCameraStyle);// 0x4bd6e3fee041
	void SetCameraAnimationScaler(int ScalerLevel);// 0x4bd5e3fee041
	void SetBloomThreshold(float threshold);// 0x4bd4e3fee041
	void SetBloomIntensity(float Intensity);// 0x4bd3e3fee041
	void SetArmorDurability(int ArmorSlotId, float InDurability);// 0x4bd2e3fee041
	void SetAndroidMobileRGB565(bool bOpen);// 0x4bd1e3fee041
	void SetAndroidMobileLDRMSAADebugValue(bool bOpen);// 0x4bd0e3fee041
	void SetAllEnduranceFull();// 0x4bcfe3fee041
	void SetAITrackLOG(bool bEnable);// 0x4bcee3fee041
	void SetAIInfoCount(int InMaxCount);// 0x4bcde3fee041
	void SetAIBTreeMonitorEnabled(bool Value);// 0x4bcce3fee041
	void SetAdsMoaYTemp(float Value, bool bRandom);// 0x4bcbe3fee041
	void SetAdsMoaXTemp(float Value, bool bRandom);// 0x4bcae3fee041
	void ServerWeaponDebugMode(bool bEnable);// 0x4bc9e3fee041
	void ServerWalk();// 0x4bc8e3fee041
	void ServerUnlockPlayer();// 0x4bc7e3fee041
	void ServerToggleVisualLoggerRecordingOnServer();// 0x4bc6e3fee041
	void ServerToggleAITrackLOG();// 0x4bc5e3fee041
	void ServerToggleAIDirectorDebugInfo();// 0x4bc4e3fee041
	void ServerToggleAIDebugInfo();// 0x4bc3e3fee041
	void ServerToggleAIDebugDraw();// 0x4bc2e3fee041
	void ServerToBeScav();// 0x4bc1e3fee041
	void ServerThrowEquip(enum AttachPos);// 0x4bc0e3fee041
	void ServerTestUpdateAvatar();// 0x4bbfe3fee041
	void ServerTestStopAutoMove();// 0x4bbee3fee041
	void ServerTestRewindBody(FName InBoneName);// 0x4bbde3fee041
	void ServerTestEscape();// 0x4bbce3fee041
	void ServerTestDying();// 0x4bbbe3fee041
	void ServerTestDebuff(enum EnduranceType, FString DebuffName);// 0x4bbae3fee041
	void ServerTestDamageHead(int Damage, enum HeadHitSubGroupType);// 0x4bb9e3fee041
	void ServerTestDamage(int Damage, enum EnduranceType);// 0x4bb8e3fee041
	void ServerTestBoneDamage(int Damage, FString BoneName);// 0x4bb7e3fee041
	void ServerTestAddNode(FString TargetPostion);// 0x4bb6e3fee041
	void ServerSuicideAndSpecAI();// 0x4bb5e3fee041
	void ServerSuicideAndSpec();// 0x4bb4e3fee041
	void ServerSuicide();// 0x4bb3e3fee041
	void ServerStopSpawnAIAtAllSpawnPoint();// 0x4bb2e3fee041
	void ServerStopDSRecordingReplay();// 0x4bb1e3fee041
	void ServerStatStopFile();// 0x4bb0e3fee041
	void ServerStatStartFile();// 0x4bafe3fee041
	void ServerStartSpawnAIAtAllSpawnPoint(bool bRandomGroupID, bool bUseDataTableRandom);// 0x4baee3fee041
	void ServerStartMatch();// 0x4bade3fee041
	void ServerSpeedUp(bool bEnable, float Scale);// 0x4bace3fee041
	void ServerSpawnNPCAI(int Count);// 0x4babe3fee041
	void ServerSetWeaponSwayProperty(FString PropertyName, const float Value);// 0x4baae3fee041
	void ServerSetScopeScale(float TranslationScale, float RotationScale);// 0x4ba9e3fee041
	void ServerSetOutOfEndurance(enum Type);// 0x4ba8e3fee041
	void ServerSetMoisture(float Value);// 0x4ba7e3fee041
	void ServerSetLoadProtect(bool bEnable);// 0x4ba6e3fee041
	void ServerSetItemInspectedByItemID(int ItemID);// 0x4ba5e3fee041
	void ServerSetHealthMax(float Value);// 0x4ba4e3fee041
	void ServerSetHealth(float Value);// 0x4ba3e3fee041
	void ServerSetGameTime(int TimeSecond);// 0x4ba2e3fee041
	void ServerSetFood(float Value);// 0x4ba1e3fee041
	void ServerSetEnergyMax(float Value);// 0x4ba0e3fee041
	void ServerSetEnergy(float Value);// 0x4b9fe3fee041
	void ServerSetEndurance(enum Type, float Value);// 0x4b9ee3fee041
	void ServerSetDebugCharacterBodies(bool bEnable);// 0x4b9de3fee041
	void ServerSetDebugAIBodies(bool bEnable);// 0x4b9ce3fee041
	void ServerSetArmorDurability(int ArmorSlotId, float InDurability);// 0x4b9be3fee041
	void ServerSetAITrackLOG(bool bEnable);// 0x4b9ae3fee041
	void ServerSetAIBTreeMonitorEnabled(bool Value);// 0x4b99e3fee041
	void ServerResetAllLootPoint(bool bRespawn);// 0x4b98e3fee041
	void ServerRescue();// 0x4b97e3fee041
	void ServerRemovePlayerTeam();// 0x4b96e3fee041
	void ServerRemoveGameplayEffect(FString EffectClassName);// 0x4b95e3fee041
	void ServerReleaseDSStaticMesh();// 0x4b94e3fee041
	void ServerReBornOnSpecfiedLoc(bool bEnable, FString Location);// 0x4b93e3fee041
	void ServerRebornOnLastPos(bool bReborn);// 0x4b92e3fee041
	void ServerPvdConnect();// 0x4b91e3fee041
	void ServerPrintOwnedTags();// 0x4b90e3fee041
	void ServerPrintIsVisualLoggerRecordingOnServer();// 0x4b8fe3fee041
	void ServerPrintAllInventoryUClass();// 0x4b8ee3fee041
	void ServerMoveToNextPlayerStart(int Step);// 0x4b8de3fee041
	void ServerLogOnDs(FString Param1, FString Param2);// 0x4b8ce3fee041
	void ServerLockPlayer();// 0x4b8be3fee041
	void ServerKillNearestNPC(int KillCount);// 0x4b8ae3fee041
	void ServerKillAllNPC();// 0x4b89e3fee041
	void ServerKangyiwangChangeAnimBP();// 0x4b88e3fee041
	void ServerInfiniteMoisture(bool bInfinite);// 0x4b87e3fee041
	void ServerInfiniteFood(bool bInfinite);// 0x4b86e3fee041
	void ServerInfiniteEnergy(bool bInfinite);// 0x4b85e3fee041
	void ServerInfiniteEndurance(bool bInfinite);// 0x4b84e3fee041
	void ServerInfiniteAmmo(bool bInfinite);// 0x4b83e3fee041
	void ServerInfiniteAll(bool bInfinite);// 0x4b82e3fee041
	void ServerGoToSign();// 0x4b81e3fee041
	void ServerGod();// 0x4b80e3fee041
	void ServerGiveWeaponByItemID(int64 ItemID, bool bAsync);// 0x4b7fe3fee041
	void ServerGiveWeapon(FString WeaponName);// 0x4b7ee3fee041
	void ServerGiveInventory(FString InventoryName);// 0x4b7de3fee041
	void ServerGhost();// 0x4b7ce3fee041
	void ServerFoldStock(SGInventory* Weapon, bool bDoFoldStock);// 0x4b7be3fee041
	void ServerExecCommand(FString CommandString);// 0x4b7ae3fee041
	void ServerEnableAIPercetionLines();// 0x4b79e3fee041
	void ServerDumpActiveGameplayEffects();// 0x4b78e3fee041
	void ServerDSReplay(FString Command, FString Param);// 0x4b77e3fee041
	void ServerDsCmd(FString Cmd);// 0x4b76e3fee041
	void ServerDoTransportToEnemy(int Index);// 0x4b75e3fee041
	void ServerDoTransport(FString InPos);// 0x4b74e3fee041
	void ServerDoRotate(FString InRot);// 0x4b73e3fee041
	void ServerDoLocalTransport(FString InPos);// 0x4b72e3fee041
	void ServerDiscardAllInventory();// 0x4b71e3fee041
	void ServerDisableAISpawn(bool Disable);// 0x4b70e3fee041
	void ServerDestroyAllNPC();// 0x4b6fe3fee041
	void ServerDebugDBNO();// 0x4b6ee3fee041
	void ServerDBNO(bool bIsDBNO);// 0x4b6de3fee041
	void ServerCorrectStance();// 0x4b6ce3fee041
	void ServerClearAIDeathBox();// 0x4b6be3fee041
	void ServerCheat(FString Msg);// 0x4b6ae3fee041
	void ServerChangeTeam(int NewTeamIndex);// 0x4b69e3fee041
	void ServerChangeFaction(enum NewFaction);// 0x4b68e3fee041
	void ServerBeKilledDamage(bool bShow);// 0x4b67e3fee041
	void ServerAutoMove();// 0x4b66e3fee041
	void ServerAutoGive(bool bInEnable);// 0x4b65e3fee041
	void ServerAutoFull();// 0x4b64e3fee041
	void ServerApplyGameplayEffect(FString EffectClassName);// 0x4b63e3fee041
	void ServerAllGod();// 0x4b62e3fee041
	void ServerAITrackLOG();// 0x4b61e3fee041
	void Screen();// 0x4b60e3fee041
	void ResetAllLootPoint(bool bRespawn);// 0x4b5fe3fee041
	void Rescue();// 0x4b5ee3fee041
	void ReplayGotoTimeInSeconds();// 0x4b5de3fee041
	void RemovePlayerTeam();// 0x4b5ce3fee041
	void RemoveGameplayEffect(FString EffectClassName);// 0x4b5be3fee041
	void ReleaseDSStaticMesh();// 0x4b5ae3fee041
	void ReBornOnSpecfiedLoc(bool bEnable, FString Location);// 0x4b59e3fee041
	void RebornOnLastPos(bool bReborn);// 0x4b58e3fee041
	void RebaseWorldLocation();// 0x4b57e3fee041
	void PvdConnectServer();// 0x4b56e3fee041
	void PvdConnectClient();// 0x4b55e3fee041
	void PrintServerOwnedTags();// 0x4b54e3fee041
	void PrintScreenInfo(bool bPrint);// 0x4b53e3fee041
	void PrintIsVisualLoggerRecordingOnServer();// 0x4b52e3fee041
	void PrintCameraLoc();// 0x4b51e3fee041
	void PrintAllInventoryUClass(int ClientOrServerOrBoth);// 0x4b50e3fee041
	void PreviewCharacterViewWeapon(FName CharacterTag, bool bPlayIdlePose);// 0x4b4fe3fee041
	void PlayReplay(FString InName);// 0x4b4ee3fee041
	void PlayKillCam();// 0x4b4de3fee041
	void PlayFacialAnim(FString AnimationName, FName SectionName, FName CharacterTag);// 0x4b4ce3fee041
	void PlayerSetLowReady(bool bBeginOrEndLowReady);// 0x4b4be3fee041
	void PlayCharacterMontage(FString AnimationName, FString WeaponAnimationName, FName CharacterTag);// 0x4b4ae3fee041
	void PlayAnim(FString AnimationName, FName SectionName, FName CharacterTag);// 0x4b49e3fee041
	void MoveToNextPlayerStart(int Step);// 0x4b48e3fee041
	void LOGPerceptionActor();// 0x4b47e3fee041
	void LogOnDs(FString Param1, FString Param2);// 0x4b46e3fee041
	void LockPlayer();// 0x4b45e3fee041
	void LockMove(bool bEnable);// 0x4b44e3fee041
	void LoadCharacterMesh();// 0x4b43e3fee041
	void ListAnim();// 0x4b42e3fee041
	void LightShadow(FString LightName, bool bCastShadow);// 0x4b41e3fee041
	void LevelDebugInfo();// 0x4b40e3fee041
	void KillNearestNPC(int KillCount);// 0x4b3fe3fee041
	void KillDamage();// 0x4b3ee3fee041
	void KillAllNPC();// 0x4b3de3fee041
	void KangyiwangChangeAnimBP();// 0x4b3ce3fee041
	void InhibiteSense(FName Sense, bool Value);// 0x4b3be3fee041
	void InfiniteMoisture(bool bInfinite);// 0x4b3ae3fee041
	void InfiniteFood(bool bInfinite);// 0x4b39e3fee041
	void InfiniteEnergy(bool bInfinite);// 0x4b38e3fee041
	void InfiniteEndurance(bool bInfinite);// 0x4b37e3fee041
	void InfiniteAmmo(bool bInfinite);// 0x4b36e3fee041
	void InfiniteAll(bool bInfinite);// 0x4b35e3fee041
	void GoToSign();// 0x4b34e3fee041
	void God();// 0x4b33e3fee041
	void GiveWeapon(FString WeaponName);// 0x4b32e3fee041
	void GiveInventoryByItemID(int64 ItemID, bool bAsync);// 0x4b31e3fee041
	void GiveInventory(FString InventoryName);// 0x4b30e3fee041
	void Ghost();// 0x4b2fe3fee041
	void GetGlobalRTPC(FString RTPCParamName);// 0x4b2ee3fee041
	void GetEmitterRTPC(FString RTPCParamName, int TargetType);// 0x4b2de3fee041
	void GetAvatarTypeByInventoryId(int64 InventoryID);// 0x4b2ce3fee041
	void GetAndroidMobileRGB565();// 0x4b2be3fee041
	void GetAndroidMobileLDRMSAADebugValue();// 0x4b2ae3fee041
	void FreeAssemble(bool bFree);// 0x4b29e3fee041
	void ForceSetAvatarFPPState(FName CharacterTag, bool bIsFPP);// 0x4b28e3fee041
	void FlushLevelStreaming();// 0x4b27e3fee041
	void ExportPlayerStart();// 0x4b26e3fee041
	void ExecServerCommand(FString CommandString);// 0x4b25e3fee041
	void EnableWorldTick(bool bEnable);// 0x4b24e3fee041
	void EnableWeaponTrace(bool bEnable);// 0x4b23e3fee041
	void EnableSafeZone(bool bEnable);// 0x4b22e3fee041
	void EnableRigidBodySimulation(bool bEnable);// 0x4b21e3fee041
	void EnablePenetrationProcess(bool bEnable);// 0x4b20e3fee041
	void EnableLeanDrawDebugTrace(byte DrawType);// 0x4b1fe3fee041
	void EnableDualFOV(bool bEnable);// 0x4b1ee3fee041
	void EnableBulletPool(bool bEnable);// 0x4b1de3fee041
	void EnableAnimationBudget(bool bEnable);// 0x4b1ce3fee041
	void EnableAIPercetionLines();// 0x4b1be3fee041
	void DumpActiveGameplayEffects(int DumpMode);// 0x4b1ae3fee041
	void DSReplay(FString Command, FString Param);// 0x4b19e3fee041
	void DsCmd(FString Cmd);// 0x4b18e3fee041
	void DrawWeaponDirection(bool bShow);// 0x4b17e3fee041
	void DrawServerCharacterBodies(bool bEnable);// 0x4b16e3fee041
	void DrawServerAIBodies(bool bEnable);// 0x4b15e3fee041
	void DownloadAndPlayReplay();// 0x4b14e3fee041
	void DoTransportToEnemy(int Index);// 0x4b13e3fee041
	void DoTransport(FString InPos);// 0x4b12e3fee041
	void DoRotate(FString InRot);// 0x4b11e3fee041
	void DoRecord(FString Context);// 0x4b10e3fee041
	void DoRebaseOrigin();// 0x4b0fe3fee041
	void DoLocalTransport(FString InPos);// 0x4b0ee3fee041
	void DiscardAllInventory();// 0x4b0de3fee041
	void DisableAISpawn(bool Disable);// 0x4b0ce3fee041
	void DestroyAllNPC();// 0x4b0be3fee041
	void DebugShowCrosshair(bool bEnable);// 0x4b0ae3fee041
	void DebugDBNO();// 0x4b09e3fee041
	void DebugCharacterEndurance(bool bDraw);// 0x4b08e3fee041
	void DebugBulletTrace(bool bEnable);// 0x4b07e3fee041
	void DebugBulletLine(bool bEnable);// 0x4b06e3fee041
	void DebugAutoAim();// 0x4b05e3fee041
	void DeactiveStreamingLevel();// 0x4b04e3fee041
	void DBNO(bool bIsDBNO);// 0x4b03e3fee041
	void CorrectStance();// 0x4b02e3fee041
	void CloseBag();// 0x4b01e3fee041
	void ClientSpeedHack(float Speed);// 0x4b00e3fee041
	void ClientGravityHack(float GravityScale);// 0x4affe3fee041
	void ClientAutoScript(FString LuaScript, bool bStart, bool bLoop, bool bRandSpawn);// 0x4afee3fee041
	void ClientAITrackLOG(FString Title, FString Message);// 0x4afde3fee041
	void ClearAIDeathBox();// 0x4afce3fee041
	void CharacterRTCameraAddOffset(FString InLocationOffset, FName CharacterTag);// 0x4afbe3fee041
	void ChangeTeam(int NewTeamIndex);// 0x4afae3fee041
	void ChangeFaction(enum NewFaction);// 0x4af9e3fee041
	void BeKilledDamage(bool bShow);// 0x4af8e3fee041
	void AutoTurn(float InMinAutoTurnRate, float InMaxAutoTurnRate);// 0x4af7e3fee041
	void AutoGive(bool bInEnable);// 0x4af6e3fee041
	void AutoFull();// 0x4af5e3fee041
	void ApplyGameplayEffect(FString EffectClassName);// 0x4af4e3fee041
	void AllGod();// 0x4af3e3fee041
	void AITrackLOG();// 0x4af2e3fee041
	void AIDebugCmd(out const FString DebugCmd);// 0x4af1e3fee041
	void ActiveStreamingLevel(FString LevelName);// 0x4af0e3fee041

--------------------------------
Class: SGPCSwitchLevelComponent.ActorComponent.Object
	void LoadToMap_Lobby();// 0x4c8ee3fee041

--------------------------------
Class: SGPCThermalViewComponent.ActorComponent.Object
	bool bThermalViewActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	MaterialParameterCollection* ThermalMaterialParameterCollection;//[Offset: 0xc8, Size: 0x8]
	FName EnabledParameterName;//[Offset: 0xd0, Size: 0x8]
	FName ModeParameterName;//[Offset: 0xd8, Size: 0x8]
	SGInventory* CacheSourceInventory;//[Offset: 0xe8, Size: 0x8]
	SGInventory* SourceHeadwearInventory;//[Offset: 0x100, Size: 0x8]
	SGInventory* SourceScopeInventory;//[Offset: 0x108, Size: 0x8]
	SGThermalImagerParams[] DefaultThermalImagerParams;//[Offset: 0x110, Size: 0x10]
	delegate OnThermalViewStateChanged;//[Offset: 0x120, Size: 0x10]
	PostProcessVolume* PostProcessVolume;//[Offset: 0x138, Size: 0x8]
	void ToggleThermalViewVisualEffect(bool bActived, SGThermalImagerParams Params);// 0x4c95e3fee041
	void OnSourceInventoryOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x4c94e3fee041
	void OnShowMergedAvatar(Character* Character, SkeletalMeshComponent* MergedMeshComp, bool bShow);// 0x4c93e3fee041
	void OnPlayerCarriedThermalDevice();// 0x4c92e3fee041
	bool IsThermalViewActived();// 0x4c91e3fee041
	void InternalActiveThermalView(bool bActive, SGThermalImagerParams Params);// 0x4c90e3fee041
	enum GetThermalImagerType();// 0x4c8fe3fee041

--------------------------------
Class: SGPCWatchGameComponent.ActorComponent.Object
	SGWatchGameSettleData WatchGameSettleData;//[Offset: 0xc0, Size: 0x30]
	int KillerTitle;//[Offset: 0xf0, Size: 0x4]
	enum WatchGameState;//[Offset: 0xf4, Size: 0x1]
	void SetWatchGameState(enum InWatchGameState);// 0x4caae3fee041
	void SetWatchData(FString MurderName, uint64 MurderID, bool MurderIsAI, int Result, int TeamType, int GameTime, int game_mode);// 0x4ca9e3fee041
	void SetKillerTitle(int KillerTitleID);// 0x4ca8e3fee041
	void ServerSetWatchGameState(enum InWatchGameState);// 0x4ca7e3fee041
	void ServerSetWatchData(FString MurderName, uint64 MurderID, bool MurderIsAI, int Result, int TeamType, int GameTime, int game_mode);// 0x4ca6e3fee041
	void ServerSetbHasTeammate(bool bhasTeammate);// 0x4ca5e3fee041
	void OpenResultUI();// 0x4ca4e3fee041
	void OnReq_WatchPawn_BP();// 0x4ca3e3fee041
	void OnReq_WatchPawn();// 0x4ca2e3fee041
	void OnReq_WatchGameState_BP();// 0x4ca1e3fee041
	void OnReq_WatchGameState();// 0x4ca0e3fee041
	void OnReq_WatchGameData_BP();// 0x4c9fe3fee041
	void OnReq_WatchGameData();// 0x4c9ee3fee041
	enum GetWatchGameState();// 0x4c9de3fee041
	bool CanWatch();// 0x4c9ce3fee041
	bool CanCloseLoading();// 0x4c9be3fee041

--------------------------------
Class: SGWatchGameSettleData
	FString MurderName;//[Offset: 0x0, Size: 0x10]
	uint64 MurderID;//[Offset: 0x10, Size: 0x8]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int Result;//[Offset: 0x1c, Size: 0x4]
	int TeamType;//[Offset: 0x20, Size: 0x4]
	int GameTime;//[Offset: 0x24, Size: 0x4]
	int game_mode;//[Offset: 0x28, Size: 0x4]
	bool bHas_Teammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: SGPCWeaponAssembleComponent.ActorComponent.Object
	class SGWeaponAssembleEnvironment* AssembleSceneClass;//[Offset: 0xc0, Size: 0x8]
	SGWeaponAssembleEnvironment* AssembleScene;//[Offset: 0xc8, Size: 0x8]
	SGWeaponAssembleEnvironment* AssembleSceneWorld;//[Offset: 0xd0, Size: 0x8]
	float SpawnLocationOffset;//[Offset: 0xd8, Size: 0x4]
	Rotator SpawnRotationOffset;//[Offset: 0xdc, Size: 0xc]

--------------------------------
Class: SGWeaponAssembleEnvironment.SGAssembleBase.Actor.Object
	<FString,CachedRTInfo> CachedRTInfoMap;//[Offset: 0x468, Size: 0x50]
	bool SaveRT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1]
	float RTWidthForUnassembled;//[Offset: 0x4d4, Size: 0x4]
	float RTWidth;//[Offset: 0x4d8, Size: 0x4]
	SceneCaptureComponent2D* SceneCaptureComponent;//[Offset: 0x4e0, Size: 0x8]
	bool UseCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1]
	bool UseLocalImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 0x1]
	bool DebugEnableCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ea, Size: 0x1]
	bool bResetMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4eb, Size: 0x1]
	int64[] DebugTestItemID;//[Offset: 0x4f0, Size: 0x10]
	FString DebugTestUniqueID;//[Offset: 0x500, Size: 0x10]
	int DebugTestFullWeaponID;//[Offset: 0x510, Size: 0x4]
	bool bForceReplaceWeaponAdapterIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 0x1]
	bool bForceReplaceUnassembledArmorIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x515, Size: 0x1]
	bool bForceReplaceAssembledWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x516, Size: 0x1]
	MaterialInterface* MaterialTemplate;//[Offset: 0x520, Size: 0x8]
	float CheckOverSec;//[Offset: 0x528, Size: 0x4]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 0x1]
	int CacheValidateTime;//[Offset: 0x530, Size: 0x4]
	MaterialParameterCollection* MaterialParameterCollection;//[Offset: 0x538, Size: 0x8]
	Rotator ExBaseMeshRot;//[Offset: 0x540, Size: 0xc]
	Vector ExCameraPosForCollapseHelmet;//[Offset: 0x54c, Size: 0xc]
	Vector ExCameraPosForCollapseWeapon;//[Offset: 0x558, Size: 0xc]
	int GridSize;//[Offset: 0x564, Size: 0x4]
	Rotator Rot_1x1;//[Offset: 0x568, Size: 0xc]
	Rotator Rot_1x2;//[Offset: 0x574, Size: 0xc]
	Rotator Rot_1x3;//[Offset: 0x580, Size: 0xc]
	float NearClippingPlaneForUnassembledAdapter;//[Offset: 0x58c, Size: 0x4]
	SphereReflectionCaptureComponent* CaptureComponent;//[Offset: 0x598, Size: 0x8]
	bool bAutoCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	FString[] ExistOfflineIcons;//[Offset: 0x5a8, Size: 0x10]
	SGInventory*[] LoadedInvs;//[Offset: 0x5b8, Size: 0x10]
	bool bRestrictMaxPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	int MaxPixelPerGrid;//[Offset: 0x5cc, Size: 0x4]
	int MaxPixel;//[Offset: 0x5d0, Size: 0x4]
	int MaxPixel_1x1;//[Offset: 0x5d4, Size: 0x4]
	bool bSaveUnassembledAdapter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	ActorComponent*[] ActorComps;//[Offset: 0x5e0, Size: 0x10]
	<SGInventory*,ImageWaitCap> WeaponWaitCaptureMap;//[Offset: 0x5f0, Size: 0x50]
	SGInventory* CurrentAssembleInv;//[Offset: 0x650, Size: 0x8]
	SceneComponent* PivotComp;//[Offset: 0x658, Size: 0x8]
	ActorComponent*[] WeaponLightsComp;//[Offset: 0x660, Size: 0x10]
	ActorComponent*[] HelmetLightsComp;//[Offset: 0x670, Size: 0x10]
	ActorComponent*[] HelmetAdapterLightsComp;//[Offset: 0x680, Size: 0x10]
	int MaxCachedMaterailNumInLobby;//[Offset: 0x694, Size: 0x4]
	int MaxCachedMaterailNumInBattle;//[Offset: 0x698, Size: 0x4]
	int MaxCachedMaterailSizeInLobby;//[Offset: 0x69c, Size: 0x4]
	SGWeaponAssembleEnvironment*[] AssembleEnvs;//[Offset: 0x6a0, Size: 0x10]
	void SetUseCache(bool bUse);// 0x4f8be3fee041
	void SetTextureParameterValue(MaterialInstanceDynamic* AssembleRTMaterial, Texture* Texture);// 0x4f8ae3fee041
	void SetCameraPos(SceneCaptureComponent2D* SceneCaptureComp, Vector Pos, Vector Offset);// 0x4f89e3fee041
	void ResetRT(Box Box, SceneCaptureComponent2D* SceneCaptureComp, float ImgWidth, bool UseViewportSize);// 0x4f88e3fee041
	void ReleaseRT(Image* Image);// 0x4f87e3fee041
	bool RefreshWeaponWithImage(SGInventory* InInventory, Object* Image, bool bSaveRT, Rotator TargetRot, float CameraPosX);// 0x4f86e3fee041
	void InitalizeAssembleSystem(SGInventory* InInventory);// 0x4f85e3fee041
	void CaptureWeaponToRT();// 0x4f84e3fee041
	bool CaptureAlways(bool bAlways);// 0x4f83e3fee041
	void CancelRenderImg(Image* TargetImg);// 0x4f82e3fee041
	void AllocateRT(FString UniqueID);// 0x4f81e3fee041
	void AdjustCameraNearClippingPlane();// 0x4f80e3fee041

--------------------------------
Class: CachedRTInfo
	MaterialInstanceDynamic* MaterialInst;//[Offset: 0x0, Size: 0x8]
	int ReferenceCount;//[Offset: 0x8, Size: 0x4]
	float LastAddReferenceTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ImageWaitCap
	Object*[] Images;//[Offset: 0x0, Size: 0x10]
	Rotator TargetRot;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: SGPCZoneInfoManagerComponent.ActorComponent.Object
	SGActorZoneInfoComponentBase*[] ZoneInfoComponentArray;//[Offset: 0xc0, Size: 0x10]
	void OnResSyncInfo();// 0x4cace3fee041
	SGActorZoneInfoComponentBase*[] GetZoneInfoComponentArray();// 0x4cabe3fee041

--------------------------------
Class: SGPerIventoryAccessoryAnimationSets.Object
	SGWeaponAccesoryAnimationSet WeaponAnimationSet;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SGWeaponAccesoryAnimationSet
	AnimMontage* EndFireSeq;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SGPlayerCameraManager.PlayerCameraManager.Actor.Object
	class ActorComponent[] ComponentClasses;//[Offset: 0x2cf8, Size: 0x10]
	class ActorComponent[] ComponentClassesAdditional;//[Offset: 0x2d08, Size: 0x10]
	class SGPlayerCameraManager* TemplateClass;//[Offset: 0x2d18, Size: 0x8]
	SGPCMCameraMaterialComponent* CachedMaterialComponent;//[Offset: 0x2d20, Size: 0x8]
	bool bEnableModifyRotationByMotionSensor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d28, Size: 0x1]
	bool bEnableModifyRotationByWeaponRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d29, Size: 0x1]
	bool bEnableModifyRotationByAutoAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2a, Size: 0x1]
	bool bEnableModifyRotationByForceLookingAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2b, Size: 0x1]
	Rotator ThisFrameBeforeCameraShakeRotator;//[Offset: 0x2d2c, Size: 0xc]
	SGPCMCameraFOVComponent* PCMFOVComponent;//[Offset: 0x2d60, Size: 0x8]
	SGPCMCameraShakeComponent* CameraShakeComponent;//[Offset: 0x2d68, Size: 0x8]
	void OnDetectInRoomEvent(bool bNotifyInRoom);// 0x4cd0e3fee041

--------------------------------
Class: SGPlayerStartInterfaceComponent.ActorComponent.Object

--------------------------------
Class: SGPlayerCheckPointInfoComponent.SGPlayerStartInterfaceComponent.ActorComponent.Object

--------------------------------
Class: SGPlayerControllerComponentInterface.Interface.Object
	void SetViewTarget(Actor* InViewTarget);// 0x4cd7e3fee041
	void InitNewPlayer(const UniqueNetIdRepl UniqueID, FString Options, FString Portal);// 0x4cd6e3fee041
	Actor* GetViewTarget();// 0x4cd5e3fee041
	PlayerState* GetPlayerState();// 0x4cd4e3fee041
	PlayerController* GetPlayerController();// 0x4cd3e3fee041
	Pawn* GetPawn();// 0x4cd2e3fee041
	Character* GetCharacter();// 0x4cd1e3fee041

--------------------------------
Class: SGPlayerControllerEvents.SGGameInstanceComponent.Object
	delegate OnLoadComplete;//[Offset: 0x30, Size: 0x10]
	delegate OnProcessPawn;//[Offset: 0x40, Size: 0x10]
	delegate OnPreUnPossessPawn;//[Offset: 0x50, Size: 0x10]
	delegate OnUnPossessPawn;//[Offset: 0x60, Size: 0x10]
	delegate OnRepPawn;//[Offset: 0x70, Size: 0x10]
	delegate OnRepLastPawn;//[Offset: 0x80, Size: 0x10]
	delegate OnSetPawn;//[Offset: 0x90, Size: 0x10]
	delegate OnFlowStateChange;//[Offset: 0xa0, Size: 0x10]
	delegate OnReconnect;//[Offset: 0xb0, Size: 0x10]
	delegate ConnectionIssueForClientEvent;//[Offset: 0xc0, Size: 0x10]
	delegate ConnectionCleanUpEvent;//[Offset: 0xd0, Size: 0x10]
	delegate OutOfAmmoEvent;//[Offset: 0xe0, Size: 0x10]
	delegate OutOfGrenadeEvent;//[Offset: 0xf0, Size: 0x10]
	delegate OutOfUpperEnergy;//[Offset: 0x100, Size: 0x10]
	delegate OutOfLowerEnergy;//[Offset: 0x110, Size: 0x10]
	delegate OnOutOfHealth;//[Offset: 0x120, Size: 0x10]
	delegate OnGameplayEffectBleed;//[Offset: 0x130, Size: 0x10]
	delegate OnGameplayEffectOutOfEndurance;//[Offset: 0x140, Size: 0x10]
	delegate OnChangeClipDetected;//[Offset: 0x150, Size: 0x10]
	delegate OnEscapePointsChange;//[Offset: 0x160, Size: 0x10]
	delegate OnReturnToHallRoom;//[Offset: 0x170, Size: 0x10]
	delegate OnStartSpectating;//[Offset: 0x180, Size: 0x10]
	delegate OnPreStartSpectating;//[Offset: 0x190, Size: 0x10]
	delegate OnSpectatingUIOp;//[Offset: 0x1a0, Size: 0x10]
	delegate OnSpectatingStop;//[Offset: 0x1b0, Size: 0x10]
	delegate ClientLevelLoadComplete;//[Offset: 0x1c0, Size: 0x10]
	delegate OnPlayerBeginGame;//[Offset: 0x1d0, Size: 0x10]
	delegate OnPlayerSettle;//[Offset: 0x1e0, Size: 0x10]
	delegate OnSpectatChange;//[Offset: 0x1f0, Size: 0x10]
	delegate OnAutoZoom;//[Offset: 0x200, Size: 0x10]
	delegate DSReserveReport;//[Offset: 0x240, Size: 0x10]
	void SetUseAutoZoom(bool bInUseAutoZoom);// 0x4cdae3fee041
	void OnNetworkFailureEvent(World* InWorld, NetDriver* InNetDriver, byte InType, FString InStr);// 0x4cd9e3fee041
	SGPlayerControllerEvents* GetSGPlayerControllerEvents(Object* InWorldContextObject);// 0x4cd8e3fee041

--------------------------------
Class: SGPlayerInputStatics.BlueprintFunctionLibrary.Object
	bool ShouldUseTouch(const PlayerController* PC);// 0x4ce4e3fee041
	<enum,int> SensitivityStringToMapInt(FString inString);// 0x4ce3e3fee041
	<enum,float> SensitivityStringToMap(FString inString);// 0x4ce2e3fee041
	FString SensitivityMapToStringInt(<enum,int> SensitivitySetting);// 0x4ce1e3fee041
	FString SensitivityMapToString(<enum,float> SensitivitySetting);// 0x4ce0e3fee041
	bool IsRotatingCamera(PlayerController* PC);// 0x4cdfe3fee041
	float GetRotationSensitivity(PlayerController* PC, float FOV, bool bOnFire, bool bGyro);// 0x4cdee3fee041
	Vector2D GetPlayerInputTurnVector(const PlayerController* PC);// 0x4cdde3fee041
	SGPlayerInput* GetPlayerInput(PlayerController* PC);// 0x4cdce3fee041
	<enum,float> GetDefaultSensitivitySetting();// 0x4cdbe3fee041

--------------------------------
Class: SGPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	class ActorComponent[] PlayerStartComponentClasses;//[Offset: 0x310, Size: 0x10]
	int PlayerStartID;//[Offset: 0x320, Size: 0x4]
	ActorComponent*[] PlayerStartComponents;//[Offset: 0x328, Size: 0x10]
	void FindValidPlacement();// 0x4ce5e3fee041

--------------------------------
Class: SGPlayerStartComponentInterface.Interface.Object

--------------------------------
Class: SGPlayerStartDefaultInventoryComponent.SGPlayerStartInterfaceComponent.ActorComponent.Object
	class Actor[] DefaultPickupInventories;//[Offset: 0xc0, Size: 0x10]
	class Actor[] DefaultPickupToBagInventories;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: SGPlayerStartTeamComponent.SGPlayerStartInterfaceComponent.ActorComponent.Object
	int TeamIndex;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: SGPlayerStateBrilliantTimeComp.ActorComponent.Object
	BrilliantTimeReplayInfo BrilliantTimeReplayInfo;//[Offset: 0xc0, Size: 0x30]
	void SaveAllRecordedTime();// 0x4d09e3fee041
	void OnRep_BrilliantTimeReplayInfo();// 0x4d08e3fee041
	void OnPlayerBeginGame(PlayerController* PC);// 0x4d07e3fee041
	bool CheckReplayTypeCanSubmit(int CheckTypeIndex);// 0x4d06e3fee041

--------------------------------
Class: BrilliantTimeReplayInfo
	int[] TypeIndexList;//[Offset: 0x0, Size: 0x10]
	DateTime[] StartTimeList;//[Offset: 0x10, Size: 0x10]
	DateTime[] EndTimeList;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SGPlayerStateComponentInterface.Interface.Object
	PlayerState* GetPlayerState();// 0x4d12e3fee041
	Controller* GetController();// 0x4d11e3fee041
	void BindCharacterEvent(SGCharacter* Character);// 0x4d10e3fee041

--------------------------------
Class: SGPlayerStateDeathComponent.ActorComponent.Object
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	int Deaths;//[Offset: 0xc4, Size: 0x4]
	float LastDeadTime;//[Offset: 0xc8, Size: 0x4]
	Pawn* LastPawn;//[Offset: 0xd0, Size: 0x8]
	PlayerState* LastKillerPlayerState;//[Offset: 0xd8, Size: 0x8]
	int64 LastKillerPlayerGID;//[Offset: 0xe0, Size: 0x8]
	void SetLastPawn(Pawn* InLastPawn);// 0x4d1fe3fee041
	void SetLastKillerPlayerState(PlayerState* InLastKillerPlayerState);// 0x4d1ee3fee041
	void SetDead(bool bInDead);// 0x4d1de3fee041
	void ServerPlaceCurseOnTeammate(uint64 TargetTeammateGID, bool bIsPlaceOrRemove);// 0x4d1ce3fee041
	void PlaceCurseOnTeammate(uint64 TargetTeammateGID, bool bIsPlaceOrRemove);// 0x4d1be3fee041
	bool IsDead();// 0x4d1ae3fee041
	void IncreaseDeaths();// 0x4d19e3fee041
	Pawn* GetLastPawn();// 0x4d18e3fee041
	PlayerState* GetLastKillerPlayerState();// 0x4d17e3fee041
	int64 GetLastKillerPlayerGID();// 0x4d16e3fee041
	float GetLastDeadTime();// 0x4d15e3fee041
	int GetDeaths();// 0x4d14e3fee041
	bool CanReturnToLobby();// 0x4d13e3fee041

--------------------------------
Class: SGPlayerStateDebugComponent.ActorComponent.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: SGPlayerStateFlowLogicComponent.ActorComponent.Object

--------------------------------
Class: SGPlayerStateHealthComponent.ActorComponent.Object
	int Health;//[Offset: 0xc0, Size: 0x4]
	int HealthMax;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: SGPlayerStateInterfaceComponent.ActorComponent.Object

--------------------------------
Class: SGPlayerStateInvDetectActComp.ActorComponent.Object
	PlayerInvDetectInfo PlayerInvDetectInfo;//[Offset: 0xc8, Size: 0x18]
	int DetectingWatchItemID;//[Offset: 0xe0, Size: 0x4]
	int DetectingInvItemID;//[Offset: 0xe4, Size: 0x4]
	float InvDetectRadius;//[Offset: 0xe8, Size: 0x4]
	int MaxDetectInvNum;//[Offset: 0xec, Size: 0x4]
	int LastOnRepPlayerDetectedInvPosListNum;//[Offset: 0xf0, Size: 0x4]
	bool LastIsInvDetecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	void ToastInvDetectMessage();// 0x4d23e3fee041
	void StopInvDetecting();// 0x4d22e3fee041
	void StartInvDetecting();// 0x4d21e3fee041
	void OnRep_PlayerInvDetectInfo();// 0x4d20e3fee041

--------------------------------
Class: PlayerInvDetectInfo
	Vector[] PlayerDetectedInvPosList;//[Offset: 0x0, Size: 0x10]
	bool IsInvDetecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: SGPlayerStateKillComponent.ActorComponent.Object
	int Kills;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: SGPlayerStateLifeComponent.ActorComponent.Object
	int TotalLifes;//[Offset: 0xc0, Size: 0x4]
	int RemainLifes;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: SGPlayerStateRankComponent.ActorComponent.Object
	int rank;//[Offset: 0xc0, Size: 0x4]
	void UpdateRank();// 0x4d25e3fee041
	int GetRank();// 0x4d24e3fee041

--------------------------------
Class: SGPlayerStateRespawnComponent.ActorComponent.Object
	float RespawnInterval;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: SGPlayerStateStatisComponent.ActorComponent.Object
	RealDamageOnBodyPartStruct[] AllCauseRealDamageOnBodyPartStruct;//[Offset: 0xc0, Size: 0x10]
	ArmorDamageStruct[] AllCauseArmorDamageStruct;//[Offset: 0xd0, Size: 0x10]
	<int64,KillOtherStatis> AllCauseHitDamage;//[Offset: 0xe0, Size: 0x50]
	DebuffInfoStruct[] AllCauseBuffChangeStruct;//[Offset: 0x130, Size: 0x10]
	RealDamageOnBodyPartStruct[] AllRealDamageOnBodyPartStruct;//[Offset: 0x140, Size: 0x10]
	<FString,RealDamageOnBodyPartForTlog> AllRealDamageOnBodyPartForTlogMap;//[Offset: 0x150, Size: 0x50]
	DebuffInfoStruct[] AllTakeBuffChangeStruct;//[Offset: 0x1a0, Size: 0x10]
	ArmorConsumeStruct[] AllCauseArmorConsumeStruct;//[Offset: 0x1b0, Size: 0x10]
	CharacterDeathStatics DeathStaics;//[Offset: 0x1c0, Size: 0x140]
	CharacterHealthStaticsWhenDead[] AllHealthStaticsWhenDead;//[Offset: 0x300, Size: 0x10]
	CharacterHealthStaticsWhenDead[] AllEnemyHealthStaticsWhenDead;//[Offset: 0x310, Size: 0x10]
	DSWeaponValidateFail[] AllWeaponValidateFailInfo;//[Offset: 0x320, Size: 0x10]
	CharacterDeathMurderStatics MurderInfo;//[Offset: 0x330, Size: 0x60]
	int64 DeathTimeUnix;//[Offset: 0x390, Size: 0x8]
	int TakeDamageInfoDisplayRange;//[Offset: 0x398, Size: 0x4]
	FString KillerName;//[Offset: 0x3a0, Size: 0x10]
	int KillCount;//[Offset: 0x3b0, Size: 0x4]
	RealDamageOnBodyPartStruct LastTakeDamageInfo;//[Offset: 0x3b8, Size: 0x80]
	RealDamageOnBodyPartStruct LastTakeDamageInfoInDBNO;//[Offset: 0x438, Size: 0x80]
	float[] DamgeTakenArray;//[Offset: 0x4b8, Size: 0x10]
	int[] GetDeBuffCountArray;//[Offset: 0x4c8, Size: 0x10]
	int[] KillOtherArray;//[Offset: 0x4d8, Size: 0x10]
	float AverageKillTime;//[Offset: 0x4e8, Size: 0x4]
	float AllKillOtherCount;//[Offset: 0x4ec, Size: 0x4]
	int Food;//[Offset: 0x4f0, Size: 0x4]
	int Moisture;//[Offset: 0x4f4, Size: 0x4]
	int PlayGestureCount;//[Offset: 0x4f8, Size: 0x4]
	float RunDuration;//[Offset: 0x4fc, Size: 0x4]
	float StrilessDuration;//[Offset: 0x500, Size: 0x4]
	bool StrilessMoreThanTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 0x1]
	float StopStepDuration;//[Offset: 0x508, Size: 0x4]
	BulletHolesInfo[] BulletHolesArray;//[Offset: 0x510, Size: 0x10]
	float BulletHolesDuration;//[Offset: 0x520, Size: 0x4]
	int BulletHolesCount;//[Offset: 0x524, Size: 0x4]
	<int64,HitBulletHolesInfo> HitBulletHolesMap;//[Offset: 0x528, Size: 0x50]
	float HitBulletHolesDuration;//[Offset: 0x578, Size: 0x4]
	int HitBulletHolesCount;//[Offset: 0x57c, Size: 0x4]
	BulletHolesInfo[] HitBulletHolesArray;//[Offset: 0x580, Size: 0x10]
	LastHitPlayerInfo LastHitBulletInfo;//[Offset: 0x590, Size: 0x40]
	FString[] ShootInputFlowDataStrArray;//[Offset: 0x5e0, Size: 0x10]
	float FrameRateJitterThreshold;//[Offset: 0x5f0, Size: 0x4]
	float ReportPeriod;//[Offset: 0x5f4, Size: 0x4]
	int FrameRateJitterCount;//[Offset: 0x5f8, Size: 0x4]
	DBNOStatis DBNOStatis;//[Offset: 0x608, Size: 0x20]
	void SetMurderInfo(Controller* Murder, int64 MurderWeaponId, out const KillerStaticData MurderBackupData);// 0x4d3ee3fee041
	void SetKillerName(FString ActorName);// 0x4d3de3fee041
	void SetKillerCount(int Count);// 0x4d3ce3fee041
	void SetHealthStatics();// 0x4d3be3fee041
	void ServerReportThermalViewState(enum ThermalImagerType);// 0x4d3ae3fee041
	void ServerReportLocationCorrection(int Count);// 0x4d39e3fee041
	void ServerReportFrameRateJitter(int Count, int GraphicLevel, int FrameRateLevel);// 0x4d38e3fee041
	void ReportMoveLoss(float TimeSinceLastServerMove, out const Vector ClientPos);// 0x4d37e3fee041
	void PeriodicalReportClientSide();// 0x4d36e3fee041
	void OnFinishRescueTeammate(Character* Rescuer, Character* Weaker);// 0x4d35e3fee041
	void OnEnterDBNOStatusMessage(Character* Character);// 0x4d34e3fee041
	void OnClientLocationCorrection(float LocDiff);// 0x4d33e3fee041
	void OnCharacterSetNewOwner(Character* Character, Actor* Owner);// 0x4d32e3fee041
	RealDamageOnBodyPartStruct GetLastTakeDamageInfo();// 0x4d31e3fee041
	BulletHolesInfo[] GetHitBulletHolesInfo();// 0x4d30e3fee041
	FString GetCharacterName();// 0x4d2fe3fee041
	BulletHolesInfo[] GetBulletHolesInfo();// 0x4d2ee3fee041
	void ClearThrowableStaticArrys();// 0x4d2de3fee041
	void ClearRealDamageByBodyPartForTlog();// 0x4d2ce3fee041
	void ClearHealthStatics();// 0x4d2be3fee041
	void ClearAllStaticArrys();// 0x4d2ae3fee041
	void AddPlayGestureCount();// 0x4d29e3fee041
	void AddKillerCount();// 0x4d28e3fee041
	void AddHitBulletHolesInfo(BulletHolesInfo BulletHolesInfo, SGInventory* HitArmor, FString Name, int64 BulletID, bool bPenetrateArmor, float PenetrateArmorProbability);// 0x4d27e3fee041
	void AddBulletHolesInfo(BulletHolesInfo BulletHolesInfo);// 0x4d26e3fee041

--------------------------------
Class: RealDamageOnBodyPartStruct
	int64 CauserId;//[Offset: 0x0, Size: 0x8]
	int64 TakerId;//[Offset: 0x8, Size: 0x8]
	int CauserTeamId;//[Offset: 0x10, Size: 0x4]
	int TeamID;//[Offset: 0x14, Size: 0x4]
	byte CauserTeamType;//[Offset: 0x18, Size: 0x1]
	byte TakerTeamType;//[Offset: 0x19, Size: 0x1]
	int64 DamageTime;//[Offset: 0x20, Size: 0x8]
	float AttackDamage;//[Offset: 0x28, Size: 0x4]
	float RealDamage;//[Offset: 0x2c, Size: 0x4]
	int64 FireCounter;//[Offset: 0x30, Size: 0x8]
	int BodyPart;//[Offset: 0x38, Size: 0x4]
	int DetailBodyPart;//[Offset: 0x3c, Size: 0x4]
	int64 DamageCauserID;//[Offset: 0x40, Size: 0x8]
	float DamageDistance;//[Offset: 0x48, Size: 0x4]
	int DamageCauserType;//[Offset: 0x4c, Size: 0x4]
	int64 BulletID;//[Offset: 0x50, Size: 0x8]
	int bPenetrateArmor;//[Offset: 0x58, Size: 0x4]
	float PenetrateArmorProbability;//[Offset: 0x5c, Size: 0x4]
	int ExtraFlag;//[Offset: 0x60, Size: 0x4]
	FString CauserName;//[Offset: 0x68, Size: 0x10]
	float CauseArmorReduceDamage;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: ArmorDamageStruct
	float BlockDamage;//[Offset: 0x0, Size: 0x4]
	int64 DamageTime;//[Offset: 0x8, Size: 0x8]
	int64 TakerId;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: DebuffInfoStruct
	int64 CauserId;//[Offset: 0x0, Size: 0x8]
	int64 TakerId;//[Offset: 0x8, Size: 0x8]
	int64 EventTime;//[Offset: 0x10, Size: 0x8]
	int BodyPart;//[Offset: 0x18, Size: 0x4]
	int DebuffType;//[Offset: 0x1c, Size: 0x4]
	int GrantedFlag;//[Offset: 0x20, Size: 0x4]
	float EffectDuration;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: RealDamageOnBodyPartForTlog
	int BodyPart;//[Offset: 0x0, Size: 0x4]
	float RealDamage;//[Offset: 0x4, Size: 0x4]
	int ExtraFlag;//[Offset: 0x8, Size: 0x4]
	byte TakerTeamType;//[Offset: 0xc, Size: 0x1]
	byte CauserTeamType;//[Offset: 0xd, Size: 0x1]
	uint32 BulletID;//[Offset: 0x10, Size: 0x4]
	int DamageCauserType;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ArmorConsumeStruct
	float ArmorConsume;//[Offset: 0x0, Size: 0x4]
	float BlockDamage;//[Offset: 0x4, Size: 0x4]
	int64 WeaponId;//[Offset: 0x8, Size: 0x8]
	int BodyPart;//[Offset: 0x10, Size: 0x4]
	int64 BulletID;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CharacterDeathStatics
	int DeathReason;//[Offset: 0x0, Size: 0x4]
	int64 WeaponId;//[Offset: 0x8, Size: 0x8]
	float Distance;//[Offset: 0x10, Size: 0x4]
	int EnduranceType;//[Offset: 0x14, Size: 0x4]
	int SpreadEnduranceType;//[Offset: 0x18, Size: 0x4]
	int64 DeathCauserId;//[Offset: 0x20, Size: 0x8]
	float Damage;//[Offset: 0x28, Size: 0x4]
	int bPenetrateArmor;//[Offset: 0x2c, Size: 0x4]
	float PenetrateArmorProbability;//[Offset: 0x30, Size: 0x4]
	FString CauserName;//[Offset: 0x38, Size: 0x10]
	int64 DeathTime;//[Offset: 0x48, Size: 0x8]
	Vector HitLocationDireciton;//[Offset: 0x50, Size: 0xc]
	int64 HitArmorId;//[Offset: 0x60, Size: 0x8]
	int TeamTypeId;//[Offset: 0x68, Size: 0x4]
	int TeamID;//[Offset: 0x6c, Size: 0x4]
	int KillerTeamTypeId;//[Offset: 0x70, Size: 0x4]
	int8 bHitFace;//[Offset: 0x74, Size: 0x1]
	int8 bDiedFromDBNO;//[Offset: 0x75, Size: 0x1]
	int CurrentArmorDurability;//[Offset: 0x78, Size: 0x4]
	int CurrentArmorDurabilityMax;//[Offset: 0x7c, Size: 0x4]
	int DetailBodyPart;//[Offset: 0x80, Size: 0x4]
	float LastHitDamage;//[Offset: 0x84, Size: 0x4]
	float LastHitArmorDamage;//[Offset: 0x88, Size: 0x4]
	float Endurance;//[Offset: 0x8c, Size: 0x4]
	int MainWeapon;//[Offset: 0x90, Size: 0x4]
	int AssistWeapon;//[Offset: 0x94, Size: 0x4]
	float AliveTime;//[Offset: 0x98, Size: 0x4]
	Vector DeathPos;//[Offset: 0x9c, Size: 0xc]
	Vector KillerPos;//[Offset: 0xa8, Size: 0xc]
	int KillerLevel;//[Offset: 0xb4, Size: 0x4]
	int KillerRankLevel;//[Offset: 0xb8, Size: 0x4]
	uint64 KillerID;//[Offset: 0xc0, Size: 0x8]
	int KillerTeamId;//[Offset: 0xc8, Size: 0x4]
	FString SightName;//[Offset: 0xd0, Size: 0x10]
	Character* Killer;//[Offset: 0xe0, Size: 0x8]
	int HitGroup;//[Offset: 0xe8, Size: 0x4]
	int HitSubHeadPart;//[Offset: 0xec, Size: 0x4]
	int64 LastAimEnemyGID;//[Offset: 0xf0, Size: 0x8]
	int LastAimEnemyCauseDamage;//[Offset: 0xf8, Size: 0x4]
	int LastAimEnemyCauseArmorReduceDamage;//[Offset: 0xfc, Size: 0x4]
	int64 DeathVestID;//[Offset: 0x100, Size: 0x8]
	int64 DeathHelmetID;//[Offset: 0x108, Size: 0x8]
	int64 DeathFaceShieldID;//[Offset: 0x110, Size: 0x8]
	int64 KillerVestID;//[Offset: 0x118, Size: 0x8]
	int64 KillerHelmetID;//[Offset: 0x120, Size: 0x8]
	int64 KillerFaceShieldID;//[Offset: 0x128, Size: 0x8]
	int KillerWeaponValue;//[Offset: 0x130, Size: 0x4]
	int CauseDBNOWeaponID;//[Offset: 0x134, Size: 0x4]
	SGPlayerItemInfoBase* KillerWeaponItemInfo;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: DSWeaponValidateFail
	FString WeaponId;//[Offset: 0x0, Size: 0x10]
	int WeaponType;//[Offset: 0x10, Size: 0x4]
	FString FailType;//[Offset: 0x18, Size: 0x10]
	FString ReasonStr;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: CharacterDeathMurderStatics
	int MurderTeamType;//[Offset: 0x0, Size: 0x4]
	int MurderTeamIndex;//[Offset: 0x4, Size: 0x4]
	FString MurderName;//[Offset: 0x8, Size: 0x10]
	FString MurderInstantName;//[Offset: 0x18, Size: 0x10]
	int64 MurderID;//[Offset: 0x28, Size: 0x8]
	int MurderLevel;//[Offset: 0x30, Size: 0x4]
	int MurderRanking;//[Offset: 0x34, Size: 0x4]
	int MurderPRanking;//[Offset: 0x38, Size: 0x4]
	int MurderRanked_Rd;//[Offset: 0x3c, Size: 0x4]
	int MurderRankLevel;//[Offset: 0x40, Size: 0x4]
	int MurderRankScore;//[Offset: 0x44, Size: 0x4]
	int MurderRank;//[Offset: 0x48, Size: 0x4]
	int64 MurderWeaponId;//[Offset: 0x50, Size: 0x8]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: BulletHolesInfo
	int64 TakerGID;//[Offset: 0x0, Size: 0x8]
	float ArmorReduceDamage;//[Offset: 0x8, Size: 0x4]
	float RealDamage;//[Offset: 0xc, Size: 0x4]
	enum BodyPart;//[Offset: 0x10, Size: 0x1]
	enum HeadSubGroupPart;//[Offset: 0x11, Size: 0x1]
	int Timestamp;//[Offset: 0x14, Size: 0x4]
	BodyPartEndurance BeforeEndurance;//[Offset: 0x18, Size: 0x1c]
	BodyPartEndurance CurrentEndurance;//[Offset: 0x34, Size: 0x1c]
	BodyPartEndurance MaxEndurance;//[Offset: 0x50, Size: 0x1c]
	BodyPartBuffInfo[] BuffList;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: BodyPartEndurance
	float HeadEndurance;//[Offset: 0x0, Size: 0x4]
	float ChestEndurance;//[Offset: 0x4, Size: 0x4]
	float StomachEndurance;//[Offset: 0x8, Size: 0x4]
	float LeftArmEndurance;//[Offset: 0xc, Size: 0x4]
	float RightArmEndurance;//[Offset: 0x10, Size: 0x4]
	float LeftLegEndurance;//[Offset: 0x14, Size: 0x4]
	float RightLegEndurance;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BodyPartBuffInfo
	enum EnduranceType;//[Offset: 0x0, Size: 0x1]
	int[] BuffList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: HitBulletHolesInfo
	bool bPenetrateArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float PenetrateArmorProbability;//[Offset: 0x4, Size: 0x4]
	FString TakerName;//[Offset: 0x8, Size: 0x10]
	int64 BulletID;//[Offset: 0x18, Size: 0x8]
	uint64 ArmorId;//[Offset: 0x20, Size: 0x8]
	int CurrentArmorDurability;//[Offset: 0x28, Size: 0x4]
	int CurrentArmorDurabilityMax;//[Offset: 0x2c, Size: 0x4]
	BulletHolesInfo[] BulletHolesInfos;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: LastHitPlayerInfo
	int64 TakerGID;//[Offset: 0x0, Size: 0x8]
	int bPenetrateArmor;//[Offset: 0x8, Size: 0x4]
	float PenetrateArmorProbability;//[Offset: 0xc, Size: 0x4]
	FString TakerName;//[Offset: 0x10, Size: 0x10]
	int64 BulletID;//[Offset: 0x20, Size: 0x8]
	uint64 ArmorId;//[Offset: 0x28, Size: 0x8]
	int CurrentArmorDurability;//[Offset: 0x30, Size: 0x4]
	int CurrentArmorDurabilityMax;//[Offset: 0x34, Size: 0x4]
	float TotalDamage;//[Offset: 0x38, Size: 0x4]
	float TotalArmorReduceDamage;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: DBNOStatis
	int DBNOCount;//[Offset: 0x0, Size: 0x4]
	int RescuedCount;//[Offset: 0x4, Size: 0x4]
	int RescueCount;//[Offset: 0x8, Size: 0x4]
	uint64[] RescuerGIDList;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SGPlayerStateTeamComponent.ActorComponent.Object
	SGTeamInfo* Team;//[Offset: 0xc0, Size: 0x8]
	void NotifyTeamChanged();// 0x4d40e3fee041
	SGTeamInfo* GetTeamInfo();// 0x4d3fe3fee041

--------------------------------
Class: SGPlayerStateTicketComponent.ActorComponent.Object
	int Tickets;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: SGPlayerStateZoneInfoComponent.ActorComponent.Object
	SGBusinessmanInfo[] BusinessmanInfoList;//[Offset: 0xc0, Size: 0x10]
	bool IsGivenDefaultInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	SGZonePlayerInfo ZonePlayerInfo;//[Offset: 0xd8, Size: 0x130]
	SGZonePlayerInfo NewZonePlayerInfo;//[Offset: 0x208, Size: 0x130]
	uint64 InventoryBaseID;//[Offset: 0x338, Size: 0x8]
	SGPlayerItemInfoBase*[] DropItems;//[Offset: 0x340, Size: 0x10]
	SGPlayerItemInfoBase*[] SelfItemList;//[Offset: 0x350, Size: 0x10]
	SGBringOutTeamItemInfo[] TeammateItemList;//[Offset: 0x360, Size: 0x10]
	SGPlayerItemInfoBase*[] SelfSeparatedItemList;//[Offset: 0x370, Size: 0x10]
	SGPlayerItemInfoBase*[] SelfSeparatedItemListTemp;//[Offset: 0x380, Size: 0x10]
	int8 KillTeammateCount;//[Offset: 0x390, Size: 0x1]
	enum TakeOutLimitType;//[Offset: 0x391, Size: 0x1]
	enum OrderTakeInSourceType;//[Offset: 0x392, Size: 0x1]
	void SetTakeOutLimitType(enum NewTakeOutLimitType, enum NewOrderTakeInSourceType);// 0x4d4ae3fee041
	void RequestEquipment();// 0x4d49e3fee041
	void OnReq_BusinessmanInfoList();// 0x4d48e3fee041
	void OnCharacterPreAddInventory(Character* Character, SGInventory* Inventory);// 0x4d47e3fee041
	enum GetTakeOutLimitType();// 0x4d46e3fee041
	enum GetOrderTakeInSourceType();// 0x4d45e3fee041
	uint32 GetClientIP();// 0x4d44e3fee041
	SGBusinessmanInfo[] GetBusinessmanInfoList();// 0x4d43e3fee041
	void BindCharacterEvent(SGCharacter* Character);// 0x4d42e3fee041
	void AddPlayerWishListItem(int InItemID, int InHaveNum, int InRequireNum, int InSellItemID);// 0x4d41e3fee041

--------------------------------
Class: SGBusinessmanInfo
	int BusinessmanID;//[Offset: 0x0, Size: 0x4]
	int Reputation;//[Offset: 0x4, Size: 0x4]
	int Level;//[Offset: 0x8, Size: 0x4]
	bool bisUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: SGZonePlayerInfo
	uint64 PlayerId;//[Offset: 0x0, Size: 0x8]
	uint64 roomid;//[Offset: 0x8, Size: 0x8]
	uint32 TeamIndex;//[Offset: 0x10, Size: 0x4]
	uint32 TeamPos;//[Offset: 0x14, Size: 0x4]
	FString PlayerName;//[Offset: 0x18, Size: 0x10]
	uint32 Level;//[Offset: 0x28, Size: 0x4]
	uint32 zoneid;//[Offset: 0x2c, Size: 0x4]
	bool HasEscapeSaveEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	SGPlayerEquipInfo PlayerEquipInfo;//[Offset: 0x38, Size: 0x40]
	ZoneSettleSiteInfo SettleSiteInfo;//[Offset: 0x78, Size: 0x28]
	uint32 HeadEndurance;//[Offset: 0xa0, Size: 0x4]
	uint32 ChestEndurance;//[Offset: 0xa4, Size: 0x4]
	uint32 StomchEndurance;//[Offset: 0xa8, Size: 0x4]
	uint32 LeftArmEndurance;//[Offset: 0xac, Size: 0x4]
	uint32 RightArmEndurance;//[Offset: 0xb0, Size: 0x4]
	uint32 LeftLegEndurance;//[Offset: 0xb4, Size: 0x4]
	uint32 RightLegEndurance;//[Offset: 0xb8, Size: 0x4]
	uint32 Food;//[Offset: 0xbc, Size: 0x4]
	uint32 Water;//[Offset: 0xc0, Size: 0x4]
	SGPlayerDebuffInfoBase*[] BuffList;//[Offset: 0xc8, Size: 0x10]
	uint64 CliVersion;//[Offset: 0xd8, Size: 0x8]
	uint32 ranked_Level;//[Offset: 0xe0, Size: 0x4]
	uint32 ranked_Score;//[Offset: 0xe4, Size: 0x4]
	uint32 ranking;//[Offset: 0xe8, Size: 0x4]
	uint32 pranking;//[Offset: 0xec, Size: 0x4]
	uint32 ranked_rd;//[Offset: 0xf0, Size: 0x4]
	uint32 rank;//[Offset: 0xf4, Size: 0x4]
	uint32 PrivilegeLevel;//[Offset: 0xf8, Size: 0x4]
	SGWishListItemInfo[] PlayerWishList;//[Offset: 0x100, Size: 0x10]
	int[] NewInspectedItemIDs;//[Offset: 0x110, Size: 0x10]
	int DogTagType;//[Offset: 0x120, Size: 0x4]
	int HeadBoxID;//[Offset: 0x124, Size: 0x4]
	int title_id;//[Offset: 0x128, Size: 0x4]

--------------------------------
Class: SGPlayerEquipInfo
	SGPlayerItemInfoBase*[] EquipPlayeritemList;//[Offset: 0x0, Size: 0x10]
	uint64[] AvatarItemIds;//[Offset: 0x10, Size: 0x10]
	uint32[] BadgeIndexs;//[Offset: 0x20, Size: 0x10]
	uint64[] BadgeItemIds;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ZoneSettleSiteInfo
	uint64 svr_id;//[Offset: 0x0, Size: 0x8]
	uint32 cmd_begin;//[Offset: 0x8, Size: 0x4]
	uint32 cmd_over;//[Offset: 0xc, Size: 0x4]
	uint32 business_id;//[Offset: 0x10, Size: 0x4]
	uint64 GID;//[Offset: 0x18, Size: 0x8]
	uint32 zoneid;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SGPlayerDebuffInfoBase.ActorComponent.Object
	byte BodyPart;//[Offset: 0xb8, Size: 0x1]
	byte BuffId;//[Offset: 0xb9, Size: 0x1]
	int64 RemainingTime;//[Offset: 0xc0, Size: 0x8]
	SGPlayerDebuffInfoBase* NewClassCreate();// 0x4de4e3fee041

--------------------------------
Class: SGBringOutTeamItemInfo
	uint64 TeammateGID;//[Offset: 0x0, Size: 0x8]
	SGPlayerItemInfoBase*[] EquipPlayeritemList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SGPlayerStatics.BlueprintFunctionLibrary.Object
	void UpdateRank(PlayerState* PlayerState);// 0x4ddfe3fee041
	SGPlayerState* TryGetPlayerStateFromActor(Actor* Target);// 0x4ddee3fee041
	void StatisticPlayerTakeBuff(PlayerState* InPS, enum EnduranceType, Actor* Instigator, bool bGranted, int DebuffType, float Duration);// 0x4ddde3fee041
	void StatisticPlayerHurtEnemey(PlayerState* MyState, Controller* InstigatorController, int HitDamage, enum HitGroup, Actor* DamageCauser);// 0x4ddce3fee041
	void StatisticPlayerCostAmmo(PlayerState* InPS, int RealAmmoCost);// 0x4ddbe3fee041
	void StatisticPlayerCauseBuff(PlayerState* InPS, enum EnduranceType, Actor* Taker, bool bGranted, int DebuffType);// 0x4ddae3fee041
	void StatisticPlayerCauseArmorConsume(PlayerState* AttackPS, PlayerState* TakerPS, float BlockDamage, float ArmorConsume, int64 DamageWeaponId, int64 BulletID, enum Endurance);// 0x4dd9e3fee041
	void StatisticMurderInfo(Controller* KillerPlayerController, Controller* VictimPlayerController, int64 MurderWeaponId, out const KillerStaticData KillerBackupData);// 0x4dd8e3fee041
	void StatisticKillPlayer(Controller* KillerPlayerController, Controller* VictimPlayerController);// 0x4dd7e3fee041
	void StatisticArmorBlockDamage(Controller* EventInstigator, PlayerState* VictimPS, int InBlockDamage);// 0x4dd6e3fee041
	void StatisPlayerAddHitDamage(PlayerState* AttackPS, SGCharacter* TakerCharacter, float Damage, float ArmorReduce, int HitCount);// 0x4dd5e3fee041
	void StartSpectatingSelectedAI(PlayerController* LocalController, Actor* SelectedPawn);// 0x4dd4e3fee041
	void StartSpectating(World* World);// 0x4dd3e3fee041
	void StartCompetitionSpectating(World* World);// 0x4dd2e3fee041
	void SetWatchGameHasTeammate(PlayerController* PC, bool bhasTeammate);// 0x4dd1e3fee041
	void SetUIMode(Controller* Controller, enum InUIMode);// 0x4dd0e3fee041
	void Settlement(Controller* PC);// 0x4dcfe3fee041
	void SetTakeOutLimitType(PlayerState* PlayerState, enum NewTakeOutLimitType, enum NewOrderTakeInSourceType);// 0x4dcee3fee041
	void SetReturnToLobbyTime(PlayerState* PlayerState, float InTime);// 0x4dcde3fee041
	void SetPlayerEndGameType(Controller* PC, enum EndType);// 0x4dcce3fee041
	void SetPawnPendingDestroy(PlayerController* PC, Pawn* Pawn);// 0x4dcbe3fee041
	void SetLockMovementLocal(Controller* Controller, bool bLock);// 0x4dcae3fee041
	void SetLockMovement(Controller* Controller, bool bLock);// 0x4dc9e3fee041
	void SetLockInputLocal(Controller* Controller, bool bLock);// 0x4dc8e3fee041
	void SetLockInput(Controller* Controller, bool bLock);// 0x4dc7e3fee041
	void SetLastPawn(PlayerState* PlayerState, Pawn* LastPawn);// 0x4dc6e3fee041
	void SetLastKillerPlayerState(PlayerState* PlayerState, PlayerState* InLastKillerPlayerState);// 0x4dc5e3fee041
	void SetHealthMax(PlayerState* PlayerState, int HealthMax);// 0x4dc4e3fee041
	void SetHealth(PlayerState* PlayerState, int Health);// 0x4dc3e3fee041
	void SetFPPMode(Controller* Controller, bool bNewFPPMode, bool bChangeCameraStyle);// 0x4dc2e3fee041
	void SetDeathTypeByEndurance(PlayerState* InPS, enum InEnduranceType);// 0x4dc1e3fee041
	void SetDead(PlayerState* PlayerState, bool bDead);// 0x4dc0e3fee041
	void SetCaptureCharacter(PlayerController* PlayerController, bool bEnableCapture);// 0x4dbfe3fee041
	void SetCameraStyle(Controller* Controller, FName TargetCameraStyle);// 0x4dbee3fee041
	void ResetTicket(PlayerState* PlayerState);// 0x4dbde3fee041
	void ResetLife(PlayerState* PlayerState);// 0x4dbce3fee041
	void QuitSpectatingAI(World* World);// 0x4dbbe3fee041
	void QuitSpectating(World* World);// 0x4dbae3fee041
	void QuitGame(Controller* PC);// 0x4db9e3fee041
	void PlaceCurseOnTeammate(PlayerState* PlayerState, uint64 TargetTeammateGID, bool bIsPlaceOrRemove);// 0x4db8e3fee041
	void NotifyLoadingProcessComplete(Controller* Controller);// 0x4db7e3fee041
	void LoadToMap_Lobby(Controller* Controller);// 0x4db6e3fee041
	bool IsSpectatingFreeView(Controller* Controller);// 0x4db5e3fee041
	bool IsSpectating(Controller* Controller);// 0x4db4e3fee041
	bool IsSceneLoadCompleted(World* InWorld);// 0x4db3e3fee041
	bool IsRotationMoving(Controller* Controller);// 0x4db2e3fee041
	bool IsReconnectedPlayer(PlayerController* PlayerController);// 0x4db1e3fee041
	bool IsPlayerSpectator(PlayerState* PlayerState);// 0x4db0e3fee041
	bool IsPlayerReconnecting(PlayerController* PlayerController);// 0x4dafe3fee041
	bool IsPlayerInThermalView(World* World);// 0x4daee3fee041
	bool IsPlayerDead(PlayerState* PS);// 0x4dade3fee041
	bool IsLoadComplete(PlayerController* PC);// 0x4dace3fee041
	bool IsInState(Controller* Controller, FName InStateName);// 0x4dabe3fee041
	bool IsInPreviewLevel(Controller* PC);// 0x4daae3fee041
	bool IsFPPMode(Controller* Controller);// 0x4da9e3fee041
	bool IsEnableImpactEffectPool(Controller* Controller);// 0x4da8e3fee041
	bool IsEnableBulletPool(Controller* Controller);// 0x4da7e3fee041
	bool IsDefaultFPPMode(Controller* Controller);// 0x4da6e3fee041
	bool IsDead(PlayerState* PlayerState);// 0x4da5e3fee041
	bool IsDBNO(PlayerState* PlayerState);// 0x4da4e3fee041
	bool IsBagOpen(Object* WorldContextObj);// 0x4da3e3fee041
	bool IsAssemblingWeapon(Controller* Controller);// 0x4da2e3fee041
	void IncreaseTicket(PlayerState* PlayerState);// 0x4da1e3fee041
	void IncreaseKills(PlayerState* PlayerState);// 0x4da0e3fee041
	void IncreaseDeaths(PlayerState* PlayerState);// 0x4d9fe3fee041
	bool HasSettlement(Controller* PC);// 0x4d9ee3fee041
	bool HasPlayerBegunGame(PlayerController* PlayerController);// 0x4d9de3fee041
	bool HasOptionInConnectURL(PlayerController* PC, FString Option);// 0x4d9ce3fee041
	bool HasAnyPlayerCarriedThermalDevice(Controller* Controller);// 0x4d9be3fee041
	bool HasAliveTeammate(Controller* Controller);// 0x4d9ae3fee041
	void GivePickup(Controller* Controller, Character* Character, Actor* InItem, enum Pos, ItemGridInfo DropPosition, int GiveCount, Actor* InParentActor, int InContainerIndex);// 0x4d99e3fee041
	Vector GetWorldOriginLocation(World* World);// 0x4d98e3fee041
	enum GetWatchGameState(PlayerController* PC);// 0x4d97e3fee041
	Character* GetViewTargetCharacter(World* InWorld);// 0x4d96e3fee041
	SGPlayerState* GetUserWidgetPlayerState(World* World);// 0x4d95e3fee041
	SGCharacter* GetUserWidgetCharacter(World* World);// 0x4d94e3fee041
	enum GetUIMode(Controller* Controller);// 0x4d93e3fee041
	class SGProjectileTrajectory GetTrajectoryClass(Controller* PC);// 0x4d92e3fee041
	SGProjectileTrajectory* GetTrajectoryActor(Controller* PC);// 0x4d91e3fee041
	int GetTotalLifes(PlayerState* PlayerState);// 0x4d90e3fee041
	int GetTickets(PlayerState* PlayerState);// 0x4d8fe3fee041
	enum GetThermalImagerType(World* InWorld);// 0x4d8ee3fee041
	float GetTargetCharacterScreenSize(Controller* Controller, Character* TargetCharacter);// 0x4d8de3fee041
	enum GetTakeOutLimitType(PlayerState* PlayerState);// 0x4d8ce3fee041
	float GetSquaredDisToLocalPlayer(World* World, Character* OtherCharacter);// 0x4d8be3fee041
	float GetShotAccuracy(PlayerState* InPS);// 0x4d8ae3fee041
	int GetSharedAvatarMeshCount(World* InWorld);// 0x4d89e3fee041
	float GetRespawnInterval(PlayerState* PlayerState);// 0x4d88e3fee041
	int GetRemainLifes(PlayerState* PlayerState);// 0x4d87e3fee041
	int GetRank(PlayerState* PlayerState);// 0x4d86e3fee041
	FName GetPSFlowState(PlayerState* PlayerState);// 0x4d85e3fee041
	ObjectPool* GetProjectileEffectPoolByClass(Controller* PC, class Object TemplateClass);// 0x4d84e3fee041
	SGPooledImpactEffectManager* GetPooledImpactEffectManager(Controller* PC);// 0x4d83e3fee041
	int64 GetPlayerGIDFromCharacter(SGCharacter* Character);// 0x4d82e3fee041
	FString GetPlayerDebugString(Character* Character);// 0x4d81e3fee041
	float GetPlayerCameraManagerFOV(World* World);// 0x4d80e3fee041
	FName GetPCFlowState(Controller* Controller);// 0x4d7fe3fee041
	Pawn* GetPawnFromPlayerState(PlayerState* PlayerState);// 0x4d7ee3fee041
	Vector GetLocalPlayerViewLocation(World* InWorld);// 0x4d7de3fee041
	void GetLocalPlayerView(World* InWorld, out Vector Out_Loc, out Rotator Out_Rot);// 0x4d7ce3fee041
	int64 GetLocalPlayerGID(World* InWorld);// 0x4d7be3fee041
	PlayerController* GetLocalPlayerController(World* InWorld);// 0x4d7ae3fee041
	Character* GetLocalPlayerCharacter(World* InWorld);// 0x4d79e3fee041
	RealDamageOnBodyPartStruct GetLastTakeDamageInfo(PlayerState* PS, bool IsDBNOLastDamageInfo);// 0x4d78e3fee041
	Pawn* GetLastPawn(PlayerState* PlayerState);// 0x4d77e3fee041
	PlayerState* GetLastKillerPlayerState(PlayerState* PlayerState);// 0x4d76e3fee041
	int64 GetLastKillerPlayerGID(PlayerState* PlayerState);// 0x4d75e3fee041
	float GetLastDeadTime(PlayerState* PlayerState);// 0x4d74e3fee041
	int GetKills(PlayerState* PlayerState);// 0x4d73e3fee041
	FString GetInventoryOrPickupName(Actor* InActor);// 0x4d72e3fee041
	ObjectPool* GetImpactEffectPoolByClass(Controller* PC, class Object TemplateClass);// 0x4d71e3fee041
	enum GetHurtReason(enum HitEndurance, enum DamageCauserType, bool PenetrateArmor, bool HitArmor);// 0x4d70e3fee041
	int GetHealthMax(PlayerState* PlayerState);// 0x4d6fe3fee041
	int GetHealth(PlayerState* PlayerState);// 0x4d6ee3fee041
	enum GetDeathType(enum HitEndurance, enum DamageCauserType);// 0x4d6de3fee041
	int GetDeaths(PlayerState* PlayerState);// 0x4d6ce3fee041
	enum GetDeathReason(enum HitEndurance, enum DamageCauserType, bool PenetrateArmor, bool HitArmor, enum DeathPart);// 0x4d6be3fee041
	int64 GetDeathCauserId(RealDamageOnBodyPartStruct LastDamageInfo);// 0x4d6ae3fee041
	SGCharacterCaptureActor* GetCaptureCharacter(PlayerController* PlayerController);// 0x4d69e3fee041
	Actor*[] GetCanPickUpInventories(Controller* Controller, bool bForceRedetect, float CheckDistance);// 0x4d68e3fee041
	FName GetCameraStyle(World* InWorld);// 0x4d67e3fee041
	ObjectPool* GetBulletPoolByClass(Controller* PC, class Object TemplateClass);// 0x4d66e3fee041
	SGCharacter* GetBeSpectatedViewTarget(PlayerController* PC);// 0x4d65e3fee041
	SGWeaponAssembleEnvironment* GetAssembleScene(Controller* Controller);// 0x4d64e3fee041
	Actor* GetAimedDoor(Controller* Controller, float CheckDistance);// 0x4d63e3fee041
	Actor* GetAimedCorpse(Controller* Controller, float CheckDistance);// 0x4d62e3fee041
	Actor* GetAimedContainer(Controller* Controller, float CheckDistance);// 0x4d61e3fee041
	Actor* GetAimedCardReader(Controller* Controller, float CheckDistance);// 0x4d60e3fee041
	Actor* GetAimedAlarm(Controller* Controller, float CheckDistance);// 0x4d5fe3fee041
	Actor*[] GetAimedActors(Controller* Controller, bool bForceRedetect, float CheckDistance);// 0x4d5ee3fee041
	InteractionTriggerPosInfo GetAimedActorInteractTriggerInfo(Controller* Controller, Actor* AimedActor);// 0x4d5de3fee041
	Actor* GetAimedActor(Controller* Controller, float CheckDistance, bool bForceRedetect);// 0x4d5ce3fee041
	void EnableWorldOriginRebaseLogic(World* World, bool bShouldEnable);// 0x4d5be3fee041
	void DiscardInventoryFromCharacterNotDrop(Controller* Controller, Character* Character, SGInventory* TargetInv);// 0x4d5ae3fee041
	void DiscardInventoryFromCharacterNotDeatchAdapt(Controller* Controller, Character* Character, SGInventory* TargetInv);// 0x4d59e3fee041
	void DestroyController(Controller* Controller);// 0x4d58e3fee041
	void DecreaseLife(PlayerState* PlayerState);// 0x4d57e3fee041
	void ClearUIModeData(Controller* Controller);// 0x4d56e3fee041
	bool CheckPositionInCameraView(World* World, out const Vector Pos, float TolerantAngle);// 0x4d55e3fee041
	bool CheckClientLoadingProcessComplete(Controller* Controller);// 0x4d54e3fee041
	bool CanWatchGame(PlayerController* PC);// 0x4d53e3fee041
	bool CanSeePoint(Controller* Controller, out const Vector TargetPoint);// 0x4d52e3fee041
	bool CanDeathLookKiller(Controller* Controller);// 0x4d51e3fee041
	bool CanDeadReturnToLobby(PlayerState* PlayerState);// 0x4d50e3fee041
	bool CanCloseLoadingWidget(PlayerController* PC);// 0x4d4fe3fee041
	float CalDegreeAngleBetweenCamereInXY(World* InWorld, Vector InVector);// 0x4d4ee3fee041
	float CalAngleBetweenCameraInXY(World* InWorld, Vector InVector);// 0x4d4de3fee041
	void BroadcastOnReturnToHallRoomEvent(PlayerController* PC);// 0x4d4ce3fee041
	void AddShootInputFlowDataStr(World* InWorld, FString DataStr);// 0x4d4be3fee041

--------------------------------
Class: SGPointDamageEventObject.PointDamageEventObject.DamageEventObject.Object
	SGBulletID BulletID;//[Offset: 0xd8, Size: 0x10]
	float Impulse;//[Offset: 0xe8, Size: 0x4]
	enum HitGroup;//[Offset: 0xec, Size: 0x1]
	class Actor* AmmoClass;//[Offset: 0xf0, Size: 0x8]
	enum HeadHitSubGroup;//[Offset: 0xf8, Size: 0x1]
	enum CaptureWeaponZoomType;//[Offset: 0xf9, Size: 0x1]
	byte FireModeNum;//[Offset: 0xfa, Size: 0x1]

--------------------------------
Class: SGPreviewCaptureLightsSets.Object
	<FString,class SGCaptureCharacterLights> CustomCaptureLights;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: SGProjectileAudioComponent.ActorComponent.Object
	AkAudioBank* SoundBank;//[Offset: 0xc0, Size: 0x8]
	bool UnloadBankOnImpactEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	AkAudioEvent* BeginThrowingAudioEvent;//[Offset: 0xd0, Size: 0x8]
	AkAudioEvent* ImpactAudioEvent;//[Offset: 0xd8, Size: 0x8]
	AkAudioEvent* ImpactAudioSFXEvent;//[Offset: 0xe0, Size: 0x8]
	AkAudioEvent* BeginEffectAudioEvent;//[Offset: 0xe8, Size: 0x8]
	AkAudioEvent* EndEffectAudioEvent;//[Offset: 0xf0, Size: 0x8]
	AkAudioEvent* BounceAudioEvent;//[Offset: 0xf8, Size: 0x8]
	AkAudioEvent* ActiveAudioEvent;//[Offset: 0x100, Size: 0x8]
	float BounceSoundCooldown;//[Offset: 0x108, Size: 0x4]
	float TinnitusIntensity;//[Offset: 0x10c, Size: 0x4]
	float TinnitusMaxDistance;//[Offset: 0x110, Size: 0x4]
	void OnBlastSoundEnded(enum Type, AkCallbackInfo* Info);// 0x4dfee3fee041
	void OnBankLoadComplete(enum Result);// 0x4dfde3fee041

--------------------------------
Class: SGProjectileBaseDamageComponent.ActorComponent.Object
	bool bEnableTakeDamageByBoneDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	FName HeadBoneName;//[Offset: 0xbc, Size: 0x8]
	FName ChestBoneName;//[Offset: 0xc4, Size: 0x8]
	FName StomachBoneName;//[Offset: 0xcc, Size: 0x8]
	FName LeftArmBoneName;//[Offset: 0xd4, Size: 0x8]
	FName RightArmBoneName;//[Offset: 0xdc, Size: 0x8]
	FName LeftLegBoneName;//[Offset: 0xe4, Size: 0x8]
	FName RightLegBoneName;//[Offset: 0xec, Size: 0x8]
	float DamageHead;//[Offset: 0xf4, Size: 0x4]
	float DamageLeftArm;//[Offset: 0xf8, Size: 0x4]
	float DamageRightArm;//[Offset: 0xfc, Size: 0x4]
	float DamageChest;//[Offset: 0x100, Size: 0x4]
	float DamageStomach;//[Offset: 0x104, Size: 0x4]
	float DamageLeftLeg;//[Offset: 0x108, Size: 0x4]
	float DamageRightLeg;//[Offset: 0x10c, Size: 0x4]
	float DamageForNoneCharacter;//[Offset: 0x110, Size: 0x4]
	float DamageForProjectile;//[Offset: 0x114, Size: 0x4]
	float Momentum;//[Offset: 0x118, Size: 0x4]
	float BleedTriggerChance;//[Offset: 0x11c, Size: 0x4]
	class DamageType* DamageTypeClass;//[Offset: 0x120, Size: 0x8]
	<Actor*,float> CharacterBlockScaleMap;//[Offset: 0x1c8, Size: 0x50]
	<Actor*,float> CharacterExposureScaleMap;//[Offset: 0x218, Size: 0x50]
	CachedDamageInfo[] CachedDamageInfoArray;//[Offset: 0x268, Size: 0x10]

--------------------------------
Class: CachedDamageInfo
	Actor* DamageTaker;//[Offset: 0x0, Size: 0x8]
	float HitDistance;//[Offset: 0x8, Size: 0x4]
	Vector ProjileLocation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SGProjectileFragGrenadeComponent.ActorComponent.Object
	class Actor* GroundDecalBPClass;//[Offset: 0xc8, Size: 0x8]
	Actor* GroundDecalBP;//[Offset: 0xd0, Size: 0x8]
	ParticleSystem* GrenadeSmokeTemplate;//[Offset: 0xd8, Size: 0x28]
	ParticleSystem* GrenadeExplodeSkyTemplate;//[Offset: 0x100, Size: 0x28]
	ParticleSystem* GrenadeExplodeWaterTemplate;//[Offset: 0x128, Size: 0x28]
	ParticleSystem* GrenadeExplodeLightTemplate;//[Offset: 0x150, Size: 0x28]
	Vector LightSize;//[Offset: 0x178, Size: 0xc]
	Vector LightIntensityColor;//[Offset: 0x184, Size: 0xc]
	float LightTime;//[Offset: 0x190, Size: 0x4]
	ParticleSystemComponent* GrenadeSmokePSC;//[Offset: 0x198, Size: 0x8]
	ParticleSystemComponent* GrenadeExplodeLightPSC;//[Offset: 0x1a0, Size: 0x8]
	void AsyncLoadComplete();// 0x4dffe3fee041

--------------------------------
Class: SGProjectileC4Component.SGProjectileFragGrenadeComponent.ActorComponent.Object
	float TotalTimeToExplode;//[Offset: 0x260, Size: 0x4]
	float CurrentTimeToExplode;//[Offset: 0x264, Size: 0x4]
	ParticleSystemComponent* FlashLightComp;//[Offset: 0x268, Size: 0x8]
	AkAudioEvent* DeployAudioEvent;//[Offset: 0x270, Size: 0x8]
	AkAudioEvent* BeepAudioEvent;//[Offset: 0x278, Size: 0x8]
	AkAudioEvent* ExplodeAudioEvent_Wood;//[Offset: 0x280, Size: 0x8]
	AkAudioEvent* ExplodeAudioEvent_Concrete;//[Offset: 0x288, Size: 0x8]
	AkAudioEvent* ExplodeAudioEvent;//[Offset: 0x290, Size: 0x8]

--------------------------------
Class: SGProjectileCameraComponent.ActorComponent.Object
	class MatineeCameraShake* ExplosionCameraShake;//[Offset: 0xc0, Size: 0x8]
	bool bPlayCameraShakeAtDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bPlayCameraShakeAtEffectTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	float ShakeInnerRadius;//[Offset: 0xcc, Size: 0x4]
	float ShakeOutterRadius;//[Offset: 0xd0, Size: 0x4]

--------------------------------
Class: SGProjectileComponentInterface.Interface.Object
	void OnProjectileStop(out const HitResult ImpactResult);// 0x4e04e3fee041
	void OnProjectileSpawn(out const Vector SpawnLoc);// 0x4e03e3fee041
	void OnProjectileBounce(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x4e02e3fee041
	SGWeapon* GetWeapon();// 0x4e01e3fee041
	void EffectLifeSpanExpired();// 0x4e00e3fee041

--------------------------------
Class: SGProjectileDamageComponent.SGProjectileBaseDamageComponent.ActorComponent.Object
	bool bTakeDamageOnDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool bTakeDamageOnEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	class Actor* PhysSphereClass;//[Offset: 0x288, Size: 0x8]
	CurveFloat* DamageCurve;//[Offset: 0x298, Size: 0x8]

--------------------------------
Class: SGProjectileEffectComponent.ActorComponent.Object
	ParticleSystem*[] ImpactPSList1P;//[Offset: 0xc8, Size: 0x10]
	ParticleSystem*[] ImpactPSList3P;//[Offset: 0xd8, Size: 0x10]
	ParticleSystemComponent* ImpactPSC;//[Offset: 0xe8, Size: 0x8]
	float TimeToRemoveWeapon;//[Offset: 0xf0, Size: 0x4]
	MFEnvSystem* EnvSys;//[Offset: 0x198, Size: 0x8]
	void ClientMulticastPlayEffect(Vector FinalLocation);// 0x4e05e3fee041

--------------------------------
Class: SGProjectileFlashComponent.ActorComponent.Object
	FlashDisConf[] FlashDistanceConfArray;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: FlashDisConf
	float MinDistance;//[Offset: 0x0, Size: 0x4]
	float MaxDistance;//[Offset: 0x4, Size: 0x4]
	float DurationTime;//[Offset: 0x8, Size: 0x4]
	float FadeoutTime;//[Offset: 0xc, Size: 0x4]
	float FlashLightCircleFadeoutTime;//[Offset: 0x10, Size: 0x4]
	float DistortionFadeoutTime;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SGProjectileFragDamageComponent.SGProjectileDamageComponent.SGProjectileBaseDamageComponent.ActorComponent.Object
	bool bApplyDamageToArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	float MinExposureDamageScale;//[Offset: 0x33c, Size: 0x4]
	CurveFloat* DamageReduceScaleByArmorLevel;//[Offset: 0x340, Size: 0x8]
	CurveFloat* DamageReduceScaleByArmorDurability;//[Offset: 0x348, Size: 0x8]
	CurveFloat* DamageToArmor;//[Offset: 0x350, Size: 0x8]
	float MaxDamageWithinDistance;//[Offset: 0x358, Size: 0x4]
	<SGCharacter*,float> DamageToArmorMap;//[Offset: 0x360, Size: 0x50]
	CachedDamageInfo[] CachedDamageInfoArrayToNotCharacter;//[Offset: 0x450, Size: 0x10]

--------------------------------
Class: SGProjectileHealthComponent.ActorComponent.Object
	float Health;//[Offset: 0xc8, Size: 0x4]
	float DelayDestroyTime;//[Offset: 0xcc, Size: 0x4]
	AkAudioEvent* DestroyedSound;//[Offset: 0xd0, Size: 0x8]
	ParticleSystem* DestroyEmitterTemplate;//[Offset: 0xd8, Size: 0x8]
	ParticleSystem* TwinkleEmitterTemplate;//[Offset: 0xe0, Size: 0x8]
	ParticleSystemComponent* TwinkleEmitterPSC;//[Offset: 0xf0, Size: 0x8]
	void OnRep_Health();// 0x4e06e3fee041

--------------------------------
Class: SGProjectileMolotovComponent.SGProjectileBaseDamageComponent.ActorComponent.Object
	ParticleSystem* ContinuousFiringPS;//[Offset: 0x280, Size: 0x28]
	ParticleSystem* CenterContinuousFiringPS;//[Offset: 0x2a8, Size: 0x28]
	float TriggerDamagePeriod;//[Offset: 0x2d0, Size: 0x4]
	float DamageDurationTime;//[Offset: 0x2d4, Size: 0x4]
	float MolotovImpactRadius;//[Offset: 0x2d8, Size: 0x4]
	float MolotovImpactHeight;//[Offset: 0x2dc, Size: 0x4]
	float GroundFireEffectDispearTime;//[Offset: 0x2e0, Size: 0x4]
	ParticleSystemComponent*[] ContinuousFiringPSCArray;//[Offset: 0x2f0, Size: 0x10]
	Actor*[] OnFireActors;//[Offset: 0x300, Size: 0x10]
	Actor*[] ActorsToIgnoreWhenCheckDamage;//[Offset: 0x310, Size: 0x10]
	float LeftDurationTimerRep;//[Offset: 0x320, Size: 0x4]
	irePositionPair[] FirePositionPairArray;//[Offset: 0x328, Size: 0x10]
	void OnRepFirePositions();// 0x4e09e3fee041
	void ClientDisableFireEffect();// 0x4e08e3fee041
	void AsyncLoadComplete(FString PackageName);// 0x4e07e3fee041

--------------------------------
Class: irePositionPair
	Vector position;//[Offset: 0x0, Size: 0xc]
	Vector ImpactNormal;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SGProjectileMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float ZeroGravityDistance;//[Offset: 0x1dc, Size: 0x4]
	float LeftNoGravityTime;//[Offset: 0x1e0, Size: 0x4]
	float LeftNoHorizontalDecTime;//[Offset: 0x1e4, Size: 0x4]
	float HorizontalVelocityDecRate;//[Offset: 0x1e8, Size: 0x4]
	float Mass;//[Offset: 0x1ec, Size: 0x4]
	float ResistanceFactor;//[Offset: 0x1f0, Size: 0x4]
	CurveFloat* GravityDistanceCurve;//[Offset: 0x1f8, Size: 0x8]
	CurveFloat* ResistanceFactorDistanceCurve;//[Offset: 0x200, Size: 0x8]
	float GravityScale;//[Offset: 0x208, Size: 0x4]
	float HorzFlyDistance;//[Offset: 0x20c, Size: 0x4]

--------------------------------
Class: SGProjectileOffensiveDamageComponent.SGProjectileDamageComponent.SGProjectileBaseDamageComponent.ActorComponent.Object
	<PhysicalMaterial*,float> BlockDamageScaleByDifferentMaterial;//[Offset: 0x338, Size: 0x50]
	int MaxLayerNumber;//[Offset: 0x388, Size: 0x4]
	float ScreenEffectMaxDistance;//[Offset: 0x38c, Size: 0x4]
	float ScreenEffectMaxTime;//[Offset: 0x390, Size: 0x4]

--------------------------------
Class: SGProjectileSmokeComponent.ActorComponent.Object
	class Actor* SmokeEffectBPSoftClass;//[Offset: 0xc0, Size: 0x28]
	class Actor* MiddleSmokeEffectBPSoftClass;//[Offset: 0xe8, Size: 0x28]
	float SmokeEffectTime;//[Offset: 0x110, Size: 0x4]
	float SmokeExpandTime;//[Offset: 0x114, Size: 0x4]
	float SmokeFadeoutTime;//[Offset: 0x118, Size: 0x4]
	float FadeOutOffsetTime;//[Offset: 0x11c, Size: 0x4]
	Actor* SmokeBP;//[Offset: 0x120, Size: 0x8]
	PooledActor* PooledSmokeBP;//[Offset: 0x128, Size: 0x8]
	ParticleSystemComponent* SmokePSC;//[Offset: 0x130, Size: 0x8]
	ActorComponent*[] PSCArray;//[Offset: 0x138, Size: 0x10]
	Vector BlockBoxExtent;//[Offset: 0x1e0, Size: 0xc]
	Vector EffectBoxExtent;//[Offset: 0x1ec, Size: 0xc]
	float BlockStartTime;//[Offset: 0x1f8, Size: 0x4]
	float BlockDurationTime;//[Offset: 0x1fc, Size: 0x4]
	float LeftSmokeEffectTimeRep;//[Offset: 0x200, Size: 0x4]
	bool bStartPlayEffectInServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 0x1]
	Vector RealEffectLocation;//[Offset: 0x208, Size: 0xc]
	SGThrowableProjectile* OwnerProjectile;//[Offset: 0x250, Size: 0x8]
	bool bEnableObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	void OnThermalViewStateChanged(bool Actived);// 0x4e0fe3fee041
	void OnSmokeClassLoadComplete();// 0x4e0ee3fee041
	float GetSmokeFaseOutTime();// 0x4e0de3fee041
	float GetSmokeEffectTime();// 0x4e0ce3fee041
	void GenerateSmokeEffectActor();// 0x4e0be3fee041
	void DestroySmokeBP();// 0x4e0ae3fee041

--------------------------------
Class: SGProjectileSoundGeneratorComponent.ActorComponent.Object
	AkAudioBank* SoundBank;//[Offset: 0xc0, Size: 0x8]
	AkAudioEvent* FootstepsSound;//[Offset: 0xc8, Size: 0x8]
	AkAudioEvent* StickAudioEvent;//[Offset: 0xd0, Size: 0x8]
	float TriggerSingleSoundInterval;//[Offset: 0xd8, Size: 0x4]
	byte PhysicalSurface;//[Offset: 0xdc, Size: 0x1]
	void OnCallbackBankLoaded(enum Result);// 0x4e11e3fee041
	void OnBlastSoundEnded(enum Type, AkCallbackInfo* Info);// 0x4e10e3fee041

--------------------------------
Class: SGProjectileStunComponent.ActorComponent.Object
	float StunDistance;//[Offset: 0xc0, Size: 0x4]
	float DecreseMoveSpeedRate;//[Offset: 0xc4, Size: 0x4]
	float StunDurationTime;//[Offset: 0xc8, Size: 0x4]
	bool bBreakWindows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]

--------------------------------
Class: SGProjectileTakeDamageComponent.SGActorTakeDamageComponent.ActorComponent.Object

--------------------------------
Class: SGProjectileTearGasComponent.SGProjectileSmokeComponent.ActorComponent.Object
	class SGPoisonGas* PoisonGas;//[Offset: 0x260, Size: 0x8]

--------------------------------
Class: SGProjectileTrajectoryStraight.SGProjectileTrajectory.Actor.Object
	LinearColor MissedColor;//[Offset: 0x438, Size: 0x10]
	LinearColor HittedColor;//[Offset: 0x448, Size: 0x10]

--------------------------------
Class: SGProjectileVisionPersistenceComponent.ActorComponent.Object
	bool ApplyEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	EffectDistanceConfArray[] EffectDistanceConfArray;//[Offset: 0xc8, Size: 0x10]
	CurveFloat* BasicEffectCurve;//[Offset: 0xd8, Size: 0x8]
	CurveFloat* WhiteEffectCurve;//[Offset: 0xe0, Size: 0x8]
	bool bApplyOnlyInPOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	float FlashFOVAngle;//[Offset: 0xec, Size: 0x4]
	PostProcessVolume* PPV;//[Offset: 0xf0, Size: 0x8]
	Actor*[] StunResults;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: SGPSChatInboxComponent.ActorComponent.Object
	uint32 CurIndex;//[Offset: 0xc0, Size: 0x4]
	uint32 Capacity;//[Offset: 0xc4, Size: 0x4]
	SGSingleChatContent[] AllContents;//[Offset: 0xc8, Size: 0x10]
	void OnRep_Inbox();// 0x4e19e3fee041
	void GetAllChat(out SGSingleChatContent[] OutMsg);// 0x4e18e3fee041

--------------------------------
Class: SGSingleChatContent
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString Content;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SGPSFlowStateComponent.ActorComponent.Object
	FName FlowState;//[Offset: 0xc0, Size: 0x8]
	void OnRep_FlowState();// 0x4e1be3fee041
	FName GetFlowState();// 0x4e1ae3fee041

--------------------------------
Class: SGPSZoneInfoManagerComponent.ActorComponent.Object
	SGActorZoneInfoComponentBase*[] ZoneInfoComponentArray;//[Offset: 0xc0, Size: 0x10]
	void OnResSyncInfo();// 0x4e1de3fee041
	SGActorZoneInfoComponentBase*[] GetZoneInfoComponentArray();// 0x4e1ce3fee041

--------------------------------
Class: SGRadialDamageEventObject.RadialDamageEventObject.DamageEventObject.Object
	float BaseMomentumMag;//[Offset: 0x60, Size: 0x4]
	bool bScaleMomentum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	uint32 SceneItemID;//[Offset: 0x68, Size: 0x4]
	float ProjectilePenetrationFactor;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: SGRangeTargetBase.SGActorSoundOwner.Actor.Object
	StaticMeshComponent* TargetMesh;//[Offset: 0x300, Size: 0x8]
	bool IsEnableTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	bool Startrotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a, Size: 0x1]
	bool StartReRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30b, Size: 0x1]
	int RotateSpeed;//[Offset: 0x30c, Size: 0x4]
	int ReStoreTime;//[Offset: 0x310, Size: 0x4]
	AkAudioEvent* RaiseSound;//[Offset: 0x318, Size: 0x8]
	AkAudioEvent* FallSound;//[Offset: 0x320, Size: 0x8]
	TimerHandle ReplaceRotateTimerHandle;//[Offset: 0x328, Size: 0x8]
	TimerHandle SetRotateTimerHandle;//[Offset: 0x330, Size: 0x8]
	TimerHandle SetReRotateTimerHandle;//[Offset: 0x338, Size: 0x8]
	delegate OnTakeDamege;//[Offset: 0x340, Size: 0x10]
	bool bCanBeDamagedByThrowableWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	void SetRotateVar();// 0x4e21e3fee041
	void SetRotate(int DelayTime, enum Type);// 0x4e20e3fee041
	void RestoreRotateVar();// 0x4e1fe3fee041
	void RestoreRotate(int DelayTime);// 0x4e1ee3fee041

--------------------------------
Class: SGReplayPlayerState.PlayerState.Info.Actor.Object

--------------------------------
Class: SGReplaySettings.DeveloperSettings.Object
	SoftClassPath ObserverControllerClass;//[Offset: 0x38, Size: 0x18]
	SoftClassPath ObserverPawnClass;//[Offset: 0x50, Size: 0x18]
	SoftClassPath ObserverHUDClass;//[Offset: 0x68, Size: 0x18]
	int KillCamEnableMinDeviceLevel;//[Offset: 0x80, Size: 0x4]
	float KillCamPlaySafeLength;//[Offset: 0x84, Size: 0x4]
	float KillCamRecordLengthBeforeDead;//[Offset: 0x88, Size: 0x4]
	float KillCamRecordLengthAfterDead;//[Offset: 0x8c, Size: 0x4]
	float KillCamCheckPointLength;//[Offset: 0x90, Size: 0x4]
	float KillCamCheckpointSaveMaxMSPerFrame;//[Offset: 0x94, Size: 0x4]
	bool KillCamDefaultUseFirstPersonCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool KillCamPMCUseFirstPersonCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool KillCamScavUseFirstPersonCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	bool KillCamPlayerForceFirstPersonCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 0x1]
	float PlaybackOptDist;//[Offset: 0x9c, Size: 0x4]
	int DSReplayEnable;//[Offset: 0xa0, Size: 0x4]
	FString DSReplaySavePath;//[Offset: 0xa8, Size: 0x10]
	float DSReplayCheckPointLength;//[Offset: 0xb8, Size: 0x4]
	float DSReplayCheckpointSaveMaxMSPerFrame;//[Offset: 0xbc, Size: 0x4]
	FilePath[] ShouldPreDuplicateMaps;//[Offset: 0xc0, Size: 0x10]
	SGReplaySettings* Get();// 0x4e22e3fee041

--------------------------------
Class: SGReplayUserSettings.DeveloperSettings.Object
	bool DebugMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	FString[] ReplayFileHistory;//[Offset: 0x40, Size: 0x10]
	void Save();// 0x4e24e3fee041
	SGReplayUserSettings* GetSGReplayUserSettings();// 0x4e23e3fee041

--------------------------------
Class: SGReplicationGraph.ReplicationGraph.ReplicationDriver.Object

--------------------------------
Class: SGSceneInteractActorInterface.Interface.Object

--------------------------------
Class: SGSequenceSwitherComponent.SGShowSwithBaseComponent.Object
	LevelSequence* Sequence;//[Offset: 0x40, Size: 0x8]
	Actor* RootActor;//[Offset: 0x48, Size: 0x8]
	MovieSceneSequencePlaybackSettings PlaySetting;//[Offset: 0x50, Size: 0x14]
	float PlayStartTime;//[Offset: 0x64, Size: 0x4]
	float PlayEndTime;//[Offset: 0x68, Size: 0x4]
	LevelSequencePlayer* LevelSequencePlayer;//[Offset: 0x70, Size: 0x8]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x78, Size: 0x8]
	class Actor* SequenceBaseClass;//[Offset: 0x80, Size: 0x8]
	float SequenceDuration;//[Offset: 0x88, Size: 0x4]
	Actor* GetSequenceRootActor();// 0x4e26e3fee041
	void AdjustPlatyTime();// 0x4e25e3fee041

--------------------------------
Class: SGShowControlActor.Actor.Object
	SGShowControlComponent* ShowControlComponent;//[Offset: 0x2e0, Size: 0x8]
	void Deactive();// 0x4e28e3fee041
	void Active();// 0x4e27e3fee041

--------------------------------
Class: SGShowControlSoundActor.Actor.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x2e0, Size: 0x8]
	enum ControlType;//[Offset: 0x2e8, Size: 0x1]
	enum TimeType;//[Offset: 0x2e9, Size: 0x1]
	<Object*,float> SoundMap;//[Offset: 0x2f0, Size: 0x50]
	void Stop();// 0x4e38e3fee041
	void Play();// 0x4e37e3fee041
	void NotNeedPlay(Object* InObj);// 0x4e36e3fee041
	void NeedPlay(Object* InObj, float InServerTime);// 0x4e35e3fee041

--------------------------------
Class: SGSimpleAnimSwitherComponent.SGShowSwithBaseComponent.Object
	float DelayTime;//[Offset: 0x48, Size: 0x4]
	float PlayTime;//[Offset: 0x4c, Size: 0x4]
	Actor* AnimActor;//[Offset: 0x50, Size: 0x8]
	bool bHiddenWhenDeactive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	Vector BeginLocation;//[Offset: 0x5c, Size: 0xc]
	Rotator BeginRotation;//[Offset: 0x68, Size: 0xc]
	Vector EndLocation;//[Offset: 0x74, Size: 0xc]
	Rotator EndRotation;//[Offset: 0x80, Size: 0xc]
	bool HaveInitState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	Vector InitLocation;//[Offset: 0x90, Size: 0xc]
	Rotator InitRotation;//[Offset: 0x9c, Size: 0xc]
	CurveFloat* RateCurve;//[Offset: 0xa8, Size: 0x8]
	float Timer;//[Offset: 0xb0, Size: 0x4]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	bool bHasPlayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	void TickAnim(float DeltaTime);// 0x4e3be3fee041
	void StopAnim();// 0x4e3ae3fee041
	void BeginAnim();// 0x4e39e3fee041

--------------------------------
Class: SGSlidingDoorPlankComponent.SGTwoWayDoorPlankComponent.MFILCTwoSideSampleStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector DoorSlidingStartPos;//[Offset: 0x6bc, Size: 0xc]
	Vector DoorSlidingEndPos;//[Offset: 0x6c8, Size: 0xc]
	Vector SlideDoorParticleSystemPos;//[Offset: 0x6d4, Size: 0xc]
	Rotator SlideDoorParticleSystemRot;//[Offset: 0x6e0, Size: 0xc]
	Vector SlideDoorParticleSystemBackPos;//[Offset: 0x6ec, Size: 0xc]
	Rotator SlideDoorParticleSystemBackRot;//[Offset: 0x6f8, Size: 0xc]
	Vector DoorClosedEdgePos;//[Offset: 0x704, Size: 0xc]
	ParticleSystemComponent* SlideDoorParticleSystemLock;//[Offset: 0x710, Size: 0x8]
	ParticleSystemComponent* SlideDoorParticleSystemLockBack;//[Offset: 0x718, Size: 0x8]
	ParticleSystemComponent* SlideDoorParticleSystemUnlock;//[Offset: 0x720, Size: 0x8]
	ParticleSystemComponent* SlideDoorParticleSystemUnlockBack;//[Offset: 0x728, Size: 0x8]
	float PushOutVelocity;//[Offset: 0x730, Size: 0x4]
	float PushVerticalRange;//[Offset: 0x734, Size: 0x4]
	float DoorPlankWidth;//[Offset: 0x738, Size: 0x4]

--------------------------------
Class: SGSmokeActor.PooledActor.Actor.Object
	void OnActorLeave(Actor* OverlappedActor, Actor* OtherActor);// 0x4e3de3fee041
	void OnActorEnter(Actor* OverlappedActor, Actor* OtherActor);// 0x4e3ce3fee041

--------------------------------
Class: SGSoundSwitherComponent.SGShowSwithBaseComponent.Object
	Actor* SoundActor;//[Offset: 0x48, Size: 0x8]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x50, Size: 0x8]
	float DelayTime;//[Offset: 0x58, Size: 0x4]
	float PlayTime;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: SGSpectatorPawn.SpectatorPawn.Character.Pawn.Actor.Object
	float MaxWalkSpeed;//[Offset: 0x598, Size: 0x4]
	float MaxSprintSpeed;//[Offset: 0x59c, Size: 0x4]
	bool bNeedDelaySetMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a0, Size: 0x1]
	TimerHandle TimerHandle;//[Offset: 0x5a8, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b0, Size: 0x1]
	float BaseTurnRate;//[Offset: 0x5b4, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x5b8, Size: 0x4]
	float SprintRate;//[Offset: 0x5bc, Size: 0x4]
	class Actor[] IgnoreClassArray;//[Offset: 0x5c0, Size: 0x10]
	CameraComponent* CharacterCameraComponent;//[Offset: 0x5d0, Size: 0x8]
	void UnSprint();// 0x4e46e3fee041
	void TurnAtRate(float Rate);// 0x4e45e3fee041
	void Sprint();// 0x4e44e3fee041
	void OnComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x4e43e3fee041
	void MoveUp_World(float Val);// 0x4e42e3fee041
	void MoveRight(float Val);// 0x4e41e3fee041
	void MoveForward(float Val);// 0x4e40e3fee041
	void LookUpAtRate(float Rate);// 0x4e3fe3fee041
	void DelaySetMovementMode();// 0x4e3ee3fee041

--------------------------------
Class: SGTaskItemInterface.Interface.Object

--------------------------------
Class: SGTeamStatics.BlueprintFunctionLibrary.Object
	void SetTeam(PlayerState* PlayerState, SGTeamInfo* Team);// 0x4e97e3fee041
	void RemoveOBTeamMemberPlayer(PlayerState* PlayerState, Controller* C);// 0x4e96e3fee041
	bool OnSameTeam(const Actor* Actor1, const Actor* Actor2);// 0x4e95e3fee041
	bool IsValidTeamIndex(byte TeamIndex);// 0x4e94e3fee041
	bool IsTeammate(PlayerState* SelfPlayerState, PlayerState* OtherPlayerState);// 0x4e93e3fee041
	bool HaveTeam(Character* Character);// 0x4e92e3fee041
	bool HaveAliveTeamMember(PlayerState* PlayerState);// 0x4e91e3fee041
	Character*[] GetTeamMembers(Character* Character);// 0x4e90e3fee041
	PlayerState*[] GetTeamMemberPlayerStates(const PlayerState* PlayerState);// 0x4e8fe3fee041
	bool GetTeamMemberInfo(PlayerState* PlayerState, out TeamPlayerOrderInfo[] OutArray);// 0x4e8ee3fee041
	byte GetTeammateNum(const PlayerState* PlayerState);// 0x4e8de3fee041
	byte GetTeamIndex(PlayerState* PlayerState);// 0x4e8ce3fee041
	SGTeamInfo* GetTeam(const PlayerState* PlayerState);// 0x4e8be3fee041
	PlayerState* GetPlayerStateByIndex(const PlayerState* PlayerState, byte TeamIndex);// 0x4e8ae3fee041
	int GetPlayerInSquadIndex(PlayerState* PlayerState);// 0x4e89e3fee041
	int GetInTeamIndex(PlayerState* PlayerState);// 0x4e88e3fee041
	int GetAreaIDByIndex(PlayerState* PlayerState, int Index);// 0x4e87e3fee041
	int GetAngleOfCharacterCurrentSign(SGTeamInfo* TeamInfo, byte TeamIndex, PlayerController* PC);// 0x4e86e3fee041
	int64[] GetAllTeammateGIDIncludeNotConnect(PlayerState* PlayerState);// 0x4e85e3fee041
	int64[] GetAllTeammateGID(PlayerState* PlayerState);// 0x4e84e3fee041
	byte GetAliveTeamMembersCount(Character* Character);// 0x4e83e3fee041
	Character*[] GetAliveTeamMembers(Character* Character);// 0x4e82e3fee041
	void AddOBTeamMemberPlayer(PlayerState* PlayerState, Controller* C);// 0x4e81e3fee041

--------------------------------
Class: TeamPlayerOrderInfo
	PlayerState* PlayerState;//[Offset: 0x0, Size: 0x8]
	FString Name;//[Offset: 0x8, Size: 0x10]
	byte Order;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: SGThirdPersonCameraMode.SGCameraMode.Object
	float FollowingCameraVelThreshold;//[Offset: 0xb4, Size: 0x4]
	bool bDoPredictiveAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool bValidateWorstLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	bool bSkipCameraCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]
	bool bNoFOVPostProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb, Size: 0x1]
	bool bLockedToViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	bool bDirectLook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]
	bool bFollowTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 0x1]
	float FollowingInterpSpeed_Pitch;//[Offset: 0xc0, Size: 0x4]
	float FollowingInterpSpeed_Yaw;//[Offset: 0xc4, Size: 0x4]
	float FollowingInterpSpeed_Roll;//[Offset: 0xc8, Size: 0x4]
	Vector WorstLocOffset;//[Offset: 0xcc, Size: 0xc]
	Vector TargetRelativeCameraOriginOffset;//[Offset: 0xd8, Size: 0xc]
	ViewOffsetData ViewOffset;//[Offset: 0xe4, Size: 0x24]
	ViewOffsetData ViewOffsetAdjustments_InRoom;//[Offset: 0x108, Size: 0x24]
	Rotator ViewRotatorOffset;//[Offset: 0x12c, Size: 0xc]
	bool bSmoothViewOffsetPitchChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	ViewOffsetData ViewOffset_ViewportAdjustments;//[Offset: 0x13c, Size: 0x24]
	float OffsetAdjustmentInterpSpeed;//[Offset: 0x218, Size: 0x4]
	byte CurrentViewportType;//[Offset: 0x21c, Size: 0x1]
	float SpectatorCameraRotInterpSpeed;//[Offset: 0x220, Size: 0x4]
	float FOVAngle_ViewportAdjustments;//[Offset: 0x224, Size: 0x4]
	float TemporaryPivotInterpSpeed;//[Offset: 0x23c, Size: 0x4]
	bool SetFocusPoint(Pawn* ViewedPawn);// 0x4e9ae3fee041
	Vector GetCameraWorstCaseLoc(Pawn* TargetPawn, TViewTarget CurrentViewTarget);// 0x4e99e3fee041
	Vector AdjustViewOffset(Pawn* P, Vector Offset);// 0x4e98e3fee041

--------------------------------
Class: ViewOffsetData
	Vector OffsetHigh;//[Offset: 0x0, Size: 0xc]
	Vector OffsetMid;//[Offset: 0xc, Size: 0xc]
	Vector OffsetLow;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_CrouchBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_Crouch.SGThirdPersonCameraMode_CrouchBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_CrouchRun.SGThirdPersonCameraMode_CrouchBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_CrouchSprint.SGThirdPersonCameraMode_CrouchBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_DBNO.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_StandBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_Stand.SGThirdPersonCameraMode_StandBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_Death.SGThirdPersonCameraMode_Stand.SGThirdPersonCameraMode_StandBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object
	float FocusPointInterpSpeedDecaySpeed;//[Offset: 0x254, Size: 0x4]
	float FocusPointInterpSpeed;//[Offset: 0x258, Size: 0x4]

--------------------------------
Class: SGThirdPersonCameraMode_LadderClimb.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_Prone.SGThirdPersonCameraMode_Stand.SGThirdPersonCameraMode_StandBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_StandRun.SGThirdPersonCameraMode_StandBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_StandSprint.SGThirdPersonCameraMode_StandBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverCrouch.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverCrouchLeft.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverCrouchLeftSideBlindShoot.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverCrouchLeftWalking.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverCrouchRightSideBlindShoot.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverCrouchTopBlindShoot.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverCrouchWalking.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverLookingOutLeft.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverLookingOutRight.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverLookingOutTopLeft.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverLookingOutTopRight.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverStand.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverStandLeft.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverStandLeftSideBlindShoot.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverStandLeftWalking.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverStandRightSideBlindShoot.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverStandTopBlindShoot.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverStandWalking.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverTargetingCrouchLeft.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverTargetingCrouchLeftForward.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverTargetingCrouchRight.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverTargetingCrouchRightForward.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverTargetingCrouchTop.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverTargetingCrouchTopLeanRight.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverTargetingStandLeft.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverTargetingStandLeftForward.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverTargetingStandRight.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverTargetingStandRightForward.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TakeCoverTargetingStandTop.SGThirdPersonCameraMode_TakeCoverBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TargetingStand.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TargetingCrouch.SGThirdPersonCameraMode_TargetingStand.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TargetingCrouchWalk.SGThirdPersonCameraMode_TargetingStand.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_TargetingProne.SGThirdPersonCameraMode_TargetingStand.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGThirdPersonCameraMode_Vehicle.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: SGTickableUserWidget.SGUserWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: SGTooltipButton.Button.ContentWidget.PanelWidget.Widget.Visual.Object
	float HoldTime;//[Offset: 0x48c, Size: 0x4]
	class Widget* TooltipClass;//[Offset: 0x490, Size: 0x8]
	enum HorizontalPosition;//[Offset: 0x498, Size: 0x1]
	enum VerticalPosition;//[Offset: 0x499, Size: 0x1]
	bool MouseButtonUpDetected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a, Size: 0x1]
	delegate OnHeldStart;//[Offset: 0x4a0, Size: 0x10]
	delegate OnHeldEnd;//[Offset: 0x4b0, Size: 0x10]
	bool IsOnScreenSlow();// 0x4e9be3fee041

--------------------------------
Class: SGTreasureBoxBeUsedComponent.SGActorBeUsedComponent.ActorComponent.Object
	void UsedByRealCallScript(Actor* User);// 0x4ea0e3fee041
	void UnusedByRealCallScript(Actor* User);// 0x4e9fe3fee041
	bool CanBeUsedByReal(Actor* User);// 0x4e9ee3fee041

--------------------------------
Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x128, Size: 0x8]
	float WheelScrollMultiplier;//[Offset: 0x130, Size: 0x4]
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 0x1]
	bool bEnableOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136, Size: 0x1]
	float FixedLineScrollOffset;//[Offset: 0x138, Size: 0x4]
	delegate BP_OnEntryGenerated;//[Offset: 0x140, Size: 0x10]
	delegate BP_OnEntryReleased;//[Offset: 0x150, Size: 0x10]
	UserWidgetPool EntryWidgetPool;//[Offset: 0x160, Size: 0x80]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x4eabe3fee041
	void SetScrollOffset(const float InScrollOffset);// 0x4eaae3fee041
	void SetScrollbarVisibility(enum InVisibility);// 0x4ea9e3fee041
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x4ea8e3fee041
	void ScrollToTop();// 0x4ea7e3fee041
	void ScrollToBottom();// 0x4ea6e3fee041
	void RequestRefresh();// 0x4ea5e3fee041
	void RegenerateAllEntries();// 0x4ea4e3fee041
	bool IsUserScrolling();// 0x4ea3e3fee041
	float GetScrollOffset();// 0x4ea2e3fee041
	UserWidget*[] GetDisplayedEntryWidgets();// 0x4ea1e3fee041

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 0x10]
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object
	Object*[] ListItemDataPool;//[Offset: 0x2f8, Size: 0x10]
	byte Orientation;//[Offset: 0x308, Size: 0x1]
	byte SelectionMode;//[Offset: 0x309, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0x30a, Size: 0x1]
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30b, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	float EntrySpacing;//[Offset: 0x310, Size: 0x4]
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	bool bEnableScrolledDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 0x1]
	float ScrollOffsetScalar;//[Offset: 0x318, Size: 0x4]
	Object*[] ListItems;//[Offset: 0x320, Size: 0x10]
	delegate BP_OnEntryInitialized;//[Offset: 0x340, Size: 0x10]
	delegate BP_OnItemClicked;//[Offset: 0x350, Size: 0x10]
	delegate BP_OnItemDoubleClicked;//[Offset: 0x360, Size: 0x10]
	delegate BP_OnItemIsHoveredChanged;//[Offset: 0x370, Size: 0x10]
	delegate BP_OnItemSelectionChanged;//[Offset: 0x380, Size: 0x10]
	delegate BP_OnItemScrolledIntoView;//[Offset: 0x390, Size: 0x10]
	delegate BP_OnTabelViewScrolled;//[Offset: 0x3a0, Size: 0x10]
	void SetSelectionMode(byte SelectionMode);// 0x4ec5e3fee041
	void SetSelectedIndex(int Index);// 0x4ec4e3fee041
	void SetLength(int Len);// 0x4ec3e3fee041
	void ScrollIndexIntoView(int Index);// 0x4ec2e3fee041
	void RemoveItem(Object* item);// 0x4ec1e3fee041
	void NavigateToIndex(int Index);// 0x4ec0e3fee041
	bool IsRefreshPending();// 0x4ebfe3fee041
	int GetNumItems();// 0x4ebee3fee041
	Object*[] GetListItems();// 0x4ebde3fee041
	Object* GetItemAt(int Index);// 0x4ebce3fee041
	int GetIndexForItem(Object* item);// 0x4ebbe3fee041
	UserWidget* GetEntryWidgetByIndex(int item);// 0x4ebae3fee041
	UserWidget* GetEntryWidget(Object* item);// 0x4eb9e3fee041
	void ClearListItems();// 0x4eb8e3fee041
	void BP_SetSelectedItem(Object* item);// 0x4eb7e3fee041
	void BP_SetListItems(out const Object*[] InListItems);// 0x4eb6e3fee041
	void BP_SetItemSelection(Object* item, bool bSelected);// 0x4eb5e3fee041
	void BP_ScrollItemIntoView(Object* item);// 0x4eb4e3fee041
	void BP_NavigateToItem(Object* item);// 0x4eb3e3fee041
	bool BP_IsItemVisible(Object* item);// 0x4eb2e3fee041
	bool BP_GetSelectedItems(out Object*[] Items);// 0x4eb1e3fee041
	Object* BP_GetSelectedItem();// 0x4eb0e3fee041
	int BP_GetNumItemsSelected();// 0x4eafe3fee041
	void BP_ClearSelection();// 0x4eaee3fee041
	void BP_CancelScrollIntoView();// 0x4eade3fee041
	void AddItem(Object* item);// 0x4eace3fee041

--------------------------------
Class: TreeView.ListView.ListViewBase.Widget.Visual.Object
	delegate BP_OnGetItemChildren;//[Offset: 0x3c0, Size: 0x10]
	delegate BP_OnItemExpansionChanged;//[Offset: 0x3d0, Size: 0x10]
	void SetItemExpansion(Object* item, bool bExpandItem);// 0x4ec9e3fee041
	bool IsItemExpanded(Object* item);// 0x4ec8e3fee041
	void ExpandAll();// 0x4ec7e3fee041
	void CollapseAll();// 0x4ec6e3fee041

--------------------------------
Class: SGTreeView.TreeView.ListView.ListViewBase.Widget.Visual.Object
	bool bScrollable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]

--------------------------------
Class: SGTssAntiDataWorldSubsystem.SGBaseWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: SGTutorialAIFireComponent.ActorComponent.Object
	SGCharacter* AimTarget;//[Offset: 0xc0, Size: 0x8]
	bool bKillTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	SGProjectile_InstantBullet* InstantBullet;//[Offset: 0xd0, Size: 0x8]
	void StopFire();// 0x4ed6e3fee041
	void StartFireKillTarget();// 0x4ed5e3fee041
	void StartFire();// 0x4ed4e3fee041
	void SetAimTarget(SGCharacter* InputTarget, bool bKill);// 0x4ed3e3fee041
	void CheckForceKill();// 0x4ed2e3fee041

--------------------------------
Class: SGUAMCameraShake_WeaponBob.SGCameraShake_WeaponBob.SGCameraShakeBase.Object
	CurveFloat* BobScaleWithSpeedCurve;//[Offset: 0x50, Size: 0x8]
	float MaxVelocityToNormalize;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: SGUAMCharacterLeanComponent.ActorComponent.Object
	float StandLeanRollOffset;//[Offset: 0xc0, Size: 0x4]
	float ProneLeanRollOffset;//[Offset: 0xc4, Size: 0x4]
	float LeanHorizontalOffset;//[Offset: 0xc8, Size: 0x4]
	float LeanDuration;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: SGUAMWeaponAppearanceComponent.SGWeaponAppearanceComponent.ActorComponent.Object

--------------------------------
Class: SGUAMWeaponFireMode_ProjectileHit.SGWeaponFireMode_ProjectileHit.SGWeaponFireMode_WithProjectileTrajectory.SGWeaponFireMode.Object

--------------------------------
Class: SGWeaponGiveComponent.SGInventoryGiveComponent.ActorComponent.Object
	bool bCanDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]

--------------------------------
Class: SGUAMWeaponGiveComponent.SGWeaponGiveComponent.SGInventoryGiveComponent.ActorComponent.Object

--------------------------------
Class: SGUAMWeaponZoomComponent.SGWeaponZoomComponent.SGWeaponCustomTickComponent.ActorComponent.Object

--------------------------------
Class: SGVehicleAbilityComponent.ActorComponent.Object

--------------------------------
Class: SGVehicleBeUsedDriverComponent.SGActorBeUsedComponent.ActorComponent.Object

--------------------------------
Class: SGVehicleBeUsedPassengerComponent.SGActorBeUsedComponent.ActorComponent.Object

--------------------------------
Class: SGVehicleBoostComponent.ActorComponent.Object
	bool bIsBoost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	float MaxEngineRPMBoostFactor;//[Offset: 0xd4, Size: 0x4]
	float TorqueCurveBoostFactor;//[Offset: 0xd8, Size: 0x4]
	void OnRep_bIsBoost();// 0x4f17e3fee041
	bool IsBoost();// 0x4f16e3fee041
	float GetTorqueCurveBoostFactor();// 0x4f15e3fee041
	float GetMaxEngineRPMBoostFactor();// 0x4f14e3fee041
	void Boost(bool bEnable);// 0x4f13e3fee041

--------------------------------
Class: SGVehicleCameraComponent.ActorComponent.Object
	SpringArmComponent* CachedFirstPersonSpringArmComponent;//[Offset: 0xc0, Size: 0x8]
	CameraComponent* CachedFirstPersonCamera;//[Offset: 0xc8, Size: 0x8]
	SpringArmComponent* CachedThirdPersonSpringArmComponent;//[Offset: 0xd0, Size: 0x8]
	CameraComponent* CachedThirdPersonCamera;//[Offset: 0xd8, Size: 0x8]
	float DriverViewYawMin;//[Offset: 0xe0, Size: 0x4]
	float DriverViewYawMax;//[Offset: 0xe4, Size: 0x4]
	float DriverViewPitchMin;//[Offset: 0xe8, Size: 0x4]
	float DriverViewPitchMax;//[Offset: 0xec, Size: 0x4]
	float AutoResetDriverViewDelay;//[Offset: 0xf0, Size: 0x4]

--------------------------------
Class: SGVehicleComponentInterface.Interface.Object
	Pawn* GetVehicle();// 0x4f1be3fee041
	PlayerState* GetPlayerState();// 0x4f1ae3fee041
	PlayerController* GetPlayerController();// 0x4f19e3fee041
	Character* GetLocalCharacter();// 0x4f18e3fee041

--------------------------------
Class: SGVehicleDeathComponent.SGActorDeathComponent.ActorComponent.Object
	void TornOff();// 0x4f1ce3fee041

--------------------------------
Class: SGVehicleDriverComponent.ActorComponent.Object
	delegate DriverChangedEvent;//[Offset: 0xc0, Size: 0x10]
	Character* Driver;//[Offset: 0xd0, Size: 0x8]
	void SetDriver(Character* NewDriver);// 0x4f1ee3fee041
	Character* GetDriver();// 0x4f1de3fee041

--------------------------------
Class: SGVehicleEnterLeaveComponent.ActorComponent.Object
	float MaxEnterVehicleDistance;//[Offset: 0xc0, Size: 0x4]
	float LastWayPointDistSquaredThreshold;//[Offset: 0xc4, Size: 0x4]
	Vector LastWayPoint;//[Offset: 0xc8, Size: 0xc]
	bool TrySwitchSeat(Character* Character, int SeatIndex);// 0x4f23e3fee041
	bool PassengerTryToLeave(Character* Passenger);// 0x4f22e3fee041
	bool PassengerTryToEnter(Character* NewPassenger);// 0x4f21e3fee041
	bool DriverTryToLeave(Character* Driver);// 0x4f20e3fee041
	bool DriverTryToEnter(Character* NewDriver);// 0x4f1fe3fee041

--------------------------------
Class: SGVehicleFuelComponent.ActorComponent.Object
	delegate FuelChangedEvent;//[Offset: 0xc0, Size: 0x10]
	int FuelAmountMax;//[Offset: 0xd0, Size: 0x4]
	float FuelConsumeNormalPerMinute;//[Offset: 0xd4, Size: 0x4]
	float FuelConsumeAccelPerminute;//[Offset: 0xd8, Size: 0x4]
	float FuelAmountCurrent;//[Offset: 0xdc, Size: 0x4]
	float RandFuleRateMin;//[Offset: 0xe0, Size: 0x4]
	float RandFuleRateMax;//[Offset: 0xe4, Size: 0x4]
	void OnRep_FuelAmountCurrent();// 0x4f28e3fee041
	bool HasFuel();// 0x4f27e3fee041
	float GetVehicleFuelFactor();// 0x4f26e3fee041
	float GetFuelPercentage();// 0x4f25e3fee041
	float AddFuel(float InFuelAmount);// 0x4f24e3fee041

--------------------------------
Class: SGVehicleHealthComponent.SGActorHealthComponent.ActorComponent.Object

--------------------------------
Class: SGVehicleInputProcessComponent.SGActorInputProcessComponent.ActorComponent.Object
	void SwitchSeat(Character* Character, int SeatIndex);// 0x4f2de3fee041
	void ServerSwitchSeat(Character* Character, int SeatIndex);// 0x4f2ce3fee041
	void ServerBoost(bool bEnable);// 0x4f2be3fee041
	void HandBrake(bool bNewHandbrake);// 0x4f2ae3fee041
	void Boost(bool bEnable);// 0x4f29e3fee041

--------------------------------
Class: SGVehicleMovementComponentInterface.Interface.Object

--------------------------------
Class: SGVehicleOptimizeComponent.ActorComponent.Object

--------------------------------
Class: SGVehicleSeatComponent.ActorComponent.Object
	SGVehicleSeatData VehicleSeatData;//[Offset: 0xc0, Size: 0x28]
	Character*[] SeatCharacterList;//[Offset: 0xe8, Size: 0x10]
	int PlayerCount;//[Offset: 0xf8, Size: 0x4]
	void Leave(Character* Character);// 0x4f3ae3fee041
	bool IsPassenger(Character* InCharacter);// 0x4f39e3fee041
	bool IsDriver(Character* InCharacter);// 0x4f38e3fee041
	bool HasEmptySeat();// 0x4f37e3fee041
	bool HasEmptyPassengerSeat();// 0x4f36e3fee041
	SGVehicleSeatData GetVehicleSeatData();// 0x4f35e3fee041
	FName GetSocketBySeat(int SeatIndex);// 0x4f34e3fee041
	int GetSeatIndex(Character* Character);// 0x4f33e3fee041
	Character*[] GetSeatCharacterList();// 0x4f32e3fee041
	Character* GetSeatCharacter(int SeatIndex);// 0x4f31e3fee041
	int GetMaxSeatCount();// 0x4f30e3fee041
	int GetAnEmptyPassengerSeat();// 0x4f2fe3fee041
	void Enter(Character* Character, int SeatIndex);// 0x4f2ee3fee041

--------------------------------
Class: SGVehicleSeatData
	int MaxSeatCount;//[Offset: 0x0, Size: 0x4]
	bool bSeatPlayerVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FName[] SeatSockets;//[Offset: 0x8, Size: 0x10]
	FName[] LeaveVehicleSockets;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: SGVehicleStatics.SGActorStatics.BlueprintFunctionLibrary.Object
	void SwitchSeat(Pawn* Vehicle, Character* Character, int SeatIndex);// 0x4f53e3fee041
	void SetDriver(Pawn* Vehicle, Character* NewDriver);// 0x4f52e3fee041
	bool IsVehicle(Pawn* Vehicle);// 0x4f51e3fee041
	bool IsPassenger(Character* Character);// 0x4f50e3fee041
	bool IsDriver(Character* Character);// 0x4f4fe3fee041
	bool IsBoost(Pawn* Vehicle);// 0x4f4ee3fee041
	bool HasFuel(Pawn* Vehicle);// 0x4f4de3fee041
	bool HasEmptySeat(Pawn* Vehicle);// 0x4f4ce3fee041
	bool HasEmptyPassengerSeat(Pawn* Vehicle);// 0x4f4be3fee041
	Vector GetVelocity(Pawn* Vehicle);// 0x4f4ae3fee041
	FName GetType(Pawn* Vehicle);// 0x4f49e3fee041
	float GetThrottleInput(Pawn* Vehicle);// 0x4f48e3fee041
	float GetSteeringInput(Pawn* Vehicle);// 0x4f47e3fee041
	float GetSpeed(Pawn* Vehicle);// 0x4f46e3fee041
	FName GetSocketBySeat(Pawn* Vehicle, int SeatIndex);// 0x4f45e3fee041
	int GetSeatIndex(Pawn* Vehicle, Character* Character);// 0x4f44e3fee041
	SGVehicleSeatData GetSeatData(Pawn* Vehicle);// 0x4f43e3fee041
	Character*[] GetSeatCharacterList(Pawn* Vehicle);// 0x4f42e3fee041
	Character* GetSeatCharacter(Pawn* Vehicle, int SeatIndex);// 0x4f41e3fee041
	SkeletalMeshComponent* GetMesh(Pawn* Vehicle);// 0x4f40e3fee041
	Character* GetLocalCharacter(World* InWorld);// 0x4f3fe3fee041
	float GetFuelPercentage(Pawn* Vehicle);// 0x4f3ee3fee041
	Character* GetDriver(Pawn* Vehicle);// 0x4f3de3fee041
	Rotator GetCameraComponentRotation(Pawn* Vehicle);// 0x4f3ce3fee041
	int GetAnEmptyPassengerSeat(Pawn* Vehicle);// 0x4f3be3fee041

--------------------------------
Class: SGVehicleTakeDamageComponent.SGActorTakeDamageComponent.ActorComponent.Object

--------------------------------
Class: SGVehicleTireComponent.ActorComponent.Object
	int InitialTireHealth;//[Offset: 0xc0, Size: 0x4]
	SGVehicleTire[] Tires;//[Offset: 0xc8, Size: 0x10]
	void OnRep_Tires();// 0x4f57e3fee041
	int GetTireCount();// 0x4f56e3fee041
	SGVehicleTire GetTire(int Index);// 0x4f55e3fee041
	int GetBrokenTireCount();// 0x4f54e3fee041

--------------------------------
Class: SGVehicleTire
	int Health;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SGVehicleTypeComponent.ActorComponent.Object
	FName VehicleType;//[Offset: 0xc0, Size: 0x8]
	FName GetVehicleType();// 0x4f58e3fee041

--------------------------------
Class: SGView.HUD.Actor.Object
	SGUserWidget*[] Components;//[Offset: 0x3d0, Size: 0x10]
	class UserWidget* BasePanelWidgetClass;//[Offset: 0x3e0, Size: 0x8]
	UserWidget* BasePanelWidget;//[Offset: 0x3e8, Size: 0x8]
	int BasePanelZOrder;//[Offset: 0x3f0, Size: 0x4]
	PanelWidget*[] BasePanelArray;//[Offset: 0x3f8, Size: 0x10]
	UserWidget*[] BasePanelWidgetArray;//[Offset: 0x408, Size: 0x10]
	void CreateView();// 0x4f59e3fee041

--------------------------------
Class: SGVolumeComponentInterface.Interface.Object
	Volume* GetVolume();// 0x4f5ee3fee041
	void ActorLeavingVolume(Actor* Other);// 0x4f5de3fee041
	void ActorEnteredVolume(Actor* Other);// 0x4f5ce3fee041
	void ActorEndOverlap(Actor* Other, ActorComponent* OtherComponent);// 0x4f5be3fee041
	void ActorBeginOverlap(Actor* Other, ActorComponent* OtherComponent);// 0x4f5ae3fee041

--------------------------------
Class: SGVolumeInsulateComponent.ActorComponent.Object
	int TeamIndex;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: SGVolumeProtectComponent.ActorComponent.Object

--------------------------------
Class: SGVolumeSpeedScaleComponent.ActorComponent.Object
	class GameplayEffect* SpeedScaleEffectClass;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: SGVolumeStatics.BlueprintFunctionLibrary.Object
	bool IsInProtectVolume(Volume* Volume);// 0x4f60e3fee041
	bool IsInInsulateVolume(Volume* Volume);// 0x4f5fe3fee041

--------------------------------
Class: SGVolumeTypes.Object

--------------------------------
Class: SGWater.StaticMeshActor.Actor.Object
	bool bSpawnWaterImpactForProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]

--------------------------------
Class: SGWeaponAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	class SGWeaponAttributeSet* DefaultWeaponAttributeClass;//[Offset: 0x1438, Size: 0x8]

--------------------------------
Class: SGWeaponAttributeSet.AttributeSet.Object
	GameplayAttributeData WeaponTestAttribute;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: GameplayAttributeData
	float BaseValue;//[Offset: 0x8, Size: 0x4]
	float CurrentValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SGWeaponAdapter_RangeScore.SGWeaponAdapterItem.Object
	float[] ZoomFOVSwitchArray;//[Offset: 0x140, Size: 0x10]
	bool IsArrayMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	float[] ZoomOffsetArray;//[Offset: 0x158, Size: 0x10]
	float ZoomOffsetAimLength;//[Offset: 0x168, Size: 0x4]
	float ZoomOffsetAimDistance;//[Offset: 0x16c, Size: 0x4]
	int ZoomScopeHigh;//[Offset: 0x170, Size: 0x4]
	int ZoomScopeLow;//[Offset: 0x174, Size: 0x4]
	float MovingRateDecPerc;//[Offset: 0x178, Size: 0x4]
	float ScopeZoomRate;//[Offset: 0x17c, Size: 0x4]
	float CrosshairShowTimeRate;//[Offset: 0x180, Size: 0x4]
	class SGCrosshairStyleWidget* ScopeCrosshairStyleClass;//[Offset: 0x188, Size: 0x8]
	TimerHandle CrosshairDisplayHandler;//[Offset: 0x190, Size: 0x8]
	float ZoomFOV;//[Offset: 0x1b0, Size: 0x4]

--------------------------------
Class: SGWeaponAnimInstance.AnimInstance.Object
	AnimSequence* Sequence_Grip;//[Offset: 0x2b8, Size: 0x8]
	AnimSequence* Sequence_FireMode_Single;//[Offset: 0x2c0, Size: 0x8]
	AnimSequence* Sequence_FireMode_Auto;//[Offset: 0x2c8, Size: 0x8]
	AnimSequence* Sequence_FireMode_Triple;//[Offset: 0x2d0, Size: 0x8]
	AnimSequence* Sequence_FireMode_HoldOpen;//[Offset: 0x2d8, Size: 0x8]
	AnimSequence* Sequence_Unloaded;//[Offset: 0x2e0, Size: 0x8]
	AnimSequence* Sequence_LostCatch;//[Offset: 0x2e8, Size: 0x8]
	SGWeaponAnimInstanceProxy LocalProxy;//[Offset: 0x2f0, Size: 0x7a0]

--------------------------------
Class: SGWeaponAnimInstanceProxy.AnimInstanceProxy
	SGWeaponAnimInstance* AnimInstance;//[Offset: 0x760, Size: 0x8]
	bool bAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 0x1]
	bool bBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 0x1]
	float HoldOpenAlpha;//[Offset: 0x76c, Size: 0x4]
	float LostCatchAlpha;//[Offset: 0x770, Size: 0x4]
	float UnloadedAlpha;//[Offset: 0x774, Size: 0x4]
	float ChamberingAlpha;//[Offset: 0x778, Size: 0x4]
	float Enalbe_Weapon_L_Hand_Marker;//[Offset: 0x77c, Size: 0x4]
	Vector Translation_Hand_L;//[Offset: 0x780, Size: 0xc]
	Rotator Rotation_Hand_L;//[Offset: 0x78c, Size: 0xc]
	bool bCharacterOwnerIs1P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x798, Size: 0x1]

--------------------------------
Class: SGPooledFireEffectAnyThread.SGPooledFireEffect.PooledActor.Actor.Object

--------------------------------
Class: SGWeaponAssembleCaptureEditor.SGWeaponAssembleEnvironment.SGAssembleBase.Actor.Object
	float CaptureInterval;//[Offset: 0x714, Size: 0x4]
	float ImgSizeScale;//[Offset: 0x718, Size: 0x4]
	<FName,Object*> MeshObjMap;//[Offset: 0x720, Size: 0x50]
	bool CaptureStaticMesh(FName PackageName, StaticMesh* TargetMesh);// 0x4f8ee3fee041
	bool CaptureSkeletalMesh(FName PackageName, SkeletalMesh* TargetMesh);// 0x4f8de3fee041
	bool AddMeshToCaptureQueue(FName PackageName, Object* MeshObj);// 0x4f8ce3fee041

--------------------------------
Class: SGWeaponAssembleEnvironmentConfig.ActorComponent.Object
	float TouchRotateSpeed;//[Offset: 0xb8, Size: 0x4]
	float MaxPitch;//[Offset: 0xbc, Size: 0x4]
	float MaxYaw;//[Offset: 0xc0, Size: 0x4]
	float MaxRoll;//[Offset: 0xc4, Size: 0x4]
	float MinPitch;//[Offset: 0xc8, Size: 0x4]
	float MinYaw;//[Offset: 0xcc, Size: 0x4]
	float MinRoll;//[Offset: 0xd0, Size: 0x4]
	float RotChangeSpeed;//[Offset: 0xd4, Size: 0x4]
	float PosChangeSpeed;//[Offset: 0xd8, Size: 0x4]
	float FixCamMaxPosX;//[Offset: 0xdc, Size: 0x4]
	float FocusCamPosXScale;//[Offset: 0xe0, Size: 0x4]
	int ShakeAnimPeriod;//[Offset: 0xe4, Size: 0x4]
	float Tolerance;//[Offset: 0xe8, Size: 0x4]
	float OnePEffectDis;//[Offset: 0xec, Size: 0x4]
	float PinchSpeed;//[Offset: 0xf0, Size: 0x4]
	float MinPinchDisPercent;//[Offset: 0xf4, Size: 0x4]
	float MaxPinchDisPercent;//[Offset: 0xf8, Size: 0x4]
	<FName,FocusPartConfig> FocusPartCfgMap;//[Offset: 0x100, Size: 0x50]
	float FixCamFullScreenPosX;//[Offset: 0x150, Size: 0x4]
	float FocusCamFullScreenPosXScale;//[Offset: 0x154, Size: 0x4]
	Vector CameraPosOffset;//[Offset: 0x158, Size: 0xc]

--------------------------------
Class: SGWeaponAttachmentComponent.ActorComponent.Object
	SGInventory*[] LocalAttachmentRecycleBin;//[Offset: 0xd8, Size: 0x10]
	SGInventory* EmptyHandAttachment;//[Offset: 0xe8, Size: 0x8]
	TimerHandle TimerHandler;//[Offset: 0xf0, Size: 0x8]
	float TimerInterval;//[Offset: 0xf8, Size: 0x4]
	SGWeaponRepInfo[] WeaponRepInfoList;//[Offset: 0x100, Size: 0x10]
	float DisplayDistanceFor3PRepHitInfo;//[Offset: 0x110, Size: 0x4]
	int MaxReplicatedHitInfoInOneFrame;//[Offset: 0x114, Size: 0x4]
	int ProcessdRepMaxCount;//[Offset: 0x128, Size: 0x4]
	void ReplicateWeaponRepInfo();// 0x4fc7e3fee041

--------------------------------
Class: SGWeaponRepInfo
	float RepCount;//[Offset: 0x0, Size: 0x4]
	enum EventType;//[Offset: 0x4, Size: 0x1]
	Object* EventObject;//[Offset: 0x8, Size: 0x8]
	float RepTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SGWeaponBeUsedComponent.SGInventoryBeUsedComponent.SGActorBeUsedComponent.ActorComponent.Object

--------------------------------
Class: SGWeaponComponentInterface.Interface.Object
	SGCharacter* GetWeaponOwner(bool bExtraUseCachedOwner);// 0x4fd6e3fee041
	SGInventory* GetWeapon();// 0x4fd5e3fee041
	bool DisableComponentTickWhenInactive();// 0x4fd4e3fee041

--------------------------------
Class: SGWeaponContainerComponent.ActorComponent.Object
	class SGCaliber* CaliberClass;//[Offset: 0xc0, Size: 0x8]
	class Actor* DefaultBulletClass;//[Offset: 0xc8, Size: 0x8]
	BulletContainerInfo[] BulletClassFilledWhenBeginPlay;//[Offset: 0xd0, Size: 0x10]
	int MaxStackCount;//[Offset: 0xe0, Size: 0x4]
	bool bFillOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	bool bNeedAmmoInBeforeReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 0x1]
	bool bAlwaysShowBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6, Size: 0x1]
	int ShowBulletNum;//[Offset: 0xe8, Size: 0x4]
	float FillContainerBasicTime;//[Offset: 0xec, Size: 0x4]
	float FillMagazineTimeDefaultPerBullet;//[Offset: 0xf0, Size: 0x4]
	float FillMagazineTimeInBagPerBullet;//[Offset: 0xf4, Size: 0x4]
	float FillMagazineTimeInVestBagPerBullet;//[Offset: 0xf8, Size: 0x4]
	float FillMagazineTimeInGunPerBullet;//[Offset: 0xfc, Size: 0x4]
	float UnfillContainerBasicTime;//[Offset: 0x100, Size: 0x4]
	float UnfillMagazineTimeDefaultPerBullet;//[Offset: 0x104, Size: 0x4]
	float UnfillMagazineTimeInBagPerBullet;//[Offset: 0x108, Size: 0x4]
	float UnfillMagazineTimeInVestBagPerBullet;//[Offset: 0x10c, Size: 0x4]
	float UnfillMagazineTimeInGunPerBullet;//[Offset: 0x110, Size: 0x4]
	BulletMeshInfo[] BulletSockets;//[Offset: 0x118, Size: 0x10]
	SoftObjectPath FillMagazineMontage;//[Offset: 0x128, Size: 0x18]
	SoftObjectPath UnfillMagazineMontage;//[Offset: 0x140, Size: 0x18]
	bool bBelt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	int CheckRangeMin;//[Offset: 0x15c, Size: 0x4]
	int CheckRangeMax;//[Offset: 0x160, Size: 0x4]
	BulletContainerInfo[] ContainDataList;//[Offset: 0x168, Size: 0x10]
	BulletContainerInfo[] ContainDataListForRep;//[Offset: 0x178, Size: 0x10]
	enum MagazineCheckState;//[Offset: 0x190, Size: 0x1]
	bool ShowBulletWhenSpectated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 0x1]
	bool bInBagState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192, Size: 0x1]
	Character* MagazineCheckCharacter;//[Offset: 0x198, Size: 0x8]
	<uint64,class SGInventory> BulletClassFindMap;//[Offset: 0x1c0, Size: 0x50]
	<uint64,SoftObjectPath> BulletClassCacheMap;//[Offset: 0x210, Size: 0x50]
	StackableItemSourceInfo[] BulletSourceInfos;//[Offset: 0x260, Size: 0x10]
	void TryPreFillBySouce(SGInventory* InFillInventory, Character* InCharacter, bool bUseExtra, bool bInReloading);// 0x4fece3fee041
	bool PreFillBySource(SGInventory* InFillInventory, Character* InCharacter);// 0x4febe3fee041
	void OnRepContainerData();// 0x4feae3fee041
	void OnRep_ShowBulletWhenSpectated();// 0x4fe9e3fee041
	void OnRep_MagazineCheckState();// 0x4fe8e3fee041
	void OnParentActorChanged(Actor* NewParent, int NewContainerIndex);// 0x4fe7e3fee041
	void OnInventoryHiddenStateChanged(bool bMeshHidden);// 0x4fe6e3fee041
	bool MakePercentageByBulletClass(class Actor BulletClass, float Ratio, int MinVal, enum PushCharacterType, enum PushSpawnType);// 0x4fe5e3fee041
	bool MakeFullByBulletClass(class Actor BulletClass);// 0x4fe4e3fee041
	bool MakeFull(enum PushCharacterType, enum PushSpawnType);// 0x4fe3e3fee041
	bool IsWeaponContainerFull();// 0x4fe2e3fee041
	class Actor GetNextBullet();// 0x4fe1e3fee041
	int GetMaxCapacity();// 0x4fe0e3fee041
	SGInventory* GetFirstCarriedAmmoInventoryReachable();// 0x4fdfe3fee041
	int GetCurrentCapacity();// 0x4fdee3fee041
	int GetAccurateAmmoOnCheck();// 0x4fdde3fee041
	void FreshBulletMesh();// 0x4fdce3fee041
	void FillByInventoryMT(SGInventory* InFillInventory, int Num, bool bForceNum, bool bPushFront);// 0x4fdbe3fee041
	int FillByInventory(SGInventory* InFillInventory, bool bUseExtra, bool bInReloading);// 0x4fdae3fee041
	int FillByCaliberInReachablePack(bool bInReloading);// 0x4fd9e3fee041
	int FillByCaliber();// 0x4fd8e3fee041
	void FillAmmoOnHangingWeapon(SGInventory* InFillInventory, Character* InCharacter);// 0x4fd7e3fee041

--------------------------------
Class: SGWeaponCrosshairComponent.ActorComponent.Object
	bool bCentralDotVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	class SGCrosshairStyleWidget* CrosshairStyleWidgetClass;//[Offset: 0xc8, Size: 0x8]
	class SGCrosshairStyleWidget* OverriddenCrosshairStyleWidgetClass;//[Offset: 0xd0, Size: 0x8]
	float CrosshairExpandRatio;//[Offset: 0xd8, Size: 0x4]

--------------------------------
Class: SGWeaponDamageComponent.ActorComponent.Object
	WeaponDamageInfo[] WeapDamageParams;//[Offset: 0xc0, Size: 0x10]
	float[] MeleeBaseDamage;//[Offset: 0xd0, Size: 0x10]
	float MeleeArmorDamage;//[Offset: 0xe0, Size: 0x4]
	float[] MeleeDamageReductionArray;//[Offset: 0xe8, Size: 0x10]
	float MeleeArmorDamageRatio;//[Offset: 0xf8, Size: 0x4]
	float MeleeBleedTriggerChance;//[Offset: 0xfc, Size: 0x4]
	float MeleeTraceRange;//[Offset: 0x100, Size: 0x4]
	float MeleeDamageScaleHead;//[Offset: 0x104, Size: 0x4]
	float MeleeDamageScaleArms;//[Offset: 0x108, Size: 0x4]
	float MeleeDamageScaleLegs;//[Offset: 0x10c, Size: 0x4]
	float MeleeDamageScaleStomach;//[Offset: 0x110, Size: 0x4]
	float MeleeDamageScaleChest;//[Offset: 0x114, Size: 0x4]
	class GameplayAbility* EnergyReduceAbilityByMeleeAtk;//[Offset: 0x118, Size: 0x8]
	float MeleeAtkEnergyConsume;//[Offset: 0x120, Size: 0x4]
	void ServerUpdateMeleeFirePhase(int MeleeWeaponCurPhase, int LastMeleeFirePhase);// 0x4ff0e3fee041
	void ServerOnHitGlass(Actor* InGlassActor, int InGlassColorID, Vector InImpactNormal, int InWeaponType);// 0x4fefe3fee041
	void ServerMakeInstantHitDamage(Actor* DamageTaker, Vector HitTargetLoc, enum InFireMode, float DamageAmount, Vector StartPoint, const SGPointDamageEvent DamageEvent, float ClientTime, Vector ClientDamageCauserPos, bool bBodyHitThrough, Vector HitAngle);// 0x4feee3fee041
	void MakeInstantHitDamage(Actor* DamageTaker, float DamageAmount, out const SGPointDamageEvent DamageEvent);// 0x4fede3fee041

--------------------------------
Class: SGWeaponDataComponent.ActorComponent.Object
	AutoAimParamsSet* AutoAimParamsSet;//[Offset: 0xc0, Size: 0x8]
	AutoAimParamsSet*[] AutoAimParamsSetAdditional;//[Offset: 0xc8, Size: 0x10]
	BulletTraceDataAsset* BulletTraceDataAsset;//[Offset: 0xd8, Size: 0x8]

--------------------------------
Class: SGWeaponDebugComponent.ActorComponent.Object
	bool bDrawWeaponDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: SGWeaponEvents.SGGameInstanceComponent.Object
	delegate BulletStartEvent;//[Offset: 0x30, Size: 0x10]
	delegate BulletEndEvent;//[Offset: 0x40, Size: 0x10]
	delegate BulletPredestinedShotEvent;//[Offset: 0x50, Size: 0x10]
	delegate DrawLineEvent;//[Offset: 0x60, Size: 0x10]
	delegate OnPushBullet;//[Offset: 0x70, Size: 0x10]
	delegate OnWeaponAssembled;//[Offset: 0x80, Size: 0x10]
	delegate OnWeaponDisassembled;//[Offset: 0x90, Size: 0x10]
	delegate OnBulletSpawned;//[Offset: 0xa0, Size: 0x10]
	delegate OnAdapterTotalCountChanged;//[Offset: 0xb0, Size: 0x10]
	SGWeaponEvents* GetSGWeaponEvents(Object* InWorldContextObject);// 0x4ff1e3fee041

--------------------------------
Class: SGWeaponFireMode_InstantHit.SGWeaponFireMode.Object
	int ModeDamage;//[Offset: 0x3c, Size: 0x4]
	int ModeDamageMin;//[Offset: 0x40, Size: 0x4]
	float ModeDamageScaleToHead;//[Offset: 0x44, Size: 0x4]
	float ModeDamageScaleToArms;//[Offset: 0x48, Size: 0x4]
	float ModeDamageScaleToChest;//[Offset: 0x4c, Size: 0x4]
	float ModeDamageScaleToLegs;//[Offset: 0x50, Size: 0x4]
	float ModeDamageScaleToStomach;//[Offset: 0x54, Size: 0x4]
	float ModeDamageDistanceModifier;//[Offset: 0x58, Size: 0x4]
	float ModeZeroModifyDistance;//[Offset: 0x5c, Size: 0x4]
	float ModeBulletBeginDropDistance;//[Offset: 0x60, Size: 0x4]
	float ModeBulletFakeDropZ;//[Offset: 0x64, Size: 0x4]
	class DamageType* ModeHitDamageType;//[Offset: 0x68, Size: 0x8]
	class Actor[] NoBlockActorType;//[Offset: 0x70, Size: 0x10]
	float ModeHitMomentum;//[Offset: 0x80, Size: 0x4]
	float LastRandSpreadRange;//[Offset: 0x84, Size: 0x4]
	HitResult RecordLastHitResult;//[Offset: 0x90, Size: 0x98]
	Vector RecordLastShootDir;//[Offset: 0x128, Size: 0xc]
	float RecordTargetDistance;//[Offset: 0x134, Size: 0x4]
	int RecordDesireDamageValue;//[Offset: 0x138, Size: 0x4]
	void ScaledDamageByHitGroup(out int RealDamage, const SGCharacter* HitPawn, const PhysicalMaterial* HitPhysMaterial);// 0x4ff5e3fee041
	float GetHitGroupDamageRatio(enum RealHitGroup);// 0x4ff4e3fee041
	void DoRealDamage();// 0x4ff3e3fee041

--------------------------------
Class: SGWeaponFireMode_MeleeHit.SGWeaponFireMode.Object
	WeaponMeleeHitInfo LocalHitInfo;//[Offset: 0x40, Size: 0x30]
	class DamageType* DamageType;//[Offset: 0xa0, Size: 0x8]
	float SphereTraceRadius;//[Offset: 0xa8, Size: 0x4]
	ExtraHitDeltaRotators[] ExtraHitDeltaRotators;//[Offset: 0xb0, Size: 0x10]
	ExtraHitDeltaRotators[] ProneExtraHitDeltaRotators;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: WeaponMeleeHitInfo
	float[] Damage;//[Offset: 0x0, Size: 0x10]
	float TraceRange;//[Offset: 0x10, Size: 0x4]
	float TraceHalfAngle;//[Offset: 0x14, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x18, Size: 0x8]
	float Momentum;//[Offset: 0x20, Size: 0x4]
	int SubWeaponType;//[Offset: 0x24, Size: 0x4]
	Vector2D CheckRangeYZ;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ExtraHitDeltaRotators
	Rotator[] Rotators;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SGWeaponFireMode_MeleeHitByMotion.SGWeaponFireMode.Object
	BoxComponent* DamagePoint;//[Offset: 0x48, Size: 0x8]
	<Actor*> BeHitActors;//[Offset: 0x50, Size: 0x50]
	class DamageType* HitInfoDamageType;//[Offset: 0xb8, Size: 0x8]
	bool bDebugHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	MeleeTraceConf[] TraceConfArray;//[Offset: 0xc8, Size: 0x10]

--------------------------------
Class: MeleeTraceConf
	float TraceDis;//[Offset: 0x0, Size: 0x4]
	Rotator TraceRotationAdjustment;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: SGWeaponFireMode_PhysicSimulate.SGWeaponFireMode.Object
	class SGProjectile_GravityBullet* BulletProjClass;//[Offset: 0x40, Size: 0x8]
	int ModeDamage;//[Offset: 0x48, Size: 0x4]
	int ModeDamageMin;//[Offset: 0x4c, Size: 0x4]
	float ModeDamageScaleToStomach;//[Offset: 0x50, Size: 0x4]
	float ModeDamageScaleToHead;//[Offset: 0x54, Size: 0x4]
	float ModeDamageScaleToArms;//[Offset: 0x58, Size: 0x4]
	float ModeDamageScaleToChest;//[Offset: 0x5c, Size: 0x4]
	float ModeDamageScaleToLegs;//[Offset: 0x60, Size: 0x4]
	float ModeDamageScaleToLimb;//[Offset: 0x64, Size: 0x4]
	float ModeDamageDistanceModifier;//[Offset: 0x68, Size: 0x4]
	float ModeDamageModifyZeroDistance;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: SGWeaponFireMode_ProjectileGrenade.SGWeaponFireMode_WithProjectileTrajectory.SGWeaponFireMode.Object
	class SGThrowableProjectile* ThrowableProjcetileClass;//[Offset: 0x118, Size: 0x8]
	float PlayEffectTime;//[Offset: 0x120, Size: 0x4]
	float PlayEffectTimeRandLimit;//[Offset: 0x124, Size: 0x4]
	SGThrowableProjectile* ThrowableProjectile;//[Offset: 0x128, Size: 0x8]
	float DefaultGravityScale;//[Offset: 0x130, Size: 0x4]
	SGWeapon* CachedThrowableWeapon;//[Offset: 0x138, Size: 0x8]
	void OnPlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x4ff6e3fee041

--------------------------------
Class: SGWeaponFireMode_ProjectileLauncherHit.SGWeaponFireMode.Object
	bool bShowProjectileTrajectory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	class SGThrowableProjectile* ThrowableProjcetileClass;//[Offset: 0x40, Size: 0x8]
	float InitSpeed;//[Offset: 0x48, Size: 0x4]
	float MaxSpeed;//[Offset: 0x4c, Size: 0x4]
	float ProjectileLifeSpan;//[Offset: 0x50, Size: 0x4]
	Vector GetFireLocation();// 0x4ff8e3fee041
	Rotator GetCameraRotation();// 0x4ff7e3fee041

--------------------------------
Class: SGWeaponFireMode_StickOnInterface.SGWeaponFireMode_WithProjectileTrajectory.SGWeaponFireMode.Object
	class SGThrowableProjectile* ThrowableProjectileClass;//[Offset: 0x1b8, Size: 0x8]
	enum ThrowableType;//[Offset: 0x1c0, Size: 0x1]
	float SetupTime;//[Offset: 0x1c4, Size: 0x4]
	float MaxDistances;//[Offset: 0x1c8, Size: 0x4]
	float PlayEffectTime;//[Offset: 0x1cc, Size: 0x4]

--------------------------------
Class: SGWeaponHeatComponent.ActorComponent.Object
	CurveFloat* HeatReduceSpeedCurve;//[Offset: 0xc0, Size: 0x8]
	CurveFloat* HeatIncreaseCurve;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: SGWeaponPostAnimInstance.AnimInstance.Object
	SGWeaponPostAnimInstanceProxy LocalProxy;//[Offset: 0x2c0, Size: 0x770]

--------------------------------
Class: SGWeaponPostAnimInstanceProxy.AnimInstanceProxy
	SGWeaponPostAnimInstance* AnimInstance;//[Offset: 0x760, Size: 0x8]

--------------------------------
Class: SGWeaponRenderView.SGAssembleBase.Actor.Object
	float RotateAngularSpeedYaw;//[Offset: 0x464, Size: 0x4]
	float RotateAngularSpeedPitch;//[Offset: 0x468, Size: 0x4]
	float RotateInertiaInterpSpeed;//[Offset: 0x46c, Size: 0x4]
	float ClearRotateInertiaDelay;//[Offset: 0x470, Size: 0x4]
	float MaxTouchTimeSpanForClick;//[Offset: 0x474, Size: 0x4]
	float MaxTimeGapForDoubleClick;//[Offset: 0x478, Size: 0x4]
	float RotationResetInterpSpeed;//[Offset: 0x47c, Size: 0x4]
	float MaxPitch;//[Offset: 0x4a4, Size: 0x4]
	float MaxYaw;//[Offset: 0x4a8, Size: 0x4]
	float MaxRoll;//[Offset: 0x4ac, Size: 0x4]
	float MinPitch;//[Offset: 0x4b0, Size: 0x4]
	float MinYaw;//[Offset: 0x4b4, Size: 0x4]
	float MinRoll;//[Offset: 0x4b8, Size: 0x4]
	float RotChangeSpeed;//[Offset: 0x4bc, Size: 0x4]
	float PosChangeSpeed;//[Offset: 0x4c0, Size: 0x4]
	float FixCamMaxPosX;//[Offset: 0x4c4, Size: 0x4]
	float FixCamMinPosX;//[Offset: 0x4c8, Size: 0x4]
	float FixCamFullScreenPosX;//[Offset: 0x4cc, Size: 0x4]
	float FocusCamPosXScale;//[Offset: 0x4d0, Size: 0x4]
	float Tolerance;//[Offset: 0x4d4, Size: 0x4]
	float OnePEffectDis;//[Offset: 0x4d8, Size: 0x4]
	float PinchSpeed;//[Offset: 0x4dc, Size: 0x4]
	float MinPinchDisPercent;//[Offset: 0x4e0, Size: 0x4]
	float MaxPinchDisPercent;//[Offset: 0x4e4, Size: 0x4]
	float PartFullFillPercent;//[Offset: 0x4e8, Size: 0x4]
	float FocusDistance;//[Offset: 0x4ec, Size: 0x4]
	Rotator DefaultWeaponRotAfterFocus;//[Offset: 0x4f0, Size: 0xc]
	class CameraActor* CamActorClass;//[Offset: 0x500, Size: 0x8]
	float FullCamPullClosePercent;//[Offset: 0x508, Size: 0x4]
	float RenderOverTime;//[Offset: 0x50c, Size: 0x4]
	bool Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 0x1]
	CurveVector* CameraOffsetCurve;//[Offset: 0x518, Size: 0x8]
	Rotator FinishAssembleWeaponEndRot;//[Offset: 0x520, Size: 0xc]
	Rotator FinishAssembleWeaponStartRot;//[Offset: 0x52c, Size: 0xc]
	float AccelOfFinishAssembleAnim;//[Offset: 0x538, Size: 0x4]
	float InitSpeedOfFinishAssembleAnim;//[Offset: 0x53c, Size: 0x4]
	float NewSpeedOfFinishAssembleAnim;//[Offset: 0x540, Size: 0x4]
	float StartChangeSpeedTime;//[Offset: 0x544, Size: 0x4]
	Vector CameraPos;//[Offset: 0x548, Size: 0xc]
	float DefaultWeaponLength;//[Offset: 0x554, Size: 0x4]
	Vector PosOffsetOfFinalState;//[Offset: 0x558, Size: 0xc]
	Vector WeaponPosOffsetOfStateFocus;//[Offset: 0x564, Size: 0xc]
	FName[] IgnoreRotateSockets;//[Offset: 0x570, Size: 0x10]
	int[] IgnoreRotateWeapons;//[Offset: 0x580, Size: 0x10]
	float CenterPosOffset;//[Offset: 0x590, Size: 0x4]
	float MaxConeAngle;//[Offset: 0x594, Size: 0x4]
	float BaseWeaponLen;//[Offset: 0x598, Size: 0x4]
	MaterialInterface* MaterialTemplate;//[Offset: 0x5a0, Size: 0x8]
	SceneComponent* PivotComp;//[Offset: 0x5a8, Size: 0x8]
	CameraActor* CamActor;//[Offset: 0x5b0, Size: 0x8]
	SGPlayerController* SGPlayerController;//[Offset: 0x5b8, Size: 0x8]
	MeshComponent* LastOutlinedMeshComp;//[Offset: 0x5c0, Size: 0x8]
	SGInventory* CurrentAssembleWeapon;//[Offset: 0x5c8, Size: 0x8]
	Actor*[] AllActors;//[Offset: 0x5d0, Size: 0x10]
	Actor*[] SkyLightActors;//[Offset: 0x5e0, Size: 0x10]
	Actor*[] DirectionalLightActors;//[Offset: 0x5f0, Size: 0x10]
	ActorComponent*[] AllActorComps;//[Offset: 0x600, Size: 0x10]
	SpotLightComponent* SpotLightComponent;//[Offset: 0x610, Size: 0x8]
	SceneCaptureComponent2D* SceneCaptureComp;//[Offset: 0x618, Size: 0x8]
	StaticMeshComponent* BGComp;//[Offset: 0x620, Size: 0x8]
	Rotator WeaponRotBeforeFocus;//[Offset: 0x690, Size: 0xc]
	bool UnFoucsOnItem();// 0x5056e3fee041
	void SwitchToCameraStateFullScreen();// 0x5055e3fee041
	void SwitchToCameraStateFocus();// 0x5054e3fee041
	void SwitchToCameraStateFinishAssemble();// 0x5053e3fee041
	void SwitchToCameraStateFinal();// 0x5052e3fee041
	void SwitchToCameraStateAssemble();// 0x5051e3fee041
	void SwitchLight(bool bLightON, bool bInCapture);// 0x5050e3fee041
	void SwitchCamera();// 0x504fe3fee041
	bool StopRender(bool bResetMesh);// 0x504ee3fee041
	void SetTouchWeaponFingerIndex(int FingerIndex);// 0x504de3fee041
	void SetMargin(float InMargin);// 0x504ce3fee041
	void SetLightPos(float WeaponLen, float DistanceOfCenterAndWeaponPoint);// 0x504be3fee041
	void SetIsInHallRoom(bool bInHallRoom);// 0x504ae3fee041
	void SetCanRotate(bool CanRotate);// 0x5049e3fee041
	void SetCameraPosOfffset(Vector Offset);// 0x5048e3fee041
	void ResetConeAngle();// 0x5047e3fee041
	void RenderNewWeapon(SGInventory* InInventory);// 0x5046e3fee041
	void RemoveItem(FName SocketName, AdapterInfo[] SocketPath, bool bRemoveAll);// 0x5045e3fee041
	void ReFillLightActors();// 0x5044e3fee041
	void OnInputTouch(byte Handle, byte Type, out const Vector Location);// 0x5043e3fee041
	bool HaveConflictSocket(FName SocketName);// 0x5042e3fee041
	float GetDistanceOfCAmeraAndWeapon();// 0x5041e3fee041
	Rotator GetCurRot();// 0x5040e3fee041
	FString GenerateSocketPath(AdapterInfo[] SocketPath);// 0x503fe3fee041
	bool FocusOnItem(FName SocketName, AdapterInfo[] SocketPath, bool bFocus, SGInventory* InInventory);// 0x503ee3fee041
	void ClearOutline();// 0x503de3fee041
	void CaptureRT(Image* TargetImg, float RTWidth);// 0x503ce3fee041

--------------------------------
Class: AdapterInfo
	int X;//[Offset: 0x0, Size: 0x4]
	FString Y;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SGWeaponScopeRenderComponent.SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99a, Size: 0x1]
	int Level;//[Offset: 0x99c, Size: 0x4]
	void OnSwitchFPPEvent(bool bFPP);// 0x5062e3fee041

--------------------------------
Class: SGWeaponStatics.BlueprintFunctionLibrary.Object
	void WeaponFoldStock(SGInventory* Weapon, bool bDoFoldStock);// 0x5181e3fee041
	bool WeaponCanSprint(SGInventory* Inventory);// 0x5180e3fee041
	void UpdateWeaponMeshBoneTransform(SGInventory* InWeapon);// 0x517fe3fee041
	void UpdateGripComponentLocation(SGInventory* InWeapon);// 0x517ee3fee041
	void UpdateFireAnimRecoil(SGInventory* InWeapon, float DeltaTime);// 0x517de3fee041
	void UnloadMagazine(SGInventory* Inventory, Character* Character);// 0x517ce3fee041
	bool UnFoucsOnItem(SGWeaponRenderView* Env);// 0x517be3fee041
	bool TraceRadiusHit(Actor* SourceActor, float InRange, out HitResult[] OutHitList);// 0x517ae3fee041
	bool SwapWeaponAdapterByType(SGInventory* FromWeapon, SGInventory* ToWeapon, enum AdapterSocketType);// 0x5179e3fee041
	bool SwapWeaponAdapter(SGInventory* Adapter, SGInventory* ToWeapon);// 0x5178e3fee041
	bool SupportMultiShootingMode(SGInventory* Inventory);// 0x5177e3fee041
	bool StopRenderModel(SGWeaponRenderView* Env);// 0x5176e3fee041
	void StopFire(SGInventory* Weapon, int FireMode);// 0x5175e3fee041
	void StartFire(SGInventory* Weapon, int FireMode);// 0x5174e3fee041
	bool SphereTraceAround(Actor* SourceActor, float InTraceRadius, out HitResult[] HitResults, out const Actor*[] ActorsToIgnore);// 0x5173e3fee041
	SGAssembleBase* SpawnAssembleActor(class SGAssembleBase AssembleSceneClass, SGPlayerController* PCOwner, Vector SpawnPos);// 0x5172e3fee041
	enum ShowWeaponByDisplayType(SGInventory* InWeapon, enum displayType);// 0x5171e3fee041
	void ShowWeaponBullets(SGInventory* InWeapon, bool bShow);// 0x5170e3fee041
	void ShowSimpleWeapon(SGInventory* InWeapon, bool bShow);// 0x516fe3fee041
	void ShowModularWeapon(SGInventory* InWeapon, bool bShow, bool bUnloadMeshIfHidden);// 0x516ee3fee041
	void ShowMagazineBullets(SGInventory* InMagazine, bool bShow);// 0x516de3fee041
	bool ShouldPlayCameraSocketAnimation(SGInventory* InWeapon);// 0x516ce3fee041
	bool ShouldForceShowModularMesh(SGInventory* InWeapon);// 0x516be3fee041
	bool ShouldFillAmmoOneByOne(SGInventory* Weapon);// 0x516ae3fee041
	bool ShouldBulletPenetration(out const HitResult HitResult);// 0x5169e3fee041
	void SetWeaponMeshLOD(SGInventory* InWeapon, int TargetLod);// 0x5168e3fee041
	bool SetupMagazineDefaultBulletClass(SGInventory* CurrentWeapon);// 0x5167e3fee041
	bool SetThrowableWeaponFastThrow(SGInventory* InWeapon);// 0x5166e3fee041
	void SetNoPenetration(SGInventory* InWeapon, bool bNoPenentration);// 0x5165e3fee041
	void SetMagazineInspectState(SGInventory* InMagazine, enum InState, Character* TargetCharacter);// 0x5164e3fee041
	void SetImageIconByInventoryData();// 0x5163e3fee041
	void SetDefaultInFoldStockState(SGInventory* Weapon, bool bDefaultState);// 0x5162e3fee041
	void SetBoreInspectState(SGInventory* InWeapon, enum InState, Character* TargetCharacter);// 0x5161e3fee041
	bool SaveWeaponIcon(FString InSignCode, Object* InSaveObject, FString Path, Vector2D ImgSize, TextureRenderTarget2D* TargetRT);// 0x5160e3fee041
	void RequestShowModularMesh(SGInventory* InWeapon, bool bShouldKeep);// 0x515fe3fee041
	void RenderCustomDepthPass(SGInventory* InWeapon, bool bUseCustomDepth);// 0x515ee3fee041
	bool RemoveItem(SGWeaponRenderView* Env, FName SocketName, AdapterInfo[] SocketPath, bool bRemoveAll);// 0x515de3fee041
	void RefreshCurrentSight(SGInventory* Weapon);// 0x515ce3fee041
	void PullBolt(SGInventory* InWeapon);// 0x515be3fee041
	void PrintAssembles(SGInventory* InWeapon);// 0x515ae3fee041
	void PostGunKickEvaluate(SGInventory* InWeapon);// 0x5159e3fee041
	class Actor PopLastCostAmmo(SGInventory* Weapon);// 0x5158e3fee041
	void PlayImpactEffects(SGInventory* Weapon, out const HitResult Hit, byte ShotIndex);// 0x5157e3fee041
	void OnSwitchScope(SGInventory* InWeapon, SGInventory* LastSight, SGInventory* CurrentSight);// 0x5156e3fee041
	bool NeedPullBolt(SGInventory* InWeapon);// 0x5155e3fee041
	bool NeedOpenBoltBeforeReload(SGInventory* InWeapon);// 0x5154e3fee041
	void ModifyDirectionByMOA(SGInventory* InWeapon, out Vector FireDirection);// 0x5153e3fee041
	void MergeWeapon(SGInventory* InWeapon);// 0x5152e3fee041
	void MakeRadialDamage(Character* SourceCharacter, Actor* DamageTaker, int DamageAmount, float DamageRange, class DamageType DamageTypeClass, out const HitResult HitResult);// 0x5151e3fee041
	void MakeMagazineFull(SGInventory* InWeapon);// 0x5150e3fee041
	void MakeFireNoise(SGInventory* Weapon, out const Vector ShotLocation, out const Vector ShotDirection);// 0x514fe3fee041
	bool IsZoomTraning(SGInventory* Inventory);// 0x514ee3fee041
	bool IsZooming(SGInventory* Inventory);// 0x514de3fee041
	bool IsZoomFOVApplied(SGInventory* Inventory);// 0x514ce3fee041
	bool IsWeaponSupportAdapterSocketType(SGInventory* Inventory, enum AdapterSocketeType);// 0x514be3fee041
	bool IsWeaponShouldFillOneByOneForReload(SGInventory* Weapon);// 0x514ae3fee041
	bool IsWeaponShouldFillOneByOne(SGInventory* Weapon);// 0x5149e3fee041
	bool IsWeaponShouldFillBores(SGInventory* Weapon);// 0x5148e3fee041
	bool IsWeaponOpsLockedCharacterMoving(SGInventory* Inventory);// 0x5147e3fee041
	bool IsWeaponInSupportOnState(SGInventory* Weapon);// 0x5146e3fee041
	bool IsWeaponInFoldStockState(SGInventory* InWeapon);// 0x5145e3fee041
	bool IsWeaponInBurstFiring(SGInventory* CurrentWeapon);// 0x5144e3fee041
	bool IsWeaponClass(class SGInventory InventoryClass);// 0x5143e3fee041
	bool IsWeapon(SGInventory* Inventory);// 0x5142e3fee041
	bool IsUsingSimpleMesh(SGInventory* InWeapon);// 0x5141e3fee041
	bool IsUsingScope(SGInventory* InWeapon, bool bForceFresh);// 0x5140e3fee041
	bool IsUsingRearSight(SGInventory* InWeapon, bool bForceFresh);// 0x513fe3fee041
	bool IsThrowWeaponCanHold(SGInventory* InWeapon);// 0x513ee3fee041
	bool IsThrowableWeaponFastThrow(SGInventory* InWeapon);// 0x513de3fee041
	bool IsThrowableWeapon(const SGInventory* Inventory);// 0x513ce3fee041
	bool IsSpecialWeapon(SGInventory* Inventory);// 0x513be3fee041
	bool IsShoulderZooming(SGInventory* Inventory);// 0x513ae3fee041
	bool IsShotgun(SGInventory* InWeapon);// 0x5139e3fee041
	bool IsShooting(SGInventory* Inventory);// 0x5138e3fee041
	bool IsPropWeapon(Actor* Inv);// 0x5137e3fee041
	bool IsPistol(SGInventory* InWeapon);// 0x5136e3fee041
	bool IsPendingBackAttachingToRightSocket(SGWeapon* Weapon);// 0x5135e3fee041
	bool IsMuzzleSuppressingSound(SGInventory* Weapon);// 0x5134e3fee041
	bool IsMultipleBoresWeapon(SGInventory* Weapon);// 0x5133e3fee041
	bool IsMissileWeapon(SGInventory* InWeapon);// 0x5132e3fee041
	bool IsMeleeWeapon(const SGInventory* Inventory);// 0x5131e3fee041
	bool IsMainWeapon(const SGInventory* Inventory);// 0x5130e3fee041
	bool IsMagazineShouldFillOneByOne(SGInventory* Magazine);// 0x512fe3fee041
	bool IsMagazineFullOfWeapon(SGInventory* Weapon);// 0x512ee3fee041
	bool IsMagazineFull(SGInventory* Magazine);// 0x512de3fee041
	bool IsMagazineClass(Object* WorldContextObject, class SGInventory InvClass);// 0x512ce3fee041
	bool IsMagazine(SGInventory* Inventory);// 0x512be3fee041
	bool IsM67(SGInventory* Inventory);// 0x512ae3fee041
	bool IsInLowReady(SGInventory* InWeapon);// 0x5129e3fee041
	bool IsInAutoFiringMode(SGInventory* Inventory);// 0x5128e3fee041
	bool IsHoldOpen(SGInventory* Inventory);// 0x5127e3fee041
	bool IsFillAmmoOnOpenBolt(SGInventory* InWeapon);// 0x5126e3fee041
	bool IsEmptyHand(SGInventory* Inventory);// 0x5125e3fee041
	bool IsDroneWeapon(Actor* Inv);// 0x5124e3fee041
	bool IsDoingWeaponOperation(SGInventory* InWeapon);// 0x5123e3fee041
	bool IsCurrentSightNeedADSSway(SGWeapon* Weapon);// 0x5122e3fee041
	bool IsClientFinishAssemble(SGInventory* InWeapon, bool bCheckFullyLoad, bool bIgnoreInvalidMesh);// 0x5121e3fee041
	bool IsBackAttachingOnRightSocket(SGWeapon* Weapon);// 0x5120e3fee041
	bool IsAssistWeapon(const SGInventory* Inventory);// 0x511fe3fee041
	bool IsAssembleEnoughToStartFire(SGInventory* Weapon);// 0x511ee3fee041
	bool IsAnimationSetLoaded(SGInventory* InWeapon);// 0x511de3fee041
	bool IsAmmo(SGInventory* Inventory);// 0x511ce3fee041
	bool IsAllWeaponMeshLoaded(SGInventory* Inventory);// 0x511be3fee041
	bool IfWeaponAllowRightHandIK(SGInventory* InWeapon);// 0x511ae3fee041
	bool IfWeaponAllowLeftHandIK(SGInventory* InWeapon);// 0x5119e3fee041
	void HideWeaponAndAdapter(SGInventory* Weapon, bool Hidden);// 0x5118e3fee041
	bool HaveIllegalSight(SGInventory* InWeapon);// 0x5117e3fee041
	bool HasTiltingIronSight(SGInventory* InWeapon);// 0x5116e3fee041
	bool HasSimpleSkeletalMesh(SGInventory* InWeapon);// 0x5115e3fee041
	bool HasSimpleMergedWeaponMesh(SGInventory* InWeapon);// 0x5114e3fee041
	bool HasNonzeroViewKick(SGInventory* Weapon);// 0x5113e3fee041
	bool HasMagazine(SGInventory* InWeapon);// 0x5112e3fee041
	bool HasCacheImage(FString InSignCode);// 0x5111e3fee041
	bool HasAmmoToChangeClip(Character* InCharacter, enum WeaponType);// 0x5110e3fee041
	Vector GetZoomOffset_Location_3P(SGInventory* Inventory);// 0x510fe3fee041
	Rotator GetZoomingCameraRotation(SGInventory* Weapon);// 0x510ee3fee041
	Vector GetZoomingCameraLocation(SGInventory* Weapon);// 0x510de3fee041
	void GetZoomFiringAnimWeight(SGInventory* InWeapon, out float InTranslationWeight, out float InRotationWeight);// 0x510ce3fee041
	Vector GetZeroPointAtDistance(SGWeapon* InWeapon, float Distance);// 0x510be3fee041
	void GetWeaponZoomTime(SGInventory* InWeapon, out float InZoomTime, out float inUnZoomTime);// 0x510ae3fee041
	CurveVector* GetWeaponZoomOutRotationCurve(SGInventory* InWeapon);// 0x5109e3fee041
	CurveVector* GetWeaponZoomOutOffsetCurve(SGInventory* InWeapon);// 0x5108e3fee041
	void GetWeaponZoomLagPivotOffset(SGInventory* InWeapon, out Vector OutOffset);// 0x5107e3fee041
	CurveVector* GetWeaponZoomInRotationCurve(SGInventory* InWeapon);// 0x5106e3fee041
	CurveVector* GetWeaponZoomInOffsetCurve(SGInventory* InWeapon);// 0x5105e3fee041
	void GetWeaponZoomAnimPlayRate(SGInventory* InWeapon, out float InZoomRate, out float InUnZoomRate);// 0x5104e3fee041
	Vector GetWeaponWithStockHoldingOffset(SGInventory* InWeapon);// 0x5103e3fee041
	FString GetWeaponUniqueIDByItemArr(uint64[] InItemIDArr);// 0x5102e3fee041
	FString GetWeaponUniqueID(SGPlayerItemInfoBase* ItemInfo);// 0x5101e3fee041
	float GetWeaponUnequipTime(SGInventory* InWeapon, bool bUseTimePercent);// 0x5100e3fee041
	void GetWeaponUnequipMontage(SGInventory* InWeapon, out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x50ffe3fee041
	enum GetWeaponType(SGInventory* Inventory);// 0x50fee3fee041
	void GetWeaponTriggerOffset(SGWeapon* InWeapon, out Vector OutOffset);// 0x50fde3fee041
	CurveFloat* GetWeaponSwitchScopeCurve(SGInventory* InWeapon);// 0x50fce3fee041
	BlendSpace1D* GetWeaponSwayBlendSpace_ADS(SGInventory* Weapon);// 0x50fbe3fee041
	BlendSpace1D* GetWeaponSwayBlendSpace(SGInventory* Weapon);// 0x50fae3fee041
	enum GetWeaponStance(SGInventory* Inventory);// 0x50f9e3fee041
	Rotator GetWeaponSightRecoilAnimRotOffset(SGInventory* InWeapon, bool bADSConfig);// 0x50f8e3fee041
	void GetWeaponSightPivotOffset(SGInventory* InWeapon, out Vector OutOffset, bool ADS);// 0x50f7e3fee041
	float GetWeaponReloadTime(SGInventory* Weapon);// 0x50f6e3fee041
	Rotator GetWeaponRecoilAnimRotOffset(SGInventory* InWeapon, bool bADSConfig);// 0x50f5e3fee041
	Vector GetWeaponRecoilAnimLocOffset(SGInventory* InWeapon, bool bADSConfig);// 0x50f4e3fee041
	void GetWeaponPivotOffset(SGInventory* InWeapon, out Vector OutOffset, bool ADS);// 0x50f3e3fee041
	BulletDisplayInfoOB GetWeaponNextBulletDisplayInfo(SGInventory* CurrentWeapon);// 0x50f2e3fee041
	class Actor GetWeaponNextBulletAmmoClassAnyway(SGInventory* CurrentWeapon);// 0x50f1e3fee041
	class Actor GetWeaponNextBulletAmmoClass(SGInventory* CurrentWeapon);// 0x50f0e3fee041
	SGInventory* GetWeaponNextBullet(SGInventory* CurrentWeapon);// 0x50efe3fee041
	int GetWeaponMaxBoreNum(SGInventory* InWeapon);// 0x50eee3fee041
	Vector GetWeaponIconSize(SGInventory* CurrentWeapon);// 0x50ede3fee041
	SGWeapon* GetWeaponFromDamageCauser(Actor* DamageCauser);// 0x50ece3fee041
	Vector GetWeaponForeGripOffset(SGWeapon* InWeapon);// 0x50ebe3fee041
	bool GetWeaponFoldStockState(SGInventory* InWeapon);// 0x50eae3fee041
	float GetWeaponEquipTime(SGInventory* InWeapon, bool bUseTimePercent);// 0x50e9e3fee041
	void GetWeaponEquipMontage(SGInventory* InWeapon, out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x50e8e3fee041
	float GetWeaponEffectiveShootDistance(SGInventory* InWeapon, class Actor AmmoClass);// 0x50e7e3fee041
	Vector GetWeaponDirection(SGInventory* CurrentWeapon);// 0x50e6e3fee041
	BulletContainerInfo[] GetWeaponContainerBulletInfo(SGInventory* WeaponContainerInv);// 0x50e5e3fee041
	SGInventory* GetWeaponCanBeFoldedStockInventory(SGInventory* Weapon);// 0x50e4e3fee041
	class Object GetWeaponBulletClass(SGInventory* CurrentWeapon);// 0x50e3e3fee041
	bool GetWeaponBoreInfoForUI(SGInventory* InWeapon, Character* InCharacter, out int[] OutBoreInfo, out int[] OutIsTeammateItemInfo);// 0x50e2e3fee041
	int GetWeaponAmmoPenetrationLevel(SGInventory* CurrentWeapon);// 0x50e1e3fee041
	SGInventory*[] GetWeaponAllAdapters(SGInventory* InWeapon, bool bIncludingWeaponSelf);// 0x50e0e3fee041
	bool GetWeaponAdapterInfo(Object* WorldContextObject, SGInventory* Adapter, out SGWeaponAdapterInfo AdapterInfo);// 0x50dfe3fee041
	void GetViewWeaponMontage(SGInventory* CurrentWeapon, out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x50dee3fee041
	float GetVerticalRecoil(SGInventory* InWeapon);// 0x50dde3fee041
	SGInventory* GetUpperReceiver(SGWeapon* InWeapon);// 0x50dce3fee041
	void GetSimpleSkeletalMeshInfo(SGInventory* InWeapon, out SkeletalMesh* OutSkeletalMeshTemplate, out class Object OutSkeletalMeshAnimClass);// 0x50dbe3fee041
	SkeletalMesh* GetSimpleMeshTemplate(SGInventory* InWeapon);// 0x50dae3fee041
	MeshComponent* GetSimpleMeshComponent(SGInventory* InWeapon);// 0x50d9e3fee041
	class AnimInstance GetSimpleMeshAnimInstance(SGInventory* InWeapon);// 0x50d8e3fee041
	enum GetShootingMode(SGInventory* Inventory);// 0x50d7e3fee041
	Object* GetSavedWeaponIconWithDir(FString InSignCode, Image* InImage, FString InDir);// 0x50d6e3fee041
	Object* GetSavedWeaponIcon(FString InSignCode, Image* InImage);// 0x50d5e3fee041
	Transform GetRightHandWeaponOffsetWhenSprint(SGInventory* InWeapon);// 0x50d4e3fee041
	Vector GetRightHandOffset(SGInventory* InWeapon);// 0x50d3e3fee041
	Vector GetRightArmAimOffset(SGInventory* InWeapon);// 0x50d2e3fee041
	void GetRecoilTimeParams(SGInventory* Weapon, out float OutFirePassedTime, out float OutRecoilTime, out float OutBeginRecoverTime, out float OutRecoverTime);// 0x50d1e3fee041
	BlendSpace1D* GetRearGripBlendSpace(SGInventory* Weapon);// 0x50d0e3fee041
	FString GetPendingBackAttachingSocket(SGWeapon* Weapon);// 0x50cfe3fee041
	enum GetNextShootingMode(SGInventory* Inventory);// 0x50cee3fee041
	SGInventory* GetNextBulletInMag(SGInventory* CurrentWeapon);// 0x50cde3fee041
	SGInventory* GetNextBulletInBore(SGInventory* CurrentWeapon);// 0x50cce3fee041
	void GetMuzzleFlashSocketTransform(SGInventory* InWeapon, out Vector OutLocaiton, out Rotator OutRotation);// 0x50cbe3fee041
	MeshComponent* GetMuzzleFlashSocketMesh(SGInventory* InWeapon, out FName OutSocketName);// 0x50cae3fee041
	Vector GetMuzzleFlashSocketLocation(SGInventory* InWeapon);// 0x50c9e3fee041
	Vector2D GetMoa(SGInventory* InWeapon);// 0x50c8e3fee041
	enum GetMeshDisplayPolicy(SGInventory* InWeapon);// 0x50c7e3fee041
	float GetMeleeWeaponBleedChance(SGWeapon* Weapon);// 0x50c6e3fee041
	Rotator GetMeleeRecoilRot(SGInventory* InWeapon);// 0x50c5e3fee041
	void GetMeleeFireProneMontage(SGInventory* InWeapon, out SGMontagePlayParams OutCharacterMontageParams);// 0x50c4e3fee041
	void GetMeleeFireMontageArray(SGInventory* InWeapon, out SGMontagePlayParams[] OutCharacterMontageParams);// 0x50c3e3fee041
	void GetMeleeFireMontage(SGInventory* InWeapon, out SGMontagePlayParams OutCharacterMontageParams);// 0x50c2e3fee041
	Object* GetMatOfLocalImg(SGWeaponAssembleEnvironment* Env, FString UniqueID);// 0x50c1e3fee041
	int GetMagazineMaxCapacity(SGInventory* Weapon);// 0x50c0e3fee041
	enum GetMagazineInspectState(SGInventory* InMagazine, Character* TargetCharacter);// 0x50bfe3fee041
	int GetMagazineCurrentCapacity(SGInventory* Weapon);// 0x50bee3fee041
	int GetMagazineCountInVestBag(Character* InChar);// 0x50bde3fee041
	float GetMagazineCheckTime(SGInventory* CurrentWeapon);// 0x50bce3fee041
	void GetMagazineCheckMontage(SGInventory* CurrentWeapon, out SGMontagePlayParams OutCharacterMontageParams, out SGMontagePlayParams OutWeaponMontageParams);// 0x50bbe3fee041
	int GetMagazineAccurateAmmo(SGInventory* InMag);// 0x50bae3fee041
	SGInventory* GetMagazine(SGInventory* CurrentWeapon);// 0x50b9e3fee041
	BlendSpace1D* GetLFingerAdptiveBlendSpace(SGInventory* Weapon);// 0x50b8e3fee041
	float GetLFingerAdptiveAlpha(SGInventory* Weapon);// 0x50b7e3fee041
	Vector GetLeftArmOffset(SGInventory* InWeapon);// 0x50b6e3fee041
	HitResult GetLastHitResult(SGInventory* Weapon);// 0x50b5e3fee041
	SGInventory* GetLaserSightAttachedToHandguard(SGInventory* InWeapon);// 0x50b4e3fee041
	class AnimInstance GetInventoryMeshAnimInstance(SGInventory* InWeapon);// 0x50b3e3fee041
	float GetHorizonRecoilAttribute(SGInventory* InWeapon);// 0x50b2e3fee041
	float GetHorizonRecoil(SGInventory* InWeapon);// 0x50b1e3fee041
	Vector GetHandWeaponOffset(SGInventory* InWeapon);// 0x50b0e3fee041
	SGInventory* GetHandguard(SGWeapon* InWeapon);// 0x50afe3fee041
	BlendSpace1D* GetGripBlendSpace(SGInventory* Weapon);// 0x50aee3fee041
	SGWeaponFireMode_ProjectileHit* GetGrenadeSetting(SGInventory* CurrentWeapon);// 0x50ade3fee041
	float GetGrenadePlayEffectTime(SGInventory* CurrentWeapon);// 0x50ace3fee041
	float GetGrenadeInitSpeed(SGInventory* CurrentWeapon);// 0x50abe3fee041
	SGInventory* GetGasBlock(SGWeapon* InWeapon);// 0x50aae3fee041
	SGInventory* GetForegrip(SGWeapon* InWeapon);// 0x50a9e3fee041
	float GetFireInterval(SGInventory* InWeapon);// 0x50a8e3fee041
	int GetExtraScopeMagnificationNum(SGInventory* InWeapon);// 0x50a7e3fee041
	int GetExtraAdsCameraNumTotal(SGInventory* InWeapon);// 0x50a6e3fee041
	int GetExtraAdsCameraNum(SGInventory* InWeapon);// 0x50a5e3fee041
	float GetErgonomicsValue(SGInventory* InWeapon);// 0x50a4e3fee041
	float GetCurrentWeaponZoomFOV(SGInventory* InWeapon);// 0x50a3e3fee041
	float GetCurrentSightFov(SGInventory* InWeapon, bool bForceFresh);// 0x50a2e3fee041
	SGInventory* GetCurrentSight(SGWeapon* Weapon);// 0x50a1e3fee041
	enum GetCurrentFireMode(SGInventory* InWeapon);// 0x50a0e3fee041
	BlendSpace1D* GetCasualRearGripBlendSpace(SGInventory* Weapon);// 0x509fe3fee041
	BlendSpace1D* GetCasualGripBlendSpace(SGInventory* Weapon);// 0x509ee3fee041
	BlendSpace1D* GetCasualGripAdjustmentBlendSpace(SGInventory* Weapon);// 0x509de3fee041
	Vector GetCameraForwardVec(SGWeapon* InWeapon);// 0x509ce3fee041
	int GetBurstShotCount(SGInventory* InWeapon);// 0x509be3fee041
	float GetBulletZeroDropDistanceForTlog(SGInventory* InWeapon);// 0x509ae3fee041
	float GetBulletZeroDropDistance(SGInventory* InWeapon);// 0x5099e3fee041
	float GetBulletVelocity(SGProjectile_GravityBullet* Bullet);// 0x5098e3fee041
	int GetBulletNumOfMultiBoreWeapon(SGInventory* InWeapon);// 0x5097e3fee041
	FString GetBulletNameFromCommonDataTable(SGInventory* InWeapon);// 0x5096e3fee041
	float GetBulletFlySpeed(SGInventory* InWeapon);// 0x5095e3fee041
	FString GetBackAttachingSocket(SGWeapon* Weapon);// 0x5094e3fee041
	SGInventory*[] GetAvailableMagazineList(SGInventory* Weapon);// 0x5093e3fee041
	enum GetAttachedReargripTypeCache(SGInventory* Weapon);// 0x5092e3fee041
	enum GetAttachedReargripType(SGInventory* Weapon);// 0x5091e3fee041
	SGInventory* GetAttachedReargrip(SGInventory* Weapon);// 0x5090e3fee041
	SGInventory* GetAttachedMagazineInventory(SGInventory* Weapon);// 0x508fe3fee041
	Transform GetAttachedGripComponentTransform(SGInventory* InWeapon);// 0x508ee3fee041
	int GetAttachedGripAnimFactor(SGInventory* Weapon);// 0x508de3fee041
	enum GetAttachedForegripTypeCache(SGInventory* Weapon);// 0x508ce3fee041
	enum GetAttachedForegripType(SGInventory* Weapon);// 0x508be3fee041
	SGInventory* GetAttachedForegrip(SGInventory* Weapon);// 0x508ae3fee041
	SGInventory*[] GetAttachedAdapterList(SGInventory* Inventory);// 0x5089e3fee041
	SGInventory*[] GetAttachedAdapterInventoryList(SGInventory* TargetWeapon);// 0x5088e3fee041
	SGInventory* GetAttachedAdapter(SGInventory* Inventory, enum AdapterSocketType);// 0x5087e3fee041
	SGInventory* GetAmmoInventory(SGInventory* InWeapon);// 0x5086e3fee041
	int GetAmmoCountInMag(SGInventory* Inventory);// 0x5085e3fee041
	int GetAmmoCountInBore(SGInventory* Inventory);// 0x5084e3fee041
	int GetAmmoCount(SGInventory* Inventory);// 0x5083e3fee041
	SGInventory*[] GetAllSupportMagazineList(SGInventory* Weapon, bool bSort);// 0x5082e3fee041
	SGInventory*[] GetAllEquippedWeapon(SGCharacter* SGCharacter);// 0x5081e3fee041
	Vector GetAimDirection(SGWeapon* InWeapon);// 0x5080e3fee041
	float GetADSZoomPersistTime(SGInventory* InWeapon);// 0x507fe3fee041
	float GetADSGunKickWeight(SGInventory* InWeapon);// 0x507ee3fee041
	enum GetAdapterSocket(Actor* Adapter, SGInventory* ToWeapon);// 0x507de3fee041
	float GetAccuracy(SGInventory* InWeapon);// 0x507ce3fee041
	BlendSpace1D* Get3PProneGripBlendSpace(SGInventory* Weapon);// 0x507be3fee041
	bool FocusOnItem(SGWeaponRenderView* Env, FName SocketName, AdapterInfo[] SocketPath, bool bFocus);// 0x507ae3fee041
	FString FindAttributeStringInfo(SGInventory* SGInventory, FString AttrTag);// 0x5079e3fee041
	float FindAttributeInfoInOri(SGInventory* SGInventory, FString AttrTag);// 0x5078e3fee041
	float FindAttributeInfoInFinal(SGInventory* SGInventory, FString AttrTag);// 0x5077e3fee041
	void FillBores(SGInventory* InWeapon, SGInventory* Bullet, SGCharacter* CharOperator);// 0x5076e3fee041
	enum ConvertGameplayTagToAdapterType(GameplayTag InTag);// 0x5075e3fee041
	GameplayTag ConvertAdapterTypeToGameplayTag(enum InAdapterType);// 0x5074e3fee041
	bool ConditionalShowSimpleWeapon(SGInventory* InWeapon, bool bShow);// 0x5073e3fee041
	bool CheckWeaponParentIsContainerAndIsDropping(SGInventory* InWeapon);// 0x5072e3fee041
	bool CheckWeaponHasMultiBore(SGInventory* InWeapon);// 0x5071e3fee041
	bool CheckStockCanBeFolded(SGInventory* Adapter);// 0x5070e3fee041
	void CheckNeedOriginRebase(SGInventory* InWeapon);// 0x506fe3fee041
	bool CaptureRT(SGInventory* InWeapon, SGWeaponAssembleEnvironment* Env, Object* TargetImg, bool SaveRT, Rotator TargetRot, float CameraPosX);// 0x506ee3fee041
	bool CanUnFoldStock(SGInventory* InWeapon);// 0x506de3fee041
	bool CanFoldStock(SGInventory* InWeapon);// 0x506ce3fee041
	bool CanDragWeaponToCharacter(SGInventory* Weapon);// 0x506be3fee041
	bool CanCheckWeapon(SGInventory* InWeapon);// 0x506ae3fee041
	bool CanCheckMagazine(SGInventory* InWeapon);// 0x5069e3fee041
	bool CanChangeClip(SGInventory* InWeapon);// 0x5068e3fee041
	void CancelCaptureRTToRenderImg(SGWeaponAssembleEnvironment* Env, Image* TargetImg);// 0x5067e3fee041
	bool CanCaptureWeaponRT(SGInventory* InWeapon);// 0x5066e3fee041
	int CalculateRadiusDamage(float Distance, float MinDamage, float MaxDamage, float DamageRange);// 0x5065e3fee041
	class Actor AIPopLastCostAmmo(SGInventory* Weapon);// 0x5064e3fee041

--------------------------------
Class: BulletDisplayInfoOB
	FString SimpleDisplayName;//[Offset: 0x0, Size: 0x10]
	int PenetrateLevel;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SGWeaponTacticalInvStateComponent.SGInventorySwitchComponent.ActorComponent.Object
	float ZeroingDistance;//[Offset: 0x100, Size: 0x4]

--------------------------------
Class: SGWeaponTimerComponent.ActorComponent.Object
	TimerHandle WeaponTimerHandler;//[Offset: 0xc0, Size: 0x8]
	float TimerInterval;//[Offset: 0xc8, Size: 0x4]
	void TimerProcessFunction();// 0x5186e3fee041
	void PrivateProcessFunctionWrapper();// 0x5185e3fee041
	void OnWeaponChanged(SGInventory* Weapon);// 0x5184e3fee041
	void OnStartSpectating(SGCharacter* BeSpectatedPawn);// 0x5183e3fee041
	void OnInventoryOwnerChanged(Actor* OldOwner, Actor* NewOwner);// 0x5182e3fee041

--------------------------------
Class: SGWeaponTypeComponent.ActorComponent.Object
	enum WeaponType;//[Offset: 0xc0, Size: 0x1]
	enum SpecialWeaponSubType;//[Offset: 0xc1, Size: 0x1]
	enum GunWeaponSubType;//[Offset: 0xc2, Size: 0x1]
	bool bUsedAsLeftHandWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1]
	enum GetGunWeaponSubType();// 0x5187e3fee041

--------------------------------
Class: SGWeaponValidationComponent.ActorComponent.Object
	float FireIntervalCheckMaxTolerance;//[Offset: 0xc0, Size: 0x4]
	int FireIntervalCheckFailPunishShots;//[Offset: 0xc4, Size: 0x4]
	float FireIntervalCheckFailPunishDuration;//[Offset: 0xc8, Size: 0x4]
	int AmmoCountCheckFailPunishShots;//[Offset: 0xcc, Size: 0x4]
	float MaxPlayerOwnerDistanceToleranceSq;//[Offset: 0xd0, Size: 0x4]
	float MaxDriverDistanceToleranceSq;//[Offset: 0xd4, Size: 0x4]
	float MaxTargetDistanceToleranceSq;//[Offset: 0xd8, Size: 0x4]
	float MaxHitPointDistanceToleranceSq;//[Offset: 0xdc, Size: 0x4]
	float ClientRotationCosTolerance;//[Offset: 0xe0, Size: 0x4]
	float ServerRotationCosTolerance;//[Offset: 0xe4, Size: 0x4]
	class Actor[] NoBlockActorType;//[Offset: 0xe8, Size: 0x10]
	bool bUseLagCompensation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	Actor* CurHitTarget;//[Offset: 0x108, Size: 0x8]
	void ClientValidateFail(FString FailStr);// 0x5189e3fee041
	void ClientDrawTraceLineWhenValidateFail(Vector StartFireLoc, HitResult HitResult);// 0x5188e3fee041

--------------------------------
Class: SGWeaponX5EffectComponent.ActorComponent.Object
	ParticleSystem* TwinkleEmitterTemplate;//[Offset: 0xc8, Size: 0x28]
	ParticleSystemComponent* PSC;//[Offset: 0xf0, Size: 0x8]
	void StartTwinkle();// 0x518ce3fee041
	void OnFireEvent(enum Event);// 0x518be3fee041
	void OnEmitterLoaded();// 0x518ae3fee041

--------------------------------
Class: SGWheeledVehicle.Actor.Object

--------------------------------
Class: SGWheeledVehicleMovementComponent.Object

--------------------------------
Class: SGWorldAvatarSubsystem.SGBaseWorldSubsystem.WorldSubsystem.Subsystem.Object
	Character*[] PendingCharacterList;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SGWorldCharacterSubsystem.SGBaseWorldSubsystem.WorldSubsystem.Subsystem.Object
	Character*[] CharacterList;//[Offset: 0x38, Size: 0x10]
	PlayerController* LocalPC;//[Offset: 0x48, Size: 0x8]
	float CharacterSwitchLOD1ScreenSize;//[Offset: 0x64, Size: 0x4]
	float CharacterSwitchLOD2ScreenSize;//[Offset: 0x68, Size: 0x4]
	float CharacterSwitchLOD3ScreenSize;//[Offset: 0x6c, Size: 0x4]
	float CharacterSwitchLOD4ScreenSize;//[Offset: 0x70, Size: 0x4]
	float WeaponSwitchLOD1ScreenSize;//[Offset: 0x74, Size: 0x4]
	float WeaponSwitchLOD2ScreenSize;//[Offset: 0x78, Size: 0x4]
	float WeaponSwitchLOD3ScreenSize;//[Offset: 0x7c, Size: 0x4]
	float WeaponSwitchLOD4ScreenSize;//[Offset: 0x80, Size: 0x4]
	float OptTransformDistFromFirstPlayerSquare;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: SGWorldCollisionManagerSubsystem.WorldCollisionManagerSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: SGWorldInventorySubsystem.SGBaseWorldSubsystem.WorldSubsystem.Subsystem.Object
	InventoryLoadQueueInfoStruct[] InventoryAsyncloadQueue;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InventoryLoadQueueInfoStruct
	SGInventory* Inventory;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SGWorldSettings.WorldSettings.Info.Actor.Object
	TimedImpactEffect[] TimedEffects;//[Offset: 0x488, Size: 0x10]

--------------------------------
Class: TimedImpactEffect
	SceneComponent* EffectComp;//[Offset: 0x0, Size: 0x8]
	float CreationTime;//[Offset: 0x8, Size: 0x4]
	float LifetimeScaling;//[Offset: 0xc, Size: 0x4]
	float FadeMultiplier;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SGWorldSettingsComponentInterface.Interface.Object

--------------------------------
Class: SGWorldSettingsGameInfoComponent.ActorComponent.Object

--------------------------------
Class: SGWorldSettingsMapInfoComponent.ActorComponent.Object
	int64[] CoreRawData;//[Offset: 0xc0, Size: 0x10]
	int CoreWidth;//[Offset: 0xd0, Size: 0x4]
	int CoreHeight;//[Offset: 0xd4, Size: 0x4]
	bool CheckPointInCoreArea(Vector2D MapPosition);// 0x518ee3fee041

--------------------------------
Class: SGWorldSettingsRespawnInfoComponent.ActorComponent.Object
	float RespawnInterval;//[Offset: 0xc0, Size: 0x4]
	int TotalLifes;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: SGWorldSettingsRoundGameInfoComponent.ActorComponent.Object
	int TotalRounds;//[Offset: 0xc0, Size: 0x4]
	float PreRoundWaitingTime;//[Offset: 0xc4, Size: 0x4]
	float PreparingTime;//[Offset: 0xc8, Size: 0x4]
	float InProgressTime;//[Offset: 0xcc, Size: 0x4]
	float EndRoundTime;//[Offset: 0xd0, Size: 0x4]
	float PostRoundWaitingTime;//[Offset: 0xd4, Size: 0x4]

--------------------------------
Class: SGWorldSettingsTeamInfoComponent.ActorComponent.Object
	int TeamCount;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: SGWorldSettingsTicketInfoComponent.ActorComponent.Object
	int DesiredTickets;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: SGWorldStatics.BlueprintFunctionLibrary.Object
	void UpdateActorCullDistanceForReplicationDriver(World* World, Actor* Actor, float CullDistanceSquared);// 0x519be3fee041
	bool GetWorldSettingVaild(Object* WorldContextObject);// 0x519ae3fee041
	Vector GetWorldNorthAngleOffset(Object* WorldContextObject);// 0x5199e3fee041
	Vector GetWorldExtent(Object* WorldContextObject);// 0x5198e3fee041
	Vector GetWorldCenter(Object* WorldContextObject);// 0x5197e3fee041
	int GetMaxShortNameIndex();// 0x5196e3fee041
	int GetMaxReservedNetworkdGUID();// 0x5195e3fee041
	Vector GetMapTopLeftLocation(Object* WorldContextObject);// 0x5194e3fee041
	Texture2D* GetMapTexture(Object* WorldContextObject);// 0x5193e3fee041
	int GetMapScaleText(Object* WorldContextObject);// 0x5192e3fee041
	Texture2D* GetMap2LTexture(Object* WorldContextObject);// 0x5191e3fee041
	Texture2D* CreateCoreAreaTexture2D(Object* WorldContextObject);// 0x5190e3fee041
	bool CheckPointInMapCoreArea(Object* WorldContextObject, Vector2D MapPosition);// 0x518fe3fee041

--------------------------------
Class: SGWorldWeaponSubsystem.SGBaseWorldSubsystem.WorldSubsystem.Subsystem.Object
	SGInventory*[] PendingWeaponList;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SkeletalMeshAssetUserData.AssetUserData.Object
	int BadgeIndex;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: VehicleInterface.Interface.Object

--------------------------------
Class: MaterialExpressionSpriteTextureSampler.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bSampleAdditionalTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	int AdditionalSlotIndex;//[Offset: 0x80, Size: 0x4]
	FText SlotDisplayName;//[Offset: 0x88, Size: 0x18]

--------------------------------
Class: PaperCharacter.Character.Pawn.Actor.Object
	PaperFlipbookComponent* Sprite;//[Offset: 0x598, Size: 0x8]

--------------------------------
Class: PaperFlipbookComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperFlipbook* SourceFlipbook;//[Offset: 0x5e8, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x5f0, Size: 0x8]
	float PlayRate;//[Offset: 0x5f8, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5fc, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5fc, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5fc, Size: 0x1]
	float AccumulatedTime;//[Offset: 0x600, Size: 0x4]
	int CachedFrameIndex;//[Offset: 0x604, Size: 0x4]
	LinearColor SpriteColor;//[Offset: 0x608, Size: 0x10]
	BodySetup* CachedBodySetup;//[Offset: 0x618, Size: 0x8]
	delegate OnFinishedPlaying;//[Offset: 0x620, Size: 0x10]
	void Stop();// 0x51c1e3fee041
	void SetSpriteColor(LinearColor NewColor);// 0x51c0e3fee041
	void SetPlayRate(float NewRate);// 0x51bfe3fee041
	void SetPlaybackPositionInFrames(int NewFramePosition, bool bFireEvents);// 0x51bee3fee041
	void SetPlaybackPosition(float NewPosition, bool bFireEvents);// 0x51bde3fee041
	void SetNewTime(float NewTime);// 0x51bce3fee041
	void SetLooping(bool bNewLooping);// 0x51bbe3fee041
	bool SetFlipbook(PaperFlipbook* NewFlipbook);// 0x51bae3fee041
	void ReverseFromEnd();// 0x51b9e3fee041
	void Reverse();// 0x51b8e3fee041
	void PlayFromStart();// 0x51b7e3fee041
	void Play();// 0x51b6e3fee041
	void OnRep_SourceFlipbook(PaperFlipbook* OldFlipbook);// 0x51b5e3fee041
	bool IsReversing();// 0x51b4e3fee041
	bool IsPlaying();// 0x51b3e3fee041
	bool IsLooping();// 0x51b2e3fee041
	LinearColor GetSpriteColor();// 0x51b1e3fee041
	float GetPlayRate();// 0x51b0e3fee041
	int GetPlaybackPositionInFrames();// 0x51afe3fee041
	float GetPlaybackPosition();// 0x51aee3fee041
	int GetFlipbookLengthInFrames();// 0x51ade3fee041
	float GetFlipbookLength();// 0x51ace3fee041
	float GetFlipbookFramerate();// 0x51abe3fee041
	PaperFlipbook* GetFlipbook();// 0x51aae3fee041

--------------------------------
Class: PaperFlipbook.Object
	float FramesPerSecond;//[Offset: 0x28, Size: 0x4]
	PaperFlipbookKeyFrame[] KeyFrames;//[Offset: 0x30, Size: 0x10]
	MaterialInterface* DefaultMaterial;//[Offset: 0x40, Size: 0x8]
	byte CollisionSource;//[Offset: 0x48, Size: 0x1]
	bool IsValidKeyFrameIndex(int Index);// 0x51a9e3fee041
	float GetTotalDuration();// 0x51a8e3fee041
	PaperSprite* GetSpriteAtTime(float Time, bool bClampToEnds);// 0x51a7e3fee041
	PaperSprite* GetSpriteAtFrame(int FrameIndex);// 0x51a6e3fee041
	int GetNumKeyFrames();// 0x51a5e3fee041
	int GetNumFrames();// 0x51a4e3fee041
	int GetKeyFrameIndexAtTime(float Time, bool bClampToEnds);// 0x51a3e3fee041

--------------------------------
Class: PaperFlipbookKeyFrame
	PaperSprite* Sprite;//[Offset: 0x0, Size: 0x8]
	int FrameRun;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10]
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x8]
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 0x8]
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 0x8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 0x8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 0x8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 0x10]
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 0x1]
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8]
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 0x4]
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30]
	FName SocketName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PaperFlipbookActor.Actor.Object
	PaperFlipbookComponent* RenderComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: PaperGroupedSpriteActor.Actor.Object
	PaperGroupedSpriteComponent* RenderComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: PaperGroupedSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] InstanceMaterials;//[Offset: 0x5e8, Size: 0x10]
	SpriteInstanceData[] PerInstanceSpriteData;//[Offset: 0x5f8, Size: 0x10]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x51c9e3fee041
	bool UpdateInstanceColor(int InstanceIndex, LinearColor NewInstanceColor, bool bMarkRenderStateDirty);// 0x51c8e3fee041
	void SortInstancesAlongAxis(Vector WorldSpaceSortAxis);// 0x51c7e3fee041
	bool RemoveInstance(int InstanceIndex);// 0x51c6e3fee041
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x51c5e3fee041
	int GetInstanceCount();// 0x51c4e3fee041
	void ClearInstances();// 0x51c3e3fee041
	int AddInstance(out const Transform Transform, PaperSprite* Sprite, bool bWorldSpace, LinearColor Color);// 0x51c2e3fee041

--------------------------------
Class: SpriteInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]
	PaperSprite* SourceSprite;//[Offset: 0x40, Size: 0x8]
	Color VertexColor;//[Offset: 0x48, Size: 0x4]
	int MaterialIndex;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: PaperRuntimeSettings.Object
	bool bEnableSpriteAtlasGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bEnableTerrainSplineEditing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bResizeSpriteDataToMatchTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: PaperSpriteActor.Actor.Object
	PaperSpriteComponent* RenderComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: PaperSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperSprite* SourceSprite;//[Offset: 0x5e8, Size: 0x8]
	MaterialInterface* MaterialOverride;//[Offset: 0x5f0, Size: 0x8]
	LinearColor SpriteColor;//[Offset: 0x5f8, Size: 0x10]
	void SetSpriteColor(LinearColor NewColor);// 0x51d0e3fee041
	bool SetSprite(PaperSprite* NewSprite);// 0x51cfe3fee041
	PaperSprite* GetSprite();// 0x51cee3fee041

--------------------------------
Class: PaperSpriteAtlas.Object

--------------------------------
Class: PaperSpriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	SlateBrush MakeBrushFromSprite(PaperSprite* Sprite, int Width, int Height);// 0x51cde3fee041
	Vector2D GetTopLeftPosInPercent(PaperSprite* Sprite);// 0x51cce3fee041
	Texture2D* GetSourceTextureOfSprite(PaperSprite* Sprite);// 0x51cbe3fee041
	Vector2D GetBottomRightPosInPercent(PaperSprite* Sprite);// 0x51cae3fee041

--------------------------------
Class: PaperTerrainActor.Actor.Object
	SceneComponent* DummyRoot;//[Offset: 0x2e0, Size: 0x8]
	PaperTerrainSplineComponent* SplineComponent;//[Offset: 0x2e8, Size: 0x8]
	PaperTerrainComponent* RenderComponent;//[Offset: 0x2f0, Size: 0x8]

--------------------------------
Class: PaperTerrainSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PaperTerrainComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperTerrainMaterial* TerrainMaterial;//[Offset: 0x5b0, Size: 0x8]
	bool bClosedSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	bool bFilledSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 0x1]
	PaperTerrainSplineComponent* AssociatedSpline;//[Offset: 0x5c0, Size: 0x8]
	int RandomSeed;//[Offset: 0x5c8, Size: 0x4]
	float SegmentOverlapAmount;//[Offset: 0x5cc, Size: 0x4]
	LinearColor TerrainColor;//[Offset: 0x5d0, Size: 0x10]
	int ReparamStepsPerSegment;//[Offset: 0x5e0, Size: 0x4]
	byte SpriteCollisionDomain;//[Offset: 0x5e4, Size: 0x1]
	float CollisionThickness;//[Offset: 0x5e8, Size: 0x4]
	BodySetup* CachedBodySetup;//[Offset: 0x5f0, Size: 0x8]
	void SetTerrainColor(LinearColor NewColor);// 0x51d1e3fee041

--------------------------------
Class: PaperTerrainMaterial.DataAsset.Object
	PaperTerrainMaterialRule[] rules;//[Offset: 0x30, Size: 0x10]
	PaperSprite* InteriorFill;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: PaperTerrainMaterialRule
	PaperSprite* StartCap;//[Offset: 0x0, Size: 0x8]
	PaperSprite*[] Body;//[Offset: 0x8, Size: 0x10]
	PaperSprite* EndCap;//[Offset: 0x18, Size: 0x8]
	float MinimumAngle;//[Offset: 0x20, Size: 0x4]
	float MaximumAngle;//[Offset: 0x24, Size: 0x4]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float CollisionOffset;//[Offset: 0x2c, Size: 0x4]
	int DrawOrder;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: PaperTileLayer.Object
	FText LayerName;//[Offset: 0x28, Size: 0x18]
	int LayerWidth;//[Offset: 0x40, Size: 0x4]
	int LayerHeight;//[Offset: 0x44, Size: 0x4]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bLayerCollides;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	bool bOverrideCollisionThickness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1]
	bool bOverrideCollisionOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1]
	float CollisionThicknessOverride;//[Offset: 0x4c, Size: 0x4]
	float CollisionOffsetOverride;//[Offset: 0x50, Size: 0x4]
	LinearColor LayerColor;//[Offset: 0x54, Size: 0x10]
	int AllocatedWidth;//[Offset: 0x64, Size: 0x4]
	int AllocatedHeight;//[Offset: 0x68, Size: 0x4]
	PaperTileInfo[] AllocatedCells;//[Offset: 0x70, Size: 0x10]
	PaperTileSet* TileSet;//[Offset: 0x80, Size: 0x8]
	int[] AllocatedGrid;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: PaperTileInfo
	PaperTileSet* TileSet;//[Offset: 0x0, Size: 0x8]
	int PackedTileIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PaperTileSet.Object
	IntPoint TileSize;//[Offset: 0x28, Size: 0x8]
	Texture2D* TileSheet;//[Offset: 0x30, Size: 0x8]
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10]
	IntMargin BorderMargin;//[Offset: 0x48, Size: 0x10]
	IntPoint PerTileSpacing;//[Offset: 0x58, Size: 0x8]
	IntPoint DrawingOffset;//[Offset: 0x60, Size: 0x8]
	int WidthInTiles;//[Offset: 0x68, Size: 0x4]
	int HeightInTiles;//[Offset: 0x6c, Size: 0x4]
	int AllocatedWidth;//[Offset: 0x70, Size: 0x4]
	int AllocatedHeight;//[Offset: 0x74, Size: 0x4]
	PaperTileMetadata[] PerTileData;//[Offset: 0x78, Size: 0x10]
	PaperTileSetTerrain[] Terrains;//[Offset: 0x88, Size: 0x10]
	int TileWidth;//[Offset: 0x98, Size: 0x4]
	int TileHeight;//[Offset: 0x9c, Size: 0x4]
	int Margin;//[Offset: 0xa0, Size: 0x4]
	int Spacing;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: IntMargin
	int Left;//[Offset: 0x0, Size: 0x4]
	int Top;//[Offset: 0x4, Size: 0x4]
	int Right;//[Offset: 0x8, Size: 0x4]
	int Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PaperTileMetadata
	FName UserDataName;//[Offset: 0x0, Size: 0x8]
	SpriteGeometryCollection CollisionData;//[Offset: 0x8, Size: 0x30]
	byte TerrainMembership;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SpriteGeometryCollection
	SpriteGeometryShape[] Shapes;//[Offset: 0x0, Size: 0x10]
	byte GeometryType;//[Offset: 0x10, Size: 0x1]
	int PixelsPerSubdivisionX;//[Offset: 0x14, Size: 0x4]
	int PixelsPerSubdivisionY;//[Offset: 0x18, Size: 0x4]
	bool bAvoidVertexMerging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float AlphaThreshold;//[Offset: 0x20, Size: 0x4]
	float DetailAmount;//[Offset: 0x24, Size: 0x4]
	float SimplifyEpsilon;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: SpriteGeometryShape
	enum ShapeType;//[Offset: 0x0, Size: 0x1]
	Vector2D[] Vertices;//[Offset: 0x8, Size: 0x10]
	Vector2D BoxSize;//[Offset: 0x18, Size: 0x8]
	Vector2D BoxPosition;//[Offset: 0x20, Size: 0x8]
	float Rotation;//[Offset: 0x28, Size: 0x4]
	bool bNegativeWinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: PaperTileSetTerrain
	FString TerrainName;//[Offset: 0x0, Size: 0x10]
	int CenterTileIndex;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: PaperTileMap.Object
	int MapWidth;//[Offset: 0x28, Size: 0x4]
	int MapHeight;//[Offset: 0x2c, Size: 0x4]
	int TileWidth;//[Offset: 0x30, Size: 0x4]
	int TileHeight;//[Offset: 0x34, Size: 0x4]
	float PixelsPerUnrealUnit;//[Offset: 0x38, Size: 0x4]
	float SeparationPerTileX;//[Offset: 0x3c, Size: 0x4]
	float SeparationPerTileY;//[Offset: 0x40, Size: 0x4]
	float SeparationPerLayer;//[Offset: 0x44, Size: 0x4]
	PaperTileSet* SelectedTileSet;//[Offset: 0x48, Size: 0x28]
	MaterialInterface* Material;//[Offset: 0x70, Size: 0x8]
	PaperTileLayer*[] TileLayers;//[Offset: 0x78, Size: 0x10]
	float CollisionThickness;//[Offset: 0x88, Size: 0x4]
	byte SpriteCollisionDomain;//[Offset: 0x8c, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x8d, Size: 0x1]
	int HexSideLength;//[Offset: 0x90, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x98, Size: 0x8]
	int LayerNameIndex;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: PaperTileMapActor.Actor.Object
	PaperTileMapComponent* RenderComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: PaperTileMapComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int MapWidth;//[Offset: 0x5e4, Size: 0x4]
	int MapHeight;//[Offset: 0x5e8, Size: 0x4]
	int TileWidth;//[Offset: 0x5ec, Size: 0x4]
	int TileHeight;//[Offset: 0x5f0, Size: 0x4]
	PaperTileSet* DefaultLayerTileSet;//[Offset: 0x5f8, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x600, Size: 0x8]
	PaperTileLayer*[] TileLayers;//[Offset: 0x608, Size: 0x10]
	LinearColor TileMapColor;//[Offset: 0x618, Size: 0x10]
	int UseSingleLayerIndex;//[Offset: 0x628, Size: 0x4]
	bool bUseSingleLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 0x1]
	PaperTileMap* TileMap;//[Offset: 0x630, Size: 0x8]
	void SetTileMapColor(LinearColor NewColor);// 0x5246e3fee041
	bool SetTileMap(PaperTileMap* NewTileMap);// 0x5245e3fee041
	void SetTile(int X, int Y, int Layer, PaperTileInfo NewValue);// 0x5244e3fee041
	void SetLayerColor(LinearColor NewColor, int Layer);// 0x5243e3fee041
	void SetLayerCollision(int Layer, bool bHasCollision, bool bOverrideThickness, float CustomThickness, bool bOverrideOffset, float CustomOffset, bool bRebuildCollision);// 0x5242e3fee041
	void SetDefaultCollisionThickness(float Thickness, bool bRebuildCollision);// 0x5241e3fee041
	void ResizeMap(int NewWidthInTiles, int NewHeightInTiles);// 0x5240e3fee041
	void RebuildCollision();// 0x523fe3fee041
	bool OwnsTileMap();// 0x523ee3fee041
	void MakeTileMapEditable();// 0x523de3fee041
	void GetTilePolygon(int TileX, int TileY, out Vector[] Points, int LayerIndex, bool bWorldSpace);// 0x523ce3fee041
	LinearColor GetTileMapColor();// 0x523be3fee041
	Vector GetTileCornerPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x523ae3fee041
	Vector GetTileCenterPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x5239e3fee041
	PaperTileInfo GetTile(int X, int Y, int Layer);// 0x5238e3fee041
	void GetMapSize(out int MapWidth, out int MapHeight, out int NumLayers);// 0x5237e3fee041
	LinearColor GetLayerColor(int Layer);// 0x5236e3fee041
	void CreateNewTileMap(int MapWidth, int MapHeight, int TileWidth, int TileHeight, float PixelsPerUnrealUnit, bool bCreateLayer);// 0x5235e3fee041
	PaperTileLayer* AddNewLayer();// 0x5234e3fee041

--------------------------------
Class: TileMapBlueprintLibrary.BlueprintFunctionLibrary.Object
	PaperTileInfo MakeTile(int TileIndex, PaperTileSet* TileSet, bool bFlipH, bool bFlipV, bool bFlipD);// 0x524ae3fee041
	FName GetTileUserData(PaperTileInfo Tile);// 0x5249e3fee041
	Transform GetTileTransform(PaperTileInfo Tile);// 0x5248e3fee041
	void BreakTile(PaperTileInfo Tile, out int TileIndex, out PaperTileSet* TileSet, out bool bFlipH, out bool bFlipV, out bool bFlipD);// 0x5247e3fee041

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x148, Size: 0x1]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x148, Size: 0x1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x148, Size: 0x1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x148, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x148, Size: 0x1]
	float Mass;//[Offset: 0x14c, Size: 0x4]
	WheelSetup[] WheelSetups;//[Offset: 0x150, Size: 0x10]
	float DragCoefficient;//[Offset: 0x160, Size: 0x4]
	float ChassisWidth;//[Offset: 0x164, Size: 0x4]
	float ChassisHeight;//[Offset: 0x168, Size: 0x4]
	float DragArea;//[Offset: 0x16c, Size: 0x4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x170, Size: 0x4]
	float MaxEngineRPM;//[Offset: 0x174, Size: 0x4]
	float DebugDragMagnitude;//[Offset: 0x178, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x17c, Size: 0xc]
	float MinNormalizedTireLoad;//[Offset: 0x188, Size: 0x4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x18c, Size: 0x4]
	float MaxNormalizedTireLoad;//[Offset: 0x190, Size: 0x4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x194, Size: 0x4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x198, Size: 0x4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x19c, Size: 0x4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x1a0, Size: 0x4]
	VehicleWheel*[] Wheels;//[Offset: 0x1a8, Size: 0x10]
	float RVOAvoidanceRadius;//[Offset: 0x1d0, Size: 0x4]
	float RVOAvoidanceHeight;//[Offset: 0x1d4, Size: 0x4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1d8, Size: 0x4]
	float RVOSteeringStep;//[Offset: 0x1dc, Size: 0x4]
	float RVOThrottleStep;//[Offset: 0x1e0, Size: 0x4]
	int AvoidanceUID;//[Offset: 0x1e4, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1e8, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1ec, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1f0, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x1f4, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x1f8, Size: 0xc]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x204, Size: 0x14]
	float RawSteeringInput;//[Offset: 0x21c, Size: 0x4]
	float RawThrottleInput;//[Offset: 0x220, Size: 0x4]
	float RawBrakeInput;//[Offset: 0x224, Size: 0x4]
	float SteeringInput;//[Offset: 0x228, Size: 0x4]
	float ThrottleInput;//[Offset: 0x22c, Size: 0x4]
	float BrakeInput;//[Offset: 0x230, Size: 0x4]
	float HandbrakeInput;//[Offset: 0x234, Size: 0x4]
	float IdleBrakeInput;//[Offset: 0x238, Size: 0x4]
	float StopThreshold;//[Offset: 0x23c, Size: 0x4]
	float WrongDirectionThreshold;//[Offset: 0x240, Size: 0x4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x244, Size: 0x8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x24c, Size: 0x8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x254, Size: 0x8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x25c, Size: 0x8]
	Controller* OverrideController;//[Offset: 0x288, Size: 0x8]
	void SetUseAutoGears(bool bUseAuto);// 0x5260e3fee041
	void SetThrottleInput(float Throttle);// 0x525fe3fee041
	void SetTargetGear(int GearNum, bool bImmediate);// 0x525ee3fee041
	void SetSteeringInput(float Steering);// 0x525de3fee041
	void SetHandbrakeInput(bool bNewHandbrake);// 0x525ce3fee041
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x525be3fee041
	void SetGroupsToIgnore(int GroupFlags);// 0x525ae3fee041
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x5259e3fee041
	void SetGroupsToAvoid(int GroupFlags);// 0x5258e3fee041
	void SetGearUp(bool bNewGearUp);// 0x5257e3fee041
	void SetGearDown(bool bNewGearDown);// 0x5256e3fee041
	void SetBrakeInput(float Brake);// 0x5255e3fee041
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x5254e3fee041
	void SetAvoidanceGroup(int GroupFlags);// 0x5253e3fee041
	void SetAvoidanceEnabled(bool bEnable);// 0x5252e3fee041
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x5251e3fee041
	bool GetUseAutoGears();// 0x5250e3fee041
	int GetTargetGear();// 0x524fe3fee041
	float GetForwardSpeed();// 0x524ee3fee041
	float GetEngineRotationSpeed();// 0x524de3fee041
	float GetEngineMaxRotationSpeed();// 0x524ce3fee041
	int GetCurrentGear();// 0x524be3fee041

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 0xc]
	bool bDisableSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x28, Size: 0x8]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	Vector Offset;//[Offset: 0x34, Size: 0xc]
	float ShapeRadius;//[Offset: 0x40, Size: 0x4]
	float ShapeWidth;//[Offset: 0x44, Size: 0x4]
	float Mass;//[Offset: 0x48, Size: 0x4]
	float DampingRate;//[Offset: 0x4c, Size: 0x4]
	float SteerAngle;//[Offset: 0x50, Size: 0x4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	TireType* TireType;//[Offset: 0x58, Size: 0x8]
	TireConfig* TireConfig;//[Offset: 0x60, Size: 0x8]
	float LatStiffMaxLoad;//[Offset: 0x68, Size: 0x4]
	float LatStiffValue;//[Offset: 0x6c, Size: 0x4]
	float LongStiffValue;//[Offset: 0x70, Size: 0x4]
	float SuspensionForceOffset;//[Offset: 0x74, Size: 0x4]
	float SuspensionMaxRaise;//[Offset: 0x78, Size: 0x4]
	float SuspensionMaxDrop;//[Offset: 0x7c, Size: 0x4]
	float SuspensionNaturalFrequency;//[Offset: 0x80, Size: 0x4]
	float SuspensionDampingRatio;//[Offset: 0x84, Size: 0x4]
	byte SweepType;//[Offset: 0x88, Size: 0x1]
	float MaxBrakeTorque;//[Offset: 0x8c, Size: 0x4]
	float MaxHandBrakeTorque;//[Offset: 0x90, Size: 0x4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x98, Size: 0x8]
	int WheelIndex;//[Offset: 0xa0, Size: 0x4]
	float DebugLongSlip;//[Offset: 0xa4, Size: 0x4]
	float DebugLatSlip;//[Offset: 0xa8, Size: 0x4]
	float DebugNormalizedTireLoad;//[Offset: 0xac, Size: 0x4]
	float DebugWheelTorque;//[Offset: 0xb4, Size: 0x4]
	float DebugLongForce;//[Offset: 0xb8, Size: 0x4]
	float DebugLatForce;//[Offset: 0xbc, Size: 0x4]
	Vector Location;//[Offset: 0xc0, Size: 0xc]
	Vector OldLocation;//[Offset: 0xcc, Size: 0xc]
	Vector Velocity;//[Offset: 0xd8, Size: 0xc]
	bool IsInAir();// 0x5268e3fee041
	float GetSuspensionOffset();// 0x5267e3fee041
	float GetSteerAngle();// 0x5266e3fee041
	float GetRotationAngle();// 0x5265e3fee041

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 0x4]
	float ThrottleInput;//[Offset: 0x4, Size: 0x4]
	float BrakeInput;//[Offset: 0x8, Size: 0x4]
	float HandbrakeInput;//[Offset: 0xc, Size: 0x4]
	int CurrentGear;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 0x4]
	float FallRate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SimpleWheeledVehicleMovementComponent.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	void SetSteerAngle(float SteerAngle, int WheelIndex);// 0x5263e3fee041
	void SetDriveTorque(float DriveTorque, int WheelIndex);// 0x5262e3fee041
	void SetBrakeTorque(float BrakeTorque, int WheelIndex);// 0x5261e3fee041

--------------------------------
Class: VehicleAnimInstance.AnimInstance.Object
	WheeledVehicleMovementComponent* WheeledVehicleMovementComponent;//[Offset: 0xa40, Size: 0x8]
	WheeledVehicle* GetVehicle();// 0x5264e3fee041

--------------------------------
Class: WheeledVehicle.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x350, Size: 0x8]
	WheeledVehicleMovementComponent* VehicleMovement;//[Offset: 0x358, Size: 0x8]

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x290, Size: 0xa0]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x330, Size: 0x1c]
	float AckermannAccuracy;//[Offset: 0x34c, Size: 0x4]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x350, Size: 0x30]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x380, Size: 0x88]

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 0x88]
	float MaxRPM;//[Offset: 0x88, Size: 0x4]
	float MOI;//[Offset: 0x8c, Size: 0x4]
	float DampingRateFullThrottle;//[Offset: 0x90, Size: 0x4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x94, Size: 0x4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 0x1]
	float FrontRearSplit;//[Offset: 0x4, Size: 0x4]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 0x4]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 0x4]
	float CentreBias;//[Offset: 0x10, Size: 0x4]
	float FrontBias;//[Offset: 0x14, Size: 0x4]
	float RearBias;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float GearSwitchTime;//[Offset: 0x4, Size: 0x4]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 0x4]
	float FinalRatio;//[Offset: 0xc, Size: 0x4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 0x10]
	float ReverseGearRatio;//[Offset: 0x20, Size: 0x4]
	float NeutralGearUpRatio;//[Offset: 0x24, Size: 0x4]
	float ClutchStrength;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 0x4]
	float DownRatio;//[Offset: 0x4, Size: 0x4]
	float UpRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MFEnvSceneInfoCharacterComponent.MFEnvBaseComponent.ActorComponent.Object
	float WindSpeedDown;//[Offset: 0xc4, Size: 0x4]
	float WindSpeedHorizontal;//[Offset: 0xc8, Size: 0x4]
	float WindRotation;//[Offset: 0xcc, Size: 0x4]
	Vector2D WindDirection;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: MFEnvStatics.BlueprintFunctionLibrary.Object
	bool UpdateWindGlobalParams(World* InWorld, float InNormalizedWindLevel, Vector2D InWindDirection);// 0x5271e3fee041
	MFEnvSystem* GetFirstEnvSystem(World* InWorld);// 0x5270e3fee041
	void ClearRenderTarget(TextureRenderTarget2D* InRT);// 0x526fe3fee041
	bool CharacterIsProne(Character* Character);// 0x526ee3fee041
	MFEnvSystem* BPGetFirstEnvSystem(const Object* WorldContextObject);// 0x526de3fee041

--------------------------------
Class: MFMudDeformationActor.StaticMeshActor.Actor.Object
	int HeightMaskTexelSize;//[Offset: 0x2f0, Size: 0x4]
	int ScanStepNum;//[Offset: 0x2f4, Size: 0x4]
	Vector LastPos;//[Offset: 0x2f8, Size: 0xc]
	Texture2D* HeightMaskTex;//[Offset: 0x308, Size: 0x8]
	byte[] HeightMaskData;//[Offset: 0x310, Size: 0x10]
	int TexLatentCreateFrameIndexMax;//[Offset: 0x320, Size: 0x4]

--------------------------------
Class: AbilitySystemBlueprintLibrary.BlueprintFunctionLibrary.Object
	bool TargetDataHasOrigin(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x52c2e3fee041
	bool TargetDataHasHitResult(out const GameplayAbilityTargetDataHandle HitResult, int Index);// 0x52c1e3fee041
	bool TargetDataHasEndPoint(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x52c0e3fee041
	bool TargetDataHasActor(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x52bfe3fee041
	GameplayEffectSpecHandle SetStackCountToMax(GameplayEffectSpecHandle SpecHandle);// 0x52bee3fee041
	GameplayEffectSpecHandle SetStackCount(GameplayEffectSpecHandle SpecHandle, int StackCount);// 0x52bde3fee041
	GameplayEffectSpecHandle SetDuration(GameplayEffectSpecHandle SpecHandle, float Duration);// 0x52bce3fee041
	void SendGameplayEventToActor(Actor* Actor, GameplayTag EventTag, GameplayEventData Payload);// 0x52bbe3fee041
	bool NotEqual_GameplayAttributeGameplayAttribute(GameplayAttribute AttributeA, GameplayAttribute AttributeB);// 0x52bae3fee041
	GameplayEffectSpecHandle MakeSpecHandle(GameplayEffect* InGameplayEffect, Actor* InInstigator, Actor* InEffectCauser, float InLevel);// 0x52b9e3fee041
	GameplayCueParameters MakeGameplayCueParameters(float NormalizedMagnitude, float RawMagnitude, GameplayEffectContextHandle EffectContext, GameplayTag MatchedTagName, GameplayTag OriginalTag, GameplayTagContainer AggregatedSourceTags, GameplayTagContainer AggregatedTargetTags, Vector Location, Vector Normal, Actor* Instigator, Actor* EffectCauser, Object* SourceObject, PhysicalMaterial* PhysicalMaterial, int GameplayEffectLevel, int AbilityLevel, SceneComponent* TargetAttachComponent);// 0x52b8e3fee041
	GameplayTargetDataFilterHandle MakeFilterHandle(GameplayTargetDataFilter Filter, Actor* FilterActor);// 0x52b7e3fee041
	bool IsValid(GameplayAttribute Attribute);// 0x52b6e3fee041
	bool IsInstigatorLocallyControlledPlayer(GameplayCueParameters Parameters);// 0x52b5e3fee041
	bool IsInstigatorLocallyControlled(GameplayCueParameters Parameters);// 0x52b4e3fee041
	bool HasHitResult(GameplayCueParameters Parameters);// 0x52b3e3fee041
	Transform GetTargetDataOrigin(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x52b2e3fee041
	Transform GetTargetDataEndPointTransform(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x52b1e3fee041
	Vector GetTargetDataEndPoint(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x52b0e3fee041
	Vector GetOrigin(GameplayCueParameters Parameters);// 0x52afe3fee041
	float GetModifiedAttributeMagnitude(GameplayEffectSpecHandle SpecHandle, GameplayAttribute Attribute);// 0x52aee3fee041
	Transform GetInstigatorTransform(GameplayCueParameters Parameters);// 0x52ade3fee041
	Actor* GetInstigatorActor(GameplayCueParameters Parameters);// 0x52ace3fee041
	HitResult GetHitResultFromTargetData(out const GameplayAbilityTargetDataHandle HitResult, int Index);// 0x52abe3fee041
	HitResult GetHitResult(GameplayCueParameters Parameters);// 0x52aae3fee041
	bool GetGameplayCueEndLocationAndNormal(Actor* TargetActor, GameplayCueParameters Parameters, out Vector Location, out Vector Normal);// 0x52a9e3fee041
	bool GetGameplayCueDirection(Actor* TargetActor, GameplayCueParameters Parameters, out Vector Direction);// 0x52a8e3fee041
	float GetFloatAttributeFromAbilitySystemComponent(const AbilitySystemComponent* AbilitySystem, GameplayAttribute Attribute, out bool bSuccessfullyFoundAttribute);// 0x52a7e3fee041
	float GetFloatAttributeBaseFromAbilitySystemComponent(const AbilitySystemComponent* AbilitySystemComponent, GameplayAttribute Attribute, out bool bSuccessfullyFoundAttribute);// 0x52a6e3fee041
	float GetFloatAttributeBase(const Actor* Actor, GameplayAttribute Attribute, out bool bSuccessfullyFoundAttribute);// 0x52a5e3fee041
	float GetFloatAttribute(const Actor* Actor, GameplayAttribute Attribute, out bool bSuccessfullyFoundAttribute);// 0x52a4e3fee041
	GameplayEffectContextHandle GetEffectContext(GameplayEffectSpecHandle SpecHandle);// 0x52a3e3fee041
	int GetDataCountFromTargetData(out const GameplayAbilityTargetDataHandle TargetData);// 0x52a2e3fee041
	GameplayEffectSpecHandle[] GetAllLinkedGameplayEffectSpecHandles(GameplayEffectSpecHandle SpecHandle);// 0x52a1e3fee041
	Actor*[] GetAllActorsFromTargetData(out const GameplayAbilityTargetDataHandle TargetData);// 0x52a0e3fee041
	Actor*[] GetActorsFromTargetData(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x529fe3fee041
	int GetActorCount(GameplayCueParameters Parameters);// 0x529ee3fee041
	Actor* GetActorByIndex(GameplayCueParameters Parameters, int Index);// 0x529de3fee041
	float GetActiveGameplayEffectTotalDuration(ActiveGameplayEffectHandle ActiveHandle);// 0x529ce3fee041
	float GetActiveGameplayEffectStartTime(ActiveGameplayEffectHandle ActiveHandle);// 0x529be3fee041
	int GetActiveGameplayEffectStackLimitCount(ActiveGameplayEffectHandle ActiveHandle);// 0x529ae3fee041
	int GetActiveGameplayEffectStackCount(ActiveGameplayEffectHandle ActiveHandle);// 0x5299e3fee041
	float GetActiveGameplayEffectRemainingDuration(Object* WorldContextObject, ActiveGameplayEffectHandle ActiveHandle);// 0x5298e3fee041
	float GetActiveGameplayEffectExpectedEndTime(ActiveGameplayEffectHandle ActiveHandle);// 0x5297e3fee041
	FString GetActiveGameplayEffectDebugString(ActiveGameplayEffectHandle ActiveHandle);// 0x5296e3fee041
	AbilitySystemComponent* GetAbilitySystemComponent(Actor* Actor);// 0x5295e3fee041
	void ForwardGameplayCueToTarget(interface classNone TargetCueInterface, byte EventType, GameplayCueParameters Parameters);// 0x5294e3fee041
	GameplayAbilityTargetDataHandle FilterTargetData(out const GameplayAbilityTargetDataHandle TargetDataHandle, GameplayTargetDataFilterHandle ActorFilterClass);// 0x5293e3fee041
	float EvaluateAttributeValueWithTagsAndBase(AbilitySystemComponent* AbilitySystem, GameplayAttribute Attribute, out const GameplayTagContainer SourceTags, out const GameplayTagContainer TargetTags, float BaseValue, out bool bSuccess);// 0x5292e3fee041
	float EvaluateAttributeValueWithTags(AbilitySystemComponent* AbilitySystem, GameplayAttribute Attribute, out const GameplayTagContainer SourceTags, out const GameplayTagContainer TargetTags, out bool bSuccess);// 0x5291e3fee041
	bool EqualEqual_GameplayAttributeGameplayAttribute(GameplayAttribute AttributeA, GameplayAttribute AttributeB);// 0x5290e3fee041
	void EffectContextSetOrigin(GameplayEffectContextHandle EffectContext, Vector Origin);// 0x528fe3fee041
	bool EffectContextIsValid(GameplayEffectContextHandle EffectContext);// 0x528ee3fee041
	bool EffectContextIsInstigatorLocallyControlled(GameplayEffectContextHandle EffectContext);// 0x528de3fee041
	bool EffectContextHasHitResult(GameplayEffectContextHandle EffectContext);// 0x528ce3fee041
	Object* EffectContextGetSourceObject(GameplayEffectContextHandle EffectContext);// 0x528be3fee041
	Actor* EffectContextGetOriginalInstigatorActor(GameplayEffectContextHandle EffectContext);// 0x528ae3fee041
	Vector EffectContextGetOrigin(GameplayEffectContextHandle EffectContext);// 0x5289e3fee041
	Actor* EffectContextGetInstigatorActor(GameplayEffectContextHandle EffectContext);// 0x5288e3fee041
	HitResult EffectContextGetHitResult(GameplayEffectContextHandle EffectContext);// 0x5287e3fee041
	Actor* EffectContextGetEffectCauser(GameplayEffectContextHandle EffectContext);// 0x5286e3fee041
	void EffectContextAddHitResult(GameplayEffectContextHandle EffectContext, HitResult HitResult, bool bReset);// 0x5285e3fee041
	bool DoesTargetDataContainActor(out const GameplayAbilityTargetDataHandle TargetData, int Index, Actor* Actor);// 0x5284e3fee041
	bool DoesGameplayCueMeetTagRequirements(GameplayCueParameters Parameters, out const GameplayTagRequirements SourceTagReqs, out const GameplayTagRequirements TargetTagReqs);// 0x5283e3fee041
	GameplayEffectSpecHandle CloneSpecHandle(Actor* InNewInstigator, Actor* InEffectCauser, GameplayEffectSpecHandle GameplayEffectSpecHandle_Clone);// 0x5282e3fee041
	void BreakGameplayCueParameters(out const GameplayCueParameters Parameters, out float NormalizedMagnitude, out float RawMagnitude, out GameplayEffectContextHandle EffectContext, out GameplayTag MatchedTagName, out GameplayTag OriginalTag, out GameplayTagContainer AggregatedSourceTags, out GameplayTagContainer AggregatedTargetTags, out Vector Location, out Vector Normal, out Actor* Instigator, out Actor* EffectCauser, out Object* SourceObject, out PhysicalMaterial* PhysicalMaterial, out int GameplayEffectLevel, out int AbilityLevel, out SceneComponent* TargetAttachComponent);// 0x5281e3fee041
	GameplayEffectSpecHandle AssignTagSetByCallerMagnitude(GameplayEffectSpecHandle SpecHandle, GameplayTag DataTag, float Magnitude);// 0x5280e3fee041
	GameplayEffectSpecHandle AssignSetByCallerMagnitude(GameplayEffectSpecHandle SpecHandle, FName DataName, float Magnitude);// 0x527fe3fee041
	GameplayAbilityTargetDataHandle AppendTargetDataHandle(GameplayAbilityTargetDataHandle TargetHandle, out const GameplayAbilityTargetDataHandle HandleToAdd);// 0x527ee3fee041
	GameplayEffectSpecHandle AddLinkedGameplayEffectSpec(GameplayEffectSpecHandle SpecHandle, GameplayEffectSpecHandle LinkedGameplayEffectSpec);// 0x527de3fee041
	GameplayEffectSpecHandle AddLinkedGameplayEffect(GameplayEffectSpecHandle SpecHandle, class GameplayEffect LinkedGameplayEffect);// 0x527ce3fee041
	GameplayEffectSpecHandle AddGrantedTags(GameplayEffectSpecHandle SpecHandle, GameplayTagContainer NewGameplayTags);// 0x527be3fee041
	GameplayEffectSpecHandle AddGrantedTag(GameplayEffectSpecHandle SpecHandle, GameplayTag NewGameplayTag);// 0x527ae3fee041
	GameplayEffectSpecHandle AddAssetTags(GameplayEffectSpecHandle SpecHandle, GameplayTagContainer NewGameplayTags);// 0x5279e3fee041
	GameplayEffectSpecHandle AddAssetTag(GameplayEffectSpecHandle SpecHandle, GameplayTag NewGameplayTag);// 0x5278e3fee041
	GameplayAbilityTargetDataHandle AbilityTargetDataFromLocations(out const GameplayAbilityTargetingLocationInfo SourceLocation, out const GameplayAbilityTargetingLocationInfo TargetLocation);// 0x5277e3fee041
	GameplayAbilityTargetDataHandle AbilityTargetDataFromHitResult(out const HitResult HitResult);// 0x5276e3fee041
	GameplayAbilityTargetDataHandle AbilityTargetDataFromActorArray(out const Actor*[] ActorArray, bool OneTargetPerHandle);// 0x5275e3fee041
	GameplayAbilityTargetDataHandle AbilityTargetDataFromActor(Actor* Actor);// 0x5274e3fee041

--------------------------------
Class: GameplayTargetDataFilter
	Actor* SelfActor;//[Offset: 0x8, Size: 0x8]
	class Actor* RequiredActorClass;//[Offset: 0x10, Size: 0x8]
	byte SelfFilter;//[Offset: 0x18, Size: 0x1]
	bool bReverseFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: AbilitySystemDebugHUD.HUD.Actor.Object

--------------------------------
Class: AbilitySystemInterface.Interface.Object

--------------------------------
Class: AbilitySystemReplicationProxyInterface.Interface.Object

--------------------------------
Class: AbilitySystemTestAttributeSet.AttributeSet.Object
	float MaxHealth;//[Offset: 0x34, Size: 0x4]
	float Health;//[Offset: 0x38, Size: 0x4]
	float Mana;//[Offset: 0x3c, Size: 0x4]
	float MaxMana;//[Offset: 0x40, Size: 0x4]
	float Damage;//[Offset: 0x44, Size: 0x4]
	float SpellDamage;//[Offset: 0x48, Size: 0x4]
	float PhysicalDamage;//[Offset: 0x4c, Size: 0x4]
	float CritChance;//[Offset: 0x50, Size: 0x4]
	float CritMultiplier;//[Offset: 0x54, Size: 0x4]
	float ArmorDamageReduction;//[Offset: 0x58, Size: 0x4]
	float DodgeChance;//[Offset: 0x5c, Size: 0x4]
	float LifeSteal;//[Offset: 0x60, Size: 0x4]
	float Strength;//[Offset: 0x64, Size: 0x4]
	float StackingAttribute1;//[Offset: 0x68, Size: 0x4]
	float StackingAttribute2;//[Offset: 0x6c, Size: 0x4]
	float NoStackAttribute;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: AbilitySystemTestPawn.DefaultPawn.Pawn.Actor.Object
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x390, Size: 0x8]

--------------------------------
Class: AbilityTask_ApplyRootMotionConstantForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object
	delegate OnFinish;//[Offset: 0xa8, Size: 0x10]
	Vector WorldDirection;//[Offset: 0xb8, Size: 0xc]
	float Strength;//[Offset: 0xc4, Size: 0x4]
	float Duration;//[Offset: 0xc8, Size: 0x4]
	bool bIsAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	CurveFloat* StrengthOverTime;//[Offset: 0xd0, Size: 0x8]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	AbilityTask_ApplyRootMotionConstantForce* ApplyRootMotionConstantForce(GameplayAbility* OwningAbility, FName TaskInstanceName, Vector WorldDirection, float Strength, float Duration, bool bIsAdditive, CurveFloat* StrengthOverTime, enum VelocityOnFinishMode, Vector SetVelocityOnFinish, float ClampVelocityOnFinish, bool bEnableGravity);// 0x52c8e3fee041

--------------------------------
Class: AbilityTask_ApplyRootMotionJumpForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object
	delegate OnFinish;//[Offset: 0xa8, Size: 0x10]
	delegate OnLanded;//[Offset: 0xb8, Size: 0x10]
	Rotator Rotation;//[Offset: 0xc8, Size: 0xc]
	float Distance;//[Offset: 0xd4, Size: 0x4]
	float Height;//[Offset: 0xd8, Size: 0x4]
	float Duration;//[Offset: 0xdc, Size: 0x4]
	float MinimumLandedTriggerTime;//[Offset: 0xe0, Size: 0x4]
	bool bFinishOnLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	CurveVector* PathOffsetCurve;//[Offset: 0xe8, Size: 0x8]
	CurveFloat* TimeMappingCurve;//[Offset: 0xf0, Size: 0x8]
	void OnLandedCallback(out const HitResult Hit);// 0x52cbe3fee041
	void Finish();// 0x52cae3fee041
	AbilityTask_ApplyRootMotionJumpForce* ApplyRootMotionJumpForce(GameplayAbility* OwningAbility, FName TaskInstanceName, Rotator Rotation, float Distance, float Height, float Duration, float MinimumLandedTriggerTime, bool bFinishOnLanded, enum VelocityOnFinishMode, Vector SetVelocityOnFinish, float ClampVelocityOnFinish, CurveVector* PathOffsetCurve, CurveFloat* TimeMappingCurve);// 0x52c9e3fee041

--------------------------------
Class: AbilityTask_ApplyRootMotionMoveToActorForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object
	delegate OnFinished;//[Offset: 0xa8, Size: 0x10]
	Vector StartLocation;//[Offset: 0xc0, Size: 0xc]
	Vector TargetLocation;//[Offset: 0xcc, Size: 0xc]
	Actor* TargetActor;//[Offset: 0xd8, Size: 0x8]
	Vector TargetLocationOffset;//[Offset: 0xe0, Size: 0xc]
	enum OffsetAlignment;//[Offset: 0xec, Size: 0x1]
	float Duration;//[Offset: 0xf0, Size: 0x4]
	bool bDisableDestinationReachedInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	bool bSetNewMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 0x1]
	byte NewMovementMode;//[Offset: 0xf6, Size: 0x1]
	bool bRestrictSpeedToExpected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7, Size: 0x1]
	CurveVector* PathOffsetCurve;//[Offset: 0xf8, Size: 0x8]
	CurveFloat* TimeMappingCurve;//[Offset: 0x100, Size: 0x8]
	CurveFloat* TargetLerpSpeedHorizontalCurve;//[Offset: 0x108, Size: 0x8]
	CurveFloat* TargetLerpSpeedVerticalCurve;//[Offset: 0x110, Size: 0x8]
	void OnTargetActorSwapped(Actor* OriginalTarget, Actor* NewTarget);// 0x52cfe3fee041
	void OnRep_TargetLocation();// 0x52cee3fee041
	AbilityTask_ApplyRootMotionMoveToActorForce* ApplyRootMotionMoveToTargetDataActorForce(GameplayAbility* OwningAbility, FName TaskInstanceName, GameplayAbilityTargetDataHandle TargetDataHandle, int TargetDataIndex, int TargetActorIndex, Vector TargetLocationOffset, enum OffsetAlignment, float Duration, CurveFloat* TargetLerpSpeedHorizontal, CurveFloat* TargetLerpSpeedVertical, bool bSetNewMovementMode, byte MovementMode, bool bRestrictSpeedToExpected, CurveVector* PathOffsetCurve, CurveFloat* TimeMappingCurve, enum VelocityOnFinishMode, Vector SetVelocityOnFinish, float ClampVelocityOnFinish, bool bDisableDestinationReachedInterrupt);// 0x52cde3fee041
	AbilityTask_ApplyRootMotionMoveToActorForce* ApplyRootMotionMoveToActorForce(GameplayAbility* OwningAbility, FName TaskInstanceName, Actor* TargetActor, Vector TargetLocationOffset, enum OffsetAlignment, float Duration, CurveFloat* TargetLerpSpeedHorizontal, CurveFloat* TargetLerpSpeedVertical, bool bSetNewMovementMode, byte MovementMode, bool bRestrictSpeedToExpected, CurveVector* PathOffsetCurve, CurveFloat* TimeMappingCurve, enum VelocityOnFinishMode, Vector SetVelocityOnFinish, float ClampVelocityOnFinish, bool bDisableDestinationReachedInterrupt);// 0x52cce3fee041

--------------------------------
Class: AbilityTask_ApplyRootMotionRadialForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object
	delegate OnFinish;//[Offset: 0xa8, Size: 0x10]
	Vector Location;//[Offset: 0xb8, Size: 0xc]
	Actor* LocationActor;//[Offset: 0xc8, Size: 0x8]
	float Strength;//[Offset: 0xd0, Size: 0x4]
	float Duration;//[Offset: 0xd4, Size: 0x4]
	float Radius;//[Offset: 0xd8, Size: 0x4]
	bool bIsPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	bool bIsAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1]
	bool bNoZForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 0x1]
	CurveFloat* StrengthDistanceFalloff;//[Offset: 0xe0, Size: 0x8]
	CurveFloat* StrengthOverTime;//[Offset: 0xe8, Size: 0x8]
	bool bUseFixedWorldDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	Rotator FixedWorldDirection;//[Offset: 0xf4, Size: 0xc]
	AbilityTask_ApplyRootMotionRadialForce* ApplyRootMotionRadialForce(GameplayAbility* OwningAbility, FName TaskInstanceName, Vector Location, Actor* LocationActor, float Strength, float Duration, float Radius, bool bIsPush, bool bIsAdditive, bool bNoZForce, CurveFloat* StrengthDistanceFalloff, CurveFloat* StrengthOverTime, bool bUseFixedWorldDirection, Rotator FixedWorldDirection, enum VelocityOnFinishMode, Vector SetVelocityOnFinish, float ClampVelocityOnFinish);// 0x52d0e3fee041

--------------------------------
Class: AbilityTask_MoveToLocation.AbilityTask.GameplayTask.Object
	delegate OnTargetLocationReached;//[Offset: 0x78, Size: 0x10]
	Vector StartLocation;//[Offset: 0x8c, Size: 0xc]
	Vector TargetLocation;//[Offset: 0x98, Size: 0xc]
	float DurationOfMovement;//[Offset: 0xa4, Size: 0x4]
	CurveFloat* LerpCurve;//[Offset: 0xb0, Size: 0x8]
	CurveVector* LerpCurveVector;//[Offset: 0xb8, Size: 0x8]
	AbilityTask_MoveToLocation* MoveToLocation(GameplayAbility* OwningAbility, FName TaskInstanceName, Vector Location, float Duration, CurveFloat* OptionalInterpolationCurve, CurveVector* OptionalVectorInterpolationCurve);// 0x52d1e3fee041

--------------------------------
Class: AbilityTask_NetworkSyncPoint.AbilityTask.GameplayTask.Object
	delegate OnSync;//[Offset: 0x78, Size: 0x10]
	AbilityTask_NetworkSyncPoint* WaitNetSync(GameplayAbility* OwningAbility, enum SyncType);// 0x52d3e3fee041
	void OnSignalCallback();// 0x52d2e3fee041

--------------------------------
Class: AbilityTask_PlayMontageAndWait.AbilityTask.GameplayTask.Object
	delegate OnCompleted;//[Offset: 0x78, Size: 0x10]
	delegate OnBlendOut;//[Offset: 0x88, Size: 0x10]
	delegate OnInterrupted;//[Offset: 0x98, Size: 0x10]
	delegate OnCancelled;//[Offset: 0xa8, Size: 0x10]
	AnimMontage* MontageToPlay;//[Offset: 0xe0, Size: 0x8]
	float Rate;//[Offset: 0xe8, Size: 0x4]
	FName StartSection;//[Offset: 0xec, Size: 0x8]
	float AnimRootMotionTranslationScale;//[Offset: 0xf4, Size: 0x4]
	float StartTimeSeconds;//[Offset: 0xf8, Size: 0x4]
	bool bStopWhenAbilityEnds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	bool bStopAllMontages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 0x1]
	bool bDisableInterruptBlendOutTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe, Size: 0x1]
	void OnMontageInterrupted();// 0x52d7e3fee041
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x52d6e3fee041
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x52d5e3fee041
	AbilityTask_PlayMontageAndWait* CreatePlayMontageAndWaitProxy(GameplayAbility* OwningAbility, FName TaskInstanceName, AnimMontage* MontageToPlay, float Rate, FName StartSection, bool bStopWhenAbilityEnds, float AnimRootMotionTranslationScale, float StartTimeSeconds, bool bStopAllMontages, bool bDisableInterruptBlendOutTime);// 0x52d4e3fee041

--------------------------------
Class: AbilityTask_Repeat.AbilityTask.GameplayTask.Object
	delegate OnPerformAction;//[Offset: 0x78, Size: 0x10]
	delegate OnFinished;//[Offset: 0x88, Size: 0x10]
	AbilityTask_Repeat* RepeatAction(GameplayAbility* OwningAbility, float TimeBetweenActions, int TotalActionCount);// 0x52d8e3fee041

--------------------------------
Class: AbilityTask_SpawnActor.AbilityTask.GameplayTask.Object
	delegate Success;//[Offset: 0x78, Size: 0x10]
	delegate DidNotSpawn;//[Offset: 0x88, Size: 0x10]
	AbilityTask_SpawnActor* SpawnActor(GameplayAbility* OwningAbility, GameplayAbilityTargetDataHandle TargetData, class Actor Class);// 0x52dbe3fee041
	void FinishSpawningActor(GameplayAbility* OwningAbility, GameplayAbilityTargetDataHandle TargetData, Actor* SpawnedActor);// 0x52dae3fee041
	bool BeginSpawningActor(GameplayAbility* OwningAbility, GameplayAbilityTargetDataHandle TargetData, class Actor Class, out Actor* SpawnedActor);// 0x52d9e3fee041

--------------------------------
Class: AbilityTask_StartAbilityState.AbilityTask.GameplayTask.Object
	delegate OnStateEnded;//[Offset: 0x78, Size: 0x10]
	delegate OnStateInterrupted;//[Offset: 0x88, Size: 0x10]
	AbilityTask_StartAbilityState* StartAbilityState(GameplayAbility* OwningAbility, FName StateName, bool bEndCurrentState);// 0x52dce3fee041

--------------------------------
Class: AbilityTask_VisualizeTargeting.AbilityTask.GameplayTask.Object
	delegate TimeElapsed;//[Offset: 0x78, Size: 0x10]
	AbilityTask_VisualizeTargeting* VisualizeTargetingUsingActor(GameplayAbility* OwningAbility, GameplayAbilityTargetActor* TargetActor, FName TaskInstanceName, float Duration);// 0x52e0e3fee041
	AbilityTask_VisualizeTargeting* VisualizeTargeting(GameplayAbility* OwningAbility, class GameplayAbilityTargetActor Class, FName TaskInstanceName, float Duration);// 0x52dfe3fee041
	void FinishSpawningActor(GameplayAbility* OwningAbility, GameplayAbilityTargetActor* SpawnedActor);// 0x52dee3fee041
	bool BeginSpawningActor(GameplayAbility* OwningAbility, class GameplayAbilityTargetActor Class, out GameplayAbilityTargetActor* SpawnedActor);// 0x52dde3fee041

--------------------------------
Class: AbilityTask_WaitAbilityActivate.AbilityTask.GameplayTask.Object
	delegate OnActivate;//[Offset: 0x78, Size: 0x10]
	AbilityTask_WaitAbilityActivate* WaitForAbilityActivateWithTagRequirements(GameplayAbility* OwningAbility, GameplayTagRequirements TagRequirements, bool IncludeTriggeredAbilities, bool TriggerOnce);// 0x52e4e3fee041
	AbilityTask_WaitAbilityActivate* WaitForAbilityActivate_Query(GameplayAbility* OwningAbility, GameplayTagQuery Query, bool IncludeTriggeredAbilities, bool TriggerOnce);// 0x52e3e3fee041
	AbilityTask_WaitAbilityActivate* WaitForAbilityActivate(GameplayAbility* OwningAbility, GameplayTag WithTag, GameplayTag WithoutTag, bool IncludeTriggeredAbilities, bool TriggerOnce);// 0x52e2e3fee041
	void OnAbilityActivate(GameplayAbility* ActivatedAbility);// 0x52e1e3fee041

--------------------------------
Class: AbilityTask_WaitAbilityCommit.AbilityTask.GameplayTask.Object
	delegate OnCommit;//[Offset: 0x78, Size: 0x10]
	AbilityTask_WaitAbilityCommit* WaitForAbilityCommit_Query(GameplayAbility* OwningAbility, GameplayTagQuery Query, bool TriggerOnce);// 0x52e7e3fee041
	AbilityTask_WaitAbilityCommit* WaitForAbilityCommit(GameplayAbility* OwningAbility, GameplayTag WithTag, GameplayTag WithoutTage, bool TriggerOnce);// 0x52e6e3fee041
	void OnAbilityCommit(GameplayAbility* ActivatedAbility);// 0x52e5e3fee041

--------------------------------
Class: AbilityTask_WaitAttributeChange.AbilityTask.GameplayTask.Object
	delegate OnChange;//[Offset: 0x78, Size: 0x10]
	AbilitySystemComponent* ExternalOwner;//[Offset: 0xe8, Size: 0x8]
	AbilityTask_WaitAttributeChange* WaitForAttributeChangeWithComparison(GameplayAbility* OwningAbility, GameplayAttribute InAttribute, GameplayTag InWithTag, GameplayTag InWithoutTag, byte InComparisonType, float InComparisonValue, bool TriggerOnce, Actor* OptionalExternalOwner);// 0x52e9e3fee041
	AbilityTask_WaitAttributeChange* WaitForAttributeChange(GameplayAbility* OwningAbility, GameplayAttribute Attribute, GameplayTag WithSrcTag, GameplayTag WithoutSrcTag, bool TriggerOnce, Actor* OptionalExternalOwner);// 0x52e8e3fee041

--------------------------------
Class: AbilityTask_WaitAttributeChangeRatioThreshold.AbilityTask.GameplayTask.Object
	delegate OnChange;//[Offset: 0x78, Size: 0x10]
	AbilitySystemComponent* ExternalOwner;//[Offset: 0x130, Size: 0x8]
	AbilityTask_WaitAttributeChangeRatioThreshold* WaitForAttributeChangeRatioThreshold(GameplayAbility* OwningAbility, GameplayAttribute AttributeNumerator, GameplayAttribute AttributeDenominator, byte ComparisonType, float ComparisonValue, bool bTriggerOnce, Actor* OptionalExternalOwner);// 0x52eae3fee041

--------------------------------
Class: AbilityTask_WaitAttributeChangeThreshold.AbilityTask.GameplayTask.Object
	delegate OnChange;//[Offset: 0x78, Size: 0x10]
	AbilitySystemComponent* ExternalOwner;//[Offset: 0xe0, Size: 0x8]
	AbilityTask_WaitAttributeChangeThreshold* WaitForAttributeChangeThreshold(GameplayAbility* OwningAbility, GameplayAttribute Attribute, byte ComparisonType, float ComparisonValue, bool bTriggerOnce, Actor* OptionalExternalOwner);// 0x52ebe3fee041

--------------------------------
Class: AbilityTask_WaitCancel.AbilityTask.GameplayTask.Object
	delegate OnCancel;//[Offset: 0x78, Size: 0x10]
	AbilityTask_WaitCancel* WaitCancel(GameplayAbility* OwningAbility);// 0x52eee3fee041
	void OnLocalCancelCallback();// 0x52ede3fee041
	void OnCancelCallback();// 0x52ece3fee041

--------------------------------
Class: AbilityTask_WaitConfirm.AbilityTask.GameplayTask.Object
	delegate OnConfirm;//[Offset: 0x78, Size: 0x10]
	AbilityTask_WaitConfirm* WaitConfirm(GameplayAbility* OwningAbility);// 0x52f0e3fee041
	void OnConfirmCallback(GameplayAbility* InAbility);// 0x52efe3fee041

--------------------------------
Class: AbilityTask_WaitConfirmCancel.AbilityTask.GameplayTask.Object
	delegate OnConfirm;//[Offset: 0x78, Size: 0x10]
	delegate OnCancel;//[Offset: 0x88, Size: 0x10]
	AbilityTask_WaitConfirmCancel* WaitConfirmCancel(GameplayAbility* OwningAbility);// 0x52f5e3fee041
	void OnLocalConfirmCallback();// 0x52f4e3fee041
	void OnLocalCancelCallback();// 0x52f3e3fee041
	void OnConfirmCallback();// 0x52f2e3fee041
	void OnCancelCallback();// 0x52f1e3fee041

--------------------------------
Class: AbilityTask_WaitDelay.AbilityTask.GameplayTask.Object
	delegate OnFinish;//[Offset: 0x78, Size: 0x10]
	AbilityTask_WaitDelay* WaitDelay(GameplayAbility* OwningAbility, float Time);// 0x52f6e3fee041

--------------------------------
Class: AbilityTask_WaitGameplayEffectApplied.AbilityTask.GameplayTask.Object
	AbilitySystemComponent* ExternalOwner;//[Offset: 0x1a0, Size: 0x8]
	void OnApplyGameplayEffectCallback(AbilitySystemComponent* Target, out const GameplayEffectSpec SpecApplied, ActiveGameplayEffectHandle ActiveHandle);// 0x52f7e3fee041

--------------------------------
Class: AbilityTask_WaitGameplayEffectApplied_Self.AbilityTask_WaitGameplayEffectApplied.AbilityTask.GameplayTask.Object
	delegate OnApplied;//[Offset: 0x1b0, Size: 0x10]
	AbilityTask_WaitGameplayEffectApplied_Self* WaitGameplayEffectAppliedToSelf_Query(GameplayAbility* OwningAbility, const GameplayTargetDataFilterHandle SourceFilter, GameplayTagQuery SourceTagQuery, GameplayTagQuery TargetTagQuery, bool TriggerOnce, Actor* OptionalExternalOwner, bool ListenForPeriodicEffect);// 0x52f9e3fee041
	AbilityTask_WaitGameplayEffectApplied_Self* WaitGameplayEffectAppliedToSelf(GameplayAbility* OwningAbility, const GameplayTargetDataFilterHandle SourceFilter, GameplayTagRequirements SourceTagRequirements, GameplayTagRequirements TargetTagRequirements, bool TriggerOnce, Actor* OptionalExternalOwner, bool ListenForPeriodicEffect);// 0x52f8e3fee041

--------------------------------
Class: AbilityTask_WaitGameplayEffectApplied_Target.AbilityTask_WaitGameplayEffectApplied.AbilityTask.GameplayTask.Object
	delegate OnApplied;//[Offset: 0x1b0, Size: 0x10]
	AbilityTask_WaitGameplayEffectApplied_Target* WaitGameplayEffectAppliedToTarget_Query(GameplayAbility* OwningAbility, const GameplayTargetDataFilterHandle SourceFilter, GameplayTagQuery SourceTagQuery, GameplayTagQuery TargetTagQuery, bool TriggerOnce, Actor* OptionalExternalOwner, bool ListenForPeriodicEffect);// 0x52fbe3fee041
	AbilityTask_WaitGameplayEffectApplied_Target* WaitGameplayEffectAppliedToTarget(GameplayAbility* OwningAbility, const GameplayTargetDataFilterHandle TargetFilter, GameplayTagRequirements SourceTagRequirements, GameplayTagRequirements TargetTagRequirements, bool TriggerOnce, Actor* OptionalExternalOwner, bool ListenForPeriodicEffects);// 0x52fae3fee041

--------------------------------
Class: AbilityTask_WaitGameplayEffectBlockedImmunity.AbilityTask.GameplayTask.Object
	delegate bLocked;//[Offset: 0x78, Size: 0x10]
	AbilitySystemComponent* ExternalOwner;//[Offset: 0x110, Size: 0x8]
	AbilityTask_WaitGameplayEffectBlockedImmunity* WaitGameplayEffectBlockedByImmunity(GameplayAbility* OwningAbility, GameplayTagRequirements SourceTagRequirements, GameplayTagRequirements TargetTagRequirements, Actor* OptionalExternalTarget, bool OnlyTriggerOnce);// 0x52fce3fee041

--------------------------------
Class: AbilityTask_WaitGameplayEffectRemoved.AbilityTask.GameplayTask.Object
	delegate OnRemoved;//[Offset: 0x78, Size: 0x10]
	delegate InvalidHandle;//[Offset: 0x88, Size: 0x10]
	AbilityTask_WaitGameplayEffectRemoved* WaitForGameplayEffectRemoved(GameplayAbility* OwningAbility, ActiveGameplayEffectHandle Handle);// 0x52fee3fee041
	void OnGameplayEffectRemoved(out const GameplayEffectRemovalInfo InGameplayEffectRemovalInfo);// 0x52fde3fee041

--------------------------------
Class: GameplayEffectRemovalInfo
	bool bPrematureRemoval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int StackCount;//[Offset: 0x4, Size: 0x4]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: AbilityTask_WaitGameplayEffectStackChange.AbilityTask.GameplayTask.Object
	delegate OnChange;//[Offset: 0x78, Size: 0x10]
	delegate InvalidHandle;//[Offset: 0x88, Size: 0x10]
	AbilityTask_WaitGameplayEffectStackChange* WaitForGameplayEffectStackChange(GameplayAbility* OwningAbility, ActiveGameplayEffectHandle Handle);// 0x5300e3fee041
	void OnGameplayEffectStackChange(ActiveGameplayEffectHandle Handle, int NewCount, int OldCount);// 0x52ffe3fee041

--------------------------------
Class: AbilityTask_WaitGameplayEvent.AbilityTask.GameplayTask.Object
	delegate EventReceived;//[Offset: 0x78, Size: 0x10]
	AbilitySystemComponent* OptionalExternalTarget;//[Offset: 0x90, Size: 0x8]
	AbilityTask_WaitGameplayEvent* WaitGameplayEvent(GameplayAbility* OwningAbility, GameplayTag EventTag, Actor* OptionalExternalTarget, bool OnlyTriggerOnce, bool OnlyMatchExact);// 0x5301e3fee041

--------------------------------
Class: AbilityTask_WaitGameplayTag.AbilityTask.GameplayTask.Object
	AbilitySystemComponent* OptionalExternalTarget;//[Offset: 0x80, Size: 0x8]
	void GameplayTagCallback(const GameplayTag Tag, int NewCount);// 0x5302e3fee041

--------------------------------
Class: AbilityTask_WaitGameplayTagAdded.AbilityTask_WaitGameplayTag.AbilityTask.GameplayTask.Object
	delegate Added;//[Offset: 0x98, Size: 0x10]
	AbilityTask_WaitGameplayTagAdded* WaitGameplayTagAdd(GameplayAbility* OwningAbility, GameplayTag Tag, Actor* InOptionalExternalTarget, bool OnlyTriggerOnce);// 0x5303e3fee041

--------------------------------
Class: AbilityTask_WaitGameplayTagRemoved.AbilityTask_WaitGameplayTag.AbilityTask.GameplayTask.Object
	delegate Removed;//[Offset: 0x98, Size: 0x10]
	AbilityTask_WaitGameplayTagRemoved* WaitGameplayTagRemove(GameplayAbility* OwningAbility, GameplayTag Tag, Actor* InOptionalExternalTarget, bool OnlyTriggerOnce);// 0x5304e3fee041

--------------------------------
Class: AbilityTask_WaitInputPress.AbilityTask.GameplayTask.Object
	delegate OnPress;//[Offset: 0x78, Size: 0x10]
	AbilityTask_WaitInputPress* WaitInputPress(GameplayAbility* OwningAbility, bool bTestAlreadyPressed);// 0x5306e3fee041
	void OnPressCallback();// 0x5305e3fee041

--------------------------------
Class: AbilityTask_WaitInputRelease.AbilityTask.GameplayTask.Object
	delegate OnRelease;//[Offset: 0x78, Size: 0x10]
	AbilityTask_WaitInputRelease* WaitInputRelease(GameplayAbility* OwningAbility, bool bTestAlreadyReleased);// 0x5308e3fee041
	void OnReleaseCallback();// 0x5307e3fee041

--------------------------------
Class: AbilityTask_WaitMovementModeChange.AbilityTask.GameplayTask.Object
	delegate OnChange;//[Offset: 0x78, Size: 0x10]
	void OnMovementModeChange(Character* Character, byte PrevMovementMode, byte PreviousCustomMode);// 0x530ae3fee041
	AbilityTask_WaitMovementModeChange* CreateWaitMovementModeChange(GameplayAbility* OwningAbility, byte NewMode);// 0x5309e3fee041

--------------------------------
Class: AbilityTask_WaitOverlap.AbilityTask.GameplayTask.Object
	delegate OnOverlap;//[Offset: 0x78, Size: 0x10]
	AbilityTask_WaitOverlap* WaitForOverlap(GameplayAbility* OwningAbility);// 0x530ce3fee041
	void OnHitCallback(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x530be3fee041

--------------------------------
Class: AbilityTask_WaitTargetData.AbilityTask.GameplayTask.Object
	delegate ValidData;//[Offset: 0x78, Size: 0x10]
	delegate Cancelled;//[Offset: 0x88, Size: 0x10]
	class GameplayAbilityTargetActor* TargetClass;//[Offset: 0x98, Size: 0x8]
	GameplayAbilityTargetActor* TargetActor;//[Offset: 0xa0, Size: 0x8]
	AbilityTask_WaitTargetData* WaitTargetDataUsingActor(GameplayAbility* OwningAbility, FName TaskInstanceName, byte ConfirmationType, GameplayAbilityTargetActor* TargetActor);// 0x5314e3fee041
	AbilityTask_WaitTargetData* WaitTargetData(GameplayAbility* OwningAbility, FName TaskInstanceName, byte ConfirmationType, class GameplayAbilityTargetActor Class);// 0x5313e3fee041
	void OnTargetDataReplicatedCancelledCallback();// 0x5312e3fee041
	void OnTargetDataReplicatedCallback(out const GameplayAbilityTargetDataHandle Data, GameplayTag ActivationTag);// 0x5311e3fee041
	void OnTargetDataReadyCallback(out const GameplayAbilityTargetDataHandle Data);// 0x5310e3fee041
	void OnTargetDataCancelledCallback(out const GameplayAbilityTargetDataHandle Data);// 0x530fe3fee041
	void FinishSpawningActor(GameplayAbility* OwningAbility, GameplayAbilityTargetActor* SpawnedActor);// 0x530ee3fee041
	bool BeginSpawningActor(GameplayAbility* OwningAbility, class GameplayAbilityTargetActor Class, out GameplayAbilityTargetActor* SpawnedActor);// 0x530de3fee041

--------------------------------
Class: AbilityTask_WaitVelocityChange.AbilityTask.GameplayTask.Object
	delegate OnVelocityChage;//[Offset: 0x78, Size: 0x10]
	MovementComponent* CachedMovementComponent;//[Offset: 0x88, Size: 0x8]
	AbilityTask_WaitVelocityChange* CreateWaitVelocityChange(GameplayAbility* OwningAbility, Vector Direction, float MinimumMagnitude);// 0x5315e3fee041

--------------------------------
Class: GameplayAbility_CharacterJump.GameplayAbility.Object

--------------------------------
Class: GameplayAbility_Montage.GameplayAbility.Object
	AnimMontage* MontageToPlay;//[Offset: 0x3b8, Size: 0x8]
	float PlayRate;//[Offset: 0x3c0, Size: 0x4]
	FName SectionName;//[Offset: 0x3c4, Size: 0x8]
	class GameplayEffect[] GameplayEffectClassesWhileAnimating;//[Offset: 0x3d0, Size: 0x10]
	GameplayEffect*[] GameplayEffectsWhileAnimating;//[Offset: 0x3e0, Size: 0x10]

--------------------------------
Class: GameplayAbilityBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: GameplayAbilitySet.DataAsset.Object
	GameplayAbilityBindInfo[] Abilities;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: GameplayAbilityBindInfo
	byte Command;//[Offset: 0x0, Size: 0x1]
	class GameplayAbility* GameplayAbilityClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameplayAbilityTargetActor_Trace.GameplayAbilityTargetActor.Actor.Object
	float MaxRange;//[Offset: 0x3e8, Size: 0x4]
	CollisionProfileName TraceProfile;//[Offset: 0x3ec, Size: 0x8]
	bool bTraceAffectsAimPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 0x1]

--------------------------------
Class: GameplayAbilityTargetActor_GroundTrace.GameplayAbilityTargetActor_Trace.GameplayAbilityTargetActor.Actor.Object
	float CollisionRadius;//[Offset: 0x400, Size: 0x4]
	float CollisionHeight;//[Offset: 0x404, Size: 0x4]

--------------------------------
Class: GameplayAbilityTargetActor_ActorPlacement.GameplayAbilityTargetActor_GroundTrace.GameplayAbilityTargetActor_Trace.GameplayAbilityTargetActor.Actor.Object
	class Object* PlacedActorClass;//[Offset: 0x420, Size: 0x8]
	MaterialInterface* PlacedActorMaterial;//[Offset: 0x428, Size: 0x8]

--------------------------------
Class: GameplayAbilityTargetActor_Radius.GameplayAbilityTargetActor.Actor.Object
	float Radius;//[Offset: 0x3e8, Size: 0x4]

--------------------------------
Class: GameplayAbilityTargetActor_SingleLineTrace.GameplayAbilityTargetActor_Trace.GameplayAbilityTargetActor.Actor.Object

--------------------------------
Class: GameplayAbilityWorldReticle_ActorVisualization.GameplayAbilityWorldReticle.Actor.Object
	CapsuleComponent* CollisionComponent;//[Offset: 0x300, Size: 0x8]
	ActorComponent*[] VisualizationComponents;//[Offset: 0x308, Size: 0x10]

--------------------------------
Class: GameplayCueInterface.Interface.Object
	void ForwardGameplayCueToParent();// 0x531fe3fee041
	void BlueprintCustomHandler(byte EventType, GameplayCueParameters Parameters);// 0x531ee3fee041

--------------------------------
Class: GameplayCueNotify_Static.Object
	GameplayTag GameplayCueTag;//[Offset: 0x28, Size: 0x8]
	FName GameplayCueName;//[Offset: 0x30, Size: 0x8]
	bool IsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool WhileActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x532be3fee041
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x532ae3fee041
	bool OnExecute(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x5329e3fee041
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x5328e3fee041
	void K2_HandleGameplayCue(Actor* MyTarget, byte EventType, out const GameplayCueParameters Parameters);// 0x5327e3fee041

--------------------------------
Class: GameplayCueNotify_HitImpact.GameplayCueNotify_Static.Object
	SoundBase* Sound;//[Offset: 0x40, Size: 0x8]
	ParticleSystem* ParticleSystem;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: GameplayCueTranslator.Object

--------------------------------
Class: GameplayCueTranslator_Test.GameplayCueTranslator.Object

--------------------------------
Class: GameplayEffectUIData_TextOnly.GameplayEffectUIData.Object
	FText Description;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: TickableAttributeSetInterface.Interface.Object

--------------------------------
Class: BTreeStatListItemData.Object
	AIBTreeStatInfo StatInfo;//[Offset: 0x28, Size: 0x40]
	void CopyTo(out const AIBTreeStatInfo Other);// 0x533fe3fee041
	void CleanData();// 0x533ee3fee041

--------------------------------
Class: AIBTreeStatInfo
	FString NodeName;//[Offset: 0x0, Size: 0x10]
	float HistoryIncAvg;//[Offset: 0x10, Size: 0x4]
	float HistoryIncMax;//[Offset: 0x14, Size: 0x4]
	int HistoryMaxCallCount;//[Offset: 0x18, Size: 0x4]
	BTreeStatPerFrameData NewFrameData;//[Offset: 0x20, Size: 0x20]

--------------------------------
Class: BTreeStatMonitor.BlueprintFunctionLibrary.Object
	void SortBTreeStatInfo(Object* World, out const AIBTreeStatInfo[] BTreeStatInfos, int SortType);// 0x5347e3fee041
	void SetMonitorEnabled(Object* World, bool bEnabled);// 0x5346e3fee041
	bool RetrieveBTreeStatData(Object* World, out BTreeStatPerFrameData[] OutStatInfo);// 0x5345e3fee041
	bool IsInMonitor(Object* World);// 0x5344e3fee041
	void InsertToBTreeStatInfo(Object* World, out const AIBTreeStatInfo[] BTreeStatInfos, FString NodeName, out const BTreeStatPerFrameData PerFrameData);// 0x5343e3fee041
	GameState* GetGameState(Object* World);// 0x5342e3fee041
	World* GetClientWorld(Object* WorldContext);// 0x5341e3fee041
	void ClearStatMonitorData(Object* World);// 0x5340e3fee041

--------------------------------
Class: NPCAIAimingInterface.Interface.Object
	void UpdatePredestinedHit();// 0x5368e3fee041
	void TriggerPressedDone(float WeaponRecoilParam);// 0x5367e3fee041
	void SetTargetEnemy(Actor* InEnemyPawn);// 0x5366e3fee041
	void SetTarget(out const Vector ShootPartPoint, out const Vector BodyCenterPoint, bool bAI);// 0x5365e3fee041
	void SetShootPartID(byte InShootPartID);// 0x5364e3fee041
	void SetNextAimingDelay(float DelayTime);// 0x5363e3fee041
	void NodeUpdate();// 0x5362e3fee041
	void NextShotMiss();// 0x5361e3fee041
	void NextShotHit();// 0x5360e3fee041
	void LoseTarget();// 0x535fe3fee041
	bool IsUsingPredestined();// 0x535ee3fee041
	bool IsReady();// 0x535de3fee041
	bool IsNextShotMiss();// 0x535ce3fee041
	bool IsNextShotHit();// 0x535be3fee041
	bool IsInPullBolt();// 0x535ae3fee041
	bool IsFacingTargetPoint(out const Vector TargetPoint, float AngleLimit);// 0x5359e3fee041
	bool HasAmmo();// 0x5358e3fee041
	Actor* GetTargetEnemy();// 0x5357e3fee041
	Vector GetSpreadOffset();// 0x5356e3fee041
	byte GetShootPartID();// 0x5355e3fee041
	Vector GetRealTargetPoint();// 0x5354e3fee041
	int GetMaxShotCount();// 0x5353e3fee041
	float GetLastDist2Target();// 0x5352e3fee041
	void GetHit(int DamageInfo);// 0x5351e3fee041
	Vector GetEndTargetPoint();// 0x5350e3fee041
	int GetCurrentShotCount();// 0x534fe3fee041
	float GetAimingLeftTime();// 0x534ee3fee041
	void ForceCompleteAim();// 0x534de3fee041
	void ClearNextShotMiss();// 0x534ce3fee041
	void ClearNextShotHit();// 0x534be3fee041
	void ClearNextShotFlags();// 0x534ae3fee041
	void CalculateEndTargetPoint();// 0x5349e3fee041

--------------------------------
Class: NPCAIAreaVolumeInterface.Interface.Object

--------------------------------
Class: NPCAIBattleVolumeInterface.Interface.Object

--------------------------------
Class: NPCAICharacterInterface.Interface.Object

--------------------------------
Class: NPCAIControllerInterface.Interface.Object

--------------------------------
Class: EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x50, Size: 0x30]

--------------------------------
Class: EnvTraceData
	int VersionNum;//[Offset: 0x0, Size: 0x4]
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x8, Size: 0x8]
	float ProjectDown;//[Offset: 0x10, Size: 0x4]
	float ProjectUp;//[Offset: 0x14, Size: 0x4]
	float ExtentX;//[Offset: 0x18, Size: 0x4]
	float ExtentY;//[Offset: 0x1c, Size: 0x4]
	float ExtentZ;//[Offset: 0x20, Size: 0x4]
	float PostProjectionVerticalOffset;//[Offset: 0x24, Size: 0x4]
	byte TraceChannel;//[Offset: 0x28, Size: 0x1]
	byte SerializedChannel;//[Offset: 0x29, Size: 0x1]
	byte TraceShape;//[Offset: 0x2a, Size: 0x1]
	byte TraceMode;//[Offset: 0x2b, Size: 0x1]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1]
	bool bCanTraceOnNavMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1]
	bool bCanTraceOnGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 0x1]
	bool bCanDisableTrace;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 0x1]
	bool bCanProjectDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: EnvQueryGenerator_OnCircle.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue CircleRadius;//[Offset: 0x80, Size: 0x38]
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xb8, Size: 0x38]
	AIDataProviderIntValue NumberOfPoints;//[Offset: 0xf0, Size: 0x38]
	enum PointOnCircleSpacingMethod;//[Offset: 0x128, Size: 0x1]
	EnvDirection ArcDirection;//[Offset: 0x130, Size: 0x20]
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x150, Size: 0x38]
	float AngleRadians;//[Offset: 0x188, Size: 0x4]
	class EnvQueryContext* CircleCenter;//[Offset: 0x190, Size: 0x8]
	bool bIgnoreAnyContextActorsWhenGeneratingCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	AIDataProviderFloatValue CircleCenterZOffset;//[Offset: 0x1a0, Size: 0x38]
	EnvTraceData TraceData;//[Offset: 0x1d8, Size: 0x30]
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1]

--------------------------------
Class: AIDataProviderIntValue.AIDataProviderTypedValue.AIDataProviderValue
	int DefaultValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EnvDirection
	class EnvQueryContext* LineFrom;//[Offset: 0x0, Size: 0x8]
	class EnvQueryContext* LineTo;//[Offset: 0x8, Size: 0x8]
	class EnvQueryContext* Rotation;//[Offset: 0x10, Size: 0x8]
	byte DirMode;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: NPCAICoverEnvQueryGenerator.EnvQueryGenerator_OnCircle.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	CoverSystem* CacheCoverSystem;//[Offset: 0x210, Size: 0x8]

--------------------------------
Class: NPCAICoverEnvQueryTest_CanAttackTo.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: NPCAICoverEnvQueryTest_CanContain.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: NPCAICoverEnvQueryTest_CloserRatio.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: NPCAICoverEnvQueryTest_CoverDist.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: NPCAICoverEnvQueryTest_DefenceAngle.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: NPCAICoverEnvQueryTest_DefenceRatio.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: NPCAICoverEnvQueryTest_DistanceToAllyCover.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: NPCAICoverEnvQueryTest_DistanceToHotPoint.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: NPCAICoverEnvQueryTest_IsFree.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: NPCAICoverEnvQueryTest_IsInCone.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: NPCAICoverEnvQueryTest_IsNear.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: NPCAICoverEnvQueryTest_IsSafe.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: NPCAICoverEnvQueryTest_IsSameSideToTarget.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: NPCAICoverEnvQueryTest_PathLength.EnvQueryTest.EnvQueryNode.Object
	bool bEnabledDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1]

--------------------------------
Class: NPCAICoverEnvQueryTest_Protection.EnvQueryTest.EnvQueryNode.Object
	class EnvQueryContext* ProtectionFrom;//[Offset: 0x1f8, Size: 0x8]

--------------------------------
Class: NPCAICoverEnvQueryTest_ShootDistance.EnvQueryTest.EnvQueryNode.Object
	class EnvQueryContext* ShootDistanceTo;//[Offset: 0x1f8, Size: 0x8]

--------------------------------
Class: NPCAICoverSystemStatics.BlueprintFunctionLibrary.Object
	bool TestCoverPoints_IsSafe(out const int[] InPoints, float SecondsAfterLastSpotted, out int[] PassPoints, Object* WorldContextObject);// 0x539be3fee041
	bool TestCoverPoints_IsNear(out const int[] InPoints, out const Vector Location, float Distance, bool bReversed, out int[] PassPoints, Object* WorldContextObject);// 0x539ae3fee041
	bool TestCoverPoints_IsFree(out const int[] InPoints, Actor* InActor, float TreatAsFreeAfterSeconds, out int[] PassPoints, Object* WorldContextObject);// 0x5399e3fee041
	bool TestCoverPoints_HasNavPath(out const int[] InPoints, out const Vector StartLocation, float MaxPathLenght, out int[] PassPoints, Object* WorldContextObject);// 0x5398e3fee041
	bool TestCoverPoints_CanProtectPose(out const int[] InPoints, enum PoseType, out int[] PassPoints, Object* WorldContextObject);// 0x5397e3fee041
	bool TestCoverPoints_CanContain(out const int[] InPoints, out const Vector Location, float HorizontalAngle, float TopAngle, float BottomAngle, out int[] PassPoints, Object* WorldContextObject);// 0x5396e3fee041
	bool TestCoverPoints_CanAttackTo(out const int[] InPoints, out const Vector Location, out const Actor*[] IgnoredActors, out int[] PassPoints, Object* WorldContextObject);// 0x5395e3fee041
	bool TestCoverPoint_IsSafe(int InPointID, float SecondsAfterLastSpotted, Object* WorldContextObject);// 0x5394e3fee041
	bool SetCoverPointSpotted(int PointID, Object* WorldContextObject);// 0x5393e3fee041
	bool SetCoverPointOwner(int PointID, Actor* Actor, float Radius, Object* WorldContextObject);// 0x5392e3fee041
	EnvQueryInstanceBlueprintWrapper* RunEQSQuery_FindBackUpCoverPointNearBy(Object* WorldContextObject, EnvQuery* QueryTemplate, Actor* Querier, out const Vector InEnemyPos, float InRadiusNoCheck, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x5391e3fee041
	void RemoveCoverPointBeTaked(Actor* InAIPawn);// 0x5390e3fee041
	bool GetQueryResultsAsCoverIDs(const EnvQueryInstanceBlueprintWrapper* QueryInstanceBPWrapper, out int[] PassPoints);// 0x538fe3fee041
	CoverSystem* GetCoverSystem(Object* WorldContextObject);// 0x538ee3fee041
	bool GetCoverPointPoseDataArray(int PointID, out CoverPoseData[] PoseDataArray, out Vector RightDirection, Object* WorldContextObject);// 0x538de3fee041
	bool GetCoverPointLocationAndDirection(int PointID, out Vector Location, out Vector Direction, Object* WorldContextObject);// 0x538ce3fee041
	bool GetCoverPointData(const int PointID, out CoverPointOctreeData Data, Object* WorldContextObject);// 0x538be3fee041
	bool FindNearestCoverPoint(out const Vector Location, float EdgeSize, out Vector CoverLocation, Object* WorldContextObject);// 0x538ae3fee041
	bool FindCoverPointsInSphere(Vector Location, float Radius, out int[] Points, Object* WorldContextObject);// 0x5389e3fee041

--------------------------------
Class: NPCAIDamageData.Object
	float TimeDamage;//[Offset: 0x28, Size: 0x4]
	Vector position;//[Offset: 0x2c, Size: 0xc]
	float CachedMaxActiveTime;//[Offset: 0x38, Size: 0x4]
	bool IsActive();// 0x539ce3fee041

--------------------------------
Class: NPCAIDoorInterface.Interface.Object
	bool IsDoorLocked();// 0x539ee3fee041
	bool IsDoorClosed();// 0x539de3fee041

--------------------------------
Class: NPCAIDoorOpenInterface.Interface.Object
	bool IsDoorOpened(Actor* InDoor);// 0x539fe3fee041

--------------------------------
Class: EnvQueryGenerator_BlueprintBase.EnvQueryGenerator.EnvQueryNode.Object
	FText GeneratorsActionDescription;//[Offset: 0x50, Size: 0x18]
	class EnvQueryContext* Context;//[Offset: 0x68, Size: 0x8]
	class EnvQueryItemType* GeneratedItemType;//[Offset: 0x70, Size: 0x8]
	Object* GetQuerier();// 0x53c2e3fee041
	void DoItemGeneration(out const Vector[] ContextLocations);// 0x53c1e3fee041
	void AddGeneratedVector(Vector GeneratedVector);// 0x53c0e3fee041
	void AddGeneratedActor(Actor* GeneratedActor);// 0x53bfe3fee041

--------------------------------
Class: NPCAIEnvQueryGenerator_BlueprintBase.EnvQueryGenerator_BlueprintBase.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderIntValue IntParam;//[Offset: 0x80, Size: 0x38]
	int GetQueryIntParam(out const FName ParamName);// 0x53c3e3fee041

--------------------------------
Class: NPCAIEnvQueryGenerator_OnPolyCenter.EnvQueryGenerator_OnCircle.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderBoolValue OnlyCurrentRegion;//[Offset: 0x210, Size: 0x38]
	AIDataProviderBoolValue IncludeNavMeshPolyCenters;//[Offset: 0x248, Size: 0x38]
	AIDataProviderBoolValue IncludeNavMeshInternalEdges;//[Offset: 0x280, Size: 0x38]
	AIDataProviderBoolValue IncludeNavMeshBoundaryEdges;//[Offset: 0x2b8, Size: 0x38]

--------------------------------
Class: NPCAIEnvQueryInstanceBlueprintWrapper.EnvQueryInstanceBlueprintWrapper.Object
	float QueryTime;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: NPCAIEnvQueryItemType_CoverPoint.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: NPCAIEnvQueryManager.EnvQueryManager.AISubsystem.Object

--------------------------------
Class: NPCAIEnvQueryTest_BlueprintBase.EnvQueryTest.EnvQueryNode.Object
	class EnvQueryContext* Context;//[Offset: 0x1f8, Size: 0x8]
	FText TestDescription;//[Offset: 0x200, Size: 0x18]
	float CalcScore(Actor* ItemActor, out const Actor*[] ContextActors);// 0x53c5e3fee041

--------------------------------
Class: NPCAIEQSSystemStatics.BlueprintFunctionLibrary.Object
	EnvQueryInstanceBlueprintWrapper* UARunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Actor* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass, byte QueryPriority);// 0x53c6e3fee041

--------------------------------
Class: AIPropertyDamageProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	float DamageScale;//[Offset: 0x30, Size: 0x4]
	bool EnabledTeamGrenadeHarm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool EnabledFactionGrenadeHarm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]

--------------------------------
Class: AIPropertyHealthProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	float HeadEnduranceMax;//[Offset: 0x30, Size: 0x4]
	float ChestEnduranceMax;//[Offset: 0x34, Size: 0x4]
	float StomachEnduranceMax;//[Offset: 0x38, Size: 0x4]
	float LeftArmEnduranceMax;//[Offset: 0x3c, Size: 0x4]
	float RightArmEnduranceMax;//[Offset: 0x40, Size: 0x4]
	float LeftLegEnduranceMax;//[Offset: 0x44, Size: 0x4]
	float RightLegEnduranceMax;//[Offset: 0x48, Size: 0x4]
	float MaxHealthAdjustment;//[Offset: 0x4c, Size: 0x4]
	bool bEnableDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	float DangerCoefOfDBNO;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: AIPropertyPlayerActionReactionProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	CurveFloat* TURN_TO_USE_TIME_CURVE;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AIPropertyAimingProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	float UA_QUICK_AIM_OFFSET_DIS_RATE;//[Offset: 0x30, Size: 0x4]
	float UA_QUICK_AIM_TIME;//[Offset: 0x34, Size: 0x4]
	CurveFloat* UA_AIM_TIME_TO_DIST_MULTIPLIER_CURVE;//[Offset: 0x38, Size: 0x8]
	CurveFloat* UA_SCATTERING_DIST_CURVE;//[Offset: 0x40, Size: 0x8]
	float[] UA_SHOOT_HIT_RATES;//[Offset: 0x48, Size: 0x10]
	float[] UA_SHOOT_HIT_RATES_AI;//[Offset: 0x58, Size: 0x10]
	CurveFloat* UA_SHOOT_HIT_RATE_DISTANCE_TO_PLAYER_CURVE;//[Offset: 0x68, Size: 0x8]
	CurveFloat* UA_SHOOT_HIT_RATE_DISTANCE_TO_AI_CURVE;//[Offset: 0x70, Size: 0x8]
	float UA_ADD_AIMING_TICK_WHEN_ANGLE_SMALLER_THAN;//[Offset: 0x78, Size: 0x4]
	float UA_ADD_AIMING_TICK_WHEN_ANGLE_SMALLER_THAN_COS;//[Offset: 0x7c, Size: 0x4]
	bool IS_USE_PREDESTINED_FAKE_RANDOM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	float UA_SHOOT_HIT_RATE_IF_AIMOVE;//[Offset: 0x84, Size: 0x4]
	float UA_SHOOT_HIT_RATE_IF_ENEMY_MOVE_SPEED;//[Offset: 0x88, Size: 0x4]
	float UA_SHOOT_HIT_RATE_IF_ENEMY_MOVE;//[Offset: 0x8c, Size: 0x4]
	float UA_SHOOT_HIT_RATE_IF_ARM_BROKEN;//[Offset: 0x90, Size: 0x4]
	float UA_SHOOT_HIT_RATE_IF_INCOVER_SAFE;//[Offset: 0x94, Size: 0x4]
	float UA_SHOOT_HIT_RATE_IF_BE_HITED;//[Offset: 0x98, Size: 0x4]
	CurveFloat* UA_SHOOT_HIT_RATE_IF_BATTLE_DURATION_CURVE;//[Offset: 0xa0, Size: 0x8]
	CurveFloat* UA_SHOOT_HIT_RATE_IF_WEAPON_ADSMOA_BIAS_CURVE;//[Offset: 0xa8, Size: 0x8]
	float UA_SHOOT_HIT_RATE_IF_SHOOT_HEAD;//[Offset: 0xb0, Size: 0x4]
	float UA_SHOOT_HIT_RATE_IF_UNDER_FLASH_LIGHT;//[Offset: 0xb4, Size: 0x4]
	float UA_SHOOT_HEAD_FACE_RATE_IF_USE_PREDESTINED;//[Offset: 0xb8, Size: 0x4]
	float UA_SHOOT_HIT_LIMITED_TIME;//[Offset: 0xbc, Size: 0x4]
	float UA_MIN_AIM_TIME;//[Offset: 0xc0, Size: 0x4]
	float MAX_AIM_TIME;//[Offset: 0xc4, Size: 0x4]
	float UA_SPREAD_OFFSET_XY_CLAMP;//[Offset: 0xc8, Size: 0x4]
	float UA_SPREAD_OFFSET_MIN_Z_CLAMP;//[Offset: 0xcc, Size: 0x4]
	float UA_SPREAD_OFFSET_MAX_Z_CLAMP;//[Offset: 0xd0, Size: 0x4]
	AIBodyBulkAimingChoice[] AIMING_BULK_FOR_PLAYER;//[Offset: 0xd8, Size: 0x10]
	AIBodyBulkAimingChoice[] AIMING_BULK_FOR_AI;//[Offset: 0xe8, Size: 0x10]
	bool IS_FILTER_NOT_SEEN_PART_TO_AIMING;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	enum AIMING_BODYPART_TREND;//[Offset: 0xf9, Size: 0x1]
	float SHOOT_TO_CHANGE_RND_PART_DELTA;//[Offset: 0xfc, Size: 0x4]
	float ANY_PART_SHOOT_TIME;//[Offset: 0x100, Size: 0x4]
	float MAX_AIM_PRECICING;//[Offset: 0x104, Size: 0x4]
	float BETTER_PRECICING_COEF;//[Offset: 0x108, Size: 0x4]
	float RECLC_Z_DIST;//[Offset: 0x10c, Size: 0x4]
	float RECALC_DIST;//[Offset: 0x110, Size: 0x4]
	float RECALC_SQR_DIST;//[Offset: 0x114, Size: 0x4]
	float COEF_FROM_COVER;//[Offset: 0x118, Size: 0x4]
	int RECALC_MUST_TIME_MIN;//[Offset: 0x11c, Size: 0x4]
	int RECALC_MUST_TIME_MAX;//[Offset: 0x120, Size: 0x4]
	float MAX_AIMING_UPGRADE_BY_TIME;//[Offset: 0x124, Size: 0x4]
	float DAMAGE_TO_DISCARD_AIM_0;//[Offset: 0x128, Size: 0x4]
	float MIN_TIME_DISCARD_AIM_SEC;//[Offset: 0x12c, Size: 0x4]
	float MAX_TIME_DISCARD_AIM_SEC;//[Offset: 0x130, Size: 0x4]
	float XZ_COEF;//[Offset: 0x134, Size: 0x4]
	float BOTTOM_COEF;//[Offset: 0x138, Size: 0x4]
	float FIRST_CONTACT_ADD_SEC;//[Offset: 0x13c, Size: 0x4]
	float FIRST_CONTACT_ADD_CHANCE;//[Offset: 0x140, Size: 0x4]
	float DIST_TO_SHOOT_NO_OFFSET;//[Offset: 0x144, Size: 0x4]
	float COEF_IF_MOVE;//[Offset: 0x148, Size: 0x4]
	float TIME_COEF_IF_MOVE;//[Offset: 0x14c, Size: 0x4]
	float NEXT_SHOT_MISS_Y_OFFSET;//[Offset: 0x150, Size: 0x4]
	float OFFSET_RECAL_ANYWAY_TIME;//[Offset: 0x154, Size: 0x4]
	float Y_TOP_OFFSET_COEF;//[Offset: 0x158, Size: 0x4]
	float Y_BOTTOM_OFFSET_COEF;//[Offset: 0x15c, Size: 0x4]

--------------------------------
Class: AIPropertyBossProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	bool BOSS_SHALL_WARNING_SCAVPLAYER;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float BOSS_DIST_TO_WARNING;//[Offset: 0x34, Size: 0x4]
	float BOSS_WARNING_TIME;//[Offset: 0x38, Size: 0x4]
	float BOSS_DIST_TO_SHOOT;//[Offset: 0x3c, Size: 0x4]
	float BOSS_DIST_TO_WARNING_OUT;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: AIPropertyCoreProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	enum AimingType;//[Offset: 0x30, Size: 0x1]
	float AccuratySpeed;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: AIPropertyGlobalProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object

--------------------------------
Class: AIPropertyGrenadeProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	Vector UA_THROW_POSITION_OFFSET_STAND;//[Offset: 0x30, Size: 0xc]
	Vector UA_THROW_POSITION_OFFSET_STAND_LLEAN;//[Offset: 0x3c, Size: 0xc]
	Vector UA_THROW_POSITION_OFFSET_STAND_RLEAN;//[Offset: 0x48, Size: 0xc]
	Vector UA_THROW_POSITION_OFFSET_CROUCH;//[Offset: 0x54, Size: 0xc]
	Vector UA_THROW_POSITION_OFFSET_CROUCH_LLEAN;//[Offset: 0x60, Size: 0xc]
	Vector UA_THROW_POSITION_OFFSET_CROUCH_RLEAN;//[Offset: 0x6c, Size: 0xc]
	Vector UA_THROW_POSITION_OFFSET_PRONE;//[Offset: 0x78, Size: 0xc]
	float CLOSE_GRENADE_HIT_DISTANCE;//[Offset: 0x84, Size: 0x4]
	float COMING_GRENADE_BE_KONW_IF_FALL_IN_DISTANCE;//[Offset: 0x88, Size: 0x4]
	float HOLDING_GRENADE_BE_KONW_IF_IN_DISTANCE;//[Offset: 0x8c, Size: 0x4]
	float SELF_HOLDING_GRENADE_PROBABILITY;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: AIPropertyHearingProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	bool AUTO_BE_ENEMY_IF_CREATE_DANAGE_NOISE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float NOISE_POWER_SPRINT;//[Offset: 0x34, Size: 0x4]
	float NOISE_POWER_PRONE;//[Offset: 0x38, Size: 0x4]
	float NOISE_POWER_CROUCH;//[Offset: 0x3c, Size: 0x4]
	float NOISE_POWER_WALK;//[Offset: 0x40, Size: 0x4]
	float NOISE_POWER_SLIENT_WALK;//[Offset: 0x44, Size: 0x4]
	float NOISE_POWER_SLIENT_CROUCH;//[Offset: 0x48, Size: 0x4]
	float NOISE_POWER_GUN_FIRE;//[Offset: 0x4c, Size: 0x4]
	float NOISE_POWER_SILENCED_FIRE;//[Offset: 0x50, Size: 0x4]
	float NOISE_POWER_DOOR_OPEN;//[Offset: 0x54, Size: 0x4]
	float NOISE_POWER_DOOR_WRECK;//[Offset: 0x58, Size: 0x4]
	float NOISE_POWER_GRENADE_EXPLOSIVE;//[Offset: 0x5c, Size: 0x4]
	float NOISE_POWER_FOOT_STEP_SOUNDER;//[Offset: 0x60, Size: 0x4]
	float POWER_DANGER;//[Offset: 0x64, Size: 0x4]
	float HEARING_POWER_COEF;//[Offset: 0x68, Size: 0x4]
	float FOOT_STEP_FAR_DIST;//[Offset: 0x6c, Size: 0x4]
	float GUN_FAR_DIST;//[Offset: 0x70, Size: 0x4]
	float GUN_HIT_CLOSE_DIST;//[Offset: 0x74, Size: 0x4]
	float GUN_BULLET_TRACK_FROM_ME_RADIUS;//[Offset: 0x78, Size: 0x4]
	float GUN_BULLET_TRACK_CHECK_IN_FIRE_DISTANCE;//[Offset: 0x7c, Size: 0x4]
	float COEF_FOOTSTEP_SUSPECTED_POINT_OFFSET;//[Offset: 0x80, Size: 0x4]
	float COEF_GUN_SUSPECTED_POINT_OFFSET;//[Offset: 0x84, Size: 0x4]
	float COEF_SILENT_GUN_SUSPECTED_POINT_OFFSET;//[Offset: 0x88, Size: 0x4]
	float SUSPECTED_POINT_ACCURACY_INCREASE_GAP_TIME;//[Offset: 0x8c, Size: 0x4]
	float SUSPECTED_POINT_ACCURACY_DAMPING_GAP_TIME;//[Offset: 0x90, Size: 0x4]
	int SUSPECTED_POINT_ACCURACY_MAX_NUM;//[Offset: 0x94, Size: 0x4]
	float SUSPECTED_POINT_POS_UPDATE_INTERVAL;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: AIPropertyLayProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	float DELTA_LAY_CHECK;//[Offset: 0x30, Size: 0x4]
	float DELTA_GETUP;//[Offset: 0x34, Size: 0x4]
	float DELTA_AFTER_GETUP;//[Offset: 0x38, Size: 0x4]
	float DIST_ENEMY_CAN_LAY;//[Offset: 0x3c, Size: 0x4]
	float DIST_ENEMY_CAN_LAY_SQRT;//[Offset: 0x40, Size: 0x4]
	float LAY_AIM;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: AIPropertyLookProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	enum SIGHT_PRIORITY;//[Offset: 0x30, Size: 0x1]
	float VISIBLE_ANG_NORMAL;//[Offset: 0x34, Size: 0x4]
	float NORMAL_VISION_RADIUS;//[Offset: 0x38, Size: 0x4]
	float NORMAL_VISION_RADIUS_LOST;//[Offset: 0x3c, Size: 0x4]
	float FOG_DENSITY_AFFECT_LIMIT;//[Offset: 0x40, Size: 0x4]
	CurveVector* FOG_VISION_CURVE;//[Offset: 0x48, Size: 0x8]
	float FOG_DELAY_SEE_TIME_MAX;//[Offset: 0x50, Size: 0x4]
	float FOG_SHOT_IN_TIME_CAN_IGNORE_FOGVISION;//[Offset: 0x54, Size: 0x4]
	float VISIBLE_ANG_NIGHT;//[Offset: 0x58, Size: 0x4]
	float NIGHT_VISION_RADIUS;//[Offset: 0x5c, Size: 0x4]
	float NIGHT_VISION_RADIUS_LOST;//[Offset: 0x60, Size: 0x4]
	float VISIBLE_ANG_LIGHT;//[Offset: 0x64, Size: 0x4]
	float LIGHT_VISION_RADIUS;//[Offset: 0x68, Size: 0x4]
	float LIGHT_VISION_RADIUS_LOST;//[Offset: 0x6c, Size: 0x4]
	float NORMAL_VISION_COEF;//[Offset: 0x70, Size: 0x4]
	float SMOKE_SIGHT_IGNORE_DISTANCE;//[Offset: 0x74, Size: 0x4]
	float GRASS_SIGHT_IGNORE_DISTANCE;//[Offset: 0x78, Size: 0x4]
	float LANDSCAPE_GRASS_SIGHT_IGNORE_ANGLE;//[Offset: 0x7c, Size: 0x4]
	float GRASS_SIGHT_BLOCK_POWER;//[Offset: 0x80, Size: 0x4]
	float GRASS_SIGHT_BLOCK_DENSITY100;//[Offset: 0x84, Size: 0x4]
	float RAINY_SIGHT_RADIUS_MIN;//[Offset: 0x88, Size: 0x4]
	float RAINY_SIGHT_RADIUS_MAX;//[Offset: 0x8c, Size: 0x4]
	float INGORE_NOLIGHT_RADIUS;//[Offset: 0x90, Size: 0x4]
	float DIST_NORMAL_SUSPECTED_POINT_INTERVAL;//[Offset: 0x94, Size: 0x4]
	float DIST_DANGER_SUSPECTED_POINT_INTERVAL;//[Offset: 0x98, Size: 0x4]
	float FAR_DISTANCE;//[Offset: 0x9c, Size: 0x4]
	float MIDDLE_DIST;//[Offset: 0xa0, Size: 0x4]
	float CLOSE_DIST;//[Offset: 0xa4, Size: 0x4]
	float GOAL_TO_FULL_DISSAPEAR;//[Offset: 0xa8, Size: 0x4]
	float GOAL_NEED_TO_CALCULATE_FIRST_APPEAR_DISTANCE;//[Offset: 0xac, Size: 0x4]
	float GOAL_FIRST_APPEAR_CALCULATE_COEF;//[Offset: 0xb0, Size: 0x4]
	float GOAL_FIRST_APPEAR_ANGLE_CALCULATE_COEF;//[Offset: 0xb4, Size: 0x4]
	float GOAL_FIRST_APPEAR_MIN_TIME;//[Offset: 0xb8, Size: 0x4]
	float GOAL_FIRST_APPEAR_MAX_TIME;//[Offset: 0xbc, Size: 0x4]
	float TIME_CAN_SEE_ENEMY_IF_BEEN_SHOOT;//[Offset: 0xc0, Size: 0x4]
	float TIME_CAN_SEE_ENEMY_IF_FLASH_LIGHT;//[Offset: 0xc4, Size: 0x4]
	CurveFloat* FLASH_LIGHT_BURN_LOSS_SIGHT_CURVE;//[Offset: 0xc8, Size: 0x8]
	float WEAKEN_VISION_RADIUS_SCALE_WHILE_ROTATE;//[Offset: 0xd0, Size: 0x4]
	float WEAKEN_VISION_RADIUS_SCALE_MAX_WHILE_ROTATE;//[Offset: 0xd4, Size: 0x4]
	float RECOVER_VISION_RADIUS_SPEED_AFTER_WEAKEN;//[Offset: 0xd8, Size: 0x4]
	float DISTANCE_CHECK_IF_OUTSIDE_SIGHT_PIE;//[Offset: 0xdc, Size: 0x4]
	float TIME_CREATE_SUSPECTED_POINT_CHECK_IF_OUTSIDE_SIGHT_PIE;//[Offset: 0xe0, Size: 0x4]
	float INTERVAL_CHECK_IF_OUTSIDE_SIGHT_PIE;//[Offset: 0xe4, Size: 0x4]
	Vector LOOK_POSITION_OFFSET_STAND;//[Offset: 0xe8, Size: 0xc]
	Vector LOOK_POSITION_OFFSET_STAND_LLEAN;//[Offset: 0xf4, Size: 0xc]
	Vector LOOK_POSITION_OFFSET_STAND_RLEAN;//[Offset: 0x100, Size: 0xc]
	Vector LOOK_POSITION_OFFSET_CROUCH;//[Offset: 0x10c, Size: 0xc]
	Vector LOOK_POSITION_OFFSET_CROUCH_LLEAN;//[Offset: 0x118, Size: 0xc]
	Vector LOOK_POSITION_OFFSET_CROUCH_RLEAN;//[Offset: 0x124, Size: 0xc]
	Vector LOOK_POSITION_OFFSET_PRONE;//[Offset: 0x130, Size: 0xc]

--------------------------------
Class: AIPropertyMindProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	enum CALCULATE_GOAL_ENEMY_PRIORITY_INTERVAL;//[Offset: 0x30, Size: 0x1]
	float HATRED_VALUE_TO_DIST;//[Offset: 0x34, Size: 0x4]
	float SCORE_TO_DISTANCE_FOR_GOAL_ENEMY;//[Offset: 0x38, Size: 0x4]
	float TIME_OF_HIT_FOR_GOAL_ENEMY;//[Offset: 0x3c, Size: 0x4]
	float SCORE_CUT_OF_HIT_ME_FOR_GOAL_ENEMY;//[Offset: 0x40, Size: 0x4]
	float SCORE_CUT_OF_HIT_ALLY_FOR_GOAL_ENEMY;//[Offset: 0x44, Size: 0x4]
	float SCORE_CUT_OF_ZOOM_WEAPON_FOR_GOAL_ENEMY;//[Offset: 0x48, Size: 0x4]
	float CARE_TARGET_HAS_ZOOM_WEAPON_DSITANCE;//[Offset: 0x4c, Size: 0x4]
	AIMindGoalEnemyAngleMultiple[] SCORE_MULTIPLE_FACE_ANGLE_FOR_GOAL_ENEMY;//[Offset: 0x50, Size: 0x10]
	float TIME_NOT_SEE_FOR_GOAL_ENEMY;//[Offset: 0x60, Size: 0x4]
	float TIME_TO_FORGOR_ABOUT_ENEMY_SEC;//[Offset: 0x64, Size: 0x4]
	int ITEM_CHEAP_PRICE_CAN_DESTORY_WHEN_PICKUP;//[Offset: 0x68, Size: 0x4]
	float NO_REPEAT_QRE_MYSELF_AT_DISTANCE;//[Offset: 0x6c, Size: 0x4]
	float NO_REPEAT_QRE_ENEMY_AT_DISTANCE;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: AIMindGoalEnemyAngleMultiple
	float Angle;//[Offset: 0x0, Size: 0x4]
	float ScoreMultiple;//[Offset: 0x4, Size: 0x4]
	float AngleCos;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AIPropertyMoveProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	float REACH_DIST;//[Offset: 0x30, Size: 0x4]
	float Y_APPROXIMATION;//[Offset: 0x34, Size: 0x4]
	float MAX_SPRINT_DURATION;//[Offset: 0x38, Size: 0x4]
	float MIN_REQUIRED_TIME_TO_SPRINT;//[Offset: 0x3c, Size: 0x4]
	float MAX_REQUIRED_TIME_TO_RECOVER;//[Offset: 0x40, Size: 0x4]
	float RECOVER_POINT_PER_SECOND;//[Offset: 0x44, Size: 0x4]
	float MIN_ROTATE_SPEED;//[Offset: 0x48, Size: 0x4]
	bool ENABLED_USE_ROTATE_ANGLE_LIMIT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float MAX_ROTATE_ANGLE;//[Offset: 0x50, Size: 0x4]
	float ROTATE_ANGLE_INTERVAL;//[Offset: 0x54, Size: 0x4]
	float ROTATE_ANGLE_MIN_DEVIATION;//[Offset: 0x58, Size: 0x4]
	float ROTATE_ANGLE_MAX_DEVIATION;//[Offset: 0x5c, Size: 0x4]
	float CAN_MOVE_TEST_DISTANCE;//[Offset: 0x60, Size: 0x4]
	float SOUND_DIFFUSION_LEVEL_FACTOR;//[Offset: 0x64, Size: 0x4]
	float SOUND_DIFFUSION_MAX_DISTANCE_FACTOR;//[Offset: 0x68, Size: 0x4]
	float WEAPON_SHOOTING_MOVING_SCALE;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: AIPropertyShootProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	CurveFloat* UA_Curve_ShootAccuracyByRecoil;//[Offset: 0x30, Size: 0x8]
	float UA_RECOIL_OFFSET_XY_CLAMP;//[Offset: 0x38, Size: 0x4]
	float UA_RECOIL_OFFSET_Z_CLAMP;//[Offset: 0x3c, Size: 0x4]
	float UA_MAX_RECOIL_TIME;//[Offset: 0x40, Size: 0x4]
	float UA_SHOOT_POSITION_ZOFFSET;//[Offset: 0x44, Size: 0x4]
	Vector UA_SHOOT_POSITION_OFFSET_STAND;//[Offset: 0x48, Size: 0xc]
	Vector UA_SHOOT_POSITION_OFFSET_STAND_LLEAN;//[Offset: 0x54, Size: 0xc]
	Vector UA_SHOOT_POSITION_OFFSET_STAND_RLEAN;//[Offset: 0x60, Size: 0xc]
	Vector UA_SHOOT_POSITION_OFFSET_CROUCH;//[Offset: 0x6c, Size: 0xc]
	Vector UA_SHOOT_POSITION_OFFSET_CROUCH_LLEAN;//[Offset: 0x78, Size: 0xc]
	Vector UA_SHOOT_POSITION_OFFSET_CROUCH_RLEAN;//[Offset: 0x84, Size: 0xc]
	Vector UA_SHOOT_POSITION_OFFSET_PRONE;//[Offset: 0x90, Size: 0xc]
	float RECOIL_TIME_NORMALIZE;//[Offset: 0x9c, Size: 0x4]
	float RECOIL_PER_METER;//[Offset: 0xa0, Size: 0x4]
	float MAX_RECOIL_PER_METER;//[Offset: 0xa4, Size: 0x4]
	float HORIZONT_RECOIL_COEF;//[Offset: 0xa8, Size: 0x4]
	int HORIZONT_RECOIL_STEP_SZIE_NUM;//[Offset: 0xac, Size: 0x4]
	float UA_WEAPON_RECOIL_POWER;//[Offset: 0xb0, Size: 0x4]
	float UA_XY_RECOIL_RECOVER_POWER_MIN;//[Offset: 0xb4, Size: 0x4]
	float UA_XY_RECOIL_RECOVER_POWER_MAX;//[Offset: 0xb8, Size: 0x4]
	float UA_Z_RECOIL_RECOVER_POWER_MIN;//[Offset: 0xbc, Size: 0x4]
	float UA_Z_RECOIL_RECOVER_POWER_MAX;//[Offset: 0xc0, Size: 0x4]
	bool ENABLED_TRANSFTER_HIT_BETTER_PART;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	int COUNT_IF_HIT_HEAD_TRANSFER_TO_OTHER;//[Offset: 0xc8, Size: 0x4]
	int COUNT_IF_HIT_CHEST_TRANSFER_TO_OTHER;//[Offset: 0xcc, Size: 0x4]
	float INSTANT_BULLET_VAILD_DISTANCE;//[Offset: 0xd0, Size: 0x4]
	float TRY_LEAN_RAY_CHECK_DISTANCE;//[Offset: 0xd4, Size: 0x4]
	float TRY_LEAN_RAY_CHECK_DISTANCE_SQR;//[Offset: 0xd8, Size: 0x4]
	float STAND_SHOOT_Z_LOCATION;//[Offset: 0xdc, Size: 0x4]
	float CROUCH_HEAD_TOP_Z_LOCATION;//[Offset: 0xe0, Size: 0x4]
	float FACE_TO_TARGET_ANGLE_LIMIT_CAN_FIRE;//[Offset: 0xe4, Size: 0x4]
	float HIT_INTERVAL_RATE;//[Offset: 0xe8, Size: 0x4]
	int HIT_INTERVAL_INCREASE_BY_SHOOT;//[Offset: 0xec, Size: 0x4]
	int HIT_INTERVAL_COUNT_BASE;//[Offset: 0xf0, Size: 0x4]
	bool ENABLED_HIT_INTERVAL_BY_GROUP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]

--------------------------------
Class: AIPropertyWeaponProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	float WeaponBaseSpread;//[Offset: 0x30, Size: 0x4]
	float WeaponBaseRecoil;//[Offset: 0x34, Size: 0x4]
	int RecalcMustTimeMin;//[Offset: 0x38, Size: 0x4]
	int RecalcMustTimeMax;//[Offset: 0x3c, Size: 0x4]
	float ReloadMinPercentage;//[Offset: 0x40, Size: 0x4]
	float ReloadMaxPercentage;//[Offset: 0x44, Size: 0x4]
	float MultiShootShakePower;//[Offset: 0x48, Size: 0x4]
	float MinFillBulletTime;//[Offset: 0x4c, Size: 0x4]
	int64 MeleeWeaponID;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: NPCAIFindAmbushAgainstPointAsyncTask.NPCAIAsyncTaskBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x40, Size: 0x10]
	delegate OnFail;//[Offset: 0x50, Size: 0x10]
	Vector PointStart;//[Offset: 0x60, Size: 0xc]
	Vector PointToGo;//[Offset: 0x6c, Size: 0xc]
	void ExecuteTask();// 0x53c8e3fee041
	NPCAIFindAmbushAgainstPointAsyncTask* AIFindAmbushAgainstPoint(Actor* Pawn, out const Vector PointStart, out const Vector PointToGo);// 0x53c7e3fee041

--------------------------------
Class: NPCAIFindPathByKeyRouteAsyncTask.NPCAIAsyncTaskBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x40, Size: 0x10]
	delegate OnFail;//[Offset: 0x50, Size: 0x10]
	KeyRoutePointData FromPoint;//[Offset: 0x60, Size: 0x60]
	KeyRoutePointData ToPoint;//[Offset: 0xc0, Size: 0x60]
	enum QueryType;//[Offset: 0x120, Size: 0x1]
	void ExecuteTask();// 0x53cae3fee041
	NPCAIFindPathByKeyRouteAsyncTask* AIFindPathByKeyRoute(Actor* Pawn, out const KeyRoutePointData FromPoint, out const KeyRoutePointData ToPoint, enum QueryType);// 0x53c9e3fee041

--------------------------------
Class: NPCAIGameStateDebugInterface.Interface.Object

--------------------------------
Class: NPCAIGlobalManagerInterface.Interface.Object
	void NotifySceneEvent(AISceneEventMessage* SceneEvent, out const enum EventState, Actor* AIPawn);// 0x53d6e3fee041
	TacticSystemActor* GetTacticSystemActor();// 0x53d5e3fee041
	NPCAIPerceptionDynamicActor* GetPerceptionDynamicActor();// 0x53d4e3fee041
	NPCAIPerceptionAssistActor* GetPerceptionAssistActor();// 0x53d3e3fee041
	float GetGrenadeMinLifeTime();// 0x53d2e3fee041
	float GetCurrentFogDensity();// 0x53d1e3fee041
	CoverSystemActor* GetCoverSystemActor();// 0x53d0e3fee041
	AISGDoorManager* GetAISGDoorManager();// 0x53cfe3fee041
	AISceneEventsTriggerManager* GetAISceneEventsTriggerManager();// 0x53cee3fee041
	DataTable* GetAISceneEventDataTable();// 0x53cde3fee041
	NPCAIGlobalSharedInfo* GetAIGlobalShareInfo();// 0x53cce3fee041
	void FindAllSGDoorsInWorld(out Actor*[] DoorsInWorld);// 0x53cbe3fee041

--------------------------------
Class: NPCAIGroupAttackCloseRequest.NPCAIGroupBaseRequest.Object

--------------------------------
Class: NPCAIGroupRequestComponent.NPCAISubSystemComponent.ActorComponent.Object
	bool bIsLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	class NPCAIGroupWarnPlayerRequest* ClassOfWarnPlayerRequest;//[Offset: 0xd0, Size: 0x8]
	int LastCompletedRequestType;//[Offset: 0xd8, Size: 0x4]
	delegate OnRequestCompleted;//[Offset: 0xe0, Size: 0x10]
	delegate OnRequestGiveUp;//[Offset: 0xf0, Size: 0x10]
	float NextSearchRequestTime;//[Offset: 0x100, Size: 0x4]
	NPCAIGroupBaseRequest* CurrentRequest;//[Offset: 0x108, Size: 0x8]
	int[] CompletedRequestTypeList;//[Offset: 0x110, Size: 0x10]
	NPCAIGroupRequestController* GpRequestController;//[Offset: 0x120, Size: 0x8]
	void Update();// 0x540fe3fee041
	bool TryToFindRequest();// 0x540ee3fee041
	void TryGiveUpCurrentRequest();// 0x540de3fee041
	void TickCheckCurrentRequestIsValid();// 0x540ce3fee041
	void SetCurrentRequestCompleted();// 0x540be3fee041
	void SetCurrentRequest(NPCAIGroupBaseRequest* InRequest);// 0x540ae3fee041
	bool HasCompletedRequestInPast(int InRequestType);// 0x5409e3fee041
	NPCAIGroupRequestController* GetGroupRequestController();// 0x5408e3fee041
	bool CheckCanReplaceHighPriorityRequest(NPCAIGroupBaseRequest* InNewRequest);// 0x5407e3fee041
	bool AcceptRequest(NPCAIGroupBaseRequest* InRequest);// 0x5406e3fee041

--------------------------------
Class: NPCAIHNavActor.Actor.Object
	HNavSettings Settings;//[Offset: 0x2e0, Size: 0x3c]
	HNavGraph[] Graphs;//[Offset: 0x320, Size: 0x10]
	int MinimumPartitionCount;//[Offset: 0x330, Size: 0x4]
	byte[] PortalNodeFlags;//[Offset: 0x338, Size: 0x10]
	HNavSearchInfo SearchedInfo;//[Offset: 0x408, Size: 0x60]
	bool bUseDefaultPathfinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 0x1]
	bool bNewMaxPortalAdjacency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46d, Size: 0x1]

--------------------------------
Class: HNavSettings
	bool bAutoBuildAfterNavigationGenerationFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bBuildIntermediateGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bRemoveIntermediateGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bIntraPathOnlyInSelfNode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bCombineMultiEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bEnableEdgeWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bBreakNavLinkConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	int MaxGraphLevel;//[Offset: 0x8, Size: 0x4]
	int PartitionSize;//[Offset: 0xc, Size: 0x4]
	int ForceBuildForTopK;//[Offset: 0x10, Size: 0x4]
	int MinNodeCountToBuild;//[Offset: 0x14, Size: 0x4]
	int MaxSearchNode;//[Offset: 0x18, Size: 0x4]
	MetisOptions MetisOptions;//[Offset: 0x1c, Size: 0x20]

--------------------------------
Class: MetisOptions
	bool bUseDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum ObjectiveType;//[Offset: 0x4, Size: 0x4]
	enum CoarsenType;//[Offset: 0x8, Size: 0x4]
	enum InitialPartitioningType;//[Offset: 0xc, Size: 0x4]
	enum RifinementType;//[Offset: 0x10, Size: 0x4]
	int NCuts;//[Offset: 0x14, Size: 0x4]
	int IterateTimes;//[Offset: 0x18, Size: 0x4]
	bool bMinimizeMaximumConnectivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bNo2Hop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bForcesContiguousPartitions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]

--------------------------------
Class: HNavGraph
	int Level;//[Offset: 0x0, Size: 0x4]
	int NodeCount;//[Offset: 0x4, Size: 0x4]
	bool bIntermediate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	int[] ParentIndices;//[Offset: 0x10, Size: 0x10]
	int[] ChildIndexOffsets;//[Offset: 0x40, Size: 0x10]
	int[] ChildIndices;//[Offset: 0x50, Size: 0x10]
	int[] PortalEdgeOffsets;//[Offset: 0x60, Size: 0x10]
	PortalEdge[] PortalEdges;//[Offset: 0x70, Size: 0x10]
	int[] IntraPathOffsets;//[Offset: 0x80, Size: 0x10]
	IntraPath[] IntraPaths;//[Offset: 0x90, Size: 0x10]
	int[] IntraPathSourceIndexOffsets;//[Offset: 0xa0, Size: 0x10]
	int[] IntraPathSourceIndices;//[Offset: 0xb0, Size: 0x10]
	int[] IntraPathTargetIndexOffsets;//[Offset: 0xc0, Size: 0x10]
	uint64[] IntraPathCounts;//[Offset: 0xe0, Size: 0x10]
	int[] IntraPathPolyRefOffsets;//[Offset: 0xf0, Size: 0x10]
	uint64[] IntraPathPolyRefs;//[Offset: 0x100, Size: 0x10]
	float[] IntraPathCosts;//[Offset: 0x110, Size: 0x10]
	float[] IntraPathLengths;//[Offset: 0x120, Size: 0x10]

--------------------------------
Class: PortalEdge
	uint64 PackedData;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: IntraPath
	uint64 PackedData;//[Offset: 0x0, Size: 0x8]
	uint64[] Nodes;//[Offset: 0x8, Size: 0x10]
	float Length;//[Offset: 0x18, Size: 0x4]
	float Cost;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: HNavSearchInfo

--------------------------------
Class: NPCAILaunchPad.Actor.Object
	SceneComponent* Root;//[Offset: 0x2e0, Size: 0x8]
	StaticMeshComponent* Launchpad;//[Offset: 0x2e8, Size: 0x8]
	SphereComponent* TriggerVolume;//[Offset: 0x2f0, Size: 0x8]
	NavLinkComponent* NavLink;//[Offset: 0x2f8, Size: 0x8]
	Vector Target;//[Offset: 0x300, Size: 0xc]
	Character* LaunchedCharacter;//[Offset: 0x310, Size: 0x8]
	void OnTriggerBeginOverlap(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5437e3fee041
	bool CanTriggerLaunch(Character* Other);// 0x5436e3fee041
	Vector CalculateLaunchVelocity(Actor* LaunchedActor);// 0x5435e3fee041
	void BP_LaunchCharacter(Character* Character);// 0x5434e3fee041

--------------------------------
Class: NavLinkComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NavigationLink[] Links;//[Offset: 0x5b8, Size: 0x10]

--------------------------------
Class: AIModifierAITypeProfile.NPCAIModifierProfile.NPCAIPropertyProfileBase.Object
	enum AIMainType;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AIModifierArmorProfile.NPCAIModifierProfile.NPCAIPropertyProfileBase.Object
	AIArmorAttributeModifier HeadArmor;//[Offset: 0x30, Size: 0x14]
	AIArmorAttributeModifier BodyArmor;//[Offset: 0x44, Size: 0x14]

--------------------------------
Class: AIArmorAttributeModifier
	float DurabilityConsumeScale_Blocked;//[Offset: 0x0, Size: 0x4]
	float DurabilityConsumeScale_Penetrated;//[Offset: 0x4, Size: 0x4]
	float AntiPenetrationFactor;//[Offset: 0x8, Size: 0x4]
	float DamageScaleForPenetration;//[Offset: 0xc, Size: 0x4]
	float DamageScaleForBlock;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: NPCAIModifierComponent_Armor.NPCAIModifierComponent.NPCAIProfileBaseComponent.Object
	AIArmorAttributeModifier GetHeadArmor();// 0x5465e3fee041
	AIArmorAttributeModifier GetBodyArmor();// 0x5464e3fee041

--------------------------------
Class: AIModifierDamageProfile.NPCAIModifierProfile.NPCAIPropertyProfileBase.Object
	float DamageScale;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: NPCAIModifierComponent_Damage.NPCAIModifierComponent.NPCAIProfileBaseComponent.Object
	float GetDamageScale();// 0x5466e3fee041

--------------------------------
Class: NPCAINavSubsystemBase.WorldSubsystem.Subsystem.Object
	bool IsNavTileDataPrepared(const Object* WorldContextObject);// 0x54c6e3fee041
	bool IsLocationOnNavLink(const Object* WorldContextObject, out const Vector Location);// 0x54c5e3fee041
	NPCAINavLinkProxy* GetNavLinkById(const Object* WorldContextObject, const int LinkID);// 0x54c4e3fee041

--------------------------------
Class: NPCAINavConnectivitySystem.NPCAINavSubsystemBase.WorldSubsystem.Subsystem.Object
	bool GetNavLinkCylinderLocation(const NPCAINavLinkProxy* NavLink, const int RegionIndex, out Vector OutLocation);// 0x54cae3fee041
	int GetLinkUsageCount(out const Vector SourceLocation, out const Vector TargetLocation, out int OutSourceRegionIndex, out int OutTargetRegionIndex, out int OutSourceRegionSize, out int OutTargetRegionSize, out enum OutStatus);// 0x54c9e3fee041
	NPCAINavLinkProxy*[] GetDoorNavLinksInRegion(const int RegionIndex);// 0x54c8e3fee041
	NPCAINavLinkProxy*[] GetDoorNavLinksBetweenAdjacentRegions(const int SourceRegionIndex, const int TargetRegionIndex);// 0x54c7e3fee041

--------------------------------
Class: NPCAINavDebugSystem.NPCAINavSubsystemBase.WorldSubsystem.Subsystem.Object
	void PrintNavMeshPolygonSlope(const Object* WorldContextObject, out const Vector Location);// 0x54d1e3fee041
	void PlaceActorsOnNodes(const Object* WorldContextObject, FString NodeIndicesString, bool bUseNodeIndexAsPolyRef, out Actor*[] OutActors);// 0x54d0e3fee041
	void IsLocationOnNavLinkDebug(const Object* WorldContextObject, out const Vector Location);// 0x54cfe3fee041
	void GetLinkUsageCountDebug(const Object* WorldContextObject, out const Vector SourceLocation, out const Vector TargetLocation);// 0x54cee3fee041
	void GetDoorNavLinksInRegionDebug(const Object* WorldContextObject, out const Vector SourceLocation);// 0x54cde3fee041
	void DestroyPlacedActors(out Actor*[] OutActors);// 0x54cce3fee041
	void CalculateBoundaryEdgeLength(const Object* WorldContextObject);// 0x54cbe3fee041

--------------------------------
Class: NPCAINavExperimentSystem.NPCAINavSubsystemBase.WorldSubsystem.Subsystem.Object
	bool[] TestRaycastToNavSkeletonPoints(const Object* WorldContextObject, out const Vector StartLocation, out const int[] PointIDs);// 0x54d9e3fee041
	bool[] TestNavSkeletonFloodFrom(const Object* WorldContextObject, out const Vector StartLocation, float MaxPathLength);// 0x54d8e3fee041
	void TestNavRaycast(const Object* WorldContextObject);// 0x54d7e3fee041
	void TestMoveDirectly(const Object* WorldContextObject);// 0x54d6e3fee041
	void TestMoveAlongSurface(const Object* WorldContextObject);// 0x54d5e3fee041
	void TestLimitMoveInRegion(const Object* WorldContextObject);// 0x54d4e3fee041
	void TestArrangeStandPositions(const Object* WorldContextObject);// 0x54d3e3fee041
	void TestAIMoveDirectly(const Object* WorldContextObject);// 0x54d2e3fee041

--------------------------------
Class: NPCAINavigationStatics.BlueprintFunctionLibrary.Object
	void PathNodesToNeighborPathNodes(const Object* WorldContext, out const int[] TargetPathNodes, int Step, out int[] Result);// 0x54dbe3fee041
	void FindCloserToMePoints(const Object* WorldContext, out const int[] PathNodeIds, out const Vector MyLocation, out const Vector EnemyLocation, out int[] Result);// 0x54dae3fee041

--------------------------------
Class: NavigationSystemV1.NavigationSystemBase.Object
	NavigationData* MainNavData;//[Offset: 0x28, Size: 0x8]
	NavigationData* AbstractNavData;//[Offset: 0x30, Size: 0x8]
	FName DefaultAgentName;//[Offset: 0x38, Size: 0x8]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x40, Size: 0x28]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bShouldDiscardSubLevelNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bTickWhilePaused;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1]
	float NavMeshQueryFindPathTimeLimit;//[Offset: 0x6c, Size: 0x4]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	float ActiveTilesUpdateInterval;//[Offset: 0x74, Size: 0x4]
	enum DataGatheringMode;//[Offset: 0x78, Size: 0x1]
	float DirtyAreaWarningSizeThreshold;//[Offset: 0x7c, Size: 0x4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x80, Size: 0x10]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x90, Size: 0x4]
	NavigationData*[] NavDataSet;//[Offset: 0x98, Size: 0x10]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0xa8, Size: 0x10]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xc8, Size: 0x10]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xd8, Size: 0x10]
	delegate OnNavigationGenerationBeginDelegate;//[Offset: 0xe8, Size: 0x10]
	enum OperationMode;//[Offset: 0x1d4, Size: 0x1]
	float DirtyAreasUpdateFreq;//[Offset: 0x15d4, Size: 0x4]
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x54f3e3fee041
	void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x54f2e3fee041
	void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x54f1e3fee041
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x54f0e3fee041
	void SetGeometryGatheringMode(enum NewMode);// 0x54efe3fee041
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x54eee3fee041
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x54ede3fee041
	Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x54ece3fee041
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x54ebe3fee041
	bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x54eae3fee041
	bool K2_ReplaceAreaInOctreeData(const Object* Object, class NavArea OldArea, class NavArea NewArea);// 0x54e9e3fee041
	bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x54e8e3fee041
	bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x54e7e3fee041
	bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x54e6e3fee041
	bool K2_GetRandomLocationInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x54e5e3fee041
	bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x54e4e3fee041
	bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x54e3e3fee041
	Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x54e2e3fee041
	Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x54e1e3fee041
	byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x54e0e3fee041
	byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x54dfe3fee041
	NavigationSystemV1* GetNavigationSystem(Object* WorldContextObject);// 0x54dee3fee041
	NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x54dde3fee041
	NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x54dce3fee041

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x318, Size: 0x4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x28, Size: 0x10]
	Vector[] PathPoints;//[Offset: 0x38, Size: 0x10]
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 0x1]
	bool IsValid();// 0x71ece3fee041
	bool IsStringPulled();// 0x71ebe3fee041
	bool IsPartial();// 0x71eae3fee041
	float GetPathLength();// 0x71e9e3fee041
	float GetPathCost();// 0x71e8e3fee041
	FString GetDebugString();// 0x71e7e3fee041
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x71e6e3fee041
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x71e5e3fee041

--------------------------------
Class: NPCAINavigationSystem.NavigationSystemV1.NavigationSystemBase.Object

--------------------------------
Class: NavigationSystemModuleConfig.NavigationSystemConfig.Object
	bool bStrictlyStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d, Size: 0x1]
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d, Size: 0x1]
	bool bAutoSpawnMissingNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d, Size: 0x1]
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4d, Size: 0x1]

--------------------------------
Class: NPCAINavigationSystemConfig.NavigationSystemModuleConfig.NavigationSystemConfig.Object

--------------------------------
Class: NPCAINavMeshManager.Actor.Object
	NavSkeletonBuildSettings SkeletonBuildSettings;//[Offset: 0x478, Size: 0x6c]
	NavSkeletonPoint[] NavSkeletonPoints;//[Offset: 0x4e8, Size: 0x10]
	NavSkeletonData NavSkeletonData;//[Offset: 0x4f8, Size: 0x10]
	void PrintSkeletonMemoryUsage();// 0x54f7e3fee041
	void PrintSkeletonInfo();// 0x54f6e3fee041
	void PrintSkeletonDistanceStat();// 0x54f5e3fee041
	void PrintSkeletonDegreeStat();// 0x54f4e3fee041

--------------------------------
Class: NavSkeletonBuildSettings
	Vector NavQueryExtent;//[Offset: 0x0, Size: 0xc]
	float SampleGap;//[Offset: 0xc, Size: 0x4]
	float DeltaLength;//[Offset: 0x10, Size: 0x4]
	int GradientNeighbourRadius;//[Offset: 0x14, Size: 0x4]
	float DivergenceFilterThreshold;//[Offset: 0x18, Size: 0x4]
	float DivergenceNeighbourRadius;//[Offset: 0x1c, Size: 0x4]
	float CoarseCoverageNeighbourRadius;//[Offset: 0x20, Size: 0x4]
	float RefinedCoverageNeighbourRadius;//[Offset: 0x24, Size: 0x4]
	float PolylineSimplificationDistanceThreshold;//[Offset: 0x28, Size: 0x4]
	bool bRemoveUnreachablePoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bHintProjection2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bUseGeometryProject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool bAddRegionConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	bool bEnableCollapseShortPolylines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bEnableParallelGenerateRawPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool bEnableParallelCalculateGradient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	bool bEnableParallelPrepareSamplePoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1]
	bool bEnableParallelCalculateDivergence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bEnableParallelCalculateProtection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bEnableParallelCalculateVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	bool bEnableParallelCalculateThrowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]
	bool bRemoveFilteredPointsAfterSetupAdvanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bEnableRefineCoverage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	enum DivergenceMethod;//[Offset: 0x3e, Size: 0x1]
	float PolylineLengthLowerBound;//[Offset: 0x40, Size: 0x4]
	float RegionConnectionDistanceTolerance;//[Offset: 0x44, Size: 0x4]
	float VisiblityQueryZExtent;//[Offset: 0x48, Size: 0x4]
	float VisiblityTraceZOffset;//[Offset: 0x4c, Size: 0x4]
	float VisiblityMaxRange;//[Offset: 0x50, Size: 0x4]
	float ProtectionTraceAngleStep;//[Offset: 0x54, Size: 0x4]
	float ProtectionTraceZOffset;//[Offset: 0x58, Size: 0x4]
	float ProtectionTraceMaxRange;//[Offset: 0x5c, Size: 0x4]
	float EndpointProtectionLowerBound;//[Offset: 0x60, Size: 0x4]
	float ThrowingInitialSpeed;//[Offset: 0x64, Size: 0x4]
	float ThrowingMaxRange;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: NavSkeletonPoint.ActionPointData
	float Radius;//[Offset: 0x10, Size: 0x4]
	uint64 AtPolyRef;//[Offset: 0x18, Size: 0x8]
	int LinkID;//[Offset: 0x20, Size: 0x4]
	Vector ProtectionDirection;//[Offset: 0x24, Size: 0xc]
	float ProtectionHalfAngle;//[Offset: 0x30, Size: 0x4]
	int[] NeighbourIndices;//[Offset: 0x38, Size: 0x10]
	int[] VisibleIndices;//[Offset: 0x48, Size: 0x10]
	int[] ThrowableIndices;//[Offset: 0x58, Size: 0x10]
	int[] FriendIndices;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: NavSkeletonData
	NavSkeletonPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NPCAITestingRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NPCAINavMeshRenderingComponent.NPCAITestingRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NPCAITestingActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2e0, Size: 0x8]
	NavAgentProperties NavAgentProps;//[Offset: 0x2e8, Size: 0x30]

--------------------------------
Class: NPCAINavMeshTestingActor.NPCAITestingActor.Actor.Object
	float ToWallCylinderHeight;//[Offset: 0x318, Size: 0x4]
	float RadiusMultiplier;//[Offset: 0x31c, Size: 0x4]
	float DistanceHeightMultiplier;//[Offset: 0x320, Size: 0x4]
	float DistanceLineThickness;//[Offset: 0x324, Size: 0x4]
	float ShowGradientThreshold;//[Offset: 0x328, Size: 0x4]
	float GradientZOffset;//[Offset: 0x32c, Size: 0x4]
	float UpdateGradientFlowAnimInterval;//[Offset: 0x330, Size: 0x4]
	float ShowDivergenceThreshold;//[Offset: 0x338, Size: 0x4]
	float DivergenceHeightMultiplier;//[Offset: 0x33c, Size: 0x4]
	float DivergenceLineThickness;//[Offset: 0x340, Size: 0x4]
	float ConnectionLineThickness;//[Offset: 0x344, Size: 0x4]
	float SimlifiedConnectionZOffset;//[Offset: 0x348, Size: 0x4]
	int ShowCoverageLevel;//[Offset: 0x34c, Size: 0x4]
	bool bEnableRefreshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1]
	bool bDrawSamplePoints;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x350, Size: 0x1]
	bool bDrawDistanceMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x350, Size: 0x1]
	bool bDrawGradient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x350, Size: 0x1]
	bool bShowAllGradient;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x350, Size: 0x1]
	bool bDrawGradientFlowAnim;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x350, Size: 0x1]
	bool bDrawCoverage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x350, Size: 0x1]
	bool bAlwaysShowMainCoverage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x350, Size: 0x1]
	bool bDrawOriginalConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x351, Size: 0x1]
	bool bDrawSimplifiedConnection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x351, Size: 0x1]
	bool bOnlyDrawMainSimplifiedConnection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x351, Size: 0x1]
	int NearestMainCoverageSampleIndex;//[Offset: 0x354, Size: 0x4]
	int PolyMeshCount;//[Offset: 0x358, Size: 0x4]
	int PolylineCount;//[Offset: 0x35c, Size: 0x4]
	int CurrentTileIndex;//[Offset: 0x360, Size: 0x4]
	Vector ClosestPointOnWall;//[Offset: 0x364, Size: 0xc]
	int NeighbourWallEdgeCount;//[Offset: 0x370, Size: 0x4]
	float DistanceToWall;//[Offset: 0x374, Size: 0x4]
	Vector4 SamplePointCountStat;//[Offset: 0x380, Size: 0x10]
	Vector4 DistanceStat;//[Offset: 0x390, Size: 0x10]
	Vector4 DivergenceStat;//[Offset: 0x3a0, Size: 0x10]
	Vector4 FilteredDistanceStat;//[Offset: 0x3b0, Size: 0x10]
	Vector4 FilteredDivergenceStat;//[Offset: 0x3c0, Size: 0x10]
	int CoverageStats;//[Offset: 0x3d0, Size: 0x4]
	int ConnectionStats;//[Offset: 0x3e4, Size: 0x4]
	float MaxPathLength;//[Offset: 0x418, Size: 0x4]
	NavSkeletonBuildSettings BuildSettings;//[Offset: 0x41c, Size: 0x6c]
	bool bDrawPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x488, Size: 0x1]
	bool bDrawTextInfo;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x488, Size: 0x1]
	bool bDrawProtection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x488, Size: 0x1]
	bool bDrawNearestPoint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x488, Size: 0x1]
	bool bDrawPointNeighbours;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x488, Size: 0x1]
	bool bDrawFindResultPoints;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x488, Size: 0x1]
	NavSkeletonPoint NavSkeletonPoint;//[Offset: 0x490, Size: 0x78]
	NavSkeletonPoint TargetNavSkeletonPoint;//[Offset: 0x508, Size: 0x78]
	int[] FoundPointIDs;//[Offset: 0x580, Size: 0x10]
	float CostLimit;//[Offset: 0x590, Size: 0x4]
	float HalfAngleOfView;//[Offset: 0x594, Size: 0x4]
	Actor* TargetPointActor;//[Offset: 0x598, Size: 0x8]

--------------------------------
Class: NPCAINavRuntimeSystem.NPCAINavSubsystemBase.WorldSubsystem.Subsystem.Object
	<Object*,NavPolyRefArray> BurningPolyRefs;//[Offset: 0x58, Size: 0x50]
	<Object*,NavPolyRefArray> TearGasPolyRefs;//[Offset: 0xa8, Size: 0x50]
	<Volume*,NavPolyRefArray> AvoidPolyRefs;//[Offset: 0xf8, Size: 0x50]
	void SetupTearGasAreas(Object* TearGasObject, out const Vector CenterPos, out const Vector EffectExtent, bool bActiving);// 0x54fde3fee041
	bool SetupRegionWhereNavLinksNeedDisable(Actor* AIPawnOrController, const int RegionIndex);// 0x54fce3fee041
	void SetupBurningAreas(Object* MolotovObject, out const Vector[] FlameCenters, float EffectRadius, bool bBurning);// 0x54fbe3fee041
	void SetupAvoidAreas(AIController* AIController, out const Volume*[] Volumes, bool bAvoid);// 0x54fae3fee041
	bool IsAreaBombing(out const Vector Location, bool bCheckMolotov, bool bCheckTearGas);// 0x54f9e3fee041
	AICandidateStandPosition[] ArrangeStandPositions(const Object* WorldContextObject, out const Vector Location, const float MaxRange, const float MinGap);// 0x54f8e3fee041

--------------------------------
Class: NavPolyRefArray

--------------------------------
Class: AICandidateStandPosition
	float PathLength;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: NPCAINavSkeletonSystem.NPCAINavSubsystemBase.WorldSubsystem.Subsystem.Object
	NavSkeletonGraphAStarFilter SetupTryBestToIncludePointIDs(out NavSkeletonGraphAStarFilter Filter, out const int[] PointIDs);// 0x5511e3fee041
	int[] QueryVisiblePointIDs(out const Vector Location, out const Vector Direction, float HalfAngle, float MaxDistance);// 0x5510e3fee041
	int[] QueryThrowablePointIDs(int TargetPointID);// 0x550fe3fee041
	int[] QueryProtectablePointIDs(out const Vector Location, float MaxPathLength, int KeepTopK);// 0x550ee3fee041
	int[] QueryPointIDs(out const Vector Location, float QueryLength);// 0x550de3fee041
	int[] QueryNearestPointIDs(out const Vector Location, float MaxPathLength);// 0x550ce3fee041
	int QueryNearestPointID(out const Vector Location, float MaxPathLength);// 0x550be3fee041
	int QueryNearestDoorPointID(out const Vector Location, float MaxPathLength);// 0x550ae3fee041
	int[] QueryBranchyPointIDs(out const Vector Location, float MaxPathLength, int KeepTopK);// 0x5509e3fee041
	NavSkeletonPoint GetPointData(int PointID);// 0x5508e3fee041
	NPCAINavSkeletonSystem* GetNavSkeletonSystem(const Object* WorldContextObject);// 0x5507e3fee041
	int[] FloodFromPointID(int PointID, out const NavSkeletonGraphAStarFilter Filter);// 0x5506e3fee041
	NavSkeletonGraphFindResult FindStepBackPointIDs(int PointID, out const int[] CandidatePointIDs, out NavSkeletonGraphAStarFilter Filter);// 0x5505e3fee041
	NavSkeletonGraphFindResult FindPath(int StartPointID, int EndPointID, out const NavSkeletonGraphAStarFilter Filter);// 0x5504e3fee041
	NavSkeletonGraphFindResult FindOutsidePointIDs(int PointID, out const NavSkeletonGraphAStarFilter Filter);// 0x5503e3fee041
	NavSkeletonGraphAStarFilter ClearUnreachablePointIDs(out NavSkeletonGraphAStarFilter Filter);// 0x5502e3fee041
	NavSkeletonGraphResultNode[] CalculatePathLengthToEachPoint(out const int[] PointIDs, out const Vector Location, float MaxPathLength);// 0x5501e3fee041
	void BuildSkeleton(const Object* WorldContextObject);// 0x5500e3fee041
	NavSkeletonGraphAStarFilter AddUnreachablePointIDs(out NavSkeletonGraphAStarFilter Filter, out const int[] PointIDs);// 0x54ffe3fee041
	NavSkeletonGraphAStarFilter AddUnreachablePointID(out NavSkeletonGraphAStarFilter Filter, int PointID);// 0x54fee3fee041

--------------------------------
Class: NavSkeletonGraphAStarFilter
	Object* WeakOwner;//[Offset: 0x0, Size: 0x8]
	int MaxSearchNodes;//[Offset: 0x8, Size: 0x4]
	float CostLimit;//[Offset: 0xc, Size: 0x4]
	<int> UnreachablePointIDs;//[Offset: 0x10, Size: 0x50]
	bool bOnTryBestToIncludePointIDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	<int> TryBestToIncludePointIDs;//[Offset: 0x68, Size: 0x50]

--------------------------------
Class: NavSkeletonGraphFindResult
	enum Status;//[Offset: 0x0, Size: 0x1]
	NavSkeletonGraphResultNode[] Nodes;//[Offset: 0x8, Size: 0x10]
	int[] DesiredNodeIndices;//[Offset: 0x18, Size: 0x10]
	int[] DesiredPointIDs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: NavSkeletonGraphResultNode
	int PointID;//[Offset: 0x0, Size: 0x4]
	int ParentID;//[Offset: 0x4, Size: 0x4]
	float PathLength;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NPCAINavSteepZoneSystem.NPCAINavSubsystemBase.WorldSubsystem.Subsystem.Object
	void RunDeleter(out const SteepZoneDeleteSettings Settings);// 0x5512e3fee041

--------------------------------
Class: SteepZoneDeleteSettings
	Vector NavQueryExtent;//[Offset: 0x0, Size: 0xc]
	bool bHintProjection2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float SampleSpacing;//[Offset: 0x10, Size: 0x4]
	float TraceRadius;//[Offset: 0x14, Size: 0x4]
	float IncludedAngleTolerance;//[Offset: 0x18, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x1c, Size: 0x4]
	float DensityQuerySize;//[Offset: 0x20, Size: 0x4]
	byte TraceChannel;//[Offset: 0x2c, Size: 0x1]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bParallelCollectNavMeshPoly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	bool bParallelCalculatePolyNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f, Size: 0x1]
	bool bParallelGenerateSamplePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bParallelCalculatePointNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bParallelCalculateSteepDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool bParallelModifyTileCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]

--------------------------------
Class: NavArea_Burning.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_TearGas.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Avoid.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Color0.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Color1.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Color2.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Color3.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Color4.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Color5.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Color6.NavArea.NavAreaBase.Object

--------------------------------
Class: NavPathPointActor.Note.Actor.Object
	int NodeIndex;//[Offset: 0x2e0, Size: 0x4]
	uint64 NodeRef;//[Offset: 0x2e8, Size: 0x8]
	Vector NodeLocation;//[Offset: 0x2f0, Size: 0xc]
	NavPathPointActor*[] NextPathPointArray;//[Offset: 0x300, Size: 0x10]

--------------------------------
Class: NPCAINavUtilitySystem.NPCAINavSubsystemBase.WorldSubsystem.Subsystem.Object
	NPCAINavMeshManager* CachedNavMeshManager;//[Offset: 0x30, Size: 0x8]
	CoverSystem* CachedCoverSystem;//[Offset: 0x38, Size: 0x8]
	NPCAINavUtilitySystem* GetNavUtilitySystem(const Object* WorldContextObject);// 0x5514e3fee041
	CoverPointPathLengthResult[] CalculatePathLengthToEachCoverPoint(const Object* WorldContextObject, out const Vector Location, float MaxPathLength);// 0x5513e3fee041

--------------------------------
Class: CoverPointPathLengthResult
	int PointID;//[Offset: 0x0, Size: 0x4]
	float PathLength;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: NPCAIPeekPointAsyncTask.NPCAIAsyncTaskBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x40, Size: 0x10]
	delegate OnFail;//[Offset: 0x50, Size: 0x10]
	Vector TargetPoint;//[Offset: 0x60, Size: 0xc]
	Vector DangerPoint;//[Offset: 0x6c, Size: 0xc]
	float PeekLength;//[Offset: 0x78, Size: 0x4]
	Vector PeekPoint;//[Offset: 0x7c, Size: 0xc]
	bool bWillExpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	void GetNavPath(out Vector[] OutPath, out int StartIndex);// 0x5517e3fee041
	void ExecuteTask();// 0x5516e3fee041
	NPCAIPeekPointAsyncTask* AIPeekPoint(Actor* Pawn, out const Vector TargetPoint, out const Vector DangerPoint, float PeekLength);// 0x5515e3fee041

--------------------------------
Class: NPCAIPerceptionSystem.AIPerceptionSystem.AISubsystem.Object
	void OnSourceActorEndPlay(Actor* InActor, byte InEndPlayReason);// 0x5529e3fee041
	bool ModifySenseRangeInRuntime(Actor* InAIController, float InCatchRadiusScale, float InLossRadiusScale, enum InSenseType);// 0x5528e3fee041

--------------------------------
Class: AIPropertyAITypeProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object

--------------------------------
Class: AIPropertyBlockProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object

--------------------------------
Class: NPCAIPropertyComponent_Block.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	enum GetAIProfileType();// 0x556be3fee041

--------------------------------
Class: NPCAIPropertyComponent_Boss.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	bool IsBossShallWarningScavPlayer();// 0x5571e3fee041
	float GetBossWarningTime();// 0x5570e3fee041
	float GetBossDistToWarningOut();// 0x556fe3fee041
	float GetBossDistToWarning();// 0x556ee3fee041
	float GetBossDistToShoot();// 0x556de3fee041
	enum GetAIProfileType();// 0x556ce3fee041

--------------------------------
Class: NPCAIPropertyComponent_Core.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	enum GetAIProfileType();// 0x5574e3fee041
	enum GetAimingType();// 0x5573e3fee041
	float GetAccuratySpeed();// 0x5572e3fee041

--------------------------------
Class: AIPropertyCurveProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	CurveFloat* SightCurveDaytime;//[Offset: 0x30, Size: 0x8]
	CurveFloat* SightCureOutLight;//[Offset: 0x38, Size: 0x8]
	CurveFloat* GetSightCurveDaytime();// 0x5576e3fee041
	CurveFloat* GetSightCureOutLight();// 0x5575e3fee041

--------------------------------
Class: NPCAIPropertyComponent_Curve.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	CurveFloat* GetSightCurveDaytime();// 0x5579e3fee041
	CurveFloat* GetSightCureOutLight();// 0x5578e3fee041
	enum GetAIProfileType();// 0x5577e3fee041

--------------------------------
Class: NPCAIPropertyComponent_Global.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	enum GetAIProfileType();// 0x557fe3fee041

--------------------------------
Class: NPCAIPropertyComponent_Lay.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	float GetLayAim();// 0x55b4e3fee041
	float GetDistEnemyCanLaySqrt();// 0x55b3e3fee041
	float GetDistEnemyCanLay();// 0x55b2e3fee041
	float GetDeltaLayCheck();// 0x55b1e3fee041
	float GetDeltaGetup();// 0x55b0e3fee041
	float GetDeltaAfterGetup();// 0x55afe3fee041
	enum GetAIProfileType();// 0x55aee3fee041

--------------------------------
Class: NPCAIPropertyComponent_PlayerActionReaction.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	float GetTurnToUseTime(float Angle);// 0x5604e3fee041
	enum GetAIProfileType();// 0x5603e3fee041

--------------------------------
Class: AIPropertyRequestRunProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object

--------------------------------
Class: NPCAIPropertyComponent_RequestRun.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	enum GetAIProfileType();// 0x5605e3fee041

--------------------------------
Class: AIPropertySmartProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object

--------------------------------
Class: NPCAIPropertyComponent_Smart.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	enum GetAIProfileType();// 0x5626e3fee041

--------------------------------
Class: AIPropertySoundProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object
	DataTable* DataTableOfAI;//[Offset: 0x30, Size: 0x8]
	float SelfYellCD;//[Offset: 0x38, Size: 0x4]
	float AreaYellCD;//[Offset: 0x3c, Size: 0x4]
	float AIVoiceRadius;//[Offset: 0x40, Size: 0x4]
	DataTable* GetDataTableOfAI();// 0x5627e3fee041

--------------------------------
Class: NPCAIPropertyComponent_Sound.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	float GetSelfYellCD();// 0x562ce3fee041
	DataTable* GetDataTableOfAI();// 0x562be3fee041
	float GetAreaYellCD();// 0x562ae3fee041
	float GetAIVoiceRadius();// 0x5629e3fee041
	enum GetAIProfileType();// 0x5628e3fee041

--------------------------------
Class: AIPropertyStrategyProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object

--------------------------------
Class: NPCAIPropertyComponent_Strategy.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	enum GetAIProfileType();// 0x562de3fee041

--------------------------------
Class: AIPropertyTacticProfile.NPCAIPropertyProfile.NPCAIPropertyProfileBase.Object

--------------------------------
Class: NPCAIPropertyComponent_Tactic.NPCAIPropertyComponent.NPCAIProfileBaseComponent.Object
	enum GetAIProfileType();// 0x562ee3fee041

--------------------------------
Class: NPCAIQueryRoundEnvironmentAsyncTask.NPCAIAsyncTaskBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x40, Size: 0x10]
	delegate OnFail;//[Offset: 0x50, Size: 0x10]
	Vector EnemyLocation;//[Offset: 0x60, Size: 0xc]
	float LRDistance;//[Offset: 0x6c, Size: 0x4]
	float FBDistance;//[Offset: 0x70, Size: 0x4]
	bool bCheckLRDefense;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	bool bCheckLRAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	void ExecuteTask();// 0x563be3fee041
	bool CheckCanUseMemoryData(Actor* Pawn, out const Vector EnemyLocation, out NPCAIQueryRoundEnvironmentResult OutResult);// 0x563ae3fee041
	NPCAIQueryRoundEnvironmentAsyncTask* AIQueryRoundEnvironment(Actor* Pawn, Actor* EnemyPawn, float LRDistance, float FBDistance, bool bCheckLRDefense, bool bCheckLRAttack);// 0x5639e3fee041

--------------------------------
Class: NPCAIRecastNavMesh.RecastNavMesh.NavigationData.Actor.Object
	NPCAIHNavActor* HNavActor;//[Offset: 0x598, Size: 0x8]

--------------------------------
Class: NPCAIRecoilInterface.Interface.Object
	void SetShotTarget(out const Vector AimingPoint, out const Vector ShotPoint, float PrepareTime);// 0x5642e3fee041
	void SetExactAimingPoint(out const Vector AimingPoint, float TurnTime);// 0x5641e3fee041
	float Recoil(int CurrentShotCount);// 0x5640e3fee041
	void LosingRecoil(float DeltaTime);// 0x563fe3fee041
	bool IsInPressureWeapon();// 0x563ee3fee041
	Vector GetRecoilOffset();// 0x563de3fee041

--------------------------------
Class: NPCAIRoleModifierComponent.Object

--------------------------------
Class: NPCAISense_ComingExplosion.AISense.Object
	NPCAIComingExplosionEvent[] ExplosionEvents;//[Offset: 0x78, Size: 0x10]
	void ReportComingExplosionEvent(Object* WorldContextObject, Vector NoiseLocation, float Damage, Actor* Instigator, float MaxRange, FName Tag);// 0x5643e3fee041

--------------------------------
Class: NPCAIComingExplosionEvent
	Vector ExplosionLocation;//[Offset: 0x4, Size: 0xc]
	float Damage;//[Offset: 0x10, Size: 0x4]
	float MaxRange;//[Offset: 0x14, Size: 0x4]
	Actor* Instigator;//[Offset: 0x18, Size: 0x8]
	FName Tag;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: NPCAISense_Damage.AISense.Object
	NPCAIDamageEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10]
	void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation, FName Tag);// 0x5645e3fee041
	bool IsDamageStimulus(out const AIStimulus Stimulus);// 0x5644e3fee041

--------------------------------
Class: NPCAIDamageEvent.AIDamageEvent
	FName Tag;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AIDamageEvent
	float Amount;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Vector HitLocation;//[Offset: 0x10, Size: 0xc]
	Actor* DamagedActor;//[Offset: 0x20, Size: 0x8]
	Actor* Instigator;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AISense_Hearing.AISense.Object
	AINoiseEvent[] NoiseEvents;//[Offset: 0x78, Size: 0x10]
	float SpeedOfSoundSq;//[Offset: 0x88, Size: 0x4]
	void ReportNoiseEvent(Object* WorldContextObject, Vector NoiseLocation, float Loudness, Actor* Instigator, float MaxRange, FName Tag);// 0x5646e3fee041

--------------------------------
Class: AINoiseEvent
	Vector NoiseLocation;//[Offset: 0x4, Size: 0xc]
	float Loudness;//[Offset: 0x10, Size: 0x4]
	float MaxRange;//[Offset: 0x14, Size: 0x4]
	Actor* Instigator;//[Offset: 0x18, Size: 0x8]
	Actor* NoiseRelator;//[Offset: 0x20, Size: 0x8]
	FName Tag;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: NPCAISense_Hearing.AISense_Hearing.AISense.Object
	<Actor*,AINoiseMakerInfo> NoiseMakerMap;//[Offset: 0xe8, Size: 0x50]

--------------------------------
Class: AINoiseMakerInfo
	float lasttime_footstep;//[Offset: 0x0, Size: 0x4]
	float lasttime_gunfire;//[Offset: 0x4, Size: 0x4]
	float lasttime_bulletfire;//[Offset: 0x8, Size: 0x4]
	float lasttime_bullethit;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x140, Size: 0x4]
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x144, Size: 0x4]
	double MaxTimeSlicePerTick;//[Offset: 0x148, Size: 0x8]
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x150, Size: 0x4]
	float MaxQueryImportance;//[Offset: 0x158, Size: 0x4]
	float SightLimitQueryImportance;//[Offset: 0x15c, Size: 0x4]

--------------------------------
Class: NPCAISense_Sight.AISense_Sight.AISense.Object

--------------------------------
Class: NPCAISenseConfig_ComingExplosion.AISenseConfig.Object
	class NPCAISense_ComingExplosion* Implementation;//[Offset: 0x48, Size: 0x8]
	float AwareRange;//[Offset: 0x50, Size: 0x4]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: NPCAISenseConfig_Damage.AISenseConfig.Object
	class NPCAISense_Damage* Implementation;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: AISenseConfig_Hearing.AISenseConfig.Object
	class AISense_Hearing* Implementation;//[Offset: 0x48, Size: 0x8]
	float HearingRange;//[Offset: 0x50, Size: 0x4]
	float LoSHearingRange;//[Offset: 0x54, Size: 0x4]
	bool bUseLoSHearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: NPCAISenseConfig_Hearing.AISenseConfig_Hearing.AISenseConfig.Object
	bool IsDebugHearingScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8]
	float SightRadius;//[Offset: 0x50, Size: 0x4]
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4]
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x60, Size: 0x4]
	float PointOfViewBackwardOffset;//[Offset: 0x64, Size: 0x4]
	float NearClippingRadius;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: NPCAISenseConfig_Sight.AISenseConfig_Sight.AISenseConfig.Object
	enum AISightUseChannel;//[Offset: 0x6c, Size: 0x1]
	enum WeaponUseChannel;//[Offset: 0x6d, Size: 0x1]

--------------------------------
Class: NPCAISenseEvent_ComingExplosion.AISenseEvent.Object
	NPCAIComingExplosionEvent Event;//[Offset: 0x28, Size: 0x30]

--------------------------------
Class: NPCAISenseEvent_Damage.AISenseEvent.Object
	NPCAIDamageEvent Event;//[Offset: 0x28, Size: 0x38]

--------------------------------
Class: NPCAISenseSourceInterface.Interface.Object
	enum GetAISenseSourceType();// 0x5647e3fee041

--------------------------------
Class: NPCAISettingsComponent.ActorComponent.Object
	AimingSettings Aiming;//[Offset: 0xb8, Size: 0xd0]
	BossSettings Boss;//[Offset: 0x188, Size: 0x118]
	ChangeSettings Change;//[Offset: 0x2a0, Size: 0x3c]
	CoreSettings Core;//[Offset: 0x2dc, Size: 0x2c]
	CoverSettings Cover;//[Offset: 0x308, Size: 0xc8]
	GlobalSettings Global;//[Offset: 0x3d0, Size: 0x1d4]
	GrenadeSettings Grenade;//[Offset: 0x5a4, Size: 0xac]
	HearingSettings Hearing;//[Offset: 0x650, Size: 0x6c]
	LaySettings Lay;//[Offset: 0x6bc, Size: 0x4c]
	LookSettings Look;//[Offset: 0x708, Size: 0xe0]
	MindSettings Mind;//[Offset: 0x7e8, Size: 0xf8]
	MoveSettings Move;//[Offset: 0x8e0, Size: 0x58]
	PatrolSettings Patrol;//[Offset: 0x938, Size: 0x74]
	ScatteringSettings Scattering;//[Offset: 0x9ac, Size: 0x78]
	ShootSettings Shoot;//[Offset: 0xa24, Size: 0x94]
	CurrentSettings Current;//[Offset: 0xab8, Size: 0x4]
	CurveSettings Curve;//[Offset: 0xac0, Size: 0x10]
	NPCAIWeaponConfigTableRow Weapon;//[Offset: 0xad0, Size: 0x70]

--------------------------------
Class: AimingSettings
	float MAX_AIM_PRECICING;//[Offset: 0x0, Size: 0x4]
	float BETTER_PRECICING_COEF;//[Offset: 0x4, Size: 0x4]
	float RECLC_Y_DIST;//[Offset: 0x8, Size: 0x4]
	float RECALC_DIST;//[Offset: 0xc, Size: 0x4]
	float RECALC_SQR_DIST;//[Offset: 0x10, Size: 0x4]
	float COEF_FROM_COVER;//[Offset: 0x14, Size: 0x4]
	float PANIC_COEF;//[Offset: 0x18, Size: 0x4]
	float PANIC_ACCURATY_COEF;//[Offset: 0x1c, Size: 0x4]
	float HARD_AIM;//[Offset: 0x20, Size: 0x4]
	float PANIC_TIME;//[Offset: 0x24, Size: 0x4]
	float SHOOT_TO_CHANGE_RND_PART_DELTA;//[Offset: 0x28, Size: 0x4]
	float ANY_PART_SHOOT_TIME;//[Offset: 0x2c, Size: 0x4]
	int RECALC_MUST_TIME_MIN;//[Offset: 0x30, Size: 0x4]
	int RECALC_MUST_TIME_MAX;//[Offset: 0x34, Size: 0x4]
	float DAMAGE_PANIC_TIME;//[Offset: 0x38, Size: 0x4]
	float DANGER_UP_POINT;//[Offset: 0x3c, Size: 0x4]
	float MAX_AIMING_UPGRADE_BY_TIME;//[Offset: 0x40, Size: 0x4]
	float DAMAGE_TO_DISCARD_AIM_0;//[Offset: 0x44, Size: 0x4]
	float MIN_TIME_DISCARD_AIM_SEC;//[Offset: 0x48, Size: 0x4]
	float MAX_TIME_DISCARD_AIM_SEC;//[Offset: 0x4c, Size: 0x4]
	float XZ_COEF;//[Offset: 0x50, Size: 0x4]
	float XZ_COEF_STATIONARY_BULLET;//[Offset: 0x54, Size: 0x4]
	float XZ_COEF_STATIONARY_GRENADE;//[Offset: 0x58, Size: 0x4]
	float BOTTOM_COEF;//[Offset: 0x5c, Size: 0x4]
	float FIRST_CONTACT_ADD_SEC;//[Offset: 0x60, Size: 0x4]
	float FIRST_CONTACT_ADD_CHANCE;//[Offset: 0x64, Size: 0x4]
	float BASE_HIT_AFFECTION_DELAY_SEC;//[Offset: 0x68, Size: 0x4]
	float BASE_HIT_AFFECTION_MIN_ANG;//[Offset: 0x6c, Size: 0x4]
	float BASE_HIT_AFFECTION_MAX_ANG;//[Offset: 0x70, Size: 0x4]
	float BASE_SHIEF;//[Offset: 0x74, Size: 0x4]
	float BASE_SHIEF_STATIONARY_BULLET;//[Offset: 0x78, Size: 0x4]
	float BASE_SHIEF_STATIONARY_GRENADE;//[Offset: 0x7c, Size: 0x4]
	float SCATTERING_DIST_MODIF;//[Offset: 0x80, Size: 0x4]
	float SCATTERING_DIST_MODIF_CLOSE;//[Offset: 0x84, Size: 0x4]
	int AIMING_TYPE;//[Offset: 0x88, Size: 0x4]
	float DIST_TO_SHOOT_TO_CENTER;//[Offset: 0x8c, Size: 0x4]
	float DIST_TO_SHOOT_NO_OFFSET;//[Offset: 0x90, Size: 0x4]
	float SHPERE_FRIENDY_FIRE_SIZE;//[Offset: 0x94, Size: 0x4]
	float COEF_IF_MOVE;//[Offset: 0x98, Size: 0x4]
	float TIME_COEF_IF_MOVE;//[Offset: 0x9c, Size: 0x4]
	float BOT_MOVE_IF_DELTA;//[Offset: 0xa0, Size: 0x4]
	float NEXT_SHOT_MISS_CHANCE;//[Offset: 0xa4, Size: 0x4]
	float NEXT_SHOT_MISS_Y_OFFSET;//[Offset: 0xa8, Size: 0x4]
	float ANYTIME_LIGHT_WHEN_AIM;//[Offset: 0xac, Size: 0x4]
	float WEAPON_ROOT_OFFSET;//[Offset: 0xb0, Size: 0x4]
	float MIN_DAMAGE_TO_GET_HIT_AFFETS;//[Offset: 0xb4, Size: 0x4]
	float MAX_AIM_TIME;//[Offset: 0xb8, Size: 0x4]
	float OFFSET_RECAL_ANYWAY_TIME;//[Offset: 0xbc, Size: 0x4]
	float Y_TOP_OFFSET_COEF;//[Offset: 0xc0, Size: 0x4]
	float Y_BOTTOM_OFFSET_COEF;//[Offset: 0xc4, Size: 0x4]
	float STATIONARY_LEAVE_HALF_DEGREE;//[Offset: 0xc8, Size: 0x4]
	float START_TIME_COEF;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: BossSettings
	bool BOSS_SHALL_WARNING_PLAYER;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BOSS_DIST_TO_WARNING;//[Offset: 0x4, Size: 0x4]
	float BOSS_DIST_TO_SHOOT;//[Offset: 0x8, Size: 0x4]
	float BOSS_DIST_TO_WARNING_OUT;//[Offset: 0xc, Size: 0x4]
	float CHANCE_TO_SEND_GRENADE;//[Offset: 0x10, Size: 0x4]
	float MAX_DIST_COVER_BOSS;//[Offset: 0x14, Size: 0x4]
	float MAX_DIST_COVER_BOSS_SQRT;//[Offset: 0x18, Size: 0x4]
	float MAX_DIST_DECIDER_TO_SEND;//[Offset: 0x1c, Size: 0x4]
	float MAX_DIST_DECIDER_TO_SEND_SQRT;//[Offset: 0x20, Size: 0x4]
	float TIME_AFTER_LOSE;//[Offset: 0x24, Size: 0x4]
	float TIME_AFTER_LOSE_DELTA;//[Offset: 0x28, Size: 0x4]
	int PERSONS_SEND;//[Offset: 0x2c, Size: 0x4]
	float DELTA_SEARCH_TIME;//[Offset: 0x30, Size: 0x4]
	bool COVER_TO_SEND;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	float WAIT_NO_ATTACK_SAVAGE;//[Offset: 0x38, Size: 0x4]
	float CHANCE_USE_RESERVE_PATROL;//[Offset: 0x3c, Size: 0x4]
	float KILLA_Y_DELTA_TO_BE_ENEMY_BOSS;//[Offset: 0x40, Size: 0x4]
	float KILLA_DITANCE_TO_BE_ENEMY_BOSS;//[Offset: 0x44, Size: 0x4]
	float KILLA_START_SEARCH_SEC;//[Offset: 0x48, Size: 0x4]
	float KILLA_CONTUTION_TIME;//[Offset: 0x4c, Size: 0x4]
	float KILLA_CLOSE_ATTACK_DIST;//[Offset: 0x50, Size: 0x4]
	float KILLA_MIDDLE_ATTACK_DIST;//[Offset: 0x54, Size: 0x4]
	float KILLA_LARGE_ATTACK_DIST;//[Offset: 0x58, Size: 0x4]
	float KILLA_SEARCH_METERS;//[Offset: 0x5c, Size: 0x4]
	float KILLA_DEF_DIST_SQRT;//[Offset: 0x60, Size: 0x4]
	float KILLA_SEARCH_SEC_STOP_AFTER_COMING;//[Offset: 0x64, Size: 0x4]
	float KILLA_DIST_TO_GO_TO_SUPPRESS;//[Offset: 0x68, Size: 0x4]
	float KILLA_AFTER_GRENADE_SUPPRESS_DELAY;//[Offset: 0x6c, Size: 0x4]
	int KILLA_CLOSEATTACK_TIMES;//[Offset: 0x70, Size: 0x4]
	float KILLA_CLOSEATTACK_DELAY;//[Offset: 0x74, Size: 0x4]
	float KILLA_HOLD_DELAY;//[Offset: 0x78, Size: 0x4]
	int KILLA_BULLET_TO_RELOAD;//[Offset: 0x7c, Size: 0x4]
	int KILLA_ENEMIES_TO_ATTACK;//[Offset: 0x80, Size: 0x4]
	float KILLA_ONE_IS_CLOSE;//[Offset: 0x84, Size: 0x4]
	float KILLA_TRIGGER_DOWN_DELAY;//[Offset: 0x88, Size: 0x4]
	float KILLA_WAIT_IN_COVER_COEF;//[Offset: 0x8c, Size: 0x4]
	float KOJANIY_DIST_WHEN_READY;//[Offset: 0x90, Size: 0x4]
	float KOJANIY_DIST_TO_BE_ENEMY;//[Offset: 0x94, Size: 0x4]
	float KOJANIY_MIN_DIST_TO_LOOT;//[Offset: 0x98, Size: 0x4]
	float KOJANIY_MIN_DIST_TO_LOOT_SQRT;//[Offset: 0x9c, Size: 0x4]
	float KOJANIY_DIST_ENEMY_TOO_CLOSE;//[Offset: 0xa0, Size: 0x4]
	float KOJANIY_MANY_ENEMIES_COEF;//[Offset: 0xa4, Size: 0x4]
	bool KOJANIY_FIGHT_CENTER_POS_ME;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	float KOJANIY_DIST_CORE_SPOS_RECALC;//[Offset: 0xac, Size: 0x4]
	float KOJANIY_DIST_CORE_SPOS_RECALC_SQRT;//[Offset: 0xb0, Size: 0x4]
	float KOJANIY_START_SUPPERS_SHOOTS_SEC;//[Offset: 0xb4, Size: 0x4]
	float KOJANIY_START_NEXT_SUPPERS_SHOOTS_SEC;//[Offset: 0xb8, Size: 0x4]
	int KOJANIY_SAFE_ENEMIES;//[Offset: 0xbc, Size: 0x4]
	float KOJANIY_TAKE_CARE_ABOULT_ENEMY_DELTA;//[Offset: 0xc0, Size: 0x4]
	float KOJANIY_WANNA_GO_TO_CLOSEST_COVER;//[Offset: 0xc4, Size: 0x4]
	FString GLUHAR_FOLLOWER_PATH_NAME;//[Offset: 0xc8, Size: 0x10]
	float GLUHAR_FOLLOWER_SCOUT_DIST_START_ATTACK;//[Offset: 0xd8, Size: 0x4]
	float GLUHAR_FOLLOWER_SCOUT_DIST_END_ATTACK;//[Offset: 0xdc, Size: 0x4]
	float GLUHAR_BOSS_WANNA_ATTACK_CHANCE_0;//[Offset: 0xe0, Size: 0x4]
	float GLUHAR_ASSAULT_ATTACK_DIST;//[Offset: 0xe4, Size: 0x4]
	float GLUHAR_STOP_ASSAULT_ATTACK_DIST;//[Offset: 0xe8, Size: 0x4]
	float GLUHAR_TIME_TO_ASSAULT;//[Offset: 0xec, Size: 0x4]
	float DIST_TO_PROTECT_BOSS;//[Offset: 0xf0, Size: 0x4]
	float GLUHAR_SEC_TO_REINFORSMENTS;//[Offset: 0xf4, Size: 0x4]
	bool GLUHAR_REINFORSMENTS_BY_EXIT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool GLUHAR_REINFORSMENTS_BY_EVENT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	bool GLUHAR_REINFORSMENTS_BY_PLAYER_COME_TO_ZONE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1]
	int GLUHAR_FOLLOWERS_TO_REINFORSMENTS;//[Offset: 0xfc, Size: 0x4]
	int GLUHAR_FOLLOWERS_SECURITY;//[Offset: 0x100, Size: 0x4]
	int GLUHAR_FOLLOWERS_ASSAULT;//[Offset: 0x104, Size: 0x4]
	int GLUHAR_FOLLOWERS_SCOUT;//[Offset: 0x108, Size: 0x4]
	int GLUHAR_FOLLOWERS_SNIPE;//[Offset: 0x10c, Size: 0x4]
	float GLUHAR_BOSS_DIST_TO_ENEMY_WANT_KILL;//[Offset: 0x110, Size: 0x4]
	float IF_I_HITTED_GO_AWAY_SEC_HIT;//[Offset: 0x114, Size: 0x4]

--------------------------------
Class: ChangeSettings
	float SMOKE_VISION_DIST;//[Offset: 0x0, Size: 0x4]
	float SMOKE_GAIN_SIGHT;//[Offset: 0x4, Size: 0x4]
	float SMOKE_SCATTERING;//[Offset: 0x8, Size: 0x4]
	float SMOKE_PRECICING;//[Offset: 0xc, Size: 0x4]
	float SMOKE_HEARING;//[Offset: 0x10, Size: 0x4]
	float SMOKE_ACCURATY;//[Offset: 0x14, Size: 0x4]
	float SMOKE_LAY_CHANCE;//[Offset: 0x18, Size: 0x4]
	float FLASH_VISION_DIST;//[Offset: 0x1c, Size: 0x4]
	float FLASH_GAIN_SIGHT;//[Offset: 0x20, Size: 0x4]
	float FLASH_SCATTERING;//[Offset: 0x24, Size: 0x4]
	float FLASH_PRECICING;//[Offset: 0x28, Size: 0x4]
	float FLASH_HEARING;//[Offset: 0x2c, Size: 0x4]
	float FLASH_ACCURATY;//[Offset: 0x30, Size: 0x4]
	float FLASH_LAY_CHANCE;//[Offset: 0x34, Size: 0x4]
	float STUN_HEARING;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CoreSettings
	float GainSightCoef;//[Offset: 0x0, Size: 0x4]
	float ScatteringPerMeter;//[Offset: 0x4, Size: 0x4]
	float ScatteringClosePerMeter;//[Offset: 0x8, Size: 0x4]
	float DamageCoeff;//[Offset: 0xc, Size: 0x4]
	float HearingSense;//[Offset: 0x10, Size: 0x4]
	bool CanRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool CanGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	enum AimingType;//[Offset: 0x16, Size: 0x1]
	float PistolFireDistancePref;//[Offset: 0x18, Size: 0x4]
	float ShotgunFireDistancePref;//[Offset: 0x1c, Size: 0x4]
	float RifleFireDistancePref;//[Offset: 0x20, Size: 0x4]
	float AccuratySpeed;//[Offset: 0x24, Size: 0x4]
	float WaitInCoverBetweenShotsSec;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: CoverSettings
	float RETURN_TO_ATTACK_AFTER_AMBUSH_MIN;//[Offset: 0x0, Size: 0x4]
	float RETURN_TO_ATTACK_AFTER_AMBUSH_MAX;//[Offset: 0x4, Size: 0x4]
	float SOUND_TO_GET_SPOTTED;//[Offset: 0x8, Size: 0x4]
	float TIME_TO_MOVE_TO_COVER;//[Offset: 0xc, Size: 0x4]
	float MAX_DIST_OF_COVER;//[Offset: 0x10, Size: 0x4]
	float CHANGE_RUN_TO_COVER_SEC;//[Offset: 0x14, Size: 0x4]
	float CHANGE_RUN_TO_COVER_SEC_GREANDE;//[Offset: 0x18, Size: 0x4]
	float DIST_CANT_CHANGE_WAY;//[Offset: 0x1c, Size: 0x4]
	float DIST_CHECK_SFETY;//[Offset: 0x20, Size: 0x4]
	float TIME_CHECK_SAFE;//[Offset: 0x24, Size: 0x4]
	float HIDE_TO_COVER_TIME;//[Offset: 0x28, Size: 0x4]
	float MAX_DIST_OF_COVER_SQR;//[Offset: 0x2c, Size: 0x4]
	float DIST_CANT_CHANGE_WAY_SQR;//[Offset: 0x30, Size: 0x4]
	float SPOTTED_COVERS_RADIUS;//[Offset: 0x34, Size: 0x4]
	float LOOK_LAST_ENEMY_POS_HOLDING;//[Offset: 0x38, Size: 0x4]
	float LOOK_LAST_ENEMY_POS_MOVING;//[Offset: 0x3c, Size: 0x4]
	float LOOK_LAST_ENEMY_POS_LOOKAROUND;//[Offset: 0x40, Size: 0x4]
	int OFFSET_LOOK_ALONG_WALL_ANG;//[Offset: 0x44, Size: 0x4]
	float SPOTTED_GRENADE_RADIUS;//[Offset: 0x48, Size: 0x4]
	float MAX_SPOTTED_TIME_SEC;//[Offset: 0x4c, Size: 0x4]
	float WAIT_INT_COVER_FINDING_ENEMY;//[Offset: 0x50, Size: 0x4]
	float CLOSE_DIST_POINT_SQRT;//[Offset: 0x54, Size: 0x4]
	float DELTA_SEEN_FROM_COVE_LAST_POS;//[Offset: 0x58, Size: 0x4]
	bool MOVE_TO_COVER_WHEN_TARGET;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	float SPOTTED_GRENADE_TIME;//[Offset: 0x60, Size: 0x4]
	bool DEPENDS_Y_DIST_TO_BOT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	float RUN_IF_FAR;//[Offset: 0x68, Size: 0x4]
	float RUN_IF_FAR_SQRT;//[Offset: 0x6c, Size: 0x4]
	float STAY_IF_FAR;//[Offset: 0x70, Size: 0x4]
	float STAY_IF_FAR_SQRT;//[Offset: 0x74, Size: 0x4]
	bool CHECK_COVER_ENEMY_LOOK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	int SHOOT_NEAR_TO_LEAVE;//[Offset: 0x7c, Size: 0x4]
	float SHOOT_NEAR_SEC_PERIOD;//[Offset: 0x80, Size: 0x4]
	int HITS_TO_LEAVE_COVER;//[Offset: 0x84, Size: 0x4]
	float DOG_FIGHT_AFTER_LEAVE;//[Offset: 0x88, Size: 0x4]
	float MIN_DEFENCE_LEVEL;//[Offset: 0x8c, Size: 0x4]
	bool REWORK_NOT_TO_SHOOT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool DELETE_POINTS_BEHIND_ENEMIES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	float GOOD_DIST_TO_POINT_COEF;//[Offset: 0x94, Size: 0x4]
	float ENEMY_DIST_TO_GO_OUT;//[Offset: 0x98, Size: 0x4]
	bool CHECK_CLOSEST_FRIEND;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	float MIN_TO_ENEMY_TO_BE_NOT_SAFE_SQRT;//[Offset: 0xa0, Size: 0x4]
	float MIN_TO_ENEMY_TO_BE_NOT_SAFE;//[Offset: 0xa4, Size: 0x4]
	bool CAN_LOOK_OUT_WHEN_HOLDING;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool SIT_DOWN_WHEN_HOLDING;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	float STATIONARY_WEAPON_NO_ENEMY_GETUP;//[Offset: 0xac, Size: 0x4]
	float STATIONARY_WEAPON_MAX_DIST_TO_USE;//[Offset: 0xb0, Size: 0x4]
	int STATIONARY_SPOTTED_TIMES_TO_LEAVE;//[Offset: 0xb4, Size: 0x4]
	bool STATIONARY_CAN_USE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool CAN_END_SHOOT_FROM_COVER_CAUSE_STATIONARY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	float CAN_END_SHOOT_FROM_COVER_CAUSE_STATIONARY_DELTA;//[Offset: 0xbc, Size: 0x4]
	float CAN_END_SHOOT_FROM_COVER_CAUSE_STATIONARY_RADIUS;//[Offset: 0xc0, Size: 0x4]
	float END_HOLD_IF_ENEMY_CLOSE_AND_VISIBLE;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: GlobalSettings
	int SAVAGE_KILL_DIST;//[Offset: 0x0, Size: 0x4]
	float SOUND_DOOR_BREACH_METERS;//[Offset: 0x4, Size: 0x4]
	float SOUND_DOOR_OPEN_METERS;//[Offset: 0x8, Size: 0x4]
	float STEP_NOISE_DELTA;//[Offset: 0xc, Size: 0x4]
	float JUMP_NOISE_DELTA;//[Offset: 0x10, Size: 0x4]
	int GUNSHOT_SPREAD;//[Offset: 0x14, Size: 0x4]
	int GUNSHOT_SPREAD_SILENCE;//[Offset: 0x18, Size: 0x4]
	float BASE_WALK_SPEREAD2;//[Offset: 0x1c, Size: 0x4]
	float G;//[Offset: 0x20, Size: 0x4]
	float STAY_COEF;//[Offset: 0x24, Size: 0x4]
	float SIT_COEF;//[Offset: 0x28, Size: 0x4]
	float LAY_COEF;//[Offset: 0x2c, Size: 0x4]
	int MAX_ITERATIONS;//[Offset: 0x30, Size: 0x4]
	float START_DIST_TO_COV;//[Offset: 0x34, Size: 0x4]
	float MAX_DIST_TO_COV;//[Offset: 0x38, Size: 0x4]
	float STAY_HEIGHT;//[Offset: 0x3c, Size: 0x4]
	float CLOSE_POINTS;//[Offset: 0x40, Size: 0x4]
	int COUNT_TURNS;//[Offset: 0x44, Size: 0x4]
	float SIMPLE_POINT_LIFE_TIME_SEC;//[Offset: 0x48, Size: 0x4]
	float DANGER_POINT_LIFE_TIME_SEC;//[Offset: 0x4c, Size: 0x4]
	float DANGER_POWER;//[Offset: 0x50, Size: 0x4]
	float COVER_DIST_CLOSE;//[Offset: 0x54, Size: 0x4]
	float GOOD_DIST_TO_POINT;//[Offset: 0x58, Size: 0x4]
	float COVER_TOOFAR_FROM_BOSS;//[Offset: 0x5c, Size: 0x4]
	float COVER_TOOFAR_FROM_BOSS_SQRT;//[Offset: 0x60, Size: 0x4]
	float MAX_Y_DIFF_TO_PROTECT;//[Offset: 0x64, Size: 0x4]
	float FLARE_POWER;//[Offset: 0x68, Size: 0x4]
	float MOVE_COEF;//[Offset: 0x6c, Size: 0x4]
	float PRONE_POSE;//[Offset: 0x70, Size: 0x4]
	float LOWER_POSE;//[Offset: 0x74, Size: 0x4]
	float MAX_POSE;//[Offset: 0x78, Size: 0x4]
	float FLARE_TIME;//[Offset: 0x7c, Size: 0x4]
	int MAX_REQUESTS__PER_GROUP;//[Offset: 0x80, Size: 0x4]
	float UPDATE_GOAL_TIMER_SEC;//[Offset: 0x84, Size: 0x4]
	float DIST_NOT_TO_GROUP;//[Offset: 0x88, Size: 0x4]
	float DIST_NOT_TO_GROUP_SQR;//[Offset: 0x8c, Size: 0x4]
	float LAST_SEEN_POS_LIFETIME;//[Offset: 0x90, Size: 0x4]
	float DELTA_GRENADE_END_TIME;//[Offset: 0x94, Size: 0x4]
	float DELTA_GRENADE_RUN_DIST;//[Offset: 0x98, Size: 0x4]
	float DELTA_GRENADE_RUN_DIST_SQRT;//[Offset: 0x9c, Size: 0x4]
	float PATROL_MIN_LIGHT_DIST;//[Offset: 0xa0, Size: 0x4]
	float HOLD_MIN_LIGHT_DIST;//[Offset: 0xa4, Size: 0x4]
	float ARMOR_CLASS_COEF;//[Offset: 0xa8, Size: 0x4]
	float SHOTGUN_POWER;//[Offset: 0xac, Size: 0x4]
	float RIFLE_POWER;//[Offset: 0xb0, Size: 0x4]
	float PISTOL_POWER;//[Offset: 0xb4, Size: 0x4]
	float SMG_POWER;//[Offset: 0xb8, Size: 0x4]
	float SNIPE_POWER;//[Offset: 0xbc, Size: 0x4]
	float GESTUS_PERIOD_SEC;//[Offset: 0xc0, Size: 0x4]
	float GESTUS_AIMING_DELAY;//[Offset: 0xc4, Size: 0x4]
	float GESTUS_REQUEST_LIFETIME;//[Offset: 0xc8, Size: 0x4]
	float GESTUS_FIRST_STAGE_MAX_TIME;//[Offset: 0xcc, Size: 0x4]
	float GESTUS_SECOND_STAGE_MAX_TIME;//[Offset: 0xd0, Size: 0x4]
	int GESTUS_MAX_ANSWERS;//[Offset: 0xd4, Size: 0x4]
	int GESTUS_FUCK_TO_SHOOT;//[Offset: 0xd8, Size: 0x4]
	float GESTUS_DIST_ANSWERS;//[Offset: 0xdc, Size: 0x4]
	float GESTUS_DIST_ANSWERS_SQRT;//[Offset: 0xe0, Size: 0x4]
	float GESTUS_ANYWAY_CHANCE;//[Offset: 0xe4, Size: 0x4]
	float TALK_DELAY;//[Offset: 0xe8, Size: 0x4]
	bool CAN_SHOOT_TO_HEAD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	bool CAN_TILT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 0x1]
	float TILT_CHANCE;//[Offset: 0xf0, Size: 0x4]
	float COVER_SECONDS_AFTER_LOSE_VISION;//[Offset: 0xf4, Size: 0x4]
	float MIN_ARG_COEF;//[Offset: 0xf8, Size: 0x4]
	float MAX_ARG_COEF;//[Offset: 0xfc, Size: 0x4]
	float DEAD_AGR_DIST;//[Offset: 0x100, Size: 0x4]
	float MAX_DANGER_CARE_DIST_SQRT;//[Offset: 0x104, Size: 0x4]
	float MAX_DANGER_CARE_DIST;//[Offset: 0x108, Size: 0x4]
	int MIN_MAX_PERSON_SEARCH;//[Offset: 0x10c, Size: 0x4]
	float PERCENT_PERSON_SEARCH;//[Offset: 0x110, Size: 0x4]
	float LOOK_ANYSIDE_BY_WALL_SEC_OF_ENEMY;//[Offset: 0x114, Size: 0x4]
	float CLOSE_TO_WALL_ROTATE_BY_WALL_SQRT;//[Offset: 0x118, Size: 0x4]
	float FORMUL_COEF_DELTA_DIST;//[Offset: 0x11c, Size: 0x4]
	float FORMUL_COEF_DELTA_SHOOT;//[Offset: 0x120, Size: 0x4]
	float FORMUL_COEF_DELTA_FRIEND_COVER;//[Offset: 0x124, Size: 0x4]
	float SUSPETION_POINT_DIST_CHECK;//[Offset: 0x128, Size: 0x4]
	int MAX_BASE_REQUESTS_PER_PLAYER;//[Offset: 0x12c, Size: 0x4]
	int MAX_HOLD_REQUESTS_PER_PLAYER;//[Offset: 0x130, Size: 0x4]
	int MAX_GO_TO_REQUESTS_PER_PLAYER;//[Offset: 0x134, Size: 0x4]
	int MAX_COME_WITH_ME_REQUESTS_PER_PLAYER;//[Offset: 0x138, Size: 0x4]
	int CORE_POINTS_MAX;//[Offset: 0x13c, Size: 0x4]
	int CORE_POINTS_MIN;//[Offset: 0x140, Size: 0x4]
	bool BORN_POINSTS_FREE_ONLY_FAREST_PLAYER;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	bool SCAV_GROUPS_TOGETHER;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]
	float LAY_DOWN_ANG_SHOOT;//[Offset: 0x148, Size: 0x4]
	float HOLD_REQUEST_TIME_SEC;//[Offset: 0x14c, Size: 0x4]
	int TRIGGERS_DOWN_TO_RUN_WHEN_MOVE;//[Offset: 0x150, Size: 0x4]
	float MIN_DIST_TO_RUN_WHILE_ATTACK_MOVING;//[Offset: 0x154, Size: 0x4]
	float MIN_DIST_TO_RUN_WHILE_ATTACK_MOVING_OTHER_ENEMIS;//[Offset: 0x158, Size: 0x4]
	float MIN_DIST_TO_STOP_RUN;//[Offset: 0x15c, Size: 0x4]
	float JUMP_SPREAD_DIST;//[Offset: 0x160, Size: 0x4]
	int LOOK_TIMES_TO_KILL;//[Offset: 0x164, Size: 0x4]
	int COME_INSIDE_TIMES;//[Offset: 0x168, Size: 0x4]
	float TOTAL_TIME_KILL;//[Offset: 0x16c, Size: 0x4]
	float TOTAL_TIME_KILL_AFTER_WARN;//[Offset: 0x170, Size: 0x4]
	float VERTICAL_DIST_TO_IGNORE_SOUND;//[Offset: 0x174, Size: 0x4]
	float DEFENCE_LEVEL_SHIFT;//[Offset: 0x178, Size: 0x4]
	float MIN_DIST_CLOSE_DEF;//[Offset: 0x17c, Size: 0x4]
	float SMOKE_GRENADE_RADIUS_COEF;//[Offset: 0x180, Size: 0x4]
	int GRENADE_PRECISION;//[Offset: 0x184, Size: 0x4]
	int MAX_WARNS_BEFORE_KILL;//[Offset: 0x188, Size: 0x4]
	float CARE_ENEMY_ONLY_TIME;//[Offset: 0x18c, Size: 0x4]
	float MIDDLE_POINT_COEF;//[Offset: 0x190, Size: 0x4]
	bool MAIN_TACTIC_ONLY_ATTACK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 0x1]
	float LAST_DAMAGE_ACTIVE;//[Offset: 0x198, Size: 0x4]
	float DELTA_SUPRESS_DISTANCE_SQRT;//[Offset: 0x19c, Size: 0x4]
	float DELTA_SUPRESS_DISTANCE;//[Offset: 0x1a0, Size: 0x4]
	float WAVE_COEF_LOW;//[Offset: 0x1a4, Size: 0x4]
	float WAVE_COEF_MID;//[Offset: 0x1a8, Size: 0x4]
	float WAVE_COEF_HIGH;//[Offset: 0x1ac, Size: 0x4]
	float WAVE_COEF_HORDE;//[Offset: 0x1b0, Size: 0x4]
	bool WAVE_ONLY_AS_ONLINE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 0x1]
	float AI_DATA_POWER_RECALC;//[Offset: 0x1b8, Size: 0x4]
	int LOCAL_BOTS_COUNT;//[Offset: 0x1bc, Size: 0x4]
	float ENEMY_TO_BE_CURRENT;//[Offset: 0x1c0, Size: 0x4]
	float DELAY_BEFORE_ENEMY;//[Offset: 0x1c4, Size: 0x4]
	float DIST_TO_BECOME_ENEMY;//[Offset: 0x1c8, Size: 0x4]
	float PERIOD_NEXT_ACTION_SEC;//[Offset: 0x1cc, Size: 0x4]
	float PERIOD_NEXT_HELLO_ACTION_SEC;//[Offset: 0x1d0, Size: 0x4]

--------------------------------
Class: GrenadeSettings
	float DELTA_NEXT_ATTEMPT_FROM_COVER;//[Offset: 0x0, Size: 0x4]
	float DELTA_NEXT_ATTEMPT;//[Offset: 0x4, Size: 0x4]
	float MIN_DIST_NOT_TO_THROW;//[Offset: 0x8, Size: 0x4]
	float NEAR_DELTA_THROW_TIME_SEC;//[Offset: 0xc, Size: 0x4]
	float MIN_THROW_GRENADE_DIST;//[Offset: 0x10, Size: 0x4]
	float MIN_THROW_GRENADE_DIST_SQRT;//[Offset: 0x14, Size: 0x4]
	float MIN_DIST_NOT_TO_THROW_SQR;//[Offset: 0x18, Size: 0x4]
	float RUN_AWAY;//[Offset: 0x1c, Size: 0x4]
	float RUN_AWAY_SQR;//[Offset: 0x20, Size: 0x4]
	float ADD_GRENADE_AS_DANGER;//[Offset: 0x24, Size: 0x4]
	float ADD_GRENADE_AS_DANGER_SQR;//[Offset: 0x28, Size: 0x4]
	float CHANCE_TO_NOTIFY_ENEMY_GR;//[Offset: 0x2c, Size: 0x4]
	float REQUEST_DIST_MUST_THROW_SQRT;//[Offset: 0x30, Size: 0x4]
	float REQUEST_DIST_MUST_THROW;//[Offset: 0x34, Size: 0x4]
	int BEWARE_TYPE;//[Offset: 0x38, Size: 0x4]
	float SHOOT_TO_SMOKE_CHANCE;//[Offset: 0x3c, Size: 0x4]
	float CHANCE_RUN_FLASHED;//[Offset: 0x40, Size: 0x4]
	float MAX_FLASHED_DIST_TO_SHOOT;//[Offset: 0x44, Size: 0x4]
	float MAX_FLASHED_DIST_TO_SHOOT_SQRT;//[Offset: 0x48, Size: 0x4]
	float FLASH_GRENADE_TIME_COEF;//[Offset: 0x4c, Size: 0x4]
	float SIZE_SPOTTED_COEF;//[Offset: 0x50, Size: 0x4]
	float BE_ATTENTION_COEF;//[Offset: 0x54, Size: 0x4]
	float TIME_SHOOT_TO_FLASH;//[Offset: 0x58, Size: 0x4]
	float CLOSE_TO_SMOKE_TO_SHOOT;//[Offset: 0x5c, Size: 0x4]
	float CLOSE_TO_SMOKE_TO_SHOOT_SQRT;//[Offset: 0x60, Size: 0x4]
	float CLOSE_TO_SMOKE_TIME_DELTA;//[Offset: 0x64, Size: 0x4]
	float SMOKE_CHECK_DELTA;//[Offset: 0x68, Size: 0x4]
	float DELTA_GRENADE_START_TIME;//[Offset: 0x6c, Size: 0x4]
	float AMBUSH_IF_SMOKE_IN_ZONE;//[Offset: 0x70, Size: 0x4]
	float AMBUSH_IF_SMOKE_RETURN_TO_ATTACK_SEC;//[Offset: 0x74, Size: 0x4]
	bool NO_RUN_FROM_AI_GRENADES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	float MAX_THROW_POWER;//[Offset: 0x7c, Size: 0x4]
	float GrenadePrecision;//[Offset: 0x80, Size: 0x4]
	bool STOP_WHEN_THROW_GRENADE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	float WAIT_TIME_TURN_AWAY;//[Offset: 0x88, Size: 0x4]
	float SMOKE_SUPPRESS_DELTA;//[Offset: 0x8c, Size: 0x4]
	float DAMAGE_GRENADE_SUPPRESS_DELTA;//[Offset: 0x90, Size: 0x4]
	float STUN_SUPPRESS_DELTA;//[Offset: 0x94, Size: 0x4]
	bool CAN_THROW_STRAIGHT_CONTACT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	float STRAIGHT_CONTACT_DELTA_SEC;//[Offset: 0x9c, Size: 0x4]
	int ANG_TYPE;//[Offset: 0xa0, Size: 0x4]
	float MIN_THROW_DIST_PERCENT_0;//[Offset: 0xa4, Size: 0x4]
	float FLASH_MODIF_IS_NIGHTVISION;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: HearingSettings
	float NOISE_POWER_SPRINT;//[Offset: 0x0, Size: 0x4]
	float NOISE_POWER_PRONE;//[Offset: 0x4, Size: 0x4]
	float NOISE_POWER_CROUCH;//[Offset: 0x8, Size: 0x4]
	float NOISE_POWER_WALK;//[Offset: 0xc, Size: 0x4]
	float NOISE_POWER_GUN_FIRE;//[Offset: 0x10, Size: 0x4]
	float NOISE_POWER_SILENCED_FIRE;//[Offset: 0x14, Size: 0x4]
	float NOISE_POWER_DOOR_OPEN;//[Offset: 0x18, Size: 0x4]
	float NOISE_POWER_DOOR_WRECK;//[Offset: 0x1c, Size: 0x4]
	float NOISE_POWER_GRENADE_EXPLOSIVE;//[Offset: 0x20, Size: 0x4]
	float POWER_DANGER;//[Offset: 0x24, Size: 0x4]
	float HEARING_POWER_COEF;//[Offset: 0x28, Size: 0x4]
	float FOOT_STEP_CLOSE_DIST;//[Offset: 0x2c, Size: 0x4]
	float FOOT_STEP_FAR_DIST;//[Offset: 0x30, Size: 0x4]
	float GUN_CLOSE_DIST;//[Offset: 0x34, Size: 0x4]
	float GUN_FAR_DIST;//[Offset: 0x38, Size: 0x4]
	float GUN_HIT_CLOSE_DIST;//[Offset: 0x3c, Size: 0x4]
	float BOT_CLOSE_PANIC_DIST;//[Offset: 0x40, Size: 0x4]
	float DISPERSION_COEF;//[Offset: 0x44, Size: 0x4]
	float DISPERSION_COEF_GUN;//[Offset: 0x48, Size: 0x4]
	float SOUND_DIR_DEEFREE;//[Offset: 0x4c, Size: 0x4]
	float DIST_PLACE_TO_FIND_POINT;//[Offset: 0x50, Size: 0x4]
	float DEAD_BODY_SOUND_RAD;//[Offset: 0x54, Size: 0x4]
	float RESET_TIMER_DIST;//[Offset: 0x58, Size: 0x4]
	float HEAR_DELAY_WHEN_PEACE;//[Offset: 0x5c, Size: 0x4]
	float HEAR_DELAY_WHEN_HAVE_SMT;//[Offset: 0x60, Size: 0x4]
	float LOOK_ONLY_DANGER_DELTA;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: LaySettings
	float DELTA_LAY_CHECK;//[Offset: 0x0, Size: 0x4]
	float DELTA_GETUP;//[Offset: 0x4, Size: 0x4]
	float DELTA_AFTER_GETUP;//[Offset: 0x8, Size: 0x4]
	float CLEAR_POINTS_OF_SCARE_SEC;//[Offset: 0xc, Size: 0x4]
	float MAX_LAY_TIME;//[Offset: 0x10, Size: 0x4]
	float DIST_TO_COVER_TO_LAY;//[Offset: 0x14, Size: 0x4]
	float DIST_TO_COVER_TO_LAY_SQRT;//[Offset: 0x18, Size: 0x4]
	float DIST_ENEMY_NULL_DANGER_LAY;//[Offset: 0x1c, Size: 0x4]
	float DIST_ENEMY_NULL_DANGER_LAY_SQRT;//[Offset: 0x20, Size: 0x4]
	float DIST_ENEMY_GETUP_LAY;//[Offset: 0x24, Size: 0x4]
	float DIST_ENEMY_GETUP_LAY_SQRT;//[Offset: 0x28, Size: 0x4]
	float DIST_ENEMY_CAN_LAY;//[Offset: 0x2c, Size: 0x4]
	float DIST_ENEMY_CAN_LAY_SQRT;//[Offset: 0x30, Size: 0x4]
	float LAY_AIM;//[Offset: 0x34, Size: 0x4]
	float MIN_CAN_LAY_DIST_SQRT;//[Offset: 0x38, Size: 0x4]
	float MIN_CAN_LAY_DIST;//[Offset: 0x3c, Size: 0x4]
	float MAX_CAN_LAY_DIST_SQRT;//[Offset: 0x40, Size: 0x4]
	float MAX_CAN_LAY_DIST;//[Offset: 0x44, Size: 0x4]
	int DAMAGE_TIME_TO_GETUP;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: LookSettings
	float VISIBLE_ANG_NORMAL;//[Offset: 0x0, Size: 0x4]
	float NORMAL_VISION_RADIUS;//[Offset: 0x4, Size: 0x4]
	float NORMAL_VISION_RADIUS_LOST;//[Offset: 0x8, Size: 0x4]
	float VISIBLE_ANG_NIGHT;//[Offset: 0xc, Size: 0x4]
	float NIGHT_VISION_RADIUS;//[Offset: 0x10, Size: 0x4]
	float NIGHT_VISION_RADIUS_LOST;//[Offset: 0x14, Size: 0x4]
	float VISIBLE_ANG_LIGHT;//[Offset: 0x18, Size: 0x4]
	float LIGHT_VISION_RADIUS;//[Offset: 0x1c, Size: 0x4]
	float LIGHT_VISION_RADIUS_LOST;//[Offset: 0x20, Size: 0x4]
	float NORMAL_VISION_COEF;//[Offset: 0x24, Size: 0x4]
	float GRASS_SIGHT_IGNORE_DISTANCE;//[Offset: 0x28, Size: 0x4]
	float GRASS_SIGHT_IGNORE_Z_COORDINATE;//[Offset: 0x2c, Size: 0x4]
	float INGRASS_SIGHT_RADIUS_MIN;//[Offset: 0x30, Size: 0x4]
	float INGRASS_SIGHT_RADIUS_MAX;//[Offset: 0x34, Size: 0x4]
	float RAINY_SIGHT_RADIUS_MIN;//[Offset: 0x38, Size: 0x4]
	float RAINY_SIGHT_RADIUS_MAX;//[Offset: 0x3c, Size: 0x4]
	float INGORE_NOLIGHT_RADIUS;//[Offset: 0x40, Size: 0x4]
	float DIST_NORMAL_SUSPECTED_POINT_INTERVAL;//[Offset: 0x44, Size: 0x4]
	float DIST_DANGER_SUSPECTED_POINT_INTERVAL;//[Offset: 0x48, Size: 0x4]
	float FAR_DISTANCE;//[Offset: 0x4c, Size: 0x4]
	float MIDDLE_DIST;//[Offset: 0x50, Size: 0x4]
	float CLOSE_DIST;//[Offset: 0x54, Size: 0x4]
	float OLD_TIME_POINT;//[Offset: 0x58, Size: 0x4]
	float WAIT_NEW_SENSOR;//[Offset: 0x5c, Size: 0x4]
	float WAIT_NEW__LOOK_SENSOR;//[Offset: 0x60, Size: 0x4]
	float LOOK_AROUND_DELTA;//[Offset: 0x64, Size: 0x4]
	float MAX_VISION_GRASS_METERS;//[Offset: 0x68, Size: 0x4]
	float MAX_VISION_GRASS_METERS_FLARE;//[Offset: 0x6c, Size: 0x4]
	float MAX_VISION_GRASS_METERS_OPT;//[Offset: 0x70, Size: 0x4]
	float MAX_VISION_GRASS_METERS_FLARE_OPT;//[Offset: 0x74, Size: 0x4]
	float LightOnVisionDistance;//[Offset: 0x78, Size: 0x4]
	float POSIBLE_VISION_SPACE;//[Offset: 0x7c, Size: 0x4]
	float GOAL_TO_FULL_DISSAPEAR;//[Offset: 0x80, Size: 0x4]
	float GOAL_TO_FULL_DISSAPEAR_GREEN;//[Offset: 0x84, Size: 0x4]
	float GOAL_TO_FULL_DISSAPEAR_SHOOT;//[Offset: 0x88, Size: 0x4]
	float BODY_DELTA_TIME_SEARCH_SEC;//[Offset: 0x8c, Size: 0x4]
	float ENEMY_LIGHT_ADD;//[Offset: 0x90, Size: 0x4]
	float ENEMY_LIGHT_START_DIST;//[Offset: 0x94, Size: 0x4]
	float DIST_NOT_TO_IGNORE_WALL;//[Offset: 0x98, Size: 0x4]
	float DIST_CHECK_WALL;//[Offset: 0x9c, Size: 0x4]
	float LOOK_LAST_POSENEMY_IF_NO_DANGER_SEC;//[Offset: 0xa0, Size: 0x4]
	float MIN_LOOK_AROUD_TIME;//[Offset: 0xa4, Size: 0x4]
	bool LOOK_THROUGH_GRASS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	float SEC_REPEATED_SEEN;//[Offset: 0xac, Size: 0x4]
	float DIST_SQRT_REPEATED_SEEN;//[Offset: 0xb0, Size: 0x4]
	float DIST_REPEATED_SEEN;//[Offset: 0xb4, Size: 0x4]
	float COEF_REPEATED_SEEN;//[Offset: 0xb8, Size: 0x4]
	float MAX_DIST_CLAMP_TO_SEEN_SPEED;//[Offset: 0xbc, Size: 0x4]
	float NIGHT_VISION_ON;//[Offset: 0xc0, Size: 0x4]
	float NIGHT_VISION_OFF;//[Offset: 0xc4, Size: 0x4]
	float NO_GREEN_DIST;//[Offset: 0xc8, Size: 0x4]
	float NO_GRASS_DIST;//[Offset: 0xcc, Size: 0x4]
	float INSIDE_BUSH_COEF;//[Offset: 0xd0, Size: 0x4]

--------------------------------
Class: MindSettings
	int MIN_SHOOTS_TIME;//[Offset: 0x0, Size: 0x4]
	int MAX_SHOOTS_TIME;//[Offset: 0x4, Size: 0x4]
	float TIME_TO_RUN_TO_COVER_CAUSE_SHOOT_SEC;//[Offset: 0x8, Size: 0x4]
	float MIN_DAMAGE_SCARE;//[Offset: 0xc, Size: 0x4]
	float TIME_TO_FORGOR_ABOUT_ENEMY_SEC;//[Offset: 0x10, Size: 0x4]
	float TIME_TO_FIND_ENEMY;//[Offset: 0x14, Size: 0x4]
	float MAX_AGGRO_BOT_DIST;//[Offset: 0x18, Size: 0x4]
	float HIT_POINT_DETECTION;//[Offset: 0x1c, Size: 0x4]
	float DANGER_POINT_CHOOSE_COEF;//[Offset: 0x20, Size: 0x4]
	float SIMPLE_POINT_CHOOSE_COEF;//[Offset: 0x24, Size: 0x4]
	float LASTSEEN_POINT_CHOOSE_COEF;//[Offset: 0x28, Size: 0x4]
	float COVER_DIST_COEF;//[Offset: 0x2c, Size: 0x4]
	float DIST_TO_FOUND_SQRT;//[Offset: 0x30, Size: 0x4]
	float MAX_AGGRO_BOT_DIST_SQR;//[Offset: 0x34, Size: 0x4]
	float DIST_TO_STOP_RUN_ENEMY;//[Offset: 0x38, Size: 0x4]
	float ENEMY_LOOK_AT_ME_ANG;//[Offset: 0x3c, Size: 0x4]
	float MIN_START_AGGRESION_COEF;//[Offset: 0x40, Size: 0x4]
	float MAX_START_AGGRESION_COEF;//[Offset: 0x44, Size: 0x4]
	float BULLET_FEEL_DIST;//[Offset: 0x48, Size: 0x4]
	float BULLET_FEEL_CLOSE_SDIST;//[Offset: 0x4c, Size: 0x4]
	float ATTACK_IMMEDIATLY_CHANCE_0;//[Offset: 0x50, Size: 0x4]
	float CHANCE_FUCK_YOU_ON_CONTACT;//[Offset: 0x54, Size: 0x4]
	float FRIEND_DEAD_AGR_LOW;//[Offset: 0x58, Size: 0x4]
	float FRIEND_AGR_KILL;//[Offset: 0x5c, Size: 0x4]
	float LAST_ENEMY_LOOK_TO;//[Offset: 0x60, Size: 0x4]
	bool CAN_RECIVE_PLAYER_REQUESTS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool CAN_USE_MEDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	float SUSPETION_POINT_CHANCE_ADD100;//[Offset: 0x68, Size: 0x4]
	bool AMBUSH_WHEN_UNDER_FIRE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	float AMBUSH_WHEN_UNDER_FIRE_TIME_RESIST;//[Offset: 0x70, Size: 0x4]
	float ATTACK_ENEMY_IF_PROTECT_DELTA_LAST_TIME_SEEN;//[Offset: 0x74, Size: 0x4]
	float HOLD_IF_PROTECT_DELTA_LAST_TIME_SEEN;//[Offset: 0x78, Size: 0x4]
	float FIND_COVER_TO_GET_POSITION_WITH_SHOOT;//[Offset: 0x7c, Size: 0x4]
	bool PROTECT_TIME_REAL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	float CHANCE_SHOOT_WHEN_WARN_PLAYER;//[Offset: 0x84, Size: 0x4]
	bool CAN_PANIC_IS_PROTECT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool NO_RUN_AWAY_FOR_SAFE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	float PART_PERCENT_TO_HEAL;//[Offset: 0x8c, Size: 0x4]
	float PROTECT_DELTA_HEAL_SEC;//[Offset: 0x90, Size: 0x4]
	bool CAN_STAND_BY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool CAN_THROW_REQUESTS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	float GROUP_ANY_PHRASE_DELAY;//[Offset: 0x98, Size: 0x4]
	float GROUP_EXACTLY_PHRASE_DELAY;//[Offset: 0x9c, Size: 0x4]
	float DIST_TO_ENEMY_YO_CAN_HEAL;//[Offset: 0xa0, Size: 0x4]
	float CHANCE_TO_STAY_WHEN_WARN_PLAYER;//[Offset: 0xa4, Size: 0x4]
	float DOG_FIGHT_OUT;//[Offset: 0xa8, Size: 0x4]
	float DOG_FIGHT_IN;//[Offset: 0xac, Size: 0x4]
	float PISTOL_SHOTGUN_AMBUSH_DIST;//[Offset: 0xb0, Size: 0x4]
	float STANDART_AMBUSH_DIST;//[Offset: 0xb4, Size: 0x4]
	bool COVER_SELF_ALWAYS_IF_DAMAGED;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	float SEC_TO_MORE_DIST_TO_RUN;//[Offset: 0xbc, Size: 0x4]
	float HEAL_DELAY_SEC;//[Offset: 0xc0, Size: 0x4]
	float HIT_DELAY_WHEN_HAVE_SMT;//[Offset: 0xc4, Size: 0x4]
	float HIT_DELAY_WHEN_PEACE;//[Offset: 0xc8, Size: 0x4]
	bool TALK_WITH_QUERY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	float DANGER_EXPIRE_TIME_MIN;//[Offset: 0xd0, Size: 0x4]
	float DANGER_EXPIRE_TIME_MAX;//[Offset: 0xd4, Size: 0x4]
	float PANIC_RUN_WEIGHT;//[Offset: 0xd8, Size: 0x4]
	float PANIC_SIT_WEIGHT;//[Offset: 0xdc, Size: 0x4]
	float PANIC_LAY_WEIGHT;//[Offset: 0xe0, Size: 0x4]
	float PANIC_NONE_WEIGHT;//[Offset: 0xe4, Size: 0x4]
	float PANIC_SIT_WEIGHT_PEACE;//[Offset: 0xe8, Size: 0x4]
	bool CAN_EXECUTE_REQUESTS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	float DIST_TO_ENEMY_SPOTTED_ON_HIT;//[Offset: 0xf0, Size: 0x4]
	float UNDER_FIRE_PERIOD;//[Offset: 0xf4, Size: 0x4]

--------------------------------
Class: MoveSettings
	float BASE_ROTATE_SPEED;//[Offset: 0x0, Size: 0x4]
	float REACH_DIST;//[Offset: 0x4, Size: 0x4]
	float REACH_DIST_RUN;//[Offset: 0x8, Size: 0x4]
	float START_SLOW_DIST;//[Offset: 0xc, Size: 0x4]
	float BASESTART_SLOW_DIST;//[Offset: 0x10, Size: 0x4]
	float SLOW_COEF;//[Offset: 0x14, Size: 0x4]
	float DIST_TO_CAN_CHANGE_WAY;//[Offset: 0x18, Size: 0x4]
	float DIST_TO_START_RAYCAST;//[Offset: 0x1c, Size: 0x4]
	float BASE_START_SERACH;//[Offset: 0x20, Size: 0x4]
	float UPDATE_TIME_RECAL_WAY;//[Offset: 0x24, Size: 0x4]
	float FAR_DIST;//[Offset: 0x28, Size: 0x4]
	float FAR_DIST_SQR;//[Offset: 0x2c, Size: 0x4]
	float DIST_TO_CAN_CHANGE_WAY_SQR;//[Offset: 0x30, Size: 0x4]
	float DIST_TO_START_RAYCAST_SQR;//[Offset: 0x34, Size: 0x4]
	float BASE_SQRT_START_SERACH;//[Offset: 0x38, Size: 0x4]
	float Y_APPROXIMATION;//[Offset: 0x3c, Size: 0x4]
	float RUN_TO_COVER_MIN;//[Offset: 0x40, Size: 0x4]
	float CHANCE_TO_RUN_IF_NO_AMMO_0;//[Offset: 0x44, Size: 0x4]
	bool RUN_IF_CANT_SHOOT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float RUN_IF_GAOL_FAR_THEN;//[Offset: 0x4c, Size: 0x4]
	float SEC_TO_CHANGE_TO_RUN;//[Offset: 0x50, Size: 0x4]
	bool ETERNITY_STAMINA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: PatrolSettings
	float LOOK_TIME_BASE;//[Offset: 0x0, Size: 0x4]
	float RESERVE_TIME_STAY;//[Offset: 0x4, Size: 0x4]
	float RESERVE_LOOT_TIME_STAY;//[Offset: 0x8, Size: 0x4]
	float FRIEND_SEARCH_SEC;//[Offset: 0xc, Size: 0x4]
	float TALK_DELAY;//[Offset: 0x10, Size: 0x4]
	float MIN_TALK_DELAY;//[Offset: 0x14, Size: 0x4]
	float TALK_DELAY_BIG;//[Offset: 0x18, Size: 0x4]
	float CHANGE_WAY_TIME;//[Offset: 0x1c, Size: 0x4]
	float MIN_DIST_TO_CLOSE_TALK;//[Offset: 0x20, Size: 0x4]
	float VISION_DIST_COEF_PEACE;//[Offset: 0x24, Size: 0x4]
	float MIN_DIST_TO_CLOSE_TALK_SQR;//[Offset: 0x28, Size: 0x4]
	float CHANCE_TO_CUT_WAY_0;//[Offset: 0x2c, Size: 0x4]
	float CUT_WAY_MIN_0;//[Offset: 0x30, Size: 0x4]
	float CUT_WAY_MAX_0;//[Offset: 0x34, Size: 0x4]
	float CHANCE_TO_CHANGE_WAY_0;//[Offset: 0x38, Size: 0x4]
	int CHANCE_TO_SHOOT_DEADBODY;//[Offset: 0x3c, Size: 0x4]
	float SUSPETION_PLACE_LIFETIME;//[Offset: 0x40, Size: 0x4]
	float RESERVE_OUT_TIME;//[Offset: 0x44, Size: 0x4]
	float CLOSE_TO_SELECT_RESERV_WAY;//[Offset: 0x48, Size: 0x4]
	float MAX_YDIST_TO_START_WARN_REQUEST_TO_REQUESTER;//[Offset: 0x4c, Size: 0x4]
	bool CAN_CHOOSE_RESERV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	float HEAD_PERIOD_TIME;//[Offset: 0x54, Size: 0x4]
	float HEAD_FRONT_PERIOD_TIME;//[Offset: 0x58, Size: 0x4]
	float CHANCE_TO_PLAY_GESTURE_WHEN_CLOSE;//[Offset: 0x5c, Size: 0x4]
	float HEAD_TURN_SPEED;//[Offset: 0x60, Size: 0x4]
	float HEAD_ANG_ROTATE;//[Offset: 0x64, Size: 0x4]
	float CHANCE_TO_PLAY_VOICE_WHEN_CLOSE;//[Offset: 0x68, Size: 0x4]
	float GO_TO_NEXT_POINT_DELTA;//[Offset: 0x6c, Size: 0x4]
	float GO_TO_NEXT_POINT_DELTA_RESERV_WAY;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: ScatteringSettings
	float MinScatter;//[Offset: 0x0, Size: 0x4]
	float WorkingScatter;//[Offset: 0x4, Size: 0x4]
	float MaxScatter;//[Offset: 0x8, Size: 0x4]
	float SpeedUp;//[Offset: 0xc, Size: 0x4]
	float SpeedUpAim;//[Offset: 0x10, Size: 0x4]
	float SpeedDown;//[Offset: 0x14, Size: 0x4]
	float ToSlowBotSpeed;//[Offset: 0x18, Size: 0x4]
	float ToLowBotSpeed;//[Offset: 0x1c, Size: 0x4]
	float ToUpBotSpeed;//[Offset: 0x20, Size: 0x4]
	float MovingSlowCoef;//[Offset: 0x24, Size: 0x4]
	float ToLowBotAngularSpeed;//[Offset: 0x28, Size: 0x4]
	float ToStopBotAngularSpeed;//[Offset: 0x2c, Size: 0x4]
	float FromShot;//[Offset: 0x30, Size: 0x4]
	float TracerCoef;//[Offset: 0x34, Size: 0x4]
	float HandDamageScatteringMinMax;//[Offset: 0x38, Size: 0x4]
	float HandDamageAccuracySpeed;//[Offset: 0x3c, Size: 0x4]
	float Caution;//[Offset: 0x40, Size: 0x4]
	float ToCaution;//[Offset: 0x44, Size: 0x4]
	float RecoilControlCoefShootDone;//[Offset: 0x48, Size: 0x4]
	float RecoilControlCoefShootDoneAuto;//[Offset: 0x4c, Size: 0x4]
	float AMPLITUDE_FACTOR;//[Offset: 0x50, Size: 0x4]
	float AMPLITUDE_SPEED;//[Offset: 0x54, Size: 0x4]
	float DIST_FROM_OLD_POINT_TO_NOT_AIM;//[Offset: 0x58, Size: 0x4]
	float DIST_FROM_OLD_POINT_TO_NOT_AIM_SQRT;//[Offset: 0x5c, Size: 0x4]
	float DIST_NOT_TO_SHOOT;//[Offset: 0x60, Size: 0x4]
	float PoseChnageCoef;//[Offset: 0x64, Size: 0x4]
	float LayFactor;//[Offset: 0x68, Size: 0x4]
	float RecoilYCoef;//[Offset: 0x6c, Size: 0x4]
	float RecoilYCoefSppedDown;//[Offset: 0x70, Size: 0x4]
	float RecoilYMax;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: ShootSettings
	float UA_MAX_RECOIL_TIME;//[Offset: 0x0, Size: 0x4]
	float UA_SHOOT_POSITION_ZOFFSET;//[Offset: 0x4, Size: 0x4]
	float RECOIL_TIME_NORMALIZE;//[Offset: 0x8, Size: 0x4]
	float RECOIL_PER_METER;//[Offset: 0xc, Size: 0x4]
	float MAX_RECOIL_PER_METER;//[Offset: 0x10, Size: 0x4]
	float HORIZONT_RECOIL_COEF;//[Offset: 0x14, Size: 0x4]
	float WAIT_NEXT_SINGLE_SHOT;//[Offset: 0x18, Size: 0x4]
	float WAIT_NEXT_STATIONARY_BULLET;//[Offset: 0x1c, Size: 0x4]
	float WAIT_NEXT_STATIONARY_GRENADE;//[Offset: 0x20, Size: 0x4]
	float WAIT_NEXT_SINGLE_SHOT_LONG_MAX;//[Offset: 0x24, Size: 0x4]
	float WAIT_NEXT_SINGLE_SHOT_LONG_MIN;//[Offset: 0x28, Size: 0x4]
	float MARKSMAN_DIST_SEK_COEF;//[Offset: 0x2c, Size: 0x4]
	float FINGER_HOLD_SINGLE_SHOT;//[Offset: 0x30, Size: 0x4]
	float FINGER_HOLD_STATIONARY_BULLET;//[Offset: 0x34, Size: 0x4]
	float FINGER_HOLD_STATIONARY_GRENADE;//[Offset: 0x38, Size: 0x4]
	float BASE_AUTOMATIC_TIME;//[Offset: 0x3c, Size: 0x4]
	float AUTOMATIC_FIRE_SCATTERING_COEF;//[Offset: 0x40, Size: 0x4]
	float CHANCE_TO_CHANGE_TO_AUTOMATIC_FIRE;//[Offset: 0x44, Size: 0x4]
	float FAR_DIST_ENEMY;//[Offset: 0x48, Size: 0x4]
	int SHOOT_FROM_COVER;//[Offset: 0x4c, Size: 0x4]
	float FAR_DIST_ENEMY_SQR;//[Offset: 0x50, Size: 0x4]
	float MAX_DIST_COEF;//[Offset: 0x54, Size: 0x4]
	float RECOIL_DELTA_PRESS;//[Offset: 0x58, Size: 0x4]
	float RUN_DIST_NO_AMMO;//[Offset: 0x5c, Size: 0x4]
	float RUN_DIST_NO_AMMO_SQRT;//[Offset: 0x60, Size: 0x4]
	int CAN_SHOOTS_TIME_TO_AMBUSH;//[Offset: 0x64, Size: 0x4]
	float NOT_TO_SEE_ENEMY_TO_WANT_RELOAD_PERCENT;//[Offset: 0x68, Size: 0x4]
	float NOT_TO_SEE_ENEMY_TO_WANT_RELOAD_SEC;//[Offset: 0x6c, Size: 0x4]
	float RELOAD_PECNET_NO_ENEMY;//[Offset: 0x70, Size: 0x4]
	float CHANCE_TO_CHANGE_WEAPON;//[Offset: 0x74, Size: 0x4]
	float CHANCE_TO_CHANGE_WEAPON_WITH_HELMET;//[Offset: 0x78, Size: 0x4]
	float LOW_DIST_TO_CHANGE_WEAPON;//[Offset: 0x7c, Size: 0x4]
	float FAR_DIST_TO_CHANGE_WEAPON;//[Offset: 0x80, Size: 0x4]
	float SUPPRESS_BY_SHOOT_TIME;//[Offset: 0x84, Size: 0x4]
	int SUPPRESS_TRIGGERS_DOWN;//[Offset: 0x88, Size: 0x4]
	float DIST_TO_CHANGE_TO_MAIN;//[Offset: 0x8c, Size: 0x4]
	float AGS_17_DIST_TO_LEAVE;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: CurrentSettings
	float LayChanceDangerCoef;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: CurveSettings
	CurveFloat* SightCurveDaytime;//[Offset: 0x0, Size: 0x8]
	CurveFloat* SightCureOutLight;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: NPCAIWeaponConfigTableRow.TableRowBase
	FString WeaponBlueprintName;//[Offset: 0x8, Size: 0x10]
	int64 WeaponId;//[Offset: 0x18, Size: 0x8]
	float WeaponBaseSpread;//[Offset: 0x20, Size: 0x4]
	float WeaponBaseRecoil;//[Offset: 0x24, Size: 0x4]
	int RecalcMustTimeMin;//[Offset: 0x28, Size: 0x4]
	int RecalcMustTimeMax;//[Offset: 0x2c, Size: 0x4]
	float FireDistanceMin;//[Offset: 0x30, Size: 0x4]
	float FireDistanceMax;//[Offset: 0x34, Size: 0x4]
	float FireIntervalMin;//[Offset: 0x38, Size: 0x4]
	float FireIntervalMax;//[Offset: 0x3c, Size: 0x4]
	int ReloadCountMin;//[Offset: 0x40, Size: 0x4]
	int ReloadCountMax;//[Offset: 0x44, Size: 0x4]
	class Actor* DefaultBulletClass;//[Offset: 0x48, Size: 0x28]

--------------------------------
Class: NPCAIStatics.BlueprintFunctionLibrary.Object
	bool VectorsIsClosed(out const Vector A, out const Vector B, float XYRange, float ZRange);// 0x569de3fee041
	float VectorClockwiseAngleR(out const Vector A, out const Vector B);// 0x569ce3fee041
	float VectorAngleR(out const Vector A, out const Vector B, bool bDoNomalize);// 0x569be3fee041
	bool VectorAngleIsClockwise(out const Vector A, out const Vector B);// 0x569ae3fee041
	float VectorAngleD(out const Vector A, out const Vector B, bool bDoNomalize);// 0x5699e3fee041
	void UnProne(Character* AICharacter);// 0x5698e3fee041
	void UnCrouch(Character* AICharacter);// 0x5697e3fee041
	float TakeDamage(Actor* Actor, float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x5696e3fee041
	void StopToTakeCover(Character* AICharacter);// 0x5695e3fee041
	void StopActiveMovement(Character* AICharacter);// 0x5694e3fee041
	bool SetShootCountRnage(Character* AICharacter, int MinRecalcCount, int MaxRecalcCount);// 0x5693e3fee041
	void SetCollisionByFBox(BoxComponent* BoxCollision, out const Box Box);// 0x5692e3fee041
	Vector RotateOnAngleUp(out const Vector InVector, float InAngleDegree);// 0x5691e3fee041
	Rotator RInterpTo(out const Rotator Current, out const Rotator Target, float DeltaTime, float InterpSpeedV, float InterpSpeedH);// 0x5690e3fee041
	Rotator RInterpConstantTo(out const Rotator Current, out const Rotator Target, float DeltaTime, float InterpSpeedV, float InterpSpeedH);// 0x568fe3fee041
	void RemoveItemsFromVectors(out const Vector[] inArray, out const Vector Location, float XYRange, float ZRange);// 0x568ee3fee041
	void RegisterPawnToSenseSource(Actor* InAIPawn);// 0x568de3fee041
	float RandomNormal(float Min, float Max);// 0x568ce3fee041
	void Prone(Character* AICharacter);// 0x568be3fee041
	void PrintBTNodeExecuteMessageWithEventName(Actor* InActor, const BTNode* InNode, FString Tag, FString Message, bool bLogTime, FString FnName);// 0x568ae3fee041
	void PrintBTNodeExecuteMessage(Actor* InActor, const BTNode* InNode, FString Tag, FString Message, bool bLogTime);// 0x5689e3fee041
	void PlayAISoundByType(Character* AICharacter, enum CurrType);// 0x5688e3fee041
	void OnAIBeginToRunBT(AIController* InAIController);// 0x5687e3fee041
	void LogBPEnumDefaultNames(Object* BPEnum);// 0x5686e3fee041
	bool LineTraceIsHit(const Object* WorldContext, out const Vector StartPos, out const Vector EndPos, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore);// 0x5685e3fee041
	bool LineCylinderIntersection(out const Vector LineStartPoint, out const Vector LineEndPoint, out const Vector CylinderCenter, out const float CylinderZExtent, out const float CylinderRadius);// 0x5684e3fee041
	bool IsTeamFriendly(Actor* AIPawn, Actor* InTarget);// 0x5683e3fee041
	bool IsTeamEnemy(Actor* AIPawn, Actor* InTarget);// 0x5682e3fee041
	bool IsTeamAlly(Actor* AIPawn, Actor* InTarget);// 0x5681e3fee041
	bool IsTeachingAI(Actor* InPawnOrCtrl);// 0x5680e3fee041
	bool IsTargetDead(Actor* AIPawn, Actor* TargetPawn);// 0x567fe3fee041
	bool IsTakingCover(Character* AICharacter);// 0x567ee3fee041
	bool IsStandaloneTutorialGame(Object* WorldContext);// 0x567de3fee041
	bool IsSameFrame(const float T1, const float T2);// 0x567ce3fee041
	bool IsReady(Actor* Actor);// 0x567be3fee041
	bool IsPMCAI(Actor* InPawnOrCtrl);// 0x567ae3fee041
	bool IsPlayingAnimation(Character* InAI);// 0x5679e3fee041
	bool IsNPCBoss(Actor* InAIPawn);// 0x5678e3fee041
	bool IsNPCAICharacter(Actor* InAIPawn);// 0x5677e3fee041
	bool IsMoving(Character* Character);// 0x5676e3fee041
	bool IsLastMoveSuccess(Character* InAI);// 0x5675e3fee041
	bool IsInGrass(Character* InCharacter, NPCAIPerceptionAssistActor* PerceptionAssist);// 0x5674e3fee041
	bool IsInAbilityState(Character* AIPawn, out const FName GameplayTagName);// 0x5673e3fee041
	bool IsEnemy(Actor* AIPawn, Actor* InTarget);// 0x5672e3fee041
	bool IsDead(Actor* Actor);// 0x5671e3fee041
	bool IsActive(Actor* Actor);// 0x5670e3fee041
	byte GetWeaponUseTraceChannel(Character* AICharacter);// 0x566fe3fee041
	float GetTimeSeconds(const Object* WorldContext);// 0x566ee3fee041
	TacticSystemActor* GetTacticSystemActor(const Object* WorldContext);// 0x566de3fee041
	Vector GetSingleBodyPartLocation(Character* InAICharacter, Character* InCheckTarget, enum InBodyPartType);// 0x566ce3fee041
	bool GetRandomFoliageTree(const Object* WorldContext, out const Vector InCenter, out Vector OutLocation, out Vector OutExtent, float InRadiusScope, float TreeMinHeight, float TreeMaxHeight);// 0x566be3fee041
	NPCAIPerceptionAssistActor* GetPerceptionAssistInWorld(const Object* WorldContext);// 0x566ae3fee041
	NPCAIPerceptionAssistActor* GetPerceptionAssistActor(const Object* WorldContext);// 0x5669e3fee041
	NPCAIGroupRequestController* GetOrCreateGroupRequestController(Character* InAICharacter);// 0x5668e3fee041
	Vector GetMuzzleFlashSocketLocation(Character* InCharacter);// 0x5667e3fee041
	byte GetLookSightUseTraceChannel(Character* AICharacter);// 0x5666e3fee041
	Vector GetLocation(Actor* InAI);// 0x5665e3fee041
	NPCAIHNavActor* GetHierarchicalNavigation(Object* WorldContextObject);// 0x5664e3fee041
	float GetHealthMax(Actor* Actor);// 0x5663e3fee041
	float GetHealth(Actor* Actor);// 0x5662e3fee041
	NPCAIGroupRequestController* GetGroupRequestController(Character* InAICharacter);// 0x5661e3fee041
	void GetFBoxVertexs2D(out const Box Box, out Vector2D[] Vertexs);// 0x5660e3fee041
	void GetFBoxVertexs(out const Box Box, out Vector[] Vertexs);// 0x565fe3fee041
	NPCAICoverEnvQueryData* GetEQSData(Actor* AIPawn, int QueryID);// 0x565ee3fee041
	float GetCurrentFogDensity(const Object* WorldContext);// 0x565de3fee041
	CoverSystemActor* GetCoverSystemActor(const Object* WorldContext);// 0x565ce3fee041
	float GetBodyPartEndurace(Actor* InAIPawn, Actor* InTargetPawn, enum InBodyPart);// 0x565be3fee041
	float GetAngOfNormazedVectors(out const Vector v1, out const Vector v2, bool ToAngle, bool ToAbs);// 0x565ae3fee041
	AISGDoorManager* GetAISGDoorManager(const Object* WorldContext);// 0x5659e3fee041
	AISceneEventsTriggerManager* GetAISceneEventsTriggerManager(const Object* WorldContext);// 0x5658e3fee041
	NPCAIPropertyComponent* GetAIPropertyComponentByClass(AIController* InAIController, class NPCAIPropertyComponent InPropertyClass);// 0x5657e3fee041
	NPCAIPerceptionDynamicActor* GetAIPerceptionDynamicActor(const Object* WorldContext);// 0x5656e3fee041
	enum GetAIMainType(Actor* InPawnOrCtrl);// 0x5655e3fee041
	AIController* GetAIController(Actor* InAI);// 0x5654e3fee041
	Character* GetAICharacter(Actor* InAI);// 0x5653e3fee041
	enum GetAIBodyPartTypeByHitGroupType(Actor* InAIPawn, byte HitGroupType);// 0x5652e3fee041
	bool FindNearestFromVectors(out const Vector[] inArray, out const Vector Location, out Vector OutPoint, out float OutMinDistance);// 0x5651e3fee041
	void Crouch(Character* AICharacter);// 0x5650e3fee041
	float CreateRandom(float Value, float Fraction);// 0x564fe3fee041
	int CalculateCharacterInLightValue(Character* InAICharacter, Character* InTarget);// 0x564ee3fee041
	double BoxMullerNormal();// 0x564de3fee041
	double BoxMuller(double Mean, double StdDev);// 0x564ce3fee041
	void BoardcastDrawDebugLine(AIController* InAIController, int InDrawID, Vector InStart, Vector InEnd, Color InColor, float InTime, float InThickness);// 0x564be3fee041
	void BeginToTakeCoverCrouch(Character* AICharacter);// 0x564ae3fee041
	void BeginToTakeCover(Character* AICharacter);// 0x5649e3fee041
	float AngleNormalized360(out const float Value);// 0x5648e3fee041

--------------------------------
Class: NPCAIStaticsInterface.Interface.Object
	void SetAIFactionType(byte InFactionType);// 0x56bde3fee041
	bool ModifyCurrentEndurance(float MaxRatio);// 0x56bce3fee041
	bool IsTeamFriendly(Actor* InTarget);// 0x56bbe3fee041
	bool IsTeamEnemy(Actor* InTarget);// 0x56bae3fee041
	bool IsTeamAlly(Actor* InTarget);// 0x56b9e3fee041
	bool IsScavPlayer(Character* InPawn);// 0x56b8e3fee041
	bool IsInTransitionAnim(Character* Character);// 0x56b7e3fee041
	bool IsInAbilityState(Character* InPawn, out const FName GameplayTagName);// 0x56b6e3fee041
	bool IsFriendlyFactionType(byte RelationType);// 0x56b5e3fee041
	bool IsEnemyArmorCanProtected(Actor* InTarget);// 0x56b4e3fee041
	bool IsAIReady(Actor* TargetPawn);// 0x56b3e3fee041
	bool IsAIActive(Actor* TargetPawn);// 0x56b2e3fee041
	void InitAITrackLOGTemplateStr(enum LogType, out FString TemplateStr);// 0x56b1e3fee041
	void GetTargetBodyPartEnduranceRatios(Actor* InTarget, out float[] OutEnduranceRatios);// 0x56b0e3fee041
	Vector GetPawnViewLocationIfStand();// 0x56afe3fee041
	Vector GetPawnViewLocationIfCrouch();// 0x56aee3fee041
	void GetNearestPlayerList(float InRadius, bool InSight, out Actor*[] PlayerList, byte TeamType);// 0x56ade3fee041
	Actor* GetNearestPlayer(float InRadius, bool InSight, byte TeamType);// 0x56ace3fee041
	Actor* GetFootSounderThrower(Actor* Projectile, out bool OutbAttractAI);// 0x56abe3fee041
	byte GetFactionRelationTypeWithTarget(Character* TargetPawn);// 0x56aae3fee041
	NPCAICoverEnvQueryData* GetEQSData(int QueryID);// 0x56a9e3fee041
	float GetCurrentWeaponZoomInTimes(Actor* TargetPawn);// 0x56a8e3fee041
	int GetCurrentWeaponPenetrationLevel();// 0x56a7e3fee041
	bool GetBodyPartInArmorProtected(Actor* InTarget, out enum[] OutBodyParts);// 0x56a6e3fee041
	float GetBodyPartEndurace(Actor* InTarget, enum InBodyPart);// 0x56a5e3fee041
	void GetAliveTeamMembers(Character* Player, out Character*[] OutTeamMembers);// 0x56a4e3fee041
	int64 GetAIPathGroupID();// 0x56a3e3fee041
	enum GetAIMainType();// 0x56a2e3fee041
	int64 GetAIID();// 0x56a1e3fee041
	byte GetAIFactionType();// 0x56a0e3fee041
	enum GetAIBodyPartTypeByHitGroupType(byte HitGroupType);// 0x569fe3fee041
	bool ChangeAIProfileFaction(class NPCAIFactionComponent FactionClass);// 0x569ee3fee041

--------------------------------
Class: NPCAISteepZoneRenderingComponent.NPCAITestingRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NPCAISteepZoneTestingActor.NPCAITestingActor.Actor.Object
	SteepZoneDeleteSettings Settings;//[Offset: 0x318, Size: 0x34]
	NPCAISteepZoneDeleter Deleter;//[Offset: 0x350, Size: 0x180]
	float PolyZOffset;//[Offset: 0x4d0, Size: 0x4]
	float NormalScaling;//[Offset: 0x4d4, Size: 0x4]
	float NormalThickness;//[Offset: 0x4d8, Size: 0x4]
	float PolyNormalIncludedAngleTolerance;//[Offset: 0x4dc, Size: 0x4]
	float PointNormalIncludedAngleTolerance;//[Offset: 0x4e0, Size: 0x4]
	float DisplayableSteepDensity;//[Offset: 0x4e4, Size: 0x4]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e8, Size: 0x1]
	bool bDrawNavMeshPoly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e8, Size: 0x1]
	bool bDrawDetailTriangle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4e8, Size: 0x1]
	bool bDrawDetailTriangleNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4e8, Size: 0x1]
	bool bDrawSamplePoint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4e8, Size: 0x1]
	bool bDrawSamplePointNormal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4e8, Size: 0x1]
	bool bDrawSteepZone;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4e8, Size: 0x1]

--------------------------------
Class: NPCAISteepZoneDeleter
	Object* WorldContextObject;//[Offset: 0x0, Size: 0x8]
	World* World;//[Offset: 0x20, Size: 0x8]
	RecastNavMesh* MainNavData;//[Offset: 0x30, Size: 0x8]
	NPCAINavMeshManager* NavMeshManager;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NPCAISteeringInterface.Interface.Object

--------------------------------
Class: NPCAISubSystemStatics.BlueprintFunctionLibrary.Object
	void UpdateTargetInfoOnTakeDamage(Actor* Casuer, Actor* Taker);// 0x5775e3fee041
	void UpdateTargetInfoOnCauseDamage(Actor* Casuer, Actor* Taker);// 0x5774e3fee041
	bool UpdateSteeringLocationByViewDirection(Actor* AIOwner, out const Vector ViewDir, enum Type);// 0x5773e3fee041
	bool UpdateSteeringLocation(Actor* AIOwner, out const Vector Location, enum Type);// 0x5772e3fee041
	void UpdatePersistentFireSetting(Actor* AIPawn, bool CalcShoot, bool CalcSight, Actor* EnemyTarget, out const Vector FireLocation, float FireInterval);// 0x5771e3fee041
	void UnregisterSceneEvent(const Object* WorldContext, AISceneEventMessage* SceneEvent);// 0x5770e3fee041
	void UnLockGoalEnemy(Actor* AIPawn);// 0x576fe3fee041
	bool TryProne(Actor* AIOwner);// 0x576ee3fee041
	bool TryLean(Actor* AIOwner, enum LeanType);// 0x576de3fee041
	bool TryCrouchSliding(Actor* AIOwner);// 0x576ce3fee041
	bool TryCrouch(Actor* AIOwner);// 0x576be3fee041
	bool TryCasualStandingPose(Actor* AIOwner, bool bCasual);// 0x576ae3fee041
	int TriggerSceneEventDIY(const Object* WorldContext, enum EventID, out const Vector Location, float ValidScope, float ValidTime, out const int64[] AIIDs, out const int64[] AIPathGroupIDs, float CoverRange);// 0x5769e3fee041
	int TriggerSceneEvent(const Object* WorldContext, enum EventID, out const Vector Location, float CoverRange);// 0x5768e3fee041
	bool TestDir(Object* WorldContextObject, out const Vector HeadPosition, out const Vector Direction, float Distance, out Vector OutPosition);// 0x5767e3fee041
	Vector Test4Sides(Object* WorldContextObject, Vector Direction, out const Vector HeadPosition, float PATROL_MIN_LIGHT_DIST);// 0x5766e3fee041
	void StopRescueOtherDBNOTeammate(Actor* InAIPawn);// 0x5765e3fee041
	void StopPickUpBoxContainer(Actor* InAIPawn);// 0x5764e3fee041
	void StopPersistentFire(Actor* AIPawn);// 0x5763e3fee041
	void StartPersistentFire(Actor* AIPawn, float DurationTime);// 0x5762e3fee041
	void SetupTearGasAreas(Object* WorldContextObject, out const Vector Center, out const Vector EffectExtent, bool bActiving);// 0x5761e3fee041
	void SetupFlanking(Actor* InOwner, out const Vector InDangerPoint, out const Vector InDangerPointDirection, float InDangerPointEffectRange);// 0x5760e3fee041
	void SetupBuringAreas(Object* WorldContextObject, out const Vector[] FlameCenters, float EffectRadius, bool bBurning);// 0x575fe3fee041
	void SetSteeringToPoint(Actor* AIOwner, out const Vector Location);// 0x575ee3fee041
	void SetSteeringToMoveDirection(Actor* AIOwner);// 0x575de3fee041
	void SetSteeringToAimingFinish(Actor* AIOwner);// 0x575ce3fee041
	void SetSteeringToAiming(Actor* AIOwner);// 0x575be3fee041
	void SetSightWeakenTime(Actor* AIPawn, float WeakenTime);// 0x575ae3fee041
	void SetPanicPoint(Actor* AIOwner, bool IsDanger, Vector DangerPoint, float ExpiredTime);// 0x5759e3fee041
	void SetIsInTryLeanShoot(Actor* InAIPawn, bool bTryLean, float CheckInterval);// 0x5758e3fee041
	void SetGroupEnemyHatredValue(Actor* InAIOwner, Actor* InEnemy, int InHatredValue, float IndateTime, bool InbCalucateGoalEnemy);// 0x5757e3fee041
	void SetEnemyHatredValue(Actor* InAIPawn, Actor* InEnemy, int InHatredValue, float IndateTime, bool bEffectGroup, bool InbCalucateGoalEnemy);// 0x5756e3fee041
	void SetCurrentMoveType(Actor* AIOwner, enum InMoveType);// 0x5755e3fee041
	void SetAvoidNavAreas(Object* WorldContext, out const int64[] AvoidPolyRefs, bool bAvoid);// 0x5754e3fee041
	void SetAimingBodyPartTrend(Actor* AIPawn, enum AimingTrend);// 0x5753e3fee041
	BTService* SearchBehaviorService(AIController* InAIController, FString InNodeName);// 0x5752e3fee041
	void ResumeAIBehaviorLogic(Actor* AIPawn, FString reason);// 0x5751e3fee041
	bool RescueDBNOAITeammate(Actor* InAIPawn, Actor* InTarget);// 0x5750e3fee041
	void RemoveSuspectedPoint(Actor* AIPawn, NPCAIAttentionPoint* InAttentionPoint, bool bRemoveNearCanSee);// 0x574fe3fee041
	void RemoveEnemyInAllGroup(Actor* InEnemy);// 0x574ee3fee041
	void RemoveAimingTypeInRuntime(Actor* InAIPawn, enum InBodyBulk, bool bIsForPlayer);// 0x574de3fee041
	int RegisterSceneEvent(const Object* WorldContext, AISceneEventMessage* SceneEvent, out const Vector Location, float CoverRange);// 0x574ce3fee041
	void RefreshNavigationMainData(Object* WorldContext);// 0x574be3fee041
	void QuitToDynamicGroup(Actor* InAIPawn);// 0x574ae3fee041
	bool PointIsInMolotov(Actor* InAIPawn, Vector InPoint);// 0x5749e3fee041
	bool PointIsInBombRange(const Object* WorldContext, Vector InPoint, enum InTile);// 0x5748e3fee041
	bool PickupInventory(Actor* InAIPawn, Actor* Inventory, bool bCheckIsCanAdd, float WaitSeconds);// 0x5747e3fee041
	void PickUpBoxContainer(Actor* InAIPawn, Actor* BoxContainer, bool bCheckIsCanAdd, float InDelayStarttime, float InPickUpInterval);// 0x5746e3fee041
	void PauseAIBehaviorLogic(Actor* AIPawn, FString reason, float PauseTime);// 0x5745e3fee041
	void OpenDoor(Actor* InAIPawn, Actor* InDoor);// 0x5744e3fee041
	void MultiJoinToDynamicGroup(int DyGroupId, out const Actor*[] InAIPawns);// 0x5743e3fee041
	bool ModifyAICurrentEndurance(Actor* AIPawn, float MaxRatio);// 0x5742e3fee041
	void LookToPoint(Actor* AIOwner, Vector InPoint, float InRotateSpeedInDegree, float AcceleratedSpeedInDegree, bool bQuickly);// 0x5741e3fee041
	void LookToMovingDirection(Actor* AIOwner, float RotateSpeedInDegree, float AcceleratedSpeedInDegree);// 0x5740e3fee041
	void LockLookToPoint(Actor* AIOwner, float LockTime);// 0x573fe3fee041
	NPCAITargetInfo* LockGoalEnemy(Actor* AIPawn, Actor* EnemyPawn);// 0x573ee3fee041
	void JoinToGroupTogetherForTest(out const Actor*[] AIPawns);// 0x573de3fee041
	bool JoinToDynamicGroup(int DyGroupId, Actor* InAIPawn);// 0x573ce3fee041
	void IsSightWeakenByFlashProjectile(Actor* AIPawn, out bool IsWeaken, out float RemainTime);// 0x573be3fee041
	bool IsSightWeakenByFlashLight(Actor* AIPawn, out float SightWeaknScaleValue, out Vector LightLocation, out Character* LightOwnerCharacter);// 0x573ae3fee041
	bool IsPersistentFiring(Actor* AIPawn);// 0x5739e3fee041
	bool IsOpeningDoor(Actor* AIPawn);// 0x5738e3fee041
	bool IsLODStatus(Actor* AIPawn);// 0x5737e3fee041
	NPCAITargetInfo* IsLockingGoalEnemy(Actor* AIPawn, out bool IsLocking);// 0x5736e3fee041
	bool IsLockDoor(Actor* InAIPawn, Actor* InDoor);// 0x5735e3fee041
	bool IsInSteeringType(Actor* AIOwner, enum Type);// 0x5734e3fee041
	bool IsInOpenDoorStatus(Actor* InAIPawn);// 0x5733e3fee041
	bool IsInMolotovHurted(Actor* InAIPawn);// 0x5732e3fee041
	bool IsInDynamicGroup(Actor* InAIPawn);// 0x5731e3fee041
	bool IsInCrossFireState(Actor* AIPawn);// 0x5730e3fee041
	bool IsGroupEnemy(Actor* InAIOwner, Actor* InTarget);// 0x572fe3fee041
	bool IsGroupAlly(Actor* InAIOwner, Actor* InTarget);// 0x572ee3fee041
	bool IsGoalPositionReached(Actor* InOwner);// 0x572de3fee041
	bool IsGoalEnemyThreaten(Actor* InAIPawn, float ThreatenDistance);// 0x572ce3fee041
	bool IsFaceToPoint(Actor* InAIPawn, Vector InPoint);// 0x572be3fee041
	bool IsEnoughAllyKillInRange(Actor* InAIPawn, out const Vector InSearchCenter, float InSearchRange, float InSearchTime, int InSearchCount);// 0x572ae3fee041
	bool IsEnoughAllyDeathInRange(Actor* InAIPawn, out const Vector InSearchCenter, float InSearchRange, float InSearchTime, int InSearchCount);// 0x5729e3fee041
	bool IsEnabledAimingBodyPartLOGDebug(Actor* AIPawn);// 0x5728e3fee041
	bool IsDoorOpened(Actor* InAIPawn, Actor* InDoor);// 0x5727e3fee041
	Actor* IsDoorInDirectionOfMe(Actor* InAIPawn, out const Vector InDirection, float InRange);// 0x5726e3fee041
	bool IsDBNO(Actor* InAIPawn, Actor* InTargetPawn);// 0x5725e3fee041
	bool IsCrouchSliding(Actor* AIOwner);// 0x5724e3fee041
	bool IsCompletedPickUpBoxContainer(Actor* InAIPawn);// 0x5723e3fee041
	bool IsCloseToDestination(Actor* InOwner, float InCloseRadius);// 0x5722e3fee041
	bool IsBeingFireHited(Actor* InAIPawn, float InTime, out Actor* OutFirePawn);// 0x5721e3fee041
	bool IsAIInBombRange(Actor* AIPawn);// 0x5720e3fee041
	bool IsAIDBNO(Actor* InAIPawn);// 0x571fe3fee041
	bool HasOthersAllyInShootScope(Actor* InAIPawn);// 0x571ee3fee041
	bool HasNoDBNOAllyInGroup(Actor* InAIOwner);// 0x571de3fee041
	void GroupAllyDeathToDo(Actor* InAIPawn, out const Vector InKillerLocation);// 0x571ce3fee041
	void GoToPoint(Actor* InOwner, Vector InPosition, out const Volume*[] AvoidVolumes, bool bSlowAtTheEnd, float InReachDist, bool bShoudGetUp, bool bGetUpWithCheck, Actor* CaredActor, float CaredActorEffectRadius, int GoDecision);// 0x571be3fee041
	void GoDirectly(Actor* InOwner, out const Vector Direction, float Seconds, Vector InBlendingVelocity);// 0x571ae3fee041
	bool GiveInventoryToAI(Actor* AIPawn, int64 ItemID);// 0x5719e3fee041
	NPCAIZoneGroupInfo* GetZoneGroupInfo(Actor* InAIOwner);// 0x5718e3fee041
	int GetZoneGroupAllyTotalDeathNum(Actor* AIPawn);// 0x5717e3fee041
	NPCAIAttentionPoint* GetYoungestSuspectedPoint(Actor* InCharacter, float InRadius, bool InPriorityDanger);// 0x5716e3fee041
	void GetUp(Actor* AIOwner, bool bWithCheck);// 0x5715e3fee041
	float GetTargetInSightBodyPartsLocation(Actor* AIPawn, Actor* TargetPawn, out Vector[] BodyPartsLocation);// 0x5714e3fee041
	void GetTargetBodyPartEnduranceRatios(Actor* AIPawn, Actor* InTarget, out float[] OutEnduranceRatios);// 0x5713e3fee041
	enum GetSteeringType(Actor* AIOwner);// 0x5712e3fee041
	Vector GetSteeringLocation(Actor* AIOwner);// 0x5711e3fee041
	Vector GetSightLookStartPointByPose(Actor* InAIPawn, out const enum AIPose, out const enum AILean, NPCAIPropertyComponent_Look* InLookProps);// 0x5710e3fee041
	bool GetSceneEventInfo(const Object* WorldContext, int EvtUniqueId, out NPCAISceneEventInfo OutEvent);// 0x570fe3fee041
	AISceneEventMessage* GetSceneEvent(const Object* WorldContext, int EvtUniqueId);// 0x570ee3fee041
	Vector GetRandomReachablePointUseFilter(const Object* WorldContext, Vector InPoint, float InRadius, class NavigationQueryFilter FilterClass);// 0x570de3fee041
	Vector GetRandomReachablePoint(Actor* InAIPawn, Vector InCenter, float InRadius);// 0x570ce3fee041
	Vector GetRandomNavigationPoint(Actor* InAIPawn, Vector InCenter, float InRadius);// 0x570be3fee041
	enum GetPoseType(Character* Character);// 0x570ae3fee041
	bool GetPathAcrossLastDoorInfo(Actor* AIPawn, out AISafetyOpenDoorResp AcrossDoorInfo);// 0x5709e3fee041
	Vector GetPanicPoint(Actor* AIOwner);// 0x5708e3fee041
	Vector GetOpenDoorSuitableLocation(Actor* InAIPawn, Actor* InDoor);// 0x5707e3fee041
	void GetOpenDoorSafetyPoints(Actor* AIPawn, Actor* InDoor, Vector NavLinkPoint, out AIDoorSingleSafetyPoint[] SafetyPoints, out int PointsNum);// 0x5706e3fee041
	Vector GetNearReachablePointEscapeBombArea(const Object* WorldContext, Vector InPoint, float InRadius, out const enum[] EscapeTiles);// 0x5705e3fee041
	void GetNearestScavPlayerList(Actor* InAIPawn, out Actor*[] ScavPlayerList, float InRadius, bool InSight);// 0x5704e3fee041
	Actor* GetNearestScavPlayer(Actor* InAIPawn, float InRadius, bool InSight);// 0x5703e3fee041
	Actor* GetNearestPMCPlayer(Actor* InAIPawn, float InRadius, bool InSight);// 0x5702e3fee041
	Actor* GetNearestInventoryCanPickUp(Actor* InAIPawn, float InRange, bool bIgnoreChecked);// 0x5701e3fee041
	Actor* GetNearestDoor(Actor* InAIPawn, float InRadius);// 0x5700e3fee041
	Actor* GetNearestDBNOAITeammate(Actor* InAIPawn, float InRange);// 0x56ffe3fee041
	enum GetLeanType(Actor* AIOwner);// 0x56fee3fee041
	bool GetLatestAllyDeathInfo(Actor* InAIPawn, out AIGroupAllyDeathInfo OutDeathInfo);// 0x56fde3fee041
	enum GetLastMoveResult(Actor* AIOwner);// 0x56fce3fee041
	float GetLastBeHitedTime(Actor* InAIPawn);// 0x56fbe3fee041
	bool GetIsPanic(Actor* AIOwner);// 0x56fae3fee041
	bool GetIsInTryLeanShoot(Actor* InAIPawn);// 0x56f9e3fee041
	bool GetInventorysCanPickUp(Actor* InAIPawn, float InRange, out Actor*[] OutInventorys);// 0x56f8e3fee041
	Character* GetIfOverlapOther(Actor* InAIPawn, float InRadius);// 0x56f7e3fee041
	Vector GetGunShootStartPointByPose(Actor* InAIPawn, out const enum AIPose, out const enum AILean, NPCAIPropertyComponent_Shoot* InShootProps);// 0x56f6e3fee041
	Vector GetGunShootStartPointAtLocation(Actor* InAIPawn, out const Vector InActorLocation, out const enum AIPose, out const enum AILean);// 0x56f5e3fee041
	Vector GetGunShootStartPoint(Actor* AIPawn);// 0x56f4e3fee041
	NPCAIEnemyGroupSingleInfo* GetGroupSharedEnemySingleInfoByTarget(Actor* InAIPawn, Actor* InTargetPawn);// 0x56f3e3fee041
	NPCAIEnemyGroupSingleInfo* GetGroupSharedEnemySingleInfo(Actor* InAIOwner, NPCAITargetInfo* InEnemyInfo);// 0x56f2e3fee041
	int GetGroupEnemyHartedValue(Actor* InAIOwner, Actor* InEnemy);// 0x56f1e3fee041
	Character* GetGoalEnemyPerson(Actor* InAIPawn);// 0x56f0e3fee041
	NPCAITargetInfo* GetGoalEnemyInfo(Actor* InAIPawn);// 0x56efe3fee041
	Actor* GetFootSounderThrower(Actor* AIPawn, Actor* FootSounder, out bool OutbAttractAI);// 0x56eee3fee041
	float GetFireHitEnemyLastTimeUsePredestined(Actor* InAIPawn);// 0x56ede3fee041
	int GetEnemyHartedValue(Actor* InAIPawn, Actor* InEnemy);// 0x56ece3fee041
	NPCAIGroupRequestController* GetDynamicGroupRequestController(int DyGroupId, Object* InWorldContext);// 0x56ebe3fee041
	NPCAIDynamicGroupInfo* GetDynamicGroupInfo(Actor* InAIPawn);// 0x56eae3fee041
	Vector GetDestination(Actor* InOwner);// 0x56e9e3fee041
	Vector GetDBNOBeRescureLocation(Actor* InAIPawnWhoDBNO);// 0x56e8e3fee041
	enum GetCurrentMoveType(Actor* AIOwner);// 0x56e7e3fee041
	int GetCurrentDynamicGroupId(Actor* InAIPawn);// 0x56e6e3fee041
	void GetAllSceneEvents(const Object* WorldContext, out AISceneEventMessage*[] SceneEvents);// 0x56e5e3fee041
	void GetAllSceneEventInfoListWithAI(const Object* WorldContext, int64 AIID, int64 AIPathGroupID, out const Vector AILocation, out NPCAISceneEventInfo[] OutEventInfos);// 0x56e4e3fee041
	Actor*[] GetAllInSightEnemysBySelf(Actor* InAIPawn);// 0x56e3e3fee041
	Actor*[] GetAllInSightEnemysByGroup(Actor* InAIPawn);// 0x56e2e3fee041
	Actor*[] GetAllHadSeenEnemysBySelf(Actor* InAIPawn);// 0x56e1e3fee041
	Actor*[] GetAllHadSeenEnemysByGroup(Actor* InAIPawn);// 0x56e0e3fee041
	void GetAllAllyDeathInfo(Actor* InAIPawn, out AIGroupAllyDeathInfo[] OutDeathInfoList);// 0x56dfe3fee041
	void GetAliveTeamMembers(Actor* AIPawn, Actor* Player, out Character*[] OutTeamMembers);// 0x56dee3fee041
	float GetAimingTypeWeightInRuntime(Actor* InAIPawn, enum InBodyBulk, bool bIsForPlayer);// 0x56dde3fee041
	int GetAIBeenHitCount(Actor* AIPawn);// 0x56dce3fee041
	void GetAIAcceptedSceneEventsInProgress(Actor* AIPawn, out AISceneEventMessage*[] SceneEvents);// 0x56dbe3fee041
	NPCAITargetInfo* FindTargetInfo(Actor* InAIPawn, Actor* InTargetPawn);// 0x56dae3fee041
	bool FindRushDangerCanStopPoint(Actor* InAIPawn, out const Vector InCheckPoint, out Vector StopPoint, const float InBackDist);// 0x56d9e3fee041
	Vector[] FindPathToPoint(Actor* InAIPawn, out const Vector InPointStart, out const Vector InPointToGo);// 0x56d8e3fee041
	bool FindAmbushAgainstPoint(Actor* InAIPawn, Vector InPointStart, Vector InPointToGo, out Vector OutPoint);// 0x56d7e3fee041
	void DismissDynamicGroupById(int DyGroupId, Object* InWorldContext);// 0x56d6e3fee041
	void DismissDynamicGroup(Actor* InAIPawn);// 0x56d5e3fee041
	void DisableFlanking(Actor* InOwner);// 0x56d4e3fee041
	NPCAIDynamicGroupInfo* CreateDynamicGroup(Actor* InAIPawn, class NPCAIDynamicGroupInfo DynamicGroupClass);// 0x56d3e3fee041
	void CloseDoor(Actor* InAIPawn, Actor* InDoor);// 0x56d2e3fee041
	bool CheckFireCanHitPenetration(Actor* InAIPawn, out const HitResult InHitResult);// 0x56d1e3fee041
	bool CheckCanStackGun(Actor* InAIPawn, Actor* InTargetPawn, out enum OutAIPose, out enum OutAILean, out Vector OutShotPoint, float InCheckTargetRadius);// 0x56d0e3fee041
	bool CheckCanGotoPoint(Object* WorldContext, out const Vector InPointStart, out const Vector InPointToGo, float LimitLenght);// 0x56cfe3fee041
	void CheckAIGroupDBNOWipeOut(Actor* InAIPawn);// 0x56cee3fee041
	bool CanTryProne(Actor* AIPawn);// 0x56cde3fee041
	bool CanShootPointIfOnStandPoint(Actor* AIPawn, out const Vector StandPoint, out const Vector TargetPoint, Actor* IgnoreActor, bool bIgnoreCharacters);// 0x56cce3fee041
	bool CanShootPoint(Actor* InAIPawn, Vector InShootPoint, Actor* IgnoreActor, bool bIgnoreCharacters);// 0x56cbe3fee041
	bool CanSeePointIfOnStandPoint(Actor* AIPawn, out const Vector StandPoint, out const Vector TargetPoint, Actor* IgnoreActor, bool bIgnoreCharacters);// 0x56cae3fee041
	bool CanSeePoint(Actor* InAIPawn, Vector InPoint, Actor* IgnoreActor, bool bIgnoreCharacters);// 0x56c9e3fee041
	bool CanOpenDoor(Actor* InAIPawn, Actor* InDoor);// 0x56c8e3fee041
	void CanclePickUpInventory(Actor* InAIPawn);// 0x56c7e3fee041
	void CalculateGroupMembersGoalEnemy(Actor* InAIOwner);// 0x56c6e3fee041
	bool AIUseInventoryByClass(Actor* InAIPawn, class Object InventoryClass);// 0x56c5e3fee041
	void AIGiveUpSceneEvent(Actor* AIPawn, AISceneEventMessage* SceneEvent);// 0x56c4e3fee041
	void AICompleteSceneEvent(Actor* AIPawn, AISceneEventMessage* SceneEvent);// 0x56c3e3fee041
	bool AIAcceptSceneEvent(Actor* AIPawn, AISceneEventMessage* SceneEvent);// 0x56c2e3fee041
	void AddToGroupEnemy(Actor* InAIPawn, Actor* InEnemy, bool IsTemporary, float TemporaryTime, bool IsLetOthersAllyKnow);// 0x56c1e3fee041
	void AddToGroupAlly(Actor* InAIPawn, Actor* InTargetPawn);// 0x56c0e3fee041
	void AddInventoryToIgnorePickUp(Actor* InAIPawn, Actor* Inventory);// 0x56bfe3fee041
	void AddAimingTypeInRuntime(Actor* InAIPawn, enum InBodyBulk, float InWeight, bool bIsForPlayer);// 0x56bee3fee041

--------------------------------
Class: NPCAISceneEventInfo
	int UniqueID;//[Offset: 0x0, Size: 0x4]
	enum EventID;//[Offset: 0x4, Size: 0x1]
	float StartTime;//[Offset: 0x8, Size: 0x4]
	float EndTime;//[Offset: 0xc, Size: 0x4]
	float ValidScope;//[Offset: 0x10, Size: 0x4]
	Vector TriggerLocation;//[Offset: 0x14, Size: 0xc]
	int64[] AIIDs;//[Offset: 0x20, Size: 0x10]
	int64[] AIPathGroupIDs;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AISafetyOpenDoorResp
	Actor* SGDoor;//[Offset: 0x0, Size: 0x8]
	Vector NavLinkPoint;//[Offset: 0x8, Size: 0xc]
	Vector SafetyWaitPoint;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: AIDoorSingleSafetyPoint
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float DangerValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: NPCAISystem.AISystem.AISystemBase.Object

--------------------------------
Class: NPCAITacticSystemComponent.NPCAISubSystemComponent.ActorComponent.Object
	int OccupyPointID;//[Offset: 0xc8, Size: 0x4]
	float TimeGetEnemyList;//[Offset: 0xcc, Size: 0x4]
	Actor*[] EnemyListCache;//[Offset: 0xd0, Size: 0x10]
	CoverSystem* CoverSystem;//[Offset: 0xe0, Size: 0x8]
	TacticSystemActor* TacticSystemActor;//[Offset: 0xe8, Size: 0x8]
	bool UnOccupyTacticPoint(int PointID);// 0x5795e3fee041
	void SetCurrentTacticPointID(int PointID);// 0x5794e3fee041
	bool PointIsOccupy(int PointID);// 0x5793e3fee041
	bool OccupyTacticPoint(int PointID);// 0x5792e3fee041
	bool IsSafeForOneEnemy(out const Vector InPointLocation, out const ActionPointRadianSafe[] InOrientRadianSafetys, out const Vector InEnemyPos);// 0x5791e3fee041
	bool IsSafeForAllEnemy(out const Vector InPointLocation, out const ActionPointRadianSafe[] InOrientRadianSafetys);// 0x5790e3fee041
	int GetTotalTacticPointNum();// 0x578fe3fee041
	bool GetTacticPointData(int PointID, out TacticPointData PointData);// 0x578ee3fee041
	Actor* GetPointOccupiedTaker(int PointID);// 0x578de3fee041
	bool GetKeyRoutePointDataByUniqueIndex(int PointUniqueIndex, out KeyRoutePointData PointData);// 0x578ce3fee041
	bool GetKeyRoutePointData(int PointID, out KeyRoutePointData PointData);// 0x578be3fee041
	bool GetFarthestTacticPointInList(Vector InCenter, out const TacticPointData[] InPointsList, out TacticPointData OutPoint);// 0x578ae3fee041
	int GetCurrentTacticPointID();// 0x5789e3fee041
	bool GetCurrentTacticPointData(out TacticPointData PointData);// 0x5788e3fee041
	bool GetClosestTacticPointInList(Vector InCenter, out const TacticPointData[] InPointsList, out TacticPointData OutPoint);// 0x5787e3fee041
	bool FindTacticPointsInRadius(Vector InCenter, float InRadius, out TacticPointData[] OutPoints, out const enum[] InFindType, float ZLimit);// 0x5786e3fee041
	bool FindSafeToPointByKeyRoute(out const Vector ToPoint, float InRadius, out KeyRoutePointData[] OutPaths, int InDepth);// 0x5785e3fee041
	bool FindPathByKeyRoute(out const KeyRoutePointData FromPoint, out const KeyRoutePointData ToPoint, enum QueryType, out KeyRoutePointData[] OutPaths);// 0x5784e3fee041
	bool FindNearestSingleTacticPoint(Vector InCenter, float InRadius, out TacticPointData OutPoint, out const enum[] InFindType, float ZLimit);// 0x5783e3fee041
	bool FindBestKeyRoutePoint(out const Vector InCenter, float InRadius, out KeyRoutePointData OutPointData, enum QueryType);// 0x5782e3fee041
	bool CheckPointIsAvailable(int PointID);// 0x5781e3fee041
	bool CheckPointIsActivationForAim(int PointID, Actor* ThreatTarget, Vector ThreatTargetLoc, out Rotator AimRot);// 0x5780e3fee041
	bool CheckActivation(int PointID);// 0x577fe3fee041
	bool CanShootToTarget(int PointID, Actor* InEnemy);// 0x577ee3fee041
	bool CanOverWatch(int PointID, Actor* ThreatTarget, Vector InThreatTargetLocation, out Rotator OutAimRot);// 0x577de3fee041
	bool CanEscape(int PointID, Vector InPosition);// 0x577ce3fee041
	bool CalculateTacticPointIsSafeById(int PointID);// 0x577be3fee041
	bool CalculateTacticPointIsSafe(out const TacticPointData PointData);// 0x577ae3fee041
	bool CalculateKeyRouteSaftyInDepth(out const KeyRoutePointData InKeyRoutePointData, out int[] OutPointsIndexs, int InDepth, bool bSort);// 0x5779e3fee041
	bool CalculateKeyRoutePointIsSafe(out const KeyRoutePointData InKeyRoutePointData);// 0x5778e3fee041

--------------------------------
Class: NPCAITeamInterface.Interface.Object
	void RemoveAlly(Actor* InAlly);// 0x5800e3fee041
	bool IsAlly(Actor* InAlly);// 0x57ffe3fee041
	bool HasNoDBNOAlly(Actor* InSelf);// 0x57fee3fee041
	Actor* GetNearestAlly(Actor* AIPawn, float MaxRange);// 0x57fde3fee041
	int GetHealthyAllyNum(Actor* IgnorePawn);// 0x57fce3fee041
	int GetAllyNum();// 0x57fbe3fee041
	Actor*[] GetAllyList();// 0x57fae3fee041
	void GetAllyGoalEnemys(out NPCAITargetInfo*[] GoalEnemysList);// 0x57f9e3fee041
	NPCAITargetInfo* GetAllyGoalEnemyNearest(Actor* AIPawn, float InRange);// 0x57f8e3fee041
	int GetAliveAllysNum(Actor* IgnorePawn, bool bContainDBNO);// 0x57f7e3fee041
	void GetAliveAllys(Actor* IgnorePawn, bool bContainDBNO, out Actor*[] AliveAllys);// 0x57f6e3fee041
	void FilterInValidAllys();// 0x57f5e3fee041
	void AllyPostDied(Actor* InAlly);// 0x57f4e3fee041
	void AddAlly(Actor* InAlly);// 0x57f3e3fee041

--------------------------------
Class: NPCAIThrowSystem.WorldSubsystem.Subsystem.Object
	float INVALID_THROW_ANGLE_BP;//[Offset: 0x30, Size: 0x4]
	HitResult PretestGrenadeTrajectory(Object* WorldContextObject, Actor* AttackerActor, out const Vector ThrowLocation, out const Vector TargetLocation, float InitSpeed, float ThrowAngle, out float FlyingTime);// 0x5805e3fee041
	Rotator GetThrowRotator(out const Vector ActorLocation, out const Vector TargetLocation, float ThrowAngle);// 0x5804e3fee041
	float GetFlyingTime(out const Vector ThrowLocation, out const Vector TargetLocation, float InitSpeed, float ThrowAngle);// 0x5803e3fee041
	float GetFesiableGrenadeThrowAngle(Object* WorldContextObject, Actor* AttackerActor, out const Vector ActorLocation, out const Vector TargetLocation, float InitSpeed, enum PoseType, enum LeanType, bool bMustThrow, bool bHigherFirst, out float FlyingTime);// 0x5802e3fee041
	float[] GetCandidateGrenadeThrowAngles(Object* WorldContextObject, out const Vector ThrowLocation, out const Vector TargetLocation, float InitSpeed);// 0x5801e3fee041

--------------------------------
Class: NPCAITrackLogger.BlueprintFunctionLibrary.Object
	void TrackLOG_Shoot(Actor* AIPawn, FString EnemyName, bool bUsePredestined, byte PartWantToShoot, out const Vector PositionWantToShoot, byte PartActualShoot, out const Vector PositionActualShoot);// 0x580de3fee041
	void TrackLOG_AimingTime(Actor* AIPawn, FString EnemyName, float OffsetRatio, float ElapsedAimingTime, float RequiredAimingTime, float AimingProgress, float RawRatio, float MaxAimPrecicing, float CurrPrecicingSpd);// 0x580ce3fee041
	void TrackLOG_AimingPredestined(Actor* AIPawn, FString EnemyName, bool IsHit, float FinalRate, float RandomValue, float PredestinedRate, int RepeatIndex, float ShotHeadRate, float AIMoveRate, float EnemyMoveRate, float ArmBrokenRate, int ArmBrokenCount, float BattleDurationRate, float InCoverSafeRate, float BeHitedRate, float WeaponAdsMoaBiasRate, float GrassRate, float FlashLightRate);// 0x580be3fee041
	void TrackLOG_AimingBodyPart(Actor* AIPawn, FString EnemyName, byte PartAiming, int8 bHeadCanSee, int8 bChestCanSee, int8 bStomachCanSee, int8 bLArmCanSee, int8 bRArmCanSee, int8 bLLegCanSee, int8 bRLegCanSee);// 0x580ae3fee041
	void TrackLOG(Actor* AIPawn, out const enum LogType, out const FString[] KValues);// 0x5809e3fee041
	FString ToTrackLOGString(out const AITrackLOG LOGData, FString TemplateStr, bool bIncludeTime);// 0x5808e3fee041
	void PrintTrackLOG(Actor* AIPawn, NPCAIGlobalSharedInfo* SharedVariables, out const enum LogType, out const FString[] KValues);// 0x5807e3fee041
	void AutoReleaseTrackLOG(const Object* WorldContext);// 0x5806e3fee041

--------------------------------
Class: AIPortraitDefault.AIPortraitBase.Object

--------------------------------
Class: NPCAIVolumeInterface.Interface.Object

--------------------------------
Class: NPCBehaviorLOD.Object
	Character* OwnerPawn;//[Offset: 0x28, Size: 0x8]
	bool bConsiderDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bConsiderVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	float MinDistance;//[Offset: 0x34, Size: 0x4]
	float MaxDistance;//[Offset: 0x38, Size: 0x4]
	bool bConsiderVisionAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	float VisionAngleInDegree;//[Offset: 0x40, Size: 0x4]
	NPCBehaviorLODActionTick*[] Actions;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: NPCBehaviorLODActionTick.Object
	Character* OwnerPawn;//[Offset: 0x28, Size: 0x8]
	NPCBehaviorLODSystemComponent* LODSysComp;//[Offset: 0x30, Size: 0x8]
	float ControllerTickInterval;//[Offset: 0x38, Size: 0x4]
	float CharacterTickInterval;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NPCBehaviorLODSystemComponent.NPCAISubSystemComponent.ActorComponent.Object
	float UpdateLODInterval;//[Offset: 0xd0, Size: 0x4]
	bool bPMCAIAsPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	NPCBehaviorLOD*[] LODs;//[Offset: 0xd8, Size: 0x10]
	NPCBehaviorLOD* CurrLODCache;//[Offset: 0xe8, Size: 0x8]
	bool bIgnoreUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool bControllerOringinalTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	float ControllerOringinalTickInterval;//[Offset: 0xf4, Size: 0x4]
	bool bCharacterOringinalTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	float CharacterOringinalTickInterval;//[Offset: 0xfc, Size: 0x4]
	ComponentInfo[] CharacterCachedCompList;//[Offset: 0x100, Size: 0x10]
	ComponentInfo[] ControllerCachedCompList;//[Offset: 0x110, Size: 0x10]
	void UpdateBehaviorLODTimer();// 0x581ce3fee041
	bool ShouldRunLODTimer();// 0x581be3fee041
	void RestoreTick();// 0x581ae3fee041
	void OnAIBeginToRunBT();// 0x5819e3fee041
	void EnableTick();// 0x5818e3fee041
	void EnableCharacterTick(Character* Character);// 0x5817e3fee041
	void DisableCharacterTick(Character* Character);// 0x5816e3fee041

--------------------------------
Class: ComponentInfo
	ActorComponent* Component;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NPCBehaviorLODAction.Object
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float LoopInterval;//[Offset: 0x2c, Size: 0x4]
	Character* OwnerPawn;//[Offset: 0x38, Size: 0x8]
	void OnLoopActionTimer();// 0x5815e3fee041

--------------------------------
Class: NPCBTDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bWithTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1]
	FString TagText;//[Offset: 0x60, Size: 0x10]
	FString Message;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x60, Size: 0x28]

--------------------------------
Class: NPCBTDecorator_AIPropertyComparison.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	class NPCAIPropertyComponent* AIPropertyComponent;//[Offset: 0x88, Size: 0x8]
	FString ComponentFunctionName;//[Offset: 0x90, Size: 0x10]
	byte BoolOperation;//[Offset: 0xa0, Size: 0x1]
	byte ArithmeticOperation;//[Offset: 0xa1, Size: 0x1]
	float FloatValue;//[Offset: 0xa4, Size: 0x4]
	int IntValue;//[Offset: 0xa8, Size: 0x4]
	bool bUseBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	FString CachedDescription;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: NPCBTDecorator_BBConditionBase.NPCBTDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bUseTargetValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	BlackboardKeySelector SourceBlackboardKey;//[Offset: 0x88, Size: 0x28]
	BlackboardKeySelector TargetBlackboardKey;//[Offset: 0xb0, Size: 0x28]

--------------------------------
Class: NPCBTDecorator_BBConditionBool.NPCBTDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x80, Size: 0x28]
	byte ConditionType;//[Offset: 0xa8, Size: 0x1]
	bool TargetValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]

--------------------------------
Class: NPCBTDecorator_BBConditionFloat.NPCBTDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector SourceBlackboardKey;//[Offset: 0x80, Size: 0x28]
	BlackboardKeySelector TargetBlackboardKey;//[Offset: 0xa8, Size: 0x28]
	float TargetValue;//[Offset: 0xd0, Size: 0x4]
	bool bUseBBTargetValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	byte ConditionType;//[Offset: 0xd5, Size: 0x1]

--------------------------------
Class: NPCBTDecorator_BBConditionInt.NPCBTDecorator_BBConditionBase.NPCBTDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte OperationType;//[Offset: 0xd8, Size: 0x1]
	int TargetValue;//[Offset: 0xdc, Size: 0x4]

--------------------------------
Class: BlackboardKeyType_Int.BlackboardKeyType.Object

--------------------------------
Class: BTDecorator_CompareBBEntries.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte Operator;//[Offset: 0x5a, Size: 0x1]
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28]
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28]

--------------------------------
Class: NPCBTDecorator_BBConditionObject.BTDecorator_CompareBBEntries.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BlackboardKeyType_Object.BlackboardKeyType.Object
	class Object* BaseClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: NPCBTDecorator_BBConditionString.NPCBTDecorator_BBConditionBase.NPCBTDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte OperationType;//[Offset: 0xd8, Size: 0x1]
	FString TargetValue;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x60, Size: 0x8]
	Actor* ActorOwner;//[Offset: 0x68, Size: 0x8]
	FName[] ObservedKeyNames;//[Offset: 0x70, Size: 0x10]
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bCheckConditionOnlyBlackBoardChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	bool bIsObservingBB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1]
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x582ae3fee041
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x5829e3fee041
	void ReceiveObserverDeactivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x5828e3fee041
	void ReceiveObserverDeactivated(Actor* OwnerActor);// 0x5827e3fee041
	void ReceiveObserverActivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x5826e3fee041
	void ReceiveObserverActivated(Actor* OwnerActor);// 0x5825e3fee041
	void ReceiveExecutionStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x5824e3fee041
	void ReceiveExecutionStart(Actor* OwnerActor);// 0x5823e3fee041
	void ReceiveExecutionFinishAI(AIController* OwnerController, Pawn* ControlledPawn, byte NodeResult);// 0x5822e3fee041
	void ReceiveExecutionFinish(Actor* OwnerActor, byte NodeResult);// 0x5821e3fee041
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x5820e3fee041
	bool PerformConditionCheck(Actor* OwnerActor);// 0x581fe3fee041
	bool IsDecoratorObserverActive();// 0x581ee3fee041
	bool IsDecoratorExecutionActive();// 0x581de3fee041

--------------------------------
Class: NPCBTDecorator_BlueprintBase.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bWithTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x92, Size: 0x1]
	FString TagText;//[Offset: 0x98, Size: 0x10]
	FString Message;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: NPCBTDecorator_HasSuspectPoints.NPCBTDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float Radius;//[Offset: 0x80, Size: 0x4]
	float HalfHeight;//[Offset: 0x84, Size: 0x4]
	float HalfAngle;//[Offset: 0x88, Size: 0x4]
	Vector Offset;//[Offset: 0x8c, Size: 0xc]

--------------------------------
Class: NPCBTDecorator_IsCloseEnough.NPCBTDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float CloseEnoughDistance;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: NPCBTDecorator_ShouldWaitAtPathNode.NPCBTDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: NPCBTDecorator_SingletonBlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x60, Size: 0x8]
	FName[] ObservedKeyNames;//[Offset: 0x68, Size: 0x10]
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	bool bCheckConditionOnlyBlackBoardChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1]
	bool bIsObservingBB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x88, Size: 0x1]
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x5838e3fee041
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x5837e3fee041
	void ReceiveObserverDeactivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x5836e3fee041
	void ReceiveObserverDeactivated(Actor* OwnerActor);// 0x5835e3fee041
	void ReceiveObserverActivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x5834e3fee041
	void ReceiveObserverActivated(Actor* OwnerActor);// 0x5833e3fee041
	void ReceiveExecutionStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x5832e3fee041
	void ReceiveExecutionStart(Actor* OwnerActor);// 0x5831e3fee041
	void ReceiveExecutionFinishAI(AIController* OwnerController, Pawn* ControlledPawn, byte NodeResult);// 0x5830e3fee041
	void ReceiveExecutionFinish(Actor* OwnerActor, byte NodeResult);// 0x582fe3fee041
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x582ee3fee041
	bool PerformConditionCheck(Actor* OwnerActor);// 0x582de3fee041
	bool IsDecoratorObserverActive();// 0x582ce3fee041
	bool IsDecoratorExecutionActive();// 0x582be3fee041

--------------------------------
Class: NPCBTDecorator_TickIntervalBase.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x94, Size: 0x4]
	float RandomDeviation;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: BTDecorator_Cooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float CooldownTime;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: NPCBTDecorator_Wait.BTDecorator_Cooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bWaitFirstTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: NPCBTService.BTService.BTAuxiliaryNode.BTNode.Object
	bool bWithTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 0x1]
	bool bOnActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61, Size: 0x1]
	bool bOnDeactivation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 0x1]
	bool bOnTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 0x1]
	bool bOnSearchStart;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x61, Size: 0x1]
	FString TagText;//[Offset: 0x68, Size: 0x10]
	FString Message;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NPCBTService_BlueprintBase.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	bool bWithTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1]
	bool bOnActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1]
	bool bOnDeactivation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8a, Size: 0x1]
	bool bOnTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1]
	bool bOnSearchStart;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8a, Size: 0x1]
	FString TagText;//[Offset: 0x90, Size: 0x10]
	FString Message;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: NPCBTService_FindRandomPosition.NPCBTService.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector CenterTarget;//[Offset: 0x88, Size: 0x28]
	BlackboardKeySelector RandomLocation;//[Offset: 0xb0, Size: 0x28]
	float MinRange;//[Offset: 0xd8, Size: 0x4]
	float MaxRange;//[Offset: 0xdc, Size: 0x4]

--------------------------------
Class: NPCBTService_SetSenseRangeScale.NPCBTService.BTService.BTAuxiliaryNode.BTNode.Object
	float CatchSenseScale;//[Offset: 0x88, Size: 0x4]
	float LossSenseScale;//[Offset: 0x8c, Size: 0x4]
	enum AISenseType;//[Offset: 0x90, Size: 0x1]

--------------------------------
Class: NPCBTService_SetVisionHalfAngle.NPCBTService.BTService.BTAuxiliaryNode.BTNode.Object
	float LookAngleScale;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: NPCBTService_SingletonBlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x68, Size: 0x8]
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bShowEventDetails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x5840e3fee041
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x583fe3fee041
	void ReceiveSearchStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x583ee3fee041
	void ReceiveSearchStart(Actor* OwnerActor);// 0x583de3fee041
	void ReceiveDeactivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x583ce3fee041
	void ReceiveDeactivation(Actor* OwnerActor);// 0x583be3fee041
	void ReceiveActivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x583ae3fee041
	void ReceiveActivation(Actor* OwnerActor);// 0x5839e3fee041

--------------------------------
Class: NPCBTTask_AimAndFireEnemy.NPCBTTask_LatenTaskBase.NPCBTTask_BlueprintBase.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector FireTarget;//[Offset: 0xd0, Size: 0x28]
	BlackboardKeySelector ShootOneRound;//[Offset: 0xf8, Size: 0x28]
	BlackboardKeySelector SkipFirstRoundAim;//[Offset: 0x120, Size: 0x28]
	bool IsShotEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	Character* FireTargetPawn;//[Offset: 0x150, Size: 0x8]
	Vector FireTargetLoc;//[Offset: 0x158, Size: 0xc]
	bool bIsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 0x1]
	bool bPressureAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165, Size: 0x1]
	bool bSkipFirstRoundAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166, Size: 0x1]
	enum ShootPartID;//[Offset: 0x167, Size: 0x1]
	byte LastCheckedShotCount;//[Offset: 0x168, Size: 0x1]
	int ShootRound;//[Offset: 0x16c, Size: 0x4]

--------------------------------
Class: BlackboardKeyType_Bool.BlackboardKeyType.Object

--------------------------------
Class: NPCBTTaskNode.BTTaskNode.BTNode.Object
	bool bWithTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1]
	FString TagText;//[Offset: 0x70, Size: 0x10]
	FString Message;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: NPCBTTask_AttackEnemy.NPCBTTaskNode.BTTaskNode.BTNode.Object

--------------------------------
Class: NPCBTTask_CalcNextAttackPosition.NPCBTTaskNode.BTTaskNode.BTNode.Object
	bool bDebugMoveTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	int MaxTryTimes;//[Offset: 0x94, Size: 0x4]
	float MinMoveDistance;//[Offset: 0x98, Size: 0x4]
	float MaxMoveDistance;//[Offset: 0x9c, Size: 0x4]
	float MoveDistanceThreshold;//[Offset: 0xa0, Size: 0x4]
	float MinDistanceToPlayer;//[Offset: 0xa4, Size: 0x4]
	class NavigationQueryFilter* FilterClass;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: NPCBTTask_CalcNextWanderPathNode.NPCBTTaskNode.BTTaskNode.BTNode.Object

--------------------------------
Class: NPCBTTask_ClearFocalPoint.NPCBTTaskNode.BTTaskNode.BTNode.Object

--------------------------------
Class: NPCBTTask_DBNORescue.NPCBTTask_BlueprintBase.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector Tgt_DBNOTarget;//[Offset: 0xc8, Size: 0x28]

--------------------------------
Class: NPCBTTask_FireEnemy.NPCBTTask_LatenTaskBase.NPCBTTask_BlueprintBase.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector FireTarget;//[Offset: 0xd0, Size: 0x28]
	BlackboardKeySelector MovementMultiplier;//[Offset: 0xf8, Size: 0x28]
	BlackboardKeySelector AimingMultiplier;//[Offset: 0x120, Size: 0x28]
	BlackboardKeySelector BurstMultiplier;//[Offset: 0x148, Size: 0x28]
	BlackboardKeySelector TargetStateMultiplier;//[Offset: 0x170, Size: 0x28]

--------------------------------
Class: NPCBTTask_FireEnemyEx.NPCBTTask_LatenTaskBase.NPCBTTask_BlueprintBase.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector FireTarget;//[Offset: 0xd0, Size: 0x28]
	enum FireType;//[Offset: 0xf8, Size: 0x1]
	float MissRadiusMin;//[Offset: 0xfc, Size: 0x4]
	float MissRadiusMax;//[Offset: 0x100, Size: 0x4]
	float SpeedThreshold;//[Offset: 0x104, Size: 0x4]

--------------------------------
Class: NPCBTTask_FollowPathNode.NPCBTTaskNode.BTTaskNode.BTNode.Object
	BlackboardKeySelector WanderLocationKey;//[Offset: 0x90, Size: 0x28]
	BlackboardKeySelector WaitTimeKey;//[Offset: 0xb8, Size: 0x28]

--------------------------------
Class: NPCBTTask_MeleeAttackEnemy.NPCBTTask_LatenTaskBase.NPCBTTask_BlueprintBase.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector FireTarget;//[Offset: 0xd0, Size: 0x28]
	Character* FireTargetPawn;//[Offset: 0xf8, Size: 0x8]
	Vector FireTargetLoc;//[Offset: 0x100, Size: 0xc]
	bool IsShotEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	bool bIsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1]
	float StartFireTimestamp;//[Offset: 0x110, Size: 0x4]

--------------------------------
Class: BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x70, Size: 0x28]

--------------------------------
Class: BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x98, Size: 0x4]
	class NavigationQueryFilter* FilterClass;//[Offset: 0xa0, Size: 0x8]
	float ObservedBlackboardValueTolerance;//[Offset: 0xa8, Size: 0x4]
	bool bObserveBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1]
	bool bTrackMovingGoal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xac, Size: 0x1]
	bool bProjectGoalLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xac, Size: 0x1]
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xac, Size: 0x1]
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xac, Size: 0x1]
	bool bStopOnOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xac, Size: 0x1]
	bool bStopOnOverlapNeedsUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad, Size: 0x1]

--------------------------------
Class: NPCBTTask_MoveToEx.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	enum MoveType;//[Offset: 0xae, Size: 0x1]
	float RandomReachableRadius;//[Offset: 0xb0, Size: 0x4]
	bool bWithTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	FString TagText;//[Offset: 0xb8, Size: 0x10]
	FString Message;//[Offset: 0xc8, Size: 0x10]

--------------------------------
Class: NPCBTTask_PlayAkSound.NPCBTTaskNode.BTTaskNode.BTNode.Object
	AkAudioEvent* SoundToPlay;//[Offset: 0x90, Size: 0x8]
	bool bSoundAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]

--------------------------------
Class: NPCBTTask_ResetTargetLocation.NPCBTTaskNode.BTTaskNode.BTNode.Object

--------------------------------
Class: NPCBTTask_SetAIPose.NPCBTTaskNode.BTTaskNode.BTNode.Object
	enum TargetAIPose;//[Offset: 0x90, Size: 0x1]

--------------------------------
Class: NPCBTTask_SetBlackboardValue.NPCBTTaskNode.BTTaskNode.BTNode.Object
	BlackboardKeySelector SourceValue;//[Offset: 0x90, Size: 0x28]
	BlackboardKeySelector TargetValue;//[Offset: 0xb8, Size: 0x28]

--------------------------------
Class: NPCBTTask_SetFocalPoint.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool bWithTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	FString TagText;//[Offset: 0xa0, Size: 0x10]
	FString Message;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: NPCBTTask_SetMovementSpeed.NPCBTTaskNode.BTTaskNode.BTNode.Object
	float BasicStandSpeed;//[Offset: 0x90, Size: 0x4]
	float BasicCrouchSpeed;//[Offset: 0x94, Size: 0x4]
	float BasicProneSpeed;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: NPCBTTask_SetSenseRangeScale.NPCBTTaskNode.BTTaskNode.BTNode.Object
	float CatchSenseScale;//[Offset: 0x90, Size: 0x4]
	float LossSenseScale;//[Offset: 0x94, Size: 0x4]
	enum AISenseType;//[Offset: 0x98, Size: 0x1]

--------------------------------
Class: NPCBTTask_SetTargetHatred.NPCBTTask_BlueprintBase.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector EnemyTargetKey;//[Offset: 0xc8, Size: 0x28]
	int HatredValue;//[Offset: 0xf0, Size: 0x4]
	float Hatred_IndateTime;//[Offset: 0xf4, Size: 0x4]
	bool NeedToCalucateGoalEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]

--------------------------------
Class: NPCBTTask_SetVisionHalfAngle.NPCBTTaskNode.BTTaskNode.BTNode.Object
	float VisionHalfAngle;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: NPCBTTask_StartShoulderAimingTarget.NPCBTTask_LatenTaskBase.NPCBTTask_BlueprintBase.BTTask_BlueprintBase.BTTaskNode.BTNode.Object

--------------------------------
Class: NPCBTTask_StopShoulderAimingTarget.NPCBTTask_LatenTaskBase.NPCBTTask_BlueprintBase.BTTask_BlueprintBase.BTTaskNode.BTNode.Object

--------------------------------
Class: NPCCharacterAIDBNOInterface.Interface.Object
	bool IsTargetDBNO(Actor* TargetPawn);// 0x5844e3fee041
	bool IsSelfDBNO();// 0x5843e3fee041
	Vector GetBeRescueLocation();// 0x5842e3fee041
	void CheckAIGroupDBNOWipeOut();// 0x5841e3fee041

--------------------------------
Class: NPCCharacterAIDeathInterface.Interface.Object
	bool IsDead();// 0x5845e3fee041

--------------------------------
Class: NPCCharacterAIDebugInterface.Interface.Object
	void BoardcastDrawDebugLine(int InDrawID, Vector InStart, Vector InEnd, Color Color, float InTime, float InThickness);// 0x5846e3fee041

--------------------------------
Class: NPCCharacterAIExplodeInterface.Interface.Object
	void SetExplodeParams(float InMinDamage, float InMaxDamage, float InDamageRange, bool bInExplodeAtDeath);// 0x5848e3fee041
	void NetMulticastExplode();// 0x5847e3fee041

--------------------------------
Class: NPCCharacterAIFireInterface.Interface.Object
	void UpdatePersistentFireSetting(bool CalcShoot, bool CalcSight, Actor* EnemyTarget, out const Vector FireLocation, float FireInterval);// 0x585ee3fee041
	void StopPersistentFire();// 0x585de3fee041
	void StopFire(int FireMode);// 0x585ce3fee041
	bool StartPersistentFire(float Duration);// 0x585be3fee041
	void StartFireNextTick();// 0x585ae3fee041
	void StartFire(int FireMode);// 0x5859e3fee041
	enum PrepareToFire(out NPCAIFireSetting FireSetting);// 0x5858e3fee041
	bool IsRecentlyFire(float InSeconds);// 0x5857e3fee041
	bool IsPersistentFiring();// 0x5856e3fee041
	bool IsInFiringState();// 0x5855e3fee041
	byte GetWeaponUseTraceChannel();// 0x5854e3fee041
	Vector GetSingleBodyPartLocation(Character* InCharacter, enum InBodyPartType);// 0x5853e3fee041
	Vector GetMuzzleFlashSocketLocation();// 0x5852e3fee041
	byte GetLookSightUseTraceChannel();// 0x5851e3fee041
	float GetLastStopFireTime();// 0x5850e3fee041
	float GetLastFireTime();// 0x584fe3fee041
	float GetFireHitEnemyLastTimeUsePredestined();// 0x584ee3fee041
	void ForcePullBoltReady();// 0x584de3fee041
	bool CheckFireCanHitPenetration(out const HitResult InHitResult);// 0x584ce3fee041
	bool CanStartPersistentFire();// 0x584be3fee041
	bool CanMeleeFire();// 0x584ae3fee041
	bool CanFire();// 0x5849e3fee041

--------------------------------
Class: NPCCharacterAIIKInterface.Interface.Object
	void UpdateDSIKFootOffsets();// 0x5861e3fee041
	bool ShouldDSEnableFootIK();// 0x5860e3fee041
	float GetDSIKFootOffsetsDiff();// 0x585fe3fee041

--------------------------------
Class: NPCCharacterAIInventoryInterface.Interface.Object
	bool GiveInventoryToAI(uint64 ItemID);// 0x5863e3fee041
	bool AIUseInventoryByClass(class Object InventoryClass);// 0x5862e3fee041

--------------------------------
Class: NPCCharacterAIMoveInterface.Interface.Object
	void StopActiveMovement();// 0x586de3fee041
	void SetSprint(bool bInSprint);// 0x586ce3fee041
	void SetSilentWalk(bool bInSilentWalk);// 0x586be3fee041
	void SetMovementSpeed(float BasicStandSpeed, float BasicCrouchSpeed, float BasicProneSpeed);// 0x586ae3fee041
	void SetEnabledSliding(bool bEnabled);// 0x5869e3fee041
	bool IsSprinting();// 0x5868e3fee041
	bool IsBraking();// 0x5867e3fee041
	bool IsAnyLegBroken();// 0x5866e3fee041
	float GetSlidingDistance();// 0x5865e3fee041
	bool CanMove();// 0x5864e3fee041

--------------------------------
Class: NPCCharacterAIMovementInterface.Interface.Object
	void SetIgnoreMovingBlock(bool InbIgnore);// 0x586fe3fee041
	void SetEnableRVOAvoidance(bool InEnabled);// 0x586ee3fee041

--------------------------------
Class: NPCCharacterAIPathNodeInterface.Interface.Object
	bool ShouldWaitAtNode();// 0x5873e3fee041
	float GetWaitTimeAtNode();// 0x5872e3fee041
	Vector GetTargetWanderPathLocation();// 0x5871e3fee041
	bool CalcNextPathNode();// 0x5870e3fee041

--------------------------------
Class: NPCCharacterAIPerceptionInterface.Interface.Object
	AISenseConfig_Touch* GetTouchConfig();// 0x5877e3fee041
	AISenseConfig_Sight* GetSightConfig();// 0x5876e3fee041
	AISenseConfig_Hearing* GetHearingConfig();// 0x5875e3fee041
	AISenseConfig_Damage* GetDamageConfig();// 0x5874e3fee041

--------------------------------
Class: AISenseConfig_Touch.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Damage.AISenseConfig.Object
	class AISense_Damage* Implementation;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: AISense_Damage.AISense.Object
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10]
	void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation);// 0x7211e3fee041

--------------------------------
Class: NPCCharacterAIPickUpInterface.Interface.Object
	void StopPickUpBoxContainer();// 0x587ee3fee041
	bool PickupInventory(Actor* Inventory, bool bCheckIsCanAdd, float WaitSeconds, bool bFromBoxContainer);// 0x587de3fee041
	void PickUpBoxContainer(Actor* BoxContainer, bool bCheckIsCanAdd, float InDelayStarttime, float InPickUpInterval);// 0x587ce3fee041
	bool IsCompletedPickUpBoxContainer();// 0x587be3fee041
	Actor* GetNearestInventoryCanPickUp(float InRange, bool bIgnoreChecked);// 0x587ae3fee041
	bool GetInventorysCanPickUp(float InRange, out Actor*[] OutInventorys);// 0x5879e3fee041
	void CanclePickUpInventory();// 0x5878e3fee041

--------------------------------
Class: NPCCharacterAIPoseCacheInterface.Interface.Object
	enum GetPoseAIType();// 0x587fe3fee041

--------------------------------
Class: NPCCharacterAIPoseInterface.Interface.Object
	bool UpdateDSPose();// 0x5892e3fee041
	bool TryProne();// 0x5891e3fee041
	bool TryLean(enum NewLeanType);// 0x5890e3fee041
	bool TryCrouchSliding();// 0x588fe3fee041
	bool TryCrouch();// 0x588ee3fee041
	bool TryCasualStandingPose(bool bCasual);// 0x588de3fee041
	void StopCrouchSliding();// 0x588ce3fee041
	void SetPoseToProne(bool bNewProne);// 0x588be3fee041
	void SetPoseToCrouch(bool bNewCrouch);// 0x588ae3fee041
	void SetIsCasual(bool bCasual);// 0x5889e3fee041
	void SetAIPose(enum InAIPose);// 0x5888e3fee041
	bool IsInTransitionAnimation();// 0x5887e3fee041
	bool IsCrouchSliding();// 0x5886e3fee041
	void GetUp(bool bWithCheck);// 0x5885e3fee041
	enum GetLeanType();// 0x5884e3fee041
	bool GetIsCasual();// 0x5883e3fee041
	float GetCrouchSlidingStartTime();// 0x5882e3fee041
	enum GetAIPose();// 0x5881e3fee041
	bool CanProneInCurrentEnvironment();// 0x5880e3fee041

--------------------------------
Class: NPCCharacterAISenseAbilityInterface.Interface.Object
	void ProcessOnEnterInventoryFlash(bool bInSevere, bool bInModerate, bool bInMild, float CharFaceAngleDegree, Vector SocketLoc);// 0x5895e3fee041
	bool IsInGasArea();// 0x5894e3fee041
	float GetFlashBurnValue();// 0x5893e3fee041

--------------------------------
Class: NPCCharacterAISoundInterface.Interface.Object
	void PlaySoundAtLocation(const Object* WorldContextObject, AkAudioEvent* AudioEvent, Vector Location, Rotator Rotation);// 0x5897e3fee041
	void PlayAISoundByType(enum CurrType);// 0x5896e3fee041

--------------------------------
Class: NPCCharacterAITakeCoverInterface.Interface.Object
	void StopToTakeCover();// 0x589be3fee041
	bool IsTakingCover();// 0x589ae3fee041
	void BeginToTakeCoverCrouch();// 0x5899e3fee041
	void BeginToTakeCover();// 0x5898e3fee041

--------------------------------
Class: NPCCharacterAITeamRescueInterface.Interface.Object
	void StopRescueTeammate();// 0x589fe3fee041
	bool RescueDBNOTeammate(Actor* InTarget);// 0x589ee3fee041
	Actor* GetNearestDBNOTeammate(float InRange);// 0x589de3fee041
	bool GetIsRescuingTeammate();// 0x589ce3fee041

--------------------------------
Class: NPCCharacterAITurnInterface.Interface.Object
	void LookToPoint(out const Vector Point, float RotateSpeedInDegree, float AcceleratedSpeedInDegree, bool bQuickly);// 0x58a4e3fee041
	void LookToMovingDirection(float RotateSpeedInDegree, float AcceleratedSpeedInDegree);// 0x58a3e3fee041
	void LockLookToPoint(float LockTime);// 0x58a2e3fee041
	bool IsTurning();// 0x58a1e3fee041
	float GetActualActorTurnSpeed();// 0x58a0e3fee041

--------------------------------
Class: NPCCharacterHealthInterface.Interface.Object
	void SetHealthMax(float Value, Actor* Instigator);// 0x58a8e3fee041
	void SetHealth(float Value, Actor* Instigator);// 0x58a7e3fee041
	float GetHealthMax();// 0x58a6e3fee041
	float GetHealth();// 0x58a5e3fee041

--------------------------------
Class: NPCCharacterTakeDamageInterface.Interface.Object
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x58a9e3fee041

--------------------------------
Class: NPCGrassIdentificationVolume.TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: SGActorFactionCompInterface.Interface.Object

--------------------------------
Class: SGFactionInterface.Interface.Object

--------------------------------
Class: SGTeamInterface.Interface.Object
	bool RemoveFromTeam(Actor* C, bool bRemoveAll);// 0x58aee3fee041
	Actor*[] GetTeamMembers();// 0x58ade3fee041
	ActorComponent* GetFactionComp();// 0x58ace3fee041
	void FactionChanged(byte NewFactionType);// 0x58abe3fee041
	bool AddToTeam(Actor* C);// 0x58aae3fee041

--------------------------------
Class: ActionPointEditorActor.Actor.Object
	enum ActionPointType;//[Offset: 0x2e0, Size: 0x1]
	float ProjectDistanceOfNavigationMesh;//[Offset: 0x2e4, Size: 0x4]
	SceneComponent* DRootComponent;//[Offset: 0x2e8, Size: 0x8]
	PrimitiveComponent* SpotComponent;//[Offset: 0x2f0, Size: 0x8]
	PrimitiveComponent* WarnComponent;//[Offset: 0x2f8, Size: 0x8]
	ArrowComponent* ArrowComponent;//[Offset: 0x300, Size: 0x8]

--------------------------------
Class: BPTacticPointEditorActor.Actor.Object
	int BPTacticType;//[Offset: 0x2e8, Size: 0x4]
	TacticPointData PointData;//[Offset: 0x2f0, Size: 0x70]
	bool CheckActivationCPlus(Actor* ThreatTarget, Vector ThreatTargetLoc, bool bOccupied, out Rotator AimRot);// 0x58afe3fee041

--------------------------------
Class: CoverFinderVisData.Object
	DebugPoint[] DebugPoints;//[Offset: 0x28, Size: 0x10]
	DebugArrow[] DebugArrows;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: DebugPoint
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Color Color;//[Offset: 0xc, Size: 0x4]
	bool bGenericOrUnitDebugData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: DebugArrow
	Vector Start;//[Offset: 0x0, Size: 0xc]
	Vector End;//[Offset: 0xc, Size: 0xc]
	Color Color;//[Offset: 0x18, Size: 0x4]
	bool bGenericOrUnitDebugData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: CoverFinderVisualizerService.BTService.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: CoverPointEditorActor.ActionPointEditorActor.Actor.Object

--------------------------------
Class: CoverPointGeneratorStatics.BlueprintFunctionLibrary.Object

--------------------------------
Class: CoverPointRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: CoverPointTestingActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2e0, Size: 0x8]
	CoverSystemActor* GeneratorActor;//[Offset: 0x2e8, Size: 0x8]
	NavAgentProperties NavAgentProps;//[Offset: 0x368, Size: 0x30]
	Vector QueryingExtent;//[Offset: 0x398, Size: 0xc]
	float GroundOffset;//[Offset: 0x3a4, Size: 0x4]
	float EndPointSize;//[Offset: 0x3a8, Size: 0x4]
	float EdgeThickness;//[Offset: 0x3ac, Size: 0x4]
	float CoverPointSize;//[Offset: 0x3b0, Size: 0x4]
	bool bDrawCoverPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b4, Size: 0x1]
	bool bDrawDefenceMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b4, Size: 0x1]
	bool bDrawDefenceWall;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b4, Size: 0x1]
	bool bDrawDefenceAngle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3b4, Size: 0x1]
	bool bDrawFireTrace;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3b4, Size: 0x1]
	bool bEdgeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 0x1]
	Actor* TargetActor;//[Offset: 0x3b8, Size: 0x8]
	NavMeshEdgeCoverDataEditor EdgeDataEditor;//[Offset: 0x430, Size: 0x1]
	DTOCoverDataEditor PointDataEditor;//[Offset: 0x498, Size: 0x1]
	Vector SincePoint;//[Offset: 0x49c, Size: 0xc]
	Vector UntilPoint;//[Offset: 0x4a8, Size: 0xc]
	float SegmentRatio;//[Offset: 0x4b4, Size: 0x4]
	float SegmentLength;//[Offset: 0x4b8, Size: 0x4]

--------------------------------
Class: NavMeshEdgeCoverDataEditor

--------------------------------
Class: DTOCoverDataEditor

--------------------------------
Class: CoverPointExclusionVolume.Volume.Brush.Actor.Object

--------------------------------
Class: DoorPointEditorActor.ActionPointEditorActor.Actor.Object

--------------------------------
Class: GuardPointVolume.Volume.Brush.Actor.Object
	void SaveToTaticSystemActor();// 0x58b9e3fee041
	void GenTacticalPoints();// 0x58b8e3fee041

--------------------------------
Class: KeyRouteAssistActor.Actor.Object
	Actor* ParentPointEdActor;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: KeyRoutePointEditorActor.ActionPointEditorActor.Actor.Object

--------------------------------
Class: KeyRouteVolume.Volume.Brush.Actor.Object
	bool IsInVolume(out const Vector Point);// 0x58bae3fee041

--------------------------------
Class: SeekPointStatics.BlueprintFunctionLibrary.Object
	bool GetKeyRoutePointIndexsOfDepth(int FromIndex, out KeyRoutePointData[] KeyRoutePoints, int Depth, out int[] OutPointIndexs);// 0x58bde3fee041
	bool FindKeyRoutePath(TacticSystemActor* TacticSystem, const int FromIndex, const int ToIndex, out KeyRoutePointData[] KeyRoutePoints, out int[] OutPath);// 0x58bce3fee041
	float CalculateNavPathLength(Object* InWorldContext, out const Vector InFromPoint, out const Vector InToPoint);// 0x58bbe3fee041

--------------------------------
Class: TacticPointEditorActor.ActionPointEditorActor.Actor.Object

--------------------------------
Class: TacticPointEditorActorInterface.Interface.Object

--------------------------------
Class: TacticPointGuardDotActor.Actor.Object
	TacticPointEditorActor* ParentEditPoint;//[Offset: 0x2e0, Size: 0x8]
	int IndexOfGuard;//[Offset: 0x2e8, Size: 0x4]
	bool bArrowDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]

--------------------------------
Class: WindowPointEditorActor.ActionPointEditorActor.Actor.Object

--------------------------------
Class: CoverGenerator.Info.Actor.Object
	bool bRegenerateAtBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	bool bRegenerateAtNavigationRebuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 0x1]
	float SegmentLength;//[Offset: 0x2e4, Size: 0x4]
	float MaxSegDist;//[Offset: 0x2e8, Size: 0x4]
	float CharHeight;//[Offset: 0x2ec, Size: 0x4]
	float StepDistTrace;//[Offset: 0x2f0, Size: 0x4]
	float TraceLength;//[Offset: 0x2f4, Size: 0x4]
	float MinSpaceBetweenValidPoints;//[Offset: 0x2f8, Size: 0x4]
	float SphereSize;//[Offset: 0x2fc, Size: 0x4]
	float WidthMaxAgent;//[Offset: 0x300, Size: 0x4]
	float HeightMaxCrouching;//[Offset: 0x304, Size: 0x4]
	float HeightMaxStanding;//[Offset: 0x308, Size: 0x4]
	float OffsetWhenLeaningSides;//[Offset: 0x30c, Size: 0x4]
	float OffsetFrontAim;//[Offset: 0x310, Size: 0x4]
	float EscapeRadius;//[Offset: 0x314, Size: 0x4]
	int MinCoverNum;//[Offset: 0x318, Size: 0x4]
	float MinEscapeStep;//[Offset: 0x31c, Size: 0x4]
	class Volume* VolumeClass;//[Offset: 0x320, Size: 0x8]
	bool bDraw1AllSegmentPointsTested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bDraw2SegmentPointsWithinBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	bool bDraw3SimpleCoverGeometryTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32a, Size: 0x1]
	bool bDraw4SecondPassTracesSides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32b, Size: 0x1]
	bool bDraw4SecondPassTracesSidesFrontAndBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	bool bDraw5SecondPassArrows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 0x1]
	bool DebugDrawAllPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e, Size: 0x1]
	bool DebugDrawAllBusyPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32f, Size: 0x1]
	bool DebugDisplayLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	float DebugDistance;//[Offset: 0x334, Size: 0x4]
	bool bDrawOctreeBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	bool bDebugVerts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 0x1]
	bool bDebugEdgeVerts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33a, Size: 0x1]
	bool bDebugPolyVerts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33b, Size: 0x1]
	CoverPoint*[] AllCoverPoints;//[Offset: 0x348, Size: 0x10]
	CoverPoint*[] CoverPointsCurrentlyUsed;//[Offset: 0x358, Size: 0x10]
	Vector[] EscapesPoints;//[Offset: 0x368, Size: 0x10]
	void ReleaseCover(CoverPoint* CoverPoint);// 0x58c4e3fee041
	void OnNavigationGenerationFinished(NavigationData* NavData);// 0x58c3e3fee041
	bool OccupyCover(CoverPoint* CoverPoint, Controller* Controller);// 0x58c2e3fee041
	bool IsFreeCoverPoint(const CoverPoint* CoverPoint);// 0x58c1e3fee041
	CoverPoint*[] GetCoverWithinBox(out const Box BoxIn);// 0x58c0e3fee041
	CoverGenerator* GetCoverGenerator(Object* WorldContextObject);// 0x58bfe3fee041
	bool CoverExistWithinBox(out const Box BoxIn);// 0x58bee3fee041

--------------------------------
Class: CoverPoint.Object
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Vector _DirectionToWall;//[Offset: 0x34, Size: 0xc]
	Rotator RotatorXToWall;//[Offset: 0x40, Size: 0xc]
	bool bLeftCoverStanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bRightCoverStanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bLeftCoverCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	bool bRightCoverCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1]
	bool bFrontCoverCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bCrouchedCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	Controller* OccupiedBy;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: EnvQueryGenerator_CoverFMemory.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue SquareExtent;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue BoxHeight;//[Offset: 0x88, Size: 0x38]
	class EnvQueryContext* GenerateAround;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: EnvQueryItemType_Cover.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest_CoverPointFree.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: EnvQueryTest_IsCoverPosition.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData TraceData;//[Offset: 0x1f8, Size: 0x30]
	class EnvQueryContext* Context;//[Offset: 0x228, Size: 0x8]
	AIDataProviderFloatValue ContextHorizontalDistanceOffset;//[Offset: 0x230, Size: 0x38]
	AIDataProviderFloatValue ContextVerticalDistanceOffset;//[Offset: 0x268, Size: 0x38]
	AIDataProviderBoolValue DebugData;//[Offset: 0x2a0, Size: 0x38]

--------------------------------
Class: EnvQueryTest_ParallelToCoverDirection.EnvQueryTest.EnvQueryNode.Object
	class EnvQueryContext* Context;//[Offset: 0x1f8, Size: 0x8]
	AIDataProviderFloatValue MaxEpsilon;//[Offset: 0x200, Size: 0x38]

--------------------------------
Class: EnvQueryTest_TraceDistance.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData TraceData;//[Offset: 0x1f8, Size: 0x30]
	class EnvQueryContext* Context;//[Offset: 0x228, Size: 0x8]
	AIDataProviderFloatValue MaxTraceDistance;//[Offset: 0x230, Size: 0x38]
	AIDataProviderFloatValue VerticalOffset;//[Offset: 0x268, Size: 0x38]

--------------------------------
Class: NavLinkProxyGenerator.Info.Actor.Object
	float EdgeDivisor;//[Offset: 0x2e0, Size: 0x4]
	float JumpHeight;//[Offset: 0x2e4, Size: 0x4]
	float SlantDegree;//[Offset: 0x2e8, Size: 0x4]
	float MinHeight;//[Offset: 0x2ec, Size: 0x4]
	float MaxHeight;//[Offset: 0x2f0, Size: 0x4]
	float MaxZHeight;//[Offset: 0x2f4, Size: 0x4]
	float MaxJumpDistance;//[Offset: 0x2f8, Size: 0x4]
	float MinFenceHeight;//[Offset: 0x2fc, Size: 0x4]
	float MinFenceWidth;//[Offset: 0x300, Size: 0x4]
	bool bDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool bGenerateJumpingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	bool bGenerateJumpingOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306, Size: 0x1]
	class SimpleNavLinkProxy* BPNavLinkClass;//[Offset: 0x328, Size: 0x8]

--------------------------------
Class: SimpleNavLinkProxy.NPCAINavLinkProxy.NavLinkProxy.Actor.Object

--------------------------------
Class: MFILCDebugSamplePointActor.Actor.Object

--------------------------------
Class: MFILCDebugSamplePointComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: MFILCDynamicScaleVolume.Actor.Object
	MFILCDynamicScaleComponent* ILCDynamicScaleComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: MFILCMaskVolume.LightmassInteriorMaskActor.Volume.Brush.Actor.Object
	bool bEnableDivideILC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31d, Size: 0x1]

--------------------------------
Class: G6TickableGameObject.Object

--------------------------------
Class: AssetStreamingMgr.G6TickableGameObject.Object

--------------------------------
Class: G6LogicStep_SwitchLevel.G6LogicStep.Object

--------------------------------
Class: G6LuaUEUtil.Object
	void TestEnsure();// 0x58f2e3fee041
	void TestCrash();// 0x58f1e3fee041
	bool ParseCommandLineString(FString StrKey, out FString OutValue);// 0x58f0e3fee041
	bool ParseCommandLineInt(FString StrKey, out int64 OutValue);// 0x58efe3fee041
	bool ParseCommandLineFloat(FString StrKey, out float OutValue);// 0x58eee3fee041
	bool ParseCommandLineBool(FString StrKey, out bool OutValue);// 0x58ede3fee041
	int64 GetUnixTimeMillisecond();// 0x58ece3fee041

--------------------------------
Class: G6OnlineSession.OnlineSession.Object

--------------------------------
Class: G6PlatformGameInstanceManager.Object
	<int,G6PlatformGameInstance*> mContainer;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: G6LogicStep_CleanGameEnv.G6LogicStep.Object

--------------------------------
Class: G6LogicStep_GlobalInitialize.G6LogicStep.Object

--------------------------------
Class: G6LogicStep_LanchLua.G6LogicStep.Object

--------------------------------
Class: G6LogicStep_Update.G6LogicStep.Object

--------------------------------
Class: G6LuaAppMain.Object

--------------------------------
Class: G6LuaScriptManager.Object

--------------------------------
Class: MFAvatarWearableBaseComponent.ActorComponent.Object

--------------------------------
Class: MFAvatarWearInterface.Interface.Object

--------------------------------
Class: MFCharacterAvatarComponent.ActorComponent.Object

--------------------------------
Class: MFWeakNetworkEngineHandlerComponentFactory.EngineHandlerComponentFactory.HandlerComponentFactory.Object

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x988, Size: 0x1]
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x988, Size: 0x1]
	uint32 MaxPortCountToTry;//[Offset: 0x98c, Size: 0x4]
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x99c, Size: 0x4]
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x9a0, Size: 0x4]
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x9a4, Size: 0x4]
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x9a8, Size: 0x4]
	double MaxSecondsInReceive;//[Offset: 0x9b0, Size: 0x8]
	int NbPacketsBetweenReceiveTimeTest;//[Offset: 0x9b8, Size: 0x4]
	float ResolutionConnectionTimeout;//[Offset: 0x9bc, Size: 0x4]

--------------------------------
Class: MFWeakNetworkIpNetDriver.IpNetDriver.NetDriver.Object
	bool UseReservedNetworkGUIDMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f8, Size: 0x1]

--------------------------------
Class: IpConnection.NetConnection.Player.Object
	float SocketErrorDisconnectDelay;//[Offset: 0x1b50, Size: 0x4]

--------------------------------
Class: MFWeakNetworkNetConnection.IpConnection.NetConnection.Player.Object
	float ReconnectTimeForNotify;//[Offset: 0x1bac, Size: 0x4]
	float SingleReconnectTime;//[Offset: 0x1bc0, Size: 0x4]
	int SingleMaxReconnectCount;//[Offset: 0x1bc4, Size: 0x4]
	float MaxReconnectCount;//[Offset: 0x1bc8, Size: 0x4]
	float ClientConnectionTimeout;//[Offset: 0x1bcc, Size: 0x4]
	bool EnableInitSocketFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd0, Size: 0x1]
	float SocketFixTime;//[Offset: 0x1bd4, Size: 0x4]
	void UseNewSocketReconnect();// 0x58f7e3fee041
	void PostLoadMap(World* World);// 0x58f6e3fee041

--------------------------------
Class: MFWeakNetworkStatics.BlueprintFunctionLibrary.Object
	void UseNewSocketReconnect(Object* WorldContextObject);// 0x58fde3fee041
	void SetNotSendCloseBunchEnable(Object* WorldContextObject, bool Enable);// 0x58fce3fee041
	void SetAsyncLoad(Object* WorldContextObject, bool bEnable);// 0x58fbe3fee041
	float GetSingleReconnectTime(Object* WorldContextObject);// 0x58fae3fee041
	int GetSingleMaxReconnectCount(Object* WorldContextObject);// 0x58f9e3fee041
	int GetMaxReconnectCount(Object* WorldContextObject);// 0x58f8e3fee041

--------------------------------
Class: MFWeakNetworkTypes.Object

--------------------------------
Class: AchievementBlueprintLibrary.BlueprintFunctionLibrary.Object
	void GetCachedAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out float Progress);// 0x58ffe3fee041
	void GetCachedAchievementDescription(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out FText Title, out FText LockedDescription, out FText UnlockedDescription, out bool bHidden);// 0x58fee3fee041

--------------------------------
Class: AchievementQueryCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	AchievementQueryCallbackProxy* CacheAchievements(Object* WorldContextObject, PlayerController* PlayerController);// 0x5901e3fee041
	AchievementQueryCallbackProxy* CacheAchievementDescriptions(Object* WorldContextObject, PlayerController* PlayerController);// 0x5900e3fee041

--------------------------------
Class: AchievementWriteCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	AchievementWriteCallbackProxy* WriteAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementName, float Progress, int UserTag);// 0x5902e3fee041

--------------------------------
Class: ConnectionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	ConnectionCallbackProxy* ConnectToService(Object* WorldContextObject, PlayerController* PlayerController);// 0x5903e3fee041

--------------------------------
Class: CreateSessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	CreateSessionCallbackProxy* CreateSession(Object* WorldContextObject, PlayerController* PlayerController, int PublicConnections, bool bUseLAN);// 0x5904e3fee041

--------------------------------
Class: DestroySessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	DestroySessionCallbackProxy* DestroySession(Object* WorldContextObject, PlayerController* PlayerController);// 0x5905e3fee041

--------------------------------
Class: EndMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	EndMatchCallbackProxy* EndMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, FString MatchID, byte LocalPlayerOutcome, byte OtherPlayersOutcome);// 0x5906e3fee041

--------------------------------
Class: EndTurnCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	EndTurnCallbackProxy* EndTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, interface classNone TurnBasedMatchInterface);// 0x5907e3fee041

--------------------------------
Class: FindSessionsCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	FString GetServerName(out const BlueprintSessionResult Result);// 0x590ce3fee041
	int GetPingInMs(out const BlueprintSessionResult Result);// 0x590be3fee041
	int GetMaxPlayers(out const BlueprintSessionResult Result);// 0x590ae3fee041
	int GetCurrentPlayers(out const BlueprintSessionResult Result);// 0x5909e3fee041
	FindSessionsCallbackProxy* FindSessions(Object* WorldContextObject, PlayerController* PlayerController, int MaxResults, bool bUseLAN);// 0x5908e3fee041

--------------------------------
Class: BlueprintSessionResult

--------------------------------
Class: FindTurnBasedMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	FindTurnBasedMatchCallbackProxy* FindTurnBasedMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, int MinPlayers, int MaxPlayers, int PlayerGroup, bool ShowExistingMatches);// 0x590de3fee041

--------------------------------
Class: InAppPurchaseCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	InAppPurchaseCallbackProxy* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest ProductRequest);// 0x590ee3fee041

--------------------------------
Class: InAppPurchaseProductRequest
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10]
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: InAppPurchaseCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchaseUnprocessedPurchases(PlayerController* PlayerController);// 0x5911e3fee041
	InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchaseQueryOwned(PlayerController* PlayerController);// 0x5910e3fee041
	InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest2 ProductRequest);// 0x590fe3fee041

--------------------------------
Class: InAppPurchaseProductRequest2
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10]
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: InAppPurchaseQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	InAppPurchaseQueryCallbackProxy* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0x5912e3fee041

--------------------------------
Class: InAppPurchaseQueryCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	InAppPurchaseQueryCallbackProxy2* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0x5913e3fee041

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	InAppPurchaseRestoreCallbackProxy* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest[] ConsumableProductFlags, PlayerController* PlayerController);// 0x5914e3fee041

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	InAppPurchaseRestoreCallbackProxy2* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest2[] ConsumableProductFlags, PlayerController* PlayerController);// 0x5915e3fee041

--------------------------------
Class: JoinSessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	JoinSessionCallbackProxy* JoinSession(Object* WorldContextObject, PlayerController* PlayerController, out const BlueprintSessionResult SearchResult);// 0x5916e3fee041

--------------------------------
Class: LeaderboardBlueprintLibrary.BlueprintFunctionLibrary.Object
	bool WriteLeaderboardInteger(PlayerController* PlayerController, FName StatName, int StatValue);// 0x5917e3fee041

--------------------------------
Class: LeaderboardFlushCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	LeaderboardFlushCallbackProxy* CreateProxyObjectForFlush(PlayerController* PlayerController, FName SessionName);// 0x5918e3fee041

--------------------------------
Class: LeaderboardQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	LeaderboardQueryCallbackProxy* CreateProxyObjectForIntQuery(PlayerController* PlayerController, FName StatName);// 0x5919e3fee041

--------------------------------
Class: LogoutCallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	LogoutCallbackProxy* Logout(Object* WorldContextObject, PlayerController* PlayerController);// 0x591ae3fee041

--------------------------------
Class: OnlineBeacon.Actor.Object
	float BeaconConnectionInitialTimeout;//[Offset: 0x2e8, Size: 0x4]
	float BeaconConnectionTimeout;//[Offset: 0x2ec, Size: 0x4]
	NetDriver* NetDriver;//[Offset: 0x2f0, Size: 0x8]

--------------------------------
Class: OnlineBeaconClient.OnlineBeacon.Actor.Object
	OnlineBeaconHostObject* BeaconOwner;//[Offset: 0x310, Size: 0x8]
	NetConnection* BeaconConnection;//[Offset: 0x318, Size: 0x8]
	enum ConnectionState;//[Offset: 0x320, Size: 0x1]
	void ClientOnConnected();// 0x591be3fee041

--------------------------------
Class: OnlineBeaconHostObject.Actor.Object
	FString BeaconTypeName;//[Offset: 0x2e0, Size: 0x10]
	class OnlineBeaconClient* ClientBeaconActorClass;//[Offset: 0x2f0, Size: 0x8]
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x2f8, Size: 0x10]

--------------------------------
Class: OnlineBeaconHost.OnlineBeacon.Actor.Object
	int ListenPort;//[Offset: 0x310, Size: 0x4]
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x318, Size: 0x10]

--------------------------------
Class: OnlineEngineInterfaceImpl.OnlineEngineInterface.Object
	FName VoiceSubsystemNameOverride;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: OnlinePIESettings.DeveloperSettings.Object
	bool bOnlinePIEEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	PIELoginSettingsInternal[] Logins;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: PIELoginSettingsInternal
	FString ID;//[Offset: 0x0, Size: 0x10]
	FString Token;//[Offset: 0x10, Size: 0x10]
	FString Type;//[Offset: 0x20, Size: 0x10]
	byte[] TokenBytes;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: OnlineSessionClient.OnlineSession.Object
	bool bIsFromInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	bool bHandlingDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 0x1]

--------------------------------
Class: PartyBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	FString DestSessionId;//[Offset: 0x3a0, Size: 0x10]
	PartyReservation PendingReservation;//[Offset: 0x3b0, Size: 0x50]
	enum RequestType;//[Offset: 0x400, Size: 0x1]
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 0x1]
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x402, Size: 0x1]
	void ServerUpdateReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0x5923e3fee041
	void ServerReservationRequest(FString SessionId, const PartyReservation Reservation);// 0x5922e3fee041
	void ServerRemoveMemberFromReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0x5921e3fee041
	void ServerCancelReservationRequest(const UniqueNetIdRepl PartyLeader);// 0x5920e3fee041
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0x591fe3fee041
	void ClientSendReservationFull();// 0x591ee3fee041
	void ClientReservationResponse(byte ReservationResponse);// 0x591de3fee041
	void ClientCancelReservationResponse(byte ReservationResponse);// 0x591ce3fee041

--------------------------------
Class: PartyReservation
	int TeamNum;//[Offset: 0x0, Size: 0x4]
	UniqueNetIdRepl PartyLeader;//[Offset: 0x8, Size: 0x28]
	PlayerReservation[] PartyMembers;//[Offset: 0x30, Size: 0x10]
	PlayerReservation[] RemovedPartyMembers;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: PlayerReservation
	UniqueNetIdRepl UniqueID;//[Offset: 0x0, Size: 0x28]
	FString ValidationStr;//[Offset: 0x28, Size: 0x10]
	FString Platform;//[Offset: 0x38, Size: 0x10]
	bool bAllowCrossplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float ElapsedTime;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: PartyBeaconHost.OnlineBeaconHostObject.Actor.Object
	PartyBeaconState* State;//[Offset: 0x308, Size: 0x8]
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	float SessionTimeoutSecs;//[Offset: 0x374, Size: 0x4]
	float TravelSessionTimeoutSecs;//[Offset: 0x378, Size: 0x4]

--------------------------------
Class: PartyBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 0x8]
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4]
	int MaxReservations;//[Offset: 0x34, Size: 0x4]
	int NumTeams;//[Offset: 0x38, Size: 0x4]
	int NumPlayersPerTeam;//[Offset: 0x3c, Size: 0x4]
	FName TeamAssignmentMethod;//[Offset: 0x40, Size: 0x8]
	int ReservedHostTeamNum;//[Offset: 0x48, Size: 0x4]
	int ForceTeamNum;//[Offset: 0x4c, Size: 0x4]
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bEnableRemovalRequests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	PartyReservation[] Reservations;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: QuitMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	QuitMatchCallbackProxy* QuitMatch(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, byte Outcome, int TurnTimeoutInSeconds);// 0x5924e3fee041

--------------------------------
Class: ShowLoginUICallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	ShowLoginUICallbackProxy* ShowExternalLoginUI(Object* WorldContextObject, PlayerController* InPlayerController);// 0x5925e3fee041

--------------------------------
Class: SpectatorBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	FString DestSessionId;//[Offset: 0x3a0, Size: 0x10]
	SpectatorReservation PendingReservation;//[Offset: 0x3b0, Size: 0x78]
	enum RequestType;//[Offset: 0x428, Size: 0x1]
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 0x1]
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 0x1]
	void ServerReservationRequest(FString SessionId, const SpectatorReservation Reservation);// 0x592be3fee041
	void ServerCancelReservationRequest(const UniqueNetIdRepl Spectator);// 0x592ae3fee041
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0x5929e3fee041
	void ClientSendReservationFull();// 0x5928e3fee041
	void ClientReservationResponse(byte ReservationResponse);// 0x5927e3fee041
	void ClientCancelReservationResponse(byte ReservationResponse);// 0x5926e3fee041

--------------------------------
Class: SpectatorReservation
	UniqueNetIdRepl SpectatorId;//[Offset: 0x0, Size: 0x28]
	PlayerReservation Spectator;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: SpectatorBeaconHost.OnlineBeaconHostObject.Actor.Object
	SpectatorBeaconState* State;//[Offset: 0x308, Size: 0x8]
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	float SessionTimeoutSecs;//[Offset: 0x374, Size: 0x4]
	float TravelSessionTimeoutSecs;//[Offset: 0x378, Size: 0x4]

--------------------------------
Class: SpectatorBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 0x8]
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4]
	int MaxReservations;//[Offset: 0x34, Size: 0x4]
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	SpectatorReservation[] Reservations;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TestBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	void ServerPong();// 0x592de3fee041
	void ClientPing();// 0x592ce3fee041

--------------------------------
Class: TestBeaconHost.OnlineBeaconHostObject.Actor.Object

--------------------------------
Class: TurnBasedBlueprintLibrary.BlueprintFunctionLibrary.Object
	void RegisterTurnBasedMatchInterfaceObject(Object* WorldContextObject, PlayerController* PlayerController, Object* Object);// 0x5931e3fee041
	void GetPlayerDisplayName(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, int PlayerIndex, out FString PlayerDisplayName);// 0x5930e3fee041
	void GetMyPlayerIndex(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out int PlayerIndex);// 0x592fe3fee041
	void GetIsMyTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out bool bIsMyTurn);// 0x592ee3fee041

--------------------------------
Class: SynthComponent.SceneComponent.ActorComponent.Object
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x202, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x202, Size: 0x1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x202, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x202, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x202, Size: 0x1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x208, Size: 0x8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x210, Size: 0x3a0]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x5b0, Size: 0x8]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x5b8, Size: 0x50]
	SoundClass* SoundClass;//[Offset: 0x608, Size: 0x8]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x610, Size: 0x8]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x618, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x620, Size: 0x10]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x630, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x640, Size: 0x10]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x650, Size: 0x1]
	bool bIsPreviewSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x650, Size: 0x1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x654, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x658, Size: 0x4]
	delegate OnAudioEnvelopeValue;//[Offset: 0x660, Size: 0x10]
	SynthSound* Synth;//[Offset: 0x690, Size: 0x8]
	AudioComponent* AudioComponent;//[Offset: 0x698, Size: 0x8]
	void Stop();// 0x5938e3fee041
	void Start();// 0x5937e3fee041
	void SetVolumeMultiplier(float VolumeMultiplier);// 0x5936e3fee041
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x5935e3fee041
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x5934e3fee041
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x5933e3fee041
	bool IsPlaying();// 0x5932e3fee041

--------------------------------
Class: SynthSound.SoundWaveProcedural.SoundWave.SoundBase.Object
	SynthComponent* OwningSynthComponent;//[Offset: 0x3c0, Size: 0x8]

--------------------------------
Class: VoipListenerSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object
	bool IsIdling();// 0x5939e3fee041

--------------------------------
Class: NamedInterfaces.Object
	NamedInterface[] NamedInterfaces;//[Offset: 0x28, Size: 0x10]
	NamedInterfaceDef[] NamedInterfaceDefs;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: NamedInterface
	FName InterfaceName;//[Offset: 0x0, Size: 0x8]
	Object* InterfaceObject;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: NamedInterfaceDef
	FName InterfaceName;//[Offset: 0x0, Size: 0x8]
	FString InterfaceClassName;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TurnBasedMatchInterface.Interface.Object
	void OnMatchReceivedTurn(FString Match, bool bDidBecomeActive);// 0x593be3fee041
	void OnMatchEnded(FString Match);// 0x593ae3fee041

--------------------------------
Class: MFAutoTexMergeComponent.SceneComponent.ActorComponent.Object
	delegate OnMergeTextureTaskCompleteEvent;//[Offset: 0x210, Size: 0x10]
	Texture2D* MergedDiffuseTexture;//[Offset: 0x220, Size: 0x8]
	Texture2D*[] PieceDiffuseTextures;//[Offset: 0x230, Size: 0x10]
	Texture2D* MergedNormalTexture;//[Offset: 0x240, Size: 0x8]
	Texture2D*[] PieceNormalTextures;//[Offset: 0x250, Size: 0x10]
	Texture2D* MergedMetallicAOTexture;//[Offset: 0x260, Size: 0x8]
	Texture2D*[] PieceMetallicAOTextures;//[Offset: 0x270, Size: 0x10]
	Vector4[] TargetUVTransform;//[Offset: 0x280, Size: 0x10]
	SkeletalMesh* TargetMesh;//[Offset: 0x290, Size: 0x8]
	SkeletalMesh*[] PieceMeshes;//[Offset: 0x298, Size: 0x10]
	void TestTextureArrangeTree(int targetWidth, int targetHeight);// 0x5941e3fee041
	int TestInputTextureMems(out const Texture2D*[] InputTexArray);// 0x5940e3fee041
	bool AsyncMergeInputTextures(out const Texture2D*[] InputTexArray, int TargetTexureSize);// 0x593fe3fee041
	bool AsyncMergeInputTextureGroups(out const Texture2D*[] InputDiffuseTexArray, out const Texture2D*[] InputNormalTexArray, out const Texture2D*[] InputMaskTexArray, int TargetTexureSize);// 0x593ee3fee041
	bool AsyncMergeInputSkeletalMeshes(out const SkeletalMesh*[] InputSkeletalMeshes, out const Texture2D*[] InputDiffuseTexArray, out const Texture2D*[] InputNormalTexArray, out const Texture2D*[] InputMaskTexArray, int TargetTexureSize);// 0x593de3fee041

--------------------------------
Class: PoolSettings.Object
	bool ReinitializeInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool InstantiateOnDemand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool NeverFailDeferredSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool KeepOrphanActorsAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: PawnPool.ActorComponent.Object
	PooledPawn*[] Pool;//[Offset: 0xb8, Size: 0x10]
	class PooledPawn* TemplateClass;//[Offset: 0xc8, Size: 0x8]
	int PoolSize;//[Offset: 0xd0, Size: 0x4]
	bool AutoInitialize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	void ReturnActor(PooledPawn* PooledActor);// 0x5959e3fee041
	void InitializeObjectPoolWithNewTemplateClass(const class PooledPawn Template, const int SizeOfPool);// 0x5958e3fee041
	void InitializeObjectPool();// 0x5957e3fee041
	void GetSpawnedObjects(out PooledPawn*[] Spawned);// 0x5956e3fee041
	PooledPawn* GetSpawnedObject();// 0x5955e3fee041
	void GetObjectsFromPool(out PooledPawn*[] Spawned, out PooledPawn*[] Inactive);// 0x5954e3fee041
	PooledPawn*[] GetObjectArray();// 0x5953e3fee041
	void GetInactiveObjects(out PooledPawn*[] Inactive);// 0x5952e3fee041
	PooledPawn* GetInactiveObject();// 0x5951e3fee041
	PooledPawn* FinishDeferredSpawnFromPool(PooledPawn* Pawn, const bool Reconstruct, out const Transform SpawnTransform);// 0x5950e3fee041
	void EmptyObjectPool();// 0x594fe3fee041
	PooledPawn* BeginDeferredSpawnFromPool(const Object* WorldContextObject, PawnPool* ObjectPool, class Object PooledClass, out const PoolSpawnOptions SpawnOptions, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner, const bool Reconstruct, out bool SpawnSuccessful);// 0x594ee3fee041

--------------------------------
Class: PooledPawn.Pawn.Actor.Object
	PawnPool* OwningPool;//[Offset: 0x350, Size: 0x8]
	bool Spawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	TimerHandle LifeSpanHandle;//[Offset: 0x360, Size: 0x8]
	float LifeSpanPool;//[Offset: 0x368, Size: 0x4]
	delegate OnPoolBeginPlay;//[Offset: 0x370, Size: 0x10]
	delegate OnPoolEndPlay;//[Offset: 0x380, Size: 0x10]
	void SpawnFromPool(const bool Reconstruct, out const PoolSpawnOptions SpawnOptions, out const Transform SpawnTransform);// 0x597ee3fee041
	void SetLifeSpanPool(float InLifespan);// 0x597de3fee041
	void ReturnToPool();// 0x597ce3fee041
	PawnPool* GetOwningPool();// 0x597be3fee041
	float GetLifeSpanPool();// 0x597ae3fee041
	void EVENT_OnPoolEndPlay();// 0x5979e3fee041
	void EVENT_OnPoolBeginPlay();// 0x5978e3fee041

--------------------------------
Class: CharacterPool.ActorComponent.Object
	PooledCharacter*[] Pool;//[Offset: 0xb8, Size: 0x10]
	class PooledCharacter* TemplateClass;//[Offset: 0xc8, Size: 0x8]
	int PoolSize;//[Offset: 0xd0, Size: 0x4]
	bool AutoInitialize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	void ReturnActor(PooledCharacter* PooledActor);// 0x5965e3fee041
	void InitializeObjectPoolWithNewTemplateClass(const class PooledCharacter Template, const int SizeOfPool);// 0x5964e3fee041
	void InitializeObjectPool();// 0x5963e3fee041
	void GetSpawnedObjects(out PooledCharacter*[] Spawned);// 0x5962e3fee041
	PooledCharacter* GetSpawnedObject();// 0x5961e3fee041
	void GetObjectsFromPool(out PooledCharacter*[] Spawned, out PooledCharacter*[] Inactive);// 0x5960e3fee041
	PooledCharacter*[] GetObjectArray();// 0x595fe3fee041
	void GetInactiveObjects(out PooledCharacter*[] Inactive);// 0x595ee3fee041
	PooledCharacter* GetInactiveObject();// 0x595de3fee041
	PooledCharacter* FinishDeferredSpawnFromPool(PooledCharacter* Character, const bool Reconstruct, out const Transform SpawnTransform);// 0x595ce3fee041
	void EmptyObjectPool();// 0x595be3fee041
	PooledCharacter* BeginDeferredSpawnFromPool(const Object* WorldContextObject, CharacterPool* ObjectPool, class Object PooledClass, out const PoolSpawnOptions SpawnOptions, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner, const bool Reconstruct, out bool SpawnSuccessful);// 0x595ae3fee041

--------------------------------
Class: PooledCharacter.Character.Pawn.Actor.Object
	CharacterPool* OwningPool;//[Offset: 0x598, Size: 0x8]
	bool Spawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	TimerHandle LifeSpanHandle;//[Offset: 0x5a8, Size: 0x8]
	float LifeSpanPool;//[Offset: 0x5b0, Size: 0x4]
	delegate OnPoolBeginPlay;//[Offset: 0x5b8, Size: 0x10]
	delegate OnPoolEndPlay;//[Offset: 0x5c8, Size: 0x10]
	void SpawnFromPool(const bool Reconstruct, out const PoolSpawnOptions SpawnOptions, out const Transform SpawnTransform);// 0x5977e3fee041
	void SetLifeSpanPool(float InLifespan);// 0x5976e3fee041
	void ReturnToPool();// 0x5975e3fee041
	CharacterPool* GetOwningPool();// 0x5974e3fee041
	float GetLifeSpanPool();// 0x5973e3fee041
	void EVENT_OnPoolEndPlay();// 0x5972e3fee041
	void EVENT_OnPoolBeginPlay();// 0x5971e3fee041

--------------------------------
Class: PooledProjectile.ActorComponent.Object
	ProjectileMovementComponent* Movement;//[Offset: 0xb8, Size: 0x8]
	PooledActor* AOwner;//[Offset: 0xc0, Size: 0x8]
	PooledPawn* POwner;//[Offset: 0xc8, Size: 0x8]
	PrimitiveComponent* Primitive;//[Offset: 0xd0, Size: 0x8]
	Vector Direction;//[Offset: 0xd8, Size: 0xc]
	float InitialSpeed;//[Offset: 0xe4, Size: 0x4]
	float MaxSpeed;//[Offset: 0xe8, Size: 0x4]
	bool UpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	bool RotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xed, Size: 0x1]
	bool InitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xed, Size: 0x1]
	float ProjectileGravityScale;//[Offset: 0xf0, Size: 0x4]
	bool ShouldBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	bool BounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf4, Size: 0x1]
	float Bounciness;//[Offset: 0xf8, Size: 0x4]
	float Friction;//[Offset: 0xfc, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x100, Size: 0x4]
	bool ForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 0x1]
	int MaxSimulationIterations;//[Offset: 0x108, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x10c, Size: 0x4]
	bool IsHomingProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
	delegate OnProjectileBounce;//[Offset: 0x118, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x128, Size: 0x10]
	Actor* HomingTarget;//[Offset: 0x138, Size: 0x8]
	SceneComponent* HomingTargetComponent;//[Offset: 0x140, Size: 0x8]
	float HomingAccelerationMagnitude;//[Offset: 0x148, Size: 0x4]
	void Shoot();// 0x5983e3fee041
	void ProjectileStop(out const HitResult HitResult);// 0x5982e3fee041
	void ProjectileBounce(out const HitResult HitResult, out const Vector Velocity);// 0x5981e3fee041
	ProjectileMovementComponent* GetMovementComponent();// 0x5980e3fee041
	void Break();// 0x597fe3fee041

--------------------------------
Class: PooledSplineProjectile.ActorComponent.Object
	PooledPawn* POwner;//[Offset: 0x158, Size: 0x8]
	PooledActor* AOwner;//[Offset: 0x160, Size: 0x8]
	PrimitiveComponent* Primitive;//[Offset: 0x168, Size: 0x8]
	SplineComponent* SplineComponent;//[Offset: 0x170, Size: 0x8]
	float PathWidth;//[Offset: 0x178, Size: 0x4]
	float Speed;//[Offset: 0x17c, Size: 0x4]
	byte[] PathCollisionQueryTypes;//[Offset: 0x180, Size: 0x10]
	Actor*[] IgnoredActorsOnCollisionQuery;//[Offset: 0x190, Size: 0x10]
	byte CollisionQueryDebugMode;//[Offset: 0x1a0, Size: 0x1]
	delegate OnProjectileHit;//[Offset: 0x1a8, Size: 0x10]
	void Shoot();// 0x5987e3fee041
	void SetSplineComponent(SplineComponent* Target);// 0x5986e3fee041
	SplineComponent* GetSplineComponent();// 0x5985e3fee041
	void Break();// 0x5984e3fee041

--------------------------------
Class: MFQuestComponentBase.ActorComponent.Object
	MFQuestBase* OwnerQuest;//[Offset: 0xb8, Size: 0x8]
	void InitializeQuestComponent(MFQuestBase* InOwner);// 0x598ae3fee041
	void DeactivateQuestComponent(enum InResult);// 0x5989e3fee041
	void ActivateQuestComponent();// 0x5988e3fee041

--------------------------------
Class: MFQuestBase.Actor.Object
	delegate OnQuestStateChange;//[Offset: 0x310, Size: 0x10]
	MFQuestActionComponentBase*[] ActionComponents;//[Offset: 0x330, Size: 0x10]
	MFQuestActionComponentBase*[] LevelUnrelatedActionComponents;//[Offset: 0x340, Size: 0x10]
	MFQuestActivationComponentBase*[] ActivationComponents;//[Offset: 0x350, Size: 0x10]
	bool CanRunOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	MFQuestObjectiveComponentBase* ObjectiveComponent;//[Offset: 0x368, Size: 0x8]
	int CustomIndex;//[Offset: 0x378, Size: 0x4]
	int GraphID;//[Offset: 0x37c, Size: 0x4]
	QuestState QuestStatus;//[Offset: 0x380, Size: 0x2]
	enum QuestFailedType;//[Offset: 0x382, Size: 0x1]
	bool IsAffiliateQuest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x383, Size: 0x1]
	int[] AssembleCustomIndexList;//[Offset: 0x388, Size: 0x10]
	int[] QuestTemplateParams;//[Offset: 0x398, Size: 0x10]
	bool bIsTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	float ActivateTime;//[Offset: 0x3ac, Size: 0x4]
	float FinishTime;//[Offset: 0x3b0, Size: 0x4]
	Character* CacheCharacter;//[Offset: 0x3b8, Size: 0x8]
	void ShowLog(FString LogStr, bool bImportant);// 0x59cae3fee041
	void SetQuestTemplateParams(out int[] InQuestTemplateParams);// 0x59c9e3fee041
	void SetQuestStatus(enum InNewStatus);// 0x59c8e3fee041
	void SetQuestObjective(MFQuestObjectiveComponentBase* QuestObjective);// 0x59c7e3fee041
	void SetQuestFailedType(enum InFailedType);// 0x59c6e3fee041
	void SetMissionStatus(enum InNewStatus);// 0x59c5e3fee041
	void SetMissionCurProgress(int CurProgress);// 0x59c4e3fee041
	void SetIsTemplateQuest(bool bIsTemplateQuest);// 0x59c3e3fee041
	void SetInGraphID(int InGraphID);// 0x59c2e3fee041
	void SetCustomIndex(int InIndex);// 0x59c1e3fee041
	void SetAffiliate(bool Value);// 0x59c0e3fee041
	void OnReq_QuestStatus();// 0x59bfe3fee041
	void OnProgressChange(int AddProgress, int CurrpProgress, int MaxProgress);// 0x59bee3fee041
	void OnObjectiveStateChanged(enum NewState, enum OldState);// 0x59bde3fee041
	bool IsTemplateQuest();// 0x59bce3fee041
	bool IsAffiliate();// 0x59bbe3fee041
	bool IsActive();// 0x59bae3fee041
	int GetQuestTemplateParamByIndex(int InParamIndex);// 0x59b9e3fee041
	enum GetQuestStatus();// 0x59b8e3fee041
	QuestState GetQuestState();// 0x59b7e3fee041
	enum GetQuestObjectiveType();// 0x59b6e3fee041
	MFQuestObjectiveComponentBase* GetQuestObjective();// 0x59b5e3fee041
	MFQuestInstigatorComponentBase* GetQuestInstigator();// 0x59b4e3fee041
	enum GetQuestFailedType();// 0x59b3e3fee041
	int GetOldQuestStatus();// 0x59b2e3fee041
	Character* GetInstigatorCharacter();// 0x59b1e3fee041
	int GetInGraphID();// 0x59b0e3fee041
	float GetFinishTime();// 0x59afe3fee041
	int GetCustomIndex();// 0x59aee3fee041
	int GetCurrQuestStatus();// 0x59ade3fee041
	void GetAssembleCustomIndexList(out int[] OutList);// 0x59ace3fee041
	void GetAffiliateMissionList(out FString[] OutList);// 0x59abe3fee041
	float GetActivateTime();// 0x59aae3fee041
	void DeactivateQuest(enum InResult);// 0x59a9e3fee041
	void ClientShowLog(bool bImportant, FString LogStr);// 0x59a8e3fee041
	void AssignQuestInstigator(MFQuestInstigatorComponentBase* InInstigator);// 0x59a7e3fee041
	void AddAssembleCustomIndex(int InCustomIndex);// 0x59a6e3fee041
	void ActivateQuest();// 0x59a5e3fee041

--------------------------------
Class: MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object

--------------------------------
Class: MFQuestActivationComponentBase.MFQuestComponentBase.ActorComponent.Object

--------------------------------
Class: MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	delegate OnObjectiveStateChanged;//[Offset: 0xc0, Size: 0x10]
	QuestContextPairConfig[] QuestContextPairConfigList;//[Offset: 0xd0, Size: 0x10]
	enum QuestObjectiveType;//[Offset: 0xe0, Size: 0x1]
	MFQuestConditionComponentBase*[] AndObjectiveConditionList;//[Offset: 0xe8, Size: 0x10]
	MFQuestConditionComponentBase*[] OrObjectiveConditionList;//[Offset: 0xf8, Size: 0x10]
	MFQuestProgressComponentBase* QuestProgress;//[Offset: 0x108, Size: 0x8]
	bool FailWhenAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	enum CurrQuestCompStatus;//[Offset: 0x111, Size: 0x1]
	QuestContextPair[] QuestContextList;//[Offset: 0x118, Size: 0x10]
	void SetQuestCompStatus(enum InNewStatus);// 0x59fee3fee041
	void SetObjectiveProgress(int MaxCount, int CurrCount);// 0x59fde3fee041
	void SetBringInObjectiveProgress(int MaxCount, int CurrCount);// 0x59fce3fee041
	void OnQuestProgressedChanged(int ProgressToAdd, int CurrentProgress);// 0x59fbe3fee041
	bool IsQuestCompActive();// 0x59fae3fee041
	bool IsFailWhenAchieved();// 0x59f9e3fee041
	enum GetQuestObjectiveType();// 0x59f8e3fee041
	enum GetQuestCompStatus();// 0x59f7e3fee041
	MFQuestConditionComponentBase*[] GetOrConditionList();// 0x59f6e3fee041
	void GetObjectiveProgress(out int Out_MaxCount, out int Out_CurrCount);// 0x59f5e3fee041
	int GetMaxObjectiveProgress();// 0x59f4e3fee041
	int GetBringInObjectiveProgress();// 0x59f3e3fee041
	MFQuestConditionComponentBase*[] GetAndConditionList();// 0x59f2e3fee041
	float GetActivationTime();// 0x59f1e3fee041
	void ClearCurrQuestProgress();// 0x59f0e3fee041

--------------------------------
Class: QuestContextPairConfig
	class MFQuestContextSourceBase* ContextSourceClass;//[Offset: 0x0, Size: 0x8]
	class MFQuestContextBase* ContextClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MFQuestContextSourceBase.Object

--------------------------------
Class: MFQuestContextBase.Object

--------------------------------
Class: MFQuestConditionComponentBase.Object
	delegate OnGenerateDebugInfo;//[Offset: 0x28, Size: 0x10]
	MFQuestBase* OwnerQuest;//[Offset: 0x38, Size: 0x8]
	bool bAdvanceEdit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	enum ConditionType;//[Offset: 0x41, Size: 0x1]
	enum CheckType;//[Offset: 0x42, Size: 0x1]
	bool bExpectConditionResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	float CustomTickInterval;//[Offset: 0x44, Size: 0x4]
	TimerHandle CustomTickTimerHandle;//[Offset: 0x48, Size: 0x8]
	void CustomTick();// 0x59cde3fee041

--------------------------------
Class: MFQuestProgressComponentBase.MFQuestComponentBase.ActorComponent.Object
	int BringInProgress;//[Offset: 0xc0, Size: 0x4]
	int CurrProgress;//[Offset: 0xc4, Size: 0x4]
	int MaxProgress;//[Offset: 0xc8, Size: 0x4]
	int OldProgress;//[Offset: 0xcc, Size: 0x4]
	bool bClearWhenFail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bCanBringInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	void OnReq_MaxProgress();// 0x5a06e3fee041
	void OnReq_CurrProgress();// 0x5a05e3fee041
	bool IsQuestProgressFinished();// 0x5a04e3fee041

--------------------------------
Class: QuestContextPair
	MFQuestContextSourceBase* ContextSource;//[Offset: 0x0, Size: 0x8]
	MFQuestContextBase* Context;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: QuestState
	enum CurrQuestStatus;//[Offset: 0x0, Size: 0x1]
	enum OldQuestStatus;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: MFQuestInstigatorComponentBase.MFQuestComponentBase.ActorComponent.Object
	bool bLogToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	enum InstigatorType;//[Offset: 0xc1, Size: 0x1]
	FString[] DrawTexts;//[Offset: 0xc8, Size: 0x10]
	bool IsObjectiveInstigatorSupported(const Actor* InQuestInstigator);// 0x59d3e3fee041
	enum GetQuestInstigatorType();// 0x59d2e3fee041
	void ClientSetQuestDistInfos(const FString[] Infos);// 0x59d1e3fee041

--------------------------------
Class: MFBPQuestActionComponentBase.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	void BP_InitializeQuestComponent(MFQuestBase* InOwner);// 0x598de3fee041
	void BP_DeactivateQuestComponent(enum InResult);// 0x598ce3fee041
	void BP_ActivateQuestComponentBP();// 0x598be3fee041

--------------------------------
Class: MFQuestActivationComp_TriggerVolume.MFQuestActivationComponentBase.MFQuestComponentBase.ActorComponent.Object
	Volume* TriggerVolume;//[Offset: 0xc0, Size: 0x8]
	void OnTrigger(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult OverlapInfo);// 0x598ee3fee041

--------------------------------
Class: MFQuestNode.Object
	bool bFailedWhenAndParallelNodeFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bForceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	enum TickNode();// 0x59a2e3fee041
	bool ShouldFailedWhenAndParallelNodeFailed();// 0x59a1e3fee041
	void SetupPrevConnections(out const MFQuestNode*[] InNodeList);// 0x59a0e3fee041
	void SetupNextConnection(MFQuestNode* InNode);// 0x599fe3fee041
	void SetForceCheck(bool State);// 0x599ee3fee041
	bool IsMyQuest(const MFQuestBase* InQuest);// 0x599de3fee041
	void InitQuestNode(MFQuestBase* InQuest, enum InType, bool InFailedWhenAndParallelNodeFailed);// 0x599ce3fee041
	bool HasPrevConnection();// 0x599be3fee041
	enum GetQuestNodeType();// 0x599ae3fee041
	MFQuestNode*[] GetPrevConnections();// 0x5999e3fee041
	enum GetNodeQuestStatus(MFQuestNode* GetNode);// 0x5998e3fee041
	int GetNodeQuestCustomIndex();// 0x5997e3fee041
	MFQuestNode*[] GetNextConnections();// 0x5996e3fee041
	bool GetForceCheck();// 0x5995e3fee041
	enum GetConnectionType();// 0x5994e3fee041
	void DestroyNode();// 0x5993e3fee041
	void DeactivateNode(enum InResult);// 0x5992e3fee041
	bool CheckQuestNode();// 0x5991e3fee041
	void CheckPrevConnections(out bool bFail, out bool bSuccess);// 0x5990e3fee041
	void ActivateNode();// 0x598fe3fee041

--------------------------------
Class: MFQuestAffiliateNode.MFQuestNode.Object

--------------------------------
Class: MFQuestAssembleNode.MFQuestNode.Object
	MFQuestAffiliateNode*[] QuestAffiliateNodeArray;//[Offset: 0x58, Size: 0x10]
	void GetAffiliateQuestNodes(out MFQuestAffiliateNode*[] QuestAffiliateNodeArray);// 0x59a4e3fee041
	void AddAffiliateQuestNode(MFQuestAffiliateNode* QuestNode);// 0x59a3e3fee041

--------------------------------
Class: MFQuestCheckNode.MFQuestNode.Object
	bool bSuccessWhenParallelNodeSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	void InitCheckQuestNode(bool InSuccessWhenParallelNodeSuccess);// 0x59cce3fee041
	bool GetSuccessWhenParallelNodeSuccess();// 0x59cbe3fee041

--------------------------------
Class: CheckActorParamBase.Object

--------------------------------
Class: CheckActorClass.CheckActorParamBase.Object
	class Actor* ParentClass;//[Offset: 0x28, Size: 0x28]

--------------------------------
Class: CheckActorLocation.CheckActorParamBase.Object
	Vector Center;//[Offset: 0x28, Size: 0xc]
	float Radius;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: MFQuestConditionComp_CheckActorProperty.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	CheckActorParamBase*[] CheckParams;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: CheckBlackboardBase.Object
	class MFQuestContextSourceBase* TargetActor;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: CheckIntMapValue.CheckBlackboardBase.Object
	GameplayTag Key;//[Offset: 0x30, Size: 0x8]
	enum CompareType;//[Offset: 0x38, Size: 0x1]
	int Value1;//[Offset: 0x3c, Size: 0x4]
	int Value2;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: CheckIntArrayMapNum.CheckBlackboardBase.Object
	GameplayTag Key;//[Offset: 0x30, Size: 0x8]
	enum CompareType;//[Offset: 0x38, Size: 0x1]
	int Value1;//[Offset: 0x3c, Size: 0x4]
	int Value2;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: CheckObjectArrayMapNum.CheckBlackboardBase.Object
	GameplayTag Key;//[Offset: 0x30, Size: 0x8]
	enum CompareType;//[Offset: 0x38, Size: 0x1]
	int Value1;//[Offset: 0x3c, Size: 0x4]
	int Value2;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MFQuestConditionComp_CheckBlackboard.MFQuestConditionComponentBase.Object
	CheckBlackboardBase*[] CheckParams;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MFQuestConditionComp_Dist.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* SourceActorContextConfig;//[Offset: 0x50, Size: 0x8]
	class MFQuestContextSourceBase* DestActorContextConfig;//[Offset: 0x58, Size: 0x8]
	float MinDist;//[Offset: 0x60, Size: 0x4]
	float MaxDist;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: MFQuestConditionComp_RandomProbability.MFQuestConditionComponentBase.Object
	float ProbabilityPercent;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MFQuestContext_Actor.MFQuestContextBase.Object
	Actor* ContextActor;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MFQuestContext_GameplayTag.MFQuestContextBase.Object

--------------------------------
Class: MFQuestContext_Number.MFQuestContextBase.Object

--------------------------------
Class: MFQuestContext_Object.MFQuestContextBase.Object
	Object* Object;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MFQuestContextSource_BlackboardKey.MFQuestContextSourceBase.Object

--------------------------------
Class: MFQuestContextSource_BlackboardTarget.MFQuestContextSourceBase.Object

--------------------------------
Class: MFQuestContextSource_CurrentValue.MFQuestContextSourceBase.Object

--------------------------------
Class: MFQuestContextSource_ObjectiveInstigator.MFQuestContextSourceBase.Object

--------------------------------
Class: MFQuestContextSource_ObjectiveTarget.MFQuestContextSourceBase.Object

--------------------------------
Class: MFQuestContextSource_PreviousValue.MFQuestContextSourceBase.Object

--------------------------------
Class: MFQuestContextSource_QuestDistributer.MFQuestContextSourceBase.Object

--------------------------------
Class: QuestConditionEffectContainer.Object
	MFQuestDistributerBase* QuestDistributer;//[Offset: 0x28, Size: 0x8]
	MFQuestPrimaryConditionBase* PrimaryCondition;//[Offset: 0x30, Size: 0x8]
	MFQuestConditionComponentBase*[] SubConditions;//[Offset: 0x38, Size: 0x10]
	MFQuestEffectBase*[] QuestEffects;//[Offset: 0x48, Size: 0x10]
	MFQuestEffectBase*[] FailQuestEffects;//[Offset: 0x58, Size: 0x10]
	void OnTriggerPrimaryCondition(out const QuestContextPair[] QuestContextList);// 0x59cee3fee041

--------------------------------
Class: MFQuestDistributerBase.Actor.Object
	enum QuestType;//[Offset: 0x2e0, Size: 0x1]
	QuestConditionEffectContainer*[] QuestConditionEffectContainers;//[Offset: 0x2e8, Size: 0x10]
	<Actor*,QuestDistributerBlackboard> ActorBlackboards;//[Offset: 0x2f8, Size: 0x50]
	delegate OnBlackboardIntMapChanged;//[Offset: 0x348, Size: 0x10]
	delegate OnBlackboardIntArrayMapChanged;//[Offset: 0x358, Size: 0x10]
	delegate OnBlackboardObjectArrayMapChanged;//[Offset: 0x368, Size: 0x10]
	Character* LastTriggerCharacter;//[Offset: 0x378, Size: 0x8]
	void ShowLog(FString LogStr, bool bImportant);// 0x59cfe3fee041

--------------------------------
Class: QuestDistributerBlackboard
	<GameplayTag,int> IntMap;//[Offset: 0x0, Size: 0x50]
	<GameplayTag,NestedIntArray> IntArrayMap;//[Offset: 0x50, Size: 0x50]
	<GameplayTag,NestedObjectArray> ObjectArrayMap;//[Offset: 0xa0, Size: 0x50]
	<GameplayTag,Object*> ObjectMap;//[Offset: 0xf0, Size: 0x50]

--------------------------------
Class: NestedIntArray
	int[] IntArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NestedObjectArray
	Object*[] ObjectArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MFQuestPrimaryConditionBase.Object
	delegate OnTriggerPrimaryCondition;//[Offset: 0x28, Size: 0x10]
	delegate OnGenerateDebugInfo;//[Offset: 0x38, Size: 0x10]
	QuestContextPairConfig[] QuestContextPairConfigList;//[Offset: 0x48, Size: 0x10]
	QuestConditionEffectContainer* ConditionEffectContainer;//[Offset: 0x58, Size: 0x8]
	MFQuestDistributerBase* QuestDistributer;//[Offset: 0x60, Size: 0x8]
	QuestContextPair[] QuestContextList;//[Offset: 0x68, Size: 0x10]
	void RemoveEventListener();// 0x5a01e3fee041
	void Initialize(QuestConditionEffectContainer* InConditionEffectContainer, MFQuestDistributerBase* InQuestDistributer);// 0x5a00e3fee041
	void AddEventListener();// 0x59ffe3fee041

--------------------------------
Class: MFQuestEffectBase.Object
	delegate OnGenerateDebugInfo;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlackboardOperatorBase.Object
	class MFQuestContextSourceBase* TargetActor;//[Offset: 0x28, Size: 0x8]
	bool BTeamInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: IntMapAddValue.BlackboardOperatorBase.Object
	GameplayTag Key;//[Offset: 0x34, Size: 0x8]
	class MFQuestContextSourceBase* ModifyValueSource;//[Offset: 0x40, Size: 0x8]
	int ModifyValue;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: IntMapSetValue.BlackboardOperatorBase.Object
	GameplayTag Key;//[Offset: 0x34, Size: 0x8]
	class MFQuestContextSourceBase* ValueSource;//[Offset: 0x40, Size: 0x8]
	int Value;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: IntArrayMapAddValue.BlackboardOperatorBase.Object
	GameplayTag Key;//[Offset: 0x34, Size: 0x8]
	class MFQuestContextSourceBase* ModifyValueSource;//[Offset: 0x40, Size: 0x8]
	int ModifyValue;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: IntArrayMapRemoveValue.BlackboardOperatorBase.Object
	GameplayTag Key;//[Offset: 0x34, Size: 0x8]
	int RemoveIndex;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: ObjectArrayMapAddUnique.BlackboardOperatorBase.Object
	GameplayTag Key;//[Offset: 0x34, Size: 0x8]
	class MFQuestContextSourceBase* TargetContextSource;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: ObjectArrayMapEmpty.BlackboardOperatorBase.Object
	GameplayTag Key;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: MFQuestEffect_ModifyBlackboard.MFQuestEffectBase.Object
	BlackboardOperatorBase*[] BlackboardOperators;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MFQuestEndNode.MFQuestNode.Object
	enum GetFinalNodeQuestStatus();// 0x59d0e3fee041

--------------------------------
Class: MFQuestEventManager.Object

--------------------------------
Class: MFQuestManagerActor.Actor.Object
	MFQuestNodeGraph*[] QuestGraphList;//[Offset: 0x2e0, Size: 0x10]
	void GetQuestNodeGraphFromPC(PlayerController* InOwnerPC, out MFQuestNodeGraph*[] InGraphList);// 0x59d5e3fee041
	MFQuestNodeGraph* CreateNewQuestGraph(Controller* InOwnerController);// 0x59d4e3fee041

--------------------------------
Class: MFQuestNodeGraph.Object
	delegate OnGraphStatusChange;//[Offset: 0x28, Size: 0x10]
	bool bOwnedQuestStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bCompleteInOneBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bIsActTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	MFQuestNode*[] NodeList;//[Offset: 0x40, Size: 0x10]
	MFQuestAffiliateNode*[] QuestAffiliateNodeList;//[Offset: 0x50, Size: 0x10]
	MFQuestBase*[] QuestList;//[Offset: 0x60, Size: 0x10]
	MFQuestStartNode* StartNode;//[Offset: 0x70, Size: 0x8]
	MFQuestEndNode* EndNode;//[Offset: 0x78, Size: 0x8]
	int CustomIndex;//[Offset: 0x80, Size: 0x4]
	Controller* OwnerController;//[Offset: 0x88, Size: 0x8]
	MFQuestNode*[] CheckNodeArray;//[Offset: 0x98, Size: 0x10]
	void TickQuestNodeGraph();// 0x59efe3fee041
	void SetOwnerController(Controller* InPC);// 0x59eee3fee041
	void SetIsCompleteInOneBattle(bool In);// 0x59ede3fee041
	void SetIsActTask(bool In);// 0x59ece3fee041
	void SetCustomIndex(int InIndex);// 0x59ebe3fee041
	void NodeGraphCheck(MFQuestBase* QuestBase);// 0x59eae3fee041
	MFQuestNode* GetQuestNodeFromNodeQuest(const MFQuestBase* InQuest);// 0x59e9e3fee041
	MFQuestBase* GetQuestFromCustomIndex(int InIndex);// 0x59e8e3fee041
	Controller* GetOwnerController();// 0x59e7e3fee041
	bool GetIsCompleteInOneBattle();// 0x59e6e3fee041
	bool GetIsActTask();// 0x59e5e3fee041
	MFQuestEndNode* GetEndNode();// 0x59e4e3fee041
	int GetCustomIndex();// 0x59e3e3fee041
	void GetAllQuest(out MFQuestBase*[] InQuestList);// 0x59e2e3fee041
	void DestroyGraph();// 0x59e1e3fee041
	void DeactivateQuestNodeGraph();// 0x59e0e3fee041
	void CreateNewQuestNode(MFQuestBase* InNewQuest, enum InType, bool InFailedWhenAndParallelNodeFailed);// 0x59dfe3fee041
	void CreateNewQuestCheckNode(MFQuestBase* InNewQuest, enum InType, bool InFailedWhenAndParallelNodeFailed, bool InSuccessWhenParallelNodeSuccess);// 0x59dee3fee041
	void CreateNewQuestAssembleNode(MFQuestBase* InNewQuest, enum InType, bool InFailedWhenAndParallelNodeFailed);// 0x59dde3fee041
	void CreateNewQuestAffiliateNode(MFQuestBase* InNewQuest, enum InType, bool InFailedWhenAndParallelNodeFailed);// 0x59dce3fee041
	void CompleteQuestNodeGraph(enum InType);// 0x59dbe3fee041
	void BuildQuestNodeRelation(MFQuestBase* TargetNodeQuest, const MFQuestBase*[] PrevNodeQuestList);// 0x59dae3fee041
	void BeginGraph();// 0x59d9e3fee041
	void ActivateQuestNodeGraph();// 0x59d8e3fee041

--------------------------------
Class: MFQuestStartNode.MFQuestNode.Object

--------------------------------
Class: MFQuestManagerComponent.ActorComponent.Object
	class MFQuestManagerActor* QuestManagerActorClass;//[Offset: 0xb8, Size: 0x8]
	MFQuestManagerActor* QuestManagerActor;//[Offset: 0xc0, Size: 0x8]
	MFQuestManagerActor* GetQuestManagerActor();// 0x59d7e3fee041
	MFQuestManagerActor* CreateQuestManagerActor();// 0x59d6e3fee041

--------------------------------
Class: MFQuestPrimaryCondition_IntMapChanged.MFQuestPrimaryConditionBase.Object
	void OnBlackboardIntMapChanged(Actor* ObjectiveInstigator, Actor* TargetActor, out const GameplayTag Key, int CurrentValue, int PreviousValue);// 0x5a02e3fee041

--------------------------------
Class: MFQuestPrimaryCondition_ObjArrMapChanged.MFQuestPrimaryConditionBase.Object
	void OnBlackboardObjectArrayMapChanged(Actor* TargetActor, out const GameplayTag Key, out const Object*[] ObjectArray);// 0x5a03e3fee041

--------------------------------
Class: MFQuestProgressComp_Count.MFQuestProgressComponentBase.MFQuestComponentBase.ActorComponent.Object
	int ProgressUnit;//[Offset: 0xd4, Size: 0x4]
	int CachedProgress;//[Offset: 0xd8, Size: 0x4]
	bool bReachMaxNotComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	int OneBattleMaxAddProgress;//[Offset: 0xe0, Size: 0x4]
	int OneBattleAddedProgress;//[Offset: 0xe4, Size: 0x4]

--------------------------------
Class: MFQuestStatics.BlueprintFunctionLibrary.Object
	void RunQuest(MFQuestBase* InQuest, Actor* InInsitigator, bool bGiveUpOldQuest, LatentActionInfo LatentInfo, out enum RunResult);// 0x5a0de3fee041
	void ResetQuest(MFQuestBase* InQuest);// 0x5a0ce3fee041
	MFQuestManagerComponent* GetQuestManagerComponent(const Object* WorldContextObject);// 0x5a0be3fee041
	MFQuestManagerActor* GetQuestManagerActor(const Object* WorldContextObject);// 0x5a0ae3fee041
	bool GetCompareResult(int64 CheckNum, enum CompareType, int64 Value1, int64 Value2);// 0x5a09e3fee041
	MFQuestBase* CreateNewQuestFromClass(const Object* WorldContextObject, class MFQuestBase InQuestClass);// 0x5a08e3fee041
	void AssignQuestInstigator(MFQuestBase* InQuest, Actor* InInstigator, bool bGiveUpOldQuest);// 0x5a07e3fee041

--------------------------------
Class: MFAnimationtFunctionLibrary.BlueprintFunctionLibrary.Object
	bool IsExistSample(BlendSpaceBase* InBlendSpace, float InTransitionType);// 0x5a13e3fee041
	float GetCurveValueByName(AnimSequenceBase* InAnimSequence, FName CurveName, float Time);// 0x5a12e3fee041
	bool GetBoneTransformByBoneIndex(out Transform OutTransform, AnimSequence* InAnimSequence, int InBoneIndex);// 0x5a11e3fee041
	AnimSequence* GetBlendSpaceAnimationByType(BlendSpace1D* BlendSpace, int BlendType);// 0x5a10e3fee041
	float FindBlendSpaceNormalizeTimeFromCurveValue(BlendSpaceBase* InBlendSpace, FName Curve, float CurveValue, float InputX, float InputY, out float AnimSeqLength, out float AnimSeqTime, out AnimSequenceBase* OutAnimSequence, float LastEvaluateTime);// 0x5a0fe3fee041
	float FindAnimSeqTimeFromCurveValue(AnimSequenceBase* InAnimSequence, FName CurveName, float CurveValue, float LastEvaluateTime);// 0x5a0ee3fee041

--------------------------------
Class: BreakableWinBaseActor.StaticMeshActor.Actor.Object

--------------------------------
Class: GlassBoxComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ColorID;//[Offset: 0x5d8, Size: 0x4]
	GlassBoxCollisionInfo GlassBoxCollisionInfo;//[Offset: 0x5dc, Size: 0x1]
	MFGlassCutterComponent* CachedGlassCutter;//[Offset: 0x5e0, Size: 0x8]
	void TestHitGlass();// 0x5a19e3fee041
	void OnHitGlassOffline(out const HitResult Hit);// 0x5a18e3fee041
	void OnHitGlass();// 0x5a17e3fee041

--------------------------------
Class: GlassBoxCollisionInfo
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MFGlassCutterComponent.ActorComponent.Object
	Texture2D* MaskTex;//[Offset: 0xc0, Size: 0x8]
	byte[] MaskIDCache;//[Offset: 0xc8, Size: 0x10]
	byte[] ClientMaskIDCache;//[Offset: 0xd8, Size: 0x10]
	bool Inited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	int IDMaxCount;//[Offset: 0xec, Size: 0x4]
	int TestPartId;//[Offset: 0xf0, Size: 0x4]
	Vector Scale;//[Offset: 0xf4, Size: 0xc]
	Vector Dir;//[Offset: 0x100, Size: 0xc]
	Vector[] Pos;//[Offset: 0x110, Size: 0x10]
	<int,int> IDTriangleStartIndexMap;//[Offset: 0x120, Size: 0x50]
	<int,int> IDTriangleEndIndexMap;//[Offset: 0x170, Size: 0x50]
	bool bPassable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c0, Size: 0x1]
	int HitWeaponType;//[Offset: 0x2d8, Size: 0x4]
	GlassBoxComponent*[] GlassBoxCompList;//[Offset: 0x2e0, Size: 0x10]
	GlassHitEffectInfo[] GlassHitEffectInfo;//[Offset: 0x2f0, Size: 0x10]
	void SetHitWeaponType(int WeaponType);// 0x5a1ee3fee041
	void OnReplicate_MaskIDCache();// 0x5a1de3fee041
	void OnRep_GlassHitEffectInfo();// 0x5a1ce3fee041
	void ChangeShapeCollision(int ColorID);// 0x5a1be3fee041
	void ChangeBehaviour(int ColorID);// 0x5a1ae3fee041

--------------------------------
Class: GlassHitEffectInfo
	int[] IDList;//[Offset: 0x0, Size: 0x10]
	Vector[] DirList;//[Offset: 0x10, Size: 0x10]
	int[] WeaponTypeList;//[Offset: 0x20, Size: 0x10]
	int Count;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: MFDestructibleObjParamManager.Object
	class MFDestructibleObjParamManager* MgrClassCache;//[Offset: 0x28, Size: 0x8]
	DestructibleObjParamBind[] DestructibleObjParamBindList;//[Offset: 0x30, Size: 0x10]
	DestructibleObjParam DefaultParam;//[Offset: 0x40, Size: 0x8]
	DestructibleObjParam GetDestructibleObjParamFromPhysicalMaterial(PhysicalMaterial* InPhysicalMaterial);// 0x5a1fe3fee041

--------------------------------
Class: DestructibleObjParamBind
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8]
	DestructibleObjParam Param;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: DestructibleObjParam
	int DestructibleLevel;//[Offset: 0x0, Size: 0x4]
	float ChunkLife;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MFDestructionEffectPlayerComponent.ActorComponent.Object
	NiagaraSystem*[] GlassWindowParticles;//[Offset: 0xb8, Size: 0x10]

--------------------------------
Class: NiagaraSystem.FXSystemAsset.Object
	bool bDumpDebugSystemInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bDumpDebugEmitterInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33, Size: 0x1]
	NiagaraEffectType* EffectType;//[Offset: 0x38, Size: 0x8]
	bool bOverrideScalabilitySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	NiagaraSystemScalabilityOverride[] ScalabilityOverrides;//[Offset: 0x48, Size: 0x10]
	NiagaraSystemScalabilityOverrides SystemScalabilityOverrides;//[Offset: 0x58, Size: 0x10]
	NiagaraEmitterHandle[] EmitterHandles;//[Offset: 0x68, Size: 0x10]
	NiagaraParameterCollectionInstance*[] ParameterCollectionOverrides;//[Offset: 0x78, Size: 0x10]
	NiagaraScript* SystemSpawnScript;//[Offset: 0x88, Size: 0x8]
	NiagaraScript* SystemUpdateScript;//[Offset: 0x90, Size: 0x8]
	NiagaraSystemCompiledData SystemCompiledData;//[Offset: 0xa8, Size: 0x218]
	NiagaraUserRedirectionParameterStore ExposedParameters;//[Offset: 0x2c0, Size: 0xc8]
	Box FixedBounds;//[Offset: 0x388, Size: 0x1c]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	float WarmupTime;//[Offset: 0x3a8, Size: 0x4]
	int WarmupTickCount;//[Offset: 0x3ac, Size: 0x4]
	float WarmupTickDelta;//[Offset: 0x3b0, Size: 0x4]
	bool bHasSystemScriptDIsWithPerInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	FName[] UserDINamesReadInSystemScripts;//[Offset: 0x3b8, Size: 0x10]

--------------------------------
Class: NiagaraEffectType.Object
	enum UpdateFrequency;//[Offset: 0x28, Size: 0x4]
	enum CullReaction;//[Offset: 0x2c, Size: 0x4]
	NiagaraSignificanceHandler* SignificanceHandler;//[Offset: 0x30, Size: 0x8]
	NiagaraSystemScalabilitySettings[] DetailLevelScalabilitySettings;//[Offset: 0x38, Size: 0x10]
	NiagaraSystemScalabilitySettingsArray SystemScalabilitySettings;//[Offset: 0x48, Size: 0x10]
	NiagaraEmitterScalabilitySettingsArray EmitterScalabilitySettings;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSystemScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30]
	bool bCullByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bCullMaxInstanceCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bCullPerSystemMaxInstanceCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bCullByMaxTimeWithoutRender;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	float MaxDistance;//[Offset: 0x34, Size: 0x4]
	int MaxInstances;//[Offset: 0x38, Size: 0x4]
	int MaxSystemInstances;//[Offset: 0x3c, Size: 0x4]
	float MaxTimeWithoutRender;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: NiagaraPlatformSet
	int QualityLevelMask;//[Offset: 0x0, Size: 0x4]
	NiagaraDeviceProfileStateEntry[] DeviceProfileStates;//[Offset: 0x8, Size: 0x10]
	NiagaraPlatformSetCVarCondition[] CVarConditions;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NiagaraDeviceProfileStateEntry
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	uint32 QualityLevelMask;//[Offset: 0x8, Size: 0x4]
	uint32 SetQualityLevelMask;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: NiagaraPlatformSetCVarCondition
	FName CVarName;//[Offset: 0x0, Size: 0x8]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	int MinInt;//[Offset: 0xc, Size: 0x4]
	int MaxInt;//[Offset: 0x10, Size: 0x4]
	float MinFloat;//[Offset: 0x14, Size: 0x4]
	float MaxFloat;//[Offset: 0x18, Size: 0x4]
	bool bUseMinInt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bUseMaxInt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bUseMinFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bUseMaxFloat;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: NiagaraSystemScalabilitySettingsArray
	NiagaraSystemScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScalabilitySettingsArray
	NiagaraEmitterScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30]
	bool bScaleSpawnCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float SpawnCountScale;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: NiagaraSystemScalabilityOverride.NiagaraSystemScalabilitySettings
	bool bOverrideDistanceSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bOverrideInstanceCountSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	bool bOverridePerSystemInstanceCountSettings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1]
	bool bOverrideTimeSinceRendererSettings;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: NiagaraSystemScalabilityOverrides
	NiagaraSystemScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterHandle
	Guid ID;//[Offset: 0x0, Size: 0x10]
	FName IdName;//[Offset: 0x10, Size: 0x8]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	FName Name;//[Offset: 0x1c, Size: 0x8]
	NiagaraEmitter* Instance;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: NiagaraEmitter.Object
	bool bLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	int RandomSeed;//[Offset: 0x2c, Size: 0x4]
	enum AllocationMode;//[Offset: 0x30, Size: 0x1]
	int PreAllocationCount;//[Offset: 0x34, Size: 0x4]
	NiagaraEmitterScriptProperties UpdateScriptProps;//[Offset: 0x38, Size: 0x28]
	NiagaraEmitterScriptProperties SpawnScriptProps;//[Offset: 0x60, Size: 0x28]
	enum SimTarget;//[Offset: 0x88, Size: 0x1]
	Box FixedBounds;//[Offset: 0x8c, Size: 0x1c]
	int MinDetailLevel;//[Offset: 0xa8, Size: 0x4]
	int MaxDetailLevel;//[Offset: 0xac, Size: 0x4]
	NiagaraDetailsLevelScaleOverrides GlobalSpawnCountScaleOverrides;//[Offset: 0xb0, Size: 0x14]
	NiagaraPlatformSet Platforms;//[Offset: 0xc8, Size: 0x30]
	NiagaraEmitterScalabilityOverrides ScalabilityOverrides;//[Offset: 0xf8, Size: 0x10]
	bool bInterpolatedSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1]
	bool bUseMinDetailLevel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1]
	bool bUseMaxDetailLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 0x1]
	bool bOverrideGlobalSpawnCountScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 0x1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 0x1]
	bool bCombineEventSpawn;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x108, Size: 0x1]
	float MaxDeltaTimePerTick;//[Offset: 0x10c, Size: 0x4]
	uint32 DefaultShaderStageIndex;//[Offset: 0x110, Size: 0x4]
	uint32 MaxUpdateIterations;//[Offset: 0x114, Size: 0x4]
	<uint32> SpawnStages;//[Offset: 0x118, Size: 0x50]
	bool bSimulationStagesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1]
	bool bDeprecatedShaderStagesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x168, Size: 0x1]
	bool bLimitDeltaTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x168, Size: 0x1]
	FString UniqueEmitterName;//[Offset: 0x170, Size: 0x10]
	NiagaraRendererProperties*[] RendererProperties;//[Offset: 0x180, Size: 0x10]
	NiagaraEventScriptProperties[] EventHandlerScriptProps;//[Offset: 0x190, Size: 0x10]
	NiagaraSimulationStageBase*[] SimulationStages;//[Offset: 0x1a0, Size: 0x10]
	NiagaraScript* GPUComputeScript;//[Offset: 0x1b0, Size: 0x8]
	FName[] SharedEventGeneratorIds;//[Offset: 0x1b8, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScriptProperties
	NiagaraScript* Script;//[Offset: 0x0, Size: 0x8]
	NiagaraEventReceiverProperties[] EventReceivers;//[Offset: 0x8, Size: 0x10]
	NiagaraEventGeneratorProperties[] EventGenerators;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NiagaraScript.NiagaraScriptBase.Object
	enum Usage;//[Offset: 0x28, Size: 0x1]
	int UsageIndex;//[Offset: 0x2c, Size: 0x4]
	Guid UsageId;//[Offset: 0x30, Size: 0x10]
	NiagaraParameterStore RapidIterationParameters;//[Offset: 0x40, Size: 0x78]
	NiagaraScriptExecutionParameterStore ScriptExecutionParamStore;//[Offset: 0xb8, Size: 0x98]
	NiagaraBoundParameter[] ScriptExecutionBoundParameters;//[Offset: 0x150, Size: 0x10]
	NiagaraVMExecutableDataId CachedScriptVMId;//[Offset: 0x160, Size: 0x48]
	NiagaraVMExecutableData CachedScriptVM;//[Offset: 0x1b8, Size: 0xe0]
	NiagaraParameterCollection*[] CachedParameterCollectionReferences;//[Offset: 0x298, Size: 0x10]
	NiagaraScriptDataInterfaceInfo[] CachedDefaultDataInterfaces;//[Offset: 0x2a8, Size: 0x10]
	void RaiseOnGPUCompilationComplete();// 0x5a9ee3fee041

--------------------------------
Class: NiagaraScriptBase.Object

--------------------------------
Class: NiagaraParameterStore
	Object* Owner;//[Offset: 0x8, Size: 0x8]
	NiagaraVariableWithOffset[] SortedParameterOffsets;//[Offset: 0x10, Size: 0x10]
	byte[] ParameterData;//[Offset: 0x20, Size: 0x10]
	NiagaraDataInterface*[] DataInterfaces;//[Offset: 0x30, Size: 0x10]
	Object*[] UObjects;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: NiagaraVariableWithOffset.NiagaraVariableBase
	int Offset;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: NiagaraVariableBase
	FName Name;//[Offset: 0x0, Size: 0x8]
	NiagaraTypeDefinitionHandle TypeDefHandle;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NiagaraTypeDefinitionHandle
	int RegisteredTypeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraMergeable.Object

--------------------------------
Class: NiagaraScriptExecutionParameterStore.NiagaraParameterStore
	int ParameterSize;//[Offset: 0x78, Size: 0x4]
	uint32 PaddedParameterSize;//[Offset: 0x7c, Size: 0x4]
	NiagaraScriptExecutionPaddingInfo[] PaddingInfo;//[Offset: 0x80, Size: 0x10]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: NiagaraScriptExecutionPaddingInfo
	uint16 SrcOffset;//[Offset: 0x0, Size: 0x2]
	uint16 DestOffset;//[Offset: 0x2, Size: 0x2]
	uint16 SrcSize;//[Offset: 0x4, Size: 0x2]
	uint16 DestSize;//[Offset: 0x6, Size: 0x2]

--------------------------------
Class: NiagaraBoundParameter
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20]
	int SrcOffset;//[Offset: 0x20, Size: 0x4]
	int DestOffset;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: NiagaraVariable.NiagaraVariableBase
	byte[] VarData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraVMExecutableDataId
	Guid CompilerVersionID;//[Offset: 0x0, Size: 0x10]
	enum ScriptUsageType;//[Offset: 0x10, Size: 0x1]
	Guid ScriptUsageTypeID;//[Offset: 0x14, Size: 0x10]
	bool bUsesRapidIterationParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bInterpolatedSpawn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	Guid BaseScriptID;//[Offset: 0x28, Size: 0x10]
	NiagaraCompileHash BaseScriptCompileHash;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: NiagaraCompileHash
	byte[] DataHash;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraVMExecutableData
	byte[] ByteCode;//[Offset: 0x0, Size: 0x10]
	byte[] OptimizedByteCode;//[Offset: 0x10, Size: 0x10]
	int NumTempRegisters;//[Offset: 0x20, Size: 0x4]
	int NumUserPtrs;//[Offset: 0x24, Size: 0x4]
	byte[] ScriptLiterals;//[Offset: 0x28, Size: 0x10]
	NiagaraVariable[] Attributes;//[Offset: 0x38, Size: 0x10]
	NiagaraScriptDataUsageInfo DataUsage;//[Offset: 0x48, Size: 0x1]
	NiagaraScriptDataInterfaceCompileInfo[] DataInterfaceInfo;//[Offset: 0x50, Size: 0x10]
	VMExternalFunctionBindingInfo[] CalledVMExternalFunctions;//[Offset: 0x60, Size: 0x10]
	NiagaraDataSetID[] ReadDataSets;//[Offset: 0x80, Size: 0x10]
	NiagaraDataSetProperties[] WriteDataSets;//[Offset: 0x90, Size: 0x10]
	NiagaraStatScope[] StatScopes;//[Offset: 0xa0, Size: 0x10]
	NiagaraDataInterfaceGPUParamInfo[] DIParamInfo;//[Offset: 0xb0, Size: 0x10]
	enum LastCompileStatus;//[Offset: 0xc0, Size: 0x1]
	SimulationStageMetaData[] SimulationStageMetaData;//[Offset: 0xc8, Size: 0x10]
	bool bReadsSignificanceIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: NiagaraScriptDataUsageInfo
	bool bReadsAttributeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: NiagaraScriptDataInterfaceCompileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	int UserPtrIdx;//[Offset: 0x8, Size: 0x4]
	NiagaraTypeDefinition Type;//[Offset: 0x10, Size: 0x10]
	FName RegisteredParameterMapRead;//[Offset: 0x20, Size: 0x8]
	FName RegisteredParameterMapWrite;//[Offset: 0x28, Size: 0x8]
	bool bIsPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: NiagaraTypeDefinition
	Object* ClassStructOrEnum;//[Offset: 0x0, Size: 0x8]
	uint16 UnderlyingType;//[Offset: 0x8, Size: 0x2]

--------------------------------
Class: VMExternalFunctionBindingInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName OwnerName;//[Offset: 0x8, Size: 0x8]
	bool[] InputParamLocations;//[Offset: 0x10, Size: 0x10]
	int NumOutputs;//[Offset: 0x20, Size: 0x4]
	VMFunctionSpecifier[] FunctionSpecifiers;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: VMFunctionSpecifier
	FName Key;//[Offset: 0x0, Size: 0x8]
	FName Value;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: NiagaraDataSetID
	FName Name;//[Offset: 0x0, Size: 0x8]
	enum Type;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: NiagaraDataSetProperties
	NiagaraDataSetID ID;//[Offset: 0x0, Size: 0xc]
	NiagaraVariable[] Variables;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraStatScope
	FName FullName;//[Offset: 0x0, Size: 0x8]
	FName FriendlyName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceGPUParamInfo
	FString DataInterfaceHLSLSymbol;//[Offset: 0x0, Size: 0x10]
	FString DIClassName;//[Offset: 0x10, Size: 0x10]
	NiagaraDataInterfaceGeneratedFunction[] GeneratedFunctions;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceGeneratedFunction

--------------------------------
Class: SimulationStageMetaData
	FName SimulationStageName;//[Offset: 0x0, Size: 0x8]
	FName IterationSource;//[Offset: 0x8, Size: 0x8]
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bWritesParticles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bPartialParticleUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	FName[] OutputDestinations;//[Offset: 0x18, Size: 0x10]
	int MinStage;//[Offset: 0x28, Size: 0x4]
	int MaxStage;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: NiagaraParameterCollection.Object
	FName Namespace;//[Offset: 0x28, Size: 0x8]
	NiagaraVariable[] Parameters;//[Offset: 0x30, Size: 0x10]
	MaterialParameterCollection* SourceMaterialCollection;//[Offset: 0x40, Size: 0x8]
	NiagaraParameterCollectionInstance* DefaultInstance;//[Offset: 0x48, Size: 0x8]
	Guid CompileId;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraParameterCollectionInstance.Object
	NiagaraParameterCollection* Collection;//[Offset: 0x28, Size: 0x8]
	NiagaraVariable[] OverridenParameters;//[Offset: 0x30, Size: 0x10]
	NiagaraParameterStore ParameterStorage;//[Offset: 0x40, Size: 0x78]
	void SetVectorParameter(FString InVariableName, Vector InValue);// 0x5a95e3fee041
	void SetVector4Parameter(FString InVariableName, out const Vector4 InValue);// 0x5a94e3fee041
	void SetVector2DParameter(FString InVariableName, Vector2D InValue);// 0x5a93e3fee041
	void SetQuatParameter(FString InVariableName, out const Quat InValue);// 0x5a92e3fee041
	void SetIntParameter(FString InVariableName, int InValue);// 0x5a91e3fee041
	void SetFloatParameter(FString InVariableName, float InValue);// 0x5a90e3fee041
	void SetColorParameter(FString InVariableName, LinearColor InValue);// 0x5a8fe3fee041
	void SetBoolParameter(FString InVariableName, bool InValue);// 0x5a8ee3fee041
	Vector GetVectorParameter(FString InVariableName);// 0x5a8de3fee041
	Vector4 GetVector4Parameter(FString InVariableName);// 0x5a8ce3fee041
	Vector2D GetVector2DParameter(FString InVariableName);// 0x5a8be3fee041
	Quat GetQuatParameter(FString InVariableName);// 0x5a8ae3fee041
	int GetIntParameter(FString InVariableName);// 0x5a89e3fee041
	float GetFloatParameter(FString InVariableName);// 0x5a88e3fee041
	LinearColor GetColorParameter(FString InVariableName);// 0x5a87e3fee041
	bool GetBoolParameter(FString InVariableName);// 0x5a86e3fee041

--------------------------------
Class: NiagaraScriptDataInterfaceInfo
	NiagaraDataInterface* DataInterface;//[Offset: 0x0, Size: 0x8]
	FName Name;//[Offset: 0x8, Size: 0x8]
	int UserPtrIdx;//[Offset: 0x10, Size: 0x4]
	NiagaraTypeDefinition Type;//[Offset: 0x18, Size: 0x10]
	FName RegisteredParameterMapRead;//[Offset: 0x28, Size: 0x8]
	FName RegisteredParameterMapWrite;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: NiagaraEventReceiverProperties
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName SourceEventGenerator;//[Offset: 0x8, Size: 0x8]
	FName SourceEmitter;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: NiagaraEventGeneratorProperties
	int MaxEventsPerFrame;//[Offset: 0x0, Size: 0x4]
	FName ID;//[Offset: 0x4, Size: 0x8]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x10, Size: 0x40]

--------------------------------
Class: NiagaraDataSetCompiledData
	NiagaraVariable[] Variables;//[Offset: 0x0, Size: 0x10]
	NiagaraVariableLayoutInfo[] VariableLayouts;//[Offset: 0x10, Size: 0x10]
	NiagaraDataSetID ID;//[Offset: 0x20, Size: 0xc]
	uint32 TotalFloatComponents;//[Offset: 0x2c, Size: 0x4]
	uint32 TotalInt32Components;//[Offset: 0x30, Size: 0x4]
	uint32 TotalHalfComponents;//[Offset: 0x34, Size: 0x4]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	enum SimTarget;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: NiagaraVariableLayoutInfo
	uint32 FloatComponentStart;//[Offset: 0x0, Size: 0x4]
	uint32 Int32ComponentStart;//[Offset: 0x4, Size: 0x4]
	uint32 HalfComponentStart;//[Offset: 0x8, Size: 0x4]
	NiagaraTypeLayoutInfo LayoutInfo;//[Offset: 0x10, Size: 0x60]

--------------------------------
Class: NiagaraTypeLayoutInfo
	uint32[] FloatComponentByteOffsets;//[Offset: 0x0, Size: 0x10]
	uint32[] FloatComponentRegisterOffsets;//[Offset: 0x10, Size: 0x10]
	uint32[] Int32ComponentByteOffsets;//[Offset: 0x20, Size: 0x10]
	uint32[] Int32ComponentRegisterOffsets;//[Offset: 0x30, Size: 0x10]
	uint32[] HalfComponentByteOffsets;//[Offset: 0x40, Size: 0x10]
	uint32[] HalfComponentRegisterOffsets;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraDetailsLevelScaleOverrides
	float Low;//[Offset: 0x0, Size: 0x4]
	float Medium;//[Offset: 0x4, Size: 0x4]
	float High;//[Offset: 0x8, Size: 0x4]
	float Epic;//[Offset: 0xc, Size: 0x4]
	float Cine;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: NiagaraEmitterScalabilityOverrides
	NiagaraEmitterScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScalabilityOverride.NiagaraEmitterScalabilitySettings
	bool bOverrideSpawnCountScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x28, Size: 0x30]
	int SortOrderHint;//[Offset: 0x58, Size: 0x4]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool bMotionBlurEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]

--------------------------------
Class: NiagaraEventScriptProperties.NiagaraEmitterScriptProperties
	enum ExecutionMode;//[Offset: 0x28, Size: 0x1]
	uint32 SpawnNumber;//[Offset: 0x2c, Size: 0x4]
	uint32 MaxEventsPerFrame;//[Offset: 0x30, Size: 0x4]
	Guid SourceEmitterID;//[Offset: 0x34, Size: 0x10]
	FName SourceEventName;//[Offset: 0x44, Size: 0x8]
	bool bRandomSpawnNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	uint32 MinSpawnNumber;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraScript* Script;//[Offset: 0x28, Size: 0x8]
	FName SimulationStageName;//[Offset: 0x30, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: NiagaraSystemCompiledData
	NiagaraParameterStore InstanceParamStore;//[Offset: 0x0, Size: 0x78]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x78, Size: 0x40]
	NiagaraDataSetCompiledData SpawnInstanceParamsDataSetCompiledData;//[Offset: 0xb8, Size: 0x40]
	NiagaraDataSetCompiledData UpdateInstanceParamsDataSetCompiledData;//[Offset: 0xf8, Size: 0x40]
	NiagaraParameterDataSetBindingCollection SpawnInstanceGlobalBinding;//[Offset: 0x138, Size: 0x20]
	NiagaraParameterDataSetBindingCollection SpawnInstanceSystemBinding;//[Offset: 0x158, Size: 0x20]
	NiagaraParameterDataSetBindingCollection SpawnInstanceOwnerBinding;//[Offset: 0x178, Size: 0x20]
	NiagaraParameterDataSetBindingCollection[] SpawnInstanceEmitterBindings;//[Offset: 0x198, Size: 0x10]
	NiagaraParameterDataSetBindingCollection UpdateInstanceGlobalBinding;//[Offset: 0x1a8, Size: 0x20]
	NiagaraParameterDataSetBindingCollection UpdateInstanceSystemBinding;//[Offset: 0x1c8, Size: 0x20]
	NiagaraParameterDataSetBindingCollection UpdateInstanceOwnerBinding;//[Offset: 0x1e8, Size: 0x20]
	NiagaraParameterDataSetBindingCollection[] UpdateInstanceEmitterBindings;//[Offset: 0x208, Size: 0x10]

--------------------------------
Class: NiagaraParameterDataSetBindingCollection
	NiagaraParameterDataSetBinding[] FloatOffsets;//[Offset: 0x0, Size: 0x10]
	NiagaraParameterDataSetBinding[] Int32Offsets;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraParameterDataSetBinding
	int ParameterOffset;//[Offset: 0x0, Size: 0x4]
	int DataSetComponentOffset;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: NiagaraUserRedirectionParameterStore.NiagaraParameterStore
	<NiagaraVariable,NiagaraVariable> UserParameterRedirects;//[Offset: 0x78, Size: 0x50]

--------------------------------
Class: MSingletonCollectionActor.Actor.Object
	class MFDestructibleManagerCollectionSingleton* DestructibleManagerCollectionSingleton;//[Offset: 0x2e0, Size: 0x8]
	MFDestructibleManagerCollectionSingleton* SingletonCache;//[Offset: 0x2e8, Size: 0x8]

--------------------------------
Class: MFDestructibleManagerCollectionSingleton.Object
	class MFDestructibleObjParamManager* DestructibleObjParamMgr;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	NiagaraVariable Parameter;//[Offset: 0x88, Size: 0x20]

--------------------------------
Class: MovieSceneNiagaraBoolParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraColorParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraFloatParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraIntegerParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraSystemSpawnSection.MovieSceneSection.MovieSceneSignedObject.Object
	enum SectionStartBehavior;//[Offset: 0xdc, Size: 0x4]
	enum SectionEvaluateBehavior;//[Offset: 0xe0, Size: 0x4]
	enum SectionEndBehavior;//[Offset: 0xe4, Size: 0x4]
	enum AgeUpdateMode;//[Offset: 0xe8, Size: 0x1]

--------------------------------
Class: MovieSceneNiagaraSystemTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraVectorParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int ChannelsUsed;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: NiagaraActor.Actor.Object
	NiagaraComponent* NiagaraComponent;//[Offset: 0x2e0, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]
	void SetDestroyOnSystemFinish(bool bShouldDestroyOnSystemFinish);// 0x5a21e3fee041
	void OnNiagaraSystemFinished(NiagaraComponent* FinishedComponent);// 0x5a20e3fee041

--------------------------------
Class: NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NiagaraSystem* Asset;//[Offset: 0x5b0, Size: 0x8]
	enum TickBehavior;//[Offset: 0x5b8, Size: 0x1]
	NiagaraUserRedirectionParameterStore OverrideParameters;//[Offset: 0x5c0, Size: 0xc8]
	bool bForceSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x688, Size: 0x1]
	bool bEnableGpuComputeDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x688, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b1, Size: 0x1]
	bool bRenderingEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b1, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6b1, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6b1, Size: 0x1]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x6b4, Size: 0x4]
	NiagaraMaterialOverride[] EmitterMaterials;//[Offset: 0x6b8, Size: 0x10]
	delegate OnSystemFinished;//[Offset: 0x6d0, Size: 0x10]
	SceneComponent* AutoAttachParent;//[Offset: 0x6e0, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x6e8, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x6f0, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x6f1, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x6f2, Size: 0x1]
	void SetVariableVec4(FName InVariableName, out const Vector4 InValue);// 0x5a63e3fee041
	void SetVariableVec3(FName InVariableName, Vector InValue);// 0x5a62e3fee041
	void SetVariableVec2(FName InVariableName, Vector2D InValue);// 0x5a61e3fee041
	void SetVariableTextureRenderTarget(FName InVariableName, TextureRenderTarget* TextureRenderTarget);// 0x5a60e3fee041
	void SetVariableQuat(FName InVariableName, out const Quat InValue);// 0x5a5fe3fee041
	void SetVariableObject(FName InVariableName, Object* Object);// 0x5a5ee3fee041
	void SetVariableMaterial(FName InVariableName, MaterialInterface* Object);// 0x5a5de3fee041
	void SetVariableLinearColor(FName InVariableName, out const LinearColor InValue);// 0x5a5ce3fee041
	void SetVariableInt(FName InVariableName, int InValue);// 0x5a5be3fee041
	void SetVariableFloat(FName InVariableName, float InValue);// 0x5a5ae3fee041
	void SetVariableBool(FName InVariableName, bool InValue);// 0x5a59e3fee041
	void SetVariableActor(FName InVariableName, Actor* Actor);// 0x5a58e3fee041
	void SetTickBehavior(enum NewTickBehavior);// 0x5a57e3fee041
	void SetSeekDelta(float InSeekDelta);// 0x5a56e3fee041
	void SetRenderingEnabled(bool bInRenderingEnabled);// 0x5a55e3fee041
	void SetPreviewLODDistance(bool bEnablePreviewLODDistance, float PreviewLODDistance);// 0x5a54e3fee041
	void SetPaused(bool bInPaused);// 0x5a53e3fee041
	void SetNiagaraVariableVec4(FString InVariableName, out const Vector4 InValue);// 0x5a52e3fee041
	void SetNiagaraVariableVec3(FString InVariableName, Vector InValue);// 0x5a51e3fee041
	void SetNiagaraVariableVec2(FString InVariableName, Vector2D InValue);// 0x5a50e3fee041
	void SetNiagaraVariableQuat(FString InVariableName, out const Quat InValue);// 0x5a4fe3fee041
	void SetNiagaraVariableObject(FString InVariableName, Object* Object);// 0x5a4ee3fee041
	void SetNiagaraVariableLinearColor(FString InVariableName, out const LinearColor InValue);// 0x5a4de3fee041
	void SetNiagaraVariableInt(FString InVariableName, int InValue);// 0x5a4ce3fee041
	void SetNiagaraVariableFloat(FString InVariableName, float InValue);// 0x5a4be3fee041
	void SetNiagaraVariableBool(FString InVariableName, bool InValue);// 0x5a4ae3fee041
	void SetNiagaraVariableActor(FString InVariableName, Actor* Actor);// 0x5a49e3fee041
	void SetMaxSimTime(float InMaxTime);// 0x5a48e3fee041
	void SetGpuComputeDebug(bool bEnableDebug);// 0x5a47e3fee041
	void SetForceSolo(bool bInForceSolo);// 0x5a46e3fee041
	void SetDesiredAge(float InDesiredAge);// 0x5a45e3fee041
	void SetCanRenderWhileSeeking(bool bInCanRenderWhileSeeking);// 0x5a44e3fee041
	void SetAutoDestroy(bool bInAutoDestroy);// 0x5a43e3fee041
	void SetAsset(NiagaraSystem* InAsset);// 0x5a42e3fee041
	void SetAllowScalability(bool bAllow);// 0x5a41e3fee041
	void SetAgeUpdateMode(enum InAgeUpdateMode);// 0x5a40e3fee041
	void SeekToDesiredAge(float InDesiredAge);// 0x5a3fe3fee041
	void ResetSystem();// 0x5a3ee3fee041
	void ReinitializeSystem();// 0x5a3de3fee041
	bool IsPaused();// 0x5a3ce3fee041
	enum GetTickBehavior();// 0x5a3be3fee041
	float GetSeekDelta();// 0x5a3ae3fee041
	bool GetPreviewLODDistanceEnabled();// 0x5a39e3fee041
	int GetPreviewLODDistance();// 0x5a38e3fee041
	Vector[] GetNiagaraParticleValueVec3_DebugOnly(FString InEmitterName, FString InValueName);// 0x5a37e3fee041
	float[] GetNiagaraParticleValues_DebugOnly(FString InEmitterName, FString InValueName);// 0x5a36e3fee041
	Vector[] GetNiagaraParticlePositions_DebugOnly(FString InEmitterName);// 0x5a35e3fee041
	float GetMaxSimTime();// 0x5a34e3fee041
	bool GetForceSolo();// 0x5a33e3fee041
	float GetDesiredAge();// 0x5a32e3fee041
	NiagaraDataInterface* GetDataInterface(FString Name);// 0x5a31e3fee041
	NiagaraSystem* GetAsset();// 0x5a30e3fee041
	enum GetAgeUpdateMode();// 0x5a2fe3fee041
	void AdvanceSimulationByTime(float SimulateTime, float TickDeltaSeconds);// 0x5a2ee3fee041
	void AdvanceSimulation(int TickCount, float TickDeltaSeconds);// 0x5a2de3fee041

--------------------------------
Class: NiagaraMaterialOverride
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8]
	uint32 MaterialSubIndex;//[Offset: 0x8, Size: 0x4]
	NiagaraRendererProperties* EmitterRendererProperty;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: NiagaraComponentPool.Object
	<NiagaraSystem*,NCPool> WorldParticleSystemPools;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: NCPool
	NCPoolElement[] FreeElements;//[Offset: 0x0, Size: 0x10]
	NiagaraComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10]
	NiagaraComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: NCPoolElement
	NiagaraComponent* Component;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NiagaraComponentRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	class SceneComponent* ComponentType;//[Offset: 0x80, Size: 0x8]
	uint32 ComponentCountLimit;//[Offset: 0x88, Size: 0x4]
	NiagaraVariableAttributeBinding EnabledBinding;//[Offset: 0x90, Size: 0x58]
	bool bAssignComponentsOnParticleID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bOnlyCreateComponentsOnParticleSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	SceneComponent* TemplateComponent;//[Offset: 0xf0, Size: 0x8]
	NiagaraComponentPropertyBinding[] PropertyBindings;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: NiagaraVariableAttributeBinding
	NiagaraVariableBase ParamMapVariable;//[Offset: 0x0, Size: 0xc]
	NiagaraVariable DataSetVariable;//[Offset: 0x10, Size: 0x20]
	NiagaraVariable RootVariable;//[Offset: 0x30, Size: 0x20]
	byte BindingSourceMode;//[Offset: 0x50, Size: 0x1]
	bool bBindingExistsOnSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 0x1]
	bool bIsCachedParticleValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51, Size: 0x1]

--------------------------------
Class: NiagaraComponentPropertyBinding
	NiagaraVariableAttributeBinding AttributeBinding;//[Offset: 0x0, Size: 0x58]
	FName PropertyName;//[Offset: 0x58, Size: 0x8]
	NiagaraTypeDefinition PropertyType;//[Offset: 0x60, Size: 0x10]
	FName MetadataSetterName;//[Offset: 0x70, Size: 0x8]
	NiagaraVariable WritableValue;//[Offset: 0x78, Size: 0x20]

--------------------------------
Class: NiagaraComponentSettings.Object
	<FName> SuppressActivationList;//[Offset: 0x28, Size: 0x50]
	<FName> ForceAutoPooolingList;//[Offset: 0x78, Size: 0x50]
	<NiagaraEmitterNameSettingsRef> SuppressEmitterList;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: NiagaraEmitterNameSettingsRef
	FName SystemName;//[Offset: 0x0, Size: 0x8]
	FString EmitterName;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: NiagaraConvertInPlaceUtilityBase.Object

--------------------------------
Class: NiagaraDataInterface2DArrayTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Texture2DArray* Texture;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int MaxElements;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceArrayFloat.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	float[] FloatData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayFloat2.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector2D[] FloatData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayFloat3.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector[] FloatData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayFloat4.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector4[] FloatData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayColor.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	LinearColor[] ColorData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayQuat.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Quat[] QuatData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayFunctionLibrary.BlueprintFunctionLibrary.Object
	void SetNiagaraArrayVector4(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector4[] ArrayData);// 0x5a73e3fee041
	void SetNiagaraArrayVector2D(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector2D[] ArrayData);// 0x5a72e3fee041
	void SetNiagaraArrayVector(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector[] ArrayData);// 0x5a71e3fee041
	void SetNiagaraArrayQuat(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Quat[] ArrayData);// 0x5a70e3fee041
	void SetNiagaraArrayInt32(NiagaraComponent* NiagaraSystem, FName OverrideName, out const int[] ArrayData);// 0x5a6fe3fee041
	void SetNiagaraArrayFloat(NiagaraComponent* NiagaraSystem, FName OverrideName, out const float[] ArrayData);// 0x5a6ee3fee041
	void SetNiagaraArrayColor(NiagaraComponent* NiagaraSystem, FName OverrideName, out const LinearColor[] ArrayData);// 0x5a6de3fee041
	void SetNiagaraArrayBool(NiagaraComponent* NiagaraSystem, FName OverrideName, out const bool[] ArrayData);// 0x5a6ce3fee041
	Vector4[] GetNiagaraArrayVector4(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x5a6be3fee041
	Vector2D[] GetNiagaraArrayVector2D(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x5a6ae3fee041
	Vector[] GetNiagaraArrayVector(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x5a69e3fee041
	Quat[] GetNiagaraArrayQuat(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x5a68e3fee041
	int[] GetNiagaraArrayInt32(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x5a67e3fee041
	float[] GetNiagaraArrayFloat(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x5a66e3fee041
	LinearColor[] GetNiagaraArrayColor(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x5a65e3fee041
	bool[] GetNiagaraArrayBool(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x5a64e3fee041

--------------------------------
Class: NiagaraDataInterfaceArrayInt32.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int[] IntData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayBool.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	bool[] BoolData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceAudioSubmix.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundSubmix* Submix;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceAudioOscilloscope.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundSubmix* Submix;//[Offset: 0x38, Size: 0x8]
	int Resolution;//[Offset: 0x40, Size: 0x4]
	float ScopeInMilliseconds;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceAudioPlayer.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundBase* SoundToPlay;//[Offset: 0x38, Size: 0x8]
	SoundAttenuation* Attenuation;//[Offset: 0x40, Size: 0x8]
	SoundConcurrency* Concurrency;//[Offset: 0x48, Size: 0x8]
	FName[] ParameterNames;//[Offset: 0x50, Size: 0x10]
	bool bLimitPlaysPerTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int MaxPlaysPerTick;//[Offset: 0x64, Size: 0x4]
	bool bStopWhenComponentIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: NiagaraDataInterfaceAudioSpectrum.NiagaraDataInterfaceAudioSubmix.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int Resolution;//[Offset: 0x40, Size: 0x4]
	float MinimumFrequency;//[Offset: 0x44, Size: 0x4]
	float MaximumFrequency;//[Offset: 0x48, Size: 0x4]
	float NoiseFloorDb;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceCamera.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int PlayerControllerIndex;//[Offset: 0x34, Size: 0x4]
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: NiagaraDataInterfaceCollisionQuery.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	float[] ShaderLUT;//[Offset: 0x38, Size: 0x10]
	float LUTMinTime;//[Offset: 0x48, Size: 0x4]
	float LUTMaxTime;//[Offset: 0x4c, Size: 0x4]
	float LUTInvTimeRange;//[Offset: 0x50, Size: 0x4]
	float LUTNumSamplesMinusOne;//[Offset: 0x54, Size: 0x4]
	bool bUseLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bExposeCurve;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	FName ExposedName;//[Offset: 0x5c, Size: 0x8]
	Texture2D* ExposedTexture;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceColorCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve RedCurve;//[Offset: 0x70, Size: 0x80]
	RichCurve GreenCurve;//[Offset: 0xf0, Size: 0x80]
	RichCurve BlueCurve;//[Offset: 0x170, Size: 0x80]
	RichCurve AlphaCurve;//[Offset: 0x1f0, Size: 0x80]

--------------------------------
Class: NiagaraDataInterfaceCurlNoise.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	uint32 Seed;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve Curve;//[Offset: 0x70, Size: 0x80]

--------------------------------
Class: NiagaraParticleCallbackHandler.Interface.Object
	void ReceiveParticleData(out const BasicParticleData[] Data, NiagaraSystem* NiagaraSystem);// 0x5a74e3fee041

--------------------------------
Class: BasicParticleData
	Vector position;//[Offset: 0x0, Size: 0xc]
	float Size;//[Offset: 0xc, Size: 0x4]
	Vector Velocity;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: NiagaraDataInterfaceExport.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding CallbackHandlerParameter;//[Offset: 0x38, Size: 0x20]
	enum GPUAllocationMode;//[Offset: 0x58, Size: 0x1]
	int GPUAllocationFixedSize;//[Offset: 0x5c, Size: 0x4]
	float GPUAllocationPerParticleSize;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: NiagaraUserParameterBinding
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: NiagaraDataInterfaceGBuffer.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	<int> OutputShaderStages;//[Offset: 0x38, Size: 0x50]
	<int> IterationShaderStages;//[Offset: 0x88, Size: 0x50]

--------------------------------
Class: NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumCellsX;//[Offset: 0xd8, Size: 0x4]
	int NumCellsY;//[Offset: 0xdc, Size: 0x4]
	int NumCellsMaxAxis;//[Offset: 0xe0, Size: 0x4]
	int NumAttributes;//[Offset: 0xe4, Size: 0x4]
	bool SetGridFromMaxAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	Vector2D WorldBBoxSize;//[Offset: 0xec, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceGrid2DCollection.NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xf8, Size: 0x20]
	enum OverrideBufferFormat;//[Offset: 0x118, Size: 0x1]
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x119, Size: 0x1]
	<uint64,TextureRenderTarget2DArray*> ManagedRenderTargets;//[Offset: 0x170, Size: 0x50]
	void GetTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY);// 0x5a78e3fee041
	void GetRawTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY);// 0x5a77e3fee041
	bool FillTexture2D(const NiagaraComponent* Component, TextureRenderTarget2D* Dest, int AttributeIndex);// 0x5a76e3fee041
	bool FillRawTexture2D(const NiagaraComponent* Component, TextureRenderTarget2D* Dest, out int TilesX, out int TilesY);// 0x5a75e3fee041

--------------------------------
Class: NiagaraDataInterfaceGrid2DCollectionReader.NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString EmitterName;//[Offset: 0xf8, Size: 0x10]
	FString DIName;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector NumCells;//[Offset: 0xd8, Size: 0xc]
	float CellSize;//[Offset: 0xe4, Size: 0x4]
	int NumCellsMaxAxis;//[Offset: 0xe8, Size: 0x4]
	enum SetResolutionMethod;//[Offset: 0xec, Size: 0x4]
	Vector WorldBBoxSize;//[Offset: 0xf0, Size: 0xc]

--------------------------------
Class: NiagaraDataInterfaceGrid3DCollection.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumAttributes;//[Offset: 0xfc, Size: 0x4]
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x100, Size: 0x20]
	enum BufferFormat;//[Offset: 0x120, Size: 0x1]
	void GetTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY, out int SizeZ);// 0x5a7ce3fee041
	void GetRawTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY, out int SizeZ);// 0x5a7be3fee041
	bool FillVolumeTexture(const NiagaraComponent* Component, VolumeTexture* Dest, int AttributeIndex);// 0x5a7ae3fee041
	bool FillRawVolumeTexture(const NiagaraComponent* Component, VolumeTexture* Dest, out int TilesX, out int TilesY, out int TileZ);// 0x5a79e3fee041

--------------------------------
Class: NiagaraDataInterfaceLandscape.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Actor* SourceLandscape;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceNeighborGrid3D.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	uint32 MaxNeighborsPerCell;//[Offset: 0xfc, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceOcclusion.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceParticleRead.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString EmitterName;//[Offset: 0xd8, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfacePlatformSet.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x38, Size: 0x30]

--------------------------------
Class: NiagaraDataInterfaceRenderTarget2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntPoint Size;//[Offset: 0xd8, Size: 0x8]
	byte OverrideRenderTargetFormat;//[Offset: 0xe0, Size: 0x1]
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe1, Size: 0x1]
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xe8, Size: 0x20]
	<uint64,TextureRenderTarget2D*> ManagedRenderTargets;//[Offset: 0x108, Size: 0x50]

--------------------------------
Class: NiagaraDataInterfaceRenderTarget2DArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector Size;//[Offset: 0xd8, Size: 0xc]
	byte OverrideRenderTargetFormat;//[Offset: 0xe4, Size: 0x1]
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe5, Size: 0x1]
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xe8, Size: 0x20]
	<uint64,TextureRenderTarget2DArray*> ManagedRenderTargets;//[Offset: 0x108, Size: 0x50]

--------------------------------
Class: NiagaraDataInterfaceRenderTargetVolume.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector Size;//[Offset: 0xd8, Size: 0xc]
	byte OverrideRenderTargetFormat;//[Offset: 0xe4, Size: 0x1]
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe5, Size: 0x1]
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xe8, Size: 0x20]
	<uint64,TextureRenderTargetVolume*> ManagedRenderTargets;//[Offset: 0x108, Size: 0x50]

--------------------------------
Class: NiagaraDataInterfaceSimpleCounter.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceSkeletalMesh.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum SourceMode;//[Offset: 0x31, Size: 0x1]
	Actor* Source;//[Offset: 0x38, Size: 0x8]
	NiagaraUserParameterBinding MeshUserParameter;//[Offset: 0x40, Size: 0x20]
	SkeletalMeshComponent* SourceComponent;//[Offset: 0x60, Size: 0x8]
	enum SkinningMode;//[Offset: 0x68, Size: 0x1]
	FName[] SamplingRegions;//[Offset: 0x70, Size: 0x10]
	int WholeMeshLOD;//[Offset: 0x80, Size: 0x4]
	FName[] FilteredBones;//[Offset: 0x88, Size: 0x10]
	FName[] FilteredSockets;//[Offset: 0x98, Size: 0x10]
	FName ExcludeBoneName;//[Offset: 0xa8, Size: 0x8]
	bool bExcludeBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: NiagaraDataInterfaceSpline.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Actor* Source;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceStaticMesh.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum SourceMode;//[Offset: 0x31, Size: 0x1]
	StaticMesh* DefaultMesh;//[Offset: 0x38, Size: 0x8]
	Actor* Source;//[Offset: 0x40, Size: 0x8]
	StaticMeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8]
	NDIStaticMeshSectionFilter SectionFilter;//[Offset: 0x50, Size: 0x10]
	bool bUsePhysicsBodyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	FName[] FilteredSockets;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: NDIStaticMeshSectionFilter
	int[] AllowedMaterialSlots;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Texture* Texture;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceVector2DCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80]
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80]

--------------------------------
Class: NiagaraDataInterfaceVector4Curve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80]
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80]
	RichCurve ZCurve;//[Offset: 0x170, Size: 0x80]
	RichCurve WCurve;//[Offset: 0x1f0, Size: 0x80]

--------------------------------
Class: NiagaraDataInterfaceVectorCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80]
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80]
	RichCurve ZCurve;//[Offset: 0x170, Size: 0x80]

--------------------------------
Class: NiagaraDataInterfaceVectorField.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	VectorField* Field;//[Offset: 0x38, Size: 0x8]
	bool bTileX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bTileY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bTileZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]

--------------------------------
Class: NiagaraDataInterfaceVolumeTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	VolumeTexture* Texture;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraEditorDataBase.Object

--------------------------------
Class: NiagaraSignificanceHandlerDistance.NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSignificanceHandlerAge.NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraEventReceiverEmitterAction.Object

--------------------------------
Class: NiagaraEventReceiverEmitterAction_SpawnParticles.NiagaraEventReceiverEmitterAction.Object
	uint32 NumParticles;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: NiagaraFunctionLibrary.BlueprintFunctionLibrary.Object
	NiagaraComponent* SpawnSystemAttached(NiagaraSystem* SystemTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bAutoDestroy, bool bAutoActivate, enum PoolingMethod, bool bPreCullCheck);// 0x5a85e3fee041
	NiagaraComponent* SpawnSystemAtLocation(const Object* WorldContextObject, NiagaraSystem* SystemTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, bool bAutoActivate, enum PoolingMethod, bool bPreCullCheck);// 0x5a84e3fee041
	void SetVolumeTextureObject(NiagaraComponent* NiagaraSystem, FString OverrideName, VolumeTexture* Texture);// 0x5a83e3fee041
	void SetTextureObject(NiagaraComponent* NiagaraSystem, FString OverrideName, Texture* Texture);// 0x5a82e3fee041
	void SetSkeletalMeshDataInterfaceSamplingRegions(NiagaraComponent* NiagaraSystem, FString OverrideName, out const FName[] SamplingRegions);// 0x5a81e3fee041
	void OverrideSystemUserVariableStaticMeshComponent(NiagaraComponent* NiagaraSystem, FString OverrideName, StaticMeshComponent* StaticMeshComponent);// 0x5a80e3fee041
	void OverrideSystemUserVariableStaticMesh(NiagaraComponent* NiagaraSystem, FString OverrideName, StaticMesh* StaticMesh);// 0x5a7fe3fee041
	void OverrideSystemUserVariableSkeletalMeshComponent(NiagaraComponent* NiagaraSystem, FString OverrideName, SkeletalMeshComponent* SkeletalMeshComponent);// 0x5a7ee3fee041
	NiagaraParameterCollectionInstance* GetNiagaraParameterCollection(Object* WorldContextObject, NiagaraParameterCollection* Collection);// 0x5a7de3fee041

--------------------------------
Class: NiagaraLightRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	float RadiusScale;//[Offset: 0x84, Size: 0x4]
	Vector ColorAdd;//[Offset: 0x88, Size: 0xc]
	NiagaraVariableAttributeBinding LightRenderingEnabledBinding;//[Offset: 0x98, Size: 0x58]
	NiagaraVariableAttributeBinding LightExponentBinding;//[Offset: 0xf0, Size: 0x58]
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x148, Size: 0x58]
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x1a0, Size: 0x58]
	NiagaraVariableAttributeBinding RadiusBinding;//[Offset: 0x1f8, Size: 0x58]
	NiagaraVariableAttributeBinding VolumetricScatteringBinding;//[Offset: 0x250, Size: 0x58]

--------------------------------
Class: NiagaraMeshRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	StaticMesh* ParticleMesh;//[Offset: 0x80, Size: 0x8]
	enum SortMode;//[Offset: 0x88, Size: 0x1]
	bool bOverrideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bSortOnlyWhenTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	NiagaraMeshMaterialOverride[] OverrideMaterials;//[Offset: 0x90, Size: 0x10]
	Vector2D SubImageSize;//[Offset: 0xa0, Size: 0x8]
	bool bSubImageBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	enum FacingMode;//[Offset: 0xa9, Size: 0x1]
	bool bLockedAxisEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	Vector LockedAxis;//[Offset: 0xac, Size: 0xc]
	enum LockedAxisSpace;//[Offset: 0xb8, Size: 0x1]
	Vector PivotOffset;//[Offset: 0xbc, Size: 0xc]
	enum PivotOffsetSpace;//[Offset: 0xc8, Size: 0x1]
	bool bEnableFrustumCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc9, Size: 0x1]
	bool bEnableCameraDistanceCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc9, Size: 0x1]
	float MinCameraDistance;//[Offset: 0xcc, Size: 0x4]
	float MaxCameraDistance;//[Offset: 0xd0, Size: 0x4]
	uint32 RendererVisibility;//[Offset: 0xd4, Size: 0x4]
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0xd8, Size: 0x58]
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x130, Size: 0x58]
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x188, Size: 0x58]
	NiagaraVariableAttributeBinding MeshOrientationBinding;//[Offset: 0x1e0, Size: 0x58]
	NiagaraVariableAttributeBinding ScaleBinding;//[Offset: 0x238, Size: 0x58]
	NiagaraVariableAttributeBinding SubImageIndexBinding;//[Offset: 0x290, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x2e8, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x340, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x398, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x3f0, Size: 0x58]
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x448, Size: 0x58]
	NiagaraVariableAttributeBinding CustomSortingBinding;//[Offset: 0x4a0, Size: 0x58]
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x4f8, Size: 0x58]
	NiagaraVariableAttributeBinding CameraOffsetBinding;//[Offset: 0x550, Size: 0x58]
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x5a8, Size: 0x58]

--------------------------------
Class: NiagaraMeshMaterialOverride
	MaterialInterface* ExplicitMat;//[Offset: 0x0, Size: 0x8]
	NiagaraUserParameterBinding UserParamBinding;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: NiagaraMessageDataBase.Object

--------------------------------
Class: NiagaraPrecompileContainer.Object
	NiagaraScript*[] Scripts;//[Offset: 0x28, Size: 0x10]
	NiagaraSystem* System;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraPreviewBase.Actor.Object
	void SetSystem(NiagaraSystem* InSystem);// 0x5a97e3fee041
	void SetLabelText(out const FText InXAxisText, out const FText InYAxisText);// 0x5a96e3fee041

--------------------------------
Class: NiagaraPreviewAxis.Object
	int Num();// 0x5a99e3fee041
	void ApplyToPreview(NiagaraComponent* PreviewComponent, int PreviewIndex, bool bIsXAxis, out FString OutLabelText);// 0x5a98e3fee041

--------------------------------
Class: NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	FName Param;//[Offset: 0x28, Size: 0x8]
	int Count;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamInt32.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	int Min;//[Offset: 0x34, Size: 0x4]
	int Max;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamFloat.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	float Min;//[Offset: 0x34, Size: 0x4]
	float Max;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector2D.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector2D Min;//[Offset: 0x34, Size: 0x8]
	Vector2D Max;//[Offset: 0x3c, Size: 0x8]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector Min;//[Offset: 0x34, Size: 0xc]
	Vector Max;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector4.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector4 Min;//[Offset: 0x40, Size: 0x10]
	Vector4 Max;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamLinearColor.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	LinearColor Min;//[Offset: 0x34, Size: 0x10]
	LinearColor Max;//[Offset: 0x44, Size: 0x10]

--------------------------------
Class: NiagaraPreviewGrid.Actor.Object
	NiagaraSystem* System;//[Offset: 0x2e0, Size: 0x8]
	enum ResetMode;//[Offset: 0x2e8, Size: 0x1]
	NiagaraPreviewAxis* PreviewAxisX;//[Offset: 0x2f0, Size: 0x8]
	NiagaraPreviewAxis* PreviewAxisY;//[Offset: 0x2f8, Size: 0x8]
	class NiagaraPreviewBase* PreviewClass;//[Offset: 0x300, Size: 0x8]
	float SpacingX;//[Offset: 0x308, Size: 0x4]
	float SpacingY;//[Offset: 0x30c, Size: 0x4]
	int NumX;//[Offset: 0x310, Size: 0x4]
	int NumY;//[Offset: 0x314, Size: 0x4]
	ChildActorComponent*[] PreviewComponents;//[Offset: 0x318, Size: 0x10]
	void SetPaused(bool bPaused);// 0x5a9de3fee041
	void GetPreviews(out NiagaraComponent*[] OutPreviews);// 0x5a9ce3fee041
	void DeactivatePreviews();// 0x5a9be3fee041
	void ActivatePreviews(bool bReset);// 0x5a9ae3fee041

--------------------------------
Class: NiagaraRibbonRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	MaterialInterface* Material;//[Offset: 0x80, Size: 0x8]
	NiagaraUserParameterBinding MaterialUserParamBinding;//[Offset: 0x88, Size: 0x20]
	enum FacingMode;//[Offset: 0xa8, Size: 0x1]
	NiagaraRibbonUVSettings UV0Settings;//[Offset: 0xac, Size: 0x24]
	NiagaraRibbonUVSettings UV1Settings;//[Offset: 0xd0, Size: 0x24]
	enum DrawDirection;//[Offset: 0xf4, Size: 0x1]
	float CurveTension;//[Offset: 0xf8, Size: 0x4]
	enum TessellationMode;//[Offset: 0xfc, Size: 0x1]
	int TessellationFactor;//[Offset: 0x100, Size: 0x4]
	bool bUseConstantFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	float TessellationAngle;//[Offset: 0x108, Size: 0x4]
	bool bScreenSpaceTessellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x110, Size: 0x58]
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x168, Size: 0x58]
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x1c0, Size: 0x58]
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x218, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonTwistBinding;//[Offset: 0x270, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonWidthBinding;//[Offset: 0x2c8, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonFacingBinding;//[Offset: 0x320, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonIdBinding;//[Offset: 0x378, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonLinkOrderBinding;//[Offset: 0x3d0, Size: 0x58]
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x428, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x480, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x4d8, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x530, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x588, Size: 0x58]
	NiagaraVariableAttributeBinding U0OverrideBinding;//[Offset: 0x5e0, Size: 0x58]
	NiagaraVariableAttributeBinding V0RangeOverrideBinding;//[Offset: 0x638, Size: 0x58]
	NiagaraVariableAttributeBinding U1OverrideBinding;//[Offset: 0x690, Size: 0x58]
	NiagaraVariableAttributeBinding V1RangeOverrideBinding;//[Offset: 0x6e8, Size: 0x58]

--------------------------------
Class: NiagaraRibbonUVSettings
	enum LeadingEdgeMode;//[Offset: 0x0, Size: 0x4]
	enum TrailingEdgeMode;//[Offset: 0x4, Size: 0x4]
	enum DistributionMode;//[Offset: 0x8, Size: 0x4]
	float TilingLength;//[Offset: 0xc, Size: 0x4]
	Vector2D Offset;//[Offset: 0x10, Size: 0x8]
	Vector2D Scale;//[Offset: 0x18, Size: 0x8]
	bool bEnablePerParticleUOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bEnablePerParticleVRangeOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: NiagaraScriptSourceBase.Object

--------------------------------
Class: NiagaraSettings.DeveloperSettings.Object
	SoftObjectPath DefaultEffectType;//[Offset: 0x38, Size: 0x18]
	FText[] QualityLevels;//[Offset: 0x50, Size: 0x10]
	<FString,FText> ComponentRendererWarningsPerClass;//[Offset: 0x60, Size: 0x50]
	byte DefaultRenderTargetFormat;//[Offset: 0xb0, Size: 0x1]
	enum DefaultGridFormat;//[Offset: 0xb1, Size: 0x1]
	NiagaraEffectType* DefaultEffectTypePtr;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: NiagaraSimulationStageGeneric.NiagaraSimulationStageBase.NiagaraMergeable.Object
	enum IterationSource;//[Offset: 0x39, Size: 0x1]
	int Iterations;//[Offset: 0x3c, Size: 0x4]
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bDisablePartialParticleUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	NiagaraVariableDataInterfaceBinding DataInterface;//[Offset: 0x48, Size: 0x20]

--------------------------------
Class: NiagaraVariableDataInterfaceBinding
	NiagaraVariable BoundVariable;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: NiagaraSpriteRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	MaterialInterface* Material;//[Offset: 0x80, Size: 0x8]
	enum SourceMode;//[Offset: 0x88, Size: 0x1]
	NiagaraUserParameterBinding MaterialUserParamBinding;//[Offset: 0x90, Size: 0x20]
	enum Alignment;//[Offset: 0xb0, Size: 0x1]
	enum FacingMode;//[Offset: 0xb1, Size: 0x1]
	Vector2D PivotInUVSpace;//[Offset: 0xb4, Size: 0x8]
	enum SortMode;//[Offset: 0xbc, Size: 0x1]
	Vector2D SubImageSize;//[Offset: 0xc0, Size: 0x8]
	bool bSubImageBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	bool bRemoveHMDRollInVR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1]
	bool bSortOnlyWhenTranslucent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc8, Size: 0x1]
	bool bGpuLowLatencyTranslucency;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc8, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0xcc, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0xd0, Size: 0x4]
	bool bEnableCameraDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	float MinCameraDistance;//[Offset: 0xd8, Size: 0x4]
	float MaxCameraDistance;//[Offset: 0xdc, Size: 0x4]
	uint32 RendererVisibility;//[Offset: 0xe0, Size: 0x4]
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0xe8, Size: 0x58]
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x140, Size: 0x58]
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x198, Size: 0x58]
	NiagaraVariableAttributeBinding SpriteRotationBinding;//[Offset: 0x1f0, Size: 0x58]
	NiagaraVariableAttributeBinding SpriteSizeBinding;//[Offset: 0x248, Size: 0x58]
	NiagaraVariableAttributeBinding SpriteFacingBinding;//[Offset: 0x2a0, Size: 0x58]
	NiagaraVariableAttributeBinding SpriteAlignmentBinding;//[Offset: 0x2f8, Size: 0x58]
	NiagaraVariableAttributeBinding SubImageIndexBinding;//[Offset: 0x350, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x3a8, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x400, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x458, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x4b0, Size: 0x58]
	NiagaraVariableAttributeBinding CameraOffsetBinding;//[Offset: 0x508, Size: 0x58]
	NiagaraVariableAttributeBinding UVScaleBinding;//[Offset: 0x560, Size: 0x58]
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x5b8, Size: 0x58]
	NiagaraVariableAttributeBinding CustomSortingBinding;//[Offset: 0x610, Size: 0x58]
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x668, Size: 0x58]
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x6c0, Size: 0x58]
	NiagaraMaterialAttributeBinding[] MaterialParameterBindings;//[Offset: 0x718, Size: 0x10]

--------------------------------
Class: NiagaraMaterialAttributeBinding
	FName MaterialParameterName;//[Offset: 0x0, Size: 0x8]
	NiagaraVariableBase NiagaraVariable;//[Offset: 0x8, Size: 0xc]
	NiagaraVariableBase ResolvedNiagaraVariable;//[Offset: 0x14, Size: 0xc]
	NiagaraVariableBase NiagaraChildVariable;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: AnimNotify_PlayNiagaraEffect.AnimNotify.Object
	NiagaraSystem* Template;//[Offset: 0x38, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc]
	Vector Scale;//[Offset: 0x58, Size: 0xc]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	FName SocketName;//[Offset: 0x84, Size: 0x8]
	FXSystemComponent* GetSpawnedEffect();// 0x5a9fe3fee041

--------------------------------
Class: AnimNotifyState_TimedNiagaraEffect.AnimNotifyState.Object
	NiagaraSystem* Template;//[Offset: 0x30, Size: 0x8]
	FName SocketName;//[Offset: 0x38, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc]
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: MFMissionDataInterface.Interface.Object
	MFMissionDataComponent* GetMissionDataComponent();// 0x5aa5e3fee041
	MFMissionDataComponent* CreateMissionDataComponent();// 0x5aa4e3fee041

--------------------------------
Class: MFMissionFlowInterface.Interface.Object
	MFMissionFlowComponent* GetMissionFlowComponent();// 0x5abee3fee041
	MFMissionFlowComponent* CreateMissionFlowComponent();// 0x5abde3fee041

--------------------------------
Class: MFMissionFlowNode_Affiliate.MFMissionFlowNode.Object

--------------------------------
Class: MFMissionFlowNode_Composite.MFMissionFlowNode.Object
	MFMissionFlowCompositeChild[] Children;//[Offset: 0xe0, Size: 0x10]
	MFMissionFlowCompositeChild[] GetChildren();// 0x5ae6e3fee041

--------------------------------
Class: MFMissionFlowCompositeChild
	MFMissionFlowNode_Composite* ChildComposite;//[Offset: 0x0, Size: 0x8]
	MFMissionFlowNode_Assemble* ChildAssemble;//[Offset: 0x8, Size: 0x8]
	MFMissionFlowNode_Mission* ChildMission;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MFMissionFlowNode_Assemble.MFMissionFlowNode.Object
	MFMissionFlowNode_Affiliate*[] AffiliateNodeList;//[Offset: 0xe0, Size: 0x10]
	void GetAffiliateNodes(out MFMissionFlowNode_Affiliate*[] OutAffiliateNodeList);// 0x5ae9e3fee041
	MFMissionFlowNode_Affiliate*[] GetAffiliateNodeList();// 0x5ae8e3fee041
	void AddAffiliateNode(MFMissionFlowNode_Affiliate* InMissionFlowNode);// 0x5ae7e3fee041

--------------------------------
Class: MFMissionFlowNode_Mission.MFMissionFlowNode.Object

--------------------------------
Class: MFMissionFlowNode_And.MFMissionFlowNode_Composite.MFMissionFlowNode.Object

--------------------------------
Class: MFMissionFlowNode_Or.MFMissionFlowNode_Composite.MFMissionFlowNode.Object

--------------------------------
Class: MFMissionStatics.BlueprintFunctionLibrary.Object
	MFMissionFlowComponent* GetMissionFlowComponent(Actor* Actor);// 0x5aece3fee041
	MFMissionDataComponent* GetMissionDataComponent(Actor* Actor);// 0x5aebe3fee041
	bool GetCompareResult(enum CompareType, int64 CheckNum, int64 Value1, int64 Value2);// 0x5aeae3fee041

--------------------------------
Class: MFMissionSubsystem.WorldSubsystem.Subsystem.Object
	<MFMissionFlow*,MFMissionFlow*> MissionFlowObjectMap;//[Offset: 0x38, Size: 0x50]
	<class MFMissionFlow,MFMissionFlow*> ClassMissionFlowObjectMap;//[Offset: 0x88, Size: 0x50]
	<class MFMission,MFMission*> ClassMissionObjectMap;//[Offset: 0xd8, Size: 0x50]

--------------------------------
Class: MissionFlowTypes.Object

--------------------------------
Class: EditableMeshAdapter.Object

--------------------------------
Class: EditableGeometryCollectionAdapter.EditableMeshAdapter.Object
	GeometryCollection* GeometryCollection;//[Offset: 0x28, Size: 0x8]
	GeometryCollection* OriginalGeometryCollection;//[Offset: 0x30, Size: 0x8]
	int GeometryCollectionLODIndex;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GeometryCollection.Object
	GeometryCollectionSource[] GeometrySource;//[Offset: 0x30, Size: 0x10]
	MaterialInterface*[] Materials;//[Offset: 0x40, Size: 0x10]
	enum CollisionType;//[Offset: 0x50, Size: 0x1]
	enum ImplicitType;//[Offset: 0x51, Size: 0x1]
	int MinLevelSetResolution;//[Offset: 0x54, Size: 0x4]
	int MaxLevelSetResolution;//[Offset: 0x58, Size: 0x4]
	int MinClusterLevelSetResolution;//[Offset: 0x5c, Size: 0x4]
	int MaxClusterLevelSetResolution;//[Offset: 0x60, Size: 0x4]
	float CollisionObjectReductionPercentage;//[Offset: 0x64, Size: 0x4]
	bool bMassAsDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float Mass;//[Offset: 0x6c, Size: 0x4]
	float MinimumMassClamp;//[Offset: 0x70, Size: 0x4]
	float CollisionParticlesFraction;//[Offset: 0x74, Size: 0x4]
	int MaximumCollisionParticles;//[Offset: 0x78, Size: 0x4]
	GeometryCollectionSizeSpecificData[] SizeSpecificData;//[Offset: 0x80, Size: 0x10]
	bool EnableRemovePiecesOnFracture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	MaterialInterface*[] RemoveOnFractureMaterials;//[Offset: 0x98, Size: 0x10]
	Guid PersistentGuid;//[Offset: 0xa8, Size: 0x10]
	Guid StateGuid;//[Offset: 0xb8, Size: 0x10]
	int BoneSelectedMaterialIndex;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: GeometryCollectionSource
	SoftObjectPath SourceGeometryObject;//[Offset: 0x0, Size: 0x18]
	Transform LocalTransform;//[Offset: 0x20, Size: 0x30]
	MaterialInterface*[] SourceMaterial;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: GeometryCollectionSizeSpecificData
	float MaxSize;//[Offset: 0x0, Size: 0x4]
	enum CollisionType;//[Offset: 0x4, Size: 0x1]
	enum ImplicitType;//[Offset: 0x5, Size: 0x1]
	int MinLevelSetResolution;//[Offset: 0x8, Size: 0x4]
	int MaxLevelSetResolution;//[Offset: 0xc, Size: 0x4]
	int MinClusterLevelSetResolution;//[Offset: 0x10, Size: 0x4]
	int MaxClusterLevelSetResolution;//[Offset: 0x14, Size: 0x4]
	int CollisionObjectReductionPercentage;//[Offset: 0x18, Size: 0x4]
	float CollisionParticlesFraction;//[Offset: 0x1c, Size: 0x4]
	int MaximumCollisionParticles;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: EditableMesh.Object
	EditableMeshAdapter*[] Adapters;//[Offset: 0x3b8, Size: 0x10]
	int TextureCoordinateCount;//[Offset: 0x3d0, Size: 0x4]
	int PendingCompactCounter;//[Offset: 0x51c, Size: 0x4]
	int SubdivisionCount;//[Offset: 0x520, Size: 0x4]
	void WeldVertices(out const VertexID[] VertexIDs, out VertexID OutNewVertexID);// 0x5b6de3fee041
	void TryToRemoveVertex(const VertexID VertexID, out bool bOutWasVertexRemoved, out EdgeID OutNewEdgeID);// 0x5b6ce3fee041
	void TryToRemovePolygonEdge(const EdgeID EdgeID, out bool bOutWasEdgeRemoved, out PolygonID OutNewPolygonID);// 0x5b6be3fee041
	void TriangulatePolygons(out const PolygonID[] PolygonIDs, out PolygonID[] OutNewTrianglePolygons);// 0x5b6ae3fee041
	void TessellatePolygons(out const PolygonID[] PolygonIDs, const enum TriangleTessellationMode, out PolygonID[] OutNewPolygonIDs);// 0x5b69e3fee041
	void StartModification(const enum MeshModificationType, const enum MeshTopologyChange);// 0x5b68e3fee041
	void SplitPolygons(out const PolygonToSplit[] PolygonsToSplit, out EdgeID[] OutNewEdgeIDs);// 0x5b67e3fee041
	void SplitPolygonalMesh(out const Plane InPlane, out PolygonID[] PolygonIDs1, out PolygonID[] PolygonIDs2, out EdgeID[] BoundaryIDs);// 0x5b66e3fee041
	void SplitEdge(const EdgeID EdgeID, out const float[] Splits, out VertexID[] OutNewVertexIDs);// 0x5b65e3fee041
	void SetVerticesCornerSharpness(out const VertexID[] VertexIDs, out const float[] VerticesNewCornerSharpness);// 0x5b64e3fee041
	void SetVerticesAttributes(out const AttributesForVertex[] AttributesForVertices);// 0x5b63e3fee041
	void SetVertexInstancesAttributes(out const AttributesForVertexInstance[] AttributesForVertexInstances);// 0x5b62e3fee041
	void SetTextureCoordinateCount(const int NumTexCoords);// 0x5b61e3fee041
	void SetSubdivisionCount(const int NewSubdivisionCount);// 0x5b60e3fee041
	void SetPolygonsVertexAttributes(out const VertexAttributesForPolygon[] VertexAttributesForPolygons);// 0x5b5fe3fee041
	void SetEdgesHardnessAutomatically(out const EdgeID[] EdgeIDs, const float MaxDotProductForSoftEdge);// 0x5b5ee3fee041
	void SetEdgesHardness(out const EdgeID[] EdgeIDs, out const bool[] EdgesNewIsHard);// 0x5b5de3fee041
	void SetEdgesCreaseSharpness(out const EdgeID[] EdgeIDs, out const float[] EdgesNewCreaseSharpness);// 0x5b5ce3fee041
	void SetEdgesAttributes(out const AttributesForEdge[] AttributesForEdges);// 0x5b5be3fee041
	void SetAllowUndo(const bool bInAllowUndo);// 0x5b5ae3fee041
	void SetAllowSpatialDatabase(const bool bInAllowSpatialDatabase);// 0x5b59e3fee041
	void SetAllowCompact(const bool bInAllowCompact);// 0x5b58e3fee041
	void SearchSpatialDatabaseForPolygonsPotentiallyIntersectingPlane(out const Plane InPlane, out PolygonID[] OutPolygons);// 0x5b57e3fee041
	void SearchSpatialDatabaseForPolygonsPotentiallyIntersectingLineSegment(const Vector LineSegmentStart, const Vector LineSegmentEnd, out PolygonID[] OutPolygons);// 0x5b56e3fee041
	void SearchSpatialDatabaseForPolygonsInVolume(out const Plane[] Planes, out PolygonID[] OutPolygons);// 0x5b55e3fee041
	EditableMesh* RevertInstance();// 0x5b54e3fee041
	void Revert();// 0x5b53e3fee041
	void RebuildRenderMesh();// 0x5b52e3fee041
	void QuadrangulateMesh(out PolygonID[] OutNewPolygonIDs);// 0x5b51e3fee041
	void PropagateInstanceChanges();// 0x5b50e3fee041
	void MoveVertices(out const VertexToMove[] VerticesToMove);// 0x5b4fe3fee041
	VertexID MakeVertexID(const int VertexIndex);// 0x5b4ee3fee041
	PolygonID MakePolygonID(const int PolygonIndex);// 0x5b4de3fee041
	PolygonGroupID MakePolygonGroupID(const int PolygonGroupIndex);// 0x5b4ce3fee041
	EdgeID MakeEdgeID(const int EdgeIndex);// 0x5b4be3fee041
	bool IsValidVertex(const VertexID VertexID);// 0x5b4ae3fee041
	bool IsValidPolygonGroup(const PolygonGroupID PolygonGroupID);// 0x5b49e3fee041
	bool IsValidPolygon(const PolygonID PolygonID);// 0x5b48e3fee041
	bool IsValidEdge(const EdgeID EdgeID);// 0x5b47e3fee041
	bool IsUndoAllowed();// 0x5b46e3fee041
	bool IsSpatialDatabaseAllowed();// 0x5b45e3fee041
	bool IsPreviewingSubdivisions();// 0x5b44e3fee041
	bool IsOrphanedVertex(const VertexID VertexID);// 0x5b43e3fee041
	bool IsCompactAllowed();// 0x5b42e3fee041
	bool IsCommittedAsInstance();// 0x5b41e3fee041
	bool IsCommitted();// 0x5b40e3fee041
	bool IsBeingModified();// 0x5b3fe3fee041
	VertexID InvalidVertexID();// 0x5b3ee3fee041
	PolygonID InvalidPolygonID();// 0x5b3de3fee041
	PolygonGroupID InvalidPolygonGroupID();// 0x5b3ce3fee041
	EdgeID InvalidEdgeID();// 0x5b3be3fee041
	void InsetPolygons(out const PolygonID[] PolygonIDs, const float InsetFixedDistance, const float InsetProgressTowardCenter, const enum Mode, out PolygonID[] OutNewCenterPolygonIDs, out PolygonID[] OutNewSidePolygonIDs);// 0x5b3ae3fee041
	void InsertEdgeLoop(const EdgeID EdgeID, out const float[] Splits, out EdgeID[] OutNewEdgeIDs);// 0x5b39e3fee041
	void InitializeAdapters();// 0x5b38e3fee041
	EdgeID GetVertexPairEdge(const VertexID VertexID, const VertexID NextVertexID, out bool bOutEdgeWindingIsReversed);// 0x5b37e3fee041
	VertexID GetVertexInstanceVertex(const VertexInstanceID VertexInstanceID);// 0x5b36e3fee041
	int GetVertexInstanceCount();// 0x5b35e3fee041
	void GetVertexInstanceConnectedPolygons(const VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x5b34e3fee041
	int GetVertexInstanceConnectedPolygonCount(const VertexInstanceID VertexInstanceID);// 0x5b33e3fee041
	PolygonID GetVertexInstanceConnectedPolygon(const VertexInstanceID VertexInstanceID, const int ConnectedPolygonNumber);// 0x5b32e3fee041
	int GetVertexCount();// 0x5b31e3fee041
	void GetVertexConnectedPolygons(const VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x5b30e3fee041
	void GetVertexConnectedEdges(const VertexID VertexID, out EdgeID[] OutConnectedEdgeIDs);// 0x5b2fe3fee041
	int GetVertexConnectedEdgeCount(const VertexID VertexID);// 0x5b2ee3fee041
	EdgeID GetVertexConnectedEdge(const VertexID VertexID, const int ConnectedEdgeNumber);// 0x5b2de3fee041
	void GetVertexAdjacentVertices(const VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x5b2ce3fee041
	int GetTextureCoordinateCount();// 0x5b2be3fee041
	SubdivisionLimitData GetSubdivisionLimitData();// 0x5b2ae3fee041
	int GetSubdivisionCount();// 0x5b29e3fee041
	int GetPolygonTriangulatedTriangleCount(const PolygonID PolygonID);// 0x5b28e3fee041
	TriangleID GetPolygonTriangulatedTriangle(const PolygonID PolygonID, int PolygonTriangleNumber);// 0x5b27e3fee041
	void GetPolygonPerimeterVertices(const PolygonID PolygonID, out VertexID[] OutPolygonPerimeterVertexIDs);// 0x5b26e3fee041
	void GetPolygonPerimeterVertexInstances(const PolygonID PolygonID, out VertexInstanceID[] OutPolygonPerimeterVertexInstanceIDs);// 0x5b25e3fee041
	VertexInstanceID GetPolygonPerimeterVertexInstance(const PolygonID PolygonID, const int PolygonVertexNumber);// 0x5b24e3fee041
	int GetPolygonPerimeterVertexCount(const PolygonID PolygonID);// 0x5b23e3fee041
	VertexID GetPolygonPerimeterVertex(const PolygonID PolygonID, const int PolygonVertexNumber);// 0x5b22e3fee041
	void GetPolygonPerimeterEdges(const PolygonID PolygonID, out EdgeID[] OutPolygonPerimeterEdgeIDs);// 0x5b21e3fee041
	int GetPolygonPerimeterEdgeCount(const PolygonID PolygonID);// 0x5b20e3fee041
	EdgeID GetPolygonPerimeterEdge(const PolygonID PolygonID, const int PerimeterEdgeNumber, out bool bOutEdgeWindingIsReversedForPolygon);// 0x5b1fe3fee041
	PolygonID GetPolygonInGroup(const PolygonGroupID PolygonGroupID, const int PolygonNumber);// 0x5b1ee3fee041
	int GetPolygonGroupCount();// 0x5b1de3fee041
	int GetPolygonCountInGroup(const PolygonGroupID PolygonGroupID);// 0x5b1ce3fee041
	int GetPolygonCount();// 0x5b1be3fee041
	void GetPolygonAdjacentPolygons(const PolygonID PolygonID, out PolygonID[] OutAdjacentPolygons);// 0x5b1ae3fee041
	PolygonGroupID GetGroupForPolygon(const PolygonID PolygonID);// 0x5b19e3fee041
	PolygonGroupID GetFirstValidPolygonGroup();// 0x5b18e3fee041
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID OutEdgeVertexID0, out VertexID OutEdgeVertexID1);// 0x5b17e3fee041
	VertexID GetEdgeVertex(const EdgeID EdgeID, const int EdgeVertexNumber);// 0x5b16e3fee041
	EdgeID GetEdgeThatConnectsVertices(const VertexID VertexID0, const VertexID VertexID1);// 0x5b15e3fee041
	void GetEdgeLoopElements(const EdgeID EdgeID, out EdgeID[] EdgeLoopIDs);// 0x5b14e3fee041
	int GetEdgeCount();// 0x5b13e3fee041
	void GetEdgeConnectedPolygons(const EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x5b12e3fee041
	int GetEdgeConnectedPolygonCount(const EdgeID EdgeID);// 0x5b11e3fee041
	PolygonID GetEdgeConnectedPolygon(const EdgeID EdgeID, const int ConnectedPolygonNumber);// 0x5b10e3fee041
	void GeneratePolygonTangentsAndNormals(out const PolygonID[] PolygonIDs);// 0x5b0fe3fee041
	void FlipPolygons(out const PolygonID[] PolygonIDs);// 0x5b0ee3fee041
	int FindPolygonPerimeterVertexNumberForVertex(const PolygonID PolygonID, const VertexID VertexID);// 0x5b0de3fee041
	int FindPolygonPerimeterEdgeNumberForVertices(const PolygonID PolygonID, const VertexID EdgeVertexID0, const VertexID EdgeVertexID1);// 0x5b0ce3fee041
	void FindPolygonLoop(const EdgeID EdgeID, out EdgeID[] OutEdgeLoopEdgeIDs, out EdgeID[] OutFlippedEdgeIDs, out EdgeID[] OutReversedEdgeIDPathToTake, out PolygonID[] OutPolygonIDsToSplit);// 0x5b0be3fee041
	void ExtrudePolygons(out const PolygonID[] Polygons, const float ExtrudeDistance, const bool bKeepNeighborsTogether, out PolygonID[] OutNewExtrudedFrontPolygons);// 0x5b0ae3fee041
	void ExtendVertices(out const VertexID[] VertexIDs, const bool bOnlyExtendClosestEdge, const Vector ReferencePosition, out VertexID[] OutNewExtendedVertexIDs);// 0x5b09e3fee041
	void ExtendEdges(out const EdgeID[] EdgeIDs, const bool bWeldNeighbors, out EdgeID[] OutNewExtendedEdgeIDs);// 0x5b08e3fee041
	void EndModification(const bool bFromUndo);// 0x5b07e3fee041
	void DeleteVertexInstances(out const VertexInstanceID[] VertexInstanceIDsToDelete, const bool bDeleteOrphanedVertices);// 0x5b06e3fee041
	void DeleteVertexAndConnectedEdgesAndPolygons(const VertexID VertexID, const bool bDeleteOrphanedEdges, const bool bDeleteOrphanedVertices, const bool bDeleteOrphanedVertexInstances, const bool bDeleteEmptyPolygonGroups);// 0x5b05e3fee041
	void DeletePolygons(out const PolygonID[] PolygonIDsToDelete, const bool bDeleteOrphanedEdges, const bool bDeleteOrphanedVertices, const bool bDeleteOrphanedVertexInstances, const bool bDeleteEmptyPolygonGroups);// 0x5b04e3fee041
	void DeletePolygonGroups(out const PolygonGroupID[] PolygonGroupIDs);// 0x5b03e3fee041
	void DeleteOrphanVertices(out const VertexID[] VertexIDsToDelete);// 0x5b02e3fee041
	void DeleteEdges(out const EdgeID[] EdgeIDsToDelete, const bool bDeleteOrphanedVertices);// 0x5b01e3fee041
	void DeleteEdgeAndConnectedPolygons(const EdgeID EdgeID, const bool bDeleteOrphanedEdges, const bool bDeleteOrphanedVertices, const bool bDeleteOrphanedVertexInstances, const bool bDeleteEmptyPolygonGroups);// 0x5b00e3fee041
	void CreateVertices(out const VertexToCreate[] VerticesToCreate, out VertexID[] OutNewVertexIDs);// 0x5affe3fee041
	void CreateVertexInstances(out const VertexInstanceToCreate[] VertexInstancesToCreate, out VertexInstanceID[] OutNewVertexInstanceIDs);// 0x5afee3fee041
	void CreatePolygons(out const PolygonToCreate[] PolygonsToCreate, out PolygonID[] OutNewPolygonIDs, out EdgeID[] OutNewEdgeIDs);// 0x5afde3fee041
	void CreatePolygonGroups(out const PolygonGroupToCreate[] PolygonGroupsToCreate, out PolygonGroupID[] OutNewPolygonGroupIDs);// 0x5afce3fee041
	void CreateMissingPolygonPerimeterEdges(const PolygonID PolygonID, out EdgeID[] OutNewEdgeIDs);// 0x5afbe3fee041
	void CreateEmptyVertexRange(const int NumVerticesToCreate, out VertexID[] OutNewVertexIDs);// 0x5afae3fee041
	void CreateEdges(out const EdgeToCreate[] EdgesToCreate, out EdgeID[] OutNewEdgeIDs);// 0x5af9e3fee041
	void ComputePolygonsSharedEdges(out const PolygonID[] PolygonIDs, out EdgeID[] OutSharedEdgeIDs);// 0x5af8e3fee041
	Plane ComputePolygonPlane(const PolygonID PolygonID);// 0x5af7e3fee041
	Vector ComputePolygonNormal(const PolygonID PolygonID);// 0x5af6e3fee041
	Vector ComputePolygonCenter(const PolygonID PolygonID);// 0x5af5e3fee041
	BoxSphereBounds ComputeBoundingBoxAndSphere();// 0x5af4e3fee041
	Box ComputeBoundingBox();// 0x5af3e3fee041
	EditableMesh* CommitInstance(PrimitiveComponent* ComponentToInstanceTo);// 0x5af2e3fee041
	void Commit();// 0x5af1e3fee041
	void ChangePolygonsVertexInstances(out const ChangeVertexInstancesForPolygon[] VertexInstancesForPolygons);// 0x5af0e3fee041
	void BevelPolygons(out const PolygonID[] PolygonIDs, const float BevelFixedDistance, const float BevelProgressTowardCenter, out PolygonID[] OutNewCenterPolygonIDs, out PolygonID[] OutNewSidePolygonIDs);// 0x5aefe3fee041
	void AssignPolygonsToPolygonGroups(out const PolygonGroupForPolygon[] PolygonGroupForPolygons, const bool bDeleteOrphanedPolygonGroups);// 0x5aeee3fee041
	bool AnyChangesToUndo();// 0x5aede3fee041

--------------------------------
Class: PolygonToSplit
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4]
	VertexPair[] VertexPairsToSplitAt;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: VertexPair
	VertexID VertexID0;//[Offset: 0x0, Size: 0x4]
	VertexID VertexID1;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AttributesForVertex
	VertexID VertexID;//[Offset: 0x0, Size: 0x4]
	MeshElementAttributeList VertexAttributes;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MeshElementAttributeList
	MeshElementAttributeData[] Attributes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MeshElementAttributeData
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	int AttributeIndex;//[Offset: 0x8, Size: 0x4]
	MeshElementAttributeValue AttributeValue;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: MeshElementAttributeValue

--------------------------------
Class: AttributesForVertexInstance
	VertexInstanceID VertexInstanceID;//[Offset: 0x0, Size: 0x4]
	MeshElementAttributeList VertexInstanceAttributes;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: VertexAttributesForPolygon
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4]
	MeshElementAttributeList[] PerimeterVertexAttributeLists;//[Offset: 0x8, Size: 0x10]
	VertexAttributesForPolygonHole[] VertexAttributeListsForEachHole;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: VertexAttributesForPolygonHole
	MeshElementAttributeList[] VertexAttributeList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AttributesForEdge
	EdgeID EdgeID;//[Offset: 0x0, Size: 0x4]
	MeshElementAttributeList EdgeAttributes;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: VertexToMove
	VertexID VertexID;//[Offset: 0x0, Size: 0x4]
	Vector NewVertexPosition;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: SubdivisionLimitData
	Vector[] VertexPositions;//[Offset: 0x0, Size: 0x10]
	SubdivisionLimitSection[] Sections;//[Offset: 0x10, Size: 0x10]
	SubdividedWireEdge[] SubdividedWireEdges;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SubdivisionLimitSection
	SubdividedQuad[] SubdividedQuads;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SubdividedQuad
	SubdividedQuadVertex QuadVertex0;//[Offset: 0x0, Size: 0x34]
	SubdividedQuadVertex QuadVertex1;//[Offset: 0x34, Size: 0x34]
	SubdividedQuadVertex QuadVertex2;//[Offset: 0x68, Size: 0x34]
	SubdividedQuadVertex QuadVertex3;//[Offset: 0x9c, Size: 0x34]

--------------------------------
Class: SubdividedQuadVertex
	int VertexPositionIndex;//[Offset: 0x0, Size: 0x4]
	Vector2D TextureCoordinate0;//[Offset: 0x4, Size: 0x8]
	Vector2D TextureCoordinate1;//[Offset: 0xc, Size: 0x8]
	Color VertexColor;//[Offset: 0x14, Size: 0x4]
	Vector VertexNormal;//[Offset: 0x18, Size: 0xc]
	Vector VertexTangent;//[Offset: 0x24, Size: 0xc]
	float VertexBinormalSign;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: SubdividedWireEdge
	int EdgeVertex0PositionIndex;//[Offset: 0x0, Size: 0x4]
	int EdgeVertex1PositionIndex;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: VertexToCreate
	MeshElementAttributeList VertexAttributes;//[Offset: 0x0, Size: 0x10]
	VertexID OriginalVertexID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: VertexInstanceToCreate
	VertexID VertexID;//[Offset: 0x0, Size: 0x4]
	MeshElementAttributeList VertexInstanceAttributes;//[Offset: 0x8, Size: 0x10]
	VertexInstanceID OriginalVertexInstanceID;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: PolygonToCreate
	PolygonGroupID PolygonGroupID;//[Offset: 0x0, Size: 0x4]
	VertexAndAttributes[] PerimeterVertices;//[Offset: 0x8, Size: 0x10]
	PolygonID OriginalPolygonID;//[Offset: 0x18, Size: 0x4]
	enum PolygonEdgeHardness;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: VertexAndAttributes
	VertexInstanceID VertexInstanceID;//[Offset: 0x0, Size: 0x4]
	VertexID VertexID;//[Offset: 0x4, Size: 0x4]
	MeshElementAttributeList PolygonVertexAttributes;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: PolygonGroupToCreate
	MeshElementAttributeList PolygonGroupAttributes;//[Offset: 0x0, Size: 0x10]
	PolygonGroupID OriginalPolygonGroupID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: EdgeToCreate
	VertexID VertexID0;//[Offset: 0x0, Size: 0x4]
	VertexID VertexID1;//[Offset: 0x4, Size: 0x4]
	MeshElementAttributeList EdgeAttributes;//[Offset: 0x8, Size: 0x10]
	EdgeID OriginalEdgeID;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ChangeVertexInstancesForPolygon
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4]
	VertexIndexAndInstanceID[] PerimeterVertexIndicesAndInstanceIDs;//[Offset: 0x8, Size: 0x10]
	VertexInstancesForPolygonHole[] VertexIndicesAndInstanceIDsForEachHole;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: VertexIndexAndInstanceID
	int ContourIndex;//[Offset: 0x0, Size: 0x4]
	VertexInstanceID VertexInstanceID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: VertexInstancesForPolygonHole
	VertexIndexAndInstanceID[] VertexIndicesAndInstanceIDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PolygonGroupForPolygon
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4]
	PolygonGroupID PolygonGroupID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: EditableMeshFactory.Object
	EditableMesh* MakeEditableMesh(PrimitiveComponent* PrimitiveComponent, const int LODIndex);// 0x5b6ee3fee041

--------------------------------
Class: EditableStaticMeshAdapter.EditableMeshAdapter.Object
	StaticMesh* StaticMesh;//[Offset: 0x28, Size: 0x8]
	StaticMesh* OriginalStaticMesh;//[Offset: 0x30, Size: 0x8]
	int StaticMeshLODIndex;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: MovieSceneGeometryCollectionSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneGeometryCollectionParams Params;//[Offset: 0xe0, Size: 0x30]

--------------------------------
Class: MovieSceneGeometryCollectionParams
	SoftObjectPath GeometryCollectionCache;//[Offset: 0x8, Size: 0x18]
	FrameNumber StartFrameOffset;//[Offset: 0x20, Size: 0x4]
	FrameNumber EndFrameOffset;//[Offset: 0x24, Size: 0x4]
	float PlayRate;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: MovieSceneGeometryCollectionTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MobileInstalledContent.Object
	bool Mount(int PakOrder, FString MountPoint);// 0x5b75e3fee041
	float GetInstalledContentSize();// 0x5b74e3fee041
	float GetDiskFreeSpace();// 0x5b73e3fee041

--------------------------------
Class: MobilePendingContent.MobileInstalledContent.Object
	void StartInstall(delegate OnSucceeded, delegate OnFailed);// 0x5b7ce3fee041
	float GetTotalDownloadedSize();// 0x5b7be3fee041
	float GetRequiredDiskSpace();// 0x5b7ae3fee041
	float GetInstallProgress();// 0x5b79e3fee041
	FText GetDownloadStatusText();// 0x5b78e3fee041
	float GetDownloadSpeed();// 0x5b77e3fee041
	float GetDownloadSize();// 0x5b76e3fee041

--------------------------------
Class: MobilePatchingLibrary.BlueprintFunctionLibrary.Object
	void RequestContent(FString RemoteManifestURL, FString CloudURL, FString InstallDirectory, delegate OnSucceeded, delegate OnFailed);// 0x5b81e3fee041
	bool HasActiveWiFiConnection();// 0x5b80e3fee041
	FString[] GetSupportedPlatformNames();// 0x5b7fe3fee041
	MobileInstalledContent* GetInstalledContent(FString InstallDirectory);// 0x5b7ee3fee041
	FString GetActiveDeviceProfileName();// 0x5b7de3fee041

--------------------------------
Class: ControlRig.Object
	enum ExecutionType;//[Offset: 0x45, Size: 0x1]
	RigVM* VM;//[Offset: 0x48, Size: 0x8]
	RigHierarchyContainer Hierarchy;//[Offset: 0x50, Size: 0x368]
	ControlRigGizmoLibrary* GizmoLibrary;//[Offset: 0x3b8, Size: 0x28]
	<FName,CachedPropertyPath> InputProperties;//[Offset: 0x3f0, Size: 0x50]
	<FName,CachedPropertyPath> OutputProperties;//[Offset: 0x440, Size: 0x50]
	ControlRigDrawContainer DrawContainer;//[Offset: 0x490, Size: 0x18]
	AnimationDataSourceRegistry* DataSourceRegistry;//[Offset: 0x4c0, Size: 0x8]
	FName[] EventQueue;//[Offset: 0x4c8, Size: 0x10]
	RigInfluenceMapPerEvent Influences;//[Offset: 0x550, Size: 0x60]
	ControlRig* InteractionRig;//[Offset: 0x5b0, Size: 0x8]
	class ControlRig* InteractionRigClass;//[Offset: 0x5b8, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x5c0, Size: 0x10]
	void SetInteractionRigClass(class ControlRig InInteractionRigClass);// 0x5b85e3fee041
	void SetInteractionRig(ControlRig* InInteractionRig);// 0x5b84e3fee041
	class ControlRig GetInteractionRigClass();// 0x5b83e3fee041
	ControlRig* GetInteractionRig();// 0x5b82e3fee041

--------------------------------
Class: RigVM.Object
	RigVMMemoryContainer WorkMemoryStorage;//[Offset: 0x28, Size: 0xa0]
	RigVMMemoryContainer LiteralMemoryStorage;//[Offset: 0xd0, Size: 0xa0]
	RigVMByteCode ByteCodeStorage;//[Offset: 0x178, Size: 0x30]
	RigVMInstructionArray Instructions;//[Offset: 0x1b0, Size: 0x10]
	RigVMExecuteContext Context;//[Offset: 0x1c0, Size: 0x58]
	FName[] FunctionNamesStorage;//[Offset: 0x218, Size: 0x10]
	RigVMParameter[] Parameters;//[Offset: 0x248, Size: 0x10]
	<FName,int> ParametersNameMap;//[Offset: 0x258, Size: 0x50]
	RigVM* DeferredVMToCopy;//[Offset: 0x2f0, Size: 0x8]
	void SetParameterValueVector2D(out const FName InParameterName, out const Vector2D InValue, int InArrayIndex);// 0x72aee3fee031
	void SetParameterValueVector(out const FName InParameterName, out const Vector InValue, int InArrayIndex);// 0x72ade3fee041
	void SetParameterValueTransform(out const FName InParameterName, out const Transform InValue, int InArrayIndex);// 0x72ace3fee041
	void SetParameterValueString(out const FName InParameterName, FString InValue, int InArrayIndex);// 0x72abe3fee041
	void SetParameterValueQuat(out const FName InParameterName, out const Quat InValue, int InArrayIndex);// 0x72aae3fee041
	void SetParameterValueName(out const FName InParameterName, out const FName InValue, int InArrayIndex);// 0x72a9e3fee041
	void SetParameterValueInt(out const FName InParameterName, int InValue, int InArrayIndex);// 0x72a8e3fee041
	void SetParameterValueFloat(out const FName InParameterName, float InValue, int InArrayIndex);// 0x72a7e3fee041
	void SetParameterValueBool(out const FName InParameterName, bool InValue, int InArrayIndex);// 0x72a6e3fee041
	FString GetRigVMFunctionName(int InFunctionIndex);// 0x72a5e3fee041
	Vector2D GetParameterValueVector2D(out const FName InParameterName, int InArrayIndex);// 0x72a4e3fee041
	Vector GetParameterValueVector(out const FName InParameterName, int InArrayIndex);// 0x72a3e3fee041
	Transform GetParameterValueTransform(out const FName InParameterName, int InArrayIndex);// 0x72a2e3fee041
	FString GetParameterValueString(out const FName InParameterName, int InArrayIndex);// 0x72a1e3fee041
	Quat GetParameterValueQuat(out const FName InParameterName, int InArrayIndex);// 0x72a0e3fee041
	FName GetParameterValueName(out const FName InParameterName, int InArrayIndex);// 0x729fe3fee041
	int GetParameterValueInt(out const FName InParameterName, int InArrayIndex);// 0x729ee3fee041
	float GetParameterValueFloat(out const FName InParameterName, int InArrayIndex);// 0x729de3fee041
	bool GetParameterValueBool(out const FName InParameterName, int InArrayIndex);// 0x729ce3fee041
	int GetParameterArraySize(out const FName InParameterName);// 0x729be3fee041
	bool Execute(out const FName InEntryName);// 0x729ae3fee041
	int AddRigVMFunction(ScriptStruct* InRigVMStruct, out const FName InMethodName);// 0x7299e3fee041

--------------------------------
Class: RigVMMemoryContainer
	bool bUseNameMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum MemoryType;//[Offset: 0x1, Size: 0x1]
	RigVMRegister[] Registers;//[Offset: 0x8, Size: 0x10]
	RigVMRegisterOffset[] RegisterOffsets;//[Offset: 0x18, Size: 0x10]
	byte[] Data;//[Offset: 0x28, Size: 0x10]
	ScriptStruct*[] ScriptStructs;//[Offset: 0x38, Size: 0x10]
	<FName,int> NameMap;//[Offset: 0x48, Size: 0x50]
	bool bEncounteredErrorDuringLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]

--------------------------------
Class: RigVMRegister
	enum Type;//[Offset: 0x0, Size: 0x1]
	uint32 ByteIndex;//[Offset: 0x4, Size: 0x4]
	uint16 ElementSize;//[Offset: 0x8, Size: 0x2]
	uint16 ElementCount;//[Offset: 0xa, Size: 0x2]
	uint16 SliceCount;//[Offset: 0xc, Size: 0x2]
	byte AlignmentBytes;//[Offset: 0xe, Size: 0x1]
	uint16 TrailingBytes;//[Offset: 0x10, Size: 0x2]
	FName Name;//[Offset: 0x14, Size: 0x8]
	int ScriptStructIndex;//[Offset: 0x1c, Size: 0x4]
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bIsDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: RigVMRegisterOffset
	int[] Segments;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	FName CPPType;//[Offset: 0x14, Size: 0x8]
	ScriptStruct* ScriptStruct;//[Offset: 0x20, Size: 0x8]
	ScriptStruct* ParentScriptStruct;//[Offset: 0x28, Size: 0x8]
	int ArrayIndex;//[Offset: 0x30, Size: 0x4]
	uint16 ElementSize;//[Offset: 0x34, Size: 0x2]
	FString CachedSegmentPath;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: RigVMByteCode
	byte[] ByteCode;//[Offset: 0x0, Size: 0x10]
	int NumInstructions;//[Offset: 0x10, Size: 0x4]
	RigVMByteCodeEntry[] Entries;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: RigVMByteCodeEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	int InstructionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RigVMInstructionArray
	RigVMInstruction[] Instructions;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RigVMInstruction
	uint64 ByteCodeIndex;//[Offset: 0x0, Size: 0x8]
	enum OpCode;//[Offset: 0x8, Size: 0x1]
	byte OperandAlignment;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: RigVMExecuteContext

--------------------------------
Class: RigVMParameter
	enum Type;//[Offset: 0x0, Size: 0x1]
	FName Name;//[Offset: 0x4, Size: 0x8]
	int RegisterIndex;//[Offset: 0xc, Size: 0x4]
	FString CPPType;//[Offset: 0x10, Size: 0x10]
	ScriptStruct* ScriptStruct;//[Offset: 0x20, Size: 0x8]
	FName ScriptStructPath;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RigHierarchyContainer
	RigBoneHierarchy BoneHierarchy;//[Offset: 0x0, Size: 0x98]
	RigSpaceHierarchy SpaceHierarchy;//[Offset: 0x98, Size: 0x90]
	RigControlHierarchy ControlHierarchy;//[Offset: 0x128, Size: 0x108]
	RigCurveContainer CurveContainer;//[Offset: 0x230, Size: 0x98]
	int Version;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: RigBoneHierarchy
	RigBone[] Bones;//[Offset: 0x20, Size: 0x10]
	<FName,int> NameToIndexMapping;//[Offset: 0x30, Size: 0x50]
	FName[] Selection;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: RigBone.RigElement
	FName ParentName;//[Offset: 0x14, Size: 0x8]
	int ParentIndex;//[Offset: 0x1c, Size: 0x4]
	Transform InitialTransform;//[Offset: 0x20, Size: 0x30]
	Transform GlobalTransform;//[Offset: 0x50, Size: 0x30]
	Transform LocalTransform;//[Offset: 0x80, Size: 0x30]
	int[] Dependents;//[Offset: 0xb0, Size: 0x10]
	enum Type;//[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: RigElement
	FName Name;//[Offset: 0x8, Size: 0x8]
	int Index;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: RigSpaceHierarchy
	RigSpace[] Spaces;//[Offset: 0x20, Size: 0x10]
	<FName,int> NameToIndexMapping;//[Offset: 0x30, Size: 0x50]
	FName[] Selection;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: RigSpace.RigElement
	enum SpaceType;//[Offset: 0x14, Size: 0x1]
	FName ParentName;//[Offset: 0x18, Size: 0x8]
	int ParentIndex;//[Offset: 0x20, Size: 0x4]
	Transform InitialTransform;//[Offset: 0x30, Size: 0x30]
	Transform LocalTransform;//[Offset: 0x60, Size: 0x30]

--------------------------------
Class: RigControlHierarchy
	RigControl[] Controls;//[Offset: 0x98, Size: 0x10]
	<FName,int> NameToIndexMapping;//[Offset: 0xa8, Size: 0x50]
	FName[] Selection;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: RigControl.RigElement
	enum ControlType;//[Offset: 0x14, Size: 0x1]
	FName DisplayName;//[Offset: 0x18, Size: 0x8]
	FName ParentName;//[Offset: 0x20, Size: 0x8]
	int ParentIndex;//[Offset: 0x28, Size: 0x4]
	FName SpaceName;//[Offset: 0x2c, Size: 0x8]
	int SpaceIndex;//[Offset: 0x34, Size: 0x4]
	Transform OffsetTransform;//[Offset: 0x40, Size: 0x30]
	RigControlValue InitialValue;//[Offset: 0x70, Size: 0x80]
	RigControlValue Value;//[Offset: 0xf0, Size: 0x80]
	enum PrimaryAxis;//[Offset: 0x170, Size: 0x1]
	bool bIsCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	bool bAnimatable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 0x1]
	bool bLimitTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x173, Size: 0x1]
	bool bLimitRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]
	bool bLimitScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 0x1]
	bool bDrawLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176, Size: 0x1]
	RigControlValue MinimumValue;//[Offset: 0x180, Size: 0x80]
	RigControlValue MaximumValue;//[Offset: 0x200, Size: 0x80]
	bool bGizmoEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool bGizmoVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	FName GizmoName;//[Offset: 0x284, Size: 0x8]
	Transform GizmoTransform;//[Offset: 0x290, Size: 0x30]
	LinearColor GizmoColor;//[Offset: 0x2c0, Size: 0x10]
	int[] Dependents;//[Offset: 0x2d0, Size: 0x10]
	bool bIsTransientControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	Enum* ControlEnum;//[Offset: 0x2e8, Size: 0x8]

--------------------------------
Class: RigControlValue
	RigControlValueStorage FloatStorage;//[Offset: 0x0, Size: 0x44]
	Transform Storage;//[Offset: 0x50, Size: 0x30]

--------------------------------
Class: RigControlValueStorage
	float Float00;//[Offset: 0x0, Size: 0x4]
	float Float01;//[Offset: 0x4, Size: 0x4]
	float Float02;//[Offset: 0x8, Size: 0x4]
	float Float03;//[Offset: 0xc, Size: 0x4]
	float Float10;//[Offset: 0x10, Size: 0x4]
	float Float11;//[Offset: 0x14, Size: 0x4]
	float Float12;//[Offset: 0x18, Size: 0x4]
	float Float13;//[Offset: 0x1c, Size: 0x4]
	float Float20;//[Offset: 0x20, Size: 0x4]
	float Float21;//[Offset: 0x24, Size: 0x4]
	float Float22;//[Offset: 0x28, Size: 0x4]
	float Float23;//[Offset: 0x2c, Size: 0x4]
	float Float30;//[Offset: 0x30, Size: 0x4]
	float Float31;//[Offset: 0x34, Size: 0x4]
	float Float32;//[Offset: 0x38, Size: 0x4]
	float Float33;//[Offset: 0x3c, Size: 0x4]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: RigCurveContainer
	RigCurve[] Curves;//[Offset: 0x20, Size: 0x10]
	<FName,int> NameToIndexMapping;//[Offset: 0x30, Size: 0x50]
	FName[] Selection;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: RigCurve.RigElement
	float Value;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ControlRigGizmoLibrary.Object
	ControlRigGizmoDefinition DefaultGizmo;//[Offset: 0x30, Size: 0x60]
	Material* DefaultMaterial;//[Offset: 0x90, Size: 0x28]
	FName MaterialColorParameter;//[Offset: 0xb8, Size: 0x8]
	ControlRigGizmoDefinition[] Gizmos;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: ControlRigGizmoDefinition
	FName GizmoName;//[Offset: 0x0, Size: 0x8]
	StaticMesh* StaticMesh;//[Offset: 0x8, Size: 0x28]
	Transform Transform;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: ControlRigDrawContainer
	ControlRigDrawInstruction[] Instructions;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ControlRigDrawInstruction
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte PrimitiveType;//[Offset: 0x8, Size: 0x1]
	Vector[] Positions;//[Offset: 0x10, Size: 0x10]
	LinearColor Color;//[Offset: 0x20, Size: 0x10]
	float Thickness;//[Offset: 0x30, Size: 0x4]
	Transform Transform;//[Offset: 0x40, Size: 0x30]

--------------------------------
Class: AnimationDataSourceRegistry.Object
	<FName,Object*> DataSources;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: RigInfluenceMapPerEvent
	RigInfluenceMap[] Maps;//[Offset: 0x0, Size: 0x10]
	<FName,int> EventToIndex;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: RigInfluenceMap
	FName EventName;//[Offset: 0x0, Size: 0x8]
	RigInfluenceEntry[] Entries;//[Offset: 0x8, Size: 0x10]
	<RigElementKey,int> KeyToIndex;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: RigInfluenceEntry
	RigElementKey Source;//[Offset: 0x0, Size: 0xc]
	RigElementKey[] AffectedList;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: RigElementKey
	enum Type;//[Offset: 0x0, Size: 0x1]
	FName Name;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: AdditiveControlRig.ControlRig.Object

--------------------------------
Class: ControlRigAnimInstance.AnimInstance.Object

--------------------------------
Class: ControlRigBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object

--------------------------------
Class: ControlRigComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class ControlRig* ControlRigClass;//[Offset: 0x5b0, Size: 0x8]
	delegate OnPostInitializeDelegate;//[Offset: 0x5b8, Size: 0x10]
	delegate OnPreSetupDelegate;//[Offset: 0x5c8, Size: 0x10]
	delegate OnPostSetupDelegate;//[Offset: 0x5d8, Size: 0x10]
	delegate OnPreUpdateDelegate;//[Offset: 0x5e8, Size: 0x10]
	delegate OnPostUpdateDelegate;//[Offset: 0x5f8, Size: 0x10]
	ControlRigComponentMappedElement[] MappedElements;//[Offset: 0x608, Size: 0x10]
	bool bResetTransformBeforeTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]
	bool bResetInitialsBeforeSetup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x619, Size: 0x1]
	bool bUpdateRigOnTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61a, Size: 0x1]
	bool bUpdateInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61b, Size: 0x1]
	bool bDrawBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]
	ControlRig* ControlRig;//[Offset: 0x620, Size: 0x8]
	void Update(float DeltaTime);// 0x5bb0e3fee041
	void SetMappedElements(ControlRigComponentMappedElement[] NewMappedElements);// 0x5bafe3fee041
	void SetInitialSpaceTransform(FName SpaceName, Transform InitialTransform, enum Space);// 0x5baee3fee041
	void SetInitialBoneTransform(FName BoneName, Transform InitialTransform, enum Space, bool bPropagateToChildren);// 0x5bade3fee041
	void SetControlVector2D(FName ControlName, Vector2D Value);// 0x5bace3fee041
	void SetControlTransform(FName ControlName, Transform Value, enum Space);// 0x5babe3fee041
	void SetControlScale(FName ControlName, Vector Value, enum Space);// 0x5baae3fee041
	void SetControlRotator(FName ControlName, Rotator Value, enum Space);// 0x5ba9e3fee041
	void SetControlPosition(FName ControlName, Vector Value, enum Space);// 0x5ba8e3fee041
	void SetControlOffset(FName ControlName, Transform OffsetTransform, enum Space);// 0x5ba7e3fee041
	void SetControlInt(FName ControlName, int Value);// 0x5ba6e3fee041
	void SetControlFloat(FName ControlName, float Value);// 0x5ba5e3fee041
	void SetControlBool(FName ControlName, bool Value);// 0x5ba4e3fee041
	void SetBoneTransform(FName BoneName, Transform Transform, enum Space, float Weight, bool bPropagateToChildren);// 0x5ba3e3fee041
	void SetBoneInitialTransformsFromSkeletalMesh(SkeletalMesh* InSkeletalMesh);// 0x5ba2e3fee041
	void OnPreUpdate(ControlRigComponent* Component);// 0x5ba1e3fee041
	void OnPreSetup(ControlRigComponent* Component);// 0x5ba0e3fee041
	void OnPostUpdate(ControlRigComponent* Component);// 0x5b9fe3fee041
	void OnPostSetup(ControlRigComponent* Component);// 0x5b9ee3fee041
	void OnPostInitialize(ControlRigComponent* Component);// 0x5b9de3fee041
	void Initialize();// 0x5b9ce3fee041
	Transform GetSpaceTransform(FName SpaceName, enum Space);// 0x5b9be3fee041
	Transform GetInitialSpaceTransform(FName SpaceName, enum Space);// 0x5b9ae3fee041
	Transform GetInitialBoneTransform(FName BoneName, enum Space);// 0x5b99e3fee041
	FName[] GetElementNames(enum ElementType);// 0x5b98e3fee041
	Vector2D GetControlVector2D(FName ControlName);// 0x5b97e3fee041
	Transform GetControlTransform(FName ControlName, enum Space);// 0x5b96e3fee041
	Vector GetControlScale(FName ControlName, enum Space);// 0x5b95e3fee041
	Rotator GetControlRotator(FName ControlName, enum Space);// 0x5b94e3fee041
	ControlRig* GetControlRig();// 0x5b93e3fee041
	Vector GetControlPosition(FName ControlName, enum Space);// 0x5b92e3fee041
	Transform GetControlOffset(FName ControlName, enum Space);// 0x5b91e3fee041
	int GetControlInt(FName ControlName);// 0x5b90e3fee041
	float GetControlFloat(FName ControlName);// 0x5b8fe3fee041
	bool GetControlBool(FName ControlName);// 0x5b8ee3fee041
	Transform GetBoneTransform(FName BoneName, enum Space);// 0x5b8de3fee041
	float GetAbsoluteTime();// 0x5b8ce3fee041
	bool DoesElementExist(FName Name, enum ElementType);// 0x5b8be3fee041
	void ClearMappedElements();// 0x5b8ae3fee041
	void AddMappedSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent, ControlRigComponentMappedBone[] Bones, ControlRigComponentMappedCurve[] Curves);// 0x5b89e3fee041
	void AddMappedElements(ControlRigComponentMappedElement[] NewMappedElements);// 0x5b88e3fee041
	void AddMappedComponents(ControlRigComponentMappedComponent[] Components);// 0x5b87e3fee041
	void AddMappedCompleteSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent);// 0x5b86e3fee041

--------------------------------
Class: ControlRigComponentMappedElement
	ComponentReference ComponentReference;//[Offset: 0x0, Size: 0x28]
	int TransformIndex;//[Offset: 0x28, Size: 0x4]
	FName TransformName;//[Offset: 0x2c, Size: 0x8]
	enum ElementType;//[Offset: 0x34, Size: 0x1]
	FName ElementName;//[Offset: 0x38, Size: 0x8]
	enum Direction;//[Offset: 0x40, Size: 0x1]
	Transform Offset;//[Offset: 0x50, Size: 0x30]
	float Weight;//[Offset: 0x80, Size: 0x4]
	enum Space;//[Offset: 0x84, Size: 0x1]
	SceneComponent* SceneComponent;//[Offset: 0x88, Size: 0x8]
	int ElementIndex;//[Offset: 0x90, Size: 0x4]
	int SubIndex;//[Offset: 0x94, Size: 0x4]

--------------------------------
Class: ComponentReference
	Actor* OtherActor;//[Offset: 0x0, Size: 0x8]
	FName ComponentProperty;//[Offset: 0x8, Size: 0x8]
	FString PathToComponent;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ControlRigComponentMappedBone
	FName Source;//[Offset: 0x0, Size: 0x8]
	FName Target;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ControlRigComponentMappedCurve
	FName Source;//[Offset: 0x0, Size: 0x8]
	FName Target;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ControlRigComponentMappedComponent
	SceneComponent* Component;//[Offset: 0x0, Size: 0x8]
	FName ElementName;//[Offset: 0x8, Size: 0x8]
	enum ElementType;//[Offset: 0x10, Size: 0x1]
	enum Direction;//[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ControlRigControlActor.Actor.Object
	Actor* ActorToTrack;//[Offset: 0x2e0, Size: 0x8]
	class ControlRig* ControlRigClass;//[Offset: 0x2e8, Size: 0x8]
	bool bRefreshOnTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool bIsSelectable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	MaterialInterface* MaterialOverride;//[Offset: 0x2f8, Size: 0x8]
	FString ColorParameter;//[Offset: 0x300, Size: 0x10]
	bool bCastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	SceneComponent* ActorRootComponent;//[Offset: 0x318, Size: 0x8]
	ControlRig* ControlRig;//[Offset: 0x320, Size: 0x8]
	FName[] ControlNames;//[Offset: 0x328, Size: 0x10]
	Transform[] GizmoTransforms;//[Offset: 0x338, Size: 0x10]
	StaticMeshComponent*[] Components;//[Offset: 0x348, Size: 0x10]
	MaterialInstanceDynamic*[] Materials;//[Offset: 0x358, Size: 0x10]
	FName ColorParameterName;//[Offset: 0x368, Size: 0x8]
	void Refresh();// 0x5bb2e3fee041
	void Clear();// 0x5bb1e3fee041

--------------------------------
Class: ControlRigGizmoActor.Actor.Object
	SceneComponent* ActorRootComponent;//[Offset: 0x2e0, Size: 0x8]
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2e8, Size: 0x8]
	uint32 ControlRigIndex;//[Offset: 0x2f0, Size: 0x4]
	FName ControlName;//[Offset: 0x2f4, Size: 0x8]
	FName ColorParameterName;//[Offset: 0x2fc, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x304, Size: 0x1]
	bool bSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x304, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x304, Size: 0x1]
	bool bHovered;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x304, Size: 0x1]
	void SetSelected(bool bInSelected);// 0x5bc0e3fee041
	void SetSelectable(bool bInSelectable);// 0x5bbfe3fee041
	void SetHovered(bool bInHovered);// 0x5bbee3fee041
	void SetGlobalTransform(out const Transform InTransform);// 0x5bbde3fee041
	void SetEnabled(bool bInEnabled);// 0x5bbce3fee041
	void OnTransformChanged(out const Transform NewTransform);// 0x5bbbe3fee041
	void OnSelectionChanged(bool bIsSelected);// 0x5bbae3fee041
	void OnManipulatingChanged(bool bIsManipulating);// 0x5bb9e3fee041
	void OnHoveredChanged(bool bIsSelected);// 0x5bb8e3fee041
	void OnEnabledChanged(bool bIsEnabled);// 0x5bb7e3fee041
	bool IsSelectedInEditor();// 0x5bb6e3fee041
	bool IsHovered();// 0x5bb5e3fee041
	bool IsEnabled();// 0x5bb4e3fee041
	Transform GetGlobalTransform();// 0x5bb3e3fee041

--------------------------------
Class: ControlRigLayerInstance.AnimInstance.Object

--------------------------------
Class: ControlRigValidationPass.Object

--------------------------------
Class: ControlRigNumericalValidationPass.ControlRigValidationPass.Object
	bool bCheckControls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bCheckBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bCheckCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	float TranslationPrecision;//[Offset: 0x2c, Size: 0x4]
	float RotationPrecision;//[Offset: 0x30, Size: 0x4]
	float ScalePrecision;//[Offset: 0x34, Size: 0x4]
	float CurvePrecision;//[Offset: 0x38, Size: 0x4]
	FName EventNameA;//[Offset: 0x3c, Size: 0x8]
	FName EventNameB;//[Offset: 0x44, Size: 0x8]
	RigPose Pose;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: RigPose
	RigPoseElement[] Elements;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RigPoseElement
	CachedRigElement Index;//[Offset: 0x0, Size: 0x14]
	Transform GlobalTransform;//[Offset: 0x20, Size: 0x30]
	Transform LocalTransform;//[Offset: 0x50, Size: 0x30]
	float CurveValue;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: CachedRigElement
	RigElementKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 Index;//[Offset: 0xc, Size: 0x2]
	int ContainerVersion;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ControlRigObjectHolder.Object
	Object*[] Objects;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ControlRigSequence.LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	AnimSequence* LastExportedToAnimationSequence;//[Offset: 0x1c8, Size: 0x28]
	SkeletalMesh* LastExportedUsingSkeletalMesh;//[Offset: 0x1f0, Size: 0x28]
	float LastExportedFrameRate;//[Offset: 0x218, Size: 0x4]

--------------------------------
Class: AnimSequencerInstance.AnimInstance.Object

--------------------------------
Class: ControlRigSequencerAnimInstance.AnimSequencerInstance.AnimInstance.Object

--------------------------------
Class: ControlRigSettings.DeveloperSettings.Object

--------------------------------
Class: ControlRigValidator.Object
	ControlRigValidationPass*[] Passes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: FKControlRig.ControlRig.Object
	bool[] IsControlActive;//[Offset: 0x650, Size: 0x10]
	enum ApplyMode;//[Offset: 0x660, Size: 0x1]

--------------------------------
Class: MovieSceneParameterSection.MovieSceneSection.MovieSceneSignedObject.Object
	BoolParameterNameAndCurve[] BoolParameterNamesAndCurves;//[Offset: 0xe0, Size: 0x10]
	ScalarParameterNameAndCurve[] ScalarParameterNamesAndCurves;//[Offset: 0xf0, Size: 0x10]
	Vector2DParameterNameAndCurves[] Vector2DParameterNamesAndCurves;//[Offset: 0x100, Size: 0x10]
	VectorParameterNameAndCurves[] VectorParameterNamesAndCurves;//[Offset: 0x110, Size: 0x10]
	ColorParameterNameAndCurves[] ColorParameterNamesAndCurves;//[Offset: 0x120, Size: 0x10]
	TransformParameterNameAndCurves[] TransformParameterNamesAndCurves;//[Offset: 0x130, Size: 0x10]
	bool RemoveVectorParameter(FName InParameterName);// 0x5bd3e3fee041
	bool RemoveVector2DParameter(FName InParameterName);// 0x5bd2e3fee041
	bool RemoveTransformParameter(FName InParameterName);// 0x5bd1e3fee041
	bool RemoveScalarParameter(FName InParameterName);// 0x5bd0e3fee041
	bool RemoveColorParameter(FName InParameterName);// 0x5bcfe3fee041
	bool RemoveBoolParameter(FName InParameterName);// 0x5bcee3fee041
	void GetParameterNames(out <FName> ParameterNames);// 0x5bcde3fee041
	void AddVectorParameterKey(FName InParameterName, FrameNumber InTime, Vector InValue);// 0x5bcce3fee041
	void AddVector2DParameterKey(FName InParameterName, FrameNumber InTime, Vector2D InValue);// 0x5bcbe3fee041
	void AddTransformParameterKey(FName InParameterName, FrameNumber InTime, out const Transform InValue);// 0x5bcae3fee041
	void AddScalarParameterKey(FName InParameterName, FrameNumber InTime, float InValue);// 0x5bc9e3fee041
	void AddColorParameterKey(FName InParameterName, FrameNumber InTime, LinearColor InValue);// 0x5bc8e3fee041
	void AddBoolParameterKey(FName InParameterName, FrameNumber InTime, bool InValue);// 0x5bc7e3fee041

--------------------------------
Class: BoolParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneBoolChannel ParameterCurve;//[Offset: 0x8, Size: 0x90]

--------------------------------
Class: MovieSceneBoolChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10]
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool[] Values;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ScalarParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneFloatChannel ParameterCurve;//[Offset: 0x8, Size: 0xa0]

--------------------------------
Class: Vector2DParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xa0]
	MovieSceneFloatChannel YCurve;//[Offset: 0xa8, Size: 0xa0]

--------------------------------
Class: VectorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xa0]
	MovieSceneFloatChannel YCurve;//[Offset: 0xa8, Size: 0xa0]
	MovieSceneFloatChannel ZCurve;//[Offset: 0x148, Size: 0xa0]

--------------------------------
Class: ColorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneFloatChannel RedCurve;//[Offset: 0x8, Size: 0xa0]
	MovieSceneFloatChannel GreenCurve;//[Offset: 0xa8, Size: 0xa0]
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x148, Size: 0xa0]
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x1e8, Size: 0xa0]

--------------------------------
Class: TransformParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneFloatChannel Translation;//[Offset: 0x8, Size: 0xa0]
	MovieSceneFloatChannel Rotation;//[Offset: 0x1e8, Size: 0xa0]
	MovieSceneFloatChannel Scale;//[Offset: 0x3c8, Size: 0xa0]

--------------------------------
Class: MovieSceneControlRigParameterSection.MovieSceneParameterSection.MovieSceneSection.MovieSceneSignedObject.Object
	ControlRig* ControlRig;//[Offset: 0x140, Size: 0x8]
	bool[] ControlsMask;//[Offset: 0x148, Size: 0x10]
	MovieSceneTransformMask TransformMask;//[Offset: 0x158, Size: 0x4]
	bool bAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1]
	bool bApplyBoneFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 0x1]
	InputBlendPose BoneFilter;//[Offset: 0x160, Size: 0x10]
	MovieSceneFloatChannel Weight;//[Offset: 0x170, Size: 0xa0]
	<FName,ChannelMapInfo> ControlChannelMap;//[Offset: 0x210, Size: 0x50]
	EnumParameterNameAndCurve[] EnumParameterNamesAndCurves;//[Offset: 0x260, Size: 0x10]
	IntegerParameterNameAndCurve[] IntegerParameterNamesAndCurves;//[Offset: 0x270, Size: 0x10]

--------------------------------
Class: MovieSceneTransformMask
	uint32 Mask;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ChannelMapInfo
	int ControlIndex;//[Offset: 0x0, Size: 0x4]
	int TotalChannelIndex;//[Offset: 0x4, Size: 0x4]
	int ChannelIndex;//[Offset: 0x8, Size: 0x4]
	int ParentControlIndex;//[Offset: 0xc, Size: 0x4]
	FName ChannelTypeName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: EnumParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneByteChannel ParameterCurve;//[Offset: 0x8, Size: 0x98]

--------------------------------
Class: MovieSceneByteChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10]
	byte DefaultValue;//[Offset: 0x18, Size: 0x1]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	byte[] Values;//[Offset: 0x20, Size: 0x10]
	Enum* Enum;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: IntegerParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneIntegerChannel ParameterCurve;//[Offset: 0x8, Size: 0x90]

--------------------------------
Class: MovieSceneIntegerChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10]
	int DefaultValue;//[Offset: 0x18, Size: 0x4]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int[] Values;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneControlRigParameterTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	ControlRig* ControlRig;//[Offset: 0x88, Size: 0x8]
	MovieSceneSection* SectionToKey;//[Offset: 0x90, Size: 0x8]
	MovieSceneSection*[] Sections;//[Offset: 0x98, Size: 0x10]
	FName TrackName;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: AnimationCompressionLibraryDatabase.Object
	byte[] CookedCompressedBytes;//[Offset: 0x28, Size: 0x10]
	uint64[] CookedAnimSequenceMappings;//[Offset: 0x38, Size: 0x10]
	uint32 MaxStreamRequestSizeKB;//[Offset: 0x158, Size: 0x4]
	void SetVisualFidelity(Object* WorldContextObject, LatentActionInfo LatentInfo, AnimationCompressionLibraryDatabase* DatabaseAsset, out enum Result, enum VisualFidelity);// 0x5bd5e3fee041
	enum GetVisualFidelity(AnimationCompressionLibraryDatabase* DatabaseAsset);// 0x5bd4e3fee041

--------------------------------
Class: AnimBoneCompressionCodec_ACLBase.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimBoneCompressionCodec_ACL.AnimBoneCompressionCodec_ACLBase.AnimBoneCompressionCodec.Object
	AnimBoneCompressionCodec* SafetyFallbackCodec;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AnimBoneCompressionCodec_ACLCustom.AnimBoneCompressionCodec_ACLBase.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimBoneCompressionCodec_ACLDatabase.AnimBoneCompressionCodec_ACLBase.AnimBoneCompressionCodec.Object
	AnimationCompressionLibraryDatabase* DatabaseAsset;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AnimBoneCompressionCodec_ACLSafe.AnimBoneCompressionCodec_ACLBase.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_ACL.AnimCurveCompressionCodec.Object

--------------------------------
Class: SignificanceManager.Object
	SoftClassPath SignificanceManagerClassName;//[Offset: 0x108, Size: 0x18]

--------------------------------
Class: AnimNotify_WarpingTarget.AnimNotify.Object
	FName TargetName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AnimNotifyState_MotionWarping.AnimNotifyState.Object
	RootMotionModifier* RootMotionModifier;//[Offset: 0x30, Size: 0x8]
	void OnWarpUpdate(MotionWarpingComponent* MotionWarpingComp, RootMotionModifier* Modifier);// 0x5bdce3fee041
	void OnWarpEnd(MotionWarpingComponent* MotionWarpingComp, RootMotionModifier* Modifier);// 0x5bdbe3fee041
	void OnWarpBegin(MotionWarpingComponent* MotionWarpingComp, RootMotionModifier* Modifier);// 0x5bdae3fee041
	void OnRootMotionModifierUpdate(MotionWarpingComponent* MotionWarpingComp, RootMotionModifier* Modifier);// 0x5bd9e3fee041
	void OnRootMotionModifierDeactivate(MotionWarpingComponent* MotionWarpingComp, RootMotionModifier* Modifier);// 0x5bd8e3fee041
	void OnRootMotionModifierActivate(MotionWarpingComponent* MotionWarpingComp, RootMotionModifier* Modifier);// 0x5bd7e3fee041
	RootMotionModifier* AddRootMotionModifier(MotionWarpingComponent* MotionWarpingComp, const AnimSequenceBase* Animation, float StartTime, float EndTime);// 0x5bd6e3fee041

--------------------------------
Class: MotionWarpingUtilities.BlueprintFunctionLibrary.Object
	MotionWarpingSyncPoint MakeMotionWarpingSyncPoint(Vector Location, Rotator Rotation);// 0x5be1e3fee041
	void GetMotionWarpingWindowsFromAnimation(const AnimSequenceBase* Animation, out MotionWarpingWindowData[] OutWindows);// 0x5be0e3fee041
	void GetMotionWarpingWindowsForSyncPointFromAnimation(const AnimSequenceBase* Animation, FName WarpTargetName, out MotionWarpingWindowData[] OutWindows);// 0x5bdfe3fee041
	Transform ExtractRootMotionFromAnimation(const AnimSequenceBase* Animation, float StartTime, float EndTime);// 0x5bdee3fee041
	void BreakMotionWarpingSyncPoint(out const MotionWarpingSyncPoint SyncPoint, out Vector Location, out Rotator Rotation);// 0x5bdde3fee041

--------------------------------
Class: MotionWarpingWindowData
	AnimNotifyState_MotionWarping* AnimNotify;//[Offset: 0x0, Size: 0x8]
	float StartTime;//[Offset: 0x8, Size: 0x4]
	float EndTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RootMotionModifier_Warp.RootMotionModifier.Object
	FName WarpTargetName;//[Offset: 0x7c, Size: 0x8]
	enum WarpPointAnimProvider;//[Offset: 0x84, Size: 0x1]
	Transform WarpPointAnimTransform;//[Offset: 0x90, Size: 0x30]
	FName WarpPointAnimBoneName;//[Offset: 0xc0, Size: 0x8]
	bool bWarpTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bIgnoreZAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	bool bWarpRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]
	enum RotationType;//[Offset: 0xcb, Size: 0x1]
	bool bAdjustPlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	float MaxWarpScale;//[Offset: 0xd0, Size: 0x4]
	float WarpPlayRateAlpha;//[Offset: 0xd4, Size: 0x4]
	float CachedTargetTime;//[Offset: 0xd8, Size: 0x4]
	bool bEnableInterruptByInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	bool bWarpControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1]
	bool bWarpControlRotationIgnorePitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 0x1]
	float WarpRotationTimeMultiplier;//[Offset: 0xe0, Size: 0x4]
	Transform CachedTargetTransform;//[Offset: 0xf0, Size: 0x30]
	RootMotionModifier_Warp* AddRootMotionModifierSimpleWarp(MotionWarpingComponent* InMotionWarpingComp, const AnimSequenceBase* InAnimation, float InStartTime, float InEndTime, FName InWarpTargetName, enum InWarpPointAnimProvider, Transform InWarpPointAnimTransform, FName InWarpPointAnimBoneName, bool bInWarpTranslation, bool bInIgnoreZAxis, bool bInWarpRotation, enum InRotationType, float InWarpRotationTimeMultiplier);// 0x5be2e3fee041

--------------------------------
Class: RootMotionModifier_Scale.RootMotionModifier.Object
	Vector Scale;//[Offset: 0x7c, Size: 0xc]

--------------------------------
Class: RootMotionModifier_CharacterPhysics.RootMotionModifier.Object
	bool bIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool bIgnoreGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
	bool bRevertWalkMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1]
	byte MovementMode;//[Offset: 0x7c, Size: 0x1]

--------------------------------
Class: RootMotionModifier_WarpWithoutRootMotion.RootMotionModifier_Warp.RootMotionModifier.Object

--------------------------------
Class: RootMotionModifier_OnlyWarpControlRotation.RootMotionModifier.Object
	float LerpPitchAlpha;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: RootMotionModifier_AdjustmentBlendWarp.RootMotionModifier_Warp.RootMotionModifier.Object
	bool bWarpIKBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	FName[] IKBones;//[Offset: 0x168, Size: 0x10]
	Transform CachedMeshTransform;//[Offset: 0x180, Size: 0x30]
	Transform CachedMeshRelativeTransform;//[Offset: 0x1b0, Size: 0x30]
	Transform CachedRootMotion;//[Offset: 0x1e0, Size: 0x30]
	AnimSequenceTrackContainer Result;//[Offset: 0x210, Size: 0x20]
	float ActualStartTime;//[Offset: 0x230, Size: 0x4]
	void GetAdjustmentBlendIKBoneTransformAndAlpha(Character* Character, FName BoneName, out Transform OutTransform, out float OutAlpha);// 0x5be4e3fee041
	RootMotionModifier_AdjustmentBlendWarp* AddRootMotionModifierAdjustmentBlendWarp(MotionWarpingComponent* InMotionWarpingComp, const AnimSequenceBase* InAnimation, float InStartTime, float InEndTime, FName InWarpTargetName, enum InWarpPointAnimProvider, Transform InWarpPointAnimTransform, FName InWarpPointAnimBoneName, bool bInWarpTranslation, bool bInIgnoreZAxis, bool bInWarpRotation, bool bInWarpIKBones, out const FName[] InIKBones);// 0x5be3e3fee041

--------------------------------
Class: AnimSequenceTrackContainer
	RawAnimSequenceTrack[] AnimationTracks;//[Offset: 0x0, Size: 0x10]
	FName[] TrackNames;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: RawAnimSequenceTrack
	Vector[] PosKeys;//[Offset: 0x0, Size: 0x10]
	Quat[] RotKeys;//[Offset: 0x10, Size: 0x10]
	Vector[] ScaleKeys;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: RootMotionModifier_SkewWarp.RootMotionModifier_Warp.RootMotionModifier.Object
	RootMotionModifier_SkewWarp* AddRootMotionModifierSkewWarp(MotionWarpingComponent* InMotionWarpingComp, const AnimSequenceBase* InAnimation, float InStartTime, float InEndTime, FName InWarpTargetName, enum InWarpPointAnimProvider, Transform InWarpPointAnimTransform, FName InWarpPointAnimBoneName, bool bInWarpTranslation, bool bInIgnoreZAxis, bool bInWarpRotation, enum InRotationType, float InWarpRotationTimeMultiplier);// 0x5be5e3fee041

--------------------------------
Class: AnimationBudgetBlueprintLibrary.BlueprintFunctionLibrary.Object
	void SetAnimationBudgetParameters(Object* WorldContextObject, out const AnimationBudgetAllocatorParameters InParameters);// 0x5be7e3fee041
	void EnableAnimationBudget(Object* WorldContextObject, bool bEnabled);// 0x5be6e3fee041

--------------------------------
Class: AnimationBudgetAllocatorParameters
	float BudgetInMs;//[Offset: 0x0, Size: 0x4]
	float MinQuality;//[Offset: 0x4, Size: 0x4]
	int MaxTickRate;//[Offset: 0x8, Size: 0x4]
	float WorkUnitSmoothingSpeed;//[Offset: 0xc, Size: 0x4]
	float AlwaysTickFalloffAggression;//[Offset: 0x10, Size: 0x4]
	float InterpolationFalloffAggression;//[Offset: 0x14, Size: 0x4]
	int InterpolationMaxRate;//[Offset: 0x18, Size: 0x4]
	int MaxInterpolatedComponents;//[Offset: 0x1c, Size: 0x4]
	float InterpolationTickMultiplier;//[Offset: 0x20, Size: 0x4]
	float InitialEstimatedWorkUnitTimeMs;//[Offset: 0x24, Size: 0x4]
	int MaxTickedOffsreenComponents;//[Offset: 0x28, Size: 0x4]
	int StateChangeThrottleInFrames;//[Offset: 0x2c, Size: 0x4]
	float BudgetFactorBeforeReducedWork;//[Offset: 0x30, Size: 0x4]
	float BudgetFactorBeforeReducedWorkEpsilon;//[Offset: 0x34, Size: 0x4]
	float BudgetPressureSmoothingSpeed;//[Offset: 0x38, Size: 0x4]
	int ReducedWorkThrottleMinInFrames;//[Offset: 0x3c, Size: 0x4]
	int ReducedWorkThrottleMaxInFrames;//[Offset: 0x40, Size: 0x4]
	float BudgetFactorBeforeAggressiveReducedWork;//[Offset: 0x44, Size: 0x4]
	int ReducedWorkThrottleMaxPerFrame;//[Offset: 0x48, Size: 0x4]
	float BudgetPressureBeforeEmergencyReducedWork;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: ParticleSystemWidget.Widget.Visual.Object
	ParticleSystem* ParticleSystemTemplate;//[Offset: 0x128, Size: 0x8]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	bool bReactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]
	UIParticleComponent* WorldParticleComponent;//[Offset: 0x138, Size: 0x8]
	Actor* WorldParticleActor;//[Offset: 0x140, Size: 0x8]
	void SetReactivate(bool bActivateAndReset);// 0x5bebe3fee041
	ParticleSystemComponent* GetParticleComponent();// 0x5beae3fee041
	void ActivateParticles(bool bActive, bool bReset);// 0x5be9e3fee041

--------------------------------
Class: UIParticleComponent.ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: UIParticleActor.Actor.Object

--------------------------------
Class: BP_GameJoyPluginLibrary.BlueprintFunctionLibrary.Object
	delegate onGameJoyEvent;//[Offset: 0x38, Size: 0x10]
	void UpdateRedDot(bool showRedDot);// 0x5c3ae3fee041
	void UnLockRecorderPosition();// 0x5c39e3fee041
	void StopRecorder();// 0x5c38e3fee041
	bool StartRecorder();// 0x5c37e3fee041
	void ShowRecorderDialog(float X, float Y);// 0x5c36e3fee041
	void ShowConsole();// 0x5c35e3fee041
	void SetWatermark(FString Path, float X, float Y);// 0x5c34e3fee041
	void SetVideoResolution(int Type, int Resolution);// 0x5c33e3fee041
	void SetVideoQuality(int quality);// 0x5c32e3fee041
	void SetVideoBitrate(int Type, int bitrate);// 0x5c31e3fee041
	void SetFrameRate(int FrameRate);// 0x5c30e3fee041
	void SetCoverSize(int Width, int Height);// 0x5c2fe3fee041
	void SetAlbumName(FString albumName);// 0x5c2ee3fee041
	void RequestSDKPermission(int EventID, FString Type);// 0x5c2de3fee041
	void PlayLocalVideo(FString Path, int Type);// 0x5c2ce3fee041
	void NotifySpaceNotEnough();// 0x5c2be3fee041
	void MoveVideoToAlbum(int EventID, FString albumName, FString srcPath);// 0x5c2ae3fee041
	void MoveFileToDocument(FString fromPath, FString toSubPath);// 0x5c29e3fee041
	bool MoveFile(out FString from, out FString dst);// 0x5c28e3fee041
	void MoveAlbumToLocal(int EventID, FString albumPath, FString localPath);// 0x5c27e3fee041
	void MergeVideoWithImageAndVideo(int EventID, FString videopath, FString headerVideo, FString imagePath);// 0x5c26e3fee041
	void LockRecorderPosition();// 0x5c25e3fee041
	bool IsRecording();// 0x5c24e3fee041
	bool IsRecorderDialogShow();// 0x5c23e3fee041
	bool IsIOSFileExist(FString FilePath);// 0x5c22e3fee041
	bool IsFileExist(FString FilePath);// 0x5c21e3fee041
	bool IsDirExist(FString Path);// 0x5c20e3fee041
	void InitGameJoyBPLib();// 0x5c1fe3fee041
	void GetVideoMd5(int EventID, FString videoPathJson);// 0x5c1ee3fee041
	void GetVideoInfo(int EventID, FString videoPathJson);// 0x5c1de3fee041
	int GetTimeSeconds();// 0x5c1ce3fee041
	int GetTimeMilliSeconds();// 0x5c1be3fee041
	void GetSandboxPath(int EventID);// 0x5c1ae3fee041
	FString GetPaths(int pathType, bool relative);// 0x5c19e3fee041
	FString GetPathRelativeTo(FString fromPath, FString RelativeTo);// 0x5c18e3fee041
	void GetOldVideoFromAlbumName(FString albumName);// 0x5c17e3fee041
	BP_GameJoyPluginLibrary* GetInstance();// 0x5c16e3fee041
	FString GetGFilePathBase();// 0x5c15e3fee041
	int GetFreeDiskSpace();// 0x5c14e3fee041
	FString GetFilesInDir(FString Path);// 0x5c13e3fee041
	void GetFilesFromPath(int EventID, FString Path, bool isIncludeChildren);// 0x5c12e3fee041
	FString GetFilePathFromUri(FString uriPath);// 0x5c11e3fee041
	int GetFdFromUri(FString Uri);// 0x5c10e3fee041
	FString GetDeviceInfo();// 0x5c0fe3fee041
	void GenerateVideoCover(int EventID, FString videopath);// 0x5c0ee3fee041
	void GenerateMomentsVideo(FString videoTimeStampListJson);// 0x5c0de3fee041
	void EnableInGameAudio(bool Enable);// 0x5c0ce3fee041
	void EnableBgmMix(bool mixing);// 0x5c0be3fee041
	void DeleteVideoByAlbum(int EventID, FString albumName, FString srcPath);// 0x5c0ae3fee041
	bool CopyFile(out FString from, out FString dst);// 0x5c09e3fee041
	void CloseRecorderDialog();// 0x5c08e3fee041
	int CloseFd(int fd);// 0x5c07e3fee041
	int CheckSDKPermission(FString Type);// 0x5c06e3fee041
	bool CheckAlbumVideoExist(FString Path);// 0x5c05e3fee041

--------------------------------
Class: CableActor.Actor.Object
	CableComponent* CableComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: CableComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAttachStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 0x1]
	bool bAttachEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e2, Size: 0x1]
	ComponentReference AttachEndTo;//[Offset: 0x5e8, Size: 0x28]
	FName AttachEndToSocketName;//[Offset: 0x610, Size: 0x8]
	Vector EndLocation;//[Offset: 0x618, Size: 0xc]
	float CableLength;//[Offset: 0x624, Size: 0x4]
	int NumSegments;//[Offset: 0x628, Size: 0x4]
	float SubstepTime;//[Offset: 0x62c, Size: 0x4]
	int SolverIterations;//[Offset: 0x630, Size: 0x4]
	bool bEnableStiffness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x634, Size: 0x1]
	bool bUseSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x635, Size: 0x1]
	bool bSkipCableUpdateWhenNotVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x636, Size: 0x1]
	bool bSkipCableUpdateWhenNotOwnerRecentlyRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x637, Size: 0x1]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	float CollisionFriction;//[Offset: 0x63c, Size: 0x4]
	Vector CableForce;//[Offset: 0x640, Size: 0xc]
	float CableGravityScale;//[Offset: 0x64c, Size: 0x4]
	float CableWidth;//[Offset: 0x650, Size: 0x4]
	int NumSides;//[Offset: 0x654, Size: 0x4]
	float TileMaterial;//[Offset: 0x658, Size: 0x4]
	void SetAttachEndToComponent(SceneComponent* Component, FName SocketName);// 0x5c3fe3fee041
	void SetAttachEndTo(Actor* Actor, FName ComponentProperty, FName SocketName);// 0x5c3ee3fee041
	void GetCableParticleLocations(out Vector[] Locations);// 0x5c3de3fee041
	SceneComponent* GetAttachedComponent();// 0x5c3ce3fee041
	Actor* GetAttachedActor();// 0x5c3be3fee041

--------------------------------
Class: GeometryCache.Object
	MaterialInterface*[] Materials;//[Offset: 0x30, Size: 0x10]
	GeometryCacheTrack*[] Tracks;//[Offset: 0x40, Size: 0x10]
	int StartFrame;//[Offset: 0x60, Size: 0x4]
	int EndFrame;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: GeometryCacheTrack.Object
	float Duration;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: GeometryCacheActor.Actor.Object
	GeometryCacheComponent* GeometryCacheComponent;//[Offset: 0x2e0, Size: 0x8]
	GeometryCacheComponent* GetGeometryCacheComponent();// 0x5c40e3fee041

--------------------------------
Class: GeometryCacheComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	GeometryCache* GeometryCache;//[Offset: 0x5e8, Size: 0x8]
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f1, Size: 0x1]
	float StartTimeOffset;//[Offset: 0x5f4, Size: 0x4]
	float PlaybackSpeed;//[Offset: 0x5f8, Size: 0x4]
	int NumTracks;//[Offset: 0x5fc, Size: 0x4]
	float ElapsedTime;//[Offset: 0x600, Size: 0x4]
	float Duration;//[Offset: 0x634, Size: 0x4]
	bool bManualTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	void TickAtThisTime(const float Time, bool bInIsRunning, bool bInBackwards, bool bInIsLooping);// 0x5c54e3fee041
	void Stop();// 0x5c53e3fee041
	void SetStartTimeOffset(const float NewStartTimeOffset);// 0x5c52e3fee041
	void SetPlaybackSpeed(const float NewPlaybackSpeed);// 0x5c51e3fee041
	void SetLooping(const bool bNewLooping);// 0x5c50e3fee041
	bool SetGeometryCache(GeometryCache* NewGeomCache);// 0x5c4fe3fee041
	void PlayReversedFromEnd();// 0x5c4ee3fee041
	void PlayReversed();// 0x5c4de3fee041
	void PlayFromStart();// 0x5c4ce3fee041
	void Play();// 0x5c4be3fee041
	void Pause();// 0x5c4ae3fee041
	bool IsPlayingReversed();// 0x5c49e3fee041
	bool IsPlaying();// 0x5c48e3fee041
	bool IsLooping();// 0x5c47e3fee041
	float GetStartTimeOffset();// 0x5c46e3fee041
	float GetPlaybackSpeed();// 0x5c45e3fee041
	float GetPlaybackDirection();// 0x5c44e3fee041
	int GetNumberOfFrames();// 0x5c43e3fee041
	float GetDuration();// 0x5c42e3fee041
	float GetAnimationTime();// 0x5c41e3fee041

--------------------------------
Class: GeometryCacheCodecBase.Object
	int[] TopologyRanges;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GeometryCacheCodecRaw.GeometryCacheCodecBase.Object
	int DummyProperty;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GeometryCacheCodecV1.GeometryCacheCodecBase.Object

--------------------------------
Class: GeometryCacheTrack_FlipbookAnimation.GeometryCacheTrack.Object
	uint32 NumMeshSamples;//[Offset: 0x54, Size: 0x4]
	void AddMeshSample(out const GeometryCacheMeshData MeshData, const float SampleTime);// 0x5c55e3fee041

--------------------------------
Class: GeometryCacheMeshData

--------------------------------
Class: GeometryCacheTrackStreamable.GeometryCacheTrack.Object
	GeometryCacheCodecBase* Codec;//[Offset: 0x58, Size: 0x8]
	float StartSampleTime;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: GeometryCacheTrack_TransformAnimation.GeometryCacheTrack.Object
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0x5c56e3fee041

--------------------------------
Class: GeometryCacheTrack_TransformGroupAnimation.GeometryCacheTrack.Object
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0x5c57e3fee041

--------------------------------
Class: MovieSceneGeometryCacheSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneGeometryCacheParams Params;//[Offset: 0xe0, Size: 0x40]

--------------------------------
Class: MovieSceneGeometryCacheParams
	GeometryCache* GeometryCacheAsset;//[Offset: 0x0, Size: 0x8]
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4]
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4]
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4]
	float PlayRate;//[Offset: 0x14, Size: 0x4]
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	float StartOffset;//[Offset: 0x1c, Size: 0x4]
	float EndOffset;//[Offset: 0x20, Size: 0x4]
	SoftObjectPath GeometryCache;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: MovieSceneGeometryCacheTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: GroomActor.Actor.Object
	GroomComponent* GroomComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: GroomComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	GroomAsset* GroomAsset;//[Offset: 0x5f0, Size: 0x8]
	NiagaraComponent*[] NiagaraComponents;//[Offset: 0x5f8, Size: 0x10]
	SkeletalMesh* SourceSkeletalMesh;//[Offset: 0x608, Size: 0x8]
	GroomBindingAsset* BindingAsset;//[Offset: 0x610, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x618, Size: 0x8]
	MaterialInterface* Strands_DebugMaterial;//[Offset: 0x620, Size: 0x8]
	MaterialInterface* Strands_DefaultMaterial;//[Offset: 0x628, Size: 0x8]
	MaterialInterface* Cards_DefaultMaterial;//[Offset: 0x630, Size: 0x8]
	MaterialInterface* Meshes_DefaultMaterial;//[Offset: 0x638, Size: 0x8]
	NiagaraSystem* AngularSpringsSystem;//[Offset: 0x640, Size: 0x8]
	NiagaraSystem* CosseratRodsSystem;//[Offset: 0x648, Size: 0x8]
	FString AttachmentName;//[Offset: 0x650, Size: 0x10]
	HairGroupDesc[] GroomGroupsDesc;//[Offset: 0x6b0, Size: 0x10]
	void SetGroomAsset(GroomAsset* Asset);// 0x5c5be3fee041
	void SetBindingAsset(GroomBindingAsset* InBinding);// 0x5c5ae3fee041

--------------------------------
Class: GroomAsset.Object
	HairGroupInfoWithVisibility[] HairGroupsInfo;//[Offset: 0x30, Size: 0x10]
	HairGroupsRendering[] HairGroupsRendering;//[Offset: 0x40, Size: 0x10]
	HairGroupsPhysics[] HairGroupsPhysics;//[Offset: 0x50, Size: 0x10]
	HairGroupsInterpolation[] HairGroupsInterpolation;//[Offset: 0x60, Size: 0x10]
	HairGroupsLOD[] HairGroupsLOD;//[Offset: 0x70, Size: 0x10]
	HairGroupsCardsSourceDescription[] HairGroupsCards;//[Offset: 0x80, Size: 0x10]
	HairGroupsMeshesSourceDescription[] HairGroupsMeshes;//[Offset: 0x90, Size: 0x10]
	HairGroupsMaterial[] HairGroupsMaterials;//[Offset: 0xa0, Size: 0x10]
	bool EnableGlobalInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	enum HairInterpolationType;//[Offset: 0xc1, Size: 0x1]
	enum LODSelectionType;//[Offset: 0xc2, Size: 0x1]
	PerPlatformInt MinLOD;//[Offset: 0xc4, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0xc8, Size: 0x1]
	float[] EffectiveLODBias;//[Offset: 0xd0, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: HairGroupInfoWithVisibility.HairGroupInfo
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: HairGroupInfo
	int GroupID;//[Offset: 0x0, Size: 0x4]
	int NumCurves;//[Offset: 0x4, Size: 0x4]
	int NumGuides;//[Offset: 0x8, Size: 0x4]
	int NumCurveVertices;//[Offset: 0xc, Size: 0x4]
	int NumGuideVertices;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: HairGroupsRendering
	FName MaterialSlotName;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]
	HairGeometrySettings GeometrySettings;//[Offset: 0x10, Size: 0x10]
	HairShadowSettings ShadowSettings;//[Offset: 0x20, Size: 0xc]
	HairAdvancedRenderingSettings AdvancedSettings;//[Offset: 0x2c, Size: 0x2]

--------------------------------
Class: HairGeometrySettings
	float HairWidth;//[Offset: 0x0, Size: 0x4]
	float HairRootScale;//[Offset: 0x4, Size: 0x4]
	float HairTipScale;//[Offset: 0x8, Size: 0x4]
	float HairClipScale;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: HairShadowSettings
	float HairShadowDensity;//[Offset: 0x0, Size: 0x4]
	float HairRaytracingRadiusScale;//[Offset: 0x4, Size: 0x4]
	bool bUseHairRaytracingGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bVoxelize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: HairAdvancedRenderingSettings
	bool bUseStableRasterization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bScatterSceneLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: HairGroupsPhysics
	HairSolverSettings SolverSettings;//[Offset: 0x0, Size: 0x38]
	HairExternalForces ExternalForces;//[Offset: 0x38, Size: 0x1c]
	HairMaterialConstraints MaterialConstraints;//[Offset: 0x58, Size: 0x1d8]
	HairStrandsParameters StrandsParameters;//[Offset: 0x230, Size: 0x98]

--------------------------------
Class: HairSolverSettings
	bool EnableSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum NiagaraSolver;//[Offset: 0x1, Size: 0x1]
	NiagaraSystem* CustomSystem;//[Offset: 0x8, Size: 0x28]
	int SubSteps;//[Offset: 0x30, Size: 0x4]
	int IterationCount;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: HairExternalForces
	Vector GravityVector;//[Offset: 0x0, Size: 0xc]
	float AirDrag;//[Offset: 0xc, Size: 0x4]
	Vector AirVelocity;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: HairMaterialConstraints
	HairBendConstraint BendConstraint;//[Offset: 0x0, Size: 0x98]
	HairStretchConstraint StretchConstraint;//[Offset: 0x98, Size: 0x98]
	HairCollisionConstraint CollisionConstraint;//[Offset: 0x130, Size: 0xa8]

--------------------------------
Class: HairBendConstraint
	bool SolveBend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool ProjectBend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float BendDamping;//[Offset: 0x4, Size: 0x4]
	float BendStiffness;//[Offset: 0x8, Size: 0x4]
	RuntimeFloatCurve BendScale;//[Offset: 0x10, Size: 0x88]

--------------------------------
Class: HairStretchConstraint
	bool SolveStretch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool ProjectStretch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float StretchDamping;//[Offset: 0x4, Size: 0x4]
	float StretchStiffness;//[Offset: 0x8, Size: 0x4]
	RuntimeFloatCurve StretchScale;//[Offset: 0x10, Size: 0x88]

--------------------------------
Class: HairCollisionConstraint
	bool SolveCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool ProjectCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float StaticFriction;//[Offset: 0x4, Size: 0x4]
	float KineticFriction;//[Offset: 0x8, Size: 0x4]
	float StrandsViscosity;//[Offset: 0xc, Size: 0x4]
	IntVector GridDimension;//[Offset: 0x10, Size: 0xc]
	float CollisionRadius;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve RadiusScale;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: HairStrandsParameters
	enum StrandsSize;//[Offset: 0x0, Size: 0x1]
	float StrandsDensity;//[Offset: 0x4, Size: 0x4]
	float StrandsSmoothing;//[Offset: 0x8, Size: 0x4]
	float StrandsThickness;//[Offset: 0xc, Size: 0x4]
	RuntimeFloatCurve ThicknessScale;//[Offset: 0x10, Size: 0x88]

--------------------------------
Class: HairGroupsInterpolation
	HairDecimationSettings DecimationSettings;//[Offset: 0x0, Size: 0x8]
	HairInterpolationSettings InterpolationSettings;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: HairDecimationSettings
	float CurveDecimation;//[Offset: 0x0, Size: 0x4]
	float VertexDecimation;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: HairInterpolationSettings
	bool bOverrideGuides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float HairToGuideDensity;//[Offset: 0x4, Size: 0x4]
	enum InterpolationQuality;//[Offset: 0x8, Size: 0x1]
	enum InterpolationDistance;//[Offset: 0x9, Size: 0x1]
	bool bRandomizeGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bUseUniqueGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]

--------------------------------
Class: HairGroupsLOD
	HairLODSettings[] LODs;//[Offset: 0x0, Size: 0x10]
	float ClusterWorldSize;//[Offset: 0x10, Size: 0x4]
	float ClusterScreenSizeScale;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: HairLODSettings
	float CurveDecimation;//[Offset: 0x0, Size: 0x4]
	float VertexDecimation;//[Offset: 0x4, Size: 0x4]
	float AngularThreshold;//[Offset: 0x8, Size: 0x4]
	float ScreenSize;//[Offset: 0xc, Size: 0x4]
	float ThicknessScale;//[Offset: 0x10, Size: 0x4]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	enum GeometryType;//[Offset: 0x15, Size: 0x1]

--------------------------------
Class: HairGroupsCardsSourceDescription
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	enum SourceType;//[Offset: 0x10, Size: 0x1]
	StaticMesh* ProceduralMesh;//[Offset: 0x18, Size: 0x8]
	FString ProceduralMeshKey;//[Offset: 0x20, Size: 0x10]
	StaticMesh* ImportedMesh;//[Offset: 0x30, Size: 0x8]
	HairGroupsProceduralCards ProceduralSettings;//[Offset: 0x38, Size: 0x38]
	HairGroupCardsTextures Textures;//[Offset: 0x70, Size: 0x30]
	int GroupIndex;//[Offset: 0xa0, Size: 0x4]
	int LODIndex;//[Offset: 0xa4, Size: 0x4]
	HairGroupCardsInfo CardsInfo;//[Offset: 0xa8, Size: 0x8]
	FString ImportedMeshKey;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: HairGroupsProceduralCards
	HairCardsClusterSettings ClusterSettings;//[Offset: 0x0, Size: 0x8]
	HairCardsGeometrySettings GeometrySettings;//[Offset: 0x8, Size: 0x1c]
	HairCardsTextureSettings TextureSettings;//[Offset: 0x24, Size: 0x10]
	int Version;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: HairCardsClusterSettings
	float ClusterDecimation;//[Offset: 0x0, Size: 0x4]
	enum Type;//[Offset: 0x4, Size: 0x1]
	bool bUseGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]

--------------------------------
Class: HairCardsGeometrySettings
	enum GenerationType;//[Offset: 0x0, Size: 0x1]
	int CardsCount;//[Offset: 0x4, Size: 0x4]
	enum ClusterType;//[Offset: 0x8, Size: 0x1]
	float MinSegmentLength;//[Offset: 0xc, Size: 0x4]
	float AngularThreshold;//[Offset: 0x10, Size: 0x4]
	float MinCardsLength;//[Offset: 0x14, Size: 0x4]
	float MaxCardsLength;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: HairCardsTextureSettings
	int AtlasMaxResolution;//[Offset: 0x0, Size: 0x4]
	int PixelPerCentimeters;//[Offset: 0x4, Size: 0x4]
	int LengthTextureCount;//[Offset: 0x8, Size: 0x4]
	int DensityTextureCount;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: HairGroupCardsTextures
	Texture2D* DepthTexture;//[Offset: 0x0, Size: 0x8]
	Texture2D* CoverageTexture;//[Offset: 0x8, Size: 0x8]
	Texture2D* TangentTexture;//[Offset: 0x10, Size: 0x8]
	Texture2D* AttributeTexture;//[Offset: 0x18, Size: 0x8]
	Texture2D* AuxilaryDataTexture;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: HairGroupCardsInfo
	int NumCards;//[Offset: 0x0, Size: 0x4]
	int NumCardVertices;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: HairGroupsMeshesSourceDescription
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	StaticMesh* ImportedMesh;//[Offset: 0x10, Size: 0x8]
	HairGroupCardsTextures Textures;//[Offset: 0x18, Size: 0x30]
	int GroupIndex;//[Offset: 0x48, Size: 0x4]
	int LODIndex;//[Offset: 0x4c, Size: 0x4]
	FString ImportedMeshKey;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: HairGroupsMaterial
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8]
	FName SlotName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GroomBindingAsset.Object
	GroomAsset* Groom;//[Offset: 0x28, Size: 0x8]
	SkeletalMesh* SourceSkeletalMesh;//[Offset: 0x30, Size: 0x8]
	SkeletalMesh* TargetSkeletalMesh;//[Offset: 0x38, Size: 0x8]
	int NumInterpolationPoints;//[Offset: 0x40, Size: 0x4]
	int MatchingSection;//[Offset: 0x44, Size: 0x4]
	GoomBindingGroupInfo[] GroupInfos;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: GoomBindingGroupInfo
	int RenRootCount;//[Offset: 0x0, Size: 0x4]
	int RenLODCount;//[Offset: 0x4, Size: 0x4]
	int SimRootCount;//[Offset: 0x8, Size: 0x4]
	int SimLODCount;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: HairGroupDesc
	int HairCount;//[Offset: 0x0, Size: 0x4]
	int GuideCount;//[Offset: 0x4, Size: 0x4]
	float HairLength;//[Offset: 0x8, Size: 0x4]
	float HairWidth;//[Offset: 0xc, Size: 0x4]
	bool HairWidth_Override;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float HairRootScale;//[Offset: 0x14, Size: 0x4]
	bool HairRootScale_Override;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float HairTipScale;//[Offset: 0x1c, Size: 0x4]
	bool HairTipScale_Override;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float HairClipLength;//[Offset: 0x24, Size: 0x4]
	bool HairClipLength_Override;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float HairShadowDensity;//[Offset: 0x2c, Size: 0x4]
	bool HairShadowDensity_Override;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float HairRaytracingRadiusScale;//[Offset: 0x34, Size: 0x4]
	bool HairRaytracingRadiusScale_Override;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bUseHairRaytracingGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bUseHairRaytracingGeometry_Override;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	float LODBias;//[Offset: 0x3c, Size: 0x4]
	bool bUseStableRasterization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bUseStableRasterization_Override;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bScatterSceneLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool bScatterSceneLighting_Override;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	bool bSupportVoxelization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bSupportVoxelization_Override;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	int LODForcedIndex;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: GroomAssetImportData.AssetImportData.Object
	GroomImportOptions* ImportOptions;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: GroomImportOptions.Object
	GroomConversionSettings ConversionSettings;//[Offset: 0x28, Size: 0x18]
	HairGroupsInterpolation[] InterpolationSettings;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: GroomConversionSettings
	Vector Rotation;//[Offset: 0x0, Size: 0xc]
	Vector Scale;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: GroomBlueprintLibrary.BlueprintFunctionLibrary.Object
	GroomBindingAsset* CreateNewGroomBindingAssetWithPath(FString InDesiredPackagePath, GroomAsset* InGroomAsset, SkeletalMesh* InSkeletalMesh, int InNumInterpolationPoints, SkeletalMesh* InSourceSkeletalMeshForTransfer, int InMatchingSection);// 0x5c59e3fee041
	GroomBindingAsset* CreateNewGroomBindingAsset(GroomAsset* InGroomAsset, SkeletalMesh* InSkeletalMesh, int InNumInterpolationPoints, SkeletalMesh* InSourceSkeletalMeshForTransfer, int InMatchingSection);// 0x5c58e3fee041

--------------------------------
Class: GroomCreateBindingOptions.Object
	SkeletalMesh* SourceSkeletalMesh;//[Offset: 0x28, Size: 0x8]
	SkeletalMesh* TargetSkeletalMesh;//[Offset: 0x30, Size: 0x8]
	int NumInterpolationPoints;//[Offset: 0x38, Size: 0x4]
	int MatchingSection;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: GroomCreateFollicleMaskOptions.Object
	int Resolution;//[Offset: 0x28, Size: 0x4]
	int RootRadius;//[Offset: 0x2c, Size: 0x4]
	FollicleMaskOptions[] Grooms;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: FollicleMaskOptions
	GroomAsset* Groom;//[Offset: 0x0, Size: 0x8]
	enum Channel;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GroomCreateStrandsTexturesOptions.Object
	int Resolution;//[Offset: 0x28, Size: 0x4]
	enum TraceType;//[Offset: 0x2c, Size: 0x1]
	float TraceDistance;//[Offset: 0x30, Size: 0x4]
	enum MeshType;//[Offset: 0x34, Size: 0x1]
	StaticMesh* StaticMesh;//[Offset: 0x38, Size: 0x8]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x40, Size: 0x8]
	int LODIndex;//[Offset: 0x48, Size: 0x4]
	int SectionIndex;//[Offset: 0x4c, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x50, Size: 0x4]
	int[] GroupIndex;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: GroomHairGroupsPreview.Object
	GroomHairGroupPreview[] Groups;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GroomHairGroupPreview
	int GroupID;//[Offset: 0x0, Size: 0x4]
	int CurveCount;//[Offset: 0x4, Size: 0x4]
	int GuideCount;//[Offset: 0x8, Size: 0x4]
	HairGroupsInterpolation InterpolationSettings;//[Offset: 0xc, Size: 0x14]

--------------------------------
Class: NiagaraDataInterfaceHairStrands.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	GroomAsset* DefaultSource;//[Offset: 0x38, Size: 0x8]
	Actor* SourceActor;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfacePhysicsAsset.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	PhysicsAsset* DefaultSource;//[Offset: 0x38, Size: 0x8]
	Actor* SourceActor;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceVelocityGrid.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector GridSize;//[Offset: 0xd8, Size: 0xc]

--------------------------------
Class: NiagaraDataInterfacePressureGrid.NiagaraDataInterfaceVelocityGrid.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: MFBenchmarkManager.Actor.Object
	bool bTickTrs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	void PerformBenchmark();// 0x5c5ce3fee041

--------------------------------
Class: MFBenchmarkMarker.NavigationObjectBase.Actor.Object
	FName GamePerfPositionTag;//[Offset: 0x304, Size: 0x8]

--------------------------------
Class: MFMarkerDataWriter.Actor.Object
	DataTable* TargetTable;//[Offset: 0x2e0, Size: 0x8]
	void WriteTestData();// 0x5c5ee3fee041
	void WriteMarkerData();// 0x5c5de3fee041

--------------------------------
Class: MFStatCollectCore.Object
	void InitAndCollect(World* InWorld);// 0x5c5fe3fee041

--------------------------------
Class: MFStatisticDataCollectCore.Object
	SceneObjeInfo_Base[] SceneInfoCollect;//[Offset: 0x28, Size: 0x10]
	void CookAllSceneInfoToSceneObjData(Actor* ConvertParent);// 0x5c61e3fee041
	void CollectSceneInfo(World* InWorld);// 0x5c60e3fee041

--------------------------------
Class: SceneObjeInfo_Base

--------------------------------
Class: MFStatisticDataCollectCore_SMBound.MFStatisticDataCollectCore.Object
	SceneObjInfo_StaticMeshActor[] SceneInfoCollect_SM;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SceneObjInfo_StaticMeshActor.SceneObjeInfo_Base
	StaticMesh* MeshResource;//[Offset: 0x38, Size: 0x8]
	MaterialInterface* MainMat;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: MFStatisticDataCollectCore_RenderObjCount.MFStatisticDataCollectCore.Object
	SceneObjInfo_RenderObj[] SceneInfoCollect_RenderObj;//[Offset: 0x38, Size: 0x10]
	bool bIncludeFoliage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bCollectCenterMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	enum RenderObjType;//[Offset: 0x4a, Size: 0x1]

--------------------------------
Class: SceneObjInfo_RenderObj.SceneObjeInfo_Base
	StaticMesh* MeshResource;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MFStatisticDataCollectCore_Foliage.MFStatisticDataCollectCore.Object
	SceneObjInfo_Foliage[] SceneInfoCollect_Foliage;//[Offset: 0x38, Size: 0x10]
	enum MyCollectType;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: SceneObjInfo_Foliage.SceneObjeInfo_Base
	StaticMesh* MeshResource;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MFStatisticDataVisualizeActor.Actor.Object
	class MFStatisticDataCollectCore* DataCollecterClass;//[Offset: 0x2e0, Size: 0x8]
	class MFStatCollectCore* StatCollectClass;//[Offset: 0x2e8, Size: 0x8]
	StaticMesh* PixelMesh;//[Offset: 0x2f0, Size: 0x8]
	float PixelSize;//[Offset: 0x2f8, Size: 0x4]
	Actor* StartAnchor;//[Offset: 0x300, Size: 0x8]
	Actor* EndAnchor;//[Offset: 0x308, Size: 0x8]
	float DataUpperLimit;//[Offset: 0x310, Size: 0x4]
	float DataLowerLimit;//[Offset: 0x314, Size: 0x4]
	int XCountCache;//[Offset: 0x318, Size: 0x4]
	int YCountCache;//[Offset: 0x31c, Size: 0x4]
	float[] DataCache;//[Offset: 0x320, Size: 0x10]
	Vector4[] DataCache_FourDir;//[Offset: 0x330, Size: 0x10]
	MaterialInterface*[] ColorLevelMaterial;//[Offset: 0x340, Size: 0x10]
	class Actor* MarkerClass;//[Offset: 0x350, Size: 0x8]
	FString NewLine;//[Offset: 0x358, Size: 0x10]
	void TestToggleFoliage();// 0x5c72e3fee041
	void PushDataToCell_ForDir(float Data, Vector Pos, float RotZ);// 0x5c71e3fee041
	void PushDataToCell(float Data, Vector Pos);// 0x5c70e3fee041
	void InitDataFromBorder();// 0x5c6fe3fee041
	void GetXYCountFromBorder(out int XCount, out int YCount);// 0x5c6ee3fee041
	Vector GetPosFromID(int ID);// 0x5c6de3fee041
	MaterialInterface* GetMaterialFromColorLevel(int Level);// 0x5c6ce3fee041
	int GetIDFromPos(Vector Pos);// 0x5c6be3fee041
	int GetColorLevelFromData(float Data);// 0x5c6ae3fee041
	float GetCellDataFromPos(Vector Pos);// 0x5c69e3fee041
	Vector4 GetCellData_WithDir_FromPos(Vector Pos);// 0x5c68e3fee041
	void FlushVisualBox_WithDir();// 0x5c67e3fee041
	void FlushVisualBox();// 0x5c66e3fee041
	void FillDataFromSceneObj();// 0x5c65e3fee041
	void FillAreaWithMarker();// 0x5c64e3fee041
	void ExportDataPoints();// 0x5c63e3fee041
	void CollectStatData();// 0x5c62e3fee041

--------------------------------
Class: MFClimateActor.Actor.Object
	MFClimateWorldSubSystem* System;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: MFClimateWorldSubSystem.WorldSubsystem.Subsystem.Object
	Object*[] DuplicatedFeatures;//[Offset: 0x90, Size: 0x10]
	Object*[] FeatureTable;//[Offset: 0xa0, Size: 0x10]
	MaterialParameterCollection* PublicMPC;//[Offset: 0xc0, Size: 0x8]
	MaterialParameterCollectionInstance* MPCI;//[Offset: 0xc8, Size: 0x8]
	MFClimateGlobalWindComponent* GetWindComponent();// 0x5d18e3fee041
	MFClimateWeatherLayerPresetsComponent* GetWeatherLayerPresetComponent();// 0x5d17e3fee041
	MFClimateWeatherComponent* GetWeatherComponent();// 0x5d16e3fee041
	MFClimateVolumeCloudComponent* GetVolumeCloud();// 0x5d15e3fee041
	MFClimateTimeGeographyComponent* GetTimeAndGeographyComponent();// 0x5d14e3fee041
	MFClimateSceneLightInterfaceComponent* GetSceneLightInterface();// 0x5d13e3fee041
	MFClimateRain* GetRain();// 0x5d12e3fee041
	Object* GetFeature(class Object FeatureType);// 0x5d11e3fee041
	MFClimateSkyAtmosphereComponent* GetClimateSkyAtmosphere();// 0x5d10e3fee041

--------------------------------
Class: MFClimateGlobalWindComponent.MFClimateComponent.ActorComponent.Object
	Vector2D Direction;//[Offset: 0xd0, Size: 0x8]
	float Level;//[Offset: 0xd8, Size: 0x4]
	Vector2D WindTravel;//[Offset: 0xdc, Size: 0x8]
	void SetWindLevel(float WindLevel);// 0x5c95e3fee041
	void SetWindDirection(Vector2D WindDir);// 0x5c94e3fee041
	Vector2D GetWindVelocityInMeter();// 0x5c93e3fee041
	Vector2D GetWindTravel();// 0x5c92e3fee041
	float GetWindLevel();// 0x5c91e3fee041
	Vector2D GetWindDirection();// 0x5c90e3fee041

--------------------------------
Class: MFClimateComponent.ActorComponent.Object
	MFClimateWorldSubSystem* System;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: MFClimateWeatherLayerPresetsComponent.MFClimateComponent.ActorComponent.Object
	MFClimateLayerPreset[] ActivatedPresets;//[Offset: 0xd0, Size: 0x10]
	MFClimateWeatherComponent* WeatherComponent;//[Offset: 0xe0, Size: 0x8]
	void UpdateLayerWeights(bool bEvaluateImmediately);// 0x5d0de3fee041
	void SetPresetWeights(out const float[] Weights, bool bEvaluateImmediately);// 0x5d0ce3fee041
	void SetPresetWeightByName(FString PresetName, float NewWeight, bool bEvaluateImmediately);// 0x5d0be3fee041
	void SetPresetWeight(int PresetID, float NewWeight, bool bEvaluateImmediately);// 0x5d0ae3fee041
	int SaveCurrentLayersAsPreset(int PresetID);// 0x5d09e3fee041
	float GetPresetWeight(int PresetID);// 0x5d08e3fee041
	FString GetPresetName(int PresetID);// 0x5d07e3fee041
	int GetPresetCount();// 0x5d06e3fee041
	void AddPresetWeight(int PresetID, float DeltaWeight);// 0x5d05e3fee041

--------------------------------
Class: MFClimateLayerPreset
	FString PresetName;//[Offset: 0x0, Size: 0x10]
	MFClimateWeatherLayerPresetItem[] Items;//[Offset: 0x10, Size: 0x10]
	float Weight;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: MFClimateWeatherLayerPresetItem
	LevelSequence* Sequence;//[Offset: 0x0, Size: 0x8]
	float Weight;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MFClimateWeatherComponent.MFClimateComponent.ActorComponent.Object
	MFClimateWeatherLayerSceneBindings* SceneBindings;//[Offset: 0xd0, Size: 0x8]
	MFClimateWeatherLayer[] Layers;//[Offset: 0xd8, Size: 0x10]
	bool bBindingsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	void SetSequenceWeight(LevelSequence* Sequence, float NewWeight);// 0x5d04e3fee041
	float GetSequenceCurrentWeight(LevelSequence* Sequence);// 0x5d03e3fee041
	void EvaluateWeatherLayers();// 0x5d02e3fee041
	void BlendInSequencesAndFadeOthers(LevelSequence*[] ToBlendIn, float MaxDelta);// 0x5d01e3fee041
	void AddSequenceWeight(LevelSequence* Sequence, float Delta);// 0x5d00e3fee041

--------------------------------
Class: MFClimateWeatherLayerSceneBindings.Info.Actor.Object
	<FName,Actor*> PersistentMappings_New;//[Offset: 0x2f8, Size: 0x50]

--------------------------------
Class: MFClimateWeatherLayer
	float BlendWeight;//[Offset: 0x0, Size: 0x4]
	LevelSequence* TimeOfDaySequence;//[Offset: 0x8, Size: 0x8]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	enum EvaluationMode;//[Offset: 0x14, Size: 0x4]
	bool bIgnorePresetSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: MFClimateVolumeCloudComponent.MFClimateComponent.ActorComponent.Object
	bool bAutoColorFromSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	LinearColor SunColorTop;//[Offset: 0xd4, Size: 0x10]
	LinearColor SunColorBottom;//[Offset: 0xe4, Size: 0x10]
	Vector SunDirection;//[Offset: 0xf4, Size: 0xc]
	LinearColor CloudAmbientGround;//[Offset: 0x100, Size: 0x10]
	LinearColor CloudAmbientSky;//[Offset: 0x110, Size: 0x10]
	float PreExposureSmoothness;//[Offset: 0x120, Size: 0x4]
	bool bAutoWindFromSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	float SystemWindMultiplier;//[Offset: 0x128, Size: 0x4]
	Vector2D CloudWind;//[Offset: 0x12c, Size: 0x8]
	float CloudVerticalWind;//[Offset: 0x134, Size: 0x4]
	MFClimateWeatherMapGenerator* WeatherMapGenerator;//[Offset: 0x138, Size: 0x8]
	Texture* CustomWeatherMap;//[Offset: 0x140, Size: 0x8]
	float CustomWeatherMapSize;//[Offset: 0x148, Size: 0x4]
	MFClimateCloudProfile* CloudProfile;//[Offset: 0x150, Size: 0x8]
	MFClimateCloudSettings CloudSettings;//[Offset: 0x158, Size: 0x8c]
	bool bInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 0x1]
	float HibernateUpdateRemain;//[Offset: 0x3f0, Size: 0x4]
	MFClimateCloudNoiseGroupPlatformSwitcher* NoiseGroupSwitcher;//[Offset: 0x3f8, Size: 0x8]
	TextureRenderTarget2D* MSApproxRT;//[Offset: 0x400, Size: 0x8]
	TextureRenderTarget2D* RaymarchRTFull;//[Offset: 0x408, Size: 0x8]
	TextureRenderTarget2D* RaymarchRTCheckerboard;//[Offset: 0x410, Size: 0x8]
	TextureRenderTarget2D* ResolveRT;//[Offset: 0x418, Size: 0x8]
	void UpdateSceneProxyParameters();// 0x5cffe3fee041
	Texture* GetRaymarchResult();// 0x5cfee3fee041

--------------------------------
Class: MFClimateWeatherMapGenerator.Actor.Object
	bool bRefreshEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	int WeatherMapScaleInKM;//[Offset: 0x2e4, Size: 0x4]
	TextureRenderTarget2D* OutputTarget;//[Offset: 0x2e8, Size: 0x8]
	float GlobalCoverage;//[Offset: 0x300, Size: 0x4]
	float GlobalCloudType;//[Offset: 0x304, Size: 0x4]
	bool bGeometryDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool bRenderingDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	void SetGlobalCoverage(float NewValue);// 0x5d0fe3fee041
	void SetGlobalCloudType(float NewValue);// 0x5d0ee3fee041

--------------------------------
Class: MFClimateCloudProfile.DataAsset.Object
	MFClimateCloudTypeDescriptor[] TypeDescriptors;//[Offset: 0x30, Size: 0x10]
	Texture2D* LUT0;//[Offset: 0x40, Size: 0x8]
	uint32 LUT0SizeX;//[Offset: 0x48, Size: 0x4]
	uint32 LUT0SizeY;//[Offset: 0x4c, Size: 0x4]
	float LUTMSApproxMaxOpticalDepth;//[Offset: 0x50, Size: 0x4]
	float LUTMSApproxRangeCompress;//[Offset: 0x54, Size: 0x4]
	uint32 LUTMSApproxSizeX;//[Offset: 0x58, Size: 0x4]
	uint32 LUTMSApproxSizeY;//[Offset: 0x5c, Size: 0x4]
	uint32 LUTMSApproxIterationCount;//[Offset: 0x60, Size: 0x4]
	float CloudMSApproxA;//[Offset: 0x64, Size: 0x4]
	float CloudMSApproxB;//[Offset: 0x68, Size: 0x4]
	float CloudMSApproxC;//[Offset: 0x6c, Size: 0x4]
	float CloudMSApproxLobeG1;//[Offset: 0x70, Size: 0x4]
	float CloudMSApproxLobeG2;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: MFClimateCloudTypeDescriptor
	float TypeWeight;//[Offset: 0x0, Size: 0x4]
	RuntimeFloatCurve BaseNoiseCenter;//[Offset: 0x8, Size: 0x88]
	RuntimeFloatCurve BaseNoiseVariation;//[Offset: 0x90, Size: 0x88]
	RuntimeFloatCurve ExtinctionScale;//[Offset: 0x118, Size: 0x88]
	RuntimeFloatCurve Erosion;//[Offset: 0x1a0, Size: 0x88]

--------------------------------
Class: MFClimateCloudSettings
	float CloudBaseTilingVertical;//[Offset: 0x0, Size: 0x4]
	float CloudBaseTilingHorizontal;//[Offset: 0x4, Size: 0x4]
	float CloudDetailTiling;//[Offset: 0x8, Size: 0x4]
	float CloudDetailStrength;//[Offset: 0xc, Size: 0x4]
	float CloudCurlStrength;//[Offset: 0x10, Size: 0x4]
	float CloudCurlTiling;//[Offset: 0x14, Size: 0x4]
	float DetailWindMultiply;//[Offset: 0x18, Size: 0x4]
	float CloudBottomHeight;//[Offset: 0x1c, Size: 0x4]
	float CloudThickness;//[Offset: 0x20, Size: 0x4]
	float CloudDetailFadeStart;//[Offset: 0x24, Size: 0x4]
	float CloudDetailFadeEnd;//[Offset: 0x28, Size: 0x4]
	float HorizonAARange;//[Offset: 0x2c, Size: 0x4]
	float HorizonAAValue;//[Offset: 0x30, Size: 0x4]
	LinearColor CloudAlbedo;//[Offset: 0x34, Size: 0x10]
	float CloudExtinction;//[Offset: 0x44, Size: 0x4]
	float CloudFirstLobeG;//[Offset: 0x48, Size: 0x4]
	float CloudSecondLobeG;//[Offset: 0x4c, Size: 0x4]
	float MaxShadowRayLength;//[Offset: 0x50, Size: 0x4]
	float ShadowAttenuation;//[Offset: 0x54, Size: 0x4]
	float CloudAmbientOcclusionSky;//[Offset: 0x58, Size: 0x4]
	float CloudAmbientOcclusionGround;//[Offset: 0x5c, Size: 0x4]
	float CloudOpacityScale;//[Offset: 0x60, Size: 0x4]
	LinearColor CloudEmissive;//[Offset: 0x64, Size: 0x10]
	LinearColor LightningTint;//[Offset: 0x74, Size: 0x10]
	float EarthShadowSharpness;//[Offset: 0x84, Size: 0x4]
	float InscatteringBrightness;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: MFClimateCloudNoiseGroupPlatformSwitcher.DataAsset.Object
	MFClimateCloudNoiseGroup* CookedAsset;//[Offset: 0x30, Size: 0x8]
	void UpdateAllNoise();// 0x5c8fe3fee041

--------------------------------
Class: MFClimateCloudNoiseGroup.DataAsset.Object
	MFClimatePlatformNoiseGenerationSettings PlatformSettings;//[Offset: 0x30, Size: 0x38]
	VolumeTexture* SavedBaseNoise;//[Offset: 0x68, Size: 0x8]
	VolumeTexture* SavedDetailNoise;//[Offset: 0x70, Size: 0x8]
	Texture2D* SavedBaseNoise2D;//[Offset: 0x78, Size: 0x8]
	Texture2D* SavedDetailNoise2D;//[Offset: 0x80, Size: 0x8]
	Texture2D* SavedWeatherMapNoise;//[Offset: 0x88, Size: 0x8]
	Texture2D* SavedCurlNoise;//[Offset: 0x90, Size: 0x8]
	void CreateAssets();// 0x5c8ee3fee041

--------------------------------
Class: MFClimatePlatformNoiseGenerationSettings
	IntVector BaseNoiseTextureSize;//[Offset: 0x0, Size: 0xc]
	IntVector DetailNoiseTextureSize;//[Offset: 0xc, Size: 0xc]
	IntPoint BaseNoise2DTextureSize;//[Offset: 0x18, Size: 0x8]
	IntPoint DetailNoise2DTextureSize;//[Offset: 0x20, Size: 0x8]
	IntPoint WeatherMapNoiseTextureSize;//[Offset: 0x28, Size: 0x8]
	IntPoint CurlNoiseTextureSize;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: MFClimateTimeGeographyComponent.MFClimateComponent.ActorComponent.Object
	float TimeZone;//[Offset: 0xd0, Size: 0x4]
	float YearPercent;//[Offset: 0xd4, Size: 0x4]
	float TimeOfDay;//[Offset: 0xd8, Size: 0x4]
	float Longitude;//[Offset: 0xdc, Size: 0x4]
	float Latitude;//[Offset: 0xe0, Size: 0x4]
	float EarthAxialTilt;//[Offset: 0xe4, Size: 0x4]
	float EarthRadiusKM;//[Offset: 0xe8, Size: 0x4]
	Vector2D SceneNorthVector;//[Offset: 0xec, Size: 0x8]
	bool bAutoStepTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	bool bAutoStepInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 0x1]
	float AutoStepTimeRate;//[Offset: 0xf8, Size: 0x4]
	bool bUseRealWorldTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	Vector TransformSceneVectorToEcliptic(Vector Vector);// 0x5cf4e3fee041
	Vector TransformEclipticVectorToScene(Vector Vector);// 0x5cf3e3fee041
	void StepTimeOfDay(float DeltaHour);// 0x5cf2e3fee041
	float SetYearPercentFromMonthAndDay(int InMonth, int InDay);// 0x5cf1e3fee041
	void SetYearPercent(float NewValue);// 0x5cf0e3fee041
	void SetUseRealWorldTime(bool InValue);// 0x5cefe3fee041
	void SetTimeZone(float NewValue);// 0x5ceee3fee041
	void SetTimeOfDay(float NewValue);// 0x5cede3fee041
	void SetNorthVector(Vector2D NewNorthVector);// 0x5cece3fee041
	void SetLongitude(float NewValue);// 0x5cebe3fee041
	void SetLatitude(float NewValue);// 0x5ceae3fee041
	void SetEarthRadiusKM(float NewValue);// 0x5ce9e3fee041
	void SetEarthAxialTilt(float NewValue);// 0x5ce8e3fee041
	void SetAutoStepTimeRate(float InValue);// 0x5ce7e3fee041
	void SetAutoStepTime(bool InValue);// 0x5ce6e3fee041
	float GetYearPercent();// 0x5ce5e3fee041
	bool GetUseRealWorldTime();// 0x5ce4e3fee041
	float GetTimeZone();// 0x5ce3e3fee041
	float GetTimeOfDay();// 0x5ce2e3fee041
	float GetSunRotationProgressPingPong();// 0x5ce1e3fee041
	float GetSunRotationProgress();// 0x5ce0e3fee041
	float GetSunHorizonAngle();// 0x5cdfe3fee041
	Matrix GetSceneToEclipticMatrix();// 0x5cdee3fee041
	Vector2D GetNorthVector();// 0x5cdde3fee041
	void GetMonthAndDay(out int OutMonth, out int OutDay);// 0x5cdce3fee041
	float GetLongitude();// 0x5cdbe3fee041
	float GetLatitude();// 0x5cdae3fee041
	Matrix GetEclipticToSceneMatrix();// 0x5cd9e3fee041
	Vector2D GetEastVector();// 0x5cd8e3fee041
	float GetEarthRadiusKM();// 0x5cd7e3fee041
	float GetEarthAxialTilt();// 0x5cd6e3fee041
	float GetAutoStepTimeRate();// 0x5cd5e3fee041
	bool GetAutoStepTime();// 0x5cd4e3fee041
	void CalculateEclipticToSceneMatrixAtTimeOfDay(float InTimeOfDay, float InYearPercent, out Rotator OutEarthToEclipticRotator, out Matrix OutSceneToEarthMatrix, out Matrix OutSceneToEclipticMatrix, out Matrix OutEclipticToSceneMatrix);// 0x5cd3e3fee041

--------------------------------
Class: MFClimateSceneLightInterfaceComponent.MFClimateComponent.ActorComponent.Object
	bool bHasMainLightControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	float MobileForceUpdateTimer;//[Offset: 0xd4, Size: 0x4]
	bool GetMainLight(out DirectionalLightComponent* OutLightComponent);// 0x5c9ae3fee041
	bool GetLightInfoForLightingCloud(out Vector OutDir, float BottomHeight, out LinearColor OutColorBottom, float TopHeight, out LinearColor OutColorTop);// 0x5c99e3fee041
	LinearColor GetGroundLevelIrradiance();// 0x5c98e3fee041
	bool GetCloudLightingAtHeight(float Height, out Vector LightDir, out LinearColor Color);// 0x5c97e3fee041
	bool GetAtmosphereLight(out Vector OutDir, out LinearColor OutColoredBrightness, int LightIndex);// 0x5c96e3fee041

--------------------------------
Class: MFClimateRain.MFClimateActor.Actor.Object
	float PuddleDisturbSpeed;//[Offset: 0x2ec, Size: 0x4]
	float PuddleDisturbTiling;//[Offset: 0x2f0, Size: 0x4]
	float PuddleDisturbStrength;//[Offset: 0x2f4, Size: 0x4]
	float PuddleRippleStrength;//[Offset: 0x2f8, Size: 0x4]
	Vector4 PuddleRippleFrequencies;//[Offset: 0x300, Size: 0x10]
	float PuddleRippleTiling;//[Offset: 0x310, Size: 0x4]
	float AmountOfRain;//[Offset: 0x314, Size: 0x4]
	float Accumulation;//[Offset: 0x318, Size: 0x4]
	bool bRainAutoUpdateAccumulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	float AccumulateSpeed;//[Offset: 0x320, Size: 0x4]
	float DecaySpeed;//[Offset: 0x324, Size: 0x4]
	float WindTiltMultiplier;//[Offset: 0x328, Size: 0x4]
	MFClimatePlayerTransformComponent* PlayerPosition;//[Offset: 0x330, Size: 0x8]
	MFClimatePlayerTransformComponent* PlayerRotation;//[Offset: 0x338, Size: 0x8]
	SceneComponent* WindAlignedPivot;//[Offset: 0x340, Size: 0x8]
	MFClimateRainOcclusionTestComponent* OccludeDetectionComponent;//[Offset: 0x348, Size: 0x8]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	byte DebugType;//[Offset: 0x351, Size: 0x1]
	bool bUseObjectChannels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x352, Size: 0x1]
	byte DetectChannel;//[Offset: 0x353, Size: 0x1]
	byte[] ObjectChannels;//[Offset: 0x358, Size: 0x10]
	float DetectRange;//[Offset: 0x368, Size: 0x4]
	void SetAmountOfRain(float NewValue);// 0x5ca7e3fee041
	void SetAccumulation(float NewValue);// 0x5ca6e3fee041
	void OnParameterUpdated();// 0x5ca5e3fee041
	bool LineTraceRainOcclusion(Vector position, out const Actor*[] ActorsToIgnore, out HitResult OutHitResult);// 0x5ca4e3fee041
	float GetRainOcclusionRate();// 0x5ca3e3fee041
	Vector GetRainDownVector();// 0x5ca2e3fee041
	PhysicalMaterial* GetLastOcclusionMaterial();// 0x5ca1e3fee041
	float GetAmountOfRain();// 0x5ca0e3fee041
	float GetAccumulation();// 0x5c9fe3fee041

--------------------------------
Class: MFClimatePlayerTransformComponent.SceneComponent.ActorComponent.Object
	bool bCameraOrPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202, Size: 0x1]
	bool bSyncPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x203, Size: 0x1]
	bool bSyncRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 0x1]

--------------------------------
Class: MFClimateRainOcclusionTestComponent.SceneComponent.ActorComponent.Object
	bool bOnlyDetectWhenMoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202, Size: 0x1]
	PhysicalMaterial* LastOccludePhysicalMaterial;//[Offset: 0x208, Size: 0x8]
	float OcclusionRate;//[Offset: 0x210, Size: 0x4]
	MFClimateWorldSubSystem* System;//[Offset: 0x218, Size: 0x8]
	float GetOcclusionRate();// 0x5cade3fee041
	PhysicalMaterial* GetLastOccludeMaterial();// 0x5cace3fee041

--------------------------------
Class: MFClimateSkyAtmosphereComponent.MFClimateComponent.ActorComponent.Object
	SkyAtmosphereComponent* RawSkyAtmosphere;//[Offset: 0x308, Size: 0x8]
	LinearColor SkyAtmosphereTransmittanceAtZenith;//[Offset: 0x310, Size: 0x10]
	LinearColor SkyAtmosphereTransmittanceCurrent;//[Offset: 0x320, Size: 0x10]
	Texture2D* CpuSkyAtmosphereSkyTex;//[Offset: 0x340, Size: 0x8]
	Texture2D* CpuSkyAtmosphereTransmittanceTex;//[Offset: 0x348, Size: 0x8]

--------------------------------
Class: MFClimateBakeModeComponent.MFClimateComponent.ActorComponent.Object
	MFClimateBaseBakeProcedure*[] RegisteredBakeProcedures;//[Offset: 0xd8, Size: 0x10]
	bool bBakeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	MFClimateBaseBakeProcedure* RunningBakeProcedure;//[Offset: 0x150, Size: 0x8]
	void RunBakeProcedure(MFClimateBaseBakeProcedure* BakeProcedure);// 0x5c76e3fee041
	bool IsBakeMode();// 0x5c75e3fee041
	void BakeUpdate();// 0x5c74e3fee041
	void AbortBakeProcedure();// 0x5c73e3fee041

--------------------------------
Class: MFClimateBaseBakeProcedure.Object
	bool bEditorOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	MFClimateBakeModeComponent* Baker;//[Offset: 0x30, Size: 0x8]
	bool bBakeDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	void TickBaking();// 0x5c7de3fee041
	void OnFinalizeBaking();// 0x5c7ce3fee041
	void OnBeginBake();// 0x5c7be3fee041
	void OnAbortBaking();// 0x5c7ae3fee041
	bool IsBakingDone();// 0x5c79e3fee041
	void FinishBaking();// 0x5c78e3fee041
	void BakeUpdate();// 0x5c77e3fee041

--------------------------------
Class: MFClimateBakeMode.Actor.Object
	MFClimateBakeModeComponent* BakeMode;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: MFClimateBakeProcedure.MFClimateBaseBakeProcedure.Object
	float[] TodsToBake;//[Offset: 0x40, Size: 0x10]
	bool bIterateWeatherPresets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bHideCelestials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bHideLightning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool bHideRain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]
	float PrepareTime;//[Offset: 0x54, Size: 0x4]
	bool bDisableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bDisableRealTimeSkyLightTimeSlicing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	int OuterLoopCount;//[Offset: 0x5c, Size: 0x4]
	int CurrentOuterLoop;//[Offset: 0x60, Size: 0x4]
	int CurrentTODIndex;//[Offset: 0x64, Size: 0x4]
	float CurrentTOD;//[Offset: 0x68, Size: 0x4]
	int CurrentWeatherIndex;//[Offset: 0x6c, Size: 0x4]
	FString CurrentWeatherName;//[Offset: 0x70, Size: 0x10]
	int BackupTimeSlicingEnabled;//[Offset: 0x80, Size: 0x4]
	int BackupVolumetricFog;//[Offset: 0x84, Size: 0x4]
	float BackupTOD;//[Offset: 0x88, Size: 0x4]
	bool bBackupEventProducerActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	float[] BackupWeatherLayers;//[Offset: 0x90, Size: 0x10]
	void SetupBake();// 0x5c7fe3fee041
	void DoBake();// 0x5c7ee3fee041

--------------------------------
Class: MFClimateBaseLightningEventProducer.Object
	MFClimateLightningDirectorComponent* Director;//[Offset: 0x28, Size: 0x8]
	void Tick(float DeltaTime);// 0x5c80e3fee041

--------------------------------
Class: MFClimateLightningDirectorComponent.MFClimateComponent.ActorComponent.Object
	MFClimateLightningChannelActor* InstantiatedLightningActor;//[Offset: 0xd0, Size: 0x8]
	MFClimateLightningEvent ExecutingLightningEvent;//[Offset: 0xd8, Size: 0x20]
	float LightningLeaderProgress;//[Offset: 0xf8, Size: 0x4]
	float CurrentEnergy;//[Offset: 0xfc, Size: 0x4]
	int RemainingReStrike;//[Offset: 0x100, Size: 0x4]
	float ReStrikeTimer;//[Offset: 0x104, Size: 0x4]
	MFClimateBaseLightningEventProducer* EventProducer;//[Offset: 0x108, Size: 0x8]
	class MFClimateLightningChannelActor* LightningChannelType;//[Offset: 0x110, Size: 0x8]
	float LightningFrequency;//[Offset: 0x118, Size: 0x4]
	float ReturnStrikeEnergyMean;//[Offset: 0x11c, Size: 0x4]
	float ReturnStrikeEnergyStdDev;//[Offset: 0x120, Size: 0x4]
	float StrikeEnergyBoost;//[Offset: 0x124, Size: 0x4]
	float LightningDecayAlpha;//[Offset: 0x128, Size: 0x4]
	LinearColor LightningTint;//[Offset: 0x12c, Size: 0x10]
	float EventOverEnergyThreshold;//[Offset: 0x13c, Size: 0x4]
	bool bAllowLightningEventOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	float ReStrikeFrequency;//[Offset: 0x144, Size: 0x4]
	float ReStrikeCountMean;//[Offset: 0x148, Size: 0x4]
	float ReStrikeCountStdDev;//[Offset: 0x14c, Size: 0x4]
	float ReStrikeEnergyMean;//[Offset: 0x150, Size: 0x4]
	float ReStrikeEnergyStdDev;//[Offset: 0x154, Size: 0x4]
	float ReStrikeTickInterval;//[Offset: 0x158, Size: 0x4]
	float LightningLeaderDuration;//[Offset: 0x15c, Size: 0x4]
	float LightningLeaderRelativeEv;//[Offset: 0x160, Size: 0x4]
	bool bRelativeToCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 0x1]
	float LightningCloudLayerHeight;//[Offset: 0x168, Size: 0x4]
	float MaxDistance;//[Offset: 0x16c, Size: 0x4]
	float MinDistance;//[Offset: 0x170, Size: 0x4]
	float MaxGroundOffset;//[Offset: 0x174, Size: 0x4]
	MFClimateBaseLightningLightControl* LightControl;//[Offset: 0x178, Size: 0x8]
	float SceneLightEVScale;//[Offset: 0x180, Size: 0x4]
	bool bDevelopmentModeEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	bool bDevelopmentModeAutoLightning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 0x1]
	bool bEventProducerActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x186, Size: 0x1]
	delegate OnLightningEventRegistered;//[Offset: 0x188, Size: 0x10]
	delegate OnLightningStrike;//[Offset: 0x198, Size: 0x10]
	void SetReStrikeRandomSeed(int Seed);// 0x1e0ce3fee041
	void RegisterLightningEventDetermined(out const MFClimateLightningEvent Evt, int RandomSeed);// 0x1e0be3fee041
	void RegisterLightningEvent(out const MFClimateLightningEvent Evt);// 0x1e0ae3fee041
	void LightningStrikeEventDelegate__DelegateSignature(out const MFClimateLightningEvent Event, float NormStrikeEnergy);// 0x1e09e3fee041
	bool LightningEventGoingOn();// 0x1e08e3fee041
	void LightningEventDelegate__DelegateSignature(out const MFClimateLightningEvent Event);// 0x1e06e3fee041
	float GetSceneLightIntensityScale();// 0x1e05e3fee041
	float GetSceneLightEVScale();// 0x1e04e3fee041
	float GetReStrikeCountStdDev();// 0x1e03e3fee041
	float GetReStrikeCountMean();// 0x1e02e3fee041
	float GetMinDistance();// 0x1e01e3fee041
	float GetMaxGroundOffset();// 0x1e00e3fee041
	float GetMaxDistance();// 0x1dffe3fee041
	bool GetLocalToCamera();// 0x1dfee3fee041
	LinearColor GetLightningTint();// 0x1dfde3fee041
	float GetLightningFrequency();// 0x1dfce3fee041
	MFClimateLightningChannelActor* GetLightningChannelActor();// 0x1dfbe3fee041
	Vector2D GetEnergyNormalDistribution();// 0x1dfae3fee041
	void DevelopmentModeCallLightning();// 0x1df9e3fee041

--------------------------------
Class: MFClimateLightningEvent
	Vector StartPosition;//[Offset: 0x0, Size: 0xc]
	Vector EndPosition;//[Offset: 0xc, Size: 0xc]
	float NormalizedReturnStrikeEnergy;//[Offset: 0x18, Size: 0x4]
	int ReStrikeCount;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: MFClimateLightningChannelActor.Actor.Object
	Material* LightningMaterial;//[Offset: 0x2e0, Size: 0x8]
	MaterialInstanceDynamic* Mid;//[Offset: 0x2e8, Size: 0x8]
	MFClimateFractalLightningGenerateParams Params;//[Offset: 0x2f0, Size: 0x34]
	ProceduralMeshComponent* PMC;//[Offset: 0x328, Size: 0x8]
	float Width;//[Offset: 0x330, Size: 0x4]
	float MinObserveDegree;//[Offset: 0x334, Size: 0x4]
	bool bEnableMockRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	float MockRange;//[Offset: 0x33c, Size: 0x4]
	void RefreshChannel(Vector Start, Vector End, int RandomSeed);// 0x5c9de3fee041
	void GenerateFractalTree();// 0x5c9ce3fee041

--------------------------------
Class: MFClimateFractalLightningGenerateParams
	int RandomSeed;//[Offset: 0x0, Size: 0x4]
	float InitialBranchProb;//[Offset: 0x4, Size: 0x4]
	float BranchProbAttenuation;//[Offset: 0x8, Size: 0x4]
	Vector TargetOffset;//[Offset: 0xc, Size: 0xc]
	float MinSegmentLength;//[Offset: 0x18, Size: 0x4]
	int MaxFracTimes;//[Offset: 0x1c, Size: 0x4]
	float WidthFactor;//[Offset: 0x20, Size: 0x4]
	float BranchShortenFactor;//[Offset: 0x24, Size: 0x4]
	Vector2D MinMaxBranchLiftAngleDegrees;//[Offset: 0x28, Size: 0x8]
	float MinChannelCreationDistance;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: MFClimateBaseLightningLightControl.Object
	MFClimateLightningDirectorComponent* Director;//[Offset: 0x28, Size: 0x8]
	void UpdateLightControl(out const MFClimateLightningEvent LightningEvent, const float NormalizedEnergy, out const LinearColor LightningTint);// 0x5c81e3fee041

--------------------------------
Class: MFClimateCelestialOrbit.SceneComponent.ActorComponent.Object
	enum OrbitType;//[Offset: 0x204, Size: 0x4]
	byte SatelliteOrbitFrequencyYear;//[Offset: 0x208, Size: 0x1]
	float AscendingNodeLongitude;//[Offset: 0x20c, Size: 0x4]
	float OrbitalInclination;//[Offset: 0x210, Size: 0x4]
	float OrbitOffset;//[Offset: 0x214, Size: 0x4]
	float DistantOrbitLatitude;//[Offset: 0x218, Size: 0x4]
	float DistantOrbitLongitude;//[Offset: 0x21c, Size: 0x4]
	float ExtraHorizontalOffset;//[Offset: 0x220, Size: 0x4]
	Rotator CelestialRotation;//[Offset: 0x224, Size: 0xc]
	Rotator CelestialPosition;//[Offset: 0x230, Size: 0xc]
	Rotator CelestialToEarthEcliptic;//[Offset: 0x23c, Size: 0xc]
	Rotator GetCelestialToEarthEcliptic();// 0x5c85e3fee041
	Rotator GetCelestialRotationInScene();// 0x5c84e3fee041
	Rotator GetCelestialPositionInScene();// 0x5c83e3fee041
	Vector GetCelestialFacingSceneDirection();// 0x5c82e3fee041

--------------------------------
Class: MFClimateCelestialBody.Actor.Object
	bool bSpriteMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	Color Color;//[Offset: 0x2e4, Size: 0x4]
	float Intensity;//[Offset: 0x2e8, Size: 0x4]
	float AngularDiameter;//[Offset: 0x2ec, Size: 0x4]
	float Distance;//[Offset: 0x2f0, Size: 0x4]
	MFClimateCelestialOrbit* OrbitComponent;//[Offset: 0x2f8, Size: 0x8]
	SceneComponent* RotatedPivot;//[Offset: 0x300, Size: 0x8]
	void SystemTexturesRefreshed();// 0x5c8de3fee041
	void SetIntensity(float NewValue);// 0x5c8ce3fee041
	void SetColor(Color NewValue);// 0x5c8be3fee041
	MFClimateCelestialOrbit* GetOrbitComponent();// 0x5c8ae3fee041
	LinearColor GetIrradiance();// 0x5c89e3fee041
	float GetIntensity();// 0x5c88e3fee041
	Color GetColor();// 0x5c87e3fee041
	Vector GetCenterDir();// 0x5c86e3fee041

--------------------------------
Class: MFClimateCirrusCloud.MFClimateComponent.ActorComponent.Object
	bool bAutoColorFromSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	LinearColor EnvironmentLightColor;//[Offset: 0xd4, Size: 0x10]
	Vector EnvironmentLightDir;//[Offset: 0xe4, Size: 0xc]
	float Height;//[Offset: 0xf0, Size: 0x4]
	float Fill;//[Offset: 0xf4, Size: 0x4]
	Color Albedo;//[Offset: 0xf8, Size: 0x4]
	LinearColor Emissive;//[Offset: 0xfc, Size: 0x10]
	float ExtinctionCoefficient;//[Offset: 0x10c, Size: 0x4]
	float FirstLobeG;//[Offset: 0x110, Size: 0x4]
	float SecondLobeG;//[Offset: 0x114, Size: 0x4]

--------------------------------
Class: MFClimateSimpleSetup.Actor.Object
	class MFClimateBaseSkyMesh* SkySphereType;//[Offset: 0x2e0, Size: 0x8]
	DirectionalLight* BindSun;//[Offset: 0x2e8, Size: 0x8]
	MFClimateBaseSkyMesh* SunSky;//[Offset: 0x2f0, Size: 0x8]
	MFClimateVolumeCloudComponent* VolumeCloud;//[Offset: 0x2f8, Size: 0x8]
	MFClimateSingleSceneLightComponent* SceneLight;//[Offset: 0x300, Size: 0x8]
	MFClimateSkyAtmosphereComponent* SkyAtmosphereComponent;//[Offset: 0x308, Size: 0x8]
	MFClimateTimeGeographyComponent* TimeAndGeographyComponent;//[Offset: 0x310, Size: 0x8]

--------------------------------
Class: MFClimateBaseSkyMesh.Actor.Object
	bool bCenterAtCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	void OnSystemTexturesUpdated();// 0x5caee3fee041

--------------------------------
Class: MFClimateSingleSceneLightComponent.MFClimateSceneLightInterfaceComponent.MFClimateComponent.ActorComponent.Object
	MFClimateCelestialBody* BoundCelestialBody;//[Offset: 0xd8, Size: 0x8]
	float LongShadowFixDegrees;//[Offset: 0xe0, Size: 0x4]
	float LongShadowPower;//[Offset: 0xe4, Size: 0x4]
	DirectionalLight* MainLight;//[Offset: 0xe8, Size: 0x8]
	DirectionalLightComponent* Light;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: MFClimateTodFullSetup.Actor.Object
	class MFClimateBaseSkyMesh* SkySphereType;//[Offset: 0x2e0, Size: 0x8]
	MFClimateBaseSkyMesh* SunSky;//[Offset: 0x2e8, Size: 0x8]
	MFClimateVolumeCloudComponent* VolumeCloud;//[Offset: 0x2f0, Size: 0x8]
	MFClimateSunMoonSceneLightComponent* SceneLight;//[Offset: 0x2f8, Size: 0x8]
	MFClimateSkyAtmosphereComponent* SkyAtmosphereComponent;//[Offset: 0x300, Size: 0x8]
	MFClimateTimeGeographyComponent* TimeAndGeographyComponent;//[Offset: 0x308, Size: 0x8]

--------------------------------
Class: MFClimateSunMoonSceneLightComponent.MFClimateSceneLightInterfaceComponent.MFClimateComponent.ActorComponent.Object
	MFClimateCelestialBody* BindSun;//[Offset: 0xd8, Size: 0x8]
	MFClimateCelestialBody* BindMoon;//[Offset: 0xe0, Size: 0x8]
	float MainLightTransferTime;//[Offset: 0xe8, Size: 0x4]
	float LongShadowFixDegrees;//[Offset: 0xec, Size: 0x4]
	float LongShadowFixPower;//[Offset: 0xf0, Size: 0x4]
	DirectionalLight* MainDirectionalLight;//[Offset: 0xf8, Size: 0x8]
	DirectionalLightComponent* MainDirectionalLightComponent;//[Offset: 0x100, Size: 0x8]
	DirectionalLightComponent* FakeAtmLight1;//[Offset: 0x108, Size: 0x8]
	DirectionalLightComponent* FakeAtmLight2;//[Offset: 0x110, Size: 0x8]
	float SunWeight;//[Offset: 0x118, Size: 0x4]
	LinearColor SunScatteredIrradiance;//[Offset: 0x11c, Size: 0x10]
	LinearColor MoonScatteredIrradiance;//[Offset: 0x12c, Size: 0x10]

--------------------------------
Class: MFClimateDemoGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: MFClimateDirLightForLightningLightControl.Actor.Object
	DirectionalLightComponent* Component;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: MFClimateExtraDirLightLightControl.MFClimateBaseLightningLightControl.Object
	class MFClimateDirLightForLightningLightControl* LightType;//[Offset: 0x30, Size: 0x8]
	MFClimateDirLightForLightningLightControl* RawLight;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: MFClimateGlobalWind.Actor.Object
	MFClimateGlobalWindComponent* GlobalWindComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: MFClimateHDSunMoonSceneLightComponent.MFClimateSceneLightInterfaceComponent.MFClimateComponent.ActorComponent.Object
	DirectionalLight* SunLight;//[Offset: 0xd8, Size: 0x8]
	DirectionalLight* MoonLight;//[Offset: 0xe0, Size: 0x8]
	MFClimateCelestialBody* BindSun;//[Offset: 0xe8, Size: 0x8]
	MFClimateCelestialBody* BindMoon;//[Offset: 0xf0, Size: 0x8]
	Vector SunDirection;//[Offset: 0xf8, Size: 0xc]
	Vector MoonDirection;//[Offset: 0x104, Size: 0xc]
	LinearColor SunColoredBrightness;//[Offset: 0x110, Size: 0x10]
	LinearColor MoonColoredBrightness;//[Offset: 0x120, Size: 0x10]
	bool bAutoUpdateCloudCastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	float CastCloudShadowTransferTime;//[Offset: 0x134, Size: 0x4]
	DirectionalLightComponent* SunLightComponent;//[Offset: 0x138, Size: 0x8]
	DirectionalLightComponent* MoonLightComponent;//[Offset: 0x140, Size: 0x8]
	LinearColor SunScatteredIrradiance;//[Offset: 0x148, Size: 0x10]
	LinearColor MoonScatteredIrradiance;//[Offset: 0x158, Size: 0x10]

--------------------------------
Class: MFClimateHDSunMoonSceneLight.Actor.Object
	MFClimateHDSunMoonSceneLightComponent* MFClimateLight;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: MFClimateIrcCamera.Actor.Object
	CameraComponent* CameraComponent;//[Offset: 0x2e0, Size: 0x8]
	FString CameraTag;//[Offset: 0x2e8, Size: 0x10]
	FString GetCameraTag();// 0x5c9be3fee041

--------------------------------
Class: MFClimateLightningEventProducer.MFClimateBaseLightningEventProducer.Object
	bool bDeterministicByTOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float TodPassSpeed;//[Offset: 0x34, Size: 0x4]
	float TestInterval;//[Offset: 0x38, Size: 0x4]
	bool bDisableDeterministicInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: MFClimateMovableRainWetnessComponent.ActorComponent.Object
	PhysicalMaterial* LastOccludePhysicalMaterial;//[Offset: 0xb8, Size: 0x8]
	float WetSpeed;//[Offset: 0xc0, Size: 0x4]
	float DrySpeed;//[Offset: 0xc4, Size: 0x4]
	float OcclusionSmoothRate;//[Offset: 0xc8, Size: 0x4]
	float CurrentAccumulation;//[Offset: 0xcc, Size: 0x4]
	float SmoothedOcclusion;//[Offset: 0xd0, Size: 0x4]
	FName AccumulationParameterName;//[Offset: 0xd4, Size: 0x8]
	FName OcclusionParameterName;//[Offset: 0xdc, Size: 0x8]
	bool bEnableInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	MFClimateWorldSubSystem* MFClimateSystem;//[Offset: 0xe8, Size: 0x8]
	MFClimateRainOcclusionTestComponent* OcclusionTest;//[Offset: 0xf0, Size: 0x8]
	MaterialInstanceDynamic*[] CollectedMaterials;//[Offset: 0xf8, Size: 0x10]
	bool bAutoRefreshMaterialReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	float LastTimeRefreshMaterials;//[Offset: 0x10c, Size: 0x4]
	float RefreshMaterialsInterval;//[Offset: 0x110, Size: 0x4]
	void UpdateMaterialParameters();// 0x5c9ee3fee041

--------------------------------
Class: MFClimateParticleRain.MFClimateRain.MFClimateActor.Actor.Object
	ActorComponent* RainShadowCapture;//[Offset: 0x3a8, Size: 0x8]
	ActorComponent* WideShadowCapture;//[Offset: 0x3b0, Size: 0x8]
	NiagaraComponent*[] NiagaraComponents;//[Offset: 0x3b8, Size: 0x10]
	ParticleSystemComponent*[] CascadesComponents;//[Offset: 0x3c8, Size: 0x10]
	void OnWideShadowCaptureUpdated(Matrix Matrix);// 0x5cabe3fee041
	void OnRainShadowCaptureUpdated(Matrix Matrix);// 0x5caae3fee041
	void OnDelaiedWideShadowCaptureUpdated(Matrix Matrix);// 0x5ca9e3fee041
	void OnDelaiedRainShadowCaptureUpdated(Matrix Matrix);// 0x5ca8e3fee041

--------------------------------
Class: MFClimateSimpleLight.Actor.Object
	MFClimateSingleSceneLightComponent* MFClimateLight;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: MFClimateSingleMeshSky.MFClimateBaseSkyMesh.Actor.Object
	MaterialInterface* Material;//[Offset: 0x2e8, Size: 0x8]
	StaticMeshComponent* ShadingMesh;//[Offset: 0x2f0, Size: 0x8]
	Vector SkySphereScale;//[Offset: 0x2f8, Size: 0xc]
	Vector SkySphereLocation;//[Offset: 0x304, Size: 0xc]

--------------------------------
Class: MFClimateStatics.BlueprintFunctionLibrary.Object
	void StepTimeOfDay(Object* WorldContextObject, float StepInHours);// 0x5cd2e3fee041
	void SetWindLevel(Object* WorldContextObject, float WindLevel);// 0x5cd1e3fee041
	void SetWindDirection(Object* WorldContextObject, Vector2D WindDir);// 0x5cd0e3fee041
	void SetWeatherPresetWeights(Object* WorldContextObject, out const float[] Params);// 0x5ccfe3fee041
	void SetTimeOfDay(Object* WorldContextObject, float InTODTime);// 0x5ccee3fee041
	void SetSystemTextures(Object* WorldContextObject, MaterialInstanceDynamic* Mid);// 0x5ccde3fee041
	void SetNorthVector(Object* WorldContextObject, Vector NorthVector);// 0x5ccce3fee041
	void SetMatrixRowAsMPCVectorParameter(Object* WorldContextObject, MaterialParameterCollection* MPC, out const Matrix InMatrix, Vector Translation, FName RowName0, FName RowName1, FName RowName2, FName RowName3);// 0x5ccbe3fee041
	void SetMatrixRowAsMIDVectorParameter(MaterialInstanceDynamic* Mid, out const Matrix InMatrix, Vector Translation, FName RowName0, FName RowName1, FName RowName2, FName RowName3);// 0x5ccae3fee041
	void SetEditorViewportRotation(Rotator Rotation);// 0x5cc9e3fee041
	void SetEditorViewportLocation(Vector position);// 0x5cc8e3fee041
	float ProjectPointOnCircleLayer(float PointExtent, float CircleRadius);// 0x5cc7e3fee041
	float ModuloWarpNegative(float Value, float Mod);// 0x5cc6e3fee041
	Vector2D GetWindVelocity(Object* WorldContextObject);// 0x5cc5e3fee041
	float GetWindLevel(Object* WorldContextObject);// 0x5cc4e3fee041
	Vector2D GetWindDirection(Object* WorldContextObject);// 0x5cc3e3fee041
	float GetTimeOfDay(Object* WorldContextObject);// 0x5cc2e3fee041
	MFClimateWorldSubSystem* GetSystem(const Object* WorldContextObject);// 0x5cc1e3fee041
	int GetQualityLevel();// 0x5cc0e3fee041
	Rotator GetPlayerRotation(Object* WorldContextObject);// 0x5cbfe3fee041
	Vector GetPlayerLocation(Object* WorldContextObject);// 0x5cbee3fee041
	int GetNumWeatherPresets(Object* WorldContextObject);// 0x5cbde3fee041
	Vector GetNorthVector(Object* WorldContextObject);// 0x5cbce3fee041
	float GetNorthAngleOffset(Object* WorldContextObject);// 0x5cbbe3fee041
	Vector4 GetMatrixRow(out const Matrix Matrix, int Row);// 0x5cbae3fee041
	MFClimateWorldSubSystem* GetFirstSystem(const Object* WorldContextObject);// 0x5cb9e3fee041
	Object* GetFeature(const Object* WorldContextObject, class Object FeatureType);// 0x5cb8e3fee041
	Vector GetEastVector(Object* WorldContextObject);// 0x5cb7e3fee041
	float GetEastAngleOffset(Object* WorldContextObject);// 0x5cb6e3fee041
	Rotator GetCameraRotation(Object* WorldContextObject);// 0x5cb5e3fee041
	Vector GetCameraLocation(const Object* WorldContextObject);// 0x5cb4e3fee041
	float GetCameraAspect(Object* WorldContextObject);// 0x5cb3e3fee041
	float GaussianSampleFromStream(out RandomStream Stream, float Mean, float StdDev);// 0x5cb2e3fee041
	float GaussianSample(float Mean, float StdDev);// 0x5cb1e3fee041
	Vector ComputeCubemapBrightness(TextureCube* InCubemap);// 0x5cb0e3fee041
	void ChangeToWeatherPreset(Object* WorldContextObject, int WeatherIndex);// 0x5cafe3fee041

--------------------------------
Class: MFClimateSunMoonSceneLight.Actor.Object
	MFClimateSunMoonSceneLightComponent* MFClimateLight;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: MFClimateTakeDirLightLightControl.MFClimateBaseLightningLightControl.Object
	float TakeLightControlScaleThreshold;//[Offset: 0x34, Size: 0x4]
	MFClimateWorldSubSystem* System;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: MFClimateTimeGeography.Actor.Object
	MFClimateTimeGeographyComponent* TimeGeographyComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: MFClimateTodIrcBase.MFClimateBakeProcedure.MFClimateBaseBakeProcedure.Object
	FString OutputFolder;//[Offset: 0xb8, Size: 0x10]
	FString FileNameFormat;//[Offset: 0xc8, Size: 0x10]
	FString[] CameraTagFilter;//[Offset: 0xd8, Size: 0x10]
	bool bSyncEditorViewportWithCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	MFClimateIrcCamera*[] Cameras;//[Offset: 0xf0, Size: 0x10]
	Vector BackupCameraLocation;//[Offset: 0x100, Size: 0xc]
	Rotator BackupCameraRotation;//[Offset: 0x10c, Size: 0xc]
	FString GetOutputFileName();// 0x5cf5e3fee041

--------------------------------
Class: MFClimateTodIrc2D.MFClimateTodIrcBase.MFClimateBakeProcedure.MFClimateBaseBakeProcedure.Object
	bool bSuperFastEyeAdaption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	int Width;//[Offset: 0x11c, Size: 0x4]
	int Height;//[Offset: 0x120, Size: 0x4]

--------------------------------
Class: MFClimateTodIrcPanorama.MFClimateTodIrcBase.MFClimateBakeProcedure.MFClimateBaseBakeProcedure.Object
	int Size;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: MFClimateTodSequenceMixer.Actor.Object
	MFClimateWeatherComponent* WeatherComponent;//[Offset: 0x2e0, Size: 0x8]
	MFClimateWeatherLayerPresetsComponent* PresetsComponent;//[Offset: 0x2e8, Size: 0x8]

--------------------------------
Class: MFClimateTypes.Object

--------------------------------
Class: MFClimateUIBase.UserWidget.Widget.Visual.Object
	MFClimateWorldSubSystem* MFClimateSystem;//[Offset: 0x288, Size: 0x8]
	void SetWeatherConditionWeight(int Index, float Weight);// 0x5cfde3fee041
	void SetTimeOfDay(float TimeOfDay);// 0x5cfce3fee041
	void OnTODChanged(out const FText NewTime);// 0x5cfbe3fee041
	float GetWeatherConditionWeight(int Index);// 0x5cfae3fee041
	FString GetWeatherConditionName(int SequenceIndex);// 0x5cf9e3fee041
	FText GetTODText(float InValue);// 0x5cf8e3fee041
	float GetTimeOfDay();// 0x5cf7e3fee041
	MFClimateWorldSubSystem* GetMFClimateSystem();// 0x5cf6e3fee041

--------------------------------
Class: MFClimateVolumeCloud.Actor.Object
	MFClimateVolumeCloudComponent* VolumeCloud;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: MFClimateWeatherListEntry.MFClimateUIBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: MFClimateWeatherMapCloudMask.Actor.Object
	int DrawLayer;//[Offset: 0x2e0, Size: 0x4]
	enum DrawType;//[Offset: 0x2e4, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x2e8, Size: 0x8]
	MaterialInstanceDynamic* Mid;//[Offset: 0x2f0, Size: 0x8]
	Vector4 MaterialParameter;//[Offset: 0x300, Size: 0x10]

--------------------------------
Class: MFMobileCircleUserWidget.UserWidget.Widget.Visual.Object
	int WidgetPointIndex;//[Offset: 0x288, Size: 0x4]
	bool bOpenTouchTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	delegate OnTouchStart;//[Offset: 0x290, Size: 0x10]
	delegate OnTouchEnd;//[Offset: 0x2a0, Size: 0x10]
	delegate OnTouchOutCircle;//[Offset: 0x2b0, Size: 0x10]
	delegate OnOutOfButtonTouchEnded;//[Offset: 0x2c0, Size: 0x10]
	enum AcceptInputType;//[Offset: 0x2d0, Size: 0x1]
	enum CurrentAcceptInputType;//[Offset: 0x2d1, Size: 0x1]
	void SetFingerIndexDisableMoveAndRotate(int CustomWidgetPointIndex, bool bDisable);// 0x5d1fe3fee041
	void OnInputTouchEnded(const byte FingerIndex);// 0x5d1ee3fee041
	bool IsPressed();// 0x5d1de3fee041
	bool InMovementArea(Widget* Widget);// 0x5d1ce3fee041
	int GetCurrentWidgetPointIndex();// 0x5d1be3fee041
	void DebugCallOnTouchStart();// 0x5d1ae3fee041
	void DebugCallOnTouchEnd();// 0x5d19e3fee041

--------------------------------
Class: MFMobileCircleUserWidget_Fire.MFMobileCircleUserWidget.UserWidget.Widget.Visual.Object
	delegate PostStartFireByTouch;//[Offset: 0x2d8, Size: 0x10]
	bool bIsLeftFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	SGPlayerController* CachedPlayerController;//[Offset: 0x2f8, Size: 0x8]
	SGCharacter* CachedCharacter;//[Offset: 0x300, Size: 0x8]
	void TouchFireStarted();// 0x5d25e3fee041
	void OnZoomChanged(bool bInZoomChanged);// 0x5d24e3fee041
	void NativeStartFire();// 0x5d23e3fee041
	void NativeEndFire();// 0x5d22e3fee041
	bool GetUseAutoZoom();// 0x5d21e3fee041
	Vector2D GetPressedScreenSpacePosition();// 0x5d20e3fee041

--------------------------------
Class: MFMobileCustomShapeButton.Button.ContentWidget.PanelWidget.Widget.Visual.Object
	Texture2D* AdvancedHitTexture;//[Offset: 0x490, Size: 0x8]
	int AdvancedHitAlpha;//[Offset: 0x498, Size: 0x4]
	void SetAdvancedHitTexture(Texture2D* InTexture);// 0x5d28e3fee041
	void SetAdvancedHitAlpha(int InAlpha);// 0x5d27e3fee041
	bool CheckIfLastMouseButtonUpInZone();// 0x5d26e3fee041

--------------------------------
Class: MFMobileDragDropUserWidget.SGUserWidget.UserWidget.Widget.Visual.Object
	delegate OnDropEvent;//[Offset: 0x2c8, Size: 0x10]
	delegate OnDragDetectedEvent;//[Offset: 0x2d8, Size: 0x10]
	delegate OnDragOverEvent;//[Offset: 0x2e8, Size: 0x10]
	delegate OnDragEnterEvent;//[Offset: 0x2f8, Size: 0x10]
	delegate OnDragLeaveEvent;//[Offset: 0x308, Size: 0x10]
	delegate OnDragCancelledEvent;//[Offset: 0x318, Size: 0x10]
	delegate OnTouchStartedEvent;//[Offset: 0x328, Size: 0x10]
	delegate OnTouchEndedEvent;//[Offset: 0x338, Size: 0x10]
	bool bDropable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]

--------------------------------
Class: MFMobileDraggableButton.Button.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: MFMobileGameHandle.Object
	MFMobileInputButton* MovementButton;//[Offset: 0x50, Size: 0x8]
	MFMobileInputButton* RotationButton;//[Offset: 0x58, Size: 0x8]
	MFMobileMoveHandleImpl* MoveHandleImpl;//[Offset: 0x60, Size: 0x8]
	MFMobilePlayerInput* CachedPlayerInput;//[Offset: 0x198, Size: 0x8]

--------------------------------
Class: MFMobileInputButton.Object

--------------------------------
Class: MFMobileMoveHandleImpl.Object

--------------------------------
Class: MFMobilePlayerInput.SGPlayerInput.PlayerInput.Object
	float NormalSensitivityX;//[Offset: 0x570, Size: 0x4]
	float NormalSensitivityY;//[Offset: 0x574, Size: 0x4]
	float SwimmingSensitivityX;//[Offset: 0x578, Size: 0x4]
	float SwimmingSensitivityY;//[Offset: 0x57c, Size: 0x4]
	float DrivingSensitivityX;//[Offset: 0x580, Size: 0x4]
	float DrivingSensitivityY;//[Offset: 0x584, Size: 0x4]
	bool bDisableMoveAndRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	<byte,bool> FingerIndexDisableMoveAndRotateMap;//[Offset: 0x590, Size: 0x50]
	<byte> FingerIndexFullScreenRotateSet;//[Offset: 0x5e0, Size: 0x50]
	<byte,bool> FingerIndexIgnoreMap;//[Offset: 0x630, Size: 0x50]
	float FixedSensitivityFactor;//[Offset: 0x684, Size: 0x4]
	float DisAccSensitivityFactor;//[Offset: 0x688, Size: 0x4]
	float DisFixedInputSensitivityFactor;//[Offset: 0x68c, Size: 0x4]
	float MaxAccumulateAxis;//[Offset: 0x690, Size: 0x4]
	float SpeedAccSensitivityFactor;//[Offset: 0x694, Size: 0x4]
	float SpeedAccFixedInputSensitivityFactor;//[Offset: 0x698, Size: 0x4]
	float NewSpeedAccSensitivityFactor;//[Offset: 0x69c, Size: 0x4]
	float NewSpeedAccFixedInputSensitivityFactor;//[Offset: 0x6a0, Size: 0x4]
	enum UseSensitivityMode;//[Offset: 0x6a4, Size: 0x1]
	float EmulatorScale;//[Offset: 0x6a8, Size: 0x4]
	bool bCullingYRotaion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ad, Size: 0x1]
	float DefaultFixedSensitivityValue;//[Offset: 0x6b8, Size: 0x4]
	float DefaultDisAccSensitivityValue;//[Offset: 0x6c0, Size: 0x4]
	float DefaultSpeedAccSensitivityValue;//[Offset: 0x6c8, Size: 0x4]
	MFMobileGameHandle* GameHandle;//[Offset: 0x6d0, Size: 0x8]
	class Object* GamePadClassSoft;//[Offset: 0x6d8, Size: 0x8]
	MFMobileGamePad* Gamepad;//[Offset: 0x6e0, Size: 0x8]
	int CurrentInputModeNum;//[Offset: 0x6fc, Size: 0x4]
	MobileInputData[] MobileInputDataList;//[Offset: 0x700, Size: 0x10]
	MobileInputData[] TempMobileInputDataList;//[Offset: 0x710, Size: 0x10]
	enum AcceptOP;//[Offset: 0x724, Size: 0x1]
	CurveFloat* DeltaMoveSpeedScaleCurve;//[Offset: 0x728, Size: 0x8]
	enum BlendOP;//[Offset: 0x730, Size: 0x1]
	float DeltaMoveBlendFactor;//[Offset: 0x734, Size: 0x4]
	float InterpSpeed;//[Offset: 0x738, Size: 0x4]
	CurveFloat* DeltaMoveBlendFactorCurve;//[Offset: 0x740, Size: 0x8]
	float MagicMin_X1;//[Offset: 0x748, Size: 0x4]
	float MagicMin_X2;//[Offset: 0x74c, Size: 0x4]
	float MagicMax_X1;//[Offset: 0x750, Size: 0x4]
	float MagicMax_X2;//[Offset: 0x754, Size: 0x4]
	float MagicMax_X3;//[Offset: 0x758, Size: 0x4]
	void UserSetSpeedAccSensitivity(float Value);// 0x5d65e3fee041
	void UserSetFixedSensitivity(float Value);// 0x5d64e3fee041
	void UserSetDisAccSensitivity(float Value);// 0x5d63e3fee041
	void SwitchInputMode(int ModeNum);// 0x5d62e3fee041
	void ShowGamepad(bool bShowGamepad);// 0x5d61e3fee041
	void SetTouchFreeView(bool bIsTouch);// 0x5d60e3fee041
	void SetTestMobileInputScale(float Value);// 0x5d5fe3fee041
	void SetSimulateMultiRoatationInputDelay(float Delay);// 0x5d5ee3fee041
	void SetSensitivityMode(enum Mode);// 0x5d5de3fee041
	void SetMovementButtonUnfixed();// 0x5d5ce3fee041
	void SetMovementButtonFixed(Vector2D position, Vector2D Size);// 0x5d5be3fee041
	void SetInputMagicMin(float x1, float x2);// 0x5d5ae3fee041
	void SetInputMagicMax(float x1, float x2, float X3);// 0x5d59e3fee041
	void SetInputInterpSpeed(float Speed);// 0x5d58e3fee041
	void SetInputBlendOP(int Type);// 0x5d57e3fee041
	void SetInputBlendFactor(float Value);// 0x5d56e3fee041
	void SetInputAcceptOP(int Type);// 0x5d55e3fee041
	void SetFingerIndexIgnore(byte FingerIndex, bool bIgnore);// 0x5d54e3fee041
	void SetFingerIndexDisableMoveAndRotate(byte FingerIndex, bool bDisable);// 0x5d53e3fee041
	void SetExchangeMoveAndRotate(bool bExchange);// 0x5d52e3fee041
	void SetEnableRotateCam(bool bEnable);// 0x5d51e3fee041
	void SetDisableMoveAndRotate(bool bDisable);// 0x5d50e3fee041
	void ResetMovementButton(Vector2D InAbsSize, Vector2D InAbsPostion);// 0x5d4fe3fee041
	void RemoveFingerIndexFullScreenRotate(byte FingerIndex);// 0x5d4ee3fee041
	void OnGamePadClassSoftLoadCompleted(SoftObjectPath Path);// 0x5d4de3fee041
	void MobileInputShowLog(bool MobileInputShowLog);// 0x5d4ce3fee041
	bool IsFingerIndexFullScreenRotate(byte FingerIndex);// 0x5d4be3fee041
	bool InMovementArea(out const Vector2D Pos);// 0x5d4ae3fee041
	void GetRefRotationInputData(out MobileInputData Data);// 0x5d49e3fee041
	void GetRefMovementInputData(out MobileInputData Data);// 0x5d48e3fee041
	float GetRealAccelY();// 0x5d47e3fee041
	float GetRealAccelX();// 0x5d46e3fee041
	Vector2D GetRealAccel();// 0x5d45e3fee041
	bool GetPointIndexInputData(int PointIndex, out MobileInputData PointIndexInputData);// 0x5d44e3fee041
	Vector2D GetMovementInputData_Location();// 0x5d43e3fee041
	float GetMovementInputData_DeltaY();// 0x5d42e3fee041
	float GetMovementInputData_DeltaX();// 0x5d41e3fee041
	Vector2D GetMovementInputData_Delta();// 0x5d40e3fee041
	Vector2D GetMovementInputData_BeginLocation();// 0x5d3fe3fee041
	MobileInputData GetMovementInputData();// 0x5d3ee3fee041
	byte GetMoveHandleType();// 0x5d3de3fee041
	int GetMobileInputDataListLength();// 0x5d3ce3fee041
	Vector2D GetLastRotationVector();// 0x5d3be3fee041
	Vector2D GetLastRotationInput();// 0x5d3ae3fee041
	int GetInputModeNum();// 0x5d39e3fee041
	MobileInputData GetFreeViewInputData();// 0x5d38e3fee041
	void ClearInputFlags();// 0x5d37e3fee041
	void ClearAllInput();// 0x5d36e3fee041
	bool CheckPointIndexHasInput(int PointIndex);// 0x5d35e3fee041
	void AddFingerIndexFullScreenRotate(byte FingerIndex);// 0x5d34e3fee041

--------------------------------
Class: MobileInputData
	byte FingerIndex;//[Offset: 0x0, Size: 0x1]
	byte Phase;//[Offset: 0x1, Size: 0x1]
	Vector2D BeginLocation;//[Offset: 0x4, Size: 0x8]
	Vector2D Location;//[Offset: 0xc, Size: 0x8]
	Vector2D LastLocation;//[Offset: 0x14, Size: 0x8]
	Vector2D LastFrameLocation;//[Offset: 0x1c, Size: 0x8]
	float BeginTime;//[Offset: 0x24, Size: 0x4]
	float UpdateTime;//[Offset: 0x28, Size: 0x4]
	float ForceValue;//[Offset: 0x2c, Size: 0x4]
	Vector2D DeltaLocation;//[Offset: 0x30, Size: 0x8]
	float DeltaLocationX;//[Offset: 0x38, Size: 0x4]
	float DeltaLocationY;//[Offset: 0x3c, Size: 0x4]
	int SampleCount;//[Offset: 0x40, Size: 0x4]
	bool bIgnore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bPendingDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]

--------------------------------
Class: MFMobileGamePad.Object
	MFMobilePlayerInput* CachedPlayerInput;//[Offset: 0x30, Size: 0x8]
	MFMobileGamePadView*[] VisibleViewCache;//[Offset: 0x38, Size: 0x10]
	class MFMobileGamePadView[] MobileGamePadViewClasses;//[Offset: 0x48, Size: 0x10]
	int MobileGamePadViewZorder;//[Offset: 0x58, Size: 0x4]
	MFMobileGamePadView*[] MobileGamePadViews;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: MFMobileGamePadView.SGUserWidget.UserWidget.Widget.Visual.Object
	int GamePadId;//[Offset: 0x2c4, Size: 0x4]
	MFMobileGamePad* CachedGamePad;//[Offset: 0x2c8, Size: 0x8]
	MFMobileDraggableButton*[] DraggableBtns;//[Offset: 0x2d0, Size: 0x10]
	void SetGamePad(MFMobileGamePad* InGamePad);// 0x5d29e3fee041

--------------------------------
Class: MFMobileFixedFireGameHandle.MFMobileGameHandle.Object

--------------------------------
Class: MFMobileMoveJoystickHandleImpl.MFMobileMoveHandleImpl.Object
	MFMobileGameHandle* OuterGameHandle;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x124, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0x128, Size: 0x10]
	float MinValue;//[Offset: 0x138, Size: 0x4]
	float MaxValue;//[Offset: 0x13c, Size: 0x4]
	SliderStyle WidgetStyle;//[Offset: 0x140, Size: 0x370]
	byte Orientation;//[Offset: 0x4b0, Size: 0x1]
	LinearColor SliderBarColor;//[Offset: 0x4b4, Size: 0x10]
	LinearColor SliderHandleColor;//[Offset: 0x4c4, Size: 0x10]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5, Size: 0x1]
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d6, Size: 0x1]
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d7, Size: 0x1]
	float StepSize;//[Offset: 0x4d8, Size: 0x4]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 0x1]
	delegate OnMouseCaptureBegin;//[Offset: 0x4e0, Size: 0x10]
	delegate OnMouseCaptureEnd;//[Offset: 0x4f0, Size: 0x10]
	delegate OnControllerCaptureBegin;//[Offset: 0x500, Size: 0x10]
	delegate OnControllerCaptureEnd;//[Offset: 0x510, Size: 0x10]
	delegate OnValueChanged;//[Offset: 0x520, Size: 0x10]
	void SetValue(float InValue);// 0x5d33e3fee041
	void SetStepSize(float InValue);// 0x5d32e3fee041
	void SetSliderHandleColor(LinearColor InValue);// 0x5d31e3fee041
	void SetSliderBarColor(LinearColor InValue);// 0x5d30e3fee041
	void SetMinValue(float InValue);// 0x5d2fe3fee041
	void SetMaxValue(float InValue);// 0x5d2ee3fee041
	void SetLocked(bool InValue);// 0x5d2de3fee041
	void SetIndentHandle(bool InValue);// 0x5d2ce3fee041
	float GetValue();// 0x5d2be3fee041
	float GetNormalizedValue();// 0x5d2ae3fee041

--------------------------------
Class: MFMobileMutilSlider.Slider.Widget.Visual.Object
	int SliderBarNum;//[Offset: 0x540, Size: 0x4]
	bool bCanCross;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544, Size: 0x1]

--------------------------------
Class: MFMobilePlayerInputStatics.BlueprintFunctionLibrary.Object
	void SimulateStartTouch(Object* WorldContextObject, int TouchIndex, Vector Location);// 0x5d68e3fee041
	void SimulateEndTouch(Object* WorldContextObject, int TouchIndex, Vector Location);// 0x5d67e3fee041
	void ClearAllInput(Object* WorldContextObject);// 0x5d66e3fee041

--------------------------------
Class: MFPCPlayerInput.SGPlayerInput.PlayerInput.Object
	MFMobileGamePad* Gamepad;//[Offset: 0x570, Size: 0x8]
	class Object* GamePadClassSoft;//[Offset: 0x578, Size: 0x28]
	void OnGamePadClassSoftLoadCompleted(SoftObjectPath Path);// 0x5d69e3fee041

--------------------------------
Class: PreloadSubsystem.GameInstanceSubsystem.Subsystem.Object
	<class Object,ObjPool> ObjPoolMap;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: ObjPool
	Object*[] ObjPool;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MFQCloudWrapper.Object
	delegate OnUploadCompleted;//[Offset: 0x28, Size: 0x10]
	delegate OnUploadProgress;//[Offset: 0x38, Size: 0x10]
	bool UploadFile(FString InFilePath, FString InCosPath);// 0x5d6fe3fee041
	void OnUploadProgress__DelegateSignature(float InProgress);// 0x5d6ee3fee041
	void OnUploadCompleted__DelegateSignature(FString InRetVal);// 0x5d6de3fee041
	void OnCosUploadProgress(float InProgress);// 0x5d6ce3fee041
	void OnCosUploadComplete(FString InRetVal);// 0x5d6be3fee041
	MFQCloudWrapper* GetDefault();// 0x5d6ae3fee041

--------------------------------
Class: DeleteReplayObject.Object
	delegate OnDeleteComplete;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GetSavedReplaysObject.Object
	delegate OnGetReplaysComplete;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GoToTimeObject.Object
	delegate OnGotoTimeComplete;//[Offset: 0x28, Size: 0x10]
	Object* WCO;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: MFReplaySystemBPLibrary.BlueprintFunctionLibrary.Object
	void StopSpectating(Object* WorldContextObject, BlendSettings BlendSettings);// 0x5d8ee3fee041
	void StopRecordingReplay(Object* WorldContextObject);// 0x5d8de3fee041
	void SpectateActor(Object* WorldContextObject, Actor* Actor, BlendSettings BlendSettings);// 0x5d8ce3fee041
	void SetReplaySavePath(Object* WorldContextObject, FString Path);// 0x5d8be3fee041
	void SetPlaybackSpeed(Object* WorldContextObject, float Speed);// 0x5d8ae3fee041
	void SetMaxRecordHz(Object* WorldContextObject, float Hz);// 0x5d89e3fee041
	void ResumePlayback(Object* WorldContextObject);// 0x5d88e3fee041
	GoToTimeObject* RestartReplayPlayback(Object* WorldContextObject);// 0x5d87e3fee041
	RequestEventsObject* RequestActiveReplayEvents(Object* WorldContextObject, FString Group, int UserIndex);// 0x5d86e3fee041
	RenameReplayObject* RenameReplayFriendly(Object* WorldContextObject, FString ReplayName, FString NewFriendlyReplayName, const int UserIndex);// 0x5d85e3fee041
	RenameReplayObject* RenameReplay(Object* WorldContextObject, FString ReplayName, FString NewReplayName, const int UserIndex);// 0x5d84e3fee041
	void RecordReplay(Object* WorldContextObject, FString ReplayName, FString ReplayFriendlyName);// 0x5d83e3fee041
	bool PlayRecordedReplay(Object* WorldContextObject, FString ReplayName);// 0x5d82e3fee041
	void PausePlayback(Object* WorldContextObject);// 0x5d81e3fee041
	float MsToSeconds(const int MS);// 0x5d80e3fee041
	float MFReplaySystemSampleFunction(float Param);// 0x5d7fe3fee041
	bool IsReplayPlaybackPaused(Object* WorldContextObject);// 0x5d7ee3fee041
	bool IsRecordingReplay(Object* WorldContextObject);// 0x5d7de3fee041
	bool IsPlayingReplay(Object* WorldContextObject);// 0x5d7ce3fee041
	GoToTimeObject* GoToSpecificTime(Object* WorldContextObject, float TimeToGoTo, bool bRetainCurrentPauseState);// 0x5d7be3fee041
	GetSavedReplaysObject* GetSavedReplays(Object* WorldContextObject);// 0x5d7ae3fee041
	FString GetReplaySavePath(Object* WorldContextObject);// 0x5d79e3fee041
	float GetReplayLength(Object* WorldContextObject);// 0x5d78e3fee041
	float GetPlaybackSpeed(Object* WorldContextObject);// 0x5d77e3fee041
	float GetMaxRecordHz();// 0x5d76e3fee041
	DemoNetDriver* GetDemoDriver(Object* WorldContextObject);// 0x5d75e3fee041
	float GetCurrentReplayTime(Object* WorldContextObject);// 0x5d74e3fee041
	FString GetActiveReplayName(Object* WorldContextObject);// 0x5d73e3fee041
	DeleteReplayObject* DeleteReplay(Object* WorldContextObject, FString ReplayName);// 0x5d72e3fee041
	ReplayDataObject* CreateReplayDataObject();// 0x5d71e3fee041
	bool AddEventToActiveReplay(Object* WorldContextObject, FString EventName, FString Group, ReplayDataObject* DataObject);// 0x5d70e3fee041

--------------------------------
Class: BlendSettings
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExponent;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: RequestEventsObject.Object
	delegate OnRequestEventsComplete;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: RenameReplayObject.Object
	delegate OnRenameComplete;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ReplayDataObject.Object
	ReplayBoolData[] BoolData;//[Offset: 0x158, Size: 0x10]
	ReplayByteData[] byteData;//[Offset: 0x168, Size: 0x10]
	ReplayIntData[] IntData;//[Offset: 0x178, Size: 0x10]
	ReplayInt64Data[] int64Data;//[Offset: 0x188, Size: 0x10]
	ReplayFloatData[] FloatData;//[Offset: 0x198, Size: 0x10]
	ReplayNameData[] nameData;//[Offset: 0x1a8, Size: 0x10]
	ReplayStringData[] stringData;//[Offset: 0x1b8, Size: 0x10]
	ReplayTextData[] textData;//[Offset: 0x1c8, Size: 0x10]
	ReplayVectorData[] vectorData;//[Offset: 0x1d8, Size: 0x10]
	ReplayRotatorData[] rotatorData;//[Offset: 0x1e8, Size: 0x10]
	ReplayTransformData[] transformData;//[Offset: 0x1f8, Size: 0x10]
	FString SaveReplayMetaDataToString();// 0x5dbce3fee041
	void RemoveVectorData(FString Name);// 0x5dbbe3fee041
	void RemoveTransformData(FString Name);// 0x5dbae3fee041
	void RemoveTextData(FString Name);// 0x5db9e3fee041
	void RemoveStringData(FString Name);// 0x5db8e3fee041
	void RemoveRotatorData(FString Name);// 0x5db7e3fee041
	void RemoveNameData(FString Name);// 0x5db6e3fee041
	void RemoveIntegerData(FString Name);// 0x5db5e3fee041
	void RemoveInteger64Data(FString Name);// 0x5db4e3fee041
	void RemoveFloatData(FString Name);// 0x5db3e3fee041
	void RemoveByteData(FString Name);// 0x5db2e3fee041
	void RemoveBooleanData(FString Name);// 0x5db1e3fee041
	bool LoadReplayMetaDataFromString(FString StringDataToParse);// 0x5db0e3fee041
	Vector GetVectorData(FString Name);// 0x5dafe3fee041
	Transform GetTransformData(FString Name);// 0x5daee3fee041
	FText GetTextData(FString Name);// 0x5dade3fee041
	FString GetStringData(FString Name);// 0x5dace3fee041
	Rotator GetRotatorData(FString Name);// 0x5dabe3fee041
	FName GetNameData(FString Name);// 0x5daae3fee041
	int GetIntegerData(FString Name);// 0x5da9e3fee041
	int64 GetInteger64Data(FString Name);// 0x5da8e3fee041
	float GetFloatData(FString Name);// 0x5da7e3fee041
	byte[] GetByteData(FString Name);// 0x5da6e3fee041
	bool GetBooleanData(FString Name);// 0x5da5e3fee041
	int DoesVectorDataExist(FString Name);// 0x5da4e3fee041
	int DoesTransformDataExist(FString Name);// 0x5da3e3fee041
	int DoesTextDataExist(FString Name);// 0x5da2e3fee041
	int DoesStringDataExist(FString Name);// 0x5da1e3fee041
	int DoesRotatorDataExist(FString Name);// 0x5da0e3fee041
	int DoesNameDataExist(FString Name);// 0x5d9fe3fee041
	int DoesIntegerDataExist(FString Name);// 0x5d9ee3fee041
	int DoesInteger64DataExist(FString Name);// 0x5d9de3fee041
	int DoesFloatDataExist(FString Name);// 0x5d9ce3fee041
	int DoesByteDataExist(FString Name);// 0x5d9be3fee041
	int DoesBooleanDataExist(FString Name);// 0x5d9ae3fee041
	void AddVectorData(FString Name, Vector Data);// 0x5d99e3fee041
	void AddTransformData(FString Name, Transform Data);// 0x5d98e3fee041
	void AddTextData(FString Name, FText Data);// 0x5d97e3fee041
	void AddStringData(FString Name, FString Data);// 0x5d96e3fee041
	void AddRotatorData(FString Name, Rotator Data);// 0x5d95e3fee041
	void AddNameData(FString Name, FName Data);// 0x5d94e3fee041
	void AddIntegerData(FString Name, int Data);// 0x5d93e3fee041
	void AddInteger64Data(FString Name, int64 Data);// 0x5d92e3fee041
	void AddFloatData(FString Name, float Data);// 0x5d91e3fee041
	void AddByteData(FString Name, byte[] Data);// 0x5d90e3fee041
	void AddBooleanData(FString Name, bool Data);// 0x5d8fe3fee041

--------------------------------
Class: ReplayBoolData
	FString Name;//[Offset: 0x0, Size: 0x10]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ReplayByteData
	FString Name;//[Offset: 0x0, Size: 0x10]
	byte[] Value;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ReplayIntData
	FString Name;//[Offset: 0x0, Size: 0x10]
	int Value;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ReplayInt64Data
	FString Name;//[Offset: 0x0, Size: 0x10]
	int64 Value;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ReplayFloatData
	FString Name;//[Offset: 0x0, Size: 0x10]
	float Value;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ReplayNameData
	FString Name;//[Offset: 0x0, Size: 0x10]
	FName Value;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ReplayStringData
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString Value;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ReplayTextData
	FString Name;//[Offset: 0x0, Size: 0x10]
	FText Value;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: ReplayVectorData
	FString Name;//[Offset: 0x0, Size: 0x10]
	Vector Value;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: ReplayRotatorData
	FString Name;//[Offset: 0x0, Size: 0x10]
	Rotator Value;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: ReplayTransformData
	FString Name;//[Offset: 0x0, Size: 0x10]
	Transform Value;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: MFReplayTypes.Object

--------------------------------
Class: ReplayObject.Object
	World* World;//[Offset: 0x28, Size: 0x8]
	ReplayInfo ReplayInfo;//[Offset: 0x30, Size: 0x30]
	delegate OnRequestEventsComplete;//[Offset: 0x60, Size: 0x10]
	void RequestEvents(FString Group, int UserIndex);// 0x5dbde3fee041

--------------------------------
Class: ReplayInfo
	FString FriendlyName;//[Offset: 0x0, Size: 0x10]
	FString ActualName;//[Offset: 0x10, Size: 0x10]
	DateTime RecordDate;//[Offset: 0x20, Size: 0x8]
	int LengthInMS;//[Offset: 0x28, Size: 0x4]
	float SizeInMb;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: ReplayPlayerController.PlayerController.Controller.Actor.Object
	void OnTogglePause(bool PauseState);// 0x5dc1e3fee041
	void OnStopSpectateActor();// 0x5dc0e3fee041
	void OnSpectateActor(Actor* Actor);// 0x5dbfe3fee041
	void OnGoToTime(float CurrentTime);// 0x5dbee3fee041

--------------------------------
Class: IndexMapData.AssetUserData.Object
	Texture2D* IndexMap;//[Offset: 0x28, Size: 0x8]
	LinearColor LandscapeInfo;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: MFSceneryRuntimeSettingsActor.Actor.Object
	float LodMipBegin;//[Offset: 0x2e0, Size: 0x4]
	float LodMipEnd;//[Offset: 0x2e4, Size: 0x4]
	float[] UVScales;//[Offset: 0x2e8, Size: 0x10]

--------------------------------
Class: MF_VLogController.Object

--------------------------------
Class: MF_VLogStatics.BlueprintFunctionLibrary.Object
	void StopVLOG();// 0x5dc5e3fee041
	void StartVLOG(Actor* InActor, out const FName[] InCategories);// 0x5dc4e3fee041
	bool IsVLOGRecording();// 0x5dc3e3fee041
	int GetObjectWhiteListValidNum();// 0x5dc2e3fee041

--------------------------------
Class: VLogBenchmarkActor.Actor.Object

--------------------------------
Class: RenderDocBreakpointBPBPLibrary.BlueprintFunctionLibrary.Object
	void TriggerMultiCapture(int Num);// 0x5dc8e3fee041
	void TriggerCapture();// 0x5dc7e3fee041
	RenderDocBreakpointBPBPLibrary* Get();// 0x5dc6e3fee041

--------------------------------
Class: BulletScreen.CanvasPanel.PanelWidget.Widget.Visual.Object
	class BulletScreenItem* TemplateWidget;//[Offset: 0x150, Size: 0x8]
	int MaxBulletLines;//[Offset: 0x158, Size: 0x4]
	float BulletSpeed;//[Offset: 0x15c, Size: 0x4]
	float LineHeight;//[Offset: 0x160, Size: 0x4]
	float HorizontalInterval;//[Offset: 0x164, Size: 0x4]
	int MaxCachedBulletCount;//[Offset: 0x168, Size: 0x4]
	CanvasPanelSlot*[] bulletItemPool;//[Offset: 0x1a0, Size: 0x10]
	void Stop();// 0x5dcee3fee041
	void Start();// 0x5dcde3fee041
	void Resume();// 0x5dcce3fee041
	void Pause();// 0x5dcbe3fee041
	void AddBullets(out const FString[] Content);// 0x5dcae3fee041
	void AddBullet(FString Content);// 0x5dc9e3fee041

--------------------------------
Class: BulletScreenItem.UserWidget.Widget.Visual.Object

--------------------------------
Class: PLatentDelegate.Object
	void OnLatentCallback(int threadRef);// 0x5dcfe3fee041

--------------------------------
Class: PLuaActor.Actor.Object
	FString LuaFilePath;//[Offset: 0x370, Size: 0x10]
	FString LuaStateName;//[Offset: 0x380, Size: 0x10]
	PLuaBPVar CallLuaMember(FString FunctionName, out const PLuaBPVar[] Args);// 0x5dd0e3fee041

--------------------------------
Class: PLuaBPVar

--------------------------------
Class: PLuaPawn.Pawn.Actor.Object
	FString LuaFilePath;//[Offset: 0x3e0, Size: 0x10]
	FString LuaStateName;//[Offset: 0x3f0, Size: 0x10]
	PLuaBPVar CallLuaMember(FString FunctionName, out const PLuaBPVar[] Args);// 0x5dd1e3fee041

--------------------------------
Class: PLuaCharacter.Character.Pawn.Actor.Object
	FString LuaFilePath;//[Offset: 0x628, Size: 0x10]
	FString LuaStateName;//[Offset: 0x638, Size: 0x10]
	PLuaBPVar CallLuaMember(FString FunctionName, out const PLuaBPVar[] Args);// 0x5dd2e3fee041

--------------------------------
Class: PLuaController.Controller.Actor.Object
	FString LuaFilePath;//[Offset: 0x3e8, Size: 0x10]
	FString LuaStateName;//[Offset: 0x3f8, Size: 0x10]
	PLuaBPVar CallLuaMember(FString FunctionName, out const PLuaBPVar[] Args);// 0x5dd3e3fee041

--------------------------------
Class: PLuaPlayerController.PlayerController.Controller.Actor.Object
	FString LuaFilePath;//[Offset: 0x6c8, Size: 0x10]
	FString LuaStateName;//[Offset: 0x6d8, Size: 0x10]
	PLuaBPVar CallLuaMember(FString FunctionName, out const PLuaBPVar[] Args);// 0x5dd4e3fee041

--------------------------------
Class: PLuaActorComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x158, Size: 0x10]
	FString LuaStateName;//[Offset: 0x168, Size: 0x10]
	PLuaBPVar CallLuaMember(FString FunctionName, out const PLuaBPVar[] Args);// 0x5dd5e3fee041

--------------------------------
Class: PLuaGameModeBase.GameModeBase.Info.Actor.Object
	FString LuaFilePath;//[Offset: 0x410, Size: 0x10]
	FString LuaStateName;//[Offset: 0x420, Size: 0x10]
	PLuaBPVar CallLuaMember(FString FunctionName, out const PLuaBPVar[] Args);// 0x5dd6e3fee041

--------------------------------
Class: PLuaHUD.HUD.Actor.Object
	FString LuaFilePath;//[Offset: 0x460, Size: 0x10]
	FString LuaStateName;//[Offset: 0x470, Size: 0x10]
	PLuaBPVar CallLuaMember(FString FunctionName, out const PLuaBPVar[] Args);// 0x5dd7e3fee041

--------------------------------
Class: PLuaTableObjectInterface.Interface.Object

--------------------------------
Class: PLuaBlueprintLibrary.BlueprintFunctionLibrary.Object
	FString GetStringFromVar(PLuaBPVar Value, int Index);// 0x5de3e3fee041
	Object* GetObjectFromVar(PLuaBPVar Value, int Index);// 0x5de2e3fee041
	float GetNumberFromVar(PLuaBPVar Value, int Index);// 0x5de1e3fee041
	int GetIntFromVar(PLuaBPVar Value, int Index);// 0x5de0e3fee041
	bool GetBoolFromVar(PLuaBPVar Value, int Index);// 0x5ddfe3fee041
	PLuaBPVar CreateVarFromString(FString Value);// 0x5ddee3fee041
	PLuaBPVar CreateVarFromObject(Object* WorldContextObject, Object* Value);// 0x5ddde3fee041
	PLuaBPVar CreateVarFromNumber(float Value);// 0x5ddce3fee041
	PLuaBPVar CreateVarFromInt(int Value);// 0x5ddbe3fee041
	PLuaBPVar CreateVarFromBool(bool Value);// 0x5ddae3fee041
	PLuaBPVar CallToLuaWithArgs(Object* WorldContextObject, FString FunctionName, out const PLuaBPVar[] Args, FString StateName);// 0x5dd9e3fee041
	PLuaBPVar CallToLua(Object* WorldContextObject, FString FunctionName, FString StateName);// 0x5dd8e3fee041

--------------------------------
Class: PLuaDelegate.Object
	Function* UFunction;//[Offset: 0x30, Size: 0x8]
	void EventTrigger();// 0x5de4e3fee041

--------------------------------
Class: PLuaUserWidget.UserWidget.Widget.Visual.Object
	FString LuaFilePath;//[Offset: 0x318, Size: 0x10]
	FString LuaStateName;//[Offset: 0x328, Size: 0x10]
	PLuaBPVar CallLuaMember(FString FunctionName, out const PLuaBPVar[] Args);// 0x5de5e3fee041

--------------------------------
Class: Scale9Grid.Image.Widget.Visual.Object

--------------------------------
Class: WaterfallScrollView.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x140, Size: 0x248]
	SlateWidgetStyleAsset* Style;//[Offset: 0x388, Size: 0x8]
	class UserWidget* TemplateWidget;//[Offset: 0x390, Size: 0x8]
	int ItemCount;//[Offset: 0x398, Size: 0x4]
	int ColumnCount;//[Offset: 0x39c, Size: 0x4]
	delegate onReachTop;//[Offset: 0x3a0, Size: 0x10]
	delegate onReachBottom;//[Offset: 0x3b0, Size: 0x10]
	enum ConsumeMouseWheel;//[Offset: 0x3c0, Size: 0x1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 0x1]
	Widget*[] recycleItemList;//[Offset: 0x458, Size: 0x10]
	void ScrollToStart();// 0x5df9e3fee041
	void RefreshLayout(int Index);// 0x5df8e3fee041
	void Fill();// 0x5df7e3fee041
	void Clear();// 0x5df6e3fee041

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 0x90]
	SlateBrush BottomShadowBrush;//[Offset: 0x98, Size: 0x90]
	SlateBrush LeftShadowBrush;//[Offset: 0x128, Size: 0x90]
	SlateBrush RightShadowBrush;//[Offset: 0x1b8, Size: 0x90]

--------------------------------
Class: UFixManager.Object
	UFixItem*[] fixItemLis;//[Offset: 0x38, Size: 0x10]
	void UpLoadUFix(FString svnVer, FString Path, FString devId);// 0x5e01e3fee041
	void UFixDelete(FString svnVer, FString Path, FString devId);// 0x5e00e3fee041
	void TryHotFix();// 0x5dffe3fee041
	FString GetSuceedString();// 0x5dfee3fee041
	UFixManager* GetInstance();// 0x5dfde3fee041
	FString GetFailedString();// 0x5dfce3fee041
	FString GetDeviceId();// 0x5dfbe3fee041
	UFixItem* FindFixItemListPredicate(out FString fixFileName);// 0x5dfae3fee041

--------------------------------
Class: UFixItem.Object

--------------------------------
Class: MFCSettingsComponent.ActorComponent.Object
	MaterialParameterCollection* TargetMFC;//[Offset: 0xb8, Size: 0x8]
	ScalarParameterSetting[] ScalarParameterSettings;//[Offset: 0xc0, Size: 0x10]
	VectorParameterSetting[] VectorParameterSettings;//[Offset: 0xd0, Size: 0x10]
	void UpdateMFCParamValues(bool bUseResetValue);// 0x5e02e3fee041

--------------------------------
Class: ScalarParameterSetting
	FString Name;//[Offset: 0x0, Size: 0x10]
	float Value;//[Offset: 0x10, Size: 0x4]
	float ResetValue;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: VectorParameterSetting
	FString Name;//[Offset: 0x0, Size: 0x10]
	LinearColor Value;//[Offset: 0x10, Size: 0x10]
	LinearColor ResetValue;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: UAShadowSettingComponent.SceneComponent.ActorComponent.Object
	byte ShadowMode;//[Offset: 0x202, Size: 0x1]
	int CSMResolutionScale;//[Offset: 0x204, Size: 0x4]
	bool bEnableCSMCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	float BoundsRadius;//[Offset: 0x20c, Size: 0x4]
	bool bLockViewSettingsWhenSetupShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	float LockShadowFOV;//[Offset: 0x214, Size: 0x4]
	float LockShadowNearPlane;//[Offset: 0x218, Size: 0x4]
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x220, Size: 0x8]
	DirectionalLightComponent* DirectionalLightComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: UAClimateExtraParametersControlComponent.ActorComponent.Object
	float Cloud2DDetailsTiling;//[Offset: 0xb8, Size: 0x4]
	float Cloud2DDetailsWarping;//[Offset: 0xbc, Size: 0x4]
	float Cloud2DOverallStrength;//[Offset: 0xc0, Size: 0x4]
	LinearColor SkyAndCloudTint;//[Offset: 0xc4, Size: 0x10]
	MaterialParameterCollection* MPC;//[Offset: 0xd8, Size: 0x8]

--------------------------------
Class: UASkyLightCubemapBakerComponent.MFClimateComponent.ActorComponent.Object
	float[] SceneCapturingTODTimes;//[Offset: 0xe8, Size: 0x10]
	SkyLight* SkyLight;//[Offset: 0xf8, Size: 0x8]
	CubemapDataCollection[] CubemapDataCollections;//[Offset: 0x100, Size: 0x10]

--------------------------------
Class: CubemapDataCollection
	int ConfigId;//[Offset: 0x0, Size: 0x4]
	CubemapData[] DataArray;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CubemapData
	float TODTime;//[Offset: 0x0, Size: 0x4]
	TextureCube* CubemapTexture;//[Offset: 0x8, Size: 0x28]
	float AverageBrightness;//[Offset: 0x30, Size: 0x4]
	float[] IrradianceEnvironmentMapFloats;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: UASkyLightCubemapUpdaterComponent.MFClimateComponent.ActorComponent.Object
	SkyLight* SkyLight;//[Offset: 0xd0, Size: 0x8]
	TextureCube* SkylightCubemap;//[Offset: 0xd8, Size: 0x8]

--------------------------------
Class: MotoSynthPreset.Object
	MotoSynthRuntimeSettings Settings;//[Offset: 0x28, Size: 0x68]

--------------------------------
Class: MotoSynthRuntimeSettings
	bool bSynthToneEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float SynthToneVolume;//[Offset: 0x4, Size: 0x4]
	float SynthToneFilterFrequency;//[Offset: 0x8, Size: 0x4]
	int SynthOctaveShift;//[Offset: 0xc, Size: 0x4]
	bool bGranularEngineEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float GranularEngineVolume;//[Offset: 0x14, Size: 0x4]
	float GranularEnginePitchScale;//[Offset: 0x18, Size: 0x4]
	int NumSamplesToCrossfadeBetweenGrains;//[Offset: 0x1c, Size: 0x4]
	int NumGrainTableEntriesPerGrain;//[Offset: 0x20, Size: 0x4]
	int GrainTableRandomOffsetForConstantRPMs;//[Offset: 0x24, Size: 0x4]
	int GrainCrossfadeSamplesForConstantRPMs;//[Offset: 0x28, Size: 0x4]
	MotoSynthSource* AccelerationSource;//[Offset: 0x30, Size: 0x8]
	MotoSynthSource* DecelerationSource;//[Offset: 0x38, Size: 0x8]
	bool bStereoWidenerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float StereoDelayMsec;//[Offset: 0x44, Size: 0x4]
	float StereoFeedback;//[Offset: 0x48, Size: 0x4]
	float StereoWidenerWetlevel;//[Offset: 0x4c, Size: 0x4]
	float StereoWidenerDryLevel;//[Offset: 0x50, Size: 0x4]
	float StereoWidenerDelayRatio;//[Offset: 0x54, Size: 0x4]
	bool bStereoWidenerFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	float StereoWidenerFilterFrequency;//[Offset: 0x5c, Size: 0x4]
	float StereoWidenerFilterQ;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: MotoSynthSource.Object
	bool bConvertTo8Bit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float DownSampleFactor;//[Offset: 0x2c, Size: 0x4]
	RuntimeFloatCurve RPMCurve;//[Offset: 0x30, Size: 0x88]
	float[] SourceData;//[Offset: 0xb8, Size: 0x10]
	int16[] SourceDataPCM;//[Offset: 0xc8, Size: 0x10]
	int SourceSampleRate;//[Offset: 0xd8, Size: 0x4]
	GrainTableEntry[] GrainTable;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: GrainTableEntry
	int SampleIndex;//[Offset: 0x0, Size: 0x4]
	float RPM;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SynthComponentMoto.SynthComponent.SceneComponent.ActorComponent.Object
	MotoSynthPreset* MotoSynthPreset;//[Offset: 0x6d0, Size: 0x8]
	float RPM;//[Offset: 0x6d8, Size: 0x4]
	void SetSettings(out const MotoSynthRuntimeSettings InSettings);// 0x5e06e3fee041
	void SetRPM(float InRPM, float InTimeSec);// 0x5e05e3fee041
	bool IsEnabled();// 0x5e04e3fee041
	void GetRPMRange(out float OutMinRPM, out float OutMaxRPM);// 0x5e03e3fee041

--------------------------------
Class: GrassHDBuildData.Object
	TextureRenderTarget2D* RenderTarget2D;//[Offset: 0xa8, Size: 0x8]
	enum State;//[Offset: 0x3a0, Size: 0x1]
	FString Description;//[Offset: 0x3a8, Size: 0x10]

--------------------------------
Class: GrassHDComponent.ActorComponent.Object
	GrassHDBuildData*[] BuildDataCollection;//[Offset: 0xb8, Size: 0x10]

--------------------------------
Class: GrassHDData.AssetUserData.Object
	GrassHDRuntimeData* RuntimeData;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: GrassHDRuntimeData.Object
	byte[] CompressedData;//[Offset: 0x28, Size: 0x10]
	int OBBsNum;//[Offset: 0x38, Size: 0x4]
	bool bRequireCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	Vector ComponentOrigin;//[Offset: 0x40, Size: 0xc]
	Vector2D LightmapBaseBias;//[Offset: 0x4c, Size: 0x8]
	Vector2D LightmapBaseScale;//[Offset: 0x54, Size: 0x8]
	Vector2D ShadowmapBaseBias;//[Offset: 0x5c, Size: 0x8]
	Vector2D ShadowmapBaseScale;//[Offset: 0x64, Size: 0x8]
	Vector2D LightMapComponentBias;//[Offset: 0x6c, Size: 0x8]
	Vector2D LightMapComponentScale;//[Offset: 0x74, Size: 0x8]
	Vector MeshBoxMin;//[Offset: 0x7c, Size: 0xc]
	Vector MeshBoxMax;//[Offset: 0x88, Size: 0xc]
	int DesiredInstancesPerLeaf;//[Offset: 0x94, Size: 0x4]
	int RandomSeed;//[Offset: 0x98, Size: 0x4]
	Vector DrawScale;//[Offset: 0x9c, Size: 0xc]
	IntPoint SectionBase;//[Offset: 0xa8, Size: 0x8]
	IntPoint LandscapeSectionOffset;//[Offset: 0xb0, Size: 0x8]
	Vector LandscapeLocationOffset;//[Offset: 0xb8, Size: 0xc]

--------------------------------
Class: GrassHDSettingsActor.Actor.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]

--------------------------------
Class: MaterialExpressionLandscapeGrassHDOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput GrassLayer;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput MinGrassWeight;//[Offset: 0x50, Size: 0xc]
	ExpressionInput Tolerance;//[Offset: 0x64, Size: 0xc]

--------------------------------
Class: AndroidMediaSettings.Object
	bool CacheableVideoSampleBuffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: LayersBlueprintLibrary.BlueprintFunctionLibrary.Object
	void RemoveActorFromLayer(Actor* InActor, out const ActorLayer Layer);// 0x5e09e3fee041
	Actor*[] GetActors(Object* WorldContextObject, out const ActorLayer ActorLayer);// 0x5e08e3fee041
	void AddActorToLayer(Actor* InActor, out const ActorLayer Layer);// 0x5e07e3fee041

--------------------------------
Class: ActorLayer
	FName Name;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AsyncTaskCopyFile.BlueprintAsyncActionBase.Object
	delegate OnCompleted;//[Offset: 0x30, Size: 0x10]
	void CopyFileDelegate__DelegateSignature(FString TargetPath, bool InResult);// 0x1e2ae3fee041
	AsyncTaskCopyFile* CopyFile(FString InSource, FString InDest, bool InPhysical);// 0x1e29e3fee041

--------------------------------
Class: AsyncTaskDownloadFile.BlueprintAsyncActionBase.Object
	delegate DownloadFileDelegate;//[Offset: 0x30, Size: 0x10]
	bool StartDownload();// 0x1e3ae3fee041
	void SetFileTotalSize(int InFileSize);// 0x1e39e3fee041
	bool ResumeTask();// 0x1e38e3fee041
	void RequestFileHead(bool InDownloadOnSucceed);// 0x1e37e3fee041
	bool PauseTask();// 0x1e36e3fee041
	enum GetTaskState();// 0x1e35e3fee041
	int GetLastHttpCode();// 0x1e34e3fee041
	FString GetFileURL();// 0x1e33e3fee041
	int GetFileTotalSize();// 0x1e32e3fee041
	FString GetFileName(bool bFullPath);// 0x1e31e3fee041
	int GetDownloadedSize();// 0x1e30e3fee041
	int GetCurrentSize();// 0x1e2fe3fee041
	void DownloadFileDelegate__DelegateSignature(const AsyncTaskDownloadFile* InObj, enum InEventID);// 0x1e2de3fee041
	AsyncTaskDownloadFile* CreateDownloadFileTask(FString URL, FString FileDirectory, bool InOverride);// 0x1e2ce3fee041
	bool CancelTask();// 0x1e2be3fee041

--------------------------------
Class: BFLPlatformFile.BlueprintFunctionLibrary.Object
	bool UnmountPak(FString InPakFile);// 0x5e31e3fee041
	int StatDirectorySize_Physical(FString InDirectory, bool InWithSubDir, FString InExtName);// 0x5e30e3fee041
	int StatDirectorySize(FString InDirectory, bool InWithSubDir, FString InExtName);// 0x5e2fe3fee041
	FString[] SortStringArray(out const FString[] InVal, bool InReversed);// 0x5e2ee3fee041
	bool SaveStringToFile(FString inString, FString InFilePath);// 0x5e2de3fee041
	int ReloadAssetRegistry();// 0x5e2ce3fee041
	bool MoveFile(FString InSourceFile, FString InDestFile);// 0x5e2be3fee041
	bool MountPak(FString InPakFile, int InOrder, FString InMountPoint);// 0x5e2ae3fee041
	FString[] LoadFileToStringArray(FString InFilePath);// 0x5e29e3fee041
	FString LoadFileToString_Physical(FString InFilePath);// 0x5e28e3fee041
	FString LoadFileToString(FString InFilePath);// 0x5e27e3fee041
	FString GetStringFromIni(FString InSection, FString InKey, FString InIniName);// 0x5e26e3fee041
	FString[] GetStringArrayFromIni(FString InSection, FString InKey, FString InIniName);// 0x5e25e3fee041
	FString GetShaderProgramBinaryPath();// 0x5e24e3fee041
	FString GetProjectPathForExternalAppForWrite();// 0x5e23e3fee041
	FString GetPath(FString InFilename);// 0x5e22e3fee041
	FString[] GetMountedPakFilenames();// 0x5e21e3fee041
	int GetIntFromIni(FString InSection, FString InKey, FString InIniName);// 0x5e20e3fee041
	FString GetGlobalIniFlePath(FString InIniName);// 0x5e1fe3fee041
	FString GetFileBaseName(FString InFilename, bool InWithExt);// 0x5e1ee3fee041
	int64 GetDiskFreeSpace();// 0x5e1de3fee041
	FString[] FindFiles_Physical(FString InDirectory, FString InExtName, bool IncludeSubDir);// 0x5e1ce3fee041
	FString[] FindFiles(FString InDirectory, FString InExtName, bool IncludeSubDir);// 0x5e1be3fee041
	int FileSize_Physical(FString InFilePath);// 0x5e1ae3fee041
	int FileSize(FString InFilePath);// 0x5e19e3fee041
	bool FileExists_Physical(FString InFilePath);// 0x5e18e3fee041
	bool FileExists(FString InFilePath);// 0x5e17e3fee041
	FString[] DumpIni(FString InIniName);// 0x5e16e3fee041
	bool DirectoryExists_Physical(FString InDirectory);// 0x5e15e3fee041
	bool DirectoryExists(FString InDirectory);// 0x5e14e3fee041
	int DeleteFilesbyType(FString InDir, FString InType, bool InIncludeSub);// 0x5e13e3fee041
	bool DeleteFile(FString InFilePath);// 0x5e12e3fee041
	bool DeleteDirectoryTree(FString InDirectory);// 0x5e11e3fee041
	bool DeleteDirectory(FString InDirectory);// 0x5e10e3fee041
	bool CreateDirectoryTree(FString InDirectory);// 0x5e0fe3fee041
	bool CreateDirectory(FString InInDirectory);// 0x5e0ee3fee041
	bool CopyFile_Physical(FString InSourceFile, FString InDestFile);// 0x5e0de3fee041
	bool CopyFile(FString InSourceFile, FString InDestFile);// 0x5e0ce3fee041
	FString ComputeStringMD5(FString inString, bool InLowerResult);// 0x5e0be3fee041
	int CheckAndroidRooted();// 0x5e0ae3fee041

--------------------------------
Class: GeoSensitiveWidget.UserWidget.Widget.Visual.Object
	delegate OnPaintSizeChange;//[Offset: 0x290, Size: 0x10]

--------------------------------
Class: HttpTask.Object
	delegate HttpResponseDelegate;//[Offset: 0x28, Size: 0x10]
	delegate HttpGetResponseDelegate;//[Offset: 0x38, Size: 0x10]
	delegate HttpGetThirdPartyChannelsFriendListDelegate;//[Offset: 0x48, Size: 0x10]
	FString ScreenNotifyName;//[Offset: 0x58, Size: 0x10]
	FString LuaNotifyName;//[Offset: 0x68, Size: 0x10]
	void StartHttpGetTask(FString PipelineUrl);// 0x1e4de3fee041
	void StartDevopsTask(FString PipelineUrl);// 0x1e4ce3fee041
	void StartCppvmDevopsTask(FString PipelineUrl);// 0x1e4be3fee041
	void SendScreenTask(FString NotifyName);// 0x1e4ae3fee041
	void SendProfileStat(FString NotifyName);// 0x1e49e3fee041
	void SendMemReport(FString NotifyName);// 0x1e48e3fee041
	void SendLogTask(FString NotifyName, FString URL, FString LogName);// 0x1e47e3fee041
	void SendLogReportLoginError(FString NotifyName, FString URL, FString LogName);// 0x1e46e3fee041
	bool HttpUpLoadFileWithParams(FString URL, FString FilePath, <FString,FString> Params);// 0x1e45e3fee041
	void HttpUpLoadDelegate__DelegateSignature(FString RspContent);// 0x1e44e3fee041
	void HttpPostRequest(FString URL, FString StrContent, FString AuthString);// 0x1e43e3fee041
	void HttpPostLandun(FString URL);// 0x1e42e3fee041
	void HttpDownLoadLuaFile(FString NotifyName, bool bFirstRequest);// 0x1e41e3fee041
	void HttpDownLoadDebugFile(FString NotifyName);// 0x1e40e3fee041
	void GetThirdPartyChannelsFriendList(FString InputChannelid, FString GameId, FString Os, FString Token, FString Openid);// 0x1e3fe3fee041
	FString GetSaveLogDir();// 0x1e3ee3fee041
	HttpTask* Get();// 0x1e3de3fee041
	void DownloadRTXPakPackage(FString RTX);// 0x1e3ce3fee041

--------------------------------
Class: LaunchHelper.Object
	FString LaunchURL(FString InURL, FString InParam);// 0x5e36e3fee041
	bool LaunchAndroidPackage(FString InPackageName, FString InParamName, FString InParamValue);// 0x5e35e3fee041
	bool IsAndroidPackageInstalled(FString InPackageName);// 0x5e34e3fee041
	bool GotoGooglePlay(FString InPackageName);// 0x5e33e3fee041
	FString GetLaunchParam(FString InKey);// 0x5e32e3fee041

--------------------------------
Class: LoopedPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	int DefaultElementIndex;//[Offset: 0x150, Size: 0x4]
	int NextElementIndex;//[Offset: 0x154, Size: 0x4]
	Margin SlotPadding;//[Offset: 0x158, Size: 0x10]
	float AnimTime;//[Offset: 0x168, Size: 0x4]
	bool EnableTouchEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1]
	bool bTestAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	bool bReverseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e, Size: 0x1]
	float MinTouchDelta;//[Offset: 0x170, Size: 0x4]
	delegate OnScrollEvent;//[Offset: 0x178, Size: 0x10]
	delegate OnAnimEndEvent;//[Offset: 0x188, Size: 0x10]
	delegate OnButtonClickedEvent;//[Offset: 0x198, Size: 0x10]
	void SyncProperties();// 0x1e6ae3fee041
	void OnScrollEvent__DelegateSignature(float InValue);// 0x1e69e3fee041
	void OnAnimEndEvent__DelegateSignature(int InValue);// 0x1e68e3fee041
	void MoveToPrevioudElement(bool bUseAnim);// 0x1e67e3fee041
	void MoveToNextElement(bool bUseAnim);// 0x1e66e3fee041
	void MoveToElementByIndex(int InIndex, bool bUseAnim);// 0x1e65e3fee041
	bool IsPlayAnim();// 0x1e64e3fee041
	int GetViewElementIndex();// 0x1e63e3fee041

--------------------------------
Class: PosSensitiveWidget.UserWidget.Widget.Visual.Object
	delegate OnPaintPosChange;//[Offset: 0x298, Size: 0x10]

--------------------------------
Class: ShowBtnOutlineHelper.Actor.Object
	Material* TheOutlineMaterial;//[Offset: 0x2e0, Size: 0x8]
	int ButtonTempId;//[Offset: 0x2e8, Size: 0x4]
	<Button*,SlateBrush> BtnOriginFSlateBrush;//[Offset: 0x340, Size: 0x50]
	<Button*,float> BtnOriginAlpha;//[Offset: 0x390, Size: 0x50]
	float RefreshTimerValue;//[Offset: 0x3e0, Size: 0x4]
	float RefreshTimerThreshold;//[Offset: 0x3e4, Size: 0x4]
	bool ShouldTransSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	bool IsAutomat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 0x1]
	bool IsOutlineOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ea, Size: 0x1]
	void TransSizeToButtonMaterials();// 0x5e3be3fee041
	void SetOutlineOn();// 0x5e3ae3fee041
	void SetOutlineOff();// 0x5e39e3fee041
	void RevertAllButtonOutline();// 0x5e38e3fee041
	void ActiveAllButtonOutline();// 0x5e37e3fee041

--------------------------------
Class: ShowTouch.Object
	void StopShow();// 0x5e3ee3fee041
	void StartShow();// 0x5e3de3fee041
	void SetIsPrintToScreen(bool InState);// 0x5e3ce3fee041

--------------------------------
Class: StatUMGWidget.Object
	void ExecWidgetStat(FString UMGName);// 0x5e40e3fee041
	void DumpDetailWidgetInfo(out FString[] Results);// 0x5e3fe3fee041

--------------------------------
Class: UASubmitBug.Object
	delegate ScreenShotEvent;//[Offset: 0x28, Size: 0x10]
	void SubmitBug(FString BugContent);// 0x1e5ee3fee041
	void StopVideoCapture();// 0x1e5de3fee041
	void StartVideoCapture();// 0x1e5ce3fee041
	void SendVideo(FString CosVideoPath);// 0x1e5be3fee041
	void SendScreen(FString CosScreenPath);// 0x1e5ae3fee041
	void SendLogAndVideo(FString CosLogPath, FString CosVideoPath, FString CosScreenPath);// 0x1e59e3fee041
	void SendLog(FString CosLogPath);// 0x1e58e3fee041
	void ScreenCaptureDelegate__DelegateSignature();// 0x1e57e3fee041
	bool IsVideoReady();// 0x1e56e3fee041
	float GetCaptureTime();// 0x1e55e3fee041
	bool GetCaptureState();// 0x1e54e3fee041
	UASubmitBug* Get();// 0x1e53e3fee041
	void DragWidget(UserWidget* panel, out const Geometry InGeometry, out const PointerEvent InMouseEvent);// 0x1e52e3fee041
	bool DeleteLocalVideo();// 0x1e51e3fee041
	bool ClipVideo();// 0x1e50e3fee041
	void CaptureScreen();// 0x1e4fe3fee041

--------------------------------
Class: TinyHotfixFile.Object
	int HotfixIniFile(FString Filename);// 0x5e41e3fee041

--------------------------------
Class: TutorialModeInputProcessor.Object
	delegate OnPointerDownEvent;//[Offset: 0x28, Size: 0x10]
	delegate OnPointerUpEvent;//[Offset: 0x38, Size: 0x10]
	bool UnhookInputProcessor();// 0x5e47e3fee041
	void SetNextHookAreaRect(Vector2D InLeftTop, Vector2D InRightBottom);// 0x5e46e3fee041
	void SetContext(Object* InContext);// 0x5e45e3fee041
	void ResumeHook();// 0x5e44e3fee041
	void PauseHook();// 0x5e43e3fee041
	bool HookInputProcessor();// 0x5e42e3fee041

--------------------------------
Class: UABuglyHelper.Object
	void SendBuglyResultHandler(FString Result);// 0x5e56e3fee041
	void SaveUrl(FString Md5, FString URL);// 0x5e55e3fee041
	void SaveTime(FString Md5, FString Time);// 0x5e54e3fee041
	void SaveMd5(FString Md5);// 0x5e53e3fee041
	void SaveBugly(FString URL);// 0x5e52e3fee041
	void RestartSend();// 0x5e51e3fee041
	void RemoveMd5(FString Md5);// 0x5e50e3fee041
	bool IsContainMd5(FString Md5);// 0x5e4fe3fee041
	FString InitLogTime();// 0x5e4ee3fee041
	bool HasTimeInFile(FString LOGTime, FString LogName);// 0x5e4de3fee041
	FString[] GetMd5Table();// 0x5e4ce3fee041
	FString GetMd5ByUrl(FString URL);// 0x5e4be3fee041
	BuglyData GetBuglyInfo(FString Md5);// 0x5e4ae3fee041
	FString CombineUrlKey(FString Md5);// 0x5e49e3fee041
	FString CombineTimeKey(FString Md5);// 0x5e48e3fee041

--------------------------------
Class: BuglyData
	FString URL;//[Offset: 0x0, Size: 0x10]
	FString Time;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: UAButtonWidget.UserWidget.Widget.Visual.Object
	float ClickTime;//[Offset: 0x288, Size: 0x4]
	bool BannedClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	LinearColor normalTxtShowColor;//[Offset: 0x290, Size: 0x10]
	LinearColor pressTxtShowColor;//[Offset: 0x2a0, Size: 0x10]
	Vector2D normalShadowOffect;//[Offset: 0x2b0, Size: 0x8]
	Vector2D pressShadowOffect;//[Offset: 0x2b8, Size: 0x8]
	float ImagePaddingLeft;//[Offset: 0x2c0, Size: 0x4]
	float ImagePaddingTop;//[Offset: 0x2c4, Size: 0x4]
	float ImagePaddingRight;//[Offset: 0x2c8, Size: 0x4]
	float ImagePaddingButtom;//[Offset: 0x2cc, Size: 0x4]
	float TxtPaddingLeft;//[Offset: 0x2d0, Size: 0x4]
	float TxtPaddingTop;//[Offset: 0x2d4, Size: 0x4]
	float TxtPaddingRight;//[Offset: 0x2d8, Size: 0x4]
	float TxtPaddingButtom;//[Offset: 0x2dc, Size: 0x4]
	float PressedPaddingLeft;//[Offset: 0x2e0, Size: 0x4]
	float PressedPaddingTop;//[Offset: 0x2e4, Size: 0x4]
	float PressedPaddingRight;//[Offset: 0x2e8, Size: 0x4]
	float PressedPaddingButtom;//[Offset: 0x2ec, Size: 0x4]
	bool isGray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	delegate OnClicked;//[Offset: 0x2f8, Size: 0x10]
	delegate OnPressed;//[Offset: 0x308, Size: 0x10]
	delegate OnReleased;//[Offset: 0x318, Size: 0x10]
	delegate OnHovered;//[Offset: 0x328, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x338, Size: 0x10]
	Button* _button;//[Offset: 0x348, Size: 0x8]
	Image* _imageNormal;//[Offset: 0x350, Size: 0x8]
	Image* _imagePress;//[Offset: 0x358, Size: 0x8]
	TextBlock* _textNormal;//[Offset: 0x360, Size: 0x8]
	TextBlock* _textPress;//[Offset: 0x368, Size: 0x8]
	OverlaySlot* _imageNormalSlot;//[Offset: 0x370, Size: 0x8]
	OverlaySlot* _imagePressSlot;//[Offset: 0x378, Size: 0x8]
	OverlaySlot* _textNormalSlot;//[Offset: 0x380, Size: 0x8]
	OverlaySlot* _textPressSlot;//[Offset: 0x388, Size: 0x8]
	void SetGray(bool gray);// 0x5e5de3fee041
	void OnRefreshPressState(int IsPressed);// 0x5e5ce3fee041
	void OnButtonUnHovered();// 0x5e5be3fee041
	void OnButtonReleased();// 0x5e5ae3fee041
	void OnButtonPress();// 0x5e59e3fee041
	void OnButtonHovered();// 0x5e58e3fee041
	void OnButtonClick();// 0x5e57e3fee041

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x68, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x78, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x79, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x5fc9e3fee041
	void SetPadding(Margin InPadding);// 0x5fc8e3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x5fc7e3fee041

--------------------------------
Class: UACharacterDefaultInventoryCompBase.SGCharacterDefaultInventoryComponent.ActorComponent.Object
	bool bOwnedByAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool bUseSlicedInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	class SGInventory[] FakeAvatar_Head;//[Offset: 0x100, Size: 0x10]
	class SGInventory[] FakeAvatar_Torse;//[Offset: 0x110, Size: 0x10]
	class SGInventory[] FakeAvatar_Gloves;//[Offset: 0x120, Size: 0x10]
	class SGInventory[] FakeAvatar_Legs;//[Offset: 0x130, Size: 0x10]
	class SGInventory[] FakeAvatar_Shoes;//[Offset: 0x140, Size: 0x10]
	class SGInventory[] FakeAvatar_Watch;//[Offset: 0x150, Size: 0x10]
	bool bTestMultiAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	bool bSpawnSecondMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 0x1]
	<uint64,SGInventory*> PlayerItemIdtoInventoryMap;//[Offset: 0x168, Size: 0x50]
	SlicedInitParams* SlicedInitParams;//[Offset: 0x1b8, Size: 0x8]
	SGCharacterInventoryGiveComponent* InventoryGiveComponent;//[Offset: 0x1c0, Size: 0x8]
	SGPlayerItemInfoBase*[] CachedDropItems;//[Offset: 0x1c8, Size: 0x10]
	<int64,int> CacheInventoryValues;//[Offset: 0x1d8, Size: 0x50]
	class Actor[] TestInventoryPool_Weapon;//[Offset: 0x228, Size: 0x10]
	class Actor[] TestInventoryPool_MeleeWeapon;//[Offset: 0x238, Size: 0x10]
	class Actor[] TestInventoryPool_Bag;//[Offset: 0x248, Size: 0x10]
	class Actor[] TestInventoryPool_VestBag;//[Offset: 0x258, Size: 0x10]
	class Actor[] TestInventoryPool_Helmet;//[Offset: 0x268, Size: 0x10]
	class Actor[] TestInventoryPool_Vest;//[Offset: 0x278, Size: 0x10]
	void InitCharacterBadges(out const uint64[] InBadgeItemIds, out const uint32[] AtttachPositiones);// 0x5e5fe3fee041
	void InitCharacterAvatars(out const uint64[] InAvatarItemIds);// 0x5e5ee3fee041

--------------------------------
Class: SlicedInitParams.Object
	InitInventoryParams[] InitEquipmentParamsList;//[Offset: 0x40, Size: 0x10]
	InitInventoryParams[] InitItemParamsList;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: InitInventoryParams
	SGPlayerItemInfoBase* item;//[Offset: 0x0, Size: 0x8]
	Actor* ParentInventory;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: UACharacterAIRandomInventoryComponent.UACharacterDefaultInventoryCompBase.SGCharacterDefaultInventoryComponent.ActorComponent.Object
	int TryTimesBeforeUsingDefault;//[Offset: 0x290, Size: 0x4]
	float TryInterval;//[Offset: 0x294, Size: 0x4]
	int TryTimesBeforeUsingDefault_WeaponConfig;//[Offset: 0x298, Size: 0x4]
	float TryInterval_WeaponConfig;//[Offset: 0x29c, Size: 0x4]
	SGInventory* InitWeapon;//[Offset: 0x2a0, Size: 0x8]
	ItemInfoForRand[] SuitArray;//[Offset: 0x300, Size: 0x10]
	SGInventory* InventoryInUsing;//[Offset: 0x310, Size: 0x8]
	float LastTimeUseInventory;//[Offset: 0x318, Size: 0x4]
	void GiveRandSuit(Character* Character);// 0x5e61e3fee041
	FString GetGivenInventoryCountInfo();// 0x5e60e3fee041

--------------------------------
Class: ItemInfoForRand
	<int,int> SuitItemsInfo;//[Offset: 0x0, Size: 0x50]
	int Weight;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: UACharacterDefaultInventoryComp.UACharacterDefaultInventoryCompBase.SGCharacterDefaultInventoryComponent.ActorComponent.Object
	bool bForceGiveInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bDelayBeginPlayOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	int64[] StandAloneAvatarArray;//[Offset: 0x290, Size: 0x10]
	void SpawnRandomAwardsResultDoToast(out const int[] SpawnItemIDs, out const int[] SpawnItemNums);// 0x5e6ce3fee041
	void ServerSaveMinimumEquipInfo();// 0x5e6be3fee041
	void ResetEndurance(SGPlayerState* PS);// 0x5e6ae3fee041
	void PostInit();// 0x5e69e3fee041
	void OnUsedInventory(Character* Character, SGInventory* Inventory);// 0x5e68e3fee041
	void OnPlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x5e67e3fee041
	void OnCharacterPostDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x5e66e3fee041
	void MarkInHighRatio();// 0x5e65e3fee041
	void InitStandaloneCharacterAvatars();// 0x5e64e3fee041
	void ClientReceiveSpawnRandomAwardsResult(const int[] SpawnItemIDs, const int[] SpawnItemNums);// 0x5e63e3fee041
	bool CheckisInTutorialLevel();// 0x5e62e3fee041

--------------------------------
Class: UACharacterPreviewComponent.SGCharacterPreviewComponent.ActorComponent.Object
	<FString,SceneCaptureConfig> SceneCaptureConfigs;//[Offset: 0x130, Size: 0x50]
	class SGPreviewCaptureLightsSets* CaptureLightSets;//[Offset: 0x180, Size: 0x8]
	<FString,FString> CaptureCharacterFacialSequenceName;//[Offset: 0x188, Size: 0x50]
	<FString,FString> CaptureCharacterSequenceName;//[Offset: 0x1d8, Size: 0x50]
	FName PreviewCharacterFPTag;//[Offset: 0x228, Size: 0x8]
	FString CurCaptureSceneName;//[Offset: 0x230, Size: 0x10]
	SGCaptureCharacterLights* Capturelight;//[Offset: 0x248, Size: 0x8]
	void WaitAnimationUpdate();// 0x5e83e3fee041
	void UpdateSceneCaptureTextureTargetSize();// 0x5e82e3fee041
	void UpdateCharacterSequence();// 0x5e81e3fee041
	void SwitchCaptureCameraConfig();// 0x5e80e3fee041
	void StopCaptureEveryFrame();// 0x5e7fe3fee041
	void SetTimerCheckMeshFullyStreamedIn(bool bStart);// 0x5e7ee3fee041
	void OnWeaponAllMeshLoaded(SGWeapon* TargetWeapon);// 0x5e7de3fee041
	void OnUpdateAvatarsFinish();// 0x5e7ce3fee041
	void OnUpdateAvatarsAddInventory(SGInventory* AvatarInventory);// 0x5e7be3fee041
	void OnSetCurrentWeapon(SGInventory* Weapon);// 0x5e7ae3fee041
	void OnInvMeshDecideLoadAnimInstance(SGInventory* Inventory, out bool bUseGameAnimInLobby);// 0x5e79e3fee041
	void OnInventoryLoadComplete(int TaskId);// 0x5e78e3fee041
	void OnEquipMeshDecideLoadSkeletalMesh(SGInventory* AvatarInventory, out bool bUseGameMeshInLobby);// 0x5e77e3fee041
	void OnCharacterStaticMeshLoaded(StaticMesh* StaticMesh);// 0x5e76e3fee041
	void OnCharacterSkeletalMeshLoaded(SkeletalMesh* SkeletalMesh);// 0x5e75e3fee041
	void OnCharacterRemoveInventoryEvent(Character* Character, SGInventory* Inventory);// 0x5e74e3fee041
	void OnCharacterPreUpdateAvatars(out class SGInventory[] CachedAvatarInventories);// 0x5e73e3fee041
	void OnCharacterAvatarRemove(SGInventory* Inv);// 0x5e72e3fee041
	void OnCharacterAvatarMeshLoaded(MeshComponent* MeshComp);// 0x5e71e3fee041
	void OnCharacterAllAvatarMeshLoaded(int AvatarCount);// 0x5e70e3fee041
	void OnAllMeshLoaded();// 0x5e6fe3fee041
	void OnAllAvatarsMeshLoadFinish(int AvatarCount);// 0x5e6ee3fee041
	bool CheckCaptureMeshIsFullyStreamedIn();// 0x5e6de3fee041

--------------------------------
Class: SceneCaptureConfig
	Transform CameraTransform;//[Offset: 0x0, Size: 0x30]
	float FOV;//[Offset: 0x30, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x38, Size: 0x8]
	bool bIsCasual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	FString Light_Rifle_Male;//[Offset: 0x48, Size: 0x10]
	FString Light_Pistol_Male;//[Offset: 0x58, Size: 0x10]
	FString Light_Melee_Male;//[Offset: 0x68, Size: 0x10]
	FString Light_Rifle_Female;//[Offset: 0x78, Size: 0x10]
	FString Light_Pistol_Female;//[Offset: 0x88, Size: 0x10]
	FString Light_Melee_Female;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: UAClipImageWidget.UserWidget.Widget.Visual.Object
	void OnTextureLoadCompleted(Texture* Tex);// 0x5e85e3fee041
	void AsyncLoadTexture(FString TexPath);// 0x5e84e3fee041

--------------------------------
Class: UACommonConfigStatics.Object
	void SaveLoginDataConfig();// 0x5edae3fee041
	bool ReloadVersionIni(bool InForce);// 0x5ed9e3fee041
	bool PatchVersionIni(FString InResVersion);// 0x5ed8e3fee041
	bool IsOverWritePacket();// 0x5ed7e3fee041
	bool IsForDistribution();// 0x5ed6e3fee041
	bool IsFirstTimeLaunch();// 0x5ed5e3fee041
	bool IsExpClient();// 0x5ed4e3fee041
	void InitConfigFiles();// 0x5ed3e3fee041
	FString GetWXAppID();// 0x5ed2e3fee041
	FString GetVersionCode();// 0x5ed1e3fee041
	FString GetVersionBuildTimestamp();// 0x5ed0e3fee041
	FString GetVersionBuildBranchNames();// 0x5ecfe3fee041
	FString[] GetUObjectLeakWhiteList();// 0x5ecee3fee041
	int GetTGALiveIsDebug();// 0x5ecde3fee041
	FString GetSvnVersion();// 0x5ecce3fee041
	int GetSplashFlowTimeOutSeconds();// 0x5ecbe3fee041
	void GetServerIPConfig(out FString[] ServerIPArr);// 0x5ecae3fee041
	int GetRegisterFlowTimeOutSeconds();// 0x5ec9e3fee041
	void GetQQWXLobbyIpListConfig(out FString[] QQLobbyIpListArr, out FString[] WXLobbyIpListArr);// 0x5ec8e3fee041
	FString GetQQAppID();// 0x5ec7e3fee041
	FString GetPufferUpdateUrl(bool InPrePuffer);// 0x5ec6e3fee041
	int GetPufferProductID();// 0x5ec5e3fee041
	FString GetPackageVersion();// 0x5ec4e3fee041
	FString GetMSDKGameID();// 0x5ec3e3fee041
	void GetMobileQQWXIpConfig(out FString[] MobileQQLobbyUrlArr, out FString[] MobileWXLobbyUrlArr, bool bPreRelease);// 0x5ec2e3fee041
	void GetMobileLoginIpConfig(out FString[] EditorMobileLobbyUrlArr, out FString[] MobileLobbyUrlArr, bool bPreRelease);// 0x5ec1e3fee041
	void GetLoginIpConfig(out FString[] EditorLobbyUrlArr, out FString[] PCLobbyUrlArr);// 0x5ec0e3fee041
	int GetLoginFlowTimeOutSeconds();// 0x5ebfe3fee041
	FString GetLastProgramVersion();// 0x5ebee3fee041
	int GetIntlUpdateReleaseID();// 0x5ebde3fee041
	int GetIntlUpdatePreReleaseID();// 0x5ebce3fee041
	FString GetGuestAppID();// 0x5ebbe3fee041
	FString GetGMESDKGamekey();// 0x5ebae3fee041
	FString GetGMESDKGameID();// 0x5eb9e3fee041
	FString GetGamekey();// 0x5eb8e3fee041
	FString GetGameId();// 0x5eb7e3fee041
	FString GetFlowSettingNextOpenMapName_Startup_UAM();// 0x5eb6e3fee041
	FString GetFlowSettingNextOpenMapName_Startup_UA();// 0x5eb5e3fee041
	FString GetFlowSettingNextOpenMapName_Login();// 0x5eb4e3fee041
	FString GetDolphinUpdateUrl(bool InPreDolphin);// 0x5eb3e3fee041
	FString GetDolphinResourceVersion();// 0x5eb2e3fee041
	FString GetDolphinProgramVersion();// 0x5eb1e3fee041
	int GetDolphinChannelID();// 0x5eb0e3fee041
	void GetCookedMapList(out FString[] CookMapList, out FString[] TestMapList);// 0x5eafe3fee041
	bool GetComplianceFlagC();// 0x5eaee3fee041
	bool GetComplianceFlagB();// 0x5eade3fee041
	bool GetComplianceFlagA();// 0x5eace3fee041
	FString GetCDNUrl();// 0x5eabe3fee041
	FString GetAppVersionDisplayFromVersionID(uint64 ClientVersionID);// 0x5eaae3fee041
	FString GetAppVersionDisplay();// 0x5ea9e3fee041
	FString GetAppVersion64();// 0x5ea8e3fee041
	FString GetAppVersion();// 0x5ea7e3fee041
	FString[] FlushTutorialTipsIndex(bool bIsRead, FString[] TutorialTipsIndexList);// 0x5ea6e3fee041
	FString[] FlushTaskDoneList(bool isRead, FString[] taskDoneIdList);// 0x5ea5e3fee041
	FString FlushSZLobbyUrl(bool bIsRead, FString SZLobbyUrl);// 0x5ea4e3fee041
	FString[] FlushSystemTriggerList(bool bIsRead, FString[] sysTriggerList);// 0x5ea3e3fee041
	FString[] FlushSystemTriggerDoneList(bool bIsRead, FString[] sysTriggerDoneList);// 0x5ea2e3fee041
	FString FlushSHLobbyUrl(bool bIsRead, FString SHLobbyUrl);// 0x5ea1e3fee041
	FString FlushRegionCode(bool bIsRead, FString code);// 0x5ea0e3fee041
	bool FlushOpenPhoneLimitation(bool bIsRead, bool bPhoneLimitationSetting);// 0x5e9fe3fee041
	bool FlushOpenBestLobbyUrlPC(bool bIsRead, bool bOpenBestLobbyUrlPC);// 0x5e9ee3fee041
	bool FlushOpenBestLobbyUrl(bool bIsRead, bool bOpenBestLobbuUrl);// 0x5e9de3fee041
	bool FlushNeedAutoLogin(bool bIsRead, bool needAutoLogin);// 0x5e9ce3fee041
	FString FlushMSDKUrl(bool bIsRead, FString MSDKUrl);// 0x5e9be3fee041
	FString[] FlushMailReceiveList(bool isRead, FString[] mailReceivedTypeList);// 0x5e9ae3fee041
	FString FlushLastServerName(bool bIsRead, FString LastServerIndex);// 0x5e99e3fee041
	FString FlushLastNickName(bool bIsRead, FString LastNickName);// 0x5e98e3fee041
	FString FlushLastLoginName(bool bIsRead, FString LastLoginName);// 0x5e97e3fee041
	FString FlushLastCrashInfo(bool bIsRead, FString LastLastCrashInfo);// 0x5e96e3fee041
	int FlushLastChannelType(bool bIsRead, int LastChannelNum);// 0x5e95e3fee041
	FString[] FlushItemPickList(bool isRead, FString[] itemIDAndTypeList);// 0x5e94e3fee041
	bool FlushIsFirstOpenGame(bool bIsRead, bool bIsFirstOpenGame);// 0x5e93e3fee041
	bool FlushIsFinishCPoint(bool bIsRead, bool isFinshCPoint);// 0x5e92e3fee041
	FString FlushIsAgreeAuthorizationOversea(bool bIsRead, FString AuthState);// 0x5e91e3fee041
	bool FlushIsAgreeAuthorization(bool bIsRead, bool bIsAgreeAuthorization);// 0x5e90e3fee041
	bool FlushFreeTrafficSystemEnable(bool bIsRead, bool bFreeTrafficSystemEnable);// 0x5e8fe3fee041
	void FlushFreeTrafficLobbyAddressInfo(bool bIsRead, out FString[] InfoArr);// 0x5e8ee3fee041
	FString FlushFreeTrafficBuyUrl(bool bIsRead, FString FreeTrafficBuyUrl);// 0x5e8de3fee041
	bool FlushFirstTimeToRange(bool bIsRead, bool bFirstTimeToRange);// 0x5e8ce3fee041
	FString[] FlushEventTriggerList(bool bIsRead, FString[] eventTriggerList);// 0x5e8be3fee041
	int FlushCheckPointIndex(bool bIsRead, int PointIndex);// 0x5e8ae3fee041
	bool FlushCheckIsFirstLose(bool isRead, bool isFirstLose);// 0x5e89e3fee041
	bool FlushCheckIsDefaultGamepadSetting(bool bIsRead, bool bIsDefaultGamepadSetting);// 0x5e88e3fee041
	FString[] FlushBCheckDebuffEffect(bool bIsRead, FString[] DebuffCheckArray);// 0x5e87e3fee041
	FString ConvertToDolphinVersion(FString InFiveNumVersion, bool InToAssetVersion);// 0x5e86e3fee041

--------------------------------
Class: UACommonStatics.BlueprintFunctionLibrary.Object
	void WidgetToTextureNew(const Widget* Widget, out const Vector2D DrawSize, FString savePath, int CompressionQuality, bool bSave, float Scale);// 0x5f52e3fee041
	FString WidgetToTexture(const Widget* Widget, out const Vector2D DrawSize, FString savePath, int CompressionQuality, bool bSave, float Scale);// 0x5f51e3fee041
	bool ValidateAvatars(SGCharacter* Character, enum InCharacterSex, out int64[] AvatarItemIds, out int64[] InvalidAvatarItemIDs);// 0x5f50e3fee041
	void UploadInnerCosFile(FString Cos, FString Str);// 0x5f4fe3fee041
	void UploadCosFile(FString cosFile, FString srcFile);// 0x5f4ee3fee041
	void UpdateInventoryNew(SGCharacter* PreviewCharacter, out SGPlayerItemInfoBase*[] InventoryArray);// 0x5f4de3fee041
	void UpdateBadge(SGCharacter* Character, int64 ItemID, enum AttachPos);// 0x5f4ce3fee041
	void UpdateAvatarFromConsole(SGCharacter* Character, enum InCharacterSex, out int64[] AvatarItemIds);// 0x5f4be3fee041
	void UpdateAvatar(SGCharacter* Character, enum InCharacterSex, out int64[] AvatarItemIds);// 0x5f4ae3fee041
	bool UObjectHasAnyFlags(const Object* Obj, int flag);// 0x5f49e3fee041
	void UnloadWidgetRender();// 0x5f48e3fee041
	void TryReportString(FString InStr);// 0x5f47e3fee041
	void TryPerformanceReport();// 0x5f46e3fee041
	void TryPerformanceRender();// 0x5f45e3fee041
	void TryHotFix();// 0x5f44e3fee041
	void TryConditionReport();// 0x5f43e3fee041
	void SwitchShowButtonOutline(World* InWorld);// 0x5f42e3fee041
	void StopLevelSequence(const Object* World, FName Tag);// 0x5f41e3fee041
	void SnapshotCustomTable(out FString Table, int SearchMode);// 0x5f40e3fee041
	void Snapshot();// 0x5f3fe3fee041
	void SetWrapAtOfTextBlock(TextBlock* theTextBlock, float InWrapTextAt);// 0x5f3ee3fee041
	void SetWidgetFPropertyMargin(FString PropertyName, out const Margin MarginTable, UserWidget* Widget);// 0x5f3de3fee041
	void SetTencentWebViewShown(bool InFlag);// 0x5f3ce3fee041
	void SetScreenOrientationIOS(int InValue);// 0x5f3be3fee041
	void SetScreenOrientation(int InValue);// 0x5f3ae3fee041
	void SetSceneRenderingEnable(bool Enable);// 0x5f39e3fee041
	void SetMemberWidgetByName(UserWidget* OwnerWidget, Widget* MemberWidget, FString MemberName);// 0x5f38e3fee041
	void SetDynamicLogLevel(int InLogLevel);// 0x5f37e3fee041
	bool SetCulture(FString culture);// 0x5f36e3fee041
	void SetCharacterType(Character* PreviewCharacter, enum InCharacterType);// 0x5f35e3fee041
	bool SaveWidgetTexture(FString Path, TextureRenderTarget2D* TargetRT, int CompressionQuality);// 0x5f34e3fee041
	void SaveStringArray(FString[] stringArr, FString Path);// 0x5f33e3fee041
	bool SaveRenderTargetToFile(TextureRenderTarget2D* rt, FString fileDestination);// 0x5f32e3fee041
	void SaveImageFromTexture2DDy(Texture2DDynamic* InDyTex, FString DesPath);// 0x5f31e3fee041
	void RequestExit(bool bInForce);// 0x5f30e3fee041
	Texture2D* RenderWidgetToUTexture2D(const Widget* Widget, out const Vector2D DrawSize);// 0x5f2fe3fee041
	void RenderWidget(const Widget* Widget, out const Vector2D DrawSize);// 0x5f2ee3fee041
	void RemoveInventoryNew(SGCharacter* PreviewCharacter, SGPlayerItemInfoBase* Inventory);// 0x5f2de3fee041
	void RemoveInventory(SGCharacter* PreviewCharacter, int64 InventoryID);// 0x5f2ce3fee041
	void RemoveInventoriesNew(SGCharacter* PreviewCharacter, out SGPlayerItemInfoBase*[] InventoryList);// 0x5f2be3fee041
	void RemoveInventories(SGCharacter* PreviewCharacter, out int64[] InventoryIdList);// 0x5f2ae3fee041
	void RemoveAllInventories(SGCharacter* PreviewCharacter);// 0x5f29e3fee041
	void RefreshIconOfImage(Image* Image, Object* icon);// 0x5f28e3fee041
	void PreloadAvatars(SGCharacter* Character, out int64[] AvatarItemIds, enum CharacterSex);// 0x5f27e3fee041
	void PlayListViewAnimOfPanel(UserWidget* UserWidget);// 0x5f26e3fee041
	void PlayLevelSequenceReverse(const Object* World, FName Tag);// 0x5f25e3fee041
	void PlayLevelSequence(const Object* World, FName Tag);// 0x5f24e3fee041
	void PlayInitAnimation(UserWidget* UserWidget);// 0x5f23e3fee041
	bool OpenShaderCodeLibrary(FString InName, FString InDir);// 0x5f22e3fee041
	bool OpenPipelineFileCache(FString InName);// 0x5f21e3fee041
	void OnOpenAnimationBegin(UserWidget* UserWidget);// 0x5f20e3fee041
	int NumPrecompilesRemaining();// 0x5f1fe3fee041
	void LogAssetLoadingInfo();// 0x5f1ee3fee041
	Object* LoadImageToTexture2DDy(FString imagePath);// 0x5f1de3fee041
	Object* LoadImageToTexture2D(FString imagePath);// 0x5f1ce3fee041
	void LoadCppPatch();// 0x5f1be3fee041
	bool IsWorldInDsMode(World* TheWorld);// 0x5f1ae3fee041
	bool IsBadgeByInventoryId(World* World, int64 InventoryID);// 0x5f19e3fee041
	void InitFourTapUploadFeature();// 0x5f18e3fee041
	void HideAvatar(SGCharacter* Character, enum avatarType, bool bHide);// 0x5f17e3fee041
	void GoToTrainLevelWithWeapon(Object* World, SGCharacter* PreviewCharacter, out SGPlayerItemInfoBase*[] InventoryArray);// 0x5f16e3fee041
	void GlobalLockUiEvents(bool isLock);// 0x5f15e3fee041
	bool GiveItemToOneAI(SGAICharacter* SGCharacter, int64 ItemID, int Num, bool bAmmoAutoLoad, bool bBagFullDestroyItem);// 0x5f14e3fee041
	bool GiveItemToNearestAI(Object* WorldContextObject, int64 ItemID, int Num, bool bAmmoAutoLoad, bool bBagFullDestroyItem);// 0x5f13e3fee041
	bool GiveItemToAllAI(Object* WorldContextObject, int64 ItemID, int Num, bool bAmmoAutoLoad, bool bBagFullDestroyItem);// 0x5f12e3fee041
	bool GiveItem(Character* SGCharacter, int64 ItemID, int Num, bool bAmmoAutoLoad, bool bBagFullDestroyItem);// 0x5f11e3fee041
	void GiveInventoryNew(SGCharacter* PreviewCharacter, SGPlayerItemInfoBase* Inventory);// 0x5f10e3fee041
	void GiveInventory(SGCharacter* PreviewCharacter, int64 InventoryID);// 0x5f0fe3fee041
	void GiveInventoriesNew(SGCharacter* PreviewCharacter, out SGPlayerItemInfoBase*[] InventoryList);// 0x5f0ee3fee041
	void GiveInventories(SGCharacter* PreviewCharacter, out int64[] InventoryIdList);// 0x5f0de3fee041
	FString GetWigdetHierarchyInfo(const Widget* InWidget);// 0x5f0ce3fee041
	float GetWidgetGeometryScale(Widget* Widget);// 0x5f0be3fee041
	UserWidget* GetUserWidgetByName(UserWidget* UserWidget, FName WidgetName);// 0x5f0ae3fee041
	Vector2D GetTextureResolution(Texture2DDynamic* Tex);// 0x5f09e3fee041
	int GetTextureMemorySize(Texture2DDynamic* Tex, byte Enum);// 0x5f08e3fee041
	int64 GetRootWeaponItemID(WeaponAssembleConfTableRow Row);// 0x5f07e3fee041
	void GetRefCanvasPanelSlotPosition(CanvasPanelSlot* Slot, out Vector2D postion);// 0x5f06e3fee041
	FString GetPlatformDeviceId();// 0x5f05e3fee041
	FString GetPersistentDownloadDir();// 0x5f04e3fee041
	FString[] GetPackageDependencies(FString InPackage);// 0x5f03e3fee041
	void GetOSVersions(out FString[] OSVersionList);// 0x5f02e3fee041
	FString GetOSVersion();// 0x5f01e3fee041
	FString GetOACAID();// 0x5f00e3fee041
	int GetNowMillisecondParty();// 0x5effe3fee041
	int GetNetworkConnectionType();// 0x5efee3fee041
	int GetMediaServerErrorCode();// 0x5efde3fee041
	Vector2D GetLocalSizeByPaintGeo(UserWidget* UserWidget);// 0x5efce3fee041
	bool GetIsUserWidget(Widget* Widget);// 0x5efbe3fee041
	FString GetIPString();// 0x5efae3fee041
	FString GetIPAddress();// 0x5ef9e3fee041
	SGInventory* GetInventoryById(Object* WorldContextObject, int64 ItemID);// 0x5ef8e3fee041
	Vector2D GetImageResolution(FString imagePath);// 0x5ef7e3fee041
	FString GetGPUFamily();// 0x5ef6e3fee041
	FString GetGLVersion();// 0x5ef5e3fee041
	int GetDynamicLogLevel();// 0x5ef4e3fee041
	FString GetDeviceMake();// 0x5ef3e3fee041
	FString GetDeviceId();// 0x5ef2e3fee041
	bool GetDeskDefaultFreeSpace(FString inPath, out int64 TotalnumberOfBytes, out int64 NumberOfFreeBytes);// 0x5ef1e3fee041
	FString GetDefaultDeviceProfileName();// 0x5ef0e3fee041
	FString GetCulture();// 0x5eefe3fee041
	FString GetCPUBrand();// 0x5eeee3fee041
	FString GetCosUploadURL();// 0x5eede3fee041
	Object* GetClassDefaultObject(const class Object InClass);// 0x5eece3fee041
	FString GetCarrier();// 0x5eebe3fee041
	FString GetBuildConfiguration();// 0x5eeae3fee041
	enum GetAvatarTypeByInventoryId(World* World, int64 InventoryID);// 0x5ee9e3fee041
	FString GetASAInfo();// 0x5ee8e3fee041
	WidgetAnimation* GetAnimationByName(UserWidget* UserWidget, FName AnimationName);// 0x5ee7e3fee041
	void ForceInputBoxTop(int InValue);// 0x5ee6e3fee041
	void EnableSensor();// 0x5ee5e3fee041
	void DumpFName();// 0x5ee4e3fee041
	void DisableSensor();// 0x5ee3e3fee041
	UserWidget* CreateCurrentWordWidgetInstance(World* World, class UserWidget UserWidgetClass, FName WidgetName);// 0x5ee2e3fee041
	void CloseShaderCodeLibrary(FString InName);// 0x5ee1e3fee041
	void ClosePipelineFileCache();// 0x5ee0e3fee041
	void ClearPreloadAvatars(SGCharacter* Character);// 0x5edfe3fee041
	bool CheckIconValid(const Object* ResourceObject);// 0x5edee3fee041
	void CheckEquipmentHiddenConflict(Object* WorldContextObject, int64 ItemID, out int64[] AvatarItemIds, out int64[] ConflictItemIdList);// 0x5edde3fee041
	void CaptureScreen(FString Path);// 0x5edce3fee041
	bool CanAttachBadge(Character* Character, int64 ItemID, enum AttachPos);// 0x5edbe3fee041

--------------------------------
Class: WeaponAssembleConfTableRow.TableRowBase
	uint32 ID;//[Offset: 0x8, Size: 0x4]
	uint32 col_size;//[Offset: 0xc, Size: 0x4]
	uint32 row_size;//[Offset: 0x10, Size: 0x4]
	FString unique_id;//[Offset: 0x18, Size: 0x10]
	uint32 can_fire;//[Offset: 0x28, Size: 0x4]
	WeaponItemConf[] Items;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: WeaponItemConf
	uint32 item_id;//[Offset: 0x0, Size: 0x4]
	uint32 Num;//[Offset: 0x4, Size: 0x4]
	uint32 slot_index;//[Offset: 0x8, Size: 0x4]
	uint32 parent_idx;//[Offset: 0xc, Size: 0x4]
	uint32 Parent;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: UADataTableManager.SGConfigUtil.Object
	MapDetailTableRowBPProxy GetMapDetailTableRowBPProxy(MapDetailTableRow MapDetailTableRow);// 0x5f55e3fee041
	LootDropTableRowBPProxy GetLootDropTableRowBPProxy(LootDropTableRow LootDropTableRow);// 0x5f54e3fee041
	ItemConfTableRowBPProxy GetItemConfTableRowBPProxy(ItemConfTableRow ItemConfTableRow);// 0x5f53e3fee041

--------------------------------
Class: MapDetailTableRow.TableRowBase
	uint32 ID;//[Offset: 0x8, Size: 0x4]
	FText map_level;//[Offset: 0x10, Size: 0x18]
	FString mobile_map_level;//[Offset: 0x28, Size: 0x10]
	FText Name;//[Offset: 0x38, Size: 0x18]
	FString level_path;//[Offset: 0x50, Size: 0x10]
	FText Picture;//[Offset: 0x60, Size: 0x18]
	FText Desc;//[Offset: 0x78, Size: 0x18]
	Vector2D MapSize;//[Offset: 0x90, Size: 0x8]
	Vector2D[] SampleScenePoints;//[Offset: 0x98, Size: 0x10]
	Vector2D[] SampleMapPoints;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: MapDetailTableRowBPProxy.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	FString map_level;//[Offset: 0x10, Size: 0x10]
	FString mobile_map_level;//[Offset: 0x20, Size: 0x10]
	FString Name;//[Offset: 0x30, Size: 0x10]
	FString level_path;//[Offset: 0x40, Size: 0x10]
	FString Picture;//[Offset: 0x50, Size: 0x10]
	FString Desc;//[Offset: 0x60, Size: 0x10]
	Vector2D MapSize;//[Offset: 0x70, Size: 0x8]
	Vector2D[] SampleScenePoints;//[Offset: 0x78, Size: 0x10]
	Vector2D[] SampleMapPoints;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: LootDropTableRow.TableRowBase
	uint64 ID;//[Offset: 0x8, Size: 0x8]
	FString Desc;//[Offset: 0x10, Size: 0x10]
	byte ItemType;//[Offset: 0x20, Size: 0x1]
	uint64 ItemID;//[Offset: 0x28, Size: 0x8]
	uint32[] ItemNum;//[Offset: 0x30, Size: 0x10]
	uint64[] SubItemTable;//[Offset: 0x40, Size: 0x10]
	uint32 Weight;//[Offset: 0x50, Size: 0x4]
	float Percent;//[Offset: 0x54, Size: 0x4]
	float RandTimes;//[Offset: 0x58, Size: 0x4]
	float WeightTimes;//[Offset: 0x5c, Size: 0x4]
	byte OperationType;//[Offset: 0x60, Size: 0x1]
	byte IsPermanent;//[Offset: 0x61, Size: 0x1]
	uint32 ActID;//[Offset: 0x64, Size: 0x4]
	uint64[] LootPointWhite;//[Offset: 0x68, Size: 0x10]
	uint64[] LootPointBlack;//[Offset: 0x78, Size: 0x10]
	FString Describe;//[Offset: 0x88, Size: 0x10]
	uint32 MaxRepeatRandomNum;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: LootDropTableRowBPProxy.TableRowBase
	int64 ID;//[Offset: 0x8, Size: 0x8]
	FString Desc;//[Offset: 0x10, Size: 0x10]
	byte ItemType;//[Offset: 0x20, Size: 0x1]
	int64 ItemID;//[Offset: 0x28, Size: 0x8]
	int[] ItemNum;//[Offset: 0x30, Size: 0x10]
	int64[] SubItemTable;//[Offset: 0x40, Size: 0x10]
	int Weight;//[Offset: 0x50, Size: 0x4]
	float Percent;//[Offset: 0x54, Size: 0x4]
	float RandTimes;//[Offset: 0x58, Size: 0x4]
	byte OperationType;//[Offset: 0x5c, Size: 0x1]
	byte IsPermanent;//[Offset: 0x5d, Size: 0x1]
	uint32 ActID;//[Offset: 0x60, Size: 0x4]
	uint64[] LootPointWhite;//[Offset: 0x68, Size: 0x10]
	uint64[] LootPointBlack;//[Offset: 0x78, Size: 0x10]
	FString Describe;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: ItemConfTableRow.TableRowBase
	uint32 ItemID;//[Offset: 0x8, Size: 0x4]
	FText Name;//[Offset: 0x10, Size: 0x18]
	FText ShortName;//[Offset: 0x28, Size: 0x18]
	uint32 IconId;//[Offset: 0x40, Size: 0x4]
	FText Describe;//[Offset: 0x48, Size: 0x18]
	uint32 SizeX;//[Offset: 0x60, Size: 0x4]
	uint32 SizeY;//[Offset: 0x64, Size: 0x4]
	float Weight;//[Offset: 0x68, Size: 0x4]
	FString pickup_sound;//[Offset: 0x70, Size: 0x10]
	FString use_sound;//[Offset: 0x80, Size: 0x10]
	FString drop_sound;//[Offset: 0x90, Size: 0x10]
	uint32 sell_price;//[Offset: 0xa0, Size: 0x4]
	uint32 sell_rate;//[Offset: 0xa4, Size: 0x4]
	uint32 can_sell;//[Offset: 0xa8, Size: 0x4]
	uint32 standard_price;//[Offset: 0xac, Size: 0x4]
	uint32 StackMax;//[Offset: 0xb0, Size: 0x4]
	int TakeInCount;//[Offset: 0xb4, Size: 0x4]
	DateTime expire_time;//[Offset: 0xb8, Size: 0x8]
	CommonItemConfItem[] compensate;//[Offset: 0xc0, Size: 0x10]
	uint32 not_discard;//[Offset: 0xd0, Size: 0x4]
	uint32 Bind;//[Offset: 0xd4, Size: 0x4]
	uint32 rarity;//[Offset: 0xd8, Size: 0x4]
	uint32 Durability;//[Offset: 0xdc, Size: 0x4]
	uint32 UseExp;//[Offset: 0xe0, Size: 0x4]
	uint32 LootExp;//[Offset: 0xe4, Size: 0x4]
	byte[] RejectSlot;//[Offset: 0xe8, Size: 0x10]
	uint32[] RejectItems;//[Offset: 0xf8, Size: 0x10]
	uint32 sort;//[Offset: 0x108, Size: 0x4]
	uint32 jump_goto;//[Offset: 0x10c, Size: 0x4]
	int PackageFlags;//[Offset: 0x110, Size: 0x4]
	uint32 FactoryId;//[Offset: 0x114, Size: 0x4]

--------------------------------
Class: CommonItemConfItem
	uint32 item_id;//[Offset: 0x0, Size: 0x4]
	uint32 Num;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ItemConfTableRowBPProxy.TableRowBase
	int ItemID;//[Offset: 0x8, Size: 0x4]
	FString Name;//[Offset: 0x10, Size: 0x10]
	FString ShortName;//[Offset: 0x20, Size: 0x10]
	uint32 IconId;//[Offset: 0x30, Size: 0x4]
	FString Describe;//[Offset: 0x38, Size: 0x10]
	int SizeX;//[Offset: 0x48, Size: 0x4]
	int SizeY;//[Offset: 0x4c, Size: 0x4]
	float Weight;//[Offset: 0x50, Size: 0x4]
	FString pickup_sound;//[Offset: 0x58, Size: 0x10]
	FString use_sound;//[Offset: 0x68, Size: 0x10]
	FString drop_sound;//[Offset: 0x78, Size: 0x10]
	int sell_price;//[Offset: 0x88, Size: 0x4]
	uint32 can_sell;//[Offset: 0x8c, Size: 0x4]
	int standard_price;//[Offset: 0x90, Size: 0x4]
	uint32 StackMax;//[Offset: 0x94, Size: 0x4]
	uint32 not_discard;//[Offset: 0x98, Size: 0x4]
	uint32 Bind;//[Offset: 0x9c, Size: 0x4]
	uint32 rarity;//[Offset: 0xa0, Size: 0x4]
	uint32 Durability;//[Offset: 0xa4, Size: 0x4]
	uint32 UseExp;//[Offset: 0xa8, Size: 0x4]
	int LootExp;//[Offset: 0xac, Size: 0x4]
	byte[] RejectSlot;//[Offset: 0xb0, Size: 0x10]
	uint32 sort;//[Offset: 0xc0, Size: 0x4]
	uint32 jump_goto;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: UAFontMeasure.Object
	bool bSingleMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	uint32 SelectIndex;//[Offset: 0x3c, Size: 0x4]
	FString ExtraInfo;//[Offset: 0x40, Size: 0x10]
	void SubmitBugTask(FString Content, FString Path);// 0x5f5ce3fee041
	byte GetTextJustification(TextLayoutWidget* LayoutWidget);// 0x5f5be3fee041
	void GetTextAndImageWidgets(Widget* Widget, out Widget*[] TextWidgets, out Widget*[] ImageWidgets, bool bCliping);// 0x5f5ae3fee041
	UserWidget* GetCurrentPanel(UserWidget* RootCanvasPanel);// 0x5f59e3fee041
	UAFontMeasure* Get();// 0x5f58e3fee041
	void DrawFontMeasure(out PaintContext Context, WidgetTree* WidgetTree);// 0x5f57e3fee041
	void DragWidget(UserWidget* panel, out const Geometry InGeometry, out const PointerEvent InMouseEvent);// 0x5f56e3fee041

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x140, Size: 0x248]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x388, Size: 0x518]
	SlateWidgetStyleAsset* Style;//[Offset: 0x8a0, Size: 0x8]
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x8a8, Size: 0x8]
	byte Orientation;//[Offset: 0x8b0, Size: 0x1]
	enum ScrollBarVisibility;//[Offset: 0x8b1, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0x8b2, Size: 0x1]
	Vector2D ScrollbarThickness;//[Offset: 0x8b4, Size: 0x8]
	Margin ScrollbarPadding;//[Offset: 0x8bc, Size: 0x10]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 0x1]
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cd, Size: 0x1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ce, Size: 0x1]
	bool bAnimateWheelScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cf, Size: 0x1]
	bool bEnableScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 0x1]
	enum NavigationDestination;//[Offset: 0x8d1, Size: 0x1]
	float NavigationScrollPadding;//[Offset: 0x8d4, Size: 0x4]
	enum ScrollWhenFocusChanges;//[Offset: 0x8d8, Size: 0x1]
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d9, Size: 0x1]
	float WheelScrollMultiplier;//[Offset: 0x8dc, Size: 0x4]
	delegate OnUserScrolled;//[Offset: 0x8e0, Size: 0x10]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x5f6fe3fee041
	void SetScrollOffset(float NewScrollOffset);// 0x5f6ee3fee041
	void SetScrollbarVisibility(enum NewScrollBarVisibility);// 0x5f6de3fee041
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x5f6ce3fee041
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x5f6be3fee041
	void SetOrientation(byte NewOrientation);// 0x5f6ae3fee041
	void SetEnableScrolling(bool bShouldEnableScrolling);// 0x5f69e3fee041
	void SetConsumeMouseWheel(enum NewConsumeMouseWheel);// 0x5f68e3fee041
	void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);// 0x5f67e3fee041
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x5f66e3fee041
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x5f65e3fee041
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination, float Padding);// 0x5f64e3fee041
	void ScrollToStart();// 0x5f63e3fee041
	void ScrollToEnd();// 0x5f62e3fee041
	float GetViewOffsetFraction();// 0x5f61e3fee041
	float GetScrollOffsetOfEnd();// 0x5f60e3fee041
	float GetScrollOffset();// 0x5f5fe3fee041
	bool GetFingerTouch();// 0x5f5ee3fee041
	void EndInertialScrolling();// 0x5f5de3fee041

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 0x90]
	SlateBrush VerticalBackgroundImage;//[Offset: 0x98, Size: 0x90]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x128, Size: 0x90]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1b8, Size: 0x90]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x248, Size: 0x90]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2d8, Size: 0x90]
	SlateBrush NormalThumbImage;//[Offset: 0x368, Size: 0x90]
	SlateBrush HoveredThumbImage;//[Offset: 0x3f8, Size: 0x90]
	SlateBrush DraggedThumbImage;//[Offset: 0x488, Size: 0x90]

--------------------------------
Class: UAGridScroll.ScrollBox.PanelWidget.Widget.Visual.Object
	delegate OnContentSizeChange;//[Offset: 0x908, Size: 0x10]
	delegate ScrollWidgetAnimationEnd2;//[Offset: 0x918, Size: 0x10]
	void OnScrollWidgetAnimationEnd();// 0x5f70e3fee041

--------------------------------
Class: UAInventoryStatics.SGInventoryStatics.BlueprintFunctionLibrary.Object
	void UpdateInventories(out SGPlayerItemInfoBase*[] InventoryArray, Character* Character);// 0x5fbae3fee041
	SGInventory* SpawnInventoryByItemID(Object* WorldContextObject, int ItemID, int ItemNum, Vector Location, Rotator Rotator);// 0x5fb9e3fee041
	void SetNonStreamble(bool bStreamble);// 0x5fb8e3fee041
	void RemoveSpecificInventory(SGInventory* TargetInventory, Character* Character);// 0x5fb7e3fee041
	void RemoveInventory(SGPlayerItemInfoBase* item, Character* Character);// 0x5fb6e3fee041
	void RefreshInvMap(out <SGInventory*,int> InvMap, out <int64,bool> bIsInspectedMap, SGCharacter* SGCharacter);// 0x5fb5e3fee041
	void OnInventoryLoadCompleteNotify(int InTaskID);// 0x5fb4e3fee041
	void MergeInv(out <SGInventory*,int> InvMap, out <int64,bool> bIsInspectedMap, Actor*[] InvArray);// 0x5fb3e3fee041
	void GiveWeaponToPlayerByWeaponActor(SGInventory* Weapon, Character* Character);// 0x5fb2e3fee041
	void GiveWeaponToPlayer(SGPlayerItemInfoBase* item, Character* Character);// 0x5fb1e3fee041
	void GiveWeaponBP(Character* Character, int64 ItemID, enum AttachPosition);// 0x5fb0e3fee041
	void GiveWeapon(Character* Character, uint64 ItemID, enum AttachPosition);// 0x5fafe3fee041
	void GiveMagaWithAmmoBP(Character* Character, int64 MagaId);// 0x5faee3fee041
	SGInventory* GiveItemToContainer(SGInventory* ContainerInv, int ItemID, int ItemNum);// 0x5fade3fee041
	void GiveItem(Character* Character, int64 ItemID, int Num, bool bAmmoAutoLoad);// 0x5face3fee041
	void GiveCharacterByInventoryList(Character* Character, class Actor[] InventoryList);// 0x5fabe3fee041
	SGInventory* GiveAndGetItem(Character* Character, int64 ItemID, int Num, bool bAmmoAutoLoad);// 0x5faae3fee041
	void GiveAndEquipWeaponBP(Character* Character, int64 WeaponId, byte WeaponSlot);// 0x5fa9e3fee041
	float GetWeaponZeroDropDistance(Pawn* Pawn, bool bWithBulletModifier);// 0x5fa8e3fee041
	uint32 GetWeaponSocketsAndAmmoCapacity(uint64 ItemID, out WeaponSocket[] InSockets);// 0x5fa7e3fee041
	FString GetUseSound(SGInventory* Inventory);// 0x5fa6e3fee041
	uint32 GetTotalValueOfCharacter(SGCharacter* Character);// 0x5fa5e3fee041
	SGPlayerItemInfoBase* GetTestPlayerItemInfoBase(uint64 ParentID, uint64 ChildID);// 0x5fa4e3fee041
	uint32 GetSecondMainWeaponValue(SGCharacter* Character);// 0x5fa3e3fee041
	Object* GetRuningInventoryStaticsTaskById(int ID);// 0x5fa2e3fee041
	SGPlayerItemInfoBase* GetPlayerItemInfoBaseFormInstID(Character* Character, uint64 InstId);// 0x5fa1e3fee041
	uint32 GetLoseValueOfCharacter(SGCharacter* SGCharacter);// 0x5fa0e3fee041
	int GetItemInstIdModded(SGInventory* SGInventory, int Mod);// 0x5f9fe3fee041
	uint64 GetItemInstId(SGInventory* SGInventory);// 0x5f9ee3fee041
	void GetInventoryValuePropagateTrade(SGInventory* Inventory, out int OutValue, bool bIncludeSelf, bool bIncludeChild, bool bIncludeBullet);// 0x5f9de3fee041
	void GetInventoryValuePropagate(SGInventory* Inventory, out int OutValue, bool bIncludeSelf, bool bIncludeChild, bool bIncludeBullet);// 0x5f9ce3fee041
	int GetInventoryValue(SGInventory* Inventory);// 0x5f9be3fee041
	int GetInventoryTypeTotalCount(Character* Character, int TypeID, enum[] PositionArr);// 0x5f9ae3fee041
	int GetInventoryTotalCount(Character* Character, int64 InventoryID, enum[] PositionArr);// 0x5f99e3fee041
	int GetInventoryStackMaxFromCommonItemTable(uint64 item_id);// 0x5f98e3fee041
	class SGInventory[] GetInventorysFromWeaponAssembleTable(Object* WorldContextObject, uint64 QueryID);// 0x5f97e3fee041
	FString GetInventoryNameFromCommonItemTable(uint64 ItemID);// 0x5f96e3fee041
	uint32 GetInventoryDynamicValue(SGInventory* Inv);// 0x5f95e3fee041
	void GetInventoryCountPropagate(SGInventory* Inventory, out int OutValue, bool bIncludeSelf, bool bIncludeChild);// 0x5f94e3fee041
	int GetInventoryAsync(SGPlayerItemInfoBase* item, Character* Character, Actor* ParentActor, int InContainerIndex);// 0x5f93e3fee041
	SGInventory* GetInventory(SGPlayerItemInfoBase* item, Character* Character, Actor* ParentActor, int InContainerIndex);// 0x5f92e3fee041
	uint64[] GetInventoriesByGameplayTagList(out FString[] TagList);// 0x5f91e3fee041
	uint64[] GetInventoriesByGameplayTagContainer(GameplayTagContainer TagContainer);// 0x5f90e3fee041
	uint64[] GetInventoriesByAttachPosition(enum position);// 0x5f8fe3fee041
	FString GetIconPathTryReadFromTable(SGInventory* Inventory, bool bReadFromTableIfFailed);// 0x5f8ee3fee041
	float GetHelmetSoundMaxDistanceInfluenceFactor(uint64 ItemID);// 0x5f8de3fee041
	float GetHelmetSoundLevelInfluenceFactor(uint64 ItemID);// 0x5f8ce3fee041
	int GetHelmetSoundBlockLevelFromDetailConfTable(uint64 ItemID);// 0x5f8be3fee041
	ItemGridInfo GetGridInfoByItemID(int64 ItemID);// 0x5f8ae3fee041
	int GetFullWeaponValueTrade(Object* WorldContextObject, uint64 WeaponAssembleID);// 0x5f89e3fee041
	int GetFullWeaponValue(uint64 WeaponAssembleID);// 0x5f88e3fee041
	uint32 GetFirstMainWeaponValue(SGCharacter* Character);// 0x5f87e3fee041
	enum GetEquipAttachPositionById(uint64 ItemID);// 0x5f86e3fee041
	uint32 GetDrugValue(SGCharacter* Character);// 0x5f85e3fee041
	uint32 GetCurWeaponValue(SGCharacter* Character);// 0x5f84e3fee041
	SGInventory* GetCurInventory(Character* Character);// 0x5f83e3fee041
	int GetCommonItemValueTrade(Object* WorldContextObject, uint64 ItemID, int Count);// 0x5f82e3fee041
	int GetCommonItemValueByID(int64 ItemID, int Count);// 0x5f81e3fee041
	int GetCommonItemValue(uint64 ItemID, int Count);// 0x5f80e3fee041
	int GetCommonItemDynamicValue(uint64 ItemID, int Count);// 0x5f7fe3fee041
	uint32 GetCaseValue(SGCharacter* Character);// 0x5f7ee3fee041
	SGInventory* GetCachedInventory(SGPlayerItemInfoBase* item, Character* Character, SGAssembleBase* AssembleObj);// 0x5f7de3fee041
	uint32 GetBulletValue(SGCharacter* Character);// 0x5f7ce3fee041
	uint32 GetBossTokenItemIDFromGroupID(out FName GroupIDName);// 0x5f7be3fee041
	uint32 GetAssistWeaponValue(SGCharacter* Character);// 0x5f7ae3fee041
	void GetAssembleInventoryValue(SGInventory* Inventory, out int OutValue, bool bIncludeChild);// 0x5f79e3fee041
	uint32 GetArmorValue(SGCharacter* Character);// 0x5f78e3fee041
	int GetArmorLevelFromDetailConfTable(uint64 ItemID);// 0x5f77e3fee041
	uint32 GetAllSafeBoxValue(SGCharacter* Character);// 0x5f76e3fee041
	uint32 GetAllEquipmentValue(SGCharacter* Character);// 0x5f75e3fee041
	int GetAllEquipArmorValue(SGCharacter* Character);// 0x5f74e3fee041
	uint64 FindItemIDByInventoryClass(class SGInventory SGInventory);// 0x5f73e3fee041
	uint64 FindItemIDByDataTable(SGInventory* SGInventory);// 0x5f72e3fee041
	SGInventory* FindInventoryFromGID(uint64 InventoryGid, Character* Character);// 0x5f71e3fee041

--------------------------------
Class: WeaponSocket
	FString SocketName;//[Offset: 0x0, Size: 0x10]
	FText PartName;//[Offset: 0x10, Size: 0x18]
	FString[] SupportAdapterTagList;//[Offset: 0x28, Size: 0x10]
	uint64[] masks;//[Offset: 0x38, Size: 0x10]
	uint64[] Types;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: UAListView.ListView.ListViewBase.Widget.Visual.Object
	AkAudioEvent*[] ClickAudioEvents;//[Offset: 0x3b8, Size: 0x10]
	bool bScrollable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	enum ScrollBarVisibility;//[Offset: 0x3c9, Size: 0x1]
	float AnimationDelay;//[Offset: 0x3cc, Size: 0x4]
	void SetPlayAnimationInitIndex(int Index);// 0x5fbde3fee041
	void PlayDelayAnimation();// 0x5fbce3fee041
	void OnListEntryInitialized(Object* item, UserWidget* Widget);// 0x5fbbe3fee041

--------------------------------
Class: UALocalizationStatic.Object
	void SetLocalizationCulture(out FString culture);// 0x5fc5e3fee041
	void ReloadTextLocalization();// 0x5fc4e3fee041
	void PreviewLocalizationCulture(out FString culture);// 0x5fc3e3fee041
	void LoadLocalization();// 0x5fc2e3fee041
	bool IsOverseasPackage();// 0x5fc1e3fee041
	FText GetValue(FString Key);// 0x5fc0e3fee041
	FString GetLocalizationCulture();// 0x5fbfe3fee041
	bool GetImageLocalization(Image* Image);// 0x5fbee3fee041

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x5fc6e3fee041

--------------------------------
Class: UAOverlay.Overlay.PanelWidget.Widget.Visual.Object

--------------------------------
Class: UAOverlaySlot.OverlaySlot.PanelSlot.Visual.Object
	int ZOrder;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: UAPanelProfiler.Object
	void ResetProfileDepth();// 0x5fcee3fee041
	void PrintProfileInfo(FString panelName);// 0x5fcde3fee041
	bool IsTestOrShipping();// 0x5fcce3fee041
	int EndProfiler(FString panelName, FString phaseName, const int animStandardTime);// 0x5fcbe3fee041
	void BeginProfiler(FString panelName, FString phaseName);// 0x5fcae3fee041

--------------------------------
Class: UAPhotoTakerCommon.Object
	FString TakePhoto();// 0x5fd2e3fee041
	void ReleaseLoadedPhotos();// 0x5fd1e3fee041
	FString GetPhotoSavePath();// 0x5fd0e3fee041
	void AsyncLoadPhoto(FString InPhotoName, Image* Image);// 0x5fcfe3fee041

--------------------------------
Class: UARedPointWidget.UserWidget.Widget.Visual.Object
	FString RedPointType;//[Offset: 0x288, Size: 0x10]
	bool AutoRegist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]

--------------------------------
Class: TileView.ListView.ListViewBase.Widget.Visual.Object
	float EntryHeight;//[Offset: 0x3b0, Size: 0x4]
	float EntryWidth;//[Offset: 0x3b4, Size: 0x4]
	enum TileAlignment;//[Offset: 0x3b8, Size: 0x1]
	Margin Padding;//[Offset: 0x3bc, Size: 0x10]
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 0x1]
	void SetEntryWidth(float NewWidth);// 0x5fd6e3fee041
	void SetEntryHeight(float NewHeight);// 0x5fd5e3fee041
	float GetEntryWidth();// 0x5fd4e3fee041
	float GetEntryHeight();// 0x5fd3e3fee041

--------------------------------
Class: UATileView.TileView.ListView.ListViewBase.Widget.Visual.Object
	AkAudioEvent*[] ClickAudioEvents;//[Offset: 0x3e0, Size: 0x10]

--------------------------------
Class: UATreeView.TreeView.ListView.ListViewBase.Widget.Visual.Object
	AkAudioEvent*[] ClickAudioEvents;//[Offset: 0x408, Size: 0x10]

--------------------------------
Class: UAWareHouseComponent.ActorComponent.Object
	class Actor* DefaulWareHouseInventory;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: UMGHelperLibrary.BlueprintFunctionLibrary.Object
	Widget* FindWidgetByName(UserWidget* InUMGWidget, const FName Name);// 0x5fd7e3fee041

--------------------------------
Class: VideoManager.Object
	void StopRecorder();// 0x5fdde3fee041
	bool StartRecorder();// 0x5fdce3fee041
	void RecordNotify(int EventID, int ErrorCode, FString Info);// 0x5fdbe3fee041
	bool IsRecording();// 0x5fdae3fee041
	void Init();// 0x5fd9e3fee041
	VideoManager* Get();// 0x5fd8e3fee041

--------------------------------
Class: QuestDistributerBase.MFQuestDistributerBase.Actor.Object
	bool bClearProgressWhenFinishGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	void OnPrePlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x5fdee3fee041

--------------------------------
Class: AchievementBase.QuestDistributerBase.MFQuestDistributerBase.Actor.Object
	int AchievementID;//[Offset: 0x384, Size: 0x4]
	bool bSubAchievement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	void SetSubAchievement(bool bSub);// 0x5fe3e3fee041
	void SetAchievementID(int InAchievementID);// 0x5fe2e3fee041
	bool IsSubAchievement();// 0x5fe1e3fee041
	void InitAchievement(int InAchievementID, bool bSubAchieve);// 0x5fe0e3fee041
	int GetAchievementID();// 0x5fdfe3fee041

--------------------------------
Class: AchievementSubsystem.WorldSubsystem.Subsystem.Object
	<PlayerController*,AchievementList> Player2JoinInAchievements;//[Offset: 0x40, Size: 0x50]
	<uint32,AchievementBase*> AchievementID2Objects;//[Offset: 0x90, Size: 0x50]
	void OnPlayerFinishGame(PlayerController* InPlayerController, enum FinishType, Actor* EscapeVolume);// 0x5fe8e3fee041
	void OnBeginGameInit();// 0x5fe7e3fee041
	void InitAchievementProgresses(PlayerController* InPlayerController, AchievementList InAchievementList);// 0x5fe6e3fee041
	AchievementData[] GetAchievementProgresses(PlayerController* InPlayerController);// 0x5fe5e3fee041
	AchievementSubsystem* Get(Object* WorldContextObject);// 0x5fe4e3fee041

--------------------------------
Class: AchievementList
	AchievementData[] Achievements;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AchievementData
	int AchievementID;//[Offset: 0x0, Size: 0x4]
	int Progress;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AssetsProfilingCommandlet.Commandlet.Object

--------------------------------
Class: AudioPropagateManager.Actor.Object
	int VisibleNearistPortalNum;//[Offset: 0x2e0, Size: 0x4]
	int InVisiblePortalNum;//[Offset: 0x2e4, Size: 0x4]
	float FadeCollisionRadius;//[Offset: 0x2e8, Size: 0x4]
	Actor*[] AudioPortals;//[Offset: 0x2f0, Size: 0x10]
	<AkAcousticPortal*,enum> PortalStateCache;//[Offset: 0x520, Size: 0x50]
	void InitManager();// 0x5fe9e3fee041

--------------------------------
Class: AutoTestActor.StaticMeshActor.Actor.Object

--------------------------------
Class: BigMapInfoActor.Actor.Object
	int MapID;//[Offset: 0x2e0, Size: 0x4]
	FString ScriptLevelName;//[Offset: 0x2e8, Size: 0x10]
	Vector WorldCenter;//[Offset: 0x2f8, Size: 0xc]
	Vector MapTopLeftLocation;//[Offset: 0x304, Size: 0xc]
	Vector WorldNorthAngleOffset;//[Offset: 0x310, Size: 0xc]
	Vector WorldExtent;//[Offset: 0x31c, Size: 0xc]
	Texture2D* MapTexture;//[Offset: 0x328, Size: 0x8]
	Texture2D* Map2LTexture;//[Offset: 0x330, Size: 0x8]
	Texture2D* CoreAreaTexturePath;//[Offset: 0x338, Size: 0x28]
	int ScaleText;//[Offset: 0x360, Size: 0x4]
	BigMapAreaTextureInfo[] MapAreaTextureInfos;//[Offset: 0x368, Size: 0x10]

--------------------------------
Class: BigMapAreaTextureInfo
	int AreaID;//[Offset: 0x0, Size: 0x4]
	Texture2D* MapTexture;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CompetitionHUD.SGHUD.HUD.Actor.Object
	class SGUserWidget[] CompetitionPlayerComponentClasses;//[Offset: 0x4b8, Size: 0x10]
	class SGUserWidget[] OBPlayerComponentClasses;//[Offset: 0x4c8, Size: 0x10]
	bool bCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 0x1]
	void RequestAsyncLoadWidgets(out const class SGUserWidget[] TempComponentClasses);// 0x5febe3fee041
	void OnPlayerIdentityTypeChange(SGPlayerState* PS);// 0x5feae3fee041

--------------------------------
Class: DSTestGameMode.SGGameMode.GameMode.GameModeBase.Info.Actor.Object
	class Character* AICharacterClass;//[Offset: 0x418, Size: 0x8]
	class AIController* AIControllerClass;//[Offset: 0x420, Size: 0x8]
	BehaviorTree* BehaviorTreeTemplate;//[Offset: 0x428, Size: 0x8]
	int AIMaxCount;//[Offset: 0x430, Size: 0x4]
	int SpawnAIRadius;//[Offset: 0x434, Size: 0x4]
	Vector CenterPoint;//[Offset: 0x438, Size: 0xc]

--------------------------------
Class: DZPCInputHandleComponent.SGPCInputHandleComponent.ActorComponent.Object

--------------------------------
Class: UAPCUIModeComponent.SGPCUIModeComponent.ActorComponent.Object
	bool bPreparationsOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bMainMenuOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bBagOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1]
	bool bMapOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	bool bSettlement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	bool bGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 0x1]
	bool bAIDebugInfoOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 0x1]
	bool bCombatStatsOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bGameSetttingOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	bool bIsBagTemporarilyHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]
	void SwitchMapOpen();// 0x5ffbe3fee041
	void SwitchMainMenu();// 0x5ffae3fee041
	void SwitchBagOpen();// 0x5ff9e3fee041
	void SwitchAIDebugInfo();// 0x5ff8e3fee041
	void SetPreparationsOpen(bool bOpen);// 0x5ff7e3fee041
	void SetMapOpen(bool bOpen);// 0x5ff6e3fee041
	void SetMainMenuOpen(bool bOpen);// 0x5ff5e3fee041
	void SetGameSettingOpen(bool bOpen);// 0x5ff4e3fee041
	void SetCombatStatsOpen(bool bOpen);// 0x5ff3e3fee041
	void SetBagOpen(bool bOpen, Actor* InteractTarget, enum Operation);// 0x5ff2e3fee041
	void SetAIDebugInfoOpen(bool bOpen);// 0x5ff1e3fee041
	void OnPlayerBeginGame(PlayerController* PC);// 0x5ff0e3fee041
	void OnEnterDBNOMessageReceived(Character* Character);// 0x5fefe3fee041
	bool IsMapOpenned();// 0x5feee3fee041
	bool IsCombatStatsOpenned();// 0x5fede3fee041
	bool IsAIDebugInfoOpened();// 0x5fece3fee041

--------------------------------
Class: DZPCUIModeComponent.UAPCUIModeComponent.SGPCUIModeComponent.ActorComponent.Object
	bool bEscapeInfoOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 0x1]
	void SwitchEscapeInfoOpen();// 0x5ffde3fee041
	void SetEscapeInfoOpen(bool bOpen);// 0x5ffce3fee041

--------------------------------
Class: GameModeAutoTest.GameMode.GameModeBase.Info.Actor.Object
	ParticleSystemComponent*[] ParticleSystemComponentArray;//[Offset: 0x3c8, Size: 0x10]
	Actor*[] ActorArray;//[Offset: 0x3d8, Size: 0x10]
	void TestSpawnActorWithMaterial(FString ClassName, FString MaterialName, FString position);// 0x6001e3fee041
	void TestSpawnActor(FString ClassName, FString position);// 0x6000e3fee041
	void TestDestroyActor();// 0x5fffe3fee041
	void EnableLightShadow(bool bEnable);// 0x5ffee3fee041

--------------------------------
Class: MediaPlayerController.Actor.Object
	MediaPlayer* MediaPlayer;//[Offset: 0x2e0, Size: 0x8]
	void OpenVideo(FString URL, out const bool Loop);// 0x6008e3fee041
	void OnOpenFailed(FString URL);// 0x6007e3fee041
	void OnOpened(FString URL);// 0x6006e3fee041
	void OnMediaOpenFailed(FString FailedUrl);// 0x6005e3fee041
	void OnMediaOpened(FString OpenedUrl);// 0x6004e3fee041
	void OnEndReached();// 0x6003e3fee041
	void OnEnd();// 0x6002e3fee041

--------------------------------
Class: MediaPlayer.Object
	delegate OnEndReached;//[Offset: 0x30, Size: 0x10]
	delegate OnMediaClosed;//[Offset: 0x40, Size: 0x10]
	delegate OnMediaOpened;//[Offset: 0x50, Size: 0x10]
	delegate OnMediaOpenFailed;//[Offset: 0x60, Size: 0x10]
	delegate OnPlaybackResumed;//[Offset: 0x70, Size: 0x10]
	delegate OnPlaybackSuspended;//[Offset: 0x80, Size: 0x10]
	delegate OnSeekCompleted;//[Offset: 0x90, Size: 0x10]
	delegate OnTracksChanged;//[Offset: 0xa0, Size: 0x10]
	Timespan CacheAhead;//[Offset: 0xb0, Size: 0x8]
	Timespan CacheBehind;//[Offset: 0xb8, Size: 0x8]
	Timespan CacheBehindGame;//[Offset: 0xc0, Size: 0x8]
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xca, Size: 0x1]
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xca, Size: 0x1]
	MediaPlaylist* Playlist;//[Offset: 0xd0, Size: 0x8]
	int PlaylistIndex;//[Offset: 0xd8, Size: 0x4]
	Timespan TimeDelay;//[Offset: 0xe0, Size: 0x8]
	float HorizontalFieldOfView;//[Offset: 0xe8, Size: 0x4]
	float VerticalFieldOfView;//[Offset: 0xec, Size: 0x4]
	Rotator ViewRotation;//[Offset: 0xf0, Size: 0xc]
	Guid PlayerGuid;//[Offset: 0x128, Size: 0x10]
	bool SupportsSeeking();// 0x6a43e3fee041
	bool SupportsScrubbing();// 0x6a42e3fee041
	bool SupportsRate(float Rate, bool Unthinned);// 0x6a41e3fee041
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0x6a40e3fee041
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0x6a3fe3fee041
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0x6a3ee3fee041
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0x6a3de3fee041
	void SetTimeDelay(Timespan TimeDelay);// 0x6a3ce3fee041
	bool SetRate(float Rate);// 0x6a3be3fee041
	bool SetNativeVolume(float Volume);// 0x6a3ae3fee041
	void SetMediaOptions(const MediaSource* Options);// 0x6a39e3fee041
	bool SetLooping(bool Looping);// 0x6a38e3fee041
	void SetDesiredPlayerName(FName PlayerName);// 0x6a37e3fee041
	void SetBlockOnTime(out const Timespan Time);// 0x6a36e3fee041
	bool SelectTrack(enum TrackType, int TrackIndex);// 0x6a35e3fee041
	bool Seek(out const Timespan Time);// 0x6a34e3fee041
	bool Rewind();// 0x6a33e3fee041
	void Reset();// 0x6a32e3fee041
	bool Reopen();// 0x6a31e3fee041
	bool Previous();// 0x6a30e3fee041
	void PlayAndSeek();// 0x6a2fe3fee041
	bool Play();// 0x6a2ee3fee041
	void PauseAtStart();// 0x6a2de3fee041
	bool Pause();// 0x6a2ce3fee041
	void OpenWithPauseAtStart(MediaSource* MediaSource, out const MediaPlayerOptions PlayerOptions);// 0x6a2be3fee041
	bool OpenUrl(FString URL);// 0x6a2ae3fee041
	bool OpenSourceWithOptions(MediaSource* MediaSource, out const MediaPlayerOptions Options);// 0x6a29e3fee041
	void OpenSourceLatent(const Object* WorldContextObject, LatentActionInfo LatentInfo, MediaSource* MediaSource, out const MediaPlayerOptions Options, out bool bSuccess);// 0x6a28e3fee041
	bool OpenSource(MediaSource* MediaSource);// 0x6a27e3fee041
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int Index);// 0x6a26e3fee041
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0x6a25e3fee041
	bool OpenFile(FString FilePath);// 0x6a24e3fee041
	bool Next();// 0x6a23e3fee041
	bool IsReady();// 0x6a22e3fee041
	bool IsPreparing();// 0x6a21e3fee041
	bool IsPlaying();// 0x6a20e3fee041
	bool IsPaused();// 0x6a1fe3fee041
	bool IsLooping();// 0x6a1ee3fee041
	bool IsConnecting();// 0x6a1de3fee041
	bool IsClosed();// 0x6a1ce3fee041
	bool IsBuffering();// 0x6a1be3fee041
	bool HasError();// 0x6a1ae3fee041
	Rotator GetViewRotation();// 0x6a19e3fee041
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0x6a18e3fee041
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0x6a17e3fee041
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0x6a16e3fee041
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0x6a15e3fee041
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0x6a14e3fee041
	float GetVerticalFieldOfView();// 0x6a13e3fee041
	FString GetUrl();// 0x6a12e3fee041
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0x6a11e3fee041
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0x6a10e3fee041
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0x6a0fe3fee041
	MediaTimeStampInfo* GetTimeStamp();// 0x6a0ee3fee041
	Timespan GetTimeDelay();// 0x6a0de3fee041
	Timespan GetTime();// 0x6a0ce3fee041
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0x6a0be3fee041
	int GetSelectedTrack(enum TrackType);// 0x6a0ae3fee041
	float GetRate();// 0x6a09e3fee041
	int GetPlaylistIndex();// 0x6a08e3fee041
	MediaPlaylist* GetPlaylist();// 0x6a07e3fee041
	FName GetPlayerName();// 0x6a06e3fee041
	int GetNumTracks(enum TrackType);// 0x6a05e3fee041
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0x6a04e3fee041
	FText GetMediaName();// 0x6a03e3fee041
	float GetHorizontalFieldOfView();// 0x6a02e3fee041
	Timespan GetDuration();// 0x6a01e3fee041
	FName GetDesiredPlayerName();// 0x6a00e3fee041
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0x69ffe3fee041
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0x69fee3fee041
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0x69fde3fee041
	void Close();// 0x69fce3fee041
	bool CanPlayUrl(FString URL);// 0x69fbe3fee041
	bool CanPlaySource(MediaSource* MediaSource);// 0x69fae3fee041
	bool CanPause();// 0x69f9e3fee041

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0x69f2e3fee041
	void SetMediaOptionString(out const FName Key, FString Value);// 0x69f1e3fee041
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0x69f0e3fee041
	void SetMediaOptionFloat(out const FName Key, float Value);// 0x69efe3fee041
	void SetMediaOptionBool(out const FName Key, bool Value);// 0x69eee3fee041
	FString GetUrl();// 0x69ede3fee041

--------------------------------
Class: MediaPlayerOptions
	MediaPlayerTrackOptions Tracks;//[Offset: 0x0, Size: 0x1c]
	Timespan SeekTime;//[Offset: 0x20, Size: 0x8]
	enum PlayOnOpen;//[Offset: 0x28, Size: 0x1]
	enum Loop;//[Offset: 0x29, Size: 0x1]

--------------------------------
Class: MediaPlayerTrackOptions
	int Audio;//[Offset: 0x0, Size: 0x4]
	int Caption;//[Offset: 0x4, Size: 0x4]
	int MetaData;//[Offset: 0x8, Size: 0x4]
	int Script;//[Offset: 0xc, Size: 0x4]
	int Subtitle;//[Offset: 0x10, Size: 0x4]
	int Text;//[Offset: 0x14, Size: 0x4]
	int Video;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: MediaPlaylist.Object
	MediaSource*[] Items;//[Offset: 0x28, Size: 0x10]
	bool Replace(int Index, MediaSource* Replacement);// 0x6a4fe3fee041
	bool RemoveAt(int Index);// 0x6a4ee3fee041
	bool Remove(MediaSource* MediaSource);// 0x6a4de3fee041
	int Num();// 0x6a4ce3fee041
	void Insert(MediaSource* MediaSource, int Index);// 0x6a4be3fee041
	MediaSource* GetRandom(out int OutIndex);// 0x6a4ae3fee041
	MediaSource* GetPrevious(out int InOutIndex);// 0x6a49e3fee041
	MediaSource* GetNext(out int InOutIndex);// 0x6a48e3fee041
	MediaSource* Get(int Index);// 0x6a47e3fee041
	bool AddUrl(FString URL);// 0x6a46e3fee041
	bool AddFile(FString FilePath);// 0x6a45e3fee041
	bool Add(MediaSource* MediaSource);// 0x6a44e3fee041

--------------------------------
Class: MediaTimeStampInfo.Object
	Timespan Time;//[Offset: 0x28, Size: 0x8]
	int64 SequenceIndex;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: MFMobileGamePadViewEffect.MFMobileGamePadView.SGUserWidget.UserWidget.Widget.Visual.Object
	SoundIndicatorWidget* SoundIndicatorHUD;//[Offset: 0x2f0, Size: 0x8]

--------------------------------
Class: SoundIndicatorWidget.SGUserWidget.UserWidget.Widget.Visual.Object
	int SoundQueueMaxLength;//[Offset: 0x2c4, Size: 0x4]
	int MaxSoundWidgetDisplayNum;//[Offset: 0x2c8, Size: 0x4]
	int OnGenerateSoundCalledMaxCount;//[Offset: 0x2cc, Size: 0x4]
	class UserWidget* SoundWidgetClass;//[Offset: 0x2d0, Size: 0x8]
	CanvasPanel* IndicatorPanel;//[Offset: 0x2d8, Size: 0x8]
	SoundIndicatorArrowWidget* LeftArrow;//[Offset: 0x2e0, Size: 0x8]
	SoundIndicatorArrowWidget* RightArrow;//[Offset: 0x2e8, Size: 0x8]
	Widget* Backboard;//[Offset: 0x2f0, Size: 0x8]
	Vector2D IndicatorPanelOffset;//[Offset: 0x2f8, Size: 0x8]
	float FootStepMakerZRange;//[Offset: 0x300, Size: 0x4]
	float UpperAngle;//[Offset: 0x304, Size: 0x4]
	float LowerAngle;//[Offset: 0x308, Size: 0x4]
	float IndicatorAppearDuration;//[Offset: 0x30c, Size: 0x4]
	float AngleThresHold;//[Offset: 0x310, Size: 0x4]
	bool bIsTinnitus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	bool bIsInBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 0x1]
	Actor* LeftArrowSource;//[Offset: 0x340, Size: 0x8]
	Actor* RightArrowSource;//[Offset: 0x348, Size: 0x8]
	<Actor*,SoundContext> ActiveSoundMap;//[Offset: 0x358, Size: 0x50]
	SoundWaveWidget*[] SoundWaveSoundActorArr;//[Offset: 0x3a8, Size: 0x10]
	<Actor*,bool> ActiveSoundMapUpdateFlags;//[Offset: 0x3b8, Size: 0x50]
	SGCharacter* ViewChar;//[Offset: 0x408, Size: 0x8]
	SoundWaveWidget*[] IconWidgetList;//[Offset: 0x410, Size: 0x10]
	SoundContext PreviewSoundContext;//[Offset: 0x420, Size: 0x78]
	Vector2D VecHalfXY;//[Offset: 0x498, Size: 0x8]
	WidgetAnimation* LeftArrowAnim;//[Offset: 0x4a0, Size: 0x8]
	WidgetAnimation* RightArrowAnim;//[Offset: 0x4a8, Size: 0x8]
	void ResetActiveSoundList();// 0x610ee3fee041
	void OnStartSpectating(SGCharacter* SpectatingCharacter);// 0x610de3fee041
	void OnGenerateSoundPreview(Vector RelativePos, enum SoundType, float Level, float TempDuration, float TempFadeTime);// 0x610ce3fee041
	void OnGenerateSound(Actor* SourceActor, enum SoundType, float Level, float TempDuration, float TempFadeTime);// 0x610be3fee041
	void OnGenerateExplosionSound(Character* SourceCharacter, out Vector ExplosionCenter, float Distance);// 0x610ae3fee041
	void FrameUpdateImpl(float InDeltaTime);// 0x6109e3fee041
	void ConditionalUpdateImpl(float InDeltaTime);// 0x6108e3fee041
	void AddToActiveSoundMap(Actor* SourceActor, enum SoundType, float Level, float TempDuration, float TempFadeTime);// 0x6107e3fee041

--------------------------------
Class: SoundIndicatorArrowWidget.SGUserWidget.UserWidget.Widget.Visual.Object
	Image* ArrowForward;//[Offset: 0x2c8, Size: 0x8]
	CanvasPanel* ArrowBackward;//[Offset: 0x2d0, Size: 0x8]
	WidgetAnimation* AnimF;//[Offset: 0x2d8, Size: 0x8]
	WidgetAnimation* AnimB;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: SoundContext
	Vector SoundLocation;//[Offset: 0x0, Size: 0xc]
	SoundWaveWidget* IconWidget;//[Offset: 0x10, Size: 0x8]
	MaterialInterface* MatUpper;//[Offset: 0x18, Size: 0x8]
	MaterialInterface* MatMiddle;//[Offset: 0x20, Size: 0x8]
	MaterialInterface* MatLower;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SoundWaveWidget.SGUserWidget.UserWidget.Widget.Visual.Object
	Widget* UpperArrow;//[Offset: 0x2c8, Size: 0x8]
	Widget* LowerArrow;//[Offset: 0x2d0, Size: 0x8]
	VisibilityWidgetSwitcher* SoundImageSwitcher;//[Offset: 0x2d8, Size: 0x8]
	Actor* SourceActor;//[Offset: 0x2e0, Size: 0x8]
	float StaffGuageWidth;//[Offset: 0x2e8, Size: 0x4]
	float AngleThresHold;//[Offset: 0x2ec, Size: 0x4]
	float ArrowMoveFactor;//[Offset: 0x2f0, Size: 0x4]

--------------------------------
Class: VisibilityWidgetSwitcher.CanvasPanel.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x150, Size: 0x4]
	void SetActiveWidgetIndex(int Index);// 0x687ae3fee041
	void SetActiveWidget(Widget* Widget);// 0x6879e3fee041
	Widget* GetWidgetAtIndex(int Index);// 0x6878e3fee041
	int GetActiveWidgetIndex();// 0x6877e3fee041
	Widget* GetActiveWidget();// 0x6876e3fee041

--------------------------------
Class: MyBreakableCompSoundPlayer.ActorComponent.Object
	Object* SoundBreak;//[Offset: 0xb8, Size: 0x8]
	void OnBreakableCompHit(int RetType);// 0x6009e3fee041

--------------------------------
Class: PylonPoint.NavigationObjectBase.Actor.Object
	int PylonID;//[Offset: 0x304, Size: 0x4]
	void ResetAllPylonPointID();// 0x600ce3fee041
	void PrintAllNearByLootPoint(float Distance);// 0x600be3fee041
	IntPoint GetPositionKey(Vector WorldLocation, float GridSize);// 0x600ae3fee041

--------------------------------
Class: QuestAction_CompleteEvent_G.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	void OnQuestStateChange(enum NewState, enum OldState);// 0x600de3fee041

--------------------------------
Class: QuestAction_Damage_T.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum EnduranceType;//[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: QuestAction_Debuff_T.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum EnduranceType;//[Offset: 0xc0, Size: 0x1]
	FString BuffName;//[Offset: 0xc8, Size: 0x10]
	void AddDebuff();// 0x600ee3fee041

--------------------------------
Class: QuestAction_FinishQuest.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	void OnQuestStateChange(Actor* Owner, Actor* QuestActor, int NewState, int OldState);// 0x600fe3fee041

--------------------------------
Class: QuestAction_FollowBar_T.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum FlowBarType;//[Offset: 0xc0, Size: 0x1]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	Actor* TargetActor;//[Offset: 0xc8, Size: 0x8]
	Vector Offset;//[Offset: 0xd0, Size: 0xc]
	FString TextStrKey;//[Offset: 0xe0, Size: 0x10]
	bool IsLocalOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool IsDetiveAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]

--------------------------------
Class: QuestAction_HUDMask_T.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	int Maskid;//[Offset: 0xc0, Size: 0x4]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	bool IsDeactiveAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	bool bShowMaskVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 0x1]

--------------------------------
Class: QuestAction_HudMessage_T.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	int64[] MessageArray;//[Offset: 0xc0, Size: 0x10]
	int64[] ClearMessageArray;//[Offset: 0xd0, Size: 0x10]
	bool IsDetiveAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]

--------------------------------
Class: QuestAction_InputChange_T.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum PadButtonType;//[Offset: 0xc0, Size: 0x1]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool IsDetiveAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bLimitInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1]

--------------------------------
Class: QuestAction_InventoryDestroyed.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	int[] InventoryIDs;//[Offset: 0xc0, Size: 0x10]
	enum EffectType;//[Offset: 0xd0, Size: 0x1]
	void OnActorSpawned(Actor* InActor);// 0x6011e3fee041
	void OnActorDestroyed(Actor* DestroyedActor);// 0x6010e3fee041

--------------------------------
Class: QuestAction_ItemMenu_T.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool IsDeactiveAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: QuestAction_LetVolumeInteractable.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	int[] MapIDs;//[Offset: 0xc0, Size: 0x10]
	FString VolumeName;//[Offset: 0xd0, Size: 0x10]
	enum OperatorType;//[Offset: 0xe0, Size: 0x1]
	bool bForceUsePointMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	bool bEnterVolumeAutoComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1]
	UserWidgetPopInfo UserWidgetPopInfo;//[Offset: 0xe8, Size: 0x58]
	bool bCheckCostBeforePopWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	InteractInventoryInfo[] CostInventoryInfos;//[Offset: 0x148, Size: 0x10]
	InteractInventoryInfo[] ObtainInventoryInfos;//[Offset: 0x158, Size: 0x10]
	SGVolume* ValidVolume;//[Offset: 0x168, Size: 0x8]
	bool bAlreadyGathered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	void OnQuestStateChange(enum NewState, enum OldState);// 0x6012e3fee041

--------------------------------
Class: InteractInventoryInfo
	int64 ItemID;//[Offset: 0x0, Size: 0x8]
	class SGInventory* InventoryClass;//[Offset: 0x8, Size: 0x8]
	int Count;//[Offset: 0x10, Size: 0x4]
	enum CostType;//[Offset: 0x14, Size: 0x1]
	bool OnlyCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]

--------------------------------
Class: QuestAction_LockInput_T.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	bool bLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool IsDeactiveAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: QuestAction_MessageInState_T.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum characterState;//[Offset: 0xd8, Size: 0x1]
	int64[] InStateMessageArray;//[Offset: 0xe0, Size: 0x10]
	int64[] InStateClearMessageArray;//[Offset: 0xf0, Size: 0x10]
	enum InStateEffect;//[Offset: 0x100, Size: 0x1]
	int64[] NotInStateMessageArray;//[Offset: 0x108, Size: 0x10]
	int64[] NotInStateClearMessageArray;//[Offset: 0x118, Size: 0x10]
	enum NotInStateEffect;//[Offset: 0x128, Size: 0x1]
	enum InStatePadButtonType;//[Offset: 0x129, Size: 0x1]
	enum InStateHightWidget;//[Offset: 0x12a, Size: 0x1]
	Vector2D InStateOffSet;//[Offset: 0x12c, Size: 0x8]
	enum NotInStatePadButtonType;//[Offset: 0x134, Size: 0x1]
	enum NotInStateHightWidget;//[Offset: 0x135, Size: 0x1]
	Vector2D NotInStateOffSet;//[Offset: 0x138, Size: 0x8]
	bool IsInState();// 0x6015e3fee041
	void BroadCastNoInstateHighEffect();// 0x6014e3fee041
	void BroadCastInstateHighEffect();// 0x6013e3fee041

--------------------------------
Class: QuestAction_MoveVolumeParticle_T.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	UAMTutorialMoveToVolume* MoveVolume;//[Offset: 0xc0, Size: 0x8]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool IsDetiveAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]

--------------------------------
Class: UAMTutorialMoveToVolume.SGVolume.PhysicsVolume.Volume.Brush.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x368, Size: 0x8]
	ParticleSystem* Particle;//[Offset: 0x370, Size: 0x8]
	void ShowParticle();// 0x63f8e3fee041
	void HideParticle();// 0x63f7e3fee041

--------------------------------
Class: QuestAction_PadHightEffect_T.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum PadButtonType;//[Offset: 0xc0, Size: 0x1]
	enum HightWidget;//[Offset: 0xc1, Size: 0x1]
	Vector2D Offset;//[Offset: 0xc4, Size: 0x8]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	bool IsDetiveAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 0x1]
	void BroadCastHighEffect();// 0x6016e3fee041

--------------------------------
Class: QuestAction_QuestReport.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	int[] AcitveReportIDList;//[Offset: 0xc0, Size: 0x10]
	int[] SuccessReportIDList;//[Offset: 0xd0, Size: 0x10]
	int[] FaildReportIDList;//[Offset: 0xe0, Size: 0x10]
	void OnQuestStateChange(enum NewState, enum OldState);// 0x6017e3fee041

--------------------------------
Class: QuestAction_RelevantToActors.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	Actor*[] TargetActors;//[Offset: 0xc0, Size: 0x10]
	int[] InteractItemIDs;//[Offset: 0xd0, Size: 0x10]
	int[] VolumeItemIDs;//[Offset: 0xe0, Size: 0x10]
	int[] InventoryItemIDs;//[Offset: 0xf0, Size: 0x10]
	int[] AIIDs;//[Offset: 0x100, Size: 0x10]
	bool bForceUsePointMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	enum OperatorType;//[Offset: 0x111, Size: 0x1]
	enum MarkType;//[Offset: 0x112, Size: 0x1]
	float ScanningInterval;//[Offset: 0x114, Size: 0x4]
	void OnKilledEvent(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x6018e3fee041

--------------------------------
Class: QuestAction_SoundUI_T.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool IsDetiveAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: QuestInteractItemSpawnInfo.Object
	QuestItemSpawnPoint* InventorySpawnPoint;//[Offset: 0x28, Size: 0x8]
	class SGNetRelevantConfigurableActor* InteractItemClass;//[Offset: 0x30, Size: 0x8]
	bool bCheckPlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	enum OperatorType;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: QuestItemSpawnPoint.NavigationObjectBase.Actor.Object
	int SpawnPointID;//[Offset: 0x304, Size: 0x4]
	Character* CurrentInstigator;//[Offset: 0x308, Size: 0x8]
	class ActorComponent[] AdditionComponents;//[Offset: 0x310, Size: 0x10]

--------------------------------
Class: QuestAction_SpawnInteractItem.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	QuestInteractItemSpawnInfo*[] QuestInteractItemSpawnInfos;//[Offset: 0xc0, Size: 0x10]
	SGNetRelevantConfigurableActor*[] SpawnedInteractItem;//[Offset: 0xd0, Size: 0x10]
	bool bDontDestroyOnDeactive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]

--------------------------------
Class: QuestAction_SpawnQuestDistributer.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	int MapID;//[Offset: 0xc0, Size: 0x4]
	class MFQuestDistributerBase* DistributerClass;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: QuestInventorySpawnInfo.Object
	QuestItemSpawnPoint* InventorySpawnPoint;//[Offset: 0x28, Size: 0x8]
	uint64 ItemID;//[Offset: 0x30, Size: 0x8]
	int ItemStackCount;//[Offset: 0x38, Size: 0x4]
	bool bCheckPlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	enum OperatorType;//[Offset: 0x3d, Size: 0x1]
	enum MarkType;//[Offset: 0x3e, Size: 0x1]
	float ScanningInterval;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: QuestAction_SpawnQuestInventory.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	QuestInventorySpawnInfo*[] QuestInventorySpawnInfos;//[Offset: 0xc0, Size: 0x10]
	int SpawnInventoryNum;//[Offset: 0xd0, Size: 0x4]
	QuestActionSpawnInventoryInfo[] SpawnInventoryInfos;//[Offset: 0xd8, Size: 0x10]
	SGInventory*[] SpawnedQuestInventorys;//[Offset: 0xe8, Size: 0x10]

--------------------------------
Class: QuestActionSpawnInventoryInfo
	int64 SpawnPointID;//[Offset: 0x0, Size: 0x8]
	int64 ItemID;//[Offset: 0x8, Size: 0x8]
	int Weight;//[Offset: 0x10, Size: 0x4]
	int ItemStackCount;//[Offset: 0x14, Size: 0x4]
	bool bCheckPlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum OperatorType;//[Offset: 0x19, Size: 0x1]
	enum MarkType;//[Offset: 0x1a, Size: 0x1]
	float ScanningInterval;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: QuestAction_TimeLimitCountDown.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	float CountDownStartSecond;//[Offset: 0xc0, Size: 0x4]
	float RemainTime;//[Offset: 0xc4, Size: 0x4]
	float RemainTimeUpdateServerTime;//[Offset: 0xc8, Size: 0x4]
	TimerHandle CountDownTimerHandle;//[Offset: 0xd0, Size: 0x8]
	Actor*[] TargetActors;//[Offset: 0xd8, Size: 0x10]
	int[] InteractItemIDs;//[Offset: 0xe8, Size: 0x10]
	int[] VolumeItemIDs;//[Offset: 0xf8, Size: 0x10]
	int[] InventoryItemIDs;//[Offset: 0x108, Size: 0x10]
	int[] AIIDs;//[Offset: 0x118, Size: 0x10]
	void SetMissionRemainTime();// 0x6021e3fee041
	void RemoveQuestTraceInfo();// 0x6020e3fee041
	void OnRep_RemainTime();// 0x601fe3fee041
	void OnQuestStateChange(enum NewState, enum OldState);// 0x601ee3fee041
	void OnFinishCountDown();// 0x601de3fee041
	float GetServerWorldTime();// 0x601ce3fee041
	float GetRemainTime();// 0x601be3fee041
	float GetQuestRemainTimeUpdateServerTime();// 0x601ae3fee041
	float GetQuestRemainTime();// 0x6019e3fee041

--------------------------------
Class: QuestAction_WidgetEffect_T.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum PadEffectType;//[Offset: 0xc0, Size: 0x1]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool IsDetiveAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]

--------------------------------
Class: QuestActionComp_SendNPCRequest.MFQuestActionComponentBase.MFQuestComponentBase.ActorComponent.Object
	Actor* DestinationActor;//[Offset: 0xc8, Size: 0x8]
	float Timeout;//[Offset: 0xd0, Size: 0x4]
	void RequestStep(int Step);// 0x6029e3fee041
	void OnRequestTimeout();// 0x6028e3fee041
	void OnQuestProgressed(int ProgressToAdd, int CurrentProgress);// 0x6027e3fee041
	void OnQuestDeactived(enum InResult);// 0x6026e3fee041
	MFQuestBase* GetOwnerQuest();// 0x6025e3fee041
	SGCharacter* GetActionOwner();// 0x6024e3fee041
	void FinishQuest();// 0x6023e3fee041
	void EndQuestAction();// 0x6022e3fee041

--------------------------------
Class: QuestBase.MFQuestBase.Actor.Object
	bool bClearProgressWhenFinishGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	QuestTraceInfoComponent* QuestTraceInfoComponent;//[Offset: 0x3c8, Size: 0x8]
	void OnPlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x602de3fee041
	QuestTraceInfoComponent* GetQuestTraceInfoComponent();// 0x602ce3fee041
	int GetMaxProgress();// 0x602be3fee041
	int GetCurrProgress();// 0x602ae3fee041

--------------------------------
Class: QuestTraceInfoComponent.MFQuestComponentBase.ActorComponent.Object
	void AddQuestTraceInfo(Actor* QuestTraceActor, enum InOperatorType, enum InMarkType, float InScanningInterval);// 0x6106e3fee041

--------------------------------
Class: QuestConditionComp_ArmorType.MFQuestConditionComponentBase.Object
	bool bEqualType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	enum ArmorType;//[Offset: 0x51, Size: 0x1]

--------------------------------
Class: QuestConditionComp_CharacterEnduranceType.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	enum CharacterEnduranceType;//[Offset: 0x58, Size: 0x1]
	enum[] CharacterEnduranceTypes;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: QuestConditionComp_CharacterGameEffectType.MFQuestConditionComponentBase.Object
	enum[] CharacterGameEffectTypes;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: QuestConditionComp_CharacterState_T.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* SourceActorContextConfig;//[Offset: 0x50, Size: 0x8]
	enum characterState;//[Offset: 0x58, Size: 0x1]
	enum CharacterStateCheckType;//[Offset: 0x59, Size: 0x1]
	bool IsInState();// 0x602ee3fee041

--------------------------------
Class: QuestConditionComp_CharacterStatus.MFQuestConditionComponentBase.Object
	enum CharacterType;//[Offset: 0x50, Size: 0x1]
	enum CharacterStatus;//[Offset: 0x51, Size: 0x1]
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x58, Size: 0x8]
	int[] AIIDs;//[Offset: 0x60, Size: 0x10]
	FString[] AreaIDs;//[Offset: 0x70, Size: 0x10]
	bool CheckTeammate(out const QuestContextPair[] QuestContextList);// 0x6031e3fee041
	bool CheckAreaIDs();// 0x6030e3fee041
	bool CheckAIIDs();// 0x602fe3fee041

--------------------------------
Class: QuestConditionComp_CharacterType.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	enum[] SpecifiedTypes;//[Offset: 0x58, Size: 0x10]
	int64 BossGroupID;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: QuestConditionComp_ChaseActivityState.MFQuestConditionComponentBase.Object
	enum ChaseActivityState;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: QuestConditionComp_CheckAchievement.MFQuestConditionComponentBase.Object
	int AchievementValue;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: QuestConditionComp_CheckAIID.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	int64[] ValidAIIDPrefix;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: CharacterAttributeCheckInfo.Object
	bool bUseCustomAttribute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	GameplayAttribute Attribute;//[Offset: 0x30, Size: 0x38]
	enum CustomAttribute;//[Offset: 0x68, Size: 0x1]
	float MinValue;//[Offset: 0x6c, Size: 0x4]
	float MaxValue;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: QuestConditionComp_CheckAttribute.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	CharacterAttributeCheckInfo*[] AttributeCheckInfoList;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: QuestConditionComp_CheckCharacterEquipItem.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	bool bCheckTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	enum CheckItemType;//[Offset: 0x59, Size: 0x1]
	CheckItemParamBase*[] CheckParams;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: CheckItemParamBase.Object

--------------------------------
Class: CheckDamageInfoParamBase.Object

--------------------------------
Class: CheckCaptureWeaponZoomType.CheckDamageInfoParamBase.Object
	enum ZoomType;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: CheckDamageTypeClass.CheckDamageInfoParamBase.Object
	class DamageType* DamageTypeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: CheckBulletItemId.CheckDamageInfoParamBase.Object
	uint64[] ValidBulletIds;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: QuestConditionComp_CheckDamageInfo.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	CheckDamageInfoParamBase*[] CheckParams;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: CharacterGameplayTagCheckInfo.Object
	GameplayTagContainer TagContainer;//[Offset: 0x28, Size: 0x20]
	enum CheckType;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: QuestConditionComp_CheckGameplayEffect.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	CharacterGameplayTagCheckInfo*[] GameplayTagCheckInfoList;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: CheckItemTypeID.CheckItemParamBase.Object
	uint64[] ItemTypeIDs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: CheckIsTakeInItem.CheckItemParamBase.Object
	bool bIsTakeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: CheckOccupiedGridCount.CheckItemParamBase.Object
	int OccupiedGridCountMin;//[Offset: 0x28, Size: 0x4]
	int OccupiedGridCountMax;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CheckDurability.CheckItemParamBase.Object
	float MinDurability;//[Offset: 0x28, Size: 0x4]
	float MaxDurability;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CheckWeight.CheckItemParamBase.Object
	float MinWeight;//[Offset: 0x28, Size: 0x4]
	float MaxWeight;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CheckEngonomics.CheckItemParamBase.Object
	float MinEngonomics;//[Offset: 0x28, Size: 0x4]
	float MaxEngonomics;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CheckAccuracy.CheckItemParamBase.Object
	float MinAccuracy;//[Offset: 0x28, Size: 0x4]
	float MaxAccuracy;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CheckHorizontalRecoil.CheckItemParamBase.Object
	float MinHorizontalRecoil;//[Offset: 0x28, Size: 0x4]
	float MaxHorizontalRecoil;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CheckVerticalRecoil.CheckItemParamBase.Object
	float MinVerticalRecoil;//[Offset: 0x28, Size: 0x4]
	float MaxVerticalRecoil;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CheckRequireAdapters.CheckItemParamBase.Object
	uint64[] RequireAdapters;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: CheckExclusionAdapters.CheckItemParamBase.Object
	uint64[] ExclusionAdapters;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: CheckFireMode.CheckItemParamBase.Object
	enum FireMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: CheckRuntimeFireRate.CheckItemParamBase.Object
	int MinFireRatePerMinute;//[Offset: 0x28, Size: 0x4]
	int MaxFireRatePerMinute;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CheckSightRange.CheckItemParamBase.Object
	float MinSightRange;//[Offset: 0x28, Size: 0x4]
	float MaxSightRange;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CheckCurrentBulletCount.CheckItemParamBase.Object
	int MinBulletCount;//[Offset: 0x28, Size: 0x4]
	int MaxBulletCount;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CheckMaxBulletCount.CheckItemParamBase.Object
	int MinBulletCount;//[Offset: 0x28, Size: 0x4]
	int MaxBulletCount;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CheckMuzzleVelocity.CheckItemParamBase.Object
	float MinMuzzleVelocity;//[Offset: 0x28, Size: 0x4]
	float MaxMuzzleVelocity;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CheckAdsMoa.CheckItemParamBase.Object
	float AdsMoaXMin;//[Offset: 0x28, Size: 0x4]
	float AdsMoaXMax;//[Offset: 0x2c, Size: 0x4]
	float AdsMoaYMin;//[Offset: 0x30, Size: 0x4]
	float AdsMoaYMax;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: CheckLootPointType.CheckItemParamBase.Object
	int[] LootPointTypes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: CheckWeaponCanFire.CheckItemParamBase.Object
	bool IsCanFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: QuestConditionComp_CheckItem.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckCharacterContextSource;//[Offset: 0x50, Size: 0x8]
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x58, Size: 0x8]
	CheckItemParamBase*[] CheckParams;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: QuestConditionComp_CheckItemID.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	uint64[] CheckItemIDs;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: QuestConditionComp_CheckNumber.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	bool bIntNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	enum CompareType;//[Offset: 0x59, Size: 0x1]
	int MinIntValue;//[Offset: 0x5c, Size: 0x4]
	int MaxIntValue;//[Offset: 0x60, Size: 0x4]
	float MinFloatValue;//[Offset: 0x64, Size: 0x4]
	float MaxFloatValue;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: QuestConditionComp_CheckPlayerLevel.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	int MinLevel;//[Offset: 0x58, Size: 0x4]
	int MaxLevel;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: QuestConditionComp_CheckUseInventoryPhase.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	enum UseInventoryPhase;//[Offset: 0x58, Size: 0x1]

--------------------------------
Class: QuestConditionComp_CurrentTODTime.MFQuestConditionComponentBase.Object
	TimeOfDay StartTime;//[Offset: 0x50, Size: 0xc]
	TimeOfDay EndTime;//[Offset: 0x5c, Size: 0xc]

--------------------------------
Class: TimeOfDay
	int Hour;//[Offset: 0x0, Size: 0x4]
	int Minute;//[Offset: 0x4, Size: 0x4]
	int Second;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: QuestConditionComp_EscapeVolume.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	int[] EscapePointIDs;//[Offset: 0x58, Size: 0x10]
	enum OperatorType;//[Offset: 0x68, Size: 0x1]

--------------------------------
Class: QuestConditionComp_MapName.MFQuestConditionComponentBase.Object
	FString MapName;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: QuestConditionComp_MvItemFail_T.MFQuestConditionComponentBase.Object
	void OnMoveResult();// 0x6032e3fee041

--------------------------------
Class: QuestConditionComp_PlayerEndGameType.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	enum[] PlayerEndGameTypes;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: QuestConditionComp_PlayModeId.MFQuestConditionComponentBase.Object
	int[] ModeIDArray;//[Offset: 0x50, Size: 0x10]
	int[] SubModeIDArray;//[Offset: 0x60, Size: 0x10]
	int[] MapIDArray;//[Offset: 0x70, Size: 0x10]
	int[] RuleIdArray;//[Offset: 0x80, Size: 0x10]
	int[] DifficultyArray;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: QuestConditionComp_RecoveryAttributeType.MFQuestConditionComponentBase.Object
	enum RecoveryAttributeType;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: QuestConditionComp_StayVolume.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	int[] ValidVolumeIDs;//[Offset: 0x58, Size: 0x10]
	FString[] ValidVolumeNames;//[Offset: 0x68, Size: 0x10]
	bool bForceUsePointMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	SGVolume*[] ValidVolumes;//[Offset: 0x80, Size: 0x10]
	enum OperatorType;//[Offset: 0x90, Size: 0x1]

--------------------------------
Class: QuestConditionComp_TakeLimit.MFQuestConditionComponentBase.Object
	uint64[] ItemTypeIDs;//[Offset: 0x50, Size: 0x10]
	enum LogicType;//[Offset: 0x60, Size: 0x1]
	void RefreshTakeLimitResult();// 0x6036e3fee041
	void RefreshProgressWhenReadyToPlay(SGCharacter* SGCharacter);// 0x6035e3fee041
	void OnProcessPawn(Pawn* Pawn);// 0x6034e3fee041
	void OnCharacterReadyToPlay(SGCharacter* Character);// 0x6033e3fee041

--------------------------------
Class: QuestConditionComp_TeamInfo.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	enum TeamInfoCheckType;//[Offset: 0x58, Size: 0x1]
	FString StringValue1;//[Offset: 0x60, Size: 0x10]
	FString StringValue2;//[Offset: 0x70, Size: 0x10]
	bool IsPassCheck(Actor* Actor);// 0x6037e3fee041

--------------------------------
Class: QuestConditionComp_TimeAfterActivation.MFQuestConditionComponentBase.Object
	enum CompareType;//[Offset: 0x50, Size: 0x1]
	int Value1;//[Offset: 0x54, Size: 0x4]
	int Value2;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: QuestConditionComp_TimeLimit.MFQuestConditionComponentBase.Object
	class MFQuestContextSourceBase* CheckTargetContextSource;//[Offset: 0x50, Size: 0x8]
	enum TimeLimitType;//[Offset: 0x60, Size: 0x1]
	int TimeLimitSeconds;//[Offset: 0x64, Size: 0x4]
	int TimeRecordCount;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: QuestContextSource_ArmorType.MFQuestContextSourceBase.Object

--------------------------------
Class: QuestContextSource_BodyParts.MFQuestContextSourceBase.Object

--------------------------------
Class: QuestContextSource_CharacterEnduranceType.MFQuestContextSourceBase.Object

--------------------------------
Class: QuestContextSource_CharacterGameEffectType.MFQuestContextSourceBase.Object

--------------------------------
Class: QuestContextSource_DamageInfo.MFQuestContextSourceBase.Object

--------------------------------
Class: QuestContextSource_PlayerEndGameType.MFQuestContextSourceBase.Object

--------------------------------
Class: QuestContextSource_RecoveryAttributeType.MFQuestContextSourceBase.Object

--------------------------------
Class: QuestContextSource_Teammate.MFQuestContextSourceBase.Object

--------------------------------
Class: QuestContextSource_UseInventoryPhase.MFQuestContextSourceBase.Object

--------------------------------
Class: QuestContextSource_Weapon.MFQuestContextSourceBase.Object

--------------------------------
Class: QuestDistributerSubsystem.WorldSubsystem.Subsystem.Object
	FString[] QuestDistPathList;//[Offset: 0x30, Size: 0x10]
	class Object[] BlueprintGeneratedClasses;//[Offset: 0x48, Size: 0x10]
	MFQuestDistributerBase*[] SpawnedQuestDistributers;//[Offset: 0x58, Size: 0x10]
	DistributeQuestHistory[] DistributeQuestHistories;//[Offset: 0x68, Size: 0x10]
	void OnBeginGameInit();// 0x603ae3fee041
	MFQuestDistributerBase*[] GetSpawnedQuestDistributers();// 0x6039e3fee041
	DistributeQuestHistory[] GetDistributeQuestHistories();// 0x6038e3fee041

--------------------------------
Class: DistributeQuestHistory
	MFQuestDistributerBase* QuestDistributer;//[Offset: 0x0, Size: 0x8]
	enum TriggerCharacterType;//[Offset: 0x8, Size: 0x1]
	int TriggerCharacterLevel;//[Offset: 0xc, Size: 0x4]
	int GraphID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: QuestEffect_ActivateLootPoint.MFQuestEffectBase.Object
	<int64,ActivateLootPointConfigs> ActivateLootPointConfigs;//[Offset: 0x38, Size: 0x50]

--------------------------------
Class: ActivateLootPointConfigs
	int[] ForceActivateLootPoints;//[Offset: 0x0, Size: 0x10]
	ActivateLootPointConfig[] ActivateConfigs;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ActivateLootPointConfig
	int LootPointType;//[Offset: 0x0, Size: 0x4]
	int ActivateMinCount;//[Offset: 0x4, Size: 0x4]
	int ActivateMaxCount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: QuestEffect_Broadcast.MFQuestEffectBase.Object
	class MFQuestContextSourceBase* RelatedTargetContextSource;//[Offset: 0x38, Size: 0x8]
	enum[] RelatedTargetTypes;//[Offset: 0x40, Size: 0x10]
	BroadcastOnGameHUDConfig GameHUDConfig;//[Offset: 0x50, Size: 0x30]

--------------------------------
Class: QuestEffect_BroadcastAchievement.MFQuestEffectBase.Object

--------------------------------
Class: QuestEffect_DistributeQuest.MFQuestEffectBase.Object
	class MFQuestContextSourceBase* TargetContextSource;//[Offset: 0x38, Size: 0x8]
	enum[] RelatedTargetTypes;//[Offset: 0x40, Size: 0x10]
	bool bUseRandomQuestTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int GraphID;//[Offset: 0x54, Size: 0x4]
	DataTable* RandomQuestTable;//[Offset: 0x58, Size: 0x8]
	void DistributeQuest(Character* Character, int DistributeQuestID, enum QuestType);// 0x603be3fee041

--------------------------------
Class: QuestEffect_GiveItem.MFQuestEffectBase.Object
	class MFQuestContextSourceBase* TargetContextSource;//[Offset: 0x38, Size: 0x8]
	enum[] RelatedTargetTypes;//[Offset: 0x40, Size: 0x10]
	GiveItemInfo[] GiveItemInfos;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: GiveItemInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int MinStackCount;//[Offset: 0x4, Size: 0x4]
	int MaxStackCount;//[Offset: 0x8, Size: 0x4]
	class SGInventory* InventoryClass;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: QuestEffect_ModifyAchievement.MFQuestEffectBase.Object
	class MFQuestContextSourceBase* ModifyTarget;//[Offset: 0x38, Size: 0x8]
	class MFQuestContextSourceBase* ModifyValueSource;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: QuestEffect_ModifyEscapePoint.MFQuestEffectBase.Object
	TimerHandle TickTimerHandle;//[Offset: 0x38, Size: 0x8]
	bool bOpenEscapePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	int RandomEscapePoint;//[Offset: 0x44, Size: 0x4]
	RandomEscapePoint[] RandomEscapePointIDs;//[Offset: 0x48, Size: 0x10]
	int[] EscapePointIDs;//[Offset: 0x58, Size: 0x10]
	enum CharacterType;//[Offset: 0x68, Size: 0x1]
	FString[] EscapePresetNames;//[Offset: 0x70, Size: 0x10]
	bool bUseCharacterType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	float DelayTime;//[Offset: 0x84, Size: 0x4]
	void OnTimer();// 0x603ce3fee041

--------------------------------
Class: RandomEscapePoint
	int EscapePointID;//[Offset: 0x0, Size: 0x4]
	int Weight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: QuestEffect_ModifyMarkable.MFQuestEffectBase.Object
	class MFQuestContextSourceBase* RelatedTargetContextSource;//[Offset: 0x38, Size: 0x8]
	enum[] RelatedTargetTypes;//[Offset: 0x40, Size: 0x10]
	bool bMarkable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	class MFQuestContextSourceBase* AICharacterMarkContextSource;//[Offset: 0x58, Size: 0x8]
	AICharacterMarkableInfo[] AICharacterMarkables;//[Offset: 0x60, Size: 0x10]
	InventoryMarkableInfo[] InventoryMarkables;//[Offset: 0x70, Size: 0x10]
	VolumeMarkableInfo[] VolumeMarkables;//[Offset: 0x80, Size: 0x10]
	void ModifyVolumeMarkable(UAPlayerStateTraceComponent* InPlayerStateTraceComponent, Actor*[] InVolumeActors);// 0x603fe3fee041
	void ModifyInventoryMarkable(UAPlayerStateTraceComponent* InPlayerStateTraceComponent, Actor*[] InInventoryActors);// 0x603ee3fee041
	void ModifyAICharacterMarkable(UAPlayerStateTraceComponent* InPlayerStateTraceComponent, SGAICharacter* InMarkAICharacter);// 0x603de3fee041

--------------------------------
Class: AICharacterMarkableInfo
	int64 AIID;//[Offset: 0x0, Size: 0x8]
	enum OperatorType;//[Offset: 0x8, Size: 0x1]
	enum SpawnReason;//[Offset: 0x9, Size: 0x1]
	enum MarkType;//[Offset: 0xa, Size: 0x1]
	int TargetId;//[Offset: 0xc, Size: 0x4]
	float ScanningInterval;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InventoryMarkableInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	enum OperatorType;//[Offset: 0x4, Size: 0x1]
	enum MarkType;//[Offset: 0x5, Size: 0x1]
	int TargetId;//[Offset: 0x8, Size: 0x4]
	float ScanningInterval;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: VolumeMarkableInfo
	int VolumeID;//[Offset: 0x0, Size: 0x4]
	enum OperatorType;//[Offset: 0x4, Size: 0x1]
	enum MarkType;//[Offset: 0x5, Size: 0x1]
	int TargetId;//[Offset: 0x8, Size: 0x4]
	float ScanningInterval;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UAPlayerStateTraceComponent.ActorComponent.Object
	float MinScanInterval;//[Offset: 0xc0, Size: 0x4]
	TraceableActorInfo[] GlobalTraceableActorInfos;//[Offset: 0xc8, Size: 0x10]
	TraceableActorInfo[] PlayerTraceableActorInfos;//[Offset: 0xd8, Size: 0x10]
	TraceableActorInfo[] TraceableActorInfos;//[Offset: 0xe8, Size: 0x10]
	TraceableActorInfo TraceActorInfo;//[Offset: 0xf8, Size: 0x58]
	TraceableActorInfo TraceActivityInfo;//[Offset: 0x150, Size: 0x58]
	PlayerStateTraceableInventoryProxy*[] InventoryProxies;//[Offset: 0x1a8, Size: 0x10]
	void UpdateTraceableActorInfos();// 0x6502e3fee041
	void UpdateTickInterval();// 0x6501e3fee041
	void UpdatePlayerTraceableActorInfos();// 0x6500e3fee041
	void UpdateGloblaTraceableActorInfos(TraceableActorInfo[] InTraceableActorInfos, bool bManualUpdate);// 0x64ffe3fee041
	void SetTraceActorInfo(int InHandle);// 0x64fee3fee041
	void SetTraceActivityInfo(int InHandle);// 0x64fde3fee041
	void SetTickInterval(float InTime);// 0x64fce3fee041
	void ServerSetTraceActorInfo(int InHandle);// 0x64fbe3fee041
	void ServerSetTraceActivityInfo(int InHandle);// 0x64fae3fee041
	void RemoveTraceableActorInfo(int InHandle);// 0x64f9e3fee041
	void RemovePlayerTraceableActor(Actor* InActor);// 0x64f8e3fee041
	void OnRep_TraceableActorInfos();// 0x64f7e3fee041
	void OnPrePlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x64f6e3fee041
	void OnKilledEvent(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x64f5e3fee041
	void OnCharacterReadyToPlay(Character* Character);// 0x64f4e3fee041
	void OnActorSpawned(Actor* InActor);// 0x64f3e3fee041
	void OnActorDestroyed(Actor* Actor);// 0x64f2e3fee041
	bool IsTraceableActorOwnerValidAndAlive(int InHandle);// 0x64f1e3fee041
	bool IsTraceableActorDestroyed(int InHandle);// 0x64f0e3fee041
	void InitPlayerTraceableActorInfos(TraceableActorInfo[] InTraceableActorInfos);// 0x64efe3fee041
	enum GetTraceActorInfoMarkType();// 0x64eee3fee041
	bool GetTraceActorInfoIsActive();// 0x64ede3fee041
	TraceableActorInfo GetTraceActorInfo();// 0x64ece3fee041
	enum GetTraceActivityInfoMarkType();// 0x64ebe3fee041
	TraceableActorInfo GetTraceActivityInfo();// 0x64eae3fee041
	void GetTraceableMissionInfos(out TraceableActorInfo[] OutTraceableActorInfos, int InMissionFlowID, int InMissionID, enum InMarkType, enum InOperatorType);// 0x64e9e3fee041
	void GetTraceableActorInfos(out TraceableActorInfo[] OutTraceableActorInfos, enum InMarkType, enum InOperatorType);// 0x64e8e3fee041
	TraceableActorInfo GetTraceableActorInfoByTargetID(int InTargetID);// 0x64e7e3fee041
	TraceableActorInfo GetTraceableActorInfoByHandle(int InHandle);// 0x64e6e3fee041
	void GetRefTraceActorInfoWorldPostion(out Vector OutPosition);// 0x64e5e3fee041
	void GetRefTraceActivityInfoWorldPostion(out Vector OutPosition);// 0x64e4e3fee041
	void GetAllTraceableActorInfos(out TraceableActorInfo[] OutTraceableActorInfos, enum InOperatorType);// 0x64e3e3fee041
	void FillCompleteMissionMap(out <int,bool> CheckCompleteMap, int MissionFlowID, int MissionID);// 0x64e2e3fee041
	void FillCompleteMap(MFQuestBase* InQuestBase, out <int,bool> CheckCompleteMap, int GraphID);// 0x64e1e3fee041
	bool CanBeTrace(MFQuestBase* InQuestBase);// 0x64e0e3fee041
	void AddPlayerTraceableQuest(Actor* InActor, enum InOperatorType, enum InMarkType, float InScanningInterval, MFQuestBase* InOwnerQuest);// 0x64dfe3fee041
	void AddPlayerTraceableActor(Actor* InActor, enum InOperatorType, enum InMarkType, int InConfigID, float InScanningInterval, int InMissionFlowID, int InMissionID);// 0x64dee3fee041

--------------------------------
Class: TraceableActorInfo
	Actor* Actor;//[Offset: 0x0, Size: 0x8]
	Actor* ActorOuter;//[Offset: 0x8, Size: 0x8]
	bool bActorDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bOwnerAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bHasOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	Vector WorldLocation;//[Offset: 0x14, Size: 0xc]
	int Handle;//[Offset: 0x20, Size: 0x4]
	enum OperatorType;//[Offset: 0x24, Size: 0x1]
	enum MarkType;//[Offset: 0x25, Size: 0x1]
	int ConfigId;//[Offset: 0x28, Size: 0x4]
	float ScanningInterval;//[Offset: 0x2c, Size: 0x4]
	float LastUpdateServerTime;//[Offset: 0x30, Size: 0x4]
	QuestBase* OwnerQuest;//[Offset: 0x34, Size: 0x8]
	int TaskId;//[Offset: 0x3c, Size: 0x4]
	int TargetId;//[Offset: 0x40, Size: 0x4]
	bool bNeedTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	Vector Extend;//[Offset: 0x48, Size: 0xc]
	int EscapeId;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: PlayerStateTraceableInventoryProxy.Object
	UAPlayerStateTraceComponent* PlayerStateTraceComponent;//[Offset: 0x28, Size: 0x8]
	SGInventory* Inventory;//[Offset: 0x30, Size: 0x8]
	void OnInventoryRemoved(Character* OwnerCharacter);// 0x64dde3fee041
	void OnInventoryAdded(Character* OwnerCharacter);// 0x64dce3fee041

--------------------------------
Class: QuestEffect_ResetAchievement.MFQuestEffectBase.Object
	class MFQuestContextSourceBase* ModifyTarget;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: QuestEffect_SpawnActorAtPylon.MFQuestEffectBase.Object
	class Actor* SpawnActorClass;//[Offset: 0x38, Size: 0x8]
	bool bUsePylonIDMapTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	class MFQuestContextSourceBase* TargetContextSource;//[Offset: 0x48, Size: 0x8]
	DataTable* PylonIDTable;//[Offset: 0x50, Size: 0x8]
	int[] PylonIDs;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: QuestEffect_SpawnAI.MFQuestEffectBase.Object
	TriggerSpawnByAreaConfig TriggerSpawnByAreaConfig;//[Offset: 0x38, Size: 0x18]
	TriggerSpawnByVolumeConfig TriggerSpawnByVolumeConfig;//[Offset: 0x50, Size: 0x18]
	TriggerSpawnByEventConfig TriggerSpawnByEventConfig;//[Offset: 0x68, Size: 0x18]
	FString[] EventStrs;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: TriggerSpawnByAreaConfig
	int SpawnNum;//[Offset: 0x0, Size: 0x4]
	TriggerSpawnByAreaParams[] AreaParams;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TriggerSpawnByAreaParams
	int SquadID;//[Offset: 0x0, Size: 0x4]
	FString[] SpawnAreas;//[Offset: 0x8, Size: 0x10]
	int Weight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TriggerSpawnByVolumeConfig
	int SpawnNum;//[Offset: 0x0, Size: 0x4]
	TriggerSpawnByVolumeParams[] VolumeParams;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TriggerSpawnByVolumeParams
	int[] VolumeIDs;//[Offset: 0x0, Size: 0x10]
	int Weight;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TriggerSpawnByEventConfig
	int SpawnNum;//[Offset: 0x0, Size: 0x4]
	TriggerSpawnByEventParams[] EventParams;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TriggerSpawnByEventParams
	FString[] EventStrs;//[Offset: 0x0, Size: 0x10]
	int Weight;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: QuestEffect_SpawnInteractItem.MFQuestEffectBase.Object
	int SpawnInteractItemNum;//[Offset: 0x38, Size: 0x4]
	QuestEffectSpawnInteractItemInfo[] SpawnInteractItemInfos;//[Offset: 0x40, Size: 0x10]
	SGNetRelevantConfigurableActor*[] SpawnedInteractItem;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: QuestEffectSpawnInteractItemInfo
	int64 SpawnPointID;//[Offset: 0x0, Size: 0x8]
	class SGNetRelevantConfigurableActor* InteractItemClass;//[Offset: 0x8, Size: 0x8]
	int Weight;//[Offset: 0x10, Size: 0x4]
	bool bQuestActionRelevantToActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	class MFQuestContextSourceBase* TargetContextSource;//[Offset: 0x18, Size: 0x8]
	enum[] RelatedTargetTypes;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: QuestEffect_SpawnInventory.MFQuestEffectBase.Object
	Vector SpawnLocation;//[Offset: 0x38, Size: 0xc]
	Rotator SpawnRotation;//[Offset: 0x44, Size: 0xc]
	class SGInventory* ContainerClass;//[Offset: 0x50, Size: 0x8]
	int64[] ItemIDs;//[Offset: 0x58, Size: 0x10]
	int SpawnInventoryNum;//[Offset: 0x68, Size: 0x4]
	QuestEffectSpawnInventoryInfo[] SpawnInventoryInfos;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: QuestEffectSpawnInventoryInfo
	int64 SpawnPointID;//[Offset: 0x0, Size: 0x8]
	class SGInventory* ContainerClass;//[Offset: 0x8, Size: 0x8]
	int64[] ItemIDs;//[Offset: 0x10, Size: 0x10]
	int Weight;//[Offset: 0x20, Size: 0x4]
	enum OperatorType;//[Offset: 0x24, Size: 0x1]
	enum MarkType;//[Offset: 0x25, Size: 0x1]
	int TargetId;//[Offset: 0x28, Size: 0x4]
	float ScanningInterval;//[Offset: 0x2c, Size: 0x4]
	class MFQuestContextSourceBase* TargetContextSource;//[Offset: 0x30, Size: 0x8]
	enum[] RelatedTargetTypes;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: QuestEffect_SpawnPickup.MFQuestEffectBase.Object
	int SpawnPickupNum;//[Offset: 0x38, Size: 0x4]
	QuestEffectSpawnPickupInfo[] SpawnPickupInfos;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: QuestEffectSpawnPickupInfo
	int64 SpawnPointID;//[Offset: 0x0, Size: 0x8]
	class SGPickup* PickupClass;//[Offset: 0x8, Size: 0x8]
	int Weight;//[Offset: 0x10, Size: 0x4]
	enum OperatorType;//[Offset: 0x14, Size: 0x1]
	enum MarkType;//[Offset: 0x15, Size: 0x1]
	int TargetId;//[Offset: 0x18, Size: 0x4]
	float ScanningInterval;//[Offset: 0x1c, Size: 0x4]
	class MFQuestContextSourceBase* TargetContextSource;//[Offset: 0x20, Size: 0x8]
	enum[] RelatedTargetTypes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: QuestManagerActor.MFQuestManagerActor.Actor.Object
	DataTable* QuestTable;//[Offset: 0x2f0, Size: 0x8]
	DataTable* ActQuestTemplateTable;//[Offset: 0x2f8, Size: 0x8]
	int[] TraceTasks;//[Offset: 0x300, Size: 0x10]
	int MaxTraceNum;//[Offset: 0x310, Size: 0x4]
	class MFQuestBase* DummyQuestClass;//[Offset: 0x318, Size: 0x8]
	void SaveTraceQuest();// 0x605ce3fee041
	void ResetTraceTask(int TaskId);// 0x605be3fee041
	void RemoveTraceTask(int TaskId);// 0x605ae3fee041
	void RemoveCompleteTraceTask();// 0x6059e3fee041
	void RefreshQuestBeforeState(int InQuestID, PlayerController* InPC);// 0x6058e3fee041
	void PrintReplicateData();// 0x6057e3fee041
	void OnQuestGraphStatusChange(MFQuestNodeGraph* NodeGraph, enum NewStatus);// 0x6056e3fee041
	void LoadTraceQuest();// 0x6055e3fee041
	bool IsSeasonQuest(int InGraphID);// 0x6054e3fee041
	int[] GetTraceTasks();// 0x6053e3fee041
	int GetQuestIDFromQuest(MFQuestBase* InQuest);// 0x6052e3fee041
	int GetQuestGraphIDFromQuestGraph(MFQuestNodeGraph* InGraph);// 0x6051e3fee041
	MFQuestNodeGraph* GetQuestGraphByID(int InGraphID, PlayerController* InPlayerController);// 0x6050e3fee041
	QuestReplicateData GetQuestDataWithID(int InGraphID, PlayerController* InPC);// 0x604fe3fee041
	void GetPlayerSeasonQuestsPartByState(PlayerController* InPC, out QuestReplicateData[] InProgress, out QuestReplicateData[] Success, out QuestReplicateData[] Fail);// 0x604ee3fee041
	TraceableActorInfo[] GetPlayerQuestTraceInfos(PlayerController* InPC);// 0x604de3fee041
	TraceableActorInfo GetPlayerQuestTraceInfoByTargetID(PlayerController* InPC, int TargetId);// 0x604ce3fee041
	void GetPlayerQuestsPartByState(PlayerController* InPC, out QuestReplicateData[] InProgress, out QuestReplicateData[] Success, out QuestReplicateData[] Fail);// 0x604be3fee041
	QuestReplicateData[] GetPlayerQuests(PlayerController* InPC);// 0x604ae3fee041
	int GetMaxTraceNum();// 0x6049e3fee041
	MFQuestBase* GetGraphQuestFromQuestID(MFQuestNodeGraph* InGraph, int InQuestID);// 0x6048e3fee041
	int GetGraphIDFromQuest(MFQuestBase* InQuest);// 0x6047e3fee041
	QuestInventory[] GetAllQuestInventoryData(PlayerController* PC);// 0x6046e3fee041
	MFQuestNodeGraph* CreateNewQuestGraphWithID(int InGraphID, Controller* InController, bool bAct);// 0x6045e3fee041
	MFQuestBase* CreateNewQuestFromID(int InGraphID, int InQuestID, Controller* InController);// 0x6044e3fee041
	MFQuestBase* CreateNewQuestFromCreateData(out TaskCreateData InTaskCreateData, out QuestCreateData InQuestCreateData);// 0x6043e3fee041
	void ClearTraceTask();// 0x6042e3fee041
	void AutoTraceOneQuest();// 0x6041e3fee041
	void AddTraceTask(int TaskId);// 0x6040e3fee041

--------------------------------
Class: QuestReplicateData
	Controller* Controller;//[Offset: 0x0, Size: 0x8]
	int GraphID;//[Offset: 0x8, Size: 0x4]
	enum GraphState;//[Offset: 0xc, Size: 0x1]
	MFQuestBase*[] QuestActors;//[Offset: 0x10, Size: 0x10]
	bool IsSeasonTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool QuestBeforeState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	enum OldGraphState;//[Offset: 0x22, Size: 0x1]
	float GraphStateChangeTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: QuestInventory
	int TaskId;//[Offset: 0x0, Size: 0x4]
	int TargetId;//[Offset: 0x4, Size: 0x4]
	int64 ItemID;//[Offset: 0x8, Size: 0x8]
	int BigType;//[Offset: 0x10, Size: 0x4]
	int64 MidType;//[Offset: 0x18, Size: 0x8]
	int64 subtype;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TaskCreateData
	int TaskId;//[Offset: 0x0, Size: 0x4]
	QuestCreateData[] QuestArr;//[Offset: 0x8, Size: 0x10]
	bool CompleteInOneBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int PrevType;//[Offset: 0x24, Size: 0x4]
	bool IsAct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: QuestCreateData
	int TargetId;//[Offset: 0x0, Size: 0x4]
	int CurrProgress;//[Offset: 0x4, Size: 0x4]
	int MaxProgress;//[Offset: 0x8, Size: 0x4]
	int[] PreviewTargets;//[Offset: 0x10, Size: 0x10]
	int NodeType;//[Offset: 0x20, Size: 0x4]
	int PrevType;//[Offset: 0x24, Size: 0x4]
	int FailWhenNextFail;//[Offset: 0x28, Size: 0x4]
	bool IsAct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	int[] ActQuestTemplateParams;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: QuestManagerComponent.MFQuestManagerComponent.ActorComponent.Object
	float MaxSecondInOneFrame;//[Offset: 0xc8, Size: 0x4]
	MFQuestNodeGraph*[] WaitDestroyGraph;//[Offset: 0xe0, Size: 0x10]
	PlayerController*[] HasFinishPC;//[Offset: 0xf0, Size: 0x10]
	void OnGameModePlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x6060e3fee041
	void DoDestroyGraph();// 0x605fe3fee041
	void DoCreateTask();// 0x605ee3fee041
	void AddTaskData(TaskCreateData TaskCreateData, PlayerController* PC);// 0x605de3fee041

--------------------------------
Class: QuestObjCom_TakeOutItemType.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	int LimitItemMainMidTypePreix;//[Offset: 0x128, Size: 0x4]
	void OnPlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x6062e3fee041
	void OnPlayerDied(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x6061e3fee041

--------------------------------
Class: QuestObjectiveComp_AIMove_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	SGCharacter*[] AllCharacter;//[Offset: 0x128, Size: 0x10]
	SGAISpawnPoint*[] AllAISpawnPoint;//[Offset: 0x138, Size: 0x10]
	SGCharacter*[] ArriveCharacter;//[Offset: 0x148, Size: 0x10]
	void CharacterArrive(SGCharacter* Character);// 0x6065e3fee041
	void BP_DeactivateQuestComponent();// 0x6064e3fee041
	void BP_ActivateQuestComponent();// 0x6063e3fee041

--------------------------------
Class: QuestObjectiveComp_Assemble_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	class SGInventory* ItemClass;//[Offset: 0x128, Size: 0x8]
	class SGInventory* WeaponClass;//[Offset: 0x130, Size: 0x8]
	void OnWeaponAssemble(Character* Character, SGInventory* Weapon, SGInventory* ChildInventory);// 0x6066e3fee041

--------------------------------
Class: QuestObjectiveComp_AttractAI.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	bool bEnableTeamMemberHelp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	void OnInventoryAttractAI(Actor* Actor, Character* AICharacter);// 0x6067e3fee041

--------------------------------
Class: QuestObjectiveComp_Bag_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum BagState;//[Offset: 0x128, Size: 0x1]
	enum BagType;//[Offset: 0x129, Size: 0x1]
	SGAISpawnPoint* SpawnPoint;//[Offset: 0x130, Size: 0x8]
	class SGInventory* ContainerClass;//[Offset: 0x138, Size: 0x8]
	void OnBagOpenStateChange(bool bShow, enum InBagType, Actor* Container);// 0x6068e3fee041

--------------------------------
Class: QuestObjectiveComp_BagTabSign_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum BagType;//[Offset: 0x128, Size: 0x1]
	enum BagTabType;//[Offset: 0x129, Size: 0x1]
	void OnBagTabClick(enum TutorialBagType, int TabType);// 0x6069e3fee041

--------------------------------
Class: QuestObjectiveComp_BgnUseItem_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	class SGInventory* ItemClass;//[Offset: 0x128, Size: 0x8]
	enum CharacterEnduranceType;//[Offset: 0x130, Size: 0x1]
	void BeginUseItem(Actor* Character, SGInventory* Inventory, enum UseInBodyType);// 0x606ae3fee041

--------------------------------
Class: QuestObjectiveComp_BigMap_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum BigMapState;//[Offset: 0x128, Size: 0x1]
	void OnBigMapOpenStateChange(bool bShow);// 0x606be3fee041

--------------------------------
Class: QuestObjectiveComp_ChangeState_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum characterState;//[Offset: 0x128, Size: 0x1]
	bool IsInState();// 0x606ce3fee041

--------------------------------
Class: QuestObjectiveComp_CharacterMove.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	int MinUpdateDistance;//[Offset: 0x128, Size: 0x4]
	int CacheDistance;//[Offset: 0x12c, Size: 0x4]
	void OnCharacterMoveEvent(int64 Distance);// 0x606de3fee041

--------------------------------
Class: QuestObjectiveComp_CheckPoint_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object

--------------------------------
Class: QuestObjectiveComp_CheckWeapon_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	void OnCheckWeaponBtnClick();// 0x606ee3fee041

--------------------------------
Class: QuestObjectiveComp_ClearArea.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum[] SpecifiedTypes;//[Offset: 0x128, Size: 0x10]
	int64 VolumeID;//[Offset: 0x138, Size: 0x8]
	UAVolumeStatisComponent* VolumeStatisComponent;//[Offset: 0x140, Size: 0x8]
	uint32 TargetNum;//[Offset: 0x148, Size: 0x4]
	TimerHandle TickTimerHandle;//[Offset: 0x150, Size: 0x8]
	void OnVolumeActorChanged(int64 InVolumeID);// 0x6072e3fee041
	void OnTimerTick();// 0x6071e3fee041
	void OnKilledEvent(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x6070e3fee041
	uint32 GetTargetNum();// 0x606fe3fee041

--------------------------------
Class: UAVolumeStatisComponent.ActorComponent.Object
	Actor*[] EnteredActors;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: QuestObjectiveComp_ClickFakeMap.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	float DelayTime;//[Offset: 0x128, Size: 0x4]
	void OnFakeMapUIClick();// 0x6073e3fee041

--------------------------------
Class: QuestObjectiveComp_ClickItem_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	class SGInventory* ItemClass;//[Offset: 0x128, Size: 0x8]
	void OnClickItem(SGInventory* Inventory);// 0x6074e3fee041

--------------------------------
Class: QuestObjectiveComp_CollectItem.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	SGInventory*[] CollectedItems;//[Offset: 0x128, Size: 0x10]
	bool bEnableTeamMemberHelp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	bool bAddProgressWhenActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]
	bool bChangeCountsToValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 0x1]
	void UnRegistedEvent();// 0x6081e3fee041
	void RegistedEvent(SGCharacter* SGCharacter);// 0x6080e3fee041
	void RefreshProgressWhenReadyToPlay(SGCharacter* SGCharacter);// 0x607fe3fee041
	void RefreshProgress();// 0x607ee3fee041
	void OnTeamMemberAddInventory(SGTeamInfo* TeamInfo, Character* Character, SGInventory* Inventory);// 0x607de3fee041
	void OnProcessPawn(Pawn* Pawn);// 0x607ce3fee041
	void OnPlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x607be3fee041
	void OnPlayerDied(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x607ae3fee041
	void OnInventoryRemoved(Character* Character, SGInventory* Inventory);// 0x6079e3fee041
	void OnInventoryAdded(Character* Character, SGInventory* Inventory);// 0x6078e3fee041
	void OnCharacterReadyToPlay(SGCharacter* Character);// 0x6077e3fee041
	bool IsCollectingQuestInventory();// 0x6076e3fee041
	void CheckLoseQuestInventory(SGCharacter* Character);// 0x6075e3fee041

--------------------------------
Class: QuestObjectiveComp_CompleteRequest.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	bool bIncreaseQuestPrgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	void OnRequestGiveUp(NPCAIGroupBaseRequest* GiveUpRequest);// 0x6084e3fee041
	void OnRequestCompleted(NPCAIGroupBaseRequest* CompletedRequest);// 0x6083e3fee041
	void OnInstigatorDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x6082e3fee041

--------------------------------
Class: QuestObjectiveComp_DestroyActor.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	void OnProcessPawn(Pawn* Pawn);// 0x6086e3fee041
	void OnInstigatorDestroyActor(Character* Character, Actor* Actor);// 0x6085e3fee041

--------------------------------
Class: QuestObjectiveComp_Door_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	SGDoorBase* Door;//[Offset: 0x128, Size: 0x8]
	enum DoorState;//[Offset: 0x130, Size: 0x1]
	void OnDoorStateChange(SGDoorBase* InDoor, enum InDoorState);// 0x6087e3fee041

--------------------------------
Class: QuestObjectiveComp_EscapeMap.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	void OnPlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x6088e3fee041

--------------------------------
Class: QuestObjectiveComp_Escort.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	void OnPlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x6089e3fee041

--------------------------------
Class: QuestObjectiveComp_FacePanel_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum FacePanelState;//[Offset: 0x128, Size: 0x1]
	void OnFacePanelOpenStateChange(bool bShow);// 0x608ae3fee041

--------------------------------
Class: QuestObjectiveComp_Fire_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	void OnBeginFire();// 0x608be3fee041

--------------------------------
Class: QuestObjectiveComp_HealthUI_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum BodyType;//[Offset: 0x128, Size: 0x1]
	void OnHealthUIClick(enum InEnduranceType);// 0x608ce3fee041

--------------------------------
Class: QuestObjectiveComp_HitTarget.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	bool bEnableTeamMemberHelp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	void OnTeamMemberCauseDamage(SGTeamInfo* TeamInfo, out const TakeDamageInfo TakeDamageInfo);// 0x6091e3fee041
	void OnTakeDamage(SGCharacter* Taker, SGCharacter* Causer, float AttemptedDamage, float ActuralDamage, Vector Momentum, Actor* HitArmor, out const SGPointDamageEvent DamageEvent, Actor* DamageCauser, DamageEventObject* DamageEventObject);// 0x6090e3fee041
	void OnProcessPawn(Pawn* Pawn);// 0x608fe3fee041
	void OnInstigatorCauseDamage(out const TakeDamageInfo TakeDamageInfo);// 0x608ee3fee041
	void OnCauseDamageEvent(out const TakeDamageInfo TakeDamageInfo);// 0x608de3fee041

--------------------------------
Class: TakeDamageInfo
	Controller* CauserController;//[Offset: 0x0, Size: 0x8]
	Controller* VictimController;//[Offset: 0x8, Size: 0x8]
	Pawn* CauserPawn;//[Offset: 0x10, Size: 0x8]
	Pawn* VictimPawn;//[Offset: 0x18, Size: 0x8]
	Actor* CauserWeapon;//[Offset: 0x20, Size: 0x8]
	float AttemptedDamage;//[Offset: 0x28, Size: 0x4]
	float ActuralDamage;//[Offset: 0x2c, Size: 0x4]
	DamageEventObject* DamageEventObject;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: QuestObjectiveComp_Interaction.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	Actor*[] InteractTargets;//[Offset: 0x128, Size: 0x10]
	bool bHasTryInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	enum InteractEnableType;//[Offset: 0x139, Size: 0x1]
	void OnNotifyInteractEvent(SGCharacter* Character, Actor* Target, enum EventType, SGInteractComponentBase* SGInteractComponentBase);// 0x6092e3fee041

--------------------------------
Class: QuestObjectiveComp_KillAI_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	SGAISpawnPoint*[] AISpawnPointArr;//[Offset: 0x128, Size: 0x10]
	void OnDied(Controller* Killer, DamageEventObject* DamageEventObject, out bool bWantToDie);// 0x6093e3fee041

--------------------------------
Class: QuestObjectiveComp_KillTarget.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	bool bEnableTeamMemberHelp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	void OnTeamMemberKillOther(SGTeamInfo* TeamInfo, out const KillInfo TeamKillInfo);// 0x6097e3fee041
	void OnProcessPawn(Pawn* Pawn);// 0x6096e3fee041
	void OnKilledEvent(out const KillInfo KillInfo);// 0x6095e3fee041
	void OnInstigatorKillOther(out const KillInfo KillInfo, out const KillOtherStatis KillOtherStatics);// 0x6094e3fee041

--------------------------------
Class: QuestObjectiveComp_LootContainer.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	void OnLootContainerEvent(int64 ContainerType, Character* Looter, SGInventory* LootContainer);// 0x6098e3fee041

--------------------------------
Class: QuestObjectiveComp_MoveItem_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum NewPositionType;//[Offset: 0x128, Size: 0x1]
	class SGInventory* ItemClass;//[Offset: 0x130, Size: 0x8]
	void OnMoveItem(Character* Character, SGInventory* Inventory, enum AttachPosition);// 0x609ae3fee041
	void OnAddInventory(Character* Character, SGInventory* Inventory);// 0x6099e3fee041

--------------------------------
Class: QuestObjectiveComp_MoveTo_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	SGVolume* Volume;//[Offset: 0x128, Size: 0x8]
	void OnCharacterBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x609be3fee041

--------------------------------
Class: QuestObjectiveComp_PickUpItem_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	class SGInventory* ItemClass;//[Offset: 0x128, Size: 0x8]
	void OnInventoryAdded(Character* Character, SGInventory* Inventory);// 0x609ce3fee041

--------------------------------
Class: QuestObjectiveComp_PushBullet_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	void OnPushBullet(Character* Character, SGInventory* Bullet, SGInventory* Mag, int BulletCount);// 0x609de3fee041

--------------------------------
Class: QuestObjectiveComp_Search_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	class SGInventory* ItemClass;//[Offset: 0x128, Size: 0x8]
	void OnLootContainerEvent(int64 ContainerType, Character* Looter, SGInventory* LootContainer);// 0x609ee3fee041

--------------------------------
Class: QuestObjectiveComp_Setting_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	enum SettingPannalState;//[Offset: 0x128, Size: 0x1]
	void OnSettingPannalChange(int State);// 0x609fe3fee041

--------------------------------
Class: QuestObjectiveComp_Sound_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	float DelayTime;//[Offset: 0x128, Size: 0x4]
	void OnSoundUIClick();// 0x60a0e3fee041

--------------------------------
Class: QuestObjectiveComp_Survival.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	bool bResetOnCheckFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	TimerHandle TickTimerHandle;//[Offset: 0x130, Size: 0x8]
	void StopTimer();// 0x60a3e3fee041
	void StartTimer();// 0x60a2e3fee041
	void OnTimerTick();// 0x60a1e3fee041

--------------------------------
Class: QuestObjectiveComp_SwitchWeapon_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	class SGInventory* WeaponClass;//[Offset: 0x128, Size: 0x8]
	void OnSwitchWeapon(SGWeapon* Weapon, FString WeaponName);// 0x60a4e3fee041

--------------------------------
Class: QuestObjectiveComp_TakeInItemValue.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	bool bChangeValueToCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	void RefreshProgress();// 0x60a6e3fee041
	void OnFlowStateChange(PlayerController* PlayerController, FName NewState, FName OldState);// 0x60a5e3fee041

--------------------------------
Class: QuestObjectiveComp_TakeOutItemValue.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	bool bEscapeFailedIngnoreSafeBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	bool bChangeValueToCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1]
	void RefreshProgress();// 0x60aee3fee041
	void OnPushBullet(Character* Character, SGInventory* Bullet, SGInventory* Mag, int BulletCount);// 0x60ade3fee041
	void OnPrePlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x60ace3fee041
	void OnPlayerDied(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x60abe3fee041
	void OnModifyInventoryTotalCount(Character* Character, SGInventory* Inventory, int OldCount, int NewCount);// 0x60aae3fee041
	void OnInventoryRemoved(Character* Character, SGInventory* Inventory);// 0x60a9e3fee041
	void OnInventoryAdded(Character* Character, SGInventory* Inventory);// 0x60a8e3fee041
	void OnCharacterCostBullet(Character* Character, SGInventory* Inventory, out const uint64[] BulletItemIDs);// 0x60a7e3fee041

--------------------------------
Class: QuestObjectiveComp_Target_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	SGRangeTargetBase*[] Targets;//[Offset: 0x128, Size: 0x10]
	enum DamageType;//[Offset: 0x138, Size: 0x1]
	bool bAccumulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	void OnDamageTarget(SGRangeTargetBase* Target, int Score, int InDamageType);// 0x60afe3fee041

--------------------------------
Class: QuestObjectiveComp_UseInventory.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	TimerHandle TickTimerHandle;//[Offset: 0x130, Size: 0x8]
	void StopTimer();// 0x60b5e3fee041
	void StartTimer();// 0x60b4e3fee041
	void OnTimerTick();// 0x60b3e3fee041
	void OnStartUsingRecoveryItem(Character* Character, SGInventory* Inventory, uint32 RumtimeID);// 0x60b2e3fee041
	void OnEndUsingRecoveryItem(Character* Character, SGInventory* Inventory, uint32 RumtimeID, bool bWasCancelled, byte bUsedUp);// 0x60b1e3fee041
	void ListenCharacterAbilityEvent();// 0x60b0e3fee041

--------------------------------
Class: QuestObjectiveComp_UseItem_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	class SGInventory* ItemClass;//[Offset: 0x128, Size: 0x8]
	void OnUseItem(Character* Character, SGInventory* Inventory);// 0x60b6e3fee041

--------------------------------
Class: QuestObjectiveComp_UseThrowable.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	bool bEnableTeamMemberHelp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	void OnThrowableProjectileSpawn(SGThrowableProjectile* InProjectile, Vector SpawnLocation, float PlayEffectTime);// 0x60b7e3fee041

--------------------------------
Class: QuestObjectiveComp_ViewTrace_T.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	Actor* ViewTargetActor;//[Offset: 0x128, Size: 0x8]
	int TraceLength;//[Offset: 0x130, Size: 0x4]
	float Duration;//[Offset: 0x134, Size: 0x4]
	byte CheckChannal;//[Offset: 0x138, Size: 0x1]

--------------------------------
Class: QuestObjectiveComp_WalkDistance.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object
	void UnRegistedEvent(SGCharacter* Character);// 0x60bfe3fee041
	void RegistedEvent(SGCharacter* Character);// 0x60bee3fee041
	void RefreshProgressWhenReadyToPlay(SGCharacter* SGCharacter);// 0x60bde3fee041
	void OnWalkDistanceChanged(Character* Character, bool bIsMoving, float MovDist);// 0x60bce3fee041
	void OnProcessPawn(Pawn* Pawn);// 0x60bbe3fee041
	void OnPlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x60bae3fee041
	void OnPlayerDied(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x60b9e3fee041
	void OnCharacterReadyToPlay(SGCharacter* Character);// 0x60b8e3fee041

--------------------------------
Class: QuestPrimaryCondition_AchievementChanged.MFQuestPrimaryConditionBase.Object
	void OnBlackboardIntMapChanged(Actor* ObjectiveInstigator, Actor* TargetActor, out const GameplayTag Key, int CurrentValue, int PreviousValue);// 0x60c0e3fee041

--------------------------------
Class: QuestPrimaryCondition_AddInventory.MFQuestPrimaryConditionBase.Object
	void OnCharacterAddInventory(Character* Character, SGInventory* Inventory);// 0x60c1e3fee041

--------------------------------
Class: QuestPrimaryCondition_AIActived.MFQuestPrimaryConditionBase.Object
	void OnAIActived(Character* AICharacter);// 0x60c2e3fee041

--------------------------------
Class: QuestPrimaryCondition_CharacterDestroyActor.MFQuestPrimaryConditionBase.Object
	void OnCharacterDestroyActor(Character* Character, Actor* Actor);// 0x60c3e3fee041

--------------------------------
Class: QuestPrimaryCondition_CharacterEnduranceChanged.MFQuestPrimaryConditionBase.Object
	enum RecoveryAttributeChangeType;//[Offset: 0x78, Size: 0x1]
	void OnCharacterEnduranceChanged(enum EnduranceType, float EnduranceDelta, float CurrentVal, float MaxVal, SGCharacter* Character);// 0x60c4e3fee041

--------------------------------
Class: QuestPrimaryCondition_CharacterFoodChanged.MFQuestPrimaryConditionBase.Object
	enum RecoveryAttributeChangeType;//[Offset: 0x78, Size: 0x1]
	void OnCharacterFoodChanged(out const GameplayEffectSpec EffectSpec, float FoodDelta, float FoodDelta_Unclamp, float CurrentVal, float MaxVal, SGCharacter* Character);// 0x60c5e3fee041

--------------------------------
Class: QuestPrimaryCondition_CharacterMoistureChanged.MFQuestPrimaryConditionBase.Object
	enum RecoveryAttributeChangeType;//[Offset: 0x78, Size: 0x1]
	void OnCharacterMoistureChanged(out const GameplayEffectSpec EffectSpec, float MoistureDelta, float MoistureDelta_Unclamp, float CurrentVal, float MaxVal, SGCharacter* Character);// 0x60c6e3fee041

--------------------------------
Class: QuestPrimaryCondition_CharacterReadyToPlay.MFQuestPrimaryConditionBase.Object
	void OnCharacterReadyToPlay(Character* Character);// 0x60c7e3fee041

--------------------------------
Class: QuestPrimaryCondition_ChaseActivityStateChange.MFQuestPrimaryConditionBase.Object
	enum ChaseActivityState;//[Offset: 0x78, Size: 0x1]
	void OnChaseActivityStateChange(out const ChaseActivityStateChangeInfo ChaseActivityStateChangeInfo);// 0x60c8e3fee041

--------------------------------
Class: QuestPrimaryCondition_CollectItem.MFQuestPrimaryConditionBase.Object
	void OnPlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x60cde3fee041
	void OnPlayerDied(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x60cce3fee041
	void OnInventoryRemoved(Character* Character, SGInventory* Inventory);// 0x60cbe3fee041
	void OnInventoryAdded(Character* Character, SGInventory* Inventory);// 0x60cae3fee041
	void CheckLoseQuestInventory(SGCharacter* Character);// 0x60c9e3fee041

--------------------------------
Class: QuestPrimaryCondition_Countdown.MFQuestPrimaryConditionBase.Object
	TimerHandle TickTimerHandle;//[Offset: 0x78, Size: 0x8]
	float DelayTime;//[Offset: 0x80, Size: 0x4]
	void StopTimer();// 0x60d1e3fee041
	void StartTimer();// 0x60d0e3fee041
	void OnTimerTick();// 0x60cfe3fee041
	void OnGameBegin();// 0x60cee3fee041

--------------------------------
Class: QuestPrimaryCondition_EscapeMap.MFQuestPrimaryConditionBase.Object
	void OnPrePlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x60d2e3fee041

--------------------------------
Class: QuestPrimaryCondition_GameplayEffectApplied.MFQuestPrimaryConditionBase.Object
	void OnGameplayEffectAppliedEvent(AbilitySystemComponent* AbilitySystemComp, out const GameplayEffectSpec GameplayEffectSpec, ActiveGameplayEffectHandle ActiveGameplayEffectHandle, Character* Character);// 0x60d3e3fee041

--------------------------------
Class: QuestPrimaryCondition_HitEvent.MFQuestPrimaryConditionBase.Object
	void OnTakeDamage(SGCharacter* Taker, SGCharacter* Causer, float AttemptedDamage, float ActuralDamage, Vector Momentum, Actor* HitArmor, out const SGPointDamageEvent DamageEvent, Actor* DamageCauser, DamageEventObject* DamageEventObject);// 0x60d4e3fee041

--------------------------------
Class: QuestPrimaryCondition_Interact.MFQuestPrimaryConditionBase.Object
	enum InteractEventType;//[Offset: 0x78, Size: 0x1]
	bool bCheckVolumeID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	int[] ValidVolumeIDs;//[Offset: 0x80, Size: 0x10]
	bool bCheckVolumeName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	FString[] ValidVolumeNames;//[Offset: 0x98, Size: 0x10]
	void OnNotifyInteractEvent(SGCharacter* Character, Actor* Target, enum EventType, SGInteractComponentBase* SGInteractComponentBase);// 0x60d5e3fee041

--------------------------------
Class: QuestPrimaryCondition_InventoryAttachPositionChanged.MFQuestPrimaryConditionBase.Object
	void OnSwitchWeaponCompleted(Character* Character, SGWeapon* Weapon);// 0x60d7e3fee041
	void OnAttachPositionChanged(SGInventory* Inventory, Actor* ParentActor, enum NewAttachPosition, enum OldAttachPosition);// 0x60d6e3fee041

--------------------------------
Class: QuestPrimaryCondition_KillEvent.MFQuestPrimaryConditionBase.Object
	bool bEnableTeamMemberHelp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	void OnKilledEvent(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x60d8e3fee041

--------------------------------
Class: QuestPrimaryCondition_LootContainer.MFQuestPrimaryConditionBase.Object
	void UnRegistedEvent(SGCharacter* Character);// 0x60dfe3fee041
	void RegistedEvent(SGCharacter* Character);// 0x60dee3fee041
	void RefreshProgressWhenReadyToPlay(SGCharacter* SGCharacter);// 0x60dde3fee041
	void OnProcessPawn(Pawn* Pawn);// 0x60dce3fee041
	void OnLootContainerEvent(int64 ContainerType, Character* Looter, SGInventory* LootContainer);// 0x60dbe3fee041
	void OnFlowStateChange(PlayerController* PlayerController, FName NewState, FName OldState);// 0x60dae3fee041
	void OnCharacterReadyToPlay(SGCharacter* Character);// 0x60d9e3fee041

--------------------------------
Class: QuestPrimaryCondition_LootPointSpawnCompleted.MFQuestPrimaryConditionBase.Object
	int[] ValidLootPointTypes;//[Offset: 0x78, Size: 0x10]
	void OnLootPointSpawnCompleted(SGActorInventoryFactoryComponent* LootPoint);// 0x60e0e3fee041

--------------------------------
Class: QuestPrimaryCondition_RandTimeRange.MFQuestPrimaryConditionBase.Object
	TimerHandle TickTimerHandle;//[Offset: 0x78, Size: 0x8]
	TimeOfDay StartTime;//[Offset: 0x80, Size: 0xc]
	TimeOfDay EndTime;//[Offset: 0x8c, Size: 0xc]
	void StopTimer();// 0x60e4e3fee041
	void StartTimer();// 0x60e3e3fee041
	void OnTimerTick();// 0x60e2e3fee041
	void OnGameBegin();// 0x60e1e3fee041

--------------------------------
Class: QuestPrimaryCondition_Recovery.MFQuestPrimaryConditionBase.Object
	void UnRegistedEvent(SGCharacter* Character);// 0x60ebe3fee041
	void RegistedEvent(SGCharacter* Character);// 0x60eae3fee041
	void RefreshProgressWhenReadyToPlay(SGCharacter* SGCharacter);// 0x60e9e3fee041
	void OnReceiveRecoveryEffectEvent(Character* Character, float RecoveryValue, enum InCharacterEnduranceType, enum InRecoveryAttributeType);// 0x60e8e3fee041
	void OnProcessPawn(Pawn* Pawn);// 0x60e7e3fee041
	void OnFlowStateChange(PlayerController* PlayerController, FName NewState, FName OldState);// 0x60e6e3fee041
	void OnCharacterReadyToPlay(SGCharacter* Character);// 0x60e5e3fee041

--------------------------------
Class: QuestPrimaryCondition_RemoveInventory.MFQuestPrimaryConditionBase.Object
	void OnCharacterRemoveInventory(Character* Character, SGInventory* Inventory);// 0x60ece3fee041

--------------------------------
Class: QuestPrimaryCondition_Survival.MFQuestPrimaryConditionBase.Object
	TimerHandle TickTimerHandle;//[Offset: 0x78, Size: 0x8]
	void StopTimer();// 0x60efe3fee041
	void StartTimer();// 0x60eee3fee041
	void OnTimerTick();// 0x60ede3fee041

--------------------------------
Class: QuestPrimaryCondition_TakeInItemValue.MFQuestPrimaryConditionBase.Object
	bool bChangeValueToCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	void OnFlowStateChange(PlayerController* PlayerController, FName NewState, FName OldState);// 0x60f0e3fee041

--------------------------------
Class: QuestPrimaryCondition_TakeOutItemValue.MFQuestPrimaryConditionBase.Object
	bool bEscapeFailedIngnoreSafeBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bChangeValueToCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	void OnTakeOutSafeBox(Controller* Controller, SGCharacter* Character);// 0x60f4e3fee041
	void OnTakeOutInventories(Controller* Controller, SGCharacter* Character);// 0x60f3e3fee041
	void OnPrePlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x60f2e3fee041
	void OnPlayerDied(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x60f1e3fee041

--------------------------------
Class: QuestPrimaryCondition_UseInventory.MFQuestPrimaryConditionBase.Object
	void UnRegistedEvent(SGCharacter* Character);// 0x60fce3fee041
	void RegistedEvent(SGCharacter* Character);// 0x60fbe3fee041
	void RefreshProgressWhenReadyToPlay(SGCharacter* SGCharacter);// 0x60fae3fee041
	void OnStartUsingRecoveryItem(Character* Character, SGInventory* Inventory, uint32 RumtimeID);// 0x60f9e3fee041
	void OnProcessPawn(Pawn* Pawn);// 0x60f8e3fee041
	void OnFlowStateChange(PlayerController* PlayerController, FName NewState, FName OldState);// 0x60f7e3fee041
	void OnEndUsingRecoveryItem(Character* Character, SGInventory* Inventory, uint32 RumtimeID, bool bWasCancelled, byte bUsedUp);// 0x60f6e3fee041
	void OnCharacterReadyToPlay(SGCharacter* Character);// 0x60f5e3fee041

--------------------------------
Class: QuestPrimaryCondition_UseRecoveryInventory.MFQuestPrimaryConditionBase.Object
	enum UseInventoryPhase;//[Offset: 0x78, Size: 0x1]
	void OnUseRecoveryInventory(Character* Character, SGInventory* Inventory, enum InUseInventoryPhase);// 0x60fde3fee041

--------------------------------
Class: QuestPrimaryCondition_UseThrowable.MFQuestPrimaryConditionBase.Object
	void OnThrowableProjectileSpawn(SGThrowableProjectile* InProjectile, Vector SpawnLocation, float PlayEffectTime);// 0x60fee3fee041

--------------------------------
Class: QuestPrimaryCondition_WalkDistance.MFQuestPrimaryConditionBase.Object
	enum[] MoveDistanceTypes;//[Offset: 0x78, Size: 0x10]
	void UnRegistedEvent(SGCharacter* Character);// 0x6105e3fee041
	void RegistedEvent(SGCharacter* Character);// 0x6104e3fee041
	void RefreshProgressWhenReadyToPlay(SGCharacter* SGCharacter);// 0x6103e3fee041
	void OnWalkDistanceChanged(Character* Character, bool bIsMoving, float MovDist);// 0x6102e3fee041
	void OnProcessPawn(Pawn* Pawn);// 0x6101e3fee041
	void OnFlowStateChange(PlayerController* PlayerController, FName NewState, FName OldState);// 0x6100e3fee041
	void OnCharacterReadyToPlay(SGCharacter* Character);// 0x60ffe3fee041

--------------------------------
Class: QuestProgress_Count_G.MFQuestProgressComponentBase.MFQuestComponentBase.ActorComponent.Object
	int ProgressUnit;//[Offset: 0xd4, Size: 0x4]
	int CachedProgress;//[Offset: 0xd8, Size: 0x4]

--------------------------------
Class: RemoteConsoleSubsystem.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: SaveQuest.SaveGame.Object
	<int,int> MapTraceTasks;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: SPTSGCharacterAIStaticsComponent.SGCharacterAIStaticsComponent.ActorComponent.Object

--------------------------------
Class: StairsBlockingVolume.Volume.Brush.Actor.Object
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x31c, Size: 0x10]

--------------------------------
Class: TApmAgent.BlueprintFunctionLibrary.Object
	void InitTAPM(FString gcloudId);// 0x6111e3fee041
	int GetDeviceClassLevel();// 0x6110e3fee041
	FString GetAndroidGPUFamily();// 0x610fe3fee041

--------------------------------
Class: TemplateQuestObjCom__CollectItem.QuestObjectiveComp_CollectItem.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object

--------------------------------
Class: TemplateQuestObjCom_CollectValue.QuestObjectiveComp_CollectItem.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object

--------------------------------
Class: TemplateQuestObjCom_KillTarget.QuestObjectiveComp_KillTarget.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object

--------------------------------
Class: TemplateQuestObjCom_TakeOutItem.QuestObjectiveComp_TakeOutItemValue.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object

--------------------------------
Class: TemplateQuestObjCom_TakeOutType.QuestObjCom_TakeOutItemType.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object

--------------------------------
Class: TemplateQuestObjCom_TakeOutValue.QuestObjectiveComp_TakeOutItemValue.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object

--------------------------------
Class: TemplateQuestObjCom_WalkDistance.QuestObjectiveComp_WalkDistance.MFQuestObjectiveComponentBase.MFQuestComponentBase.ActorComponent.Object

--------------------------------
Class: TreeItemData.Object
	FString Index;//[Offset: 0x28, Size: 0x10]
	TreeItemData*[] Child;//[Offset: 0x38, Size: 0x10]
	TreeItemData* Parent;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: UAActivityDataCenterComponent.ActorComponent.Object
	enum ActivityDataCenterType;//[Offset: 0xb8, Size: 0x1]

--------------------------------
Class: UAActivityMissionSubsystem.MFMissionSubsystem.WorldSubsystem.Subsystem.Object
	MFMissionFlow*[] ActivityMissionFlowList;//[Offset: 0x130, Size: 0x10]
	FString[] MissionFlowPathList;//[Offset: 0x140, Size: 0x10]
	MFMissionFlow*[] MissionFlowAssetList;//[Offset: 0x150, Size: 0x10]
	MFMissionFlow* SpawnMissionFlow(FString MissionFlowName);// 0x6118e3fee041
	void OnWorldBeginPlay();// 0x6117e3fee041
	void OnFlowStateChange(PlayerController* PlayerController, FName NewState, FName OldState);// 0x6116e3fee041
	void OnBeginGameInit();// 0x6115e3fee041
	void GetDebugMissionInfos(SGMissionFlowComponent* InMissionFlowComponent, FString MissionFlowName, out FString[] OutInfos);// 0x6114e3fee041
	UAActivityMissionSubsystem* Get(Object* WorldContextObject);// 0x6113e3fee041
	bool DistributeMissionFlow(SGCharacter* Character, FString MissionFlowName);// 0x6112e3fee041

--------------------------------
Class: UAActorInventoryFactoryComponent.SGActorInventoryFactoryComponent.SceneComponent.ActorComponent.Object
	int LootPointID;//[Offset: 0x278, Size: 0x4]
	int LootDataInfoID;//[Offset: 0x27c, Size: 0x4]
	int LootID;//[Offset: 0x280, Size: 0x4]
	int TimeBucket;//[Offset: 0x284, Size: 0x4]
	int LootPointType;//[Offset: 0x288, Size: 0x4]
	FText LootPointTypeName;//[Offset: 0x290, Size: 0x18]
	int CustomIndex;//[Offset: 0x2a8, Size: 0x4]
	int64 LootDropID;//[Offset: 0x2b0, Size: 0x8]
	int MapID;//[Offset: 0x2b8, Size: 0x4]
	SGInventorySpawnInfo[] RealitySpawnInfoList;//[Offset: 0x2c0, Size: 0x10]
	int StayLootVolumeID;//[Offset: 0x2d4, Size: 0x4]
	FString StayLootVolumeName;//[Offset: 0x2d8, Size: 0x10]
	bool bLimitInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 0x1]
	void UpdateAllStayLootVolumeInfo();// 0x6124e3fee041
	void UpdateAllLootPointID();// 0x6123e3fee041
	void ResetAllLootPointID();// 0x6122e3fee041
	void OnStartInteractBoxInventoryHandle(Character* Character);// 0x6121e3fee041
	bool IsNeedLootGuaranteed(out int GuaranteeID);// 0x6120e3fee041
	bool IsMatchLootGuaranteed(int GuaranteeID, int CurGuranteedProgress, int GuranteedTotalNum);// 0x611fe3fee041
	bool HasCheckItemID(out const SGInventorySpawnInfo SpawnInfo, out const int[] CheckItemIDArray);// 0x611ee3fee041
	float GetGuaranteeGenItemShieldRandom(int GuaranteedItemId);// 0x611de3fee041
	void ExportLootPointInfo();// 0x611ce3fee041
	void ExecuteLootGuaranteed(SGPlayerState* PS, int GuaranteeID);// 0x611be3fee041
	void DisableAllAutoCheckPlacement();// 0x611ae3fee041
	void CheckAllLootPointID();// 0x6119e3fee041

--------------------------------
Class: SGInventorySpawnInfo
	class SGInventory* InventoryClass;//[Offset: 0x0, Size: 0x28]
	bool bIsFullWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	uint64 LootDropID;//[Offset: 0x30, Size: 0x8]
	uint64 LootDropTableItemID;//[Offset: 0x38, Size: 0x8]
	uint64 ReallyLootDropTableItemID;//[Offset: 0x40, Size: 0x8]
	uint32 Count;//[Offset: 0x48, Size: 0x4]
	uint32 ParentItemID;//[Offset: 0x4c, Size: 0x4]
	int SlotIndex;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: UAAdviseInvInfo.Object
	void Init(enum DataTable);// 0x6126e3fee041
	SGInventory* GetAdviseInv(out <SGInventory*,int> InvMap, SGCharacter* Character, int Priority);// 0x6125e3fee041

--------------------------------
Class: UAAIEventSwither.SGShowSwithBaseComponent.Object
	enum EventID;//[Offset: 0x39, Size: 0x1]
	class AISceneEventMessage* SceneEventClass;//[Offset: 0x40, Size: 0x8]
	Vector Location;//[Offset: 0x48, Size: 0xc]
	float ValidTime;//[Offset: 0x54, Size: 0x4]
	float ValidScope;//[Offset: 0x58, Size: 0x4]
	float CoverRange;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: UAAISpawnController.SGAISpawnController.Actor.Object
	class UAAISpawnScavStuff* ScavGroupClass;//[Offset: 0x4a0, Size: 0x8]
	class UAAISpawnBossStuff* BossGroupClass;//[Offset: 0x4a8, Size: 0x8]
	class UAAISpawnPMCStuff* PMCGroupClass;//[Offset: 0x4b0, Size: 0x8]
	class UAAISpawnPlayerScavAIStuff* PlayerScavAIGroupClass;//[Offset: 0x4b8, Size: 0x8]
	<FString,SpawnArea> SpawnArea;//[Offset: 0x4c0, Size: 0x50]
	UAAISpawnScavStuff*[] ScavSquadArray;//[Offset: 0x510, Size: 0x10]
	UAAISpawnBossStuff*[] BossSquadArray;//[Offset: 0x520, Size: 0x10]
	UAAISpawnPMCStuff*[] PMCSquadArray;//[Offset: 0x530, Size: 0x10]
	UAAISpawnPlayerScavAIStuff*[] PlayerScavAISquadArray;//[Offset: 0x540, Size: 0x10]
	PMCAIEquipmentLimit[] PMCAIEquipmentLimit;//[Offset: 0x550, Size: 0x10]
	PlayerStartGroup[] PMCAISpawnPoints;//[Offset: 0x560, Size: 0x10]
	PlayerStartGroup[] PlayerScavAISpawnPoints;//[Offset: 0x570, Size: 0x10]
	AISpawnScavSpawnControllerTableRow[] ScavTableData;//[Offset: 0x5d0, Size: 0x10]
	AISpawnBossSpawnControllerTableRow[] BossTableData;//[Offset: 0x5e0, Size: 0x10]
	AISpawnPMCSpawnControllerTableRow[] PMCTableData;//[Offset: 0x5f0, Size: 0x10]
	AISpawnPMCConfigTableRow PMCConfigForTest;//[Offset: 0x600, Size: 0xb0]
	AISpawnPMCConfigTableRow PMCConfig;//[Offset: 0x6b0, Size: 0xb0]
	void ValidatePathNodeLocations();// 0x613be3fee041
	void ValidateAISpawnPointReferences();// 0x613ae3fee041
	void ValidateAISpawnPointLocations();// 0x6139e3fee041
	void TriggerSpawnByArea(int SuqadID, out const FString AreaName, enum Triggertype);// 0x6138e3fee041
	void StartTriggerVolume(int VolumeID, enum Triggertype);// 0x6137e3fee041
	void StartSpawnPlayerScavAI();// 0x6136e3fee041
	void SpawnBossBySquadID(int SquadID, int RandRoll);// 0x6135e3fee041
	void SetBattleVolume(SGAICharacter* SpawnedCharacter, Volume* BattleVolume);// 0x6134e3fee041
	void SendReinforcement(int SquadID, int Count);// 0x6133e3fee041
	void ModifyAreaAIPool(const FString AreaName, AIPoolInfo[] NewAIPool, int MaxAINum);// 0x6132e3fee041
	void LockArea(FString AreaName, bool IsLocked);// 0x6131e3fee041
	UAAISpawnStuff* GetSquadComponent(int SquadID);// 0x6130e3fee041
	SpawnArea[] GetSpawnAreaInfo(out const AreaInfo[] AreaNames);// 0x612fe3fee041
	bool GetSpawnArea(out const FString AreaName, out SpawnArea ResultArea);// 0x612ee3fee041
	void GetPMCSpawnPoint();// 0x612de3fee041
	bool GetIsPatrol(int SquadID);// 0x612ce3fee041
	SGAICharacter*[] GetFollowCharacterList(SGAICharacter* AI);// 0x612be3fee041
	bool GetCanCallReinforcement(int SquadID);// 0x612ae3fee041
	int CheckEquipLimitation(int EquipID);// 0x6129e3fee041
	bool BackToGround(SGAICharacter* Character);// 0x6128e3fee041
	void AddCustomScavSquad(int GroupID, enum FactionType);// 0x6127e3fee041

--------------------------------
Class: AIPoolInfo
	FString ID;//[Offset: 0x0, Size: 0x10]
	int Equip;//[Offset: 0x10, Size: 0x4]
	int Weight;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: UAAISpawnStuff.SGAISpawnStuff.Object
	float PMCPlayerStartTime;//[Offset: 0x100, Size: 0x4]
	<FString,AreaRuntimeDataInSpawnGroup> AreaRuntimeData;//[Offset: 0x108, Size: 0x50]
	void PMCPlayerStart();// 0x6146e3fee041
	void LockArea(out const FString AreaName, bool bLock);// 0x6145e3fee041
	UAAISpawnController* GetSpawnController();// 0x6144e3fee041
	FString GetRandomAreaName();// 0x6143e3fee041
	int GetAreaIndex(out const FString AreaName);// 0x6142e3fee041
	FString[] GetAllAreaNames();// 0x6141e3fee041
	AISpawnPool[] GetAISpawnPool();// 0x6140e3fee041
	void DoSpawnAI(out const FString AreaName, out const Actor*[] SpawnPoints, FString AIIDString, int EquipID, int Count, enum SpawnReason);// 0x613fe3fee041
	void ActivateAISpawn(out const FString AreaName, enum SpawnReason);// 0x613ee3fee041

--------------------------------
Class: AreaRuntimeDataInSpawnGroup
	AreaInfo AreaInfo;//[Offset: 0x0, Size: 0x18]

--------------------------------
Class: AreaInfo
	FString AreaID;//[Offset: 0x0, Size: 0x10]
	int Weight;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: AISpawnPool
	FName ToSpawnAIID;//[Offset: 0x0, Size: 0x8]
	int EquipmentPoolID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SpawnArea
	SGAIPathNode*[] PathNodes;//[Offset: 0x0, Size: 0x10]
	Actor*[] SpawnPoints;//[Offset: 0x10, Size: 0x10]
	Volume* BattleVolume;//[Offset: 0x20, Size: 0x8]
	FString[] ExclusiveAreas;//[Offset: 0x28, Size: 0x10]
	Actor* MapEffectMarkActor;//[Offset: 0x38, Size: 0x8]
	Actor*[] BattleTestStartPoints;//[Offset: 0x40, Size: 0x10]
	Volume*[] PatrolNoEntryVolume;//[Offset: 0x50, Size: 0x10]
	bool bEnableTestData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	AISpawnAreaInfoTableRow AreaData;//[Offset: 0x68, Size: 0x40]

--------------------------------
Class: AISpawnAreaInfoTableRow.TableRowBase
	int ConfigId;//[Offset: 0x8, Size: 0x4]
	int MapID;//[Offset: 0xc, Size: 0x4]
	int AISpawnConfigID;//[Offset: 0x10, Size: 0x4]
	int EventID;//[Offset: 0x14, Size: 0x4]
	FString AreaID;//[Offset: 0x18, Size: 0x10]
	int CampID;//[Offset: 0x28, Size: 0x4]
	int MaxAINumber;//[Offset: 0x2c, Size: 0x4]
	AIPool[] AIPool;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AIPool
	FString ID;//[Offset: 0x0, Size: 0x10]
	int Equip;//[Offset: 0x10, Size: 0x4]
	int Weight;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: UAAISpawnScavStuff.UAAISpawnStuff.SGAISpawnStuff.Object
	bool CanSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1]
	Actor*[] BattleTestStartPoints;//[Offset: 0x170, Size: 0x10]
	ScavInfoForPathNodeGroup[] ScavPathInfo;//[Offset: 0x188, Size: 0x10]
	SGAIPathNode*[] PathNodesArray;//[Offset: 0x198, Size: 0x10]
	SGAIPathNode*[] SpawnPointsArray;//[Offset: 0x1a8, Size: 0x10]
	SGAIPathNode*[] CorePathNodeArray;//[Offset: 0x1b8, Size: 0x10]
	SGAIPathNode*[] FreePathNodes;//[Offset: 0x1c8, Size: 0x10]
	SGAIPathNode*[] AvailiableSpawnPoints;//[Offset: 0x1d8, Size: 0x10]
	<SGCharacter*> PlayerArray;//[Offset: 0x1e8, Size: 0x50]
	<SGAIPathNode*,int> PathNodesDict;//[Offset: 0x238, Size: 0x50]
	NPCAIZoneGroupInfo* ZoneGroupInfo;//[Offset: 0x288, Size: 0x8]
	ActorComponent* AIMemoryComp;//[Offset: 0x290, Size: 0x8]
	PathNodeGroupInfo PathNodeGroupsInfo_LoopElement;//[Offset: 0x2a0, Size: 0x28]
	AISpawnScavSpawnControllerTableRow SpawnControllerData;//[Offset: 0x2d8, Size: 0x88]
	void StartBattleTest();// 0x6165e3fee041
	void SpawnAIByAIID(Actor* SpawnPoint, FName AIID, int EquipmentPoolID, bool UseEventReplace, int SquadID, out const FString SpawnAreaName, enum SpawnReason);// 0x6164e3fee041
	void ResetVolume();// 0x6163e3fee041
	void PlayerEnterTriggerVolume(enum SpawnReason);// 0x6162e3fee041
	bool IsWaveLooped();// 0x6161e3fee041
	bool IsGroupLocked(int GroupID);// 0x6160e3fee041
	void IncreaseWaveIndex();// 0x615fe3fee041
	bool IfNeedTrigger();// 0x615ee3fee041
	float GetWaveProbability(int WaveIndex);// 0x615de3fee041
	int GetWaveNum();// 0x615ce3fee041
	float GetWaveMinInterval(int WaveIndex);// 0x615be3fee041
	int GetWaveMin(int WaveIndex);// 0x615ae3fee041
	float GetWaveMaxInterval(int WaveIndex);// 0x6159e3fee041
	int GetWaveMax(int WaveIndex);// 0x6158e3fee041
	int GetWaveConfigIndex();// 0x6157e3fee041
	bool GetWaitingSpawnScav(out const FString AreaName, out FName ToSpawnAIID, out int EquipmentPoolID);// 0x6156e3fee041
	int GetPriority();// 0x6155e3fee041
	bool GetPathNodeForTeamPatrol(out const FString TargetAreaName, Actor* CallerActor, SGAIPathNode* CurrentPathNode, out SGAIPathNode* TargetPathNode);// 0x6154e3fee041
	bool GetIsSingleArea();// 0x6153e3fee041
	bool GetIsPatrol();// 0x6152e3fee041
	int GetGroupMaxAINumber(int GroupID);// 0x6151e3fee041
	float GetFirstSpawnTime();// 0x6150e3fee041
	float GetDeathDelay();// 0x614fe3fee041
	int GetCurrentWaveNum();// 0x614ee3fee041
	bool GetCanCallReinforcement();// 0x614de3fee041
	int GetAICountLimitation();// 0x614ce3fee041
	void FilterAvaliableSpawnPoint(Actor*[] SpawnPoints, int SpawnNum);// 0x614be3fee041
	void ClearData();// 0x614ae3fee041
	int ChangeAICountLimitation(int Count);// 0x6149e3fee041
	void BeginSpawn(enum SpawnReason);// 0x6148e3fee041
	int AIDead(ScavInfoForPathNodeGroup ScavPathInfoIn, bool NeedRemove);// 0x6147e3fee041

--------------------------------
Class: ScavInfoForPathNodeGroup
	SGAICharacter* ScavPawn;//[Offset: 0x0, Size: 0x8]
	FString AreaName;//[Offset: 0x8, Size: 0x10]
	SGAIPathNode* CurrentPathNode;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PathNodeGroupInfo
	Volume* BattleVolumes;//[Offset: 0x0, Size: 0x8]
	SGAIPathNode*[] PathNodes;//[Offset: 0x8, Size: 0x10]
	Actor*[] ScavSpawnPoints;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: AISpawnScavSpawnControllerTableRow.TableRowBase
	int ConfigId;//[Offset: 0x8, Size: 0x4]
	int MapID;//[Offset: 0xc, Size: 0x4]
	int AISpawnConfigID;//[Offset: 0x10, Size: 0x4]
	int EventID;//[Offset: 0x14, Size: 0x4]
	int SquadID;//[Offset: 0x18, Size: 0x4]
	int FatherSquadID;//[Offset: 0x1c, Size: 0x4]
	float PlayerAroundRadius;//[Offset: 0x20, Size: 0x4]
	float PlayerLineOfSight;//[Offset: 0x24, Size: 0x4]
	float PlayerViewAngle;//[Offset: 0x28, Size: 0x4]
	int AIRandLimitationMin;//[Offset: 0x2c, Size: 0x4]
	int AIRandLimitationMax;//[Offset: 0x30, Size: 0x4]
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	float FirstSpawnTime;//[Offset: 0x38, Size: 0x4]
	int TriggerVolumeID;//[Offset: 0x3c, Size: 0x4]
	float DeathDelay;//[Offset: 0x40, Size: 0x4]
	bool CanCallReinforcement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool IsPatrol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool SingleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	int Priority;//[Offset: 0x48, Size: 0x4]
	int FactionType;//[Offset: 0x4c, Size: 0x4]
	int GroupType;//[Offset: 0x50, Size: 0x4]
	ScavWaveInfoArray[] ScavWaveInfoArray;//[Offset: 0x58, Size: 0x10]
	AreaInfo[] AreaInfo;//[Offset: 0x68, Size: 0x10]
	AreaInfo[] Reinforcement;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: ScavWaveInfoArray
	float Probability;//[Offset: 0x0, Size: 0x4]
	int Min;//[Offset: 0x4, Size: 0x4]
	int Max;//[Offset: 0x8, Size: 0x4]
	float MinInterval;//[Offset: 0xc, Size: 0x4]
	float MaxInterval;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: UAAISpawnBossStuff.UAAISpawnStuff.SGAISpawnStuff.Object
	SGAICharacter*[] BossArray;//[Offset: 0x158, Size: 0x10]
	SGAICharacter*[] FollowerArray;//[Offset: 0x168, Size: 0x10]
	<FString,PathArray> FreePathPointsDic;//[Offset: 0x178, Size: 0x50]
	<SGAIPathNode*,FString> PathPointGroupIDDic;//[Offset: 0x1c8, Size: 0x50]
	Actor*[] BattleTestStartPoints;//[Offset: 0x218, Size: 0x10]
	NPCAIZoneGroupInfo* ZoneGroupInfo;//[Offset: 0x228, Size: 0x8]
	bool Inited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	FString CurrentAreaName;//[Offset: 0x238, Size: 0x10]
	bool CanSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	int MapID;//[Offset: 0x24c, Size: 0x4]
	bool InBattleTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	AISpawnBossSpawnControllerTableRow SpawnControllerData;//[Offset: 0x258, Size: 0x70]
	void UpdateExclusiveBotZone(FString AreaName);// 0x6176e3fee041
	void UnlockExclusiveArea(FString AreaName);// 0x6175e3fee041
	void TrySpawnBoss();// 0x6174e3fee041
	void TrySpawnAtBeginning();// 0x6173e3fee041
	void StartBattleTest();// 0x6172e3fee041
	void ResetVolume();// 0x6171e3fee041
	bool RemovePPfromFreePPDic(FString AreaName, SGAIPathNode* PathNode);// 0x6170e3fee041
	bool IfSpawnAtBeginning();// 0x616fe3fee041
	FString[] GetSpawnAreaNamesByEvent(out const FString TriggerEvent);// 0x616ee3fee041
	FString[] GetSpawnAreaNames();// 0x616de3fee041
	float GetProbability();// 0x616ce3fee041
	FString GetFollowerAreaID();// 0x616be3fee041
	FString GetBossAreaID();// 0x616ae3fee041
	void GetAvailablePathNodewhenSpawn(out SGAIPathNode* PathNodeOut, FString AreaName);// 0x6169e3fee041
	bool GetAIIDInfoByAreaName(out const FString AreaName, out FString AIID, out int EquipID, out int Count);// 0x6168e3fee041
	void ExecuteSpawnSequence(int RandNum);// 0x6167e3fee041
	void AddPPtoFreePPDic(FString AreaName, SGAIPathNode* PathNode);// 0x6166e3fee041

--------------------------------
Class: PathArray
	SGAIPathNode*[] PathNodes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AISpawnBossSpawnControllerTableRow.TableRowBase
	int ConfigId;//[Offset: 0x8, Size: 0x4]
	int MapID;//[Offset: 0xc, Size: 0x4]
	int AISpawnConfigID;//[Offset: 0x10, Size: 0x4]
	int SquadID;//[Offset: 0x14, Size: 0x4]
	int BossID;//[Offset: 0x18, Size: 0x4]
	int EventID;//[Offset: 0x1c, Size: 0x4]
	float PlayerAroundRadius;//[Offset: 0x20, Size: 0x4]
	float PlayerLineOfSight;//[Offset: 0x24, Size: 0x4]
	float PlayerViewAngle;//[Offset: 0x28, Size: 0x4]
	float Probability;//[Offset: 0x2c, Size: 0x4]
	int Weight;//[Offset: 0x30, Size: 0x4]
	FText MaxNumber;//[Offset: 0x38, Size: 0x18]
	bool SpawnAtBeginning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int FactionType;//[Offset: 0x54, Size: 0x4]
	int GroupType;//[Offset: 0x58, Size: 0x4]
	TriggerArea[] BossArea;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: TriggerArea
	FString AreaID;//[Offset: 0x0, Size: 0x10]
	FString TriggerEvent;//[Offset: 0x10, Size: 0x10]
	FString FollowArea;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: UAAISpawnPMCStuff.UAAISpawnStuff.SGAISpawnStuff.Object
	AIPortraitBase* AIPortraitPool;//[Offset: 0x160, Size: 0x8]
	Actor*[] Temp_Sps;//[Offset: 0x170, Size: 0x10]
	int[] PMCAILevelPool;//[Offset: 0x190, Size: 0x10]
	int[] PMCAILevelPool_Base;//[Offset: 0x1a0, Size: 0x10]
	DataTable* AISpawnGroupTable;//[Offset: 0x1c0, Size: 0x8]
	float MinDistanceToPlayer;//[Offset: 0x1d0, Size: 0x4]
	void TrySpawnPMCAI();// 0x6180e3fee041
	void SpawnAIByAIID(Actor* SpawnPoint, FName AIID, int EquipmentPoolID, bool UseEventReplace, int SquadID, out const FString SpawnAreaName);// 0x617fe3fee041
	void OnCharacterDestroyed(Character* Character);// 0x617ee3fee041
	void OnAllPMCFinishSpawning();// 0x617de3fee041
	void NeedtoSpawnPMCAI();// 0x617ce3fee041
	bool GetWaitingSpawnPMC(out const FString AreaName, out FName ToSpawnAIID, out int EquipmentPoolID);// 0x617be3fee041
	int GetSquadPMCNum();// 0x617ae3fee041
	bool GetPMCGroupIDAndEquipID(out int ToSpawnGroupIDOut, out int EquipmentPoolIDOut);// 0x6179e3fee041
	int GetPMCAIType(int PMCAIIDInTable);// 0x6178e3fee041
	void GetPMCAIIDPool();// 0x6177e3fee041

--------------------------------
Class: UAAISpawnPlayerScavAIStuff.UAAISpawnStuff.SGAISpawnStuff.Object
	void TrySpawnPlayerScav();// 0x6182e3fee041
	bool GetPlayerScavGroupIDAndEquipID(out int ToSpawnGroupIDOut, out int EquipmentPoolIDOut);// 0x6181e3fee041

--------------------------------
Class: PMCAIEquipmentLimit
	int EquipID;//[Offset: 0x0, Size: 0x4]
	int Limit;//[Offset: 0x4, Size: 0x4]
	int BackupID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AISpawnPMCSpawnControllerTableRow.TableRowBase
	int ConfigId;//[Offset: 0x8, Size: 0x4]
	int MapID;//[Offset: 0xc, Size: 0x4]
	int AISpawnConfigID;//[Offset: 0x10, Size: 0x4]
	int SquadID;//[Offset: 0x14, Size: 0x4]
	int MinSquadNum;//[Offset: 0x18, Size: 0x4]
	int MaxSquadNum;//[Offset: 0x1c, Size: 0x4]
	float PlayerAroundRadius;//[Offset: 0x20, Size: 0x4]
	float PlayerLineOfSight;//[Offset: 0x24, Size: 0x4]
	float PlayerViewAngle;//[Offset: 0x28, Size: 0x4]
	bool Priority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	AreaInfo[] AreaInfo;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AISpawnPMCConfigTableRow.TableRowBase
	int ConfigId;//[Offset: 0x8, Size: 0x4]
	int MapID;//[Offset: 0xc, Size: 0x4]
	int AISpawnConfigID;//[Offset: 0x10, Size: 0x4]
	int MinPMCNum;//[Offset: 0x14, Size: 0x4]
	int MaxPMCNum;//[Offset: 0x18, Size: 0x4]
	float PMCAIDelayTime;//[Offset: 0x1c, Size: 0x4]
	int MinPMCAITeamUpNum;//[Offset: 0x20, Size: 0x4]
	int MaxPMCAITeamUpNum;//[Offset: 0x24, Size: 0x4]
	float PlayerAroundRadius;//[Offset: 0x28, Size: 0x4]
	float PlayerLineOfSight;//[Offset: 0x2c, Size: 0x4]
	float PlayerViewAngle;//[Offset: 0x30, Size: 0x4]
	int[] PMCAIIDPool;//[Offset: 0x38, Size: 0x10]
	int[] PMCAIEquipPool;//[Offset: 0x48, Size: 0x10]
	float ScavAIDynamicLimitStartTime;//[Offset: 0x58, Size: 0x4]
	int ScavLimitPerPMCPlayer;//[Offset: 0x5c, Size: 0x4]
	int ExpectedPMCPlayerNum;//[Offset: 0x60, Size: 0x4]
	PMCAIEquipmentLimit[] PMCAIEquipmentLimit;//[Offset: 0x68, Size: 0x10]
	float PlayerScavAIDelayTime;//[Offset: 0x78, Size: 0x4]
	float PlayerScavAIEndTime;//[Offset: 0x7c, Size: 0x4]
	float PlayerScavAISpawnInterval;//[Offset: 0x80, Size: 0x4]
	int MinPlayerScavAINum;//[Offset: 0x84, Size: 0x4]
	int MaxPlayerScavAINum;//[Offset: 0x88, Size: 0x4]
	int[] PlayerScavAIIDPool;//[Offset: 0x90, Size: 0x10]
	int[] PlayerScavAIEquipPool;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: UAAISpawnManagerComponent.SGAISpawnManagerComponent.ActorComponent.Object
	float ValidUpdateInterval;//[Offset: 0x250, Size: 0x4]
	bool SetAIActiveByVector(SGAICharacter* Character, Vector SpawnPosition, Actor* SpawnPoint);// 0x613de3fee041
	bool SetAIActive(SGAICharacter* Character);// 0x613ce3fee041

--------------------------------
Class: UAAISpawnSwither.SGShowSwithBaseComponent.Object
	int[] VolumeIDs;//[Offset: 0x40, Size: 0x10]
	bool bDoOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: UAAsyncAction_SpawnAICharacter.BlueprintAsyncActionBase.Object
	delegate OnSpawned;//[Offset: 0x30, Size: 0x10]
	delegate OnReady;//[Offset: 0x40, Size: 0x10]
	delegate Failed;//[Offset: 0x50, Size: 0x10]
	SGAISpawnPoint* AISpawnPoint;//[Offset: 0x60, Size: 0x8]
	Volume* AIBattleVolume;//[Offset: 0x68, Size: 0x8]
	void OnAICharacterSpawned(Actor* SpawnPoint, Character* Character);// 0x6185e3fee041
	void OnAICharacterReady(SGAICharacter* AICharacter);// 0x6184e3fee041
	UAAsyncAction_SpawnAICharacter* AsyncAction_SpawnAICharacter(SGAISpawnPoint* SpawnPoint, Volume* BattleVolume);// 0x6183e3fee041

--------------------------------
Class: UABarrierDampingParamManager.Object
	BulletDampingBind[] BulletDampingBindList;//[Offset: 0x28, Size: 0x10]
	BulletDampingParam DefaultDamping;//[Offset: 0x38, Size: 0x10]
	BulletDampingParam GetDampingParamFromPhysicalMaterial(PhysicalMaterial* InPhysicalMaterial);// 0x6186e3fee041

--------------------------------
Class: BulletDampingBind
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8]
	BulletDampingParam DampingParam;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BulletDampingParam
	float VelSub;//[Offset: 0x0, Size: 0x4]
	float DamageSub;//[Offset: 0x4, Size: 0x4]
	float PenetrationSub;//[Offset: 0x8, Size: 0x4]
	float Density;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UABenchmarkManager.MFBenchmarkManager.Actor.Object

--------------------------------
Class: UABenchmarkManuallyTickActor.Actor.Object
	int NowId;//[Offset: 0x2e0, Size: 0x4]
	Transform[] MarkerTransforms;//[Offset: 0x2e8, Size: 0x10]

--------------------------------
Class: UABigMapAreaIDManagerComponent.ActorComponent.Object

--------------------------------
Class: UABigMapAreaVolume.SGVolume.PhysicsVolume.Volume.Brush.Actor.Object
	int AreaID;//[Offset: 0x368, Size: 0x4]
	int Layer;//[Offset: 0x36c, Size: 0x4]
	bool LocationIsOverlapInVolume(out const Vector Point);// 0x618ae3fee041
	int GetLayer();// 0x6189e3fee041
	int GetAreaID();// 0x6188e3fee041
	bool ActorIsOverlapInVolume(const Actor* Other);// 0x6187e3fee041

--------------------------------
Class: UABigMapInstanceSubsystem.WorldSubsystem.Subsystem.Object
	Vector WorldCenter;//[Offset: 0x30, Size: 0xc]
	Vector MapTopLeftLocation;//[Offset: 0x3c, Size: 0xc]
	Vector WorldNorthAngleOffset;//[Offset: 0x48, Size: 0xc]
	Vector WorldExtent;//[Offset: 0x54, Size: 0xc]
	Texture2D* MapTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* Map2LTexture;//[Offset: 0x68, Size: 0x8]
	BigMapAreaTextureInfo[] MapAreaTextureInfos;//[Offset: 0x70, Size: 0x10]
	int ScaleText;//[Offset: 0x80, Size: 0x4]
	int CurMainModeID;//[Offset: 0x84, Size: 0x4]
	int CurSubModeID;//[Offset: 0x88, Size: 0x4]
	int CurMapID;//[Offset: 0x8c, Size: 0x4]
	int CurSpecialID;//[Offset: 0x90, Size: 0x4]
	int CurDifficulty;//[Offset: 0x94, Size: 0x4]
	FString[] CurLootMaps;//[Offset: 0x98, Size: 0x10]
	bool IsInitConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	DataTable* BigMapEffectDataTable;//[Offset: 0xb8, Size: 0x8]
	void UnLoadAssest();// 0x6196e3fee041
	Vector2D TransformWorldPositionToMapViewportPosition(Vector WorldPosition, Vector2D TopLeft2ButtomLeft, Vector2D TopLeft2TopRight, Vector2D MapUVOffset, Vector2D MapSize, float MapScale);// 0x6195e3fee041
	Vector TransformToHeatMapLocation(Object* WorldContextObject, out const Vector InGameWorldLocation);// 0x6194e3fee041
	Vector2D TransformMapViewportPositionToWorldPosition(Vector2D MapPosition, Vector2D TopLeft2ButtomLeft, Vector2D TopLeft2TopRight, Vector2D MapUVOffset, Vector2D MapSize, float MapScale);// 0x6193e3fee041
	bool SaveBigMapConfigParams(Vector tWorldCenter, Vector tMapTopLeftLocation);// 0x6192e3fee041
	bool IsVaildConfig();// 0x6191e3fee041
	bool IsBelongModelByLootPointID(int LootPointID);// 0x6190e3fee041
	bool InitBigMapConfigByModeID(int MainModeID, int SubModeID, int MapID, int SpecialID, int Difficulty);// 0x618fe3fee041
	void InitBigMapConfig();// 0x618ee3fee041
	DataTable* GetBigMapEffectDataTable();// 0x618de3fee041
	UABigMapInstanceSubsystem* Get(Object* WorldContextObject);// 0x618ce3fee041
	void CopyWorldSettings(BigMapInfoActor* BigMapInfoActor);// 0x618be3fee041

--------------------------------
Class: UABigMapModuleBase.Object
	UserWidget* ModuleCanvas;//[Offset: 0x28, Size: 0x8]
	CanvasPanel* BigMap_Panel;//[Offset: 0x30, Size: 0x8]
	UserWidget* BigMap_Widget;//[Offset: 0x38, Size: 0x8]
	UserWidget* ModuleTogle_Widget;//[Offset: 0x40, Size: 0x8]
	bool IsVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	FText ModuleName;//[Offset: 0x50, Size: 0x18]
	int Order;//[Offset: 0x68, Size: 0x4]
	UserWidget*[] WidgetPool;//[Offset: 0x70, Size: 0x10]
	int[] AsynLoadingWidgets;//[Offset: 0x80, Size: 0x10]
	void RegistParentPanel(UserWidget* BigMapWidget);// 0x61a9e3fee041
	void RecycleWidget(UserWidget* Widget);// 0x61a8e3fee041
	void OnAsynLoadCompelete(int ID, class UserWidget TemplateUMG_Resource);// 0x61a7e3fee041
	void ModuleBaseDraw();// 0x61a6e3fee041
	void InitParams();// 0x61a5e3fee041
	void Init();// 0x61a4e3fee041
	SGPlayerState* GetPlayerState();// 0x61a3e3fee041
	Rotator GetPlayerSelfViewRotation();// 0x61a2e3fee041
	SGPlayerController* GetPlayerController();// 0x61a1e3fee041
	int GetModuleType();// 0x61a0e3fee041
	SGGameState* GetGameState();// 0x619fe3fee041
	SGCharacter* GetCharacter();// 0x619ee3fee041
	void Draw();// 0x619de3fee041
	void CreateWidgetCanvas();// 0x619ce3fee041
	void ClearAsynLoading(int ID);// 0x619be3fee041
	void BP_OnAsynLoadCompelete(int ID, UserWidget* Widget);// 0x619ae3fee041
	void BP_InitParams();// 0x6199e3fee041
	void BeginPlay();// 0x6198e3fee041
	void AsynCreateWidget(int ID, class UserWidget TemplateUMG_Resource);// 0x6197e3fee041

--------------------------------
Class: UABigMapStatics.BlueprintFunctionLibrary.Object
	int GetPanelLayerByPoint(Object* WorldContext, out const Vector Point);// 0x61ade3fee041
	int GetPanelLayer(Object* WorldContext, const Actor* Actor);// 0x61ace3fee041
	int GetLayerByAreaID(Object* WorldContext, int AreaID);// 0x61abe3fee041
	FText GetLandMarkNameByID(int MapID, int LandMarkId);// 0x61aae3fee041

--------------------------------
Class: UABreakableWinActor.BreakableWinBaseActor.StaticMeshActor.Actor.Object

--------------------------------
Class: UABulletDampingComponent.ActorComponent.Object
	UABarrierDampingParamManager* DampingMgrCache;//[Offset: 0xc0, Size: 0x8]
	class UABarrierDampingParamManager* DampingManagerClass;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: UACameraShake_Drone.SGCameraShakeBase.Object
	class MatineeCameraShake* AttackedCameraShakeClass;//[Offset: 0x40, Size: 0x8]
	void ManualPlayCameraShake();// 0x61aee3fee041

--------------------------------
Class: UACharacter.SGCharacter.Character.Pawn.Actor.Object
	SGCharacterWeaponManagerComponent* WeaponManagerComponentNative;//[Offset: 0x1418, Size: 0x8]
	SGCharacterDeathComponent* DeathComponentNative;//[Offset: 0x1420, Size: 0x8]
	SGCharacterMovementAbilityComponent* MovementAbilityComponentNative;//[Offset: 0x1428, Size: 0x8]
	SGCharacterTurnComponent* TurnComponentNative;//[Offset: 0x1430, Size: 0x8]
	SGCharacterBulletPassComponent* BulletPassComponentNative;//[Offset: 0x1438, Size: 0x8]
	SGCharacterInputProcessComponent* InputProcessComponentNative;//[Offset: 0x1440, Size: 0x8]
	SGCharacterMovementProneComponent* MovementProneComponentNative;//[Offset: 0x1448, Size: 0x8]
	SGCharacterMovementDBNOComponent* MovementDBNOComponentNative;//[Offset: 0x1450, Size: 0x8]
	SGCharacterDBNOComponent* DBNOComponentNative;//[Offset: 0x1458, Size: 0x8]
	SGCharacterLeanWallComponent* LeanComponentNative;//[Offset: 0x1460, Size: 0x8]
	SGCharacterRagdollNewComponent* RagdollComponentNative;//[Offset: 0x1468, Size: 0x8]
	SGCharacterAIComponent* AIComponentNative;//[Offset: 0x1470, Size: 0x8]
	SGCharacterAIPoseComponent* AIPoseComponentNative;//[Offset: 0x1478, Size: 0x8]
	SGCharacterWeaponSwayComponent* WeaponSwayComponentNative;//[Offset: 0x1480, Size: 0x8]
	SGUAMCharacterPoseCacheComponent* PoseCacheComponentNative;//[Offset: 0x1488, Size: 0x8]
	SGCharacterEnergyComponent* EnergyComponentNative;//[Offset: 0x1490, Size: 0x8]
	SGCharacterSprintComponent* SprintComponentNative;//[Offset: 0x1498, Size: 0x8]
	SGActorUseComponent* UseComponentNative;//[Offset: 0x14a0, Size: 0x8]
	SGCharacterPreviewComponent* PreviewComponentNative;//[Offset: 0x14a8, Size: 0x8]
	SGCharacterWeaponTraceComponent* WeaponTraceComponentNative;//[Offset: 0x14b0, Size: 0x8]
	SGCharacterCurveBreathComponent* CurveBreathComponentNative;//[Offset: 0x14b8, Size: 0x8]
	SGCharacterTakeHitEffectComponent* TakeHitEffectComponentNative;//[Offset: 0x14c0, Size: 0x8]
	SGCharacterInteractionComponent* InteractionComponentNative;//[Offset: 0x14c8, Size: 0x8]
	SGCharacterTeamRescueComponent* TeamRescueComponentNative;//[Offset: 0x14d0, Size: 0x8]
	SGCharacterIKComponent* IKComponentNative;//[Offset: 0x14d8, Size: 0x8]
	SGCharacterStunGrenadeEffectComponent* StunGrenadeEffectComponentNative;//[Offset: 0x14e0, Size: 0x8]
	SGCharacterWeightComponent* WeightComponentNative;//[Offset: 0x14e8, Size: 0x8]
	SGCharacterSenseAbilityComponent* SenseAbilityComponentNative;//[Offset: 0x14f0, Size: 0x8]
	SGCharacterCastShadowComponent* CastShadowCompNative;//[Offset: 0x14f8, Size: 0x8]
	SGCharacterAvatarComponent* AvatarCompNative;//[Offset: 0x1500, Size: 0x8]
	SGCharacterAvatarMergeComponent* AvatarMergeCompNative;//[Offset: 0x1508, Size: 0x8]
	SGCharacterFOVComponent* FOVComponentNative;//[Offset: 0x1510, Size: 0x8]
	SGCharacterInventorySearchComponent* InventorySearchComponentNative;//[Offset: 0x1518, Size: 0x8]
	SGCharacterFallComponent* FallComponentNative;//[Offset: 0x1520, Size: 0x8]
	SGCharacterHealthComponent* HealthComponentNative;//[Offset: 0x1528, Size: 0x8]
	SGCharacterTakeDamageComponent* TakeDamageComponentNative;//[Offset: 0x1530, Size: 0x8]
	SGCharacterBeUsedCorpseComponent* BeUsedCorpseComponentNative;//[Offset: 0x1538, Size: 0x8]
	SGCharacterBeUsedRescueComponent* BeUsedRescueComponentNative;//[Offset: 0x1540, Size: 0x8]
	SGCharacterWeaponAttachComponent* WeaponAttachComponentNative;//[Offset: 0x1548, Size: 0x8]
	SGCharacterMeshComponent* MeshComponentNative;//[Offset: 0x1550, Size: 0x8]
	SGCharacterHoldBreathComponent* HoldBreathComponentNative;//[Offset: 0x1558, Size: 0x8]
	SGCharacterProgressManagerComponent* ProgressManagerComponentNative;//[Offset: 0x1560, Size: 0x8]
	SGCharacterFootEffectComponent* FootEffectComponentNative;//[Offset: 0x1568, Size: 0x8]
	SGCharacterInventoryGiveComponent* InventoryGiveComponentNative;//[Offset: 0x1570, Size: 0x8]
	SGCharacterMoistureComponent* MoistureComponentNative;//[Offset: 0x1578, Size: 0x8]
	SGCharacterEnduranceComponent* EnduranceComponentNative;//[Offset: 0x1580, Size: 0x8]
	SGCharacterAvatarManagerComponent* AvatarManagerComponentNative;//[Offset: 0x1588, Size: 0x8]
	SGCharacterDebugMovementComponent* DebugMovementComponentNative;//[Offset: 0x1590, Size: 0x8]
	SGCharacterFoodComponent* FoodComponentNative;//[Offset: 0x1598, Size: 0x8]
	SGCharacterSoundComponent* SoundComponentNative;//[Offset: 0x15a0, Size: 0x8]
	SGCharacterFreshWoundComponent* FreshWoundComponentNative;//[Offset: 0x15a8, Size: 0x8]
	SGCharacterBoneBreakComponent* BoneBreakComponentNative;//[Offset: 0x15b0, Size: 0x8]
	SGCharacterDamageDebugComponent* DamageDebugComponentNative;//[Offset: 0x15b8, Size: 0x8]
	SGCharacterFlashGrenadeEffectComponent* FlashGrenadeEffectComponentNative;//[Offset: 0x15c0, Size: 0x8]
	SGCharacterInvInteractFlagComponent* InvInteractFlagComponentNative;//[Offset: 0x15c8, Size: 0x8]
	SGCharacterMovementVaultComponent* MovementVaultComponentNative;//[Offset: 0x15d0, Size: 0x8]
	SGCharacterSwimComponent* SwimComponentNative;//[Offset: 0x15d8, Size: 0x8]
	SGCharacterLagCompensationComponent* LagCompensationComponentNative;//[Offset: 0x15e0, Size: 0x8]
	SGCharacterSignificanceComponent* SignificanceComponentNative;//[Offset: 0x15e8, Size: 0x8]
	SGCharacterTeamMoveComponent* TeamMoveComponentNative;//[Offset: 0x15f0, Size: 0x8]
	UACharacterInventoryManagerComponent* InventoryManagerComponentNative;//[Offset: 0x15f8, Size: 0x8]
	SGCharacterActivityComponent* ActivityComponentNative;//[Offset: 0x1600, Size: 0x8]
	SetRTPCComponent* SetRTPCComponentNative;//[Offset: 0x1608, Size: 0x8]
	SGCharacterInventoryDetectComponent* InventoryDetectComponentNative;//[Offset: 0x1610, Size: 0x8]
	AkComponent* AKComponentNative;//[Offset: 0x1618, Size: 0x8]
	SGCharacterAvatarComponent* AvatarComponentNative;//[Offset: 0x1620, Size: 0x8]
	SGCharacterInventoryComponent* InventoryComponentNative;//[Offset: 0x1628, Size: 0x8]
	SGCharacterContainerGridMgrComponent* ContainerGridMgrComponentNative;//[Offset: 0x1630, Size: 0x8]
	SGCharacterLoadProtectComponent* LoadProtectComponentNative;//[Offset: 0x1638, Size: 0x8]
	SGCharacterSpectatingComponent* SpectatingComponentNative;//[Offset: 0x1640, Size: 0x8]
	SGCharacterArmorManagerComponent* ArmorManagerComponentNative;//[Offset: 0x1648, Size: 0x8]
	class SGCharacter* TemplateClass;//[Offset: 0x1650, Size: 0x8]

--------------------------------
Class: UACharacterInventoryManagerComponent.SGCharacterInventoryManagerComponent.ActorComponent.Object
	bool bRefreshAllInventoryValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	float AllInventoryValue;//[Offset: 0x144, Size: 0x4]
	float AllInventoryValueBringIn;//[Offset: 0x148, Size: 0x4]
	float AllInventoryValueTrade;//[Offset: 0x14c, Size: 0x4]
	float AllInventoryValueTradeBringIn;//[Offset: 0x150, Size: 0x4]
	void OnPushBullet(Character* Character, SGInventory* Bullet, SGInventory* Mag, int BulletCount);// 0x61cbe3fee041
	void OnPlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x61cae3fee041
	void OnPlayerDied(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x61c9e3fee041
	void OnPlayerBeginGame(PlayerController* PC);// 0x61c8e3fee041
	void OnModifyInventoryTotalCount(Character* Character, SGInventory* Inventory, int OldCount, int NewCount);// 0x61c7e3fee041
	void OnInventoryRemoved(Character* Character, SGInventory* Inventory);// 0x61c6e3fee041
	void OnInventoryLoadComplete(int TaskId);// 0x61c5e3fee041
	void OnInventoryAdded(Character* Character, SGInventory* Inventory);// 0x61c4e3fee041
	void OnCharacterCostBullet(Character* Character, SGInventory* Inventory, out const uint64[] BulletItemIDs);// 0x61c3e3fee041
	float GetAllInventoriesValueBringIn();// 0x61c2e3fee041
	float GetAllInventoriesValue();// 0x61c1e3fee041
	float GetAllInventoriesTradeValueBringIn();// 0x61c0e3fee041
	float GetAllInventoriesTradeValue();// 0x61bfe3fee041

--------------------------------
Class: UACharacterInputProcessComponent.SGCharacterInputProcessComponent.SGActorInputProcessComponent.ActorComponent.Object

--------------------------------
Class: UACharacterAIPickUpComponent.SGCharacterAIPickUpComponent.ActorComponent.Object

--------------------------------
Class: UACharacterConditionDetecterComponent.ActorComponent.Object
	int TimeInterval;//[Offset: 0xc0, Size: 0x4]
	int UpperEnergythreshold;//[Offset: 0xc4, Size: 0x4]
	int LowerEnergythreshold;//[Offset: 0xc8, Size: 0x4]
	int Healththreshold;//[Offset: 0xcc, Size: 0x4]
	int UnderLevel;//[Offset: 0xd0, Size: 0x4]
	int DangerAreaTipsLevel;//[Offset: 0xd4, Size: 0x4]
	int AttackScavTipsLevel;//[Offset: 0xd8, Size: 0x4]
	bool bIsOutOfUpperEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	bool bIsOutOfLowerEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1]
	bool bIsOutOfHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 0x1]
	void Init();// 0x61b3e3fee041
	void CheckUpperEnergyCondition();// 0x61b2e3fee041
	void CheckLowerEnergyCondition();// 0x61b1e3fee041
	void CheckHealthCondition();// 0x61b0e3fee041
	void CheckConditions();// 0x61afe3fee041

--------------------------------
Class: UACharacterContainerPickupsGridMgrComponent.SGCharacterContainerGridMgrComponent.ActorComponent.Object

--------------------------------
Class: UACharacterDeathComponent.SGCharacterDeathComponent.SGActorDeathComponent.ActorComponent.Object
	class Actor* RewardBoxClass;//[Offset: 0x558, Size: 0x8]
	int RewardBoxMaxExpandTimes;//[Offset: 0x560, Size: 0x4]
	int RewardBoxCurrentExpandTimes;//[Offset: 0x564, Size: 0x4]
	int RewardBoxExpandRowsEveryTime;//[Offset: 0x568, Size: 0x4]
	float DelayDeathNiagaraTime;//[Offset: 0x56c, Size: 0x4]
	NiagaraSystem* DeathNiagaraSystem;//[Offset: 0x570, Size: 0x8]
	MaterialInterface* NewParentMaterial;//[Offset: 0x578, Size: 0x8]
	<MaterialInterface*,MaterialInterface*> OverrideParentMaterial;//[Offset: 0x580, Size: 0x50]
	<FName,Texture*> DefaultTextureParameters;//[Offset: 0x5d0, Size: 0x50]
	<FName,CurveFloat*> DeathMTCurve;//[Offset: 0x620, Size: 0x50]
	float DelaySpawnRewardBoxTime;//[Offset: 0x670, Size: 0x4]
	MaterialInstanceDynamic*[] DeathMaterialInstanceDynamic;//[Offset: 0x678, Size: 0x10]
	float DeathEffectProgress;//[Offset: 0x688, Size: 0x4]
	SGInventory* RewardBox;//[Offset: 0x690, Size: 0x8]
	bool bPlayDeathEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1]
	Actor*[] TemporaryHiddenAdapters;//[Offset: 0x6a0, Size: 0x10]
	void TestSpawnDeathBox();// 0x61bee3fee041
	void TestDeathEffect();// 0x61bde3fee041
	void SpawnRewardBox();// 0x61bce3fee041
	void SpawnDeathNiagara();// 0x61bbe3fee041
	bool ShouldUseRewardBox();// 0x61bae3fee041
	bool ShouldPlayMeltEffect();// 0x61b9e3fee041
	int64[] GetItemTreeAllGids(SGPlayerItemInfoBase* PlayerItemInfo);// 0x61b8e3fee041
	MaterialInstanceDynamic*[] GetAllNewMaterialInstanceDynamic();// 0x61b7e3fee041
	void DiscardAIUniqueItems();// 0x61b6e3fee041
	SGInventory*[] CreateExtraDropInventories();// 0x61b5e3fee041
	bool CanConvertToMoney(SGInventory* TargetInventory);// 0x61b4e3fee041

--------------------------------
Class: UACharacterInspectionComponent.SGCharacterInspectionComponent.ActorComponent.Object

--------------------------------
Class: UACharacterInventoryTransComponent.SGCharacterZoneInfoTransComponent.ActorComponent.Object

--------------------------------
Class: UACharacterManagerMarkedComponent.ActorComponent.Object
	UAMarkedData[] MarkedDataList;//[Offset: 0xc0, Size: 0x10]
	void ServerAddMarkedData(const UAMarkedData MarkedData);// 0x61cce3fee041

--------------------------------
Class: UAMarkedData
	enum MarkedType;//[Offset: 0x0, Size: 0x1]
	float MarkedContinueTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: UACharacterStatics.SGCharacterStatics.SGActorStatics.BlueprintFunctionLibrary.Object
	float SetupFesiableGrenadeThrowAngle(Actor* AIActor, out const Vector Location, float InitSpeed, bool bMustThrow, bool bHigherFirst, out float FlyingTime);// 0x61e4e3fee041
	void SavePlayerMinimumEquipInfo(Character* Character);// 0x61e3e3fee041
	void SaveCharacterInventoryData(Character* Character);// 0x61e2e3fee041
	void KillCharacter(Character* Character, Character* KillerCharacter);// 0x61e1e3fee041
	bool HasInventoryCount(Character* Character, int64 InventoryItemID, int Count);// 0x61e0e3fee041
	bool HasInventory(Character* Character, int64 InventoryItemID);// 0x61dfe3fee041
	int64 GetWeaponItemID(SGCharacter* Character, byte WeaponSwitchType);// 0x61dee3fee041
	int64 GetPlayerCharacterGID(SGCharacter* Character);// 0x61dde3fee041
	int GetCurrentEquipedArmorLevel(SGCharacter* Character, enum InArmorType);// 0x61dce3fee041
	int64 GetCharacterID(SGCharacter* Character);// 0x61dbe3fee041
	int64 GetArmorItemID(SGCharacter* Character, byte ArmorSlot);// 0x61dae3fee041
	float GetAllInventoryValueTradeBringIn(SGCharacter* Character, int Precision);// 0x61d9e3fee041
	float GetAllInventoryValueTrade(SGCharacter* Character, int Precision);// 0x61d8e3fee041
	float GetAllInventoryValueBringIn(SGCharacter* Character, int Precision);// 0x61d7e3fee041
	float GetAllInventoryValue(SGCharacter* Character, int Precision);// 0x61d6e3fee041
	float GetAllInventoriesValue(Character* Character);// 0x61d5e3fee041
	int64 GetAIPathGroupID(SGCharacter* Character);// 0x61d4e3fee041
	FString GetAIGivenRandomInventoryCountInfo(SGAICharacter* Character);// 0x61d3e3fee041
	int64 GetAICharacterID(SGCharacter* Character);// 0x61d2e3fee041
	void ForceKillCharacter(Character* Character);// 0x61d1e3fee041
	void DiscardAll(SGCharacter* SGCharacter);// 0x61d0e3fee041
	void DeferKillCharacter(Character* Character, float DeferTime);// 0x61cfe3fee041
	bool CostInventoryComplex(Character* Character, int64 InventoryItemID, int Count);// 0x61cee3fee041
	bool CostInventory(Character* Character, int64 InventoryItemID, int Count);// 0x61cde3fee041

--------------------------------
Class: UACharacterTypes.Object

--------------------------------
Class: UADoorLockComponent.SGDoorLockComponent.ActorComponent.Object

--------------------------------
Class: UADroneCameraEffectComponent.ActorComponent.Object
	float DeletaRotationValue;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: UADroneCharacter.Character.Pawn.Actor.Object
	SGCharacter* OwnerCharacter;//[Offset: 0x598, Size: 0x8]
	class ActorComponent[] DroneComponentClasses;//[Offset: 0x5a0, Size: 0x10]
	ActorComponent*[] DroneComponents;//[Offset: 0x5b0, Size: 0x10]

--------------------------------
Class: UADroneMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float HeightLimit;//[Offset: 0xb44, Size: 0x4]
	float RangeLimit;//[Offset: 0xb48, Size: 0x4]
	float InFlyMaxSpeed;//[Offset: 0xb4c, Size: 0x4]
	float GetWifiValue();// 0x61f8e3fee041

--------------------------------
Class: UADroneControlDataComponent.ActorComponent.Object
	UADroneCharacter* RemoteCharacter;//[Offset: 0xb8, Size: 0x8]
	class UADroneCharacter* RemoteCharacterClass;//[Offset: 0xc0, Size: 0x8]
	Vector SpawnOffestPosition;//[Offset: 0xc8, Size: 0xc]
	void SpawnDrone();// 0x61e8e3fee041
	Rotator GetSpawnDroneRotation();// 0x61e7e3fee041
	Vector GetSpawnDroneLocation();// 0x61e6e3fee041
	UADroneCharacter* GetDrone();// 0x61e5e3fee041

--------------------------------
Class: UADroneControlSwitchComponent.ActorComponent.Object
	void ServerChangeToOwner();// 0x61eee3fee041
	void ServerChangeToDrone();// 0x61ede3fee041
	void ReallyGetDrone();// 0x61ece3fee041
	void ReallyChangeToDrone();// 0x61ebe3fee041
	void ChangeToOwner();// 0x61eae3fee041
	void ChangeToDrone();// 0x61e9e3fee041

--------------------------------
Class: UADroneDeathComponent.ActorComponent.Object
	CurveFloat* CloseDroneCurve;//[Offset: 0xc0, Size: 0x8]
	ParticleSystem* DestroyParticle;//[Offset: 0xc8, Size: 0x8]
	ParticleSystemComponent* DestroyPSC;//[Offset: 0xd0, Size: 0x8]
	void ClientSetStartCloseState(bool InStartClos);// 0x61efe3fee041

--------------------------------
Class: UADroneFlyPathComponent.ActorComponent.Object
	CurveVector* FlyCurve;//[Offset: 0xb8, Size: 0x8]
	float TotalFlyTime;//[Offset: 0xc0, Size: 0x4]
	bool IsInFlyPath();// 0x61f0e3fee041

--------------------------------
Class: UADroneHealthComponent.ActorComponent.Object
	bool IsAttacked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	int Health;//[Offset: 0xd0, Size: 0x4]
	int MaxHealth;//[Offset: 0xd4, Size: 0x4]
	class MatineeCameraShake* AttackedCameraShakeClass;//[Offset: 0xd8, Size: 0x8]
	void ManualPlayCameraShake();// 0x61f2e3fee041
	void ClientAttacked();// 0x61f1e3fee041

--------------------------------
Class: UADroneInputProcessComponent.SGActorInputProcessComponent.ActorComponent.Object
	void ServerSwitchDrone();// 0x61f7e3fee041
	bool ISCanInput();// 0x61f6e3fee041
	SGPlayerController* GetPlayerController();// 0x61f5e3fee041
	Controller* GetController();// 0x61f4e3fee041
	UADroneCharacter* GetCharacter();// 0x61f3e3fee041

--------------------------------
Class: UADronePowerComponent.ActorComponent.Object
	int TotalPower;//[Offset: 0xb8, Size: 0x4]
	int CurPower;//[Offset: 0xbc, Size: 0x4]
	float GetPowerRateValue();// 0x61fae3fee041
	int GetCurPowerValue();// 0x61f9e3fee041

--------------------------------
Class: UADroneWifiComponent.ActorComponent.Object
	MaterialInstance* DronePostMat;//[Offset: 0xb8, Size: 0x8]
	MaterialInstanceDynamic* DronePostMatDynamic;//[Offset: 0xc0, Size: 0x8]
	CurveFloat* WifiStrongCurve;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: UADsaCmdHandler.Object
	void PostInit();// 0x61ffe3fee041
	void OnSpawnLootInventoryOver();// 0x61fee3fee041
	void OnPCPostLoginEvent(GameModeBase* GameMode, PlayerController* NewPlayer);// 0x61fde3fee041
	void OnPCLogoutEvent(GameModeBase* GameMode, Controller* Exiting);// 0x61fce3fee041
	void OnDsaConnect();// 0x61fbe3fee041

--------------------------------
Class: UADsaLogic.Object
	UADsaSession* session_;//[Offset: 0x38, Size: 0x8]
	void ReleaseDSStaticMesh();// 0x6203e3fee041
	void EndLoadMap(World* World);// 0x6202e3fee041
	void DynamicBegin();// 0x6201e3fee041
	void AddExecCmds();// 0x6200e3fee041

--------------------------------
Class: UADsaSession.Object
	UADsaCmdHandler*[] CmdHandlerArr;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: UADsaSeedDsCodec.Object
	void LuaUnpackHeartBeat(out byte[] Buffer);// 0x6207e3fee041
	void LuaUnpackCmdFork(out byte[] Buffer, out FString CmdLine);// 0x6206e3fee041
	void LuaPackHeartBeat(int64 ID, int Pid, out byte[] Buffer);// 0x6205e3fee041
	void LuaPackCmdFork(int IsSuccessed, out byte[] Buffer);// 0x6204e3fee041

--------------------------------
Class: UADynamicMissionSubsystem.MFMissionSubsystem.WorldSubsystem.Subsystem.Object
	MFMissionFlow*[] DynamicMissionFlowList;//[Offset: 0x130, Size: 0x10]
	DistributeMissionHistory[] DistributeMissionHistories;//[Offset: 0x140, Size: 0x10]
	FString[] MissionFlowPathList;//[Offset: 0x150, Size: 0x10]
	MFMissionFlow*[] MissionFlowAssetList;//[Offset: 0x160, Size: 0x10]
	MFMissionFlow* SpawnMissionFlow(FString MissionFlowName);// 0x620fe3fee041
	void OnWorldBeginPlay();// 0x620ee3fee041
	void OnFlowStateChange(PlayerController* PlayerController, FName NewState, FName OldState);// 0x620de3fee041
	void OnBeginGameInit();// 0x620ce3fee041
	DistributeMissionHistory[] GetDistributeMissionHistories();// 0x620be3fee041
	void GetDebugMissionInfos(SGMissionFlowComponent* InMissionFlowComponent, FString MissionFlowName, out FString[] OutInfos);// 0x620ae3fee041
	UADynamicMissionSubsystem* Get(Object* WorldContextObject);// 0x6209e3fee041
	bool DistributeMissionFlow(SGCharacter* Character, FString MissionFlowName);// 0x6208e3fee041

--------------------------------
Class: DistributeMissionHistory
	MFMissionFlow* MissionFlow;//[Offset: 0x0, Size: 0x8]
	enum TriggerCharacterType;//[Offset: 0x8, Size: 0x1]
	int TriggerCharacterLevel;//[Offset: 0xc, Size: 0x4]
	int MisionFlowID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: UAEscapePointTimerComponent.ActorComponent.Object
	bool IsCanUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	DateTime StartDateTime;//[Offset: 0xc0, Size: 0x8]
	float TotalTime;//[Offset: 0xc8, Size: 0x4]
	enum TimeType;//[Offset: 0xcc, Size: 0x1]
	bool Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 0x1]
	enum EscapeTimeType;//[Offset: 0xce, Size: 0x1]
	float GetTimeProgress();// 0x6211e3fee041
	float GetLeftSeconds();// 0x6210e3fee041

--------------------------------
Class: UAEscapeStatics.BlueprintFunctionLibrary.Object
	void SetExploreState(PlayerState* PS, int EscapePointID, enum State);// 0x6224e3fee041
	void RemoveEscapePointShowFromPlayer(Object* WorldContextObject, SGTeamInfo* TeamInfo, PlayerController* PC);// 0x6223e3fee041
	bool IsRelatedToPlayer(PlayerState* PS, int EscapePointID);// 0x6222e3fee041
	bool HasDistributeEscapeVolume(PlayerState* PS);// 0x6221e3fee041
	int GetPlayerEscapePresetIndex(PlayerState* PS);// 0x6220e3fee041
	int GetPlayerEscapePointsCount(PlayerState* PS);// 0x621fe3fee041
	int[] GetPlayerEscapePoints(PlayerState* PS);// 0x621ee3fee041
	int GetPlayerEscapePointIDFromCount(PlayerState* PS, int Count);// 0x621de3fee041
	bool GetHasExploratedEscapePoint(PlayerState* PS, int EscapePointID);// 0x621ce3fee041
	enum GetExploreState(PlayerState* PS, int EscapePointID);// 0x621be3fee041
	SGVolume* GetEscapeVolumeByEscapePointID(Object* WorldContextObject, int EscapePointID);// 0x621ae3fee041
	bool GetEscapePointPassState(PlayerState* PS, int EscapePointID);// 0x6219e3fee041
	bool GetEscapePointIsCanShow(PlayerState* PS, int EscapePointID);// 0x6218e3fee041
	TeamEscapeInfo GetEscapeInfoByTeamInfo(SGTeamInfo* TeamInfo);// 0x6217e3fee041
	TeamEscapeInfo GetEscapeInfoByPlayerController(PlayerController* PC);// 0x6216e3fee041
	FString GetDateTimeString(DateTime DateTime);// 0x6215e3fee041
	EscapePreset FindEscapePresetConfig(PlayerController* PC, FString PresetConfigName);// 0x6214e3fee041
	void AddEscapePointShowForPlayer(Object* WorldContextObject, SGTeamInfo* TeamInfo, PlayerController* PC);// 0x6213e3fee041
	void AddEscapePoint(PlayerController* PC, int EscapePointID);// 0x6212e3fee041

--------------------------------
Class: TeamEscapeInfo
	SGTeamInfo* TeamInfo;//[Offset: 0x0, Size: 0x8]
	int[] EscapePointIDs;//[Offset: 0x8, Size: 0x10]
	bool FinishDistribute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int PresetIndex;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: EscapePreset
	int PresetIndex;//[Offset: 0x0, Size: 0x4]
	int[] ConstantEscapePointIDs;//[Offset: 0x8, Size: 0x10]
	int ConstantNum;//[Offset: 0x18, Size: 0x4]
	int[] RandomEscapePointIDs;//[Offset: 0x20, Size: 0x10]
	int RandomNum;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: UAEscapeTimeComputeInterface.Interface.Object
	float GetComputeTotalTime();// 0x6226e3fee041
	DateTime GetComputeStartDateTime();// 0x6225e3fee041

--------------------------------
Class: UAEscapeVolume.SGVolume.PhysicsVolume.Volume.Brush.Actor.Object
	enum EscapeVolumeType;//[Offset: 0x368, Size: 0x1]
	enum EscapeVolumeStyle;//[Offset: 0x369, Size: 0x1]
	UAFSMCheckObject*[] CheckObjectArr;//[Offset: 0x370, Size: 0x10]
	enum CheckObjectRelative;//[Offset: 0x380, Size: 0x1]
	UAFSMCheckObject*[] CanEscapeCheckObjectArr;//[Offset: 0x388, Size: 0x10]
	enum CanEscapeRelative;//[Offset: 0x398, Size: 0x1]
	UAFSMCheckObject*[] CloseCheckObjectArr;//[Offset: 0x3a0, Size: 0x10]
	enum CloseRelative;//[Offset: 0x3b0, Size: 0x1]
	void RemoveShowPlayer(PlayerController* Controller);// 0x622be3fee041
	void RemovePlayer(PlayerController* Controller);// 0x622ae3fee041
	void ChangeState(FString NewState);// 0x6229e3fee041
	void AddShowPlayer(PlayerController* Controller);// 0x6228e3fee041
	void AddPlayer(PlayerController* Controller);// 0x6227e3fee041

--------------------------------
Class: UAFSMCheckObject.Object
	UAFSMComponent* OwnerFSM;//[Offset: 0x28, Size: 0x8]
	bool bCanReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void SetOwnerFSM(UAFSMComponent* FSMComponent);// 0x623de3fee041
	void Reset();// 0x623ce3fee041
	UAFSMComponent* GetOwnerFSM();// 0x623be3fee041
	GameStateBase* GetGameState();// 0x623ae3fee041
	GameModeBase* GetGameMode();// 0x6239e3fee041
	bool GetCheckResult(float DeltaTime);// 0x6238e3fee041
	void BP_Reset();// 0x6237e3fee041
	void BP_Init();// 0x6236e3fee041

--------------------------------
Class: UAFSMComponent.ActorComponent.Object
	delegate OnFSMStateChange;//[Offset: 0xb8, Size: 0x10]
	bool bRunOnBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	UAFSMCheckObject*[] CheckObjectArr;//[Offset: 0xd0, Size: 0x10]
	UAFSMInfo UAFSMInfo;//[Offset: 0xe0, Size: 0x30]
	bool bPauseing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	bool bHasStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	bool bNeedTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1]
	float TickInterval;//[Offset: 0x114, Size: 0x4]
	float TickCountDown;//[Offset: 0x118, Size: 0x4]
	void TickState_BP(float DeltaTime, FString State);// 0x6254e3fee041
	void Stop_BP();// 0x6253e3fee041
	void Stop();// 0x6252e3fee041
	void StateChange_BP(FString State);// 0x6251e3fee041
	void Start_BP();// 0x6250e3fee041
	void Start();// 0x624fe3fee041
	void SetTargetObject(Object* Target);// 0x624ee3fee041
	void SetState(FString State);// 0x624de3fee041
	void SetIsOnlyReplicateToTarget(bool bEnable);// 0x624ce3fee041
	void Restore_BP();// 0x624be3fee041
	void Restore();// 0x624ae3fee041
	void Restart_BP();// 0x6249e3fee041
	void Restart();// 0x6248e3fee041
	void Pause_BP();// 0x6247e3fee041
	void Pause();// 0x6246e3fee041
	void OnReq_FSMState();// 0x6245e3fee041
	void NeedTick(bool bNeed);// 0x6244e3fee041
	bool IsNeedTick();// 0x6243e3fee041
	Object* GetTargetObject();// 0x6242e3fee041
	FString GetState();// 0x6241e3fee041
	void ExitState_BP(FString State);// 0x6240e3fee041
	void AddCheckObject_BP(UAFSMCheckObject* CheckObject);// 0x623fe3fee041
	void AddCheckObject(UAFSMCheckObject* CheckObject);// 0x623ee3fee041

--------------------------------
Class: UAFSMInfo
	FString FSMState;//[Offset: 0x0, Size: 0x10]
	FString OldFSMState;//[Offset: 0x10, Size: 0x10]
	Object* TargetObject;//[Offset: 0x20, Size: 0x8]
	bool OnlyReplicateToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: UAFaction.SGFaction.Actor.Object
	enum GetFactionType();// 0x622ce3fee041

--------------------------------
Class: UAFactionStatics.BlueprintFunctionLibrary.Object
	bool IsDossScavBringInInventory_Client(SGInventory* Inventory);// 0x6230e3fee041
	enum GetTeamFactionType(SGTeamInfo* Team);// 0x622fe3fee041
	enum GetPlayerStateFactionType(PlayerState* PS);// 0x622ee3fee041
	enum GetPlayerFactionType(PlayerController* PC);// 0x622de3fee041

--------------------------------
Class: UAFollowCharacterWidget.SGUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* CanvasPanelToMove;//[Offset: 0x2c8, Size: 0x8]
	Character* FollowedCharacter;//[Offset: 0x2e0, Size: 0x8]
	PlayerController* LocalPlayerController;//[Offset: 0x2e8, Size: 0x8]
	Character* LocalCharacter;//[Offset: 0x2f0, Size: 0x8]
	float VisibleDistance;//[Offset: 0x2f8, Size: 0x4]
	Vector Offset;//[Offset: 0x2fc, Size: 0xc]
	Vector2D Offset2D;//[Offset: 0x308, Size: 0x8]
	void SetCharacterInfoUsingDefaultController(Character* Character);// 0x6235e3fee041
	void SetCharacterInfo(Character* Character, PlayerController* PlayerController);// 0x6234e3fee041
	void OnDestroy();// 0x6233e3fee041
	bool GetIsCharacterDead();// 0x6232e3fee041
	void CharacterVisibleStateChanged(bool bIsVisible);// 0x6231e3fee041

--------------------------------
Class: UAFSMExecuteObject.Object
	UAFSMComponent* OwnerFSM;//[Offset: 0x28, Size: 0x8]
	void SetOwnerFSM(UAFSMComponent* FSMComponent);// 0x6256e3fee041
	UAFSMComponent* GetOwnerFSM();// 0x6255e3fee041

--------------------------------
Class: UAFSMStatics.BlueprintFunctionLibrary.Object
	bool RemoveFSMForTarget(Actor* Owner, UAFSMComponent* Component);// 0x625ee3fee041
	UAFSMCheckObject* GetCheckObject(UAFSMComponent* FSMComponent, class UAFSMCheckObject ObjectClass);// 0x625de3fee041
	UAFSMComponent* FindOrCreateFSMForTarget(Actor* Owner, class UAFSMComponent ComponentClass, Object* Target, UAFSMAdvanceParam AdvanceParam, bool IsReplicate, bool AutoStart);// 0x625ce3fee041
	UAFSMComponent* FindFSMForTarget(Actor* Owner, class UAFSMComponent ComponentClass, Object* Target);// 0x625be3fee041
	UAFSMCheckObject*[] FindCheckObjectArr(UAFSMComponent* FSMComponent, class UAFSMCheckObject ObjectClass);// 0x625ae3fee041
	UAFSMCheckObject* FindCheckObject(UAFSMComponent* FSMComponent, class UAFSMCheckObject ObjectClass);// 0x6259e3fee041
	UAFSMCheckObject*[] CopyCheckObjectArray(UAFSMComponent* FSMComponent, UAFSMCheckObject*[] Templete);// 0x6258e3fee041
	UAFSMCheckObject* CopyCheckObject(UAFSMComponent* FSMComponent, UAFSMCheckObject* Templete);// 0x6257e3fee041

--------------------------------
Class: UAFSMAdvanceParam
	bool OnlyReplicateToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: UAGameAreaStatisComponent.ActorComponent.Object
	delegate OnEnterReportAreaVolume;//[Offset: 0xc0, Size: 0x10]
	delegate OnLeavingReportAreaVolume;//[Offset: 0xd0, Size: 0x10]
	void OnActorSpawn(Actor* NewActor);// 0x625fe3fee041

--------------------------------
Class: UAGameEngine.GameEngine.Engine.Object

--------------------------------
Class: UAGameHUDManager.SGUserWidget.UserWidget.Widget.Visual.Object
	<enum,GameHUDReportInfo> GameHUDReportInfos;//[Offset: 0x2c8, Size: 0x50]
	<class Object,SGUserWidget*> HUDWidgetMap;//[Offset: 0x318, Size: 0x50]
	class SGUserWidget* WidgetAsset;//[Offset: 0x368, Size: 0x8]
	Overlay* Tips_Panel;//[Offset: 0x370, Size: 0x8]
	Overlay* DialogBox_Panel;//[Offset: 0x378, Size: 0x8]
	Overlay* Objective_Panel;//[Offset: 0x380, Size: 0x8]
	Overlay* Suggestive_Panel;//[Offset: 0x388, Size: 0x8]
	Overlay* WarnMessage_Panel;//[Offset: 0x390, Size: 0x8]
	Overlay* LightTips_Panel;//[Offset: 0x398, Size: 0x8]
	Overlay* ActivityPhase_Panel;//[Offset: 0x3a0, Size: 0x8]
	Overlay* RouletteTips_Panel;//[Offset: 0x3a8, Size: 0x8]
	void LoadFinish(SoftClassPath SoftBPClassPathName);// 0x6269e3fee041
	SGUserWidget* GenerateHUDWidgetFromID(SGUserWidget* NewWidget, int Messageid, FString DrawText);// 0x6268e3fee041
	void DrawPanel(float InDeltaTime);// 0x6267e3fee041
	void DrawHUDFromRowData(out GameHUDReportInfo GameHUDReportInfo);// 0x6266e3fee041
	void DirtributeMessageToQueue(int Messageid, FString DrawText);// 0x6265e3fee041
	UserWidget* CreateWidgetOwnedByPlayerController(class UserWidget UserWidgetClass);// 0x6264e3fee041
	void ClearParentWidgetChildren(out GameHUDReportInfo GameHUDReportInfo);// 0x6263e3fee041
	void ClearMessageFromID(int Messageid, bool bNotClearQueue);// 0x6262e3fee041
	void ClearAllHUD();// 0x6261e3fee041
	int AsyncLoadImageByRowName(Image* Image, FName RowName, bool bIsContentImag);// 0x6260e3fee041

--------------------------------
Class: GameHUDReportInfo
	Overlay* ParentWidget;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: UAGameInstanceDsaLogicComponent.SGGameInstanceComponent.Object
	UADsaLogic* DsaLogic;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: UAGameInstanceGameInfoComponent.SGGameInstanceGameInfoComponent.SGGameInstanceComponent.Object

--------------------------------
Class: UAGameInstanceStatics.BlueprintFunctionLibrary.Object
	void SetOpenRank(const Object* WorldContextObject, bool bOpenRank);// 0x6279e3fee041
	void SetIsMentor(const Object* WorldContextObject, bool IsMentor);// 0x6278e3fee041
	void SetIsHighHagnification(const Object* WorldContextObject, bool IsHighHagnification);// 0x6277e3fee041
	void SetBattleResult(const Object* WorldContextObject, bool bSucess);// 0x6276e3fee041
	void NewRandomLoadingTips(const Object* WorldContextObject, int PlayModeId, int ModelID, int RuleID, int[] ActiveIDs, int Wealthy, int Level, float EscapeProbability);// 0x6275e3fee041
	bool GetOpenRank(const Object* WorldContextObject);// 0x6274e3fee041
	int GetMemberNum(const Object* WorldContextObject);// 0x6273e3fee041
	MemberInfo GetMemberInfoByIndex(const Object* WorldContextObject, int Index);// 0x6272e3fee041
	void GetLoadingTips(const Object* WorldContextObject, out FText OutFirstTip, out FText OutSecondTip);// 0x6271e3fee041
	void GetLoadingImage(const Object* WorldContextObject, out Texture2D* OutLoadingTexture, out Texture2D* OutCountdownTexture);// 0x6270e3fee041
	bool GetIsMentor(const Object* WorldContextObject);// 0x626fe3fee041
	bool GetIsHighHagnification(const Object* WorldContextObject);// 0x626ee3fee041
	SGGameInstance* GetGameInstance(const Object* WorldContextObject);// 0x626de3fee041
	void ClearMemberInfo(const Object* WorldContextObject);// 0x626ce3fee041
	void ClearCacheData(const Object* WorldContextObject);// 0x626be3fee041
	void AddMemberInfo(const Object* WorldContextObject, MemberInfo member);// 0x626ae3fee041

--------------------------------
Class: MemberInfo
	int GID;//[Offset: 0x0, Size: 0x4]
	int Level;//[Offset: 0x4, Size: 0x4]
	FString HeadIconFileName;//[Offset: 0x8, Size: 0x10]
	Object* HeadIconTexture;//[Offset: 0x18, Size: 0x8]
	FString HeadboxPath;//[Offset: 0x20, Size: 0x10]
	FString PrivilegeIconPath;//[Offset: 0x30, Size: 0x10]
	FString PlayerName;//[Offset: 0x40, Size: 0x10]
	FString TitleName;//[Offset: 0x50, Size: 0x10]
	FString TitleIconPath;//[Offset: 0x60, Size: 0x10]
	FString TitleBackgroundPath;//[Offset: 0x70, Size: 0x10]
	int Type;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: UAGameModeActivityManagerComp.SGGameModeActivityManagerComponent.ActorComponent.Object
	<enum,ActivityRequireDistributers> ActivityRequireDistributers;//[Offset: 0x148, Size: 0x50]

--------------------------------
Class: ActivityRequireDistributers
	class MFQuestDistributerBase[] DistributerClasses;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UAGameModePickupManagerComponent.ActorComponent.Object
	Actor*[] SpotPointActors;//[Offset: 0xc0, Size: 0x10]
	UAPickupFactoryComponent*[] TotalSpotPoints;//[Offset: 0xd0, Size: 0x10]
	void StartSpawnPickups();// 0x627ae3fee041

--------------------------------
Class: UAPickupFactoryComponent.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x204, Size: 0x4]
	int OverrideLevel;//[Offset: 0x208, Size: 0x4]
	UAPickupConfigComponent* CachedPickupConfigComponent;//[Offset: 0x210, Size: 0x8]

--------------------------------
Class: UAPickupConfigComponent.SceneComponent.ActorComponent.Object
	UAPickupLevelPercentage[] PickupLevelPercentages;//[Offset: 0x208, Size: 0x10]
	int SpawnCountMin;//[Offset: 0x218, Size: 0x4]
	int SpawnCountMax;//[Offset: 0x21c, Size: 0x4]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	bool bSpawnInBirthIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1]

--------------------------------
Class: UAPickupLevelPercentage
	int Level;//[Offset: 0x0, Size: 0x4]
	float Percent;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: UAGameModeBattleRoyalePickupManagerComponent.UAGameModePickupManagerComponent.ActorComponent.Object
	UAPickupFactoryComponent*[] BirthIslandSpotPoints;//[Offset: 0x100, Size: 0x10]
	UAPickupFactoryComponent*[] AirlineSpotPoints;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: UAGameModeChoosePlayerStartComponent.SGGameModeChoosePlayerStartComponent.ActorComponent.Object
	float PMCPlayerSpawnintTimeOut;//[Offset: 0xd4, Size: 0x4]
	<enum,int> FactionOrderMap;//[Offset: 0xd8, Size: 0x50]
	void SetOrderGroup(enum FactionType, int GroupIndex);// 0x627ee3fee041
	void OnNewPlayerRestarted(PlayerController* NewPlayerController);// 0x627de3fee041
	bool NeedAdjustCheck(SGCharacter* CharacterOne, SGCharacter* EnemyCharacter);// 0x627ce3fee041
	int GetOrderGroup(enum FactionType);// 0x627be3fee041

--------------------------------
Class: UAGameplayStatics.BlueprintFunctionLibrary.Object
	void RealTimeDelay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0x6281e3fee041
	SGCharacter*[] GetScavAvoidAI(Object* WorldContextObject, enum IngoreFactionType);// 0x6280e3fee041
	int GetOrderPlayerStartIndex(Object* WorldContextObject, enum FactionType);// 0x627fe3fee041

--------------------------------
Class: UAGameStateActorPoolComponent.SGGameStateActorPoolComponent.ActorComponent.Object
	<int,int> InventoryMap;//[Offset: 0xc0, Size: 0x50]
	int[] InventoryIDs;//[Offset: 0x110, Size: 0x10]
	int ClientCacheIndex;//[Offset: 0x120, Size: 0x4]
	bool bEnableDynamicNetworkObjPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	enum[] DynamicInventoryType;//[Offset: 0x128, Size: 0x10]
	PoolInventoryInfo DynamicInventoryPoolConfig;//[Offset: 0x138, Size: 0x10]
	int MaxClassNum;//[Offset: 0x148, Size: 0x4]
	TimerHandle TimeHandle;//[Offset: 0x150, Size: 0x8]
	float MillisecondPerFrame;//[Offset: 0x158, Size: 0x4]
	void OnReq_InventoryIDs();// 0x628ae3fee041
	void OnActorSpawn(Actor* NewActor);// 0x6289e3fee041
	void FramingAddDynamicInventoryPoolID();// 0x6288e3fee041
	void ClientOnPlayerBeginGame(PlayerController* PC);// 0x6287e3fee041
	void ClearAllNetWorkObjPool();// 0x6286e3fee041
	void CheckObjPoolComplete();// 0x6285e3fee041
	void CheckObjPoolClearComplete();// 0x6284e3fee041
	void BeginStaticNetworkObjPool();// 0x6283e3fee041
	void BeginDynamicNetworkObjPool();// 0x6282e3fee041

--------------------------------
Class: PoolInventoryInfo
	int MaxPoolCount;//[Offset: 0x0, Size: 0x4]
	int CurrPoolCount;//[Offset: 0x4, Size: 0x4]
	int Priority;//[Offset: 0x8, Size: 0x4]
	bool bIsUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UAGameStateBroadcastComponent.ActorComponent.Object
	void OnReconnect(PlayerController* ReConnectPlayerController);// 0x628ce3fee041
	void OnCharacterReadyToPlay(Character* Character);// 0x628be3fee041

--------------------------------
Class: UAGameStateChaseActivityComp.SGGameStateChaseActivityInfoComp.ActorComponent.Object
	void UpdateTraceableActorInfos(Actor* InActor);// 0x629ee3fee041
	void TryRemoveInvalidAICharacter(Character* DeadCharacter);// 0x629de3fee041
	void RemoveTraceableActor(Actor* InActor);// 0x629ce3fee041
	void OnInventoryPosChanged(SGInventory* InvActor);// 0x629be3fee041
	void OnInventoryOwnerChanged(SGInventory* InvActor, Actor* OldOwnerActor, Actor* NewOwnerActor, bool Visible);// 0x629ae3fee041
	void OnCharacterReadyToPlay(Character* Character);// 0x6299e3fee041
	void OnAICharacterPostDie(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x6298e3fee041
	void OnAICharacterDestroyed(Actor* DeadCharacter);// 0x6297e3fee041
	void OnActorSpawned(Actor* InActor);// 0x6296e3fee041
	void OnActivityInventoryDestroyed(Actor* DestroyedActor);// 0x6295e3fee041
	void NotifyAllPlayerTraceableActorRemoved(int InventoryID, int InHandle);// 0x6294e3fee041
	void NotifyAllPlayerInventoryNewOwnerInfo(SGInventory* Inventory, Character* NewOwner);// 0x6293e3fee041
	void NotifyAllPlayerInventoryDestroyed(SGInventory* Inventory, int InHandle);// 0x6292e3fee041
	void NotifyAllPlayerChaseActivityStateChangeInfo();// 0x6291e3fee041
	void NotifyAllPlayerChaseActivityInventoryState();// 0x6290e3fee041
	int GetTraceableActorHandle(Actor* TraceableActor);// 0x628fe3fee041
	enum GetCurrentState();// 0x628ee3fee041
	void AddTraceableActor(Actor* InActor);// 0x628de3fee041

--------------------------------
Class: UAGameStateCheckPointManagerComp.SGGameStateCheckPointManagerComp.ActorComponent.Object
	delegate OnRefreshAtCheckPoint;//[Offset: 0xc0, Size: 0x10]
	delegate OnFinishRefreshAtCheckPoint;//[Offset: 0xd0, Size: 0x10]
	PlayerController* CurrentPC;//[Offset: 0xe0, Size: 0x8]
	class PlayerStart* CheckPointClass;//[Offset: 0xe8, Size: 0x8]
	class MFQuestBase* QuestClass;//[Offset: 0xf0, Size: 0x8]
	class SGWeapon* DefaultTutorialAKMInventoryClass;//[Offset: 0xf8, Size: 0x8]
	class SGWeapon* DefaultTutorialHK416InventoryClass;//[Offset: 0x100, Size: 0x8]
	int CurCheckPointIndex;//[Offset: 0x108, Size: 0x4]
	int CurFirstWeaponID;//[Offset: 0x10c, Size: 0x4]
	int CurSecondWeaponID;//[Offset: 0x110, Size: 0x4]
	Actor*[] CheckpointArray;//[Offset: 0x118, Size: 0x10]
	Actor*[] QuestArray;//[Offset: 0x128, Size: 0x10]
	SGCharacter* CurrentCharacter;//[Offset: 0x140, Size: 0x8]
	SGPlayerStart* CurrentCheckPoint;//[Offset: 0x148, Size: 0x8]
	bool IsSkipA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	void SpawnCheckPointEquipment(SGCharacter* CurCharacter, SGPlayerStart* CurCheckPoint);// 0x62b9e3fee041
	void SetIsSkipA(bool IsSkip);// 0x62b8e3fee041
	void SetCurSecondWeaponID(int secondid);// 0x62b7e3fee041
	void SetCurFirstWeaponID(int firstid);// 0x62b6e3fee041
	void SetCurCheckPointIndex(int CurIndex);// 0x62b5e3fee041
	void SetActivateCurCheckPointIndex(int CheckPointIndex);// 0x62b4e3fee041
	void SaveCheckPointData();// 0x62b3e3fee041
	void ReportRookieReq(int CheckpointID);// 0x62b2e3fee041
	void ReportRookieInfo(int CheckPointIndex);// 0x62b1e3fee041
	void RegistCheckPoints();// 0x62b0e3fee041
	void RefreshGameProgressAtCurCheckPoint();// 0x62afe3fee041
	int PullRookieInfo();// 0x62aee3fee041
	void PullCheckPointData();// 0x62ade3fee041
	void GiveEquipment();// 0x62ace3fee041
	class SGInventory GetWeaponClassByID(int WeaponEnumID);// 0x62abe3fee041
	bool GetIsSkipA();// 0x62aae3fee041
	int GetCurSecondWeaponID();// 0x62a9e3fee041
	int GetCurFirstWeaponID();// 0x62a8e3fee041
	int GetCurCheckPointIndex();// 0x62a7e3fee041
	Actor* GetCurCheckPoint();// 0x62a6e3fee041
	class Actor[] GetCheckPointInventoryList();// 0x62a5e3fee041
	Actor*[] GetCheckpointArray();// 0x62a4e3fee041
	void CommandOnGotoCheckPointByID(int CheckPointIndex);// 0x62a3e3fee041
	void BroadCastOnRefreshAtCheckPoint();// 0x62a2e3fee041
	void BroadCastOnFinishRefreshAtCheckPoint();// 0x62a1e3fee041
	void BroadCastInitHiddenAllHUDMessageEvent();// 0x62a0e3fee041
	void BroadCastHUDMessageEvent(SGPlayerStart* CurCheckPoint);// 0x629fe3fee041

--------------------------------
Class: UAGameStateDeathDropComponent.SGGameStateDeathDropComponent.ActorComponent.Object
	float OneTickMaxSecondCost;//[Offset: 0x118, Size: 0x4]
	int DeathDropTypeConfigID;//[Offset: 0x11c, Size: 0x4]
	int DuplicationDropRateConfigID;//[Offset: 0x120, Size: 0x4]
	int ConvertToMoneyItemCountCoefficientConfigID;//[Offset: 0x124, Size: 0x4]
	int MaxValueAdapterConvertRateConfigID;//[Offset: 0x128, Size: 0x4]
	int ConvertWeightPowConfigID;//[Offset: 0x12c, Size: 0x4]
	int MoneyItemIDConfigID;//[Offset: 0x130, Size: 0x4]
	int ItemTotalValueToMoneyCoefficientConfigID;//[Offset: 0x134, Size: 0x4]
	int ArmorDurabilityConvertCoefficientConfigID;//[Offset: 0x138, Size: 0x4]
	int HighValueItemConvertCoefficientConfigID;//[Offset: 0x13c, Size: 0x4]
	PlayerItemGroupReplaceInfo[] PlayerItemGroupReplaceInfos;//[Offset: 0x140, Size: 0x10]
	DataTable* DeathDropReplaceATable;//[Offset: 0x150, Size: 0x8]
	DataTable* DeathDropReplaceBTable;//[Offset: 0x158, Size: 0x8]
	DataTable* DeathDropReplacePoolTable;//[Offset: 0x160, Size: 0x8]
	bool GetReplacedInventoriesByItemID(int ItemID, out const InventorySpawnSourceInfo InventorySpawnSourceInfo, out SGInventory*[] OutReplacedInventories);// 0x62bae3fee041

--------------------------------
Class: InventorySpawnSourceInfo
	enum SpawnSourceType;//[Offset: 0x0, Size: 0x1]
	enum FromCharacterType;//[Offset: 0x1, Size: 0x1]
	int64 FromPlayerGID;//[Offset: 0x8, Size: 0x8]
	int FromTeamIndex;//[Offset: 0x10, Size: 0x4]
	Vector SpawnLocation;//[Offset: 0x14, Size: 0xc]
	Rotator SpawnRotation;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: PlayerItemGroupReplaceInfo
	int64 PlayerGID;//[Offset: 0x0, Size: 0x8]
	int TeamIndex;//[Offset: 0x8, Size: 0x4]
	ItemGroupReplaceInfo[] ItemGroupReplaceInfos;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ItemGroupReplaceInfo
	int64 TakeInItemGID;//[Offset: 0x0, Size: 0x8]
	SGPlayerItemInfoBase*[] ItemGroupAfterReplace;//[Offset: 0x8, Size: 0x10]
	ItemTreeCreateInfo[] ItemGroupCreateInfos;//[Offset: 0x18, Size: 0x10]
	bool bReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ItemTreeCreateInfo
	int64 FromPlayerGID;//[Offset: 0x0, Size: 0x8]
	int FromTeamIndex;//[Offset: 0x8, Size: 0x4]
	SGInventory* CreatedRootInventory;//[Offset: 0x10, Size: 0x8]
	PendingCreateItemInfo[] PendingCreateInventories;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: PendingCreateItemInfo
	SGPlayerItemInfoBase* PlayerItemInfo;//[Offset: 0x0, Size: 0x8]
	Actor* ParentInventory;//[Offset: 0x8, Size: 0x8]
	int ContainerIndex;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: UAGameStateFactionManagerComponent.SGGameStateFactionManagerComponent.ActorComponent.Object

--------------------------------
Class: UAGameStateGameTypeComponent.ActorComponent.Object
	enum MainGameModeType;//[Offset: 0xc0, Size: 0x1]
	enum SubGameModeType;//[Offset: 0xc2, Size: 0x2]
	enum MapID;//[Offset: 0xc4, Size: 0x1]
	enum MatchType;//[Offset: 0xc5, Size: 0x1]
	enum TeamType;//[Offset: 0xc6, Size: 0x1]

--------------------------------
Class: UAGameStateRandomTeamPlayerStartComponent.ActorComponent.Object
	int[] RandomTeamIndexArray;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: UAGameStateRangeWeaponComponent.ActorComponent.Object

--------------------------------
Class: UAGameStateStatisComponent.SGGameStateStatisComponent.ActorComponent.Object
	void SaveCharacterInsureItemsSnapshot(SGCharacter* Character);// 0x62c1e3fee041
	void OnLeavingReportAreaVolume(SGCharacter* Character, out const AreaDataInfo AreaDataInfo, int StandingTime, float AllInventoryDifferenceValue);// 0x62c0e3fee041
	void OnEnterReportAreaVolume(SGCharacter* Character, out const AreaDataInfo AreaDataInfo);// 0x62bfe3fee041
	enum GetInventoryDetailedSourceType(SGPlayerState* SGPlayerState, out const InventorySourceInfo SourceInfo);// 0x62bee3fee041
	float GetHeatMapPercentage();// 0x62bde3fee041
	FString GetCurrentLevelName();// 0x62bce3fee041
	InventoryInfo GetCharacterInsureItemsSnapshot(uint64 PlayerGID, uint64 ItemGID);// 0x62bbe3fee041

--------------------------------
Class: AreaDataInfo
	int Triggertype;//[Offset: 0x0, Size: 0x4]
	int AreaID;//[Offset: 0x4, Size: 0x4]
	FName AreaName;//[Offset: 0x8, Size: 0x8]
	int64 EnterTimeStamp;//[Offset: 0x10, Size: 0x8]
	float EnterInventoryValue;//[Offset: 0x18, Size: 0x4]
	int EnterMainWeaponValue;//[Offset: 0x1c, Size: 0x4]
	int EnterSecondWeaponValue;//[Offset: 0x20, Size: 0x4]
	int EnterSafeBoxValue;//[Offset: 0x24, Size: 0x4]
	int EnterArmorValue;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InventoryInfo
	int64 ItemGID;//[Offset: 0x0, Size: 0x8]
	int64 ItemID;//[Offset: 0x8, Size: 0x8]
	int StackCount;//[Offset: 0x10, Size: 0x4]
	int Durability;//[Offset: 0x14, Size: 0x4]
	int MaxDurability;//[Offset: 0x18, Size: 0x4]
	int64 ParentGID;//[Offset: 0x20, Size: 0x8]
	int Index;//[Offset: 0x28, Size: 0x4]
	int StartRow;//[Offset: 0x2c, Size: 0x4]
	int StartColumn;//[Offset: 0x30, Size: 0x4]
	enum AttachPosition;//[Offset: 0x34, Size: 0x1]
	int InsureType;//[Offset: 0x38, Size: 0x4]
	int64 TakeInPlayerGID;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: UAGameStateTODTimeComponent.ActorComponent.Object
	int64 ServerCurrentTODTime;//[Offset: 0xc0, Size: 0x8]
	int64 ClientCurrentTODTime;//[Offset: 0xc8, Size: 0x8]
	bool bForceUseServerTODTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	int ClientTODTimeTolerance;//[Offset: 0xd4, Size: 0x4]
	int64 StartTimeInStandalone;//[Offset: 0xd8, Size: 0x8]
	int64 ServerStartTime;//[Offset: 0xe0, Size: 0x8]
	int TimeSegment;//[Offset: 0xe8, Size: 0x4]
	int TimeFlowSpeedMultiple;//[Offset: 0xec, Size: 0x4]
	int64 MapStartTODTimeSeconds;//[Offset: 0xf0, Size: 0x8]
	MFClimateWeatherParamsOld ClientWeatherParams;//[Offset: 0xf8, Size: 0x18]
	MFClimateWeatherParamsOld ServerWeatherParams;//[Offset: 0x110, Size: 0x18]
	float CurrentWeather;//[Offset: 0x128, Size: 0x4]
	bool bEnableDebugMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	float TODValue;//[Offset: 0x130, Size: 0x4]
	float StartTODValue;//[Offset: 0x134, Size: 0x4]
	float CurTime;//[Offset: 0x138, Size: 0x4]
	float[] BlendWeights1;//[Offset: 0x140, Size: 0x10]
	float[] ServerBlendWeights;//[Offset: 0x150, Size: 0x10]
	float BlendTime;//[Offset: 0x160, Size: 0x4]
	int SunsetHour;//[Offset: 0x164, Size: 0x4]
	bool ClientRepServerStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	void UpdateCurrentTODTime();// 0x62d3e3fee041
	void UpdateBlendWeight();// 0x62d2e3fee041
	void SetServerBlendWeight(int Index, float Value);// 0x62d1e3fee041
	void SetCurTime(float CurTimes);// 0x62d0e3fee041
	void SetBlendWeight(int Index, float Value);// 0x62cfe3fee041
	void OnRep_ServerStartTime();// 0x62cee3fee041
	void OnRep_ServerCurrentTODTime();// 0x62cde3fee041
	void OnBeginGameInit();// 0x62cce3fee041
	void InitVaraiables();// 0x62cbe3fee041
	void InitServerStartTime();// 0x62cae3fee041
	int GetTODTime();// 0x62c9e3fee041
	float GetCurTime();// 0x62c8e3fee041
	MFClimateWeatherParamsOld GetCurrentWeatherParams();// 0x62c7e3fee041
	float GetCurrentWeather();// 0x62c6e3fee041
	float CalWeatherIndex(float CurTodValue, float CurStartTodValue);// 0x62c5e3fee041
	float CalTODValue(float CurTimes);// 0x62c4e3fee041
	float CalCurTime(float CurServerStartTime, float CurRunRate);// 0x62c3e3fee041
	float CalBlendWeight(float CurrentTime, float CurBlendTime, float Weather1);// 0x62c2e3fee041

--------------------------------
Class: MFClimateWeatherParamsOld
	float TimeOfDay;//[Offset: 0x0, Size: 0x4]
	float[] BlendWeights;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: GameStateTraceableInventoryProxy.Object
	UAGameStateTraceComponent* GameStateTraceComponent;//[Offset: 0x28, Size: 0x8]
	SGInventory* Inventory;//[Offset: 0x30, Size: 0x8]
	void OnInventoryRemoved(Character* OwnerCharacter);// 0x62d5e3fee041
	void OnInventoryAdded(Character* OwnerCharacter);// 0x62d4e3fee041

--------------------------------
Class: UAGameStateTraceComponent.ActorComponent.Object
	float MinScanInterval;//[Offset: 0xc0, Size: 0x4]
	UAPlayerStateTraceComponent*[] AllPlayerStateTraceComponents;//[Offset: 0xc8, Size: 0x10]
	TrackPlayerInfo[] TrackPlayerInfos;//[Offset: 0xd8, Size: 0x10]
	TraceableActorInfo[] GlobalTraceableActorInfos;//[Offset: 0xe8, Size: 0x10]
	<SGTeamInfo*,TraceableActorList> TeamInfoTraceableActorsMap;//[Offset: 0xf8, Size: 0x50]
	<enum,TraceableActorList> PlayerTeamTypeTraceableActorsMap;//[Offset: 0x148, Size: 0x50]
	GameStateTraceableInventoryProxy*[] InventoryProxies;//[Offset: 0x198, Size: 0x10]
	void UpdateTickInterval();// 0x62e6e3fee041
	void UpdateGlobalTraceableActorInfos(bool bManualUpdate, Actor* InActor);// 0x62e5e3fee041
	void SetTickInterval(float InTime);// 0x62e4e3fee041
	void RemovePlayerTraceableActor(MissionRelatedTargets RelatedTargets, Actor* InActor);// 0x62e3e3fee041
	void RemoveGlobalTraceableActor(Actor* Actor);// 0x62e2e3fee041
	void OnReconnect(PlayerController* ReConnectPlayerController);// 0x62e1e3fee041
	void OnPrePlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x62e0e3fee041
	void OnKilledEvent(Controller* Killer, Controller* KilledPlayer, Pawn* KilledPawn, out const DamageEvent DamageEvent, Actor* KillerWeapon, float KillDistance, enum EnduranceType, DamageEventObject* DamageEventObject);// 0x62dfe3fee041
	void OnCharacterReadyToPlay(Character* Character);// 0x62dee3fee041
	void OnActorDestroyed(Actor* Actor);// 0x62dde3fee041
	void NotifyUpdateTraceableActorInfos(bool bManualUpdate);// 0x62dce3fee041
	void NotifyRemoveTraceableActorInfo(int Handle);// 0x62dbe3fee041
	void InitPlayerTraceableActorInfos(PlayerState* PlayerState);// 0x62dae3fee041
	TraceableActorInfo[] GetPlayerTraceableActorInfos(out TrackPlayerInfo TrackPlayerInfo);// 0x62d9e3fee041
	TraceableActorInfo[] GetGlobalTraceableActorInfos(enum InMarkType, enum InOperatorType);// 0x62d8e3fee041
	void AddPlayerTraceableActor(MissionRelatedTargets RelatedTargets, Actor* InActor, enum InOperatorType, enum InMarkType, int InConfigID, float InScanningInterval, int InMissionFlowID, int InMissionID);// 0x62d7e3fee041
	void AddGlobalTraceableActor(Actor* InActor, enum InOperatorType, enum InMarkType, int InTargetID, float InScanningInterval);// 0x62d6e3fee041

--------------------------------
Class: MissionRelatedTargets
	Character*[] Characters;//[Offset: 0x0, Size: 0x10]
	SGTeamInfo*[] TeamInfos;//[Offset: 0x10, Size: 0x10]
	enum[] PlayerTeamTypes;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TrackPlayerInfo
	UAPlayerStateTraceComponent* PlayerStateTraceComponent;//[Offset: 0x0, Size: 0x8]
	UAPlayerStateChaseActivityComp* ChaseActivityComp;//[Offset: 0x8, Size: 0x8]
	ChaseActivityAvatarInfo ChaseActivityAvatarInfo;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: UAPlayerStateChaseActivityComp.SGPlayerStateChaseActivityInfoComponent.ActorComponent.Object
	float MarkBuffStartTime;//[Offset: 0x298, Size: 0x4]
	bool bStartBeMarkBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	TimerHandle BeMarkBuffTimerHandle;//[Offset: 0x2a0, Size: 0x8]
	bool bQuestReportVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	bool bOnStartSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1]
	bool bFirstActivityInvCollected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2aa, Size: 0x1]
	void UpdateServerTime(bool bManualUpdate);// 0x64d4e3fee041
	void StartBeMarkBuff();// 0x64d3e3fee041
	void SetQuestReportVisible(bool bVisible);// 0x64d2e3fee041
	void SetCurrentAvatarInfo(int AvatarItemID, float ScanningRange, float ScanningInterval, int ScanningIntervalScale);// 0x64d1e3fee041
	void SetChaseActivityStateChangeInfo(out ChaseActivityStateChangeInfo InChaseActivityStateChangeInfo);// 0x64d0e3fee041
	void ServerSetQuestReportVisible(bool bVisible);// 0x64cfe3fee041
	void ReportChaseActivityInfo(out ActivityReportConfigArray ActivityReportConfigArray, float ServerNotifyTime);// 0x64cee3fee041
	void RemoveWaitingReportCallback(enum InReportCallback);// 0x64cde3fee041
	void RemoveTeammateOwnedActivityInventory(SGInventory* Inventory, int Handle);// 0x64cce3fee041
	void RemoveOwnedActivityInventory(SGInventory* Inventory, int Handle);// 0x64cbe3fee041
	void RemoveMarkBuff();// 0x64cae3fee041
	void RemoveBeMarkBuff();// 0x64c9e3fee041
	void OnStartSpectating(SGCharacter* SGCharacter);// 0x64c8e3fee041
	void OnQuestReportVisibleChanged(bool bVisible);// 0x64c7e3fee041
	void OnMarkBuffChanged();// 0x64c6e3fee041
	void OnBeMarkBuffChanged();// 0x64c5e3fee041
	void OnActivityInventoryDestroyed(SGInventory* Inventory, int Handle);// 0x64c4e3fee041
	bool IsTeammateOwnedActivityInventory(int InHandle);// 0x64c3e3fee041
	bool IsQuestReportVisible();// 0x64c2e3fee041
	void GetTraceableActorInfos(out TraceableActorInfo[] OutTraceableActorInfos);// 0x64c1e3fee041
	UAPlayerStateChaseActivityComp* GetSpectatingChaseActivityComp();// 0x64c0e3fee041
	Actor*[] GetMapMarkTargets();// 0x64bfe3fee041
	enum GetCurrentState();// 0x64bee3fee041
	ChaseActivityAvatarInfo GetCurrentAvatarInfo();// 0x64bde3fee041
	float GetAvatarScanningInterval();// 0x64bce3fee041
	void ClientBroadcastActivityMessage(enum MessageType, float BroadcastTime);// 0x64bbe3fee041
	bool CanReportChaseActivityInfo(enum InReportCallback);// 0x64bae3fee041
	void CalcActivityInventoryState();// 0x64b9e3fee041
	void AddWaitingReportCallback(enum InReportCallback);// 0x64b8e3fee041
	void AddTeammateOwnedActivityInventory(SGInventory* Inventory, int Handle);// 0x64b7e3fee041
	void AddOwnedActivityInventory(SGInventory* Inventory, int Handle);// 0x64b6e3fee041
	void AddMarkBuff();// 0x64b5e3fee041
	void AddBeMarkBuff(float ScanningInterval);// 0x64b4e3fee041

--------------------------------
Class: TraceableActorList
	TraceableActorInfo[] TraceableActorInfos;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UAGameStateTutorialTransmitComp.ActorComponent.Object

--------------------------------
Class: UAGameStatics.SGGameStatics.BlueprintFunctionLibrary.Object
	void SetTODAudioState(Object* WorldContextObject);// 0x6310e3fee041
	void SetTextLerpColor(TextBlock* Text, SlateColor Color1, SlateColor Color2, float Alpha);// 0x630fe3fee041
	void SetIsSkipA(Object* WorldContextObject, bool IsSkipA);// 0x630ee3fee041
	void SetCurCheckPointIndex(Object* WorldContextObject, int NewIndex);// 0x630de3fee041
	void SetCmdHandler(const Object* WorldContextObject, Object* MSGHandler);// 0x630ce3fee041
	void SeparateTeammateInventoryInfoAndProcessInsure(PlayerController* PlayerController);// 0x630be3fee041
	void SeparateTeammateInventoryInfo(PlayerController* PlayerController, SGPlayerItemInfoBase*[] InEquipPlayerItemList, out SGPlayerItemInfoBase*[] OutSelfItemList, out SGBringOutTeamItemInfo[] OutTeammateItemList, out SGPlayerItemInfoBase*[] OutSelfSeparatedItemList);// 0x630ae3fee041
	void ReportRookieStep(Object* WorldContextObject, int NewIndex);// 0x6309e3fee041
	void RegistCheckPoints(Object* WorldContextObject);// 0x6308e3fee041
	void RefreshGameProgressAtCurCheckPoint(Object* WorldContextObject);// 0x6307e3fee041
	SGPlayerItemInfoBase*[] ProcessRootPlayerItemInfo(SGPlayerItemInfoBase* PlayerItemInfoBase);// 0x6306e3fee041
	void PrintPlayerItemInfoTree(SGPlayerItemInfoBase* PlayerItemInfoRoot);// 0x6305e3fee041
	bool NetModeIsClient(const Object* WorldContextObject);// 0x6304e3fee041
	bool IsActivityActivate(int ActionID);// 0x6303e3fee041
	UADsaCmdHandler* GetTutorialCmdHandler(const Object* WorldContextObject);// 0x6302e3fee041
	int64 GetTODTime(const Object* WorldContextObject);// 0x6301e3fee041
	int64 GetTimeStamp();// 0x6300e3fee041
	UAStandaloneCmdHandler* GetStandAloneCmdHandler(const Object* WorldContextObject);// 0x62ffe3fee041
	UAAISpawnController* GetSpawnController(const Object* WorldContextObject);// 0x62fee3fee041
	int64[] GetPlayerItemTakeInGIDs(SGPlayerItemInfoBase* PlayerItemInfoBase);// 0x62fde3fee041
	int64[] GetPlayerItemOwnerGIDs(SGPlayerItemInfoBase* PlayerItemInfoBase, int64 SelfGID, out const int64[] TeammateGIDs);// 0x62fce3fee041
	UADsaCmdHandler* GetJoinCmdHandler(const Object* WorldContextObject);// 0x62fbe3fee041
	bool GetIsSkipA(Object* WorldContextObject);// 0x62fae3fee041
	bool GetInventoryInfo(SGInventory* Inventory, out InventoryInfo OutInventoryInfo, bool bInsureItemOnly);// 0x62f9e3fee041
	int64 GetGamePlayModeId(Object* WorldContextObject);// 0x62f8e3fee041
	ActorComponent* GetGameModeCompByName(World* InWorld, class Object InClass, FName InName);// 0x62f7e3fee041
	SGAICharacter*[] GetFollowCharacterList(const Object* WorldContextObject, SGAICharacter* AI);// 0x62f6e3fee041
	float GetCurrentWeather(Object* WorldContextObject);// 0x62f5e3fee041
	int GetCurrentMapIDFromBattleMap(Object* WorldContextObject);// 0x62f4e3fee041
	Actor* GetCurrentCheckPointActor(Object* WorldContextObject);// 0x62f3e3fee041
	int GetCurCheckPointIndex(Object* WorldContextObject);// 0x62f2e3fee041
	Object* GetCmdHandler(const Object* WorldContextObject);// 0x62f1e3fee041
	int GetClientG6GameInstanceCount();// 0x62f0e3fee041
	<uint64,InventoryInfo> GetAllInsureInventoryInfos(Object* WorldContextObject);// 0x62efe3fee041
	void DumpPerformance();// 0x62eee3fee041
	bool DeductLimitInventoryItem(SGPlayerItemInfoBase* item, SGPlayerItemInfoBase* Parent, out SGPlayerItemInfoBase*[] Out, out SGPlayerItemInfoBase*[] DeleteItems, out SGPlayerItemInfoBase*[] SeparatedItemListTemp, int64 SelfGID, out const int64[] TeammateGIDs, enum LimitType, enum OrderTakeInSourceType);// 0x62ede3fee041
	SGPlayerItemInfoBase*[] DeductLimitInventory(PlayerController* PlayerController, SGPlayerItemInfoBase*[] InItems, out SGPlayerItemInfoBase*[] SeparatedItemListTemp);// 0x62ece3fee041
	void CreateTeamAndStartMatching(Object* WorldContextObject, bool IsSingleTeam, int64 PlayModeId);// 0x62ebe3fee041
	SGInventory* CreateInventoryFromPlayerItemInfo(Object* WorldContextObject, SGPlayerItemInfoBase* PlayerItemInfoBase, Actor* ParentActor, int InContainerIndex, bool bRecursion, out const InventorySpawnSourceInfo SpawnSourceInfo, bool bManualHanldeInventoryToStatic);// 0x62eae3fee041
	bool CheckCurCheckPointIndexEqualsToNum(Object* WorldContextObject, int NewIndex);// 0x62e9e3fee041
	void BroadCastOnDoorGateChanged(const Object* WorldContextObject, bool bIsOpen, FString GateName, float WaitTime, int GateWarnType);// 0x62e8e3fee041
	void AddPlayerItemInfoToFitPosition(SGPlayerItemInfoBase* PlayerItemInfoBase, int64 SelfGID, out const int64[] TeammateGIDs, bool bIsEquipRoot, out SGPlayerItemInfoBase*[] OutSelfItemList, out SGBringOutTeamItemInfo[] OutTeammateItemList, out SGPlayerItemInfoBase*[] OutSelfSeparatedItemList);// 0x62e7e3fee041

--------------------------------
Class: UAStandaloneCmdHandler.UADsaCmdHandler.Object

--------------------------------
Class: UAGILoadingTipsComponent.SGGameInstanceComponent.Object
	Texture2D* LoadingTexture;//[Offset: 0x28, Size: 0x8]
	Texture2D* CountdownTexture;//[Offset: 0x30, Size: 0x8]
	Texture2D* MapDefaultLoadingTexture;//[Offset: 0x38, Size: 0x8]
	Texture2D* MapDefaultCountdownTexture;//[Offset: 0x40, Size: 0x8]
	TipItem[] Tips;//[Offset: 0x48, Size: 0x10]
	int WeightCount;//[Offset: 0x58, Size: 0x4]
	FText FirstTip;//[Offset: 0x60, Size: 0x18]
	FText SecondTip;//[Offset: 0x78, Size: 0x18]
	bool bIsMentor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bOpenRank;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	bool bIsHighHagnification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 0x1]
	MemberInfo[] MemberInfoArr;//[Offset: 0x98, Size: 0x10]
	void SetOpenRank(bool OpenRank);// 0x631ee3fee041
	void SetIsMentor(bool IsMentor);// 0x631de3fee041
	void SetIsHighHagnification(bool HighHagnification);// 0x631ce3fee041
	void NewRandomLoadingTips(int PlayModeId, int ModelID, int RuleID, int[] ActiveIDs, int Wealthy, int Level, float EscapeProbability);// 0x631be3fee041
	bool GetOpenRank();// 0x631ae3fee041
	int GetMemberNum();// 0x6319e3fee041
	MemberInfo GetMemberInfoByIndex(int Index);// 0x6318e3fee041
	void GetLoadingTips(out FText OutFirstTip, out FText OutSecondTip);// 0x6317e3fee041
	void GetLoadingImage(out Texture2D* OutLoadingTexture, out Texture2D* OutCountdownTexture);// 0x6316e3fee041
	bool GetIsMentor();// 0x6315e3fee041
	bool GetIsHighHagnification();// 0x6314e3fee041
	void ClearMemberInfo();// 0x6313e3fee041
	void ClearCacheData();// 0x6312e3fee041
	void AddMemberInfo(MemberInfo member);// 0x6311e3fee041

--------------------------------
Class: TipItem
	FText Tips;//[Offset: 0x0, Size: 0x18]
	uint32 Weight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: UAGMInventoryManagerComponent.SGGameModeInventoryManagerComponent.ActorComponent.Object

--------------------------------
Class: UAGMMsgHandlerManagerComponent.ActorComponent.Object
	class UADsaCmdHandler[] StandAloneHandlers;//[Offset: 0xb8, Size: 0x10]
	class UADsaCmdHandler[] DSHandlers;//[Offset: 0xc8, Size: 0x10]
	UADsaCmdHandler*[] Handlers;//[Offset: 0xd8, Size: 0x10]
	UADsaLogic* DsaLogic;//[Offset: 0xe8, Size: 0x8]
	bool bHasInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	void RegisterHadnler(UADsaCmdHandler* Handler);// 0x6321e3fee041
	UADsaCmdHandler* GetHandler(FString Name);// 0x6320e3fee041
	void CreateCmdHandler();// 0x631fe3fee041

--------------------------------
Class: UAGreenHandQuestBase.QuestBase.MFQuestBase.Actor.Object

--------------------------------
Class: UAGSEscapeManagerComponent.ActorComponent.Object
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	<int,SGVolume*> EscapePointMap;//[Offset: 0xd0, Size: 0x50]
	<SGTeamInfo*,TeamEscapeInfo> TeamEscapeMap;//[Offset: 0x120, Size: 0x50]
	<enum,ModifyEscapeInfoList> ModifyEscapeInfoMap;//[Offset: 0x170, Size: 0x50]
	<SGTeamInfo*,ModifyEscapeInfoList> TeamInfoEscapeInfosMap;//[Offset: 0x1c0, Size: 0x50]
	<enum,ModifyEscapeInfoList> PlayerTeamTypeEscapeInfosMap;//[Offset: 0x210, Size: 0x50]
	void SetTeamEscapePresetIndex(int PresetIndex, PlayerController* PC);// 0x6332e3fee041
	void ReplicateToPlayerController(SGTeamInfo* TeamInfo);// 0x6331e3fee041
	void RemoveEscapePointShowFromPlayer(SGTeamInfo* TeamInfo, PlayerController* PC);// 0x6330e3fee041
	void RemoveEscapePointFromPlayer(int EscapaPointID, PlayerController* PC);// 0x632fe3fee041
	void RefreshEscapeExploreState(SGTeamInfo* TeamInfo, int EscapaPointID);// 0x632ee3fee041
	void OnProsessPawn(PlayerController* PC, Pawn* Pawn);// 0x632de3fee041
	void ModifyEscapePointEx(MissionRelatedTargets RelatedTargets, int InEscapaPointID, bool bAdd);// 0x632ce3fee041
	void ModifyEscapePoint(enum InCharacterType, int InEscapaPointID, bool bAdd);// 0x632be3fee041
	void InitEscapePoints();// 0x632ae3fee041
	bool HasDistributeEscapeVolume(SGTeamInfo* TeamInfo);// 0x6329e3fee041
	SGVolume* GetEscapeVolumeByEscapePointID(int EscapePointID);// 0x6328e3fee041
	TeamEscapeInfo GetEscapeInfoByTeamInfo(SGTeamInfo* TeamInfo);// 0x6327e3fee041
	TeamEscapeInfo GetEscapeInfoByPlayerController(PlayerController* PC);// 0x6326e3fee041
	void FinishDistributeEscapePoint(PlayerController* PC);// 0x6325e3fee041
	void DistributeEscapePoint(PlayerController* PC);// 0x6324e3fee041
	void AddEscapePointShowForPlayer(SGTeamInfo* TeamInfo, PlayerController* PC);// 0x6323e3fee041
	void AddEscapePointForPlayer(int EscapaPointID, PlayerController* PC);// 0x6322e3fee041

--------------------------------
Class: ModifyEscapeInfoList
	ModifyEscapeInfo[] ModifyEscapeInfos;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ModifyEscapeInfo
	int EscapePointID;//[Offset: 0x0, Size: 0x4]
	bool bAddEscapePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: UAGSGreenHandEventComponent.ActorComponent.Object
	delegate OnQuestComplete;//[Offset: 0xc0, Size: 0x10]
	delegate OnLoadingScreenMovieFinish;//[Offset: 0xd0, Size: 0x10]
	void OnMoviePlaybackFinished();// 0x6333e3fee041

--------------------------------
Class: UAGSOtherLevelConfigComponent.ActorComponent.Object

--------------------------------
Class: UAGSSceneManagerComponent.ActorComponent.Object
	FName[] AddtionLevels;//[Offset: 0xb8, Size: 0x10]
	MissionActorReference[] DeleteActors;//[Offset: 0xc8, Size: 0x10]
	FName[] RefLevels;//[Offset: 0xd8, Size: 0x10]
	void OnRep_DeleteActors();// 0x6338e3fee041
	void OnRep_AddtionLevels();// 0x6337e3fee041
	void OnLevelAddToWorld(Level* Level, World* World);// 0x6336e3fee041
	void AddDeleteActor(MissionActorReference ActorToDelete);// 0x6335e3fee041
	void AddAddtionLevel(FString LevelName);// 0x6334e3fee041

--------------------------------
Class: MissionActorReference
	FName RefStr;//[Offset: 0x0, Size: 0x8]
	Actor* RefActor;//[Offset: 0x8, Size: 0x8]
	FName RefLevelName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: UAGSTutorialEventComponent.ActorComponent.Object
	SGAICharacter* Coach;//[Offset: 0xc0, Size: 0x8]
	delegate OnSoundTutorialBtnClick;//[Offset: 0xc8, Size: 0x10]
	delegate OnSoundTutorialUIChangeShow;//[Offset: 0xd8, Size: 0x10]
	delegate OnDirectionalBarChangeShow;//[Offset: 0xe8, Size: 0x10]
	delegate OnBigMapStateChange;//[Offset: 0xf8, Size: 0x10]
	delegate OnBagTabClick;//[Offset: 0x108, Size: 0x10]
	delegate OnBagStateChange;//[Offset: 0x118, Size: 0x10]
	delegate OnFinishEscape;//[Offset: 0x128, Size: 0x10]
	delegate PlayMeida;//[Offset: 0x138, Size: 0x10]
	delegate StopMeida;//[Offset: 0x148, Size: 0x10]
	delegate OnClickItem;//[Offset: 0x158, Size: 0x10]
	delegate OnSetItemSelectMenuEnable;//[Offset: 0x168, Size: 0x10]
	delegate OnCheckWeaponBtnClick;//[Offset: 0x178, Size: 0x10]
	delegate OnLevelLoadComplete;//[Offset: 0x188, Size: 0x10]
	delegate OnFakeMapEffectClicked;//[Offset: 0x198, Size: 0x10]
	delegate OnSettingPannalChange;//[Offset: 0x1a8, Size: 0x10]
	delegate OnItemMoveFail;//[Offset: 0x1b8, Size: 0x10]
	delegate OnSetBagContainerUILock;//[Offset: 0x1c8, Size: 0x10]
	delegate OnFireBtnClick;//[Offset: 0x1d8, Size: 0x10]
	delegate OnBlackBarEnableChange;//[Offset: 0x1e8, Size: 0x10]
	delegate OnHealthUIClick;//[Offset: 0x1f8, Size: 0x10]
	delegate OnItemLockedByID;//[Offset: 0x208, Size: 0x10]
	delegate ChangeViewCheckTarget;//[Offset: 0x218, Size: 0x10]
	delegate ChangeStarSightEffectShow;//[Offset: 0x228, Size: 0x10]
	delegate ShowFacePaintWidget;//[Offset: 0x238, Size: 0x10]
	delegate UnSelectInventory;//[Offset: 0x248, Size: 0x10]
	delegate OnBeginUseItem;//[Offset: 0x258, Size: 0x10]
	delegate CloseBag;//[Offset: 0x268, Size: 0x10]
	delegate OnFacePanelStateChange;//[Offset: 0x278, Size: 0x10]
	delegate OnCreateTeamReqAndStartMatching;//[Offset: 0x288, Size: 0x10]
	delegate OnTutorialSequenceFinished;//[Offset: 0x298, Size: 0x10]
	delegate PlayBlink;//[Offset: 0x2a8, Size: 0x10]
	delegate OnMovieFinishCacheDelegate;//[Offset: 0x2b8, Size: 0x10]
	delegate PlayB1EndEffect;//[Offset: 0x2c8, Size: 0x10]
	class GameplayAbility* SpeedAbilityClass;//[Offset: 0x2d8, Size: 0x8]
	GameplayAbilitySpecHandle SpeedAbilitySpecHandle;//[Offset: 0x2e0, Size: 0x4]
	class GameplayAbility* CoachSpeedAbilityClass;//[Offset: 0x2e8, Size: 0x8]
	GameplayAbilitySpecHandle CoachSpeedAbilitySpecHandle;//[Offset: 0x2f0, Size: 0x4]
	delegate OnBlackfilmFadeBegin;//[Offset: 0x2f8, Size: 0x10]
	delegate OnSetLifeStateClickEnable;//[Offset: 0x308, Size: 0x10]
	delegate CharacterConditonCheckEnable;//[Offset: 0x318, Size: 0x10]
	delegate OnThrowingWeaponEffectEnable;//[Offset: 0x328, Size: 0x10]
	delegate TutorialRookieIDReport;//[Offset: 0x338, Size: 0x10]
	<SGAISpawnPoint*,Character*> AIMap;//[Offset: 0x348, Size: 0x50]
	<SGAISpawnPoint*,Actor*> AIDeathBoxMap;//[Offset: 0x398, Size: 0x50]
	delegate ChangePlayMediaEndType;//[Offset: 0x3e8, Size: 0x10]
	void RegisterCoach(SGAICharacter* InCoach);// 0x6341e3fee041
	void RegisterAISpawn();// 0x6340e3fee041
	void OnSpawnDeathBox(Character* Character, Actor* DeathBox);// 0x633fe3fee041
	void OnAISpawn(Actor* SpawnPoint, Character* AICharacter);// 0x633ee3fee041
	Actor* GetDeathBoxBySpawnPoint(SGAISpawnPoint* SpawnPoint);// 0x633de3fee041
	SGAICharacter* GetCoach();// 0x633ce3fee041
	Character* GetAICharacterBySpawnPoint(SGAISpawnPoint* SpawnPoint);// 0x633be3fee041
	void CheckLevelLoad();// 0x633ae3fee041
	void BeginCheckLevelLoad();// 0x6339e3fee041

--------------------------------
Class: UAHUDWidget_BigMap_GaugePoint.SGUserWidget.UserWidget.Widget.Visual.Object
	UMGSequencePlayer* PlayAnimationByName(FString AnimName, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x6343e3fee041
	WidgetAnimation* GetAnimationByName(FString AnimName);// 0x6342e3fee041

--------------------------------
Class: UAHUDWidget_BigMapBase.SGUserWidget.UserWidget.Widget.Visual.Object
	class Object[] Modules;//[Offset: 0x2e8, Size: 0x10]
	UABigMapModuleBase*[] LoadedModules;//[Offset: 0x2f8, Size: 0x10]
	enum CurTouchResponse;//[Offset: 0x308, Size: 0x1]
	MobileInputData[] MobileInputDataList;//[Offset: 0x310, Size: 0x10]
	void TouchUpdate(byte FingerIndex, out const Vector Location);// 0x634fe3fee041
	void OnLoadModuleCompelete2Lua();// 0x634ee3fee041
	void LoadSingleModule(class Object ModuleClass);// 0x634de3fee041
	void InputTouchHandle(byte FingerIndex, byte Type, out const Vector Location);// 0x634ce3fee041
	void InitModules();// 0x634be3fee041
	int GetPlayerInputDataListCount();// 0x634ae3fee041
	MobileInputData[] GetPlayerInputDataList();// 0x6349e3fee041
	void EndTouch(byte FingerIndex, out const Vector Location);// 0x6348e3fee041
	void ClearModuleReference();// 0x6347e3fee041
	void CheckUpTwoFingerState();// 0x6346e3fee041
	void ChangeTouchResponse(enum Type);// 0x6345e3fee041
	void BeginTouch(byte FingerIndex, out const Vector Location);// 0x6344e3fee041

--------------------------------
Class: UAHUDWidget_ChaseActivityInvMark.SGUserWidget.UserWidget.Widget.Visual.Object
	<Actor*,UAMobileHUDWidegt_ValuablesTips*> ValuablesTipsMap;//[Offset: 0x2c8, Size: 0x50]
	void UpdateActivityInventoryMarkWrapper(PanelWidget* PanelWidget, class UserWidget SubWidgetClass, Vector CorpseHeadOffset, float EffectDistance, LinearColor ColorOnVisible, LinearColor ColorOnInvisible, ChaseActivityInvMarkScaleInfo MinDistanceScale, ChaseActivityInvMarkScaleInfo MaxDistanceScale);// 0x6354e3fee041
	void UpdateActivityInventoryMark(PanelWidget* PanelWidget, class UserWidget SubWidgetClass, Vector CorpseHeadOffset, float EffectDistance, LinearColor ColorOnVisible, LinearColor ColorOnInvisible, ChaseActivityInvMarkScaleInfo MinDistanceScale, ChaseActivityInvMarkScaleInfo MaxDistanceScale);// 0x6353e3fee041
	bool IsSubWidgetUseable(Widget* Widget);// 0x6352e3fee041
	UserWidget* FindOrAddSubWidget(PanelWidget* PanelWidget, class UserWidget SubWidgetClass);// 0x6351e3fee041
	UserWidget* AddSubWidget(PanelWidget* PanelWidget, class UserWidget SubWidgetClass);// 0x6350e3fee041

--------------------------------
Class: ChaseActivityInvMarkScaleInfo
	float Distance;//[Offset: 0x0, Size: 0x4]
	float Scale;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: UAMobileHUDWidegt_ValuablesTips.SGUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* CanvasPanel;//[Offset: 0x2c8, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_Tips;//[Offset: 0x2d0, Size: 0x8]
	void SetValuablesTips(TraceableActorInfo InTraceableInfo);// 0x63ece3fee041

--------------------------------
Class: UAHUDWidget_ReplayPlayer.SGUserWidget.UserWidget.Widget.Visual.Object
	bool bEnableListenCharacters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]
	TextBlock* TimeText;//[Offset: 0x2c8, Size: 0x8]
	Slider* TimeSlider;//[Offset: 0x2d0, Size: 0x8]
	ComboBoxString* FollowCharacterComboBox;//[Offset: 0x2d8, Size: 0x8]
	float ReplayCurrentTime;//[Offset: 0x2e0, Size: 0x4]
	int ReplayCurrentMinutes;//[Offset: 0x2e4, Size: 0x4]
	int ReplayCurrentSeconds;//[Offset: 0x2e8, Size: 0x4]
	float ReplayTotalTime;//[Offset: 0x2ec, Size: 0x4]
	int ReplayTotalMinutes;//[Offset: 0x2f0, Size: 0x4]
	int ReplayTotalSeconds;//[Offset: 0x2f4, Size: 0x4]
	FString[] PlayerCharacterNames;//[Offset: 0x308, Size: 0x10]
	FString[] AICharacterNames;//[Offset: 0x328, Size: 0x10]
	void OnPlayerCharacterRemoved(int Index);// 0x635ee3fee041
	void OnPlayerCharacterAdded(SGCharacter* Character, int Index, FString Name);// 0x635de3fee041
	void OnCharactersUpdated();// 0x635ce3fee041
	void OnAICharacterRemoved(int Index);// 0x635be3fee041
	void OnAICharacterAdded(SGCharacter* Character, int Index, FString Name);// 0x635ae3fee041
	SGCharacter* GetSelectedCharacterByOption(FString Option);// 0x6359e3fee041
	SGCharacter* GetSelectedCharacter(ComboBoxString* InFollowCharacterComboBox);// 0x6358e3fee041
	SGCharacter* GetPlayerCharacter(int Index);// 0x6357e3fee041
	FString GetCharacterDisplayName(SGCharacter* Character);// 0x6356e3fee041
	SGCharacter* GetAICharacter(int Index);// 0x6355e3fee041

--------------------------------
Class: ComboBoxString.Widget.Visual.Object
	FString[] DefaultOptions;//[Offset: 0x128, Size: 0x10]
	FString SelectedOption;//[Offset: 0x138, Size: 0x10]
	ComboBoxStyle WidgetStyle;//[Offset: 0x148, Size: 0x420]
	TableRowStyle ItemStyle;//[Offset: 0x568, Size: 0x838]
	Margin ContentPadding;//[Offset: 0xda0, Size: 0x10]
	float MaxListHeight;//[Offset: 0xdb0, Size: 0x4]
	bool HasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb4, Size: 0x1]
	bool EnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb5, Size: 0x1]
	SlateFontInfo Font;//[Offset: 0xdb8, Size: 0x58]
	SlateColor ForegroundColor;//[Offset: 0xe10, Size: 0x28]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe38, Size: 0x1]
	delegate OnGenerateWidgetEvent;//[Offset: 0xe3c, Size: 0x10]
	delegate OnSelectionChanged;//[Offset: 0xe50, Size: 0x10]
	delegate OnOpening;//[Offset: 0xe60, Size: 0x10]
	void SetSelectedOption(FString Option);// 0x197ce3fee041
	void SetSelectedIndex(const int Index);// 0x197be3fee041
	bool RemoveOption(FString Option);// 0x197ae3fee041
	void RefreshOptions();// 0x1979e3fee041
	void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x1977e3fee041
	void OnOpeningEvent__DelegateSignature();// 0x1976e3fee041
	bool IsOpen();// 0x1975e3fee041
	FString GetSelectedOption();// 0x1974e3fee041
	int GetSelectedIndex();// 0x1973e3fee041
	int GetOptionCount();// 0x1972e3fee041
	FString GetOptionAtIndex(int Index);// 0x1971e3fee041
	int FindOptionIndex(FString Option);// 0x1970e3fee041
	void ClearSelection();// 0x196fe3fee041
	void ClearOptions();// 0x196ee3fee041
	void AddOption(FString Option);// 0x196de3fee041

--------------------------------
Class: ComboBoxStyle.SlateWidgetStyle
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x8, Size: 0x3e8]
	SlateSound PressedSlateSound;//[Offset: 0x3f0, Size: 0x18]
	SlateSound SelectionChangeSlateSound;//[Offset: 0x408, Size: 0x18]

--------------------------------
Class: ComboButtonStyle.SlateWidgetStyle
	ButtonStyle ButtonStyle;//[Offset: 0x8, Size: 0x298]
	SlateBrush DownArrowImage;//[Offset: 0x2a0, Size: 0x90]
	Vector2D ShadowOffset;//[Offset: 0x330, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x338, Size: 0x10]
	SlateBrush MenuBorderBrush;//[Offset: 0x348, Size: 0x90]
	Margin MenuBorderPadding;//[Offset: 0x3d8, Size: 0x10]

--------------------------------
Class: TableRowStyle.SlateWidgetStyle
	SlateBrush SelectorFocusedBrush;//[Offset: 0x8, Size: 0x90]
	SlateBrush ActiveHoveredBrush;//[Offset: 0x98, Size: 0x90]
	SlateBrush ActiveBrush;//[Offset: 0x128, Size: 0x90]
	SlateBrush InactiveHoveredBrush;//[Offset: 0x1b8, Size: 0x90]
	SlateBrush InactiveBrush;//[Offset: 0x248, Size: 0x90]
	SlateBrush EvenRowBackgroundHoveredBrush;//[Offset: 0x2d8, Size: 0x90]
	SlateBrush EvenRowBackgroundBrush;//[Offset: 0x368, Size: 0x90]
	SlateBrush OddRowBackgroundHoveredBrush;//[Offset: 0x3f8, Size: 0x90]
	SlateBrush OddRowBackgroundBrush;//[Offset: 0x488, Size: 0x90]
	SlateColor TextColor;//[Offset: 0x518, Size: 0x28]
	SlateColor SelectedTextColor;//[Offset: 0x540, Size: 0x28]
	SlateBrush DropIndicator_Above;//[Offset: 0x568, Size: 0x90]
	SlateBrush DropIndicator_Onto;//[Offset: 0x5f8, Size: 0x90]
	SlateBrush DropIndicator_Below;//[Offset: 0x688, Size: 0x90]
	SlateBrush ActiveHighlightedBrush;//[Offset: 0x718, Size: 0x90]
	SlateBrush InactiveHighlightedBrush;//[Offset: 0x7a8, Size: 0x90]

--------------------------------
Class: UAHUDWidget_ShootTest.SGUserWidget.UserWidget.Widget.Visual.Object
	FString[] WeaponNames;//[Offset: 0x2c8, Size: 0x10]
	SGInventory* Weapon;//[Offset: 0x2d8, Size: 0x8]
	bool bIsShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	int TargetShootCount;//[Offset: 0x2e4, Size: 0x4]
	int RealShootCount;//[Offset: 0x2e8, Size: 0x4]
	void TickShooting(float InDeltaTime);// 0x6367e3fee041
	void SetWeaponAttributes(out const UAWeaponAttributes WeaponAttributes);// 0x6366e3fee041
	void PostInitFinished();// 0x6365e3fee041
	void OnShootFinished();// 0x6364e3fee041
	void OnDoFire(float FireTime, out const SGFireRepInfo FireInfo);// 0x6363e3fee041
	void OnButtonStartClicked();// 0x6362e3fee041
	void OnButtonQuitClicked();// 0x6361e3fee041
	void NativeOnWeaponChanged();// 0x6360e3fee041
	UAWeaponAttributes GetWeaponAttributes();// 0x635fe3fee041

--------------------------------
Class: UAWeaponAttributes
	float BulletZeroFlyDistanceForWeaponAction;//[Offset: 0x0, Size: 0x4]
	float ZeroDropDistance;//[Offset: 0x4, Size: 0x4]
	float Accuracy;//[Offset: 0x8, Size: 0x4]
	float MoaX;//[Offset: 0xc, Size: 0x4]
	float MoaY;//[Offset: 0x10, Size: 0x4]
	float VerticalRecoil;//[Offset: 0x14, Size: 0x4]
	float HorizontalRecoil;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: UAInteractComponentBase.SGInteractComponentBase.ActorComponent.Object
	InteractInventoryInfo[] CostInventoryInfos;//[Offset: 0xf0, Size: 0x10]
	InteractInventoryInfo[] ObtainInventoryInfos;//[Offset: 0x100, Size: 0x10]
	bool bCheckCostBeforePopWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	delegate OnInteractiveSuccessful;//[Offset: 0x118, Size: 0x10]
	PlayerController*[] InteractCompletePlayers;//[Offset: 0x128, Size: 0x10]
	bool bInteractEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	int InteractCount;//[Offset: 0x13c, Size: 0x4]
	int RelevantID;//[Offset: 0x140, Size: 0x4]
	FString[] AIIDPrefixs;//[Offset: 0x148, Size: 0x10]
	void SetInteractEnable(bool bEnable);// 0x6370e3fee041
	void OnMultiCastReport();// 0x636fe3fee041
	bool ObtainInventory(SGCharacter* Character);// 0x636ee3fee041
	bool IsInventoryEnableCost(SGInventory* Inventory);// 0x636de3fee041
	bool GetInteractEnable();// 0x636ce3fee041
	void FillInventoryClass(out InteractInventoryInfo InteractInventoryInfo);// 0x636be3fee041
	void DoReport();// 0x636ae3fee041
	bool CostInventory(SGCharacter* Character);// 0x6369e3fee041
	bool CheckCostInventory(SGCharacter* Character);// 0x6368e3fee041

--------------------------------
Class: UAInventoryInitDataComponent.SGInventoryInitDataComponent.ActorComponent.Object
	bool bInitFromDataTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: UAInventoryQuestInfoComponent.ActorComponent.Object
	MFQuestBase* RelevantQuest;//[Offset: 0xc0, Size: 0x8]
	bool bDestroyWhenLoseOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	void SetRelevantQuest(MFQuestBase* QuestBase);// 0x6375e3fee041
	void OnOwnerCharacterDied(Character* DeadCharacter, Controller* Killer, DamageEventObject* DamageEventObject);// 0x6374e3fee041
	void OnInventoryRemoved(Character* OwnerCharacter);// 0x6373e3fee041
	void OnInventoryAdded(Character* OwnerCharacter);// 0x6372e3fee041
	MFQuestBase* GetRelevantQuest();// 0x6371e3fee041

--------------------------------
Class: UAIrrelevantAreaVolume.Volume.Brush.Actor.Object
	int AreaID;//[Offset: 0x318, Size: 0x4]

--------------------------------
Class: UAItemInteractComponent.UAInteractComponentBase.SGInteractComponentBase.ActorComponent.Object
	float InteractDistance;//[Offset: 0x158, Size: 0x4]
	bool bDestroyOnComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1]

--------------------------------
Class: UALightFadeComponent.ActorComponent.Object
	float DistanceOffest;//[Offset: 0xb8, Size: 0x4]
	float DefaultIntensity;//[Offset: 0xbc, Size: 0x4]

--------------------------------
Class: UALootCombinPickup.Actor.Object
	CombinPickupData[] CombinArray;//[Offset: 0x2e0, Size: 0x10]

--------------------------------
Class: CombinPickupData
	class UAPickup* PickupClass;//[Offset: 0x0, Size: 0x28]
	Vector LocationOffset;//[Offset: 0x28, Size: 0xc]
	Rotator RotatorOffset;//[Offset: 0x34, Size: 0xc]
	UAPickup* SpawnPickup;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: UAPickup.SGPickup.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x2e8, Size: 0x8]

--------------------------------
Class: UALootSubsystem.WorldSubsystem.Subsystem.Object
	<int,PylonPoint*> PylonPoints;//[Offset: 0x38, Size: 0x50]
	int MapID;//[Offset: 0x88, Size: 0x4]
	bool bDebugPickupInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	<IntPoint,InventoryContainer> ClientPickupableInventories;//[Offset: 0xa0, Size: 0x50]
	<SGInventory*,IntPoint> InventoryOldKeys;//[Offset: 0xf0, Size: 0x50]
	void RemovePickupableInventory(SGInventory* Inventory);// 0x637fe3fee041
	void RegiestPylonPoint(PylonPoint* PylonPoint);// 0x637ee3fee041
	void OnPickupableInventoryDestroyed(Actor* Actor);// 0x637de3fee041
	void OnInventoryUpdateDropPosition(SGInventory* Inventory);// 0x637ce3fee041
	void OnInventoryPickStateChanged(SGInventory* Inventory, bool bNewPickState);// 0x637be3fee041
	void OnInventoryBeginPlay(SGInventory* Inventory, enum InventoryType);// 0x637ae3fee041
	IntPoint GetPositionKey(Vector WorldLocation);// 0x6379e3fee041
	Actor*[] GetNearbyInventories(SGCharacter* SGCharacter, float DistanceSquared);// 0x6378e3fee041
	int GetMapID();// 0x6377e3fee041
	void AddPickupableInventory(SGInventory* Inventory);// 0x6376e3fee041

--------------------------------
Class: InventoryContainer
	SGInventory*[] InventoryArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UAMarkComponent.ActorComponent.Object
	float MarkRadius;//[Offset: 0xd4, Size: 0x4]
	float MaxMarkDistance;//[Offset: 0xd8, Size: 0x4]
	float MarkPreparationTime;//[Offset: 0xdc, Size: 0x4]
	float MarkContinueTime;//[Offset: 0xe0, Size: 0x4]
	float CurDistance;//[Offset: 0xe4, Size: 0x4]
	void ServerMarkObject(const Vector StartPoint, const Vector Dir);// 0x6381e3fee041
	int GetCurPointDistance();// 0x6380e3fee041

--------------------------------
Class: UAMission.SGMission.MFMission.Object

--------------------------------
Class: UAMissionAction.MFMissionAction.MFMissionNode.Object

--------------------------------
Class: UAMissionAction_AddAIToTeam.UAMissionAction.MFMissionAction.MFMissionNode.Object
	MFGlobalEventParameterTag RelatedTargetTag;//[Offset: 0x40, Size: 0x8]
	enum[] RelatedTargetTypes;//[Offset: 0x48, Size: 0x10]
	enum[] FactionTypes;//[Offset: 0x58, Size: 0x10]
	int AIID;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: UAMissionAction_BroadcastOnGameHUD.UAMissionAction.MFMissionAction.MFMissionNode.Object
	MFGlobalEventParameterTag RelatedTargetTag;//[Offset: 0x40, Size: 0x8]
	enum[] RelatedTargetTypes;//[Offset: 0x48, Size: 0x10]
	BroadcastOnGameHUDConfig[] GameHUDConfigs;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: UAMissionAction_ChangeDoorType.UAMissionAction.MFMissionAction.MFMissionNode.Object
	MissionActorReference DoorActor;//[Offset: 0x40, Size: 0x18]
	enum Type;//[Offset: 0x58, Size: 0x1]
	void OnLevelAddToWorld(Level* Level, World* World);// 0x6382e3fee041

--------------------------------
Class: UAMissionAction_CompleteEvent_G.UAMissionAction.MFMissionAction.MFMissionNode.Object

--------------------------------
Class: UAMissionAction_DeleteActor.UAMissionAction.MFMissionAction.MFMissionNode.Object
	MissionActorReference[] DeleteActors;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: UAMissionAction_EscapeVolumState.UAMissionAction.MFMissionAction.MFMissionNode.Object
	MissionActorReference EscapeVolume;//[Offset: 0x40, Size: 0x18]
	enum TargetState;//[Offset: 0x58, Size: 0x1]

--------------------------------
Class: UAMissionAction_GiveItem.UAMissionAction.MFMissionAction.MFMissionNode.Object
	MFGlobalEventParameterTag RelatedTargetTag;//[Offset: 0x40, Size: 0x8]
	enum[] RelatedTargetTypes;//[Offset: 0x48, Size: 0x10]
	MissionActionGiveItemInfo[] GiveItemInfos;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: MissionActionGiveItemInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int MinStackCount;//[Offset: 0x4, Size: 0x4]
	int MaxStackCount;//[Offset: 0x8, Size: 0x4]
	class SGInventory* InventoryClass;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: UAMissionAction_LetVolumeInteractable.UAMissionAction.MFMissionAction.MFMissionNode.Object
	int[] MapIDs;//[Offset: 0x40, Size: 0x10]
	FString[] VolumeNames;//[Offset: 0x50, Size: 0x10]
	enum OperatorType;//[Offset: 0x60, Size: 0x1]
	enum MarkType;//[Offset: 0x61, Size: 0x1]
	int ConfigId;//[Offset: 0x64, Size: 0x4]
	float ScanningInterval;//[Offset: 0x68, Size: 0x4]
	bool bEnterVolumeAutoComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	UserWidgetPopInfo UserWidgetPopInfo;//[Offset: 0x70, Size: 0x58]
	bool bCheckCostBeforePopWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	InteractInventoryInfo[] CostInventoryInfos;//[Offset: 0xd0, Size: 0x10]
	InteractInventoryInfo[] ObtainInventoryInfos;//[Offset: 0xe0, Size: 0x10]
	SGVolume*[] ValidVolumes;//[Offset: 0xf0, Size: 0x10]

--------------------------------
Class: UAMissionAction_ModifyEscapePoint.UAMissionAction.MFMissionAction.MFMissionNode.Object
	TimerHandle TickTimerHandle;//[Offset: 0x40, Size: 0x8]
	MFGlobalEventParameterTag RelatedTargetTag;//[Offset: 0x48, Size: 0x8]
	enum[] RelatedTargetTypes;//[Offset: 0x50, Size: 0x10]
	bool bAddEscapePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int RandomEscapePoint;//[Offset: 0x64, Size: 0x4]
	MissionActionRandomEscapePoint[] RandomEscapePointIDs;//[Offset: 0x68, Size: 0x10]
	int[] EscapePointIDs;//[Offset: 0x78, Size: 0x10]
	bool bCheckEscapePreset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	FString[] EscapePresetNames;//[Offset: 0x90, Size: 0x10]
	float DelayTime;//[Offset: 0xa0, Size: 0x4]
	void OnTimer(SGCharacter* RelatedCharacter);// 0x6383e3fee041

--------------------------------
Class: MissionActionRandomEscapePoint
	int EscapePointID;//[Offset: 0x0, Size: 0x4]
	int Weight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: UAMissionAction_ModifyTraceableActor.UAMissionAction.MFMissionAction.MFMissionNode.Object
	MFGlobalEventParameterTag RelatedTargetTag;//[Offset: 0x40, Size: 0x8]
	enum[] RelatedTargetTypes;//[Offset: 0x48, Size: 0x10]
	MissionActionAICharacterMarkableInfo[] AICharacterMarkables;//[Offset: 0x58, Size: 0x10]
	MissionActionInventoryMarkableInfo[] InventoryMarkables;//[Offset: 0x68, Size: 0x10]
	MissionActionVolumeMarkableInfo[] VolumeMarkables;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: MissionActionAICharacterMarkableInfo
	bool bShowTraceableActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	MFGlobalEventParameterTag AICharacterTag;//[Offset: 0x4, Size: 0x8]
	int64 AIID;//[Offset: 0x10, Size: 0x8]
	enum OperatorType;//[Offset: 0x18, Size: 0x1]
	enum SpawnReason;//[Offset: 0x19, Size: 0x1]
	enum MarkType;//[Offset: 0x1a, Size: 0x1]
	int ConfigId;//[Offset: 0x1c, Size: 0x4]
	float ScanningInterval;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: MissionActionInventoryMarkableInfo
	bool bShowTraceableActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	MissionActorReference SpawnVolumeActor;//[Offset: 0x8, Size: 0x18]
	MFGlobalEventParameterTag SpawnVolumeTag;//[Offset: 0x20, Size: 0x8]
	bool bNotCharacterOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	MFGlobalEventParameterTag InventoryTag;//[Offset: 0x2c, Size: 0x8]
	int ItemID;//[Offset: 0x34, Size: 0x4]
	enum OperatorType;//[Offset: 0x38, Size: 0x1]
	enum MarkType;//[Offset: 0x39, Size: 0x1]
	int ConfigId;//[Offset: 0x3c, Size: 0x4]
	float ScanningInterval;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MissionActionVolumeMarkableInfo
	bool bShowTraceableActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int[] SpawnedInventories;//[Offset: 0x8, Size: 0x10]
	MFGlobalEventParameterTag VolumeTag;//[Offset: 0x18, Size: 0x8]
	int VolumeID;//[Offset: 0x20, Size: 0x4]
	enum OperatorType;//[Offset: 0x24, Size: 0x1]
	enum MarkType;//[Offset: 0x25, Size: 0x1]
	int ConfigId;//[Offset: 0x28, Size: 0x4]
	float ScanningInterval;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: UAMissionAction_RecBrilliantTime.UAMissionAction.MFMissionAction.MFMissionNode.Object
	MFGlobalEventParameterTag RelatedTargetTag;//[Offset: 0x40, Size: 0x8]
	int TimeForwardOffsetMilliseconds;//[Offset: 0x48, Size: 0x4]
	int TimeBackwardOffsetMilliseconds;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: UAMissionAction_RelevantToActors.UAMissionAction.MFMissionAction.MFMissionNode.Object
	Actor*[] RelatedTargets;//[Offset: 0x40, Size: 0x10]
	MissionActionRelevantToInteract RelevantToInteract;//[Offset: 0x50, Size: 0x20]
	MissionActionRelevantToVolume RelevantToVolume;//[Offset: 0x70, Size: 0x20]
	MissionActionRelevantToInventory RelevantToInventory;//[Offset: 0x90, Size: 0x20]
	MissionActionRelevantToAI RelevantToAI;//[Offset: 0xb0, Size: 0x20]
	<SGCharacter*,MissionActionRelevantToInteractActors> CharacterRelevantToInteractActorsMap;//[Offset: 0xd0, Size: 0x50]
	<SGCharacter*,MissionActionRelevantToInventories> CharacterRelevantToInventoriesMap;//[Offset: 0x120, Size: 0x50]
	<SGCharacter*,MissionActionRelevantToAICharacters> CharacterRelevantToAICharactersMap;//[Offset: 0x170, Size: 0x50]
	void OnKilled(MFGlobalEventTag InEventTag, out const GlobalEventMessage_Killed InMessage);// 0x638ae3fee041
	void OnInteract(MFGlobalEventTag InEventTag, out const GlobalEventMessage_Interact InMessage);// 0x6389e3fee041
	void OnActorDestroyed(Actor* DestroyedActor);// 0x6388e3fee041
	void ExecuteRelevantToVolume(SGCharacter* SGCharacter, UAPlayerStateTraceComponent* PlayerStateTraceComponent);// 0x6387e3fee041
	void ExecuteRelevantToInventory(SGCharacter* SGCharacter, UAPlayerStateTraceComponent* PlayerStateTraceComponent);// 0x6386e3fee041
	void ExecuteRelevantToInteract(SGCharacter* SGCharacter, UAPlayerStateTraceComponent* PlayerStateTraceComponent);// 0x6385e3fee041
	void ExecuteRelevantToAI(SGCharacter* SGCharacter, UAPlayerStateTraceComponent* PlayerStateTraceComponent);// 0x6384e3fee041

--------------------------------
Class: GlobalEventMessage_Killed
	Controller* Instigator;//[Offset: 0x0, Size: 0x8]
	Controller* KilledPlayer;//[Offset: 0x8, Size: 0x8]
	Actor* KillerWeapon;//[Offset: 0x10, Size: 0x8]
	float KillDistance;//[Offset: 0x18, Size: 0x4]
	enum EnduranceType;//[Offset: 0x1c, Size: 0x1]
	DamageEventObject* DamageInfo;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: GlobalEventMessage_Interact
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	Actor* InteractActor;//[Offset: 0x8, Size: 0x8]
	enum InteractEventType;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MissionActionRelevantToInteract
	int[] InteractItemIDs;//[Offset: 0x0, Size: 0x10]
	enum OperatorType;//[Offset: 0x10, Size: 0x1]
	enum MarkType;//[Offset: 0x11, Size: 0x1]
	int ConfigId;//[Offset: 0x14, Size: 0x4]
	float ScanningInterval;//[Offset: 0x18, Size: 0x4]
	int FailedInteractNum;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: MissionActionRelevantToVolume
	int[] VolumeItemIDs;//[Offset: 0x0, Size: 0x10]
	enum OperatorType;//[Offset: 0x10, Size: 0x1]
	enum MarkType;//[Offset: 0x11, Size: 0x1]
	int ConfigId;//[Offset: 0x14, Size: 0x4]
	float ScanningInterval;//[Offset: 0x18, Size: 0x4]
	int FailedInteractNum;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: MissionActionRelevantToInventory
	int[] InventoryItemIDs;//[Offset: 0x0, Size: 0x10]
	enum OperatorType;//[Offset: 0x10, Size: 0x1]
	enum MarkType;//[Offset: 0x11, Size: 0x1]
	int ConfigId;//[Offset: 0x14, Size: 0x4]
	float ScanningInterval;//[Offset: 0x18, Size: 0x4]
	int FailedInventoryNum;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: MissionActionRelevantToAI
	int[] AIIDs;//[Offset: 0x0, Size: 0x10]
	enum OperatorType;//[Offset: 0x10, Size: 0x1]
	enum MarkType;//[Offset: 0x11, Size: 0x1]
	int ConfigId;//[Offset: 0x14, Size: 0x4]
	float ScanningInterval;//[Offset: 0x18, Size: 0x4]
	int FailedAINum;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: MissionActionRelevantToInteractActors
	Actor*[] InteractActors;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MissionActionRelevantToInventories
	SGInventory*[] Inventories;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MissionActionRelevantToAICharacters
	SGAICharacter*[] AICharacters;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UAMissionAction_TimeLimitCountDown.UAMissionAction.MFMissionAction.MFMissionNode.Object
	<MFMissionFlowComponent*,TimerHandle> Instigator2TimerHandleMap;//[Offset: 0x40, Size: 0x50]
	float CountDownStartSecond;//[Offset: 0x90, Size: 0x4]
	Actor*[] TargetActors;//[Offset: 0x98, Size: 0x10]
	int[] InteractItemIDs;//[Offset: 0xa8, Size: 0x10]
	int[] VolumeItemIDs;//[Offset: 0xb8, Size: 0x10]
	int[] InventoryItemIDs;//[Offset: 0xc8, Size: 0x10]
	int[] AIIDs;//[Offset: 0xd8, Size: 0x10]

--------------------------------
Class: UAMissionCondition.MFMissionCondition.MFMissionNode.Object

--------------------------------
Class: UAMissionCondition_ActivationTime.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	enum CompareType;//[Offset: 0x48, Size: 0x1]
	int MinTime;//[Offset: 0x4c, Size: 0x4]
	int MaxTime;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: UAMissionCondition_AIID.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckTargetTag;//[Offset: 0x48, Size: 0x8]
	int64[] AIIDPrefixs;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: UAMissionCondition_AllEquipValue.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckTargetTag;//[Offset: 0x48, Size: 0x8]
	int MinCharacterAllEquipValue;//[Offset: 0x50, Size: 0x4]
	int MaxCharacterAllEquipValue;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: UAMissionCondition_ArmorType.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckArmorTag;//[Offset: 0x48, Size: 0x8]
	enum[] ArmorTypes;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: UAMissionCondition_Attribute.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckTargetTag;//[Offset: 0x48, Size: 0x8]
	MissionConditionAttributeInfo*[] AttributeInfos;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MissionConditionAttributeInfo.Object
	bool bUseCustomAttribute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	GameplayAttribute Attribute;//[Offset: 0x30, Size: 0x38]
	enum CustomAttribute;//[Offset: 0x68, Size: 0x1]
	float MinValue;//[Offset: 0x6c, Size: 0x4]
	float MaxValue;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: UAMissionCondition_CharacterStatus.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	enum CharacterType;//[Offset: 0x48, Size: 0x1]
	enum CharacterStatus;//[Offset: 0x49, Size: 0x1]
	MFGlobalEventParameterTag CheckTargetTag;//[Offset: 0x4c, Size: 0x8]
	int[] AIIDs;//[Offset: 0x58, Size: 0x10]
	FString[] AreaIDs;//[Offset: 0x68, Size: 0x10]
	bool CheckAreaIDs();// 0x638ce3fee041
	bool CheckAIIDs();// 0x638be3fee041

--------------------------------
Class: UAMissionCondition_CharacterType.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckTargetTag;//[Offset: 0x48, Size: 0x8]
	enum[] CharacterTypes;//[Offset: 0x50, Size: 0x10]
	enum[] GetCharacterTypes();// 0x638de3fee041

--------------------------------
Class: UAMissionCondition_CurrentTODTime.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MissionConditionTimeOfDay StartTime;//[Offset: 0x48, Size: 0xc]
	MissionConditionTimeOfDay EndTime;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MissionConditionTimeOfDay
	int Hour;//[Offset: 0x0, Size: 0x4]
	int Minute;//[Offset: 0x4, Size: 0x4]
	int Second;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: UAMissionCondition_DamageInfo.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckDamageInfoTag;//[Offset: 0x48, Size: 0x8]
	MissionConditionDamageInfoParamBase*[] DamageInfoParams;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MissionConditionDamageInfoParamBase.Object

--------------------------------
Class: UAMissionCondition_Distance.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag SourceActorTag;//[Offset: 0x48, Size: 0x8]
	MFGlobalEventParameterTag DestActorTag;//[Offset: 0x50, Size: 0x8]
	float MinDistance;//[Offset: 0x58, Size: 0x4]
	float MaxDistance;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: UAMissionCondition_EnduranceType.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckEnduranceTag;//[Offset: 0x48, Size: 0x8]
	enum[] EnduranceTypes;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: UAMissionCondition_Item.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckItemTag;//[Offset: 0x48, Size: 0x8]
	MissionConditionItemParamBase*[] ItemParams;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MissionConditionItemParamBase.Object

--------------------------------
Class: UAMissionCondition_EquipItem.UAMissionCondition_Item.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckTargetTag;//[Offset: 0x60, Size: 0x8]
	bool bCheckTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	enum CheckItemType;//[Offset: 0x69, Size: 0x1]

--------------------------------
Class: UAMissionCondition_EscapeVolume.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckEscapeVolumeTag;//[Offset: 0x48, Size: 0x8]
	int[] EscapePointIDs;//[Offset: 0x50, Size: 0x10]
	MissionTraceableParam TraceableParam;//[Offset: 0x60, Size: 0xc]

--------------------------------
Class: MissionTraceableParam
	enum OperatorType;//[Offset: 0x0, Size: 0x1]
	enum MarkType;//[Offset: 0x1, Size: 0x1]
	int ConfigId;//[Offset: 0x4, Size: 0x4]
	float ScanningInterval;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: UAMissionCondition_FactionType.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckTargetTag;//[Offset: 0x48, Size: 0x8]
	enum[] CheckArr;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: UAMissionCondition_GameplayEffect.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckTargetTag;//[Offset: 0x48, Size: 0x8]
	MissionConditionGameplayTagInfo*[] GameplayTagInfos;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MissionConditionGameplayTagInfo.Object
	GameplayTagContainer TagContainer;//[Offset: 0x28, Size: 0x20]
	enum CheckType;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: UAMissionCondition_InSameTeam.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag ATag;//[Offset: 0x48, Size: 0x8]
	MFGlobalEventParameterTag BTag;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: UAMissionCondition_PlayerEndGameType.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckPlayerEndGameTypeTag;//[Offset: 0x48, Size: 0x8]
	enum[] PlayerEndGameTypes;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: UAMissionCondition_PlayerLevel.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckTargetTag;//[Offset: 0x48, Size: 0x8]
	int MinLevel;//[Offset: 0x50, Size: 0x4]
	int MaxLevel;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: UAMissionCondition_PlayModeId.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	int[] ModeIDArray;//[Offset: 0x48, Size: 0x10]
	int[] SubModeIDArray;//[Offset: 0x58, Size: 0x10]
	int[] MapIDArray;//[Offset: 0x68, Size: 0x10]
	int[] SpecialIDArray;//[Offset: 0x78, Size: 0x10]
	int[] DifficultyArray;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: UAMissionCondition_RandomProbability.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	float ProbabilityPercent;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: UAMissionCondition_Self.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag ATag;//[Offset: 0x48, Size: 0x8]
	MFGlobalEventParameterTag BTag;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: UAMissionCondition_SpawnAIEvent.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	enum CheckType;//[Offset: 0x48, Size: 0x1]
	FString[] EventStrList;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: UAMissionCondition_StayVolume.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	<Actor*,bool> InstigatorTrackedVolume;//[Offset: 0x50, Size: 0x50]
	SGVolume*[] ValidVolumes;//[Offset: 0xa0, Size: 0x10]
	MFGlobalEventParameterTag CheckTargetTag;//[Offset: 0xb0, Size: 0x8]
	int[] ValidVolumeIDs;//[Offset: 0xb8, Size: 0x10]
	FString[] ValidVolumeNames;//[Offset: 0xc8, Size: 0x10]
	bool bTraceable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	MissionTraceableParam TraceableParam;//[Offset: 0xdc, Size: 0xc]

--------------------------------
Class: UAMissionCondition_TeamInfo.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckTargetTag;//[Offset: 0x48, Size: 0x8]
	enum TeamInfoType;//[Offset: 0x50, Size: 0x1]
	FString StringValue1;//[Offset: 0x58, Size: 0x10]
	FString StringValue2;//[Offset: 0x68, Size: 0x10]
	bool IsPassCheck(Actor* Actor);// 0x638ee3fee041

--------------------------------
Class: UAMissionCondition_TimeLimit.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckInstigatorTag;//[Offset: 0x48, Size: 0x8]
	enum TimeLimitType;//[Offset: 0x50, Size: 0x1]
	int TimeLimitSeconds;//[Offset: 0x54, Size: 0x4]
	int TimeRecordCount;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: UAMissionCondition_Trigger.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckTriggerTag;//[Offset: 0x48, Size: 0x8]
	uint64[] SpawnItemIDs;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: UAMissionCondition_UseInventoryPhase.UAMissionCondition.MFMissionCondition.MFMissionNode.Object
	MFGlobalEventParameterTag CheckUseInventoryPhaseTag;//[Offset: 0x48, Size: 0x8]
	enum UseInventoryPhase;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: UAMissionItemSpawnPoint.NavigationObjectBase.Actor.Object
	int SpawnPointID;//[Offset: 0x304, Size: 0x4]
	Character* CurrentInstigator;//[Offset: 0x308, Size: 0x8]
	class ActorComponent[] AdditionComponents;//[Offset: 0x310, Size: 0x10]

--------------------------------
Class: UAMissionNodeInterface.Interface.Object

--------------------------------
Class: UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object

--------------------------------
Class: UAMissionObjAction_Continuity.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	PlayerController*[] ProcessedPCs;//[Offset: 0xb0, Size: 0x10]
	Actor*[] Instigators;//[Offset: 0xc0, Size: 0x10]
	void ProcessForPlayer(PlayerController* PC);// 0x638fe3fee041

--------------------------------
Class: UAMissionObjAction_AddEscapePoint.UAMissionObjAction_Continuity.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	int RandomEscapePoint;//[Offset: 0xd0, Size: 0x4]
	MissionActionRandomEscapePoint[] RandomEscapePointIDs;//[Offset: 0xd8, Size: 0x10]
	<Actor*,RandomCacheStruct> RandomCache;//[Offset: 0xe8, Size: 0x50]

--------------------------------
Class: RandomCacheStruct
	int[] EscapePoints;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UAMissionObjAction_DistributeMission.UAMissionObjAction_Continuity.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	enum DistributeMissionType;//[Offset: 0xd0, Size: 0x1]
	bool bUseRandomMissionable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	int MissionFlowID;//[Offset: 0xd4, Size: 0x4]
	DataTable* RandomMissionTable;//[Offset: 0xd8, Size: 0x8]
	<Actor*,int> MissionFlowMap;//[Offset: 0xe0, Size: 0x50]
	void DistributeMissionFlow(Character* Character, int InMissionFlowID);// 0x6390e3fee041

--------------------------------
Class: UAMissionObjAction_DoorState.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	MissionActorReference DoorActor;//[Offset: 0xb0, Size: 0x18]
	enum TargetState;//[Offset: 0xc8, Size: 0x1]
	bool bDisableOnComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	void OnDoorMoveFinish(SGDoorBase* Door, enum State);// 0x6391e3fee041

--------------------------------
Class: UAMissionObjAction_RdmPlayerStart.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	enum FactionType;//[Offset: 0xb0, Size: 0x1]
	int[] GroupIndexArr;//[Offset: 0xb8, Size: 0x10]

--------------------------------
Class: UAMissionObjAction_Scene.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	FString LevelToAdd;//[Offset: 0xb0, Size: 0x10]
	LevelStreaming* LevelStreaming;//[Offset: 0xc0, Size: 0x8]
	void OnLevelAddToWorld(Level* Level, World* World);// 0x6392e3fee041

--------------------------------
Class: UAMissionObjAction_TakeOutLimit.UAMissionObjAction_Continuity.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	enum LimitType;//[Offset: 0xd0, Size: 0x1]
	enum OrderTakeInSourceType;//[Offset: 0xd1, Size: 0x1]

--------------------------------
Class: UAMissionObjective_ActivateLootPoint.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	<int64,MissionObjectiveActivateLootPointConfigs> ActivateLootPointConfigs;//[Offset: 0xb0, Size: 0x50]

--------------------------------
Class: MissionObjectiveActivateLootPointConfigs
	int[] ForceActivateLootPoints;//[Offset: 0x0, Size: 0x10]
	MissionObjectiveActivateLootPointConfig[] ActivateConfigs;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MissionObjectiveActivateLootPointConfig
	int LootPointType;//[Offset: 0x0, Size: 0x4]
	int ActivateMinCount;//[Offset: 0x4, Size: 0x4]
	int ActivateMaxCount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: UAMissionObjective_ActivateNode.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object

--------------------------------
Class: UAMissionObjective_AttachPositionChanged.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	void OnSwitchWeaponCompleted(MFGlobalEventTag InEventTag, out const GlobalEventMessage_SwitchWeaponCompleted InMessage);// 0x6394e3fee041
	void OnAttachPositionChanged(MFGlobalEventTag InEventTag, out const GlobalEventMessage_AttachPositionChanged InMessage);// 0x6393e3fee041

--------------------------------
Class: GlobalEventMessage_SwitchWeaponCompleted
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	SGInventory* Inventory;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GlobalEventMessage_AttachPositionChanged
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	SGInventory* Inventory;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: UAMissionObjective_AttractAI.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	void OnAttractAI(MFGlobalEventTag InEventTag, out const GlobalEventMessage_AttractAI InMessage);// 0x6395e3fee041

--------------------------------
Class: GlobalEventMessage_AttractAI
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	Actor* Trigger;//[Offset: 0x8, Size: 0x8]
	Character* AttractAI;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: UAMissionObjective_BroadcastOnGameHUD.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	enum[] RelatedTargetTypes;//[Offset: 0xb0, Size: 0x10]
	BroadcastOnGameHUDConfig[] GameHUDConfigs;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: UAMissionObjective_ClearArea.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	TimerHandle TickTimerHandle;//[Offset: 0xb0, Size: 0x8]
	UAVolumeStatisComponent* VolumeStatisComponent;//[Offset: 0xb8, Size: 0x8]
	enum[] CharacterTypes;//[Offset: 0xc0, Size: 0x10]
	int64 VolumeID;//[Offset: 0xd0, Size: 0x8]
	void OnVolumeActorChanged(MFGlobalEventTag InEventTag, out const GlobalEventMessage_VolumeActorChanged InMessage);// 0x6398e3fee041
	void OnTimerTick();// 0x6397e3fee041
	void OnKilled(MFGlobalEventTag InEventTag, out const GlobalEventMessage_Killed InMessage);// 0x6396e3fee041

--------------------------------
Class: GlobalEventMessage_VolumeActorChanged.GlobalEventMessageBase
	MFGlobalEventTag EventTag;//[Offset: 0x0, Size: 0x8]
	int64 VolumeID;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GlobalEventMessageBase

--------------------------------
Class: UAMissionObjective_CollectItem.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	bool bAddProgressWhenActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bChangeCountsToValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	<Character*,MissionObjectiveCollectedItems> CharacterCollectedItemsMap;//[Offset: 0xb8, Size: 0x50]
	void OnPrePlayerFinishGame(MFGlobalEventTag InEventTag, out const GlobalEventMessage_PrePlayerFinishGame InMessage);// 0x639fe3fee041
	void OnKilled(MFGlobalEventTag InEventTag, out const GlobalEventMessage_Killed InMessage);// 0x639ee3fee041
	void OnInventoryRemoved(MFGlobalEventTag InEventTag, out const GlobalEventMessage_InventoryRemoved InMessage);// 0x639de3fee041
	void OnInventoryAdded(MFGlobalEventTag InEventTag, out const GlobalEventMessage_InventoryAdded InMessage);// 0x639ce3fee041
	bool IsCollectingMissionInventory(Character* Character);// 0x639be3fee041
	Actor* GetKilledInstigator(Controller* KilledPlayer);// 0x639ae3fee041
	void CheckLoseMissionInventory(SGCharacter* SGCharacter, SGMissionFlowComponent* MissionFlowComponent);// 0x6399e3fee041

--------------------------------
Class: GlobalEventMessage_PrePlayerFinishGame
	PlayerController* Instigator;//[Offset: 0x0, Size: 0x8]
	enum EndGameType;//[Offset: 0x8, Size: 0x1]
	Actor* EscapeVolume;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: GlobalEventMessage_InventoryRemoved
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	SGInventory* Inventory;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GlobalEventMessage_InventoryAdded
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	SGInventory* Inventory;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MissionObjectiveCollectedItems
	SGInventory*[] Inventories;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UAMissionObjective_DistributeMission.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	enum[] RelatedTargetTypes;//[Offset: 0xb0, Size: 0x10]
	enum DistributeMissionType;//[Offset: 0xc0, Size: 0x1]
	bool bUseRandomMissionable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	int MissionFlowID;//[Offset: 0xc4, Size: 0x4]
	DataTable* RandomMissionTable;//[Offset: 0xc8, Size: 0x8]
	SGTeamInfo*[] TeamInfoDistributeMissions;//[Offset: 0xd8, Size: 0x10]
	enum[] PlayerTeamTypeDistributeMissions;//[Offset: 0xe8, Size: 0x10]
	void DistributeMissionFlow(Character* Character, int MissionFlowID);// 0x63a0e3fee041

--------------------------------
Class: UAMissionObjective_EscapeMap.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	void OnPrePlayerFinishGame(MFGlobalEventTag InEventTag, out const GlobalEventMessage_PrePlayerFinishGame InMessage);// 0x63a1e3fee041

--------------------------------
Class: UAMissionObjective_Escort.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	void OnPrePlayerFinishGame(MFGlobalEventTag InEventTag, out const GlobalEventMessage_PrePlayerFinishGame InMessage);// 0x63a2e3fee041

--------------------------------
Class: UAMissionObjective_GameplayEffectApplied.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	void OnGameplayEffectApplied(MFGlobalEventTag InEventTag, out const GlobalEventMessage_GameplayEffectApplied InMessage);// 0x63a3e3fee041

--------------------------------
Class: GlobalEventMessage_GameplayEffectApplied
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	enum EnduranceType;//[Offset: 0x8, Size: 0x1]
	enum GameEffectType;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: UAMissionObjective_GuardAI.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	FName[] GuardAIIDList;//[Offset: 0xb0, Size: 0x10]
	void OnKilled(MFGlobalEventTag InEventTag, out const GlobalEventMessage_Killed InMessage);// 0x63a5e3fee041
	void OnAIEscaped(MFGlobalEventTag InEventTag, out const GlobalEventMessage_AIEscaped InMessage);// 0x63a4e3fee041

--------------------------------
Class: GlobalEventMessage_AIEscaped
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	Actor* EscapeVolume;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: UAMissionObjective_HitTarget.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	void OnTakeDamage(MFGlobalEventTag InEventTag, out const GlobalEventMessage_HitTarget InMessage);// 0x63a6e3fee041

--------------------------------
Class: GlobalEventMessage_HitTarget
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	Character* DamageTakePlayer;//[Offset: 0x8, Size: 0x8]
	Actor* DamageCauser;//[Offset: 0x10, Size: 0x8]
	enum ArmorType;//[Offset: 0x18, Size: 0x1]
	DamageEventObject* DamageInfo;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: UAMissionObjective_Interact.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	enum InteractEventType;//[Offset: 0xb0, Size: 0x1]
	bool bCheckVolumeID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	int[] ValidVolumeIDs;//[Offset: 0xb8, Size: 0x10]
	bool bCheckVolumeName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	FString[] ValidVolumeNames;//[Offset: 0xd0, Size: 0x10]
	<Character*,MissionObjectiveInteractTargets> CharacterInteractTargetsMap;//[Offset: 0xe0, Size: 0x50]
	void RemoveInteractTargets(Character* Character, Actor* InteractTarget);// 0x63a9e3fee041
	void OnInteract(MFGlobalEventTag InEventTag, out const GlobalEventMessage_Interact InMessage);// 0x63a8e3fee041
	void AddInteractTargets(Character* Character, Actor* InteractTarget);// 0x63a7e3fee041

--------------------------------
Class: MissionObjectiveInteractTargets
	Actor*[] InteractTargets;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UAMissionObjective_InventoryAdded.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	void OnInventoryAdded(MFGlobalEventTag InEventTag, out const GlobalEventMessage_InventoryAdded InMessage);// 0x63aae3fee041

--------------------------------
Class: UAMissionObjective_InventoryRemoved.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	void OnInventoryRemoved(MFGlobalEventTag InEventTag, out const GlobalEventMessage_InventoryRemoved InMessage);// 0x63abe3fee041

--------------------------------
Class: UAMissionObjective_KillTarget.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	FName[] KillAIIDList;//[Offset: 0xb0, Size: 0x10]
	void OnKilled(MFGlobalEventTag InEventTag, out const GlobalEventMessage_Killed InMessage);// 0x63ade3fee041
	void OnAIEscaped(MFGlobalEventTag InEventTag, out const GlobalEventMessage_AIEscaped InMessage);// 0x63ace3fee041

--------------------------------
Class: UAMissionObjective_LootContainer.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	void OnLootContainer(MFGlobalEventTag InEventTag, out const GlobalEventMessage_LootContainer InMessage);// 0x63aee3fee041

--------------------------------
Class: GlobalEventMessage_LootContainer
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	SGInventory* Inventory;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: UAMissionObjective_OrderPlayerStart.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	enum FactionType;//[Offset: 0xb0, Size: 0x1]
	int GroupIndex;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: UAMissionObjective_PlayerStartGame.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	void OnPlayerStartGame(PlayerController* PlayerController);// 0x63afe3fee041

--------------------------------
Class: UAMissionObjective_RandTimeRange.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	TimerHandle TickTimerHandle;//[Offset: 0xb0, Size: 0x8]
	enum TimerType;//[Offset: 0xb8, Size: 0x1]
	MissionConditionTimeOfDay StartTime;//[Offset: 0xbc, Size: 0xc]
	MissionConditionTimeOfDay EndTime;//[Offset: 0xc8, Size: 0xc]
	void OnTimerTick();// 0x63b1e3fee041
	void OnGameBegin(MFGlobalEventTag InEventTag, out const GlobalEventMessage_GameBegin InMessage);// 0x63b0e3fee041

--------------------------------
Class: GlobalEventMessage_GameBegin.GlobalEventMessageBase
	MFGlobalEventTag EventTag;//[Offset: 0x0, Size: 0x8]
	GameState* Instigator;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: UAMissionObjective_ReadyToPlay.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	void OnReadyToPlay(MFGlobalEventTag InEventTag, out const GlobalEventMessage_ReadyToPlay InMessage);// 0x63b2e3fee041

--------------------------------
Class: GlobalEventMessage_ReadyToPlay
	Character* Instigator;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: UAMissionObjective_RecKillTime.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	int TimeBetweenDamageSeconds;//[Offset: 0xb0, Size: 0x4]
	void OnTakeDamage(MFGlobalEventTag InEventTag, out const GlobalEventMessage_HitTarget InMessage);// 0x63b4e3fee041
	void OnKilled(MFGlobalEventTag InEventTag, out const GlobalEventMessage_Killed InMessage);// 0x63b3e3fee041

--------------------------------
Class: UAMissionObjective_RecLootTime.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	int MinLootItemTotalValue;//[Offset: 0xb0, Size: 0x4]
	bool bOnlyFromPMC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	int MaxLootTimeSeconds;//[Offset: 0xb8, Size: 0x4]
	<Character*,DateTime> CharacterLootStartTime;//[Offset: 0xc0, Size: 0x50]
	<Character*,SGInventory*> CharacterLootingInventory;//[Offset: 0x110, Size: 0x50]
	<Character*,MissionObjectiveCollectedItems> CharacterCollectedItemsMap;//[Offset: 0x160, Size: 0x50]
	void OnInventoryRemoved(MFGlobalEventTag InEventTag, out const GlobalEventMessage_InventoryRemoved InMessage);// 0x63b7e3fee041
	void OnInventoryAdded(MFGlobalEventTag InEventTag, out const GlobalEventMessage_InventoryAdded InMessage);// 0x63b6e3fee041
	void OnContainerInteractChanged(MFGlobalEventTag InEventTag, out const GlobalEventMessage_ContainerInteractChanged InMessage);// 0x63b5e3fee041

--------------------------------
Class: GlobalEventMessage_ContainerInteractChanged
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	SGInventory* Inventory;//[Offset: 0x8, Size: 0x8]
	bool bInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: UAMissionObjective_RegisterSceneEvent.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	int SceneEventNum;//[Offset: 0xb0, Size: 0x4]
	MissionObjectiveSceneEventInfo[] SceneEventInfos;//[Offset: 0xb8, Size: 0x10]

--------------------------------
Class: MissionObjectiveSceneEventInfo
	class AISceneEventMessage* SceneEventClassPtr;//[Offset: 0x0, Size: 0x28]
	float ValidTime;//[Offset: 0x28, Size: 0x4]
	float ValidScope;//[Offset: 0x2c, Size: 0x4]
	Vector Location;//[Offset: 0x30, Size: 0xc]
	float CoverRange;//[Offset: 0x3c, Size: 0x4]
	int Weight;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: UAMissionObjective_ShowControl.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	MissionActorReference[] ShowControlActors;//[Offset: 0xb0, Size: 0x10]
	enum[] RelatedTargetTypes;//[Offset: 0xc0, Size: 0x10]
	<MFMissionFlowComponent*,MissionRelatedTargets> InstigatorRelatedTargetsMap;//[Offset: 0xd0, Size: 0x50]
	SGTeamInfo*[] TeamInfoShowControlActors;//[Offset: 0x120, Size: 0x10]
	enum[] PlayerTeamTypeShowControlActors;//[Offset: 0x130, Size: 0x10]

--------------------------------
Class: UAMissionObjective_SpawnActor.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	int SpawnActorNum;//[Offset: 0xb0, Size: 0x4]
	MissionObjectiveSpawnActorInfo[] SpawnActorInfos;//[Offset: 0xb8, Size: 0x10]
	<MFMissionFlowComponent*,MissionRelatedTargets> InstigatorRelatedTargetsMap;//[Offset: 0xc8, Size: 0x50]
	<Character*,MissionObjectiveSpawnedActors> CharacterSpawnedActorsMap;//[Offset: 0x118, Size: 0x50]
	<SGTeamInfo*,MissionObjectiveSpawnedActors> TeamInfoSpawnedActorsMap;//[Offset: 0x168, Size: 0x50]
	<enum,MissionObjectiveSpawnedActors> PlayerTeamTypeSpawnedActorsMap;//[Offset: 0x1b8, Size: 0x50]

--------------------------------
Class: MissionObjectiveSpawnActorInfo
	MissionActorReference SpawnPointActor;//[Offset: 0x0, Size: 0x18]
	StaticMesh* StaticMesh;//[Offset: 0x18, Size: 0x8]
	int Weight;//[Offset: 0x20, Size: 0x4]
	enum[] RelatedTargetTypes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MissionObjectiveSpawnedActors
	SGNetRelevantConfigurableActor*[] Actors;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UAMissionObjective_SpawnAI.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	MissionObjectiveSpawnAIEventConfig EventConfig;//[Offset: 0xb0, Size: 0x18]
	int FailedAINum;//[Offset: 0xc8, Size: 0x4]
	MissionObjectiveEffectMissionFlowInfo[] EffectMissionFlowInfos;//[Offset: 0xd0, Size: 0x10]
	FName[] SpawnedAIIDList;//[Offset: 0xe0, Size: 0x10]
	SGAICharacter*[] SpawnedAICharacerList;//[Offset: 0xf0, Size: 0x10]
	FString[] SpawnedEventList;//[Offset: 0x100, Size: 0x10]
	void OnKilled(MFGlobalEventTag InEventTag, out const GlobalEventMessage_Killed InMessage);// 0x63bae3fee041
	void OnAIActived(MFGlobalEventTag InEventTag, out const GlobalEventMessage_AIActived InMessage);// 0x63b9e3fee041
	FString[] GetSpawnedEventList();// 0x63b8e3fee041

--------------------------------
Class: GlobalEventMessage_AIActived
	Character* Instigator;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: MissionObjectiveSpawnAIEventConfig
	int SpawnNum;//[Offset: 0x0, Size: 0x4]
	MissionObjectiveSpawnAIEventParams[] EventParams;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MissionObjectiveSpawnAIEventParams
	FString[] EventStrList;//[Offset: 0x0, Size: 0x10]
	int Weight;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: MissionObjectiveEffectMissionFlowInfo
	int MissionFlowID;//[Offset: 0x0, Size: 0x4]
	int[] MissionIDs;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: UAMissionObjective_SpawnInteractItem.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	int SpawnInteractItemNum;//[Offset: 0xb0, Size: 0x4]
	MissionObjectiveSpawnInteractItemInfo[] SpawnInteractItemInfos;//[Offset: 0xb8, Size: 0x10]
	bool bDestroyWhenMissionFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	int FailedInteractNum;//[Offset: 0xcc, Size: 0x4]
	MissionObjectiveEffectMissionFlowInfo[] EffectMissionFlowInfos;//[Offset: 0xd0, Size: 0x10]
	<MFMissionFlowComponent*,MissionRelatedTargets> InstigatorRelatedTargetsMap;//[Offset: 0xe0, Size: 0x50]
	<Character*,MissionObjectiveSpawnedInteractItems> CharacterSpawnedInteractItemsMap;//[Offset: 0x130, Size: 0x50]
	<SGTeamInfo*,MissionObjectiveSpawnedInteractItems> TeamInfoSpawnedInteractItemsMap;//[Offset: 0x180, Size: 0x50]
	<enum,MissionObjectiveSpawnedInteractItems> PlayerTeamTypeSpawnedInteractItemsMap;//[Offset: 0x1d0, Size: 0x50]
	void OnInteract(MFGlobalEventTag InEventTag, out const GlobalEventMessage_Interact InMessage);// 0x63bbe3fee041

--------------------------------
Class: MissionObjectiveSpawnInteractItemInfo
	MissionActorReference SpawnPointActor;//[Offset: 0x0, Size: 0x18]
	class SGNetRelevantConfigurableActor* InteractItemClass;//[Offset: 0x18, Size: 0x8]
	int Weight;//[Offset: 0x20, Size: 0x4]
	enum OperatorType;//[Offset: 0x24, Size: 0x1]
	enum MarkType;//[Offset: 0x25, Size: 0x1]
	int ConfigId;//[Offset: 0x28, Size: 0x4]
	float ScanningInterval;//[Offset: 0x2c, Size: 0x4]
	enum[] RelatedTargetTypes;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: MissionObjectiveSpawnedInteractItems
	SGNetRelevantConfigurableActor*[] InteractItems;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UAMissionObjective_SpawnInventory.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	int SpawnInventoryNum;//[Offset: 0xb0, Size: 0x4]
	MissionObjectiveSpawnInventoryInfo[] SpawnInventoryInfos;//[Offset: 0xb8, Size: 0x10]
	int FailedInventoryNum;//[Offset: 0xc8, Size: 0x4]
	MissionObjectiveEffectMissionFlowInfo[] EffectMissionFlowInfos;//[Offset: 0xd0, Size: 0x10]
	<MFMissionFlowComponent*,MissionRelatedTargets> InstigatorRelatedTargetsMap;//[Offset: 0xe0, Size: 0x50]
	<Character*,MissionObjectiveSpawnedInventories> CharacterSpawnedInventoriesMap;//[Offset: 0x130, Size: 0x50]
	<SGTeamInfo*,MissionObjectiveSpawnedInventories> TeamInfoSpawnedInventoriesMap;//[Offset: 0x180, Size: 0x50]
	<enum,MissionObjectiveSpawnedInventories> PlayerTeamTypeSpawnedInventoriesMap;//[Offset: 0x1d0, Size: 0x50]
	<int,SGVolume*> ValidVolumeMap;//[Offset: 0x220, Size: 0x50]
	void OnActorDestroyed(Actor* DestroyedActor);// 0x63bce3fee041

--------------------------------
Class: MissionObjectiveSpawnInventoryInfo
	MissionActorReference SpawnPointActor;//[Offset: 0x0, Size: 0x18]
	MissionActorReference SpawnVolumeActor;//[Offset: 0x18, Size: 0x18]
	class SGInventory* ContainerClass;//[Offset: 0x30, Size: 0x8]
	int64[] ItemIDs;//[Offset: 0x38, Size: 0x10]
	int Weight;//[Offset: 0x48, Size: 0x4]
	enum OperatorType;//[Offset: 0x4c, Size: 0x1]
	enum MarkType;//[Offset: 0x4d, Size: 0x1]
	int ConfigId;//[Offset: 0x50, Size: 0x4]
	float ScanningInterval;//[Offset: 0x54, Size: 0x4]
	enum[] RelatedTargetTypes;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: MissionObjectiveSpawnedInventories
	SGInventory*[] Inventories;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UAMissionObjective_SpawnParticle.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	int SpawnParticleNum;//[Offset: 0xb0, Size: 0x4]
	MissionObjectiveSpawnParticleInfo[] SpawnParticleInfos;//[Offset: 0xb8, Size: 0x10]

--------------------------------
Class: MissionObjectiveSpawnParticleInfo
	MissionActorReference SpawnPointActor;//[Offset: 0x0, Size: 0x18]
	ParticleSystem* Effect;//[Offset: 0x18, Size: 0x8]
	int Weight;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: UAMissionObjective_SpawnPickup.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	int SpawnPickupNum;//[Offset: 0xb0, Size: 0x4]
	MissionObjectiveSpawnPickupInfo[] SpawnPickupInfos;//[Offset: 0xb8, Size: 0x10]
	int FailedPickupNum;//[Offset: 0xc8, Size: 0x4]
	MissionObjectiveEffectMissionFlowInfo[] EffectMissionFlowInfos;//[Offset: 0xd0, Size: 0x10]
	<MFMissionFlowComponent*,MissionRelatedTargets> InstigatorRelatedTargetsMap;//[Offset: 0xe0, Size: 0x50]
	<Character*,MissionObjectiveSpawnedPickups> CharacterSpawnedPickupsMap;//[Offset: 0x130, Size: 0x50]
	<SGTeamInfo*,MissionObjectiveSpawnedPickups> TeamInfoSpawnedPickupsMap;//[Offset: 0x180, Size: 0x50]
	<enum,MissionObjectiveSpawnedPickups> PlayerTeamTypeSpawnedPickupsMap;//[Offset: 0x1d0, Size: 0x50]

--------------------------------
Class: MissionObjectiveSpawnPickupInfo
	MissionActorReference SpawnPointActor;//[Offset: 0x0, Size: 0x18]
	class SGPickup* PickupClass;//[Offset: 0x18, Size: 0x8]
	int Weight;//[Offset: 0x20, Size: 0x4]
	enum OperatorType;//[Offset: 0x24, Size: 0x1]
	enum MarkType;//[Offset: 0x25, Size: 0x1]
	int ConfigId;//[Offset: 0x28, Size: 0x4]
	float ScanningInterval;//[Offset: 0x2c, Size: 0x4]
	enum[] RelatedTargetTypes;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: MissionObjectiveSpawnedPickups

--------------------------------
Class: UAMissionObjective_Survival.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	bool bResetOnCheckFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	<Actor*,TimerHandle> Instigator2TimerHandleMap;//[Offset: 0xb8, Size: 0x50]
	void StopTimer(Actor* InInstigator);// 0x63bfe3fee041
	void StartTimer(Actor* InInstigator);// 0x63bee3fee041
	void OnTimerTick(Actor* InInstigator);// 0x63bde3fee041

--------------------------------
Class: UAMissionObjective_TakeInItem.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	bool bChangeValueToCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	void OnTakeIn(MFGlobalEventTag InEventTag, out const GlobalEventMessage_TakeInItem InMessage);// 0x63c0e3fee041

--------------------------------
Class: GlobalEventMessage_TakeInItem
	PlayerController* Instigator;//[Offset: 0x0, Size: 0x8]
	SGInventory* Inventory;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: UAMissionObjective_TakeOutItem.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	bool bEscapeFailedIngnoreSafeBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bChangeValueToCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	void OnPushBullet(MFGlobalEventTag InEventTag, out const GlobalEventMessage_PushBullet InMessage);// 0x63c8e3fee041
	void OnPrePlayerFinishGame(MFGlobalEventTag InEventTag, out const GlobalEventMessage_PrePlayerFinishGame InMessage);// 0x63c7e3fee041
	void OnModifyInventoryTotalCount(MFGlobalEventTag InEventTag, out const GlobalEventMessage_ModifyInventoryTotalCount InMessage);// 0x63c6e3fee041
	void OnKilled(MFGlobalEventTag InEventTag, out const GlobalEventMessage_Killed InMessage);// 0x63c5e3fee041
	void OnInventoryRemoved(MFGlobalEventTag InEventTag, out const GlobalEventMessage_InventoryRemoved InMessage);// 0x63c4e3fee041
	void OnInventoryAdded(MFGlobalEventTag InEventTag, out const GlobalEventMessage_InventoryAdded InMessage);// 0x63c3e3fee041
	void OnCharacterCostBullet(MFGlobalEventTag InEventTag, out const GlobalEventMessage_CharacterCostBullet InMessage);// 0x63c2e3fee041
	Actor* GetKilledInstigator(Controller* KilledPlayer);// 0x63c1e3fee041

--------------------------------
Class: GlobalEventMessage_PushBullet
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	SGInventory* Inventory;//[Offset: 0x8, Size: 0x8]
	int IntCount;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: GlobalEventMessage_ModifyInventoryTotalCount
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	SGInventory* Inventory;//[Offset: 0x8, Size: 0x8]
	int IntOldCount;//[Offset: 0x10, Size: 0x4]
	int IntNewCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: GlobalEventMessage_CharacterCostBullet
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	SGInventory* Inventory;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: UAMissionObjective_UseRecoveryInventory.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	void OnUseRecoveryInventory(MFGlobalEventTag InEventTag, out const GlobalEventMessage_UseRecoveryInventory InMessage);// 0x63c9e3fee041

--------------------------------
Class: GlobalEventMessage_UseRecoveryInventory
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	SGInventory* Inventory;//[Offset: 0x8, Size: 0x8]
	enum UseInventoryPhase;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: UAMissionObjective_UseThrowable.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	void OnThrowableProjectileSpawn(MFGlobalEventTag InEventTag, out const GlobalEventMessage_ThrowableProjectileSpawn InMessage);// 0x63cae3fee041

--------------------------------
Class: GlobalEventMessage_ThrowableProjectileSpawn
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	SGThrowableProjectile* ThrowableProjectile;//[Offset: 0x8, Size: 0x8]
	SGInventory* Inventory;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: UAMissionObjective_WalkDistance.UAMissionObjective.SGMissionObjective.MFMissionObjective.MFMissionNode.Object
	enum[] MoveDistanceTypes;//[Offset: 0xb0, Size: 0x10]
	void OnPrePlayerFinishGame(MFGlobalEventTag InEventTag, out const GlobalEventMessage_PrePlayerFinishGame InMessage);// 0x63cde3fee041
	void OnLocationReport(MFGlobalEventTag InEventTag, out const GlobalEventMessage_LocationReport InMessage);// 0x63cce3fee041
	void OnKilled(MFGlobalEventTag InEventTag, out const GlobalEventMessage_Killed InMessage);// 0x63cbe3fee041

--------------------------------
Class: GlobalEventMessage_LocationReport
	Character* Instigator;//[Offset: 0x0, Size: 0x8]
	float MoveDistance;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: UAMissionStatics.BlueprintFunctionLibrary.Object
	bool IsValidMissionFlow(MFMissionFlowComponent* MissionFlowComponent, out MFMissionFlowReplicateData MissionFlowData);// 0x63dee3fee041
	bool IsValidMission(MFMissionFlowComponent* MissionFlowComponent, out MFMissionReplicateData MissionData);// 0x63dde3fee041
	bool IsInstigatorTeamTypeValid(Actor* InInstigator, MFMission* Mission);// 0x63dce3fee041
	bool IsInstigatorCharacterTypeValid(Actor* InInstigator, MFMission* Mission);// 0x63dbe3fee041
	TaskTargetConfTableRow GetTaskTargetConfByTargetID(int TargetId);// 0x63dae3fee041
	TaskConfTableRow GetTaskConfByTaskID(int TaskId);// 0x63d9e3fee041
	float GetRemainTime(out MFMissionReplicateData MissionData, Object* WorldContextObject);// 0x63d8e3fee041
	MissionRelatedTargets GetRelatedTargets(Object* WorldContextObject, Character* SGCharacter, enum[] RelatedTargetTypes);// 0x63d7e3fee041
	MissionRelatedPlayers GetRelatedPlayers(Object* WorldContextObject, PlayerState* PlayerState, enum[] RelatedTargetTypes, bool bExcludeDied);// 0x63d6e3fee041
	MissionFlowClassTableRow GetMissionFlowClassTableRow(int InMissionFlowID);// 0x63d5e3fee041
	int GetMaxDynamicTaskNum(Object* WorldContextObject);// 0x63d4e3fee041
	int GetMaxActivityTaskNum(int InMissionFlowID);// 0x63d3e3fee041
	bool DistributeMissionFlow(SGCharacter* Character, int InMissionFlowID, bool bDuplicateCheck);// 0x63d2e3fee041
	bool DistributeDynamicEvent(SGCharacter* Character, FString InMissionFlowName);// 0x63d1e3fee041
	bool DistributeActivityEvent(SGCharacter* Character, FString InMissionFlowName);// 0x63d0e3fee041
	bool CharacterHasDynamicTask(Character* Character);// 0x63cfe3fee041
	bool CharacterHasActivityTask(Character* Character, int InMissionFlowID);// 0x63cee3fee041

--------------------------------
Class: TaskTargetConfTableRow.TableRowBase
	uint32 target_id;//[Offset: 0x8, Size: 0x4]
	uint32 target_type;//[Offset: 0xc, Size: 0x4]
	FText Desc;//[Offset: 0x10, Size: 0x18]
	uint32 jump_goto;//[Offset: 0x28, Size: 0x4]
	uint32 Progress;//[Offset: 0x2c, Size: 0x4]
	int64 Param1;//[Offset: 0x30, Size: 0x8]
	int64 Param2;//[Offset: 0x38, Size: 0x8]
	int64 param3;//[Offset: 0x40, Size: 0x8]
	uint32 team_share;//[Offset: 0x48, Size: 0x4]
	int64 icon_item_id;//[Offset: 0x50, Size: 0x8]
	uint32 big_type;//[Offset: 0x58, Size: 0x4]
	uint32 mid_type;//[Offset: 0x5c, Size: 0x4]
	uint32 sub_type;//[Offset: 0x60, Size: 0x4]
	CommonItemConfItem[] rewards;//[Offset: 0x68, Size: 0x10]
	uint32[] prev_target;//[Offset: 0x78, Size: 0x10]
	uint32 prev_type;//[Offset: 0x88, Size: 0x4]
	uint32 fail_when_next_fail;//[Offset: 0x8c, Size: 0x4]
	uint32 node_type;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: TaskConfTableRow.TableRowBase
	uint32 task_id;//[Offset: 0x8, Size: 0x4]
	uint32 Type;//[Offset: 0xc, Size: 0x4]
	uint32 label_type;//[Offset: 0x10, Size: 0x4]
	FText disp_title;//[Offset: 0x18, Size: 0x18]
	FText chapter_name;//[Offset: 0x30, Size: 0x18]
	uint32 disp_type;//[Offset: 0x48, Size: 0x4]
	FText disp_desc;//[Offset: 0x50, Size: 0x18]
	FText disp_detail;//[Offset: 0x68, Size: 0x18]
	uint32 disp_address;//[Offset: 0x80, Size: 0x4]
	FText chapter;//[Offset: 0x88, Size: 0x18]
	UnlockCondtionRef[] unlock_condtions;//[Offset: 0xa0, Size: 0x10]
	uint32[] pre_tasks;//[Offset: 0xb0, Size: 0x10]
	uint32 pre_logic;//[Offset: 0xc0, Size: 0x4]
	uint32 source_type;//[Offset: 0xc4, Size: 0x4]
	uint32 source_id;//[Offset: 0xc8, Size: 0x4]
	TaskTargetRefItem[] Targets;//[Offset: 0xd0, Size: 0x10]
	uint32 need_finish_num;//[Offset: 0xe0, Size: 0x4]
	uint32 hide_day;//[Offset: 0xe4, Size: 0x4]
	FText kw_desc;//[Offset: 0xe8, Size: 0x18]
	uint32 gift_exp;//[Offset: 0x100, Size: 0x4]
	uint32 gift_ruble;//[Offset: 0x104, Size: 0x4]
	BlackItemConf[] rewards;//[Offset: 0x108, Size: 0x10]
	uint32 prev_type;//[Offset: 0x118, Size: 0x4]
	uint32 reaccept_if_failed;//[Offset: 0x11c, Size: 0x4]
	uint32 accept_dialog_start_id;//[Offset: 0x120, Size: 0x4]
	uint32 finish_dialog_start_id;//[Offset: 0x124, Size: 0x4]
	uint32 task_difficult;//[Offset: 0x128, Size: 0x4]
	bool complete_in_one_battle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	uint32 sort_weight;//[Offset: 0x130, Size: 0x4]
	uint32 activity_id;//[Offset: 0x134, Size: 0x4]
	int[] reports_id;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: UnlockCondtionRef
	uint32 cond_type;//[Offset: 0x0, Size: 0x4]
	uint32 cond_value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TaskTargetRefItem
	uint32 target_id;//[Offset: 0x0, Size: 0x4]
	uint32 group_id;//[Offset: 0x4, Size: 0x4]
	uint32 Property;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BlackItemConf
	uint32 item_id;//[Offset: 0x0, Size: 0x4]
	uint32 Num;//[Offset: 0x4, Size: 0x4]
	uint32 is_black;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MissionRelatedPlayers
	PlayerState*[] PlayerStates;//[Offset: 0x0, Size: 0x10]
	SGTeamInfo*[] TeamInfos;//[Offset: 0x10, Size: 0x10]
	enum[] PlayerTeamTypes;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MissionFlowClassTableRow.TableRowBase
	int MissionFlowID;//[Offset: 0x8, Size: 0x4]
	MFMissionFlow* MissionFlowAsset;//[Offset: 0x10, Size: 0x28]

--------------------------------
Class: UAMissionSubsystem.MFMissionSubsystem.WorldSubsystem.Subsystem.Object
	<int,MFMissionFlow*> Index2MissionFlowMap;//[Offset: 0x150, Size: 0x50]
	<MFMissionFlow*,MissionFlowPlayers> MissionFlowPlayersMap;//[Offset: 0x1a0, Size: 0x50]
	PlayerController*[] HasFinishPlayerController;//[Offset: 0x1f0, Size: 0x10]
	MFMissionFlow*[] WaitingDestroyFlowList;//[Offset: 0x200, Size: 0x10]
	void OnWorldBeginPlay();// 0x63ebe3fee041
	void OnGameModePlayerFinishGame(PlayerController* PlayerController, enum FinishType, Actor* EscapeVolume);// 0x63eae3fee041
	bool IsValidMissionFlow(int InMissionFlowID);// 0x63e9e3fee041
	bool IsSeasonMission(int InMissionFlowID);// 0x63e8e3fee041
	MissionFlowClassTableRow GetMissionFlowClassTableRow(int InMissionFlowID);// 0x63e7e3fee041
	MFMissionFlow* GetMissionFlow(int InMissionFlowID);// 0x63e6e3fee041
	MFMission* GetMission(int InMissionFlowID, int InMissionID);// 0x63e5e3fee041
	UAMissionSubsystem* Get(Object* WorldContextObject);// 0x63e4e3fee041
	void DoDestroyMissionFlow();// 0x63e3e3fee041
	void DoCreateMissionFlow();// 0x63e2e3fee041
	bool DistributeMissionFlow(SGCharacter* Character, int InMissionFlowID, bool bDuplicateCheck);// 0x63e1e3fee041
	MFMissionFlow* CreateMissionFlowFromTable(int InMissionFlowID);// 0x63e0e3fee041
	void AddMissionFlowCreateData(MissionFlowCreateData InMissionFlowCreateData, PlayerController* InPlayerController);// 0x63dfe3fee041

--------------------------------
Class: MissionFlowPlayers
	PlayerController*[] PlayerList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MissionFlowCreateData
	int MissionFlowID;//[Offset: 0x0, Size: 0x4]
	MissionCreateData[] MissionList;//[Offset: 0x8, Size: 0x10]
	bool bCompleteInOneBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bActTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: MissionCreateData
	int MissionID;//[Offset: 0x0, Size: 0x4]
	int CurProgress;//[Offset: 0x4, Size: 0x4]
	int MaxProgress;//[Offset: 0x8, Size: 0x4]
	bool bActTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int[] ActivityMissionTemplateParams;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MissionConditionItemTypeID.MissionConditionItemParamBase.Object
	uint64[] ItemTypeIDs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MissionConditionIsTakeInItem.MissionConditionItemParamBase.Object
	MFGlobalEventParameterTag CheckTargetTag;//[Offset: 0x28, Size: 0x8]
	bool bIsTakeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MissionConditionSpawnVolume.MissionConditionItemParamBase.Object
	MissionActorReference SpawnVolumeActor;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: MissionConditionOccupiedGridCount.MissionConditionItemParamBase.Object
	int OccupiedGridCountMin;//[Offset: 0x28, Size: 0x4]
	int OccupiedGridCountMax;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MissionConditionDurability.MissionConditionItemParamBase.Object
	float MinDurability;//[Offset: 0x28, Size: 0x4]
	float MaxDurability;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MissionConditionWeight.MissionConditionItemParamBase.Object
	float MinWeight;//[Offset: 0x28, Size: 0x4]
	float MaxWeight;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MissionConditionItemValue.MissionConditionItemParamBase.Object
	int MinItemValue;//[Offset: 0x28, Size: 0x4]
	int MaxItemValue;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MissionConditionEngonomics.MissionConditionItemParamBase.Object
	float MinEngonomics;//[Offset: 0x28, Size: 0x4]
	float MaxEngonomics;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MissionConditionAccuracy.MissionConditionItemParamBase.Object
	float MinAccuracy;//[Offset: 0x28, Size: 0x4]
	float MaxAccuracy;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MissionConditionHorizontalRecoil.MissionConditionItemParamBase.Object
	float MinHorizontalRecoil;//[Offset: 0x28, Size: 0x4]
	float MaxHorizontalRecoil;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MissionConditionVerticalRecoil.MissionConditionItemParamBase.Object
	float MinVerticalRecoil;//[Offset: 0x28, Size: 0x4]
	float MaxVerticalRecoil;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MissionConditionRequireAdapters.MissionConditionItemParamBase.Object
	uint64[] RequireAdapters;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MissionConditionExclusionAdapters.MissionConditionItemParamBase.Object
	uint64[] ExclusionAdapters;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MissionConditionFireMode.MissionConditionItemParamBase.Object
	enum FireMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: MissionConditionRuntimeFireRate.MissionConditionItemParamBase.Object
	int MinFireRatePerMinute;//[Offset: 0x28, Size: 0x4]
	int MaxFireRatePerMinute;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MissionConditionSightRange.MissionConditionItemParamBase.Object
	float MinSightRange;//[Offset: 0x28, Size: 0x4]
	float MaxSightRange;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MissionConditionCurrentBulletCount.MissionConditionItemParamBase.Object
	int MinBulletCount;//[Offset: 0x28, Size: 0x4]
	int MaxBulletCount;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MissionConditionMaxBulletCount.MissionConditionItemParamBase.Object
	int MinBulletCount;//[Offset: 0x28, Size: 0x4]
	int MaxBulletCount;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MissionConditionMuzzleVelocity.MissionConditionItemParamBase.Object
	float MinMuzzleVelocity;//[Offset: 0x28, Size: 0x4]
	float MaxMuzzleVelocity;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MissionConditionAdsMoa.MissionConditionItemParamBase.Object
	float AdsMoaXMin;//[Offset: 0x28, Size: 0x4]
	float AdsMoaXMax;//[Offset: 0x2c, Size: 0x4]
	float AdsMoaYMin;//[Offset: 0x30, Size: 0x4]
	float AdsMoaYMax;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: MissionConditionLootPointType.MissionConditionItemParamBase.Object
	int[] LootPointTypes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MissionConditionWeaponCanFire.MissionConditionItemParamBase.Object
	bool IsCanFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: MissionConditionCaptureWeaponZoomType.MissionConditionDamageInfoParamBase.Object
	enum ZoomType;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: MissionConditionDamageTypeClass.MissionConditionDamageInfoParamBase.Object
	class DamageType* DamageTypeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MissionConditionBulletItemId.MissionConditionDamageInfoParamBase.Object
	uint64[] ValidBulletIds;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: UAModeDataStatics.BlueprintFunctionLibrary.Object
	void GetDefaultRowUAScriptLevelTable(out UAScriptLevelTable DefaultRow);// 0x63f6e3fee041
	void GetDefaultRowUAModeStartAndEscapeTable(out UAModeStartAndEscapeTable DefaultRow);// 0x63f5e3fee041
	void GetDefaultRowUAModeBigMapModuleConfigTable(out UAModeBigMapModuleConfigTable DefaultRow);// 0x63f4e3fee041
	void GetDefaultRowUAModeAIDifficultyTable(out UAModeAIDifficultyTable DefaultRow);// 0x63f3e3fee041
	void GetDefaultRowUAGameBigMapConfigModeTable(out UAGameBigMapConfigModeTable DefaultRow);// 0x63f2e3fee041
	void GetBestRowUAScriptLevelTable(out UAScriptLevelTable BestRow);// 0x63f1e3fee041
	void GetBestRowUAModeStartAndEscapeTable(out UAModeStartAndEscapeTable BestRow);// 0x63f0e3fee041
	void GetBestRowUAModeBigMapModuleConfigTable(out UAModeBigMapModuleConfigTable BestRow);// 0x63efe3fee041
	void GetBestRowUAModeAIDifficultyTable(out UAModeAIDifficultyTable BestRow);// 0x63eee3fee041
	void GetBestRowUAGameBigMapConfigModeTable(out UAGameBigMapConfigModeTable BestRow);// 0x63ede3fee041

--------------------------------
Class: UAScriptLevelTable.ModeTableRowBase.TableRowBase
	FString[] ScriptMaps;//[Offset: 0x20, Size: 0x10]
	FString[] AdditionIgnores;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ModeTableRowBase.TableRowBase
	int MainModeID;//[Offset: 0x8, Size: 0x4]
	int SubModeID;//[Offset: 0xc, Size: 0x4]
	int MapID;//[Offset: 0x10, Size: 0x4]
	int SpecialID;//[Offset: 0x14, Size: 0x4]
	int Difficulty;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: UAModeStartAndEscapeTable.ModeTableRowBase.TableRowBase
	FString LevelName;//[Offset: 0x20, Size: 0x10]
	FString[] AdditionLevelName;//[Offset: 0x30, Size: 0x10]
	UAPlayerStartGroupData[] PlayerStart;//[Offset: 0x40, Size: 0x10]
	UAAIStartGroupData[] AIStartAddition;//[Offset: 0x50, Size: 0x10]
	<FString,EscapePreset> EscapePresetMap;//[Offset: 0x60, Size: 0x50]
	<int,EscapeProbabilityReset> EscapeProbabilityResetMap;//[Offset: 0xb0, Size: 0x50]
	float PMCCheckRadius;//[Offset: 0x100, Size: 0x4]
	float EnemyCheckRadius;//[Offset: 0x104, Size: 0x4]
	float SecondEnemyCheckRadius;//[Offset: 0x108, Size: 0x4]
	float TeamCheckRadius;//[Offset: 0x10c, Size: 0x4]

--------------------------------
Class: UAPlayerStartGroupData
	int GroupIndex;//[Offset: 0x0, Size: 0x4]
	enum StartPointType;//[Offset: 0x4, Size: 0x1]
	int BigGroup;//[Offset: 0x8, Size: 0x4]
	int SecondGroup;//[Offset: 0xc, Size: 0x4]
	int Priority;//[Offset: 0x10, Size: 0x4]
	int Weight;//[Offset: 0x14, Size: 0x4]
	FString EscapePreset;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: UAAIStartGroupData
	int GroupIndex;//[Offset: 0x0, Size: 0x4]
	enum StartPointType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: EscapeProbabilityReset
	float OpenProbability;//[Offset: 0x0, Size: 0x4]
	float ShowProbability;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: UAModeBigMapModuleConfigTable.ModeTableRowBase.TableRowBase
	class Object[] AdditionModules;//[Offset: 0x20, Size: 0x10]
	class Object[] RemoveModules;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: UAModeAIDifficultyTable.ModeTableRowBase.TableRowBase
	FString AIPathLevelName;//[Offset: 0x20, Size: 0x10]
	FString AISpawnLevelName;//[Offset: 0x30, Size: 0x10]
	DataTable* AIPortraitToAIID;//[Offset: 0x40, Size: 0x8]
	int AISpawnConfigID;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: UAGameBigMapConfigModeTable.ModeTableRowBase.TableRowBase
	class Actor* BigMapInfoActor;//[Offset: 0x20, Size: 0x28]
	SoftObjectPath BigMapEffectDataTablePath;//[Offset: 0x48, Size: 0x18]

--------------------------------
Class: UANetReplicationGraphConnection.NetReplicationGraphConnection.ReplicationConnectionDriver.Object
	float DistancePriorityWeight;//[Offset: 0x410, Size: 0x4]
	float SelfOwnedPriorityWeight;//[Offset: 0x414, Size: 0x4]
	float ElapsedFrameCountWeight;//[Offset: 0x418, Size: 0x4]
	float ForceRelevantMaxDistThreshold;//[Offset: 0x41c, Size: 0x4]
	int ForceRelevantMinGlobalFrameCount;//[Offset: 0x420, Size: 0x4]
	int MaxRelevantDistMinGlobalFrameCountSquared;//[Offset: 0x424, Size: 0x4]
	int ForceRelevantNonSelfOwnedActorCountPerFrame;//[Offset: 0x428, Size: 0x4]
	float NetCullDistCheckTolerance;//[Offset: 0x42c, Size: 0x4]
	float CharacterPriorityWeight;//[Offset: 0x430, Size: 0x4]
	float NearDistPriority;//[Offset: 0x434, Size: 0x4]
	float MiddleDistPriority;//[Offset: 0x438, Size: 0x4]
	int NearDistPriorityRepFrameInterval;//[Offset: 0x43c, Size: 0x4]
	int MiddleDistPriorityRepFrameInterval;//[Offset: 0x440, Size: 0x4]
	int FarDistPriorityRepFrameInterval;//[Offset: 0x444, Size: 0x4]
	float UnsearchedInventoryCullDistanceSqr;//[Offset: 0x448, Size: 0x4]

--------------------------------
Class: UANetworkObjPoolRulesObject.NetworkObjPoolRulesObject.Object
	int BeginLength;//[Offset: 0x44, Size: 0x4]
	float StepDistance;//[Offset: 0x48, Size: 0x4]
	float DistancePerSecond;//[Offset: 0x4c, Size: 0x4]
	void OnGameBegin(PlayerController* PlayerController);// 0x63fde3fee041
	float CalculatePriority(World* World, class Object Class, float Dis);// 0x63fce3fee041

--------------------------------
Class: UANetworkObjPoolSubsystem.WorldSubsystem.Subsystem.Object
	SGModeActorPoolTable ActorPoolTable;//[Offset: 0x38, Size: 0x80]
	class Object[] ClassArr;//[Offset: 0xc8, Size: 0x10]
	UAObjPoolExpectationMem[] ExpectationMemArr;//[Offset: 0x118, Size: 0x10]
	<int,float> ExpectationMemMap;//[Offset: 0x128, Size: 0x50]
	float MaxStaticMem;//[Offset: 0x178, Size: 0x4]
	float CurrStaticMem;//[Offset: 0x17c, Size: 0x4]
	float MaxDynamicMem;//[Offset: 0x180, Size: 0x4]
	float CurrDynamicMem;//[Offset: 0x184, Size: 0x4]
	SGModePreloadClassTable PreloadClassTable;//[Offset: 0x188, Size: 0x40]
	void OnPlayerBeginGame(PlayerController* PC);// 0x6406e3fee041
	bool IsInStaticPoolConfig(int InventoryID);// 0x6405e3fee041
	bool IsDisposeDynamicComplete();// 0x6404e3fee041
	bool IsDisposeComplete();// 0x6403e3fee041
	void InitMemConfig();// 0x6402e3fee041
	void AsyncInventoryLoadComplete(uint64 InventoryID);// 0x6401e3fee041
	void AsyncDynamicInventoryLoadComplete(int InventoryID, int Priority);// 0x6400e3fee041
	void AsyncActorLoadComplete(int Index);// 0x63ffe3fee041
	void AddDynamicInventoryPoolID(int InventortID, bool IsDisposeCache);// 0x63fee3fee041

--------------------------------
Class: SGModeActorPoolTable.ModeTableRowBase.TableRowBase
	PoolActorInfo[] PoolActorInfoList;//[Offset: 0x20, Size: 0x10]
	<uint64,PoolInventoryInfo> PoolInventoryInfoList;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: PoolActorInfo
	class Actor* PoolActorClass;//[Offset: 0x0, Size: 0x28]
	int MaxPoolCount;//[Offset: 0x28, Size: 0x4]
	int CurrPoolCount;//[Offset: 0x2c, Size: 0x4]
	int Priority;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: UAObjPoolExpectationMem
	int Priority;//[Offset: 0x0, Size: 0x4]
	float ExpectationMem;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SGModePreloadClassTable.ModeTableRowBase.TableRowBase
	class Object[] PreloadClass;//[Offset: 0x20, Size: 0x10]
	class Object[] DevPreloadClass;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: UANiagaraSwither.SGShowSwithBaseComponent.Object
	NiagaraSwitherRow[] NiagaraPlaySequence;//[Offset: 0x48, Size: 0x10]
	Actor* NiagaraActor;//[Offset: 0x58, Size: 0x8]
	NiagaraComponent* NiagaraComponent;//[Offset: 0x60, Size: 0x8]
	void TickAnim();// 0x6409e3fee041
	void StopAnim();// 0x6408e3fee041
	void BeginAnim();// 0x6407e3fee041

--------------------------------
Class: NiagaraSwitherRow
	NiagaraSystem* Asset;//[Offset: 0x0, Size: 0x8]
	float PlayTime;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: UAOCFuncSwitchVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: UAOElevatorIndicatorSwither.SGShowSwithBaseComponent.Object
	float DelayTime;//[Offset: 0x48, Size: 0x4]
	int BeginFloor;//[Offset: 0x4c, Size: 0x4]
	int EndFloor;//[Offset: 0x50, Size: 0x4]
	float EachFloorTime;//[Offset: 0x54, Size: 0x4]
	Actor* NiagaraActor;//[Offset: 0x58, Size: 0x8]
	AkAudioEvent* RunningSound;//[Offset: 0x60, Size: 0x8]
	AkAudioEvent* EachFloorSound;//[Offset: 0x68, Size: 0x8]
	AkAudioEvent* ArriveSound;//[Offset: 0x70, Size: 0x8]
	Actor* SoundActor;//[Offset: 0x78, Size: 0x8]
	NiagaraComponent* NiagaraComponent;//[Offset: 0x80, Size: 0x8]
	void TickAnim();// 0x640ee3fee041
	void StopAnim();// 0x640de3fee041
	void SetFloorNum(int FloorNum);// 0x640ce3fee041
	float GetParamByNum(int Num);// 0x640be3fee041
	void BeginAnim();// 0x640ae3fee041

--------------------------------
Class: UAPCEscapeComponent.ActorComponent.Object
	FString EscapePresetName;//[Offset: 0xc0, Size: 0x10]
	int[] EscapePointIDs;//[Offset: 0xd0, Size: 0x10]
	int[] PassCheckPointIDs;//[Offset: 0xe0, Size: 0x10]
	int[] HasExploratedPointIDs;//[Offset: 0xf0, Size: 0x10]
	int EscapePresetIndex;//[Offset: 0x100, Size: 0x4]
	void SetHasExploratedEscapePoint(int EscapePointID);// 0x6419e3fee041
	void SetEscapePresetIndex(int InPresetIndex);// 0x6418e3fee041
	void SetEscapePoints(int[] InEscapePointIDs);// 0x6417e3fee041
	void SetEscapePointPassState(int EscapePointID, bool State);// 0x6416e3fee041
	void OnReqPassCheckPointIDs();// 0x6415e3fee041
	void OnReqEscapePointIDs();// 0x6414e3fee041
	bool IsRelatedToPlayer(int EscapePointID);// 0x6413e3fee041
	bool GetHasExploratedEscapePoint(int EscapePointID);// 0x6412e3fee041
	int GetEscapePresetIndex();// 0x6411e3fee041
	int[] GetEscapePoints();// 0x6410e3fee041
	bool GetEscapePointPassState(int EscapePointID);// 0x640fe3fee041

--------------------------------
Class: UAPCEscapeFlowComponent.ActorComponent.Object

--------------------------------
Class: UAPCQuestManagerComponent.ActorComponent.Object
	QuestReplicateData[] ReplicateDataList;//[Offset: 0xc0, Size: 0x10]
	<int,enum> PlayerOldGraphState;//[Offset: 0xd0, Size: 0x50]
	void RemoveGraph(int GraphID);// 0x6422e3fee041
	void RefreshQuestBeforeState(int GraphID);// 0x6421e3fee041
	void OnRep_ReplicateDataList();// 0x6420e3fee041
	void OnQuestGraphStatusChange(MFQuestNodeGraph* NodeGraph, enum NewStatus);// 0x641fe3fee041
	QuestReplicateData[] GetReplicatedList();// 0x641ee3fee041
	QuestReplicateData GetQuestDataWithID(int GraphID);// 0x641de3fee041
	int GetGraphIDFromQuest(MFQuestBase* InQuest);// 0x641ce3fee041
	void AddReplicateQuest(int GraphID, MFQuestBase* Quest, bool bAct);// 0x641be3fee041
	void AddReplicateData(QuestReplicateData ReplicateData, bool bAct);// 0x641ae3fee041

--------------------------------
Class: UAPCRotateRateComponent.SGPCRotateRateComponent.ActorComponent.Object

--------------------------------
Class: UAPCServerCommandComponent.SGPCServerCommandComponent.ActorComponent.Object
	void ViewWeapon();// 0x64b2e3fee041
	void UpdateCharacterSex(enum InCharacterSex, FName CharacterTag);// 0x64b1e3fee041
	void UpdateBadge(int64 badgeId, int AttachPos);// 0x64b0e3fee041
	void UpdateAvatar(enum InCharacterSex, FString InAvatarsIdStr, FName CharacterTag);// 0x64afe3fee041
	void UnLoadLevel(FString LevelName, bool AffectServer);// 0x64aee3fee041
	void UISound();// 0x64ade3fee041
	void UAMoToPoint(int ID);// 0x64ace3fee041
	void UAMoToNextTickPos();// 0x64abe3fee041
	void UAManualLoadLevel(FString LevelName);// 0x64aae3fee041
	void UABenchmark();// 0x64a9e3fee041
	void ToggleUnDead();// 0x64a8e3fee041
	void ToggleDebugPickupInventory();// 0x64a7e3fee041
	void TestQuest(int NodeGraphId, int QuestID);// 0x64a6e3fee041
	void TestMission(int MissionFlowID);// 0x64a5e3fee041
	void TestGraph(int NodeGraphId);// 0x64a4e3fee041
	void TestDynamicMission(FString MissionFlowName);// 0x64a3e3fee041
	void TestActivityMission(FString MissionFlowName);// 0x64a2e3fee041
	void SpawnQuestDist(FString QuestDistName);// 0x64a1e3fee041
	void ShowMask(bool bShow);// 0x64a0e3fee041
	void ShowDebugInputUI();// 0x649fe3fee041
	void ShowAllDestructibleProp();// 0x649ee3fee041
	void ShowAllDestructibleBuilding();// 0x649de3fee041
	void ShowAllDecal();// 0x649ce3fee041
	void SetTeamType(int TeamType);// 0x649be3fee041
	void SetStrategyIdTotalProgress(int StrategyId, int TotalProgress);// 0x649ae3fee041
	void SetStrategyIdCurProgress(int StrategyId, int CurProgress);// 0x6499e3fee041
	void SetSmoothRotationYCulling(bool bCulling);// 0x6498e3fee041
	void SetItemLimitVal(int64 ItemID, float Val);// 0x6497e3fee041
	void SetIsOBPlayer(bool IsOBPlayer);// 0x6496e3fee041
	void SetGuaranteeItemLimitVal(int64 ItemID, float Val);// 0x6495e3fee041
	void SetGraphicStyle(int InStyleIndex);// 0x6494e3fee041
	void SetGraphicsQuality(int Level);// 0x6493e3fee041
	void SetGamePause(bool bPause);// 0x6492e3fee041
	void SetDeathDropType(int DeathDropType);// 0x6491e3fee041
	void SetDeathDropParams(int ConfigId, int Param1, int Param2);// 0x6490e3fee041
	void SetClimateType(FString ClimateType);// 0x648fe3fee041
	void SetCharacterType(enum InCharacterType);// 0x648ee3fee041
	void SetBeginReconnetTime(float InTime);// 0x648de3fee041
	void SetAntiAliasingState(bool bOpen);// 0x648ce3fee041
	void ServerViewWeapon();// 0x648be3fee041
	void ServerUpdateCharacterSex(enum InCharacterSex, FName CharacterTag);// 0x648ae3fee041
	void ServerUpdateBadge(int64 badgeId, int AttachPos);// 0x6489e3fee041
	void ServerUpdateAvatar(enum InCharacterSex, FString InAvatarsIdStr, FName CharacterTag);// 0x6488e3fee041
	void ServerUnloadLevel(FString LevelName);// 0x6487e3fee041
	void ServerUAMoToPoint(int ID);// 0x6486e3fee041
	void ServerUAMoToNextTickPos();// 0x6485e3fee041
	void ServerUAManualLoadLevel(FString LevelName);// 0x6484e3fee041
	void ServerUABenchmark();// 0x6483e3fee041
	void ServerToggleUndead();// 0x6482e3fee041
	void ServerTestQuest(PlayerController* PC, int NodeGraphId, int QuestID);// 0x6481e3fee041
	void ServerTestMission(PlayerController* PC, int MissionFlowID);// 0x6480e3fee041
	void ServerTestGraph(PlayerController* PC, int NodeGraphId);// 0x647fe3fee041
	void ServerTestDynamicMission(PlayerController* PC, FString MissionFlowName);// 0x647ee3fee041
	void ServerTestActivityMission(PlayerController* PC, FString MissionFlowName);// 0x647de3fee041
	void ServerSpawnQuestDist(FString QuestDistName);// 0x647ce3fee041
	void ServerSetTeamType(int TeamType);// 0x647be3fee041
	void ServerSetStrategyIdTotalProgress(int StrategyId, int TotalProgress);// 0x647ae3fee041
	void ServerSetStrategyIdCurProgress(int StrategyId, int CurProgress);// 0x6479e3fee041
	void ServerSetItemLimitVal(int64 ItemID, float Val);// 0x6478e3fee041
	void ServerSetIsOBPlayer(bool IsOBPlayer);// 0x6477e3fee041
	void ServerSetGuaranteeItemLimitVal(int64 ItemID, float Val);// 0x6476e3fee041
	void ServerSetGamePause(bool bPause);// 0x6475e3fee041
	void ServerSetDeathDropType(int DeathDropType);// 0x6474e3fee041
	void ServerSetDeathDropParams(int ConfigId, int Param1, int Param2);// 0x6473e3fee041
	void ServerSetClimateType(FString ClimateType);// 0x6472e3fee041
	void ServerSetBigMoveDeltaTime(int Value);// 0x6471e3fee041
	void ServerRestoreLevel(FString LevelName);// 0x6470e3fee041
	void ServerRemoveQuestDist(FString QuestDistName);// 0x646fe3fee041
	void ServerRemoveGraph(int GraphID);// 0x646ee3fee041
	void ServerRemoveEscapePoint(int EscapePointID);// 0x646de3fee041
	void ServerQuestLogToClient(bool bLogToClient);// 0x646ce3fee041
	void ServerPrintQuest();// 0x646be3fee041
	void ServerPlayGesture(int GestureID);// 0x646ae3fee041
	void ServerOpenEscapePoint(int EscapePointID);// 0x6469e3fee041
	void ServerMoveToEscapePoint(int EscapePointID);// 0x6468e3fee041
	void ServerMemreport();// 0x6467e3fee041
	void ServerMallocLeak(int Type);// 0x6466e3fee041
	void ServerInteractAlarm();// 0x6465e3fee041
	void ServerGotoCheckPoint(int CheckPointIndex);// 0x6464e3fee041
	void ServerGiveItem(uint64 ItemID, int Num, bool bAmmoAutoLoad, bool bDestroyItem);// 0x6463e3fee041
	void ServerGetBox(FString ItemIDs);// 0x6462e3fee041
	void ServerFinishGame(int ResultType);// 0x6461e3fee041
	void ServerEnableSliding(bool bEnableSliding);// 0x6460e3fee041
	void ServerDSCore();// 0x645fe3fee041
	void ServerDebugSpawnPointMode(bool Enable);// 0x645ee3fee041
	void ServerDebugQuestDist();// 0x645de3fee041
	void ServerDebugDynamicMission(FString MissionFlowName);// 0x645ce3fee041
	void ServerDebugActivityMission(FString MissionFlowName);// 0x645be3fee041
	void ServerCreateInv(int64 ItemID, int Num);// 0x645ae3fee041
	void ServerCharacterInventoryCheck(bool bIsCheckAllCharacter);// 0x6459e3fee041
	void ServerChangeSquadID(int ID);// 0x6458e3fee041
	void ServerAddInventoryToLootPoint(int LootPointID, int ItemID, int ItemCount, bool bPiecemealOnly, bool bEmptyOnly);// 0x6457e3fee041
	void ServerAddEscapePoint(int EscapePointID);// 0x6456e3fee041
	void ServerActivateQuest(PlayerController* PC, int NodeGraphId, int QuestID);// 0x6455e3fee041
	void SelfInvCheck();// 0x6454e3fee041
	void RestoreLevel(FString LevelName, bool AffectServer);// 0x6453e3fee041
	void RemoveQuestDist(FString QuestDistName);// 0x6452e3fee041
	void RemoveGraph(int GraphID);// 0x6451e3fee041
	void RemoveEscapePoint(int EscapePointID);// 0x6450e3fee041
	void QuestLogToClient(bool bLogToClient);// 0x644fe3fee041
	void PrintQuest();// 0x644ee3fee041
	void PrintNetGUIDObject(int ID);// 0x644de3fee041
	void PreviewPinyin();// 0x644ce3fee041
	void PreviewLanguage(FString InLanguage);// 0x644be3fee041
	void PreviewEnglish();// 0x644ae3fee041
	void PreviewChinese();// 0x6449e3fee041
	void PlaySequence(FString SequenceName);// 0x6448e3fee041
	void PlayGesture(int GestureID);// 0x6447e3fee041
	void OpenEscapePoint(int EscapePointID);// 0x6446e3fee041
	void NotSendLoadComplete();// 0x6445e3fee041
	void MoveToEscapePoint(int EscapePointID);// 0x6444e3fee041
	void InteractAlarm();// 0x6443e3fee041
	void HideAvatar(int avatarType, bool bHide);// 0x6442e3fee041
	void HideAllDestructibleProp();// 0x6441e3fee041
	void HideAllDestructibleBuilding();// 0x6440e3fee041
	void HideAllDecal();// 0x643fe3fee041
	void HiddenFP(bool bHidden);// 0x643ee3fee041
	void GotoCheckPoint(int CheckPointIndex);// 0x643de3fee041
	void GotoB2();// 0x643ce3fee041
	void GiveItemByDisplayName(FString DisplayName, int Num, bool bAmmoAutoLoad);// 0x643be3fee041
	void GiveItem(int64 ItemID, int Num, bool bAmmoAutoLoad, bool bDestroyItem);// 0x643ae3fee041
	void GetBox(FString ItemIDs);// 0x6439e3fee041
	void FinishGame(int ResultType);// 0x6438e3fee041
	void ExportEscapeVolume();// 0x6437e3fee041
	void EnableSliding(bool bEnableSliding);// 0x6436e3fee041
	void DSMemreport();// 0x6435e3fee041
	void DSMallocLeak(int Type);// 0x6434e3fee041
	void DSCore();// 0x6433e3fee041
	void DebugSpawnPointMode(bool Enable);// 0x6432e3fee041
	void DebugSetWeather(int InWeatherIndex);// 0x6431e3fee041
	void DebugSetTODTime(float InTime);// 0x6430e3fee041
	void DebugQuestDist(bool bShow);// 0x642fe3fee041
	void DebugDynamicMission(bool bShow, FString MissionFlowName);// 0x642ee3fee041
	void DebugActivityMission(bool bShow, FString MissionFlowName);// 0x642de3fee041
	void CreateInv(int64 ItemID, int Num);// 0x642ce3fee041
	void ClearPreloadAvatars(FName CharacterTag);// 0x642be3fee041
	void ClearAllNetWorkObjPool();// 0x642ae3fee041
	void CharacterInventoryCheck(bool bIsCheckServer, bool bIsCheckAllCharacter);// 0x6429e3fee041
	void ChangeSquadID(int ID);// 0x6428e3fee041
	void BeginStaticNetworkObjPool();// 0x6427e3fee041
	void BeginDynamicNetworkObjPool();// 0x6426e3fee041
	void AddInventoryToLootPoint(int LootPointID, int ItemID, int ItemCount, bool bPiecemealOnly, bool bEmptyOnly);// 0x6425e3fee041
	void AddEscapePoint(int EscapePointID);// 0x6424e3fee041
	void ActivateQuest(int NodeGraphId, int QuestID);// 0x6423e3fee041

--------------------------------
Class: UAPhysActorSoundComponent.ActorComponent.Object
	Object* SoundBreakBrick;//[Offset: 0xb8, Size: 0x8]
	Object* SoundBreakAll;//[Offset: 0xc0, Size: 0x8]
	void OnPhysicsActorHit(int RetType);// 0x64b3e3fee041

--------------------------------
Class: UAPlayerCheckPointInfoComponent.SGPlayerCheckPointInfoComponent.SGPlayerStartInterfaceComponent.ActorComponent.Object
	int CheckPointIndex;//[Offset: 0xc0, Size: 0x4]
	class Actor[] DefaultEquipInventories;//[Offset: 0xc8, Size: 0x10]
	enum[] ShowHUDArray;//[Offset: 0xd8, Size: 0x10]
	MFQuestBase* NextQuestActor;//[Offset: 0xe8, Size: 0x8]
	bool ClearAllInventories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: UAPlayerStateBrilliantTimeComp.SGPlayerStateBrilliantTimeComp.ActorComponent.Object

--------------------------------
Class: UAPlayerStateInvDetectActComp.SGPlayerStateInvDetectActComp.ActorComponent.Object

--------------------------------
Class: UAPlayerStateStatisComponent.SGPlayerStateStatisComponent.ActorComponent.Object
	PlayerTakeDamageByWeaponStatistics[] AllWeaponDamageStruct;//[Offset: 0x628, Size: 0x10]
	<FString,StartFireInformationStatistics> AllStartFireStruct;//[Offset: 0x638, Size: 0x50]
	<FString,MeleeStartFireInformationStatistics> AllMeleeStartFireStruct;//[Offset: 0x688, Size: 0x50]
	<FString,ThrowableStartFireInformationStatistics> AllThrowableStartFireStruct;//[Offset: 0x6d8, Size: 0x50]
	ChangeWeaponOrStartFireStruct[] AllChangeWeaponOrStartFireStruct;//[Offset: 0x728, Size: 0x10]
	<SGBulletID,BulletDamageStruct> AllBulletAimStruct;//[Offset: 0x738, Size: 0x50]
	AntiDataStruct[] AllAntiDataStructArray;//[Offset: 0x788, Size: 0x10]
	PlayGestureStatistics[] AllPlayGestureStruct;//[Offset: 0x798, Size: 0x10]
	PlayVoiceStatistics[] AllPlayVoiceStruct;//[Offset: 0x7a8, Size: 0x10]
	OnKillOtherStruct[] AllOnKillOtherStruct;//[Offset: 0x7b8, Size: 0x10]
	UseInventoryFlashStruct[] AllUseInventoryFlashStruct;//[Offset: 0x7c8, Size: 0x10]
	InventoryFlashDebuffStruct[] AllInventoryFlashDebuffStruct;//[Offset: 0x7d8, Size: 0x10]
	ThrowableDebuffStruct ThrowableDebuffStruct;//[Offset: 0x7e8, Size: 0x10]
	int GetComponentNetMode();// 0x64d5e3fee041

--------------------------------
Class: PlayerTakeDamageByWeaponStatistics
	FString WeaponName;//[Offset: 0x0, Size: 0x10]
	FString BulletName;//[Offset: 0x10, Size: 0x10]
	FString WeaponType;//[Offset: 0x20, Size: 0x10]
	int VestLevel;//[Offset: 0x30, Size: 0x4]
	FString VestName;//[Offset: 0x38, Size: 0x10]
	int HelmetLevel;//[Offset: 0x48, Size: 0x4]
	FString HelmetName;//[Offset: 0x50, Size: 0x10]
	FString DamageHitType;//[Offset: 0x60, Size: 0x10]
	float ResultDamage;//[Offset: 0x70, Size: 0x4]
	float ArmorConsume;//[Offset: 0x74, Size: 0x4]
	float PenetrateDamage;//[Offset: 0x78, Size: 0x4]
	float CharacterAllEndurance;//[Offset: 0x7c, Size: 0x4]
	FString HitArmorName;//[Offset: 0x80, Size: 0x10]
	float CurWeaponADSTime;//[Offset: 0x90, Size: 0x4]
	float CurWeaponFireInterval;//[Offset: 0x94, Size: 0x4]
	float ValidAimTime;//[Offset: 0x98, Size: 0x4]
	int DamageHitTypeInt;//[Offset: 0x9c, Size: 0x4]
	float ArmorReduceDamage;//[Offset: 0xa0, Size: 0x4]
	float ShootDistance;//[Offset: 0xa4, Size: 0x4]
	int TeamType;//[Offset: 0xa8, Size: 0x4]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	uint64 ShooterCharacterID;//[Offset: 0xb0, Size: 0x8]
	int ShooterTeamType;//[Offset: 0xb8, Size: 0x4]
	int CharacterType;//[Offset: 0xbc, Size: 0x4]
	int WeaponValue;//[Offset: 0xc0, Size: 0x4]
	int HitSubEndurance;//[Offset: 0xc4, Size: 0x4]
	float VerticalRecoil;//[Offset: 0xc8, Size: 0x4]
	float HorizontalRecoil;//[Offset: 0xcc, Size: 0x4]
	FString SightName;//[Offset: 0xd0, Size: 0x10]
	int WeaponId;//[Offset: 0xe0, Size: 0x4]
	int MapID;//[Offset: 0xe4, Size: 0x4]
	int Weatherid;//[Offset: 0xe8, Size: 0x4]
	int HurtFlowID;//[Offset: 0xec, Size: 0x4]
	int EnemyRoleType;//[Offset: 0xf0, Size: 0x4]
	FString EnemyRoleID;//[Offset: 0xf8, Size: 0x10]
	FString EnemyUserName;//[Offset: 0x108, Size: 0x10]
	int HurtTime;//[Offset: 0x118, Size: 0x4]
	int HurtType;//[Offset: 0x11c, Size: 0x4]
	int DamageStart;//[Offset: 0x120, Size: 0x4]
	int DamageReduce;//[Offset: 0x124, Size: 0x4]
	int HPstart;//[Offset: 0x128, Size: 0x4]
	int HPEnd;//[Offset: 0x12c, Size: 0x4]
	int HelmetHPStart;//[Offset: 0x130, Size: 0x4]
	int HelmetHPEnd;//[Offset: 0x134, Size: 0x4]
	int ArmorHPStart;//[Offset: 0x138, Size: 0x4]
	int ArmorHPEnd;//[Offset: 0x13c, Size: 0x4]
	int FallHeight;//[Offset: 0x140, Size: 0x4]
	int PlayerKilled;//[Offset: 0x144, Size: 0x4]
	FString DebuffStartList;//[Offset: 0x148, Size: 0x10]
	FString DebuffEndList;//[Offset: 0x158, Size: 0x10]
	bool bPenetrateArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]

--------------------------------
Class: StartFireInformationStatistics
	int64 Timestamp;//[Offset: 0x0, Size: 0x8]
	int64 WeaponId;//[Offset: 0x8, Size: 0x8]
	FString WeaponName;//[Offset: 0x10, Size: 0x10]
	int64 BulletID;//[Offset: 0x20, Size: 0x8]
	FString BulletName;//[Offset: 0x28, Size: 0x10]
	int BulletCount;//[Offset: 0x38, Size: 0x4]
	FString WeaponType;//[Offset: 0x40, Size: 0x10]
	bool bADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	float HitDistance;//[Offset: 0x54, Size: 0x4]
	float VerticalRecoil;//[Offset: 0x58, Size: 0x4]
	float HorizontalRecoil;//[Offset: 0x5c, Size: 0x4]
	FString SightName;//[Offset: 0x60, Size: 0x10]
	float EngageDistance;//[Offset: 0x70, Size: 0x4]
	float WaistShotAccuracy;//[Offset: 0x74, Size: 0x4]
	float EffectiveDistance;//[Offset: 0x78, Size: 0x4]
	int TeamType;//[Offset: 0x7c, Size: 0x4]
	int HitCharacterTeamType;//[Offset: 0x80, Size: 0x4]
	int64 HitCharacterPlayerID;//[Offset: 0x88, Size: 0x8]
	int HitEndurance;//[Offset: 0x90, Size: 0x4]
	int HitGroup;//[Offset: 0x94, Size: 0x4]
	float HitEnduranceDamage;//[Offset: 0x98, Size: 0x4]
	int HitSubEndurance;//[Offset: 0x9c, Size: 0x4]
	int HitSubGroup;//[Offset: 0xa0, Size: 0x4]
	float HitSubEnduranceDamage;//[Offset: 0xa4, Size: 0x4]
	int64 ArmorId;//[Offset: 0xa8, Size: 0x8]
	int ArmorLevel;//[Offset: 0xb0, Size: 0x4]
	float CauseArmorConsume;//[Offset: 0xb4, Size: 0x4]
	float CauseArmorReduceDamage;//[Offset: 0xb8, Size: 0x4]
	float ResultDamage;//[Offset: 0xbc, Size: 0x4]
	SGInventory* WeaponInventory;//[Offset: 0xc0, Size: 0x8]
	uint32 ChangeWeaponOrFire;//[Offset: 0xc8, Size: 0x4]
	int HitCharacterType;//[Offset: 0xcc, Size: 0x4]
	int64 HitAIID;//[Offset: 0xd0, Size: 0x8]
	float MoaX;//[Offset: 0xd8, Size: 0x4]
	float MoaY;//[Offset: 0xdc, Size: 0x4]
	int ShootingMode;//[Offset: 0xe0, Size: 0x4]
	int MapID;//[Offset: 0xe4, Size: 0x4]
	int Weatherid;//[Offset: 0xe8, Size: 0x4]
	int AtackFlowID;//[Offset: 0xec, Size: 0x4]
	FString TargetUserName;//[Offset: 0xf0, Size: 0x10]
	int GunType;//[Offset: 0x100, Size: 0x4]
	FString GunPartslist;//[Offset: 0x108, Size: 0x10]
	int BulletSpeed;//[Offset: 0x118, Size: 0x4]
	int MagazineMax;//[Offset: 0x11c, Size: 0x4]
	int MagazineLeft;//[Offset: 0x120, Size: 0x4]
	int ShotFrequency;//[Offset: 0x124, Size: 0x4]
	int BulletDamage;//[Offset: 0x128, Size: 0x4]
	int BulletDamageReduce;//[Offset: 0x12c, Size: 0x4]
	int BulletDown;//[Offset: 0x130, Size: 0x4]
	int ReloadTime;//[Offset: 0x134, Size: 0x4]
	int PlayerPose;//[Offset: 0x138, Size: 0x4]
	int ShotPose;//[Offset: 0x13c, Size: 0x4]
	int FireType;//[Offset: 0x140, Size: 0x4]
	int Sideways;//[Offset: 0x144, Size: 0x4]
	int ShotTime;//[Offset: 0x148, Size: 0x4]
	int HitTime;//[Offset: 0x14c, Size: 0x4]
	int PlayerPositionX;//[Offset: 0x150, Size: 0x4]
	int PlayerPositionY;//[Offset: 0x154, Size: 0x4]
	int PlayerPositionZ;//[Offset: 0x158, Size: 0x4]
	int GunPositionX;//[Offset: 0x15c, Size: 0x4]
	int GunPositionY;//[Offset: 0x160, Size: 0x4]
	int GunPositionZ;//[Offset: 0x164, Size: 0x4]
	int BulletsBornPositionX;//[Offset: 0x168, Size: 0x4]
	int BulletsBornPositionY;//[Offset: 0x16c, Size: 0x4]
	int BulletsBornPositionZ;//[Offset: 0x170, Size: 0x4]
	int LastHitTime;//[Offset: 0x174, Size: 0x4]
	int BulletFlyDistance;//[Offset: 0x178, Size: 0x4]
	int BulletFlyTime;//[Offset: 0x17c, Size: 0x4]
	int HitPositionX;//[Offset: 0x180, Size: 0x4]
	int HitPositionY;//[Offset: 0x184, Size: 0x4]
	int HitPositionZ;//[Offset: 0x188, Size: 0x4]
	int HitPart;//[Offset: 0x18c, Size: 0x4]
	int RecoilMoveX;//[Offset: 0x190, Size: 0x4]
	int RecoilMoveY;//[Offset: 0x194, Size: 0x4]
	int WeaponAimFOV;//[Offset: 0x198, Size: 0x4]
	int BulletDamageBuff;//[Offset: 0x19c, Size: 0x4]
	int HitSubHeadPart;//[Offset: 0x1a0, Size: 0x4]
	bool bPenetrateArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 0x1]

--------------------------------
Class: MeleeStartFireInformationStatistics
	int64 Timestamp;//[Offset: 0x0, Size: 0x8]
	int64 WeaponId;//[Offset: 0x8, Size: 0x8]
	FString WeaponName;//[Offset: 0x10, Size: 0x10]
	FString WeaponType;//[Offset: 0x20, Size: 0x10]
	bool bHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int HitNumber;//[Offset: 0x34, Size: 0x4]
	int HitPmcNumber;//[Offset: 0x38, Size: 0x4]
	int HitScavNumber;//[Offset: 0x3c, Size: 0x4]
	float HitDistance;//[Offset: 0x40, Size: 0x4]
	int TeamType;//[Offset: 0x44, Size: 0x4]
	int HitCharacterTeamType;//[Offset: 0x48, Size: 0x4]
	int64 HitCharacterPlayerID;//[Offset: 0x50, Size: 0x8]
	int HitEndurance;//[Offset: 0x58, Size: 0x4]
	int HitSubEndurance;//[Offset: 0x5c, Size: 0x4]
	int64 ArmorId;//[Offset: 0x60, Size: 0x8]
	int ArmorLevel;//[Offset: 0x68, Size: 0x4]
	float CauseArmorConsume;//[Offset: 0x6c, Size: 0x4]
	float CauseArmorReduceDamage;//[Offset: 0x70, Size: 0x4]
	float ResultDamage;//[Offset: 0x74, Size: 0x4]
	SGInventory* WeaponInventory;//[Offset: 0x78, Size: 0x8]
	int HitCharacterType;//[Offset: 0x80, Size: 0x4]
	int ShotTime;//[Offset: 0x84, Size: 0x4]
	int HitTime;//[Offset: 0x88, Size: 0x4]
	int PlayerPositionX;//[Offset: 0x8c, Size: 0x4]
	int PlayerPositionY;//[Offset: 0x90, Size: 0x4]
	int PlayerPositionZ;//[Offset: 0x94, Size: 0x4]
	int MeleePositionX;//[Offset: 0x98, Size: 0x4]
	int MeleePositionY;//[Offset: 0x9c, Size: 0x4]
	int MeleePositionZ;//[Offset: 0xa0, Size: 0x4]
	int HitPositionX;//[Offset: 0xa4, Size: 0x4]
	int HitPositionY;//[Offset: 0xa8, Size: 0x4]
	int HitPositionZ;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: ThrowableStartFireInformationStatistics
	int64 Timestamp;//[Offset: 0x0, Size: 0x8]
	int64 WeaponId;//[Offset: 0x8, Size: 0x8]
	FString WeaponName;//[Offset: 0x10, Size: 0x10]
	FString WeaponType;//[Offset: 0x20, Size: 0x10]
	bool bHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	FString[] HitCharacterArray;//[Offset: 0x38, Size: 0x10]
	int HitNumber;//[Offset: 0x48, Size: 0x4]
	int HitPmcNumber;//[Offset: 0x4c, Size: 0x4]
	int HitScavNumber;//[Offset: 0x50, Size: 0x4]
	float ThrowDistance;//[Offset: 0x54, Size: 0x4]
	int TeamType;//[Offset: 0x58, Size: 0x4]
	int HitCharacterTeamType;//[Offset: 0x5c, Size: 0x4]
	int64 HitCharacterPlayerID;//[Offset: 0x60, Size: 0x8]
	int HitEndurance;//[Offset: 0x68, Size: 0x4]
	int HitSubEndurance;//[Offset: 0x6c, Size: 0x4]
	int64 ArmorId;//[Offset: 0x70, Size: 0x8]
	int ArmorLevel;//[Offset: 0x78, Size: 0x4]
	float CauseArmorConsume;//[Offset: 0x7c, Size: 0x4]
	float CauseArmorReduceDamage;//[Offset: 0x80, Size: 0x4]
	float ResultDamage;//[Offset: 0x84, Size: 0x4]
	SGInventory* WeaponInventory;//[Offset: 0x88, Size: 0x8]
	int HitCharacterType;//[Offset: 0x90, Size: 0x4]
	int64 HitAIID;//[Offset: 0x98, Size: 0x8]
	int ShotTime;//[Offset: 0xa0, Size: 0x4]
	int HitTime;//[Offset: 0xa4, Size: 0x4]
	int PlayerPositionX;//[Offset: 0xa8, Size: 0x4]
	int PlayerPositionY;//[Offset: 0xac, Size: 0x4]
	int PlayerPositionZ;//[Offset: 0xb0, Size: 0x4]
	int ThrowPositionX;//[Offset: 0xb4, Size: 0x4]
	int ThrowPositionY;//[Offset: 0xb8, Size: 0x4]
	int ThrowPositionZ;//[Offset: 0xbc, Size: 0x4]
	int ProjectileBornPositionX;//[Offset: 0xc0, Size: 0x4]
	int ProjectileBornPositionY;//[Offset: 0xc4, Size: 0x4]
	int ProjectileBornPositionZ;//[Offset: 0xc8, Size: 0x4]
	int HitPositionX;//[Offset: 0xcc, Size: 0x4]
	int HitPositionY;//[Offset: 0xd0, Size: 0x4]
	int HitPositionZ;//[Offset: 0xd4, Size: 0x4]
	int HitCharacterPositionX;//[Offset: 0xd8, Size: 0x4]
	int HitCharacterPositionY;//[Offset: 0xdc, Size: 0x4]
	int HitCharacterPositionZ;//[Offset: 0xe0, Size: 0x4]
	int HitCharacterTeammateNumber;//[Offset: 0xe4, Size: 0x4]
	FString ThrowCharacterID;//[Offset: 0xe8, Size: 0x10]
	bool HegPenetrateObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	int HegPenetrateObstacleNum;//[Offset: 0xfc, Size: 0x4]
	float HegPenetrateObstacleDamage;//[Offset: 0x100, Size: 0x4]
	int HegNumCauseTinnitus;//[Offset: 0x104, Size: 0x4]
	float FragSumBodyDamage;//[Offset: 0x108, Size: 0x4]
	float FragSumArmorDamage;//[Offset: 0x10c, Size: 0x4]
	int FragHitNumber;//[Offset: 0x110, Size: 0x4]
	int FragHitHeadNumber;//[Offset: 0x114, Size: 0x4]
	int FragHitChestNumber;//[Offset: 0x118, Size: 0x4]
	int FragHitStomachNumber;//[Offset: 0x11c, Size: 0x4]
	int FragHitLeftArmNumber;//[Offset: 0x120, Size: 0x4]
	int FragHitRightArmNumber;//[Offset: 0x124, Size: 0x4]
	int FragHitLeftLegNumber;//[Offset: 0x128, Size: 0x4]
	int FragHitRightLegNumber;//[Offset: 0x12c, Size: 0x4]
	int FragHitArmorLevel;//[Offset: 0x130, Size: 0x4]
	float MolotovTime;//[Offset: 0x134, Size: 0x4]
	int MolotovHitNumber;//[Offset: 0x138, Size: 0x4]
	bool ActivityUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]

--------------------------------
Class: ChangeWeaponOrStartFireStruct
	uint64 FireID;//[Offset: 0x0, Size: 0x8]
	FString WeaponName;//[Offset: 0x8, Size: 0x10]
	int bIsChangeWeaponOrStartFire;//[Offset: 0x18, Size: 0x4]
	int bHitCharacter;//[Offset: 0x1c, Size: 0x4]
	int HitEndurance;//[Offset: 0x20, Size: 0x4]
	int HitGroup;//[Offset: 0x24, Size: 0x4]
	float HitEnduranceDamage;//[Offset: 0x28, Size: 0x4]
	int HitSubEndurance;//[Offset: 0x2c, Size: 0x4]
	int HitSubGroup;//[Offset: 0x30, Size: 0x4]
	float HitSubEnduranceDamage;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: BulletDamageStruct
	FString WeaponName;//[Offset: 0x0, Size: 0x10]
	FString BulletName;//[Offset: 0x10, Size: 0x10]
	FString WeaponType;//[Offset: 0x20, Size: 0x10]
	int HitCharacter;//[Offset: 0x30, Size: 0x4]
	int HitArmor;//[Offset: 0x34, Size: 0x4]
	int HitEndurance;//[Offset: 0x38, Size: 0x4]
	int HitGroup;//[Offset: 0x3c, Size: 0x4]
	float HitEnduranceDamage;//[Offset: 0x40, Size: 0x4]
	int HitSubEndurance;//[Offset: 0x44, Size: 0x4]
	int HitSubGroup;//[Offset: 0x48, Size: 0x4]
	float HitSubEnduranceDamage;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: AntiDataStruct
	uint64 roomid;//[Offset: 0x0, Size: 0x8]
	FString ClientVersion;//[Offset: 0x8, Size: 0x10]
	FString AntiData;//[Offset: 0x18, Size: 0x10]
	uint32 Source;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: PlayGestureStatistics
	int PlayTime;//[Offset: 0x0, Size: 0x4]
	int TeamType;//[Offset: 0x4, Size: 0x4]
	int PlayerPositionX;//[Offset: 0x8, Size: 0x4]
	int PlayerPositionY;//[Offset: 0xc, Size: 0x4]
	int channelType;//[Offset: 0x10, Size: 0x4]
	int ActivityMode;//[Offset: 0x14, Size: 0x4]
	int GameMode;//[Offset: 0x18, Size: 0x4]
	int64 PlayerGID;//[Offset: 0x20, Size: 0x8]
	int GestureID;//[Offset: 0x28, Size: 0x4]
	int Triggertype;//[Offset: 0x2c, Size: 0x4]
	uint64 roomid;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PlayVoiceStatistics
	int PlayTime;//[Offset: 0x0, Size: 0x4]
	int TeamType;//[Offset: 0x4, Size: 0x4]
	int PlayerPositionX;//[Offset: 0x8, Size: 0x4]
	int PlayerPositionY;//[Offset: 0xc, Size: 0x4]
	int channelType;//[Offset: 0x10, Size: 0x4]
	int ActivityMode;//[Offset: 0x14, Size: 0x4]
	int GameMode;//[Offset: 0x18, Size: 0x4]
	int64 PlayerGID;//[Offset: 0x20, Size: 0x8]
	int VoiceID;//[Offset: 0x28, Size: 0x4]
	int Triggertype;//[Offset: 0x2c, Size: 0x4]
	uint64 roomid;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: OnKillOtherStruct
	FString WeaponName;//[Offset: 0x0, Size: 0x10]
	FString BulletName;//[Offset: 0x10, Size: 0x10]
	float KillTime;//[Offset: 0x20, Size: 0x4]
	FString HitHelmetInventoryName;//[Offset: 0x28, Size: 0x10]
	FString HitVestInventoryName;//[Offset: 0x38, Size: 0x10]
	int KilledPlayerTeamType;//[Offset: 0x48, Size: 0x4]
	int ArmorLevel;//[Offset: 0x4c, Size: 0x4]
	int HitEndurance;//[Offset: 0x50, Size: 0x4]
	int TeamType;//[Offset: 0x54, Size: 0x4]
	bool bADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	SGInventory* WeaponInventory;//[Offset: 0x60, Size: 0x8]
	float HitDistance;//[Offset: 0x68, Size: 0x4]
	int64 KillerPlayerID;//[Offset: 0x70, Size: 0x8]
	float CauseArmorConsume;//[Offset: 0x78, Size: 0x4]
	float CauseArmorReduceDamage;//[Offset: 0x7c, Size: 0x4]
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	float ResultDamage;//[Offset: 0x84, Size: 0x4]
	float GameRunningTime;//[Offset: 0x88, Size: 0x4]
	int64 KilledCharacterID;//[Offset: 0x90, Size: 0x8]
	int HitGroup;//[Offset: 0x98, Size: 0x4]
	int HitHeadPart;//[Offset: 0x9c, Size: 0x4]
	float KillerPosX;//[Offset: 0xa0, Size: 0x4]
	float KillerPosY;//[Offset: 0xa4, Size: 0x4]
	float KillerPosZ;//[Offset: 0xa8, Size: 0x4]
	float DeathPosX;//[Offset: 0xac, Size: 0x4]
	float DeathPosY;//[Offset: 0xb0, Size: 0x4]
	float DeathPosZ;//[Offset: 0xb4, Size: 0x4]
	int GunID;//[Offset: 0xb8, Size: 0x4]
	uint32 BulletItemID;//[Offset: 0xbc, Size: 0x4]
	uint32 VestItemID;//[Offset: 0xc0, Size: 0x4]
	uint32 HelmetItemID;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: UseInventoryFlashStruct
	float UseTime;//[Offset: 0x0, Size: 0x4]
	float UsePosX;//[Offset: 0x4, Size: 0x4]
	float UsePosY;//[Offset: 0x8, Size: 0x4]
	float UsePosZ;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: InventoryFlashDebuffStruct
	float DebuffTime;//[Offset: 0x0, Size: 0x4]
	float GetDebuffPosX;//[Offset: 0x4, Size: 0x4]
	float GetDebuffPosY;//[Offset: 0x8, Size: 0x4]
	float GetDebuffPosZ;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ThrowableDebuffStruct
	float DizzyTime;//[Offset: 0x0, Size: 0x4]
	float BlindTime;//[Offset: 0x4, Size: 0x4]
	float SlowDownTime;//[Offset: 0x8, Size: 0x4]
	float TinnitusTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UAPlayerStateTeamComponent.SGPlayerStateTeamComponent.ActorComponent.Object
	void SetTeamMemberPlayerInfo(int PlayerIndex, TeamPlayerInfo PlayerInfo);// 0x64dbe3fee041
	void SetClientTeamMemberPlayerInfo(int PlayerIndex, TeamPlayerInfo PlayerInfo);// 0x64dae3fee041
	void ServerSetTeamMemberPlayerInfoArray(int PlayerIndex, TeamPlayerInfo PlayerInfo);// 0x64d9e3fee041
	void OnUpdateOwnerTraceableActor(TraceableActorInfo ActorInfo);// 0x64d8e3fee041
	void OnRemoveOwnerTraceableActor(TraceableActorInfo ActorInfo);// 0x64d7e3fee041
	void OnMissionReplicateDataChanged(enum ChangeType, MFMissionReplicateData MissionReplicateData);// 0x64d6e3fee041

--------------------------------
Class: TeamPlayerInfo
	Vector2D Sign_EscapePointPos;//[Offset: 0x0, Size: 0x8]
	int Sign_EscapePointID;//[Offset: 0x8, Size: 0x4]
	TraceableActorInfo Sign_QuestTraceInfo;//[Offset: 0xc, Size: 0x58]
	Vector2D Sign_PlayerPos;//[Offset: 0x64, Size: 0x8]
	int64 UpdateTimeStamp;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: UAPlayerStatics.SGPlayerStatics.BlueprintFunctionLibrary.Object
	void UnLimitLevelLoad(PlayerController* Controller, bool bEnable);// 0x650ce3fee041
	void SetTeamType(PlayerController* Controller, int TeamType);// 0x650be3fee041
	void SetTeamPlayerSign(PlayerState* PlayerState, int PlayerIndex, TeamPlayerInfo PlayerInfo);// 0x650ae3fee041
	void SetMapOpen(Controller* Controller, bool bOpen);// 0x6509e3fee041
	void SetIsOBPlayer(PlayerController* Controller, bool IsOBPlayer);// 0x6508e3fee041
	void SetBagOpen(Controller* Controller, bool bOpen);// 0x6507e3fee041
	void SetAllUIModeOpen(Controller* Controller, bool bOpen);// 0x6506e3fee041
	bool IsMapOpenned(Controller* Controller);// 0x6505e3fee041
	bool IsCombatStatsOpenned(Controller* Controller);// 0x6504e3fee041
	void FlushPackage(PlayerController* Controller);// 0x6503e3fee041

--------------------------------
Class: UAPlayerTypes.Object

--------------------------------
Class: UAQuestEffect_ModifyBlackboard.MFQuestEffect_ModifyBlackboard.MFQuestEffectBase.Object

--------------------------------
Class: UAQuestStatics.Object
	SGCharacter* TryGetSGCharacterFromQuestInstigator(const MFQuestInstigatorComponentBase* QuestInstigatorComponent);// 0x652be3fee041
	bool IsVaildTask(QuestReplicateData TaskData, Object* WorldContextObject);// 0x652ae3fee041
	bool IsVaildQuest(MFQuestBase* Quest);// 0x6529e3fee041
	bool IsTeamHelpQuest(MFQuestBase* Quest);// 0x6528e3fee041
	bool IsTaskValidInCurrentLevel(PlayerController* PC, int TaskId);// 0x6527e3fee041
	bool IsSeasonQuest(MFQuestBase* Quest, PlayerController* PlayerController);// 0x6526e3fee041
	bool IsQuestValidInCurrentLevel(MFQuestBase* Quest);// 0x6525e3fee041
	bool IsNeedReportProgress(MFQuestBase* Quest);// 0x6524e3fee041
	bool IsNeedReport(MFQuestBase* Quest);// 0x6523e3fee041
	bool IsInstigatorTeamTypeValid(MFQuestBase* Quest);// 0x6522e3fee041
	bool IsInstigatorCharacterTypeValid(MFQuestBase* Quest);// 0x6521e3fee041
	bool IsFailWhenAchieved(MFQuestBase* Quest);// 0x6520e3fee041
	bool HasAutoDestroyInventory(SGInventory* Inventory);// 0x651fe3fee041
	void GiveQuest(Controller* Controller, int NodeGraphId, int QuestID);// 0x651ee3fee041
	MFQuestDistributerBase*[] GetUntriggeredQuestDistributers(Object* WorldContextObject);// 0x651de3fee041
	float GetTimeLimitedQuestRemainTime(MFQuestBase* Quest);// 0x651ce3fee041
	void GetTimeLimitCountDownTime(MFQuestBase* Quest, out float OutRemainTime, out float OutRemainTimeUpdateServerTime);// 0x651be3fee041
	TaskTargetConfTableRow GetTaskTargetConfByTargetID(int TargetId);// 0x651ae3fee041
	TaskConfTableRow GetTaskConfByTaskID(int TaskId);// 0x6519e3fee041
	bool GetSeasonQuestIsUnLockAndLeftDay(MFQuestBase* Quest, PlayerController* PlayerController, out int leftDay, out enum UnLockType);// 0x6518e3fee041
	Character*[] GetRelatedTargets(Object* WorldContextObject, Character* SGCharacter, enum[] RelatedTargetTypes, enum QuestType);// 0x6517e3fee041
	int GetQuestSubTypeByGraphID(int GraphID);// 0x6516e3fee041
	int GetQuestMainTypeByGraphID(int GraphID);// 0x6515e3fee041
	Actor* GetInstigator(MFQuestBase* Quest);// 0x6514e3fee041
	int GetGraphIDByQuest(MFQuestBase* Quest);// 0x6513e3fee041
	DistributeQuestHistory[] GetDistributeQuestHistories(Object* WorldContextObject);// 0x6512e3fee041
	QuestInventory[] GetAllQuestInventoryData(PlayerController* PC);// 0x6511e3fee041
	bool DistributeQuest(SGCharacter* PC, int NodeGraphId, bool bDuplicateCheck);// 0x6510e3fee041
	bool CharacterHasEmergencyTask(Character* Character, enum QuestType);// 0x650fe3fee041
	bool CharacterHasActivityTask(Character* Character, enum QuestType);// 0x650ee3fee041
	bool CanBeTrace(PlayerController* PC, int TaskId);// 0x650de3fee041

--------------------------------
Class: UAReplicationGraph.ReplicationGraph.ReplicationDriver.Object
	class Object[] SpatializedClasses;//[Offset: 0x540, Size: 0x10]
	class Object[] NonSpatializedChildClasses;//[Offset: 0x550, Size: 0x10]
	class Object[] AlwaysRelevantClasses;//[Offset: 0x560, Size: 0x10]
	ReplicationGraphNode_GridSpatialization2D* GridNode;//[Offset: 0x570, Size: 0x8]
	UAReplicationGraphNode_CrossList* CrossListNode;//[Offset: 0x578, Size: 0x8]
	UAReplicationGraphNode_AlwaysRelevant* AlwaysRelevantNode;//[Offset: 0x580, Size: 0x8]
	UAReplicationGraphNode_AlwaysRelevantToTeam* AlwaysRelevantToTeamNode;//[Offset: 0x588, Size: 0x8]
	ConnectionAlwaysRelevantNodePair[] AlwaysRelevantForConnectionList;//[Offset: 0x5e0, Size: 0x10]
	<NetConnection*,UAReplicationGraphNode_AlwaysRelevant_ForConnection*> AlwaysRelevantForConnectionNodes;//[Offset: 0x5f0, Size: 0x50]
	<Controller*,NetConnection*> ControllerConnectionMap;//[Offset: 0x640, Size: 0x50]
	<AIController*,RelevantFollowActorList> AINovisableItemMap;//[Offset: 0x690, Size: 0x50]
	void OnQuestOwnerChanged(MFQuestBase* InvActor, Actor* NewInvOwner);// 0x6535e3fee041
	void OnInventoryVisableChanged(SGInventory* InvActor, bool OldVisable, bool NewVisable);// 0x6534e3fee041
	void OnInventorySearched(Character* Character, SGInventory* Inventory);// 0x6533e3fee041
	void OnInventoryPosChanged(SGInventory* InvActor);// 0x6532e3fee041
	void OnInventoryParentActorChanged(SGInventory* InvActor, Actor* ParentActor, int InParentIndex);// 0x6531e3fee041
	void OnInventoryOwnerChanged(SGInventory* InvActor, Actor* OldInvOwner, Actor* NewInvOwner, bool NewVisable);// 0x6530e3fee041
	void OnInventoryGameplayDefinedVisableChanged(SGInventory* InvActor);// 0x652fe3fee041
	void OnInventoryAttachPositionChanged(SGInventory* Inventory, Actor* ParentActor, enum NewAttachPosition, enum OldAttachPosition);// 0x652ee3fee041
	void OnControllerPlayerSetted(PlayerController* InvActor);// 0x652de3fee041
	void OnCharacterUnPossessed(Character* Char);// 0x652ce3fee041

--------------------------------
Class: UAReplicationGraphNode_CrossList.ReplicationGraphNode.Object

--------------------------------
Class: UAReplicationGraphNode_AlwaysRelevant.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object
	ReplicationGraphNode_DormancyNode* DormancyNode;//[Offset: 0xf8, Size: 0x8]

--------------------------------
Class: UAReplicationGraphNode_AlwaysRelevantToTeam.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: UAReplicationGraphNode_AlwaysRelevant_ForConnection.ReplicationGraphNode.Object
	NetReplicationGraphConnection* Owner;//[Offset: 0x50, Size: 0x8]
	Actor*[] AlwaysRelevantInventoryReplication;//[Offset: 0x268, Size: 0x10]
	Actor* LastPawn;//[Offset: 0x2c0, Size: 0x8]
	AlwaysRelevantActorInfo[] PastRelevantActors;//[Offset: 0x2c8, Size: 0x10]

--------------------------------
Class: RelevantFollowActorList
	Actor*[] ActorList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UAReplicationGraphNode_PlayerStateFrequencyLimiter.ReplicationGraphNode.Object

--------------------------------
Class: UAReplicationGraphNode_GridSpatialization2D.ReplicationGraphNode_GridSpatialization2D.ReplicationGraphNode.Object

--------------------------------
Class: UAReplicationGraphNode_RelevantFollowOwner.ReplicationGraphNode.Object
	<Actor*,RelevantFollowActorList> RelevantFollowActorListMap;//[Offset: 0x50, Size: 0x50]
	<Actor*,Actor*> InverseRelevantFollowActorListMap;//[Offset: 0xa0, Size: 0x50]
	<Actor*,RelevantFollowActorList> PendingRelevantFollowActorListMap;//[Offset: 0xf0, Size: 0x50]

--------------------------------
Class: UARepGraphNode_ActorListFreqBuckets.ReplicationGraphNode_ActorListFrequencyBuckets.ReplicationGraphNode.Object

--------------------------------
Class: UARepGraphNode_DynamicSpatialFreq.ReplicationGraphNode_DynamicSpatialFrequency.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: TestCrossList.UAReplicationGraphNode_CrossList.ReplicationGraphNode.Object

--------------------------------
Class: UAReplicationGraphNode_GridCell.ReplicationGraphNode_GridCell.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: UAScreenBorderManager.Object
	void UnegisterScreenCircle(FString InKeyName);// 0x6539e3fee041
	void UnegisterScreenBorder(FString InKeyName);// 0x6538e3fee041
	void RegisterScreenCircle(FString InKeyName, const float radiusX, const float radiusY);// 0x6537e3fee041
	void RegisterScreenBorder(FString InKeyName, const float mLeft, const float mTop, const float mRight, const float mBottom);// 0x6536e3fee041

--------------------------------
Class: UAShootTestTarget.Actor.Object
	int HitCount;//[Offset: 0x2e8, Size: 0x4]

--------------------------------
Class: UAShowControlStatics.BlueprintFunctionLibrary.Object
	Actor*[] GetSeqenceActorsByClass(LevelSequenceActor* SequenceActor, FName Tag, class Actor ActorClass);// 0x653ae3fee041

--------------------------------
Class: UASpatializeStaticActor.Actor.Object

--------------------------------
Class: UAStatisticDataCollectCore_Stat.MFStatisticDataCollectCore.Object
	SceneObjInfo_Stat[] SceneInfoCollect_Stat;//[Offset: 0x38, Size: 0x10]
	DataTable* MyTable;//[Offset: 0x48, Size: 0x8]
	FString CollectKeyWord;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: SceneObjInfo_Stat.SceneObjeInfo_Base

--------------------------------
Class: UAStatisticDataCollectCore_StatCmp.MFStatisticDataCollectCore.Object
	SceneObjInfo_Stat[] SceneInfoCollect_Stat;//[Offset: 0x38, Size: 0x10]
	DataTable* MyTable;//[Offset: 0x48, Size: 0x8]
	DataTable* MyTableCmp;//[Offset: 0x50, Size: 0x8]
	FString CollectKeyWord;//[Offset: 0x58, Size: 0x10]
	bool bIsAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: UAStatCollectCore.MFStatCollectCore.Object

--------------------------------
Class: UAStatisTableWrapper.Object

--------------------------------
Class: UATeamEscapeComponent.ActorComponent.Object
	UATeamEscapeRow[] StateMap;//[Offset: 0xb8, Size: 0x10]
	void SetEscapePointState(int EscapePointID, enum State);// 0x653de3fee041
	void OnRep_StateMapChange();// 0x653ce3fee041
	enum GetEscapePointExploreState(int EscapePointID);// 0x653be3fee041

--------------------------------
Class: UATeamEscapeRow
	int EscapePointID;//[Offset: 0x0, Size: 0x4]
	enum State;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: UATeamInfo.SGTeamInfo.SGTeam.Actor.Object
	TeamPlayerInfo[] TeamMemberPlayerInfosArray;//[Offset: 0x448, Size: 0x10]
	TeamPlayerInfo[] OldTeamMemberPlayerInfosArray;//[Offset: 0x458, Size: 0x10]
	TeamPlayerBaseInfo[] TeamMemberPlayerBaseInfosArray;//[Offset: 0x468, Size: 0x10]
	void SetTeamMemberPlayerInfoArray(int PlayerIndex, TeamPlayerInfo PlayerInfo);// 0x654ae3fee041
	void OnRep_TeamMemberPlayerInfosArray();// 0x6549e3fee041
	void OnEscapePointsChange(PlayerState* PlayerState, out const int[] EscapePointIDs);// 0x6548e3fee041
	int GetTeamMemberValidPlayerSignNum();// 0x6547e3fee041
	Vector2D GetTeamMemberSignPositionByIndexAndSignType(int Index, enum Type);// 0x6546e3fee041
	TeamPlayerInfo GetTeamMemberPlayerInfoByIndex(int Index);// 0x6545e3fee041
	TeamPlayerBaseInfo GetTeamMemberPlayerBaseInfoByIndex(int Index);// 0x6544e3fee041
	int GetTargetMemberIdxByTaskId(int TaskId, int selfTeamId);// 0x6543e3fee041
	int GetTargetMemberIdxByConfigID(int ConfigId, int selfTeamId);// 0x6542e3fee041
	int GetSquadIndex(int Index);// 0x6541e3fee041
	void GetRefTeamMemberSignPositionByIndexAndSignType(int Index, enum Type, out Vector2D Pos);// 0x6540e3fee041
	bool GetRefTeamMemberPlayerInfoByIndex(int Index, out TeamPlayerInfo Info);// 0x653fe3fee041
	int GetChangeTeamPlayerInfo(TeamPlayerInfo[] OldInfosArray, TeamPlayerInfo[] NewInfosArray, out enum SignType, out bool IsNewSign);// 0x653ee3fee041

--------------------------------
Class: TeamPlayerBaseInfo
	uint64 GID;//[Offset: 0x0, Size: 0x8]
	int SquadIndex;//[Offset: 0x8, Size: 0x4]
	SGPlayerState* PlayerState;//[Offset: 0x10, Size: 0x8]
	enum CharacterSex;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: UATeammateInfoSubWidget.UAFollowCharacterWidget.SGUserWidget.UserWidget.Widget.Visual.Object
	SGPlayerStateChaseActivityInfoComponent* PlayerStateChaseActivityInfoComponent;//[Offset: 0x320, Size: 0x8]
	PlayerState* TeammatePlayerState;//[Offset: 0x328, Size: 0x8]
	SlateColor[] TeammateLighterColors;//[Offset: 0x330, Size: 0x10]
	SlateColor[] TeammateDarkerColors;//[Offset: 0x340, Size: 0x10]
	Image*[] LighterColorImages;//[Offset: 0x350, Size: 0x10]
	Image*[] DarkerColorImages;//[Offset: 0x360, Size: 0x10]
	float CharecterInvisibleOpacity;//[Offset: 0x370, Size: 0x4]
	Vector WorldOffset;//[Offset: 0x374, Size: 0xc]
	Vector WorldOffsetDBNO;//[Offset: 0x380, Size: 0xc]
	Vector2D ScreenOffset;//[Offset: 0x38c, Size: 0x8]
	Vector2D ScreenOffsetDBNO;//[Offset: 0x394, Size: 0x8]
	float MinOpacity;//[Offset: 0x39c, Size: 0x4]
	float OpacityRadius;//[Offset: 0x3a0, Size: 0x4]
	Image* SpecialImage;//[Offset: 0x3a8, Size: 0x8]
	SlateBrush MentorBrush;//[Offset: 0x3b0, Size: 0x90]
	SlateBrush PupilBrush;//[Offset: 0x440, Size: 0x90]
	TextBlock* PlayerNameTextWidget;//[Offset: 0x4d0, Size: 0x8]
	TextBlock* PlayerNumberTextWidget;//[Offset: 0x4d8, Size: 0x8]
	Widget* RescueWidget;//[Offset: 0x4e0, Size: 0x8]
	Widget* NumberWidget;//[Offset: 0x4e8, Size: 0x8]
	Widget* HealthBarWidget;//[Offset: 0x4f0, Size: 0x8]
	Widget* ValuablesWidget;//[Offset: 0x4f8, Size: 0x8]
	float ShowValuableDistance;//[Offset: 0x500, Size: 0x4]
	SlateColor SquadLighterColor;//[Offset: 0x508, Size: 0x28]
	SlateColor SquadDarkerColor;//[Offset: 0x530, Size: 0x28]
	void OnExitDBNOStatus(Character* Character);// 0x654ce3fee041
	void OnEnterDBNOStatus(Character* Character);// 0x654be3fee041

--------------------------------
Class: UATeammateInfoWidget.SGUserWidget.UserWidget.Widget.Visual.Object
	PlayerState* LocalPlayerState;//[Offset: 0x2c8, Size: 0x8]
	PlayerController* LocalPlayerController;//[Offset: 0x2d0, Size: 0x8]
	Character* LocalCharacter;//[Offset: 0x2d8, Size: 0x8]
	class UAFollowCharacterWidget* SubWidgetClass;//[Offset: 0x2e0, Size: 0x8]
	UAFollowCharacterWidget*[] SubWidgets;//[Offset: 0x2e8, Size: 0x10]
	PlayerState*[] ExistedTeammatePlayerStates;//[Offset: 0x2f8, Size: 0x10]
	UAFollowCharacterWidget*[] DestroyedSubWidgets;//[Offset: 0x308, Size: 0x10]
	class UAFollowCharacterWidget* DossSubWidgetClass;//[Offset: 0x318, Size: 0x8]
	UAFollowCharacterWidget* DossSubWidget;//[Offset: 0x320, Size: 0x8]
	CanvasPanel* CanvasPanel;//[Offset: 0x328, Size: 0x8]
	void TraceableActorInfoUpdate(int Handle, float LastUpdateServerTime);// 0x654fe3fee041
	void OnDossSpawned(Character* AICharacter);// 0x654ee3fee041
	UAFollowCharacterWidget* CreateSubWidget(PlayerController* InPlayerController, Character* InCharacter, class UAFollowCharacterWidget InSubWidgetClass);// 0x654de3fee041

--------------------------------
Class: UATeamStatics.SGTeamStatics.BlueprintFunctionLibrary.Object
	void SaveTeamKillData(SGTeamInfo* Team);// 0x6554e3fee041
	void SaveTeamInventoryData(SGTeamInfo* Team);// 0x6553e3fee041
	void SavePlayerTeamZoneInfo(PlayerController* PC);// 0x6552e3fee041
	TeamPlayerInfo GetTeamMemberPlayerInfoByPlayerState(PlayerState* PS);// 0x6551e3fee041
	void ClearTeamMemberPlayerInfoByPlayerState(PlayerState* PS);// 0x6550e3fee041

--------------------------------
Class: UATeamZoneInfoComponent.ActorComponent.Object
	<uint64,SGPlayerEquipInfo> TeamMemberInventory;//[Offset: 0xb8, Size: 0x50]
	<uint64,SGZonePlayerInfo> TeamMemberZoneInfo;//[Offset: 0x108, Size: 0x50]
	<uint64,int> TeamMemberResult;//[Offset: 0x158, Size: 0x50]
	<uint64,int> TeamMemberKillNum;//[Offset: 0x1a8, Size: 0x50]
	uint64[] TeamMemberGIDs;//[Offset: 0x1f8, Size: 0x10]
	int GetPlayerKillNum(uint64 GID);// 0x655ae3fee041
	SGPlayerEquipInfo GetPlayerEquipInfo(uint64 GID);// 0x6559e3fee041
	void AddPlayerResult(uint64 GID, int Result);// 0x6558e3fee041
	void AddPlayerPlayerInfo(uint64 GID, SGZonePlayerInfo ZonePlayerInfo);// 0x6557e3fee041
	void AddPlayerKillNum(uint64 GID, int KillNum);// 0x6556e3fee041
	void AddPlayerEquipInfo(uint64 GID, SGPlayerEquipInfo EquipInfo);// 0x6555e3fee041

--------------------------------
Class: UATelescopeFiringComponent.SGWeaponFiringComponent.ActorComponent.Object
	float DefaultCoolDownTime;//[Offset: 0x588, Size: 0x4]

--------------------------------
Class: UAThirdPersonCameraMode_Death.SGThirdPersonCameraMode_Death.SGThirdPersonCameraMode_Stand.SGThirdPersonCameraMode_StandBase.SGThirdPersonCameraMode_Alive.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: UAThirdPersonCameraMode_Drone.SGThirdPersonCameraMode.SGCameraMode.Object
	CurveFloat* PitchCurve;//[Offset: 0x258, Size: 0x8]
	CurveFloat* RollCurve;//[Offset: 0x260, Size: 0x8]

--------------------------------
Class: UAThirdPersonCameraMode_DroneFly.SGThirdPersonCameraMode.SGCameraMode.Object

--------------------------------
Class: UATutorialHelper.Actor.Object
	TutorialCheckpointSettings[] TutorialCheckpoints;//[Offset: 0x2e0, Size: 0x10]
	DataTable* CaptainTips;//[Offset: 0x2f0, Size: 0x8]
	SGAIController* CaptainController;//[Offset: 0x2f8, Size: 0x8]
	SGAICharacter* CaptainCharacter;//[Offset: 0x300, Size: 0x8]
	class ActorComponent[] DisableCaptainComponents;//[Offset: 0x308, Size: 0x10]
	class SGCharacterAnimationSets* CharacterAnimationSetsClass;//[Offset: 0x318, Size: 0x8]
	class SGPerWeaponAnimationSets* PerWeaponAnimationSetsClass;//[Offset: 0x320, Size: 0x8]
	void SetCaptain(AIController* Controller);// 0x655ee3fee041
	float PlayCaptainMontage(out const FName VoiceID);// 0x655de3fee041
	void OnBeginTutorial(int CheckPointIndex);// 0x655ce3fee041
	void BeginTutorial(int CheckPointIndex);// 0x655be3fee041

--------------------------------
Class: TutorialCheckpointSettings
	SGPlayerStart* PlayerStart;//[Offset: 0x0, Size: 0x8]
	bool bResetCaptainRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: UATutorialStatics.BlueprintFunctionLibrary.Object
	void UnSelectItem(Object* WorldContextObject);// 0x65a1e3fee041
	UserWidget* TutorialCreateWidget(Object* WorldContextObject, class Object UMGClass);// 0x65a0e3fee041
	void TutorialCloseBag(Object* WorldContextObject);// 0x659fe3fee041
	void TutorialAIFireKillTarget(SGCharacter* AICharacter);// 0x659ee3fee041
	void TutorialAIFire(SGCharacter* AICharacter);// 0x659de3fee041
	void StopSequence(LevelSequenceActor* SequenceActor);// 0x659ce3fee041
	void StopMedia(Object* WorldContextObject);// 0x659be3fee041
	void ShowFacePaintWidget(Object* WorldContextObject, int[] WidgetID, float Time, bool ShowEffet);// 0x659ae3fee041
	void SetSprintEnable(Object* WorldContextObject, PlayerController* PlayerController, bool bEnable);// 0x6599e3fee041
	void SetOnItemLockedByID(Object* WorldContextObject, int64[] itemidArray);// 0x6598e3fee041
	void SetLifeStateClickEnable(Object* WorldContextObject, bool Enable);// 0x6597e3fee041
	void SetFollowBarIsShow(Object* WorldContextObject, bool bShow, Actor* Target, Vector Offset, FString TextStrKey, enum FlowBarType, bool IsLocalOffset);// 0x6596e3fee041
	void SetChangeMovementInput(Object* WorldContextObject, bool bEnable);// 0x6595e3fee041
	void SetChangeCemareMovementInput(Object* WorldContextObject, bool bEnable);// 0x6594e3fee041
	void SetBuffEnable(Object* WorldContextObject, FName[] BuffTag, bool bEnable);// 0x6593e3fee041
	void SetBlackfilmFade(Object* WorldContextObject, bool Enable, float PlayTime);// 0x6592e3fee041
	void SetBlackBarEnableByWidthHeight(PlayerController* PlayerController, bool bEnable, float Width, float High, float BlendTime, bool bEffectUI);// 0x6591e3fee041
	void SetBlackBarEnableByHeightRatio(PlayerController* PlayerController, bool bEnable, float ShowRatio, float BlendTime, bool bEffectUI);// 0x6590e3fee041
	void SetBlackBarEnable(PlayerController* PlayerController, bool bEnable, float AspectRatio, float BlendTime);// 0x658fe3fee041
	void SetBagContainerUIBlock(Object* WorldContextObject, enum BagType, bool bShow);// 0x658ee3fee041
	void SetAimTarget(SGCharacter* AICharacter, SGCharacter* AimCharacter, bool bKill);// 0x658de3fee041
	void ReportRookieID(Object* WorldContextObject, int64 RookieID);// 0x658ce3fee041
	void RemoveAllActiveEffects(SGCharacter* Character);// 0x658be3fee041
	void RegisterAISpawn(Object* WorldContextObject);// 0x658ae3fee041
	void PlaySequence(LevelSequenceActor* SequenceActor, delegate OnSequenceFinish);// 0x6589e3fee041
	void PlayMediaNoBlockEnd(Object* WorldContextObject, LatentActionInfo LatentInfo);// 0x6588e3fee041
	void PlayMediaNoBlock(Object* WorldContextObject, FileMediaSource* MediaSouce);// 0x6587e3fee041
	void PlayMedia(Object* WorldContextObject, FileMediaSource* MediaSouce, delegate InDelegate);// 0x6586e3fee041
	void PlayBlink(Object* WorldContextObject, int Type);// 0x6585e3fee041
	void PlayB1EndEffect(Object* WorldContextObject);// 0x6584e3fee041
	void PauseSequence(LevelSequenceActor* SequenceActor);// 0x6583e3fee041
	void MediaPlayFinish(Object* WorldContextObject);// 0x6582e3fee041
	bool IsTutorialMode(Object* WorldContextObject);// 0x6581e3fee041
	bool IsGreenHandMode(Object* WorldContextObject);// 0x6580e3fee041
	UAGSTutorialEventComponent* GetTutorialEventComponent(Object* WorldContextObject);// 0x657fe3fee041
	float GetSpeedScale();// 0x657ee3fee041
	bool GetMediaIsPlay();// 0x657de3fee041
	float GetEnduranceValue();// 0x657ce3fee041
	Actor* GetDeathBoxBySpawnPoint(Object* WorldContextObject, SGAISpawnPoint* SpawnPoint);// 0x657be3fee041
	float GetCoachSpeedScale();// 0x657ae3fee041
	Actor* GetCoachActor(Object* WorldContextObject);// 0x6579e3fee041
	Character* GetAICharacterBySpawnPoint(Object* WorldContextObject, SGAISpawnPoint* SpawnPoint);// 0x6578e3fee041
	bool CheckForLoadComplete(Object* WorldContextObject);// 0x6577e3fee041
	void CharacterConditonCheckEnable(Object* WorldContextObject, bool Enable);// 0x6576e3fee041
	void ChangeViewTarget(Object* WorldContextObject, Actor* Target, byte TraceType, int ShowLoopNum);// 0x6575e3fee041
	void ChangeTutorialSpeed(Object* WorldContextObject, PlayerController* PlayerController, float SpeedScale);// 0x6574e3fee041
	void ChangeTutorialCoachSpeedScale(Object* WorldContextObject, float SpeedScale);// 0x6573e3fee041
	void ChangeStarSightEffectShow(Object* WorldContextObject, bool bShow, int LoopNum);// 0x6572e3fee041
	void ChangeMediaEndType(Object* WorldContextObject, bool bEnable);// 0x6571e3fee041
	void ChangeEnduranceValue(PlayerController* PlayerController, float ChangeValue, class GameplayEffect EffectClass);// 0x6570e3fee041
	void BroadCastTutorialSequenceFinish(Object* WorldContextObject);// 0x656fe3fee041
	void BroadcastSetItemSelectMenuEnable(Object* WorldContextObject, bool bEnable);// 0x656ee3fee041
	void BroadCastOnThrowingWeaponEffectEnable(Object* WorldContextObject, bool Enable);// 0x656de3fee041
	void BroadcastOnSettingPannalStateChange(Object* WorldContextObject, int State);// 0x656ce3fee041
	void BroadcastOnItemMoveFail(Object* WorldContextObject);// 0x656be3fee041
	void BroadcastOnHealthUIClick(Object* WorldContextObject, enum EnduranceType);// 0x656ae3fee041
	void BroadcastOnFireBtnClick(Object* WorldContextObject);// 0x6569e3fee041
	void BroadcastOnFakeMapClicked(Object* WorldContextObject);// 0x6568e3fee041
	void BroadcastOnFacePanelStateChange(Object* WorldContextObject, bool bShow);// 0x6567e3fee041
	void BroadcastOnCheckWeapon(Object* WorldContextObject);// 0x6566e3fee041
	void BroadcastFinishEscape(Object* WorldContextObject, SGVolume* EscapeVolume);// 0x6565e3fee041
	void BroadCastCreateTeamReqAndStartMatching(Object* WorldContextObject, bool IsSingleTeam, int64 PlayModeId);// 0x6564e3fee041
	void BroadcastClickItem(Object* WorldContextObject, SGInventory* item);// 0x6563e3fee041
	void BroadcastBigMapStateChange(Object* WorldContextObject, bool bShow);// 0x6562e3fee041
	void BroadCastBeginUseItem(Actor* Character, SGInventory* Inventory, enum UseInBodyType);// 0x6561e3fee041
	void BroadcastBagTabClick(Object* WorldContextObject, int BagType, int BagTabType);// 0x6560e3fee041
	void BroadcastBagStateChange(Object* WorldContextObject, bool bShow, int BagType, Actor* Container);// 0x655fe3fee041

--------------------------------
Class: FileMediaSource.BaseMediaSource.MediaSource.Object
	FString FilePath;//[Offset: 0x88, Size: 0x10]
	bool PrecacheFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	void SetFilePath(FString Path);// 0x69f3e3fee041

--------------------------------
Class: BaseMediaSource.MediaSource.Object
	FName PlayerName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: UAUnifyWrapper.Actor.Object
	UAWindWrapperComponent* Wind;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: UAWindWrapperComponent.ActorComponent.Object

--------------------------------
Class: UAUserWidget_UrgentQuestDangerBtn.SGUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* RootPanel;//[Offset: 0x2c8, Size: 0x8]
	Overlay* QuestInfoToggle;//[Offset: 0x2d0, Size: 0x8]
	UAButtonWidget* UAButton;//[Offset: 0x2d8, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2e0, Size: 0x8]
	UAUserWidget_UrgentQuestDangerInfo* BP_MobileWidget_UrgentQuest_DangerInfo;//[Offset: 0x2e8, Size: 0x8]
	bool bShowQuestInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	MFMissionReplicateData MissionReplicateData;//[Offset: 0x2f8, Size: 0x60]
	int GraphID;//[Offset: 0x358, Size: 0x4]
	<Widget*,InvisibleTag> WidgetInvisibleTags;//[Offset: 0x360, Size: 0x50]
	FString[] InProcessMissionFlow;//[Offset: 0x3b0, Size: 0x10]
	TimerHandle CountDownTimerHandle;//[Offset: 0x3c0, Size: 0x8]
	void ToggleShowQuestInfo();// 0x65afe3fee041
	void StopCustomTick();// 0x65aee3fee041
	void StartCustomTick();// 0x65ade3fee041
	void SetVisibleWithTag(Widget* Widget, FName Tag, bool Visible);// 0x65ace3fee041
	void SetQuestProgress();// 0x65abe3fee041
	void SetClearAreaQuestProgress();// 0x65aae3fee041
	void OnUIModeChanged(enum NewUIMode, enum OldUIMode);// 0x65a9e3fee041
	void OnTimeLimitedQuestCountDown(Actor* Quest, bool bShow);// 0x65a8e3fee041
	void OnQuestReportVisibleChanged(bool bVisible);// 0x65a7e3fee041
	void OnMissionReplicateDataChanged(enum ChangeType, MFMissionReplicateData InMissionReplicateData);// 0x65a6e3fee041
	float GetServerWorldTime();// 0x65a5e3fee041
	float GetRemainTime();// 0x65a4e3fee041
	FString GetQuestName();// 0x65a3e3fee041
	void CustomTick();// 0x65a2e3fee041

--------------------------------
Class: UAUserWidget_UrgentQuestDangerInfo.SGUserWidget.UserWidget.Widget.Visual.Object
	UAButtonWidget* JumpToQuestPageButton;//[Offset: 0x2c8, Size: 0x8]
	TextBlock* TaskCondText;//[Offset: 0x2d0, Size: 0x8]
	TextBlock* TaskCondText;//[Offset: 0x2d8, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: InvisibleTag

--------------------------------
Class: UAVehicleTypes.Object

--------------------------------
Class: UAVolumeInteractComponent.UAInteractComponentBase.SGInteractComponentBase.ActorComponent.Object
	bool bEnterVolumeAutoComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	bool bEnableTriggerCompleteEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x162, Size: 0x1]
	void OnRep_EnterVolumeAutoComplete();// 0x65b5e3fee041
	void OnCharacterLeave(Actor* Other);// 0x65b4e3fee041
	void OnCharacterEnter(Actor* Other);// 0x65b3e3fee041
	void OnAICharacterEnter(Actor* Other);// 0x65b2e3fee041
	void ActorEndOverlap_Implementation(Actor* Other, ActorComponent* OtherComponent);// 0x65b1e3fee041
	void ActorBeginOverlap_Implementation(Actor* Other, ActorComponent* OtherComponent);// 0x65b0e3fee041

--------------------------------
Class: UAVolumeSpawnInventoryComponent.ActorComponent.Object
	VolumeSpawnedInventoryInfo[] SpawnedInventoryInfos;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: VolumeSpawnedInventoryInfo
	SGInventory* SpawnedInventory;//[Offset: 0x0, Size: 0x8]
	MissionObjectiveSpawnInventoryInfo SpawnInventoryInfo;//[Offset: 0x8, Size: 0x68]

--------------------------------
Class: UAWeaponViewEffectComponent.SGWeaponViewEffectComponent.ActorComponent.Object
	CurveFloat* ViewEffectCurve;//[Offset: 0xc0, Size: 0x8]
	MaterialInstance* WeaponPostMat;//[Offset: 0xc8, Size: 0x8]
	MaterialInstanceDynamic* WeaponPostMatDynamic;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: InputCoreTypes.Object

--------------------------------
Class: FontBulkData.Object

--------------------------------
Class: FontFaceInterface.Interface.Object

--------------------------------
Class: FontProviderInterface.Interface.Object

--------------------------------
Class: SlateTypes.Object

--------------------------------
Class: SlateWidgetStyleContainerInterface.Interface.Object

--------------------------------
Class: ButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ButtonStyle ButtonStyle;//[Offset: 0x30, Size: 0x298]

--------------------------------
Class: CheckBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x30, Size: 0x5c8]

--------------------------------
Class: ComboBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboBoxStyle ComboBoxStyle;//[Offset: 0x30, Size: 0x420]

--------------------------------
Class: ComboButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x30, Size: 0x3e8]

--------------------------------
Class: EditableTextBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextBoxStyle EditableTextBoxStyle;//[Offset: 0x30, Size: 0x860]

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundImageNormal;//[Offset: 0x8, Size: 0x90]
	SlateBrush BackgroundImageHovered;//[Offset: 0x98, Size: 0x90]
	SlateBrush BackgroundImageFocused;//[Offset: 0x128, Size: 0x90]
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x1b8, Size: 0x90]
	Margin Padding;//[Offset: 0x248, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x258, Size: 0x58]
	SlateColor ForegroundColor;//[Offset: 0x2b0, Size: 0x28]
	SlateColor BackgroundColor;//[Offset: 0x2d8, Size: 0x28]
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x300, Size: 0x28]
	Margin HScrollBarPadding;//[Offset: 0x328, Size: 0x10]
	Margin VScrollBarPadding;//[Offset: 0x338, Size: 0x10]
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x348, Size: 0x518]

--------------------------------
Class: EditableTextWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextStyle EditableTextStyle;//[Offset: 0x30, Size: 0x238]

--------------------------------
Class: EditableTextStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58]
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x28]
	SlateBrush BackgroundImageSelected;//[Offset: 0x88, Size: 0x90]
	SlateBrush BackgroundImageComposing;//[Offset: 0x118, Size: 0x90]
	SlateBrush CaretImage;//[Offset: 0x1a8, Size: 0x90]

--------------------------------
Class: ProgressWidgetStyle.SlateWidgetStyleContainerBase.Object
	ProgressBarStyle ProgressBarStyle;//[Offset: 0x30, Size: 0x1b8]

--------------------------------
Class: ScrollBarWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x30, Size: 0x518]

--------------------------------
Class: ScrollBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBoxStyle ScrollBoxStyle;//[Offset: 0x30, Size: 0x248]

--------------------------------
Class: SlateSettings.Object
	bool bExplicitCanvasChildZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: SpinBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	SpinBoxStyle SpinBoxStyle;//[Offset: 0x30, Size: 0x310]

--------------------------------
Class: SpinBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundBrush;//[Offset: 0x8, Size: 0x90]
	SlateBrush HoveredBackgroundBrush;//[Offset: 0x98, Size: 0x90]
	SlateBrush ActiveFillBrush;//[Offset: 0x128, Size: 0x90]
	SlateBrush InactiveFillBrush;//[Offset: 0x1b8, Size: 0x90]
	SlateBrush ArrowsImage;//[Offset: 0x248, Size: 0x90]
	SlateColor ForegroundColor;//[Offset: 0x2d8, Size: 0x28]
	Margin TextPadding;//[Offset: 0x300, Size: 0x10]

--------------------------------
Class: TextBlockWidgetStyle.SlateWidgetStyleContainerBase.Object
	TextBlockStyle TextBlockStyle;//[Offset: 0x30, Size: 0x288]

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58]
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x28]
	Vector2D ShadowOffset;//[Offset: 0x88, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x90, Size: 0x10]
	SlateColor SelectedBackgroundColor;//[Offset: 0xa0, Size: 0x28]
	LinearColor HighlightColor;//[Offset: 0xc8, Size: 0x10]
	SlateBrush HighlightShape;//[Offset: 0xd8, Size: 0x90]
	SlateBrush StrikeBrush;//[Offset: 0x168, Size: 0x90]
	SlateBrush UnderlineBrush;//[Offset: 0x1f8, Size: 0x90]

--------------------------------
Class: ToolMenuBase.Object

--------------------------------
Class: ImageWriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	void ExportToDisk(Texture* Texture, FString Filename, out const ImageWriteOptions Options);// 0x65b6e3fee041

--------------------------------
Class: ImageWriteOptions
	enum Format;//[Offset: 0x0, Size: 0x1]
	delegate OnComplete;//[Offset: 0x4, Size: 0x10]
	int CompressionQuality;//[Offset: 0x14, Size: 0x4]
	bool bOverwriteFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: GameNetworkManagerSettings.Object
	int MinDynamicBandwidth;//[Offset: 0x28, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x2c, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x30, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x34, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x3c, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x40, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x44, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x48, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x4c, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: GameSessionSettings.Object
	int MaxSpectators;//[Offset: 0x28, Size: 0x4]
	int MaxPlayers;//[Offset: 0x2c, Size: 0x4]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: GeneralEngineSettings.Object

--------------------------------
Class: GeneralProjectSettings.Object
	FString CompanyName;//[Offset: 0x28, Size: 0x10]
	FString CompanyDistinguishedName;//[Offset: 0x38, Size: 0x10]
	FString CopyrightNotice;//[Offset: 0x48, Size: 0x10]
	FString Description;//[Offset: 0x58, Size: 0x10]
	FString Homepage;//[Offset: 0x68, Size: 0x10]
	FString LicensingTerms;//[Offset: 0x78, Size: 0x10]
	FString PrivacyPolicy;//[Offset: 0x88, Size: 0x10]
	Guid ProjectID;//[Offset: 0x98, Size: 0x10]
	FString ProjectName;//[Offset: 0xa8, Size: 0x10]
	FString ProjectVersion;//[Offset: 0xb8, Size: 0x10]
	FString SupportContact;//[Offset: 0xc8, Size: 0x10]
	FText ProjectDisplayedTitle;//[Offset: 0xd8, Size: 0x18]
	FText ProjectDebugTitleInfo;//[Offset: 0xf0, Size: 0x18]
	bool bShouldWindowPreserveAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	bool bUseBorderlessWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1]
	bool bStartInVR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 0x1]
	bool bAllowWindowResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b, Size: 0x1]
	bool bAllowClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	bool bAllowMaximize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1]
	bool bAllowMinimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1]

--------------------------------
Class: HudSettings.Object
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	FName[] DebugDisplay;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ChaosPhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	float StaticFriction;//[Offset: 0x2c, Size: 0x4]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	float LinearEtherDrag;//[Offset: 0x34, Size: 0x4]
	float AngularEtherDrag;//[Offset: 0x38, Size: 0x4]
	float SleepingLinearVelocityThreshold;//[Offset: 0x3c, Size: 0x4]
	float SleepingAngularVelocityThreshold;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MeshReconstructorBase.Object
	void StopReconstruction();// 0x65c0e3fee041
	void StartReconstruction();// 0x65bfe3fee041
	void PauseReconstruction();// 0x65bee3fee041
	bool IsReconstructionStarted();// 0x65bde3fee041
	bool IsReconstructionPaused();// 0x65bce3fee041
	void DisconnectMRMesh();// 0x65bbe3fee041
	void ConnectMRMesh(MRMeshComponent* Mesh);// 0x65bae3fee041

--------------------------------
Class: MRMeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* Material;//[Offset: 0x5c0, Size: 0x8]
	MaterialInterface* WireframeMaterial;//[Offset: 0x5c8, Size: 0x8]
	bool bCreateMeshProxySections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	bool bUpdateNavMeshOnMeshUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 0x1]
	bool bNeverCreateCollisionMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d2, Size: 0x1]
	BodySetup* CachedBodySetup;//[Offset: 0x5d8, Size: 0x8]
	BodySetup*[] BodySetups;//[Offset: 0x5e0, Size: 0x10]
	void SetWireframeMaterial(MaterialInterface* InMaterial);// 0x65cae3fee041
	void SetWireframeColor(out const LinearColor InColor);// 0x65c9e3fee041
	void SetUseWireframe(bool bUseWireframe);// 0x65c8e3fee041
	void SetEnableMeshOcclusion(bool bEnable);// 0x65c7e3fee041
	bool IsConnected();// 0x65c6e3fee041
	LinearColor GetWireframeColor();// 0x65c5e3fee041
	bool GetUseWireframe();// 0x65c4e3fee041
	bool GetEnableMeshOcclusion();// 0x65c3e3fee041
	void ForceNavMeshUpdate();// 0x65c2e3fee041
	void Clear();// 0x65c1e3fee041

--------------------------------
Class: MockDataMeshTrackerComponent.SceneComponent.ActorComponent.Object
	delegate OnMeshTrackerUpdated;//[Offset: 0x208, Size: 0x10]
	bool ScanWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	bool RequestNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 0x1]
	bool RequestVertexConfidence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a, Size: 0x1]
	enum VertexColorMode;//[Offset: 0x21b, Size: 0x1]
	Color[] BlockVertexColors;//[Offset: 0x220, Size: 0x10]
	LinearColor VertexColorFromConfidenceZero;//[Offset: 0x230, Size: 0x10]
	LinearColor VertexColorFromConfidenceOne;//[Offset: 0x240, Size: 0x10]
	float UpdateInterval;//[Offset: 0x250, Size: 0x4]
	MRMeshComponent* MRMesh;//[Offset: 0x258, Size: 0x8]
	void OnMockDataMeshTrackerUpdated__DelegateSignature(int Index, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const float[] Confidence);// 0x1f3de3fee041
	void DisconnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0x1f3ce3fee041
	void ConnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0x1f3be3fee041

--------------------------------
Class: ARActor.Actor.Object
	ARComponent* AddARComponent(class ARComponent InComponentClass, out const Guid NativeID);// 0x65cbe3fee041

--------------------------------
Class: ARComponent.SceneComponent.ActorComponent.Object
	Guid NativeID;//[Offset: 0x204, Size: 0x10]
	bool bUseDefaultReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x250, Size: 0x8]
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x258, Size: 0x8]
	MRMeshComponent* MRMeshComponent;//[Offset: 0x260, Size: 0x8]
	ARTrackedGeometry* MyTrackedGeometry;//[Offset: 0x268, Size: 0x8]
	void UpdateVisualization();// 0x6615e3fee041
	void SetNativeID(Guid NativeID);// 0x6614e3fee041
	void ReceiveRemove();// 0x6613e3fee041
	void OnRep_Payload();// 0x6612e3fee041
	MRMeshComponent* GetMRMesh();// 0x6611e3fee041

--------------------------------
Class: ARTrackedGeometry.Object
	Guid UniqueID;//[Offset: 0x28, Size: 0x10]
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x30]
	Transform LocalToAlignedTrackingTransform;//[Offset: 0x70, Size: 0x30]
	enum TrackingState;//[Offset: 0xa0, Size: 0x1]
	MRMeshComponent* UnderlyingMesh;//[Offset: 0xb0, Size: 0x8]
	enum ObjectClassification;//[Offset: 0xb8, Size: 0x1]
	int LastUpdateFrameNumber;//[Offset: 0xd0, Size: 0x4]
	FName DebugName;//[Offset: 0xe0, Size: 0x8]
	bool IsTracked();// 0x6685e3fee041
	MRMeshComponent* GetUnderlyingMesh();// 0x6684e3fee041
	enum GetTrackingState();// 0x6683e3fee041
	enum GetObjectClassification();// 0x6682e3fee041
	FString GetName();// 0x6681e3fee041
	Transform GetLocalToWorldTransform();// 0x6680e3fee041
	Transform GetLocalToTrackingTransform();// 0x667fe3fee041
	float GetLastUpdateTimestamp();// 0x667ee3fee041
	int GetLastUpdateFrameNumber();// 0x667de3fee041
	FName GetDebugName();// 0x667ce3fee041

--------------------------------
Class: ARBlueprintLibrary.BlueprintFunctionLibrary.Object
	void UnpinComponent(SceneComponent* ComponentToUnpin);// 0x6608e3fee041
	bool ToggleARCapture(const bool bOnOff, const enum CaptureType);// 0x6607e3fee041
	void StopARSession();// 0x6606e3fee041
	void StartARSession(ARSessionConfig* SessionConfig);// 0x6605e3fee041
	void SetEnabledXRCamera(bool bOnOff);// 0x6604e3fee041
	void SetARWorldScale(float InWorldScale);// 0x6603e3fee041
	void SetARWorldOriginLocationAndRotation(Vector OriginLocation, Rotator OriginRotation, bool bIsTransformInWorldSpace, bool bMaintainUpDirection);// 0x6602e3fee041
	void SetAlignmentTransform(out const Transform InAlignmentTransform);// 0x6601e3fee041
	bool SaveARPinToLocalStore(FName InSaveName, ARPin* InPin);// 0x6600e3fee041
	IntPoint ResizeXRCamera(out const IntPoint InSize);// 0x65ffe3fee041
	void RemovePin(ARPin* PinToRemove);// 0x65fee3fee041
	void RemoveARPinFromLocalStore(FName InSaveName);// 0x65fde3fee041
	void RemoveAllARPinsFromLocalStore();// 0x65fce3fee041
	ARPin* PinComponentToTraceResult(SceneComponent* ComponentToPin, out const ARTraceResult TraceResult, const FName DebugName);// 0x65fbe3fee041
	bool PinComponentToARPin(SceneComponent* ComponentToPin, ARPin* Pin);// 0x65fae3fee041
	ARPin* PinComponent(SceneComponent* ComponentToPin, out const Transform PinToWorldTransform, ARTrackedGeometry* TrackedGeometry, const FName DebugName);// 0x65f9e3fee041
	void PauseARSession();// 0x65f8e3fee041
	<FName,ARPin*> LoadARPinsFromLocalStore();// 0x65f7e3fee041
	ARTraceResult[] LineTraceTrackedObjects3D(const Vector Start, const Vector End, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0x65f6e3fee041
	ARTraceResult[] LineTraceTrackedObjects(const Vector2D ScreenCoord, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0x65f5e3fee041
	bool IsSessionTypeSupported(enum SessionType);// 0x65f4e3fee041
	bool IsSessionTrackingFeatureSupported(enum SessionType, enum SessionTrackingFeature);// 0x65f3e3fee041
	bool IsSceneReconstructionSupported(enum SessionType, enum SceneReconstructionMethod);// 0x65f2e3fee041
	bool IsARSupported();// 0x65f1e3fee041
	bool IsARPinLocalStoreSupported();// 0x65f0e3fee041
	bool IsARPinLocalStoreReady();// 0x65efe3fee041
	enum GetWorldMappingStatus();// 0x65eee3fee041
	enum GetTrackingQualityReason();// 0x65ede3fee041
	enum GetTrackingQuality();// 0x65ece3fee041
	ARVideoFormat[] GetSupportedVideoFormats(enum SessionType);// 0x65ebe3fee041
	ARSessionConfig* GetSessionConfig();// 0x65eae3fee041
	Vector[] GetPointCloud();// 0x65e9e3fee041
	ARTexture* GetPersonSegmentationImage();// 0x65e8e3fee041
	ARTexture* GetPersonSegmentationDepthImage();// 0x65e7e3fee041
	bool GetObjectClassificationAtLocation(out const Vector InWorldLocation, out enum OutClassification, out Vector OutClassificationLocation, float MaxLocationDiff);// 0x65e6e3fee041
	int GetNumberOfTrackedFacesSupported();// 0x65e5e3fee041
	ARLightEstimate* GetCurrentLightEstimate();// 0x65e4e3fee041
	bool GetCameraIntrinsics(out ARCameraIntrinsics OutCameraIntrinsics);// 0x65e3e3fee041
	ARTextureCameraImage* GetCameraImage();// 0x65e2e3fee041
	ARTextureCameraDepth* GetCameraDepth();// 0x65e1e3fee041
	float GetARWorldScale();// 0x65e0e3fee041
	ARTexture* GetARTexture(enum TextureType);// 0x65dfe3fee041
	ARSessionStatus GetARSessionStatus();// 0x65dee3fee041
	ARTrackedPose*[] GetAllTrackedPoses();// 0x65dde3fee041
	ARTrackedPoint*[] GetAllTrackedPoints();// 0x65dce3fee041
	ARPlaneGeometry*[] GetAllTrackedPlanes();// 0x65dbe3fee041
	ARTrackedImage*[] GetAllTrackedImages();// 0x65dae3fee041
	AREnvironmentCaptureProbe*[] GetAllTrackedEnvironmentCaptureProbes();// 0x65d9e3fee041
	ARPose2D[] GetAllTracked2DPoses();// 0x65d8e3fee041
	ARPin*[] GetAllPins();// 0x65d7e3fee041
	ARTrackedGeometry*[] GetAllGeometriesByClass(class ARTrackedGeometry GeometryClass);// 0x65d6e3fee041
	ARTrackedGeometry*[] GetAllGeometries();// 0x65d5e3fee041
	Transform GetAlignmentTransform();// 0x65d4e3fee041
	ARTrackedPoint*[] FindTrackedPointsByName(FString PointName);// 0x65d3e3fee041
	void DebugDrawTrackedGeometry(ARTrackedGeometry* TrackedGeometry, Object* WorldContextObject, LinearColor Color, float OutlineThickness, float PersistForSeconds);// 0x65d2e3fee041
	void DebugDrawPin(ARPin* ARPin, Object* WorldContextObject, LinearColor Color, float Scale, float PersistForSeconds);// 0x65d1e3fee041
	void CalculateClosestIntersection(out const Vector[] StartPoints, out const Vector[] EndPoints, out Vector ClosestIntersection);// 0x65d0e3fee041
	void CalculateAlignmentTransform(out const Transform TransformInFirstCoordinateSystem, out const Transform TransformInSecondCoordinateSystem, out Transform AlignmentTransform);// 0x65cfe3fee041
	bool AddTrackedPointWithName(out const Transform WorldTransform, FString PointName, bool bDeletePointsWithSameName);// 0x65cee3fee041
	ARCandidateImage* AddRuntimeCandidateImage(ARSessionConfig* SessionConfig, Texture2D* CandidateTexture, FString FriendlyName, float PhysicalWidth);// 0x65cde3fee041
	bool AddManualEnvironmentCaptureProbe(Vector Location, Vector Extent);// 0x65cce3fee041

--------------------------------
Class: ARSessionConfig.DataAsset.Object
	bool bGenerateMeshDataFromTrackedGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bGenerateCollisionForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bGenerateNavMeshForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool bUseMeshDataForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	bool bRenderMeshDataInWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bTrackSceneObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool bUsePersonSegmentationForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	bool bUseSceneDepthForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1]
	bool bUseAutomaticImageScaleEstimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bUseStandardOnboardingUX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	enum WorldAlignment;//[Offset: 0x3a, Size: 0x1]
	enum SessionType;//[Offset: 0x3b, Size: 0x1]
	enum PlaneDetectionMode;//[Offset: 0x3c, Size: 0x1]
	bool bHorizontalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bVerticalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	bool bEnableAutoFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 0x1]
	enum LightEstimationMode;//[Offset: 0x40, Size: 0x1]
	enum FrameSyncMode;//[Offset: 0x41, Size: 0x1]
	bool bEnableAutomaticCameraOverlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool bEnableAutomaticCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	bool bResetCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bResetTrackedObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	ARCandidateImage*[] CandidateImages;//[Offset: 0x48, Size: 0x10]
	int MaxNumSimultaneousImagesTracked;//[Offset: 0x58, Size: 0x4]
	enum EnvironmentCaptureProbeType;//[Offset: 0x5c, Size: 0x1]
	byte[] WorldMapData;//[Offset: 0x60, Size: 0x10]
	ARCandidateObject*[] CandidateObjects;//[Offset: 0x70, Size: 0x10]
	ARVideoFormat DesiredVideoFormat;//[Offset: 0x80, Size: 0xc]
	bool bUseOptimalVideoFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	enum FaceTrackingDirection;//[Offset: 0x8d, Size: 0x1]
	enum FaceTrackingUpdate;//[Offset: 0x8e, Size: 0x1]
	int MaxNumberOfTrackedFaces;//[Offset: 0x90, Size: 0x4]
	byte[] SerializedARCandidateImageDatabase;//[Offset: 0x98, Size: 0x10]
	enum EnabledSessionTrackingFeature;//[Offset: 0xa8, Size: 0x1]
	enum SceneReconstructionMethod;//[Offset: 0xa9, Size: 0x1]
	class ARPlaneComponent* PlaneComponentClass;//[Offset: 0xb0, Size: 0x8]
	class ARPointComponent* PointComponentClass;//[Offset: 0xb8, Size: 0x8]
	class ARFaceComponent* FaceComponentClass;//[Offset: 0xc0, Size: 0x8]
	class ARImageComponent* ImageComponentClass;//[Offset: 0xc8, Size: 0x8]
	class ARQRCodeComponent* QRCodeComponentClass;//[Offset: 0xd0, Size: 0x8]
	class ARPoseComponent* PoseComponentClass;//[Offset: 0xd8, Size: 0x8]
	class AREnvironmentProbeComponent* EnvironmentProbeComponentClass;//[Offset: 0xe0, Size: 0x8]
	class ARObjectComponent* ObjectComponentClass;//[Offset: 0xe8, Size: 0x8]
	class ARMeshComponent* MeshComponentClass;//[Offset: 0xf0, Size: 0x8]
	class ARGeoAnchorComponent* GeoAnchorComponentClass;//[Offset: 0xf8, Size: 0x8]
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x100, Size: 0x8]
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x108, Size: 0x8]
	bool ShouldResetTrackedObjects();// 0x6670e3fee041
	bool ShouldResetCameraTracking();// 0x666fe3fee041
	bool ShouldRenderCameraOverlay();// 0x666ee3fee041
	bool ShouldEnableCameraTracking();// 0x666de3fee041
	bool ShouldEnableAutoFocus();// 0x666ce3fee041
	void SetWorldMapData(byte[] WorldMapData);// 0x666be3fee041
	void SetSessionTrackingFeatureToEnable(enum InSessionTrackingFeature);// 0x666ae3fee041
	void SetSceneReconstructionMethod(enum InSceneReconstructionMethod);// 0x6669e3fee041
	void SetResetTrackedObjects(bool bNewValue);// 0x6668e3fee041
	void SetResetCameraTracking(bool bNewValue);// 0x6667e3fee041
	void SetFaceTrackingUpdate(enum InUpdate);// 0x6666e3fee041
	void SetFaceTrackingDirection(enum InDirection);// 0x6665e3fee041
	void SetEnableAutoFocus(bool bNewValue);// 0x6664e3fee041
	void SetDesiredVideoFormat(ARVideoFormat NewFormat);// 0x6663e3fee041
	void SetCandidateObjectList(out const ARCandidateObject*[] InCandidateObjects);// 0x6662e3fee041
	byte[] GetWorldMapData();// 0x6661e3fee041
	enum GetWorldAlignment();// 0x6660e3fee041
	enum GetSessionType();// 0x665fe3fee041
	enum GetSceneReconstructionMethod();// 0x665ee3fee041
	enum GetPlaneDetectionMode();// 0x665de3fee041
	int GetMaxNumSimultaneousImagesTracked();// 0x665ce3fee041
	enum GetLightEstimationMode();// 0x665be3fee041
	enum GetFrameSyncMode();// 0x665ae3fee041
	enum GetFaceTrackingUpdate();// 0x6659e3fee041
	enum GetFaceTrackingDirection();// 0x6658e3fee041
	enum GetEnvironmentCaptureProbeType();// 0x6657e3fee041
	enum GetEnabledSessionTrackingFeature();// 0x6656e3fee041
	ARVideoFormat GetDesiredVideoFormat();// 0x6655e3fee041
	ARCandidateObject*[] GetCandidateObjectList();// 0x6654e3fee041
	ARCandidateImage*[] GetCandidateImageList();// 0x6653e3fee041
	void AddCandidateObject(ARCandidateObject* CandidateObject);// 0x6652e3fee041
	void AddCandidateImage(ARCandidateImage* NewCandidateImage);// 0x6651e3fee041

--------------------------------
Class: ARVideoFormat
	int FPS;//[Offset: 0x0, Size: 0x4]
	int Width;//[Offset: 0x4, Size: 0x4]
	int Height;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ARCandidateImage.DataAsset.Object
	Texture2D* CandidateTexture;//[Offset: 0x30, Size: 0x8]
	FString FriendlyName;//[Offset: 0x38, Size: 0x10]
	float Width;//[Offset: 0x48, Size: 0x4]
	float Height;//[Offset: 0x4c, Size: 0x4]
	enum Orientation;//[Offset: 0x50, Size: 0x1]
	float GetPhysicalWidth();// 0x669ee3fee041
	float GetPhysicalHeight();// 0x669de3fee041
	enum GetOrientation();// 0x669ce3fee041
	FString GetFriendlyName();// 0x669be3fee041
	Texture2D* GetCandidateTexture();// 0x669ae3fee041

--------------------------------
Class: ARCandidateObject.DataAsset.Object
	byte[] CandidateObjectData;//[Offset: 0x30, Size: 0x10]
	FString FriendlyName;//[Offset: 0x40, Size: 0x10]
	Box BoundingBox;//[Offset: 0x50, Size: 0x1c]
	void SetFriendlyName(FString NewName);// 0x66a4e3fee041
	void SetCandidateObjectData(out const byte[] InCandidateObject);// 0x66a3e3fee041
	void SetBoundingBox(out const Box InBoundingBox);// 0x66a2e3fee041
	FString GetFriendlyName();// 0x66a1e3fee041
	byte[] GetCandidateObjectData();// 0x66a0e3fee041
	Box GetBoundingBox();// 0x669fe3fee041

--------------------------------
Class: ARPlaneComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPlaneUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x80]
	void SetPlaneComponentDebugMode(enum NewDebugMode);// 0x661be3fee041
	void SetObjectClassificationDebugColors(out const <enum,LinearColor> InColors);// 0x661ae3fee041
	void ServerUpdatePayload(const ARPlaneUpdatePayload NewPayload);// 0x6619e3fee041
	void ReceiveUpdate(out const ARPlaneUpdatePayload Payload);// 0x6618e3fee041
	void ReceiveAdd(out const ARPlaneUpdatePayload Payload);// 0x6617e3fee041
	<enum,LinearColor> GetObjectClassificationDebugColors();// 0x6616e3fee041

--------------------------------
Class: ARPlaneUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30]
	Vector Center;//[Offset: 0x50, Size: 0xc]
	Vector Extents;//[Offset: 0x5c, Size: 0xc]
	Vector[] BoundaryVertices;//[Offset: 0x68, Size: 0x10]
	enum ObjectClassification;//[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ARSessionPayload
	int ConfigFlags;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x8, Size: 0x8]
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ARPointComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPointUpdatePayload ReplicatedPayload;//[Offset: 0x284, Size: 0x1]
	void ServerUpdatePayload(const ARPointUpdatePayload NewPayload);// 0x661ee3fee041
	void ReceiveUpdate(out const ARPointUpdatePayload Payload);// 0x661de3fee041
	void ReceiveAdd(out const ARPointUpdatePayload Payload);// 0x661ce3fee041

--------------------------------
Class: ARPointUpdatePayload

--------------------------------
Class: ARFaceComponent.ARComponent.SceneComponent.ActorComponent.Object
	enum TransformSetting;//[Offset: 0x284, Size: 0x1]
	bool bUpdateVertexNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1]
	bool bFaceOutOfScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x286, Size: 0x1]
	ARFaceUpdatePayload ReplicatedPayload;//[Offset: 0x288, Size: 0x40]
	void SetFaceComponentDebugMode(enum NewDebugMode);// 0x6622e3fee041
	void ServerUpdatePayload(const ARFaceUpdatePayload NewPayload);// 0x6621e3fee041
	void ReceiveUpdate(out const ARFaceUpdatePayload Payload);// 0x6620e3fee041
	void ReceiveAdd(out const ARFaceUpdatePayload Payload);// 0x661fe3fee041

--------------------------------
Class: ARFaceUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Vector LeftEyePosition;//[Offset: 0x18, Size: 0xc]
	Vector RightEyePosition;//[Offset: 0x24, Size: 0xc]
	Vector LookAtTarget;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: ARImageComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARImageUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x60]
	void SetImageComponentDebugMode(enum NewDebugMode);// 0x6626e3fee041
	void ServerUpdatePayload(const ARImageUpdatePayload NewPayload);// 0x6625e3fee041
	void ReceiveUpdate(out const ARImageUpdatePayload Payload);// 0x6624e3fee041
	void ReceiveAdd(out const ARImageUpdatePayload Payload);// 0x6623e3fee041

--------------------------------
Class: ARImageUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30]
	ARCandidateImage* DetectedImage;//[Offset: 0x50, Size: 0x8]
	Vector2D EstimatedSize;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: ARQRCodeComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARQRCodeUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x70]
	void SetQRCodeComponentDebugMode(enum NewDebugMode);// 0x662ae3fee041
	void ServerUpdatePayload(const ARQRCodeUpdatePayload NewPayload);// 0x6629e3fee041
	void ReceiveUpdate(out const ARQRCodeUpdatePayload Payload);// 0x6628e3fee041
	void ReceiveAdd(out const ARQRCodeUpdatePayload Payload);// 0x6627e3fee041

--------------------------------
Class: ARQRCodeUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30]
	Vector Extents;//[Offset: 0x50, Size: 0xc]
	FString QRCode;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: ARPoseComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPoseUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x40]
	void SetPoseComponentDebugMode(enum NewDebugMode);// 0x662ee3fee041
	void ServerUpdatePayload(const ARPoseUpdatePayload NewPayload);// 0x662de3fee041
	void ReceiveUpdate(out const ARPoseUpdatePayload Payload);// 0x662ce3fee041
	void ReceiveAdd(out const ARPoseUpdatePayload Payload);// 0x662be3fee041

--------------------------------
Class: ARPoseUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x30]
	Transform[] JointTransforms;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AREnvironmentProbeComponent.ARComponent.SceneComponent.ActorComponent.Object
	AREnvironmentProbeUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x30]
	void ServerUpdatePayload(const AREnvironmentProbeUpdatePayload NewPayload);// 0x6631e3fee041
	void ReceiveUpdate(out const AREnvironmentProbeUpdatePayload Payload);// 0x6630e3fee041
	void ReceiveAdd(out const AREnvironmentProbeUpdatePayload Payload);// 0x662fe3fee041

--------------------------------
Class: AREnvironmentProbeUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x30]

--------------------------------
Class: ARObjectComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARObjectUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x30]
	void ServerUpdatePayload(const ARObjectUpdatePayload NewPayload);// 0x6634e3fee041
	void ReceiveUpdate(out const ARObjectUpdatePayload Payload);// 0x6633e3fee041
	void ReceiveAdd(out const ARObjectUpdatePayload Payload);// 0x6632e3fee041

--------------------------------
Class: ARObjectUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x30]

--------------------------------
Class: ARMeshComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARMeshUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x60]
	void ServerUpdatePayload(const ARMeshUpdatePayload NewPayload);// 0x6637e3fee041
	void ReceiveUpdate(out const ARMeshUpdatePayload Payload);// 0x6636e3fee041
	void ReceiveAdd(out const ARMeshUpdatePayload Payload);// 0x6635e3fee041

--------------------------------
Class: ARMeshUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30]
	enum ObjectClassification;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: ARGeoAnchorComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARGeoAnchorUpdatePayload ReplicatedPayload;//[Offset: 0x290, Size: 0x70]
	void SetGeoAnchorComponentDebugMode(enum NewDebugMode);// 0x663be3fee041
	void ServerUpdatePayload(const ARGeoAnchorUpdatePayload NewPayload);// 0x663ae3fee041
	void ReceiveUpdate(out const ARGeoAnchorUpdatePayload Payload);// 0x6639e3fee041
	void ReceiveAdd(out const ARGeoAnchorUpdatePayload Payload);// 0x6638e3fee041

--------------------------------
Class: ARGeoAnchorUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30]
	float Longitude;//[Offset: 0x50, Size: 0x4]
	float Latitude;//[Offset: 0x54, Size: 0x4]
	float AltitudeMeters;//[Offset: 0x58, Size: 0x4]
	enum AltitudeSource;//[Offset: 0x5c, Size: 0x1]
	FString AnchorName;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: ARPin.Object
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x28, Size: 0x8]
	SceneComponent* PinnedComponent;//[Offset: 0x30, Size: 0x8]
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x30]
	Transform LocalToAlignedTrackingTransform;//[Offset: 0x70, Size: 0x30]
	enum TrackingState;//[Offset: 0xa0, Size: 0x1]
	delegate OnARTrackingStateChanged;//[Offset: 0xc0, Size: 0x10]
	delegate OnARTransformUpdated;//[Offset: 0xd0, Size: 0x10]
	enum GetTrackingState();// 0x6650e3fee041
	ARTrackedGeometry* GetTrackedGeometry();// 0x664fe3fee041
	SceneComponent* GetPinnedComponent();// 0x664ee3fee041
	Transform GetLocalToWorldTransform();// 0x664de3fee041
	Transform GetLocalToTrackingTransform();// 0x664ce3fee041
	FName GetDebugName();// 0x664be3fee041
	void DebugDraw(World* World, out const LinearColor Color, float Scale, float PersistForSeconds);// 0x664ae3fee041

--------------------------------
Class: ARTraceResult
	float DistanceFromCamera;//[Offset: 0x0, Size: 0x4]
	enum TraceChannel;//[Offset: 0x4, Size: 0x1]
	Transform LocalTransform;//[Offset: 0x10, Size: 0x30]
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: ARTexture.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0xe0, Size: 0x1]
	float Timestamp;//[Offset: 0xe4, Size: 0x4]
	Guid ExternalTextureGuid;//[Offset: 0xe8, Size: 0x10]
	Vector2D Size;//[Offset: 0xf8, Size: 0x8]

--------------------------------
Class: ARLightEstimate.Object

--------------------------------
Class: ARCameraIntrinsics
	IntPoint ImageResolution;//[Offset: 0x0, Size: 0x8]
	Vector2D FocalLength;//[Offset: 0x8, Size: 0x8]
	Vector2D PrincipalPoint;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ARTextureCameraImage.ARTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: ARTextureCameraDepth.ARTexture.Texture.StreamableRenderAsset.Object
	enum DepthQuality;//[Offset: 0x100, Size: 0x1]
	enum DepthAccuracy;//[Offset: 0x101, Size: 0x1]
	bool bIsTemporallySmoothed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 0x1]

--------------------------------
Class: ARSessionStatus
	FString AdditionalInfo;//[Offset: 0x0, Size: 0x10]
	enum Status;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ARTrackedPose.ARTrackedGeometry.Object
	ARPose3D TrackedPose;//[Offset: 0xf8, Size: 0x50]
	ARPose3D GetTrackedPoseData();// 0x6694e3fee041

--------------------------------
Class: ARPose3D
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28]
	Transform[] JointTransforms;//[Offset: 0x28, Size: 0x10]
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10]
	enum JointTransformSpace;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ARSkeletonDefinition
	int NumJoints;//[Offset: 0x0, Size: 0x4]
	FName[] JointNames;//[Offset: 0x8, Size: 0x10]
	int[] ParentIndices;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ARTrackedPoint.ARTrackedGeometry.Object

--------------------------------
Class: ARPlaneGeometry.ARTrackedGeometry.Object
	enum Orientation;//[Offset: 0xf8, Size: 0x1]
	Vector Center;//[Offset: 0xfc, Size: 0xc]
	Vector Extent;//[Offset: 0x108, Size: 0xc]
	Vector[] BoundaryPolygon;//[Offset: 0x118, Size: 0x10]
	ARPlaneGeometry* SubsumedBy;//[Offset: 0x128, Size: 0x8]
	ARPlaneGeometry* GetSubsumedBy();// 0x668ae3fee041
	enum GetOrientation();// 0x6689e3fee041
	Vector GetExtent();// 0x6688e3fee041
	Vector GetCenter();// 0x6687e3fee041
	Vector[] GetBoundaryPolygonInLocalSpace();// 0x6686e3fee041

--------------------------------
Class: ARTrackedImage.ARTrackedGeometry.Object
	ARCandidateImage* DetectedImage;//[Offset: 0xf8, Size: 0x8]
	Vector2D EstimatedSize;//[Offset: 0x100, Size: 0x8]
	Vector2D GetEstimateSize();// 0x668ce3fee041
	ARCandidateImage* GetDetectedImage();// 0x668be3fee041

--------------------------------
Class: AREnvironmentCaptureProbe.ARTrackedGeometry.Object
	Vector Extent;//[Offset: 0xf8, Size: 0xc]
	AREnvironmentCaptureProbeTexture* EnvironmentCaptureTexture;//[Offset: 0x108, Size: 0x8]
	Vector GetExtent();// 0x6692e3fee041
	AREnvironmentCaptureProbeTexture* GetEnvironmentCaptureTexture();// 0x6691e3fee041

--------------------------------
Class: AREnvironmentCaptureProbeTexture.TextureCube.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0x138, Size: 0x1]
	float Timestamp;//[Offset: 0x13c, Size: 0x4]
	Guid ExternalTextureGuid;//[Offset: 0x140, Size: 0x10]
	Vector2D Size;//[Offset: 0x150, Size: 0x8]

--------------------------------
Class: ARPose2D
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28]
	Vector2D[] JointLocations;//[Offset: 0x28, Size: 0x10]
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ARTraceResultLibrary.BlueprintFunctionLibrary.Object
	ARTrackedGeometry* GetTrackedGeometry(out const ARTraceResult TraceResult);// 0x660ee3fee041
	enum GetTraceChannel(out const ARTraceResult TraceResult);// 0x660de3fee041
	Transform GetLocalTransform(out const ARTraceResult TraceResult);// 0x660ce3fee041
	Transform GetLocalToWorldTransform(out const ARTraceResult TraceResult);// 0x660be3fee041
	Transform GetLocalToTrackingTransform(out const ARTraceResult TraceResult);// 0x660ae3fee041
	float GetDistanceFromCamera(out const ARTraceResult TraceResult);// 0x6609e3fee041

--------------------------------
Class: ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object

--------------------------------
Class: ARSaveWorldAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10]
	delegate OnFailed;//[Offset: 0x60, Size: 0x10]
	ARSaveWorldAsyncTaskBlueprintProxy* ARSaveWorld(Object* WorldContextObject);// 0x660fe3fee041

--------------------------------
Class: ARGetCandidateObjectAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10]
	delegate OnFailed;//[Offset: 0x60, Size: 0x10]
	ARGetCandidateObjectAsyncTaskBlueprintProxy* ARGetCandidateObject(Object* WorldContextObject, Vector Location, Vector Extent);// 0x6610e3fee041

--------------------------------
Class: ARDependencyHandler.Object
	void StartARSessionLatent(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo);// 0x6640e3fee041
	void RequestARSessionPermission(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo, out enum OutPermissionResult);// 0x663fe3fee041
	void InstallARService(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutInstallResult);// 0x663ee3fee041
	ARDependencyHandler* GetARDependencyHandler();// 0x663de3fee041
	void CheckARServiceAvailability(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutAvailability);// 0x663ce3fee041

--------------------------------
Class: ARGeoTrackingSupport.Object
	ARGeoTrackingSupport* GetGeoTrackingSupport();// 0x6646e3fee041
	enum GetGeoTrackingStateReason();// 0x6645e3fee041
	enum GetGeoTrackingState();// 0x6644e3fee041
	enum GetGeoTrackingAccuracy();// 0x6643e3fee041
	bool AddGeoAnchorAtLocationWithAltitude(float Longitude, float Latitude, float AltitudeMeters, FString OptionalAnchorName);// 0x6642e3fee041
	bool AddGeoAnchorAtLocation(float Longitude, float Latitude, FString OptionalAnchorName);// 0x6641e3fee041

--------------------------------
Class: CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10]
	delegate OnFailed;//[Offset: 0x60, Size: 0x10]
	void GeoTrackingAvailabilityDelegate__DelegateSignature(bool bIsAvailable, FString Error);// 0x1f46e3fee041
	CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* CheckGeoTrackingAvailabilityAtLocation(Object* WorldContextObject, float Longitude, float Latitude);// 0x1f45e3fee041
	CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* CheckGeoTrackingAvailability(Object* WorldContextObject);// 0x1f44e3fee041

--------------------------------
Class: GetGeoLocationAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10]
	delegate OnFailed;//[Offset: 0x60, Size: 0x10]
	void GetGeoLocationDelegate__DelegateSignature(float Longitude, float Latitude, float Altitude, FString Error);// 0x1f48e3fee041
	GetGeoLocationAsyncTaskBlueprintProxy* GetGeoLocationAtWorldPosition(Object* WorldContextObject, out const Vector WorldPosition);// 0x1f47e3fee041

--------------------------------
Class: ARLifeCycleComponent.SceneComponent.ActorComponent.Object
	delegate OnARActorSpawnedDelegate;//[Offset: 0x208, Size: 0x10]
	delegate OnARActorToBeDestroyedDelegate;//[Offset: 0x218, Size: 0x10]
	void ServerSpawnARActor(class Object ComponentClass, Guid NativeID);// 0x1f4ce3fee041
	void ServerDestroyARActor(ARActor* Actor);// 0x1f4be3fee041
	void InstanceARActorToBeDestroyedDelegate__DelegateSignature(ARActor* Actor);// 0x1f4ae3fee041
	void InstanceARActorSpawnedDelegate__DelegateSignature(class Object ComponentClass, Guid NativeID, ARActor* SpawnedActor);// 0x1f49e3fee041

--------------------------------
Class: ARBasicLightEstimate.ARLightEstimate.Object
	float AmbientIntensityLumens;//[Offset: 0x28, Size: 0x4]
	float AmbientColorTemperatureKelvin;//[Offset: 0x2c, Size: 0x4]
	LinearColor AmbientColor;//[Offset: 0x30, Size: 0x10]
	float GetAmbientIntensityLumens();// 0x6649e3fee041
	float GetAmbientColorTemperatureKelvin();// 0x6648e3fee041
	LinearColor GetAmbientColor();// 0x6647e3fee041

--------------------------------
Class: AROriginActor.Actor.Object

--------------------------------
Class: ARSharedWorldGameMode.GameMode.GameModeBase.Info.Actor.Object
	int BufferSizePerChunk;//[Offset: 0x3c4, Size: 0x4]
	void SetPreviewImageData(byte[] ImageData);// 0x6674e3fee041
	void SetARWorldSharingIsReady();// 0x6673e3fee041
	void SetARSharedWorldData(byte[] ARWorldData);// 0x6672e3fee041
	ARSharedWorldGameState* GetARSharedWorldGameState();// 0x6671e3fee041

--------------------------------
Class: ARSharedWorldGameState.GameState.GameStateBase.Info.Actor.Object
	byte[] PreviewImageData;//[Offset: 0x348, Size: 0x10]
	byte[] ARWorldData;//[Offset: 0x358, Size: 0x10]
	int PreviewImageBytesTotal;//[Offset: 0x368, Size: 0x4]
	int ARWorldBytesTotal;//[Offset: 0x36c, Size: 0x4]
	int PreviewImageBytesDelivered;//[Offset: 0x370, Size: 0x4]
	int ARWorldBytesDelivered;//[Offset: 0x374, Size: 0x4]
	void K2_OnARWorldMapIsReady();// 0x6675e3fee041

--------------------------------
Class: ARSharedWorldPlayerController.PlayerController.Controller.Actor.Object
	void ServerMarkReadyForReceiving();// 0x6679e3fee041
	void ClientUpdatePreviewImageData(int Offset, const byte[] Buffer);// 0x6678e3fee041
	void ClientUpdateARWorldData(int Offset, const byte[] Buffer);// 0x6677e3fee041
	void ClientInitSharedWorld(int PreviewImageSize, int ARWorldDataSize);// 0x6676e3fee041

--------------------------------
Class: ARSkyLight.SkyLight.Info.Actor.Object
	AREnvironmentCaptureProbe* CaptureProbe;//[Offset: 0x2f0, Size: 0x8]
	void SetEnvironmentCaptureProbe(AREnvironmentCaptureProbe* InCaptureProbe);// 0x667be3fee041

--------------------------------
Class: ARTraceResultDummy.Object

--------------------------------
Class: ARTrackedQRCode.ARTrackedImage.ARTrackedGeometry.Object
	FString QRCode;//[Offset: 0x108, Size: 0x10]
	int Version;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: ARFaceGeometry.ARTrackedGeometry.Object
	Vector LookAtTarget;//[Offset: 0xf8, Size: 0xc]
	bool bIsTracked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	<enum,float> BlendShapes;//[Offset: 0x108, Size: 0x50]
	Transform LeftEyeTransform;//[Offset: 0x190, Size: 0x30]
	Transform RightEyeTransform;//[Offset: 0x1c0, Size: 0x30]
	Transform GetWorldSpaceEyeTransform(enum Eye);// 0x6690e3fee041
	Transform GetLocalSpaceEyeTransform(enum Eye);// 0x668fe3fee041
	float GetBlendShapeValue(enum BlendShape);// 0x668ee3fee041
	<enum,float> GetBlendShapes();// 0x668de3fee041

--------------------------------
Class: ARTrackedObject.ARTrackedGeometry.Object
	ARCandidateObject* DetectedObject;//[Offset: 0xf8, Size: 0x8]
	ARCandidateObject* GetDetectedObject();// 0x6693e3fee041

--------------------------------
Class: ARMeshGeometry.ARTrackedGeometry.Object
	bool GetObjectClassificationAtLocation(out const Vector InWorldLocation, out enum OutClassification, out Vector OutClassificationLocation, float MaxLocationDiff);// 0x6695e3fee041

--------------------------------
Class: ARGeoAnchor.ARTrackedGeometry.Object
	float GetLongitude();// 0x6699e3fee041
	float GetLatitude();// 0x6698e3fee041
	enum GetAltitudeSource();// 0x6697e3fee041
	float GetAltitudeMeters();// 0x6696e3fee041

--------------------------------
Class: ARTrackableNotifyComponent.ActorComponent.Object
	delegate OnAddTrackedGeometry;//[Offset: 0xb8, Size: 0x10]
	delegate OnUpdateTrackedGeometry;//[Offset: 0xc8, Size: 0x10]
	delegate OnRemoveTrackedGeometry;//[Offset: 0xd8, Size: 0x10]
	delegate OnAddTrackedPlane;//[Offset: 0xe8, Size: 0x10]
	delegate OnUpdateTrackedPlane;//[Offset: 0xf8, Size: 0x10]
	delegate OnRemoveTrackedPlane;//[Offset: 0x108, Size: 0x10]
	delegate OnAddTrackedPoint;//[Offset: 0x118, Size: 0x10]
	delegate OnUpdateTrackedPoint;//[Offset: 0x128, Size: 0x10]
	delegate OnRemoveTrackedPoint;//[Offset: 0x138, Size: 0x10]
	delegate OnAddTrackedImage;//[Offset: 0x148, Size: 0x10]
	delegate OnUpdateTrackedImage;//[Offset: 0x158, Size: 0x10]
	delegate OnRemoveTrackedImage;//[Offset: 0x168, Size: 0x10]
	delegate OnAddTrackedFace;//[Offset: 0x178, Size: 0x10]
	delegate OnUpdateTrackedFace;//[Offset: 0x188, Size: 0x10]
	delegate OnRemoveTrackedFace;//[Offset: 0x198, Size: 0x10]
	delegate OnAddTrackedEnvProbe;//[Offset: 0x1a8, Size: 0x10]
	delegate OnUpdateTrackedEnvProbe;//[Offset: 0x1b8, Size: 0x10]
	delegate OnRemoveTrackedEnvProbe;//[Offset: 0x1c8, Size: 0x10]
	delegate OnAddTrackedObject;//[Offset: 0x1d8, Size: 0x10]
	delegate OnUpdateTrackedObject;//[Offset: 0x1e8, Size: 0x10]
	delegate OnRemoveTrackedObject;//[Offset: 0x1f8, Size: 0x10]

--------------------------------
Class: ARTypesDummyClass.Object

--------------------------------
Class: HeadMountedDisplayFunctionLibrary.BlueprintFunctionLibrary.Object
	void UpdateExternalTrackingHMDPosition(out const Transform ExternalTrackingTransform);// 0x66cfe3fee041
	void SetXRTimedInputActionDelegate(out const FName ActionName, out const delegate InDelegate);// 0x66cee3fee041
	void SetXRDisconnectDelegate(out const delegate InDisconnectedDelegate);// 0x66cde3fee041
	void SetWorldToMetersScale(Object* WorldContext, float NewScale);// 0x66cce3fee041
	void SetTrackingOrigin(byte Origin);// 0x66cbe3fee041
	void SetSpectatorScreenTexture(Texture* InTexture);// 0x66cae3fee041
	void SetSpectatorScreenModeTexturePlusEyeLayout(Vector2D EyeRectMin, Vector2D EyeRectMax, Vector2D TextureRectMin, Vector2D TextureRectMax, bool bDrawEyeFirst, bool bClearBlack, bool bUseAlpha);// 0x66c9e3fee041
	void SetSpectatorScreenMode(enum Mode);// 0x66c8e3fee041
	void SetClippingPlanes(float Near, float Far);// 0x66c7e3fee041
	void ResetOrientationAndPosition(float Yaw, byte Options);// 0x66c6e3fee041
	bool IsSpectatorScreenModeControllable();// 0x66c5e3fee041
	bool IsInLowPersistenceMode();// 0x66c4e3fee041
	bool IsHeadMountedDisplayEnabled();// 0x66c3e3fee041
	bool IsHeadMountedDisplayConnected();// 0x66c2e3fee041
	bool IsDeviceTracking(out const XRDeviceId XRDeviceId);// 0x66c1e3fee041
	bool HasValidTrackingPosition();// 0x66c0e3fee041
	int GetXRSystemFlags();// 0x66bfe3fee041
	float GetWorldToMetersScale(Object* WorldContext);// 0x66bee3fee041
	void GetVRFocusState(out bool bUseFocus, out bool bHasFocus);// 0x66bde3fee041
	FString GetVersionString();// 0x66bce3fee041
	Transform GetTrackingToWorldTransform(Object* WorldContext);// 0x66bbe3fee041
	void GetTrackingSensorParameters(out Vector Origin, out Rotator Rotation, out float LeftFOV, out float RightFOV, out float TopFOV, out float BottomFOV, out float Distance, out float NearPlane, out float FarPlane, out bool IsActive, int Index);// 0x66bae3fee041
	byte GetTrackingOrigin();// 0x66b9e3fee041
	float GetScreenPercentage();// 0x66b8e3fee041
	void GetPositionalTrackingCameraParameters(out Vector CameraOrigin, out Rotator CameraRotation, out float HFOV, out float VFOV, out float CameraDistance, out float NearPlane, out float FarPlane);// 0x66b7e3fee041
	float GetPixelDensity();// 0x66b6e3fee041
	void GetOrientationAndPosition(out Rotator DeviceRotation, out Vector DevicePosition);// 0x66b5e3fee041
	int GetNumOfTrackingSensors();// 0x66b4e3fee041
	void GetMotionControllerData(Object* WorldContext, const enum Hand, out XRMotionControllerData MotionControllerData);// 0x66b3e3fee041
	byte GetHMDWornState();// 0x66b2e3fee041
	FName GetHMDDeviceName();// 0x66b1e3fee041
	void GetHMDData(Object* WorldContext, out XRHMDData HMDData);// 0x66b0e3fee041
	void GetDeviceWorldPose(Object* WorldContext, out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector position);// 0x66afe3fee041
	void GetDevicePose(out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector position);// 0x66aee3fee041
	bool GetControllerTransformForTime(Object* WorldContext, const int ControllerIndex, const FName MotionSource, Timespan Time, out bool bTimeWasUsed, out Rotator Orientation, out Vector position, out bool bProvidedLinearVelocity, out Vector LinearVelocity, out bool bProvidedAngularVelocity, out Vector AngularVelocityRadPerSec);// 0x66ade3fee041
	XRDeviceId[] EnumerateTrackedDevices(const FName SystemId, enum DeviceType);// 0x66ace3fee041
	void EnableLowPersistenceMode(bool bEnable);// 0x66abe3fee041
	bool EnableHMD(bool bEnable);// 0x66aae3fee041
	void DisconnectRemoteXRDevice();// 0x66a9e3fee041
	byte ConnectRemoteXRDevice(FString IpAddress, const int bitrate);// 0x66a8e3fee041
	bool ConfigureGestures(out const XRGestureConfig GestureConfig);// 0x66a7e3fee041
	void ClearXRTimedInputActionDelegate(out const FName ActionPath);// 0x66a6e3fee041
	void CalibrateExternalTrackingToHMD(out const Transform ExternalTrackingTransform);// 0x66a5e3fee041

--------------------------------
Class: XRDeviceId
	FName SystemName;//[Offset: 0x0, Size: 0x8]
	int DeviceID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: XRMotionControllerData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName DeviceName;//[Offset: 0x4, Size: 0x8]
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10]
	enum DeviceVisualType;//[Offset: 0x1c, Size: 0x1]
	enum HandIndex;//[Offset: 0x1d, Size: 0x1]
	enum TrackingStatus;//[Offset: 0x1e, Size: 0x1]
	Vector GripPosition;//[Offset: 0x20, Size: 0xc]
	Quat GripRotation;//[Offset: 0x30, Size: 0x10]
	Vector AimPosition;//[Offset: 0x40, Size: 0xc]
	Quat AimRotation;//[Offset: 0x50, Size: 0x10]
	Vector[] HandKeyPositions;//[Offset: 0x60, Size: 0x10]
	Quat[] HandKeyRotations;//[Offset: 0x70, Size: 0x10]
	float[] HandKeyRadii;//[Offset: 0x80, Size: 0x10]
	bool bIsGrasped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: XRHMDData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName DeviceName;//[Offset: 0x4, Size: 0x8]
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10]
	enum TrackingStatus;//[Offset: 0x1c, Size: 0x1]
	Vector position;//[Offset: 0x20, Size: 0xc]
	Quat Rotation;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: XRGestureConfig
	bool bTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	enum AxisGesture;//[Offset: 0x2, Size: 0x1]
	bool bNavigationAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bNavigationAxisY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bNavigationAxisZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]

--------------------------------
Class: MotionControllerComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PlayerIndex;//[Offset: 0x5b0, Size: 0x4]
	enum Hand;//[Offset: 0x5b4, Size: 0x1]
	FName MotionSource;//[Offset: 0x5b8, Size: 0x8]
	bool bDisableLowLatencyUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c0, Size: 0x1]
	enum CurrentTrackingStatus;//[Offset: 0x5c1, Size: 0x1]
	bool bDisplayDeviceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c2, Size: 0x1]
	FName DisplayModelSource;//[Offset: 0x5c4, Size: 0x8]
	StaticMesh* CustomDisplayMesh;//[Offset: 0x5d0, Size: 0x8]
	MaterialInterface*[] DisplayMeshMaterialOverrides;//[Offset: 0x5d8, Size: 0x10]
	PrimitiveComponent* DisplayComponent;//[Offset: 0x650, Size: 0x8]
	void SetTrackingSource(const enum NewSource);// 0x66dae3fee041
	void SetTrackingMotionSource(const FName NewSource);// 0x66d9e3fee041
	void SetShowDeviceModel(const bool bShowControllerModel);// 0x66d8e3fee041
	void SetDisplayModelSource(const FName NewDisplayModelSource);// 0x66d7e3fee041
	void SetCustomDisplayMesh(StaticMesh* NewDisplayMesh);// 0x66d6e3fee041
	void SetAssociatedPlayerIndex(const int NewPlayer);// 0x66d5e3fee041
	void OnMotionControllerUpdated();// 0x66d4e3fee041
	bool IsTracked();// 0x66d3e3fee041
	enum GetTrackingSource();// 0x66d2e3fee041
	float GetParameterValue(FName InName, out bool bValueFound);// 0x66d1e3fee041
	Vector GetHandJointPosition(int jointIndex, out bool bValueFound);// 0x66d0e3fee041

--------------------------------
Class: MotionTrackedDeviceFunctionLibrary.BlueprintFunctionLibrary.Object
	void SetIsControllerMotionTrackingEnabledByDefault(bool Enable);// 0x66ece3fee041
	bool IsMotionTrackingEnabledForSource(int PlayerIndex, FName SourceName);// 0x66ebe3fee041
	bool IsMotionTrackingEnabledForDevice(int PlayerIndex, enum Hand);// 0x66eae3fee041
	bool IsMotionTrackingEnabledForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x66e9e3fee041
	bool IsMotionTrackedDeviceCountManagementNecessary();// 0x66e8e3fee041
	bool IsMotionSourceTracking(int PlayerIndex, FName SourceName);// 0x66e7e3fee041
	int GetMotionTrackingEnabledControllerCount();// 0x66e6e3fee041
	int GetMaximumMotionTrackedControllerCount();// 0x66e5e3fee041
	FName GetActiveTrackingSystemName();// 0x66e4e3fee041
	FName[] EnumerateMotionSources();// 0x66e3e3fee041
	bool EnableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0x66e2e3fee041
	bool EnableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x66e1e3fee041
	bool EnableMotionTrackingForComponent(MotionControllerComponent* MotionControllerComponent);// 0x66e0e3fee041
	void DisableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0x66dfe3fee041
	void DisableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x66dee3fee041
	void DisableMotionTrackingOfControllersForPlayer(int PlayerIndex);// 0x66dde3fee041
	void DisableMotionTrackingOfAllControllers();// 0x66dce3fee041
	void DisableMotionTrackingForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x66dbe3fee041

--------------------------------
Class: VRNotificationsComponent.ActorComponent.Object
	delegate HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate;//[Offset: 0xb8, Size: 0x10]
	delegate HMDTrackingInitializedDelegate;//[Offset: 0xc8, Size: 0x10]
	delegate HMDRecenteredDelegate;//[Offset: 0xd8, Size: 0x10]
	delegate HMDLostDelegate;//[Offset: 0xe8, Size: 0x10]
	delegate HMDReconnectedDelegate;//[Offset: 0xf8, Size: 0x10]
	delegate HMDConnectCanceledDelegate;//[Offset: 0x108, Size: 0x10]
	delegate HMDPutOnHeadDelegate;//[Offset: 0x118, Size: 0x10]
	delegate HMDRemovedFromHeadDelegate;//[Offset: 0x128, Size: 0x10]
	delegate VRControllerRecenteredDelegate;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: XRAssetFunctionLibrary.BlueprintFunctionLibrary.Object
	PrimitiveComponent* AddNamedDeviceVisualizationComponentBlocking(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId);// 0x66eee3fee041
	PrimitiveComponent* AddDeviceVisualizationComponentBlocking(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform);// 0x66ede3fee041

--------------------------------
Class: AsyncTask_LoadXRDeviceVisComponent.BlueprintAsyncActionBase.Object
	delegate OnModelLoaded;//[Offset: 0x30, Size: 0x10]
	delegate OnLoadFailure;//[Offset: 0x40, Size: 0x10]
	PrimitiveComponent* SpawnedComponent;//[Offset: 0x58, Size: 0x8]
	AsyncTask_LoadXRDeviceVisComponent* AddNamedDeviceVisualizationComponentAsync(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId, out PrimitiveComponent* NewComponent);// 0x66f0e3fee041
	AsyncTask_LoadXRDeviceVisComponent* AddDeviceVisualizationComponentAsync(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform, out PrimitiveComponent* NewComponent);// 0x66efe3fee041

--------------------------------
Class: XRLoadingScreenFunctionLibrary.BlueprintFunctionLibrary.Object
	void ShowLoadingScreen();// 0x66f5e3fee041
	void SetLoadingScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0x66f4e3fee041
	void HideLoadingScreen();// 0x66f3e3fee041
	void ClearLoadingScreenSplashes();// 0x66f2e3fee041
	void AddLoadingScreenSplash(Texture* Texture, Vector Translation, Rotator Rotation, Vector2D Size, Rotator DeltaRotation, bool bClearBeforeAdd);// 0x66f1e3fee041

--------------------------------
Class: FoliageInstancedStaticMeshComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate OnInstanceTakePointDamage;//[Offset: 0x7f8, Size: 0x10]
	delegate OnInstanceTakeRadialDamage;//[Offset: 0x808, Size: 0x10]
	Guid GenerationGuid;//[Offset: 0x818, Size: 0x10]

--------------------------------
Class: FoliageStatistics.BlueprintFunctionLibrary.Object
	int FoliageOverlappingSphereCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x6706e3fee041
	int FoliageOverlappingBoxCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Box Box);// 0x6705e3fee041

--------------------------------
Class: FoliageType.Object
	Guid UpdateGuid;//[Offset: 0x28, Size: 0x10]
	float Density;//[Offset: 0x38, Size: 0x4]
	float DensityAdjustmentFactor;//[Offset: 0x3c, Size: 0x4]
	float Radius;//[Offset: 0x40, Size: 0x4]
	bool bSingleInstanceModeOverrideRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	float SingleInstanceModeRadius;//[Offset: 0x48, Size: 0x4]
	enum Scaling;//[Offset: 0x4c, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x50, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x58, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x60, Size: 0x8]
	FoliageVertexColorChannelMask VertexColorMaskByChannel;//[Offset: 0x68, Size: 0xc]
	byte VertexColorMask;//[Offset: 0x98, Size: 0x1]
	float VertexColorMaskThreshold;//[Offset: 0x9c, Size: 0x4]
	bool VertexColorMaskInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	FloatInterval ZOffset;//[Offset: 0xa4, Size: 0x8]
	bool AlignToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	float AlignMaxAngle;//[Offset: 0xb0, Size: 0x4]
	bool RandomYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	float RandomPitchAngle;//[Offset: 0xb8, Size: 0x4]
	FloatInterval GroundSlopeAngle;//[Offset: 0xbc, Size: 0x8]
	FloatInterval Height;//[Offset: 0xc4, Size: 0x8]
	FName[] LandscapeLayers;//[Offset: 0xd0, Size: 0x10]
	float MinimumLayerWeight;//[Offset: 0xe0, Size: 0x4]
	FName[] ExclusionLandscapeLayers;//[Offset: 0xe8, Size: 0x10]
	float MinimumExclusionLayerWeight;//[Offset: 0xf8, Size: 0x4]
	FName LandscapeLayer;//[Offset: 0xfc, Size: 0x8]
	bool CollisionWithWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 0x1]
	Vector CollisionScale;//[Offset: 0x108, Size: 0xc]
	BoxSphereBounds MeshBounds;//[Offset: 0x114, Size: 0x1c]
	Vector LowBoundOriginRadius;//[Offset: 0x130, Size: 0xc]
	bool bReMergeInstancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13c, Size: 0x1]
	enum ShadowCaptureLayer;//[Offset: 0x13d, Size: 0x1]
	byte Mobility;//[Offset: 0x13e, Size: 0x1]
	Int32Interval CullDistance;//[Offset: 0x140, Size: 0x8]
	bool bEnableStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x148, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x148, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x148, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x148, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x148, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x148, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x149, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x14c, Size: 0x4]
	enum LightmapType;//[Offset: 0x150, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x151, Size: 0x1]
	bool bForceUseSkyLightAsDiffuseGI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x152, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x152, Size: 0x1]
	BodyInstance BodyInstance;//[Offset: 0x158, Size: 0x150]
	byte CustomNavigableGeometry;//[Offset: 0x2a8, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x2a9, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2aa, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x2ab, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x2ac, Size: 0x4]
	int TranslucencySortPriority;//[Offset: 0x2b0, Size: 0x4]
	float CollisionRadius;//[Offset: 0x2b4, Size: 0x4]
	float ShadeRadius;//[Offset: 0x2b8, Size: 0x4]
	int NumSteps;//[Offset: 0x2bc, Size: 0x4]
	float InitialSeedDensity;//[Offset: 0x2c0, Size: 0x4]
	float AverageSpreadDistance;//[Offset: 0x2c4, Size: 0x4]
	float SpreadVariance;//[Offset: 0x2c8, Size: 0x4]
	int SeedsPerStep;//[Offset: 0x2cc, Size: 0x4]
	int DistributionSeed;//[Offset: 0x2d0, Size: 0x4]
	float MaxInitialSeedOffset;//[Offset: 0x2d4, Size: 0x4]
	bool bCanGrowInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bSpawnsInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	float MaxInitialAge;//[Offset: 0x2dc, Size: 0x4]
	float MaxAge;//[Offset: 0x2e0, Size: 0x4]
	float OverlapPriority;//[Offset: 0x2e4, Size: 0x4]
	FloatInterval ProceduralScale;//[Offset: 0x2e8, Size: 0x8]
	RuntimeFloatCurve ScaleCurve;//[Offset: 0x2f0, Size: 0x88]
	int ChangeCount;//[Offset: 0x378, Size: 0x4]
	bool ReapplyDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37c, Size: 0x1]
	bool ReapplyRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37c, Size: 0x1]
	bool ReapplyAlignToNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37c, Size: 0x1]
	bool ReapplyRandomYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37c, Size: 0x1]
	bool ReapplyScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37c, Size: 0x1]
	bool ReapplyScaleX;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37c, Size: 0x1]
	bool ReapplyScaleY;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37c, Size: 0x1]
	bool ReapplyScaleZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37c, Size: 0x1]
	bool ReapplyRandomPitchAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37d, Size: 0x1]
	bool ReapplyGroundSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37d, Size: 0x1]
	bool ReapplyHeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37d, Size: 0x1]
	bool ReapplyLandscapeLayers;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37d, Size: 0x1]
	bool ReapplyZOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37d, Size: 0x1]
	bool ReapplyCollisionWithWorld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37d, Size: 0x1]
	bool ReapplyVertexColorMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37d, Size: 0x1]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37d, Size: 0x1]
	bool bEnableDiscardOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37e, Size: 0x1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x380, Size: 0x10]
	int VirtualTextureCullMips;//[Offset: 0x390, Size: 0x4]
	enum VirtualTextureRenderPassType;//[Offset: 0x394, Size: 0x1]

--------------------------------
Class: FoliageVertexColorChannelMask
	bool UseMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float MaskThreshold;//[Offset: 0x4, Size: 0x4]
	bool InvertMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: FoliageType_Actor.FoliageType.Object
	class Actor* ActorClass;//[Offset: 0x398, Size: 0x8]
	bool bShouldAttachToBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]

--------------------------------
Class: FoliageType_InstancedStaticMesh.FoliageType.Object
	StaticMesh* Mesh;//[Offset: 0x398, Size: 0x8]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x3a0, Size: 0x10]
	class FoliageInstancedStaticMeshComponent* ComponentClass;//[Offset: 0x3b0, Size: 0x8]

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: InteractiveFoliageActor.StaticMeshActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2f0, Size: 0x8]
	Vector TouchingActorEntryPosition;//[Offset: 0x2f8, Size: 0xc]
	Vector FoliageVelocity;//[Offset: 0x304, Size: 0xc]
	Vector FoliageForce;//[Offset: 0x310, Size: 0xc]
	Vector FoliagePosition;//[Offset: 0x31c, Size: 0xc]
	float FoliageDamageImpulseScale;//[Offset: 0x328, Size: 0x4]
	float FoliageTouchImpulseScale;//[Offset: 0x32c, Size: 0x4]
	float FoliageStiffness;//[Offset: 0x330, Size: 0x4]
	float FoliageStiffnessQuadratic;//[Offset: 0x334, Size: 0x4]
	float FoliageDamping;//[Offset: 0x338, Size: 0x4]
	float MaxDamageImpulse;//[Offset: 0x33c, Size: 0x4]
	float MaxTouchImpulse;//[Offset: 0x340, Size: 0x4]
	float MaxForce;//[Offset: 0x344, Size: 0x4]
	float Mass;//[Offset: 0x348, Size: 0x4]
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult OverlapInfo);// 0x6707e3fee041

--------------------------------
Class: InteractiveFoliageComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ProceduralFoliageBlockingVolume.Volume.Brush.Actor.Object
	ProceduralFoliageVolume* ProceduralFoliageVolume;//[Offset: 0x318, Size: 0x8]

--------------------------------
Class: ProceduralFoliageVolume.Volume.Brush.Actor.Object
	ProceduralFoliageComponent* ProceduralComponent;//[Offset: 0x318, Size: 0x8]

--------------------------------
Class: ProceduralFoliageComponent.ActorComponent.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0xb8, Size: 0x8]
	float TileOverlap;//[Offset: 0xc0, Size: 0x4]
	Volume* SpawningVolume;//[Offset: 0xc8, Size: 0x8]
	Guid ProceduralGuid;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: ProceduralFoliageSpawner.Object
	int RandomSeed;//[Offset: 0x28, Size: 0x4]
	float TileSize;//[Offset: 0x2c, Size: 0x4]
	int NumUniqueTiles;//[Offset: 0x30, Size: 0x4]
	float MinimumQuadTreeSize;//[Offset: 0x34, Size: 0x4]
	FoliageTypeObject[] FoliageTypes;//[Offset: 0x40, Size: 0x10]
	void Simulate(int NumSteps);// 0x6708e3fee041

--------------------------------
Class: FoliageTypeObject
	Object* FoliageTypeObject;//[Offset: 0x0, Size: 0x8]
	FoliageType* TypeInstance;//[Offset: 0x8, Size: 0x8]
	bool bIsAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	class FoliageType_InstancedStaticMesh* Type;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: ProceduralFoliageTile.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0x28, Size: 0x8]
	ProceduralFoliageInstance[] InstancesArray;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: ProceduralFoliageInstance
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Location;//[Offset: 0x10, Size: 0xc]
	float Age;//[Offset: 0x1c, Size: 0x4]
	Vector Normal;//[Offset: 0x20, Size: 0xc]
	float Scale;//[Offset: 0x2c, Size: 0x4]
	FoliageType* Type;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ControlPointMeshActor.Actor.Object
	ControlPointMeshComponent* ControlPointMeshComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x658, Size: 0x4]

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x2e0, Size: 0x8]
	Guid LandscapeGuid;//[Offset: 0x2e8, Size: 0x10]
	IntPoint LandscapeSectionOffset;//[Offset: 0x2f8, Size: 0x8]
	int MaxLODLevel;//[Offset: 0x300, Size: 0x4]
	float LODDistanceFactor;//[Offset: 0x304, Size: 0x4]
	byte LODFalloff;//[Offset: 0x308, Size: 0x1]
	float ComponentScreenSizeToUseSubSections;//[Offset: 0x30c, Size: 0x4]
	float LOD0ScreenSize;//[Offset: 0x310, Size: 0x4]
	float LOD0DistributionSetting;//[Offset: 0x314, Size: 0x4]
	float LODDistributionSetting;//[Offset: 0x318, Size: 0x4]
	float TessellationComponentScreenSize;//[Offset: 0x31c, Size: 0x4]
	bool UseTessellationComponentScreenSizeFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	float TessellationComponentScreenSizeFalloff;//[Offset: 0x324, Size: 0x4]
	int OccluderGeometryLOD;//[Offset: 0x328, Size: 0x4]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	int StaticLightingLOD;//[Offset: 0x330, Size: 0x4]
	bool bReceivePointLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334, Size: 0x1]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x338, Size: 0x8]
	float StreamingDistanceMultiplier;//[Offset: 0x340, Size: 0x4]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x348, Size: 0x8]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x370, Size: 0x8]
	LandscapeProxyMaterialOverride[] LandscapeMaterialsOverride;//[Offset: 0x378, Size: 0x10]
	bool bMeshHoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	byte MeshHolesMaxLod;//[Offset: 0x389, Size: 0x1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x390, Size: 0x10]
	int VirtualTextureNumLods;//[Offset: 0x3a0, Size: 0x4]
	int VirtualTextureLodBias;//[Offset: 0x3a4, Size: 0x4]
	enum VirtualTextureRenderPassType;//[Offset: 0x3a8, Size: 0x1]
	float NegativeZBoundsExtension;//[Offset: 0x3ac, Size: 0x4]
	float PositiveZBoundsExtension;//[Offset: 0x3b0, Size: 0x4]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x3b8, Size: 0x10]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x3c8, Size: 0x10]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x3d8, Size: 0x10]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 0x1]
	float StaticLightingResolution;//[Offset: 0x450, Size: 0x4]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x454, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x454, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x454, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x454, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x454, Size: 0x1]
	enum ShadowCaptureLayer;//[Offset: 0x455, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x456, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x456, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x457, Size: 0x1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 0x1]
	bool bStaticShadowMaskOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x458, Size: 0x1]
	bool bForceUseSkyLightAsDiffuseGI;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x458, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x458, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x459, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x45c, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x460, Size: 0x4]
	bool bForceUseSkyReflectionCaptureOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x464, Size: 0x1]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x468, Size: 0x18]
	int CollisionMipLevel;//[Offset: 0x480, Size: 0x4]
	int SimpleCollisionMipLevel;//[Offset: 0x484, Size: 0x4]
	float CollisionThickness;//[Offset: 0x488, Size: 0x4]
	BodyInstance BodyInstance;//[Offset: 0x490, Size: 0x150]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e0, Size: 0x1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5e0, Size: 0x1]
	int ComponentSizeQuads;//[Offset: 0x5e4, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x5e8, Size: 0x4]
	int NumSubsections;//[Offset: 0x5ec, Size: 0x4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f0, Size: 0x1]
	bool bFillCollisionUnderLandscapeForNavmesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f0, Size: 0x1]
	bool bUseDynamicMaterialInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f1, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x5f2, Size: 0x1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f3, Size: 0x1]
	bool bHasLayersContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 0x1]
	<Texture2D*,LandscapeWeightmapUsage*> WeightmapUsageMap;//[Offset: 0x5f8, Size: 0x50]
	void SetLandscapeMaterialVectorParameterValue(FName ParameterName, LinearColor Value);// 0x6713e3fee041
	void SetLandscapeMaterialTextureParameterValue(FName ParameterName, Texture* Value);// 0x6712e3fee041
	void SetLandscapeMaterialScalarParameterValue(FName ParameterName, float Value);// 0x6711e3fee041
	bool LandscapeExportHeightmapToRenderTarget(TextureRenderTarget2D* InRenderTarget, bool InExportHeightIntoRGChannel, bool InExportLandscapeProxies);// 0x6710e3fee041
	void EditorSetLandscapeMaterial(MaterialInterface* NewLandscapeMaterial);// 0x670fe3fee041
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer, FName EditLayerName);// 0x670ee3fee041
	void ChangeUseTessellationComponentScreenSizeFalloff(bool InComponentScreenSizeToUseSubSections);// 0x670de3fee041
	void ChangeTessellationComponentScreenSizeFalloff(float InUseTessellationComponentScreenSizeFalloff);// 0x670ce3fee041
	void ChangeTessellationComponentScreenSize(float InTessellationComponentScreenSize);// 0x670be3fee041
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x670ae3fee041
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);// 0x6709e3fee041

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x5b0, Size: 0x10]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x5c0, Size: 0x10]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x5d0, Size: 0x10]
	SplineMeshComponent*[] GetSplineMeshComponents();// 0x6727e3fee041

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]
	float Width;//[Offset: 0x40, Size: 0x4]
	float LayerWidthRatio;//[Offset: 0x44, Size: 0x4]
	float SideFalloff;//[Offset: 0x48, Size: 0x4]
	float LeftSideFalloffFactor;//[Offset: 0x4c, Size: 0x4]
	float RightSideFalloffFactor;//[Offset: 0x50, Size: 0x4]
	float LeftSideLayerFalloffFactor;//[Offset: 0x54, Size: 0x4]
	float RightSideLayerFalloffFactor;//[Offset: 0x58, Size: 0x4]
	float EndFalloff;//[Offset: 0x5c, Size: 0x4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x60, Size: 0x10]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10]
	Box Bounds;//[Offset: 0x80, Size: 0x1c]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x8]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 0x18]
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 0x18]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10]
	Box Bounds;//[Offset: 0x80, Size: 0x1c]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x8]
	float TangentLen;//[Offset: 0x8, Size: 0x4]
	FName SocketName;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Vector Left;//[Offset: 0xc, Size: 0xc]
	Vector Right;//[Offset: 0x18, Size: 0xc]
	Vector FalloffLeft;//[Offset: 0x24, Size: 0xc]
	Vector FalloffRight;//[Offset: 0x30, Size: 0xc]
	Vector LayerLeft;//[Offset: 0x3c, Size: 0xc]
	Vector LayerRight;//[Offset: 0x48, Size: 0xc]
	Vector LayerFalloffLeft;//[Offset: 0x54, Size: 0xc]
	Vector LayerFalloffRight;//[Offset: 0x60, Size: 0xc]
	float StartEndFalloff;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: LandscapeProxyMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LandscapeWeightmapUsage.Object
	LandscapeComponent* ChannelUsage;//[Offset: 0x28, Size: 0x8]
	Guid LayerGuid;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeBlueprintBrushBase.Actor.Object
	void RequestLandscapeUpdate();// 0x6717e3fee041
	TextureRenderTarget2D* Render(bool InIsHeightmap, TextureRenderTarget2D* InCombinedResult, out const FName InWeightmapLayerName);// 0x6716e3fee041
	void Initialize(out const Transform InLandscapeTransform, out const IntPoint InLandscapeSize, out const IntPoint InLandscapeRenderTargetSize);// 0x6715e3fee041
	void GetBlueprintRenderDependencies(out Object*[] OutStreamableAssets);// 0x6714e3fee041

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeInfo.Object
	Landscape* LandscapeActor;//[Offset: 0x28, Size: 0x1c]
	Guid LandscapeGuid;//[Offset: 0x44, Size: 0x10]
	int ComponentSizeQuads;//[Offset: 0x54, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x58, Size: 0x4]
	int ComponentNumSubsections;//[Offset: 0x5c, Size: 0x4]
	Vector DrawScale;//[Offset: 0x60, Size: 0xc]
	LandscapeStreamingProxy*[] Proxies;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: LandscapeStreamingProxy.LandscapeProxy.Actor.Object
	Landscape* LandscapeActor;//[Offset: 0x648, Size: 0x1c]

--------------------------------
Class: LandscapeMaterialInstanceConstant.MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	LandscapeMaterialTextureStreamingInfo[] TextureStreamingInfo;//[Offset: 0x398, Size: 0x10]
	bool bIsLayerThumbnail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a8, Size: 0x1]
	bool bDisableTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a8, Size: 0x1]
	bool bMobile;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a8, Size: 0x1]
	bool bEditorToolUsage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a8, Size: 0x1]

--------------------------------
Class: LandscapeMaterialTextureStreamingInfo
	FName TextureName;//[Offset: 0x0, Size: 0x8]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LandscapeMeshCollisionComponent.LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid MeshGuid;//[Offset: 0x690, Size: 0x10]

--------------------------------
Class: LandscapeSettings.DeveloperSettings.Object
	int MaxNumberOfLayers;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: LandscapeSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: MaterialExpressionLandscapeGrassOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	GrassInput[] GrassTypes;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: GrassInput
	FName Name;//[Offset: 0x0, Size: 0x8]
	LandscapeGrassType* GrassType;//[Offset: 0x8, Size: 0x8]
	ExpressionInput Input;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: MaterialExpressionLandscapeLayerBlend.MaterialExpression.Object
	LayerBlendInput[] Layers;//[Offset: 0x40, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: LayerBlendInput
	FName LayerName;//[Offset: 0x0, Size: 0x8]
	byte BlendType;//[Offset: 0x8, Size: 0x1]
	ExpressionInput LayerInput;//[Offset: 0xc, Size: 0xc]
	ExpressionInput HeightInput;//[Offset: 0x20, Size: 0xc]
	float PreviewWeight;//[Offset: 0x34, Size: 0x4]
	Vector ConstLayerInput;//[Offset: 0x38, Size: 0xc]
	float ConstHeightInput;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: MaterialExpressionLandscapeLayerCoords.MaterialExpression.Object
	byte MappingType;//[Offset: 0x39, Size: 0x1]
	byte CustomUVType;//[Offset: 0x3a, Size: 0x1]
	float MappingScale;//[Offset: 0x3c, Size: 0x4]
	float MappingRotation;//[Offset: 0x40, Size: 0x4]
	float MappingPanU;//[Offset: 0x44, Size: 0x4]
	float MappingPanV;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: MaterialExpressionLandscapeLayerSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8]
	float PreviewWeight;//[Offset: 0x44, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: MaterialExpressionLandscapeLayerSwitch.MaterialExpression.Object
	ExpressionInput LayerUsed;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput LayerNotUsed;//[Offset: 0x50, Size: 0xc]
	FName ParameterName;//[Offset: 0x64, Size: 0x8]
	bool PreviewUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: MaterialExpressionLandscapeLayerWeight.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x3c, Size: 0xc]
	ExpressionInput Layer;//[Offset: 0x50, Size: 0xc]
	FName ParameterName;//[Offset: 0x64, Size: 0x8]
	float PreviewWeight;//[Offset: 0x6c, Size: 0x4]
	Vector ConstBase;//[Offset: 0x70, Size: 0xc]
	Guid ExpressionGUID;//[Offset: 0x7c, Size: 0x10]

--------------------------------
Class: MaterialExpressionLandscapePhysicalMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	PhysicalMaterialInput[] Inputs;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: PhysicalMaterialInput
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8]
	ExpressionInput Input;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: MaterialExpressionLandscapeVisibilityMask.MaterialExpression.Object
	Guid ExpressionGUID;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object
	FrameRate FixedFrameRate;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: GenlockedCustomTimeStep.FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object

--------------------------------
Class: GenlockedTimecodeProvider.TimecodeProvider.Object
	bool bUseGenlockToCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: TimeManagementBlueprintLibrary.BlueprintFunctionLibrary.Object
	FrameTime TransformTime(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate DestinationRate);// 0x6740e3fee041
	FrameNumber Subtract_FrameNumberInteger(FrameNumber A, int B);// 0x673fe3fee041
	FrameNumber Subtract_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0x673ee3fee041
	FrameTime SnapFrameTimeToRate(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate SnapToRate);// 0x673de3fee041
	FrameTime Multiply_SecondsFrameRate(float TimeInSeconds, out const FrameRate FrameRate);// 0x673ce3fee041
	FrameNumber Multiply_FrameNumberInteger(FrameNumber A, int B);// 0x673be3fee041
	bool IsValid_MultipleOf(out const FrameRate InFrameRate, out const FrameRate OtherFramerate);// 0x673ae3fee041
	bool IsValid_Framerate(out const FrameRate InFrameRate);// 0x6739e3fee041
	FrameRate GetTimecodeFrameRate();// 0x6738e3fee041
	Timecode GetTimecode();// 0x6737e3fee041
	FrameNumber Divide_FrameNumberInteger(FrameNumber A, int B);// 0x6736e3fee041
	FString Conv_TimecodeToString(out const Timecode InTimecode, bool bForceSignDisplay);// 0x6735e3fee041
	float Conv_QualifiedFrameTimeToSeconds(out const QualifiedFrameTime InFrameTime);// 0x6734e3fee041
	float Conv_FrameRateToSeconds(out const FrameRate InFrameRate);// 0x6733e3fee041
	int Conv_FrameNumberToInteger(out const FrameNumber InFrameNumber);// 0x6732e3fee041
	FrameNumber Add_FrameNumberInteger(FrameNumber A, int B);// 0x6731e3fee041
	FrameNumber Add_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0x6730e3fee041

--------------------------------
Class: TimeSynchronizationSource.Object
	bool bUseForSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int FrameOffset;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MovieSceneCustomClockSource.Interface.Object
	void OnTick(float DeltaSeconds, float InPlayRate);// 0x6744e3fee041
	void OnStopPlaying(out const QualifiedFrameTime InStopTime);// 0x6743e3fee041
	void OnStartPlaying(out const QualifiedFrameTime InStartTime);// 0x6742e3fee041
	FrameTime OnRequestCurrentTime(out const QualifiedFrameTime InCurrentTime, float InPlayRate);// 0x6741e3fee041

--------------------------------
Class: MovieSceneEntityProvider.Interface.Object

--------------------------------
Class: MovieScenePlaybackClient.Interface.Object

--------------------------------
Class: MovieSceneTrackTemplateProducer.Interface.Object

--------------------------------
Class: NodeAndChannelMappings.Interface.Object

--------------------------------
Class: MovieSceneNodeGroup.Object

--------------------------------
Class: MovieSceneNodeGroupCollection.Object

--------------------------------
Class: MovieSceneBindingOwnerInterface.Interface.Object

--------------------------------
Class: MovieSceneEntitySystem.Object
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	MovieSceneBoolChannel BoolCurve;//[Offset: 0xe0, Size: 0x90]

--------------------------------
Class: MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneGenericBoundObjectInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoundSceneComponentInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSceneComponentImpersonator.Interface.Object

--------------------------------
Class: MovieSceneFloatDecomposer.Interface.Object

--------------------------------
Class: MovieSceneEasingExternalCurve.Object
	CurveFloat* Curve;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: MovieSceneEasingFunction.Interface.Object
	float OnEvaluate(float Interp);// 0x6745e3fee041

--------------------------------
Class: MovieSceneEvalTimeSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneFolder.Object
	FName FolderName;//[Offset: 0x28, Size: 0x8]
	MovieSceneFolder*[] ChildFolders;//[Offset: 0x30, Size: 0x10]
	MovieSceneTrack*[] ChildMasterTracks;//[Offset: 0x40, Size: 0x10]
	FString[] ChildObjectBindingStrings;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MovieSceneKeyProxy.Interface.Object

--------------------------------
Class: MovieSceneMasterInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreAnimatedStateSystemInterface.Interface.Object

--------------------------------
Class: MovieSceneCachePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneRestorePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSpawnablesSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSpawnSection.MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSpawnTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10]
	Guid ObjectGuid;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionParameters Parameters;//[Offset: 0xdc, Size: 0x24]
	float StartOffset;//[Offset: 0x100, Size: 0x4]
	float TimeScale;//[Offset: 0x104, Size: 0x4]
	float PrerollTime;//[Offset: 0x108, Size: 0x4]
	MovieSceneSequence* SubSequence;//[Offset: 0x110, Size: 0x8]
	Actor* ActorToRecord;//[Offset: 0x118, Size: 0x1c]
	FString TargetSequenceName;//[Offset: 0x138, Size: 0x10]
	DirectoryPath TargetPathToRecordTo;//[Offset: 0x148, Size: 0x10]
	void SetSequence(MovieSceneSequence* Sequence);// 0x676fe3fee041
	MovieSceneSequence* GetSequence();// 0x676ee3fee041

--------------------------------
Class: MovieSceneSectionParameters
	FrameNumber StartFrameOffset;//[Offset: 0x0, Size: 0x4]
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FrameNumber EndFrameOffset;//[Offset: 0x8, Size: 0x4]
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0xc, Size: 0x4]
	float TimeScale;//[Offset: 0x10, Size: 0x4]
	int HierarchicalBias;//[Offset: 0x14, Size: 0x4]
	float StartOffset;//[Offset: 0x18, Size: 0x4]
	float PrerollTime;//[Offset: 0x1c, Size: 0x4]
	float PostrollTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: TestMovieSceneTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bHighPassFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	MovieSceneSection*[] SectionArray;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: TestMovieSceneSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: TestMovieSceneSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: TestMovieSceneSubTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] SectionArray;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: TestMovieSceneSubSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTrackInstance.Object
	Object* AnimatedObject;//[Offset: 0x28, Size: 0x8]
	bool bIsMasterTrackInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 0x8]
	MovieSceneTrackInstanceInput[] Inputs;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: MovieSceneTrackInstanceInput
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: MovieSceneTrackInstanceInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTrackInstanceSystem.MovieSceneEntitySystem.Object
	MovieSceneTrackInstanceInstantiator* Instantiator;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AnimNotify_PlayMontageNotify.AnimNotify.Object
	FName NotifyName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AnimNotify_PlayMontageNotifyWindow.AnimNotifyState.Object
	FName NotifyName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: KismetAnimationLibrary.BlueprintFunctionLibrary.Object
	void K2_TwoBoneIK(out const Vector RootPos, out const Vector JointPos, out const Vector EndPos, out const Vector JointTarget, out const Vector Effector, out Vector OutJointPos, out Vector OutEndPos, bool bAllowStretching, float StartStretchRatio, float MaxStretchScale);// 0x6779e3fee041
	void K2_StartProfilingTimer();// 0x6778e3fee041
	Vector K2_MakePerlinNoiseVectorAndRemap(float X, float Y, float Z, float RangeOutMinX, float RangeOutMaxX, float RangeOutMinY, float RangeOutMaxY, float RangeOutMinZ, float RangeOutMaxZ);// 0x6777e3fee041
	float K2_MakePerlinNoiseAndRemap(float Value, float RangeOutMin, float RangeOutMax);// 0x6776e3fee041
	Transform K2_LookAt(out const Transform CurrentTransform, out const Vector TargetPosition, Vector LookAtVector, bool bUseUpVector, Vector UpVector, float ClampConeInDegree);// 0x6775e3fee041
	float K2_EndProfilingTimer(bool bLog, FString LogPrefix);// 0x6774e3fee041
	float K2_DistanceBetweenTwoSocketsAndMapRange(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameA, byte SocketSpaceA, const FName SocketOrBoneNameB, byte SocketSpaceB, bool bRemapRange, float InRangeMin, float InRangeMax, float OutRangeMin, float OutRangeMax);// 0x6773e3fee041
	Vector K2_DirectionBetweenSockets(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameFrom, const FName SocketOrBoneNameTo);// 0x6772e3fee041
	float K2_CalculateVelocityFromSockets(float DeltaSeconds, SkeletalMeshComponent* Component, const FName SocketOrBoneName, const FName ReferenceSocketOrBone, byte SocketSpace, Vector OffsetInBoneSpace, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax, enum EasingType, out const RuntimeFloatCurve CustomCurve);// 0x6771e3fee041
	float K2_CalculateVelocityFromPositionHistory(float DeltaSeconds, Vector position, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax);// 0x6770e3fee041

--------------------------------
Class: PositionHistory
	Vector[] Positions;//[Offset: 0x0, Size: 0x10]
	float Range;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: PlayMontageCallbackProxy.Object
	delegate OnCompleted;//[Offset: 0x28, Size: 0x10]
	delegate OnBlendOut;//[Offset: 0x38, Size: 0x10]
	delegate OnInterrupted;//[Offset: 0x48, Size: 0x10]
	delegate OnNotifyBegin;//[Offset: 0x58, Size: 0x10]
	delegate OnNotifyEnd;//[Offset: 0x68, Size: 0x10]
	void OnNotifyEndReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x677ee3fee041
	void OnNotifyBeginReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x677de3fee041
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x677ce3fee041
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x677be3fee041
	PlayMontageCallbackProxy* CreateProxyObjectForPlayMontage(SkeletalMeshComponent* InSkeletalMeshComponent, AnimMontage* MontageToPlay, float PlayRate, float StartingPosition, FName StartingSection);// 0x677ae3fee041

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: SequencerAnimationSupport.Interface.Object

--------------------------------
Class: FloatChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTransformOrigin.Interface.Object
	Transform BP_GetTransformOrigin();// 0x677fe3fee041

--------------------------------
Class: MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	Guid ConstraintId;//[Offset: 0xdc, Size: 0x10]
	MovieSceneObjectBindingID ConstraintBindingID;//[Offset: 0xec, Size: 0x18]
	void SetConstraintBindingID(out const MovieSceneObjectBindingID InConstraintBindingID);// 0x6781e3fee041
	MovieSceneObjectBindingID GetConstraintBindingID();// 0x6780e3fee041

--------------------------------
Class: MovieScene3DAttachSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	FName AttachSocketName;//[Offset: 0x110, Size: 0x8]
	FName AttachComponentName;//[Offset: 0x118, Size: 0x8]
	enum AttachmentLocationRule;//[Offset: 0x120, Size: 0x1]
	enum AttachmentRotationRule;//[Offset: 0x121, Size: 0x1]
	enum AttachmentScaleRule;//[Offset: 0x122, Size: 0x1]
	enum DetachmentLocationRule;//[Offset: 0x123, Size: 0x1]
	enum DetachmentRotationRule;//[Offset: 0x124, Size: 0x1]
	enum DetachmentScaleRule;//[Offset: 0x125, Size: 0x1]

--------------------------------
Class: MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ConstraintSections;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: MovieScene3DAttachTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScene3DPathSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TimingCurve;//[Offset: 0x108, Size: 0xa0]
	enum FrontAxisEnum;//[Offset: 0x1a8, Size: 0x1]
	enum UpAxisEnum;//[Offset: 0x1a9, Size: 0x1]
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1aa, Size: 0x1]
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1aa, Size: 0x1]
	bool bForceUpright;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1aa, Size: 0x1]

--------------------------------
Class: MovieScene3DPathTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScenePropertySystem.MovieSceneEntitySystem.Object
	MovieScenePropertyInstantiatorSystem* InstantiatorSystem;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: MovieScenePropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneTransformMask TransformMask;//[Offset: 0xe8, Size: 0x4]
	MovieSceneFloatChannel Translation;//[Offset: 0xf0, Size: 0xa0]
	MovieSceneFloatChannel Rotation;//[Offset: 0x2d0, Size: 0xa0]
	MovieSceneFloatChannel Scale;//[Offset: 0x4b0, Size: 0xa0]
	MovieSceneFloatChannel ManualWeight;//[Offset: 0x690, Size: 0xa0]
	bool bUseQuaternionInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 0x1]

--------------------------------
Class: MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection* SectionToKey;//[Offset: 0x78, Size: 0x8]
	MovieScenePropertyBinding PropertyBinding;//[Offset: 0x80, Size: 0x14]
	MovieSceneSection*[] Sections;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: MovieScenePropertyBinding
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	FName PropertyPath;//[Offset: 0x8, Size: 0x8]
	bool bCanUseClassLookup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MovieScene3DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneActorReferenceSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneActorReferenceData ActorReferenceData;//[Offset: 0xe0, Size: 0xb0]
	IntegralCurve ActorGuidIndexCurve;//[Offset: 0x190, Size: 0x80]
	FString[] ActorGuidStrings;//[Offset: 0x210, Size: 0x10]

--------------------------------
Class: MovieSceneActorReferenceData.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10]
	MovieSceneActorReferenceKey[] KeyValues;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: MovieSceneActorReferenceKey
	MovieSceneObjectBindingID Object;//[Offset: 0x0, Size: 0x18]
	FName ComponentName;//[Offset: 0x18, Size: 0x8]
	FName SocketName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: MovieSceneActorReferenceTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneAudioSection.MovieSceneSection.MovieSceneSignedObject.Object
	SoundBase* Sound;//[Offset: 0xe0, Size: 0x8]
	FrameNumber StartFrameOffset;//[Offset: 0xe8, Size: 0x4]
	float StartOffset;//[Offset: 0xec, Size: 0x4]
	float AudioStartTime;//[Offset: 0xf0, Size: 0x4]
	float AudioDilationFactor;//[Offset: 0xf4, Size: 0x4]
	float AudioVolume;//[Offset: 0xf8, Size: 0x4]
	MovieSceneFloatChannel SoundVolume;//[Offset: 0x100, Size: 0xa0]
	MovieSceneFloatChannel PitchMultiplier;//[Offset: 0x1a0, Size: 0xa0]
	MovieSceneActorReferenceData AttachActorData;//[Offset: 0x240, Size: 0xb0]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x2f8, Size: 0x8]
	delegate OnQueueSubtitles;//[Offset: 0x300, Size: 0x10]
	delegate OnAudioFinished;//[Offset: 0x310, Size: 0x10]
	delegate OnAudioPlaybackPercent;//[Offset: 0x320, Size: 0x10]
	void SetStartOffset(FrameNumber InStartOffset);// 0x6785e3fee041
	void SetSound(SoundBase* InSound);// 0x6784e3fee041
	FrameNumber GetStartOffset();// 0x6783e3fee041
	SoundBase* GetSound();// 0x6782e3fee041

--------------------------------
Class: MovieSceneAudioTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AudioSections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneBaseValueEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneByteSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel ByteCurve;//[Offset: 0xe0, Size: 0x98]

--------------------------------
Class: MovieSceneByteTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: MovieSceneCameraAnimSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraAnimSectionData AnimData;//[Offset: 0xe0, Size: 0x20]
	CameraAnim* CameraAnim;//[Offset: 0x100, Size: 0x8]
	float PlayRate;//[Offset: 0x108, Size: 0x4]
	float PlayScale;//[Offset: 0x10c, Size: 0x4]
	float BlendInTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTime;//[Offset: 0x114, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]

--------------------------------
Class: MovieSceneCameraAnimSectionData
	CameraAnim* CameraAnim;//[Offset: 0x0, Size: 0x8]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float PlayScale;//[Offset: 0xc, Size: 0x4]
	float BlendInTime;//[Offset: 0x10, Size: 0x4]
	float BlendOutTime;//[Offset: 0x14, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: MovieSceneCameraAnimTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraAnimSections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneCameraCutSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool bLockPreviousCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	Guid CameraGuid;//[Offset: 0xec, Size: 0x10]
	MovieSceneObjectBindingID CameraBindingID;//[Offset: 0xfc, Size: 0x18]
	Transform InitialCameraCutTransform;//[Offset: 0x120, Size: 0x30]
	bool bHasInitialCameraCutTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	void SetCameraBindingID(out const MovieSceneObjectBindingID InCameraBindingID);// 0x6787e3fee041
	MovieSceneObjectBindingID GetCameraBindingID();// 0x6786e3fee041

--------------------------------
Class: MovieSceneCameraCutTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bCanBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	MovieSceneSection*[] Sections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneCameraCutTrackInstance.MovieSceneTrackInstance.Object

--------------------------------
Class: MovieSceneCameraShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe0, Size: 0x20]
	class MatineeCameraShake* ShakeClass;//[Offset: 0x100, Size: 0x8]
	float PlayScale;//[Offset: 0x108, Size: 0x4]
	enum PlaySpace;//[Offset: 0x10c, Size: 0x1]
	Rotator UserDefinedPlaySpace;//[Offset: 0x110, Size: 0xc]

--------------------------------
Class: MovieSceneCameraShakeSectionData
	class MatineeCameraShake* ShakeClass;//[Offset: 0x0, Size: 0x8]
	float PlayScale;//[Offset: 0x8, Size: 0x4]
	enum PlaySpace;//[Offset: 0xc, Size: 0x1]
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: MovieSceneCameraShakeSourceShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe0, Size: 0x20]

--------------------------------
Class: MovieSceneCameraShakeSourceShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSourceTriggerChannel Channel;//[Offset: 0xe0, Size: 0x88]

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10]
	MovieSceneCameraShakeSourceTrigger[] KeyValues;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: MovieSceneCameraShakeSourceTrigger
	class CameraShakeBase* ShakeClass;//[Offset: 0x0, Size: 0x8]
	float PlayScale;//[Offset: 0x8, Size: 0x4]
	enum PlaySpace;//[Offset: 0xc, Size: 0x1]
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneCameraShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneCinematicShotSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	FString ShotDisplayName;//[Offset: 0x158, Size: 0x10]
	FText DisplayName;//[Offset: 0x168, Size: 0x18]
	void SetShotDisplayName(FString InShotDisplayName);// 0x6789e3fee041
	FString GetShotDisplayName();// 0x6788e3fee041

--------------------------------
Class: MovieSceneCinematicShotTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneColorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel RedCurve;//[Offset: 0xe0, Size: 0xa0]
	MovieSceneFloatChannel GreenCurve;//[Offset: 0x180, Size: 0xa0]
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x220, Size: 0xa0]
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x2c0, Size: 0xa0]

--------------------------------
Class: MovieSceneColorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bIsSlateColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: MovieSceneComponentAttachmentInvalidatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentAttachmentSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentMobilitySystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreAnimatedComponentTransformSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentTransformSystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEnumSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel EnumCurve;//[Offset: 0xe0, Size: 0x98]

--------------------------------
Class: MovieSceneEnumTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: MovieSceneEulerTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEulerTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventRepeaterSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEvent Event;//[Offset: 0xe8, Size: 0x28]

--------------------------------
Class: MovieSceneEvent
	MovieSceneEventPtrs Ptrs;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: MovieSceneEventPtrs
	Function* Function;//[Offset: 0x0, Size: 0x8]
	FieldPathProperty BoundObjectProperty;//[Size: 0x20]

--------------------------------
Class: MovieSceneEventSection.MovieSceneSection.MovieSceneSignedObject.Object
	NameCurve Events;//[Offset: 0xe0, Size: 0x78]
	MovieSceneEventSectionData EventData;//[Offset: 0x158, Size: 0x88]

--------------------------------
Class: NameCurve.IndexedCurve
	NameCurveKey[] Keys;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: NameCurveKey
	float Time;//[Offset: 0x0, Size: 0x4]
	FName Value;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: MovieSceneEventSectionData.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10]
	EventPayload[] KeyValues;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: EventPayload
	FName EventName;//[Offset: 0x0, Size: 0x8]
	MovieSceneEventParameters Parameters;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: MovieSceneEventParameters

--------------------------------
Class: MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePostSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePostEvalEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEventTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	enum EventPosition;//[Offset: 0x81, Size: 0x1]
	MovieSceneSection*[] Sections;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: MovieSceneEventTriggerSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEventChannel EventChannel;//[Offset: 0xe8, Size: 0x88]

--------------------------------
Class: MovieSceneEventChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10]
	MovieSceneEvent[] KeyValues;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: MovieSceneFadeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe0, Size: 0xa0]
	LinearColor FadeColor;//[Offset: 0x180, Size: 0x10]
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 0x1]

--------------------------------
Class: MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFadeTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFloatPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe8, Size: 0xa0]

--------------------------------
Class: MovieSceneHierarchicalBiasSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneIntegerSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneIntegerChannel IntegerCurve;//[Offset: 0xe0, Size: 0x90]

--------------------------------
Class: MovieSceneIntegerTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneInterrogatedPropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneLevelVisibilitySection.MovieSceneSection.MovieSceneSignedObject.Object
	enum Visibility;//[Offset: 0xe8, Size: 0x1]
	FName[] LevelNames;//[Offset: 0xf0, Size: 0x10]
	void SetVisibility(enum InVisibility);// 0x678de3fee041
	void SetLevelNames(out const FName[] InLevelNames);// 0x678ce3fee041
	enum GetVisibility();// 0x678be3fee041
	FName[] GetLevelNames();// 0x678ae3fee041

--------------------------------
Class: MovieSceneLevelVisibilitySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneLevelVisibilityTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: MovieSceneMaterialParameterCollectionTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MaterialParameterCollection* MPC;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: MovieSceneComponentMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: MovieSceneObjectPropertySection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel ObjectChannel;//[Offset: 0xe0, Size: 0xc0]

--------------------------------
Class: MovieSceneObjectPathChannel.MovieSceneChannel
	class Object* PropertyClass;//[Offset: 0x8, Size: 0x8]
	FrameNumber[] Times;//[Offset: 0x10, Size: 0x10]
	MovieSceneObjectPathChannelKeyValue[] Values;//[Offset: 0x20, Size: 0x10]
	MovieSceneObjectPathChannelKeyValue DefaultValue;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: MovieSceneObjectPathChannelKeyValue
	Object* SoftPtr;//[Offset: 0x0, Size: 0x28]
	Object* HardPtr;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MovieSceneObjectPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	class Object* PropertyClass;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: MovieSceneParticleParameterTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneParticleSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneParticleChannel ParticleKeys;//[Offset: 0xe0, Size: 0x98]

--------------------------------
Class: MovieSceneParticleChannel.MovieSceneByteChannel.MovieSceneChannel

--------------------------------
Class: MovieSceneParticleTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ParticleSections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieScenePiecewiseFloatBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePrimitiveMaterialSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel MaterialChannel;//[Offset: 0xe0, Size: 0xc0]

--------------------------------
Class: MovieScenePrimitiveMaterialTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: MovieSceneQuaternionInterpolationRotationSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSkeletalAnimationSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSkeletalAnimationParams Params;//[Offset: 0xe0, Size: 0xd8]
	AnimSequence* AnimSequence;//[Offset: 0x1b8, Size: 0x8]
	AnimSequenceBase* Animation;//[Offset: 0x1c0, Size: 0x8]
	float StartOffset;//[Offset: 0x1c8, Size: 0x4]
	float EndOffset;//[Offset: 0x1cc, Size: 0x4]
	float PlayRate;//[Offset: 0x1d0, Size: 0x4]
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 0x1]
	FName SlotName;//[Offset: 0x1d8, Size: 0x8]
	Vector StartLocationOffset;//[Offset: 0x1e0, Size: 0xc]
	Rotator StartRotationOffset;//[Offset: 0x1ec, Size: 0xc]
	bool bMatchWithPrevious;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]
	FName MatchedBoneName;//[Offset: 0x1fc, Size: 0x8]
	Vector MatchedLocationOffset;//[Offset: 0x204, Size: 0xc]
	Rotator MatchedRotationOffset;//[Offset: 0x210, Size: 0xc]
	bool bMatchTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 0x1]
	bool bMatchIncludeZHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d, Size: 0x1]
	bool bMatchRotationYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21e, Size: 0x1]
	bool bMatchRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21f, Size: 0x1]
	bool bMatchRotationRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]

--------------------------------
Class: MovieSceneSkeletalAnimationParams
	AnimSequenceBase* Animation;//[Offset: 0x0, Size: 0x8]
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4]
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4]
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4]
	float PlayRate;//[Offset: 0x14, Size: 0x4]
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	FName SlotName;//[Offset: 0x1c, Size: 0x8]
	MovieSceneFloatChannel Weight;//[Offset: 0x28, Size: 0xa0]
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bForceCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	float StartOffset;//[Offset: 0xcc, Size: 0x4]
	float EndOffset;//[Offset: 0xd0, Size: 0x4]

--------------------------------
Class: MovieSceneSkeletalAnimationTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x80, Size: 0x10]
	bool bUseLegacySectionIndexBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	MovieSceneSkeletalAnimRootMotionTrackParams RootMotionParams;//[Offset: 0x98, Size: 0x30]
	bool bBlendFirstChildOfRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: MovieSceneSkeletalAnimRootMotionTrackParams

--------------------------------
Class: MovieSceneSlomoSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe0, Size: 0xa0]

--------------------------------
Class: MovieSceneSlomoTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneStringSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneStringChannel StringCurve;//[Offset: 0xe0, Size: 0xa0]

--------------------------------
Class: MovieSceneStringChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10]
	FString[] Values;//[Offset: 0x18, Size: 0x10]
	FString DefaultValue;//[Offset: 0x28, Size: 0x10]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MovieSceneStringTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTransformOriginSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneVectorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel Curves;//[Offset: 0xe0, Size: 0xa0]
	int ChannelsUsed;//[Offset: 0x360, Size: 0x4]

--------------------------------
Class: MovieSceneVectorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int NumChannelsUsed;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: MovieSceneVisibilityTrack.MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneHierarchicalEasingInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: WeightAndEasingEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: AsyncTaskDownloadImage.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFail;//[Offset: 0x40, Size: 0x10]
	AsyncTaskDownloadImage* DownloadImageWithSavePath(FString URL, FString savePath);// 0x678fe3fee041
	AsyncTaskDownloadImage* DownloadImage(FString URL);// 0x678ee3fee041

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0x13c, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x14c, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x14d, Size: 0x1]
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e, Size: 0x1]
	float BlurStrength;//[Offset: 0x150, Size: 0x4]
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	int BlurRadius;//[Offset: 0x158, Size: 0x4]
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x160, Size: 0x90]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x6796e3fee041
	void SetPadding(Margin InPadding);// 0x6795e3fee041
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0x6794e3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x6793e3fee041
	void SetBlurStrength(float InStrength);// 0x6792e3fee041
	void SetBlurRadius(int InBlurRadius);// 0x6791e3fee041
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0x6790e3fee041

--------------------------------
Class: BackgroundBlurSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x60, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x70, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x71, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x6799e3fee041
	void SetPadding(Margin InPadding);// 0x6798e3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x6797e3fee041

--------------------------------
Class: BoolBinding.PropertyBinding.Object
	bool GetValue();// 0x679ae3fee041

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x139, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x13a, Size: 0x1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13b, Size: 0x1]
	LinearColor ContentColorAndOpacity;//[Offset: 0x13c, Size: 0x10]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x14c, Size: 0x10]
	Margin Padding;//[Offset: 0x15c, Size: 0x10]
	SlateBrush Background;//[Offset: 0x170, Size: 0x90]
	delegate BackgroundDelegate;//[Offset: 0x200, Size: 0x10]
	LinearColor BrushColor;//[Offset: 0x210, Size: 0x10]
	delegate BrushColorDelegate;//[Offset: 0x220, Size: 0x10]
	Vector2D DesiredSizeScale;//[Offset: 0x230, Size: 0x8]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x23c, Size: 0x10]
	delegate OnMouseButtonUpEvent;//[Offset: 0x24c, Size: 0x10]
	delegate OnMouseMoveEvent;//[Offset: 0x25c, Size: 0x10]
	delegate OnMouseDoubleClickEvent;//[Offset: 0x26c, Size: 0x10]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x67a5e3fee041
	void SetPadding(Margin InPadding);// 0x67a4e3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x67a3e3fee041
	void SetDesiredSizeScale(Vector2D InScale);// 0x67a2e3fee041
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x67a1e3fee041
	void SetBrushFromTexture(Texture2D* Texture);// 0x67a0e3fee041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x679fe3fee041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x679ee3fee041
	void SetBrushColor(LinearColor InBrushColor);// 0x679de3fee041
	void SetBrush(out const SlateBrush InBrush);// 0x679ce3fee041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x679be3fee041

--------------------------------
Class: BorderSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x60, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x70, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x71, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x67a8e3fee041
	void SetPadding(Margin InPadding);// 0x67a7e3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x67a6e3fee041

--------------------------------
Class: BrushBinding.PropertyBinding.Object
	SlateBrush GetValue();// 0x67a9e3fee041

--------------------------------
Class: ButtonSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x60, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x70, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x71, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x67ace3fee041
	void SetPadding(Margin InPadding);// 0x67abe3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x67aae3fee041

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x139, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0x13c, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0x150, Size: 0x5c8]
	SlateWidgetStyleAsset* Style;//[Offset: 0x718, Size: 0x8]
	SlateBrushAsset* UncheckedImage;//[Offset: 0x720, Size: 0x8]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x728, Size: 0x8]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x730, Size: 0x8]
	SlateBrushAsset* CheckedImage;//[Offset: 0x738, Size: 0x8]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x740, Size: 0x8]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x748, Size: 0x8]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x750, Size: 0x8]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x758, Size: 0x8]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x760, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x768, Size: 0x1]
	Margin Padding;//[Offset: 0x76c, Size: 0x10]
	SlateColor BorderBackgroundColor;//[Offset: 0x780, Size: 0x28]
	byte ClickMethod;//[Offset: 0x7a8, Size: 0x1]
	byte TouchMethod;//[Offset: 0x7a9, Size: 0x1]
	byte PressMethod;//[Offset: 0x7aa, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ab, Size: 0x1]
	delegate OnCheckStateChanged;//[Offset: 0x7b0, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x67d0e3fee041
	void SetPressMethod(byte InPressMethod);// 0x67cfe3fee041
	void SetIsChecked(bool InIsChecked);// 0x67cee3fee041
	void SetClickMethod(byte InClickMethod);// 0x67cde3fee041
	void SetCheckedState(enum InCheckedState);// 0x67cce3fee041
	bool IsPressed();// 0x67cbe3fee041
	bool IsChecked();// 0x67cae3fee041
	enum GetCheckedState();// 0x67c9e3fee041

--------------------------------
Class: CheckedStateBinding.PropertyBinding.Object
	enum GetValue();// 0x67d1e3fee041

--------------------------------
Class: CircularThrobber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x124, Size: 0x4]
	float Period;//[Offset: 0x128, Size: 0x4]
	float Radius;//[Offset: 0x12c, Size: 0x4]
	SlateBrushAsset* PieceImage;//[Offset: 0x130, Size: 0x8]
	SlateBrush Image;//[Offset: 0x138, Size: 0x90]
	bool bEnableRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	void SetRadius(float InRadius);// 0x67d4e3fee041
	void SetPeriod(float InPeriod);// 0x67d3e3fee041
	void SetNumberOfPieces(int InNumberOfPieces);// 0x67d2e3fee041

--------------------------------
Class: ColorBinding.PropertyBinding.Object
	SlateColor GetSlateValue();// 0x67d6e3fee041
	LinearColor GetLinearValue();// 0x67d5e3fee041

--------------------------------
Class: ComboBox.Widget.Visual.Object
	Object*[] Items;//[Offset: 0x128, Size: 0x10]
	delegate OnGenerateWidgetEvent;//[Offset: 0x138, Size: 0x10]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]

--------------------------------
Class: DynamicEntryBoxBase.Widget.Visual.Object
	enum EntryBoxType;//[Offset: 0x124, Size: 0x1]
	Vector2D EntrySpacing;//[Offset: 0x128, Size: 0x8]
	Vector2D[] SpacingPattern;//[Offset: 0x130, Size: 0x10]
	SlateChildSize EntrySizeRule;//[Offset: 0x140, Size: 0x8]
	byte EntryHorizontalAlignment;//[Offset: 0x148, Size: 0x1]
	byte EntryVerticalAlignment;//[Offset: 0x149, Size: 0x1]
	int MaxElementSize;//[Offset: 0x14c, Size: 0x4]
	RadialBoxSettings RadialBoxSettings;//[Offset: 0x150, Size: 0xc]
	UserWidgetPool EntryWidgetPool;//[Offset: 0x170, Size: 0x80]
	void SetRadialSettings(out const RadialBoxSettings InSettings);// 0x67dde3fee041
	void SetEntrySpacing(out const Vector2D InEntrySpacing);// 0x67dce3fee041
	int GetNumEntries();// 0x67dbe3fee041
	UserWidget*[] GetAllEntries();// 0x67dae3fee041

--------------------------------
Class: RadialBoxSettings
	bool bDistributeItemsEvenly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float AngleBetweenItems;//[Offset: 0x4, Size: 0x4]
	float StartingAngle;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: DynamicEntryBox.DynamicEntryBoxBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x1f0, Size: 0x8]
	void Reset(bool bDeleteWidgets);// 0x67e1e3fee041
	void RemoveEntry(UserWidget* EntryWidget);// 0x67e0e3fee041
	UserWidget* BP_CreateEntryOfClass(class UserWidget EntryClass);// 0x67dfe3fee041
	UserWidget* BP_CreateEntry();// 0x67dee3fee041

--------------------------------
Class: EditableText.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x140, Size: 0x10]
	FText HintText;//[Offset: 0x150, Size: 0x18]
	delegate HintTextDelegate;//[Offset: 0x168, Size: 0x10]
	EditableTextStyle WidgetStyle;//[Offset: 0x178, Size: 0x238]
	SlateWidgetStyleAsset* Style;//[Offset: 0x3b0, Size: 0x8]
	SlateBrushAsset* BackgroundImageSelected;//[Offset: 0x3b8, Size: 0x8]
	SlateBrushAsset* BackgroundImageComposing;//[Offset: 0x3c0, Size: 0x8]
	SlateBrushAsset* CaretImage;//[Offset: 0x3c8, Size: 0x8]
	SlateFontInfo Font;//[Offset: 0x3d0, Size: 0x58]
	SlateColor ColorAndOpacity;//[Offset: 0x428, Size: 0x28]
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 0x1]
	float MinimumDesiredWidth;//[Offset: 0x454, Size: 0x4]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 0x1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45a, Size: 0x1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45b, Size: 0x1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d, Size: 0x1]
	byte KeyboardType;//[Offset: 0x45e, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x45f, Size: 0x1]
	enum VirtualKeyboardTrigger;//[Offset: 0x460, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0x461, Size: 0x1]
	byte Justification;//[Offset: 0x462, Size: 0x1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x463, Size: 0x3]
	delegate OnTextChanged;//[Offset: 0x468, Size: 0x10]
	delegate OnTextCommitted;//[Offset: 0x478, Size: 0x10]
	void SetText(FText InText);// 0x198ee3fee041
	void SetJustification(byte InJustification);// 0x198ce3fee041
	void SetIsReadOnly(bool InbIsReadyOnly);// 0x198be3fee041
	void SetIsPassword(bool InbIsPassword);// 0x198ae3fee041
	void SetHintText(FText InHintText);// 0x1989e3fee041
	void OnEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x1987e3fee041
	void OnEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x1986e3fee041
	FText GetText();// 0x1985e3fee041

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: EditableTextBox.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x140, Size: 0x10]
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x150, Size: 0x860]
	SlateWidgetStyleAsset* Style;//[Offset: 0x9b0, Size: 0x8]
	FText HintText;//[Offset: 0x9b8, Size: 0x18]
	delegate HintTextDelegate;//[Offset: 0x9d0, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x9e0, Size: 0x58]
	LinearColor ForegroundColor;//[Offset: 0xa38, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0xa48, Size: 0x10]
	LinearColor ReadOnlyForegroundColor;//[Offset: 0xa58, Size: 0x10]
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa68, Size: 0x1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa69, Size: 0x1]
	float MinimumDesiredWidth;//[Offset: 0xa6c, Size: 0x4]
	Margin Padding;//[Offset: 0xa70, Size: 0x10]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa80, Size: 0x1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa81, Size: 0x1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa82, Size: 0x1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa83, Size: 0x1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa84, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa85, Size: 0x1]
	byte KeyboardType;//[Offset: 0xa86, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0xa87, Size: 0x1]
	enum VirtualKeyboardTrigger;//[Offset: 0xa88, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0xa89, Size: 0x1]
	byte Justification;//[Offset: 0xa8a, Size: 0x1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xa8b, Size: 0x3]
	delegate OnTextChanged;//[Offset: 0xa90, Size: 0x10]
	delegate OnTextCommitted;//[Offset: 0xaa0, Size: 0x10]
	void SetText(FText InText);// 0x19a1e3fee041
	void SetJustification(byte InJustification);// 0x19a0e3fee041
	void SetIsReadOnly(bool bReadOnly);// 0x199fe3fee041
	void SetIsPassword(bool bIsPassword);// 0x199ee3fee041
	void SetHintText(FText InText);// 0x199de3fee041
	void SetError(FText InError);// 0x199ce3fee041
	void OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x199be3fee041
	void OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x199ae3fee041
	bool HasError();// 0x1999e3fee041
	FText GetText();// 0x1998e3fee041
	void ClearError();// 0x1997e3fee041

--------------------------------
Class: ExpandableArea.Widget.Visual.Object
	ExpandableAreaStyle Style;//[Offset: 0x130, Size: 0x130]
	SlateBrush BorderBrush;//[Offset: 0x260, Size: 0x90]
	SlateColor BorderColor;//[Offset: 0x2f0, Size: 0x28]
	bool bIsExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	float MaxHeight;//[Offset: 0x31c, Size: 0x4]
	Margin HeaderPadding;//[Offset: 0x320, Size: 0x10]
	Margin AreaPadding;//[Offset: 0x330, Size: 0x10]
	delegate OnExpansionChanged;//[Offset: 0x340, Size: 0x10]
	Widget* HeaderContent;//[Offset: 0x350, Size: 0x8]
	Widget* BodyContent;//[Offset: 0x358, Size: 0x8]
	void SetIsExpanded_Animated(bool IsExpanded);// 0x67e4e3fee041
	void SetIsExpanded(bool IsExpanded);// 0x67e3e3fee041
	bool GetIsExpanded();// 0x67e2e3fee041

--------------------------------
Class: ExpandableAreaStyle.SlateWidgetStyle
	SlateBrush CollapsedImage;//[Offset: 0x8, Size: 0x90]
	SlateBrush ExpandedImage;//[Offset: 0x98, Size: 0x90]
	float RolloutAnimationSeconds;//[Offset: 0x128, Size: 0x4]

--------------------------------
Class: FloatBinding.PropertyBinding.Object
	float GetValue();// 0x67e5e3fee041

--------------------------------
Class: GridPanel.PanelWidget.Widget.Visual.Object
	float[] ColumnFill;//[Offset: 0x140, Size: 0x10]
	float[] RowFill;//[Offset: 0x150, Size: 0x10]
	void SetRowFill(int ColumnIndex, float Coefficient);// 0x67e8e3fee041
	void SetColumnFill(int ColumnIndex, float Coefficient);// 0x67e7e3fee041
	GridSlot* AddChildToGrid(Widget* Content, int InRow, int InColumn);// 0x67e6e3fee041

--------------------------------
Class: GridSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x60, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x70, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x71, Size: 0x1]
	int Row;//[Offset: 0x74, Size: 0x4]
	int RowSpan;//[Offset: 0x78, Size: 0x4]
	int Column;//[Offset: 0x7c, Size: 0x4]
	int ColumnSpan;//[Offset: 0x80, Size: 0x4]
	int Layer;//[Offset: 0x84, Size: 0x4]
	Vector2D Nudge;//[Offset: 0x88, Size: 0x8]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x67f1e3fee041
	void SetRowSpan(int InRowSpan);// 0x67f0e3fee041
	void SetRow(int InRow);// 0x67efe3fee041
	void SetPadding(Margin InPadding);// 0x67eee3fee041
	void SetNudge(Vector2D InNudge);// 0x67ede3fee041
	void SetLayer(int InLayer);// 0x67ece3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x67ebe3fee041
	void SetColumnSpan(int InColumnSpan);// 0x67eae3fee041
	void SetColumn(int InColumn);// 0x67e9e3fee041

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x67f2e3fee041

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x68, Size: 0x10]
	SlateChildSize Size;//[Offset: 0x78, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x80, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x81, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x67f6e3fee041
	void SetSize(SlateChildSize InSize);// 0x67f5e3fee041
	void SetPadding(Margin InPadding);// 0x67f4e3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x67f3e3fee041

--------------------------------
Class: InputKeySelector.Widget.Visual.Object
	ButtonStyle WidgetStyle;//[Offset: 0x128, Size: 0x298]
	TextBlockStyle TextStyle;//[Offset: 0x3c0, Size: 0x288]
	InputChord SelectedKey;//[Offset: 0x648, Size: 0x20]
	SlateFontInfo Font;//[Offset: 0x668, Size: 0x58]
	Margin Margin;//[Offset: 0x6c0, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x6d0, Size: 0x10]
	FText KeySelectionText;//[Offset: 0x6e0, Size: 0x18]
	FText NoKeySpecifiedText;//[Offset: 0x6f8, Size: 0x18]
	bool bAllowModifierKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710, Size: 0x1]
	bool bAllowGamepadKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x711, Size: 0x1]
	Key[] EscapeKeys;//[Offset: 0x718, Size: 0x10]
	delegate OnKeySelected;//[Offset: 0x728, Size: 0x10]
	delegate OnIsSelectingKeyChanged;//[Offset: 0x738, Size: 0x10]
	void SetTextBlockVisibility(const enum InVisibility);// 0x19afe3fee041
	void SetSelectedKey(out const InputChord InSelectedKey);// 0x19aee3fee041
	void SetNoKeySpecifiedText(FText InNoKeySpecifiedText);// 0x19ade3fee041
	void SetKeySelectionText(FText InKeySelectionText);// 0x19ace3fee041
	void SetEscapeKeys(out const Key[] InKeys);// 0x19abe3fee041
	void SetAllowModifierKeys(bool bInAllowModifierKeys);// 0x19aae3fee041
	void SetAllowGamepadKeys(bool bInAllowGamepadKeys);// 0x19a9e3fee041
	void OnKeySelected__DelegateSignature(InputChord SelectedKey);// 0x19a7e3fee041
	void OnIsSelectingKeyChanged__DelegateSignature();// 0x19a6e3fee041
	bool GetIsSelectingKey();// 0x19a5e3fee041

--------------------------------
Class: Int32Binding.PropertyBinding.Object
	int GetValue();// 0x67f7e3fee041

--------------------------------
Class: InvalidationBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bCanCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	bool CacheRelativeTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1]
	void SetCanCache(bool CanCache);// 0x67fae3fee041
	void InvalidateCache();// 0x67f9e3fee041
	bool GetCanCache();// 0x67f8e3fee041

--------------------------------
Class: UserListEntry.Interface.Object
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0x67fde3fee041
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0x67fce3fee041
	void BP_OnEntryReleased();// 0x67fbe3fee041

--------------------------------
Class: UserListEntryLibrary.BlueprintFunctionLibrary.Object
	bool IsListItemSelected(interface classNone UserListEntry);// 0x6800e3fee041
	bool IsListItemExpanded(interface classNone UserListEntry);// 0x67ffe3fee041
	ListViewBase* GetOwningListView(interface classNone UserListEntry);// 0x67fee3fee041

--------------------------------
Class: UserObjectListEntry.UserListEntry.Interface.Object
	void OnListItemObjectSet(Object* ListItemObject);// 0x6801e3fee041

--------------------------------
Class: UserObjectListEntryLibrary.BlueprintFunctionLibrary.Object
	Object* GetListItemObject(interface classNone UserObjectListEntry);// 0x6802e3fee041

--------------------------------
Class: ListItemData.Object
	int Index;//[Offset: 0x28, Size: 0x4]
	FText Content;//[Offset: 0x30, Size: 0x18]
	void SetIndex(out const int idx);// 0x6804e3fee041
	void SetContent(out const FText Msg);// 0x6803e3fee041

--------------------------------
Class: ListViewDesignerPreviewItem.Object

--------------------------------
Class: MouseCursorBinding.PropertyBinding.Object
	byte GetValue();// 0x6805e3fee041

--------------------------------
Class: MovieScene2DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene2DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieScene2DTransformMask TransformMask;//[Offset: 0xe8, Size: 0x4]
	MovieSceneFloatChannel Translation;//[Offset: 0xf0, Size: 0xa0]
	MovieSceneFloatChannel Rotation;//[Offset: 0x230, Size: 0xa0]
	MovieSceneFloatChannel Scale;//[Offset: 0x2d0, Size: 0xa0]
	MovieSceneFloatChannel Shear;//[Offset: 0x410, Size: 0xa0]

--------------------------------
Class: MovieScene2DTransformMask
	uint32 Mask;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieScene2DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneMarginSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TopCurve;//[Offset: 0xe0, Size: 0xa0]
	MovieSceneFloatChannel LeftCurve;//[Offset: 0x180, Size: 0xa0]
	MovieSceneFloatChannel RightCurve;//[Offset: 0x220, Size: 0xa0]
	MovieSceneFloatChannel BottomCurve;//[Offset: 0x2c0, Size: 0xa0]

--------------------------------
Class: MovieSceneMarginTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneWidgetMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	FName[] BrushPropertyNamePath;//[Offset: 0x90, Size: 0x10]
	FName TrackName;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: MultiLineEditableText.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x148, Size: 0x18]
	FText HintText;//[Offset: 0x160, Size: 0x18]
	delegate HintTextDelegate;//[Offset: 0x178, Size: 0x10]
	TextBlockStyle WidgetStyle;//[Offset: 0x188, Size: 0x288]
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	SlateFontInfo Font;//[Offset: 0x418, Size: 0x58]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	bool ClearTextSelectionOnFocusLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 0x1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x472, Size: 0x1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x473, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x475, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0x476, Size: 0x1]
	delegate OnTextChanged;//[Offset: 0x478, Size: 0x10]
	delegate OnTextCommitted;//[Offset: 0x488, Size: 0x10]
	void SetWidgetStyle(out const TextBlockStyle InWidgetStyle);// 0x19dce3fee041
	void SetText(FText InText);// 0x19dbe3fee041
	void SetIsReadOnly(bool bReadOnly);// 0x19dae3fee041
	void SetHintText(FText InHintText);// 0x19d9e3fee041
	void OnMultiLineEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x19d8e3fee041
	void OnMultiLineEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x19d7e3fee041
	FText GetText();// 0x19d6e3fee041
	FText GetHintText();// 0x19d5e3fee041

--------------------------------
Class: MultiLineEditableTextBox.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x148, Size: 0x18]
	FText HintText;//[Offset: 0x160, Size: 0x18]
	delegate HintTextDelegate;//[Offset: 0x178, Size: 0x10]
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x188, Size: 0x860]
	TextBlockStyle TextStyle;//[Offset: 0x9e8, Size: 0x288]
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc70, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc71, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0xc72, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0xc73, Size: 0x1]
	SlateWidgetStyleAsset* Style;//[Offset: 0xc78, Size: 0x8]
	SlateFontInfo Font;//[Offset: 0xc80, Size: 0x58]
	LinearColor ForegroundColor;//[Offset: 0xcd8, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0xce8, Size: 0x10]
	LinearColor ReadOnlyForegroundColor;//[Offset: 0xcf8, Size: 0x10]
	delegate OnTextChanged;//[Offset: 0xd08, Size: 0x10]
	delegate OnTextCommitted;//[Offset: 0xd18, Size: 0x10]
	void SetTextStyle(out const TextBlockStyle InTextStyle);// 0x19e5e3fee041
	void SetText(FText InText);// 0x19e4e3fee041
	void SetIsReadOnly(bool bReadOnly);// 0x19e3e3fee041
	void SetHintText(FText InHintText);// 0x19e2e3fee041
	void SetError(FText InError);// 0x19e1e3fee041
	void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x19e0e3fee041
	void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x19dfe3fee041
	FText GetText();// 0x19dee3fee041
	FText GetHintText();// 0x19dde3fee041

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: NamedSlotInterface.Interface.Object

--------------------------------
Class: NativeWidgetHost.Widget.Visual.Object

--------------------------------
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bRetainRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	bool RenderOnInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1]
	bool RenderOnPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b, Size: 0x1]
	int Phase;//[Offset: 0x13c, Size: 0x4]
	int PhaseCount;//[Offset: 0x140, Size: 0x4]
	MaterialInterface* EffectMaterial;//[Offset: 0x148, Size: 0x8]
	FName TextureParameter;//[Offset: 0x150, Size: 0x8]
	void SetTextureParameter(FName TextureParameter);// 0x680ee3fee041
	void SetRetainRendering(bool bInRetainRendering);// 0x680de3fee041
	void SetRenderingPhase(int RenderPhase, int TotalPhases);// 0x680ce3fee041
	void SetEffectMaterial(MaterialInterface* EffectMaterial);// 0x680be3fee041
	void RequestRender();// 0x680ae3fee041
	MaterialInstanceDynamic* GetEffectMaterial();// 0x6809e3fee041

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x148, Size: 0x18]
	DataTable* TextStyleSet;//[Offset: 0x160, Size: 0x8]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x168, Size: 0x10]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x180, Size: 0x288]
	float MinDesiredWidth;//[Offset: 0x408, Size: 0x4]
	enum TextTransformPolicy;//[Offset: 0x40c, Size: 0x1]
	TextBlockStyle DefaultTextStyle;//[Offset: 0x410, Size: 0x288]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x698, Size: 0x10]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x681ce3fee041
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x681be3fee041
	void SetText(out const FText InText);// 0x681ae3fee041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x6819e3fee041
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x6818e3fee041
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x6817e3fee041
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x6816e3fee041
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x6815e3fee041
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x6814e3fee041
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x6813e3fee041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x6812e3fee041
	FText GetText();// 0x6811e3fee041
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x6810e3fee041
	void ClearAllDefaultStyleOverrides();// 0x680fe3fee041

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: RichTextBlockImageDecorator.RichTextBlockDecorator.Object
	DataTable* ImageSet;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object
	bool PadLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	bool PadRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1]
	bool PadTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b, Size: 0x1]
	bool PadBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);// 0x681de3fee041

--------------------------------
Class: SafeZoneSlot.PanelSlot.Visual.Object
	bool bIsTitleSafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	Margin SafeAreaScale;//[Offset: 0x64, Size: 0x10]
	byte HAlign;//[Offset: 0x74, Size: 0x1]
	byte VAlign;//[Offset: 0x75, Size: 0x1]
	Margin Padding;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x139, Size: 0x1]
	byte StretchDirection;//[Offset: 0x13a, Size: 0x1]
	float UserSpecifiedScale;//[Offset: 0x13c, Size: 0x4]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x6821e3fee041
	void SetStretchDirection(byte InStretchDirection);// 0x6820e3fee041
	void SetStretch(byte InStretch);// 0x681fe3fee041
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x681ee3fee041

--------------------------------
Class: ScaleBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x60, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x70, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x71, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x6824e3fee041
	void SetPadding(Margin InPadding);// 0x6823e3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x6822e3fee041

--------------------------------
Class: ScrollBar.Widget.Visual.Object
	ScrollBarStyle WidgetStyle;//[Offset: 0x128, Size: 0x518]
	SlateWidgetStyleAsset* Style;//[Offset: 0x640, Size: 0x8]
	bool bAlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 0x1]
	bool bAlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x649, Size: 0x1]
	byte Orientation;//[Offset: 0x64a, Size: 0x1]
	Vector2D Thickness;//[Offset: 0x64c, Size: 0x8]
	Margin Padding;//[Offset: 0x654, Size: 0x10]
	void SetState(float InOffsetFraction, float InThumbSizeFraction);// 0x6825e3fee041

--------------------------------
Class: ScrollBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x60, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x70, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x71, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x6828e3fee041
	void SetPadding(Margin InPadding);// 0x6827e3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x6826e3fee041

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x150, Size: 0x4]
	float HeightOverride;//[Offset: 0x154, Size: 0x4]
	float MinDesiredWidth;//[Offset: 0x158, Size: 0x4]
	float MinDesiredHeight;//[Offset: 0x15c, Size: 0x4]
	float MaxDesiredWidth;//[Offset: 0x160, Size: 0x4]
	float MaxDesiredHeight;//[Offset: 0x164, Size: 0x4]
	float MinAspectRatio;//[Offset: 0x168, Size: 0x4]
	float MaxAspectRatio;//[Offset: 0x16c, Size: 0x4]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x170, Size: 0x1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x170, Size: 0x1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x170, Size: 0x1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x170, Size: 0x1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x170, Size: 0x1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x170, Size: 0x1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x170, Size: 0x1]
	void SetWidthOverride(float InWidthOverride);// 0x6838e3fee041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x6837e3fee041
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x6836e3fee041
	void SetMinAspectRatio(float InMinAspectRatio);// 0x6835e3fee041
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x6834e3fee041
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x6833e3fee041
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x6832e3fee041
	void SetHeightOverride(float InHeightOverride);// 0x6831e3fee041
	void ClearWidthOverride();// 0x6830e3fee041
	void ClearMinDesiredWidth();// 0x682fe3fee041
	void ClearMinDesiredHeight();// 0x682ee3fee041
	void ClearMinAspectRatio();// 0x682de3fee041
	void ClearMaxDesiredWidth();// 0x682ce3fee041
	void ClearMaxDesiredHeight();// 0x682be3fee041
	void ClearMaxAspectRatio();// 0x682ae3fee041
	void ClearHeightOverride();// 0x6829e3fee041

--------------------------------
Class: SizeBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x60, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x80, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x81, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x683be3fee041
	void SetPadding(Margin InPadding);// 0x683ae3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x6839e3fee041

--------------------------------
Class: SlateBlueprintLibrary.BlueprintFunctionLibrary.Object
	Vector2D TransformVectorLocalToAbsolute(out const Geometry Geometry, Vector2D LocalVector);// 0x684be3fee041
	Vector2D TransformVectorAbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteVector);// 0x684ae3fee041
	float TransformScalarLocalToAbsolute(out const Geometry Geometry, float LocalScalar);// 0x6849e3fee041
	float TransformScalarAbsoluteToLocal(out const Geometry Geometry, float AbsoluteScalar);// 0x6848e3fee041
	void ScreenToWidgetLocal(Object* WorldContextObject, out const Geometry Geometry, Vector2D ScreenPosition, out Vector2D LocalCoordinate, bool bIncludeWindowPosition);// 0x6847e3fee041
	void ScreenToWidgetAbsolute(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D AbsoluteCoordinate, bool bIncludeWindowPosition);// 0x6846e3fee041
	void ScreenToViewport(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D ViewportPosition);// 0x6845e3fee041
	void LocalToViewport(Object* WorldContextObject, out const Geometry Geometry, Vector2D LocalCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0x6844e3fee041
	Vector2D LocalToAbsolute(out const Geometry Geometry, Vector2D LocalCoordinate);// 0x6843e3fee041
	bool IsUnderLocation(out const Geometry Geometry, out const Vector2D AbsoluteCoordinate);// 0x6842e3fee041
	Vector2D GetLocalTopLeft(out const Geometry Geometry);// 0x6841e3fee041
	Vector2D GetLocalSize(out const Geometry Geometry);// 0x6840e3fee041
	Vector2D GetAbsoluteSize(out const Geometry Geometry);// 0x683fe3fee041
	bool EqualEqual_SlateBrush(out const SlateBrush A, out const SlateBrush B);// 0x683ee3fee041
	void AbsoluteToViewport(Object* WorldContextObject, Vector2D AbsoluteDesktopCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0x683de3fee041
	Vector2D AbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteCoordinate);// 0x683ce3fee041

--------------------------------
Class: SlateVectorArtData.Object
	SlateMeshVertex[] VertexData;//[Offset: 0x28, Size: 0x10]
	uint32[] IndexData;//[Offset: 0x38, Size: 0x10]
	MaterialInterface* Material;//[Offset: 0x48, Size: 0x8]
	Vector2D ExtentMin;//[Offset: 0x50, Size: 0x8]
	Vector2D ExtentMax;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: SlateMeshVertex
	Vector2D position;//[Offset: 0x0, Size: 0x8]
	Color Color;//[Offset: 0x8, Size: 0x4]
	Vector2D UV0;//[Offset: 0xc, Size: 0x8]
	Vector2D UV1;//[Offset: 0x14, Size: 0x8]
	Vector2D UV2;//[Offset: 0x1c, Size: 0x8]
	Vector2D UV3;//[Offset: 0x24, Size: 0x8]
	Vector2D UV4;//[Offset: 0x2c, Size: 0x8]
	Vector2D UV5;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: Spacer.Widget.Visual.Object
	Vector2D Size;//[Offset: 0x124, Size: 0x8]
	void SetSize(Vector2D InSize);// 0x684ce3fee041

--------------------------------
Class: SpinBox.Widget.Visual.Object
	float Value;//[Offset: 0x124, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0x128, Size: 0x10]
	SpinBoxStyle WidgetStyle;//[Offset: 0x138, Size: 0x310]
	SlateWidgetStyleAsset* Style;//[Offset: 0x448, Size: 0x8]
	int MinFractionalDigits;//[Offset: 0x450, Size: 0x4]
	int MaxFractionalDigits;//[Offset: 0x454, Size: 0x4]
	bool bAlwaysUsesDeltaSnap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	float Delta;//[Offset: 0x45c, Size: 0x4]
	float SliderExponent;//[Offset: 0x460, Size: 0x4]
	SlateFontInfo Font;//[Offset: 0x468, Size: 0x58]
	byte Justification;//[Offset: 0x4c0, Size: 0x1]
	float MinDesiredWidth;//[Offset: 0x4c4, Size: 0x4]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 0x1]
	SlateColor ForegroundColor;//[Offset: 0x4d0, Size: 0x28]
	delegate OnValueChanged;//[Offset: 0x4f8, Size: 0x10]
	delegate OnValueCommitted;//[Offset: 0x508, Size: 0x10]
	delegate OnBeginSliderMovement;//[Offset: 0x518, Size: 0x10]
	delegate OnEndSliderMovement;//[Offset: 0x528, Size: 0x10]
	bool bOverride_MinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x538, Size: 0x1]
	bool bOverride_MaxValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x538, Size: 0x1]
	bool bOverride_MinSliderValue;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x538, Size: 0x1]
	bool bOverride_MaxSliderValue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x538, Size: 0x1]
	float MinValue;//[Offset: 0x53c, Size: 0x4]
	float MaxValue;//[Offset: 0x540, Size: 0x4]
	float MinSliderValue;//[Offset: 0x544, Size: 0x4]
	float MaxSliderValue;//[Offset: 0x548, Size: 0x4]
	void SetValue(float NewValue);// 0x1a05e3fee041
	void SetMinValue(float NewValue);// 0x1a04e3fee041
	void SetMinSliderValue(float NewValue);// 0x1a03e3fee041
	void SetMinFractionalDigits(int NewValue);// 0x1a02e3fee041
	void SetMaxValue(float NewValue);// 0x1a01e3fee041
	void SetMaxSliderValue(float NewValue);// 0x1a00e3fee041
	void SetMaxFractionalDigits(int NewValue);// 0x19ffe3fee041
	void SetForegroundColor(SlateColor InForegroundColor);// 0x19fee3fee041
	void SetDelta(float NewValue);// 0x19fde3fee041
	void SetAlwaysUsesDeltaSnap(bool bNewValue);// 0x19fce3fee041
	void OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, byte CommitMethod);// 0x19fbe3fee041
	void OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);// 0x19fae3fee041
	void OnSpinBoxBeginSliderMovement__DelegateSignature();// 0x19f9e3fee041
	float GetValue();// 0x19f8e3fee041
	float GetMinValue();// 0x19f7e3fee041
	float GetMinSliderValue();// 0x19f6e3fee041
	int GetMinFractionalDigits();// 0x19f5e3fee041
	float GetMaxValue();// 0x19f4e3fee041
	float GetMaxSliderValue();// 0x19f3e3fee041
	int GetMaxFractionalDigits();// 0x19f2e3fee041
	float GetDelta();// 0x19f1e3fee041
	bool GetAlwaysUsesDeltaSnap();// 0x19f0e3fee041
	void ClearMinValue();// 0x19efe3fee041
	void ClearMinSliderValue();// 0x19eee3fee041
	void ClearMaxValue();// 0x19ede3fee041
	void ClearMaxSliderValue();// 0x19ece3fee041

--------------------------------
Class: TextBinding.PropertyBinding.Object
	FText GetTextValue();// 0x684ee3fee041
	FString GetStringValue();// 0x684de3fee041

--------------------------------
Class: Throbber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x124, Size: 0x4]
	bool bAnimateHorizontally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	bool bAnimateVertically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	bool bAnimateOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 0x1]
	SlateBrushAsset* PieceImage;//[Offset: 0x130, Size: 0x8]
	SlateBrush Image;//[Offset: 0x138, Size: 0x90]
	void SetNumberOfPieces(int InNumberOfPieces);// 0x685fe3fee041
	void SetAnimateVertically(bool bInAnimateVertically);// 0x685ee3fee041
	void SetAnimateOpacity(bool bInAnimateOpacity);// 0x685de3fee041
	void SetAnimateHorizontally(bool bInAnimateHorizontally);// 0x685ce3fee041

--------------------------------
Class: UniformGridPanel.PanelWidget.Widget.Visual.Object
	Margin SlotPadding;//[Offset: 0x13c, Size: 0x10]
	float MinDesiredSlotWidth;//[Offset: 0x14c, Size: 0x4]
	float MinDesiredSlotHeight;//[Offset: 0x150, Size: 0x4]
	void SetSlotPadding(Margin InSlotPadding);// 0x6865e3fee041
	void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);// 0x6864e3fee041
	void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);// 0x6863e3fee041
	UniformGridSlot* AddChildToUniformGrid(Widget* Content, int InRow, int InColumn);// 0x6862e3fee041

--------------------------------
Class: UniformGridSlot.PanelSlot.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x60, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x61, Size: 0x1]
	int Row;//[Offset: 0x64, Size: 0x4]
	int Column;//[Offset: 0x68, Size: 0x4]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x6869e3fee041
	void SetRow(int InRow);// 0x6868e3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x6867e3fee041
	void SetColumn(int InColumn);// 0x6866e3fee041

--------------------------------
Class: Viewport.ContentWidget.PanelWidget.Widget.Visual.Object
	LinearColor BackgroundColor;//[Offset: 0x13c, Size: 0x10]
	Actor* Spawn(class Actor ActorClass);// 0x6874e3fee041
	void SetViewRotation(Rotator Rotation);// 0x6873e3fee041
	void SetViewLocation(Vector Location);// 0x6872e3fee041
	Rotator GetViewRotation();// 0x6871e3fee041
	World* GetViewportWorld();// 0x6870e3fee041
	Vector GetViewLocation();// 0x686fe3fee041

--------------------------------
Class: VisibilityBinding.PropertyBinding.Object
	enum GetValue();// 0x6875e3fee041

--------------------------------
Class: WidgetAnimationDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintWidgetAnimationDelegateBinding[] WidgetAnimationDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintWidgetAnimationDelegateBinding
	enum Action;//[Offset: 0x0, Size: 0x1]
	FName AnimationToBind;//[Offset: 0x4, Size: 0x8]
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8]
	FName UserTag;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: WidgetAnimationPlayCallbackProxy.Object
	delegate Finished;//[Offset: 0x28, Size: 0x10]
	WidgetAnimationPlayCallbackProxy* CreatePlayAnimationTimeRangeProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x6884e3fee041
	WidgetAnimationPlayCallbackProxy* CreatePlayAnimationProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x6883e3fee041

--------------------------------
Class: WidgetBinding.PropertyBinding.Object
	Widget* GetValue();// 0x6885e3fee041

--------------------------------
Class: WidgetBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	WidgetTree* WidgetTree;//[Offset: 0x358, Size: 0x8]
	bool bClassRequiresNativeTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 0x1]
	DelegateRuntimeBinding[] Bindings;//[Offset: 0x368, Size: 0x10]
	WidgetAnimation*[] animations;//[Offset: 0x378, Size: 0x10]
	FName[] NamedSlots;//[Offset: 0x388, Size: 0x10]

--------------------------------
Class: DelegateRuntimeBinding
	FString ObjectName;//[Offset: 0x0, Size: 0x10]
	FName PropertyName;//[Offset: 0x10, Size: 0x8]
	FName FunctionName;//[Offset: 0x18, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x20, Size: 0x28]
	enum Kind;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: WidgetBlueprintLibrary.BlueprintFunctionLibrary.Object
	EventReply UnlockMouse(out EventReply Reply);// 0x1967e3fee041
	EventReply Unhandled();// 0x1966e3fee041
	void SetWindowTitleBarState(Widget* TitleBarContent, enum Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible);// 0x1964e3fee041
	void SetWindowTitleBarOnCloseClickedDelegate(delegate Delegate);// 0x1963e3fee041
	void SetWindowTitleBarCloseButtonActive(bool bActive);// 0x1962e3fee041
	EventReply SetUserFocus(out EventReply Reply, Widget* FocusWidget, bool bInAllUsers);// 0x1961e3fee041
	EventReply SetMousePosition(out EventReply Reply, Vector2D NewMousePosition);// 0x1960e3fee041
	void SetInputMode_UIOnlyEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode);// 0x195fe3fee041
	void SetInputMode_UIOnly(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport);// 0x195ee3fee041
	void SetInputMode_GameOnly(PlayerController* PlayerController);// 0x195de3fee041
	void SetInputMode_GameAndUIEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode, bool bHideCursorDuringCapture);// 0x195be3fee041
	void SetInputMode_GameAndUI(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);// 0x195ae3fee041
	bool SetHardwareCursor(Object* WorldContextObject, byte CursorShape, FName CursorName, Vector2D HotSpot);// 0x1959e3fee041
	void SetFocusToGameViewport();// 0x1958e3fee041
	void SetColorVisionDeficiencyType(enum Type, float Severity, bool CorrectDeficiency, bool ShowCorrectionWithDeficiency);// 0x1956e3fee041
	void SetBrushResourceToTexture(out SlateBrush Brush, Texture2D* Texture);// 0x1955e3fee041
	void SetBrushResourceToMaterial(out SlateBrush Brush, MaterialInterface* Material);// 0x1954e3fee041
	void RestorePreviousWindowTitleBarState();// 0x1953e3fee041
	EventReply ReleaseMouseCapture(out EventReply Reply);// 0x1952e3fee041
	EventReply ReleaseJoystickCapture(out EventReply Reply, bool bInAllJoysticks);// 0x1951e3fee041
	void OnGameWindowCloseButtonClickedDelegate__DelegateSignature();// 0x1950e3fee041
	SlateBrush NoResourceBrush();// 0x194fe3fee041
	SlateBrush MakeBrushFromTexture(Texture2D* Texture, int Width, int Height);// 0x194ee3fee041
	SlateBrush MakeBrushFromMaterial(MaterialInterface* Material, int Width, int Height);// 0x194de3fee041
	SlateBrush MakeBrushFromAsset(SlateBrushAsset* BrushAsset);// 0x194ce3fee041
	EventReply LockMouse(out EventReply Reply, Widget* CapturingWidget);// 0x194be3fee041
	bool IsDragDropping();// 0x194ae3fee041
	EventReply Handled();// 0x1949e3fee041
	void GetSafeZonePadding(Object* WorldContextObject, out Vector4 SafePadding, out Vector2D SafePaddingScale, out Vector4 SpillOverPadding);// 0x1948e3fee041
	KeyEvent GetKeyEventFromAnalogInputEvent(out const AnalogInputEvent Event);// 0x1946e3fee041
	InputEvent GetInputEventFromPointerEvent(out const PointerEvent Event);// 0x1945e3fee041
	InputEvent GetInputEventFromNavigationEvent(out const NavigationEvent Event);// 0x1943e3fee041
	InputEvent GetInputEventFromKeyEvent(out const KeyEvent Event);// 0x1941e3fee041
	InputEvent GetInputEventFromCharacterEvent(out const CharacterEvent Event);// 0x193fe3fee041
	MaterialInstanceDynamic* GetDynamicMaterial(out SlateBrush Brush);// 0x193ee3fee041
	DragDropOperation* GetDragDroppingContent();// 0x193de3fee041
	Texture2D* GetBrushResourceAsTexture2D(out const SlateBrush Brush);// 0x193ce3fee041
	MaterialInterface* GetBrushResourceAsMaterial(out const SlateBrush Brush);// 0x193be3fee041
	Object* GetBrushResource(out const SlateBrush Brush);// 0x193ae3fee041
	void GetAllWidgetsWithInterface(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class Interface Interface, bool TopLevelOnly);// 0x1939e3fee041
	void GetAllWidgetsOfClass(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class UserWidget WidgetClass, bool TopLevelOnly);// 0x1938e3fee041
	EventReply EndDragDrop(out EventReply Reply);// 0x1937e3fee041
	void DrawTextFormatted(out PaintContext Context, out const FText Text, Vector2D position, Font* Font, int FontSize, FName FontTypeFace, LinearColor Tint);// 0x1936e3fee041
	void DrawText(out PaintContext Context, FString inString, Vector2D position, LinearColor Tint);// 0x1935e3fee041
	void DrawLines(out PaintContext Context, out const Vector2D[] Points, LinearColor Tint, bool bAntiAlias, float Thickness);// 0x1934e3fee041
	void DrawLine(out PaintContext Context, Vector2D PositionA, Vector2D PositionB, LinearColor Tint, bool bAntiAlias, float Thickness);// 0x1933e3fee041
	void DrawBox(out PaintContext Context, Vector2D position, Vector2D Size, SlateBrushAsset* Brush, LinearColor Tint);// 0x1931e3fee041
	void DismissAllMenus();// 0x1930e3fee041
	EventReply DetectDragIfPressed(out const PointerEvent PointerEvent, Widget* WidgetDetectingDrag, Key DragKey);// 0x192fe3fee041
	EventReply DetectDrag(out EventReply Reply, Widget* WidgetDetectingDrag, Key DragKey);// 0x192ee3fee041
	DragDropOperation* CreateDragDropOperation(class DragDropOperation OperationClass);// 0x192de3fee041
	UserWidget* Create(Object* WorldContextObject, class UserWidget WidgetType, PlayerController* OwningPlayer);// 0x192ce3fee041
	EventReply ClearUserFocus(out EventReply Reply, bool bInAllUsers);// 0x192be3fee041
	EventReply CaptureMouse(out EventReply Reply, Widget* CapturingWidget);// 0x192ae3fee041
	EventReply CaptureJoystick(out EventReply Reply, Widget* CapturingWidget, bool bInAllJoysticks);// 0x1929e3fee041
	void CancelDragDrop();// 0x1928e3fee041

--------------------------------
Class: NavigationEvent.InputEvent

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x5e1, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x5e2, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x5e8, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x5f0, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f9, Size: 0x1]
	float RedrawTime;//[Offset: 0x5fc, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x608, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x614, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61d, Size: 0x1]
	enum WindowVisibility;//[Offset: 0x61e, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61f, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x620, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x628, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x638, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x648, Size: 0x4]
	enum BlendMode;//[Offset: 0x64c, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64d, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64e, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x650, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x658, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x660, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x668, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x670, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x678, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x680, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x688, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x690, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x69c, Size: 0x8]
	int LayerZOrder;//[Offset: 0x6a4, Size: 0x4]
	enum GeometryMode;//[Offset: 0x6a8, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x6ac, Size: 0x4]
	enum TickMode;//[Offset: 0x6b0, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x6d8, Size: 0x8]
	void SetWindowVisibility(enum InVisibility);// 0x68aae3fee041
	void SetWindowFocusable(bool bInWindowFocusable);// 0x68a9e3fee041
	void SetWidgetSpace(enum NewSpace);// 0x68a8e3fee041
	void SetWidget(UserWidget* Widget);// 0x68a7e3fee041
	void SetTwoSided(const bool bWantTwoSided);// 0x68a6e3fee041
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x68a5e3fee041
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x68a4e3fee041
	void SetTickMode(enum InTickMode);// 0x68a3e3fee041
	void SetRedrawTime(float InRedrawTime);// 0x68a2e3fee041
	void SetPivot(out const Vector2D InPivot);// 0x68a1e3fee041
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x68a0e3fee041
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x689fe3fee041
	void SetGeometryMode(enum InGeometryMode);// 0x689ee3fee041
	void SetDrawSize(Vector2D Size);// 0x689de3fee041
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x689ce3fee041
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x689be3fee041
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x689ae3fee041
	void RequestRedraw();// 0x6899e3fee041
	bool IsWidgetVisible();// 0x6898e3fee041
	enum GetWindowVisiblility();// 0x6897e3fee041
	bool GetWindowFocusable();// 0x6896e3fee041
	enum GetWidgetSpace();// 0x6895e3fee041
	UserWidget* GetWidget();// 0x6894e3fee041
	UserWidget* GetUserWidgetObject();// 0x6893e3fee041
	bool GetTwoSided();// 0x6892e3fee041
	bool GetTickWhenOffscreen();// 0x6891e3fee041
	TextureRenderTarget2D* GetRenderTarget();// 0x6890e3fee041
	float GetRedrawTime();// 0x688fe3fee041
	Vector2D GetPivot();// 0x688ee3fee041
	LocalPlayer* GetOwnerPlayer();// 0x688de3fee041
	MaterialInstanceDynamic* GetMaterialInstance();// 0x688ce3fee041
	bool GetManuallyRedraw();// 0x688be3fee041
	enum GetGeometryMode();// 0x688ae3fee041
	Vector2D GetDrawSize();// 0x6889e3fee041
	bool GetDrawAtDesiredSize();// 0x6888e3fee041
	float GetCylinderArcAngle();// 0x6887e3fee041
	Vector2D GetCurrentDrawSize();// 0x6886e3fee041

--------------------------------
Class: WidgetInteractionComponent.SceneComponent.ActorComponent.Object
	delegate OnHoveredWidgetChanged;//[Offset: 0x208, Size: 0x10]
	int VirtualUserIndex;//[Offset: 0x228, Size: 0x4]
	int PointerIndex;//[Offset: 0x22c, Size: 0x4]
	byte TraceChannel;//[Offset: 0x230, Size: 0x1]
	float InteractionDistance;//[Offset: 0x234, Size: 0x4]
	enum InteractionSource;//[Offset: 0x238, Size: 0x1]
	bool bEnableHitTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a, Size: 0x1]
	float DebugSphereLineThickness;//[Offset: 0x23c, Size: 0x4]
	float DebugLineThickness;//[Offset: 0x240, Size: 0x4]
	LinearColor DebugColor;//[Offset: 0x244, Size: 0x10]
	HitResult CustomHitResult;//[Offset: 0x2d0, Size: 0x98]
	Vector2D LocalHitLocation;//[Offset: 0x368, Size: 0x8]
	Vector2D LastLocalHitLocation;//[Offset: 0x370, Size: 0x8]
	WidgetComponent* HoveredWidgetComponent;//[Offset: 0x378, Size: 0x8]
	HitResult LastHitResult;//[Offset: 0x380, Size: 0x98]
	bool bIsHoveredWidgetInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	bool bIsHoveredWidgetFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 0x1]
	bool bIsHoveredWidgetHitTestVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41a, Size: 0x1]
	void SetFocus(Widget* FocusWidget);// 0x68b9e3fee041
	void SetCustomHitResult(out const HitResult HitResult);// 0x68b8e3fee041
	bool SendKeyChar(FString Characters, bool bRepeat);// 0x68b7e3fee041
	void ScrollWheel(float ScrollDelta);// 0x68b6e3fee041
	void ReleasePointerKey(Key Key);// 0x68b5e3fee041
	bool ReleaseKey(Key Key);// 0x68b4e3fee041
	void PressPointerKey(Key Key);// 0x68b3e3fee041
	bool PressKey(Key Key, bool bRepeat);// 0x68b2e3fee041
	bool PressAndReleaseKey(Key Key);// 0x68b1e3fee041
	bool IsOverInteractableWidget();// 0x68b0e3fee041
	bool IsOverHitTestVisibleWidget();// 0x68afe3fee041
	bool IsOverFocusableWidget();// 0x68aee3fee041
	HitResult GetLastHitResult();// 0x68ade3fee041
	WidgetComponent* GetHoveredWidgetComponent();// 0x68ace3fee041
	Vector2D Get2DHitLocation();// 0x68abe3fee041

--------------------------------
Class: WidgetLayoutLibrary.BlueprintFunctionLibrary.Object
	WrapBoxSlot* SlotAsWrapBoxSlot(Widget* Widget);// 0x68cfe3fee041
	WidgetSwitcherSlot* SlotAsWidgetSwitcherSlot(Widget* Widget);// 0x68cee3fee041
	VerticalBoxSlot* SlotAsVerticalBoxSlot(Widget* Widget);// 0x68cde3fee041
	UniformGridSlot* SlotAsUniformGridSlot(Widget* Widget);// 0x68cce3fee041
	SizeBoxSlot* SlotAsSizeBoxSlot(Widget* Widget);// 0x68cbe3fee041
	ScrollBoxSlot* SlotAsScrollBoxSlot(Widget* Widget);// 0x68cae3fee041
	ScaleBoxSlot* SlotAsScaleBoxSlot(Widget* Widget);// 0x68c9e3fee041
	SafeZoneSlot* SlotAsSafeBoxSlot(Widget* Widget);// 0x68c8e3fee041
	OverlaySlot* SlotAsOverlaySlot(Widget* Widget);// 0x68c7e3fee041
	HorizontalBoxSlot* SlotAsHorizontalBoxSlot(Widget* Widget);// 0x68c6e3fee041
	GridSlot* SlotAsGridSlot(Widget* Widget);// 0x68c5e3fee041
	CanvasPanelSlot* SlotAsCanvasSlot(Widget* Widget);// 0x68c4e3fee041
	BorderSlot* SlotAsBorderSlot(Widget* Widget);// 0x68c3e3fee041
	void RemoveAllWidgets(Object* WorldContextObject);// 0x68c2e3fee041
	bool ProjectWorldLocationToWidgetPosition(PlayerController* PlayerController, Vector WorldLocation, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0x68c1e3fee041
	Geometry GetViewportWidgetGeometry(Object* WorldContextObject);// 0x68c0e3fee041
	Vector2D GetViewportSize(Object* WorldContextObject);// 0x68bfe3fee041
	float GetViewportScale(Object* WorldContextObject);// 0x68bee3fee041
	Geometry GetPlayerScreenWidgetGeometry(PlayerController* PlayerController);// 0x68bde3fee041
	bool GetMousePositionScaledByDPI(PlayerController* Player, out float LocationX, out float LocationY);// 0x68bce3fee041
	Vector2D GetMousePositionOnViewport(Object* WorldContextObject);// 0x68bbe3fee041
	Vector2D GetMousePositionOnPlatform();// 0x68bae3fee041

--------------------------------
Class: WrapBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x60, Size: 0x10]
	bool bFillEmptySpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float FillSpanWhenLessThan;//[Offset: 0x74, Size: 0x4]
	byte HorizontalAlignment;//[Offset: 0x78, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x79, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x68e5e3fee041
	void SetPadding(Margin InPadding);// 0x68e4e3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x68e3e3fee041
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);// 0x68e2e3fee041
	void SetFillEmptySpace(bool InbFillEmptySpace);// 0x68e1e3fee041

--------------------------------
Class: WidgetSwitcherSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x68, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x78, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x79, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x68d8e3fee041
	void SetPadding(Margin InPadding);// 0x68d7e3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x68d6e3fee041

--------------------------------
Class: WindowTitleBarArea.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bWindowButtonsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	bool bDoubleClickTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x68dbe3fee041
	void SetPadding(Margin InPadding);// 0x68dae3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x68d9e3fee041

--------------------------------
Class: WindowTitleBarAreaSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x60, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x70, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x71, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x68dee3fee041
	void SetPadding(Margin InPadding);// 0x68dde3fee041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x68dce3fee041

--------------------------------
Class: WrapBox.PanelWidget.Widget.Visual.Object
	Vector2D InnerSlotPadding;//[Offset: 0x13c, Size: 0x8]
	float WrapWidth;//[Offset: 0x144, Size: 0x4]
	float WrapSize;//[Offset: 0x148, Size: 0x4]
	bool bExplicitWrapWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1]
	bool bExplicitWrapSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d, Size: 0x1]
	byte Orientation;//[Offset: 0x14e, Size: 0x1]
	void SetInnerSlotPadding(Vector2D InPadding);// 0x68e0e3fee041
	WrapBoxSlot* AddChildToWrapBox(Widget* Content);// 0x68dfe3fee041

--------------------------------
Class: CameraRig_Crane.Actor.Object
	float CranePitch;//[Offset: 0x2e0, Size: 0x4]
	float CraneYaw;//[Offset: 0x2e4, Size: 0x4]
	float CraneArmLength;//[Offset: 0x2e8, Size: 0x4]
	bool bLockMountPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	bool bLockMountYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 0x1]
	SceneComponent* TransformComponent;//[Offset: 0x2f0, Size: 0x8]
	SceneComponent* CraneYawControl;//[Offset: 0x2f8, Size: 0x8]
	SceneComponent* CranePitchControl;//[Offset: 0x300, Size: 0x8]
	SceneComponent* CraneCameraMount;//[Offset: 0x308, Size: 0x8]

--------------------------------
Class: CameraRig_Rail.Actor.Object
	float CurrentPositionOnRail;//[Offset: 0x2e0, Size: 0x4]
	bool bLockOrientationToRail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	SceneComponent* TransformComponent;//[Offset: 0x2e8, Size: 0x8]
	SplineComponent* RailSplineComponent;//[Offset: 0x2f0, Size: 0x8]
	SceneComponent* RailCameraMount;//[Offset: 0x2f8, Size: 0x8]
	SplineComponent* GetRailSplineComponent();// 0x68e6e3fee041

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x920, Size: 0x50]
	CineCameraComponent* GetCineCameraComponent();// 0x68e8e3fee041

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x890, Size: 0xc]
	CameraFilmbackSettings Filmback;//[Offset: 0x89c, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x8a8, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x8c0, Size: 0x58]
	float CurrentFocalLength;//[Offset: 0x918, Size: 0x4]
	float CurrentAperture;//[Offset: 0x91c, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x920, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x930, Size: 0x10]
	NamedLensPreset[] LensPresets;//[Offset: 0x940, Size: 0x10]
	FString DefaultFilmbackPresetName;//[Offset: 0x950, Size: 0x10]
	FString DefaultFilmbackPreset;//[Offset: 0x960, Size: 0x10]
	FString DefaultLensPresetName;//[Offset: 0x970, Size: 0x10]
	float DefaultLensFocalLength;//[Offset: 0x980, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0x984, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x68ffe3fee041
	void SetFilmbackPresetByName(FString InPresetName);// 0x68fee3fee041
	void SetCurrentFocalLength(float InFocalLength);// 0x68fde3fee041
	float GetVerticalFieldOfView();// 0x68fce3fee041
	NamedLensPreset[] GetLensPresetsCopy();// 0x68fbe3fee041
	FString GetLensPresetName();// 0x68fae3fee041
	float GetHorizontalFieldOfView();// 0x68f9e3fee041
	NamedFilmbackPreset[] GetFilmbackPresetsCopy();// 0x68f8e3fee041
	FString GetFilmbackPresetName();// 0x68f7e3fee041
	FString GetDefaultFilmbackPresetName();// 0x68f6e3fee041

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]
	float FocusOffset;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: AudioGenerator.Object

--------------------------------
Class: AudioMixerBlueprintLibrary.BlueprintFunctionLibrary.Object
	float TrimAudioCache(float InMegabytesToFree);// 0x691ee3fee041
	SoundWave* StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundSubmix* SubmixToRecord, SoundWave* ExistingSoundWaveToOverwrite);// 0x691de3fee041
	void StopAudioBus(const Object* WorldContextObject, AudioBus* AudioBus);// 0x691ce3fee041
	void StopAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToStopAnalyzing);// 0x691be3fee041
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration, SoundSubmix* SubmixToRecord);// 0x691ae3fee041
	void StartAudioBus(const Object* WorldContextObject, AudioBus* AudioBus);// 0x6919e3fee041
	void StartAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToAnalyze, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x6918e3fee041
	void SetSubmixEffectChainOverride(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset*[] SubmixEffectPresetChain, float FadeTimeSec);// 0x6917e3fee041
	void SetBypassSourceEffectChainEntry(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex, bool bBypassed);// 0x6916e3fee041
	void ResumeRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0x6915e3fee041
	void ReplaceSoundEffectSubmix(const Object* WorldContextObject, SoundSubmix* InSoundSubmix, int SubmixChainIndex, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x6914e3fee041
	void RemoveSubmixEffectPresetAtIndex(const Object* WorldContextObject, SoundSubmix* SoundSubmix, int SubmixChainIndex);// 0x6913e3fee041
	void RemoveSubmixEffectPreset(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x6912e3fee041
	void RemoveSourceEffectFromPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex);// 0x6911e3fee041
	void RemoveMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x6910e3fee041
	void PrimeSoundForPlayback(SoundWave* SoundWave, const delegate OnLoadCompletion);// 0x690fe3fee041
	void PrimeSoundCueForPlayback(SoundCue* SoundCue);// 0x690ee3fee041
	void PauseRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0x690de3fee041
	SoundSubmixSpectralAnalysisBandSettings[] MakePresetSpectralAnalysisBandSettings(enum InBandPresetType, int InNumBands, int InAttackTimeMsec, int InReleaseTimeMsec);// 0x690ce3fee041
	SoundSubmixSpectralAnalysisBandSettings[] MakeMusicalSpectralAnalysisBandSettings(int InNumSemitones, enum InStartingMusicalNote, int InStartingOctave, int InAttackTimeMsec, int InReleaseTimeMsec);// 0x690be3fee041
	SoundSubmixSpectralAnalysisBandSettings[] MakeFullSpectrumSpectralAnalysisBandSettings(int InNumBands, float InMinimumFrequency, float InMaximumFrequency, int InAttackTimeMsec, int InReleaseTimeMsec);// 0x690ae3fee041
	bool IsAudioBusActive(const Object* WorldContextObject, AudioBus* AudioBus);// 0x6909e3fee041
	void GetPhaseForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Phases, SoundSubmix* SubmixToAnalyze);// 0x6908e3fee041
	int GetNumberOfEntriesInSourceEffectChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain);// 0x6907e3fee041
	void GetMagnitudeForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Magnitudes, SoundSubmix* SubmixToAnalyze);// 0x6906e3fee041
	void ClearSubmixEffects(const Object* WorldContextObject, SoundSubmix* SoundSubmix);// 0x6905e3fee041
	void ClearSubmixEffectChainOverride(const Object* WorldContextObject, SoundSubmix* SoundSubmix, float FadeTimeSec);// 0x6904e3fee041
	void ClearMasterSubmixEffects(const Object* WorldContextObject);// 0x6903e3fee041
	int AddSubmixEffect(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x6902e3fee041
	void AddSourceEffectToPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, SourceEffectChainEntry Entry);// 0x6901e3fee041
	void AddMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x6900e3fee041

--------------------------------
Class: SubmixEffectDynamicsProcessorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectDynamicsProcessorSettings Settings;//[Offset: 0xe0, Size: 0x50]
	void SetSettings(out const SubmixEffectDynamicsProcessorSettings Settings);// 0x6931e3fee041
	void SetExternalSubmix(SoundSubmix* Submix);// 0x6930e3fee041

--------------------------------
Class: SubmixEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1]
	enum PeakMode;//[Offset: 0x1, Size: 0x1]
	enum LinkMode;//[Offset: 0x2, Size: 0x1]
	float InputGainDb;//[Offset: 0x4, Size: 0x4]
	float ThresholdDb;//[Offset: 0x8, Size: 0x4]
	float Ratio;//[Offset: 0xc, Size: 0x4]
	float KneeBandwidthDb;//[Offset: 0x10, Size: 0x4]
	float LookAheadMsec;//[Offset: 0x14, Size: 0x4]
	float AttackTimeMsec;//[Offset: 0x18, Size: 0x4]
	float ReleaseTimeMsec;//[Offset: 0x1c, Size: 0x4]
	SoundSubmix* ExternalSubmix;//[Offset: 0x20, Size: 0x8]
	bool bChannelLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bKeyAudition;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float KeyGainDb;//[Offset: 0x2c, Size: 0x4]
	float OutputGainDb;//[Offset: 0x30, Size: 0x4]
	SubmixEffectDynamicProcessorFilterSettings KeyHighshelf;//[Offset: 0x34, Size: 0xc]
	SubmixEffectDynamicProcessorFilterSettings KeyLowshelf;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: SubmixEffectDynamicProcessorFilterSettings
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float Cutoff;//[Offset: 0x4, Size: 0x4]
	float GainDb;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SubmixEffectSubmixEQPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectSubmixEQSettings Settings;//[Offset: 0xa0, Size: 0x10]
	void SetSettings(out const SubmixEffectSubmixEQSettings InSettings);// 0x6932e3fee041

--------------------------------
Class: SubmixEffectSubmixEQSettings
	SubmixEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SubmixEffectEQBand
	float Frequency;//[Offset: 0x0, Size: 0x4]
	float Bandwidth;//[Offset: 0x4, Size: 0x4]
	float GainDb;//[Offset: 0x8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: SubmixEffectReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectReverbSettings Settings;//[Offset: 0xcc, Size: 0x40]
	void SetSettingsWithReverbEffect(const ReverbEffect* InReverbEffect, const float WetLevel, const float DryLevel);// 0x6934e3fee041
	void SetSettings(out const SubmixEffectReverbSettings InSettings);// 0x6933e3fee041

--------------------------------
Class: SubmixEffectReverbSettings
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ReflectionsDelay;//[Offset: 0x4, Size: 0x4]
	float GainHF;//[Offset: 0x8, Size: 0x4]
	float ReflectionsGain;//[Offset: 0xc, Size: 0x4]
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LateDelay;//[Offset: 0x14, Size: 0x4]
	float DecayTime;//[Offset: 0x18, Size: 0x4]
	float Density;//[Offset: 0x1c, Size: 0x4]
	float Diffusion;//[Offset: 0x20, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x24, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x28, Size: 0x4]
	float LateGain;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float WetLevel;//[Offset: 0x34, Size: 0x4]
	float DryLevel;//[Offset: 0x38, Size: 0x4]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: QuartzSubsystem.WorldSubsystem.Subsystem.Object
	float GetRoundTripMinLatency(const Object* WorldContextObject);// 0x6940e3fee041
	float GetRoundTripMaxLatency(const Object* WorldContextObject);// 0x693fe3fee041
	float GetRoundTripAverageLatency(const Object* WorldContextObject);// 0x693ee3fee041
	QuartzClockHandle* GetHandleForClock(const Object* WorldContextObject, FName ClockName);// 0x693de3fee041
	float GetGameThreadToAudioRenderThreadMinLatency(const Object* WorldContextObject);// 0x693ce3fee041
	float GetGameThreadToAudioRenderThreadMaxLatency(const Object* WorldContextObject);// 0x693be3fee041
	float GetGameThreadToAudioRenderThreadAverageLatency(const Object* WorldContextObject);// 0x693ae3fee041
	float GetAudioRenderThreadToGameThreadMinLatency();// 0x6939e3fee041
	float GetAudioRenderThreadToGameThreadMaxLatency();// 0x6938e3fee041
	float GetAudioRenderThreadToGameThreadAverageLatency();// 0x6937e3fee041
	bool DoesClockExist(const Object* WorldContextObject, FName ClockName);// 0x6936e3fee041
	QuartzClockHandle* CreateNewClock(const Object* WorldContextObject, FName ClockName, QuartzClockSettings InSettings, bool bOverrideSettingsIfClockExists);// 0x6935e3fee041

--------------------------------
Class: QuartzClockSettings
	QuartzTimeSignature TimeSignature;//[Offset: 0x0, Size: 0x18]
	bool bIgnoreLevelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: QuartzTimeSignature
	int NumBeats;//[Offset: 0x0, Size: 0x4]
	enum BeatType;//[Offset: 0x4, Size: 0x1]
	QuartzPulseOverrideStep[] OptionalPulseOverride;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: QuartzPulseOverrideStep
	int NumberOfPulses;//[Offset: 0x0, Size: 0x4]
	enum PulseDuration;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: NetAnalyticsAggregatorConfig.Object
	NetAnalyticsDataConfig[] NetAnalyticsData;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: NetAnalyticsDataConfig
	FName DataName;//[Offset: 0x0, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: AssetRegistryHelpers.Object
	SoftObjectPath ToSoftObjectPath(out const AssetData InAssetData);// 0x694de3fee041
	ARFilter SetFilterTagsAndValues(out const ARFilter InFilter, out const TagAndValue[] InTagsAndValues);// 0x694ce3fee041
	bool IsValid(out const AssetData InAssetData);// 0x694be3fee041
	bool IsUAsset(out const AssetData InAssetData);// 0x694ae3fee041
	bool IsRedirector(out const AssetData InAssetData);// 0x6949e3fee041
	bool IsAssetLoaded(out const AssetData InAssetData);// 0x6948e3fee041
	bool GetTagValue(out const AssetData InAssetData, out const FName InTagName, out FString OutTagValue);// 0x6947e3fee041
	FString GetFullName(out const AssetData InAssetData);// 0x6946e3fee041
	FString GetExportTextName(out const AssetData InAssetData);// 0x6945e3fee041
	class Object GetClass(out const AssetData InAssetData);// 0x6944e3fee041
	interface classNone GetAssetRegistry();// 0x6943e3fee041
	Object* GetAsset(out const AssetData InAssetData);// 0x6942e3fee041
	AssetData CreateAssetData(const Object* InAsset, bool bAllowBlueprintClass);// 0x6941e3fee041

--------------------------------
Class: AssetData
	FName ObjectPath;//[Offset: 0x0, Size: 0x8]
	FName PackageName;//[Offset: 0x8, Size: 0x8]
	FName PackagePath;//[Offset: 0x10, Size: 0x8]
	FName AssetName;//[Offset: 0x18, Size: 0x8]
	FName AssetClass;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ARFilter
	FName[] PackageNames;//[Offset: 0x0, Size: 0x10]
	FName[] PackagePaths;//[Offset: 0x10, Size: 0x10]
	FName[] ObjectPaths;//[Offset: 0x20, Size: 0x10]
	FName[] ClassNames;//[Offset: 0x30, Size: 0x10]
	<FName> RecursiveClassesExclusionSet;//[Offset: 0x90, Size: 0x50]
	bool bRecursivePaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bRecursiveClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1]

--------------------------------
Class: TagAndValue
	FName Tag;//[Offset: 0x0, Size: 0x8]
	FString Value;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AssetRegistry.Interface.Object
	void WaitForCompletion();// 0x6961e3fee041
	void UseFilterToExcludeAssets(out AssetData[] AssetDataList, out const ARFilter Filter);// 0x6960e3fee041
	void SearchAllAssets(bool bSynchronousSearch);// 0x695fe3fee041
	void ScanPathsSynchronous(out const FString[] InPaths, bool bForceRescan);// 0x695ee3fee041
	void ScanModifiedAssetFiles(out const FString[] InFilePaths);// 0x695de3fee041
	void ScanFilesSynchronous(out const FString[] InFilePaths, bool bForceRescan);// 0x695ce3fee041
	void RunAssetsThroughFilter(out AssetData[] AssetDataList, out const ARFilter Filter);// 0x695be3fee041
	void PrioritizeSearchPath(FString PathToPrioritize);// 0x695ae3fee041
	bool K2_GetReferencers(FName PackageName, out const AssetRegistryDependencyOptions ReferenceOptions, out FName[] OutReferencers);// 0x6959e3fee041
	bool K2_GetDependencies(FName PackageName, out const AssetRegistryDependencyOptions DependencyOptions, out FName[] OutDependencies);// 0x6958e3fee041
	bool IsLoadingAssets();// 0x6957e3fee041
	bool HasAssets(const FName PackagePath, const bool bRecursive);// 0x6956e3fee041
	void GetSubPaths(FString InBasePath, out FString[] OutPathList, bool bInRecurse);// 0x6955e3fee041
	bool GetAssetsByPath(FName PackagePath, out AssetData[] OutAssetData, bool bRecursive, bool bIncludeOnlyOnDiskAssets);// 0x6954e3fee041
	bool GetAssetsByPackageName(FName PackageName, out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0x6953e3fee041
	bool GetAssetsByClass(FName ClassName, out AssetData[] OutAssetData, bool bSearchSubClasses);// 0x6952e3fee041
	bool GetAssets(out const ARFilter Filter, out AssetData[] OutAssetData);// 0x6951e3fee041
	AssetData GetAssetByObjectPath(const FName ObjectPath, bool bIncludeOnlyOnDiskAssets);// 0x6950e3fee041
	void GetAllCachedPaths(out FString[] OutPathList);// 0x694fe3fee041
	bool GetAllAssets(out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0x694ee3fee041

--------------------------------
Class: AssetRegistryDependencyOptions
	bool bIncludeSoftPackageReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bIncludeHardPackageReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bIncludeSearchableNames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bIncludeSoftManagementReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bIncludeHardManagementReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: BlueprintGameplayTagLibrary.BlueprintFunctionLibrary.Object
	bool RemoveGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0x697fe3fee041
	bool NotEqual_TagTag(GameplayTag A, FString B);// 0x697ee3fee041
	bool NotEqual_TagContainerTagContainer(GameplayTagContainer A, FString B);// 0x697de3fee041
	bool NotEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0x697ce3fee041
	bool NotEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0x697be3fee041
	bool MatchesTag(GameplayTag TagOne, GameplayTag TagTwo, bool bExactMatch);// 0x697ae3fee041
	bool MatchesAnyTags(GameplayTag TagOne, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x6979e3fee041
	GameplayTagContainer MakeLiteralGameplayTagContainer(GameplayTagContainer Value);// 0x6978e3fee041
	GameplayTag MakeLiteralGameplayTag(GameplayTag Value);// 0x6977e3fee041
	GameplayTagQuery MakeGameplayTagQuery(GameplayTagQuery TagQuery);// 0x6976e3fee041
	GameplayTagContainer MakeGameplayTagContainerFromTag(GameplayTag SingleTag);// 0x6975e3fee041
	GameplayTagContainer MakeGameplayTagContainerFromArray(out const GameplayTag[] GameplayTags);// 0x6974e3fee041
	bool IsTagQueryEmpty(out const GameplayTagQuery TagQuery);// 0x6973e3fee041
	bool IsGameplayTagValid(GameplayTag GameplayTag);// 0x6972e3fee041
	bool HasTag(out const GameplayTagContainer TagContainer, GameplayTag Tag, bool bExactMatch);// 0x6971e3fee041
	bool HasAnyTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x6970e3fee041
	bool HasAllTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x696fe3fee041
	bool HasAllMatchingGameplayTags(interface classNone TagContainerInterface, out const GameplayTagContainer OtherContainer);// 0x696ee3fee041
	FName GetTagName(out const GameplayTag GameplayTag);// 0x696de3fee041
	int GetNumGameplayTagsInContainer(out const GameplayTagContainer TagContainer);// 0x696ce3fee041
	FString GetDebugStringFromGameplayTagContainer(out const GameplayTagContainer TagContainer);// 0x696be3fee041
	FString GetDebugStringFromGameplayTag(GameplayTag GameplayTag);// 0x696ae3fee041
	void GetAllActorsOfClassMatchingTagQuery(Object* WorldContextObject, class Actor ActorClass, out const GameplayTagQuery GameplayTagQuery, out Actor*[] OutActors);// 0x6969e3fee041
	bool EqualEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0x6968e3fee041
	bool EqualEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0x6967e3fee041
	bool DoesTagAssetInterfaceHaveTag(interface classNone TagContainerInterface, GameplayTag Tag);// 0x6966e3fee041
	bool DoesContainerMatchTagQuery(out const GameplayTagContainer TagContainer, out const GameplayTagQuery TagQuery);// 0x6965e3fee041
	void BreakGameplayTagContainer(out const GameplayTagContainer GameplayTagContainer, out GameplayTag[] GameplayTags);// 0x6964e3fee041
	void AppendGameplayTagContainers(out GameplayTagContainer InOutTagContainer, out const GameplayTagContainer InTagContainer);// 0x6963e3fee041
	void AddGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0x6962e3fee041

--------------------------------
Class: GameplayTagAssetInterface.Interface.Object
	bool HasMatchingGameplayTag(GameplayTag TagToCheck);// 0x6983e3fee041
	bool HasAnyMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0x6982e3fee041
	bool HasAllMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0x6981e3fee041
	void GetOwnedGameplayTags(out GameplayTagContainer TagContainer);// 0x6980e3fee041

--------------------------------
Class: EditableGameplayTagQuery.Object
	FString UserDescription;//[Offset: 0x28, Size: 0x10]
	EditableGameplayTagQueryExpression* RootExpression;//[Offset: 0x48, Size: 0x8]
	GameplayTagQuery TagQueryExportText_Helper;//[Offset: 0x50, Size: 0x48]

--------------------------------
Class: EditableGameplayTagQueryExpression.Object

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20]

--------------------------------
Class: EditableGameplayTagQueryExpression_AllTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20]

--------------------------------
Class: EditableGameplayTagQueryExpression_NoTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20]

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: EditableGameplayTagQueryExpression_AllExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: EditableGameplayTagQueryExpression_NoExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GameplayTagsDeveloperSettings.DeveloperSettings.Object
	FString DeveloperConfigName;//[Offset: 0x38, Size: 0x10]
	FName FavoriteTagSource;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: PacketHandlerProfileConfig.Object
	FString[] Components;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MeshDescription.Object

--------------------------------
Class: PropertyAccess.Interface.Object

--------------------------------
Class: PropertyEventBroadcaster.Interface.Object

--------------------------------
Class: PropertyEventSubscriber.Interface.Object

--------------------------------
Class: ClothConfigBase.Object

--------------------------------
Class: ClothSharedSimConfigBase.Object

--------------------------------
Class: ClothPhysicalMeshDataBase_Legacy.Object
	Vector[] Vertices;//[Offset: 0x28, Size: 0x10]
	Vector[] Normals;//[Offset: 0x38, Size: 0x10]
	uint32[] Indices;//[Offset: 0x48, Size: 0x10]
	float[] InverseMasses;//[Offset: 0x58, Size: 0x10]
	ClothVertBoneData[] BoneData;//[Offset: 0x68, Size: 0x10]
	int NumFixedVerts;//[Offset: 0x78, Size: 0x4]
	int MaxBoneWeights;//[Offset: 0x7c, Size: 0x4]
	uint32[] SelfCollisionIndices;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: ClothVertBoneData
	int NumInfluences;//[Offset: 0x0, Size: 0x4]
	uint16 BoneIndices;//[Offset: 0x4, Size: 0x2]
	float BoneWeights;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: EyeTrackerFunctionLibrary.BlueprintFunctionLibrary.Object
	void SetEyeTrackedPlayer(PlayerController* PlayerController);// 0x69ece3fee041
	bool IsStereoGazeDataAvailable();// 0x69ebe3fee041
	bool IsEyeTrackerConnected();// 0x69eae3fee041
	bool GetStereoGazeData(out EyeTrackerStereoGazeData OutGazeData);// 0x69e9e3fee041
	bool GetGazeData(out EyeTrackerGazeData OutGazeData);// 0x69e8e3fee041

--------------------------------
Class: EyeTrackerStereoGazeData
	Vector LeftEyeOrigin;//[Offset: 0x0, Size: 0xc]
	Vector LeftEyeDirection;//[Offset: 0xc, Size: 0xc]
	Vector RightEyeOrigin;//[Offset: 0x18, Size: 0xc]
	Vector RightEyeDirection;//[Offset: 0x24, Size: 0xc]
	Vector FixationPoint;//[Offset: 0x30, Size: 0xc]
	float ConfidenceValue;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: EyeTrackerGazeData
	Vector GazeOrigin;//[Offset: 0x0, Size: 0xc]
	Vector GazeDirection;//[Offset: 0xc, Size: 0xc]
	Vector FixationPoint;//[Offset: 0x18, Size: 0xc]
	float ConfidenceValue;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: JsonUtilitiesDummyObject.Object

--------------------------------
Class: MediaBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	void EnumerateWebcamCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x69f6e3fee041
	void EnumerateVideoCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x69f5e3fee041
	void EnumerateAudioCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x69f4e3fee041

--------------------------------
Class: MediaCaptureDevice
	FText DisplayName;//[Offset: 0x0, Size: 0x18]
	FString URL;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: MediaComponent.ActorComponent.Object
	MediaTexture* MediaTexture;//[Offset: 0xb8, Size: 0x8]
	MediaPlayer* MediaPlayer;//[Offset: 0xc0, Size: 0x8]
	MediaTexture* GetMediaTexture();// 0x69f8e3fee041
	MediaPlayer* GetMediaPlayer();// 0x69f7e3fee041

--------------------------------
Class: MediaTexture.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0xe0, Size: 0x1]
	byte AddressY;//[Offset: 0xe1, Size: 0x1]
	bool AutoClear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1]
	LinearColor ClearColor;//[Offset: 0xe4, Size: 0x10]
	bool EnableGenMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	byte NumMips;//[Offset: 0xf5, Size: 0x1]
	bool NewStyleOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6, Size: 0x1]
	byte OutputFormat;//[Offset: 0xf7, Size: 0x1]
	float CurrentAspectRatio;//[Offset: 0xf8, Size: 0x4]
	byte CurrentOrientation;//[Offset: 0xfc, Size: 0x1]
	MediaPlayer* MediaPlayer;//[Offset: 0x100, Size: 0x8]
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0x6a5ee3fee041
	int GetWidth();// 0x6a5de3fee041
	MediaPlayer* GetMediaPlayer();// 0x6a5ce3fee041
	int GetHeight();// 0x6a5be3fee041
	float GetAspectRatio();// 0x6a5ae3fee041

--------------------------------
Class: MediaSoundComponent.SynthComponent.SceneComponent.ActorComponent.Object
	enum Channels;//[Offset: 0x6d0, Size: 0x4]
	bool DynamicRateAdjustment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d4, Size: 0x1]
	float RateAdjustmentFactor;//[Offset: 0x6d8, Size: 0x4]
	FloatRange RateAdjustmentRange;//[Offset: 0x6dc, Size: 0x10]
	MediaPlayer* MediaPlayer;//[Offset: 0x6f0, Size: 0x8]
	void SetSpectralAnalysisSettings(float[] InFrequenciesToAnalyze, enum InFFTSize);// 0x6a59e3fee041
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0x6a58e3fee041
	void SetEnvelopeFollowingsettings(int AttackTimeMsec, int ReleaseTimeMsec);// 0x6a57e3fee041
	void SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled);// 0x6a56e3fee041
	void SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing);// 0x6a55e3fee041
	MediaSoundComponentSpectralData[] GetSpectralData();// 0x6a54e3fee041
	MediaSoundComponentSpectralData[] GetNormalizedSpectralData();// 0x6a53e3fee041
	MediaPlayer* GetMediaPlayer();// 0x6a52e3fee041
	float GetEnvelopeValue();// 0x6a51e3fee041
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x6a50e3fee041

--------------------------------
Class: MediaSoundComponentSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4]
	float Magnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PlatformMediaSource.MediaSource.Object
	MediaSource* MediaSource;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: StreamMediaSource.BaseMediaSource.MediaSource.Object
	FString StreamUrl;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: TimeSynchronizableMediaSource.BaseMediaSource.MediaSource.Object
	bool bUseTimeSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	int FrameDelay;//[Offset: 0x8c, Size: 0x4]
	double TimeDelay;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: AnimSequenceLevelSequenceLink.AssetUserData.Object
	Guid SkelTrackGuid;//[Offset: 0x28, Size: 0x10]
	SoftObjectPath PathToLevelSequence;//[Offset: 0x38, Size: 0x18]

--------------------------------
Class: DefaultLevelSequenceInstanceData.Object
	Actor* TransformOriginActor;//[Offset: 0x30, Size: 0x8]
	Transform TransformOrigin;//[Offset: 0x40, Size: 0x30]

--------------------------------
Class: LevelSequenceMetaData.Interface.Object

--------------------------------
Class: LevelSequenceAnimSequenceLink.AssetUserData.Object
	LevelSequenceAnimSequenceLinkItem[] AnimSequenceLinks;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelSequenceAnimSequenceLinkItem
	Guid SkelTrackGuid;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath PathToAnimSequence;//[Offset: 0x10, Size: 0x18]
	bool bExportTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bExportCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bRecordInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: LevelSequenceDirector.Object
	LevelSequencePlayer* Player;//[Offset: 0x28, Size: 0x8]
	void OnCreated();// 0x6a62e3fee041

--------------------------------
Class: LegacyLevelSequenceDirectorBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelSequenceMediaController.Actor.Object
	LevelSequenceActor* Sequence;//[Offset: 0x2e8, Size: 0x8]
	MediaComponent* MediaComponent;//[Offset: 0x2f0, Size: 0x8]
	float ServerStartTimeSeconds;//[Offset: 0x2f8, Size: 0x4]
	void SynchronizeToServer(float DesyncThresholdSeconds);// 0x6a69e3fee041
	void Play();// 0x6a68e3fee041
	void OnRep_ServerStartTimeSeconds();// 0x6a67e3fee041
	LevelSequenceActor* GetSequence();// 0x6a66e3fee041
	MediaComponent* GetMediaComponent();// 0x6a65e3fee041

--------------------------------
Class: MovieSceneCaptureProtocolBase.Object
	enum State;//[Offset: 0x50, Size: 0x1]
	bool IsCapturing();// 0x6a6be3fee041
	enum GetState();// 0x6a6ae3fee041

--------------------------------
Class: MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: NullAudioCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: MasterAudioSubmixCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	FString Filename;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: CompositionGraphCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	CompositionGraphCapturePasses IncludeRenderPasses;//[Offset: 0x58, Size: 0x10]
	bool bCaptureFramesInHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	int HDRCompressionQuality;//[Offset: 0x6c, Size: 0x4]
	byte CaptureGamut;//[Offset: 0x70, Size: 0x1]
	SoftObjectPath PostProcessingMaterial;//[Offset: 0x78, Size: 0x18]
	bool bDisableScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	MaterialInterface* PostProcessingMaterialPtr;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: CompositionGraphCapturePasses
	FString[] Value;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	int CompressionQuality;//[Offset: 0xd8, Size: 0x4]

--------------------------------
Class: ImageSequenceProtocol_BMP.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_PNG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_JPG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_EXR.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	bool bCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	byte CaptureGamut;//[Offset: 0xd9, Size: 0x1]

--------------------------------
Class: MovieSceneCaptureInterface.Interface.Object

--------------------------------
Class: MovieSceneCapture.Object
	SoftClassPath ImageCaptureProtocolType;//[Offset: 0x38, Size: 0x18]
	SoftClassPath AudioCaptureProtocolType;//[Offset: 0x50, Size: 0x18]
	MovieSceneImageCaptureProtocolBase* ImageCaptureProtocol;//[Offset: 0x68, Size: 0x8]
	MovieSceneAudioCaptureProtocolBase* AudioCaptureProtocol;//[Offset: 0x70, Size: 0x8]
	MovieSceneCaptureSettings Settings;//[Offset: 0x78, Size: 0x70]
	bool bUseSeparateProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bCloseEditorWhenCaptureStarts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	FString AdditionalCommandLineArguments;//[Offset: 0xf0, Size: 0x10]
	FString InheritedCommandLineArguments;//[Offset: 0x100, Size: 0x10]
	void SetImageCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0x6a6fe3fee041
	void SetAudioCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0x6a6ee3fee041
	MovieSceneCaptureProtocolBase* GetImageCaptureProtocol();// 0x6a6de3fee041
	MovieSceneCaptureProtocolBase* GetAudioCaptureProtocol();// 0x6a6ce3fee041

--------------------------------
Class: MovieSceneCaptureSettings
	DirectoryPath OutputDirectory;//[Offset: 0x0, Size: 0x10]
	class GameModeBase* GameModeOverride;//[Offset: 0x10, Size: 0x8]
	FString OutputFormat;//[Offset: 0x18, Size: 0x10]
	bool bOverwriteExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bUseRelativeFrameNumbers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	int HandleFrames;//[Offset: 0x2c, Size: 0x4]
	FString MovieExtension;//[Offset: 0x30, Size: 0x10]
	byte ZeroPadFrameNumbers;//[Offset: 0x40, Size: 0x1]
	FrameRate FrameRate;//[Offset: 0x44, Size: 0x8]
	bool bUseCustomFrameRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	FrameRate CustomFrameRate;//[Offset: 0x50, Size: 0x8]
	CaptureResolution Resolution;//[Offset: 0x58, Size: 0x8]
	bool bEnableTextureStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bCinematicEngineScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	bool bCinematicMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1]
	bool bAllowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1]
	bool bAllowTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool bShowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]
	bool bUsePathTracer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1]
	int PathTracerSamplePerPixel;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: CaptureResolution
	int ResX;//[Offset: 0x0, Size: 0x4]
	int ResY;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LevelCapture.MovieSceneCapture.Object
	bool bAutoStartCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	Guid PrerequisiteActorId;//[Offset: 0x22c, Size: 0x10]

--------------------------------
Class: MovieSceneCaptureEnvironment.Object
	bool IsCaptureInProgress();// 0x6a74e3fee041
	int GetCaptureFrameNumber();// 0x6a73e3fee041
	float GetCaptureElapsedTime();// 0x6a72e3fee041
	MovieSceneImageCaptureProtocolBase* FindImageCaptureProtocol();// 0x6a71e3fee041
	MovieSceneAudioCaptureProtocolBase* FindAudioCaptureProtocol();// 0x6a70e3fee041

--------------------------------
Class: UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	World* World;//[Offset: 0x58, Size: 0x8]
	void StopCapturingFinalPixels();// 0x6a84e3fee041
	void StartCapturingFinalPixels(out const CapturedPixelsID StreamID);// 0x6a83e3fee041
	void ResolveBuffer(Texture* Buffer, out const CapturedPixelsID BufferID);// 0x6a82e3fee041
	void OnWarmUp();// 0x6a81e3fee041
	void OnTick();// 0x6a80e3fee041
	void OnStartCapture();// 0x6a7fe3fee041
	bool OnSetup();// 0x6a7ee3fee041
	void OnPreTick();// 0x6a7de3fee041
	void OnPixelsReceived(out const CapturedPixels Pixels, out const CapturedPixelsID ID, FrameMetrics FrameMetrics);// 0x6a7ce3fee041
	void OnPauseCapture();// 0x6a7be3fee041
	void OnFinalize();// 0x6a7ae3fee041
	void OnCaptureFrame();// 0x6a79e3fee041
	bool OnCanFinalize();// 0x6a78e3fee041
	void OnBeginFinalize();// 0x6a77e3fee041
	FrameMetrics GetCurrentFrameMetrics();// 0x6a76e3fee041
	FString GenerateFilename(out const FrameMetrics InFrameMetrics);// 0x6a75e3fee041

--------------------------------
Class: CapturedPixelsID
	<FName,FName> Identifiers;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: CapturedPixels

--------------------------------
Class: FrameMetrics
	float TotalElapsedTime;//[Offset: 0x0, Size: 0x4]
	float FrameDelta;//[Offset: 0x4, Size: 0x4]
	int FrameNumber;//[Offset: 0x8, Size: 0x4]
	int NumDroppedFrames;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UserDefinedImageCaptureProtocol.UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	enum Format;//[Offset: 0xd8, Size: 0x1]
	bool bEnableCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	int CompressionQuality;//[Offset: 0xdc, Size: 0x4]
	void WriteImageToDisk(out const CapturedPixels PixelData, out const CapturedPixelsID StreamID, out const FrameMetrics FrameMetrics, bool bCopyImageData);// 0x6a87e3fee041
	FString GenerateFilenameForCurrentFrame();// 0x6a86e3fee041
	FString GenerateFilenameForBuffer(Texture* Buffer, out const CapturedPixelsID StreamID);// 0x6a85e3fee041

--------------------------------
Class: VideoCaptureProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	bool bUseCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float CompressionQuality;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: MoviePlayerSettings.Object
	bool bWaitForMoviesToComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bMoviesAreSkippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	FString[] StartupMovies;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Overlays.Object

--------------------------------
Class: BasicOverlays.Overlays.Object
	OverlayItem[] Overlays;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: OverlayItem
	Timespan StartTime;//[Offset: 0x0, Size: 0x8]
	Timespan EndTime;//[Offset: 0x8, Size: 0x8]
	FString Text;//[Offset: 0x10, Size: 0x10]
	Vector2D position;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: LocalizedOverlays.Overlays.Object
	BasicOverlays* DefaultOverlays;//[Offset: 0x28, Size: 0x8]
	<FString,BasicOverlays*> LocaleToOverlaysMap;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: BuildPatchManifest.Object
	byte ManifestFileVersion;//[Offset: 0x28, Size: 0x1]
	bool bIsFileData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	uint32 AppID;//[Offset: 0x2c, Size: 0x4]
	FString AppName;//[Offset: 0x30, Size: 0x10]
	FString BuildVersion;//[Offset: 0x40, Size: 0x10]
	FString LaunchExe;//[Offset: 0x50, Size: 0x10]
	FString LaunchCommand;//[Offset: 0x60, Size: 0x10]
	<FString> PrereqIds;//[Offset: 0x70, Size: 0x50]
	FString PrereqName;//[Offset: 0xc0, Size: 0x10]
	FString PrereqPath;//[Offset: 0xd0, Size: 0x10]
	FString PrereqArgs;//[Offset: 0xe0, Size: 0x10]
	FileManifestData[] FileManifestList;//[Offset: 0xf0, Size: 0x10]
	ChunkInfoData[] ChunkList;//[Offset: 0x100, Size: 0x10]
	CustomFieldData[] CustomFields;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: FileManifestData
	FString Filename;//[Offset: 0x0, Size: 0x10]
	SHAHashData FileHash;//[Offset: 0x10, Size: 0x14]
	ChunkPartData[] FileChunkParts;//[Offset: 0x28, Size: 0x10]
	FString[] InstallTags;//[Offset: 0x38, Size: 0x10]
	bool bIsUnixExecutable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	FString SymlinkTarget;//[Offset: 0x50, Size: 0x10]
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bIsCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]

--------------------------------
Class: SHAHashData
	byte Hash;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ChunkPartData
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	uint32 Offset;//[Offset: 0x10, Size: 0x4]
	uint32 Size;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ChunkInfoData
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	uint64 Hash;//[Offset: 0x10, Size: 0x8]
	SHAHashData ShaHash;//[Offset: 0x18, Size: 0x14]
	int64 FileSize;//[Offset: 0x30, Size: 0x8]
	byte GroupNumber;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: CustomFieldData
	FString Key;//[Offset: 0x0, Size: 0x10]
	FString Value;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ClothConfigCommon.ClothConfigBase.Object

--------------------------------
Class: ClothSharedConfigCommon.ClothConfigCommon.ClothConfigBase.Object

--------------------------------
Class: ClothingAssetCustomData.Object

--------------------------------
Class: ClothingAssetCommon.ClothingAssetBase.Object
	PhysicsAsset* PhysicsAsset;//[Offset: 0x48, Size: 0x8]
	<FName,ClothConfigBase*> ClothConfigs;//[Offset: 0x50, Size: 0x50]
	ClothConfigBase* ClothSharedSimConfig;//[Offset: 0xa0, Size: 0x8]
	ClothConfigBase* ClothSimConfig;//[Offset: 0xa8, Size: 0x8]
	ClothConfigBase* ChaosClothSimConfig;//[Offset: 0xb0, Size: 0x8]
	ClothLODDataCommon_Legacy*[] ClothLODData;//[Offset: 0xb8, Size: 0x10]
	ClothLODDataCommon[] LODData;//[Offset: 0xc8, Size: 0x10]
	int[] LodMap;//[Offset: 0xd8, Size: 0x10]
	FName[] UsedBoneNames;//[Offset: 0xe8, Size: 0x10]
	int[] UsedBoneIndices;//[Offset: 0xf8, Size: 0x10]
	int ReferenceBoneIndex;//[Offset: 0x108, Size: 0x4]
	ClothingAssetCustomData* CustomData;//[Offset: 0x110, Size: 0x8]
	ClothConfig_Legacy ClothConfig;//[Offset: 0x118, Size: 0xd4]

--------------------------------
Class: ClothLODDataCommon_Legacy.Object
	ClothPhysicalMeshDataBase_Legacy* PhysicalMeshData;//[Offset: 0x28, Size: 0x8]
	ClothPhysicalMeshData ClothPhysicalMeshData;//[Offset: 0x30, Size: 0xf8]
	ClothCollisionData CollisionData;//[Offset: 0x128, Size: 0x40]

--------------------------------
Class: ClothPhysicalMeshData
	Vector[] Vertices;//[Offset: 0x0, Size: 0x10]
	Vector[] Normals;//[Offset: 0x10, Size: 0x10]
	uint32[] Indices;//[Offset: 0x20, Size: 0x10]
	<uint32,PointWeightMap> WeightMaps;//[Offset: 0x30, Size: 0x50]
	float[] InverseMasses;//[Offset: 0x80, Size: 0x10]
	ClothVertBoneData[] BoneData;//[Offset: 0x90, Size: 0x10]
	int MaxBoneWeights;//[Offset: 0xa0, Size: 0x4]
	int NumFixedVerts;//[Offset: 0xa4, Size: 0x4]
	uint32[] SelfCollisionIndices;//[Offset: 0xa8, Size: 0x10]
	float[] MaxDistances;//[Offset: 0xb8, Size: 0x10]
	float[] BackstopDistances;//[Offset: 0xc8, Size: 0x10]
	float[] BackstopRadiuses;//[Offset: 0xd8, Size: 0x10]
	float[] AnimDriveMultipliers;//[Offset: 0xe8, Size: 0x10]

--------------------------------
Class: PointWeightMap
	float[] Values;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ClothCollisionData
	ClothCollisionPrim_Sphere[] Spheres;//[Offset: 0x0, Size: 0x10]
	ClothCollisionPrim_SphereConnection[] SphereConnections;//[Offset: 0x10, Size: 0x10]
	ClothCollisionPrim_Convex[] Convexes;//[Offset: 0x20, Size: 0x10]
	ClothCollisionPrim_Box[] Boxes;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ClothCollisionPrim_Sphere
	int BoneIndex;//[Offset: 0x0, Size: 0x4]
	float Radius;//[Offset: 0x4, Size: 0x4]
	Vector LocalPosition;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: ClothCollisionPrim_SphereConnection
	int SphereIndices;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ClothCollisionPrim_Convex
	Plane[] Planes;//[Offset: 0x0, Size: 0x10]
	Vector[] SurfacePoints;//[Offset: 0x10, Size: 0x10]
	int BoneIndex;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ClothCollisionPrim_Box
	Vector LocalPosition;//[Offset: 0x0, Size: 0xc]
	Quat LocalRotation;//[Offset: 0x10, Size: 0x10]
	Vector HalfExtents;//[Offset: 0x20, Size: 0xc]
	int BoneIndex;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: ClothLODDataCommon
	ClothPhysicalMeshData PhysicalMeshData;//[Offset: 0x0, Size: 0xf8]
	ClothCollisionData CollisionData;//[Offset: 0xf8, Size: 0x40]
	bool bUseMultipleInfluences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	float SkinningKernelRadius;//[Offset: 0x13c, Size: 0x4]

--------------------------------
Class: ClothConfig_Legacy
	enum WindMethod;//[Offset: 0x0, Size: 0x1]
	ClothConstraintSetup_Legacy VerticalConstraintConfig;//[Offset: 0x4, Size: 0x10]
	ClothConstraintSetup_Legacy HorizontalConstraintConfig;//[Offset: 0x14, Size: 0x10]
	ClothConstraintSetup_Legacy BendConstraintConfig;//[Offset: 0x24, Size: 0x10]
	ClothConstraintSetup_Legacy ShearConstraintConfig;//[Offset: 0x34, Size: 0x10]
	float SelfCollisionRadius;//[Offset: 0x44, Size: 0x4]
	float SelfCollisionStiffness;//[Offset: 0x48, Size: 0x4]
	float SelfCollisionCullScale;//[Offset: 0x4c, Size: 0x4]
	Vector Damping;//[Offset: 0x50, Size: 0xc]
	float Friction;//[Offset: 0x5c, Size: 0x4]
	float WindDragCoefficient;//[Offset: 0x60, Size: 0x4]
	float WindLiftCoefficient;//[Offset: 0x64, Size: 0x4]
	Vector LinearDrag;//[Offset: 0x68, Size: 0xc]
	Vector AngularDrag;//[Offset: 0x74, Size: 0xc]
	Vector LinearInertiaScale;//[Offset: 0x80, Size: 0xc]
	Vector AngularInertiaScale;//[Offset: 0x8c, Size: 0xc]
	Vector CentrifugalInertiaScale;//[Offset: 0x98, Size: 0xc]
	float SolverFrequency;//[Offset: 0xa4, Size: 0x4]
	float StiffnessFrequency;//[Offset: 0xa8, Size: 0x4]
	float GravityScale;//[Offset: 0xac, Size: 0x4]
	Vector GravityOverride;//[Offset: 0xb0, Size: 0xc]
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float TetherStiffness;//[Offset: 0xc0, Size: 0x4]
	float TetherLimit;//[Offset: 0xc4, Size: 0x4]
	float CollisionThickness;//[Offset: 0xc8, Size: 0x4]
	float AnimDriveSpringStiffness;//[Offset: 0xcc, Size: 0x4]
	float AnimDriveDamperStiffness;//[Offset: 0xd0, Size: 0x4]

--------------------------------
Class: ClothConstraintSetup_Legacy
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4]
	float StretchLimit;//[Offset: 0x8, Size: 0x4]
	float CompressionLimit;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ClothConfigNv.ClothConfigCommon.ClothConfigBase.Object
	enum ClothingWindMethod;//[Offset: 0x28, Size: 0x1]
	ClothConstraintSetupNv VerticalConstraint;//[Offset: 0x2c, Size: 0x10]
	ClothConstraintSetupNv HorizontalConstraint;//[Offset: 0x3c, Size: 0x10]
	ClothConstraintSetupNv BendConstraint;//[Offset: 0x4c, Size: 0x10]
	ClothConstraintSetupNv ShearConstraint;//[Offset: 0x5c, Size: 0x10]
	float SelfCollisionRadius;//[Offset: 0x6c, Size: 0x4]
	float SelfCollisionStiffness;//[Offset: 0x70, Size: 0x4]
	float SelfCollisionCullScale;//[Offset: 0x74, Size: 0x4]
	Vector Damping;//[Offset: 0x78, Size: 0xc]
	float Friction;//[Offset: 0x84, Size: 0x4]
	float WindDragCoefficient;//[Offset: 0x88, Size: 0x4]
	float WindLiftCoefficient;//[Offset: 0x8c, Size: 0x4]
	Vector LinearDrag;//[Offset: 0x90, Size: 0xc]
	Vector AngularDrag;//[Offset: 0x9c, Size: 0xc]
	Vector LinearInertiaScale;//[Offset: 0xa8, Size: 0xc]
	Vector AngularInertiaScale;//[Offset: 0xb4, Size: 0xc]
	Vector CentrifugalInertiaScale;//[Offset: 0xc0, Size: 0xc]
	float SolverFrequency;//[Offset: 0xcc, Size: 0x4]
	float StiffnessFrequency;//[Offset: 0xd0, Size: 0x4]
	float GravityScale;//[Offset: 0xd4, Size: 0x4]
	Vector GravityOverride;//[Offset: 0xd8, Size: 0xc]
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	float TetherStiffness;//[Offset: 0xe8, Size: 0x4]
	float TetherLimit;//[Offset: 0xec, Size: 0x4]
	float CollisionThickness;//[Offset: 0xf0, Size: 0x4]
	float AnimDriveSpringStiffness;//[Offset: 0xf4, Size: 0x4]
	float AnimDriveDamperStiffness;//[Offset: 0xf8, Size: 0x4]
	enum WindMethod;//[Offset: 0xfc, Size: 0x1]
	ClothConstraintSetup_Legacy VerticalConstraintConfig;//[Offset: 0x100, Size: 0x10]
	ClothConstraintSetup_Legacy HorizontalConstraintConfig;//[Offset: 0x110, Size: 0x10]
	ClothConstraintSetup_Legacy BendConstraintConfig;//[Offset: 0x120, Size: 0x10]
	ClothConstraintSetup_Legacy ShearConstraintConfig;//[Offset: 0x130, Size: 0x10]

--------------------------------
Class: ClothConstraintSetupNv
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4]
	float StretchLimit;//[Offset: 0x8, Size: 0x4]
	float CompressionLimit;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactoryNv.ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractorNv.ClothingSimulationInteractor.Object
	void SetAnimDriveDamperStiffness(float InStiffness);// 0x71d1e3fee041

--------------------------------
Class: ClothPhysicalMeshDataNv_Legacy.ClothPhysicalMeshDataBase_Legacy.Object
	float[] MaxDistances;//[Offset: 0xe0, Size: 0x10]
	float[] BackstopDistances;//[Offset: 0xf0, Size: 0x10]
	float[] BackstopRadiuses;//[Offset: 0x100, Size: 0x10]
	float[] AnimDriveMultipliers;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: AndroidRuntimeSettings.Object
	FString PackageName;//[Offset: 0x28, Size: 0x10]
	int StoreVersion;//[Offset: 0x38, Size: 0x4]
	int StoreVersionOffsetArmV7;//[Offset: 0x3c, Size: 0x4]
	int StoreVersionOffsetArm64;//[Offset: 0x40, Size: 0x4]
	int StoreVersionOffsetX8664;//[Offset: 0x44, Size: 0x4]
	FString ApplicationDisplayName;//[Offset: 0x48, Size: 0x10]
	FString VersionDisplayName;//[Offset: 0x58, Size: 0x10]
	int MinSDKVersion;//[Offset: 0x68, Size: 0x4]
	int TargetSDKVersion;//[Offset: 0x6c, Size: 0x4]
	byte InstallLocation;//[Offset: 0x70, Size: 0x1]
	bool bEnableGradle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool bEnableLint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool bPackageDataInsideApk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool bCreateAllPlatformsInstall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	bool bDisableVerifyOBBOnStartUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	bool bForceSmallOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1]
	bool bAllowLargeOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 0x1]
	bool bAllowPatchOBBFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bAllowOverflowOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool bUseExternalFilesDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
	bool bPublicLogFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1]
	byte Orientation;//[Offset: 0x7c, Size: 0x1]
	float MaxAspectRatio;//[Offset: 0x80, Size: 0x4]
	bool bUseDisplayCutout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bRestoreNotificationsOnReboot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool bFullScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	bool bEnableNewKeyboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87, Size: 0x1]
	byte DepthBufferPreference;//[Offset: 0x88, Size: 0x1]
	bool bValidateTextureFormats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	bool bEnableBundle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1]
	bool bEnableUniversalAPK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b, Size: 0x1]
	bool bBundleABISplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	bool bBundleLanguageSplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 0x1]
	bool bBundleDensitySplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 0x1]
	FString[] ExtraManifestNodeTags;//[Offset: 0x90, Size: 0x10]
	FString[] ExtraApplicationNodeTags;//[Offset: 0xa0, Size: 0x10]
	FString ExtraApplicationSettings;//[Offset: 0xb0, Size: 0x10]
	FString[] ExtraActivityNodeTags;//[Offset: 0xc0, Size: 0x10]
	FString ExtraActivitySettings;//[Offset: 0xd0, Size: 0x10]
	FString[] ExtraPermissions;//[Offset: 0xe0, Size: 0x10]
	bool bAndroidVoiceEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	byte[] PackageForOculusMobile;//[Offset: 0xf8, Size: 0x10]
	bool bRemoveOSIG;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	byte[] GoogleVRCaps;//[Offset: 0x110, Size: 0x10]
	bool bGoogleVRSustainedPerformance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	FString KeyStore;//[Offset: 0x128, Size: 0x10]
	FString KeyAlias;//[Offset: 0x138, Size: 0x10]
	FString KeyStorePassword;//[Offset: 0x148, Size: 0x10]
	FString KeyPassword;//[Offset: 0x158, Size: 0x10]
	bool bBuildForArmV7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	bool bBuildForArm64;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	bool bBuildForX8664;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1]
	bool bBuildForES2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 0x1]
	bool bBuildForES31;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1]
	bool bSupportsVulkan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	bool bSupportsVulkanSM5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e, Size: 0x1]
	byte ClangSanitizer;//[Offset: 0x16f, Size: 0x1]
	bool bAndroidOpenGLSupportsBackbufferSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bDetectVulkanByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	bool bBuildWithHiddenSymbolVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 0x1]
	bool bSaveSymbols;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x173, Size: 0x1]
	bool bForceLDLinker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]
	bool bEnableGooglePlaySupport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 0x1]
	bool bUseGetAccounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176, Size: 0x1]
	FString GamesAppID;//[Offset: 0x178, Size: 0x10]
	GooglePlayAchievementMapping[] AchievementMap;//[Offset: 0x188, Size: 0x10]
	GooglePlayLeaderboardMapping[] LeaderboardMap;//[Offset: 0x198, Size: 0x10]
	bool bEnableSnapshots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	bool bSupportAdMob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1]
	FString AdMobAdUnitID;//[Offset: 0x1b0, Size: 0x10]
	FString[] AdMobAdUnitIDs;//[Offset: 0x1c0, Size: 0x10]
	FString GooglePlayLicenseKey;//[Offset: 0x1d0, Size: 0x10]
	FString GCMClientSenderID;//[Offset: 0x1e0, Size: 0x10]
	bool bShowLaunchImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	bool bAllowIMU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1]
	bool bAllowControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1]
	bool bBlockAndroidKeysOnControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3, Size: 0x1]
	bool bControllersBlockDeviceFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 0x1]
	byte AndroidAudio;//[Offset: 0x1f5, Size: 0x1]
	int AudioSampleRate;//[Offset: 0x1f8, Size: 0x4]
	int AudioCallbackBufferFrameSize;//[Offset: 0x1fc, Size: 0x4]
	int AudioNumBuffersToEnqueue;//[Offset: 0x200, Size: 0x4]
	int AudioMaxChannels;//[Offset: 0x204, Size: 0x4]
	int AudioNumSourceWorkers;//[Offset: 0x208, Size: 0x4]
	FString SpatializationPlugin;//[Offset: 0x210, Size: 0x10]
	FString ReverbPlugin;//[Offset: 0x220, Size: 0x10]
	FString OcclusionPlugin;//[Offset: 0x230, Size: 0x10]
	PlatformRuntimeAudioCompressionOverrides CompressionOverrides;//[Offset: 0x240, Size: 0x10]
	bool bUseAudioStreamCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	int CacheSizeKB;//[Offset: 0x254, Size: 0x4]
	int MaxChunkSizeOverrideKB;//[Offset: 0x258, Size: 0x4]
	bool bResampleForDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	int SoundCueCookQualityIndex;//[Offset: 0x260, Size: 0x4]
	float MaxSampleRate;//[Offset: 0x264, Size: 0x4]
	float HighSampleRate;//[Offset: 0x268, Size: 0x4]
	float MedSampleRate;//[Offset: 0x26c, Size: 0x4]
	float LowSampleRate;//[Offset: 0x270, Size: 0x4]
	float MinSampleRate;//[Offset: 0x274, Size: 0x4]
	float CompressionQualityModifier;//[Offset: 0x278, Size: 0x4]
	float AutoStreamingThreshold;//[Offset: 0x27c, Size: 0x4]
	byte AndroidGraphicsDebugger;//[Offset: 0x280, Size: 0x1]
	DirectoryPath MaliGraphicsDebuggerPath;//[Offset: 0x288, Size: 0x10]
	bool bMultiTargetFormat_ETC2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	bool bMultiTargetFormat_DXT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1]
	bool bMultiTargetFormat_ASTC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 0x1]
	float TextureFormatPriority_ETC2;//[Offset: 0x29c, Size: 0x4]
	float TextureFormatPriority_DXT;//[Offset: 0x2a0, Size: 0x4]
	float TextureFormatPriority_ASTC;//[Offset: 0x2a4, Size: 0x4]
	FString SDKAPILevelOverride;//[Offset: 0x2a8, Size: 0x10]
	FString NDKAPILevelOverride;//[Offset: 0x2b8, Size: 0x10]
	bool bStreamLandscapeMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]

--------------------------------
Class: GooglePlayAchievementMapping
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString AchievementID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: GooglePlayLeaderboardMapping
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString LeaderboardID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: PlatformRuntimeAudioCompressionOverrides
	bool bOverrideCompressionTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float DurationThreshold;//[Offset: 0x4, Size: 0x4]
	int MaxNumRandomBranches;//[Offset: 0x8, Size: 0x4]
	int SoundCueQualityIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: InputBehavior.Object

--------------------------------
Class: AnyButtonInputBehavior.InputBehavior.Object

--------------------------------
Class: InteractiveGizmoBuilder.Object

--------------------------------
Class: AxisAngleGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: InteractiveGizmo.Object
	InputBehaviorSet* InputBehaviors;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: InputBehaviorSet.Object
	BehaviorInfo[] Behaviors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BehaviorInfo
	InputBehavior* Behavior;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AxisAngleGizmo.InteractiveGizmo.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10]
	interface class None* AngleSource;//[Offset: 0x58, Size: 0x10]
	interface class None* HitTarget;//[Offset: 0x68, Size: 0x10]
	interface class None* StateTarget;//[Offset: 0x78, Size: 0x10]
	bool bInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	Vector RotationOrigin;//[Offset: 0x8c, Size: 0xc]
	Vector RotationAxis;//[Offset: 0x98, Size: 0xc]
	Vector RotationPlaneX;//[Offset: 0xa4, Size: 0xc]
	Vector RotationPlaneY;//[Offset: 0xb0, Size: 0xc]
	Vector InteractionStartPoint;//[Offset: 0xbc, Size: 0xc]
	Vector InteractionCurPoint;//[Offset: 0xc8, Size: 0xc]
	float InteractionStartAngle;//[Offset: 0xd4, Size: 0x4]
	float InteractionCurAngle;//[Offset: 0xd8, Size: 0x4]

--------------------------------
Class: AxisPositionGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: AxisPositionGizmo.InteractiveGizmo.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10]
	interface class None* ParameterSource;//[Offset: 0x58, Size: 0x10]
	interface class None* HitTarget;//[Offset: 0x68, Size: 0x10]
	interface class None* StateTarget;//[Offset: 0x78, Size: 0x10]
	bool bEnableSignedAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	Vector InteractionOrigin;//[Offset: 0x8c, Size: 0xc]
	Vector InteractionAxis;//[Offset: 0x98, Size: 0xc]
	Vector InteractionStartPoint;//[Offset: 0xa4, Size: 0xc]
	Vector InteractionCurPoint;//[Offset: 0xb0, Size: 0xc]
	float InteractionStartParameter;//[Offset: 0xbc, Size: 0x4]
	float InteractionCurParameter;//[Offset: 0xc0, Size: 0x4]
	float ParameterSign;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: GizmoConstantAxisSource.Object
	Vector Origin;//[Offset: 0x30, Size: 0xc]
	Vector Direction;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: GizmoConstantFrameAxisSource.Object
	Vector Origin;//[Offset: 0x30, Size: 0xc]
	Vector Direction;//[Offset: 0x3c, Size: 0xc]
	Vector TangentX;//[Offset: 0x48, Size: 0xc]
	Vector TangentY;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: GizmoWorldAxisSource.Object
	Vector Origin;//[Offset: 0x30, Size: 0xc]
	int AxisIndex;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: GizmoComponentAxisSource.Object
	SceneComponent* Component;//[Offset: 0x30, Size: 0x8]
	int AxisIndex;//[Offset: 0x38, Size: 0x4]
	bool bLocalAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: InteractiveToolPropertySet.Object
	InteractiveToolPropertySet* CachedProperties;//[Offset: 0x38, Size: 0x8]
	bool bIsPropertySetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: BrushBaseProperties.InteractiveToolPropertySet.Object
	float BrushSize;//[Offset: 0x60, Size: 0x4]
	bool bSpecifyRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	float BrushRadius;//[Offset: 0x68, Size: 0x4]
	float BrushStrength;//[Offset: 0x6c, Size: 0x4]
	float BrushFalloffAmount;//[Offset: 0x70, Size: 0x4]
	bool bShowStrength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	bool bShowFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]

--------------------------------
Class: InteractiveTool.Object
	InputBehaviorSet* InputBehaviors;//[Offset: 0x48, Size: 0x8]
	Object*[] ToolPropertyObjects;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: SingleSelectionTool.InteractiveTool.Object

--------------------------------
Class: MeshSurfacePointTool.SingleSelectionTool.InteractiveTool.Object

--------------------------------
Class: BaseBrushTool.MeshSurfacePointTool.SingleSelectionTool.InteractiveTool.Object
	BrushBaseProperties* BrushProperties;//[Offset: 0xc0, Size: 0x8]
	bool bInBrushStroke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	float WorldToLocalScale;//[Offset: 0xcc, Size: 0x4]
	BrushStampData LastBrushStamp;//[Offset: 0xd0, Size: 0xc0]
	class BrushBaseProperties* PropertyClass;//[Offset: 0x1a0, Size: 0x28]
	BrushStampIndicator* BrushStampIndicator;//[Offset: 0x1c8, Size: 0x8]

--------------------------------
Class: BrushStampData

--------------------------------
Class: BrushStampIndicator.InteractiveGizmo.Object
	float BrushRadius;//[Offset: 0x38, Size: 0x4]
	float BrushFalloff;//[Offset: 0x3c, Size: 0x4]
	Vector BrushPosition;//[Offset: 0x40, Size: 0xc]
	Vector BrushNormal;//[Offset: 0x4c, Size: 0xc]
	bool bDrawIndicatorLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bDrawRadiusCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	int SampleStepCount;//[Offset: 0x5c, Size: 0x4]
	LinearColor LineColor;//[Offset: 0x60, Size: 0x10]
	float LineThickness;//[Offset: 0x70, Size: 0x4]
	bool bDepthTested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	bool bDrawSecondaryLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	float SecondaryLineThickness;//[Offset: 0x78, Size: 0x4]
	LinearColor SecondaryLineColor;//[Offset: 0x7c, Size: 0x10]
	PrimitiveComponent* AttachedComponent;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: BrushStampIndicatorBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: ClickDragInputBehavior.AnyButtonInputBehavior.InputBehavior.Object
	bool bUpdateModifiersDuringDrag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]

--------------------------------
Class: LocalClickDragInputBehavior.ClickDragInputBehavior.AnyButtonInputBehavior.InputBehavior.Object

--------------------------------
Class: InteractiveToolBuilder.Object

--------------------------------
Class: ClickDragToolBuilder.InteractiveToolBuilder.Object

--------------------------------
Class: ClickDragTool.InteractiveTool.Object

--------------------------------
Class: InternalToolFrameworkActor.Actor.Object

--------------------------------
Class: GizmoActor.InternalToolFrameworkActor.Actor.Object

--------------------------------
Class: GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LinearColor Color;//[Offset: 0x5b0, Size: 0x10]
	float HoverSizeMultiplier;//[Offset: 0x5c0, Size: 0x4]
	float PixelHitDistanceThreshold;//[Offset: 0x5c4, Size: 0x4]
	void UpdateWorldLocalState(bool bWorldIn);// 0x71d3e3fee041
	void UpdateHoverState(bool bHoveringIn);// 0x71d2e3fee041

--------------------------------
Class: GizmoArrowComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Direction;//[Offset: 0x5d0, Size: 0xc]
	float Gap;//[Offset: 0x5dc, Size: 0x4]
	float Length;//[Offset: 0x5e0, Size: 0x4]
	float Thickness;//[Offset: 0x5e4, Size: 0x4]

--------------------------------
Class: GizmoBoxComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Origin;//[Offset: 0x5d0, Size: 0xc]
	Quat Rotation;//[Offset: 0x5e0, Size: 0x10]
	Vector Dimensions;//[Offset: 0x5f0, Size: 0xc]
	float LineThickness;//[Offset: 0x5fc, Size: 0x4]
	bool bRemoveHiddenLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]
	bool bEnableAxisFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x601, Size: 0x1]

--------------------------------
Class: GizmoCircleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Normal;//[Offset: 0x5d0, Size: 0xc]
	float Radius;//[Offset: 0x5dc, Size: 0x4]
	float Thickness;//[Offset: 0x5e0, Size: 0x4]
	int NumSides;//[Offset: 0x5e4, Size: 0x4]
	bool bViewAligned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 0x1]
	bool bOnlyAllowFrontFacingHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e9, Size: 0x1]

--------------------------------
Class: GizmoTransformSource.Interface.Object
	void SetTransform(out const Transform NewTransform);// 0x71d5e3fee041
	Transform GetTransform();// 0x71d4e3fee041

--------------------------------
Class: GizmoAxisSource.Interface.Object
	bool HasTangentVectors();// 0x71d9e3fee041
	void GetTangentVectors(out Vector TangentXOut, out Vector TangentYOut);// 0x71d8e3fee041
	Vector GetOrigin();// 0x71d7e3fee041
	Vector GetDirection();// 0x71d6e3fee041

--------------------------------
Class: GizmoClickTarget.Interface.Object
	void UpdateHoverState(bool bHovering);// 0x71dae3fee041

--------------------------------
Class: GizmoStateTarget.Interface.Object
	void EndUpdate();// 0x71dce3fee041
	void BeginUpdate();// 0x71dbe3fee041

--------------------------------
Class: GizmoFloatParameterSource.Interface.Object
	void SetParameter(float NewValue);// 0x71e0e3fee041
	float GetParameter();// 0x71dfe3fee041
	void EndModify();// 0x71dee3fee041
	void BeginModify();// 0x71dde3fee041

--------------------------------
Class: GizmoVec2ParameterSource.Interface.Object
	void SetParameter(out const Vector2D NewValue);// 0x71e4e3fee041
	Vector2D GetParameter();// 0x71e3e3fee041
	void EndModify();// 0x71e2e3fee041
	void BeginModify();// 0x71e1e3fee041

--------------------------------
Class: GizmoLineHandleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Normal;//[Offset: 0x5d0, Size: 0xc]
	float HandleSize;//[Offset: 0x5dc, Size: 0x4]
	float Thickness;//[Offset: 0x5e0, Size: 0x4]
	Vector Direction;//[Offset: 0x5e4, Size: 0xc]
	float Length;//[Offset: 0x5f0, Size: 0x4]
	bool bImageScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 0x1]

--------------------------------
Class: GizmoRectangleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector DirectionX;//[Offset: 0x5d0, Size: 0xc]
	Vector DirectionY;//[Offset: 0x5dc, Size: 0xc]
	float offsetX;//[Offset: 0x5e8, Size: 0x4]
	float offsetY;//[Offset: 0x5ec, Size: 0x4]
	float LengthX;//[Offset: 0x5f0, Size: 0x4]
	float LengthY;//[Offset: 0x5f4, Size: 0x4]
	float Thickness;//[Offset: 0x5f8, Size: 0x4]
	byte SegmentFlags;//[Offset: 0x5fc, Size: 0x1]

--------------------------------
Class: GizmoLambdaHitTarget.Object

--------------------------------
Class: GizmoComponentHitTarget.Object
	PrimitiveComponent* Component;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: InputBehaviorSource.Interface.Object

--------------------------------
Class: InputRouter.Object
	bool bAutoInvalidateOnHover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bAutoInvalidateOnCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	InputBehaviorSet* ActiveInputBehaviors;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: InteractionMechanic.Object

--------------------------------
Class: InteractiveGizmoManager.Object
	ActiveGizmo[] ActiveGizmos;//[Offset: 0x30, Size: 0x10]
	<FString,InteractiveGizmoBuilder*> GizmoBuilders;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: ActiveGizmo

--------------------------------
Class: ToolContextTransactionProvider.Interface.Object

--------------------------------
Class: InteractiveToolManager.Object
	InteractiveTool* ActiveLeftTool;//[Offset: 0x30, Size: 0x8]
	InteractiveTool* ActiveRightTool;//[Offset: 0x38, Size: 0x8]
	<FString,InteractiveToolBuilder*> ToolBuilders;//[Offset: 0x90, Size: 0x50]

--------------------------------
Class: ToolFrameworkComponent.Interface.Object

--------------------------------
Class: InteractiveToolsContext.Object
	InputRouter* InputRouter;//[Offset: 0x58, Size: 0x8]
	InteractiveToolManager* ToolManager;//[Offset: 0x60, Size: 0x8]
	InteractiveGizmoManager* GizmoManager;//[Offset: 0x68, Size: 0x8]
	class InteractiveToolManager* ToolManagerClass;//[Offset: 0x70, Size: 0x28]

--------------------------------
Class: IntervalGizmoActor.GizmoActor.InternalToolFrameworkActor.Actor.Object
	GizmoLineHandleComponent* UpIntervalComponent;//[Offset: 0x2e0, Size: 0x8]
	GizmoLineHandleComponent* DownIntervalComponent;//[Offset: 0x2e8, Size: 0x8]
	GizmoLineHandleComponent* ForwardIntervalComponent;//[Offset: 0x2f0, Size: 0x8]

--------------------------------
Class: IntervalGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: IntervalGizmo.InteractiveGizmo.Object
	GizmoTransformChangeStateTarget* StateTarget;//[Offset: 0x38, Size: 0x8]
	TransformProxy* TransformProxy;//[Offset: 0x50, Size: 0x8]
	PrimitiveComponent*[] ActiveComponents;//[Offset: 0x58, Size: 0x10]
	InteractiveGizmo*[] ActiveGizmos;//[Offset: 0x68, Size: 0x10]
	GizmoComponentAxisSource* AxisYSource;//[Offset: 0x90, Size: 0x8]
	GizmoComponentAxisSource* AxisZSource;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: GizmoTransformChangeStateTarget.Object
	interface class None* TransactionManager;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: TransformProxy.Object
	bool bRotatePerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bSetPivotMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	Transform SharedTransform;//[Offset: 0x90, Size: 0x30]
	Transform InitialSharedTransform;//[Offset: 0xc0, Size: 0x30]

--------------------------------
Class: GizmoBaseFloatParameterSource.Object

--------------------------------
Class: GizmoAxisIntervalParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* FloatParameterSource;//[Offset: 0x48, Size: 0x10]
	float MinParameter;//[Offset: 0x58, Size: 0x4]
	float MaxParameter;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: KeyAsModifierInputBehavior.InputBehavior.Object

--------------------------------
Class: MeshSurfacePointToolBuilder.InteractiveToolBuilder.Object

--------------------------------
Class: MouseHoverBehavior.InputBehavior.Object

--------------------------------
Class: MultiClickSequenceInputBehavior.AnyButtonInputBehavior.InputBehavior.Object

--------------------------------
Class: MultiSelectionTool.InteractiveTool.Object

--------------------------------
Class: GizmoLocalFloatParameterSource.GizmoBaseFloatParameterSource.Object
	float Value;//[Offset: 0x48, Size: 0x4]
	GizmoFloatParameterChange LastChange;//[Offset: 0x4c, Size: 0x8]

--------------------------------
Class: GizmoFloatParameterChange
	float InitialValue;//[Offset: 0x0, Size: 0x4]
	float CurrentValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GizmoBaseVec2ParameterSource.Object

--------------------------------
Class: GizmoLocalVec2ParameterSource.GizmoBaseVec2ParameterSource.Object
	Vector2D Value;//[Offset: 0x48, Size: 0x8]
	GizmoVec2ParameterChange LastChange;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: GizmoVec2ParameterChange
	Vector2D InitialValue;//[Offset: 0x0, Size: 0x8]
	Vector2D CurrentValue;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GizmoAxisTranslationParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10]
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10]
	float Parameter;//[Offset: 0xb0, Size: 0x4]
	GizmoFloatParameterChange LastChange;//[Offset: 0xb4, Size: 0x8]
	Vector CurTranslationAxis;//[Offset: 0xbc, Size: 0xc]
	Vector CurTranslationOrigin;//[Offset: 0xc8, Size: 0xc]
	Transform InitialTransform;//[Offset: 0xe0, Size: 0x30]

--------------------------------
Class: GizmoPlaneTranslationParameterSource.GizmoBaseVec2ParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10]
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10]
	Vector2D Parameter;//[Offset: 0xb0, Size: 0x8]
	GizmoVec2ParameterChange LastChange;//[Offset: 0xb8, Size: 0x10]
	Vector CurTranslationOrigin;//[Offset: 0xc8, Size: 0xc]
	Vector CurTranslationNormal;//[Offset: 0xd4, Size: 0xc]
	Vector CurTranslationAxisX;//[Offset: 0xe0, Size: 0xc]
	Vector CurTranslationAxisY;//[Offset: 0xec, Size: 0xc]
	Transform InitialTransform;//[Offset: 0x100, Size: 0x30]

--------------------------------
Class: GizmoAxisRotationParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10]
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10]
	float Angle;//[Offset: 0xb0, Size: 0x4]
	GizmoFloatParameterChange LastChange;//[Offset: 0xb4, Size: 0x8]
	Vector CurRotationAxis;//[Offset: 0xbc, Size: 0xc]
	Vector CurRotationOrigin;//[Offset: 0xc8, Size: 0xc]
	Transform InitialTransform;//[Offset: 0xe0, Size: 0x30]

--------------------------------
Class: GizmoUniformScaleParameterSource.GizmoBaseVec2ParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10]
	interface class None* TransformSource;//[Offset: 0x58, Size: 0x10]
	float ScaleMultiplier;//[Offset: 0x68, Size: 0x4]
	Vector2D Parameter;//[Offset: 0x6c, Size: 0x8]
	GizmoVec2ParameterChange LastChange;//[Offset: 0x74, Size: 0x10]
	Vector CurScaleOrigin;//[Offset: 0x84, Size: 0xc]
	Vector CurScaleNormal;//[Offset: 0x90, Size: 0xc]
	Vector CurScaleAxisX;//[Offset: 0x9c, Size: 0xc]
	Vector CurScaleAxisY;//[Offset: 0xa8, Size: 0xc]
	Transform InitialTransform;//[Offset: 0xc0, Size: 0x30]

--------------------------------
Class: GizmoAxisScaleParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10]
	interface class None* TransformSource;//[Offset: 0x58, Size: 0x10]
	float ScaleMultiplier;//[Offset: 0x68, Size: 0x4]
	float Parameter;//[Offset: 0x6c, Size: 0x4]
	GizmoFloatParameterChange LastChange;//[Offset: 0x70, Size: 0x8]
	Vector CurScaleAxis;//[Offset: 0x78, Size: 0xc]
	Vector CurScaleOrigin;//[Offset: 0x84, Size: 0xc]
	Transform InitialTransform;//[Offset: 0x90, Size: 0x30]

--------------------------------
Class: GizmoPlaneScaleParameterSource.GizmoBaseVec2ParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10]
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10]
	float ScaleMultiplier;//[Offset: 0xb0, Size: 0x4]
	Vector2D Parameter;//[Offset: 0xb4, Size: 0x8]
	GizmoVec2ParameterChange LastChange;//[Offset: 0xbc, Size: 0x10]
	Vector CurScaleOrigin;//[Offset: 0xcc, Size: 0xc]
	Vector CurScaleNormal;//[Offset: 0xd8, Size: 0xc]
	Vector CurScaleAxisX;//[Offset: 0xe4, Size: 0xc]
	Vector CurScaleAxisY;//[Offset: 0xf0, Size: 0xc]
	Transform InitialTransform;//[Offset: 0x100, Size: 0x30]

--------------------------------
Class: PlanePositionGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: PlanePositionGizmo.InteractiveGizmo.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10]
	interface class None* ParameterSource;//[Offset: 0x58, Size: 0x10]
	interface class None* HitTarget;//[Offset: 0x68, Size: 0x10]
	interface class None* StateTarget;//[Offset: 0x78, Size: 0x10]
	bool bEnableSignedAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bFlipX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	bool bFlipY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1]
	bool bInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b, Size: 0x1]
	Vector InteractionOrigin;//[Offset: 0x8c, Size: 0xc]
	Vector InteractionNormal;//[Offset: 0x98, Size: 0xc]
	Vector InteractionAxisX;//[Offset: 0xa4, Size: 0xc]
	Vector InteractionAxisY;//[Offset: 0xb0, Size: 0xc]
	Vector InteractionStartPoint;//[Offset: 0xbc, Size: 0xc]
	Vector InteractionCurPoint;//[Offset: 0xc8, Size: 0xc]
	Vector2D InteractionStartParameter;//[Offset: 0xd4, Size: 0x8]
	Vector2D InteractionCurParameter;//[Offset: 0xdc, Size: 0x8]
	Vector2D ParameterSigns;//[Offset: 0xe4, Size: 0x8]

--------------------------------
Class: SelectionSet.Object

--------------------------------
Class: MeshSelectionSet.SelectionSet.Object
	int[] Vertices;//[Offset: 0x40, Size: 0x10]
	int[] Edges;//[Offset: 0x50, Size: 0x10]
	int[] Faces;//[Offset: 0x60, Size: 0x10]
	int[] Groups;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: SingleClickInputBehavior.AnyButtonInputBehavior.InputBehavior.Object
	bool HitTestOnRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: SingleClickToolBuilder.InteractiveToolBuilder.Object

--------------------------------
Class: SingleClickTool.InteractiveTool.Object

--------------------------------
Class: GizmoNilStateTarget.Object

--------------------------------
Class: GizmoLambdaStateTarget.Object

--------------------------------
Class: GizmoObjectModifyStateTarget.Object

--------------------------------
Class: TransformGizmoActor.GizmoActor.InternalToolFrameworkActor.Actor.Object
	PrimitiveComponent* TranslateX;//[Offset: 0x2e0, Size: 0x8]
	PrimitiveComponent* TranslateY;//[Offset: 0x2e8, Size: 0x8]
	PrimitiveComponent* TranslateZ;//[Offset: 0x2f0, Size: 0x8]
	PrimitiveComponent* TranslateYZ;//[Offset: 0x2f8, Size: 0x8]
	PrimitiveComponent* TranslateXZ;//[Offset: 0x300, Size: 0x8]
	PrimitiveComponent* TranslateXY;//[Offset: 0x308, Size: 0x8]
	PrimitiveComponent* RotateX;//[Offset: 0x310, Size: 0x8]
	PrimitiveComponent* RotateY;//[Offset: 0x318, Size: 0x8]
	PrimitiveComponent* RotateZ;//[Offset: 0x320, Size: 0x8]
	PrimitiveComponent* UniformScale;//[Offset: 0x328, Size: 0x8]
	PrimitiveComponent* AxisScaleX;//[Offset: 0x330, Size: 0x8]
	PrimitiveComponent* AxisScaleY;//[Offset: 0x338, Size: 0x8]
	PrimitiveComponent* AxisScaleZ;//[Offset: 0x340, Size: 0x8]
	PrimitiveComponent* PlaneScaleYZ;//[Offset: 0x348, Size: 0x8]
	PrimitiveComponent* PlaneScaleXZ;//[Offset: 0x350, Size: 0x8]
	PrimitiveComponent* PlaneScaleXY;//[Offset: 0x358, Size: 0x8]

--------------------------------
Class: TransformGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: TransformGizmo.InteractiveGizmo.Object
	TransformProxy* ActiveTarget;//[Offset: 0x40, Size: 0x8]
	bool bSnapToWorldGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bGridSizeIsExplicit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	Vector ExplicitGridSize;//[Offset: 0x4c, Size: 0xc]
	bool bRotationGridSizeIsExplicit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	Rotator ExplicitRotationGridSize;//[Offset: 0x5c, Size: 0xc]
	bool bSnapToWorldRotGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bUseContextCoordinateSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	enum CurrentCoordinateSystem;//[Offset: 0x6c, Size: 0x4]
	PrimitiveComponent*[] ActiveComponents;//[Offset: 0x100, Size: 0x10]
	PrimitiveComponent*[] NonuniformScaleComponents;//[Offset: 0x110, Size: 0x10]
	InteractiveGizmo*[] ActiveGizmos;//[Offset: 0x120, Size: 0x10]
	GizmoConstantFrameAxisSource* CameraAxisSource;//[Offset: 0x140, Size: 0x8]
	GizmoComponentAxisSource* AxisXSource;//[Offset: 0x148, Size: 0x8]
	GizmoComponentAxisSource* AxisYSource;//[Offset: 0x150, Size: 0x8]
	GizmoComponentAxisSource* AxisZSource;//[Offset: 0x158, Size: 0x8]
	GizmoComponentAxisSource* UnitAxisXSource;//[Offset: 0x160, Size: 0x8]
	GizmoComponentAxisSource* UnitAxisYSource;//[Offset: 0x168, Size: 0x8]
	GizmoComponentAxisSource* UnitAxisZSource;//[Offset: 0x170, Size: 0x8]
	GizmoTransformChangeStateTarget* StateTarget;//[Offset: 0x178, Size: 0x8]
	GizmoScaledTransformSource* ScaledTransformSource;//[Offset: 0x180, Size: 0x8]

--------------------------------
Class: GizmoScaledTransformSource.GizmoBaseTransformSource.Object
	interface class None* ChildTransformSource;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: GizmoBaseTransformSource.Object

--------------------------------
Class: GizmoComponentWorldTransformSource.GizmoBaseTransformSource.Object
	SceneComponent* Component;//[Offset: 0x48, Size: 0x8]
	bool bModifyComponentOnTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: GizmoTransformProxyTransformSource.GizmoBaseTransformSource.Object
	TransformProxy* Proxy;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: NavArea_Default.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_LowHeight.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Null.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Obstacle.NavArea.NavAreaBase.Object

--------------------------------
Class: NavAreaMeta.NavArea.NavAreaBase.Object

--------------------------------
Class: NavAreaMeta_SwitchByAgent.NavAreaMeta.NavArea.NavAreaBase.Object
	class NavArea* Agent0Area;//[Offset: 0x48, Size: 0x8]
	class NavArea* Agent1Area;//[Offset: 0x50, Size: 0x8]
	class NavArea* Agent2Area;//[Offset: 0x58, Size: 0x8]
	class NavArea* Agent3Area;//[Offset: 0x60, Size: 0x8]
	class NavArea* Agent4Area;//[Offset: 0x68, Size: 0x8]
	class NavArea* Agent5Area;//[Offset: 0x70, Size: 0x8]
	class NavArea* Agent6Area;//[Offset: 0x78, Size: 0x8]
	class NavArea* Agent7Area;//[Offset: 0x80, Size: 0x8]
	class NavArea* Agent8Area;//[Offset: 0x88, Size: 0x8]
	class NavArea* Agent9Area;//[Offset: 0x90, Size: 0x8]
	class NavArea* Agent10Area;//[Offset: 0x98, Size: 0x8]
	class NavArea* Agent11Area;//[Offset: 0xa0, Size: 0x8]
	class NavArea* Agent12Area;//[Offset: 0xa8, Size: 0x8]
	class NavArea* Agent13Area;//[Offset: 0xb0, Size: 0x8]
	class NavArea* Agent14Area;//[Offset: 0xb8, Size: 0x8]
	class NavArea* Agent15Area;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: NavCollision.NavCollisionBase.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x80, Size: 0x10]
	NavCollisionBox[] BoxCollision;//[Offset: 0x90, Size: 0x10]
	class NavArea* AreaClass;//[Offset: 0xa0, Size: 0x8]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]
	float Height;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 0xc]
	Vector Extent;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: NavigationGraph.NavigationData.Actor.Object

--------------------------------
Class: NavigationGraphNode.Actor.Object

--------------------------------
Class: NavigationGraphNodeComponent.SceneComponent.ActorComponent.Object
	NavGraphNode Node;//[Offset: 0x208, Size: 0x18]
	NavigationGraphNodeComponent* NextNodeComponent;//[Offset: 0x220, Size: 0x8]
	NavigationGraphNodeComponent* PrevNodeComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: NavGraphNode
	Object* Owner;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xb8, Size: 0x4]
	float TileRemovalRadius;//[Offset: 0xbc, Size: 0x4]

--------------------------------
Class: NavigationPathGenerator.Interface.Object

--------------------------------
Class: NavigationTestingActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2f0, Size: 0x8]
	NavigationInvokerComponent* InvokerComponent;//[Offset: 0x2f8, Size: 0x8]
	bool bActAsNavigationInvoker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 0x1]
	NavAgentProperties NavAgentProps;//[Offset: 0x308, Size: 0x30]
	Vector QueryingExtent;//[Offset: 0x338, Size: 0xc]
	NavigationData* MyNavData;//[Offset: 0x348, Size: 0x8]
	Vector ProjectedLocation;//[Offset: 0x350, Size: 0xc]
	bool bProjectedLocationValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35c, Size: 0x1]
	bool bSearchStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35c, Size: 0x1]
	float CostLimitFactor;//[Offset: 0x360, Size: 0x4]
	float MinimumCostLimit;//[Offset: 0x364, Size: 0x4]
	bool bBacktracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 0x1]
	bool bUseHierarchicalPathfinding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x368, Size: 0x1]
	bool bGatherDetailedInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x368, Size: 0x1]
	bool bDrawDistanceToWall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x368, Size: 0x1]
	bool bShowNodePool;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x368, Size: 0x1]
	bool bShowBestPath;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x368, Size: 0x1]
	bool bShowDiffWithPreviousStep;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x368, Size: 0x1]
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x368, Size: 0x1]
	byte CostDisplayMode;//[Offset: 0x369, Size: 0x1]
	Vector2D TextCanvasOffset;//[Offset: 0x36c, Size: 0x8]
	bool bPathExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x374, Size: 0x1]
	bool bPathIsPartial;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x374, Size: 0x1]
	bool bPathSearchOutOfNodes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x374, Size: 0x1]
	float PathfindingTime;//[Offset: 0x378, Size: 0x4]
	float PathCost;//[Offset: 0x37c, Size: 0x4]
	int PathfindingSteps;//[Offset: 0x380, Size: 0x4]
	NavigationTestingActor* OtherActor;//[Offset: 0x388, Size: 0x8]
	class NavigationQueryFilter* FilterClass;//[Offset: 0x390, Size: 0x8]
	int ShowStepIndex;//[Offset: 0x398, Size: 0x4]
	float OffsetFromCornersDistance;//[Offset: 0x39c, Size: 0x4]

--------------------------------
Class: NavLinkCustomInterface.Interface.Object

--------------------------------
Class: NavLinkHostInterface.Interface.Object

--------------------------------
Class: NavLinkRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavLinkTrivial.NavLinkDefinition.Object

--------------------------------
Class: NavMeshRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0xe8, Size: 0x8]
	Vector FailsafeExtent;//[Offset: 0xf0, Size: 0xc]
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1]
	void SetAreaClass(class NavArea NewAreaClass);// 0x71eee3fee041

--------------------------------
Class: NavModifierVolume.Volume.Brush.Actor.Object
	class NavArea* AreaClass;//[Offset: 0x320, Size: 0x8]
	bool bMaskFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	void SetAreaClass(class NavArea NewAreaClass);// 0x71efe3fee041

--------------------------------
Class: NavNodeInterface.Interface.Object

--------------------------------
Class: NavSystemConfigOverride.Actor.Object
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x2e0, Size: 0x8]
	enum OverridePolicy;//[Offset: 0x2e8, Size: 0x1]
	bool bLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e9, Size: 0x1]

--------------------------------
Class: NavTestRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: RecastFilter_UseDefaultArea.NavigationQueryFilter.Object

--------------------------------
Class: RecastNavMeshDataChunk.NavigationDataChunk.Object

--------------------------------
Class: GameplayTask_ClaimResource.GameplayTask.Object
	GameplayTask_ClaimResource* ClaimResources(interface classNone InTaskOwner, class GameplayTaskResource[] ResourceClasses, const byte Priority, const FName TaskInstanceName);// 0x71f1e3fee041
	GameplayTask_ClaimResource* ClaimResource(interface classNone InTaskOwner, class GameplayTaskResource ResourceClass, const byte Priority, const FName TaskInstanceName);// 0x71f0e3fee041

--------------------------------
Class: GameplayTask_SpawnActor.GameplayTask.Object
	delegate Success;//[Offset: 0x60, Size: 0x10]
	delegate DidNotSpawn;//[Offset: 0x70, Size: 0x10]
	class Actor* ClassToSpawn;//[Offset: 0x98, Size: 0x8]
	GameplayTask_SpawnActor* SpawnActor(interface classNone TaskOwner, Vector SpawnLocation, Rotator SpawnRotation, class Actor Class, bool bSpawnOnlyOnAuthority);// 0x71f4e3fee041
	void FinishSpawningActor(Object* WorldContextObject, Actor* SpawnedActor);// 0x71f3e3fee041
	bool BeginSpawningActor(Object* WorldContextObject, out Actor* SpawnedActor);// 0x71f2e3fee041

--------------------------------
Class: GameplayTask_TimeLimitedExecution.GameplayTask.Object
	delegate OnFinished;//[Offset: 0x60, Size: 0x10]
	delegate OnTimeExpired;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: GameplayTask_WaitDelay.GameplayTask.Object
	delegate OnFinish;//[Offset: 0x60, Size: 0x10]
	GameplayTask_WaitDelay* TaskWaitDelay(interface classNone TaskOwner, float Time, const byte Priority);// 0x15bce3fee041
	void TaskDelayDelegate__DelegateSignature();// 0x15bbe3fee041

--------------------------------
Class: GameplayTaskOwnerInterface.Interface.Object

--------------------------------
Class: AIBlueprintHelperLibrary.BlueprintFunctionLibrary.Object
	void UnlockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bUnlockMovement, bool UnlockAILogic);// 0x7205e3fee041
	Pawn* SpawnAIFromClass(Object* WorldContextObject, class Pawn PawnClass, BehaviorTree* BehaviorTree, Vector Location, Rotator Rotation, bool bNoCollisionFail, Actor* Owner);// 0x7204e3fee041
	void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x7203e3fee041
	void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x7202e3fee041
	void SendAIMessage(Pawn* Target, FName Message, Object* MessageSource, bool bSuccess);// 0x7201e3fee041
	void LockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bLockMovement, bool LockAILogic);// 0x7200e3fee041
	bool IsValidAIRotation(Rotator Rotation);// 0x71ffe3fee041
	bool IsValidAILocation(Vector Location);// 0x71fee3fee041
	bool IsValidAIDirection(Vector DirectionVector);// 0x71fde3fee041
	int GetNextNavLinkIndex(const Controller* Controller);// 0x71fce3fee041
	Vector[] GetCurrentPathPoints(Controller* Controller);// 0x71fbe3fee041
	int GetCurrentPathIndex(const Controller* Controller);// 0x71fae3fee041
	NavigationPath* GetCurrentPath(Controller* Controller);// 0x71f9e3fee041
	BlackboardComponent* GetBlackboard(Actor* Target);// 0x71f8e3fee041
	AIController* GetAIController(Actor* ControlledActor);// 0x71f7e3fee041
	AIAsyncTaskBlueprintProxy* CreateMoveToProxyObject(Object* WorldContextObject, Pawn* Pawn, Vector Destination, Actor* TargetActor, float AcceptanceRadius, bool bStopOnOverlap);// 0x71f6e3fee041

--------------------------------
Class: AIDataProvider_QueryParams.AIDataProvider.Object
	FName ParamName;//[Offset: 0x28, Size: 0x8]
	float FloatValue;//[Offset: 0x30, Size: 0x4]
	int IntValue;//[Offset: 0x34, Size: 0x4]
	bool BoolValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: AIDataProvider_Random.AIDataProvider_QueryParams.AIDataProvider.Object
	float Min;//[Offset: 0x3c, Size: 0x4]
	float Max;//[Offset: 0x40, Size: 0x4]
	bool bInteger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: AIPerceptionListenerInterface.Interface.Object

--------------------------------
Class: AIPerceptionStimuliSourceComponent.ActorComponent.Object
	bool bAutoRegisterAsSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1]
	class AISense[] RegisterAsSourceForSenses;//[Offset: 0xc0, Size: 0x10]
	void UnregisterFromSense(class AISense SenseClass);// 0x7209e3fee041
	void UnregisterFromPerceptionSystem();// 0x7208e3fee041
	void RegisterWithPerceptionSystem();// 0x7207e3fee041
	void RegisterForSense(class AISense SenseClass);// 0x7206e3fee041

--------------------------------
Class: AIResourceInterface.Interface.Object

--------------------------------
Class: AIResource_Movement.GameplayTaskResource.Object

--------------------------------
Class: AIResource_Logic.GameplayTaskResource.Object

--------------------------------
Class: AISense_Blueprint.AISense.Object
	class UserDefinedStruct* ListenerDataType;//[Offset: 0x78, Size: 0x8]
	AIPerceptionComponent*[] ListenerContainer;//[Offset: 0x80, Size: 0x10]
	AISenseEvent*[] UnprocessedEvents;//[Offset: 0x90, Size: 0x10]
	float OnUpdate(out const AISenseEvent*[] EventsToProcess);// 0x7210e3fee041
	void OnListenerUpdated(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x720fe3fee041
	void OnListenerUnregistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x720ee3fee041
	void OnListenerRegistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x720de3fee041
	void K2_OnNewPawn(Pawn* NewPawn);// 0x720ce3fee041
	void GetAllListenerComponents(out AIPerceptionComponent*[] ListenerComponents);// 0x720be3fee041
	void GetAllListenerActors(out Actor*[] ListenerActors);// 0x720ae3fee041

--------------------------------
Class: AISense_Prediction.AISense.Object
	AIPredictionEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10]
	void RequestPawnPredictionEvent(Pawn* Requestor, Actor* PredictedActor, float PredictionTime);// 0x7213e3fee041
	void RequestControllerPredictionEvent(AIController* Requestor, Actor* PredictedActor, float PredictionTime);// 0x7212e3fee041

--------------------------------
Class: AIPredictionEvent
	Actor* Requestor;//[Offset: 0x0, Size: 0x8]
	Actor* PredictedActor;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AISense_Team.AISense.Object
	AITeamStimulusEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: AITeamStimulusEvent
	Actor* Broadcaster;//[Offset: 0x28, Size: 0x8]
	Actor* Enemy;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AISense_Touch.AISense.Object
	AITouchEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: AITouchEvent
	Actor* TouchReceiver;//[Offset: 0x10, Size: 0x8]
	Actor* OtherActor;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AISenseBlueprintListener.UserDefinedStruct.ScriptStruct.Struct.Field.Object

--------------------------------
Class: AISenseConfig_Blueprint.AISenseConfig.Object
	class AISense_Blueprint* Implementation;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: AISenseConfig_Prediction.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Team.AISenseConfig.Object

--------------------------------
Class: AISenseEvent_Damage.AISenseEvent.Object
	AIDamageEvent Event;//[Offset: 0x28, Size: 0x30]

--------------------------------
Class: AISenseEvent_Hearing.AISenseEvent.Object
	AINoiseEvent Event;//[Offset: 0x28, Size: 0x38]

--------------------------------
Class: AISightTargetInterface.Interface.Object

--------------------------------
Class: AITask.GameplayTask.Object
	AIController* OwnerController;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: AITask_LockLogic.AITask.GameplayTask.Object

--------------------------------
Class: AITask_MoveTo.AITask.GameplayTask.Object
	delegate OnRequestFailed;//[Offset: 0x68, Size: 0x10]
	delegate OnMoveFinished;//[Offset: 0x78, Size: 0x10]
	AIMoveRequest MoveRequest;//[Offset: 0x88, Size: 0x40]
	AITask_MoveTo* AIMoveTo(AIController* Controller, Vector GoalLocation, Actor* GoalActor, float AcceptanceRadius, byte StopOnOverlap, byte AcceptPartialPath, bool bUsePathfinding, bool bLockAILogic, bool bUseContinuosGoalTracking, byte ProjectGoalOnNavigation);// 0x7214e3fee041

--------------------------------
Class: AIMoveRequest
	Actor* GoalActor;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AITask_RunEQS.AITask.GameplayTask.Object
	AITask_RunEQS* RunEQS(AIController* Controller, EnvQuery* QueryTemplate);// 0x7215e3fee041

--------------------------------
Class: BehaviorTreeTypes.Object

--------------------------------
Class: BlackboardAssetProvider.Interface.Object
	BlackboardData* GetBlackboardAsset();// 0x721ee3fee041

--------------------------------
Class: BlackboardKeyType_Class.BlackboardKeyType.Object
	class Object* BaseClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: BlackboardKeyType_Enum.BlackboardKeyType.Object
	Enum* EnumType;//[Offset: 0x30, Size: 0x8]
	FString EnumName;//[Offset: 0x38, Size: 0x10]
	bool bIsEnumNameValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlackboardKeyType_Name.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_NativeEnum.BlackboardKeyType.Object
	FString EnumName;//[Offset: 0x30, Size: 0x10]
	Enum* EnumType;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: BlackboardKeyType_Rotator.BlackboardKeyType.Object

--------------------------------
Class: BTComposite_Selector.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_Sequence.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_SimpleParallel.BTCompositeNode.BTNode.Object
	byte FinishMode;//[Offset: 0x8c, Size: 0x1]

--------------------------------
Class: BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int IntValue;//[Offset: 0x88, Size: 0x4]
	float FloatValue;//[Offset: 0x8c, Size: 0x4]
	FString StringValue;//[Offset: 0x90, Size: 0x10]
	FString CachedDescription;//[Offset: 0xa0, Size: 0x10]
	byte OperationType;//[Offset: 0xb0, Size: 0x1]
	byte NotifyObserver;//[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: BTDecorator_CheckGameplayTagsOnActor.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector ActorToCheck;//[Offset: 0x60, Size: 0x28]
	enum TagsToMatch;//[Offset: 0x88, Size: 0x1]
	GameplayTagContainer GameplayTags;//[Offset: 0x90, Size: 0x20]
	FString CachedDescription;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: BTDecorator_ConditionalLoop.BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_ConeCheck.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4]
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28]
	BlackboardKeySelector ConeDirection;//[Offset: 0x88, Size: 0x28]
	BlackboardKeySelector Observed;//[Offset: 0xb0, Size: 0x28]

--------------------------------
Class: BTDecorator_DoesPathExist.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28]
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28]
	bool bUseSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	byte PathQueryType;//[Offset: 0xb1, Size: 0x1]
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: BTDecorator_ForceSuccess.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_IsAtLocation.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x88, Size: 0x4]
	AIDataProviderFloatValue ParametrizedAcceptableRadius;//[Offset: 0x90, Size: 0x38]
	enum GeometricDistanceType;//[Offset: 0xc8, Size: 0x1]
	bool bUseParametrizedRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc9, Size: 0x1]
	bool bUseNavAgentGoalLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc9, Size: 0x1]
	bool bPathFindingBasedTest;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc9, Size: 0x1]

--------------------------------
Class: BTDecorator_IsBBEntryOfClass.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	class Object* TestClass;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: BTDecorator_KeepInCone.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4]
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28]
	BlackboardKeySelector Observed;//[Offset: 0x88, Size: 0x28]
	bool bUseSelfAsOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseSelfAsObserved;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: BTDecorator_Loop.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int NumLoops;//[Offset: 0x5c, Size: 0x4]
	bool bInfiniteLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	float InfiniteLoopTimeoutTime;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: BTDecorator_ReachedMoveGoal.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_SetTagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8]
	float CooldownDuration;//[Offset: 0x64, Size: 0x4]
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTDecorator_TagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8]
	float CooldownDuration;//[Offset: 0x64, Size: 0x4]
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bActivatesCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]

--------------------------------
Class: BTDecorator_TimeLimit.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float TimeLimit;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: BTFunctionLibrary.BlueprintFunctionLibrary.Object
	void StopUsingExternalEvent(BTNode* NodeOwner);// 0x7251e3fee041
	void StartUsingExternalEvent(BTNode* NodeOwner, Actor* OwningActor);// 0x7250e3fee041
	void SetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key, Vector Value);// 0x724fe3fee041
	void SetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key, FString Value);// 0x724ee3fee041
	void SetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key, Rotator Value);// 0x724de3fee041
	void SetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key, Object* Value);// 0x724ce3fee041
	void SetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key, FName Value);// 0x724be3fee041
	void SetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key, int Value);// 0x724ae3fee041
	void SetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key, float Value);// 0x7249e3fee041
	void SetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key, byte Value);// 0x7248e3fee041
	void SetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key, class Object Value);// 0x7247e3fee041
	void SetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key, bool Value);// 0x7246e3fee041
	BlackboardComponent* GetOwnersBlackboard(BTNode* NodeOwner);// 0x7245e3fee041
	BehaviorTreeComponent* GetOwnerComponent(BTNode* NodeOwner);// 0x7244e3fee041
	Vector GetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x7243e3fee041
	FString GetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x7242e3fee041
	Rotator GetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x7241e3fee041
	Object* GetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x7240e3fee041
	FName GetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x723fe3fee041
	int GetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x723ee3fee041
	float GetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x723de3fee041
	byte GetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x723ce3fee041
	class Object GetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x723be3fee041
	bool GetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x723ae3fee041
	Actor* GetBlackboardValueAsActor(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x7239e3fee041
	void ClearBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x7238e3fee041
	void ClearBlackboardValue(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x7237e3fee041

--------------------------------
Class: BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x68, Size: 0x28]

--------------------------------
Class: BTService_DefaultFocus.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	byte FocusPriority;//[Offset: 0x90, Size: 0x1]

--------------------------------
Class: BTService_RunEQS.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0x90, Size: 0x48]

--------------------------------
Class: EQSParametrizedQueryExecutionRequest
	EnvQuery* QueryTemplate;//[Offset: 0x0, Size: 0x8]
	AIDynamicParam[] QueryConfig;//[Offset: 0x8, Size: 0x10]
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0x18, Size: 0x28]
	byte RunMode;//[Offset: 0x40, Size: 0x1]
	bool bUseBBKeyForQueryTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]

--------------------------------
Class: AIDynamicParam
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	enum ParamType;//[Offset: 0x8, Size: 0x1]
	float Value;//[Offset: 0xc, Size: 0x4]
	BlackboardKeySelector BBKey;//[Offset: 0x10, Size: 0x28]

--------------------------------
Class: BTTask_FinishWithResult.BTTaskNode.BTNode.Object
	byte Result;//[Offset: 0x69, Size: 0x1]

--------------------------------
Class: BTTask_GameplayTaskBase.BTTaskNode.BTNode.Object
	bool bWaitForGameplayTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1]

--------------------------------
Class: BTTask_MakeNoise.BTTaskNode.BTNode.Object
	float Loudnes;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: BTTask_MoveDirectlyToward.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool bDisablePathUpdateOnGoalLocationChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xae, Size: 0x1]
	bool bProjectVectorGoalToNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xae, Size: 0x1]
	bool bUpdatedDeprecatedProperties;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xae, Size: 0x1]

--------------------------------
Class: BTTask_PawnActionBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_PlayAnimation.BTTaskNode.BTNode.Object
	AnimationAsset* AnimationToPlay;//[Offset: 0x70, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	bool bNonBlocking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]
	BehaviorTreeComponent* MyOwnerComp;//[Offset: 0x80, Size: 0x8]
	SkeletalMeshComponent* CachedSkelMesh;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: BTTask_PlaySound.BTTaskNode.BTNode.Object
	SoundCue* SoundToPlay;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: BTTask_PushPawnAction.BTTask_PawnActionBase.BTTaskNode.BTNode.Object
	PawnAction* Action;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: BTTask_RotateToFaceBBEntry.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float Precision;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: BTTask_RunBehavior.BTTaskNode.BTNode.Object
	BehaviorTree* BehaviorAsset;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: BTTask_RunBehaviorDynamic.BTTaskNode.BTNode.Object
	GameplayTag InjectionTag;//[Offset: 0x6c, Size: 0x8]
	BehaviorTree* DefaultBehaviorAsset;//[Offset: 0x78, Size: 0x8]
	BehaviorTree* BehaviorAsset;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: BTTask_RunEQSQuery.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	EnvQuery* QueryTemplate;//[Offset: 0x98, Size: 0x8]
	EnvNamedValue[] QueryParams;//[Offset: 0xa0, Size: 0x10]
	AIDynamicParam[] QueryConfig;//[Offset: 0xb0, Size: 0x10]
	byte RunMode;//[Offset: 0xc0, Size: 0x1]
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0xc8, Size: 0x28]
	bool bUseBBKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0xf8, Size: 0x48]

--------------------------------
Class: EnvNamedValue
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	enum ParamType;//[Offset: 0x8, Size: 0x1]
	float Value;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BTTask_SetTagCooldown.BTTaskNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x6c, Size: 0x8]
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	float CooldownDuration;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: BTTask_Wait.BTTaskNode.BTNode.Object
	float WaitTime;//[Offset: 0x6c, Size: 0x4]
	float RandomDeviation;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: BTTask_WaitBlackboardTime.BTTask_Wait.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x78, Size: 0x28]

--------------------------------
Class: CrowdAgentInterface.Interface.Object

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	Vector CrowdAgentMoveDirection;//[Offset: 0x270, Size: 0xc]
	void SuspendCrowdSteering(bool bSuspend);// 0x7252e3fee041

--------------------------------
Class: CrowdManager.CrowdManagerBase.Object
	NavigationData* MyNavData;//[Offset: 0x28, Size: 0x8]
	CrowdAvoidanceConfig[] AvoidanceConfig;//[Offset: 0x30, Size: 0x10]
	CrowdAvoidanceSamplingPattern[] SamplingPatterns;//[Offset: 0x40, Size: 0x10]
	int MaxAgents;//[Offset: 0x50, Size: 0x4]
	float MaxAgentRadius;//[Offset: 0x54, Size: 0x4]
	int MaxAvoidedAgents;//[Offset: 0x58, Size: 0x4]
	int MaxAvoidedWalls;//[Offset: 0x5c, Size: 0x4]
	float NavmeshCheckInterval;//[Offset: 0x60, Size: 0x4]
	float PathOptimizationInterval;//[Offset: 0x64, Size: 0x4]
	float SeparationDirClamp;//[Offset: 0x68, Size: 0x4]
	float PathOffsetRadiusMultiplier;//[Offset: 0x6c, Size: 0x4]
	bool bResolveCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: CrowdAvoidanceConfig
	float VelocityBias;//[Offset: 0x0, Size: 0x4]
	float DesiredVelocityWeight;//[Offset: 0x4, Size: 0x4]
	float CurrentVelocityWeight;//[Offset: 0x8, Size: 0x4]
	float SideBiasWeight;//[Offset: 0xc, Size: 0x4]
	float ImpactTimeWeight;//[Offset: 0x10, Size: 0x4]
	float ImpactTimeRange;//[Offset: 0x14, Size: 0x4]
	byte CustomPatternIdx;//[Offset: 0x18, Size: 0x1]
	byte AdaptiveDivisions;//[Offset: 0x19, Size: 0x1]
	byte AdaptiveRings;//[Offset: 0x1a, Size: 0x1]
	byte AdaptiveDepth;//[Offset: 0x1b, Size: 0x1]

--------------------------------
Class: CrowdAvoidanceSamplingPattern
	float[] Angles;//[Offset: 0x0, Size: 0x10]
	float[] Radii;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: DetourCrowdAIController.AIController.Controller.Actor.Object

--------------------------------
Class: EnvQueryContext_BlueprintBase.EnvQueryContext.Object
	void ProvideSingleLocation(Object* QuerierObject, Actor* QuerierActor, out Vector ResultingLocation);// 0x7256e3fee041
	void ProvideSingleActor(Object* QuerierObject, Actor* QuerierActor, out Actor* ResultingActor);// 0x7255e3fee041
	void ProvideLocationsSet(Object* QuerierObject, Actor* QuerierActor, out Vector[] ResultingLocationSet);// 0x7254e3fee041
	void ProvideActorsSet(Object* QuerierObject, Actor* QuerierActor, out Actor*[] ResultingActorsSet);// 0x7253e3fee041

--------------------------------
Class: EnvQueryContext_Item.EnvQueryContext.Object

--------------------------------
Class: EnvQueryContext_Querier.EnvQueryContext.Object

--------------------------------
Class: EnvQueryDebugHelpers.Object

--------------------------------
Class: EnvQueryGenerator_ActorsOfClass.EnvQueryGenerator.EnvQueryNode.Object
	class Actor* SearchedActorClass;//[Offset: 0x50, Size: 0x8]
	AIDataProviderBoolValue GenerateOnlyActorsInRadius;//[Offset: 0x58, Size: 0x38]
	AIDataProviderFloatValue SearchRadius;//[Offset: 0x90, Size: 0x38]
	class EnvQueryContext* SearchCenter;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: EnvQueryGenerator_Composite.EnvQueryGenerator.EnvQueryNode.Object
	EnvQueryGenerator*[] Generators;//[Offset: 0x50, Size: 0x10]
	bool bAllowDifferentItemTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bHasMatchingItemType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	class EnvQueryItemType* ForcedItemType;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: EnvQueryGenerator_Cone.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue AlignedPointsDistance;//[Offset: 0x80, Size: 0x38]
	AIDataProviderFloatValue ConeDegrees;//[Offset: 0xb8, Size: 0x38]
	AIDataProviderFloatValue AngleStep;//[Offset: 0xf0, Size: 0x38]
	AIDataProviderFloatValue Range;//[Offset: 0x128, Size: 0x38]
	class EnvQueryContext* CenterActor;//[Offset: 0x160, Size: 0x8]
	bool bIncludeContextLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1]

--------------------------------
Class: EnvQueryGenerator_CurrentLocation.EnvQueryGenerator.EnvQueryNode.Object
	class EnvQueryContext* QueryContext;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: EnvQueryGenerator_Donut.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue InnerRadius;//[Offset: 0x80, Size: 0x38]
	AIDataProviderFloatValue OuterRadius;//[Offset: 0xb8, Size: 0x38]
	AIDataProviderIntValue NumberOfRings;//[Offset: 0xf0, Size: 0x38]
	AIDataProviderIntValue PointsPerRing;//[Offset: 0x128, Size: 0x38]
	EnvDirection ArcDirection;//[Offset: 0x160, Size: 0x20]
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x180, Size: 0x38]
	bool bUseSpiralPattern;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	class EnvQueryContext* Center;//[Offset: 0x1c0, Size: 0x8]
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c8, Size: 0x1]

--------------------------------
Class: EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue GridSize;//[Offset: 0x80, Size: 0x38]
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xb8, Size: 0x38]
	class EnvQueryContext* GenerateAround;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: EnvQueryGenerator_PathingGrid.EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderBoolValue PathToItem;//[Offset: 0xf8, Size: 0x38]
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x130, Size: 0x8]
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x138, Size: 0x38]

--------------------------------
Class: EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Actor.EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Direction.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Point.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest_Distance.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x1f1, Size: 0x1]
	class EnvQueryContext* DistanceTo;//[Offset: 0x1f8, Size: 0x8]

--------------------------------
Class: EnvQueryTest_Dot.EnvQueryTest.EnvQueryNode.Object
	EnvDirection LineA;//[Offset: 0x1f8, Size: 0x20]
	EnvDirection LineB;//[Offset: 0x218, Size: 0x20]
	enum TestMode;//[Offset: 0x238, Size: 0x1]
	bool bAbsoluteValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1]

--------------------------------
Class: EnvQueryTest_GameplayTags.EnvQueryTest.EnvQueryNode.Object
	GameplayTagQuery TagQueryToMatch;//[Offset: 0x1f8, Size: 0x48]
	bool bUpdatedToUseQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	enum TagsToMatch;//[Offset: 0x241, Size: 0x1]
	GameplayTagContainer GameplayTags;//[Offset: 0x248, Size: 0x20]

--------------------------------
Class: EnvQueryTest_Overlap.EnvQueryTest.EnvQueryNode.Object
	EnvOverlapData OverlapData;//[Offset: 0x1f4, Size: 0x1c]

--------------------------------
Class: EnvOverlapData
	float ExtentX;//[Offset: 0x0, Size: 0x4]
	float ExtentY;//[Offset: 0x4, Size: 0x4]
	float ExtentZ;//[Offset: 0x8, Size: 0x4]
	Vector ShapeOffset;//[Offset: 0xc, Size: 0xc]
	byte OverlapChannel;//[Offset: 0x18, Size: 0x1]
	byte OverlapShape;//[Offset: 0x19, Size: 0x1]
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1]
	bool bOverlapComplex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a, Size: 0x1]
	bool bSkipOverlapQuerier;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x1f1, Size: 0x1]
	class EnvQueryContext* Context;//[Offset: 0x1f8, Size: 0x8]
	AIDataProviderBoolValue PathFromContext;//[Offset: 0x200, Size: 0x38]
	AIDataProviderBoolValue SkipUnreachable;//[Offset: 0x238, Size: 0x38]
	class NavigationQueryFilter* FilterClass;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: EnvQueryTest_PathfindingBatch.EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x278, Size: 0x38]

--------------------------------
Class: EnvQueryTest_Project.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x1f8, Size: 0x30]

--------------------------------
Class: EnvQueryTest_Random.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: EnvQueryTest_Trace.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData TraceData;//[Offset: 0x1f8, Size: 0x30]
	AIDataProviderBoolValue TraceFromContext;//[Offset: 0x228, Size: 0x38]
	AIDataProviderFloatValue ItemHeightOffset;//[Offset: 0x260, Size: 0x38]
	AIDataProviderFloatValue ContextHeightOffset;//[Offset: 0x298, Size: 0x38]
	class EnvQueryContext* Context;//[Offset: 0x2d0, Size: 0x8]

--------------------------------
Class: EnvQueryTest_Volume.EnvQueryTest.EnvQueryNode.Object
	class EnvQueryContext* VolumeContext;//[Offset: 0x1f8, Size: 0x8]
	class Volume* VolumeClass;//[Offset: 0x200, Size: 0x8]
	bool bDoComplexVolumeTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1]

--------------------------------
Class: EnvQueryTypes.Object

--------------------------------
Class: EQSQueryResultSourceInterface.Interface.Object

--------------------------------
Class: EQSRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EQSTestingPawn.Character.Pawn.Actor.Object
	EnvQuery* QueryTemplate;//[Offset: 0x5a0, Size: 0x8]
	EnvNamedValue[] QueryParams;//[Offset: 0x5a8, Size: 0x10]
	AIDynamicParam[] QueryConfig;//[Offset: 0x5b8, Size: 0x10]
	float TimeLimitPerStep;//[Offset: 0x5c8, Size: 0x4]
	int StepToDebugDraw;//[Offset: 0x5cc, Size: 0x4]
	enum HighlightMode;//[Offset: 0x5d0, Size: 0x1]
	bool bDrawLabels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d1, Size: 0x1]
	bool bDrawFailedItems;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d1, Size: 0x1]
	bool bReRunQueryOnlyOnFinishedMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5d1, Size: 0x1]
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5d1, Size: 0x1]
	bool bTickDuringGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5d1, Size: 0x1]
	byte QueryingMode;//[Offset: 0x5d2, Size: 0x1]
	NavAgentProperties NavAgentProperties;//[Offset: 0x5d8, Size: 0x30]

--------------------------------
Class: GenericTeamAgentInterface.Interface.Object

--------------------------------
Class: GridPathAIController.AIController.Controller.Actor.Object

--------------------------------
Class: GridPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	NavLocalGridManager* GridManager;//[Offset: 0x258, Size: 0x8]

--------------------------------
Class: NavFilter_AIControllerDefault.NavigationQueryFilter.Object

--------------------------------
Class: PathFollowingManager.Object

--------------------------------
Class: PawnAction_BlueprintBase.PawnAction.Object
	void ActionTick(Pawn* ControlledPawn, float DeltaSeconds);// 0x7265e3fee041
	void ActionStart(Pawn* ControlledPawn);// 0x7264e3fee041
	void ActionResume(Pawn* ControlledPawn);// 0x7263e3fee041
	void ActionPause(Pawn* ControlledPawn);// 0x7262e3fee041
	void ActionFinished(Pawn* ControlledPawn, byte WithResult);// 0x7261e3fee041

--------------------------------
Class: PawnAction_Move.PawnAction.Object
	Actor* GoalActor;//[Offset: 0x98, Size: 0x8]
	Vector GoalLocation;//[Offset: 0xa0, Size: 0xc]
	float AcceptableRadius;//[Offset: 0xac, Size: 0x4]
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb0, Size: 0x8]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1]
	bool bFinishOnOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1]
	bool bUsePathfinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 0x1]
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb8, Size: 0x1]
	bool bProjectGoalToNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb8, Size: 0x1]
	bool bUpdatePathToGoal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb8, Size: 0x1]
	bool bAbortChildActionOnPathChange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb8, Size: 0x1]

--------------------------------
Class: PawnAction_Repeat.PawnAction.Object
	PawnAction* ActionToRepeat;//[Offset: 0x98, Size: 0x8]
	PawnAction* RecentActionCopy;//[Offset: 0xa0, Size: 0x8]
	byte ChildFailureHandlingMode;//[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: PawnAction_Sequence.PawnAction.Object
	PawnAction*[] ActionSequence;//[Offset: 0x98, Size: 0x10]
	byte ChildFailureHandlingMode;//[Offset: 0xa8, Size: 0x1]
	PawnAction* RecentActionCopy;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: PawnAction_Wait.PawnAction.Object
	float TimeToWait;//[Offset: 0x94, Size: 0x4]

--------------------------------
Class: PawnSensingComponent.ActorComponent.Object
	float HearingThreshold;//[Offset: 0xb8, Size: 0x4]
	float LOSHearingThreshold;//[Offset: 0xbc, Size: 0x4]
	float SightRadius;//[Offset: 0xc0, Size: 0x4]
	float SensingInterval;//[Offset: 0xc4, Size: 0x4]
	float HearingMaxSoundAge;//[Offset: 0xc8, Size: 0x4]
	bool bEnableSensingUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1]
	bool bOnlySensePlayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcc, Size: 0x1]
	bool bSeePawns;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xcc, Size: 0x1]
	bool bHearNoises;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xcc, Size: 0x1]
	delegate OnSeePawn;//[Offset: 0xd8, Size: 0x10]
	delegate OnHearNoise;//[Offset: 0xe8, Size: 0x10]
	float PeripheralVisionAngle;//[Offset: 0xf8, Size: 0x4]
	float PeripheralVisionCosine;//[Offset: 0xfc, Size: 0x4]
	void SetSensingUpdatesEnabled(const bool bEnabled);// 0x1bb0e3fee041
	void SetSensingInterval(const float NewSensingInterval);// 0x1bafe3fee041
	void SetPeripheralVisionAngle(const float NewPeripheralVisionAngle);// 0x1baee3fee041
	void SeePawnDelegate__DelegateSignature(Pawn* Pawn);// 0x1bade3fee041
	void HearNoiseDelegate__DelegateSignature(Pawn* Instigator, out const Vector Location, float Volume);// 0x1bace3fee041
	float GetPeripheralVisionCosine();// 0x1babe3fee041
	float GetPeripheralVisionAngle();// 0x1baae3fee041

--------------------------------
Class: VisualLoggerExtension.Object

--------------------------------
Class: MFGlobalEventParameterTagsDeveloperSettings.DeveloperSettings.Object
	FString DeveloperConfigName;//[Offset: 0x38, Size: 0x10]
	FName FavoriteTagSource;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: MFGlobalEventTagsManager.Object
	MFGlobalEventTagSource[] TagSources;//[Offset: 0xc0, Size: 0x10]
	DataTable*[] MFGlobalEventTagTables;//[Offset: 0x1b0, Size: 0x10]

--------------------------------
Class: MFGlobalEventTagSource
	FName SourceName;//[Offset: 0x0, Size: 0x8]
	enum SourceType;//[Offset: 0x8, Size: 0x1]
	MFGlobalEventTagsList* SourceTagList;//[Offset: 0x10, Size: 0x8]
	RestrictedMFGlobalEventTagsList* SourceRestrictedTagList;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: MFGlobalEventTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10]
	MFGlobalEvent[] MFGlobalEventTagList;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MFGlobalEvent.TableRowBase
	FName Tag;//[Offset: 0x8, Size: 0x8]
	FString DevComment;//[Offset: 0x10, Size: 0x10]
	MFGlobalEventParameter[] Parameters;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: RestrictedMFGlobalEventTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10]
	RestrictedMFGlobalEventTagTableRow[] RestrictedMFGlobalEventTagList;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: RestrictedMFGlobalEventTagTableRow.MFGlobalEvent.TableRowBase
	bool bAllowNonRestrictedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MFGlobalEventTagsSettings.MFGlobalEventTagsList.Object
	bool ImportTagsFromConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool WarnOnInvalidTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool FastReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	FString InvalidTagCharacters;//[Offset: 0x50, Size: 0x10]
	MFGlobalEventTagCategoryRemap[] CategoryRemapping;//[Offset: 0x60, Size: 0x10]
	SoftObjectPath[] MFGlobalEventTagTableList;//[Offset: 0x70, Size: 0x10]
	MFGlobalEventTagRedirect[] MFGlobalEventTagRedirects;//[Offset: 0x80, Size: 0x10]
	FName[] CommonlyReplicatedTags;//[Offset: 0x90, Size: 0x10]
	int NumBitsForContainerSize;//[Offset: 0xa0, Size: 0x4]
	int NetIndexFirstBitSegment;//[Offset: 0xa4, Size: 0x4]
	RestrictedMFGlobalEventConfigInfo[] RestrictedConfigFiles;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: MFGlobalEventTagCategoryRemap
	FString BaseCategory;//[Offset: 0x0, Size: 0x10]
	FString[] RemapCategories;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MFGlobalEventTagRedirect
	FName OldTagName;//[Offset: 0x0, Size: 0x8]
	FName NewTagName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: RestrictedMFGlobalEventConfigInfo
	FString RestrictedConfigName;//[Offset: 0x0, Size: 0x10]
	FString[] Owners;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MFGlobalEventTagsDeveloperSettings.DeveloperSettings.Object
	FString DeveloperConfigName;//[Offset: 0x38, Size: 0x10]
	FName FavoriteTagSource;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: ChaosDebugDrawComponent.ActorComponent.Object

--------------------------------
Class: ChaosEventListenerComponent.ActorComponent.Object

--------------------------------
Class: ChaosGameplayEventDispatcher.ChaosEventListenerComponent.ActorComponent.Object
	<PrimitiveComponent*,ChaosHandlerSet> CollisionEventRegistrations;//[Offset: 0x1d0, Size: 0x50]
	<PrimitiveComponent*,BreakEventCallbackWrapper> BreakEventRegistrations;//[Offset: 0x220, Size: 0x50]

--------------------------------
Class: ChaosHandlerSet
	<Object*> ChaosHandlers;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: BreakEventCallbackWrapper

--------------------------------
Class: ChaosNotifyHandlerInterface.Interface.Object

--------------------------------
Class: ChaosSolverEngineBlueprintLibrary.BlueprintFunctionLibrary.Object
	HitResult ConvertPhysicsCollisionToHitResult(out const ChaosPhysicsCollisionInfo PhysicsCollision);// 0x726ae3fee041

--------------------------------
Class: ChaosPhysicsCollisionInfo
	PrimitiveComponent* Component;//[Offset: 0x0, Size: 0x8]
	PrimitiveComponent* OtherComponent;//[Offset: 0x8, Size: 0x8]
	Vector Location;//[Offset: 0x10, Size: 0xc]
	Vector Normal;//[Offset: 0x1c, Size: 0xc]
	Vector AccumulatedImpulse;//[Offset: 0x28, Size: 0xc]
	Vector Velocity;//[Offset: 0x34, Size: 0xc]
	Vector OtherVelocity;//[Offset: 0x40, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0x4c, Size: 0xc]
	Vector OtherAngularVelocity;//[Offset: 0x58, Size: 0xc]
	float Mass;//[Offset: 0x64, Size: 0x4]
	float OtherMass;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: ChaosSolver.Object

--------------------------------
Class: ChaosSolverActor.Actor.Object
	ChaosSolverConfiguration Properties;//[Offset: 0x2e0, Size: 0x68]
	float TimeStepMultiplier;//[Offset: 0x348, Size: 0x4]
	int CollisionIterations;//[Offset: 0x34c, Size: 0x4]
	int PushOutIterations;//[Offset: 0x350, Size: 0x4]
	int PushOutPairIterations;//[Offset: 0x354, Size: 0x4]
	float ClusterConnectionFactor;//[Offset: 0x358, Size: 0x4]
	enum ClusterUnionConnectionType;//[Offset: 0x35c, Size: 0x1]
	bool DoGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d, Size: 0x1]
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x360, Size: 0x10]
	bool DoGenerateBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x374, Size: 0x10]
	bool DoGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 0x1]
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x388, Size: 0x10]
	float MassScale;//[Offset: 0x398, Size: 0x4]
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1]
	bool bHasFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 0x1]
	float FloorHeight;//[Offset: 0x3a0, Size: 0x4]
	ChaosDebugSubstepControl ChaosDebugSubstepControl;//[Offset: 0x3a4, Size: 0x3]
	BillboardComponent* SpriteComponent;//[Offset: 0x3a8, Size: 0x8]
	ChaosGameplayEventDispatcher* GameplayEventDispatcherComponent;//[Offset: 0x3c8, Size: 0x8]
	void SetSolverActive(bool bActive);// 0x726ce3fee041
	void SetAsCurrentWorldSolver();// 0x726be3fee041

--------------------------------
Class: ChaosDebugSubstepControl
	bool bPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bSubstep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: ChaosSolverSettings.DeveloperSettings.Object
	SoftClassPath DefaultChaosSolverActorClass;//[Offset: 0x40, Size: 0x18]

--------------------------------
Class: FieldSystemActor.Actor.Object
	FieldSystemComponent* FieldSystemComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: FieldSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FieldSystem* FieldSystem;//[Offset: 0x5b0, Size: 0x8]
	ChaosSolverActor*[] SupportedSolvers;//[Offset: 0x5c8, Size: 0x10]
	void ResetFieldSystem();// 0x7275e3fee041
	void ApplyUniformVectorFalloffForce(bool Enabled, Vector position, Vector Direction, float Radius, float Magnitude);// 0x7274e3fee041
	void ApplyStrainField(bool Enabled, Vector position, float Radius, float Magnitude, int Iterations);// 0x7273e3fee041
	void ApplyStayDynamicField(bool Enabled, Vector position, float Radius);// 0x7272e3fee041
	void ApplyRadialVectorFalloffForce(bool Enabled, Vector position, float Radius, float Magnitude);// 0x7271e3fee041
	void ApplyRadialForce(bool Enabled, Vector position, float Magnitude);// 0x7270e3fee041
	void ApplyPhysicsField(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x726fe3fee041
	void ApplyLinearForce(bool Enabled, Vector Direction, float Magnitude);// 0x726ee3fee041
	void AddFieldCommand(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x726de3fee041

--------------------------------
Class: FieldSystem.Object

--------------------------------
Class: FieldSystemMetaData.ActorComponent.Object

--------------------------------
Class: FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldSystemMetaDataIteration.FieldSystemMetaData.ActorComponent.Object
	int Iterations;//[Offset: 0xb8, Size: 0x4]
	FieldSystemMetaDataIteration* SetMetaDataIteration(int Iterations);// 0x7276e3fee041

--------------------------------
Class: FieldSystemMetaDataProcessingResolution.FieldSystemMetaData.ActorComponent.Object
	byte ResolutionType;//[Offset: 0xb8, Size: 0x1]
	FieldSystemMetaDataProcessingResolution* SetMetaDataaProcessingResolutionType(byte ResolutionType);// 0x7277e3fee041

--------------------------------
Class: FieldNodeInt.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldNodeFloat.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldNodeVector.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: UniformInteger.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	int Magnitude;//[Offset: 0xb8, Size: 0x4]
	UniformInteger* SetUniformInteger(int Magnitude);// 0x7278e3fee041

--------------------------------
Class: RadialIntMask.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	float Radius;//[Offset: 0xb8, Size: 0x4]
	Vector position;//[Offset: 0xbc, Size: 0xc]
	int InteriorValue;//[Offset: 0xc8, Size: 0x4]
	int ExteriorValue;//[Offset: 0xcc, Size: 0x4]
	byte SetMaskCondition;//[Offset: 0xd0, Size: 0x1]
	RadialIntMask* SetRadialIntMask(float Radius, Vector position, int InteriorValue, int ExteriorValue, byte SetMaskConditionIn);// 0x7279e3fee041

--------------------------------
Class: UniformScalar.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb8, Size: 0x4]
	UniformScalar* SetUniformScalar(float Magnitude);// 0x727ae3fee041

--------------------------------
Class: RadialFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb8, Size: 0x4]
	float MinRange;//[Offset: 0xbc, Size: 0x4]
	float MaxRange;//[Offset: 0xc0, Size: 0x4]
	float Default;//[Offset: 0xc4, Size: 0x4]
	float Radius;//[Offset: 0xc8, Size: 0x4]
	Vector position;//[Offset: 0xcc, Size: 0xc]
	byte Falloff;//[Offset: 0xd8, Size: 0x1]
	RadialFalloff* SetRadialFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Radius, Vector position, byte Falloff);// 0x727be3fee041

--------------------------------
Class: PlaneFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb8, Size: 0x4]
	float MinRange;//[Offset: 0xbc, Size: 0x4]
	float MaxRange;//[Offset: 0xc0, Size: 0x4]
	float Default;//[Offset: 0xc4, Size: 0x4]
	float Distance;//[Offset: 0xc8, Size: 0x4]
	Vector position;//[Offset: 0xcc, Size: 0xc]
	Vector Normal;//[Offset: 0xd8, Size: 0xc]
	byte Falloff;//[Offset: 0xe4, Size: 0x1]
	PlaneFalloff* SetPlaneFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Distance, Vector position, Vector Normal, byte Falloff);// 0x727ce3fee041

--------------------------------
Class: BoxFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb8, Size: 0x4]
	float MinRange;//[Offset: 0xbc, Size: 0x4]
	float MaxRange;//[Offset: 0xc0, Size: 0x4]
	float Default;//[Offset: 0xc4, Size: 0x4]
	Transform Transform;//[Offset: 0xd0, Size: 0x30]
	byte Falloff;//[Offset: 0x100, Size: 0x1]
	BoxFalloff* SetBoxFalloff(float Magnitude, float MinRange, float MaxRange, float Default, Transform Transform, byte Falloff);// 0x727de3fee041

--------------------------------
Class: NoiseField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float MinRange;//[Offset: 0xb8, Size: 0x4]
	float MaxRange;//[Offset: 0xbc, Size: 0x4]
	Transform Transform;//[Offset: 0xc0, Size: 0x30]
	NoiseField* SetNoiseField(float MinRange, float MaxRange, Transform Transform);// 0x727ee3fee041

--------------------------------
Class: UniformVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb8, Size: 0x4]
	Vector Direction;//[Offset: 0xbc, Size: 0xc]
	UniformVector* SetUniformVector(float Magnitude, Vector Direction);// 0x727fe3fee041

--------------------------------
Class: RadialVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb8, Size: 0x4]
	Vector position;//[Offset: 0xbc, Size: 0xc]
	RadialVector* SetRadialVector(float Magnitude, Vector position);// 0x7280e3fee041

--------------------------------
Class: RandomVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb8, Size: 0x4]
	RandomVector* SetRandomVector(float Magnitude);// 0x7281e3fee041

--------------------------------
Class: OperatorField.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb8, Size: 0x4]
	FieldNodeBase* RightField;//[Offset: 0xc0, Size: 0x8]
	FieldNodeBase* LeftField;//[Offset: 0xc8, Size: 0x8]
	byte Operation;//[Offset: 0xd0, Size: 0x1]
	OperatorField* SetOperatorField(float Magnitude, const FieldNodeBase* RightField, const FieldNodeBase* LeftField, byte Operation);// 0x7282e3fee041

--------------------------------
Class: ToIntegerField.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	FieldNodeFloat* FloatField;//[Offset: 0xb8, Size: 0x8]
	ToIntegerField* SetToIntegerField(const FieldNodeFloat* FloatField);// 0x7283e3fee041

--------------------------------
Class: ToFloatField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	FieldNodeInt* IntField;//[Offset: 0xb8, Size: 0x8]
	ToFloatField* SetToFloatField(const FieldNodeInt* IntegerField);// 0x7284e3fee041

--------------------------------
Class: CullingField.FieldNodeBase.ActorComponent.Object
	FieldNodeBase* Culling;//[Offset: 0xb8, Size: 0x8]
	FieldNodeBase* Field;//[Offset: 0xc0, Size: 0x8]
	byte Operation;//[Offset: 0xc8, Size: 0x1]
	CullingField* SetCullingField(const FieldNodeBase* Culling, const FieldNodeBase* Field, byte Operation);// 0x7285e3fee041

--------------------------------
Class: ReturnResultsTerminal.FieldNodeBase.ActorComponent.Object
	ReturnResultsTerminal* SetReturnResultsTerminal();// 0x7286e3fee041

--------------------------------
Class: ChaosDestructionListener.SceneComponent.ActorComponent.Object
	bool bIsCollisionEventListeningEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x202, Size: 0x1]
	bool bIsBreakingEventListeningEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x202, Size: 0x1]
	bool bIsTrailingEventListeningEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x202, Size: 0x1]
	ChaosCollisionEventRequestSettings CollisionEventRequestSettings;//[Offset: 0x204, Size: 0x18]
	ChaosBreakingEventRequestSettings BreakingEventRequestSettings;//[Offset: 0x21c, Size: 0x18]
	ChaosTrailingEventRequestSettings TrailingEventRequestSettings;//[Offset: 0x234, Size: 0x18]
	<ChaosSolverActor*> ChaosSolverActors;//[Offset: 0x250, Size: 0x50]
	<GeometryCollectionActor*> GeometryCollectionActors;//[Offset: 0x2a0, Size: 0x50]
	delegate OnCollisionEvents;//[Offset: 0x2f0, Size: 0x10]
	delegate OnBreakingEvents;//[Offset: 0x300, Size: 0x10]
	delegate OnTrailingEvents;//[Offset: 0x310, Size: 0x10]
	void SortTrailingEvents(out ChaosTrailingEventData[] TrailingEvents, enum SortMethod);// 0x7294e3fee041
	void SortCollisionEvents(out ChaosCollisionEventData[] CollisionEvents, enum SortMethod);// 0x7293e3fee041
	void SortBreakingEvents(out ChaosBreakingEventData[] BreakingEvents, enum SortMethod);// 0x7292e3fee041
	void SetTrailingEventRequestSettings(out const ChaosTrailingEventRequestSettings InSettings);// 0x7291e3fee041
	void SetTrailingEventEnabled(bool bIsEnabled);// 0x7290e3fee041
	void SetCollisionEventRequestSettings(out const ChaosCollisionEventRequestSettings InSettings);// 0x728fe3fee041
	void SetCollisionEventEnabled(bool bIsEnabled);// 0x728ee3fee041
	void SetBreakingEventRequestSettings(out const ChaosBreakingEventRequestSettings InSettings);// 0x728de3fee041
	void SetBreakingEventEnabled(bool bIsEnabled);// 0x728ce3fee041
	void RemoveGeometryCollectionActor(GeometryCollectionActor* GeometryCollectionActor);// 0x728be3fee041
	void RemoveChaosSolverActor(ChaosSolverActor* ChaosSolverActor);// 0x728ae3fee041
	bool IsEventListening();// 0x7289e3fee041
	void AddGeometryCollectionActor(GeometryCollectionActor* GeometryCollectionActor);// 0x7288e3fee041
	void AddChaosSolverActor(ChaosSolverActor* ChaosSolverActor);// 0x7287e3fee041

--------------------------------
Class: ChaosTrailingEventData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0x18, Size: 0xc]
	float Mass;//[Offset: 0x24, Size: 0x4]
	int ParticleIndex;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ChaosCollisionEventData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Normal;//[Offset: 0xc, Size: 0xc]
	Vector Velocity1;//[Offset: 0x18, Size: 0xc]
	Vector Velocity2;//[Offset: 0x24, Size: 0xc]
	float Mass1;//[Offset: 0x30, Size: 0x4]
	float Mass2;//[Offset: 0x34, Size: 0x4]
	Vector Impulse;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: ChaosBreakingEventData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float Mass;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ChaosCollisionEventRequestSettings
	int MaxNumberResults;//[Offset: 0x0, Size: 0x4]
	float MinMass;//[Offset: 0x4, Size: 0x4]
	float MinSpeed;//[Offset: 0x8, Size: 0x4]
	float MinImpulse;//[Offset: 0xc, Size: 0x4]
	float MaxDistance;//[Offset: 0x10, Size: 0x4]
	enum SortMethod;//[Offset: 0x14, Size: 0x1]

--------------------------------
Class: ChaosBreakingEventRequestSettings
	int MaxNumberOfResults;//[Offset: 0x0, Size: 0x4]
	float MinRadius;//[Offset: 0x4, Size: 0x4]
	float MinSpeed;//[Offset: 0x8, Size: 0x4]
	float MinMass;//[Offset: 0xc, Size: 0x4]
	float MaxDistance;//[Offset: 0x10, Size: 0x4]
	enum SortMethod;//[Offset: 0x14, Size: 0x1]

--------------------------------
Class: ChaosTrailingEventRequestSettings
	int MaxNumberOfResults;//[Offset: 0x0, Size: 0x4]
	float MinMass;//[Offset: 0x4, Size: 0x4]
	float MinSpeed;//[Offset: 0x8, Size: 0x4]
	float MinAngularSpeed;//[Offset: 0xc, Size: 0x4]
	float MaxDistance;//[Offset: 0x10, Size: 0x4]
	enum SortMethod;//[Offset: 0x14, Size: 0x1]

--------------------------------
Class: GeometryCollectionActor.Actor.Object
	GeometryCollectionComponent* GeometryCollectionComponent;//[Offset: 0x2e0, Size: 0x8]
	GeometryCollectionDebugDrawComponent* GeometryCollectionDebugDrawComponent;//[Offset: 0x2e8, Size: 0x8]
	bool RaycastSingle(Vector Start, Vector End, out HitResult OutHit);// 0x7295e3fee041

--------------------------------
Class: GeometryCollectionComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ChaosSolverActor* ChaosSolverActor;//[Offset: 0x5f0, Size: 0x8]
	GeometryCollection* RestCollection;//[Offset: 0x6d8, Size: 0x8]
	FieldSystemActor*[] InitializationFields;//[Offset: 0x6e0, Size: 0x10]
	bool Simulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]
	enum ObjectType;//[Offset: 0x6f8, Size: 0x1]
	bool EnableClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f9, Size: 0x1]
	int ClusterGroupIndex;//[Offset: 0x6fc, Size: 0x4]
	int MaxClusterLevel;//[Offset: 0x700, Size: 0x4]
	float[] DamageThreshold;//[Offset: 0x708, Size: 0x10]
	enum ClusterConnectionType;//[Offset: 0x718, Size: 0x1]
	int CollisionGroup;//[Offset: 0x71c, Size: 0x4]
	float CollisionSampleFraction;//[Offset: 0x720, Size: 0x4]
	float LinearEtherDrag;//[Offset: 0x724, Size: 0x4]
	float AngularEtherDrag;//[Offset: 0x728, Size: 0x4]
	ChaosPhysicalMaterial* PhysicalMaterial;//[Offset: 0x730, Size: 0x8]
	enum InitialVelocityType;//[Offset: 0x738, Size: 0x1]
	Vector InitialLinearVelocity;//[Offset: 0x73c, Size: 0xc]
	Vector InitialAngularVelocity;//[Offset: 0x748, Size: 0xc]
	PhysicalMaterial* PhysicalMaterialOverride;//[Offset: 0x758, Size: 0x8]
	GeomComponentCacheParameters CacheParameters;//[Offset: 0x760, Size: 0x50]
	delegate NotifyGeometryCollectionPhysicsStateChange;//[Offset: 0x7b0, Size: 0x10]
	delegate NotifyGeometryCollectionPhysicsLoadingStateChange;//[Offset: 0x7c0, Size: 0x10]
	delegate OnChaosBreakEvent;//[Offset: 0x7e8, Size: 0x10]
	float DesiredCacheTime;//[Offset: 0x7f8, Size: 0x4]
	bool CachePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fc, Size: 0x1]
	delegate OnChaosPhysicsCollision;//[Offset: 0x800, Size: 0x10]
	bool bNotifyBreaks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 0x1]
	bool bNotifyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x811, Size: 0x1]
	bool bEnableReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x812, Size: 0x1]
	bool bEnableAbandonAfterLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x813, Size: 0x1]
	int ReplicationAbandonClusterLevel;//[Offset: 0x814, Size: 0x4]
	GeometryCollectionRepData RepData;//[Offset: 0x818, Size: 0x18]
	BodySetup* DummyBodySetup;//[Offset: 0xa40, Size: 0x8]
	void SetNotifyBreaks(bool bNewNotifyBreaks);// 0x229ae3fee041
	void ReceivePhysicsCollision(out const ChaosPhysicsCollisionInfo CollisionInfo);// 0x2299e3fee041
	void OnRep_RepData(out const GeometryCollectionRepData OldData);// 0x2297e3fee041
	void NotifyGeometryCollectionPhysicsStateChange__DelegateSignature(GeometryCollectionComponent* FracturedComponent);// 0x2296e3fee041
	void NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature(GeometryCollectionComponent* FracturedComponent);// 0x2295e3fee041
	void NetAbandonCluster(int TransformIndex);// 0x2294e3fee041
	void ApplyPhysicsField(bool Enabled, enum Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x2293e3fee041
	void ApplyKinematicField(float Radius, Vector position);// 0x2292e3fee041

--------------------------------
Class: GeometryCollectionRepData

--------------------------------
Class: GeomComponentCacheParameters
	enum CacheMode;//[Offset: 0x0, Size: 0x1]
	GeometryCollectionCache* TargetCache;//[Offset: 0x8, Size: 0x8]
	float ReverseCacheBeginTime;//[Offset: 0x10, Size: 0x4]
	bool SaveCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool DoGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	int CollisionDataSizeMax;//[Offset: 0x18, Size: 0x4]
	bool DoCollisionDataSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float CollisionDataSpatialHashRadius;//[Offset: 0x20, Size: 0x4]
	int MaxCollisionPerCell;//[Offset: 0x24, Size: 0x4]
	bool SaveBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool DoGenerateBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	int BreakingDataSizeMax;//[Offset: 0x2c, Size: 0x4]
	bool DoBreakingDataSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float BreakingDataSpatialHashRadius;//[Offset: 0x34, Size: 0x4]
	int MaxBreakingPerCell;//[Offset: 0x38, Size: 0x4]
	bool SaveTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool DoGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	int TrailingDataSizeMax;//[Offset: 0x40, Size: 0x4]
	float TrailingMinSpeedThreshold;//[Offset: 0x44, Size: 0x4]
	float TrailingMinVolumeThreshold;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: GeometryCollectionCache.Object
	RecordedTransformTrack RecordedData;//[Offset: 0x28, Size: 0x10]
	GeometryCollection* SupportedCollection;//[Offset: 0x38, Size: 0x8]
	Guid CompatibleCollectionState;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: RecordedTransformTrack
	RecordedFrame[] Records;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RecordedFrame
	Transform[] Transforms;//[Offset: 0x0, Size: 0x10]
	int[] TransformIndices;//[Offset: 0x10, Size: 0x10]
	int[] PreviousTransformIndices;//[Offset: 0x20, Size: 0x10]
	bool[] DisabledFlags;//[Offset: 0x30, Size: 0x10]
	SolverCollisionData[] Collisions;//[Offset: 0x40, Size: 0x10]
	SolverBreakingData[] Breakings;//[Offset: 0x50, Size: 0x10]
	<SolverTrailingData> Trailings;//[Offset: 0x60, Size: 0x50]
	float Timestamp;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: SolverCollisionData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector AccumulatedImpulse;//[Offset: 0xc, Size: 0xc]
	Vector Normal;//[Offset: 0x18, Size: 0xc]
	Vector Velocity1;//[Offset: 0x24, Size: 0xc]
	Vector Velocity2;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocity1;//[Offset: 0x3c, Size: 0xc]
	Vector AngularVelocity2;//[Offset: 0x48, Size: 0xc]
	float Mass1;//[Offset: 0x54, Size: 0x4]
	float Mass2;//[Offset: 0x58, Size: 0x4]
	int ParticleIndex;//[Offset: 0x5c, Size: 0x4]
	int LevelsetIndex;//[Offset: 0x60, Size: 0x4]
	int ParticleIndexMesh;//[Offset: 0x64, Size: 0x4]
	int LevelsetIndexMesh;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: SolverBreakingData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0x18, Size: 0xc]
	float Mass;//[Offset: 0x24, Size: 0x4]
	int ParticleIndex;//[Offset: 0x28, Size: 0x4]
	int ParticleIndexMesh;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: SolverTrailingData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0x18, Size: 0xc]
	float Mass;//[Offset: 0x24, Size: 0x4]
	int ParticleIndex;//[Offset: 0x28, Size: 0x4]
	int ParticleIndexMesh;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: GeometryCollectionDebugDrawComponent.ActorComponent.Object
	GeometryCollectionDebugDrawActor* GeometryCollectionDebugDrawActor;//[Offset: 0xb8, Size: 0x8]
	GeometryCollectionRenderLevelSetActor* GeometryCollectionRenderLevelSetActor;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: GeometryCollectionDebugDrawActor.Actor.Object
	GeometryCollectionDebugDrawWarningMessage WarningMessage;//[Offset: 0x2e0, Size: 0x1]
	GeometryCollectionDebugDrawActorSelectedRigidBody SelectedRigidBody;//[Offset: 0x2e8, Size: 0x18]
	bool bDebugDrawWholeCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	bool bDebugDrawHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1]
	bool bDebugDrawClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 0x1]
	enum HideGeometry;//[Offset: 0x303, Size: 0x1]
	bool bShowRigidBodyId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool bShowRigidBodyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	bool bCollisionAtOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306, Size: 0x1]
	bool bShowRigidBodyTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x307, Size: 0x1]
	bool bShowRigidBodyInertia;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool bShowRigidBodyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	bool bShowRigidBodyForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a, Size: 0x1]
	bool bShowRigidBodyInfos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30b, Size: 0x1]
	bool bShowTransformIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	bool bShowTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 0x1]
	bool bShowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e, Size: 0x1]
	bool bShowLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30f, Size: 0x1]
	bool bShowConnectivityEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool bShowGeometryIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]
	bool bShowGeometryTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x312, Size: 0x1]
	bool bShowBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x313, Size: 0x1]
	bool bShowFaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	bool bShowFaceIndices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 0x1]
	bool bShowFaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316, Size: 0x1]
	bool bShowSingleFace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317, Size: 0x1]
	int SingleFaceIndex;//[Offset: 0x318, Size: 0x4]
	bool bShowVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	bool bShowVertexIndices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 0x1]
	bool bShowVertexNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31e, Size: 0x1]
	bool bUseActiveVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31f, Size: 0x1]
	float PointThickness;//[Offset: 0x320, Size: 0x4]
	float LineThickness;//[Offset: 0x324, Size: 0x4]
	bool bTextShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	float TextScale;//[Offset: 0x32c, Size: 0x4]
	float NormalScale;//[Offset: 0x330, Size: 0x4]
	float AxisScale;//[Offset: 0x334, Size: 0x4]
	float ArrowScale;//[Offset: 0x338, Size: 0x4]
	Color RigidBodyIdColor;//[Offset: 0x33c, Size: 0x4]
	float RigidBodyTransformScale;//[Offset: 0x340, Size: 0x4]
	Color RigidBodyCollisionColor;//[Offset: 0x344, Size: 0x4]
	Color RigidBodyInertiaColor;//[Offset: 0x348, Size: 0x4]
	Color RigidBodyVelocityColor;//[Offset: 0x34c, Size: 0x4]
	Color RigidBodyForceColor;//[Offset: 0x350, Size: 0x4]
	Color RigidBodyInfoColor;//[Offset: 0x354, Size: 0x4]
	Color TransformIndexColor;//[Offset: 0x358, Size: 0x4]
	float TransformScale;//[Offset: 0x35c, Size: 0x4]
	Color LevelColor;//[Offset: 0x360, Size: 0x4]
	Color ParentColor;//[Offset: 0x364, Size: 0x4]
	float ConnectivityEdgeThickness;//[Offset: 0x368, Size: 0x4]
	Color GeometryIndexColor;//[Offset: 0x36c, Size: 0x4]
	float GeometryTransformScale;//[Offset: 0x370, Size: 0x4]
	Color BoundingBoxColor;//[Offset: 0x374, Size: 0x4]
	Color FaceColor;//[Offset: 0x378, Size: 0x4]
	Color FaceIndexColor;//[Offset: 0x37c, Size: 0x4]
	Color FaceNormalColor;//[Offset: 0x380, Size: 0x4]
	Color SingleFaceColor;//[Offset: 0x384, Size: 0x4]
	Color VertexColor;//[Offset: 0x388, Size: 0x4]
	Color VertexIndexColor;//[Offset: 0x38c, Size: 0x4]
	Color VertexNormalColor;//[Offset: 0x390, Size: 0x4]
	BillboardComponent* SpriteComponent;//[Offset: 0x398, Size: 0x8]

--------------------------------
Class: GeometryCollectionDebugDrawWarningMessage

--------------------------------
Class: GeometryCollectionDebugDrawActorSelectedRigidBody
	int ID;//[Offset: 0x0, Size: 0x4]
	ChaosSolverActor* Solver;//[Offset: 0x8, Size: 0x8]
	GeometryCollectionActor* GeometryCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: GeometryCollectionRenderLevelSetActor.Actor.Object
	VolumeTexture* TargetVolumeTexture;//[Offset: 0x2e0, Size: 0x8]
	Material* RayMarchMaterial;//[Offset: 0x2e8, Size: 0x8]
	float SurfaceTolerance;//[Offset: 0x2f0, Size: 0x4]
	float Isovalue;//[Offset: 0x2f4, Size: 0x4]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	bool RenderVolumeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]

--------------------------------
Class: SkeletalMeshSimulationComponent.ActorComponent.Object
	ChaosPhysicalMaterial* PhysicalMaterial;//[Offset: 0xc0, Size: 0x8]
	ChaosSolverActor* ChaosSolverActor;//[Offset: 0xc8, Size: 0x8]
	PhysicsAsset* OverridePhysicsAsset;//[Offset: 0xd0, Size: 0x8]
	bool bSimulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	bool bNotifyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	enum ObjectType;//[Offset: 0xda, Size: 0x1]
	float Density;//[Offset: 0xdc, Size: 0x4]
	float MinMass;//[Offset: 0xe0, Size: 0x4]
	float MaxMass;//[Offset: 0xe4, Size: 0x4]
	enum CollisionType;//[Offset: 0xe8, Size: 0x1]
	float ImplicitShapeParticlesPerUnitArea;//[Offset: 0xec, Size: 0x4]
	int ImplicitShapeMinNumParticles;//[Offset: 0xf0, Size: 0x4]
	int ImplicitShapeMaxNumParticles;//[Offset: 0xf4, Size: 0x4]
	int MinLevelSetResolution;//[Offset: 0xf8, Size: 0x4]
	int MaxLevelSetResolution;//[Offset: 0xfc, Size: 0x4]
	int CollisionGroup;//[Offset: 0x100, Size: 0x4]
	enum InitialVelocityType;//[Offset: 0x104, Size: 0x1]
	Vector InitialLinearVelocity;//[Offset: 0x108, Size: 0xc]
	Vector InitialAngularVelocity;//[Offset: 0x114, Size: 0xc]
	delegate OnChaosPhysicsCollision;//[Offset: 0x120, Size: 0x10]
	void ReceivePhysicsCollision(out const ChaosPhysicsCollisionInfo CollisionInfo);// 0x7296e3fee041

--------------------------------
Class: StaticMeshSimulationComponent.ActorComponent.Object
	bool Simulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bNotifyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	enum ObjectType;//[Offset: 0xc2, Size: 0x1]
	float Mass;//[Offset: 0xc4, Size: 0x4]
	enum CollisionType;//[Offset: 0xc8, Size: 0x1]
	enum ImplicitType;//[Offset: 0xc9, Size: 0x1]
	int MinLevelSetResolution;//[Offset: 0xcc, Size: 0x4]
	int MaxLevelSetResolution;//[Offset: 0xd0, Size: 0x4]
	enum InitialVelocityType;//[Offset: 0xd4, Size: 0x1]
	Vector InitialLinearVelocity;//[Offset: 0xd8, Size: 0xc]
	Vector InitialAngularVelocity;//[Offset: 0xe4, Size: 0xc]
	float DamageThreshold;//[Offset: 0xf0, Size: 0x4]
	ChaosPhysicalMaterial* PhysicalMaterial;//[Offset: 0xf8, Size: 0x8]
	ChaosSolverActor* ChaosSolverActor;//[Offset: 0x100, Size: 0x8]
	delegate OnChaosPhysicsCollision;//[Offset: 0x108, Size: 0x10]
	PrimitiveComponent*[] SimulatedComponents;//[Offset: 0x128, Size: 0x10]
	void ReceivePhysicsCollision(out const ChaosPhysicsCollisionInfo CollisionInfo);// 0x7298e3fee041
	void ForceRecreatePhysicsState();// 0x7297e3fee041

--------------------------------
Class: DSMonitorSubsystem.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: BPC_GameInstanceWeakNetworkComponent_C.SGGameInstanceWeakNetworkComponent.SGGameInstanceComponent.Object

--------------------------------
Class: BP_GameInstance_C.SGGameInstance.GameInstance.Object
	delegate OnAndroidBackPressed;//[Offset: 0x250, Size: 0x10]
	void OnAndroidBackPressed__DelegateSignature();// 0x71ffd4e42de065

--------------------------------
Class: BPC_GAS_GlobalComponent_C.SGGIGASGlobalComponent.SGGameInstanceComponent.Object

--------------------------------
Class: BPC_GameInstancePluginManagerComponent_C.SGGameInstancePluginManagerComponent.SGGameInstanceComponent.Object

--------------------------------
Class: BPC_GameInstanceG6PlatformComponent_C.SGGameInstanceG6PlatformComponent.SGGameInstanceComponent.Object

--------------------------------
Class: BPC_GameInstanceGameInfoComponent_C.UAGameInstanceGameInfoComponent.SGGameInstanceGameInfoComponent.SGGameInstanceComponent.Object

--------------------------------
Class: StartupMap_new_C.LevelScriptActor.Actor.Object

--------------------------------
Class: BP_StartupGamemode_C.GameMode.GameModeBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3c8, Size: 0x8]

--------------------------------
