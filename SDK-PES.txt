Class: Package.Object

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0xffffff8523219000 0x7af8134e60

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: IntProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: BoolProperty.Property.Field.Object

--------------------------------
Class: NameProperty.Property.Field.Object

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: ByteProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: ArrayProperty.Property.Field.Object

--------------------------------
Class: StrProperty.Property.Field.Object

--------------------------------
Class: TextProperty.Property.Field.Object

--------------------------------
Class: MapProperty.Property.Field.Object

--------------------------------
Class: EnumProperty.Property.Field.Object

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: AndroidJavaSurfaceViewDevices.Object
	JavaSurfaceViewDevice[] SurfaceViewDevices;//[Offset: 0x28, Size: 0x10] 0x7af81c5800

--------------------------------
Class: JavaSurfaceViewDevice
	FString Manufacturer;//[Offset: 0x0, Size: 0x10] 0x7a96130be0
	FString Model;//[Offset: 0x10, Size: 0x10] 0x7a96130c50

--------------------------------
Class: AndroidDeviceProfileMatchingRules.Object
	ProfileMatch[] MatchProfile;//[Offset: 0x28, Size: 0x10] 0x7af81c9b00

--------------------------------
Class: ProfileMatch
	FString Profile;//[Offset: 0x0, Size: 0x10] 0x7a961308d0
	ProfileMatchItem[] Match;//[Offset: 0x10, Size: 0x10] 0x7af81c9780

--------------------------------
Class: ProfileMatchItem
	byte SourceType;//[Offset: 0x0, Size: 0x1] 0x7af81c9600
	byte CompareType;//[Offset: 0x1, Size: 0x1] 0x7af81c9680
	FString MatchString;//[Offset: 0x8, Size: 0x10] 0x7a96130940

--------------------------------
Class: GCObjectReferencer.Object

--------------------------------
Class: AssetRegistryImpl.Object

--------------------------------
Class: DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: WeakObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: ClassProperty.ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: SoftClassProperty.SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: InterfaceProperty.Property.Field.Object

--------------------------------
Class: UInt64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: DelegateProperty.Property.Field.Object

--------------------------------
Class: Int64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt32Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int8Property.NumericProperty.Property.Field.Object

--------------------------------
Class: SetProperty.Property.Field.Object

--------------------------------
Class: DoubleProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: LazyObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: TextBuffer.Object

--------------------------------
Class: DynamicClass.Class.Struct.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Interface.Object

--------------------------------
Class: LinkerPlaceholderClass.Class.Struct.Field.Object

--------------------------------
Class: LinkerPlaceholderExportObject.Object

--------------------------------
Class: LinkerPlaceholderFunction.Function.Struct.Field.Object

--------------------------------
Class: MetaData.Object

--------------------------------
Class: ObjectRedirector.Object

--------------------------------
Class: Model.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x58] 0x7aa096a900
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7aa096a980
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7aa096aa00
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x7aa096aa80
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x7aa096ab00
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x80, Size: 0x1] 0x7aa096ab80
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x80, Size: 0x1] 0x7aa096ac00
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x80, Size: 0x1] 0x7aa096ac80
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x80, Size: 0x1] 0x7aa096ad00
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1] 0x7aa096ad80
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x81, Size: 0x1] 0x7aa096ae00
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x81, Size: 0x1] 0x7aa096ae80
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x81, Size: 0x1] 0x7aa096af00
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x81, Size: 0x1] 0x7aa096af80
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x81, Size: 0x1] 0x7aa096b000
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x81, Size: 0x1] 0x7aa096b080
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x81, Size: 0x1] 0x7aa096b100
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x82, Size: 0x1] 0x7aa096b180
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x82, Size: 0x1] 0x7aa096b200
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x82, Size: 0x1] 0x7aa096b280
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x82, Size: 0x1] 0x7aa096b300
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x82, Size: 0x1] 0x7aa096b380
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x82, Size: 0x1] 0x7aa096b400
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x82, Size: 0x1] 0x7aa096b480
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x82, Size: 0x1] 0x7aa096b500
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83, Size: 0x1] 0x7aa096b580
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83, Size: 0x1] 0x7aa0969500
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83, Size: 0x1] 0x7aa0969580
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1] 0x7aa0969600
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1] 0x7aa0969680
	byte RemoteRole;//[Offset: 0x85, Size: 0x1] 0x7aa0969700
	RepMovement ReplicatedMovement;//[Offset: 0x88, Size: 0x34] 0x7aa0969d80
	float InitialLifeSpan;//[Offset: 0xbc, Size: 0x4] 0x7aa0939000
	float CustomTimeDilation;//[Offset: 0xc0, Size: 0x4] 0x7aa0937390
	RepAttachment AttachmentReplication;//[Offset: 0xc8, Size: 0x40] 0x7aa096a080
	Actor* Owner;//[Offset: 0x108, Size: 0x8] 0x7aa096a100
	FName NetDriverName;//[Offset: 0x110, Size: 0x8] 0x7aa0937470
	byte Role;//[Offset: 0x118, Size: 0x1] 0x7aa096a180
	byte NetDormancy;//[Offset: 0x119, Size: 0x1] 0x7aa096a200
	enum SpawnCollisionHandlingMethod;//[Offset: 0x11a, Size: 0x1] 0x7aa096a300
	byte AutoReceiveInput;//[Offset: 0x11b, Size: 0x1] 0x7aa096a380
	int InputPriority;//[Offset: 0x11c, Size: 0x4] 0x7aa09374e0
	InputComponent* InputComponent;//[Offset: 0x120, Size: 0x8] 0x7aa096a400
	float NetCullDistanceSquared;//[Offset: 0x128, Size: 0x4] 0x7aa0937550
	int NetTag;//[Offset: 0x12c, Size: 0x4] 0x7aa09375c0
	float NetUpdateFrequency;//[Offset: 0x130, Size: 0x4] 0x7aa0937630
	float MinNetUpdateFrequency;//[Offset: 0x134, Size: 0x4] 0x7aa09376a0
	float NetPriority;//[Offset: 0x138, Size: 0x4] 0x7aa0937710
	Pawn* Instigator;//[Offset: 0x140, Size: 0x8] 0x7aa096a480
	Actor*[] Children;//[Offset: 0x148, Size: 0x10] 0x7aa0968480
	SceneComponent* RootComponent;//[Offset: 0x158, Size: 0x8] 0x7aa0968500
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x160, Size: 0x10] 0x7aa0968600
	FName[] Layers;//[Offset: 0x178, Size: 0x10] 0x7aa0968680
	ChildActorComponent* ParentComponent;//[Offset: 0x188, Size: 0x8] 0x7aa0968700
	FName[] Tags;//[Offset: 0x190, Size: 0x10] 0x7aa0968780
	delegate OnTakeAnyDamage;//[Offset: 0x1a0, Size: 0x10] 0x7aa0968800
	delegate OnTakePointDamage;//[Offset: 0x1b0, Size: 0x10] 0x7aa0968880
	delegate OnTakeRadialDamage;//[Offset: 0x1c0, Size: 0x10] 0x7aa0968900
	delegate OnActorBeginOverlap;//[Offset: 0x1d0, Size: 0x10] 0x7aa0968980
	delegate OnActorEndOverlap;//[Offset: 0x1e0, Size: 0x10] 0x7aa0968a00
	delegate OnBeginCursorOver;//[Offset: 0x1f0, Size: 0x10] 0x7aa0968a80
	delegate OnEndCursorOver;//[Offset: 0x200, Size: 0x10] 0x7aa0968b00
	delegate OnClicked;//[Offset: 0x210, Size: 0x10] 0x7aa0968b80
	delegate OnReleased;//[Offset: 0x220, Size: 0x10] 0x7aa0968c00
	delegate OnInputTouchBegin;//[Offset: 0x230, Size: 0x10] 0x7aa0968c80
	delegate OnInputTouchEnd;//[Offset: 0x240, Size: 0x10] 0x7aa0968d00
	delegate OnInputTouchEnter;//[Offset: 0x250, Size: 0x10] 0x7aa0968d80
	delegate OnInputTouchLeave;//[Offset: 0x260, Size: 0x10] 0x7aa0968e00
	delegate OnActorHit;//[Offset: 0x270, Size: 0x10] 0x7aa0968e80
	delegate OnDestroyed;//[Offset: 0x280, Size: 0x10] 0x7aa0968f00
	delegate OnEndPlay;//[Offset: 0x290, Size: 0x10] 0x7aa0968f80
	ActorComponent*[] InstanceComponents;//[Offset: 0x300, Size: 0x10] 0x7aa0969080
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x310, Size: 0x10] 0x7aa0969180
	bool WasRecentlyRendered(float Tolerance);// 0xffffff8523219000 0x7aa088eb00
	void UserConstructionScript();// 0xffffff8523219000 0x7aa088ebe0
	void TearOff();// 0xffffff8523219000 0x7aa088ecc0
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0xffffff8523219000 0x7aa088eda0
	void SetTickGroup(byte NewTickGroup);// 0xffffff8523219000 0x7aa088ee80
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0xffffff8523219000 0x7aa088ef60
	void SetReplicates(bool bInReplicates);// 0xffffff8523219000 0x7aa088f040
	void SetReplicateMovement(bool bInReplicateMovement);// 0xffffff8523219000 0x7aa088f120
	void SetOwner(Actor* NewOwner);// 0xffffff8523219000 0x7aa088f200
	void SetNetDormancy(byte NewDormancy);// 0xffffff8523219000 0x7aa088f2e0
	void SetLifeSpan(float InLifespan);// 0xffffff8523219000 0x7aa088f3c0
	void SetActorTickInterval(float TickInterval);// 0xffffff8523219000 0x7aa088f4a0
	void SetActorTickEnabled(bool bEnabled);// 0xffffff8523219000 0x7aa088f580
	void SetActorScale3D(Vector NewScale3D);// 0xffffff8523219000 0x7aa088f660
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0xffffff8523219000 0x7aa088f740
	void SetActorHiddenInGame(bool bNewHidden);// 0xffffff8523219000 0x7aa088f820
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0xffffff8523219000 0x7aa088f900
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xffffff8523219000 0x7aa088f9e0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xffffff8523219000 0x7aa088fac0
	void ReceiveTick(float DeltaSeconds);// 0xffffff8523219000 0x7aa088fba0
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0xffffff8523219000 0x7aa088fc80
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0xffffff8523219000 0x7aa088fd60
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0xffffff8523219000 0x7aa088fe40
	void ReceiveEndPlay(byte EndPlayReason);// 0xffffff8523219000 0x7aa088ff20
	void ReceiveDestroyed();// 0xffffff8523219000 0x7aa088caa0
	void ReceiveBeginPlay();// 0xffffff8523219000 0x7aa088cb80
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xffffff8523219000 0x7aa088cc60
	void ReceiveActorOnReleased(Key ButtonReleased);// 0xffffff8523219000 0x7aa088cd40
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0xffffff8523219000 0x7aa088ce20
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0xffffff8523219000 0x7aa088cf00
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0xffffff8523219000 0x7aa088cfe0
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0xffffff8523219000 0x7aa088d0c0
	void ReceiveActorOnClicked(Key ButtonPressed);// 0xffffff8523219000 0x7aa088d1a0
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0xffffff8523219000 0x7aa088d280
	void ReceiveActorEndCursorOver();// 0xffffff8523219000 0x7aa088d360
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0xffffff8523219000 0x7aa088d440
	void ReceiveActorBeginCursorOver();// 0xffffff8523219000 0x7aa088d520
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0xffffff8523219000 0x7aa088d600
	void OnRep_ReplicateMovement();// 0xffffff8523219000 0x7aa088d6e0
	void OnRep_ReplicatedMovement();// 0xffffff8523219000 0x7aa088d7c0
	void OnRep_Owner();// 0xffffff8523219000 0x7aa088d8a0
	void OnRep_Instigator();// 0xffffff8523219000 0x7aa088d980
	void OnRep_AttachmentReplication();// 0xffffff8523219000 0x7aa088da60
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0xffffff8523219000 0x7aa088db40
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0xffffff8523219000 0x7aa088dc20
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0xffffff8523219000 0x7aa088dd00
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa088dde0
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0xffffff8523219000 0x7aa088dec0
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa088dfa0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa088e080
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa088e160
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa088e240
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa088e320
	void K2_OnReset();// 0xffffff8523219000 0x7aa088e400
	void K2_OnEndViewTarget(PlayerController* PC);// 0xffffff8523219000 0x7aa088e4e0
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0xffffff8523219000 0x7aa088e5c0
	SceneComponent* K2_GetRootComponent();// 0xffffff8523219000 0x7aa088e6a0
	Rotator K2_GetActorRotation();// 0xffffff8523219000 0x7aa088adc0
	Vector K2_GetActorLocation();// 0xffffff8523219000 0x7aa088aea0
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0xffffff8523219000 0x7aa088af80
	void K2_DestroyComponent(ActorComponent* Component);// 0xffffff8523219000 0x7aa088b060
	void K2_DestroyActor();// 0xffffff8523219000 0x7aa088b140
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xffffff8523219000 0x7aa088b220
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xffffff8523219000 0x7aa088b300
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0xffffff8523219000 0x7aa088b3e0
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0xffffff8523219000 0x7aa088b4c0
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa088b5a0
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa088b680
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa088b760
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa088b840
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa088b920
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa088ba00
	bool IsOverlappingActor(const Actor* Other);// 0xffffff8523219000 0x7aa088bae0
	bool IsChildActor();// 0xffffff8523219000 0x7aa088bbc0
	bool IsActorTickEnabled();// 0xffffff8523219000 0x7aa088bca0
	bool IsActorBeingDestroyed();// 0xffffff8523219000 0x7aa088bd80
	bool HasAuthority();// 0xffffff8523219000 0x7aa088be60
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0xffffff8523219000 0x7aa088bf40
	Vector GetVelocity();// 0xffffff8523219000 0x7aa088c020
	Transform GetTransform();// 0xffffff8523219000 0x7aa088c100
	bool GetTickableWhenPaused();// 0xffffff8523219000 0x7aa088c1e0
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0xffffff8523219000 0x7aa088c2c0
	byte GetRemoteRole();// 0xffffff8523219000 0x7aa088c3a0
	ChildActorComponent* GetParentComponent();// 0xffffff8523219000 0x7aa088c480
	Actor* GetParentActor();// 0xffffff8523219000 0x7aa088c560
	Actor* GetOwner();// 0xffffff8523219000 0x7aa088c640
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0xffffff8523219000 0x7aa088c720
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0xffffff8523219000 0x7aa088c800
	byte GetLocalRole();// 0xffffff8523219000 0x7aa088c8e0
	float GetLifeSpan();// 0xffffff8523219000 0x7aa088c9c0
	Controller* GetInstigatorController();// 0xffffff8523219000 0x7aa08890e0
	Pawn* GetInstigator();// 0xffffff8523219000 0x7aa08891c0
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0xffffff8523219000 0x7aa08892a0
	float GetInputAxisValue(const FName InputAxisName);// 0xffffff8523219000 0x7aa0889380
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0xffffff8523219000 0x7aa0889460
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0xffffff8523219000 0x7aa0889540
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0xffffff8523219000 0x7aa0889620
	float GetGameTimeSinceCreation();// 0xffffff8523219000 0x7aa0889700
	float GetDotProductTo(const Actor* OtherActor);// 0xffffff8523219000 0x7aa08897e0
	float GetDistanceTo(const Actor* OtherActor);// 0xffffff8523219000 0x7aa08898c0
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0xffffff8523219000 0x7aa08899a0
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0xffffff8523219000 0x7aa0889a80
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0xffffff8523219000 0x7aa0889b60
	FName GetAttachParentSocketName();// 0xffffff8523219000 0x7aa0889c40
	Actor* GetAttachParentActor();// 0xffffff8523219000 0x7aa0889d20
	void GetAttachedActors(out Actor*[] OutActors);// 0xffffff8523219000 0x7aa0889e00
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0xffffff8523219000 0x7aa0889ee0
	Vector GetActorUpVector();// 0xffffff8523219000 0x7aa0889fc0
	float GetActorTimeDilation();// 0xffffff8523219000 0x7aa088a0a0
	float GetActorTickInterval();// 0xffffff8523219000 0x7aa088a180
	Vector GetActorScale3D();// 0xffffff8523219000 0x7aa088a260
	Vector GetActorRightVector();// 0xffffff8523219000 0x7aa088a340
	Vector GetActorRelativeScale3D();// 0xffffff8523219000 0x7aa088a420
	Vector GetActorForwardVector();// 0xffffff8523219000 0x7aa088a500
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0xffffff8523219000 0x7aa088a5e0
	bool GetActorEnableCollision();// 0xffffff8523219000 0x7aa088a6c0
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0xffffff8523219000 0x7aa088a7a0
	void ForceNetUpdate();// 0xffffff8523219000 0x7aa088a880
	void FlushNetDormancy();// 0xffffff8523219000 0x7aa088a960
	void EnableInput(PlayerController* PlayerController);// 0xffffff8523219000 0x7aa088aa40
	void DisableInput(PlayerController* PlayerController);// 0xffffff8523219000 0x7aa088ab20
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0xffffff8523219000 0x7aa088ac00
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xffffff8523219000 0x7aa088ace0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xffffff8523219000 0x7aa0887400
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0xffffff8523219000 0x7aa08874e0
	bool ActorHasTag(FName Tag);// 0xffffff8523219000 0x7aa08875c0

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1] 0x7aa07d5180
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1] 0x7aa07d5200
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7aa07d5280
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x7aa07d3200
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x7aa07d3280
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x7aa07d3300
	float TickInterval;//[Offset: 0x40, Size: 0x4] 0x7a963ed600

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc] 0x7aa0969780
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc] 0x7aa0969800
	Vector Location;//[Offset: 0x18, Size: 0xc] 0x7aa0969880
	Rotator Rotation;//[Offset: 0x24, Size: 0xc] 0x7aa0969900
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7aa0969980
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x7aa0969a00
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1] 0x7aa0969b00
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1] 0x7aa0969c00
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1] 0x7aa0969d00

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4] 0x7af958e080
	float Y;//[Offset: 0x4, Size: 0x4] 0x7af958e0f0
	float Z;//[Offset: 0x8, Size: 0x4] 0x7af958e1d0

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4] 0x7af958dc20
	float Yaw;//[Offset: 0x4, Size: 0x4] 0x7af958dc90
	float Roll;//[Offset: 0x8, Size: 0x4] 0x7af958dd00

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8] 0x7aa0969e00
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc] 0x7aa0969e80
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc] 0x7aa0969f00
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc] 0x7aa0969f80
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8] 0x7aa0937400
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8] 0x7aa096a000

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0x100, Size: 0x8] 0x7aa0897480
	SceneComponent* AttachParent;//[Offset: 0x108, Size: 0x8] 0x7aa0897500
	FName AttachSocketName;//[Offset: 0x110, Size: 0x8] 0x7aa0838200
	SceneComponent*[] AttachChildren;//[Offset: 0x118, Size: 0x10] 0x7aa0897600
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0x128, Size: 0x10] 0x7aa0897700
	Vector RelativeLocation;//[Offset: 0x164, Size: 0xc] 0x7aa0897780
	Rotator RelativeRotation;//[Offset: 0x170, Size: 0xc] 0x7aa0897800
	Vector RelativeScale3D;//[Offset: 0x17c, Size: 0xc] 0x7aa0897880
	Vector ComponentVelocity;//[Offset: 0x1c0, Size: 0xc] 0x7aa0897900
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1cc, Size: 0x1] 0x7aa0897980
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1cc, Size: 0x1] 0x7aa0897a00
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1cc, Size: 0x1] 0x7aa0897a80
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1cc, Size: 0x1] 0x7aa0897b00
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1cc, Size: 0x1] 0x7aa0897b80
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1cc, Size: 0x1] 0x7aa0897c00
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1cc, Size: 0x1] 0x7aa0897c80
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1cd, Size: 0x1] 0x7aa0897d00
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1cd, Size: 0x1] 0x7aa0897d80
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1cd, Size: 0x1] 0x7aa0897e00
	byte Mobility;//[Offset: 0x1cf, Size: 0x1] 0x7aa0897e80
	byte DetailMode;//[Offset: 0x1d0, Size: 0x1] 0x7aa0897f00
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x220, Size: 0x10] 0x7aa0897f80
	void ToggleVisibility(bool bPropagateToChildren);// 0xffffff8523219000 0x7aa08860c0
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0xffffff8523219000 0x7aa08861a0
	void SetWorldScale3D(Vector NewScale);// 0xffffff8523219000 0x7aa0886280
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0xffffff8523219000 0x7aa0886360
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0xffffff8523219000 0x7aa0886440
	void SetRelativeScale3D(Vector NewScale3D);// 0xffffff8523219000 0x7aa0886520
	void SetMobility(byte NewMobility);// 0xffffff8523219000 0x7aa0886600
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0xffffff8523219000 0x7aa08866e0
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0xffffff8523219000 0x7aa08867c0
	void ResetRelativeTransform();// 0xffffff8523219000 0x7aa08868a0
	void OnRep_Visibility(bool OldValue);// 0xffffff8523219000 0x7aa0886980
	void OnRep_Transform();// 0xffffff8523219000 0x7aa0886a60
	void OnRep_RelativeRotation();// 0xffffff8523219000 0x7aa0886b40
	void OnRep_RelativeLocation();// 0xffffff8523219000 0x7aa0886c20
	void OnRep_AttachSocketName();// 0xffffff8523219000 0x7aa0886d00
	void OnRep_AttachParent();// 0xffffff8523219000 0x7aa0886de0
	void OnRep_AttachChildren();// 0xffffff8523219000 0x7aa0886ec0
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa0886fa0
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa0887080
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa0887160
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa0887240
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa0887320
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa0883a40
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa0883b20
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa0883c00
	Transform K2_GetComponentToWorld();// 0xffffff8523219000 0x7aa0883ce0
	Vector K2_GetComponentScale();// 0xffffff8523219000 0x7aa0883dc0
	Rotator K2_GetComponentRotation();// 0xffffff8523219000 0x7aa0883ea0
	Vector K2_GetComponentLocation();// 0xffffff8523219000 0x7aa0883f80
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0xffffff8523219000 0x7aa0884060
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xffffff8523219000 0x7aa0884140
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0xffffff8523219000 0x7aa0884220
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa0884300
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa08843e0
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa08844c0
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa08845a0
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa0884680
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa0884760
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa0884840
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xffffff8523219000 0x7aa0884920
	bool IsVisible();// 0xffffff8523219000 0x7aa0884a00
	bool IsSimulatingPhysics(FName BoneName);// 0xffffff8523219000 0x7aa0884ae0
	bool IsAnySimulatingPhysics();// 0xffffff8523219000 0x7aa0884bc0
	Vector GetUpVector();// 0xffffff8523219000 0x7aa0884ca0
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0xffffff8523219000 0x7aa0884d80
	Rotator GetSocketRotation(FName InSocketName);// 0xffffff8523219000 0x7aa0884e60
	Quat GetSocketQuaternion(FName InSocketName);// 0xffffff8523219000 0x7aa0884f40
	Vector GetSocketLocation(FName InSocketName);// 0xffffff8523219000 0x7aa0885020
	bool GetShouldUpdatePhysicsVolume();// 0xffffff8523219000 0x7aa0885100
	Vector GetRightVector();// 0xffffff8523219000 0x7aa08851e0
	Transform GetRelativeTransform();// 0xffffff8523219000 0x7aa08852c0
	PhysicsVolume* GetPhysicsVolume();// 0xffffff8523219000 0x7aa08853a0
	void GetParentComponents(out SceneComponent*[] Parents);// 0xffffff8523219000 0x7aa0885480
	int GetNumChildrenComponents();// 0xffffff8523219000 0x7aa0885560
	Vector GetForwardVector();// 0xffffff8523219000 0x7aa0885640
	Vector GetComponentVelocity();// 0xffffff8523219000 0x7aa0881d60
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0xffffff8523219000 0x7aa0881e40
	SceneComponent* GetChildComponent(int ChildIndex);// 0xffffff8523219000 0x7aa0881f20
	FName GetAttachSocketName();// 0xffffff8523219000 0x7aa0882000
	SceneComponent* GetAttachParent();// 0xffffff8523219000 0x7aa08820e0
	FName[] GetAllSocketNames();// 0xffffff8523219000 0x7aa08821c0
	bool DoesSocketExist(FName InSocketName);// 0xffffff8523219000 0x7aa08822a0
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0xffffff8523219000 0x7aa0882380

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x58] 0x7aa07d3380
	FName[] ComponentTags;//[Offset: 0x88, Size: 0x10] 0x7aa07d3400
	AssetUserData*[] AssetUserData;//[Offset: 0x98, Size: 0x10] 0x7aa07d3580
	bool bReplicates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xac, Size: 0x1] 0x7aa07d3600
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xac, Size: 0x1] 0x7aa07d3680
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xad, Size: 0x1] 0x7aa07d3700
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xae, Size: 0x1] 0x7aa07d3780
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xae, Size: 0x1] 0x7aa07d3800
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xae, Size: 0x1] 0x7aa07d3880
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xae, Size: 0x1] 0x7aa07d3900
	enum CreationMethod;//[Offset: 0xb0, Size: 0x1] 0x7aa07d3a00
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0xb8, Size: 0x10] 0x7aa07d3c00
	delegate OnComponentActivated;//[Offset: 0xc8, Size: 0x10] 0x7aa07d3d00
	delegate OnComponentDeactivated;//[Offset: 0xd8, Size: 0x10] 0x7aa07d3d80
	void ToggleActive();// 0xffffff8523219000 0x7aa07c4920
	void SetTickGroup(byte NewTickGroup);// 0xffffff8523219000 0x7aa07c4a00
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0xffffff8523219000 0x7aa07c4ae0
	void SetIsReplicated(bool ShouldReplicate);// 0xffffff8523219000 0x7aa07c4bc0
	void SetComponentTickInterval(float TickInterval);// 0xffffff8523219000 0x7aa07c4ca0
	void SetComponentTickEnabled(bool bEnabled);// 0xffffff8523219000 0x7aa07c4d80
	void SetAutoActivate(bool bNewAutoActivate);// 0xffffff8523219000 0x7aa07c4e60
	void SetActive(bool bNewActive, bool bReset);// 0xffffff8523219000 0x7aa07c4f40
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xffffff8523219000 0x7aa07c5020
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xffffff8523219000 0x7aa07c5100
	void ReceiveTick(float DeltaSeconds);// 0xffffff8523219000 0x7aa07c51e0
	void ReceiveEndPlay(byte EndPlayReason);// 0xffffff8523219000 0x7aa07c52c0
	void ReceiveBeginPlay();// 0xffffff8523219000 0x7aa07c53a0
	void OnRep_IsActive();// 0xffffff8523219000 0x7aa07c5480
	void K2_DestroyComponent(Object* Object);// 0xffffff8523219000 0x7aa07c5560
	bool IsComponentTickEnabled();// 0xffffff8523219000 0x7aa07c5640
	bool IsBeingDestroyed();// 0xffffff8523219000 0x7aa07c1d60
	bool IsActive();// 0xffffff8523219000 0x7aa07c1e40
	Actor* GetOwner();// 0xffffff8523219000 0x7aa07c1f20
	float GetComponentTickInterval();// 0xffffff8523219000 0x7aa07c2000
	void Deactivate();// 0xffffff8523219000 0x7aa07c20e0
	bool ComponentHasTag(FName Tag);// 0xffffff8523219000 0x7aa07c21c0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xffffff8523219000 0x7aa07c22a0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xffffff8523219000 0x7aa07c2380
	void Activate(bool bReset);// 0xffffff8523219000 0x7aa07c2460

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8] 0x7aa07d3a80
	FName MemberName;//[Offset: 0x8, Size: 0x8] 0x7a963ed6e0
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10] 0x7aa07d3b00

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4] 0x7af958e240
	int B;//[Offset: 0x4, Size: 0x4] 0x7af958e2b0
	int C;//[Offset: 0x8, Size: 0x4] 0x7af958e320
	int D;//[Offset: 0xc, Size: 0x4] 0x7af958e390

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x368, Size: 0x4] 0x7a9cd77fd0
	int Priority;//[Offset: 0x36c, Size: 0x4] 0x7a9cd78040
	float FluidFriction;//[Offset: 0x370, Size: 0x4] 0x7a9cd780b0
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x374, Size: 0x1] 0x7a9cd93880
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x374, Size: 0x1] 0x7a9cd93900

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x330, Size: 0x1] 0x7a9cbfac80
	Color BrushColor;//[Offset: 0x334, Size: 0x4] 0x7a9cbfad00
	int PolyFlags;//[Offset: 0x338, Size: 0x4] 0x7a9cbc5950
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33c, Size: 0x1] 0x7a9cbfad80
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33c, Size: 0x1] 0x7a9cbfae00
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33c, Size: 0x1] 0x7a9cbfae80
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33c, Size: 0x1] 0x7a9cbfaf00
	Model* Brush;//[Offset: 0x340, Size: 0x8] 0x7a9cbfaf80
	BrushComponent* BrushComponent;//[Offset: 0x348, Size: 0x8] 0x7a9cbfb000
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1] 0x7a9cbfb080
	GeomSelection[] SavedSelections;//[Offset: 0x358, Size: 0x10] 0x7a9cbfb180

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1] 0x7af81c4000
	byte G;//[Offset: 0x1, Size: 0x1] 0x7af81c4080
	byte R;//[Offset: 0x2, Size: 0x1] 0x7af81c4100
	byte A;//[Offset: 0x3, Size: 0x1] 0x7af81c4180

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x578, Size: 0x8] 0x7a9cd48380
	BodySetup* BrushBodySetup;//[Offset: 0x580, Size: 0x8] 0x7a9cd48400

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x260, Size: 0x4] 0x7a9ca6f2e0
	float LDMaxDrawDistance;//[Offset: 0x264, Size: 0x4] 0x7a9ca6f350
	float CachedMaxDrawDistance;//[Offset: 0x268, Size: 0x4] 0x7a9ca6f3c0
	byte DepthPriorityGroup;//[Offset: 0x26c, Size: 0x1] 0x7a9cb2a500
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x26d, Size: 0x1] 0x7a9cb28480
	byte IndirectLightingCacheQuality;//[Offset: 0x26e, Size: 0x1] 0x7a9cb28500
	enum LightmapType;//[Offset: 0x26f, Size: 0x1] 0x7a9cb28600
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1] 0x7a9cb28680
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x270, Size: 0x1] 0x7a9cb28700
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x270, Size: 0x1] 0x7a9cb28780
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x270, Size: 0x1] 0x7a9cb28800
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x271, Size: 0x1] 0x7a9cb28880
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x271, Size: 0x1] 0x7a9cb28900
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x271, Size: 0x1] 0x7a9cb28980
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x271, Size: 0x1] 0x7a9cb28a00
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x271, Size: 0x1] 0x7a9cb28a80
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x271, Size: 0x1] 0x7a9cb28b00
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x271, Size: 0x1] 0x7a9cb28b80
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x271, Size: 0x1] 0x7a9cb28c00
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x272, Size: 0x1] 0x7a9cb28c80
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x272, Size: 0x1] 0x7a9cb28d00
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x272, Size: 0x1] 0x7a9cb28d80
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x272, Size: 0x1] 0x7a9cb28e00
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x272, Size: 0x1] 0x7a9cb28e80
	bool bSelectable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x272, Size: 0x1] 0x7a9cb28f00
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x272, Size: 0x1] 0x7a9cb28f80
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x272, Size: 0x1] 0x7a9cb29000
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x273, Size: 0x1] 0x7a9cb29080
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x273, Size: 0x1] 0x7a9cb29100
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x273, Size: 0x1] 0x7a9cb29180
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x273, Size: 0x1] 0x7a9cb29200
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x273, Size: 0x1] 0x7a9cb29280
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x273, Size: 0x1] 0x7a9cb29300
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x273, Size: 0x1] 0x7a9cb29380
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x273, Size: 0x1] 0x7a9cb29400
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1] 0x7a9cb29480
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 0x1] 0x7a9cb27400
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274, Size: 0x1] 0x7a9cb27480
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274, Size: 0x1] 0x7a9cb27500
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x274, Size: 0x1] 0x7a9cb27580
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x274, Size: 0x1] 0x7a9cb27600
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x274, Size: 0x1] 0x7a9cb27680
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x274, Size: 0x1] 0x7a9cb27700
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x275, Size: 0x1] 0x7a9cb27780
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x275, Size: 0x1] 0x7a9cb27800
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x275, Size: 0x1] 0x7a9cb27880
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x275, Size: 0x1] 0x7a9cb27900
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x275, Size: 0x1] 0x7a9cb27980
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x275, Size: 0x1] 0x7a9cb27a00
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x275, Size: 0x1] 0x7a9cb27a80
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x275, Size: 0x1] 0x7a9cb27b00
	byte bHasCustomNavigableGeometry;//[Offset: 0x277, Size: 0x1] 0x7a9cb27b80
	byte CanCharacterStepUpOn;//[Offset: 0x279, Size: 0x1] 0x7a9cb27c00
	LightingChannels LightingChannels;//[Offset: 0x27a, Size: 0x1] 0x7a9cb27c80
	enum CustomDepthStencilWriteMask;//[Offset: 0x27b, Size: 0x1] 0x7a9cb27d80
	int CustomDepthStencilValue;//[Offset: 0x27c, Size: 0x4] 0x7a9ca6f430
	int TranslucencySortPriority;//[Offset: 0x280, Size: 0x4] 0x7a9ca6f4a0
	int VisibilityId;//[Offset: 0x284, Size: 0x4] 0x7a9ca6f510
	float LpvBiasMultiplier;//[Offset: 0x28c, Size: 0x4] 0x7a9ca6d8a0
	float BoundsScale;//[Offset: 0x298, Size: 0x4] 0x7a9ca6d910
	float LastSubmitTime;//[Offset: 0x29c, Size: 0x4] 0x7a9ca6d980
	float LastRenderTime;//[Offset: 0x2a0, Size: 0x4] 0x7a9ca6d9f0
	float LastRenderTimeOnScreen;//[Offset: 0x2a4, Size: 0x4] 0x7a9ca6da60
	Actor*[] MoveIgnoreActors;//[Offset: 0x2a8, Size: 0x10] 0x7a9cb27e80
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2b8, Size: 0x10] 0x7a9cb27f80
	BodyInstance BodyInstance;//[Offset: 0x2d8, Size: 0x148] 0x7a9cb28000
	delegate OnComponentHit;//[Offset: 0x420, Size: 0x10] 0x7a9cb28080
	delegate OnComponentBeginOverlap;//[Offset: 0x430, Size: 0x10] 0x7a9cb28100
	delegate OnComponentEndOverlap;//[Offset: 0x440, Size: 0x10] 0x7a9cb28180
	delegate OnComponentWake;//[Offset: 0x450, Size: 0x10] 0x7a9cb28200
	delegate OnComponentSleep;//[Offset: 0x460, Size: 0x10] 0x7a9cb28280
	delegate OnBeginCursorOver;//[Offset: 0x480, Size: 0x10] 0x7a9cb28300
	delegate OnEndCursorOver;//[Offset: 0x490, Size: 0x10] 0x7a9cb28380
	delegate OnClicked;//[Offset: 0x4a0, Size: 0x10] 0x7a9cb28400
	delegate OnReleased;//[Offset: 0x4b0, Size: 0x10] 0x7a9cb26380
	delegate OnInputTouchBegin;//[Offset: 0x4c0, Size: 0x10] 0x7a9cb26400
	delegate OnInputTouchEnd;//[Offset: 0x4d0, Size: 0x10] 0x7a9cb26480
	delegate OnInputTouchEnter;//[Offset: 0x4e0, Size: 0x10] 0x7a9cb26500
	delegate OnInputTouchLeave;//[Offset: 0x4f0, Size: 0x10] 0x7a9cb26580
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x518, Size: 0x8] 0x7a9cb26600
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x520, Size: 0x58] 0x7a9cb26680
	void WakeRigidBody(FName BoneName);// 0xffffff8523219000 0x7aa0989380
	void WakeAllRigidBodies();// 0xffffff8523219000 0x7aa0989460
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0xffffff8523219000 0x7aa0989540
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0xffffff8523219000 0x7aa0989620
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0xffffff8523219000 0x7aa0989700
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0xffffff8523219000 0x7aa09897e0
	void SetSimulatePhysics(bool bSimulate);// 0xffffff8523219000 0x7aa09898c0
	void SetRenderInMainPass(bool bValue);// 0xffffff8523219000 0x7aa09899a0
	void SetRenderCustomDepth(bool bValue);// 0xffffff8523219000 0x7aa0989a80
	void SetReceivesDecals(bool bNewReceivesDecals);// 0xffffff8523219000 0x7aa0989b60
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0xffffff8523219000 0x7aa0989c40
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xffffff8523219000 0x7aa0989d20
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xffffff8523219000 0x7aa0989e00
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xffffff8523219000 0x7aa0989ee0
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0xffffff8523219000 0x7aa0989fc0
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xffffff8523219000 0x7aa098a0a0
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xffffff8523219000 0x7aa098a180
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xffffff8523219000 0x7aa098a260
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0xffffff8523219000 0x7aa098a340
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0xffffff8523219000 0x7aa098a420
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0xffffff8523219000 0x7aa098a500
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0xffffff8523219000 0x7aa098a5e0
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0xffffff8523219000 0x7aa098a6c0
	void SetMassScale(FName BoneName, float InMassScale);// 0xffffff8523219000 0x7aa098a7a0
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0xffffff8523219000 0x7aa098a880
	void SetLinearDamping(float InDamping);// 0xffffff8523219000 0x7aa098a960
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0xffffff8523219000 0x7aa098aa40
	void SetEnableGravity(bool bGravityEnabled);// 0xffffff8523219000 0x7aa098ab20
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0xffffff8523219000 0x7aa098ac00
	void SetCustomDepthStencilValue(int Value);// 0xffffff8523219000 0x7aa098ace0
	void SetCullDistance(float NewCullDistance);// 0xffffff8523219000 0x7aa0987400
	void SetConstraintMode(byte ConstraintMode);// 0xffffff8523219000 0x7aa09874e0
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0xffffff8523219000 0x7aa09875c0
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0xffffff8523219000 0x7aa09876a0
	void SetCollisionProfileName(FName InCollisionProfileName);// 0xffffff8523219000 0x7aa0987780
	void SetCollisionObjectType(byte Channel);// 0xffffff8523219000 0x7aa0987860
	void SetCollisionEnabled(byte NewType);// 0xffffff8523219000 0x7aa0987940
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0xffffff8523219000 0x7aa0987a20
	void SetCastShadow(bool NewCastShadow);// 0xffffff8523219000 0x7aa0987b00
	void SetBoundsScale(float NewBoundsScale);// 0xffffff8523219000 0x7aa0987be0
	void SetAngularDamping(float InDamping);// 0xffffff8523219000 0x7aa0987cc0
	void SetAllUseCCD(bool InUseCCD);// 0xffffff8523219000 0x7aa0987da0
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0xffffff8523219000 0x7aa0987e80
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0xffffff8523219000 0x7aa0987f60
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0xffffff8523219000 0x7aa0988040
	void SetAllMassScale(float InMassScale);// 0xffffff8523219000 0x7aa0988120
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0xffffff8523219000 0x7aa0988200
	void PutRigidBodyToSleep(FName BoneName);// 0xffffff8523219000 0x7aa09882e0
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xffffff8523219000 0x7aa09883c0
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xffffff8523219000 0x7aa09884a0
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xffffff8523219000 0x7aa0988580
	bool K2_IsQueryCollisionEnabled();// 0xffffff8523219000 0x7aa0988660
	bool K2_IsPhysicsCollisionEnabled();// 0xffffff8523219000 0x7aa0988740
	bool K2_IsCollisionEnabled();// 0xffffff8523219000 0x7aa0988820
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xffffff8523219000 0x7aa0988900
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0xffffff8523219000 0x7aa09889e0
	bool IsOverlappingActor(const Actor* Other);// 0xffffff8523219000 0x7aa0988ac0
	bool IsGravityEnabled();// 0xffffff8523219000 0x7aa0988ba0
	bool IsAnyRigidBodyAwake();// 0xffffff8523219000 0x7aa0988c80
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0xffffff8523219000 0x7aa0988d60
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0xffffff8523219000 0x7aa0988e40
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0xffffff8523219000 0x7aa0988f20
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0xffffff8523219000 0x7aa0989000
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0xffffff8523219000 0x7aa0985720
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0xffffff8523219000 0x7aa0985800
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0xffffff8523219000 0x7aa09858e0
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0xffffff8523219000 0x7aa09859c0
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0xffffff8523219000 0x7aa0985aa0
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0xffffff8523219000 0x7aa0985b80
	int GetNumMaterials();// 0xffffff8523219000 0x7aa0985c60
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0xffffff8523219000 0x7aa0985d40
	MaterialInterface* GetMaterial(int ElementIndex);// 0xffffff8523219000 0x7aa0985e20
	float GetMassScale(FName BoneName);// 0xffffff8523219000 0x7aa0985f00
	float GetMass();// 0xffffff8523219000 0x7aa0985fe0
	float GetLinearDamping();// 0xffffff8523219000 0x7aa09860c0
	Vector GetInertiaTensor(FName BoneName);// 0xffffff8523219000 0x7aa09861a0
	bool GetGenerateOverlapEvents();// 0xffffff8523219000 0x7aa0986280
	byte GetCollisionResponseToChannel(byte Channel);// 0xffffff8523219000 0x7aa0986360
	FName GetCollisionProfileName();// 0xffffff8523219000 0x7aa0986440
	byte GetCollisionObjectType();// 0xffffff8523219000 0x7aa0986520
	byte GetCollisionEnabled();// 0xffffff8523219000 0x7aa0986600
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0xffffff8523219000 0x7aa09866e0
	Vector GetCenterOfMass(FName BoneName);// 0xffffff8523219000 0x7aa09867c0
	float GetAngularDamping();// 0xffffff8523219000 0x7aa09868a0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0xffffff8523219000 0x7aa0986980
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0xffffff8523219000 0x7aa0986a60
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0xffffff8523219000 0x7aa0986c20
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0xffffff8523219000 0x7aa0986d00
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0xffffff8523219000 0x7aa0986de0
	void ClearMoveIgnoreComponents();// 0xffffff8523219000 0x7aa0986ec0
	void ClearMoveIgnoreActors();// 0xffffff8523219000 0x7aa0986fa0
	bool CanCharacterStepUp(Pawn* Pawn);// 0xffffff8523219000 0x7aa0987080
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0xffffff8523219000 0x7aa0987160
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0xffffff8523219000 0x7aa0987240
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0xffffff8523219000 0x7aa0987320
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0xffffff8523219000 0x7aa0983a40
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0xffffff8523219000 0x7aa0983b20
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0xffffff8523219000 0x7aa0983c00
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0xffffff8523219000 0x7aa0983ce0
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0xffffff8523219000 0x7aa0983dc0
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0xffffff8523219000 0x7aa0983ea0
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0xffffff8523219000 0x7aa0983f80
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0xffffff8523219000 0x7aa0984060
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0xffffff8523219000 0x7aa0984140
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0xffffff8523219000 0x7aa0984220

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7aa0924200
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7aa0922180
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7aa0922200

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1] 0x7aa09e8a00
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1] 0x7aa09e8a80
	enum SleepFamily;//[Offset: 0xa, Size: 0x1] 0x7aa09e8b80
	byte DOFMode;//[Offset: 0xb, Size: 0x1] 0x7aa09e8c00
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7aa09e8c80
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x7aa09e8d00
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x7aa09e8d80
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1] 0x7aa09e8e00
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1] 0x7aa09e8e80
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1] 0x7aa09e8f00
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1] 0x7aa09e8f80
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1] 0x7aa09e9000
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1] 0x7aa09e9080
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1] 0x7aa09e9100
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1] 0x7aa09e9180
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1] 0x7aa09e9200
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1] 0x7aa09e9280
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1] 0x7aa09e9300
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1] 0x7aa09e9380
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1] 0x7aa09e9400
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1] 0x7aa09e9480
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1] 0x7aa09e7400
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1] 0x7aa09e7480
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1] 0x7aa09e7500
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1] 0x7aa09e7580
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8] 0x7aa093ed30
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30] 0x7aa09e6800
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4] 0x7aa093ee10
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4] 0x7aa093ee80
	float LinearDamping;//[Offset: 0x68, Size: 0x4] 0x7aa093eef0
	float AngularDamping;//[Offset: 0x6c, Size: 0x4] 0x7aa093ef60
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc] 0x7aa09e6880
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc] 0x7aa09e6900
	float MassScale;//[Offset: 0x88, Size: 0x4] 0x7aa093efd0
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc] 0x7aa09e6980
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10] 0x7aa09e6a80
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8] 0x7aa09e6b00
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4] 0x7aa093f0b0
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4] 0x7aa093f120
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4] 0x7aa093f190
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4] 0x7aa093f200
	int PositionSolverIterationCount;//[Offset: 0xd0, Size: 0x4] 0x7aa093f270
	int VelocitySolverIterationCount;//[Offset: 0xd4, Size: 0x4] 0x7aa093f2e0

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20] 0x7aa09e6600
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10] 0x7aa09e6780

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1] 0x7aa09e7680
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1] 0x7aa09e7700
	byte Pawn;//[Offset: 0x2, Size: 0x1] 0x7aa09e7780
	byte Visibility;//[Offset: 0x3, Size: 0x1] 0x7aa09e7800
	byte Camera;//[Offset: 0x4, Size: 0x1] 0x7aa09e7880
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1] 0x7aa09e7900
	byte Vehicle;//[Offset: 0x6, Size: 0x1] 0x7aa09e7980
	byte Destructible;//[Offset: 0x7, Size: 0x1] 0x7aa09e7a00
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1] 0x7aa09e7a80
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1] 0x7aa09e7b00
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1] 0x7aa09e7b80
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1] 0x7aa09e7c00
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1] 0x7aa09e7c80
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1] 0x7aa09e7d00
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1] 0x7aa09e7e00
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1] 0x7aa09e7e80
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1] 0x7aa09e7f00
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1] 0x7aa09e7f80
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1] 0x7aa09e8000
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1] 0x7aa09e8080
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1] 0x7aa09e8100
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1] 0x7aa09e8180
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1] 0x7aa09e8200
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1] 0x7aa09e8280
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1] 0x7aa09e8300
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1] 0x7aa09e8380
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1] 0x7aa09e8400
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1] 0x7aa09e6380
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1] 0x7aa09e6400
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1] 0x7aa09e6480
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1] 0x7aa09e6500
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1] 0x7aa09e6580

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8] 0x7aa093eda0
	byte Response;//[Offset: 0x8, Size: 0x1] 0x7aa09e6680

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1] 0x7aa09e6a00
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4] 0x7aa093f040

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4] 0x7a9c6dcd40
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1] 0x7a9c7d4700
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x7a9c7d4780
	float Restitution;//[Offset: 0x30, Size: 0x4] 0x7a9c6dcdb0
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1] 0x7a9c7d4800
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x7a9c7d4880
	float Density;//[Offset: 0x38, Size: 0x4] 0x7a9c6dce20
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4] 0x7a9c6dce90
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4] 0x7a9c6dcf00
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8] 0x7a9c7d4900
	byte SurfaceType;//[Offset: 0x50, Size: 0x1] 0x7a9c7d4980
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4] 0x7a9c6dcf70
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10] 0x7a9c7d4a80

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8] 0x7a9ca59300
	float FrictionScale;//[Offset: 0x8, Size: 0x4] 0x7a9ca0dde0

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4] 0x7a9c7f97e0

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8] 0x7a9cb2b880

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8] 0x7a9cbff280
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x14] 0x7a9cbff300
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x68, Size: 0x10] 0x7a9cbff400
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 0x10] 0x7a9cbff500
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0xffffff8523219000 0x7a9cbd75c0
	PhysicalMaterial* GetPhysicalMaterial();// 0xffffff8523219000 0x7a9cbd76a0
	Material* GetBaseMaterial();// 0xffffff8523219000 0x7a9cbd7780

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x50] 0x7a9c81cf80

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 0x4] 0x7a9ca64bc0
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 0x10] 0x7a9cb02300
	LinearColor FalloffColor;//[Offset: 0x14, Size: 0x10] 0x7a9cb02380
	LinearColor BoundaryColorBleed;//[Offset: 0x24, Size: 0x10] 0x7a9cb02400
	float ExtinctionScale;//[Offset: 0x34, Size: 0x4] 0x7a9ca64c30
	float NormalScale;//[Offset: 0x38, Size: 0x4] 0x7a9ca64ca0
	float ScatteringDistribution;//[Offset: 0x3c, Size: 0x4] 0x7a9ca64d10
	float IOR;//[Offset: 0x40, Size: 0x4] 0x7a9ca64d80
	float Roughness0;//[Offset: 0x44, Size: 0x4] 0x7a9ca64df0
	float Roughness1;//[Offset: 0x48, Size: 0x4] 0x7a9ca64e60
	float LobeMix;//[Offset: 0x4c, Size: 0x4] 0x7a9ca64ed0

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4] 0x7af958f200
	float G;//[Offset: 0x4, Size: 0x4] 0x7af958f270
	float B;//[Offset: 0x8, Size: 0x4] 0x7af958f2e0
	float A;//[Offset: 0xc, Size: 0x4] 0x7af958f350

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7a9ca1f980
	float EmissiveBoost;//[Offset: 0x4, Size: 0x4] 0x7a9ca0b4c0
	float DiffuseBoost;//[Offset: 0x8, Size: 0x4] 0x7a9ca0b530
	float ExportResolutionScale;//[Offset: 0xc, Size: 0x4] 0x7a9ca0b5a0
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7a9ca1fa00
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x7a9ca1fa80
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x7a9ca1fb00
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x7a9ca1fb80

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4] 0x7a9ca0b610
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4] 0x7a9ca0b680
	FName TextureName;//[Offset: 0x8, Size: 0x8] 0x7a9ca0b6f0

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8] 0x7a9c6e8000
	ScalarMaterialInput Metallic;//[Offset: 0x90, Size: 0xc] 0x7a9c6e8080
	ScalarMaterialInput Specular;//[Offset: 0xa4, Size: 0xc] 0x7a9c6e8100
	VectorMaterialInput Normal;//[Offset: 0xb8, Size: 0xc] 0x7a9c6e8180
	ColorMaterialInput EmissiveColor;//[Offset: 0xcc, Size: 0xc] 0x7a9c6e8200
	byte MaterialDomain;//[Offset: 0xe0, Size: 0x1] 0x7a9c6e8280
	byte BlendMode;//[Offset: 0xe1, Size: 0x1] 0x7a9c6e8300
	byte DecalBlendMode;//[Offset: 0xe2, Size: 0x1] 0x7a9c6e8380
	byte MaterialDecalResponse;//[Offset: 0xe3, Size: 0x1] 0x7a9c6e8400
	byte ShadingModel;//[Offset: 0xe4, Size: 0x1] 0x7a9c6e6380
	float OpacityMaskClipValue;//[Offset: 0xe8, Size: 0x4] 0x7a9c6d5020
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xec, Size: 0x1] 0x7a9c6e6400
	VectorMaterialInput WorldPositionOffset;//[Offset: 0xf0, Size: 0xc] 0x7a9c6e6480
	ScalarMaterialInput Refraction;//[Offset: 0x104, Size: 0xc] 0x7a9c6e6500
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x118, Size: 0x10] 0x7a9c6e6580
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x130, Size: 0xc] 0x7a9c6e6600
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x144, Size: 0x1] 0x7a9c6e6680
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x144, Size: 0x1] 0x7a9c6e6700
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x144, Size: 0x1] 0x7a9c6e6780
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x144, Size: 0x1] 0x7a9c6e6800
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x144, Size: 0x1] 0x7a9c6e6880
	bool TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x144, Size: 0x1] 0x7a9c6e6900
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x144, Size: 0x1] 0x7a9c6e6980
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x144, Size: 0x1] 0x7a9c6e6a00
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x145, Size: 0x1] 0x7a9c6e6a80
	int NumCustomizedUVs;//[Offset: 0x148, Size: 0x4] 0x7a9c6d5090
	byte TranslucencyLightingMode;//[Offset: 0x14c, Size: 0x1] 0x7a9c6e6b00
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x150, Size: 0x4] 0x7a9c6d5100
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x154, Size: 0x1] 0x7a9c6e6b80
	float TranslucentShadowDensityScale;//[Offset: 0x158, Size: 0x4] 0x7a9c6d5170
	float TranslucentSelfShadowDensityScale;//[Offset: 0x15c, Size: 0x4] 0x7a9c6d51e0
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x160, Size: 0x4] 0x7a9c6d5250
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x164, Size: 0x4] 0x7a9c6d52c0
	float TranslucentBackscatteringExponent;//[Offset: 0x168, Size: 0x4] 0x7a9c6d5330
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x16c, Size: 0x10] 0x7a9c6e6c00
	float TranslucentShadowStartOffset;//[Offset: 0x17c, Size: 0x4] 0x7a9c6d53a0
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 0x1] 0x7a9c6e6c80
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x180, Size: 0x1] 0x7a9c6e6d00
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x180, Size: 0x1] 0x7a9c6e6d80
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x180, Size: 0x1] 0x7a9c6e6e00
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x180, Size: 0x1] 0x7a9c6e6e80
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x180, Size: 0x1] 0x7a9c6e6f00
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x180, Size: 0x1] 0x7a9c6e5f80
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x180, Size: 0x1] 0x7a9c6e6f80
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x181, Size: 0x1] 0x7a9c6e7000
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x181, Size: 0x1] 0x7a9c6e7080
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x181, Size: 0x1] 0x7a9c6e7100
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x181, Size: 0x1] 0x7a9c6e7180
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x181, Size: 0x1] 0x7a9c6e7200
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x181, Size: 0x1] 0x7a9c6e7280
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x181, Size: 0x1] 0x7a9c6e7300
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x181, Size: 0x1] 0x7a9c6e7380
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x182, Size: 0x1] 0x7a9c6e5300
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x182, Size: 0x1] 0x7a9c6e5380
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x182, Size: 0x1] 0x7a9c6e5400
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x182, Size: 0x1] 0x7a9c6e5480
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x182, Size: 0x1] 0x7a9c6e5500
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x182, Size: 0x1] 0x7a9c6e5580
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x182, Size: 0x1] 0x7a9c6e5600
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x182, Size: 0x1] 0x7a9c6e5680
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x183, Size: 0x1] 0x7a9c6e5700
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x183, Size: 0x1] 0x7a9c6e5780
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x183, Size: 0x1] 0x7a9c6e5800
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x183, Size: 0x1] 0x7a9c6e5880
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x183, Size: 0x1] 0x7a9c6e5900
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x183, Size: 0x1] 0x7a9c6e5980
	byte D3D11TessellationMode;//[Offset: 0x184, Size: 0x1] 0x7a9c6e5a00
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x185, Size: 0x1] 0x7a9c6e5a80
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x185, Size: 0x1] 0x7a9c6e5b00
	float MaxDisplacement;//[Offset: 0x188, Size: 0x4] 0x7a9c6d5410
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18c, Size: 0x1] 0x7a9c6e5b80
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18c, Size: 0x1] 0x7a9c6e5c00
	MaterialExpression*[] Expressions;//[Offset: 0x190, Size: 0x10] 0x7a9c6e5d00
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x1a0, Size: 0x10] 0x7a9c6e5e00
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x1b0, Size: 0x10] 0x7a9c6e5f00
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c0, Size: 0x1] 0x7a9c6e6000
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c0, Size: 0x1] 0x7a9c6e6080
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c0, Size: 0x1] 0x7a9c6e6100
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c0, Size: 0x1] 0x7a9c6e6180
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c0, Size: 0x1] 0x7a9c6e6200
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c0, Size: 0x1] 0x7a9c6e6280
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c0, Size: 0x1] 0x7a9c6e6300
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c0, Size: 0x1] 0x7a9c6e4280
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c1, Size: 0x1] 0x7a9c6e4300
	uint32 UsageFlagWarnings;//[Offset: 0x1c4, Size: 0x4] 0x7a9c6d5480
	byte BlendableLocation;//[Offset: 0x1c8, Size: 0x1] 0x7a9c6e4380
	int BlendablePriority;//[Offset: 0x1cc, Size: 0x4] 0x7a9c6d54f0
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1] 0x7a9c6e4400
	byte RefractionMode;//[Offset: 0x1d1, Size: 0x1] 0x7a9c6e4480
	float RefractionDepthBias;//[Offset: 0x1d4, Size: 0x4] 0x7a9c6d5560
	Guid StateId;//[Offset: 0x1d8, Size: 0x10] 0x7a9c6e4500
	bool[] CachedQualityLevelsUsed;//[Offset: 0x1f0, Size: 0x10] 0x7a9c6e4600
	Texture*[] ExpressionTextureReferences;//[Offset: 0x280, Size: 0x10] 0x7a9c6e4700

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4] 0x7a963ec410
	FName ExpressionName;//[Offset: 0x4, Size: 0x8] 0x7a963ec480

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4] 0x7a963ec560

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4] 0x7a963ec5d0
	FName ExpressionName;//[Offset: 0x4, Size: 0x8] 0x7a963ec640

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8] 0x7a9cb0b880
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8] 0x7a9cb0b900
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7a9cb0b980

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x40, Size: 0x10] 0x7a9c6d7e80
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7a9c7b0d00
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x7a9c7b0d80
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x58, Size: 0x10] 0x7a9c7b0e80
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7a9c7b0f00

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10] 0x7a9c7b0f80
	byte MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1] 0x7a9c7b1000

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10] 0x7a9ca1f600
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8] 0x7a9ca1f680

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10] 0x7a9ca1f700
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8] 0x7a9ca1f780

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10] 0x7a9c7b1e80
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10] 0x7a9c7b1f80
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10] 0x7a9c7b2080

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4] 0x7a9ca0b370

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0b3e0
	Guid ID;//[Offset: 0x8, Size: 0x10] 0x7a9ca50f00

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10] 0x7a9ca50e80

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x30, Size: 0x10] 0x7a9cbf0e80
	int LODBias;//[Offset: 0x40, Size: 0x4] 0x7a9cbc2150
	int NumCinematicMipLevels;//[Offset: 0x44, Size: 0x4] 0x7a9cbc21c0
	byte CompressionSettings;//[Offset: 0x48, Size: 0x1] 0x7a9cbf0f00
	byte Filter;//[Offset: 0x49, Size: 0x1] 0x7a9cbf0f80
	byte LODGroup;//[Offset: 0x4a, Size: 0x1] 0x7a9cbf1000
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4b, Size: 0x1] 0x7a9cbf1080
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4b, Size: 0x1] 0x7a9cbbf800
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4b, Size: 0x1] 0x7a9cbbf880
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4b, Size: 0x1] 0x7a9cbbf900
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4b, Size: 0x1] 0x7a9cbbf980
	int CachedCombinedLODBias;//[Offset: 0x4c, Size: 0x4] 0x7a9cbc2230
	AssetUserData*[] AssetUserData;//[Offset: 0x50, Size: 0x10] 0x7a9cbbfa80

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7aa07d0680
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7aa07d0700
	int FaceIndex;//[Offset: 0x4, Size: 0x4] 0x7a963ebf40
	float Time;//[Offset: 0x8, Size: 0x4] 0x7a963ebfb0
	float Distance;//[Offset: 0xc, Size: 0x4] 0x7a963ec020
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc] 0x7aa07d0780
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc] 0x7aa07d0800
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc] 0x7aa07d0880
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc] 0x7aa07d0900
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc] 0x7aa07d0980
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc] 0x7aa07d0a00
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4] 0x7a963ec090
	int Item;//[Offset: 0x5c, Size: 0x4] 0x7a963ec100
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8] 0x7aa07d0a80
	Actor* Actor;//[Offset: 0x68, Size: 0x8] 0x7aa07d0b00
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8] 0x7aa07d0c00
	FName BoneName;//[Offset: 0x78, Size: 0x8] 0x7a963ec170
	FName MyBoneName;//[Offset: 0x80, Size: 0x8] 0x7a963ec1e0

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc] 0x7af81c3e00
	Vector Max;//[Offset: 0xc, Size: 0xc] 0x7af81c3e80
	byte IsValid;//[Offset: 0x18, Size: 0x1] 0x7af81c3f00

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58] 0x7a9cd45500
	FName BoneName;//[Offset: 0x80, Size: 0x8] 0x7a9cd1e9b0
	byte PhysicsType;//[Offset: 0x88, Size: 0x1] 0x7a9cd45580
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1] 0x7a9cd45600
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1] 0x7a9cd45680
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1] 0x7a9cd45700
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1] 0x7a9cd45780
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1] 0x7a9cd45800
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1] 0x7a9cd45880
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1] 0x7a9cd45900
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1] 0x7a9cd45980
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1] 0x7a9cd45a00
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8] 0x7a9cd45a80
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10] 0x7a9cd45b00
	BodyInstance DefaultInstance;//[Offset: 0x110, Size: 0x148] 0x7a9cd45b80
	Vector BuildScale3D;//[Offset: 0x260, Size: 0xc] 0x7a9cd45c00

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10] 0x7aa096e080
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10] 0x7aa096e280
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10] 0x7aa096e480
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10] 0x7aa096c680
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10] 0x7aa096c900

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x7aa096df80
	float Radius;//[Offset: 0x3c, Size: 0x4] 0x7aa0938270

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4] 0x7aa0938660
	FName Name;//[Offset: 0xc, Size: 0x8] 0x7aa09386d0
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7aa096c800

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x7aa096e100
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc] 0x7aa096e180
	float X;//[Offset: 0x48, Size: 0x4] 0x7aa09382e0
	float Y;//[Offset: 0x4c, Size: 0x4] 0x7aa0938350
	float Z;//[Offset: 0x50, Size: 0x4] 0x7aa09383c0

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x7aa096e300
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc] 0x7aa096e380
	float Radius;//[Offset: 0x48, Size: 0x4] 0x7aa0938430
	float Length;//[Offset: 0x4c, Size: 0x4] 0x7aa09384a0

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10] 0x7aa096e580
	Box ElemBox;//[Offset: 0x40, Size: 0x1c] 0x7aa096e600
	Transform Transform;//[Offset: 0x60, Size: 0x30] 0x7aa096e680

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10] 0x7af81c4280
	Vector Translation;//[Offset: 0x10, Size: 0xc] 0x7af81c4300
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc] 0x7af81c4380

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4] 0x7af958da60
	float Y;//[Offset: 0x4, Size: 0x4] 0x7af958dad0
	float Z;//[Offset: 0x8, Size: 0x4] 0x7af958db40
	float W;//[Offset: 0xc, Size: 0x4] 0x7af958dbb0

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x7aa096c700
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc] 0x7aa096c780
	float Radius0;//[Offset: 0x48, Size: 0x4] 0x7aa0938510
	float Radius1;//[Offset: 0x4c, Size: 0x4] 0x7aa0938580
	float Length;//[Offset: 0x50, Size: 0x4] 0x7aa09385f0

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0xffffff8523219000 0x7a9c6c5b80
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0xffffff8523219000 0x7a9c6c5c60
	void SetScalarParameterValue(FName ParameterName, float Value);// 0xffffff8523219000 0x7a9c6c5d40
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0xffffff8523219000 0x7a9c6c5e20
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0xffffff8523219000 0x7a9c6c5f00
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0xffffff8523219000 0x7a9c6c5fe0
	float K2_GetScalarParameterValue(FName ParameterName);// 0xffffff8523219000 0x7a9c6c60c0
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0xffffff8523219000 0x7a9c6c61a0
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0xffffff8523219000 0x7a9c6c6280
	void CopyInterpParameters(MaterialInstance* Source);// 0xffffff8523219000 0x7a9c6c6360

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8] 0x7a9cbfea80
	MaterialInterface* Parent;//[Offset: 0x90, Size: 0x8] 0x7a9cbfeb00
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a, Size: 0x1] 0x7a9cbfeb80
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a, Size: 0x1] 0x7a9cbfec00
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xa0, Size: 0x10] 0x7a9cbfed00
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xb0, Size: 0x10] 0x7a9cbfee00
	TextureParameterValue[] TextureParameterValues;//[Offset: 0xc0, Size: 0x10] 0x7a9cbfef00
	FontParameterValue[] FontParameterValues;//[Offset: 0xd0, Size: 0x10] 0x7a9cbff000
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0xe0, Size: 0x8] 0x7a9cbff080
	Texture*[] PermutationTextureReferences;//[Offset: 0xf8, Size: 0x10] 0x7a9cbff180
	StaticParameterSet StaticParameters;//[Offset: 0x108, Size: 0x40] 0x7a9cbff200

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7a9ca1ea80
	float ParameterValue;//[Offset: 0x10, Size: 0x4] 0x7a9ca0b7d0
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10] 0x7a9ca1eb00

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7a9ca0b840
	byte Association;//[Offset: 0x8, Size: 0x1] 0x7a9ca1ee80
	int Index;//[Offset: 0xc, Size: 0x4] 0x7a9ca0b8b0

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7a9ca1eb80
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10] 0x7a9ca1ec00
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10] 0x7a9ca1ec80

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7a9ca1ed00
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8] 0x7a9ca1ed80
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10] 0x7a9ca1ee00

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7a9ca1ef00
	Font* FontValue;//[Offset: 0x10, Size: 0x8] 0x7a9ca1ef80
	int FontPage;//[Offset: 0x18, Size: 0x4] 0x7a9ca0b920
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10] 0x7a9ca1f000

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1] 0x7a9cdc0f80
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10] 0x7a9cdc1080
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10] 0x7a9cd9f880
	int IsRemapped;//[Offset: 0x58, Size: 0x4] 0x7a9cd7d0c0
	float EmScale;//[Offset: 0x5c, Size: 0x4] 0x7a9cd7d130
	float Ascent;//[Offset: 0x60, Size: 0x4] 0x7a9cd7d1a0
	float Descent;//[Offset: 0x64, Size: 0x4] 0x7a9cd7d210
	float Leading;//[Offset: 0x68, Size: 0x4] 0x7a9cd7d280
	int Kerning;//[Offset: 0x6c, Size: 0x4] 0x7a9cd7d2f0
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8] 0x7a9cd9f900
	int NumCharacters;//[Offset: 0x118, Size: 0x4] 0x7a9cd7d360
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10] 0x7a9cd9f980
	float ScalingFactor;//[Offset: 0x130, Size: 0x4] 0x7a9cd7d440
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4] 0x7a9cd7d4b0
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8] 0x7a9cd7d520
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38] 0x7a9cd9fa00

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4] 0x7a9ca076a0
	int StartV;//[Offset: 0x4, Size: 0x4] 0x7a9ca07710
	int USize;//[Offset: 0x8, Size: 0x4] 0x7a9ca07780
	int VSize;//[Offset: 0xc, Size: 0x4] 0x7a9ca077f0
	byte TextureIndex;//[Offset: 0x10, Size: 0x1] 0x7a9ca1a380
	int VerticalOffset;//[Offset: 0x14, Size: 0x4] 0x7a9ca07860

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0xb8, Size: 0x4] 0x7a9cd75c60
	int LevelIndex;//[Offset: 0xbc, Size: 0x4] 0x7a9cd75cd0
	int FirstResourceMemMip;//[Offset: 0xc0, Size: 0x4] 0x7a9cd75d40
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1] 0x7a9cd91180
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1] 0x7a9cd91200
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc4, Size: 0x1] 0x7a9cd91280
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc4, Size: 0x1] 0x7a9cd91300
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc4, Size: 0x1] 0x7a9cd91380
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc4, Size: 0x1] 0x7a9cd91400
	byte AddressX;//[Offset: 0xc5, Size: 0x1] 0x7a9cd91480
	byte AddressY;//[Offset: 0xc6, Size: 0x1] 0x7a9cd91500
	IntPoint ImportedSize;//[Offset: 0xc8, Size: 0x8] 0x7a9cd91580
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xd0, Size: 0x8] 0x7a9cd75db0
	int Blueprint_GetSizeY();// 0xffffff8523219000 0x7a9cd84300
	int Blueprint_GetSizeX();// 0xffffff8523219000 0x7a9cd843e0

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4] 0x7af958f510
	int Y;//[Offset: 0x4, Size: 0x4] 0x7af958d8a0

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10] 0x7a9ca08c10
	float Height;//[Offset: 0x10, Size: 0x4] 0x7a9ca08c80
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x7a9ca19d00
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1] 0x7a9ca19d80
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1] 0x7a9ca19e00
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1] 0x7a9ca19e80
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1] 0x7a9ca19f00
	byte CharacterSet;//[Offset: 0x15, Size: 0x1] 0x7a9ca19f80
	FString Chars;//[Offset: 0x18, Size: 0x10] 0x7a9ca08cf0
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10] 0x7a9ca08d60
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10] 0x7a9ca08dd0
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10] 0x7a9ca08e40
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7a9ca1a080
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x7a9ca1a100
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10] 0x7a9ca1a180
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x7a9ca1a200
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4] 0x7a9ca08eb0
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4] 0x7a9ca08f20
	int XPadding;//[Offset: 0x78, Size: 0x4] 0x7a9ca08f90
	int YPadding;//[Offset: 0x7c, Size: 0x4] 0x7a9ca09000
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4] 0x7a9ca07390
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4] 0x7a9ca07400
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4] 0x7a9ca07470
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4] 0x7a9ca074e0
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7a9ca1a280
	int Kerning;//[Offset: 0x94, Size: 0x4] 0x7a9ca07550
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x7a9ca1a300
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4] 0x7a9ca075c0
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4] 0x7a9ca07630

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10] 0x7aa089dc80
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18] 0x7aa089dd00
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10] 0x7aa089e380

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10] 0x7aa089e200

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7aa083aea0
	FontData Font;//[Offset: 0x8, Size: 0x20] 0x7aa089e100

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10] 0x7aa083af10
	enum Hinting;//[Offset: 0x10, Size: 0x1] 0x7aa089df00
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1] 0x7aa089e000
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4] 0x7aa083aff0
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8] 0x7aa089e080

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10] 0x7aa089e280
	float ScalingFactor;//[Offset: 0x10, Size: 0x4] 0x7aa083af80

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10] 0x7aa089de00
	FString Cultures;//[Offset: 0x28, Size: 0x10] 0x7aa083ae30

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x7af81c5d80
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x7af81c5e00

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x7af81c5e80
	int Value;//[Offset: 0x4, Size: 0x4] 0x7af958fb30

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7a9ca1fc00
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7a9ca1fc80
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7a9ca1fd00
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7a9ca1fd80
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7a9ca1fe00
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7a9ca1fe80
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7a9ca1ff00
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7a9ca1ff80
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7a9ca1e780
	byte BlendMode;//[Offset: 0x2, Size: 0x1] 0x7a9ca1e800
	byte ShadingModel;//[Offset: 0x3, Size: 0x1] 0x7a9ca1e880
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4] 0x7a9ca0b760

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10] 0x7a9cb02800
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10] 0x7a9cb02c80
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10] 0x7a9cb02f80
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10] 0x7a9cb01180

--------------------------------
Class: StaticSwitchParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7a9cb02580
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7a9cb02600
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1] 0x7a9cb02680
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10] 0x7a9cb02700

--------------------------------
Class: StaticComponentMaskParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7a9cb02880
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7a9cb02900
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1] 0x7a9cb02980
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1] 0x7a9cb02a00
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1] 0x7a9cb02a80
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x7a9cb02b00
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10] 0x7a9cb02b80

--------------------------------
Class: StaticTerrainLayerWeightParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7a9cb02d00
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7a9cb02d80
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10] 0x7a9cb02e00
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4] 0x7a9ca65090
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7a9cb02e80

--------------------------------
Class: StaticMaterialLayersParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7a9cb03000
	MaterialLayersFunctions Value;//[Offset: 0x10, Size: 0x40] 0x7a9cb03080
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7a9cb03100
	Guid ExpressionGUID;//[Offset: 0x54, Size: 0x10] 0x7a9cb03180

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10] 0x7a9ca51000
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10] 0x7a9ca1f800
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10] 0x7a9ca1f900
	FString KeyString;//[Offset: 0x30, Size: 0x10] 0x7a9ca0b450

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1] 0x7a9cb0dd80
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1] 0x7a9cb0de00
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1] 0x7a9cb0de80
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x338, Size: 0x1] 0x7a9cb0df00
	float BaseEyeHeight;//[Offset: 0x33c, Size: 0x4] 0x7a9ca6a2d0
	byte AutoPossessPlayer;//[Offset: 0x340, Size: 0x1] 0x7a9cb0df80
	enum AutoPossessAI;//[Offset: 0x341, Size: 0x1] 0x7a9cb0e080
	byte RemoteViewPitch;//[Offset: 0x342, Size: 0x1] 0x7a9cb0e100
	class Controller* AIControllerClass;//[Offset: 0x348, Size: 0x8] 0x7a9cb0e180
	PlayerState* PlayerState;//[Offset: 0x350, Size: 0x8] 0x7a9cb0e200
	Controller* LastHitBy;//[Offset: 0x360, Size: 0x8] 0x7a9cb0e280
	Controller* Controller;//[Offset: 0x368, Size: 0x8] 0x7a9cb0e300
	Vector ControlInputVector;//[Offset: 0x374, Size: 0xc] 0x7a9cb0e380
	Vector LastControlInputVector;//[Offset: 0x380, Size: 0xc] 0x7a9cb0e400
	void SpawnDefaultController();// 0xffffff8523219000 0x7aa09837a0
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0xffffff8523219000 0x7aa0983880
	void ReceiveUnpossessed(Controller* OldController);// 0xffffff8523219000 0x7aa0983960
	void ReceivePossessed(Controller* NewController);// 0xffffff8523219000 0x7aa0980080
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0xffffff8523219000 0x7aa0980160
	void OnRep_PlayerState();// 0xffffff8523219000 0x7aa0980240
	void OnRep_Controller();// 0xffffff8523219000 0x7aa0980320
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xffffff8523219000 0x7aa0980400
	Vector K2_GetMovementInputVector();// 0xffffff8523219000 0x7aa09804e0
	bool IsPlayerControlled();// 0xffffff8523219000 0x7aa09805c0
	bool IsMoveInputIgnored();// 0xffffff8523219000 0x7aa09806a0
	bool IsLocallyControlled();// 0xffffff8523219000 0x7aa0980780
	bool IsControlled();// 0xffffff8523219000 0x7aa0980860
	bool IsBotControlled();// 0xffffff8523219000 0x7aa0980940
	Vector GetPendingMovementInputVector();// 0xffffff8523219000 0x7aa0980a20
	Vector GetNavAgentLocation();// 0xffffff8523219000 0x7aa0980b00
	PawnMovementComponent* GetMovementComponent();// 0xffffff8523219000 0x7aa0980be0
	Actor* GetMovementBaseActor(const Pawn* Pawn);// 0xffffff8523219000 0x7aa0980cc0
	Vector GetLastMovementInputVector();// 0xffffff8523219000 0x7aa0980da0
	Rotator GetControlRotation();// 0xffffff8523219000 0x7aa0980e80
	Controller* GetController();// 0xffffff8523219000 0x7aa0980f60
	Rotator GetBaseAimRotation();// 0xffffff8523219000 0x7aa0981040
	void DetachFromControllerPendingDestroy();// 0xffffff8523219000 0x7aa0981120
	Vector ConsumeMovementInputVector();// 0xffffff8523219000 0x7aa0981200
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0xffffff8523219000 0x7aa09812e0
	void AddControllerYawInput(float Val);// 0xffffff8523219000 0x7aa09813c0
	void AddControllerRollInput(float Val);// 0xffffff8523219000 0x7af8134d80
	void AddControllerPitchInput(float Val);// 0xffffff8523219000 0x7aa0887780

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x338, Size: 0x8] 0x7a9cb7eb80
	delegate OnInstigatedAnyDamage;//[Offset: 0x348, Size: 0x10] 0x7a9cb7ec00
	FName StateName;//[Offset: 0x358, Size: 0x8] 0x7a9cb3dfa0
	Pawn* Pawn;//[Offset: 0x360, Size: 0x8] 0x7a9cb7ec80
	Character* Character;//[Offset: 0x370, Size: 0x8] 0x7a9cb7ed00
	SceneComponent* TransformComponent;//[Offset: 0x378, Size: 0x8] 0x7a9cb7ed80
	Rotator ControlRotation;//[Offset: 0x398, Size: 0xc] 0x7a9cb7ee00
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a4, Size: 0x1] 0x7a9cb7ee80
	void UnPossess();// 0xffffff8523219000 0x7a9cb95020
	void StopMovement();// 0xffffff8523219000 0x7a9cb95100
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0xffffff8523219000 0x7a9cb951e0
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0xffffff8523219000 0x7a9cb952c0
	void SetIgnoreLookInput(bool bNewLookInput);// 0xffffff8523219000 0x7a9cb953a0
	void SetControlRotation(out const Rotator NewRotation);// 0xffffff8523219000 0x7a9cb95480
	void ResetIgnoreMoveInput();// 0xffffff8523219000 0x7a9cb95560
	void ResetIgnoreLookInput();// 0xffffff8523219000 0x7a9cb95640
	void ResetIgnoreInputFlags();// 0xffffff8523219000 0x7a9cb91d60
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0xffffff8523219000 0x7a9cb91e40
	void ReceivePossess(Pawn* PossessedPawn);// 0xffffff8523219000 0x7a9cb91f20
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0xffffff8523219000 0x7a9cb92000
	void Possess(Pawn* InPawn);// 0xffffff8523219000 0x7a9cb920e0
	void OnRep_PlayerState();// 0xffffff8523219000 0x7a9cb921c0
	void OnRep_Pawn();// 0xffffff8523219000 0x7a9cb922a0
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0xffffff8523219000 0x7a9cb92380
	Pawn* K2_GetPawn();// 0xffffff8523219000 0x7a9cb92460
	bool IsPlayerController();// 0xffffff8523219000 0x7a9cb92540
	bool IsMoveInputIgnored();// 0xffffff8523219000 0x7a9cb92620
	bool IsLookInputIgnored();// 0xffffff8523219000 0x7a9cb92700
	bool IsLocalPlayerController();// 0xffffff8523219000 0x7a9cb927e0
	bool IsLocalController();// 0xffffff8523219000 0x7a9cb928c0
	Actor* GetViewTarget();// 0xffffff8523219000 0x7a9cb929a0
	Rotator GetDesiredRotation();// 0xffffff8523219000 0x7a9cb92a80
	Rotator GetControlRotation();// 0xffffff8523219000 0x7a9cb92b60
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0xffffff8523219000 0x7a9cb92c40
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0xffffff8523219000 0x7a9cb92d20
	PlayerController* CastToPlayerController();// 0xffffff8523219000 0x7a9cb92e00

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x330, Size: 0x4] 0x7a9c7f0cc0
	FString PlayerName;//[Offset: 0x338, Size: 0x10] 0x7a9c7f0d30
	int PlayerId;//[Offset: 0x358, Size: 0x4] 0x7a9c7f0da0
	byte Ping;//[Offset: 0x35c, Size: 0x1] 0x7a9c7db580
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35e, Size: 0x1] 0x7a9c7d9500
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35e, Size: 0x1] 0x7a9c7d9580
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35e, Size: 0x1] 0x7a9c7d9680
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x35e, Size: 0x1] 0x7a9c7d9700
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x35e, Size: 0x1] 0x7a9c7d9780
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x35e, Size: 0x1] 0x7a9c7d9800
	int StartTime;//[Offset: 0x360, Size: 0x4] 0x7a9c7f0e10
	class LocalMessage* EngineMessageClass;//[Offset: 0x368, Size: 0x8] 0x7a9c7d9880
	FString SavedNetworkAddress;//[Offset: 0x378, Size: 0x10] 0x7a9c6df580
	UniqueNetIdRepl UniqueId;//[Offset: 0x388, Size: 0x28] 0x7a9c7d9900
	Pawn* PawnPrivate;//[Offset: 0x3b8, Size: 0x8] 0x7a9c7d9980
	FString PlayerNamePrivate;//[Offset: 0x430, Size: 0x10] 0x7a9c6df5f0
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0xffffff8523219000 0x7a9c6ccfe0
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0xffffff8523219000 0x7a9c6cd0c0
	void OnRep_UniqueId();// 0xffffff8523219000 0x7a9c6cd1a0
	void OnRep_Score();// 0xffffff8523219000 0x7a9c6cd280
	void OnRep_PlayerName();// 0xffffff8523219000 0x7a9c6cd360
	void OnRep_PlayerId();// 0xffffff8523219000 0x7a9c6cd440
	void OnRep_bIsInactive();// 0xffffff8523219000 0x7a9c6cd520
	FString GetPlayerName();// 0xffffff8523219000 0x7a9c6cd600

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10] 0x7aa089cd80

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x390, Size: 0x8] 0x7a9cb21580
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x398, Size: 0x8] 0x7a9cb21600
	CapsuleComponent* CapsuleComponent;//[Offset: 0x3a0, Size: 0x8] 0x7a9cb21680
	BasedMovementInfo BasedMovement;//[Offset: 0x3a8, Size: 0x30] 0x7a9cb21700
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x3d8, Size: 0x30] 0x7a9cb21780
	float AnimRootMotionTranslationScale;//[Offset: 0x408, Size: 0x4] 0x7a9ca6c4f0
	Vector BaseTranslationOffset;//[Offset: 0x40c, Size: 0xc] 0x7a9cb21800
	Quat BaseRotationOffset;//[Offset: 0x420, Size: 0x10] 0x7a9cb21880
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x430, Size: 0x4] 0x7a9ca6c560
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x434, Size: 0x4] 0x7a9ca6c5d0
	byte ReplicatedMovementMode;//[Offset: 0x438, Size: 0x1] 0x7a9cb21900
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1] 0x7a9cb21980
	float CrouchedEyeHeight;//[Offset: 0x43c, Size: 0x4] 0x7a9ca6c640
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440, Size: 0x1] 0x7a9cb21a00
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x440, Size: 0x1] 0x7a9cb21a80
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x440, Size: 0x1] 0x7a9cb21b00
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x440, Size: 0x1] 0x7a9cb21b80
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x440, Size: 0x1] 0x7a9cb21c00
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x440, Size: 0x1] 0x7a9cb21c80
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x440, Size: 0x1] 0x7a9cb21d00
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x440, Size: 0x1] 0x7a9cb21d80
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x441, Size: 0x1] 0x7a9cb21e00
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x441, Size: 0x1] 0x7a9cb21e80
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x441, Size: 0x1] 0x7a9cb21f00
	float JumpKeyHoldTime;//[Offset: 0x444, Size: 0x4] 0x7a9ca6c6b0
	float JumpForceTimeRemaining;//[Offset: 0x448, Size: 0x4] 0x7a9ca6c720
	float ProxyJumpForceStartedTime;//[Offset: 0x44c, Size: 0x4] 0x7a9ca6c790
	float JumpMaxHoldTime;//[Offset: 0x450, Size: 0x4] 0x7a9ca6c800
	int JumpMaxCount;//[Offset: 0x454, Size: 0x4] 0x7a9ca6c870
	int JumpCurrentCount;//[Offset: 0x458, Size: 0x4] 0x7a9ca6c8e0
	delegate OnReachedJumpApex;//[Offset: 0x460, Size: 0x10] 0x7a9cb21f80
	delegate MovementModeChangedDelegate;//[Offset: 0x480, Size: 0x10] 0x7a9cb0ed00
	delegate OnCharacterMovementUpdated;//[Offset: 0x490, Size: 0x10] 0x7a9cb22000
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x4a0, Size: 0xf8] 0x7a9cb22080
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x5a0, Size: 0x40] 0x7a9cb22100
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x5e0, Size: 0x10] 0x7a9cb20100
	RepRootMotionMontage RepRootMotion;//[Offset: 0x5f0, Size: 0x158] 0x7a9cb20180
	void UnCrouch(bool bClientSimulation);// 0xffffff8523219000 0x7aa0984920
	void StopJumping();// 0xffffff8523219000 0x7aa0984a00
	void StopAnimMontage(AnimMontage* AnimMontage);// 0xffffff8523219000 0x7aa0984ae0
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0xffffff8523219000 0x7aa0984bc0
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0xffffff8523219000 0x7aa0984ca0
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0xffffff8523219000 0x7aa0984d80
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0xffffff8523219000 0x7aa0984e60
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0xffffff8523219000 0x7aa0985020
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0xffffff8523219000 0x7aa0985100
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0xffffff8523219000 0x7aa09851e0
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0xffffff8523219000 0x7aa09852c0
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0xffffff8523219000 0x7aa09853a0
	void OnRep_RootMotion();// 0xffffff8523219000 0x7aa0985480
	void OnRep_ReplicatedBasedMovement();// 0xffffff8523219000 0x7aa0985560
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0xffffff8523219000 0x7aa0985640
	void OnRep_IsCrouched();// 0xffffff8523219000 0x7aa0981d60
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xffffff8523219000 0x7aa0981e40
	void OnLanded(out const HitResult Hit);// 0xffffff8523219000 0x7aa0981f20
	void OnJumped();// 0xffffff8523219000 0x7aa0982000
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xffffff8523219000 0x7aa09820e0
	void K2_UpdateCustomMovement(float DeltaTime);// 0xffffff8523219000 0x7aa09821c0
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xffffff8523219000 0x7aa09822a0
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0xffffff8523219000 0x7aa0982380
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xffffff8523219000 0x7aa0982460
	void Jump();// 0xffffff8523219000 0x7aa0982540
	bool IsPlayingRootMotion();// 0xffffff8523219000 0x7aa0982620
	bool IsPlayingNetworkedRootMotionMontage();// 0xffffff8523219000 0x7aa0982700
	bool IsJumpProvidingForce();// 0xffffff8523219000 0x7aa09827e0
	bool HasAnyRootMotion();// 0xffffff8523219000 0x7aa09828c0
	AnimMontage* GetCurrentMontage();// 0xffffff8523219000 0x7aa09829a0
	Vector GetBaseTranslationOffset();// 0xffffff8523219000 0x7aa0982a80
	Rotator GetBaseRotationOffsetRotator();// 0xffffff8523219000 0x7aa0982b60
	float GetAnimRootMotionTranslationScale();// 0xffffff8523219000 0x7aa0982c40
	void Crouch(bool bClientSimulation);// 0xffffff8523219000 0x7aa0982d20
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xffffff8523219000 0x7aa0982e00
	void ClientCheatWalk();// 0xffffff8523219000 0x7aa0982ee0
	void ClientCheatGhost();// 0xffffff8523219000 0x7aa0982fc0
	void ClientCheatFly();// 0xffffff8523219000 0x7aa09830a0
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xffffff8523219000 0x7aa0983180
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xffffff8523219000 0x7aa0983260
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xffffff8523219000 0x7aa0983340
	void ClientAckGoodMove(float Timestamp);// 0xffffff8523219000 0x7aa0983420
	bool CanJumpInternal();// 0xffffff8523219000 0x7aa0983500
	bool CanJump();// 0xffffff8523219000 0x7aa09835e0
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0xffffff8523219000 0x7aa09836c0

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x708, Size: 0x8] 0x7a9c816100
	class AnimInstance* AnimClass;//[Offset: 0x710, Size: 0x8] 0x7a9c816180
	AnimInstance* AnimScriptInstance;//[Offset: 0x718, Size: 0x8] 0x7a9c816200
	AnimInstance*[] SubInstances;//[Offset: 0x720, Size: 0x10] 0x7a9c816300
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x730, Size: 0x8] 0x7a9c814280
	SingleAnimationPlayData AnimationData;//[Offset: 0x738, Size: 0x18] 0x7a9c814300
	Vector RootBoneTranslation;//[Offset: 0x760, Size: 0xc] 0x7a9c814380
	Vector LineCheckBoundsScale;//[Offset: 0x76c, Size: 0xc] 0x7a9c814400
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x798, Size: 0x10] 0x7a9c814500
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x7a8, Size: 0x10] 0x7a9c814600
	float GlobalAnimRateScale;//[Offset: 0x7d8, Size: 0x4] 0x7a9c7f4990
	byte KinematicBonesUpdateType;//[Offset: 0x7dc, Size: 0x1] 0x7a9c814680
	byte PhysicsTransformUpdateMode;//[Offset: 0x7dd, Size: 0x1] 0x7a9c814700
	byte AnimationMode;//[Offset: 0x7df, Size: 0x1] 0x7a9c814780
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e1, Size: 0x1] 0x7a9c814800
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e1, Size: 0x1] 0x7a9c814880
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7e1, Size: 0x1] 0x7a9c814900
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7e1, Size: 0x1] 0x7a9c814980
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7e1, Size: 0x1] 0x7a9c814a00
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e2, Size: 0x1] 0x7a9c814a80
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e2, Size: 0x1] 0x7a9c814b00
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e2, Size: 0x1] 0x7a9c814b80
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7e2, Size: 0x1] 0x7a9c814c00
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7e2, Size: 0x1] 0x7a9c814c80
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e3, Size: 0x1] 0x7a9c814d00
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e3, Size: 0x1] 0x7a9c814d80
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e3, Size: 0x1] 0x7a9c814e00
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7e3, Size: 0x1] 0x7a9c814e80
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7e3, Size: 0x1] 0x7a9c814f00
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7e3, Size: 0x1] 0x7a9c814f80
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7e3, Size: 0x1] 0x7a9c815000
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e4, Size: 0x1] 0x7a9c815080
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e4, Size: 0x1] 0x7a9c815100
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e4, Size: 0x1] 0x7a9c815180
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7e4, Size: 0x1] 0x7a9c815200
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7e4, Size: 0x1] 0x7a9c815280
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7e4, Size: 0x1] 0x7a9c813200
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7e4, Size: 0x1] 0x7a9c813280
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7e4, Size: 0x1] 0x7a9c813300
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e5, Size: 0x1] 0x7a9c813380
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e5, Size: 0x1] 0x7a9c813400
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e5, Size: 0x1] 0x7a9c813480
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7e5, Size: 0x1] 0x7a9c813500
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7e5, Size: 0x1] 0x7a9c813580
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7e5, Size: 0x1] 0x7a9c813600
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7e5, Size: 0x1] 0x7a9c813680
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7e5, Size: 0x1] 0x7a9c813700
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e6, Size: 0x1] 0x7a9c813780
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e6, Size: 0x1] 0x7a9c813800
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7e6, Size: 0x1] 0x7a9c813880
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x7e8, Size: 0x2] 0x7a9c7f4a00
	float ClothBlendWeight;//[Offset: 0x7ec, Size: 0x4] 0x7a9c7f4a70
	float EdgeStiffness;//[Offset: 0x7f0, Size: 0x4] 0x7a9c7f4ae0
	float BendingStiffness;//[Offset: 0x7f4, Size: 0x4] 0x7a9c7f4b50
	float AreaStiffness;//[Offset: 0x7f8, Size: 0x4] 0x7a9c7f4bc0
	float VolumeStiffness;//[Offset: 0x7fc, Size: 0x4] 0x7a9c7f4c30
	float StrainLimitingStiffness;//[Offset: 0x800, Size: 0x4] 0x7a9c7f4ca0
	float ShapeTargetStiffness;//[Offset: 0x804, Size: 0x4] 0x7a9c7f4d10
	FName[] DisallowedAnimCurves;//[Offset: 0x808, Size: 0x10] 0x7a9c813900
	BodySetup* BodySetup;//[Offset: 0x818, Size: 0x8] 0x7a9c813980
	delegate OnConstraintBroken;//[Offset: 0x828, Size: 0x10] 0x7a9c813a00
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x838, Size: 0x8] 0x7a9c813a80
	float TeleportDistanceThreshold;//[Offset: 0x930, Size: 0x4] 0x7a9c7f4df0
	float TeleportRotationThreshold;//[Offset: 0x934, Size: 0x4] 0x7a9c7f4e60
	uint32 LastPoseTickFrame;//[Offset: 0x940, Size: 0x4] 0x7a9c7f4ed0
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0x9a0, Size: 0x8] 0x7a9c813b00
	delegate OnAnimInitialized;//[Offset: 0xa60, Size: 0x10] 0x7a9c813b80
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0xffffff8523219000 0x7a9c804a00
	void ToggleDisablePostProcessBlueprint();// 0xffffff8523219000 0x7a9c804ae0
	void TermBodiesBelow(FName ParentBoneName);// 0xffffff8523219000 0x7a9c804bc0
	void SuspendClothingSimulation();// 0xffffff8523219000 0x7a9c804ca0
	void Stop();// 0xffffff8523219000 0x7a9c804d80
	void SnapshotPose(out PoseSnapshot Snapshot);// 0xffffff8523219000 0x7a9c804e60
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0xffffff8523219000 0x7a9c804f40
	void SetTeleportRotationThreshold(float Threshold);// 0xffffff8523219000 0x7a9c805020
	void SetTeleportDistanceThreshold(float Threshold);// 0xffffff8523219000 0x7a9c805100
	void SetPosition(float InPos, bool bFireNotifies);// 0xffffff8523219000 0x7a9c8051e0
	void SetPlayRate(float Rate);// 0xffffff8523219000 0x7a9c8052c0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0xffffff8523219000 0x7a9c8053a0
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0xffffff8523219000 0x7a9c805480
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0xffffff8523219000 0x7a9c805560
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0xffffff8523219000 0x7a9c805640
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0xffffff8523219000 0x7a9c801d60
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0xffffff8523219000 0x7a9c801e40
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0xffffff8523219000 0x7a9c801f20
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0xffffff8523219000 0x7a9c802000
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0xffffff8523219000 0x7a9c8020e0
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0xffffff8523219000 0x7a9c8021c0
	void SetClothMaxDistanceScale(float Scale);// 0xffffff8523219000 0x7a9c8022a0
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0xffffff8523219000 0x7a9c802380
	void SetAnimationMode(byte InAnimationMode);// 0xffffff8523219000 0x7a9c802460
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0xffffff8523219000 0x7a9c802540
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0xffffff8523219000 0x7a9c802620
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0xffffff8523219000 0x7a9c802700
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0xffffff8523219000 0x7a9c8027e0
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0xffffff8523219000 0x7a9c8028c0
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0xffffff8523219000 0x7a9c8029a0
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0xffffff8523219000 0x7a9c802a80
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0xffffff8523219000 0x7a9c802b60
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0xffffff8523219000 0x7a9c802c40
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0xffffff8523219000 0x7a9c802d20
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0xffffff8523219000 0x7a9c802e00
	void ResumeClothingSimulation();// 0xffffff8523219000 0x7a9c802ee0
	void ResetClothTeleportMode();// 0xffffff8523219000 0x7a9c802fc0
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0xffffff8523219000 0x7a9c8030a0
	void ResetAllowedAnimCurveEvaluation();// 0xffffff8523219000 0x7a9c803180
	void ResetAllBodiesSimulatePhysics();// 0xffffff8523219000 0x7a9c803260
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0xffffff8523219000 0x7a9c803340
	void Play(bool bLooping);// 0xffffff8523219000 0x7a9c803420
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0xffffff8523219000 0x7a9c803500
	void K2_SetAnimInstanceClass(class Object NewClass);// 0xffffff8523219000 0x7a9c8035e0
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0xffffff8523219000 0x7a9c8036c0
	bool IsPlaying();// 0xffffff8523219000 0x7a9c8037a0
	bool IsClothingSimulationSuspended();// 0xffffff8523219000 0x7a9c803880
	bool IsBodyGravityEnabled(FName BoneName);// 0xffffff8523219000 0x7a9c803960
	bool HasValidAnimationInstance();// 0xffffff8523219000 0x7a9c800080
	float GetTeleportRotationThreshold();// 0xffffff8523219000 0x7a9c800160
	float GetTeleportDistanceThreshold();// 0xffffff8523219000 0x7a9c800240
	AnimInstance* GetSubInstanceByName(FName InName);// 0xffffff8523219000 0x7a9c800320
	Vector GetSkeletalCenterOfMass();// 0xffffff8523219000 0x7a9c800400
	AnimInstance* GetPostProcessInstance();// 0xffffff8523219000 0x7a9c8004e0
	float GetPosition();// 0xffffff8523219000 0x7a9c8005c0
	float GetPlayRate();// 0xffffff8523219000 0x7a9c8006a0
	float GetMorphTarget(FName MorphTargetName);// 0xffffff8523219000 0x7a9c800780
	bool GetDisablePostProcessBlueprint();// 0xffffff8523219000 0x7a9c800860
	bool GetDisableAnimCurves();// 0xffffff8523219000 0x7a9c800940
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0xffffff8523219000 0x7a9c800a20
	float GetClothMaxDistanceScale();// 0xffffff8523219000 0x7a9c800b00
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0xffffff8523219000 0x7a9c800be0
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0xffffff8523219000 0x7a9c800cc0
	AnimInstance* GetAnimInstance();// 0xffffff8523219000 0x7a9c800da0
	byte GetAnimationMode();// 0xffffff8523219000 0x7a9c800e80
	bool GetAllowedAnimCurveEvaluate();// 0xffffff8523219000 0x7a9c800f60
	void ForceClothNextUpdateTeleportAndReset();// 0xffffff8523219000 0x7a9c801040
	void ForceClothNextUpdateTeleport();// 0xffffff8523219000 0x7a9c801120
	FName FindConstraintBoneName(int ConstraintIndex);// 0xffffff8523219000 0x7a9c801200
	void ClearMorphTargets();// 0xffffff8523219000 0x7a9c8012e0
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0xffffff8523219000 0x7a9c8013c0
	void BindClothToMasterPoseComponent();// 0xffffff8523219000 0x7a9c8014a0
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0xffffff8523219000 0x7a9c801580
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0xffffff8523219000 0x7a9c801660
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0xffffff8523219000 0x7a9c801740
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0xffffff8523219000 0x7a9c801820

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x5a0, Size: 0x8] 0x7a9cb76480
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x5a8, Size: 0x8] 0x7a9cb76500
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x658, Size: 0x8] 0x7a9cb76580
	int ForcedLodModel;//[Offset: 0x660, Size: 0x4] 0x7a9cb3b840
	int MinLodModel;//[Offset: 0x664, Size: 0x4] 0x7a9cb3b8b0
	float StreamingDistanceMultiplier;//[Offset: 0x670, Size: 0x4] 0x7a9cb3b920
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x680, Size: 0x10] 0x7a9cb76680
	enum VisibilityBasedAnimTickOption;//[Offset: 0x6b4, Size: 0x1] 0x7a9cb76780
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b5, Size: 0x1] 0x7a9cb76800
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6b5, Size: 0x1] 0x7a9cb76880
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6b5, Size: 0x1] 0x7a9cb76900
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6b5, Size: 0x1] 0x7a9cb75c80
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6b5, Size: 0x1] 0x7a9cb76980
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6b5, Size: 0x1] 0x7a9cb76a00
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6b5, Size: 0x1] 0x7a9cb76a80
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b6, Size: 0x1] 0x7a9cb76b00
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b6, Size: 0x1] 0x7a9cb76b80
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6b6, Size: 0x1] 0x7a9cb76c00
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6b6, Size: 0x1] 0x7a9cb76c80
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6b6, Size: 0x1] 0x7a9cb76d00
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6b6, Size: 0x1] 0x7a9cb76d80
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6b6, Size: 0x1] 0x7a9cb76e00
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6b6, Size: 0x1] 0x7a9cb76e80
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b7, Size: 0x1] 0x7a9cb76f00
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b7, Size: 0x1] 0x7a9cb76f80
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6b7, Size: 0x1] 0x7a9cb77000
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6b7, Size: 0x1] 0x7a9cb77080
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6b7, Size: 0x1] 0x7a9cb77100
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b8, Size: 0x1] 0x7a9cb77180
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x6bc, Size: 0x4] 0x7a9cb3b990
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x6c8, Size: 0x1c] 0x7a9cb77200
	void UnHideBoneByName(FName BoneName);// 0xffffff8523219000 0x7a9cb4dd00
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0xffffff8523219000 0x7a9cb4dde0
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0xffffff8523219000 0x7a9cb4dec0
	void ShowMaterialSection(int MaterialID, bool bShow, int LODIndex);// 0xffffff8523219000 0x7a9cb4dfa0
	void ShowAllMaterialSections(int LODIndex);// 0xffffff8523219000 0x7a9cb4e080
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0xffffff8523219000 0x7a9cb4e160
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0xffffff8523219000 0x7a9cb4e240
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0xffffff8523219000 0x7a9cb4e320
	void SetRenderStatic(bool bNewValue);// 0xffffff8523219000 0x7a9cb4e400
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0xffffff8523219000 0x7a9cb4e4e0
	void SetMinLOD(int InNewMinLOD);// 0xffffff8523219000 0x7a9cb4e5c0
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0xffffff8523219000 0x7a9cb4e6a0
	void SetForcedLOD(int InNewForcedLOD);// 0xffffff8523219000 0x7a9cb4adc0
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0xffffff8523219000 0x7a9cb4aea0
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0xffffff8523219000 0x7a9cb4af80
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0xffffff8523219000 0x7a9cb4b060
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0xffffff8523219000 0x7a9cb4b140
	bool IsBoneHiddenByName(FName BoneName);// 0xffffff8523219000 0x7a9cb4b220
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0xffffff8523219000 0x7a9cb4b300
	FName GetSocketBoneName(FName InSocketName);// 0xffffff8523219000 0x7a9cb4b3e0
	Vector GetRefPosePosition(int BoneIndex);// 0xffffff8523219000 0x7a9cb4b4c0
	FName GetParentBone(FName BoneName);// 0xffffff8523219000 0x7a9cb4b5a0
	int GetNumLODs();// 0xffffff8523219000 0x7a9cb4b680
	int GetNumBones();// 0xffffff8523219000 0x7a9cb4b760
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0xffffff8523219000 0x7a9cb4b840
	FName GetBoneName(int BoneIndex);// 0xffffff8523219000 0x7a9cb4b920
	int GetBoneIndex(FName BoneName);// 0xffffff8523219000 0x7a9cb4ba00
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0xffffff8523219000 0x7a9cb4bae0
	void ClearVertexColorOverride(int LODIndex);// 0xffffff8523219000 0x7a9cb4bbc0
	void ClearSkinWeightOverride(int LODIndex);// 0xffffff8523219000 0x7a9cb4bca0
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0xffffff8523219000 0x7a9cb4bd80

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x578, Size: 0x10] 0x7a9cb2a100
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1] 0x7a9cb2a180
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0xffffff8523219000 0x7aa098c720
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0xffffff8523219000 0x7aa098c800
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0xffffff8523219000 0x7aa098c8e0
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0xffffff8523219000 0x7aa098c9c0
	FName[] GetMaterialSlotNames();// 0xffffff8523219000 0x7aa09890e0
	MaterialInterface*[] GetMaterials();// 0xffffff8523219000 0x7aa09891c0
	int GetMaterialIndex(FName MaterialSlotName);// 0xffffff8523219000 0x7aa09892a0

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8] 0x7a9cb55380
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1] 0x7a9cb55400
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1] 0x7a9cb55480
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1] 0x7a9cb55500
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31, Size: 0x1] 0x7a9cb55580
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10] 0x7a9cb55600
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10] 0x7a9cb55680
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10] 0x7a9cb55700
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10] 0x7a9cb55780
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70] 0x7a9cb55800
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10] 0x7a9cb55900
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0xffffff8523219000 0x7a9cb46980
	Pawn* TryGetPawnOwner();// 0xffffff8523219000 0x7a9cb46a60
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0xffffff8523219000 0x7a9cb46b40
	void SnapshotPose(out PoseSnapshot Snapshot);// 0xffffff8523219000 0x7a9cb46c20
	void SetRootMotionMode(byte Value);// 0xffffff8523219000 0x7a9cb46d00
	void SetMorphTarget(FName MorphTargetName, float Value);// 0xffffff8523219000 0x7a9cb46de0
	void SavePoseSnapshot(FName SnapshotName);// 0xffffff8523219000 0x7a9cb46ec0
	void ResetDynamics(enum InTeleportType);// 0xffffff8523219000 0x7a9cb46fa0
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0xffffff8523219000 0x7a9cb47080
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0xffffff8523219000 0x7a9cb47160
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0xffffff8523219000 0x7a9cb47240
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0xffffff8523219000 0x7a9cb47320
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0xffffff8523219000 0x7a9cb43a40
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0xffffff8523219000 0x7a9cb43b20
	void Montage_Resume(const AnimMontage* Montage);// 0xffffff8523219000 0x7a9cb43c00
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0xffffff8523219000 0x7a9cb43ce0
	void Montage_Pause(const AnimMontage* Montage);// 0xffffff8523219000 0x7a9cb43dc0
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0xffffff8523219000 0x7a9cb43ea0
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0xffffff8523219000 0x7a9cb43f80
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0xffffff8523219000 0x7a9cb44060
	bool Montage_IsActive(const AnimMontage* Montage);// 0xffffff8523219000 0x7a9cb44140
	float Montage_GetPosition(const AnimMontage* Montage);// 0xffffff8523219000 0x7a9cb44220
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0xffffff8523219000 0x7a9cb44300
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0xffffff8523219000 0x7a9cb443e0
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0xffffff8523219000 0x7a9cb444c0
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0xffffff8523219000 0x7a9cb445a0
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0xffffff8523219000 0x7a9cb44680
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0xffffff8523219000 0x7a9cb44760
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0xffffff8523219000 0x7a9cb44840
	bool IsAnyMontagePlaying();// 0xffffff8523219000 0x7a9cb44920
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0xffffff8523219000 0x7a9cb44a00
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0xffffff8523219000 0x7a9cb44ae0
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0xffffff8523219000 0x7a9cb44bc0
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0xffffff8523219000 0x7a9cb44ca0
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0xffffff8523219000 0x7a9cb44d80
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0xffffff8523219000 0x7a9cb44e60
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0xffffff8523219000 0x7a9cb44f40
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0xffffff8523219000 0x7a9cb45020
	SkeletalMeshComponent* GetOwningComponent();// 0xffffff8523219000 0x7a9cb45100
	Actor* GetOwningActor();// 0xffffff8523219000 0x7a9cb451e0
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0xffffff8523219000 0x7a9cb452c0
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0xffffff8523219000 0x7a9cb453a0
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0xffffff8523219000 0x7a9cb45480
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0xffffff8523219000 0x7a9cb45560
	float GetInstanceMachineWeight(int MachineIndex);// 0xffffff8523219000 0x7a9cb45640
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0xffffff8523219000 0x7a9cb41d60
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0xffffff8523219000 0x7a9cb41e40
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0xffffff8523219000 0x7a9cb41f20
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0xffffff8523219000 0x7a9cb42000
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0xffffff8523219000 0x7a9cb420e0
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0xffffff8523219000 0x7a9cb421c0
	float GetCurveValue(FName CurveName);// 0xffffff8523219000 0x7a9cb422a0
	FName GetCurrentStateName(int MachineIndex);// 0xffffff8523219000 0x7a9cb42380
	AnimMontage* GetCurrentActiveMontage();// 0xffffff8523219000 0x7a9cb42460
	void GetAllCurveNames(out FName[] OutNames);// 0xffffff8523219000 0x7a9cb42540
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0xffffff8523219000 0x7a9cb42620
	void ClearMorphTargets();// 0xffffff8523219000 0x7a9cb42700
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0xffffff8523219000 0x7a9cb427e0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0xffffff8523219000 0x7a9cb428c0
	void BlueprintPostEvaluateAnimation();// 0xffffff8523219000 0x7a9cb429a0
	void BlueprintInitializeAnimation();// 0xffffff8523219000 0x7a9cb42a80
	void BlueprintBeginPlay();// 0xffffff8523219000 0x7a9cb42b60

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10] 0x7a9c815300
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10] 0x7a9c815400
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10] 0x7a9c815480
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10] 0x7a9c815580
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10] 0x7a9c815680
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50] 0x7a9c815700
	BlendProfile*[] BlendProfiles;//[Offset: 0x268, Size: 0x10] 0x7a9c815800
	AnimSlotGroup[] SlotGroups;//[Offset: 0x278, Size: 0x10] 0x7a9c815900
	AssetUserData*[] AssetUserData;//[Offset: 0x350, Size: 0x10] 0x7a9c815a00

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7a9ca625b0
	int ParentIndex;//[Offset: 0x8, Size: 0x4] 0x7a9ca62620
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1] 0x7a9ca5d800

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8] 0x7a9ca62930
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8] 0x7a9ca629a0
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8] 0x7a9ca62a10

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8] 0x7a9c7f4840
	FName BoneName;//[Offset: 0x30, Size: 0x8] 0x7a9c7f48b0
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc] 0x7a9c815a80
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc] 0x7a9c815b00
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc] 0x7a9c815b80
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x7a9c815c00
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0xffffff8523219000 0x7a9c804840
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0xffffff8523219000 0x7a9c804920

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8] 0x7a9cd45080
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10] 0x7a9cd45180

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10] 0x7aa09e5f00
	float BlendScale;//[Offset: 0x10, Size: 0x4] 0x7aa093e390

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x7aa083f820

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8] 0x7a9ca62850
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10] 0x7a9ca5db80

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10] 0x7aa09e1a80
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50] 0x7a963d8440

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8] 0x7aa09e1b00

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10] 0x7aa09e1c00

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4] 0x7aa093a490
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4] 0x7aa093a500
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4] 0x7aa093a570
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4] 0x7aa093a5e0
	FName NotifyName;//[Offset: 0x40, Size: 0x8] 0x7aa093a650
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8] 0x7aa096f980
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8] 0x7aa096fa00
	float Duration;//[Offset: 0x58, Size: 0x4] 0x7aa093a6c0
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30] 0x7aa096fa80
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7aa096fb00
	byte MontageTickType;//[Offset: 0x91, Size: 0x1] 0x7aa096fb80
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4] 0x7aa093a730
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1] 0x7aa096fc00
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4] 0x7aa093a7a0
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x7aa096fc80
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1] 0x7aa096fd00
	int TrackIndex;//[Offset: 0xa4, Size: 0x4] 0x7aa093a810

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8] 0x7aa096ff00
	int SlotIndex;//[Offset: 0x10, Size: 0x4] 0x7aa093a9d0
	int SegmentIndex;//[Offset: 0x14, Size: 0x4] 0x7aa093aa40
	byte LinkMethod;//[Offset: 0x18, Size: 0x1] 0x7aa096ff80
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1] 0x7aa096e780
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4] 0x7aa093aab0
	float SegmentLength;//[Offset: 0x20, Size: 0x4] 0x7aa093ab20
	float LinkValue;//[Offset: 0x24, Size: 0x4] 0x7aa093ab90
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8] 0x7aa096e800

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xffffff8523219000 0x7a9cbddb40
	FString GetNotifyName();// 0xffffff8523219000 0x7a9cbddc20

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10] 0x7a9cd2aa80
	float SequenceLength;//[Offset: 0x90, Size: 0x4] 0x7a9cd164b0
	float RateScale;//[Offset: 0x94, Size: 0x4] 0x7a9cd14840
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10] 0x7a9cd2ab00
	float GetPlayLength();// 0xffffff8523219000 0x7a9cd336c0

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8] 0x7a9cd28500
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10] 0x7a9cd28600
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x7a9cd28700

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10] 0x7aa096f280

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80] 0x7aa096f100

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8] 0x7aa0939230
	SmartName Name;//[Offset: 0x8, Size: 0xc] 0x7aa096f180
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4] 0x7aa0939310

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10] 0x7aa0945200

--------------------------------
Class: RealCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x68, Size: 0x1] 0x7aa0945280
	byte PostInfinityExtrap;//[Offset: 0x69, Size: 0x1] 0x7aa0943200
	float DefaultValue;//[Offset: 0x6c, Size: 0x4] 0x7aa0931270

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60] 0x7aa0943280

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1] 0x7aa0945000
	byte TangentMode;//[Offset: 0x1, Size: 0x1] 0x7aa0945080
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1] 0x7aa0945100
	float Time;//[Offset: 0x4, Size: 0x4] 0x7aa0930fd0
	float Value;//[Offset: 0x8, Size: 0x4] 0x7aa0931040
	float ArriveTangent;//[Offset: 0xc, Size: 0x4] 0x7aa09310b0
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4] 0x7aa0931120
	float LeaveTangent;//[Offset: 0x14, Size: 0x4] 0x7aa0931190
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4] 0x7aa0931200

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8] 0x7aa09392a0

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0xffffff8523219000 0x7a9cbdd7c0
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xffffff8523219000 0x7a9cbdd8a0
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0xffffff8523219000 0x7a9cbdd980
	FString GetNotifyName();// 0xffffff8523219000 0x7a9cbdda60

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30] 0x7a9cd2d500
	float BlendInTime;//[Offset: 0xd8, Size: 0x4] 0x7a9cd170f0
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30] 0x7a9cd2d600
	float BlendOutTime;//[Offset: 0x110, Size: 0x4] 0x7a9cd17160
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4] 0x7a9cd171d0
	FName SyncGroup;//[Offset: 0x118, Size: 0x8] 0x7a9cd17240
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4] 0x7a9cd172b0
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20] 0x7a9cd2d680
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10] 0x7a9cd2b680
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10] 0x7a9cd2b780
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10] 0x7a9cd2b880
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1] 0x7a9cd2b900
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1] 0x7a9cd2b980
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1] 0x7a9cd2ba00
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1] 0x7a9cd2ba80
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10] 0x7a9cd2bb80
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10] 0x7a9cd2bc00
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28] 0x7a9cd2bc80
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8] 0x7a9cd156b0
	float GetDefaultBlendOutTime();// 0xffffff8523219000 0x7a9cd335e0

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8] 0x7aa092b880
	float BlendTime;//[Offset: 0x8, Size: 0x4] 0x7aa083fba0
	enum BlendOption;//[Offset: 0x24, Size: 0x1] 0x7aa092b980

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80] 0x7a9cd91780
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x7a9cd91800
	float GetFloatValue(float InTime);// 0xffffff8523219000 0x7a9cd84680

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0xffffff8523219000 0x7a9cd84760
	void GetTimeRange(out float MinTime, out float MaxTime);// 0xffffff8523219000 0x7aa0984f40

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10] 0x7aa09e2400

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8] 0x7aa093bf40
	float Time;//[Offset: 0x8, Size: 0x4] 0x7aa093bfb0

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8] 0x7aa0939f50
	float StartTime;//[Offset: 0x38, Size: 0x4] 0x7aa0939fc0
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8] 0x7aa093a030
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10] 0x7aa09e0f00

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8] 0x7aa093a0a0
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10] 0x7aa09e0f80

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10] 0x7aa096f480

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8] 0x7aa096f380
	float StartPos;//[Offset: 0x8, Size: 0x4] 0x7aa0939460
	float AnimStartTime;//[Offset: 0xc, Size: 0x4] 0x7aa09394d0
	float AnimEndTime;//[Offset: 0x10, Size: 0x4] 0x7aa0939540
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4] 0x7aa09395b0
	int LoopingCount;//[Offset: 0x18, Size: 0x4] 0x7aa0939620

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8] 0x7aa093a110
	float DisplayTime;//[Offset: 0x38, Size: 0x4] 0x7aa093a180
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4] 0x7aa093a1f0

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4] 0x7aa093a260
	float TriggerTime;//[Offset: 0x4, Size: 0x4] 0x7aa093a2d0
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1] 0x7aa09e1000

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4] 0x7a9ca65a30
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4] 0x7a9ca65aa0
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10] 0x7a9cb05280
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4] 0x7a9ca65bf0

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4] 0x7a9ca65b10
	float Alpha;//[Offset: 0xc, Size: 0x4] 0x7a9ca65b80

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10] 0x7aa0944780
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10] 0x7aa0944800
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8] 0x7aa0930e80
	FName SnapshotName;//[Offset: 0x28, Size: 0x8] 0x7aa0930ef0
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7aa0944880

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8] 0x7aa0939d20
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8] 0x7aa0939d90
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4] 0x7aa0939e00

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8] 0x7a9ca5b700
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7a9ca5b780
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7a9ca5b800
	float SavedPosition;//[Offset: 0xc, Size: 0x4] 0x7a9ca60780
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4] 0x7a9ca607f0

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x48, Size: 0x8] 0x7a9c812080
	BoxSphereBounds ImportedBounds;//[Offset: 0x50, Size: 0x1c] 0x7a9c812100
	BoxSphereBounds ExtendedBounds;//[Offset: 0x6c, Size: 0x1c] 0x7a9c810080
	Vector PositiveBoundsExtension;//[Offset: 0x88, Size: 0xc] 0x7a9c810100
	Vector NegativeBoundsExtension;//[Offset: 0x94, Size: 0xc] 0x7a9c810180
	SkeletalMaterial[] Materials;//[Offset: 0xa0, Size: 0x10] 0x7a9c810280
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xb0, Size: 0x10] 0x7a9c810380
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xc0, Size: 0x10] 0x7a9c810480
	PerPlatformInt MinLOD;//[Offset: 0x120, Size: 0x4] 0x7a9c810500
	byte SkelMirrorAxis;//[Offset: 0x124, Size: 0x1] 0x7a9c810580
	byte SkelMirrorFlipAxis;//[Offset: 0x125, Size: 0x1] 0x7a9c810600
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x126, Size: 0x1] 0x7a9c810680
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x126, Size: 0x1] 0x7a9c810700
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x126, Size: 0x1] 0x7a9c810780
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x126, Size: 0x1] 0x7a9c810800
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x126, Size: 0x1] 0x7a9c810880
	BodySetup* BodySetup;//[Offset: 0x128, Size: 0x8] 0x7a9c810900
	PhysicsAsset* PhysicsAsset;//[Offset: 0x130, Size: 0x8] 0x7a9c810980
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x138, Size: 0x8] 0x7a9c810a80
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x140, Size: 0x10] 0x7a9c810b80
	MorphTarget*[] MorphTargets;//[Offset: 0x150, Size: 0x10] 0x7a9c810c80
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2d8, Size: 0x8] 0x7a9c810d00
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x2e0, Size: 0x10] 0x7a9c810e00
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x2f0, Size: 0x30] 0x7a9c810e80
	AssetUserData*[] AssetUserData;//[Offset: 0x320, Size: 0x10] 0x7a9c810f80
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x330, Size: 0x10] 0x7a9c811080
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0xffffff8523219000 0x7a9c801c80
	int NumSockets();// 0xffffff8523219000 0x7a9c6ce780
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0xffffff8523219000 0x7a9c6ce860
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0xffffff8523219000 0x7a9c6ce940
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0xffffff8523219000 0x7a9c6cea20
	BoxSphereBounds GetImportedBounds();// 0xffffff8523219000 0x7a9c6ceb00
	BoxSphereBounds GetBounds();// 0xffffff8523219000 0x7a9c6cebe0
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0xffffff8523219000 0x7a9c6cecc0
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0xffffff8523219000 0x7a9c6ceda0
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0xffffff8523219000 0x7a9c6cee80

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc] 0x7af81c3b80
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc] 0x7af81c3c00
	float SphereRadius;//[Offset: 0x18, Size: 0x4] 0x7af958f190

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8] 0x7a9ca5b600
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8] 0x7a9ca60710
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14] 0x7a9ca5b680

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7a9ca12880
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7a9ca12900
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4] 0x7a9ca04760

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4] 0x7a9ca61120
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1] 0x7a9ca5c680

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4] 0x7a9ca5c980
	float LODHysteresis;//[Offset: 0x4, Size: 0x4] 0x7a9ca61430
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10] 0x7a9ca5ca00
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x18, Size: 0x3c] 0x7a9ca5d000
	BoneReference[] BonesToRemove;//[Offset: 0x58, Size: 0x10] 0x7a9ca5d100
	BoneReference[] BonesToPrioritize;//[Offset: 0x68, Size: 0x10] 0x7a9ca5d200
	float WeightOfPrioritization;//[Offset: 0x78, Size: 0x4] 0x7a9ca61970
	AnimSequence* BakePose;//[Offset: 0x80, Size: 0x8] 0x7a9ca5d280
	AnimSequence* BakePoseOverride;//[Offset: 0x88, Size: 0x8] 0x7a9ca5d300
	FString SourceImportFilename;//[Offset: 0x90, Size: 0x10] 0x7a9ca619e0
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7a9ca5d380
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x7a9ca5d400
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1] 0x7a9ca5d480
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1] 0x7a9ca5d500

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4] 0x7aa083b760

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1] 0x7a9ca5ca80
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4] 0x7a9ca61510
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4] 0x7a9ca61580
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4] 0x7a9ca615f0
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4] 0x7a9ca61660
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4] 0x7a9ca616d0
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1] 0x7a9ca5cb80
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1] 0x7a9ca5cc00
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1] 0x7a9ca5cc80
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1] 0x7a9ca5cd00
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1] 0x7a9ca5cd80
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1] 0x7a9ca5ce00
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1] 0x7a9ca5ce80
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4] 0x7a9ca61740
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4] 0x7a9ca617b0
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4] 0x7a9ca61820
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x7a9ca5cf00
	float VolumeImportance;//[Offset: 0x30, Size: 0x4] 0x7a9ca61890
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7a9ca5cf80
	int BaseLOD;//[Offset: 0x38, Size: 0x4] 0x7a9ca61900

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4] 0x7a9cd16bb0
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10] 0x7a9cd2e680
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xf0, Size: 0x8] 0x7a9cd2e700
	byte AdditiveAnimType;//[Offset: 0x184, Size: 0x1] 0x7a9cd2c680
	byte RefPoseType;//[Offset: 0x185, Size: 0x1] 0x7a9cd2c700
	AnimSequence* RefPoseSeq;//[Offset: 0x188, Size: 0x8] 0x7a9cd2c780
	int RefFrameIndex;//[Offset: 0x190, Size: 0x4] 0x7a9cd16c20
	int EncodingPkgVersion;//[Offset: 0x194, Size: 0x4] 0x7a9cd16c90
	FName RetargetSource;//[Offset: 0x198, Size: 0x8] 0x7a9cd16d00
	enum Interpolation;//[Offset: 0x1a0, Size: 0x1] 0x7a9cd2c880
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 0x1] 0x7a9cd2c900
	byte RootMotionRootLock;//[Offset: 0x1a2, Size: 0x1] 0x7a9cd2c980
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a3, Size: 0x1] 0x7a9cd2ca00
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 0x1] 0x7a9cd2ca80
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5, Size: 0x1] 0x7a9cd2cb00
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x1a8, Size: 0x10] 0x7a9cd2cc00

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4] 0x7aa093af80

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8] 0x7a9cd2bd00

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4] 0x7aa083b680

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10] 0x7a9c7d4280
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10] 0x7a9c7d4380
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10] 0x7a9c7d4480
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7a9c7d4500
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x108, Size: 0x8] 0x7a9c7d4580
	BodySetup*[] BodySetup;//[Offset: 0x110, Size: 0x10] 0x7a9c7d4680

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x7a9c7d6200
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x280, Size: 0x10] 0x7a9c7d6300

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0dd70
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24] 0x7a9ca59280

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0de50
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7a9ca59380
	float OrientationStrength;//[Offset: 0xc, Size: 0x4] 0x7a9ca0dec0
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4] 0x7a9ca0df30
	float PositionStrength;//[Offset: 0x14, Size: 0x4] 0x7a9ca0dfa0
	float VelocityStrength;//[Offset: 0x18, Size: 0x4] 0x7a9ca0e010
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4] 0x7a9ca0e080
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4] 0x7a9ca0e0f0

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8] 0x7a9c7d6500
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10] 0x7a9c7d6600
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104] 0x7a9c7d6680

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8] 0x7a9ca03ea0
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8] 0x7a9ca03f10
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8] 0x7a9ca03f80
	Vector Pos1;//[Offset: 0x30, Size: 0xc] 0x7a9ca13500
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc] 0x7a9ca13580
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc] 0x7a9ca13600
	Vector Pos2;//[Offset: 0x54, Size: 0xc] 0x7a9ca13680
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc] 0x7a9ca13700
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc] 0x7a9ca13780
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc] 0x7a9ca13800
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1] 0x7a9ca13880
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104] 0x7a9ca14180

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4] 0x7a9ca03ff0
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4] 0x7a9ca04060
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4] 0x7a9ca040d0
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4] 0x7a9ca04140
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c] 0x7a9ca13a80
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20] 0x7a9ca13c00
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c] 0x7a9ca13d80
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c] 0x7a9ca13e00
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c] 0x7a9ca13e80
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1] 0x7a9ca13f00
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1] 0x7a9ca13f80
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1] 0x7a9ca14000
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1] 0x7a9ca14080
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1] 0x7a9ca14100

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4] 0x7a9ca041b0
	byte XMotion;//[Offset: 0x18, Size: 0x1] 0x7a9ca13900
	byte YMotion;//[Offset: 0x19, Size: 0x1] 0x7a9ca13980
	byte ZMotion;//[Offset: 0x1a, Size: 0x1] 0x7a9ca13a00

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x7a9ca04370
	float Damping;//[Offset: 0x4, Size: 0x4] 0x7a9ca043e0
	float Restitution;//[Offset: 0x8, Size: 0x4] 0x7a9ca04450
	float ContactDistance;//[Offset: 0xc, Size: 0x4] 0x7a9ca044c0
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7a9ca13d00

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4] 0x7a9ca04220
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4] 0x7a9ca04290
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1] 0x7a9ca13b00
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1] 0x7a9ca13b80

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4] 0x7a9ca04300
	byte TwistMotion;//[Offset: 0x18, Size: 0x1] 0x7a9ca13c80

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc] 0x7a9ca14200
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc] 0x7a9ca12180
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10] 0x7a9ca12200
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10] 0x7a9ca12280
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10] 0x7a9ca12300
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7a9ca12380

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x7a9ca04530
	float Damping;//[Offset: 0x4, Size: 0x4] 0x7a9ca045a0
	float MaxForce;//[Offset: 0x8, Size: 0x4] 0x7a9ca04610
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7a9ca12500
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x7a9ca12580

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10] 0x7a9ca12400
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10] 0x7a9ca12480
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10] 0x7a9ca12600
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc] 0x7a9ca12680
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc] 0x7a9ca12700
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1] 0x7a9ca12780

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104] 0x7a9ca59200
	FName ProfileName;//[Offset: 0x104, Size: 0x8] 0x7a9ca0dd00

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50] 0x7a963db5a0
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50] 0x7a963db640
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50] 0x7a963db6e0
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28] 0x7a9c7b3e00
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28] 0x7a9c7b3e80

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0d750
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x7a9ca56080

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8] 0x7a9c7b2680

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10] 0x7a9cd13b90
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10] 0x7a9cd26100

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10] 0x7a9ca5e000
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20] 0x7a9ca5e280

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7a9ca62a80
	int LODIndex;//[Offset: 0x8, Size: 0x4] 0x7a9ca62af0
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7a9ca5dc00
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10] 0x7a9ca5dd00
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10] 0x7a9ca5df00

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8] 0x7a9ca60e80

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x7a9ca60ef0
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7a9ca5dd80
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7a9ca5de00

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10] 0x7a9ca5e100
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10] 0x7a9ca5e200

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4] 0x7a9c815f80
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x38, Size: 0x10] 0x7a9c816080

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4] 0x7a9ca5e300
	float LODHysteresis;//[Offset: 0x4, Size: 0x4] 0x7a9ca60f60
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1] 0x7a9ca5e400
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10] 0x7a9ca5e580
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10] 0x7a9ca5e600
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4] 0x7a9ca610b0
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8] 0x7a9ca5e680
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c] 0x7a9ca5e700

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7a9ca5e480
	FName BoneName;//[Offset: 0x4, Size: 0x8] 0x7a9ca60fd0

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x7a9cd26b00
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8] 0x7a9cd26b80
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7a9cd26c00
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x7a9cd26c80
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8] 0x7a9cd26d00
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10] 0x7a9cd26e00
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10] 0x7a9cd26f00
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x88, Size: 0x8] 0x7a9cd26f80
	byte BlueprintType;//[Offset: 0x90, Size: 0x1] 0x7a9cd27000
	int BlueprintSystemVersion;//[Offset: 0x94, Size: 0x4] 0x7a9cd13ab0
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x7a9cd27080

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8] 0x7a9cd27100
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8] 0x7a9cd27180
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7a9cd27200
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10] 0x7a9cd27280

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10] 0x7a9c7dfe80
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10] 0x7a9c7dff80
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8] 0x7a9c7de780

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8] 0x7a9c7de980
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8] 0x7a9c7dea00
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x50] 0x7a9c7dea80
	FName AttachToName;//[Offset: 0x88, Size: 0x8] 0x7a9c7f29a0
	FName ParentComponentOrVariableName;//[Offset: 0x90, Size: 0x8] 0x7a9c7f2a10
	FName ParentComponentOwnerClassName;//[Offset: 0x98, Size: 0x8] 0x7a9c7f2a80
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x7a9c7deb00
	SCS_Node*[] ChildNodes;//[Offset: 0xa8, Size: 0x10] 0x7a9c7dec00
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb8, Size: 0x10] 0x7a9c7ded00
	Guid VariableGuid;//[Offset: 0xc8, Size: 0x10] 0x7a9c7ded80
	FName InternalVariableName;//[Offset: 0xd8, Size: 0x8] 0x7a9c7f2af0

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7aa09e6c00
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x8, Size: 0x10] 0x7aa09e6d80

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8] 0x7aa093f3c0
	int ArrayIndex;//[Offset: 0x8, Size: 0x4] 0x7aa093f430
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8] 0x7aa09e6c80

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8] 0x7aa093dd00
	FString DataValue;//[Offset: 0x8, Size: 0x10] 0x7aa093dd70

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4] 0x7a9c7f9850
	byte LengthMode;//[Offset: 0x2c, Size: 0x1] 0x7a9c81ec00
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x7a9c81ec80
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1] 0x7a9c81ed00
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1] 0x7a9c81ed80
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1] 0x7a9c81ee00
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 0x1] 0x7a9c81ee80
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10] 0x7a9c81ef80
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10] 0x7a9c81f080
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10] 0x7a9c81f180
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10] 0x7a9c81f280
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10] 0x7a9c81f380
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10] 0x7a9c81f400
	FName VariableName;//[Offset: 0x90, Size: 0x8] 0x7a9c7f98c0
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8] 0x7a9c7f9930
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8] 0x7a9c7f99a0
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8] 0x7a9c7f9a10

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8] 0x7a9ca65c60
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8] 0x7a9cb03280

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8] 0x7a9ca65d40
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7a9cb03480

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8] 0x7a9cb03300

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8] 0x7a9ca65cd0

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8] 0x7a9cb03380

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80] 0x7a9cd92f00
	Vector GetVectorValue(float InTime);// 0xffffff8523219000 0x7a9cd83ea0

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8] 0x7a9cb03400

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80] 0x7a9cd91600
	float AdjustHue;//[Offset: 0x230, Size: 0x4] 0x7a9cd75f00
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4] 0x7a9cd75f70
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4] 0x7a9cd75fe0
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4] 0x7a9cd76050
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4] 0x7a9cd760c0
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4] 0x7a9cd76130
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4] 0x7a9cd761a0
	LinearColor GetLinearColorValue(float InTime);// 0xffffff8523219000 0x7a9cd844c0
	LinearColor GetClampedLinearColorValue(float InTime);// 0xffffff8523219000 0x7a9cd845a0

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10] 0x7a9cdcfa00
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10] 0x7a9cdcfb00

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8] 0x7a9ca1c600
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8] 0x7a9ca1a580
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20] 0x7a9ca1a700
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x50] 0x7a9ca1a780

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8] 0x7a9ca1a600
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8] 0x7a9ca08350
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10] 0x7a9ca1a680

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10] 0x7a9ca5f780

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4] 0x7a9ca62460
	byte Weights;//[Offset: 0x20, Size: 0x1] 0x7a9ca5f680

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	void PhysicsAssetUpdated();// 0xffffff8523219000 0x7a9ccffc80
	void ClothConfigUpdated();// 0xffffff8523219000 0x7a9ccffd60

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x190, Size: 0x8] 0x7a9cd4e800
	float GravityScale;//[Offset: 0x198, Size: 0x4] 0x7a9cd73ff0
	float MaxStepHeight;//[Offset: 0x19c, Size: 0x4] 0x7a9cd74060
	float JumpZVelocity;//[Offset: 0x1a0, Size: 0x4] 0x7a9cd740d0
	float JumpOffJumpZFactor;//[Offset: 0x1a4, Size: 0x4] 0x7a9cd74140
	float WalkableFloorAngle;//[Offset: 0x1a8, Size: 0x4] 0x7a9cd741b0
	float WalkableFloorZ;//[Offset: 0x1ac, Size: 0x4] 0x7a9cd74220
	byte MovementMode;//[Offset: 0x1b0, Size: 0x1] 0x7a9cd4e880
	byte CustomMovementMode;//[Offset: 0x1b1, Size: 0x1] 0x7a9cd4e900
	enum NetworkSmoothingMode;//[Offset: 0x1b2, Size: 0x1] 0x7a9cd4ea00
	float GroundFriction;//[Offset: 0x1b4, Size: 0x4] 0x7a9cd74290
	float MaxWalkSpeed;//[Offset: 0x1dc, Size: 0x4] 0x7a9cd74300
	float MaxWalkSpeedCrouched;//[Offset: 0x1e0, Size: 0x4] 0x7a9cd74370
	float MaxSwimSpeed;//[Offset: 0x1e4, Size: 0x4] 0x7a9cd743e0
	float MaxFlySpeed;//[Offset: 0x1e8, Size: 0x4] 0x7a9cd74450
	float MaxCustomMovementSpeed;//[Offset: 0x1ec, Size: 0x4] 0x7a9cd744c0
	float MaxAcceleration;//[Offset: 0x1f0, Size: 0x4] 0x7a9cd74530
	float MinAnalogWalkSpeed;//[Offset: 0x1f4, Size: 0x4] 0x7a9cd745a0
	float BrakingFrictionFactor;//[Offset: 0x1f8, Size: 0x4] 0x7a9cd74610
	float BrakingFriction;//[Offset: 0x1fc, Size: 0x4] 0x7a9cd74680
	float BrakingSubStepTime;//[Offset: 0x200, Size: 0x4] 0x7a9cd746f0
	float BrakingDecelerationWalking;//[Offset: 0x204, Size: 0x4] 0x7a9cd74760
	float BrakingDecelerationFalling;//[Offset: 0x208, Size: 0x4] 0x7a9cd747d0
	float BrakingDecelerationSwimming;//[Offset: 0x20c, Size: 0x4] 0x7a9cd72b60
	float BrakingDecelerationFlying;//[Offset: 0x210, Size: 0x4] 0x7a9cd72bd0
	float AirControl;//[Offset: 0x214, Size: 0x4] 0x7a9cd72c40
	float AirControlBoostMultiplier;//[Offset: 0x218, Size: 0x4] 0x7a9cd72cb0
	float AirControlBoostVelocityThreshold;//[Offset: 0x21c, Size: 0x4] 0x7a9cd72d20
	float FallingLateralFriction;//[Offset: 0x220, Size: 0x4] 0x7a9cd72d90
	float CrouchedHalfHeight;//[Offset: 0x224, Size: 0x4] 0x7a9cd72e00
	float Buoyancy;//[Offset: 0x228, Size: 0x4] 0x7a9cd72e70
	float PerchRadiusThreshold;//[Offset: 0x22c, Size: 0x4] 0x7a9cd72ee0
	float PerchAdditionalHeight;//[Offset: 0x230, Size: 0x4] 0x7a9cd72f50
	Rotator RotationRate;//[Offset: 0x234, Size: 0xc] 0x7a9cd4ea80
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x7a9cd4eb00
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x240, Size: 0x1] 0x7a9cd4eb80
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x240, Size: 0x1] 0x7a9cd4ec00
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x240, Size: 0x1] 0x7a9cd4ec80
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x240, Size: 0x1] 0x7a9cd4ed00
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x240, Size: 0x1] 0x7a9cd4ed80
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x240, Size: 0x1] 0x7a9cd4ee00
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x241, Size: 0x1] 0x7a9cd4ee80
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x241, Size: 0x1] 0x7a9cd4ef00
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x241, Size: 0x1] 0x7a9cd4ef80
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x241, Size: 0x1] 0x7a9cd4f000
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x241, Size: 0x1] 0x7a9cd4f080
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x241, Size: 0x1] 0x7a9cd4f100
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x241, Size: 0x1] 0x7a9cd4f180
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x242, Size: 0x1] 0x7a9cd4f200
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x242, Size: 0x1] 0x7a9cd4f280
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x242, Size: 0x1] 0x7a9cd4f300
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x242, Size: 0x1] 0x7a9cd4f380
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x242, Size: 0x1] 0x7a9cd4f400
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x242, Size: 0x1] 0x7a9cd4f480
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x242, Size: 0x1] 0x7a9cd4f500
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x243, Size: 0x1] 0x7a9cd4f580
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x248, Size: 0x8] 0x7a9cd4f600
	float MaxOutOfWaterStepHeight;//[Offset: 0x250, Size: 0x4] 0x7a9cd72fc0
	float OutofWaterZ;//[Offset: 0x254, Size: 0x4] 0x7a9cd73030
	float Mass;//[Offset: 0x258, Size: 0x4] 0x7a9cd730a0
	float StandingDownwardForceScale;//[Offset: 0x25c, Size: 0x4] 0x7a9cd73110
	float InitialPushForceFactor;//[Offset: 0x260, Size: 0x4] 0x7a9cd73180
	float PushForceFactor;//[Offset: 0x264, Size: 0x4] 0x7a9cd731f0
	float PushForcePointZOffsetFactor;//[Offset: 0x268, Size: 0x4] 0x7a9cd73260
	float TouchForceFactor;//[Offset: 0x26c, Size: 0x4] 0x7a9cd732d0
	float MinTouchForce;//[Offset: 0x270, Size: 0x4] 0x7a9cd73340
	float MaxTouchForce;//[Offset: 0x274, Size: 0x4] 0x7a9cd733b0
	float RepulsionForce;//[Offset: 0x278, Size: 0x4] 0x7a9cd73420
	Vector Acceleration;//[Offset: 0x27c, Size: 0xc] 0x7a9cd4f680
	Quat LastUpdateRotation;//[Offset: 0x290, Size: 0x10] 0x7a9cd4f700
	Vector LastUpdateLocation;//[Offset: 0x2a0, Size: 0xc] 0x7a9cd4f780
	Vector LastUpdateVelocity;//[Offset: 0x2ac, Size: 0xc] 0x7a9cd4d700
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x2b8, Size: 0x4] 0x7a9cd73490
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x2bc, Size: 0x4] 0x7a9cd73500
	float ServerLastClientAdjustmentTime;//[Offset: 0x2c0, Size: 0x4] 0x7a9cd73570
	Vector PendingImpulseToApply;//[Offset: 0x2c4, Size: 0xc] 0x7a9cd4d780
	Vector PendingForceToApply;//[Offset: 0x2d0, Size: 0xc] 0x7a9cd4d800
	float AnalogInputModifier;//[Offset: 0x2dc, Size: 0x4] 0x7a9cd735e0
	float MaxSimulationTimeStep;//[Offset: 0x2e8, Size: 0x4] 0x7a9cd73650
	int MaxSimulationIterations;//[Offset: 0x2ec, Size: 0x4] 0x7a9cd736c0
	float MaxDepenetrationWithGeometry;//[Offset: 0x2f0, Size: 0x4] 0x7a9cd73730
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2f4, Size: 0x4] 0x7a9cd737a0
	float MaxDepenetrationWithPawn;//[Offset: 0x2f8, Size: 0x4] 0x7a9cd73810
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2fc, Size: 0x4] 0x7a9cd73880
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x300, Size: 0x4] 0x7a9cd738f0
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x304, Size: 0x4] 0x7a9cd73960
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x308, Size: 0x4] 0x7a9cd71cf0
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x30c, Size: 0x4] 0x7a9cd71d60
	float NetProxyShrinkRadius;//[Offset: 0x310, Size: 0x4] 0x7a9cd71dd0
	float NetProxyShrinkHalfHeight;//[Offset: 0x314, Size: 0x4] 0x7a9cd71e40
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x318, Size: 0x4] 0x7a9cd71eb0
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x31c, Size: 0x4] 0x7a9cd71f20
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x320, Size: 0x4] 0x7a9cd71f90
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x324, Size: 0x4] 0x7a9cd72000
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x328, Size: 0x4] 0x7a9cd72070
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x32c, Size: 0x4] 0x7a9cd720e0
	float LedgeCheckThreshold;//[Offset: 0x330, Size: 0x4] 0x7a9cd72150
	float JumpOutOfWaterPitch;//[Offset: 0x334, Size: 0x4] 0x7a9cd721c0
	FindFloorResult CurrentFloor;//[Offset: 0x338, Size: 0x94] 0x7a9cd4d880
	byte DefaultLandMovementMode;//[Offset: 0x3cc, Size: 0x1] 0x7a9cd4d900
	byte DefaultWaterMovementMode;//[Offset: 0x3cd, Size: 0x1] 0x7a9cd4d980
	byte GroundMovementMode;//[Offset: 0x3ce, Size: 0x1] 0x7a9cd4da00
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cf, Size: 0x1] 0x7a9cd4da80
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3cf, Size: 0x1] 0x7a9cd4db00
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3cf, Size: 0x1] 0x7a9cd4db80
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3cf, Size: 0x1] 0x7a9cd4dc00
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3cf, Size: 0x1] 0x7a9cd4dc80
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3cf, Size: 0x1] 0x7a9cd4dd00
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3cf, Size: 0x1] 0x7a9cd4dd80
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3cf, Size: 0x1] 0x7a9cd4de00
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 0x1] 0x7a9cd4de80
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d0, Size: 0x1] 0x7a9cd4df00
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d0, Size: 0x1] 0x7a9cd4df80
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d0, Size: 0x1] 0x7a9cd4e000
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d0, Size: 0x1] 0x7a9cd4e080
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d0, Size: 0x1] 0x7a9cd4e100
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d0, Size: 0x1] 0x7a9cd4e180
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d0, Size: 0x1] 0x7a9cd4e200
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d1, Size: 0x1] 0x7a9cd4e280
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d1, Size: 0x1] 0x7a9cd4e300
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d1, Size: 0x1] 0x7a9cd4e380
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d1, Size: 0x1] 0x7a9cd4e400
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d1, Size: 0x1] 0x7a9cd4e480
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d1, Size: 0x1] 0x7a9cd4e500
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d1, Size: 0x1] 0x7a9cd4e580
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d2, Size: 0x1] 0x7a9cd4e600
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d2, Size: 0x1] 0x7a9cd4e680
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d2, Size: 0x1] 0x7a9cd4e700
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d2, Size: 0x1] 0x7a9cd4c680
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d2, Size: 0x1] 0x7a9cd4c700
	float AvoidanceConsiderationRadius;//[Offset: 0x3e4, Size: 0x4] 0x7a9cd72230
	Vector RequestedVelocity;//[Offset: 0x3e8, Size: 0xc] 0x7a9cd4c780
	int AvoidanceUID;//[Offset: 0x3f4, Size: 0x4] 0x7a9cd722a0
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3f8, Size: 0x4] 0x7a9cd4c800
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3fc, Size: 0x4] 0x7a9cd4c880
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x400, Size: 0x4] 0x7a9cd4d300
	float AvoidanceWeight;//[Offset: 0x404, Size: 0x4] 0x7a9cd72310
	Vector PendingLaunchVelocity;//[Offset: 0x408, Size: 0xc] 0x7a9cd4c900
	float NavMeshProjectionInterval;//[Offset: 0x4b8, Size: 0x4] 0x7a9cd72380
	float NavMeshProjectionTimer;//[Offset: 0x4bc, Size: 0x4] 0x7a9cd723f0
	float NavMeshProjectionInterpSpeed;//[Offset: 0x4c0, Size: 0x4] 0x7a9cd72460
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x4c4, Size: 0x4] 0x7a9cd724d0
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x4c8, Size: 0x4] 0x7a9cd72540
	float NavWalkingFloorDistTolerance;//[Offset: 0x4cc, Size: 0x4] 0x7a9cd725b0
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x4d0, Size: 0x58] 0x7a9cd4c980
	float MinTimeBetweenTimeStampResets;//[Offset: 0x538, Size: 0x4] 0x7a9cd72620
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x540, Size: 0xf8] 0x7a9cd4ca00
	RootMotionMovementParams RootMotionParams;//[Offset: 0x6d0, Size: 0x40] 0x7a9cd4ca80
	Vector AnimRootMotionVelocity;//[Offset: 0x710, Size: 0xc] 0x7a9cd4cb00
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0xffffff8523219000 0x7a9cd805c0
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0xffffff8523219000 0x7a9cd806a0
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0xffffff8523219000 0x7a9cd80780
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0xffffff8523219000 0x7a9cd80860
	void SetGroupsToIgnore(int GroupFlags);// 0xffffff8523219000 0x7a9cd80940
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0xffffff8523219000 0x7a9cd80a20
	void SetGroupsToAvoid(int GroupFlags);// 0xffffff8523219000 0x7a9cd80b00
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0xffffff8523219000 0x7a9cd80be0
	void SetAvoidanceGroup(int GroupFlags);// 0xffffff8523219000 0x7a9cd80cc0
	void SetAvoidanceEnabled(bool bEnable);// 0xffffff8523219000 0x7a9cd80da0
	float K2_GetWalkableFloorZ();// 0xffffff8523219000 0x7a9cd80e80
	float K2_GetWalkableFloorAngle();// 0xffffff8523219000 0x7a9cd80f60
	float K2_GetModifiedMaxAcceleration();// 0xffffff8523219000 0x7a9cd81040
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0xffffff8523219000 0x7a9cd81120
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0xffffff8523219000 0x7a9cd81200
	bool IsWalking();// 0xffffff8523219000 0x7a9cd812e0
	bool IsWalkable(out const HitResult Hit);// 0xffffff8523219000 0x7a9cd813c0
	float GetValidPerchRadius();// 0xffffff8523219000 0x7a9cd814a0
	float GetPerchRadiusThreshold();// 0xffffff8523219000 0x7a9cd81580
	PrimitiveComponent* GetMovementBase();// 0xffffff8523219000 0x7a9cd81660
	float GetMinAnalogSpeed();// 0xffffff8523219000 0x7a9cd81740
	float GetMaxJumpHeightWithJumpTime();// 0xffffff8523219000 0x7a9cd81820
	float GetMaxJumpHeight();// 0xffffff8523219000 0x7a9cd81900
	float GetMaxBrakingDeceleration();// 0xffffff8523219000 0x7a9cd819e0
	float GetMaxAcceleration();// 0xffffff8523219000 0x7a9cd81ac0
	Vector GetLastUpdateVelocity();// 0xffffff8523219000 0x7a9cd81ba0
	Rotator GetLastUpdateRotation();// 0xffffff8523219000 0x7a9cd81c80
	Vector GetLastUpdateLocation();// 0xffffff8523219000 0x7a9cd3e780
	Vector GetImpartedMovementBaseVelocity();// 0xffffff8523219000 0x7a9cd3e860
	Vector GetCurrentAcceleration();// 0xffffff8523219000 0x7a9cd3e940
	Character* GetCharacterOwner();// 0xffffff8523219000 0x7a9cd3ea20
	float GetAnalogInputModifier();// 0xffffff8523219000 0x7a9cd3eb00
	void DisableMovement();// 0xffffff8523219000 0x7a9cd3ebe0
	void ClearAccumulatedForces();// 0xffffff8523219000 0x7a9cd3ecc0
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xffffff8523219000 0x7a9cd3eda0
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0xffffff8523219000 0x7a9cd3ee80
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0xffffff8523219000 0x7a9cd3ef60
	void AddForce(Vector Force);// 0xffffff8523219000 0x7a9cd3f040

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x178, Size: 0x8] 0x7a9cd4ba00
	Vector K2_GetInputVector();// 0xffffff8523219000 0x7a9cd3f120
	bool IsMoveInputIgnored();// 0xffffff8523219000 0x7a9cd3f200
	Vector GetPendingInputVector();// 0xffffff8523219000 0x7a9cd3f2e0
	Pawn* GetPawnOwner();// 0xffffff8523219000 0x7a9cd3f3c0
	Vector GetLastInputVector();// 0xffffff8523219000 0x7a9cd3f4a0
	Vector ConsumeInputVector();// 0xffffff8523219000 0x7a9cd3f580
	void AddInputVector(Vector WorldVector, bool bForce);// 0xffffff8523219000 0x7a9cd3f660

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x138, Size: 0x30] 0x7a9cd4be80
	float FixedPathBrakingDistance;//[Offset: 0x168, Size: 0x4] 0x7a9cd713c0
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16c, Size: 0x1] 0x7a9cd4bf00
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16c, Size: 0x1] 0x7a9cd4bf80
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16c, Size: 0x1] 0x7a9cd4c000
	MovementProperties MovementState;//[Offset: 0x16d, Size: 0x1] 0x7a9cd4c080
	Object* PathFollowingComp;//[Offset: 0x170, Size: 0x8] 0x7a9cd4c100
	void StopMovementKeepPathing();// 0xffffff8523219000 0x7a9cd3f740
	void StopActiveMovement();// 0xffffff8523219000 0x7a9cd3f820
	bool IsSwimming();// 0xffffff8523219000 0x7a9cd3f900
	bool IsMovingOnGround();// 0xffffff8523219000 0x7a9cd3f9e0
	bool IsFlying();// 0xffffff8523219000 0x7a9cd3fac0
	bool IsFalling();// 0xffffff8523219000 0x7a9cd3fba0
	bool IsCrouching();// 0xffffff8523219000 0x7a9cd3fc80

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xf8, Size: 0x8] 0x7aa07d7180
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0x100, Size: 0x8] 0x7aa07d7200
	Vector Velocity;//[Offset: 0x10c, Size: 0xc] 0x7aa07d7280
	Vector PlaneConstraintNormal;//[Offset: 0x118, Size: 0xc] 0x7aa07d7300
	Vector PlaneConstraintOrigin;//[Offset: 0x124, Size: 0xc] 0x7aa07d7380
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1] 0x7aa07d5300
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x130, Size: 0x1] 0x7aa07d5380
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x130, Size: 0x1] 0x7aa07d5400
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x130, Size: 0x1] 0x7aa07d5480
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x130, Size: 0x1] 0x7aa07d5500
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x130, Size: 0x1] 0x7aa07d1500
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x130, Size: 0x1] 0x7aa07d5580
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x130, Size: 0x1] 0x7aa07d5600
	enum PlaneConstraintAxisSetting;//[Offset: 0x133, Size: 0x1] 0x7aa07d5700
	void StopMovementImmediately();// 0xffffff8523219000 0x7aa07c5fe0
	void SnapUpdatedComponentToPlane();// 0xffffff8523219000 0x7aa07c60c0
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0xffffff8523219000 0x7aa07c61a0
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0xffffff8523219000 0x7aa07c6280
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0xffffff8523219000 0x7aa07c6360
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0xffffff8523219000 0x7aa07c6440
	void SetPlaneConstraintEnabled(bool bEnabled);// 0xffffff8523219000 0x7aa07c6520
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0xffffff8523219000 0x7aa07c6600
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0xffffff8523219000 0x7aa07c66e0
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0xffffff8523219000 0x7aa07c67c0
	float K2_GetModifiedMaxSpeed();// 0xffffff8523219000 0x7aa07c68a0
	float K2_GetMaxSpeedModifier();// 0xffffff8523219000 0x7aa07c6980
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0xffffff8523219000 0x7aa07c6a60
	Vector GetPlaneConstraintOrigin();// 0xffffff8523219000 0x7aa07c6b40
	Vector GetPlaneConstraintNormal();// 0xffffff8523219000 0x7aa07c6c20
	enum GetPlaneConstraintAxisSetting();// 0xffffff8523219000 0x7aa07c6d00
	PhysicsVolume* GetPhysicsVolume();// 0xffffff8523219000 0x7aa07c6de0
	float GetMaxSpeed();// 0xffffff8523219000 0x7aa07c6ec0
	float GetGravityZ();// 0xffffff8523219000 0x7aa07c6fa0
	Vector ConstrainNormalToPlane(Vector Normal);// 0xffffff8523219000 0x7aa07c7080
	Vector ConstrainLocationToPlane(Vector Location);// 0xffffff8523219000 0x7aa07c7160
	Vector ConstrainDirectionToPlane(Vector Direction);// 0xffffff8523219000 0x7aa07c7240

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4] 0x7a9ca0c2c0
	float AgentHeight;//[Offset: 0x8, Size: 0x4] 0x7a9ca0c330
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4] 0x7a9ca0c3a0
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4] 0x7a9ca0c410
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18] 0x7a9ca53e00

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7a9ca53e80
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7a9ca53f00
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7a9ca53f80
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7a9ca54000
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7a9ca54080

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8] 0x7af958fcf0
	FString SubPathString;//[Offset: 0x8, Size: 0x10] 0x7af958fdd0

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7a9ca13080
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7a9ca13100
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7a9ca13180
	float FloorDist;//[Offset: 0x4, Size: 0x4] 0x7a9ca02f50
	float LineDist;//[Offset: 0x8, Size: 0x4] 0x7a9ca02fc0
	HitResult HitResult;//[Offset: 0xc, Size: 0x88] 0x7a9ca11100

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7a9ca54100
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7a9ca54180
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7a9ca54200
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7a9ca52180
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7a9ca52200
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7a9ca52280
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7a9ca52300
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7a9ca52380
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7a9ca52400
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7a9ca52480
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7a9ca52500
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7a9ca52580
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7a9ca52600
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x7a9ca52680
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x7a9ca52780
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x7a9ca52800
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1] 0x7a9ca52880
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1] 0x7a9ca52900
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1] 0x7a9ca52980
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1] 0x7a9ca52a00
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1] 0x7a9ca52a80
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1] 0x7a9ca52b00
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1] 0x7a9ca52b80
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1] 0x7a9ca52c00
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1] 0x7a9ca52c80
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1] 0x7a9ca52d00
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1] 0x7a9ca52d80
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1] 0x7a9ca52e00
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1] 0x7a9ca52e80
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1] 0x7a9ca52f00
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1] 0x7a9ca52f80
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1] 0x7a9ca53000

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1] 0x7a9ca11500
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1] 0x7a9ca11580
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1] 0x7a9ca11600
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0xe9, Size: 0x1] 0x7a9ca11700
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0xec, Size: 0xc] 0x7a9ca11780

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1] 0x7a9ca11680

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7aa096de00
	float BlendWeight;//[Offset: 0x4, Size: 0x4] 0x7aa0939e70
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30] 0x7aa096de80

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x590, Size: 0x4] 0x7a9cd71430
	float CapsuleRadius;//[Offset: 0x594, Size: 0x4] 0x7a9cd714a0
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0xffffff8523219000 0x7a9cd3fd60
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0xffffff8523219000 0x7a9cd3fe40
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0xffffff8523219000 0x7a9cd3ff20
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0xffffff8523219000 0x7a9cd3caa0
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0xffffff8523219000 0x7a9cd3cb80
	float GetUnscaledCapsuleRadius();// 0xffffff8523219000 0x7a9cd3cc60
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0xffffff8523219000 0x7a9cd3cd40
	float GetUnscaledCapsuleHalfHeight();// 0xffffff8523219000 0x7a9cd3ce20
	float GetShapeScale();// 0xffffff8523219000 0x7a9cd3cf00
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0xffffff8523219000 0x7a9cd3cfe0
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0xffffff8523219000 0x7a9cd3d0c0
	float GetScaledCapsuleRadius();// 0xffffff8523219000 0x7a9cd3d1a0
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0xffffff8523219000 0x7a9cd3d280
	float GetScaledCapsuleHalfHeight();// 0xffffff8523219000 0x7a9cd3d360

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x578, Size: 0x8] 0x7a9cd47000
	Color ShapeColor;//[Offset: 0x580, Size: 0x4] 0x7a9cd47080
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x584, Size: 0x1] 0x7a9cd47100
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x584, Size: 0x1] 0x7a9cd47180
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x584, Size: 0x1] 0x7a9cd47200
	class NavAreaBase* AreaClass;//[Offset: 0x588, Size: 0x8] 0x7a9cd47280

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8] 0x7a9ca11a00
	FName BoneName;//[Offset: 0x8, Size: 0x8] 0x7a9ca03180
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc] 0x7a9ca11a80
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc] 0x7a9ca11b00
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7a9ca11b80
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7a9ca11c00
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x7a9ca11c80

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4] 0x7a9ca03030
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x158] 0x7a9ca11980

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7a9ca11180
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8] 0x7a9ca11200
	float Position;//[Offset: 0x10, Size: 0x4] 0x7a9ca030a0
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc] 0x7a9ca11280
	Rotator Rotation;//[Offset: 0x20, Size: 0xc] 0x7a9ca11300
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8] 0x7a9ca11380
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8] 0x7a9ca03110
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7a9ca11400
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x7a9ca11480
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0xf8] 0x7a9ca11800
	Vector_NetQuantize10 Acceleration;//[Offset: 0x140, Size: 0xc] 0x7a9ca11880
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x14c, Size: 0xc] 0x7a9ca11900

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7a9cd92d80
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7a9cd92e00
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x7a9cd92e80
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4] 0x7a9cd75790
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4] 0x7a9cd75800
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4] 0x7a9cd75870
	float DamageFalloff;//[Offset: 0x38, Size: 0x4] 0x7a9cd758e0

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x3a8, Size: 0x8] 0x7a9cbb5480
	Pawn* AcknowledgedPawn;//[Offset: 0x3b0, Size: 0x8] 0x7a9cbb5500
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x3b8, Size: 0x8] 0x7a9cbb5580
	HUD* MyHUD;//[Offset: 0x3c0, Size: 0x8] 0x7a9cbb5600
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x3c8, Size: 0x8] 0x7a9cbb5680
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x3d0, Size: 0x8] 0x7a9cbb5700
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1] 0x7a9cbb5780
	Rotator TargetViewRotation;//[Offset: 0x3dc, Size: 0xc] 0x7a9cbb5800
	float SmoothTargetViewRotationSpeed;//[Offset: 0x3f4, Size: 0x4] 0x7a9cbc0a90
	Actor*[] HiddenActors;//[Offset: 0x400, Size: 0x10] 0x7a9cbb5900
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x410, Size: 0x10] 0x7a9cbb5a00
	float LastSpectatorStateSynchTime;//[Offset: 0x424, Size: 0x4] 0x7a9cbc0b00
	Vector LastSpectatorSyncLocation;//[Offset: 0x428, Size: 0xc] 0x7a9cbb5a80
	Rotator LastSpectatorSyncRotation;//[Offset: 0x434, Size: 0xc] 0x7a9cbb5b00
	int ClientCap;//[Offset: 0x440, Size: 0x4] 0x7a9cbc0b70
	CheatManager* CheatManager;//[Offset: 0x448, Size: 0x8] 0x7a9cbb5b80
	class CheatManager* CheatClass;//[Offset: 0x450, Size: 0x8] 0x7a9cbb5c00
	PlayerInput* PlayerInput;//[Offset: 0x458, Size: 0x8] 0x7a9cbb5c80
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x460, Size: 0x10] 0x7a9cbb5d80
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4e0, Size: 0x1] 0x7a9cbb5e00
	byte NetPlayerIndex;//[Offset: 0x4e1, Size: 0x1] 0x7a9cbb5e80
	NetConnection* PendingSwapConnection;//[Offset: 0x520, Size: 0x8] 0x7a9cbb5f00
	NetConnection* NetConnection;//[Offset: 0x528, Size: 0x8] 0x7a9cbb5f80
	float InputYawScale;//[Offset: 0x53c, Size: 0x4] 0x7a9cbc0be0
	float InputPitchScale;//[Offset: 0x540, Size: 0x4] 0x7a9cbc0c50
	float InputRollScale;//[Offset: 0x544, Size: 0x4] 0x7a9cbc0cc0
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 0x1] 0x7a9cbb6000
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x548, Size: 0x1] 0x7a9cbb6080
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x548, Size: 0x1] 0x7a9cbb6100
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x548, Size: 0x1] 0x7a9cbb6180
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x548, Size: 0x1] 0x7a9cbb6200
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x548, Size: 0x1] 0x7a9cbb6280
	float ForceFeedbackScale;//[Offset: 0x54c, Size: 0x4] 0x7a9cbc0d30
	Key[] ClickEventKeys;//[Offset: 0x550, Size: 0x10] 0x7a9cbb4280
	byte DefaultMouseCursor;//[Offset: 0x560, Size: 0x1] 0x7a9cbb4300
	byte CurrentMouseCursor;//[Offset: 0x561, Size: 0x1] 0x7a9cbb4380
	byte DefaultClickTraceChannel;//[Offset: 0x562, Size: 0x1] 0x7a9cbb4400
	byte CurrentClickTraceChannel;//[Offset: 0x563, Size: 0x1] 0x7a9cbb4480
	float HitResultTraceDistance;//[Offset: 0x564, Size: 0x4] 0x7a9cbc0da0
	uint16 SeamlessTravelCount;//[Offset: 0x568, Size: 0x2] 0x7a9cbc0e10
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x56a, Size: 0x2] 0x7a9cb3f580
	InputComponent* InactiveStateInputComponent;//[Offset: 0x5e0, Size: 0x8] 0x7a9cbb4500
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5e8, Size: 0x1] 0x7a9cbb4580
	TouchInterface* CurrentTouchInterface;//[Offset: 0x600, Size: 0x8] 0x7a9cbb4600
	SpectatorPawn* SpectatorPawn;//[Offset: 0x658, Size: 0x8] 0x7a9cbb4680
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 0x1] 0x7a9cbb4700
	Vector SpawnLocation;//[Offset: 0x668, Size: 0xc] 0x7a9cbb4780
	bool WasInputKeyJustReleased(Key Key);// 0xffffff8523219000 0x7a9cb9c560
	bool WasInputKeyJustPressed(Key Key);// 0xffffff8523219000 0x7a9cb9c640
	void ToggleSpeaking(bool bInSpeaking);// 0xffffff8523219000 0x7a9cb9c720
	void SwitchLevel(FString URL);// 0xffffff8523219000 0x7a9cb9c800
	void StopHapticEffect(enum Hand);// 0xffffff8523219000 0x7a9cb9c8e0
	void StartFire(byte FireModeNum);// 0xffffff8523219000 0x7a9cb9c9c0
	void SetVirtualJoystickVisibility(bool bVisible);// 0xffffff8523219000 0x7a9cb990e0
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0xffffff8523219000 0x7a9cb991c0
	void SetName(FString S);// 0xffffff8523219000 0x7a9cb992a0
	void SetMouseLocation(const int X, const int Y);// 0xffffff8523219000 0x7a9cb99380
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0xffffff8523219000 0x7a9cb99460
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0xffffff8523219000 0x7a9cb99540
	void SetDisableHaptics(bool bNewDisabled);// 0xffffff8523219000 0x7a9cb99620
	void SetControllerLightColor(Color Color);// 0xffffff8523219000 0x7a9cb99700
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0xffffff8523219000 0x7a9cb997e0
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0xffffff8523219000 0x7a9cb998c0
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0xffffff8523219000 0x7a9cb999a0
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0xffffff8523219000 0x7a9cb99a80
	void ServerViewPrevPlayer();// 0xffffff8523219000 0x7a9cb99b60
	void ServerViewNextPlayer();// 0xffffff8523219000 0x7a9cb99c40
	void ServerVerifyViewTarget();// 0xffffff8523219000 0x7a9cb99d20
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0xffffff8523219000 0x7a9cb99e00
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0xffffff8523219000 0x7a9cb99ee0
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0xffffff8523219000 0x7a9cb99fc0
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0xffffff8523219000 0x7a9cb9a0a0
	void ServerToggleAILogging();// 0xffffff8523219000 0x7a9cb9a180
	void ServerShortTimeout();// 0xffffff8523219000 0x7a9cb9a260
	void ServerSetSpectatorWaiting(bool bWaiting);// 0xffffff8523219000 0x7a9cb9a340
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0xffffff8523219000 0x7a9cb9a420
	void ServerRestartPlayer();// 0xffffff8523219000 0x7a9cb9a500
	void ServerPause();// 0xffffff8523219000 0x7a9cb9a5e0
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0xffffff8523219000 0x7a9cb9a6c0
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0xffffff8523219000 0x7a9cb9a7a0
	void ServerCheckClientPossessionReliable();// 0xffffff8523219000 0x7a9cb9a880
	void ServerCheckClientPossession();// 0xffffff8523219000 0x7a9cb9a960
	void ServerChangeName(FString S);// 0xffffff8523219000 0x7a9cb9aa40
	void ServerCamera(FName NewMode);// 0xffffff8523219000 0x7a9cb9ab20
	void ServerAcknowledgePossession(Pawn* P);// 0xffffff8523219000 0x7a9cb9ac00
	void SendToConsole(FString Command);// 0xffffff8523219000 0x7a9cb9ace0
	void RestartLevel();// 0xffffff8523219000 0x7a9cb97400
	void ResetControllerLightColor();// 0xffffff8523219000 0x7a9cb974e0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0xffffff8523219000 0x7a9cb975c0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0xffffff8523219000 0x7a9cb976a0
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0xffffff8523219000 0x7a9cb97780
	void Pause();// 0xffffff8523219000 0x7a9cb97860
	void OnServerStartedVisualLogger(bool bIsLogging);// 0xffffff8523219000 0x7a9cb97940
	void LocalTravel(FString URL);// 0xffffff8523219000 0x7a9cb97a20
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0xffffff8523219000 0x7a9cb97b00
	bool IsInputKeyDown(Key Key);// 0xffffff8523219000 0x7a9cb97be0
	void GetViewportSize(out int SizeX, out int SizeY);// 0xffffff8523219000 0x7a9cb97cc0
	SpectatorPawn* GetSpectatorPawn();// 0xffffff8523219000 0x7a9cb97da0
	bool GetMousePosition(out float LocationX, out float LocationY);// 0xffffff8523219000 0x7a9cb97e80
	Vector GetInputVectorKeyState(Key Key);// 0xffffff8523219000 0x7a9cb97f60
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0xffffff8523219000 0x7a9cb98040
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0xffffff8523219000 0x7a9cb98120
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0xffffff8523219000 0x7a9cb98200
	float GetInputKeyTimeDown(Key Key);// 0xffffff8523219000 0x7a9cb982e0
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0xffffff8523219000 0x7a9cb983c0
	float GetInputAnalogKeyState(Key Key);// 0xffffff8523219000 0x7a9cb984a0
	HUD* GetHUD();// 0xffffff8523219000 0x7a9cb98580
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0xffffff8523219000 0x7a9cb98660
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xffffff8523219000 0x7a9cb98740
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xffffff8523219000 0x7a9cb98820
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0xffffff8523219000 0x7a9cb98900
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xffffff8523219000 0x7a9cb989e0
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xffffff8523219000 0x7a9cb98ac0
	Vector GetFocalLocation();// 0xffffff8523219000 0x7a9cb98ba0
	void FOV(float NewFOV);// 0xffffff8523219000 0x7a9cb98c80
	void EnableCheats();// 0xffffff8523219000 0x7a9cb98d60
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0xffffff8523219000 0x7a9cb98e40
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0xffffff8523219000 0x7a9cb98f20
	void ConsoleKey(Key Key);// 0xffffff8523219000 0x7a9cb99000
	void ClientWasKicked(const FText KickReason);// 0xffffff8523219000 0x7a9cb95720
	void ClientVoiceHandshakeComplete();// 0xffffff8523219000 0x7a9cb95800
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0xffffff8523219000 0x7a9cb958e0
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0xffffff8523219000 0x7a9cb959c0
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0xffffff8523219000 0x7a9cb95aa0
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0xffffff8523219000 0x7a9cb95b80
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0xffffff8523219000 0x7a9cb95c60
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0xffffff8523219000 0x7a9cb95d40
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0xffffff8523219000 0x7a9cb95e20
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0xffffff8523219000 0x7a9cb95f00
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0xffffff8523219000 0x7a9cb95fe0
	void ClientStartOnlineSession();// 0xffffff8523219000 0x7a9cb960c0
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0xffffff8523219000 0x7a9cb961a0
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0xffffff8523219000 0x7a9cb96280
	void ClientSetSpectatorWaiting(bool bWaiting);// 0xffffff8523219000 0x7a9cb96360
	void ClientSetHUD(class HUD NewHUDClass);// 0xffffff8523219000 0x7a9cb96440
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0xffffff8523219000 0x7a9cb96520
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0xffffff8523219000 0x7a9cb96600
	void ClientSetCameraMode(FName NewCamMode);// 0xffffff8523219000 0x7a9cb966e0
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0xffffff8523219000 0x7a9cb967c0
	void ClientSetBlockOnAsyncLoading();// 0xffffff8523219000 0x7a9cb968a0
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0xffffff8523219000 0x7a9cb96980
	void ClientReturnToMainMenu(FString ReturnReason);// 0xffffff8523219000 0x7a9cb96a60
	void ClientRetryClientRestart(Pawn* NewPawn);// 0xffffff8523219000 0x7a9cb96b40
	void ClientRestart(Pawn* NewPawn);// 0xffffff8523219000 0x7a9cb96c20
	void ClientReset();// 0xffffff8523219000 0x7a9cb96d00
	void ClientRepObjRef(Object* Object);// 0xffffff8523219000 0x7a9cb96de0
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0xffffff8523219000 0x7a9cb96ec0
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0xffffff8523219000 0x7a9cb96fa0
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0xffffff8523219000 0x7a9cb97080
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0xffffff8523219000 0x7a9cb97160
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0xffffff8523219000 0x7a9cb97240
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0xffffff8523219000 0x7a9cb97320
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0xffffff8523219000 0x7a9cb93a40
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0xffffff8523219000 0x7a9cb93b20
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0xffffff8523219000 0x7a9cb93c00
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0xffffff8523219000 0x7a9cb93ce0
	void ClientIgnoreMoveInput(bool bIgnore);// 0xffffff8523219000 0x7a9cb93dc0
	void ClientIgnoreLookInput(bool bIgnore);// 0xffffff8523219000 0x7a9cb93ea0
	void ClientGotoState(FName NewState);// 0xffffff8523219000 0x7a9cb93f80
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0xffffff8523219000 0x7a9cb94060
	void ClientForceGarbageCollection();// 0xffffff8523219000 0x7a9cb94140
	void ClientFlushLevelStreaming();// 0xffffff8523219000 0x7a9cb94220
	void ClientEndOnlineSession();// 0xffffff8523219000 0x7a9cb94300
	void ClientEnableNetworkVoice(bool bEnable);// 0xffffff8523219000 0x7a9cb943e0
	void ClientCommitMapChange();// 0xffffff8523219000 0x7a9cb944c0
	void ClientClearCameraLensEffects();// 0xffffff8523219000 0x7a9cb945a0
	void ClientCapBandwidth(int Cap);// 0xffffff8523219000 0x7a9cb94680
	void ClientCancelPendingMapChange();// 0xffffff8523219000 0x7a9cb94760
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0xffffff8523219000 0x7a9cb94840
	void ClearAudioListenerOverride();// 0xffffff8523219000 0x7a9cb94920
	void ClearAudioListenerAttenuationOverride();// 0xffffff8523219000 0x7a9cb94a00
	bool CanRestartPlayer();// 0xffffff8523219000 0x7a9cb94ae0
	void Camera(FName NewMode);// 0xffffff8523219000 0x7a9cb94bc0
	void AddYawInput(float Val);// 0xffffff8523219000 0x7a9cb94ca0
	void AddRollInput(float Val);// 0xffffff8523219000 0x7a9cb94d80
	void AddPitchInput(float Val);// 0xffffff8523219000 0x7a9cb94e60
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0xffffff8523219000 0x7a9cb94f40

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8] 0x7a9cb5c180
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4] 0x7a9cb38040
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4] 0x7a9cb380b0
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4] 0x7a9cb38120

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8] 0x7a9c623400

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x330, Size: 0x8] 0x7a9cb7c180
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1] 0x7a9cb7c200
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1] 0x7a9cb7c280
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1] 0x7a9cb7c300
	int CurrentTargetIndex;//[Offset: 0x33c, Size: 0x4] 0x7a9cb3cdb0
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 0x1] 0x7a9cb7c380
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x340, Size: 0x1] 0x7a9cb7c400
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x340, Size: 0x1] 0x7a9cb7c480
	Actor*[] PostRenderedActors;//[Offset: 0x348, Size: 0x10] 0x7a9cb7c580
	FName[] DebugDisplay;//[Offset: 0x360, Size: 0x10] 0x7a9cb7c600
	FName[] ToggledDebugCategories;//[Offset: 0x370, Size: 0x10] 0x7a9cb7a580
	Canvas* Canvas;//[Offset: 0x380, Size: 0x8] 0x7a9cb7a600
	Canvas* DebugCanvas;//[Offset: 0x388, Size: 0x8] 0x7a9cb7a680
	DebugTextInfo[] DebugTextList;//[Offset: 0x390, Size: 0x10] 0x7a9cb7a780
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x3a0, Size: 0x8] 0x7a9cb7a800
	Actor* ShowDebugTargetActor;//[Offset: 0x3a8, Size: 0x8] 0x7a9cb7a880
	void ShowHUD();// 0xffffff8523219000 0x7a9cb90be0
	void ShowDebugToggleSubCategory(FName Category);// 0xffffff8523219000 0x7a9cb90cc0
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0xffffff8523219000 0x7a9cb90da0
	void ShowDebug(FName DebugType);// 0xffffff8523219000 0x7a9cb90e80
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0xffffff8523219000 0x7a9cb90f60
	void RemoveAllDebugStrings();// 0xffffff8523219000 0x7a9cb91040
	void ReceiveHitBoxRelease(const FName BoxName);// 0xffffff8523219000 0x7a9cb91120
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0xffffff8523219000 0x7a9cb91200
	void ReceiveHitBoxClick(const FName BoxName);// 0xffffff8523219000 0x7a9cb912e0
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0xffffff8523219000 0x7a9cb913c0
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0xffffff8523219000 0x7a9cb914a0
	Vector Project(Vector Location);// 0xffffff8523219000 0x7a9cb91580
	void PreviousDebugTarget();// 0xffffff8523219000 0x7a9cb91660
	void NextDebugTarget();// 0xffffff8523219000 0x7a9cb91740
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0xffffff8523219000 0x7a9cb91820
	PlayerController* GetOwningPlayerController();// 0xffffff8523219000 0x7a9cb91900
	Pawn* GetOwningPawn();// 0xffffff8523219000 0x7a9cb919e0
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0xffffff8523219000 0x7a9cb91ac0
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0xffffff8523219000 0x7a9cb91ba0
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0xffffff8523219000 0x7a9cb91c80
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0xffffff8523219000 0x7a9cb4e780
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0xffffff8523219000 0x7a9cb4e860
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0xffffff8523219000 0x7a9cb4e940
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0xffffff8523219000 0x7a9cb4ea20
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0xffffff8523219000 0x7a9cb4eb00
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0xffffff8523219000 0x7a9cb4ebe0
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0xffffff8523219000 0x7a9cb4ecc0
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0xffffff8523219000 0x7a9cb4eda0
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0xffffff8523219000 0x7a9cb4ee80

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4] 0x7a9cd70470
	float OrgY;//[Offset: 0x2c, Size: 0x4] 0x7a9cd704e0
	float ClipX;//[Offset: 0x30, Size: 0x4] 0x7a9cd70550
	float ClipY;//[Offset: 0x34, Size: 0x4] 0x7a9cd705c0
	Color DrawColor;//[Offset: 0x38, Size: 0x4] 0x7a9cd4ac80
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7a9cd4ad00
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7a9cd4ad80
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x7a9cd4ae00
	int SizeX;//[Offset: 0x40, Size: 0x4] 0x7a9cd70630
	int SizeY;//[Offset: 0x44, Size: 0x4] 0x7a9cd706a0
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10] 0x7a9cd4af00
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8] 0x7a9cd4af80
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8] 0x7a9cd4b000
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8] 0x7a9cd4b080
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0xffffff8523219000 0x7a9cd3d7c0
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0xffffff8523219000 0x7a9cd3d8a0
	Vector K2_Project(Vector WorldLocation);// 0xffffff8523219000 0x7a9cd3d980
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0xffffff8523219000 0x7a9cd3da60
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0xffffff8523219000 0x7a9cd3db40
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0xffffff8523219000 0x7a9cd3dc20
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0xffffff8523219000 0x7a9cd3dd00
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0xffffff8523219000 0x7a9cd3dde0
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0xffffff8523219000 0x7a9cd3dec0
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0xffffff8523219000 0x7a9cd3dfa0
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0xffffff8523219000 0x7a9cd3e080
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0xffffff8523219000 0x7a9cd3e160
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0xffffff8523219000 0x7a9cd3e240

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4] 0x7af958dd70

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4] 0x7af958dde0
	float Y;//[Offset: 0x4, Size: 0x4] 0x7af958de50

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8] 0x7a9ca16c80
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8] 0x7a9ca16d00
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10] 0x7a9ca16d80
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8] 0x7a9ca16e00
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8] 0x7a9ca16e80
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10] 0x7a9ca16f00
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8] 0x7a9ca16f80
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8] 0x7a9ca17000
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10] 0x7a9ca17080

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8] 0x7a9ca14e00
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc] 0x7a9ca14e80
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc] 0x7a9ca14f00
	FString DebugText;//[Offset: 0x20, Size: 0x10] 0x7a9ca05640
	float TimeRemaining;//[Offset: 0x30, Size: 0x4] 0x7a9ca039d0
	float Duration;//[Offset: 0x34, Size: 0x4] 0x7a9ca03a40
	Color TextColor;//[Offset: 0x38, Size: 0x4] 0x7a9ca14f80
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7a9ca15000
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7a9ca15080
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x7a9ca15100
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc] 0x7a9ca15180
	Font* Font;//[Offset: 0x50, Size: 0x8] 0x7a9ca15200
	float FontScale;//[Offset: 0x58, Size: 0x4] 0x7a9ca03ab0

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x330, Size: 0x8] 0x7a9cb7dd80
	SceneComponent* TransformComponent;//[Offset: 0x338, Size: 0x8] 0x7a9cb7de00
	float DefaultFOV;//[Offset: 0x348, Size: 0x4] 0x7a9cb3e080
	float DefaultOrthoWidth;//[Offset: 0x350, Size: 0x4] 0x7a9cb3e0f0
	float DefaultAspectRatio;//[Offset: 0x358, Size: 0x4] 0x7a9cb3e160
	CameraCacheEntry CameraCache;//[Offset: 0x3a0, Size: 0x590] 0x7a9cb7de80
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x930, Size: 0x590] 0x7a9cb7df00
	TViewTarget ViewTarget;//[Offset: 0xec0, Size: 0x5a0] 0x7a9cb7df80
	TViewTarget PendingViewTarget;//[Offset: 0x1460, Size: 0x5a0] 0x7a9cb7e000
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1a20, Size: 0x590] 0x7a9cb7e080
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x1fb0, Size: 0x590] 0x7a9cb7e100
	CameraModifier*[] ModifierList;//[Offset: 0x2540, Size: 0x10] 0x7a9cb7e200
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2550, Size: 0x10] 0x7a9cb7e280
	float FreeCamDistance;//[Offset: 0x2560, Size: 0x4] 0x7a9cb3e1d0
	Vector FreeCamOffset;//[Offset: 0x2564, Size: 0xc] 0x7a9cb7e300
	Vector ViewTargetOffset;//[Offset: 0x2570, Size: 0xc] 0x7a9cb7e380
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2590, Size: 0x10] 0x7a9cb7e480
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x25a0, Size: 0x8] 0x7a9cb7e500
	CameraAnimInst* AnimInstPool;//[Offset: 0x25a8, Size: 0x8] 0x7a9cb7e580
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x25e8, Size: 0x10] 0x7a9cb7e680
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2608, Size: 0x10] 0x7a9cb7c680
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2618, Size: 0x10] 0x7a9cb7c780
	CameraActor* AnimCameraActor;//[Offset: 0x2628, Size: 0x8] 0x7a9cb7c800
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2630, Size: 0x1] 0x7a9cb7c880
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2630, Size: 0x1] 0x7a9cb7c900
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2630, Size: 0x1] 0x7a9cb7c980
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2630, Size: 0x1] 0x7a9cb7ca00
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2631, Size: 0x1] 0x7a9cb7ca80
	float ViewPitchMin;//[Offset: 0x2634, Size: 0x4] 0x7a9cb3e240
	float ViewPitchMax;//[Offset: 0x2638, Size: 0x4] 0x7a9cb3e2b0
	float ViewYawMin;//[Offset: 0x263c, Size: 0x4] 0x7a9cb3e320
	float ViewYawMax;//[Offset: 0x2640, Size: 0x4] 0x7a9cb3e390
	float ViewRollMin;//[Offset: 0x2644, Size: 0x4] 0x7a9cb3e400
	float ViewRollMax;//[Offset: 0x2648, Size: 0x4] 0x7a9cb3e470
	float ServerUpdateCameraTimeout;//[Offset: 0x2650, Size: 0x4] 0x7a9cb3e4e0
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0xffffff8523219000 0x7a9cb92ee0
	void StopCameraFade();// 0xffffff8523219000 0x7a9cb92fc0
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0xffffff8523219000 0x7a9cb930a0
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0xffffff8523219000 0x7a9cb93180
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0xffffff8523219000 0x7a9cb93260
	void StopAllCameraShakes(bool bImmediately);// 0xffffff8523219000 0x7a9cb93340
	void StopAllCameraAnims(bool bImmediate);// 0xffffff8523219000 0x7a9cb93420
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0xffffff8523219000 0x7a9cb93500
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0xffffff8523219000 0x7a9cb935e0
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0xffffff8523219000 0x7a9cb936c0
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0xffffff8523219000 0x7a9cb937a0
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0xffffff8523219000 0x7a9cb93880
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0xffffff8523219000 0x7a9cb93960
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0xffffff8523219000 0x7a9cb90080
	void OnPhotographySessionStart();// 0xffffff8523219000 0x7a9cb90160
	void OnPhotographySessionEnd();// 0xffffff8523219000 0x7a9cb90240
	void OnPhotographyMultiPartCaptureStart();// 0xffffff8523219000 0x7a9cb90320
	void OnPhotographyMultiPartCaptureEnd();// 0xffffff8523219000 0x7a9cb90400
	PlayerController* GetOwningPlayerController();// 0xffffff8523219000 0x7a9cb904e0
	float GetFOVAngle();// 0xffffff8523219000 0x7a9cb905c0
	Rotator GetCameraRotation();// 0xffffff8523219000 0x7a9cb906a0
	Vector GetCameraLocation();// 0xffffff8523219000 0x7a9cb90780
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0xffffff8523219000 0x7a9cb90860
	void ClearCameraLensEffects();// 0xffffff8523219000 0x7a9cb90940
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0xffffff8523219000 0x7a9cb90a20
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0xffffff8523219000 0x7a9cb90b00
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0xffffff8523219000 0x7aa084b3e0

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4] 0x7a9ca0db40
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x580] 0x7a9ca58d80

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x7a9ca11f00
	Rotator Rotation;//[Offset: 0xc, Size: 0xc] 0x7a9ca12000
	float FOV;//[Offset: 0x18, Size: 0x4] 0x7a9ca035e0
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4] 0x7a9ca03650
	float OrthoWidth;//[Offset: 0x20, Size: 0x4] 0x7a9ca036c0
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4] 0x7a9ca03730
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4] 0x7a9ca037a0
	float AspectRatio;//[Offset: 0x2c, Size: 0x4] 0x7a9ca03810
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7a9ca12080
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x7a9ca12100
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1] 0x7a9ca10080
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4] 0x7a9ca03880
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x530] 0x7aa09ea300
	Vector2D OffCenterProjectionOffset;//[Offset: 0x570, Size: 0x8] 0x7aa09ea380

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7a9ca10100
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7a9ca10180
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7a9ca10200
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7a9ca10280
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7a9ca10300
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7a9ca10380
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7a9ca10400
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7a9ca10480
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7a9ca10500
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7a9ca10580
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7a9ca10600
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7a9ca10680
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7a9ca10700
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x7a9ca10780
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x7a9ca10800
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x7a9ca10880
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1] 0x7a9ca10900
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1] 0x7a9ca10980
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1] 0x7a9ca10a00
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1] 0x7a9ca10a80
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1] 0x7a9ca10b00
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1] 0x7a9ca10b80
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1] 0x7a9ca10c00
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1] 0x7a9ca10c80
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1] 0x7a9ca10d00
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1] 0x7a9ca10d80
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1] 0x7a9ca10e00
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1] 0x7a9ca10e80
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1] 0x7a9ca10f00
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1] 0x7a9ca10f80
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1] 0x7a9ca11000
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1] 0x7a9ca11080
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x7aa09ef800
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1] 0x7aa09ef880
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1] 0x7aa09ef900
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1] 0x7aa09ef980
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1] 0x7aa09efa00
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1] 0x7aa09efa80
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1] 0x7aa09efb00
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1] 0x7aa09efb80
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1] 0x7aa09efc00
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1] 0x7aa09efc80
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1] 0x7aa09efd00
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1] 0x7aa09efd80
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1] 0x7aa09efe00
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1] 0x7aa09efe80
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1] 0x7aa09eff00
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1] 0x7aa09eff80
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1] 0x7aa09ee780
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1] 0x7aa09ee800
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1] 0x7aa09ee880
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1] 0x7aa09ee900
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1] 0x7aa09ee980
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1] 0x7aa09eea00
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1] 0x7aa09eea80
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1] 0x7aa09eeb00
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1] 0x7aa09eeb80
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1] 0x7aa09eec00
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1] 0x7aa09eec80
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1] 0x7aa09eed00
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1] 0x7aa09eed80
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1] 0x7aa09eee00
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1] 0x7aa09eee80
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1] 0x7aa09eef00
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7aa09eef80
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7aa09ef000
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x7aa09ef080
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x7aa09ef100
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1] 0x7aa09ef180
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1] 0x7aa09ef200
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1] 0x7aa09ef280
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1] 0x7aa09ef300
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1] 0x7aa09ef380
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1] 0x7aa09ef400
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1] 0x7aa09ef480
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1] 0x7aa09ef500
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1] 0x7aa09ef580
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1] 0x7aa09ef600
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1] 0x7aa09ef680
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1] 0x7aa09ef700
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x7aa09ef780
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1] 0x7aa09ed700
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1] 0x7aa09ed780
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1] 0x7aa09ed800
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1] 0x7aa09ed880
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1] 0x7aa09ed900
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1] 0x7aa09ed980
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1] 0x7aa09eda00
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1] 0x7aa09eda80
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1] 0x7aa09edb00
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1] 0x7aa09edb80
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1] 0x7aa09edc00
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1] 0x7aa09edc80
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1] 0x7aa09edd00
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1] 0x7aa09edd80
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1] 0x7aa09ede00
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7aa09ede80
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x7aa09edf00
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x7aa09edf80
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x7aa09ee000
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1] 0x7aa09ee080
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1] 0x7aa09ee100
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1] 0x7aa09ee180
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1] 0x7aa09ee200
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1] 0x7aa09ee280
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1] 0x7aa09ee300
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1] 0x7aa09ee380
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1] 0x7aa09ee400
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1] 0x7aa09ee480
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1] 0x7aa09ee500
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1] 0x7aa09ee580
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1] 0x7aa09ee600
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1] 0x7aa09ee680
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1] 0x7aa09ee700
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1] 0x7aa09ec680
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1] 0x7aa09ec700
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1] 0x7aa09ec780
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1] 0x7aa09ec800
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1] 0x7aa09ec880
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1] 0x7aa09ec900
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1] 0x7aa09ec980
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1] 0x7aa09eca00
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1] 0x7aa09eca80
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1] 0x7aa09ecb00
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1] 0x7aa09ecb80
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1] 0x7aa09ecc00
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1] 0x7aa09ecc80
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1] 0x7aa09ecd00
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7aa09ecd80
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x7aa09ece00
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x7aa09ece80
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x7aa09ecf00
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x7aa09ecf80
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x7aa09ed000
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x7aa09ed080
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x7aa09ed100
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1] 0x7aa09ed180
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1] 0x7aa09ed200
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1] 0x7aa09ed280
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1] 0x7aa09ed300
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1] 0x7aa09ed380
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1] 0x7aa09ed400
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1] 0x7aa09ed480
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1] 0x7aa09ed500
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1] 0x7aa09ed580
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1] 0x7aa09ed600
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1] 0x7aa09ed680
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1] 0x7aa09eb600
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1] 0x7aa09eb680
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1] 0x7aa09eb700
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1] 0x7aa09eb780
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1] 0x7aa09eb800
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1] 0x7aa09eb880
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1] 0x7aa09eb900
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1] 0x7aa09eb980
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1] 0x7aa09eba00
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1] 0x7aa09eba80
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1] 0x7aa09ebb00
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1] 0x7aa09ebb80
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1] 0x7aa09ebc00
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x7aa09ebc80
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1] 0x7aa09ebd00
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1] 0x7aa09ebd80
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1] 0x7aa09ebe00
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1] 0x7aa09ebe80
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1] 0x7aa09ebf00
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1] 0x7aa09ebf80
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1] 0x7aa09ec000
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1] 0x7aa09ec080
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1] 0x7aa09ec100
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1] 0x7aa09ec180
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1] 0x7aa09ec200
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1] 0x7aa09ec280
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1] 0x7aa09ec300
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1] 0x7aa09ec380
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1] 0x7aa09ec400
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1] 0x7aa09ec480
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1] 0x7aa09ec500
	byte BloomMethod;//[Offset: 0x17, Size: 0x1] 0x7aa09ec580
	byte AutoExposureMethod;//[Offset: 0x18, Size: 0x1] 0x7aa09ec600
	byte DepthOfFieldMethod;//[Offset: 0x19, Size: 0x1] 0x7aa09ea580
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4] 0x7a9ca038f0
	float WhiteTint;//[Offset: 0x20, Size: 0x4] 0x7a9ca03960
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x10] 0x7aa09ea600
	Vector4 ColorContrast;//[Offset: 0x40, Size: 0x10] 0x7aa09ea680
	Vector4 ColorGamma;//[Offset: 0x50, Size: 0x10] 0x7aa09ea700
	Vector4 ColorGain;//[Offset: 0x60, Size: 0x10] 0x7aa09ea780
	Vector4 ColorOffset;//[Offset: 0x70, Size: 0x10] 0x7aa09ea800
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 0x10] 0x7aa09ea880
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 0x10] 0x7aa09ea900
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 0x10] 0x7aa09ea980
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 0x10] 0x7aa09eaa00
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 0x10] 0x7aa09eaa80
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10] 0x7aa09eab00
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10] 0x7aa09eab80
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10] 0x7aa09eac00
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10] 0x7aa09eac80
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10] 0x7aa09ead00
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10] 0x7aa09ead80
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10] 0x7aa09eae00
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10] 0x7aa09eae80
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10] 0x7aa09eaf00
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10] 0x7aa09eaf80
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4] 0x7a9ca01cf0
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 0x4] 0x7a9ca01d60
	float BlueCorrection;//[Offset: 0x178, Size: 0x4] 0x7a9ca01dd0
	float ExpandGamut;//[Offset: 0x17c, Size: 0x4] 0x7a9ca01e40
	float FilmSlope;//[Offset: 0x180, Size: 0x4] 0x7a9ca01eb0
	float FilmToe;//[Offset: 0x184, Size: 0x4] 0x7a9ca01f20
	float FilmShoulder;//[Offset: 0x188, Size: 0x4] 0x7a9ca01f90
	float FilmBlackClip;//[Offset: 0x18c, Size: 0x4] 0x7a9ca02000
	float FilmWhiteClip;//[Offset: 0x190, Size: 0x4] 0x7a9ca02070
	LinearColor FilmWhitePoint;//[Offset: 0x194, Size: 0x10] 0x7aa09eb000
	LinearColor FilmShadowTint;//[Offset: 0x1a4, Size: 0x10] 0x7aa09eb080
	float FilmShadowTintBlend;//[Offset: 0x1b4, Size: 0x4] 0x7a9ca020e0
	float FilmShadowTintAmount;//[Offset: 0x1b8, Size: 0x4] 0x7a9ca02150
	float FilmSaturation;//[Offset: 0x1bc, Size: 0x4] 0x7a9ca021c0
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c0, Size: 0x10] 0x7aa09eb100
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d0, Size: 0x10] 0x7aa09eb180
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e0, Size: 0x10] 0x7aa09eb200
	float FilmContrast;//[Offset: 0x1f0, Size: 0x4] 0x7a9ca02230
	float FilmToeAmount;//[Offset: 0x1f4, Size: 0x4] 0x7a9ca022a0
	float FilmHealAmount;//[Offset: 0x1f8, Size: 0x4] 0x7a9ca02310
	float FilmDynamicRange;//[Offset: 0x1fc, Size: 0x4] 0x7a9ca02380
	LinearColor SceneColorTint;//[Offset: 0x200, Size: 0x10] 0x7aa09eb280
	float SceneFringeIntensity;//[Offset: 0x210, Size: 0x4] 0x7a9ca023f0
	float ChromaticAberrationStartOffset;//[Offset: 0x214, Size: 0x4] 0x7a9ca02460
	float BloomIntensity;//[Offset: 0x218, Size: 0x4] 0x7a9ca024d0
	float BloomThreshold;//[Offset: 0x21c, Size: 0x4] 0x7a9ca02540
	float BloomSizeScale;//[Offset: 0x220, Size: 0x4] 0x7a9ca025b0
	float Bloom1Size;//[Offset: 0x224, Size: 0x4] 0x7a9ca02620
	float Bloom2Size;//[Offset: 0x228, Size: 0x4] 0x7a9ca02690
	float Bloom3Size;//[Offset: 0x22c, Size: 0x4] 0x7a9ca02700
	float Bloom4Size;//[Offset: 0x230, Size: 0x4] 0x7a9ca02770
	float Bloom5Size;//[Offset: 0x234, Size: 0x4] 0x7a9ca027e0
	float Bloom6Size;//[Offset: 0x238, Size: 0x4] 0x7a9ca02850
	LinearColor Bloom1Tint;//[Offset: 0x23c, Size: 0x10] 0x7aa09eb300
	LinearColor Bloom2Tint;//[Offset: 0x24c, Size: 0x10] 0x7aa09eb380
	LinearColor Bloom3Tint;//[Offset: 0x25c, Size: 0x10] 0x7aa09eb400
	LinearColor Bloom4Tint;//[Offset: 0x26c, Size: 0x10] 0x7aa09eb480
	LinearColor Bloom5Tint;//[Offset: 0x27c, Size: 0x10] 0x7aa09eb500
	LinearColor Bloom6Tint;//[Offset: 0x28c, Size: 0x10] 0x7aa09eb580
	float BloomConvolutionSize;//[Offset: 0x29c, Size: 0x4] 0x7a9ca028c0
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2a0, Size: 0x8] 0x7aa09e9500
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2a8, Size: 0x8] 0x7aa09e9580
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b0, Size: 0x4] 0x7a9ca02930
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b4, Size: 0x4] 0x7a9ca029a0
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b8, Size: 0x4] 0x7a9ca02a10
	float BloomConvolutionBufferScale;//[Offset: 0x2bc, Size: 0x4] 0x7a9ca02a80
	Texture* BloomDirtMask;//[Offset: 0x2c0, Size: 0x8] 0x7aa09e9600
	float BloomDirtMaskIntensity;//[Offset: 0x2c8, Size: 0x4] 0x7a9ca02af0
	LinearColor BloomDirtMaskTint;//[Offset: 0x2cc, Size: 0x10] 0x7aa09e9680
	LinearColor AmbientCubemapTint;//[Offset: 0x2dc, Size: 0x10] 0x7aa09e9700
	float AmbientCubemapIntensity;//[Offset: 0x2ec, Size: 0x4] 0x7a9ca00e80
	TextureCube* AmbientCubemap;//[Offset: 0x2f0, Size: 0x8] 0x7aa09e9780
	float CameraShutterSpeed;//[Offset: 0x2f8, Size: 0x4] 0x7a9ca00ef0
	float CameraISO;//[Offset: 0x2fc, Size: 0x4] 0x7a9ca00f60
	float DepthOfFieldFstop;//[Offset: 0x300, Size: 0x4] 0x7a9ca00fd0
	float DepthOfFieldMinFstop;//[Offset: 0x304, Size: 0x4] 0x7a9ca01040
	int DepthOfFieldBladeCount;//[Offset: 0x308, Size: 0x4] 0x7a9ca010b0
	float AutoExposureBias;//[Offset: 0x30c, Size: 0x4] 0x7a9ca01120
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x310, Size: 0x8] 0x7aa09e9800
	float AutoExposureLowPercent;//[Offset: 0x318, Size: 0x4] 0x7a9ca01190
	float AutoExposureHighPercent;//[Offset: 0x31c, Size: 0x4] 0x7a9ca01200
	float AutoExposureMinBrightness;//[Offset: 0x320, Size: 0x4] 0x7a9ca01270
	float AutoExposureMaxBrightness;//[Offset: 0x324, Size: 0x4] 0x7a9ca012e0
	float AutoExposureSpeedUp;//[Offset: 0x328, Size: 0x4] 0x7a9ca01350
	float AutoExposureSpeedDown;//[Offset: 0x32c, Size: 0x4] 0x7a9ca013c0
	float HistogramLogMin;//[Offset: 0x330, Size: 0x4] 0x7a9ca01430
	float HistogramLogMax;//[Offset: 0x334, Size: 0x4] 0x7a9ca014a0
	float AutoExposureCalibrationConstant;//[Offset: 0x338, Size: 0x4] 0x7a9ca01510
	float LensFlareIntensity;//[Offset: 0x33c, Size: 0x4] 0x7a9ca01580
	LinearColor LensFlareTint;//[Offset: 0x340, Size: 0x10] 0x7aa09e9880
	float LensFlareBokehSize;//[Offset: 0x350, Size: 0x4] 0x7a9ca015f0
	float LensFlareThreshold;//[Offset: 0x354, Size: 0x4] 0x7a9ca01660
	Texture* LensFlareBokehShape;//[Offset: 0x358, Size: 0x8] 0x7aa09e9900
	LinearColor LensFlareTints;//[Offset: 0x360, Size: 0x10] 0x7aa09e9980
	float VignetteIntensity;//[Offset: 0x3e0, Size: 0x4] 0x7a9ca016d0
	float GrainJitter;//[Offset: 0x3e4, Size: 0x4] 0x7a9ca01740
	float GrainIntensity;//[Offset: 0x3e8, Size: 0x4] 0x7a9ca017b0
	float AmbientOcclusionIntensity;//[Offset: 0x3ec, Size: 0x4] 0x7a9ca01820
	float AmbientOcclusionStaticFraction;//[Offset: 0x3f0, Size: 0x4] 0x7a9ca01890
	float AmbientOcclusionRadius;//[Offset: 0x3f4, Size: 0x4] 0x7a9ca01900
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f8, Size: 0x1] 0x7aa09e9a00
	float AmbientOcclusionFadeDistance;//[Offset: 0x3fc, Size: 0x4] 0x7a9ca01970
	float AmbientOcclusionFadeRadius;//[Offset: 0x400, Size: 0x4] 0x7a9ca019e0
	float AmbientOcclusionDistance;//[Offset: 0x404, Size: 0x4] 0x7a9ca01a50
	float AmbientOcclusionPower;//[Offset: 0x408, Size: 0x4] 0x7a9ca01ac0
	float AmbientOcclusionBias;//[Offset: 0x40c, Size: 0x4] 0x7a9ca01b30
	float AmbientOcclusionQuality;//[Offset: 0x410, Size: 0x4] 0x7a9ca01ba0
	float AmbientOcclusionMipBlend;//[Offset: 0x414, Size: 0x4] 0x7a9ca01c10
	float AmbientOcclusionMipScale;//[Offset: 0x418, Size: 0x4] 0x7a9ca01c80
	float AmbientOcclusionMipThreshold;//[Offset: 0x41c, Size: 0x4] 0x7a9ca00010
	int RayTracingAOSamplesPerPixel;//[Offset: 0x420, Size: 0x4] 0x7a9ca00080
	LinearColor IndirectLightingColor;//[Offset: 0x424, Size: 0x10] 0x7aa09e9a80
	float IndirectLightingIntensity;//[Offset: 0x434, Size: 0x4] 0x7a9ca000f0
	bool RayTracingGI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 0x1] 0x7aa09e9b00
	int RayTracingGIMaxBounces;//[Offset: 0x43c, Size: 0x4] 0x7a9ca00160
	int RayTracingGISamplesPerPixel;//[Offset: 0x440, Size: 0x4] 0x7a9ca001d0
	float ColorGradingIntensity;//[Offset: 0x444, Size: 0x4] 0x7a9ca00240
	Texture* ColorGradingLUT;//[Offset: 0x448, Size: 0x8] 0x7aa09e9d00
	float DepthOfFieldSensorWidth;//[Offset: 0x450, Size: 0x4] 0x7a9ca002b0
	float DepthOfFieldFocalDistance;//[Offset: 0x454, Size: 0x4] 0x7a9ca00320
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x458, Size: 0x4] 0x7a9ca00390
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x45c, Size: 0x4] 0x7a9ca00400
	float DepthOfFieldFocalRegion;//[Offset: 0x460, Size: 0x4] 0x7a9ca00470
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x464, Size: 0x4] 0x7a9ca004e0
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x468, Size: 0x4] 0x7a9ca00550
	float DepthOfFieldScale;//[Offset: 0x46c, Size: 0x4] 0x7a9ca005c0
	float DepthOfFieldMaxBokehSize;//[Offset: 0x470, Size: 0x4] 0x7a9ca00630
	float DepthOfFieldNearBlurSize;//[Offset: 0x474, Size: 0x4] 0x7a9ca006a0
	float DepthOfFieldFarBlurSize;//[Offset: 0x478, Size: 0x4] 0x7a9ca00710
	float DepthOfFieldOcclusion;//[Offset: 0x47c, Size: 0x4] 0x7a9ca00780
	Texture* DepthOfFieldBokehShape;//[Offset: 0x480, Size: 0x8] 0x7aa09e9b80
	float DepthOfFieldColorThreshold;//[Offset: 0x488, Size: 0x4] 0x7a9ca007f0
	float DepthOfFieldSizeThreshold;//[Offset: 0x48c, Size: 0x4] 0x7a9ca00860
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x490, Size: 0x4] 0x7a9ca008d0
	float DepthOfFieldVignetteSize;//[Offset: 0x494, Size: 0x4] 0x7a9ca00940
	float MotionBlurAmount;//[Offset: 0x498, Size: 0x4] 0x7a9ca009b0
	float MotionBlurMax;//[Offset: 0x49c, Size: 0x4] 0x7a9ca00a20
	float MotionBlurPerObjectSize;//[Offset: 0x4a0, Size: 0x4] 0x7a9ca00a90
	float LPVIntensity;//[Offset: 0x4a4, Size: 0x4] 0x7a9ca00b00
	float LPVVplInjectionBias;//[Offset: 0x4a8, Size: 0x4] 0x7a9ca00b70
	float LPVSize;//[Offset: 0x4ac, Size: 0x4] 0x7a9ca00be0
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4b0, Size: 0x4] 0x7a9ca00c50
	float LPVSecondaryBounceIntensity;//[Offset: 0x4b4, Size: 0x4] 0x7a9ca00cc0
	float LPVGeometryVolumeBias;//[Offset: 0x4b8, Size: 0x4] 0x7a9ca00d30
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4bc, Size: 0x4] 0x7a9ca00da0
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4c0, Size: 0x4] 0x7a9ca00e10
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4c4, Size: 0x4] 0x7aa093f580
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4c8, Size: 0x4] 0x7aa093f5f0
	float LPVSpecularOcclusionExponent;//[Offset: 0x4cc, Size: 0x4] 0x7aa093f660
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4d0, Size: 0x4] 0x7aa093f6d0
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4d4, Size: 0x4] 0x7aa093f740
	enum ReflectionsType;//[Offset: 0x4d8, Size: 0x1] 0x7aa09e9c80
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4dc, Size: 0x4] 0x7aa093f7b0
	float ScreenSpaceReflectionQuality;//[Offset: 0x4e0, Size: 0x4] 0x7aa093f820
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4e4, Size: 0x4] 0x7aa093f890
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x4e8, Size: 0x4] 0x7aa093f900
	int RayTracingReflectionsMaxBounces;//[Offset: 0x4ec, Size: 0x4] 0x7aa093f970
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x4f0, Size: 0x4] 0x7aa093f9e0
	enum RayTracingReflectionsShadows;//[Offset: 0x4f4, Size: 0x1] 0x7aa09e9e00
	enum TranslucencyType;//[Offset: 0x4f5, Size: 0x1] 0x7aa09e9f00
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x4f8, Size: 0x4] 0x7aa093fa50
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x4fc, Size: 0x4] 0x7aa093fac0
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x500, Size: 0x4] 0x7aa093fb30
	enum RayTracingTranslucencyShadows;//[Offset: 0x504, Size: 0x1] 0x7aa09ea000
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x505, Size: 0x1] 0x7aa09ea080
	int PathTracingMaxBounces;//[Offset: 0x508, Size: 0x4] 0x7aa093fba0
	int PathTracingSamplesPerPixel;//[Offset: 0x50c, Size: 0x4] 0x7aa093fc10
	float LPVFadeRange;//[Offset: 0x510, Size: 0x4] 0x7aa093fc80
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x514, Size: 0x4] 0x7aa093fcf0
	float ScreenPercentage;//[Offset: 0x518, Size: 0x4] 0x7aa093fd60
	WeightedBlendables WeightedBlendables;//[Offset: 0x520, Size: 0x10] 0x7aa09ea280

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4] 0x7af958dec0
	float Y;//[Offset: 0x4, Size: 0x4] 0x7af958df30
	float Z;//[Offset: 0x8, Size: 0x4] 0x7af958dfa0
	float W;//[Offset: 0xc, Size: 0x4] 0x7af958e010

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10] 0x7aa09ea200

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4] 0x7aa093fdd0
	Object* Object;//[Offset: 0x8, Size: 0x8] 0x7aa09ea100

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8] 0x7a9ca58e00
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x580] 0x7a9ca58e80
	PlayerState* PlayerState;//[Offset: 0x590, Size: 0x8] 0x7a9ca58f00

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7a9cd47780
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7a9cd47800
	byte Priority;//[Offset: 0x29, Size: 0x1] 0x7a9cd47880
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8] 0x7a9cd47900
	float AlphaInTime;//[Offset: 0x38, Size: 0x4] 0x7a9cd1f890
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4] 0x7a9cd1f900
	float Alpha;//[Offset: 0x40, Size: 0x4] 0x7a9cd1f970
	bool IsDisabled();// 0xffffff8523219000 0x7a9cd3e6a0
	Actor* GetViewTarget();// 0xffffff8523219000 0x7a9cd3adc0
	void EnableModifier();// 0xffffff8523219000 0x7a9cd3aea0
	void DisableModifier(bool bImmediate);// 0xffffff8523219000 0x7a9cd3af80
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0xffffff8523219000 0x7a9cd3b060
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0xffffff8523219000 0x7a9cd3b140

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x380, Size: 0x8] 0x7a9cd98780
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x388, Size: 0x8] 0x7a9cd98800
	PlayerCameraManager* BaseCamera;//[Offset: 0x390, Size: 0x8] 0x7a9cd98880
	Transform RelativeTransform;//[Offset: 0x3a0, Size: 0x30] 0x7a9cd98900
	float BaseFOV;//[Offset: 0x3d0, Size: 0x4] 0x7a9cd7a880
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d4, Size: 0x1] 0x7a9cd98980
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d4, Size: 0x1] 0x7a9cd98a00
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x3d8, Size: 0x10] 0x7a9cd98b00
	float DistFromCamera;//[Offset: 0x3e8, Size: 0x4] 0x7a9cd7a8f0

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x330, Size: 0x8] 0x7a9cd98b80
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1] 0x7a9cd98c00
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1] 0x7a9cd98d00
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1] 0x7a9cd98d80
	delegate OnParticleSpawn;//[Offset: 0x340, Size: 0x10] 0x7a9cd98e00
	delegate OnParticleBurst;//[Offset: 0x350, Size: 0x10] 0x7a9cd98e80
	delegate OnParticleDeath;//[Offset: 0x360, Size: 0x10] 0x7a9cd98f00
	delegate OnParticleCollide;//[Offset: 0x370, Size: 0x10] 0x7a9cd98f80
	void ToggleActive();// 0xffffff8523219000 0x7a9cd89700
	void SetVectorParameter(FName ParameterName, Vector Param);// 0xffffff8523219000 0x7a9cd897e0
	void SetTemplate(ParticleSystem* NewTemplate);// 0xffffff8523219000 0x7a9cd898c0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0xffffff8523219000 0x7a9cd899a0
	void SetFloatParameter(FName ParameterName, float Param);// 0xffffff8523219000 0x7a9cd89a80
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0xffffff8523219000 0x7a9cd89b60
	void SetActorParameter(FName ParameterName, Actor* Param);// 0xffffff8523219000 0x7a9cd89c40
	void OnRep_bCurrentlyActive();// 0xffffff8523219000 0x7a9cd89d20
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0xffffff8523219000 0x7a9cd89e00
	bool IsActive();// 0xffffff8523219000 0x7a9cd89ee0
	void Deactivate();// 0xffffff8523219000 0x7a9cd89fc0
	void Activate();// 0xffffff8523219000 0x7a9cd8a0a0

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x578, Size: 0x8] 0x7a9c7d5100
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x580, Size: 0x10] 0x7a9c7d5200
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x590, Size: 0x10] 0x7a9c7d3200
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a1, Size: 0x1] 0x7a9c7d3280
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a1, Size: 0x1] 0x7a9c7d3300
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a1, Size: 0x1] 0x7a9c7d3380
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a1, Size: 0x1] 0x7a9c7d3400
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a2, Size: 0x1] 0x7a9c7d3480
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a2, Size: 0x1] 0x7a9c7d3500
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a2, Size: 0x1] 0x7a9c7d3580
	byte LODMethod;//[Offset: 0x5ad, Size: 0x1] 0x7a9c7d3600
	enum RequiredSignificance;//[Offset: 0x5ae, Size: 0x1] 0x7a9c7d3700
	ParticleSysParam[] InstanceParameters;//[Offset: 0x5b0, Size: 0x10] 0x7a9c7d3780
	delegate OnParticleSpawn;//[Offset: 0x5c0, Size: 0x10] 0x7a9c7d3800
	delegate OnParticleBurst;//[Offset: 0x5d0, Size: 0x10] 0x7a9c7d3880
	delegate OnParticleDeath;//[Offset: 0x5e0, Size: 0x10] 0x7a9c7d3900
	delegate OnParticleCollide;//[Offset: 0x5f0, Size: 0x10] 0x7a9c7d3980
	Vector OldPosition;//[Offset: 0x600, Size: 0xc] 0x7a9c7d3a00
	Vector PartSysVelocity;//[Offset: 0x60c, Size: 0xc] 0x7a9c7d3a80
	float WarmupTime;//[Offset: 0x618, Size: 0x4] 0x7a9c6dd600
	float WarmupTickRate;//[Offset: 0x61c, Size: 0x4] 0x7a9c6dd670
	float SecondsBeforeInactive;//[Offset: 0x624, Size: 0x4] 0x7a9c6dd6e0
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x62c, Size: 0x4] 0x7a9c6dd750
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x650, Size: 0x10] 0x7a9c7d3b80
	float CustomTimeDilation;//[Offset: 0x668, Size: 0x4] 0x7a9c6dd7c0
	SceneComponent* AutoAttachParent;//[Offset: 0x6c0, Size: 0x8] 0x7a9c7d3c00
	FName AutoAttachSocketName;//[Offset: 0x6c8, Size: 0x8] 0x7a9c6dd830
	enum AutoAttachLocationRule;//[Offset: 0x6d0, Size: 0x1] 0x7a9c7d3d00
	enum AutoAttachRotationRule;//[Offset: 0x6d1, Size: 0x1] 0x7a9c7d3e00
	enum AutoAttachScaleRule;//[Offset: 0x6d2, Size: 0x1] 0x7a9c7d3f00
	delegate OnSystemFinished;//[Offset: 0x700, Size: 0x10] 0x7a9c7d3f80
	void SetVectorParameter(FName ParameterName, Vector Param);// 0xffffff8523219000 0x7a9c6ca6c0
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0xffffff8523219000 0x7a9c6ca7a0
	void SetTemplate(ParticleSystem* NewTemplate);// 0xffffff8523219000 0x7a9c6ca880
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0xffffff8523219000 0x7a9c6ca960
	void SetFloatParameter(FName ParameterName, float Param);// 0xffffff8523219000 0x7a9c6caa40
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0xffffff8523219000 0x7a9c6cac00
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0xffffff8523219000 0x7a9c6cace0
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0xffffff8523219000 0x7a9c6c7400
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0xffffff8523219000 0x7a9c6c74e0
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0xffffff8523219000 0x7a9c6c75c0
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0xffffff8523219000 0x7a9c6c76a0
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0xffffff8523219000 0x7a9c6c7780
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0xffffff8523219000 0x7a9c6c7860
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0xffffff8523219000 0x7a9c6c7940
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0xffffff8523219000 0x7a9c6c7a20
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0xffffff8523219000 0x7a9c6c7b00
	void SetActorParameter(FName ParameterName, Actor* Param);// 0xffffff8523219000 0x7a9c6c7be0
	void ReleaseToPool();// 0xffffff8523219000 0x7a9c6c7cc0
	int GetNumActiveParticles();// 0xffffff8523219000 0x7a9c6c7da0
	MaterialInterface* GetNamedMaterial(FName InName);// 0xffffff8523219000 0x7a9c6c7e80
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0xffffff8523219000 0x7a9c6c7f60
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0xffffff8523219000 0x7a9c6c8040
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0xffffff8523219000 0x7a9c6c8120
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0xffffff8523219000 0x7a9c6c8200
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0xffffff8523219000 0x7a9c6c82e0
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0xffffff8523219000 0x7a9c6c83c0
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0xffffff8523219000 0x7a9c6c84a0
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0xffffff8523219000 0x7a9c6c8580
	void EndTrails();// 0xffffff8523219000 0x7a9c6c8660
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0xffffff8523219000 0x7a9c6c8740
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0xffffff8523219000 0x7a9c6c8820

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x28, Size: 0x1] 0x7a9c7d1300
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4] 0x7a9c6db4c0
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4] 0x7a9c6db530
	float WarmupTime;//[Offset: 0x34, Size: 0x4] 0x7a9c6db5a0
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4] 0x7a9c6db610
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10] 0x7a9c7d1400
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8] 0x7a9c7d1480
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8] 0x7a9c7d1500
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7a9c7d1580
	float LODDistanceCheckTime;//[Offset: 0x64, Size: 0x4] 0x7a9c6db680
	byte LODMethod;//[Offset: 0x68, Size: 0x1] 0x7a9c7d1600
	float[] LODDistances;//[Offset: 0x70, Size: 0x10] 0x7a9c7d1680
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9c7d1700
	ParticleSystemLOD[] LODSettings;//[Offset: 0x88, Size: 0x10] 0x7a9c7d1800
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x7a9c7d1880
	Box FixedRelativeBoundingBox;//[Offset: 0x9c, Size: 0x1c] 0x7a9c7d1900
	float SecondsBeforeInactive;//[Offset: 0xb8, Size: 0x4] 0x7a9c6db760
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1] 0x7a9c7d1980
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1] 0x7a9c7d1a00
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 0x1] 0x7a9c7d1a80
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbc, Size: 0x1] 0x7a9c7d1b80
	float Delay;//[Offset: 0xc0, Size: 0x4] 0x7a9c6db7d0
	float DelayLow;//[Offset: 0xc4, Size: 0x4] 0x7a9c6db840
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x7a9c7d1c00
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1] 0x7a9c7d1c80
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1] 0x7a9c7d1d00
	uint32 MinTimeBetweenTicks;//[Offset: 0xcc, Size: 0x4] 0x7a9c6db8b0
	enum InsignificantReaction;//[Offset: 0xd0, Size: 0x1] 0x7a9c7d1e00
	float InsignificanceDelay;//[Offset: 0xd4, Size: 0x4] 0x7a9c6db920
	enum MaxSignificanceLevel;//[Offset: 0xd8, Size: 0x1] 0x7a9c7d1f00
	uint32 MaxPoolSize;//[Offset: 0xdc, Size: 0x4] 0x7a9c6db990
	Vector MacroUVPosition;//[Offset: 0xe0, Size: 0xc] 0x7a9c7d1f80
	float MacroUVRadius;//[Offset: 0xec, Size: 0x4] 0x7a9c6dba00
	byte OcclusionBoundsMethod;//[Offset: 0xf0, Size: 0x1] 0x7a9c7d2000
	Box CustomOcclusionBounds;//[Offset: 0xf4, Size: 0x1c] 0x7a9c7d2080
	LODSoloTrack[] SoloTracking;//[Offset: 0x110, Size: 0x10] 0x7a9c7d0080
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x120, Size: 0x10] 0x7a9c7d0180
	bool ContainsEmitterType(class Object TypeData);// 0xffffff8523219000 0x7a9c6c8900

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8] 0x7a9c6d8c80
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4] 0x7a9c6d8cf0
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1] 0x7a9c7b5100
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1] 0x7a9c7b5200
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1] 0x7a9c7b5280
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1] 0x7a9c7b3200
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1] 0x7a9c7b3280
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1] 0x7a9c7b3300
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1] 0x7a9c7b3380
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7a9c7b3400
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10] 0x7a9c7b3500
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4] 0x7a9c6d8d60
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4] 0x7a9c6d8dd0
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4] 0x7a9c6d8e40
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4] 0x7a9c6d8eb0

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4] 0x7a9c6d8ba0
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x7a9c7b4800
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8] 0x7a9c7b4880
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10] 0x7a9c7b4980
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8] 0x7a9c7b4a00
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8] 0x7a9c7b4a80
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8] 0x7a9c7b4b00
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10] 0x7a9c7b4c00
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10] 0x7a9c7b4d00
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10] 0x7a9c7b4e00
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10] 0x7a9c7b4f00
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10] 0x7a9c7b5000
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7a9c7b5080
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4] 0x7a9c6d8c10

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8] 0x7a9c7bcc00
	Vector EmitterOrigin;//[Offset: 0x38, Size: 0xc] 0x7a9c7bcc80
	Rotator EmitterRotation;//[Offset: 0x44, Size: 0xc] 0x7a9c7bcd00
	byte ScreenAlignment;//[Offset: 0x50, Size: 0x1] 0x7a9c7bcd80
	float MinFacingCameraBlendDistance;//[Offset: 0x54, Size: 0x4] 0x7a9c6dace0
	float MaxFacingCameraBlendDistance;//[Offset: 0x58, Size: 0x4] 0x7a9c6d9070
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1] 0x7a9c7bce00
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1] 0x7a9c7bce80
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1] 0x7a9c7bcf00
	byte SortMode;//[Offset: 0x5d, Size: 0x1] 0x7a9c7bcf80
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e, Size: 0x1] 0x7a9c7bd000
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5e, Size: 0x1] 0x7a9c7bd080
	float EmitterDuration;//[Offset: 0x60, Size: 0x4] 0x7a9c6d90e0
	float EmitterDurationLow;//[Offset: 0x64, Size: 0x4] 0x7a9c6d9150
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7a9c7bd100
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x7a9c7bd180
	int EmitterLoops;//[Offset: 0x6c, Size: 0x4] 0x7a9c6d91c0
	RawDistributionFloat SpawnRate;//[Offset: 0x70, Size: 0x38] 0x7a9c7bd200
	byte ParticleBurstMethod;//[Offset: 0xa8, Size: 0x1] 0x7a9c7bd280
	ParticleBurst[] BurstList;//[Offset: 0xb0, Size: 0x10] 0x7a9c7bd380
	float EmitterDelay;//[Offset: 0xc0, Size: 0x4] 0x7a9c6d9230
	float EmitterDelayLow;//[Offset: 0xc4, Size: 0x4] 0x7a9c6d92a0
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x7a9c7bd400
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1] 0x7a9c7bd480
	byte InterpolationMethod;//[Offset: 0xc9, Size: 0x1] 0x7a9c7bd500
	int SubImages_Horizontal;//[Offset: 0xcc, Size: 0x4] 0x7a9c6d9310
	int SubImages_Vertical;//[Offset: 0xd0, Size: 0x4] 0x7a9c6d9380
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1] 0x7a9c7bd600
	float RandomImageTime;//[Offset: 0xd8, Size: 0x4] 0x7a9c6d93f0
	int RandomImageChanges;//[Offset: 0xdc, Size: 0x4] 0x7a9c6d9460
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1] 0x7a9c7bd680
	Vector MacroUVPosition;//[Offset: 0xe4, Size: 0xc] 0x7a9c7bb600
	float MacroUVRadius;//[Offset: 0xf0, Size: 0x4] 0x7a9c6d94d0
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1] 0x7a9c7bb680
	int MaxDrawCount;//[Offset: 0xf8, Size: 0x4] 0x7a9c6d9540
	enum UVFlippingMode;//[Offset: 0xfc, Size: 0x1] 0x7a9c7bb780
	Texture2D* CutoutTexture;//[Offset: 0x100, Size: 0x8] 0x7a9c7bb800
	byte BoundingMode;//[Offset: 0x108, Size: 0x1] 0x7a9c7bb880
	byte OpacitySourceMode;//[Offset: 0x109, Size: 0x1] 0x7a9c7bb900
	float AlphaThreshold;//[Offset: 0x10c, Size: 0x4] 0x7a9c6d95b0
	byte EmitterNormalsMode;//[Offset: 0x110, Size: 0x1] 0x7a9c7bb980
	Vector NormalsSphereCenter;//[Offset: 0x114, Size: 0xc] 0x7a9c7bba00
	Vector NormalsCylinderDirection;//[Offset: 0x120, Size: 0xc] 0x7a9c7bba80
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c, Size: 0x1] 0x7a9c7bbb00
	FName[] NamedMaterialOverrides;//[Offset: 0x130, Size: 0x10] 0x7a9c7bbb80

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7a9c7b6280
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7a9c7b6300
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x7a9c7b4280
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x7a9c7b4300
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1] 0x7a9c7b4380
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1] 0x7a9c7b4400
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1] 0x7a9c7b4480
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1] 0x7a9c7b4500
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x7a9c7b4580
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1] 0x7a9c7b4600
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1] 0x7a9c7b4680
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1] 0x7a9c7b4700
	byte LODValidity;//[Offset: 0x2a, Size: 0x1] 0x7a9c7b4780

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4] 0x7a9ca05410
	float MaxValue;//[Offset: 0x2c, Size: 0x4] 0x7a9ca05480
	DistributionFloat* Distribution;//[Offset: 0x30, Size: 0x8] 0x7a9ca14780

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x28] 0x7a9637d700

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 0x1] 0x7a9637d780
	byte EntryCount;//[Offset: 0x1, Size: 0x1] 0x7a9637d800
	byte EntryStride;//[Offset: 0x2, Size: 0x1] 0x7a9637d900
	byte SubEntryStride;//[Offset: 0x3, Size: 0x1] 0x7af81c2380
	float TimeScale;//[Offset: 0x4, Size: 0x4] 0x7a963eae30
	float TimeBias;//[Offset: 0x8, Size: 0x4] 0x7a963ead50
	float[] Values;//[Offset: 0x10, Size: 0x10] 0x7a9637d880
	byte LockFlag;//[Offset: 0x20, Size: 0x1] 0x7af81c1300

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7a9cd97000
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x7a9cd97080

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4] 0x7a9ca0d600
	int CountLow;//[Offset: 0x4, Size: 0x4] 0x7a9ca0d670
	float Time;//[Offset: 0x8, Size: 0x4] 0x7a9ca0d6e0

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x38] 0x7a9c7bde80
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 0x38] 0x7a9c7bdf00
	byte ParticleBurstMethod;//[Offset: 0xa0, Size: 0x1] 0x7a9c7bdf80
	ParticleBurst[] BurstList;//[Offset: 0xa8, Size: 0x10] 0x7a9c7be080
	RawDistributionFloat BurstScale;//[Offset: 0xb8, Size: 0x38] 0x7a9c7be100
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x7a9c7be180

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7a9c7be200
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x7a9c7be280

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10] 0x7a9c7b8f00

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1] 0x7a9ca55880
	int Frequency;//[Offset: 0x4, Size: 0x4] 0x7a9ca0d360
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4] 0x7a9ca0d3d0
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7a9ca55900
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x7a9ca55980
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x7a9ca55a00
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x7a9ca55a80
	FName CustomName;//[Offset: 0x10, Size: 0x8] 0x7a9ca0d440
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10] 0x7a9ca55b80

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1] 0x7a9c7bbf00
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x50] 0x7a9c7bbf80
	OrbitOptions OffsetOptions;//[Offset: 0x80, Size: 0x4] 0x7a9c7bc000
	RawDistributionVector RotationAmount;//[Offset: 0x88, Size: 0x50] 0x7a9c7bc080
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 0x4] 0x7a9c7bc100
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 0x50] 0x7a9c7bc180
	OrbitOptions RotationRateOptions;//[Offset: 0x130, Size: 0x4] 0x7a9c7bc200

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7a9c7bc280

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4] 0x7a9ca05330
	float MaxValue;//[Offset: 0x2c, Size: 0x4] 0x7a9ca053a0
	Vector MinValueVec;//[Offset: 0x30, Size: 0xc] 0x7a9ca14600
	Vector MaxValueVec;//[Offset: 0x3c, Size: 0xc] 0x7a9ca14680
	DistributionVector* Distribution;//[Offset: 0x48, Size: 0x8] 0x7a9ca14700

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7a9cd96d00
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x7a9cd96d80
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x7a9cd96e00

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7a9ca55680
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7a9ca55700
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7a9ca55780

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1] 0x7a9c7b8e00
	FName EventName;//[Offset: 0x2c, Size: 0x8] 0x7a9c6d8200

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10] 0x7a9c623180
	int ActiveTab;//[Offset: 0x38, Size: 0x4] 0x7a9cde48b0

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10] 0x7a9ca09620
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10] 0x7a9ca1bb80
	float ViewStartInput;//[Offset: 0x20, Size: 0x4] 0x7a9ca099a0
	float ViewEndInput;//[Offset: 0x24, Size: 0x4] 0x7a9ca09a10
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4] 0x7a9ca09a80
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4] 0x7a9ca09af0

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8] 0x7a9ca1ba00
	Color CurveColor;//[Offset: 0x8, Size: 0x4] 0x7a9ca1ba80
	FString CurveName;//[Offset: 0x10, Size: 0x10] 0x7a9ca09690
	int bHideCurve;//[Offset: 0x20, Size: 0x4] 0x7a9ca09700
	int bColorCurve;//[Offset: 0x24, Size: 0x4] 0x7a9ca09770
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4] 0x7a9ca097e0
	int bClamp;//[Offset: 0x2c, Size: 0x4] 0x7a9ca09850
	float ClampLow;//[Offset: 0x30, Size: 0x4] 0x7a9ca098c0
	float ClampHigh;//[Offset: 0x34, Size: 0x4] 0x7a9ca09930

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10] 0x7a9ca57680

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7a9ca0e2b0
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x7a9ca57700

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7a9ca0e160
	byte ParamType;//[Offset: 0x8, Size: 0x1] 0x7a9ca59400
	float Scalar;//[Offset: 0xc, Size: 0x4] 0x7a9ca0e1d0
	float Scalar_Low;//[Offset: 0x10, Size: 0x4] 0x7a9ca0e240
	Vector Vector;//[Offset: 0x14, Size: 0xc] 0x7a9ca59480
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc] 0x7a9ca57400
	Color Color;//[Offset: 0x2c, Size: 0x4] 0x7a9ca57480
	Actor* Actor;//[Offset: 0x30, Size: 0x8] 0x7a9ca57500
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8] 0x7a9ca57580

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4] 0x7a9c6dd590

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x48, Size: 0x10] 0x7a9cd47600
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50] 0x7a963db820
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4] 0x7a9cd1f820

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7a9cd49000
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4] 0x7a9cd70b70
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4] 0x7a9cd70be0
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4] 0x7a9cd70c50
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24] 0x7a9cd49100
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24] 0x7a9cd49180
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc] 0x7a9cd49200
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4] 0x7a9cd70cc0
	float AnimScale;//[Offset: 0x90, Size: 0x4] 0x7a9cd70d30
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4] 0x7a9cd70da0
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4] 0x7a9cd70e10
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4] 0x7a9cd1f580
	CameraAnim* Anim;//[Offset: 0xa0, Size: 0x8] 0x7a9cd49280
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x7a9cd49300
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8] 0x7a9cd49380
	float ShakeScale;//[Offset: 0x148, Size: 0x4] 0x7a9cd1f5f0
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4] 0x7a9cd1f660
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8] 0x7a9cd49400
	void ReceiveStopShake(bool bImmediately);// 0xffffff8523219000 0x7a9cd3e320
	void ReceivePlayShake(float Scale);// 0xffffff8523219000 0x7a9cd3e400
	bool ReceiveIsFinished();// 0xffffff8523219000 0x7a9cd3e4e0
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0xffffff8523219000 0x7a9cd3e5c0

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc] 0x7aa09ea400
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc] 0x7aa09ea480
	FOscillator Roll;//[Offset: 0x18, Size: 0xc] 0x7aa09ea500

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x7aa093fe40
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7aa093feb0
	byte InitialOffset;//[Offset: 0x8, Size: 0x1] 0x7aa09e8580
	enum Waveform;//[Offset: 0x9, Size: 0x1] 0x7aa09e8680

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc] 0x7aa09e8480
	FOscillator Y;//[Offset: 0xc, Size: 0xc] 0x7aa09e8500
	FOscillator Z;//[Offset: 0x18, Size: 0xc] 0x7aa09e8700

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8] 0x7a9cd48080
	float AnimLength;//[Offset: 0x30, Size: 0x4] 0x7a9cd1fd60
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c] 0x7a9cd48100
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7a9cd48180
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x7a9cd48200
	float BaseFOV;//[Offset: 0x54, Size: 0x4] 0x7a9cd1fdd0
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x530] 0x7a9cd48280
	float BasePostProcessBlendWeight;//[Offset: 0x590, Size: 0x4] 0x7a9cd1fe40

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10] 0x7a9c622a80
	FName GroupName;//[Offset: 0x40, Size: 0x8] 0x7a9cde6280
	Color GroupColor;//[Offset: 0x48, Size: 0x4] 0x7a9c622b00
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x7a9c622b80
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1] 0x7a9c622c00
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1] 0x7a9c622c80
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1] 0x7a9c622d00
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1] 0x7a9c622d80

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10] 0x7a9c622200
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8] 0x7a9c622280
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1] 0x7a9c622300
	FString TrackTitle;//[Offset: 0x58, Size: 0x10] 0x7a9cde61a0
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7a9c622380
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x7a9c622400
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x7a9c622480
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x7a9c622500
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x7a9c622580
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x7a9c622600
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x7a9c622680
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1] 0x7a9c622700

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8] 0x7a9cd47d80
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8] 0x7a9cd47e00
	float PlayRate;//[Offset: 0x50, Size: 0x4] 0x7a9cd1fc10
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8] 0x7a9cd47e80
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8] 0x7a9cd47f00
	byte PlaySpace;//[Offset: 0x78, Size: 0x1] 0x7a9cd47f80
	void Stop(bool bImmediate);// 0xffffff8523219000 0x7a9cd3b220
	void SetScale(float NewDuration);// 0xffffff8523219000 0x7a9cd3b300
	void SetDuration(float NewDuration);// 0xffffff8523219000 0x7a9cd3b3e0

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8] 0x7a9c622780
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8] 0x7a9c622800
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10] 0x7a9c622900

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18] 0x7a9c624480
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18] 0x7a9c624500
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10] 0x7a9c624580
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8] 0x7a9cde56b0
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4] 0x7a9cde5720
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4] 0x7a9cde5790
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7a9c624600
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x7a9c624680
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x7a9c624700
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x7a9c624780
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1] 0x7a9c624800
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1] 0x7a9c624880
	byte RotMode;//[Offset: 0xc1, Size: 0x1] 0x7a9c624900

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10] 0x7af81c4f00
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7af81c4f80
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x7af958ec50

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4] 0x7af958ecc0
	Vector OutVal;//[Offset: 0x4, Size: 0xc] 0x7af81c5000
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc] 0x7af81c5080
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc] 0x7af81c5100
	byte InterpMode;//[Offset: 0x28, Size: 0x1] 0x7af81c5180

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10] 0x7a9ca1d300

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0aab0
	float Time;//[Offset: 0x8, Size: 0x4] 0x7a9ca0ab20

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc] 0x7a9c625000
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc] 0x7a9c625080

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 0x10] 0x7aa09e8800

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x330, Size: 0x1] 0x7a9cd09c00
	CameraComponent* CameraComponent;//[Offset: 0x338, Size: 0x8] 0x7a9cd09c80
	SceneComponent* SceneComponent;//[Offset: 0x340, Size: 0x8] 0x7a9cd09d00
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1] 0x7a9cd09d80
	float AspectRatio;//[Offset: 0x354, Size: 0x4] 0x7a9cd10160
	float FOVAngle;//[Offset: 0x358, Size: 0x4] 0x7a9cd101d0
	float PostProcessBlendWeight;//[Offset: 0x35c, Size: 0x4] 0x7a9cd10240
	PostProcessSettings PostProcessSettings;//[Offset: 0x360, Size: 0x530] 0x7a9cd09e00
	int GetAutoActivatePlayerIndex();// 0xffffff8523219000 0x7a9ccf74e0

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x258, Size: 0x4] 0x7a9cd11820
	float OrthoWidth;//[Offset: 0x25c, Size: 0x4] 0x7a9cd11890
	float OrthoNearClipPlane;//[Offset: 0x260, Size: 0x4] 0x7a9cd11900
	float OrthoFarClipPlane;//[Offset: 0x264, Size: 0x4] 0x7a9cd11970
	float AspectRatio;//[Offset: 0x268, Size: 0x4] 0x7a9cd119e0
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1] 0x7a9cd0b580
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 0x1] 0x7a9cd09580
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26c, Size: 0x1] 0x7a9cd09600
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26c, Size: 0x1] 0x7a9cd09680
	byte ProjectionMode;//[Offset: 0x26d, Size: 0x1] 0x7a9cd09700
	float PostProcessBlendWeight;//[Offset: 0x2a0, Size: 0x4] 0x7a9cd11a50
	PostProcessSettings PostProcessSettings;//[Offset: 0x2d0, Size: 0x530] 0x7a9cd09780
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0xffffff8523219000 0x7a9ccfa340
	void SetProjectionMode(byte InProjectionMode);// 0xffffff8523219000 0x7a9ccfa420
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0xffffff8523219000 0x7a9ccfa500
	void SetOrthoWidth(float InOrthoWidth);// 0xffffff8523219000 0x7a9ccfa5e0
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0xffffff8523219000 0x7a9ccfa6c0
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0xffffff8523219000 0x7a9ccfa7a0
	void SetFieldOfView(float InFieldOfView);// 0xffffff8523219000 0x7a9ccfa880
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0xffffff8523219000 0x7a9ccfa960
	void SetAspectRatio(float InAspectRatio);// 0xffffff8523219000 0x7a9ccfaa40
	void RemoveBlendable(interface classNone InBlendableObject);// 0xffffff8523219000 0x7a9ccfab20
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0xffffff8523219000 0x7a9ccfac00
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0xffffff8523219000 0x7a9ccface0

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8] 0x7a9cd4fc00
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8] 0x7a9cd4fd00
	void Walk();// 0xffffff8523219000 0x7a9cd84920
	void ViewSelf();// 0xffffff8523219000 0x7a9cd84a00
	void ViewPlayer(FString S);// 0xffffff8523219000 0x7a9cd84ae0
	void ViewClass(class Actor DesiredClass);// 0xffffff8523219000 0x7a9cd84bc0
	void ViewActor(FName ActorName);// 0xffffff8523219000 0x7a9cd84ca0
	void UpdateSafeArea();// 0xffffff8523219000 0x7a9cd84d80
	void ToggleServerStatReplicatorUpdateStatNet();// 0xffffff8523219000 0x7a9cd84e60
	void ToggleServerStatReplicatorClientOverwrite();// 0xffffff8523219000 0x7a9cd84f40
	void ToggleDebugCamera();// 0xffffff8523219000 0x7a9cd85020
	void ToggleAILogging();// 0xffffff8523219000 0x7a9cd85100
	void TestCollisionDistance();// 0xffffff8523219000 0x7a9cd851e0
	void Teleport();// 0xffffff8523219000 0x7a9cd852c0
	void Summon(FString ClassName);// 0xffffff8523219000 0x7a9cd853a0
	void StreamLevelOut(FName PackageName);// 0xffffff8523219000 0x7a9cd85480
	void StreamLevelIn(FName PackageName);// 0xffffff8523219000 0x7a9cd85560
	void SpawnServerStatReplicator();// 0xffffff8523219000 0x7a9cd85640
	void Slomo(float NewTimeDilation);// 0xffffff8523219000 0x7a9cd81d60
	void SetWorldOrigin();// 0xffffff8523219000 0x7a9cd81e40
	void SetMouseSensitivityToDefault();// 0xffffff8523219000 0x7a9cd81f20
	void ServerToggleAILogging();// 0xffffff8523219000 0x7a9cd82000
	void ReceiveInitCheatManager();// 0xffffff8523219000 0x7a9cd820e0
	void ReceiveEndPlay();// 0xffffff8523219000 0x7a9cd821c0
	void PlayersOnly();// 0xffffff8523219000 0x7a9cd822a0
	void OnlyLoadLevel(FName PackageName);// 0xffffff8523219000 0x7a9cd82380
	void LogLoc();// 0xffffff8523219000 0x7a9cd82460
	void InvertMouse();// 0xffffff8523219000 0x7a9cd82540
	void God();// 0xffffff8523219000 0x7a9cd82620
	void Ghost();// 0xffffff8523219000 0x7a9cd82700
	void FreezeFrame(float Delay);// 0xffffff8523219000 0x7a9cd827e0
	void Fly();// 0xffffff8523219000 0x7a9cd828c0
	void FlushLog();// 0xffffff8523219000 0x7a9cd829a0
	void EnableDebugCamera();// 0xffffff8523219000 0x7a9cd82a80
	void DumpVoiceMutingState();// 0xffffff8523219000 0x7a9cd82b60
	void DumpPartyState();// 0xffffff8523219000 0x7a9cd82c40
	void DumpOnlineSessionState();// 0xffffff8523219000 0x7a9cd82d20
	void DumpChatState();// 0xffffff8523219000 0x7a9cd82e00
	void DisableDebugCamera();// 0xffffff8523219000 0x7a9cd82ee0
	void DestroyTarget();// 0xffffff8523219000 0x7a9cd82fc0
	void DestroyServerStatReplicator();// 0xffffff8523219000 0x7a9cd830a0
	void DestroyPawns(class Pawn aClass);// 0xffffff8523219000 0x7a9cd83180
	void DestroyAllPawnsExceptTarget();// 0xffffff8523219000 0x7a9cd83260
	void DestroyAll(class Actor aClass);// 0xffffff8523219000 0x7a9cd83340
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0xffffff8523219000 0x7a9cd83420
	void DebugCapsuleSweepPawn();// 0xffffff8523219000 0x7a9cd83500
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0xffffff8523219000 0x7a9cd835e0
	void DebugCapsuleSweepClear();// 0xffffff8523219000 0x7a9cd836c0
	void DebugCapsuleSweepChannel(byte Channel);// 0xffffff8523219000 0x7a9cd837a0
	void DebugCapsuleSweepCapture();// 0xffffff8523219000 0x7a9cd83880
	void DebugCapsuleSweep();// 0xffffff8523219000 0x7a9cd83960
	void DamageTarget(float DamageAmount);// 0xffffff8523219000 0x7a9cd80080
	void CheatScript(FString ScriptName);// 0xffffff8523219000 0x7a9cd80160
	void ChangeSize(float F);// 0xffffff8523219000 0x7a9cd80240
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0xffffff8523219000 0x7a9cd80320
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0xffffff8523219000 0x7a9cd80400
	void BugIt(FString ScreenShotDescription);// 0xffffff8523219000 0x7a9cd804e0

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x675, Size: 0x1] 0x7a9cd94200
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x675, Size: 0x1] 0x7a9cd92180
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x678, Size: 0x8] 0x7a9cd92200
	Actor* SelectedActor;//[Offset: 0x680, Size: 0x8] 0x7a9cd92280
	PrimitiveComponent* SelectedComponent;//[Offset: 0x688, Size: 0x8] 0x7a9cd92300
	PlayerController* OriginalControllerRef;//[Offset: 0x690, Size: 0x8] 0x7a9cd92380
	Player* OriginalPlayer;//[Offset: 0x698, Size: 0x8] 0x7a9cd92400
	float SpeedScale;//[Offset: 0x6a0, Size: 0x4] 0x7a9cd76e50
	float InitialMaxSpeed;//[Offset: 0x6a4, Size: 0x4] 0x7a9cd76ec0
	float InitialAccel;//[Offset: 0x6a8, Size: 0x4] 0x7a9cd76f30
	float InitialDecel;//[Offset: 0x6ac, Size: 0x4] 0x7a9cd76fa0
	void ToggleDisplay();// 0xffffff8523219000 0x7a9cd86de0
	void ShowDebugSelectedInfo();// 0xffffff8523219000 0x7a9cd86ec0
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0xffffff8523219000 0x7a9cd86fa0
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0xffffff8523219000 0x7a9cd87080
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0xffffff8523219000 0x7a9cd87160
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0xffffff8523219000 0x7a9cd87240
	Actor* GetSelectedActor();// 0xffffff8523219000 0x7a9cd87320

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x578, Size: 0x4] 0x7a9cd98180
	float FrustumAngle;//[Offset: 0x57c, Size: 0x4] 0x7a9cd79770
	float FrustumAspectRatio;//[Offset: 0x580, Size: 0x4] 0x7a9cd797e0
	float FrustumStartDist;//[Offset: 0x584, Size: 0x4] 0x7a9cd79850
	float FrustumEndDist;//[Offset: 0x588, Size: 0x4] 0x7a9cd798c0
	Texture* Texture;//[Offset: 0x590, Size: 0x8] 0x7a9cd98200

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10] 0x7a9c7d9b80
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10] 0x7a9c7d9c00
	void SetMouseSensitivity(const float Sensitivity);// 0xffffff8523219000 0x7a9c6cd6e0
	void SetBind(FName BindName, FString Command);// 0xffffff8523219000 0x7a9c6cd7c0
	void InvertAxisKey(const Key AxisKey);// 0xffffff8523219000 0x7a9c6cd8a0
	void InvertAxis(const FName AxisName);// 0xffffff8523219000 0x7a9c6cd980
	void ClearSmoothing();// 0xffffff8523219000 0x7a9c6cda60

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18] 0x7a9ca5a380
	FString Command;//[Offset: 0x18, Size: 0x10] 0x7a9ca0f350
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7a9ca5a400
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7a9ca5a480
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x7a9ca5a500
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x7a9ca58480
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1] 0x7a9ca58500
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1] 0x7a9ca58580
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1] 0x7a9ca58600
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1] 0x7a9ca58680
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x7a9ca58700

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8] 0x7a963ebe60

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8] 0x7a9ca19c80

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10] 0x7a9cdc0400
	float Duration;//[Offset: 0x38, Size: 0x4] 0x7a9cd7ce90

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7a9ca19880
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7a9ca19900
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7a9ca19980
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7a9ca19a00
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88] 0x7a9ca19a80

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80] 0x7aa0948100
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8] 0x7aa0948180

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10] 0x7a9cb5ba80
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8] 0x7a9cb5bb00
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8] 0x7a9cb5bb80
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8] 0x7a9cb5bc00
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10] 0x7a9cb5bd00
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10] 0x7a9cb5be00
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8] 0x7a9cb5be80
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8] 0x7a9cb5bf00
	int MaxPacket;//[Offset: 0xa0, Size: 0x4] 0x7a9cb37f60
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1] 0x7a9cb5bf80
	UniqueNetIdRepl PlayerId;//[Offset: 0x150, Size: 0x28] 0x7a9cb5c000
	double LastReceiveTime;//[Offset: 0x1e0, Size: 0x8] 0x7a9cb37fd0
	Channel*[] ChannelsToTick;//[Offset: 0x14a0, Size: 0x10] 0x7a9cb5c100

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1888, Size: 0x8] 0x7a9cd4f900

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10] 0x7a9cb377f0
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10] 0x7a9cb37860
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4] 0x7a9cb378d0
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x7a9cb5d200
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4] 0x7a9cb37940
	int MaxInternetClientRate;//[Offset: 0x5c, Size: 0x4] 0x7a9cb379b0
	int MaxClientRate;//[Offset: 0x60, Size: 0x4] 0x7a9cb37a20
	float ServerTravelPause;//[Offset: 0x64, Size: 0x4] 0x7a9cb37a90
	float SpawnPrioritySeconds;//[Offset: 0x68, Size: 0x4] 0x7a9cb37b00
	float RelevantTimeout;//[Offset: 0x6c, Size: 0x4] 0x7a9cb37b70
	float KeepAliveTime;//[Offset: 0x70, Size: 0x4] 0x7a9cb37be0
	float InitialConnectTimeout;//[Offset: 0x74, Size: 0x4] 0x7a9cb37c50
	float ConnectionTimeout;//[Offset: 0x78, Size: 0x4] 0x7a9cb37cc0
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x7c, Size: 0x4] 0x7a9cb37d30
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x7a9cb5d300
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8] 0x7a9cb5d380
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10] 0x7a9cb5d480
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4] 0x7a9cb37da0
	World* World;//[Offset: 0x140, Size: 0x8] 0x7a9cb5d500
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8] 0x7a9cb5d580
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8] 0x7a9cb5d600
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8] 0x7a9cb5d680
	Property* RoleProperty;//[Offset: 0x180, Size: 0x8] 0x7a9cb5b600
	Property* RemoteRoleProperty;//[Offset: 0x188, Size: 0x8] 0x7a9cb5b680
	FName NetDriverName;//[Offset: 0x190, Size: 0x8] 0x7a9cb37e10
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x1d8, Size: 0x10] 0x7a9cb5b780
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1e8, Size: 0x50] 0x7a963d7d60
	Channel*[] ActorChannelPool;//[Offset: 0x238, Size: 0x10] 0x7a9cb5b900
	float Time;//[Offset: 0x250, Size: 0x4] 0x7a9cb37ef0
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6f8, Size: 0x8] 0x7a9cb5b980

--------------------------------
Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8] 0x7a9c842200
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8] 0x7a9c842280
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8] 0x7a9c842300
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8] 0x7a9c842380
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8] 0x7a9c842400
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8] 0x7a9c842480
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8] 0x7a9c842500
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10] 0x7a9c842600
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10] 0x7a9c842700
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 0x10] 0x7a9c842800
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x98, Size: 0x28] 0x7a9c842880
	FString StreamingLevelsPrefix;//[Offset: 0xc0, Size: 0x10] 0x7a9c7fb610
	Level* CurrentLevelPendingVisibility;//[Offset: 0xd0, Size: 0x8] 0x7a9c842900
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xd8, Size: 0x8] 0x7a9c842980
	DemoNetDriver* DemoNetDriver;//[Offset: 0xe0, Size: 0x8] 0x7a9c842a00
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xe8, Size: 0x8] 0x7a9c842a80
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xf0, Size: 0x8] 0x7a9c842b00
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10e, Size: 0x1] 0x7a9c842c00
	NavigationSystemBase* NavigationSystem;//[Offset: 0x110, Size: 0x8] 0x7a9c842c80
	GameModeBase* AuthorityGameMode;//[Offset: 0x118, Size: 0x8] 0x7a9c842d00
	GameStateBase* GameState;//[Offset: 0x120, Size: 0x8] 0x7a9c842d80
	AISystemBase* AISystem;//[Offset: 0x128, Size: 0x8] 0x7a9c842e00
	AvoidanceManager* AvoidanceManager;//[Offset: 0x130, Size: 0x8] 0x7a9c842e80
	Level*[] Levels;//[Offset: 0x138, Size: 0x10] 0x7a9c842f80
	LevelCollection[] LevelCollections;//[Offset: 0x148, Size: 0x10] 0x7a9c843080
	GameInstance* OwningGameInstance;//[Offset: 0x160, Size: 0x8] 0x7a9c843100
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x168, Size: 0x10] 0x7a9c841100
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x178, Size: 0x8] 0x7a9c841180
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x180, Size: 0x8] 0x7a9c841200
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x1e8, Size: 0x10] 0x7a9c841300
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x1f8, Size: 0x10] 0x7a9c841400
	WorldComposition* WorldComposition;//[Offset: 0x568, Size: 0x8] 0x7a9c841480
	WorldPSCPool PSCPool;//[Offset: 0x5e0, Size: 0x58] 0x7a9c841500
	WorldSettings* K2_GetWorldSettings();// 0xffffff8523219000 0x7a9c80b060
	void HandleTimelineScrubbed();// 0xffffff8523219000 0x7a9c80b140

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8] 0x7a9c6e2f80
	Model* Model;//[Offset: 0xc0, Size: 0x8] 0x7a9c6e3000
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10] 0x7a9c6e3100
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8] 0x7a9c6e3180
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4] 0x7a9c6d4290
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4] 0x7a9c6d4300
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8] 0x7a9c6e1180
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8] 0x7a9c6e1200
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8] 0x7a9c6e1280
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10] 0x7a9c6e1380
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4] 0x7a9c6d4370
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4] 0x7a9c6d43e0
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10] 0x7a9c6e1480
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10] 0x7a9c6e1580
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10] 0x7a9c6e1600
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8] 0x7a9c6e1680
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 0xc] 0x7a9c6e1700
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1] 0x7a9c6e1780
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1] 0x7a9c6e1800
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1] 0x7a9c6e1880
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1] 0x7a9c6e1900
	WorldSettings* WorldSettings;//[Offset: 0x240, Size: 0x8] 0x7a9c6e1980
	AssetUserData*[] AssetUserData;//[Offset: 0x250, Size: 0x10] 0x7a9c6e1a80
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x270, Size: 0x10] 0x7a9c6e1b80

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x590, Size: 0x8] 0x7a9c7b2700

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10] 0x7a9c6e2f00

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1] 0x7a9c6e2980
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0xffffff8523219000 0x7a9c6c3b20
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0xffffff8523219000 0x7a9c6c3c00
	bool RemoteEvent(FName EventName);// 0xffffff8523219000 0x7a9c6c3ce0
	void LevelReset();// 0xffffff8523219000 0x7a9c6c3dc0

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4] 0x7af958f3c0
	int Y;//[Offset: 0x4, Size: 0x4] 0x7af958f430
	int Z;//[Offset: 0x8, Size: 0x4] 0x7af958f4a0

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x338, Size: 0x8] 0x7a9c7b2400
	BillboardComponent* GoodSprite;//[Offset: 0x340, Size: 0x8] 0x7a9c7b2480
	BillboardComponent* BadSprite;//[Offset: 0x348, Size: 0x8] 0x7a9c7b2500
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1] 0x7a9c7b2580

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x578, Size: 0x8] 0x7a9cd45200
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x580, Size: 0x1] 0x7a9cd45280
	float ScreenSize;//[Offset: 0x584, Size: 0x4] 0x7a9cd1a8f0
	float U;//[Offset: 0x588, Size: 0x4] 0x7a9cd1a960
	float UL;//[Offset: 0x58c, Size: 0x4] 0x7a9cd1a9d0
	float V;//[Offset: 0x590, Size: 0x4] 0x7a9cd1aa40
	float VL;//[Offset: 0x594, Size: 0x4] 0x7a9cd1aab0
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0xffffff8523219000 0x7a9cd36b40
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0xffffff8523219000 0x7a9cd36c20
	void SetSprite(Texture2D* NewSprite);// 0xffffff8523219000 0x7a9cd36d00

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8] 0x7a9c6d75c0

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1] 0x7a9c6e4780

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x338, Size: 0x4] 0x7a9c7fad50
	byte VisibilityAggressiveness;//[Offset: 0x33c, Size: 0x1] 0x7a9c844d80
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33d, Size: 0x1] 0x7a9c843900
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33d, Size: 0x1] 0x7a9c844e00
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33d, Size: 0x1] 0x7a9c844e80
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33d, Size: 0x1] 0x7a9c844f00
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33d, Size: 0x1] 0x7a9c844f80
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33d, Size: 0x1] 0x7a9c845000
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33d, Size: 0x1] 0x7a9c845080
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33d, Size: 0x1] 0x7a9c845100
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33e, Size: 0x1] 0x7a9c845180
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33e, Size: 0x1] 0x7a9c845200
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33e, Size: 0x1] 0x7a9c845280
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33e, Size: 0x1] 0x7a9c843200
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33e, Size: 0x1] 0x7a9c843280
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33e, Size: 0x1] 0x7a9c843300
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33e, Size: 0x1] 0x7a9c843380
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x340, Size: 0x8] 0x7a9c843400
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x348, Size: 0x8] 0x7a9c843480
	float WorldToMeters;//[Offset: 0x350, Size: 0x4] 0x7a9c7fadc0
	float KillZ;//[Offset: 0x354, Size: 0x4] 0x7a9c7fae30
	class DamageType* KillZDamageType;//[Offset: 0x358, Size: 0x8] 0x7a9c843500
	float WorldGravityZ;//[Offset: 0x360, Size: 0x4] 0x7a9c7faea0
	float GlobalGravityZ;//[Offset: 0x364, Size: 0x4] 0x7a9c7faf10
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x368, Size: 0x8] 0x7a9c843580
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x370, Size: 0x8] 0x7a9c843600
	class GameModeBase* DefaultGameMode;//[Offset: 0x378, Size: 0x8] 0x7a9c843680
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x380, Size: 0x8] 0x7a9c843700
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x388, Size: 0x4] 0x7a9c7faf80
	Vector DefaultColorScale;//[Offset: 0x38c, Size: 0xc] 0x7a9c843780
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x398, Size: 0x4] 0x7a9c7faff0
	float GlobalDistanceFieldViewDistance;//[Offset: 0x39c, Size: 0x4] 0x7a9c7fb060
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x3a0, Size: 0x4] 0x7a9c7fb0d0
	ReverbSettings DefaultReverbSettings;//[Offset: 0x3a8, Size: 0x20] 0x7a9c843800
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x3c8, Size: 0x24] 0x7a9c843880
	float MonoCullingDistance;//[Offset: 0x3ec, Size: 0x4] 0x7a9c7fb140
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x3f0, Size: 0x8] 0x7a9c843980
	float TimeDilation;//[Offset: 0x3f8, Size: 0x4] 0x7a9c7fb1b0
	float MatineeTimeDilation;//[Offset: 0x3fc, Size: 0x4] 0x7a9c7fb220
	float DemoPlayTimeDilation;//[Offset: 0x400, Size: 0x4] 0x7a9c7fb290
	float MinGlobalTimeDilation;//[Offset: 0x404, Size: 0x4] 0x7a9c7fb300
	float MaxGlobalTimeDilation;//[Offset: 0x408, Size: 0x4] 0x7a9c7fb370
	float MinUndilatedFrameTime;//[Offset: 0x40c, Size: 0x4] 0x7a9c7fb3e0
	float MaxUndilatedFrameTime;//[Offset: 0x410, Size: 0x4] 0x7a9c7fb450
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x414, Size: 0x24] 0x7a9c843a00
	PlayerState* Pauser;//[Offset: 0x438, Size: 0x8] 0x7a9c843a80
	NetViewer[] ReplicationViewers;//[Offset: 0x440, Size: 0x10] 0x7a9c843b80
	AssetUserData*[] AssetUserData;//[Offset: 0x450, Size: 0x10] 0x7a9c843d00
	int MaxNumberOfBookmarks;//[Offset: 0x460, Size: 0x4] 0x7a9c7fb4c0
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x468, Size: 0x8] 0x7a9c843d80
	BookmarkBase*[] BookmarkArray;//[Offset: 0x470, Size: 0x10] 0x7a9c843e80
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x480, Size: 0x8] 0x7a9c843f00
	void OnRep_WorldGravityZ();// 0xffffff8523219000 0x7a9c80af80

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18] 0x7a9c7b4200
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x7a9c7b2180

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4] 0x7a9c6dcb80
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4] 0x7a9c6dcbf0
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8] 0x7a9c7d6180
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4] 0x7a9c6dcc60

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8] 0x7a9cd0ce80
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7a9cd0cf00
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x7a9cd0cf80
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x7a9cd0d000
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1] 0x7a9cd0d100
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1] 0x7a9cd0d180
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1] 0x7a9cd0d200
	bool bHasVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1] 0x7a9cd0d280
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1] 0x7a9cd0d300
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x38, Size: 0x8] 0x7a9cd0d380
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x40, Size: 0x50] 0x7a963da240
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x90, Size: 0xc] 0x7a9cd0d480
	float Duration;//[Offset: 0x9c, Size: 0x4] 0x7a9cd127e0
	float MaxDistance;//[Offset: 0xa0, Size: 0x4] 0x7a9cd12850
	float TotalSamples;//[Offset: 0xa4, Size: 0x4] 0x7a9cd128c0
	float Priority;//[Offset: 0xa8, Size: 0x4] 0x7a9cd12930
	SoundAttenuation* AttenuationSettings;//[Offset: 0xb0, Size: 0x8] 0x7a9cd0d500
	SoundSubmix* SoundSubmixObject;//[Offset: 0xb8, Size: 0x8] 0x7a9cd0d580
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0xc0, Size: 0x10] 0x7a9cd0d680
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0xd0, Size: 0x8] 0x7a9cd0b600
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0xd8, Size: 0x10] 0x7a9cd0b700
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0xe8, Size: 0x10] 0x7a9cd0b800

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x28] 0x7a9c816800
	SoundClass*[] ChildClasses;//[Offset: 0x50, Size: 0x10] 0x7a9c816900
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x60, Size: 0x10] 0x7a9c816a00
	SoundClass* ParentClass;//[Offset: 0x70, Size: 0x8] 0x7a9c816a80

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4] 0x7a9ca63110
	float Pitch;//[Offset: 0x4, Size: 0x4] 0x7a9ca63180
	float StereoBleed;//[Offset: 0x8, Size: 0x4] 0x7a9ca631f0
	float LFEBleed;//[Offset: 0xc, Size: 0x4] 0x7a9ca63260
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 0x4] 0x7a9ca632d0
	float RadioFilterVolume;//[Offset: 0x14, Size: 0x4] 0x7a9ca63340
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 0x4] 0x7a9ca633b0
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1] 0x7a9ca5fc80
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1] 0x7a9ca5fd00
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1] 0x7a9ca5fd80
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1] 0x7a9ca5fe00
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1] 0x7a9ca5fe80
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 0x4] 0x7a9ca63420
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1] 0x7a9ca5ff00
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1] 0x7a9ca5ff80
	byte OutputTarget;//[Offset: 0x25, Size: 0x1] 0x7a9ca5e780

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8] 0x7a9ca5e800
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4] 0x7a9ca63490
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4] 0x7a9ca63500

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7a9c818200
	float EQPriority;//[Offset: 0x2c, Size: 0x4] 0x7a9c7f5b80
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x38] 0x7a9c818280
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x68, Size: 0x10] 0x7a9c818380
	float InitialDelay;//[Offset: 0x78, Size: 0x4] 0x7a9c7f5bf0
	float FadeInTime;//[Offset: 0x7c, Size: 0x4] 0x7a9c7f5c60
	float Duration;//[Offset: 0x80, Size: 0x4] 0x7a9c7f5cd0
	float FadeOutTime;//[Offset: 0x84, Size: 0x4] 0x7a9c7f5d40

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 0x4] 0x7a9ca645a0
	float Gain0;//[Offset: 0xc, Size: 0x4] 0x7a9ca64610
	float Bandwidth0;//[Offset: 0x10, Size: 0x4] 0x7a9ca64680
	float FrequencyCenter1;//[Offset: 0x14, Size: 0x4] 0x7a9ca646f0
	float Gain1;//[Offset: 0x18, Size: 0x4] 0x7a9ca64760
	float Bandwidth1;//[Offset: 0x1c, Size: 0x4] 0x7a9ca647d0
	float FrequencyCenter2;//[Offset: 0x20, Size: 0x4] 0x7a9ca62b60
	float Gain2;//[Offset: 0x24, Size: 0x4] 0x7a9ca62bd0
	float Bandwidth2;//[Offset: 0x28, Size: 0x4] 0x7a9ca62c40
	float FrequencyCenter3;//[Offset: 0x2c, Size: 0x4] 0x7a9ca62cb0
	float Gain3;//[Offset: 0x30, Size: 0x4] 0x7a9ca62d20
	float Bandwidth3;//[Offset: 0x34, Size: 0x4] 0x7a9ca62d90

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8] 0x7a9ca5f880
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4] 0x7a9ca62e00
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4] 0x7a9ca62e70
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7a9ca5f900
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x14, Size: 0x4] 0x7a9ca62ee0

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0xc] 0x7a9c816780

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4] 0x7a9ca63030
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x7a9ca5fb80
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1] 0x7a9ca5fc00
	float VolumeScale;//[Offset: 0x8, Size: 0x4] 0x7a9ca630a0

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x2e8] 0x7a9c816b00

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7a9ca5e880
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x7a9ca5e900
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1] 0x7a9ca5e980
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1] 0x7a9ca5ea00
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1] 0x7a9ca5ea80
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1] 0x7a9ca5eb00
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1] 0x7a9ca5eb80
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1] 0x7a9ca5ec00
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1] 0x7a9ca5ec80
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1] 0x7a9ca5ed00
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1] 0x7a9ca5ed80
	enum AbsorptionMethod;//[Offset: 0xb3, Size: 0x1] 0x7a9ca5ee80
	byte OcclusionTraceChannel;//[Offset: 0xb4, Size: 0x1] 0x7a9ca5ef00
	enum ReverbSendMethod;//[Offset: 0xb5, Size: 0x1] 0x7a9ca5f000
	float OmniRadius;//[Offset: 0xb8, Size: 0x4] 0x7a9ca63570
	float StereoSpread;//[Offset: 0xbc, Size: 0x4] 0x7a9ca635e0
	float LPFRadiusMin;//[Offset: 0xc0, Size: 0x4] 0x7a9ca63650
	float LPFRadiusMax;//[Offset: 0xc4, Size: 0x4] 0x7a9ca636c0
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xc8, Size: 0x88] 0x7a9ca5f080
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x150, Size: 0x88] 0x7a9ca5f100
	float LPFFrequencyAtMin;//[Offset: 0x1d8, Size: 0x4] 0x7a9ca63730
	float LPFFrequencyAtMax;//[Offset: 0x1dc, Size: 0x4] 0x7a9ca637a0
	float HPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4] 0x7a9ca63810
	float HPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4] 0x7a9ca63880
	float FocusAzimuth;//[Offset: 0x1e8, Size: 0x4] 0x7a9ca638f0
	float NonFocusAzimuth;//[Offset: 0x1ec, Size: 0x4] 0x7a9ca63960
	float FocusDistanceScale;//[Offset: 0x1f0, Size: 0x4] 0x7a9ca61cf0
	float NonFocusDistanceScale;//[Offset: 0x1f4, Size: 0x4] 0x7a9ca61d60
	float FocusPriorityScale;//[Offset: 0x1f8, Size: 0x4] 0x7a9ca61dd0
	float NonFocusPriorityScale;//[Offset: 0x1fc, Size: 0x4] 0x7a9ca61e40
	float FocusVolumeAttenuation;//[Offset: 0x200, Size: 0x4] 0x7a9ca61eb0
	float NonFocusVolumeAttenuation;//[Offset: 0x204, Size: 0x4] 0x7a9ca61f20
	float FocusAttackInterpSpeed;//[Offset: 0x208, Size: 0x4] 0x7a9ca61f90
	float FocusReleaseInterpSpeed;//[Offset: 0x20c, Size: 0x4] 0x7a9ca62000
	float OcclusionLowPassFilterFrequency;//[Offset: 0x210, Size: 0x4] 0x7a9ca62070
	float OcclusionVolumeAttenuation;//[Offset: 0x214, Size: 0x4] 0x7a9ca620e0
	float OcclusionInterpolationTime;//[Offset: 0x218, Size: 0x4] 0x7a9ca62150
	float ReverbWetLevelMin;//[Offset: 0x21c, Size: 0x4] 0x7a9ca621c0
	float ReverbWetLevelMax;//[Offset: 0x220, Size: 0x4] 0x7a9ca62230
	float ReverbDistanceMin;//[Offset: 0x224, Size: 0x4] 0x7a9ca622a0
	float ReverbDistanceMax;//[Offset: 0x228, Size: 0x4] 0x7a9ca62310
	float ManualReverbSendLevel;//[Offset: 0x22c, Size: 0x4] 0x7a9ca62380
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x230, Size: 0x88] 0x7a9ca5f200
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x2b8, Size: 0x30] 0x7a9ca5f580

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1] 0x7aa09e3680
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1] 0x7aa09e3700
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4] 0x7aa093d210
	Vector AttenuationShapeExtents;//[Offset: 0x10, Size: 0xc] 0x7aa09e3780
	float ConeOffset;//[Offset: 0x1c, Size: 0x4] 0x7aa093d280
	float FalloffDistance;//[Offset: 0x20, Size: 0x4] 0x7aa093d2f0
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88] 0x7aa09e3800

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10] 0x7a9ca5f300
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10] 0x7a9ca5f400
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10] 0x7a9ca5f500

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10] 0x7a9c818780
	SoundSubmix* ParentSubmix;//[Offset: 0x38, Size: 0x8] 0x7a9c818800
	enum ChannelFormat;//[Offset: 0x40, Size: 0x1] 0x7a9c818900
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10] 0x7a9c818a00
	AmbisonicsSubmixSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8] 0x7a9c818a80
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4] 0x7a9c7f6670
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4] 0x7a9c7f66e0
	delegate OnSubmixRecordedFileDone;//[Offset: 0x68, Size: 0x10] 0x7a9c818b00
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0xffffff8523219000 0x7a9c807320
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9c803a40
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0xffffff8523219000 0x7a9c803b20
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9c803c00
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0xffffff8523219000 0x7a9c803ce0

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: AmbisonicsSubmixSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0xf8, Size: 0x4] 0x7a9cd123f0
	int StreamingPriority;//[Offset: 0xfc, Size: 0x4] 0x7a9cd12460
	enum SampleRateQuality;//[Offset: 0x100, Size: 0x1] 0x7a9cd0e600
	byte SoundGroup;//[Offset: 0x102, Size: 0x1] 0x7a9cd0e680
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x103, Size: 0x1] 0x7a9cd0e700
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x103, Size: 0x1] 0x7a9cd0c700
	bool bMature;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x103, Size: 0x1] 0x7a9cd0c780
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 0x1] 0x7a9cd0c800
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x104, Size: 0x1] 0x7a9cd0c880
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x104, Size: 0x1] 0x7a9cd0c900
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x104, Size: 0x1] 0x7a9cd0c980
	float[] FrequenciesToAnalyze;//[Offset: 0x108, Size: 0x10] 0x7a9cd0ca00
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x118, Size: 0x10] 0x7a9cd0cb00
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x128, Size: 0x10] 0x7a9cd0cc00
	FString SpokenText;//[Offset: 0x148, Size: 0x10] 0x7a9cd12540
	float SubtitlePriority;//[Offset: 0x158, Size: 0x4] 0x7a9cd125b0
	float Volume;//[Offset: 0x15c, Size: 0x4] 0x7a9cd12620
	float Pitch;//[Offset: 0x160, Size: 0x4] 0x7a9cd12690
	int NumChannels;//[Offset: 0x164, Size: 0x4] 0x7a9cd12700
	int SampleRate;//[Offset: 0x168, Size: 0x4] 0x7a9cd12770
	SubtitleCue[] Subtitles;//[Offset: 0x170, Size: 0x10] 0x7a9cd0cd00
	CurveTable* Curves;//[Offset: 0x180, Size: 0x8] 0x7a9cd0cd80
	CurveTable* InternalCurves;//[Offset: 0x188, Size: 0x8] 0x7a9cd0ce00

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10] 0x7a9cb00f80
	float TimeSec;//[Offset: 0x10, Size: 0x4] 0x7a9ca63ea0

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4] 0x7a9ca63dc0
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4] 0x7a9ca63e30

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x7a9ca63f10
	float TimeSec;//[Offset: 0x4, Size: 0x4] 0x7a9ca63f80

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18] 0x7a963ed360
	float Time;//[Offset: 0x18, Size: 0x4] 0x7a963ed3d0

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSendInfo
	float SendLevel;//[Offset: 0x0, Size: 0x4] 0x7a9ca63ff0
	SoundSubmix* SoundSubmix;//[Offset: 0x8, Size: 0x8] 0x7a9cb01000

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10] 0x7a9c816480
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7a9c816500

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8] 0x7a9ca5fa80
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7a9ca5fb00

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	float SendLevel;//[Offset: 0x0, Size: 0x4] 0x7a9ca64060
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8] 0x7a9cb01080

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x2a0, Size: 0x1] 0x7a9c819080
	float SourceBusDuration;//[Offset: 0x2a4, Size: 0x4] 0x7a9c7f68a0
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x7a9c819100

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x330, Size: 0x10] 0x7a9cb3b4c0
	class GameSession* GameSessionClass;//[Offset: 0x340, Size: 0x8] 0x7a9cb78900
	class GameStateBase* GameStateClass;//[Offset: 0x348, Size: 0x8] 0x7a9cb78980
	class PlayerController* PlayerControllerClass;//[Offset: 0x350, Size: 0x8] 0x7a9cb78a00
	class PlayerState* PlayerStateClass;//[Offset: 0x358, Size: 0x8] 0x7a9cb78a80
	class HUD* HUDClass;//[Offset: 0x360, Size: 0x8] 0x7a9cb78b00
	class Pawn* DefaultPawnClass;//[Offset: 0x368, Size: 0x8] 0x7a9cb78b80
	class SpectatorPawn* SpectatorClass;//[Offset: 0x370, Size: 0x8] 0x7a9cb78c00
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x378, Size: 0x8] 0x7a9cb78c80
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x380, Size: 0x8] 0x7a9cb78d00
	GameSession* GameSession;//[Offset: 0x388, Size: 0x8] 0x7a9cb78d80
	GameStateBase* GameState;//[Offset: 0x390, Size: 0x8] 0x7a9cb78e00
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x398, Size: 0x8] 0x7a9cb78e80
	FText DefaultPlayerName;//[Offset: 0x3a0, Size: 0x18] 0x7a9cb3b530
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b8, Size: 0x1] 0x7a9cb78f00
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b8, Size: 0x1] 0x7a9cb78f80
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b8, Size: 0x1] 0x7a9cb79000
	void StartPlay();// 0xffffff8523219000 0x7a9cb4f9e0
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0xffffff8523219000 0x7a9cb4fac0
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0xffffff8523219000 0x7a9cb4fba0
	bool ShouldReset(Actor* ActorToReset);// 0xffffff8523219000 0x7a9cb4fc80
	void ReturnToMainMenuHost();// 0xffffff8523219000 0x7a9cb4fd60
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0xffffff8523219000 0x7a9cb4fe40
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0xffffff8523219000 0x7a9cb4ff20
	void RestartPlayer(Controller* NewPlayer);// 0xffffff8523219000 0x7a9cb4caa0
	void ResetLevel();// 0xffffff8523219000 0x7a9cb4cb80
	bool PlayerCanRestart(PlayerController* Player);// 0xffffff8523219000 0x7a9cb4cc60
	bool MustSpectate(PlayerController* NewPlayerController);// 0xffffff8523219000 0x7a9cb4cd40
	void K2_PostLogin(PlayerController* NewPlayer);// 0xffffff8523219000 0x7a9cb4ce20
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0xffffff8523219000 0x7a9cb4cf00
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0xffffff8523219000 0x7a9cb4cfe0
	void K2_OnLogout(Controller* ExitingController);// 0xffffff8523219000 0x7a9cb4d0c0
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0xffffff8523219000 0x7a9cb4d1a0
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0xffffff8523219000 0x7a9cb4d280
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0xffffff8523219000 0x7a9cb4d360
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0xffffff8523219000 0x7a9cb4d440
	bool HasMatchStarted();// 0xffffff8523219000 0x7a9cb4d520
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0xffffff8523219000 0x7a9cb4d600
	int GetNumSpectators();// 0xffffff8523219000 0x7a9cb4d6e0
	int GetNumPlayers();// 0xffffff8523219000 0x7a9cb4d7c0
	class Object GetDefaultPawnClassForController(Controller* InController);// 0xffffff8523219000 0x7a9cb4d8a0
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0xffffff8523219000 0x7a9cb4d980
	Actor* ChoosePlayerStart(Controller* Player);// 0xffffff8523219000 0x7a9cb4da60
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0xffffff8523219000 0x7a9cb4db40
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0xffffff8523219000 0x7a9cb4dc20

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x330, Size: 0x4] 0x7a9cde2150
	int MaxPlayers;//[Offset: 0x334, Size: 0x4] 0x7a9cde21c0
	int MaxPartySize;//[Offset: 0x338, Size: 0x4] 0x7a9cde2230
	byte MaxSplitscreensPerConnection;//[Offset: 0x33c, Size: 0x1] 0x7a9cdce680
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 0x1] 0x7a9cdce700
	FName SessionName;//[Offset: 0x340, Size: 0x8] 0x7a9cde22a0

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x330, Size: 0x8] 0x7a9cbbe880
	GameModeBase* AuthorityGameMode;//[Offset: 0x338, Size: 0x8] 0x7a9cbbe900
	class SpectatorPawn* SpectatorClass;//[Offset: 0x340, Size: 0x8] 0x7a9cbbe980
	PlayerState*[] PlayerArray;//[Offset: 0x348, Size: 0x10] 0x7a9cbbea80
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1] 0x7a9cbbeb00
	float ReplicatedWorldTimeSeconds;//[Offset: 0x35c, Size: 0x4] 0x7a9cbc2770
	float ServerWorldTimeSecondsDelta;//[Offset: 0x360, Size: 0x4] 0x7a9cbc27e0
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x364, Size: 0x4] 0x7a9cbc2850
	void OnRep_SpectatorClass();// 0xffffff8523219000 0x7a9cbd0cc0
	void OnRep_ReplicatedWorldTimeSeconds();// 0xffffff8523219000 0x7a9cbd0da0
	void OnRep_ReplicatedHasBegunPlay();// 0xffffff8523219000 0x7a9cbd0e80
	void OnRep_GameModeClass();// 0xffffff8523219000 0x7a9cbd0f60
	bool HasMatchStarted();// 0xffffff8523219000 0x7a9cbd1040
	bool HasBegunPlay();// 0xffffff8523219000 0x7a9cbd1120
	float GetServerWorldTimeSeconds();// 0xffffff8523219000 0x7a9cbd1200
	float GetPlayerStartTime(Controller* Controller);// 0xffffff8523219000 0x7a9cbd12e0
	float GetPlayerRespawnDelay(Controller* Controller);// 0xffffff8523219000 0x7a9cbd13c0

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x38c, Size: 0x4] 0x7a9cd78120
	float BaseLookUpRate;//[Offset: 0x390, Size: 0x4] 0x7a9cd78190
	PawnMovementComponent* MovementComponent;//[Offset: 0x398, Size: 0x8] 0x7a9cd93980
	SphereComponent* CollisionComponent;//[Offset: 0x3a0, Size: 0x8] 0x7a9cd93a00
	StaticMeshComponent* MeshComponent;//[Offset: 0x3a8, Size: 0x8] 0x7a9cd93a80
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b0, Size: 0x1] 0x7a9cd93b00
	void TurnAtRate(float Rate);// 0xffffff8523219000 0x7a9cd85d40
	void MoveUp_World(float Val);// 0xffffff8523219000 0x7a9cd85e20
	void MoveRight(float Val);// 0xffffff8523219000 0x7a9cd85f00
	void MoveForward(float Val);// 0xffffff8523219000 0x7a9cd85fe0
	void LookUpAtRate(float Rate);// 0xffffff8523219000 0x7a9cd860c0

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x590, Size: 0x4] 0x7a9cd79540
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0xffffff8523219000 0x7a9cd8a180
	float GetUnscaledSphereRadius();// 0xffffff8523219000 0x7a9cd8a260
	float GetShapeScale();// 0xffffff8523219000 0x7a9cd8a340
	float GetScaledSphereRadius();// 0xffffff8523219000 0x7a9cd8a420

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x59c, Size: 0x4] 0x7a9cbc5640
	int PreviousLODLevel;//[Offset: 0x5a0, Size: 0x4] 0x7a9cbc39d0
	int MinLOD;//[Offset: 0x5a4, Size: 0x4] 0x7a9cbc3a40
	int SubDivisionStepSize;//[Offset: 0x5a8, Size: 0x4] 0x7a9cbc3ab0
	StaticMesh* StaticMesh;//[Offset: 0x5b0, Size: 0x8] 0x7a9cbf6800
	Color WireframeColorOverride;//[Offset: 0x5b8, Size: 0x4] 0x7a9cbf6880
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5bc, Size: 0x1] 0x7a9cbf6900
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5bc, Size: 0x1] 0x7a9cbf6980
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5bc, Size: 0x1] 0x7a9cbf6a00
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5bc, Size: 0x1] 0x7a9cbf6a80
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5bc, Size: 0x1] 0x7a9cbf6b00
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5bc, Size: 0x1] 0x7a9cbf6b80
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5bc, Size: 0x1] 0x7a9cbf6c00
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5bc, Size: 0x1] 0x7a9cbf6d00
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5bd, Size: 0x1] 0x7a9cbf6d80
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5bd, Size: 0x1] 0x7a9cbf6e00
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5bd, Size: 0x1] 0x7a9cbf6e80
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5bd, Size: 0x1] 0x7a9cbf6f00
	int OverriddenLightMapRes;//[Offset: 0x5c0, Size: 0x4] 0x7a9cbc3b20
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x5c4, Size: 0x4] 0x7a9cbc3b90
	float DistanceFieldSelfShadowBias;//[Offset: 0x5c8, Size: 0x4] 0x7a9cbc3c00
	float StreamingDistanceMultiplier;//[Offset: 0x5cc, Size: 0x4] 0x7a9cbc3c70
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x5d0, Size: 0x10] 0x7a9cbf7000
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x5e0, Size: 0x10] 0x7a9cbf7100
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x5f0, Size: 0x18] 0x7a9cbf7180
	bool SetStaticMesh(StaticMesh* NewMesh);// 0xffffff8523219000 0x7a9cbd58e0
	void SetReverseCulling(bool ReverseCulling);// 0xffffff8523219000 0x7a9cbd59c0
	void SetForcedLodModel(int NewForcedLodModel);// 0xffffff8523219000 0x7a9cbd5aa0
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0xffffff8523219000 0x7a9cbd5b80
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0xffffff8523219000 0x7a9cbd5c60
	void GetLocalBounds(out Vector Min, out Vector Max);// 0xffffff8523219000 0x7a9cbd5d40

--------------------------------
Class: StaticMesh.Object
	PerPlatformInt MinLOD;//[Offset: 0x48, Size: 0x4] 0x7a9c81bc00
	float LpvBiasMultiplier;//[Offset: 0x4c, Size: 0x4] 0x7a9c7f9000
	StaticMaterial[] StaticMaterials;//[Offset: 0x50, Size: 0x10] 0x7a9c81bd00
	float LightmapUVDensity;//[Offset: 0x60, Size: 0x4] 0x7a9c7f7390
	int LightMapResolution;//[Offset: 0x64, Size: 0x4] 0x7a9c7f7400
	int LightMapCoordinateIndex;//[Offset: 0x68, Size: 0x4] 0x7a9c7f7470
	float DistanceFieldSelfShadowBias;//[Offset: 0x6c, Size: 0x4] 0x7a9c7f74e0
	BodySetup* BodySetup;//[Offset: 0x70, Size: 0x8] 0x7a9c81bd80
	int LODForCollision;//[Offset: 0x78, Size: 0x4] 0x7a9c7f7550
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1] 0x7a9c81be00
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 0x1] 0x7a9c81be80
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 0x1] 0x7a9c81bf80
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c, Size: 0x1] 0x7a9c81c000
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c, Size: 0x1] 0x7a9c81c080
	StaticMeshSocket*[] Sockets;//[Offset: 0xa0, Size: 0x10] 0x7a9c81c180
	Vector PositiveBoundsExtension;//[Offset: 0xc0, Size: 0xc] 0x7a9c81c200
	Vector NegativeBoundsExtension;//[Offset: 0xcc, Size: 0xc] 0x7a9c81c280
	BoxSphereBounds ExtendedBounds;//[Offset: 0xd8, Size: 0x1c] 0x7a9c81c300
	int ElementToIgnoreForTexFactor;//[Offset: 0xf4, Size: 0x4] 0x7a9c7f75c0
	AssetUserData*[] AssetUserData;//[Offset: 0xf8, Size: 0x10] 0x7a9c81c400
	Object* EditableMesh;//[Offset: 0x108, Size: 0x8] 0x7a9c81c480
	NavCollisionBase* NavCollision;//[Offset: 0x110, Size: 0x8] 0x7a9c81c500
	int GetNumSections(int InLOD);// 0xffffff8523219000 0x7a9c808820
	int GetNumLODs();// 0xffffff8523219000 0x7a9c808900
	int GetMaterialIndex(FName MaterialSlotName);// 0xffffff8523219000 0x7a9c8089e0
	MaterialInterface* GetMaterial(int MaterialIndex);// 0xffffff8523219000 0x7a9c808ac0
	BoxSphereBounds GetBounds();// 0xffffff8523219000 0x7a9c808ba0
	Box GetBoundingBox();// 0xffffff8523219000 0x7a9c808c80
	StaticMeshSocket* FindSocket(FName InSocketName);// 0xffffff8523219000 0x7a9c808d60

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8] 0x7a9cb00100
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8] 0x7a9ca65640
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8] 0x7a9ca639d0
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14] 0x7a9cb00180

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8] 0x7a9c7f8f20
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc] 0x7a9c81ba80
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc] 0x7a9c81bb00
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc] 0x7a9c81bb80
	FString Tag;//[Offset: 0x58, Size: 0x10] 0x7a9c7f8f90

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7a9c7b2600

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x20, Size: 0x10] 0x7a9cb01280

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 0xc] 0x7a9cb01380
	Vector4 Normal;//[Offset: 0x10, Size: 0x10] 0x7a9cb01400
	Color Color;//[Offset: 0x20, Size: 0x4] 0x7a9cb01480

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4] 0x7a9ca65170
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4] 0x7a9ca651e0
	float TexelFactor;//[Offset: 0x8, Size: 0x4] 0x7a9ca65250

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7a9ca18d00
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7a9ca18d80
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7a9ca18e00
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7a9ca18e80
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4] 0x7a9ca08190
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4] 0x7a9ca06520
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4] 0x7a9ca06590
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4] 0x7a9ca06600
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4] 0x7a9ca06670

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1] 0x7a9c7de800
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1] 0x7a9c7de880
	uint32 Channels;//[Offset: 0x334, Size: 0x4] 0x7a9c7f3180
	uint32 InRate;//[Offset: 0x338, Size: 0x4] 0x7a9c7f31f0
	uint32 OutRate;//[Offset: 0x33c, Size: 0x4] 0x7a9c7f3260
	uint32 OutSaturation;//[Offset: 0x340, Size: 0x4] 0x7a9c7f32d0
	uint32 MaxPacketOverhead;//[Offset: 0x344, Size: 0x4] 0x7a9c7f3340
	uint32 InRateClientMax;//[Offset: 0x348, Size: 0x4] 0x7a9c7f33b0
	uint32 InRateClientMin;//[Offset: 0x34c, Size: 0x4] 0x7a9c7f3420
	uint32 InRateClientAvg;//[Offset: 0x350, Size: 0x4] 0x7a9c7f3490
	uint32 InPacketsClientMax;//[Offset: 0x354, Size: 0x4] 0x7a9c7f3500
	uint32 InPacketsClientMin;//[Offset: 0x358, Size: 0x4] 0x7a9c7f3570
	uint32 InPacketsClientAvg;//[Offset: 0x35c, Size: 0x4] 0x7a9c7f35e0
	uint32 OutRateClientMax;//[Offset: 0x360, Size: 0x4] 0x7a9c7f3650
	uint32 OutRateClientMin;//[Offset: 0x364, Size: 0x4] 0x7a9c7f36c0
	uint32 OutRateClientAvg;//[Offset: 0x368, Size: 0x4] 0x7a9c7f3730
	uint32 OutPacketsClientMax;//[Offset: 0x36c, Size: 0x4] 0x7a9c7f37a0
	uint32 OutPacketsClientMin;//[Offset: 0x370, Size: 0x4] 0x7a9c7f3810
	uint32 OutPacketsClientAvg;//[Offset: 0x374, Size: 0x4] 0x7a9c7f3880
	uint32 NetNumClients;//[Offset: 0x378, Size: 0x4] 0x7a9c7f38f0
	uint32 InPackets;//[Offset: 0x37c, Size: 0x4] 0x7a9c7f3960
	uint32 OutPackets;//[Offset: 0x380, Size: 0x4] 0x7a9c7f1cf0
	uint32 InBunches;//[Offset: 0x384, Size: 0x4] 0x7a9c7f1d60
	uint32 OutBunches;//[Offset: 0x388, Size: 0x4] 0x7a9c7f1dd0
	uint32 OutLoss;//[Offset: 0x38c, Size: 0x4] 0x7a9c7f1e40
	uint32 InLoss;//[Offset: 0x390, Size: 0x4] 0x7a9c7f1eb0
	uint32 VoiceBytesSent;//[Offset: 0x394, Size: 0x4] 0x7a9c7f1f20
	uint32 VoiceBytesRecv;//[Offset: 0x398, Size: 0x4] 0x7a9c7f1f90
	uint32 VoicePacketsSent;//[Offset: 0x39c, Size: 0x4] 0x7a9c7f2000
	uint32 VoicePacketsRecv;//[Offset: 0x3a0, Size: 0x4] 0x7a9c7f2070
	uint32 PercentInVoice;//[Offset: 0x3a4, Size: 0x4] 0x7a9c7f20e0
	uint32 PercentOutVoice;//[Offset: 0x3a8, Size: 0x4] 0x7a9c7f2150
	uint32 NumActorChannels;//[Offset: 0x3ac, Size: 0x4] 0x7a9c7f21c0
	uint32 NumConsideredActors;//[Offset: 0x3b0, Size: 0x4] 0x7a9c7f2230
	uint32 PrioritizedActors;//[Offset: 0x3b4, Size: 0x4] 0x7a9c7f22a0
	uint32 NumRelevantActors;//[Offset: 0x3b8, Size: 0x4] 0x7a9c7f2310
	uint32 NumRelevantDeletedActors;//[Offset: 0x3bc, Size: 0x4] 0x7a9c7f2380
	uint32 NumReplicatedActorAttempts;//[Offset: 0x3c0, Size: 0x4] 0x7a9c7f23f0
	uint32 NumReplicatedActors;//[Offset: 0x3c4, Size: 0x4] 0x7a9c7f2460
	uint32 NumActors;//[Offset: 0x3c8, Size: 0x4] 0x7a9c7f24d0
	uint32 NumNetActors;//[Offset: 0x3cc, Size: 0x4] 0x7a9c7f2540
	uint32 NumDormantActors;//[Offset: 0x3d0, Size: 0x4] 0x7a9c7f25b0
	uint32 NumInitiallyDormantActors;//[Offset: 0x3d4, Size: 0x4] 0x7a9c7f2620
	uint32 NumNetGUIDsAckd;//[Offset: 0x3d8, Size: 0x4] 0x7a9c7f2690
	uint32 NumNetGUIDsPending;//[Offset: 0x3dc, Size: 0x4] 0x7a9c7f2700
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x3e0, Size: 0x4] 0x7a9c7f2770
	uint32 ObjPathBytes;//[Offset: 0x3e4, Size: 0x4] 0x7a9c7f27e0
	uint32 NetGUIDOutRate;//[Offset: 0x3e8, Size: 0x4] 0x7a9c7f2850
	uint32 NetGUIDInRate;//[Offset: 0x3ec, Size: 0x4] 0x7a9c7f28c0
	uint32 NetSaturated;//[Offset: 0x3f0, Size: 0x4] 0x7a9c7f2930

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x330, Size: 0x4] 0x7a9cd7dd70
	float LastNetSpeedUpdateTime;//[Offset: 0x334, Size: 0x4] 0x7a9cd7dde0
	int TotalNetBandwidth;//[Offset: 0x338, Size: 0x4] 0x7a9cd7de50
	int MinDynamicBandwidth;//[Offset: 0x33c, Size: 0x4] 0x7a9cd7dec0
	int MaxDynamicBandwidth;//[Offset: 0x340, Size: 0x4] 0x7a9cd7df30
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 0x1] 0x7a9cdc2000
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 0x1] 0x7a9cdc2080
	float StandbyRxCheatTime;//[Offset: 0x348, Size: 0x4] 0x7a9cd7dfa0
	float StandbyTxCheatTime;//[Offset: 0x34c, Size: 0x4] 0x7a9cd7e010
	int BadPingThreshold;//[Offset: 0x350, Size: 0x4] 0x7a9cd7e080
	float PercentMissingForRxStandby;//[Offset: 0x354, Size: 0x4] 0x7a9cd7e0f0
	float PercentMissingForTxStandby;//[Offset: 0x358, Size: 0x4] 0x7a9cd7e160
	float PercentForBadPing;//[Offset: 0x35c, Size: 0x4] 0x7a9cd7e1d0
	float JoinInProgressStandbyWaitTime;//[Offset: 0x360, Size: 0x4] 0x7a9cd7e240
	float MoveRepSize;//[Offset: 0x364, Size: 0x4] 0x7a9cd7e2b0
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x368, Size: 0x4] 0x7a9cd7e320
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x36c, Size: 0x4] 0x7a9cd7e390
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x370, Size: 0x4] 0x7a9cd7e400
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x374, Size: 0x4] 0x7a9cd7e470
	float MaxClientForcedUpdateDuration;//[Offset: 0x378, Size: 0x4] 0x7a9cd7e4e0
	float MaxMoveDeltaTime;//[Offset: 0x37c, Size: 0x4] 0x7a9cd7e550
	float MaxClientSmoothingDeltaTime;//[Offset: 0x380, Size: 0x4] 0x7a9cd7e5c0
	float ClientNetSendMoveDeltaTime;//[Offset: 0x384, Size: 0x4] 0x7a9cd7e630
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x388, Size: 0x4] 0x7a9cd7e6a0
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x38c, Size: 0x4] 0x7a9cd7ca30
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x390, Size: 0x4] 0x7a9cd7caa0
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x394, Size: 0x4] 0x7a9cd7cb10
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1] 0x7a9cdc0080
	float ClientErrorUpdateRateLimit;//[Offset: 0x39c, Size: 0x4] 0x7a9cd7cb80
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1] 0x7a9cdc0100
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 0x1] 0x7a9cdc0180
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x3a4, Size: 0x4] 0x7a9cd7cbf0
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x3a8, Size: 0x4] 0x7a9cd7cc60
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x3ac, Size: 0x4] 0x7a9cd7ccd0
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x3b0, Size: 0x4] 0x7a9cd7cd40
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1] 0x7a9cdc0200
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 0x1] 0x7a9cdc0280

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7aa09e3300
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8] 0x7aa09e3380
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8] 0x7aa09e3400
	float Volume;//[Offset: 0x18, Size: 0x4] 0x7aa093cb80
	float FadeTime;//[Offset: 0x1c, Size: 0x4] 0x7aa093cbf0

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4] 0x7a9c7f10b0
	float Diffusion;//[Offset: 0x2c, Size: 0x4] 0x7a9c7f1120
	float Gain;//[Offset: 0x30, Size: 0x4] 0x7a9c7f1190
	float GainHF;//[Offset: 0x34, Size: 0x4] 0x7a9c7f1200
	float DecayTime;//[Offset: 0x38, Size: 0x4] 0x7a9c7f1270
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4] 0x7a9c7f12e0
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4] 0x7a9c7f1350
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4] 0x7a9c7f13c0
	float LateGain;//[Offset: 0x48, Size: 0x4] 0x7a9c7f1430
	float LateDelay;//[Offset: 0x4c, Size: 0x4] 0x7a9c7f14a0
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4] 0x7a9c7f1510
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4] 0x7a9c7f1580

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7aa09e3480
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4] 0x7aa093cc60
	float ExteriorTime;//[Offset: 0x8, Size: 0x4] 0x7aa093ccd0
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4] 0x7aa093cd40
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4] 0x7aa093cdb0
	float InteriorVolume;//[Offset: 0x14, Size: 0x4] 0x7aa093ce20
	float InteriorTime;//[Offset: 0x18, Size: 0x4] 0x7aa093ce90
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4] 0x7aa093cf00
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4] 0x7aa093cf70

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7a9cb05f00
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7a9cb05f80
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c] 0x7a9cb06000
	uint32 MBPNumSubdivs;//[Offset: 0x20, Size: 0x4] 0x7a9ca658e0

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8] 0x7a9cb05900
	Actor* InViewer;//[Offset: 0x8, Size: 0x8] 0x7a9cb05980
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8] 0x7a9cb05a00
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc] 0x7a9cb05a80
	Vector ViewDir;//[Offset: 0x24, Size: 0xc] 0x7a9cb05b00

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x20, Size: 0x8] 0x7a9ca1cf00

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28] 0x7a9c6e3b00
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8] 0x7a9c6d3e30
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10] 0x7a9c6e3b80
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30] 0x7a9c6e3c00
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4] 0x7a9c6d3f10
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4] 0x7a9c6d3f80
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xba, Size: 0x1] 0x7a9c6e3c80
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1] 0x7a9c6e3d00
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1] 0x7a9c6e3d80
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1] 0x7a9c6e3e00
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1] 0x7a9c6e3e80
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1] 0x7a9c6e3f00
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1] 0x7a9c6e3f80
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1] 0x7a9c6e4000
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10] 0x7a9c6e4080
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10] 0x7a9c6e4180
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4] 0x7a9c6d3ff0
	delegate OnLevelLoaded;//[Offset: 0xe8, Size: 0x10] 0x7a9c6e2180
	delegate OnLevelUnloaded;//[Offset: 0xf8, Size: 0x10] 0x7a9c6e2200
	delegate OnLevelShown;//[Offset: 0x108, Size: 0x10] 0x7a9c6e2280
	delegate OnLevelHidden;//[Offset: 0x118, Size: 0x10] 0x7a9c6e2300
	Level* LoadedLevel;//[Offset: 0x128, Size: 0x8] 0x7a9c6e2380
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 0x8] 0x7a9c6e2400
	bool ShouldBeLoaded();// 0xffffff8523219000 0x7a9c6c6a60
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0xffffff8523219000 0x7a9c6c6b40
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0xffffff8523219000 0x7a9c6c6c20
	void SetPriority(int NewPriority);// 0xffffff8523219000 0x7a9c6c6d00
	void SetLevelLODIndex(int LODIndex);// 0xffffff8523219000 0x7a9c6c6de0
	bool IsStreamingStatePending();// 0xffffff8523219000 0x7a9c6c6ec0
	bool IsLevelVisible();// 0xffffff8523219000 0x7a9c6c6fa0
	bool IsLevelLoaded();// 0xffffff8523219000 0x7a9c6c7080
	FName GetWorldAssetPackageFName();// 0xffffff8523219000 0x7a9c6c7160
	Level* GetLoadedLevel();// 0xffffff8523219000 0x7a9c6c7240
	LevelScriptActor* GetLevelScriptActor();// 0xffffff8523219000 0x7a9c6c7320
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0xffffff8523219000 0x7a9c6c3a40

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x368, Size: 0x10] 0x7a9c6e3280
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 0x1] 0x7a9c6e3300
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x378, Size: 0x1] 0x7a9c6e3380
	byte StreamingUsage;//[Offset: 0x379, Size: 0x1] 0x7a9c6e3400

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 0x10] 0x7a9cb04900

--------------------------------
Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 0x8] 0x7a9cb04800

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x810, Size: 0x50] 0x7a963db780
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xafc, Size: 0x4] 0x7a9cd77f60
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb30, Size: 0x1] 0x7a9cd93800

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8] 0x7a9ca14c00
	Level* Level;//[Offset: 0x28, Size: 0x8] 0x7a9ca14c80
	Object*[] ObjReferences;//[Offset: 0x90, Size: 0x10] 0x7a9ca14d80

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18] 0x7a9cd29f00
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8] 0x7a9cd15020
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7a9cd29f80

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4] 0x7a9cd191c0
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4] 0x7a9cd19230
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4] 0x7a9cd192a0
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4] 0x7a9cd19310
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4] 0x7a9cd19380
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4] 0x7a9cd193f0
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4] 0x7a9cd19460
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0xffffff8523219000 0x7a9cd36de0
	int GetObjectCount();// 0xffffff8523219000 0x7a9cd36ec0
	int GetNewAvoidanceUID();// 0xffffff8523219000 0x7a9cd36fa0
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0xffffff8523219000 0x7a9cd37080

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8] 0x7a9cb04580
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8] 0x7a9cb04600
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8] 0x7a9cb04680
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8] 0x7a9cb04700
	<Level*> Levels;//[Offset: 0x28, Size: 0x50] 0x7a963d8080

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10] 0x7aa07d8d00
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8] 0x7aa07d8d80
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10] 0x7aa07d8e80
	void ReceiveShutdown();// 0xffffff8523219000 0x7aa07cace0
	void ReceiveInit();// 0xffffff8523219000 0x7aa07c7400
	void HandleTravelError(byte FailureType);// 0xffffff8523219000 0x7aa07c74e0
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0xffffff8523219000 0x7aa07c75c0
	void DebugRemovePlayer(int ControllerId);// 0xffffff8523219000 0x7aa07c76a0
	void DebugCreatePlayer(int ControllerId);// 0xffffff8523219000 0x7aa07c7780

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8] 0x7a9c6e4a80
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1] 0x7a9c6e4b00
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8] 0x7a9c6e4b80
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7a9c6e4c00
	int ControllerId;//[Offset: 0xe0, Size: 0x4] 0x7a9c6d3a40

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8] 0x7a9cdcf400
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10] 0x7a9cdcf500
	World* World;//[Offset: 0x70, Size: 0x8] 0x7a9cdcf580
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8] 0x7a9cdcf600
	void SSSwapControllers();// 0xffffff8523219000 0x7a9cdf6de0
	void ShowTitleSafeArea();// 0xffffff8523219000 0x7a9cdf6ec0
	void SetConsoleTarget(int PlayerIndex);// 0xffffff8523219000 0x7a9cdf6fa0

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8] 0x7a9cd92000
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8] 0x7a9cd92080
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8] 0x7a9cd92100
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10] 0x7a9cd90080

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8] 0x7a9ca15280
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8] 0x7a9ca13200

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8] 0x7a9c7b1e00

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 0x10] 0x7a9c844180
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 0x8] 0x7a9c7fb530
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7a9c844200
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x7a9c842180
	float RebaseOriginDistance;//[Offset: 0x64, Size: 0x4] 0x7a9c7fb5a0

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50] 0x7a963d7fe0

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10] 0x7a9cb06180
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10] 0x7a9cb06280
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10] 0x7a9cb04280

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8] 0x7a9cb06080

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0bf40
	FName ClassName;//[Offset: 0x8, Size: 0x8] 0x7a9ca0bfb0
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8] 0x7a9ca56100
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4] 0x7a9ca0c020
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7a9ca56180
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1] 0x7a9ca56200
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1] 0x7a9ca56280
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1] 0x7a9ca56300
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7a9ca54280

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8] 0x7a9cd28900

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x168, Size: 0x10] 0x7a9c620880
	bool WasControllerKeyJustReleased(Key Key);// 0xffffff8523219000 0x7a9cdf59c0
	bool WasControllerKeyJustPressed(Key Key);// 0xffffff8523219000 0x7a9cdf5aa0
	bool IsControllerKeyDown(Key Key);// 0xffffff8523219000 0x7a9cdf5b80
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0xffffff8523219000 0x7a9cdf5c60
	Vector GetControllerVectorKeyState(Key Key);// 0xffffff8523219000 0x7a9cdf5d40
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0xffffff8523219000 0x7a9cdf5e20
	float GetControllerKeyTimeDown(Key Key);// 0xffffff8523219000 0x7a9cdf5f00
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0xffffff8523219000 0x7a9cdf5fe0
	float GetControllerAnalogKeyState(Key Key);// 0xffffff8523219000 0x7a9cdf60c0

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8] 0x7a9ca1c300

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10] 0x7a9c81eb00
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4] 0x7a9c7f9540
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4] 0x7a9c7f95b0
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4] 0x7a9c7f9620
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4] 0x7a9c7f9690
	float ActivationDelay;//[Offset: 0x48, Size: 0x4] 0x7a9c7f9700
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x7a9c81eb80
	float StartupDelay;//[Offset: 0x50, Size: 0x4] 0x7a9c7f9770

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8] 0x7a9cb04d80
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8] 0x7a9cb04e00
	Vector2D Center;//[Offset: 0x10, Size: 0x8] 0x7a9cb04e80
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8] 0x7a9cb04f00
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8] 0x7a9cb04f80
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8] 0x7a9cb05000
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8] 0x7a9cb05080
	Key MainInputKey;//[Offset: 0x38, Size: 0x18] 0x7a9cb05100
	Key AltInputKey;//[Offset: 0x50, Size: 0x18] 0x7a9cb05180

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x110, Size: 0x10] 0x7a9cd01400
	delegate ColorAndOpacityDelegate;//[Offset: 0x120, Size: 0x10] 0x7a9cd01480
	SlateColor ForegroundColor;//[Offset: 0x130, Size: 0x28] 0x7a9cd01500
	delegate ForegroundColorDelegate;//[Offset: 0x158, Size: 0x10] 0x7a9cd01580
	Margin Padding;//[Offset: 0x168, Size: 0x10] 0x7a9cd01680
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x178, Size: 0x10] 0x7a9cd01780
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x188, Size: 0x10] 0x7a9cd01880
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x198, Size: 0x10] 0x7a9cd01980
	WidgetTree* WidgetTree;//[Offset: 0x1a8, Size: 0x8] 0x7a9cd01a00
	int Priority;//[Offset: 0x1b0, Size: 0x4] 0x7a9cbcf970
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b4, Size: 0x1] 0x7a9cd01a80
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b4, Size: 0x1] 0x7a9cd01b00
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b4, Size: 0x1] 0x7a9cd01b80
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1b4, Size: 0x1] 0x7a9cd01c00
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1b4, Size: 0x1] 0x7a9cd01c80
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1b4, Size: 0x1] 0x7a9cd01d00
	enum TickFrequency;//[Offset: 0x1c0, Size: 0x1] 0x7a9cd01e00
	InputComponent* InputComponent;//[Offset: 0x1c8, Size: 0x8] 0x7a9cd01e80
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x1d0, Size: 0x10] 0x7a9cd01f80
	void UnregisterInputComponent();// 0xffffff8523219000 0x7a9ccf2460
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0xffffff8523219000 0x7a9ccf2540
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0xffffff8523219000 0x7a9ccf2620
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0xffffff8523219000 0x7a9ccf2700
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0xffffff8523219000 0x7a9ccf27e0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xffffff8523219000 0x7a9ccf28c0
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0xffffff8523219000 0x7a9ccf29a0
	void StopListeningForAllInputActions();// 0xffffff8523219000 0x7a9ccf2a80
	void StopAnimationsAndLatentActions();// 0xffffff8523219000 0x7a9ccf2b60
	void StopAnimation(const WidgetAnimation* InAnimation);// 0xffffff8523219000 0x7a9ccf2c40
	void StopAllAnimations();// 0xffffff8523219000 0x7a9ccf2d20
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0xffffff8523219000 0x7a9ccf2e00
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0xffffff8523219000 0x7a9ccf2ee0
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccf2fc0
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0xffffff8523219000 0x7a9ccf30a0
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0xffffff8523219000 0x7a9ccf3180
	void SetInputActionPriority(int NewPriority);// 0xffffff8523219000 0x7a9ccf3260
	void SetInputActionBlocking(bool bShouldBlock);// 0xffffff8523219000 0x7a9ccf3340
	void SetForegroundColor(SlateColor InForegroundColor);// 0xffffff8523219000 0x7a9ccf3420
	void SetDesiredSizeInViewport(Vector2D Size);// 0xffffff8523219000 0x7a9ccf3500
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0xffffff8523219000 0x7a9ccf35e0
	void SetAnchorsInViewport(Anchors Anchors);// 0xffffff8523219000 0x7a9ccf36c0
	void SetAlignmentInViewport(Vector2D Alignment);// 0xffffff8523219000 0x7a9ccf37a0
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0xffffff8523219000 0x7a9ccf3880
	void RemoveFromViewport();// 0xffffff8523219000 0x7a9ccf3960
	void RegisterInputComponent();// 0xffffff8523219000 0x7a9ccf0080
	void PreConstruct(bool IsDesignTime);// 0xffffff8523219000 0x7a9ccf0160
	void PlaySound(SoundBase* SoundToPlay);// 0xffffff8523219000 0x7aa09814a0
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0xffffff8523219000 0x7a9ccf0240
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed);// 0xffffff8523219000 0x7a9ccf0320
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed);// 0xffffff8523219000 0x7a9ccf0400
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0xffffff8523219000 0x7a9ccf04e0
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0xffffff8523219000 0x7a9ccf05c0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xffffff8523219000 0x7a9ccf06a0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xffffff8523219000 0x7a9ccf0780
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0xffffff8523219000 0x7a9ccf0860
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xffffff8523219000 0x7a9ccf0940
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xffffff8523219000 0x7a9ccf0a20
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0xffffff8523219000 0x7a9ccf0b00
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8523219000 0x7a9ccf0be0
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xffffff8523219000 0x7a9ccf0cc0
	void OnPaint(out PaintContext Context);// 0xffffff8523219000 0x7a9ccf0da0
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8523219000 0x7a9ccf0e80
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8523219000 0x7a9ccf0f60
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0xffffff8523219000 0x7a9ccf1040
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8523219000 0x7a9ccf1120
	void OnMouseCaptureLost();// 0xffffff8523219000 0x7a9ccf1200
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8523219000 0x7a9ccf12e0
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8523219000 0x7a9ccf13c0
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0xffffff8523219000 0x7a9ccf14a0
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0xffffff8523219000 0x7a9ccf1580
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xffffff8523219000 0x7a9ccf1660
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xffffff8523219000 0x7a9ccf1740
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0xffffff8523219000 0x7a9ccf1820
	void OnInitialized();// 0xffffff8523219000 0x7a9ccf1900
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0xffffff8523219000 0x7a9ccf19e0
	void OnFocusLost(FocusEvent InFocusEvent);// 0xffffff8523219000 0x7a9ccf1ac0
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff8523219000 0x7a9ccf1ba0
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff8523219000 0x7a9ccf1c80
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff8523219000 0x7a9ccce780
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff8523219000 0x7a9ccce860
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0xffffff8523219000 0x7a9ccce940
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff8523219000 0x7a9cccea20
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0xffffff8523219000 0x7a9ccceb00
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0xffffff8523219000 0x7a9cccebe0
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0xffffff8523219000 0x7a9cccecc0
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0xffffff8523219000 0x7a9ccceda0
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0xffffff8523219000 0x7a9cccee80
	bool IsPlayingAnimation();// 0xffffff8523219000 0x7a9cccef60
	bool IsListeningForInputAction(FName ActionName);// 0xffffff8523219000 0x7a9cccf040
	bool IsInViewport();// 0xffffff8523219000 0x7a9cccf120
	bool IsInteractable();// 0xffffff8523219000 0x7a9cccf200
	bool IsAnyAnimationPlaying();// 0xffffff8523219000 0x7a9cccf2e0
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0xffffff8523219000 0x7a9cccf3c0
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0xffffff8523219000 0x7a9cccf4a0
	Pawn* GetOwningPlayerPawn();// 0xffffff8523219000 0x7a9cccf580
	bool GetIsVisible();// 0xffffff8523219000 0x7a9cccf660
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0xffffff8523219000 0x7a9cccf740
	Anchors GetAnchorsInViewport();// 0xffffff8523219000 0x7a9cccf820
	Vector2D GetAlignmentInViewport();// 0xffffff8523219000 0x7a9cccf900
	void Destruct();// 0xffffff8523219000 0x7a9cccf9e0
	void Construct();// 0xffffff8523219000 0x7a9cccfac0
	void CancelLatentActions();// 0xffffff8523219000 0x7a9cccfba0
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0xffffff8523219000 0x7a9cccfc80
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0xffffff8523219000 0x7a9cccfd60
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0xffffff8523219000 0x7a9cccfe40
	void AddToViewport(int ZOrder);// 0xffffff8523219000 0x7a9cccff20
	bool AddToPlayerScreen(int ZOrder);// 0xffffff8523219000 0x7a9ccccaa0

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8] 0x7aa0857280
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10] 0x7aa0857300
	FText ToolTipText;//[Offset: 0x40, Size: 0x18] 0x7aa08358e0
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10] 0x7aa0857380
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8] 0x7aa0855300
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10] 0x7aa0855380
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10] 0x7aa0855400
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c] 0x7aa0855480
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8] 0x7aa0855500
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1] 0x7aa0855580
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1] 0x7aa0855600
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1] 0x7aa0855680
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1] 0x7aa0855700
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 0x1] 0x7aa0855780
	byte Cursor;//[Offset: 0xb5, Size: 0x1] 0x7aa0855800
	enum Clipping;//[Offset: 0xb6, Size: 0x1] 0x7aa0855900
	enum Visibility;//[Offset: 0xb7, Size: 0x1] 0x7aa0855a00
	float RenderOpacity;//[Offset: 0xb8, Size: 0x4] 0x7aa0835950
	WidgetNavigation* Navigation;//[Offset: 0xc0, Size: 0x8] 0x7aa0855a80
	enum FlowDirectionPreference;//[Offset: 0xc8, Size: 0x1] 0x7aa0855b80
	PropertyBinding*[] NativeBindings;//[Offset: 0xf8, Size: 0x10] 0x7aa0855c80
	void SetVisibility(enum InVisibility);// 0xffffff8523219000 0x7aa0849620
	void SetUserFocus(PlayerController* PlayerController);// 0xffffff8523219000 0x7aa0849700
	void SetToolTipText(out const FText InToolTipText);// 0xffffff8523219000 0x7aa08497e0
	void SetToolTip(Widget* Widget);// 0xffffff8523219000 0x7aa08498c0
	void SetRenderTranslation(Vector2D Translation);// 0xffffff8523219000 0x7aa08499a0
	void SetRenderTransformPivot(Vector2D Pivot);// 0xffffff8523219000 0x7aa0849a80
	void SetRenderTransform(WidgetTransform InTransform);// 0xffffff8523219000 0x7aa0849b60
	void SetRenderShear(Vector2D Shear);// 0xffffff8523219000 0x7aa0849c40
	void SetRenderScale(Vector2D Scale);// 0xffffff8523219000 0x7aa0849d20
	void SetRenderOpacity(float InOpacity);// 0xffffff8523219000 0x7aa0849e00
	void SetRenderAngle(float Angle);// 0xffffff8523219000 0x7aa0849ee0
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0xffffff8523219000 0x7aa0849fc0
	void SetKeyboardFocus();// 0xffffff8523219000 0x7aa084a0a0
	void SetIsEnabled(bool bInIsEnabled);// 0xffffff8523219000 0x7aa084a180
	void SetCursor(byte InCursor);// 0xffffff8523219000 0x7aa084a260
	void SetClipping(enum InClipping);// 0xffffff8523219000 0x7aa084a340
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0xffffff8523219000 0x7aa084a420
	void ResetCursor();// 0xffffff8523219000 0x7aa084a500
	void RemoveFromParent();// 0xffffff8523219000 0x7aa084a5e0
	EventReply OnReply__DelegateSignature();// 0xffffff8523219000 0x7aa084a6c0
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8523219000 0x7aa084a7a0
	bool IsVisible();// 0xffffff8523219000 0x7aa084a880
	bool IsHovered();// 0xffffff8523219000 0x7aa084a960
	void InvalidateLayoutAndVolatility();// 0xffffff8523219000 0x7aa084aa40
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0xffffff8523219000 0x7aa084ab20
	bool HasUserFocus(PlayerController* PlayerController);// 0xffffff8523219000 0x7aa084ac00
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0xffffff8523219000 0x7aa084ace0
	bool HasMouseCapture();// 0xffffff8523219000 0x7aa0847400
	bool HasKeyboardFocus();// 0xffffff8523219000 0x7aa08474e0
	bool HasFocusedDescendants();// 0xffffff8523219000 0x7aa08475c0
	bool HasAnyUserFocus();// 0xffffff8523219000 0x7aa08476a0
	Widget* GetWidget__DelegateSignature();// 0xffffff8523219000 0x7aa0847780
	enum GetVisibility();// 0xffffff8523219000 0x7aa0847860
	FText GetText__DelegateSignature();// 0xffffff8523219000 0x7aa0847940
	enum GetSlateVisibility__DelegateSignature();// 0xffffff8523219000 0x7aa0847a20
	SlateColor GetSlateColor__DelegateSignature();// 0xffffff8523219000 0x7aa0847b00
	SlateBrush GetSlateBrush__DelegateSignature();// 0xffffff8523219000 0x7aa0847be0
	float GetRenderOpacity();// 0xffffff8523219000 0x7aa0847cc0
	PanelWidget* GetParent();// 0xffffff8523219000 0x7aa0847da0
	PlayerController* GetOwningPlayer();// 0xffffff8523219000 0x7aa0847e80
	LocalPlayer* GetOwningLocalPlayer();// 0xffffff8523219000 0x7aa0847f60
	byte GetMouseCursor__DelegateSignature();// 0xffffff8523219000 0x7aa0848040
	LinearColor GetLinearColor__DelegateSignature();// 0xffffff8523219000 0x7aa0848120
	bool GetIsEnabled();// 0xffffff8523219000 0x7aa0848200
	int GetInt32__DelegateSignature();// 0xffffff8523219000 0x7aa08482e0
	GameInstance* GetGameInstance();// 0xffffff8523219000 0x7aa08483c0
	float GetFloat__DelegateSignature();// 0xffffff8523219000 0x7aa08484a0
	Vector2D GetDesiredSize();// 0xffffff8523219000 0x7aa0848580
	enum GetClipping();// 0xffffff8523219000 0x7aa0848660
	enum GetCheckBoxState__DelegateSignature();// 0xffffff8523219000 0x7aa0848740
	Geometry GetCachedGeometry();// 0xffffff8523219000 0x7aa0848820
	bool GetBool__DelegateSignature();// 0xffffff8523219000 0x7aa0848900
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0xffffff8523219000 0x7aa08489e0
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0xffffff8523219000 0x7aa0848ac0
	void ForceVolatile(bool bForce);// 0xffffff8523219000 0x7aa0848ba0
	void ForceLayoutPrepass();// 0xffffff8523219000 0x7aa0848c80

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10] 0x7aa0855280
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1] 0x7aa0853200

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4] 0x7aa0835db0
	float Top;//[Offset: 0x4, Size: 0x4] 0x7aa0835e20
	float Right;//[Offset: 0x8, Size: 0x4] 0x7aa0835e90
	float Bottom;//[Offset: 0xc, Size: 0x4] 0x7aa0835f00

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8] 0x7a9cc2b700
	Widget* Content;//[Offset: 0x30, Size: 0x8] 0x7a9cc2b780

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x108, Size: 0x10] 0x7a9cc2c000
	bool RemoveChildAt(int Index);// 0xffffff8523219000 0x7a9cbdeda0
	bool RemoveChild(Widget* Content);// 0xffffff8523219000 0x7a9cbdee80
	bool HasChild(Widget* Content);// 0xffffff8523219000 0x7a9cbdef60
	bool HasAnyChildren();// 0xffffff8523219000 0x7a9cbdf040
	int GetChildrenCount();// 0xffffff8523219000 0x7a9cbdf120
	int GetChildIndex(const Widget* Content);// 0xffffff8523219000 0x7a9cbdf200
	Widget* GetChildAt(int Index);// 0xffffff8523219000 0x7a9cbdf2e0
	Widget*[] GetAllChildren();// 0xffffff8523219000 0x7a9cbdf3c0
	void ClearChildren();// 0xffffff8523219000 0x7a9cbdf4a0
	PanelSlot* AddChild(Widget* Content);// 0xffffff8523219000 0x7a9cbdf580

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8] 0x7aa0855f80
	Vector2D Scale;//[Offset: 0x8, Size: 0x8] 0x7aa0856000
	Vector2D Shear;//[Offset: 0x10, Size: 0x8] 0x7aa0856080
	float Angle;//[Offset: 0x18, Size: 0x4] 0x7aa0835a30

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x370, Size: 0x8] 0x7a9ccdb680
	void SetUserTag(FName InUserTag);// 0xffffff8523219000 0x7a9cccd280
	FName GetUserTag();// 0xffffff8523219000 0x7a9cccd360

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8] 0x7a9cd02380
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 0x10] 0x7a9cd02480
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1] 0x7a9cd02500
	FString DisplayLabel;//[Offset: 0x368, Size: 0x10] 0x7a9cbcf820
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0xffffff8523219000 0x7a9ccf4ca0
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0xffffff8523219000 0x7a9ccf4d80
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0xffffff8523219000 0x7a9ccf4e60
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0xffffff8523219000 0x7a9ccf4f40
	float GetStartTime();// 0xffffff8523219000 0x7a9ccf5020
	float GetEndTime();// 0xffffff8523219000 0x7a9ccf5100
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0xffffff8523219000 0x7a9ccf51e0
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0xffffff8523219000 0x7a9ccf52c0

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0] 0x7a9cc23780
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1] 0x7a9cc23880
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1] 0x7a9cc23900

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10] 0x7a9cc22f80

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50] 0x7a963d8940
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30] 0x7aa0928180
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0] 0x7aa0926a00
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10] 0x7aa0926a80
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4] 0x7aa0926b00
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8] 0x7aa0926e00
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60] 0x7aa0926e80
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60] 0x7aa0926f00

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x7aa083e630

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10] 0x7aa0927980
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2] 0x7aa083e1d0
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1] 0x7aa0927a80
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20] 0x7aa0927c80
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8] 0x7aa0927d00
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60] 0x7aa0927d80
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10] 0x7aa0927e80
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38] 0x7aa0927f00
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8] 0x7aa083e2b0
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x7aa0927f80
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x7aa0928000

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10] 0x7aa0927b00
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10] 0x7aa0927c00

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4] 0x7a9cc24100

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7aa0929680
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7aa0929700
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7aa0929780
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7aa0929800
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7aa0929880

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10] 0x7aa0927100
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10] 0x7aa0925480
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10] 0x7af81c2b80

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10] 0x7aa0927200
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10] 0x7aa0925380

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4] 0x7aa083e470
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4] 0x7aa083e4e0
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4] 0x7aa083e550

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4] 0x7aa0927280

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4] 0x7aa0927300
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4] 0x7aa0927380

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4] 0x7aa083e5c0

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x7aa083cb10

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10] 0x7aa0925580
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10] 0x7aa0925800
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50] 0x7a963d8c60

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc] 0x7aa0925700
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 0x4] 0x7aa083ca30

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4] 0x7aa0925600
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4] 0x7aa0925680
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4] 0x7aa083e6a0

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50] 0x7a963d89e0
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50] 0x7a963d8a80

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18] 0x7aa0928200
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0xc] 0x7aa0928280
	FrameRate TickResolution;//[Offset: 0x24, Size: 0x8] 0x7aa0928300
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x2c, Size: 0x4] 0x7aa0928380
	MovieSceneFrameRange PlayRange;//[Offset: 0x30, Size: 0x10] 0x7aa0928400
	MovieSceneFrameRange PreRollRange;//[Offset: 0x40, Size: 0x10] 0x7aa0926380
	MovieSceneFrameRange PostRollRange;//[Offset: 0x50, Size: 0x10] 0x7aa0926400
	int HierarchicalBias;//[Offset: 0x60, Size: 0x4] 0x7aa083e320
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x68, Size: 0x18] 0x7aa0926480
	Guid SubSectionSignature;//[Offset: 0x88, Size: 0x10] 0x7aa0926500
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x98, Size: 0xc] 0x7aa0926600

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4] 0x7aa083e390
	FrameTime Offset;//[Offset: 0x4, Size: 0x8] 0x7aa0926580

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4] 0x7af81c6280
	float SubFrame;//[Offset: 0x4, Size: 0x4] 0x7af958e710

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4] 0x7af958e860

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4] 0x7af958e780
	int Denominator;//[Offset: 0x4, Size: 0x4] 0x7af958e7f0

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4] 0x7aa0926780
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10] 0x7aa0926880

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x7aa083e400

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4] 0x7aa0926b80
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50] 0x7a963d8b20
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50] 0x7a963d8bc0

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10] 0x7a9cc22680
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10] 0x7a9cc22780
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10] 0x7a9cc22880
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x80, Size: 0x10] 0x7a9cc22980
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x90, Size: 0x8] 0x7a9cc22a00
	MovieSceneFrameRange SelectionRange;//[Offset: 0x98, Size: 0x10] 0x7a9cc22a80
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xa8, Size: 0x10] 0x7a9cc22b00
	FrameRate TickResolution;//[Offset: 0xb8, Size: 0x8] 0x7a9cc22b80
	FrameRate DisplayRate;//[Offset: 0xc0, Size: 0x8] 0x7a9cc22c00
	enum EvaluationType;//[Offset: 0xc8, Size: 0x1] 0x7a9cc22d00
	enum ClockSource;//[Offset: 0xc9, Size: 0x1] 0x7a9cc22e00
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0xd0, Size: 0x10] 0x7a9cc22f00

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30] 0x7aa0929980
	FName[] Tags;//[Offset: 0x30, Size: 0x10] 0x7aa0929a00
	Guid Guid;//[Offset: 0x40, Size: 0x10] 0x7aa0929a80
	FString Name;//[Offset: 0x50, Size: 0x10] 0x7aa083f120
	Object* ObjectTemplate;//[Offset: 0x60, Size: 0x8] 0x7aa0929b00
	Guid[] ChildPossessables;//[Offset: 0x68, Size: 0x10] 0x7aa0929c00
	enum Ownership;//[Offset: 0x78, Size: 0x1] 0x7aa0929d00
	FName LevelName;//[Offset: 0x7c, Size: 0x8] 0x7aa083f190

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10] 0x7aa0928880
	Guid Guid;//[Offset: 0x10, Size: 0x10] 0x7aa0928900
	FString Name;//[Offset: 0x20, Size: 0x10] 0x7aa083dd70
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8] 0x7aa0928980
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10] 0x7aa0928a00

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10] 0x7aa0924500
	FString BindingName;//[Offset: 0x10, Size: 0x10] 0x7aa083cbf0
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10] 0x7aa0924600

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4] 0x7aa0924780
	FString Label;//[Offset: 0x8, Size: 0x10] 0x7aa083cc60

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8] 0x7aa0934140
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8] 0x7aa09341b0
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10] 0x7aa094f480
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7aa094f500

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7aa0934290
	Widget* Content;//[Offset: 0x8, Size: 0x8] 0x7aa094f780

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8] 0x7a9cd08f00

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24] 0x7a9cd09480
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24] 0x7a9cd07400
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24] 0x7a9cd07480
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24] 0x7a9cd07500
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24] 0x7a9cd07580
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24] 0x7a9cd07600

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1] 0x7aa094ea80
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8] 0x7aa0933d50
	Widget* Widget;//[Offset: 0xc, Size: 0x8] 0x7aa094eb00
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10] 0x7aa094eb80

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8] 0x7a9cc2d400
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28] 0x7a9cc2d480
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8] 0x7a9cbcc2c0

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10] 0x7aa094e680
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8] 0x7aa094e700

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7aa0934450
	int ArrayIndex;//[Offset: 0x8, Size: 0x4] 0x7aa09344c0
	Struct* Struct;//[Offset: 0x10, Size: 0x8] 0x7aa094e500
	Field* Field;//[Offset: 0x18, Size: 0x8] 0x7aa094e580

--------------------------------
Class: EventReply

--------------------------------
Class: Geometry

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8] 0x7aa0855180
	Margin Margin;//[Offset: 0x10, Size: 0x10] 0x7aa0855200
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28] 0x7aa0853280
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8] 0x7aa0853300
	FName ResourceName;//[Offset: 0x50, Size: 0x8] 0x7aa0835f70
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14] 0x7aa0853380
	byte DrawAs;//[Offset: 0x6c, Size: 0x1] 0x7aa0853400
	byte Tiling;//[Offset: 0x6d, Size: 0x1] 0x7aa0853480
	byte Mirroring;//[Offset: 0x6e, Size: 0x1] 0x7aa0853500
	byte ImageType;//[Offset: 0x6f, Size: 0x1] 0x7aa0853580
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7aa0853600
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7aa0853680

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8] 0x7af81c3c80
	Vector2D Max;//[Offset: 0x8, Size: 0x8] 0x7af81c3d00
	byte bIsValid;//[Offset: 0x10, Size: 0x1] 0x7af81c3d80

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8] 0x7aa094f580
	delegate Delegate;//[Offset: 0x8, Size: 0x10] 0x7aa094f600
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1] 0x7aa094f700
	FName UserTag;//[Offset: 0x1c, Size: 0x8] 0x7aa0934220

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8] 0x7aa0922000
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8] 0x7aa0922080

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10] 0x7a9cbcbe60
	Object* Payload;//[Offset: 0x38, Size: 0x8] 0x7a9ccd0480
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8] 0x7a9ccd0500
	enum Pivot;//[Offset: 0x48, Size: 0x1] 0x7a9ccd0600
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8] 0x7a9ccd0680
	delegate OnDrop;//[Offset: 0x58, Size: 0x10] 0x7a9ccd0700
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10] 0x7a9ccd0780
	delegate OnDragged;//[Offset: 0x78, Size: 0x10] 0x7a9ccd0800
	void Drop(out const PointerEvent PointerEvent);// 0xffffff8523219000 0x7a9ccc1e40
	void Dragged(out const PointerEvent PointerEvent);// 0xffffff8523219000 0x7a9ccc1f20
	void DragCancelled(out const PointerEvent PointerEvent);// 0xffffff8523219000 0x7a9ccc2000

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4] 0x7a9ca0dbb0
	byte BlendFunction;//[Offset: 0x4, Size: 0x1] 0x7a9ca58f80
	float BlendExp;//[Offset: 0x8, Size: 0x4] 0x7a9ca0dc20
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7a9ca59000

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0dad0
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7a9ca58d00

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4] 0x7a963ef580
	int UUID;//[Offset: 0x4, Size: 0x4] 0x7a963ef5f0
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8] 0x7a963ef660
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8] 0x7aa0821400

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0d9f0
	int LODIndex;//[Offset: 0x8, Size: 0x4] 0x7a9ca0da60
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7a9ca58b80
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x7a9ca58c00
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x7a9ca58c80

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8] 0x7a9ca08ba0
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7a9ca19b00
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x7a9ca19b80
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x7a9ca19c00

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4] 0x7aa093ebe0
	int Index;//[Offset: 0x4, Size: 0x4] 0x7aa093ec50
	int SelectionIndex;//[Offset: 0x8, Size: 0x4] 0x7aa093ecc0

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x330, Size: 0x8] 0x7a9c7b2e00
	FName MatineeControllerName;//[Offset: 0x338, Size: 0x8] 0x7a9c6d7780
	float PlayRate;//[Offset: 0x340, Size: 0x4] 0x7a9c6d77f0
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 0x1] 0x7a9c7b2e80
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 0x1] 0x7a9c7b2f00
	float ForceStartPosition;//[Offset: 0x348, Size: 0x4] 0x7a9c6d7860
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34c, Size: 0x1] 0x7a9c7b2f80
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34c, Size: 0x1] 0x7a9c7b3000
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34c, Size: 0x1] 0x7a9c7b3080
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34c, Size: 0x1] 0x7a9c7b3100
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34c, Size: 0x1] 0x7a9c7b3180
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34c, Size: 0x1] 0x7a9c7b1100
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34c, Size: 0x1] 0x7a9c7b1180
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34c, Size: 0x1] 0x7a9c7b1200
	int PreferredSplitScreenNum;//[Offset: 0x350, Size: 0x4] 0x7a9c6d78d0
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 0x1] 0x7a9c7b1280
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x354, Size: 0x1] 0x7a9c7b1300
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x354, Size: 0x1] 0x7a9c7b1380
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x354, Size: 0x1] 0x7a9c7b1400
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x358, Size: 0x10] 0x7a9c7b1500
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 0x1] 0x7a9c7b1580
	InterpGroupInst*[] GroupInst;//[Offset: 0x370, Size: 0x10] 0x7a9c7b1680
	CameraCutInfo[] CameraCuts;//[Offset: 0x380, Size: 0x10] 0x7a9c7b1800
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x390, Size: 0x1] 0x7a9c7b1880
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x390, Size: 0x1] 0x7a9c7b1900
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x390, Size: 0x1] 0x7a9c7b1980
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x390, Size: 0x1] 0x7a9c7b1a00
	float InterpPosition;//[Offset: 0x394, Size: 0x4] 0x7a9c6d7940
	byte ReplicationForceIsPlaying;//[Offset: 0x39c, Size: 0x1] 0x7a9c7b1a80
	delegate OnPlay;//[Offset: 0x3a0, Size: 0x10] 0x7a9c7b1b00
	delegate OnStop;//[Offset: 0x3b0, Size: 0x10] 0x7a9c7b1b80
	delegate OnPause;//[Offset: 0x3c0, Size: 0x10] 0x7a9c7b1c00
	void Stop();// 0xffffff8523219000 0x7a9c6c8e40
	void SetPosition(float NewPosition, bool bJump);// 0xffffff8523219000 0x7a9c6c8f20
	void SetLoopingState(bool bNewLooping);// 0xffffff8523219000 0x7a9c6c9000
	void Reverse();// 0xffffff8523219000 0x7a9c6c5720
	void Play();// 0xffffff8523219000 0x7a9c6c5800
	void Pause();// 0xffffff8523219000 0x7a9c6c58e0
	void EnableGroupByName(FString GroupName, bool bEnable);// 0xffffff8523219000 0x7a9c6c59c0
	void ChangePlaybackDirection();// 0xffffff8523219000 0x7a9c6c5aa0

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4] 0x7a9cde6360
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4] 0x7a9cde63d0
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10] 0x7a9c622e80
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8] 0x7a9c622f00
	float EdSectionStart;//[Offset: 0x48, Size: 0x4] 0x7a9cde6440
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4] 0x7a9cde64b0
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7a9c622f80
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8] 0x7a9c623000
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10] 0x7a9c623080

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0b300
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10] 0x7a9ca50e00

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x7a9ca50d00
	float Timestamp;//[Offset: 0xc, Size: 0x4] 0x7a9ca0b290

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x258, Size: 0x8] 0x7a9cd4f980
	Actor* ChildActor;//[Offset: 0x260, Size: 0x8] 0x7a9cd4fa00
	Actor* ChildActorTemplate;//[Offset: 0x268, Size: 0x8] 0x7a9cd4fa80
	void SetChildActorClass(class Actor InClass);// 0xffffff8523219000 0x7a9cd84840

--------------------------------
Class: ActorChannel.Channel.Object
	Actor* Actor;//[Offset: 0x70, Size: 0x8] 0x7a9cd28780
	Object*[] CreateSubObjects;//[Offset: 0x158, Size: 0x10] 0x7a9cd28880

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x7a9cd2a100
	float AnimLength;//[Offset: 0x8c, Size: 0x4] 0x7a9cd15090
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8] 0x7a9cd2a180
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4] 0x7a9cd15100
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1] 0x7a9cd2a200
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10] 0x7a9cd2a300
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4] 0x7a9cd15170
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10] 0x7a9cd2a400
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10] 0x7a9cd2a500
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20] 0x7a9cd28480

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4] 0x7aa093df30
	byte InterpolationType;//[Offset: 0x4, Size: 0x1] 0x7aa09e5c80

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10] 0x7aa09e5e80
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4] 0x7aa093e320

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8] 0x7aa09e5d00
	Vector SampleValue;//[Offset: 0x8, Size: 0xc] 0x7aa09e5d80
	float RateScale;//[Offset: 0x14, Size: 0x4] 0x7aa093e160

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4] 0x7aa093e1d0
	float Weights;//[Offset: 0xc, Size: 0x4] 0x7aa093e240

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10] 0x7aa093dfa0
	float Min;//[Offset: 0x10, Size: 0x4] 0x7aa093e010
	float Max;//[Offset: 0x14, Size: 0x4] 0x7aa093e080
	int GridNum;//[Offset: 0x18, Size: 0x4] 0x7aa093e0f0

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 0x1] 0x7a9cd2a080

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1] 0x7a9cd2a000

--------------------------------
Class: AimOffsetBlendSpace1D.BlendSpace1D.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: AmbientSound.Actor.Object
	AudioComponent* AudioComponent;//[Offset: 0x330, Size: 0x8] 0x7a9cd29e80
	void Stop();// 0xffffff8523219000 0x7a9cd337a0
	void Play(float StartTime);// 0xffffff8523219000 0x7a9cd33880
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);// 0xffffff8523219000 0x7a9cd33960
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);// 0xffffff8523219000 0x7a9cd30080
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);// 0xffffff8523219000 0x7a9cd30160

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x258, Size: 0x8] 0x7a9cd42780
	AudioComponentParam[] InstanceParameters;//[Offset: 0x260, Size: 0x10] 0x7a9cd42880
	SoundClass* SoundClassOverride;//[Offset: 0x270, Size: 0x8] 0x7a9cd42900
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1] 0x7a9cd42980
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x278, Size: 0x1] 0x7a9cd42a00
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x278, Size: 0x1] 0x7a9cd42a80
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x278, Size: 0x1] 0x7a9cd42b00
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x278, Size: 0x1] 0x7a9cd42b80
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x278, Size: 0x1] 0x7a9cd42c00
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x278, Size: 0x1] 0x7a9cd42c80
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x278, Size: 0x1] 0x7a9cd42d00
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x279, Size: 0x1] 0x7a9cd42d80
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x279, Size: 0x1] 0x7a9cd42e00
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27a, Size: 0x1] 0x7a9cd41800
	FName AudioComponentUserID;//[Offset: 0x280, Size: 0x8] 0x7a9cd19d20
	float PitchModulationMin;//[Offset: 0x288, Size: 0x4] 0x7a9cd19d90
	float PitchModulationMax;//[Offset: 0x28c, Size: 0x4] 0x7a9cd19e00
	float VolumeModulationMin;//[Offset: 0x290, Size: 0x4] 0x7a9cd19e70
	float VolumeModulationMax;//[Offset: 0x294, Size: 0x4] 0x7a9cd18200
	float VolumeMultiplier;//[Offset: 0x298, Size: 0x4] 0x7a9cd18270
	int EnvelopeFollowerAttackTime;//[Offset: 0x29c, Size: 0x4] 0x7a9cd182e0
	int EnvelopeFollowerReleaseTime;//[Offset: 0x2a0, Size: 0x4] 0x7a9cd18350
	float Priority;//[Offset: 0x2a4, Size: 0x4] 0x7a9cd183c0
	float SubtitlePriority;//[Offset: 0x2a8, Size: 0x4] 0x7a9cd18430
	float PitchMultiplier;//[Offset: 0x2ac, Size: 0x4] 0x7a9cd184a0
	float LowPassFilterFrequency;//[Offset: 0x2b0, Size: 0x4] 0x7a9cd18510
	SoundAttenuation* AttenuationSettings;//[Offset: 0x2b8, Size: 0x8] 0x7a9cd42e80
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x2c0, Size: 0x2e8] 0x7a9cd42f00
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x5a8, Size: 0x8] 0x7a9cd42f80
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x5b0, Size: 0x50] 0x7a963da060
	enum AutoAttachLocationRule;//[Offset: 0x604, Size: 0x1] 0x7a9cd43100
	enum AutoAttachRotationRule;//[Offset: 0x605, Size: 0x1] 0x7a9cd41100
	enum AutoAttachScaleRule;//[Offset: 0x606, Size: 0x1] 0x7a9cd41200
	delegate OnAudioFinished;//[Offset: 0x608, Size: 0x10] 0x7a9cd41280
	delegate OnAudioPlaybackPercent;//[Offset: 0x630, Size: 0x10] 0x7a9cd41300
	delegate OnAudioSingleEnvelopeValue;//[Offset: 0x658, Size: 0x10] 0x7a9cd41380
	delegate OnAudioMultiEnvelopeValue;//[Offset: 0x680, Size: 0x10] 0x7a9cd41400
	delegate OnQueueSubtitles;//[Offset: 0x6a8, Size: 0x10] 0x7a9cd41480
	SceneComponent* AutoAttachParent;//[Offset: 0x6b8, Size: 0x8] 0x7a9cd41500
	FName AutoAttachSocketName;//[Offset: 0x6c0, Size: 0x8] 0x7a9cd18580
	void Stop();// 0xffffff8523219000 0x7a9cd33c00
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0xffffff8523219000 0x7a9cd33ce0
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0xffffff8523219000 0x7a9cd33dc0
	void SetUISound(bool bInUISound);// 0xffffff8523219000 0x7a9cd33ea0
	void SetSubmixSend(SoundSubmix* Submix, float SendLevel);// 0xffffff8523219000 0x7a9cd33f80
	void SetSound(SoundBase* NewSound);// 0xffffff8523219000 0x7a9cd34060
	void SetPitchMultiplier(float NewPitchMultiplier);// 0xffffff8523219000 0x7a9cd34140
	void SetPaused(bool bPause);// 0xffffff8523219000 0x7a9cd34220
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0xffffff8523219000 0x7a9cd34300
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0xffffff8523219000 0x7a9cd343e0
	void SetIntParameter(FName InName, int inInt);// 0xffffff8523219000 0x7a9cd344c0
	void SetFloatParameter(FName InName, float InFloat);// 0xffffff8523219000 0x7a9cd345a0
	void SetBoolParameter(FName InName, bool InBool);// 0xffffff8523219000 0x7a9cd34680
	void Play(float StartTime);// 0xffffff8523219000 0x7a9cd34760
	bool IsPlaying();// 0xffffff8523219000 0x7a9cd34840
	bool HasCookedFFTData();// 0xffffff8523219000 0x7a9cd34920
	bool HasCookedAmplitudeEnvelopeData();// 0xffffff8523219000 0x7a9cd34a00
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0xffffff8523219000 0x7a9cd34ae0
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0xffffff8523219000 0x7a9cd34bc0
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);// 0xffffff8523219000 0x7a9cd34ca0
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime);// 0xffffff8523219000 0x7a9cd34d80
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0xffffff8523219000 0x7a9cd34e60
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);// 0xffffff8523219000 0x7a9cd34f40
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0xffffff8523219000 0x7a9cd35020

--------------------------------
Class: AudioComponentParam
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7aa093d0c0
	float FloatParam;//[Offset: 0x8, Size: 0x4] 0x7aa093d130
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7aa09e3500
	int IntParam;//[Offset: 0x10, Size: 0x4] 0x7aa093d1a0
	SoundWave* SoundWaveParam;//[Offset: 0x18, Size: 0x8] 0x7aa09e3580

--------------------------------
Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4] 0x7a9ca63c70
	float Magnitude;//[Offset: 0x4, Size: 0x4] 0x7a9ca63ce0
	float NormalizedMagnitude;//[Offset: 0x8, Size: 0x4] 0x7a9ca63d50

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: AnimationSettings.DeveloperSettings.Object
	int CompressCommandletVersion;//[Offset: 0x38, Size: 0x4] 0x7a9cd14b50
	FString[] KeyEndEffectorsMatchNameArray;//[Offset: 0x40, Size: 0x10] 0x7a9cd29780
	class AnimCompress* DefaultCompressionAlgorithm;//[Offset: 0x50, Size: 0x8] 0x7a9cd29800
	byte RotationCompressionFormat;//[Offset: 0x58, Size: 0x1] 0x7a9cd29880
	byte TranslationCompressionFormat;//[Offset: 0x59, Size: 0x1] 0x7a9cd29900
	float MaxCurveError;//[Offset: 0x5c, Size: 0x4] 0x7a9cd14c30
	float AlternativeCompressionThreshold;//[Offset: 0x60, Size: 0x4] 0x7a9cd14ca0
	bool ForceRecompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x7a9cd29980
	bool bOnlyCheckForMissingSkeletalMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1] 0x7a9cd29a00
	bool bForceBelowThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1] 0x7a9cd29a80
	bool bFirstRecompressUsingCurrentOrDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1] 0x7a9cd29b00
	bool bRaiseMaxErrorToExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7a9cd29b80
	bool bTryExhaustiveSearch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1] 0x7a9cd29c00
	bool bEnableSegmenting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 0x1] 0x7a9cd29c80
	bool bEnablePerformanceLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b, Size: 0x1] 0x7a9cd29d00
	bool bStripAnimationDataOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1] 0x7a9cd29d80
	bool bTickAnimationOnSkeletalMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1] 0x7a9cd29e00

--------------------------------
Class: AnimCompress.Object
	FString Description;//[Offset: 0x28, Size: 0x10] 0x7a9cd162f0
	bool bNeedsSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7a9cd2a700
	bool bEnableSegmenting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7a9cd2a780
	uint32 IdealNumFramesPerSegment;//[Offset: 0x3c, Size: 0x4] 0x7a9cd16360
	uint32 MaxNumFramesPerSegment;//[Offset: 0x40, Size: 0x4] 0x7a9cd163d0
	byte TranslationCompressionFormat;//[Offset: 0x44, Size: 0x1] 0x7a9cd2a800
	byte RotationCompressionFormat;//[Offset: 0x45, Size: 0x1] 0x7a9cd2a880
	byte ScaleCompressionFormat;//[Offset: 0x46, Size: 0x1] 0x7a9cd2a900
	float MaxCurveError;//[Offset: 0x48, Size: 0x4] 0x7a9cd16440

--------------------------------
Class: AnimBlueprint.Blueprint.BlueprintCore.Object
	Skeleton* TargetSkeleton;//[Offset: 0xd8, Size: 0x8] 0x7a9cd29500
	AnimGroupInfo[] Groups;//[Offset: 0xe0, Size: 0x10] 0x7a9cd29600
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x7a9cd29680
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1] 0x7a9cd29700

--------------------------------
Class: AnimGroupInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7aa0939690
	LinearColor Color;//[Offset: 0x8, Size: 0x10] 0x7aa096f500

--------------------------------
Class: BlueprintGeneratedClass.Class.Struct.Field.Object
	int NumReplicatedProperties;//[Offset: 0x230, Size: 0x4] 0x7a9cbcf740
	bool bHasNativizedParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1] 0x7a9cd03c80
	bool bHasCookedComponentInstancingData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1] 0x7a9cd03d00
	DynamicBlueprintBinding*[] DynamicBindingObjects;//[Offset: 0x238, Size: 0x10] 0x7a9cd03e00
	ActorComponent*[] ComponentTemplates;//[Offset: 0x248, Size: 0x10] 0x7a9cd03f00
	TimelineTemplate*[] Timelines;//[Offset: 0x258, Size: 0x10] 0x7a9cd04000
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x268, Size: 0x8] 0x7a9cd04080
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x270, Size: 0x8] 0x7a9cd04100
	StructProperty* UberGraphFramePointerProperty;//[Offset: 0x278, Size: 0x8] 0x7a9cd04180
	Function* UberGraphFunction;//[Offset: 0x280, Size: 0x8] 0x7a9cd04200
	<FName,BlueprintCookedComponentInstancingData> CookedComponentInstancingData;//[Offset: 0x288, Size: 0x50] 0x7a963da2e0

--------------------------------
Class: DynamicBlueprintBinding.Object

--------------------------------
Class: AnimBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x318, Size: 0x10] 0x7a9cd2b200
	Skeleton* TargetSkeleton;//[Offset: 0x328, Size: 0x8] 0x7a9cd2b280
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x330, Size: 0x10] 0x7a9cd2b380
	int[] OrderedSavedPoseIndices;//[Offset: 0x348, Size: 0x10] 0x7a9cd2b400
	FName[] SyncGroupNames;//[Offset: 0x370, Size: 0x10] 0x7a9cd2b480
	ExposedValueHandler[] EvaluateGraphExposedInputs;//[Offset: 0x380, Size: 0x10] 0x7a9cd2b580

--------------------------------
Class: BakedAnimationStateMachine
	FName MachineName;//[Offset: 0x0, Size: 0x8] 0x7aa093c2c0
	int InitialState;//[Offset: 0x8, Size: 0x4] 0x7aa093c330
	BakedAnimationState[] States;//[Offset: 0x10, Size: 0x10] 0x7aa09e2a80
	AnimationTransitionBetweenStates[] Transitions;//[Offset: 0x20, Size: 0x10] 0x7aa09e2e00

--------------------------------
Class: BakedAnimationState
	FName StateName;//[Offset: 0x0, Size: 0x8] 0x7aa093c3a0
	BakedStateExitTransition[] Transitions;//[Offset: 0x8, Size: 0x10] 0x7aa09e2800
	int StateRootNodeIndex;//[Offset: 0x18, Size: 0x4] 0x7aa093c5d0
	int StartNotify;//[Offset: 0x1c, Size: 0x4] 0x7aa093c640
	int EndNotify;//[Offset: 0x20, Size: 0x4] 0x7aa093c6b0
	int FullyBlendedNotify;//[Offset: 0x24, Size: 0x4] 0x7aa093c720
	bool bIsAConduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7aa09e2880
	int EntryRuleNodeIndex;//[Offset: 0x2c, Size: 0x4] 0x7aa093c790
	int[] PlayerNodeIndices;//[Offset: 0x30, Size: 0x10] 0x7aa09e2900
	bool bAlwaysResetOnEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7aa09e2980

--------------------------------
Class: BakedStateExitTransition
	int CanTakeDelegateIndex;//[Offset: 0x0, Size: 0x4] 0x7aa093c410
	int CustomResultNodeIndex;//[Offset: 0x4, Size: 0x4] 0x7aa093c480
	int TransitionIndex;//[Offset: 0x8, Size: 0x4] 0x7aa093c4f0
	bool bDesiredTransitionReturnValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7aa09e2600
	bool bAutomaticRemainingTimeRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x7aa09e2680
	int[] PoseEvaluatorLinks;//[Offset: 0x10, Size: 0x10] 0x7aa09e2700

--------------------------------
Class: AnimationTransitionBetweenStates.AnimationStateBase
	int PreviousState;//[Offset: 0x8, Size: 0x4] 0x7aa093c870
	int NextState;//[Offset: 0xc, Size: 0x4] 0x7aa093c8e0
	float CrossfadeDuration;//[Offset: 0x10, Size: 0x4] 0x7aa093c950
	int StartNotify;//[Offset: 0x14, Size: 0x4] 0x7aa093c9c0
	int EndNotify;//[Offset: 0x18, Size: 0x4] 0x7aa093ad50
	int InterruptNotify;//[Offset: 0x1c, Size: 0x4] 0x7aa093adc0
	enum BlendMode;//[Offset: 0x20, Size: 0x1] 0x7aa09e2b80
	CurveFloat* CustomCurve;//[Offset: 0x28, Size: 0x8] 0x7aa09e2c00
	BlendProfile* BlendProfile;//[Offset: 0x30, Size: 0x8] 0x7aa09e2c80
	byte LogicType;//[Offset: 0x38, Size: 0x1] 0x7aa09e2d00

--------------------------------
Class: AnimationStateBase
	FName StateName;//[Offset: 0x0, Size: 0x8] 0x7aa093ae30

--------------------------------
Class: ExposedValueHandler
	FName BoundFunction;//[Offset: 0x0, Size: 0x8] 0x7aa093b990
	ExposedValueCopyRecord[] CopyRecords;//[Offset: 0x8, Size: 0x10] 0x7aa09e0d00
	Function* Function;//[Offset: 0x18, Size: 0x8] 0x7aa09e0d80
	StructProperty* ValueHandlerNodeProperty;//[Offset: 0x20, Size: 0x8] 0x7aa09e0e00

--------------------------------
Class: ExposedValueCopyRecord
	FName SourcePropertyName;//[Offset: 0x0, Size: 0x8] 0x7aa093ba00
	FName SourceSubPropertyName;//[Offset: 0x8, Size: 0x8] 0x7aa093ba70
	int SourceArrayIndex;//[Offset: 0x10, Size: 0x4] 0x7aa093bae0
	bool bInstanceIsTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x7aa09e0880
	enum PostCopyOperation;//[Offset: 0x15, Size: 0x1] 0x7aa09e0980
	enum CopyType;//[Offset: 0x16, Size: 0x1] 0x7aa09e0a80
	Property* DestProperty;//[Offset: 0x18, Size: 0x8] 0x7aa09e0b00
	int DestArrayIndex;//[Offset: 0x20, Size: 0x4] 0x7aa093bb50
	int Size;//[Offset: 0x24, Size: 0x4] 0x7aa0939ee0
	Property* CachedSourceProperty;//[Offset: 0x28, Size: 0x8] 0x7aa09e0b80
	Property* CachedSourceStructSubProperty;//[Offset: 0x30, Size: 0x8] 0x7aa09e0c00

--------------------------------
Class: AnimClassData.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x30, Size: 0x10] 0x7a9cd2ac00
	Skeleton* TargetSkeleton;//[Offset: 0x40, Size: 0x8] 0x7a9cd2ac80
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x48, Size: 0x10] 0x7a9cd2ad80
	int RootAnimNodeIndex;//[Offset: 0x58, Size: 0x4] 0x7a9cd14920
	int[] OrderedSavedPoseIndices;//[Offset: 0x60, Size: 0x10] 0x7a9cd2ae00
	StructProperty* RootAnimNodeProperty;//[Offset: 0x70, Size: 0x8] 0x7a9cd2ae80
	StructProperty*[] AnimNodeProperties;//[Offset: 0x78, Size: 0x10] 0x7a9cd2af80
	FName[] SyncGroupNames;//[Offset: 0x88, Size: 0x10] 0x7a9cd2b000
	ExposedValueHandler[] EvaluateGraphExposedInputs;//[Offset: 0x98, Size: 0x10] 0x7a9cd2b100

--------------------------------
Class: AnimClassInterface.Interface.Object

--------------------------------
Class: AnimComposite.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AnimTrack AnimationTrack;//[Offset: 0xa8, Size: 0x10] 0x7a9cd2a980

--------------------------------
Class: AnimCompress_Automatic.AnimCompress.Object
	float MaxEndEffectorError;//[Offset: 0x4c, Size: 0x4] 0x7a9cd16280
	bool bRunCurrentDefaultCompressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7a9cd2c600
	bool bAutoReplaceIfExistingErrorTooGreat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x7a9cd2a580
	bool bRaiseMaxErrorToExisting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1] 0x7a9cd2a600
	bool bTryExhaustiveSearch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1] 0x7a9cd2a680

--------------------------------
Class: AnimCompress_BitwiseCompressOnly.AnimCompress.Object

--------------------------------
Class: AnimCompress_LeastDestructive.AnimCompress.Object

--------------------------------
Class: AnimCompress_RemoveLinearKeys.AnimCompress.Object
	float MaxPosDiff;//[Offset: 0x4c, Size: 0x4] 0x7a9cd15f70
	float MaxAngleDiff;//[Offset: 0x50, Size: 0x4] 0x7a9cd15fe0
	float MaxScaleDiff;//[Offset: 0x54, Size: 0x4] 0x7a9cd16050
	float MaxEffectorDiff;//[Offset: 0x58, Size: 0x4] 0x7a9cd160c0
	float MinEffectorDiff;//[Offset: 0x5c, Size: 0x4] 0x7a9cd16130
	float EffectorDiffSocket;//[Offset: 0x60, Size: 0x4] 0x7a9cd161a0
	float ParentKeyScale;//[Offset: 0x64, Size: 0x4] 0x7a9cd16210
	bool bRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7a9cd2c380
	bool bActuallyFilterLinearKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x7a9cd2c400
	bool bOptimizeForForwardPlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x7a9cd2c480
	bool bUseDecompression;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x7a9cd2c500
	bool bUseMultithreading;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x7a9cd2c580

--------------------------------
Class: AnimCompress_PerTrackCompression.AnimCompress_RemoveLinearKeys.AnimCompress.Object
	float MaxZeroingThreshold;//[Offset: 0x6c, Size: 0x4] 0x7a9cd15950
	float MaxPosDiffBitwise;//[Offset: 0x70, Size: 0x4] 0x7a9cd159c0
	float MaxAngleDiffBitwise;//[Offset: 0x74, Size: 0x4] 0x7a9cd15a30
	float MaxScaleDiffBitwise;//[Offset: 0x78, Size: 0x4] 0x7a9cd15aa0
	byte[] AllowedRotationFormats;//[Offset: 0x80, Size: 0x10] 0x7a9cd2bf00
	byte[] AllowedTranslationFormats;//[Offset: 0x90, Size: 0x10] 0x7a9cd2c000
	byte[] AllowedScaleFormats;//[Offset: 0xa0, Size: 0x10] 0x7a9cd2c100
	bool bResampleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7a9cd2c180
	float ResampledFramerate;//[Offset: 0xb4, Size: 0x4] 0x7a9cd15b10
	int MinKeysForResampling;//[Offset: 0xb8, Size: 0x4] 0x7a9cd15b80
	bool bUseAdaptiveError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1] 0x7a9cd2c200
	bool bUseOverrideForEndEffectors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1] 0x7a9cd2c280
	int TrackHeightBias;//[Offset: 0xc0, Size: 0x4] 0x7a9cd15bf0
	float ParentingDivisor;//[Offset: 0xc4, Size: 0x4] 0x7a9cd15c60
	float ParentingDivisorExponent;//[Offset: 0xc8, Size: 0x4] 0x7a9cd15cd0
	bool bUseAdaptiveError2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1] 0x7a9cd2c300
	float RotationErrorSourceRatio;//[Offset: 0xd0, Size: 0x4] 0x7a9cd15d40
	float TranslationErrorSourceRatio;//[Offset: 0xd4, Size: 0x4] 0x7a9cd15db0
	float ScaleErrorSourceRatio;//[Offset: 0xd8, Size: 0x4] 0x7a9cd15e20
	float MaxErrorPerTrackRatio;//[Offset: 0xdc, Size: 0x4] 0x7a9cd15e90
	float PerturbationProbeSize;//[Offset: 0xe0, Size: 0x4] 0x7a9cd15f00

--------------------------------
Class: AnimCompress_RemoveEverySecondKey.AnimCompress.Object
	int MinKeys;//[Offset: 0x4c, Size: 0x4] 0x7a9cd158e0
	bool bStartAtSecondKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7a9cd2bd80

--------------------------------
Class: AnimCompress_RemoveTrivialKeys.AnimCompress.Object
	float MaxPosDiff;//[Offset: 0x4c, Size: 0x4] 0x7a9cd15790
	float MaxAngleDiff;//[Offset: 0x50, Size: 0x4] 0x7a9cd15800
	float MaxScaleDiff;//[Offset: 0x54, Size: 0x4] 0x7a9cd15870

--------------------------------
Class: AnimCurveCompressionCodec_CompressedRichCurve.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_UniformlySampled.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimNotifyState_DisableRootMotion.AnimNotifyState.Object

--------------------------------
Class: AnimNotifyState_TimedParticleEffect.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8] 0x7a9cd2d300
	FName SocketName;//[Offset: 0x38, Size: 0x8] 0x7a9cd17080
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc] 0x7a9cd2d380
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc] 0x7a9cd2d400
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7a9cd2d480

--------------------------------
Class: AnimNotifyState_Trail.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8] 0x7a9cd2d000
	FName FirstSocketName;//[Offset: 0x38, Size: 0x8] 0x7a9cd16f30
	FName SecondSocketName;//[Offset: 0x40, Size: 0x8] 0x7a9cd16fa0
	byte WidthScaleMode;//[Offset: 0x48, Size: 0x1] 0x7a9cd2d080
	FName WidthScaleCurve;//[Offset: 0x4c, Size: 0x8] 0x7a9cd17010
	bool bRecycleSpawnedSystems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x7a9cd2d100
	ParticleSystem* OverridePSTemplate(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xffffff8523219000 0x7a9cd33500

--------------------------------
Class: AnimNotify_PauseClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_PlayParticleEffect.AnimNotify.Object
	ParticleSystem* PSTemplate;//[Offset: 0x38, Size: 0x8] 0x7a9cd2cd80
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc] 0x7a9cd2ce00
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc] 0x7a9cd2ce80
	Vector Scale;//[Offset: 0x58, Size: 0xc] 0x7a9cd2cf00
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9cd2cf80
	FName SocketName;//[Offset: 0x84, Size: 0x8] 0x7a9cd16ec0

--------------------------------
Class: AnimNotify_PlaySound.AnimNotify.Object
	SoundBase* Sound;//[Offset: 0x38, Size: 0x8] 0x7a9cd2cc80
	float VolumeMultiplier;//[Offset: 0x40, Size: 0x4] 0x7a9cd16d70
	float PitchMultiplier;//[Offset: 0x44, Size: 0x4] 0x7a9cd16de0
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7a9cd2cd00
	FName AttachName;//[Offset: 0x4c, Size: 0x8] 0x7a9cd16e50

--------------------------------
Class: AnimNotify_ResetClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResetDynamics.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResumeClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimSet.Object
	bool bAnimRotationOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7a9cd2e100
	FName[] TrackBoneNames;//[Offset: 0x30, Size: 0x10] 0x7a9cd2e180
	AnimSetMeshLinkup[] LinkupCache;//[Offset: 0x40, Size: 0x10] 0x7a9cd2e280
	byte[] BoneUseAnimTranslation;//[Offset: 0x50, Size: 0x10] 0x7a9cd2e380
	byte[] ForceUseMeshTranslation;//[Offset: 0x60, Size: 0x10] 0x7a9cd2e480
	FName[] UseTranslationBoneNames;//[Offset: 0x70, Size: 0x10] 0x7a9cd2e500
	FName[] ForceMeshTranslationBoneNames;//[Offset: 0x80, Size: 0x10] 0x7a9cd2e580
	FName PreviewSkelMeshName;//[Offset: 0x90, Size: 0x8] 0x7a9cd16ad0
	FName BestRatioSkelMeshName;//[Offset: 0x98, Size: 0x8] 0x7a9cd16b40

--------------------------------
Class: AnimSetMeshLinkup
	int[] BoneToTrackTable;//[Offset: 0x0, Size: 0x10] 0x7aa09e2f00

--------------------------------
Class: AnimSingleNodeInstance.AnimInstance.Object
	AnimationAsset* CurrentAsset;//[Offset: 0x268, Size: 0x8] 0x7a9cd2da80
	delegate PostEvaluateAnimEvent;//[Offset: 0x270, Size: 0x10] 0x7a9cd2db00
	void StopAnim();// 0xffffff8523219000 0x7a9cd329a0
	void SetReverse(bool bInReverse);// 0xffffff8523219000 0x7a9cd32a80
	void SetPreviewCurveOverride(out const FName PoseName, float Value, bool bRemoveIfZero);// 0xffffff8523219000 0x7a9cd32b60
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);// 0xffffff8523219000 0x7a9cd32c40
	void SetPosition(float InPosition, bool bFireNotifies);// 0xffffff8523219000 0x7a9cd32d20
	void SetPlayRate(float InPlayRate);// 0xffffff8523219000 0x7a9cd32e00
	void SetPlaying(bool bIsPlaying);// 0xffffff8523219000 0x7a9cd32ee0
	void SetLooping(bool bIsLooping);// 0xffffff8523219000 0x7a9cd32fc0
	void SetBlendSpaceInput(out const Vector InBlendInput);// 0xffffff8523219000 0x7a9cd330a0
	void SetAnimationAsset(AnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);// 0xffffff8523219000 0x7a9cd33180
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);// 0xffffff8523219000 0x7a9cd33260
	float GetLength();// 0xffffff8523219000 0x7a9cd33340
	AnimationAsset* GetAnimationAsset();// 0xffffff8523219000 0x7a9cd33420

--------------------------------
Class: AnimStateMachineTypes.Object

--------------------------------
Class: ApplicationLifecycleComponent.ActorComponent.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0xf8, Size: 0x10] 0x7aa07d4b80
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0x108, Size: 0x10] 0x7aa07d4c00
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0x118, Size: 0x10] 0x7aa07d4c80
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0x128, Size: 0x10] 0x7aa07d4d00
	delegate ApplicationWillTerminateDelegate;//[Offset: 0x138, Size: 0x10] 0x7aa07d4d80
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x148, Size: 0x10] 0x7aa07d4e00
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x158, Size: 0x10] 0x7af81c6000
	delegate OnTemperatureChangeDelegate;//[Offset: 0x168, Size: 0x10] 0x7aa07d5000
	delegate OnLowPowerModeDelegate;//[Offset: 0x178, Size: 0x10] 0x7aa07d5100

--------------------------------
Class: PhysicsSettings.DeveloperSettings.Object
	float DefaultGravityZ;//[Offset: 0x38, Size: 0x4] 0x7a9c6def60
	float DefaultTerminalVelocity;//[Offset: 0x3c, Size: 0x4] 0x7a9c6defd0
	float DefaultFluidFriction;//[Offset: 0x40, Size: 0x4] 0x7a9c6df040
	int SimulateScratchMemorySize;//[Offset: 0x44, Size: 0x4] 0x7a9c6df0b0
	int RagdollAggregateThreshold;//[Offset: 0x48, Size: 0x4] 0x7a9c6df120
	float TriangleMeshTriangleMinAreaThreshold;//[Offset: 0x4c, Size: 0x4] 0x7a9c6df190
	bool bEnableShapeSharing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7a9c7d9000
	bool bEnablePCM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x7a9c7d9080
	bool bEnableStabilization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x7a9c7d9100
	bool bWarnMissingLocks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1] 0x7a9c7d9180
	bool bEnable2DPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7a9c7d9200
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0x58, Size: 0x34] 0x7a9c7d9280
	byte LockedAxis;//[Offset: 0x8c, Size: 0x1] 0x7a9c7d9300
	byte DefaultDegreesOfFreedom;//[Offset: 0x8d, Size: 0x1] 0x7a9c7d9380
	float BounceThresholdVelocity;//[Offset: 0x90, Size: 0x4] 0x7a9c6df200
	byte FrictionCombineMode;//[Offset: 0x94, Size: 0x1] 0x7a9c7d9400
	byte RestitutionCombineMode;//[Offset: 0x95, Size: 0x1] 0x7a9c7d9480
	float MaxAngularVelocity;//[Offset: 0x98, Size: 0x4] 0x7a9c6df270
	float MaxDepenetrationVelocity;//[Offset: 0x9c, Size: 0x4] 0x7a9c6df2e0
	float ContactOffsetMultiplier;//[Offset: 0xa0, Size: 0x4] 0x7a9c6df350
	float MinContactOffset;//[Offset: 0xa4, Size: 0x4] 0x7a9c6df3c0
	float MaxContactOffset;//[Offset: 0xa8, Size: 0x4] 0x7a9c6df430
	bool bSimulateSkeletalMeshOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1] 0x7a9c7d7400
	byte DefaultShapeComplexity;//[Offset: 0xad, Size: 0x1] 0x7a9c7d7480
	bool bDefaultHasComplexCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae, Size: 0x1] 0x7a9c7d7580
	bool bSuppressFaceRemapTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf, Size: 0x1] 0x7a9c7d7600
	bool bSupportUVFromHitResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x7a9c7d7680
	bool bDisableActiveActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1] 0x7a9c7d7700
	bool bDisableKinematicStaticPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1] 0x7a9c7d7780
	bool bDisableKinematicKinematicPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3, Size: 0x1] 0x7a9c7d7800
	bool bDisableCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1] 0x7a9c7d7880
	bool bEnableEnhancedDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1] 0x7a9c7d7900
	float MaxPhysicsDeltaTime;//[Offset: 0xb8, Size: 0x4] 0x7a9c6df4a0
	bool bSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1] 0x7a9c7d7980
	bool bSubsteppingAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1] 0x7a9c7d7a00
	float MaxSubstepDeltaTime;//[Offset: 0xc0, Size: 0x4] 0x7a9c6df510
	int MaxSubsteps;//[Offset: 0xc4, Size: 0x4] 0x7a9c6dd8a0
	float SyncSceneSmoothingFactor;//[Offset: 0xc8, Size: 0x4] 0x7a9c6dd910
	float InitialAverageFrameRate;//[Offset: 0xcc, Size: 0x4] 0x7a9c6dd980
	int PhysXTreeRebuildRate;//[Offset: 0xd0, Size: 0x4] 0x7a9c6dd9f0
	PhysicalSurfaceName[] PhysicalSurfaces;//[Offset: 0xd8, Size: 0x10] 0x7a9c7d7b00
	BroadphaseSettings DefaultBroadphaseSettings;//[Offset: 0xe8, Size: 0x24] 0x7a9c7d7b80

--------------------------------
Class: RigidBodyErrorCorrection
	float PingExtrapolation;//[Offset: 0x0, Size: 0x4] 0x7a9ca07a20
	float PingLimit;//[Offset: 0x4, Size: 0x4] 0x7a9ca07a90
	float ErrorPerLinearDifference;//[Offset: 0x8, Size: 0x4] 0x7a9ca07b00
	float ErrorPerAngularDifference;//[Offset: 0xc, Size: 0x4] 0x7a9ca07b70
	float MaxRestoredStateError;//[Offset: 0x10, Size: 0x4] 0x7a9ca07be0
	float MaxLinearHardSnapDistance;//[Offset: 0x14, Size: 0x4] 0x7a9ca07c50
	float PositionLerp;//[Offset: 0x18, Size: 0x4] 0x7a9ca07cc0
	float AngleLerp;//[Offset: 0x1c, Size: 0x4] 0x7a9ca07d30
	float LinearVelocityCoefficient;//[Offset: 0x20, Size: 0x4] 0x7a9ca07da0
	float AngularVelocityCoefficient;//[Offset: 0x24, Size: 0x4] 0x7a9ca07e10
	float ErrorAccumulationSeconds;//[Offset: 0x28, Size: 0x4] 0x7a9ca07e80
	float ErrorAccumulationDistanceSq;//[Offset: 0x2c, Size: 0x4] 0x7a9ca07ef0
	float ErrorAccumulationSimilarity;//[Offset: 0x30, Size: 0x4] 0x7a9ca07f60

--------------------------------
Class: PhysicalSurfaceName
	byte Type;//[Offset: 0x0, Size: 0x1] 0x7a9ca59180
	FName Name;//[Offset: 0x4, Size: 0x8] 0x7a9ca0dc90

--------------------------------
Class: CollisionProfile.DeveloperSettings.Object
	CollisionResponseTemplate[] Profiles;//[Offset: 0x38, Size: 0x10] 0x7a9cd90b80
	CustomChannelSetup[] DefaultChannelResponses;//[Offset: 0x48, Size: 0x10] 0x7a9cd90c80
	CustomProfile[] EditProfiles;//[Offset: 0x58, Size: 0x10] 0x7a9cd90d80
	Redirector[] ProfileRedirects;//[Offset: 0x68, Size: 0x10] 0x7a9cd90e80
	Redirector[] CollisionChannelRedirects;//[Offset: 0x78, Size: 0x10] 0x7a9cd90f80

--------------------------------
Class: CollisionResponseTemplate
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7a9ca02c40
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1] 0x7a9ca12980
	FName ObjectTypeName;//[Offset: 0xc, Size: 0x8] 0x7a9ca02cb0
	ResponseChannel[] CustomResponses;//[Offset: 0x18, Size: 0x10] 0x7a9ca12a80
	FString HelpMessage;//[Offset: 0x28, Size: 0x10] 0x7a9ca02d20
	bool bCanModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7a9ca12b00

--------------------------------
Class: CustomChannelSetup
	byte Channel;//[Offset: 0x0, Size: 0x1] 0x7a9ca12b80
	FName Name;//[Offset: 0x4, Size: 0x8] 0x7a9ca02d90
	byte DefaultResponse;//[Offset: 0xc, Size: 0x1] 0x7a9ca12c00
	bool bTraceType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x7a9ca12c80
	bool bStaticObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1] 0x7a9ca12d00

--------------------------------
Class: CustomProfile
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7a9ca02e00
	ResponseChannel[] CustomResponses;//[Offset: 0x8, Size: 0x10] 0x7a9ca12e00

--------------------------------
Class: Redirector
	FName OldName;//[Offset: 0x0, Size: 0x8] 0x7a9ca058e0
	FName NewName;//[Offset: 0x8, Size: 0x8] 0x7a9ca05950

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x578, Size: 0x4] 0x7a9cd2d880
	float ArrowSize;//[Offset: 0x57c, Size: 0x4] 0x7a9cd18120
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1] 0x7a9cd2d900
	float ScreenSize;//[Offset: 0x584, Size: 0x4] 0x7a9cd18190
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x588, Size: 0x1] 0x7a9cd2d980
	void SetArrowColor(LinearColor NewColor);// 0xffffff8523219000 0x7a9cd328c0

--------------------------------
Class: AssetExportTask.Object
	Object* Object;//[Offset: 0x28, Size: 0x8] 0x7a9cd2f380
	Exporter* Exporter;//[Offset: 0x30, Size: 0x8] 0x7a9cd2f400
	FString Filename;//[Offset: 0x38, Size: 0x10] 0x7a9cd18040
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7a9cd2f480
	bool bReplaceIdentical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x7a9cd2f500
	bool bPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x7a9cd2f580
	bool bAutomated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1] 0x7a9cd2f600
	bool bUseFileArchive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x7a9cd2f680
	bool bWriteEmptyFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x7a9cd2f700
	Object*[] IgnoreObjectList;//[Offset: 0x50, Size: 0x10] 0x7a9cd2d700
	Object* Options;//[Offset: 0x60, Size: 0x8] 0x7a9cd2d780
	FString[] Errors;//[Offset: 0x68, Size: 0x10] 0x7a9cd2d800

--------------------------------
Class: Exporter.Object
	class Object* SupportedClass;//[Offset: 0x28, Size: 0x8] 0x7a9cd9fb00
	Object* ExportRootScope;//[Offset: 0x30, Size: 0x8] 0x7a9cd9fb80
	FString[] FormatExtension;//[Offset: 0x38, Size: 0x10] 0x7a9cd9fc00
	FString[] FormatDescription;//[Offset: 0x48, Size: 0x10] 0x7a9cd9fc80
	int PreferredFormatIndex;//[Offset: 0x58, Size: 0x4] 0x7a9cd7d830
	int TextIndent;//[Offset: 0x5c, Size: 0x4] 0x7a9cd7bbc0
	bool bText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7a9cd9fd00
	bool bSelectedOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x7a9cd9fd80
	bool bForceFileOperations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x7a9cd9fe00
	AssetExportTask* ExportTask;//[Offset: 0x68, Size: 0x8] 0x7a9cd9fe80
	bool ScriptRunAssetExportTask(AssetExportTask* Task);// 0xffffff8523219000 0x7a9cd8bbc0
	bool RunAssetExportTasks(out const AssetExportTask*[] ExportTasks);// 0xffffff8523219000 0x7a9cd8bca0
	bool RunAssetExportTask(AssetExportTask* Task);// 0xffffff8523219000 0x7a9cd8bd80

--------------------------------
Class: AssetImportData.Object

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x2b0, Size: 0x10] 0x7a9cd2ed80
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x7a9cd2ee00
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1] 0x7a9cd2ee80
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2, Size: 0x1] 0x7a9cd2ef00
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c3, Size: 0x1] 0x7a9cd2ef80
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1] 0x7a9cd2f000
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 0x1] 0x7a9cd2f080
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c6, Size: 0x1] 0x7a9cd2f100
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c7, Size: 0x1] 0x7a9cd2f180
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x7a9cd2f200
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1] 0x7a9cd2f280
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca, Size: 0x1] 0x7a9cd2f300
	int NumberOfSpawnedNotifications;//[Offset: 0x2cc, Size: 0x4] 0x7a9cd17fd0

--------------------------------
Class: AssetManagerSettings.DeveloperSettings.Object
	PrimaryAssetTypeInfo[] PrimaryAssetTypesToScan;//[Offset: 0x38, Size: 0x10] 0x7a9cd2fd00
	DirectoryPath[] DirectoriesToExclude;//[Offset: 0x48, Size: 0x10] 0x7a9cd2fe00
	PrimaryAssetRulesOverride[] PrimaryAssetRules;//[Offset: 0x58, Size: 0x10] 0x7a9cd2ff00
	PrimaryAssetRulesCustomOverride[] CustomPrimaryAssetRules;//[Offset: 0x68, Size: 0x10] 0x7a9cd2e780
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x7a9cd2e800
	bool bShouldManagerDetermineTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x7a9cd2e880
	bool bShouldGuessTypeAndNameInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x7a9cd2e900
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1] 0x7a9cd2e980
	AssetManagerRedirect[] PrimaryAssetIdRedirects;//[Offset: 0x80, Size: 0x10] 0x7a9cd2ea80
	AssetManagerRedirect[] PrimaryAssetTypeRedirects;//[Offset: 0x90, Size: 0x10] 0x7a9cd2eb80
	AssetManagerRedirect[] AssetPathRedirects;//[Offset: 0xa0, Size: 0x10] 0x7a9cd2ec80
	<FName> MetaDataTagsForAssetRegistry;//[Offset: 0xb0, Size: 0x50] 0x7a963da100

--------------------------------
Class: PrimaryAssetTypeInfo
	FName PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x7aa093d830
	class Object* AssetBaseClass;//[Offset: 0x8, Size: 0x28] 0x7aa09e3980
	class Object* AssetBaseClassLoaded;//[Offset: 0x30, Size: 0x8] 0x7aa09e3a00
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7aa09e3a80
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7aa09e3b00
	DirectoryPath[] Directories;//[Offset: 0x40, Size: 0x10] 0x7aa09e3c00
	SoftObjectPath[] SpecificAssets;//[Offset: 0x50, Size: 0x10] 0x7aa09e3d00
	PrimaryAssetRules Rules;//[Offset: 0x60, Size: 0x10] 0x7aa09e3d80
	FString[] AssetScanPaths;//[Offset: 0x70, Size: 0x10] 0x7aa09e3e00
	bool bIsDynamicAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x7aa09e3e80
	int NumberOfAssets;//[Offset: 0x84, Size: 0x4] 0x7aa093bc30

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10] 0x7aa0938820

--------------------------------
Class: PrimaryAssetRules
	int Priority;//[Offset: 0x0, Size: 0x4] 0x7aa093bdf0
	bool bApplyRecursively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7aa09e4100
	int ChunkId;//[Offset: 0x8, Size: 0x4] 0x7aa093be60
	enum CookRule;//[Offset: 0xc, Size: 0x1] 0x7aa09e4200

--------------------------------
Class: PrimaryAssetRulesOverride
	PrimaryAssetId PrimaryAssetId;//[Offset: 0x0, Size: 0x10] 0x7aa09e3f00
	PrimaryAssetRules Rules;//[Offset: 0x10, Size: 0x10] 0x7aa09e3f80

--------------------------------
Class: PrimaryAssetId
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x7af81c6080
	FName PrimaryAssetName;//[Offset: 0x8, Size: 0x8] 0x7af958fc10

--------------------------------
Class: PrimaryAssetType
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7af958fc80

--------------------------------
Class: PrimaryAssetRulesCustomOverride
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x7aa09e4000
	DirectoryPath FilterDirectory;//[Offset: 0x8, Size: 0x10] 0x7aa09e4080
	FString FilterString;//[Offset: 0x18, Size: 0x10] 0x7aa093bd80
	PrimaryAssetRules Rules;//[Offset: 0x28, Size: 0x10] 0x7aa09e2180

--------------------------------
Class: AssetManagerRedirect
	FString Old;//[Offset: 0x0, Size: 0x10] 0x7aa093bca0
	FString New;//[Offset: 0x10, Size: 0x10] 0x7aa093bd10

--------------------------------
Class: AssetMappingTable.Object
	AssetMapping[] MappedAssets;//[Offset: 0x28, Size: 0x10] 0x7a9cd2fc00

--------------------------------
Class: AssetMapping
	AnimationAsset* SourceAsset;//[Offset: 0x0, Size: 0x8] 0x7aa09e3880
	AnimationAsset* TargetAsset;//[Offset: 0x8, Size: 0x8] 0x7aa09e3900

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0xffffff8523219000 0x7a9cb47a20

--------------------------------
Class: AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: AsyncActionLoadPrimaryAsset.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x7a9cd2f900
	AsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0xffffff8523219000 0x7a9cd327e0

--------------------------------
Class: AsyncActionLoadPrimaryAssetClass.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x7a9cd40f80
	AsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0xffffff8523219000 0x7a9cd32700

--------------------------------
Class: AsyncActionLoadPrimaryAssetList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x7a9cd40c80
	AsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0xffffff8523219000 0x7a9cd32620

--------------------------------
Class: AsyncActionLoadPrimaryAssetClassList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x7a9cd40980
	AsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0xffffff8523219000 0x7a9cd32540

--------------------------------
Class: AsyncActionChangePrimaryAssetBundles.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x7a9cd40400
	AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] AddBundles, out const FName[] RemoveBundles);// 0xffffff8523219000 0x7a9cd32380
	AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(Object* WorldContextObject, out const FName[] NewBundles, out const FName[] OldBundles);// 0xffffff8523219000 0x7a9cd32460

--------------------------------
Class: AtmosphericFog.Info.Actor.Object
	AtmosphericFogComponent* AtmosphericFogComponent;//[Offset: 0x330, Size: 0x8] 0x7a9cd40380

--------------------------------
Class: AtmosphericFogComponent.SceneComponent.ActorComponent.Object
	float SunMultiplier;//[Offset: 0x258, Size: 0x4] 0x7a9cd18eb0
	float FogMultiplier;//[Offset: 0x25c, Size: 0x4] 0x7a9cd18f20
	float DensityMultiplier;//[Offset: 0x260, Size: 0x4] 0x7a9cd18f90
	float DensityOffset;//[Offset: 0x264, Size: 0x4] 0x7a9cd19000
	float DistanceScale;//[Offset: 0x268, Size: 0x4] 0x7a9cd17390
	float AltitudeScale;//[Offset: 0x26c, Size: 0x4] 0x7a9cd17400
	float DistanceOffset;//[Offset: 0x270, Size: 0x4] 0x7a9cd17470
	float GroundOffset;//[Offset: 0x274, Size: 0x4] 0x7a9cd174e0
	float StartDistance;//[Offset: 0x278, Size: 0x4] 0x7a9cd17550
	float SunDiscScale;//[Offset: 0x27c, Size: 0x4] 0x7a9cd175c0
	float DefaultBrightness;//[Offset: 0x280, Size: 0x4] 0x7a9cd17630
	Color DefaultLightColor;//[Offset: 0x284, Size: 0x4] 0x7a9cd41f80
	bool bDisableSunDisk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1] 0x7a9cd42000
	bool bDisableGroundScattering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1] 0x7a9cd42100
	AtmospherePrecomputeParameters PrecomputeParams;//[Offset: 0x28c, Size: 0x2c] 0x7a9cd40080
	Texture2D* TransmittanceTexture;//[Offset: 0x2b8, Size: 0x8] 0x7a9cd40100
	Texture2D* IrradianceTexture;//[Offset: 0x2c0, Size: 0x8] 0x7a9cd40180
	void StartPrecompute();// 0xffffff8523219000 0x7a9cd35100
	void SetSunMultiplier(float NewSunMultiplier);// 0xffffff8523219000 0x7a9cd351e0
	void SetStartDistance(float NewStartDistance);// 0xffffff8523219000 0x7a9cd352c0
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);// 0xffffff8523219000 0x7a9cd353a0
	void SetFogMultiplier(float NewFogMultiplier);// 0xffffff8523219000 0x7a9cd35480
	void SetDistanceScale(float NewDistanceScale);// 0xffffff8523219000 0x7a9cd35560
	void SetDistanceOffset(float NewDistanceOffset);// 0xffffff8523219000 0x7a9cd35640
	void SetDensityOffset(float NewDensityOffset);// 0xffffff8523219000 0x7a9cd31d60
	void SetDensityMultiplier(float NewDensityMultiplier);// 0xffffff8523219000 0x7a9cd31e40
	void SetDefaultLightColor(LinearColor NewLightColor);// 0xffffff8523219000 0x7a9cd31f20
	void SetDefaultBrightness(float NewBrightness);// 0xffffff8523219000 0x7a9cd32000
	void SetAltitudeScale(float NewAltitudeScale);// 0xffffff8523219000 0x7a9cd320e0
	void DisableSunDisk(bool NewSunDisk);// 0xffffff8523219000 0x7a9cd321c0
	void DisableGroundScattering(bool NewGroundScattering);// 0xffffff8523219000 0x7a9cd322a0

--------------------------------
Class: AtmospherePrecomputeParameters
	float DensityHeight;//[Offset: 0x0, Size: 0x4] 0x7aa093d360
	float DecayHeight;//[Offset: 0x4, Size: 0x4] 0x7aa093d3d0
	int MaxScatteringOrder;//[Offset: 0x8, Size: 0x4] 0x7aa093d440
	int TransmittanceTexWidth;//[Offset: 0xc, Size: 0x4] 0x7aa093d4b0
	int TransmittanceTexHeight;//[Offset: 0x10, Size: 0x4] 0x7aa093d520
	int IrradianceTexWidth;//[Offset: 0x14, Size: 0x4] 0x7aa093d590
	int IrradianceTexHeight;//[Offset: 0x18, Size: 0x4] 0x7aa093d600
	int InscatterAltitudeSampleNum;//[Offset: 0x1c, Size: 0x4] 0x7aa093d670
	int InscatterMuNum;//[Offset: 0x20, Size: 0x4] 0x7aa093d6e0
	int InscatterMuSNum;//[Offset: 0x24, Size: 0x4] 0x7aa093d750
	int InscatterNuNum;//[Offset: 0x28, Size: 0x4] 0x7aa093d7c0

--------------------------------
Class: AudioSettings.DeveloperSettings.Object
	SoftObjectPath DefaultSoundClassName;//[Offset: 0x38, Size: 0x18] 0x7a9cd44180
	SoftObjectPath DefaultMediaSoundClassName;//[Offset: 0x50, Size: 0x18] 0x7a9cd44200
	SoftObjectPath DefaultSoundConcurrencyName;//[Offset: 0x68, Size: 0x18] 0x7a9cd42200
	SoftObjectPath DefaultBaseSoundMix;//[Offset: 0x80, Size: 0x18] 0x7a9cd42280
	SoftObjectPath VoiPSoundClass;//[Offset: 0x98, Size: 0x18] 0x7a9cd42300
	enum VoiPSampleRate;//[Offset: 0xb0, Size: 0x4] 0x7a9cd42380
	float VoipBufferingDelay;//[Offset: 0xb4, Size: 0x4] 0x7a9cd198c0
	float DefaultReverbSendLevel;//[Offset: 0xb8, Size: 0x4] 0x7a9cd19930
	int MaximumConcurrentStreams;//[Offset: 0xbc, Size: 0x4] 0x7a9cd199a0
	float GlobalMinPitchScale;//[Offset: 0xc0, Size: 0x4] 0x7a9cd19a10
	float GlobalMaxPitchScale;//[Offset: 0xc4, Size: 0x4] 0x7a9cd19a80
	AudioQualitySettings[] QualityLevels;//[Offset: 0xc8, Size: 0x10] 0x7a9cd42480
	bool bAllowVirtualizedSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x7a9cd42500
	bool bDisableMasterEQ;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1] 0x7a9cd42580
	bool bAllowCenterChannel3DPanning;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd8, Size: 0x1] 0x7a9cd42600
	uint32 MaxWaveInstances;//[Offset: 0xdc, Size: 0x4] 0x7a9cd19af0
	uint32 NumStoppingSources;//[Offset: 0xe0, Size: 0x4] 0x7a9cd19b60
	enum PanningMethod;//[Offset: 0xe4, Size: 0x1] 0x7a9cd42680
	enum MonoChannelUpmixMethod;//[Offset: 0xe5, Size: 0x1] 0x7a9cd42700
	FString DialogueFilenameFormat;//[Offset: 0xe8, Size: 0x10] 0x7a9cd19cb0

--------------------------------
Class: AudioQualitySettings
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x7aa093cfe0
	int MaxChannels;//[Offset: 0x18, Size: 0x4] 0x7aa093d050

--------------------------------
Class: AudioVolume.Volume.Brush.Actor.Object
	float Priority;//[Offset: 0x368, Size: 0x4] 0x7a9cd19770
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36c, Size: 0x1] 0x7a9cd43e80
	ReverbSettings Settings;//[Offset: 0x370, Size: 0x20] 0x7a9cd43f00
	InteriorSettings AmbientZoneSettings;//[Offset: 0x390, Size: 0x24] 0x7a9cd43f80
	void SetReverbSettings(out const ReverbSettings NewReverbSettings);// 0xffffff8523219000 0x7a9cd37160
	void SetPriority(float NewPriority);// 0xffffff8523219000 0x7a9cd37240
	void SetInteriorSettings(out const InteriorSettings NewInteriorSettings);// 0xffffff8523219000 0x7a9cd37320
	void SetEnabled(bool bNewEnabled);// 0xffffff8523219000 0x7a9cd33a40
	void OnRep_bEnabled();// 0xffffff8523219000 0x7a9cd33b20

--------------------------------
Class: AutomationTestSettings.Object
	FString[] EngineTestModules;//[Offset: 0x28, Size: 0x10] 0x7a9cd43500
	FString[] EditorTestModules;//[Offset: 0x38, Size: 0x10] 0x7a9cd43580
	SoftObjectPath AutomationTestmap;//[Offset: 0x48, Size: 0x18] 0x7a9cd43600
	EditorMapPerformanceTestDefinition[] EditorPerformanceTestMaps;//[Offset: 0x60, Size: 0x10] 0x7a9cd43700
	SoftObjectPath[] AssetsToOpen;//[Offset: 0x70, Size: 0x10] 0x7a9cd43800
	BuildPromotionTestSettings BuildPromotionTest;//[Offset: 0x80, Size: 0x1f0] 0x7a9cd43880
	MaterialEditorPromotionSettings MaterialEditorPromotionTest;//[Offset: 0x270, Size: 0x30] 0x7a9cd43900
	ParticleEditorPromotionSettings ParticleEditorPromotionTest;//[Offset: 0x2a0, Size: 0x10] 0x7a9cd43980
	BlueprintEditorPromotionSettings BlueprintEditorPromotionTest;//[Offset: 0x2b0, Size: 0x30] 0x7a9cd43a00
	FString[] TestLevelFolders;//[Offset: 0x2e0, Size: 0x10] 0x7a9cd43a80
	ExternalToolDefinition[] ExternalTools;//[Offset: 0x2f0, Size: 0x10] 0x7a9cd43b80
	EditorImportExportTestDefinition[] ImportExportTestDefinitions;//[Offset: 0x300, Size: 0x10] 0x7a9cd43c80
	LaunchOnTestSettings[] LaunchOnSettings;//[Offset: 0x310, Size: 0x10] 0x7a9cd43d80
	IntPoint DefaultScreenshotResolution;//[Offset: 0x320, Size: 0x8] 0x7a9cd43e00

--------------------------------
Class: EditorMapPerformanceTestDefinition
	SoftObjectPath PerformanceTestmap;//[Offset: 0x0, Size: 0x18] 0x7aa09e3200
	int TestTimer;//[Offset: 0x18, Size: 0x4] 0x7aa093ca30

--------------------------------
Class: BuildPromotionTestSettings
	FilePath DefaultStaticMeshAsset;//[Offset: 0x0, Size: 0x10] 0x7aa09e4580
	BuildPromotionImportWorkflowSettings ImportWorkflow;//[Offset: 0x10, Size: 0x150] 0x7aa09e4d80
	BuildPromotionOpenAssetSettings OpenAssets;//[Offset: 0x160, Size: 0x60] 0x7aa09e5100
	BuildPromotionNewProjectSettings NewProjectSettings;//[Offset: 0x1c0, Size: 0x20] 0x7aa09e5200
	FilePath SourceControlMaterial;//[Offset: 0x1e0, Size: 0x10] 0x7aa09e5280

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10] 0x7aa093caa0

--------------------------------
Class: BuildPromotionImportWorkflowSettings
	EditorImportWorkflowDefinition Diffuse;//[Offset: 0x0, Size: 0x20] 0x7aa09e4600
	EditorImportWorkflowDefinition Normal;//[Offset: 0x20, Size: 0x20] 0x7aa09e4680
	EditorImportWorkflowDefinition StaticMesh;//[Offset: 0x40, Size: 0x20] 0x7aa09e4700
	EditorImportWorkflowDefinition ReimportStaticMesh;//[Offset: 0x60, Size: 0x20] 0x7aa09e4780
	EditorImportWorkflowDefinition BlendShapeMesh;//[Offset: 0x80, Size: 0x20] 0x7aa09e4800
	EditorImportWorkflowDefinition MorphMesh;//[Offset: 0xa0, Size: 0x20] 0x7aa09e4880
	EditorImportWorkflowDefinition SkeletalMesh;//[Offset: 0xc0, Size: 0x20] 0x7aa09e4900
	EditorImportWorkflowDefinition Animation;//[Offset: 0xe0, Size: 0x20] 0x7aa09e4980
	EditorImportWorkflowDefinition Sound;//[Offset: 0x100, Size: 0x20] 0x7aa09e4a00
	EditorImportWorkflowDefinition SurroundSound;//[Offset: 0x120, Size: 0x20] 0x7aa09e4a80
	EditorImportWorkflowDefinition[] OtherAssetsToImport;//[Offset: 0x140, Size: 0x10] 0x7aa09e4d00

--------------------------------
Class: EditorImportWorkflowDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10] 0x7aa09e4b00
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x10, Size: 0x10] 0x7aa09e4c00

--------------------------------
Class: ImportFactorySettingValues
	FString SettingName;//[Offset: 0x0, Size: 0x10] 0x7aa093e5c0
	FString Value;//[Offset: 0x10, Size: 0x10] 0x7aa093e630

--------------------------------
Class: BuildPromotionOpenAssetSettings
	FilePath BlueprintAsset;//[Offset: 0x0, Size: 0x10] 0x7aa09e4e00
	FilePath MaterialAsset;//[Offset: 0x10, Size: 0x10] 0x7aa09e4e80
	FilePath ParticleSystemAsset;//[Offset: 0x20, Size: 0x10] 0x7aa09e4f00
	FilePath SkeletalMeshAsset;//[Offset: 0x30, Size: 0x10] 0x7aa09e4f80
	FilePath StaticMeshAsset;//[Offset: 0x40, Size: 0x10] 0x7aa09e5000
	FilePath TextureAsset;//[Offset: 0x50, Size: 0x10] 0x7aa09e5080

--------------------------------
Class: BuildPromotionNewProjectSettings
	DirectoryPath NewProjectFolderOverride;//[Offset: 0x0, Size: 0x10] 0x7aa09e5180
	FString NewProjectNameOverride;//[Offset: 0x10, Size: 0x10] 0x7aa093e6a0

--------------------------------
Class: MaterialEditorPromotionSettings
	FilePath DefaultMaterialAsset;//[Offset: 0x0, Size: 0x10] 0x7aa09e6300
	FilePath DefaultDiffuseTexture;//[Offset: 0x10, Size: 0x10] 0x7aa09e4280
	FilePath DefaultNormalTexture;//[Offset: 0x20, Size: 0x10] 0x7aa09e4300

--------------------------------
Class: ParticleEditorPromotionSettings
	FilePath DefaultParticleAsset;//[Offset: 0x0, Size: 0x10] 0x7aa09e4380

--------------------------------
Class: BlueprintEditorPromotionSettings
	FilePath FirstMeshPath;//[Offset: 0x0, Size: 0x10] 0x7aa09e4400
	FilePath SecondMeshPath;//[Offset: 0x10, Size: 0x10] 0x7aa09e4480
	FilePath DefaultParticleAsset;//[Offset: 0x20, Size: 0x10] 0x7aa09e4500

--------------------------------
Class: ExternalToolDefinition
	FString ToolName;//[Offset: 0x0, Size: 0x10] 0x7aa093e400
	FilePath ExecutablePath;//[Offset: 0x10, Size: 0x10] 0x7aa09e5f80
	FString CommandLineOptions;//[Offset: 0x20, Size: 0x10] 0x7aa093e470
	DirectoryPath WorkingDirectory;//[Offset: 0x30, Size: 0x10] 0x7aa09e6000
	FString ScriptExtension;//[Offset: 0x40, Size: 0x10] 0x7aa093e4e0
	DirectoryPath ScriptDirectory;//[Offset: 0x50, Size: 0x10] 0x7aa09e6080

--------------------------------
Class: EditorImportExportTestDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10] 0x7aa09e6100
	FString ExportFileExtension;//[Offset: 0x10, Size: 0x10] 0x7aa093e550
	bool bSkipExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7aa09e6180
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x28, Size: 0x10] 0x7aa09e6280

--------------------------------
Class: LaunchOnTestSettings
	FilePath LaunchOnTestmap;//[Offset: 0x0, Size: 0x10] 0x7aa09e3280
	FString DeviceID;//[Offset: 0x10, Size: 0x10] 0x7aa093cb10

--------------------------------
Class: BlendableInterface.Interface.Object

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: BlueprintMapLibrary.BlueprintFunctionLibrary.Object
	void SetMapPropertyByName(Object* Object, FName PropertyName, out const <int,int> Value);// 0xffffff8523219000 0x7a9cd36360
	void Map_Values(out const <int,int> TargetMap, out int[] Values);// 0xffffff8523219000 0x7a9cd36440
	bool Map_Remove(out const <int,int> TargetMap, out const int Key);// 0xffffff8523219000 0x7a9cd36520
	int Map_Length(out const <int,int> TargetMap);// 0xffffff8523219000 0x7a9cd36600
	void Map_Keys(out const <int,int> TargetMap, out int[] Keys);// 0xffffff8523219000 0x7a9cd366e0
	bool Map_Find(out const <int,int> TargetMap, out const int Key, out int Value);// 0xffffff8523219000 0x7a9cd367c0
	bool Map_Contains(out const <int,int> TargetMap, out const int Key);// 0xffffff8523219000 0x7a9cd368a0
	void Map_Clear(out const <int,int> TargetMap);// 0xffffff8523219000 0x7a9cd36980
	void Map_Add(out const <int,int> TargetMap, out const int Key, out const int Value);// 0xffffff8523219000 0x7a9cd36a60

--------------------------------
Class: BlueprintPathsLibrary.BlueprintFunctionLibrary.Object
	FString VideoCaptureDir();// 0xffffff8523219000 0x7a9cd3c8e0
	void ValidatePath(FString InPath, out bool bDidSucceed, out FText OutReason);// 0xffffff8523219000 0x7a9cd3c9c0
	void Split(FString InPath, out FString PathPart, out FString FilenamePart, out FString ExtensionPart);// 0xffffff8523219000 0x7a9cd390e0
	FString SourceConfigDir();// 0xffffff8523219000 0x7a9cd391c0
	bool ShouldSaveToUserDir();// 0xffffff8523219000 0x7a9cd392a0
	FString ShaderWorkingDir();// 0xffffff8523219000 0x7a9cd39380
	void SetProjectFilePath(FString NewGameProjectFilePath);// 0xffffff8523219000 0x7a9cd39460
	FString SetExtension(FString InPath, FString InNewExtension);// 0xffffff8523219000 0x7a9cd39540
	FString ScreenShotDir();// 0xffffff8523219000 0x7a9cd39620
	FString SandboxesDir();// 0xffffff8523219000 0x7a9cd39700
	FString RootDir();// 0xffffff8523219000 0x7a9cd397e0
	void RemoveDuplicateSlashes(FString InPath, out FString OutPath);// 0xffffff8523219000 0x7a9cd398c0
	FString ProjectUserDir();// 0xffffff8523219000 0x7a9cd399a0
	FString ProjectSavedDir();// 0xffffff8523219000 0x7a9cd39a80
	FString ProjectPluginsDir();// 0xffffff8523219000 0x7a9cd39b60
	FString ProjectPersistentDownloadDir();// 0xffffff8523219000 0x7a9cd39c40
	FString ProjectModsDir();// 0xffffff8523219000 0x7a9cd39d20
	FString ProjectLogDir();// 0xffffff8523219000 0x7a9cd39e00
	FString ProjectIntermediateDir();// 0xffffff8523219000 0x7a9cd39ee0
	FString ProjectDir();// 0xffffff8523219000 0x7a9cd39fc0
	FString ProjectContentDir();// 0xffffff8523219000 0x7a9cd3a0a0
	FString ProjectConfigDir();// 0xffffff8523219000 0x7a9cd3a180
	FString ProfilingDir();// 0xffffff8523219000 0x7a9cd3a260
	void NormalizeFilename(FString InPath, out FString OutPath);// 0xffffff8523219000 0x7a9cd3a340
	void NormalizeDirectoryName(FString InPath, out FString OutPath);// 0xffffff8523219000 0x7a9cd3a420
	FString MakeValidFileName(FString inString, FString InReplacementChar);// 0xffffff8523219000 0x7a9cd3a500
	void MakeStandardFilename(FString InPath, out FString OutPath);// 0xffffff8523219000 0x7a9cd3a5e0
	void MakePlatformFilename(FString InPath, out FString OutPath);// 0xffffff8523219000 0x7a9cd3a6c0
	bool MakePathRelativeTo(FString InPath, FString InRelativeTo, out FString OutPath);// 0xffffff8523219000 0x7a9cd3a7a0
	FString LaunchDir();// 0xffffff8523219000 0x7a9cd3a880
	bool IsSamePath(FString PathA, FString PathB);// 0xffffff8523219000 0x7a9cd3a960
	bool IsRestrictedPath(FString InPath);// 0xffffff8523219000 0x7a9cd3aa40
	bool IsRelative(FString InPath);// 0xffffff8523219000 0x7a9cd3ab20
	bool IsProjectFilePathSet();// 0xffffff8523219000 0x7a9cd3ac00
	bool IsDrive(FString InPath);// 0xffffff8523219000 0x7a9cd3ace0
	bool HasProjectPersistentDownloadDir();// 0xffffff8523219000 0x7a9cd37400
	FString[] GetToolTipLocalizationPaths();// 0xffffff8523219000 0x7a9cd374e0
	FString[] GetRestrictedFolderNames();// 0xffffff8523219000 0x7a9cd375c0
	FString GetRelativePathToRoot();// 0xffffff8523219000 0x7a9cd376a0
	FString[] GetPropertyNameLocalizationPaths();// 0xffffff8523219000 0x7a9cd37780
	FString GetProjectFilePath();// 0xffffff8523219000 0x7a9cd37860
	FString GetPath(FString InPath);// 0xffffff8523219000 0x7a9cd37940
	FString GetInvalidFileSystemChars();// 0xffffff8523219000 0x7a9cd37a20
	FString[] GetGameLocalizationPaths();// 0xffffff8523219000 0x7a9cd37b00
	FString GetExtension(FString InPath, bool bIncludeDot);// 0xffffff8523219000 0x7a9cd37be0
	FString[] GetEngineLocalizationPaths();// 0xffffff8523219000 0x7a9cd37cc0
	FString[] GetEditorLocalizationPaths();// 0xffffff8523219000 0x7a9cd37da0
	FString GetCleanFilename(FString InPath);// 0xffffff8523219000 0x7a9cd37e80
	FString GetBaseFilename(FString InPath, bool bRemovePath);// 0xffffff8523219000 0x7a9cd37f60
	FString GeneratedConfigDir();// 0xffffff8523219000 0x7a9cd38040
	FString GameUserDeveloperDir();// 0xffffff8523219000 0x7a9cd38120
	FString GameSourceDir();// 0xffffff8523219000 0x7a9cd38200
	FString GameDevelopersDir();// 0xffffff8523219000 0x7a9cd382e0
	FString GameAgnosticSavedDir();// 0xffffff8523219000 0x7a9cd383c0
	bool FileExists(FString InPath);// 0xffffff8523219000 0x7a9cd384a0
	FString FeaturePackDir();// 0xffffff8523219000 0x7a9cd38580
	FString EnterprisePluginsDir();// 0xffffff8523219000 0x7a9cd38660
	FString EnterpriseFeaturePackDir();// 0xffffff8523219000 0x7a9cd38740
	FString EnterpriseDir();// 0xffffff8523219000 0x7a9cd38820
	FString EngineVersionAgnosticUserDir();// 0xffffff8523219000 0x7a9cd38900
	FString EngineUserDir();// 0xffffff8523219000 0x7a9cd389e0
	FString EngineSourceDir();// 0xffffff8523219000 0x7a9cd38ac0
	FString EngineSavedDir();// 0xffffff8523219000 0x7a9cd38ba0
	FString EnginePluginsDir();// 0xffffff8523219000 0x7a9cd38c80
	FString EngineIntermediateDir();// 0xffffff8523219000 0x7a9cd38d60
	FString EngineDir();// 0xffffff8523219000 0x7a9cd38e40
	FString EngineContentDir();// 0xffffff8523219000 0x7a9cd38f20
	FString EngineConfigDir();// 0xffffff8523219000 0x7a9cd39000
	bool DirectoryExists(FString InPath);// 0xffffff8523219000 0x7a9cd35720
	FString DiffDir();// 0xffffff8523219000 0x7a9cd35800
	FString CreateTempFilename(FString Path, FString Prefix, FString Extension);// 0xffffff8523219000 0x7a9cd358e0
	FString ConvertToSandboxPath(FString InPath, FString InSandboxName);// 0xffffff8523219000 0x7a9cd359c0
	FString ConvertRelativePathToFull(FString InPath, FString InBasePath);// 0xffffff8523219000 0x7a9cd35aa0
	FString ConvertFromSandboxPath(FString InPath, FString InSandboxName);// 0xffffff8523219000 0x7a9cd35b80
	FString Combine(out const FString[] InPaths);// 0xffffff8523219000 0x7a9cd35c60
	bool CollapseRelativeDirectories(FString InPath, out FString OutPath);// 0xffffff8523219000 0x7a9cd35d40
	FString CloudDir();// 0xffffff8523219000 0x7a9cd35e20
	FString ChangeExtension(FString InPath, FString InNewExtension);// 0xffffff8523219000 0x7a9cd35f00
	FString BugItDir();// 0xffffff8523219000 0x7a9cd35fe0
	FString AutomationTransientDir();// 0xffffff8523219000 0x7a9cd360c0
	FString AutomationLogDir();// 0xffffff8523219000 0x7a9cd361a0
	FString AutomationDir();// 0xffffff8523219000 0x7a9cd36280

--------------------------------
Class: PlatformGameInstance.GameInstance.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0x168, Size: 0x10] 0x7aa07da380
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0x178, Size: 0x10] 0x7aa07da400
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0x188, Size: 0x10] 0x7aa07da480
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0x198, Size: 0x10] 0x7aa07d8480
	delegate ApplicationWillTerminateDelegate;//[Offset: 0x1a8, Size: 0x10] 0x7aa07d8500
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x1b8, Size: 0x10] 0x7aa07d8580
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x1c8, Size: 0x10] 0x7aa07d8680
	delegate ApplicationRegisteredForRemoteNotificationsDelegate;//[Offset: 0x1d8, Size: 0x10] 0x7aa07d8800
	delegate ApplicationRegisteredForUserNotificationsDelegate;//[Offset: 0x1e8, Size: 0x10] 0x7aa07d8880
	delegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;//[Offset: 0x1f8, Size: 0x10] 0x7aa07d8900
	delegate ApplicationReceivedRemoteNotificationDelegate;//[Offset: 0x208, Size: 0x10] 0x7aa07d8a00
	delegate ApplicationReceivedLocalNotificationDelegate;//[Offset: 0x218, Size: 0x10] 0x7aa07d8b00
	delegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;//[Offset: 0x228, Size: 0x10] 0x7aa07d8c00

--------------------------------
Class: BlueprintPlatformLibrary.BlueprintFunctionLibrary.Object
	void ScheduleLocalNotificationFromNow(int inSecondsFromNow, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0xffffff8523219000 0x7a9cd3c1e0
	void ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, FString ActivationEvent);// 0xffffff8523219000 0x7a9cd3c2c0
	void ScheduleLocalNotificationBadgeAtTime(out const DateTime FireDateTime, bool LocalTime, FString ActivationEvent);// 0xffffff8523219000 0x7a9cd3c3a0
	void ScheduleLocalNotificationAtTime(out const DateTime FireDateTime, bool LocalTime, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0xffffff8523219000 0x7a9cd3c480
	void GetLaunchNotification(out bool NotificationLaunchedApp, out FString ActivationEvent, out int FireDate);// 0xffffff8523219000 0x7a9cd3c560
	byte GetDeviceOrientation();// 0xffffff8523219000 0x7a9cd3c640
	void ClearAllLocalNotifications();// 0xffffff8523219000 0x7a9cd3c720
	void CancelLocalNotification(FString ActivationEvent);// 0xffffff8523219000 0x7a9cd3c800

--------------------------------
Class: DateTime

--------------------------------
Class: BlueprintSetLibrary.BlueprintFunctionLibrary.Object
	void SetSetPropertyByName(Object* Object, FName PropertyName, out const <int> Value);// 0xffffff8523219000 0x7a9cd3b760
	void Set_Union(out const <int> A, out const <int> B, out <int> Result);// 0xffffff8523219000 0x7a9cd3b840
	void Set_ToArray(out const <int> A, out int[] Result);// 0xffffff8523219000 0x7a9cd3b920
	void Set_RemoveItems(out const <int> TargetSet, out const int[] Items);// 0xffffff8523219000 0x7a9cd3ba00
	bool Set_Remove(out const <int> TargetSet, out const int Item);// 0xffffff8523219000 0x7a9cd3bae0
	int Set_Length(out const <int> TargetSet);// 0xffffff8523219000 0x7a9cd3bbc0
	void Set_Intersection(out const <int> A, out const <int> B, out <int> Result);// 0xffffff8523219000 0x7a9cd3bca0
	void Set_Difference(out const <int> A, out const <int> B, out <int> Result);// 0xffffff8523219000 0x7a9cd3bd80
	bool Set_Contains(out const <int> TargetSet, out const int ItemToFind);// 0xffffff8523219000 0x7a9cd3be60
	void Set_Clear(out const <int> TargetSet);// 0xffffff8523219000 0x7a9cd3bf40
	void Set_AddItems(out const <int> TargetSet, out const int[] NewItems);// 0xffffff8523219000 0x7a9cd3c020
	void Set_Add(out const <int> TargetSet, out const int NewItem);// 0xffffff8523219000 0x7a9cd3c100

--------------------------------
Class: BoneMaskFilter.Object
	InputBlendPose[] BlendPoses;//[Offset: 0x28, Size: 0x10] 0x7a9cd45480

--------------------------------
Class: InputBlendPose
	BranchFilter[] BranchFilters;//[Offset: 0x0, Size: 0x10] 0x7aa0941380

--------------------------------
Class: BranchFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x7aa0931a50
	int BlendDepth;//[Offset: 0x8, Size: 0x4] 0x7aa0931ac0

--------------------------------
Class: BookMark.BookmarkBase.Object
	Vector Location;//[Offset: 0x28, Size: 0xc] 0x7a9cd47380
	Rotator Rotation;//[Offset: 0x34, Size: 0xc] 0x7a9cd45300
	FString[] HiddenLevels;//[Offset: 0x40, Size: 0x10] 0x7a9cd45380

--------------------------------
Class: BookMark2D.BookmarkBase.Object
	float Zoom2D;//[Offset: 0x28, Size: 0x4] 0x7a9cd1e8d0
	IntPoint Location;//[Offset: 0x2c, Size: 0x8] 0x7a9cd47300

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x590, Size: 0xc] 0x7a9cd46d80
	float LineThickness;//[Offset: 0x59c, Size: 0x4] 0x7a9cd1e860
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0xffffff8523219000 0x7a9cd3b4c0
	Vector GetUnscaledBoxExtent();// 0xffffff8523219000 0x7a9cd3b5a0
	Vector GetScaledBoxExtent();// 0xffffff8523219000 0x7a9cd3b680

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x330, Size: 0x8] 0x7a9cd46d00

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x258, Size: 0x8] 0x7a9cd46a00
	enum ReflectionSourceType;//[Offset: 0x260, Size: 0x1] 0x7a9cd46b00
	TextureCube* Cubemap;//[Offset: 0x268, Size: 0x8] 0x7a9cd46b80
	float SourceCubemapAngle;//[Offset: 0x270, Size: 0x4] 0x7a9cd1e780
	float Brightness;//[Offset: 0x274, Size: 0x4] 0x7a9cd1e7f0
	Vector CaptureOffset;//[Offset: 0x278, Size: 0xc] 0x7a9cd46c00
	Guid MapBuildDataId;//[Offset: 0x284, Size: 0x10] 0x7a9cd46c80

--------------------------------
Class: BoxReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: BoxReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float BoxTransitionDistance;//[Offset: 0x2d0, Size: 0x4] 0x7a9cd1e710
	BoxComponent* PreviewInfluenceBox;//[Offset: 0x2d8, Size: 0x8] 0x7a9cd46900
	BoxComponent* PreviewCaptureBox;//[Offset: 0x2e0, Size: 0x8] 0x7a9cd46980

--------------------------------
Class: Breakpoint.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7a9cd46680
	EdGraphNode* Node;//[Offset: 0x30, Size: 0x8] 0x7a9cd46700
	bool bStepOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7a9cd46780
	bool bStepOnce_WasPreviouslyDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7a9cd46800
	bool bStepOnce_RemoveAfterHit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x7a9cd46880

--------------------------------
Class: EdGraphNode.Object
	EdGraphPin_Deprecated*[] DeprecatedPins;//[Offset: 0x38, Size: 0x10] 0x7a9cd97800
	int NodePosX;//[Offset: 0x48, Size: 0x4] 0x7a9cd79230
	int NodePosY;//[Offset: 0x4c, Size: 0x4] 0x7a9cd792a0
	int NodeWidth;//[Offset: 0x50, Size: 0x4] 0x7a9cd79310
	int NodeHeight;//[Offset: 0x54, Size: 0x4] 0x7a9cd79380
	byte AdvancedPinDisplay;//[Offset: 0x58, Size: 0x1] 0x7a9cd97880
	enum EnabledState;//[Offset: 0x59, Size: 0x1] 0x7a9cd97980
	bool bDisplayAsDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x7a9cd97a00
	bool bUserSetEnabledState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x7a9cd97a80
	bool bIsNodeEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1] 0x7a9cd97b00
	bool bHasCompilerMessage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b, Size: 0x1] 0x7a9cd97b80
	bool bCommentBubblePinned;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5b, Size: 0x1] 0x7a9cd97c00
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1] 0x7a9cd97c80
	bool bCommentBubbleMakeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1] 0x7a9cd97d00
	FString NodeComment;//[Offset: 0x60, Size: 0x10] 0x7a9cd793f0
	int ErrorType;//[Offset: 0x70, Size: 0x4] 0x7a9cd79460
	FString ErrorMsg;//[Offset: 0x78, Size: 0x10] 0x7a9cd794d0
	Guid NodeGuid;//[Offset: 0x88, Size: 0x10] 0x7a9cd97d80

--------------------------------
Class: EdGraphPin_Deprecated.Object
	FString PinName;//[Offset: 0x28, Size: 0x10] 0x7a9cd7ac00
	FString PinToolTip;//[Offset: 0x38, Size: 0x10] 0x7a9cd7ac70
	byte Direction;//[Offset: 0x48, Size: 0x1] 0x7a9cd99380
	EdGraphPinType PinType;//[Offset: 0x50, Size: 0x58] 0x7a9cd99400
	FString DefaultValue;//[Offset: 0xa8, Size: 0x10] 0x7a9cd7ace0
	FString AutogeneratedDefaultValue;//[Offset: 0xb8, Size: 0x10] 0x7a9cd79070
	Object* DefaultObject;//[Offset: 0xc8, Size: 0x8] 0x7a9cd99480
	FText DefaultTextValue;//[Offset: 0xd0, Size: 0x18] 0x7a9cd790e0
	EdGraphPin_Deprecated*[] LinkedTo;//[Offset: 0xe8, Size: 0x10] 0x7a9cd97480
	EdGraphPin_Deprecated*[] SubPins;//[Offset: 0xf8, Size: 0x10] 0x7a9cd97580
	EdGraphPin_Deprecated* ParentPin;//[Offset: 0x108, Size: 0x8] 0x7a9cd97600
	EdGraphPin_Deprecated* ReferencePassThroughConnection;//[Offset: 0x110, Size: 0x8] 0x7a9cd97680

--------------------------------
Class: EdGraphPinType
	FName PinCategory;//[Offset: 0x0, Size: 0x8] 0x7aa093d980
	FName PinSubCategory;//[Offset: 0x8, Size: 0x8] 0x7aa093d9f0
	Object* PinSubCategoryObject;//[Offset: 0x10, Size: 0x8] 0x7aa09e7180
	SimpleMemberReference PinSubCategoryMemberReference;//[Offset: 0x18, Size: 0x20] 0x7aa09e7200
	EdGraphTerminalType PinValueType;//[Offset: 0x38, Size: 0x1c] 0x7aa09e5300
	enum ContainerType;//[Offset: 0x54, Size: 0x1] 0x7aa09e5400
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1] 0x7aa09e5480
	bool bIsReference;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1] 0x7aa09e5500
	bool bIsConst;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1] 0x7aa09e5580
	bool bIsWeakPointer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 0x1] 0x7aa09e5600

--------------------------------
Class: EdGraphTerminalType
	FName TerminalCategory;//[Offset: 0x0, Size: 0x8] 0x7aa093da60
	FName TerminalSubCategory;//[Offset: 0x8, Size: 0x8] 0x7aa093dad0
	Object* TerminalSubCategoryObject;//[Offset: 0x10, Size: 0x8] 0x7aa09e7280
	bool bTerminalIsConst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7aa09e7300
	bool bTerminalIsWeakPointer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x7aa09e7380

--------------------------------
Class: BrushBuilder.Object
	FString BitmapFilename;//[Offset: 0x28, Size: 0x10] 0x7a9cd1feb0
	FString ToolTip;//[Offset: 0x38, Size: 0x10] 0x7a9cd1ff20
	bool NotifyBadParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7a9cd46380
	Vector[] Vertices;//[Offset: 0x50, Size: 0x10] 0x7a9cd46480
	BuilderPoly[] Polys;//[Offset: 0x60, Size: 0x10] 0x7a9cd46580
	FName Layer;//[Offset: 0x70, Size: 0x8] 0x7a9cd1ff90
	bool MergeCoplanars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x7a9cd46600

--------------------------------
Class: BuilderPoly
	int[] VertexIndices;//[Offset: 0x0, Size: 0x10] 0x7aa09e8980
	int Direction;//[Offset: 0x10, Size: 0x4] 0x7aa093ea90
	FName ItemName;//[Offset: 0x14, Size: 0x8] 0x7aa093eb00
	int PolyFlags;//[Offset: 0x1c, Size: 0x4] 0x7aa093eb70

--------------------------------
Class: BrushShape.Brush.Actor.Object

--------------------------------
Class: ButtonStyleAsset.Object
	ButtonStyle ButtonStyle;//[Offset: 0x28, Size: 0x278] 0x7a9cd48300

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x88] 0x7aa085d380
	SlateBrush Hovered;//[Offset: 0x90, Size: 0x88] 0x7aa085d400
	SlateBrush Pressed;//[Offset: 0x118, Size: 0x88] 0x7aa085d480
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 0x88] 0x7aa085d500
	Margin NormalPadding;//[Offset: 0x228, Size: 0x10] 0x7aa085d580
	Margin PressedPadding;//[Offset: 0x238, Size: 0x10] 0x7aa085d600
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 0x18] 0x7aa085d680
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 0x18] 0x7aa085b600

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8] 0x7aa085b980

--------------------------------
Class: CameraBlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: DeviceProfileManager.Object
	Object*[] Profiles;//[Offset: 0x28, Size: 0x10] 0x7a9cd93400

--------------------------------
Class: DeviceProfile.TextureLODSettings.Object
	FString DeviceType;//[Offset: 0x38, Size: 0x10] 0x7a9cd77da0
	FString BaseProfileName;//[Offset: 0x48, Size: 0x10] 0x7a9cd77e10
	Object* Parent;//[Offset: 0x58, Size: 0x8] 0x7a9cd93480
	FString[] CVars;//[Offset: 0x78, Size: 0x10] 0x7a9cd93500

--------------------------------
Class: TextureLODSettings.Object
	TextureLODGroup[] TextureLODGroups;//[Offset: 0x28, Size: 0x10] 0x7a9cd93600

--------------------------------
Class: TextureLODGroup
	byte Group;//[Offset: 0x0, Size: 0x1] 0x7a9cb02200
	int LODBias;//[Offset: 0xc, Size: 0x4] 0x7a9ca66360
	int LODBias_Smaller;//[Offset: 0x10, Size: 0x4] 0x7a9ca663d0
	int LODBias_Smallest;//[Offset: 0x14, Size: 0x4] 0x7a9ca66440
	int NumStreamedMips;//[Offset: 0x1c, Size: 0x4] 0x7a9ca664b0
	byte MipGenSettings;//[Offset: 0x20, Size: 0x1] 0x7a9cb02280
	int MinLODSize;//[Offset: 0x24, Size: 0x4] 0x7a9ca64840
	int MaxLODSize;//[Offset: 0x28, Size: 0x4] 0x7a9ca648b0
	int MaxLODSize_Smaller;//[Offset: 0x2c, Size: 0x4] 0x7a9ca64920
	int MaxLODSize_Smallest;//[Offset: 0x30, Size: 0x4] 0x7a9ca64990
	int OptionalLODBias;//[Offset: 0x34, Size: 0x4] 0x7a9ca64a00
	int OptionalMaxLODSize;//[Offset: 0x38, Size: 0x4] 0x7a9ca64a70
	FName MinMagFilter;//[Offset: 0x40, Size: 0x8] 0x7a9ca64ae0
	FName MipFilter;//[Offset: 0x48, Size: 0x8] 0x7a9ca64b50

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0xb8, Size: 0x4] 0x7a9cd70400

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xc0, Size: 0x4] 0x7a9cd70320
	int SizeY;//[Offset: 0xc4, Size: 0x4] 0x7a9cd70390
	LinearColor ClearColor;//[Offset: 0xc8, Size: 0x10] 0x7a9cd4a800
	byte AddressX;//[Offset: 0xd8, Size: 0x1] 0x7a9cd4a880
	byte AddressY;//[Offset: 0xd9, Size: 0x1] 0x7a9cd4a900
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xda, Size: 0x1] 0x7a9cd4a980
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xda, Size: 0x1] 0x7a9cd4aa00
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xda, Size: 0x1] 0x7a9cd4aa80
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xda, Size: 0x1] 0x7a9cd4ab00
	byte RenderTargetFormat;//[Offset: 0xdb, Size: 0x1] 0x7a9cd4ab80
	byte OverrideFormat;//[Offset: 0xdc, Size: 0x1] 0x7a9cd4ac00

--------------------------------
Class: CanvasRenderTarget2D.TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	delegate OnCanvasRenderTargetUpdate;//[Offset: 0xe8, Size: 0x10] 0x7a9cd4c580
	World* World;//[Offset: 0xf8, Size: 0x8] 0x7a9cd4c600
	bool bShouldClearRenderTargetOnReceiveUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1] 0x7a9cd4a580
	void UpdateResource();// 0xffffff8523219000 0x7a9cd3d440
	void ReceiveUpdate(Canvas* Canvas, int Width, int Height);// 0xffffff8523219000 0x7a9cd3d520
	void GetSize(out int Width, out int Height);// 0xffffff8523219000 0x7a9cd3d600
	CanvasRenderTarget2D* CreateCanvasRenderTarget2D(Object* WorldContextObject, class CanvasRenderTarget2D CanvasRenderTarget2DClass, int Width, int Height);// 0xffffff8523219000 0x7a9cd3d6e0

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8] 0x7a9cd9f400
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18] 0x7a9cd9f480
	Font* SmallFont;//[Offset: 0x50, Size: 0x8] 0x7a9cd9f500
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18] 0x7a9cd9f580
	Font* MediumFont;//[Offset: 0x70, Size: 0x8] 0x7a9cd9f600
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18] 0x7a9cd9f680
	Font* LargeFont;//[Offset: 0x90, Size: 0x8] 0x7a9cd9f700
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18] 0x7a9cd9f780
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8] 0x7a9cd9d700
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18] 0x7a9cd9d780
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10] 0x7a9cd9d880
	FString[] AdditionalFontNames;//[Offset: 0xe8, Size: 0x10] 0x7a9cd9d900
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 0x8] 0x7a9cd9d980
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 0x18] 0x7a9cd9da00
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 0x8] 0x7a9cd9da80
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 0x18] 0x7a9cd9db00
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 0x8] 0x7a9cd9db80
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 0x18] 0x7a9cd9dc00
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 0x8] 0x7a9cd9dc80
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 0x18] 0x7a9cd9dd00
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 0x18] 0x7a9cd9dd80
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x190, Size: 0x8] 0x7a9cd9de00
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x198, Size: 0x18] 0x7a9cd9de80
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1b0, Size: 0x8] 0x7a9cd9df00
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b8, Size: 0x18] 0x7a9cd9df80
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1d0, Size: 0x8] 0x7a9cd9e000
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1d8, Size: 0x8] 0x7a9cd9e080
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1e0, Size: 0x18] 0x7a9cd9e100
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1f8, Size: 0x18] 0x7a9cd9e180
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x210, Size: 0x8] 0x7a9cd9e200
	SoftClassPath AIControllerClassName;//[Offset: 0x218, Size: 0x18] 0x7a9cd9e280
	GameUserSettings* GameUserSettings;//[Offset: 0x230, Size: 0x8] 0x7a9cd9e300
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x238, Size: 0x8] 0x7a9cd9e380
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x240, Size: 0x18] 0x7a9cd9e400
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x258, Size: 0x18] 0x7a9cd9e480
	SoftClassPath GameSingletonClassName;//[Offset: 0x270, Size: 0x18] 0x7a9cd9e500
	Object* GameSingleton;//[Offset: 0x288, Size: 0x8] 0x7a9cd9e580
	SoftClassPath AssetManagerClassName;//[Offset: 0x290, Size: 0x18] 0x7a9cd9e600
	AssetManager* AssetManager;//[Offset: 0x2a8, Size: 0x8] 0x7a9cd9e680
	Texture2D* DefaultTexture;//[Offset: 0x2b0, Size: 0x8] 0x7a9cd9e700
	SoftObjectPath DefaultTextureName;//[Offset: 0x2b8, Size: 0x18] 0x7a9cd9c680
	Texture* DefaultDiffuseTexture;//[Offset: 0x2d0, Size: 0x8] 0x7a9cd9c700
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2d8, Size: 0x18] 0x7a9cd9c780
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2f0, Size: 0x8] 0x7a9cd9c800
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2f8, Size: 0x18] 0x7a9cd9c880
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x310, Size: 0x8] 0x7a9cd9c900
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x318, Size: 0x18] 0x7a9cd9c980
	Texture2D* DefaultBokehTexture;//[Offset: 0x330, Size: 0x8] 0x7a9cd9ca00
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x338, Size: 0x18] 0x7a9cd9ca80
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x350, Size: 0x8] 0x7a9cd9cb00
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x358, Size: 0x18] 0x7a9cd9cb80
	Material* WireframeMaterial;//[Offset: 0x370, Size: 0x8] 0x7a9cd9cc00
	FString WireframeMaterialName;//[Offset: 0x378, Size: 0x10] 0x7a9cd7af10
	Material* DebugMeshMaterial;//[Offset: 0x388, Size: 0x8] 0x7a9cd9cc80
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x390, Size: 0x18] 0x7a9cd9cd00
	Material* LevelColorationLitMaterial;//[Offset: 0x3a8, Size: 0x8] 0x7a9cd9cd80
	FString LevelColorationLitMaterialName;//[Offset: 0x3b0, Size: 0x10] 0x7a9cd7af80
	Material* LevelColorationUnlitMaterial;//[Offset: 0x3c0, Size: 0x8] 0x7a9cd9ce00
	FString LevelColorationUnlitMaterialName;//[Offset: 0x3c8, Size: 0x10] 0x7a9cd7aff0
	Material* LightingTexelDensityMaterial;//[Offset: 0x3d8, Size: 0x8] 0x7a9cd9ce80
	FString LightingTexelDensityName;//[Offset: 0x3e0, Size: 0x10] 0x7a9cd7b060
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x3f0, Size: 0x8] 0x7a9cd9cf00
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x3f8, Size: 0x10] 0x7a9cd7b0d0
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x408, Size: 0x8] 0x7a9cd9cf80
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x410, Size: 0x10] 0x7a9cd7b140
	Material* RemoveSurfaceMaterial;//[Offset: 0x420, Size: 0x8] 0x7a9cd9d000
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x428, Size: 0x18] 0x7a9cd9d080
	Material* VertexColorMaterial;//[Offset: 0x440, Size: 0x8] 0x7a9cd9d100
	FString VertexColorMaterialName;//[Offset: 0x448, Size: 0x10] 0x7a9cd7b1b0
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x458, Size: 0x8] 0x7a9cd9d180
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x460, Size: 0x10] 0x7a9cd7b220
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x470, Size: 0x8] 0x7a9cd9d200
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x478, Size: 0x10] 0x7a9cd7b290
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x488, Size: 0x8] 0x7a9cd9d280
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x490, Size: 0x10] 0x7a9cd7b300
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4a0, Size: 0x8] 0x7a9cd9d300
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4a8, Size: 0x10] 0x7a9cd7b370
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4b8, Size: 0x8] 0x7a9cd9d380
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x4c0, Size: 0x10] 0x7a9cd7b3e0
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x4d0, Size: 0x18] 0x7a9cd9d400
	Material* ConstraintLimitMaterial;//[Offset: 0x4e8, Size: 0x8] 0x7a9cd9d480
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x4f0, Size: 0x8] 0x7a9cd9d500
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x4f8, Size: 0x8] 0x7a9cd9d580
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x500, Size: 0x8] 0x7a9cd9d600
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x508, Size: 0x8] 0x7a9cd9d680
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x510, Size: 0x8] 0x7a9cd9b600
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x518, Size: 0x8] 0x7a9cd9b680
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x520, Size: 0x8] 0x7a9cd9b700
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x528, Size: 0x8] 0x7a9cd9b780
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x530, Size: 0x18] 0x7a9cd9b800
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x548, Size: 0x8] 0x7a9cd9b880
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x550, Size: 0x18] 0x7a9cd9b900
	Material* ArrowMaterial;//[Offset: 0x568, Size: 0x8] 0x7a9cd9b980
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x570, Size: 0x8] 0x7a9cd9ba00
	SoftObjectPath ArrowMaterialName;//[Offset: 0x578, Size: 0x18] 0x7a9cd9ba80
	LinearColor LightingOnlyBrightness;//[Offset: 0x590, Size: 0x10] 0x7a9cd9bb00
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5a0, Size: 0x10] 0x7a9cd9bc00
	LinearColor[] QuadComplexityColors;//[Offset: 0x5b0, Size: 0x10] 0x7a9cd9bd00
	LinearColor[] LightComplexityColors;//[Offset: 0x5c0, Size: 0x10] 0x7a9cd9be00
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x5d0, Size: 0x10] 0x7a9cd9bf00
	LinearColor[] LODColorationColors;//[Offset: 0x5e0, Size: 0x10] 0x7a9cd9c000
	LinearColor[] HLODColorationColors;//[Offset: 0x5f0, Size: 0x10] 0x7a9cd9c100
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x600, Size: 0x10] 0x7a9cd9c200
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x610, Size: 0x4] 0x7a9cd7b450
	float MaxES2PixelShaderAdditiveComplexityCount;//[Offset: 0x614, Size: 0x4] 0x7a9cd7b4c0
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x618, Size: 0x4] 0x7a9cd7b530
	float MinLightMapDensity;//[Offset: 0x61c, Size: 0x4] 0x7a9cd7b5a0
	float IdealLightMapDensity;//[Offset: 0x620, Size: 0x4] 0x7a9cd7b610
	float MaxLightMapDensity;//[Offset: 0x624, Size: 0x4] 0x7a9cd7b680
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x628, Size: 0x1] 0x7a9cd9c280
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x62c, Size: 0x4] 0x7a9cd7b6f0
	float RenderLightMapDensityColorScale;//[Offset: 0x630, Size: 0x4] 0x7a9cd7b760
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x634, Size: 0x10] 0x7a9cd9c300
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x644, Size: 0x10] 0x7a9cd9c380
	StatColorMapping[] StatColorMappings;//[Offset: 0x658, Size: 0x10] 0x7a9cd9c480
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x668, Size: 0x8] 0x7a9cd9c500
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x670, Size: 0x18] 0x7a9cd9c580
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x688, Size: 0x10] 0x7a9cd9a580
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x698, Size: 0x10] 0x7a9cd9a680
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6a8, Size: 0x10] 0x7a9cd9a780
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x6b8, Size: 0x10] 0x7a9cd9a880
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x6c8, Size: 0x8] 0x7a9cd9a900
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x6d0, Size: 0x18] 0x7a9cd9a980
	Texture2D* MiniFontTexture;//[Offset: 0x6e8, Size: 0x8] 0x7a9cd9aa00
	SoftObjectPath MiniFontTextureName;//[Offset: 0x6f0, Size: 0x18] 0x7a9cd9aa80
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x708, Size: 0x8] 0x7a9cd9ab00
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x710, Size: 0x18] 0x7a9cd9ab80
	Texture2D* LightMapDensityTexture;//[Offset: 0x728, Size: 0x8] 0x7a9cd9ac00
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x730, Size: 0x18] 0x7a9cd9ac80
	GameViewportClient* GameViewport;//[Offset: 0x750, Size: 0x8] 0x7a9cd9ad00
	FString[] DeferredCommands;//[Offset: 0x758, Size: 0x10] 0x7a9cd9ad80
	int TickCycles;//[Offset: 0x768, Size: 0x4] 0x7a9cd7b840
	int GameCycles;//[Offset: 0x76c, Size: 0x4] 0x7a9cd7b8b0
	int ClientCycles;//[Offset: 0x770, Size: 0x4] 0x7a9cd7b920
	float NearClipPlane;//[Offset: 0x774, Size: 0x4] 0x7a9cd7b990
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x778, Size: 0x1] 0x7a9cd9ae00
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x778, Size: 0x1] 0x7a9cd9ae80
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x778, Size: 0x1] 0x7a9cd9af00
	int MaximumLoopIterationCount;//[Offset: 0x77c, Size: 0x4] 0x7a9cd7ba00
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x780, Size: 0x1] 0x7a9cd9af80
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x780, Size: 0x1] 0x7a9cd9b000
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x780, Size: 0x1] 0x7a9cd9b080
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x780, Size: 0x1] 0x7a9cd9b100
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x780, Size: 0x1] 0x7a9cd9b180
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x780, Size: 0x1] 0x7a9cd9b200
	float FixedFrameRate;//[Offset: 0x784, Size: 0x4] 0x7a9cd7ba70
	FloatRange SmoothedFrameRateRange;//[Offset: 0x788, Size: 0x10] 0x7a9cd9b280
	EngineCustomTimeStep* DefaultCustomTimeStep;//[Offset: 0x798, Size: 0x8] 0x7a9cd9b300
	EngineCustomTimeStep* CurrentCustomTimeStep;//[Offset: 0x7a0, Size: 0x8] 0x7a9cd9b380
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x7a8, Size: 0x18] 0x7a9cd9b400
	TimecodeProvider* DefaultTimecodeProvider;//[Offset: 0x7c0, Size: 0x8] 0x7a9cd9b480
	TimecodeProvider* CustomTimecodeProvider;//[Offset: 0x7c8, Size: 0x8] 0x7a9cd9b500
	SoftClassPath DefaultTimecodeProviderClassName;//[Offset: 0x7d0, Size: 0x18] 0x7a9cd9b580
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x7e8, Size: 0x18] 0x7a9cd99500
	FrameRate DefaultTimecodeFrameRate;//[Offset: 0x800, Size: 0x8] 0x7a9cd99580
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x808, Size: 0x1] 0x7a9cd99600
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x80c, Size: 0x4] 0x7a9cd7bae0
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x810, Size: 0x1] 0x7a9cd99680
	Color C_WorldBox;//[Offset: 0x814, Size: 0x4] 0x7a9cd99700
	Color C_BrushWire;//[Offset: 0x818, Size: 0x4] 0x7a9cd99780
	Color C_AddWire;//[Offset: 0x81c, Size: 0x4] 0x7a9cd99800
	Color C_SubtractWire;//[Offset: 0x820, Size: 0x4] 0x7a9cd9a280
	Color C_SemiSolidWire;//[Offset: 0x824, Size: 0x4] 0x7a9cd99880
	Color C_NonSolidWire;//[Offset: 0x828, Size: 0x4] 0x7a9cd99900
	Color C_WireBackground;//[Offset: 0x82c, Size: 0x4] 0x7a9cd99980
	Color C_ScaleBoxHi;//[Offset: 0x830, Size: 0x4] 0x7a9cd99a00
	Color C_VolumeCollision;//[Offset: 0x834, Size: 0x4] 0x7a9cd99a80
	Color C_BSPCollision;//[Offset: 0x838, Size: 0x4] 0x7a9cd99b00
	Color C_OrthoBackground;//[Offset: 0x83c, Size: 0x4] 0x7a9cd99b80
	Color C_Volume;//[Offset: 0x840, Size: 0x4] 0x7a9cd99c00
	Color C_BrushShape;//[Offset: 0x844, Size: 0x4] 0x7a9cd99c80
	float StreamingDistanceFactor;//[Offset: 0x848, Size: 0x4] 0x7a9cd7bb50
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x850, Size: 0x10] 0x7a9cd99d00
	byte TransitionType;//[Offset: 0x860, Size: 0x1] 0x7a9cd99d80
	FString TransitionDescription;//[Offset: 0x868, Size: 0x10] 0x7a9cd79ee0
	FString TransitionGameMode;//[Offset: 0x878, Size: 0x10] 0x7a9cd79f50
	float MeshLODRange;//[Offset: 0x888, Size: 0x4] 0x7a9cd79fc0
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88c, Size: 0x1] 0x7a9cd99e00
	float CameraRotationThreshold;//[Offset: 0x890, Size: 0x4] 0x7a9cd7a030
	float CameraTranslationThreshold;//[Offset: 0x894, Size: 0x4] 0x7a9cd7a0a0
	float PrimitiveProbablyVisibleTime;//[Offset: 0x898, Size: 0x4] 0x7a9cd7a110
	float MaxOcclusionPixelsFraction;//[Offset: 0x89c, Size: 0x4] 0x7a9cd7a180
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a0, Size: 0x1] 0x7a9cd99e80
	int MaxParticleResize;//[Offset: 0x8a4, Size: 0x4] 0x7a9cd7a1f0
	int MaxParticleResizeWarn;//[Offset: 0x8a8, Size: 0x4] 0x7a9cd7a260
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x8b0, Size: 0x10] 0x7a9cd99f80
	float NetClientTicksPerSecond;//[Offset: 0x8c0, Size: 0x4] 0x7a9cd7a2d0
	float DisplayGamma;//[Offset: 0x8c4, Size: 0x4] 0x7a9cd7a340
	float MinDesiredFrameRate;//[Offset: 0x8c8, Size: 0x4] 0x7a9cd7a3b0
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x8cc, Size: 0x10] 0x7a9cd9a000
	LinearColor SelectedMaterialColor;//[Offset: 0x8dc, Size: 0x10] 0x7a9cd9a080
	LinearColor SelectionOutlineColor;//[Offset: 0x8ec, Size: 0x10] 0x7a9cd9a100
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x8fc, Size: 0x10] 0x7a9cd9a180
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x90c, Size: 0x10] 0x7a9cd9a200
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91c, Size: 0x1] 0x7a9cd9a300
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91d, Size: 0x1] 0x7a9cd9a380
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x91d, Size: 0x1] 0x7a9cd9a400
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x91d, Size: 0x1] 0x7a9cd9a480
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x91d, Size: 0x1] 0x7a9cd9a500
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x920, Size: 0x4] 0x7a9cd7a420
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x928, Size: 0x4] 0x7a9cd7a490
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x92c, Size: 0x1] 0x7a9cd98480
	FString ParticleEventManagerClassPath;//[Offset: 0x930, Size: 0x10] 0x7a9cd7a500
	float SelectionHighlightIntensity;//[Offset: 0x950, Size: 0x4] 0x7a9cd7a570
	float BSPSelectionHighlightIntensity;//[Offset: 0x954, Size: 0x4] 0x7a9cd7a5e0
	float SelectionHighlightIntensityBillboards;//[Offset: 0x958, Size: 0x4] 0x7a9cd7a650
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xb88, Size: 0x10] 0x7a9cd98580
	FString[] ServerActors;//[Offset: 0xb98, Size: 0x10] 0x7a9cd98600
	FString[] RuntimeServerActors;//[Offset: 0xba8, Size: 0x10] 0x7a9cd98680
	float NetErrorLogInterval;//[Offset: 0xbb8, Size: 0x4] 0x7a9cd7a7a0
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbbc, Size: 0x1] 0x7a9cd98700
	int NextWorldContextHandle;//[Offset: 0xbd0, Size: 0x4] 0x7a9cd7a810

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7a9cdcf680
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7a9cdcf700
	uint32 ResolutionSizeX;//[Offset: 0x78, Size: 0x4] 0x7a9cde3f10
	uint32 ResolutionSizeY;//[Offset: 0x7c, Size: 0x4] 0x7a9cde3f80
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x80, Size: 0x4] 0x7a9cde3ff0
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x84, Size: 0x4] 0x7a9cde4060
	int WindowPosX;//[Offset: 0x88, Size: 0x4] 0x7a9cde40d0
	int WindowPosY;//[Offset: 0x8c, Size: 0x4] 0x7a9cde4140
	int FullscreenMode;//[Offset: 0x90, Size: 0x4] 0x7a9cde41b0
	int LastConfirmedFullscreenMode;//[Offset: 0x94, Size: 0x4] 0x7a9cde4220
	int PreferredFullscreenMode;//[Offset: 0x98, Size: 0x4] 0x7a9cde4290
	uint32 Version;//[Offset: 0x9c, Size: 0x4] 0x7a9cde4300
	int AudioQualityLevel;//[Offset: 0xa0, Size: 0x4] 0x7a9cde4370
	int LastConfirmedAudioQualityLevel;//[Offset: 0xa4, Size: 0x4] 0x7a9cde43e0
	float FrameRateLimit;//[Offset: 0xa8, Size: 0x4] 0x7a9cde4450
	int DesiredScreenWidth;//[Offset: 0xb0, Size: 0x4] 0x7a9cde44c0
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1] 0x7a9cdcf780
	int DesiredScreenHeight;//[Offset: 0xb8, Size: 0x4] 0x7a9cde4530
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xbc, Size: 0x4] 0x7a9cde45a0
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc0, Size: 0x4] 0x7a9cde4610
	float LastRecommendedScreenWidth;//[Offset: 0xc4, Size: 0x4] 0x7a9cde4680
	float LastRecommendedScreenHeight;//[Offset: 0xc8, Size: 0x4] 0x7a9cde46f0
	float LastCPUBenchmarkResult;//[Offset: 0xcc, Size: 0x4] 0x7a9cde4760
	float LastGPUBenchmarkResult;//[Offset: 0xd0, Size: 0x4] 0x7a9cde47d0
	float[] LastCPUBenchmarkSteps;//[Offset: 0xd8, Size: 0x10] 0x7a9cdcd700
	float[] LastGPUBenchmarkSteps;//[Offset: 0xe8, Size: 0x10] 0x7a9cdcd780
	float LastGPUBenchmarkMultiplier;//[Offset: 0xf8, Size: 0x4] 0x7a9cde2c40
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1] 0x7a9cdcd800
	int HDRDisplayOutputNits;//[Offset: 0x100, Size: 0x4] 0x7a9cde2cb0
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x108, Size: 0x10] 0x7a9cdcd880
	void ValidateSettings();// 0xffffff8523219000 0x7a9cdf7080
	bool SupportsHDRDisplayOutput();// 0xffffff8523219000 0x7a9cdf7160
	void SetVSyncEnabled(bool bEnable);// 0xffffff8523219000 0x7a9cdf7240
	void SetVisualEffectQuality(int Value);// 0xffffff8523219000 0x7a9cdf7320
	void SetViewDistanceQuality(int Value);// 0xffffff8523219000 0x7a9cdf3a40
	void SetToDefaults();// 0xffffff8523219000 0x7a9cdf3b20
	void SetTextureQuality(int Value);// 0xffffff8523219000 0x7a9cdf3c00
	void SetShadowQuality(int Value);// 0xffffff8523219000 0x7a9cdf3ce0
	void SetScreenResolution(IntPoint Resolution);// 0xffffff8523219000 0x7a9cdf3dc0
	void SetResolutionScaleValueEx(float NewScaleValue);// 0xffffff8523219000 0x7a9cdf3ea0
	void SetResolutionScaleValue(int NewScaleValue);// 0xffffff8523219000 0x7a9cdf3f80
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0xffffff8523219000 0x7a9cdf4060
	void SetPostProcessingQuality(int Value);// 0xffffff8523219000 0x7a9cdf4140
	void SetOverallScalabilityLevel(int Value);// 0xffffff8523219000 0x7a9cdf4220
	void SetFullscreenMode(byte InFullscreenMode);// 0xffffff8523219000 0x7a9cdf4300
	void SetFrameRateLimit(float NewLimit);// 0xffffff8523219000 0x7a9cdf43e0
	void SetFoliageQuality(int Value);// 0xffffff8523219000 0x7a9cdf44c0
	void SetDynamicResolutionEnabled(bool bEnable);// 0xffffff8523219000 0x7a9cdf45a0
	void SetBenchmarkFallbackValues();// 0xffffff8523219000 0x7a9cdf4680
	void SetAudioQualityLevel(int QualityLevel);// 0xffffff8523219000 0x7a9cdf4760
	void SetAntiAliasingQuality(int Value);// 0xffffff8523219000 0x7a9cdf4840
	void SaveSettings();// 0xffffff8523219000 0x7a9cdf4920
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0xffffff8523219000 0x7a9cdf4a00
	void RevertVideoMode();// 0xffffff8523219000 0x7a9cdf4ae0
	void ResetToCurrentSettings();// 0xffffff8523219000 0x7a9cdf4bc0
	void LoadSettings(bool bForceReload);// 0xffffff8523219000 0x7a9cdf4ca0
	bool IsVSyncEnabled();// 0xffffff8523219000 0x7a9cdf4d80
	bool IsVSyncDirty();// 0xffffff8523219000 0x7a9cdf4e60
	bool IsScreenResolutionDirty();// 0xffffff8523219000 0x7a9cdf4f40
	bool IsHDREnabled();// 0xffffff8523219000 0x7a9cdf5020
	bool IsFullscreenModeDirty();// 0xffffff8523219000 0x7a9cdf5100
	bool IsDynamicResolutionEnabled();// 0xffffff8523219000 0x7a9cdf51e0
	bool IsDynamicResolutionDirty();// 0xffffff8523219000 0x7a9cdf52c0
	bool IsDirty();// 0xffffff8523219000 0x7a9cdf53a0
	int GetVisualEffectQuality();// 0xffffff8523219000 0x7a9cdf5480
	int GetViewDistanceQuality();// 0xffffff8523219000 0x7a9cdf5560
	int GetTextureQuality();// 0xffffff8523219000 0x7a9cdf5640
	int GetSyncInterval();// 0xffffff8523219000 0x7a9cdf1d60
	int GetShadowQuality();// 0xffffff8523219000 0x7a9cdf1e40
	IntPoint GetScreenResolution();// 0xffffff8523219000 0x7a9cdf1f20
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0xffffff8523219000 0x7a9cdf2000
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0xffffff8523219000 0x7a9cdf20e0
	float GetRecommendedResolutionScale();// 0xffffff8523219000 0x7a9cdf21c0
	byte GetPreferredFullscreenMode();// 0xffffff8523219000 0x7a9cdf22a0
	int GetPostProcessingQuality();// 0xffffff8523219000 0x7a9cdf2380
	int GetOverallScalabilityLevel();// 0xffffff8523219000 0x7a9cdf2460
	IntPoint GetLastConfirmedScreenResolution();// 0xffffff8523219000 0x7a9cdf2540
	byte GetLastConfirmedFullscreenMode();// 0xffffff8523219000 0x7a9cdf2620
	GameUserSettings* GetGameUserSettings();// 0xffffff8523219000 0x7a9cdf2700
	byte GetFullscreenMode();// 0xffffff8523219000 0x7a9cdf27e0
	float GetFrameRateLimit();// 0xffffff8523219000 0x7a9cdf28c0
	int GetFoliageQuality();// 0xffffff8523219000 0x7a9cdf29a0
	IntPoint GetDesktopResolution();// 0xffffff8523219000 0x7a9cdf2a80
	IntPoint GetDefaultWindowPosition();// 0xffffff8523219000 0x7a9cdf2b60
	byte GetDefaultWindowMode();// 0xffffff8523219000 0x7a9cdf2c40
	float GetDefaultResolutionScale();// 0xffffff8523219000 0x7a9cdf2d20
	IntPoint GetDefaultResolution();// 0xffffff8523219000 0x7a9cdf2e00
	int GetCurrentHDRDisplayNits();// 0xffffff8523219000 0x7a9cdf2ee0
	int GetAudioQualityLevel();// 0xffffff8523219000 0x7a9cdf2fc0
	int GetAntiAliasingQuality();// 0xffffff8523219000 0x7a9cdf30a0
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0xffffff8523219000 0x7a9cdf3180
	void ConfirmVideoMode();// 0xffffff8523219000 0x7a9cdf3260
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0xffffff8523219000 0x7a9cdf3340
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0xffffff8523219000 0x7a9cdf3420
	void ApplyNonResolutionSettings();// 0xffffff8523219000 0x7a9cdf3500
	void ApplyHardwareBenchmarkResults();// 0xffffff8523219000 0x7a9cdf35e0

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10] 0x7a9ca060c0
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10] 0x7a9ca15d00
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1] 0x7a9ca15d80

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4] 0x7a9ca06130
	Color Out;//[Offset: 0x4, Size: 0x4] 0x7a9ca15c00

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8] 0x7a9ca063d0
	FName NewGameName;//[Offset: 0x8, Size: 0x8] 0x7a9ca06440

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8] 0x7a9ca064b0
	FName OldClassName;//[Offset: 0x8, Size: 0x8] 0x7a9ca04840
	FName NewClassName;//[Offset: 0x10, Size: 0x8] 0x7a9ca048b0
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8] 0x7a9ca04920
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8] 0x7a9ca04990
	FName NewClassClass;//[Offset: 0x28, Size: 0x8] 0x7a9ca04a00
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8] 0x7a9ca04a70
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7a9ca16000

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10] 0x7a9ca04bc0
	FString NewPluginName;//[Offset: 0x10, Size: 0x10] 0x7a9ca04c30

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8] 0x7a9ca04ae0
	FName NewStructName;//[Offset: 0x8, Size: 0x8] 0x7a9ca04b50

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x7af81c5f00
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x7af81c5f80

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x7af81c3f80
	float Value;//[Offset: 0x4, Size: 0x4] 0x7af958fba0

--------------------------------
Class: EngineCustomTimeStep.Object

--------------------------------
Class: TimecodeProvider.Object
	Timecode GetTimecode();// 0xffffff8523219000 0x7a9c8076a0
	enum GetSynchronizationState();// 0xffffff8523219000 0x7a9c807780
	FrameRate GetFrameRate();// 0xffffff8523219000 0x7a9c807860

--------------------------------
Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4] 0x7af958fe40
	int Minutes;//[Offset: 0x4, Size: 0x4] 0x7af958feb0
	int Seconds;//[Offset: 0x8, Size: 0x4] 0x7af958ff20
	int Frames;//[Offset: 0xc, Size: 0x4] 0x7af958ff90
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7af81c6100

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x7a9ca15e00
	Rotator Rotation;//[Offset: 0xc, Size: 0xc] 0x7a9ca15e80
	FString Comment;//[Offset: 0x18, Size: 0x10] 0x7a9ca061a0

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8] 0x7a9ca05a30
	FName DriverClassName;//[Offset: 0x8, Size: 0x8] 0x7a9ca05aa0
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8] 0x7a9ca05b10

--------------------------------
Class: CheckBoxStyleAsset.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x28, Size: 0x580] 0x7a9cd4fb80

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1] 0x7aa0922100
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0x88] 0x7aa0920080
	SlateBrush UncheckedHoveredImage;//[Offset: 0x98, Size: 0x88] 0x7aa0920100
	SlateBrush UncheckedPressedImage;//[Offset: 0x120, Size: 0x88] 0x7aa0920180
	SlateBrush CheckedImage;//[Offset: 0x1a8, Size: 0x88] 0x7aa0920200
	SlateBrush CheckedHoveredImage;//[Offset: 0x230, Size: 0x88] 0x7aa0920280
	SlateBrush CheckedPressedImage;//[Offset: 0x2b8, Size: 0x88] 0x7aa0920300
	SlateBrush UndeterminedImage;//[Offset: 0x340, Size: 0x88] 0x7aa0920380
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x3c8, Size: 0x88] 0x7aa0920400
	SlateBrush UndeterminedPressedImage;//[Offset: 0x450, Size: 0x88] 0x7aa0920480
	Margin Padding;//[Offset: 0x4d8, Size: 0x10] 0x7aa0920500
	SlateColor ForegroundColor;//[Offset: 0x4e8, Size: 0x28] 0x7aa0920580
	SlateColor BorderBackgroundColor;//[Offset: 0x510, Size: 0x28] 0x7aa0920600
	SlateSound CheckedSlateSound;//[Offset: 0x538, Size: 0x18] 0x7aa0920680
	SlateSound UncheckedSlateSound;//[Offset: 0x550, Size: 0x18] 0x7aa0920700
	SlateSound HoveredSlateSound;//[Offset: 0x568, Size: 0x18] 0x7aa0920780

--------------------------------
Class: GameMapsSettings.Object
	SoftObjectPath EditorStartupMap;//[Offset: 0x28, Size: 0x18] 0x7a9cbb8e00
	FString LocalMapOptions;//[Offset: 0x40, Size: 0x10] 0x7a9cbc0390
	SoftObjectPath TransitionMap;//[Offset: 0x50, Size: 0x18] 0x7a9cbb8e80
	bool bUseSplitscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7a9cbb8f00
	byte TwoPlayerSplitscreenLayout;//[Offset: 0x69, Size: 0x1] 0x7a9cbb8f80
	byte ThreePlayerSplitscreenLayout;//[Offset: 0x6a, Size: 0x1] 0x7a9cbb9000
	enum FourPlayerSplitscreenLayout;//[Offset: 0x6b, Size: 0x1] 0x7a9cbb9100
	bool bOffsetPlayerGamepadIds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1] 0x7a9cbb9180
	SoftClassPath GameInstanceClass;//[Offset: 0x70, Size: 0x18] 0x7a9cbb9200
	SoftObjectPath GameDefaultMap;//[Offset: 0x88, Size: 0x18] 0x7a9cbb9280
	SoftObjectPath ServerDefaultMap;//[Offset: 0xa0, Size: 0x18] 0x7a9cbb9300
	SoftClassPath GlobalDefaultGameMode;//[Offset: 0xb8, Size: 0x18] 0x7a9cbb9380
	SoftClassPath GlobalDefaultServerGameMode;//[Offset: 0xd0, Size: 0x18] 0x7a9cbb9400
	GameModeName[] GameModeMapPrefixes;//[Offset: 0xe8, Size: 0x10] 0x7a9cbb7400
	GameModeName[] GameModeClassAliases;//[Offset: 0xf8, Size: 0x10] 0x7a9cbb7500

--------------------------------
Class: GameModeName
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7aa083c720
	SoftClassPath GameMode;//[Offset: 0x10, Size: 0x18] 0x7aa0921880

--------------------------------
Class: PlatformInterfaceBase.Object
	DelegateArray[] AllDelegates;//[Offset: 0x28, Size: 0x10] 0x7a9cd4f880

--------------------------------
Class: DelegateArray
	delegate[] Delegates;//[Offset: 0x0, Size: 0x10] 0x7a9ca59100

--------------------------------
Class: CloudStorageBase.PlatformInterfaceBase.Object
	FString[] LocalCloudFiles;//[Offset: 0x38, Size: 0x10] 0x7a9cd91000
	bool bSuppressDelegateCalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7a9cd91080

--------------------------------
Class: Commandlet.Object
	FString HelpDescription;//[Offset: 0x28, Size: 0x10] 0x7a9cd75090
	FString HelpUsage;//[Offset: 0x38, Size: 0x10] 0x7a9cd75100
	FString HelpWebLink;//[Offset: 0x48, Size: 0x10] 0x7a9cd75170
	FString[] HelpParamNames;//[Offset: 0x58, Size: 0x10] 0x7a9cd90700
	FString[] HelpParamDescriptions;//[Offset: 0x68, Size: 0x10] 0x7a9cd90780
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x7a9cd90800
	bool IsClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x7a9cd90880
	bool IsEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x7a9cd90900
	bool LogToConsole;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78, Size: 0x1] 0x7a9cd90980
	bool ShowErrorCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 0x1] 0x7a9cd90a00
	bool ShowProgress;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 0x1] 0x7a9cd90a80

--------------------------------
Class: ComponentDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintComponentDelegateBinding[] ComponentDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7a9cd90680

--------------------------------
Class: BlueprintComponentDelegateBinding
	FName ComponentPropertyName;//[Offset: 0x0, Size: 0x8] 0x7a9ca047d0
	FName DelegatePropertyName;//[Offset: 0x8, Size: 0x8] 0x7a9ca02b60
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8] 0x7a9ca02bd0

--------------------------------
Class: CompositeCurveTable.CurveTable.Object
	CurveTable*[] ParentTables;//[Offset: 0xa0, Size: 0x10] 0x7a9cd90480
	CurveTable*[] OldParentTables;//[Offset: 0xb8, Size: 0x10] 0x7a9cd90580

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8] 0x7a9cd90300
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9cd90380

--------------------------------
Class: CompositeDataTable.DataTable.Object
	DataTable*[] ParentTables;//[Offset: 0xa0, Size: 0x10] 0x7a9cd90180
	DataTable*[] OldParentTables;//[Offset: 0xb8, Size: 0x10] 0x7a9cd90280

--------------------------------
Class: ConsoleSettings.Object
	int MaxScrollbackSize;//[Offset: 0x28, Size: 0x4] 0x7a9cbc0400
	AutoCompleteCommand[] ManualAutoCompleteList;//[Offset: 0x30, Size: 0x10] 0x7a9cbb7600
	FString[] AutoCompleteMapPaths;//[Offset: 0x40, Size: 0x10] 0x7a9cbb7680
	float BackgroundOpacityPercentage;//[Offset: 0x50, Size: 0x4] 0x7a9cbc04e0
	bool bOrderTopToBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7a9cbb7700
	Color InputColor;//[Offset: 0x58, Size: 0x4] 0x7a9cbb7780
	Color HistoryColor;//[Offset: 0x5c, Size: 0x4] 0x7a9cbb7800
	Color AutoCompleteCommandColor;//[Offset: 0x60, Size: 0x4] 0x7a9cbb7880
	Color AutoCompleteCVarColor;//[Offset: 0x64, Size: 0x4] 0x7a9cbb7900
	Color AutoCompleteFadedColor;//[Offset: 0x68, Size: 0x4] 0x7a9cbb7980

--------------------------------
Class: AutoCompleteCommand
	FString Command;//[Offset: 0x0, Size: 0x10] 0x7aa083c790
	FString Desc;//[Offset: 0x10, Size: 0x10] 0x7aa083c800

--------------------------------
Class: ControlChannel.Channel.Object

--------------------------------
Class: ControlRigInterface.Interface.Object

--------------------------------
Class: StreamingSettings.DeveloperSettings.Object
	bool AsyncLoadingThreadEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7a9cd91d80
	bool WarnIfTimeLimitExceeded;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7a9cd91e00
	float TimeLimitExceededMultiplier;//[Offset: 0x3c, Size: 0x4] 0x7a9cd74bc0
	float TimeLimitExceededMinTime;//[Offset: 0x40, Size: 0x4] 0x7a9cd74c30
	int MinBulkDataSizeForAsyncLoading;//[Offset: 0x44, Size: 0x4] 0x7a9cd74ca0
	bool UseBackgroundLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7a9cd91e80
	bool AsyncLoadingUseFullTimeLimit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x7a9cd91f00
	float AsyncLoadingTimeLimit;//[Offset: 0x4c, Size: 0x4] 0x7a9cd74d10
	float PriorityAsyncLoadingExtraTime;//[Offset: 0x50, Size: 0x4] 0x7a9cd74d80
	float LevelStreamingActorsUpdateTimeLimit;//[Offset: 0x54, Size: 0x4] 0x7a9cd74df0
	float PriorityLevelStreamingActorsUpdateExtraTime;//[Offset: 0x58, Size: 0x4] 0x7a9cd74e60
	int LevelStreamingComponentsRegistrationGranularity;//[Offset: 0x5c, Size: 0x4] 0x7a9cd74ed0
	float LevelStreamingUnregisterComponentsTimeLimit;//[Offset: 0x60, Size: 0x4] 0x7a9cd74f40
	int LevelStreamingComponentsUnregistrationGranularity;//[Offset: 0x64, Size: 0x4] 0x7a9cd74fb0
	bool EventDrivenLoaderEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7a9cd91f80

--------------------------------
Class: GarbageCollectionSettings.DeveloperSettings.Object
	float TimeBetweenPurgingPendingKillObjects;//[Offset: 0x38, Size: 0x4] 0x7a9cd748b0
	bool FlushStreamingOnGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7a9cd91a00
	bool AllowParallelGC;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7a9cd91a80
	bool IncrementalBeginDestroyEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x7a9cd91b00
	bool CreateGCClusters;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x7a9cd91b80
	bool ActorClusteringEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x7a9cd91c00
	bool BlueprintClusteringEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x7a9cd91c80
	bool UseDisregardForGCOnDedicatedServers;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1] 0x7a9cd91d00
	int MinGCClusterSize;//[Offset: 0x40, Size: 0x4] 0x7a9cd74920
	int NumRetriesBeforeForcingGC;//[Offset: 0x44, Size: 0x4] 0x7a9cd74990
	int MaxObjectsNotConsideredByGC;//[Offset: 0x48, Size: 0x4] 0x7a9cd74a00
	int SizeOfPermanentObjectPool;//[Offset: 0x4c, Size: 0x4] 0x7a9cd74a70
	int MaxObjectsInGame;//[Offset: 0x50, Size: 0x4] 0x7a9cd74ae0
	int MaxObjectsInEditor;//[Offset: 0x54, Size: 0x4] 0x7a9cd74b50

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistanceSizePair[] CullDistances;//[Offset: 0x368, Size: 0x10] 0x7a9cd91900
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 0x1] 0x7a9cd91980

--------------------------------
Class: CullDistanceSizePair
	float Size;//[Offset: 0x0, Size: 0x4] 0x7a9ca03dc0
	float CullDistance;//[Offset: 0x4, Size: 0x4] 0x7a9ca03e30

--------------------------------
Class: CurveEdPresetCurve.Object

--------------------------------
Class: CurveLinearColorAtlas.Texture2D.Texture.Object
	uint32 TextureSize;//[Offset: 0xf0, Size: 0x4] 0x7a9cd75b10
	uint32 GradientPixelSize;//[Offset: 0xf4, Size: 0x4] 0x7a9cd75b80
	CurveLinearColor*[] GradientCurves;//[Offset: 0xf8, Size: 0x10] 0x7a9cd93100
	bool GetCurvePosition(CurveLinearColor* InCurve, out float Position);// 0xffffff8523219000 0x7a9cd84220

--------------------------------
Class: CurveSourceInterface.Interface.Object
	float GetCurveValue(FName CurveName);// 0xffffff8523219000 0x7a9cd83f80
	void GetCurves(out NamedCurveValue[] OutValues);// 0xffffff8523219000 0x7a9cd84060
	FName GetBindingName();// 0xffffff8523219000 0x7a9cd84140

--------------------------------
Class: NamedCurveValue
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7a9ca03ce0
	float Value;//[Offset: 0x8, Size: 0x4] 0x7a9ca03d50

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: DataTableFunctionLibrary.BlueprintFunctionLibrary.Object
	void GetDataTableRowNames(DataTable* Table, out FName[] OutRowNames);// 0xffffff8523219000 0x7a9cd83a40
	bool GetDataTableRowFromName(DataTable* Table, FName RowName, out TableRowBase OutRow);// 0xffffff8523219000 0x7a9cd83b20
	FString[] GetDataTableColumnAsString(const DataTable* DataTable, FName PropertyName);// 0xffffff8523219000 0x7a9cd83c00
	void EvaluateCurveTableRow(CurveTable* CurveTable, FName RowName, float InXY, out byte OutResult, out float OutXY, FString ContextString);// 0xffffff8523219000 0x7a9cd83ce0
	bool DoesDataTableRowExist(DataTable* Table, FName RowName);// 0xffffff8523219000 0x7a9cd83dc0

--------------------------------
Class: TableRowBase

--------------------------------
Class: DebugCameraHUD.HUD.Actor.Object

--------------------------------
Class: DebugDrawService.BlueprintFunctionLibrary.Object

--------------------------------
Class: DecalActor.Actor.Object
	DecalComponent* Decal;//[Offset: 0x330, Size: 0x8] 0x7a9cd93f80
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0xffffff8523219000 0x7a9cd86b40
	MaterialInterface* GetDecalMaterial();// 0xffffff8523219000 0x7a9cd86c20
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0xffffff8523219000 0x7a9cd86d00

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x258, Size: 0x8] 0x7a9cd93b80
	int SortOrder;//[Offset: 0x260, Size: 0x4] 0x7a9cd76750
	float FadeScreenSize;//[Offset: 0x264, Size: 0x4] 0x7a9cd767c0
	float FadeStartDelay;//[Offset: 0x268, Size: 0x4] 0x7a9cd76830
	float FadeDuration;//[Offset: 0x26c, Size: 0x4] 0x7a9cd768a0
	float FadeInDuration;//[Offset: 0x270, Size: 0x4] 0x7a9cd76910
	float FadeInStartDelay;//[Offset: 0x274, Size: 0x4] 0x7a9cd76980
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1] 0x7a9cd93c80
	Vector DecalSize;//[Offset: 0x27c, Size: 0xc] 0x7a9cd93d00
	void SetSortOrder(int Value);// 0xffffff8523219000 0x7a9cd861a0
	void SetFadeScreenSize(float NewFadeScreenSize);// 0xffffff8523219000 0x7a9cd86280
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0xffffff8523219000 0x7a9cd86360
	void SetFadeIn(float StartDelay, float Duaration);// 0xffffff8523219000 0x7a9cd86440
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0xffffff8523219000 0x7a9cd86520
	float GetFadeStartDelay();// 0xffffff8523219000 0x7a9cd86600
	float GetFadeInStartDelay();// 0xffffff8523219000 0x7a9cd866e0
	float GetFadeInDuration();// 0xffffff8523219000 0x7a9cd867c0
	float GetFadeDuration();// 0xffffff8523219000 0x7a9cd868a0
	MaterialInterface* GetDecalMaterial();// 0xffffff8523219000 0x7a9cd86980
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0xffffff8523219000 0x7a9cd86a60

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x180, Size: 0x4] 0x7a9cd7d590
	float Acceleration;//[Offset: 0x184, Size: 0x4] 0x7a9cd7d600
	float Deceleration;//[Offset: 0x188, Size: 0x4] 0x7a9cd7d670
	float TurningBoost;//[Offset: 0x18c, Size: 0x4] 0x7a9cd7d6e0
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 0x1] 0x7a9cd9fa80

--------------------------------
Class: DemoNetConnection.NetConnection.Player.Object

--------------------------------
Class: PendingNetGame.Object
	NetDriver* NetDriver;//[Offset: 0x30, Size: 0x8] 0x7a9cd93680
	DemoNetDriver* DemoNetDriver;//[Offset: 0x38, Size: 0x8] 0x7a9cd93700

--------------------------------
Class: DemoPendingNetGame.PendingNetGame.Object

--------------------------------
Class: DestructibleInterface.Interface.Object

--------------------------------
Class: MaterialShaderQualitySettings.Object
	<FName,ShaderPlatformQualitySettings*> ForwardSettingMap;//[Offset: 0x28, Size: 0x50] 0x7a963d7cc0

--------------------------------
Class: ShaderPlatformQualitySettings.Object
	MaterialQualityOverrides QualityOverrides;//[Offset: 0x28, Size: 0x8] 0x7a9cbb7a00

--------------------------------
Class: MaterialQualityOverrides
	bool bDiscardQualityDuringCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7aa0921900
	bool bEnableOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7aa0921980
	bool bForceFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7aa0921a00
	bool bForceNonMetal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7aa0921a80
	bool bForceDisableLMDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7aa0921b00
	bool bForceLQReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7aa0921b80
	bool bDisableMaterialNormalCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x7aa0921c00
	enum MobileCSMQuality;//[Offset: 0x7, Size: 0x1] 0x7aa0921d00

--------------------------------
Class: MaterialExpressionMaterialFunctionCall.MaterialExpression.Object
	MaterialFunctionInterface* MaterialFunction;//[Offset: 0x40, Size: 0x8] 0x7a9c6eb700
	MaterialParameterInfo FunctionParameterInfo;//[Offset: 0x48, Size: 0x10] 0x7a9c6eb780

--------------------------------
Class: MaterialExpressionTextureBase.MaterialExpression.Object
	Texture* Texture;//[Offset: 0x40, Size: 0x8] 0x7a9cb0b700
	byte SamplerType;//[Offset: 0x48, Size: 0x1] 0x7a9cb0b780
	bool IsDefaultMeshpaintTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49, Size: 0x1] 0x7a9cb0b800

--------------------------------
Class: MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x4c, Size: 0xc] 0x7a9cb0d380
	ExpressionInput TextureObject;//[Offset: 0x60, Size: 0xc] 0x7a9cb0d400
	ExpressionInput MipValue;//[Offset: 0x74, Size: 0xc] 0x7a9cb0d480
	ExpressionInput CoordinatesDX;//[Offset: 0x88, Size: 0xc] 0x7a9cb0d500
	ExpressionInput CoordinatesDY;//[Offset: 0x9c, Size: 0xc] 0x7a9cb0d580
	ExpressionInput AutomaticViewMipBiasValue;//[Offset: 0xb0, Size: 0xc] 0x7a9cb0d600
	byte MipValueMode;//[Offset: 0xc4, Size: 0x1] 0x7a9cb0d680
	byte SamplerSource;//[Offset: 0xc5, Size: 0x1] 0x7a9cb0b600
	uint32 ConstCoordinate;//[Offset: 0xc8, Size: 0x4] 0x7a9ca6a730
	int ConstMipValue;//[Offset: 0xcc, Size: 0x4] 0x7a9ca6a7a0
	bool AutomaticViewMipBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1] 0x7a9cb0b680

--------------------------------
Class: MaterialExpressionFeatureLevelSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e9580
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0xc] 0x7a9c6e9600

--------------------------------
Class: DialogueSoundWaveProxy.SoundBase.Object

--------------------------------
Class: DialogueVoice.Object
	byte Gender;//[Offset: 0x28, Size: 0x1] 0x7a9cd93200
	byte Plurality;//[Offset: 0x29, Size: 0x1] 0x7a9cd93280
	Guid LocalizationGUID;//[Offset: 0x2c, Size: 0x10] 0x7a9cd93300

--------------------------------
Class: DialogueWave.Object
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7a9cd95080
	bool bOverride_SubtitleOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7a9cd95100
	FString SpokenText;//[Offset: 0x30, Size: 0x10] 0x7a9cd77cc0
	FString SubtitleOverride;//[Offset: 0x40, Size: 0x10] 0x7a9cd77d30
	DialogueContextMapping[] ContextMappings;//[Offset: 0x50, Size: 0x10] 0x7a9cd95200
	Guid LocalizationGUID;//[Offset: 0x60, Size: 0x10] 0x7a9cd95280

--------------------------------
Class: DialogueContextMapping
	DialogueContext Context;//[Offset: 0x0, Size: 0x18] 0x7a9ca14800
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8] 0x7a9ca14880
	FString LocalizationKeyFormat;//[Offset: 0x20, Size: 0x10] 0x7a9ca054f0
	DialogueSoundWaveProxy* Proxy;//[Offset: 0x30, Size: 0x8] 0x7a9ca14900

--------------------------------
Class: DialogueContext
	DialogueVoice* Speaker;//[Offset: 0x0, Size: 0x8] 0x7a9ca14a00
	DialogueVoice*[] Targets;//[Offset: 0x8, Size: 0x10] 0x7a9ca14b00

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x330, Size: 0x8] 0x7a9cd94b80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1] 0x7a9cd94c00
	void ToggleEnabled();// 0xffffff8523219000 0x7a9cd88ba0
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0xffffff8523219000 0x7a9cd88c80
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0xffffff8523219000 0x7a9cd88d60
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0xffffff8523219000 0x7a9cd88e40
	void SetLightColor(LinearColor NewLightColor);// 0xffffff8523219000 0x7a9cd88f20
	void SetEnabled(bool bSetEnabled);// 0xffffff8523219000 0x7a9cd89000
	void SetCastShadows(bool bNewValue);// 0xffffff8523219000 0x7a9cd85720
	void SetBrightness(float NewBrightness);// 0xffffff8523219000 0x7a9cd85800
	void SetAffectTranslucentLighting(bool bNewValue);// 0xffffff8523219000 0x7a9cd858e0
	void OnRep_bEnabled();// 0xffffff8523219000 0x7a9cd859c0
	bool IsEnabled();// 0xffffff8523219000 0x7a9cd85aa0
	LinearColor GetLightColor();// 0xffffff8523219000 0x7a9cd85b80
	float GetBrightness();// 0xffffff8523219000 0x7a9cd85c60

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x284, Size: 0x4] 0x7a9cd789e0
	float MaxDrawDistance;//[Offset: 0x288, Size: 0x4] 0x7a9cd78a50
	float MaxDistanceFadeRange;//[Offset: 0x28c, Size: 0x4] 0x7a9cd78ac0
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1] 0x7a9cd95500
	int ShadowMapChannel;//[Offset: 0x294, Size: 0x4] 0x7a9cd78b30
	float MinRoughness;//[Offset: 0x29c, Size: 0x4] 0x7a9cd78ba0
	float SpecularScale;//[Offset: 0x2a0, Size: 0x4] 0x7a9cd78c10
	float ShadowResolutionScale;//[Offset: 0x2a4, Size: 0x4] 0x7a9cd78c80
	float ShadowBias;//[Offset: 0x2a8, Size: 0x4] 0x7a9cd78cf0
	float ShadowSharpen;//[Offset: 0x2ac, Size: 0x4] 0x7a9cd78d60
	float ContactShadowLength;//[Offset: 0x2b0, Size: 0x4] 0x7a9cd78dd0
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1] 0x7a9cd95580
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b4, Size: 0x1] 0x7a9cd95600
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b4, Size: 0x1] 0x7a9cd95680
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b4, Size: 0x1] 0x7a9cd95700
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b4, Size: 0x1] 0x7a9cd95780
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b4, Size: 0x1] 0x7a9cd95800
	LightingChannels LightingChannels;//[Offset: 0x2b5, Size: 0x1] 0x7a9cd95880
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x2b8, Size: 0x8] 0x7a9cd95900
	Vector LightFunctionScale;//[Offset: 0x2c0, Size: 0xc] 0x7a9cd95980
	TextureLightProfile* IESTexture;//[Offset: 0x2d0, Size: 0x8] 0x7a9cd95a00
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 0x1] 0x7a9cd95a80
	float IESBrightnessScale;//[Offset: 0x2dc, Size: 0x4] 0x7a9cd78e40
	float LightFunctionFadeDistance;//[Offset: 0x2e0, Size: 0x4] 0x7a9cd78eb0
	float DisabledBrightness;//[Offset: 0x2e4, Size: 0x4] 0x7a9cd78f20
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1] 0x7a9cd95b00
	float BloomScale;//[Offset: 0x2ec, Size: 0x4] 0x7a9cd78f90
	float BloomThreshold;//[Offset: 0x2f0, Size: 0x4] 0x7a9cd79000
	Color BloomTint;//[Offset: 0x2f4, Size: 0x4] 0x7a9cd95b80
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1] 0x7a9cd95c00
	float RayStartOffsetDepthScale;//[Offset: 0x2fc, Size: 0x4] 0x7a9cd77390
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0xffffff8523219000 0x7a9cd8ace0
	void SetUseIESBrightness(bool bNewValue);// 0xffffff8523219000 0x7a9cd87400
	void SetTransmission(bool bNewValue);// 0xffffff8523219000 0x7a9cd874e0
	void SetTemperature(float NewTemperature);// 0xffffff8523219000 0x7a9cd875c0
	void SetSpecularScale(float NewValue);// 0xffffff8523219000 0x7a9cd876a0
	void SetShadowBias(float NewValue);// 0xffffff8523219000 0x7a9cd87780
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0xffffff8523219000 0x7a9cd87860
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0xffffff8523219000 0x7a9cd87940
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0xffffff8523219000 0x7a9cd87a20
	void SetLightFunctionDisabledBrightness(float NewValue);// 0xffffff8523219000 0x7a9cd87b00
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0xffffff8523219000 0x7a9cd87be0
	void SetIntensity(float NewIntensity);// 0xffffff8523219000 0x7a9cd87cc0
	void SetIndirectLightingIntensity(float NewIntensity);// 0xffffff8523219000 0x7a9cd87da0
	void SetIESTexture(TextureLightProfile* NewValue);// 0xffffff8523219000 0x7a9cd87e80
	void SetIESBrightnessScale(float NewValue);// 0xffffff8523219000 0x7a9cd87f60
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0xffffff8523219000 0x7a9cd88040
	void SetEnableLightShaftBloom(bool bNewValue);// 0xffffff8523219000 0x7a9cd88120
	void SetBloomTint(Color NewValue);// 0xffffff8523219000 0x7a9cd88200
	void SetBloomThreshold(float NewValue);// 0xffffff8523219000 0x7a9cd882e0
	void SetBloomScale(float NewValue);// 0xffffff8523219000 0x7a9cd883c0
	void SetAffectTranslucentLighting(bool bNewValue);// 0xffffff8523219000 0x7a9cd884a0
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0xffffff8523219000 0x7a9cd88580

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x258, Size: 0x10] 0x7a9cd94300
	float Brightness;//[Offset: 0x268, Size: 0x4] 0x7a9cd778d0
	float Intensity;//[Offset: 0x26c, Size: 0x4] 0x7a9cd77940
	Color LightColor;//[Offset: 0x270, Size: 0x4] 0x7a9cd94380
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1] 0x7a9cd94480
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 0x1] 0x7a9cd94500
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274, Size: 0x1] 0x7a9cd94580
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274, Size: 0x1] 0x7a9cd94600
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x274, Size: 0x1] 0x7a9cd94680
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x274, Size: 0x1] 0x7a9cd94700
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x274, Size: 0x1] 0x7a9cd94780
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x274, Size: 0x1] 0x7a9cd94800
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x275, Size: 0x1] 0x7a9cd94880
	float IndirectLightingIntensity;//[Offset: 0x278, Size: 0x4] 0x7a9cd779b0
	float VolumetricScatteringIntensity;//[Offset: 0x27c, Size: 0x4] 0x7a9cd77a20
	int SamplesPerPixel;//[Offset: 0x280, Size: 0x4] 0x7a9cd77a90
	void SetSamplesPerPixel(int NewValue);// 0xffffff8523219000 0x7a9cd88660
	void SetCastVolumetricShadow(bool bNewValue);// 0xffffff8523219000 0x7a9cd88740
	void SetCastShadows(bool bNewValue);// 0xffffff8523219000 0x7a9cd88820
	void SetCastRaytracedShadow(bool bNewValue);// 0xffffff8523219000 0x7a9cd88900
	void SetAffectReflection(bool bNewValue);// 0xffffff8523219000 0x7a9cd889e0
	LinearColor GetLightColor();// 0xffffff8523219000 0x7a9cd88ac0

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0xf0, Size: 0x4] 0x7a9c7f8270
	float TextureMultiplier;//[Offset: 0xf4, Size: 0x4] 0x7a9c7f82e0

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x381, Size: 0x1] 0x7a9cd97100
	float OcclusionMaskDarkness;//[Offset: 0x384, Size: 0x4] 0x7a9cd79d20
	float OcclusionDepthRange;//[Offset: 0x388, Size: 0x4] 0x7a9cd79d90
	Vector LightShaftOverrideDirection;//[Offset: 0x38c, Size: 0xc] 0x7a9cd97180
	float WholeSceneDynamicShadowRadius;//[Offset: 0x398, Size: 0x4] 0x7a9cd79e00
	float DynamicShadowDistanceMovableLight;//[Offset: 0x39c, Size: 0x4] 0x7a9cd79e70
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x3a0, Size: 0x4] 0x7a9cd78200
	int DynamicShadowCascades;//[Offset: 0x3a4, Size: 0x4] 0x7a9cd78270
	float CascadeDistributionExponent;//[Offset: 0x3a8, Size: 0x4] 0x7a9cd782e0
	float CascadeTransitionFraction;//[Offset: 0x3ac, Size: 0x4] 0x7a9cd78350
	float ShadowDistanceFadeoutFraction;//[Offset: 0x3b0, Size: 0x4] 0x7a9cd783c0
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b4, Size: 0x1] 0x7a9cd97200
	int FarShadowCascadeCount;//[Offset: 0x3b8, Size: 0x4] 0x7a9cd78430
	float FarShadowDistance;//[Offset: 0x3bc, Size: 0x4] 0x7a9cd784a0
	float DistanceFieldShadowDistance;//[Offset: 0x3c0, Size: 0x4] 0x7a9cd78510
	float LightSourceAngle;//[Offset: 0x3c4, Size: 0x4] 0x7a9cd78580
	float LightSourceSoftAngle;//[Offset: 0x3c8, Size: 0x4] 0x7a9cd785f0
	float TraceDistance;//[Offset: 0x3cc, Size: 0x4] 0x7a9cd78660
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x3d0, Size: 0x10] 0x7a9cd97300
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 0x1] 0x7a9cd97380
	Color ModulatedShadowColor;//[Offset: 0x3e4, Size: 0x4] 0x7a9cd95300
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e8, Size: 0x1] 0x7a9cd95380
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0xffffff8523219000 0x7a9cd8a500
	void SetOcclusionMaskDarkness(float NewValue);// 0xffffff8523219000 0x7a9cd8a5e0
	void SetLightShaftOverrideDirection(Vector NewValue);// 0xffffff8523219000 0x7a9cd8a6c0
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0xffffff8523219000 0x7a9cd8a7a0
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0xffffff8523219000 0x7a9cd8a880
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0xffffff8523219000 0x7a9cd8a960
	void SetDynamicShadowCascades(int NewValue);// 0xffffff8523219000 0x7a9cd8aa40
	void SetCascadeTransitionFraction(float NewValue);// 0xffffff8523219000 0x7a9cd8ab20
	void SetCascadeDistributionExponent(float NewValue);// 0xffffff8523219000 0x7a9cd8ac00

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4] 0x7a9ca08040

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4] 0x7a9ca080b0
	float ShadowExponent;//[Offset: 0x4, Size: 0x4] 0x7a9ca08120
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7a9ca18c80

--------------------------------
Class: DistributionFloatConstant.DistributionFloat.Distribution.Object
	float Constant;//[Offset: 0x34, Size: 0x4] 0x7a9cd79cb0

--------------------------------
Class: DistributionFloatConstantCurve.DistributionFloat.Distribution.Object
	InterpCurveFloat ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x7a9cd96f80

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10] 0x7af81c3600
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7af81c3680
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x7af958ee10

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4] 0x7af958ee80
	float OutVal;//[Offset: 0x4, Size: 0x4] 0x7af958eef0
	float ArriveTangent;//[Offset: 0x8, Size: 0x4] 0x7af958ef60
	float LeaveTangent;//[Offset: 0xc, Size: 0x4] 0x7af958efd0
	byte InterpMode;//[Offset: 0x10, Size: 0x1] 0x7af81c3700

--------------------------------
Class: DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object
	FName ParameterName;//[Offset: 0x38, Size: 0x8] 0x7a9cd79a80
	float MinInput;//[Offset: 0x40, Size: 0x4] 0x7a9cd79af0
	float MaxInput;//[Offset: 0x44, Size: 0x4] 0x7a9cd79b60
	float MinOutput;//[Offset: 0x48, Size: 0x4] 0x7a9cd79bd0
	float MaxOutput;//[Offset: 0x4c, Size: 0x4] 0x7a9cd79c40
	byte ParamMode;//[Offset: 0x50, Size: 0x1] 0x7a9cd96f00

--------------------------------
Class: DistributionFloatParticleParameter.DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object

--------------------------------
Class: DistributionFloatUniform.DistributionFloat.Distribution.Object
	float Min;//[Offset: 0x34, Size: 0x4] 0x7a9cd799a0
	float Max;//[Offset: 0x38, Size: 0x4] 0x7a9cd79a10

--------------------------------
Class: DistributionFloatUniformCurve.DistributionFloat.Distribution.Object
	InterpCurveVector2D ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x7a9cd96e80

--------------------------------
Class: InterpCurveVector2D
	InterpCurvePointVector2D[] Points;//[Offset: 0x0, Size: 0x10] 0x7af81c5280
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7af81c3200
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x7af958ed30

--------------------------------
Class: InterpCurvePointVector2D
	float InVal;//[Offset: 0x0, Size: 0x4] 0x7af958eda0
	Vector2D OutVal;//[Offset: 0x4, Size: 0x8] 0x7af81c3280
	Vector2D ArriveTangent;//[Offset: 0xc, Size: 0x8] 0x7af81c3300
	Vector2D LeaveTangent;//[Offset: 0x14, Size: 0x8] 0x7af81c3380
	byte InterpMode;//[Offset: 0x1c, Size: 0x1] 0x7af81c3400

--------------------------------
Class: DistributionVectorConstant.DistributionVector.Distribution.Object
	Vector Constant;//[Offset: 0x34, Size: 0xc] 0x7a9cd96b80
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x7a9cd96c00
	byte LockedAxes;//[Offset: 0x41, Size: 0x1] 0x7a9cd96c80

--------------------------------
Class: DistributionVectorConstantCurve.DistributionVector.Distribution.Object
	InterpCurveVector ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x7a9cd96a00
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7a9cd96a80
	byte LockedAxes;//[Offset: 0x51, Size: 0x1] 0x7a9cd96b00

--------------------------------
Class: DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object
	FName ParameterName;//[Offset: 0x44, Size: 0x8] 0x7a9cd79930
	Vector MinInput;//[Offset: 0x4c, Size: 0xc] 0x7a9cd96780
	Vector MaxInput;//[Offset: 0x58, Size: 0xc] 0x7a9cd96800
	Vector MinOutput;//[Offset: 0x64, Size: 0xc] 0x7a9cd96880
	Vector MaxOutput;//[Offset: 0x70, Size: 0xc] 0x7a9cd96900
	byte ParamModes;//[Offset: 0x7c, Size: 0x1] 0x7a9cd96980

--------------------------------
Class: DistributionVectorParticleParameter.DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object

--------------------------------
Class: DistributionVectorUniform.DistributionVector.Distribution.Object
	Vector Max;//[Offset: 0x34, Size: 0xc] 0x7a9cd96480
	Vector Min;//[Offset: 0x40, Size: 0xc] 0x7a9cd96500
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x7a9cd96580
	byte LockedAxes;//[Offset: 0x4d, Size: 0x1] 0x7a9cd96600
	byte MirrorFlags;//[Offset: 0x4e, Size: 0x1] 0x7a9cd96680
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 0x1] 0x7a9cd96700

--------------------------------
Class: DistributionVectorUniformCurve.DistributionVector.Distribution.Object
	InterpCurveTwoVectors ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x7a9cd98280
	bool bLockAxes1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7a9cd98300
	bool bLockAxes2;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x7a9cd98380
	byte LockedAxes;//[Offset: 0x51, Size: 0x1] 0x7a9cd98400
	byte MirrorFlags;//[Offset: 0x53, Size: 0x1] 0x7a9cd96380
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 0x1] 0x7a9cd96400

--------------------------------
Class: InterpCurveTwoVectors
	InterpCurvePointTwoVectors[] Points;//[Offset: 0x0, Size: 0x10] 0x7af81c4800
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7af81c4880
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x7af958ea90

--------------------------------
Class: InterpCurvePointTwoVectors
	float InVal;//[Offset: 0x0, Size: 0x4] 0x7af958eb00
	TwoVectors OutVal;//[Offset: 0x4, Size: 0x18] 0x7af81c4900
	TwoVectors ArriveTangent;//[Offset: 0x1c, Size: 0x18] 0x7af81c4980
	TwoVectors LeaveTangent;//[Offset: 0x34, Size: 0x18] 0x7af81c4a00
	byte InterpMode;//[Offset: 0x4c, Size: 0x1] 0x7af81c4a80

--------------------------------
Class: TwoVectors
	Vector v1;//[Offset: 0x0, Size: 0xc] 0x7af81c2400
	Vector v2;//[Offset: 0xc, Size: 0xc] 0x7af81c2500

--------------------------------
Class: DocumentationActor.Actor.Object

--------------------------------
Class: DPICustomScalingRule.Object

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EdGraph.Object
	class EdGraphSchema* Schema;//[Offset: 0x28, Size: 0x8] 0x7a9cd97e00
	EdGraphNode*[] Nodes;//[Offset: 0x30, Size: 0x10] 0x7a9cd97f00
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x7a9cd97f80
	bool bAllowDeletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1] 0x7a9cd98000
	bool bAllowRenaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1] 0x7a9cd98080

--------------------------------
Class: EdGraphSchema.Object

--------------------------------
Class: EdGraphNode_Documentation.EdGraphNode.Object
	FString Link;//[Offset: 0x98, Size: 0x10] 0x7a9cd79150
	FString Excerpt;//[Offset: 0xa8, Size: 0x10] 0x7a9cd791c0

--------------------------------
Class: EngineBaseTypes.Object

--------------------------------
Class: HandlerComponentFactory.Object

--------------------------------
Class: EngineHandlerComponentFactory.HandlerComponentFactory.Object

--------------------------------
Class: EngineMessage.LocalMessage.Object
	FString FailedPlaceMessage;//[Offset: 0x28, Size: 0x10] 0x7a9cd7c800
	FString MaxedOutMessage;//[Offset: 0x38, Size: 0x10] 0x7a9cd7c870
	FString EnteredMessage;//[Offset: 0x48, Size: 0x10] 0x7a9cd7c8e0
	FString LeftMessage;//[Offset: 0x58, Size: 0x10] 0x7a9cd7c950
	FString GlobalNameChange;//[Offset: 0x68, Size: 0x10] 0x7a9cd7c9c0
	FString SpecEnteredMessage;//[Offset: 0x78, Size: 0x10] 0x7a9cd7ad50
	FString NewPlayerMessage;//[Offset: 0x88, Size: 0x10] 0x7a9cd7adc0
	FString NewSpecMessage;//[Offset: 0x98, Size: 0x10] 0x7a9cd7ae30

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: DynamicSubsystem.Subsystem.Object

--------------------------------
Class: EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: EngineTypes.Object

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x330, Size: 0x8] 0x7a9cd9f300
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1] 0x7a9cd9f380
	void OnRep_bEnabled();// 0xffffff8523219000 0x7a9cd89620

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x258, Size: 0x4] 0x7a9cd7bc30
	float FogHeightFalloff;//[Offset: 0x25c, Size: 0x4] 0x7a9cd7bca0
	ExponentialHeightFogData SecondFogData;//[Offset: 0x260, Size: 0xc] 0x7a9cd9ea00
	LinearColor FogInscatteringColor;//[Offset: 0x26c, Size: 0x10] 0x7a9cd9ea80
	TextureCube* InscatteringColorCubemap;//[Offset: 0x280, Size: 0x8] 0x7a9cd9eb00
	float InscatteringColorCubemapAngle;//[Offset: 0x288, Size: 0x4] 0x7a9cd7bd10
	LinearColor InscatteringTextureTint;//[Offset: 0x28c, Size: 0x10] 0x7a9cd9eb80
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x29c, Size: 0x4] 0x7a9cd7bd80
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x2a0, Size: 0x4] 0x7a9cd7bdf0
	float DirectionalInscatteringExponent;//[Offset: 0x2a4, Size: 0x4] 0x7a9cd7be60
	float DirectionalInscatteringStartDistance;//[Offset: 0x2a8, Size: 0x4] 0x7a9cd7bed0
	LinearColor DirectionalInscatteringColor;//[Offset: 0x2ac, Size: 0x10] 0x7a9cd9ec00
	float FogMaxOpacity;//[Offset: 0x2bc, Size: 0x4] 0x7a9cd7bf40
	float StartDistance;//[Offset: 0x2c0, Size: 0x4] 0x7a9cd7bfb0
	float FogCutoffDistance;//[Offset: 0x2c4, Size: 0x4] 0x7a9cd7c020
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x7a9cd9ec80
	float VolumetricFogScatteringDistribution;//[Offset: 0x2cc, Size: 0x4] 0x7a9cd7c090
	Color VolumetricFogAlbedo;//[Offset: 0x2d0, Size: 0x4] 0x7a9cd9ed00
	LinearColor VolumetricFogEmissive;//[Offset: 0x2d4, Size: 0x10] 0x7a9cd9ed80
	float VolumetricFogExtinctionScale;//[Offset: 0x2e4, Size: 0x4] 0x7a9cd7c100
	float VolumetricFogDistance;//[Offset: 0x2e8, Size: 0x4] 0x7a9cd7c170
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x2ec, Size: 0x4] 0x7a9cd7c1e0
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1] 0x7a9cd9ee00
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0xffffff8523219000 0x7a9cd8be60
	void SetVolumetricFogExtinctionScale(float NewValue);// 0xffffff8523219000 0x7a9cd8bf40
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0xffffff8523219000 0x7a9cd8c020
	void SetVolumetricFogDistance(float NewValue);// 0xffffff8523219000 0x7a9cd8c100
	void SetVolumetricFogAlbedo(Color NewValue);// 0xffffff8523219000 0x7a9cd8c1e0
	void SetVolumetricFog(bool bNewValue);// 0xffffff8523219000 0x7a9cd8c2c0
	void SetStartDistance(float Value);// 0xffffff8523219000 0x7a9cd8c3a0
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0xffffff8523219000 0x7a9cd8c480
	void SetInscatteringTextureTint(LinearColor Value);// 0xffffff8523219000 0x7a9cd8c560
	void SetInscatteringColorCubemapAngle(float Value);// 0xffffff8523219000 0x7a9cd8c640
	void SetInscatteringColorCubemap(TextureCube* Value);// 0xffffff8523219000 0x7a9cd8c720
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0xffffff8523219000 0x7a9cd8c800
	void SetFogMaxOpacity(float Value);// 0xffffff8523219000 0x7a9cd8c8e0
	void SetFogInscatteringColor(LinearColor Value);// 0xffffff8523219000 0x7a9cd8c9c0
	void SetFogHeightFalloff(float Value);// 0xffffff8523219000 0x7a9cd890e0
	void SetFogDensity(float Value);// 0xffffff8523219000 0x7a9cd891c0
	void SetFogCutoffDistance(float Value);// 0xffffff8523219000 0x7a9cd892a0
	void SetDirectionalInscatteringStartDistance(float Value);// 0xffffff8523219000 0x7a9cd89380
	void SetDirectionalInscatteringExponent(float Value);// 0xffffff8523219000 0x7a9cd89460
	void SetDirectionalInscatteringColor(LinearColor Value);// 0xffffff8523219000 0x7a9cd89540

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4] 0x7a9ca078d0
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4] 0x7a9ca07940
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4] 0x7a9ca079b0

--------------------------------
Class: FontFace.Object
	FString SourceFilename;//[Offset: 0x30, Size: 0x10] 0x7a9cd7d050
	enum Hinting;//[Offset: 0x40, Size: 0x1] 0x7a9cdc0c80
	enum LoadingPolicy;//[Offset: 0x41, Size: 0x1] 0x7a9cdc0d80
	enum LayoutMethod;//[Offset: 0x42, Size: 0x1] 0x7a9cdc0e80

--------------------------------
Class: FontImportOptions.Object
	FontImportOptionsData Data;//[Offset: 0x28, Size: 0xa8] 0x7a9cdc0b80

--------------------------------
Class: ForceFeedbackAttenuation.Object
	ForceFeedbackAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0xb0] 0x7a9cdc0b00

--------------------------------
Class: ForceFeedbackAttenuationSettings.BaseAttenuationSettings

--------------------------------
Class: ForceFeedbackComponent.SceneComponent.ActorComponent.Object
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x258, Size: 0x8] 0x7a9cdc0480
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1] 0x7a9cdc0500
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x260, Size: 0x1] 0x7a9cdc0580
	bool bLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x260, Size: 0x1] 0x7a9cdc0600
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x260, Size: 0x1] 0x7a9cdc0680
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x260, Size: 0x1] 0x7a9cdc0700
	float IntensityMultiplier;//[Offset: 0x264, Size: 0x4] 0x7a9cd7cf00
	ForceFeedbackAttenuation* AttenuationSettings;//[Offset: 0x268, Size: 0x8] 0x7a9cdc0780
	ForceFeedbackAttenuationSettings AttenuationOverrides;//[Offset: 0x270, Size: 0xb0] 0x7a9cdc0800
	delegate OnForceFeedbackFinished;//[Offset: 0x320, Size: 0x10] 0x7a9cdc0880
	void Stop();// 0xffffff8523219000 0x7a9cd8b680
	void SetIntensityMultiplier(float NewIntensityMultiplier);// 0xffffff8523219000 0x7a9cd8b760
	void SetForceFeedbackEffect(ForceFeedbackEffect* NewForceFeedbackEffect);// 0xffffff8523219000 0x7a9cd8b840
	void Play(float StartTime);// 0xffffff8523219000 0x7a9cd8b920
	bool BP_GetAttenuationSettingsToApply(out ForceFeedbackAttenuationSettings OutAttenuationSettings);// 0xffffff8523219000 0x7a9cd8ba00
	void AdjustAttenuation(out const ForceFeedbackAttenuationSettings InAttenuationSettings);// 0xffffff8523219000 0x7a9cd8bae0

--------------------------------
Class: GameEngine.Engine.Object
	float MaxDeltaTime;//[Offset: 0xd68, Size: 0x4] 0x7a9cd7cdb0
	float ServerFlushLogInterval;//[Offset: 0xd6c, Size: 0x4] 0x7a9cd7ce20
	GameInstance* GameInstance;//[Offset: 0xd70, Size: 0x8] 0x7a9cdc0300

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x3d0, Size: 0x8] 0x7a9cb3af80
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d8, Size: 0x1] 0x7a9cb7a500
	int NumSpectators;//[Offset: 0x3dc, Size: 0x4] 0x7a9cb3aff0
	int NumPlayers;//[Offset: 0x3e0, Size: 0x4] 0x7a9cb3b060
	int NumBots;//[Offset: 0x3e4, Size: 0x4] 0x7a9cb3b0d0
	float MinRespawnDelay;//[Offset: 0x3e8, Size: 0x4] 0x7a9cb3b140
	int NumTravellingPlayers;//[Offset: 0x3ec, Size: 0x4] 0x7a9cb3b1b0
	class LocalMessage* EngineMessageClass;//[Offset: 0x3f0, Size: 0x8] 0x7a9cb78500
	PlayerState*[] InactivePlayerArray;//[Offset: 0x3f8, Size: 0x10] 0x7a9cb78600
	float InactivePlayerStateLifeSpan;//[Offset: 0x408, Size: 0x4] 0x7a9cb3b220
	int MaxInactivePlayers;//[Offset: 0x40c, Size: 0x4] 0x7a9cb3b290
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1] 0x7a9cb78680
	void StartMatch();// 0xffffff8523219000 0x7a9cb4ef60
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0xffffff8523219000 0x7a9cb4f040
	void Say(FString Msg);// 0xffffff8523219000 0x7a9cb4f120
	void RestartGame();// 0xffffff8523219000 0x7a9cb4f200
	bool ReadyToStartMatch();// 0xffffff8523219000 0x7a9cb4f2e0
	bool ReadyToEndMatch();// 0xffffff8523219000 0x7a9cb4f3c0
	void K2_OnSetMatchState(FName NewState);// 0xffffff8523219000 0x7a9cb4f4a0
	bool IsMatchInProgress();// 0xffffff8523219000 0x7a9cb4f580
	bool HasMatchEnded();// 0xffffff8523219000 0x7a9cb4f660
	FName GetMatchState();// 0xffffff8523219000 0x7a9cb4f740
	void EndMatch();// 0xffffff8523219000 0x7a9cb4f820
	void AbortMatch();// 0xffffff8523219000 0x7a9cb4f900

--------------------------------
Class: GameplayStatics.BlueprintFunctionLibrary.Object
	void UnloadStreamLevel(const Object* WorldContextObject, FName LevelName, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0xffffff8523219000 0x7a9cdf36c0
	bool SuggestProjectileVelocity_CustomArc(const Object* WorldContextObject, out Vector OutLaunchVelocity, Vector StartPos, Vector EndPos, float OverrideGravityZ, float ArcParam);// 0xffffff8523219000 0x7a9cdf37a0
	AudioComponent* SpawnSoundAttached(SoundBase* Sound, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0xffffff8523219000 0x7a9cdf3880
	AudioComponent* SpawnSoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0xffffff8523219000 0x7a9cdf3960
	AudioComponent* SpawnSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0xffffff8523219000 0x7a9cdf0080
	Object* SpawnObject(class Object ObjectClass, Object* Outer);// 0xffffff8523219000 0x7a9cdf0160
	ForceFeedbackComponent* SpawnForceFeedbackAttached(ForceFeedbackEffect* ForceFeedbackEffect, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0xffffff8523219000 0x7a9cdf0240
	ForceFeedbackComponent* SpawnForceFeedbackAtLocation(const Object* WorldContextObject, ForceFeedbackEffect* ForceFeedbackEffect, Vector Location, Rotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0xffffff8523219000 0x7a9cdf0320
	ParticleSystemComponent* SpawnEmitterAttached(ParticleSystem* EmitterTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy, enum PoolingMethod);// 0xffffff8523219000 0x7a9cdf0400
	ParticleSystemComponent* SpawnEmitterAtLocation(const Object* WorldContextObject, ParticleSystem* EmitterTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, enum PoolingMethod);// 0xffffff8523219000 0x7a9cdf04e0
	AudioComponent* SpawnDialogueAttached(DialogueWave* Dialogue, out const DialogueContext Context, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0xffffff8523219000 0x7a9cdf05c0
	AudioComponent* SpawnDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0xffffff8523219000 0x7a9cdf06a0
	AudioComponent* SpawnDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy);// 0xffffff8523219000 0x7a9cdf0780
	DecalComponent* SpawnDecalAttached(MaterialInterface* DecalMaterial, Vector DecalSize, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, float LifeSpan);// 0xffffff8523219000 0x7a9cdf0860
	DecalComponent* SpawnDecalAtLocation(const Object* WorldContextObject, MaterialInterface* DecalMaterial, Vector DecalSize, Vector Location, Rotator Rotation, float LifeSpan);// 0xffffff8523219000 0x7a9cdf0940
	void SetWorldOriginLocation(const Object* WorldContextObject, IntVector NewLocation);// 0xffffff8523219000 0x7a9cdf0a20
	void SetSubtitlesEnabled(bool bEnabled);// 0xffffff8523219000 0x7a9cdf0b00
	void SetSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);// 0xffffff8523219000 0x7a9cdf0be0
	void SetPlayerControllerID(PlayerController* Player, int ControllerId);// 0xffffff8523219000 0x7a9cdf0cc0
	void SetMaxAudioChannelsScaled(const Object* WorldContextObject, float MaxChannelCountScale);// 0xffffff8523219000 0x7a9cdf0da0
	void SetGlobalTimeDilation(const Object* WorldContextObject, float TimeDilation);// 0xffffff8523219000 0x7a9cdf0e80
	void SetGlobalPitchModulation(const Object* WorldContextObject, float PitchModulation, float TimeSec);// 0xffffff8523219000 0x7a9cdf0f60
	void SetGlobalListenerFocusParameters(const Object* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);// 0xffffff8523219000 0x7a9cdf1040
	bool SetGamePaused(const Object* WorldContextObject, bool bPaused);// 0xffffff8523219000 0x7a9cdf1120
	void SetEnableWorldRendering(const Object* WorldContextObject, bool bEnable);// 0xffffff8523219000 0x7a9cdf1200
	void SetBaseSoundMix(const Object* WorldContextObject, SoundMix* InSoundMix);// 0xffffff8523219000 0x7a9cdf12e0
	bool SaveGameToSlot(SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0xffffff8523219000 0x7a9cdf13c0
	void RemovePlayer(PlayerController* Player, bool bDestroyPawn);// 0xffffff8523219000 0x7a9cdf14a0
	Vector RebaseZeroOriginOntoLocal(Object* WorldContextObject, Vector WorldLocation);// 0xffffff8523219000 0x7a9cdf1580
	Vector RebaseLocalOriginOntoZero(Object* WorldContextObject, Vector WorldLocation);// 0xffffff8523219000 0x7a9cdf1660
	void PushSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0xffffff8523219000 0x7a9cdf1740
	bool ProjectWorldToScreen(PlayerController* Player, out const Vector WorldPosition, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0xffffff8523219000 0x7a9cdf1820
	void PopSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0xffffff8523219000 0x7a9cdf1900
	void PlayWorldCameraShake(const Object* WorldContextObject, class CameraShake Shake, Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);// 0xffffff8523219000 0x7a9cdf19e0
	void PlaySoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, Actor* OwningActor);// 0xffffff8523219000 0x7a9cdf1ac0
	void PlaySound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, Actor* OwningActor);// 0xffffff8523219000 0x7a9cdf1ba0
	void PlayDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings);// 0xffffff8523219000 0x7a9cdf1c80
	void PlayDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);// 0xffffff8523219000 0x7a9cd8e780
	FString ParseOption(FString Options, FString Key);// 0xffffff8523219000 0x7a9cd8e860
	void OpenLevel(const Object* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);// 0xffffff8523219000 0x7a9cd8e940
	HitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, Vector Location, Vector ImpactPoint, Vector Normal, Vector ImpactNormal, PhysicalMaterial* PhysMat, Actor* HitActor, PrimitiveComponent* HitComponent, FName HitBoneName, int HitItem, int FaceIndex, Vector TraceStart, Vector TraceEnd);// 0xffffff8523219000 0x7a9cd8ea20
	void LoadStreamLevel(const Object* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0xffffff8523219000 0x7a9cd8eb00
	SaveGame* LoadGameFromSlot(FString SlotName, const int UserIndex);// 0xffffff8523219000 0x7a9cd8ebe0
	bool IsGamePaused(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8ecc0
	bool HasOption(FString Options, FString InKey);// 0xffffff8523219000 0x7a9cd8eda0
	bool HasLaunchOption(FString OptionToCheck);// 0xffffff8523219000 0x7a9cd8ee80
	int GrassOverlappingSphereCount(const Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0xffffff8523219000 0x7a9cd8ef60
	IntVector GetWorldOriginLocation(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8f040
	float GetWorldDeltaSeconds(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8f120
	float GetUnpausedTimeSeconds(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8f200
	float GetTimeSeconds(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8f2e0
	byte GetSurfaceType(out const HitResult Hit);// 0xffffff8523219000 0x7a9cd8f3c0
	LevelStreaming* GetStreamingLevel(const Object* WorldContextObject, FName PackageName);// 0xffffff8523219000 0x7a9cd8f4a0
	float GetRealTimeSeconds(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8f580
	Pawn* GetPlayerPawn(const Object* WorldContextObject, int PlayerIndex);// 0xffffff8523219000 0x7a9cd8f660
	int GetPlayerControllerID(PlayerController* Player);// 0xffffff8523219000 0x7a9cd8f740
	PlayerController* GetPlayerController(const Object* WorldContextObject, int PlayerIndex);// 0xffffff8523219000 0x7a9cd8f820
	Character* GetPlayerCharacter(const Object* WorldContextObject, int PlayerIndex);// 0xffffff8523219000 0x7a9cd8f900
	PlayerCameraManager* GetPlayerCameraManager(const Object* WorldContextObject, int PlayerIndex);// 0xffffff8523219000 0x7a9cd8f9e0
	FString GetPlatformName();// 0xffffff8523219000 0x7a9cd8fac0
	class Object GetObjectClass(const Object* Object);// 0xffffff8523219000 0x7a9cd8fba0
	int GetMaxAudioChannelCount(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8fc80
	void GetKeyValue(FString Pair, out FString Key, out FString Value);// 0xffffff8523219000 0x7a9cd8fd60
	int GetIntOption(FString Options, FString Key, int DefaultValue);// 0xffffff8523219000 0x7a9cd8fe40
	float GetGlobalTimeDilation(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8ff20
	GameStateBase* GetGameState(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8caa0
	GameModeBase* GetGameMode(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8cb80
	GameInstance* GetGameInstance(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8cc60
	bool GetEnableWorldRendering(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8cd40
	ReverbEffect* GetCurrentReverbEffect(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8ce20
	FString GetCurrentLevelName(const Object* WorldContextObject, bool bRemovePrefixString);// 0xffffff8523219000 0x7a9cd8cf00
	float GetAudioTimeSeconds(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8cfe0
	void GetAllActorsWithTag(const Object* WorldContextObject, FName Tag, out Actor*[] OutActors);// 0xffffff8523219000 0x7a9cd8d0c0
	void GetAllActorsWithInterface(const Object* WorldContextObject, class Interface Interface, out Actor*[] OutActors);// 0xffffff8523219000 0x7a9cd8d1a0
	void GetAllActorsOfClass(const Object* WorldContextObject, class Actor ActorClass, out Actor*[] OutActors);// 0xffffff8523219000 0x7a9cd8d280
	void GetActorArrayBounds(out const Actor*[] Actors, bool bOnlyCollidingComponents, out Vector Center, out Vector BoxExtent);// 0xffffff8523219000 0x7a9cd8d360
	Vector GetActorArrayAverageLocation(out const Actor*[] Actors);// 0xffffff8523219000 0x7a9cd8d440
	void GetAccurateRealTime(const Object* WorldContextObject, out int Seconds, out float PartialSeconds);// 0xffffff8523219000 0x7a9cd8d520
	void FlushLevelStreaming(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8d600
	Actor* FinishSpawningActor(Actor* Actor, out const Transform SpawnTransform);// 0xffffff8523219000 0x7a9cd8d6e0
	bool FindCollisionUV(out const HitResult Hit, int UVChannel, out Vector2D UV);// 0xffffff8523219000 0x7a9cd8d7c0
	void EnableLiveStreaming(bool Enable);// 0xffffff8523219000 0x7a9cd8d8a0
	bool DoesSaveGameExist(FString SlotName, const int UserIndex);// 0xffffff8523219000 0x7a9cd8d980
	bool DeprojectScreenToWorld(PlayerController* Player, out const Vector2D ScreenPosition, out Vector WorldPosition, out Vector WorldDirection);// 0xffffff8523219000 0x7a9cd8da60
	bool DeleteGameInSlot(FString SlotName, const int UserIndex);// 0xffffff8523219000 0x7a9cd8db40
	void DeactivateReverbEffect(const Object* WorldContextObject, FName TagName);// 0xffffff8523219000 0x7a9cd8dc20
	AudioComponent* CreateSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0xffffff8523219000 0x7a9cd8dd00
	SaveGame* CreateSaveGameObjectFromBlueprint(Blueprint* SaveGameBlueprint);// 0xffffff8523219000 0x7a9cd8dde0
	SaveGame* CreateSaveGameObject(class SaveGame SaveGameClass);// 0xffffff8523219000 0x7a9cd8dec0
	PlayerController* CreatePlayer(const Object* WorldContextObject, int ControllerId, bool bSpawnPlayerController);// 0xffffff8523219000 0x7a9cd8dfa0
	void ClearSoundMixModifiers(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9cd8e080
	void ClearSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float FadeOutTime);// 0xffffff8523219000 0x7a9cd8e160
	void CancelAsyncLoading();// 0xffffff8523219000 0x7a9cd8e240
	void BreakHitResult(out const HitResult Hit, out bool bBlockingHit, out bool bInitialOverlap, out float Time, out float Distance, out Vector Location, out Vector ImpactPoint, out Vector Normal, out Vector ImpactNormal, out PhysicalMaterial* PhysMat, out Actor* HitActor, out PrimitiveComponent* HitComponent, out FName HitBoneName, out int HitItem, out int FaceIndex, out Vector TraceStart, out Vector TraceEnd);// 0xffffff8523219000 0x7a9cd8e320
	bool BlueprintSuggestProjectileVelocity(const Object* WorldContextObject, out Vector TossVelocity, Vector StartLocation, Vector EndLocation, float LaunchSpeed, float OverrideGravityZ, byte TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);// 0xffffff8523219000 0x7a9cd8e400
	bool Blueprint_PredictProjectilePath_ByTraceChannel(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0xffffff8523219000 0x7a9cd8e4e0
	bool Blueprint_PredictProjectilePath_ByObjectType(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0xffffff8523219000 0x7a9cd8e5c0
	bool Blueprint_PredictProjectilePath_Advanced(const Object* WorldContextObject, out const PredictProjectilePathParams PredictParams, out PredictProjectilePathResult PredictResult);// 0xffffff8523219000 0x7a9cd8e6a0
	Actor* BeginSpawningActorFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, bool bNoCollisionFail, Actor* Owner);// 0xffffff8523219000 0x7a9cd8adc0
	Actor* BeginSpawningActorFromBlueprint(const Object* WorldContextObject, const Blueprint* Blueprint, out const Transform SpawnTransform, bool bNoCollisionFail);// 0xffffff8523219000 0x7a9cd8aea0
	Actor* BeginDeferredActorSpawnFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner);// 0xffffff8523219000 0x7a9cd8af80
	bool AreSubtitlesEnabled();// 0xffffff8523219000 0x7a9cd8b060
	bool AreAnyListenersWithinRange(const Object* WorldContextObject, Vector Location, float MaximumRange);// 0xffffff8523219000 0x7a9cd8b140
	bool ApplyRadialDamageWithFalloff(const Object* WorldContextObject, float BaseDamage, float MinimumDamage, out const Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, byte DamagePreventionChannel);// 0xffffff8523219000 0x7a9cd8b220
	bool ApplyRadialDamage(const Object* WorldContextObject, float BaseDamage, out const Vector Origin, float DamageRadius, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, bool bDoFullDamage, byte DamagePreventionChannel);// 0xffffff8523219000 0x7a9cd8b300
	float ApplyPointDamage(Actor* DamagedActor, float BaseDamage, out const Vector HitFromDirection, out const HitResult HitInfo, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0xffffff8523219000 0x7a9cd8b3e0
	float ApplyDamage(Actor* DamagedActor, float BaseDamage, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0xffffff8523219000 0x7a9cd8b4c0
	void ActivateReverbEffect(const Object* WorldContextObject, ReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime);// 0xffffff8523219000 0x7a9cd8b5a0

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 0xc] 0x7a9ca1b100
	Vector LaunchVelocity;//[Offset: 0xc, Size: 0xc] 0x7a9ca1b180
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7a9ca1b200
	float ProjectileRadius;//[Offset: 0x1c, Size: 0x4] 0x7a9ca08900
	float MaxSimTime;//[Offset: 0x20, Size: 0x4] 0x7a9ca08970
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x7a9ca1b280
	byte TraceChannel;//[Offset: 0x25, Size: 0x1] 0x7a9ca1b300
	byte[] ObjectTypes;//[Offset: 0x28, Size: 0x10] 0x7a9ca1b400
	Actor*[] ActorsToIgnore;//[Offset: 0x38, Size: 0x10] 0x7a9ca1b500
	float SimFrequency;//[Offset: 0x48, Size: 0x4] 0x7a9ca089e0
	float OverrideGravityZ;//[Offset: 0x4c, Size: 0x4] 0x7a9ca08a50
	byte DrawDebugType;//[Offset: 0x50, Size: 0x1] 0x7a9ca1b580
	float DrawDebugTime;//[Offset: 0x54, Size: 0x4] 0x7a9ca08ac0
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7a9ca19500

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 0x10] 0x7a9ca19600
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 0x1c] 0x7a9ca19780
	HitResult HitResult;//[Offset: 0x2c, Size: 0x88] 0x7a9ca19800

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x7a9ca19680
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x7a9ca19700
	float Time;//[Offset: 0x18, Size: 0x4] 0x7a9ca08b30

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x370, Size: 0x8] 0x7a9cbc2620
	FName PreviousMatchState;//[Offset: 0x378, Size: 0x8] 0x7a9cbc2690
	int ElapsedTime;//[Offset: 0x380, Size: 0x4] 0x7a9cbc2700
	void OnRep_MatchState();// 0xffffff8523219000 0x7a9cbd0b00
	void OnRep_ElapsedTime();// 0xffffff8523219000 0x7a9cbd0be0

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x340, Size: 0x8] 0x7a9cdcf380
	void SetOuterConeAngle(float NewOuterConeAngle);// 0xffffff8523219000 0x7a9cdf6c20
	void SetInnerConeAngle(float NewInnerConeAngle);// 0xffffff8523219000 0x7a9cdf6d00

--------------------------------
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x3ac, Size: 0x4] 0x7a9c7f7be0
	float OuterConeAngle;//[Offset: 0x3b0, Size: 0x4] 0x7a9c7f7c50
	float LightShaftConeAngle;//[Offset: 0x3b4, Size: 0x4] 0x7a9c7f7cc0
	void SetOuterConeAngle(float NewOuterConeAngle);// 0xffffff8523219000 0x7a9c805720
	void SetInnerConeAngle(float NewInnerConeAngle);// 0xffffff8523219000 0x7a9c805800

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 0x1] 0x7a9c7db480
	float LightFalloffExponent;//[Offset: 0x39c, Size: 0x4] 0x7a9c7f0860
	float SourceRadius;//[Offset: 0x3a0, Size: 0x4] 0x7a9c7f08d0
	float SoftSourceRadius;//[Offset: 0x3a4, Size: 0x4] 0x7a9c7f0940
	float SourceLength;//[Offset: 0x3a8, Size: 0x4] 0x7a9c7f09b0
	void SetSourceRadius(float bNewValue);// 0xffffff8523219000 0x7a9c6ccaa0
	void SetSourceLength(float NewValue);// 0xffffff8523219000 0x7a9c6ccb80
	void SetSoftSourceRadius(float bNewValue);// 0xffffff8523219000 0x7a9c6ccc60
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0xffffff8523219000 0x7a9c6ccd40

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x381, Size: 0x1] 0x7a9c6e4d00
	float Radius;//[Offset: 0x384, Size: 0x4] 0x7a9c6d3ab0
	float AttenuationRadius;//[Offset: 0x388, Size: 0x4] 0x7a9c6d3b20
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x38c, Size: 0xc] 0x7a9c6e4d80
	void SetIntensityUnits(enum NewIntensityUnits);// 0xffffff8523219000 0x7a9c6c6600
	void SetAttenuationRadius(float NewRadius);// 0xffffff8523219000 0x7a9c6c66e0
	float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0xffffff8523219000 0x7a9c6c67c0

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: GeneratedMeshAreaLight.SpotLight.Light.Actor.Object

--------------------------------
Class: HapticFeedbackEffect_Buffer.HapticFeedbackEffect_Base.Object
	byte[] Amplitudes;//[Offset: 0x28, Size: 0x10] 0x7a9cdcf300
	int SampleRate;//[Offset: 0x38, Size: 0x4] 0x7a9cde3d50

--------------------------------
Class: HapticFeedbackEffect_Curve.HapticFeedbackEffect_Base.Object
	HapticFeedbackDetails_Curve HapticDetails;//[Offset: 0x28, Size: 0x110] 0x7a9cdcf200

--------------------------------
Class: HapticFeedbackDetails_Curve
	RuntimeFloatCurve Frequency;//[Offset: 0x0, Size: 0x88] 0x7a9ca1af80
	RuntimeFloatCurve Amplitude;//[Offset: 0x88, Size: 0x88] 0x7a9ca1b000

--------------------------------
Class: HapticFeedbackEffect_SoundWave.HapticFeedbackEffect_Base.Object
	SoundWave* SoundWave;//[Offset: 0x28, Size: 0x8] 0x7a9cdcf180

--------------------------------
Class: HealthSnapshotBlueprintLibrary.BlueprintFunctionLibrary.Object
	void StopPerformanceSnapshots();// 0xffffff8523219000 0x7a9cdf6980
	void StartPerformanceSnapshots();// 0xffffff8523219000 0x7a9cdf6a60
	void LogPerformanceSnapshot(const FString SnapshotTitle, bool bResetStats);// 0xffffff8523219000 0x7a9cdf6b40

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x608, Size: 0x10] 0x7a9cbf7e80
	int InstancingRandomSeed;//[Offset: 0x618, Size: 0x4] 0x7a9cbc4f40
	int InstanceStartCullDistance;//[Offset: 0x61c, Size: 0x4] 0x7a9cbc4fb0
	int InstanceEndCullDistance;//[Offset: 0x620, Size: 0x4] 0x7a9cbc5020
	int[] InstanceReorderTable;//[Offset: 0x628, Size: 0x10] 0x7a9cbf7f00
	int NumPendingLightmaps;//[Offset: 0x680, Size: 0x4] 0x7a9cbc5100
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x688, Size: 0x10] 0x7a9cbf8000
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0xffffff8523219000 0x7a9cbd89e0
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0xffffff8523219000 0x7a9cbd8ac0
	bool RemoveInstance(int InstanceIndex);// 0xffffff8523219000 0x7a9cbd8ba0
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0xffffff8523219000 0x7a9cbd8c80
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0xffffff8523219000 0x7a9cbd8d60
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0xffffff8523219000 0x7a9cbd8e40
	int GetInstanceCount();// 0xffffff8523219000 0x7a9cbd8f20
	void ClearInstances();// 0xffffff8523219000 0x7a9cbd9000
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0xffffff8523219000 0x7a9cbd5720
	int AddInstance(out const Transform InstanceTransform);// 0xffffff8523219000 0x7a9cbd5800

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40] 0x7a9ca1c000

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10] 0x7af81c3780
	Plane YPlane;//[Offset: 0x10, Size: 0x10] 0x7af81c3800
	Plane ZPlane;//[Offset: 0x20, Size: 0x10] 0x7af81c3880
	Plane WPlane;//[Offset: 0x30, Size: 0x10] 0x7af81c3900

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x6a8, Size: 0x10] 0x7a9cbf7900
	int NumBuiltInstances;//[Offset: 0x6b8, Size: 0x4] 0x7a9cbc4d80
	Box BuiltInstanceBounds;//[Offset: 0x6c0, Size: 0x1c] 0x7a9cbf7980
	Box UnbuiltInstanceBounds;//[Offset: 0x6dc, Size: 0x1c] 0x7a9cbf7a00
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x6f8, Size: 0x10] 0x7a9cbf7b00
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x708, Size: 0x1] 0x7a9cbf7b80
	int OcclusionLayerNumNodes;//[Offset: 0x710, Size: 0x4] 0x7a9cbc4df0
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x714, Size: 0x1c] 0x7a9cbf7c00
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 0x1] 0x7a9cbf7c80
	int InstanceCountToRender;//[Offset: 0x738, Size: 0x4] 0x7a9cbc4e60
	bool RemoveInstances(out const int[] InstancesToRemove);// 0xffffff8523219000 0x7a9cbd8900

--------------------------------
Class: HLODProxy.Object
	HLODProxyMesh[] ProxyMeshes;//[Offset: 0x28, Size: 0x10] 0x7a9cdcf080

--------------------------------
Class: HLODProxyMesh
	LODActor* LODActor;//[Offset: 0x0, Size: 0x1c] 0x7a9ca1ab80
	StaticMesh* StaticMesh;//[Offset: 0x20, Size: 0x8] 0x7a9ca1ac00
	FName Key;//[Offset: 0x28, Size: 0x8] 0x7a9ca08510

--------------------------------
Class: LODActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x330, Size: 0x8] 0x7a9c6e4800
	HLODProxy* Proxy;//[Offset: 0x338, Size: 0x8] 0x7a9c6e4880
	FName Key;//[Offset: 0x340, Size: 0x8] 0x7a9c6d55d0
	float LODDrawDistance;//[Offset: 0x348, Size: 0x4] 0x7a9c6d5640
	int LODLevel;//[Offset: 0x34c, Size: 0x4] 0x7a9c6d39d0
	Actor*[] SubActors;//[Offset: 0x350, Size: 0x10] 0x7a9c6e4980
	byte CachedNumHLODLevels;//[Offset: 0x360, Size: 0x1] 0x7a9c6e4a00

--------------------------------
Class: ImportanceSamplingLibrary.BlueprintFunctionLibrary.Object
	float RandomSobolFloat(int Index, int Dimension, float Seed);// 0xffffff8523219000 0x7a9cdf61a0
	Vector RandomSobolCell3D(int Index, int NumCells, Vector Cell, Vector Seed);// 0xffffff8523219000 0x7a9cdf6280
	Vector2D RandomSobolCell2D(int Index, int NumCells, Vector2D Cell, Vector2D Seed);// 0xffffff8523219000 0x7a9cdf6360
	float NextSobolFloat(int Index, int Dimension, float PreviousValue);// 0xffffff8523219000 0x7a9cdf6440
	Vector NextSobolCell3D(int Index, int NumCells, Vector PreviousValue);// 0xffffff8523219000 0x7a9cdf6520
	Vector2D NextSobolCell2D(int Index, int NumCells, Vector2D PreviousValue);// 0xffffff8523219000 0x7a9cdf6600
	ImportanceTexture MakeImportanceTexture(Texture2D* Texture, byte WeightingFunc);// 0xffffff8523219000 0x7a9cdf66e0
	void ImportanceSample(out const ImportanceTexture Texture, out const Vector2D Rand, int Samples, float Intensity, out Vector2D SamplePosition, out LinearColor SampleColor, out float SampleIntensity, out float SampleSize);// 0xffffff8523219000 0x7a9cdf67c0
	void BreakImportanceTexture(out const ImportanceTexture ImportanceTexture, out Texture2D* Texture, out byte WeightingFunc);// 0xffffff8523219000 0x7a9cdf68a0

--------------------------------
Class: ImportanceTexture
	IntPoint Size;//[Offset: 0x0, Size: 0x8] 0x7a9ca1a800
	int NumMips;//[Offset: 0x8, Size: 0x4] 0x7a9ca083c0
	float[] MarginalCDF;//[Offset: 0x10, Size: 0x10] 0x7a9ca1a880
	float[] ConditionalCDF;//[Offset: 0x20, Size: 0x10] 0x7a9ca1a900
	Color[] TextureData;//[Offset: 0x30, Size: 0x10] 0x7a9ca1aa00
	Texture2D* Texture;//[Offset: 0x40, Size: 0x8] 0x7a9ca1aa80
	byte Weighting;//[Offset: 0x48, Size: 0x1] 0x7a9ca1ab00

--------------------------------
Class: ImportantToggleSettingInterface.Interface.Object

--------------------------------
Class: InGameAdManager.PlatformInterfaceBase.Object
	bool bShouldPauseWhileAdOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7a9cdcfb80
	delegate[] ClickedBannerDelegates;//[Offset: 0x40, Size: 0x10] 0x7a9cdcfc80
	delegate[] ClosedAdDelegates;//[Offset: 0x50, Size: 0x10] 0x7a9cdcfd80

--------------------------------
Class: InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: InputActionDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputActionDelegateBinding[] InputActionDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7a9cdcf900

--------------------------------
Class: BlueprintInputActionDelegateBinding.BlueprintInputDelegateBinding
	FName InputActionName;//[Offset: 0x4, Size: 0x8] 0x7a9ca08270
	byte InputKeyEvent;//[Offset: 0xc, Size: 0x1] 0x7a9ca1c400
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8] 0x7a9ca082e0

--------------------------------
Class: BlueprintInputDelegateBinding
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7a9ca1c480
	bool bExecuteWhenPaused;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7a9ca1c500
	bool bOverrideParentBinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7a9ca1c580

--------------------------------
Class: InputAxisDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisDelegateBinding[] InputAxisDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7a9cdcf800

--------------------------------
Class: BlueprintInputAxisDelegateBinding.BlueprintInputDelegateBinding
	FName InputAxisName;//[Offset: 0x4, Size: 0x8] 0x7a9ca09e70
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8] 0x7a9ca08200

--------------------------------
Class: InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisKeyDelegateBinding[] InputAxisKeyDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7a9c621000

--------------------------------
Class: BlueprintInputAxisKeyDelegateBinding.BlueprintInputDelegateBinding
	Key AxisKey;//[Offset: 0x8, Size: 0x18] 0x7a9ca1c380
	FName FunctionNameToBind;//[Offset: 0x20, Size: 0x8] 0x7a9ca09e00

--------------------------------
Class: InputKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputKeyDelegateBinding[] InputKeyDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7a9c620780

--------------------------------
Class: BlueprintInputKeyDelegateBinding.BlueprintInputDelegateBinding
	InputChord InputChord;//[Offset: 0x8, Size: 0x20] 0x7a9ca1c200
	byte InputKeyEvent;//[Offset: 0x28, Size: 0x1] 0x7a9ca1c280
	FName FunctionNameToBind;//[Offset: 0x2c, Size: 0x8] 0x7a9ca09d90

--------------------------------
Class: InputChord
	Key Key;//[Offset: 0x0, Size: 0x18] 0x7aa085fa80
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7aa085fb00
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x7aa085fb80
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x7aa085fc00
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x7aa085fc80

--------------------------------
Class: InputSettings.Object
	InputAxisConfigEntry[] AxisConfig;//[Offset: 0x28, Size: 0x10] 0x7a9c621280
	bool bAltEnterTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7a9c621300
	bool bF11TogglesFullscreen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7a9c621380
	bool bUseMouseForTouch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x7a9c621400
	bool bEnableMouseSmoothing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1] 0x7a9c621480
	bool bEnableFOVScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1] 0x7a9c621500
	bool bCaptureMouseOnLaunch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1] 0x7a9c621580
	bool bDefaultViewportMouseLock;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1] 0x7a9c621600
	bool bAlwaysShowTouchInterface;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1] 0x7a9c621680
	bool bShowConsoleOnFourFingerTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x7a9c621700
	bool bEnableGestureRecognizer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1] 0x7a9c621780
	bool bUseAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x7a9c621800
	FString[] ExcludedAutocorrectOS;//[Offset: 0x40, Size: 0x10] 0x7a9c621880
	FString[] ExcludedAutocorrectCultures;//[Offset: 0x50, Size: 0x10] 0x7a9c621900
	FString[] ExcludedAutocorrectDeviceModels;//[Offset: 0x60, Size: 0x10] 0x7a9c621980
	enum DefaultViewportMouseCaptureMode;//[Offset: 0x70, Size: 0x1] 0x7a9c621a80
	enum DefaultViewportMouseLockMode;//[Offset: 0x71, Size: 0x1] 0x7a9c621b80
	float FOVScale;//[Offset: 0x74, Size: 0x4] 0x7a9cde4a70
	float DoubleClickTime;//[Offset: 0x78, Size: 0x4] 0x7a9cde4ae0
	InputActionKeyMapping[] ActionMappings;//[Offset: 0x80, Size: 0x10] 0x7a9c621d00
	InputAxisKeyMapping[] AxisMappings;//[Offset: 0x90, Size: 0x10] 0x7a9c621e00
	SoftObjectPath DefaultTouchInterface;//[Offset: 0xa0, Size: 0x18] 0x7a9c621e80
	Key ConsoleKey;//[Offset: 0xb8, Size: 0x18] 0x7a9c621f00
	Key[] ConsoleKeys;//[Offset: 0xd0, Size: 0x10] 0x7a9c622000
	void SaveKeyMappings();// 0xffffff8523219000 0x7a9cdf89e0
	void RemoveAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0xffffff8523219000 0x7a9cdf8ac0
	void RemoveActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0xffffff8523219000 0x7a9cdf8ba0
	InputSettings* GetInputSettings();// 0xffffff8523219000 0x7a9cdf8c80
	void GetAxisNames(out FName[] AxisNames);// 0xffffff8523219000 0x7a9cdf8d60
	void GetAxisMappingByName(const FName InAxisName, out InputAxisKeyMapping[] OutMappings);// 0xffffff8523219000 0x7a9cdf8e40
	void GetActionNames(out FName[] ActionNames);// 0xffffff8523219000 0x7a9cdf8f20
	void GetActionMappingByName(const FName InActionName, out InputActionKeyMapping[] OutMappings);// 0xffffff8523219000 0x7a9cdf9000
	void ForceRebuildKeymaps();// 0xffffff8523219000 0x7a9cdf5720
	void AddAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0xffffff8523219000 0x7a9cdf5800
	void AddActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0xffffff8523219000 0x7a9cdf58e0

--------------------------------
Class: InputAxisConfigEntry
	FName AxisKeyName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0f3c0
	InputAxisProperties AxisProperties;//[Offset: 0x8, Size: 0x10] 0x7a9ca58800

--------------------------------
Class: InputAxisProperties
	float DeadZone;//[Offset: 0x0, Size: 0x4] 0x7a9ca0f430
	float Sensitivity;//[Offset: 0x4, Size: 0x4] 0x7a9ca0f4a0
	float Exponent;//[Offset: 0x8, Size: 0x4] 0x7a9ca0f510
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7a9ca58780

--------------------------------
Class: InputActionKeyMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0d8a0
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7a9ca58880
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7a9ca58900
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x7a9ca58980
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x7a9ca58a00
	Key Key;//[Offset: 0x10, Size: 0x18] 0x7a9ca58a80

--------------------------------
Class: InputAxisKeyMapping
	FName AxisName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0d910
	float Scale;//[Offset: 0x8, Size: 0x4] 0x7a9ca0d980
	Key Key;//[Offset: 0x10, Size: 0x18] 0x7a9ca58b00

--------------------------------
Class: InputTouchDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputTouchDelegateBinding[] InputTouchDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7a9c621180

--------------------------------
Class: BlueprintInputTouchDelegateBinding.BlueprintInputDelegateBinding
	byte InputKeyEvent;//[Offset: 0x1, Size: 0x1] 0x7a9ca1c180
	FName FunctionNameToBind;//[Offset: 0x4, Size: 0x8] 0x7a9ca09d20

--------------------------------
Class: InputVectorAxisDelegateBinding.InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: Interface_AssetUserData.Interface.Object

--------------------------------
Class: Interface_CollisionDataProvider.Interface.Object

--------------------------------
Class: Interface_PostProcessVolume.Interface.Object

--------------------------------
Class: Interface_PreviewMeshProvider.Interface.Object

--------------------------------
Class: InterpFilter.Object
	FString Caption;//[Offset: 0x28, Size: 0x10] 0x7a9cde62f0

--------------------------------
Class: InterpFilter_Classes.InterpFilter.Object

--------------------------------
Class: InterpFilter_Custom.InterpFilter.Object

--------------------------------
Class: InterpGroupCamera.InterpGroup.Object
	CameraAnim* CameraAnimInst;//[Offset: 0x50, Size: 0x8] 0x7a9c622980
	float CompressTolerance;//[Offset: 0x58, Size: 0x4] 0x7a9cde6210

--------------------------------
Class: InterpGroupInstCamera.InterpGroupInst.Object

--------------------------------
Class: InterpGroupInstDirector.InterpGroupInst.Object

--------------------------------
Class: InterpToMovementComponent.MovementComponent.ActorComponent.Object
	float Duration;//[Offset: 0x134, Size: 0x4] 0x7a963ee6a0
	bool bPauseOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1] 0x7aa07d6800
	enum BehaviourType;//[Offset: 0x139, Size: 0x1] 0x7aa07d6980
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13a, Size: 0x1] 0x7aa07d6a00
	delegate OnInterpToReverse;//[Offset: 0x140, Size: 0x10] 0x7aa07d6a80
	delegate OnInterpToStop;//[Offset: 0x150, Size: 0x10] 0x7aa07d6b00
	delegate OnWaitBeginDelegate;//[Offset: 0x160, Size: 0x10] 0x7aa07d6b80
	delegate OnWaitEndDelegate;//[Offset: 0x170, Size: 0x10] 0x7aa07d6c00
	delegate OnResetDelegate;//[Offset: 0x180, Size: 0x10] 0x7aa07d6c80
	float MaxSimulationTimeStep;//[Offset: 0x190, Size: 0x4] 0x7a963ecaa0
	int MaxSimulationIterations;//[Offset: 0x194, Size: 0x4] 0x7a963ecb10
	InterpControlPoint[] ControlPoints;//[Offset: 0x198, Size: 0x10] 0x7aa07d6e80
	void StopSimulating(out const HitResult HitResult);// 0xffffff8523219000 0x7aa07c58e0
	void RestartMovement(float InitialDirection);// 0xffffff8523219000 0x7aa07c59c0
	void OnInterpToWaitEndDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xffffff8523219000 0x7aa07c5aa0
	void OnInterpToWaitBeginDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xffffff8523219000 0x7aa07c5b80
	void OnInterpToStopDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xffffff8523219000 0x7aa07c5c60
	void OnInterpToReverseDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xffffff8523219000 0x7aa07c5d40
	void OnInterpToResetDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xffffff8523219000 0x7aa07c5e20
	void FinaliseControlPoints();// 0xffffff8523219000 0x7aa07c5f00

--------------------------------
Class: InterpControlPoint
	Vector PositionControlPoint;//[Offset: 0x0, Size: 0xc] 0x7aa07d6d00
	bool bPositionIsRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7aa07d6d80

--------------------------------
Class: InterpTrackFloatBase.InterpTrack.Object
	InterpCurveFloat FloatTrack;//[Offset: 0x70, Size: 0x18] 0x7a9c624200
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x7a9cde6130

--------------------------------
Class: InterpTrackAnimControl.InterpTrackFloatBase.InterpTrack.Object
	FName SlotName;//[Offset: 0x8c, Size: 0x8] 0x7a9cde60c0
	AnimControlTrackKey[] AnimSeqs;//[Offset: 0x98, Size: 0x10] 0x7a9c624100
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x7a9c624180

--------------------------------
Class: AnimControlTrackKey
	float StartTime;//[Offset: 0x0, Size: 0x4] 0x7a9ca091c0
	AnimSequence* AnimSeq;//[Offset: 0x8, Size: 0x8] 0x7a9ca1d400
	float AnimStartOffset;//[Offset: 0x10, Size: 0x4] 0x7a9ca09230
	float AnimEndOffset;//[Offset: 0x14, Size: 0x4] 0x7a9ca092a0
	float AnimPlayRate;//[Offset: 0x18, Size: 0x4] 0x7a9ca09310
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1] 0x7a9ca1d480
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1] 0x7a9ca1d500

--------------------------------
Class: InterpTrackVectorBase.InterpTrack.Object
	InterpCurveVector VectorTrack;//[Offset: 0x70, Size: 0x18] 0x7a9c624000
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x7a9cde6050

--------------------------------
Class: InterpTrackAudioMaster.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackBoolProp.InterpTrack.Object
	BoolTrackKey[] BoolTrack;//[Offset: 0x70, Size: 0x10] 0x7a9c623f80
	FName PropertyName;//[Offset: 0x80, Size: 0x8] 0x7a9cde5fe0

--------------------------------
Class: BoolTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7a9ca09150
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x7a9ca1d380

--------------------------------
Class: InterpTrackColorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x7a9cde5f70

--------------------------------
Class: InterpTrackColorScale.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackDirector.InterpTrack.Object
	DirectorTrackCut[] CutTrack;//[Offset: 0x70, Size: 0x10] 0x7a9c623e00
	bool bSimulateCameraCutsOnClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9c623e80

--------------------------------
Class: DirectorTrackCut
	float Time;//[Offset: 0x0, Size: 0x4] 0x7a9ca0ac70
	float TransitionTime;//[Offset: 0x4, Size: 0x4] 0x7a9ca0ace0
	FName TargetCamGroup;//[Offset: 0x8, Size: 0x8] 0x7a9ca09070
	int ShotNumber;//[Offset: 0x10, Size: 0x4] 0x7a9ca090e0

--------------------------------
Class: InterpTrackEvent.InterpTrack.Object
	EventTrackKey[] EventTrack;//[Offset: 0x70, Size: 0x10] 0x7a9c623b00
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9c623b80
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7a9c623c00
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x7a9c623c80
	bool bUseCustomEventName;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x7a9c623d00

--------------------------------
Class: EventTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7a9ca0ab90
	FName EventName;//[Offset: 0x4, Size: 0x8] 0x7a9ca0ac00

--------------------------------
Class: InterpTrackFade.InterpTrackFloatBase.InterpTrack.Object
	bool bPersistFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x7a9c623900
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x7a9c623980
	LinearColor FadeColor;//[Offset: 0x90, Size: 0x10] 0x7a9c623a00

--------------------------------
Class: InterpTrackFloatAnimBPParam.InterpTrackFloatBase.InterpTrack.Object
	class Object* AnimBlueprintClass;//[Offset: 0x90, Size: 0x8] 0x7a9c623800
	class AnimInstance* AnimClass;//[Offset: 0x98, Size: 0x8] 0x7a9c623880
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x7a9cde5f00

--------------------------------
Class: InterpTrackFloatMaterialParam.InterpTrackFloatBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10] 0x7a9c623780
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x7a9cde5e90

--------------------------------
Class: InterpTrackFloatParticleParam.InterpTrackFloatBase.InterpTrack.Object
	FName ParamName;//[Offset: 0x8c, Size: 0x8] 0x7a9cde5e20

--------------------------------
Class: InterpTrackFloatProp.InterpTrackFloatBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x7a9cde5db0

--------------------------------
Class: InterpTrackInstAnimControl.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x7a9cde5d40

--------------------------------
Class: InterpTrackInstAudioMaster.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstProperty.InterpTrackInst.Object
	Property* InterpProperty;//[Offset: 0x28, Size: 0x8] 0x7a9c623600
	Object* PropertyOuterObjectInst;//[Offset: 0x30, Size: 0x8] 0x7a9c623680

--------------------------------
Class: InterpTrackInstBoolProp.InterpTrackInstProperty.InterpTrackInst.Object
	BoolProperty* BoolProperty;//[Offset: 0x40, Size: 0x8] 0x7a9c623500
	bool ResetBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7a9c623580

--------------------------------
Class: InterpTrackInstColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Color ResetColor;//[Offset: 0x40, Size: 0x4] 0x7a9c623480

--------------------------------
Class: InterpTrackInstColorScale.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstEvent.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x7a9cde5cd0

--------------------------------
Class: InterpTrackInstFade.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstFloatAnimBPParam.InterpTrackInst.Object
	AnimInstance* AnimScriptInstance;//[Offset: 0x28, Size: 0x8] 0x7a9c623380
	float ResetFloat;//[Offset: 0x30, Size: 0x4] 0x7a9cde5c60

--------------------------------
Class: InterpTrackInstFloatMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10] 0x7a9c625200
	float[] ResetFloats;//[Offset: 0x38, Size: 0x10] 0x7a9c625280
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10] 0x7a9c623280
	InterpTrackFloatMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8] 0x7a9c623300

--------------------------------
Class: PrimitiveMaterialRef
	PrimitiveComponent* Primitive;//[Offset: 0x0, Size: 0x8] 0x7a9ca17680
	DecalComponent* Decal;//[Offset: 0x8, Size: 0x8] 0x7a9ca17700
	int ElementIndex;//[Offset: 0x10, Size: 0x4] 0x7a9ca067c0

--------------------------------
Class: InterpTrackInstFloatParticleParam.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x28, Size: 0x4] 0x7a9cde5b80

--------------------------------
Class: InterpTrackInstFloatProp.InterpTrackInstProperty.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x40, Size: 0x4] 0x7a9cde5b10

--------------------------------
Class: InterpTrackInstLinearColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	LinearColor ResetColor;//[Offset: 0x40, Size: 0x10] 0x7a9c625100

--------------------------------
Class: InterpTrackInstParticleReplay.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x7a9cde5aa0

--------------------------------
Class: InterpTrackInstSlomo.InterpTrackInst.Object
	float OldTimeDilation;//[Offset: 0x28, Size: 0x4] 0x7a9cde5a30

--------------------------------
Class: InterpTrackInstSound.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x7a9cde59c0
	AudioComponent* PlayAudioComp;//[Offset: 0x30, Size: 0x8] 0x7a9c624f80

--------------------------------
Class: InterpTrackInstToggle.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1] 0x7a9c624e80
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4] 0x7a9cde5950
	bool bSavedActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7a9c624f00

--------------------------------
Class: InterpTrackInstVectorMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10] 0x7a9c624b80
	Vector[] ResetVectors;//[Offset: 0x38, Size: 0x10] 0x7a9c624c80
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10] 0x7a9c624d80
	InterpTrackVectorMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8] 0x7a9c624e00

--------------------------------
Class: InterpTrackVectorMaterialParam.InterpTrackVectorBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10] 0x7a9c625c00
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x7a9cde7320

--------------------------------
Class: InterpTrackInstVectorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Vector ResetVector;//[Offset: 0x40, Size: 0xc] 0x7a9c624a80

--------------------------------
Class: InterpTrackInstVisibility.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1] 0x7a9c624a00
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4] 0x7a9cde58e0

--------------------------------
Class: InterpTrackLinearColorBase.InterpTrack.Object
	InterpCurveLinearColor LinearColorTrack;//[Offset: 0x70, Size: 0x18] 0x7a9c624980
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x7a9cde5870

--------------------------------
Class: InterpCurveLinearColor
	InterpCurvePointLinearColor[] Points;//[Offset: 0x0, Size: 0x10] 0x7af81c4480
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7af81c4500
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x7af958e9b0

--------------------------------
Class: InterpCurvePointLinearColor
	float InVal;//[Offset: 0x0, Size: 0x4] 0x7af958ea20
	LinearColor OutVal;//[Offset: 0x4, Size: 0x10] 0x7af81c4580
	LinearColor ArriveTangent;//[Offset: 0x14, Size: 0x10] 0x7af81c4600
	LinearColor LeaveTangent;//[Offset: 0x24, Size: 0x10] 0x7af81c4680
	byte InterpMode;//[Offset: 0x34, Size: 0x1] 0x7af81c4700

--------------------------------
Class: InterpTrackLinearColorProp.InterpTrackLinearColorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x7a9cde5800

--------------------------------
Class: InterpTrackMoveAxis.InterpTrackFloatBase.InterpTrack.Object
	byte MoveAxis;//[Offset: 0x8c, Size: 0x1] 0x7a9c624380
	InterpLookupTrack LookupTrack;//[Offset: 0x90, Size: 0x10] 0x7a9c624400

--------------------------------
Class: InterpTrackParticleReplay.InterpTrack.Object
	ParticleReplayTrackKey[] TrackKeys;//[Offset: 0x70, Size: 0x10] 0x7a9c624300

--------------------------------
Class: ParticleReplayTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7a9ca0a960
	float Duration;//[Offset: 0x4, Size: 0x4] 0x7a9ca0a9d0
	int ClipIDNumber;//[Offset: 0x8, Size: 0x4] 0x7a9ca0aa40

--------------------------------
Class: InterpTrackSlomo.InterpTrackFloatBase.InterpTrack.Object

--------------------------------
Class: InterpTrackSound.InterpTrackVectorBase.InterpTrack.Object
	SoundTrackKey[] Sounds;//[Offset: 0x90, Size: 0x10] 0x7a9c626080
	bool bPlayOnReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7a9c626100
	bool bContinueSoundOnMatineeEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x7a9c626180
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1] 0x7a9c626200
	bool bTreatAsDialogue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1] 0x7a9c626280
	bool bAttach;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1] 0x7a9c626300

--------------------------------
Class: SoundTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7a9ca0a810
	float Volume;//[Offset: 0x4, Size: 0x4] 0x7a9ca0a880
	float Pitch;//[Offset: 0x8, Size: 0x4] 0x7a9ca0a8f0
	SoundBase* Sound;//[Offset: 0x10, Size: 0x8] 0x7a9ca1d200

--------------------------------
Class: InterpTrackToggle.InterpTrack.Object
	ToggleTrackKey[] ToggleTrack;//[Offset: 0x70, Size: 0x10] 0x7a9c625d00
	bool bActivateSystemEachUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9c625d80
	bool bActivateWithJustAttachedFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7a9c625e00
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x7a9c625e80
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x7a9c625f00
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x80, Size: 0x1] 0x7a9c625f80

--------------------------------
Class: ToggleTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7a9ca0a7a0
	byte ToggleAction;//[Offset: 0x4, Size: 0x1] 0x7a9ca1d180

--------------------------------
Class: InterpTrackVectorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x7a9cde72b0

--------------------------------
Class: InterpTrackVisibility.InterpTrack.Object
	VisibilityTrackKey[] VisibilityTrack;//[Offset: 0x70, Size: 0x10] 0x7a9c625980
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9c625a00
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7a9c625a80
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x7a9c625b00

--------------------------------
Class: VisibilityTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7a9ca0a730
	byte Action;//[Offset: 0x4, Size: 0x1] 0x7a9ca1d080
	byte ActiveCondition;//[Offset: 0x5, Size: 0x1] 0x7a9ca1d100

--------------------------------
Class: IntSerialization.Object
	uint16 UnsignedInt16Variable;//[Offset: 0x28, Size: 0x2] 0x7a9cde6fa0
	uint32 UnsignedInt32Variable;//[Offset: 0x2c, Size: 0x4] 0x7a9cde7010
	uint64 UnsignedInt64Variable;//[Offset: 0x30, Size: 0x8] 0x7a9cde7080
	int8 SignedInt8Variable;//[Offset: 0x38, Size: 0x1] 0x7a9cde70f0
	int16 SignedInt16Variable;//[Offset: 0x3a, Size: 0x2] 0x7a9cde7160
	int64 SignedInt64Variable;//[Offset: 0x40, Size: 0x8] 0x7a9cde71d0
	byte UnsignedInt8Variable;//[Offset: 0x48, Size: 0x1] 0x7a9c625880
	int SignedInt32Variable;//[Offset: 0x4c, Size: 0x4] 0x7a9cde7240

--------------------------------
Class: KillZVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: KismetArrayLibrary.BlueprintFunctionLibrary.Object
	void SetArrayPropertyByName(Object* Object, FName PropertyName, out const int[] Value);// 0xffffff8523219000 0x7a9cdf7860
	void FilterArray(out const Actor*[] TargetArray, class Actor FilterClass, out Actor*[] FilteredArray);// 0xffffff8523219000 0x7a9cdf7940
	void Array_Swap(out const int[] TargetArray, int FirstIndex, int SecondIndex);// 0xffffff8523219000 0x7a9cdf7a20
	void Array_Shuffle(out const int[] TargetArray);// 0xffffff8523219000 0x7a9cdf7b00
	void Array_Set(out const int[] TargetArray, int Index, out const int Item, bool bSizeToFit);// 0xffffff8523219000 0x7a9cdf7be0
	void Array_Resize(out const int[] TargetArray, int Size);// 0xffffff8523219000 0x7a9cdf7cc0
	bool Array_RemoveItem(out const int[] TargetArray, out const int Item);// 0xffffff8523219000 0x7a9cdf7da0
	void Array_Remove(out const int[] TargetArray, int IndexToRemove);// 0xffffff8523219000 0x7a9cdf7e80
	int Array_Length(out const int[] TargetArray);// 0xffffff8523219000 0x7a9cdf7f60
	int Array_LastIndex(out const int[] TargetArray);// 0xffffff8523219000 0x7a9cdf8040
	bool Array_IsValidIndex(out const int[] TargetArray, int IndexToTest);// 0xffffff8523219000 0x7a9cdf8120
	void Array_Insert(out const int[] TargetArray, out const int NewItem, int Index);// 0xffffff8523219000 0x7a9cdf8200
	bool Array_Identical(out const int[] ArrayA, out const int[] ArrayB);// 0xffffff8523219000 0x7a9cdf82e0
	void Array_Get(out const int[] TargetArray, int Index, out int Item);// 0xffffff8523219000 0x7a9cdf83c0
	int Array_Find(out const int[] TargetArray, out const int ItemToFind);// 0xffffff8523219000 0x7a9cdf84a0
	bool Array_Contains(out const int[] TargetArray, out const int ItemToFind);// 0xffffff8523219000 0x7a9cdf8580
	void Array_Clear(out const int[] TargetArray);// 0xffffff8523219000 0x7a9cdf8660
	void Array_Append(out const int[] TargetArray, out const int[] SourceArray);// 0xffffff8523219000 0x7a9cdf8740
	int Array_AddUnique(out const int[] TargetArray, out const int NewItem);// 0xffffff8523219000 0x7a9cdf8820
	int Array_Add(out const int[] TargetArray, out const int NewItem);// 0xffffff8523219000 0x7a9cdf8900

--------------------------------
Class: KismetGuidLibrary.BlueprintFunctionLibrary.Object
	void Parse_StringToGuid(FString GuidString, out Guid OutGuid, out bool Success);// 0xffffff8523219000 0x7a9cdfac00
	bool NotEqual_GuidGuid(out const Guid A, out const Guid B);// 0xffffff8523219000 0x7a9cdface0
	Guid NewGuid();// 0xffffff8523219000 0x7a9cdf7400
	bool IsValid_Guid(out const Guid InGuid);// 0xffffff8523219000 0x7a9cdf74e0
	void Invalidate_Guid(out Guid InGuid);// 0xffffff8523219000 0x7a9cdf75c0
	bool EqualEqual_GuidGuid(out const Guid A, out const Guid B);// 0xffffff8523219000 0x7a9cdf76a0
	FString Conv_GuidToString(out const Guid InGuid);// 0xffffff8523219000 0x7a9cdf7780

--------------------------------
Class: KismetInputLibrary.BlueprintFunctionLibrary.Object
	bool PointerEvent_IsTouchEvent(out const PointerEvent Input);// 0xffffff8523219000 0x7a9cdfc3a0
	bool PointerEvent_IsMouseButtonDown(out const PointerEvent Input, Key MouseButton);// 0xffffff8523219000 0x7a9cdfc480
	float PointerEvent_GetWheelDelta(out const PointerEvent Input);// 0xffffff8523219000 0x7a9cdfc560
	int PointerEvent_GetUserIndex(out const PointerEvent Input);// 0xffffff8523219000 0x7a9cdfc640
	int PointerEvent_GetTouchpadIndex(out const PointerEvent Input);// 0xffffff8523219000 0x7a9cdfc720
	Vector2D PointerEvent_GetScreenSpacePosition(out const PointerEvent Input);// 0xffffff8523219000 0x7a9cdfc800
	int PointerEvent_GetPointerIndex(out const PointerEvent Input);// 0xffffff8523219000 0x7a9cdfc8e0
	Vector2D PointerEvent_GetLastScreenSpacePosition(out const PointerEvent Input);// 0xffffff8523219000 0x7a9cdfc9c0
	enum PointerEvent_GetGestureType(out const PointerEvent Input);// 0xffffff8523219000 0x7a9cdf90e0
	Vector2D PointerEvent_GetGestureDelta(out const PointerEvent Input);// 0xffffff8523219000 0x7a9cdf91c0
	Key PointerEvent_GetEffectingButton(out const PointerEvent Input);// 0xffffff8523219000 0x7a9cdf92a0
	Vector2D PointerEvent_GetCursorDelta(out const PointerEvent Input);// 0xffffff8523219000 0x7a9cdf9380
	bool Key_IsVectorAxis(out const Key Key);// 0xffffff8523219000 0x7a9cdf9460
	bool Key_IsValid(out const Key Key);// 0xffffff8523219000 0x7a9cdf9540
	bool Key_IsMouseButton(out const Key Key);// 0xffffff8523219000 0x7a9cdf9620
	bool Key_IsModifierKey(out const Key Key);// 0xffffff8523219000 0x7a9cdf9700
	bool Key_IsKeyboardKey(out const Key Key);// 0xffffff8523219000 0x7a9cdf97e0
	bool Key_IsGamepadKey(out const Key Key);// 0xffffff8523219000 0x7a9cdf98c0
	bool Key_IsFloatAxis(out const Key Key);// 0xffffff8523219000 0x7a9cdf99a0
	FText Key_GetDisplayName(out const Key Key);// 0xffffff8523219000 0x7a9cdf9a80
	bool InputEvent_IsShiftDown(out const InputEvent Input);// 0xffffff8523219000 0x7a9cdf9b60
	bool InputEvent_IsRightShiftDown(out const InputEvent Input);// 0xffffff8523219000 0x7a9cdf9c40
	bool InputEvent_IsRightControlDown(out const InputEvent Input);// 0xffffff8523219000 0x7a9cdf9d20
	bool InputEvent_IsRightCommandDown(out const InputEvent Input);// 0xffffff8523219000 0x7a9cdf9e00
	bool InputEvent_IsRightAltDown(out const InputEvent Input);// 0xffffff8523219000 0x7a9cdf9ee0
	bool InputEvent_IsRepeat(out const InputEvent Input);// 0xffffff8523219000 0x7a9cdf9fc0
	bool InputEvent_IsLeftShiftDown(out const InputEvent Input);// 0xffffff8523219000 0x7a9cdfa0a0
	bool InputEvent_IsLeftControlDown(out const InputEvent Input);// 0xffffff8523219000 0x7a9cdfa180
	bool InputEvent_IsLeftCommandDown(out const InputEvent Input);// 0xffffff8523219000 0x7a9cdfa260
	bool InputEvent_IsLeftAltDown(out const InputEvent Input);// 0xffffff8523219000 0x7a9cdfa340
	bool InputEvent_IsControlDown(out const InputEvent Input);// 0xffffff8523219000 0x7a9cdfa420
	bool InputEvent_IsCommandDown(out const InputEvent Input);// 0xffffff8523219000 0x7a9cdfa500
	bool InputEvent_IsAltDown(out const InputEvent Input);// 0xffffff8523219000 0x7a9cdfa5e0
	int GetUserIndex(out const KeyEvent Input);// 0xffffff8523219000 0x7a9cdfa6c0
	Key GetKey(out const KeyEvent Input);// 0xffffff8523219000 0x7a9cdfa7a0
	float GetAnalogValue(out const AnalogInputEvent Input);// 0xffffff8523219000 0x7a9cdfa880
	bool EqualEqual_KeyKey(Key A, Key B);// 0xffffff8523219000 0x7a9cdfa960
	bool EqualEqual_InputChordInputChord(InputChord A, InputChord B);// 0xffffff8523219000 0x7a9cdfaa40
	void CalibrateTilt();// 0xffffff8523219000 0x7a9cdfab20

--------------------------------
Class: KismetInternationalizationLibrary.BlueprintFunctionLibrary.Object
	bool SetCurrentLocale(FString Culture, const bool SaveToConfig);// 0xffffff8523219000 0x7a9cdfb760
	bool SetCurrentLanguageAndLocale(FString Culture, const bool SaveToConfig);// 0xffffff8523219000 0x7a9cdfb840
	bool SetCurrentLanguage(FString Culture, const bool SaveToConfig);// 0xffffff8523219000 0x7a9cdfb920
	bool SetCurrentCulture(FString Culture, const bool SaveToConfig);// 0xffffff8523219000 0x7a9cdfba00
	bool SetCurrentAssetGroupCulture(const FName AssetGroup, FString Culture, const bool SaveToConfig);// 0xffffff8523219000 0x7a9cdfbae0
	FString GetSuitableCulture(out const FString[] AvailableCultures, FString CultureToMatch, FString FallbackCulture);// 0xffffff8523219000 0x7a9cdfbbc0
	FString GetNativeCulture(const enum TextCategory);// 0xffffff8523219000 0x7a9cdfbca0
	FString[] GetLocalizedCultures(const bool IncludeGame, const bool IncludeEngine, const bool IncludeEditor, const bool IncludeAdditional);// 0xffffff8523219000 0x7a9cdfbd80
	FString GetCurrentLocale();// 0xffffff8523219000 0x7a9cdfbe60
	FString GetCurrentLanguage();// 0xffffff8523219000 0x7a9cdfbf40
	FString GetCurrentCulture();// 0xffffff8523219000 0x7a9cdfc020
	FString GetCurrentAssetGroupCulture(const FName AssetGroup);// 0xffffff8523219000 0x7a9cdfc100
	FString GetCultureDisplayName(FString Culture, const bool Localized);// 0xffffff8523219000 0x7a9cdfc1e0
	void ClearCurrentAssetGroupCulture(const FName AssetGroup, const bool SaveToConfig);// 0xffffff8523219000 0x7a9cdfc2c0

--------------------------------
Class: KismetMaterialLibrary.BlueprintFunctionLibrary.Object
	void SetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, out const LinearColor ParameterValue);// 0xffffff8523219000 0x7a9cdfb300
	void SetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, float ParameterValue);// 0xffffff8523219000 0x7a9cdfb3e0
	LinearColor GetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0xffffff8523219000 0x7a9cdfb4c0
	float GetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0xffffff8523219000 0x7a9cdfb5a0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(Object* WorldContextObject, MaterialInterface* Parent, FName OptionalName);// 0xffffff8523219000 0x7a9cdfb680

--------------------------------
Class: KismetMathLibrary.BlueprintFunctionLibrary.Object
	int Xor_IntInt(int A, int B);// 0xffffff8523219000 0x7a9c69e080
	int64 Xor_Int64Int64(int64 A, int64 B);// 0xffffff8523219000 0x7a9c69e160
	float VSizeXYSquared(Vector A);// 0xffffff8523219000 0x7a9c69e240
	float VSizeXY(Vector A);// 0xffffff8523219000 0x7a9c69e320
	float VSizeSquared(Vector A);// 0xffffff8523219000 0x7a9c69e400
	float VSize2DSquared(Vector2D A);// 0xffffff8523219000 0x7a9c69e4e0
	float VSize2D(Vector2D A);// 0xffffff8523219000 0x7a9c69e5c0
	float VSize(Vector A);// 0xffffff8523219000 0x7a9c69e6a0
	Vector VLerp(Vector A, Vector B, float Alpha);// 0xffffff8523219000 0x7a9c69adc0
	Vector VInterpTo_Constant(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0xffffff8523219000 0x7a9c69aea0
	Vector VInterpTo(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0xffffff8523219000 0x7a9c69af80
	Vector VectorSpringInterp(Vector Current, Vector Target, out VectorSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0xffffff8523219000 0x7a9c69b060
	Vector Vector_Zero();// 0xffffff8523219000 0x7a9c69b140
	Vector Vector_Up();// 0xffffff8523219000 0x7a9c69b220
	void Vector_UnwindEuler(out Vector A);// 0xffffff8523219000 0x7a9c69b300
	Vector2D Vector_UnitCartesianToSpherical(Vector A);// 0xffffff8523219000 0x7a9c69b3e0
	Vector Vector_ToRadians(Vector A);// 0xffffff8523219000 0x7a9c69b4c0
	Vector Vector_ToDegrees(Vector A);// 0xffffff8523219000 0x7a9c69b5a0
	Vector Vector_SnappedToGrid(Vector InVect, float InGridSize);// 0xffffff8523219000 0x7a9c69b680
	void Vector_Set(out Vector A, float X, float Y, float Z);// 0xffffff8523219000 0x7a9c69b760
	Vector Vector_Right();// 0xffffff8523219000 0x7a9c69b840
	Vector Vector_Reciprocal(out const Vector A);// 0xffffff8523219000 0x7a9c69b920
	Vector Vector_ProjectOnToNormal(Vector V, Vector InNormal);// 0xffffff8523219000 0x7a9c69ba00
	Vector Vector_One();// 0xffffff8523219000 0x7a9c69bae0
	Vector Vector_NormalUnsafe(out const Vector A);// 0xffffff8523219000 0x7a9c69bbc0
	void Vector_Normalize(out Vector A, float Tolerance);// 0xffffff8523219000 0x7a9c69bca0
	Vector Vector_Normal2D(Vector A, float Tolerance);// 0xffffff8523219000 0x7a9c69bd80
	Vector Vector_MirrorByPlane(Vector A, out const Plane InPlane);// 0xffffff8523219000 0x7a9c69be60
	Vector Vector_Left();// 0xffffff8523219000 0x7a9c69bf40
	bool Vector_IsZero(out const Vector A);// 0xffffff8523219000 0x7a9c69c020
	bool Vector_IsUnit(out const Vector A, float SquaredLenthTolerance);// 0xffffff8523219000 0x7a9c69c100
	bool Vector_IsUniform(out const Vector A, float Tolerance);// 0xffffff8523219000 0x7a9c69c1e0
	bool Vector_IsNormal(out const Vector A);// 0xffffff8523219000 0x7a9c69c2c0
	bool Vector_IsNearlyZero(out const Vector A, float Tolerance);// 0xffffff8523219000 0x7a9c69c3a0
	bool Vector_IsNAN(out const Vector A);// 0xffffff8523219000 0x7a9c69c480
	float Vector_HeadingAngle(Vector A);// 0xffffff8523219000 0x7a9c69c560
	Vector Vector_GetSignVector(Vector A);// 0xffffff8523219000 0x7a9c69c640
	Vector Vector_GetProjection(Vector A);// 0xffffff8523219000 0x7a9c69c720
	float Vector_GetAbsMin(Vector A);// 0xffffff8523219000 0x7a9c69c800
	float Vector_GetAbsMax(Vector A);// 0xffffff8523219000 0x7a9c69c8e0
	Vector Vector_GetAbs(Vector A);// 0xffffff8523219000 0x7a9c69c9c0
	Vector Vector_Forward();// 0xffffff8523219000 0x7a9c6990e0
	Vector Vector_Down();// 0xffffff8523219000 0x7a9c6991c0
	float Vector_DistanceSquared(Vector v1, Vector v2);// 0xffffff8523219000 0x7a9c6992a0
	float Vector_Distance2DSquared(Vector v1, Vector v2);// 0xffffff8523219000 0x7a9c699380
	float Vector_Distance2D(Vector v1, Vector v2);// 0xffffff8523219000 0x7a9c699460
	float Vector_Distance(Vector v1, Vector v2);// 0xffffff8523219000 0x7a9c699540
	float Vector_CosineAngle2D(Vector A, Vector B);// 0xffffff8523219000 0x7a9c699620
	Vector Vector_ComponentMin(Vector A, Vector B);// 0xffffff8523219000 0x7a9c699700
	Vector Vector_ComponentMax(Vector A, Vector B);// 0xffffff8523219000 0x7a9c6997e0
	Vector Vector_ClampSizeMax2D(Vector A, float Max);// 0xffffff8523219000 0x7a9c6998c0
	Vector Vector_ClampSizeMax(Vector A, float Max);// 0xffffff8523219000 0x7a9c6999a0
	Vector Vector_ClampSize2D(Vector A, float Min, float Max);// 0xffffff8523219000 0x7a9c699a80
	Vector Vector_BoundedToCube(Vector InVect, float InRadius);// 0xffffff8523219000 0x7a9c699b60
	Vector Vector_BoundedToBox(Vector InVect, Vector InBoxMin, Vector InBoxMax);// 0xffffff8523219000 0x7a9c699c40
	Vector Vector_Backward();// 0xffffff8523219000 0x7a9c699d20
	void Vector_Assign(out Vector A, out const Vector InVector);// 0xffffff8523219000 0x7a9c699e00
	void Vector_AddBounded(out Vector A, Vector InAddVect, float InRadius);// 0xffffff8523219000 0x7a9c699ee0
	Vector4 Vector4_Zero();// 0xffffff8523219000 0x7a9c699fc0
	float Vector4_SizeSquared3(out const Vector4 A);// 0xffffff8523219000 0x7a9c69a0a0
	float Vector4_SizeSquared(out const Vector4 A);// 0xffffff8523219000 0x7a9c69a180
	float Vector4_Size3(out const Vector4 A);// 0xffffff8523219000 0x7a9c69a260
	float Vector4_Size(out const Vector4 A);// 0xffffff8523219000 0x7a9c69a340
	void Vector4_Set(out Vector4 A, float X, float Y, float Z, float W);// 0xffffff8523219000 0x7a9c69a420
	Vector4 Vector4_NormalUnsafe3(out const Vector4 A);// 0xffffff8523219000 0x7a9c69a500
	void Vector4_Normalize3(out Vector4 A, float Tolerance);// 0xffffff8523219000 0x7a9c69a5e0
	Vector4 Vector4_Normal3(out const Vector4 A, float Tolerance);// 0xffffff8523219000 0x7a9c69a6c0
	Vector4 Vector4_Negated(out const Vector4 A);// 0xffffff8523219000 0x7a9c69a7a0
	Vector4 Vector4_MirrorByVector3(out const Vector4 Direction, out const Vector4 SurfaceNormal);// 0xffffff8523219000 0x7a9c69a880
	bool Vector4_IsZero(out const Vector4 A);// 0xffffff8523219000 0x7a9c69a960
	bool Vector4_IsUnit3(out const Vector4 A, float SquaredLenthTolerance);// 0xffffff8523219000 0x7a9c69aa40
	bool Vector4_IsNormal3(out const Vector4 A);// 0xffffff8523219000 0x7a9c69ab20
	bool Vector4_IsNearlyZero3(out const Vector4 A, float Tolerance);// 0xffffff8523219000 0x7a9c69ac00
	bool Vector4_IsNAN(out const Vector4 A);// 0xffffff8523219000 0x7a9c69ace0
	float Vector4_DotProduct3(out const Vector4 A, out const Vector4 B);// 0xffffff8523219000 0x7a9c697400
	float Vector4_DotProduct(out const Vector4 A, out const Vector4 B);// 0xffffff8523219000 0x7a9c6974e0
	Vector4 Vector4_CrossProduct3(out const Vector4 A, out const Vector4 B);// 0xffffff8523219000 0x7a9c6975c0
	void Vector4_Assign(out Vector4 A, out const Vector4 InVector);// 0xffffff8523219000 0x7a9c6976a0
	Vector2D Vector2DInterpTo_Constant(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0xffffff8523219000 0x7a9c697780
	Vector2D Vector2DInterpTo(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0xffffff8523219000 0x7a9c697860
	Vector2D Vector2D_Zero();// 0xffffff8523219000 0x7a9c697940
	Vector2D Vector2D_Unit45Deg();// 0xffffff8523219000 0x7a9c697a20
	Vector2D Vector2D_One();// 0xffffff8523219000 0x7a9c697b00
	Vector VEase(Vector A, Vector B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0xffffff8523219000 0x7a9c697be0
	DateTime UtcNow();// 0xffffff8523219000 0x7a9c697cc0
	Rotator TransformRotation(out const Transform T, Rotator Rotation);// 0xffffff8523219000 0x7a9c697da0
	Vector TransformLocation(out const Transform T, Vector Location);// 0xffffff8523219000 0x7a9c697e80
	Vector TransformDirection(out const Transform T, Vector Direction);// 0xffffff8523219000 0x7a9c697f60
	float Transform_Determinant(out const Transform Transform);// 0xffffff8523219000 0x7a9c698040
	Vector2D ToSign2D(Vector2D A);// 0xffffff8523219000 0x7a9c698120
	Vector2D ToRounded2D(Vector2D A);// 0xffffff8523219000 0x7a9c698200
	void ToDirectionAndLength2D(Vector2D A, out Vector2D OutDir, out float OutLength);// 0xffffff8523219000 0x7a9c6982e0
	DateTime Today();// 0xffffff8523219000 0x7a9c6983c0
	Transform TLerp(out const Transform A, out const Transform B, float Alpha, byte InterpMode);// 0xffffff8523219000 0x7a9c6984a0
	Transform TInterpTo(out const Transform Current, out const Transform Target, float DeltaTime, float InterpSpeed);// 0xffffff8523219000 0x7a9c698580
	Timespan TimespanZeroValue();// 0xffffff8523219000 0x7a9c698660
	float TimespanRatio(Timespan A, Timespan B);// 0xffffff8523219000 0x7a9c698740
	Timespan TimespanMinValue();// 0xffffff8523219000 0x7a9c698820
	Timespan TimespanMaxValue();// 0xffffff8523219000 0x7a9c698900
	bool TimespanFromString(FString TimespanString, out Timespan Result);// 0xffffff8523219000 0x7a9c6989e0
	Transform TEase(out const Transform A, out const Transform B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0xffffff8523219000 0x7a9c698ac0
	float Tan(float A);// 0xffffff8523219000 0x7a9c698ba0
	Vector Subtract_VectorVector(Vector A, Vector B);// 0xffffff8523219000 0x7a9c698c80
	Vector Subtract_VectorInt(Vector A, int B);// 0xffffff8523219000 0x7a9c698d60
	Vector Subtract_VectorFloat(Vector A, float B);// 0xffffff8523219000 0x7a9c698e40
	Vector4 Subtract_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xffffff8523219000 0x7a9c698f20
	Vector2D Subtract_Vector2DVector2D(Vector2D A, Vector2D B);// 0xffffff8523219000 0x7a9c699000
	Vector2D Subtract_Vector2DFloat(Vector2D A, float B);// 0xffffff8523219000 0x7a9c695720
	Timespan Subtract_TimespanTimespan(Timespan A, Timespan B);// 0xffffff8523219000 0x7a9c695800
	Quat Subtract_QuatQuat(out const Quat A, out const Quat B);// 0xffffff8523219000 0x7a9c6958e0
	LinearColor Subtract_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xffffff8523219000 0x7a9c6959c0
	int Subtract_IntInt(int A, int B);// 0xffffff8523219000 0x7a9c695aa0
	int64 Subtract_Int64Int64(int64 A, int64 B);// 0xffffff8523219000 0x7a9c695b80
	float Subtract_FloatFloat(float A, float B);// 0xffffff8523219000 0x7a9c695c60
	DateTime Subtract_DateTimeTimespan(DateTime A, Timespan B);// 0xffffff8523219000 0x7a9c695d40
	Timespan Subtract_DateTimeDateTime(DateTime A, DateTime B);// 0xffffff8523219000 0x7a9c695e20
	byte Subtract_ByteByte(byte A, byte B);// 0xffffff8523219000 0x7a9c695f00
	float Square(float A);// 0xffffff8523219000 0x7a9c695fe0
	float Sqrt(float A);// 0xffffff8523219000 0x7a9c6960c0
	Vector Spherical2DToUnitCartesian(Vector2D A);// 0xffffff8523219000 0x7a9c6961a0
	float Sin(float A);// 0xffffff8523219000 0x7a9c696280
	int64 SignOfInteger64(int64 A);// 0xffffff8523219000 0x7a9c696360
	int SignOfInteger(int A);// 0xffffff8523219000 0x7a9c696440
	float SignOfFloat(float A);// 0xffffff8523219000 0x7a9c696520
	void SetRandomStreamSeed(out RandomStream Stream, int NewSeed);// 0xffffff8523219000 0x7a9c696600
	void Set2D(out Vector2D A, float X, float Y);// 0xffffff8523219000 0x7a9c6966e0
	Vector SelectVector(Vector A, Vector B, bool bPickA);// 0xffffff8523219000 0x7a9c6967c0
	Transform SelectTransform(out const Transform A, out const Transform B, bool bPickA);// 0xffffff8523219000 0x7a9c6968a0
	FString SelectString(FString A, FString B, bool bPickA);// 0xffffff8523219000 0x7a9c696980
	Rotator SelectRotator(Rotator A, Rotator B, bool bPickA);// 0xffffff8523219000 0x7a9c696a60
	Object* SelectObject(Object* A, Object* B, bool bSelectA);// 0xffffff8523219000 0x7a9c696b40
	int SelectInt(int A, int B, bool bPickA);// 0xffffff8523219000 0x7a9c696c20
	float SelectFloat(float A, float B, bool bPickA);// 0xffffff8523219000 0x7a9c696d00
	LinearColor SelectColor(LinearColor A, LinearColor B, bool bPickA);// 0xffffff8523219000 0x7a9c696de0
	class Object SelectClass(class Object A, class Object B, bool bSelectA);// 0xffffff8523219000 0x7a9c696ec0
	void SeedRandomStream(out RandomStream Stream);// 0xffffff8523219000 0x7a9c696fa0
	int64 Round64(float A);// 0xffffff8523219000 0x7a9c697080
	int Round(float A);// 0xffffff8523219000 0x7a9c697160
	Rotator RotatorFromAxisAndAngle(Vector Axis, float Angle);// 0xffffff8523219000 0x7a9c697240
	Vector RotateAngleAxis(Vector InVect, float AngleDeg, Vector Axis);// 0xffffff8523219000 0x7a9c697320
	Rotator RLerp(Rotator A, Rotator B, float Alpha, bool bShortestPath);// 0xffffff8523219000 0x7a9c693a40
	Rotator RInterpTo_Constant(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0xffffff8523219000 0x7a9c693b20
	Rotator RInterpTo(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0xffffff8523219000 0x7a9c693c00
	void RGBToHSV_Vector(LinearColor RGB, out LinearColor HSV);// 0xffffff8523219000 0x7a9c693ce0
	void RGBToHSV(LinearColor InColor, out float H, out float S, out float V, out float A);// 0xffffff8523219000 0x7a9c693dc0
	LinearColor RGBLinearToHSV(LinearColor RGB);// 0xffffff8523219000 0x7a9c693ea0
	void ResetVectorSpringState(out VectorSpringState SpringState);// 0xffffff8523219000 0x7a9c693f80
	void ResetRandomStream(out const RandomStream Stream);// 0xffffff8523219000 0x7a9c694060
	void ResetFloatSpringState(out FloatSpringState SpringState);// 0xffffff8523219000 0x7a9c694140
	Rotator REase(Rotator A, Rotator B, float Alpha, bool bShortestPath, byte EasingFunc, float BlendExp, int Steps);// 0xffffff8523219000 0x7a9c694220
	Vector RandomUnitVectorInEllipticalConeInRadiansFromStream(out const Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians, out const RandomStream Stream);// 0xffffff8523219000 0x7a9c694300
	Vector RandomUnitVectorInEllipticalConeInRadians(Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);// 0xffffff8523219000 0x7a9c6943e0
	Vector RandomUnitVectorInEllipticalConeInDegreesFromStream(out const Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, out const RandomStream Stream);// 0xffffff8523219000 0x7a9c6944c0
	Vector RandomUnitVectorInEllipticalConeInDegrees(Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);// 0xffffff8523219000 0x7a9c6945a0
	Vector RandomUnitVectorInConeInRadiansFromStream(out const Vector ConeDir, float ConeHalfAngleInRadians, out const RandomStream Stream);// 0xffffff8523219000 0x7a9c694680
	Vector RandomUnitVectorInConeInRadians(Vector ConeDir, float ConeHalfAngleInRadians);// 0xffffff8523219000 0x7a9c694760
	Vector RandomUnitVectorInConeInDegreesFromStream(out const Vector ConeDir, float ConeHalfAngleInDegrees, out const RandomStream Stream);// 0xffffff8523219000 0x7a9c694840
	Vector RandomUnitVectorInConeInDegrees(Vector ConeDir, float ConeHalfAngleInDegrees);// 0xffffff8523219000 0x7a9c694920
	Vector RandomUnitVectorFromStream(out const RandomStream Stream);// 0xffffff8523219000 0x7a9c694a00
	Vector RandomUnitVector();// 0xffffff8523219000 0x7a9c694ae0
	Rotator RandomRotatorFromStream(bool bRoll, out const RandomStream Stream);// 0xffffff8523219000 0x7a9c694bc0
	Rotator RandomRotator(bool bRoll);// 0xffffff8523219000 0x7a9c694ca0
	Vector RandomPointInBoundingBox(Vector Origin, Vector BoxExtent);// 0xffffff8523219000 0x7a9c694d80
	int RandomIntegerInRangeFromStream(int Min, int Max, out const RandomStream Stream);// 0xffffff8523219000 0x7a9c694e60
	int RandomIntegerInRange(int Min, int Max);// 0xffffff8523219000 0x7a9c694f40
	int RandomIntegerFromStream(int Max, out const RandomStream Stream);// 0xffffff8523219000 0x7a9c695020
	int64 RandomInteger64InRange(int64 Min, int64 Max);// 0xffffff8523219000 0x7a9c695100
	int64 RandomInteger64(int64 Max);// 0xffffff8523219000 0x7a9c6951e0
	int RandomInteger(int Max);// 0xffffff8523219000 0x7a9c6952c0
	float RandomFloatInRangeFromStream(float Min, float Max, out const RandomStream Stream);// 0xffffff8523219000 0x7a9c6953a0
	float RandomFloatInRange(float Min, float Max);// 0xffffff8523219000 0x7a9c695480
	float RandomFloatFromStream(out const RandomStream Stream);// 0xffffff8523219000 0x7a9c695560
	float RandomFloat();// 0xffffff8523219000 0x7a9c695640
	bool RandomBoolWithWeightFromStream(float Weight, out const RandomStream RandomStream);// 0xffffff8523219000 0x7a9c691d60
	bool RandomBoolWithWeight(float Weight);// 0xffffff8523219000 0x7a9c691e40
	bool RandomBoolFromStream(out const RandomStream Stream);// 0xffffff8523219000 0x7a9c691f20
	bool RandomBool();// 0xffffff8523219000 0x7a9c692000
	float RadiansToDegrees(float A);// 0xffffff8523219000 0x7a9c6920e0
	Vector Quat_VectorUp(out const Quat Q);// 0xffffff8523219000 0x7a9c6921c0
	Vector Quat_VectorRight(out const Quat Q);// 0xffffff8523219000 0x7a9c6922a0
	Vector Quat_VectorForward(out const Quat Q);// 0xffffff8523219000 0x7a9c692380
	Vector Quat_UnrotateVector(out const Quat Q, out const Vector V);// 0xffffff8523219000 0x7a9c692460
	float Quat_SizeSquared(out const Quat Q);// 0xffffff8523219000 0x7a9c692540
	float Quat_Size(out const Quat Q);// 0xffffff8523219000 0x7a9c692620
	void Quat_SetFromEuler(out Quat Q, out const Vector Euler);// 0xffffff8523219000 0x7a9c692700
	void Quat_SetComponents(out Quat Q, float X, float Y, float Z, float W);// 0xffffff8523219000 0x7a9c6927e0
	Rotator Quat_Rotator(out const Quat Q);// 0xffffff8523219000 0x7a9c6928c0
	Vector Quat_RotateVector(out const Quat Q, out const Vector V);// 0xffffff8523219000 0x7a9c6929a0
	Quat Quat_Normalized(out const Quat Q, float Tolerance);// 0xffffff8523219000 0x7a9c692a80
	void Quat_Normalize(out Quat Q, float Tolerance);// 0xffffff8523219000 0x7a9c692b60
	Quat Quat_MakeFromEuler(out const Vector Euler);// 0xffffff8523219000 0x7a9c692c40
	Quat Quat_Log(out const Quat Q);// 0xffffff8523219000 0x7a9c692d20
	bool Quat_IsNormalized(out const Quat Q);// 0xffffff8523219000 0x7a9c692e00
	bool Quat_IsNonFinite(out const Quat Q);// 0xffffff8523219000 0x7a9c692ee0
	bool Quat_IsIdentity(out const Quat Q, float Tolerance);// 0xffffff8523219000 0x7a9c692fc0
	bool Quat_IsFinite(out const Quat Q);// 0xffffff8523219000 0x7a9c6930a0
	Quat Quat_Inversed(out const Quat Q);// 0xffffff8523219000 0x7a9c693180
	Quat Quat_Identity();// 0xffffff8523219000 0x7a9c693260
	Vector Quat_GetRotationAxis(out const Quat Q);// 0xffffff8523219000 0x7a9c693340
	Vector Quat_GetAxisZ(out const Quat Q);// 0xffffff8523219000 0x7a9c693420
	Vector Quat_GetAxisY(out const Quat Q);// 0xffffff8523219000 0x7a9c693500
	Vector Quat_GetAxisX(out const Quat Q);// 0xffffff8523219000 0x7a9c6935e0
	float Quat_GetAngle(out const Quat Q);// 0xffffff8523219000 0x7a9c6936c0
	Quat Quat_Exp(out const Quat Q);// 0xffffff8523219000 0x7a9c6937a0
	Vector Quat_Euler(out const Quat Q);// 0xffffff8523219000 0x7a9c693880
	void Quat_EnforceShortestArcWith(out Quat A, out const Quat B);// 0xffffff8523219000 0x7a9c693960
	float Quat_AngularDistance(out const Quat A, out const Quat B);// 0xffffff8523219000 0x7a9c690080
	Vector ProjectVectorOnToVector(Vector V, Vector Target);// 0xffffff8523219000 0x7a9c690160
	Vector ProjectVectorOnToPlane(Vector V, Vector PlaneNormal);// 0xffffff8523219000 0x7a9c690240
	Vector ProjectPointOnToPlane(Vector Point, Vector PlaneBase, Vector PlaneNormal);// 0xffffff8523219000 0x7a9c690320
	bool PointsAreCoplanar(out const Vector[] Points, float Tolerance);// 0xffffff8523219000 0x7a9c690400
	float PerlinNoise1D(const float Value);// 0xffffff8523219000 0x7a9c6904e0
	int Percent_IntInt(int A, int B);// 0xffffff8523219000 0x7a9c6905c0
	float Percent_FloatFloat(float A, float B);// 0xffffff8523219000 0x7a9c6906a0
	byte Percent_ByteByte(byte A, byte B);// 0xffffff8523219000 0x7a9c690780
	int Or_IntInt(int A, int B);// 0xffffff8523219000 0x7a9c690860
	int64 Or_Int64Int64(int64 A, int64 B);// 0xffffff8523219000 0x7a9c690940
	DateTime Now();// 0xffffff8523219000 0x7a9c690a20
	bool NotEqualExactly_VectorVector(Vector A, Vector B);// 0xffffff8523219000 0x7a9c690b00
	bool NotEqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xffffff8523219000 0x7a9c690be0
	bool NotEqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0xffffff8523219000 0x7a9c690cc0
	bool NotEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0xffffff8523219000 0x7a9c690da0
	bool NotEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0xffffff8523219000 0x7a9c690e80
	bool NotEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0xffffff8523219000 0x7a9c690f60
	bool NotEqual_TimespanTimespan(Timespan A, Timespan B);// 0xffffff8523219000 0x7a9c691040
	bool NotEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0xffffff8523219000 0x7a9c691120
	bool NotEqual_QuatQuat(out const Quat A, out const Quat B, float ErrorTolerance);// 0xffffff8523219000 0x7a9c691200
	bool NotEqual_ObjectObject(Object* A, Object* B);// 0xffffff8523219000 0x7a9c6912e0
	bool NotEqual_NameName(FName A, FName B);// 0xffffff8523219000 0x7a9c6913c0
	bool NotEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xffffff8523219000 0x7a9c6914a0
	bool NotEqual_IntInt(int A, int B);// 0xffffff8523219000 0x7a9c691580
	bool NotEqual_Int64Int64(int64 A, int64 B);// 0xffffff8523219000 0x7a9c691660
	bool NotEqual_FloatFloat(float A, float B);// 0xffffff8523219000 0x7a9c691740
	bool NotEqual_DateTimeDateTime(DateTime A, DateTime B);// 0xffffff8523219000 0x7a9c691820
	bool NotEqual_ClassClass(class Object A, class Object B);// 0xffffff8523219000 0x7a9c691900
	bool NotEqual_ByteByte(byte A, byte B);// 0xffffff8523219000 0x7a9c6919e0
	bool NotEqual_BoolBool(bool A, bool B);// 0xffffff8523219000 0x7a9c691ac0
	bool Not_PreBool(bool A);// 0xffffff8523219000 0x7a9c691ba0
	int64 Not_Int64(int64 A);// 0xffffff8523219000 0x7a9c691c80
	int Not_Int(int A);// 0xffffff8523219000 0x7a9c66e780
	Vector2D NormalSafe2D(Vector2D A, float Tolerance);// 0xffffff8523219000 0x7a9c66e860
	float NormalizeToRange(float Value, float RangeMin, float RangeMax);// 0xffffff8523219000 0x7a9c66e940
	Rotator NormalizedDeltaRotator(Rotator A, Rotator B);// 0xffffff8523219000 0x7a9c66ea20
	float NormalizeAxis(float Angle);// 0xffffff8523219000 0x7a9c66eb00
	void Normalize2D(out Vector2D A, float Tolerance);// 0xffffff8523219000 0x7a9c66ebe0
	Vector2D Normal2D(Vector2D A);// 0xffffff8523219000 0x7a9c66ecc0
	Vector Normal(Vector A, float Tolerance);// 0xffffff8523219000 0x7a9c66eda0
	Vector NegateVector(Vector A);// 0xffffff8523219000 0x7a9c66ee80
	Rotator NegateRotator(Rotator A);// 0xffffff8523219000 0x7a9c66ef60
	Vector2D Negated2D(out const Vector2D A);// 0xffffff8523219000 0x7a9c66f040
	bool NearlyEqual_TransformTransform(out const Transform A, out const Transform B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);// 0xffffff8523219000 0x7a9c66f120
	bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);// 0xffffff8523219000 0x7a9c66f200
	float MultiplyMultiply_FloatFloat(float Base, float Exp);// 0xffffff8523219000 0x7a9c66f2e0
	float MultiplyByPi(float Value);// 0xffffff8523219000 0x7a9c66f3c0
	Vector Multiply_VectorVector(Vector A, Vector B);// 0xffffff8523219000 0x7a9c66f4a0
	Vector Multiply_VectorInt(Vector A, int B);// 0xffffff8523219000 0x7a9c66f580
	Vector Multiply_VectorFloat(Vector A, float B);// 0xffffff8523219000 0x7a9c66f660
	Vector4 Multiply_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xffffff8523219000 0x7a9c66f740
	Vector2D Multiply_Vector2DVector2D(Vector2D A, Vector2D B);// 0xffffff8523219000 0x7a9c66f820
	Vector2D Multiply_Vector2DFloat(Vector2D A, float B);// 0xffffff8523219000 0x7a9c66f900
	Timespan Multiply_TimespanFloat(Timespan A, float Scalar);// 0xffffff8523219000 0x7a9c66f9e0
	Rotator Multiply_RotatorInt(Rotator A, int B);// 0xffffff8523219000 0x7a9c66fac0
	Rotator Multiply_RotatorFloat(Rotator A, float B);// 0xffffff8523219000 0x7a9c66fba0
	Quat Multiply_QuatQuat(out const Quat A, out const Quat B);// 0xffffff8523219000 0x7a9c66fc80
	LinearColor Multiply_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xffffff8523219000 0x7a9c66fd60
	LinearColor Multiply_LinearColorFloat(LinearColor A, float B);// 0xffffff8523219000 0x7a9c66fe40
	int Multiply_IntInt(int A, int B);// 0xffffff8523219000 0x7a9c66ff20
	float Multiply_IntFloat(int A, float B);// 0xffffff8523219000 0x7a9c66caa0
	int64 Multiply_Int64Int64(int64 A, int64 B);// 0xffffff8523219000 0x7a9c66cb80
	float Multiply_FloatFloat(float A, float B);// 0xffffff8523219000 0x7a9c66cc60
	byte Multiply_ByteByte(byte A, byte B);// 0xffffff8523219000 0x7a9c66cd40
	Vector MirrorVectorByNormal(Vector InVect, Vector InNormal);// 0xffffff8523219000 0x7a9c66ce20
	void MinOfIntArray(out const int[] IntArray, out int IndexOfMinValue, out int MinValue);// 0xffffff8523219000 0x7a9c66cf00
	void MinOfFloatArray(out const float[] FloatArray, out int IndexOfMinValue, out float MinValue);// 0xffffff8523219000 0x7a9c66cfe0
	void MinOfByteArray(out const byte[] ByteArray, out int IndexOfMinValue, out byte MinValue);// 0xffffff8523219000 0x7a9c66d0c0
	int64 MinInt64(int64 A, int64 B);// 0xffffff8523219000 0x7a9c66d1a0
	void MinimumAreaRectangle(Object* WorldContextObject, out const Vector[] InVerts, out const Vector SampleSurfaceNormal, out Vector OutRectCenter, out Rotator OutRectRotation, out float OutSideLengthX, out float OutSideLengthY, bool bDebugDraw);// 0xffffff8523219000 0x7a9c66d280
	int Min(int A, int B);// 0xffffff8523219000 0x7a9c66d360
	void MaxOfIntArray(out const int[] IntArray, out int IndexOfMaxValue, out int MaxValue);// 0xffffff8523219000 0x7a9c66d440
	void MaxOfFloatArray(out const float[] FloatArray, out int IndexOfMaxValue, out float MaxValue);// 0xffffff8523219000 0x7a9c66d520
	void MaxOfByteArray(out const byte[] ByteArray, out int IndexOfMaxValue, out byte MaxValue);// 0xffffff8523219000 0x7a9c66d600
	int64 MaxInt64(int64 A, int64 B);// 0xffffff8523219000 0x7a9c66d6e0
	int Max(int A, int B);// 0xffffff8523219000 0x7a9c66d7c0
	Vector Matrix_GetOrigin(out const Matrix InMatrix);// 0xffffff8523219000 0x7a9c66d8a0
	float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0xffffff8523219000 0x7a9c66d980
	float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0xffffff8523219000 0x7a9c66da60
	Vector4 MakeVector4(float X, float Y, float Z, float W);// 0xffffff8523219000 0x7a9c66db40
	Vector2D MakeVector2D(float X, float Y);// 0xffffff8523219000 0x7a9c66dc20
	Vector MakeVector(float X, float Y, float Z);// 0xffffff8523219000 0x7a9c66dd00
	Transform MakeTransform(Vector Location, Rotator Rotation, Vector Scale);// 0xffffff8523219000 0x7a9c66dde0
	Timespan MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano);// 0xffffff8523219000 0x7a9c66dec0
	Timespan MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds);// 0xffffff8523219000 0x7a9c66dfa0
	Rotator MakeRotFromZY(out const Vector Z, out const Vector Y);// 0xffffff8523219000 0x7a9c66e080
	Rotator MakeRotFromZX(out const Vector Z, out const Vector X);// 0xffffff8523219000 0x7a9c66e160
	Rotator MakeRotFromZ(out const Vector Z);// 0xffffff8523219000 0x7a9c66e240
	Rotator MakeRotFromYZ(out const Vector Y, out const Vector Z);// 0xffffff8523219000 0x7a9c66e320
	Rotator MakeRotFromYX(out const Vector Y, out const Vector X);// 0xffffff8523219000 0x7a9c66e400
	Rotator MakeRotFromY(out const Vector Y);// 0xffffff8523219000 0x7a9c66e4e0
	Rotator MakeRotFromXZ(out const Vector X, out const Vector Z);// 0xffffff8523219000 0x7a9c66e5c0
	Rotator MakeRotFromXY(out const Vector X, out const Vector Y);// 0xffffff8523219000 0x7a9c66e6a0
	Rotator MakeRotFromX(out const Vector X);// 0xffffff8523219000 0x7a9c66adc0
	Rotator MakeRotator(float Roll, float Pitch, float Yaw);// 0xffffff8523219000 0x7a9c66aea0
	Rotator MakeRotationFromAxes(Vector Forward, Vector Right, Vector Up);// 0xffffff8523219000 0x7a9c66af80
	Transform MakeRelativeTransform(out const Transform A, out const Transform RelativeTo);// 0xffffff8523219000 0x7a9c66b060
	RandomStream MakeRandomStream(int InitialSeed);// 0xffffff8523219000 0x7a9c66b140
	QualifiedFrameTime MakeQualifiedFrameTime(FrameNumber Frame, FrameRate FrameRate, float SubFrame);// 0xffffff8523219000 0x7a9c66b220
	float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);// 0xffffff8523219000 0x7a9c66b300
	Plane MakePlaneFromPointAndNormal(Vector Point, Vector Normal);// 0xffffff8523219000 0x7a9c66b3e0
	FrameRate MakeFrameRate(int Numerator, int Denominator);// 0xffffff8523219000 0x7a9c66b4c0
	DateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);// 0xffffff8523219000 0x7a9c66b5a0
	LinearColor MakeColor(float R, float G, float B, float A);// 0xffffff8523219000 0x7a9c66b680
	Box2D MakeBox2D(Vector2D Min, Vector2D Max);// 0xffffff8523219000 0x7a9c66b760
	Box MakeBox(Vector Min, Vector Max);// 0xffffff8523219000 0x7a9c66b840
	float Loge(float A);// 0xffffff8523219000 0x7a9c66b920
	float Log(float A, float Base);// 0xffffff8523219000 0x7a9c66ba00
	bool LinePlaneIntersection_OriginNormal(out const Vector LineStart, out const Vector LineEnd, Vector PlaneOrigin, Vector PlaneNormal, out float T, out Vector Intersection);// 0xffffff8523219000 0x7a9c66bae0
	bool LinePlaneIntersection(out const Vector LineStart, out const Vector LineEnd, out const Plane APlane, out float T, out Vector Intersection);// 0xffffff8523219000 0x7a9c66bbc0
	LinearColor LinearColorLerpUsingHSV(LinearColor A, LinearColor B, float Alpha);// 0xffffff8523219000 0x7a9c66bca0
	LinearColor LinearColorLerp(LinearColor A, LinearColor B, float Alpha);// 0xffffff8523219000 0x7a9c66bd80
	LinearColor LinearColor_Yellow();// 0xffffff8523219000 0x7a9c66be60
	LinearColor LinearColor_White();// 0xffffff8523219000 0x7a9c66bf40
	LinearColor LinearColor_Transparent();// 0xffffff8523219000 0x7a9c66c020
	Color LinearColor_ToRGBE(LinearColor InLinearColor);// 0xffffff8523219000 0x7a9c66c100
	LinearColor LinearColor_ToNewOpacity(LinearColor InColor, float InOpacity);// 0xffffff8523219000 0x7a9c66c1e0
	void LinearColor_SetTemperature(out LinearColor InOutColor, float InTemperature);// 0xffffff8523219000 0x7a9c66c2c0
	void LinearColor_SetRGBA(out LinearColor InOutColor, float R, float G, float B, float A);// 0xffffff8523219000 0x7a9c66c3a0
	void LinearColor_SetRandomHue(out LinearColor InOutColor);// 0xffffff8523219000 0x7a9c66c480
	void LinearColor_SetFromSRGB(out LinearColor InOutColor, out const Color InSRGB);// 0xffffff8523219000 0x7a9c66c560
	void LinearColor_SetFromPow22(out LinearColor InOutColor, out const Color InColor);// 0xffffff8523219000 0x7a9c66c640
	void LinearColor_SetFromHSV(out LinearColor InOutColor, float H, float S, float V, float A);// 0xffffff8523219000 0x7a9c66c720
	void LinearColor_Set(out LinearColor InOutColor, LinearColor InColor);// 0xffffff8523219000 0x7a9c66c800
	LinearColor LinearColor_Red();// 0xffffff8523219000 0x7a9c66c8e0
	Color LinearColor_QuantizeRound(LinearColor InColor);// 0xffffff8523219000 0x7a9c66c9c0
	Color LinearColor_Quantize(LinearColor InColor);// 0xffffff8523219000 0x7a9c6690e0
	bool LinearColor_IsNearEqual(LinearColor A, LinearColor B, float Tolerance);// 0xffffff8523219000 0x7a9c6691c0
	LinearColor LinearColor_Green();// 0xffffff8523219000 0x7a9c6692a0
	LinearColor LinearColor_Gray();// 0xffffff8523219000 0x7a9c669380
	float LinearColor_GetMin(LinearColor InColor);// 0xffffff8523219000 0x7a9c669460
	float LinearColor_GetMax(LinearColor InColor);// 0xffffff8523219000 0x7a9c669540
	float LinearColor_GetLuminance(LinearColor InColor);// 0xffffff8523219000 0x7a9c669620
	float LinearColor_Distance(LinearColor C1, LinearColor C2);// 0xffffff8523219000 0x7a9c669700
	LinearColor LinearColor_Desaturated(LinearColor InColor, float InDesaturation);// 0xffffff8523219000 0x7a9c6697e0
	LinearColor LinearColor_Blue();// 0xffffff8523219000 0x7a9c6698c0
	LinearColor LinearColor_Black();// 0xffffff8523219000 0x7a9cbd3180
	Vector LessLess_VectorRotator(Vector A, Rotator B);// 0xffffff8523219000 0x7a9c6699a0
	bool LessEqual_TimespanTimespan(Timespan A, Timespan B);// 0xffffff8523219000 0x7a9c669a80
	bool LessEqual_IntInt(int A, int B);// 0xffffff8523219000 0x7a9c669b60
	bool LessEqual_Int64Int64(int64 A, int64 B);// 0xffffff8523219000 0x7a9c669c40
	bool LessEqual_FloatFloat(float A, float B);// 0xffffff8523219000 0x7a9c669d20
	bool LessEqual_DateTimeDateTime(DateTime A, DateTime B);// 0xffffff8523219000 0x7a9c669e00
	bool LessEqual_ByteByte(byte A, byte B);// 0xffffff8523219000 0x7a9c669ee0
	bool Less_TimespanTimespan(Timespan A, Timespan B);// 0xffffff8523219000 0x7a9c669fc0
	bool Less_IntInt(int A, int B);// 0xffffff8523219000 0x7a9c66a0a0
	bool Less_Int64Int64(int64 A, int64 B);// 0xffffff8523219000 0x7a9c66a180
	bool Less_FloatFloat(float A, float B);// 0xffffff8523219000 0x7a9c66a260
	bool Less_DateTimeDateTime(DateTime A, DateTime B);// 0xffffff8523219000 0x7a9c66a340
	bool Less_ByteByte(byte A, byte B);// 0xffffff8523219000 0x7a9c66a420
	float Lerp(float A, float B, float Alpha);// 0xffffff8523219000 0x7a9c66a500
	bool IsZero2D(out const Vector2D A);// 0xffffff8523219000 0x7a9c66a5e0
	bool IsPointInBoxWithTransform(Vector Point, out const Transform BoxWorldTransform, Vector BoxExtent);// 0xffffff8523219000 0x7a9c66a6c0
	bool IsPointInBox(Vector Point, Vector BoxOrigin, Vector BoxExtent);// 0xffffff8523219000 0x7a9c66a7a0
	bool IsNearlyZero2D(out const Vector2D A, float Tolerance);// 0xffffff8523219000 0x7a9c66a880
	bool IsMorning(DateTime A);// 0xffffff8523219000 0x7a9c66a960
	bool IsLeapYear(int Year);// 0xffffff8523219000 0x7a9c66aa40
	bool IsAfternoon(DateTime A);// 0xffffff8523219000 0x7a9c66ab20
	Transform InvertTransform(out const Transform T);// 0xffffff8523219000 0x7a9c66ac00
	Rotator InverseTransformRotation(out const Transform T, Rotator Rotation);// 0xffffff8523219000 0x7a9c66ace0
	Vector InverseTransformLocation(out const Transform T, Vector Location);// 0xffffff8523219000 0x7a9c667400
	Vector InverseTransformDirection(out const Transform T, Vector Direction);// 0xffffff8523219000 0x7a9c6674e0
	bool InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax);// 0xffffff8523219000 0x7a9c6675c0
	bool InRange_Int64Int64(int64 Value, int64 Min, int64 Max, bool InclusiveMin, bool InclusiveMax);// 0xffffff8523219000 0x7a9c6676a0
	bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);// 0xffffff8523219000 0x7a9c667780
	float Hypotenuse(float Width, float Height);// 0xffffff8523219000 0x7a9c667860
	LinearColor HSVToRGBLinear(LinearColor HSV);// 0xffffff8523219000 0x7a9c667940
	void HSVToRGB_Vector(LinearColor HSV, out LinearColor RGB);// 0xffffff8523219000 0x7a9c667a20
	LinearColor HSVToRGB(float H, float S, float V, float A);// 0xffffff8523219000 0x7a9c667b00
	float GridSnap_Float(float Location, float GridSize);// 0xffffff8523219000 0x7a9c667be0
	Vector GreaterGreater_VectorRotator(Vector A, Rotator B);// 0xffffff8523219000 0x7a9c667cc0
	bool GreaterEqual_TimespanTimespan(Timespan A, Timespan B);// 0xffffff8523219000 0x7a9c667da0
	bool GreaterEqual_IntInt(int A, int B);// 0xffffff8523219000 0x7a9c667e80
	bool GreaterEqual_Int64Int64(int64 A, int64 B);// 0xffffff8523219000 0x7a9c667f60
	bool GreaterEqual_FloatFloat(float A, float B);// 0xffffff8523219000 0x7a9c668040
	bool GreaterEqual_DateTimeDateTime(DateTime A, DateTime B);// 0xffffff8523219000 0x7a9c668120
	bool GreaterEqual_ByteByte(byte A, byte B);// 0xffffff8523219000 0x7a9c668200
	bool Greater_TimespanTimespan(Timespan A, Timespan B);// 0xffffff8523219000 0x7a9c6682e0
	bool Greater_IntInt(int A, int B);// 0xffffff8523219000 0x7a9c6683c0
	bool Greater_Int64Int64(int64 A, int64 B);// 0xffffff8523219000 0x7a9c6684a0
	bool Greater_FloatFloat(float A, float B);// 0xffffff8523219000 0x7a9c668580
	bool Greater_DateTimeDateTime(DateTime A, DateTime B);// 0xffffff8523219000 0x7a9c668660
	bool Greater_ByteByte(byte A, byte B);// 0xffffff8523219000 0x7a9c668740
	int GetYear(DateTime A);// 0xffffff8523219000 0x7a9c668820
	void GetYawPitchFromVector(Vector InVec, out float Yaw, out float Pitch);// 0xffffff8523219000 0x7a9c668900
	Vector GetVectorArrayAverage(out const Vector[] Vectors);// 0xffffff8523219000 0x7a9c6689e0
	Vector GetUpVector(Rotator InRot);// 0xffffff8523219000 0x7a9c668ac0
	float GetTotalSeconds(Timespan A);// 0xffffff8523219000 0x7a9c668ba0
	float GetTotalMinutes(Timespan A);// 0xffffff8523219000 0x7a9c668c80
	float GetTotalMilliseconds(Timespan A);// 0xffffff8523219000 0x7a9c668d60
	float GetTotalHours(Timespan A);// 0xffffff8523219000 0x7a9c668e40
	float GetTotalDays(Timespan A);// 0xffffff8523219000 0x7a9c668f20
	Timespan GetTimeOfDay(DateTime A);// 0xffffff8523219000 0x7a9c669000
	float GetTAU();// 0xffffff8523219000 0x7a9c665720
	void GetSlopeDegreeAngles(out const Vector MyRightYAxis, out const Vector FloorNormal, out const Vector UpVector, out float OutSlopePitchDegreeAngle, out float OutSlopeRollDegreeAngle);// 0xffffff8523219000 0x7a9c665800
	int GetSeconds(Timespan A);// 0xffffff8523219000 0x7a9c6658e0
	int GetSecond(DateTime A);// 0xffffff8523219000 0x7a9c6659c0
	Vector2D GetRotated2D(Vector2D A, float AngleDeg);// 0xffffff8523219000 0x7a9c665aa0
	Vector GetRightVector(Rotator InRot);// 0xffffff8523219000 0x7a9c665b80
	Vector GetReflectionVector(Vector Direction, Vector SurfaceNormal);// 0xffffff8523219000 0x7a9c665c60
	float GetPointDistanceToSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0xffffff8523219000 0x7a9c665d40
	float GetPointDistanceToLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0xffffff8523219000 0x7a9c665e20
	float GetPI();// 0xffffff8523219000 0x7a9c665f00
	int GetMonth(DateTime A);// 0xffffff8523219000 0x7a9c665fe0
	int GetMinutes(Timespan A);// 0xffffff8523219000 0x7a9c6660c0
	int GetMinute(DateTime A);// 0xffffff8523219000 0x7a9c6661a0
	float GetMinElement(Vector A);// 0xffffff8523219000 0x7a9c666280
	float GetMin2D(Vector2D A);// 0xffffff8523219000 0x7a9c666360
	int GetMilliseconds(Timespan A);// 0xffffff8523219000 0x7a9c666440
	int GetMillisecond(DateTime A);// 0xffffff8523219000 0x7a9c666520
	float GetMaxElement(Vector A);// 0xffffff8523219000 0x7a9c666600
	float GetMax2D(Vector2D A);// 0xffffff8523219000 0x7a9c6666e0
	int GetHours(Timespan A);// 0xffffff8523219000 0x7a9c6667c0
	int GetHour12(DateTime A);// 0xffffff8523219000 0x7a9c6668a0
	int GetHour(DateTime A);// 0xffffff8523219000 0x7a9c666980
	Vector GetForwardVector(Rotator InRot);// 0xffffff8523219000 0x7a9c666a60
	Timespan GetDuration(Timespan A);// 0xffffff8523219000 0x7a9c666b40
	Vector GetDirectionUnitVector(Vector From, Vector To);// 0xffffff8523219000 0x7a9c666c20
	int GetDays(Timespan A);// 0xffffff8523219000 0x7a9c666d00
	int GetDayOfYear(DateTime A);// 0xffffff8523219000 0x7a9c666de0
	int GetDay(DateTime A);// 0xffffff8523219000 0x7a9c666ec0
	DateTime GetDate(DateTime A);// 0xffffff8523219000 0x7a9c666fa0
	void GetAzimuthAndElevation(Vector InDirection, out const Transform ReferenceFrame, out float Azimuth, out float Elevation);// 0xffffff8523219000 0x7a9c667080
	void GetAxes(Rotator A, out Vector X, out Vector Y, out Vector Z);// 0xffffff8523219000 0x7a9c667160
	float GetAbsMax2D(Vector2D A);// 0xffffff8523219000 0x7a9c667240
	Vector2D GetAbs2D(Vector2D A);// 0xffffff8523219000 0x7a9c667320
	IntVector FTruncVector(out const Vector InVector);// 0xffffff8523219000 0x7a9c663a40
	int64 FTrunc64(float A);// 0xffffff8523219000 0x7a9c663b20
	int FTrunc(float A);// 0xffffff8523219000 0x7a9c663c00
	Timespan FromSeconds(float Seconds);// 0xffffff8523219000 0x7a9c663ce0
	Timespan FromMinutes(float Minutes);// 0xffffff8523219000 0x7a9c663dc0
	Timespan FromMilliseconds(float Milliseconds);// 0xffffff8523219000 0x7a9c663ea0
	Timespan FromHours(float Hours);// 0xffffff8523219000 0x7a9c663f80
	Timespan FromDays(float Days);// 0xffffff8523219000 0x7a9c664060
	float Fraction(float A);// 0xffffff8523219000 0x7a9c664140
	int FMod(float Dividend, float Divisor, out float Remainder);// 0xffffff8523219000 0x7a9c664220
	float FMin(float A, float B);// 0xffffff8523219000 0x7a9c664300
	float FMax(float A, float B);// 0xffffff8523219000 0x7a9c6643e0
	float FloatSpringInterp(float Current, float Target, out FloatSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0xffffff8523219000 0x7a9c6644c0
	float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);// 0xffffff8523219000 0x7a9c6645a0
	float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);// 0xffffff8523219000 0x7a9c664680
	float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);// 0xffffff8523219000 0x7a9c664760
	float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);// 0xffffff8523219000 0x7a9c664840
	void FindNearestPointsOnLineSegments(Vector Segment1Start, Vector Segment1End, Vector Segment2Start, Vector Segment2End, out Vector Segment1Point, out Vector Segment2Point);// 0xffffff8523219000 0x7a9c664920
	Rotator FindLookAtRotation(out const Vector Start, out const Vector Target);// 0xffffff8523219000 0x7a9c664a00
	Vector FindClosestPointOnSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0xffffff8523219000 0x7a9c664ae0
	Vector FindClosestPointOnLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0xffffff8523219000 0x7a9c664bc0
	int64 FFloor64(float A);// 0xffffff8523219000 0x7a9c664ca0
	int FFloor(float A);// 0xffffff8523219000 0x7a9c664d80
	float FClamp(float Value, float Min, float Max);// 0xffffff8523219000 0x7a9c664e60
	int64 FCeil64(float A);// 0xffffff8523219000 0x7a9c664f40
	int FCeil(float A);// 0xffffff8523219000 0x7a9c665020
	float Exp(float A);// 0xffffff8523219000 0x7a9c665100
	bool EqualExactly_VectorVector(Vector A, Vector B);// 0xffffff8523219000 0x7a9c6651e0
	bool EqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xffffff8523219000 0x7a9c6652c0
	bool EqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0xffffff8523219000 0x7a9c6653a0
	bool EqualEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0xffffff8523219000 0x7a9c665480
	bool EqualEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0xffffff8523219000 0x7a9c665560
	bool EqualEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0xffffff8523219000 0x7a9c665640
	bool EqualEqual_TransformTransform(out const Transform A, out const Transform B);// 0xffffff8523219000 0x7a9c661d60
	bool EqualEqual_TimespanTimespan(Timespan A, Timespan B);// 0xffffff8523219000 0x7a9c661e40
	bool EqualEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0xffffff8523219000 0x7a9c661f20
	bool EqualEqual_QuatQuat(out const Quat A, out const Quat B, float Tolerance);// 0xffffff8523219000 0x7a9c662000
	bool EqualEqual_ObjectObject(Object* A, Object* B);// 0xffffff8523219000 0x7a9c6620e0
	bool EqualEqual_NameName(FName A, FName B);// 0xffffff8523219000 0x7a9c6621c0
	bool EqualEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xffffff8523219000 0x7a9c6622a0
	bool EqualEqual_IntInt(int A, int B);// 0xffffff8523219000 0x7a9c662380
	bool EqualEqual_Int64Int64(int64 A, int64 B);// 0xffffff8523219000 0x7a9c662460
	bool EqualEqual_FloatFloat(float A, float B);// 0xffffff8523219000 0x7a9c662540
	bool EqualEqual_DateTimeDateTime(DateTime A, DateTime B);// 0xffffff8523219000 0x7a9c662620
	bool EqualEqual_ClassClass(class Object A, class Object B);// 0xffffff8523219000 0x7a9c662700
	bool EqualEqual_ByteByte(byte A, byte B);// 0xffffff8523219000 0x7a9c6627e0
	bool EqualEqual_BoolBool(bool A, bool B);// 0xffffff8523219000 0x7a9c6628c0
	float Ease(float A, float B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0xffffff8523219000 0x7a9c6629a0
	float DotProduct2D(Vector2D A, Vector2D B);// 0xffffff8523219000 0x7a9c662a80
	float Dot_VectorVector(Vector A, Vector B);// 0xffffff8523219000 0x7a9c662b60
	Vector Divide_VectorVector(Vector A, Vector B);// 0xffffff8523219000 0x7a9c662c40
	Vector Divide_VectorInt(Vector A, int B);// 0xffffff8523219000 0x7a9c662d20
	Vector Divide_VectorFloat(Vector A, float B);// 0xffffff8523219000 0x7a9c662e00
	Vector4 Divide_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xffffff8523219000 0x7a9c662ee0
	Vector2D Divide_Vector2DVector2D(Vector2D A, Vector2D B);// 0xffffff8523219000 0x7a9c662fc0
	Vector2D Divide_Vector2DFloat(Vector2D A, float B);// 0xffffff8523219000 0x7a9c6630a0
	Timespan Divide_TimespanFloat(Timespan A, float Scalar);// 0xffffff8523219000 0x7a9c663180
	LinearColor Divide_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xffffff8523219000 0x7a9c663260
	int Divide_IntInt(int A, int B);// 0xffffff8523219000 0x7a9c663340
	int64 Divide_Int64Int64(int64 A, int64 B);// 0xffffff8523219000 0x7a9c663420
	float Divide_FloatFloat(float A, float B);// 0xffffff8523219000 0x7a9c663500
	byte Divide_ByteByte(byte A, byte B);// 0xffffff8523219000 0x7a9c6635e0
	float DistanceSquared2D(Vector2D v1, Vector2D v2);// 0xffffff8523219000 0x7a9c6636c0
	float Distance2D(Vector2D v1, Vector2D v2);// 0xffffff8523219000 0x7a9c6637a0
	float DegTan(float A);// 0xffffff8523219000 0x7a9c663880
	float DegSin(float A);// 0xffffff8523219000 0x7a9c663960
	float DegreesToRadians(float A);// 0xffffff8523219000 0x7a9c660080
	float DegCos(float A);// 0xffffff8523219000 0x7a9c660160
	float DegAtan2(float A, float B);// 0xffffff8523219000 0x7a9c660240
	float DegAtan(float A);// 0xffffff8523219000 0x7a9c660320
	float DegAsin(float A);// 0xffffff8523219000 0x7a9c660400
	float DegAcos(float A);// 0xffffff8523219000 0x7a9c6604e0
	int DaysInYear(int Year);// 0xffffff8523219000 0x7a9c6605c0
	int DaysInMonth(int Year, int Month);// 0xffffff8523219000 0x7a9c6606a0
	DateTime DateTimeMinValue();// 0xffffff8523219000 0x7a9c660780
	DateTime DateTimeMaxValue();// 0xffffff8523219000 0x7a9c660860
	bool DateTimeFromString(FString DateTimeString, out DateTime Result);// 0xffffff8523219000 0x7a9c660940
	bool DateTimeFromIsoString(FString IsoString, out DateTime Result);// 0xffffff8523219000 0x7a9c660a20
	float CrossProduct2D(Vector2D A, Vector2D B);// 0xffffff8523219000 0x7a9c660b00
	Vector Cross_VectorVector(Vector A, Vector B);// 0xffffff8523219000 0x7a9c660be0
	Vector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);// 0xffffff8523219000 0x7a9c660cc0
	float Cos(float A);// 0xffffff8523219000 0x7a9c660da0
	Transform ConvertTransformToRelative(out const Transform Transform, out const Transform ParentTransform);// 0xffffff8523219000 0x7a9c660e80
	Vector2D Conv_VectorToVector2D(Vector InVector);// 0xffffff8523219000 0x7a9c660f60
	Transform Conv_VectorToTransform(Vector InLocation);// 0xffffff8523219000 0x7a9c661040
	Rotator Conv_VectorToRotator(Vector InVec);// 0xffffff8523219000 0x7a9c661120
	Quat Conv_VectorToQuaterion(Vector InVec);// 0xffffff8523219000 0x7a9c661200
	LinearColor Conv_VectorToLinearColor(Vector InVec);// 0xffffff8523219000 0x7a9c6612e0
	Vector Conv_Vector4ToVector(out const Vector4 InVector4);// 0xffffff8523219000 0x7a9c6613c0
	Rotator Conv_Vector4ToRotator(out const Vector4 InVec);// 0xffffff8523219000 0x7a9c6614a0
	Quat Conv_Vector4ToQuaterion(out const Vector4 InVec);// 0xffffff8523219000 0x7a9c661580
	Vector Conv_Vector2DToVector(Vector2D InVector2D, float Z);// 0xffffff8523219000 0x7a9c661660
	IntPoint Conv_Vector2DToIntPoint(Vector2D InVector2D);// 0xffffff8523219000 0x7a9c661740
	Vector Conv_RotatorToVector(Rotator InRot);// 0xffffff8523219000 0x7a9c661820
	Transform Conv_RotatorToTransform(out const Rotator InRotator);// 0xffffff8523219000 0x7a9c661900
	Transform Conv_MatrixToTransform(out const Matrix InMatrix);// 0xffffff8523219000 0x7a9c6619e0
	Rotator Conv_MatrixToRotator(out const Matrix InMatrix);// 0xffffff8523219000 0x7a9c661ac0
	Vector Conv_LinearColorToVector(LinearColor InLinearColor);// 0xffffff8523219000 0x7a9c661ba0
	Color Conv_LinearColorToColor(LinearColor InLinearColor, bool InUseSRGB);// 0xffffff8523219000 0x7a9c661c80
	Vector Conv_IntVectorToVector(out const IntVector InIntVector);// 0xffffff8523219000 0x7a9cdfe780
	IntVector Conv_IntToIntVector(int inInt);// 0xffffff8523219000 0x7a9cdfe860
	int64 Conv_IntToInt64(int inInt);// 0xffffff8523219000 0x7a9cdfe940
	float Conv_IntToFloat(int inInt);// 0xffffff8523219000 0x7a9cdfea20
	byte Conv_IntToByte(int inInt);// 0xffffff8523219000 0x7a9cdfeb00
	bool Conv_IntToBool(int inInt);// 0xffffff8523219000 0x7a9cdfebe0
	Vector Conv_FloatToVector(float InFloat);// 0xffffff8523219000 0x7a9cdfecc0
	LinearColor Conv_FloatToLinearColor(float InFloat);// 0xffffff8523219000 0x7a9cdfeda0
	LinearColor Conv_ColorToLinearColor(Color InColor);// 0xffffff8523219000 0x7a9cdfee80
	int Conv_ByteToInt(byte InByte);// 0xffffff8523219000 0x7a9cdfef60
	float Conv_ByteToFloat(byte InByte);// 0xffffff8523219000 0x7a9cdff040
	int Conv_BoolToInt(bool InBool);// 0xffffff8523219000 0x7a9cdff120
	float Conv_BoolToFloat(bool InBool);// 0xffffff8523219000 0x7a9cdff200
	byte Conv_BoolToByte(bool InBool);// 0xffffff8523219000 0x7a9cdff2e0
	Transform ComposeTransforms(out const Transform A, out const Transform B);// 0xffffff8523219000 0x7a9cdff3c0
	Rotator ComposeRotators(Rotator A, Rotator B);// 0xffffff8523219000 0x7a9cdff4a0
	bool ClassIsChildOf(class Object TestClass, class Object ParentClass);// 0xffffff8523219000 0x7a9cdff580
	Vector ClampVectorSize(Vector A, float Min, float Max);// 0xffffff8523219000 0x7a9cdff660
	int64 ClampInt64(int64 Value, int64 Min, int64 Max);// 0xffffff8523219000 0x7a9cdff740
	float ClampAxis(float Angle);// 0xffffff8523219000 0x7a9cdff820
	Vector2D ClampAxes2D(Vector2D A, float MinAxisVal, float MaxAxisVal);// 0xffffff8523219000 0x7a9cdff900
	float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);// 0xffffff8523219000 0x7a9cdff9e0
	int Clamp(int Value, int Min, int Max);// 0xffffff8523219000 0x7a9cdffac0
	LinearColor CInterpTo(LinearColor Current, LinearColor Target, float DeltaTime, float InterpSpeed);// 0xffffff8523219000 0x7a9cdffba0
	void BreakVector4(out const Vector4 InVec, out float X, out float Y, out float Z, out float W);// 0xffffff8523219000 0x7a9cdffc80
	void BreakVector2D(Vector2D InVec, out float X, out float Y);// 0xffffff8523219000 0x7a9cdffd60
	void BreakVector(Vector InVec, out float X, out float Y, out float Z);// 0xffffff8523219000 0x7a9cdffe40
	void BreakTransform(out const Transform InTransform, out Vector Location, out Rotator Rotation, out Vector Scale);// 0xffffff8523219000 0x7a9cdfff20
	void BreakTimespan2(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int FractionNano);// 0xffffff8523219000 0x7a9cdfcaa0
	void BreakTimespan(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int Milliseconds);// 0xffffff8523219000 0x7a9cdfcb80
	void BreakRotIntoAxes(out const Rotator InRot, out Vector X, out Vector Y, out Vector Z);// 0xffffff8523219000 0x7a9cdfcc60
	void BreakRotator(Rotator InRot, out float Roll, out float Pitch, out float Yaw);// 0xffffff8523219000 0x7a9cdfcd40
	void BreakRandomStream(out const RandomStream InRandomStream, out int InitialSeed);// 0xffffff8523219000 0x7a9cdfce20
	void BreakQualifiedFrameTime(out const QualifiedFrameTime InFrameTime, out FrameNumber Frame, out FrameRate FrameRate, out float SubFrame);// 0xffffff8523219000 0x7a9cdfcf00
	void BreakFrameRate(out const FrameRate InFrameRate, out int Numerator, out int Denominator);// 0xffffff8523219000 0x7a9cdfcfe0
	void BreakDateTime(DateTime InDateTime, out int Year, out int Month, out int Day, out int Hour, out int Minute, out int Second, out int Millisecond);// 0xffffff8523219000 0x7a9cdfd0c0
	void BreakColor(LinearColor InColor, out float R, out float G, out float B, out float A);// 0xffffff8523219000 0x7a9cdfd1a0
	bool BooleanXOR(bool A, bool B);// 0xffffff8523219000 0x7a9cdfd280
	bool BooleanOR(bool A, bool B);// 0xffffff8523219000 0x7a9cdfd360
	bool BooleanNOR(bool A, bool B);// 0xffffff8523219000 0x7a9cdfd440
	bool BooleanNAND(bool A, bool B);// 0xffffff8523219000 0x7a9cdfd520
	bool BooleanAND(bool A, bool B);// 0xffffff8523219000 0x7a9cdfd600
	byte BMin(byte A, byte B);// 0xffffff8523219000 0x7a9cdfd6e0
	byte BMax(byte A, byte B);// 0xffffff8523219000 0x7a9cdfd7c0
	float Atan2(float A, float B);// 0xffffff8523219000 0x7a9cdfd8a0
	float Atan(float A);// 0xffffff8523219000 0x7a9cdfd980
	float Asin(float A);// 0xffffff8523219000 0x7a9cdfda60
	int And_IntInt(int A, int B);// 0xffffff8523219000 0x7a9cdfdb40
	int64 And_Int64Int64(int64 A, int64 B);// 0xffffff8523219000 0x7a9cdfdc20
	Vector Add_VectorVector(Vector A, Vector B);// 0xffffff8523219000 0x7a9cdfdd00
	Vector Add_VectorInt(Vector A, int B);// 0xffffff8523219000 0x7a9cdfdde0
	Vector Add_VectorFloat(Vector A, float B);// 0xffffff8523219000 0x7a9cdfdec0
	Vector4 Add_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xffffff8523219000 0x7a9cdfdfa0
	Vector2D Add_Vector2DVector2D(Vector2D A, Vector2D B);// 0xffffff8523219000 0x7a9cdfe080
	Vector2D Add_Vector2DFloat(Vector2D A, float B);// 0xffffff8523219000 0x7a9cdfe160
	Timespan Add_TimespanTimespan(Timespan A, Timespan B);// 0xffffff8523219000 0x7a9cdfe240
	Quat Add_QuatQuat(out const Quat A, out const Quat B);// 0xffffff8523219000 0x7a9cdfe320
	LinearColor Add_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xffffff8523219000 0x7a9cdfe400
	int Add_IntInt(int A, int B);// 0xffffff8523219000 0x7a9cdfe4e0
	int64 Add_Int64Int64(int64 A, int64 B);// 0xffffff8523219000 0x7a9cdfe5c0
	float Add_FloatFloat(float A, float B);// 0xffffff8523219000 0x7a9cdfe6a0
	DateTime Add_DateTimeTimespan(DateTime A, Timespan B);// 0xffffff8523219000 0x7a9cdfadc0
	byte Add_ByteByte(byte A, byte B);// 0xffffff8523219000 0x7a9cdfaea0
	float Acos(float A);// 0xffffff8523219000 0x7a9cdfaf80
	int64 Abs_Int64(int64 A);// 0xffffff8523219000 0x7a9cdfb060
	int Abs_Int(int A);// 0xffffff8523219000 0x7a9cdfb140
	float Abs(float A);// 0xffffff8523219000 0x7a9cdfb220

--------------------------------
Class: VectorSpringState

--------------------------------
Class: Timespan

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4] 0x7af958e8d0
	int Seed;//[Offset: 0x4, Size: 0x4] 0x7af958e940

--------------------------------
Class: FloatSpringState

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8] 0x7af81c6180
	FrameRate Rate;//[Offset: 0x8, Size: 0x8] 0x7af81c6200

--------------------------------
Class: KismetNodeHelperLibrary.BlueprintFunctionLibrary.Object
	void MarkBit(out int Data, int Index);// 0xffffff8523219000 0x7a9c69d520
	bool HasUnmarkedBit(int Data, int NumBits);// 0xffffff8523219000 0x7a9c69d600
	bool HasMarkedBit(int Data, int NumBits);// 0xffffff8523219000 0x7a9c69d6e0
	byte GetValidValue(const Enum* Enum, byte EnumeratorValue);// 0xffffff8523219000 0x7a9c69d7c0
	int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);// 0xffffff8523219000 0x7a9c69d8a0
	int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);// 0xffffff8523219000 0x7a9c69d980
	int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);// 0xffffff8523219000 0x7a9c69da60
	byte GetEnumeratorValueFromIndex(const Enum* Enum, byte EnumeratorIndex);// 0xffffff8523219000 0x7a9c69db40
	FString GetEnumeratorUserFriendlyName(const Enum* Enum, byte EnumeratorValue);// 0xffffff8523219000 0x7a9c69dc20
	FName GetEnumeratorName(const Enum* Enum, byte EnumeratorValue);// 0xffffff8523219000 0x7a9c69dd00
	void ClearBit(out int Data, int Index);// 0xffffff8523219000 0x7a9c69dde0
	void ClearAllBits(out int Data);// 0xffffff8523219000 0x7a9c69dec0
	bool BitIsMarked(int Data, int Index);// 0xffffff8523219000 0x7a9c69dfa0

--------------------------------
Class: KismetRenderingLibrary.BlueprintFunctionLibrary.Object
	Texture2D* RenderTargetCreateStaticTexture2DEditorOnly(TextureRenderTarget2D* RenderTarget, FString Name, byte CompressionSettings, byte MipSettings);// 0xffffff8523219000 0x7a9c69fac0
	void ReleaseRenderTarget2D(TextureRenderTarget2D* TextureRenderTarget);// 0xffffff8523219000 0x7a9c69fba0
	Color ReadRenderTargetUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0xffffff8523219000 0x7a9c69fc80
	LinearColor ReadRenderTargetRawUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0xffffff8523219000 0x7a9c69fd60
	LinearColor ReadRenderTargetRawPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0xffffff8523219000 0x7a9c69fe40
	Color ReadRenderTargetPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0xffffff8523219000 0x7a9c69ff20
	SkelMeshSkinWeightInfo MakeSkinWeightInfo(int Bone0, byte Weight0, int Bone1, byte Weight1, int Bone2, byte Weight2, int Bone3, byte Weight3);// 0xffffff8523219000 0x7a9c69caa0
	Texture2D* ImportFileAsTexture2D(Object* WorldContextObject, FString Filename);// 0xffffff8523219000 0x7a9c69cb80
	Texture2D* ImportBufferAsTexture2D(Object* WorldContextObject, out const byte[] Buffer);// 0xffffff8523219000 0x7a9c69cc60
	void ExportTexture2D(Object* WorldContextObject, Texture2D* Texture, FString FilePath, FString Filename);// 0xffffff8523219000 0x7a9c69cd40
	void ExportRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename);// 0xffffff8523219000 0x7a9c69ce20
	void EndDrawCanvasToRenderTarget(Object* WorldContextObject, out const DrawToRenderTargetContext Context);// 0xffffff8523219000 0x7a9c69cf00
	void DrawMaterialToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, MaterialInterface* Material);// 0xffffff8523219000 0x7a9c69cfe0
	TextureRenderTarget2D* CreateRenderTarget2D(Object* WorldContextObject, int Width, int Height, byte Format);// 0xffffff8523219000 0x7a9c69d0c0
	void ConvertRenderTargetToTexture2DEditorOnly(Object* WorldContextObject, TextureRenderTarget2D* RenderTarget, Texture2D* Texture);// 0xffffff8523219000 0x7a9c69d1a0
	void ClearRenderTarget2D(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, LinearColor ClearColor);// 0xffffff8523219000 0x7a9c69d280
	void BreakSkinWeightInfo(SkelMeshSkinWeightInfo InWeight, out int Bone0, out byte Weight0, out int Bone1, out byte Weight1, out int Bone2, out byte Weight2, out int Bone3, out byte Weight3);// 0xffffff8523219000 0x7a9c69d360
	void BeginDrawCanvasToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out Canvas* Canvas, out Vector2D Size, out DrawToRenderTargetContext Context);// 0xffffff8523219000 0x7a9c69d440

--------------------------------
Class: DrawToRenderTargetContext
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x0, Size: 0x8] 0x7a9ca1d000

--------------------------------
Class: KismetStringLibrary.BlueprintFunctionLibrary.Object
	FString TrimTrailing(FString SourceString);// 0xffffff8523219000 0x7a9c6c3260
	FString Trim(FString SourceString);// 0xffffff8523219000 0x7a9c6c3340
	FString ToUpper(FString SourceString);// 0xffffff8523219000 0x7a9c6c3420
	FString ToLower(FString SourceString);// 0xffffff8523219000 0x7a9c6c3500
	FString TimeSecondsToString(float InSeconds);// 0xffffff8523219000 0x7a9c6c35e0
	bool StartsWith(FString SourceString, FString InPrefix, byte SearchCase);// 0xffffff8523219000 0x7a9c6c36c0
	bool Split(FString SourceString, FString InStr, out FString LeftS, out FString RightS, byte SearchCase, byte SearchDir);// 0xffffff8523219000 0x7a9c6c37a0
	FString RightPad(FString SourceString, int ChCount);// 0xffffff8523219000 0x7a9c6c3880
	FString RightChop(FString SourceString, int Count);// 0xffffff8523219000 0x7a9c6c3960
	FString Right(FString SourceString, int Count);// 0xffffff8523219000 0x7a9c6c0080
	FString Reverse(FString SourceString);// 0xffffff8523219000 0x7a9c6c0240
	int ReplaceInline(out FString SourceString, FString SearchText, FString ReplacementText, byte SearchCase);// 0xffffff8523219000 0x7a9c6c0320
	FString Replace(FString SourceString, FString From, FString To, byte SearchCase);// 0xffffff8523219000 0x7a9c6c0400
	FString[] ParseIntoArray(FString SourceString, FString Delimiter, const bool CullEmptyStrings);// 0xffffff8523219000 0x7a9c6c04e0
	bool NotEqual_StrStr(FString A, FString B);// 0xffffff8523219000 0x7a9c6c05c0
	bool NotEqual_StriStri(FString A, FString B);// 0xffffff8523219000 0x7a9c6c06a0
	FString Mid(FString SourceString, int Start, int Count);// 0xffffff8523219000 0x7a9c6c0780
	bool MatchesWildcard(FString SourceString, FString Wildcard, byte SearchCase);// 0xffffff8523219000 0x7a9c6c0860
	int Len(FString S);// 0xffffff8523219000 0x7a9c6c0940
	FString LeftPad(FString SourceString, int ChCount);// 0xffffff8523219000 0x7a9c6c0a20
	FString LeftChop(FString SourceString, int Count);// 0xffffff8523219000 0x7a9c6c0b00
	FString Left(FString SourceString, int Count);// 0xffffff8523219000 0x7a9c6c0be0
	FString JoinStringArray(out const FString[] SourceArray, FString Separator);// 0xffffff8523219000 0x7a9c6c0cc0
	bool IsNumeric(FString SourceString);// 0xffffff8523219000 0x7a9c6c0da0
	FString GetSubstring(FString SourceString, int StartIndex, int Length);// 0xffffff8523219000 0x7a9c6c0e80
	int GetCharacterAsNumber(FString SourceString, int Index);// 0xffffff8523219000 0x7a9c6c0f60
	FString[] GetCharacterArrayFromString(FString SourceString);// 0xffffff8523219000 0x7a9c6c1040
	int FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);// 0xffffff8523219000 0x7a9c6c1120
	bool EqualEqual_StrStr(FString A, FString B);// 0xffffff8523219000 0x7a9c6c1200
	bool EqualEqual_StriStri(FString A, FString B);// 0xffffff8523219000 0x7a9c6c12e0
	bool EndsWith(FString SourceString, FString InSuffix, byte SearchCase);// 0xffffff8523219000 0x7a9c6c13c0
	int CullArray(FString SourceString, out FString[] inArray);// 0xffffff8523219000 0x7a9c6c14a0
	FString Conv_VectorToString(Vector InVec);// 0xffffff8523219000 0x7a9c6c1580
	FString Conv_Vector2dToString(Vector2D InVec);// 0xffffff8523219000 0x7a9c6c1660
	FString Conv_TransformToString(out const Transform InTrans);// 0xffffff8523219000 0x7a9c6c1740
	void Conv_StringToVector2D(FString inString, out Vector2D OutConvertedVector2D, out bool OutIsValid);// 0xffffff8523219000 0x7a9c6c1820
	void Conv_StringToVector(FString inString, out Vector OutConvertedVector, out bool OutIsValid);// 0xffffff8523219000 0x7a9c6c1900
	void Conv_StringToRotator(FString inString, out Rotator OutConvertedRotator, out bool OutIsValid);// 0xffffff8523219000 0x7a9c6c19e0
	FName Conv_StringToName(FString inString);// 0xffffff8523219000 0x7a9c6c1ac0
	int Conv_StringToInt(FString inString);// 0xffffff8523219000 0x7a9c6c1ba0
	float Conv_StringToFloat(FString inString);// 0xffffff8523219000 0x7a9c6c1c80
	void Conv_StringToColor(FString inString, out LinearColor OutConvertedColor, out bool OutIsValid);// 0xffffff8523219000 0x7a9c69e780
	FString Conv_RotatorToString(Rotator InRot);// 0xffffff8523219000 0x7a9c69e860
	FString Conv_ObjectToString(Object* InObj);// 0xffffff8523219000 0x7a9c69e940
	FString Conv_NameToString(FName InName);// 0xffffff8523219000 0x7a9c69ea20
	FString Conv_IntVectorToString(IntVector InIntVec);// 0xffffff8523219000 0x7a9c69eb00
	FString Conv_IntToString(int inInt);// 0xffffff8523219000 0x7a9c69ebe0
	FString Conv_FloatToString(float InFloat);// 0xffffff8523219000 0x7a9c69ecc0
	FString Conv_ColorToString(LinearColor InColor);// 0xffffff8523219000 0x7a9c69eda0
	FString Conv_ByteToString(byte InByte);// 0xffffff8523219000 0x7a9c69ee80
	FString Conv_BoolToString(bool InBool);// 0xffffff8523219000 0x7a9c69ef60
	bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd);// 0xffffff8523219000 0x7a9c69f040
	FString Concat_StrStr(FString A, FString B);// 0xffffff8523219000 0x7a9c69f120
	FString BuildString_Vector2d(FString AppendTo, FString Prefix, Vector2D InVector2D, FString Suffix);// 0xffffff8523219000 0x7a9c69f200
	FString BuildString_Vector(FString AppendTo, FString Prefix, Vector InVector, FString Suffix);// 0xffffff8523219000 0x7a9c69f2e0
	FString BuildString_Rotator(FString AppendTo, FString Prefix, Rotator InRot, FString Suffix);// 0xffffff8523219000 0x7a9c69f3c0
	FString BuildString_Object(FString AppendTo, FString Prefix, Object* InObj, FString Suffix);// 0xffffff8523219000 0x7a9c69f4a0
	FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix);// 0xffffff8523219000 0x7a9c69f580
	FString BuildString_IntVector(FString AppendTo, FString Prefix, IntVector InIntVector, FString Suffix);// 0xffffff8523219000 0x7a9c69f660
	FString BuildString_Int(FString AppendTo, FString Prefix, int inInt, FString Suffix);// 0xffffff8523219000 0x7a9c69f740
	FString BuildString_Float(FString AppendTo, FString Prefix, float InFloat, FString Suffix);// 0xffffff8523219000 0x7a9c69f820
	FString BuildString_Color(FString AppendTo, FString Prefix, LinearColor InColor, FString Suffix);// 0xffffff8523219000 0x7a9c69f900
	FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix);// 0xffffff8523219000 0x7a9c69f9e0

--------------------------------
Class: KismetStringTableLibrary.BlueprintFunctionLibrary.Object
	bool IsRegisteredTableId(const FName TableId);// 0xffffff8523219000 0x7a9c6c2b60
	bool IsRegisteredTableEntry(const FName TableId, FString Key);// 0xffffff8523219000 0x7a9c6c2c40
	FString GetTableNamespace(const FName TableId);// 0xffffff8523219000 0x7a9c6c2d20
	FString GetTableEntrySourceString(const FName TableId, FString Key);// 0xffffff8523219000 0x7a9c6c2e00
	FString GetTableEntryMetaData(const FName TableId, FString Key, const FName MetaDataId);// 0xffffff8523219000 0x7a9c6c2ee0
	FName[] GetRegisteredStringTables();// 0xffffff8523219000 0x7a9c6c2fc0
	FName[] GetMetaDataIdsFromStringTableEntry(const FName TableId, FString Key);// 0xffffff8523219000 0x7a9c6c30a0
	FString[] GetKeysFromStringTable(const FName TableId);// 0xffffff8523219000 0x7a9c6c3180

--------------------------------
Class: KismetSystemLibrary.BlueprintFunctionLibrary.Object
	void UnregisterForRemoteNotifications();// 0xffffff8523219000 0x7aa0846360
	void UnloadPrimaryAssetList(out const PrimaryAssetId[] PrimaryAssetIdList);// 0xffffff8523219000 0x7aa0846440
	void UnloadPrimaryAsset(PrimaryAssetId PrimaryAssetId);// 0xffffff8523219000 0x7aa0846520
	void TransactObject(Object* Object);// 0xffffff8523219000 0x7aa0846600
	void StackTrace();// 0xffffff8523219000 0x7aa08466e0
	bool SphereTraceSingleForObjects(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa08467c0
	bool SphereTraceSingleByProfile(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa08468a0
	bool SphereTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa0846980
	bool SphereTraceMultiForObjects(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa0846a60
	bool SphereTraceMultiByProfile(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa0846b40
	bool SphereTraceMulti(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa0846c20
	bool SphereOverlapComponents(Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xffffff8523219000 0x7aa0846d00
	bool SphereOverlapActors(Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xffffff8523219000 0x7aa0846de0
	void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);// 0xffffff8523219000 0x7aa0846ec0
	void ShowPlatformSpecificAchievementsScreen(PlayerController* SpecificPlayer);// 0xffffff8523219000 0x7aa0846fa0
	void ShowInterstitialAd();// 0xffffff8523219000 0x7aa0847080
	void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);// 0xffffff8523219000 0x7aa0847160
	void SetWindowTitle(out const FText Title);// 0xffffff8523219000 0x7aa0847240
	void SetVolumeButtonsHandledBySystem(bool bEnabled);// 0xffffff8523219000 0x7aa0847320
	void SetVectorPropertyByName(Object* Object, FName PropertyName, out const Vector Value);// 0xffffff8523219000 0x7aa0843a40
	void SetUserActivity(out const UserActivity UserActivity);// 0xffffff8523219000 0x7aa0843b20
	void SetTransformPropertyByName(Object* Object, FName PropertyName, out const Transform Value);// 0xffffff8523219000 0x7aa0843c00
	void SetTextPropertyByName(Object* Object, FName PropertyName, out const FText Value);// 0xffffff8523219000 0x7aa0843ce0
	void SetSuppressViewportTransitionMessage(Object* WorldContextObject, bool bState);// 0xffffff8523219000 0x7aa0843dc0
	void SetStructurePropertyByName(Object* Object, FName PropertyName, out const GenericStruct Value);// 0xffffff8523219000 0x7aa0843ea0
	void SetStringPropertyByName(Object* Object, FName PropertyName, FString Value);// 0xffffff8523219000 0x7aa0843f80
	void SetSoftObjectPropertyByName(Object* Object, FName PropertyName, out const Object* Value);// 0xffffff8523219000 0x7aa0844060
	void SetSoftClassPropertyByName(Object* Object, FName PropertyName, out const class Object Value);// 0xffffff8523219000 0x7aa0844140
	void SetRotatorPropertyByName(Object* Object, FName PropertyName, out const Rotator Value);// 0xffffff8523219000 0x7aa0844220
	void SetObjectPropertyByName(Object* Object, FName PropertyName, Object* Value);// 0xffffff8523219000 0x7aa0844300
	void SetNamePropertyByName(Object* Object, FName PropertyName, out const FName Value);// 0xffffff8523219000 0x7aa08443e0
	void SetLinearColorPropertyByName(Object* Object, FName PropertyName, out const LinearColor Value);// 0xffffff8523219000 0x7aa08444c0
	void SetIntPropertyByName(Object* Object, FName PropertyName, int Value);// 0xffffff8523219000 0x7aa08445a0
	void SetInterfacePropertyByName(Object* Object, FName PropertyName, out const interface classNone Value);// 0xffffff8523219000 0x7aa0844680
	void SetInt64PropertyByName(Object* Object, FName PropertyName, int64 Value);// 0xffffff8523219000 0x7aa0844760
	void SetFloatPropertyByName(Object* Object, FName PropertyName, float Value);// 0xffffff8523219000 0x7aa0844840
	void SetCollisionProfileNameProperty(Object* Object, FName PropertyName, out const CollisionProfileName Value);// 0xffffff8523219000 0x7aa0844920
	void SetClassPropertyByName(Object* Object, FName PropertyName, class Object Value);// 0xffffff8523219000 0x7aa0844a00
	void SetBytePropertyByName(Object* Object, FName PropertyName, byte Value);// 0xffffff8523219000 0x7aa0844ae0
	void SetBoolPropertyByName(Object* Object, FName PropertyName, bool Value);// 0xffffff8523219000 0x7aa0844bc0
	void RetriggerableDelay(Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0xffffff8523219000 0x7aa0844ca0
	void ResetGamepadAssignmentToController(int ControllerId);// 0xffffff8523219000 0x7aa0844d80
	void ResetGamepadAssignments();// 0xffffff8523219000 0x7aa0844e60
	void RegisterForRemoteNotifications();// 0xffffff8523219000 0x7aa0844f40
	void QuitGame(Object* WorldContextObject, PlayerController* SpecificPlayer, byte QuitPreference, bool bIgnorePlatformRestrictions);// 0xffffff8523219000 0x7aa0845020
	void PrintWarning(FString inString);// 0xffffff8523219000 0x7aa0845100
	void PrintText(Object* WorldContextObject, const FText InText, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0xffffff8523219000 0x7aa08451e0
	void PrintString(Object* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0xffffff8523219000 0x7aa08452c0
	void OnAssetLoaded__DelegateSignature(Object* Loaded);// 0xffffff8523219000 0x7aa0842a80
	void OnAssetClassLoaded__DelegateSignature(class Object Loaded);// 0xffffff8523219000 0x7aa08427e0
	bool NotEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0xffffff8523219000 0x7aa08453a0
	bool NotEqual_SoftClassReference(out const class Object A, out const class Object B);// 0xffffff8523219000 0x7aa0845480
	bool NotEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0xffffff8523219000 0x7aa0845560
	bool NotEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0xffffff8523219000 0x7aa0845640
	FString NormalizeFilename(FString InFilename);// 0xffffff8523219000 0x7aa0841d60
	void MoveComponentTo(SceneComponent* Component, Vector TargetRelativeLocation, Rotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, byte MoveAction, LatentActionInfo LatentInfo);// 0xffffff8523219000 0x7aa0841e40
	SoftObjectPath MakeSoftObjectPath(FString PathString);// 0xffffff8523219000 0x7aa0841f20
	SoftClassPath MakeSoftClassPath(FString PathString);// 0xffffff8523219000 0x7aa0842000
	FText MakeLiteralText(FText Value);// 0xffffff8523219000 0x7aa08420e0
	FString MakeLiteralString(FString Value);// 0xffffff8523219000 0x7aa08421c0
	FName MakeLiteralName(FName Value);// 0xffffff8523219000 0x7aa08422a0
	int MakeLiteralInt(int Value);// 0xffffff8523219000 0x7aa0842380
	float MakeLiteralFloat(float Value);// 0xffffff8523219000 0x7aa0842460
	byte MakeLiteralByte(byte Value);// 0xffffff8523219000 0x7aa0842540
	bool MakeLiteralBool(bool Value);// 0xffffff8523219000 0x7aa0842620
	void LoadInterstitialAd(int AdIdIndex);// 0xffffff8523219000 0x7aa0842700
	void LoadAssetClass(Object* WorldContextObject, class Object AssetClass, delegate OnLoaded, LatentActionInfo LatentInfo);// 0xffffff8523219000 0x7aa08428c0
	Object* LoadAsset_Blocking(Object* Asset);// 0xffffff8523219000 0x7aa08429a0
	void LoadAsset(Object* WorldContextObject, Object* Asset, delegate OnLoaded, LatentActionInfo LatentInfo);// 0xffffff8523219000 0x7aa0842b60
	bool LineTraceSingleForObjects(Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa0842c40
	bool LineTraceSingleByProfile(Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa0842d20
	bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa0842e00
	bool LineTraceMultiForObjects(Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa0842ee0
	bool LineTraceMultiByProfile(Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa0842fc0
	bool LineTraceMulti(Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa08430a0
	void LaunchURL(FString URL);// 0xffffff8523219000 0x7aa0843180
	void K2_UnPauseTimerHandle(Object* WorldContextObject, TimerHandle Handle);// 0xffffff8523219000 0x7aa0843260
	void K2_UnPauseTimerDelegate(delegate Delegate);// 0xffffff8523219000 0x7aa0843340
	void K2_UnPauseTimer(Object* Object, FString FunctionName);// 0xffffff8523219000 0x7aa0843420
	bool K2_TimerExistsHandle(Object* WorldContextObject, TimerHandle Handle);// 0xffffff8523219000 0x7aa0843500
	bool K2_TimerExistsDelegate(delegate Delegate);// 0xffffff8523219000 0x7aa08435e0
	bool K2_TimerExists(Object* Object, FString FunctionName);// 0xffffff8523219000 0x7aa08436c0
	TimerHandle K2_SetTimerDelegate(delegate Delegate, float Time, bool bLooping);// 0xffffff8523219000 0x7aa08437a0
	TimerHandle K2_SetTimer(Object* Object, FString FunctionName, float Time, bool bLooping);// 0xffffff8523219000 0x7aa0843880
	void K2_PauseTimerHandle(Object* WorldContextObject, TimerHandle Handle);// 0xffffff8523219000 0x7aa0843960
	void K2_PauseTimerDelegate(delegate Delegate);// 0xffffff8523219000 0x7aa0840080
	void K2_PauseTimer(Object* Object, FString FunctionName);// 0xffffff8523219000 0x7aa0840160
	bool K2_IsValidTimerHandle(TimerHandle Handle);// 0xffffff8523219000 0x7aa0840240
	bool K2_IsTimerPausedHandle(Object* WorldContextObject, TimerHandle Handle);// 0xffffff8523219000 0x7aa0840320
	bool K2_IsTimerPausedDelegate(delegate Delegate);// 0xffffff8523219000 0x7aa0840400
	bool K2_IsTimerPaused(Object* Object, FString FunctionName);// 0xffffff8523219000 0x7aa08404e0
	bool K2_IsTimerActiveHandle(Object* WorldContextObject, TimerHandle Handle);// 0xffffff8523219000 0x7aa08405c0
	bool K2_IsTimerActiveDelegate(delegate Delegate);// 0xffffff8523219000 0x7aa08406a0
	bool K2_IsTimerActive(Object* Object, FString FunctionName);// 0xffffff8523219000 0x7aa0840780
	TimerHandle K2_InvalidateTimerHandle(out TimerHandle Handle);// 0xffffff8523219000 0x7aa0840860
	float K2_GetTimerRemainingTimeHandle(Object* WorldContextObject, TimerHandle Handle);// 0xffffff8523219000 0x7aa0840940
	float K2_GetTimerRemainingTimeDelegate(delegate Delegate);// 0xffffff8523219000 0x7aa0840a20
	float K2_GetTimerRemainingTime(Object* Object, FString FunctionName);// 0xffffff8523219000 0x7aa0840b00
	float K2_GetTimerElapsedTimeHandle(Object* WorldContextObject, TimerHandle Handle);// 0xffffff8523219000 0x7aa0840be0
	float K2_GetTimerElapsedTimeDelegate(delegate Delegate);// 0xffffff8523219000 0x7aa0840cc0
	float K2_GetTimerElapsedTime(Object* Object, FString FunctionName);// 0xffffff8523219000 0x7aa0840da0
	void K2_ClearTimerHandle(Object* WorldContextObject, TimerHandle Handle);// 0xffffff8523219000 0x7aa0840e80
	void K2_ClearTimerDelegate(delegate Delegate);// 0xffffff8523219000 0x7aa0840f60
	void K2_ClearTimer(Object* Object, FString FunctionName);// 0xffffff8523219000 0x7aa0841040
	void K2_ClearAndInvalidateTimerHandle(Object* WorldContextObject, out TimerHandle Handle);// 0xffffff8523219000 0x7aa0841120
	bool IsValidSoftObjectReference(out const Object* SoftObjectReference);// 0xffffff8523219000 0x7aa0841200
	bool IsValidSoftClassReference(out const class Object SoftClassReference);// 0xffffff8523219000 0x7aa08412e0
	bool IsValidPrimaryAssetType(PrimaryAssetType PrimaryAssetType);// 0xffffff8523219000 0x7aa08413c0
	bool IsValidPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xffffff8523219000 0x7aa08414a0
	bool IsValidClass(class Object Class);// 0xffffff8523219000 0x7aa0841580
	bool IsValid(const Object* Object);// 0xffffff8523219000 0x7aa0841660
	bool IsUnattended();// 0xffffff8523219000 0x7aa0841740
	bool IsStandalone(Object* WorldContextObject);// 0xffffff8523219000 0x7aa0841820
	bool IsServer(Object* WorldContextObject);// 0xffffff8523219000 0x7aa0841900
	bool IsScreensaverEnabled();// 0xffffff8523219000 0x7aa08419e0
	bool IsPackagedForDistribution();// 0xffffff8523219000 0x7aa0841ac0
	bool IsLoggedIn(PlayerController* SpecificPlayer);// 0xffffff8523219000 0x7aa0841ba0
	bool IsInterstitialAdRequested();// 0xffffff8523219000 0x7aa0841c80
	bool IsInterstitialAdAvailable();// 0xffffff8523219000 0x7aa07ce780
	bool IsDedicatedServer(Object* WorldContextObject);// 0xffffff8523219000 0x7aa07ce860
	bool IsControllerAssignedToGamepad(int ControllerId);// 0xffffff8523219000 0x7aa07ce940
	void HideAdBanner();// 0xffffff8523219000 0x7aa07cea20
	bool GetVolumeButtonsHandledBySystem();// 0xffffff8523219000 0x7aa07ceb00
	FString GetUniqueDeviceId();// 0xffffff8523219000 0x7aa07cebe0
	bool GetSupportedFullscreenResolutions(out IntPoint[] Resolutions);// 0xffffff8523219000 0x7aa07cecc0
	Object* GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xffffff8523219000 0x7aa07ceda0
	class Object GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xffffff8523219000 0x7aa07cee80
	int GetRenderingMaterialQualityLevel();// 0xffffff8523219000 0x7aa07cef60
	int GetRenderingDetailMode();// 0xffffff8523219000 0x7aa07cf040
	FString GetProjectSavedDirectory();// 0xffffff8523219000 0x7aa07cf120
	FString GetProjectDirectory();// 0xffffff8523219000 0x7aa07cf200
	FString GetProjectContentDirectory();// 0xffffff8523219000 0x7aa07cf2e0
	void GetPrimaryAssetsWithBundleState(out const FName[] RequiredBundles, out const FName[] ExcludedBundles, out const PrimaryAssetType[] ValidTypes, bool bForceCurrentState, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0xffffff8523219000 0x7aa07cf3c0
	void GetPrimaryAssetIdList(PrimaryAssetType PrimaryAssetType, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0xffffff8523219000 0x7aa07cf4a0
	PrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(Object* SoftObjectReference);// 0xffffff8523219000 0x7aa07cf580
	PrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(class Object SoftClassReference);// 0xffffff8523219000 0x7aa07cf660
	PrimaryAssetId GetPrimaryAssetIdFromObject(Object* Object);// 0xffffff8523219000 0x7aa07cf740
	PrimaryAssetId GetPrimaryAssetIdFromClass(class Object Class);// 0xffffff8523219000 0x7aa07cf820
	FString[] GetPreferredLanguages();// 0xffffff8523219000 0x7aa07cf900
	FString GetPlatformUserName();// 0xffffff8523219000 0x7aa07cf9e0
	FString GetPathName(const Object* Object);// 0xffffff8523219000 0x7aa07cfac0
	Object* GetOuterObject(const Object* Object);// 0xffffff8523219000 0x7aa07cfba0
	FString GetObjectName(const Object* Object);// 0xffffff8523219000 0x7aa07cfc80
	Object* GetObjectFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xffffff8523219000 0x7aa07cfd60
	int GetMinYResolutionForUI();// 0xffffff8523219000 0x7aa07cfe40
	int GetMinYResolutionFor3DView();// 0xffffff8523219000 0x7aa07cff20
	FString GetLocalCurrencySymbol();// 0xffffff8523219000 0x7aa07ccaa0
	FString GetLocalCurrencyCode();// 0xffffff8523219000 0x7aa07ccb80
	float GetGameTimeInSeconds(Object* WorldContextObject);// 0xffffff8523219000 0x7aa07ccc60
	FString GetGamepadControllerName(int ControllerId);// 0xffffff8523219000 0x7aa07ccd40
	FString GetGameName();// 0xffffff8523219000 0x7aa07cce20
	FString GetGameBundleId();// 0xffffff8523219000 0x7aa07ccf00
	FString GetEngineVersion();// 0xffffff8523219000 0x7aa07ccfe0
	FString GetDisplayName(const Object* Object);// 0xffffff8523219000 0x7aa07cd0c0
	FString GetDeviceId();// 0xffffff8523219000 0x7aa07cd1a0
	FString GetDefaultLocale();// 0xffffff8523219000 0x7aa07cd280
	FString GetDefaultLanguage();// 0xffffff8523219000 0x7aa07cd360
	bool GetCurrentBundleState(PrimaryAssetId PrimaryAssetId, bool bForceCurrentState, out FName[] OutBundles);// 0xffffff8523219000 0x7aa07cd440
	bool GetConvenientWindowedResolutions(out IntPoint[] Resolutions);// 0xffffff8523219000 0x7aa07cd520
	int GetConsoleVariableIntValue(FString VariableName);// 0xffffff8523219000 0x7aa07cd600
	float GetConsoleVariableFloatValue(FString VariableName);// 0xffffff8523219000 0x7aa07cd6e0
	bool GetConsoleVariableBoolValue(FString VariableName);// 0xffffff8523219000 0x7aa07cd7c0
	void GetComponentBounds(const SceneComponent* Component, out Vector Origin, out Vector BoxExtent, out float SphereRadius);// 0xffffff8523219000 0x7aa07cd8a0
	FString GetCommandLine();// 0xffffff8523219000 0x7aa07cd980
	class Object GetClassFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xffffff8523219000 0x7aa07cda60
	FString GetClassDisplayName(class Object Class);// 0xffffff8523219000 0x7aa07cdb40
	int GetAdIDCount();// 0xffffff8523219000 0x7aa07cdc20
	void GetActorListFromComponentList(out const PrimitiveComponent*[] ComponentList, class Object ActorClassFilter, out Actor*[] OutActorList);// 0xffffff8523219000 0x7aa07cdd00
	void GetActorBounds(const Actor* Actor, out Vector Origin, out Vector BoxExtent);// 0xffffff8523219000 0x7aa07cdde0
	void ForceCloseAdBanner();// 0xffffff8523219000 0x7aa07cdec0
	void FlushPersistentDebugLines(Object* WorldContextObject);// 0xffffff8523219000 0x7aa07cdfa0
	void FlushDebugStrings(Object* WorldContextObject);// 0xffffff8523219000 0x7aa07ce080
	void ExecuteConsoleCommand(Object* WorldContextObject, FString Command, PlayerController* SpecificPlayer);// 0xffffff8523219000 0x7aa07ce160
	bool EqualEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0xffffff8523219000 0x7aa07ce240
	bool EqualEqual_SoftClassReference(out const class Object A, out const class Object B);// 0xffffff8523219000 0x7aa07ce320
	bool EqualEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0xffffff8523219000 0x7aa07ce400
	bool EqualEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0xffffff8523219000 0x7aa07ce4e0
	int EndTransaction();// 0xffffff8523219000 0x7aa07ce5c0
	void DrawDebugString(Object* WorldContextObject, const Vector TextLocation, FString Text, Actor* TestBaseActor, LinearColor TextColor, float Duration);// 0xffffff8523219000 0x7aa07ce6a0
	void DrawDebugSphere(Object* WorldContextObject, const Vector Center, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0xffffff8523219000 0x7aa07cadc0
	void DrawDebugPoint(Object* WorldContextObject, const Vector Position, float Size, LinearColor PointColor, float Duration);// 0xffffff8523219000 0x7aa07caea0
	void DrawDebugPlane(Object* WorldContextObject, out const Plane PlaneCoordinates, const Vector Location, float Size, LinearColor PlaneColor, float Duration);// 0xffffff8523219000 0x7aa07caf80
	void DrawDebugLine(Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, LinearColor LineColor, float Duration, float Thickness);// 0xffffff8523219000 0x7aa07cb060
	void DrawDebugFrustum(Object* WorldContextObject, out const Transform FrustumTransform, LinearColor FrustumColor, float Duration, float Thickness);// 0xffffff8523219000 0x7aa07cb140
	void DrawDebugFloatHistoryTransform(Object* WorldContextObject, out const DebugFloatHistory FloatHistory, out const Transform DrawTransform, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0xffffff8523219000 0x7aa07cb220
	void DrawDebugFloatHistoryLocation(Object* WorldContextObject, out const DebugFloatHistory FloatHistory, Vector DrawLocation, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0xffffff8523219000 0x7aa07cb300
	void DrawDebugCylinder(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0xffffff8523219000 0x7aa07cb3e0
	void DrawDebugCoordinateSystem(Object* WorldContextObject, const Vector AxisLoc, const Rotator AxisRot, float Scale, float Duration, float Thickness);// 0xffffff8523219000 0x7aa07cb4c0
	void DrawDebugConeInDegrees(Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0xffffff8523219000 0x7aa07cb5a0
	void DrawDebugCone(Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0xffffff8523219000 0x7aa07cb680
	void DrawDebugCircle(Object* WorldContextObject, Vector Center, float Radius, int NumSegments, LinearColor LineColor, float Duration, float Thickness, Vector YAxis, Vector ZAxis, bool bDrawAxis);// 0xffffff8523219000 0x7aa07cb760
	void DrawDebugCapsule(Object* WorldContextObject, const Vector Center, float HalfHeight, float Radius, const Rotator Rotation, LinearColor LineColor, float Duration, float Thickness);// 0xffffff8523219000 0x7aa07cb840
	void DrawDebugCamera(const CameraActor* CameraActor, LinearColor CameraColor, float Duration);// 0xffffff8523219000 0x7aa07cb920
	void DrawDebugBox(Object* WorldContextObject, const Vector Center, Vector Extent, LinearColor LineColor, const Rotator Rotation, float Duration, float Thickness);// 0xffffff8523219000 0x7aa07cba00
	void DrawDebugArrow(Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, float ArrowSize, LinearColor LineColor, float Duration, float Thickness);// 0xffffff8523219000 0x7aa07cbae0
	bool DoesImplementInterface(Object* TestObject, class Interface Interface);// 0xffffff8523219000 0x7aa07cbbc0
	void Delay(Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0xffffff8523219000 0x7aa07cbca0
	void CreateCopyForUndoBuffer(Object* ObjectToModify);// 0xffffff8523219000 0x7aa07cbd80
	FString ConvertToRelativePath(FString Filename);// 0xffffff8523219000 0x7aa07cbe60
	FString ConvertToAbsolutePath(FString Filename);// 0xffffff8523219000 0x7aa07cbf40
	Object* Conv_SoftObjPathToSoftObjRef(out const SoftObjectPath SoftObjectPath);// 0xffffff8523219000 0x7aa07cc020
	FString Conv_SoftObjectReferenceToString(out const Object* SoftObjectReference);// 0xffffff8523219000 0x7aa07cc100
	Object* Conv_SoftObjectReferenceToObject(out const Object* SoftObject);// 0xffffff8523219000 0x7aa07cc1e0
	FString Conv_SoftClassReferenceToString(out const class Object SoftClassReference);// 0xffffff8523219000 0x7aa07cc2c0
	class Object Conv_SoftClassReferenceToClass(out const class Object SoftClass);// 0xffffff8523219000 0x7aa07cc3a0
	FString Conv_PrimaryAssetTypeToString(PrimaryAssetType PrimaryAssetType);// 0xffffff8523219000 0x7aa07cc480
	FString Conv_PrimaryAssetIdToString(PrimaryAssetId PrimaryAssetId);// 0xffffff8523219000 0x7aa07cc560
	Object* Conv_ObjectToSoftObjectReference(Object* Object);// 0xffffff8523219000 0x7aa07cc640
	Object* Conv_InterfaceToObject(out const interface classNone Interface);// 0xffffff8523219000 0x7aa07cc720
	class Object Conv_ClassToSoftClassReference(out const class Object Class);// 0xffffff8523219000 0x7aa07cc800
	void ControlScreensaver(bool bAllowScreenSaver);// 0xffffff8523219000 0x7aa07cc8e0
	bool ComponentOverlapComponents(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xffffff8523219000 0x7aa07cc9c0
	bool ComponentOverlapActors(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xffffff8523219000 0x7aa07c90e0
	void CollectGarbage();// 0xffffff8523219000 0x7aa07c91c0
	bool CapsuleTraceSingleForObjects(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa07c92a0
	bool CapsuleTraceSingleByProfile(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa07c9380
	bool CapsuleTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa07c9460
	bool CapsuleTraceMultiForObjects(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa07c9540
	bool CapsuleTraceMultiByProfile(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa07c9620
	bool CapsuleTraceMulti(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa07c9700
	bool CapsuleOverlapComponents(Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xffffff8523219000 0x7aa07c97e0
	bool CapsuleOverlapActors(Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xffffff8523219000 0x7aa07c98c0
	bool CanLaunchURL(FString URL);// 0xffffff8523219000 0x7aa07c99a0
	void CancelTransaction(const int Index);// 0xffffff8523219000 0x7aa07c9a80
	void BreakSoftObjectPath(SoftObjectPath InSoftObjectPath, out FString PathString);// 0xffffff8523219000 0x7aa07c9b60
	void BreakSoftClassPath(SoftClassPath InSoftClassPath, out FString PathString);// 0xffffff8523219000 0x7aa07c9c40
	bool BoxTraceSingleForObjects(Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa07c9d20
	bool BoxTraceSingleByProfile(Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa07c9e00
	bool BoxTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa07c9ee0
	bool BoxTraceMultiForObjects(Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa07c9fc0
	bool BoxTraceMultiByProfile(Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa07ca0a0
	bool BoxTraceMulti(Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8523219000 0x7aa07ca180
	bool BoxOverlapComponents(Object* WorldContextObject, const Vector BoxPos, Vector Extent, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xffffff8523219000 0x7aa07ca260
	bool BoxOverlapActors(Object* WorldContextObject, const Vector BoxPos, Vector BoxExtent, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xffffff8523219000 0x7aa07ca340
	int BeginTransaction(FString Context, FText Description, Object* PrimaryObject);// 0xffffff8523219000 0x7aa07ca420
	DebugFloatHistory AddFloatHistorySample(float Value, out const DebugFloatHistory FloatHistory);// 0xffffff8523219000 0x7aa07ca500

--------------------------------
Class: UserActivity
	FString ActionName;//[Offset: 0x0, Size: 0x10] 0x7aa0835560

--------------------------------
Class: GenericStruct
	int Data;//[Offset: 0x0, Size: 0x4] 0x7aa0833ab0

--------------------------------
Class: CollisionProfileName
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7aa0834300

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8] 0x7aa08320e0

--------------------------------
Class: DebugFloatHistory
	float[] Samples;//[Offset: 0x0, Size: 0x10] 0x7aa07da200
	float MaxSamples;//[Offset: 0x10, Size: 0x4] 0x7a963ef350
	float MinValue;//[Offset: 0x14, Size: 0x4] 0x7a963ef3c0
	float MaxValue;//[Offset: 0x18, Size: 0x4] 0x7a963ef430
	bool bAutoAdjustMinMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7aa07da280

--------------------------------
Class: KismetTextLibrary.BlueprintFunctionLibrary.Object
	FText TextTrimTrailing(out const FText InText);// 0xffffff8523219000 0x7a9c6c3ea0
	FText TextTrimPrecedingAndTrailing(out const FText InText);// 0xffffff8523219000 0x7a9c6c3f80
	FText TextTrimPreceding(out const FText InText);// 0xffffff8523219000 0x7a9c6c4060
	FText TextToUpper(out const FText InText);// 0xffffff8523219000 0x7a9c6c4140
	FText TextToLower(out const FText InText);// 0xffffff8523219000 0x7a9c6c4220
	bool TextIsTransient(out const FText InText);// 0xffffff8523219000 0x7a9c6c4300
	bool TextIsFromStringTable(out const FText Text);// 0xffffff8523219000 0x7a9c6c43e0
	bool TextIsEmpty(out const FText InText);// 0xffffff8523219000 0x7a9c6c44c0
	bool TextIsCultureInvariant(out const FText InText);// 0xffffff8523219000 0x7a9c6c45a0
	FText TextFromStringTable(const FName TableId, FString Key);// 0xffffff8523219000 0x7a9c6c4680
	bool StringTableIdAndKeyFromText(FText Text, out FName OutTableId, out FString OutKey);// 0xffffff8523219000 0x7a9c6c4760
	FText PolyglotDataToText(out const PolyglotTextData PolyglotData);// 0xffffff8523219000 0x7a9c6c4840
	bool NotEqual_TextText(out const FText A, out const FText B);// 0xffffff8523219000 0x7a9c6c4920
	bool NotEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0xffffff8523219000 0x7a9c6c4a00
	void IsPolyglotDataValid(out const PolyglotTextData PolyglotData, out bool IsValid, out FText ErrorMessage);// 0xffffff8523219000 0x7a9c6c4ae0
	FText GetEmptyText();// 0xffffff8523219000 0x7a9c6c4bc0
	FText Format(FText InPattern, FormatArgumentData[] InArgs);// 0xffffff8523219000 0x7a9c6c4ca0
	bool FindTextInLocalizationTable(FString Namespace, FString Key, out FText OutText);// 0xffffff8523219000 0x7a9c6c4d80
	bool EqualEqual_TextText(out const FText A, out const FText B);// 0xffffff8523219000 0x7a9c6c4e60
	bool EqualEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0xffffff8523219000 0x7a9c6c4f40
	FText Conv_VectorToText(Vector InVec);// 0xffffff8523219000 0x7a9c6c5020
	FText Conv_Vector2dToText(Vector2D InVec);// 0xffffff8523219000 0x7a9c6c5100
	FText Conv_TransformToText(out const Transform InTrans);// 0xffffff8523219000 0x7a9c6c51e0
	FString Conv_TextToString(out const FText InText);// 0xffffff8523219000 0x7a9c6c52c0
	FText Conv_StringToText(FString inString);// 0xffffff8523219000 0x7a9c6c53a0
	FText Conv_RotatorToText(Rotator InRot);// 0xffffff8523219000 0x7a9c6c5480
	FText Conv_ObjectToText(Object* InObj);// 0xffffff8523219000 0x7a9c6c5560
	FText Conv_NameToText(FName InName);// 0xffffff8523219000 0x7a9c6c5640
	FText Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0xffffff8523219000 0x7a9c6c1d60
	FText Conv_FloatToText(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0xffffff8523219000 0x7a9c6c1e40
	FText Conv_ColorToText(LinearColor InColor);// 0xffffff8523219000 0x7a9c6c1f20
	FText Conv_ByteToText(byte Value);// 0xffffff8523219000 0x7a9c6c2000
	FText Conv_BoolToText(bool InBool);// 0xffffff8523219000 0x7a9c6c20e0
	FText AsTimeZoneTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0xffffff8523219000 0x7a9c6c21c0
	FText AsTimeZoneDateTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0xffffff8523219000 0x7a9c6c22a0
	FText AsTimeZoneDate_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0xffffff8523219000 0x7a9c6c2380
	FText AsTimespan_Timespan(out const Timespan InTimespan);// 0xffffff8523219000 0x7a9c6c2460
	FText AsTime_DateTime(out const DateTime In);// 0xffffff8523219000 0x7a9c6c2540
	FText AsPercent_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0xffffff8523219000 0x7a9c6c2620
	FText AsDateTime_DateTime(out const DateTime In);// 0xffffff8523219000 0x7a9c6c2700
	FText AsDate_DateTime(out const DateTime InDateTime);// 0xffffff8523219000 0x7a9c6c27e0
	FText AsCurrencyBase(int BaseValue, FString CurrencyCode);// 0xffffff8523219000 0x7a9c6c28c0
	FText AsCurrency_Integer(int Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0xffffff8523219000 0x7a9c6c29a0
	FText AsCurrency_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0xffffff8523219000 0x7a9c6c2a80

--------------------------------
Class: PolyglotTextData
	enum Category;//[Offset: 0x0, Size: 0x1] 0x7af81c5c00
	FString NativeCulture;//[Offset: 0x8, Size: 0x10] 0x7af958f5f0
	FString Namespace;//[Offset: 0x18, Size: 0x10] 0x7af958f660
	FString Key;//[Offset: 0x28, Size: 0x10] 0x7af958f6d0
	FString NativeString;//[Offset: 0x38, Size: 0x10] 0x7af958f740
	<FString,FString> LocalizedStrings;//[Offset: 0x48, Size: 0x50] 0x7af8184f20
	bool bIsMinimalPatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x7af81c5c80
	FText CachedText;//[Offset: 0xa0, Size: 0x18] 0x7af958f900

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10] 0x7a963ec6b0
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1] 0x7a9637fd00
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18] 0x7a963ec720
	int ArgumentValueInt;//[Offset: 0x30, Size: 0x4] 0x7a963ec790
	float ArgumentValueFloat;//[Offset: 0x34, Size: 0x4] 0x7a963ec800
	enum ArgumentValueGender;//[Offset: 0x38, Size: 0x1] 0x7a9637fe00

--------------------------------
Class: Layer.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8] 0x7a9c6d4450
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7a9c6e1c00
	LayerActorStats[] ActorStats;//[Offset: 0x38, Size: 0x10] 0x7a9c6e1d00

--------------------------------
Class: LayerActorStats
	class Object* Type;//[Offset: 0x0, Size: 0x8] 0x7a9ca1cf80
	int Total;//[Offset: 0x8, Size: 0x4] 0x7a9ca0a6c0

--------------------------------
Class: LevelBounds.Actor.Object
	bool bAutoUpdateBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1] 0x7a9c6e2e00

--------------------------------
Class: LevelScriptBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelStreamingAlwaysLoaded.LevelStreaming.Object

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x7a9c6e3480
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1] 0x7a9c6e3500
	LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0xffffff8523219000 0x7a9c6c68a0
	LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0xffffff8523219000 0x7a9c6c6980

--------------------------------
Class: LevelStreamingPersistent.LevelStreaming.Object

--------------------------------
Class: LightmappedSurfaceCollection.Object
	Model* SourceModel;//[Offset: 0x28, Size: 0x8] 0x7a9c6e5280
	int[] Surfaces;//[Offset: 0x30, Size: 0x10] 0x7a9c6e3200

--------------------------------
Class: LightMapTexture2D.Texture2D.Texture.Object

--------------------------------
Class: LightmassCharacterIndirectDetailVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassPortal.Actor.Object
	LightmassPortalComponent* PortalComponent;//[Offset: 0x330, Size: 0x8] 0x7a9c6e5200

--------------------------------
Class: LightmassPortalComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x258, Size: 0x8] 0x7a9c6e5180

--------------------------------
Class: LightmassPrimitiveSettingsObject.Object
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x28, Size: 0x18] 0x7a9c6e5100

--------------------------------
Class: LocalPlayerSubsystem.Subsystem.Object

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x578, Size: 0x10] 0x7a9c6e7c80
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0xffffff8523219000 0x7a9c6c6440
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0xffffff8523219000 0x7a9c6c6520

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8] 0x7a9ca1f400
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x8, Size: 0x8] 0x7a9ca1f480
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7a9ca1f500
	float BaseSizeX;//[Offset: 0x14, Size: 0x4] 0x7a9ca0ba00
	float BaseSizeY;//[Offset: 0x18, Size: 0x4] 0x7a9ca0ba70
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x20, Size: 0x8] 0x7a9ca1f580

--------------------------------
Class: MaterialExpressionAbs.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e7b80

--------------------------------
Class: MaterialExpressionActorPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAdd.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e7a80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x7a9c6e7b00
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x7a9c6d4e60
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x7a9c6d4ed0

--------------------------------
Class: MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	FName ParameterName;//[Offset: 0xd4, Size: 0x8] 0x7a9ca6a650
	Guid ExpressionGUID;//[Offset: 0xdc, Size: 0x10] 0x7a9cb0d300
	FName Group;//[Offset: 0xec, Size: 0x8] 0x7a9ca6a6c0

--------------------------------
Class: MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAntialiasedTextureMask.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	float Threshold;//[Offset: 0xf4, Size: 0x4] 0x7a9c6d4df0
	byte Channel;//[Offset: 0xf8, Size: 0x1] 0x7a9c6e7a00

--------------------------------
Class: MaterialExpressionAppendVector.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e7900
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x7a9c6e7980

--------------------------------
Class: MaterialExpressionArccosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e7880

--------------------------------
Class: MaterialExpressionArccosineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e7800

--------------------------------
Class: MaterialExpressionArcsine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e7780

--------------------------------
Class: MaterialExpressionArcsineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e7700

--------------------------------
Class: MaterialExpressionArctangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e7680

--------------------------------
Class: MaterialExpressionArctangent2.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e7580
	ExpressionInput X;//[Offset: 0x50, Size: 0xc] 0x7a9c6e7600

--------------------------------
Class: MaterialExpressionArctangent2Fast.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e7480
	ExpressionInput X;//[Offset: 0x50, Size: 0xc] 0x7a9c6e7500

--------------------------------
Class: MaterialExpressionArctangentFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e7400

--------------------------------
Class: MaterialExpressionAtmosphericFogColor.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e9480

--------------------------------
Class: MaterialExpressionAtmosphericLightColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAtmosphericLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCustomOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionBentNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e9400

--------------------------------
Class: MaterialExpressionBlackBody.MaterialExpression.Object
	ExpressionInput Temp;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e9380

--------------------------------
Class: MaterialExpressionBlendMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput A;//[Offset: 0x3c, Size: 0x10] 0x7a9c6e9100
	MaterialAttributesInput B;//[Offset: 0x54, Size: 0x10] 0x7a9c6e9180
	ExpressionInput Alpha;//[Offset: 0x6c, Size: 0xc] 0x7a9c6e9200
	byte PixelAttributeBlendType;//[Offset: 0x80, Size: 0x1] 0x7a9c6e9280
	byte VertexAttributeBlendType;//[Offset: 0x81, Size: 0x1] 0x7a9c6e9300

--------------------------------
Class: MaterialExpressionBreakMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x3c, Size: 0x10] 0x7a9c6e9080

--------------------------------
Class: MaterialExpressionBumpOffset.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e8f00
	ExpressionInput Height;//[Offset: 0x50, Size: 0xc] 0x7a9c6e8f80
	ExpressionInput HeightRatioInput;//[Offset: 0x64, Size: 0xc] 0x7a9c6e9000
	float HeightRatio;//[Offset: 0x78, Size: 0x4] 0x7a9c6d4ca0
	float ReferencePlane;//[Offset: 0x7c, Size: 0x4] 0x7a9c6d4d10
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4] 0x7a9c6d4d80

--------------------------------
Class: MaterialExpressionCameraPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCameraVectorWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCeil.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e8e80

--------------------------------
Class: MaterialExpressionParameter.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x7a9c6d4c30
	Guid ExpressionGUID;//[Offset: 0x44, Size: 0x10] 0x7a9c6e8e00

--------------------------------
Class: MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	LinearColor DefaultValue;//[Offset: 0x54, Size: 0x10] 0x7a9c6e8d80

--------------------------------
Class: MaterialExpressionChannelMaskParameter.MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	byte MaskChannel;//[Offset: 0x64, Size: 0x1] 0x7a9c6e8c80
	ExpressionInput Input;//[Offset: 0x68, Size: 0xc] 0x7a9c6e8d00

--------------------------------
Class: MaterialExpressionClamp.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e8a80
	ExpressionInput Min;//[Offset: 0x50, Size: 0xc] 0x7a9c6e8b00
	ExpressionInput Max;//[Offset: 0x64, Size: 0xc] 0x7a9c6e8b80
	byte ClampMode;//[Offset: 0x78, Size: 0x1] 0x7a9c6e8c00
	float MinDefault;//[Offset: 0x7c, Size: 0x4] 0x7a9c6d4b50
	float MaxDefault;//[Offset: 0x80, Size: 0x4] 0x7a9c6d4bc0

--------------------------------
Class: MaterialExpressionClearCoatNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e8a00

--------------------------------
Class: MaterialExpressionCollectionParameter.MaterialExpression.Object
	MaterialParameterCollection* Collection;//[Offset: 0x40, Size: 0x8] 0x7a9c6e8900
	FName ParameterName;//[Offset: 0x48, Size: 0x8] 0x7a9c6d4ae0
	Guid ParameterId;//[Offset: 0x50, Size: 0x10] 0x7a9c6e8980

--------------------------------
Class: MaterialExpressionComment.MaterialExpression.Object
	int SizeX;//[Offset: 0x3c, Size: 0x4] 0x7a9c6d4920
	int SizeY;//[Offset: 0x40, Size: 0x4] 0x7a9c6d4990
	FString Text;//[Offset: 0x48, Size: 0x10] 0x7a9c6d4a00
	LinearColor CommentColor;//[Offset: 0x58, Size: 0x10] 0x7a9c6e8880
	int FontSize;//[Offset: 0x68, Size: 0x4] 0x7a9c6d4a70

--------------------------------
Class: MaterialExpressionComponentMask.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e8600
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7a9c6e8680
	bool G;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x7a9c6e8700
	bool B;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1] 0x7a9c6e8780
	bool A;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1] 0x7a9c6e8800

--------------------------------
Class: MaterialExpressionConstant.MaterialExpression.Object
	float R;//[Offset: 0x3c, Size: 0x4] 0x7a9c6d48b0

--------------------------------
Class: MaterialExpressionConstant2Vector.MaterialExpression.Object
	float R;//[Offset: 0x3c, Size: 0x4] 0x7a9c6d64b0
	float G;//[Offset: 0x40, Size: 0x4] 0x7a9c6d4840

--------------------------------
Class: MaterialExpressionConstant3Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10] 0x7a9c6e8580

--------------------------------
Class: MaterialExpressionConstant4Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10] 0x7a9c6e8500

--------------------------------
Class: MaterialExpressionConstantBiasScale.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e8480
	float Bias;//[Offset: 0x50, Size: 0x4] 0x7a9c6d63d0
	float Scale;//[Offset: 0x54, Size: 0x4] 0x7a9c6d6440

--------------------------------
Class: MaterialExpressionCosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ea500
	float Period;//[Offset: 0x50, Size: 0x4] 0x7a9c6d6360

--------------------------------
Class: MaterialExpressionCrossProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ea400
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x7a9c6ea480

--------------------------------
Class: MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	float DefaultValue;//[Offset: 0x54, Size: 0x4] 0x7a9c6d62f0

--------------------------------
Class: MaterialExpressionCurveAtlasRowParameter.MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	CurveLinearColor* Curve;//[Offset: 0x58, Size: 0x8] 0x7a9c6ea280
	CurveLinearColorAtlas* Atlas;//[Offset: 0x60, Size: 0x8] 0x7a9c6ea300
	ExpressionInput InputTime;//[Offset: 0x68, Size: 0xc] 0x7a9c6ea380

--------------------------------
Class: MaterialExpressionCustom.MaterialExpression.Object
	FString Code;//[Offset: 0x40, Size: 0x10] 0x7a9c6d6210
	byte OutputType;//[Offset: 0x50, Size: 0x1] 0x7a9c6ea100
	FString Description;//[Offset: 0x58, Size: 0x10] 0x7a9c6d6280
	CustomInput[] Inputs;//[Offset: 0x68, Size: 0x10] 0x7a9c6ea200

--------------------------------
Class: CustomInput
	FName InputName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0b990
	ExpressionInput Input;//[Offset: 0x8, Size: 0xc] 0x7a9ca1f380

--------------------------------
Class: MaterialExpressionDDX.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ea080

--------------------------------
Class: MaterialExpressionDDY.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ea000

--------------------------------
Class: MaterialExpressionDecalDerivative.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalLifetimeOpacity.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalMipmapLevel.MaterialExpression.Object
	ExpressionInput TextureSize;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e9f80
	float ConstWidth;//[Offset: 0x50, Size: 0x4] 0x7a9c6d6130
	float ConstHeight;//[Offset: 0x54, Size: 0x4] 0x7a9c6d61a0

--------------------------------
Class: MaterialExpressionDeltaTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDepthFade.MaterialExpression.Object
	ExpressionInput InOpacity;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e9e80
	ExpressionInput FadeDistance;//[Offset: 0x50, Size: 0xc] 0x7a9c6e9f00
	float OpacityDefault;//[Offset: 0x64, Size: 0x4] 0x7a9c6d6050
	float FadeDistanceDefault;//[Offset: 0x68, Size: 0x4] 0x7a9c6d60c0

--------------------------------
Class: MaterialExpressionDepthOfFieldFunction.MaterialExpression.Object
	byte FunctionValue;//[Offset: 0x39, Size: 0x1] 0x7a9c6e9d80
	ExpressionInput Depth;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e9e00

--------------------------------
Class: MaterialExpressionDeriveNormalZ.MaterialExpression.Object
	ExpressionInput InXY;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e9d00

--------------------------------
Class: MaterialExpressionDesaturation.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e9b80
	ExpressionInput Fraction;//[Offset: 0x50, Size: 0xc] 0x7a9c6e9c00
	LinearColor LuminanceFactors;//[Offset: 0x64, Size: 0x10] 0x7a9c6e9c80

--------------------------------
Class: MaterialExpressionDistance.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e9a80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x7a9c6e9b00

--------------------------------
Class: MaterialExpressionDistanceCullFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDistanceFieldGradient.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e9a00

--------------------------------
Class: MaterialExpressionDistanceToNearestSurface.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e9980

--------------------------------
Class: MaterialExpressionDivide.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e9880
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x7a9c6e9900
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x7a9c6d5f70
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x7a9c6d5fe0

--------------------------------
Class: MaterialExpressionDotProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e9780
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x7a9c6e9800

--------------------------------
Class: MaterialExpressionDynamicParameter.MaterialExpression.Object
	FString[] ParamNames;//[Offset: 0x40, Size: 0x10] 0x7a9c6e9680
	LinearColor DefaultValue;//[Offset: 0x50, Size: 0x10] 0x7a9c6e9700
	uint32 ParameterIndex;//[Offset: 0x60, Size: 0x4] 0x7a9c6d5f00

--------------------------------
Class: MaterialExpressionEyeAdaptation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionFloor.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6e9500

--------------------------------
Class: MaterialExpressionFmod.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x7a9c6eb500
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x7a9c6eb580

--------------------------------
Class: MaterialExpressionFontSample.MaterialExpression.Object
	Font* Font;//[Offset: 0x40, Size: 0x8] 0x7a9c6eb480
	int FontTexturePage;//[Offset: 0x48, Size: 0x4] 0x7a9c6d5e20

--------------------------------
Class: MaterialExpressionFontSampleParameter.MaterialExpressionFontSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x4c, Size: 0x8] 0x7a9c6d5d40
	Guid ExpressionGUID;//[Offset: 0x54, Size: 0x10] 0x7a9c6eb380
	FName Group;//[Offset: 0x64, Size: 0x8] 0x7a9c6d5db0

--------------------------------
Class: MaterialExpressionFrac.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6eb300

--------------------------------
Class: MaterialExpressionFresnel.MaterialExpression.Object
	ExpressionInput ExponentIn;//[Offset: 0x3c, Size: 0xc] 0x7a9c6eb180
	float Exponent;//[Offset: 0x50, Size: 0x4] 0x7a9c6d5c60
	ExpressionInput BaseReflectFractionIn;//[Offset: 0x54, Size: 0xc] 0x7a9c6eb200
	float BaseReflectFraction;//[Offset: 0x68, Size: 0x4] 0x7a9c6d5cd0
	ExpressionInput Normal;//[Offset: 0x6c, Size: 0xc] 0x7a9c6eb280

--------------------------------
Class: MaterialExpressionFunctionInput.MaterialExpression.Object
	ExpressionInput Preview;//[Offset: 0x3c, Size: 0xc] 0x7a9c6eae80
	FName InputName;//[Offset: 0x50, Size: 0x8] 0x7a9c6d5b10
	FString Description;//[Offset: 0x58, Size: 0x10] 0x7a9c6d5b80
	Guid ID;//[Offset: 0x68, Size: 0x10] 0x7a9c6eaf00
	byte InputType;//[Offset: 0x78, Size: 0x1] 0x7a9c6eaf80
	Vector4 PreviewValue;//[Offset: 0x80, Size: 0x10] 0x7a9c6eb000
	bool bUsePreviewValueAsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7a9c6eb080
	int SortPriority;//[Offset: 0x94, Size: 0x4] 0x7a9c6d5bf0
	bool bCompilingFunctionPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x7a9c6eb100

--------------------------------
Class: MaterialExpressionFunctionOutput.MaterialExpression.Object
	FName OutputName;//[Offset: 0x3c, Size: 0x8] 0x7a9c6d59c0
	FString Description;//[Offset: 0x48, Size: 0x10] 0x7a9c6d5a30
	int SortPriority;//[Offset: 0x58, Size: 0x4] 0x7a9c6d5aa0
	ExpressionInput A;//[Offset: 0x5c, Size: 0xc] 0x7a9c6ead00
	bool bLastPreviewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7a9c6ead80
	Guid ID;//[Offset: 0x74, Size: 0x10] 0x7a9c6eae00

--------------------------------
Class: MaterialExpressionGetMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x3c, Size: 0x10] 0x7a9c6eab80
	Guid[] AttributeGetTypes;//[Offset: 0x58, Size: 0x10] 0x7a9c6eac80

--------------------------------
Class: MaterialExpressionGIReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x7a9c6eaa00
	ExpressionInput StaticIndirect;//[Offset: 0x50, Size: 0xc] 0x7a9c6eaa80
	ExpressionInput DynamicIndirect;//[Offset: 0x64, Size: 0xc] 0x7a9c6eab00

--------------------------------
Class: MaterialExpressionIf.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ea780
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x7a9c6ea800
	ExpressionInput AGreaterThanB;//[Offset: 0x64, Size: 0xc] 0x7a9c6ea880
	ExpressionInput AEqualsB;//[Offset: 0x78, Size: 0xc] 0x7a9c6ea900
	ExpressionInput ALessThanB;//[Offset: 0x8c, Size: 0xc] 0x7a9c6ea980
	float EqualsThreshold;//[Offset: 0xa0, Size: 0x4] 0x7a9c6d5870
	float ConstB;//[Offset: 0xa4, Size: 0x4] 0x7a9c6d58e0
	float ConstAEqualsB;//[Offset: 0xa8, Size: 0x4] 0x7a9c6d5950

--------------------------------
Class: MaterialExpressionLightmapUVs.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLightmassReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ea680
	ExpressionInput Lightmass;//[Offset: 0x50, Size: 0xc] 0x7a9c6ea700

--------------------------------
Class: MaterialExpressionLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ec600
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x7a9c6ea580
	ExpressionInput Alpha;//[Offset: 0x64, Size: 0xc] 0x7a9c6ea600
	float ConstA;//[Offset: 0x78, Size: 0x4] 0x7a9c6d5720
	float ConstB;//[Offset: 0x7c, Size: 0x4] 0x7a9c6d5790
	float ConstAlpha;//[Offset: 0x80, Size: 0x4] 0x7a9c6d5800

--------------------------------
Class: MaterialExpressionLogarithm10.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ec580

--------------------------------
Class: MaterialExpressionLogarithm2.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ec500

--------------------------------
Class: MaterialExpressionMakeMaterialAttributes.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ebc00
	ExpressionInput Metallic;//[Offset: 0x50, Size: 0xc] 0x7a9c6ebc80
	ExpressionInput Specular;//[Offset: 0x64, Size: 0xc] 0x7a9c6ebd00
	ExpressionInput Roughness;//[Offset: 0x78, Size: 0xc] 0x7a9c6ebd80
	ExpressionInput EmissiveColor;//[Offset: 0x8c, Size: 0xc] 0x7a9c6ebe00
	ExpressionInput Opacity;//[Offset: 0xa0, Size: 0xc] 0x7a9c6ebe80
	ExpressionInput OpacityMask;//[Offset: 0xb4, Size: 0xc] 0x7a9c6ebf00
	ExpressionInput Normal;//[Offset: 0xc8, Size: 0xc] 0x7a9c6ebf80
	ExpressionInput WorldPositionOffset;//[Offset: 0xdc, Size: 0xc] 0x7a9c6ec000
	ExpressionInput WorldDisplacement;//[Offset: 0xf0, Size: 0xc] 0x7a9c6ec080
	ExpressionInput TessellationMultiplier;//[Offset: 0x104, Size: 0xc] 0x7a9c6ec100
	ExpressionInput SubsurfaceColor;//[Offset: 0x118, Size: 0xc] 0x7a9c6ec180
	ExpressionInput ClearCoat;//[Offset: 0x12c, Size: 0xc] 0x7a9c6ec200
	ExpressionInput ClearCoatRoughness;//[Offset: 0x140, Size: 0xc] 0x7a9c6ec280
	ExpressionInput AmbientOcclusion;//[Offset: 0x154, Size: 0xc] 0x7a9c6ec300
	ExpressionInput Refraction;//[Offset: 0x168, Size: 0xc] 0x7a9c6ec380
	ExpressionInput CustomizedUVs;//[Offset: 0x17c, Size: 0xc] 0x7a9c6ec400
	ExpressionInput PixelDepthOffset;//[Offset: 0x21c, Size: 0xc] 0x7a9c6ec480

--------------------------------
Class: MaterialExpressionMaterialAttributeLayers.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x7a9c6d72b0
	Guid ExpressionGUID;//[Offset: 0x44, Size: 0x10] 0x7a9c629180
	MaterialAttributesInput Input;//[Offset: 0x54, Size: 0x10] 0x7a9c6eb800
	MaterialLayersFunctions DefaultLayers;//[Offset: 0x70, Size: 0x40] 0x7a9c6eb880
	MaterialExpressionMaterialFunctionCall*[] LayerCallers;//[Offset: 0xb0, Size: 0x10] 0x7a9c6eb980
	int NumActiveLayerCallers;//[Offset: 0xc0, Size: 0x4] 0x7a9c6d7320
	MaterialExpressionMaterialFunctionCall*[] BlendCallers;//[Offset: 0xc8, Size: 0x10] 0x7a9c6eba80
	int NumActiveBlendCallers;//[Offset: 0xd8, Size: 0x4] 0x7a9c6d56b0
	bool bIsLayerGraphBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1] 0x7a9c6ebb00

--------------------------------
Class: MaterialExpressionMaterialLayerOutput.MaterialExpressionFunctionOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionMaterialProxyReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0xc] 0x7a9c6eb600
	ExpressionInput MaterialProxy;//[Offset: 0x50, Size: 0xc] 0x7a9c6eb680

--------------------------------
Class: MaterialExpressionMax.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ed600
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x7a9c6ed680
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x7a9c6d71d0
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x7a9c6d7240

--------------------------------
Class: MaterialExpressionMin.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ed500
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x7a9c6ed580
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x7a9c6d70f0
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x7a9c6d7160

--------------------------------
Class: MaterialExpressionMultiply.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ed400
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x7a9c6ed480
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x7a9c6d7010
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x7a9c6d7080

--------------------------------
Class: MaterialExpressionNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ed180
	ExpressionInput FilterWidth;//[Offset: 0x50, Size: 0xc] 0x7a9c6ed200
	float Scale;//[Offset: 0x64, Size: 0x4] 0x7a9c6d6d00
	int Quality;//[Offset: 0x68, Size: 0x4] 0x7a9c6d6d70
	byte NoiseFunction;//[Offset: 0x6c, Size: 0x1] 0x7a9c6ed280
	bool bTurbulence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 0x1] 0x7a9c6ed300
	int Levels;//[Offset: 0x70, Size: 0x4] 0x7a9c6d6de0
	float OutputMin;//[Offset: 0x74, Size: 0x4] 0x7a9c6d6e50
	float OutputMax;//[Offset: 0x78, Size: 0x4] 0x7a9c6d6ec0
	float LevelScale;//[Offset: 0x7c, Size: 0x4] 0x7a9c6d6f30
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9c6ed380
	uint32 RepeatSize;//[Offset: 0x84, Size: 0x4] 0x7a9c6d6fa0

--------------------------------
Class: MaterialExpressionNormalize.MaterialExpression.Object
	ExpressionInput VectorInput;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ed100

--------------------------------
Class: MaterialExpressionObjectBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectOrientation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionOneMinus.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ed080

--------------------------------
Class: MaterialExpressionPanner.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ece80
	ExpressionInput Time;//[Offset: 0x50, Size: 0xc] 0x7a9c6ecf00
	ExpressionInput Speed;//[Offset: 0x64, Size: 0xc] 0x7a9c6ecf80
	float SpeedX;//[Offset: 0x78, Size: 0x4] 0x7a9c6d6bb0
	float SpeedY;//[Offset: 0x7c, Size: 0x4] 0x7a9c6d6c20
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4] 0x7a9c6d6c90
	bool bFractionalPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x7a9c6ed000

--------------------------------
Class: MaterialExpressionParticleColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleDirection.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMacroUV.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMotionBlurFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticlePositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRelativeTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSpeed.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSubUV.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1] 0x7a9c6ece00

--------------------------------
Class: MaterialExpressionPerInstanceFadeAmount.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPerInstanceRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelDepth.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPower.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ecd00
	ExpressionInput Exponent;//[Offset: 0x50, Size: 0xc] 0x7a9c6ecd80
	float ConstExponent;//[Offset: 0x64, Size: 0x4] 0x7a9c6d6b40

--------------------------------
Class: MaterialExpressionPrecomputedAOMask.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedNormal.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreviousFrameSwitch.MaterialExpression.Object
	ExpressionInput CurrentFrame;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ecc00
	ExpressionInput PreviousFrame;//[Offset: 0x50, Size: 0xc] 0x7a9c6ecc80

--------------------------------
Class: MaterialExpressionQualitySwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ecb00
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0xc] 0x7a9c6ecb80

--------------------------------
Class: MaterialExpressionRayTracingQualitySwitch.MaterialExpression.Object
	ExpressionInput Normal;//[Offset: 0x3c, Size: 0xc] 0x7a9c6eca00
	ExpressionInput RayTraced;//[Offset: 0x50, Size: 0xc] 0x7a9c6eca80

--------------------------------
Class: MaterialExpressionReflectionVectorWS.MaterialExpression.Object
	ExpressionInput CustomWorldNormal;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ec900
	bool bNormalizeCustomWorldNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7a9c6ec980

--------------------------------
Class: MaterialExpressionReroute.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ec880

--------------------------------
Class: MaterialExpressionRotateAboutAxis.MaterialExpression.Object
	ExpressionInput NormalizedRotationAxis;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ec680
	ExpressionInput RotationAngle;//[Offset: 0x50, Size: 0xc] 0x7a9c6ec700
	ExpressionInput PivotPoint;//[Offset: 0x64, Size: 0xc] 0x7a9c6ec780
	ExpressionInput Position;//[Offset: 0x78, Size: 0xc] 0x7a9c6ec800
	float Period;//[Offset: 0x8c, Size: 0x4] 0x7a9c6d6ad0

--------------------------------
Class: MaterialExpressionRotator.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ee680
	ExpressionInput Time;//[Offset: 0x50, Size: 0xc] 0x7a9c6ee700
	float CenterX;//[Offset: 0x64, Size: 0x4] 0x7a9c6d6910
	float CenterY;//[Offset: 0x68, Size: 0x4] 0x7a9c6d6980
	float Speed;//[Offset: 0x6c, Size: 0x4] 0x7a9c6d69f0
	uint32 ConstCoordinate;//[Offset: 0x70, Size: 0x4] 0x7a9c6d6a60

--------------------------------
Class: MaterialExpressionRound.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ee600

--------------------------------
Class: MaterialExpressionSaturate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ee580

--------------------------------
Class: MaterialExpressionSceneColor.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x7a9c6ee380
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ee400
	ExpressionInput OffsetFraction;//[Offset: 0x50, Size: 0xc] 0x7a9c6ee480
	Vector2D ConstInput;//[Offset: 0x64, Size: 0x8] 0x7a9c6ee500

--------------------------------
Class: MaterialExpressionSceneDepth.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x7a9c6ee180
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ee200
	ExpressionInput Coordinates;//[Offset: 0x50, Size: 0xc] 0x7a9c6ee280
	Vector2D ConstInput;//[Offset: 0x64, Size: 0x8] 0x7a9c6ee300

--------------------------------
Class: MaterialExpressionSceneTexelSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSceneTexture.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ee000
	byte SceneTextureId;//[Offset: 0x50, Size: 0x1] 0x7a9c6ee080
	bool bFiltered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x7a9c6ee100

--------------------------------
Class: MaterialExpressionScreenPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSetMaterialAttributes.MaterialExpression.Object
	ExpressionInput[] Inputs;//[Offset: 0x40, Size: 0x10] 0x7a9c6ede80
	Guid[] AttributeSetTypes;//[Offset: 0x50, Size: 0x10] 0x7a9c6edf80

--------------------------------
Class: MaterialExpressionShadingPathSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x7a9c6edd00
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0xc] 0x7a9c6edd80

--------------------------------
Class: MaterialExpressionShadowReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x7a9c6edc00
	ExpressionInput Shadow;//[Offset: 0x50, Size: 0xc] 0x7a9c6edc80

--------------------------------
Class: MaterialExpressionSign.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6edb80

--------------------------------
Class: MaterialExpressionSine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6edb00
	float Period;//[Offset: 0x50, Size: 0x4] 0x7a9c6d68a0

--------------------------------
Class: MaterialExpressionSobol.MaterialExpression.Object
	ExpressionInput Cell;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ed900
	ExpressionInput Index;//[Offset: 0x50, Size: 0xc] 0x7a9c6ed980
	ExpressionInput Seed;//[Offset: 0x64, Size: 0xc] 0x7a9c6eda00
	uint32 ConstIndex;//[Offset: 0x78, Size: 0x4] 0x7a9c6d6830
	Vector2D ConstSeed;//[Offset: 0x7c, Size: 0x8] 0x7a9c6eda80

--------------------------------
Class: MaterialExpressionSpeedTree.MaterialExpression.Object
	ExpressionInput GeometryInput;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ef600
	ExpressionInput WindInput;//[Offset: 0x50, Size: 0xc] 0x7a9c6ef680
	ExpressionInput LODInput;//[Offset: 0x64, Size: 0xc] 0x7a9c6ef700
	ExpressionInput ExtraBendWS;//[Offset: 0x78, Size: 0xc] 0x7a9c6ef780
	byte GeometryType;//[Offset: 0x8c, Size: 0x1] 0x7a9c6ed700
	byte WindType;//[Offset: 0x8d, Size: 0x1] 0x7a9c6ed780
	byte LODType;//[Offset: 0x8e, Size: 0x1] 0x7a9c6ed800
	float BillboardThreshold;//[Offset: 0x90, Size: 0x4] 0x7a9c6d67c0
	bool bAccurateWindVelocities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1] 0x7a9c6ed880

--------------------------------
Class: MaterialExpressionSphereMask.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ef400
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x7a9c6ef480
	ExpressionInput Radius;//[Offset: 0x64, Size: 0xc] 0x7a9c6ef500
	ExpressionInput Hardness;//[Offset: 0x78, Size: 0xc] 0x7a9c6ef580
	float AttenuationRadius;//[Offset: 0x8c, Size: 0x4] 0x7a9c6d66e0
	float HardnessPercent;//[Offset: 0x90, Size: 0x4] 0x7a9c6d6750

--------------------------------
Class: MaterialExpressionSphericalParticleOpacity.MaterialExpression.Object
	ExpressionInput Density;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ef380
	float ConstantDensity;//[Offset: 0x50, Size: 0x4] 0x7a9c6d6670

--------------------------------
Class: MaterialExpressionSquareRoot.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ef300

--------------------------------
Class: MaterialExpressionStaticBool.MaterialExpression.Object
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x7a9c6ef280

--------------------------------
Class: MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x7a9c6ef200

--------------------------------
Class: MaterialExpressionStaticComponentMaskParameter.MaterialExpressionParameter.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x54, Size: 0xc] 0x7a9c6eef80
	bool DefaultR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7a9c6ef000
	bool DefaultG;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x7a9c6ef080
	bool DefaultB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x7a9c6ef100
	bool DefaultA;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x7a9c6ef180

--------------------------------
Class: MaterialExpressionStaticSwitch.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x7a9c6eed80
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x7a9c6eee00
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x7a9c6eee80
	ExpressionInput Value;//[Offset: 0x64, Size: 0xc] 0x7a9c6eef00

--------------------------------
Class: MaterialExpressionStaticSwitchParameter.MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x58, Size: 0xc] 0x7a9c6eec80
	ExpressionInput B;//[Offset: 0x6c, Size: 0xc] 0x7a9c6eed00

--------------------------------
Class: MaterialExpressionSubtract.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x7a9c6eeb80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x7a9c6eec00
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x7a9c6d6590
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x7a9c6d6600

--------------------------------
Class: MaterialExpressionTangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6eeb00
	float Period;//[Offset: 0x50, Size: 0x4] 0x7a9c6d6520

--------------------------------
Class: MaterialExpressionTangentOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6eea80

--------------------------------
Class: MaterialExpressionTemporalSobol.MaterialExpression.Object
	ExpressionInput Index;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ee900
	ExpressionInput Seed;//[Offset: 0x50, Size: 0xc] 0x7a9c6ee980
	uint32 ConstIndex;//[Offset: 0x64, Size: 0x4] 0x7a9c6d8190
	Vector2D ConstSeed;//[Offset: 0x68, Size: 0x8] 0x7a9c6eea00

--------------------------------
Class: MaterialExpressionTextureCoordinate.MaterialExpression.Object
	int CoordinateIndex;//[Offset: 0x3c, Size: 0x4] 0x7a9c6d8040
	float UTiling;//[Offset: 0x40, Size: 0x4] 0x7a9c6d80b0
	float VTiling;//[Offset: 0x44, Size: 0x4] 0x7a9c6d8120
	bool UnMirrorU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7a9c6ee800
	bool UnMirrorV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x7a9c6ee880

--------------------------------
Class: MaterialExpressionTextureObject.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureObjectParameter.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureProperty.MaterialExpression.Object
	ExpressionInput TextureObject;//[Offset: 0x3c, Size: 0xc] 0x7a9c6eff80
	byte Property;//[Offset: 0x50, Size: 0x1] 0x7a9c6ee780

--------------------------------
Class: MaterialExpressionTextureSampleParameterCube.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterSubUV.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1] 0x7a9c6eff00

--------------------------------
Class: MaterialExpressionTextureSampleParameterVolume.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: VolumeTexture.Texture.Object

--------------------------------
Class: MaterialExpressionTime.MaterialExpression.Object
	bool bIgnorePause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x7a9c6efe00
	bool bOverride_Period;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1] 0x7a9c6efe80
	float Period;//[Offset: 0x3c, Size: 0x4] 0x7a9c6d7fd0

--------------------------------
Class: MaterialExpressionTransform.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6efc80
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1] 0x7a9c6efd00
	byte TransformType;//[Offset: 0x51, Size: 0x1] 0x7a9c6efd80

--------------------------------
Class: MaterialExpressionTransformPosition.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6efb00
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1] 0x7a9c6efb80
	byte TransformType;//[Offset: 0x51, Size: 0x1] 0x7a9c6efc00

--------------------------------
Class: MaterialExpressionTruncate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6efa80

--------------------------------
Class: MaterialExpressionTwoSidedSign.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVectorNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ef900
	byte NoiseFunction;//[Offset: 0x50, Size: 0x1] 0x7a9c6ef980
	int Quality;//[Offset: 0x54, Size: 0x4] 0x7a9c6d7ef0
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7a9c6efa00
	uint32 TileSize;//[Offset: 0x5c, Size: 0x4] 0x7a9c6d7f60

--------------------------------
Class: MaterialExpressionVertexColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexInterpolator.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x7a9c6ef880

--------------------------------
Class: MaterialExpressionVertexNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionViewProperty.MaterialExpression.Object
	byte Property;//[Offset: 0x39, Size: 0x1] 0x7a9c6ef800

--------------------------------
Class: MaterialExpressionViewSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionWorldPosition.MaterialExpression.Object
	byte WorldPositionShaderOffset;//[Offset: 0x39, Size: 0x1] 0x7a9c7b1080

--------------------------------
Class: MaterialFunctionInstance.MaterialFunctionInterface.Object
	MaterialFunctionInterface* Parent;//[Offset: 0x40, Size: 0x8] 0x7a9c7b0600
	MaterialFunctionInterface* Base;//[Offset: 0x48, Size: 0x8] 0x7a9c7b0680
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x50, Size: 0x10] 0x7a9c7b0780
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x60, Size: 0x10] 0x7a9c7b0880
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x70, Size: 0x10] 0x7a9c7b0980
	FontParameterValue[] FontParameterValues;//[Offset: 0x80, Size: 0x10] 0x7a9c7b0a80
	StaticSwitchParameter[] StaticSwitchParameterValues;//[Offset: 0x90, Size: 0x10] 0x7a9c7b0b80
	StaticComponentMaskParameter[] StaticComponentMaskParameterValues;//[Offset: 0xa0, Size: 0x10] 0x7a9c7b0c80

--------------------------------
Class: MaterialFunctionMaterialLayer.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlend.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlendInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialInstanceActor.Actor.Object
	Actor*[] TargetActors;//[Offset: 0x330, Size: 0x10] 0x7a9c7b0580

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0xffffff8523219000 0x7a9cbdace0
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0xffffff8523219000 0x7a9cbd7400
	float K2_GetScalarParameterValue(FName ParameterName);// 0xffffff8523219000 0x7a9cbd74e0

--------------------------------
Class: MatineeActorCameraAnim.MatineeActor.Actor.Object
	CameraAnim* CameraAnim;//[Offset: 0x3d8, Size: 0x8] 0x7a9c7b2d80

--------------------------------
Class: MatineeAnimInterface.Interface.Object

--------------------------------
Class: MatineeInterface.Interface.Object

--------------------------------
Class: MeshMergeCullingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: MeshSimplificationSettings.DeveloperSettings.Object
	FName MeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x7a9c6d7710

--------------------------------
Class: MeshVertexPainterKismetLibrary.BlueprintFunctionLibrary.Object
	void RemovePaintedVertices(StaticMeshComponent* StaticMeshComponent);// 0xffffff8523219000 0x7a9c6c8ba0
	void PaintVerticesSingleColor(StaticMeshComponent* StaticMeshComponent, out const LinearColor FillColor, bool bConvertToSRGB);// 0xffffff8523219000 0x7a9c6c8c80
	void PaintVerticesLerpAlongAxis(StaticMeshComponent* StaticMeshComponent, out const LinearColor StartColor, out const LinearColor EndColor, enum Axis, bool bConvertToSRGB);// 0xffffff8523219000 0x7a9c6c8d60

--------------------------------
Class: MicroTransactionBase.PlatformInterfaceBase.Object
	PurchaseInfo[] AvailableProducts;//[Offset: 0x38, Size: 0x10] 0x7a9c7b2800
	FString LastError;//[Offset: 0x48, Size: 0x10] 0x7a9c6d7630
	FString LastErrorSolution;//[Offset: 0x58, Size: 0x10] 0x7a9c6d76a0

--------------------------------
Class: PurchaseInfo
	FString Identifier;//[Offset: 0x0, Size: 0x10] 0x7a9ca0c560
	FString DisplayName;//[Offset: 0x10, Size: 0x10] 0x7a9ca0c5d0
	FString DisplayDescription;//[Offset: 0x20, Size: 0x10] 0x7a9ca0c640
	FString DisplayPrice;//[Offset: 0x30, Size: 0x10] 0x7a9ca0c6b0

--------------------------------
Class: NavAgentInterface.Interface.Object

--------------------------------
Class: NavEdgeProviderInterface.Interface.Object

--------------------------------
Class: NavigationDataInterface.Interface.Object

--------------------------------
Class: NavigationSystem.Object
	void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0xffffff8523219000 0x7a9c6c89e0
	void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0xffffff8523219000 0x7a9c6c8ac0

--------------------------------
Class: NullNavSysConfig.NavigationSystemConfig.Object

--------------------------------
Class: NavLinkDefinition.Object
	NavigationLink[] Links;//[Offset: 0x28, Size: 0x10] 0x7a9c7b4080
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x38, Size: 0x10] 0x7a9c7b4180

--------------------------------
Class: NavigationLink.NavigationLinkBase
	Vector Left;//[Offset: 0x38, Size: 0xc] 0x7a9ca54300
	Vector Right;//[Offset: 0x44, Size: 0xc] 0x7a9ca54380

--------------------------------
Class: NavigationLinkBase
	float LeftProjectHeight;//[Offset: 0x0, Size: 0x4] 0x7a9ca0c090
	float MaxFallDownLength;//[Offset: 0x4, Size: 0x4] 0x7a9ca0c100
	byte Direction;//[Offset: 0x8, Size: 0x1] 0x7a9ca54600
	float SnapRadius;//[Offset: 0x10, Size: 0x4] 0x7a9ca0c170
	float SnapHeight;//[Offset: 0x14, Size: 0x4] 0x7a9ca0c1e0
	NavAgentSelector SupportedAgents;//[Offset: 0x18, Size: 0x4] 0x7a9ca54680
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1] 0x7a9ca54700
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1] 0x7a9ca54780
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1] 0x7a9ca54800
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1] 0x7a9ca54880
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1] 0x7a9ca54900
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 0x1] 0x7a9ca54980
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 0x1] 0x7a9ca54a00
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 0x1] 0x7a9ca54a80
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1] 0x7a9ca54b00
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1] 0x7a9ca54c00
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1] 0x7a9ca54c80
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1] 0x7a9ca54d00
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1] 0x7a9ca54d80
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1] 0x7a9ca54e00
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1] 0x7a9ca54e80
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 0x1] 0x7a9ca54f00
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1] 0x7a9ca54f80
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1] 0x7a9ca55000
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1] 0x7a9ca55080
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 0x1] 0x7a9ca55100
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 0x1] 0x7a9ca55180
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 0x1] 0x7a9ca55200
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20, Size: 0x1] 0x7a9ca55280
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20, Size: 0x1] 0x7a9ca53200
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1] 0x7a9ca53280
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 0x1] 0x7a9ca53300
	class NavAreaBase* AreaClass;//[Offset: 0x28, Size: 0x8] 0x7a9ca53380

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7a9ca53400
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7a9ca53480
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7a9ca53500
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7a9ca53580
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7a9ca53600
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7a9ca53680
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7a9ca53700
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7a9ca53780
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7a9ca53800
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7a9ca53880
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7a9ca53900
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7a9ca53980
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7a9ca53a00
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x7a9ca53a80
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x7a9ca53b00
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x7a9ca53b80

--------------------------------
Class: NavigationSegmentLink.NavigationLinkBase
	Vector LeftStart;//[Offset: 0x38, Size: 0xc] 0x7a9ca54400
	Vector LeftEnd;//[Offset: 0x44, Size: 0xc] 0x7a9ca54480
	Vector RightStart;//[Offset: 0x50, Size: 0xc] 0x7a9ca54500
	Vector RightEnd;//[Offset: 0x5c, Size: 0xc] 0x7a9ca54580

--------------------------------
Class: NavPathObserverInterface.Interface.Object

--------------------------------
Class: NavRelevantInterface.Interface.Object

--------------------------------
Class: SimulatedClientNetConnection.NetConnection.Player.Object

--------------------------------
Class: NetworkPredictionInterface.Interface.Object

--------------------------------
Class: NetworkSettings.DeveloperSettings.Object
	bool bVerifyPeer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7a9c7b3f00
	bool bEnableMultiplayerWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7a9c7b3f80
	int MaxRepArraySize;//[Offset: 0x3c, Size: 0x4] 0x7a9c6d74e0
	int MaxRepArrayMemory;//[Offset: 0x40, Size: 0x4] 0x7a9c6d7550

--------------------------------
Class: NodeMappingProviderInterface.Interface.Object

--------------------------------
Class: Note.Actor.Object

--------------------------------
Class: ObjectLibrary.Object
	class Object* ObjectBaseClass;//[Offset: 0x28, Size: 0x8] 0x7a9c7b3900
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7a9c7b3980
	Object*[] Objects;//[Offset: 0x38, Size: 0x10] 0x7a9c7b3a80
	Object*[] WeakObjects;//[Offset: 0x48, Size: 0x10] 0x7a9c7b3b80
	bool bUseWeakReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7a9c7b3c00
	bool bIsFullyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x7a9c7b3c80

--------------------------------
Class: ObjectReferencer.Object
	Object*[] ReferencedObjects;//[Offset: 0x28, Size: 0x10] 0x7a9c7b3880

--------------------------------
Class: OnlineBlueprintCallProxyBase.Object
	void Activate();// 0xffffff8523219000 0x7a9cb48d60

--------------------------------
Class: OnlineEngineInterface.Object

--------------------------------
Class: PackageMapClient.PackageMap.Object

--------------------------------
Class: PainCausingVolume.PhysicsVolume.Volume.Brush.Actor.Object
	bool bPainCausing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x375, Size: 0x1] 0x7a9c7b3580
	float DamagePerSec;//[Offset: 0x378, Size: 0x4] 0x7a9c6d8f20
	class DamageType* DamageType;//[Offset: 0x380, Size: 0x8] 0x7a9c7b3600
	float PainInterval;//[Offset: 0x388, Size: 0x4] 0x7a9c6d8f90
	bool bEntryPain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 0x1] 0x7a9c7b3680
	bool BACKUP_bPainCausing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 0x1] 0x7a9c7b3700
	Controller* DamageInstigator;//[Offset: 0x390, Size: 0x8] 0x7a9c7b3780

--------------------------------
Class: ParticleModuleAccelerationBase.ParticleModule.Object
	bool bAlwaysInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7a9c7b6200

--------------------------------
Class: ParticleModuleAcceleration.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector Acceleration;//[Offset: 0x30, Size: 0x50] 0x7a9c7b6100
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9c7b6180

--------------------------------
Class: ParticleModuleAccelerationConstant.ParticleModuleAccelerationBase.ParticleModule.Object
	Vector Acceleration;//[Offset: 0x2c, Size: 0xc] 0x7a9c7b6080

--------------------------------
Class: ParticleModuleAccelerationDrag.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragCoefficient;//[Offset: 0x30, Size: 0x8] 0x7a9c7b5f80
	RawDistributionFloat DragCoefficientRaw;//[Offset: 0x38, Size: 0x38] 0x7a9c7b6000

--------------------------------
Class: ParticleModuleAccelerationDragScaleOverLife.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragScale;//[Offset: 0x30, Size: 0x8] 0x7a9c7b5e80
	RawDistributionFloat DragScaleRaw;//[Offset: 0x38, Size: 0x38] 0x7a9c7b5f00

--------------------------------
Class: ParticleModuleAccelerationOverLifetime.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector AccelOverLife;//[Offset: 0x30, Size: 0x50] 0x7a9c7b5e00

--------------------------------
Class: ParticleModuleAttractorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleAttractorLine.ParticleModuleAttractorBase.ParticleModule.Object
	Vector EndPoint0;//[Offset: 0x2c, Size: 0xc] 0x7a9c7b5c00
	Vector EndPoint1;//[Offset: 0x38, Size: 0xc] 0x7a9c7b5c80
	RawDistributionFloat Range;//[Offset: 0x48, Size: 0x38] 0x7a9c7b5d00
	RawDistributionFloat Strength;//[Offset: 0x80, Size: 0x38] 0x7a9c7b5d80

--------------------------------
Class: ParticleModuleAttractorParticle.ParticleModuleAttractorBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x7a9c6d8ac0
	RawDistributionFloat Range;//[Offset: 0x38, Size: 0x38] 0x7a9c7b5880
	bool bStrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7a9c7b5900
	RawDistributionFloat Strength;//[Offset: 0x78, Size: 0x38] 0x7a9c7b5980
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7a9c7b5a00
	byte SelectionMethod;//[Offset: 0xb1, Size: 0x1] 0x7a9c7b5a80
	bool bRenewSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb2, Size: 0x1] 0x7a9c7b5b00
	bool bInheritSourceVel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb2, Size: 0x1] 0x7a9c7b5b80
	int LastSelIndex;//[Offset: 0xb4, Size: 0x4] 0x7a9c6d8b30

--------------------------------
Class: ParticleModuleAttractorPoint.ParticleModuleAttractorBase.ParticleModule.Object
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x50] 0x7a9c7b7300
	RawDistributionFloat Range;//[Offset: 0x80, Size: 0x38] 0x7a9c7b7380
	RawDistributionFloat Strength;//[Offset: 0xb8, Size: 0x38] 0x7a9c7b5300
	bool StrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x7a9c7b5380
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x7a9c7b5400
	bool bOverrideVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1] 0x7a9c7b5480
	bool bUseWorldSpacePosition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1] 0x7a9c7b5500
	bool Positive_X;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf0, Size: 0x1] 0x7a9c7b5580
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf0, Size: 0x1] 0x7a9c7b5600
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf0, Size: 0x1] 0x7a9c7b5680
	bool Negative_X;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf0, Size: 0x1] 0x7a9c7b5700
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf1, Size: 0x1] 0x7a9c7b5780
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf1, Size: 0x1] 0x7a9c7b5800

--------------------------------
Class: ParticleModuleAttractorPointGravity.ParticleModuleAttractorBase.ParticleModule.Object
	Vector Position;//[Offset: 0x2c, Size: 0xc] 0x7a9c7b7180
	float Radius;//[Offset: 0x38, Size: 0x4] 0x7a9c6d8a50
	DistributionFloat* Strength;//[Offset: 0x40, Size: 0x8] 0x7a9c7b7200
	RawDistributionFloat StrengthRaw;//[Offset: 0x48, Size: 0x38] 0x7a9c7b7280

--------------------------------
Class: ParticleModuleBeamBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleBeamModifier.ParticleModuleBeamBase.ParticleModule.Object
	byte ModifierType;//[Offset: 0x2b, Size: 0x1] 0x7a9c7b6d80
	BeamModifierOptions PositionOptions;//[Offset: 0x2c, Size: 0x4] 0x7a9c7b6e00
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x50] 0x7a9c7b6e80
	BeamModifierOptions TangentOptions;//[Offset: 0x80, Size: 0x4] 0x7a9c7b6f00
	RawDistributionVector Tangent;//[Offset: 0x88, Size: 0x50] 0x7a9c7b6f80
	bool bAbsoluteTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x7a9c7b7000
	BeamModifierOptions StrengthOptions;//[Offset: 0xdc, Size: 0x4] 0x7a9c7b7080
	RawDistributionFloat Strength;//[Offset: 0xe0, Size: 0x38] 0x7a9c7b7100

--------------------------------
Class: BeamModifierOptions
	bool bModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7a9ca55c00
	bool bScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7a9ca55c80
	bool bLock;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7a9ca55d00

--------------------------------
Class: ParticleModuleBeamNoise.ParticleModuleBeamBase.ParticleModule.Object
	bool bLowFreq_Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7a9c7b6680
	int Frequency;//[Offset: 0x2c, Size: 0x4] 0x7a9c6d8740
	int Frequency_LowRange;//[Offset: 0x30, Size: 0x4] 0x7a9c6d87b0
	RawDistributionVector NoiseRange;//[Offset: 0x38, Size: 0x50] 0x7a9c7b6780
	RawDistributionFloat NoiseRangeScale;//[Offset: 0x88, Size: 0x38] 0x7a9c7b6800
	bool bNRScaleEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7a9c7b6880
	RawDistributionVector NoiseSpeed;//[Offset: 0xc8, Size: 0x50] 0x7a9c7b6900
	bool bSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1] 0x7a9c7b6980
	float NoiseLockRadius;//[Offset: 0x11c, Size: 0x4] 0x7a9c6d8820
	bool bNoiseLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1] 0x7a9c7b6a00
	bool bOscillate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x120, Size: 0x1] 0x7a9c7b6a80
	float NoiseLockTime;//[Offset: 0x124, Size: 0x4] 0x7a9c6d8890
	float NoiseTension;//[Offset: 0x128, Size: 0x4] 0x7a9c6d8900
	bool bUseNoiseTangents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c, Size: 0x1] 0x7a9c7b6b00
	RawDistributionFloat NoiseTangentStrength;//[Offset: 0x130, Size: 0x38] 0x7a9c7b6b80
	int NoiseTessellation;//[Offset: 0x168, Size: 0x4] 0x7a9c6d8970
	bool bTargetNoise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16c, Size: 0x1] 0x7a9c7b6c00
	float FrequencyDistance;//[Offset: 0x170, Size: 0x4] 0x7a9c6d89e0
	bool bApplyNoiseScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x174, Size: 0x1] 0x7a9c7b6c80
	RawDistributionFloat NoiseScale;//[Offset: 0x178, Size: 0x38] 0x7a9c7b6d00

--------------------------------
Class: ParticleModuleBeamSource.ParticleModuleBeamBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1] 0x7a9c7b8300
	FName SourceName;//[Offset: 0x2c, Size: 0x8] 0x7a9c6d86d0
	bool bSourceAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7a9c7b8380
	RawDistributionVector Source;//[Offset: 0x38, Size: 0x50] 0x7a9c7b8400
	bool bLockSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x7a9c7b6380
	byte SourceTangentMethod;//[Offset: 0x89, Size: 0x1] 0x7a9c7b6400
	RawDistributionVector SourceTangent;//[Offset: 0x90, Size: 0x50] 0x7a9c7b6480
	bool bLockSourceTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1] 0x7a9c7b6500
	RawDistributionFloat SourceStrength;//[Offset: 0xe8, Size: 0x38] 0x7a9c7b6580
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1] 0x7a9c7b6600

--------------------------------
Class: ParticleModuleBeamTarget.ParticleModuleBeamBase.ParticleModule.Object
	byte TargetMethod;//[Offset: 0x2b, Size: 0x1] 0x7a9c7b7e80
	FName TargetName;//[Offset: 0x2c, Size: 0x8] 0x7a9c6d85f0
	RawDistributionVector Target;//[Offset: 0x38, Size: 0x50] 0x7a9c7b7f00
	bool bTargetAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x7a9c7b7f80
	bool bLockTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1] 0x7a9c7b8000
	byte TargetTangentMethod;//[Offset: 0x89, Size: 0x1] 0x7a9c7b8080
	RawDistributionVector TargetTangent;//[Offset: 0x90, Size: 0x50] 0x7a9c7b8100
	bool bLockTargetTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1] 0x7a9c7b8180
	RawDistributionFloat TargetStrength;//[Offset: 0xe8, Size: 0x38] 0x7a9c7b8200
	bool bLockTargetStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1] 0x7a9c7b8280
	float LockRadius;//[Offset: 0x124, Size: 0x4] 0x7a9c6d8660

--------------------------------
Class: ParticleModuleCameraBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCameraOffset.ParticleModuleCameraBase.ParticleModule.Object
	RawDistributionFloat CameraOffset;//[Offset: 0x30, Size: 0x38] 0x7a9c7b7d00
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7a9c7b7d80
	byte UpdateMethod;//[Offset: 0x69, Size: 0x1] 0x7a9c7b7e00

--------------------------------
Class: ParticleModuleCollisionBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCollision.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionVector DampingFactor;//[Offset: 0x30, Size: 0x50] 0x7a9c7b7580
	RawDistributionVector DampingFactorRotation;//[Offset: 0x80, Size: 0x50] 0x7a9c7b7600
	RawDistributionFloat MaxCollisions;//[Offset: 0xd0, Size: 0x38] 0x7a9c7b7680
	byte CollisionCompletionOption;//[Offset: 0x108, Size: 0x1] 0x7a9c7b7700
	byte[] CollisionTypes;//[Offset: 0x110, Size: 0x10] 0x7a9c7b7800
	bool bApplyPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 0x1] 0x7a9c7b7880
	bool bIgnoreTriggerVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x128, Size: 0x1] 0x7a9c7b7900
	RawDistributionFloat ParticleMass;//[Offset: 0x130, Size: 0x38] 0x7a9c7b7980
	float DirScalar;//[Offset: 0x168, Size: 0x4] 0x7a9c6d84a0
	bool bPawnsDoNotDecrementCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16c, Size: 0x1] 0x7a9c7b7a00
	bool bOnlyVerticalNormalsDecrementCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16c, Size: 0x1] 0x7a9c7b7a80
	float VerticalFudgeFactor;//[Offset: 0x170, Size: 0x4] 0x7a9c6d8510
	RawDistributionFloat DelayAmount;//[Offset: 0x178, Size: 0x38] 0x7a9c7b7b00
	bool bDropDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b0, Size: 0x1] 0x7a9c7b7b80
	bool bCollideOnlyIfVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b0, Size: 0x1] 0x7a9c7b7c00
	bool bIgnoreSourceActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b0, Size: 0x1] 0x7a9c7b7c80
	float MaxCollisionDistance;//[Offset: 0x1b4, Size: 0x4] 0x7a9c6d8580

--------------------------------
Class: ParticleModuleCollisionGPU.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionFloat Resilience;//[Offset: 0x30, Size: 0x38] 0x7a9c7b9480
	RawDistributionFloat ResilienceScaleOverLife;//[Offset: 0x68, Size: 0x38] 0x7a9c7b7400
	float Friction;//[Offset: 0xa0, Size: 0x4] 0x7a9c6d8270
	float RandomSpread;//[Offset: 0xa4, Size: 0x4] 0x7a9c6d82e0
	float RandomDistribution;//[Offset: 0xa8, Size: 0x4] 0x7a9c6d8350
	float RadiusScale;//[Offset: 0xac, Size: 0x4] 0x7a9c6d83c0
	float RadiusBias;//[Offset: 0xb0, Size: 0x4] 0x7a9c6d8430
	byte Response;//[Offset: 0xb4, Size: 0x1] 0x7a9c7b7480
	byte CollisionMode;//[Offset: 0xb5, Size: 0x1] 0x7a9c7b7500

--------------------------------
Class: ParticleModuleColorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector StartColor;//[Offset: 0x30, Size: 0x50] 0x7a9c7b9300
	RawDistributionFloat StartAlpha;//[Offset: 0x80, Size: 0x38] 0x7a9c7b9380
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x7a9c7b9400

--------------------------------
Class: ParticleModuleColorOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorOverLife;//[Offset: 0x30, Size: 0x50] 0x7a9c7b9180
	RawDistributionFloat AlphaOverLife;//[Offset: 0x80, Size: 0x38] 0x7a9c7b9200
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x7a9c7b9280

--------------------------------
Class: ParticleModuleColorScaleOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x30, Size: 0x50] 0x7a9c7b9000
	RawDistributionFloat AlphaScaleOverLife;//[Offset: 0x80, Size: 0x38] 0x7a9c7b9080
	bool bEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x7a9c7b9100

--------------------------------
Class: ParticleModuleColor_Seeded.ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xc0, Size: 0x20] 0x7a9c7b8f80

--------------------------------
Class: ParticleRandomSeedInfo
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0d520
	bool bGetSeedFromInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7a9ca55e00
	bool bInstanceSeedIsIndex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7a9ca55e80
	bool bResetSeedOnEmitterLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x7a9ca55f00
	bool bRandomlySelectSeedArray;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x7a9ca55f80
	int[] RandomSeeds;//[Offset: 0x10, Size: 0x10] 0x7a9ca56000

--------------------------------
Class: ParticleModuleEventReceiverKillParticles.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	bool bStopSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7a9c7b8d80

--------------------------------
Class: ParticleModuleEventReceiverSpawn.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	RawDistributionFloat SpawnCount;//[Offset: 0x38, Size: 0x38] 0x7a9c7b8980
	bool bUseParticleTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7a9c7b8a00
	bool bUsePSysLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x7a9c7b8a80
	bool bInheritVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1] 0x7a9c7b8b00
	RawDistributionVector InheritVelocityScale;//[Offset: 0x78, Size: 0x50] 0x7a9c7b8b80
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0xc8, Size: 0x10] 0x7a9c7b8c80
	bool bBanPhysicalMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x7a9c7b8d00

--------------------------------
Class: ParticleModuleKillBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleKillBox.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionVector LowerLeftCorner;//[Offset: 0x30, Size: 0x50] 0x7a9c7b8700
	RawDistributionVector UpperRightCorner;//[Offset: 0x80, Size: 0x50] 0x7a9c7b8780
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1] 0x7a9c7b8800
	bool bKillInside;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 0x1] 0x7a9c7b8880
	bool bAxisAlignedAndFixedSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd0, Size: 0x1] 0x7a9c7b8900

--------------------------------
Class: ParticleModuleKillHeight.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionFloat Height;//[Offset: 0x30, Size: 0x38] 0x7a9c7b8500
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7a9c7b8580
	bool bFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x7a9c7b8600
	bool bApplyPSysScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x7a9c7b8680

--------------------------------
Class: ParticleModuleLifetimeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	RawDistributionFloat LifeTime;//[Offset: 0x30, Size: 0x38] 0x7a9c7ba500

--------------------------------
Class: ParticleModuleLifetime_Seeded.ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x68, Size: 0x20] 0x7a9c7ba480

--------------------------------
Class: ParticleModuleLightBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1] 0x7a9c7b9f80
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x7a9c7ba000
	bool bPreviewLightRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x7a9c7ba080
	float SpawnFraction;//[Offset: 0x30, Size: 0x4] 0x7a9c6d9e00
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x38, Size: 0x50] 0x7a9c7ba100
	RawDistributionFloat BrightnessOverLife;//[Offset: 0x88, Size: 0x38] 0x7a9c7ba180
	RawDistributionFloat RadiusScale;//[Offset: 0xc0, Size: 0x38] 0x7a9c7ba200
	RawDistributionFloat LightExponent;//[Offset: 0xf8, Size: 0x38] 0x7a9c7ba280
	LightingChannels LightingChannels;//[Offset: 0x130, Size: 0x1] 0x7a9c7ba300
	float VolumetricScatteringIntensity;//[Offset: 0x134, Size: 0x4] 0x7a9c6d9e70
	bool bHighQualityLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1] 0x7a9c7ba380
	bool bShadowCastingLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1] 0x7a9c7ba400

--------------------------------
Class: ParticleModuleLight_Seeded.ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x140, Size: 0x20] 0x7a9c7b9f00

--------------------------------
Class: ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartLocation;//[Offset: 0x30, Size: 0x50] 0x7a9c7b9e80
	float DistributeOverNPoints;//[Offset: 0x80, Size: 0x4] 0x7a9c6d9d20
	float DistributeThreshold;//[Offset: 0x84, Size: 0x4] 0x7a9c6d9d90

--------------------------------
Class: ParticleModuleLocationBoneSocket.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x2b, Size: 0x1] 0x7a9c7b9a80
	Vector UniversalOffset;//[Offset: 0x2c, Size: 0xc] 0x7a9c7b9b00
	LocationBoneSocketInfo[] SourceLocations;//[Offset: 0x38, Size: 0x10] 0x7a9c7b9c00
	byte SelectionMethod;//[Offset: 0x48, Size: 0x1] 0x7a9c7b9c80
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49, Size: 0x1] 0x7a9c7b9d00
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49, Size: 0x1] 0x7a9c7b9d80
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x49, Size: 0x1] 0x7a9c7b9e00
	float InheritVelocityScale;//[Offset: 0x4c, Size: 0x4] 0x7a9c6d9bd0
	FName SkelMeshActorParamName;//[Offset: 0x50, Size: 0x8] 0x7a9c6d9c40
	int NumPreSelectedIndices;//[Offset: 0x58, Size: 0x4] 0x7a9c6d9cb0

--------------------------------
Class: LocationBoneSocketInfo
	FName BoneSocketName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0d2f0
	Vector Offset;//[Offset: 0x8, Size: 0xc] 0x7a9ca55800

--------------------------------
Class: ParticleModuleLocationDirect.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector Location;//[Offset: 0x30, Size: 0x50] 0x7a9c7b9880
	RawDistributionVector LocationOffset;//[Offset: 0x80, Size: 0x50] 0x7a9c7b9900
	RawDistributionVector ScaleFactor;//[Offset: 0xd0, Size: 0x50] 0x7a9c7b9980
	RawDistributionVector Direction;//[Offset: 0x120, Size: 0x50] 0x7a9c7b9a00

--------------------------------
Class: ParticleModuleLocationEmitter.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x7a9c6d9a80
	byte SelectionMethod;//[Offset: 0x34, Size: 0x1] 0x7a9c7b9700
	bool InheritSourceVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 0x1] 0x7a9c7b9780
	float InheritSourceVelocityScale;//[Offset: 0x38, Size: 0x4] 0x7a9c6d9af0
	bool bInheritSourceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7a9c7b9800
	float InheritSourceRotationScale;//[Offset: 0x40, Size: 0x4] 0x7a9c6d9b60

--------------------------------
Class: ParticleModuleLocationEmitterDirect.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x7a9c6d9a10

--------------------------------
Class: ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool Positive_X;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7a9c7bb300
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x7a9c7bb380
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x7a9c7bb400
	bool Negative_X;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b, Size: 0x1] 0x7a9c7bb480
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b, Size: 0x1] 0x7a9c7bb500
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b, Size: 0x1] 0x7a9c7bb580
	bool SurfaceOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b, Size: 0x1] 0x7a9c7b9500
	bool Velocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b, Size: 0x1] 0x7a9c7b9580
	RawDistributionFloat VelocityScale;//[Offset: 0x30, Size: 0x38] 0x7a9c7b9600
	RawDistributionVector StartLocation;//[Offset: 0x68, Size: 0x50] 0x7a9c7b9680

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool RadialVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x7a9c7bb100
	RawDistributionFloat StartRadius;//[Offset: 0xc0, Size: 0x38] 0x7a9c7bb180
	RawDistributionFloat StartHeight;//[Offset: 0xf8, Size: 0x38] 0x7a9c7bb200
	byte HeightAxis;//[Offset: 0x130, Size: 0x1] 0x7a9c7bb280

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder_Seeded.ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x138, Size: 0x20] 0x7a9c7bb080

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionFloat StartRadius;//[Offset: 0xb8, Size: 0x38] 0x7a9c7bb000

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere_Seeded.ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xf0, Size: 0x20] 0x7a9c7baf80

--------------------------------
Class: ParticleModuleLocationPrimitiveTriangle.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartOffset;//[Offset: 0x30, Size: 0x50] 0x7a9c7bad80
	RawDistributionFloat Height;//[Offset: 0x80, Size: 0x38] 0x7a9c7bae00
	RawDistributionFloat Angle;//[Offset: 0xb8, Size: 0x38] 0x7a9c7bae80
	RawDistributionFloat Thickness;//[Offset: 0xf0, Size: 0x38] 0x7a9c7baf00

--------------------------------
Class: ParticleModuleLocationSkelVertSurface.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x2b, Size: 0x1] 0x7a9c7ba800
	Vector UniversalOffset;//[Offset: 0x2c, Size: 0xc] 0x7a9c7ba880
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7a9c7ba900
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7a9c7ba980
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x7a9c7baa00
	float InheritVelocityScale;//[Offset: 0x3c, Size: 0x4] 0x7a9c6d9700
	FName SkelMeshActorParamName;//[Offset: 0x40, Size: 0x8] 0x7a9c6d9770
	FName[] ValidAssociatedBones;//[Offset: 0x48, Size: 0x10] 0x7a9c7baa80
	bool bEnforceNormalCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7a9c7bab00
	Vector NormalToCompare;//[Offset: 0x5c, Size: 0xc] 0x7a9c7bab80
	float NormalCheckToleranceDegrees;//[Offset: 0x68, Size: 0x4] 0x7a9c6d9850
	float NormalCheckTolerance;//[Offset: 0x6c, Size: 0x4] 0x7a9c6d98c0
	int[] ValidMaterialIndices;//[Offset: 0x70, Size: 0x10] 0x7a9c7bac00
	bool bInheritVertexColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9c7bac80
	bool bInheritUV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7a9c7bad00
	uint32 InheritUVChannel;//[Offset: 0x84, Size: 0x4] 0x7a9c6d99a0

--------------------------------
Class: ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocationWorldOffset_Seeded.ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x88, Size: 0x20] 0x7a9c7ba780

--------------------------------
Class: ParticleModuleLocation_Seeded.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x88, Size: 0x20] 0x7a9c7ba700

--------------------------------
Class: ParticleModuleMaterialBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshMaterial.ParticleModuleMaterialBase.ParticleModule.Object
	MaterialInterface*[] MeshMaterials;//[Offset: 0x30, Size: 0x10] 0x7a9c7ba680

--------------------------------
Class: ParticleModuleRotationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionVector StartRotation;//[Offset: 0x30, Size: 0x50] 0x7a9c7bc600
	bool bInheritParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9c7ba580

--------------------------------
Class: ParticleModuleRotationRateBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector StartRotationRate;//[Offset: 0x30, Size: 0x50] 0x7a9c7bc580

--------------------------------
Class: ParticleModuleMeshRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x50] 0x7a9c7bc500

--------------------------------
Class: ParticleModuleMeshRotationRateOverLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector RotRate;//[Offset: 0x30, Size: 0x50] 0x7a9c7bc400
	bool bScaleRotRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9c7bc480

--------------------------------
Class: ParticleModuleMeshRotationRate_Seeded.ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20] 0x7a9c7bc380

--------------------------------
Class: ParticleModuleMeshRotation_Seeded.ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x88, Size: 0x20] 0x7a9c7bc300

--------------------------------
Class: ParticleModuleOrientationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleOrientationAxisLock.ParticleModuleOrientationBase.ParticleModule.Object
	byte LockAxisFlags;//[Offset: 0x2b, Size: 0x1] 0x7a9c7bbe80

--------------------------------
Class: ParticleModuleParameterBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	EmitterDynamicParameter[] DynamicParams;//[Offset: 0x30, Size: 0x10] 0x7a9c7bbd80
	int UpdateFlags;//[Offset: 0x40, Size: 0x4] 0x7a9c6d9690
	bool bUsesVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x7a9c7bbe00

--------------------------------
Class: EmitterDynamicParameter
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7a9ca0d280
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7a9ca55400
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7a9ca55480
	byte ValueMethod;//[Offset: 0x9, Size: 0x1] 0x7a9ca55500
	bool bScaleVelocityByParamValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x7a9ca55580
	RawDistributionFloat ParamValue;//[Offset: 0x10, Size: 0x38] 0x7a9ca55600

--------------------------------
Class: ParticleModuleParameterDynamic_Seeded.ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x48, Size: 0x20] 0x7a9c7bbc80

--------------------------------
Class: ParticleModulePivotOffset.ParticleModuleLocationBase.ParticleModule.Object
	Vector2D PivotOffset;//[Offset: 0x2c, Size: 0x8] 0x7a9c7bbc00

--------------------------------
Class: ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat StartRotation;//[Offset: 0x30, Size: 0x38] 0x7a9c7bcb80

--------------------------------
Class: ParticleModuleRotationOverLifetime.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat RotationOverLife;//[Offset: 0x30, Size: 0x38] 0x7a9c7bca80
	bool Scale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7a9c7bcb00

--------------------------------
Class: ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat StartRotationRate;//[Offset: 0x30, Size: 0x38] 0x7a9c7bca00

--------------------------------
Class: ParticleModuleRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat LifeMultiplier;//[Offset: 0x30, Size: 0x38] 0x7a9c7bc980

--------------------------------
Class: ParticleModuleRotationRate_Seeded.ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x68, Size: 0x20] 0x7a9c7bc900

--------------------------------
Class: ParticleModuleRotation_Seeded.ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x68, Size: 0x20] 0x7a9c7bc880

--------------------------------
Class: ParticleModuleSizeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector StartSize;//[Offset: 0x30, Size: 0x50] 0x7a9c7bc800

--------------------------------
Class: ParticleModuleSizeMultiplyLife.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x50] 0x7a9c7be700
	bool MultiplyX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9c7bc680
	bool MultiplyY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7a9c7bc700
	bool MultiplyZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x7a9c7bc780

--------------------------------
Class: ParticleModuleSizeScale.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector SizeScale;//[Offset: 0x30, Size: 0x50] 0x7a9c7be500
	bool EnableX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9c7be580
	bool EnableY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7a9c7be600
	bool EnableZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x7a9c7be680

--------------------------------
Class: ParticleModuleSizeScaleBySpeed.ParticleModuleSizeBase.ParticleModule.Object
	Vector2D SpeedScale;//[Offset: 0x2c, Size: 0x8] 0x7a9c7be400
	Vector2D MaxScale;//[Offset: 0x34, Size: 0x8] 0x7a9c7be480

--------------------------------
Class: ParticleModuleSize_Seeded.ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20] 0x7a9c7be380

--------------------------------
Class: ParticleModuleSourceMovement.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector SourceMovementScale;//[Offset: 0x30, Size: 0x50] 0x7a9c7be300

--------------------------------
Class: ParticleModuleSpawnPerUnit.ParticleModuleSpawnBase.ParticleModule.Object
	float UnitScalar;//[Offset: 0x2c, Size: 0x4] 0x7a9c6dab90
	RawDistributionFloat SpawnPerUnit;//[Offset: 0x30, Size: 0x38] 0x7a9c7bdc00
	bool bIgnoreSpawnRateWhenMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7a9c7bdc80
	float MovementTolerance;//[Offset: 0x6c, Size: 0x4] 0x7a9c6dac00
	float MaxFrameDistance;//[Offset: 0x70, Size: 0x4] 0x7a9c6dac70
	bool bIgnoreMovementAlongX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 0x1] 0x7a9c7bdd00
	bool bIgnoreMovementAlongY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74, Size: 0x1] 0x7a9c7bdd80
	bool bIgnoreMovementAlongZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x74, Size: 0x1] 0x7a9c7bde00

--------------------------------
Class: ParticleModuleSubUVBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	SubUVAnimation* Animation;//[Offset: 0x30, Size: 0x8] 0x7a9c7bda80
	RawDistributionFloat SubImageIndex;//[Offset: 0x38, Size: 0x38] 0x7a9c7bdb00
	bool bUseRealTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7a9c7bdb80

--------------------------------
Class: SubUVAnimation.Object
	Texture2D* SubUVTexture;//[Offset: 0x28, Size: 0x8] 0x7a9c81c880
	int SubImages_Horizontal;//[Offset: 0x30, Size: 0x4] 0x7a9c7f8b30
	int SubImages_Vertical;//[Offset: 0x34, Size: 0x4] 0x7a9c7f8ba0
	byte BoundingMode;//[Offset: 0x38, Size: 0x1] 0x7a9c81c900
	byte OpacitySourceMode;//[Offset: 0x39, Size: 0x1] 0x7a9c81c980
	float AlphaThreshold;//[Offset: 0x3c, Size: 0x4] 0x7a9c7f8c10

--------------------------------
Class: ParticleModuleSubUVMovie.ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 0x1] 0x7a9c7bd980
	RawDistributionFloat FrameRate;//[Offset: 0x78, Size: 0x38] 0x7a9c7bda00
	int StartingFrame;//[Offset: 0xb0, Size: 0x4] 0x7a9c6dab20

--------------------------------
Class: ParticleModuleTrailBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleTrailSource.ParticleModuleTrailBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1] 0x7a9c7bf700
	FName SourceName;//[Offset: 0x2c, Size: 0x8] 0x7a9c6daa40
	RawDistributionFloat SourceStrength;//[Offset: 0x38, Size: 0x38] 0x7a9c7bf780
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7a9c7bd700
	int SourceOffsetCount;//[Offset: 0x74, Size: 0x4] 0x7a9c6daab0
	Vector[] SourceOffsetDefaults;//[Offset: 0x78, Size: 0x10] 0x7a9c7bd800
	byte SelectionMethod;//[Offset: 0x88, Size: 0x1] 0x7a9c7bd880
	bool bInheritRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1] 0x7a9c7bd900

--------------------------------
Class: ParticleModuleTypeDataAnimTrail.ParticleModuleTypeDataBase.ParticleModule.Object
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7a9c7bf580
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x7a9c7bf600
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x7a9c7bf680
	float TilingDistance;//[Offset: 0x2c, Size: 0x4] 0x7a9c6da880
	float DistanceTessellationStepSize;//[Offset: 0x30, Size: 0x4] 0x7a9c6da8f0
	float TangentTessellationStepSize;//[Offset: 0x34, Size: 0x4] 0x7a9c6da960
	float WidthTessellationStepSize;//[Offset: 0x38, Size: 0x4] 0x7a9c6da9d0

--------------------------------
Class: ParticleModuleTypeDataBeam2.ParticleModuleTypeDataBase.ParticleModule.Object
	byte BeamMethod;//[Offset: 0x2b, Size: 0x1] 0x7a9c7bf080
	int TextureTile;//[Offset: 0x2c, Size: 0x4] 0x7a9c6da500
	float TextureTileDistance;//[Offset: 0x30, Size: 0x4] 0x7a9c6da570
	int Sheets;//[Offset: 0x34, Size: 0x4] 0x7a9c6da5e0
	int MaxBeamCount;//[Offset: 0x38, Size: 0x4] 0x7a9c6da650
	float Speed;//[Offset: 0x3c, Size: 0x4] 0x7a9c6da6c0
	int InterpolationPoints;//[Offset: 0x40, Size: 0x4] 0x7a9c6da730
	bool bAlwaysOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x7a9c7bf100
	int UpVectorStepSize;//[Offset: 0x48, Size: 0x4] 0x7a9c6da7a0
	FName BranchParentName;//[Offset: 0x4c, Size: 0x8] 0x7a9c6da810
	RawDistributionFloat Distance;//[Offset: 0x58, Size: 0x38] 0x7a9c7bf180
	byte TaperMethod;//[Offset: 0x90, Size: 0x1] 0x7a9c7bf200
	RawDistributionFloat TaperFactor;//[Offset: 0x98, Size: 0x38] 0x7a9c7bf280
	RawDistributionFloat TaperScale;//[Offset: 0xd0, Size: 0x38] 0x7a9c7bf300
	bool RenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x7a9c7bf380
	bool RenderDirectLine;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1] 0x7a9c7bf400
	bool RenderLines;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1] 0x7a9c7bf480
	bool RenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 0x1] 0x7a9c7bf500

--------------------------------
Class: ParticleModuleTypeDataGpu.ParticleModuleTypeDataBase.ParticleModule.Object
	GPUSpriteEmitterInfo EmitterInfo;//[Offset: 0x30, Size: 0x2b0] 0x7a9c7bee80
	GPUSpriteResourceData ResourceData;//[Offset: 0x2e0, Size: 0x160] 0x7a9c7bef00
	float CameraMotionBlurAmount;//[Offset: 0x440, Size: 0x4] 0x7a9c6da490
	bool bClearExistingParticlesOnInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x444, Size: 0x1] 0x7a9c7bef80

--------------------------------
Class: GPUSpriteEmitterInfo
	ParticleModuleRequired* RequiredModule;//[Offset: 0x0, Size: 0x8] 0x7a9ca57780
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x8, Size: 0x8] 0x7a9ca57800
	ParticleModuleSpawnPerUnit* SpawnPerUnitModule;//[Offset: 0x10, Size: 0x8] 0x7a9ca57880
	ParticleModule*[] SpawnModules;//[Offset: 0x18, Size: 0x10] 0x7a9ca57980
	GPUSpriteLocalVectorFieldInfo LocalVectorField;//[Offset: 0x30, Size: 0x70] 0x7a9ca57f00
	FloatDistribution VectorFieldScale;//[Offset: 0xa0, Size: 0x28] 0x7a9ca57f80
	FloatDistribution DragCoefficient;//[Offset: 0xc8, Size: 0x28] 0x7a9ca58000
	FloatDistribution PointAttractorStrength;//[Offset: 0xf0, Size: 0x28] 0x7a9ca58080
	FloatDistribution Resilience;//[Offset: 0x118, Size: 0x28] 0x7a9ca58100
	Vector ConstantAcceleration;//[Offset: 0x140, Size: 0xc] 0x7a9ca58180
	Vector PointAttractorPosition;//[Offset: 0x14c, Size: 0xc] 0x7a9ca58200
	float PointAttractorRadiusSq;//[Offset: 0x158, Size: 0x4] 0x7a9ca0e400
	Vector OrbitOffsetBase;//[Offset: 0x15c, Size: 0xc] 0x7a9ca58300
	Vector OrbitOffsetRange;//[Offset: 0x168, Size: 0xc] 0x7a9ca58380
	Vector2D InvMaxSize;//[Offset: 0x174, Size: 0x8] 0x7a9ca58400
	float InvRotationRateScale;//[Offset: 0x17c, Size: 0x4] 0x7a9ca0e470
	float MaxLifetime;//[Offset: 0x180, Size: 0x4] 0x7a9ca0e4e0
	int MaxParticleCount;//[Offset: 0x184, Size: 0x4] 0x7a9ca0e550
	byte ScreenAlignment;//[Offset: 0x188, Size: 0x1] 0x7a9ca56380
	byte LockAxisFlag;//[Offset: 0x189, Size: 0x1] 0x7a9ca56400
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18a, Size: 0x1] 0x7a9ca56480
	byte CollisionMode;//[Offset: 0x18b, Size: 0x1] 0x7a9ca56500
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18c, Size: 0x1] 0x7a9ca56580
	float MinFacingCameraBlendDistance;//[Offset: 0x190, Size: 0x4] 0x7a9ca0e5c0
	float MaxFacingCameraBlendDistance;//[Offset: 0x194, Size: 0x4] 0x7a9ca0e630
	RawDistributionVector DynamicColor;//[Offset: 0x198, Size: 0x50] 0x7a9ca56600
	RawDistributionFloat DynamicAlpha;//[Offset: 0x1e8, Size: 0x38] 0x7a9ca56680
	RawDistributionVector DynamicColorScale;//[Offset: 0x220, Size: 0x50] 0x7a9ca56700
	RawDistributionFloat DynamicAlphaScale;//[Offset: 0x270, Size: 0x38] 0x7a9ca56780

--------------------------------
Class: GPUSpriteLocalVectorFieldInfo
	VectorField* Field;//[Offset: 0x0, Size: 0x8] 0x7a9ca57a00
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x7a9ca57a80
	Rotator MinInitialRotation;//[Offset: 0x40, Size: 0xc] 0x7a9ca57b00
	Rotator MaxInitialRotation;//[Offset: 0x4c, Size: 0xc] 0x7a9ca57b80
	Rotator RotationRate;//[Offset: 0x58, Size: 0xc] 0x7a9ca57c00
	float Intensity;//[Offset: 0x64, Size: 0x4] 0x7a9ca0e320
	float Tightness;//[Offset: 0x68, Size: 0x4] 0x7a9ca0e390
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x7a9ca57c80
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1] 0x7a9ca57d00
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1] 0x7a9ca57d80
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1] 0x7a9ca57e00
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c, Size: 0x1] 0x7a9ca57e80

--------------------------------
Class: VectorField.Object
	Box Bounds;//[Offset: 0x28, Size: 0x1c] 0x7a9c840b00
	float Intensity;//[Offset: 0x44, Size: 0x4] 0x7a9c7fac70

--------------------------------
Class: FloatDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x28] 0x7a9637ff80

--------------------------------
Class: GPUSpriteResourceData
	Color[] QuantizedColorSamples;//[Offset: 0x0, Size: 0x10] 0x7a9ca56880
	Color[] QuantizedMiscSamples;//[Offset: 0x10, Size: 0x10] 0x7a9ca56980
	Color[] QuantizedSimulationAttrSamples;//[Offset: 0x20, Size: 0x10] 0x7a9ca56a80
	Vector4 ColorScale;//[Offset: 0x30, Size: 0x10] 0x7a9ca56b00
	Vector4 ColorBias;//[Offset: 0x40, Size: 0x10] 0x7a9ca56b80
	Vector4 MiscScale;//[Offset: 0x50, Size: 0x10] 0x7a9ca56c00
	Vector4 MiscBias;//[Offset: 0x60, Size: 0x10] 0x7a9ca56c80
	Vector4 SimulationAttrCurveScale;//[Offset: 0x70, Size: 0x10] 0x7a9ca56d00
	Vector4 SimulationAttrCurveBias;//[Offset: 0x80, Size: 0x10] 0x7a9ca56d80
	Vector4 SubImageSize;//[Offset: 0x90, Size: 0x10] 0x7a9ca56e00
	Vector4 SizeBySpeed;//[Offset: 0xa0, Size: 0x10] 0x7a9ca56e80
	Vector ConstantAcceleration;//[Offset: 0xb0, Size: 0xc] 0x7a9ca56f00
	Vector OrbitOffsetBase;//[Offset: 0xbc, Size: 0xc] 0x7a9ca56f80
	Vector OrbitOffsetRange;//[Offset: 0xc8, Size: 0xc] 0x7a9ca57000
	Vector OrbitFrequencyBase;//[Offset: 0xd4, Size: 0xc] 0x7a9ca57080
	Vector OrbitFrequencyRange;//[Offset: 0xe0, Size: 0xc] 0x7a9ca57100
	Vector OrbitPhaseBase;//[Offset: 0xec, Size: 0xc] 0x7a9ca57180
	Vector OrbitPhaseRange;//[Offset: 0xf8, Size: 0xc] 0x7a9ca57200
	float GlobalVectorFieldScale;//[Offset: 0x104, Size: 0x4] 0x7a9ca0e6a0
	float GlobalVectorFieldTightness;//[Offset: 0x108, Size: 0x4] 0x7a9ca0ca30
	float PerParticleVectorFieldScale;//[Offset: 0x10c, Size: 0x4] 0x7a9ca0caa0
	float PerParticleVectorFieldBias;//[Offset: 0x110, Size: 0x4] 0x7a9ca0cb10
	float DragCoefficientScale;//[Offset: 0x114, Size: 0x4] 0x7a9ca0cb80
	float DragCoefficientBias;//[Offset: 0x118, Size: 0x4] 0x7a9ca0cbf0
	float ResilienceScale;//[Offset: 0x11c, Size: 0x4] 0x7a9ca0cc60
	float ResilienceBias;//[Offset: 0x120, Size: 0x4] 0x7a9ca0ccd0
	float CollisionRadiusScale;//[Offset: 0x124, Size: 0x4] 0x7a9ca0cd40
	float CollisionRadiusBias;//[Offset: 0x128, Size: 0x4] 0x7a9ca0cdb0
	float CollisionTimeBias;//[Offset: 0x12c, Size: 0x4] 0x7a9ca0ce20
	float CollisionRandomSpread;//[Offset: 0x130, Size: 0x4] 0x7a9ca0ce90
	float CollisionRandomDistribution;//[Offset: 0x134, Size: 0x4] 0x7a9ca0cf00
	float OneMinusFriction;//[Offset: 0x138, Size: 0x4] 0x7a9ca0cf70
	float RotationRateScale;//[Offset: 0x13c, Size: 0x4] 0x7a9ca0cfe0
	float CameraMotionBlurAmount;//[Offset: 0x140, Size: 0x4] 0x7a9ca0d050
	byte ScreenAlignment;//[Offset: 0x144, Size: 0x1] 0x7a9ca57300
	byte LockAxisFlag;//[Offset: 0x145, Size: 0x1] 0x7a9ca57380
	Vector2D PivotOffset;//[Offset: 0x148, Size: 0x8] 0x7a9ca55300
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1] 0x7a9ca55380
	float MinFacingCameraBlendDistance;//[Offset: 0x154, Size: 0x4] 0x7a9ca0d0c0
	float MaxFacingCameraBlendDistance;//[Offset: 0x158, Size: 0x4] 0x7a9ca0d130

--------------------------------
Class: ParticleModuleTypeDataMesh.ParticleModuleTypeDataBase.ParticleModule.Object
	StaticMesh* Mesh;//[Offset: 0x30, Size: 0x8] 0x7a9c7bfe80
	bool bUseStaticMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7a9c7bff00
	float LODSizeScale;//[Offset: 0x3c, Size: 0x4] 0x7a9c6da2d0
	bool CastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x7a9c7be780
	bool DoCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1] 0x7a9c7be800
	byte MeshAlignment;//[Offset: 0x41, Size: 0x1] 0x7a9c7be880
	bool bOverrideMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x42, Size: 0x1] 0x7a9c7be900
	bool bOverrideDefaultMotionBlurSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x42, Size: 0x1] 0x7a9c7be980
	bool bEnableMotionBlur;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x42, Size: 0x1] 0x7a9c7bea00
	float Pitch;//[Offset: 0x44, Size: 0x4] 0x7a9c6da340
	float Roll;//[Offset: 0x48, Size: 0x4] 0x7a9c6da3b0
	float Yaw;//[Offset: 0x4c, Size: 0x4] 0x7a9c6da420
	RawDistributionVector RollPitchYawRange;//[Offset: 0x50, Size: 0x50] 0x7a9c7bea80
	byte AxisLockOption;//[Offset: 0xa8, Size: 0x1] 0x7a9c7beb00
	bool bCameraFacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9, Size: 0x1] 0x7a9c7beb80
	byte CameraFacingUpAxisOption;//[Offset: 0xaa, Size: 0x1] 0x7a9c7bec00
	byte CameraFacingOption;//[Offset: 0xab, Size: 0x1] 0x7a9c7bec80
	bool bApplyParticleRotationAsSpin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x7a9c7bed00
	bool bFaceCameraDirectionRatherThanPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x7a9c7bed80
	bool bCollisionsConsiderPartilceSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1] 0x7a9c7bee00

--------------------------------
Class: ParticleModuleTypeDataRibbon.ParticleModuleTypeDataBase.ParticleModule.Object
	int MaxTessellationBetweenParticles;//[Offset: 0x2c, Size: 0x4] 0x7a9c6d9f50
	int SheetsPerTrail;//[Offset: 0x30, Size: 0x4] 0x7a9c6d9fc0
	int MaxTrailCount;//[Offset: 0x34, Size: 0x4] 0x7a9c6da030
	int MaxParticleInTrailCount;//[Offset: 0x38, Size: 0x4] 0x7a9c6da0a0
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7a9c7bf880
	bool bDeadTrailsOnSourceLoss;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7a9c7bf900
	bool bClipSourceSegement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x7a9c7bf980
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x7a9c7bfa00
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x7a9c7bfa80
	bool bSpawnInitialParticle;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x7a9c7bfb00
	byte RenderAxis;//[Offset: 0x3d, Size: 0x1] 0x7a9c7bfb80
	float TangentSpawningScalar;//[Offset: 0x40, Size: 0x4] 0x7a9c6da110
	bool bRenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x7a9c7bfc00
	bool bRenderSpawnPoints;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1] 0x7a9c7bfc80
	bool bRenderTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1] 0x7a9c7bfd00
	bool bRenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 0x1] 0x7a9c7bfd80
	float TilingDistance;//[Offset: 0x48, Size: 0x4] 0x7a9c6da180
	float DistanceTessellationStepSize;//[Offset: 0x4c, Size: 0x4] 0x7a9c6da1f0
	bool bEnableTangentDiffInterpScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7a9c7bfe00
	float TangentTessellationScalar;//[Offset: 0x54, Size: 0x4] 0x7a9c6da260

--------------------------------
Class: ParticleModuleVectorFieldBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleVectorFieldGlobal.ParticleModuleVectorFieldBase.ParticleModule.Object
	bool bOverrideGlobalVectorFieldTightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7a9c7d1080
	float GlobalVectorFieldScale;//[Offset: 0x2c, Size: 0x4] 0x7a9c6dbb50
	float GlobalVectorFieldTightness;//[Offset: 0x30, Size: 0x4] 0x7a9c6d9ee0

--------------------------------
Class: ParticleModuleVectorFieldLocal.ParticleModuleVectorFieldBase.ParticleModule.Object
	VectorField* VectorField;//[Offset: 0x30, Size: 0x8] 0x7a9c7d0c00
	Vector RelativeTranslation;//[Offset: 0x38, Size: 0xc] 0x7a9c7d0c80
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc] 0x7a9c7d0d00
	Vector RelativeScale3D;//[Offset: 0x50, Size: 0xc] 0x7a9c7d0d80
	float Intensity;//[Offset: 0x5c, Size: 0x4] 0x7a9c6dba70
	float Tightness;//[Offset: 0x60, Size: 0x4] 0x7a9c6dbae0
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1] 0x7a9c7d0e00
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1] 0x7a9c7d0e80
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64, Size: 0x1] 0x7a9c7d0f00
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x64, Size: 0x1] 0x7a9c7d0f80
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x64, Size: 0x1] 0x7a9c7d1000

--------------------------------
Class: ParticleModuleVectorFieldRotation.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector MinInitialRotation;//[Offset: 0x2c, Size: 0xc] 0x7a9c7d0b00
	Vector MaxInitialRotation;//[Offset: 0x38, Size: 0xc] 0x7a9c7d0b80

--------------------------------
Class: ParticleModuleVectorFieldRotationRate.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector RotationRate;//[Offset: 0x2c, Size: 0xc] 0x7a9c7d0a80

--------------------------------
Class: ParticleModuleVectorFieldScale.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScale;//[Offset: 0x30, Size: 0x8] 0x7a9c7d0980
	RawDistributionFloat VectorFieldScaleRaw;//[Offset: 0x38, Size: 0x38] 0x7a9c7d0a00

--------------------------------
Class: ParticleModuleVectorFieldScaleOverLife.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScaleOverLife;//[Offset: 0x30, Size: 0x8] 0x7a9c7d0880
	RawDistributionFloat VectorFieldScaleOverLifeRaw;//[Offset: 0x38, Size: 0x38] 0x7a9c7d0900

--------------------------------
Class: ParticleModuleVelocityBase.ParticleModule.Object
	bool bInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7a9c7d0780
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x7a9c7d0800

--------------------------------
Class: ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector StartVelocity;//[Offset: 0x30, Size: 0x50] 0x7a9c7d0680
	RawDistributionFloat StartVelocityRadial;//[Offset: 0x80, Size: 0x38] 0x7a9c7d0700

--------------------------------
Class: ParticleModuleVelocityCone.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionFloat Angle;//[Offset: 0x30, Size: 0x38] 0x7a9c7d0500
	RawDistributionFloat Velocity;//[Offset: 0x68, Size: 0x38] 0x7a9c7d0580
	Vector Direction;//[Offset: 0xa0, Size: 0xc] 0x7a9c7d0600

--------------------------------
Class: ParticleModuleVelocityInheritParent.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector Scale;//[Offset: 0x30, Size: 0x50] 0x7a9c7d0480

--------------------------------
Class: ParticleModuleVelocityOverLifetime.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector VelOverLife;//[Offset: 0x30, Size: 0x50] 0x7a9c7d0380
	bool Absolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9c7d0400

--------------------------------
Class: ParticleModuleVelocity_Seeded.ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xb8, Size: 0x20] 0x7a9c7d0300

--------------------------------
Class: ParticleSpriteEmitter.ParticleEmitter.Object

--------------------------------
Class: PathFollowingAgentInterface.Interface.Object

--------------------------------
Class: PawnNoiseEmitterComponent.ActorComponent.Object
	bool bAIPerceptionSystemCompatibilityMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1] 0x7a9c7d4f00
	Vector LastRemoteNoisePosition;//[Offset: 0xfc, Size: 0xc] 0x7a9c7d4f80
	float NoiseLifetime;//[Offset: 0x108, Size: 0x4] 0x7a9c6dd2f0
	float LastRemoteNoiseVolume;//[Offset: 0x10c, Size: 0x4] 0x7a9c6dd360
	float LastRemoteNoiseTime;//[Offset: 0x110, Size: 0x4] 0x7a9c6dd3d0
	float LastLocalNoiseVolume;//[Offset: 0x114, Size: 0x4] 0x7a9c6dd440
	float LastLocalNoiseTime;//[Offset: 0x118, Size: 0x4] 0x7a9c6dd4b0
	void MakeNoise(Actor* NoiseMaker, float Loudness, out const Vector NoiseLocation);// 0xffffff8523219000 0x7a9c6ca5e0

--------------------------------
Class: PhysicalAnimationComponent.ActorComponent.Object
	float StrengthMultiplyer;//[Offset: 0xf8, Size: 0x4] 0x7a9c6dcfe0
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x100, Size: 0x8] 0x7a9c7d4b00
	void SetStrengthMultiplyer(float InStrengthMultiplyer);// 0xffffff8523219000 0x7a9c6ca0a0
	void SetSkeletalMeshComponent(SkeletalMeshComponent* InSkeletalMeshComponent);// 0xffffff8523219000 0x7a9c6ca180
	Transform GetBodyTargetTransform(FName BodyName);// 0xffffff8523219000 0x7a9c6ca260
	void ApplyPhysicalAnimationSettingsBelow(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData, bool bIncludeSelf);// 0xffffff8523219000 0x7a9c6ca340
	void ApplyPhysicalAnimationSettings(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData);// 0xffffff8523219000 0x7a9c6ca420
	void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);// 0xffffff8523219000 0x7a9c6ca500

--------------------------------
Class: RigidBodyBase.Actor.Object

--------------------------------
Class: PhysicsConstraintActor.RigidBodyBase.Actor.Object
	PhysicsConstraintComponent* ConstraintComp;//[Offset: 0x330, Size: 0x8] 0x7a9c7d5f80
	Actor* ConstraintActor1;//[Offset: 0x338, Size: 0x8] 0x7a9c7d6000
	Actor* ConstraintActor2;//[Offset: 0x340, Size: 0x8] 0x7a9c7d6080
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1] 0x7a9c7d6100

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x258, Size: 0x8] 0x7a9c7d6700
	ConstrainComponentPropName ComponentName1;//[Offset: 0x260, Size: 0x8] 0x7a9c7d6780
	Actor* ConstraintActor2;//[Offset: 0x268, Size: 0x8] 0x7a9c7d6800
	ConstrainComponentPropName ComponentName2;//[Offset: 0x270, Size: 0x8] 0x7a9c7d6880
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x288, Size: 0x8] 0x7a9c7d6900
	delegate OnConstraintBroken;//[Offset: 0x290, Size: 0x10] 0x7a9c7d6980
	ConstraintInstance ConstraintInstance;//[Offset: 0x2a0, Size: 0x1b8] 0x7a9c7d6a00
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0xffffff8523219000 0x7a9c6cbca0
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0xffffff8523219000 0x7a9c6cbd80
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0xffffff8523219000 0x7a9c6cbe60
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0xffffff8523219000 0x7a9c6cbf40
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0xffffff8523219000 0x7a9c6cc020
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0xffffff8523219000 0x7a9c6cc100
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0xffffff8523219000 0x7a9c6cc1e0
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0xffffff8523219000 0x7a9c6cc2c0
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0xffffff8523219000 0x7a9c6cc3a0
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0xffffff8523219000 0x7a9c6cc480
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0xffffff8523219000 0x7a9c6cc560
	void SetDisableCollision(bool bDisableCollision);// 0xffffff8523219000 0x7a9c6cc640
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0xffffff8523219000 0x7a9c6cc720
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0xffffff8523219000 0x7a9c6cc800
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0xffffff8523219000 0x7a9c6cc8e0
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0xffffff8523219000 0x7a9c6cc9c0
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0xffffff8523219000 0x7a9c6c90e0
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0xffffff8523219000 0x7a9c6c91c0
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0xffffff8523219000 0x7a9c6c92a0
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0xffffff8523219000 0x7a9c6c9380
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0xffffff8523219000 0x7a9c6c9460
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0xffffff8523219000 0x7a9c6c9540
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0xffffff8523219000 0x7a9c6c9620
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0xffffff8523219000 0x7a9c6c9700
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0xffffff8523219000 0x7a9c6c97e0
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0xffffff8523219000 0x7a9c6c98c0
	void SetAngularDriveMode(byte DriveMode);// 0xffffff8523219000 0x7a9c6c99a0
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0xffffff8523219000 0x7a9c6c9a80
	bool IsBroken();// 0xffffff8523219000 0x7a9c6c9b60
	float GetCurrentTwist();// 0xffffff8523219000 0x7a9c6c9c40
	float GetCurrentSwing2();// 0xffffff8523219000 0x7a9c6c9d20
	float GetCurrentSwing1();// 0xffffff8523219000 0x7a9c6c9e00
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0xffffff8523219000 0x7a9c6c9ee0
	void BreakConstraint();// 0xffffff8523219000 0x7a9c6c9fc0

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 0x8] 0x7a9ca05790

--------------------------------
Class: PhysicsHandleComponent.ActorComponent.Object
	PrimitiveComponent* GrabbedComponent;//[Offset: 0xf8, Size: 0x8] 0x7a9c7d7c00
	bool bSoftAngularConstraint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1] 0x7a9c7d7c80
	bool bSoftLinearConstraint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1] 0x7a9c7d7d00
	bool bInterpolateTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 0x1] 0x7a9c7d7d80
	float LinearDamping;//[Offset: 0x10c, Size: 0x4] 0x7a9c6dda60
	float LinearStiffness;//[Offset: 0x110, Size: 0x4] 0x7a9c6ddad0
	float AngularDamping;//[Offset: 0x114, Size: 0x4] 0x7a9c6ddb40
	float AngularStiffness;//[Offset: 0x118, Size: 0x4] 0x7a9c6ddbb0
	float InterpolationSpeed;//[Offset: 0x180, Size: 0x4] 0x7a9c6ddc20
	void SetTargetRotation(Rotator NewRotation);// 0xffffff8523219000 0x7a9c6cb060
	void SetTargetLocationAndRotation(Vector NewLocation, Rotator NewRotation);// 0xffffff8523219000 0x7a9c6cb140
	void SetTargetLocation(Vector NewLocation);// 0xffffff8523219000 0x7a9c6cb220
	void SetLinearStiffness(float NewLinearStiffness);// 0xffffff8523219000 0x7a9c6cb300
	void SetLinearDamping(float NewLinearDamping);// 0xffffff8523219000 0x7a9c6cb3e0
	void SetInterpolationSpeed(float NewInterpolationSpeed);// 0xffffff8523219000 0x7a9c6cb4c0
	void SetAngularStiffness(float NewAngularStiffness);// 0xffffff8523219000 0x7a9c6cb5a0
	void SetAngularDamping(float NewAngularDamping);// 0xffffff8523219000 0x7a9c6cb680
	void ReleaseComponent();// 0xffffff8523219000 0x7a9c6cb760
	void GrabComponentAtLocationWithRotation(PrimitiveComponent* Component, FName InBoneName, Vector Location, Rotator Rotation);// 0xffffff8523219000 0x7a9c6cb840
	void GrabComponentAtLocation(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation);// 0xffffff8523219000 0x7a9c6cb920
	void GrabComponent(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation, bool bConstrainRotation);// 0xffffff8523219000 0x7a9c6cba00
	void GetTargetLocationAndRotation(out Vector TargetLocation, out Rotator TargetRotation);// 0xffffff8523219000 0x7a9c6cbae0
	PrimitiveComponent* GetGrabbedComponent();// 0xffffff8523219000 0x7a9c6cbbc0

--------------------------------
Class: PhysicsSpringComponent.SceneComponent.ActorComponent.Object
	float SpringStiffness;//[Offset: 0x258, Size: 0x4] 0x7a9c6decc0
	float SpringDamping;//[Offset: 0x25c, Size: 0x4] 0x7a9c6ded30
	float SpringLengthAtRest;//[Offset: 0x260, Size: 0x4] 0x7a9c6deda0
	float SpringRadius;//[Offset: 0x264, Size: 0x4] 0x7a9c6dee10
	byte SpringChannel;//[Offset: 0x268, Size: 0x1] 0x7a9c7d8d80
	bool bIgnoreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1] 0x7a9c7d8e00
	float SpringCompression;//[Offset: 0x26c, Size: 0x4] 0x7a9c6dee80
	Vector GetSpringRestingPoint();// 0xffffff8523219000 0x7a9c6ce6a0
	Vector GetSpringDirection();// 0xffffff8523219000 0x7a9c6cadc0
	Vector GetSpringCurrentEndPoint();// 0xffffff8523219000 0x7a9c6caea0
	float GetNormalizedCompressionScalar();// 0xffffff8523219000 0x7a9c6caf80

--------------------------------
Class: PhysicsThruster.RigidBodyBase.Actor.Object
	PhysicsThrusterComponent* ThrusterComponent;//[Offset: 0x330, Size: 0x8] 0x7a9c7d8d00

--------------------------------
Class: PhysicsThrusterComponent.SceneComponent.ActorComponent.Object
	float ThrustStrength;//[Offset: 0x258, Size: 0x4] 0x7a9c6dec50

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x330, Size: 0x8] 0x7a9c7d8c00
	SceneComponent* SceneComponent;//[Offset: 0x338, Size: 0x8] 0x7a9c7d8c80

--------------------------------
Class: PlanarReflection.SceneCapture.Actor.Object
	PlanarReflectionComponent* PlanarReflectionComponent;//[Offset: 0x340, Size: 0x8] 0x7a9c7d8a80
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1] 0x7a9c7d8b00
	void OnInterpToggle(bool bEnable);// 0xffffff8523219000 0x7a9c6ce5c0

--------------------------------
Class: PlanarReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x2f0, Size: 0x8] 0x7a9c7d9f00
	float NormalDistortionStrength;//[Offset: 0x2f8, Size: 0x4] 0x7a9c6dfe40
	float PrefilterRoughness;//[Offset: 0x2fc, Size: 0x4] 0x7a9c6dfeb0
	float PrefilterRoughnessDistance;//[Offset: 0x300, Size: 0x4] 0x7a9c6dff20
	int ScreenPercentage;//[Offset: 0x304, Size: 0x4] 0x7a9c6dff90
	float ExtraFOV;//[Offset: 0x308, Size: 0x4] 0x7a9c6de710
	float DistanceFromPlaneFadeStart;//[Offset: 0x30c, Size: 0x4] 0x7a9c6de780
	float DistanceFromPlaneFadeEnd;//[Offset: 0x310, Size: 0x4] 0x7a9c6de7f0
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x314, Size: 0x4] 0x7a9c6de860
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x318, Size: 0x4] 0x7a9c6de8d0
	float AngleFromPlaneFadeStart;//[Offset: 0x31c, Size: 0x4] 0x7a9c6de940
	float AngleFromPlaneFadeEnd;//[Offset: 0x320, Size: 0x4] 0x7a9c6de9b0
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1] 0x7a9c7d9f80
	bool bRenderSceneTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x325, Size: 0x1] 0x7a9c7da000

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x258, Size: 0x1] 0x7a9c7da100
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x260, Size: 0x10] 0x7a9c7da200
	Actor*[] HiddenActors;//[Offset: 0x270, Size: 0x10] 0x7a9c7da300
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x280, Size: 0x10] 0x7a9c7da400
	Actor*[] ShowOnlyActors;//[Offset: 0x290, Size: 0x10] 0x7a9c7d8480
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x7a9c7d8500
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1] 0x7a9c7d8580
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 0x1] 0x7a9c7d8600
	float LODDistanceFactor;//[Offset: 0x2a4, Size: 0x4] 0x7a9c6dea20
	float MaxViewDistanceOverride;//[Offset: 0x2a8, Size: 0x4] 0x7a9c6dea90
	int CaptureSortPriority;//[Offset: 0x2ac, Size: 0x4] 0x7a9c6deb00
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x2b0, Size: 0x10] 0x7a9c7d8700
	FString ProfilingEventName;//[Offset: 0x2d0, Size: 0x10] 0x7a9c6deb70
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0xffffff8523219000 0x7a9c6cdde0
	void ShowOnlyActorComponents(Actor* InActor);// 0xffffff8523219000 0x7a9c6cdec0
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0xffffff8523219000 0x7a9c6cdfa0
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0xffffff8523219000 0x7a9c6ce080
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0xffffff8523219000 0x7a9c6ce160
	void HideComponent(PrimitiveComponent* InComponent);// 0xffffff8523219000 0x7a9c6ce240
	void HideActorComponents(Actor* InActor);// 0xffffff8523219000 0x7a9c6ce320
	void ClearShowOnlyComponents();// 0xffffff8523219000 0x7a9c6ce400
	void ClearHiddenComponents();// 0xffffff8523219000 0x7a9c6ce4e0

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10] 0x7a9ca60940
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7a9ca5ba00

--------------------------------
Class: PlaneReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: PlaneReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadiusScale;//[Offset: 0x2d0, Size: 0x4] 0x7a9c6dfdd0
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x2d8, Size: 0x8] 0x7a9c7d9e00
	BoxComponent* PreviewCaptureBox;//[Offset: 0x2e0, Size: 0x8] 0x7a9c7d9e80

--------------------------------
Class: PlatformEventsComponent.ActorComponent.Object
	delegate PlatformChangedToLaptopModeDelegate;//[Offset: 0xf8, Size: 0x10] 0x7aa07d6500
	delegate PlatformChangedToTabletModeDelegate;//[Offset: 0x108, Size: 0x10] 0x7aa07d6600
	bool SupportsConvertibleLaptops();// 0xffffff8523219000 0x7aa07c8f20
	void PlatformEventDelegate__DelegateSignature();// 0xffffff8523219000 0x7aa07c9000
	bool IsInTabletMode();// 0xffffff8523219000 0x7aa07c5720
	bool IsInLaptopMode();// 0xffffff8523219000 0x7aa07c5800

--------------------------------
Class: PlatformInterfaceWebResponse.Object
	FString OriginalURL;//[Offset: 0x28, Size: 0x10] 0x7a9c6df970
	int ResponseCode;//[Offset: 0x38, Size: 0x4] 0x7a9c6df9e0
	int Tag;//[Offset: 0x3c, Size: 0x4] 0x7a9c6dfa50
	FString StringResponse;//[Offset: 0x40, Size: 0x10] 0x7a9c6dfac0
	byte[] BinaryResponse;//[Offset: 0x50, Size: 0x10] 0x7a9c7d9d80
	int GetNumHeaders();// 0xffffff8523219000 0x7a9c6cdb40
	FString GetHeaderValue(FString HeaderName);// 0xffffff8523219000 0x7a9c6cdc20
	void GetHeader(int HeaderIndex, out FString Header, out FString Value);// 0xffffff8523219000 0x7a9c6cdd00

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x354, Size: 0x8] 0x7a9c6df6d0

--------------------------------
Class: PlayerStartPIE.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: PluginCommandlet.Commandlet.Object

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x340, Size: 0x8] 0x7a9c7db500
	void SetRadius(float NewRadius);// 0xffffff8523219000 0x7a9c6cce20
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0xffffff8523219000 0x7a9c6ccf00

--------------------------------
Class: Polys.Object

--------------------------------
Class: PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetBoneTransformByName(FName BoneName, out const Transform InTransform, byte BoneSpace);// 0xffffff8523219000 0x7a9cb9bca0
	void SetBoneScaleByName(FName BoneName, Vector InScale3D, byte BoneSpace);// 0xffffff8523219000 0x7a9cb9bd80
	void SetBoneRotationByName(FName BoneName, Rotator InRotation, byte BoneSpace);// 0xffffff8523219000 0x7a9cb9be60
	void SetBoneLocationByName(FName BoneName, Vector InLocation, byte BoneSpace);// 0xffffff8523219000 0x7a9cb9bf40
	void ResetBoneTransformByName(FName BoneName);// 0xffffff8523219000 0x7a9cb9c020
	Transform GetBoneTransformByName(FName BoneName, byte BoneSpace);// 0xffffff8523219000 0x7a9cb9c100
	Vector GetBoneScaleByName(FName BoneName, byte BoneSpace);// 0xffffff8523219000 0x7a9cb9c1e0
	Rotator GetBoneRotationByName(FName BoneName, byte BoneSpace);// 0xffffff8523219000 0x7a9cb9c2c0
	Vector GetBoneLocationByName(FName BoneName, byte BoneSpace);// 0xffffff8523219000 0x7a9cb9c3a0
	void CopyPoseFromSkeletalComponent(const SkeletalMeshComponent* InComponentToCopy);// 0xffffff8523219000 0x7a9cb9c480

--------------------------------
Class: PoseAsset.AnimationAsset.Object
	PoseDataContainer PoseContainer;//[Offset: 0x80, Size: 0x90] 0x7a9c7db380
	bool bAdditivePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x7a9c7db400
	int BasePoseIndex;//[Offset: 0x114, Size: 0x4] 0x7a9c7f0780
	FName RetargetSource;//[Offset: 0x118, Size: 0x8] 0x7a9c7f07f0

--------------------------------
Class: PoseDataContainer
	SmartName[] PoseNames;//[Offset: 0x0, Size: 0x10] 0x7a9ca59e00
	FName[] Tracks;//[Offset: 0x10, Size: 0x10] 0x7a9ca59e80
	<FName,int> TrackMap;//[Offset: 0x20, Size: 0x50] 0x7a963d81c0
	PoseData[] Poses;//[Offset: 0x70, Size: 0x10] 0x7a9ca5a180
	AnimCurveBase[] Curves;//[Offset: 0x80, Size: 0x10] 0x7a9ca5a280

--------------------------------
Class: PoseData
	Transform[] LocalSpacePose;//[Offset: 0x0, Size: 0x10] 0x7a9ca59f80
	<int,int> TrackToBufferIndex;//[Offset: 0x10, Size: 0x50] 0x7a963d8260
	float[] CurveData;//[Offset: 0x60, Size: 0x10] 0x7a9ca5a080

--------------------------------
Class: PoseWatch.Object
	EdGraphNode* Node;//[Offset: 0x28, Size: 0x8] 0x7a9c7db280
	Color PoseWatchColour;//[Offset: 0x30, Size: 0x4] 0x7a9c7db300

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x260, Size: 0x530] 0x7a9c7daf80
	float Priority;//[Offset: 0x790, Size: 0x4] 0x7a9c7f05c0
	float BlendRadius;//[Offset: 0x794, Size: 0x4] 0x7a9c7f0630
	float BlendWeight;//[Offset: 0x798, Size: 0x4] 0x7a9c7f06a0
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79c, Size: 0x1] 0x7a9c7db080
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x79c, Size: 0x1] 0x7a9c7db100
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0xffffff8523219000 0x7a9c6cff20

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x370, Size: 0x530] 0x7a9c7dad80
	float Priority;//[Offset: 0x8a0, Size: 0x4] 0x7a9c7f0400
	float BlendRadius;//[Offset: 0x8a4, Size: 0x4] 0x7a9c7f0470
	float BlendWeight;//[Offset: 0x8a8, Size: 0x4] 0x7a9c7f04e0
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ac, Size: 0x1] 0x7a9c7dae00
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8ac, Size: 0x1] 0x7a9c7dae80
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0xffffff8523219000 0x7a9c6cfe40

--------------------------------
Class: PrecomputedVisibilityOverrideVolume.Volume.Brush.Actor.Object
	Actor*[] OverrideVisibleActors;//[Offset: 0x368, Size: 0x10] 0x7a9c7dab80
	Actor*[] OverrideInvisibleActors;//[Offset: 0x378, Size: 0x10] 0x7a9c7dac80
	FName[] OverrideInvisibleLevels;//[Offset: 0x388, Size: 0x10] 0x7a9c7dad00

--------------------------------
Class: PrecomputedVisibilityVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PreviewCollectionInterface.Interface.Object

--------------------------------
Class: PreviewMeshCollection.DataAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8] 0x7a9c7da980
	PreviewMeshCollectionEntry[] SkeletalMeshes;//[Offset: 0x40, Size: 0x10] 0x7a9c7daa80

--------------------------------
Class: PreviewMeshCollectionEntry
	SkeletalMesh* SkeletalMesh;//[Offset: 0x0, Size: 0x28] 0x7a9ca59b00

--------------------------------
Class: PrimaryAssetLabel.PrimaryDataAsset.DataAsset.Object
	PrimaryAssetRules Rules;//[Offset: 0x30, Size: 0x10] 0x7a9c7da580
	bool bLabelAssetsInMyDirectory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x7a9c7da600
	bool bIsRuntimeLabel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1] 0x7a9c7da680
	Object*[] ExplicitAssets;//[Offset: 0x48, Size: 0x10] 0x7a9c7da780
	class Object[] ExplicitBlueprints;//[Offset: 0x58, Size: 0x10] 0x7a9c7da880
	CollectionReference AssetCollection;//[Offset: 0x68, Size: 0x8] 0x7a9c7da900

--------------------------------
Class: CollectionReference
	FName CollectionName;//[Offset: 0x0, Size: 0x8] 0x7a9ca05870

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x134, Size: 0x4] 0x7a963edb40
	float MaxSpeed;//[Offset: 0x138, Size: 0x4] 0x7a963edbb0
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13c, Size: 0x1] 0x7aa07d9000
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13c, Size: 0x1] 0x7aa07d9080
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13c, Size: 0x1] 0x7aa07d9100
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13c, Size: 0x1] 0x7aa07d9180
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13c, Size: 0x1] 0x7aa07d9200
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13c, Size: 0x1] 0x7aa07d9280
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13c, Size: 0x1] 0x7aa07d9300
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13c, Size: 0x1] 0x7aa07d9380
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d, Size: 0x1] 0x7aa07d9400
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13d, Size: 0x1] 0x7aa07d9480
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13d, Size: 0x1] 0x7aa07d7400
	float PreviousHitTime;//[Offset: 0x140, Size: 0x4] 0x7a963edc20
	Vector PreviousHitNormal;//[Offset: 0x144, Size: 0xc] 0x7aa07d7480
	float ProjectileGravityScale;//[Offset: 0x150, Size: 0x4] 0x7a963edc90
	float Buoyancy;//[Offset: 0x154, Size: 0x4] 0x7a963edd00
	float Bounciness;//[Offset: 0x158, Size: 0x4] 0x7a963edd70
	float Friction;//[Offset: 0x15c, Size: 0x4] 0x7a963edde0
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x160, Size: 0x4] 0x7a963ede50
	float MinFrictionFraction;//[Offset: 0x164, Size: 0x4] 0x7a963edec0
	delegate OnProjectileBounce;//[Offset: 0x168, Size: 0x10] 0x7aa07d7500
	delegate OnProjectileStop;//[Offset: 0x178, Size: 0x10] 0x7aa07d7580
	float HomingAccelerationMagnitude;//[Offset: 0x188, Size: 0x4] 0x7a963edf30
	SceneComponent* HomingTargetComponent;//[Offset: 0x18c, Size: 0x8] 0x7aa07d7680
	float MaxSimulationTimeStep;//[Offset: 0x194, Size: 0x4] 0x7a963edfa0
	int MaxSimulationIterations;//[Offset: 0x198, Size: 0x4] 0x7a963ee010
	int BounceAdditionalIterations;//[Offset: 0x19c, Size: 0x4] 0x7a963ee080
	float InterpLocationTime;//[Offset: 0x1a0, Size: 0x4] 0x7a963ee0f0
	float InterpRotationTime;//[Offset: 0x1a4, Size: 0x4] 0x7a963ee160
	float InterpLocationMaxLagDistance;//[Offset: 0x1a8, Size: 0x4] 0x7a963ee1d0
	float InterpLocationSnapToTargetDistance;//[Offset: 0x1ac, Size: 0x4] 0x7a963ee240
	void StopSimulating(out const HitResult HitResult);// 0xffffff8523219000 0x7aa07c7860
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0xffffff8523219000 0x7aa07c7940
	void SetInterpolatedComponent(SceneComponent* Component);// 0xffffff8523219000 0x7aa07c7a20
	void ResetInterpolation();// 0xffffff8523219000 0x7aa07c7b00
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0xffffff8523219000 0x7aa07c7be0
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0xffffff8523219000 0x7aa07c7cc0
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0xffffff8523219000 0x7aa07c7da0
	Vector LimitVelocity(Vector NewVelocity);// 0xffffff8523219000 0x7aa07c7e80
	bool IsVelocityUnderSimulationThreshold();// 0xffffff8523219000 0x7aa07c7f60
	bool IsInterpolationComplete();// 0xffffff8523219000 0x7aa07c8040

--------------------------------
Class: ProxyLODMeshSimplificationSettings.DeveloperSettings.Object
	FName ProxyLODMeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x7a9c7f0320

--------------------------------
Class: RadialForceActor.RigidBodyBase.Actor.Object
	RadialForceComponent* ForceComponent;//[Offset: 0x330, Size: 0x8] 0x7a9c7dc600
	void ToggleForce();// 0xffffff8523219000 0x7a9c6cfac0
	void FireImpulse();// 0xffffff8523219000 0x7a9c6cfba0
	void EnableForce();// 0xffffff8523219000 0x7a9c6cfc80
	void DisableForce();// 0xffffff8523219000 0x7a9c6cfd60

--------------------------------
Class: RadialForceComponent.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x258, Size: 0x4] 0x7a9c7f0160
	byte Falloff;//[Offset: 0x25c, Size: 0x1] 0x7a9c7dc280
	float ImpulseStrength;//[Offset: 0x260, Size: 0x4] 0x7a9c7f01d0
	bool bImpulseVelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1] 0x7a9c7dc300
	bool bIgnoreOwningActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1] 0x7a9c7dc380
	float ForceStrength;//[Offset: 0x268, Size: 0x4] 0x7a9c7f0240
	float DestructibleDamage;//[Offset: 0x26c, Size: 0x4] 0x7a9c7f02b0
	byte[] ObjectTypesToAffect;//[Offset: 0x270, Size: 0x10] 0x7a9c7dc480
	void RemoveObjectTypeToAffect(byte ObjectType);// 0xffffff8523219000 0x7a9c6cf820
	void FireImpulse();// 0xffffff8523219000 0x7a9c6cf900
	void AddObjectTypeToAffect(byte ObjectType);// 0xffffff8523219000 0x7a9c6cf9e0

--------------------------------
Class: RectLight.Light.Actor.Object
	RectLightComponent* RectLightComponent;//[Offset: 0x340, Size: 0x8] 0x7a9c7dc200

--------------------------------
Class: RectLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float SourceWidth;//[Offset: 0x398, Size: 0x4] 0x7a9c7f1ac0
	float SourceHeight;//[Offset: 0x39c, Size: 0x4] 0x7a9c7f1b30
	float BarnDoorAngle;//[Offset: 0x3a0, Size: 0x4] 0x7a9c7f1ba0
	float BarnDoorLength;//[Offset: 0x3a4, Size: 0x4] 0x7a9c7f1c10
	Texture* SourceTexture;//[Offset: 0x3a8, Size: 0x8] 0x7a9c7dc100
	void SetSourceWidth(float bNewValue);// 0xffffff8523219000 0x7a9c6cf3c0
	void SetSourceTexture(Texture* bNewValue);// 0xffffff8523219000 0x7a9c6cf4a0
	void SetSourceHeight(float NewValue);// 0xffffff8523219000 0x7a9c6cf580
	void SetBarnDoorLength(float NewValue);// 0xffffff8523219000 0x7a9c6cf660
	void SetBarnDoorAngle(float NewValue);// 0xffffff8523219000 0x7a9c6cf740

--------------------------------
Class: RendererSettings.DeveloperSettings.Object
	bool bMobileHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7a9c7ddc00
	bool bMobileDisableVertexFog;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7a9c7ddc80
	int MaxMobileCascades;//[Offset: 0x3c, Size: 0x4] 0x7a9c7f15f0
	byte MobileMSAASampleCount;//[Offset: 0x40, Size: 0x1] 0x7a9c7ddd00
	bool bMobileUseLegacyShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x7a9c7ddd80
	bool bMobileUseHWsRGBEncoding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1] 0x7a9c7dde00
	bool bMobileAllowDitheredLODTransition;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 0x1] 0x7a9c7dde80
	bool bMobileAllowSoftwareOcclusionCulling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 0x1] 0x7a9c7ddf00
	bool bDiscardUnusedQualityLevels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41, Size: 0x1] 0x7a9c7ddf80
	bool bOcclusionCulling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x41, Size: 0x1] 0x7a9c7de000
	float MinScreenRadiusForLights;//[Offset: 0x44, Size: 0x4] 0x7a9c7f1660
	float MinScreenRadiusForEarlyZPass;//[Offset: 0x48, Size: 0x4] 0x7a9c7f16d0
	float MinScreenRadiusForCSMdepth;//[Offset: 0x4c, Size: 0x4] 0x7a9c7f1740
	bool bPrecomputedVisibilityWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7a9c7de080
	bool bTextureStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x7a9c7de100
	bool bUseDXT5NormalMaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1] 0x7a9c7de180
	bool bClearCoatEnableSecondNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1] 0x7a9c7de200
	int ReflectionCaptureResolution;//[Offset: 0x54, Size: 0x4] 0x7a9c7f17b0
	bool ReflectionEnvironmentLightmapMixBasedOnRoughness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7a9c7de280
	bool bForwardShading;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x7a9c7de300
	bool bVertexFoggingForOpaque;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1] 0x7a9c7de380
	bool bAllowStaticLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1] 0x7a9c7de400
	bool bUseNormalMapsForStaticLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1] 0x7a9c7de480
	bool bGenerateMeshDistanceFields;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1] 0x7a9c7de500
	bool bEightBitMeshDistanceFields;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1] 0x7a9c7de580
	bool bGenerateLandscapeGIData;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1] 0x7a9c7de600
	bool bCompressMeshDistanceFields;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x7a9c7de680
	float TessellationAdaptivePixelsPerTriangle;//[Offset: 0x5c, Size: 0x4] 0x7a9c7f1820
	bool bSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7a9c7de700
	byte TranslucentSortPolicy;//[Offset: 0x61, Size: 0x1] 0x7a9c7dc680
	Vector TranslucentSortAxis;//[Offset: 0x64, Size: 0xc] 0x7a9c7dc700
	byte CustomDepthStencil;//[Offset: 0x70, Size: 0x1] 0x7a9c7dc780
	bool bCustomDepthTaaJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 0x1] 0x7a9c7dc800
	byte bEnableAlphaChannelInPostProcessing;//[Offset: 0x72, Size: 0x1] 0x7a9c7dc880
	bool bUseNewAlgorithm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x73, Size: 0x1] 0x7a9c7dc900
	bool bDefaultFeatureBloom;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x73, Size: 0x1] 0x7a9c7dc980
	bool bDefaultFeatureAmbientOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x73, Size: 0x1] 0x7a9c7dca00
	bool bDefaultFeatureAmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x73, Size: 0x1] 0x7a9c7db880
	bool bDefaultFeatureAutoExposure;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x73, Size: 0x1] 0x7a9c7dca80
	byte DefaultFeatureAutoExposure;//[Offset: 0x74, Size: 0x1] 0x7a9c7dcb00
	bool bExtendDefaultLuminanceRangeInAutoExposureSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x75, Size: 0x1] 0x7a9c7dcb80
	bool bUsePreExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x75, Size: 0x1] 0x7a9c7dcc00
	bool bDefaultFeatureMotionBlur;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x75, Size: 0x1] 0x7a9c7dcc80
	bool bDefaultFeatureLensFlare;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x75, Size: 0x1] 0x7a9c7dcd00
	bool bTemporalUpsampling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x75, Size: 0x1] 0x7a9c7dcd80
	byte DefaultFeatureAntiAliasing;//[Offset: 0x76, Size: 0x1] 0x7a9c7dce00
	enum DefaultLightUnits;//[Offset: 0x77, Size: 0x1] 0x7a9c7dcf00
	byte DefaultBackBufferPixelFormat;//[Offset: 0x78, Size: 0x1] 0x7a9c7dcf80
	bool bRenderUnbuiltPreviewShadowsInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 0x1] 0x7a9c7dd000
	bool bStencilForLODDither;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x79, Size: 0x1] 0x7a9c7dd080
	byte EarlyZPass;//[Offset: 0x7a, Size: 0x1] 0x7a9c7dd100
	bool bEarlyZPassOnlyMaterialMasking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b, Size: 0x1] 0x7a9c7dd180
	bool bDBuffer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7b, Size: 0x1] 0x7a9c7dd200
	byte ClearSceneMethod;//[Offset: 0x7c, Size: 0x1] 0x7a9c7dd280
	bool bBasePassOutputsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 0x1] 0x7a9c7dd300
	bool bSelectiveBasePassOutputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d, Size: 0x1] 0x7a9c7dd380
	bool bDefaultParticleCutouts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d, Size: 0x1] 0x7a9c7dd400
	int GPUSimulationTextureSizeX;//[Offset: 0x80, Size: 0x4] 0x7a9c7f1890
	int GPUSimulationTextureSizeY;//[Offset: 0x84, Size: 0x4] 0x7a9c7f1900
	bool bGlobalClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x7a9c7dd480
	byte GBufferFormat;//[Offset: 0x89, Size: 0x1] 0x7a9c7dd500
	bool bUseGPUMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1] 0x7a9c7dd580
	bool bNvidiaAftermathEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1] 0x7a9c7dd600
	bool bInstancedStereo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8a, Size: 0x1] 0x7a9c7dd680
	bool bMultiView;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1] 0x7a9c7db600
	bool bMobileMultiView;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8a, Size: 0x1] 0x7a9c7db680
	bool bMobileMultiViewDirect;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1] 0x7a9c7db700
	bool bRoundRobinOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8a, Size: 0x1] 0x7a9c7db780
	bool bODSCapture;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8a, Size: 0x1] 0x7a9c7db800
	float WireframeCullThreshold;//[Offset: 0x8c, Size: 0x4] 0x7a9c7f1970
	bool bEnableRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7a9c7db900
	bool bSupportStationarySkylight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x7a9c7db980
	bool bSupportLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1] 0x7a9c7dba00
	bool bSupportPointLightWholeSceneShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1] 0x7a9c7dba80
	bool bSupportAtmosphericFog;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1] 0x7a9c7dbb00
	bool bSupportSkinCacheShaders;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 0x1] 0x7a9c7dbb80
	bool bMobileEnableStaticAndCSMShadowReceivers;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x90, Size: 0x1] 0x7a9c7dbc00
	bool bMobileEnableMovableLightCSMShaderCulling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x90, Size: 0x1] 0x7a9c7dbc80
	bool bMobileAllowDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91, Size: 0x1] 0x7a9c7dbd00
	bool bMobileAllowMovableDirectionalLights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x91, Size: 0x1] 0x7a9c7dbd80
	uint32 MobileNumDynamicPointLights;//[Offset: 0x94, Size: 0x4] 0x7a9c7f19e0
	bool bMobileDynamicPointLightsUseStaticBranch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x7a9c7dbe00
	bool bMobileAllowMovableSpotlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x98, Size: 0x1] 0x7a9c7dbe80
	float SkinCacheSceneMemoryLimitInMB;//[Offset: 0x9c, Size: 0x4] 0x7a9c7f1a50
	bool bGPUSkinLimit2BoneInfluences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7a9c7dbf00
	bool bSupportDepthOnlyIndexBuffers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x7a9c7dbf80
	bool bSupportReversedIndexBuffers;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1] 0x7a9c7dc000
	bool bSupportMaterialLayers;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1] 0x7a9c7dc080

--------------------------------
Class: RendererOverrideSettings.DeveloperSettings.Object
	bool bSupportAllShaderPermutations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7a9c7ddb00
	bool bForceRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7a9c7ddb80

--------------------------------
Class: ReplicationConnectionDriver.Object

--------------------------------
Class: Rig.Object
	TransformBase[] TransformBases;//[Offset: 0x30, Size: 0x10] 0x7a9c7dd980
	Node[] Nodes;//[Offset: 0x40, Size: 0x10] 0x7a9c7dda80

--------------------------------
Class: TransformBase
	FName Node;//[Offset: 0x0, Size: 0x8] 0x7a9ca0ecc0
	TransformBaseConstraint Constraints;//[Offset: 0x8, Size: 0x10] 0x7a9ca59980

--------------------------------
Class: TransformBaseConstraint
	RigTransformConstraint[] TransformConstraints;//[Offset: 0x0, Size: 0x10] 0x7a9ca59900

--------------------------------
Class: RigTransformConstraint
	byte TranformType;//[Offset: 0x0, Size: 0x1] 0x7a9ca59800
	FName ParentSpace;//[Offset: 0x4, Size: 0x8] 0x7a9ca0ed30
	float Weight;//[Offset: 0xc, Size: 0x4] 0x7a9ca0eda0

--------------------------------
Class: Node
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7a9ca0eb70
	FName ParentName;//[Offset: 0x8, Size: 0x8] 0x7a9ca0ebe0
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x7a9ca59700
	FString DisplayName;//[Offset: 0x40, Size: 0x10] 0x7a9ca0ec50
	bool bAdvanced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7a9ca59780

--------------------------------
Class: RotatingMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationRate;//[Offset: 0x134, Size: 0xc] 0x7a9c7dd780
	Vector PivotTranslation;//[Offset: 0x140, Size: 0xc] 0x7a9c7dd800
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1] 0x7a9c7dd880

--------------------------------
Class: RVOAvoidanceInterface.Interface.Object

--------------------------------
Class: Scene.Object

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x340, Size: 0x8] 0x7a9c7df780
	void OnInterpToggle(bool bEnable);// 0xffffff8523219000 0x7a9c6cf2e0

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2f0, Size: 0x1] 0x7a9c7df100
	float FOVAngle;//[Offset: 0x2f4, Size: 0x4] 0x7a9c7f0ef0
	float OrthoWidth;//[Offset: 0x2f8, Size: 0x4] 0x7a9c7f0f60
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x300, Size: 0x8] 0x7a9c7df180
	byte CaptureSource;//[Offset: 0x308, Size: 0x1] 0x7a9c7df200
	byte CompositeMode;//[Offset: 0x309, Size: 0x1] 0x7a9c7df280
	PostProcessSettings PostProcessSettings;//[Offset: 0x310, Size: 0x530] 0x7a9c7df300
	float PostProcessBlendWeight;//[Offset: 0x840, Size: 0x4] 0x7a9c7f0fd0
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 0x1] 0x7a9c7df380
	Matrix CustomProjectionMatrix;//[Offset: 0x850, Size: 0x40] 0x7a9c7df400
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 0x1] 0x7a9c7df480
	Vector ClipPlaneBase;//[Offset: 0x894, Size: 0xc] 0x7a9c7df500
	Vector ClipPlaneNormal;//[Offset: 0x8a0, Size: 0xc] 0x7a9c7df580
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ac, Size: 0x1] 0x7a9c7df600
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8ac, Size: 0x1] 0x7a9c7df680
	void CaptureScene();// 0xffffff8523219000 0x7a9c6cf120
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0xffffff8523219000 0x7a9c6cf200

--------------------------------
Class: SceneCaptureComponentCube.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	TextureRenderTargetCube* TextureTarget;//[Offset: 0x2f0, Size: 0x8] 0x7a9c7def00
	TextureRenderTargetCube* TextureTargetLeft;//[Offset: 0x2f8, Size: 0x8] 0x7a9c7def80
	TextureRenderTargetCube* TextureTargetRight;//[Offset: 0x300, Size: 0x8] 0x7a9c7df000
	TextureRenderTarget2D* TextureTargetODS;//[Offset: 0x308, Size: 0x8] 0x7a9c7df080
	float IPD;//[Offset: 0x310, Size: 0x4] 0x7a9c7f0e80
	void CaptureScene();// 0xffffff8523219000 0x7a9c6cf040

--------------------------------
Class: TextureRenderTargetCube.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xc0, Size: 0x4] 0x7a9c7f8200
	LinearColor ClearColor;//[Offset: 0xc4, Size: 0x10] 0x7a9c81db80
	byte OverrideFormat;//[Offset: 0xd4, Size: 0x1] 0x7a9c81dc00
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd5, Size: 0x1] 0x7a9c81dc80
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd5, Size: 0x1] 0x7a9c81dd00

--------------------------------
Class: SceneCaptureCube.SceneCapture.Actor.Object
	SceneCaptureComponentCube* CaptureComponentCube;//[Offset: 0x340, Size: 0x8] 0x7a9c7dee00
	void OnInterpToggle(bool bEnable);// 0xffffff8523219000 0x7a9c6cef60

--------------------------------
Class: Selection.Object

--------------------------------
Class: ShadowMapTexture2D.Texture2D.Texture.Object
	byte ShadowmapFlags;//[Offset: 0xf0, Size: 0x1] 0x7a9c7de900

--------------------------------
Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1] 0x7a9c811d00
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1] 0x7a9c811d80
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x340, Size: 0x8] 0x7a9c811e00
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x348, Size: 0x8] 0x7a9c811e80
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x350, Size: 0x8] 0x7a9c811f00
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x358, Size: 0x8] 0x7a9c811f80
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x360, Size: 0x8] 0x7a9c812000
	void OnRep_ReplicatedPhysAsset();// 0xffffff8523219000 0x7a9c801900
	void OnRep_ReplicatedMesh();// 0xffffff8523219000 0x7a9c8019e0
	void OnRep_ReplicatedMaterial1();// 0xffffff8523219000 0x7a9c801ac0
	void OnRep_ReplicatedMaterial0();// 0xffffff8523219000 0x7a9c801ba0

--------------------------------
Class: SkeletalMeshSimplificationSettings.DeveloperSettings.Object
	FName SkeletalMeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x7a9c7f4920

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x330, Size: 0x8] 0x7a9cbbfc00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1] 0x7a9cbbfc80
	void OnRep_bEnabled();// 0xffffff8523219000 0x7a9cbd05c0

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x284, Size: 0x1] 0x7a9c816c00
	TextureCube* Cubemap;//[Offset: 0x288, Size: 0x8] 0x7a9c816c80
	float SourceCubemapAngle;//[Offset: 0x290, Size: 0x4] 0x7a9c7f5f00
	int CubemapResolution;//[Offset: 0x294, Size: 0x4] 0x7a9c7f5f70
	float SkyDistanceThreshold;//[Offset: 0x298, Size: 0x4] 0x7a9c7f5fe0
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1] 0x7a9c816d00
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 0x1] 0x7a9c816d80
	LinearColor LowerHemisphereColor;//[Offset: 0x2a0, Size: 0x10] 0x7a9c816e00
	float OcclusionMaxDistance;//[Offset: 0x2b0, Size: 0x4] 0x7a9c7f6050
	float Contrast;//[Offset: 0x2b4, Size: 0x4] 0x7a9c7f60c0
	float OcclusionExponent;//[Offset: 0x2b8, Size: 0x4] 0x7a9c7f6130
	float MinOcclusion;//[Offset: 0x2bc, Size: 0x4] 0x7a9c7f61a0
	Color OcclusionTint;//[Offset: 0x2c0, Size: 0x4] 0x7a9c816f00
	byte OcclusionCombineMode;//[Offset: 0x2c4, Size: 0x1] 0x7a9c816f80
	TextureCube* BlendDestinationCubemap;//[Offset: 0x368, Size: 0x8] 0x7a9c817000
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0xffffff8523219000 0x7a9c803dc0
	void SetOcclusionTint(out const Color InTint);// 0xffffff8523219000 0x7a9c803ea0
	void SetOcclusionExponent(float InOcclusionExponent);// 0xffffff8523219000 0x7a9c803f80
	void SetOcclusionContrast(float InOcclusionContrast);// 0xffffff8523219000 0x7a9c804060
	void SetMinOcclusion(float InMinOcclusion);// 0xffffff8523219000 0x7a9c804140
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0xffffff8523219000 0x7a9c804220
	void SetLightColor(LinearColor NewLightColor);// 0xffffff8523219000 0x7a9c804300
	void SetIntensity(float NewIntensity);// 0xffffff8523219000 0x7a9c8043e0
	void SetIndirectLightingIntensity(float NewIntensity);// 0xffffff8523219000 0x7a9c8044c0
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0xffffff8523219000 0x7a9c8045a0
	void SetCubemap(TextureCube* NewCubemap);// 0xffffff8523219000 0x7a9c804680
	void RecaptureSky();// 0xffffff8523219000 0x7a9c804760

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x88] 0x7a9c816b80

--------------------------------
Class: SlateTextureAtlasInterface.Interface.Object

--------------------------------
Class: SmokeTestCommandlet.Commandlet.Object

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1] 0x7a9c816580
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf8, Size: 0x1] 0x7a9c816600
	SoundNode* FirstNode;//[Offset: 0x100, Size: 0x8] 0x7a9c816680
	float VolumeMultiplier;//[Offset: 0x108, Size: 0x4] 0x7a9c7f5db0
	float PitchMultiplier;//[Offset: 0x10c, Size: 0x4] 0x7a9c7f5e20
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x110, Size: 0x2e8] 0x7a9c816700
	float SubtitlePriority;//[Offset: 0x3f8, Size: 0x4] 0x7a9c7f5e90

--------------------------------
Class: SoundNode.Object
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 0x10] 0x7a9c818180

--------------------------------
Class: SoundGroups.Object
	SoundGroup[] SoundGroupProfiles;//[Offset: 0x28, Size: 0x10] 0x7a9c816380

--------------------------------
Class: SoundGroup
	byte SoundGroup;//[Offset: 0x0, Size: 0x1] 0x7a9ca5f980
	FString DisplayName;//[Offset: 0x8, Size: 0x10] 0x7a9ca62f50
	bool bAlwaysDecompressOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7a9ca5fa00
	float DecompressedDuration;//[Offset: 0x1c, Size: 0x4] 0x7a9ca62fc0

--------------------------------
Class: SoundNodeAssetReferencer.SoundNode.Object

--------------------------------
Class: SoundNodeAttenuation.SoundNode.Object
	SoundAttenuation* AttenuationSettings;//[Offset: 0x38, Size: 0x8] 0x7a9c817f80
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x40, Size: 0x2e8] 0x7a9c818000
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 0x1] 0x7a9c818080

--------------------------------
Class: SoundNodeBranch.SoundNode.Object
	FName BoolParameterName;//[Offset: 0x38, Size: 0x8] 0x7a9c7f5b10

--------------------------------
Class: SoundNodeConcatenator.SoundNode.Object
	float[] InputVolume;//[Offset: 0x38, Size: 0x10] 0x7a9c817f00

--------------------------------
Class: SoundNodeDelay.SoundNode.Object
	float DelayMin;//[Offset: 0x38, Size: 0x4] 0x7a9c7f59c0
	float DelayMax;//[Offset: 0x3c, Size: 0x4] 0x7a9c7f5a30

--------------------------------
Class: SoundNodeDialoguePlayer.SoundNode.Object
	DialogueWaveParameter DialogueWaveParameter;//[Offset: 0x38, Size: 0x20] 0x7a9c817e00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7a9c817e80

--------------------------------
Class: DialogueWaveParameter
	DialogueWave* DialogueWave;//[Offset: 0x0, Size: 0x8] 0x7a9ca14980
	DialogueContext Context;//[Offset: 0x8, Size: 0x18] 0x7a9ca14b80

--------------------------------
Class: SoundNodeDistanceCrossFade.SoundNode.Object
	DistanceDatum[] CrossFadeInput;//[Offset: 0x38, Size: 0x10] 0x7a9c817d80

--------------------------------
Class: DistanceDatum
	float FadeInDistanceStart;//[Offset: 0x0, Size: 0x4] 0x7a9ca64370
	float FadeInDistanceEnd;//[Offset: 0x4, Size: 0x4] 0x7a9ca643e0
	float FadeOutDistanceStart;//[Offset: 0x8, Size: 0x4] 0x7a9ca64450
	float FadeOutDistanceEnd;//[Offset: 0xc, Size: 0x4] 0x7a9ca644c0
	float Volume;//[Offset: 0x10, Size: 0x4] 0x7a9ca64530

--------------------------------
Class: SoundNodeDoppler.SoundNode.Object
	float DopplerIntensity;//[Offset: 0x38, Size: 0x4] 0x7a9c7f58e0
	bool bUseSmoothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x7a9c817c80
	float SmoothingInterpSpeed;//[Offset: 0x40, Size: 0x4] 0x7a9c7f5950

--------------------------------
Class: SoundNodeEnveloper.SoundNode.Object
	float LoopStart;//[Offset: 0x38, Size: 0x4] 0x7a9c7f7240
	float LoopEnd;//[Offset: 0x3c, Size: 0x4] 0x7a9c7f72b0
	float DurationAfterLoop;//[Offset: 0x40, Size: 0x4] 0x7a9c7f7320
	int LoopCount;//[Offset: 0x44, Size: 0x4] 0x7a9c7f56b0
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7a9c817980
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x7a9c817a00
	DistributionFloatConstantCurve* VolumeInterpCurve;//[Offset: 0x50, Size: 0x8] 0x7a9c817a80
	DistributionFloatConstantCurve* PitchInterpCurve;//[Offset: 0x58, Size: 0x8] 0x7a9c817b00
	RuntimeFloatCurve VolumeCurve;//[Offset: 0x60, Size: 0x88] 0x7a9c817b80
	RuntimeFloatCurve PitchCurve;//[Offset: 0xe8, Size: 0x88] 0x7a9c817c00
	float PitchMin;//[Offset: 0x170, Size: 0x4] 0x7a9c7f5720
	float PitchMax;//[Offset: 0x174, Size: 0x4] 0x7a9c7f5790
	float VolumeMin;//[Offset: 0x178, Size: 0x4] 0x7a9c7f5800
	float VolumeMax;//[Offset: 0x17c, Size: 0x4] 0x7a9c7f5870

--------------------------------
Class: SoundNodeGroupControl.SoundNode.Object
	int[] GroupSizes;//[Offset: 0x38, Size: 0x10] 0x7a9c817900

--------------------------------
Class: SoundNodeLooping.SoundNode.Object
	int LoopCount;//[Offset: 0x38, Size: 0x4] 0x7a9c7f7160
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7a9c817880

--------------------------------
Class: SoundNodeMature.SoundNode.Object

--------------------------------
Class: SoundNodeMixer.SoundNode.Object
	float[] InputVolume;//[Offset: 0x38, Size: 0x10] 0x7a9c817800

--------------------------------
Class: SoundNodeModulator.SoundNode.Object
	float PitchMin;//[Offset: 0x38, Size: 0x4] 0x7a9c7f6f30
	float PitchMax;//[Offset: 0x3c, Size: 0x4] 0x7a9c7f6fa0
	float VolumeMin;//[Offset: 0x40, Size: 0x4] 0x7a9c7f7010
	float VolumeMax;//[Offset: 0x44, Size: 0x4] 0x7a9c7f7080

--------------------------------
Class: SoundNodeModulatorContinuous.SoundNode.Object
	ModulatorContinuousParams PitchModulationParams;//[Offset: 0x38, Size: 0x20] 0x7a9c817700
	ModulatorContinuousParams VolumeModulationParams;//[Offset: 0x58, Size: 0x20] 0x7a9c817780

--------------------------------
Class: ModulatorContinuousParams
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7a9ca640d0
	float Default;//[Offset: 0x8, Size: 0x4] 0x7a9ca64140
	float MinInput;//[Offset: 0xc, Size: 0x4] 0x7a9ca641b0
	float MaxInput;//[Offset: 0x10, Size: 0x4] 0x7a9ca64220
	float MinOutput;//[Offset: 0x14, Size: 0x4] 0x7a9ca64290
	float MaxOutput;//[Offset: 0x18, Size: 0x4] 0x7a9ca64300
	byte ParamMode;//[Offset: 0x1c, Size: 0x1] 0x7a9ca5f800

--------------------------------
Class: SoundNodeOscillator.SoundNode.Object
	bool bModulateVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7a9c817600
	bool bModulatePitch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7a9c817680
	float AmplitudeMin;//[Offset: 0x3c, Size: 0x4] 0x7a9c7f6bb0
	float AmplitudeMax;//[Offset: 0x40, Size: 0x4] 0x7a9c7f6c20
	float FrequencyMin;//[Offset: 0x44, Size: 0x4] 0x7a9c7f6c90
	float FrequencyMax;//[Offset: 0x48, Size: 0x4] 0x7a9c7f6d00
	float OffsetMin;//[Offset: 0x4c, Size: 0x4] 0x7a9c7f6d70
	float OffsetMax;//[Offset: 0x50, Size: 0x4] 0x7a9c7f6de0
	float CenterMin;//[Offset: 0x54, Size: 0x4] 0x7a9c7f6e50
	float CenterMax;//[Offset: 0x58, Size: 0x4] 0x7a9c7f6ec0

--------------------------------
Class: SoundNodeParamCrossFade.SoundNodeDistanceCrossFade.SoundNode.Object
	FName ParamName;//[Offset: 0x48, Size: 0x8] 0x7a9c7f6b40

--------------------------------
Class: SoundNodeQualityLevel.SoundNode.Object

--------------------------------
Class: SoundNodeRandom.SoundNode.Object
	float[] Weights;//[Offset: 0x38, Size: 0x10] 0x7a9c819400
	int PreselectAtLevelLoad;//[Offset: 0x48, Size: 0x4] 0x7a9c7f6a60
	bool bShouldExcludeFromBranchCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x7a9c819480
	bool bSoundCueExcludedFromBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1] 0x7a9c817400
	bool bRandomizeWithoutReplacement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1] 0x7a9c817480
	bool[] HasBeenUsed;//[Offset: 0x50, Size: 0x10] 0x7a9c817580
	int NumRandomUsed;//[Offset: 0x60, Size: 0x4] 0x7a9c7f6ad0

--------------------------------
Class: SoundNodeSoundClass.SoundNode.Object
	SoundClass* SoundClassOverride;//[Offset: 0x38, Size: 0x8] 0x7a9c819380

--------------------------------
Class: SoundNodeSwitch.SoundNode.Object
	FName IntParameterName;//[Offset: 0x38, Size: 0x8] 0x7a9c7f6980

--------------------------------
Class: SoundNodeWaveParam.SoundNode.Object
	FName WaveParameterName;//[Offset: 0x38, Size: 0x8] 0x7a9c7f6910

--------------------------------
Class: SoundNodeWavePlayer.SoundNodeAssetReferencer.SoundNode.Object
	SoundWave* SoundWaveAssetPtr;//[Offset: 0x38, Size: 0x28] 0x7a9c819180
	SoundWave* SoundWave;//[Offset: 0x60, Size: 0x8] 0x7a9c819200
	bool bLooping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x7a9c819300

--------------------------------
Class: SoundWaveProcedural.SoundWave.SoundBase.Object

--------------------------------
Class: SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x191, Size: 0x1] 0x7a9c818680

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x338, Size: 0x8] 0x7a9c818600

--------------------------------
Class: SphereReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadius;//[Offset: 0x2d0, Size: 0x4] 0x7a9c7f6590
	float CaptureDistanceScale;//[Offset: 0x2d4, Size: 0x4] 0x7a9c7f6600
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x2d8, Size: 0x8] 0x7a9c818580

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x578, Size: 0x60] 0x7a9cb51480
	InterpCurveVector SplineInfo;//[Offset: 0x5d8, Size: 0x18] 0x7a9cb51500
	InterpCurveQuat SplineRotInfo;//[Offset: 0x5f0, Size: 0x18] 0x7a9cb51580
	InterpCurveVector SplineScaleInfo;//[Offset: 0x608, Size: 0x18] 0x7a9cb51600
	InterpCurveFloat SplineReparamTable;//[Offset: 0x620, Size: 0x18] 0x7a9cb51680
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1] 0x7a9cb51700
	int ReparamStepsPerSegment;//[Offset: 0x63c, Size: 0x4] 0x7a9cb31660
	float Duration;//[Offset: 0x640, Size: 0x4] 0x7a9cb316d0
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 0x1] 0x7a9cb51780
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x645, Size: 0x1] 0x7a9cb51800
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x646, Size: 0x1] 0x7a9cb51880
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x647, Size: 0x1] 0x7a9cb51900
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 0x1] 0x7a9cb51980
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x649, Size: 0x1] 0x7a9cb51a00
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64a, Size: 0x1] 0x7a9cb51a80
	float LoopPosition;//[Offset: 0x64c, Size: 0x4] 0x7a9cb31740
	Vector DefaultUpVector;//[Offset: 0x650, Size: 0xc] 0x7a9cb51b00
	void UpdateSpline();// 0xffffff8523219000 0x7a9cb406a0
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0xffffff8523219000 0x7a9cb40780
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0xffffff8523219000 0x7a9cb40860
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0xffffff8523219000 0x7a9cb40940
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0xffffff8523219000 0x7a9cb40a20
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0xffffff8523219000 0x7a9cb40b00
	void SetSplineWorldPoints(out const Vector[] Points);// 0xffffff8523219000 0x7a9cb40be0
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0xffffff8523219000 0x7a9cb40cc0
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0xffffff8523219000 0x7a9cb40da0
	void SetSplineLocalPoints(out const Vector[] Points);// 0xffffff8523219000 0x7a9cb40e80
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0xffffff8523219000 0x7a9cb40f60
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0xffffff8523219000 0x7a9cb41040
	void SetDrawDebug(bool bShow);// 0xffffff8523219000 0x7a9cb41120
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0xffffff8523219000 0x7a9cb41200
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0xffffff8523219000 0x7a9cb412e0
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0xffffff8523219000 0x7a9cb413c0
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0xffffff8523219000 0x7a9cb414a0
	bool IsClosedLoop();// 0xffffff8523219000 0x7a9cb41580
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0xffffff8523219000 0x7a9cb41660
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0xffffff8523219000 0x7a9cb41740
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0xffffff8523219000 0x7a9cb41820
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0xffffff8523219000 0x7a9cb41900
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0xffffff8523219000 0x7a9cb419e0
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0xffffff8523219000 0x7a9cb41ac0
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0xffffff8523219000 0x7a9cb41ba0
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0xffffff8523219000 0x7a9cb41c80
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xffffff8523219000 0x7aa098e780
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098e860
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098e940
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0xffffff8523219000 0x7aa098ea20
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0xffffff8523219000 0x7aa098eb00
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0xffffff8523219000 0x7aa098ebe0
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xffffff8523219000 0x7aa098ecc0
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098eda0
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098ee80
	byte GetSplinePointType(int PointIndex);// 0xffffff8523219000 0x7aa098ef60
	float GetSplineLength();// 0xffffff8523219000 0x7aa098f040
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0xffffff8523219000 0x7aa098f120
	Vector GetScaleAtSplinePoint(int PointIndex);// 0xffffff8523219000 0x7aa098f200
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0xffffff8523219000 0x7aa098f2e0
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xffffff8523219000 0x7aa098f3c0
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098f4a0
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098f580
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xffffff8523219000 0x7aa098f660
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098f740
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098f820
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xffffff8523219000 0x7aa098f900
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098f9e0
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098fac0
	int GetNumberOfSplinePoints();// 0xffffff8523219000 0x7aa098fba0
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xffffff8523219000 0x7aa098fc80
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098fd60
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098fe40
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098ff20
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0xffffff8523219000 0x7aa098caa0
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098cb80
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0xffffff8523219000 0x7aa098cc60
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0xffffff8523219000 0x7aa098cd40
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xffffff8523219000 0x7aa098ce20
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098cf00
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098cfe0
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0xffffff8523219000 0x7aa098d0c0
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098d1a0
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098d280
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0xffffff8523219000 0x7aa098d360
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098d440
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0xffffff8523219000 0x7aa098d520
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098d600
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098d6e0
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098d7c0
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098d8a0
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0xffffff8523219000 0x7aa098d980
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xffffff8523219000 0x7aa098da60
	void ClearSplinePoints(bool bUpdateSpline);// 0xffffff8523219000 0x7aa098db40
	void AddSplineWorldPoint(out const Vector Position);// 0xffffff8523219000 0x7aa098dc20
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0xffffff8523219000 0x7aa098dd00
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0xffffff8523219000 0x7aa098dde0
	void AddSplineLocalPoint(out const Vector Position);// 0xffffff8523219000 0x7aa098dec0
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0xffffff8523219000 0x7aa098dfa0
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0xffffff8523219000 0x7aa098e080

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18] 0x7a9cb00c80
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18] 0x7a9cb00d00
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18] 0x7a9cb00d80
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18] 0x7a9cb00e00

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10] 0x7af81c4b80
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7af81c4c00
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x7af958eb70

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4] 0x7af958ebe0
	Quat OutVal;//[Offset: 0x10, Size: 0x10] 0x7af81c4c80
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10] 0x7af81c4d00
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10] 0x7af81c4d80
	byte InterpMode;//[Offset: 0x40, Size: 0x1] 0x7af81c4e00

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4] 0x7a9ca63c00
	Vector Position;//[Offset: 0x4, Size: 0xc] 0x7a9cb00880
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc] 0x7a9cb00900
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc] 0x7a9cb00980
	Rotator Rotation;//[Offset: 0x28, Size: 0xc] 0x7a9cb00a00
	Vector Scale;//[Offset: 0x34, Size: 0xc] 0x7a9cb00a80
	byte Type;//[Offset: 0x40, Size: 0x1] 0x7a9cb00b00

--------------------------------
Class: SplineMeshActor.Actor.Object
	SplineMeshComponent* SplineMeshComponent;//[Offset: 0x330, Size: 0x8] 0x7a9c818500

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x610, Size: 0x58] 0x7a9c81ae80
	Vector SplineUpDir;//[Offset: 0x668, Size: 0xc] 0x7a9c81af00
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x674, Size: 0x1] 0x7a9c81af80
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x674, Size: 0x1] 0x7a9c81b000
	byte ForwardAxis;//[Offset: 0x675, Size: 0x1] 0x7a9c81b080
	float SplineBoundaryMin;//[Offset: 0x678, Size: 0x4] 0x7a9c7f7e10
	float SplineBoundaryMax;//[Offset: 0x67c, Size: 0x4] 0x7a9c7f7e80
	BodySetup* BodySetup;//[Offset: 0x680, Size: 0x8] 0x7a9c81b100
	Guid CachedMeshBodySetupGuid;//[Offset: 0x688, Size: 0x10] 0x7a9c81b180
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x698, Size: 0x1] 0x7a9c81b200
	void UpdateMesh();// 0xffffff8523219000 0x7a9c8058e0
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0xffffff8523219000 0x7a9c8059c0
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0xffffff8523219000 0x7a9c805aa0
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0xffffff8523219000 0x7a9c805b80
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0xffffff8523219000 0x7a9c805c60
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0xffffff8523219000 0x7a9c805d40
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0xffffff8523219000 0x7a9c805e20
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0xffffff8523219000 0x7a9c805f00
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0xffffff8523219000 0x7a9c805fe0
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0xffffff8523219000 0x7a9c8060c0
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0xffffff8523219000 0x7a9c8061a0
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0xffffff8523219000 0x7a9c806280
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0xffffff8523219000 0x7a9c806360
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0xffffff8523219000 0x7a9c806440
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0xffffff8523219000 0x7a9c806520
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0xffffff8523219000 0x7a9c806600
	Vector GetStartTangent();// 0xffffff8523219000 0x7a9c8066e0
	Vector2D GetStartScale();// 0xffffff8523219000 0x7a9c8067c0
	float GetStartRoll();// 0xffffff8523219000 0x7a9c8068a0
	Vector GetStartPosition();// 0xffffff8523219000 0x7a9c806980
	Vector2D GetStartOffset();// 0xffffff8523219000 0x7a9c806a60
	Vector GetSplineUpDir();// 0xffffff8523219000 0x7a9c806b40
	byte GetForwardAxis();// 0xffffff8523219000 0x7a9c806c20
	Vector GetEndTangent();// 0xffffff8523219000 0x7a9c806d00
	Vector2D GetEndScale();// 0xffffff8523219000 0x7a9c806de0
	float GetEndRoll();// 0xffffff8523219000 0x7a9c806ec0
	Vector GetEndPosition();// 0xffffff8523219000 0x7a9c806fa0
	Vector2D GetEndOffset();// 0xffffff8523219000 0x7a9c807080
	float GetBoundaryMin();// 0xffffff8523219000 0x7a9c807160
	float GetBoundaryMax();// 0xffffff8523219000 0x7a9c807240

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc] 0x7a9cb00280
	Vector StartTangent;//[Offset: 0xc, Size: 0xc] 0x7a9cb00300
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8] 0x7a9cb00380
	float StartRoll;//[Offset: 0x20, Size: 0x4] 0x7a9ca63b20
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8] 0x7a9cb00400
	Vector EndPos;//[Offset: 0x2c, Size: 0xc] 0x7a9cb00480
	Vector EndTangent;//[Offset: 0x38, Size: 0xc] 0x7a9cb00500
	Vector2D EndScale;//[Offset: 0x44, Size: 0x8] 0x7a9cb00580
	float EndRoll;//[Offset: 0x4c, Size: 0x4] 0x7a9ca63b90
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8] 0x7a9cb00600

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x258, Size: 0x4] 0x7a9c7f7940
	Vector SocketOffset;//[Offset: 0x25c, Size: 0xc] 0x7a9c81a680
	Vector TargetOffset;//[Offset: 0x268, Size: 0xc] 0x7a9c81a700
	float ProbeSize;//[Offset: 0x274, Size: 0x4] 0x7a9c7f79b0
	byte ProbeChannel;//[Offset: 0x278, Size: 0x1] 0x7a9c81a800
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x279, Size: 0x1] 0x7a9c81a880
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x279, Size: 0x1] 0x7a9c81a900
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x279, Size: 0x1] 0x7a9c81a980
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x279, Size: 0x1] 0x7a9c81aa00
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x279, Size: 0x1] 0x7a9c81aa80
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x279, Size: 0x1] 0x7a9c81ab00
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x279, Size: 0x1] 0x7a9c81ab80
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x279, Size: 0x1] 0x7a9c81ac00
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27a, Size: 0x1] 0x7a9c81ac80
	float CameraLagSpeed;//[Offset: 0x27c, Size: 0x4] 0x7a9c7f7a20
	float CameraRotationLagSpeed;//[Offset: 0x280, Size: 0x4] 0x7a9c7f7a90
	float CameraLagMaxTimeStep;//[Offset: 0x284, Size: 0x4] 0x7a9c7f7b00
	float CameraLagMaxDistance;//[Offset: 0x288, Size: 0x4] 0x7a9c7f7b70
	bool IsCollisionFixApplied();// 0xffffff8523219000 0x7a9c808e40
	Vector GetUnfixedCameraPosition();// 0xffffff8523219000 0x7a9c808f20
	Rotator GetTargetRotation();// 0xffffff8523219000 0x7a9c809000

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x330, Size: 0x8] 0x7a9cbf9600
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1] 0x7a9cbf9680
	enum NavigationGeometryGatheringMode;//[Offset: 0x339, Size: 0x1] 0x7a9cbf9780
	void SetMobility(byte InMobility);// 0xffffff8523219000 0x7a9cbd8660

--------------------------------
Class: StereoLayerComponent.SceneComponent.ActorComponent.Object
	bool bLiveTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1] 0x7a9c81d300
	bool bSupportsDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 0x1] 0x7a9c81d380
	bool bNoAlphaChannel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 0x1] 0x7a9c81d400
	Texture* Texture;//[Offset: 0x260, Size: 0x8] 0x7a9c81d480
	Texture* LeftTexture;//[Offset: 0x268, Size: 0x8] 0x7a9c81d500
	bool bQuadPreserveTextureRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1] 0x7a9c81d600
	Vector2D QuadSize;//[Offset: 0x274, Size: 0x8] 0x7a9c81d680
	Box2D UVRect;//[Offset: 0x27c, Size: 0x14] 0x7a9c81b600
	float CylinderRadius;//[Offset: 0x290, Size: 0x4] 0x7a9c7f8c80
	float CylinderOverlayArc;//[Offset: 0x294, Size: 0x4] 0x7a9c7f8cf0
	int CylinderHeight;//[Offset: 0x298, Size: 0x4] 0x7a9c7f8d60
	byte StereoLayerType;//[Offset: 0x29c, Size: 0x1] 0x7a9c81b680
	byte StereoLayerShape;//[Offset: 0x29d, Size: 0x1] 0x7a9c81b700
	int Priority;//[Offset: 0x2a0, Size: 0x4] 0x7a9c7f8dd0
	void SetUVRect(Box2D InUVRect);// 0xffffff8523219000 0x7a9c808040
	void SetTexture(Texture* InTexture);// 0xffffff8523219000 0x7a9c808120
	void SetQuadSize(Vector2D InQuadSize);// 0xffffff8523219000 0x7a9c808200
	void SetPriority(int InPriority);// 0xffffff8523219000 0x7a9c8082e0
	void MarkTextureForUpdate();// 0xffffff8523219000 0x7a9c8083c0
	Box2D GetUVRect();// 0xffffff8523219000 0x7a9c8084a0
	Texture* GetTexture();// 0xffffff8523219000 0x7a9c808580
	Vector2D GetQuadSize();// 0xffffff8523219000 0x7a9c808660
	int GetPriority();// 0xffffff8523219000 0x7a9c808740

--------------------------------
Class: StereoLayerFunctionLibrary.BlueprintFunctionLibrary.Object
	void ShowSplashScreen();// 0xffffff8523219000 0x7a9c807cc0
	void SetSplashScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0xffffff8523219000 0x7a9c807da0
	void HideSplashScreen();// 0xffffff8523219000 0x7a9c807e80
	void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);// 0xffffff8523219000 0x7a9c807f60

--------------------------------
Class: StringTable.Object

--------------------------------
Class: SubsystemBlueprintLibrary.BlueprintFunctionLibrary.Object
	LocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(PlayerController* PlayerController, class LocalPlayerSubsystem Class);// 0xffffff8523219000 0x7a9c807940
	LocalPlayerSubsystem* GetLocalPlayerSubsystem(Object* ContextObject, class LocalPlayerSubsystem Class);// 0xffffff8523219000 0x7a9c807a20
	GameInstanceSubsystem* GetGameInstanceSubsystem(Object* ContextObject, class GameInstanceSubsystem Class);// 0xffffff8523219000 0x7a9c807b00
	EngineSubsystem* GetEngineSubsystem(class EngineSubsystem Class);// 0xffffff8523219000 0x7a9c807be0

--------------------------------
Class: SystemTimeTimecodeProvider.TimecodeProvider.Object
	FrameRate FrameRate;//[Offset: 0x28, Size: 0x8] 0x7a9c81e700
	void SetFrameRate(out const FrameRate InFrameRate);// 0xffffff8523219000 0x7a9c8075c0

--------------------------------
Class: TargetPoint.Actor.Object

--------------------------------
Class: TextPropertyTestObject.Object
	FText DefaultedText;//[Offset: 0x28, Size: 0x18] 0x7a9c7f8970
	FText UndefaultedText;//[Offset: 0x40, Size: 0x18] 0x7a9c7f89e0
	FText TransientText;//[Offset: 0x58, Size: 0x18] 0x7a9c7f8a50

--------------------------------
Class: TextRenderActor.Actor.Object
	TextRenderComponent* TextRender;//[Offset: 0x330, Size: 0x8] 0x7a9c81e680

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x578, Size: 0x18] 0x7a9c7f8350
	MaterialInterface* TextMaterial;//[Offset: 0x590, Size: 0x8] 0x7a9c81de00
	Font* Font;//[Offset: 0x598, Size: 0x8] 0x7a9c81de80
	byte HorizontalAlignment;//[Offset: 0x5a0, Size: 0x1] 0x7a9c81df80
	byte VerticalAlignment;//[Offset: 0x5a1, Size: 0x1] 0x7a9c81e000
	Color TextRenderColor;//[Offset: 0x5a4, Size: 0x4] 0x7a9c81e080
	float XScale;//[Offset: 0x5a8, Size: 0x4] 0x7a9c7f83c0
	float YScale;//[Offset: 0x5ac, Size: 0x4] 0x7a9c7f8430
	float WorldSize;//[Offset: 0x5b0, Size: 0x4] 0x7a9c7f84a0
	float InvDefaultSize;//[Offset: 0x5b4, Size: 0x4] 0x7a9c7f8510
	float HorizSpacingAdjust;//[Offset: 0x5b8, Size: 0x4] 0x7a9c7f8580
	float VertSpacingAdjust;//[Offset: 0x5bc, Size: 0x4] 0x7a9c7f85f0
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c0, Size: 0x1] 0x7a9c81e180
	void SetYScale(float Value);// 0xffffff8523219000 0x7a9c80a340
	void SetXScale(float Value);// 0xffffff8523219000 0x7a9c80a420
	void SetWorldSize(float Value);// 0xffffff8523219000 0x7a9c80a500
	void SetVertSpacingAdjust(float Value);// 0xffffff8523219000 0x7a9c80a5e0
	void SetVerticalAlignment(byte Value);// 0xffffff8523219000 0x7a9c80a6c0
	void SetTextRenderColor(Color Value);// 0xffffff8523219000 0x7a9c80a7a0
	void SetTextMaterial(MaterialInterface* Material);// 0xffffff8523219000 0x7a9c80a880
	void SetText(FString Value);// 0xffffff8523219000 0x7a9c80a960
	void SetHorizSpacingAdjust(float Value);// 0xffffff8523219000 0x7a9c80aa40
	void SetHorizontalAlignment(byte Value);// 0xffffff8523219000 0x7a9c80ab20
	void SetFont(Font* Value);// 0xffffff8523219000 0x7a9c80ac00
	void K2_SetText(out const FText Value);// 0xffffff8523219000 0x7a9c80ace0
	Vector GetTextWorldSize();// 0xffffff8523219000 0x7a9c807400
	Vector GetTextLocalSize();// 0xffffff8523219000 0x7a9c8074e0

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0xc0, Size: 0x1] 0x7a9c81dd80

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xf8, Size: 0x98] 0x7a9c81f480
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 0x1] 0x7a9c81f500
	void Stop();// 0xffffff8523219000 0x7a9c80c8e0
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0xffffff8523219000 0x7a9c80c9c0
	void SetTimelineLengthMode(byte NewLengthMode);// 0xffffff8523219000 0x7a9c8090e0
	void SetTimelineLength(float NewLength);// 0xffffff8523219000 0x7a9c8091c0
	void SetPlayRate(float NewRate);// 0xffffff8523219000 0x7a9c8092a0
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0xffffff8523219000 0x7a9c809380
	void SetNewTime(float NewTime);// 0xffffff8523219000 0x7a9c809460
	void SetLooping(bool bNewLooping);// 0xffffff8523219000 0x7a9c809540
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0xffffff8523219000 0x7a9c809620
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0xffffff8523219000 0x7a9c809700
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0xffffff8523219000 0x7a9c8097e0
	void ReverseFromEnd();// 0xffffff8523219000 0x7a9c8098c0
	void Reverse();// 0xffffff8523219000 0x7a9c8099a0
	void PlayFromStart();// 0xffffff8523219000 0x7a9c809a80
	void Play();// 0xffffff8523219000 0x7a9c809b60
	void OnRep_Timeline();// 0xffffff8523219000 0x7a9c809c40
	bool IsReversing();// 0xffffff8523219000 0x7a9c809d20
	bool IsPlaying();// 0xffffff8523219000 0x7a9c809e00
	bool IsLooping();// 0xffffff8523219000 0x7a9c809ee0
	float GetTimelineLength();// 0xffffff8523219000 0x7a9c809fc0
	float GetPlayRate();// 0xffffff8523219000 0x7a9c80a0a0
	float GetPlaybackPosition();// 0xffffff8523219000 0x7a9c80a180
	bool GetIgnoreTimeDilation();// 0xffffff8523219000 0x7a9c80a260

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1] 0x7a9cb03500
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7a9cb03580
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7a9cb03600
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7a9cb03680
	float Length;//[Offset: 0x4, Size: 0x4] 0x7a9ca65db0
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x7a9ca65e20
	float Position;//[Offset: 0xc, Size: 0x4] 0x7a9ca65e90
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10] 0x7a9cb03800
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10] 0x7a9cb03a80
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10] 0x7a9cb03d00
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10] 0x7a9cb03f80
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10] 0x7a9cb04000
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10] 0x7a9cb04080
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8] 0x7a9cb04100
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8] 0x7a9ca66210
	Property* DirectionProperty;//[Offset: 0x90, Size: 0x8] 0x7a9cb04180

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4] 0x7a9ca65f00
	delegate EventFunc;//[Offset: 0x4, Size: 0x10] 0x7a9cb03700

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8] 0x7a9cb03880
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x7a9cb03900
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x7a9ca65f70
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8] 0x7a9ca65fe0
	StructProperty* VectorProperty;//[Offset: 0x28, Size: 0x8] 0x7a9cb03980

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8] 0x7a9cb03b00
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x7a9cb03b80
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x7a9ca66050
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8] 0x7a9ca660c0
	FloatProperty* FloatProperty;//[Offset: 0x28, Size: 0x8] 0x7a9cb03c00

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8] 0x7a9cb03d80
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x7a9cb03e00
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x7a9ca66130
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8] 0x7a9ca661a0
	StructProperty* LinearColorProperty;//[Offset: 0x28, Size: 0x8] 0x7a9cb03e80

--------------------------------
Class: TriggerBase.Actor.Object
	ShapeComponent* CollisionComponent;//[Offset: 0x330, Size: 0x8] 0x7a9c81ea00

--------------------------------
Class: TriggerBox.TriggerBase.Actor.Object

--------------------------------
Class: TriggerCapsule.TriggerBase.Actor.Object

--------------------------------
Class: TriggerSphere.TriggerBase.Actor.Object

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: TwitterIntegrationBase.PlatformInterfaceBase.Object
	bool TwitterRequest(FString URL, out const FString[] ParamKeysAndValues, byte RequestMethod, int AccountIndex);// 0xffffff8523219000 0x7a9c80c2c0
	bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);// 0xffffff8523219000 0x7a9c80c3a0
	void Init();// 0xffffff8523219000 0x7a9c80c480
	int GetNumAccounts();// 0xffffff8523219000 0x7a9c80c560
	FString GetAccountName(int AccountIndex);// 0xffffff8523219000 0x7a9c80c640
	bool CanShowTweetUI();// 0xffffff8523219000 0x7a9c80c720
	bool AuthorizeAccounts();// 0xffffff8523219000 0x7a9c80c800

--------------------------------
Class: UserDefinedEnum.Enum.Field.Object
	<FName,FText> DisplayNameMap;//[Offset: 0x60, Size: 0x50] 0x7a963db500

--------------------------------
Class: UserDefinedStruct.ScriptStruct.Struct.Field.Object
	byte Status;//[Offset: 0xa8, Size: 0x1] 0x7a9c81fe80
	Guid Guid;//[Offset: 0xac, Size: 0x10] 0x7a9c81ff00

--------------------------------
Class: UserInterfaceSettings.DeveloperSettings.Object
	enum RenderFocusRule;//[Offset: 0x38, Size: 0x1] 0x7a9c840c00
	<byte,HardwareCursorReference> HardwareCursors;//[Offset: 0x40, Size: 0x50] 0x7a963db3c0
	<byte,SoftClassPath> SoftwareCursors;//[Offset: 0x90, Size: 0x50] 0x7a963db460
	SoftClassPath DefaultCursor;//[Offset: 0xe0, Size: 0x18] 0x7a9c840f00
	SoftClassPath TextEditBeamCursor;//[Offset: 0xf8, Size: 0x18] 0x7a9c840f80
	SoftClassPath CrosshairsCursor;//[Offset: 0x110, Size: 0x18] 0x7a9c841000
	SoftClassPath HandCursor;//[Offset: 0x128, Size: 0x18] 0x7a9c841080
	SoftClassPath GrabHandCursor;//[Offset: 0x140, Size: 0x18] 0x7a9c81f800
	SoftClassPath GrabHandClosedCursor;//[Offset: 0x158, Size: 0x18] 0x7a9c81f880
	SoftClassPath SlashedCircleCursor;//[Offset: 0x170, Size: 0x18] 0x7a9c81f900
	float ApplicationScale;//[Offset: 0x188, Size: 0x4] 0x7a9c7face0
	enum UIScaleRule;//[Offset: 0x18c, Size: 0x1] 0x7a9c81fa00
	SoftClassPath CustomScalingRuleClass;//[Offset: 0x190, Size: 0x18] 0x7a9c81fa80
	RuntimeFloatCurve UIScaleCurve;//[Offset: 0x1a8, Size: 0x88] 0x7a9c81fb00
	bool bAllowHighDPIInGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x7a9c81fb80
	bool bLoadWidgetsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1] 0x7a9c81fc00
	Object*[] CursorClasses;//[Offset: 0x238, Size: 0x10] 0x7a9c81fd00
	class Object* CustomScalingRuleClassInstance;//[Offset: 0x248, Size: 0x8] 0x7a9c81fd80
	DPICustomScalingRule* CustomScalingRule;//[Offset: 0x250, Size: 0x8] 0x7a9c81fe00

--------------------------------
Class: HardwareCursorReference
	FName CursorPath;//[Offset: 0x0, Size: 0x8] 0x7a9ca659c0
	Vector2D HotSpot;//[Offset: 0x8, Size: 0x8] 0x7a9cb04d00

--------------------------------
Class: VectorFieldAnimated.VectorField.Object
	Texture2D* Texture;//[Offset: 0x48, Size: 0x8] 0x7a9c840900
	byte ConstructionOp;//[Offset: 0x50, Size: 0x1] 0x7a9c840980
	int VolumeSizeX;//[Offset: 0x54, Size: 0x4] 0x7a9c7fa880
	int VolumeSizeY;//[Offset: 0x58, Size: 0x4] 0x7a9c7fa8f0
	int VolumeSizeZ;//[Offset: 0x5c, Size: 0x4] 0x7a9c7fa960
	int SubImagesX;//[Offset: 0x60, Size: 0x4] 0x7a9c7fa9d0
	int SubImagesY;//[Offset: 0x64, Size: 0x4] 0x7a9c7faa40
	int FrameCount;//[Offset: 0x68, Size: 0x4] 0x7a9c7faab0
	float FramesPerSecond;//[Offset: 0x6c, Size: 0x4] 0x7a9c7fab20
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7a9c840a00
	VectorFieldStatic* NoiseField;//[Offset: 0x78, Size: 0x8] 0x7a9c840a80
	float NoiseScale;//[Offset: 0x80, Size: 0x4] 0x7a9c7fab90
	float NoiseMax;//[Offset: 0x84, Size: 0x4] 0x7a9c7fac00

--------------------------------
Class: VectorFieldStatic.VectorField.Object
	int SizeX;//[Offset: 0x48, Size: 0x4] 0x7a9c7fa5e0
	int SizeY;//[Offset: 0x4c, Size: 0x4] 0x7a9c7fa650
	int SizeZ;//[Offset: 0x50, Size: 0x4] 0x7a9c7fa6c0
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7a9c840680
	Vector4[] CPUData;//[Offset: 0xf0, Size: 0x10] 0x7a9c840780

--------------------------------
Class: VectorFieldComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VectorField* VectorField;//[Offset: 0x578, Size: 0x8] 0x7a9c840800
	float Intensity;//[Offset: 0x580, Size: 0x4] 0x7a9c7fa730
	float Tightness;//[Offset: 0x584, Size: 0x4] 0x7a9c7fa7a0
	bool bPreviewVectorField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x588, Size: 0x1] 0x7a9c840880
	void SetIntensity(float NewIntensity);// 0xffffff8523219000 0x7a9c80c1e0

--------------------------------
Class: VectorFieldVolume.Actor.Object
	VectorFieldComponent* VectorFieldComponent;//[Offset: 0x330, Size: 0x8] 0x7a9c840600

--------------------------------
Class: VirtualTexture.Object
	VirtualTextureSpace* Space;//[Offset: 0x28, Size: 0x8] 0x7a9c840500
	bool Rebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7a9c840580

--------------------------------
Class: VirtualTextureSpace.Object
	VirtualTextureLayer[] Layers;//[Offset: 0x28, Size: 0x10] 0x7a9c840400
	int TileSize;//[Offset: 0x38, Size: 0x4] 0x7a9c7fa340
	int BorderWidth;//[Offset: 0x3c, Size: 0x4] 0x7a9c7fa3b0
	int Size;//[Offset: 0x40, Size: 0x4] 0x7a9c7fa420
	int Dimensions;//[Offset: 0x44, Size: 0x4] 0x7a9c7fa490
	byte Format;//[Offset: 0x48, Size: 0x1] 0x7a9c840480
	int PoolSize;//[Offset: 0x4c, Size: 0x4] 0x7a9c7fa500

--------------------------------
Class: VirtualTextureLayer
	byte Format;//[Offset: 0x0, Size: 0x1] 0x7a9cb04b00
	bool bCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7a9cb04b80
	bool bHasAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7a9cb04c00
	byte CompressionSettings;//[Offset: 0x3, Size: 0x1] 0x7a9cb04c80

--------------------------------
Class: LightMapVirtualTexture.VirtualTexture.Object
	int LayerFlags;//[Offset: 0x58, Size: 0x4] 0x7a9c7fa570

--------------------------------
Class: LightMapVirtualTextureSpace.VirtualTextureSpace.Object

--------------------------------
Class: VisualLoggerAutomationTests.Object

--------------------------------
Class: VisualLoggerDebugSnapshotInterface.Interface.Object

--------------------------------
Class: VisualLoggerKismetLibrary.BlueprintFunctionLibrary.Object
	void RedirectVislog(Object* SourceOwner, Object* DestinationOwner);// 0xffffff8523219000 0x7a9c80bca0
	void LogText(Object* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog);// 0xffffff8523219000 0x7a9c80bd80
	void LogSegment(Object* WorldContextObject, const Vector SegmentStart, const Vector SegmentEnd, FString Text, LinearColor ObjectColor, const float Thickness, FName CategoryName, bool bAddToMessageLog);// 0xffffff8523219000 0x7a9c80be60
	void LogLocation(Object* WorldContextObject, Vector Location, FString Text, LinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog);// 0xffffff8523219000 0x7a9c80bf40
	void LogBox(Object* WorldContextObject, Box BoxShape, FString Text, LinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog);// 0xffffff8523219000 0x7a9c80c020
	void EnableRecording(bool bEnabled);// 0xffffff8523219000 0x7a9c80c100

--------------------------------
Class: VoiceChannel.Channel.Object

--------------------------------
Class: VOIPTalker.ActorComponent.Object
	VoiceSettings Settings;//[Offset: 0xf8, Size: 0x18] 0x7a9c841900
	void RegisterWithPlayerState(PlayerState* OwningState);// 0xffffff8523219000 0x7a9c80b840
	float GetVoiceLevel();// 0xffffff8523219000 0x7a9c80b920
	VOIPTalker* CreateTalkerForPlayer(PlayerState* OwningState);// 0xffffff8523219000 0x7a9c80ba00
	void BPOnTalkingEnd();// 0xffffff8523219000 0x7a9c80bae0
	void BPOnTalkingBegin(AudioComponent* AudioComponent);// 0xffffff8523219000 0x7a9c80bbc0

--------------------------------
Class: VoiceSettings
	SceneComponent* ComponentToAttachTo;//[Offset: 0x0, Size: 0x8] 0x7a9cb04980
	SoundAttenuation* AttenuationSettings;//[Offset: 0x8, Size: 0x8] 0x7a9cb04a00
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x10, Size: 0x8] 0x7a9cb04a80

--------------------------------
Class: VOIPStatics.BlueprintFunctionLibrary.Object
	void SetMicThreshold(float InThreshold);// 0xffffff8523219000 0x7a9c80b760

--------------------------------
Class: VolumetricLightmapDensityVolume.Volume.Brush.Actor.Object
	Int32Interval AllowedMipLevelRange;//[Offset: 0x368, Size: 0x8] 0x7a9c841880

--------------------------------
Class: Int32Interval
	int Min;//[Offset: 0x0, Size: 0x4] 0x7af958f970
	int Max;//[Offset: 0x4, Size: 0x4] 0x7af958f9e0

--------------------------------
Class: WindDirectionalSource.Info.Actor.Object
	WindDirectionalSourceComponent* Component;//[Offset: 0x330, Size: 0x8] 0x7a9c841800

--------------------------------
Class: WindDirectionalSourceComponent.SceneComponent.ActorComponent.Object
	float Strength;//[Offset: 0x258, Size: 0x4] 0x7a9c7fb680
	float Speed;//[Offset: 0x25c, Size: 0x4] 0x7a9c7fb6f0
	float MinGustAmount;//[Offset: 0x260, Size: 0x4] 0x7a9c7fb760
	float MaxGustAmount;//[Offset: 0x264, Size: 0x4] 0x7a9c7fb7d0
	float Radius;//[Offset: 0x268, Size: 0x4] 0x7a9c7fb840
	bool bPointWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1] 0x7a9c841600
	void SetWindType(enum InNewType);// 0xffffff8523219000 0x7a9c80b220
	void SetStrength(float InNewStrength);// 0xffffff8523219000 0x7a9c80b300
	void SetSpeed(float InNewSpeed);// 0xffffff8523219000 0x7a9c80b3e0
	void SetRadius(float InNewRadius);// 0xffffff8523219000 0x7a9c80b4c0
	void SetMinimumGustAmount(float InNewMinGust);// 0xffffff8523219000 0x7a9c80b5a0
	void SetMaximumGustAmount(float InNewMaxGust);// 0xffffff8523219000 0x7a9c80b680

--------------------------------
Class: HierarchicalLODSetup.Object
	HierarchicalSimplification[] HierarchicalLODSetup;//[Offset: 0x28, Size: 0x10] 0x7a9c844000
	MaterialInterface* OverrideBaseMaterial;//[Offset: 0x38, Size: 0x28] 0x7a9c844080

--------------------------------
Class: HierarchicalSimplification
	float TransitionScreenSize;//[Offset: 0x0, Size: 0x4] 0x7a9ca656b0
	float OverrideDrawDistance;//[Offset: 0x4, Size: 0x4] 0x7a9ca65720
	bool bUseOverrideDrawDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7a9cb05b80
	bool bAllowSpecificExclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7a9cb05c00
	bool bSimplifyMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x7a9cb05c80
	bool bOnlyGenerateClustersForVolumes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x7a9cb05d00
	bool bReusePreviousLevelClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1] 0x7a9cb05d80
	MeshProxySettings ProxySetting;//[Offset: 0xc, Size: 0x90] 0x7a9cb05e00
	MeshMergingSettings MergeSetting;//[Offset: 0x9c, Size: 0x88] 0x7a9cb05e80
	float DesiredBoundRadius;//[Offset: 0x124, Size: 0x4] 0x7a9ca65790
	float DesiredFillingPercentage;//[Offset: 0x128, Size: 0x4] 0x7a9ca65800
	int MinNumberOfActorsToBuild;//[Offset: 0x12c, Size: 0x4] 0x7a9ca65870

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 0x4] 0x7a9ca0ad50
	float VoxelSize;//[Offset: 0x4, Size: 0x4] 0x7a9ca0adc0
	MaterialProxySettings MaterialSettings;//[Offset: 0x8, Size: 0x70] 0x7a9ca51700
	float MergeDistance;//[Offset: 0x78, Size: 0x4] 0x7a9ca0ae30
	Color UnresolvedGeometryColor;//[Offset: 0x7c, Size: 0x4] 0x7a9ca51780
	float MaxRayCastDist;//[Offset: 0x80, Size: 0x4] 0x7a9ca0aea0
	float HardAngleThreshold;//[Offset: 0x84, Size: 0x4] 0x7a9ca0af10
	int LightMapResolution;//[Offset: 0x88, Size: 0x4] 0x7a9ca0af80
	byte NormalCalculationMethod;//[Offset: 0x8c, Size: 0x1] 0x7a9ca51880
	byte LandscapeCullingPrecision;//[Offset: 0x8d, Size: 0x1] 0x7a9ca51900
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e, Size: 0x1] 0x7a9ca51980
	bool bOverrideVoxelSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8e, Size: 0x1] 0x7a9ca51a00
	bool bOverrideTransferDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8e, Size: 0x1] 0x7a9ca51a80
	bool bUseHardAngleThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8e, Size: 0x1] 0x7a9ca51b00
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8e, Size: 0x1] 0x7a9ca51b80
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8e, Size: 0x1] 0x7a9ca51c00
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8e, Size: 0x1] 0x7a9ca51c80
	bool bAllowAdjacency;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8e, Size: 0x1] 0x7a9ca51d00
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8f, Size: 0x1] 0x7a9ca51d80
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8f, Size: 0x1] 0x7a9ca51e00
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8f, Size: 0x1] 0x7a9ca51e80
	bool bAllowVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8f, Size: 0x1] 0x7a9ca51f00
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8f, Size: 0x1] 0x7a9ca51f80

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 0x8] 0x7a9ca1e000
	float GutterSpace;//[Offset: 0x8, Size: 0x4] 0x7a9ca0a3b0
	float MetallicConstant;//[Offset: 0xc, Size: 0x4] 0x7a9ca0a420
	float RoughnessConstant;//[Offset: 0x10, Size: 0x4] 0x7a9ca0a490
	float SpecularConstant;//[Offset: 0x14, Size: 0x4] 0x7a9ca0a500
	float OpacityConstant;//[Offset: 0x18, Size: 0x4] 0x7a9ca0a570
	float OpacityMaskConstant;//[Offset: 0x1c, Size: 0x4] 0x7a9ca0a5e0
	float AmbientOcclusionConstant;//[Offset: 0x20, Size: 0x4] 0x7a9ca0a650
	byte TextureSizingType;//[Offset: 0x24, Size: 0x1] 0x7a9ca1e080
	byte MaterialMergeType;//[Offset: 0x25, Size: 0x1] 0x7a9ca1e100
	byte BlendMode;//[Offset: 0x26, Size: 0x1] 0x7a9ca1e200
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27, Size: 0x1] 0x7a9ca1e280
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27, Size: 0x1] 0x7a9ca1e300
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27, Size: 0x1] 0x7a9ca1e380
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27, Size: 0x1] 0x7a9ca1e400
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27, Size: 0x1] 0x7a9ca1e480
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27, Size: 0x1] 0x7a9ca1e500
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27, Size: 0x1] 0x7a9ca1e580
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27, Size: 0x1] 0x7a9ca1e600
	IntPoint DiffuseTextureSize;//[Offset: 0x28, Size: 0x8] 0x7a9ca1e680
	IntPoint NormalTextureSize;//[Offset: 0x30, Size: 0x8] 0x7a9ca1e700
	IntPoint MetallicTextureSize;//[Offset: 0x38, Size: 0x8] 0x7a9ca1c680
	IntPoint RoughnessTextureSize;//[Offset: 0x40, Size: 0x8] 0x7a9ca1c700
	IntPoint SpecularTextureSize;//[Offset: 0x48, Size: 0x8] 0x7a9ca1c780
	IntPoint EmissiveTextureSize;//[Offset: 0x50, Size: 0x8] 0x7a9ca1c800
	IntPoint OpacityTextureSize;//[Offset: 0x58, Size: 0x8] 0x7a9ca1c880
	IntPoint OpacityMaskTextureSize;//[Offset: 0x60, Size: 0x8] 0x7a9ca1c900
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x68, Size: 0x8] 0x7a9ca1c980

--------------------------------
Class: MeshMergingSettings
	int TargetLightMapResolution;//[Offset: 0x0, Size: 0x4] 0x7a9ca0aff0
	enum OutputUVs;//[Offset: 0x4, Size: 0x1] 0x7a9ca52100
	MaterialProxySettings MaterialSettings;//[Offset: 0xc, Size: 0x70] 0x7a9ca50080
	int GutterSize;//[Offset: 0x7c, Size: 0x4] 0x7a9ca0b060
	int SpecificLOD;//[Offset: 0x80, Size: 0x4] 0x7a9ca0b0d0
	enum LODSelectionType;//[Offset: 0x84, Size: 0x1] 0x7a9ca50180
	bool bGenerateLightMapUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 0x1] 0x7a9ca50200
	bool bComputedLightMapResolution;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85, Size: 0x1] 0x7a9ca50280
	bool bPivotPointAtZero;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x85, Size: 0x1] 0x7a9ca50300
	bool bMergePhysicsData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x85, Size: 0x1] 0x7a9ca50380
	bool bMergeMaterials;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x85, Size: 0x1] 0x7a9ca50400
	bool bBakeVertexDataToMesh;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x85, Size: 0x1] 0x7a9ca50480
	bool bUseVertexDataForBakingMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x85, Size: 0x1] 0x7a9ca50500
	bool bUseTextureBinning;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x85, Size: 0x1] 0x7a9ca50580
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86, Size: 0x1] 0x7a9ca50600
	bool bMergeEquivalentMaterials;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86, Size: 0x1] 0x7a9ca50680
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86, Size: 0x1] 0x7a9ca50700
	bool bIncludeImposters;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86, Size: 0x1] 0x7a9ca50780
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x86, Size: 0x1] 0x7a9ca50800

--------------------------------
Class: DmgTypeBP_Environmental_C.DamageType.Object

--------------------------------
Class: MaterialExpressionSpriteTextureSampler.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bSampleAdditionalTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1] 0x7a9cb0d280
	int AdditionalSlotIndex;//[Offset: 0xf8, Size: 0x4] 0x7a9ca6a570
	FText SlotDisplayName;//[Offset: 0x100, Size: 0x18] 0x7a9ca6a5e0

--------------------------------
Class: PaperCharacter.Character.Pawn.Actor.Object
	PaperFlipbookComponent* Sprite;//[Offset: 0x748, Size: 0x8] 0x7a9cb21500

--------------------------------
Class: PaperFlipbookComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperFlipbook* SourceFlipbook;//[Offset: 0x5a0, Size: 0x8] 0x7a9cb29600
	MaterialInterface* Material;//[Offset: 0x5a8, Size: 0x8] 0x7a9cb29680
	float PlayRate;//[Offset: 0x5b0, Size: 0x4] 0x7a9ca6e940
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b4, Size: 0x1] 0x7a9cb29700
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b4, Size: 0x1] 0x7a9cb29780
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b4, Size: 0x1] 0x7a9cb29800
	float AccumulatedTime;//[Offset: 0x5b8, Size: 0x4] 0x7a9ca6e9b0
	int CachedFrameIndex;//[Offset: 0x5bc, Size: 0x4] 0x7a9ca6ea20
	LinearColor SpriteColor;//[Offset: 0x5c0, Size: 0x10] 0x7a9cb29880
	BodySetup* CachedBodySetup;//[Offset: 0x5d0, Size: 0x8] 0x7a9cb29900
	delegate OnFinishedPlaying;//[Offset: 0x5d8, Size: 0x10] 0x7a9cb29980
	void Stop();// 0xffffff8523219000 0x7aa098b300
	void SetSpriteColor(LinearColor NewColor);// 0xffffff8523219000 0x7aa098b3e0
	void SetPlayRate(float NewRate);// 0xffffff8523219000 0x7aa098b4c0
	void SetPlaybackPositionInFrames(int NewFramePosition, bool bFireEvents);// 0xffffff8523219000 0x7aa098b5a0
	void SetPlaybackPosition(float NewPosition, bool bFireEvents);// 0xffffff8523219000 0x7aa098b680
	void SetNewTime(float NewTime);// 0xffffff8523219000 0x7aa098b760
	void SetLooping(bool bNewLooping);// 0xffffff8523219000 0x7aa098b840
	bool SetFlipbook(PaperFlipbook* NewFlipbook);// 0xffffff8523219000 0x7aa098b920
	void ReverseFromEnd();// 0xffffff8523219000 0x7aa098ba00
	void Reverse();// 0xffffff8523219000 0x7aa098bae0
	void PlayFromStart();// 0xffffff8523219000 0x7aa098bbc0
	void Play();// 0xffffff8523219000 0x7aa098bca0
	void OnRep_SourceFlipbook(PaperFlipbook* OldFlipbook);// 0xffffff8523219000 0x7aa098bd80
	bool IsReversing();// 0xffffff8523219000 0x7aa098be60
	bool IsPlaying();// 0xffffff8523219000 0x7aa098bf40
	bool IsLooping();// 0xffffff8523219000 0x7aa098c020
	float GetPlayRate();// 0xffffff8523219000 0x7aa098c100
	int GetPlaybackPositionInFrames();// 0xffffff8523219000 0x7aa098c1e0
	float GetPlaybackPosition();// 0xffffff8523219000 0x7aa098c2c0
	int GetFlipbookLengthInFrames();// 0xffffff8523219000 0x7aa098c3a0
	float GetFlipbookLength();// 0xffffff8523219000 0x7aa098c480
	float GetFlipbookFramerate();// 0xffffff8523219000 0x7aa098c560
	PaperFlipbook* GetFlipbook();// 0xffffff8523219000 0x7aa098c640

--------------------------------
Class: PaperFlipbook.Object
	float FramesPerSecond;//[Offset: 0x28, Size: 0x4] 0x7a9ca6c100
	PaperFlipbookKeyFrame[] KeyFrames;//[Offset: 0x30, Size: 0x10] 0x7a9cb21100
	MaterialInterface* DefaultMaterial;//[Offset: 0x40, Size: 0x8] 0x7a9cb21180
	byte CollisionSource;//[Offset: 0x48, Size: 0x1] 0x7a9cb21200
	bool IsValidKeyFrameIndex(int Index);// 0xffffff8523219000 0x7aa0984300
	float GetTotalDuration();// 0xffffff8523219000 0x7aa09843e0
	PaperSprite* GetSpriteAtTime(float Time, bool bClampToEnds);// 0xffffff8523219000 0x7aa09844c0
	PaperSprite* GetSpriteAtFrame(int FrameIndex);// 0xffffff8523219000 0x7aa09845a0
	int GetNumKeyFrames();// 0xffffff8523219000 0x7aa0984680
	int GetNumFrames();// 0xffffff8523219000 0x7aa0984760
	int GetKeyFrameIndexAtTime(float Time, bool bClampToEnds);// 0xffffff8523219000 0x7aa0984840

--------------------------------
Class: PaperFlipbookKeyFrame
	PaperSprite* Sprite;//[Offset: 0x0, Size: 0x8] 0x7aa089ae00
	int FrameRun;//[Offset: 0x8, Size: 0x4] 0x7aa083a420

--------------------------------
Class: PaperSprite.Object
	Vector2D SourceUV;//[Offset: 0x38, Size: 0x8] 0x7a9cb2c380
	Vector2D SourceDimension;//[Offset: 0x40, Size: 0x8] 0x7a9cb2c400
	Texture2D* SourceTexture;//[Offset: 0x48, Size: 0x8] 0x7a9cb2c480
	Texture*[] AdditionalSourceTextures;//[Offset: 0x50, Size: 0x10] 0x7a9cb2c580
	Vector2D BakedSourceUV;//[Offset: 0x60, Size: 0x8] 0x7a9cb2c600
	Vector2D BakedSourceDimension;//[Offset: 0x68, Size: 0x8] 0x7a9cb2a580
	Texture2D* BakedSourceTexture;//[Offset: 0x70, Size: 0x8] 0x7a9cb2a600
	MaterialInterface* DefaultMaterial;//[Offset: 0x78, Size: 0x8] 0x7a9cb2a680
	MaterialInterface* AlternateMaterial;//[Offset: 0x80, Size: 0x8] 0x7a9cb2a700
	PaperSpriteSocket[] Sockets;//[Offset: 0x88, Size: 0x10] 0x7a9cb2a800
	byte SpriteCollisionDomain;//[Offset: 0x98, Size: 0x1] 0x7a9cb2a880
	float PixelsPerUnrealUnit;//[Offset: 0x9c, Size: 0x4] 0x7a9ca6feb0
	BodySetup* BodySetup;//[Offset: 0xa0, Size: 0x8] 0x7a9cb2a900
	int AlternateMaterialSplitIndex;//[Offset: 0xa8, Size: 0x4] 0x7a9ca6ff20
	Vector4[] BakedRenderData;//[Offset: 0xb0, Size: 0x10] 0x7a9cb2aa00

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30] 0x7aa089ac80
	FName SocketName;//[Offset: 0x30, Size: 0x8] 0x7aa083a340

--------------------------------
Class: PaperFlipbookActor.Actor.Object
	PaperFlipbookComponent* RenderComponent;//[Offset: 0x330, Size: 0x8] 0x7a9cb23100

--------------------------------
Class: PaperGroupedSpriteActor.Actor.Object
	PaperGroupedSpriteComponent* RenderComponent;//[Offset: 0x330, Size: 0x8] 0x7a9cb29580

--------------------------------
Class: PaperGroupedSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] InstanceMaterials;//[Offset: 0x5a0, Size: 0x10] 0x7a9cb2ac80
	SpriteInstanceData[] PerInstanceSpriteData;//[Offset: 0x5b0, Size: 0x10] 0x7a9cb2ad80
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0xffffff8523219000 0x7aa098e5c0
	bool UpdateInstanceColor(int InstanceIndex, LinearColor NewInstanceColor, bool bMarkRenderStateDirty);// 0xffffff8523219000 0x7aa098e6a0
	void SortInstancesAlongAxis(Vector WorldSpaceSortAxis);// 0xffffff8523219000 0x7aa098adc0
	bool RemoveInstance(int InstanceIndex);// 0xffffff8523219000 0x7aa098aea0
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0xffffff8523219000 0x7aa098af80
	int GetInstanceCount();// 0xffffff8523219000 0x7aa098b060
	void ClearInstances();// 0xffffff8523219000 0x7aa098b140
	int AddInstance(out const Transform Transform, PaperSprite* Sprite, bool bWorldSpace, LinearColor Color);// 0xffffff8523219000 0x7aa098b220

--------------------------------
Class: SpriteInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40] 0x7aa089ad00
	PaperSprite* SourceSprite;//[Offset: 0x40, Size: 0x8] 0x7aa089ad80
	Color VertexColor;//[Offset: 0x48, Size: 0x4] 0x7aa089af00
	int MaterialIndex;//[Offset: 0x4c, Size: 0x4] 0x7aa083a3b0

--------------------------------
Class: PaperRuntimeSettings.Object
	bool bEnableSpriteAtlasGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7a9cb2aa80
	bool bEnableTerrainSplineEditing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7a9cb2ab00
	bool bResizeSpriteDataToMatchTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x7a9cb2ab80

--------------------------------
Class: PaperSpriteActor.Actor.Object
	PaperSpriteComponent* RenderComponent;//[Offset: 0x330, Size: 0x8] 0x7a9cb2c300

--------------------------------
Class: PaperSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperSprite* SourceSprite;//[Offset: 0x5a0, Size: 0x8] 0x7a9cb2be80
	MaterialInterface* MaterialOverride;//[Offset: 0x5a8, Size: 0x8] 0x7a9cb2bf00
	LinearColor SpriteColor;//[Offset: 0x5b0, Size: 0x10] 0x7a9cb2bf80
	void SetSpriteColor(LinearColor NewColor);// 0xffffff8523219000 0x7aa098e240
	bool SetSprite(PaperSprite* NewSprite);// 0xffffff8523219000 0x7aa098e320
	PaperSprite* GetSprite();// 0xffffff8523219000 0x7aa098e400

--------------------------------
Class: PaperSpriteAtlas.Object

--------------------------------
Class: PaperSpriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	SlateBrush MakeBrushFromSprite(PaperSprite* Sprite, int Width, int Height);// 0xffffff8523219000 0x7aa098e4e0

--------------------------------
Class: PaperTerrainActor.Actor.Object
	SceneComponent* DummyRoot;//[Offset: 0x330, Size: 0x8] 0x7a9cb2bd00
	PaperTerrainSplineComponent* SplineComponent;//[Offset: 0x338, Size: 0x8] 0x7a9cb2bd80
	PaperTerrainComponent* RenderComponent;//[Offset: 0x340, Size: 0x8] 0x7a9cb2be00

--------------------------------
Class: PaperTerrainSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PaperTerrainComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperTerrainMaterial* TerrainMaterial;//[Offset: 0x578, Size: 0x8] 0x7a9cb2b900
	bool bClosedSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1] 0x7a9cb2b980
	bool bFilledSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 0x1] 0x7a9cb2ba00
	PaperTerrainSplineComponent* AssociatedSpline;//[Offset: 0x588, Size: 0x8] 0x7a9cb2ba80
	int RandomSeed;//[Offset: 0x590, Size: 0x4] 0x7a9ca6fc10
	float SegmentOverlapAmount;//[Offset: 0x594, Size: 0x4] 0x7a9ca6fc80
	LinearColor TerrainColor;//[Offset: 0x598, Size: 0x10] 0x7a9cb2bb00
	int ReparamStepsPerSegment;//[Offset: 0x5a8, Size: 0x4] 0x7a9ca6fcf0
	byte SpriteCollisionDomain;//[Offset: 0x5ac, Size: 0x1] 0x7a9cb2bb80
	float CollisionThickness;//[Offset: 0x5b0, Size: 0x4] 0x7a9ca6fd60
	BodySetup* CachedBodySetup;//[Offset: 0x5b8, Size: 0x8] 0x7a9cb2bc00
	void SetTerrainColor(LinearColor NewColor);// 0xffffff8523219000 0x7aa098e160

--------------------------------
Class: PaperTerrainMaterial.DataAsset.Object
	PaperTerrainMaterialRule[] Rules;//[Offset: 0x30, Size: 0x10] 0x7a9cb2b780
	PaperSprite* InteriorFill;//[Offset: 0x40, Size: 0x8] 0x7a9cb2b800

--------------------------------
Class: PaperTerrainMaterialRule
	PaperSprite* StartCap;//[Offset: 0x0, Size: 0x8] 0x7aa089a980
	PaperSprite*[] Body;//[Offset: 0x8, Size: 0x10] 0x7aa089aa80
	PaperSprite* EndCap;//[Offset: 0x18, Size: 0x8] 0x7aa089ab00
	float MinimumAngle;//[Offset: 0x20, Size: 0x4] 0x7aa0839f50
	float MaximumAngle;//[Offset: 0x24, Size: 0x4] 0x7aa0839fc0
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7aa089ab80
	float CollisionOffset;//[Offset: 0x2c, Size: 0x4] 0x7aa083a030
	int DrawOrder;//[Offset: 0x30, Size: 0x4] 0x7aa083a0a0

--------------------------------
Class: PaperTileLayer.Object
	FText LayerName;//[Offset: 0x28, Size: 0x18] 0x7a9cb312e0
	int LayerWidth;//[Offset: 0x40, Size: 0x4] 0x7a9cb31350
	int LayerHeight;//[Offset: 0x44, Size: 0x4] 0x7a9cb313c0
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7a9cb53100
	bool bLayerCollides;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x7a9cb53180
	bool bOverrideCollisionThickness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1] 0x7a9cb51100
	bool bOverrideCollisionOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1] 0x7a9cb51180
	float CollisionThicknessOverride;//[Offset: 0x4c, Size: 0x4] 0x7a9cb31430
	float CollisionOffsetOverride;//[Offset: 0x50, Size: 0x4] 0x7a9cb314a0
	LinearColor LayerColor;//[Offset: 0x54, Size: 0x10] 0x7a9cb51200
	int AllocatedWidth;//[Offset: 0x64, Size: 0x4] 0x7a9cb31510
	int AllocatedHeight;//[Offset: 0x68, Size: 0x4] 0x7a9cb31580
	PaperTileInfo[] AllocatedCells;//[Offset: 0x70, Size: 0x10] 0x7a9cb51300
	PaperTileSet* TileSet;//[Offset: 0x80, Size: 0x8] 0x7a9cb51380
	int[] AllocatedGrid;//[Offset: 0x88, Size: 0x10] 0x7a9cb51400

--------------------------------
Class: PaperTileInfo
	PaperTileSet* TileSet;//[Offset: 0x0, Size: 0x8] 0x7aa089a900
	int PackedTileIndex;//[Offset: 0x8, Size: 0x4] 0x7aa0839ee0

--------------------------------
Class: PaperTileSet.Object
	IntPoint TileSize;//[Offset: 0x28, Size: 0x8] 0x7a9cb53880
	Texture2D* TileSheet;//[Offset: 0x30, Size: 0x8] 0x7a9cb53900
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10] 0x7a9cb53a00
	IntMargin BorderMargin;//[Offset: 0x48, Size: 0x10] 0x7a9cb53a80
	IntPoint PerTileSpacing;//[Offset: 0x58, Size: 0x8] 0x7a9cb53b00
	IntPoint DrawingOffset;//[Offset: 0x60, Size: 0x8] 0x7a9cb53b80
	int WidthInTiles;//[Offset: 0x68, Size: 0x4] 0x7a9cb33490
	int HeightInTiles;//[Offset: 0x6c, Size: 0x4] 0x7a9cb33500
	int AllocatedWidth;//[Offset: 0x70, Size: 0x4] 0x7a9cb33570
	int AllocatedHeight;//[Offset: 0x74, Size: 0x4] 0x7a9cb335e0
	PaperTileMetadata[] PerTileData;//[Offset: 0x78, Size: 0x10] 0x7a9cb53c80
	PaperTileSetTerrain[] Terrains;//[Offset: 0x88, Size: 0x10] 0x7a9cb53d80
	int TileWidth;//[Offset: 0x98, Size: 0x4] 0x7a9cb33650
	int TileHeight;//[Offset: 0x9c, Size: 0x4] 0x7a9cb336c0
	int Margin;//[Offset: 0xa0, Size: 0x4] 0x7a9cb33730
	int Spacing;//[Offset: 0xa4, Size: 0x4] 0x7a9cb337a0

--------------------------------
Class: IntMargin
	int Left;//[Offset: 0x0, Size: 0x4] 0x7aa083a490
	int Top;//[Offset: 0x4, Size: 0x4] 0x7aa083a500
	int Right;//[Offset: 0x8, Size: 0x4] 0x7aa083a5e0
	int Bottom;//[Offset: 0xc, Size: 0x4] 0x7aa083a570

--------------------------------
Class: PaperTileMetadata
	FName UserDataName;//[Offset: 0x0, Size: 0x8] 0x7aa083b7d0
	SpriteGeometryCollection CollisionData;//[Offset: 0x8, Size: 0x30] 0x7aa089a800
	byte TerrainMembership;//[Offset: 0x38, Size: 0x1] 0x7aa089a880

--------------------------------
Class: SpriteGeometryCollection
	SpriteGeometryShape[] Shapes;//[Offset: 0x0, Size: 0x10] 0x7aa089a680
	byte GeometryType;//[Offset: 0x10, Size: 0x1] 0x7aa089a700
	int PixelsPerSubdivisionX;//[Offset: 0x14, Size: 0x4] 0x7aa083b8b0
	int PixelsPerSubdivisionY;//[Offset: 0x18, Size: 0x4] 0x7aa083b920
	bool bAvoidVertexMerging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7aa089a780
	float AlphaThreshold;//[Offset: 0x20, Size: 0x4] 0x7aa083b990
	float DetailAmount;//[Offset: 0x24, Size: 0x4] 0x7aa083ba00
	float SimplifyEpsilon;//[Offset: 0x28, Size: 0x4] 0x7aa083ba70

--------------------------------
Class: SpriteGeometryShape
	enum ShapeType;//[Offset: 0x0, Size: 0x1] 0x7aa089c400
	Vector2D[] Vertices;//[Offset: 0x8, Size: 0x10] 0x7aa089c500
	Vector2D BoxSize;//[Offset: 0x18, Size: 0x8] 0x7aa089c580
	Vector2D BoxPosition;//[Offset: 0x20, Size: 0x8] 0x7aa089c600
	float Rotation;//[Offset: 0x28, Size: 0x4] 0x7aa083b840
	bool bNegativeWinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x7aa089a580

--------------------------------
Class: PaperTileSetTerrain
	FString TerrainName;//[Offset: 0x0, Size: 0x10] 0x7aa083bae0
	int CenterTileIndex;//[Offset: 0x10, Size: 0x4] 0x7aa083bb50

--------------------------------
Class: PaperTileMap.Object
	int MapWidth;//[Offset: 0x28, Size: 0x4] 0x7a9cb32af0
	int MapHeight;//[Offset: 0x2c, Size: 0x4] 0x7a9cb30e80
	int TileWidth;//[Offset: 0x30, Size: 0x4] 0x7a9cb30ef0
	int TileHeight;//[Offset: 0x34, Size: 0x4] 0x7a9cb30f60
	float PixelsPerUnrealUnit;//[Offset: 0x38, Size: 0x4] 0x7a9cb30fd0
	float SeparationPerTileX;//[Offset: 0x3c, Size: 0x4] 0x7a9cb31040
	float SeparationPerTileY;//[Offset: 0x40, Size: 0x4] 0x7a9cb310b0
	float SeparationPerLayer;//[Offset: 0x44, Size: 0x4] 0x7a9cb31120
	PaperTileSet* SelectedTileSet;//[Offset: 0x48, Size: 0x28] 0x7a9cb52d80
	MaterialInterface* Material;//[Offset: 0x70, Size: 0x8] 0x7a9cb52e00
	PaperTileLayer*[] TileLayers;//[Offset: 0x78, Size: 0x10] 0x7a9cb52f00
	float CollisionThickness;//[Offset: 0x88, Size: 0x4] 0x7a9cb31190
	byte SpriteCollisionDomain;//[Offset: 0x8c, Size: 0x1] 0x7a9cb52f80
	byte ProjectionMode;//[Offset: 0x8d, Size: 0x1] 0x7a9cb53000
	int HexSideLength;//[Offset: 0x90, Size: 0x4] 0x7a9cb31200
	BodySetup* BodySetup;//[Offset: 0x98, Size: 0x8] 0x7a9cb53080
	int LayerNameIndex;//[Offset: 0xa0, Size: 0x4] 0x7a9cb31270

--------------------------------
Class: PaperTileMapActor.Actor.Object
	PaperTileMapComponent* RenderComponent;//[Offset: 0x330, Size: 0x8] 0x7a9cb52d00

--------------------------------
Class: PaperTileMapComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int MapWidth;//[Offset: 0x59c, Size: 0x4] 0x7a9cb33810
	int MapHeight;//[Offset: 0x5a0, Size: 0x4] 0x7a9cb33880
	int TileWidth;//[Offset: 0x5a4, Size: 0x4] 0x7a9cb338f0
	int TileHeight;//[Offset: 0x5a8, Size: 0x4] 0x7a9cb33960
	PaperTileSet* DefaultLayerTileSet;//[Offset: 0x5b0, Size: 0x8] 0x7a9cb53e00
	MaterialInterface* Material;//[Offset: 0x5b8, Size: 0x8] 0x7a9cb53e80
	PaperTileLayer*[] TileLayers;//[Offset: 0x5c0, Size: 0x10] 0x7a9cb53f80
	LinearColor TileMapColor;//[Offset: 0x5d0, Size: 0x10] 0x7a9cb54000
	int UseSingleLayerIndex;//[Offset: 0x5e0, Size: 0x4] 0x7a9cb31cf0
	bool bUseSingleLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 0x1] 0x7a9cb54080
	PaperTileMap* TileMap;//[Offset: 0x5e8, Size: 0x8] 0x7a9cb54100
	void SetTileMapColor(LinearColor NewColor);// 0xffffff8523219000 0x7a9cb42fc0
	bool SetTileMap(PaperTileMap* NewTileMap);// 0xffffff8523219000 0x7a9cb430a0
	void SetTile(int X, int Y, int Layer, PaperTileInfo NewValue);// 0xffffff8523219000 0x7a9cb43180
	void SetLayerColor(LinearColor NewColor, int Layer);// 0xffffff8523219000 0x7a9cb43260
	void SetLayerCollision(int Layer, bool bHasCollision, bool bOverrideThickness, float CustomThickness, bool bOverrideOffset, float CustomOffset, bool bRebuildCollision);// 0xffffff8523219000 0x7a9cb43340
	void SetDefaultCollisionThickness(float Thickness, bool bRebuildCollision);// 0xffffff8523219000 0x7a9cb43420
	void ResizeMap(int NewWidthInTiles, int NewHeightInTiles);// 0xffffff8523219000 0x7a9cb43500
	void RebuildCollision();// 0xffffff8523219000 0x7a9cb435e0
	bool OwnsTileMap();// 0xffffff8523219000 0x7a9cb436c0
	void MakeTileMapEditable();// 0xffffff8523219000 0x7a9cb437a0
	void GetTilePolygon(int TileX, int TileY, out Vector[] Points, int LayerIndex, bool bWorldSpace);// 0xffffff8523219000 0x7a9cb43880
	LinearColor GetTileMapColor();// 0xffffff8523219000 0x7a9cb43960
	Vector GetTileCornerPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0xffffff8523219000 0x7a9cb40080
	Vector GetTileCenterPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0xffffff8523219000 0x7a9cb40160
	PaperTileInfo GetTile(int X, int Y, int Layer);// 0xffffff8523219000 0x7a9cb40240
	void GetMapSize(out int MapWidth, out int MapHeight, out int NumLayers);// 0xffffff8523219000 0x7a9cb40320
	LinearColor GetLayerColor(int Layer);// 0xffffff8523219000 0x7a9cb40400
	void CreateNewTileMap(int MapWidth, int MapHeight, int TileWidth, int TileHeight, float PixelsPerUnrealUnit, bool bCreateLayer);// 0xffffff8523219000 0x7a9cb404e0
	PaperTileLayer* AddNewLayer();// 0xffffff8523219000 0x7a9cb405c0

--------------------------------
Class: TileMapBlueprintLibrary.BlueprintFunctionLibrary.Object
	PaperTileInfo MakeTile(int TileIndex, PaperTileSet* TileSet, bool bFlipH, bool bFlipV, bool bFlipD);// 0xffffff8523219000 0x7a9cb42c40
	FName GetTileUserData(PaperTileInfo Tile);// 0xffffff8523219000 0x7a9cb42d20
	Transform GetTileTransform(PaperTileInfo Tile);// 0xffffff8523219000 0x7a9cb42e00
	void BreakTile(PaperTileInfo Tile, out int TileIndex, out PaperTileSet* TileSet, out bool bFlipH, out bool bFlipV, out bool bFlipD);// 0xffffff8523219000 0x7a9cb42ee0

--------------------------------
Class: LightPropagationVolumeBlendable.Object
	LightPropagationVolumeSettings Settings;//[Offset: 0x30, Size: 0x40] 0x7a9cb55280
	float BlendWeight;//[Offset: 0x70, Size: 0x4] 0x7a9cb332d0

--------------------------------
Class: LightPropagationVolumeSettings
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7aa0923080
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7aa0923100
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7aa0923180
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7aa0921100
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7aa0921180
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7aa0921200
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7aa0921280
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7aa0921300
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7aa0921380
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7aa0921400
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7aa0921500
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7aa0921580
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7aa0856200
	float LPVIntensity;//[Offset: 0x4, Size: 0x4] 0x7aa083bca0
	float LPVVplInjectionBias;//[Offset: 0x8, Size: 0x4] 0x7aa083bd10
	float LPVSize;//[Offset: 0xc, Size: 0x4] 0x7aa083bd80
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x10, Size: 0x4] 0x7aa083bdf0
	float LPVSecondaryBounceIntensity;//[Offset: 0x14, Size: 0x4] 0x7aa083be60
	float LPVGeometryVolumeBias;//[Offset: 0x18, Size: 0x4] 0x7aa083bed0
	float LPVEmissiveInjectionIntensity;//[Offset: 0x1c, Size: 0x4] 0x7aa083bf40
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x20, Size: 0x4] 0x7aa083bfb0
	float LPVDirectionalOcclusionRadius;//[Offset: 0x24, Size: 0x4] 0x7aa083c020
	float LPVDiffuseOcclusionExponent;//[Offset: 0x28, Size: 0x4] 0x7aa083c090
	float LPVSpecularOcclusionExponent;//[Offset: 0x2c, Size: 0x4] 0x7aa083c100
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x30, Size: 0x4] 0x7aa083c170
	float LPVSpecularOcclusionIntensity;//[Offset: 0x34, Size: 0x4] 0x7aa083c1e0
	float LPVFadeRange;//[Offset: 0x38, Size: 0x4] 0x7aa083c250
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x3c, Size: 0x4] 0x7aa083c2c0

--------------------------------
Class: AnimSharingStateInstance.AnimInstance.Object
	AnimSequence* AnimationToPlay;//[Offset: 0x268, Size: 0x8] 0x7a9cb57280
	float PermutationTimeOffset;//[Offset: 0x270, Size: 0x4] 0x7a9cb360c0
	float PlayRate;//[Offset: 0x274, Size: 0x4] 0x7a9cb36130
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x7a9cb57300
	void GetInstancedActors(out Actor*[] Actors);// 0xffffff8523219000 0x7a9cb468a0

--------------------------------
Class: AnimSharingTransitionInstance.AnimInstance.Object
	SkeletalMeshComponent* FromComponent;//[Offset: 0x268, Size: 0x8] 0x7a9cb57100
	SkeletalMeshComponent* ToComponent;//[Offset: 0x270, Size: 0x8] 0x7a9cb57180
	float BlendTime;//[Offset: 0x278, Size: 0x4] 0x7a9cb36050
	bool bBlendBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1] 0x7a9cb57200

--------------------------------
Class: AnimSharingAdditiveInstance.AnimInstance.Object
	SkeletalMeshComponent* BaseComponent;//[Offset: 0x268, Size: 0x8] 0x7a9cb56f80
	AnimSequence* AdditiveAnimation;//[Offset: 0x270, Size: 0x8] 0x7a9cb57000
	float Alpha;//[Offset: 0x278, Size: 0x4] 0x7a9cb35fe0
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1] 0x7a9cb57080

--------------------------------
Class: AnimSharingInstance.Object
	Actor*[] RegisteredActors;//[Offset: 0x28, Size: 0x10] 0x7a9cb56c80
	AnimationSharingStateProcessor* StateProcessor;//[Offset: 0xa8, Size: 0x8] 0x7a9cb56d00
	AnimSequence*[] UsedAnimationSequences;//[Offset: 0xe8, Size: 0x10] 0x7a9cb56e00
	Enum* StateEnum;//[Offset: 0x108, Size: 0x8] 0x7a9cb56e80
	Actor* SharingActor;//[Offset: 0x110, Size: 0x8] 0x7a9cb56f00

--------------------------------
Class: AnimationSharingStateProcessor.Object
	Enum* AnimationStateEnum;//[Offset: 0x28, Size: 0x28] 0x7a9cb58380
	void ProcessActorState(out int OutState, Actor* InActor, byte CurrentState, byte OnDemandState, out bool bShouldProcess);// 0xffffff8523219000 0x7a9cb46360
	Enum* GetAnimationStateEnum();// 0xffffff8523219000 0x7a9cb46440

--------------------------------
Class: AnimationSharingManager.Object
	AnimSharingInstance*[] PerSkeletonData;//[Offset: 0x38, Size: 0x10] 0x7a9cb56780
	void RegisterActorWithSkeletonBP(Actor* InActor, const Skeleton* SharingSkeleton);// 0xffffff8523219000 0x7a9cb46520
	AnimationSharingManager* GetAnimationSharingManager(Object* WorldContextObject);// 0xffffff8523219000 0x7a9cb46600
	bool CreateAnimationSharingManager(Object* WorldContextObject, const AnimationSharingSetup* Setup);// 0xffffff8523219000 0x7a9cb466e0
	bool AnimationSharingEnabled();// 0xffffff8523219000 0x7a9cb467c0

--------------------------------
Class: AnimationSharingSetup.Object
	PerSkeletonAnimationSharingSetup[] SkeletonSetups;//[Offset: 0x28, Size: 0x10] 0x7a9cb56600
	AnimationSharingScalability ScalabilitySettings;//[Offset: 0x38, Size: 0x10] 0x7a9cb56680

--------------------------------
Class: PerSkeletonAnimationSharingSetup
	Skeleton* Skeleton;//[Offset: 0x0, Size: 0x28] 0x7aa089d580
	SkeletalMesh* SkeletalMesh;//[Offset: 0x28, Size: 0x28] 0x7aa089d680
	class AnimSharingTransitionInstance* BlendAnimBlueprint;//[Offset: 0x50, Size: 0x8] 0x7aa089b600
	class AnimSharingAdditiveInstance* AdditiveAnimBlueprint;//[Offset: 0x58, Size: 0x8] 0x7aa089b680
	class AnimationSharingStateProcessor* StateProcessorClass;//[Offset: 0x60, Size: 0x8] 0x7aa089b700
	AnimationStateEntry[] AnimationStates;//[Offset: 0x68, Size: 0x10] 0x7aa089bf00

--------------------------------
Class: AnimationStateEntry
	byte State;//[Offset: 0x0, Size: 0x1] 0x7aa089b780
	AnimationSetup[] AnimationSetups;//[Offset: 0x8, Size: 0x10] 0x7aa089ba80
	bool bOnDemand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7aa089bb00
	bool bAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x7aa089bb80
	float BlendTime;//[Offset: 0x1c, Size: 0x4] 0x7aa083b610
	bool bReturnToPreviousState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7aa089bc00
	bool bSetNextState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x7aa089bc80
	byte NextState;//[Offset: 0x22, Size: 0x1] 0x7aa089bd00
	PerPlatformInt MaximumNumberOfConcurrentInstances;//[Offset: 0x24, Size: 0x4] 0x7aa089bd80
	float WiggleTimePercentage;//[Offset: 0x28, Size: 0x4] 0x7aa083b6f0
	bool bRequiresCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x7aa089be00

--------------------------------
Class: AnimationSetup
	AnimSequence* AnimSequence;//[Offset: 0x0, Size: 0x28] 0x7aa089b800
	class AnimSharingStateInstance* AnimBlueprint;//[Offset: 0x28, Size: 0x8] 0x7aa089b880
	PerPlatformInt NumRandomizedInstances;//[Offset: 0x30, Size: 0x4] 0x7aa089b900
	PerPlatformBool Enabled;//[Offset: 0x34, Size: 0x1] 0x7aa089b980

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7aa089bf80

--------------------------------
Class: AnimationSharingScalability
	PerPlatformBool UseBlendTransitions;//[Offset: 0x0, Size: 0x1] 0x7aa089c000
	PerPlatformFloat BlendSignificanceValue;//[Offset: 0x4, Size: 0x4] 0x7aa089c080
	PerPlatformInt MaximumNumberConcurrentBlends;//[Offset: 0x8, Size: 0x4] 0x7aa089c100
	PerPlatformFloat TickSignificanceValue;//[Offset: 0xc, Size: 0x4] 0x7aa089c180

--------------------------------
Class: SignificanceManager.Object
	SoftClassPath SignificanceManagerClassName;//[Offset: 0x100, Size: 0x18] 0x7a9cb58300

--------------------------------
Class: AppleImageUtilsBaseAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7a9cb57500
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7a9cb57580
	AppleImageUtilsImageConversionResult ConversionResult;//[Offset: 0x60, Size: 0x20] 0x7a9cb57600
	AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToTIFF(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0xffffff8523219000 0x7a9cb45fe0
	AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToPNG(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0xffffff8523219000 0x7a9cb460c0
	AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToJPEG(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0xffffff8523219000 0x7a9cb461a0
	AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToHEIF(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0xffffff8523219000 0x7a9cb46280

--------------------------------
Class: AppleImageUtilsImageConversionResult
	FString Error;//[Offset: 0x0, Size: 0x10] 0x7a963eb530
	byte[] ImageData;//[Offset: 0x10, Size: 0x10] 0x7a9637cc80

--------------------------------
Class: AppleImageInterface.Interface.Object

--------------------------------
Class: AndroidMediaSettings.Object
	bool CacheableVideoSampleBuffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7a9cb57480

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0xffffff8523219000 0x7a9cb45e20
	FString GetUrl();// 0xffffff8523219000 0x7a9cb45f00

--------------------------------
Class: BaseMediaSource.MediaSource.Object
	FName PlayerName;//[Offset: 0x30, Size: 0x8] 0x7a9cb35b80

--------------------------------
Class: ImgMediaSource.BaseMediaSource.MediaSource.Object
	FrameRate FrameRateOverride;//[Offset: 0x38, Size: 0x8] 0x7a9cb59380
	FString ProxyOverride;//[Offset: 0x40, Size: 0x10] 0x7a9cb35a30
	DirectoryPath SequencePath;//[Offset: 0x50, Size: 0x10] 0x7a9cb59400
	void SetSequencePath(FString Path);// 0xffffff8523219000 0x7a9cb45b80
	FString GetSequencePath();// 0xffffff8523219000 0x7a9cb45c60
	void GetProxies(out FString[] OutProxies);// 0xffffff8523219000 0x7a9cb45d40

--------------------------------
Class: ImgMediaSettings.Object
	FrameRate DefaultFrameRate;//[Offset: 0x28, Size: 0x8] 0x7a9cb59280
	float CacheBehindPercentage;//[Offset: 0x30, Size: 0x4] 0x7a9cb35790
	float CacheSizeGB;//[Offset: 0x34, Size: 0x4] 0x7a9cb35800
	int CacheThreads;//[Offset: 0x38, Size: 0x4] 0x7a9cb35870
	int CacheThreadStackSizeKB;//[Offset: 0x3c, Size: 0x4] 0x7a9cb35950
	uint32 ExrDecoderThreads;//[Offset: 0x40, Size: 0x4] 0x7a9cb358e0
	FString DefaultProxy;//[Offset: 0x48, Size: 0x10] 0x7a9cb359c0
	bool UseDefaultProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7a9cb59300

--------------------------------
Class: LinearTimecodeComponent.SceneComponent.ActorComponent.Object
	MediaPlayer* MediaPlayer;//[Offset: 0x258, Size: 0x8] 0x7a9cb58f80
	DropTimecode DropTimecode;//[Offset: 0x260, Size: 0x1c] 0x7a9cb59000
	delegate OnTimecodeChange;//[Offset: 0x280, Size: 0x10] 0x7a9cb59080
	void SetDropTimecodeFrameNumber(out const DropTimecode Timecode, int FrameNumber, out DropTimecode OutTimecode);// 0xffffff8523219000 0x7a9cb458e0
	void GetDropTimeCodeFrameNumber(out const DropTimecode Timecode, out int FrameNumber);// 0xffffff8523219000 0x7a9cb459c0
	int GetDropFrameNumber();// 0xffffff8523219000 0x7a9cb45aa0

--------------------------------
Class: MediaPlayer.Object
	delegate OnEndReached;//[Offset: 0x28, Size: 0x10] 0x7a9c849080
	delegate OnMediaClosed;//[Offset: 0x38, Size: 0x10] 0x7a9c849100
	delegate OnMediaOpened;//[Offset: 0x48, Size: 0x10] 0x7a9c849180
	delegate OnMediaOpenFailed;//[Offset: 0x58, Size: 0x10] 0x7a9c849200
	delegate OnPlaybackResumed;//[Offset: 0x68, Size: 0x10] 0x7a9c849280
	delegate OnPlaybackSuspended;//[Offset: 0x78, Size: 0x10] 0x7a9c849300
	delegate OnSeekCompleted;//[Offset: 0x88, Size: 0x10] 0x7a9c849380
	delegate OnTracksChanged;//[Offset: 0x98, Size: 0x10] 0x7a9c849400
	Timespan CacheAhead;//[Offset: 0xa8, Size: 0x8] 0x7a9c849480
	Timespan CacheBehind;//[Offset: 0xb0, Size: 0x8] 0x7a9c847400
	Timespan CacheBehindGame;//[Offset: 0xb8, Size: 0x8] 0x7a9c847480
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x7a9c847500
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x7a9c847580
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 0x1] 0x7a9c847600
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 0x1] 0x7a9c847680
	MediaPlaylist* Playlist;//[Offset: 0xc8, Size: 0x8] 0x7a9c847700
	int PlaylistIndex;//[Offset: 0xd0, Size: 0x4] 0x7a9c7fe0f0
	Timespan TimeDelay;//[Offset: 0xd8, Size: 0x8] 0x7a9c847780
	float HorizontalFieldOfView;//[Offset: 0xe0, Size: 0x4] 0x7a9c7fe160
	float VerticalFieldOfView;//[Offset: 0xe4, Size: 0x4] 0x7a9c7fe1d0
	Rotator ViewRotation;//[Offset: 0xe8, Size: 0xc] 0x7a9c847800
	Guid PlayerGuid;//[Offset: 0x120, Size: 0x10] 0x7a9c847880
	bool SupportsSeeking();// 0xffffff8523219000 0x7a9c850f60
	bool SupportsScrubbing();// 0xffffff8523219000 0x7a9c851040
	bool SupportsRate(float Rate, bool Unthinned);// 0xffffff8523219000 0x7a9c851120
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0xffffff8523219000 0x7a9c851200
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0xffffff8523219000 0x7a9c8512e0
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0xffffff8523219000 0x7a9c8513c0
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0xffffff8523219000 0x7a9c8514a0
	void SetTimeDelay(Timespan TimeDelay);// 0xffffff8523219000 0x7a9c851580
	bool SetRate(float Rate);// 0xffffff8523219000 0x7a9c851660
	bool SetNativeVolume(float Volume);// 0xffffff8523219000 0x7a9c851740
	bool SetLooping(bool Looping);// 0xffffff8523219000 0x7a9c851820
	void SetDesiredPlayerName(FName PlayerName);// 0xffffff8523219000 0x7a9c851900
	void SetBlockOnTime(out const Timespan Time);// 0xffffff8523219000 0x7a9c8519e0
	bool SelectTrack(enum TrackType, int TrackIndex);// 0xffffff8523219000 0x7a9c851ac0
	bool Seek(out const Timespan Time);// 0xffffff8523219000 0x7a9c851ba0
	bool Rewind();// 0xffffff8523219000 0x7a9c851c80
	bool Reopen();// 0xffffff8523219000 0x7a9c80e780
	bool Previous();// 0xffffff8523219000 0x7a9c80e860
	bool Play();// 0xffffff8523219000 0x7a9c80e940
	bool Pause();// 0xffffff8523219000 0x7a9c80ea20
	bool OpenUrl(FString URL);// 0xffffff8523219000 0x7a9c80eb00
	bool OpenSourceWithOptions(MediaSource* MediaSource, out const MediaPlayerOptions Options);// 0xffffff8523219000 0x7a9c80ebe0
	void OpenSourceLatent(const Object* WorldContextObject, LatentActionInfo LatentInfo, MediaSource* MediaSource, out const MediaPlayerOptions Options, out bool bSuccess);// 0xffffff8523219000 0x7a9c80ecc0
	bool OpenSource(MediaSource* MediaSource);// 0xffffff8523219000 0x7a9c80eda0
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int Index);// 0xffffff8523219000 0x7a9c80ee80
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0xffffff8523219000 0x7a9c80ef60
	bool OpenFile(FString FilePath);// 0xffffff8523219000 0x7a9c80f040
	bool Next();// 0xffffff8523219000 0x7a9c80f120
	bool IsReady();// 0xffffff8523219000 0x7a9c80f200
	bool IsPreparing();// 0xffffff8523219000 0x7a9c80f2e0
	bool IsPlaying();// 0xffffff8523219000 0x7a9c80f3c0
	bool IsPaused();// 0xffffff8523219000 0x7a9c80f4a0
	bool IsLooping();// 0xffffff8523219000 0x7a9c80f580
	bool IsConnecting();// 0xffffff8523219000 0x7a9c80f660
	bool IsClosed();// 0xffffff8523219000 0x7a9c80f740
	bool IsBuffering();// 0xffffff8523219000 0x7a9c80f820
	bool HasError();// 0xffffff8523219000 0x7a9c80f900
	Rotator GetViewRotation();// 0xffffff8523219000 0x7a9c80f9e0
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0xffffff8523219000 0x7a9c80fac0
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0xffffff8523219000 0x7a9c80fba0
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0xffffff8523219000 0x7a9c80fc80
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0xffffff8523219000 0x7a9c80fd60
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0xffffff8523219000 0x7a9c80fe40
	float GetVerticalFieldOfView();// 0xffffff8523219000 0x7a9c80ff20
	FString GetUrl();// 0xffffff8523219000 0x7a9c80caa0
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0xffffff8523219000 0x7a9c80cb80
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0xffffff8523219000 0x7a9c80cc60
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0xffffff8523219000 0x7a9c80cd40
	Timespan GetTimeDelay();// 0xffffff8523219000 0x7a9c80ce20
	Timespan GetTime();// 0xffffff8523219000 0x7a9c80cf00
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0xffffff8523219000 0x7a9c80cfe0
	int GetSelectedTrack(enum TrackType);// 0xffffff8523219000 0x7a9c80d0c0
	float GetRate();// 0xffffff8523219000 0x7a9c80d1a0
	int GetPlaylistIndex();// 0xffffff8523219000 0x7a9c80d280
	MediaPlaylist* GetPlaylist();// 0xffffff8523219000 0x7a9c80d360
	FName GetPlayerName();// 0xffffff8523219000 0x7a9c80d440
	int GetNumTracks(enum TrackType);// 0xffffff8523219000 0x7a9c80d520
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0xffffff8523219000 0x7a9c80d600
	FText GetMediaName();// 0xffffff8523219000 0x7a9c80d6e0
	Timespan GetLastVideoSampleProcessedTime();// 0xffffff8523219000 0x7a9c80d7c0
	Timespan GetLastAudioSampleProcessedTime();// 0xffffff8523219000 0x7a9c80d8a0
	float GetHorizontalFieldOfView();// 0xffffff8523219000 0x7a9c80d980
	Timespan GetDuration();// 0xffffff8523219000 0x7a9c80da60
	FName GetDesiredPlayerName();// 0xffffff8523219000 0x7a9c80db40
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0xffffff8523219000 0x7a9c80dc20
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0xffffff8523219000 0x7a9c80dd00
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0xffffff8523219000 0x7a9c80dde0
	void Close();// 0xffffff8523219000 0x7a9c80dec0
	bool CanPlayUrl(FString URL);// 0xffffff8523219000 0x7a9c80dfa0
	bool CanPlaySource(MediaSource* MediaSource);// 0xffffff8523219000 0x7a9c80e080
	bool CanPause();// 0xffffff8523219000 0x7a9c80e160

--------------------------------
Class: MediaPlaylist.Object
	MediaSource*[] Items;//[Offset: 0x28, Size: 0x10] 0x7a9c848900
	bool Replace(int Index, MediaSource* Replacement);// 0xffffff8523219000 0x7a9c8504e0
	bool RemoveAt(int Index);// 0xffffff8523219000 0x7a9c8505c0
	bool Remove(MediaSource* MediaSource);// 0xffffff8523219000 0x7a9c8506a0
	int Num();// 0xffffff8523219000 0x7a9c850780
	void Insert(MediaSource* MediaSource, int Index);// 0xffffff8523219000 0x7a9c850860
	MediaSource* GetRandom(out int OutIndex);// 0xffffff8523219000 0x7a9c850940
	MediaSource* GetPrevious(out int InOutIndex);// 0xffffff8523219000 0x7a9c850a20
	MediaSource* GetNext(out int InOutIndex);// 0xffffff8523219000 0x7a9c850b00
	MediaSource* Get(int Index);// 0xffffff8523219000 0x7a9c850be0
	bool AddUrl(FString URL);// 0xffffff8523219000 0x7a9c850cc0
	bool AddFile(FString FilePath);// 0xffffff8523219000 0x7a9c850da0
	bool Add(MediaSource* MediaSource);// 0xffffff8523219000 0x7a9c850e80

--------------------------------
Class: MediaPlayerOptions
	MediaPlayerTrackOptions Tracks;//[Offset: 0x0, Size: 0x1c] 0x7a9cb08300
	Timespan SeekTime;//[Offset: 0x20, Size: 0x8] 0x7a9cb08380
	enum PlayOnOpen;//[Offset: 0x28, Size: 0x1] 0x7a9cb06380
	enum Loop;//[Offset: 0x29, Size: 0x1] 0x7a9cb06480

--------------------------------
Class: MediaPlayerTrackOptions
	int Audio;//[Offset: 0x0, Size: 0x4] 0x7a9ca677f0
	int Caption;//[Offset: 0x4, Size: 0x4] 0x7a9ca67860
	int MetaData;//[Offset: 0x8, Size: 0x4] 0x7a9ca678d0
	int Script;//[Offset: 0xc, Size: 0x4] 0x7a9ca67940
	int Subtitle;//[Offset: 0x10, Size: 0x4] 0x7a9ca679b0
	int Text;//[Offset: 0x14, Size: 0x4] 0x7a9ca67a20
	int Video;//[Offset: 0x18, Size: 0x4] 0x7a9ca67a90

--------------------------------
Class: DropTimecode
	Timecode Timecode;//[Offset: 0x0, Size: 0x14] 0x7aa089d300
	int FrameRate;//[Offset: 0x14, Size: 0x4] 0x7aa083b5a0
	bool bColorFraming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7aa089d380
	bool bRunningForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x7aa089d400
	bool bNewFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1] 0x7aa089d480

--------------------------------
Class: DropTimecodeToStringConversion.BlueprintFunctionLibrary.Object
	FString Conv_DropTimecodeToString(out const DropTimecode InTimecode);// 0xffffff8523219000 0x7a9cb45800

--------------------------------
Class: TcpMessagingSettings.Object
	bool EnableTransport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7a9cb58e00
	FString ListenEndpoint;//[Offset: 0x30, Size: 0x10] 0x7a9cb37160
	FString[] ConnectToEndpoints;//[Offset: 0x40, Size: 0x10] 0x7a9cb58e80
	int ConnectionRetryDelay;//[Offset: 0x50, Size: 0x4] 0x7a9cb37240

--------------------------------
Class: UdpMessagingSettings.Object
	bool EnableTransport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7a9cb58b80
	FString UnicastEndpoint;//[Offset: 0x30, Size: 0x10] 0x7a9cb36ec0
	FString MulticastEndpoint;//[Offset: 0x40, Size: 0x10] 0x7a9cb36f30
	byte MulticastTimeToLive;//[Offset: 0x50, Size: 0x1] 0x7a9cb58c00
	FString[] StaticEndpoints;//[Offset: 0x58, Size: 0x10] 0x7a9cb58c80
	bool EnableTunnel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7a9cb58d00
	FString TunnelUnicastEndpoint;//[Offset: 0x70, Size: 0x10] 0x7a9cb37010
	FString TunnelMulticastEndpoint;//[Offset: 0x80, Size: 0x10] 0x7a9cb37080
	FString[] RemoteTunnelEndpoints;//[Offset: 0x90, Size: 0x10] 0x7a9cb58d80

--------------------------------
Class: NamedInterfaces.Object
	NamedInterface[] NamedInterfaces;//[Offset: 0x28, Size: 0x10] 0x7a9cb58a00
	NamedInterfaceDef[] NamedInterfaceDefs;//[Offset: 0x38, Size: 0x10] 0x7a9cb58b00

--------------------------------
Class: NamedInterface
	FName InterfaceName;//[Offset: 0x0, Size: 0x8] 0x7aa083b450
	Object* InterfaceObject;//[Offset: 0x8, Size: 0x8] 0x7aa089d180

--------------------------------
Class: NamedInterfaceDef
	FName InterfaceName;//[Offset: 0x0, Size: 0x8] 0x7aa083b4c0
	FString InterfaceClassName;//[Offset: 0x8, Size: 0x10] 0x7aa083b530

--------------------------------
Class: TurnBasedMatchInterface.Interface.Object
	void OnMatchReceivedTurn(FString Match, bool bDidBecomeActive);// 0xffffff8523219000 0x7a9cb49000
	void OnMatchEnded(FString Match);// 0xffffff8523219000 0x7a9cb45720

--------------------------------
Class: AchievementBlueprintLibrary.BlueprintFunctionLibrary.Object
	void GetCachedAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out float Progress);// 0xffffff8523219000 0x7a9cb48e40
	void GetCachedAchievementDescription(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out FText Title, out FText LockedDescription, out FText UnlockedDescription, out bool bHidden);// 0xffffff8523219000 0x7a9cb48f20

--------------------------------
Class: AchievementQueryCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb5a280
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb5a300
	AchievementQueryCallbackProxy* CacheAchievements(Object* WorldContextObject, PlayerController* PlayerController);// 0xffffff8523219000 0x7a9cb48ba0
	AchievementQueryCallbackProxy* CacheAchievementDescriptions(Object* WorldContextObject, PlayerController* PlayerController);// 0xffffff8523219000 0x7a9cb48c80

--------------------------------
Class: AchievementWriteCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb5a000
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb5a080
	AchievementWriteCallbackProxy* WriteAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementName, float Progress, int UserTag);// 0xffffff8523219000 0x7a9cb48ac0

--------------------------------
Class: ConnectionCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb59d80
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb59e00
	ConnectionCallbackProxy* ConnectToService(Object* WorldContextObject, PlayerController* PlayerController);// 0xffffff8523219000 0x7a9cb489e0

--------------------------------
Class: CreateSessionCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb59a00
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb59a80
	CreateSessionCallbackProxy* CreateSession(Object* WorldContextObject, PlayerController* PlayerController, int PublicConnections, bool bUseLAN);// 0xffffff8523219000 0x7a9cb48900

--------------------------------
Class: DestroySessionCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb59780
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb59800
	DestroySessionCallbackProxy* DestroySession(Object* WorldContextObject, PlayerController* PlayerController);// 0xffffff8523219000 0x7a9cb48820

--------------------------------
Class: EndMatchCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb5b480
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb5b500
	EndMatchCallbackProxy* EndMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, FString MatchID, byte LocalPlayerOutcome, byte OtherPlayersOutcome);// 0xffffff8523219000 0x7a9cb48740

--------------------------------
Class: EndTurnCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb5b180
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb5b200
	EndTurnCallbackProxy* EndTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, interface classNone TurnBasedMatchInterface);// 0xffffff8523219000 0x7a9cb48660

--------------------------------
Class: FindSessionsCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb5ac80
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb5ad00
	FString GetServerName(out const BlueprintSessionResult Result);// 0xffffff8523219000 0x7a9cb48200
	int GetPingInMs(out const BlueprintSessionResult Result);// 0xffffff8523219000 0x7a9cb482e0
	int GetMaxPlayers(out const BlueprintSessionResult Result);// 0xffffff8523219000 0x7a9cb483c0
	int GetCurrentPlayers(out const BlueprintSessionResult Result);// 0xffffff8523219000 0x7a9cb484a0
	FindSessionsCallbackProxy* FindSessions(Object* WorldContextObject, PlayerController* PlayerController, int MaxResults, bool bUseLAN);// 0xffffff8523219000 0x7a9cb48580

--------------------------------
Class: BlueprintSessionResult

--------------------------------
Class: FindTurnBasedMatchCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb5a900
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb5a980
	FindTurnBasedMatchCallbackProxy* FindTurnBasedMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, int MinPlayers, int MaxPlayers, int PlayerGroup, bool ShowExistingMatches);// 0xffffff8523219000 0x7a9cb48120

--------------------------------
Class: InAppPurchaseCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb5a680
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb5a700
	InAppPurchaseCallbackProxy* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest ProductRequest);// 0xffffff8523219000 0x7a9cb48040

--------------------------------
Class: InAppPurchaseProductRequest
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10] 0x7aa083b3e0
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7aa089d100

--------------------------------
Class: InAppPurchaseQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb5c500
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb5c580
	InAppPurchaseQueryCallbackProxy* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0xffffff8523219000 0x7a9cb47f60

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb5c200
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb5c280
	InAppPurchaseRestoreCallbackProxy* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest[] ConsumableProductFlags, PlayerController* PlayerController);// 0xffffff8523219000 0x7a9cb47e80

--------------------------------
Class: IpConnection.NetConnection.Player.Object

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c, Size: 0x1] 0x7a9cb5d100
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71c, Size: 0x1] 0x7a9cb5d180
	uint32 MaxPortCountToTry;//[Offset: 0x720, Size: 0x4] 0x7a9cb375c0
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x744, Size: 0x4] 0x7a9cb37630
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x748, Size: 0x4] 0x7a9cb376a0
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x74c, Size: 0x4] 0x7a9cb37710
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x750, Size: 0x4] 0x7a9cb37780

--------------------------------
Class: JoinSessionCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb5ce00
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb5ce80
	JoinSessionCallbackProxy* JoinSession(Object* WorldContextObject, PlayerController* PlayerController, out const BlueprintSessionResult SearchResult);// 0xffffff8523219000 0x7a9cb47da0

--------------------------------
Class: LeaderboardBlueprintLibrary.BlueprintFunctionLibrary.Object
	bool WriteLeaderboardInteger(PlayerController* PlayerController, FName StatName, int StatValue);// 0xffffff8523219000 0x7a9cb47cc0

--------------------------------
Class: LeaderboardFlushCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb5cb00
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb5cb80
	LeaderboardFlushCallbackProxy* CreateProxyObjectForFlush(PlayerController* PlayerController, FName SessionName);// 0xffffff8523219000 0x7a9cb47be0

--------------------------------
Class: LeaderboardQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb5c900
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb5c980
	LeaderboardQueryCallbackProxy* CreateProxyObjectForIntQuery(PlayerController* PlayerController, FName StatName);// 0xffffff8523219000 0x7a9cb47b00

--------------------------------
Class: LogoutCallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7a9cb5c680
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7a9cb5c700
	LogoutCallbackProxy* Logout(Object* WorldContextObject, PlayerController* PlayerController);// 0xffffff8523219000 0x7a9cb47940

--------------------------------
Class: OnlineBeacon.Actor.Object
	float BeaconConnectionInitialTimeout;//[Offset: 0x338, Size: 0x4] 0x7a9cb39000
	float BeaconConnectionTimeout;//[Offset: 0x33c, Size: 0x4] 0x7a9cb37390
	NetDriver* NetDriver;//[Offset: 0x340, Size: 0x8] 0x7a9cb5e700

--------------------------------
Class: OnlineBeaconClient.OnlineBeacon.Actor.Object
	OnlineBeaconHostObject* BeaconOwner;//[Offset: 0x360, Size: 0x8] 0x7a9cb5e500
	NetConnection* BeaconConnection;//[Offset: 0x368, Size: 0x8] 0x7a9cb5e580
	enum ConnectionState;//[Offset: 0x370, Size: 0x1] 0x7a9cb5e680
	void ClientOnConnected();// 0xffffff8523219000 0x7a9cb47860

--------------------------------
Class: OnlineBeaconHostObject.Actor.Object
	FString BeaconTypeName;//[Offset: 0x330, Size: 0x10] 0x7a9cb38f20
	class OnlineBeaconClient* ClientBeaconActorClass;//[Offset: 0x340, Size: 0x8] 0x7a9cb5e280
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x348, Size: 0x10] 0x7a9cb5e380

--------------------------------
Class: OnlineBeaconHost.OnlineBeacon.Actor.Object
	int ListenPort;//[Offset: 0x360, Size: 0x4] 0x7a9cb38f90
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x368, Size: 0x10] 0x7a9cb5e480

--------------------------------
Class: OnlineEngineInterfaceImpl.OnlineEngineInterface.Object
	FName VoiceSubsystemNameOverride;//[Offset: 0x28, Size: 0x8] 0x7a9cb38eb0

--------------------------------
Class: OnlinePIESettings.DeveloperSettings.Object
	bool bOnlinePIEEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7a9cb5e100
	PIELoginSettingsInternal[] Logins;//[Offset: 0x40, Size: 0x10] 0x7a9cb5e200

--------------------------------
Class: PIELoginSettingsInternal
	FString ID;//[Offset: 0x0, Size: 0x10] 0x7aa083b290
	FString Token;//[Offset: 0x10, Size: 0x10] 0x7aa083b300
	FString Type;//[Offset: 0x20, Size: 0x10] 0x7aa083b370
	byte[] TokenBytes;//[Offset: 0x30, Size: 0x10] 0x7aa089d080

--------------------------------
Class: OnlineSessionClient.OnlineSession.Object
	bool bIsFromInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1] 0x7a9cb5e000
	bool bHandlingDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 0x1] 0x7a9cb5e080

--------------------------------
Class: PartyBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	FString DestSessionId;//[Offset: 0x3e0, Size: 0x10] 0x7a9cb38cf0
	PartyReservation PendingReservation;//[Offset: 0x3f0, Size: 0x40] 0x7a9cb5db00
	enum RequestType;//[Offset: 0x430, Size: 0x1] 0x7a9cb5dc00
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 0x1] 0x7a9cb5dc80
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x432, Size: 0x1] 0x7a9cb5dd00
	void ServerUpdateReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0xffffff8523219000 0x7a9cb4ac00
	void ServerReservationRequest(FString SessionId, const PartyReservation Reservation);// 0xffffff8523219000 0x7a9cb4ace0
	void ServerCancelReservationRequest(const UniqueNetIdRepl PartyLeader);// 0xffffff8523219000 0x7a9cb47400
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0xffffff8523219000 0x7a9cb474e0
	void ClientSendReservationFull();// 0xffffff8523219000 0x7a9cb475c0
	void ClientReservationResponse(byte ReservationResponse);// 0xffffff8523219000 0x7a9cb476a0
	void ClientCancelReservationResponse(byte ReservationResponse);// 0xffffff8523219000 0x7a9cb47780

--------------------------------
Class: PartyReservation
	int TeamNum;//[Offset: 0x0, Size: 0x4] 0x7aa083b0d0
	UniqueNetIdRepl PartyLeader;//[Offset: 0x8, Size: 0x28] 0x7aa089cc80
	PlayerReservation[] PartyMembers;//[Offset: 0x30, Size: 0x10] 0x7aa089cf80

--------------------------------
Class: PlayerReservation
	UniqueNetIdRepl UniqueId;//[Offset: 0x0, Size: 0x28] 0x7aa089ce00
	FString ValidationStr;//[Offset: 0x28, Size: 0x10] 0x7aa083b140
	FString Platform;//[Offset: 0x38, Size: 0x10] 0x7aa083b1b0
	bool bAllowCrossplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7aa089ce80
	float ElapsedTime;//[Offset: 0x4c, Size: 0x4] 0x7aa083b220

--------------------------------
Class: PartyBeaconHost.OnlineBeaconHostObject.Actor.Object
	PartyBeaconState* State;//[Offset: 0x358, Size: 0x8] 0x7a9cb5da00
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1] 0x7a9cb5da80
	float SessionTimeoutSecs;//[Offset: 0x3c4, Size: 0x4] 0x7a9cb38c10
	float TravelSessionTimeoutSecs;//[Offset: 0x3c8, Size: 0x4] 0x7a9cb38c80

--------------------------------
Class: PartyBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 0x8] 0x7a9cb38890
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4] 0x7a9cb38900
	int MaxReservations;//[Offset: 0x34, Size: 0x4] 0x7a9cb38970
	int NumTeams;//[Offset: 0x38, Size: 0x4] 0x7a9cb389e0
	int NumPlayersPerTeam;//[Offset: 0x3c, Size: 0x4] 0x7a9cb38a50
	FName TeamAssignmentMethod;//[Offset: 0x40, Size: 0x8] 0x7a9cb38ac0
	int ReservedHostTeamNum;//[Offset: 0x48, Size: 0x4] 0x7a9cb38b30
	int ForceTeamNum;//[Offset: 0x4c, Size: 0x4] 0x7a9cb38ba0
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7a9cb5d880
	PartyReservation[] Reservations;//[Offset: 0x58, Size: 0x10] 0x7a9cb5d980

--------------------------------
Class: QuitMatchCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9cb5f600
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7a9cb5f700
	QuitMatchCallbackProxy* QuitMatch(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, byte Outcome, int TurnTimeoutInSeconds);// 0xffffff8523219000 0x7a9cb4ab20

--------------------------------
Class: ShowLoginUICallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7a9cb5f300
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7a9cb5f380
	ShowLoginUICallbackProxy* ShowExternalLoginUI(Object* WorldContextObject, PlayerController* InPlayerController);// 0xffffff8523219000 0x7a9cb4aa40

--------------------------------
Class: TestBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	void ServerPong();// 0xffffff8523219000 0x7a9cb4a880
	void ClientPing();// 0xffffff8523219000 0x7a9cb4a960

--------------------------------
Class: TestBeaconHost.OnlineBeaconHostObject.Actor.Object

--------------------------------
Class: TurnBasedBlueprintLibrary.BlueprintFunctionLibrary.Object
	void RegisterTurnBasedMatchInterfaceObject(Object* WorldContextObject, PlayerController* PlayerController, Object* Object);// 0xffffff8523219000 0x7a9cb4a500
	void GetPlayerDisplayName(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, int PlayerIndex, out FString PlayerDisplayName);// 0xffffff8523219000 0x7a9cb4a5e0
	void GetMyPlayerIndex(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out int PlayerIndex);// 0xffffff8523219000 0x7a9cb4a6c0
	void GetIsMyTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out bool bIsMyTurn);// 0xffffff8523219000 0x7a9cb4a7a0

--------------------------------
Class: SynthComponent.SceneComponent.ActorComponent.Object
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1] 0x7a9cb5f980
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 0x1] 0x7a9cb5fa00
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 0x1] 0x7a9cb5fa80
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x258, Size: 0x1] 0x7a9cb5fb00
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x258, Size: 0x1] 0x7a9cb5fb80
	SoundAttenuation* AttenuationSettings;//[Offset: 0x260, Size: 0x8] 0x7a9cb5fc00
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x268, Size: 0x2e8] 0x7a9cb5fc80
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x550, Size: 0x8] 0x7a9cb5fd00
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x558, Size: 0x50] 0x7a963d7c20
	SoundClass* SoundClass;//[Offset: 0x5a8, Size: 0x8] 0x7a9cb5fe80
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x5b0, Size: 0x8] 0x7a9cb5ff00
	SoundSubmix* SoundSubmix;//[Offset: 0x5b8, Size: 0x8] 0x7a9cb5ff80
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x5c0, Size: 0x10] 0x7a9cb5e800
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x5d0, Size: 0x10] 0x7a9cb5e900
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x5e0, Size: 0x10] 0x7a9cb5ea00
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f0, Size: 0x1] 0x7a9cb5ea80
	bool bIsPreviewSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f0, Size: 0x1] 0x7a9cb5eb00
	int EnvelopeFollowerAttackTime;//[Offset: 0x5f4, Size: 0x4] 0x7a9cb38350
	int EnvelopeFollowerReleaseTime;//[Offset: 0x5f8, Size: 0x4] 0x7a9cb383c0
	delegate OnAudioEnvelopeValue;//[Offset: 0x600, Size: 0x10] 0x7a9cb5eb80
	SynthSound* Synth;//[Offset: 0x630, Size: 0x8] 0x7a9cb5ec00
	AudioComponent* AudioComponent;//[Offset: 0x638, Size: 0x8] 0x7a9cb5ec80
	void Stop();// 0xffffff8523219000 0x7a9cb4a0a0
	void Start();// 0xffffff8523219000 0x7a9cb4a180
	void SetVolumeMultiplier(float VolumeMultiplier);// 0xffffff8523219000 0x7a9cb4a260
	void SetSubmixSend(SoundSubmix* Submix, float SendLevel);// 0xffffff8523219000 0x7a9cb4a340
	bool IsPlaying();// 0xffffff8523219000 0x7a9cb4a420

--------------------------------
Class: SynthSound.SoundWaveProcedural.SoundWave.SoundBase.Object

--------------------------------
Class: VoipListenerSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object
	bool IsIdling();// 0xffffff8523219000 0x7a9cb49fc0

--------------------------------
Class: AndroidPermissionCallbackProxy.Object
	delegate OnPermissionsGrantedDynamicDelegate;//[Offset: 0x28, Size: 0x10] 0x7a9cb71000

--------------------------------
Class: AndroidPermissionFunctionLibrary.BlueprintFunctionLibrary.Object
	bool CheckPermission(FString permission);// 0xffffff8523219000 0x7a9cb49d20
	AndroidPermissionCallbackProxy* AcquirePermissions(out const FString[] Permissions);// 0xffffff8523219000 0x7a9cb49e00

--------------------------------
Class: CustomMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool SetCustomMeshTriangles(out const CustomMeshTriangle[] Triangles);// 0xffffff8523219000 0x7a9cb49a80
	void ClearCustomMeshTriangles();// 0xffffff8523219000 0x7a9cb49b60
	void AddCustomMeshTriangles(out const CustomMeshTriangle[] Triangles);// 0xffffff8523219000 0x7a9cb49c40

--------------------------------
Class: CustomMeshTriangle
	Vector Vertex0;//[Offset: 0x0, Size: 0xc] 0x7aa089cb00
	Vector Vertex1;//[Offset: 0xc, Size: 0xc] 0x7aa089cb80
	Vector Vertex2;//[Offset: 0x18, Size: 0xc] 0x7aa089cc00

--------------------------------
Class: KismetProceduralMeshLibrary.BlueprintFunctionLibrary.Object
	void SliceProceduralMesh(ProceduralMeshComponent* InProcMesh, Vector PlanePosition, Vector PlaneNormal, bool bCreateOtherHalf, out ProceduralMeshComponent* OutOtherHalfProcMesh, enum CapOption, MaterialInterface* CapMaterial);// 0xffffff8523219000 0x7a9cb491c0
	void GetSectionFromStaticMesh(StaticMesh* InMesh, int LODIndex, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0xffffff8523219000 0x7a9cb492a0
	void GetSectionFromProceduralMesh(ProceduralMeshComponent* InProcMesh, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0xffffff8523219000 0x7a9cb49380
	void GenerateBoxMesh(Vector BoxRadius, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0xffffff8523219000 0x7a9cb49460
	void CreateGridMeshWelded(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, float GridSpacing);// 0xffffff8523219000 0x7a9cb49540
	void CreateGridMeshTriangles(int NumX, int NumY, bool bWinding, out int[] Triangles);// 0xffffff8523219000 0x7a9cb49620
	void CreateGridMeshSplit(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, out Vector2D[] UV1s, float GridSpacing);// 0xffffff8523219000 0x7a9cb49700
	void CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent* StaticMeshComponent, int LODIndex, ProceduralMeshComponent* ProcMeshComponent, bool bCreateCollision);// 0xffffff8523219000 0x7a9cb497e0
	void ConvertQuadToTriangles(out int[] Triangles, int Vert0, int Vert1, int Vert2, int Vert3);// 0xffffff8523219000 0x7a9cb498c0
	void CalculateTangentsForMesh(out const Vector[] Vertices, out const int[] Triangles, out const Vector2D[] UVs, out Vector[] Normals, out ProcMeshTangent[] Tangents);// 0xffffff8523219000 0x7a9cb499a0

--------------------------------
Class: ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 0x1] 0x7a9cb74b00
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a9, Size: 0x1] 0x7a9cb74b80
	BodySetup* ProcMeshBodySetup;//[Offset: 0x5b0, Size: 0x8] 0x7a9cb74c00
	ProcMeshSection[] ProcMeshSections;//[Offset: 0x5b8, Size: 0x10] 0x7a9cb74d00
	KConvexElem[] CollisionConvexElems;//[Offset: 0x5c8, Size: 0x10] 0x7a9cb74e00
	BoxSphereBounds LocalBounds;//[Offset: 0x5d8, Size: 0x1c] 0x7a9cb74e80
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x5f8, Size: 0x10] 0x7a9cb74f80
	void UpdateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents);// 0xffffff8523219000 0x7a9cb4c1e0
	void UpdateMeshSection(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents);// 0xffffff8523219000 0x7a9cb4c2c0
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0xffffff8523219000 0x7a9cb4c3a0
	bool IsMeshSectionVisible(int SectionIndex);// 0xffffff8523219000 0x7a9cb4c480
	int GetNumSections();// 0xffffff8523219000 0x7a9cb4c560
	void CreateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0xffffff8523219000 0x7a9cb4c640
	void CreateMeshSection(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0xffffff8523219000 0x7a9cb4c720
	void ClearMeshSection(int SectionIndex);// 0xffffff8523219000 0x7a9cb4c800
	void ClearCollisionConvexMeshes();// 0xffffff8523219000 0x7a9cb4c8e0
	void ClearAllMeshSections();// 0xffffff8523219000 0x7a9cb4c9c0
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0xffffff8523219000 0x7a9cb490e0

--------------------------------
Class: ProcMeshSection
	ProcMeshVertex[] ProcVertexBuffer;//[Offset: 0x0, Size: 0x10] 0x7aa089c880
	uint32[] ProcIndexBuffer;//[Offset: 0x10, Size: 0x10] 0x7aa089c900
	Box SectionLocalBox;//[Offset: 0x20, Size: 0x1c] 0x7aa089c980
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x7aa089ca00
	bool bSectionVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x7aa089ca80

--------------------------------
Class: ProcMeshVertex
	Vector Position;//[Offset: 0x0, Size: 0xc] 0x7aa089e400
	Vector Normal;//[Offset: 0xc, Size: 0xc] 0x7aa089e480
	ProcMeshTangent Tangent;//[Offset: 0x18, Size: 0x10] 0x7aa089e600
	Color Color;//[Offset: 0x28, Size: 0x4] 0x7aa089e680
	Vector2D UV0;//[Offset: 0x2c, Size: 0x8] 0x7aa089e700
	Vector2D UV1;//[Offset: 0x34, Size: 0x8] 0x7aa089c680
	Vector2D UV2;//[Offset: 0x3c, Size: 0x8] 0x7aa089c700
	Vector2D UV3;//[Offset: 0x44, Size: 0x8] 0x7aa089c780

--------------------------------
Class: ProcMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0xc] 0x7aa089e500
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7aa089e580

--------------------------------
Class: BallActor.Actor.Object
	StaticMeshComponent* m_smesh_compo;//[Offset: 0x330, Size: 0x8] 0x7a9cb74880
	StaticMesh* m_smesh;//[Offset: 0x338, Size: 0x8] 0x7a9cb74900
	StaticMeshComponent* m_shadow_compo;//[Offset: 0x340, Size: 0x8] 0x7a9cb74980
	StaticMesh* m_shadow;//[Offset: 0x348, Size: 0x8] 0x7a9cb74a00

--------------------------------
Class: NavCollision.NavCollisionBase.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x80, Size: 0x10] 0x7a9c84c580
	NavCollisionBox[] BoxCollision;//[Offset: 0x90, Size: 0x10] 0x7a9c84a580
	class NavArea* AreaClass;//[Offset: 0xa0, Size: 0x8] 0x7a9c84a600
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x7a9c84a680
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1] 0x7a9c84a700

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 0xc] 0x7a9cb08d80
	float Radius;//[Offset: 0xc, Size: 0x4] 0x7a9ca69bd0
	float Height;//[Offset: 0x10, Size: 0x4] 0x7a9ca69c40

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 0xc] 0x7a9cb08e00
	Vector Extent;//[Offset: 0xc, Size: 0xc] 0x7a9cb08e80

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4] 0x7a9c7ff350
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4] 0x7a9c7ff3c0
	Color DrawColor;//[Offset: 0x34, Size: 0x4] 0x7a9c84b000
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4] 0x7a9c84b080
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7a9c84b100
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7a9c84b180
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x7a9c84b200
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x7a9c84b280
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x7a9c84b300
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x7a9c84b380
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1] 0x7a9c84b400
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1] 0x7a9c84b480
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1] 0x7a9c84b500
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1] 0x7a9c84b580
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1] 0x7a9c849500
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1] 0x7a9c849580
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1] 0x7a9c849600
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1] 0x7a9c849680
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1] 0x7a9c849700
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1] 0x7a9c849780

--------------------------------
Class: BillboardActor.Actor.Object
	StaticMeshComponent* m_compo;//[Offset: 0x330, Size: 0x8] 0x7a9cb74680
	StaticMesh* m_mesh;//[Offset: 0x338, Size: 0x8] 0x7a9cb74700
	MaterialInstanceDynamic* m_material01;//[Offset: 0x340, Size: 0x8] 0x7a9cb74780
	MaterialInstanceDynamic* m_material02;//[Offset: 0x348, Size: 0x8] 0x7a9cb74800

--------------------------------
Class: BillboardMyclubActor.BillboardActor.Actor.Object

--------------------------------
Class: BillboardUCLActor.BillboardActor.Actor.Object

--------------------------------
Class: CardActor.Actor.Object
	StaticMeshComponent* m_smesh_compo;//[Offset: 0x330, Size: 0x8] 0x7a9cb74580
	StaticMesh* m_smesh;//[Offset: 0x338, Size: 0x8] 0x7a9cb74600

--------------------------------
Class: Game2DBaseActor.Actor.Object
	PesSkeletalMeshComponent* m_mesh_compo;//[Offset: 0x330, Size: 0x8] 0x7a9cb74480
	SkeletalMesh* m_mesh;//[Offset: 0x338, Size: 0x8] 0x7a9cb74500

--------------------------------
Class: PesSkeletalMeshComponent.PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: GoalNetActor.Actor.Object
	Material* m_pMaterialNet;//[Offset: 0x330, Size: 0x8] 0x7a9cb74300
	Material* m_pMaterialRope;//[Offset: 0x338, Size: 0x8] 0x7a9cb74380
	ProceduralMeshComponent* m_pMeshCompo;//[Offset: 0x340, Size: 0x8] 0x7a9cb74400

--------------------------------
Class: ObjectBaseActor.Actor.Object
	StaticMeshComponent* m_mesh_compo;//[Offset: 0x330, Size: 0x8] 0x7a9cb76300
	StaticMesh* m_mesh;//[Offset: 0x338, Size: 0x8] 0x7a9cb74280

--------------------------------
Class: PesBluePrintLibrary.BlueprintFunctionLibrary.Object
	void SetARScale(float Scale);// 0xffffff8523219000 0x7a9cb4be60
	void SetARRotate(Rotator rot);// 0xffffff8523219000 0x7a9cb4bf40
	void SetARPos(out const Vector pos);// 0xffffff8523219000 0x7a9cb4c020
	int GetGameQuality();// 0xffffff8523219000 0x7a9cb4c100

--------------------------------
Class: PesChildSkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PesGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: PesHUD.HUD.Actor.Object

--------------------------------
Class: PesModuleBridge.Actor.Object

--------------------------------
Class: PesPlayerCameraManager.PlayerCameraManager.Actor.Object

--------------------------------
Class: PesPlayerController.PlayerController.Controller.Actor.Object

--------------------------------
Class: PlayerActor.Actor.Object
	PesSkeletalMeshComponent* m_mesh_compo;//[Offset: 0x330, Size: 0x8] 0x7a9cbb6400
	SkeletalMesh* m_mesh;//[Offset: 0x338, Size: 0x8] 0x7a9cbb6480
	MaterialInstanceDynamic*[] m_materials_body;//[Offset: 0x340, Size: 0x10] 0x7a9cbb6580
	PesChildSkeletalMeshComponent* m_face_compo;//[Offset: 0x350, Size: 0x8] 0x7a9cbb6600
	SkeletalMesh* m_face;//[Offset: 0x358, Size: 0x8] 0x7a9cbb6680
	MaterialInstanceDynamic*[] m_materials_face;//[Offset: 0x360, Size: 0x10] 0x7a9cbb6780
	PesChildSkeletalMeshComponent* m_hair_compo;//[Offset: 0x370, Size: 0x8] 0x7a9cbb6800
	SkeletalMesh* m_hair;//[Offset: 0x378, Size: 0x8] 0x7a9cbb6880
	MaterialInstanceDynamic*[] m_materials_hair;//[Offset: 0x380, Size: 0x10] 0x7a9cbb6980
	Texture* m_real_hair_tex;//[Offset: 0x390, Size: 0x8] 0x7a9cbb6a00
	PesChildSkeletalMeshComponent* m_spike_compo;//[Offset: 0x398, Size: 0x8] 0x7a9cbb6a80
	SkeletalMesh* m_spike;//[Offset: 0x3a0, Size: 0x8] 0x7a9cbb6b00
	PesChildSkeletalMeshComponent* m_modelshadow_compo;//[Offset: 0x3a8, Size: 0x8] 0x7a9cbb6b80
	SkeletalMesh* m_modelshadow;//[Offset: 0x3b0, Size: 0x8] 0x7a9cbb6c00
	Texture* m_test_tex;//[Offset: 0x408, Size: 0x8] 0x7a9cbb6c80

--------------------------------
Class: PlayerActorHigh.PlayerActor.Actor.Object

--------------------------------
Class: PlayerActorLow.PlayerActor.Actor.Object

--------------------------------
Class: PlayerActorLowest.PlayerActor.Actor.Object

--------------------------------
Class: ShadowBoardActor.Actor.Object
	StaticMeshComponent* m_shadow_board_compo;//[Offset: 0x330, Size: 0x8] 0x7a9cbb8400
	StaticMesh* m_shadow_board_mesh;//[Offset: 0x338, Size: 0x8] 0x7a9cbb6380

--------------------------------
Class: ShadowBoardActorNight.ShadowBoardActor.Actor.Object

--------------------------------
Class: ShadowBoardActorDay.ShadowBoardActor.Actor.Object

--------------------------------
Class: ShadowBoardActorBallNight.ShadowBoardActor.Actor.Object

--------------------------------
Class: ShadowBoardActorBallDay.ShadowBoardActor.Actor.Object

--------------------------------
Class: StadiumLoader.Actor.Object
	Texture* m_fieldTexture;//[Offset: 0x348, Size: 0x8] 0x7a9cbb8280
	void UnLoadedCall();// 0xffffff8523219000 0x7a9cb9b5a0
	void UnLoad();// 0xffffff8523219000 0x7a9cb9b680
	void SetTimeOfDay(int timeofday);// 0xffffff8523219000 0x7a9cb9b760
	void SetIndexFieldColorMapTex(byte indexFieldColorMapTex);// 0xffffff8523219000 0x7a9cb9b840
	void LoadedCall();// 0xffffff8523219000 0x7a9cb9b920
	void Load();// 0xffffff8523219000 0x7a9cb9ba00
	bool IsLoaded();// 0xffffff8523219000 0x7a9cb9bae0
	void DestroyLoader();// 0xffffff8523219000 0x7a9cb9bbc0

--------------------------------
Class: InputCoreTypes.Object

--------------------------------
Class: FontBulkData.Object

--------------------------------
Class: FontFaceInterface.Interface.Object

--------------------------------
Class: FontProviderInterface.Interface.Object

--------------------------------
Class: SlateTypes.Object

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8] 0x7a9cbb8200

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: SlateWidgetStyleContainerInterface.Interface.Object

--------------------------------
Class: ButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ButtonStyle ButtonStyle;//[Offset: 0x30, Size: 0x278] 0x7a9cbb8180

--------------------------------
Class: CheckBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x30, Size: 0x580] 0x7a9cbb8100

--------------------------------
Class: ComboBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboBoxStyle ComboBoxStyle;//[Offset: 0x30, Size: 0x3d8] 0x7a9cbb8080

--------------------------------
Class: ComboBoxStyle.SlateWidgetStyle
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x8, Size: 0x3a0] 0x7aa085b880
	SlateSound PressedSlateSound;//[Offset: 0x3a8, Size: 0x18] 0x7aa085b900
	SlateSound SelectionChangeSlateSound;//[Offset: 0x3c0, Size: 0x18] 0x7aa085ba00

--------------------------------
Class: ComboButtonStyle.SlateWidgetStyle
	ButtonStyle ButtonStyle;//[Offset: 0x8, Size: 0x278] 0x7aa085b680
	SlateBrush DownArrowImage;//[Offset: 0x280, Size: 0x88] 0x7aa085b700
	SlateBrush MenuBorderBrush;//[Offset: 0x308, Size: 0x88] 0x7aa085b780
	Margin MenuBorderPadding;//[Offset: 0x390, Size: 0x10] 0x7aa085b800

--------------------------------
Class: ComboButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x30, Size: 0x3a0] 0x7a9cbb8000

--------------------------------
Class: EditableTextBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextBoxStyle EditableTextBoxStyle;//[Offset: 0x30, Size: 0x7f0] 0x7a9cbb7f80

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundImageNormal;//[Offset: 0x8, Size: 0x88] 0x7aa085ff80
	SlateBrush BackgroundImageHovered;//[Offset: 0x90, Size: 0x88] 0x7aa085e780
	SlateBrush BackgroundImageFocused;//[Offset: 0x118, Size: 0x88] 0x7aa085e800
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x1a0, Size: 0x88] 0x7aa085e880
	Margin Padding;//[Offset: 0x228, Size: 0x10] 0x7aa085e900
	SlateFontInfo Font;//[Offset: 0x238, Size: 0x50] 0x7aa085e980
	SlateColor ForegroundColor;//[Offset: 0x288, Size: 0x28] 0x7aa085ea00
	SlateColor BackgroundColor;//[Offset: 0x2b0, Size: 0x28] 0x7aa085ea80
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x2d8, Size: 0x28] 0x7aa085eb00
	Margin HScrollBarPadding;//[Offset: 0x300, Size: 0x10] 0x7aa085eb80
	Margin VScrollBarPadding;//[Offset: 0x310, Size: 0x10] 0x7aa085ec00
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x320, Size: 0x4d0] 0x7aa085f100

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8] 0x7aa085c400
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8] 0x7aa085c480
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20] 0x7aa085a600
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8] 0x7aa0836a60
	int Size;//[Offset: 0x48, Size: 0x4] 0x7aa0836ad0

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4] 0x7aa08369f0
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7aa085c500
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7aa085c580
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8] 0x7aa085c600
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10] 0x7aa085a580

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 0x88] 0x7aa085ec80
	SlateBrush VerticalBackgroundImage;//[Offset: 0x90, Size: 0x88] 0x7aa085ed00
	SlateBrush VerticalTopSlotImage;//[Offset: 0x118, Size: 0x88] 0x7aa085ed80
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1a0, Size: 0x88] 0x7aa085ee00
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x228, Size: 0x88] 0x7aa085ee80
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2b0, Size: 0x88] 0x7aa085ef00
	SlateBrush NormalThumbImage;//[Offset: 0x338, Size: 0x88] 0x7aa085ef80
	SlateBrush HoveredThumbImage;//[Offset: 0x3c0, Size: 0x88] 0x7aa085f000
	SlateBrush DraggedThumbImage;//[Offset: 0x448, Size: 0x88] 0x7aa085f080

--------------------------------
Class: EditableTextWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextStyle EditableTextStyle;//[Offset: 0x30, Size: 0x218] 0x7a9cbb7f00

--------------------------------
Class: EditableTextStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x50] 0x7aa085e000
	SlateColor ColorAndOpacity;//[Offset: 0x58, Size: 0x28] 0x7aa085e080
	SlateBrush BackgroundImageSelected;//[Offset: 0x80, Size: 0x88] 0x7aa085e100
	SlateBrush BackgroundImageComposing;//[Offset: 0x108, Size: 0x88] 0x7aa085e180
	SlateBrush CaretImage;//[Offset: 0x190, Size: 0x88] 0x7aa085e200

--------------------------------
Class: ProgressWidgetStyle.SlateWidgetStyleContainerBase.Object
	ProgressBarStyle ProgressBarStyle;//[Offset: 0x30, Size: 0x1a0] 0x7a9cbb7e80

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x88] 0x7aa0920a80
	SlateBrush FillImage;//[Offset: 0x90, Size: 0x88] 0x7aa0920b00
	SlateBrush MarqueeImage;//[Offset: 0x118, Size: 0x88] 0x7aa0920b80

--------------------------------
Class: ScrollBarWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x30, Size: 0x4d0] 0x7a9cbb7e00

--------------------------------
Class: ScrollBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBoxStyle ScrollBoxStyle;//[Offset: 0x30, Size: 0x228] 0x7a9cbb7d80

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 0x88] 0x7aa089f380
	SlateBrush BottomShadowBrush;//[Offset: 0x90, Size: 0x88] 0x7aa089f400
	SlateBrush LeftShadowBrush;//[Offset: 0x118, Size: 0x88] 0x7aa089f480
	SlateBrush RightShadowBrush;//[Offset: 0x1a0, Size: 0x88] 0x7aa089f500

--------------------------------
Class: SlateSettings.Object
	bool bExplicitCanvasChildZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7a9cbb7d00

--------------------------------
Class: SpinBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	SpinBoxStyle SpinBoxStyle;//[Offset: 0x30, Size: 0x2e8] 0x7a9cbb7c80

--------------------------------
Class: SpinBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundBrush;//[Offset: 0x8, Size: 0x88] 0x7aa0894200
	SlateBrush HoveredBackgroundBrush;//[Offset: 0x90, Size: 0x88] 0x7aa0892180
	SlateBrush ActiveFillBrush;//[Offset: 0x118, Size: 0x88] 0x7aa0892200
	SlateBrush InactiveFillBrush;//[Offset: 0x1a0, Size: 0x88] 0x7aa0892280
	SlateBrush ArrowsImage;//[Offset: 0x228, Size: 0x88] 0x7aa0892300
	SlateColor ForegroundColor;//[Offset: 0x2b0, Size: 0x28] 0x7aa0892380
	Margin TextPadding;//[Offset: 0x2d8, Size: 0x10] 0x7aa0892400

--------------------------------
Class: TextBlockWidgetStyle.SlateWidgetStyleContainerBase.Object
	TextBlockStyle TextBlockStyle;//[Offset: 0x30, Size: 0x268] 0x7a9cbb7c00

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x50] 0x7aa0890600
	SlateColor ColorAndOpacity;//[Offset: 0x58, Size: 0x28] 0x7aa0890680
	Vector2D ShadowOffset;//[Offset: 0x80, Size: 0x8] 0x7aa0890700
	LinearColor ShadowColorAndOpacity;//[Offset: 0x88, Size: 0x10] 0x7aa0890780
	SlateColor SelectedBackgroundColor;//[Offset: 0x98, Size: 0x28] 0x7aa0890800
	LinearColor HighlightColor;//[Offset: 0xc0, Size: 0x10] 0x7aa0890880
	SlateBrush HighlightShape;//[Offset: 0xd0, Size: 0x88] 0x7aa0890900
	SlateBrush StrikeBrush;//[Offset: 0x158, Size: 0x88] 0x7aa0890980
	SlateBrush UnderlineBrush;//[Offset: 0x1e0, Size: 0x88] 0x7aa0890a00

--------------------------------
Class: ImageWriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	void ExportToDisk(Texture* Texture, FString Filename, out const ImageWriteOptions Options);// 0xffffff8523219000 0x7a9cb9b4c0

--------------------------------
Class: ImageWriteOptions
	enum Format;//[Offset: 0x0, Size: 0x1] 0x7aa0921e00
	delegate OnComplete;//[Offset: 0x4, Size: 0x10] 0x7aa0921e80
	int CompressionQuality;//[Offset: 0x14, Size: 0x4] 0x7aa083c870
	bool bOverwriteFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7aa0921f00
	bool bAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x7aa0921f80

--------------------------------
Class: GameNetworkManagerSettings.Object
	int MinDynamicBandwidth;//[Offset: 0x28, Size: 0x4] 0x7a9cbc1c10
	int MaxDynamicBandwidth;//[Offset: 0x2c, Size: 0x4] 0x7a9cbc1c80
	int TotalNetBandwidth;//[Offset: 0x30, Size: 0x4] 0x7a9cbc0010
	int BadPingThreshold;//[Offset: 0x34, Size: 0x4] 0x7a9cbc0080
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7a9cbb8d80
	float StandbyRxCheatTime;//[Offset: 0x3c, Size: 0x4] 0x7a9cbc00f0
	float StandbyTxCheatTime;//[Offset: 0x40, Size: 0x4] 0x7a9cbc0160
	float PercentMissingForRxStandby;//[Offset: 0x44, Size: 0x4] 0x7a9cbc01d0
	float PercentMissingForTxStandby;//[Offset: 0x48, Size: 0x4] 0x7a9cbc0240
	float PercentForBadPing;//[Offset: 0x4c, Size: 0x4] 0x7a9cbc02b0
	float JoinInProgressStandbyWaitTime;//[Offset: 0x50, Size: 0x4] 0x7a9cbc0320

--------------------------------
Class: GameSessionSettings.Object
	int MaxSpectators;//[Offset: 0x28, Size: 0x4] 0x7a9cbc1b30
	int MaxPlayers;//[Offset: 0x2c, Size: 0x4] 0x7a9cbc1ba0
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7a9cbb8d00

--------------------------------
Class: GeneralEngineSettings.Object

--------------------------------
Class: GeneralProjectSettings.Object
	FString CompanyName;//[Offset: 0x28, Size: 0x10] 0x7a9cbc15f0
	FString CompanyDistinguishedName;//[Offset: 0x38, Size: 0x10] 0x7a9cbc1660
	FString CopyrightNotice;//[Offset: 0x48, Size: 0x10] 0x7a9cbc16d0
	FString Description;//[Offset: 0x58, Size: 0x10] 0x7a9cbc1740
	FString Homepage;//[Offset: 0x68, Size: 0x10] 0x7a9cbc17b0
	FString LicensingTerms;//[Offset: 0x78, Size: 0x10] 0x7a9cbc1820
	FString PrivacyPolicy;//[Offset: 0x88, Size: 0x10] 0x7a9cbc1890
	Guid ProjectID;//[Offset: 0x98, Size: 0x10] 0x7a9cbb8800
	FString ProjectName;//[Offset: 0xa8, Size: 0x10] 0x7a9cbc1900
	FString ProjectVersion;//[Offset: 0xb8, Size: 0x10] 0x7a9cbc1970
	FString SupportContact;//[Offset: 0xc8, Size: 0x10] 0x7a9cbc19e0
	FText ProjectDisplayedTitle;//[Offset: 0xd8, Size: 0x18] 0x7a9cbc1a50
	FText ProjectDebugTitleInfo;//[Offset: 0xf0, Size: 0x18] 0x7a9cbc1ac0
	bool bShouldWindowPreserveAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1] 0x7a9cbb8880
	bool bUseBorderlessWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1] 0x7a9cbb8900
	bool bStartInVR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 0x1] 0x7a9cbb8980
	bool bStartInAR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b, Size: 0x1] 0x7a9cbb8a00
	bool bSupportAR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x7a9cbb8a80
	bool bAllowWindowResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1] 0x7a9cbb8b00
	bool bAllowClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1] 0x7a9cbb8b80
	bool bAllowMaximize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f, Size: 0x1] 0x7a9cbb8c00
	bool bAllowMinimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x7a9cbb8c80

--------------------------------
Class: HudSettings.Object
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7a9cbb8680
	FName[] DebugDisplay;//[Offset: 0x30, Size: 0x10] 0x7a9cbb8700

--------------------------------
Class: ARBlueprintLibrary.BlueprintFunctionLibrary.Object
	void UnpinComponent(SceneComponent* ComponentToUnpin);// 0xffffff8523219000 0x7a9cb9d440
	void StopARSession();// 0xffffff8523219000 0x7a9cb9d520
	void StartARSession(ARSessionConfig* SessionConfig);// 0xffffff8523219000 0x7a9cb9d600
	void SetAlignmentTransform(out const Transform InAlignmentTransform);// 0xffffff8523219000 0x7a9cb9d6e0
	void RemovePin(ARPin* PinToRemove);// 0xffffff8523219000 0x7a9cb9d7c0
	ARPin* PinComponentToTraceResult(SceneComponent* ComponentToPin, out const ARTraceResult TraceResult, const FName DebugName);// 0xffffff8523219000 0x7a9cb9d8a0
	ARPin* PinComponent(SceneComponent* ComponentToPin, out const Transform PinToWorldTransform, ARTrackedGeometry* TrackedGeometry, const FName DebugName);// 0xffffff8523219000 0x7a9cb9d980
	void PauseARSession();// 0xffffff8523219000 0x7a9cb9da60
	ARTraceResult[] LineTraceTrackedObjects3D(const Vector Start, const Vector End, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0xffffff8523219000 0x7a9cb9db40
	ARTraceResult[] LineTraceTrackedObjects(const Vector2D ScreenCoord, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0xffffff8523219000 0x7a9cb9dc20
	bool IsSessionTypeSupported(enum SessionType);// 0xffffff8523219000 0x7a9cb9dd00
	enum GetWorldMappingStatus();// 0xffffff8523219000 0x7a9cb9dde0
	enum GetTrackingQuality();// 0xffffff8523219000 0x7a9cb9dec0
	ARVideoFormat[] GetSupportedVideoFormats(enum SessionType);// 0xffffff8523219000 0x7a9cb9dfa0
	ARSessionConfig* GetSessionConfig();// 0xffffff8523219000 0x7a9cb9e080
	Vector[] GetPointCloud();// 0xffffff8523219000 0x7a9cb9e160
	ARLightEstimate* GetCurrentLightEstimate();// 0xffffff8523219000 0x7a9cb9e240
	ARTextureCameraImage* GetCameraImage();// 0xffffff8523219000 0x7a9cb9e320
	ARTextureCameraDepth* GetCameraDepth();// 0xffffff8523219000 0x7a9cb9e400
	ARSessionStatus GetARSessionStatus();// 0xffffff8523219000 0x7a9cb9e4e0
	ARTrackedPoint*[] GetAllTrackedPoints();// 0xffffff8523219000 0x7a9cb9e5c0
	ARPlaneGeometry*[] GetAllTrackedPlanes();// 0xffffff8523219000 0x7a9cb9e6a0
	ARTrackedImage*[] GetAllTrackedImages();// 0xffffff8523219000 0x7a9cb9adc0
	AREnvironmentCaptureProbe*[] GetAllTrackedEnvironmentCaptureProbes();// 0xffffff8523219000 0x7a9cb9aea0
	ARPin*[] GetAllPins();// 0xffffff8523219000 0x7a9cb9af80
	ARTrackedGeometry*[] GetAllGeometries();// 0xffffff8523219000 0x7a9cb9b060
	void DebugDrawTrackedGeometry(ARTrackedGeometry* TrackedGeometry, Object* WorldContextObject, LinearColor Color, float OutlineThickness, float PersistForSeconds);// 0xffffff8523219000 0x7a9cb9b140
	void DebugDrawPin(ARPin* ARPin, Object* WorldContextObject, LinearColor Color, float Scale, float PersistForSeconds);// 0xffffff8523219000 0x7a9cb9b220
	ARCandidateImage* AddRuntimeCandidateImage(ARSessionConfig* SessionConfig, Texture2D* CandidateTexture, FString FriendlyName, float PhysicalWidth);// 0xffffff8523219000 0x7a9cb9b300
	bool AddManualEnvironmentCaptureProbe(Vector Location, Vector Extent);// 0xffffff8523219000 0x7a9cb9b3e0

--------------------------------
Class: ARSessionConfig.DataAsset.Object
	enum WorldAlignment;//[Offset: 0x30, Size: 0x1] 0x7a9cbbf080
	enum SessionType;//[Offset: 0x31, Size: 0x1] 0x7a9cbbf180
	enum PlaneDetectionMode;//[Offset: 0x32, Size: 0x1] 0x7a9cbbf280
	bool bHorizontalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1] 0x7a9cbbf300
	bool bVerticalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x7a9cbbf380
	bool bEnableAutoFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x7a9cbbf400
	enum LightEstimationMode;//[Offset: 0x36, Size: 0x1] 0x7a9cbbf500
	enum FrameSyncMode;//[Offset: 0x37, Size: 0x1] 0x7a9cbbf600
	bool bEnableAutomaticCameraOverlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7a9cbbf680
	bool bEnableAutomaticCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7a9cbbf700
	bool bResetCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x7a9cbbf780
	bool bResetTrackedObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1] 0x7a9cbbd700
	ARCandidateImage*[] CandidateImages;//[Offset: 0x40, Size: 0x10] 0x7a9cbbd800
	int MaxNumSimultaneousImagesTracked;//[Offset: 0x50, Size: 0x4] 0x7a9cbc2a80
	enum EnvironmentCaptureProbeType;//[Offset: 0x54, Size: 0x1] 0x7a9cbbd900
	byte[] WorldMapData;//[Offset: 0x58, Size: 0x10] 0x7a9cbbda00
	ARCandidateObject*[] CandidateObjects;//[Offset: 0x68, Size: 0x10] 0x7a9cbbdb00
	ARVideoFormat DesiredVideoFormat;//[Offset: 0x78, Size: 0xc] 0x7a9cbbdb80
	enum FaceTrackingDirection;//[Offset: 0x84, Size: 0x1] 0x7a9cbbdc80
	enum FaceTrackingUpdate;//[Offset: 0x85, Size: 0x1] 0x7a9cbbdd80
	byte[] SerializedARCandidateImageDatabase;//[Offset: 0x88, Size: 0x10] 0x7a9cbbde80
	bool ShouldResetTrackedObjects();// 0xffffff8523219000 0x7a9cbd1820
	bool ShouldResetCameraTracking();// 0xffffff8523219000 0x7a9cbd1900
	bool ShouldRenderCameraOverlay();// 0xffffff8523219000 0x7a9cbd19e0
	bool ShouldEnableCameraTracking();// 0xffffff8523219000 0x7a9cbd1ac0
	bool ShouldEnableAutoFocus();// 0xffffff8523219000 0x7a9cbd1ba0
	void SetWorldMapData(byte[] WorldMapData);// 0xffffff8523219000 0x7a9cbd1c80
	void SetResetTrackedObjects(bool bNewValue);// 0xffffff8523219000 0x7a9cb9e780
	void SetResetCameraTracking(bool bNewValue);// 0xffffff8523219000 0x7a9cb9e860
	void SetFaceTrackingUpdate(enum InUpdate);// 0xffffff8523219000 0x7a9cb9e940
	void SetFaceTrackingDirection(enum InDirection);// 0xffffff8523219000 0x7a9cb9ea20
	void SetEnableAutoFocus(bool bNewValue);// 0xffffff8523219000 0x7a9cb9eb00
	void SetDesiredVideoFormat(ARVideoFormat NewFormat);// 0xffffff8523219000 0x7a9cb9ebe0
	void SetCandidateObjectList(out const ARCandidateObject*[] InCandidateObjects);// 0xffffff8523219000 0x7a9cb9ecc0
	byte[] GetWorldMapData();// 0xffffff8523219000 0x7a9cb9eda0
	enum GetWorldAlignment();// 0xffffff8523219000 0x7a9cb9ee80
	enum GetSessionType();// 0xffffff8523219000 0x7a9cb9ef60
	enum GetPlaneDetectionMode();// 0xffffff8523219000 0x7a9cb9f040
	int GetMaxNumSimultaneousImagesTracked();// 0xffffff8523219000 0x7a9cb9f120
	enum GetLightEstimationMode();// 0xffffff8523219000 0x7a9cb9f200
	enum GetFrameSyncMode();// 0xffffff8523219000 0x7a9cb9f2e0
	enum GetFaceTrackingUpdate();// 0xffffff8523219000 0x7a9cb9f3c0
	enum GetFaceTrackingDirection();// 0xffffff8523219000 0x7a9cb9f4a0
	enum GetEnvironmentCaptureProbeType();// 0xffffff8523219000 0x7a9cb9f580
	ARVideoFormat GetDesiredVideoFormat();// 0xffffff8523219000 0x7a9cb9f660
	ARCandidateObject*[] GetCandidateObjectList();// 0xffffff8523219000 0x7a9cb9f740
	ARCandidateImage*[] GetCandidateImageList();// 0xffffff8523219000 0x7a9cb9f820
	void AddCandidateObject(ARCandidateObject* CandidateObject);// 0xffffff8523219000 0x7a9cb9f900
	void AddCandidateImage(ARCandidateImage* NewCandidateImage);// 0xffffff8523219000 0x7a9cb9f9e0

--------------------------------
Class: ARCandidateImage.DataAsset.Object
	Texture2D* CandidateTexture;//[Offset: 0x30, Size: 0x8] 0x7a9cbf1180
	FString FriendlyName;//[Offset: 0x38, Size: 0x10] 0x7a9cbc3810
	float Width;//[Offset: 0x48, Size: 0x4] 0x7a9cbc3880
	float Height;//[Offset: 0x4c, Size: 0x4] 0x7a9cbc38f0
	enum Orientation;//[Offset: 0x50, Size: 0x1] 0x7a9cbf1280
	float GetPhysicalWidth();// 0xffffff8523219000 0x7a9cbd27e0
	float GetPhysicalHeight();// 0xffffff8523219000 0x7a9cbd28c0
	enum GetOrientation();// 0xffffff8523219000 0x7a9cbd29a0
	FString GetFriendlyName();// 0xffffff8523219000 0x7a9cbd2a80
	Texture2D* GetCandidateTexture();// 0xffffff8523219000 0x7a9cbd2b60

--------------------------------
Class: ARCandidateObject.DataAsset.Object
	byte[] CandidateObjectData;//[Offset: 0x30, Size: 0x10] 0x7a9cbf2e80
	FString FriendlyName;//[Offset: 0x40, Size: 0x10] 0x7a9cbc3730
	Box BoundingBox;//[Offset: 0x50, Size: 0x1c] 0x7a9cbf2f00
	void SetCandidateObjectData(out const byte[] InCandidateObject);// 0xffffff8523219000 0x7a9cbd2380
	void SetBoundingBox(out const Box InBoundingBox);// 0xffffff8523219000 0x7a9cbd2460
	FString GetFriendlyName();// 0xffffff8523219000 0x7a9cbd2540
	byte[] GetCandidateObjectData();// 0xffffff8523219000 0x7a9cbd2620
	Box GetBoundingBox();// 0xffffff8523219000 0x7a9cbd2700

--------------------------------
Class: ARVideoFormat
	int FPS;//[Offset: 0x0, Size: 0x4] 0x7aa083c480
	int Width;//[Offset: 0x4, Size: 0x4] 0x7aa083c4f0
	int Height;//[Offset: 0x8, Size: 0x4] 0x7aa083c560

--------------------------------
Class: ARPin.Object
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x28, Size: 0x8] 0x7a9cbbd400
	SceneComponent* PinnedComponent;//[Offset: 0x30, Size: 0x8] 0x7a9cbbd480
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x30] 0x7a9cbbd500
	Transform LocalToAlignedTrackingTransform;//[Offset: 0x70, Size: 0x30] 0x7a9cbbd580
	enum TrackingState;//[Offset: 0xa0, Size: 0x1] 0x7a9cbbd680
	delegate OnARTrackingStateChanged;//[Offset: 0xc0, Size: 0x10] 0x7a9cbbb600
	delegate OnARTransformUpdated;//[Offset: 0xd0, Size: 0x10] 0x7a9cbbb680
	enum GetTrackingState();// 0xffffff8523219000 0x7a9cb9fac0
	ARTrackedGeometry* GetTrackedGeometry();// 0xffffff8523219000 0x7a9cb9fba0
	SceneComponent* GetPinnedComponent();// 0xffffff8523219000 0x7a9cb9fc80
	Transform GetLocalToWorldTransform();// 0xffffff8523219000 0x7a9cb9fd60
	Transform GetLocalToTrackingTransform();// 0xffffff8523219000 0x7a9cb9fe40
	FName GetDebugName();// 0xffffff8523219000 0x7a9cb9ff20
	void DebugDraw(World* World, out const LinearColor Color, float Scale, float PersistForSeconds);// 0xffffff8523219000 0x7a9cb9caa0

--------------------------------
Class: ARTrackedGeometry.Object
	Transform LocalToTrackingTransform;//[Offset: 0x30, Size: 0x30] 0x7a9cbf0380
	Transform LocalToAlignedTrackingTransform;//[Offset: 0x60, Size: 0x30] 0x7a9cbf0400
	enum TrackingState;//[Offset: 0x90, Size: 0x1] 0x7a9cbf0500
	bool IsTracked();// 0xffffff8523219000 0x7a9cbd3880
	enum GetTrackingState();// 0xffffff8523219000 0x7a9cbd3960
	Transform GetLocalToWorldTransform();// 0xffffff8523219000 0x7a9cbd0080
	Transform GetLocalToTrackingTransform();// 0xffffff8523219000 0x7a9cbd0160
	float GetLastUpdateTimestamp();// 0xffffff8523219000 0x7a9cbd0240
	int GetLastUpdateFrameNumber();// 0xffffff8523219000 0x7a9cbd0320
	FName GetDebugName();// 0xffffff8523219000 0x7a9cbd0400

--------------------------------
Class: ARTraceResult
	float DistanceFromCamera;//[Offset: 0x0, Size: 0x4] 0x7aa083c5d0
	enum TraceChannel;//[Offset: 0x4, Size: 0x1] 0x7aa0921700
	Transform LocalToTrackingTransform;//[Offset: 0x10, Size: 0x30] 0x7aa0921780
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x40, Size: 0x8] 0x7aa0921800

--------------------------------
Class: ARLightEstimate.Object

--------------------------------
Class: ARTextureCameraImage.ARTexture.Texture.Object

--------------------------------
Class: ARTexture.Texture.Object
	enum TextureType;//[Offset: 0xb8, Size: 0x1] 0x7a9cbf0d00
	float Timestamp;//[Offset: 0xbc, Size: 0x4] 0x7a9cbc20e0
	Guid ExternalTextureGuid;//[Offset: 0xc0, Size: 0x10] 0x7a9cbf0d80
	Vector2D Size;//[Offset: 0xd0, Size: 0x8] 0x7a9cbf0e00

--------------------------------
Class: ARTextureCameraDepth.ARTexture.Texture.Object
	enum DepthQuality;//[Offset: 0xd8, Size: 0x1] 0x7a9cbf0a80
	enum DepthAccuracy;//[Offset: 0xd9, Size: 0x1] 0x7a9cbf0b80
	bool bIsTemporallySmoothed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1] 0x7a9cbf0c00

--------------------------------
Class: ARSessionStatus
	FString AdditionalInfo;//[Offset: 0x0, Size: 0x10] 0x7aa083c410
	enum Status;//[Offset: 0x10, Size: 0x1] 0x7aa0921680

--------------------------------
Class: ARTrackedPoint.ARTrackedGeometry.Object

--------------------------------
Class: ARPlaneGeometry.ARTrackedGeometry.Object
	Vector Center;//[Offset: 0xc8, Size: 0xc] 0x7a9cbf2080
	Vector Extent;//[Offset: 0xd4, Size: 0xc] 0x7a9cbf2100
	ARPlaneGeometry* SubsumedBy;//[Offset: 0xf0, Size: 0x8] 0x7a9cbf0080
	ARPlaneGeometry* GetSubsumedBy();// 0xffffff8523219000 0x7a9cbd3500
	Vector GetExtent();// 0xffffff8523219000 0x7a9cbd35e0
	Vector GetCenter();// 0xffffff8523219000 0x7a9cbd36c0
	Vector[] GetBoundaryPolygonInLocalSpace();// 0xffffff8523219000 0x7a9cbd37a0

--------------------------------
Class: ARTrackedImage.ARTrackedGeometry.Object
	bool bIsTracked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x7a9cbf1e00
	ARCandidateImage* DetectedImage;//[Offset: 0xd0, Size: 0x8] 0x7a9cbf1e80
	Vector2D EstimatedSize;//[Offset: 0xd8, Size: 0x8] 0x7a9cbf1f00
	Vector2D GetEstimateSize();// 0xffffff8523219000 0x7a9cbd3340
	ARCandidateImage* GetDetectedImage();// 0xffffff8523219000 0x7a9cbd3420

--------------------------------
Class: AREnvironmentCaptureProbe.ARTrackedGeometry.Object
	AREnvironmentCaptureProbeTexture* EnvironmentCaptureTexture;//[Offset: 0xd8, Size: 0x8] 0x7a9cbf1580
	Vector GetExtent();// 0xffffff8523219000 0x7a9cbd2d20
	AREnvironmentCaptureProbeTexture* GetEnvironmentCaptureTexture();// 0xffffff8523219000 0x7a9cbd2e00

--------------------------------
Class: AREnvironmentCaptureProbeTexture.TextureCube.Texture.Object
	enum TextureType;//[Offset: 0x110, Size: 0x1] 0x7a9cbf0880
	float Timestamp;//[Offset: 0x114, Size: 0x4] 0x7a9cbc2070
	Guid ExternalTextureGuid;//[Offset: 0x118, Size: 0x10] 0x7a9cbf0900
	Vector2D Size;//[Offset: 0x128, Size: 0x8] 0x7a9cbf0980

--------------------------------
Class: ARTraceResultLibrary.BlueprintFunctionLibrary.Object
	ARTrackedGeometry* GetTrackedGeometry(out const ARTraceResult TraceResult);// 0xffffff8523219000 0x7a9cb9cfe0
	enum GetTraceChannel(out const ARTraceResult TraceResult);// 0xffffff8523219000 0x7a9cb9d0c0
	Transform GetLocalToWorldTransform(out const ARTraceResult TraceResult);// 0xffffff8523219000 0x7a9cb9d1a0
	Transform GetLocalToTrackingTransform(out const ARTraceResult TraceResult);// 0xffffff8523219000 0x7a9cb9d280
	float GetDistanceFromCamera(out const ARTraceResult TraceResult);// 0xffffff8523219000 0x7a9cb9d360

--------------------------------
Class: ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object

--------------------------------
Class: ARSaveWorldAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x7a9cbbbf00
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x7a9cbbbf80
	ARSaveWorldAsyncTaskBlueprintProxy* ARSaveWorld(Object* WorldContextObject);// 0xffffff8523219000 0x7a9cb9cf00

--------------------------------
Class: ARGetCandidateObjectAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x7a9cbbbc00
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x7a9cbbbc80
	ARGetCandidateObjectAsyncTaskBlueprintProxy* ARGetCandidateObject(Object* WorldContextObject, Vector Location, Vector Extent);// 0xffffff8523219000 0x7a9cb9ce20

--------------------------------
Class: ARBasicLightEstimate.ARLightEstimate.Object
	float AmbientIntensityLumens;//[Offset: 0x28, Size: 0x4] 0x7a9cbc0fd0
	float AmbientColorTemperatureKelvin;//[Offset: 0x2c, Size: 0x4] 0x7a9cbc1040
	LinearColor AmbientColor;//[Offset: 0x30, Size: 0x10] 0x7a9cbbbb00
	float GetAmbientIntensityLumens();// 0xffffff8523219000 0x7a9cb9cb80
	float GetAmbientColorTemperatureKelvin();// 0xffffff8523219000 0x7a9cb9cc60
	LinearColor GetAmbientColor();// 0xffffff8523219000 0x7a9cb9cd40

--------------------------------
Class: ARSharedWorldGameMode.GameMode.GameModeBase.Info.Actor.Object
	int BufferSizePerChunk;//[Offset: 0x414, Size: 0x4] 0x7a9cbc2a10
	void SetPreviewImageData(byte[] ImageData);// 0xffffff8523219000 0x7a9cbd14a0
	void SetARWorldSharingIsReady();// 0xffffff8523219000 0x7a9cbd1580
	void SetARSharedWorldData(byte[] ARWorldData);// 0xffffff8523219000 0x7a9cbd1660
	ARSharedWorldGameState* GetARSharedWorldGameState();// 0xffffff8523219000 0x7a9cbd1740

--------------------------------
Class: ARSharedWorldGameState.GameState.GameStateBase.Info.Actor.Object
	byte[] PreviewImageData;//[Offset: 0x390, Size: 0x10] 0x7a9cbbff80
	byte[] ARWorldData;//[Offset: 0x3a0, Size: 0x10] 0x7a9cbbe800
	int PreviewImageBytesTotal;//[Offset: 0x3b0, Size: 0x4] 0x7a9cbc2460
	int ARWorldBytesTotal;//[Offset: 0x3b4, Size: 0x4] 0x7a9cbc24d0
	int PreviewImageBytesDelivered;//[Offset: 0x3b8, Size: 0x4] 0x7a9cbc2540
	int ARWorldBytesDelivered;//[Offset: 0x3bc, Size: 0x4] 0x7a9cbc25b0
	void K2_OnARWorldMapIsReady();// 0xffffff8523219000 0x7a9cbd0a20

--------------------------------
Class: ARSharedWorldPlayerController.PlayerController.Controller.Actor.Object
	void ServerMarkReadyForReceiving();// 0xffffff8523219000 0x7a9cbd06a0
	void ClientUpdatePreviewImageData(int Offset, const byte[] Buffer);// 0xffffff8523219000 0x7a9cbd0780
	void ClientUpdateARWorldData(int Offset, const byte[] Buffer);// 0xffffff8523219000 0x7a9cbd0860
	void ClientInitSharedWorld(int PreviewImageSize, int ARWorldDataSize);// 0xffffff8523219000 0x7a9cbd0940

--------------------------------
Class: ARSkyLight.SkyLight.Info.Actor.Object
	AREnvironmentCaptureProbe* CaptureProbe;//[Offset: 0x340, Size: 0x8] 0x7a9cbbfb00
	void SetEnvironmentCaptureProbe(AREnvironmentCaptureProbe* InCaptureProbe);// 0xffffff8523219000 0x7a9cbd04e0

--------------------------------
Class: ARTraceResultDummy.Object

--------------------------------
Class: ARFaceGeometry.ARTrackedGeometry.Object
	Vector LookAtTarget;//[Offset: 0xc8, Size: 0xc] 0x7a9cbf1700
	bool bIsTracked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1] 0x7a9cbf1780
	<enum,float> BlendShapes;//[Offset: 0xd8, Size: 0x50] 0x7a963da420
	Transform GetWorldSpaceEyeTransform(enum Eye);// 0xffffff8523219000 0x7a9cbd2ee0
	Transform GetLocalSpaceEyeTransform(enum Eye);// 0xffffff8523219000 0x7a9cbd2fc0
	float GetBlendShapeValue(enum BlendShape);// 0xffffff8523219000 0x7a9cbd30a0
	<enum,float> GetBlendShapes();// 0xffffff8523219000 0x7a9cbd3260

--------------------------------
Class: ARTrackedObject.ARTrackedGeometry.Object
	ARCandidateObject* DetectedObject;//[Offset: 0xc8, Size: 0x8] 0x7a9cbf1480
	ARCandidateObject* GetDetectedObject();// 0xffffff8523219000 0x7a9cbd2c40

--------------------------------
Class: ARTypesDummyClass.Object

--------------------------------
Class: HeadMountedDisplayFunctionLibrary.BlueprintFunctionLibrary.Object
	void UpdateExternalTrackingHMDPosition(out const Transform ExternalTrackingTransform);// 0xffffff8523219000 0x7a9cbd4140
	void SetWorldToMetersScale(Object* WorldContext, float NewScale);// 0xffffff8523219000 0x7a9cbd4220
	void SetTrackingOrigin(byte Origin);// 0xffffff8523219000 0x7a9cbd4300
	void SetSpectatorScreenTexture(Texture* InTexture);// 0xffffff8523219000 0x7a9cbd43e0
	void SetSpectatorScreenModeTexturePlusEyeLayout(Vector2D EyeRectMin, Vector2D EyeRectMax, Vector2D TextureRectMin, Vector2D TextureRectMax, bool bDrawEyeFirst, bool bClearBlack, bool bUseAlpha);// 0xffffff8523219000 0x7a9cbd44c0
	void SetSpectatorScreenMode(enum Mode);// 0xffffff8523219000 0x7a9cbd45a0
	void SetClippingPlanes(float Near, float Far);// 0xffffff8523219000 0x7a9cbd4680
	void ResetOrientationAndPosition(float Yaw, byte Options);// 0xffffff8523219000 0x7a9cbd4760
	bool IsSpectatorScreenModeControllable();// 0xffffff8523219000 0x7a9cbd4840
	bool IsInLowPersistenceMode();// 0xffffff8523219000 0x7a9cbd4920
	bool IsHeadMountedDisplayEnabled();// 0xffffff8523219000 0x7a9cbd4a00
	bool IsHeadMountedDisplayConnected();// 0xffffff8523219000 0x7a9cbd4ae0
	bool IsDeviceTracking(out const XRDeviceId XRDeviceId);// 0xffffff8523219000 0x7a9cbd4bc0
	bool HasValidTrackingPosition();// 0xffffff8523219000 0x7a9cbd4ca0
	float GetWorldToMetersScale(Object* WorldContext);// 0xffffff8523219000 0x7a9cbd4d80
	void GetVRFocusState(out bool bUseFocus, out bool bHasFocus);// 0xffffff8523219000 0x7a9cbd4e60
	Transform GetTrackingToWorldTransform(Object* WorldContext);// 0xffffff8523219000 0x7a9cbd4f40
	void GetTrackingSensorParameters(out Vector Origin, out Rotator Rotation, out float LeftFOV, out float RightFOV, out float TopFOV, out float BottomFOV, out float Distance, out float NearPlane, out float FarPlane, out bool IsActive, int Index);// 0xffffff8523219000 0x7a9cbd5020
	byte GetTrackingOrigin();// 0xffffff8523219000 0x7a9cbd5100
	float GetScreenPercentage();// 0xffffff8523219000 0x7a9cbd51e0
	void GetPositionalTrackingCameraParameters(out Vector CameraOrigin, out Rotator CameraRotation, out float HFOV, out float VFOV, out float CameraDistance, out float NearPlane, out float FarPlane);// 0xffffff8523219000 0x7a9cbd52c0
	float GetPixelDensity();// 0xffffff8523219000 0x7a9cbd53a0
	void GetOrientationAndPosition(out Rotator DeviceRotation, out Vector DevicePosition);// 0xffffff8523219000 0x7a9cbd5480
	int GetNumOfTrackingSensors();// 0xffffff8523219000 0x7a9cbd5560
	byte GetHMDWornState();// 0xffffff8523219000 0x7a9cbd5640
	FName GetHMDDeviceName();// 0xffffff8523219000 0x7a9cbd1d60
	void GetDeviceWorldPose(Object* WorldContext, out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0xffffff8523219000 0x7a9cbd1e40
	void GetDevicePose(out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0xffffff8523219000 0x7a9cbd1f20
	XRDeviceId[] EnumerateTrackedDevices(const FName SystemId, enum DeviceType);// 0xffffff8523219000 0x7a9cbd2000
	void EnableLowPersistenceMode(bool bEnable);// 0xffffff8523219000 0x7a9cbd20e0
	bool EnableHMD(bool bEnable);// 0xffffff8523219000 0x7a9cbd21c0
	void CalibrateExternalTrackingToHMD(out const Transform ExternalTrackingTransform);// 0xffffff8523219000 0x7a9cbd22a0

--------------------------------
Class: XRDeviceId
	FName SystemName;//[Offset: 0x0, Size: 0x8] 0x7aa083c330
	int DeviceID;//[Offset: 0x8, Size: 0x4] 0x7aa083c3a0

--------------------------------
Class: MotionControllerComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PlayerIndex;//[Offset: 0x578, Size: 0x4] 0x7a9cbc4680
	enum Hand;//[Offset: 0x57c, Size: 0x1] 0x7a9cbf4a80
	FName MotionSource;//[Offset: 0x580, Size: 0x8] 0x7a9cbc46f0
	bool bDisableLowLatencyUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x588, Size: 0x1] 0x7a9cbf4b80
	enum CurrentTrackingStatus;//[Offset: 0x589, Size: 0x1] 0x7a9cbf4c80
	bool bDisplayDeviceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58a, Size: 0x1] 0x7a9cbf4d00
	FName DisplayModelSource;//[Offset: 0x58c, Size: 0x8] 0x7a9cbc4760
	StaticMesh* CustomDisplayMesh;//[Offset: 0x598, Size: 0x8] 0x7a9cbf4d80
	MaterialInterface*[] DisplayMeshMaterialOverrides;//[Offset: 0x5a0, Size: 0x10] 0x7a9cbf4e80
	PrimitiveComponent* DisplayComponent;//[Offset: 0x610, Size: 0x8] 0x7a9cbf4f00
	void SetTrackingSource(const enum NewSource);// 0xffffff8523219000 0x7a9cbd7240
	void SetTrackingMotionSource(const FName NewSource);// 0xffffff8523219000 0x7a9cbd7320
	void SetShowDeviceModel(const bool bShowControllerModel);// 0xffffff8523219000 0x7a9cbd3a40
	void SetDisplayModelSource(const FName NewDisplayModelSource);// 0xffffff8523219000 0x7a9cbd3b20
	void SetCustomDisplayMesh(StaticMesh* NewDisplayMesh);// 0xffffff8523219000 0x7a9cbd3c00
	void SetAssociatedPlayerIndex(const int NewPlayer);// 0xffffff8523219000 0x7a9cbd3ce0
	void OnMotionControllerUpdated();// 0xffffff8523219000 0x7a9cbd3dc0
	bool IsTracked();// 0xffffff8523219000 0x7a9cbd3ea0
	enum GetTrackingSource();// 0xffffff8523219000 0x7a9cbd3f80
	float GetParameterValue(FName InName, out bool bValueFound);// 0xffffff8523219000 0x7a9cbd4060

--------------------------------
Class: MotionTrackedDeviceFunctionLibrary.BlueprintFunctionLibrary.Object
	void SetIsControllerMotionTrackingEnabledByDefault(bool Enable);// 0xffffff8523219000 0x7a9cbd61a0
	bool IsMotionTrackingEnabledForSource(int PlayerIndex, FName SourceName);// 0xffffff8523219000 0x7a9cbd6280
	bool IsMotionTrackingEnabledForDevice(int PlayerIndex, enum Hand);// 0xffffff8523219000 0x7a9cbd6360
	bool IsMotionTrackingEnabledForComponent(const MotionControllerComponent* MotionControllerComponent);// 0xffffff8523219000 0x7a9cbd6440
	bool IsMotionTrackedDeviceCountManagementNecessary();// 0xffffff8523219000 0x7a9cbd6520
	bool IsMotionSourceTracking(int PlayerIndex, FName SourceName);// 0xffffff8523219000 0x7a9cbd6600
	int GetMotionTrackingEnabledControllerCount();// 0xffffff8523219000 0x7a9cbd66e0
	int GetMaximumMotionTrackedControllerCount();// 0xffffff8523219000 0x7a9cbd67c0
	FName GetActiveTrackingSystemName();// 0xffffff8523219000 0x7a9cbd68a0
	FName[] EnumerateMotionSources();// 0xffffff8523219000 0x7a9cbd6980
	bool EnableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0xffffff8523219000 0x7a9cbd6a60
	bool EnableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0xffffff8523219000 0x7a9cbd6b40
	bool EnableMotionTrackingForComponent(MotionControllerComponent* MotionControllerComponent);// 0xffffff8523219000 0x7a9cbd6c20
	void DisableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0xffffff8523219000 0x7a9cbd6d00
	void DisableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0xffffff8523219000 0x7a9cbd6ec0
	void DisableMotionTrackingOfControllersForPlayer(int PlayerIndex);// 0xffffff8523219000 0x7a9cbd6fa0
	void DisableMotionTrackingOfAllControllers();// 0xffffff8523219000 0x7a9cbd7080
	void DisableMotionTrackingForComponent(const MotionControllerComponent* MotionControllerComponent);// 0xffffff8523219000 0x7a9cbd7160

--------------------------------
Class: VRNotificationsComponent.ActorComponent.Object
	delegate HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate;//[Offset: 0xf8, Size: 0x10] 0x7aa0852880
	delegate HMDTrackingInitializedDelegate;//[Offset: 0x108, Size: 0x10] 0x7aa0852900
	delegate HMDRecenteredDelegate;//[Offset: 0x118, Size: 0x10] 0x7aa0852980
	delegate HMDLostDelegate;//[Offset: 0x128, Size: 0x10] 0x7aa0852a00
	delegate HMDReconnectedDelegate;//[Offset: 0x138, Size: 0x10] 0x7aa0852a80
	delegate HMDConnectCanceledDelegate;//[Offset: 0x148, Size: 0x10] 0x7aa0852b00
	delegate HMDPutOnHeadDelegate;//[Offset: 0x158, Size: 0x10] 0x7aa0852b80
	delegate HMDRemovedFromHeadDelegate;//[Offset: 0x168, Size: 0x10] 0x7aa0852c00
	delegate VRControllerRecenteredDelegate;//[Offset: 0x178, Size: 0x10] 0x7aa0852c80

--------------------------------
Class: XRAssetFunctionLibrary.BlueprintFunctionLibrary.Object
	PrimitiveComponent* AddNamedDeviceVisualizationComponentBlocking(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId);// 0xffffff8523219000 0x7a9cbd5fe0
	PrimitiveComponent* AddDeviceVisualizationComponentBlocking(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform);// 0xffffff8523219000 0x7a9cbd60c0

--------------------------------
Class: AsyncTask_LoadXRDeviceVisComponent.BlueprintAsyncActionBase.Object
	delegate OnModelLoaded;//[Offset: 0x30, Size: 0x10] 0x7a9cbf5400
	delegate OnLoadFailure;//[Offset: 0x40, Size: 0x10] 0x7a9cbf5480
	PrimitiveComponent* SpawnedComponent;//[Offset: 0x58, Size: 0x8] 0x7a9cbf5500
	AsyncTask_LoadXRDeviceVisComponent* AddNamedDeviceVisualizationComponentAsync(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId, out PrimitiveComponent* NewComponent);// 0xffffff8523219000 0x7a9cbd5e20
	AsyncTask_LoadXRDeviceVisComponent* AddDeviceVisualizationComponentAsync(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform, out PrimitiveComponent* NewComponent);// 0xffffff8523219000 0x7a9cbd5f00

--------------------------------
Class: FoliageInstancedStaticMeshComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate OnInstanceTakePointDamage;//[Offset: 0x788, Size: 0x10] 0x7a9cbf7800
	delegate OnInstanceTakeRadialDamage;//[Offset: 0x798, Size: 0x10] 0x7a9cbf7880

--------------------------------
Class: FoliageStatistics.BlueprintFunctionLibrary.Object
	int FoliageOverlappingSphereCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0xffffff8523219000 0x7a9cbd8740
	int FoliageOverlappingBoxCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Box Box);// 0xffffff8523219000 0x7a9cbd8820

--------------------------------
Class: FoliageType.Object
	Guid UpdateGuid;//[Offset: 0x28, Size: 0x10] 0x7a9cbf9a80
	float Density;//[Offset: 0x38, Size: 0x4] 0x7a9cbc5e20
	float DensityAdjustmentFactor;//[Offset: 0x3c, Size: 0x4] 0x7a9cbc5e90
	float Radius;//[Offset: 0x40, Size: 0x4] 0x7a9cbc5f00
	enum Scaling;//[Offset: 0x44, Size: 0x1] 0x7a9cbf9b80
	FloatInterval ScaleX;//[Offset: 0x48, Size: 0x8] 0x7a9cbf9c00
	FloatInterval ScaleY;//[Offset: 0x50, Size: 0x8] 0x7a9cbf9c80
	FloatInterval ScaleZ;//[Offset: 0x58, Size: 0x8] 0x7a9cbf9d00
	FoliageVertexColorChannelMask VertexColorMaskByChannel;//[Offset: 0x60, Size: 0xc] 0x7a9cbf9d80
	byte VertexColorMask;//[Offset: 0x90, Size: 0x1] 0x7a9cbf9e00
	float VertexColorMaskThreshold;//[Offset: 0x94, Size: 0x4] 0x7a9cbc5f70
	bool VertexColorMaskInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x7a9cbf9e80
	FloatInterval ZOffset;//[Offset: 0x9c, Size: 0x8] 0x7a9cbf9f00
	bool AlignToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1] 0x7a9cbf9f80
	float AlignMaxAngle;//[Offset: 0xa8, Size: 0x4] 0x7a9cbc5fe0
	bool RandomYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x7a9cbfa000
	float RandomPitchAngle;//[Offset: 0xb0, Size: 0x4] 0x7a9cbc6050
	FloatInterval GroundSlopeAngle;//[Offset: 0xb4, Size: 0x8] 0x7a9cbfa080
	FloatInterval Height;//[Offset: 0xbc, Size: 0x8] 0x7a9cbfa100
	FName[] LandscapeLayers;//[Offset: 0xc8, Size: 0x10] 0x7a9cbfa180
	FName LandscapeLayer;//[Offset: 0xd8, Size: 0x8] 0x7a9cbc6130
	bool CollisionWithWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1] 0x7a9cbfa200
	Vector CollisionScale;//[Offset: 0xe4, Size: 0xc] 0x7a9cbfa280
	float MinimumLayerWeight;//[Offset: 0xf0, Size: 0x4] 0x7a9cbc61a0
	BoxSphereBounds MeshBounds;//[Offset: 0xf4, Size: 0x1c] 0x7a9cbfa300
	Vector LowBoundOriginRadius;//[Offset: 0x110, Size: 0xc] 0x7a9cbfa380
	byte Mobility;//[Offset: 0x11c, Size: 0x1] 0x7a9cbfa400
	Int32Interval CullDistance;//[Offset: 0x120, Size: 0x8] 0x7a9cbf8d00
	bool bEnableStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 0x1] 0x7a9cbfa480
	bool CastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x128, Size: 0x1] 0x7a9cbfa500
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x128, Size: 0x1] 0x7a9cbf8480
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x128, Size: 0x1] 0x7a9cbf8500
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x128, Size: 0x1] 0x7a9cbf8580
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x128, Size: 0x1] 0x7a9cbf8600
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x128, Size: 0x1] 0x7a9cbf8680
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x128, Size: 0x1] 0x7a9cbf8700
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x129, Size: 0x1] 0x7a9cbf8780
	int OverriddenLightMapRes;//[Offset: 0x12c, Size: 0x4] 0x7a9cbc6210
	enum LightmapType;//[Offset: 0x130, Size: 0x1] 0x7a9cbf8880
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x131, Size: 0x1] 0x7a9cbf8900
	BodyInstance BodyInstance;//[Offset: 0x138, Size: 0x148] 0x7a9cbf8980
	byte CustomNavigableGeometry;//[Offset: 0x280, Size: 0x1] 0x7a9cbf8a00
	LightingChannels LightingChannels;//[Offset: 0x281, Size: 0x1] 0x7a9cbf8a80
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x282, Size: 0x1] 0x7a9cbf8b00
	int CustomDepthStencilValue;//[Offset: 0x284, Size: 0x4] 0x7a9cbc6280
	float CollisionRadius;//[Offset: 0x288, Size: 0x4] 0x7a9cbc62f0
	float ShadeRadius;//[Offset: 0x28c, Size: 0x4] 0x7a9cbc6360
	int NumSteps;//[Offset: 0x290, Size: 0x4] 0x7a9cbc63d0
	float InitialSeedDensity;//[Offset: 0x294, Size: 0x4] 0x7a9cbc6440
	float AverageSpreadDistance;//[Offset: 0x298, Size: 0x4] 0x7a9cbc64b0
	float SpreadVariance;//[Offset: 0x29c, Size: 0x4] 0x7a9cbc4840
	int SeedsPerStep;//[Offset: 0x2a0, Size: 0x4] 0x7a9cbc48b0
	int DistributionSeed;//[Offset: 0x2a4, Size: 0x4] 0x7a9cbc4920
	float MaxInitialSeedOffset;//[Offset: 0x2a8, Size: 0x4] 0x7a9cbc4990
	bool bCanGrowInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1] 0x7a9cbf8b80
	bool bSpawnsInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 0x1] 0x7a9cbf8c00
	float MaxInitialAge;//[Offset: 0x2b0, Size: 0x4] 0x7a9cbc4a00
	float MaxAge;//[Offset: 0x2b4, Size: 0x4] 0x7a9cbc4a70
	float OverlapPriority;//[Offset: 0x2b8, Size: 0x4] 0x7a9cbc4ae0
	FloatInterval ProceduralScale;//[Offset: 0x2bc, Size: 0x8] 0x7a9cbf8c80
	RuntimeFloatCurve ScaleCurve;//[Offset: 0x2c8, Size: 0x88] 0x7a9cbf8d80
	int ChangeCount;//[Offset: 0x350, Size: 0x4] 0x7a9cbc4b50
	bool ReapplyDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 0x1] 0x7a9cbf8e00
	bool ReapplyRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x354, Size: 0x1] 0x7a9cbf8e80
	bool ReapplyAlignToNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x354, Size: 0x1] 0x7a9cbf8f00
	bool ReapplyRandomYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x354, Size: 0x1] 0x7a9cbf8f80
	bool ReapplyScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x354, Size: 0x1] 0x7a9cbf9000
	bool ReapplyScaleX;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x354, Size: 0x1] 0x7a9cbf9080
	bool ReapplyScaleY;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x354, Size: 0x1] 0x7a9cbf9100
	bool ReapplyScaleZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x354, Size: 0x1] 0x7a9cbf9180
	bool ReapplyRandomPitchAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x355, Size: 0x1] 0x7a9cbf9200
	bool ReapplyGroundSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x355, Size: 0x1] 0x7a9cbf9280
	bool ReapplyHeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x355, Size: 0x1] 0x7a9cbf9300
	bool ReapplyLandscapeLayers;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x355, Size: 0x1] 0x7a9cbf9380
	bool ReapplyZOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x355, Size: 0x1] 0x7a9cbf9400
	bool ReapplyCollisionWithWorld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x355, Size: 0x1] 0x7a9cbf9480
	bool ReapplyVertexColorMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x355, Size: 0x1] 0x7a9cbf7400
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x355, Size: 0x1] 0x7a9cbf7480

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4] 0x7af958fa50
	float Max;//[Offset: 0x4, Size: 0x4] 0x7af958fac0

--------------------------------
Class: FoliageVertexColorChannelMask
	bool UseMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7aa0922f80
	float MaskThreshold;//[Offset: 0x4, Size: 0x4] 0x7aa083bc30
	bool InvertMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7aa0923000

--------------------------------
Class: FoliageType_InstancedStaticMesh.FoliageType.Object
	StaticMesh* Mesh;//[Offset: 0x358, Size: 0x8] 0x7a9cbf9880
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x360, Size: 0x10] 0x7a9cbf9980
	class FoliageInstancedStaticMeshComponent* ComponentClass;//[Offset: 0x370, Size: 0x8] 0x7a9cbf9a00

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: InteractiveFoliageActor.StaticMeshActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x340, Size: 0x8] 0x7a9cbfb200
	Vector TouchingActorEntryPosition;//[Offset: 0x348, Size: 0xc] 0x7a9cbfb280
	Vector FoliageVelocity;//[Offset: 0x354, Size: 0xc] 0x7a9cbfb300
	Vector FoliageForce;//[Offset: 0x360, Size: 0xc] 0x7a9cbfb380
	Vector FoliagePosition;//[Offset: 0x36c, Size: 0xc] 0x7a9cbfb400
	float FoliageDamageImpulseScale;//[Offset: 0x378, Size: 0x4] 0x7a9cbc59c0
	float FoliageTouchImpulseScale;//[Offset: 0x37c, Size: 0x4] 0x7a9cbc5a30
	float FoliageStiffness;//[Offset: 0x380, Size: 0x4] 0x7a9cbc5aa0
	float FoliageStiffnessQuadratic;//[Offset: 0x384, Size: 0x4] 0x7a9cbc5b10
	float FoliageDamping;//[Offset: 0x388, Size: 0x4] 0x7a9cbc5b80
	float MaxDamageImpulse;//[Offset: 0x38c, Size: 0x4] 0x7a9cbc5bf0
	float MaxTouchImpulse;//[Offset: 0x390, Size: 0x4] 0x7a9cbc5c60
	float MaxForce;//[Offset: 0x394, Size: 0x4] 0x7a9cbc5cd0
	float Mass;//[Offset: 0x398, Size: 0x4] 0x7a9cbc5d40
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult OverlapInfo);// 0xffffff8523219000 0x7a9cbd8580

--------------------------------
Class: InteractiveFoliageComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ProceduralFoliageBlockingVolume.Volume.Brush.Actor.Object
	ProceduralFoliageVolume* ProceduralFoliageVolume;//[Offset: 0x368, Size: 0x8] 0x7a9cbfac00

--------------------------------
Class: ProceduralFoliageVolume.Volume.Brush.Actor.Object
	ProceduralFoliageComponent* ProceduralComponent;//[Offset: 0x368, Size: 0x8] 0x7a9cbfa700

--------------------------------
Class: ProceduralFoliageComponent.ActorComponent.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0xf8, Size: 0x8] 0x7a9cbfaa80
	float TileOverlap;//[Offset: 0x100, Size: 0x4] 0x7a9cbc58e0
	Volume* SpawningVolume;//[Offset: 0x108, Size: 0x8] 0x7a9cbfab00
	Guid ProceduralGuid;//[Offset: 0x110, Size: 0x10] 0x7a9cbfab80

--------------------------------
Class: ProceduralFoliageSpawner.Object
	int RandomSeed;//[Offset: 0x28, Size: 0x4] 0x7a9cbc56b0
	float TileSize;//[Offset: 0x2c, Size: 0x4] 0x7a9cbc5720
	int NumUniqueTiles;//[Offset: 0x30, Size: 0x4] 0x7a9cbc5790
	float MinimumQuadTreeSize;//[Offset: 0x34, Size: 0x4] 0x7a9cbc5800
	FoliageTypeObject[] FoliageTypes;//[Offset: 0x40, Size: 0x10] 0x7a9cbfa980
	bool bNeedsSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7a9cbfaa00
	void Simulate(int NumSteps);// 0xffffff8523219000 0x7a9cbd84a0

--------------------------------
Class: FoliageTypeObject
	Object* FoliageTypeObject;//[Offset: 0x0, Size: 0x8] 0x7aa0922d80
	FoliageType_InstancedStaticMesh* TypeInstance;//[Offset: 0x8, Size: 0x8] 0x7aa0922e00
	bool bIsAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7aa0922e80
	class FoliageType_InstancedStaticMesh* Type;//[Offset: 0x18, Size: 0x8] 0x7aa0922f00

--------------------------------
Class: ProceduralFoliageTile.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0x28, Size: 0x8] 0x7a9cbfa780
	ProceduralFoliageInstance[] InstancesArray;//[Offset: 0xd0, Size: 0x10] 0x7a9cbfa880

--------------------------------
Class: ProceduralFoliageInstance
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x7aa0922b80
	Quat Rotation;//[Offset: 0x10, Size: 0x10] 0x7aa0922c00
	Vector Normal;//[Offset: 0x20, Size: 0xc] 0x7aa0922c80
	float Age;//[Offset: 0x2c, Size: 0x4] 0x7aa083d830
	float Scale;//[Offset: 0x30, Size: 0x4] 0x7aa083bbc0
	FoliageType_InstancedStaticMesh* Type;//[Offset: 0x38, Size: 0x8] 0x7aa0922d00

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x330, Size: 0x8] 0x7a9cbfd480
	Guid LandscapeGuid;//[Offset: 0x338, Size: 0x10] 0x7a9cbfd500
	IntPoint LandscapeSectionOffset;//[Offset: 0x348, Size: 0x8] 0x7a9cbfd580
	int MaxLODLevel;//[Offset: 0x350, Size: 0x4] 0x7a9cbc80b0
	float LODDistanceFactor;//[Offset: 0x354, Size: 0x4] 0x7a9cbc8120
	byte LODFalloff;//[Offset: 0x358, Size: 0x1] 0x7a9cbfc080
	float ComponentScreenSizeToUseSubSections;//[Offset: 0x35c, Size: 0x4] 0x7a9cbc8190
	float LOD0DistributionSetting;//[Offset: 0x360, Size: 0x4] 0x7a9cbc6520
	float LODDistributionSetting;//[Offset: 0x364, Size: 0x4] 0x7a9cbc6590
	float TessellationComponentScreenSize;//[Offset: 0x368, Size: 0x4] 0x7a9cbc6600
	bool UseTessellationComponentScreenSizeFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1] 0x7a9cbfd600
	float TessellationComponentScreenSizeFalloff;//[Offset: 0x370, Size: 0x4] 0x7a9cbc6670
	int OccluderGeometryLOD;//[Offset: 0x374, Size: 0x4] 0x7a9cbc66e0
	int StaticLightingLOD;//[Offset: 0x378, Size: 0x4] 0x7a9cbc6750
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x380, Size: 0x8] 0x7a9cbfd680
	float StreamingDistanceMultiplier;//[Offset: 0x388, Size: 0x4] 0x7a9cbc67c0
	MaterialInterface* LandscapeMaterial;//[Offset: 0x390, Size: 0x8] 0x7a9cbfb600
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x398, Size: 0x8] 0x7a9cbfb680
	LandscapeProxyMaterialOverride[] LandscapeMaterialsOverride;//[Offset: 0x3a0, Size: 0x10] 0x7a9cbfb780
	float NegativeZBoundsExtension;//[Offset: 0x3b0, Size: 0x4] 0x7a9cbc6830
	float PositiveZBoundsExtension;//[Offset: 0x3b4, Size: 0x4] 0x7a9cbc68a0
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x3b8, Size: 0x10] 0x7a9cbfb880
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x3c8, Size: 0x10] 0x7a9cbfb980
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x3d8, Size: 0x10] 0x7a9cbfba80
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 0x1] 0x7a9cbfbb00
	float StaticLightingResolution;//[Offset: 0x450, Size: 0x4] 0x7a9cbc6910
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x454, Size: 0x1] 0x7a9cbfbb80
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x454, Size: 0x1] 0x7a9cbfbc00
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x454, Size: 0x1] 0x7a9cbfbc80
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x454, Size: 0x1] 0x7a9cbfbd00
	LightingChannels LightingChannels;//[Offset: 0x455, Size: 0x1] 0x7a9cbfbd80
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x456, Size: 0x1] 0x7a9cbfbe00
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x456, Size: 0x1] 0x7a9cbfbe80
	int CustomDepthStencilValue;//[Offset: 0x458, Size: 0x4] 0x7a9cbc6980
	float LDMaxDrawDistance;//[Offset: 0x45c, Size: 0x4] 0x7a9cbc69f0
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x460, Size: 0x18] 0x7a9cbfbf00
	int CollisionMipLevel;//[Offset: 0x478, Size: 0x4] 0x7a9cbc6a60
	int SimpleCollisionMipLevel;//[Offset: 0x47c, Size: 0x4] 0x7a9cbc6ad0
	float CollisionThickness;//[Offset: 0x480, Size: 0x4] 0x7a9cbc6b40
	BodyInstance BodyInstance;//[Offset: 0x488, Size: 0x148] 0x7a9cbfbf80
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d0, Size: 0x1] 0x7a9cbfc000
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d0, Size: 0x1] 0x7a9cbfc100
	int ComponentSizeQuads;//[Offset: 0x5d4, Size: 0x4] 0x7a9cbc6bb0
	int SubsectionSizeQuads;//[Offset: 0x5d8, Size: 0x4] 0x7a9cbc6c20
	int NumSubsections;//[Offset: 0x5dc, Size: 0x4] 0x7a9cbc6c90
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e0, Size: 0x1] 0x7a9cbfc180
	bool bUseDynamicMaterialInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 0x1] 0x7a9cbfc200
	enum NavigationGeometryGatheringMode;//[Offset: 0x5e2, Size: 0x1] 0x7a9cbfc300
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e3, Size: 0x1] 0x7a9cbfc380
	void SetLandscapeMaterialVectorParameterValue(FName ParameterName, LinearColor Value);// 0xffffff8523219000 0x7a9cbd7be0
	void SetLandscapeMaterialTextureParameterValue(FName ParameterName, Texture* Value);// 0xffffff8523219000 0x7a9cbd7cc0
	void SetLandscapeMaterialScalarParameterValue(FName ParameterName, float Value);// 0xffffff8523219000 0x7a9cbd7da0
	void EditorSetLandscapeMaterial(MaterialInterface* NewLandscapeMaterial);// 0xffffff8523219000 0x7a9cbd7e80
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0xffffff8523219000 0x7a9cbd7f60
	void ChangeUseTessellationComponentScreenSizeFalloff(bool InComponentScreenSizeToUseSubSections);// 0xffffff8523219000 0x7a9cbd8040
	void ChangeTessellationComponentScreenSizeFalloff(float InUseTessellationComponentScreenSizeFalloff);// 0xffffff8523219000 0x7a9cbd8120
	void ChangeTessellationComponentScreenSize(float InTessellationComponentScreenSize);// 0xffffff8523219000 0x7a9cbd8200
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0xffffff8523219000 0x7a9cbd82e0
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);// 0xffffff8523219000 0x7a9cbd83c0

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x578, Size: 0x10] 0x7a9cc20f00
	LandscapeSplineSegment*[] Segments;//[Offset: 0x588, Size: 0x10] 0x7a9cc21000
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x598, Size: 0x10] 0x7a9cbff800
	SplineMeshComponent*[] GetSplineMeshComponents();// 0xffffff8523219000 0x7a9cbdac00

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 0xc] 0x7a9cbff980
	Rotator Rotation;//[Offset: 0x34, Size: 0xc] 0x7a9cbffa00
	float Width;//[Offset: 0x40, Size: 0x4] 0x7a9cbc8c10
	float SideFalloff;//[Offset: 0x44, Size: 0x4] 0x7a9cbc8c80
	float EndFalloff;//[Offset: 0x48, Size: 0x4] 0x7a9cbc8cf0
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x50, Size: 0x10] 0x7a9cbffb00
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x60, Size: 0x10] 0x7a9cbffc00
	Box Bounds;//[Offset: 0x70, Size: 0x1c] 0x7a9cbffc80
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x90, Size: 0x8] 0x7a9cbffd00

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x8] 0x7aa0923500
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7aa0923580

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 0x18] 0x7a9cc20b00
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 0x18] 0x7a9cc20b80
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10] 0x7a9cc20c80
	Box Bounds;//[Offset: 0x80, Size: 0x1c] 0x7a9cc20d00
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 0x10] 0x7a9cc20e00

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x8] 0x7aa0925080
	float TangentLen;//[Offset: 0x8, Size: 0x4] 0x7aa083d210
	FName SocketName;//[Offset: 0xc, Size: 0x8] 0x7aa083d280

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 0xc] 0x7aa0924e00
	Vector Left;//[Offset: 0xc, Size: 0xc] 0x7aa0924e80
	Vector Right;//[Offset: 0x18, Size: 0xc] 0x7aa0924f00
	Vector FalloffLeft;//[Offset: 0x24, Size: 0xc] 0x7aa0924f80
	Vector FalloffRight;//[Offset: 0x30, Size: 0xc] 0x7aa0925000
	float StartEndFalloff;//[Offset: 0x3c, Size: 0x4] 0x7aa083d1a0

--------------------------------
Class: LandscapeProxyMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4] 0x7aa0923700
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x7aa0923780

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x578, Size: 0x4] 0x7a9cbc79b0
	int SectionBaseY;//[Offset: 0x57c, Size: 0x4] 0x7a9cbc7a20
	int ComponentSizeQuads;//[Offset: 0x580, Size: 0x4] 0x7a9cbc7a90
	int SubsectionSizeQuads;//[Offset: 0x584, Size: 0x4] 0x7a9cbc7b00
	int NumSubsections;//[Offset: 0x588, Size: 0x4] 0x7a9cbc7b70
	MaterialInterface* OverrideMaterial;//[Offset: 0x590, Size: 0x8] 0x7a9cbfe100
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x598, Size: 0x8] 0x7a9cbfe180
	LandscapeComponentMaterialOverride[] OverrideMaterials;//[Offset: 0x5a0, Size: 0x10] 0x7a9cbfe280
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x5b0, Size: 0x10] 0x7a9cbfe380
	MaterialInstanceDynamic*[] MaterialInstancesDynamic;//[Offset: 0x5c0, Size: 0x10] 0x7a9cbfe480
	int8[] LODIndexToMaterialIndex;//[Offset: 0x5d0, Size: 0x10] 0x7a9cbfe500
	int8[] MaterialIndexToDisabledTessellationMaterial;//[Offset: 0x5e0, Size: 0x10] 0x7a9cbfe580
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x5f0, Size: 0x10] 0x7a9cbfe680
	Texture2D*[] WeightmapTextures;//[Offset: 0x600, Size: 0x10] 0x7a9cbfc680
	Texture2D* XYOffsetmapTexture;//[Offset: 0x610, Size: 0x8] 0x7a9cbfc700
	Vector4 WeightmapScaleBias;//[Offset: 0x620, Size: 0x10] 0x7a9cbfc780
	float WeightmapSubsectionOffset;//[Offset: 0x630, Size: 0x4] 0x7a9cbc7cc0
	Vector4 HeightmapScaleBias;//[Offset: 0x640, Size: 0x10] 0x7a9cbfc800
	Box CachedLocalBox;//[Offset: 0x650, Size: 0x1c] 0x7a9cbfc880
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x66c, Size: 0x1c] 0x7a9cbfc900
	Texture2D* HeightmapTexture;//[Offset: 0x688, Size: 0x8] 0x7a9cbfca00
	Guid MapBuildDataId;//[Offset: 0x690, Size: 0x10] 0x7a9cbfca80
	Guid[] IrrelevantLights;//[Offset: 0x6a0, Size: 0x10] 0x7a9cbfcb80
	int CollisionMipLevel;//[Offset: 0x6b0, Size: 0x4] 0x7a9cbc7d30
	int SimpleCollisionMipLevel;//[Offset: 0x6b4, Size: 0x4] 0x7a9cbc7da0
	float NegativeZBoundsExtension;//[Offset: 0x6b8, Size: 0x4] 0x7a9cbc7e10
	float PositiveZBoundsExtension;//[Offset: 0x6bc, Size: 0x4] 0x7a9cbc7e80
	float StaticLightingResolution;//[Offset: 0x6c0, Size: 0x4] 0x7a9cbc7ef0
	int ForcedLOD;//[Offset: 0x6c4, Size: 0x4] 0x7a9cbc7f60
	int LODBias;//[Offset: 0x6c8, Size: 0x4] 0x7a9cbc7fd0
	Guid StateId;//[Offset: 0x6cc, Size: 0x10] 0x7a9cbfcc00
	Guid BakedTextureMaterialGuid;//[Offset: 0x6dc, Size: 0x10] 0x7a9cbfcc80
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x6f0, Size: 0x8] 0x7a9cbfcd00
	byte MobileBlendableLayerMask;//[Offset: 0x6f8, Size: 0x1] 0x7a9cbfcd80
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x700, Size: 0x8] 0x7a9cbfce00
	MaterialInterface*[] MobileMaterialInterfaces;//[Offset: 0x708, Size: 0x10] 0x7a9cbfcf00
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x718, Size: 0x10] 0x7a9cbfd000
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0xffffff8523219000 0x7a9cbd7860

--------------------------------
Class: LandscapeComponentMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4] 0x7aa0922780
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x7aa0922800

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8] 0x7aa0922600
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 0x1] 0x7aa0922680
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 0x1] 0x7aa0922700

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8] 0x7a9cbc7390
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8] 0x7a9cbff780
	float Hardness;//[Offset: 0x38, Size: 0x4] 0x7a9cbc7400
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 0x10] 0x7a9cbfd700

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x578, Size: 0x10] 0x7a9cbfda00
	int SectionBaseX;//[Offset: 0x588, Size: 0x4] 0x7a9cbc75c0
	int SectionBaseY;//[Offset: 0x58c, Size: 0x4] 0x7a9cbc7630
	int CollisionSizeQuads;//[Offset: 0x590, Size: 0x4] 0x7a9cbc76a0
	float CollisionScale;//[Offset: 0x594, Size: 0x4] 0x7a9cbc7710
	int SimpleCollisionSizeQuads;//[Offset: 0x598, Size: 0x4] 0x7a9cbc7780
	byte[] CollisionQuadFlags;//[Offset: 0x5a0, Size: 0x10] 0x7a9cbfdb00
	Guid HeightfieldGuid;//[Offset: 0x5b0, Size: 0x10] 0x7a9cbfdb80
	Box CachedLocalBox;//[Offset: 0x5c0, Size: 0x1c] 0x7a9cbfdc00
	LandscapeComponent* RenderComponent;//[Offset: 0x5dc, Size: 0x1c] 0x7a9cbfdc80
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x608, Size: 0x10] 0x7a9cbfdd80

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeBlueprintCustomBrush.Actor.Object
	bool AffectHeightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1] 0x7a9cbfd100
	bool AffectWeightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1] 0x7a9cbfd180
	TextureRenderTarget2D* Render(bool InIsHeightmap, TextureRenderTarget2D* InCombinedResult);// 0xffffff8523219000 0x7a9cbd7940
	void Initialize(out const IntPoint InLandscapeSize, out const IntPoint InLandscapeRenderTargetSize);// 0xffffff8523219000 0x7a9cbd7a20

--------------------------------
Class: LandscapeBlueprintCustomSimulationBrush.LandscapeBlueprintCustomBrush.Actor.Object

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10] 0x7a9cbfde80
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7a9cbfdf00
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8] 0x7a9cbfdf80
	float GrassDensity;//[Offset: 0x48, Size: 0x4] 0x7a9cbc77f0
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4] 0x7a9cbc7860
	int StartCullDistance;//[Offset: 0x50, Size: 0x4] 0x7a9cbc78d0
	int EndCullDistance;//[Offset: 0x54, Size: 0x4] 0x7a9cbc7940
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7a9cbfe000
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x7a9cbfe080

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8] 0x7aa0923b80
	PerPlatformFloat GrassDensity;//[Offset: 0x8, Size: 0x4] 0x7aa0923c00
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7aa0923c80
	float PlacementJitter;//[Offset: 0x10, Size: 0x4] 0x7aa083d360
	PerPlatformInt StartCullDistance;//[Offset: 0x14, Size: 0x4] 0x7aa0923d00
	PerPlatformInt EndCullDistance;//[Offset: 0x18, Size: 0x4] 0x7aa0923d80
	int MinLOD;//[Offset: 0x1c, Size: 0x4] 0x7aa083d3d0
	enum Scaling;//[Offset: 0x20, Size: 0x1] 0x7aa0923e80
	FloatInterval ScaleX;//[Offset: 0x24, Size: 0x8] 0x7aa0923f00
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 0x8] 0x7aa0923f80
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 0x8] 0x7aa0924000
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x7aa0924080
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x7aa0924100
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1] 0x7aa0924180
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 0x1] 0x7aa0922280
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7aa0922300
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x7aa0922380
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x7aa0922400

--------------------------------
Class: LandscapeInfo.Object
	Landscape* LandscapeActor;//[Offset: 0x28, Size: 0x1c] 0x7a9cbfd780
	Guid LandscapeGuid;//[Offset: 0x44, Size: 0x10] 0x7a9cbfd800
	int ComponentSizeQuads;//[Offset: 0x54, Size: 0x4] 0x7a9cbc7470
	int SubsectionSizeQuads;//[Offset: 0x58, Size: 0x4] 0x7a9cbc74e0
	int ComponentNumSubsections;//[Offset: 0x5c, Size: 0x4] 0x7a9cbc7550
	Vector DrawScale;//[Offset: 0x60, Size: 0xc] 0x7a9cbfd880
	<LandscapeStreamingProxy*> Proxies;//[Offset: 0xc0, Size: 0x50] 0x7a963da380

--------------------------------
Class: LandscapeStreamingProxy.LandscapeProxy.Actor.Object
	Landscape* LandscapeActor;//[Offset: 0x638, Size: 0x1c] 0x7a9cc20a80

--------------------------------
Class: LandscapeInfoMap.Object

--------------------------------
Class: LandscapeMaterialInstanceConstant.MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	bool bIsLayerThumbnail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c8, Size: 0x1] 0x7a9cbfe780
	bool bDisableTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c8, Size: 0x1] 0x7a9cbfe800
	bool bMobile;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c8, Size: 0x1] 0x7a9cbfe880
	bool bEditorToolUsage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c8, Size: 0x1] 0x7a9cbfe900

--------------------------------
Class: LandscapeMeshCollisionComponent.LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid MeshGuid;//[Offset: 0x658, Size: 0x10] 0x7a9cbfff80

--------------------------------
Class: LandscapeMeshProxyActor.Actor.Object
	LandscapeMeshProxyComponent* LandscapeMeshProxyComponent;//[Offset: 0x330, Size: 0x8] 0x7a9cbfff00

--------------------------------
Class: LandscapeMeshProxyComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid LandscapeGuid;//[Offset: 0x608, Size: 0x10] 0x7a9cbffd80
	IntPoint[] ProxyComponentBases;//[Offset: 0x618, Size: 0x10] 0x7a9cbffe80
	int8 ProxyLOD;//[Offset: 0x628, Size: 0x1] 0x7a9cbc8d60

--------------------------------
Class: MaterialExpressionLandscapeGrassOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	GrassInput[] GrassTypes;//[Offset: 0x40, Size: 0x10] 0x7a9cc20a00

--------------------------------
Class: GrassInput
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7aa083d130
	LandscapeGrassType* GrassType;//[Offset: 0x8, Size: 0x8] 0x7aa0924d00
	ExpressionInput Input;//[Offset: 0x10, Size: 0xc] 0x7aa0924d80

--------------------------------
Class: MaterialExpressionLandscapeLayerBlend.MaterialExpression.Object
	LayerBlendInput[] Layers;//[Offset: 0x40, Size: 0x10] 0x7a9cc20880
	Guid ExpressionGUID;//[Offset: 0x50, Size: 0x10] 0x7a9cc20900

--------------------------------
Class: LayerBlendInput
	FName LayerName;//[Offset: 0x0, Size: 0x8] 0x7aa083cfe0
	byte BlendType;//[Offset: 0x8, Size: 0x1] 0x7aa0924b00
	ExpressionInput LayerInput;//[Offset: 0xc, Size: 0xc] 0x7aa0924b80
	ExpressionInput HeightInput;//[Offset: 0x20, Size: 0xc] 0x7aa0924c00
	float PreviewWeight;//[Offset: 0x34, Size: 0x4] 0x7aa083d050
	Vector ConstLayerInput;//[Offset: 0x38, Size: 0xc] 0x7aa0924c80
	float ConstHeightInput;//[Offset: 0x44, Size: 0x4] 0x7aa083d0c0

--------------------------------
Class: MaterialExpressionLandscapeLayerCoords.MaterialExpression.Object
	byte MappingType;//[Offset: 0x39, Size: 0x1] 0x7a9cc20700
	byte CustomUVType;//[Offset: 0x3a, Size: 0x1] 0x7a9cc20780
	float MappingScale;//[Offset: 0x3c, Size: 0x4] 0x7a9cbc8a50
	float MappingRotation;//[Offset: 0x40, Size: 0x4] 0x7a9cbc8ac0
	float MappingPanU;//[Offset: 0x44, Size: 0x4] 0x7a9cbc8b30
	float MappingPanV;//[Offset: 0x48, Size: 0x4] 0x7a9cbc8ba0

--------------------------------
Class: MaterialExpressionLandscapeLayerSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x7a9cbc8970
	float PreviewWeight;//[Offset: 0x44, Size: 0x4] 0x7a9cbc89e0
	Guid ExpressionGUID;//[Offset: 0x48, Size: 0x10] 0x7a9cc20680

--------------------------------
Class: MaterialExpressionLandscapeLayerSwitch.MaterialExpression.Object
	ExpressionInput LayerUsed;//[Offset: 0x3c, Size: 0xc] 0x7a9cc20400
	ExpressionInput LayerNotUsed;//[Offset: 0x50, Size: 0xc] 0x7a9cc20480
	FName ParameterName;//[Offset: 0x64, Size: 0x8] 0x7a9cbc8900
	bool PreviewUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x7a9cc20580
	Guid ExpressionGUID;//[Offset: 0x70, Size: 0x10] 0x7a9cc20600

--------------------------------
Class: MaterialExpressionLandscapeLayerWeight.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x3c, Size: 0xc] 0x7a9cc20200
	ExpressionInput Layer;//[Offset: 0x50, Size: 0xc] 0x7a9cc20280
	FName ParameterName;//[Offset: 0x64, Size: 0x8] 0x7a9cbc8820
	float PreviewWeight;//[Offset: 0x6c, Size: 0x4] 0x7a9cbc8890
	Vector ConstBase;//[Offset: 0x70, Size: 0xc] 0x7a9cc20300
	Guid ExpressionGUID;//[Offset: 0x7c, Size: 0x10] 0x7a9cc20380

--------------------------------
Class: MaterialExpressionLandscapeVisibilityMask.MaterialExpression.Object
	Guid ExpressionGUID;//[Offset: 0x3c, Size: 0x10] 0x7a9cc20180

--------------------------------
Class: FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object
	FrameRate FixedFrameRate;//[Offset: 0x28, Size: 0x8] 0x7a9cc20100

--------------------------------
Class: TimeManagementBlueprintLibrary.BlueprintFunctionLibrary.Object
	FrameTime TransformTime(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate DestinationRate);// 0xffffff8523219000 0x7a9cbd9e00
	FrameNumber Subtract_FrameNumberInteger(FrameNumber A, int B);// 0xffffff8523219000 0x7a9cbd9ee0
	FrameNumber Subtract_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0xffffff8523219000 0x7a9cbd9fc0
	FrameTime SnapFrameTimeToRate(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate SnapToRate);// 0xffffff8523219000 0x7a9cbda0a0
	FrameTime Multiply_SecondsFrameRate(float TimeInSeconds, out const FrameRate FrameRate);// 0xffffff8523219000 0x7a9cbda180
	FrameNumber Multiply_FrameNumberInteger(FrameNumber A, int B);// 0xffffff8523219000 0x7a9cbda260
	bool IsValid_MultipleOf(out const FrameRate InFrameRate, out const FrameRate OtherFramerate);// 0xffffff8523219000 0x7a9cbda340
	bool IsValid_Framerate(out const FrameRate InFrameRate);// 0xffffff8523219000 0x7a9cbda420
	Timecode GetTimecode();// 0xffffff8523219000 0x7a9cbda500
	FrameNumber Divide_FrameNumberInteger(FrameNumber A, int B);// 0xffffff8523219000 0x7a9cbda5e0
	FString Conv_TimecodeToString(out const Timecode InTimecode, bool bForceSignDisplay);// 0xffffff8523219000 0x7a9cbda6c0
	float Conv_QualifiedFrameTimeToSeconds(out const QualifiedFrameTime InFrameTime);// 0xffffff8523219000 0x7a9cbda7a0
	float Conv_FrameRateToSeconds(out const FrameRate InFrameRate);// 0xffffff8523219000 0x7a9cbda880
	int Conv_FrameNumberToInteger(out const FrameNumber InFrameNumber);// 0xffffff8523219000 0x7a9cbda960
	FrameNumber Add_FrameNumberInteger(FrameNumber A, int B);// 0xffffff8523219000 0x7a9cbdaa40
	FrameNumber Add_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0xffffff8523219000 0x7a9cbdab20

--------------------------------
Class: TimeSynchronizationSource.Object
	bool bUseForSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7a9cc23000
	int FrameOffset;//[Offset: 0x2c, Size: 0x4] 0x7a9cbc83c0

--------------------------------
Class: MovieScenePlaybackClient.Interface.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10] 0x7a9cc22580

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 0x18] 0x7aa0924380
	Object* Object;//[Offset: 0x18, Size: 0x8] 0x7aa0924400
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7aa0924480

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4] 0x7aa083cb80
	enum Space;//[Offset: 0x4, Size: 0x1] 0x7aa0924280
	Guid Guid;//[Offset: 0x8, Size: 0x10] 0x7aa0924300

--------------------------------
Class: MovieSceneBindingOwnerInterface.Interface.Object

--------------------------------
Class: MovieSceneBuiltInEasingFunction.Object
	enum Type;//[Offset: 0x30, Size: 0x1] 0x7a9cc22480

--------------------------------
Class: MovieSceneEasingExternalCurve.Object
	CurveFloat* Curve;//[Offset: 0x30, Size: 0x8] 0x7a9cc22300

--------------------------------
Class: MovieSceneEasingFunction.Interface.Object
	float OnEvaluate(float Interp);// 0xffffff8523219000 0x7a9cbd9d20

--------------------------------
Class: MovieSceneFolder.Object
	FName FolderName;//[Offset: 0x28, Size: 0x8] 0x7a9cbc8200
	MovieSceneFolder*[] ChildFolders;//[Offset: 0x30, Size: 0x10] 0x7a9cc24200
	MovieSceneTrack*[] ChildMasterTracks;//[Offset: 0x40, Size: 0x10] 0x7a9cc22200
	FString[] ChildObjectBindingStrings;//[Offset: 0x50, Size: 0x10] 0x7a9cc22280

--------------------------------
Class: MovieSceneKeyProxy.Interface.Object

--------------------------------
Class: MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x2] 0x7a9cc23980
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 0x38] 0x7a9cc23a00
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 0x10] 0x7a9cc23a80
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 0x4] 0x7a9cc23b00
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 0x4] 0x7a9cc23b80
	int RowIndex;//[Offset: 0xa8, Size: 0x4] 0x7a9cbc98c0
	int OverlapPriority;//[Offset: 0xac, Size: 0x4] 0x7a9cbc9930
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7a9cc23c00
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x7a9cc23c80
	float StartTime;//[Offset: 0xb4, Size: 0x4] 0x7a9cbc99a0
	float EndTime;//[Offset: 0xb8, Size: 0x4] 0x7a9cbc9a10
	float PrerollTime;//[Offset: 0xbc, Size: 0x4] 0x7a9cbc9a80
	float PostrollTime;//[Offset: 0xc0, Size: 0x4] 0x7a9cbc9af0
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1] 0x7a9cc23d80
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1] 0x7a9cc23e00
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc6, Size: 0x2] 0x7a9cc23e80
	void SetRowIndex(int NewRowIndex);// 0xffffff8523219000 0x7a9cbd92a0
	void SetPreRollFrames(int InPreRollFrames);// 0xffffff8523219000 0x7a9cbd9380
	void SetPostRollFrames(int InPostRollFrames);// 0xffffff8523219000 0x7a9cbd9460
	void SetOverlapPriority(int NewPriority);// 0xffffff8523219000 0x7a9cbd9540
	void SetIsLocked(bool bInIsLocked);// 0xffffff8523219000 0x7a9cbd9620
	void SetIsActive(bool bInIsActive);// 0xffffff8523219000 0x7a9cbd9700
	bool IsLocked();// 0xffffff8523219000 0x7a9cbd97e0
	bool IsActive();// 0xffffff8523219000 0x7a9cbd98c0
	int GetRowIndex();// 0xffffff8523219000 0x7a9cbd99a0
	int GetPreRollFrames();// 0xffffff8523219000 0x7a9cbd9a80
	int GetPostRollFrames();// 0xffffff8523219000 0x7a9cbd9b60
	int GetOverlapPriority();// 0xffffff8523219000 0x7a9cbd9c40

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7aa0928480
	enum CompletionMode;//[Offset: 0x1, Size: 0x1] 0x7aa0928580

--------------------------------
Class: MovieSceneEasingSettings
	int AutoEaseInDuration;//[Offset: 0x0, Size: 0x4] 0x7aa083d980
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 0x4] 0x7aa083d9f0
	interface class * EaseIn;//[Offset: 0x8, Size: 0x10] 0x7aa0928600
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7aa0928680
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 0x4] 0x7aa083da60
	interface class * EaseOut;//[Offset: 0x20, Size: 0x10] 0x7aa0928700
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7aa0928780
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 0x4] 0x7aa083dad0

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 0x1] 0x7aa0926200
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7aa0926280

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x370, Size: 0x10] 0x7a9cc24400
	delegate OnPlayReverse;//[Offset: 0x380, Size: 0x10] 0x7a9cc24480
	delegate OnStop;//[Offset: 0x390, Size: 0x10] 0x7a9cc24500
	delegate OnPause;//[Offset: 0x3a0, Size: 0x10] 0x7a9cc24580
	delegate OnFinished;//[Offset: 0x3b0, Size: 0x10] 0x7a9cc24600
	byte Status;//[Offset: 0x3c0, Size: 0x1] 0x7a9cc24680
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c1, Size: 0x1] 0x7a9cc24700
	MovieSceneSequence* Sequence;//[Offset: 0x3c8, Size: 0x8] 0x7a9cc24780
	FrameNumber StartTime;//[Offset: 0x3d0, Size: 0x4] 0x7a9cc25180
	int DurationFrames;//[Offset: 0x3d4, Size: 0x4] 0x7a9cbcab20
	int CurrentNumLoops;//[Offset: 0x3d8, Size: 0x4] 0x7a9cbcab90
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x3f0, Size: 0x14] 0x7a9cc24800
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x408, Size: 0x300] 0x7a9cc24880
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x770, Size: 0x10] 0x7a9cc24900
	interface class * PlaybackClient;//[Offset: 0x780, Size: 0x10] 0x7a9cc24980
	void StopAtCurrentTime();// 0xffffff8523219000 0x7a9cbddec0
	void Stop();// 0xffffff8523219000 0x7a9cbddfa0
	void SetTimeRange(float StartTime, float Duration);// 0xffffff8523219000 0x7a9cbde080
	void SetPlayRate(float PlayRate);// 0xffffff8523219000 0x7a9cbde160
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0xffffff8523219000 0x7a9cbde240
	void SetPlaybackPosition(float NewPlaybackPosition);// 0xffffff8523219000 0x7a9cbde320
	void SetFrameRate(FrameRate FrameRate);// 0xffffff8523219000 0x7a9cbde400
	void SetFrameRange(int StartFrame, int Duration);// 0xffffff8523219000 0x7a9cbde4e0
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0xffffff8523219000 0x7a9cbde5c0
	void ScrubToSeconds(float TimeInSeconds);// 0xffffff8523219000 0x7a9cbde6a0
	bool ScrubToMarkedFrame(FString InLabel);// 0xffffff8523219000 0x7a9cbdadc0
	void ScrubToFrame(FrameTime NewPosition);// 0xffffff8523219000 0x7a9cbdaea0
	void Scrub();// 0xffffff8523219000 0x7a9cbdaf80
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0xffffff8523219000 0x7a9cbdb060
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0xffffff8523219000 0x7a9cbdb140
	void PlayToSeconds(float TimeInSeconds);// 0xffffff8523219000 0x7a9cbdb220
	bool PlayToMarkedFrame(FString InLabel);// 0xffffff8523219000 0x7a9cbdb300
	void PlayToFrame(FrameTime NewPosition);// 0xffffff8523219000 0x7a9cbdb3e0
	void PlayReverse();// 0xffffff8523219000 0x7a9cbdb4c0
	void PlayLooping(int NumLoops);// 0xffffff8523219000 0x7a9cbdb5a0
	void Play();// 0xffffff8523219000 0x7a9cbdb680
	void Pause();// 0xffffff8523219000 0x7a9cbdb760
	void JumpToSeconds(float TimeInSeconds);// 0xffffff8523219000 0x7a9cbdb840
	void JumpToPosition(float NewPlaybackPosition);// 0xffffff8523219000 0x7a9cbdb920
	bool JumpToMarkedFrame(FString InLabel);// 0xffffff8523219000 0x7a9cbdba00
	void JumpToFrame(FrameTime NewPosition);// 0xffffff8523219000 0x7a9cbdbae0
	bool IsReversed();// 0xffffff8523219000 0x7a9cbdbbc0
	bool IsPlaying();// 0xffffff8523219000 0x7a9cbdbca0
	bool IsPaused();// 0xffffff8523219000 0x7a9cbdbd80
	void GoToEndAndStop();// 0xffffff8523219000 0x7a9cbdbe60
	QualifiedFrameTime GetStartTime();// 0xffffff8523219000 0x7a9cbdbf40
	float GetPlayRate();// 0xffffff8523219000 0x7a9cbdc020
	float GetPlaybackStart();// 0xffffff8523219000 0x7a9cbdc100
	float GetPlaybackPosition();// 0xffffff8523219000 0x7a9cbdc1e0
	float GetPlaybackEnd();// 0xffffff8523219000 0x7a9cbdc2c0
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0xffffff8523219000 0x7a9cbdc3a0
	float GetLength();// 0xffffff8523219000 0x7a9cbdc480
	FrameRate GetFrameRate();// 0xffffff8523219000 0x7a9cbdc560
	int GetFrameDuration();// 0xffffff8523219000 0x7a9cbdc640
	QualifiedFrameTime GetEndTime();// 0xffffff8523219000 0x7a9cbdc720
	QualifiedFrameTime GetDuration();// 0xffffff8523219000 0x7a9cbdc800
	bool GetDisableCameraCuts();// 0xffffff8523219000 0x7a9cbdc8e0
	QualifiedFrameTime GetCurrentTime();// 0xffffff8523219000 0x7a9cbdc9c0
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0xffffff8523219000 0x7a9cbd90e0
	void ChangePlaybackDirection();// 0xffffff8523219000 0x7a9cbd91c0

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7aa0929e80
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4] 0x7aa0929f00
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x7aa083f2e0
	float StartTime;//[Offset: 0xc, Size: 0x4] 0x7aa083f350
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7aa0929f80
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x7aa092a000
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x7aa092a080
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x7aa092a100
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x7aa092a180
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x7aa092a200
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x7aa092a280
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x7aa092a300

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4] 0x7aa083f270

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x18, Size: 0x50] 0x7a963d88a0

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8] 0x7aa0929d80
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1] 0x7aa0929e00
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4] 0x7aa083f200

--------------------------------
Class: MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionParameters Parameters;//[Offset: 0xd8, Size: 0x18] 0x7a9cc26200
	float StartOffset;//[Offset: 0xf0, Size: 0x4] 0x7a9cbca960
	float TimeScale;//[Offset: 0xf4, Size: 0x4] 0x7a9cbca9d0
	float PrerollTime;//[Offset: 0xf8, Size: 0x4] 0x7a9cbcaa40
	MovieSceneSequence* SubSequence;//[Offset: 0x100, Size: 0x8] 0x7a9cc26280
	Actor* ActorToRecord;//[Offset: 0x108, Size: 0x1c] 0x7a9cc26300
	FString TargetSequenceName;//[Offset: 0x128, Size: 0x10] 0x7a9cbcaab0
	DirectoryPath TargetPathToRecordTo;//[Offset: 0x138, Size: 0x10] 0x7a9cc24280
	void SetSequence(MovieSceneSequence* Sequence);// 0xffffff8523219000 0x7a9cbddd00
	MovieSceneSequence* GetSequence();// 0xffffff8523219000 0x7a9cbddde0

--------------------------------
Class: MovieSceneSectionParameters
	FrameNumber StartFrameOffset;//[Offset: 0x0, Size: 0x4] 0x7aa092a500
	float TimeScale;//[Offset: 0x4, Size: 0x4] 0x7aa083f430
	int HierarchicalBias;//[Offset: 0x8, Size: 0x4] 0x7aa083f4a0
	float StartOffset;//[Offset: 0xc, Size: 0x4] 0x7aa083f510
	float PrerollTime;//[Offset: 0x10, Size: 0x4] 0x7aa083d8a0
	float PostrollTime;//[Offset: 0x14, Size: 0x4] 0x7aa083d910

--------------------------------
Class: MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x58, Size: 0x10] 0x7a9cc26180

--------------------------------
Class: TestMovieSceneTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bHighPassFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x7a9cc25f80
	MovieSceneSection*[] SectionArray;//[Offset: 0x58, Size: 0x10] 0x7a9cc26080

--------------------------------
Class: TestMovieSceneSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: TestMovieSceneSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8] 0x7a9cc25f00

--------------------------------
Class: AnimCustomInstance.AnimInstance.Object

--------------------------------
Class: AnimNotify_PlayMontageNotify.AnimNotify.Object
	FName NotifyName;//[Offset: 0x38, Size: 0x8] 0x7a9cbca880

--------------------------------
Class: AnimNotify_PlayMontageNotifyWindow.AnimNotifyState.Object
	FName NotifyName;//[Offset: 0x2c, Size: 0x8] 0x7a9cbca6c0

--------------------------------
Class: AnimSequencerInstance.AnimCustomInstance.AnimInstance.Object

--------------------------------
Class: KismetAnimationLibrary.BlueprintFunctionLibrary.Object
	void K2_TwoBoneIK(out const Vector RootPos, out const Vector JointPos, out const Vector EndPos, out const Vector JointTarget, out const Vector Effector, out Vector OutJointPos, out Vector OutEndPos, bool bAllowStretching, float StartStretchRatio, float MaxStretchScale);// 0xffffff8523219000 0x7a9cbdd280
	Vector K2_MakePerlinNoiseVectorAndRemap(float X, float Y, float Z, float RangeOutMinX, float RangeOutMaxX, float RangeOutMinY, float RangeOutMaxY, float RangeOutMinZ, float RangeOutMaxZ);// 0xffffff8523219000 0x7a9cbdd360
	float K2_MakePerlinNoiseAndRemap(float Value, float RangeOutMin, float RangeOutMax);// 0xffffff8523219000 0x7a9cbdd440
	Transform K2_LookAt(out const Transform CurrentTransform, out const Vector TargetPosition, Vector LookAtVector, bool bUseUpVector, Vector UpVector, float ClampConeInDegree);// 0xffffff8523219000 0x7a9cbdd520
	float K2_DistanceBetweenTwoSocketsAndMapRange(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameA, byte SocketSpaceA, const FName SocketOrBoneNameB, byte SocketSpaceB, bool bRemapRange, float InRangeMin, float InRangeMax, float OutRangeMin, float OutRangeMax);// 0xffffff8523219000 0x7a9cbdd600
	Vector K2_DirectionBetweenSockets(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameFrom, const FName SocketOrBoneNameTo);// 0xffffff8523219000 0x7a9cbdd6e0

--------------------------------
Class: PlayMontageCallbackProxy.Object
	delegate OnCompleted;//[Offset: 0x28, Size: 0x10] 0x7a9cc26880
	delegate OnBlendOut;//[Offset: 0x38, Size: 0x10] 0x7a9cc26900
	delegate OnInterrupted;//[Offset: 0x48, Size: 0x10] 0x7a9cc26980
	delegate OnNotifyBegin;//[Offset: 0x58, Size: 0x10] 0x7a9cc26a00
	delegate OnNotifyEnd;//[Offset: 0x68, Size: 0x10] 0x7a9cc26a80
	void OnNotifyEndReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0xffffff8523219000 0x7a9cbdce20
	void OnNotifyBeginReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0xffffff8523219000 0x7a9cbdcf00
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0xffffff8523219000 0x7a9cbdcfe0
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0xffffff8523219000 0x7a9cbdd0c0
	PlayMontageCallbackProxy* CreateProxyObjectForPlayMontage(SkeletalMeshComponent* InSkeletalMeshComponent, AnimMontage* MontageToPlay, float PlayRate, float StartingPosition, FName StartingSection);// 0xffffff8523219000 0x7a9cbdd1a0

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: MovieSceneTransformOrigin.Interface.Object
	Transform BP_GetTransformOrigin();// 0xffffff8523219000 0x7aa0986b40

--------------------------------
Class: MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	Guid ConstraintId;//[Offset: 0xd8, Size: 0x10] 0x7a9cc26600
	MovieSceneObjectBindingID ConstraintBindingID;//[Offset: 0xe8, Size: 0x18] 0x7a9cc26680
	void SetConstraintBindingID(out const MovieSceneObjectBindingID InConstraintBindingID);// 0xffffff8523219000 0x7a9cbdcc60
	MovieSceneObjectBindingID GetConstraintBindingID();// 0xffffff8523219000 0x7a9cbdcd40

--------------------------------
Class: MovieScene3DAttachSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	FName AttachSocketName;//[Offset: 0x100, Size: 0x8] 0x7a9cbcb5a0
	FName AttachComponentName;//[Offset: 0x108, Size: 0x8] 0x7a9cbcb610
	enum AttachmentLocationRule;//[Offset: 0x110, Size: 0x1] 0x7a9cc28180
	enum AttachmentRotationRule;//[Offset: 0x111, Size: 0x1] 0x7a9cc28280
	enum AttachmentScaleRule;//[Offset: 0x112, Size: 0x1] 0x7a9cc28380
	enum DetachmentLocationRule;//[Offset: 0x113, Size: 0x1] 0x7a9cc26380
	enum DetachmentRotationRule;//[Offset: 0x114, Size: 0x1] 0x7a9cc26480
	enum DetachmentScaleRule;//[Offset: 0x115, Size: 0x1] 0x7a9cc26580

--------------------------------
Class: MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ConstraintSections;//[Offset: 0x58, Size: 0x10] 0x7a9cc28080

--------------------------------
Class: MovieScene3DAttachTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScene3DPathSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TimingCurve;//[Offset: 0x100, Size: 0xa0] 0x7a9cc27c00
	enum FrontAxisEnum;//[Offset: 0x1a0, Size: 0x1] 0x7a9cc27d00
	enum UpAxisEnum;//[Offset: 0x1a1, Size: 0x1] 0x7a9cc27e00
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a2, Size: 0x1] 0x7a9cc27e80
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a2, Size: 0x1] 0x7a9cc27f00
	bool bForceUpright;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a2, Size: 0x1] 0x7a9cc27f80

--------------------------------
Class: MovieSceneFloatChannel.MovieSceneChannel
	byte PreInfinityExtrap;//[Offset: 0x8, Size: 0x1] 0x7aa0929100
	byte PostInfinityExtrap;//[Offset: 0x9, Size: 0x1] 0x7aa0929180
	FrameNumber[] Times;//[Offset: 0x10, Size: 0x10] 0x7aa0929280
	MovieSceneFloatValue[] Values;//[Offset: 0x20, Size: 0x10] 0x7aa0927480
	float DefaultValue;//[Offset: 0x30, Size: 0x4] 0x7aa083e160
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x7aa0927500
	MovieSceneKeyHandleMap KeyHandles;//[Offset: 0x38, Size: 0x60] 0x7aa0927580
	FrameRate TickResolution;//[Offset: 0x98, Size: 0x8] 0x7aa0927600

--------------------------------
Class: MovieSceneChannel

--------------------------------
Class: MovieSceneFloatValue
	float Value;//[Offset: 0x0, Size: 0x4] 0x7aa083dec0
	byte InterpMode;//[Offset: 0x4, Size: 0x1] 0x7aa0929300
	byte TangentMode;//[Offset: 0x5, Size: 0x1] 0x7aa0929380
	MovieSceneTangentData Tangent;//[Offset: 0x8, Size: 0x14] 0x7aa0929480

--------------------------------
Class: MovieSceneTangentData
	float ArriveTangent;//[Offset: 0x0, Size: 0x4] 0x7aa083df30
	float LeaveTangent;//[Offset: 0x4, Size: 0x4] 0x7aa083dfa0
	byte TangentWeightMode;//[Offset: 0x8, Size: 0x1] 0x7aa0929400
	float ArriveTangentWeight;//[Offset: 0xc, Size: 0x4] 0x7aa083e010
	float LeaveTangentWeight;//[Offset: 0x10, Size: 0x4] 0x7aa083e080

--------------------------------
Class: MovieSceneKeyHandleMap.KeyHandleLookupTable

--------------------------------
Class: KeyHandleLookupTable

--------------------------------
Class: MovieScene3DPathTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScene3DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneTransformMask TransformMask;//[Offset: 0xd8, Size: 0x4] 0x7a9cc27900
	MovieSceneFloatChannel Translation;//[Offset: 0xe0, Size: 0xa0] 0x7a9cc27980
	MovieSceneFloatChannel Rotation;//[Offset: 0x2c0, Size: 0xa0] 0x7a9cc27a00
	MovieSceneFloatChannel Scale;//[Offset: 0x4a0, Size: 0xa0] 0x7a9cc27a80
	MovieSceneFloatChannel ManualWeight;//[Offset: 0x680, Size: 0xa0] 0x7a9cc27b00
	bool bUseQuaternionInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 0x1] 0x7a9cc27b80

--------------------------------
Class: MovieSceneTransformMask
	uint32 Mask;//[Offset: 0x0, Size: 0x4] 0x7aa09332d0

--------------------------------
Class: MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection* SectionToKey;//[Offset: 0x58, Size: 0x8] 0x7a9cc27780
	FName PropertyName;//[Offset: 0x60, Size: 0x8] 0x7a9cbcb4c0
	FString PropertyPath;//[Offset: 0x68, Size: 0x10] 0x7a9cbcb530
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10] 0x7a9cc27880

--------------------------------
Class: MovieScene3DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneActorReferenceSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneActorReferenceData ActorReferenceData;//[Offset: 0xd8, Size: 0xa0] 0x7a9cc27600
	IntegralCurve ActorGuidIndexCurve;//[Offset: 0x178, Size: 0x80] 0x7a9cc27680
	FString[] ActorGuidStrings;//[Offset: 0x1f8, Size: 0x10] 0x7a9cc27700

--------------------------------
Class: MovieSceneActorReferenceData.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10] 0x7aa0949900
	MovieSceneActorReferenceKey[] KeyValues;//[Offset: 0x30, Size: 0x10] 0x7aa0949a80

--------------------------------
Class: MovieSceneActorReferenceKey
	MovieSceneObjectBindingID Object;//[Offset: 0x0, Size: 0x18] 0x7aa0949980

--------------------------------
Class: IntegralCurve.IndexedCurve
	IntegralKey[] Keys;//[Offset: 0x68, Size: 0x10] 0x7a9ca1bc80
	int DefaultValue;//[Offset: 0x78, Size: 0x4] 0x7a9ca09c40
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x7a9ca1bd00

--------------------------------
Class: IntegralKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7a9ca09b60
	int Value;//[Offset: 0x4, Size: 0x4] 0x7a9ca09bd0

--------------------------------
Class: MovieSceneActorReferenceTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneAudioSection.MovieSceneSection.MovieSceneSignedObject.Object
	SoundBase* Sound;//[Offset: 0xd8, Size: 0x8] 0x7a9cc29000
	FrameNumber StartFrameOffset;//[Offset: 0xe0, Size: 0x4] 0x7a9cc29080
	float AudioStartTime;//[Offset: 0xe8, Size: 0x4] 0x7a9cbcb300
	float AudioDilationFactor;//[Offset: 0xec, Size: 0x4] 0x7a9cbcb370
	float AudioVolume;//[Offset: 0xf0, Size: 0x4] 0x7a9cbcb3e0
	MovieSceneFloatChannel SoundVolume;//[Offset: 0xf8, Size: 0xa0] 0x7a9cc29100
	MovieSceneFloatChannel PitchMultiplier;//[Offset: 0x198, Size: 0xa0] 0x7a9cc29180
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x7a9cc29200
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1] 0x7a9cc29280
	SoundAttenuation* AttenuationSettings;//[Offset: 0x240, Size: 0x8] 0x7a9cc29300
	delegate OnQueueSubtitles;//[Offset: 0x248, Size: 0x10] 0x7a9cc29380
	delegate OnAudioFinished;//[Offset: 0x258, Size: 0x10] 0x7a9cc29400
	delegate OnAudioPlaybackPercent;//[Offset: 0x268, Size: 0x10] 0x7a9cc29480
	void SetStartOffset(FrameNumber InStartOffset);// 0xffffff8523219000 0x7a9cbdfe40
	void SetSound(SoundBase* InSound);// 0xffffff8523219000 0x7a9cbdff20
	FrameNumber GetStartOffset();// 0xffffff8523219000 0x7a9cbdcaa0
	SoundBase* GetSound();// 0xffffff8523219000 0x7a9cbdcb80

--------------------------------
Class: MovieSceneAudioTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AudioSections;//[Offset: 0x58, Size: 0x10] 0x7a9cc28f80

--------------------------------
Class: MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x7a9cc28e00
	MovieSceneBoolChannel BoolCurve;//[Offset: 0xe0, Size: 0x90] 0x7a9cc28e80

--------------------------------
Class: MovieSceneBoolChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x7aa0925f00
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7aa0925f80
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x7aa0926000
	bool[] Values;//[Offset: 0x20, Size: 0x10] 0x7aa0926100

--------------------------------
Class: MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneByteSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel ByteCurve;//[Offset: 0xd8, Size: 0x98] 0x7a9cc28d80

--------------------------------
Class: MovieSceneByteChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x7aa0925b80
	byte DefaultValue;//[Offset: 0x18, Size: 0x1] 0x7aa0925c00
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x7aa0925c80
	byte[] Values;//[Offset: 0x20, Size: 0x10] 0x7aa0925d80
	Enum* Enum;//[Offset: 0x30, Size: 0x8] 0x7aa0925e00

--------------------------------
Class: MovieSceneByteTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0x88, Size: 0x8] 0x7a9cc28d00

--------------------------------
Class: MovieSceneCameraAnimSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraAnimSectionData AnimData;//[Offset: 0xd8, Size: 0x20] 0x7a9cc28b80
	CameraAnim* CameraAnim;//[Offset: 0xf8, Size: 0x8] 0x7a9cc28c00
	float PlayRate;//[Offset: 0x100, Size: 0x4] 0x7a9cbcb140
	float PlayScale;//[Offset: 0x104, Size: 0x4] 0x7a9cbcb1b0
	float BlendInTime;//[Offset: 0x108, Size: 0x4] 0x7a9cbcb220
	float BlendOutTime;//[Offset: 0x10c, Size: 0x4] 0x7a9cbcb290
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x7a9cc28c80

--------------------------------
Class: MovieSceneCameraAnimSectionData
	CameraAnim* CameraAnim;//[Offset: 0x0, Size: 0x8] 0x7aa094b280
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x7aa0933030
	float PlayScale;//[Offset: 0xc, Size: 0x4] 0x7aa09330a0
	float BlendInTime;//[Offset: 0x10, Size: 0x4] 0x7aa0933110
	float BlendOutTime;//[Offset: 0x14, Size: 0x4] 0x7aa0933180
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7aa094b300

--------------------------------
Class: MovieSceneCameraAnimTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraAnimSections;//[Offset: 0x58, Size: 0x10] 0x7a9cc28b00

--------------------------------
Class: MovieSceneCameraCutSection.MovieSceneSection.MovieSceneSignedObject.Object
	Guid CameraGuid;//[Offset: 0xd8, Size: 0x10] 0x7a9cc28880
	MovieSceneObjectBindingID CameraBindingID;//[Offset: 0xe8, Size: 0x18] 0x7a9cc28900
	void SetCameraBindingID(out const MovieSceneObjectBindingID InCameraBindingID);// 0xffffff8523219000 0x7a9cbdfc80
	MovieSceneObjectBindingID GetCameraBindingID();// 0xffffff8523219000 0x7a9cbdfd60

--------------------------------
Class: MovieSceneCameraCutTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x58, Size: 0x10] 0x7a9cc28800

--------------------------------
Class: MovieSceneCameraShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xd8, Size: 0x20] 0x7a9cc28580
	class CameraShake* ShakeClass;//[Offset: 0xf8, Size: 0x8] 0x7a9cc28600
	float PlayScale;//[Offset: 0x100, Size: 0x4] 0x7a9cbcb0d0
	byte PlaySpace;//[Offset: 0x104, Size: 0x1] 0x7a9cc28680
	Rotator UserDefinedPlaySpace;//[Offset: 0x108, Size: 0xc] 0x7a9cc28700

--------------------------------
Class: MovieSceneCameraShakeSectionData
	class CameraShake* ShakeClass;//[Offset: 0x0, Size: 0x8] 0x7aa094b000
	float PlayScale;//[Offset: 0x8, Size: 0x4] 0x7aa0932fc0
	byte PlaySpace;//[Offset: 0xc, Size: 0x1] 0x7aa094b080
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0xc] 0x7aa094b100

--------------------------------
Class: MovieSceneCameraShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x58, Size: 0x10] 0x7a9cc28500

--------------------------------
Class: MovieSceneCinematicShotSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	FString ShotDisplayName;//[Offset: 0x148, Size: 0x10] 0x7a9cbcaf10
	FText DisplayName;//[Offset: 0x158, Size: 0x18] 0x7a9cbcaf80
	void SetShotDisplayName(FString InShotDisplayName);// 0xffffff8523219000 0x7a9cbdfac0
	FString GetShotDisplayName();// 0xffffff8523219000 0x7a9cbdfba0

--------------------------------
Class: MovieSceneCinematicShotTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneColorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel RedCurve;//[Offset: 0xd8, Size: 0xa0] 0x7a9cc2a380
	MovieSceneFloatChannel GreenCurve;//[Offset: 0x178, Size: 0xa0] 0x7a9cc2a400
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x218, Size: 0xa0] 0x7a9cc2a480
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x2b8, Size: 0xa0] 0x7a9cc2a500

--------------------------------
Class: MovieSceneColorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bIsSlateColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x7a9cc2a300

--------------------------------
Class: MovieSceneEnumSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel EnumCurve;//[Offset: 0xd8, Size: 0x98] 0x7a9cc2a280

--------------------------------
Class: MovieSceneEnumTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0x88, Size: 0x8] 0x7a9cc2a200

--------------------------------
Class: MovieSceneEulerTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventRepeaterSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEvent Event;//[Offset: 0xd8, Size: 0x8] 0x7a9cc2a180

--------------------------------
Class: MovieSceneEvent
	FName FunctionName;//[Offset: 0x0, Size: 0x8] 0x7aa0932f50

--------------------------------
Class: MovieSceneEventSection.MovieSceneSection.MovieSceneSignedObject.Object
	NameCurve Events;//[Offset: 0xd8, Size: 0x78] 0x7a9cc2a080
	MovieSceneEventSectionData EventData;//[Offset: 0x150, Size: 0x88] 0x7a9cc2a100

--------------------------------
Class: NameCurve.IndexedCurve
	NameCurveKey[] Keys;//[Offset: 0x68, Size: 0x10] 0x7a9ca53100

--------------------------------
Class: NameCurveKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7a9ca0c480
	FName Value;//[Offset: 0x4, Size: 0x8] 0x7a9ca0c4f0

--------------------------------
Class: MovieSceneEventSectionData.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x7aa094a680
	EventPayload[] KeyValues;//[Offset: 0x18, Size: 0x10] 0x7aa094a800

--------------------------------
Class: EventPayload
	FName EventName;//[Offset: 0x0, Size: 0x8] 0x7aa0932ee0
	MovieSceneEventParameters Parameters;//[Offset: 0x8, Size: 0x28] 0x7aa094a700

--------------------------------
Class: MovieSceneEventParameters

--------------------------------
Class: MovieSceneEventTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1] 0x7a9cc29c80
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1] 0x7a9cc29d00
	enum EventPosition;//[Offset: 0x56, Size: 0x1] 0x7a9cc29e00
	MovieSceneObjectBindingID[] EventReceivers;//[Offset: 0x58, Size: 0x10] 0x7a9cc29f00
	MovieSceneSection*[] Sections;//[Offset: 0x68, Size: 0x10] 0x7a9cc2a000

--------------------------------
Class: MovieSceneEventTriggerSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEventChannel EventChannel;//[Offset: 0xd8, Size: 0x88] 0x7a9cc29c00

--------------------------------
Class: MovieSceneEventChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10] 0x7aa094a900
	MovieSceneEvent[] KeyValues;//[Offset: 0x18, Size: 0x10] 0x7aa094aa00

--------------------------------
Class: MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xd8, Size: 0xa0] 0x7a9cc29b80

--------------------------------
Class: MovieSceneFadeSection.MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object
	LinearColor FadeColor;//[Offset: 0x178, Size: 0x10] 0x7a9cc29a80
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1] 0x7a9cc29b00

--------------------------------
Class: MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFadeTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneIntegerSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneIntegerChannel IntegerCurve;//[Offset: 0xd8, Size: 0x90] 0x7a9cc29a00

--------------------------------
Class: MovieSceneIntegerChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x7aa0928f80
	int DefaultValue;//[Offset: 0x18, Size: 0x4] 0x7aa083dde0
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7aa0929000
	int[] Values;//[Offset: 0x20, Size: 0x10] 0x7aa0929080

--------------------------------
Class: MovieSceneIntegerTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneLevelVisibilitySection.MovieSceneSection.MovieSceneSignedObject.Object
	enum Visibility;//[Offset: 0xd8, Size: 0x1] 0x7a9cc29600
	FName[] LevelNames;//[Offset: 0xe0, Size: 0x10] 0x7a9cc29680
	void SetVisibility(enum InVisibility);// 0xffffff8523219000 0x7a9cbdf740
	void SetLevelNames(out const FName[] InLevelNames);// 0xffffff8523219000 0x7a9cbdf820
	enum GetVisibility();// 0xffffff8523219000 0x7a9cbdf900
	FName[] GetLevelNames();// 0xffffff8523219000 0x7a9cbdf9e0

--------------------------------
Class: MovieSceneLevelVisibilityTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x58, Size: 0x10] 0x7a9cc29500

--------------------------------
Class: MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x58, Size: 0x10] 0x7a9cc2b500

--------------------------------
Class: MovieSceneMaterialParameterCollectionTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MaterialParameterCollection* MPC;//[Offset: 0x68, Size: 0x8] 0x7a9cc2b400

--------------------------------
Class: MovieSceneComponentMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0x68, Size: 0x4] 0x7a9cbcad50

--------------------------------
Class: MovieSceneObjectPropertySection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel ObjectChannel;//[Offset: 0xd8, Size: 0xc0] 0x7a9cc2b380

--------------------------------
Class: MovieSceneObjectPathChannel.MovieSceneChannel
	class Object* PropertyClass;//[Offset: 0x8, Size: 0x8] 0x7aa0928a80
	FrameNumber[] Times;//[Offset: 0x10, Size: 0x10] 0x7aa0928b80
	MovieSceneObjectPathChannelKeyValue[] Values;//[Offset: 0x20, Size: 0x10] 0x7aa0928c80
	MovieSceneObjectPathChannelKeyValue DefaultValue;//[Offset: 0x30, Size: 0x30] 0x7aa0928e00

--------------------------------
Class: MovieSceneObjectPathChannelKeyValue
	Object* SoftPtr;//[Offset: 0x0, Size: 0x28] 0x7aa0928d00
	Object* HardPtr;//[Offset: 0x28, Size: 0x8] 0x7aa0928d80

--------------------------------
Class: MovieSceneObjectPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	class Object* PropertyClass;//[Offset: 0x88, Size: 0x8] 0x7a9cc2b300

--------------------------------
Class: MovieSceneParameterSection.MovieSceneSection.MovieSceneSignedObject.Object
	ScalarParameterNameAndCurve[] ScalarParameterNamesAndCurves;//[Offset: 0xd8, Size: 0x10] 0x7a9cc2b080
	VectorParameterNameAndCurves[] VectorParameterNamesAndCurves;//[Offset: 0xe8, Size: 0x10] 0x7a9cc2b180
	ColorParameterNameAndCurves[] ColorParameterNamesAndCurves;//[Offset: 0xf8, Size: 0x10] 0x7a9cc2b280

--------------------------------
Class: ScalarParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7aa0932c40
	MovieSceneFloatChannel ParameterCurve;//[Offset: 0x8, Size: 0xa0] 0x7aa094b900

--------------------------------
Class: VectorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7aa0932cb0
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xa0] 0x7aa094ba80
	MovieSceneFloatChannel YCurve;//[Offset: 0xa8, Size: 0xa0] 0x7aa094bb00
	MovieSceneFloatChannel ZCurve;//[Offset: 0x148, Size: 0xa0] 0x7aa094bb80

--------------------------------
Class: ColorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7aa0932d20
	MovieSceneFloatChannel RedCurve;//[Offset: 0x8, Size: 0xa0] 0x7aa094bd00
	MovieSceneFloatChannel GreenCurve;//[Offset: 0xa8, Size: 0xa0] 0x7aa094bd80
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x148, Size: 0xa0] 0x7aa094be00
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x1e8, Size: 0xa0] 0x7aa094be80

--------------------------------
Class: MovieSceneParticleParameterTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x58, Size: 0x10] 0x7a9cc2af80

--------------------------------
Class: MovieSceneParticleSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneParticleChannel ParticleKeys;//[Offset: 0xd8, Size: 0x98] 0x7a9cc2ae80

--------------------------------
Class: MovieSceneParticleChannel.MovieSceneByteChannel.MovieSceneChannel

--------------------------------
Class: MovieSceneParticleTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ParticleSections;//[Offset: 0x58, Size: 0x10] 0x7a9cc2ae00

--------------------------------
Class: MovieScenePrimitiveMaterialSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel MaterialChannel;//[Offset: 0xd8, Size: 0xc0] 0x7a9cc2ad00

--------------------------------
Class: MovieScenePrimitiveMaterialTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0x88, Size: 0x4] 0x7a9cbcc9c0

--------------------------------
Class: MovieSceneSkeletalAnimationSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSkeletalAnimationParams Params;//[Offset: 0xd8, Size: 0xd0] 0x7a9cc2ab00
	AnimSequence* AnimSequence;//[Offset: 0x1a8, Size: 0x8] 0x7a9cc2ab80
	AnimSequenceBase* Animation;//[Offset: 0x1b0, Size: 0x8] 0x7a9cc2ac00
	float StartOffset;//[Offset: 0x1b8, Size: 0x4] 0x7a9cbcc800
	float EndOffset;//[Offset: 0x1bc, Size: 0x4] 0x7a9cbcc870
	float PlayRate;//[Offset: 0x1c0, Size: 0x4] 0x7a9cbcc8e0
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1] 0x7a9cc2ac80
	FName SlotName;//[Offset: 0x1c8, Size: 0x8] 0x7a9cbcc950

--------------------------------
Class: MovieSceneSkeletalAnimationParams
	AnimSequenceBase* Animation;//[Offset: 0x0, Size: 0x8] 0x7aa094cb00
	FrameNumber StartFrameOffset;//[Offset: 0x8, Size: 0x4] 0x7aa094cb80
	FrameNumber EndFrameOffset;//[Offset: 0xc, Size: 0x4] 0x7aa094cc00
	float PlayRate;//[Offset: 0x10, Size: 0x4] 0x7aa0934530
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x7aa094cc80
	FName SlotName;//[Offset: 0x18, Size: 0x8] 0x7aa09345a0
	MovieSceneFloatChannel Weight;//[Offset: 0x20, Size: 0xa0] 0x7aa094cd00
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x7aa094cd80
	bool bForceCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x7aa094ce00
	float StartOffset;//[Offset: 0xc4, Size: 0x4] 0x7aa0934610
	float EndOffset;//[Offset: 0xc8, Size: 0x4] 0x7aa0934680

--------------------------------
Class: MovieSceneSkeletalAnimationTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x58, Size: 0x10] 0x7a9cc2aa00
	bool bUseLegacySectionIndexBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7a9cc2aa80

--------------------------------
Class: MovieSceneSlomoSection.MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSlomoTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSpawnSection.MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSpawnTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x58, Size: 0x10] 0x7a9cc2a880
	Guid ObjectGuid;//[Offset: 0x68, Size: 0x10] 0x7a9cc2a900

--------------------------------
Class: MovieSceneStringSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneStringChannel StringCurve;//[Offset: 0xd8, Size: 0xa0] 0x7a9cc2a780

--------------------------------
Class: MovieSceneStringChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x7aa094d380
	FString[] Values;//[Offset: 0x18, Size: 0x10] 0x7aa094d400
	FString DefaultValue;//[Offset: 0x28, Size: 0x10] 0x7aa0934760
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7aa094d480

--------------------------------
Class: MovieSceneStringTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneVectorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel Curves;//[Offset: 0xd8, Size: 0xa0] 0x7a9cc2a700
	int ChannelsUsed;//[Offset: 0x358, Size: 0x4] 0x7a9cbcc790

--------------------------------
Class: MovieSceneVectorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int NumChannelsUsed;//[Offset: 0x88, Size: 0x4] 0x7a9cbcc720

--------------------------------
Class: MovieSceneVisibilityTrack.MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: AsyncTaskDownloadImage.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7a9cc2a580
	delegate OnFail;//[Offset: 0x40, Size: 0x10] 0x7a9cc2a600
	AsyncTaskDownloadImage* DownloadImage(FString URL);// 0xffffff8523219000 0x7a9cbdf660

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0xffffff8523219000 0x7a9cbdeb00
	PanelSlot* GetContentSlot();// 0xffffff8523219000 0x7a9cbdebe0
	Widget* GetContent();// 0xffffff8523219000 0x7a9cbdecc0

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0x11c, Size: 0x10] 0x7a9cc2b800
	byte HorizontalAlignment;//[Offset: 0x12c, Size: 0x1] 0x7a9cc2b880
	byte VerticalAlignment;//[Offset: 0x12d, Size: 0x1] 0x7a9cc2b900
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 0x1] 0x7a9cc2b980
	float BlurStrength;//[Offset: 0x130, Size: 0x4] 0x7a9cbcc330
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1] 0x7a9cc2ba00
	int BlurRadius;//[Offset: 0x138, Size: 0x4] 0x7a9cbcc3a0
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x140, Size: 0x88] 0x7a9cc2ba80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccc1ac0
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccc1ba0
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0xffffff8523219000 0x7a9ccc1c80
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9cbde780
	void SetBlurStrength(float InStrength);// 0xffffff8523219000 0x7a9cbde860
	void SetBlurRadius(int InBlurRadius);// 0xffffff8523219000 0x7a9cbde940
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0xffffff8523219000 0x7a9cbdea20

--------------------------------
Class: BackgroundBlurSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7a9cc2d500
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7a9cc2d580
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7a9cc2d600
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccc1820
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccc1900
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9ccc19e0

--------------------------------
Class: BoolBinding.PropertyBinding.Object
	bool GetValue();// 0xffffff8523219000 0x7a9ccc1740

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x119, Size: 0x1] 0x7a9cc2e680
	byte VerticalAlignment;//[Offset: 0x11a, Size: 0x1] 0x7a9cc2e700
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11b, Size: 0x1] 0x7a9cc2c680
	LinearColor ContentColorAndOpacity;//[Offset: 0x11c, Size: 0x10] 0x7a9cc2c700
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x12c, Size: 0x10] 0x7a9cc2c780
	Margin Padding;//[Offset: 0x13c, Size: 0x10] 0x7a9cc2c800
	SlateBrush Background;//[Offset: 0x150, Size: 0x88] 0x7a9cc2c880
	delegate BackgroundDelegate;//[Offset: 0x1d8, Size: 0x10] 0x7a9cc2c900
	LinearColor BrushColor;//[Offset: 0x1e8, Size: 0x10] 0x7a9cc2c980
	delegate BrushColorDelegate;//[Offset: 0x1f8, Size: 0x10] 0x7a9cc2ca80
	Vector2D DesiredSizeScale;//[Offset: 0x208, Size: 0x8] 0x7a9cc2cb00
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x7a9cc2cb80
	delegate OnMouseButtonDownEvent;//[Offset: 0x214, Size: 0x10] 0x7a9cc2cc00
	delegate OnMouseButtonUpEvent;//[Offset: 0x224, Size: 0x10] 0x7a9cc2cc80
	delegate OnMouseMoveEvent;//[Offset: 0x234, Size: 0x10] 0x7a9cc2cd00
	delegate OnMouseDoubleClickEvent;//[Offset: 0x244, Size: 0x10] 0x7a9cc2cd80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccc0da0
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccc0e80
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9ccc0f60
	void SetDesiredSizeScale(Vector2D InScale);// 0xffffff8523219000 0x7a9ccc1040
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0xffffff8523219000 0x7a9ccc1120
	void SetBrushFromTexture(Texture2D* Texture);// 0xffffff8523219000 0x7a9ccc1200
	void SetBrushFromMaterial(MaterialInterface* Material);// 0xffffff8523219000 0x7a9ccc12e0
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0xffffff8523219000 0x7a9ccc13c0
	void SetBrushColor(LinearColor InBrushColor);// 0xffffff8523219000 0x7a9ccc14a0
	void SetBrush(out const SlateBrush InBrush);// 0xffffff8523219000 0x7a9ccc1580
	MaterialInstanceDynamic* GetDynamicMaterial();// 0xffffff8523219000 0x7a9ccc1660

--------------------------------
Class: BorderSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7a9cc2e380
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7a9cc2e400
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7a9cc2e480
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccc0b00
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccc0be0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9ccc0cc0

--------------------------------
Class: BrushBinding.PropertyBinding.Object
	SlateBrush GetValue();// 0xffffff8523219000 0x7a9ccc0a20

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x120, Size: 0x8] 0x7a9cc2d880
	ButtonStyle WidgetStyle;//[Offset: 0x128, Size: 0x278] 0x7a9cc2d900
	LinearColor ColorAndOpacity;//[Offset: 0x3a0, Size: 0x10] 0x7a9cc2da00
	LinearColor BackgroundColor;//[Offset: 0x3b0, Size: 0x10] 0x7a9cc2da80
	byte ClickMethod;//[Offset: 0x3c0, Size: 0x1] 0x7a9cc2db00
	byte TouchMethod;//[Offset: 0x3c1, Size: 0x1] 0x7a9cc2db80
	byte PressMethod;//[Offset: 0x3c2, Size: 0x1] 0x7a9cc2dc00
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 0x1] 0x7a9cc2dc80
	delegate OnClicked;//[Offset: 0x3c8, Size: 0x10] 0x7a9cc2dd00
	delegate OnPressed;//[Offset: 0x3d8, Size: 0x10] 0x7a9cc2dd80
	delegate OnReleased;//[Offset: 0x3e8, Size: 0x10] 0x7a9cc2de00
	delegate OnHovered;//[Offset: 0x3f8, Size: 0x10] 0x7a9cc2de80
	delegate OnUnhovered;//[Offset: 0x408, Size: 0x10] 0x7a9cc2df00
	void SetTouchMethod(byte InTouchMethod);// 0xffffff8523219000 0x7a9ccc0400
	void SetStyle(out const ButtonStyle InStyle);// 0xffffff8523219000 0x7a9ccc04e0
	void SetPressMethod(byte InPressMethod);// 0xffffff8523219000 0x7a9ccc05c0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0xffffff8523219000 0x7a9ccc06a0
	void SetClickMethod(byte InClickMethod);// 0xffffff8523219000 0x7a9ccc0780
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0xffffff8523219000 0x7a9ccc0860
	bool IsPressed();// 0xffffff8523219000 0x7a9ccc0940

--------------------------------
Class: ButtonSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7a9cc2f680
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7a9cc2f700
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7a9cc2f780
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccc0160
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccc0240
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9ccc0320

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0xffffff8523219000 0x7a9ccc0080

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x28] 0x7a9cc2eb80
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7a9cc2ec00
	int ZOrder;//[Offset: 0x64, Size: 0x4] 0x7a9cbcc170
	void SetZOrder(int InZOrder);// 0xffffff8523219000 0x7a9ccc2a80
	void SetSize(Vector2D InSize);// 0xffffff8523219000 0x7a9ccc2b60
	void SetPosition(Vector2D InPosition);// 0xffffff8523219000 0x7a9ccc2c40
	void SetOffsets(Margin InOffset);// 0xffffff8523219000 0x7a9ccc2d20
	void SetMinimum(Vector2D InMinimumAnchors);// 0xffffff8523219000 0x7a9ccc2e00
	void SetMaximum(Vector2D InMaximumAnchors);// 0xffffff8523219000 0x7a9ccc2ee0
	void SetLayout(out const AnchorData InLayoutData);// 0xffffff8523219000 0x7a9ccc2fc0
	void SetAutoSize(bool InbAutoSize);// 0xffffff8523219000 0x7a9ccc30a0
	void SetAnchors(Anchors InAnchors);// 0xffffff8523219000 0x7a9ccc3180
	void SetAlignment(Vector2D InAlignment);// 0xffffff8523219000 0x7a9ccc3260
	int GetZOrder();// 0xffffff8523219000 0x7a9ccc3340
	Vector2D GetSize();// 0xffffff8523219000 0x7a9ccc3420
	Vector2D GetPosition();// 0xffffff8523219000 0x7a9ccc3500
	Margin GetOffsets();// 0xffffff8523219000 0x7a9ccc35e0
	AnchorData GetLayout();// 0xffffff8523219000 0x7a9ccc36c0
	bool GetAutoSize();// 0xffffff8523219000 0x7a9ccc37a0
	Anchors GetAnchors();// 0xffffff8523219000 0x7a9ccc3880
	Vector2D GetAlignment();// 0xffffff8523219000 0x7a9ccc3960

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10] 0x7aa094e380
	Anchors Anchors;//[Offset: 0x10, Size: 0x10] 0x7aa094e400
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8] 0x7aa094e480

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x119, Size: 0x1] 0x7a9ccd1000
	delegate CheckedStateDelegate;//[Offset: 0x11c, Size: 0x10] 0x7a9ccd1080
	CheckBoxStyle WidgetStyle;//[Offset: 0x130, Size: 0x580] 0x7a9cc2f800
	SlateWidgetStyleAsset* Style;//[Offset: 0x6b0, Size: 0x8] 0x7a9cc2f880
	SlateBrushAsset* UncheckedImage;//[Offset: 0x6b8, Size: 0x8] 0x7a9cc2f900
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x6c0, Size: 0x8] 0x7a9cc2fa00
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x6c8, Size: 0x8] 0x7a9cc2fa80
	SlateBrushAsset* CheckedImage;//[Offset: 0x6d0, Size: 0x8] 0x7a9cc2fb00
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x6d8, Size: 0x8] 0x7a9cc2fb80
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x6e0, Size: 0x8] 0x7a9cc2fc00
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x6e8, Size: 0x8] 0x7a9cc2fc80
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x6f0, Size: 0x8] 0x7a9cc2fd00
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x6f8, Size: 0x8] 0x7a9cc2fd80
	byte HorizontalAlignment;//[Offset: 0x700, Size: 0x1] 0x7a9cc2fe00
	Margin Padding;//[Offset: 0x704, Size: 0x10] 0x7a9cc2fe80
	SlateColor BorderBackgroundColor;//[Offset: 0x718, Size: 0x28] 0x7a9cc2ff00
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 0x1] 0x7a9cc2ff80
	delegate OnCheckStateChanged;//[Offset: 0x748, Size: 0x10] 0x7a9cc2e780
	void SetIsChecked(bool InIsChecked);// 0xffffff8523219000 0x7a9ccc2620
	void SetCheckedState(enum InCheckedState);// 0xffffff8523219000 0x7a9ccc2700
	bool IsPressed();// 0xffffff8523219000 0x7a9ccc27e0
	bool IsChecked();// 0xffffff8523219000 0x7a9ccc28c0
	enum GetCheckedState();// 0xffffff8523219000 0x7a9ccc29a0

--------------------------------
Class: CheckedStateBinding.PropertyBinding.Object
	enum GetValue();// 0xffffff8523219000 0x7a9ccc2540

--------------------------------
Class: CircularThrobber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x108, Size: 0x4] 0x7a9cbcbed0
	float Period;//[Offset: 0x10c, Size: 0x4] 0x7a9cbcbf40
	float Radius;//[Offset: 0x110, Size: 0x4] 0x7a9cbcbfb0
	SlateBrushAsset* PieceImage;//[Offset: 0x118, Size: 0x8] 0x7a9ccd0d00
	SlateBrush Image;//[Offset: 0x120, Size: 0x88] 0x7a9ccd0d80
	bool bEnableRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1] 0x7a9ccd0e00
	void SetRadius(float InRadius);// 0xffffff8523219000 0x7a9ccc22a0
	void SetPeriod(float InPeriod);// 0xffffff8523219000 0x7a9ccc2380
	void SetNumberOfPieces(int InNumberOfPieces);// 0xffffff8523219000 0x7a9ccc2460

--------------------------------
Class: ColorBinding.PropertyBinding.Object
	SlateColor GetSlateValue();// 0xffffff8523219000 0x7a9ccc20e0
	LinearColor GetLinearValue();// 0xffffff8523219000 0x7a9ccc21c0

--------------------------------
Class: ComboBox.Widget.Visual.Object
	Object*[] Items;//[Offset: 0x108, Size: 0x10] 0x7a9ccd0a80
	delegate OnGenerateWidgetEvent;//[Offset: 0x118, Size: 0x10] 0x7a9ccd0b00
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x7a9ccd0b80

--------------------------------
Class: ComboBoxString.Widget.Visual.Object
	FString[] DefaultOptions;//[Offset: 0x108, Size: 0x10] 0x7aa085d300
	FString SelectedOption;//[Offset: 0x118, Size: 0x10] 0x7aa0836910
	ComboBoxStyle WidgetStyle;//[Offset: 0x128, Size: 0x3d8] 0x7aa085ba80
	TableRowStyle ItemStyle;//[Offset: 0x500, Size: 0x6b8] 0x7aa085c200
	Margin ContentPadding;//[Offset: 0xbb8, Size: 0x10] 0x7aa085c280
	float MaxListHeight;//[Offset: 0xbc8, Size: 0x4] 0x7aa0836980
	bool HasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbcc, Size: 0x1] 0x7aa085c300
	bool EnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbcd, Size: 0x1] 0x7aa085c380
	SlateFontInfo Font;//[Offset: 0xbd0, Size: 0x50] 0x7aa085a680
	SlateColor ForegroundColor;//[Offset: 0xc20, Size: 0x28] 0x7aa085a700
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc48, Size: 0x1] 0x7aa085a800
	delegate OnGenerateWidgetEvent;//[Offset: 0xc4c, Size: 0x10] 0x7aa085a900
	delegate OnSelectionChanged;//[Offset: 0xc60, Size: 0x10] 0x7aa085a980
	delegate OnOpening;//[Offset: 0xc70, Size: 0x10] 0x7aa085aa00
	void SetSelectedOption(FString Option);// 0xffffff8523219000 0x7aa084f580
	void SetSelectedIndex(const int Index);// 0xffffff8523219000 0x7aa084f660
	bool RemoveOption(FString Option);// 0xffffff8523219000 0x7aa084f740
	void RefreshOptions();// 0xffffff8523219000 0x7aa084f820
	void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0xffffff8523219000 0x7aa084f900
	void OnOpeningEvent__DelegateSignature();// 0xffffff8523219000 0x7aa084f9e0
	FString GetSelectedOption();// 0xffffff8523219000 0x7aa084fac0
	int GetSelectedIndex();// 0xffffff8523219000 0x7aa084fba0
	int GetOptionCount();// 0xffffff8523219000 0x7aa084fc80
	FString GetOptionAtIndex(int Index);// 0xffffff8523219000 0x7aa084fd60
	int FindOptionIndex(FString Option);// 0xffffff8523219000 0x7aa084fe40
	void ClearSelection();// 0xffffff8523219000 0x7aa084ff20
	void ClearOptions();// 0xffffff8523219000 0x7aa084caa0
	void AddOption(FString Option);// 0xffffff8523219000 0x7aa084cb80

--------------------------------
Class: TableRowStyle.SlateWidgetStyle
	SlateBrush SelectorFocusedBrush;//[Offset: 0x8, Size: 0x88] 0x7aa085bb00
	SlateBrush ActiveHoveredBrush;//[Offset: 0x90, Size: 0x88] 0x7aa085bb80
	SlateBrush ActiveBrush;//[Offset: 0x118, Size: 0x88] 0x7aa085bc00
	SlateBrush InactiveHoveredBrush;//[Offset: 0x1a0, Size: 0x88] 0x7aa085bc80
	SlateBrush InactiveBrush;//[Offset: 0x228, Size: 0x88] 0x7aa085bd00
	SlateBrush EvenRowBackgroundHoveredBrush;//[Offset: 0x2b0, Size: 0x88] 0x7aa085bd80
	SlateBrush EvenRowBackgroundBrush;//[Offset: 0x338, Size: 0x88] 0x7aa085be00
	SlateBrush OddRowBackgroundHoveredBrush;//[Offset: 0x3c0, Size: 0x88] 0x7aa085be80
	SlateBrush OddRowBackgroundBrush;//[Offset: 0x448, Size: 0x88] 0x7aa085bf00
	SlateColor TextColor;//[Offset: 0x4d0, Size: 0x28] 0x7aa085bf80
	SlateColor SelectedTextColor;//[Offset: 0x4f8, Size: 0x28] 0x7aa085c000
	SlateBrush DropIndicator_Above;//[Offset: 0x520, Size: 0x88] 0x7aa085c080
	SlateBrush DropIndicator_Onto;//[Offset: 0x5a8, Size: 0x88] 0x7aa085c100
	SlateBrush DropIndicator_Below;//[Offset: 0x630, Size: 0x88] 0x7aa085c180

--------------------------------
Class: DynamicEntryBox.Widget.Visual.Object
	enum EntryBoxType;//[Offset: 0x108, Size: 0x1] 0x7a9ccd1d80
	Vector2D EntrySpacing;//[Offset: 0x10c, Size: 0x8] 0x7a9ccd1e00
	Vector2D[] SpacingPattern;//[Offset: 0x118, Size: 0x10] 0x7a9ccd1f00
	SlateChildSize EntrySizeRule;//[Offset: 0x128, Size: 0x8] 0x7a9ccd1f80
	byte EntryHorizontalAlignment;//[Offset: 0x130, Size: 0x1] 0x7a9ccd2000
	byte EntryVerticalAlignment;//[Offset: 0x131, Size: 0x1] 0x7a9ccd2080
	int MaxElementSize;//[Offset: 0x134, Size: 0x4] 0x7a9cbcbd80
	class UserWidget* EntryWidgetClass;//[Offset: 0x148, Size: 0x8] 0x7a9ccd2100
	void SetEntrySpacing(out const Vector2D InEntrySpacing);// 0xffffff8523219000 0x7a9ccc51e0
	void Reset(bool bDeleteWidgets);// 0xffffff8523219000 0x7a9ccc52c0
	void RemoveEntry(UserWidget* EntryWidget);// 0xffffff8523219000 0x7a9ccc53a0
	int GetNumEntries();// 0xffffff8523219000 0x7a9ccc5480
	UserWidget*[] GetAllEntries();// 0xffffff8523219000 0x7a9ccc5560
	UserWidget* BP_CreateEntryOfClass(class UserWidget EntryClass);// 0xffffff8523219000 0x7a9ccc5640
	UserWidget* BP_CreateEntry();// 0xffffff8523219000 0x7a9ccc1d60

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4] 0x7aa0934300
	byte SizeRule;//[Offset: 0x4, Size: 0x1] 0x7aa094d700

--------------------------------
Class: EditableText.Widget.Visual.Object
	FText Text;//[Offset: 0x108, Size: 0x18] 0x7aa0836520
	delegate TextDelegate;//[Offset: 0x120, Size: 0x10] 0x7aa085df00
	FText HintText;//[Offset: 0x130, Size: 0x18] 0x7aa0836590
	delegate HintTextDelegate;//[Offset: 0x148, Size: 0x10] 0x7aa085df80
	EditableTextStyle WidgetStyle;//[Offset: 0x158, Size: 0x218] 0x7aa085e280
	SlateWidgetStyleAsset* Style;//[Offset: 0x370, Size: 0x8] 0x7aa085e300
	SlateBrushAsset* BackgroundImageSelected;//[Offset: 0x378, Size: 0x8] 0x7aa085e380
	SlateBrushAsset* BackgroundImageComposing;//[Offset: 0x380, Size: 0x8] 0x7aa085e400
	SlateBrushAsset* CaretImage;//[Offset: 0x388, Size: 0x8] 0x7aa085e480
	SlateFontInfo Font;//[Offset: 0x390, Size: 0x50] 0x7aa085e500
	SlateColor ColorAndOpacity;//[Offset: 0x3e0, Size: 0x28] 0x7aa085e580
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1] 0x7aa085e600
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 0x1] 0x7aa085e680
	float MinimumDesiredWidth;//[Offset: 0x40c, Size: 0x4] 0x7aa0836600
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1] 0x7aa085e700
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 0x1] 0x7aa085c680
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x412, Size: 0x1] 0x7aa085c780
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x413, Size: 0x1] 0x7aa085c800
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1] 0x7aa085c880
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 0x1] 0x7aa085c900
	byte KeyboardType;//[Offset: 0x416, Size: 0x1] 0x7aa085c980
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x417, Size: 0x1] 0x7aa085ca80
	enum VirtualKeyboardDismissAction;//[Offset: 0x418, Size: 0x1] 0x7aa085cb80
	byte Justification;//[Offset: 0x419, Size: 0x1] 0x7aa085cc00
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x41a, Size: 0x3] 0x7aa085cf80
	delegate OnTextChanged;//[Offset: 0x420, Size: 0x10] 0x7aa085d000
	delegate OnTextCommitted;//[Offset: 0x430, Size: 0x10] 0x7aa085d080
	void SetText(FText InText);// 0xffffff8523219000 0x7aa084ef60
	void SetIsReadOnly(bool InbIsReadyOnly);// 0xffffff8523219000 0x7aa084f040
	void SetIsPassword(bool InbIsPassword);// 0xffffff8523219000 0x7aa084f120
	void SetHintText(FText InHintText);// 0xffffff8523219000 0x7aa084f200
	void OnEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0xffffff8523219000 0x7aa084f2e0
	void OnEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0xffffff8523219000 0x7aa084f3c0
	FText GetText();// 0xffffff8523219000 0x7aa084f4a0

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7aa085ca00

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7aa085cc80
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7aa085cd00
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1] 0x7aa085ce00
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1] 0x7aa085cf00

--------------------------------
Class: EditableTextBox.Widget.Visual.Object
	FText Text;//[Offset: 0x108, Size: 0x18] 0x7aa0837e10
	delegate TextDelegate;//[Offset: 0x120, Size: 0x10] 0x7aa085ff00
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x130, Size: 0x7f0] 0x7aa085f180
	SlateWidgetStyleAsset* Style;//[Offset: 0x920, Size: 0x8] 0x7aa085f200
	FText HintText;//[Offset: 0x928, Size: 0x18] 0x7aa0837e80
	delegate HintTextDelegate;//[Offset: 0x940, Size: 0x10] 0x7aa085f280
	SlateFontInfo Font;//[Offset: 0x950, Size: 0x50] 0x7aa085f300
	LinearColor ForegroundColor;//[Offset: 0x9a0, Size: 0x10] 0x7aa085f380
	LinearColor BackgroundColor;//[Offset: 0x9b0, Size: 0x10] 0x7aa085f400
	LinearColor ReadOnlyForegroundColor;//[Offset: 0x9c0, Size: 0x10] 0x7aa085f480
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0, Size: 0x1] 0x7aa085f500
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d1, Size: 0x1] 0x7aa085f580
	float MinimumDesiredWidth;//[Offset: 0x9d4, Size: 0x4] 0x7aa0837ef0
	Margin Padding;//[Offset: 0x9d8, Size: 0x10] 0x7aa085f600
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e8, Size: 0x1] 0x7aa085f680
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e9, Size: 0x1] 0x7aa085f700
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ea, Size: 0x1] 0x7aa085f780
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9eb, Size: 0x1] 0x7aa085d700
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ec, Size: 0x1] 0x7aa085d780
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ed, Size: 0x1] 0x7aa085d880
	byte KeyboardType;//[Offset: 0x9ee, Size: 0x1] 0x7aa085d900
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x9ef, Size: 0x1] 0x7aa085d980
	enum VirtualKeyboardDismissAction;//[Offset: 0x9f0, Size: 0x1] 0x7aa085da80
	byte Justification;//[Offset: 0x9f1, Size: 0x1] 0x7aa085db00
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x9f2, Size: 0x3] 0x7aa085db80
	delegate OnTextChanged;//[Offset: 0x9f8, Size: 0x10] 0x7aa085dc00
	delegate OnTextCommitted;//[Offset: 0xa08, Size: 0x10] 0x7aa085dc80
	void SetText(FText InText);// 0xffffff8523219000 0x7aa0881c80
	void SetIsReadOnly(bool bReadOnly);// 0xffffff8523219000 0x7aa084e780
	void SetIsPassword(bool bIsPassword);// 0xffffff8523219000 0x7aa084e860
	void SetHintText(FText InText);// 0xffffff8523219000 0x7aa084e940
	void SetError(FText InError);// 0xffffff8523219000 0x7aa084ea20
	void OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0xffffff8523219000 0x7aa084eb00
	void OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0xffffff8523219000 0x7aa084ebe0
	bool HasError();// 0xffffff8523219000 0x7aa084ecc0
	FText GetText();// 0xffffff8523219000 0x7aa084eda0
	void ClearError();// 0xffffff8523219000 0x7aa084ee80

--------------------------------
Class: ExpandableArea.Widget.Visual.Object
	ExpandableAreaStyle Style;//[Offset: 0x110, Size: 0x120] 0x7a9ccd1700
	SlateBrush BorderBrush;//[Offset: 0x230, Size: 0x88] 0x7a9ccd1780
	SlateColor BorderColor;//[Offset: 0x2b8, Size: 0x28] 0x7a9ccd1800
	bool bIsExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1] 0x7a9ccd1880
	float MaxHeight;//[Offset: 0x2e4, Size: 0x4] 0x7a9cbcbd10
	Margin HeaderPadding;//[Offset: 0x2e8, Size: 0x10] 0x7a9ccd1900
	Margin AreaPadding;//[Offset: 0x2f8, Size: 0x10] 0x7a9ccd1980
	delegate OnExpansionChanged;//[Offset: 0x308, Size: 0x10] 0x7a9ccd1a00
	Widget* HeaderContent;//[Offset: 0x318, Size: 0x8] 0x7a9ccd1a80
	Widget* BodyContent;//[Offset: 0x320, Size: 0x8] 0x7a9ccd1b00
	void SetIsExpanded_Animated(bool IsExpanded);// 0xffffff8523219000 0x7a9ccc4f40
	void SetIsExpanded(bool IsExpanded);// 0xffffff8523219000 0x7a9ccc5020
	bool GetIsExpanded();// 0xffffff8523219000 0x7a9ccc5100

--------------------------------
Class: ExpandableAreaStyle.SlateWidgetStyle
	SlateBrush CollapsedImage;//[Offset: 0x8, Size: 0x88] 0x7aa0920c00
	SlateBrush ExpandedImage;//[Offset: 0x90, Size: 0x88] 0x7aa0920c80
	float RolloutAnimationSeconds;//[Offset: 0x118, Size: 0x4] 0x7aa083c8e0

--------------------------------
Class: FloatBinding.PropertyBinding.Object
	float GetValue();// 0xffffff8523219000 0x7a9ccc4e60

--------------------------------
Class: GridPanel.PanelWidget.Widget.Visual.Object
	float[] ColumnFill;//[Offset: 0x120, Size: 0x10] 0x7a9ccd1500
	float[] RowFill;//[Offset: 0x130, Size: 0x10] 0x7a9ccd1580
	void SetRowFill(int ColumnIndex, float Coefficient);// 0xffffff8523219000 0x7a9ccc4bc0
	void SetColumnFill(int ColumnIndex, float Coefficient);// 0xffffff8523219000 0x7a9ccc4ca0
	GridSlot* AddChildToGrid(Widget* Content);// 0xffffff8523219000 0x7a9ccc4d80

--------------------------------
Class: GridSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7a9ccd1180
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7a9ccd1200
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7a9ccd1280
	int Row;//[Offset: 0x4c, Size: 0x4] 0x7a9cbcd280
	int RowSpan;//[Offset: 0x50, Size: 0x4] 0x7a9cbcd2f0
	int Column;//[Offset: 0x54, Size: 0x4] 0x7a9cbcd360
	int ColumnSpan;//[Offset: 0x58, Size: 0x4] 0x7a9cbcd3d0
	int Layer;//[Offset: 0x5c, Size: 0x4] 0x7a9cbcd440
	Vector2D Nudge;//[Offset: 0x60, Size: 0x8] 0x7a9ccd1300
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccc44c0
	void SetRowSpan(int InRowSpan);// 0xffffff8523219000 0x7a9ccc45a0
	void SetRow(int InRow);// 0xffffff8523219000 0x7a9ccc4680
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccc4760
	void SetLayer(int InLayer);// 0xffffff8523219000 0x7a9ccc4840
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9ccc4920
	void SetColumnSpan(int InColumnSpan);// 0xffffff8523219000 0x7a9ccc4a00
	void SetColumn(int InColumn);// 0xffffff8523219000 0x7a9ccc4ae0

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0xffffff8523219000 0x7a9ccc43e0

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7a9ccd2d80
	SlateChildSize Size;//[Offset: 0x48, Size: 0x8] 0x7a9ccd2e00
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x7a9ccd2e80
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x7a9ccd2f00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccc4060
	void SetSize(SlateChildSize InSize);// 0xffffff8523219000 0x7a9ccc4140
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccc4220
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9ccc4300

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x108, Size: 0x88] 0x7a9ccd2200
	delegate BrushDelegate;//[Offset: 0x190, Size: 0x10] 0x7a9ccd2300
	LinearColor ColorAndOpacity;//[Offset: 0x1a0, Size: 0x10] 0x7a9ccd2380
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 0x10] 0x7a9ccd2400
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1] 0x7a9ccd2480
	delegate OnMouseButtonDownEvent;//[Offset: 0x1c4, Size: 0x10] 0x7a9ccd2500
	void SetOpacity(float InOpacity);// 0xffffff8523219000 0x7a9ccc6ec0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0xffffff8523219000 0x7a9ccc6fa0
	void SetBrushTintColor(SlateColor TintColor);// 0xffffff8523219000 0x7a9ccc7080
	void SetBrushSize(Vector2D DesiredSize);// 0xffffff8523219000 0x7a9ccc7160
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0xffffff8523219000 0x7a9ccc7240
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0xffffff8523219000 0x7a9ccc7320
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0xffffff8523219000 0x7a9ccc3a40
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0xffffff8523219000 0x7a9ccc3b20
	void SetBrushFromMaterial(MaterialInterface* Material);// 0xffffff8523219000 0x7a9ccc3c00
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0xffffff8523219000 0x7a9ccc3ce0
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0xffffff8523219000 0x7a9ccc3dc0
	void SetBrush(out const SlateBrush InBrush);// 0xffffff8523219000 0x7a9ccc3ea0
	MaterialInstanceDynamic* GetDynamicMaterial();// 0xffffff8523219000 0x7a9ccc3f80

--------------------------------
Class: InputKeySelector.Widget.Visual.Object
	ButtonStyle WidgetStyle;//[Offset: 0x108, Size: 0x278] 0x7aa0890580
	TextBlockStyle TextStyle;//[Offset: 0x380, Size: 0x268] 0x7aa0890a80
	InputChord SelectedKey;//[Offset: 0x5e8, Size: 0x20] 0x7aa0890b00
	SlateFontInfo Font;//[Offset: 0x608, Size: 0x50] 0x7aa0890b80
	Margin Margin;//[Offset: 0x658, Size: 0x10] 0x7aa0890c00
	LinearColor ColorAndOpacity;//[Offset: 0x668, Size: 0x10] 0x7aa0890d00
	FText KeySelectionText;//[Offset: 0x678, Size: 0x18] 0x7aa0837c50
	FText NoKeySpecifiedText;//[Offset: 0x690, Size: 0x18] 0x7aa0837cc0
	bool bAllowModifierKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1] 0x7aa0890d80
	bool bAllowGamepadKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a9, Size: 0x1] 0x7aa0890e00
	Key[] EscapeKeys;//[Offset: 0x6b0, Size: 0x10] 0x7aa0890f00
	delegate OnKeySelected;//[Offset: 0x6c0, Size: 0x10] 0x7aa07d6580
	delegate OnIsSelectingKeyChanged;//[Offset: 0x6d0, Size: 0x10] 0x7aa0890f80
	void SetTextBlockVisibility(const enum InVisibility);// 0xffffff8523219000 0x7aa08812e0
	void SetSelectedKey(out const InputChord InSelectedKey);// 0xffffff8523219000 0x7aa08813c0
	void SetNoKeySpecifiedText(FText InNoKeySpecifiedText);// 0xffffff8523219000 0x7aa08814a0
	void SetKeySelectionText(FText InKeySelectionText);// 0xffffff8523219000 0x7aa0881580
	void SetEscapeKeys(out const Key[] InKeys);// 0xffffff8523219000 0x7aa0881660
	void SetAllowModifierKeys(bool bInAllowModifierKeys);// 0xffffff8523219000 0x7aa0881740
	void SetAllowGamepadKeys(bool bInAllowGamepadKeys);// 0xffffff8523219000 0x7aa0881820
	void OnKeySelected__DelegateSignature(InputChord SelectedKey);// 0xffffff8523219000 0x7aa0881900
	void OnIsSelectingKeyChanged__DelegateSignature();// 0xffffff8523219000 0x7aa08819e0
	bool GetIsSelectingKey();// 0xffffff8523219000 0x7aa0881ac0

--------------------------------
Class: Int32Binding.PropertyBinding.Object
	int GetValue();// 0xffffff8523219000 0x7a9ccc6de0

--------------------------------
Class: InvalidationBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bCanCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x7a9ccd4100
	bool CacheRelativeTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x7a9ccd4180
	void SetCanCache(bool CanCache);// 0xffffff8523219000 0x7a9ccc6b40
	void InvalidateCache();// 0xffffff8523219000 0x7a9ccc6c20
	bool GetCanCache();// 0xffffff8523219000 0x7a9ccc6d00

--------------------------------
Class: NativeUserListEntry.Interface.Object
	bool IsListItemSelected();// 0xffffff8523219000 0x7a9ccc68a0
	bool IsListItemExpanded();// 0xffffff8523219000 0x7a9ccc6980
	ListViewBase* GetOwningListView();// 0xffffff8523219000 0x7a9ccc6a60

--------------------------------
Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x108, Size: 0x8] 0x7a9ccd3b00
	delegate BP_OnEntryGenerated;//[Offset: 0x110, Size: 0x10] 0x7a9ccd3b80
	delegate BP_OnEntryReleased;//[Offset: 0x120, Size: 0x10] 0x7a9ccd3c00
	void ScrollToTop();// 0xffffff8523219000 0x7a9ccc60c0
	void ScrollToBottom();// 0xffffff8523219000 0x7a9ccc61a0
	void RegenerateAllEntries();// 0xffffff8523219000 0x7a9ccc6280
	UserWidget*[] GetDisplayedEntryWidgets();// 0xffffff8523219000 0x7a9ccc6360

--------------------------------
Class: UserListEntry.NativeUserListEntry.Interface.Object
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0xffffff8523219000 0x7a9ccc6600
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0xffffff8523219000 0x7a9ccc66e0
	void BP_OnEntryReleased();// 0xffffff8523219000 0x7a9ccc67c0

--------------------------------
Class: UserObjectListEntry.UserListEntry.NativeUserListEntry.Interface.Object
	void OnListItemObjectSet(Object* ListItemObject);// 0xffffff8523219000 0x7a9ccc6440
	Object* GetListItemObject();// 0xffffff8523219000 0x7a9ccc6520

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object
	byte SelectionMode;//[Offset: 0x2b8, Size: 0x1] 0x7a9ccd4a80
	enum ConsumeMouseWheel;//[Offset: 0x2b9, Size: 0x1] 0x7a9ccd4b80
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba, Size: 0x1] 0x7a9ccd4c00
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bb, Size: 0x1] 0x7a9ccd4c80
	float EntrySpacing;//[Offset: 0x2bc, Size: 0x4] 0x7a9cbcce20
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x7a9ccd4d00
	Object*[] ListItems;//[Offset: 0x2c8, Size: 0x10] 0x7a9ccd4e00
	delegate BP_OnItemClicked;//[Offset: 0x2e8, Size: 0x10] 0x7a9ccd4e80
	delegate BP_OnItemDoubleClicked;//[Offset: 0x2f8, Size: 0x10] 0x7a9ccd4f00
	delegate BP_OnItemIsHoveredChanged;//[Offset: 0x308, Size: 0x10] 0x7a9ccd4f80
	delegate BP_OnItemSelectionChanged;//[Offset: 0x318, Size: 0x10] 0x7a9ccd5000
	delegate BP_OnItemScrolledIntoView;//[Offset: 0x328, Size: 0x10] 0x7a9ccd5080
	void SetSelectionMode(byte SelectionMode);// 0xffffff8523219000 0x7a9ccc8740
	void SetSelectedIndex(int Index);// 0xffffff8523219000 0x7a9ccc8820
	void ScrollIndexIntoView(int Index);// 0xffffff8523219000 0x7a9ccc8900
	void NavigateToIndex(int Index);// 0xffffff8523219000 0x7a9ccc89e0
	bool IsRefreshPending();// 0xffffff8523219000 0x7a9ccc8ac0
	int GetNumItems();// 0xffffff8523219000 0x7a9ccc8ba0
	Object*[] GetListItems();// 0xffffff8523219000 0x7a9ccc8c80
	Object* GetItemAt(int Index);// 0xffffff8523219000 0x7a9ccc8d60
	int GetIndexForItem(Object* Item);// 0xffffff8523219000 0x7a9ccc8e40
	void ClearListItems();// 0xffffff8523219000 0x7a9ccc8f20
	void BP_SetSelectedItem(Object* Item);// 0xffffff8523219000 0x7a9ccc9000
	void BP_SetListItems(out const Object*[] InListItems);// 0xffffff8523219000 0x7a9ccc5720
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0xffffff8523219000 0x7a9ccc5800
	void BP_ScrollItemIntoView(Object* Item);// 0xffffff8523219000 0x7a9ccc58e0
	void BP_NavigateToItem(Object* Item);// 0xffffff8523219000 0x7a9ccc59c0
	bool BP_IsItemVisible(Object* Item);// 0xffffff8523219000 0x7a9ccc5aa0
	bool BP_GetSelectedItems(out Object*[] Items);// 0xffffff8523219000 0x7a9ccc5b80
	Object* BP_GetSelectedItem();// 0xffffff8523219000 0x7a9ccc5c60
	int BP_GetNumItemsSelected();// 0xffffff8523219000 0x7a9ccc5d40
	void BP_ClearSelection();// 0xffffff8523219000 0x7a9ccc5e20
	void BP_CancelScrollIntoView();// 0xffffff8523219000 0x7a9ccc5f00
	void AddItem(Object* Item);// 0xffffff8523219000 0x7a9ccc5fe0

--------------------------------
Class: ListViewDesignerPreviewItem.Object

--------------------------------
Class: MenuAnchor.ContentWidget.PanelWidget.Widget.Visual.Object
	class UserWidget* MenuClass;//[Offset: 0x120, Size: 0x8] 0x7aa085a880
	delegate OnGetMenuContentEvent;//[Offset: 0x128, Size: 0x10] 0x7a9ccd4500
	byte Placement;//[Offset: 0x138, Size: 0x1] 0x7a9ccd4580
	bool ShouldDeferPaintingAfterWindowContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1] 0x7a9ccd4600
	bool UseApplicationMenuStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1] 0x7a9ccd4680
	delegate OnMenuOpenChanged;//[Offset: 0x140, Size: 0x10] 0x7a9ccd4700
	void ToggleOpen(bool bFocusOnOpen);// 0xffffff8523219000 0x7a9ccc8120
	bool ShouldOpenDueToClick();// 0xffffff8523219000 0x7a9ccc8200
	void Open(bool bFocusMenu);// 0xffffff8523219000 0x7a9ccc82e0
	bool IsOpen();// 0xffffff8523219000 0x7a9ccc83c0
	bool HasOpenSubMenus();// 0xffffff8523219000 0x7a9ccc84a0
	Vector2D GetMenuPosition();// 0xffffff8523219000 0x7a9ccc8580
	void Close();// 0xffffff8523219000 0x7a9ccc8660

--------------------------------
Class: MouseCursorBinding.PropertyBinding.Object
	byte GetValue();// 0xffffff8523219000 0x7a9ccc8040

--------------------------------
Class: MovieScene2DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieScene2DTransformMask TransformMask;//[Offset: 0xd8, Size: 0x4] 0x7a9ccd6300
	MovieSceneFloatChannel Translation;//[Offset: 0xe0, Size: 0xa0] 0x7a9ccd4280
	MovieSceneFloatChannel Rotation;//[Offset: 0x220, Size: 0xa0] 0x7a9ccd4300
	MovieSceneFloatChannel Scale;//[Offset: 0x2c0, Size: 0xa0] 0x7a9ccd4380
	MovieSceneFloatChannel Shear;//[Offset: 0x400, Size: 0xa0] 0x7a9ccd4400

--------------------------------
Class: MovieScene2DTransformMask
	uint32 Mask;//[Offset: 0x0, Size: 0x4] 0x7aa09343e0

--------------------------------
Class: MovieScene2DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneMarginSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TopCurve;//[Offset: 0xd8, Size: 0xa0] 0x7a9ccd6100
	MovieSceneFloatChannel LeftCurve;//[Offset: 0x178, Size: 0xa0] 0x7a9ccd6180
	MovieSceneFloatChannel RightCurve;//[Offset: 0x218, Size: 0xa0] 0x7a9ccd6200
	MovieSceneFloatChannel BottomCurve;//[Offset: 0x2b8, Size: 0xa0] 0x7a9ccd6280

--------------------------------
Class: MovieSceneMarginTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneWidgetMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	FName[] BrushPropertyNamePath;//[Offset: 0x68, Size: 0x10] 0x7a9ccd6080
	FName TrackName;//[Offset: 0x78, Size: 0x8] 0x7a9cbccdb0

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x108, Size: 0x3] 0x7aa0891e80
	byte Justification;//[Offset: 0x10b, Size: 0x1] 0x7aa0891f00
	enum WrappingPolicy;//[Offset: 0x10c, Size: 0x1] 0x7aa0892000
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10d, Size: 0x1] 0x7aa0892080
	float WrapTextAt;//[Offset: 0x110, Size: 0x4] 0x7aa0837b70
	Margin Margin;//[Offset: 0x114, Size: 0x10] 0x7aa0892100
	float LineHeightPercentage;//[Offset: 0x124, Size: 0x4] 0x7aa0837be0

--------------------------------
Class: MultiLineEditableText.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18] 0x7aa08378d0
	FText HintText;//[Offset: 0x140, Size: 0x18] 0x7aa0837940
	delegate HintTextDelegate;//[Offset: 0x158, Size: 0x10] 0x7aa0891680
	TextBlockStyle WidgetStyle;//[Offset: 0x168, Size: 0x268] 0x7aa0891700
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1] 0x7aa0891780
	SlateFontInfo Font;//[Offset: 0x3d8, Size: 0x50] 0x7aa0891800
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1] 0x7aa0891880
	bool ClearTextSelectionOnFocusLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 0x1] 0x7aa0891900
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 0x1] 0x7aa0891980
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b, Size: 0x1] 0x7aa0891a00
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1] 0x7aa0891a80
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x42d, Size: 0x1] 0x7aa0891b00
	enum VirtualKeyboardDismissAction;//[Offset: 0x42e, Size: 0x1] 0x7aa0891c00
	delegate OnTextChanged;//[Offset: 0x430, Size: 0x10] 0x7aa0891c80
	delegate OnTextCommitted;//[Offset: 0x440, Size: 0x10] 0x7aa0891d00
	void SetText(FText InText);// 0xffffff8523219000 0x7aa0880860
	void SetIsReadOnly(bool bReadOnly);// 0xffffff8523219000 0x7aa0880940
	void OnMultiLineEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0xffffff8523219000 0x7aa0880a20
	void OnMultiLineEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0xffffff8523219000 0x7aa0880b00
	FText GetText();// 0xffffff8523219000 0x7aa0880be0

--------------------------------
Class: MultiLineEditableTextBox.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18] 0x7aa08375c0
	FText HintText;//[Offset: 0x140, Size: 0x18] 0x7aa0837630
	delegate HintTextDelegate;//[Offset: 0x158, Size: 0x10] 0x7aa0892e00
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x168, Size: 0x7f0] 0x7aa0892e80
	TextBlockStyle TextStyle;//[Offset: 0x958, Size: 0x268] 0x7aa0892f80
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc0, Size: 0x1] 0x7aa0893000
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc1, Size: 0x1] 0x7aa0893080
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0xbc2, Size: 0x1] 0x7aa0893100
	enum VirtualKeyboardDismissAction;//[Offset: 0xbc3, Size: 0x1] 0x7aa0891100
	SlateWidgetStyleAsset* Style;//[Offset: 0xbc8, Size: 0x8] 0x7aa0891180
	SlateFontInfo Font;//[Offset: 0xbd0, Size: 0x50] 0x7aa0891200
	LinearColor ForegroundColor;//[Offset: 0xc20, Size: 0x10] 0x7aa0891280
	LinearColor BackgroundColor;//[Offset: 0xc30, Size: 0x10] 0x7aa0891300
	LinearColor ReadOnlyForegroundColor;//[Offset: 0xc40, Size: 0x10] 0x7aa0891380
	delegate OnTextChanged;//[Offset: 0xc50, Size: 0x10] 0x7aa0891400
	delegate OnTextCommitted;//[Offset: 0xc60, Size: 0x10] 0x7aa0891480
	void SetText(FText InText);// 0xffffff8523219000 0x7aa0880320
	void SetIsReadOnly(bool bReadOnly);// 0xffffff8523219000 0x7aa0880400
	void SetError(FText InError);// 0xffffff8523219000 0x7aa08804e0
	void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0xffffff8523219000 0x7aa08805c0
	void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0xffffff8523219000 0x7aa08806a0
	FText GetText();// 0xffffff8523219000 0x7aa0880780

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: NamedSlotInterface.Interface.Object

--------------------------------
Class: NativeWidgetHost.Widget.Visual.Object

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0xffffff8523219000 0x7a9ccc7f60

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x7a9ccd5c80
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x7a9ccd5d00
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x7a9ccd5d80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccc7cc0
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccc7da0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9ccc7e80

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x1a0] 0x7a9ccd5600
	SlateWidgetStyleAsset* Style;//[Offset: 0x2a8, Size: 0x8] 0x7a9ccd5680
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2b0, Size: 0x8] 0x7a9ccd5700
	SlateBrushAsset* FillImage;//[Offset: 0x2b8, Size: 0x8] 0x7a9ccd5780
	SlateBrushAsset* MarqueeImage;//[Offset: 0x2c0, Size: 0x8] 0x7a9ccd5800
	float Percent;//[Offset: 0x2c8, Size: 0x4] 0x7a9cbccc60
	byte BarFillType;//[Offset: 0x2cc, Size: 0x1] 0x7a9ccd5880
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1] 0x7a9ccd5900
	Vector2D BorderPadding;//[Offset: 0x2d0, Size: 0x8] 0x7a9ccd5980
	delegate PercentDelegate;//[Offset: 0x2d8, Size: 0x10] 0x7a9ccd5a00
	LinearColor FillColorAndOpacity;//[Offset: 0x2e8, Size: 0x10] 0x7a9ccd5a80
	delegate FillColorAndOpacityDelegate;//[Offset: 0x2f8, Size: 0x10] 0x7a9ccd5b00
	void SetPercent(float InPercent);// 0xffffff8523219000 0x7a9ccc7a20
	void SetIsMarquee(bool InbIsMarquee);// 0xffffff8523219000 0x7a9ccc7b00
	void SetFillColorAndOpacity(LinearColor InColor);// 0xffffff8523219000 0x7a9ccc7be0

--------------------------------
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool RenderOnInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x7a9ccd5380
	bool RenderOnPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x7a9ccd5400
	int Phase;//[Offset: 0x11c, Size: 0x4] 0x7a9cbce6a0
	int PhaseCount;//[Offset: 0x120, Size: 0x4] 0x7a9cbcca30
	MaterialInterface* EffectMaterial;//[Offset: 0x128, Size: 0x8] 0x7a9ccd5480
	FName TextureParameter;//[Offset: 0x130, Size: 0x8] 0x7a9cbccaa0
	void SetTextureParameter(FName TextureParameter);// 0xffffff8523219000 0x7a9ccc75c0
	void SetRenderingPhase(int RenderPhase, int TotalPhases);// 0xffffff8523219000 0x7a9ccc76a0
	void SetEffectMaterial(MaterialInterface* EffectMaterial);// 0xffffff8523219000 0x7a9ccc7780
	void RequestRender();// 0xffffff8523219000 0x7a9ccc7860
	MaterialInstanceDynamic* GetEffectMaterial();// 0xffffff8523219000 0x7a9ccc7940

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18] 0x7a9cbce5c0
	DataTable* TextStyleSet;//[Offset: 0x140, Size: 0x8] 0x7a9ccd7100
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x148, Size: 0x10] 0x7a9ccd7200
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x3d0, Size: 0x10] 0x7a9ccd7300
	void SetText(out const FText InText);// 0xffffff8523219000 0x7a9ccc7400
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0xffffff8523219000 0x7a9ccc74e0

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: RichTextBlockImageDecorator.RichTextBlockDecorator.Object
	DataTable* ImageSet;//[Offset: 0x28, Size: 0x8] 0x7a9ccd7080

--------------------------------
Class: SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object
	bool PadLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x7a9ccd6c80
	bool PadRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x7a9ccd6d00
	bool PadTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1] 0x7a9ccd6d80
	bool PadBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1] 0x7a9ccd6e00
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);// 0xffffff8523219000 0x7a9cccace0

--------------------------------
Class: SafeZoneSlot.PanelSlot.Visual.Object
	bool bIsTitleSafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7a9ccd6a00
	Margin SafeAreaScale;//[Offset: 0x3c, Size: 0x10] 0x7a9ccd6a80
	byte HAlign;//[Offset: 0x4c, Size: 0x1] 0x7a9ccd6b00
	byte VAlign;//[Offset: 0x4d, Size: 0x1] 0x7a9ccd6b80
	Margin Padding;//[Offset: 0x50, Size: 0x10] 0x7a9ccd6c00

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x119, Size: 0x1] 0x7a9ccd6680
	byte StretchDirection;//[Offset: 0x11a, Size: 0x1] 0x7a9ccd6700
	float UserSpecifiedScale;//[Offset: 0x11c, Size: 0x4] 0x7a9cbce4e0
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x7a9ccd6780
	bool bSingleLayoutPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1] 0x7a9ccd6800
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0xffffff8523219000 0x7a9ccca960
	void SetStretchDirection(byte InStretchDirection);// 0xffffff8523219000 0x7a9cccaa40
	void SetStretch(byte InStretch);// 0xffffff8523219000 0x7a9cccab20
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0xffffff8523219000 0x7a9cccac00

--------------------------------
Class: ScaleBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7a9ccd6380
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7a9ccd6400
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7a9ccd6480
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccca6c0
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccca7a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9ccca880

--------------------------------
Class: ScrollBar.Widget.Visual.Object
	ScrollBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x4d0] 0x7a9ccd8180
	SlateWidgetStyleAsset* Style;//[Offset: 0x5d8, Size: 0x8] 0x7a9ccd8200
	bool bAlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1] 0x7a9ccd8280
	bool bAlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 0x1] 0x7a9ccd8300
	byte Orientation;//[Offset: 0x5e2, Size: 0x1] 0x7a9ccd8380
	Vector2D Thickness;//[Offset: 0x5e4, Size: 0x8] 0x7a9ccd8400
	void SetState(float InOffsetFraction, float InThumbSizeFraction);// 0xffffff8523219000 0x7a9ccca5e0

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x120, Size: 0x228] 0x7a9ccd9380
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x348, Size: 0x4d0] 0x7a9ccd9400
	SlateWidgetStyleAsset* Style;//[Offset: 0x818, Size: 0x8] 0x7a9ccd9480
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x820, Size: 0x8] 0x7a9ccd7400
	byte Orientation;//[Offset: 0x828, Size: 0x1] 0x7a9ccd7480
	enum ScrollBarVisibility;//[Offset: 0x829, Size: 0x1] 0x7a9ccd7580
	enum ConsumeMouseWheel;//[Offset: 0x82a, Size: 0x1] 0x7a9ccd7680
	Vector2D ScrollbarThickness;//[Offset: 0x82c, Size: 0x8] 0x7a9ccd7700
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x834, Size: 0x1] 0x7a9ccd7780
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x835, Size: 0x1] 0x7a9ccd7880
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x836, Size: 0x1] 0x7a9ccd7900
	enum NavigationDestination;//[Offset: 0x837, Size: 0x1] 0x7a9ccd7a00
	float NavigationScrollPadding;//[Offset: 0x838, Size: 0x4] 0x7a9cbce240
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83c, Size: 0x1] 0x7a9ccd7a80
	delegate OnUserScrolled;//[Offset: 0x840, Size: 0x10] 0x7a9ccd7b00
	void SetScrollOffset(float NewScrollOffset);// 0xffffff8523219000 0x7a9ccc9b60
	void SetScrollBarVisibility(enum NewScrollBarVisibility);// 0xffffff8523219000 0x7a9ccc9c40
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0xffffff8523219000 0x7a9ccc9d20
	void SetOrientation(byte NewOrientation);// 0xffffff8523219000 0x7a9ccc9e00
	void SetConsumeMouseWheel(enum NewConsumeMouseWheel);// 0xffffff8523219000 0x7a9ccc9ee0
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0xffffff8523219000 0x7a9ccc9fc0
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0xffffff8523219000 0x7a9ccca0a0
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination);// 0xffffff8523219000 0x7a9ccca180
	void ScrollToStart();// 0xffffff8523219000 0x7a9ccca260
	void ScrollToEnd();// 0xffffff8523219000 0x7a9ccca340
	float GetViewOffsetFraction();// 0xffffff8523219000 0x7a9ccca420
	float GetScrollOffset();// 0xffffff8523219000 0x7a9ccca500

--------------------------------
Class: ScrollBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7a9ccd9080
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7a9ccd9100
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7a9ccd9180
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccc98c0
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccc99a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9ccc9a80

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x119, Size: 0x1] 0x7a9ccd8c80
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x119, Size: 0x1] 0x7a9ccd8d00
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x119, Size: 0x1] 0x7a9ccd8d80
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x119, Size: 0x1] 0x7a9ccd8e00
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x119, Size: 0x1] 0x7a9ccd8e80
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x119, Size: 0x1] 0x7a9ccd8f00
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x119, Size: 0x1] 0x7a9ccd8f80
	float WidthOverride;//[Offset: 0x11c, Size: 0x4] 0x7a9cbcdc20
	float HeightOverride;//[Offset: 0x120, Size: 0x4] 0x7a9cbcdc90
	float MinDesiredWidth;//[Offset: 0x124, Size: 0x4] 0x7a9cbcdd00
	float MinDesiredHeight;//[Offset: 0x128, Size: 0x4] 0x7a9cbcdd70
	float MaxDesiredWidth;//[Offset: 0x12c, Size: 0x4] 0x7a9cbcdde0
	float MaxDesiredHeight;//[Offset: 0x130, Size: 0x4] 0x7a9cbcde50
	float MaxAspectRatio;//[Offset: 0x134, Size: 0x4] 0x7a9cbcdec0
	void SetWidthOverride(float InWidthOverride);// 0xffffff8523219000 0x7a9cccc640
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0xffffff8523219000 0x7a9cccc720
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0xffffff8523219000 0x7a9cccc800
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0xffffff8523219000 0x7a9cccc8e0
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0xffffff8523219000 0x7a9cccc9c0
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0xffffff8523219000 0x7a9ccc90e0
	void SetHeightOverride(float InHeightOverride);// 0xffffff8523219000 0x7a9ccc91c0
	void ClearWidthOverride();// 0xffffff8523219000 0x7a9ccc92a0
	void ClearMinDesiredWidth();// 0xffffff8523219000 0x7a9ccc9380
	void ClearMinDesiredHeight();// 0xffffff8523219000 0x7a9ccc9460
	void ClearMaxDesiredWidth();// 0xffffff8523219000 0x7a9ccc9540
	void ClearMaxDesiredHeight();// 0xffffff8523219000 0x7a9ccc9620
	void ClearMaxAspectRatio();// 0xffffff8523219000 0x7a9ccc9700
	void ClearHeightOverride();// 0xffffff8523219000 0x7a9ccc97e0

--------------------------------
Class: SizeBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7a9ccd8980
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7a9ccd8a00
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7a9ccd8a80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9cccc3a0
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9cccc480
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9cccc560

--------------------------------
Class: SlateBlueprintLibrary.BlueprintFunctionLibrary.Object
	Vector2D TransformVectorLocalToAbsolute(out const Geometry Geometry, Vector2D LocalVector);// 0xffffff8523219000 0x7a9cccb680
	Vector2D TransformVectorAbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteVector);// 0xffffff8523219000 0x7a9cccb760
	float TransformScalarLocalToAbsolute(out const Geometry Geometry, float LocalScalar);// 0xffffff8523219000 0x7a9cccb840
	float TransformScalarAbsoluteToLocal(out const Geometry Geometry, float AbsoluteScalar);// 0xffffff8523219000 0x7a9cccb920
	void ScreenToWidgetLocal(Object* WorldContextObject, out const Geometry Geometry, Vector2D ScreenPosition, out Vector2D LocalCoordinate);// 0xffffff8523219000 0x7a9cccba00
	void ScreenToWidgetAbsolute(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D AbsoluteCoordinate);// 0xffffff8523219000 0x7a9cccbae0
	void ScreenToViewport(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D ViewportPosition);// 0xffffff8523219000 0x7a9cccbbc0
	void LocalToViewport(Object* WorldContextObject, out const Geometry Geometry, Vector2D LocalCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0xffffff8523219000 0x7a9cccbca0
	Vector2D LocalToAbsolute(out const Geometry Geometry, Vector2D LocalCoordinate);// 0xffffff8523219000 0x7a9cccbd80
	bool IsUnderLocation(out const Geometry Geometry, out const Vector2D AbsoluteCoordinate);// 0xffffff8523219000 0x7a9cccbe60
	Vector2D GetLocalSize(out const Geometry Geometry);// 0xffffff8523219000 0x7a9cccbf40
	Vector2D GetAbsoluteSize(out const Geometry Geometry);// 0xffffff8523219000 0x7a9cccc020
	bool EqualEqual_SlateBrush(out const SlateBrush A, out const SlateBrush B);// 0xffffff8523219000 0x7a9cccc100
	void AbsoluteToViewport(Object* WorldContextObject, Vector2D AbsoluteDesktopCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0xffffff8523219000 0x7a9cccc1e0
	Vector2D AbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteCoordinate);// 0xffffff8523219000 0x7a9cccc2c0

--------------------------------
Class: SlateVectorArtData.Object
	SlateMeshVertex[] VertexData;//[Offset: 0x28, Size: 0x10] 0x7a9ccdb380
	uint32[] IndexData;//[Offset: 0x38, Size: 0x10] 0x7a9ccdb400
	MaterialInterface* Material;//[Offset: 0x48, Size: 0x8] 0x7a9ccdb480
	Vector2D ExtentMin;//[Offset: 0x50, Size: 0x8] 0x7a9ccdb500
	Vector2D ExtentMax;//[Offset: 0x58, Size: 0x8] 0x7a9ccdb580

--------------------------------
Class: SlateMeshVertex
	Vector2D Position;//[Offset: 0x0, Size: 0x8] 0x7aa094d780
	Color Color;//[Offset: 0x8, Size: 0x4] 0x7aa094d800
	Vector2D UV0;//[Offset: 0xc, Size: 0x8] 0x7aa094d880
	Vector2D UV1;//[Offset: 0x14, Size: 0x8] 0x7aa094d900
	Vector2D UV2;//[Offset: 0x1c, Size: 0x8] 0x7aa094d980
	Vector2D UV3;//[Offset: 0x24, Size: 0x8] 0x7aa094da00
	Vector2D UV4;//[Offset: 0x2c, Size: 0x8] 0x7aa094da80
	Vector2D UV5;//[Offset: 0x34, Size: 0x8] 0x7aa094db00

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4] 0x7a9cbcf4a0
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10] 0x7a9ccda900
	SliderStyle WidgetStyle;//[Offset: 0x120, Size: 0x340] 0x7a9ccda980
	byte Orientation;//[Offset: 0x460, Size: 0x1] 0x7a9ccdaa00
	LinearColor SliderBarColor;//[Offset: 0x464, Size: 0x10] 0x7a9ccdaa80
	LinearColor SliderHandleColor;//[Offset: 0x474, Size: 0x10] 0x7a9ccdab00
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1] 0x7a9ccdac00
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x485, Size: 0x1] 0x7a9ccdac80
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x486, Size: 0x1] 0x7a9ccdad00
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x487, Size: 0x1] 0x7a9ccdad80
	float StepSize;//[Offset: 0x488, Size: 0x4] 0x7a9cbcf510
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1] 0x7a9ccdae00
	delegate OnMouseCaptureBegin;//[Offset: 0x490, Size: 0x10] 0x7a9ccdae80
	delegate OnMouseCaptureEnd;//[Offset: 0x4a0, Size: 0x10] 0x7a9ccdaf00
	delegate OnControllerCaptureBegin;//[Offset: 0x4b0, Size: 0x10] 0x7a9ccdaf80
	delegate OnControllerCaptureEnd;//[Offset: 0x4c0, Size: 0x10] 0x7a9ccdb000
	delegate OnValueChanged;//[Offset: 0x4d0, Size: 0x10] 0x7a9ccdb080
	void SetValue(float InValue);// 0xffffff8523219000 0x7a9cccb060
	void SetStepSize(float InValue);// 0xffffff8523219000 0x7a9cccb140
	void SetSliderHandleColor(LinearColor InValue);// 0xffffff8523219000 0x7a9cccb220
	void SetSliderBarColor(LinearColor InValue);// 0xffffff8523219000 0x7a9cccb300
	void SetLocked(bool InValue);// 0xffffff8523219000 0x7a9cccb3e0
	void SetIndentHandle(bool InValue);// 0xffffff8523219000 0x7a9cccb4c0
	float GetValue();// 0xffffff8523219000 0x7a9cccb5a0

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x8, Size: 0x88] 0x7aa089f800
	SlateBrush HoveredBarImage;//[Offset: 0x90, Size: 0x88] 0x7aa089f880
	SlateBrush DisabledBarImage;//[Offset: 0x118, Size: 0x88] 0x7aa089f900
	SlateBrush NormalThumbImage;//[Offset: 0x1a0, Size: 0x88] 0x7aa089f980
	SlateBrush HoveredThumbImage;//[Offset: 0x228, Size: 0x88] 0x7aa089fa00
	SlateBrush DisabledThumbImage;//[Offset: 0x2b0, Size: 0x88] 0x7aa089fa80
	float BarThickness;//[Offset: 0x338, Size: 0x4] 0x7aa083c950

--------------------------------
Class: Spacer.Widget.Visual.Object
	Vector2D Size;//[Offset: 0x108, Size: 0x8] 0x7a9ccda800
	void SetSize(Vector2D InSize);// 0xffffff8523219000 0x7a9cccaf80

--------------------------------
Class: SpinBox.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4] 0x7aa0838900
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10] 0x7aa0894180
	SpinBoxStyle WidgetStyle;//[Offset: 0x120, Size: 0x2e8] 0x7aa0892480
	SlateWidgetStyleAsset* Style;//[Offset: 0x408, Size: 0x8] 0x7aa0892500
	float Delta;//[Offset: 0x410, Size: 0x4] 0x7aa0838970
	float SliderExponent;//[Offset: 0x414, Size: 0x4] 0x7aa08389e0
	SlateFontInfo Font;//[Offset: 0x418, Size: 0x50] 0x7aa0892580
	byte Justification;//[Offset: 0x468, Size: 0x1] 0x7aa0892600
	float MinDesiredWidth;//[Offset: 0x46c, Size: 0x4] 0x7aa0838a50
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1] 0x7aa0892680
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 0x1] 0x7aa0892700
	SlateColor ForegroundColor;//[Offset: 0x478, Size: 0x28] 0x7aa0892780
	delegate OnValueChanged;//[Offset: 0x4a0, Size: 0x10] 0x7aa0892800
	delegate OnValueCommitted;//[Offset: 0x4b0, Size: 0x10] 0x7aa0892880
	delegate OnBeginSliderMovement;//[Offset: 0x4c0, Size: 0x10] 0x7aa0892900
	delegate OnEndSliderMovement;//[Offset: 0x4d0, Size: 0x10] 0x7aa0892980
	bool bOverride_MinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e0, Size: 0x1] 0x7aa0892a00
	bool bOverride_MaxValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e0, Size: 0x1] 0x7aa0892a80
	bool bOverride_MinSliderValue;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4e0, Size: 0x1] 0x7aa0892b00
	bool bOverride_MaxSliderValue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4e0, Size: 0x1] 0x7aa0892b80
	float MinValue;//[Offset: 0x4e4, Size: 0x4] 0x7aa0838ac0
	float MaxValue;//[Offset: 0x4e8, Size: 0x4] 0x7aa0838b30
	float MinSliderValue;//[Offset: 0x4ec, Size: 0x4] 0x7aa0838ba0
	float MaxSliderValue;//[Offset: 0x4f0, Size: 0x4] 0x7aa0838c10
	void SetValue(float NewValue);// 0xffffff8523219000 0x7aa08827e0
	void SetMinValue(float NewValue);// 0xffffff8523219000 0x7aa08828c0
	void SetMinSliderValue(float NewValue);// 0xffffff8523219000 0x7aa08829a0
	void SetMaxValue(float NewValue);// 0xffffff8523219000 0x7aa0882a80
	void SetMaxSliderValue(float NewValue);// 0xffffff8523219000 0x7aa0882b60
	void SetForegroundColor(SlateColor InForegroundColor);// 0xffffff8523219000 0x7aa0882c40
	void OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, byte CommitMethod);// 0xffffff8523219000 0x7aa0882d20
	void OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);// 0xffffff8523219000 0x7aa0882e00
	void OnSpinBoxBeginSliderMovement__DelegateSignature();// 0xffffff8523219000 0x7aa0882ee0
	float GetValue();// 0xffffff8523219000 0x7aa0882fc0
	float GetMinValue();// 0xffffff8523219000 0x7aa08830a0
	float GetMinSliderValue();// 0xffffff8523219000 0x7aa0883180
	float GetMaxValue();// 0xffffff8523219000 0x7aa0883260
	float GetMaxSliderValue();// 0xffffff8523219000 0x7aa0883340
	void ClearMinValue();// 0xffffff8523219000 0x7aa0883420
	void ClearMinSliderValue();// 0xffffff8523219000 0x7aa0883500
	void ClearMaxValue();// 0xffffff8523219000 0x7aa08835e0
	void ClearMaxSliderValue();// 0xffffff8523219000 0x7aa08836c0

--------------------------------
Class: TextBinding.PropertyBinding.Object
	FText GetTextValue();// 0xffffff8523219000 0x7a9cccadc0
	FString GetStringValue();// 0xffffff8523219000 0x7a9cccaea0

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18] 0x7a9cbcf120
	delegate TextDelegate;//[Offset: 0x140, Size: 0x10] 0x7a9ccdbe80
	SlateColor ColorAndOpacity;//[Offset: 0x150, Size: 0x28] 0x7a9ccdbf00
	delegate ColorAndOpacityDelegate;//[Offset: 0x178, Size: 0x10] 0x7a9ccdbf80
	SlateFontInfo Font;//[Offset: 0x188, Size: 0x50] 0x7a9ccdc000
	SlateBrush StrikeBrush;//[Offset: 0x1d8, Size: 0x88] 0x7a9ccdc080
	Vector2D ShadowOffset;//[Offset: 0x260, Size: 0x8] 0x7a9ccdc100
	LinearColor ShadowColorAndOpacity;//[Offset: 0x268, Size: 0x10] 0x7a9ccdc180
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x278, Size: 0x10] 0x7a9ccdc280
	float MinDesiredWidth;//[Offset: 0x288, Size: 0x4] 0x7a9cbcf190
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1] 0x7a9ccdc300
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d, Size: 0x1] 0x7a9ccdc380
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28e, Size: 0x1] 0x7a9ccdc400
	void SetText(FText InText);// 0xffffff8523219000 0x7a9cccdc20
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0xffffff8523219000 0x7a9cccdd00
	void SetShadowOffset(Vector2D InShadowOffset);// 0xffffff8523219000 0x7a9cccdde0
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0xffffff8523219000 0x7a9cccdec0
	void SetOpacity(float InOpacity);// 0xffffff8523219000 0x7a9cccdfa0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0xffffff8523219000 0x7a9ccce080
	void SetJustification(byte InJustification);// 0xffffff8523219000 0x7a9ccce160
	void SetFont(SlateFontInfo InFontInfo);// 0xffffff8523219000 0x7a9ccce240
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0xffffff8523219000 0x7a9ccce320
	void SetAutoWrapText(bool InAutoTextWrap);// 0xffffff8523219000 0x7a9ccce400
	FText GetText();// 0xffffff8523219000 0x7a9ccce4e0
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0xffffff8523219000 0x7a9ccce5c0
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0xffffff8523219000 0x7a9ccce6a0

--------------------------------
Class: Throbber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x108, Size: 0x4] 0x7a9cbcf040
	bool bAnimateHorizontally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x7a9ccdba80
	bool bAnimateVertically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1] 0x7a9ccdbb00
	bool bAnimateOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1] 0x7a9ccdbb80
	SlateBrushAsset* PieceImage;//[Offset: 0x110, Size: 0x8] 0x7a9ccdbc00
	SlateBrush Image;//[Offset: 0x118, Size: 0x88] 0x7a9ccdbc80
	void SetNumberOfPieces(int InNumberOfPieces);// 0xffffff8523219000 0x7a9cccd8a0
	void SetAnimateVertically(bool bInAnimateVertically);// 0xffffff8523219000 0x7a9cccd980
	void SetAnimateOpacity(bool bInAnimateOpacity);// 0xffffff8523219000 0x7a9cccda60
	void SetAnimateHorizontally(bool bInAnimateHorizontally);// 0xffffff8523219000 0x7a9cccdb40

--------------------------------
Class: TileView.ListView.ListViewBase.Widget.Visual.Object
	float EntryHeight;//[Offset: 0x338, Size: 0x4] 0x7a9cbcee80
	float EntryWidth;//[Offset: 0x33c, Size: 0x4] 0x7a9cbceef0
	enum TileAlignment;//[Offset: 0x340, Size: 0x1] 0x7a9ccdb980
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1] 0x7a9ccdba00
	void SetEntryWidth(float NewWidth);// 0xffffff8523219000 0x7a9cccd6e0
	void SetEntryHeight(float NewHeight);// 0xffffff8523219000 0x7a9cccd7c0

--------------------------------
Class: TreeView.ListView.ListViewBase.Widget.Visual.Object
	delegate BP_OnGetItemChildren;//[Offset: 0x348, Size: 0x10] 0x7a9ccdb700
	delegate BP_OnItemExpansionChanged;//[Offset: 0x358, Size: 0x10] 0x7a9ccdb780
	void SetItemExpansion(Object* Item, bool bExpandItem);// 0xffffff8523219000 0x7a9cccd440
	void ExpandAll();// 0xffffff8523219000 0x7a9cccd520
	void CollapseAll();// 0xffffff8523219000 0x7a9cccd600

--------------------------------
Class: UniformGridPanel.PanelWidget.Widget.Visual.Object
	Margin SlotPadding;//[Offset: 0x11c, Size: 0x10] 0x7a9ccdd580
	float MinDesiredSlotWidth;//[Offset: 0x12c, Size: 0x4] 0x7a9cbcebe0
	float MinDesiredSlotHeight;//[Offset: 0x130, Size: 0x4] 0x7a9cbcec50
	void SetSlotPadding(Margin InSlotPadding);// 0xffffff8523219000 0x7a9ccccf00
	void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);// 0xffffff8523219000 0x7a9ccccfe0
	void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);// 0xffffff8523219000 0x7a9cccd0c0
	UniformGridSlot* AddChildToUniformGrid(Widget* Content);// 0xffffff8523219000 0x7a9cccd1a0

--------------------------------
Class: UniformGridSlot.PanelSlot.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x38, Size: 0x1] 0x7a9ccdd380
	byte VerticalAlignment;//[Offset: 0x39, Size: 0x1] 0x7a9ccdd400
	int Row;//[Offset: 0x3c, Size: 0x4] 0x7a9cbcea20
	int Column;//[Offset: 0x40, Size: 0x4] 0x7a9cbcea90
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccccb80
	void SetRow(int InRow);// 0xffffff8523219000 0x7a9ccccc60
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9ccccd40
	void SetColumn(int InColumn);// 0xffffff8523219000 0x7a9cccce20

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0xffffff8523219000 0x7a9ccf2380

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7a9cd03000
	SlateChildSize Size;//[Offset: 0x48, Size: 0x8] 0x7a9cd03080
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x7a9cd03100
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x7a9cd03180
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccf2000
	void SetSize(SlateChildSize InSize);// 0xffffff8523219000 0x7a9ccf20e0
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccf21c0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9ccf22a0

--------------------------------
Class: Viewport.ContentWidget.PanelWidget.Widget.Visual.Object
	LinearColor BackgroundColor;//[Offset: 0x11c, Size: 0x10] 0x7a9cd02c00
	Actor* Spawn(class Actor ActorClass);// 0xffffff8523219000 0x7a9ccf5480
	void SetViewRotation(Rotator Rotation);// 0xffffff8523219000 0x7a9ccf5560
	void SetViewLocation(Vector Location);// 0xffffff8523219000 0x7a9ccf5640
	Rotator GetViewRotation();// 0xffffff8523219000 0x7a9ccf1d60
	World* GetViewportWorld();// 0xffffff8523219000 0x7a9ccf1e40
	Vector GetViewLocation();// 0xffffff8523219000 0x7a9ccf1f20

--------------------------------
Class: VisibilityBinding.PropertyBinding.Object
	enum GetValue();// 0xffffff8523219000 0x7a9ccf53a0

--------------------------------
Class: WidgetAnimationDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintWidgetAnimationDelegateBinding[] WidgetAnimationDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7a9cd02300

--------------------------------
Class: BlueprintWidgetAnimationDelegateBinding
	enum Action;//[Offset: 0x0, Size: 0x1] 0x7aa094f400
	FName AnimationToBind;//[Offset: 0x4, Size: 0x8] 0x7aa0933ff0
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8] 0x7aa0934060
	FName UserTag;//[Offset: 0x14, Size: 0x8] 0x7aa09340d0

--------------------------------
Class: WidgetBinding.PropertyBinding.Object
	Widget* GetValue();// 0xffffff8523219000 0x7a9ccf4bc0

--------------------------------
Class: WidgetBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	WidgetTree* WidgetTree;//[Offset: 0x310, Size: 0x8] 0x7a9cd03580
	bool bAllowTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1] 0x7a9cd03600
	bool bAllowDynamicCreation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318, Size: 0x1] 0x7a9cd03680
	bool bValidTemplate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x318, Size: 0x1] 0x7a9cd03700
	bool bTemplateInitialized;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x318, Size: 0x1] 0x7a9cd03780
	bool bCookedTemplate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x318, Size: 0x1] 0x7a9cd03800
	bool bClassRequiresNativeTick;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x318, Size: 0x1] 0x7a9cd03880
	DelegateRuntimeBinding[] Bindings;//[Offset: 0x320, Size: 0x10] 0x7a9cd03980
	WidgetAnimation*[] Animations;//[Offset: 0x330, Size: 0x10] 0x7a9cd03a80
	FName[] NamedSlots;//[Offset: 0x340, Size: 0x10] 0x7a9cd03b00
	UserWidget* TemplateAsset;//[Offset: 0x350, Size: 0x28] 0x7a9cd03b80
	UserWidget* Template;//[Offset: 0x378, Size: 0x8] 0x7a9cd03c00

--------------------------------
Class: DelegateRuntimeBinding
	FString ObjectName;//[Offset: 0x0, Size: 0x10] 0x7aa0933ea0
	FName PropertyName;//[Offset: 0x10, Size: 0x8] 0x7aa0933f10
	FName FunctionName;//[Offset: 0x18, Size: 0x8] 0x7aa0933f80
	DynamicPropertyPath SourcePath;//[Offset: 0x20, Size: 0x28] 0x7aa094f200
	enum Kind;//[Offset: 0x48, Size: 0x1] 0x7aa094f300

--------------------------------
Class: WidgetBlueprintLibrary.BlueprintFunctionLibrary.Object
	EventReply UnlockMouse(out EventReply Reply);// 0xffffff8523219000 0x7aa084d1a0
	EventReply Unhandled();// 0xffffff8523219000 0x7aa084d280
	void SetWindowTitleBarState(Widget* TitleBarContent, enum Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible);// 0xffffff8523219000 0x7aa084d360
	void SetWindowTitleBarOnCloseClickedDelegate(delegate Delegate);// 0xffffff8523219000 0x7aa084d440
	void SetWindowTitleBarCloseButtonActive(bool bActive);// 0xffffff8523219000 0x7aa084d520
	EventReply SetUserFocus(out EventReply Reply, Widget* FocusWidget, bool bInAllUsers);// 0xffffff8523219000 0x7aa084d600
	EventReply SetMousePosition(out EventReply Reply, Vector2D NewMousePosition);// 0xffffff8523219000 0x7aa084d6e0
	void SetInputMode_UIOnlyEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode);// 0xffffff8523219000 0x7aa084d7c0
	void SetInputMode_UIOnly(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport);// 0xffffff8523219000 0x7aa084d8a0
	void SetInputMode_GameOnly(PlayerController* PlayerController);// 0xffffff8523219000 0x7aa084d980
	void SetInputMode_GameAndUIEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode, bool bHideCursorDuringCapture);// 0xffffff8523219000 0x7aa084da60
	void SetInputMode_GameAndUI(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);// 0xffffff8523219000 0x7aa084db40
	bool SetHardwareCursor(Object* WorldContextObject, byte CursorShape, FName CursorName, Vector2D HotSpot);// 0xffffff8523219000 0x7aa084dc20
	void SetFocusToGameViewport();// 0xffffff8523219000 0x7aa084dd00
	void SetColorVisionDeficiencyType(enum Type, float Severity, bool CorrectDeficiency, bool ShowCorrectionWithDeficiency);// 0xffffff8523219000 0x7aa084dde0
	void SetBrushResourceToTexture(out SlateBrush Brush, Texture2D* Texture);// 0xffffff8523219000 0x7aa084dec0
	void SetBrushResourceToMaterial(out SlateBrush Brush, MaterialInterface* Material);// 0xffffff8523219000 0x7aa084dfa0
	void RestorePreviousWindowTitleBarState();// 0xffffff8523219000 0x7aa084e080
	EventReply ReleaseMouseCapture(out EventReply Reply);// 0xffffff8523219000 0x7aa084e160
	EventReply ReleaseJoystickCapture(out EventReply Reply, bool bInAllJoysticks);// 0xffffff8523219000 0x7aa084e240
	void OnGameWindowCloseButtonClickedDelegate__DelegateSignature();// 0xffffff8523219000 0x7aa084e320
	SlateBrush NoResourceBrush();// 0xffffff8523219000 0x7aa084e400
	SlateBrush MakeBrushFromTexture(Texture2D* Texture, int Width, int Height);// 0xffffff8523219000 0x7aa084e4e0
	SlateBrush MakeBrushFromMaterial(MaterialInterface* Material, int Width, int Height);// 0xffffff8523219000 0x7aa084e5c0
	SlateBrush MakeBrushFromAsset(SlateBrushAsset* BrushAsset);// 0xffffff8523219000 0x7aa084e6a0
	EventReply LockMouse(out EventReply Reply, Widget* CapturingWidget);// 0xffffff8523219000 0x7aa084adc0
	bool IsDragDropping();// 0xffffff8523219000 0x7aa084aea0
	EventReply Handled();// 0xffffff8523219000 0x7aa084af80
	void GetSafeZonePadding(Object* WorldContextObject, out Vector4 SafePadding, out Vector2D SafePaddingScale, out Vector4 SpillOverPadding);// 0xffffff8523219000 0x7aa084b060
	KeyEvent GetKeyEventFromAnalogInputEvent(out const AnalogInputEvent Event);// 0xffffff8523219000 0x7aa084b140
	InputEvent GetInputEventFromPointerEvent(out const PointerEvent Event);// 0xffffff8523219000 0x7aa084b220
	InputEvent GetInputEventFromNavigationEvent(out const NavigationEvent Event);// 0xffffff8523219000 0x7aa084b300
	InputEvent GetInputEventFromKeyEvent(out const KeyEvent Event);// 0xffffff8523219000 0x7aa084b4c0
	InputEvent GetInputEventFromCharacterEvent(out const CharacterEvent Event);// 0xffffff8523219000 0x7aa084b5a0
	MaterialInstanceDynamic* GetDynamicMaterial(out SlateBrush Brush);// 0xffffff8523219000 0x7aa084b680
	DragDropOperation* GetDragDroppingContent();// 0xffffff8523219000 0x7aa084b760
	Texture2D* GetBrushResourceAsTexture2D(out const SlateBrush Brush);// 0xffffff8523219000 0x7aa084b840
	MaterialInterface* GetBrushResourceAsMaterial(out const SlateBrush Brush);// 0xffffff8523219000 0x7aa084b920
	Object* GetBrushResource(out const SlateBrush Brush);// 0xffffff8523219000 0x7aa084ba00
	void GetAllWidgetsWithInterface(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class Interface Interface, bool TopLevelOnly);// 0xffffff8523219000 0x7aa084bae0
	void GetAllWidgetsOfClass(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class UserWidget WidgetClass, bool TopLevelOnly);// 0xffffff8523219000 0x7aa084bbc0
	EventReply EndDragDrop(out EventReply Reply);// 0xffffff8523219000 0x7aa084bca0
	void DrawTextFormatted(out PaintContext Context, out const FText Text, Vector2D Position, Font* Font, int FontSize, FName FontTypeFace, LinearColor Tint);// 0xffffff8523219000 0x7aa084bd80
	void DrawText(out PaintContext Context, FString inString, Vector2D Position, LinearColor Tint);// 0xffffff8523219000 0x7aa084be60
	void DrawLines(out PaintContext Context, out const Vector2D[] Points, LinearColor Tint, bool bAntiAlias, float Thickness);// 0xffffff8523219000 0x7aa084bf40
	void DrawLine(out PaintContext Context, Vector2D PositionA, Vector2D PositionB, LinearColor Tint, bool bAntiAlias, float Thickness);// 0xffffff8523219000 0x7aa084c020
	void DrawBox(out PaintContext Context, Vector2D Position, Vector2D Size, SlateBrushAsset* Brush, LinearColor Tint);// 0xffffff8523219000 0x7aa084c100
	void DismissAllMenus();// 0xffffff8523219000 0x7aa084c1e0
	EventReply DetectDragIfPressed(out const PointerEvent PointerEvent, Widget* WidgetDetectingDrag, Key DragKey);// 0xffffff8523219000 0x7aa084c2c0
	EventReply DetectDrag(out EventReply Reply, Widget* WidgetDetectingDrag, Key DragKey);// 0xffffff8523219000 0x7aa084c3a0
	DragDropOperation* CreateDragDropOperation(class DragDropOperation OperationClass);// 0xffffff8523219000 0x7aa084c480
	UserWidget* Create(Object* WorldContextObject, class UserWidget WidgetType, PlayerController* OwningPlayer);// 0xffffff8523219000 0x7aa084c560
	EventReply ClearUserFocus(out EventReply Reply, bool bInAllUsers);// 0xffffff8523219000 0x7aa084c640
	EventReply CaptureMouse(out EventReply Reply, Widget* CapturingWidget);// 0xffffff8523219000 0x7aa084c720
	EventReply CaptureJoystick(out EventReply Reply, Widget* CapturingWidget, bool bInAllJoysticks);// 0xffffff8523219000 0x7aa084c800
	void CancelDragDrop();// 0xffffff8523219000 0x7aa084c8e0

--------------------------------
Class: NavigationEvent.InputEvent

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x59a, Size: 0x1] 0x7a9cd05600
	enum TimingPolicy;//[Offset: 0x59b, Size: 0x1] 0x7a9cd05700
	class UserWidget* WidgetClass;//[Offset: 0x5a0, Size: 0x8] 0x7a9cd05780
	IntPoint DrawSize;//[Offset: 0x5a8, Size: 0x8] 0x7a9cd05800
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1] 0x7a9cd05880
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 0x1] 0x7a9cd05900
	float RedrawTime;//[Offset: 0x5b4, Size: 0x4] 0x7a9cd10be0
	IntPoint CurrentDrawSize;//[Offset: 0x5c0, Size: 0x8] 0x7a9cd05980
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1] 0x7a9cd05a00
	Vector2D Pivot;//[Offset: 0x5cc, Size: 0x8] 0x7a9cd05a80
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 0x1] 0x7a9cd05b00
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d5, Size: 0x1] 0x7a9cd05b80
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d6, Size: 0x1] 0x7a9cd05c00
	LocalPlayer* OwnerPlayer;//[Offset: 0x5d8, Size: 0x8] 0x7a9cd05c80
	LinearColor BackgroundColor;//[Offset: 0x5e0, Size: 0x10] 0x7a9cd05d00
	LinearColor TintColorAndOpacity;//[Offset: 0x5f0, Size: 0x10] 0x7a9cd05d80
	float OpacityFromTexture;//[Offset: 0x600, Size: 0x4] 0x7a9cd10c50
	enum BlendMode;//[Offset: 0x604, Size: 0x1] 0x7a9cd04e00
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x605, Size: 0x1] 0x7a9cd05e80
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x606, Size: 0x1] 0x7a9cd05f00
	UserWidget* Widget;//[Offset: 0x608, Size: 0x8] 0x7a9cd05f80
	BodySetup* BodySetup;//[Offset: 0x630, Size: 0x8] 0x7a9cd06000
	MaterialInterface* TranslucentMaterial;//[Offset: 0x638, Size: 0x8] 0x7a9cd06080
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x640, Size: 0x8] 0x7a9cd06100
	MaterialInterface* OpaqueMaterial;//[Offset: 0x648, Size: 0x8] 0x7a9cd06180
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x650, Size: 0x8] 0x7a9cd06200
	MaterialInterface* MaskedMaterial;//[Offset: 0x658, Size: 0x8] 0x7a9cd06280
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x660, Size: 0x8] 0x7a9cd06300
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x668, Size: 0x8] 0x7a9cd04280
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x670, Size: 0x8] 0x7a9cd04300
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 0x1] 0x7a9cd04380
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 0x1] 0x7a9cd04400
	FName SharedLayerName;//[Offset: 0x67c, Size: 0x8] 0x7a9cd10cc0
	int LayerZOrder;//[Offset: 0x684, Size: 0x4] 0x7a9cd10d30
	enum GeometryMode;//[Offset: 0x688, Size: 0x1] 0x7a9cd04500
	float CylinderArcAngle;//[Offset: 0x68c, Size: 0x4] 0x7a9cd10da0
	void SetWindowFocusable(bool bInWindowFocusable);// 0xffffff8523219000 0x7a9ccf6980
	void SetWidgetSpace(enum NewSpace);// 0xffffff8523219000 0x7a9ccf6a60
	void SetWidget(UserWidget* Widget);// 0xffffff8523219000 0x7a9ccf6b40
	void SetTwoSided(const bool bWantTwoSided);// 0xffffff8523219000 0x7a9ccf6c20
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0xffffff8523219000 0x7a9ccf6d00
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0xffffff8523219000 0x7a9ccf6de0
	void SetRedrawTime(float bInRedrawTime);// 0xffffff8523219000 0x7a9ccf6ec0
	void SetPivot(out const Vector2D InPivot);// 0xffffff8523219000 0x7a9ccf6fa0
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0xffffff8523219000 0x7a9ccf7080
	void SetManuallyRedraw(bool bUseManualRedraw);// 0xffffff8523219000 0x7a9ccf7160
	void SetGeometryMode(enum InGeometryMode);// 0xffffff8523219000 0x7a9ccf7240
	void SetDrawSize(Vector2D Size);// 0xffffff8523219000 0x7a9ccf7320
	void SetDrawAtDesiredSize(bool InbDrawAtDesiredSize);// 0xffffff8523219000 0x7a9ccf3a40
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0xffffff8523219000 0x7a9ccf3b20
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0xffffff8523219000 0x7a9ccf3c00
	void RequestRedraw();// 0xffffff8523219000 0x7a9ccf3ce0
	bool GetWindowFocusable();// 0xffffff8523219000 0x7a9ccf3dc0
	enum GetWidgetSpace();// 0xffffff8523219000 0x7a9ccf3ea0
	UserWidget* GetUserWidgetObject();// 0xffffff8523219000 0x7a9ccf3f80
	bool GetTwoSided();// 0xffffff8523219000 0x7a9ccf4060
	bool GetTickWhenOffscreen();// 0xffffff8523219000 0x7a9ccf4140
	TextureRenderTarget2D* GetRenderTarget();// 0xffffff8523219000 0x7a9ccf4220
	float GetRedrawTime();// 0xffffff8523219000 0x7a9ccf4300
	Vector2D GetPivot();// 0xffffff8523219000 0x7a9ccf43e0
	LocalPlayer* GetOwnerPlayer();// 0xffffff8523219000 0x7a9ccf44c0
	MaterialInstanceDynamic* GetMaterialInstance();// 0xffffff8523219000 0x7a9ccf45a0
	bool GetManuallyRedraw();// 0xffffff8523219000 0x7a9ccf4680
	enum GetGeometryMode();// 0xffffff8523219000 0x7a9ccf4760
	Vector2D GetDrawSize();// 0xffffff8523219000 0x7a9ccf4840
	bool GetDrawAtDesiredSize();// 0xffffff8523219000 0x7a9ccf4920
	float GetCylinderArcAngle();// 0xffffff8523219000 0x7a9ccf4a00
	Vector2D GetCurrentDrawSize();// 0xffffff8523219000 0x7a9ccf4ae0

--------------------------------
Class: WidgetInteractionComponent.SceneComponent.ActorComponent.Object
	delegate OnHoveredWidgetChanged;//[Offset: 0x258, Size: 0x10] 0x7a9cd06580
	int VirtualUserIndex;//[Offset: 0x278, Size: 0x4] 0x7a9cd109b0
	float PointerIndex;//[Offset: 0x27c, Size: 0x4] 0x7a9cd10a20
	byte TraceChannel;//[Offset: 0x280, Size: 0x1] 0x7a9cd06600
	float InteractionDistance;//[Offset: 0x284, Size: 0x4] 0x7a9cd10a90
	enum InteractionSource;//[Offset: 0x288, Size: 0x1] 0x7a9cd06700
	bool bEnableHitTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1] 0x7a9cd06780
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 0x1] 0x7a9cd06800
	LinearColor DebugColor;//[Offset: 0x28c, Size: 0x10] 0x7a9cd06880
	HitResult CustomHitResult;//[Offset: 0x318, Size: 0x88] 0x7a9cd06900
	Vector2D LocalHitLocation;//[Offset: 0x3a0, Size: 0x8] 0x7a9cd06980
	Vector2D LastLocalHitLocation;//[Offset: 0x3a8, Size: 0x8] 0x7a9cd06a00
	WidgetComponent* HoveredWidgetComponent;//[Offset: 0x3b0, Size: 0x8] 0x7a9cd06a80
	HitResult LastHitResult;//[Offset: 0x3b8, Size: 0x88] 0x7a9cd06b80
	bool bIsHoveredWidgetInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1] 0x7a9cd06c00
	bool bIsHoveredWidgetFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1] 0x7a9cd06c80
	bool bIsHoveredWidgetHitTestVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x442, Size: 0x1] 0x7a9cd06d00
	void SetCustomHitResult(out const HitResult HitResult);// 0xffffff8523219000 0x7a9ccf5d40
	bool SendKeyChar(FString Characters, bool bRepeat);// 0xffffff8523219000 0x7a9ccf5e20
	void ScrollWheel(float ScrollDelta);// 0xffffff8523219000 0x7a9ccf5f00
	void ReleasePointerKey(Key Key);// 0xffffff8523219000 0x7a9ccf5fe0
	bool ReleaseKey(Key Key);// 0xffffff8523219000 0x7a9ccf60c0
	void PressPointerKey(Key Key);// 0xffffff8523219000 0x7a9ccf61a0
	bool PressKey(Key Key, bool bRepeat);// 0xffffff8523219000 0x7a9ccf6280
	bool PressAndReleaseKey(Key Key);// 0xffffff8523219000 0x7a9ccf6360
	bool IsOverInteractableWidget();// 0xffffff8523219000 0x7a9ccf6440
	bool IsOverHitTestVisibleWidget();// 0xffffff8523219000 0x7a9ccf6520
	bool IsOverFocusableWidget();// 0xffffff8523219000 0x7a9ccf6600
	HitResult GetLastHitResult();// 0xffffff8523219000 0x7a9ccf66e0
	WidgetComponent* GetHoveredWidgetComponent();// 0xffffff8523219000 0x7a9ccf67c0
	Vector2D Get2DHitLocation();// 0xffffff8523219000 0x7a9ccf68a0

--------------------------------
Class: WidgetLayoutLibrary.BlueprintFunctionLibrary.Object
	VerticalBoxSlot* SlotAsVerticalBoxSlot(Widget* Widget);// 0xffffff8523219000 0x7a9ccf8900
	UniformGridSlot* SlotAsUniformGridSlot(Widget* Widget);// 0xffffff8523219000 0x7a9ccf89e0
	OverlaySlot* SlotAsOverlaySlot(Widget* Widget);// 0xffffff8523219000 0x7a9ccf8ac0
	HorizontalBoxSlot* SlotAsHorizontalBoxSlot(Widget* Widget);// 0xffffff8523219000 0x7a9ccf8ba0
	GridSlot* SlotAsGridSlot(Widget* Widget);// 0xffffff8523219000 0x7a9ccf8c80
	CanvasPanelSlot* SlotAsCanvasSlot(Widget* Widget);// 0xffffff8523219000 0x7a9ccf8d60
	BorderSlot* SlotAsBorderSlot(Widget* Widget);// 0xffffff8523219000 0x7a9ccf8e40
	void RemoveAllWidgets(Object* WorldContextObject);// 0xffffff8523219000 0x7a9ccf8f20
	bool ProjectWorldLocationToWidgetPosition(PlayerController* PlayerController, Vector WorldLocation, out Vector2D ScreenPosition);// 0xffffff8523219000 0x7a9ccf9000
	Geometry GetViewportWidgetGeometry(Object* WorldContextObject);// 0xffffff8523219000 0x7a9ccf5720
	Vector2D GetViewportSize(Object* WorldContextObject);// 0xffffff8523219000 0x7a9ccf5800
	float GetViewportScale(Object* WorldContextObject);// 0xffffff8523219000 0x7a9ccf58e0
	Geometry GetPlayerScreenWidgetGeometry(PlayerController* PlayerController);// 0xffffff8523219000 0x7a9ccf59c0
	bool GetMousePositionScaledByDPI(PlayerController* Player, out float LocationX, out float LocationY);// 0xffffff8523219000 0x7a9ccf5aa0
	Vector2D GetMousePositionOnViewport(Object* WorldContextObject);// 0xffffff8523219000 0x7a9ccf5b80
	Vector2D GetMousePositionOnPlatform();// 0xffffff8523219000 0x7a9ccf5c60

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x11c, Size: 0x4] 0x7a9cd10630
	void SetActiveWidgetIndex(int Index);// 0xffffff8523219000 0x7a9ccf83c0
	void SetActiveWidget(Widget* Widget);// 0xffffff8523219000 0x7a9ccf84a0
	Widget* GetWidgetAtIndex(int Index);// 0xffffff8523219000 0x7a9ccf8580
	int GetNumWidgets();// 0xffffff8523219000 0x7a9ccf8660
	int GetActiveWidgetIndex();// 0xffffff8523219000 0x7a9ccf8740
	Widget* GetActiveWidget();// 0xffffff8523219000 0x7a9ccf8820

--------------------------------
Class: WidgetSwitcherSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7a9cd08f80
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7a9cd09000
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7a9cd09080
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccf8120
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccf8200
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9ccf82e0

--------------------------------
Class: WindowTitleBarArea.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bWindowButtonsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x7a9cd08c80
	bool bDoubleClickTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x7a9cd08d00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccf7e80
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccf7f60
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9ccf8040

--------------------------------
Class: WindowTitleBarAreaSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7a9cd08980
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7a9cd08a00
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7a9cd08a80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccf7be0
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccf7cc0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9ccf7da0

--------------------------------
Class: WrapBox.PanelWidget.Widget.Visual.Object
	Vector2D InnerSlotPadding;//[Offset: 0x11c, Size: 0x8] 0x7a9cd08700
	float WrapWidth;//[Offset: 0x124, Size: 0x4] 0x7a9cd105c0
	bool bExplicitWrapWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x7a9cd08780
	void SetInnerSlotPadding(Vector2D InPadding);// 0xffffff8523219000 0x7a9ccf7a20
	WrapBoxSlot* AddChildToWrapBox(Widget* Content);// 0xffffff8523219000 0x7a9ccf7b00

--------------------------------
Class: WrapBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7a9cd0a380
	bool bFillEmptySpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7a9cd0a400
	float FillSpanWhenLessThan;//[Offset: 0x4c, Size: 0x4] 0x7a9cd104e0
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x7a9cd0a480
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x7a9cd0a500
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xffffff8523219000 0x7a9ccf75c0
	void SetPadding(Margin InPadding);// 0xffffff8523219000 0x7a9ccf76a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xffffff8523219000 0x7a9ccf7780
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);// 0xffffff8523219000 0x7a9ccf7860
	void SetFillEmptySpace(bool InbFillEmptySpace);// 0xffffff8523219000 0x7a9ccf7940

--------------------------------
Class: CameraRig_Crane.Actor.Object
	float CranePitch;//[Offset: 0x330, Size: 0x4] 0x7a9cd10390
	float CraneYaw;//[Offset: 0x334, Size: 0x4] 0x7a9cd10400
	float CraneArmLength;//[Offset: 0x338, Size: 0x4] 0x7a9cd10470
	bool bLockMountPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 0x1] 0x7a9cd0a080
	bool bLockMountYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 0x1] 0x7a9cd0a100
	SceneComponent* TransformComponent;//[Offset: 0x340, Size: 0x8] 0x7a9cd0a180
	SceneComponent* CraneYawControl;//[Offset: 0x348, Size: 0x8] 0x7a9cd0a200
	SceneComponent* CranePitchControl;//[Offset: 0x350, Size: 0x8] 0x7a9cd0a280
	SceneComponent* CraneCameraMount;//[Offset: 0x358, Size: 0x8] 0x7a9cd0a300

--------------------------------
Class: CameraRig_Rail.Actor.Object
	float CurrentPositionOnRail;//[Offset: 0x330, Size: 0x4] 0x7a9cd10320
	bool bLockOrientationToRail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1] 0x7a9cd09e80
	SceneComponent* TransformComponent;//[Offset: 0x338, Size: 0x8] 0x7a9cd09f00
	SplineComponent* RailSplineComponent;//[Offset: 0x340, Size: 0x8] 0x7a9cd09f80
	SceneComponent* RailCameraMount;//[Offset: 0x348, Size: 0x8] 0x7a9cd0a000

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x890, Size: 0x50] 0x7a9cd09b00
	CineCameraComponent* GetCineCameraComponent();// 0xffffff8523219000 0x7a9ccf7400

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7aa094e780
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7aa094e800
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4] 0x7aa0933ce0
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28] 0x7aa094e880
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc] 0x7aa094e900
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x7aa094e980

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x800, Size: 0xc] 0x7a9cd0b200
	CameraLensSettings LensSettings;//[Offset: 0x80c, Size: 0x18] 0x7a9cd0b280
	CameraFocusSettings FocusSettings;//[Offset: 0x828, Size: 0x58] 0x7a9cd0b300
	float CurrentFocalLength;//[Offset: 0x880, Size: 0x4] 0x7a9cd11270
	float CurrentAperture;//[Offset: 0x884, Size: 0x4] 0x7a9cd112e0
	float CurrentFocusDistance;//[Offset: 0x888, Size: 0x4] 0x7a9cd11350
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x898, Size: 0x10] 0x7a9cd0b400
	NamedLensPreset[] LensPresets;//[Offset: 0x8a8, Size: 0x10] 0x7a9cd0b500
	FString DefaultFilmbackPresetName;//[Offset: 0x8b8, Size: 0x10] 0x7a9cd113c0
	FString DefaultLensPresetName;//[Offset: 0x8c8, Size: 0x10] 0x7a9cd11430
	float DefaultLensFocalLength;//[Offset: 0x8d8, Size: 0x4] 0x7a9cd114a0
	float DefaultLensFStop;//[Offset: 0x8dc, Size: 0x4] 0x7a9cd11510
	void SetLensPresetByName(FString InPresetName);// 0xffffff8523219000 0x7a9ccf9e00
	void SetFilmbackPresetByName(FString InPresetName);// 0xffffff8523219000 0x7a9ccf9ee0
	float GetVerticalFieldOfView();// 0xffffff8523219000 0x7a9ccf9fc0
	FString GetLensPresetName();// 0xffffff8523219000 0x7a9ccfa0a0
	float GetHorizontalFieldOfView();// 0xffffff8523219000 0x7a9ccfa180
	FString GetFilmbackPresetName();// 0xffffff8523219000 0x7a9ccfa260

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4] 0x7aa0935410
	float SensorHeight;//[Offset: 0x4, Size: 0x4] 0x7aa0935480
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4] 0x7aa09354f0

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4] 0x7aa09355d0
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4] 0x7aa0935640
	float MinFStop;//[Offset: 0x8, Size: 0x4] 0x7aa09339d0
	float MaxFStop;//[Offset: 0xc, Size: 0x4] 0x7aa0933a40
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4] 0x7aa0933ab0
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4] 0x7aa0933b20

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1] 0x7aa094fc00
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4] 0x7aa0933b90
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38] 0x7aa094fe00
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x7aa094fe80
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4] 0x7aa094ff00
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7aa094ff80
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4] 0x7aa0933c00
	float FocusOffset;//[Offset: 0x50, Size: 0x4] 0x7aa0933c70

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28] 0x7aa094fc80
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc] 0x7aa094fd00
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7aa094fd80

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7aa09353a0
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc] 0x7aa094fa80

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7aa0935560
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18] 0x7aa094fb00

--------------------------------
Class: AudioMixerBlueprintLibrary.BlueprintFunctionLibrary.Object
	SoundWave* StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundSubmix* SubmixToRecord, SoundWave* ExistingSoundWaveToOverwrite);// 0xffffff8523219000 0x7a9ccfc9c0
	void StopAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToStopAnalyzing);// 0xffffff8523219000 0x7a9ccf90e0
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration, SoundSubmix* SubmixToRecord);// 0xffffff8523219000 0x7a9ccf91c0
	void StartAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToAnalyze, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize);// 0xffffff8523219000 0x7a9ccf92a0
	void SetBypassSourceEffectChainEntry(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex, bool bBypassed);// 0xffffff8523219000 0x7a9ccf9380
	void ResumeRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0xffffff8523219000 0x7a9ccf9460
	void RemoveSourceEffectFromPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex);// 0xffffff8523219000 0x7a9ccf9540
	void RemoveMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0xffffff8523219000 0x7a9ccf9620
	void PauseRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0xffffff8523219000 0x7a9ccf9700
	void GetPhaseForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Phases, SoundSubmix* SubmixToAnalyze);// 0xffffff8523219000 0x7a9ccf97e0
	int GetNumberOfEntriesInSourceEffectChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain);// 0xffffff8523219000 0x7a9ccf98c0
	void GetMagnitudeForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Magnitudes, SoundSubmix* SubmixToAnalyze);// 0xffffff8523219000 0x7a9ccf99a0
	void ClearMasterSubmixEffects(const Object* WorldContextObject);// 0xffffff8523219000 0x7a9ccf9a80
	void AddSourceEffectToPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, SourceEffectChainEntry Entry);// 0xffffff8523219000 0x7a9ccf9b60
	void AddMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0xffffff8523219000 0x7a9ccf9c40

--------------------------------
Class: SubmixEffectDynamicsProcessorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectDynamicsProcessorSettings Settings;//[Offset: 0x8c, Size: 0x28] 0x7a9cd0bb00
	void SetSettings(out const SubmixEffectDynamicsProcessorSettings InSettings);// 0xffffff8523219000 0x7a9ccfc8e0

--------------------------------
Class: SubmixEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x7aa094f800
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x7aa094f900
	float LookAheadMsec;//[Offset: 0x4, Size: 0x4] 0x7aa0935020
	float AttackTimeMsec;//[Offset: 0x8, Size: 0x4] 0x7aa0935090
	float ReleaseTimeMsec;//[Offset: 0xc, Size: 0x4] 0x7aa0935100
	float ThresholdDb;//[Offset: 0x10, Size: 0x4] 0x7aa0935170
	float Ratio;//[Offset: 0x14, Size: 0x4] 0x7aa09351e0
	float KneeBandwidthDb;//[Offset: 0x18, Size: 0x4] 0x7aa0935250
	float InputGainDb;//[Offset: 0x1c, Size: 0x4] 0x7aa09352c0
	float OutputGainDb;//[Offset: 0x20, Size: 0x4] 0x7aa0935330
	bool bChannelLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1] 0x7aa094f980
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1] 0x7aa094fa00

--------------------------------
Class: SubmixEffectSubmixEQPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectSubmixEQSettings Settings;//[Offset: 0x78, Size: 0x10] 0x7a9cd0ba00
	void SetSettings(out const SubmixEffectSubmixEQSettings InSettings);// 0xffffff8523219000 0x7a9ccfc800

--------------------------------
Class: SubmixEffectSubmixEQSettings
	SubmixEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10] 0x7aa0961000

--------------------------------
Class: SubmixEffectEQBand
	float Frequency;//[Offset: 0x0, Size: 0x4] 0x7aa0934ed0
	float Bandwidth;//[Offset: 0x4, Size: 0x4] 0x7aa0934f40
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x7aa0934fb0
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7aa0960f00

--------------------------------
Class: SubmixEffectReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectReverbSettings Settings;//[Offset: 0x98, Size: 0x34] 0x7a9cd0b880
	void SetSettingsWithReverbEffect(const ReverbEffect* InReverbEffect, const float WetLevel, const float DryLevel);// 0xffffff8523219000 0x7a9ccfc640
	void SetSettings(out const SubmixEffectReverbSettings InSettings);// 0xffffff8523219000 0x7a9ccfc720

--------------------------------
Class: SubmixEffectReverbSettings
	float Density;//[Offset: 0x0, Size: 0x4] 0x7aa0934920
	float Diffusion;//[Offset: 0x4, Size: 0x4] 0x7aa0934990
	float Gain;//[Offset: 0x8, Size: 0x4] 0x7aa0934a00
	float GainHF;//[Offset: 0xc, Size: 0x4] 0x7aa0934a70
	float DecayTime;//[Offset: 0x10, Size: 0x4] 0x7aa0934ae0
	float DecayHFRatio;//[Offset: 0x14, Size: 0x4] 0x7aa0934b50
	float ReflectionsGain;//[Offset: 0x18, Size: 0x4] 0x7aa0934bc0
	float ReflectionsDelay;//[Offset: 0x1c, Size: 0x4] 0x7aa0934c30
	float LateGain;//[Offset: 0x20, Size: 0x4] 0x7aa0934ca0
	float LateDelay;//[Offset: 0x24, Size: 0x4] 0x7aa0934d10
	float AirAbsorptionGainHF;//[Offset: 0x28, Size: 0x4] 0x7aa0934d80
	float WetLevel;//[Offset: 0x2c, Size: 0x4] 0x7aa0934df0
	float DryLevel;//[Offset: 0x30, Size: 0x4] 0x7aa0934e60

--------------------------------
Class: AndroidRuntimeSettings.Object
	FString PackageName;//[Offset: 0x28, Size: 0x10] 0x7a9cd12cb0
	int StoreVersion;//[Offset: 0x38, Size: 0x4] 0x7a9cd12d20
	FString ApplicationDisplayName;//[Offset: 0x40, Size: 0x10] 0x7a9cd12d90
	FString VersionDisplayName;//[Offset: 0x50, Size: 0x10] 0x7a9cd12e00
	int MinSDKVersion;//[Offset: 0x60, Size: 0x4] 0x7a9cd12e70
	int TargetSDKVersion;//[Offset: 0x64, Size: 0x4] 0x7a9cd12ee0
	byte InstallLocation;//[Offset: 0x68, Size: 0x1] 0x7a9cd0e900
	bool bEnableGradle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1] 0x7a9cd0e980
	bool bEnableLint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 0x1] 0x7a9cd0ea00
	bool bPackageDataInsideApk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b, Size: 0x1] 0x7a9cd0ea80
	bool bCreateAllPlatformsInstall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1] 0x7a9cd0eb00
	bool bDisableVerifyOBBOnStartUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1] 0x7a9cd0eb80
	bool bAllowLargeOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 0x1] 0x7a9cd0ec00
	bool bUseExternalFilesDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f, Size: 0x1] 0x7a9cd0ec80
	byte Orientation;//[Offset: 0x70, Size: 0x1] 0x7a9cd0ed00
	float MaxAspectRatio;//[Offset: 0x74, Size: 0x4] 0x7a9cd12f50
	bool bUseDisplayCutout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x7a9cd0ed80
	byte AntVerbosity;//[Offset: 0x79, Size: 0x1] 0x7a9cd0ee00
	bool bFullScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x7a9cd0ee80
	bool bEnableNewKeyboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1] 0x7a9cd0ef00
	byte DepthBufferPreference;//[Offset: 0x7c, Size: 0x1] 0x7a9cd0ef80
	bool bValidateTextureFormats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1] 0x7a9cd0f000
	FString[] ExtraManifestNodeTags;//[Offset: 0x80, Size: 0x10] 0x7a9cd0f080
	FString[] ExtraApplicationNodeTags;//[Offset: 0x90, Size: 0x10] 0x7a9cd0f100
	FString ExtraApplicationSettings;//[Offset: 0xa0, Size: 0x10] 0x7a9cd130a0
	FString[] ExtraActivityNodeTags;//[Offset: 0xb0, Size: 0x10] 0x7a9cd0f180
	FString ExtraActivitySettings;//[Offset: 0xc0, Size: 0x10] 0x7a9cd13180
	FString[] ExtraPermissions;//[Offset: 0xd0, Size: 0x10] 0x7a9cd0f200
	bool bAndroidVoiceEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x7a9cd0f280
	bool bPackageForGearVR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1] 0x7a9cd0f300
	bool bRemoveOSIG;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1] 0x7a9cd0f380
	byte[] GoogleVRCaps;//[Offset: 0xe8, Size: 0x10] 0x7a9cd0f480
	bool bGoogleVRSustainedPerformance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1] 0x7a9cd0f500
	FString KeyStore;//[Offset: 0x100, Size: 0x10] 0x7a9cd13260
	FString KeyAlias;//[Offset: 0x110, Size: 0x10] 0x7a9cd132d0
	FString KeyStorePassword;//[Offset: 0x120, Size: 0x10] 0x7a9cd13340
	FString KeyPassword;//[Offset: 0x130, Size: 0x10] 0x7a9cd133b0
	bool bBuildForArmV7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1] 0x7a9cd0f580
	bool bBuildForArm64;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1] 0x7a9cd0f600
	bool bBuildForX8664;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142, Size: 0x1] 0x7a9cd0f680
	bool bBuildForES2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143, Size: 0x1] 0x7a9cd0f700
	bool bBuildForES31;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1] 0x7a9cd0f780
	bool bSupportsVulkan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1] 0x7a9cd0d700
	bool bDetectVulkanByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 0x1] 0x7a9cd0d780
	bool bBuildWithHiddenSymbolVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147, Size: 0x1] 0x7a9cd0d800
	bool bSaveSymbols;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1] 0x7a9cd0d880
	bool bEnableGooglePlaySupport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1] 0x7a9cd0e080
	bool bUseGetAccounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1] 0x7a9cd0d900
	FString GamesAppID;//[Offset: 0x150, Size: 0x10] 0x7a9cd13420
	GooglePlayAchievementMapping[] AchievementMap;//[Offset: 0x160, Size: 0x10] 0x7a9cd0da00
	GooglePlayLeaderboardMapping[] LeaderboardMap;//[Offset: 0x170, Size: 0x10] 0x7a9cd0db00
	bool bEnableSnapshots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1] 0x7a9cd0db80
	bool bSupportAdMob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1] 0x7a9cd0dc00
	FString AdMobAdUnitID;//[Offset: 0x188, Size: 0x10] 0x7a9cd13490
	FString[] AdMobAdUnitIDs;//[Offset: 0x198, Size: 0x10] 0x7a9cd0dc80
	FString GooglePlayLicenseKey;//[Offset: 0x1a8, Size: 0x10] 0x7a9cd13570
	FString GCMClientSenderID;//[Offset: 0x1b8, Size: 0x10] 0x7a9cd135e0
	bool bShowLaunchImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1] 0x7a9cd0dd00
	bool bAllowIMU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1] 0x7a9cd0dd80
	bool bAllowControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 0x1] 0x7a9cd0de00
	bool bBlockAndroidKeysOnControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb, Size: 0x1] 0x7a9cd0de80
	byte AndroidAudio;//[Offset: 0x1cc, Size: 0x1] 0x7a9cd0df00
	int AudioSampleRate;//[Offset: 0x1d0, Size: 0x4] 0x7a9cd13650
	int AudioCallbackBufferFrameSize;//[Offset: 0x1d4, Size: 0x4] 0x7a9cd136c0
	int AudioNumBuffersToEnqueue;//[Offset: 0x1d8, Size: 0x4] 0x7a9cd13730
	int AudioMaxChannels;//[Offset: 0x1dc, Size: 0x4] 0x7a9cd137a0
	int AudioNumSourceWorkers;//[Offset: 0x1e0, Size: 0x4] 0x7a9cd13810
	FString SpatializationPlugin;//[Offset: 0x1e8, Size: 0x10] 0x7a9cd13880
	FString ReverbPlugin;//[Offset: 0x1f8, Size: 0x10] 0x7a9cd138f0
	FString OcclusionPlugin;//[Offset: 0x208, Size: 0x10] 0x7a9cd13960
	PlatformRuntimeAudioCompressionOverrides CompressionOverrides;//[Offset: 0x218, Size: 0x10] 0x7a9cd0df80
	bool bResampleForDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x7a9cd0e000
	float MaxSampleRate;//[Offset: 0x22c, Size: 0x4] 0x7a9cd11cf0
	float HighSampleRate;//[Offset: 0x230, Size: 0x4] 0x7a9cd11d60
	float MedSampleRate;//[Offset: 0x234, Size: 0x4] 0x7a9cd11dd0
	float LowSampleRate;//[Offset: 0x238, Size: 0x4] 0x7a9cd11e40
	float MinSampleRate;//[Offset: 0x23c, Size: 0x4] 0x7a9cd11eb0
	float CompressionQualityModifier;//[Offset: 0x240, Size: 0x4] 0x7a9cd11f20
	float AutoStreamingThreshold;//[Offset: 0x244, Size: 0x4] 0x7a9cd11f90
	byte AndroidGraphicsDebugger;//[Offset: 0x248, Size: 0x1] 0x7a9cd0e100
	DirectoryPath MaliGraphicsDebuggerPath;//[Offset: 0x250, Size: 0x10] 0x7a9cd0e180
	bool bMultiTargetFormat_ETC1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x7a9cd0e200
	bool bMultiTargetFormat_ETC1a;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1] 0x7a9cd0e280
	bool bMultiTargetFormat_ETC2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262, Size: 0x1] 0x7a9cd0e300
	bool bMultiTargetFormat_DXT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x263, Size: 0x1] 0x7a9cd0e380
	bool bMultiTargetFormat_PVRTC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1] 0x7a9cd0e400
	bool bMultiTargetFormat_ATC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 0x1] 0x7a9cd0e480
	bool bMultiTargetFormat_ASTC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x266, Size: 0x1] 0x7a9cd0e500
	float TextureFormatPriority_ETC1;//[Offset: 0x268, Size: 0x4] 0x7a9cd12000
	float TextureFormatPriority_ETC1a;//[Offset: 0x26c, Size: 0x4] 0x7a9cd12070
	float TextureFormatPriority_ETC2;//[Offset: 0x270, Size: 0x4] 0x7a9cd120e0
	float TextureFormatPriority_DXT;//[Offset: 0x274, Size: 0x4] 0x7a9cd12150
	float TextureFormatPriority_PVRTC;//[Offset: 0x278, Size: 0x4] 0x7a9cd121c0
	float TextureFormatPriority_ATC;//[Offset: 0x27c, Size: 0x4] 0x7a9cd12230
	float TextureFormatPriority_ASTC;//[Offset: 0x280, Size: 0x4] 0x7a9cd122a0
	FString SDKAPILevelOverride;//[Offset: 0x288, Size: 0x10] 0x7a9cd12310
	FString NDKAPILevelOverride;//[Offset: 0x298, Size: 0x10] 0x7a9cd12380

--------------------------------
Class: GooglePlayAchievementMapping
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7aa09362f0
	FString AchievementID;//[Offset: 0x10, Size: 0x10] 0x7aa0936360

--------------------------------
Class: GooglePlayLeaderboardMapping
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7aa09363d0
	FString LeaderboardID;//[Offset: 0x10, Size: 0x10] 0x7aa0936440

--------------------------------
Class: PlatformRuntimeAudioCompressionOverrides
	bool bOverrideCompressionTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7aa0960e80
	float DurationThreshold;//[Offset: 0x4, Size: 0x4] 0x7aa09364b0
	int MaxNumRandomBranches;//[Offset: 0x8, Size: 0x4] 0x7aa0934840
	int SoundCueQualityIndex;//[Offset: 0xc, Size: 0x4] 0x7aa09348b0

--------------------------------
Class: AssetRegistryHelpers.Object
	SoftObjectPath ToSoftObjectPath(out const AssetData InAssetData);// 0xffffff8523219000 0x7a9ccfbae0
	ARFilter SetFilterTagsAndValues(out const ARFilter InFilter, out const TagAndValue[] InTagsAndValues);// 0xffffff8523219000 0x7a9ccfbbc0
	bool IsValid(out const AssetData InAssetData);// 0xffffff8523219000 0x7a9ccfbca0
	bool IsUAsset(out const AssetData InAssetData);// 0xffffff8523219000 0x7a9ccfbd80
	bool IsRedirector(out const AssetData InAssetData);// 0xffffff8523219000 0x7a9ccfbe60
	bool IsAssetLoaded(out const AssetData InAssetData);// 0xffffff8523219000 0x7a9ccfbf40
	bool GetTagValue(out const AssetData InAssetData, out const FName InTagName, out FString OutTagValue);// 0xffffff8523219000 0x7a9ccfc020
	FString GetFullName(out const AssetData InAssetData);// 0xffffff8523219000 0x7a9ccfc100
	FString GetExportTextName(out const AssetData InAssetData);// 0xffffff8523219000 0x7a9ccfc1e0
	class Object GetClass(out const AssetData InAssetData);// 0xffffff8523219000 0x7a9ccfc2c0
	interface classNone GetAssetRegistry();// 0xffffff8523219000 0x7a9ccfc3a0
	Object* GetAsset(out const AssetData InAssetData);// 0xffffff8523219000 0x7a9ccfc480
	AssetData CreateAssetData(const Object* InAsset, bool bAllowBlueprintClass);// 0xffffff8523219000 0x7a9ccfc560

--------------------------------
Class: AssetData
	FName ObjectPath;//[Offset: 0x0, Size: 0x8] 0x7aa0935e20
	FName PackageName;//[Offset: 0x8, Size: 0x8] 0x7aa0935e90
	FName PackagePath;//[Offset: 0x10, Size: 0x8] 0x7aa0935f00
	FName AssetName;//[Offset: 0x18, Size: 0x8] 0x7aa0935f70
	FName AssetClass;//[Offset: 0x20, Size: 0x8] 0x7aa0935fe0

--------------------------------
Class: ARFilter
	FName[] PackageNames;//[Offset: 0x0, Size: 0x10] 0x7aa0960b00
	FName[] PackagePaths;//[Offset: 0x10, Size: 0x10] 0x7aa0960b80
	FName[] ObjectPaths;//[Offset: 0x20, Size: 0x10] 0x7aa0960c00
	FName[] ClassNames;//[Offset: 0x30, Size: 0x10] 0x7aa0960c80
	<FName> RecursiveClassesExclusionSet;//[Offset: 0x90, Size: 0x50] 0x7a963d86c0
	bool bRecursivePaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x7aa0960d00
	bool bRecursiveClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1] 0x7aa0960d80
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1] 0x7aa0960e00

--------------------------------
Class: TagAndValue
	FName Tag;//[Offset: 0x0, Size: 0x8] 0x7aa0935d40
	FString Value;//[Offset: 0x8, Size: 0x10] 0x7aa0935db0

--------------------------------
Class: AssetRegistry.Interface.Object
	void UseFilterToExcludeAssets(out AssetData[] AssetDataList, out const ARFilter Filter);// 0xffffff8523219000 0x7a9ccfe5c0
	void SearchAllAssets(bool bSynchronousSearch);// 0xffffff8523219000 0x7a9ccfe6a0
	void ScanPathsSynchronous(out const FString[] InPaths, bool bForceRescan);// 0xffffff8523219000 0x7a9ccfadc0
	void ScanModifiedAssetFiles(out const FString[] InFilePaths);// 0xffffff8523219000 0x7a9ccfaea0
	void ScanFilesSynchronous(out const FString[] InFilePaths, bool bForceRescan);// 0xffffff8523219000 0x7a9ccfaf80
	void RunAssetsThroughFilter(out AssetData[] AssetDataList, out const ARFilter Filter);// 0xffffff8523219000 0x7a9ccfb060
	void PrioritizeSearchPath(FString PathToPrioritize);// 0xffffff8523219000 0x7a9ccfb140
	bool IsLoadingAssets();// 0xffffff8523219000 0x7a9ccfb220
	bool HasAssets(const FName PackagePath, const bool bRecursive);// 0xffffff8523219000 0x7a9ccfb300
	void GetSubPaths(FString InBasePath, out FString[] OutPathList, bool bInRecurse);// 0xffffff8523219000 0x7a9ccfb3e0
	bool GetAssetsByPath(FName PackagePath, out AssetData[] OutAssetData, bool bRecursive, bool bIncludeOnlyOnDiskAssets);// 0xffffff8523219000 0x7a9ccfb4c0
	bool GetAssetsByPackageName(FName PackageName, out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0xffffff8523219000 0x7a9ccfb5a0
	bool GetAssetsByClass(FName ClassName, out AssetData[] OutAssetData, bool bSearchSubClasses);// 0xffffff8523219000 0x7a9ccfb680
	bool GetAssets(out const ARFilter Filter, out AssetData[] OutAssetData);// 0xffffff8523219000 0x7a9ccfb760
	AssetData GetAssetByObjectPath(const FName ObjectPath, bool bIncludeOnlyOnDiskAssets);// 0xffffff8523219000 0x7a9ccfb840
	void GetAllCachedPaths(out FString[] OutPathList);// 0xffffff8523219000 0x7a9ccfb920
	bool GetAllAssets(out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0xffffff8523219000 0x7a9ccfba00

--------------------------------
Class: BlueprintGameplayTagLibrary.BlueprintFunctionLibrary.Object
	bool RemoveGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0xffffff8523219000 0x7a9ccfcc60
	bool NotEqual_TagTag(GameplayTag A, FString B);// 0xffffff8523219000 0x7a9ccfcd40
	bool NotEqual_TagContainerTagContainer(GameplayTagContainer A, FString B);// 0xffffff8523219000 0x7a9ccfce20
	bool NotEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0xffffff8523219000 0x7a9ccfcf00
	bool NotEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0xffffff8523219000 0x7a9ccfcfe0
	bool MatchesTag(GameplayTag TagOne, GameplayTag TagTwo, bool bExactMatch);// 0xffffff8523219000 0x7a9ccfd0c0
	bool MatchesAnyTags(GameplayTag TagOne, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0xffffff8523219000 0x7a9ccfd1a0
	GameplayTagContainer MakeLiteralGameplayTagContainer(GameplayTagContainer Value);// 0xffffff8523219000 0x7a9ccfd280
	GameplayTag MakeLiteralGameplayTag(GameplayTag Value);// 0xffffff8523219000 0x7a9ccfd360
	GameplayTagQuery MakeGameplayTagQuery(GameplayTagQuery TagQuery);// 0xffffff8523219000 0x7a9ccfd440
	GameplayTagContainer MakeGameplayTagContainerFromTag(GameplayTag SingleTag);// 0xffffff8523219000 0x7a9ccfd520
	GameplayTagContainer MakeGameplayTagContainerFromArray(out const GameplayTag[] GameplayTags);// 0xffffff8523219000 0x7a9ccfd600
	bool IsGameplayTagValid(GameplayTag GameplayTag);// 0xffffff8523219000 0x7a9ccfd6e0
	bool HasTag(out const GameplayTagContainer TagContainer, GameplayTag Tag, bool bExactMatch);// 0xffffff8523219000 0x7a9ccfd7c0
	bool HasAnyTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0xffffff8523219000 0x7a9ccfd8a0
	bool HasAllTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0xffffff8523219000 0x7a9ccfd980
	bool HasAllMatchingGameplayTags(interface classNone TagContainerInterface, out const GameplayTagContainer OtherContainer);// 0xffffff8523219000 0x7a9ccfda60
	FName GetTagName(out const GameplayTag GameplayTag);// 0xffffff8523219000 0x7a9ccfdb40
	int GetNumGameplayTagsInContainer(out const GameplayTagContainer TagContainer);// 0xffffff8523219000 0x7a9ccfdc20
	FString GetDebugStringFromGameplayTagContainer(out const GameplayTagContainer TagContainer);// 0xffffff8523219000 0x7a9ccfdd00
	FString GetDebugStringFromGameplayTag(GameplayTag GameplayTag);// 0xffffff8523219000 0x7a9ccfdde0
	void GetAllActorsOfClassMatchingTagQuery(Object* WorldContextObject, class Actor ActorClass, out const GameplayTagQuery GameplayTagQuery, out Actor*[] OutActors);// 0xffffff8523219000 0x7a9ccfdec0
	bool EqualEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0xffffff8523219000 0x7a9ccfdfa0
	bool EqualEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0xffffff8523219000 0x7a9ccfe080
	bool DoesTagAssetInterfaceHaveTag(interface classNone TagContainerInterface, GameplayTag Tag);// 0xffffff8523219000 0x7a9ccfe160
	bool DoesContainerMatchTagQuery(out const GameplayTagContainer TagContainer, out const GameplayTagQuery TagQuery);// 0xffffff8523219000 0x7a9ccfe240
	void BreakGameplayTagContainer(out const GameplayTagContainer GameplayTagContainer, out GameplayTag[] GameplayTags);// 0xffffff8523219000 0x7a9ccfe320
	void AppendGameplayTagContainers(out GameplayTagContainer InOutTagContainer, out const GameplayTagContainer InTagContainer);// 0xffffff8523219000 0x7a9ccfe400
	void AddGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0xffffff8523219000 0x7a9ccfe4e0

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10] 0x7aa0960380
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10] 0x7aa0960480

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8] 0x7aa0937320

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4] 0x7aa09372b0
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10] 0x7aa0960580
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10] 0x7aa0960680
	FString UserDescription;//[Offset: 0x28, Size: 0x10] 0x7aa09356b0
	FString AutoDescription;//[Offset: 0x38, Size: 0x10] 0x7aa0935720

--------------------------------
Class: GameplayTagAssetInterface.Interface.Object
	bool HasMatchingGameplayTag(GameplayTag TagToCheck);// 0xffffff8523219000 0x7a9ccffe40
	bool HasAnyMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0xffffff8523219000 0x7a9ccfff20
	bool HasAllMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0xffffff8523219000 0x7a9ccfcaa0
	void GetOwnedGameplayTags(out GameplayTagContainer TagContainer);// 0xffffff8523219000 0x7a9ccfcb80

--------------------------------
Class: EditableGameplayTagQuery.Object
	FString UserDescription;//[Offset: 0x28, Size: 0x10] 0x7a9cd13f80
	EditableGameplayTagQueryExpression* RootExpression;//[Offset: 0x48, Size: 0x8] 0x7a9cd25080
	GameplayTagQuery TagQueryExportText_Helper;//[Offset: 0x50, Size: 0x48] 0x7a9cd25100

--------------------------------
Class: EditableGameplayTagQueryExpression.Object

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x7a9cd25000

--------------------------------
Class: EditableGameplayTagQueryExpression_AllTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x7a9cd24f80

--------------------------------
Class: EditableGameplayTagQueryExpression_NoTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x7a9cd24f00

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x7a9cd24e80

--------------------------------
Class: EditableGameplayTagQueryExpression_AllExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x7a9cd24d80

--------------------------------
Class: EditableGameplayTagQueryExpression_NoExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x7a9cd24c80

--------------------------------
Class: GameplayTagsManager.Object
	GameplayTagSource[] TagSources;//[Offset: 0xa8, Size: 0x10] 0x7a9cd24a80
	DataTable*[] GameplayTagTables;//[Offset: 0x130, Size: 0x10] 0x7a9cd24b80

--------------------------------
Class: GameplayTagSource
	FName SourceName;//[Offset: 0x0, Size: 0x8] 0x7aa0937240
	enum SourceType;//[Offset: 0x8, Size: 0x1] 0x7aa0960180
	GameplayTagsList* SourceTagList;//[Offset: 0x10, Size: 0x8] 0x7aa0960200
	RestrictedGameplayTagsList* SourceRestrictedTagList;//[Offset: 0x18, Size: 0x8] 0x7aa0960280

--------------------------------
Class: GameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10] 0x7a9cd13f10
	GameplayTagTableRow[] GameplayTagList;//[Offset: 0x38, Size: 0x10] 0x7a9cd24980

--------------------------------
Class: GameplayTagTableRow.TableRowBase
	FName Tag;//[Offset: 0x8, Size: 0x8] 0x7aa0937160
	FString DevComment;//[Offset: 0x10, Size: 0x10] 0x7aa09371d0

--------------------------------
Class: RestrictedGameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10] 0x7a9cd13ea0
	RestrictedGameplayTagTableRow[] RestrictedGameplayTagList;//[Offset: 0x38, Size: 0x10] 0x7a9cd24880

--------------------------------
Class: RestrictedGameplayTagTableRow.GameplayTagTableRow.TableRowBase
	bool bAllowNonRestrictedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7aa0960080

--------------------------------
Class: GameplayTagsSettings.GameplayTagsList.Object
	bool ImportTagsFromConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7a9cd26300
	bool WarnOnInvalidTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x7a9cd24280
	bool FastReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x7a9cd24300
	FString InvalidTagCharacters;//[Offset: 0x50, Size: 0x10] 0x7a9cd13ce0
	GameplayTagCategoryRemap[] CategoryRemapping;//[Offset: 0x60, Size: 0x10] 0x7a9cd24400
	SoftObjectPath[] GameplayTagTableList;//[Offset: 0x70, Size: 0x10] 0x7a9cd24500
	GameplayTagRedirect[] GameplayTagRedirects;//[Offset: 0x80, Size: 0x10] 0x7a9cd24600
	FName[] CommonlyReplicatedTags;//[Offset: 0x90, Size: 0x10] 0x7a9cd24680
	int NumBitsForContainerSize;//[Offset: 0xa0, Size: 0x4] 0x7a9cd13dc0
	int NetIndexFirstBitSegment;//[Offset: 0xa4, Size: 0x4] 0x7a9cd13e30
	RestrictedConfigInfo[] RestrictedConfigFiles;//[Offset: 0xa8, Size: 0x10] 0x7a9cd24780

--------------------------------
Class: GameplayTagCategoryRemap
	FString BaseCategory;//[Offset: 0x0, Size: 0x10] 0x7aa0936fa0
	FString[] RemapCategories;//[Offset: 0x10, Size: 0x10] 0x7aa0962080

--------------------------------
Class: GameplayTagRedirect
	FName OldTagName;//[Offset: 0x0, Size: 0x8] 0x7aa0936ec0
	FName NewTagName;//[Offset: 0x8, Size: 0x8] 0x7aa0936f30

--------------------------------
Class: RestrictedConfigInfo
	FString RestrictedConfigName;//[Offset: 0x0, Size: 0x10] 0x7aa0937080
	FString[] Owners;//[Offset: 0x10, Size: 0x10] 0x7aa0962100

--------------------------------
Class: GameplayTagsDeveloperSettings.Object
	FString DeveloperConfigName;//[Offset: 0x28, Size: 0x10] 0x7a9cd13c70

--------------------------------
Class: NetAnalyticsAggregatorConfig.Object
	NetAnalyticsDataConfig[] NetAnalyticsData;//[Offset: 0x28, Size: 0x10] 0x7a9cd26280

--------------------------------
Class: NetAnalyticsDataConfig
	FName DataName;//[Offset: 0x0, Size: 0x8] 0x7aa0936e50
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7aa0962000

--------------------------------
Class: PacketHandlerProfileConfig.Object
	FString[] Components;//[Offset: 0x28, Size: 0x10] 0x7a9cd26180

--------------------------------
Class: MeshDescription.Object

--------------------------------
Class: EyeTrackerFunctionLibrary.BlueprintFunctionLibrary.Object
	void SetEyeTrackedPlayer(PlayerController* PlayerController);// 0xffffff8523219000 0x7a9ccff820
	bool IsStereoGazeDataAvailable();// 0xffffff8523219000 0x7a9ccff900
	bool IsEyeTrackerConnected();// 0xffffff8523219000 0x7a9ccff9e0
	bool GetStereoGazeData(out EyeTrackerStereoGazeData OutGazeData);// 0xffffff8523219000 0x7a9ccffac0
	bool GetGazeData(out EyeTrackerGazeData OutGazeData);// 0xffffff8523219000 0x7a9ccffba0

--------------------------------
Class: EyeTrackerStereoGazeData
	Vector LeftEyeOrigin;//[Offset: 0x0, Size: 0xc] 0x7aa0961780
	Vector LeftEyeDirection;//[Offset: 0xc, Size: 0xc] 0x7aa0961800
	Vector RightEyeOrigin;//[Offset: 0x18, Size: 0xc] 0x7aa0961880
	Vector RightEyeDirection;//[Offset: 0x24, Size: 0xc] 0x7aa0961900
	Vector FixationPoint;//[Offset: 0x30, Size: 0xc] 0x7aa0961980
	float ConfidenceValue;//[Offset: 0x3c, Size: 0x4] 0x7aa0936bb0

--------------------------------
Class: EyeTrackerGazeData
	Vector GazeOrigin;//[Offset: 0x0, Size: 0xc] 0x7aa0961600
	Vector GazeDirection;//[Offset: 0xc, Size: 0xc] 0x7aa0961680
	Vector FixationPoint;//[Offset: 0x18, Size: 0xc] 0x7aa0961700
	float ConfidenceValue;//[Offset: 0x24, Size: 0x4] 0x7aa0936b40

--------------------------------
Class: JsonUtilitiesDummyObject.Object

--------------------------------
Class: DefaultLevelSequenceInstanceData.Object
	Actor* TransformOriginActor;//[Offset: 0x30, Size: 0x8] 0x7a9cd25c80
	Transform TransformOrigin;//[Offset: 0x40, Size: 0x30] 0x7a9cd25d00

--------------------------------
Class: LevelSequenceMetaData.Interface.Object

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8] 0x7a9cd25680
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 0x50] 0x7a9cd25700
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a0, Size: 0xa0] 0x7a9cd25780
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x440, Size: 0x50] 0x7a963da1a0
	class Object* DirectorClass;//[Offset: 0x490, Size: 0x8] 0x7a9cd25880
	void RemoveMetaDataByClass(class Object InClass);// 0xffffff8523219000 0x7a9ccff4a0
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0xffffff8523219000 0x7a9ccff580
	Object* FindMetaDataByClass(class Object InClass);// 0xffffff8523219000 0x7a9ccff660
	Object* CopyMetaData(Object* InMetaData);// 0xffffff8523219000 0x7a9ccff740

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50] 0x7a963d84e0
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50] 0x7a963d8620

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10] 0x7aa096b900

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10] 0x7aa0938f20
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18] 0x7aa096b800
	FString ObjectPath;//[Offset: 0x28, Size: 0x10] 0x7aa0938f90

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c] 0x7aa096b680
	FString ComponentName;//[Offset: 0x20, Size: 0x10] 0x7aa0938eb0
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8] 0x7aa096b700

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7a9cd25480
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18] 0x7a9cd25500
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8] 0x7a9cd25580
	void SetBurnIn(SoftClassPath InBurnInClass);// 0xffffff8523219000 0x7a9ccff3c0

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x340, Size: 0x14] 0x7aa096bb00
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x358, Size: 0x8] 0x7aa096bb80
	SoftObjectPath LevelSequence;//[Offset: 0x360, Size: 0x18] 0x7aa096bc00
	Actor*[] AdditionalEventReceivers;//[Offset: 0x378, Size: 0x10] 0x7aa096bd00
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x388, Size: 0x8] 0x7aa096bd80
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x390, Size: 0x8] 0x7aa096be80
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 0x1] 0x7aa096bf00
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x398, Size: 0x1] 0x7aa096bf80
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x398, Size: 0x1] 0x7aa096c000
	Object* DefaultInstanceData;//[Offset: 0x3a0, Size: 0x8] 0x7aa096c080
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x3a8, Size: 0x8] 0x7aa096c100
	void SetSequence(LevelSequence* InSequence);// 0xffffff8523219000 0x7aa0981660
	void SetReplicatePlayback(bool ReplicatePlayback);// 0xffffff8523219000 0x7aa0981740
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0xffffff8523219000 0x7aa0981820
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0xffffff8523219000 0x7aa0981900
	void ResetBindings();// 0xffffff8523219000 0x7aa09819e0
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0xffffff8523219000 0x7aa0981ac0
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0xffffff8523219000 0x7aa0981ba0
	void OnLevelSequenceLoaded__DelegateSignature();// 0xffffff8523219000 0x7aa0981c80
	LevelSequence* LoadSequence();// 0xffffff8523219000 0x7aa088e780
	LevelSequencePlayer* GetSequencePlayer();// 0xffffff8523219000 0x7aa088e860
	LevelSequence* GetSequence();// 0xffffff8523219000 0x7aa088e940
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0xffffff8523219000 0x7aa088ea20

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x7c8, Size: 0x10] 0x7a9cd26780
	CameraComponent* GetActiveCameraComponent();// 0xffffff8523219000 0x7a9ccfef60
	LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0xffffff8523219000 0x7a9ccff040

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x230, Size: 0x98] 0x7a9cd27380
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x2c8, Size: 0x8] 0x7a9cd25300
	void SetSettings(Object* InSettings);// 0xffffff8523219000 0x7a9ccff200
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0xffffff8523219000 0x7a9ccff2e0

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10] 0x7aa0938d60
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10] 0x7aa096d200
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10] 0x7aa096d280
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10] 0x7aa0938dd0
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10] 0x7aa096d300
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10] 0x7aa096d380
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10] 0x7aa0938e40
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x8] 0x7aa096d400
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x78, Size: 0xc] 0x7aa096d580
	LevelSequence* ActiveShot;//[Offset: 0x88, Size: 0x8] 0x7aa096d600
	MovieSceneSequenceID ShotID;//[Offset: 0x90, Size: 0x4] 0x7aa096d680

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1] 0x7aa096d480
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8] 0x7aa096d500

--------------------------------
Class: LevelSequenceDirector.Object
	LevelSequencePlayer* Player;//[Offset: 0x28, Size: 0x8] 0x7a9cd27300
	void OnCreated();// 0xffffff8523219000 0x7a9ccff120

--------------------------------
Class: LegacyLevelSequenceDirectorBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: MovieSceneCaptureProtocolBase.Object
	enum State;//[Offset: 0x50, Size: 0x1] 0x7a9cd26580
	bool IsCapturing();// 0xffffff8523219000 0x7a9ccfeda0
	enum GetState();// 0xffffff8523219000 0x7a9ccfee80

--------------------------------
Class: MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: NullAudioCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: MasterAudioSubmixCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	FString Filename;//[Offset: 0x58, Size: 0x10] 0x7a9cd13a40

--------------------------------
Class: MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: CompositionGraphCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	CompositionGraphCapturePasses IncludeRenderPasses;//[Offset: 0x58, Size: 0x10] 0x7a9cd28300
	bool bCaptureFramesInHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7a9cd28380
	int HDRCompressionQuality;//[Offset: 0x6c, Size: 0x4] 0x7a9cd139d0
	byte CaptureGamut;//[Offset: 0x70, Size: 0x1] 0x7a9cd28400
	SoftObjectPath PostProcessingMaterial;//[Offset: 0x78, Size: 0x18] 0x7a9cd26380
	bool bDisableScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7a9cd26400
	MaterialInterface* PostProcessingMaterialPtr;//[Offset: 0x98, Size: 0x8] 0x7a9cd26480

--------------------------------
Class: CompositionGraphCapturePasses
	FString[] Value;//[Offset: 0x0, Size: 0x10] 0x7aa096d180

--------------------------------
Class: FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	int CompressionQuality;//[Offset: 0xd8, Size: 0x4] 0x7a9cd15640

--------------------------------
Class: ImageSequenceProtocol_BMP.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_PNG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_JPG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_EXR.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	bool bCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x7a9cd28200
	byte CaptureGamut;//[Offset: 0xd9, Size: 0x1] 0x7a9cd28280

--------------------------------
Class: MovieSceneCaptureInterface.Interface.Object

--------------------------------
Class: MovieSceneCapture.Object
	SoftClassPath ImageCaptureProtocolType;//[Offset: 0x38, Size: 0x18] 0x7a9cd27c80
	SoftClassPath AudioCaptureProtocolType;//[Offset: 0x50, Size: 0x18] 0x7a9cd27d00
	MovieSceneImageCaptureProtocolBase* ImageCaptureProtocol;//[Offset: 0x68, Size: 0x8] 0x7a9cd27d80
	MovieSceneAudioCaptureProtocolBase* AudioCaptureProtocol;//[Offset: 0x70, Size: 0x8] 0x7a9cd27e00
	MovieSceneCaptureSettings Settings;//[Offset: 0x78, Size: 0x60] 0x7a9cd27e80
	bool bUseSeparateProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x7a9cd27f00
	bool bCloseEditorWhenCaptureStarts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x7a9cd27f80
	FString AdditionalCommandLineArguments;//[Offset: 0xe0, Size: 0x10] 0x7a9cd15560
	FString InheritedCommandLineArguments;//[Offset: 0xf0, Size: 0x10] 0x7a9cd155d0
	void SetImageCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0xffffff8523219000 0x7a9ccfea20
	void SetAudioCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0xffffff8523219000 0x7a9ccfeb00
	MovieSceneCaptureProtocolBase* GetImageCaptureProtocol();// 0xffffff8523219000 0x7a9ccfebe0
	MovieSceneCaptureProtocolBase* GetAudioCaptureProtocol();// 0xffffff8523219000 0x7a9ccfecc0

--------------------------------
Class: MovieSceneCaptureSettings
	DirectoryPath OutputDirectory;//[Offset: 0x0, Size: 0x10] 0x7aa096c980
	class GameModeBase* GameModeOverride;//[Offset: 0x10, Size: 0x8] 0x7aa096ca80
	FString OutputFormat;//[Offset: 0x18, Size: 0x10] 0x7aa0938890
	bool bOverwriteExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7aa096cb00
	bool bUseRelativeFrameNumbers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7aa096cb80
	int HandleFrames;//[Offset: 0x2c, Size: 0x4] 0x7aa0938900
	FString MovieExtension;//[Offset: 0x30, Size: 0x10] 0x7aa0938970
	byte ZeroPadFrameNumbers;//[Offset: 0x40, Size: 0x1] 0x7aa096cc00
	FrameRate FrameRate;//[Offset: 0x44, Size: 0x8] 0x7aa096cc80
	CaptureResolution Resolution;//[Offset: 0x4c, Size: 0x8] 0x7aa096cd00
	bool bEnableTextureStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7aa096cd80
	bool bCinematicEngineScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x7aa096ce00
	bool bCinematicMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1] 0x7aa096ce80
	bool bAllowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 0x1] 0x7aa096cf00
	bool bAllowTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7aa096cf80
	bool bShowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x7aa096d000
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1] 0x7aa096d080
	bool bUsePathTracer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1] 0x7aa096d100
	int PathTracerSamplePerPixel;//[Offset: 0x5c, Size: 0x4] 0x7aa0938ac0

--------------------------------
Class: CaptureResolution
	int ResX;//[Offset: 0x0, Size: 0x4] 0x7aa09389e0
	int ResY;//[Offset: 0x4, Size: 0x4] 0x7aa0938a50

--------------------------------
Class: LevelCapture.MovieSceneCapture.Object
	bool bAutoStartCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1] 0x7a9cd27b80
	Guid PrerequisiteActorId;//[Offset: 0x20c, Size: 0x10] 0x7a9cd27c00

--------------------------------
Class: MovieSceneCaptureEnvironment.Object
	bool IsCaptureInProgress();// 0xffffff8523219000 0x7a9cd31ba0
	int GetCaptureFrameNumber();// 0xffffff8523219000 0x7a9cd31c80
	float GetCaptureElapsedTime();// 0xffffff8523219000 0x7a9ccfe780
	MovieSceneImageCaptureProtocolBase* FindImageCaptureProtocol();// 0xffffff8523219000 0x7a9ccfe860
	MovieSceneAudioCaptureProtocolBase* FindAudioCaptureProtocol();// 0xffffff8523219000 0x7a9ccfe940

--------------------------------
Class: UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	World* World;//[Offset: 0x58, Size: 0x8] 0x7a9cd27480
	void StopCapturingFinalPixels();// 0xffffff8523219000 0x7a9cd30da0
	void StartCapturingFinalPixels(out const CapturedPixelsID StreamID);// 0xffffff8523219000 0x7a9cd30e80
	void ResolveBuffer(Texture* Buffer, out const CapturedPixelsID BufferID);// 0xffffff8523219000 0x7a9cd30f60
	void OnWarmUp();// 0xffffff8523219000 0x7a9cd31040
	void OnTick();// 0xffffff8523219000 0x7a9cd31120
	void OnStartCapture();// 0xffffff8523219000 0x7a9cd31200
	bool OnSetup();// 0xffffff8523219000 0x7a9cd312e0
	void OnPreTick();// 0xffffff8523219000 0x7a9cd313c0
	void OnPixelsReceived(out const CapturedPixels Pixels, out const CapturedPixelsID ID, FrameMetrics FrameMetrics);// 0xffffff8523219000 0x7a9cd314a0
	void OnPauseCapture();// 0xffffff8523219000 0x7a9cd31580
	void OnFinalize();// 0xffffff8523219000 0x7a9cd31660
	void OnCaptureFrame();// 0xffffff8523219000 0x7a9cd31740
	bool OnCanFinalize();// 0xffffff8523219000 0x7a9cd31820
	void OnBeginFinalize();// 0xffffff8523219000 0x7a9cd31900
	FrameMetrics GetCurrentFrameMetrics();// 0xffffff8523219000 0x7a9cd319e0
	FString GenerateFilename(out const FrameMetrics InFrameMetrics);// 0xffffff8523219000 0x7a9cd31ac0

--------------------------------
Class: CapturedPixelsID
	<FName,FName> Identifiers;//[Offset: 0x0, Size: 0x50] 0x7a963d8580

--------------------------------
Class: CapturedPixels

--------------------------------
Class: FrameMetrics
	float TotalElapsedTime;//[Offset: 0x0, Size: 0x4] 0x7aa0938b30
	float FrameDelta;//[Offset: 0x4, Size: 0x4] 0x7aa0938ba0
	int FrameNumber;//[Offset: 0x8, Size: 0x4] 0x7aa0938c10
	int NumDroppedFrames;//[Offset: 0xc, Size: 0x4] 0x7aa0938c80

--------------------------------
Class: UserDefinedImageCaptureProtocol.UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	enum Format;//[Offset: 0xd8, Size: 0x1] 0x7a9cd29180
	bool bEnableCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x7a9cd29200
	int CompressionQuality;//[Offset: 0xdc, Size: 0x4] 0x7a9cd152c0
	void WriteImageToDisk(out const CapturedPixels PixelData, out const CapturedPixelsID StreamID, out const FrameMetrics FrameMetrics, bool bCopyImageData);// 0xffffff8523219000 0x7a9cd30b00
	FString GenerateFilenameForCurrentFrame();// 0xffffff8523219000 0x7a9cd30be0
	FString GenerateFilenameForBuffer(Texture* Buffer, out const CapturedPixelsID StreamID);// 0xffffff8523219000 0x7a9cd30cc0

--------------------------------
Class: VideoCaptureProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	bool bUseCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7a9cd29080
	float CompressionQuality;//[Offset: 0x6c, Size: 0x4] 0x7a9cd15250

--------------------------------
Class: MeshReconstructorBase.Object
	void StopReconstruction();// 0xffffff8523219000 0x7a9cd304e0
	void StartReconstruction();// 0xffffff8523219000 0x7a9cd305c0
	void PauseReconstruction();// 0xffffff8523219000 0x7a9cd306a0
	bool IsReconstructionStarted();// 0xffffff8523219000 0x7a9cd30780
	bool IsReconstructionPaused();// 0xffffff8523219000 0x7a9cd30860
	void DisconnectMRMesh();// 0xffffff8523219000 0x7a9cd30940
	void ConnectMRMesh(MRMeshComponent* Mesh);// 0xffffff8523219000 0x7a9cd30a20

--------------------------------
Class: MRMeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* Material;//[Offset: 0x580, Size: 0x8] 0x7a9cd28b00
	bool bCreateMeshProxySections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1] 0x7a9cd28b80
	bool bUpdateNavMeshOnMeshUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 0x1] 0x7a9cd28c00
	bool bNeverCreateCollisionMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58a, Size: 0x1] 0x7a9cd28c80
	BodySetup* CachedBodySetup;//[Offset: 0x590, Size: 0x8] 0x7a9cd28d00
	BodySetup*[] BodySetups;//[Offset: 0x598, Size: 0x10] 0x7a9cd28e00
	bool IsConnected();// 0xffffff8523219000 0x7a9cd30240
	void ForceNavMeshUpdate();// 0xffffff8523219000 0x7a9cd30320
	void Clear();// 0xffffff8523219000 0x7a9cd30400

--------------------------------
Class: MockDataMeshTrackerComponent.SceneComponent.ActorComponent.Object
	delegate OnMeshTrackerUpdated;//[Offset: 0x258, Size: 0x10] 0x7aa0898c00
	bool ScanWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x7aa0898c80
	bool RequestNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1] 0x7aa0898d80
	bool RequestVertexConfidence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1] 0x7aa0898d00
	enum VertexColorMode;//[Offset: 0x26b, Size: 0x1] 0x7aa0898e80
	Color[] BlockVertexColors;//[Offset: 0x270, Size: 0x10] 0x7aa0898f80
	LinearColor VertexColorFromConfidenceZero;//[Offset: 0x280, Size: 0x10] 0x7aa0899000
	LinearColor VertexColorFromConfidenceOne;//[Offset: 0x290, Size: 0x10] 0x7aa0899080
	float UpdateInterval;//[Offset: 0x2a0, Size: 0x4] 0x7aa0839d20
	MRMeshComponent* MRMesh;//[Offset: 0x2a8, Size: 0x8] 0x7aa0899100
	void OnMockDataMeshTrackerUpdated__DelegateSignature(int Index, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const float[] Confidence);// 0xffffff8523219000 0x7aa0885e20
	void DisconnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0xffffff8523219000 0x7aa0885f00
	void ConnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0xffffff8523219000 0x7aa0885fe0

--------------------------------
Class: MoviePlayerSettings.Object
	bool bWaitForMoviesToComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7a9cd28980
	bool bMoviesAreSkippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7a9cd28a00
	FString[] StartupMovies;//[Offset: 0x30, Size: 0x10] 0x7a9cd28a80

--------------------------------
Class: Overlays.Object

--------------------------------
Class: BasicOverlays.Overlays.Object
	OverlayItem[] Overlays;//[Offset: 0x28, Size: 0x10] 0x7a9c844d00

--------------------------------
Class: OverlayItem
	Timespan StartTime;//[Offset: 0x0, Size: 0x8] 0x7a9cb06b00
	Timespan EndTime;//[Offset: 0x8, Size: 0x8] 0x7a9cb06b80
	FString Text;//[Offset: 0x10, Size: 0x10] 0x7a9ca67ef0
	Vector2D Position;//[Offset: 0x20, Size: 0x8] 0x7a9cb06c80

--------------------------------
Class: LocalizedOverlays.Overlays.Object
	BasicOverlays* DefaultOverlays;//[Offset: 0x28, Size: 0x8] 0x7a9c844b80
	<FString,BasicOverlays*> LocaleToOverlaysMap;//[Offset: 0x30, Size: 0x50] 0x7a963db320

--------------------------------
Class: BuildPatchManifest.Object
	byte ManifestFileVersion;//[Offset: 0x28, Size: 0x1] 0x7a9c844780
	bool bIsFileData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7a9c844800
	uint32 AppID;//[Offset: 0x2c, Size: 0x4] 0x7a9c7fc5d0
	FString AppName;//[Offset: 0x30, Size: 0x10] 0x7a9c7fc640
	FString BuildVersion;//[Offset: 0x40, Size: 0x10] 0x7a9c7fc6b0
	FString LaunchExe;//[Offset: 0x50, Size: 0x10] 0x7a9c7fc720
	FString LaunchCommand;//[Offset: 0x60, Size: 0x10] 0x7a9c7fc790
	<FString> PrereqIds;//[Offset: 0x70, Size: 0x50] 0x7a963db280
	FString PrereqName;//[Offset: 0xc0, Size: 0x10] 0x7a9c7fc870
	FString PrereqPath;//[Offset: 0xd0, Size: 0x10] 0x7a9c7fc8e0
	FString PrereqArgs;//[Offset: 0xe0, Size: 0x10] 0x7a9c7fc950
	FileManifestData[] FileManifestList;//[Offset: 0xf0, Size: 0x10] 0x7a9c844900
	ChunkInfoData[] ChunkList;//[Offset: 0x100, Size: 0x10] 0x7a9c844a00
	CustomFieldData[] CustomFields;//[Offset: 0x110, Size: 0x10] 0x7a9c844b00

--------------------------------
Class: FileManifestData
	FString Filename;//[Offset: 0x0, Size: 0x10] 0x7a9ca67cc0
	SHAHashData FileHash;//[Offset: 0x10, Size: 0x14] 0x7a9cb06700
	ChunkPartData[] FileChunkParts;//[Offset: 0x28, Size: 0x10] 0x7a9cb06880
	FString[] InstallTags;//[Offset: 0x38, Size: 0x10] 0x7a9cb06900
	bool bIsUnixExecutable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7a9cb06980
	FString SymlinkTarget;//[Offset: 0x50, Size: 0x10] 0x7a9ca67e80
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7a9cb06a00
	bool bIsCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x7a9cb06a80

--------------------------------
Class: SHAHashData
	byte Hash;//[Offset: 0x0, Size: 0x1] 0x7a9cb06680

--------------------------------
Class: ChunkPartData
	Guid Guid;//[Offset: 0x0, Size: 0x10] 0x7a9cb06780
	uint32 Offset;//[Offset: 0x10, Size: 0x4] 0x7a9ca67d30
	uint32 Size;//[Offset: 0x14, Size: 0x4] 0x7a9ca67e10

--------------------------------
Class: ChunkInfoData
	Guid Guid;//[Offset: 0x0, Size: 0x10] 0x7a9cb06500
	uint64 Hash;//[Offset: 0x10, Size: 0x8] 0x7a9ca67be0
	SHAHashData ShaHash;//[Offset: 0x18, Size: 0x14] 0x7a9cb06580
	int64 FileSize;//[Offset: 0x30, Size: 0x8] 0x7a9ca67c50
	byte GroupNumber;//[Offset: 0x38, Size: 0x1] 0x7a9cb06600

--------------------------------
Class: CustomFieldData
	FString Key;//[Offset: 0x0, Size: 0x10] 0x7a9ca67b00
	FString Value;//[Offset: 0x10, Size: 0x10] 0x7a9ca67b70

--------------------------------
Class: ClothingAssetCustomData.Object

--------------------------------
Class: ClothingAsset.ClothingAssetBase.Object
	PhysicsAsset* PhysicsAsset;//[Offset: 0x48, Size: 0x8] 0x7a9c844380
	ClothConfig ClothConfig;//[Offset: 0x50, Size: 0xd4] 0x7a9c844400
	ClothLODData[] LODData;//[Offset: 0x128, Size: 0x10] 0x7a9c844500
	int[] LodMap;//[Offset: 0x138, Size: 0x10] 0x7a9c844580
	FName[] UsedBoneNames;//[Offset: 0x148, Size: 0x10] 0x7a9c844600
	int[] UsedBoneIndices;//[Offset: 0x158, Size: 0x10] 0x7a9c844680
	int ReferenceBoneIndex;//[Offset: 0x168, Size: 0x4] 0x7a9c7fc560
	ClothingAssetCustomData* CustomData;//[Offset: 0x170, Size: 0x8] 0x7a9c844700

--------------------------------
Class: ClothConfig
	enum WindMethod;//[Offset: 0x0, Size: 0x1] 0x7a9cb07c00
	ClothConstraintSetup VerticalConstraintConfig;//[Offset: 0x4, Size: 0x10] 0x7a9cb07c80
	ClothConstraintSetup HorizontalConstraintConfig;//[Offset: 0x14, Size: 0x10] 0x7a9cb07d00
	ClothConstraintSetup BendConstraintConfig;//[Offset: 0x24, Size: 0x10] 0x7a9cb07d80
	ClothConstraintSetup ShearConstraintConfig;//[Offset: 0x34, Size: 0x10] 0x7a9cb07e00
	float SelfCollisionRadius;//[Offset: 0x44, Size: 0x4] 0x7a9ca68eb0
	float SelfCollisionStiffness;//[Offset: 0x48, Size: 0x4] 0x7a9ca68f20
	float SelfCollisionCullScale;//[Offset: 0x4c, Size: 0x4] 0x7a9ca68f90
	Vector Damping;//[Offset: 0x50, Size: 0xc] 0x7a9cb07e80
	float Friction;//[Offset: 0x5c, Size: 0x4] 0x7a9ca69000
	float WindDragCoefficient;//[Offset: 0x60, Size: 0x4] 0x7a9ca67390
	float WindLiftCoefficient;//[Offset: 0x64, Size: 0x4] 0x7a9ca67400
	Vector LinearDrag;//[Offset: 0x68, Size: 0xc] 0x7a9cb07f80
	Vector AngularDrag;//[Offset: 0x74, Size: 0xc] 0x7a9cb08000
	Vector LinearInertiaScale;//[Offset: 0x80, Size: 0xc] 0x7a9cb08080
	Vector AngularInertiaScale;//[Offset: 0x8c, Size: 0xc] 0x7a9cb08100
	Vector CentrifugalInertiaScale;//[Offset: 0x98, Size: 0xc] 0x7a9cb08180
	float SolverFrequency;//[Offset: 0xa4, Size: 0x4] 0x7a9ca67470
	float StiffnessFrequency;//[Offset: 0xa8, Size: 0x4] 0x7a9ca674e0
	float GravityScale;//[Offset: 0xac, Size: 0x4] 0x7a9ca67550
	Vector GravityOverride;//[Offset: 0xb0, Size: 0xc] 0x7a9cb08200
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1] 0x7a9cb08280
	float TetherStiffness;//[Offset: 0xc0, Size: 0x4] 0x7a9ca675c0
	float TetherLimit;//[Offset: 0xc4, Size: 0x4] 0x7a9ca67630
	float CollisionThickness;//[Offset: 0xc8, Size: 0x4] 0x7a9ca676a0
	float AnimDriveSpringStiffness;//[Offset: 0xcc, Size: 0x4] 0x7a9ca67710
	float AnimDriveDamperStiffness;//[Offset: 0xd0, Size: 0x4] 0x7a9ca67780

--------------------------------
Class: ClothConstraintSetup
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x7a9ca68cf0
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4] 0x7a9ca68d60
	float StretchLimit;//[Offset: 0x8, Size: 0x4] 0x7a9ca68dd0
	float CompressionLimit;//[Offset: 0xc, Size: 0x4] 0x7a9ca68e40

--------------------------------
Class: ClothLODData
	ClothPhysicalMeshData PhysicalMeshData;//[Offset: 0x0, Size: 0xa8] 0x7a9cb07a80
	ClothCollisionData CollisionData;//[Offset: 0xa8, Size: 0x30] 0x7a9cb07b00

--------------------------------
Class: ClothPhysicalMeshData
	Vector[] Vertices;//[Offset: 0x0, Size: 0x10] 0x7a9cb07480
	Vector[] Normals;//[Offset: 0x10, Size: 0x10] 0x7a9cb07580
	uint32[] Indices;//[Offset: 0x20, Size: 0x10] 0x7a9cb07600
	float[] MaxDistances;//[Offset: 0x30, Size: 0x10] 0x7a9cb07680
	float[] BackstopDistances;//[Offset: 0x40, Size: 0x10] 0x7a9cb07700
	float[] BackstopRadiuses;//[Offset: 0x50, Size: 0x10] 0x7a9cb07780
	float[] AnimDriveMultipliers;//[Offset: 0x60, Size: 0x10] 0x7a9cb07800
	float[] InverseMasses;//[Offset: 0x70, Size: 0x10] 0x7a9cb07880
	ClothVertBoneData[] BoneData;//[Offset: 0x80, Size: 0x10] 0x7a9cb07980
	int MaxBoneWeights;//[Offset: 0x90, Size: 0x4] 0x7a9ca68ba0
	int NumFixedVerts;//[Offset: 0x94, Size: 0x4] 0x7a9ca68c10
	uint32[] SelfCollisionIndices;//[Offset: 0x98, Size: 0x10] 0x7a9cb07a00

--------------------------------
Class: ClothVertBoneData
	int NumInfluences;//[Offset: 0x0, Size: 0x4] 0x7a9ca68a50
	uint16 BoneIndices;//[Offset: 0x4, Size: 0x2] 0x7a9ca68ac0
	float BoneWeights;//[Offset: 0x14, Size: 0x4] 0x7a9ca68b30

--------------------------------
Class: ClothCollisionData
	ClothCollisionPrim_Sphere[] Spheres;//[Offset: 0x0, Size: 0x10] 0x7aa0961b00
	ClothCollisionPrim_SphereConnection[] SphereConnections;//[Offset: 0x10, Size: 0x10] 0x7aa0961c00
	ClothCollisionPrim_Convex[] Convexes;//[Offset: 0x20, Size: 0x10] 0x7aa0961e00

--------------------------------
Class: ClothCollisionPrim_Sphere
	int BoneIndex;//[Offset: 0x0, Size: 0x4] 0x7aa0936c20
	float Radius;//[Offset: 0x4, Size: 0x4] 0x7aa0936c90
	Vector LocalPosition;//[Offset: 0x8, Size: 0xc] 0x7aa0961a00

--------------------------------
Class: ClothCollisionPrim_SphereConnection
	int SphereIndices;//[Offset: 0x0, Size: 0x4] 0x7aa0936d00

--------------------------------
Class: ClothCollisionPrim_Convex
	Plane[] Planes;//[Offset: 0x0, Size: 0x10] 0x7aa0961d00
	int BoneIndex;//[Offset: 0x10, Size: 0x4] 0x7aa0936d70

--------------------------------
Class: ClothingSimulationFactoryNv.ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractorNv.ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0xffffff8523219000 0x7a9c80e5c0
	void SetAnimDriveDamperStiffness(float InStiffness);// 0xffffff8523219000 0x7a9c80e6a0
	void EnableGravityOverride(out const Vector InVector);// 0xffffff8523219000 0x7a9c80adc0
	void DisableGravityOverride();// 0xffffff8523219000 0x7a9c80aea0

--------------------------------
Class: FileMediaSource.BaseMediaSource.MediaSource.Object
	FString FilePath;//[Offset: 0x38, Size: 0x10] 0x7a9c7fc250
	bool PrecacheFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7a9c844280
	void SetFilePath(FString Path);// 0xffffff8523219000 0x7a9c80e4e0

--------------------------------
Class: MediaBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	void EnumerateWebcamCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0xffffff8523219000 0x7a9c80e240
	void EnumerateVideoCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0xffffff8523219000 0x7a9c80e320
	void EnumerateAudioCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0xffffff8523219000 0x7a9c80e400

--------------------------------
Class: MediaCaptureDevice
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x7a9ca69d90
	FString URL;//[Offset: 0x18, Size: 0x10] 0x7a9ca69e00

--------------------------------
Class: MediaSoundComponent.SynthComponent.SceneComponent.ActorComponent.Object
	enum Channels;//[Offset: 0x670, Size: 0x4] 0x7a9c84a200
	bool DynamicRateAdjustment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 0x1] 0x7a9c84a280
	float RateAdjustmentFactor;//[Offset: 0x678, Size: 0x4] 0x7a9c7fda60
	FloatRange RateAdjustmentRange;//[Offset: 0x67c, Size: 0x10] 0x7a9c84a300
	MediaPlayer* MediaPlayer;//[Offset: 0x690, Size: 0x8] 0x7a9c84a380
	void SetSpectralAnalysisSettings(float[] InFrequenciesToAnalyze, enum InFFTSize);// 0xffffff8523219000 0x7a9c8536c0
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0xffffff8523219000 0x7a9c8537a0
	void SetEnvelopeFollowingsettings(int AttackTimeMsec, int ReleaseTimeMsec);// 0xffffff8523219000 0x7a9c853880
	void SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled);// 0xffffff8523219000 0x7a9c853960
	void SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing);// 0xffffff8523219000 0x7a9c850080
	MediaSoundComponentSpectralData[] GetSpectralData();// 0xffffff8523219000 0x7a9c850160
	MediaPlayer* GetMediaPlayer();// 0xffffff8523219000 0x7a9c850240
	float GetEnvelopeValue();// 0xffffff8523219000 0x7a9c850320
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0xffffff8523219000 0x7a9c850400

--------------------------------
Class: MediaSoundComponentSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4] 0x7a9ca69cb0
	float Magnitude;//[Offset: 0x4, Size: 0x4] 0x7a9ca69d20

--------------------------------
Class: MediaTexture.Texture.Object
	byte AddressX;//[Offset: 0xb8, Size: 0x1] 0x7a9c849e80
	byte AddressY;//[Offset: 0xb9, Size: 0x1] 0x7a9c849f00
	bool AutoClear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1] 0x7a9c849f80
	LinearColor ClearColor;//[Offset: 0xbc, Size: 0x10] 0x7a9c84a000
	MediaPlayer* MediaPlayer;//[Offset: 0xd0, Size: 0x8] 0x7a9c84a080
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0xffffff8523219000 0x7a9c853260
	int GetWidth();// 0xffffff8523219000 0x7a9c853340
	MediaPlayer* GetMediaPlayer();// 0xffffff8523219000 0x7a9c853420
	int GetHeight();// 0xffffff8523219000 0x7a9c853500
	float GetAspectRatio();// 0xffffff8523219000 0x7a9c8535e0

--------------------------------
Class: PlatformMediaSource.MediaSource.Object
	MediaSource* MediaSource;//[Offset: 0x30, Size: 0x8] 0x7a9c849e00

--------------------------------
Class: StreamMediaSource.BaseMediaSource.MediaSource.Object
	FString StreamUrl;//[Offset: 0x38, Size: 0x10] 0x7a9c7ff510

--------------------------------
Class: TimeSynchronizableMediaSource.BaseMediaSource.MediaSource.Object
	bool bUseTimeSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7a9c849d80

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x338, Size: 0x8] 0x7a9c849800
	NavDataConfig NavDataConfig;//[Offset: 0x340, Size: 0x68] 0x7a9c849880
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a8, Size: 0x1] 0x7a9c849900
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a8, Size: 0x1] 0x7a9c849980
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a8, Size: 0x1] 0x7a9c849a00
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a8, Size: 0x1] 0x7a9c849a80
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3a8, Size: 0x1] 0x7a9c849b00
	enum RuntimeGeneration;//[Offset: 0x3a9, Size: 0x1] 0x7a9c849c00
	float ObservedPathsTickInterval;//[Offset: 0x3ac, Size: 0x4] 0x7a9c7ff430
	uint32 DataVersion;//[Offset: 0x3b0, Size: 0x4] 0x7a9c7ff4a0
	SupportedAreaData[] SupportedAreas;//[Offset: 0x488, Size: 0x10] 0x7a9c849d00

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8] 0x7a9ca0c250
	Color Color;//[Offset: 0x38, Size: 0x4] 0x7a9ca53c00
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc] 0x7a9ca53c80
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8] 0x7a9ca53d00
	SoftClassPath NavigationDataClassName;//[Offset: 0x50, Size: 0x18] 0x7a9ca53d80

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10] 0x7a9ca69af0
	int AreaID;//[Offset: 0x10, Size: 0x4] 0x7a9ca69b60
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8] 0x7a9cb08d00

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: NavAreaMeta.NavArea.NavAreaBase.Object

--------------------------------
Class: NavAreaMeta_SwitchByAgent.NavAreaMeta.NavArea.NavAreaBase.Object
	class NavArea* Agent0Area;//[Offset: 0x48, Size: 0x8] 0x7a9c84a780
	class NavArea* Agent1Area;//[Offset: 0x50, Size: 0x8] 0x7a9c84a800
	class NavArea* Agent2Area;//[Offset: 0x58, Size: 0x8] 0x7a9c84a880
	class NavArea* Agent3Area;//[Offset: 0x60, Size: 0x8] 0x7a9c84a900
	class NavArea* Agent4Area;//[Offset: 0x68, Size: 0x8] 0x7a9c84a980
	class NavArea* Agent5Area;//[Offset: 0x70, Size: 0x8] 0x7a9c84aa00
	class NavArea* Agent6Area;//[Offset: 0x78, Size: 0x8] 0x7a9c84aa80
	class NavArea* Agent7Area;//[Offset: 0x80, Size: 0x8] 0x7a9c84ab00
	class NavArea* Agent8Area;//[Offset: 0x88, Size: 0x8] 0x7a9c84ab80
	class NavArea* Agent9Area;//[Offset: 0x90, Size: 0x8] 0x7a9c84ac00
	class NavArea* Agent10Area;//[Offset: 0x98, Size: 0x8] 0x7a9c84ac80
	class NavArea* Agent11Area;//[Offset: 0xa0, Size: 0x8] 0x7a9c84ad00
	class NavArea* Agent12Area;//[Offset: 0xa8, Size: 0x8] 0x7a9c84ad80
	class NavArea* Agent13Area;//[Offset: 0xb0, Size: 0x8] 0x7a9c84ae00
	class NavArea* Agent14Area;//[Offset: 0xb8, Size: 0x8] 0x7a9c84ae80
	class NavArea* Agent15Area;//[Offset: 0xc0, Size: 0x8] 0x7a9c84af00

--------------------------------
Class: NavArea_Default.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_LowHeight.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Null.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Obstacle.NavArea.NavAreaBase.Object

--------------------------------
Class: NavigationGraph.NavigationData.Actor.Object

--------------------------------
Class: NavigationGraphNode.Actor.Object

--------------------------------
Class: NavigationGraphNodeComponent.SceneComponent.ActorComponent.Object
	NavGraphNode Node;//[Offset: 0x258, Size: 0x18] 0x7a9c84c380
	NavigationGraphNodeComponent* NextNodeComponent;//[Offset: 0x270, Size: 0x8] 0x7a9c84c400
	NavigationGraphNodeComponent* PrevNodeComponent;//[Offset: 0x278, Size: 0x8] 0x7a9c84c480

--------------------------------
Class: NavGraphNode
	Object* Owner;//[Offset: 0x0, Size: 0x8] 0x7a9cb08c80

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xf8, Size: 0x4] 0x7a9c7ff270
	float TileRemovalRadius;//[Offset: 0xfc, Size: 0x4] 0x7a9c7ff2e0

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x28, Size: 0x10] 0x7a9c84be80
	Vector[] PathPoints;//[Offset: 0x38, Size: 0x10] 0x7a9c84bf80
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 0x1] 0x7a9c84c000
	bool IsValid();// 0xffffff8523219000 0x7a9c852b60
	bool IsStringPulled();// 0xffffff8523219000 0x7a9c852c40
	bool IsPartial();// 0xffffff8523219000 0x7a9c852d20
	float GetPathLength();// 0xffffff8523219000 0x7a9c852e00
	float GetPathCost();// 0xffffff8523219000 0x7a9c852ee0
	FString GetDebugString();// 0xffffff8523219000 0x7a9c852fc0
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0xffffff8523219000 0x7a9c8530a0
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0xffffff8523219000 0x7a9c853180

--------------------------------
Class: NavigationPathGenerator.Interface.Object

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10] 0x7a9c84bd00
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4] 0x7a9c84bd80
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4] 0x7a9c84be00

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8] 0x7a9cb0a400
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4] 0x7a9ca69a10
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4] 0x7a9ca69a80
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7a9cb0a480
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x7a9cb0a500
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x7af81c1500

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7a9cb08480
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7a9cb08500
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7a9cb08580
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7a9cb08600
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7a9cb08680
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7a9cb08700
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7a9cb08780
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7a9cb08800
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7a9cb08880
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7a9cb08900
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7a9cb08980
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7a9cb08a00
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7a9cb08a80
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x7a9cb08b00
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x7a9cb08b80
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x7a9cb08c00

--------------------------------
Class: NavigationSystemV1.NavigationSystemBase.Object
	NavigationData* MainNavData;//[Offset: 0x28, Size: 0x8] 0x7a9c84e980
	NavigationData* AbstractNavData;//[Offset: 0x30, Size: 0x8] 0x7a9c84ea00
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x38, Size: 0x28] 0x7a9c84ea80
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7a9c84eb00
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x7a9c84eb80
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x7a9c84ec00
	bool bShouldDiscardSubLevelNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 0x1] 0x7a9c84ec80
	bool bTickWhilePaused;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 0x1] 0x7a9c84ed00
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60, Size: 0x1] 0x7a9c84ed80
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 0x1] 0x7a9c84ee00
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 0x1] 0x7a9c84ee80
	enum DataGatheringMode;//[Offset: 0x62, Size: 0x1] 0x7a9c84ef80
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63, Size: 0x1] 0x7a9c84f000
	float ActiveTilesUpdateInterval;//[Offset: 0x64, Size: 0x4] 0x7a9c7febe0
	NavDataConfig[] SupportedAgents;//[Offset: 0x68, Size: 0x10] 0x7a9c84f100
	float DirtyAreasUpdateFreq;//[Offset: 0x78, Size: 0x4] 0x7a9c7fec50
	NavigationData*[] NavDataSet;//[Offset: 0x80, Size: 0x10] 0x7a9c84f200
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0x90, Size: 0x10] 0x7a9c84f300
	delegate OnNavDataRegisteredEvent;//[Offset: 0x100, Size: 0x10] 0x7a9c84f380
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0x110, Size: 0x10] 0x7a9c84f400
	enum OperationMode;//[Offset: 0x1ec, Size: 0x1] 0x7a9c84f500
	void UnregisterNavigationInvoker(Actor* Invoker);// 0xffffff8523219000 0x7a9c8551e0
	void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0xffffff8523219000 0x7a9c8552c0
	void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0xffffff8523219000 0x7a9c8553a0
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0xffffff8523219000 0x7a9c855480
	void SetGeometryGatheringMode(enum NewMode);// 0xffffff8523219000 0x7a9c855560
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0xffffff8523219000 0x7a9c855640
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0xffffff8523219000 0x7a9c851d60
	Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0xffffff8523219000 0x7a9c851e40
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0xffffff8523219000 0x7a9c851f20
	bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0xffffff8523219000 0x7a9c852000
	bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0xffffff8523219000 0x7a9c8520e0
	bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xffffff8523219000 0x7a9c8521c0
	bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xffffff8523219000 0x7a9c8522a0
	bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0xffffff8523219000 0x7a9c852380
	bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0xffffff8523219000 0x7a9c852460
	Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xffffff8523219000 0x7a9c852540
	Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xffffff8523219000 0x7a9c852620
	byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xffffff8523219000 0x7a9c852700
	byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xffffff8523219000 0x7a9c8527e0
	NavigationSystemV1* GetNavigationSystem(Object* WorldContextObject);// 0xffffff8523219000 0x7a9c8528c0
	NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0xffffff8523219000 0x7a9c8529a0
	NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0xffffff8523219000 0x7a9c852a80

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x368, Size: 0x4] 0x7a9c870300

--------------------------------
Class: NavigationSystemModuleConfig.NavigationSystemConfig.Object
	bool bStrictlyStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x7a9c84e780
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1] 0x7a9c84e800
	bool bAutoSpawnMissingNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 0x1] 0x7a9c84e880
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 0x1] 0x7a9c84e900

--------------------------------
Class: NavigationTestingActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x340, Size: 0x8] 0x7a9c870c80
	NavigationInvokerComponent* InvokerComponent;//[Offset: 0x348, Size: 0x8] 0x7a9c870d00
	bool bActAsNavigationInvoker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1] 0x7a9c870d80
	NavAgentProperties NavAgentProps;//[Offset: 0x358, Size: 0x30] 0x7a9c870e00
	Vector QueryingExtent;//[Offset: 0x388, Size: 0xc] 0x7a9c870e80
	NavigationData* MyNavData;//[Offset: 0x398, Size: 0x8] 0x7a9c870f00
	Vector ProjectedLocation;//[Offset: 0x3a0, Size: 0xc] 0x7a9c870f80
	bool bProjectedLocationValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ac, Size: 0x1] 0x7a9c871000
	bool bSearchStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3ac, Size: 0x1] 0x7a9c871080
	bool bBacktracking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3ac, Size: 0x1] 0x7a9c84f800
	bool bUseHierarchicalPathfinding;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3ac, Size: 0x1] 0x7a9c84f880
	bool bGatherDetailedInfo;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3ac, Size: 0x1] 0x7a9c84f980
	bool bDrawDistanceToWall;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3ac, Size: 0x1] 0x7a9c84fa00
	bool bShowNodePool;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3ac, Size: 0x1] 0x7a9c84fa80
	bool bShowBestPath;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3ac, Size: 0x1] 0x7a9c84fb00
	bool bShowDiffWithPreviousStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ad, Size: 0x1] 0x7a9c84fb80
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3ad, Size: 0x1] 0x7a9c84fc00
	byte CostDisplayMode;//[Offset: 0x3ae, Size: 0x1] 0x7a9c84fc80
	Vector2D TextCanvasOffset;//[Offset: 0x3b0, Size: 0x8] 0x7a9c84fd00
	bool bPathExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b8, Size: 0x1] 0x7a9c84fd80
	bool bPathIsPartial;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b8, Size: 0x1] 0x7a9c84fe00
	bool bPathSearchOutOfNodes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b8, Size: 0x1] 0x7a9c84fe80
	float PathfindingTime;//[Offset: 0x3bc, Size: 0x4] 0x7a9c7fe9b0
	float PathCost;//[Offset: 0x3c0, Size: 0x4] 0x7a9c7fea20
	int PathfindingSteps;//[Offset: 0x3c4, Size: 0x4] 0x7a9c7fea90
	NavigationTestingActor* OtherActor;//[Offset: 0x3c8, Size: 0x8] 0x7a9c84ff00
	class NavigationQueryFilter* FilterClass;//[Offset: 0x3d0, Size: 0x8] 0x7a9c84ff80
	int ShowStepIndex;//[Offset: 0x3d8, Size: 0x4] 0x7a9c7feb00
	float OffsetFromCornersDistance;//[Offset: 0x3dc, Size: 0x4] 0x7a9c7feb70

--------------------------------
Class: NavLinkComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NavigationLink[] Links;//[Offset: 0x580, Size: 0x10] 0x7a9c870c00

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11c, Size: 0x1] 0x7a9c870a00
	Object* CachedNavParent;//[Offset: 0x120, Size: 0x8] 0x7a9c870a80
	void SetNavigationRelevancy(bool bRelevant);// 0xffffff8523219000 0x7a9c855100

--------------------------------
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	uint32 NavLinkUserId;//[Offset: 0x130, Size: 0x4] 0x7a9c7fe860
	class NavArea* EnabledAreaClass;//[Offset: 0x138, Size: 0x8] 0x7a9c870380
	class NavArea* DisabledAreaClass;//[Offset: 0x140, Size: 0x8] 0x7a9c870400
	Vector LinkRelativeStart;//[Offset: 0x148, Size: 0xc] 0x7a9c870480
	Vector LinkRelativeEnd;//[Offset: 0x154, Size: 0xc] 0x7a9c870500
	byte LinkDirection;//[Offset: 0x160, Size: 0x1] 0x7a9c870580
	bool bLinkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x161, Size: 0x1] 0x7a9c870600
	bool bNotifyWhenEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x161, Size: 0x1] 0x7a9c870680
	bool bNotifyWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x161, Size: 0x1] 0x7a9c870700
	bool bCreateBoxObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x161, Size: 0x1] 0x7a9c870780
	Vector ObstacleOffset;//[Offset: 0x164, Size: 0xc] 0x7a9c870800
	Vector ObstacleExtent;//[Offset: 0x170, Size: 0xc] 0x7a9c870880
	class NavArea* ObstacleAreaClass;//[Offset: 0x180, Size: 0x8] 0x7a9c870900
	float BroadcastRadius;//[Offset: 0x188, Size: 0x4] 0x7a9c7fe8d0
	float BroadcastInterval;//[Offset: 0x18c, Size: 0x4] 0x7a9c7fe940
	byte BroadcastChannel;//[Offset: 0x190, Size: 0x1] 0x7a9c870980

--------------------------------
Class: NavLinkCustomInterface.Interface.Object

--------------------------------
Class: NavLinkHostInterface.Interface.Object

--------------------------------
Class: NavLinkRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavLinkTrivial.NavLinkDefinition.Object

--------------------------------
Class: NavMeshRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0x128, Size: 0x8] 0x7a9c870100
	Vector FailsafeExtent;//[Offset: 0x130, Size: 0xc] 0x7a9c870180
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13c, Size: 0x1] 0x7a9c870200
	void SetAreaClass(class NavArea NewAreaClass);// 0xffffff8523219000 0x7a9c855020

--------------------------------
Class: NavModifierVolume.Volume.Brush.Actor.Object
	class NavArea* AreaClass;//[Offset: 0x370, Size: 0x8] 0x7a9c872100
	void SetAreaClass(class NavArea NewAreaClass);// 0xffffff8523219000 0x7a9c854f40

--------------------------------
Class: NavNodeInterface.Interface.Object

--------------------------------
Class: NavSystemConfigOverride.Actor.Object
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x330, Size: 0x8] 0x7a9c872000
	bool bLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1] 0x7a9c872080

--------------------------------
Class: NavTestRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: RecastFilter_UseDefaultArea.NavigationQueryFilter.Object

--------------------------------
Class: RecastNavMesh.NavigationData.Actor.Object
	bool bDrawTriangleEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4ec, Size: 0x1] 0x7a9c873100
	bool bDrawPolyEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4ec, Size: 0x1] 0x7a9c873180
	bool bDrawFilledPolys;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4ec, Size: 0x1] 0x7a9c871100
	bool bDrawNavMeshEdges;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4ec, Size: 0x1] 0x7a9c871180
	bool bDrawTileBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4ec, Size: 0x1] 0x7a9c871200
	bool bDrawPathCollidingGeometry;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4ec, Size: 0x1] 0x7a9c871280
	bool bDrawTileLabels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4ec, Size: 0x1] 0x7a9c871300
	bool bDrawPolygonLabels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4ec, Size: 0x1] 0x7a9c871900
	bool bDrawDefaultPolygonCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4ed, Size: 0x1] 0x7a9c871380
	bool bDrawLabelsOnPathNodes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4ed, Size: 0x1] 0x7a9c871400
	bool bDrawNavLinks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4ed, Size: 0x1] 0x7a9c871480
	bool bDrawFailedNavLinks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4ed, Size: 0x1] 0x7a9c871500
	bool bDrawClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4ed, Size: 0x1] 0x7a9c871580
	bool bDrawOctree;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4ed, Size: 0x1] 0x7a9c871600
	bool bDrawOctreeDetails;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4ed, Size: 0x1] 0x7a9c871680
	bool bDistinctlyDrawTilesBeingBuilt;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4ed, Size: 0x1] 0x7a9c871700
	bool bDrawNavMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4ee, Size: 0x1] 0x7a9c871780
	float DrawOffset;//[Offset: 0x4f0, Size: 0x4] 0x7a9c7ff5f0
	bool bFixedTilePoolSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f4, Size: 0x1] 0x7a9c871800
	int TilePoolSize;//[Offset: 0x4f8, Size: 0x4] 0x7a9c7ff660
	float TileSizeUU;//[Offset: 0x4fc, Size: 0x4] 0x7a9c7ff6d0
	float CellSize;//[Offset: 0x500, Size: 0x4] 0x7a9c7ff740
	float CellHeight;//[Offset: 0x504, Size: 0x4] 0x7a9c7ff7b0
	float AgentRadius;//[Offset: 0x508, Size: 0x4] 0x7a9c7ff820
	float AgentHeight;//[Offset: 0x50c, Size: 0x4] 0x7a9c7ff890
	float AgentMaxHeight;//[Offset: 0x510, Size: 0x4] 0x7a9c7ff900
	float AgentMaxSlope;//[Offset: 0x514, Size: 0x4] 0x7a9c7ff970
	float AgentMaxStepHeight;//[Offset: 0x518, Size: 0x4] 0x7a9c7ff9e0
	float MinRegionArea;//[Offset: 0x51c, Size: 0x4] 0x7a9c7ffa50
	float MergeRegionSize;//[Offset: 0x520, Size: 0x4] 0x7a9c7ffac0
	float MaxSimplificationError;//[Offset: 0x524, Size: 0x4] 0x7a9c7ffb30
	int MaxSimultaneousTileGenerationJobsCount;//[Offset: 0x528, Size: 0x4] 0x7a9c7ffba0
	int TileNumberHardLimit;//[Offset: 0x52c, Size: 0x4] 0x7a9c7ffc10
	int PolyRefTileBits;//[Offset: 0x530, Size: 0x4] 0x7a9c7ffc80
	int PolyRefNavPolyBits;//[Offset: 0x534, Size: 0x4] 0x7a9c7ffcf0
	int PolyRefSaltBits;//[Offset: 0x538, Size: 0x4] 0x7a9c7ffd60
	Vector NavMeshOriginOffset;//[Offset: 0x53c, Size: 0xc] 0x7a9c871880
	float DefaultDrawDistance;//[Offset: 0x548, Size: 0x4] 0x7a9c7ffdd0
	float DefaultMaxSearchNodes;//[Offset: 0x54c, Size: 0x4] 0x7a9c7ffe40
	float DefaultMaxHierarchicalSearchNodes;//[Offset: 0x550, Size: 0x4] 0x7a9c7ffeb0
	byte RegionPartitioning;//[Offset: 0x554, Size: 0x1] 0x7a9c871980
	byte LayerPartitioning;//[Offset: 0x555, Size: 0x1] 0x7a9c871a00
	int RegionChunkSplits;//[Offset: 0x558, Size: 0x4] 0x7a9c7fff20
	int LayerChunkSplits;//[Offset: 0x55c, Size: 0x4] 0x7a9c7fff90
	bool bSortNavigationAreasByCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x560, Size: 0x1] 0x7a9c871a80
	bool bPerformVoxelFiltering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x560, Size: 0x1] 0x7a9c871b00
	bool bMarkLowHeightAreas;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x560, Size: 0x1] 0x7a9c871b80
	bool bFilterLowSpanSequences;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x560, Size: 0x1] 0x7a9c871c00
	bool bFilterLowSpanFromTileCache;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x560, Size: 0x1] 0x7a9c871c80
	bool bDoFullyAsyncNavDataGathering;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x560, Size: 0x1] 0x7a9c871d00
	bool bUseBetterOffsetsFromCorners;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x560, Size: 0x1] 0x7a9c871d80
	bool bStoreEmptyTileLayers;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x560, Size: 0x1] 0x7a9c871e00
	bool bUseVirtualFilters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x561, Size: 0x1] 0x7a9c871e80
	bool bAllowNavLinkAsPathEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x561, Size: 0x1] 0x7a9c871f00
	bool bUseVoxelCache;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x561, Size: 0x1] 0x7a9c871f80
	float TileSetUpdateInterval;//[Offset: 0x564, Size: 0x4] 0x7a9c7fe710
	float HeuristicScale;//[Offset: 0x568, Size: 0x4] 0x7a9c7fe780
	float VerticalDeviationFromGroundCompensation;//[Offset: 0x56c, Size: 0x4] 0x7a9c7fe7f0

--------------------------------
Class: RecastNavMeshDataChunk.NavigationDataChunk.Object

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8] 0x7aa0839380
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1] 0x7aa0898600
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8] 0x7aa0898680
	void ReadyForActivation();// 0xffffff8523219000 0x7aa0888f20
	void GenericGameplayTaskDelegate__DelegateSignature();// 0xffffff8523219000 0x7aa0889000
	void EndTask();// 0xffffff8523219000 0x7aa0885720

--------------------------------
Class: GameplayTaskOwnerInterface.Interface.Object

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4] 0x7a9c880e10
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1] 0x7a9c7ff580
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x7a9c873080

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x104, Size: 0x1] 0x7a9c872700
	GameplayTask*[] SimulatedTasks;//[Offset: 0x108, Size: 0x10] 0x7a9c872800
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0x118, Size: 0x10] 0x7a9c872900
	GameplayTask*[] TickingTasks;//[Offset: 0x138, Size: 0x10] 0x7a9c872a00
	GameplayTask*[] KnownTasks;//[Offset: 0x148, Size: 0x10] 0x7a9c872b00
	delegate OnClaimedResourcesChange;//[Offset: 0x158, Size: 0x10] 0x7a9c872b80
	void OnRep_SimulatedTasks();// 0xffffff8523219000 0x7a9c854d80
	enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0xffffff8523219000 0x7a9c854e60

--------------------------------
Class: GameplayTask_ClaimResource.GameplayTask.Object
	GameplayTask_ClaimResource* ClaimResources(interface classNone InTaskOwner, class GameplayTaskResource[] ResourceClasses, const byte Priority, const FName TaskInstanceName);// 0xffffff8523219000 0x7a9c854bc0
	GameplayTask_ClaimResource* ClaimResource(interface classNone InTaskOwner, class GameplayTaskResource ResourceClass, const byte Priority, const FName TaskInstanceName);// 0xffffff8523219000 0x7a9c854ca0

--------------------------------
Class: GameplayTask_SpawnActor.GameplayTask.Object
	delegate Success;//[Offset: 0x60, Size: 0x10] 0x7a9c873c80
	delegate DidNotSpawn;//[Offset: 0x70, Size: 0x10] 0x7a9c873d00
	class Actor* ClassToSpawn;//[Offset: 0x98, Size: 0x8] 0x7a9c873d80
	GameplayTask_SpawnActor* SpawnActor(interface classNone TaskOwner, Vector SpawnLocation, Rotator SpawnRotation, class Actor Class, bool bSpawnOnlyOnAuthority);// 0xffffff8523219000 0x7a9c854920
	void FinishSpawningActor(Object* WorldContextObject, Actor* SpawnedActor);// 0xffffff8523219000 0x7a9c854a00
	bool BeginSpawningActor(Object* WorldContextObject, out Actor* SpawnedActor);// 0xffffff8523219000 0x7a9c854ae0

--------------------------------
Class: GameplayTask_TimeLimitedExecution.GameplayTask.Object
	delegate OnFinished;//[Offset: 0x60, Size: 0x10] 0x7aa089a400
	delegate OnTimeExpired;//[Offset: 0x70, Size: 0x10] 0x7aa089a480

--------------------------------
Class: GameplayTask_WaitDelay.GameplayTask.Object
	delegate OnFinish;//[Offset: 0x60, Size: 0x10] 0x7aa089a200
	GameplayTask_WaitDelay* TaskWaitDelay(interface classNone TaskOwner, float Time, const byte Priority);// 0xffffff8523219000 0x7aa0888ac0
	void TaskDelayDelegate__DelegateSignature();// 0xffffff8523219000 0x7aa0888ba0

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7a9c873a80
	delegate OnFail;//[Offset: 0x38, Size: 0x10] 0x7a9c873b00
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0xffffff8523219000 0x7a9c854840

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4] 0x7aa0839310

--------------------------------
Class: AIBlueprintHelperLibrary.BlueprintFunctionLibrary.Object
	void UnlockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bUnlockMovement, bool UnlockAILogic);// 0xffffff8523219000 0x7a9c853ce0
	Pawn* SpawnAIFromClass(Object* WorldContextObject, class Pawn PawnClass, BehaviorTree* BehaviorTree, Vector Location, Rotator Rotation, bool bNoCollisionFail);// 0xffffff8523219000 0x7a9c853dc0
	void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0xffffff8523219000 0x7a9c853ea0
	void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0xffffff8523219000 0x7a9c853f80
	void SendAIMessage(Pawn* Target, FName Message, Object* MessageSource, bool bSuccess);// 0xffffff8523219000 0x7a9c854060
	void LockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bLockMovement, bool LockAILogic);// 0xffffff8523219000 0x7a9c854140
	bool IsValidAIRotation(Rotator Rotation);// 0xffffff8523219000 0x7a9c854220
	bool IsValidAILocation(Vector Location);// 0xffffff8523219000 0x7a9c854300
	bool IsValidAIDirection(Vector DirectionVector);// 0xffffff8523219000 0x7a9c8543e0
	NavigationPath* GetCurrentPath(Controller* Controller);// 0xffffff8523219000 0x7a9c8544c0
	BlackboardComponent* GetBlackboard(Actor* Target);// 0xffffff8523219000 0x7a9c8545a0
	AIController* GetAIController(Actor* ControlledActor);// 0xffffff8523219000 0x7a9c854680
	AIAsyncTaskBlueprintProxy* CreateMoveToProxyObject(Object* WorldContextObject, Pawn* Pawn, Vector Destination, Actor* TargetActor, float AcceptanceRadius, bool bStopOnOverlap);// 0xffffff8523219000 0x7a9c854760

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x28, Size: 0x8] 0x7a9c87ac80
	BlackboardData* BlackboardAsset;//[Offset: 0x30, Size: 0x8] 0x7a9c87ad00
	BTDecorator*[] RootDecorators;//[Offset: 0x38, Size: 0x10] 0x7a9c87ae00
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x48, Size: 0x10] 0x7a9c87af00

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10] 0x7a9c87d380
	BTService*[] Services;//[Offset: 0x68, Size: 0x10] 0x7a9c87d480
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x7a9c87d500

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10] 0x7a9c8825b0
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8] 0x7a9c87d580
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8] 0x7a9c87d600

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8] 0x7a9cb0b000
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8] 0x7a9cb0b080
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10] 0x7a9cb0b180
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10] 0x7a9cb0b300

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10] 0x7a9c8a1680
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7a9c8a1700

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4] 0x7a9c8836c0
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4] 0x7a9c883730
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7a9c8a0080
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x7a9c8a0100

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1] 0x7a9c87d180
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1] 0x7a9c87d200

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1] 0x7a9cb0b200
	uint16 Number;//[Offset: 0x2, Size: 0x2] 0x7a9ca695b0

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8] 0x7a9c87b800
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10] 0x7a9c87b900
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7a9c87b980

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8] 0x7a9ca69620
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8] 0x7a9cb0b380
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7a9cb0b400

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xf8, Size: 0x8] 0x7a9c87ba00
	BlackboardData* BlackboardAsset;//[Offset: 0x100, Size: 0x8] 0x7a9c87ba80
	BlackboardKeyType*[] KeyInstances;//[Offset: 0x128, Size: 0x10] 0x7a9c87bb80
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0xffffff8523219000 0x7a9c85a0a0
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0xffffff8523219000 0x7a9c85a180
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0xffffff8523219000 0x7a9c85a260
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0xffffff8523219000 0x7a9c85a340
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0xffffff8523219000 0x7a9c85a420
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0xffffff8523219000 0x7a9c85a500
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0xffffff8523219000 0x7a9c85a5e0
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0xffffff8523219000 0x7a9c85a6c0
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0xffffff8523219000 0x7a9c85a7a0
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0xffffff8523219000 0x7a9c85a880
	bool IsVectorValueSet(out const FName KeyName);// 0xffffff8523219000 0x7a9c85a960
	Vector GetValueAsVector(out const FName KeyName);// 0xffffff8523219000 0x7a9c85aa40
	FString GetValueAsString(out const FName KeyName);// 0xffffff8523219000 0x7a9c85ab20
	Rotator GetValueAsRotator(out const FName KeyName);// 0xffffff8523219000 0x7a9c85ac00
	Object* GetValueAsObject(out const FName KeyName);// 0xffffff8523219000 0x7a9c85ace0
	FName GetValueAsName(out const FName KeyName);// 0xffffff8523219000 0x7a9c857400
	int GetValueAsInt(out const FName KeyName);// 0xffffff8523219000 0x7a9c8574e0
	float GetValueAsFloat(out const FName KeyName);// 0xffffff8523219000 0x7a9c8575c0
	byte GetValueAsEnum(out const FName KeyName);// 0xffffff8523219000 0x7a9c8576a0
	class Object GetValueAsClass(out const FName KeyName);// 0xffffff8523219000 0x7a9c857780
	bool GetValueAsBool(out const FName KeyName);// 0xffffff8523219000 0x7a9c857860
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0xffffff8523219000 0x7a9c857940
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0xffffff8523219000 0x7a9c857a20
	void ClearValue(out const FName KeyName);// 0xffffff8523219000 0x7a9c857b00

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0x100, Size: 0x8] 0x7a9c87aa80
	AIController* AIOwner;//[Offset: 0x108, Size: 0x8] 0x7a9c87ab00
	void StopLogic(FString Reason);// 0xffffff8523219000 0x7a9c857e80
	void RestartLogic();// 0xffffff8523219000 0x7a9c857f60
	bool IsRunning();// 0xffffff8523219000 0x7a9c858040
	bool IsPaused();// 0xffffff8523219000 0x7a9c858120

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 0x1] 0x7a9c876f00
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e0, Size: 0x1] 0x7a9c876f80
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3e0, Size: 0x1] 0x7a9c877000
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3e0, Size: 0x1] 0x7a9c877080
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3e0, Size: 0x1] 0x7a9c877100
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3e0, Size: 0x1] 0x7a9c877180
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x3e8, Size: 0x8] 0x7a9c877200
	BrainComponent* BrainComponent;//[Offset: 0x3f0, Size: 0x8] 0x7a9c877280
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x3f8, Size: 0x8] 0x7a9c877300
	PawnActionsComponent* ActionsComp;//[Offset: 0x400, Size: 0x8] 0x7a9c877380
	BlackboardComponent* Blackboard;//[Offset: 0x408, Size: 0x8] 0x7a9c875300
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x410, Size: 0x8] 0x7a9c875380
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x418, Size: 0x8] 0x7a9c875400
	delegate ReceiveMoveCompleted;//[Offset: 0x420, Size: 0x10] 0x7a9c875480
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0xffffff8523219000 0x7a9c856440
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0xffffff8523219000 0x7a9c856520
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0xffffff8523219000 0x7a9c856600
	void SetMoveBlockDetection(bool bEnable);// 0xffffff8523219000 0x7a9c8566e0
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0xffffff8523219000 0x7a9c8567c0
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0xffffff8523219000 0x7a9c8568a0
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0xffffff8523219000 0x7a9c856980
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0xffffff8523219000 0x7a9c856a60
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0xffffff8523219000 0x7a9c856b40
	void K2_SetFocus(Actor* NewFocus);// 0xffffff8523219000 0x7a9c856c20
	void K2_SetFocalPoint(Vector FP);// 0xffffff8523219000 0x7a9c856d00
	void K2_ClearFocus();// 0xffffff8523219000 0x7a9c856de0
	bool HasPartialPath();// 0xffffff8523219000 0x7a9c856ec0
	PathFollowingComponent* GetPathFollowingComponent();// 0xffffff8523219000 0x7a9c856fa0
	byte GetMoveStatus();// 0xffffff8523219000 0x7a9c857080
	Vector GetImmediateMoveDestination();// 0xffffff8523219000 0x7a9c857160
	Actor* GetFocusActor();// 0xffffff8523219000 0x7a9c857240
	Vector GetFocalPointOnActor(const Actor* Actor);// 0xffffff8523219000 0x7a9c857320
	Vector GetFocalPoint();// 0xffffff8523219000 0x7a9c853a40
	AIPerceptionComponent* GetAIPerceptionComponent();// 0xffffff8523219000 0x7a9c853b20
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0xffffff8523219000 0x7a9c853c00

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0x130, Size: 0x8] 0x7a9c8a3800
	NavigationData* MyNavData;//[Offset: 0x140, Size: 0x8] 0x7a9c8a3880
	void OnNavDataRegistered(NavigationData* NavData);// 0xffffff8523219000 0x7a9c85da60
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0xffffff8523219000 0x7a9c85db40
	Vector GetPathDestination();// 0xffffff8523219000 0x7a9c85dc20
	byte GetPathActionType();// 0xffffff8523219000 0x7a9c85dd00

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xf8, Size: 0x10] 0x7a9c878380
	class AISense* DominantSense;//[Offset: 0x108, Size: 0x8] 0x7a9c878400
	AIController* AIOwner;//[Offset: 0x120, Size: 0x8] 0x7a9c876380
	delegate OnPerceptionUpdated;//[Offset: 0x1a8, Size: 0x10] 0x7a9c876400
	delegate OnTargetPerceptionUpdated;//[Offset: 0x1b8, Size: 0x10] 0x7a9c876480
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0xffffff8523219000 0x7a9c855d40
	void RequestStimuliListenerUpdate();// 0xffffff8523219000 0x7a9c855e20
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0xffffff8523219000 0x7a9c855f00
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0xffffff8523219000 0x7a9c855fe0
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0xffffff8523219000 0x7a9c8560c0
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0xffffff8523219000 0x7a9c8561a0
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0xffffff8523219000 0x7a9c856280
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0xffffff8523219000 0x7a9c856360

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4] 0x7a9c877580
	float MaxAge;//[Offset: 0x2c, Size: 0x4] 0x7a9c8807f0
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7a9c877600

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4] 0x7a9c880860
	enum NotifyType;//[Offset: 0x2c, Size: 0x1] 0x7a9c877700
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x7a9c877780
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1] 0x7a9c877800
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8] 0x7a9c877880

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10] 0x7a9c877980
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4] 0x7a9c8808d0
	void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0xffffff8523219000 0x7a9c858f20
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0xffffff8523219000 0x7a9c859000
	bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0xffffff8523219000 0x7a9c855720
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0xffffff8523219000 0x7a9c855800
	class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0xffffff8523219000 0x7a9c8558e0

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8] 0x7a9c878000

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18] 0x7a9c879680
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18] 0x7a9c879700
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4] 0x7a9c881ac0
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4] 0x7a9c881b30
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4] 0x7a9c881ba0
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1] 0x7a9c879800
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1] 0x7a9c879880
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1] 0x7a9c879900
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1] 0x7a9c879980
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x7a9c879a00
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1] 0x7a9c879a80
	byte DefaultSightCollisionChannel;//[Offset: 0x9a, Size: 0x1] 0x7a9c879b00
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8] 0x7a9c879b80
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8] 0x7a9c879c00
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8] 0x7a9c879c80
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10] 0x7a9c879d80
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8] 0x7a9c879e00
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8] 0x7a9c879e80
	void AILoggingVerbose();// 0xffffff8523219000 0x7a9c8583c0
	void AIIgnorePlayers();// 0xffffff8523219000 0x7a9c8584a0

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4] 0x7a9c881890
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10] 0x7a9c87a580
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10] 0x7a9c87a680

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8] 0x7a9cb09600
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8] 0x7a9cb09680

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x178, Size: 0x10] 0x7a9c87a780
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0xffffff8523219000 0x7a9c857be0
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0xffffff8523219000 0x7a9c857cc0
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0xffffff8523219000 0x7a9c857da0

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10] 0x7a9c8a6d80
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10] 0x7a9c8a6e80
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10] 0x7a9c8a6f80
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4] 0x7a9c884680
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x7a9c8a7000
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4] 0x7a9c8846f0
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8] 0x7a9c884760
	EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0xffffff8523219000 0x7a9c85d1a0

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8] 0x7a9cb0ac80

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8] 0x7a9c882cb0
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 0x10] 0x7a9c8a3300

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8] 0x7a9c8a6b80
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10] 0x7a9c8a6c80

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10] 0x7a9c882bd0
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8] 0x7a9c8a4b80
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7a9c8a4c00

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4] 0x7a9c882c40

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4] 0x7a9c8845a0
	byte TestPurpose;//[Offset: 0x30, Size: 0x1] 0x7a9c8a8380
	FString TestComment;//[Offset: 0x38, Size: 0x10] 0x7a9c884610
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1] 0x7a9c8a8400
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1] 0x7a9c8a6380
	byte FilterType;//[Offset: 0x4a, Size: 0x1] 0x7a9c8a6400
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x30] 0x7a9c8a6480
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x80, Size: 0x30] 0x7a9c8a6500
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xb0, Size: 0x30] 0x7a9c8a6580
	byte ScoringEquation;//[Offset: 0xe1, Size: 0x1] 0x7a9c8a6600
	byte ClampMinType;//[Offset: 0xe2, Size: 0x1] 0x7a9c8a6680
	byte ClampMaxType;//[Offset: 0xe3, Size: 0x1] 0x7a9c8a6700
	enum NormalizationType;//[Offset: 0xe4, Size: 0x1] 0x7a9c8a6800
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0xe8, Size: 0x30] 0x7a9c8a6880
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x118, Size: 0x30] 0x7a9c8a6900
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x148, Size: 0x30] 0x7a9c8a6980
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x178, Size: 0x30] 0x7a9c8a6a00
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1] 0x7a9c8a6a80
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b8, Size: 0x1] 0x7a9c8a6b00

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7a9cb0a200

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Property* PropertyType;//[Offset: 0x20, Size: 0x8] 0x7a9cb0a280

--------------------------------
Class: AIDataProviderValue
	Property* CachedProperty;//[Offset: 0x8, Size: 0x8] 0x7a9cb0a300
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8] 0x7a9cb0a380
	FName DataField;//[Offset: 0x18, Size: 0x8] 0x7a9ca699a0

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x28, Size: 0x4] 0x7a9ca69930

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4] 0x7aa0839070
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8] 0x7aa0899980
	int OptionIndex;//[Offset: 0x60, Size: 0x4] 0x7aa08390e0
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10] 0x7aa0899a00
	void SetNamedParam(FName ParamName, float Value);// 0xffffff8523219000 0x7aa08882e0
	Vector[] GetResultsAsLocations();// 0xffffff8523219000 0x7aa08883c0
	Actor*[] GetResultsAsActors();// 0xffffff8523219000 0x7aa08884a0
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0xffffff8523219000 0x7aa0888580
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0xffffff8523219000 0x7aa0888660
	float GetItemScore(int ItemIndex);// 0xffffff8523219000 0x7aa0888740
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0xffffff8523219000 0x7aa0888820

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0xffffff8523219000 0x7a9c85fc80
	void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0xffffff8523219000 0x7a9c85fd60
	bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0xffffff8523219000 0x7a9c85fe40
	int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0xffffff8523219000 0x7a9c85ff20
	int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0xffffff8523219000 0x7a9c85caa0
	int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0xffffff8523219000 0x7a9c85cb80
	int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0xffffff8523219000 0x7a9c85cc60

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4] 0x7aa083ab90
	float ExpirationAge;//[Offset: 0x4, Size: 0x4] 0x7aa083ac00
	float Strength;//[Offset: 0x8, Size: 0x4] 0x7aa083ac70
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc] 0x7aa0899580
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc] 0x7aa0899600
	FName Tag;//[Offset: 0x24, Size: 0x8] 0x7aa083ace0
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7aa0899680

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8] 0x7a9cb0a000
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10] 0x7a9cb0a100
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7a9cb0a180

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xf8, Size: 0x8] 0x7a9c8aae00
	PawnActionStack[] ActionStacks;//[Offset: 0x100, Size: 0x10] 0x7a9c8aaf00
	PawnActionEvent[] ActionEvents;//[Offset: 0x110, Size: 0x10] 0x7a9c8ab000
	PawnAction* CurrentAction;//[Offset: 0x120, Size: 0x8] 0x7a9c8ab080
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0xffffff8523219000 0x7a9c85f660
	bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0xffffff8523219000 0x7a9c85f740
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0xffffff8523219000 0x7a9c85f820
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0xffffff8523219000 0x7a9c85f900

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8] 0x7a9cb0ba80

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8] 0x7a9c8a9680
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8] 0x7a9c8a9700
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8] 0x7a9c8a9780
	Object* Instigator;//[Offset: 0x40, Size: 0x8] 0x7a9c8a9800
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8] 0x7a9c8a9880
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7a9c8a9900
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7a9c8a9980
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x7a9c8a9a00
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x7a9c8a9a80
	byte GetActionPriority();// 0xffffff8523219000 0x7a9c85f9e0
	void Finish(byte WithResult);// 0xffffff8523219000 0x7a9c85fac0
	PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0xffffff8523219000 0x7a9c85fba0

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8] 0x7a9cb0ba00

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: AIDataProvider_QueryParams.AIDataProvider.Object
	FName ParamName;//[Offset: 0x28, Size: 0x8] 0x7a9c880a20
	float FloatValue;//[Offset: 0x30, Size: 0x4] 0x7a9c880a90
	int IntValue;//[Offset: 0x34, Size: 0x4] 0x7a9c880b00
	bool BoolValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7a9c876e80

--------------------------------
Class: AIDataProvider_Random.AIDataProvider_QueryParams.AIDataProvider.Object
	float Min;//[Offset: 0x3c, Size: 0x4] 0x7a9c880940
	float Max;//[Offset: 0x40, Size: 0x4] 0x7a9c8809b0
	bool bInteger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x7a9c876e00

--------------------------------
Class: AIPerceptionListenerInterface.Interface.Object

--------------------------------
Class: AIPerceptionStimuliSourceComponent.ActorComponent.Object
	bool bAutoRegisterAsSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1] 0x7a9c878080
	class AISense[] RegisterAsSourceForSenses;//[Offset: 0x100, Size: 0x10] 0x7a9c878180
	void UnregisterFromSense(class AISense SenseClass);// 0xffffff8523219000 0x7a9c8559c0
	void UnregisterFromPerceptionSystem();// 0xffffff8523219000 0x7a9c855aa0
	void RegisterWithPerceptionSystem();// 0xffffff8523219000 0x7a9c855b80
	void RegisterForSense(class AISense SenseClass);// 0xffffff8523219000 0x7a9c855c60

--------------------------------
Class: AIResourceInterface.Interface.Object

--------------------------------
Class: AIResource_Movement.GameplayTaskResource.Object

--------------------------------
Class: AIResource_Logic.GameplayTaskResource.Object

--------------------------------
Class: AISenseBlueprintListener.UserDefinedStruct.ScriptStruct.Struct.Field.Object

--------------------------------
Class: AISenseConfig_Blueprint.AISenseConfig.Object
	class AISense_Blueprint* Implementation;//[Offset: 0x48, Size: 0x8] 0x7a9c877500

--------------------------------
Class: AISense_Blueprint.AISense.Object
	class UserDefinedStruct* ListenerDataType;//[Offset: 0x78, Size: 0x8] 0x7a9c878900
	AIPerceptionComponent*[] ListenerContainer;//[Offset: 0x80, Size: 0x10] 0x7a9c878a00
	AISenseEvent*[] UnprocessedEvents;//[Offset: 0x90, Size: 0x10] 0x7a9c878b00
	float OnUpdate(out const AISenseEvent*[] EventsToProcess);// 0xffffff8523219000 0x7a9c858900
	void OnListenerUpdated(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0xffffff8523219000 0x7a9c8589e0
	void OnListenerUnregistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0xffffff8523219000 0x7a9c858ac0
	void OnListenerRegistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0xffffff8523219000 0x7a9c858ba0
	void K2_OnNewPawn(Pawn* NewPawn);// 0xffffff8523219000 0x7a9c858c80
	void GetAllListenerComponents(out AIPerceptionComponent*[] ListenerComponents);// 0xffffff8523219000 0x7a9c858d60
	void GetAllListenerActors(out Actor*[] ListenerActors);// 0xffffff8523219000 0x7a9c858e40

--------------------------------
Class: AISenseConfig_Damage.AISenseConfig.Object
	class AISense_Damage* Implementation;//[Offset: 0x48, Size: 0x8] 0x7a9c877480

--------------------------------
Class: AISense_Damage.AISense.Object
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x7a9c878600
	void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation);// 0xffffff8523219000 0x7a9c858820

--------------------------------
Class: AIDamageEvent
	float Amount;//[Offset: 0x0, Size: 0x4] 0x7a9ca69850
	Vector Location;//[Offset: 0x4, Size: 0xc] 0x7a9cb09c80
	Vector HitLocation;//[Offset: 0x10, Size: 0xc] 0x7a9cb09d00
	Actor* DamagedActor;//[Offset: 0x20, Size: 0x8] 0x7a9cb09d80
	Actor* Instigator;//[Offset: 0x28, Size: 0x8] 0x7a9cb09e00

--------------------------------
Class: AISenseConfig_Hearing.AISenseConfig.Object
	class AISense_Hearing* Implementation;//[Offset: 0x48, Size: 0x8] 0x7a9c879400
	float HearingRange;//[Offset: 0x50, Size: 0x4] 0x7a9c880710
	float LoSHearingRange;//[Offset: 0x54, Size: 0x4] 0x7a9c880780
	bool bUseLoSHearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7a9c879480
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4] 0x7a9c877400

--------------------------------
Class: AISense_Hearing.AISense.Object
	AINoiseEvent[] NoiseEvents;//[Offset: 0x78, Size: 0x10] 0x7a9c87a480
	float SpeedOfSoundSq;//[Offset: 0x88, Size: 0x4] 0x7a9c8802b0
	void ReportNoiseEvent(Object* WorldContextObject, Vector NoiseLocation, float Loudness, Actor* Instigator, float MaxRange, FName Tag);// 0xffffff8523219000 0x7a9c858740

--------------------------------
Class: AINoiseEvent
	Vector NoiseLocation;//[Offset: 0x4, Size: 0xc] 0x7a9cb09b80
	float Loudness;//[Offset: 0x10, Size: 0x4] 0x7a9ca69700
	float MaxRange;//[Offset: 0x14, Size: 0x4] 0x7a9ca69770
	Actor* Instigator;//[Offset: 0x18, Size: 0x8] 0x7a9cb09c00
	FName Tag;//[Offset: 0x20, Size: 0x8] 0x7a9ca697e0

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7a9cb09e80
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7a9cb09f00
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7a9cb09f80

--------------------------------
Class: AISenseConfig_Prediction.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8] 0x7a9c879300
	float SightRadius;//[Offset: 0x50, Size: 0x4] 0x7a9c880550
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4] 0x7a9c8805c0
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4] 0x7a9c880630
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4] 0x7a9c879380
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x60, Size: 0x4] 0x7a9c8806a0

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x128, Size: 0x4] 0x7a9c881c10
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x12c, Size: 0x4] 0x7a9c881c80
	double MaxTimeSlicePerTick;//[Offset: 0x130, Size: 0x8] 0x7a9c880010
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x138, Size: 0x4] 0x7a9c880080
	float MaxQueryImportance;//[Offset: 0x140, Size: 0x4] 0x7a9c8800f0
	float SightLimitQueryImportance;//[Offset: 0x144, Size: 0x4] 0x7a9c880160

--------------------------------
Class: AISenseConfig_Team.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Touch.AISenseConfig.Object

--------------------------------
Class: AISenseEvent_Damage.AISenseEvent.Object
	AIDamageEvent Event;//[Offset: 0x28, Size: 0x30] 0x7a9c879280

--------------------------------
Class: AISenseEvent_Hearing.AISenseEvent.Object
	AINoiseEvent Event;//[Offset: 0x28, Size: 0x30] 0x7a9c879200

--------------------------------
Class: AISense_Prediction.AISense.Object
	AIPredictionEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x7a9c87a180
	void RequestPawnPredictionEvent(Pawn* Requestor, Actor* PredictedActor, float PredictionTime);// 0xffffff8523219000 0x7a9c858580
	void RequestControllerPredictionEvent(AIController* Requestor, Actor* PredictedActor, float PredictionTime);// 0xffffff8523219000 0x7a9c858660

--------------------------------
Class: AIPredictionEvent
	Actor* Requestor;//[Offset: 0x0, Size: 0x8] 0x7a9cb09a80
	Actor* PredictedActor;//[Offset: 0x8, Size: 0x8] 0x7a9cb09b00

--------------------------------
Class: AISense_Team.AISense.Object
	AITeamStimulusEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x7a9c87a080

--------------------------------
Class: AITeamStimulusEvent
	Actor* Broadcaster;//[Offset: 0x28, Size: 0x8] 0x7a9cb09880
	Actor* Enemy;//[Offset: 0x30, Size: 0x8] 0x7a9cb09900

--------------------------------
Class: AISense_Touch.AISense.Object
	AITouchEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x7a9c879f80

--------------------------------
Class: AITouchEvent
	Actor* TouchReceiver;//[Offset: 0x10, Size: 0x8] 0x7a9cb09780
	Actor* OtherActor;//[Offset: 0x18, Size: 0x8] 0x7a9cb09800

--------------------------------
Class: AISightTargetInterface.Interface.Object

--------------------------------
Class: AITask.GameplayTask.Object
	AIController* OwnerController;//[Offset: 0x60, Size: 0x8] 0x7a9c879600

--------------------------------
Class: AITask_LockLogic.AITask.GameplayTask.Object

--------------------------------
Class: AITask_MoveTo.AITask.GameplayTask.Object
	delegate OnRequestFailed;//[Offset: 0x68, Size: 0x10] 0x7a9c87b100
	delegate OnMoveFinished;//[Offset: 0x78, Size: 0x10] 0x7a9c87b180
	AIMoveRequest MoveRequest;//[Offset: 0x88, Size: 0x40] 0x7a9c87b200
	AITask_MoveTo* AIMoveTo(AIController* Controller, Vector GoalLocation, Actor* GoalActor, float AcceptanceRadius, byte StopOnOverlap, byte AcceptPartialPath, bool bUsePathfinding, bool bLockAILogic, bool bUseContinuosGoalTracking);// 0xffffff8523219000 0x7a9c8582e0

--------------------------------
Class: AIMoveRequest
	Actor* GoalActor;//[Offset: 0x0, Size: 0x8] 0x7a9cb09700

--------------------------------
Class: AITask_RunEQS.AITask.GameplayTask.Object
	AITask_RunEQS* RunEQS(AIController* Controller, EnvQuery* QueryTemplate);// 0xffffff8523219000 0x7a9c858200

--------------------------------
Class: BehaviorTreeTypes.Object

--------------------------------
Class: BlackboardKeyType_Bool.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Class.BlackboardKeyType.Object
	class Object* BaseClass;//[Offset: 0x30, Size: 0x8] 0x7a9c87b780

--------------------------------
Class: BlackboardKeyType_Enum.BlackboardKeyType.Object
	Enum* EnumType;//[Offset: 0x30, Size: 0x8] 0x7a9c87b680
	FString EnumName;//[Offset: 0x38, Size: 0x10] 0x7a9c882700
	bool bIsEnumNameValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7a9c87b700

--------------------------------
Class: BlackboardKeyType_Float.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Int.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Name.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_NativeEnum.BlackboardKeyType.Object
	FString EnumName;//[Offset: 0x30, Size: 0x10] 0x7a9c882690
	Enum* EnumType;//[Offset: 0x40, Size: 0x8] 0x7a9c87b600

--------------------------------
Class: BlackboardKeyType_Object.BlackboardKeyType.Object
	class Object* BaseClass;//[Offset: 0x30, Size: 0x8] 0x7a9c87d680

--------------------------------
Class: BlackboardKeyType_Rotator.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_String.BlackboardKeyType.Object
	FString StringValue;//[Offset: 0x30, Size: 0x10] 0x7a9c882620

--------------------------------
Class: BlackboardKeyType_Vector.BlackboardKeyType.Object

--------------------------------
Class: BTComposite_Selector.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_Sequence.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_SimpleParallel.BTCompositeNode.BTNode.Object
	byte FinishMode;//[Offset: 0x8c, Size: 0x1] 0x7a9c87d280

--------------------------------
Class: BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x60, Size: 0x28] 0x7a9c87d100

--------------------------------
Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0x10] 0x7a9cb0b500
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8] 0x7a9ca69690
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x8] 0x7a9cb0b580
	byte SelectedKeyID;//[Offset: 0x20, Size: 0x1] 0x7a9cb09500
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1] 0x7a9cb09580

--------------------------------
Class: BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int IntValue;//[Offset: 0x88, Size: 0x4] 0x7a9c8823f0
	float FloatValue;//[Offset: 0x8c, Size: 0x4] 0x7a9c882460
	FString StringValue;//[Offset: 0x90, Size: 0x10] 0x7a9c8824d0
	FString CachedDescription;//[Offset: 0xa0, Size: 0x10] 0x7a9c882540
	byte OperationType;//[Offset: 0xb0, Size: 0x1] 0x7a9c87d000
	byte NotifyObserver;//[Offset: 0xb1, Size: 0x1] 0x7a9c87d080

--------------------------------
Class: BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x60, Size: 0x8] 0x7a9c87e180
	Actor* ActorOwner;//[Offset: 0x68, Size: 0x8] 0x7a9c87e200
	FName[] ObservedKeyNames;//[Offset: 0x70, Size: 0x10] 0x7a9c87e300
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7a9c87e380
	bool bCheckConditionOnlyBlackBoardChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x7a9c87e400
	bool bIsObservingBB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1] 0x7a9c87e480
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0xffffff8523219000 0x7a9c859460
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0xffffff8523219000 0x7a9c859540
	void ReceiveObserverDeactivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xffffff8523219000 0x7a9c859620
	void ReceiveObserverDeactivated(Actor* OwnerActor);// 0xffffff8523219000 0x7a9c859700
	void ReceiveObserverActivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xffffff8523219000 0x7a9c8597e0
	void ReceiveObserverActivated(Actor* OwnerActor);// 0xffffff8523219000 0x7a9c8598c0
	void ReceiveExecutionStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xffffff8523219000 0x7a9c8599a0
	void ReceiveExecutionStart(Actor* OwnerActor);// 0xffffff8523219000 0x7a9c859a80
	void ReceiveExecutionFinishAI(AIController* OwnerController, Pawn* ControlledPawn, byte NodeResult);// 0xffffff8523219000 0x7a9c859b60
	void ReceiveExecutionFinish(Actor* OwnerActor, byte NodeResult);// 0xffffff8523219000 0x7a9c859c40
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xffffff8523219000 0x7a9c859d20
	bool PerformConditionCheck(Actor* OwnerActor);// 0xffffff8523219000 0x7a9c859e00
	bool IsDecoratorObserverActive();// 0xffffff8523219000 0x7a9c859ee0
	bool IsDecoratorExecutionActive();// 0xffffff8523219000 0x7a9c859fc0

--------------------------------
Class: BTDecorator_CheckGameplayTagsOnActor.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector ActorToCheck;//[Offset: 0x60, Size: 0x28] 0x7a9c87df80
	enum TagsToMatch;//[Offset: 0x88, Size: 0x1] 0x7a9c87e080
	GameplayTagContainer GameplayTags;//[Offset: 0x90, Size: 0x20] 0x7a9c87e100
	FString CachedDescription;//[Offset: 0xb0, Size: 0x10] 0x7a9c882230

--------------------------------
Class: BTDecorator_CompareBBEntries.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte Operator;//[Offset: 0x5a, Size: 0x1] 0x7a9c87de00
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28] 0x7a9c87de80
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28] 0x7a9c87df00

--------------------------------
Class: BTDecorator_ConditionalLoop.BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_ConeCheck.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4] 0x7a9c8821c0
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28] 0x7a9c87dc80
	BlackboardKeySelector ConeDirection;//[Offset: 0x88, Size: 0x28] 0x7a9c87dd00
	BlackboardKeySelector Observed;//[Offset: 0xb0, Size: 0x28] 0x7a9c87dd80

--------------------------------
Class: BTDecorator_Cooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float CoolDownTime;//[Offset: 0x5c, Size: 0x4] 0x7a9c882150

--------------------------------
Class: BTDecorator_DoesPathExist.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28] 0x7a9c87da00
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28] 0x7a9c87da80
	bool bUseSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7a9c87db00
	byte PathQueryType;//[Offset: 0xb1, Size: 0x1] 0x7a9c87db80
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb8, Size: 0x8] 0x7a9c87dc00

--------------------------------
Class: BTDecorator_ForceSuccess.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_IsAtLocation.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x88, Size: 0x4] 0x7a9c8820e0
	AIDataProviderFloatValue ParametrizedAcceptableRadius;//[Offset: 0x90, Size: 0x30] 0x7a9c87d700
	enum GeometricDistanceType;//[Offset: 0xc0, Size: 0x1] 0x7a9c87d800
	bool bUseParametrizedRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc1, Size: 0x1] 0x7a9c87d880
	bool bUseNavAgentGoalLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc1, Size: 0x1] 0x7a9c87d900
	bool bPathFindingBasedTest;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc1, Size: 0x1] 0x7a9c87d980

--------------------------------
Class: BTDecorator_IsBBEntryOfClass.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	class Object* TestClass;//[Offset: 0x88, Size: 0x8] 0x7a9c87f780

--------------------------------
Class: BTDecorator_KeepInCone.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4] 0x7a9c882070
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28] 0x7a9c87f580
	BlackboardKeySelector Observed;//[Offset: 0x88, Size: 0x28] 0x7a9c87f600
	bool bUseSelfAsOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7a9c87f680
	bool bUseSelfAsObserved;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x7a9c87f700

--------------------------------
Class: BTDecorator_Loop.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int NumLoops;//[Offset: 0x5c, Size: 0x4] 0x7a9c881f90
	bool bInfiniteLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7a9c87f500
	float InfiniteLoopTimeoutTime;//[Offset: 0x64, Size: 0x4] 0x7a9c882000

--------------------------------
Class: BTDecorator_ReachedMoveGoal.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_SetTagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8] 0x7a9c87f400
	float CooldownDuration;//[Offset: 0x64, Size: 0x4] 0x7a9c881f20
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7a9c87f480

--------------------------------
Class: BTDecorator_TagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8] 0x7a9c87f280
	float CooldownDuration;//[Offset: 0x64, Size: 0x4] 0x7a9c881eb0
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7a9c87f300
	bool bActivatesCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1] 0x7a9c87f380

--------------------------------
Class: BTDecorator_TimeLimit.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float TimeLimit;//[Offset: 0x5c, Size: 0x4] 0x7a9c881e40

--------------------------------
Class: BTFunctionLibrary.BlueprintFunctionLibrary.Object
	void StopUsingExternalEvent(BTNode* NodeOwner);// 0xffffff8523219000 0x7a9c85b680
	void StartUsingExternalEvent(BTNode* NodeOwner, Actor* OwningActor);// 0xffffff8523219000 0x7a9c85b760
	void SetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key, Vector Value);// 0xffffff8523219000 0x7a9c85b840
	void SetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key, FString Value);// 0xffffff8523219000 0x7a9c85b920
	void SetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key, Rotator Value);// 0xffffff8523219000 0x7a9c85ba00
	void SetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key, Object* Value);// 0xffffff8523219000 0x7a9c85bae0
	void SetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key, FName Value);// 0xffffff8523219000 0x7a9c85bbc0
	void SetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key, int Value);// 0xffffff8523219000 0x7a9c85bca0
	void SetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key, float Value);// 0xffffff8523219000 0x7a9c85bd80
	void SetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key, byte Value);// 0xffffff8523219000 0x7a9c85be60
	void SetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key, class Object Value);// 0xffffff8523219000 0x7a9c85bf40
	void SetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key, bool Value);// 0xffffff8523219000 0x7a9c85c020
	BlackboardComponent* GetOwnersBlackboard(BTNode* NodeOwner);// 0xffffff8523219000 0x7a9c85c100
	BehaviorTreeComponent* GetOwnerComponent(BTNode* NodeOwner);// 0xffffff8523219000 0x7a9c85c1e0
	Vector GetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xffffff8523219000 0x7a9c85c2c0
	FString GetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xffffff8523219000 0x7a9c85c3a0
	Rotator GetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xffffff8523219000 0x7a9c85c480
	Object* GetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xffffff8523219000 0x7a9c85c560
	FName GetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xffffff8523219000 0x7a9c85c640
	int GetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xffffff8523219000 0x7a9c85c720
	float GetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xffffff8523219000 0x7a9c85c800
	byte GetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xffffff8523219000 0x7a9c85c8e0
	class Object GetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xffffff8523219000 0x7a9c85c9c0
	bool GetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xffffff8523219000 0x7a9c8590e0
	Actor* GetBlackboardValueAsActor(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xffffff8523219000 0x7a9c8591c0
	void ClearBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xffffff8523219000 0x7a9c8592a0
	void ClearBlackboardValue(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xffffff8523219000 0x7a9c859380

--------------------------------
Class: BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x68, Size: 0x28] 0x7a9c8a2100

--------------------------------
Class: BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x68, Size: 0x8] 0x7a9c8a1880
	Actor* ActorOwner;//[Offset: 0x70, Size: 0x8] 0x7a9c8a1900
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x7a9c8a1980
	bool bShowEventDetails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1] 0x7a9c8a1a00
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0xffffff8523219000 0x7a9c85aea0
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0xffffff8523219000 0x7a9c85af80
	void ReceiveSearchStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xffffff8523219000 0x7a9c85b060
	void ReceiveSearchStart(Actor* OwnerActor);// 0xffffff8523219000 0x7a9c85b140
	void ReceiveDeactivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xffffff8523219000 0x7a9c85b220
	void ReceiveDeactivation(Actor* OwnerActor);// 0xffffff8523219000 0x7a9c85b300
	void ReceiveActivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xffffff8523219000 0x7a9c85b3e0
	void ReceiveActivation(Actor* OwnerActor);// 0xffffff8523219000 0x7a9c85b4c0
	bool IsServiceActive();// 0xffffff8523219000 0x7a9c85b5a0

--------------------------------
Class: BTService_DefaultFocus.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	byte FocusPriority;//[Offset: 0x90, Size: 0x1] 0x7a9c8a1800

--------------------------------
Class: BTService_RunEQS.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0x90, Size: 0x48] 0x7a9c8a1780

--------------------------------
Class: EQSParametrizedQueryExecutionRequest
	EnvQuery* QueryTemplate;//[Offset: 0x0, Size: 0x8] 0x7a9cb0a680
	AIDynamicParam[] QueryConfig;//[Offset: 0x8, Size: 0x10] 0x7a9cb0a900
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0x18, Size: 0x28] 0x7a9cb0a980
	byte RunMode;//[Offset: 0x40, Size: 0x1] 0x7a9cb0aa00
	bool bUseBBKeyForQueryTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x7a9cb0aa80

--------------------------------
Class: AIDynamicParam
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7a9ca69150
	enum ParamType;//[Offset: 0x8, Size: 0x1] 0x7a9cb0a780
	float Value;//[Offset: 0xc, Size: 0x4] 0x7a9ca691c0
	BlackboardKeySelector BBKey;//[Offset: 0x10, Size: 0x28] 0x7a9cb0a800

--------------------------------
Class: BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x70, Size: 0x28] 0x7a9c8a1580

--------------------------------
Class: BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x70, Size: 0x8] 0x7a9c8a2f00
	Actor* ActorOwner;//[Offset: 0x78, Size: 0x8] 0x7a9c8a2f80
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x7a9c8a3000
	void SetFinishOnMessageWithId(FName MessageName, int RequestID);// 0xffffff8523219000 0x7a9c85dde0
	void SetFinishOnMessage(FName MessageName);// 0xffffff8523219000 0x7a9c85dec0
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0xffffff8523219000 0x7a9c85dfa0
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0xffffff8523219000 0x7a9c85e080
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xffffff8523219000 0x7a9c85e160
	void ReceiveExecute(Actor* OwnerActor);// 0xffffff8523219000 0x7a9c85e240
	void ReceiveAbortAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xffffff8523219000 0x7a9c85e320
	void ReceiveAbort(Actor* OwnerActor);// 0xffffff8523219000 0x7a9c85e400
	bool IsTaskExecuting();// 0xffffff8523219000 0x7a9c85e4e0
	bool IsTaskAborting();// 0xffffff8523219000 0x7a9c85e5c0
	void FinishExecute(bool bSuccess);// 0xffffff8523219000 0x7a9c85e6a0
	void FinishAbort();// 0xffffff8523219000 0x7a9c85adc0

--------------------------------
Class: BTTask_FinishWithResult.BTTaskNode.BTNode.Object
	byte Result;//[Offset: 0x69, Size: 0x1] 0x7a9c8a2e80

--------------------------------
Class: BTTask_GameplayTaskBase.BTTaskNode.BTNode.Object
	bool bWaitForGameplayTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x7a9c8a2e00

--------------------------------
Class: BTTask_MakeNoise.BTTaskNode.BTNode.Object
	float Loudnes;//[Offset: 0x6c, Size: 0x4] 0x7a9c883340

--------------------------------
Class: BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x98, Size: 0x4] 0x7a9c883260
	class NavigationQueryFilter* FilterClass;//[Offset: 0xa0, Size: 0x8] 0x7a9c8a2900
	float ObservedBlackboardValueTolerance;//[Offset: 0xa8, Size: 0x4] 0x7a9c8832d0
	bool bObserveBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x7a9c8a2980
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x7a9c8a2a00
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1] 0x7a9c8a2a80
	bool bTrackMovingGoal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xac, Size: 0x1] 0x7a9c8a2b00
	bool bProjectGoalLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xac, Size: 0x1] 0x7a9c8a2b80
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xac, Size: 0x1] 0x7a9c8a2c00
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xac, Size: 0x1] 0x7a9c8a2c80
	bool bStopOnOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xac, Size: 0x1] 0x7a9c8a2d00
	bool bStopOnOverlapNeedsUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad, Size: 0x1] 0x7a9c8a2d80

--------------------------------
Class: BTTask_MoveDirectlyToward.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool bDisablePathUpdateOnGoalLocationChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xae, Size: 0x1] 0x7a9c8a2780
	bool bProjectVectorGoalToNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xae, Size: 0x1] 0x7a9c8a2800
	bool bUpdatedDeprecatedProperties;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xae, Size: 0x1] 0x7a9c8a2880

--------------------------------
Class: BTTask_PawnActionBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_PlayAnimation.BTTaskNode.BTNode.Object
	AnimationAsset* AnimationToPlay;//[Offset: 0x70, Size: 0x8] 0x7a9c8a2500
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x7a9c8a2580
	bool bNonBlocking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x7a9c8a2600
	BehaviorTreeComponent* MyOwnerComp;//[Offset: 0x80, Size: 0x8] 0x7a9c8a2680
	SkeletalMeshComponent* CachedSkelMesh;//[Offset: 0x88, Size: 0x8] 0x7a9c8a2700

--------------------------------
Class: BTTask_PlaySound.BTTaskNode.BTNode.Object
	SoundCue* SoundToPlay;//[Offset: 0x70, Size: 0x8] 0x7a9c8a2480

--------------------------------
Class: BTTask_PushPawnAction.BTTask_PawnActionBase.BTTaskNode.BTNode.Object
	PawnAction* Action;//[Offset: 0x70, Size: 0x8] 0x7a9c8a2400

--------------------------------
Class: BTTask_RotateToFaceBBEntry.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float Precision;//[Offset: 0x98, Size: 0x4] 0x7a9c8831f0

--------------------------------
Class: BTTask_RunBehavior.BTTaskNode.BTNode.Object
	BehaviorTree* BehaviorAsset;//[Offset: 0x70, Size: 0x8] 0x7a9c8a2380

--------------------------------
Class: BTTask_RunBehaviorDynamic.BTTaskNode.BTNode.Object
	GameplayTag InjectionTag;//[Offset: 0x6c, Size: 0x8] 0x7a9c8a2200
	BehaviorTree* DefaultBehaviorAsset;//[Offset: 0x78, Size: 0x8] 0x7a9c8a2280
	BehaviorTree* BehaviorAsset;//[Offset: 0x80, Size: 0x8] 0x7a9c8a2300

--------------------------------
Class: BTTask_RunEQSQuery.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	EnvQuery* QueryTemplate;//[Offset: 0x98, Size: 0x8] 0x7a9c8a3e80
	EnvNamedValue[] QueryParams;//[Offset: 0xa0, Size: 0x10] 0x7a9c8a3f80
	AIDynamicParam[] QueryConfig;//[Offset: 0xb0, Size: 0x10] 0x7a9c8a4080
	byte RunMode;//[Offset: 0xc0, Size: 0x1] 0x7a9c8a4100
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0xc8, Size: 0x28] 0x7a9c8a4180
	bool bUseBBKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x7a9c8a4200
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0xf8, Size: 0x48] 0x7a9c8a2180

--------------------------------
Class: EnvNamedValue
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7a9ca6a810
	enum ParamType;//[Offset: 0x8, Size: 0x1] 0x7a9cb0bc00
	float Value;//[Offset: 0xc, Size: 0x4] 0x7a9ca6a880

--------------------------------
Class: BTTask_SetTagCooldown.BTTaskNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x6c, Size: 0x8] 0x7a9c8a3d80
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x7a9c8a3e00
	float CooldownDuration;//[Offset: 0x78, Size: 0x4] 0x7a9c883180

--------------------------------
Class: BTTask_Wait.BTTaskNode.BTNode.Object
	float WaitTime;//[Offset: 0x6c, Size: 0x4] 0x7a9c8830a0
	float RandomDeviation;//[Offset: 0x70, Size: 0x4] 0x7a9c883110

--------------------------------
Class: BTTask_WaitBlackboardTime.BTTask_Wait.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x78, Size: 0x28] 0x7a9c8a3d00

--------------------------------
Class: CrowdAgentInterface.Interface.Object

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x2a8, Size: 0x8] 0x7a9c8a3680
	Vector CrowdAgentMoveDirection;//[Offset: 0x2b0, Size: 0xc] 0x7a9c8a3700
	void SuspendCrowdSteering(bool bSuspend);// 0xffffff8523219000 0x7a9c85d980

--------------------------------
Class: CrowdManager.CrowdManagerBase.Object
	NavigationData* MyNavData;//[Offset: 0x28, Size: 0x8] 0x7a9c8a3380
	CrowdAvoidanceConfig[] AvoidanceConfig;//[Offset: 0x30, Size: 0x10] 0x7a9c8a3480
	CrowdAvoidanceSamplingPattern[] SamplingPatterns;//[Offset: 0x40, Size: 0x10] 0x7a9c8a3580
	int MaxAgents;//[Offset: 0x50, Size: 0x4] 0x7a9c882d20
	float MaxAgentRadius;//[Offset: 0x54, Size: 0x4] 0x7a9c882d90
	int MaxAvoidedAgents;//[Offset: 0x58, Size: 0x4] 0x7a9c882e00
	int MaxAvoidedWalls;//[Offset: 0x5c, Size: 0x4] 0x7a9c882e70
	float NavmeshCheckInterval;//[Offset: 0x60, Size: 0x4] 0x7a9c882ee0
	float PathOptimizationInterval;//[Offset: 0x64, Size: 0x4] 0x7a9c882f50
	float SeparationDirClamp;//[Offset: 0x68, Size: 0x4] 0x7a9c882fc0
	float PathOffsetRadiusMultiplier;//[Offset: 0x6c, Size: 0x4] 0x7a9c883030
	bool bResolveCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x70, Size: 0x1] 0x7a9c8a3600

--------------------------------
Class: CrowdAvoidanceConfig
	float VelocityBias;//[Offset: 0x0, Size: 0x4] 0x7a9ca69230
	float DesiredVelocityWeight;//[Offset: 0x4, Size: 0x4] 0x7a9ca692a0
	float CurrentVelocityWeight;//[Offset: 0x8, Size: 0x4] 0x7a9ca69310
	float SideBiasWeight;//[Offset: 0xc, Size: 0x4] 0x7a9ca69380
	float ImpactTimeWeight;//[Offset: 0x10, Size: 0x4] 0x7a9ca693f0
	float ImpactTimeRange;//[Offset: 0x14, Size: 0x4] 0x7a9ca69460
	byte CustomPatternIdx;//[Offset: 0x18, Size: 0x1] 0x7a9cb0ad00
	byte AdaptiveDivisions;//[Offset: 0x19, Size: 0x1] 0x7a9cb0ad80
	byte AdaptiveRings;//[Offset: 0x1a, Size: 0x1] 0x7a9cb0ae00
	byte AdaptiveDepth;//[Offset: 0x1b, Size: 0x1] 0x7a9cb0ae80

--------------------------------
Class: CrowdAvoidanceSamplingPattern
	float[] Angles;//[Offset: 0x0, Size: 0x10] 0x7a9cb0af00
	float[] Radii;//[Offset: 0x10, Size: 0x10] 0x7a9cb0af80

--------------------------------
Class: DetourCrowdAIController.AIController.Controller.Actor.Object

--------------------------------
Class: EnvQueryContext_BlueprintBase.EnvQueryContext.Object
	void ProvideSingleLocation(Object* QuerierObject, Actor* QuerierActor, out Vector ResultingLocation);// 0xffffff8523219000 0x7a9c85d600
	void ProvideSingleActor(Object* QuerierObject, Actor* QuerierActor, out Actor* ResultingActor);// 0xffffff8523219000 0x7a9c85d6e0
	void ProvideLocationsSet(Object* QuerierObject, Actor* QuerierActor, out Vector[] ResultingLocationSet);// 0xffffff8523219000 0x7a9c85d7c0
	void ProvideActorsSet(Object* QuerierObject, Actor* QuerierActor, out Actor*[] ResultingActorsSet);// 0xffffff8523219000 0x7a9c85d8a0

--------------------------------
Class: EnvQueryContext_Item.EnvQueryContext.Object

--------------------------------
Class: EnvQueryContext_Querier.EnvQueryContext.Object

--------------------------------
Class: EnvQueryDebugHelpers.Object

--------------------------------
Class: EnvQueryGenerator_ActorsOfClass.EnvQueryGenerator.EnvQueryNode.Object
	class Actor* SearchedActorClass;//[Offset: 0x50, Size: 0x8] 0x7a9c8a4980
	AIDataProviderBoolValue GenerateOnlyActorsInRadius;//[Offset: 0x58, Size: 0x30] 0x7a9c8a4a00
	AIDataProviderFloatValue SearchRadius;//[Offset: 0x88, Size: 0x30] 0x7a9c8a4a80
	class EnvQueryContext* SearchCenter;//[Offset: 0xb8, Size: 0x8] 0x7a9c8a4b00

--------------------------------
Class: EnvQueryGenerator_BlueprintBase.EnvQueryGenerator.EnvQueryNode.Object
	FText GeneratorsActionDescription;//[Offset: 0x50, Size: 0x18] 0x7a9c882b60
	class EnvQueryContext* Context;//[Offset: 0x68, Size: 0x8] 0x7a9c8a4600
	class EnvQueryItemType* GeneratedItemType;//[Offset: 0x70, Size: 0x8] 0x7a9c8a4680
	Object* GetQuerier();// 0xffffff8523219000 0x7a9c85d280
	void DoItemGeneration(out const Vector[] ContextLocations);// 0xffffff8523219000 0x7a9c85d360
	void AddGeneratedVector(Vector GeneratedVector);// 0xffffff8523219000 0x7a9c85d440
	void AddGeneratedActor(Actor* GeneratedActor);// 0xffffff8523219000 0x7a9c85d520

--------------------------------
Class: EnvQueryGenerator_Composite.EnvQueryGenerator.EnvQueryNode.Object
	EnvQueryGenerator*[] Generators;//[Offset: 0x50, Size: 0x10] 0x7a9c8a4380
	bool bAllowDifferentItemTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7a9c8a4400
	bool bHasMatchingItemType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x7a9c8a4480
	class EnvQueryItemType* ForcedItemType;//[Offset: 0x68, Size: 0x8] 0x7a9c8a4500

--------------------------------
Class: EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x50, Size: 0x30] 0x7a9c8a4280

--------------------------------
Class: EnvTraceData
	int VersionNum;//[Offset: 0x0, Size: 0x4] 0x7a9ca6a8f0
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x8, Size: 0x8] 0x7a9cb0bf00
	float ProjectDown;//[Offset: 0x10, Size: 0x4] 0x7a9ca6a960
	float ProjectUp;//[Offset: 0x14, Size: 0x4] 0x7a9ca6a9d0
	float ExtentX;//[Offset: 0x18, Size: 0x4] 0x7a9ca6aa40
	float ExtentY;//[Offset: 0x1c, Size: 0x4] 0x7a9ca6aab0
	float ExtentZ;//[Offset: 0x20, Size: 0x4] 0x7a9ca6ab20
	float PostProjectionVerticalOffset;//[Offset: 0x24, Size: 0x4] 0x7a9ca6ab90
	byte TraceChannel;//[Offset: 0x28, Size: 0x1] 0x7a9cb0bf80
	byte SerializedChannel;//[Offset: 0x29, Size: 0x1] 0x7a9cb0c000
	byte TraceShape;//[Offset: 0x2a, Size: 0x1] 0x7a9cb0c080
	byte TraceMode;//[Offset: 0x2b, Size: 0x1] 0x7a9cb0c100
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x7a9cb0c180
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1] 0x7a9cb0c200
	bool bCanTraceOnNavMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1] 0x7a9cb0c280
	bool bCanTraceOnGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 0x1] 0x7a9cb0c300
	bool bCanDisableTrace;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 0x1] 0x7a9cb0c380
	bool bCanProjectDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 0x1] 0x7a9cb0c400

--------------------------------
Class: EnvQueryGenerator_Cone.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue AlignedPointsDistance;//[Offset: 0x80, Size: 0x30] 0x7a9c8a6080
	AIDataProviderFloatValue ConeDegrees;//[Offset: 0xb0, Size: 0x30] 0x7a9c8a6100
	AIDataProviderFloatValue AngleStep;//[Offset: 0xe0, Size: 0x30] 0x7a9c8a6180
	AIDataProviderFloatValue Range;//[Offset: 0x110, Size: 0x30] 0x7a9c8a6200
	class EnvQueryContext* CenterActor;//[Offset: 0x140, Size: 0x8] 0x7a9c8a6280
	bool bIncludeContextLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x7a9c8a6300

--------------------------------
Class: EnvQueryGenerator_CurrentLocation.EnvQueryGenerator.EnvQueryNode.Object
	class EnvQueryContext* QueryContext;//[Offset: 0x50, Size: 0x8] 0x7a9c8a6000

--------------------------------
Class: EnvQueryGenerator_Donut.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue InnerRadius;//[Offset: 0x80, Size: 0x30] 0x7a9c8a5b80
	AIDataProviderFloatValue OuterRadius;//[Offset: 0xb0, Size: 0x30] 0x7a9c8a5c00
	AIDataProviderIntValue NumberOfRings;//[Offset: 0xe0, Size: 0x30] 0x7a9c8a5c80
	AIDataProviderIntValue PointsPerRing;//[Offset: 0x110, Size: 0x30] 0x7a9c8a5d00
	EnvDirection ArcDirection;//[Offset: 0x140, Size: 0x20] 0x7a9c8a5d80
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x160, Size: 0x30] 0x7a9c8a5e00
	bool bUseSpiralPattern;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1] 0x7a9c8a5e80
	class EnvQueryContext* Center;//[Offset: 0x198, Size: 0x8] 0x7a9c8a5f00
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a0, Size: 0x1] 0x7a9c8a5f80

--------------------------------
Class: AIDataProviderIntValue.AIDataProviderTypedValue.AIDataProviderValue
	int DefaultValue;//[Offset: 0x28, Size: 0x4] 0x7a9ca698c0

--------------------------------
Class: EnvDirection
	class EnvQueryContext* LineFrom;//[Offset: 0x0, Size: 0x8] 0x7a9cb0bc80
	class EnvQueryContext* LineTo;//[Offset: 0x8, Size: 0x8] 0x7a9cb0bd00
	class EnvQueryContext* Rotation;//[Offset: 0x10, Size: 0x8] 0x7a9cb0bd80
	byte DirMode;//[Offset: 0x18, Size: 0x1] 0x7a9cb0be00

--------------------------------
Class: EnvQueryGenerator_OnCircle.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue CircleRadius;//[Offset: 0x80, Size: 0x30] 0x7a9c8a5580
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xb0, Size: 0x30] 0x7a9c8a5600
	AIDataProviderIntValue NumberOfPoints;//[Offset: 0xe0, Size: 0x30] 0x7a9c8a5680
	enum PointOnCircleSpacingMethod;//[Offset: 0x110, Size: 0x1] 0x7a9c8a5780
	EnvDirection ArcDirection;//[Offset: 0x118, Size: 0x20] 0x7a9c8a5800
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x138, Size: 0x30] 0x7a9c8a5880
	float AngleRadians;//[Offset: 0x168, Size: 0x4] 0x7a9c8847d0
	class EnvQueryContext* CircleCenter;//[Offset: 0x170, Size: 0x8] 0x7a9c8a5900
	bool bIgnoreAnyContextActorsWhenGeneratingCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1] 0x7a9c8a5980
	AIDataProviderFloatValue CircleCenterZOffset;//[Offset: 0x180, Size: 0x30] 0x7a9c8a5a00
	EnvTraceData TraceData;//[Offset: 0x1b0, Size: 0x30] 0x7a9c8a5a80
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e0, Size: 0x1] 0x7a9c8a5b00

--------------------------------
Class: EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue GridSize;//[Offset: 0x80, Size: 0x30] 0x7a9c8a5400
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xb0, Size: 0x30] 0x7a9c8a5480
	class EnvQueryContext* GenerateAround;//[Offset: 0xe0, Size: 0x8] 0x7a9c8a5500

--------------------------------
Class: EnvQueryGenerator_PathingGrid.EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderBoolValue PathToItem;//[Offset: 0xe8, Size: 0x30] 0x7a9c8a7380
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x118, Size: 0x8] 0x7a9c8a5300
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x120, Size: 0x30] 0x7a9c8a5380

--------------------------------
Class: EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Actor.EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Direction.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Point.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest_Distance.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x1b9, Size: 0x1] 0x7a9c8a8200
	class EnvQueryContext* DistanceTo;//[Offset: 0x1c0, Size: 0x8] 0x7a9c8a8280

--------------------------------
Class: EnvQueryTest_Dot.EnvQueryTest.EnvQueryNode.Object
	EnvDirection LineA;//[Offset: 0x1c0, Size: 0x20] 0x7a9c8a7f80
	EnvDirection LineB;//[Offset: 0x1e0, Size: 0x20] 0x7a9c8a8000
	enum TestMode;//[Offset: 0x200, Size: 0x1] 0x7a9c8a8100
	bool bAbsoluteValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1] 0x7a9c8a8180

--------------------------------
Class: EnvQueryTest_GameplayTags.EnvQueryTest.EnvQueryNode.Object
	GameplayTagQuery TagQueryToMatch;//[Offset: 0x1c0, Size: 0x48] 0x7a9c8a7d00
	bool bUpdatedToUseQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1] 0x7a9c8a7d80
	enum TagsToMatch;//[Offset: 0x209, Size: 0x1] 0x7a9c8a7e80
	GameplayTagContainer GameplayTags;//[Offset: 0x210, Size: 0x20] 0x7a9c8a7f00

--------------------------------
Class: EnvQueryTest_Overlap.EnvQueryTest.EnvQueryNode.Object
	EnvOverlapData OverlapData;//[Offset: 0x1bc, Size: 0x1c] 0x7a9c8a7c80

--------------------------------
Class: EnvOverlapData
	float ExtentX;//[Offset: 0x0, Size: 0x4] 0x7a9ca6ac00
	float ExtentY;//[Offset: 0x4, Size: 0x4] 0x7a9ca6ac70
	float ExtentZ;//[Offset: 0x8, Size: 0x4] 0x7a9ca6ace0
	Vector ShapeOffset;//[Offset: 0xc, Size: 0xc] 0x7a9cb0c480
	byte OverlapChannel;//[Offset: 0x18, Size: 0x1] 0x7a9cb0c500
	byte OverlapShape;//[Offset: 0x19, Size: 0x1] 0x7a9cb0c580
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1] 0x7a9cb0c600
	bool bOverlapComplex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a, Size: 0x1] 0x7a9cb0a580

--------------------------------
Class: EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x1b9, Size: 0x1] 0x7a9c8a7980
	class EnvQueryContext* Context;//[Offset: 0x1c0, Size: 0x8] 0x7a9c8a7a00
	AIDataProviderBoolValue PathFromContext;//[Offset: 0x1c8, Size: 0x30] 0x7a9c8a7a80
	AIDataProviderBoolValue SkipUnreachable;//[Offset: 0x1f8, Size: 0x30] 0x7a9c8a7b00
	class NavigationQueryFilter* FilterClass;//[Offset: 0x228, Size: 0x8] 0x7a9c8a7c00

--------------------------------
Class: EnvQueryTest_PathfindingBatch.EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x230, Size: 0x30] 0x7a9c8a7900

--------------------------------
Class: EnvQueryTest_Project.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x1c0, Size: 0x30] 0x7a9c8a7880

--------------------------------
Class: EnvQueryTest_Random.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: EnvQueryTest_Trace.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData TraceData;//[Offset: 0x1c0, Size: 0x30] 0x7a9c8a7600
	AIDataProviderBoolValue TraceFromContext;//[Offset: 0x1f0, Size: 0x30] 0x7a9c8a7680
	AIDataProviderFloatValue ItemHeightOffset;//[Offset: 0x220, Size: 0x30] 0x7a9c8a7700
	AIDataProviderFloatValue ContextHeightOffset;//[Offset: 0x250, Size: 0x30] 0x7a9c8a7780
	class EnvQueryContext* Context;//[Offset: 0x280, Size: 0x8] 0x7a9c8a7800

--------------------------------
Class: EnvQueryTypes.Object

--------------------------------
Class: EQSQueryResultSourceInterface.Interface.Object

--------------------------------
Class: EQSRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EQSTestingPawn.Character.Pawn.Actor.Object
	EnvQuery* QueryTemplate;//[Offset: 0x750, Size: 0x8] 0x7a9c8a9000
	EnvNamedValue[] QueryParams;//[Offset: 0x758, Size: 0x10] 0x7a9c8a9100
	AIDynamicParam[] QueryConfig;//[Offset: 0x768, Size: 0x10] 0x7a9c8a9200
	float TimeLimitPerStep;//[Offset: 0x778, Size: 0x4] 0x7a9c8844c0
	int StepToDebugDraw;//[Offset: 0x77c, Size: 0x4] 0x7a9c884530
	enum HighlightMode;//[Offset: 0x780, Size: 0x1] 0x7a9c8a9300
	bool bDrawLabels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x781, Size: 0x1] 0x7a9c8a9380
	bool bDrawFailedItems;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x781, Size: 0x1] 0x7a9c8a9400
	bool bReRunQueryOnlyOnFinishedMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x781, Size: 0x1] 0x7a9c8a9480
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x781, Size: 0x1] 0x7a9c8a7400
	bool bTickDuringGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x781, Size: 0x1] 0x7a9c8a7480
	byte QueryingMode;//[Offset: 0x782, Size: 0x1] 0x7a9c8a7500
	NavAgentProperties NavAgentProperties;//[Offset: 0x788, Size: 0x30] 0x7a9c8a7580

--------------------------------
Class: GenericTeamAgentInterface.Interface.Object

--------------------------------
Class: GridPathAIController.AIController.Controller.Actor.Object

--------------------------------
Class: GridPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	NavLocalGridManager* GridManager;//[Offset: 0x2a0, Size: 0x8] 0x7a9c8a8f80

--------------------------------
Class: NavFilter_AIControllerDefault.NavigationQueryFilter.Object

--------------------------------
Class: NavLinkProxy.Actor.Object
	NavigationLink[] PointLinks;//[Offset: 0x340, Size: 0x10] 0x7a9c8a8980
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x350, Size: 0x10] 0x7a9c8a8a80
	NavLinkCustomComponent* SmartLinkComp;//[Offset: 0x360, Size: 0x8] 0x7a9c8a8b00
	bool bSmartLinkIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1] 0x7a9c8a8b80
	delegate OnSmartLinkReached;//[Offset: 0x370, Size: 0x10] 0x7a9c8a8c00
	void SetSmartLinkEnabled(bool bEnabled);// 0xffffff8523219000 0x7a9c85cd40
	void ResumePathFollowing(Actor* Agent);// 0xffffff8523219000 0x7a9c85ce20
	void ReceiveSmartLinkReached(Actor* Agent, out const Vector Destination);// 0xffffff8523219000 0x7a9c85cf00
	bool IsSmartLinkEnabled();// 0xffffff8523219000 0x7a9c85cfe0
	bool HasMovingAgents();// 0xffffff8523219000 0x7a9c85d0c0

--------------------------------
Class: PathFollowingManager.Object

--------------------------------
Class: PawnAction_BlueprintBase.PawnAction.Object
	void ActionTick(Pawn* ControlledPawn, float DeltaSeconds);// 0xffffff8523219000 0x7a9c85f200
	void ActionStart(Pawn* ControlledPawn);// 0xffffff8523219000 0x7a9c85f2e0
	void ActionResume(Pawn* ControlledPawn);// 0xffffff8523219000 0x7a9c85f3c0
	void ActionPause(Pawn* ControlledPawn);// 0xffffff8523219000 0x7a9c85f4a0
	void ActionFinished(Pawn* ControlledPawn, byte WithResult);// 0xffffff8523219000 0x7a9c85f580

--------------------------------
Class: PawnAction_Move.PawnAction.Object
	Actor* GoalActor;//[Offset: 0x98, Size: 0x8] 0x7a9c8aa580
	Vector GoalLocation;//[Offset: 0xa0, Size: 0xc] 0x7a9c8aa600
	float AcceptableRadius;//[Offset: 0xac, Size: 0x4] 0x7a9c883ce0
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb0, Size: 0x8] 0x7a9c8aa680
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x7a9c8aa700
	bool bFinishOnOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1] 0x7a9c8aa780
	bool bUsePathfinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 0x1] 0x7a9c8aa800
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb8, Size: 0x1] 0x7a9c8aa880
	bool bProjectGoalToNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb8, Size: 0x1] 0x7a9c8aa900
	bool bUpdatePathToGoal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb8, Size: 0x1] 0x7a9c8aa980
	bool bAbortChildActionOnPathChange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb8, Size: 0x1] 0x7a9c8aaa00

--------------------------------
Class: PawnAction_Repeat.PawnAction.Object
	PawnAction* ActionToRepeat;//[Offset: 0x98, Size: 0x8] 0x7a9c8ac500
	PawnAction* RecentActionCopy;//[Offset: 0xa0, Size: 0x8] 0x7a9c8ac580
	byte ChildFailureHandlingMode;//[Offset: 0xa8, Size: 0x1] 0x7a9c8ac600

--------------------------------
Class: PawnAction_Sequence.PawnAction.Object
	PawnAction*[] ActionSequence;//[Offset: 0x98, Size: 0x10] 0x7a9c8ac380
	byte ChildFailureHandlingMode;//[Offset: 0xa8, Size: 0x1] 0x7a9c8ac400
	PawnAction* RecentActionCopy;//[Offset: 0xb0, Size: 0x8] 0x7a9c8ac480

--------------------------------
Class: PawnAction_Wait.PawnAction.Object
	float TimeToWait;//[Offset: 0x94, Size: 0x4] 0x7a9c883c70

--------------------------------
Class: PawnSensingComponent.ActorComponent.Object
	float HearingThreshold;//[Offset: 0xf8, Size: 0x4] 0x7aa083a650
	float LOSHearingThreshold;//[Offset: 0xfc, Size: 0x4] 0x7aa083a6c0
	float SightRadius;//[Offset: 0x100, Size: 0x4] 0x7aa083a730
	float SensingInterval;//[Offset: 0x104, Size: 0x4] 0x7aa083a7a0
	float HearingMaxSoundAge;//[Offset: 0x108, Size: 0x4] 0x7aa083a810
	bool bEnableSensingUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10c, Size: 0x1] 0x7aa089b100
	bool bOnlySensePlayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10c, Size: 0x1] 0x7aa089b180
	bool bSeePawns;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10c, Size: 0x1] 0x7aa089b200
	bool bHearNoises;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10c, Size: 0x1] 0x7aa089b280
	delegate OnSeePawn;//[Offset: 0x118, Size: 0x10] 0x7aa089b300
	delegate OnHearNoise;//[Offset: 0x128, Size: 0x10] 0x7aa089b380
	float PeripheralVisionAngle;//[Offset: 0x138, Size: 0x4] 0x7aa083a880
	float PeripheralVisionCosine;//[Offset: 0x13c, Size: 0x4] 0x7aa083a8f0
	void SetSensingUpdatesEnabled(const bool bEnabled);// 0xffffff8523219000 0x7aa0887a20
	void SetSensingInterval(const float NewSensingInterval);// 0xffffff8523219000 0x7aa0887b00
	void SetPeripheralVisionAngle(const float NewPeripheralVisionAngle);// 0xffffff8523219000 0x7aa0887be0
	void SeePawnDelegate__DelegateSignature(Pawn* Pawn);// 0xffffff8523219000 0x7aa0887cc0
	void HearNoiseDelegate__DelegateSignature(Pawn* Instigator, out const Vector Location, float Volume);// 0xffffff8523219000 0x7aa0887da0
	float GetPeripheralVisionCosine();// 0xffffff8523219000 0x7aa0887e80
	float GetPeripheralVisionAngle();// 0xffffff8523219000 0x7aa0887f60

--------------------------------
Class: VisualLoggerExtension.Object

--------------------------------
