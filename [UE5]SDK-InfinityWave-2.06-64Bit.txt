Class: Package.Object

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0xb8f1ab4 0x788a3cc1e0

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: AndroidDeviceProfileMatchingRules.Object
	ProfileMatch[] MatchProfile;//[Offset: 0x28, Size: 0x10] 0x788a496e60

--------------------------------
Class: ProfileMatch
	FString Profile;//[Offset: 0x0, Size: 0x10] 0x788a4d6980
	ProfileMatchItem[] Match;//[Offset: 0x10, Size: 0x10] 0x788a496f00

--------------------------------
Class: ProfileMatchItem
	byte SourceType;//[Offset: 0x0, Size: 0x1] 0x788a4d6700
	byte CompareType;//[Offset: 0x1, Size: 0x1] 0x788a4d6680
	FString MatchString;//[Offset: 0x8, Size: 0x10] 0x788a4d6600

--------------------------------
Class: GCObjectReferencer.Object

--------------------------------
Class: AssetRegistryImpl.Object

--------------------------------
Class: DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: SparseDelegateFunction.DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: TextBuffer.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: LinkerPlaceholderExportObject.Object

--------------------------------
Class: ObjectRedirector.Object

--------------------------------
Class: ArrayProperty.Property.Field.Object

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: ClassProperty.ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: Int16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: LazyObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: MulticastInlineDelegateProperty.MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: SetProperty.Property.Field.Object

--------------------------------
Class: StrProperty.Property.Field.Object

--------------------------------
Class: UInt32Property.NumericProperty.Property.Field.Object

--------------------------------
Class: TextProperty.Property.Field.Object

--------------------------------
Class: MulticastInlineDelegatePropertyWrapper.MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: PropertyWrapper.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30] 0x787398bc00
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x787398bc80
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x787398bd00
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1] 0x787398bd80
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1] 0x787398be00
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1] 0x787398be80
	bool bCallPreReplication;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1] 0x787398bf00
	bool bCallPreReplicationForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1] 0x787398bf80
	bool bHidden;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1] 0x787398c000
	bool bTearOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x787398c080
	bool bForceNetAddressable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x787398c100
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x787398c180
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1] 0x787398c200
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1] 0x787398c280
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1] 0x787398c300
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1] 0x787398c380
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1] 0x787398c400
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1] 0x787398c480
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1] 0x787398c500
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1] 0x787398c580
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1] 0x787398c600
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1] 0x787398a580
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1] 0x787398a600
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1] 0x787398a680
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1] 0x787398a700
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1] 0x787398a780
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x787398a800
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x787398a880
	bool bReplicates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b, Size: 0x1] 0x787398a900
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1] 0x787398a980
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5b, Size: 0x1] 0x787398aa00
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5c, Size: 0x1] 0x787398aa80
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5c, Size: 0x1] 0x787398ab00
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 0x1] 0x787376ccc0
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5f, Size: 0x1] 0x787376cd60
	byte RemoteRole;//[Offset: 0x60, Size: 0x1] 0x787398ac80
	RepMovement ReplicatedMovement;//[Offset: 0x68, Size: 0x68] 0x787398b180
	float InitialLifeSpan;//[Offset: 0xd0, Size: 0x4] 0x787398b200
	float CustomTimeDilation;//[Offset: 0xd4, Size: 0x4] 0x787398b280
	RepAttachment AttachmentReplication;//[Offset: 0xe0, Size: 0x60] 0x7873989500
	Actor* Owner;//[Offset: 0x140, Size: 0x8] 0x7873989580
	FName NetDriverName;//[Offset: 0x148, Size: 0x8] 0x7873989600
	byte Role;//[Offset: 0x150, Size: 0x1] 0x7873989680
	byte NetDormancy;//[Offset: 0x151, Size: 0x1] 0x7873989700
	enum SpawnCollisionHandlingMethod;//[Offset: 0x152, Size: 0x1] 0x787376a6a0
	byte AutoReceiveInput;//[Offset: 0x153, Size: 0x1] 0x7873989800
	int InputPriority;//[Offset: 0x154, Size: 0x4] 0x7873989880
	InputComponent* InputComponent;//[Offset: 0x158, Size: 0x8] 0x7873989900
	float NetCullDistanceSquared;//[Offset: 0x160, Size: 0x4] 0x7873989980
	int NetTag;//[Offset: 0x164, Size: 0x4] 0x7873989a00
	float NetUpdateFrequency;//[Offset: 0x168, Size: 0x4] 0x7873989a80
	float MinNetUpdateFrequency;//[Offset: 0x16c, Size: 0x4] 0x7873989b00
	float NetPriority;//[Offset: 0x170, Size: 0x4] 0x7873989b80
	Pawn* Instigator;//[Offset: 0x178, Size: 0x8] 0x7873989c00
	Actor*[] Children;//[Offset: 0x180, Size: 0x10] 0x787376a740
	SceneComponent* RootComponent;//[Offset: 0x190, Size: 0x8] 0x7873989d00
	int RayTracingGroupId;//[Offset: 0x1a0, Size: 0x4] 0x7873989d80
	FName[] Layers;//[Offset: 0x1a8, Size: 0x10] 0x787376a7e0
	ChildActorComponent* ParentComponent;//[Offset: 0x1b8, Size: 0x8] 0x7873989e80
	FName[] Tags;//[Offset: 0x1d8, Size: 0x10] 0x787376a880
	delegate OnTakeAnyDamage;//[Offset: 0x1e8, Size: 0x1] 0x7873989f80
	delegate OnTakePointDamage;//[Offset: 0x1e9, Size: 0x1] 0x787398a000
	delegate OnTakeRadialDamage;//[Offset: 0x1ea, Size: 0x1] 0x787398a080
	delegate OnActorBeginOverlap;//[Offset: 0x1eb, Size: 0x1] 0x787398a100
	delegate OnActorEndOverlap;//[Offset: 0x1ec, Size: 0x1] 0x787398a180
	delegate OnBeginCursorOver;//[Offset: 0x1ed, Size: 0x1] 0x787398a200
	delegate OnEndCursorOver;//[Offset: 0x1ee, Size: 0x1] 0x787398a280
	delegate OnClicked;//[Offset: 0x1ef, Size: 0x1] 0x787398a300
	delegate OnReleased;//[Offset: 0x1f0, Size: 0x1] 0x787398a380
	delegate OnInputTouchBegin;//[Offset: 0x1f1, Size: 0x1] 0x787398a400
	delegate OnInputTouchEnd;//[Offset: 0x1f2, Size: 0x1] 0x787398a480
	delegate OnInputTouchEnter;//[Offset: 0x1f3, Size: 0x1] 0x787398a500
	delegate OnInputTouchLeave;//[Offset: 0x1f4, Size: 0x1] 0x7873988480
	delegate OnActorHit;//[Offset: 0x1f5, Size: 0x1] 0x7873988500
	delegate OnDestroyed;//[Offset: 0x1f6, Size: 0x1] 0x7873988580
	delegate OnEndPlay;//[Offset: 0x1f7, Size: 0x1] 0x7873988600
	ActorComponent*[] InstanceComponents;//[Offset: 0x258, Size: 0x10] 0x787376a920
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x268, Size: 0x10] 0x787376a9c0
	bool WasRecentlyRendered(float Tolerance);// 0x10ac1108 0x787383cc60
	void UserConstructionScript();// 0xb8f1ab4 0x787383cd40
	void TearOff();// 0x10ac6408 0x787383ce20
	void SetTickGroup(byte NewTickGroup);// 0x10ac11bc 0x787383cf00
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x10ac1e98 0x787383cfe0
	void SetReplicates(bool bInReplicates);// 0x10ac628c 0x787383d0c0
	void SetReplicateMovement(bool bInReplicateMovement);// 0x10ac61d4 0x787383d1a0
	void SetRayTracingGroupId(int InRaytracingGroupId);// 0x10ac60bc 0x787383d280
	void SetOwner(Actor* NewOwner);// 0x10ac1904 0x787383d360
	void SetNetDormancy(byte NewDormancy);// 0x10ac178c 0x787383d440
	void SetLifeSpan(float InLifespan);// 0x10ac1bd0 0x787383d520
	void SetAutoDestroyWhenFinished(bool bVal);// 0x10ac6358 0x787383d600
	void SetActorTickInterval(float TickInterval);// 0x10ac1a04 0x787383d6e0
	void SetActorTickEnabled(bool bEnabled);// 0x10ac1ae4 0x787383d7c0
	void SetActorScale3D(Vector NewScale3D);// 0x10ac5024 0x787383d8a0
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x10ac33d0 0x787383d980
	void SetActorHiddenInGame(bool bNewHidden);// 0x10ac32e0 0x787383da60
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x10ac3230 0x787383db40
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x10ac1f80 0x787383dc20
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x10ac2030 0x787383dd00
	void ReceiveTick(float DeltaSeconds);// 0xb8f1ab4 0x787383dde0
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0xb8f1ab4 0x787383dec0
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0xb8f1ab4 0x787383dfa0
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0xb8f1ab4 0x787383e080
	void ReceiveEndPlay(byte EndPlayReason);// 0xb8f1ab4 0x787383e160
	void ReceiveDestroyed();// 0xb8f1ab4 0x787383e240
	void ReceiveBeginPlay();// 0xb8f1ab4 0x787383e320
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xb8f1ab4 0x787383e400
	void ReceiveActorOnReleased(Key ButtonReleased);// 0xb8f1ab4 0x787383e4e0
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0xb8f1ab4 0x787383e5c0
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0xb8f1ab4 0x787383e6a0
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0xb8f1ab4 0x787383adc0
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0xb8f1ab4 0x787383aea0
	void ReceiveActorOnClicked(Key ButtonPressed);// 0xb8f1ab4 0x787383af80
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0xb8f1ab4 0x787383b060
	void ReceiveActorEndCursorOver();// 0xb8f1ab4 0x787383b140
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0xb8f1ab4 0x787383b220
	void ReceiveActorBeginCursorOver();// 0xb8f1ab4 0x787383b300
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x10ac0fa8 0x787383b3e0
	void OnRep_ReplicateMovement();// 0x10ac6424 0x787383b4c0
	void OnRep_ReplicatedMovement();// 0x10ac19b4 0x787383b5a0
	void OnRep_Owner();// 0x10ac633c 0x787383b680
	void OnRep_Instigator();// 0x10ac6164 0x787383b760
	void OnRep_AttachmentReplication();// 0x10ac6180 0x787383b840
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x10ac08e4 0x787383b920
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x10ac14d0 0x787383ba00
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10ac40a8 0x787383bae0
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x10ac5320 0x787383bbc0
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10ac3478 0x787383bca0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10ac36a0 0x787383bd80
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10ac3898 0x787383be60
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10ac50cc 0x787383bf40
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10ac5838 0x787383c020
	void K2_OnReset();// 0xb8f1ab4 0x787383c100
	void K2_OnEndViewTarget(PlayerController* PC);// 0xb8f1ab4 0x787383c1e0
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0xb8f1ab4 0x787383c2c0
	SceneComponent* K2_GetRootComponent();// 0x10ac5468 0x787383c3a0
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x10ac0cf8 0x787383c480
	Rotator K2_GetActorRotation();// 0x10ac572c 0x787383c560
	Vector K2_GetActorLocation();// 0x10ac5a44 0x787383c640
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x10ac2328 0x787383c720
	void K2_DestroyActor();// 0x10ac31f4 0x787383c800
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x10ac28d0 0x787383c8e0
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x10ac2518 0x787383c9c0
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x10ac2740 0x78738390e0
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x10ac2af8 0x78738391c0
	void K2_AddActorWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10ac42dc 0x78738392a0
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10ac4504 0x7873839380
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10ac472c 0x7873839460
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10ac4924 0x7873839540
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10ac3a90 0x7873839620
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10ac3cb8 0x7873839700
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10ac3eb0 0x78738397e0
	bool IsOverlappingActor(const Actor* Other);// 0x10ac1834 0x78738398c0
	bool IsChildActor();// 0x10ac1740 0x78738399a0
	bool IsActorTickEnabled();// 0x10ac1aac 0x7873839a80
	bool IsActorBeingDestroyed();// 0x10ac1e44 0x7873839b60
	bool HasAuthority();// 0x10ac31d0 0x7873839c40
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x10ac4c7c 0x7873839d20
	Vector GetVelocity();// 0x10ac5428 0x7873839e00
	Transform GetTransform();// 0x10ac5a90 0x7873839ee0
	bool GetTickableWhenPaused();// 0x10ac1f48 0x7873839fc0
	float GetSquaredHorizontalDistanceTo(const Actor* OtherActor);// 0x10ac4d2c 0x787383a0a0
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x10ac4e8c 0x787383a180
	byte GetRemoteRole();// 0x10ac619c 0x787383a260
	int GetRayTracingGroupId();// 0x10ac6088 0x787383a340
	ChildActorComponent* GetParentComponent();// 0x10ac1600 0x787383a420
	Actor* GetParentActor();// 0x10ac15cc 0x787383a500
	Actor* GetOwner();// 0x10ac18e8 0x787383a5e0
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x10ac1c80 0x787383a6c0
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x10ac1d40 0x787383a7a0
	byte GetLocalRole();// 0x10ac61b8 0x787383a880
	float GetLifeSpan();// 0x10ac1b94 0x787383a960
	Transform GetLevelTransform();// 0x10ac1428 0x787383aa40
	Level* GetLevel();// 0x10ac149c 0x787383ab20
	Controller* GetInstigatorController();// 0x10ac5ad4 0x787383ac00
	Pawn* GetInstigator();// 0x10ac5b08 0x787383ace0
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x10ac5b3c 0x7873837400
	float GetInputAxisValue(const FName InputAxisName);// 0x10ac5e78 0x78738374e0
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x10ac5cdc 0x78738375c0
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x10ac4b1c 0x78738376a0
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x10ac4ddc 0x7873837780
	float GetGameTimeSinceCreation();// 0x10ac1e64 0x7873837860
	float GetDotProductTo(const Actor* OtherActor);// 0x10ac4bcc 0x7873837940
	float GetDistanceTo(const Actor* OtherActor);// 0x10ac4f3c 0x7873837a20
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x10ac0bb4 0x7873837b00
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x10ac0ab8 0x7873837be0
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x10ac0df4 0x7873837cc0
	FName GetAttachParentSocketName();// 0x10ac13c0 0x7873837da0
	Actor* GetAttachParentActor();// 0x10ac13f4 0x7873837e80
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray, bool bRecursivelyIncludeAttachedActors);// 0x10ac1264 0x7873837f60
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x10ac1634 0x7873838040
	Vector GetActorUpVector();// 0x10ac5684 0x7873838120
	float GetActorTimeDilation();// 0x10ac2240 0x7873838200
	float GetActorTickInterval();// 0x10ac19d0 0x78738382e0
	Vector GetActorScale3D();// 0x10ac4fec 0x78738383c0
	Vector GetActorRightVector();// 0x10ac5630 0x78738384a0
	Vector GetActorRelativeScale3D();// 0x10ac3398 0x7873838580
	Vector GetActorForwardVector();// 0x10ac56d8 0x7873838660
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x10ac0ea4 0x7873838740
	bool GetActorEnableCollision();// 0x10ac3210 0x7873838820
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x10ac5484 0x7873838900
	void ForceNetUpdate();// 0x10ac10ec 0x78738389e0
	void FlushNetDormancy();// 0x10ac1778 0x7873838ac0
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0x10ac2c88 0x7873838ba0
	void EnableInput(PlayerController* PlayerController);// 0x10ac5fd8 0x7873838c80
	void DisableInput(PlayerController* PlayerController);// 0x10ac5f28 0x7873838d60
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x10ac2468 0x7873838e40
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x10ac20e0 0x7873838f20
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x10ac2190 0x7873839000
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0x10ac2df4 0x7873835720
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext, bool bDeferredFinish);// 0x10ac2fbc 0x7873835800
	bool ActorHasTag(FName Tag);// 0x10ac2274 0x78738358e0

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1] 0x788ab7f780
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1] 0x788ab7f700
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x788ab7f680
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1] 0x788ab7f600
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1] 0x788ab7f580
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1] 0x788ab7f500
	float TickInterval;//[Offset: 0xc, Size: 0x4] 0x788ab7f480

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0x18] 0x787398ad00
	Vector AngularVelocity;//[Offset: 0x18, Size: 0x18] 0x787398ad80
	Vector Location;//[Offset: 0x30, Size: 0x18] 0x787398ae00
	Rotator Rotation;//[Offset: 0x48, Size: 0x18] 0x787398ae80
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x787398af00
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x787398af80
	enum LocationQuantizationLevel;//[Offset: 0x61, Size: 0x1] 0x787376ce00
	enum VelocityQuantizationLevel;//[Offset: 0x62, Size: 0x1] 0x787376a560
	enum RotationQuantizationLevel;//[Offset: 0x63, Size: 0x1] 0x787376a600

--------------------------------
Class: Vector
	double X;//[Offset: 0x0, Size: 0x8] 0x788a4de600
	double Y;//[Offset: 0x8, Size: 0x8] 0x788a4de580
	double Z;//[Offset: 0x10, Size: 0x8] 0x788a4de500

--------------------------------
Class: Rotator
	double Pitch;//[Offset: 0x0, Size: 0x8] 0x788a4d9600
	double Yaw;//[Offset: 0x8, Size: 0x8] 0x788a4d9580
	double Roll;//[Offset: 0x10, Size: 0x8] 0x788a4d9500

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8] 0x787398b300
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0x18] 0x787398b380
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x20, Size: 0x18] 0x787398b400
	Rotator RotationOffset;//[Offset: 0x38, Size: 0x18] 0x787398b480
	FName AttachSocket;//[Offset: 0x50, Size: 0x8] 0x787398b500
	SceneComponent* AttachComponent;//[Offset: 0x58, Size: 0x8] 0x787398b580

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 0x8] 0x78737dbb00
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 0x8] 0x78737dbb80
	FName AttachSocketName;//[Offset: 0xc8, Size: 0x8] 0x78737dbc00
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 0x10] 0x788ab2cd60
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 0x10] 0x788ab2cae0
	Vector RelativeLocation;//[Offset: 0x138, Size: 0x18] 0x78737dbd80
	Rotator RelativeRotation;//[Offset: 0x150, Size: 0x18] 0x78737dbe00
	Vector RelativeScale3D;//[Offset: 0x168, Size: 0x18] 0x78737dbe80
	Vector ComponentVelocity;//[Offset: 0x180, Size: 0x18] 0x78737dbf00
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198, Size: 0x1] 0x78737dbf80
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x198, Size: 0x1] 0x78737dc000
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x198, Size: 0x1] 0x78737dc080
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x198, Size: 0x1] 0x78737dc100
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x198, Size: 0x1] 0x78737dc180
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x198, Size: 0x1] 0x78737dc200
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x198, Size: 0x1] 0x78737dc280
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x199, Size: 0x1] 0x78737dc300
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x199, Size: 0x1] 0x78737dc380
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x199, Size: 0x1] 0x78737dc400
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x199, Size: 0x1] 0x78737dc480
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x199, Size: 0x1] 0x78737dc500
	bool bComputeFastLocalBounds;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x199, Size: 0x1] 0x78737dc580
	bool bComputeBoundsOnceForGame;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x199, Size: 0x1] 0x78737dc600
	bool bComputedBoundsOnceForGame;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x199, Size: 0x1] 0x78737da580
	byte Mobility;//[Offset: 0x19b, Size: 0x1] 0x78737da600
	byte DetailMode;//[Offset: 0x19c, Size: 0x1] 0x78737da680
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x19d, Size: 0x1] 0x78737da700
	void ToggleVisibility(bool bPropagateToChildren);// 0x10dfc208 0x78737ca420
	void SetWorldScale3D(Vector NewScale);// 0x10dfdf78 0x78737ca500
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x10dfc2d0 0x78737ca5e0
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x10dff660 0x78737ca6c0
	void SetRelativeScale3D(Vector NewScale3D);// 0x10dfee18 0x78737ca7a0
	void SetMobility(byte NewMobility);// 0x10dfba60 0x78737ca880
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x10dfc10c 0x78737ca960
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x10dfbd50 0x78737caa40
	void ResetRelativeTransform();// 0x10dfeec0 0x78737cab20
	void OnRep_Visibility(bool OldValue);// 0x10dff560 0x78737cac00
	void OnRep_Transform();// 0x10dff64c 0x78737cace0
	void OnRep_AttachSocketName();// 0x10dff610 0x78737c7400
	void OnRep_AttachParent();// 0x10dff638 0x78737c74e0
	void OnRep_AttachChildren();// 0x10dff624 0x78737c75c0
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dfdd50 0x78737c76a0
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dfe020 0x78737c7780
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dfbb10 0x78737c7860
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dfe218 0x78737c7940
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dfef48 0x78737c7a20
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dff170 0x78737c7b00
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dfbe98 0x78737c7be0
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dff368 0x78737c7cc0
	Transform K2_GetComponentToWorld();// 0x10dfd3f4 0x78737c7da0
	Vector K2_GetComponentScale();// 0x10dfd468 0x78737c7e80
	Rotator K2_GetComponentRotation();// 0x10dfd4a0 0x78737c7f60
	Vector K2_GetComponentLocation();// 0x10dfd4d8 0x78737c8040
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x10dfc908 0x78737c8120
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x10dfcb9c 0x78737c8200
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x10dfcdd0 0x78737c82e0
	void K2_AddWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dfd510 0x78737c83c0
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dfd738 0x78737c84a0
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dfd960 0x78737c8580
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dfdb58 0x78737c8660
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dfea28 0x78737c8740
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dfec20 0x78737c8820
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dfe410 0x78737c8900
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dfe638 0x78737c89e0
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x10dfe830 0x78737c8ac0
	bool IsVisible();// 0x10dfc3cc 0x78737c8ba0
	bool IsSimulatingPhysics(FName BoneName);// 0x10dfd290 0x78737c8c80
	bool IsAnySimulatingPhysics();// 0x10dfd250 0x78737c8d60
	Vector GetUpVector();// 0x10dfd384 0x78737c8e40
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x10dfc73c 0x78737c8f20
	Rotator GetSocketRotation(FName InSocketName);// 0x10dfc5c4 0x78737c9000
	Quat GetSocketQuaternion(FName InSocketName);// 0x10dfc508 0x78737c5720
	Vector GetSocketLocation(FName InSocketName);// 0x10dfc680 0x78737c5800
	bool GetShouldUpdatePhysicsVolume();// 0x10dff710 0x78737c58e0
	Vector GetRightVector();// 0x10dfd34c 0x78737c59c0
	Transform GetRelativeTransform();// 0x10dfeed4 0x78737c5aa0
	PhysicsVolume* GetPhysicsVolume();// 0x10dfc0d8 0x78737c5b80
	void GetParentComponents(out SceneComponent*[] Parents);// 0x10dfd158 0x78737c5c60
	int GetNumChildrenComponents();// 0x10dfd124 0x78737c5d40
	Vector GetForwardVector();// 0x10dfd3bc 0x78737c5e20
	Vector GetComponentVelocity();// 0x10dfc40c 0x78737c5f00
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x10dfcf6c 0x78737c5fe0
	SceneComponent* GetChildComponent(int ChildIndex);// 0x10dfd074 0x78737c60c0
	FName GetAttachSocketName();// 0x10dfd218 0x78737c61a0
	SceneComponent* GetAttachParent();// 0x10dfd234 0x78737c6280
	FName[] GetAllSocketNames();// 0x10dfc858 0x78737c6360
	bool DoesSocketExist(FName InSocketName);// 0x10dfc44c 0x78737c6440
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x10dfca9c 0x78737c6520

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30] 0x78afd51680
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10] 0x7873761460
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x78737613c0
	int UCSSerializationIndex;//[Offset: 0x84, Size: 0x4] 0x788ab7f300
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1] 0x788ab7f280
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1] 0x788ab7f200
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1] 0x788ab7f180
	bool bIsActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1] 0x788ab7f100
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8a, Size: 0x1] 0x788ab7f080
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8a, Size: 0x1] 0x788ab7f000
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8a, Size: 0x1] 0x788ab7ef80
	enum CreationMethod;//[Offset: 0x8c, Size: 0x1] 0x7873761320
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 0x1] 0x788ab7ed80
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 0x1] 0x788ab7ec80
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 0x10] 0x78737611e0
	void ToggleActive();// 0x10acc364 0x788abe1120
	void SetTickGroup(byte NewTickGroup);// 0x10acbd60 0x788abe1040
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x10acc1dc 0x788abe0f60
	void SetIsReplicated(bool ShouldReplicate);// 0x10acc12c 0x788abe0e80
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0x10acbee4 0x788abe0da0
	void SetComponentTickInterval(float TickInterval);// 0x10acbf8c 0x788abe0cc0
	void SetComponentTickEnabled(bool bEnabled);// 0x10acc074 0x788abe0be0
	void SetAutoActivate(bool bNewAutoActivate);// 0x10acc28c 0x788abe0b00
	void SetActive(bool bNewActive, bool bReset);// 0x10acc380 0x788abe0a20
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x10acbaa0 0x788abe0940
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x10acbb50 0x788abe0860
	void ReceiveTick(float DeltaSeconds);// 0xb8f1ab4 0x788abe0780
	void ReceiveEndPlay(byte EndPlayReason);// 0xb8f1ab4 0x788abe06a0
	void ReceiveBeginPlay();// 0xb8f1ab4 0x788abe05c0
	void OnRep_IsActive();// 0x10acc624 0x788abe04e0
	void K2_DestroyComponent(Object* Object);// 0x10acbe08 0x788a889460
	bool IsComponentTickEnabled();// 0x10acc034 0x788a889380
	bool IsBeingDestroyed();// 0x10acc640 0x788a8892a0
	bool IsActive();// 0x10acc344 0x788a8891c0
	Actor* GetOwner();// 0x10acc608 0x788a8890e0
	float GetComponentTickInterval();// 0x10acbeb0 0x788a88c9c0
	void Deactivate();// 0x10acc480 0x788a88c8e0
	bool ComponentHasTag(FName Tag);// 0x10acc554 0x788a88c800
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x10acbc00 0x788a88c720
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x10acbcb0 0x788a88c640
	void Activate(bool bReset);// 0x10acc49c 0x788a88c560

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x2c0, Size: 0x4] 0x7873e0bf00
	int Priority;//[Offset: 0x2c4, Size: 0x4] 0x7873e0bf80
	float FluidFriction;//[Offset: 0x2c8, Size: 0x4] 0x7873e0c000
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 0x1] 0x7873e0c080
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc, Size: 0x1] 0x7873e0c100

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x288, Size: 0x1] 0x7873ca8c80
	Color BrushColor;//[Offset: 0x28c, Size: 0x4] 0x7873ca8d00
	int PolyFlags;//[Offset: 0x290, Size: 0x4] 0x7873ca8d80
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1] 0x7873ca8e00
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x294, Size: 0x1] 0x7873ca8e80
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x294, Size: 0x1] 0x7873ca8f00
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x294, Size: 0x1] 0x7873ca8f80
	Model* Brush;//[Offset: 0x298, Size: 0x8] 0x7873ca9000
	BrushComponent* BrushComponent;//[Offset: 0x2a0, Size: 0x8] 0x7873ca9080
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x7873ca9100
	GeomSelection[] SavedSelections;//[Offset: 0x2b0, Size: 0x10] 0x7873cc0ce0

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1] 0x788a4df700
	byte G;//[Offset: 0x1, Size: 0x1] 0x788a4df600
	byte R;//[Offset: 0x2, Size: 0x1] 0x788a4df580
	byte A;//[Offset: 0x3, Size: 0x1] 0x788a4df500

--------------------------------
Class: Model.Object

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x548, Size: 0x8] 0x7873df2480
	BodySetup* BrushBodySetup;//[Offset: 0x550, Size: 0x8] 0x7873df2500

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x2c0, Size: 0x4] 0x78737fdd00
	float LDMaxDrawDistance;//[Offset: 0x2c4, Size: 0x4] 0x78737fdd80
	float CachedMaxDrawDistance;//[Offset: 0x2c8, Size: 0x4] 0x78737fde00
	byte DepthPriorityGroup;//[Offset: 0x2cc, Size: 0x1] 0x78737fde80
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x2cd, Size: 0x1] 0x78737fdf00
	byte IndirectLightingCacheQuality;//[Offset: 0x2ce, Size: 0x1] 0x78737fdf80
	enum LightmapType;//[Offset: 0x2cf, Size: 0x1] 0x788ab2b960
	bool bIsValidTextureStreamingBuiltData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1] 0x78737fe080
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 0x1] 0x78737fe100
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d0, Size: 0x1] 0x78737fe180
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d1, Size: 0x1] 0x78737fe200
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d1, Size: 0x1] 0x78737fe280
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d1, Size: 0x1] 0x78737fe300
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d1, Size: 0x1] 0x78737fe380
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d1, Size: 0x1] 0x78737fe400
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d1, Size: 0x1] 0x78737fe480
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d1, Size: 0x1] 0x78737fe500
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d1, Size: 0x1] 0x78737fe580
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d2, Size: 0x1] 0x78737fe600
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d2, Size: 0x1] 0x78737fe680
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d2, Size: 0x1] 0x78737fe700
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d2, Size: 0x1] 0x78737fc680
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d2, Size: 0x1] 0x78737fc700
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d2, Size: 0x1] 0x78737fc780
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d2, Size: 0x1] 0x78737fc800
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d2, Size: 0x1] 0x78737fc880
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d3, Size: 0x1] 0x78737fc900
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d3, Size: 0x1] 0x78737fc980
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d3, Size: 0x1] 0x78737fca00
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d3, Size: 0x1] 0x78737fca80
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d3, Size: 0x1] 0x78737fcb00
	bool bEmissiveLightSource;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d3, Size: 0x1] 0x78737fcb80
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d3, Size: 0x1] 0x78737fcc00
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d3, Size: 0x1] 0x78737fcc80
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 0x1] 0x78737fcd00
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4, Size: 0x1] 0x78737fcd80
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d4, Size: 0x1] 0x78737fce00
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d4, Size: 0x1] 0x78737fce80
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d4, Size: 0x1] 0x78737fcf00
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d4, Size: 0x1] 0x78737fcf80
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d4, Size: 0x1] 0x78737fd000
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d4, Size: 0x1] 0x78737fd080
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d5, Size: 0x1] 0x78737fd100
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d5, Size: 0x1] 0x78737fd180
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d5, Size: 0x1] 0x78737fd200
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d5, Size: 0x1] 0x78737fd280
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d5, Size: 0x1] 0x78737fd300
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d5, Size: 0x1] 0x78737fd380
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d5, Size: 0x1] 0x78737fd400
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d5, Size: 0x1] 0x78737fd480
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d6, Size: 0x1] 0x78737fd500
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d6, Size: 0x1] 0x78737fd580
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d6, Size: 0x1] 0x78737fd600
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d6, Size: 0x1] 0x78737fd680
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d6, Size: 0x1] 0x78737fb600
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d6, Size: 0x1] 0x78737fb680
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d6, Size: 0x1] 0x78737fb700
	bool bIsBeingMovedByEditor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d6, Size: 0x1] 0x78737fb780
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d7, Size: 0x1] 0x78737fb800
	bool bVisibleInSceneCaptureOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d7, Size: 0x1] 0x78737fb880
	bool bHiddenInSceneCapture;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d7, Size: 0x1] 0x78737fb980
	bool bRayTracingFarField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d7, Size: 0x1] 0x78737fb900
	bool bHasNoStreamableTextures;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d7, Size: 0x1] 0x78737fba00
	byte bHasCustomNavigableGeometry;//[Offset: 0x2d8, Size: 0x1] 0x78737fba80
	byte CanCharacterStepUpOn;//[Offset: 0x2da, Size: 0x1] 0x78737fbb00
	LightingChannels LightingChannels;//[Offset: 0x2db, Size: 0x1] 0x78737fbd00
	int RayTracingGroupId;//[Offset: 0x2dc, Size: 0x4] 0x78737fbd80
	int VisibilityId;//[Offset: 0x2e0, Size: 0x4] 0x78737fbe00
	int CustomDepthStencilValue;//[Offset: 0x2e4, Size: 0x4] 0x78737fbe80
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x2e8, Size: 0x10] 0x78737fbf00
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x2f8, Size: 0x10] 0x78737fc000
	int TranslucencySortPriority;//[Offset: 0x310, Size: 0x4] 0x78737fc080
	float TranslucencySortDistanceOffset;//[Offset: 0x314, Size: 0x4] 0x78737fc100
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x318, Size: 0x10] 0x788ab2b8c0
	int8 VirtualTextureLodBias;//[Offset: 0x328, Size: 0x1] 0x78737fc200
	int8 VirtualTextureCullMips;//[Offset: 0x329, Size: 0x1] 0x78737fc280
	int8 VirtualTextureMinCoverage;//[Offset: 0x32a, Size: 0x1] 0x78737fc300
	enum VirtualTextureRenderPassType;//[Offset: 0x32b, Size: 0x1] 0x788ab2b820
	float BoundsScale;//[Offset: 0x33c, Size: 0x4] 0x78737fc400
	Actor*[] MoveIgnoreActors;//[Offset: 0x350, Size: 0x10] 0x788ab2b6e0
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x360, Size: 0x10] 0x788ab2b5a0
	BodyInstance BodyInstance;//[Offset: 0x380, Size: 0x198] 0x78737f8b00
	delegate OnComponentHit;//[Offset: 0x518, Size: 0x1] 0x78737f8b80
	delegate OnComponentBeginOverlap;//[Offset: 0x519, Size: 0x1] 0x78737f8c00
	delegate OnComponentEndOverlap;//[Offset: 0x51a, Size: 0x1] 0x78737f8c80
	delegate OnComponentWake;//[Offset: 0x51b, Size: 0x1] 0x78737f8d00
	delegate OnComponentSleep;//[Offset: 0x51c, Size: 0x1] 0x78737f8d80
	delegate OnBeginCursorOver;//[Offset: 0x51e, Size: 0x1] 0x78737f8e00
	delegate OnEndCursorOver;//[Offset: 0x51f, Size: 0x1] 0x78737f8e80
	delegate OnClicked;//[Offset: 0x520, Size: 0x1] 0x78737f8f00
	delegate OnReleased;//[Offset: 0x521, Size: 0x1] 0x78737f8f80
	delegate OnInputTouchBegin;//[Offset: 0x522, Size: 0x1] 0x78737f9000
	delegate OnInputTouchEnd;//[Offset: 0x523, Size: 0x1] 0x78737f9080
	delegate OnInputTouchEnter;//[Offset: 0x524, Size: 0x1] 0x78737f9100
	delegate OnInputTouchLeave;//[Offset: 0x525, Size: 0x1] 0x78737f9180
	enum RayTracingGroupCullingPriority;//[Offset: 0x526, Size: 0x1] 0x788ab2b460
	enum CustomDepthStencilWriteMask;//[Offset: 0x527, Size: 0x1] 0x788ab2b3c0
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x540, Size: 0x8] 0x78737f9300
	bool WasRecentlyRendered(float Tolerance);// 0x10dd2a08 0x78738029a0
	void WakeRigidBody(FName BoneName);// 0x10dceee0 0x7873802a80
	void WakeAllRigidBodies();// 0x10dcc7f8 0x7873802b60
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x10dd0e20 0x7873802c40
	void SetVisibleInSceneCaptureOnly(bool bValue);// 0x10dcce8c 0x7873802d20
	void SetVisibleInRayTracing(bool bNewVisibleInRayTracing);// 0x10dceb70 0x7873802e00
	void SetVectorParameterForDefaultCustomPrimitiveData(FName ParameterName, Vector4 Value);// 0x10dd1d7c 0x7873802ee0
	void SetVectorParameterForCustomPrimitiveData(FName ParameterName, Vector4 Value);// 0x10dd2328 0x7873802fc0
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x10dcbe7c 0x78738030a0
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x10dce548 0x7873803180
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);// 0x10dce4a0 0x7873803260
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x10dce5f0 0x7873803340
	void SetSimulatePhysics(bool bSimulate);// 0x10dd0d68 0x7873803420
	void SetScalarParameterForDefaultCustomPrimitiveData(FName ParameterName, float Value);// 0x10dd1e70 0x7873803500
	void SetScalarParameterForCustomPrimitiveData(FName ParameterName, float Value);// 0x10dd241c 0x78738035e0
	void SetRenderInMainPass(bool bValue);// 0x10dccfec 0x78738036c0
	void SetRenderInDepthPass(bool bValue);// 0x10dccf3c 0x78738037a0
	void SetRenderCustomDepth(bool bValue);// 0x10dcd1ec 0x7873803880
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x10dce3f0 0x7873803960
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x10dcbb28 0x7873800080
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x10dcf2b8 0x7873800160
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x10dcf3f4 0x7873800240
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x10dcfa94 0x7873800320
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x10dcf698 0x7873800400
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x10dcf540 0x78738004e0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x10dcecd0 0x78738005c0
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x10dcec20 0x78738006a0
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x10dced80 0x7873800780
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x10dd1338 0x7873800860
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x10dd1430 0x7873800940
	void SetMassScale(FName BoneName, float InMassScale);// 0x10dcc42c 0x7873800a20
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x10dcc174 0x7873800b00
	void SetLinearDamping(float InDamping);// 0x10dcc650 0x7873800be0
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x10dd2abc 0x7873800cc0
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x10dce750 0x7873800da0
	void SetHiddenInSceneCapture(bool bValue);// 0x10dccddc 0x7873800e80
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x10dd2c04 0x7873800f60
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x10dce6a0 0x7873801040
	void SetEnableGravity(bool bGravityEnabled);// 0x10dcc740 0x7873801120
	void SetEmissiveLightSource(bool NewEmissiveLightSource);// 0x10dcea10 0x7873801200
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x10dd19b8 0x78738012e0
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x10dd1aac 0x78738013c0
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x10dd1b9c 0x78738014a0
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x10dd1c88 0x7873801580
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x10dd1f64 0x7873801660
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x10dd2058 0x7873801740
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x10dd2148 0x7873801820
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x10dd2234 0x7873801900
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x10dcd09c 0x78738019e0
	void SetCustomDepthStencilValue(int Value);// 0x10dcd144 0x7873801ac0
	void SetCullDistance(float NewCullDistance);// 0x10dcba80 0x7873801ba0
	void SetConstraintMode(byte ConstraintMode);// 0x10dd0cb8 0x7873801c80
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x10dcbc88 0x78737ce780
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x10dcbbd8 0x78737ce860
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x10dce23c 0x78737ce940
	void SetCollisionObjectType(byte Channel);// 0x10dce158 0x78737cea20
	void SetCollisionEnabled(byte NewType);// 0x10dce340 0x78737ceb00
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x10dcef90 0x78737cebe0
	void SetCastShadow(bool NewCastShadow);// 0x10dceac0 0x78737cecc0
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x10dce8b0 0x78737ceda0
	void SetCastHiddenShadow(bool NewCastHiddenShadow);// 0x10dce960 0x78737cee80
	void SetCastContactShadow(bool bInCastContactShadow);// 0x10dce800 0x78737cef60
	void SetBoundsScale(float NewBoundsScale);// 0x10dd15e4 0x78737cf040
	void SetAngularDamping(float InDamping);// 0x10dcc564 0x78737cf120
	void SetAllUseCCD(bool InUseCCD);// 0x10dcbdc4 0x78737cf200
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x10dcf7dc 0x78737cf2e0
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x10dcc814 0x78737cf3c0
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x10dcc918 0x78737cf4a0
	void SetAllMassScale(float InMassScale);// 0x10dcc2c4 0x78737cf580
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x10dcbf74 0x78737cf660
	void PutRigidBodyToSleep(FName BoneName);// 0x10dcee38 0x78737cf740
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x10dcd9e4 0x78737cf820
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x10dcd29c 0x78737cf900
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x10dcddc4 0x78737cf9e0
	bool K2_IsQueryCollisionEnabled();// 0x10dccb88 0x78737cfac0
	bool K2_IsPhysicsCollisionEnabled();// 0x10dccb40 0x78737cfba0
	bool K2_IsCollisionEnabled();// 0x10dccbd0 0x78737cfc80
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x10dcd634 0x78737cfd60
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x10dd1904 0x78737cfe40
	bool IsOverlappingActor(const Actor* Other);// 0x10dd1850 0x78737cff20
	bool IsGravityEnabled();// 0x10dcc700 0x78737ccaa0
	bool IsAnyRigidBodyAwake();// 0x10dcbd84 0x78737ccb80
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x10dd274c 0x78737ccc60
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x10dd290c 0x78737ccd40
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x10dd0ee8 0x78737cce20
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x10dcf8e0 0x78737ccf00
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x10dcf9e0 0x78737ccfe0
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x10dcf138 0x78737cd0c0
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x10dcf1ec 0x78737cd1a0
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x10dd168c 0x78737cd280
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x10dd174c 0x78737cd360
	int GetNumMaterials();// 0x10dccda0 0x78737cd440
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x10dd0f20 0x78737cd520
	MaterialInterface* GetMaterial(int ElementIndex);// 0x10dd152c 0x78737cd600
	float GetMassScale(FName BoneName);// 0x10dcc374 0x78737cd6e0
	float GetMass();// 0x10dcc138 0x78737cd7c0
	float GetLinearDamping();// 0x10dcc614 0x78737cd8a0
	Vector GetInertiaTensor(FName BoneName);// 0x10dcc07c 0x78737cd980
	bool GetGenerateOverlapEvents();// 0x10dd2cb4 0x78737cda60
	int GetCustomPrimitiveDataIndexForVectorParameter(FName ParameterName);// 0x10dd2510 0x78737cdb40
	int GetCustomPrimitiveDataIndexForScalarParameter(FName ParameterName);// 0x10dd25c0 0x78737cdc20
	byte GetCollisionResponseToChannel(byte Channel);// 0x10dcca88 0x78737cdd00
	FName GetCollisionProfileName();// 0x10dce208 0x78737cdde0
	byte GetCollisionObjectType();// 0x10dcca4c 0x78737cdec0
	byte GetCollisionEnabled();// 0x10dccc14 0x78737cdfa0
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x10dccc50 0x78737ce080
	Vector GetCenterOfMass(FName BoneName);// 0x10dcf084 0x78737ce160
	float GetAngularDamping();// 0x10dcc528 0x78737ce240
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x10dd1030 0x78737ce320
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x10dd117c 0x78737ce400
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x10dd1280 0x78737ce4e0
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x10dd269c 0x78737ce5c0
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x10dd285c 0x78737ce6a0
	void ClearMoveIgnoreComponents();// 0x10dd2670 0x78737cadc0
	void ClearMoveIgnoreActors();// 0x10dd2848 0x78737caea0
	bool CanCharacterStepUp(Pawn* Pawn);// 0x10dcb9c4 0x78737caf80
	void AddVelocityChangeImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x10dd062c 0x78737cb060
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x10dcfd3c 0x78737cb140
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x10dcfbd8 0x78737cb220
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x10dd0448 0x78737cb300
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x10dcfe8c 0x78737cb3e0
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x10dd0770 0x78737cb4c0
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x10dd0b68 0x78737cb5a0
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x10dd0070 0x78737cb680
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x10dd01b4 0x78737cb760
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x10dd02f8 0x78737cb840
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x10dd0a18 0x78737cb920
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x10dd08b4 0x78737cba00

--------------------------------
Class: BodySetup.BodySetupCore.Object
	KAggregateGeom AggGeom;//[Offset: 0x38, Size: 0x58] 0x7873df1c00
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7873df1c80
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x7873df1d00
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1] 0x7873df1d80
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1] 0x7873df1e00
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1] 0x7873df1e80
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 0x1] 0x7873df1f00
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x90, Size: 0x1] 0x7873df1f80
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x90, Size: 0x1] 0x7873df2000
	bool bNeverNeedsCookedCollisionData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x91, Size: 0x1] 0x7873df2080
	PhysicalMaterial* PhysMaterial;//[Offset: 0x98, Size: 0x8] 0x7873df2100
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa0, Size: 0x10] 0x7873df0080
	BodyInstance DefaultInstance;//[Offset: 0x128, Size: 0x198] 0x7873df0100
	Vector BuildScale3D;//[Offset: 0x2c8, Size: 0x18] 0x7873df0180

--------------------------------
Class: BodySetupCore.Object
	FName BoneName;//[Offset: 0x28, Size: 0x8] 0x7873c37700
	byte PhysicsType;//[Offset: 0x30, Size: 0x1] 0x7873c37780
	byte CollisionTraceFlag;//[Offset: 0x31, Size: 0x1] 0x7873c37800
	byte CollisionReponse;//[Offset: 0x32, Size: 0x1] 0x7873c37880

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10] 0x787376c400
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10] 0x787376c4a0
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10] 0x787376c540
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10] 0x787376c720
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10] 0x787376c7c0

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0x18] 0x7873990f80
	float Radius;//[Offset: 0x48, Size: 0x4] 0x7873991000

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4] 0x787398ea00
	FName Name;//[Offset: 0xc, Size: 0x8] 0x787398ea80
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x787398eb00
	byte CollisionEnabled;//[Offset: 0x19, Size: 0x1] 0x787398eb80

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0x18] 0x787398f800
	Rotator Rotation;//[Offset: 0x48, Size: 0x18] 0x787398f880
	float X;//[Offset: 0x60, Size: 0x4] 0x787398f900
	float Y;//[Offset: 0x64, Size: 0x4] 0x787398f980
	float Z;//[Offset: 0x68, Size: 0x4] 0x787398fa00

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0x18] 0x787398fb00
	Rotator Rotation;//[Offset: 0x48, Size: 0x18] 0x787398fb80
	float Radius;//[Offset: 0x60, Size: 0x4] 0x787398fc00
	float Length;//[Offset: 0x64, Size: 0x4] 0x787398fc80

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10] 0x787376c5e0
	int[] IndexData;//[Offset: 0x40, Size: 0x10] 0x787376c680
	Box ElemBox;//[Offset: 0x50, Size: 0x38] 0x787398fe80
	Transform Transform;//[Offset: 0x90, Size: 0x60] 0x787398ff00

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0x18] 0x788a4de680
	Vector Max;//[Offset: 0x18, Size: 0x18] 0x788a4de480
	byte IsValid;//[Offset: 0x30, Size: 0x1] 0x788a4de400

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x20] 0x788a4d7c00
	Vector Translation;//[Offset: 0x20, Size: 0x18] 0x788a4d7b80
	Vector Scale3D;//[Offset: 0x40, Size: 0x18] 0x788a4d7b00

--------------------------------
Class: Quat
	double X;//[Offset: 0x0, Size: 0x8] 0x788a4dac00
	double Y;//[Offset: 0x8, Size: 0x8] 0x788a4dab80
	double Z;//[Offset: 0x10, Size: 0x8] 0x788a4dab00
	double W;//[Offset: 0x18, Size: 0x8] 0x788a4daa80

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0x18] 0x787398e780
	Rotator Rotation;//[Offset: 0x48, Size: 0x18] 0x787398e800
	float Radius0;//[Offset: 0x60, Size: 0x4] 0x787398e880
	float Radius1;//[Offset: 0x64, Size: 0x4] 0x787398e900
	float Length;//[Offset: 0x68, Size: 0x4] 0x787398e980

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4] 0x7873c38d00
	float StaticFriction;//[Offset: 0x2c, Size: 0x4] 0x7873c38d80
	byte FrictionCombineMode;//[Offset: 0x30, Size: 0x1] 0x7873c38e00
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7873c38e80
	float Restitution;//[Offset: 0x34, Size: 0x4] 0x7873c38f00
	byte RestitutionCombineMode;//[Offset: 0x38, Size: 0x1] 0x7873c38f80
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7873c39000
	float Density;//[Offset: 0x3c, Size: 0x4] 0x7873c39080
	float SleepLinearVelocityThreshold;//[Offset: 0x40, Size: 0x4] 0x7873c39100
	float SleepAngularVelocityThreshold;//[Offset: 0x44, Size: 0x4] 0x7873c39180
	int SleepCounterThreshold;//[Offset: 0x48, Size: 0x4] 0x7873c39200
	float RaiseMassToPower;//[Offset: 0x4c, Size: 0x4] 0x7873c39280
	float DestructibleDamageThresholdScale;//[Offset: 0x50, Size: 0x4] 0x7873c39300
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x58, Size: 0x8] 0x7873c39380
	byte SurfaceType;//[Offset: 0x60, Size: 0x1] 0x7873c39400

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1] 0x78737f3f80
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4] 0x78737f4000

--------------------------------
Class: BodyInstance.BodyInstanceCore
	byte ObjectType;//[Offset: 0x1a, Size: 0x1] 0x78737fc580
	byte CollisionEnabled;//[Offset: 0x1c, Size: 0x1] 0x78737fc600
	enum SleepFamily;//[Offset: 0x51, Size: 0x1] 0x788ab2b640
	byte DOFMode;//[Offset: 0x52, Size: 0x1] 0x78737fa600
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53, Size: 0x1] 0x78737fa680
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x53, Size: 0x1] 0x78737fa700
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x53, Size: 0x1] 0x78737fa780
	bool bSmoothEdgeCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x53, Size: 0x1] 0x78737fa800
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x53, Size: 0x1] 0x78737fa880
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x53, Size: 0x1] 0x78737fa900
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x53, Size: 0x1] 0x78737fa980
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78737faa00
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x78737faa80
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1] 0x78737fab00
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1] 0x78737fab80
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1] 0x78737fac00
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 0x1] 0x78737fac80
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1] 0x78737fad00
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1] 0x78737fad80
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1] 0x78737fae00
	FName CollisionProfileName;//[Offset: 0x70, Size: 0x8] 0x78737fae80
	byte PositionSolverIterationCount;//[Offset: 0x78, Size: 0x1] 0x78737faf00
	byte VelocitySolverIterationCount;//[Offset: 0x79, Size: 0x1] 0x78737faf80
	CollisionResponse CollisionResponses;//[Offset: 0x80, Size: 0x30] 0x78737fa100
	float MaxDepenetrationVelocity;//[Offset: 0xb0, Size: 0x4] 0x78737fa180
	float MassInKgOverride;//[Offset: 0xb4, Size: 0x4] 0x78737fa200
	float LinearDamping;//[Offset: 0xc0, Size: 0x4] 0x78737fa280
	float AngularDamping;//[Offset: 0xc4, Size: 0x4] 0x78737fa300
	Vector CustomDOFPlaneNormal;//[Offset: 0xc8, Size: 0x18] 0x78737fa380
	Vector COMNudge;//[Offset: 0xe0, Size: 0x18] 0x78737fa400
	float MassScale;//[Offset: 0xf8, Size: 0x4] 0x78737fa480
	Vector InertiaTensorScale;//[Offset: 0x100, Size: 0x18] 0x78737fa500
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x128, Size: 0x10] 0x78737f8480
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0x138, Size: 0x8] 0x78737f8500
	float MaxAngularVelocity;//[Offset: 0x140, Size: 0x4] 0x78737f8580
	float CustomSleepThresholdMultiplier;//[Offset: 0x144, Size: 0x4] 0x78737f8600
	float StabilizationThresholdMultiplier;//[Offset: 0x148, Size: 0x4] 0x78737f8680
	float PhysicsBlendWeight;//[Offset: 0x14c, Size: 0x4] 0x78737f8700

--------------------------------
Class: BodyInstanceCore
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78737f8780
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x78737f8800
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x78737f8880
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x78737f8900
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x78737f8980
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x78737f8a00
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x78737f8a80

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20] 0x78737f9f00
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10] 0x788ab2b1e0

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1] 0x78737fb000
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1] 0x78737fb080
	byte Pawn;//[Offset: 0x2, Size: 0x1] 0x78737fb100
	byte Visibility;//[Offset: 0x3, Size: 0x1] 0x78737fb180
	byte Camera;//[Offset: 0x4, Size: 0x1] 0x78737fb200
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1] 0x78737fb280
	byte Vehicle;//[Offset: 0x6, Size: 0x1] 0x78737fb300
	byte Destructible;//[Offset: 0x7, Size: 0x1] 0x78737fb380
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1] 0x78737fb400
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1] 0x78737fb480
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1] 0x78737fb500
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1] 0x78737fb580
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1] 0x78737f9500
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1] 0x78737f9580
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1] 0x78737f9600
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1] 0x78737f9680
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1] 0x78737f9700
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1] 0x78737f9780
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1] 0x78737f9800
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1] 0x78737f9880
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1] 0x78737f9900
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1] 0x78737f9980
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1] 0x78737f9a00
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1] 0x78737f9a80
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1] 0x78737f9b00
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1] 0x78737f9b80
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1] 0x78737f9c00
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1] 0x78737f9c80
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1] 0x78737f9d00
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1] 0x78737f9d80
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1] 0x78737f9e00
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1] 0x78737f9e80

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8] 0x78737f9f80
	byte Response;//[Offset: 0x8, Size: 0x1] 0x78737fa000

--------------------------------
Class: Vector4
	double X;//[Offset: 0x0, Size: 0x8] 0x788a4d8100
	double Y;//[Offset: 0x8, Size: 0x8] 0x788a4d8080
	double Z;//[Offset: 0x10, Size: 0x8] 0x788a4d8000
	double W;//[Offset: 0x18, Size: 0x8] 0x788a4d7f80

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78737fbb80
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78737fbc00
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78737fbc80

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10] 0x788ab290c0

--------------------------------
Class: RuntimeVirtualTexture.Object
	int TileCount;//[Offset: 0x28, Size: 0x4] 0x7873f87880
	int TileSize;//[Offset: 0x2c, Size: 0x4] 0x7873f87900
	int TileBorderSize;//[Offset: 0x30, Size: 0x4] 0x7873f87980
	enum MaterialType;//[Offset: 0x34, Size: 0x1] 0x7873ee6b40
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x7873f87a80
	bool bUseLowQualityCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1] 0x7873f87b00
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1] 0x7873f87b80
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7873f87c00
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7873f87c80
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x7873f87d00
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1] 0x7873f87d80
	int RemoveLowMips;//[Offset: 0x3c, Size: 0x4] 0x7873f87e00
	byte LODGroup;//[Offset: 0x40, Size: 0x1] 0x7873f87e80
	int Size;//[Offset: 0x44, Size: 0x4] 0x7873f87f00
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8] 0x7873f87f80
	int GetTileSize();// 0x10de9d20 0x7873f79620
	int GetTileCount();// 0x10de9d54 0x7873f79700
	int GetTileBorderSize();// 0x10de9cf0 0x7873f797e0
	int GetSize();// 0x10de9c70 0x7873f798c0
	int GetPageTableSize();// 0x10de9c3c 0x7873f799a0

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int FirstResourceMemMip;//[Offset: 0x210, Size: 0x4] 0x7873e02700
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 0x1] 0x7873e02780
	byte AddressX;//[Offset: 0x215, Size: 0x1] 0x7873e02800
	byte AddressY;//[Offset: 0x216, Size: 0x1] 0x7873e02880
	IntPoint ImportedSize;//[Offset: 0x218, Size: 0x8] 0x7873e02900
	int Blueprint_GetSizeY();// 0x10e76b0c 0x7873de9540
	int Blueprint_GetSizeX();// 0x10e76b40 0x7873de9620

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0xe0, Size: 0x10] 0x7873c83800
	int LevelIndex;//[Offset: 0xf0, Size: 0x4] 0x7873c83880
	int LODBias;//[Offset: 0xf4, Size: 0x4] 0x7873c83900
	byte CompressionSettings;//[Offset: 0xf8, Size: 0x1] 0x7873c83980
	byte Filter;//[Offset: 0xf9, Size: 0x1] 0x7873c83a00
	enum MipLoadOptions;//[Offset: 0xfa, Size: 0x1] 0x7873bbda80
	byte LODGroup;//[Offset: 0xfb, Size: 0x1] 0x7873c83b00
	PerPlatformFloat Downscale;//[Offset: 0xfc, Size: 0x4] 0x7873c83b80
	enum DownscaleOptions;//[Offset: 0x100, Size: 0x1] 0x7873bbdb20
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x101, Size: 0x1] 0x7873c83c80
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x101, Size: 0x1] 0x7873c83d00
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x101, Size: 0x1] 0x7873c83d80
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x101, Size: 0x1] 0x7873c83e00
	bool bNotOfflineProcessed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x101, Size: 0x1] 0x7873c83e80
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x101, Size: 0x1] 0x7873c83f00
	AssetUserData*[] AssetUserData;//[Offset: 0x108, Size: 0x10] 0x7873bbdbc0

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x40, Size: 0x8] 0x7873c84000
	int NumCinematicMipLevels;//[Offset: 0x48, Size: 0x4] 0x7873c84080
	PerQualityLevelInt NoRefStreamingLODBias;//[Offset: 0x50, Size: 0x68] 0x7873c84100
	int StreamingIndex;//[Offset: 0xb8, Size: 0x4] 0x7873c84180
	int CachedCombinedLODBias;//[Offset: 0xbc, Size: 0x4] 0x7873c84200
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7873c82180
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x7873c82200
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x7873c82280
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x7873c82300
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1] 0x7873c82380
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1] 0x7873c82400
	void SetForceMipLevelsToBeResident(float Seconds, int CinematicLODGroupMask);// 0x10e69b20 0x7873c7a0a0

--------------------------------
Class: PerQualityLevelInt
	int Default;//[Offset: 0x10, Size: 0x4] 0x7873a19c80
	<int,int> PerQuality;//[Offset: 0x18, Size: 0x50] 0x78739f6d00

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4] 0x788a48cb00
	int B;//[Offset: 0x4, Size: 0x4] 0x788a48ca80
	int C;//[Offset: 0x8, Size: 0x4] 0x788a48ca00
	int D;//[Offset: 0xc, Size: 0x4] 0x788a48c980

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4] 0x78738e8d00

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4] 0x788a4dbc80
	int Y;//[Offset: 0x4, Size: 0x4] 0x788a4dbc00

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8] 0x7873caeb80
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10] 0x7873caec00
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10] 0x7873cc2540
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x7873cc25e0
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x10d3a64c 0x7873c97320
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x10d3aa2c 0x7873c93a40
	PhysicalMaterial* GetPhysicalMaterialFromMap(int index);// 0x10d3a974 0x7873c93b20
	PhysicalMaterial* GetPhysicalMaterial();// 0x10d3aa68 0x7873c93c00
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x10d3a830 0x7873c93ce0
	Material* GetBaseMaterial();// 0x10d3aaa4 0x7873c93dc0

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4] 0x7873f61000
	byte AddressX;//[Offset: 0x2c, Size: 0x1] 0x7873f61080
	byte AddressY;//[Offset: 0x2d, Size: 0x1] 0x7873f5f800

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x9c] 0x7873fb4e80

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10] 0x7873a3fa00
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10] 0x7873a3fa80
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4] 0x7873a3fb00
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4] 0x7873a3fb80
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873a3fc00
	LinearColor Tint;//[Offset: 0x2c, Size: 0x10] 0x7873a3fc80
	float ScatterRadius;//[Offset: 0x3c, Size: 0x4] 0x7873a3fd00
	LinearColor SubsurfaceColor;//[Offset: 0x40, Size: 0x10] 0x7873a3fd80
	LinearColor FalloffColor;//[Offset: 0x50, Size: 0x10] 0x7873a3fe00
	LinearColor BoundaryColorBleed;//[Offset: 0x60, Size: 0x10] 0x7873a3fe80
	float ExtinctionScale;//[Offset: 0x70, Size: 0x4] 0x7873a3ff00
	float NormalScale;//[Offset: 0x74, Size: 0x4] 0x7873a3ff80
	float ScatteringDistribution;//[Offset: 0x78, Size: 0x4] 0x7873a3e780
	float IOR;//[Offset: 0x7c, Size: 0x4] 0x7873a3e800
	float Roughness0;//[Offset: 0x80, Size: 0x4] 0x7873a3e880
	float Roughness1;//[Offset: 0x84, Size: 0x4] 0x7873a3e900
	float LobeMix;//[Offset: 0x88, Size: 0x4] 0x7873a3e980
	LinearColor TransmissionTintColor;//[Offset: 0x8c, Size: 0x10] 0x7873a3ea00

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4] 0x788a4da780
	float G;//[Offset: 0x4, Size: 0x4] 0x788a4da700
	float B;//[Offset: 0x8, Size: 0x4] 0x788a4da680
	float A;//[Offset: 0xc, Size: 0x4] 0x788a4da600

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4] 0x78739ecc80
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4] 0x78739ecd00
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4] 0x78739ecd80
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78739ece00
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x78739ece80
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x78739ecf00
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x78739ecf80
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1] 0x78739ed000

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4] 0x78739ecb00
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4] 0x78739ecb80
	FName TextureName;//[Offset: 0x8, Size: 0x8] 0x78739ecc00

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10] 0x7873f47280
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1] 0x7873ee15a0

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78739e9500
	byte Association;//[Offset: 0x8, Size: 0x1] 0x78739e9580
	int index;//[Offset: 0xc, Size: 0x4] 0x78739e9600

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x98, Size: 0x8] 0x7873f34f80
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0xa0, Size: 0x8] 0x7873f35000
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0xa8, Size: 0x8] 0x7873f35080
	ColorMaterialInput BaseColor;//[Offset: 0xe8, Size: 0x14] 0x7873f35100
	ScalarMaterialInput Metallic;//[Offset: 0xfc, Size: 0x14] 0x7873f35180
	ScalarMaterialInput Specular;//[Offset: 0x110, Size: 0x14] 0x7873f35200
	ScalarMaterialInput Roughness;//[Offset: 0x124, Size: 0x14] 0x7873f35280
	ScalarMaterialInput Anisotropy;//[Offset: 0x138, Size: 0x14] 0x7873f33200
	VectorMaterialInput Normal;//[Offset: 0x14c, Size: 0x14] 0x7873f33280
	VectorMaterialInput Tangent;//[Offset: 0x160, Size: 0x14] 0x7873f33300
	ColorMaterialInput EmissiveColor;//[Offset: 0x174, Size: 0x14] 0x7873f33380
	byte MaterialDomain;//[Offset: 0x188, Size: 0x1] 0x7873f33400
	byte BlendMode;//[Offset: 0x189, Size: 0x1] 0x7873f33480
	byte DecalBlendMode;//[Offset: 0x18a, Size: 0x1] 0x7873f33500
	byte MaterialDecalResponse;//[Offset: 0x18b, Size: 0x1] 0x7873f33580
	byte ShadingModel;//[Offset: 0x18c, Size: 0x1] 0x7873f33600
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18d, Size: 0x1] 0x7873f33680
	MaterialShadingModelField ShadingModels;//[Offset: 0x18e, Size: 0x2] 0x7873f33700
	float OpacityMaskClipValue;//[Offset: 0x190, Size: 0x4] 0x7873f33780
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x194, Size: 0x14] 0x7873f33800
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x1a8, Size: 0x14] 0x7873f33880
	ScalarMaterialInput Refraction;//[Offset: 0x1bc, Size: 0x14] 0x7873f33900
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x1d0, Size: 0x18] 0x7873f33980
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x1e8, Size: 0x14] 0x7873f33a00
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1fc, Size: 0x14] 0x7873f33a80
	StrataMaterialInput FrontMaterial;//[Offset: 0x210, Size: 0x14] 0x7873f33b00
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1] 0x7873f33b80
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 0x1] 0x7873f33c00
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 0x1] 0x7873f33c80
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x224, Size: 0x1] 0x7873f33d00
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x224, Size: 0x1] 0x7873f33d80
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x224, Size: 0x1] 0x7873f33e00
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x224, Size: 0x1] 0x7873f33e80
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x224, Size: 0x1] 0x7873f33f00
	byte TranslucencyPass;//[Offset: 0x225, Size: 0x1] 0x7873f33f80
	byte TranslucencyLightingMode;//[Offset: 0x226, Size: 0x1] 0x7873f34000
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x227, Size: 0x1] 0x7873f34080
	int NumCustomizedUVs;//[Offset: 0x228, Size: 0x4] 0x7873f34100
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x22c, Size: 0x4] 0x7873f34180
	float TranslucentShadowDensityScale;//[Offset: 0x230, Size: 0x4] 0x7873f34200
	float TranslucentSelfShadowDensityScale;//[Offset: 0x234, Size: 0x4] 0x7873f32180
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x238, Size: 0x4] 0x7873f32200
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x23c, Size: 0x4] 0x7873f32280
	float TranslucentBackscatteringExponent;//[Offset: 0x240, Size: 0x4] 0x7873f32300
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x244, Size: 0x10] 0x7873f32380
	float TranslucentShadowStartOffset;//[Offset: 0x254, Size: 0x4] 0x7873f32400
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1] 0x7873f32480
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 0x1] 0x7873f32500
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 0x1] 0x7873f32580
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x258, Size: 0x1] 0x7873f32600
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x258, Size: 0x1] 0x7873f32680
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x258, Size: 0x1] 0x7873f32700
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x258, Size: 0x1] 0x7873f32780
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x258, Size: 0x1] 0x7873f32800
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x259, Size: 0x1] 0x7873f32880
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x259, Size: 0x1] 0x7873f32900
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x259, Size: 0x1] 0x7873f32980
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x259, Size: 0x1] 0x7873f32a00
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x259, Size: 0x1] 0x7873f32a80
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x259, Size: 0x1] 0x7873f32b00
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x259, Size: 0x1] 0x7873f32b80
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x259, Size: 0x1] 0x7873f32c00
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25a, Size: 0x1] 0x7873f32c80
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25a, Size: 0x1] 0x7873f32d00
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25a, Size: 0x1] 0x7873f32d80
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25a, Size: 0x1] 0x7873f32e00
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25a, Size: 0x1] 0x7873f32e80
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25a, Size: 0x1] 0x7873f32f00
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25a, Size: 0x1] 0x7873f32f80
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x25a, Size: 0x1] 0x7873f33000
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25b, Size: 0x1] 0x7873f33080
	bool bUsedWithVirtualHeightfieldMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25b, Size: 0x1] 0x7873f33100
	bool bUsedWithNanite;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25b, Size: 0x1] 0x7873f33180
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25b, Size: 0x1] 0x7873f31100
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25b, Size: 0x1] 0x7873f31180
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25b, Size: 0x1] 0x7873f31200
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25b, Size: 0x1] 0x7873f31280
	byte FloatPrecisionMode;//[Offset: 0x25c, Size: 0x1] 0x7873f31300
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25d, Size: 0x1] 0x7873f31380
	bool bMobileEnableHighQualityBRDF;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25d, Size: 0x1] 0x7873f31400
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25d, Size: 0x1] 0x7873f31480
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25d, Size: 0x1] 0x7873f31500
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25d, Size: 0x1] 0x7873f31580
	bool bForwardBlendsSkyLightCubemaps;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25d, Size: 0x1] 0x7873f31600
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25d, Size: 0x1] 0x7873f31680
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x25d, Size: 0x1] 0x7873f31700
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25e, Size: 0x1] 0x7873f31780
	bool Wireframe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25e, Size: 0x1] 0x7873f31800
	byte ShadingRate;//[Offset: 0x25f, Size: 0x1] 0x7873f31880
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1] 0x7873f31900
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x260, Size: 0x1] 0x7873f31980
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x260, Size: 0x1] 0x7873f31a00
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x260, Size: 0x1] 0x7873f31a80
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x260, Size: 0x1] 0x7873f31b00
	bool bEnableExecWire;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x260, Size: 0x1] 0x7873f31b80
	bool bEnableNewHLSLGenerator;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x260, Size: 0x1] 0x7873f31c00
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x260, Size: 0x1] 0x7873f31c80
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x261, Size: 0x1] 0x7873f31d00
	bool bApplyCloudFogging;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x261, Size: 0x1] 0x7873f31d80
	bool bIsSky;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x261, Size: 0x1] 0x7873f31e00
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x261, Size: 0x1] 0x7873f31e80
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x261, Size: 0x1] 0x7873f31f00
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x261, Size: 0x1] 0x7873f31f80
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x261, Size: 0x1] 0x7873f32000
	byte BlendableLocation;//[Offset: 0x262, Size: 0x1] 0x7873f32080
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x263, Size: 0x1] 0x7873f32100
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x263, Size: 0x1] 0x7873f30080
	byte StencilCompare;//[Offset: 0x264, Size: 0x1] 0x7873f30100
	byte StencilRefValue;//[Offset: 0x265, Size: 0x1] 0x7873f30180
	byte RefractionMode;//[Offset: 0x266, Size: 0x1] 0x7873f30200
	int BlendablePriority;//[Offset: 0x268, Size: 0x4] 0x7873f30280
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1] 0x7873f30300
	uint32 UsageFlagWarnings;//[Offset: 0x270, Size: 0x4] 0x7873f30380
	float RefractionDepthBias;//[Offset: 0x274, Size: 0x4] 0x7873f30400
	Guid StateId;//[Offset: 0x278, Size: 0x10] 0x7873f30480

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4] 0x788ab76e00
	FName InputName;//[Offset: 0x4, Size: 0x8] 0x788ab76d80
	FName ExpressionName;//[Offset: 0xc, Size: 0x8] 0x788ab76f80

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2] 0x78739dac80

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x14, Size: 0x4] 0x788ab78c80

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4] 0x788ab78680
	FName InputName;//[Offset: 0x4, Size: 0x8] 0x788ab78600
	FName ExpressionName;//[Offset: 0xc, Size: 0x8] 0x788ab78580

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: StrataMaterialInput.MaterialInput

--------------------------------
Class: Vector2D
	double X;//[Offset: 0x0, Size: 0x8] 0x788a4dc780
	double Y;//[Offset: 0x8, Size: 0x8] 0x788a4dc700

--------------------------------
Class: HitResult
	int FaceIndex;//[Offset: 0x0, Size: 0x4] 0x78afd52100
	float Time;//[Offset: 0x4, Size: 0x4] 0x78afd52080
	float Distance;//[Offset: 0x8, Size: 0x4] 0x78afd52000
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0x18] 0x78afd51f80
	Vector_NetQuantize ImpactPoint;//[Offset: 0x28, Size: 0x18] 0x78afd51e80
	Vector_NetQuantizeNormal Normal;//[Offset: 0x40, Size: 0x18] 0x788ab72f80
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x58, Size: 0x18] 0x78afd51280
	Vector_NetQuantize TraceStart;//[Offset: 0x70, Size: 0x18] 0x78afd51200
	Vector_NetQuantize TraceEnd;//[Offset: 0x88, Size: 0x18] 0x78afd51180
	float PenetrationDepth;//[Offset: 0xa0, Size: 0x4] 0x788ab77980
	int MyItem;//[Offset: 0xa4, Size: 0x4] 0x788ab77700
	int Item;//[Offset: 0xa8, Size: 0x4] 0x788ab77800
	byte ElementIndex;//[Offset: 0xac, Size: 0x1] 0x788ab77680
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad, Size: 0x1] 0x788ab77780
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xad, Size: 0x1] 0x788ab77880
	PhysicalMaterial* PhysMaterial;//[Offset: 0xb0, Size: 0x8] 0x788ab77900
	ActorInstanceHandle HitObjectHandle;//[Offset: 0xb8, Size: 0x18] 0x788ab77a80
	PrimitiveComponent* Component;//[Offset: 0xd0, Size: 0x8] 0x788ab77b00
	FName BoneName;//[Offset: 0xd8, Size: 0x8] 0x788ab77b80
	FName MyBoneName;//[Offset: 0xe0, Size: 0x8] 0x788ab77c00

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: ActorInstanceHandle
	Actor* Actor;//[Offset: 0x0, Size: 0x8] 0x788ab77a00

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x10d38c8c 0x7873f1b060
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x10d38e84 0x7873f1b140
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x10d392e8 0x7873f1b220
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x10d393f0 0x7873f1b300
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x10d3965c 0x7873f1b3e0
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x10d39764 0x7873f1b4c0
	void SetRuntimeVirtualTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, RuntimeVirtualTexture* Value);// 0x10d390f0 0x7873f1b5a0
	void SetRuntimeVirtualTextureParameterValue(FName ParameterName, RuntimeVirtualTexture* Value);// 0x10d391f8 0x7873f1b680
	void SetDoubleVectorParameterValue(FName ParameterName, Vector Value);// 0x10d38d94 0x7873f1b760
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x10d389cc 0x7873f1b840
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x10d38b08 0x7873f1b920
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x10d38bd8 0x7873f1ba00
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x10d38f74 0x7873f1bae0
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x10d39040 0x7873f1bbc0
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x10d394e0 0x7873f1bca0
	float K2_GetScalarParameterValue(FName ParameterName);// 0x10d395ac 0x7873f1bd80
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x10d388d0 0x7873f1be60
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x10d38780 0x7873f1bf40
	void CopyInterpParameters(MaterialInstance* Source);// 0x10d38828 0x7873f1c020

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x98, Size: 0x8] 0x7873cafd80
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0xa0, Size: 0x8] 0x7873cafe00
	MaterialInterface* Parent;//[Offset: 0xe0, Size: 0x8] 0x7873cafe80
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1] 0x7873caff00
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1] 0x7873caff80
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xf0, Size: 0x10] 0x7873cc2180
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x100, Size: 0x10] 0x7873cc2220
	DoubleVectorParameterValue[] DoubleVectorParameterValues;//[Offset: 0x110, Size: 0x10] 0x7873cc22c0
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x120, Size: 0x10] 0x7873cc2360
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x130, Size: 0x10] 0x7873cc2400
	FontParameterValue[] FontParameterValues;//[Offset: 0x140, Size: 0x10] 0x7873cc24a0
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x150, Size: 0x8] 0x7873caea80
	StaticParameterSet StaticParameters;//[Offset: 0x168, Size: 0x58] 0x7873caeb00

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78739ebe80
	float ParameterValue;//[Offset: 0x10, Size: 0x4] 0x78739ebf00
	Guid ExpressionGuid;//[Offset: 0x14, Size: 0x10] 0x78739ebf80

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78739ebd00
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10] 0x78739ebd80
	Guid ExpressionGuid;//[Offset: 0x20, Size: 0x10] 0x78739ebe00

--------------------------------
Class: DoubleVectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78739ebb80
	Vector4d ParameterValue;//[Offset: 0x10, Size: 0x20] 0x78739ebc00
	Guid ExpressionGuid;//[Offset: 0x30, Size: 0x10] 0x78739ebc80

--------------------------------
Class: Vector4d
	double X;//[Offset: 0x0, Size: 0x8] 0x788a4d8300
	double Y;//[Offset: 0x8, Size: 0x8] 0x788a4d8280
	double Z;//[Offset: 0x10, Size: 0x8] 0x788a4d8200
	double W;//[Offset: 0x18, Size: 0x8] 0x788a4d8180

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78739eba00
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8] 0x78739eba80
	Guid ExpressionGuid;//[Offset: 0x18, Size: 0x10] 0x78739ebb00

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78739eb880
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8] 0x78739eb900
	Guid ExpressionGuid;//[Offset: 0x18, Size: 0x10] 0x78739eb980

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78739eb680
	Font* FontValue;//[Offset: 0x10, Size: 0x8] 0x78739eb700
	int FontPage;//[Offset: 0x18, Size: 0x4] 0x78739eb780
	Guid ExpressionGuid;//[Offset: 0x1c, Size: 0x10] 0x78739eb800

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1] 0x7873db9660
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10] 0x7873db9700
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10] 0x7873db97a0
	int IsRemapped;//[Offset: 0x58, Size: 0x4] 0x7873e2f600
	float EmScale;//[Offset: 0x5c, Size: 0x4] 0x7873e2f680
	float Ascent;//[Offset: 0x60, Size: 0x4] 0x7873e2f700
	float Descent;//[Offset: 0x64, Size: 0x4] 0x7873e2f780
	float Leading;//[Offset: 0x68, Size: 0x4] 0x7873e2d700
	int Kerning;//[Offset: 0x6c, Size: 0x4] 0x7873e2d780
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8] 0x7873e2d800
	int NumCharacters;//[Offset: 0x118, Size: 0x4] 0x7873e2d880
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10] 0x7873db9840
	float ScalingFactor;//[Offset: 0x130, Size: 0x4] 0x7873e2d980
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4] 0x7873e2da00
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8] 0x7873e2da80
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38] 0x7873e2db00

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4] 0x78739e0880
	int StartV;//[Offset: 0x4, Size: 0x4] 0x78739e0900
	int USize;//[Offset: 0x8, Size: 0x4] 0x78739e0980
	int VSize;//[Offset: 0xc, Size: 0x4] 0x78739e0a00
	byte TextureIndex;//[Offset: 0x10, Size: 0x1] 0x78739e0a80
	int VerticalOffset;//[Offset: 0x14, Size: 0x4] 0x78739e0b00

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10] 0x78739e1b00
	float Height;//[Offset: 0x10, Size: 0x4] 0x78739e1b80
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x78739e1c00
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1] 0x78739e1c80
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1] 0x78739e1d00
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1] 0x78739e1d80
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1] 0x78739e1e00
	byte CharacterSet;//[Offset: 0x15, Size: 0x1] 0x78739e1e80
	FString Chars;//[Offset: 0x18, Size: 0x10] 0x78739e1f00
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10] 0x78739e1f80
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10] 0x78739e2000
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10] 0x78739e2080
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78739e2100
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x78739e0080
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10] 0x78739e0100
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x78739e0180
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4] 0x78739e0200
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4] 0x78739e0280
	int XPadding;//[Offset: 0x78, Size: 0x4] 0x78739e0300
	int YPadding;//[Offset: 0x7c, Size: 0x4] 0x78739e0380
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4] 0x78739e0400
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4] 0x78739e0480
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4] 0x78739e0500
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4] 0x78739e0580
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x78739e0600
	int Kerning;//[Offset: 0x94, Size: 0x4] 0x78739e0680
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x78739e0700
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4] 0x78739e0780
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4] 0x78739e0800

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10] 0x787391b080
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18] 0x787391b100
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10] 0x78736afa60

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10] 0x78736af920

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8] 0x787391b480
	FontData Font;//[Offset: 0x8, Size: 0x28] 0x787391b500

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10] 0x787391b580
	enum Hinting;//[Offset: 0x14, Size: 0x1] 0x78736af880
	enum LoadingPolicy;//[Offset: 0x15, Size: 0x1] 0x78736af7e0
	int SubFaceIndex;//[Offset: 0x18, Size: 0x4] 0x7873919600
	Object* FontFaceAsset;//[Offset: 0x20, Size: 0x8] 0x7873919680

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10] 0x787391b300
	float ScalingFactor;//[Offset: 0x10, Size: 0x4] 0x787391b380

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10] 0x78736af9c0
	FString Cultures;//[Offset: 0x28, Size: 0x10] 0x787391b280

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x788a4de300
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x788a4de180

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x788a4de280
	int Value;//[Offset: 0x4, Size: 0x4] 0x788a4de200

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78739ed080
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78739ed100
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78739ed180
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78739ed200
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78739ed280
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78739ed300
	bool bOverride_OutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78739ed380
	bool TwoSided;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78739ed400
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78739ed480
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78739ed500
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78739ed580
	byte BlendMode;//[Offset: 0x2, Size: 0x1] 0x78739ed600
	byte ShadingModel;//[Offset: 0x3, Size: 0x1] 0x78739ed680
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4] 0x78739eb600

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10] 0x78739b83a0
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10] 0x78739b8440
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10] 0x78739b84e0
	MaterialLayersFunctions MaterialLayers;//[Offset: 0x30, Size: 0x20] 0x7873a3f100
	bool bHasMaterialLayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7873a3f180

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x7873a3f600

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7873a3f680
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7873a3f700
	Guid ExpressionGuid;//[Offset: 0x14, Size: 0x10] 0x7873a3f780

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x7873a3f400
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1] 0x7873a3f480
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1] 0x7873a3f500
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1] 0x7873a3f580

--------------------------------
Class: StaticTerrainLayerWeightParameter
	FName LayerName;//[Offset: 0x0, Size: 0x8] 0x7873a3f280
	int WeightmapIndex;//[Offset: 0x8, Size: 0x4] 0x7873a3f300
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7873a3f380

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10] 0x78739b4840
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10] 0x78739b48e0

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1] 0x7873a6fb00
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1] 0x7873a6fb80
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1] 0x7873a6fc00
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x290, Size: 0x1] 0x7873a6fc80
	bool bIsLocalViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x290, Size: 0x1] 0x7873a6fd00
	float BaseEyeHeight;//[Offset: 0x294, Size: 0x4] 0x7873a6fd80
	byte AutoPossessPlayer;//[Offset: 0x298, Size: 0x1] 0x7873a6fe00
	enum AutoPossessAI;//[Offset: 0x299, Size: 0x1] 0x78739be200
	byte RemoteViewPitch;//[Offset: 0x29a, Size: 0x1] 0x7873a6ff00
	class Controller* AIControllerClass;//[Offset: 0x2a0, Size: 0x8] 0x78739be2a0
	PlayerState* PlayerState;//[Offset: 0x2a8, Size: 0x8] 0x7873a6ff80
	Controller* LastHitBy;//[Offset: 0x2b8, Size: 0x8] 0x7873a6e780
	Controller* Controller;//[Offset: 0x2c0, Size: 0x8] 0x7873a6e800
	Controller* PreviousController;//[Offset: 0x2c8, Size: 0x8] 0x7873a6e880
	delegate ReceiveControllerChangedDelegate;//[Offset: 0x2d4, Size: 0x1] 0x7873a6e900
	delegate ReceiveRestartedDelegate;//[Offset: 0x2d5, Size: 0x1] 0x7873a6e980
	Vector ControlInputVector;//[Offset: 0x2d8, Size: 0x18] 0x7873a6ea00
	Vector LastControlInputVector;//[Offset: 0x2f0, Size: 0x18] 0x7873a6ea80
	void SpawnDefaultController();// 0x10d92200 0x7873a90be0
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x10d92378 0x7873a90cc0
	void ReceiveUnpossessed(Controller* OldController);// 0xb8f1ab4 0x7873a90da0
	void ReceiveRestarted();// 0xb8f1ab4 0x7873a90e80
	void ReceivePossessed(Controller* NewController);// 0xb8f1ab4 0x7873a90f60
	void ReceiveControllerChanged(Controller* OldController, Controller* NewController);// 0xb8f1ab4 0x7873a91040
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x10d92688 0x7873a91120
	void OnRep_PlayerState();// 0x10d92470 0x7873a91200
	void OnRep_Controller();// 0x10d9248c 0x7873a912e0
	bool IsPlayerControlled();// 0x10d922b8 0x7873a913c0
	bool IsPawnControlled();// 0x10d924fc 0x7873a914a0
	bool IsMoveInputIgnored();// 0x10d91db0 0x7873a91580
	bool IsLocallyViewed();// 0x10d9261c 0x7873a91660
	bool IsLocallyControlled();// 0x10d922f8 0x7873a91740
	bool IsControlled();// 0x10d9253c 0x7873a91820
	bool IsBotControlled();// 0x10d92278 0x7873a91900
	Vector GetPendingMovementInputVector();// 0x10d92078 0x7873a919e0
	Vector GetNavAgentLocation();// 0x10d92338 0x7873a91ac0
	PawnMovementComponent* GetMovementComponent();// 0x10d9280c 0x7873a91ba0
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x10d92574 0x7873a91c80
	PlayerController* GetLocalViewingPlayerController();// 0x10d92654 0x787383e780
	Vector GetLastMovementInputVector();// 0x10d92040 0x787383e860
	Rotator GetControlRotation();// 0x10d924a8 0x787383e940
	Controller* GetController();// 0x10d924e0 0x787383ea20
	Rotator GetBaseAimRotation();// 0x10d92238 0x787383eb00
	void DetachFromControllerPendingDestroy();// 0x10d9221c 0x787383ebe0
	Vector ConsumeMovementInputVector();// 0x10d92000 0x787383ecc0
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x10d920b0 0x787383eda0
	void AddControllerYawInput(float Val);// 0x10d91ea0 0x787383ee80
	void AddControllerRollInput(float Val);// 0x10d91df0 0x787383ef60
	void AddControllerPitchInput(float Val);// 0x10d91f50 0x787383f040

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x290, Size: 0x8] 0x7873c58c00
	delegate OnInstigatedAnyDamage;//[Offset: 0x2a0, Size: 0x10] 0x7873c58c80
	delegate OnPossessedPawnChanged;//[Offset: 0x2b0, Size: 0x10] 0x7873c58d00
	FName StateName;//[Offset: 0x2c0, Size: 0x8] 0x7873c58d80
	Pawn* Pawn;//[Offset: 0x2c8, Size: 0x8] 0x7873c58e00
	Character* Character;//[Offset: 0x2d8, Size: 0x8] 0x7873c58e80
	SceneComponent* TransformComponent;//[Offset: 0x2e0, Size: 0x8] 0x7873c58f00
	Rotator ControlRotation;//[Offset: 0x300, Size: 0x18] 0x7873c58f80
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1] 0x7873c59000
	void UnPossess();// 0x10ba9934 0x7873c70a20
	void StopMovement();// 0x10ba9814 0x7873c70b00
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x10ba9f70 0x7873c70be0
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x10ba975c 0x7873c70cc0
	void SetIgnoreLookInput(bool bNewLookInput);// 0x10ba9648 0x7873c70da0
	void SetControlRotation(out const Rotator NewRotation);// 0x10baa074 0x7873c70e80
	void ResetIgnoreMoveInput();// 0x10ba9740 0x7873c70f60
	void ResetIgnoreLookInput();// 0x10ba962c 0x7873c71040
	void ResetIgnoreInputFlags();// 0x10ba95d0 0x7873c71120
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0xb8f1ab4 0x7873c71200
	void ReceivePossess(Pawn* PossessedPawn);// 0xb8f1ab4 0x7873c712e0
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0xb8f1ab4 0x7873c713c0
	void Possess(Pawn* InPawn);// 0x10ba9948 0x7873c714a0
	void OnRep_PlayerState();// 0x10ba9de0 0x7873c71580
	void OnRep_Pawn();// 0x10ba9dfc 0x7873c71660
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x10ba9e18 0x7873c71740
	Pawn* K2_GetPawn();// 0x10ba9b28 0x7873c71820
	bool IsPlayerController();// 0x10ba9a8c 0x7873c71900
	bool IsMoveInputIgnored();// 0x10ba9700 0x7873c719e0
	bool IsLookInputIgnored();// 0x10ba95ec 0x7873c71ac0
	bool IsLocalPlayerController();// 0x10ba9a30 0x7873c71ba0
	bool IsLocalController();// 0x10ba99f0 0x7873c71c80
	Actor* GetViewTarget();// 0x10ba9aec 0x7873c4e780
	void GetPlayerViewPoint(out Vector Location, out Rotator Rotation);// 0x10ba9830 0x7873c4e860
	Rotator GetDesiredRotation();// 0x10ba9aac 0x7873c4e940
	Rotator GetControlRotation();// 0x10baa12c 0x7873c4ea20
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x10ba9b5c 0x7873c4eb00
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x10ba9ca4 0x7873c4ebe0

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x288, Size: 0x4] 0x7873f6c400
	int PlayerId;//[Offset: 0x28c, Size: 0x4] 0x7873f6c480
	byte CompressedPing;//[Offset: 0x290, Size: 0x1] 0x7873f6c500
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x292, Size: 0x1] 0x7873f6c580
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x292, Size: 0x1] 0x7873f6c600
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x292, Size: 0x1] 0x7873f6a580
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x292, Size: 0x1] 0x7873f6a600
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x292, Size: 0x1] 0x7873f6a680
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x292, Size: 0x1] 0x7873f6a700
	int StartTime;//[Offset: 0x294, Size: 0x4] 0x7873f6a780
	class LocalMessage* EngineMessageClass;//[Offset: 0x298, Size: 0x8] 0x7873ee7b80
	FString SavedNetworkAddress;//[Offset: 0x2a8, Size: 0x10] 0x7873f6a800
	UniqueNetIdRepl UniqueId;//[Offset: 0x2b8, Size: 0x30] 0x7873f6a880
	delegate OnPawnSet;//[Offset: 0x2f0, Size: 0x10] 0x7873f6a900
	Pawn* PawnPrivate;//[Offset: 0x300, Size: 0x8] 0x7873f6a980
	FString PlayerNamePrivate;//[Offset: 0x378, Size: 0x10] 0x7873f6aa00
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0xb8f1ab4 0x7873f76c20
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0xb8f1ab4 0x7873f76d00
	void OnRep_UniqueId();// 0x10dbea00 0x7873f76de0
	void OnRep_Score();// 0x10dbea70 0x7873f76ec0
	void OnRep_PlayerName();// 0x10dbea54 0x7873f76fa0
	void OnRep_PlayerId();// 0x10dbea1c 0x7873f77080
	void OnRep_bIsInactive();// 0x10dbea38 0x7873f77160
	void OnPawnPrivateDestroyed(Actor* InActor);// 0x10dbea8c 0x7873f77240
	bool IsOnlyASpectator();// 0x10dbe8ac 0x7873f77320
	FString GetPlayerName();// 0x10dbe900 0x7873f73a40
	PlayerController* GetPlayerController();// 0x10dbe9b0 0x7873f73b20
	float GetPingInMilliseconds();// 0x10dbe8cc 0x7873f73c00
	Pawn* GetPawn();// 0x10dbe9e4 0x7873f73ce0
	UniqueNetIdRepl BP_GetUniqueId();// 0x10dbe790 0x7873f73dc0

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x20, Size: 0x10] 0x7873742680

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x320, Size: 0x8] 0x7873c82a80
	Pawn* AcknowledgedPawn;//[Offset: 0x328, Size: 0x8] 0x7873c82b00
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x330, Size: 0x8] 0x7873c82b80
	HUD* MyHUD;//[Offset: 0x338, Size: 0x8] 0x7873c82c00
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x340, Size: 0x8] 0x7873c82c80
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x348, Size: 0x8] 0x7873bbdda0
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1] 0x7873c82d00
	Rotator TargetViewRotation;//[Offset: 0x358, Size: 0x18] 0x7873c82d80
	float SmoothTargetViewRotationSpeed;//[Offset: 0x388, Size: 0x4] 0x7873c82e00
	Actor*[] HiddenActors;//[Offset: 0x390, Size: 0x10] 0x7873bbde40
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x3a0, Size: 0x10] 0x7873bbdee0
	float LastSpectatorStateSynchTime;//[Offset: 0x3b4, Size: 0x4] 0x7873c82f80
	Vector LastSpectatorSyncLocation;//[Offset: 0x3b8, Size: 0x18] 0x7873c83000
	Rotator LastSpectatorSyncRotation;//[Offset: 0x3d0, Size: 0x18] 0x7873c83080
	int ClientCap;//[Offset: 0x3e8, Size: 0x4] 0x7873c83100
	CheatManager* CheatManager;//[Offset: 0x3f0, Size: 0x8] 0x7873c83180
	class CheatManager* CheatClass;//[Offset: 0x3f8, Size: 0x8] 0x7873bbdf80
	PlayerInput* PlayerInput;//[Offset: 0x400, Size: 0x8] 0x7873c81100
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x408, Size: 0x10] 0x7873bbe020
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4a8, Size: 0x1] 0x7873c81200
	byte NetPlayerIndex;//[Offset: 0x4a9, Size: 0x1] 0x7873c81280
	NetConnection* PendingSwapConnection;//[Offset: 0x508, Size: 0x8] 0x7873c81300
	NetConnection* NetConnection;//[Offset: 0x510, Size: 0x8] 0x7873c81380
	float InputYawScale;//[Offset: 0x530, Size: 0x4] 0x7873c81400
	float InputPitchScale;//[Offset: 0x534, Size: 0x4] 0x7873c81480
	float InputRollScale;//[Offset: 0x538, Size: 0x4] 0x7873c81500
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53c, Size: 0x1] 0x7873c81580
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x53c, Size: 0x1] 0x7873c81600
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x53c, Size: 0x1] 0x7873c81680
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x53c, Size: 0x1] 0x7873c81700
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x53c, Size: 0x1] 0x7873c81780
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x53c, Size: 0x1] 0x7873c81800
	bool bEnableStreamingSource;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x53c, Size: 0x1] 0x7873c81880
	bool bStreamingSourceShouldActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x53c, Size: 0x1] 0x7873c81900
	bool bStreamingSourceShouldBlockOnSlowStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53d, Size: 0x1] 0x7873c81980
	float ForceFeedbackScale;//[Offset: 0x540, Size: 0x4] 0x7873c81a00
	Key[] ClickEventKeys;//[Offset: 0x548, Size: 0x10] 0x7873bbe0c0
	byte DefaultMouseCursor;//[Offset: 0x558, Size: 0x1] 0x7873c81b00
	byte CurrentMouseCursor;//[Offset: 0x559, Size: 0x1] 0x7873c81b80
	byte DefaultClickTraceChannel;//[Offset: 0x55a, Size: 0x1] 0x7873c81c00
	byte CurrentClickTraceChannel;//[Offset: 0x55b, Size: 0x1] 0x7873c81c80
	float HitResultTraceDistance;//[Offset: 0x55c, Size: 0x4] 0x7873c81d00
	uint16 SeamlessTravelCount;//[Offset: 0x560, Size: 0x2] 0x7873c81d80
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x562, Size: 0x2] 0x7873c81e00
	InputComponent* InactiveStateInputComponent;//[Offset: 0x5d8, Size: 0x8] 0x7873c81e80
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5e0, Size: 0x1] 0x7873c81f00
	TouchInterface* CurrentTouchInterface;//[Offset: 0x5f8, Size: 0x8] 0x7873c81f80
	SpectatorPawn* SpectatorPawn;//[Offset: 0x678, Size: 0x8] 0x7873c82000
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 0x1] 0x7873c82080
	Vector SpawnLocation;//[Offset: 0x688, Size: 0x18] 0x7873c82100
	bool WasInputKeyJustReleased(Key Key);// 0x10dadc6c 0x7873c7a6c0
	bool WasInputKeyJustPressed(Key Key);// 0x10dade0c 0x7873c7a7a0
	void ToggleSpeaking(bool bInSpeaking);// 0x10db3904 0x7873c7a880
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x10daff80 0x7873c7a960
	void SwitchLevel(FString URL);// 0x10db4c40 0x7873c7aa40
	bool StreamingSourceShouldBlockOnSlowStreaming();// 0x10db3b24 0x7873c7ab20
	bool StreamingSourceShouldActivate();// 0x10db3b64 0x7873c7ac00
	void StopHapticEffect(enum Hand);// 0x10dafd44 0x7873c7ace0
	void StartFire(byte FireModeNum);// 0x10db3a74 0x7873c77400
	void SetVirtualJoystickVisibility(bool bVisible);// 0x10dacf7c 0x7873c774e0
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x10dacce4 0x7873c775c0
	void SetName(FString S);// 0x10db4cfc 0x7873c776a0
	void SetMouseLocation(const int X, const int Y);// 0x10db3be4 0x7873c77780
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x10db0c3c 0x7873c77860
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x10dafc08 0x7873c77940
	void SetDisableHaptics(bool bNewDisabled);// 0x10dafb50 0x7873c77a20
	void SetDeprecatedInputYawScale(float NewValue);// 0x10db54e8 0x7873c77b00
	void SetDeprecatedInputRollScale(float NewValue);// 0x10db5398 0x7873c77be0
	void SetDeprecatedInputPitchScale(float NewValue);// 0x10db5440 0x7873c77cc0
	void SetControllerLightColor(Color Color);// 0x10dafaac 0x7873c77da0
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x10dac86c 0x7873c77e80
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x10dacbac 0x7873c77f60
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x10dacaa8 0x7873c78040
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x10dae558 0x7873c78120
	void ServerViewPrevPlayer();// 0x10dae654 0x7873c78200
	void ServerViewNextPlayer();// 0x10dae6b0 0x7873c782e0
	void ServerVerifyViewTarget();// 0x10dae70c 0x7873c783c0
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x10dae768 0x7873c784a0
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x10dae844 0x7873c78580
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x10dae920 0x7873c78660
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x10db33e8 0x7873c78740
	void ServerUnblockPlayer(UniqueNetIdRepl PlayerId);// 0x10db2b78 0x7873c78820
	void ServerToggleAILogging();// 0x10dae35c 0x7873c78900
	void ServerShortTimeout();// 0x10daea5c 0x7873c789e0
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x10db56e4 0x7873c78ac0
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x10daeb70 0x7873c78ba0
	void ServerRestartPlayer();// 0x10daecac 0x7873c78c80
	void ServerRecvClientInputFrame(int RecvClientInputFrame, const byte[] Data);// 0x10dac650 0x7873c78d60
	void ServerPause();// 0x10daed08 0x7873c78e40
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x10daed64 0x7873c78f20
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x10db3668 0x7873c79000
	void ServerExecRPC(FString Msg);// 0x10db5108 0x7873c75720
	void ServerExec(FString Msg);// 0x10db5054 0x7873c75800
	void ServerCheckClientPossessionReliable();// 0x10daeab8 0x7873c758e0
	void ServerCheckClientPossession();// 0x10daeb14 0x7873c759c0
	void ServerChangeName(FString S);// 0x10daee3c 0x7873c75aa0
	void ServerCamera(FName NewMode);// 0x10daef28 0x7873c75b80
	void ServerBlockPlayer(UniqueNetIdRepl PlayerId);// 0x10db2df8 0x7873c75c60
	void ServerAcknowledgePossession(Pawn* P);// 0x10daf010 0x7873c75d40
	void SendToConsole(FString Command);// 0x10db27cc 0x7873c75e20
	void RestartLevel();// 0x10db52b0 0x7873c75f00
	void ResetControllerLightColor();// 0x10dafa98 0x7873c75fe0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x10db3cd4 0x7873c760c0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x10dafdec 0x7873c761a0
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x10db0070 0x7873c76280
	void Pause();// 0x10db4db8 0x7873c76360
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x10dac7b4 0x7873c76440
	void LocalTravel(FString URL);// 0x10db51f4 0x7873c76520
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x10db0528 0x7873c76600
	bool IsStreamingSourceEnabled();// 0x10db3ba4 0x7873c766e0
	bool IsInputKeyDown(Key Key);// 0x10dadfac 0x7873c767c0
	void GetViewportSize(out int SizeX, out int SizeY);// 0x10db0d64 0x7873c768a0
	SpectatorPawn* GetSpectatorPawn();// 0x10dac798 0x7873c76980
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x10dad4d4 0x7873c76a60
	Vector GetInputVectorKeyState(Key Key);// 0x10dad930 0x7873c76b40
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x10dad788 0x7873c76c20
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x10dad234 0x7873c76d00
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x10dad5ec 0x7873c76de0
	float GetInputKeyTimeDown(Key Key);// 0x10dad338 0x7873c76ec0
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x10dad0e4 0x7873c76fa0
	float GetInputAnalogKeyState(Key Key);// 0x10dadad0 0x7873c77080
	HUD* GetHUD();// 0x10db0d30 0x7873c77160
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x10db40dc 0x7873c77240
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x10db42f8 0x7873c77320
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x10db44fc 0x7873c73a40
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x10db4700 0x7873c73b20
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x10db48d0 0x7873c73c00
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x10db4a88 0x7873c73ce0
	Vector GetFocalLocation();// 0x10dac758 0x7873c73dc0
	float GetDeprecatedInputYawScale();// 0x10db55f8 0x7873c73ea0
	float GetDeprecatedInputRollScale();// 0x10db5590 0x7873c73f80
	float GetDeprecatedInputPitchScale();// 0x10db55c4 0x7873c74060
	void FOV(float NewFOV);// 0x10db52cc 0x7873c74140
	void EnableCheats();// 0x10db537c 0x7873c74220
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x10db3e2c 0x7873c74300
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x10db3fcc 0x7873c743e0
	void ConsoleKey(Key Key);// 0x10db2888 0x7873c744c0
	void ClientWasKicked(const FText KickReason);// 0x10daf3bc 0x7873c745a0
	void ClientVoiceHandshakeComplete();// 0x10db38e8 0x7873c74680
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x10daf4d0 0x7873c74760
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x10daf58c 0x7873c74840
	void ClientUnmutePlayers(const UniqueNetIdRepl[] PlayerIds);// 0x10db2a24 0x7873c74920
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x10db3078 0x7873c74a00
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x10daf768 0x7873c74ae0
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x10daf904 0x7873c74bc0
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x10dae3b8 0x7873c74ca0
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x10db0338 0x7873c74d80
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x10db0704 0x7873c74e60
	void ClientStopCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x10db0800 0x7873c74f40
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x10db0904 0x7873c75020
	void ClientStartOnlineSession();// 0x10daf3a0 0x7873c75100
	void ClientStartCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent);// 0x10db1b70 0x7873c751e0
	void ClientStartCameraShake(class CameraShakeBase Shake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x10db1c60 0x7873c752c0
	void ClientSpawnGenericCameraLensEffect(class Actor LensEffectEmitterClass);// 0x10db0a80 0x7873c753a0
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x10db09d0 0x7873c75480
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x10db0b30 0x7873c75560
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x10db562c 0x7873c75640
	void ClientSetHUD(class HUD NewHUDClass);// 0x10db0e68 0x7873c71d60
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x10db0f18 0x7873c71e40
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x10db1060 0x7873c71f20
	void ClientSetCameraMode(FName NewCamMode);// 0x10db11f8 0x7873c72000
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);// 0x10db12a8 0x7873c720e0
	void ClientSetBlockOnAsyncLoading();// 0x10db14dc 0x7873c721c0
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x10db4e84 0x7873c722a0
	void ClientReturnToMainMenu(FString ReturnReason);// 0x10db4f98 0x7873c72380
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x10daf2d4 0x7873c72460
	void ClientRestart(Pawn* NewPawn);// 0x10db14f8 0x7873c72540
	void ClientReset();// 0x10db15a8 0x7873c72620
	void ClientRepObjRef(Object* Object);// 0x10db4dd4 0x7873c72700
	void ClientRecvServerAckFrameDebug(byte NumBuffered, float TargetNumBufferedCmds);// 0x10dac410 0x7873c727e0
	void ClientRecvServerAckFrame(int LastProcessedInputFrame, int RecvServerFrameNumber, int8 TimeDilation);// 0x10dac50c 0x7873c728c0
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int SWITCH, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x10daf0f8 0x7873c729a0
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x10db15c4 0x7873c72a80
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x10db1754 0x7873c72b60
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x10db18a0 0x7873c72c40
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x10db1a2c 0x7873c72d20
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x10db0430 0x7873c72e00
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum Space, Rotator CustomPlaySpace);// 0x10db1df0 0x7873c72ee0
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x10db3230 0x7873c72fc0
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x10db20f4 0x7873c730a0
	void ClientIgnoreMoveInput(bool bIgnore);// 0x10db2248 0x7873c73180
	void ClientIgnoreLookInput(bool bIgnore);// 0x10db2300 0x7873c73260
	void ClientGotoState(FName NewState);// 0x10db23b8 0x7873c73340
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x10db2468 0x7873c73420
	void ClientForceGarbageCollection();// 0x10db256c 0x7873c73500
	void ClientFlushLevelStreaming();// 0x10db2588 0x7873c735e0
	void ClientEndOnlineSession();// 0x10daf384 0x7873c736c0
	void ClientEnableNetworkVoice(bool bEnable);// 0x10db39bc 0x7873c737a0
	void ClientCommitMapChange();// 0x10db259c 0x7873c73880
	void ClientClearCameraLensEffects();// 0x10db09b4 0x7873c73960
	void ClientCapBandwidth(int Cap);// 0x10db25b8 0x7873c70080
	void ClientCancelPendingMapChange();// 0x10db2668 0x7873c70160
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x10db2684 0x7873c70240
	void ClearAudioListenerOverride();// 0x10dacb98 0x7873c70320
	void ClearAudioListenerAttenuationOverride();// 0x10daca94 0x7873c70400
	bool CanRestartPlayer();// 0x10daca54 0x7873c704e0
	void Camera(FName NewMode);// 0x10dacecc 0x7873c705c0
	void AddYawInput(float Val);// 0x10dae1fc 0x7873c706a0
	void AddRollInput(float Val);// 0x10dae14c 0x7873c70780
	void AddPitchInput(float Val);// 0x10dae2ac 0x7873c70860
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x10dad034 0x7873c70940

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8] 0x788ab79300

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8] 0x7873bced80
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4] 0x7873bcee00
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4] 0x7873bcee80
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4] 0x7873bcef00

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8] 0x7873e70580

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x288, Size: 0x8] 0x7873e0b380
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1] 0x7873e0b400
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1] 0x7873e0b480
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1] 0x7873e0b500
	int CurrentTargetIndex;//[Offset: 0x294, Size: 0x4] 0x7873e0b580
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1] 0x7873e09500
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x298, Size: 0x1] 0x7873e09580
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x298, Size: 0x1] 0x7873e09600
	Actor*[] PostRenderedActors;//[Offset: 0x2a0, Size: 0x10] 0x7873db8f80
	FName[] DebugDisplay;//[Offset: 0x2b8, Size: 0x10] 0x7873db9020
	FName[] ToggledDebugCategories;//[Offset: 0x2c8, Size: 0x10] 0x7873db6780
	Canvas* Canvas;//[Offset: 0x2d8, Size: 0x8] 0x7873e09800
	Canvas* DebugCanvas;//[Offset: 0x2e0, Size: 0x8] 0x7873e09880
	DebugTextInfo[] DebugTextList;//[Offset: 0x2e8, Size: 0x10] 0x7873db6820
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x2f8, Size: 0x8] 0x7873db68c0
	Actor* ShowDebugTargetActor;//[Offset: 0x300, Size: 0x8] 0x7873e09980
	void ShowHUD();// 0x10c28088 0x7873deff20
	void ShowDebugToggleSubCategory(FName Category);// 0x10c27f30 0x7873decaa0
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x10c27e88 0x7873decb80
	void ShowDebug(FName DebugType);// 0x10c27fd8 0x7873decc60
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x10c27988 0x7873decd40
	void RemoveAllDebugStrings();// 0x10c27a84 0x7873dece20
	void ReceiveHitBoxRelease(const FName BoxName);// 0xb8f1ab4 0x7873decf00
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0xb8f1ab4 0x7873decfe0
	void ReceiveHitBoxClick(const FName BoxName);// 0xb8f1ab4 0x7873ded0c0
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0xb8f1ab4 0x7873ded1a0
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0xb8f1ab4 0x7873ded280
	Vector Project(Vector Location, bool bClampToZeroPlane);// 0x10c25fa4 0x7873ded360
	void PreviousDebugTarget();// 0x10c25968 0x7873ded440
	void NextDebugTarget();// 0x10c25984 0x7873ded520
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x10c27794 0x7873ded600
	PlayerController* GetOwningPlayerController();// 0x10c259d4 0x7873ded6e0
	Pawn* GetOwningPawn();// 0x10c259a0 0x7873ded7c0
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x10c25bd0 0x7873ded8a0
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x10c26a84 0x7873ded980
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x10c26c60 0x7873deda60
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x10c27518 0x7873dedb40
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x10c27128 0x7873dedc20
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x10c260ac 0x7873dedd00
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x10c263ec 0x7873dedde0
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x10c2665c 0x7873dedec0
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x10c272f8 0x7873dedfa0
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x10c25e14 0x7873dee080
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x10c25a08 0x7873dee160
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x10c27a98 0x7873dee240

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4] 0x7873df8400
	float OrgY;//[Offset: 0x2c, Size: 0x4] 0x7873df6380
	float ClipX;//[Offset: 0x30, Size: 0x4] 0x7873df6400
	float ClipY;//[Offset: 0x34, Size: 0x4] 0x7873df6480
	Color DrawColor;//[Offset: 0x38, Size: 0x4] 0x7873df6500
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7873df6580
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7873df6600
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x7873df6680
	int SizeX;//[Offset: 0x40, Size: 0x4] 0x7873df6700
	int SizeY;//[Offset: 0x44, Size: 0x4] 0x7873df6780
	Plane ColorModulate;//[Offset: 0x50, Size: 0x20] 0x7873df6800
	Texture2D* DefaultTexture;//[Offset: 0x70, Size: 0x8] 0x7873df6880
	Texture2D* GradientTexture0;//[Offset: 0x78, Size: 0x8] 0x7873df6900
	ReporterGraph* ReporterGraph;//[Offset: 0x80, Size: 0x8] 0x7873df6980
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x10b7d8f0 0x7873de2a80
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x10b7da3c 0x7873de2b60
	Vector K2_Project(Vector WorldLocation);// 0x10b7dc84 0x7873de2c40
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x10b7e054 0x7873de2d20
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x10b7ee88 0x7873de2e00
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x10b7e828 0x7873de2ee0
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x10b7dd38 0x7873de2fc0
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x10b7defc 0x7873de30a0
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x10b7ec38 0x7873de3180
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x10b7f178 0x7873de3260
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x10b7e1ac 0x7873de3340
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x10b7e338 0x7873de3420
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x10b7db44 0x7873de3500

--------------------------------
Class: Plane.Vector
	double W;//[Offset: 0x18, Size: 0x8] 0x788a4dbf00

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x10] 0x78739e0d00
	Vector2D V0_UV;//[Offset: 0x10, Size: 0x10] 0x78739e0d80
	LinearColor V0_Color;//[Offset: 0x20, Size: 0x10] 0x78739e0e00
	Vector2D V1_Pos;//[Offset: 0x30, Size: 0x10] 0x78739e0e80
	Vector2D V1_UV;//[Offset: 0x40, Size: 0x10] 0x78739e0f00
	LinearColor V1_Color;//[Offset: 0x50, Size: 0x10] 0x78739e0f80
	Vector2D V2_Pos;//[Offset: 0x60, Size: 0x10] 0x78739e1000
	Vector2D V2_UV;//[Offset: 0x70, Size: 0x10] 0x78739e1080
	LinearColor V2_Color;//[Offset: 0x80, Size: 0x10] 0x78739df800

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8] 0x78739d6780
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0x18] 0x78739d6800
	Vector SrcActorDesiredOffset;//[Offset: 0x20, Size: 0x18] 0x78739d6880
	FString DebugText;//[Offset: 0x38, Size: 0x10] 0x78739d6900
	float TimeRemaining;//[Offset: 0x48, Size: 0x4] 0x78739d6980
	float Duration;//[Offset: 0x4c, Size: 0x4] 0x78739d6a00
	Color TextColor;//[Offset: 0x50, Size: 0x4] 0x78739d6a80
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78739d6b00
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x78739d6b80
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1] 0x78739d6c00
	Vector OrigActorLocation;//[Offset: 0x58, Size: 0x18] 0x78739d6c80
	Font* Font;//[Offset: 0x70, Size: 0x8] 0x78739d6d00
	float FontScale;//[Offset: 0x78, Size: 0x4] 0x78739d6d80

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x288, Size: 0x8] 0x7873f6b300
	SceneComponent* TransformComponent;//[Offset: 0x290, Size: 0x8] 0x7873f6b380
	float DefaultFOV;//[Offset: 0x2a0, Size: 0x4] 0x7873f6b400
	float DefaultOrthoWidth;//[Offset: 0x2a8, Size: 0x4] 0x7873f6b480
	float DefaultAspectRatio;//[Offset: 0x2b0, Size: 0x4] 0x7873f6b500
	CameraCacheEntry CameraCache;//[Offset: 0x320, Size: 0x790] 0x7873f6b580
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0xab0, Size: 0x790] 0x7873f69500
	TViewTarget ViewTarget;//[Offset: 0x1240, Size: 0x7a0] 0x7873f69580
	TViewTarget PendingViewTarget;//[Offset: 0x19e0, Size: 0x7a0] 0x7873f69600
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x21b0, Size: 0x790] 0x7873f69680
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2940, Size: 0x790] 0x7873f69700
	CameraModifier*[] ModifierList;//[Offset: 0x30d0, Size: 0x10] 0x7873ee5420
	class CameraModifier[] DefaultModifiers;//[Offset: 0x30e0, Size: 0x10] 0x7873ee5560
	float FreeCamDistance;//[Offset: 0x30f0, Size: 0x4] 0x7873f69800
	Vector FreeCamOffset;//[Offset: 0x30f8, Size: 0x18] 0x7873f69880
	Vector ViewTargetOffset;//[Offset: 0x3110, Size: 0x18] 0x7873f69900
	delegate OnAudioFadeChangeEvent;//[Offset: 0x3128, Size: 0x10] 0x7873f69980
	interface classNone[] CameraLensEffects;//[Offset: 0x3150, Size: 0x10] 0x7873ee5600
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x3160, Size: 0x8] 0x7873f69a80
	CameraAnimInst* AnimInstPool;//[Offset: 0x3168, Size: 0x8] 0x7873f69b00
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x31a8, Size: 0x10] 0x7873ee56a0
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x31c8, Size: 0x10] 0x7873ee5740
	CameraAnimInst*[] FreeAnims;//[Offset: 0x31d8, Size: 0x10] 0x7873ee57e0
	CameraActor* AnimCameraActor;//[Offset: 0x31e8, Size: 0x8] 0x7873f69d00
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31f0, Size: 0x1] 0x7873f69d80
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31f0, Size: 0x1] 0x7873f69e00
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31f0, Size: 0x1] 0x7873f69e80
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x31f0, Size: 0x1] 0x7873f69f00
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31f1, Size: 0x1] 0x7873f69f80
	float ViewPitchMin;//[Offset: 0x31f4, Size: 0x4] 0x7873f6a000
	float ViewPitchMax;//[Offset: 0x31f8, Size: 0x4] 0x7873f6a080
	float ViewYawMin;//[Offset: 0x31fc, Size: 0x4] 0x7873f6a100
	float ViewYawMax;//[Offset: 0x3200, Size: 0x4] 0x7873f6a180
	float ViewRollMin;//[Offset: 0x3204, Size: 0x4] 0x7873f6a200
	float ViewRollMax;//[Offset: 0x3208, Size: 0x4] 0x7873f6a280
	float ServerUpdateCameraTimeout;//[Offset: 0x3210, Size: 0x4] 0x7873f6a300
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();// 0x10da69f0 0x7873f74300
	void StopCameraShake(CameraShakeBase* ShakeInstance, bool bImmediately);// 0x10da77d4 0x7873f743e0
	void StopCameraFade();// 0x10da7184 0x7873f744c0
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x10da6ad8 0x7873f745a0
	void StopAllInstancesOfCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x10da74cc 0x7873f74680
	void StopAllInstancesOfCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x10da76d0 0x7873f74760
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x10da6bdc 0x7873f74840
	void StopAllCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x10da73c8 0x7873f74920
	void StopAllCameraShakes(bool bImmediately);// 0x10da7618 0x7873f74a00
	void StopAllCameraAnims(bool bImmediate);// 0x10da6a20 0x7873f74ae0
	CameraShakeBase* StartCameraShakeFromSource(class CameraShakeBase ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x10da78d8 0x7873f74bc0
	CameraShakeBase* StartCameraShake(class CameraShakeBase ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x10da7ab8 0x7873f74ca0
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x10da71a0 0x7873f74d80
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x10da7038 0x7873f74e60
	void SetGameCameraCutThisFrame();// 0x10da6a04 0x7873f74f40
	void RemoveGenericCameraLensEffect(interface classNone Emitter);// 0x10da7dd4 0x7873f75020
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x10da7ff8 0x7873f75100
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x10da7c50 0x7873f751e0
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x10da6ce0 0x7873f752c0
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x10da82d0 0x7873f753a0
	void OnPhotographySessionStart();// 0x10da82b4 0x7873f75480
	void OnPhotographySessionEnd();// 0x10da8298 0x7873f75560
	void OnPhotographyMultiPartCaptureStart();// 0x10da827c 0x7873f75640
	void OnPhotographyMultiPartCaptureEnd();// 0x10da8260 0x7873f71d60
	PlayerController* GetOwningPlayerController();// 0x10da8224 0x7873f71e40
	float GetFOVAngle();// 0x10da7fbc 0x7873f71f20
	Rotator GetCameraRotation();// 0x10da7f7c 0x7873f72000
	Vector GetCameraLocation();// 0x10da7f3c 0x7873f720e0
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x10da80b4 0x7873f721c0
	void ClearCameraLensEffects();// 0x10da7db8 0x7873f722a0
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0xb8f1ab4 0x7873f72380
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x10da816c 0x7873f72460
	interface classNone AddGenericCameraLensEffect(class Actor LensEffectEmitterClass);// 0x10da7e84 0x7873f72540
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x10da7d00 0x7873f72620

--------------------------------
Class: CameraShakeBase.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873b4a800
	float ShakeScale;//[Offset: 0x2c, Size: 0x4] 0x7873b4a880
	CameraShakePattern* RootShakePattern;//[Offset: 0x30, Size: 0x8] 0x7873b4a900
	PlayerCameraManager* CameraManager;//[Offset: 0x38, Size: 0x8] 0x7873b4a980
	void SetRootShakePattern(CameraShakePattern* InPattern);// 0x10b7b9b8 0x7873b50f60
	CameraShakePattern* GetRootShakePattern();// 0x10b7ba60 0x7873b51040

--------------------------------
Class: CameraShakePattern.Object

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8] 0x7873df3800
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8] 0x7873df3880
	float PlayRate;//[Offset: 0x50, Size: 0x4] 0x7873df3900
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8] 0x7873df3980
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8] 0x7873df3a00
	enum PlaySpace;//[Offset: 0x78, Size: 0x1] 0x7873db3e40
	void Stop(bool bImmediate);// 0x10b71ad4 0x7873de0780
	void SetScale(float NewDuration);// 0x10b71984 0x7873de0860
	void SetDuration(float NewDuration);// 0x10b71a2c 0x7873de0940

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8] 0x7873df3c80
	float AnimLength;//[Offset: 0x30, Size: 0x4] 0x7873df3d00
	Box BoundingBox;//[Offset: 0x38, Size: 0x38] 0x7873df3d80
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7873df3e00
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x7873df3e80
	float BaseFOV;//[Offset: 0x74, Size: 0x4] 0x7873df3f00
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x80, Size: 0x6b0] 0x7873df3f80
	float BasePostProcessBlendWeight;//[Offset: 0x730, Size: 0x4] 0x7873df4000

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10] 0x7873dbe020
	FName GroupName;//[Offset: 0x40, Size: 0x8] 0x7873e5ec00
	Color GroupColor;//[Offset: 0x48, Size: 0x4] 0x7873e5ec80
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x7873e5ed00
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1] 0x7873e5ed80
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1] 0x7873e5ee00
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1] 0x7873e5ee80
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1] 0x7873e5ef00

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10] 0x7873dbde40
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8] 0x7873dbdee0
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1] 0x7873e5fc80
	FString TrackTitle;//[Offset: 0x58, Size: 0x10] 0x7873e5fd00
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7873e5fd80
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x7873e5fe00
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x7873e5fe80
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x7873e5ff00
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x7873e5ff80
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x7873e5e780
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x7873e5e800
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1] 0x7873e5e880

--------------------------------
Class: PostProcessSettings
	bool bOverride_TemperatureType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78739cfa00
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78739cfa80
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78739cfb00
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78739cfb80
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78739cfc00
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78739cfc80
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78739cfd00
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78739cfd80
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78739cfe00
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78739cfe80
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78739cff00
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x78739cff80
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x78739ce780
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x78739ce800
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x78739ce880
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x78739ce900
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1] 0x78739ce980
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1] 0x78739cea00
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1] 0x78739cea80
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1] 0x78739ceb00
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1] 0x78739ceb80
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1] 0x78739cec00
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1] 0x78739cec80
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1] 0x78739ced00
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1] 0x78739ced80
	bool bOverride_ColorCorrectionHighlightsMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1] 0x78739cee00
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1] 0x78739cee80
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1] 0x78739cef00
	bool bOverride_ToneCurveAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1] 0x78739cef80
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1] 0x78739cf000
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1] 0x78739cf080
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1] 0x78739cf100
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x78739cf180
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1] 0x78739cf200
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1] 0x78739cf280
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1] 0x78739cf300
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1] 0x78739cf380
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1] 0x78739cf400
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1] 0x78739cf480
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1] 0x78739cf500
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1] 0x78739cf580
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1] 0x78739cf600
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1] 0x78739cf680
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1] 0x78739cf700
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1] 0x78739cf780
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1] 0x78739cd700
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1] 0x78739cd780
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1] 0x78739cd800
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1] 0x78739cd880
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1] 0x78739cd900
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1] 0x78739cd980
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1] 0x78739cda00
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1] 0x78739cda80
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1] 0x78739cdb00
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1] 0x78739cdb80
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1] 0x78739cdc00
	bool bOverride_BloomConvolutionScatterDispersion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1] 0x78739cdc80
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1] 0x78739cdd00
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1] 0x78739cdd80
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1] 0x78739cde00
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1] 0x78739cde80
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1] 0x78739cdf00
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1] 0x78739cdf80
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1] 0x78739ce000
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78739ce080
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x78739ce100
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x78739ce180
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x78739ce200
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1] 0x78739ce280
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1] 0x78739ce300
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1] 0x78739ce380
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1] 0x78739ce400
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1] 0x78739ce480
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1] 0x78739ce500
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1] 0x78739ce580
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1] 0x78739ce600
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1] 0x78739ce680
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1] 0x78739ce700
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1] 0x78739cc680
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1] 0x78739cc700
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x78739cc780
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1] 0x78739cc800
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1] 0x78739cc880
	bool bOverride_LocalExposureContrastScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1] 0x78739cc900
	bool bOverride_LocalExposureDetailStrength;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1] 0x78739cc980
	bool bOverride_LocalExposureBlurredLuminanceBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1] 0x78739cca00
	bool bOverride_LocalExposureBlurredLuminanceKernelSizePercent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1] 0x78739cca80
	bool bOverride_LocalExposureMiddleGreyBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1] 0x78739ccb00
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1] 0x78739ccb80
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1] 0x78739ccc00
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1] 0x78739ccc80
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1] 0x78739ccd00
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1] 0x78739ccd80
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1] 0x78739cce00
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1] 0x78739cce80
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1] 0x78739ccf00
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78739ccf80
	bool bOverride_FilmGrainIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x78739cd000
	bool bOverride_FilmGrainIntensityShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x78739cd080
	bool bOverride_FilmGrainIntensityMidtones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x78739cd100
	bool bOverride_FilmGrainIntensityHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1] 0x78739cd180
	bool bOverride_FilmGrainShadowsMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1] 0x78739cd200
	bool bOverride_FilmGrainHighlightsMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1] 0x78739cd280
	bool bOverride_FilmGrainHighlightsMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1] 0x78739cd300
	bool bOverride_FilmGrainTexelSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1] 0x78739cd380
	bool bOverride_FilmGrainTexture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1] 0x78739cd400
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1] 0x78739cd480
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1] 0x78739cd500
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1] 0x78739cd580
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1] 0x78739cd600
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1] 0x78739cd680
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1] 0x78739cb600
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1] 0x78739cb680
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1] 0x78739cb700
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1] 0x78739cb780
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1] 0x78739cb800
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1] 0x78739cb880
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1] 0x78739cb900
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1] 0x78739cb980
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1] 0x78739cba00
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1] 0x78739cba80
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1] 0x78739cbb00
	bool bOverride_RayTracingAOIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1] 0x78739cbb80
	bool bOverride_RayTracingAORadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1] 0x78739cbc00
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1] 0x78739cbc80
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1] 0x78739cbd00
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1] 0x78739cbd80
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1] 0x78739cbe00
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78739cbe80
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x78739cbf00
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x78739cbf80
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x78739cc000
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x78739cc080
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x78739cc100
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x78739cc180
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x78739cc200
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1] 0x78739cc280
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1] 0x78739cc300
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1] 0x78739cc380
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1] 0x78739cc400
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1] 0x78739cc480
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1] 0x78739cc500
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1] 0x78739cc580
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1] 0x78739cc600
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1] 0x78739ca580
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1] 0x78739ca600
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1] 0x78739ca680
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1] 0x78739ca700
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1] 0x78739ca780
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1] 0x78739ca800
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1] 0x78739ca880
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1] 0x78739ca900
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1] 0x78739ca980
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1] 0x78739caa00
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1] 0x78739caa80
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1] 0x78739cab00
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1] 0x78739cab80
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1] 0x78739cac00
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1] 0x78739cac80
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1] 0x78739cad00
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x78739cad80
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1] 0x78739cae00
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1] 0x78739cae80
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1] 0x78739caf00
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1] 0x78739caf80
	bool bOverride_ReflectionMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1] 0x78739cb000
	bool bOverride_LumenReflectionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1] 0x78739cb080
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1] 0x78739cb100
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1] 0x78739cb180
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1] 0x78739cb200
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1] 0x78739cb280
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1] 0x78739cb300
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1] 0x78739cb380
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1] 0x78739cb400
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1] 0x78739cb480
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1] 0x78739cb500
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1] 0x78739cb580
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1] 0x78739c9500
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1] 0x78739c9580
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1] 0x78739c9600
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1] 0x78739c9680
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1] 0x78739c9700
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1] 0x78739c9780
	bool bOverride_DynamicGlobalIlluminationMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1] 0x78739c9800
	bool bOverride_LumenSceneLightingQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1] 0x78739c9880
	bool bOverride_LumenSceneDetail;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1] 0x78739c9900
	bool bOverride_LumenSceneViewDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1] 0x78739c9980
	bool bOverride_LumenSceneLightingUpdateSpeed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 0x1] 0x78739c9a00
	bool bOverride_LumenFinalGatherQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 0x1] 0x78739c9a80
	bool bOverride_LumenFinalGatherLightingUpdateSpeed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 0x1] 0x78739c9b00
	bool bOverride_LumenMaxTraceDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 0x1] 0x78739c9b80
	bool bOverride_LumenRayLightingMode;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 0x1] 0x78739c9c00
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78739c9c80
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x78739c9d00
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x78739c9d80
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x78739c9e00
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1] 0x78739c9e80
	bool bOverride_PathTracingFilterWidth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1] 0x78739c9f00
	bool bOverride_PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1] 0x78739c9f80
	bool bOverride_PathTracingMaxPathExposure;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1] 0x78739ca000
	bool bOverride_PathTracingEnableReferenceDOF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1] 0x78739ca080
	bool bOverride_PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1] 0x78739ca100
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1] 0x78739ca180
	byte BloomMethod;//[Offset: 0x1a, Size: 0x1] 0x78739ca200
	byte AutoExposureMethod;//[Offset: 0x1b, Size: 0x1] 0x78739ca280
	byte TemperatureType;//[Offset: 0x1c, Size: 0x1] 0x78739ca300
	float WhiteTemp;//[Offset: 0x20, Size: 0x4] 0x78739ca380
	float WhiteTint;//[Offset: 0x24, Size: 0x4] 0x78739ca400
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x20] 0x78739ca480
	Vector4 ColorContrast;//[Offset: 0x50, Size: 0x20] 0x78739ca500
	Vector4 ColorGamma;//[Offset: 0x70, Size: 0x20] 0x78739c8480
	Vector4 ColorGain;//[Offset: 0x90, Size: 0x20] 0x78739c8500
	Vector4 ColorOffset;//[Offset: 0xb0, Size: 0x20] 0x78739c8580
	Vector4 ColorSaturationShadows;//[Offset: 0xd0, Size: 0x20] 0x78739c8600
	Vector4 ColorContrastShadows;//[Offset: 0xf0, Size: 0x20] 0x78739c8680
	Vector4 ColorGammaShadows;//[Offset: 0x110, Size: 0x20] 0x78739c8700
	Vector4 ColorGainShadows;//[Offset: 0x130, Size: 0x20] 0x78739c8780
	Vector4 ColorOffsetShadows;//[Offset: 0x150, Size: 0x20] 0x78739c8800
	Vector4 ColorSaturationMidtones;//[Offset: 0x170, Size: 0x20] 0x78739c8880
	Vector4 ColorContrastMidtones;//[Offset: 0x190, Size: 0x20] 0x78739c8900
	Vector4 ColorGammaMidtones;//[Offset: 0x1b0, Size: 0x20] 0x78739c8980
	Vector4 ColorGainMidtones;//[Offset: 0x1d0, Size: 0x20] 0x78739c8a00
	Vector4 ColorOffsetMidtones;//[Offset: 0x1f0, Size: 0x20] 0x78739c8a80
	Vector4 ColorSaturationHighlights;//[Offset: 0x210, Size: 0x20] 0x78739c8b00
	Vector4 ColorContrastHighlights;//[Offset: 0x230, Size: 0x20] 0x78739c8b80
	Vector4 ColorGammaHighlights;//[Offset: 0x250, Size: 0x20] 0x78739c8c00
	Vector4 ColorGainHighlights;//[Offset: 0x270, Size: 0x20] 0x78739c8c80
	Vector4 ColorOffsetHighlights;//[Offset: 0x290, Size: 0x20] 0x78739c8d00
	float ColorCorrectionHighlightsMin;//[Offset: 0x2b0, Size: 0x4] 0x78739c8d80
	float ColorCorrectionHighlightsMax;//[Offset: 0x2b4, Size: 0x4] 0x78739c8e00
	float ColorCorrectionShadowsMax;//[Offset: 0x2b8, Size: 0x4] 0x78739c8e80
	float BlueCorrection;//[Offset: 0x2bc, Size: 0x4] 0x78739c8f00
	float ExpandGamut;//[Offset: 0x2c0, Size: 0x4] 0x78739c8f80
	float ToneCurveAmount;//[Offset: 0x2c4, Size: 0x4] 0x78739c9000
	float FilmSlope;//[Offset: 0x2c8, Size: 0x4] 0x78739c9080
	float FilmToe;//[Offset: 0x2cc, Size: 0x4] 0x78739c9100
	float FilmShoulder;//[Offset: 0x2d0, Size: 0x4] 0x78739c9180
	float FilmBlackClip;//[Offset: 0x2d4, Size: 0x4] 0x78739c9200
	float FilmWhiteClip;//[Offset: 0x2d8, Size: 0x4] 0x78739c9280
	LinearColor SceneColorTint;//[Offset: 0x2dc, Size: 0x10] 0x78739c9300
	float SceneFringeIntensity;//[Offset: 0x2ec, Size: 0x4] 0x78739c9380
	float ChromaticAberrationStartOffset;//[Offset: 0x2f0, Size: 0x4] 0x78739c9400
	float BloomIntensity;//[Offset: 0x2f4, Size: 0x4] 0x78739c9480
	float BloomThreshold;//[Offset: 0x2f8, Size: 0x4] 0x78739c7400
	float BloomSizeScale;//[Offset: 0x2fc, Size: 0x4] 0x78739c7480
	float Bloom1Size;//[Offset: 0x300, Size: 0x4] 0x78739c7500
	float Bloom2Size;//[Offset: 0x304, Size: 0x4] 0x78739c7580
	float Bloom3Size;//[Offset: 0x308, Size: 0x4] 0x78739c7600
	float Bloom4Size;//[Offset: 0x30c, Size: 0x4] 0x78739c7680
	float Bloom5Size;//[Offset: 0x310, Size: 0x4] 0x78739c7700
	float Bloom6Size;//[Offset: 0x314, Size: 0x4] 0x78739c7780
	LinearColor Bloom1Tint;//[Offset: 0x318, Size: 0x10] 0x78739c7800
	LinearColor Bloom2Tint;//[Offset: 0x328, Size: 0x10] 0x78739c7880
	LinearColor Bloom3Tint;//[Offset: 0x338, Size: 0x10] 0x78739c7900
	LinearColor Bloom4Tint;//[Offset: 0x348, Size: 0x10] 0x78739c7980
	LinearColor Bloom5Tint;//[Offset: 0x358, Size: 0x10] 0x78739c7a00
	LinearColor Bloom6Tint;//[Offset: 0x368, Size: 0x10] 0x78739c7a80
	float BloomConvolutionScatterDispersion;//[Offset: 0x378, Size: 0x4] 0x78739c7b00
	float BloomConvolutionSize;//[Offset: 0x37c, Size: 0x4] 0x78739c7b80
	Texture2D* BloomConvolutionTexture;//[Offset: 0x380, Size: 0x8] 0x78739c7c00
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x388, Size: 0x10] 0x78739c7c80
	float BloomConvolutionPreFilterMin;//[Offset: 0x398, Size: 0x4] 0x78739c7d00
	float BloomConvolutionPreFilterMax;//[Offset: 0x39c, Size: 0x4] 0x78739c7d80
	float BloomConvolutionPreFilterMult;//[Offset: 0x3a0, Size: 0x4] 0x78739c7e00
	float BloomConvolutionBufferScale;//[Offset: 0x3a4, Size: 0x4] 0x78739c7e80
	Texture* BloomDirtMask;//[Offset: 0x3a8, Size: 0x8] 0x78739c7f00
	float BloomDirtMaskIntensity;//[Offset: 0x3b0, Size: 0x4] 0x78739c7f80
	LinearColor BloomDirtMaskTint;//[Offset: 0x3b4, Size: 0x10] 0x78739c8000
	byte DynamicGlobalIlluminationMethod;//[Offset: 0x3c4, Size: 0x1] 0x78739c8080
	LinearColor IndirectLightingColor;//[Offset: 0x3c8, Size: 0x10] 0x78739c8100
	float IndirectLightingIntensity;//[Offset: 0x3d8, Size: 0x4] 0x78739c8180
	float LumenSceneLightingQuality;//[Offset: 0x3dc, Size: 0x4] 0x78739c8200
	float LumenSceneDetail;//[Offset: 0x3e0, Size: 0x4] 0x78739c8280
	float LumenSceneViewDistance;//[Offset: 0x3e4, Size: 0x4] 0x78739c8300
	float LumenSceneLightingUpdateSpeed;//[Offset: 0x3e8, Size: 0x4] 0x78739c8380
	float LumenFinalGatherQuality;//[Offset: 0x3ec, Size: 0x4] 0x78739c8400
	float LumenFinalGatherLightingUpdateSpeed;//[Offset: 0x3f0, Size: 0x4] 0x78739c6380
	float LumenMaxTraceDistance;//[Offset: 0x3f4, Size: 0x4] 0x78739c6400
	enum RayTracingGIType;//[Offset: 0x3f8, Size: 0x1] 0x78739b04c0
	int RayTracingGIMaxBounces;//[Offset: 0x3fc, Size: 0x4] 0x78739c6500
	int RayTracingGISamplesPerPixel;//[Offset: 0x400, Size: 0x4] 0x78739c6580
	byte ReflectionMethod;//[Offset: 0x404, Size: 0x1] 0x78739c6600
	enum ReflectionsType;//[Offset: 0x405, Size: 0x1] 0x78739b0560
	float LumenReflectionQuality;//[Offset: 0x408, Size: 0x4] 0x78739c6700
	enum LumenRayLightingMode;//[Offset: 0x40c, Size: 0x1] 0x78739b0600
	float ScreenSpaceReflectionIntensity;//[Offset: 0x410, Size: 0x4] 0x78739c6800
	float ScreenSpaceReflectionQuality;//[Offset: 0x414, Size: 0x4] 0x78739c6880
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x418, Size: 0x4] 0x78739c6900
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x41c, Size: 0x4] 0x78739c6980
	int RayTracingReflectionsMaxBounces;//[Offset: 0x420, Size: 0x4] 0x78739c6a00
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x424, Size: 0x4] 0x78739c6a80
	enum RayTracingReflectionsShadows;//[Offset: 0x428, Size: 0x1] 0x78739b06a0
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x429, Size: 0x1] 0x78739c6b80
	LinearColor AmbientCubemapTint;//[Offset: 0x42c, Size: 0x10] 0x78739c6c00
	float AmbientCubemapIntensity;//[Offset: 0x43c, Size: 0x4] 0x78739c6c80
	TextureCube* AmbientCubemap;//[Offset: 0x440, Size: 0x8] 0x78739c6d00
	float CameraShutterSpeed;//[Offset: 0x448, Size: 0x4] 0x78739c6d80
	float CameraISO;//[Offset: 0x44c, Size: 0x4] 0x78739c6e00
	float DepthOfFieldFstop;//[Offset: 0x450, Size: 0x4] 0x78739c6e80
	float DepthOfFieldMinFstop;//[Offset: 0x454, Size: 0x4] 0x78739c6f00
	int DepthOfFieldBladeCount;//[Offset: 0x458, Size: 0x4] 0x78739c6f80
	float AutoExposureBias;//[Offset: 0x45c, Size: 0x4] 0x78739c7000
	float AutoExposureBiasBackup;//[Offset: 0x460, Size: 0x4] 0x78739c7080
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x464, Size: 0x1] 0x78739c7100
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x464, Size: 0x1] 0x78739c7180
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x468, Size: 0x8] 0x78739c7200
	Texture* AutoExposureMeterMask;//[Offset: 0x470, Size: 0x8] 0x78739c7280
	float AutoExposureLowPercent;//[Offset: 0x478, Size: 0x4] 0x78739c7300
	float AutoExposureHighPercent;//[Offset: 0x47c, Size: 0x4] 0x78739c7380
	float AutoExposureMinBrightness;//[Offset: 0x480, Size: 0x4] 0x78739c5300
	float AutoExposureMaxBrightness;//[Offset: 0x484, Size: 0x4] 0x78739c5380
	float AutoExposureSpeedUp;//[Offset: 0x488, Size: 0x4] 0x78739c5400
	float AutoExposureSpeedDown;//[Offset: 0x48c, Size: 0x4] 0x78739c5480
	float HistogramLogMin;//[Offset: 0x490, Size: 0x4] 0x78739c5500
	float HistogramLogMax;//[Offset: 0x494, Size: 0x4] 0x78739c5580
	float AutoExposureCalibrationConstant;//[Offset: 0x498, Size: 0x4] 0x78739c5600
	float LocalExposureContrastScale;//[Offset: 0x49c, Size: 0x4] 0x78739c5680
	float LocalExposureDetailStrength;//[Offset: 0x4a0, Size: 0x4] 0x78739c5700
	float LocalExposureBlurredLuminanceBlend;//[Offset: 0x4a4, Size: 0x4] 0x78739c5780
	float LocalExposureBlurredLuminanceKernelSizePercent;//[Offset: 0x4a8, Size: 0x4] 0x78739c5800
	float LocalExposureMiddleGreyBias;//[Offset: 0x4ac, Size: 0x4] 0x78739c5880
	float LensFlareIntensity;//[Offset: 0x4b0, Size: 0x4] 0x78739c5900
	LinearColor LensFlareTint;//[Offset: 0x4b4, Size: 0x10] 0x78739c5980
	float LensFlareBokehSize;//[Offset: 0x4c4, Size: 0x4] 0x78739c5a00
	float LensFlareThreshold;//[Offset: 0x4c8, Size: 0x4] 0x78739c5a80
	Texture* LensFlareBokehShape;//[Offset: 0x4d0, Size: 0x8] 0x78739c5b00
	LinearColor LensFlareTints;//[Offset: 0x4d8, Size: 0x10] 0x78739c5b80
	float VignetteIntensity;//[Offset: 0x558, Size: 0x4] 0x78739c5c00
	float GrainJitter;//[Offset: 0x55c, Size: 0x4] 0x78739c5c80
	float GrainIntensity;//[Offset: 0x560, Size: 0x4] 0x78739c5d00
	float FilmGrainIntensity;//[Offset: 0x564, Size: 0x4] 0x78739c5d80
	float FilmGrainIntensityShadows;//[Offset: 0x568, Size: 0x4] 0x78739c5e00
	float FilmGrainIntensityMidtones;//[Offset: 0x56c, Size: 0x4] 0x78739c5e80
	float FilmGrainIntensityHighlights;//[Offset: 0x570, Size: 0x4] 0x78739c5f00
	float FilmGrainShadowsMax;//[Offset: 0x574, Size: 0x4] 0x78739c5f80
	float FilmGrainHighlightsMin;//[Offset: 0x578, Size: 0x4] 0x78739c6000
	float FilmGrainHighlightsMax;//[Offset: 0x57c, Size: 0x4] 0x78739c6080
	float FilmGrainTexelSize;//[Offset: 0x580, Size: 0x4] 0x78739c6100
	Texture2D* FilmGrainTexture;//[Offset: 0x588, Size: 0x8] 0x78739c6180
	float AmbientOcclusionIntensity;//[Offset: 0x590, Size: 0x4] 0x78739c6200
	float AmbientOcclusionStaticFraction;//[Offset: 0x594, Size: 0x4] 0x78739c6280
	float AmbientOcclusionRadius;//[Offset: 0x598, Size: 0x4] 0x78739c6300
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59c, Size: 0x1] 0x78739c4280
	float AmbientOcclusionFadeDistance;//[Offset: 0x5a0, Size: 0x4] 0x78739c4300
	float AmbientOcclusionFadeRadius;//[Offset: 0x5a4, Size: 0x4] 0x78739c4380
	float AmbientOcclusionDistance;//[Offset: 0x5a8, Size: 0x4] 0x78739c4400
	float AmbientOcclusionPower;//[Offset: 0x5ac, Size: 0x4] 0x78739c4480
	float AmbientOcclusionBias;//[Offset: 0x5b0, Size: 0x4] 0x78739c4500
	float AmbientOcclusionQuality;//[Offset: 0x5b4, Size: 0x4] 0x78739c4580
	float AmbientOcclusionMipBlend;//[Offset: 0x5b8, Size: 0x4] 0x78739c4600
	float AmbientOcclusionMipScale;//[Offset: 0x5bc, Size: 0x4] 0x78739c4680
	float AmbientOcclusionMipThreshold;//[Offset: 0x5c0, Size: 0x4] 0x78739c4700
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x5c4, Size: 0x4] 0x78739c4780
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c8, Size: 0x1] 0x78739c4800
	int RayTracingAOSamplesPerPixel;//[Offset: 0x5cc, Size: 0x4] 0x78739c4880
	float RayTracingAOIntensity;//[Offset: 0x5d0, Size: 0x4] 0x78739c4900
	float RayTracingAORadius;//[Offset: 0x5d4, Size: 0x4] 0x78739c4980
	float ColorGradingIntensity;//[Offset: 0x5d8, Size: 0x4] 0x78739c4a00
	Texture* ColorGradingLUT;//[Offset: 0x5e0, Size: 0x8] 0x78739c4a80
	float DepthOfFieldSensorWidth;//[Offset: 0x5e8, Size: 0x4] 0x78739c4b00
	float DepthOfFieldFocalDistance;//[Offset: 0x5ec, Size: 0x4] 0x78739c4b80
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x5f0, Size: 0x4] 0x78739c4c00
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x5f4, Size: 0x4] 0x78739c4c80
	float DepthOfFieldFocalRegion;//[Offset: 0x5f8, Size: 0x4] 0x78739c4d00
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x5fc, Size: 0x4] 0x78739c4d80
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x600, Size: 0x4] 0x78739c4e00
	float DepthOfFieldScale;//[Offset: 0x604, Size: 0x4] 0x78739c4e80
	float DepthOfFieldNearBlurSize;//[Offset: 0x608, Size: 0x4] 0x78739c4f00
	float DepthOfFieldFarBlurSize;//[Offset: 0x60c, Size: 0x4] 0x78739c4f80
	float DepthOfFieldOcclusion;//[Offset: 0x610, Size: 0x4] 0x78739c5000
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x614, Size: 0x4] 0x78739c5080
	float DepthOfFieldVignetteSize;//[Offset: 0x618, Size: 0x4] 0x78739c5100
	float MotionBlurAmount;//[Offset: 0x61c, Size: 0x4] 0x78739c5180
	float MotionBlurMax;//[Offset: 0x620, Size: 0x4] 0x78739c5200
	int MotionBlurTargetFPS;//[Offset: 0x624, Size: 0x4] 0x78739c5280
	float MotionBlurPerObjectSize;//[Offset: 0x628, Size: 0x4] 0x78739c3200
	float LPVIntensity;//[Offset: 0x62c, Size: 0x4] 0x78739c3280
	float LPVVplInjectionBias;//[Offset: 0x630, Size: 0x4] 0x78739c3300
	float LPVSize;//[Offset: 0x634, Size: 0x4] 0x78739c3380
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x638, Size: 0x4] 0x78739c3400
	float LPVSecondaryBounceIntensity;//[Offset: 0x63c, Size: 0x4] 0x78739c3480
	float LPVGeometryVolumeBias;//[Offset: 0x640, Size: 0x4] 0x78739c3500
	float LPVEmissiveInjectionIntensity;//[Offset: 0x644, Size: 0x4] 0x78739c3580
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x648, Size: 0x4] 0x78739c3600
	float LPVDirectionalOcclusionRadius;//[Offset: 0x64c, Size: 0x4] 0x78739c3680
	float LPVDiffuseOcclusionExponent;//[Offset: 0x650, Size: 0x4] 0x78739c3700
	float LPVSpecularOcclusionExponent;//[Offset: 0x654, Size: 0x4] 0x78739c3780
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x658, Size: 0x4] 0x78739c3800
	float LPVSpecularOcclusionIntensity;//[Offset: 0x65c, Size: 0x4] 0x78739c3880
	enum TranslucencyType;//[Offset: 0x660, Size: 0x1] 0x78739b0740
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x664, Size: 0x4] 0x78739c3980
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x668, Size: 0x4] 0x78739c3a00
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x66c, Size: 0x4] 0x78739c3a80
	enum RayTracingTranslucencyShadows;//[Offset: 0x670, Size: 0x1] 0x78739b07e0
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x671, Size: 0x1] 0x78739c3b80
	int PathTracingMaxBounces;//[Offset: 0x674, Size: 0x4] 0x78739c3c00
	int PathTracingSamplesPerPixel;//[Offset: 0x678, Size: 0x4] 0x78739c3c80
	float PathTracingFilterWidth;//[Offset: 0x67c, Size: 0x4] 0x78739c3d00
	bool PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x680, Size: 0x1] 0x78739c3d80
	float PathTracingMaxPathExposure;//[Offset: 0x684, Size: 0x4] 0x78739c3e00
	bool PathTracingEnableReferenceDOF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x688, Size: 0x1] 0x78739c3e80
	bool PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x688, Size: 0x1] 0x78739c3f00
	float LPVFadeRange;//[Offset: 0x68c, Size: 0x4] 0x78739c3f80
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x690, Size: 0x4] 0x78739c4000
	float ScreenPercentage;//[Offset: 0x694, Size: 0x4] 0x78739c4080
	WeightedBlendables WeightedBlendables;//[Offset: 0x698, Size: 0x10] 0x78739c2180

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80] 0x7873e01380
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x7873e01400
	float GetFloatValue(float InTime);// 0x10bacbf4 0x7873de9c40

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x10bac060 0x7873de9d20
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x10bac164 0x7873de9e00

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10] 0x78736a9c00

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4] 0x7873894280
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1] 0x7873894300
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1] 0x7873894380

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60] 0x7873894400

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1] 0x7873895e80
	byte TangentMode;//[Offset: 0x1, Size: 0x1] 0x7873895f00
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1] 0x7873895f80
	float Time;//[Offset: 0x4, Size: 0x4] 0x7873896000
	float Value;//[Offset: 0x8, Size: 0x4] 0x7873896080
	float ArriveTangent;//[Offset: 0xc, Size: 0x4] 0x7873896100
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4] 0x7873896180
	float LeaveTangent;//[Offset: 0x14, Size: 0x4] 0x7873896200
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4] 0x7873896280

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10] 0x78739b0880

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4] 0x78739c4100
	Object* Object;//[Offset: 0x8, Size: 0x8] 0x78739c4180

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8] 0x7873e5e900
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8] 0x7873e5e980
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10] 0x7873dbdf80

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18] 0x7873e71180
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18] 0x7873e71200
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10] 0x7873e71280
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8] 0x7873e71300
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4] 0x7873e71380
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4] 0x7873e71400
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7873e71480
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x7873e71500
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x7873e71580
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x7873e71600
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1] 0x7873e71680
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1] 0x7873e71700
	byte RotMode;//[Offset: 0xc1, Size: 0x1] 0x7873e71780

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10] 0x788a496c80
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x788a4db980
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x788a4db900

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4] 0x788a4dd480
	Vector OutVal;//[Offset: 0x8, Size: 0x18] 0x788a4dd400
	Vector ArriveTangent;//[Offset: 0x20, Size: 0x18] 0x788a4dd380
	Vector LeaveTangent;//[Offset: 0x38, Size: 0x18] 0x788a4dd300
	byte InterpMode;//[Offset: 0x50, Size: 0x1] 0x788a4d8e00

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10] 0x78739b2e00

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8] 0x78739e5400
	float Time;//[Offset: 0x8, Size: 0x4] 0x78739e5480

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0x18] 0x7873e72080
	Rotator ResetRotation;//[Offset: 0x40, Size: 0x18] 0x7873e72100

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x2b0, Size: 0x1] 0x7873db5f60
	float InnerAttenuationRadius;//[Offset: 0x2b4, Size: 0x4] 0x7873df4d80
	float OuterAttenuationRadius;//[Offset: 0x2b8, Size: 0x4] 0x7873df4e00
	class CameraShakeBase* CameraShake;//[Offset: 0x2c0, Size: 0x8] 0x7873db6000
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x7873df4e80
	void StopAllCameraShakesOfType(class CameraShakeBase InCameraShake, bool bImmediately);// 0x10b7c618 0x7873de37a0
	void StopAllCameraShakes(bool bImmediately);// 0x10b7c568 0x7873de3880
	void StartCameraShake(class CameraShakeBase InCameraShake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x10b7c714 0x7873de3960
	void Start();// 0x10b7c89c 0x7873de0080
	float GetAttenuationFactor(out const Vector Location);// 0x10b7c4b0 0x7873de0160

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7873b4b500
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7873b4b580
	byte Priority;//[Offset: 0x29, Size: 0x1] 0x7873b49500
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8] 0x7873b49580
	float AlphaInTime;//[Offset: 0x38, Size: 0x4] 0x7873b49600
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4] 0x7873b49680
	float Alpha;//[Offset: 0x40, Size: 0x4] 0x7873b49700
	void OnCameraOwnerDestroyed(Actor* InOwner);// 0x10b79fec 0x7873b51820
	bool IsDisabled();// 0x10b79fac 0x7873b51900
	Actor* GetViewTarget();// 0x10b79f70 0x7873b519e0
	void EnableModifier();// 0x10b79e9c 0x7873b51ac0
	void DisableModifier(bool bImmediate);// 0x10b79eb8 0x7873b51ba0
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0xb8f1ab4 0x7873b51c80
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0xb8f1ab4 0x7873b2e780

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x2e0, Size: 0x8] 0x7873e26000
	PlayerCameraManager* BaseCamera;//[Offset: 0x2e8, Size: 0x8] 0x7873e26080
	Transform RelativeTransform;//[Offset: 0x2f0, Size: 0x60] 0x7873e26100
	float BaseFOV;//[Offset: 0x350, Size: 0x4] 0x7873e26180
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 0x1] 0x7873e26200
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x354, Size: 0x1] 0x7873e26280
	class Actor[] EmittersToTreatAsSame;//[Offset: 0x358, Size: 0x10] 0x7873db8580
	float DistFromCamera;//[Offset: 0x368, Size: 0x4] 0x7873e26300

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x288, Size: 0x8] 0x7873e24280
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1] 0x7873e24300
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1] 0x7873e24380
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1] 0x7873e24400
	delegate OnParticleSpawn;//[Offset: 0x298, Size: 0x10] 0x7873e24480
	delegate OnParticleBurst;//[Offset: 0x2a8, Size: 0x10] 0x7873e24500
	delegate OnParticleDeath;//[Offset: 0x2b8, Size: 0x10] 0x7873e24580
	delegate OnParticleCollide;//[Offset: 0x2c8, Size: 0x10] 0x7873e24600
	void ToggleActive();// 0x10bd7f54 0x7873e15100
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x10bd7c88 0x7873e151e0
	void SetTemplate(ParticleSystem* NewTemplate);// 0x10bd7e6c 0x7873e152c0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x10bd79b8 0x7873e153a0
	void SetFloatParameter(FName ParameterName, float Param);// 0x10bd7d78 0x7873e15480
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x10bd7b98 0x7873e15560
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x10bd7aa8 0x7873e15640
	void OnRep_bCurrentlyActive();// 0x10bd7f90 0x7873e11d60
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x10bd7fac 0x7873e11e40
	bool IsActive();// 0x10bd7f1c 0x7873e11f20
	void Deactivate();// 0x10bd7f68 0x7873e12000
	void Activate();// 0x10bd7f7c 0x7873e120e0

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x90, Size: 0x4] 0x7873f5bf80
	float UpdateTime_Delta;//[Offset: 0x94, Size: 0x4] 0x7873f5c000
	float WarmupTime;//[Offset: 0x98, Size: 0x4] 0x7873f5c080
	float WarmupTickRate;//[Offset: 0x9c, Size: 0x4] 0x7873f5c100
	ParticleEmitter*[] Emitters;//[Offset: 0xa0, Size: 0x10] 0x7873ee4480
	ParticleSystemComponent* PreviewComponent;//[Offset: 0xb0, Size: 0x8] 0x7873f5c200
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0xb8, Size: 0x8] 0x7873f5c280
	float LODDistanceCheckTime;//[Offset: 0xc0, Size: 0x4] 0x7873f5c300
	float MacroUVRadius;//[Offset: 0xc4, Size: 0x4] 0x7873f5c380
	float[] LODDistances;//[Offset: 0xc8, Size: 0x10] 0x7873ee4520
	ParticleSystemLOD[] LODSettings;//[Offset: 0xd8, Size: 0x10] 0x7873ee45c0
	Box FixedRelativeBoundingBox;//[Offset: 0xe8, Size: 0x38] 0x7873f5c500
	float SecondsBeforeInactive;//[Offset: 0x120, Size: 0x4] 0x7873f5c580
	float Delay;//[Offset: 0x124, Size: 0x4] 0x7873f5c600
	float DelayLow;//[Offset: 0x128, Size: 0x4] 0x7873f5a580
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c, Size: 0x1] 0x7873f5a600
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12c, Size: 0x1] 0x7873f5a680
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12c, Size: 0x1] 0x7873f5a700
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12c, Size: 0x1] 0x7873f5a780
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12c, Size: 0x1] 0x7873f5a800
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12c, Size: 0x1] 0x7873f5a880
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12d, Size: 0x1] 0x7873f5a900
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12d, Size: 0x1] 0x7873f5a980
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12d, Size: 0x1] 0x7873f5aa00
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12d, Size: 0x1] 0x7873f5aa80
	byte SystemUpdateMode;//[Offset: 0x12e, Size: 0x1] 0x7873f5ab00
	byte LODMethod;//[Offset: 0x12f, Size: 0x1] 0x7873f5ab80
	enum InsignificantReaction;//[Offset: 0x130, Size: 0x1] 0x7873ee4660
	byte OcclusionBoundsMethod;//[Offset: 0x131, Size: 0x1] 0x7873f5ac80
	enum MaxSignificanceLevel;//[Offset: 0x133, Size: 0x1] 0x7873ee4700
	uint32 MinTimeBetweenTicks;//[Offset: 0x134, Size: 0x4] 0x7873f5ad80
	float InsignificanceDelay;//[Offset: 0x138, Size: 0x4] 0x7873f5ae00
	Vector MacroUVPosition;//[Offset: 0x140, Size: 0x18] 0x7873f5ae80
	Box CustomOcclusionBounds;//[Offset: 0x158, Size: 0x38] 0x7873f5af00
	LODSoloTrack[] SoloTracking;//[Offset: 0x190, Size: 0x10] 0x7873ee47a0
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x1a0, Size: 0x10] 0x7873ee4840
	bool ContainsEmitterType(class Object TypeData);// 0x10d8a93c 0x7873f1da60

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4] 0x7873bc3980
	uint32 PoolPrimeSize;//[Offset: 0x2c, Size: 0x4] 0x7873bc3a00

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8] 0x7873f4bd00
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4] 0x7873f4bd80
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1] 0x7873f4be00
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1] 0x7873ee2c20
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1] 0x7873f4bf00
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1] 0x7873f4bf80
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1] 0x7873f4c000
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1] 0x7873f4c080
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1] 0x7873f4c100
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7873f4c180
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10] 0x7873ee2cc0
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4] 0x7873f4c280
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4] 0x7873f4c300
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4] 0x7873f4c380
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4] 0x7873f4c400

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4] 0x7873f4b600
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x7873f4b680
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8] 0x7873f4b700
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10] 0x7873ee51a0
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8] 0x7873f4b800
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8] 0x7873f4b880
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8] 0x7873f4b900
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10] 0x7873ee5240
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10] 0x7873ee29a0
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10] 0x7873ee2a40
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10] 0x7873ee2ae0
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10] 0x7873ee2b80
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7873f4bc00
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4] 0x7873f4bc80

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8] 0x7873f55600
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4] 0x7873f55680
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4] 0x7873f55700
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0x18] 0x7873f55780
	Rotator EmitterRotation;//[Offset: 0x58, Size: 0x18] 0x7873f55800
	byte ScreenAlignment;//[Offset: 0x70, Size: 0x1] 0x7873f55880
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 0x1] 0x7873f55900
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71, Size: 0x1] 0x7873f55980
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71, Size: 0x1] 0x7873f55a00
	byte SortMode;//[Offset: 0x72, Size: 0x1] 0x7873f55a80
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x73, Size: 0x1] 0x7873f55b00
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x73, Size: 0x1] 0x7873f55b80
	bool bSupportLargeWorldCoordinates;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x73, Size: 0x1] 0x7873f55c00
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x73, Size: 0x1] 0x7873f55c80
	float EmitterDuration;//[Offset: 0x74, Size: 0x4] 0x7873f55d00
	RawDistributionFloat SpawnRate;//[Offset: 0x78, Size: 0x30] 0x7873f55d80
	ParticleBurst[] BurstList;//[Offset: 0xa8, Size: 0x10] 0x7873ee4ac0
	float EmitterDelay;//[Offset: 0xb8, Size: 0x4] 0x7873f55e80
	float EmitterDelayLow;//[Offset: 0xbc, Size: 0x4] 0x7873f55f00
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7873f55f80
	byte InterpolationMethod;//[Offset: 0xc1, Size: 0x1] 0x7873f56000
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 0x1] 0x7873f56080
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 0x1] 0x7873f56100
	byte ParticleBurstMethod;//[Offset: 0xc3, Size: 0x1] 0x7873f56180
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1] 0x7873f56200
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1] 0x7873f56280
	byte OpacitySourceMode;//[Offset: 0xc5, Size: 0x1] 0x7873f56300
	byte EmitterNormalsMode;//[Offset: 0xc6, Size: 0x1] 0x7873f54280
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc7, Size: 0x1] 0x7873f54300
	int SubImages_Horizontal;//[Offset: 0xc8, Size: 0x4] 0x7873f54380
	int SubImages_Vertical;//[Offset: 0xcc, Size: 0x4] 0x7873f54400
	float RandomImageTime;//[Offset: 0xd0, Size: 0x4] 0x7873f54480
	int RandomImageChanges;//[Offset: 0xd4, Size: 0x4] 0x7873f54500
	Vector MacroUVPosition;//[Offset: 0xd8, Size: 0x18] 0x7873f54580
	float MacroUVRadius;//[Offset: 0xf0, Size: 0x4] 0x7873f54600
	enum UVFlippingMode;//[Offset: 0xf4, Size: 0x1] 0x7873ee4b60
	byte BoundingMode;//[Offset: 0xf5, Size: 0x1] 0x7873f54700
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf6, Size: 0x1] 0x7873f54780
	Vector NormalsSphereCenter;//[Offset: 0xf8, Size: 0x18] 0x7873f54800
	float AlphaThreshold;//[Offset: 0x110, Size: 0x4] 0x7873f54880
	int EmitterLoops;//[Offset: 0x114, Size: 0x4] 0x7873f54900
	Texture2D* CutoutTexture;//[Offset: 0x118, Size: 0x8] 0x7873f54980
	int MaxDrawCount;//[Offset: 0x120, Size: 0x4] 0x7873f54a00
	float EmitterDurationLow;//[Offset: 0x124, Size: 0x4] 0x7873f54a80
	Vector NormalsCylinderDirection;//[Offset: 0x128, Size: 0x18] 0x7873f54b00
	FName[] NamedMaterialOverrides;//[Offset: 0x140, Size: 0x10] 0x7873ee4c00

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7873f4d080
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7873f4d100
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x7873f4d180
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x7873f4d200
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1] 0x7873f4d280
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1] 0x7873f4d300
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1] 0x7873f4d380
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1] 0x7873f4d400
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x7873f4d480
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1] 0x7873f4d500
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1] 0x7873f4d580
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1] 0x7873f4d600
	byte LODValidity;//[Offset: 0x2a, Size: 0x1] 0x7873f4d680

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4] 0x78739d7500
	float MaxValue;//[Offset: 0x24, Size: 0x4] 0x78739d7580
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8] 0x78739d7600

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20] 0x788ab78d00

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7873e21580
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x7873e21600

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4] 0x788ab78500
	float TimeBias;//[Offset: 0x4, Size: 0x4] 0x788ab78480
	float[] Values;//[Offset: 0x8, Size: 0x10] 0x7873760560
	byte Op;//[Offset: 0x18, Size: 0x1] 0x788ab78100
	byte EntryCount;//[Offset: 0x19, Size: 0x1] 0x788ab78080
	byte EntryStride;//[Offset: 0x1a, Size: 0x1] 0x788a91b900
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1] 0x788a91b700
	byte LockFlag;//[Offset: 0x1c, Size: 0x1] 0x788a91be00

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4] 0x7873a15900
	int CountLow;//[Offset: 0x4, Size: 0x4] 0x7873a15980
	float Time;//[Offset: 0x8, Size: 0x4] 0x7873a15a00

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30] 0x7873f56900
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30] 0x7873f56980
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1] 0x7873f56a00
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10] 0x7873ee4a20
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30] 0x7873f56b00
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x7873f56b80

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7873f56c00
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x7873f56c80

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10] 0x7873ee5060

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1] 0x7873a17000
	int Frequency;//[Offset: 0x4, Size: 0x4] 0x7873a17080
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4] 0x7873a17100
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7873a17180
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x7873a17200
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x7873a17280
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x7873a17300
	FName CustomName;//[Offset: 0x10, Size: 0x8] 0x7873a17380
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10] 0x78739b6280

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1] 0x7873f54f00
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x60] 0x7873f54f80
	OrbitOptions OffsetOptions;//[Offset: 0x90, Size: 0x4] 0x7873f55000
	RawDistributionVector RotationAmount;//[Offset: 0x98, Size: 0x60] 0x7873f55080
	OrbitOptions RotationOptions;//[Offset: 0xf8, Size: 0x4] 0x7873f55100
	RawDistributionVector RotationRateAmount;//[Offset: 0x100, Size: 0x60] 0x7873f55180
	OrbitOptions RotationRateOptions;//[Offset: 0x160, Size: 0x4] 0x7873f55200

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7873f55280

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4] 0x78739d9380
	float MaxValue;//[Offset: 0x24, Size: 0x4] 0x78739d9400
	Vector MinValueVec;//[Offset: 0x28, Size: 0x18] 0x78739d9480
	Vector MaxValueVec;//[Offset: 0x40, Size: 0x18] 0x78739d7400
	DistributionVector* Distribution;//[Offset: 0x58, Size: 0x8] 0x78739d7480

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7873e22f80
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x7873e23000
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x7873e23080

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7873a16d80
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7873a16e00
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7873a16e80

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1] 0x7873f50300
	FName EventName;//[Offset: 0x2c, Size: 0x8] 0x7873f50380

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x550, Size: 0x8] 0x7873f5ed00
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x558, Size: 0x10] 0x7873ee3f80
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x568, Size: 0x10] 0x7873ee4020
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x579, Size: 0x1] 0x7873f5ee80
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x579, Size: 0x1] 0x7873f5ef00
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x579, Size: 0x1] 0x7873f5ef80
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x579, Size: 0x1] 0x7873f5f000
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x579, Size: 0x1] 0x7873f5f080
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57a, Size: 0x1] 0x7873f5f100
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x57a, Size: 0x1] 0x7873f5f180
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57a, Size: 0x1] 0x7873f5f200
	byte LODMethod;//[Offset: 0x585, Size: 0x1] 0x7873f5f280
	enum RequiredSignificance;//[Offset: 0x586, Size: 0x1] 0x7873ee40c0
	ParticleSysParam[] InstanceParameters;//[Offset: 0x588, Size: 0x10] 0x7873ee4160
	delegate OnParticleSpawn;//[Offset: 0x598, Size: 0x10] 0x7873f5f400
	delegate OnParticleBurst;//[Offset: 0x5a8, Size: 0x10] 0x7873f5f480
	delegate OnParticleDeath;//[Offset: 0x5b8, Size: 0x10] 0x7873f5f500
	delegate OnParticleCollide;//[Offset: 0x5c8, Size: 0x10] 0x7873f5f580
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1] 0x7873f5f600
	Vector OldPosition;//[Offset: 0x5e0, Size: 0x18] 0x7873f5f680
	Vector PartSysVelocity;//[Offset: 0x5f8, Size: 0x18] 0x7873f5f700
	float WarmupTime;//[Offset: 0x610, Size: 0x4] 0x7873f5f780
	float WarmupTickRate;//[Offset: 0x614, Size: 0x4] 0x7873f5d700
	float SecondsBeforeInactive;//[Offset: 0x61c, Size: 0x4] 0x7873f5d780
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x624, Size: 0x4] 0x7873f5d800
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x648, Size: 0x10] 0x7873ee4200
	float CustomTimeDilation;//[Offset: 0x660, Size: 0x4] 0x7873f5d900
	SceneComponent* AutoAttachParent;//[Offset: 0x6b8, Size: 0x8] 0x7873f5d980
	FName AutoAttachSocketName;//[Offset: 0x6c0, Size: 0x8] 0x7873f5da00
	enum AutoAttachLocationRule;//[Offset: 0x6c8, Size: 0x1] 0x7873ee42a0
	enum AutoAttachRotationRule;//[Offset: 0x6c9, Size: 0x1] 0x7873ee4340
	enum AutoAttachScaleRule;//[Offset: 0x6ca, Size: 0x1] 0x7873ee43e0
	delegate OnSystemFinished;//[Offset: 0x720, Size: 0x10] 0x7873f5dc00
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x10d8c8b4 0x7873f1fac0
	void SetTemplate(ParticleSystem* NewTemplate);// 0x10d8cc0c 0x7873f1fba0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x10d8ccb4 0x7873f1fc80
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x10d8d800 0x7873f1fd60
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x10d8d6b8 0x7873f1fe40
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x10d8d944 0x7873f1ff20
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x10d8dbd0 0x7873f1caa0
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x10d8da88 0x7873f1cb80
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x10d8dd14 0x7873f1cc60
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x10d8de58 0x7873f1cd40
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x10d8df50 0x7873f1ce20
	int GetNumActiveParticles();// 0x10d8cbd8 0x7873f1cf00
	MaterialInterface* GetNamedMaterial(FName InName);// 0x10d8c6fc 0x7873f1cfe0
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x10d8cf00 0x7873f1d0c0
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x10d8cda4 0x7873f1d1a0
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x10d8d054 0x7873f1d280
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x10d8d304 0x7873f1d360
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x10d8d1a8 0x7873f1d440
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x10d8d458 0x7873f1d520
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x10d8d5ac 0x7873f1d600
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x10d8c528 0x7873f1d6e0
	void EndTrails();// 0x10d8ca3c 0x7873f1d7c0
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x10d8c7b4 0x7873f1d8a0
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x10d8ca50 0x7873f1d980

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x10d8ba54 0x7873b5aea0
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x10d8b490 0x7873b5af80
	void SetIntParameter(FName ParameterName, int Param);// 0x10d8bc48 0x7873b5b060
	void SetFloatParameter(FName ParameterName, float Param);// 0x10d8bb4c 0x7873b5b140
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x10d8b724 0x7873b5b220
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x10d8b95c 0x7873b5b300
	void SetBoolParameter(FName ParameterName, bool Param);// 0x10d8bd44 0x7873b5b3e0
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x10d8b548 0x7873b5b4c0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x10d8b864 0x7873b5b5a0
	void ReleaseToPool();// 0x10d8b474 0x7873b5b680
	FXSystemAsset* GetFXSystemAsset();// 0x10d8b828 0x7873b5b760

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ClassPtrProperty AnimBlueprintGeneratedClass;//[Size: 0x8] 0x7873ee9e80
	class AnimInstance* AnimClass;//[Offset: 0x848, Size: 0x8] 0x7873ee9f20
	AnimInstance* AnimScriptInstance;//[Offset: 0x850, Size: 0x8] 0x7873f95880
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x858, Size: 0x8] 0x7873f95900
	SingleAnimationPlayData AnimationData;//[Offset: 0x860, Size: 0x18] 0x7873f95980
	Vector RootBoneTranslation;//[Offset: 0x888, Size: 0x18] 0x7873f95a00
	Vector LineCheckBoundsScale;//[Offset: 0x8a0, Size: 0x18] 0x7873f95a80
	AnimInstance*[] LinkedInstances;//[Offset: 0x8e8, Size: 0x10] 0x7873ee9fc0
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x8f8, Size: 0x10] 0x7873eea060
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x908, Size: 0x10] 0x7873eea100
	float GlobalAnimRateScale;//[Offset: 0x9c8, Size: 0x4] 0x7873f95c80
	byte KinematicBonesUpdateType;//[Offset: 0x9cc, Size: 0x1] 0x7873f95d00
	byte PhysicsTransformUpdateMode;//[Offset: 0x9cd, Size: 0x1] 0x7873f95d80
	byte AnimationMode;//[Offset: 0x9cf, Size: 0x1] 0x7873f95e00
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d1, Size: 0x1] 0x7873f95e80
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9d1, Size: 0x1] 0x7873f95f00
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9d1, Size: 0x1] 0x7873f95f80
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9d1, Size: 0x1] 0x7873f96000
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9d1, Size: 0x1] 0x7873f96080
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9d1, Size: 0x1] 0x7873f96100
	bool bAllowClothActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d2, Size: 0x1] 0x7873f96180
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9d2, Size: 0x1] 0x7873f96200
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d8, Size: 0x1] 0x7873f96280
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9d8, Size: 0x1] 0x7873f96300
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9d8, Size: 0x1] 0x7873f94280
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9d8, Size: 0x1] 0x7873f94300
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9d8, Size: 0x1] 0x7873f94380
	bool bForceCollisionUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d9, Size: 0x1] 0x7873f94400
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9d9, Size: 0x1] 0x7873f94480
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9d9, Size: 0x1] 0x7873f94500
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9d9, Size: 0x1] 0x7873f94580
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9d9, Size: 0x1] 0x7873f94600
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9d9, Size: 0x1] 0x7873f94680
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9d9, Size: 0x1] 0x7873f94700
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9da, Size: 0x1] 0x7873f94780
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9da, Size: 0x1] 0x7873f94800
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9da, Size: 0x1] 0x7873f94880
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9da, Size: 0x1] 0x7873f94900
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9da, Size: 0x1] 0x7873f94980
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9da, Size: 0x1] 0x7873f94a00
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9da, Size: 0x1] 0x7873f94a80
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9da, Size: 0x1] 0x7873f94b00
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9db, Size: 0x1] 0x7873f94b80
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9db, Size: 0x1] 0x7873f94c00
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9db, Size: 0x1] 0x7873f94c80
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9db, Size: 0x1] 0x7873f94d00
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9db, Size: 0x1] 0x7873f94d80
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9db, Size: 0x1] 0x7873f94e00
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x9de, Size: 0x2] 0x7873f94e80
	float ClothBlendWeight;//[Offset: 0x9e0, Size: 0x4] 0x7873f94f00
	bool bWaitForParallelClothTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e4, Size: 0x1] 0x7873f94f80
	FName[] DisallowedAnimCurves;//[Offset: 0x9e8, Size: 0x10] 0x7873eea1a0
	BodySetup* BodySetup;//[Offset: 0x9f8, Size: 0x8] 0x7873f95080
	float ClothMaxDistanceScale;//[Offset: 0xa04, Size: 0x4] 0x7873f95100
	delegate OnConstraintBroken;//[Offset: 0xa08, Size: 0x10] 0x7873f95180
	delegate OnPlasticDeformation;//[Offset: 0xa18, Size: 0x10] 0x7873f95200
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0xa28, Size: 0x8] 0x7873eea240
	float TeleportDistanceThreshold;//[Offset: 0xb28, Size: 0x4] 0x7873f95280
	float TeleportRotationThreshold;//[Offset: 0xb2c, Size: 0x4] 0x7873f93200
	uint32 LastPoseTickFrame;//[Offset: 0xb38, Size: 0x4] 0x7873f93280
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xbd0, Size: 0x8] 0x7873f93300
	delegate OnAnimInitialized;//[Offset: 0xca0, Size: 0x10] 0x7873f93380
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x10e13ce0 0x7873fa35e0
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x10e12d54 0x7873fa36c0
	void ToggleDisablePostProcessBlueprint();// 0x10e152c8 0x7873fa37a0
	void TermBodiesBelow(FName ParentBoneName);// 0x10e118e8 0x7873fa3880
	void SuspendClothingSimulation();// 0x10e12e78 0x7873fa3960
	void Stop();// 0x10e1375c 0x7873fa0080
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x10e13060 0x7873fa0160
	void SetUpdateClothInEditor(const bool NewUpdateState);// 0x10e12ad8 0x7873fa0240
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x10e12b88 0x7873fa0320
	void SetTeleportRotationThreshold(float Threshold);// 0x10e1263c 0x7873fa0400
	void SetTeleportDistanceThreshold(float Threshold);// 0x10e12560 0x7873fa04e0
	void SetPosition(float InPos, bool bFireNotifies);// 0x10e13628 0x7873fa05c0
	void SetPlayRate(float Rate);// 0x10e1354c 0x7873fa06a0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x10e11790 0x7873fa0780
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x10e122e8 0x7873fa0860
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x10e131fc 0x7873fa0940
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x10e116e0 0x7873fa0a20
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x10e12000 0x7873fa0b00
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x10e121f8 0x7873fa0be0
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x10e151e0 0x7873fa0cc0
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x10e12a28 0x7873fa0da0
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x10e107d4 0x7873fa0e80
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x10e108d0 0x7873fa0f60
	void SetClothMaxDistanceScale(float Scale);// 0x10e12eb4 0x7873fa1040
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x10e12434 0x7873fa1120
	void SetAnimClass(class Object NewClass);// 0x10e14178 0x7873fa1200
	void SetAnimationMode(byte InAnimationMode);// 0x10e139f8 0x7873fa12e0
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x10e13820 0x7873fa13c0
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x10e10064 0x7873fa14a0
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x10e12c5c 0x7873fa1580
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x10e12718 0x7873fa1660
	void SetAllowClothActors(bool bInAllow);// 0x10e12fb0 0x7873fa1740
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x10e12954 0x7873fa1820
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x10e10ba4 0x7873fa1900
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x10e10cec 0x7873fa19e0
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x10e10a14 0x7873fa1ac0
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x10e11838 0x7873fa1ba0
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x10e1111c 0x7873fa1c80
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x10e1122c 0x7873f7e780
	void SetAllBodiesBelowPhysicsDisabled(out const FName InBoneName, bool bDisabled, bool bIncludeSelf);// 0x10e11590 0x7873f7e860
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x10e10f80 0x7873f7e940
	void SetAllBodiesBelowLinearVelocity(out const FName InBoneName, out const Vector LinearVelocity, bool bIncludeSelf);// 0x10e1143c 0x7873f7ea20
	void ResumeClothingSimulation();// 0x10e12e64 0x7873f7eb00
	void ResetClothTeleportMode();// 0x10e12e18 0x7873f7ebe0
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x10e13aa0 0x7873f7ecc0
	void ResetAllowedAnimCurveEvaluation();// 0x10e12824 0x7873f7eda0
	void ResetAllBodiesSimulatePhysics();// 0x10e11218 0x7873f7ee80
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x10e138c8 0x7873f7ef60
	void Play(bool bLooping);// 0x10e13770 0x7873f7f040
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x10e13344 0x7873f7f120
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x10e13e30 0x7873f7f200
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x10e13d88 0x7873f7f2e0
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x10e11dfc 0x7873f7f3c0
	bool IsPlaying();// 0x10e13724 0x7873f7f4a0
	bool IsClothingSimulationSuspended();// 0x10e12e2c 0x7873f7f580
	bool IsBodyGravityEnabled(FName BoneName);// 0x10e12144 0x7873f7f660
	bool HasValidAnimationInstance();// 0x10e13b48 0x7873f7f740
	bool GetTransformAttribute_Ref(out const FName BoneName, out const FName AttributeName, out Transform OutValue, enum LookupType);// 0x10e14e54 0x7873f7f820
	bool GetTransformAttribute(out const FName BoneName, out const FName AttributeName, Transform DefaultValue, out Transform OutValue, enum LookupType);// 0x10e14688 0x7873f7f900
	float GetTeleportRotationThreshold();// 0x10e126e4 0x7873f7f9e0
	float GetTeleportDistanceThreshold();// 0x10e12608 0x7873f7fac0
	bool GetStringAttribute_Ref(out const FName BoneName, out const FName AttributeName, out FString OutValue, enum LookupType);// 0x10e14ae0 0x7873f7fba0
	bool GetStringAttribute(out const FName BoneName, out const FName AttributeName, FString DefaultValue, out FString OutValue, enum LookupType);// 0x10e14228 0x7873f7fc80
	Vector GetSkeletalCenterOfMass();// 0x10e11cc0 0x7873f7fd60
	AnimInstance* GetPostProcessInstance();// 0x10e140dc 0x7873f7fe40
	float GetPosition();// 0x10e135f4 0x7873f7ff20
	float GetPlayRate();// 0x10e13518 0x7873f7caa0
	float GetMorphTarget(FName MorphTargetName);// 0x10e13138 0x7873f7cb80
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x10e13c30 0x7873f7cc60
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x10e13b80 0x7873f7cd40
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x10e13f20 0x7873f7ce20
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x10e1402c 0x7873f7cf00
	bool GetIntegerAttribute_Ref(out const FName BoneName, out const FName AttributeName, out int OutValue, enum LookupType);// 0x10e14ca0 0x7873f7cfe0
	bool GetIntegerAttribute(out const FName BoneName, out const FName AttributeName, int DefaultValue, out int OutValue, enum LookupType);// 0x10e14488 0x7873f7d0c0
	bool GetFloatAttribute_Ref(out const FName BoneName, out const FName AttributeName, out float OutValue, enum LookupType);// 0x10e1502c 0x7873f7d1a0
	bool GetFloatAttribute(out const FName BoneName, out const FName AttributeName, float DefaultValue, out float OutValue, enum LookupType);// 0x10e148e0 0x7873f7d280
	bool GetDisablePostProcessBlueprint();// 0x10e15290 0x7873f7d360
	bool GetDisableAnimCurves();// 0x10e12a04 0x7873f7d440
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x10e0febc 0x7873f7d520
	void GetConstraintsFromBody(FName BodyName, bool bParentConstraints, bool bChildConstraints, bool bIncludesTerminated, out ConstraintInstanceAccessor[] OutConstraints);// 0x10e101ec 0x7873f7d600
	void GetConstraints(bool bIncludesTerminated, out ConstraintInstanceAccessor[] OutConstraints);// 0x10e103d8 0x7873f7d6e0
	ConstraintInstanceAccessor GetConstraintByName(FName ConstraintName, bool bIncludesTerminated);// 0x10e104e0 0x7873f7d7c0
	float GetClothMaxDistanceScale();// 0x10e12f5c 0x7873f7d8a0
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x10e1252c 0x7873f7d980
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x10e11cf8 0x7873f7da60
	Vector GetBoneLinearVelocity(out const FName InBoneName);// 0x10e1137c 0x7873f7db40
	AnimInstance* GetAnimInstance();// 0x10e14110 0x7873f7dc20
	class Object GetAnimClass();// 0x10e14144 0x7873f7dd00
	byte GetAnimationMode();// 0x10e139c4 0x7873f7dde0
	bool GetAllowRigidBodyAnimNode();// 0x10e12c38 0x7873f7dec0
	bool GetAllowedAnimCurveEvaluate();// 0x10e12934 0x7873f7dfa0
	bool GetAllowClothActors();// 0x10e12f90 0x7873f7e080
	void ForceClothNextUpdateTeleportAndReset();// 0x10e12e8c 0x7873f7e160
	void ForceClothNextUpdateTeleport();// 0x10e12ea0 0x7873f7e240
	FName FindConstraintBoneName(int ConstraintIndex);// 0x10e10724 0x7873f7e320
	void ClearMorphTargets();// 0x10e131e8 0x7873f7e400
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x10e105e8 0x7873f7e4e0
	void BindClothToMasterPoseComponent();// 0x10e12e04 0x7873f7e5c0
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x10e12838 0x7873f7e6a0
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x10e11990 0x7873f7adc0
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x10e11b28 0x7873f7aea0
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x10e10e34 0x7873f7af80

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x578, Size: 0x8] 0x7873f6fc00
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x580, Size: 0x8] 0x7873f6fc80
	enum[] SkinCacheUsage;//[Offset: 0x588, Size: 0x10] 0x7873ee7720
	MeshDeformer* MeshDeformer;//[Offset: 0x598, Size: 0x8] 0x7873f6fd80
	MeshDeformerInstance* MeshDeformerInstance;//[Offset: 0x5a0, Size: 0x8] 0x7873f6fe00
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x6c0, Size: 0x8] 0x7873f6fe80
	int ForcedLodModel;//[Offset: 0x6c8, Size: 0x4] 0x7873f6ff00
	int MinLodModel;//[Offset: 0x6cc, Size: 0x4] 0x7873f6ff80
	float StreamingDistanceMultiplier;//[Offset: 0x6d8, Size: 0x4] 0x7873f6e780
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x6e8, Size: 0x10] 0x7873ee77c0
	enum VisibilityBasedAnimTickOption;//[Offset: 0x71c, Size: 0x1] 0x7873ee7860
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71e, Size: 0x1] 0x7873f6e900
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71e, Size: 0x1] 0x7873f6e980
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71e, Size: 0x1] 0x7873f6ea00
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71e, Size: 0x1] 0x7873f6ea80
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x71e, Size: 0x1] 0x7873f6eb00
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71f, Size: 0x1] 0x7873f6eb80
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71f, Size: 0x1] 0x7873f6ec00
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71f, Size: 0x1] 0x7873f6ec80
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71f, Size: 0x1] 0x7873f6ed00
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71f, Size: 0x1] 0x7873f6ed80
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71f, Size: 0x1] 0x7873f6ee00
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71f, Size: 0x1] 0x7873f6ee80
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x71f, Size: 0x1] 0x7873f6ef00
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x720, Size: 0x1] 0x7873f6ef80
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x720, Size: 0x1] 0x7873f6f000
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x720, Size: 0x1] 0x7873f6f080
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x720, Size: 0x1] 0x7873f6f100
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x720, Size: 0x1] 0x7873f6f180
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x720, Size: 0x1] 0x7873f6f200
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x721, Size: 0x1] 0x7873f6f280
	bool bCachedWorldSpaceBoundsUpToDate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x721, Size: 0x1] 0x7873f6f300
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x721, Size: 0x1] 0x7873f6f380
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x724, Size: 0x4] 0x7873f6f400
	BoxSphereBounds CachedWorldOrLocalSpaceBounds;//[Offset: 0x760, Size: 0x38] 0x7873f6f480
	Matrix CachedWorldToLocalTransform;//[Offset: 0x7a0, Size: 0x80] 0x7873f6f500
	void UnloadSkinWeightProfile(FName InProfileName);// 0x10e1e11c 0x7873f77a20
	void UnHideBoneByName(FName BoneName);// 0x10e1d290 0x7873f77b00
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x10e1d7a0 0x7873f77be0
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x10e1d5cc 0x7873f77cc0
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x10e1d058 0x7873f77da0
	void ShowAllMaterialSections(int LODIndex);// 0x10e1cfb0 0x7873f77e80
	void SetVertexOffsetUsage(int LODIndex, int Usage);// 0x10e1df68 0x7873f77f60
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x10e1e4e8 0x7873f78040
	bool SetSkinWeightProfile(FName InProfileName);// 0x10e1e1d8 0x7873f78120
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x10e1e334 0x7873f78200
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x10e1e9c0 0x7873f782e0
	void SetRenderStatic(bool bNewValue);// 0x10e1ce04 0x7873f783c0
	void SetPreSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x10e1de28 0x7873f784a0
	void SetPostSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x10e1dce8 0x7873f78580
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x10e1f0c8 0x7873f78660
	void SetMinLOD(int InNewMinLOD);// 0x10e1efec 0x7873f78740
	void SetMeshDeformer(MeshDeformer* InMeshDeformer);// 0x10e1e918 0x7873f78820
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x10e1dbec 0x7873f78900
	void SetForcedLOD(int InNewForcedLOD);// 0x10e1ef44 0x7873f789e0
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x10e1edb0 0x7873f78ac0
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x10e1ee60 0x7873f78ba0
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x10e1ed08 0x7873f78c80
	bool IsUsingSkinWeightProfile();// 0x10e1e0e0 0x7873f78d60
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x10e1ceb4 0x7873f78e40
	bool IsBoneHiddenByName(FName BoneName);// 0x10e1d1dc 0x7873f78f20
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x10e1d338 0x7873f79000
	int GetVertexOffsetUsage(int LODIndex);// 0x10e1e040 0x7873f75720
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x10e1e5f4 0x7873f75800
	FName GetSocketBoneName(FName InSocketName);// 0x10e1eac4 0x7873f758e0
	Transform GetRefPoseTransform(int BoneIndex);// 0x10e1d974 0x7873f759c0
	Vector GetRefPosePosition(int BoneIndex);// 0x10e1da3c 0x7873f75aa0
	FName GetParentBone(FName BoneName);// 0x10e1e868 0x7873f75b80
	int GetNumLODs();// 0x10e1f094 0x7873f75c60
	int GetNumBones();// 0x10e1ecd4 0x7873f75d40
	int GetForcedLOD();// 0x10e1ef10 0x7873f75e20
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x10e1e758 0x7873f75f00
	FName GetCurrentSkinWeightProfileName();// 0x10e1e100 0x7873f75fe0
	FName GetBoneName(int BoneIndex);// 0x10e1eb74 0x7873f760c0
	int GetBoneIndex(FName BoneName);// 0x10e1ec24 0x7873f761a0
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x10e1d42c 0x7873f76280
	void ClearVertexColorOverride(int LODIndex);// 0x10e1e440 0x7873f76360
	void ClearSkinWeightProfile();// 0x10e1e1c4 0x7873f76440
	void ClearSkinWeightOverride(int LODIndex);// 0x10e1e28c 0x7873f76520
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x10e1daf0 0x7873f76600

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x548, Size: 0x10] 0x788a8afb00
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x568, Size: 0x1] 0x78737ff700
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x10d43d20 0x7873802380
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x10d43e10 0x7873802460
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x10d43f04 0x7873802540
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x10d44048 0x7873802620
	FName[] GetMaterialSlotNames();// 0x10d44104 0x7873802700
	MaterialInterface*[] GetMaterials();// 0x10d44274 0x78738027e0
	int GetMaterialIndex(FName MaterialSlotName);// 0x10d441bc 0x78738028c0

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0xf8, Size: 0x8] 0x7873f8e480
	BoxSphereBounds ImportedBounds;//[Offset: 0x100, Size: 0x38] 0x7873f8e500
	BoxSphereBounds ExtendedBounds;//[Offset: 0x138, Size: 0x38] 0x7873f8e580
	Vector PositiveBoundsExtension;//[Offset: 0x170, Size: 0x18] 0x7873f8e600
	Vector NegativeBoundsExtension;//[Offset: 0x188, Size: 0x18] 0x7873f8e680
	SkeletalMaterial[] Materials;//[Offset: 0x1a0, Size: 0x10] 0x7873ee8580
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0x1b0, Size: 0x10] 0x7873ee8620
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0x1c0, Size: 0x10] 0x7873ee86c0
	PerPlatformInt MinLOD;//[Offset: 0x220, Size: 0x4] 0x7873f8c780
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x224, Size: 0x1] 0x7873f8c800
	byte SkelMirrorAxis;//[Offset: 0x225, Size: 0x1] 0x7873f8c880
	byte SkelMirrorFlipAxis;//[Offset: 0x226, Size: 0x1] 0x7873f8c900
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x227, Size: 0x1] 0x7873f8c980
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x227, Size: 0x1] 0x7873f8ca00
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x227, Size: 0x1] 0x7873f8ca80
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x227, Size: 0x1] 0x7873f8cb00
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x227, Size: 0x1] 0x7873f8cb80
	BodySetup* BodySetup;//[Offset: 0x228, Size: 0x8] 0x7873f8cc00
	PhysicsAsset* PhysicsAsset;//[Offset: 0x230, Size: 0x8] 0x7873f8cc80
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x238, Size: 0x8] 0x7873f8cd00
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x240, Size: 0x10] 0x7873ee8760
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1] 0x7873f8ce00
	int RayTracingMinLOD;//[Offset: 0x254, Size: 0x4] 0x7873f8ce80
	enum ClothLODBiasMode;//[Offset: 0x258, Size: 0x1] 0x7873ee8800
	MorphTarget*[] MorphTargets;//[Offset: 0x260, Size: 0x10] 0x7873ee88a0
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x3e8, Size: 0x8] 0x7873ee8940
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x3f0, Size: 0x10] 0x7873ee89e0
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x400, Size: 0x30] 0x7873f8d080
	AssetUserData*[] AssetUserData;//[Offset: 0x430, Size: 0x10] 0x7873ee8a80
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x440, Size: 0x10] 0x7873ee8b20
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x460, Size: 0x10] 0x7873ee8bc0
	void SetSkeleton(Skeleton* InSkeleton);// 0x10e08a64 0x7873f7b3e0
	void SetMorphTargets(out const MorphTarget*[] InMorphTargets);// 0x10e081a4 0x7873f7b4c0
	void SetMeshClothingAssets(out const ClothingAssetBase*[] InMeshClothingAssets);// 0x10e07f08 0x7873f7b5a0
	void SetMaterials(out const SkeletalMaterial[] InMaterials);// 0x10e087e0 0x7873f7b680
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x10e086cc 0x7873f7b760
	void SetDefaultAnimatingRig(Object* InAnimatingRig);// 0x10e08570 0x7873f7b840
	int NumSockets();// 0x10e07b54 0x7873f7b920
	FString[] K2_GetAllMorphTargetNames();// 0x10e0808c 0x7873f7ba00
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x10e079a0 0x7873f7bae0
	SkeletalMeshSocket* GetSocketByIndex(int index);// 0x10e07aa4 0x7873f7bbc0
	Skeleton* GetSkeleton();// 0x10e08b08 0x7873f7bca0
	PhysicsAsset* GetShadowPhysicsAsset();// 0x10e0845c 0x7873f7bd80
	PhysicsAsset* GetPhysicsAsset();// 0x10e08478 0x7873f7be60
	NodeMappingContainer*[] GetNodeMappingData();// 0x10e083d8 0x7873f7bf40
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x10e08328 0x7873f7c020
	MorphTarget*[] GetMorphTargets();// 0x10e082a4 0x7873f7c100
	ClothingAssetBase*[] GetMeshClothingAssets();// 0x10e08008 0x7873f7c1e0
	SkeletalMaterial[] GetMaterials();// 0x10e088f4 0x7873f7c2c0
	SkeletalMeshLODSettings* GetLODSettings();// 0x10e08774 0x7873f7c3a0
	BoxSphereBounds GetImportedBounds();// 0x10e0897c 0x7873f7c480
	Object* GetDefaultAnimatingRig();// 0x10e08494 0x7873f7c560
	BoxSphereBounds GetBounds();// 0x10e089f0 0x7873f7c640
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x10e07b88 0x7873f7c720
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x10e07d50 0x7873f7c800
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x10e07e58 0x7873f7c8e0

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10] 0x7873ee98e0
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10] 0x7873ee9980
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10] 0x7873f96a80
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10] 0x7873ee9a20
	Skeleton*[] CompatibleSkeletons;//[Offset: 0x190, Size: 0x10] 0x7873ee9ac0
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x1a0, Size: 0x10] 0x7873ee9b60
	SmartNameContainer SmartNames;//[Offset: 0x200, Size: 0x50] 0x7873f96c80
	BlendProfile*[] BlendProfiles;//[Offset: 0x280, Size: 0x10] 0x7873ee9c00
	AnimSlotGroup[] SlotGroups;//[Offset: 0x290, Size: 0x10] 0x7873ee9ca0
	AssetUserData*[] AssetUserData;//[Offset: 0x460, Size: 0x10] 0x7873ee9d40
	BlendProfile* GetBlendProfile(out const FName InProfileName);// 0x10e1c04c 0x7873fa3260
	void AddCompatibleSkeleton(const Skeleton* SourceSkeleton);// 0x10e1bfa4 0x7873fa3340

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7873a35880
	int ParentIndex;//[Offset: 0x8, Size: 0x4] 0x7873a35900
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1] 0x7873a35980

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8] 0x7873dc9b00
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10] 0x7873db2e00
	enum Mode;//[Offset: 0x48, Size: 0x1] 0x7873db2ea0

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10] 0x787399e780
	float BlendScale;//[Offset: 0x10, Size: 0x4] 0x787399e800

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x7873883b80

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8] 0x7873a37380
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8] 0x7873a35300
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8] 0x7873a35380

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8] 0x7873f97000
	FName BoneName;//[Offset: 0x30, Size: 0x8] 0x7873f97080
	Vector RelativeLocation;//[Offset: 0x38, Size: 0x18] 0x7873f97100
	Rotator RelativeRotation;//[Offset: 0x50, Size: 0x18] 0x7873f97180
	Vector RelativeScale;//[Offset: 0x68, Size: 0x18] 0x7873f97200
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x7873f97280
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x10e1af44 0x7873fa3420
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x10e1b07c 0x7873fa3500

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8] 0x7873a35400
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10] 0x78739b6be0

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8] 0x7873f49880

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10] 0x7873d7a980
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10] 0x7873d7aa00

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8] 0x7873a34780
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8] 0x7873a34800
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14] 0x7873a34880

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78739d2400
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78739d2480
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4] 0x78739d2500

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4] 0x7873f95500
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1] 0x7873f95580
	bool bOverrideLODStreamingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x7873f95600
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x36, Size: 0x1] 0x7873f95680
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4] 0x7873f95700
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4] 0x7873f95780
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10] 0x7873ee9de0

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8] 0x78739bdd00

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4] 0x78738e7480

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78738e7580

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4] 0x7873a36300
	float LODHysteresis;//[Offset: 0x4, Size: 0x4] 0x7873a34280
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1] 0x78739b74a0
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10] 0x78739b7540
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10] 0x78739b75e0
	int[] SectionsToPrioritize;//[Offset: 0x30, Size: 0x10] 0x78739b7680
	float WeightOfPrioritization;//[Offset: 0x40, Size: 0x4] 0x7873a34500
	AnimSequence* BakePose;//[Offset: 0x48, Size: 0x8] 0x7873a34580
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x50, Size: 0x3c] 0x7873a34600

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873a34680
	FName BoneName;//[Offset: 0x4, Size: 0x8] 0x7873a34700

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xa8, Size: 0x8] 0x7873dc0880
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xb0, Size: 0x8] 0x7873dc0900
	byte AdditiveAnimType;//[Offset: 0x128, Size: 0x1] 0x7873dc0980
	byte RefPoseType;//[Offset: 0x129, Size: 0x1] 0x7873dc0a00
	int RefFrameIndex;//[Offset: 0x12c, Size: 0x4] 0x7873dc0a80
	AnimSequence* RefPoseSeq;//[Offset: 0x130, Size: 0x8] 0x7873dc0b00
	FName RetargetSource;//[Offset: 0x138, Size: 0x8] 0x7873dc0b80
	Transform[] RetargetSourceAssetReferencePose;//[Offset: 0x140, Size: 0x10] 0x7873db2900
	enum Interpolation;//[Offset: 0x150, Size: 0x1] 0x7873db0060
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1] 0x7873dc0d00
	byte RootMotionRootLock;//[Offset: 0x152, Size: 0x1] 0x7873dc0d80
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153, Size: 0x1] 0x7873dc0e00
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1] 0x7873dc0e80
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 0x1] 0x7873dc0f00
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x158, Size: 0x10] 0x7873db0100
	FrameRate TargetFrameRate;//[Offset: 0x178, Size: 0x8] 0x7873dc1000
	<AnimationAttributeIdentifier,AttributeCurve> AttributeCurves;//[Offset: 0x180, Size: 0x50] 0x787386d600

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10] 0x7873db0c40
	float SequenceLength;//[Offset: 0x90, Size: 0x4] 0x7873d9a900
	float RateScale;//[Offset: 0x94, Size: 0x4] 0x7873d9a980
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10] 0x7873d9aa00

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8] 0x7873d99300
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10] 0x7873cce660
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x7873cce700
	float GetPlayLength();// 0x10ad2368 0x7873da4920

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4] 0x7873995b00
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4] 0x7873995b80
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4] 0x7873995c00
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4] 0x7873995c80
	FName NotifyName;//[Offset: 0x40, Size: 0x8] 0x7873995d00
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8] 0x7873995d80
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8] 0x7873995e00
	float Duration;//[Offset: 0x58, Size: 0x4] 0x7873995e80
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30] 0x7873995f00
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7873995f80
	byte MontageTickType;//[Offset: 0x91, Size: 0x1] 0x7873996000
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4] 0x7873996080
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1] 0x7873996100
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4] 0x7873996180
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x7873996200
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1] 0x7873996280
	int TrackIndex;//[Offset: 0xa4, Size: 0x4] 0x7873996300

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8] 0x7873994c80
	int SlotIndex;//[Offset: 0x10, Size: 0x4] 0x7873994d00
	int SegmentIndex;//[Offset: 0x14, Size: 0x4] 0x7873994d80
	byte LinkMethod;//[Offset: 0x18, Size: 0x1] 0x7873994e00
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1] 0x7873994e80
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4] 0x7873994f00
	float SegmentLength;//[Offset: 0x20, Size: 0x4] 0x7873994f80
	float LinkValue;//[Offset: 0x24, Size: 0x4] 0x7873995000
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8] 0x7873995080

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	enum BlendModeIn;//[Offset: 0xa8, Size: 0x1] 0x7873db01a0
	enum BlendModeOut;//[Offset: 0xa9, Size: 0x1] 0x7873db0240
	AlphaBlend BlendIn;//[Offset: 0xb0, Size: 0x30] 0x7873d9f600
	float BlendInTime;//[Offset: 0xe0, Size: 0x4] 0x7873d9f680
	AlphaBlend BlendOut;//[Offset: 0xe8, Size: 0x30] 0x7873d9f700
	float BlendOutTime;//[Offset: 0x118, Size: 0x4] 0x7873d9f780
	float BlendOutTriggerTime;//[Offset: 0x11c, Size: 0x4] 0x7873d9d700
	FName SyncGroup;//[Offset: 0x120, Size: 0x8] 0x7873d9d780
	int SyncSlotIndex;//[Offset: 0x128, Size: 0x4] 0x7873d9d800
	MarkerSyncData MarkerData;//[Offset: 0x130, Size: 0x20] 0x7873d9d880
	CompositeSection[] CompositeSections;//[Offset: 0x150, Size: 0x10] 0x7873db02e0
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x160, Size: 0x10] 0x7873db0380
	BranchingPoint[] BranchingPoints;//[Offset: 0x170, Size: 0x10] 0x7873db0420
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1] 0x7873d9da80
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1] 0x7873d9db00
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 0x1] 0x7873d9db80
	BlendProfile* BlendProfileIn;//[Offset: 0x188, Size: 0x8] 0x7873d9dc00
	BlendProfile* BlendProfileOut;//[Offset: 0x190, Size: 0x8] 0x7873d9dc80
	byte RootMotionRootLock;//[Offset: 0x198, Size: 0x1] 0x7873d9dd00
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x1a0, Size: 0x10] 0x7873db04c0
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x1b0, Size: 0x10] 0x7873db0560
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1c0, Size: 0x28] 0x7873d9de80
	FName TimeStretchCurveName;//[Offset: 0x1e8, Size: 0x8] 0x7873d9df00
	bool IsValidSectionName(FName InSectionName);// 0x10b00098 0x7873da6b40
	float GetDefaultBlendOutTime();// 0x10b0014c 0x7873da6c20
	float GetDefaultBlendInTime();// 0x10b00168 0x7873da6d00
	AlphaBlendArgs GetBlendOutArgs();// 0x10b00184 0x7873da6de0
	AlphaBlendArgs GetBlendInArgs();// 0x10b001f8 0x7873da6ec0
	static AnimMontage* CreateSlotAnimationAsDynamicMontage_WithBlendSettings(AnimSequenceBase* Asset, FName SlotNodeName, out const MontageBlendSettings BlendInSettings, out const MontageBlendSettings BlendOutSettings, float InPlayRate, int LoopCount, float InBlendOutTriggerTime);// 0x10affe20 0x7873da6fa0

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlendArgs
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8] 0x7873990e00
	float BlendTime;//[Offset: 0x8, Size: 0x4] 0x7873990e80
	enum BlendOption;//[Offset: 0xc, Size: 0x1] 0x787376c360

--------------------------------
Class: MontageBlendSettings
	BlendProfile* BlendProfile;//[Offset: 0x0, Size: 0x8] 0x7873994500
	AlphaBlendArgs Blend;//[Offset: 0x8, Size: 0x10] 0x7873994580
	enum BlendMode;//[Offset: 0x18, Size: 0x1] 0x787376de40

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8] 0x7873884c80
	float BlendTime;//[Offset: 0x8, Size: 0x4] 0x7873884d00
	enum BlendOption;//[Offset: 0x24, Size: 0x1] 0x788ab2f880

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10] 0x787376e700

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8] 0x787399c500
	float Time;//[Offset: 0x8, Size: 0x4] 0x787399c580

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8] 0x7873994a80
	float StartTime;//[Offset: 0x38, Size: 0x4] 0x7873994b00
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8] 0x7873994b80
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10] 0x787376dee0

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8] 0x7873994980
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10] 0x7873994a00

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10] 0x787376bbe0

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8] 0x7873992f00
	float StartPos;//[Offset: 0x8, Size: 0x4] 0x7873992f80
	float AnimStartTime;//[Offset: 0xc, Size: 0x4] 0x7873993000
	float AnimEndTime;//[Offset: 0x10, Size: 0x4] 0x7873993080
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4] 0x7873993100
	int LoopingCount;//[Offset: 0x18, Size: 0x4] 0x7873993180

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8] 0x7873994800
	float DisplayTime;//[Offset: 0x38, Size: 0x4] 0x7873994880
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4] 0x7873994900

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4] 0x7873994680
	float TriggerTime;//[Offset: 0x4, Size: 0x4] 0x7873994700
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1] 0x7873994780

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4] 0x7873a42700
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4] 0x7873a42780
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10] 0x78739b7cc0
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4] 0x7873a42880

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4] 0x7873a42900
	float Alpha;//[Offset: 0xc, Size: 0x4] 0x7873a42980

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, out const AnimNotifyEventReference EventReference);// 0xb8f1ab4 0x7873b96600
	FString GetNotifyName();// 0x10b0f058 0x7873b966e0
	float GetDefaultTriggerWeightThreshold();// 0x10b0f01c 0x7873b967c0

--------------------------------
Class: AnimNotifyEventReference
	MirrorDataTable* MirrorTable;//[Offset: 0x18, Size: 0x8] 0x7873997580
	Object* NotifySource;//[Offset: 0x20, Size: 0x8] 0x7873997600

--------------------------------
Class: MirrorDataTable.DataTable.Object
	MirrorFindReplaceExpression[] MirrorFindReplaceExpressions;//[Offset: 0xb0, Size: 0x10] 0x7873ee3300
	byte MirrorAxis;//[Offset: 0xc0, Size: 0x1] 0x7873f49a00
	Skeleton* Skeleton;//[Offset: 0xc8, Size: 0x8] 0x7873f49a80

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8] 0x7873dfb380
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7873dfb400
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7873dfb480
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x7873dfb500
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10] 0x7873dfb580

--------------------------------
Class: MirrorFindReplaceExpression
	FName FindExpression;//[Offset: 0x0, Size: 0x8] 0x7873a11980
	FName ReplaceExpression;//[Offset: 0x8, Size: 0x8] 0x7873a11a00
	byte FindReplaceMethod;//[Offset: 0x10, Size: 0x1] 0x7873a11a80

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime, out const AnimNotifyEventReference EventReference);// 0xb8f1ab4 0x7873b96a60
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, out const AnimNotifyEventReference EventReference);// 0xb8f1ab4 0x7873b96b40
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration, out const AnimNotifyEventReference EventReference);// 0xb8f1ab4 0x7873b96c20
	FString GetNotifyName();// 0x10b103ec 0x7873b96d00
	float GetDefaultTriggerWeightThreshold();// 0x10b103b0 0x7873b96de0

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10] 0x787376bb40

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80] 0x7873992c00

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8] 0x7873992c80
	SmartName Name;//[Offset: 0x8, Size: 0xc] 0x7873992d80
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4] 0x7873992e00

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8] 0x7873992d00

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10] 0x7873db1460

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10] 0x7873d9b480

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8] 0x7873d9d600

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4] 0x788a4ddf00
	int Denominator;//[Offset: 0x4, Size: 0x4] 0x788a4dde80

--------------------------------
Class: AnimationAttributeIdentifier
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7873994000
	FName BoneName;//[Offset: 0x8, Size: 0x8] 0x7873994080
	int BoneIndex;//[Offset: 0x10, Size: 0x4] 0x7873994100
	ScriptStruct* ScriptStruct;//[Offset: 0x18, Size: 0x8] 0x7873994180
	SoftObjectPath ScriptStructPath;//[Offset: 0x20, Size: 0x18] 0x7873994200

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8] 0x788a48d800
	FString SubPathString;//[Offset: 0x8, Size: 0x10] 0x788a48d780

--------------------------------
Class: AttributeCurve.IndexedCurve
	AttributeKey[] Keys;//[Offset: 0x68, Size: 0x10] 0x787376e0c0
	SoftObjectPath ScriptStructPath;//[Offset: 0x78, Size: 0x18] 0x7873992300
	ScriptStruct* ScriptStruct;//[Offset: 0x90, Size: 0x8] 0x7873992380
	bool bShouldInterpolate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x7873992400

--------------------------------
Class: AttributeKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7873992200

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1] 0x7873a33600
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4] 0x7873a33680
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4] 0x7873a33700
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4] 0x7873a33780
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4] 0x7873a33800
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4] 0x7873a33880
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1] 0x7873a33900
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1] 0x7873a33980
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1] 0x7873a33a00
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1] 0x7873a33a80
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1] 0x7873a33b00
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1] 0x7873a33b80
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1] 0x7873a33c00
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4] 0x7873a33c80
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4] 0x7873a33d00
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4] 0x7873a33d80
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x7873a33e00
	bool bMergeCoincidentVertBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1] 0x7873a33e80
	float VolumeImportance;//[Offset: 0x30, Size: 0x4] 0x7873a33f00
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7873a33f80
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1] 0x7873a34000
	int BaseLOD;//[Offset: 0x38, Size: 0x4] 0x7873a34080

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0x18] 0x788a4dd280
	Vector BoxExtent;//[Offset: 0x18, Size: 0x18] 0x788a4dd200
	double SphereRadius;//[Offset: 0x30, Size: 0x8] 0x788a4dd180

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4] 0x7873a32d00
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1] 0x7873a32d80

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4] 0x7873a33400
	float LODHysteresis;//[Offset: 0x4, Size: 0x4] 0x7873a33480
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10] 0x78739b7720
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14] 0x7873a33580
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c] 0x7873a34100
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10] 0x78739b77c0
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10] 0x78739b7860
	SectionReference[] SectionsToPrioritize;//[Offset: 0x88, Size: 0x10] 0x78739b7900
	float WeightOfPrioritization;//[Offset: 0x98, Size: 0x4] 0x7873a32200
	AnimSequence* BakePose;//[Offset: 0xa0, Size: 0x8] 0x7873a32280
	AnimSequence* BakePoseOverride;//[Offset: 0xa8, Size: 0x8] 0x7873a32300
	FString SourceImportFilename;//[Offset: 0xb0, Size: 0x10] 0x7873a32380
	enum SkinCacheUsage;//[Offset: 0xc0, Size: 0x1] 0x78739b79a0
	float MorphTargetPositionErrorTolerance;//[Offset: 0xc4, Size: 0x4] 0x7873a32480
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x7873a32500
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1] 0x7873a32580
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc8, Size: 0x1] 0x7873a32600
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc8, Size: 0x1] 0x7873a32680

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78739dee80
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78739def00
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78739def80
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78739df000
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78739df080
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78739df100
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78739df180
	bool bUseBackwardsCompatibleF16TruncUVs;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78739df200
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4] 0x78739df280
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4] 0x78739df300
	float ThresholdUV;//[Offset: 0xc, Size: 0x4] 0x78739df380
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4] 0x78739df400

--------------------------------
Class: SectionReference
	int SectionIndex;//[Offset: 0x0, Size: 0x4] 0x7873a32700

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10] 0x7873ee65a0
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10] 0x7873ee6640
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10] 0x7873ee66e0
	PhysicsAssetSolverSettings SolverSettings;//[Offset: 0x60, Size: 0x18] 0x7873f60d00
	SolverIterations SolverIterations;//[Offset: 0x78, Size: 0x18] 0x7873f60d80
	enum SolverType;//[Offset: 0x90, Size: 0x1] 0x7873ee3e40
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91, Size: 0x1] 0x7873f60e80
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x138, Size: 0x8] 0x7873f60f00
	BodySetup*[] BodySetup;//[Offset: 0x140, Size: 0x10] 0x7873ee3ee0

--------------------------------
Class: SkeletalBodySetup.BodySetup.BodySetupCore.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1] 0x7873f60a80
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2f8, Size: 0x10] 0x7873ee6500

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8] 0x7873a1b280
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24] 0x7873a1b300

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8] 0x7873a19880
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7873a19900
	float OrientationStrength;//[Offset: 0xc, Size: 0x4] 0x7873a19980
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4] 0x7873a19a00
	float PositionStrength;//[Offset: 0x14, Size: 0x4] 0x7873a19a80
	float VelocityStrength;//[Offset: 0x18, Size: 0x4] 0x7873a19b00
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4] 0x7873a19b80
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4] 0x7873a19c00

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x270] 0x7873f63f00
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x298, Size: 0x10] 0x7873ee6460
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x2a8, Size: 0x158] 0x7873f64000

--------------------------------
Class: ConstraintInstance.ConstraintInstanceBase
	FName JointName;//[Offset: 0x38, Size: 0x8] 0x78739d6280
	FName ConstraintBone1;//[Offset: 0x40, Size: 0x8] 0x78739d6300
	FName ConstraintBone2;//[Offset: 0x48, Size: 0x8] 0x78739d4280
	Vector Pos1;//[Offset: 0x50, Size: 0x18] 0x78739d4300
	Vector PriAxis1;//[Offset: 0x68, Size: 0x18] 0x78739d4380
	Vector SecAxis1;//[Offset: 0x80, Size: 0x18] 0x78739d4400
	Vector Pos2;//[Offset: 0x98, Size: 0x18] 0x78739d4480
	Vector PriAxis2;//[Offset: 0xb0, Size: 0x18] 0x78739d4500
	Vector SecAxis2;//[Offset: 0xc8, Size: 0x18] 0x78739d4580
	Rotator AngularRotationOffset;//[Offset: 0xe0, Size: 0x18] 0x78739d4600
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1] 0x78739d4680
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x100, Size: 0x158] 0x78739d4700

--------------------------------
Class: ConstraintInstanceBase

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4] 0x78739d4780
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4] 0x78739d4800
	float ProjectionLinearAlpha;//[Offset: 0x8, Size: 0x4] 0x78739d4880
	float ProjectionAngularAlpha;//[Offset: 0xc, Size: 0x4] 0x78739d4900
	float ShockPropagationAlpha;//[Offset: 0x10, Size: 0x4] 0x78739d4980
	float LinearBreakThreshold;//[Offset: 0x14, Size: 0x4] 0x78739d4a00
	float LinearPlasticityThreshold;//[Offset: 0x18, Size: 0x4] 0x78739d4a80
	float AngularBreakThreshold;//[Offset: 0x1c, Size: 0x4] 0x78739d4b00
	float AngularPlasticityThreshold;//[Offset: 0x20, Size: 0x4] 0x78739d4b80
	float ContactTransferScale;//[Offset: 0x24, Size: 0x4] 0x78739d4c00
	LinearConstraint LinearLimit;//[Offset: 0x28, Size: 0x1c] 0x78739d4e80
	ConeConstraint ConeLimit;//[Offset: 0x44, Size: 0x20] 0x78739d5100
	TwistConstraint TwistLimit;//[Offset: 0x64, Size: 0x1c] 0x78739d3400
	LinearDriveConstraint LinearDrive;//[Offset: 0x80, Size: 0x68] 0x78739d3480
	AngularDriveConstraint AngularDrive;//[Offset: 0xe8, Size: 0x68] 0x78739d3500
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1] 0x78739d3580
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x150, Size: 0x1] 0x78739d3600
	bool bEnableLinearProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x150, Size: 0x1] 0x78739d3680
	bool bEnableAngularProjection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x150, Size: 0x1] 0x78739d3700
	bool bEnableShockPropagation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x150, Size: 0x1] 0x78739d3780
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x150, Size: 0x1] 0x78739d3800
	bool bEnableSoftProjection;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x150, Size: 0x1] 0x78739d3880
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x150, Size: 0x1] 0x78739d3900
	bool bAngularPlasticity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1] 0x78739d3980
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x151, Size: 0x1] 0x78739d3a00
	bool bLinearPlasticity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x151, Size: 0x1] 0x78739d3a80
	byte LinearPlasticityType;//[Offset: 0x152, Size: 0x1] 0x78739d3b00

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4] 0x78739d4c80
	byte XMotion;//[Offset: 0x18, Size: 0x1] 0x78739d4d00
	byte YMotion;//[Offset: 0x19, Size: 0x1] 0x78739d4d80
	byte ZMotion;//[Offset: 0x1a, Size: 0x1] 0x78739d4e00

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x78739d5280
	float Damping;//[Offset: 0x4, Size: 0x4] 0x78739d3200
	float Restitution;//[Offset: 0x8, Size: 0x4] 0x78739d3280
	float ContactDistance;//[Offset: 0xc, Size: 0x4] 0x78739d3300
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78739d3380

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4] 0x78739d4f00
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4] 0x78739d4f80
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1] 0x78739d5000
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1] 0x78739d5080

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4] 0x78739d5180
	byte TwistMotion;//[Offset: 0x18, Size: 0x1] 0x78739d5200

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0x18] 0x78739d3e80
	Vector VelocityTarget;//[Offset: 0x18, Size: 0x18] 0x78739d3f00
	ConstraintDrive XDrive;//[Offset: 0x30, Size: 0x10] 0x78739d3f80
	ConstraintDrive YDrive;//[Offset: 0x40, Size: 0x10] 0x78739d4000
	ConstraintDrive ZDrive;//[Offset: 0x50, Size: 0x10] 0x78739d4080
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78739d4100

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x78739d4180
	float Damping;//[Offset: 0x4, Size: 0x4] 0x78739d4200
	float MaxForce;//[Offset: 0x8, Size: 0x4] 0x78739d2180
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78739d2200
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x78739d2280

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10] 0x78739d3b80
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10] 0x78739d3c00
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10] 0x78739d3c80
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0x18] 0x78739d3d00
	Vector AngularVelocityTarget;//[Offset: 0x48, Size: 0x18] 0x78739d3d80
	byte AngularDriveMode;//[Offset: 0x60, Size: 0x1] 0x78739d3e00

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x158] 0x7873a1b180
	FName ProfileName;//[Offset: 0x158, Size: 0x8] 0x7873a1b200

--------------------------------
Class: PhysicsAssetSolverSettings
	int PositionIterations;//[Offset: 0x0, Size: 0x4] 0x7873a19580
	int VelocityIterations;//[Offset: 0x4, Size: 0x4] 0x7873a19600
	int ProjectionIterations;//[Offset: 0x8, Size: 0x4] 0x7873a19680
	float CullDistance;//[Offset: 0xc, Size: 0x4] 0x7873a19700
	float MaxDepenetrationVelocity;//[Offset: 0x10, Size: 0x4] 0x7873a19780
	float FixedTimeStep;//[Offset: 0x14, Size: 0x4] 0x7873a19800

--------------------------------
Class: SolverIterations
	int SolverIterations;//[Offset: 0x0, Size: 0x4] 0x7873a1b380
	int JointIterations;//[Offset: 0x4, Size: 0x4] 0x7873a1b400
	int CollisionIterations;//[Offset: 0x8, Size: 0x4] 0x7873a1b480
	int SolverPushOutIterations;//[Offset: 0xc, Size: 0x4] 0x7873a1b500
	int JointPushOutIterations;//[Offset: 0x10, Size: 0x4] 0x7873a1b580
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 0x4] 0x7873a19500

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50] 0x787386c700
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50] 0x787386c7c0
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50] 0x787386c880
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28] 0x7873f4ac80
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28] 0x7873f4ad00

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8] 0x7873a15a80
	Transform Transform;//[Offset: 0x10, Size: 0x60] 0x7873a15b00

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8] 0x7873cc8260
	byte BlueprintType;//[Offset: 0x58, Size: 0x1] 0x7873d29800
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x7873d29880
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x7873d29900
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x7873d29980
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4] 0x7873d29a00
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8] 0x7873d29a80
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10] 0x7873cc8300
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10] 0x7873cc83a0
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10] 0x7873cc8440
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8] 0x7873d29c80

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8] 0x7873cc84e0
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8] 0x7873cc8580
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7873d29d00
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10] 0x7873d29d80

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10] 0x7873ee6820
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10] 0x7873ee68c0
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8] 0x7873f8c580

--------------------------------
Class: SCS_Node.Object
	ClassPtrProperty ComponentClass;//[Size: 0x8] 0x7873ee6960
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8] 0x7873f89d00
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48] 0x7873f89d80
	FName AttachToName;//[Offset: 0x80, Size: 0x8] 0x7873f89e00
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8] 0x7873f89e80
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8] 0x7873f89f00
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x7873f89f80
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10] 0x7873ee6a00
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10] 0x7873ee6aa0
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10] 0x7873f8a100
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8] 0x7873f8a180

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10] 0x78739b0c40
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x78739c3180

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8] 0x78739c1100
	int ArrayIndex;//[Offset: 0x8, Size: 0x4] 0x78739c1180
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8] 0x78739c1200

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8] 0x78739c0480
	FString DataValue;//[Offset: 0x8, Size: 0x10] 0x78739c0500

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4] 0x7873fb9100
	byte LengthMode;//[Offset: 0x2c, Size: 0x1] 0x7873fb9180
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x7873fb9200
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1] 0x7873fb9280
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1] 0x7873fb9300
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1] 0x7873fb9380
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10] 0x7873eec7c0
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10] 0x7873eec860
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10] 0x7873eec900
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10] 0x7873eec9a0
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10] 0x7873eeca40
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10] 0x7873fb7580
	byte TimelineTickGroup;//[Offset: 0x90, Size: 0x1] 0x7873fb7600
	FName VariableName;//[Offset: 0x94, Size: 0x8] 0x7873fb7680
	FName DirectionPropertyName;//[Offset: 0x9c, Size: 0x8] 0x7873fb7700
	FName UpdateFunctionName;//[Offset: 0xa4, Size: 0x8] 0x7873fb7780
	FName FinishedFunctionName;//[Offset: 0xac, Size: 0x8] 0x7873fb7800

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8] 0x7873a42c00
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8] 0x7873a42c80

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8] 0x7873a42e00
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7873a42e80

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8] 0x7873a42b00

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8] 0x7873a42b80

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8] 0x7873a42a80

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80] 0x7873e04100
	Vector GetVectorValue(float InTime);// 0x10bb3d08 0x7873de90e0

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8] 0x7873a42a00

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80] 0x7873e02a80
	float AdjustHue;//[Offset: 0x230, Size: 0x4] 0x7873e02b00
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4] 0x7873e02b80
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4] 0x7873e02c00
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4] 0x7873e02c80
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4] 0x7873e02d00
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4] 0x7873e02d80
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4] 0x7873e02e00
	LinearColor GetUnadjustedLinearColorValue(float InTime);// 0x10badcf0 0x7873de9700
	LinearColor GetLinearColorValue(float InTime);// 0x10bade60 0x7873de97e0
	LinearColor GetClampedLinearColorValue(float InTime);// 0x10badda4 0x7873de98c0

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8] 0x78739c3080
	ClassPtrProperty ComponentClass;//[Size: 0x8] 0x78739b0ba0

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10] 0x7873dbc720
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10] 0x7873dbc7c0

--------------------------------
Class: ComponentOverrideRecord
	ClassPtrProperty ComponentClass;//[Size: 0x8] 0x78739b3440
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8] 0x78739e3c80
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20] 0x78739e3d00
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48] 0x78739e3d80

--------------------------------
Class: ComponentKey
	ClassPtrProperty OwnerClass;//[Size: 0x8] 0x78739b34e0
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8] 0x78739e3e00
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10] 0x78739e3e80

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8] 0x7873abff80
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1] 0x7873abe780
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1] 0x7873abe800
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1] 0x7873abe880
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1] 0x7873abe900
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1] 0x7873abe980
	bool bUseMainInstanceMontageEvaluationData;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1] 0x7873abea00
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x31, Size: 0x1] 0x7873abea80
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10] 0x7873abeb00
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10] 0x7873abeb80
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10] 0x7873abec00
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10] 0x7873abec80
	AnimNotifyQueue NotifyQueue;//[Offset: 0x150, Size: 0x70] 0x7873abed00
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x1c0, Size: 0x10] 0x78739be660
	AnimNotifyEventReference[] ActiveAnimNotifyEventReference;//[Offset: 0x1d0, Size: 0x10] 0x78739be700
	bool WasAnimNotifyTriggeredInStateMachine(int MachineIndex, class AnimNotify AnimNotifyType);// 0x10aecf00 0x7873ac53a0
	bool WasAnimNotifyTriggeredInSourceState(int MachineIndex, int StateIndex, class AnimNotify AnimNotifyType);// 0x10aed148 0x7873ac5480
	bool WasAnimNotifyTriggeredInAnyState(class AnimNotify AnimNotifyType);// 0x10aecd4c 0x7873ac5560
	bool WasAnimNotifyStateActiveInStateMachine(int MachineIndex, class AnimNotifyState AnimNotifyStateType);// 0x10aed3d8 0x7873ac5640
	bool WasAnimNotifyStateActiveInSourceState(int MachineIndex, int StateIndex, class AnimNotifyState AnimNotifyStateType);// 0x10aed290 0x7873ac1d60
	bool WasAnimNotifyStateActiveInAnyState(class AnimNotifyState AnimNotifyStateType);// 0x10aed4d8 0x7873ac1e40
	bool WasAnimNotifyNameTriggeredInStateMachine(int MachineIndex, FName NotifyName);// 0x10aece00 0x7873ac1f20
	bool WasAnimNotifyNameTriggeredInSourceState(int MachineIndex, int StateIndex, FName NotifyName);// 0x10aed000 0x7873ac2000
	bool WasAnimNotifyNameTriggeredInAnyState(FName NotifyName);// 0x10aecc98 0x7873ac20e0
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x10aec568 0x7873ac21c0
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x10aee814 0x7873ac22a0
	Pawn* TryGetPawnOwner();// 0x10af1328 0x7873ac2380
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x10af04c4 0x7873ac2460
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x10af10f0 0x7873ac2540
	void SetUseMainInstanceMontageEvaluationData(bool bSet);// 0x10af0e68 0x7873ac2620
	void SetRootMotionMode(byte Value);// 0x10aee314 0x7873ac2700
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x10af1018 0x7873ac27e0
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x10af0f40 0x7873ac28c0
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x10aec878 0x7873ac29a0
	void SavePoseSnapshot(FName SnapshotName);// 0x10af1278 0x7873ac2a80
	void ResetDynamics(enum InTeleportType);// 0x10aec014 0x7873ac2b60
	void RequestSlotGroupInertialization(FName InSlotGroupName, float Duration);// 0x10aee3bc 0x7873ac2c40
	void RemovePoseSnapshot(FName SnapshotName);// 0x10af11d0 0x7873ac2d20
	AnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendSettings(AnimSequenceBase* Asset, FName SlotNodeName, out const MontageBlendSettings BlendInSettings, out const MontageBlendSettings BlendOutSettings, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x10af05b8 0x7873ac2e00
	AnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendArgs(AnimSequenceBase* Asset, FName SlotNodeName, out const AlphaBlendArgs BlendIn, out const AlphaBlendArgs BlendOut, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x10af0880 0x7873ac2ee0
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x10af0b48 0x7873ac2fc0
	void MontageSync_StopFollowing(const AnimMontage* MontageFollower);// 0x10aeec7c 0x7873ac30a0
	void MontageSync_Follow(const AnimMontage* MontageFollower, const AnimInstance* OtherAnimInstance, const AnimMontage* MontageLeader);// 0x10aeed24 0x7873ac3180
	void Montage_StopWithBlendSettings(out const MontageBlendSettings BlendOutSettings, const AnimMontage* Montage);// 0x10aefa84 0x7873ac3260
	void Montage_StopWithBlendOut(out const AlphaBlendArgs BlendOut, const AnimMontage* Montage);// 0x10aefb80 0x7873ac3340
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x10aef990 0x7873ac3420
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x10aefc7c 0x7873ac3500
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x10aef074 0x7873ac35e0
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x10aef430 0x7873ac36c0
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x10aef524 0x7873ac37a0
	void Montage_Resume(const AnimMontage* Montage);// 0x10aef840 0x7873ac3880
	float Montage_PlayWithBlendSettings(AnimMontage* MontageToPlay, out const MontageBlendSettings BlendInSettings, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x10aefd70 0x7873ac3960
	float Montage_PlayWithBlendIn(AnimMontage* MontageToPlay, out const AlphaBlendArgs BlendIn, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x10aeffa8 0x7873ac0080
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x10af01e0 0x7873ac0160
	void Montage_Pause(const AnimMontage* Montage);// 0x10aef8e8 0x7873ac0240
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x10aef660 0x7873ac0320
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x10aef750 0x7873ac0400
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x10aef2c8 0x7873ac04e0
	bool Montage_IsActive(const AnimMontage* Montage);// 0x10aef37c 0x7873ac05c0
	float Montage_GetPosition(const AnimMontage* Montage);// 0x10aef168 0x7873ac06a0
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x10aeee60 0x7873ac0780
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x10aeefc0 0x7873ac0860
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x10aef218 0x7873ac0940
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x10aeef10 0x7873ac0a20
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x10aec660 0x7873ac0b00
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x10aee964 0x7873ac0be0
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x10aee8bc 0x7873ac0cc0
	bool IsUsingMainInstanceMontageEvaluationData();// 0x10af0f20 0x7873ac0da0
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x10aec17c 0x7873ac0e80
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x10af03c8 0x7873ac0f60
	bool IsAnyMontagePlaying();// 0x10aeec44 0x7873ac1040
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x10aec318 0x7873ac1120
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x10aec414 0x7873ac1200
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x10aec0bc 0x7873ac12e0
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x10aed874 0x7873ac13c0
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x10aed96c 0x7873ac14a0
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x10aed58c 0x7873ac1580
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x10aed684 0x7873ac1660
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x10aed77c 0x7873ac1740
	bool GetReceiveNotifiesFromLinkedInstances();// 0x10af10d0 0x7873ac1820
	bool GetPropagateNotifiesToLinkedInstances();// 0x10af0ff8 0x7873ac1900
	SkeletalMeshComponent* GetOwningComponent();// 0x10af0e00 0x7873ac19e0
	Actor* GetOwningActor();// 0x10af0e34 0x7873ac1ac0
	void GetLinkedAnimLayerInstancesByGroup(FName InGroup, out AnimInstance*[] OutLinkedInstances);// 0x10aee658 0x7873ac1ba0
	AnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class AnimInstance InClass);// 0x10aee560 0x7873ac1c80
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x10aee764 0x7873a9e780
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x10aee4b0 0x7873a9e860
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x10aeea54 0x7873a9e940
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x10aeeb60 0x7873a9ea20
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x10aeda64 0x7873a9eb00
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x10aedb5c 0x7873a9ebe0
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x10aedc54 0x7873a9ecc0
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x10aeddfc 0x7873a9eda0
	float GetInstanceMachineWeight(int MachineIndex);// 0x10aedef4 0x7873a9ee80
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x10aedd4c 0x7873a9ef60
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x10aedfa4 0x7873a9f040
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x10aee054 0x7873a9f120
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x10aee104 0x7873a9f200
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x10aee1b4 0x7873a9f2e0
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x10aee264 0x7873a9f3c0
	float GetDeltaSeconds();// 0x10aebfe0 0x7873a9f4a0
	float GetCurveValue(FName CurveName);// 0x10aecbe8 0x7873a9f580
	FName GetCurrentStateName(int MachineIndex);// 0x10aec96c 0x7873a9f660
	AnimMontage* GetCurrentActiveMontage();// 0x10aeec10 0x7873a9f740
	void GetAllCurveNames(out FName[] OutNames);// 0x10aeca1c 0x7873a9f820
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x10aecadc 0x7873a9f900
	void ClearMorphTargets();// 0x10aec864 0x7873a9f9e0
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x10aec758 0x7873a9fac0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0xb8f1ab4 0x7873a9fba0
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);// 0xb8f1ab4 0x7873a9fc80
	void BlueprintPostEvaluateAnimation();// 0xb8f1ab4 0x7873a9fd60
	void BlueprintLinkedAnimationLayersInitialized();// 0xb8f1ab4 0x7873a9fe40
	void BlueprintInitializeAnimation();// 0xb8f1ab4 0x7873a9ff20
	void BlueprintBeginPlay();// 0xb8f1ab4 0x7873a9caa0

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10] 0x787376d4e0
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50] 0x78739a4540

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10] 0x787376d580

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10] 0x78737679a0
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10] 0x7873767a40
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8] 0x787394db00
	FName SnapshotName;//[Offset: 0x28, Size: 0x8] 0x787394db80
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x787394dc00

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8] 0x7873990900
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8] 0x7873990980
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4] 0x7873990a00

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10] 0x78739b6fa0
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20] 0x7873a35b80

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7873a35c00
	int LODIndex;//[Offset: 0x8, Size: 0x4] 0x7873a35c80
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7873a35d00
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10] 0x78739b7040
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10] 0x78739b70e0

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8] 0x7873a35e80

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x7873a35f00
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7873a35f80
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7873a36000

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10] 0x78739b7180
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10] 0x78739b7220

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7873a37000
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1] 0x7873a37080
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4] 0x7873a37100

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4] 0x7873a37280
	byte Weights;//[Offset: 0x30, Size: 0x1] 0x7873a37300

--------------------------------
Class: MeshDeformer.Object

--------------------------------
Class: MeshDeformerInstance.Object

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10] 0x78739b6b40

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x20] 0x788a4d9d00
	Plane YPlane;//[Offset: 0x20, Size: 0x20] 0x788a4dc000
	Plane ZPlane;//[Offset: 0x40, Size: 0x20] 0x788a4dbf80
	Plane WPlane;//[Offset: 0x60, Size: 0x20] 0x788a4dbe80

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8] 0x7873a32e00
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7873a32e80
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7873a32f00
	float SavedPosition;//[Offset: 0xc, Size: 0x4] 0x7873a32f80
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4] 0x7873a33000

--------------------------------
Class: ConstraintInstanceAccessor
	Object* Owner;//[Offset: 0x0, Size: 0x8] 0x78739d6180
	uint32 index;//[Offset: 0x8, Size: 0x4] 0x78739d6200

--------------------------------
Class: ClothingSimulationInteractor.Object
	<FName,ClothingInteractor*> ClothingInteractors;//[Offset: 0x28, Size: 0x50] 0x78738694c0
	void SetNumSubsteps(int NumSubsteps);// 0xf5949c4 0x7873b592a0
	void SetNumIterations(int NumIterations);// 0xf594b24 0x7873b59380
	void SetMaxNumIterations(int MaxNumIterations);// 0xf594a74 0x7873b59460
	void SetAnimDriveSpringStiffness(float InStiffness);// 0xf594ca8 0x7873b59540
	void PhysicsAssetUpdated();// 0xf594d74 0x7873b59620
	float GetSimulationTime();// 0xf59491c 0x7873b59700
	int GetNumSubsteps();// 0xf594938 0x7873b597e0
	int GetNumKinematicParticles();// 0xf59498c 0x7873b598c0
	int GetNumIterations();// 0xf594954 0x7873b599a0
	int GetNumDynamicParticles();// 0xf594970 0x7873b59a80
	int GetNumCloths();// 0xf5949a8 0x7873b59b60
	ClothingInteractor* GetClothingInteractor(FString ClothingAssetName);// 0xf594860 0x7873b59c40
	void EnableGravityOverride(out const Vector InVector);// 0xf594bf0 0x7873b59d20
	void DisableGravityOverride();// 0xf594bd4 0x7873b59e00
	void ClothConfigUpdated();// 0xf594d58 0x7873b59ee0

--------------------------------
Class: ClothingInteractor.Object

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7873a19e00
	byte ParamType;//[Offset: 0x8, Size: 0x1] 0x7873a19e80
	float Scalar;//[Offset: 0xc, Size: 0x4] 0x7873a19f00
	float Scalar_Low;//[Offset: 0x10, Size: 0x4] 0x7873a19f80
	Vector Vector;//[Offset: 0x18, Size: 0x18] 0x7873a1a000
	Vector Vector_Low;//[Offset: 0x30, Size: 0x18] 0x7873a1a080
	Color Color;//[Offset: 0x48, Size: 0x4] 0x7873a1a100
	Actor* Actor;//[Offset: 0x50, Size: 0x8] 0x7873a1a180
	MaterialInterface* Material;//[Offset: 0x58, Size: 0x8] 0x7873a1a200

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4] 0x7873f5ec80

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10] 0x7873dbe200
	int ActiveTab;//[Offset: 0x38, Size: 0x4] 0x7873e5f500

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10] 0x78739e4280
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10] 0x78739b3080
	float ViewStartInput;//[Offset: 0x20, Size: 0x4] 0x78739e4380
	float ViewEndInput;//[Offset: 0x24, Size: 0x4] 0x78739e4400
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4] 0x78739e4480
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4] 0x78739e4500

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8] 0x78739e4580
	Color CurveColor;//[Offset: 0x8, Size: 0x4] 0x78739e4600
	FString CurveName;//[Offset: 0x10, Size: 0x10] 0x78739e4680
	int bHideCurve;//[Offset: 0x20, Size: 0x4] 0x78739e4700
	int bColorCurve;//[Offset: 0x24, Size: 0x4] 0x78739e4780
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4] 0x78739e4800
	int bClamp;//[Offset: 0x2c, Size: 0x4] 0x78739e4880
	float ClampLow;//[Offset: 0x30, Size: 0x4] 0x78739e4900
	float ClampHigh;//[Offset: 0x34, Size: 0x4] 0x78739e4980

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10] 0x78739b5f60

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7873a1a280
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x7873a1a300

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4] 0x7873a1ad80
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x780] 0x7873a1ae00

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x78739d0d00
	Rotator Rotation;//[Offset: 0x18, Size: 0x18] 0x78739d0d80
	float FOV;//[Offset: 0x30, Size: 0x4] 0x78739d0e00
	float DesiredFOV;//[Offset: 0x34, Size: 0x4] 0x78739d0e80
	float OrthoWidth;//[Offset: 0x38, Size: 0x4] 0x78739d0f00
	float OrthoNearClipPlane;//[Offset: 0x3c, Size: 0x4] 0x78739d0f80
	float OrthoFarClipPlane;//[Offset: 0x40, Size: 0x4] 0x78739d1000
	float AspectRatio;//[Offset: 0x44, Size: 0x4] 0x78739d1080
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78739cf800
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x78739cf880
	byte ProjectionMode;//[Offset: 0x49, Size: 0x1] 0x78739cf900
	float PostProcessBlendWeight;//[Offset: 0x4c, Size: 0x4] 0x78739cf980
	PostProcessSettings PostProcessSettings;//[Offset: 0x50, Size: 0x6b0] 0x78739c2200
	Vector2D OffCenterProjectionOffset;//[Offset: 0x700, Size: 0x10] 0x78739c2280

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8] 0x7873a1ac00
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x780] 0x7873a1ac80
	PlayerState* PlayerState;//[Offset: 0x790, Size: 0x8] 0x7873a1ad00

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10] 0x7873db6280
	<class CameraShakeBase,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50] 0x787386cd00
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4] 0x7873df3300

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShakeBase* ShakeInstance;//[Offset: 0x0, Size: 0x8] 0x78739c2400
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8] 0x78739c2480
	bool bIsCustomInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78739c2500

--------------------------------
Class: PooledCameraShakes
	CameraShakeBase*[] PooledShakes;//[Offset: 0x0, Size: 0x10] 0x78739b0920

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x288, Size: 0x1] 0x7873d56080
	CameraComponent* CameraComponent;//[Offset: 0x290, Size: 0x8] 0x7873d56100
	SceneComponent* SceneComponent;//[Offset: 0x298, Size: 0x8] 0x7873d56180
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x7873d56200
	float AspectRatio;//[Offset: 0x2ac, Size: 0x4] 0x7873d56280
	float FOVAngle;//[Offset: 0x2b0, Size: 0x4] 0x7873d56300
	float PostProcessBlendWeight;//[Offset: 0x2b4, Size: 0x4] 0x7873d54280
	PostProcessSettings PostProcessSettings;//[Offset: 0x2c0, Size: 0x6b0] 0x7873d54300
	int GetAutoActivatePlayerIndex();// 0x10b71174 0x7873d3dec0

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x2b0, Size: 0x4] 0x7873d57380
	float OrthoWidth;//[Offset: 0x2b4, Size: 0x4] 0x7873d55300
	float OrthoNearClipPlane;//[Offset: 0x2b8, Size: 0x4] 0x7873d55380
	float OrthoFarClipPlane;//[Offset: 0x2bc, Size: 0x4] 0x7873d55400
	float AspectRatio;//[Offset: 0x2c0, Size: 0x4] 0x7873d55480
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1] 0x7873d55500
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1] 0x7873d55580
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c4, Size: 0x1] 0x7873d55600
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c4, Size: 0x1] 0x7873d55680
	byte ProjectionMode;//[Offset: 0x2c5, Size: 0x1] 0x7873d55700
	float PostProcessBlendWeight;//[Offset: 0x330, Size: 0x4] 0x7873d55780
	PostProcessSettings PostProcessSettings;//[Offset: 0x360, Size: 0x6b0] 0x7873d55800
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x10b72850 0x7873d3d280
	void SetProjectionMode(byte InProjectionMode);// 0x10b727ac 0x7873d3d360
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x10b72708 0x7873d3d440
	void SetOrthoWidth(float InOrthoWidth);// 0x10b72bac 0x7873d3d520
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x10b72b08 0x7873d3d600
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x10b72a64 0x7873d3d6e0
	void SetFieldOfView(float InFieldOfView);// 0x10b72c50 0x7873d3d7c0
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x10b72908 0x7873d3d8a0
	void SetAspectRatio(float InAspectRatio);// 0x10b729c0 0x7873d3d980
	void RemoveBlendable(interface classNone InBlendableObject);// 0x10b723fc 0x7873d3da60
	void OnCameraMeshHiddenChanged();// 0x10b723e8 0x7873d3db40
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x10b72598 0x7873d3dc20
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x10b724a4 0x7873d3dd00

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8] 0x7873df9c80
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8] 0x7873db5a60
	CheatManagerExtension*[] CheatManagerExtensions;//[Offset: 0x78, Size: 0x10] 0x7873db5b00
	void Walk();// 0x10b93e68 0x7873de5b80
	void ViewSelf();// 0x10b93a44 0x7873de5c60
	void ViewPlayer(FString S);// 0x10b93988 0x7873de5d40
	void ViewClass(class Actor DesiredClass);// 0x10b93828 0x7873de5e20
	void ViewActor(FName ActorName);// 0x10b938d8 0x7873de5f00
	void UpdateSafeArea();// 0x10b92bb0 0x7873de5fe0
	void ToggleServerStatReplicatorUpdateStatNet();// 0x10b92bc4 0x7873de60c0
	void ToggleServerStatReplicatorClientOverwrite();// 0x10b92bd8 0x7873de61a0
	void ToggleDebugCamera();// 0x10b935fc 0x7873de6280
	void ToggleAILogging();// 0x10b935e0 0x7873de6360
	void TestCollisionDistance();// 0x10b93298 0x7873de6440
	void Teleport();// 0x10b93f50 0x7873de6520
	void Summon(FString ClassName);// 0x10b93a7c 0x7873de6600
	void StreamLevelOut(FName PackageName);// 0x10b93618 0x7873de66e0
	void StreamLevelIn(FName PackageName);// 0x10b93778 0x7873de67c0
	void SpawnServerStatReplicator();// 0x10b92c00 0x7873de68a0
	void Slomo(float NewTimeDilation);// 0x10b93d80 0x7873de6980
	void SetWorldOrigin();// 0x10b92d48 0x7873de6a60
	void SetMouseSensitivityToDefault();// 0x10b92d2c 0x7873de6b40
	void ServerToggleAILogging();// 0x10b93584 0x7873de6c20
	void ReceiveInitCheatManager();// 0xb8f1ab4 0x7873de6d00
	void ReceiveEndPlay();// 0xb8f1ab4 0x7873de6de0
	void PlayersOnly();// 0x10b93a60 0x7873de6ec0
	void OnPlayerEndPlayed(Actor* Player, byte EndPlayReason);// 0x10b92abc 0x7873de6fa0
	void OnlyLoadLevel(FName PackageName);// 0x10b936c8 0x7873de7080
	void LogLoc();// 0x10b92d5c 0x7873de7160
	void InvertMouse();// 0x10b92d10 0x7873de7240
	void God();// 0x10b93e30 0x7873de7320
	void Ghost();// 0x10b93e4c 0x7873de3a40
	PlayerController* GetPlayerController();// 0x10b92a50 0x7873de3b20
	void FreezeFrame(float Delay);// 0x10b93f6c 0x7873de3c00
	void Fly();// 0x10b93e84 0x7873de3ce0
	void FlushLog();// 0x10b92d78 0x7873de3dc0
	void EnableDebugCamera();// 0x10b92aa0 0x7873de3ea0
	void DumpVoiceMutingState();// 0x10b93228 0x7873de3f80
	void DumpPartyState();// 0x10b93260 0x7873de4060
	void DumpOnlineSessionState();// 0x10b9327c 0x7873de4140
	void DumpChatState();// 0x10b93244 0x7873de4220
	void DisableDebugCamera();// 0x10b92a84 0x7873de4300
	void DestroyTarget();// 0x10b93cb4 0x7873de43e0
	void DestroyServerStatReplicator();// 0x10b92bec 0x7873de44c0
	void DestroyPawns(class Pawn aClass);// 0x10b93b38 0x7873de45a0
	void DestroyAllPawnsExceptTarget();// 0x10b93be8 0x7873de4680
	void DestroyAll(class Actor aClass);// 0x10b93c04 0x7873de4760
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x10b93470 0x7873de4840
	void DebugCapsuleSweepPawn();// 0x10b932d0 0x7873de4920
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x10b93308 0x7873de4a00
	void DebugCapsuleSweepClear();// 0x10b932b4 0x7873de4ae0
	void DebugCapsuleSweepChannel(byte Channel);// 0x10b933c0 0x7873de4bc0
	void DebugCapsuleSweepCapture();// 0x10b932ec 0x7873de4ca0
	void DebugCapsuleSweep();// 0x10b93568 0x7873de4d80
	void DamageTarget(float DamageAmount);// 0x10b93cd0 0x7873de4e60
	void CheatScript(FString ScriptName);// 0x10b92c14 0x7873de4f40
	void ChangeSize(float F);// 0x10b93ea0 0x7873de5020
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x10b92d94 0x7873de5100
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x10b93008 0x7873de51e0
	void BugIt(FString ScreenShotDescription);// 0x10b92f4c 0x7873de52c0

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e8, Size: 0x1] 0x7873e07180
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e8, Size: 0x1] 0x7873e07200
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e8, Size: 0x1] 0x7873e07280
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7e8, Size: 0x1] 0x7873e07300
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7e8, Size: 0x1] 0x7873e07380
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7e8, Size: 0x1] 0x7873e05300
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7e8, Size: 0x1] 0x7873e05380
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7e8, Size: 0x1] 0x7873e05400
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x7f0, Size: 0x8] 0x7873e05480
	Actor* SelectedActor;//[Offset: 0x7f8, Size: 0x8] 0x7873e05500
	PrimitiveComponent* SelectedComponent;//[Offset: 0x800, Size: 0x8] 0x7873e05580
	HitResult SelectedHitPoint;//[Offset: 0x808, Size: 0xe8] 0x7873e05600
	PlayerController* OriginalControllerRef;//[Offset: 0x8f0, Size: 0x8] 0x7873e05680
	Player* OriginalPlayer;//[Offset: 0x8f8, Size: 0x8] 0x7873e05700
	float SpeedScale;//[Offset: 0x900, Size: 0x4] 0x7873e05780
	float InitialMaxSpeed;//[Offset: 0x904, Size: 0x4] 0x7873e05800
	float InitialAccel;//[Offset: 0x908, Size: 0x4] 0x7873e05880
	float InitialDecel;//[Offset: 0x90c, Size: 0x4] 0x7873e05900
	void ToggleDisplay();// 0x10bbec28 0x7873dee320
	void ShowDebugSelectedInfo();// 0x10bbec3c 0x7873dee400
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x10bbeb4c 0x7873dee4e0
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0xb8f1ab4 0x7873dee5c0
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0xb8f1ab4 0x7873dee6a0
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0xb8f1ab4 0x7873deadc0
	Actor* GetSelectedActor();// 0x10bbebf4 0x7873deaea0

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bFrustumEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1] 0x7873e24100
	Color FrustumColor;//[Offset: 0x54c, Size: 0x4] 0x7873e24180
	float FrustumAngle;//[Offset: 0x550, Size: 0x4] 0x7873e24200
	float FrustumAspectRatio;//[Offset: 0x554, Size: 0x4] 0x7873e22180
	float FrustumStartDist;//[Offset: 0x558, Size: 0x4] 0x7873e22200
	float FrustumEndDist;//[Offset: 0x55c, Size: 0x4] 0x7873e22280
	Texture* Texture;//[Offset: 0x560, Size: 0x8] 0x7873e22300

--------------------------------
Class: CheatManagerExtension.Object
	PlayerController* GetPlayerController();// 0x10b924fc 0x7873de53a0

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x1a0, Size: 0x10] 0x7873ee52e0
	FName[] InvertedAxis;//[Offset: 0x1e0, Size: 0x10] 0x7873ee5380
	void SetMouseSensitivity(const float Sensitivity);// 0x10dbd67c 0x7873f73ea0
	void SetBind(FName BindName, FString Command);// 0x10dbd57c 0x7873f73f80
	void InvertAxisKey(const Key AxisKey);// 0x10dbd3e8 0x7873f74060
	void InvertAxis(const FName AxisName);// 0x10dbd340 0x7873f74140
	void ClearSmoothing();// 0x10dbd32c 0x7873f74220

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18] 0x7873a1c300
	FString Command;//[Offset: 0x18, Size: 0x10] 0x7873a1c380
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7873a1c400
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7873a1c480
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x7873a1c500
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x7873a1c580
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1] 0x7873a1c600
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1] 0x7873a1a580
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1] 0x7873a1a600
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1] 0x7873a1a680
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x7873a1a700

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8] 0x78739e1600

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10] 0x7873db93e0
	float Duration;//[Offset: 0x38, Size: 0x4] 0x7873e2e900

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78739e1880
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78739e1900
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78739e1980
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78739e1a00
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88] 0x78739e1a80

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80] 0x7873894480
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8] 0x7873894500

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10] 0x7873bb3580
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8] 0x7873bce800
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8] 0x7873bb3620
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8] 0x7873bce880
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10] 0x7873bb36c0
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10] 0x7873bb3760
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8] 0x7873bcea00
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8] 0x7873bcea80
	int MaxPacket;//[Offset: 0xa0, Size: 0x4] 0x7873bceb00
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1] 0x7873bceb80
	UniqueNetIdRepl PlayerId;//[Offset: 0x160, Size: 0x30] 0x7873bcec00
	double LastReceiveTime;//[Offset: 0x1d8, Size: 0x8] 0x7873bcec80
	Channel*[] ChannelsToTick;//[Offset: 0x1670, Size: 0x10] 0x7873bb3800

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x3320, Size: 0x8] 0x7873df9a80

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10] 0x7873be0a80
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10] 0x7873be0b00
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4] 0x7873be0b80
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x7873be0c00
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4] 0x7873be0c80
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4] 0x7873be0d00
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4] 0x7873be0d80
	int MaxClientRate;//[Offset: 0x64, Size: 0x4] 0x7873be0e00
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4] 0x7873be0e80
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4] 0x7873be0f00
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4] 0x7873be0f80
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4] 0x7873be1000
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4] 0x7873be1080
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4] 0x7873bcf800
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4] 0x7873bcf880
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x7873bcf900
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1] 0x7873bcf980
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8] 0x7873bcfa00
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10] 0x7873bb3260
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4] 0x7873bcfb00
	World* World;//[Offset: 0x140, Size: 0x8] 0x7873bcfb80
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8] 0x7873bcfc00
	ClassPtrProperty NetConnectionClass;//[Size: 0x8] 0x7873bb3300
	ClassPtrProperty ReplicationDriverClass;//[Size: 0x8] 0x7873bb33a0
	FName NetDriverName;//[Offset: 0x190, Size: 0x8] 0x7873bcfc80
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10] 0x7873bb3440
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50] 0x787386bf80
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10] 0x7873bb34e0
	ReplicationDriver* ReplicationDriver;//[Offset: 0x750, Size: 0x8] 0x7873bcff00

--------------------------------
Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8] 0x7873fc1f80
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8] 0x7873fc2000
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8] 0x7873fc2080
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8] 0x7873fc2100
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8] 0x7873fc0080
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8] 0x7873fc0100
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8] 0x7873fc0180
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10] 0x7873eebb40
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10] 0x7873eebbe0
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 0x10] 0x7873eebc80
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x98, Size: 0x28] 0x7873fc0380
	FString StreamingLevelsPrefix;//[Offset: 0xc0, Size: 0x10] 0x7873fc0400
	Level* CurrentLevelPendingVisibility;//[Offset: 0xd0, Size: 0x8] 0x7873fc0480
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xd8, Size: 0x8] 0x7873fc0500
	DemoNetDriver* DemoNetDriver;//[Offset: 0xe0, Size: 0x8] 0x7873fc0580
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xe8, Size: 0x8] 0x7873fc0600
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xf0, Size: 0x8] 0x7873fc0680
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x116, Size: 0x1] 0x7873fc0700
	NavigationSystemBase* NavigationSystem;//[Offset: 0x120, Size: 0x8] 0x7873fc0780
	GameModeBase* AuthorityGameMode;//[Offset: 0x128, Size: 0x8] 0x7873fc0800
	GameStateBase* GameState;//[Offset: 0x130, Size: 0x8] 0x7873fc0880
	AISystemBase* AISystem;//[Offset: 0x138, Size: 0x8] 0x7873fc0900
	AvoidanceManager* AvoidanceManager;//[Offset: 0x140, Size: 0x8] 0x7873fc0980
	Level*[] Levels;//[Offset: 0x148, Size: 0x10] 0x7873eebd20
	LevelCollection[] LevelCollections;//[Offset: 0x158, Size: 0x10] 0x7873eebdc0
	GameInstance* OwningGameInstance;//[Offset: 0x190, Size: 0x8] 0x7873fc0b00
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x198, Size: 0x10] 0x7873eebe60
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x1a8, Size: 0x8] 0x7873fc0c00
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1b0, Size: 0x8] 0x7873fc0c80
	PhysicsFieldComponent* PhysicsField;//[Offset: 0x228, Size: 0x8] 0x7873fc0d00
	uint32 LWILastAssignedUID;//[Offset: 0x230, Size: 0x4] 0x7873fc0d80
	<ActorComponent*> ComponentsThatNeedPreEndOfFrameSync;//[Offset: 0x238, Size: 0x50] 0x7873eebf00
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x288, Size: 0x10] 0x7873eebfa0
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x298, Size: 0x10] 0x7873eec040
	WorldComposition* WorldComposition;//[Offset: 0x640, Size: 0x8] 0x7873fc0f80
	WorldPSCPool PSCPool;//[Offset: 0x700, Size: 0x58] 0x7873fc1000
	WorldSettings* K2_GetWorldSettings();// 0x10e9a9d8 0x7873fafac0
	void HandleTimelineScrubbed();// 0x10e9aa0c 0x7873fafba0

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8] 0x7873f2d200
	Model* Model;//[Offset: 0xc0, Size: 0x8] 0x7873f2d280
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10] 0x7873ee0560
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8] 0x7873f2d380
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4] 0x7873f2d400
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4] 0x7873f2d480
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8] 0x7873f2d500
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8] 0x7873f2d580
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8] 0x7873f2d600
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10] 0x7873ee0600
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4] 0x7873f2b600
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4] 0x7873f2b680
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10] 0x7873ee06a0
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10] 0x7873ee0740
	FName[] StreamingTextures;//[Offset: 0x138, Size: 0x10] 0x7873ee07e0
	uint32 PackedTextureStreamingQualityLevelFeatureLevel;//[Offset: 0x148, Size: 0x4] 0x7873f2b880
	Guid LevelBuildDataId;//[Offset: 0x210, Size: 0x10] 0x7873f2b900
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x220, Size: 0x8] 0x7873f2b980
	IntVector LightBuildLevelOffset;//[Offset: 0x228, Size: 0xc] 0x7873f2ba00
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1] 0x7873f2ba80
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x234, Size: 0x1] 0x7873f2bb00
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x234, Size: 0x1] 0x7873f2bb80
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x234, Size: 0x1] 0x7873f2bc00
	bool bIsPartitioned;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x236, Size: 0x1] 0x7873f2bc80
	bool bIsWorldPartitionRuntimeCell;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x236, Size: 0x1] 0x7873f2bd00
	WorldSettings* WorldSettings;//[Offset: 0x2a0, Size: 0x8] 0x7873f2bd80
	WorldDataLayers* WorldDataLayers;//[Offset: 0x2a8, Size: 0x8] 0x7873f2be00
	AssetUserData*[] AssetUserData;//[Offset: 0x2b8, Size: 0x10] 0x7873ee0880
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x2d8, Size: 0x10] 0x7873ee0920

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x560, Size: 0x8] 0x7873f49900

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10] 0x7873ee04c0

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1] 0x7873f2f080
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0xb8f1ab4 0x7873f1c9c0
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x10ce3a58 0x7873f190e0
	bool RemoteEvent(FName EventName);// 0x10ce3c40 0x7873f191c0
	void LevelReset();// 0xb8f1ab4 0x7873f192a0

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4] 0x788a4dbe00
	int Y;//[Offset: 0x4, Size: 0x4] 0x788a4dbd80
	int Z;//[Offset: 0x8, Size: 0x4] 0x788a4dbd00

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x290, Size: 0x8] 0x7873f4b580
	BillboardComponent* GoodSprite;//[Offset: 0x298, Size: 0x8] 0x7873f49500
	BillboardComponent* BadSprite;//[Offset: 0x2a0, Size: 0x8] 0x7873f49580
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x7873f49600

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x560, Size: 0x4] 0x7873df8b80
	float CapsuleRadius;//[Offset: 0x564, Size: 0x4] 0x7873df8c00
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x10b85580 0x7873de5480
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x10b85480 0x7873de5560
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x10b85380 0x7873de5640
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x10b84df0 0x7873de1d60
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x10b84f00 0x7873de1e40
	float GetUnscaledCapsuleRadius();// 0x10b85048 0x7873de1f20
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x10b85008 0x7873de2000
	float GetUnscaledCapsuleHalfHeight();// 0x10b8502c 0x7873de20e0
	float GetShapeScale();// 0x10b84db8 0x7873de21c0
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x10b85064 0x7873de22a0
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x10b851b0 0x7873de2380
	float GetScaledCapsuleRadius();// 0x10b8534c 0x7873de2460
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x10b852dc 0x7873de2540
	float GetScaledCapsuleHalfHeight();// 0x10b85324 0x7873de2620

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x548, Size: 0x8] 0x7873df1280
	class NavAreaBase* AreaClass;//[Offset: 0x550, Size: 0x8] 0x7873db4160
	Color ShapeColor;//[Offset: 0x558, Size: 0x4] 0x7873df1300
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55c, Size: 0x1] 0x7873df1380
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55c, Size: 0x1] 0x7873df1400
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55c, Size: 0x1] 0x7873df1480

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x548, Size: 0x8] 0x7873dc9c80
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x550, Size: 0x1] 0x7873dc9d00
	float ScreenSize;//[Offset: 0x554, Size: 0x4] 0x7873dc9d80
	float U;//[Offset: 0x558, Size: 0x4] 0x7873dc9e00
	float UL;//[Offset: 0x55c, Size: 0x4] 0x7873dc9e80
	float V;//[Offset: 0x560, Size: 0x4] 0x7873dc9f00
	float VL;//[Offset: 0x564, Size: 0x4] 0x7873dc9f80
	float OpacityMaskRefVal;//[Offset: 0x568, Size: 0x4] 0x7873dca000
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x10b4c5fc 0x7873da9620
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x10b4c424 0x7873da9700
	void SetSprite(Texture2D* NewSprite);// 0x10b4c788 0x7873da97e0
	void SetOpacityMaskRefVal(float RefVal);// 0x10b4c37c 0x7873da98c0

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8] 0x7873f49780

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1] 0x7873f30500

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x290, Size: 0x4] 0x7873fc4f00
	byte VisibilityAggressiveness;//[Offset: 0x294, Size: 0x1] 0x7873fc4f80
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x295, Size: 0x1] 0x7873fc5000
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x295, Size: 0x1] 0x7873fc5080
	bool bEnableLargeWorlds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x295, Size: 0x1] 0x7873fc5100
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x295, Size: 0x1] 0x7873fc5180
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x295, Size: 0x1] 0x7873fc5200
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x295, Size: 0x1] 0x7873fc5280
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x295, Size: 0x1] 0x7873fc3200
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x295, Size: 0x1] 0x7873fc3280
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x296, Size: 0x1] 0x7873fc3300
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x296, Size: 0x1] 0x7873fc3380
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x296, Size: 0x1] 0x7873fc3400
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x296, Size: 0x1] 0x7873fc3480
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x296, Size: 0x1] 0x7873fc3500
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x296, Size: 0x1] 0x7873fc3580
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x296, Size: 0x1] 0x7873fc3600
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x296, Size: 0x1] 0x7873fc3680
	bool bGenerateSingleClusterForLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x297, Size: 0x1] 0x7873fc3700
	class AISystemBase* AISystemClass;//[Offset: 0x298, Size: 0x28] 0x7873eed300
	Vector LevelInstancePivotOffset;//[Offset: 0x2c0, Size: 0x18] 0x7873fc3780
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x2d8, Size: 0x8] 0x7873fc3800
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x2e0, Size: 0x8] 0x7873fc3880
	WorldPartition* WorldPartition;//[Offset: 0x2e8, Size: 0x8] 0x7873fc3900
	float WorldToMeters;//[Offset: 0x2f0, Size: 0x4] 0x7873fc3980
	float KillZ;//[Offset: 0x2f4, Size: 0x4] 0x7873fc3a00
	class DamageType* KillZDamageType;//[Offset: 0x2f8, Size: 0x8] 0x7873eed3a0
	float WorldGravityZ;//[Offset: 0x300, Size: 0x4] 0x7873fc3a80
	float GlobalGravityZ;//[Offset: 0x304, Size: 0x4] 0x7873fc3b00
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x308, Size: 0x8] 0x7873eed440
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x310, Size: 0x8] 0x7873eed4e0
	class GameModeBase* DefaultGameMode;//[Offset: 0x318, Size: 0x8] 0x7873eed580
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x320, Size: 0x8] 0x7873eed620
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x328, Size: 0x4] 0x7873fc3b80
	Vector DefaultColorScale;//[Offset: 0x330, Size: 0x18] 0x7873fc3c00
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x348, Size: 0x4] 0x7873fc3c80
	float GlobalDistanceFieldViewDistance;//[Offset: 0x34c, Size: 0x4] 0x7873fc3d00
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x350, Size: 0x4] 0x7873fc3d80
	ReverbSettings DefaultReverbSettings;//[Offset: 0x358, Size: 0x20] 0x7873fc3e00
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x378, Size: 0x24] 0x7873fc3e80
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x3a0, Size: 0x8] 0x7873fc3f00
	float TimeDilation;//[Offset: 0x3a8, Size: 0x4] 0x7873fc3f80
	float MatineeTimeDilation;//[Offset: 0x3ac, Size: 0x4] 0x7873fc4000
	float DemoPlayTimeDilation;//[Offset: 0x3b0, Size: 0x4] 0x7873fc4080
	float MinGlobalTimeDilation;//[Offset: 0x3b4, Size: 0x4] 0x7873fc4100
	float MaxGlobalTimeDilation;//[Offset: 0x3b8, Size: 0x4] 0x7873fc4180
	float MinUndilatedFrameTime;//[Offset: 0x3bc, Size: 0x4] 0x7873fc4200
	float MaxUndilatedFrameTime;//[Offset: 0x3c0, Size: 0x4] 0x7873fc2180
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x3c8, Size: 0x80] 0x7873fc2200
	NetViewer[] ReplicationViewers;//[Offset: 0x448, Size: 0x10] 0x7873eed6c0
	AssetUserData*[] AssetUserData;//[Offset: 0x458, Size: 0x10] 0x7873eed760
	PlayerState* PauserPlayerState;//[Offset: 0x468, Size: 0x8] 0x7873fc2380
	int MaxNumberOfBookmarks;//[Offset: 0x470, Size: 0x4] 0x7873fc2400
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x478, Size: 0x8] 0x7873eed800
	BookmarkBase*[] BookmarkArray;//[Offset: 0x480, Size: 0x10] 0x7873eed8a0
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x490, Size: 0x8] 0x7873eed940
	void OnRep_WorldGravityZ();// 0x10ea6844 0x7873faef60

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18] 0x7873d98900
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8] 0x7873d98980
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7873d98a00

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18] 0x7873f4b380
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4] 0x7873f4b400
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8] 0x7873f4b480
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x7873f4b500

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7873a13e80
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7873a13f00
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7873a13f80
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7873a14000
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7873a14080
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7873a14100
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7873a14180
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7873a14200
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7873a12180
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7873a12200
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7873a12280
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7873a12300
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7873a12380
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x7873a12400
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x7873a12480
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x7873a12500

--------------------------------
Class: WorldPartition.ActorDescContainer.Object
	WorldPartitionRuntimeHash* RuntimeHash;//[Offset: 0x60, Size: 0x8] 0x7873fc1880
	WorldPartitionStreamingPolicy* StreamingPolicy;//[Offset: 0x70, Size: 0x8] 0x7873fc1900

--------------------------------
Class: ActorDescContainer.Object
	World* World;//[Offset: 0x28, Size: 0x8] 0x7873d97480

--------------------------------
Class: WorldPartitionRuntimeHash.Object

--------------------------------
Class: WorldPartitionStreamingPolicy.Object

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7873e03d80
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7873e03e00
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x7873e03e80
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4] 0x7873e03f00
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4] 0x7873e03f80
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4] 0x7873e04000
	float DamageFalloff;//[Offset: 0x38, Size: 0x4] 0x7873e04080

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4] 0x7873f60880
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4] 0x7873f60900
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8] 0x7873f60980
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4] 0x7873f60a00

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x30, Size: 0x8] 0x7873d70f80
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7873d71000
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7873d71080
	bool bEnableBusSends;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x7873d5f800
	bool bEnableBaseSubmix;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1] 0x7873d5f880
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1] 0x7873d5f900
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1] 0x7873d5f980
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1] 0x7873d5fa00
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1] 0x7873d5fa80
	enum VirtualizationMode;//[Offset: 0x39, Size: 0x1] 0x7873ccb280
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x90, Size: 0x50] 0x7873ccb320
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xe0, Size: 0x24] 0x7873d5fc00
	float Duration;//[Offset: 0x104, Size: 0x4] 0x7873d5fc80
	float MaxDistance;//[Offset: 0x108, Size: 0x4] 0x7873d5fd00
	float TotalSamples;//[Offset: 0x10c, Size: 0x4] 0x7873d5fd80
	float Priority;//[Offset: 0x110, Size: 0x4] 0x7873d5fe00
	SoundAttenuation* AttenuationSettings;//[Offset: 0x118, Size: 0x8] 0x7873d5fe80
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8] 0x7873d5ff00
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10] 0x7873ccb3c0
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8] 0x7873d5e780
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10] 0x7873ccb460
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10] 0x7873ccb500
	AssetUserData*[] AssetUserData;//[Offset: 0x160, Size: 0x10] 0x7873ccb5a0

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x78] 0x7873f97600
	SoundClass*[] ChildClasses;//[Offset: 0xa0, Size: 0x10] 0x7873ee97a0
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0xb0, Size: 0x10] 0x7873ee9840
	SoundClass* ParentClass;//[Offset: 0xc0, Size: 0x8] 0x7873f97780

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4] 0x7873a3a280
	float Pitch;//[Offset: 0x4, Size: 0x4] 0x7873a3a300
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4] 0x7873a3a380
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4] 0x7873a3a400
	float LFEBleed;//[Offset: 0x10, Size: 0x4] 0x7873a3a480
	float VoiceCenterChannelVolume;//[Offset: 0x14, Size: 0x4] 0x7873a3a500
	float RadioFilterVolume;//[Offset: 0x18, Size: 0x4] 0x7873a38480
	float RadioFilterVolumeThreshold;//[Offset: 0x1c, Size: 0x4] 0x7873a38500
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1] 0x7873a38580
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1] 0x7873a38600
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1] 0x7873a38680
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 0x1] 0x7873a38700
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 0x1] 0x7873a38780
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 0x1] 0x7873a38800
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20, Size: 0x1] 0x7873a38880
	float Default2DReverbSendAmount;//[Offset: 0x24, Size: 0x4] 0x7873a38900
	SoundModulationDefaultSettings ModulationSettings;//[Offset: 0x28, Size: 0x40] 0x7873a38b80
	byte OutputTarget;//[Offset: 0x68, Size: 0x1] 0x7873a38c00
	enum LoadingBehavior;//[Offset: 0x69, Size: 0x1] 0x78739b8e40
	SoundSubmix* DefaultSubmix;//[Offset: 0x70, Size: 0x8] 0x7873a38d00

--------------------------------
Class: SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination;//[Offset: 0x0, Size: 0x10] 0x7873a38980
	SoundModulationDestinationSettings PitchModulationDestination;//[Offset: 0x10, Size: 0x10] 0x7873a38a00
	SoundModulationDestinationSettings HighpassModulationDestination;//[Offset: 0x20, Size: 0x10] 0x7873a38a80
	SoundModulationDestinationSettings LowpassModulationDestination;//[Offset: 0x30, Size: 0x10] 0x7873a38b00

--------------------------------
Class: SoundModulationDestinationSettings
	float Value;//[Offset: 0x0, Size: 0x4] 0x7873913400
	SoundModulatorBase* Modulator;//[Offset: 0x8, Size: 0x8] 0x7873913480

--------------------------------
Class: SoundModulatorBase.Object

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7873f9e500
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x50, Size: 0x10] 0x7873eeb140
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x60, Size: 0x8] 0x7873f9e600
	int EnvelopeFollowerAttackTime;//[Offset: 0x68, Size: 0x4] 0x7873f9e680
	int EnvelopeFollowerReleaseTime;//[Offset: 0x6c, Size: 0x4] 0x7873f9e700
	float OutputVolume;//[Offset: 0x70, Size: 0x4] 0x7873f9c680
	float WetLevel;//[Offset: 0x74, Size: 0x4] 0x7873f9c700
	float DryLevel;//[Offset: 0x78, Size: 0x4] 0x7873f9c780
	SoundModulationDestinationSettings OutputVolumeModulation;//[Offset: 0x80, Size: 0x10] 0x7873f9c800
	SoundModulationDestinationSettings WetLevelModulation;//[Offset: 0x90, Size: 0x10] 0x7873f9c880
	SoundModulationDestinationSettings DryLevelModulation;//[Offset: 0xa0, Size: 0x10] 0x7873f9c900
	AudioLinkSettingsAbstract* AudioLinkSettings;//[Offset: 0xb0, Size: 0x8] 0x7873f9c980
	delegate OnSubmixRecordedFileDone;//[Offset: 0xb8, Size: 0x10] 0x7873f9ca00
	void StopSpectralAnalysis(const Object* WorldContextObject);// 0x10e45cdc 0x7873fa4bc0
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x10e4664c 0x7873fa4ca0
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x10e464fc 0x7873fa4d80
	void StartSpectralAnalysis(const Object* WorldContextObject, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x10e45d84 0x7873fa4e60
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x10e46894 0x7873fa4f40
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x10e465a4 0x7873fa5020
	void SetSubmixWetLevel(const Object* WorldContextObject, float InWetLevel);// 0x10e45af4 0x7873fa5100
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x10e45be8 0x7873fa51e0
	void SetSubmixDryLevel(const Object* WorldContextObject, float InDryLevel);// 0x10e45a00 0x7873fa52c0
	void RemoveSpectralAnalysisDelegate(const Object* WorldContextObject, out const delegate OnSubmixSpectralAnalysisBP);// 0x10e45fa8 0x7873fa53a0
	void AddSpectralAnalysisDelegate(const Object* WorldContextObject, out const SoundSubmixSpectralAnalysisBandSettings[] InBandSettings, out const delegate OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);// 0x10e460b8 0x7873fa5480
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x10e463ec 0x7873fa5560

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x40, Size: 0x8] 0x7873f9bb00

--------------------------------
Class: SoundSubmixBase.Object
	bool bAutoDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873f9bb80
	float AutoDisableTime;//[Offset: 0x2c, Size: 0x4] 0x7873f9bc00
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x30, Size: 0x10] 0x7873eeb5a0

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x178, Size: 0x4] 0x7873d72100
	int StreamingPriority;//[Offset: 0x17c, Size: 0x4] 0x7873d70080
	enum SampleRateQuality;//[Offset: 0x180, Size: 0x1] 0x7873ccac40
	byte SoundGroup;//[Offset: 0x182, Size: 0x1] 0x7873d70180
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x183, Size: 0x1] 0x7873d70200
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x183, Size: 0x1] 0x7873d70280
	enum SoundAssetCompressionType;//[Offset: 0x184, Size: 0x1] 0x7873ccace0
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x185, Size: 0x1] 0x7873d70380
	bool bUseBinkAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x185, Size: 0x1] 0x7873d70400
	SoundModulationDefaultRoutingSettings ModulationSettings;//[Offset: 0x1a0, Size: 0x48] 0x7873d70480
	float[] FrequenciesToAnalyze;//[Offset: 0x1e8, Size: 0x10] 0x7873ccad80
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x1f8, Size: 0x10] 0x7873ccae20
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x208, Size: 0x10] 0x7873ccaec0
	int InitialChunkSize;//[Offset: 0x218, Size: 0x4] 0x7873d70680
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25c, Size: 0x1] 0x7873d70700
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25c, Size: 0x1] 0x7873d70780
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x25c, Size: 0x1] 0x7873d70800
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25d, Size: 0x1] 0x7873d70880
	enum LoadingBehavior;//[Offset: 0x25e, Size: 0x1] 0x7873ccaf60
	FString SpokenText;//[Offset: 0x260, Size: 0x10] 0x7873d70980
	float SubtitlePriority;//[Offset: 0x270, Size: 0x4] 0x7873d70a00
	float Volume;//[Offset: 0x274, Size: 0x4] 0x7873d70a80
	float Pitch;//[Offset: 0x278, Size: 0x4] 0x7873d70b00
	int NumChannels;//[Offset: 0x27c, Size: 0x4] 0x7873d70b80
	SoundWaveCuePoint[] CuePoints;//[Offset: 0x280, Size: 0x10] 0x7873ccb000
	int SampleRate;//[Offset: 0x290, Size: 0x4] 0x7873d70c80
	SubtitleCue[] Subtitles;//[Offset: 0x2a0, Size: 0x10] 0x7873ccb0a0
	CurveTable* Curves;//[Offset: 0x2b0, Size: 0x8] 0x7873d70d80
	CurveTable* InternalCurves;//[Offset: 0x2b8, Size: 0x8] 0x7873d70e00
	void SetSoundAssetCompressionType(enum InSoundAssetCompressionType);// 0x10e4a888 0x7873d65560
	enum GetSoundAssetCompressionType();// 0x10e4a930 0x7873d65640

--------------------------------
Class: SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	enum VolumeRouting;//[Offset: 0x40, Size: 0x1] 0x78739b8b20
	enum PitchRouting;//[Offset: 0x41, Size: 0x1] 0x78739b8bc0
	enum HighpassRouting;//[Offset: 0x42, Size: 0x1] 0x78739b8c60
	enum LowpassRouting;//[Offset: 0x43, Size: 0x1] 0x78739b8d00

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10] 0x78739b8940
	float TimeSec;//[Offset: 0x10, Size: 0x4] 0x7873a3bd80

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4] 0x7873a3be00
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4] 0x7873a3be80

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x7873a3bc00
	float TimeSec;//[Offset: 0x4, Size: 0x4] 0x7873a3bc80

--------------------------------
Class: SoundWaveCuePoint
	int CuePointID;//[Offset: 0x0, Size: 0x4] 0x7873a3ba00
	FString Label;//[Offset: 0x8, Size: 0x10] 0x7873a3ba80
	int FramePosition;//[Offset: 0x18, Size: 0x4] 0x7873a3bb00
	int FrameLength;//[Offset: 0x1c, Size: 0x4] 0x7873a3bb80

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18] 0x788ab7a000
	float Time;//[Offset: 0x18, Size: 0x4] 0x788ab79f80

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSpectralAnalysisBandSettings
	float BandFrequency;//[Offset: 0x0, Size: 0x4] 0x7873a3c380
	int AttackTimeMsec;//[Offset: 0x4, Size: 0x4] 0x7873a3c400
	int ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4] 0x7873a3c480
	float QFactor;//[Offset: 0xc, Size: 0x4] 0x7873a3c500

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: AudioLinkSettingsAbstract.Object

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8] 0x7873a3a100
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4] 0x7873a3a180
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4] 0x7873a3a200

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7873f98a80
	float EQPriority;//[Offset: 0x2c, Size: 0x4] 0x7873f98b00
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40] 0x7873f98b80
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10] 0x7873ee9520
	float InitialDelay;//[Offset: 0x80, Size: 0x4] 0x7873f98c80
	float FadeInTime;//[Offset: 0x84, Size: 0x4] 0x7873f98d00
	float Duration;//[Offset: 0x88, Size: 0x4] 0x7873f98d80
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4] 0x7873f98e00

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4] 0x7873a3b400
	float Gain0;//[Offset: 0x14, Size: 0x4] 0x7873a3b480
	float Bandwidth0;//[Offset: 0x18, Size: 0x4] 0x7873a3b500
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4] 0x7873a3b580
	float Gain1;//[Offset: 0x20, Size: 0x4] 0x7873a39500
	float Bandwidth1;//[Offset: 0x24, Size: 0x4] 0x7873a39580
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4] 0x7873a39600
	float Gain2;//[Offset: 0x2c, Size: 0x4] 0x7873a39680
	float Bandwidth2;//[Offset: 0x30, Size: 0x4] 0x7873a39700
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4] 0x7873a39780
	float Gain3;//[Offset: 0x38, Size: 0x4] 0x7873a39800
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4] 0x7873a39880

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8] 0x7873a3b100
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4] 0x7873a3b180
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4] 0x7873a3b200
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4] 0x7873a3b280
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x7873a3b300
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4] 0x7873a3b380

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x24] 0x7873f97580

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4] 0x7873a39c00
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x7873a39c80
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1] 0x7873a39d00
	float RetriggerTime;//[Offset: 0x8, Size: 0x4] 0x7873a39d80
	float VolumeScale;//[Offset: 0xc, Size: 0x4] 0x7873a39e00
	enum VolumeScaleMode;//[Offset: 0x10, Size: 0x4] 0x78739b8da0
	float VolumeScaleAttackTime;//[Offset: 0x14, Size: 0x4] 0x7873a39f00
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7873a39f80
	float VolumeScaleReleaseTime;//[Offset: 0x1c, Size: 0x4] 0x7873a3a000
	float VoiceStealReleaseTime;//[Offset: 0x20, Size: 0x4] 0x7873a3a080

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3c8] 0x7873f97800

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x7873a38d80
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1] 0x7873a38e00
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc8, Size: 0x1] 0x7873a38e80
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc8, Size: 0x1] 0x7873a38f00
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc8, Size: 0x1] 0x7873a38f80
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc8, Size: 0x1] 0x7873a39000
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc8, Size: 0x1] 0x7873a39080
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc8, Size: 0x1] 0x7873a39100
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc9, Size: 0x1] 0x7873a39180
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc9, Size: 0x1] 0x7873a39200
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc9, Size: 0x1] 0x7873a39280
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc9, Size: 0x1] 0x7873a39300
	bool bEnableSourceDataOverride;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc9, Size: 0x1] 0x7873a39380
	byte SpatializationAlgorithm;//[Offset: 0xca, Size: 0x1] 0x7873a39400
	float BinauralRadius;//[Offset: 0xcc, Size: 0x4] 0x7873a39480
	enum AbsorptionMethod;//[Offset: 0xd0, Size: 0x1] 0x78739b8ee0
	byte OcclusionTraceChannel;//[Offset: 0xd1, Size: 0x1] 0x7873a37480
	enum ReverbSendMethod;//[Offset: 0xd2, Size: 0x1] 0x78739b8f80
	enum PriorityAttenuationMethod;//[Offset: 0xd3, Size: 0x1] 0x78739b9020
	float OmniRadius;//[Offset: 0xd4, Size: 0x4] 0x7873a37600
	float StereoSpread;//[Offset: 0xd8, Size: 0x4] 0x7873a37680
	float LPFRadiusMin;//[Offset: 0xdc, Size: 0x4] 0x7873a37700
	float LPFRadiusMax;//[Offset: 0xe0, Size: 0x4] 0x7873a37780
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xe8, Size: 0x88] 0x7873a37800
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x170, Size: 0x88] 0x7873a37880
	float LPFFrequencyAtMin;//[Offset: 0x1f8, Size: 0x4] 0x7873a37900
	float LPFFrequencyAtMax;//[Offset: 0x1fc, Size: 0x4] 0x7873a37980
	float HPFFrequencyAtMin;//[Offset: 0x200, Size: 0x4] 0x7873a37a00
	float HPFFrequencyAtMax;//[Offset: 0x204, Size: 0x4] 0x7873a37a80
	float FocusAzimuth;//[Offset: 0x208, Size: 0x4] 0x7873a37b00
	float NonFocusAzimuth;//[Offset: 0x20c, Size: 0x4] 0x7873a37b80
	float FocusDistanceScale;//[Offset: 0x210, Size: 0x4] 0x7873a37c00
	float NonFocusDistanceScale;//[Offset: 0x214, Size: 0x4] 0x7873a37c80
	float FocusPriorityScale;//[Offset: 0x218, Size: 0x4] 0x7873a37d00
	float NonFocusPriorityScale;//[Offset: 0x21c, Size: 0x4] 0x7873a37d80
	float FocusVolumeAttenuation;//[Offset: 0x220, Size: 0x4] 0x7873a37e00
	float NonFocusVolumeAttenuation;//[Offset: 0x224, Size: 0x4] 0x7873a37e80
	float FocusAttackInterpSpeed;//[Offset: 0x228, Size: 0x4] 0x7873a37f00
	float FocusReleaseInterpSpeed;//[Offset: 0x22c, Size: 0x4] 0x7873a37f80
	float OcclusionLowPassFilterFrequency;//[Offset: 0x230, Size: 0x4] 0x7873a38000
	float OcclusionVolumeAttenuation;//[Offset: 0x234, Size: 0x4] 0x7873a38080
	float OcclusionInterpolationTime;//[Offset: 0x238, Size: 0x4] 0x7873a38100
	float ReverbWetLevelMin;//[Offset: 0x23c, Size: 0x4] 0x7873a38180
	float ReverbWetLevelMax;//[Offset: 0x240, Size: 0x4] 0x7873a38200
	float ReverbDistanceMin;//[Offset: 0x244, Size: 0x4] 0x7873a38280
	float ReverbDistanceMax;//[Offset: 0x248, Size: 0x4] 0x7873a38300
	float ManualReverbSendLevel;//[Offset: 0x24c, Size: 0x4] 0x7873a38380
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x250, Size: 0x88] 0x7873a38400
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2d8, Size: 0x10] 0x78739b6780
	float PriorityAttenuationMin;//[Offset: 0x2e8, Size: 0x4] 0x7873a36400
	float PriorityAttenuationMax;//[Offset: 0x2ec, Size: 0x4] 0x7873a36480
	float PriorityAttenuationDistanceMin;//[Offset: 0x2f0, Size: 0x4] 0x7873a36500
	float PriorityAttenuationDistanceMax;//[Offset: 0x2f4, Size: 0x4] 0x7873a36580
	float ManualPriorityAttenuation;//[Offset: 0x2f8, Size: 0x4] 0x7873a36600
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x300, Size: 0x88] 0x7873a36680
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x388, Size: 0x40] 0x7873a36700

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1] 0x787376fc40
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1] 0x787399d000
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4] 0x787399d080
	enum FalloffMode;//[Offset: 0x10, Size: 0x1] 0x787376fce0
	Vector AttenuationShapeExtents;//[Offset: 0x18, Size: 0x18] 0x787399d180
	float ConeOffset;//[Offset: 0x30, Size: 0x4] 0x787399d200
	float FalloffDistance;//[Offset: 0x34, Size: 0x4] 0x787399d280
	float ConeSphereRadius;//[Offset: 0x38, Size: 0x4] 0x787399d300
	float ConeSphereFalloffDistance;//[Offset: 0x3c, Size: 0x4] 0x787399d380
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x40, Size: 0x88] 0x787399d400

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 0x8] 0x7873a36780
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1] 0x78739b6820
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4] 0x7873a36880
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4] 0x7873a36900
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4] 0x7873a36980
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4] 0x7873a36a00
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4] 0x7873a36a80
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88] 0x7873a36b00

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10] 0x78739b68c0
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10] 0x78739b6960
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10] 0x78739b6a00
	SourceDataOverridePluginSourceSettingsBase*[] SourceDataOverridePluginSettingsArray;//[Offset: 0x30, Size: 0x10] 0x78739b6aa0

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SourceDataOverridePluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1] 0x787376fa60
	enum SendStage;//[Offset: 0x1, Size: 0x1] 0x787376fb00
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8] 0x787399c800
	float SendLevel;//[Offset: 0x10, Size: 0x4] 0x787399c880
	bool DisableManualSendClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x787399c900
	float MinSendLevel;//[Offset: 0x18, Size: 0x4] 0x787399c980
	float MaxSendLevel;//[Offset: 0x1c, Size: 0x4] 0x787399ca00
	float MinSendDistance;//[Offset: 0x20, Size: 0x4] 0x787399ca80
	float MaxSendDistance;//[Offset: 0x24, Size: 0x4] 0x787399cb00
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88] 0x787399cb80

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10] 0x7873ee9660
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7873f98f80

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8] 0x7873a39b00
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7873a39b80

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1] 0x78739b8a80
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8] 0x7873a3c600
	AudioBus* AudioBus;//[Offset: 0x10, Size: 0x8] 0x7873a3a580
	float SendLevel;//[Offset: 0x18, Size: 0x4] 0x7873a3a600
	float MinSendLevel;//[Offset: 0x1c, Size: 0x4] 0x7873a3a680
	float MaxSendLevel;//[Offset: 0x20, Size: 0x4] 0x7873a3a700
	float MinSendDistance;//[Offset: 0x24, Size: 0x4] 0x7873a3a780
	float MaxSendDistance;//[Offset: 0x28, Size: 0x4] 0x7873a3a800
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x30, Size: 0x88] 0x7873a3a880

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x338, Size: 0x1] 0x7873eeb640
	float SourceBusDuration;//[Offset: 0x33c, Size: 0x4] 0x7873f9bd80
	AudioBus* AudioBus;//[Offset: 0x340, Size: 0x8] 0x7873f9be00
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1] 0x7873f9be80

--------------------------------
Class: AudioBus.Object
	enum AudioBusChannels;//[Offset: 0x28, Size: 0x1] 0x7873db3c60

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x288, Size: 0x10] 0x7873c55400
	class GameSession* GameSessionClass;//[Offset: 0x298, Size: 0x8] 0x7873bbc900
	class GameStateBase* GameStateClass;//[Offset: 0x2a0, Size: 0x8] 0x7873bbc9a0
	class PlayerController* PlayerControllerClass;//[Offset: 0x2a8, Size: 0x8] 0x7873bbca40
	class PlayerState* PlayerStateClass;//[Offset: 0x2b0, Size: 0x8] 0x7873bbcae0
	class HUD* HUDClass;//[Offset: 0x2b8, Size: 0x8] 0x7873bbcb80
	class Pawn* DefaultPawnClass;//[Offset: 0x2c0, Size: 0x8] 0x7873bbcc20
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2c8, Size: 0x8] 0x7873bbccc0
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x2d0, Size: 0x8] 0x7873bbcd60
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x2d8, Size: 0x8] 0x7873bbce00
	GameSession* GameSession;//[Offset: 0x2e0, Size: 0x8] 0x7873c55480
	GameStateBase* GameState;//[Offset: 0x2e8, Size: 0x8] 0x7873c55500
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x2f0, Size: 0x8] 0x7873c55580
	FText DefaultPlayerName;//[Offset: 0x2f8, Size: 0x18] 0x7873c55600
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 0x1] 0x7873c55680
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x310, Size: 0x1] 0x7873c55700
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x310, Size: 0x1] 0x7873c55780
	void StartPlay();// 0x10c08724 0x7873c4cf00
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x10c07a90 0x7873c4cfe0
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x10c07968 0x7873c4d0c0
	bool ShouldReset(Actor* ActorToReset);// 0x10c085e8 0x7873c4d1a0
	void ReturnToMainMenuHost();// 0x10c085b0 0x7873c4d280
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x10c07b90 0x7873c4d360
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x10c07cb0 0x7873c4d440
	void RestartPlayer(Controller* NewPlayer);// 0x10c07da8 0x7873c4d520
	void ResetLevel();// 0x10c085cc 0x7873c4d600
	bool PlayerCanRestart(PlayerController* Player);// 0x10c07e58 0x7873c4d6e0
	bool MustSpectate(PlayerController* NewPlayerController);// 0x10c08444 0x7873c4d7c0
	void K2_PostLogin(PlayerController* NewPlayer);// 0xb8f1ab4 0x7873c4d8a0
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0xb8f1ab4 0x7873c4d980
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0xb8f1ab4 0x7873c4da60
	void K2_OnLogout(Controller* ExitingController);// 0xb8f1ab4 0x7873c4db40
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0xb8f1ab4 0x7873c4dc20
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x10c07f14 0x7873c4dd00
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x10c07870 0x7873c4dde0
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x10c077c0 0x7873c4dec0
	bool HasMatchStarted();// 0x10c086e4 0x7873c4dfa0
	bool HasMatchEnded();// 0x10c086a4 0x7873c4e080
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x10c08500 0x7873c4e160
	int GetNumSpectators();// 0x10c08740 0x7873c4e240
	int GetNumPlayers();// 0x10c0877c 0x7873c4e320
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x10c087b8 0x7873c4e400
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x10c0801c 0x7873c4e4e0
	Actor* ChoosePlayerStart(Controller* Player);// 0x10c0812c 0x7873c4e5c0
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x10c081e4 0x7873c4e6a0
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x10c08340 0x7873c4adc0

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x288, Size: 0x4] 0x7873e54000
	int MaxPlayers;//[Offset: 0x28c, Size: 0x4] 0x7873e54080
	int MaxPartySize;//[Offset: 0x290, Size: 0x4] 0x7873e54100
	byte MaxSplitscreensPerConnection;//[Offset: 0x294, Size: 0x1] 0x7873e54180
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 0x1] 0x7873e54200
	FName SessionName;//[Offset: 0x298, Size: 0x8] 0x7873e52180

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x288, Size: 0x8] 0x7873bbc4a0
	GameModeBase* AuthorityGameMode;//[Offset: 0x290, Size: 0x8] 0x7873c56380
	class SpectatorPawn* SpectatorClass;//[Offset: 0x298, Size: 0x8] 0x7873bbc540
	PlayerState*[] PlayerArray;//[Offset: 0x2a0, Size: 0x10] 0x7873bbc5e0
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x7873c56480
	float ReplicatedWorldTimeSeconds;//[Offset: 0x2b4, Size: 0x4] 0x7873c56500
	float ServerWorldTimeSecondsDelta;//[Offset: 0x2b8, Size: 0x4] 0x7873c56580
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x2bc, Size: 0x4] 0x7873c56600
	void OnRep_SpectatorClass();// 0x10c1b580 0x7873c4ef60
	void OnRep_ReplicatedWorldTimeSeconds();// 0x10c1b548 0x7873c4f040
	void OnRep_ReplicatedHasBegunPlay();// 0x10c1b564 0x7873c4f120
	void OnRep_GameModeClass();// 0x10c1b59c 0x7873c4f200
	bool HasMatchStarted();// 0x10c1b768 0x7873c4f2e0
	bool HasMatchEnded();// 0x10c1b728 0x7873c4f3c0
	bool HasBegunPlay();// 0x10c1b7a8 0x7873c4f4a0
	float GetServerWorldTimeSeconds();// 0x10c1b7e8 0x7873c4f580
	float GetPlayerStartTime(Controller* Controller);// 0x10c1b670 0x7873c4f660
	float GetPlayerRespawnDelay(Controller* Controller);// 0x10c1b5b8 0x7873c4f740

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x308, Size: 0x4] 0x7873e0c180
	float BaseLookUpRate;//[Offset: 0x30c, Size: 0x4] 0x7873e0c200
	PawnMovementComponent* MovementComponent;//[Offset: 0x310, Size: 0x8] 0x7873e0c280
	SphereComponent* CollisionComponent;//[Offset: 0x318, Size: 0x8] 0x7873e0c300
	StaticMeshComponent* MeshComponent;//[Offset: 0x320, Size: 0x8] 0x7873e0c380
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 0x1] 0x7873e0c400
	void TurnAtRate(float Rate);// 0x10bc1be4 0x7873deee80
	void MoveUp_World(float Val);// 0x10bc1c94 0x7873deef60
	void MoveRight(float Val);// 0x10bc1d44 0x7873def040
	void MoveForward(float Val);// 0x10bc1df4 0x7873def120
	void LookUpAtRate(float Rate);// 0x10bc1b34 0x7873def200

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x158, Size: 0x8] 0x7873be7880
	bool IsMoveInputIgnored();// 0x10d93a18 0x7873b9d520
	Vector GetPendingInputVector();// 0x10d93ad0 0x7873b9d600
	Pawn* GetPawnOwner();// 0x10d939e4 0x7873b9d6e0
	Vector GetLastInputVector();// 0x10d93a98 0x7873b9d7c0
	Vector ConsumeInputVector();// 0x10d93a58 0x7873b9d8a0
	void AddInputVector(Vector WorldVector, bool bForce);// 0x10d93b08 0x7873b9d980

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x118, Size: 0x30] 0x7873be7c80
	float FixedPathBrakingDistance;//[Offset: 0x148, Size: 0x4] 0x7873be7d00
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1] 0x7873be7d80
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14c, Size: 0x1] 0x7873be7e00
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 0x1] 0x7873be7e80
	MovementProperties MovementState;//[Offset: 0x14d, Size: 0x1] 0x7873be7f00
	Object* PathFollowingComp;//[Offset: 0x150, Size: 0x8] 0x7873be7f80
	void StopMovementKeepPathing();// 0x10d598e0 0x7873b9da60
	void StopActiveMovement();// 0x10d59930 0x7873b9db40
	bool IsSwimming();// 0x10d597e0 0x7873b9dc20
	bool IsMovingOnGround();// 0x10d59820 0x7873b9dd00
	bool IsFlying();// 0x10d597a0 0x7873b9dde0
	bool IsFalling();// 0x10d59860 0x7873b9dec0
	bool IsCrouching();// 0x10d598a0 0x7873b9dfa0

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 0x8] 0x7873720300
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 0x8] 0x7873720280
	Vector Velocity;//[Offset: 0xc8, Size: 0x18] 0x7873720200
	Vector PlaneConstraintNormal;//[Offset: 0xe0, Size: 0x18] 0x7873720180
	Vector PlaneConstraintOrigin;//[Offset: 0xf8, Size: 0x18] 0x7873720100
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1] 0x7873720080
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1] 0x7873722100
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 0x1] 0x7873722080
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x110, Size: 0x1] 0x7873722000
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x110, Size: 0x1] 0x7873721f80
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x110, Size: 0x1] 0x7873721f00
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x110, Size: 0x1] 0x7873721e80
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x110, Size: 0x1] 0x7873721e00
	enum PlaneConstraintAxisSetting;//[Offset: 0x113, Size: 0x1] 0x787374fa60
	void StopMovementImmediately();// 0x10d4f3d4 0x788a88f120
	void SnapUpdatedComponentToPlane();// 0x10d4e940 0x788a88f040
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x10d4f238 0x788a88ef60
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x10d4ecc8 0x788a88ee80
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x10d4ee70 0x788a88eda0
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x10d4ed78 0x788a88ecc0
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x10d4ec10 0x788a88ebe0
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x10d4ef3c 0x788a88eb00
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x10d4f2e8 0x788a88ea20
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x10d4efec 0x788a88e940
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x10d4f3f0 0x788a88e860
	Vector GetPlaneConstraintOrigin();// 0x10d4eb90 0x788a88e780
	Vector GetPlaneConstraintNormal();// 0x10d4ebd0 0x788abe1c80
	enum GetPlaneConstraintAxisSetting();// 0x10d4ef20 0x788abe1ba0
	PhysicsVolume* GetPhysicsVolume();// 0x10d4f398 0x788abe1ac0
	float GetMaxSpeed();// 0x10d4f4ac 0x788abe19e0
	float GetGravityZ();// 0x10d4f4e8 0x788abe1900
	Vector ConstrainNormalToPlane(Vector Normal);// 0x10d4e95c 0x788abe1820
	Vector ConstrainLocationToPlane(Vector Location);// 0x10d4ea18 0x788abe1740
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x10d4ead4 0x788abe1660

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4] 0x7873a13980
	float AgentHeight;//[Offset: 0x8, Size: 0x4] 0x7873a13a00
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4] 0x7873a13a80
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4] 0x7873a13b00
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18] 0x7873a13b80

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7873a13c00
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7873a13c80
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7873a13d00
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7873a13d80
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7873a13e00

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x560, Size: 0x4] 0x7873e23e00
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x10e4ba68 0x7873e121c0
	float GetUnscaledSphereRadius();// 0x10e4ba0c 0x7873e122a0
	float GetShapeScale();// 0x10e4b9d4 0x7873e12380
	float GetScaledSphereRadius();// 0x10e4ba28 0x7873e12460

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x56c, Size: 0x4] 0x7873ca1700
	int PreviousLODLevel;//[Offset: 0x570, Size: 0x4] 0x7873ca1780
	int MinLOD;//[Offset: 0x574, Size: 0x4] 0x7873ca1800
	int SubDivisionStepSize;//[Offset: 0x578, Size: 0x4] 0x7873ca1880
	StaticMesh* StaticMesh;//[Offset: 0x580, Size: 0x8] 0x7873ca1900
	Color WireframeColorOverride;//[Offset: 0x588, Size: 0x4] 0x7873ca1980
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58c, Size: 0x1] 0x7873ca1a00
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58c, Size: 0x1] 0x7873ca1a80
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58c, Size: 0x1] 0x7873ca1b00
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58c, Size: 0x1] 0x7873ca1b80
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58c, Size: 0x1] 0x7873ca1c00
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58c, Size: 0x1] 0x7873ca1c80
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58d, Size: 0x1] 0x7873ca1d00
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58d, Size: 0x1] 0x7873ca1d80
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58d, Size: 0x1] 0x7873ca1e00
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58d, Size: 0x1] 0x7873ca1e80
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58d, Size: 0x1] 0x7873ca1f00
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58d, Size: 0x1] 0x7873ca1f80
	bool bSortTriangles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58d, Size: 0x1] 0x7873ca2000
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58d, Size: 0x1] 0x7873ca2080
	int OverriddenLightMapRes;//[Offset: 0x590, Size: 0x4] 0x7873ca2100
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x594, Size: 0x4] 0x7873ca0080
	float DistanceFieldSelfShadowBias;//[Offset: 0x598, Size: 0x4] 0x7873ca0100
	float StreamingDistanceMultiplier;//[Offset: 0x59c, Size: 0x4] 0x7873ca0180
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x5a0, Size: 0x10] 0x7873bbe480
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x5b0, Size: 0x10] 0x7873bbe520
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x5c0, Size: 0x18] 0x7873ca0300
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x10e6520c 0x7873c92620
	void SetReverseCulling(bool ReverseCulling);// 0x10e64e60 0x7873c92700
	void SetForcedLodModel(int NewForcedLodModel);// 0x10e65164 0x7873c927e0
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);// 0x10e6500c 0x7873c928c0
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x10e650bc 0x7873c929a0
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x10e652c8 0x7873c92a80
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x10e64f10 0x7873c92b60

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerQualityLevelInt MinQualityLevelLOD;//[Offset: 0xf0, Size: 0x68] 0x7873fb2680
	PerPlatformInt MinLOD;//[Offset: 0x158, Size: 0x4] 0x7873fb2700
	StaticMaterial[] StaticMaterials;//[Offset: 0x160, Size: 0x10] 0x7873eea9c0
	float LightmapUVDensity;//[Offset: 0x170, Size: 0x4] 0x7873fb2800
	int LightMapResolution;//[Offset: 0x174, Size: 0x4] 0x7873fb2880
	int LightMapCoordinateIndex;//[Offset: 0x178, Size: 0x4] 0x7873fb2900
	float DistanceFieldSelfShadowBias;//[Offset: 0x17c, Size: 0x4] 0x7873fb2980
	BodySetup* BodySetup;//[Offset: 0x180, Size: 0x8] 0x7873fb2a00
	int LODForCollision;//[Offset: 0x188, Size: 0x4] 0x7873fb2a80
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18c, Size: 0x1] 0x7873fb2b00
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18c, Size: 0x1] 0x7873fb2b80
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18c, Size: 0x1] 0x7873fb2c00
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18c, Size: 0x1] 0x7873fb2c80
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18c, Size: 0x1] 0x7873fb2d00
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18c, Size: 0x1] 0x7873fb2d80
	bool bDoFastBuild;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18c, Size: 0x1] 0x7873fb2e00
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18c, Size: 0x1] 0x7873fb2e80
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18d, Size: 0x1] 0x7873fb2f00
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18d, Size: 0x1] 0x7873fb2f80
	StaticMeshSocket*[] Sockets;//[Offset: 0x1b0, Size: 0x10] 0x7873eeaa60
	Vector PositiveBoundsExtension;//[Offset: 0x1d0, Size: 0x18] 0x7873fb3080
	Vector NegativeBoundsExtension;//[Offset: 0x1e8, Size: 0x18] 0x7873fb3100
	BoxSphereBounds ExtendedBounds;//[Offset: 0x200, Size: 0x38] 0x7873fb3180
	int ElementToIgnoreForTexFactor;//[Offset: 0x238, Size: 0x4] 0x7873fb1100
	AssetUserData*[] AssetUserData;//[Offset: 0x240, Size: 0x10] 0x7873eeab00
	NavCollisionBase* NavCollision;//[Offset: 0x250, Size: 0x8] 0x7873fb1200
	void SetStaticMaterials(out const StaticMaterial[] InStaticMaterials);// 0x10e5ff68 0x7873fa8d60
	void SetMinimumLODForPlatforms(out const <FName,int> PlatformMinimumLODs);// 0x10e601dc 0x7873fa8e40
	void SetMinimumLODForPlatform(out const FName PlatformName, int InMinLOD);// 0x10e60104 0x7873fa8f20
	void RemoveSocket(StaticMeshSocket* Socket);// 0x10e5f6d8 0x7873fa9000
	StaticMeshDescription* GetStaticMeshDescription(int LODIndex);// 0x10e5fcb4 0x7873fa5720
	StaticMaterial[] GetStaticMaterials();// 0x10e6007c 0x7873fa5800
	int GetNumSections(int InLOD);// 0x10e5fae8 0x7873fa58e0
	int GetNumLODs();// 0x10e5fc80 0x7873fa59c0
	void GetMinimumLODForQualityLevels(out <FName,int> QualityLevelMinimumLODs);// 0x10e60554 0x7873fa5aa0
	int GetMinimumLODForQualityLevel(out const FName QualityLevel);// 0x10e604b0 0x7873fa5b80
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x10e60398 0x7873fa5c60
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x10e602f4 0x7873fa5d40
	int GetMaterialIndex(FName MaterialSlotName);// 0x10e5f8d8 0x7873fa5e20
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x10e5fa38 0x7873fa5f00
	BoxSphereBounds GetBounds();// 0x10e5fc0c 0x7873fa5fe0
	Box GetBoundingBox();// 0x10e5fb98 0x7873fa60c0
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x10e5f780 0x7873fa61a0
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x10e5fec0 0x7873fa6280
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision, bool bFastBuild);// 0x10e5fd64 0x7873fa6360
	void AddSocket(StaticMeshSocket* Socket);// 0x10e5f830 0x7873fa6440
	FName AddMaterial(MaterialInterface* Material);// 0x10e5f988 0x7873fa6520

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8] 0x7873a3da80
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8] 0x7873a3db00
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8] 0x7873a3db80
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14] 0x7873a3dc00

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8] 0x7873fb2400
	Vector RelativeLocation;//[Offset: 0x30, Size: 0x18] 0x7873fb2480
	Rotator RelativeRotation;//[Offset: 0x48, Size: 0x18] 0x7873fb2500
	Vector RelativeScale;//[Offset: 0x60, Size: 0x18] 0x7873fb2580
	FString Tag;//[Offset: 0x78, Size: 0x10] 0x7873fb2600

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0xf5163b8 0x7873d691c0
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0xf515f7c 0x7873d692a0
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0xf5164f4 0x7873d69380
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0xf516080 0x7873d69460

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0xf4cd0e8 0x7873d69540
	void SetPolygonVertexInstances(PolygonID PolygonID, out const VertexInstanceID[] VertexInstanceIDs);// 0xf4cb0e0 0x7873d69620
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0xf4caff0 0x7873d69700
	void ReversePolygonFacing(PolygonID PolygonID);// 0xf4caf44 0x7873d697e0
	void ReserveNewVertices(int NumberOfNewVertices);// 0xf4cfadc 0x7873d698c0
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0xf4cf74c 0x7873d699a0
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0xf4ced54 0x7873d69a80
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0xf4ce654 0x7873d69b60
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0xf4cdf54 0x7873d69c40
	void ReserveNewEdges(int NumberOfNewEdges);// 0xf4cf294 0x7873d69d20
	bool IsVertexValid(VertexID VertexID);// 0xf4cf898 0x7873d69e00
	bool IsVertexOrphaned(VertexID VertexID);// 0xf4cdbb4 0x7873d69ee0
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0xf4cf3e0 0x7873d69fc0
	bool IsTriangleValid(const TriangleID TriangleID);// 0xf4ce7a0 0x7873d6a0a0
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0xf4cc24c 0x7873d6a180
	bool IsPolygonValid(PolygonID PolygonID);// 0xf4ce0a0 0x7873d6a260
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0xf4cdd10 0x7873d6a340
	bool IsEmpty();// 0xf4cfb84 0x7873d6a420
	bool IsEdgeValid(EdgeID EdgeID);// 0xf4ceea0 0x7873d6a500
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0xf4cca00 0x7873d6a5e0
	bool IsEdgeInternal(EdgeID EdgeID);// 0xf4ccafc 0x7873d6a6c0
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0xf4cd7e8 0x7873d6a7a0
	Vector GetVertexPosition(VertexID VertexID);// 0xf4cd1e4 0x7873d6a880
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0xf4cdabc 0x7873d6a960
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0xf4cd034 0x7873d6aa40
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0xf4ccf3c 0x7873d6ab20
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0xf4cbc18 0x7873d6ac00
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0xf4cb1f0 0x7873d6ace0
	int GetVertexInstanceCount();// 0xf4cf33c 0x7873d67400
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0xf4cce2c 0x7873d674e0
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0xf4ccc68 0x7873d675c0
	int GetVertexCount();// 0xf4cf7f4 0x7873d676a0
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0xf4cd624 0x7873d67780
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0xf4cd460 0x7873d67860
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0xf4cd9ac 0x7873d67940
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0xf4cd29c 0x7873d67a20
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0xf4cbf30 0x7873d67b00
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0xf4cc13c 0x7873d67be0
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int index);// 0xf4cc040 0x7873d67cc0
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0xf4cc304 0x7873d67da0
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0xf4cc3b8 0x7873d67e80
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0xf4cbe20 0x7873d67f60
	int GetTriangleCount();// 0xf4ce6fc 0x7873d68040
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0xf4cbd10 0x7873d68120
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0xf4cb780 0x7873d68200
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0xf4cb944 0x7873d682e0
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0xf4cbb08 0x7873d683c0
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0xf4cb2e8 0x7873d684a0
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0xf4cb670 0x7873d68580
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0xf4cb560 0x7873d68660
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0xf4cad88 0x7873d68740
	int GetPolygonGroupCount();// 0xf4cdc6c 0x7873d68820
	int GetPolygonCount();// 0xf4cdffc 0x7873d68900
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0xf4cb39c 0x7873d689e0
	int GetNumVertexVertexInstances(VertexID VertexID);// 0xf4cd734 0x7873d68ac0
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0xf4ccd78 0x7873d68ba0
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0xf4ccbb4 0x7873d68c80
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0xf4cd570 0x7873d68d60
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0xf4cd3ac 0x7873d68e40
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0xf4cd8f8 0x7873d68f20
	int GetNumPolygonVertices(PolygonID PolygonID);// 0xf4cb890 0x7873d69000
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0xf4cba54 0x7873d65720
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0xf4cb4ac 0x7873d65800
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0xf4cacd4 0x7873d658e0
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0xf4cc83c 0x7873d659c0
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0xf4cc678 0x7873d65aa0
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0xf4cc46c 0x7873d65b80
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0xf4cc57c 0x7873d65c60
	int GetEdgeCount();// 0xf4cedfc 0x7873d65d40
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0xf4cc8f0 0x7873d65e20
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0xf4cc72c 0x7873d65f00
	void Empty();// 0xf4cfbbc 0x7873d65fe0
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0xf4cf498 0x7873d660c0
	void DeleteVertex(VertexID VertexID);// 0xf4cf950 0x7873d661a0
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0xf4ce858 0x7873d66280
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0xf4cddc8 0x7873d66360
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0xf4ce158 0x7873d66440
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0xf4cef58 0x7873d66520
	void CreateVertexWithID(VertexID VertexID);// 0xf4cf9fc 0x7873d66600
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0xf4cf5a8 0x7873d666e0
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0xf4cf698 0x7873d667c0
	VertexID CreateVertex();// 0xf4cfaa8 0x7873d668a0
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xf4cea28 0x7873d66980
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xf4cebd8 0x7873d66a60
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xf4ce328 0x7873d66b40
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0xf4cde74 0x7873d66c20
	PolygonGroupID CreatePolygonGroup();// 0xf4cdf20 0x7873d66d00
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xf4ce4d8 0x7873d66de0
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0xf4cf068 0x7873d66ec0
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0xf4cf19c 0x7873d66fa0
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0xf4cae98 0x7873d67080

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4] 0x787396e180

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7873f49800

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4] 0x7873a3cc00
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4] 0x7873a3cc80
	float TexelFactor;//[Offset: 0x8, Size: 0x4] 0x7873a3cd00

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78739dd600
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78739dd680
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78739db600
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78739db680
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4] 0x78739db700
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4] 0x78739db780
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4] 0x78739db800
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4] 0x78739db880
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4] 0x78739db900

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1] 0x7873f8a580
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1] 0x7873f8a600
	uint32 Channels;//[Offset: 0x28c, Size: 0x4] 0x7873f8a680
	uint32 InRate;//[Offset: 0x290, Size: 0x4] 0x7873f8a700
	uint32 OutRate;//[Offset: 0x294, Size: 0x4] 0x7873f8a780
	uint32 MaxPacketOverhead;//[Offset: 0x29c, Size: 0x4] 0x7873f8a800
	uint32 InRateClientMax;//[Offset: 0x2a0, Size: 0x4] 0x7873f8a880
	uint32 InRateClientMin;//[Offset: 0x2a4, Size: 0x4] 0x7873f8a900
	uint32 InRateClientAvg;//[Offset: 0x2a8, Size: 0x4] 0x7873f8a980
	uint32 InPacketsClientMax;//[Offset: 0x2ac, Size: 0x4] 0x7873f8aa00
	uint32 InPacketsClientMin;//[Offset: 0x2b0, Size: 0x4] 0x7873f8aa80
	uint32 InPacketsClientAvg;//[Offset: 0x2b4, Size: 0x4] 0x7873f8ab00
	uint32 OutRateClientMax;//[Offset: 0x2b8, Size: 0x4] 0x7873f8ab80
	uint32 OutRateClientMin;//[Offset: 0x2bc, Size: 0x4] 0x7873f8ac00
	uint32 OutRateClientAvg;//[Offset: 0x2c0, Size: 0x4] 0x7873f8ac80
	uint32 OutPacketsClientMax;//[Offset: 0x2c4, Size: 0x4] 0x7873f8ad00
	uint32 OutPacketsClientMin;//[Offset: 0x2c8, Size: 0x4] 0x7873f8ad80
	uint32 OutPacketsClientAvg;//[Offset: 0x2cc, Size: 0x4] 0x7873f8ae00
	uint32 NetNumClients;//[Offset: 0x2d0, Size: 0x4] 0x7873f8ae80
	uint32 InPackets;//[Offset: 0x2d4, Size: 0x4] 0x7873f8af00
	uint32 OutPackets;//[Offset: 0x2d8, Size: 0x4] 0x7873f8af80
	uint32 InBunches;//[Offset: 0x2dc, Size: 0x4] 0x7873f8b000
	uint32 OutBunches;//[Offset: 0x2e0, Size: 0x4] 0x7873f8b080
	uint32 OutLoss;//[Offset: 0x2e4, Size: 0x4] 0x7873f8b100
	uint32 InLoss;//[Offset: 0x2e8, Size: 0x4] 0x7873f8b180
	uint32 VoiceBytesSent;//[Offset: 0x2ec, Size: 0x4] 0x7873f8b200
	uint32 VoiceBytesRecv;//[Offset: 0x2f0, Size: 0x4] 0x7873f8b280
	uint32 VoicePacketsSent;//[Offset: 0x2f4, Size: 0x4] 0x7873f8b300
	uint32 VoicePacketsRecv;//[Offset: 0x2f8, Size: 0x4] 0x7873f8b380
	uint32 PercentInVoice;//[Offset: 0x2fc, Size: 0x4] 0x7873f8b400
	uint32 PercentOutVoice;//[Offset: 0x300, Size: 0x4] 0x7873f8b480
	uint32 NumActorChannels;//[Offset: 0x304, Size: 0x4] 0x7873f8b500
	uint32 NumConsideredActors;//[Offset: 0x308, Size: 0x4] 0x7873f8b580
	uint32 PrioritizedActors;//[Offset: 0x30c, Size: 0x4] 0x7873f89500
	uint32 NumRelevantActors;//[Offset: 0x310, Size: 0x4] 0x7873f89580
	uint32 NumRelevantDeletedActors;//[Offset: 0x314, Size: 0x4] 0x7873f89600
	uint32 NumReplicatedActorAttempts;//[Offset: 0x318, Size: 0x4] 0x7873f89680
	uint32 NumReplicatedActors;//[Offset: 0x31c, Size: 0x4] 0x7873f89700
	uint32 NumActors;//[Offset: 0x320, Size: 0x4] 0x7873f89780
	uint32 NumNetActors;//[Offset: 0x324, Size: 0x4] 0x7873f89800
	uint32 NumDormantActors;//[Offset: 0x328, Size: 0x4] 0x7873f89880
	uint32 NumInitiallyDormantActors;//[Offset: 0x32c, Size: 0x4] 0x7873f89900
	uint32 NumNetGUIDsAckd;//[Offset: 0x330, Size: 0x4] 0x7873f89980
	uint32 NumNetGUIDsPending;//[Offset: 0x334, Size: 0x4] 0x7873f89a00
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x338, Size: 0x4] 0x7873f89a80
	uint32 ObjPathBytes;//[Offset: 0x33c, Size: 0x4] 0x7873f89b00
	uint32 NetGUIDOutRate;//[Offset: 0x340, Size: 0x4] 0x7873f89b80
	uint32 NetGUIDInRate;//[Offset: 0x344, Size: 0x4] 0x7873f89c00
	uint32 NetSaturated;//[Offset: 0x348, Size: 0x4] 0x7873f89c80

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x288, Size: 0x4] 0x7873e40280
	float SeverePacketLossThreshold;//[Offset: 0x28c, Size: 0x4] 0x7873e40300
	int BadPingThreshold;//[Offset: 0x290, Size: 0x4] 0x7873e40380
	int SeverePingThreshold;//[Offset: 0x294, Size: 0x4] 0x7873e40400
	int AdjustedNetSpeed;//[Offset: 0x298, Size: 0x4] 0x7873e40480
	float LastNetSpeedUpdateTime;//[Offset: 0x29c, Size: 0x4] 0x7873e40500
	int TotalNetBandwidth;//[Offset: 0x2a0, Size: 0x4] 0x7873e40580
	int MinDynamicBandwidth;//[Offset: 0x2a4, Size: 0x4] 0x7873e40600
	int MaxDynamicBandwidth;//[Offset: 0x2a8, Size: 0x4] 0x7873e40680
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ac, Size: 0x1] 0x7873e40700
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ac, Size: 0x1] 0x7873e40780
	float StandbyRxCheatTime;//[Offset: 0x2b0, Size: 0x4] 0x7873e40800
	float StandbyTxCheatTime;//[Offset: 0x2b4, Size: 0x4] 0x7873e40880
	float PercentMissingForRxStandby;//[Offset: 0x2b8, Size: 0x4] 0x7873e40900
	float PercentMissingForTxStandby;//[Offset: 0x2bc, Size: 0x4] 0x7873e40980
	float PercentForBadPing;//[Offset: 0x2c0, Size: 0x4] 0x7873e40a00
	float JoinInProgressStandbyWaitTime;//[Offset: 0x2c4, Size: 0x4] 0x7873e40a80
	float MoveRepSize;//[Offset: 0x2c8, Size: 0x4] 0x7873e40b00
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x2cc, Size: 0x4] 0x7873e40b80
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x2d0, Size: 0x4] 0x7873e40c00
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x2d4, Size: 0x4] 0x7873e40c80
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x2d8, Size: 0x4] 0x7873e40d00
	float MaxClientForcedUpdateDuration;//[Offset: 0x2dc, Size: 0x4] 0x7873e40d80
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x2e0, Size: 0x4] 0x7873e40e00
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x2e4, Size: 0x4] 0x7873e40e80
	float MaxMoveDeltaTime;//[Offset: 0x2e8, Size: 0x4] 0x7873e40f00
	float MaxClientSmoothingDeltaTime;//[Offset: 0x2ec, Size: 0x4] 0x7873e40f80
	float ClientNetSendMoveDeltaTime;//[Offset: 0x2f0, Size: 0x4] 0x7873e41000
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x2f4, Size: 0x4] 0x7873e41080
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x2f8, Size: 0x4] 0x7873e2f800
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x2fc, Size: 0x4] 0x7873e2f880
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x300, Size: 0x4] 0x7873e2f900
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1] 0x7873e2f980
	float ClientErrorUpdateRateLimit;//[Offset: 0x308, Size: 0x4] 0x7873e2fa00
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x30c, Size: 0x4] 0x7873e2fa80
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x310, Size: 0x4] 0x7873e2fb00
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1] 0x7873e2fb80
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 0x1] 0x7873e2fc00
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x318, Size: 0x4] 0x7873e2fc80
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x31c, Size: 0x4] 0x7873e2fd00
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x320, Size: 0x4] 0x7873e2fd80
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x324, Size: 0x4] 0x7873e2fe00
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1] 0x7873e2fe80
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1] 0x7873e2ff00

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873a1e400
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8] 0x7873a1e480
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8] 0x7873a1e500
	float Volume;//[Offset: 0x18, Size: 0x4] 0x7873a1e580
	float FadeTime;//[Offset: 0x1c, Size: 0x4] 0x7873a1e600

--------------------------------
Class: ReverbEffect.Object
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873f86880
	float ReflectionsDelay;//[Offset: 0x2c, Size: 0x4] 0x7873f86900
	float GainHF;//[Offset: 0x30, Size: 0x4] 0x7873f86980
	float ReflectionsGain;//[Offset: 0x34, Size: 0x4] 0x7873f86a00
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7873f86a80
	float LateDelay;//[Offset: 0x3c, Size: 0x4] 0x7873f86b00
	float DecayTime;//[Offset: 0x40, Size: 0x4] 0x7873f86b80
	float Density;//[Offset: 0x44, Size: 0x4] 0x7873f86c00
	float Diffusion;//[Offset: 0x48, Size: 0x4] 0x7873f86c80
	float AirAbsorptionGainHF;//[Offset: 0x4c, Size: 0x4] 0x7873f86d00
	float DecayHFRatio;//[Offset: 0x50, Size: 0x4] 0x7873f86d80
	float LateGain;//[Offset: 0x54, Size: 0x4] 0x7873f86e00
	float Gain;//[Offset: 0x58, Size: 0x4] 0x7873f86e80
	float RoomRolloffFactor;//[Offset: 0x5c, Size: 0x4] 0x7873f86f00

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787399e100
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4] 0x787399e180
	float ExteriorTime;//[Offset: 0x8, Size: 0x4] 0x787399e200
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4] 0x787399e280
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4] 0x787399e300
	float InteriorVolume;//[Offset: 0x14, Size: 0x4] 0x787399e380
	float InteriorTime;//[Offset: 0x18, Size: 0x4] 0x787399e400
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4] 0x787399e480
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4] 0x787399e500

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873a46e00
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7873a46e80
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7873a46f00
	Box MBPBounds;//[Offset: 0x8, Size: 0x38] 0x7873a46f80
	Box MBPOuterBounds;//[Offset: 0x40, Size: 0x38] 0x7873a47000
	uint32 MBPNumSubdivs;//[Offset: 0x78, Size: 0x4] 0x7873a47080

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8] 0x7873a45600
	Actor* InViewer;//[Offset: 0x8, Size: 0x8] 0x7873a45680
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8] 0x7873a45700
	Vector ViewLocation;//[Offset: 0x18, Size: 0x18] 0x7873a45780
	Vector ViewDir;//[Offset: 0x30, Size: 0x18] 0x7873a45800

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: WorldDataLayers.Info.Actor.Object
	<DataLayer*> WorldDataLayers;//[Offset: 0x328, Size: 0x50] 0x7873eee020
	FName[] RepActiveDataLayerNames;//[Offset: 0x378, Size: 0x10] 0x7873eee0c0
	FName[] RepLoadedDataLayerNames;//[Offset: 0x388, Size: 0x10] 0x7873eee160
	FName[] RepEffectiveActiveDataLayerNames;//[Offset: 0x438, Size: 0x10] 0x7873eee200
	FName[] RepEffectiveLoadedDataLayerNames;//[Offset: 0x448, Size: 0x10] 0x7873eee2a0
	void OnRep_LoadedDataLayerNames();// 0x10e9b3fc 0x7873faf660
	void OnRep_EffectiveLoadedDataLayerNames();// 0x10e9b3d4 0x7873faf740
	void OnRep_EffectiveActiveDataLayerNames();// 0x10e9b3e8 0x7873faf820
	void OnRep_ActiveDataLayerNames();// 0x10e9b410 0x7873faf900
	void OnDataLayerRuntimeStateChanged(const DataLayer* InDataLayer, enum InState);// 0x10e9b424 0x7873faf9e0

--------------------------------
Class: DataLayer.Object
	FName DataLayerLabel;//[Offset: 0x28, Size: 0x8] 0x7873e03400
	bool bIsRuntime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7873e03480
	enum InitialRuntimeState;//[Offset: 0x31, Size: 0x1] 0x7873db74a0
	Color DebugColor;//[Offset: 0x34, Size: 0x4] 0x7873e03580
	DataLayer* Parent;//[Offset: 0x38, Size: 0x8] 0x7873e03600
	DataLayer*[] Children;//[Offset: 0x40, Size: 0x10] 0x7873db7540
	bool IsVisible();// 0x10bb6210 0x7873dec100
	bool IsRuntime();// 0x10bb61b8 0x7873dec1e0
	bool IsInitiallyVisible();// 0x10bb6248 0x7873dec2c0
	bool IsInitiallyActive();// 0x10bb611c 0x7873dec3a0
	bool IsEffectiveVisible();// 0x10bb61d8 0x7873dec480
	bool IsDynamicallyLoaded();// 0x10bb6150 0x7873dec560
	enum GetInitialState();// 0x10bb60f0 0x7873dec640
	enum GetInitialRuntimeState();// 0x10bb618c 0x7873dec720
	Color GetDebugColor();// 0x10bb6170 0x7873dec800
	FName GetDataLayerLabel();// 0x10bb6280 0x7873dec8e0
	bool Equals(out const ActorDataLayer ActorDataLayer);// 0x10bb629c 0x7873dec9c0

--------------------------------
Class: ActorDataLayer
	FName Name;//[Offset: 0x0, Size: 0x8] 0x787398ec80

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	ClassPtrProperty ObjClass;//[Size: 0x8] 0x78739b2b80

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28] 0x7873f2dd80
	int StreamingPriority;//[Offset: 0x50, Size: 0x4] 0x7873f2de00
	FName PackageNameToLoad;//[Offset: 0x54, Size: 0x8] 0x7873f2de80
	FName[] LODPackageNames;//[Offset: 0x60, Size: 0x10] 0x7873ee0380
	Transform LevelTransform;//[Offset: 0x80, Size: 0x60] 0x7873f2df80
	bool bClientOnlyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x7873f2e000
	int LevelLODIndex;//[Offset: 0xe4, Size: 0x4] 0x7873f2e080
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1] 0x7873f2e100
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 0x1] 0x7873f2e180
	bool bLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xeb, Size: 0x1] 0x7873f2e200
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xeb, Size: 0x1] 0x7873f2e280
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xeb, Size: 0x1] 0x7873f2e300
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xeb, Size: 0x1] 0x7873f2e380
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xeb, Size: 0x1] 0x7873f2e400
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xeb, Size: 0x1] 0x7873f2e480
	LinearColor LevelColor;//[Offset: 0xec, Size: 0x10] 0x7873f2e500
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0x100, Size: 0x10] 0x7873ee0420
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0x110, Size: 0x4] 0x7873f2e600
	delegate OnLevelLoaded;//[Offset: 0x118, Size: 0x10] 0x7873f2e680
	delegate OnLevelUnloaded;//[Offset: 0x128, Size: 0x10] 0x7873f2e700
	delegate OnLevelShown;//[Offset: 0x138, Size: 0x10] 0x7873f2c680
	delegate OnLevelHidden;//[Offset: 0x148, Size: 0x10] 0x7873f2c700
	Level* LoadedLevel;//[Offset: 0x158, Size: 0x8] 0x7873f2c780
	Level* PendingUnloadLevel;//[Offset: 0x160, Size: 0x8] 0x7873f2c800
	bool ShouldBeLoaded();// 0x10ce48e8 0x7873f19540
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x10ce4c3c 0x7873f19620
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x10ce4b84 0x7873f19700
	void SetPriority(int NewPriority);// 0x10ce4a34 0x7873f197e0
	void SetLevelLODIndex(int LODIndex);// 0x10ce4adc 0x7873f198c0
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);// 0x10ce4964 0x7873f199a0
	bool IsStreamingStatePending();// 0x10ce4838 0x7873f19a80
	bool IsLevelVisible();// 0x10ce4894 0x7873f19b60
	bool IsLevelLoaded();// 0x10ce4870 0x7873f19c40
	FName GetWorldAssetPackageFName();// 0x10ce4928 0x7873f19d20
	Level* GetLoadedLevel();// 0x10ce48cc 0x7873f19e00
	LevelScriptActor* GetLevelScriptActor();// 0x10ce4748 0x7873f19ee0
	bool GetIsRequestingUnloadAndRemoval();// 0x10ce4a14 0x7873f19fc0
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x10ce477c 0x7873f1a0a0

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x2c0, Size: 0x10] 0x7873ee01a0
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1] 0x7873f2ef00
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 0x1] 0x7873f2ef80
	byte StreamingUsage;//[Offset: 0x2d1, Size: 0x1] 0x7873f2f000

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreaming*[] StreamingLevels;//[Offset: 0x0, Size: 0x10] 0x78739ba420

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x7f8, Size: 0x50] 0x787386cc40
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x8ec, Size: 0x4] 0x7873e0bd80
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0x910, Size: 0x10] 0x7873db8e40
	PlayerController*[] SpectatorControllers;//[Offset: 0x920, Size: 0x10] 0x7873db8ee0

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8] 0x78739d6600
	Level* Level;//[Offset: 0x58, Size: 0x8] 0x78739d6680
	Object*[] ObjReferences;//[Offset: 0xc0, Size: 0x10] 0x78739b2860

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10] 0x78739d6480
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78739d6500
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1] 0x78739d6580

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4] 0x7873dc8580
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4] 0x7873dc8600
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4] 0x7873dc8680
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4] 0x7873dc8700
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4] 0x7873dc8780
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4] 0x7873dc8800
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4] 0x7873dc8880
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x10b42580 0x7873da99a0
	int GetObjectCount();// 0x10b426b4 0x7873da9a80
	int GetNewAvoidanceUID();// 0x10b42680 0x7873da9b60
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x10b424cc 0x7873da9c40

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8] 0x7873a43280
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8] 0x7873a43300
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8] 0x7873a43380
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8] 0x7873a43400
	<Level*> Levels;//[Offset: 0x28, Size: 0x50] 0x78739ba4c0

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10] 0x788ab2c400
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8] 0x78737d1180
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10] 0x788ab2c540
	delegate OnPawnControllerChangedDelegates;//[Offset: 0x78, Size: 0x10] 0x78737d1280
	void ReceiveShutdown();// 0xb8f1ab4 0x78737c3c00
	void ReceiveInit();// 0xb8f1ab4 0x78737c3ce0
	void HandleTravelError(byte FailureType);// 0xb8f1ab4 0x78737c3dc0
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0xb8f1ab4 0x78737c3ea0
	void DebugRemovePlayer(int ControllerId);// 0x10c060a8 0x78737c3f80
	void DebugCreatePlayer(int ControllerId);// 0x10c06158 0x78737c4060

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x78, Size: 0x8] 0x7873f30f80
	byte AspectRatioAxisConstraint;//[Offset: 0xb8, Size: 0x1] 0x7873f31000
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0xc0, Size: 0x8] 0x7873ee2180
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x7873f31080
	int ControllerId;//[Offset: 0xe0, Size: 0x4] 0x7873f2f800

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8] 0x7873e56c00
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10] 0x7873dba740
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4] 0x7873e56d00
	World* World;//[Offset: 0x70, Size: 0x8] 0x7873e56d80
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8] 0x7873e56e00
	void SSSwapControllers();// 0x10c21364 0x7873e60e80
	void ShowTitleSafeArea();// 0x10c21348 0x7873e60f60
	void SetConsoleTarget(int PlayerIndex);// 0x10c21298 0x7873e61040

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8] 0x7873dfb080
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8] 0x7873dfb100
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8] 0x7873dfb180
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10] 0x7873db7a40

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8] 0x78739d6e00
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8] 0x78739b2900

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8] 0x7873f49400

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10] 0x7873f49480
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10] 0x7873ee36c0
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10] 0x7873ee3760
	FName[] GetVectorParameterNames();// 0x10d40d30 0x7873f1e6a0
	LinearColor GetVectorParameterDefaultValue(FName ParameterName, out bool bParameterFound);// 0x10d40b1c 0x7873f1adc0
	FName[] GetScalarParameterNames();// 0x10d40de0 0x7873f1aea0
	float GetScalarParameterDefaultValue(FName ParameterName, out bool bParameterFound);// 0x10d40c28 0x7873f1af80

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4] 0x78739ec980

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78739eca00
	Guid ID;//[Offset: 0x8, Size: 0x10] 0x78739eca80

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10] 0x78739ec900

--------------------------------
Class: PhysicsFieldComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 0x10] 0x7873eebaa0
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 0x8] 0x7873fc1d80
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7873fc1e00
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x7873fc1e80
	float RebaseOriginDistance;//[Offset: 0x64, Size: 0x4] 0x7873fc1f00

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50] 0x7873860a00

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10] 0x78739ba100

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8] 0x7873a44500

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8] 0x7873a15c80
	FName ClassName;//[Offset: 0x8, Size: 0x8] 0x7873a15d00
	ClassPtrProperty ChannelClass;//[Size: 0x8] 0x78739b63c0
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4] 0x7873a15d80
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7873a15e00
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1] 0x7873a15e80
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1] 0x7873a15f00
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1] 0x7873a15f80
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7873a16000

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8] 0x7873d97600

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 0x10] 0x7873dbc4a0
	bool WasControllerKeyJustReleased(Key Key);// 0x10c36410 0x7873e64d80
	bool WasControllerKeyJustPressed(Key Key);// 0x10c365b0 0x7873e64e60
	void OnInputOwnerEndPlayed(Actor* InOwner, byte EndPlayReason);// 0x10c368f0 0x7873e64f40
	bool IsControllerKeyDown(Key Key);// 0x10c36750 0x7873e65020
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x10c35f2c 0x7873e65100
	Vector GetControllerVectorKeyState(Key Key);// 0x10c360d4 0x7873e651e0
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x10c35c8c 0x7873e652c0
	float GetControllerKeyTimeDown(Key Key);// 0x10c35d90 0x7873e653a0
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x10c35b3c 0x7873e65480
	float GetControllerAnalogKeyState(Key Key);// 0x10c36274 0x7873e65560

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8] 0x78739e3700

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10] 0x7873eec720
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4] 0x7873fb8d00
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4] 0x7873fb8d80
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4] 0x7873fb8e00
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4] 0x7873fb8e80
	float ActivationDelay;//[Offset: 0x48, Size: 0x4] 0x7873fb8f00
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x7873fb8f80
	float StartupDelay;//[Offset: 0x50, Size: 0x4] 0x7873fb9000

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8] 0x7873a42200
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8] 0x7873a42280
	Vector2D Center;//[Offset: 0x10, Size: 0x10] 0x7873a42300
	Vector2D VisualSize;//[Offset: 0x20, Size: 0x10] 0x7873a42380
	Vector2D ThumbSize;//[Offset: 0x30, Size: 0x10] 0x7873a42400
	Vector2D InteractionSize;//[Offset: 0x40, Size: 0x10] 0x7873a42480
	Vector2D InputScale;//[Offset: 0x50, Size: 0x10] 0x7873a42500
	Key MainInputKey;//[Offset: 0x60, Size: 0x18] 0x7873a42580
	Key AltInputKey;//[Offset: 0x78, Size: 0x18] 0x7873a42600

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x140, Size: 0x10] 0x7873d29e00
	delegate ColorAndOpacityDelegate;//[Offset: 0x150, Size: 0x10] 0x7873d29e80
	SlateColor ForegroundColor;//[Offset: 0x160, Size: 0x14] 0x7873d29f00
	delegate ForegroundColorDelegate;//[Offset: 0x174, Size: 0x10] 0x7873d29f80
	delegate OnVisibilityChanged;//[Offset: 0x188, Size: 0x10] 0x7873d2a000
	Margin Padding;//[Offset: 0x1b0, Size: 0x10] 0x7873d2a080
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1c0, Size: 0x10] 0x7873cc8620
	UMGSequenceTickManager* AnimationTickManager;//[Offset: 0x1d0, Size: 0x8] 0x7873d2a180
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1d8, Size: 0x10] 0x7873cc86c0
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1e8, Size: 0x10] 0x7873cc8760
	WidgetTree* WidgetTree;//[Offset: 0x1f8, Size: 0x8] 0x7873d2a300
	int Priority;//[Offset: 0x200, Size: 0x4] 0x7873d2a380
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1] 0x7873d2a400
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1] 0x7873d2a480
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 0x1] 0x7873d2a500
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x204, Size: 0x1] 0x7873d28480
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x204, Size: 0x1] 0x7873d28500
	enum TickFrequency;//[Offset: 0x218, Size: 0x1] 0x7873cc8800
	InputComponent* InputComponent;//[Offset: 0x220, Size: 0x8] 0x7873d28600
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x228, Size: 0x10] 0x7873cc88a0
	void UnregisterInputComponent();// 0xf2f212c 0x7873d33a40
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0xf2f3bac 0x7873d33b20
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0xf2f3914 0x7873d33c00
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0xf2f3b04 0x7873d33ce0
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0xf2f386c 0x7873d33dc0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xb8f1ab4 0x7873d33ea0
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0xf2f2168 0x7873d33f80
	void StopListeningForAllInputActions();// 0xf2f2154 0x7873d34060
	void StopAnimationsAndLatentActions();// 0xf2f3d9c 0x7873d34140
	void StopAnimation(const WidgetAnimation* InAnimation);// 0xf2f2b6c 0x7873d34220
	void StopAllAnimations();// 0xf2f2b58 0x7873d34300
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0xf2f41a8 0x7873d343e0
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0xf2f2630 0x7873d344c0
	void SetPadding(Margin InPadding);// 0xf2f3364 0x7873d345a0
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0xf2f3e2c 0x7873d34680
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0xf2f2724 0x7873d34760
	void SetInputActionPriority(int NewPriority);// 0xf2f1fd0 0x7873d34840
	void SetInputActionBlocking(bool bShouldBlock);// 0xf2f1f20 0x7873d34920
	void SetForegroundColor(SlateColor InForegroundColor);// 0xf2f3410 0x7873d34a00
	void SetDesiredSizeInViewport(Vector2D Size);// 0xf2f4104 0x7873d34ae0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0xf2f34d4 0x7873d34bc0
	void SetAnimationCurrentTime(const WidgetAnimation* InAnimation, float InTime);// 0xf2f2904 0x7873d34ca0
	void SetAnchorsInViewport(Anchors Anchors);// 0xf2f4054 0x7873d34d80
	void SetAlignmentInViewport(Vector2D Alignment);// 0xf2f3fb0 0x7873d34e60
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0xf2f2588 0x7873d34f40
	void RemoveFromViewport();// 0xf2f42a0 0x7873d35020
	void RegisterInputComponent();// 0xf2f2140 0x7873d35100
	void PreConstruct(bool IsDesignTime);// 0xb8f1ab4 0x7873d351e0
	void PlaySound(SoundBase* SoundToPlay);// 0xf2f2418 0x7873d352c0
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0xf2f2eb4 0x7873d353a0
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0xf2f2c14 0x7873d35480
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0xf2f2d64 0x7873d35560
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0xf2f3130 0x7873d35640
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0xf2f2aa8 0x7873d31d60
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xb8f1ab4 0x7873d31e40
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xb8f1ab4 0x7873d31f20
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0xb8f1ab4 0x7873d32000
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xb8f1ab4 0x7873d320e0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xb8f1ab4 0x7873d321c0
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0xb8f1ab4 0x7873d322a0
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xb8f1ab4 0x7873d32380
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xb8f1ab4 0x7873d32460
	void OnPaint(out PaintContext Context);// 0xb8f1ab4 0x7873d32540
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xb8f1ab4 0x7873d32620
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xb8f1ab4 0x7873d32700
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0xb8f1ab4 0x7873d327e0
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xb8f1ab4 0x7873d328c0
	void OnMouseCaptureLost();// 0xb8f1ab4 0x7873d329a0
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xb8f1ab4 0x7873d32a80
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xb8f1ab4 0x7873d32b60
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0xb8f1ab4 0x7873d32c40
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0xb8f1ab4 0x7873d32d20
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xb8f1ab4 0x7873d32e00
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xb8f1ab4 0x7873d32ee0
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0xb8f1ab4 0x7873d32fc0
	void OnInitialized();// 0xb8f1ab4 0x7873d330a0
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0xb8f1ab4 0x7873d33180
	void OnFocusLost(FocusEvent InFocusEvent);// 0xb8f1ab4 0x7873d33260
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xb8f1ab4 0x7873d33340
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xb8f1ab4 0x7873d33420
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0xb8f1ab4 0x7873d33500
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xb8f1ab4 0x7873d335e0
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0xb8f1ab4 0x7873d336c0
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0xb8f1ab4 0x7873d337a0
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0xf2f362c 0x7873d33880
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0xf2f357c 0x7873d33960
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0xb8f1ab4 0x7873d30080
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0xb8f1ab4 0x7873d30160
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0xf2f225c 0x7873d30240
	bool IsPlayingAnimation();// 0xf2f23f4 0x7873d30320
	bool IsListeningForInputAction(FName ActionName);// 0xf2f2078 0x7873d30400
	bool IsInViewport();// 0xf2f3ed4 0x7873d304e0
	bool IsInteractable();// 0xb8f1ab4 0x7873d305c0
	bool IsAnyAnimationPlaying();// 0xf2f2818 0x7873d306a0
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0xf2f24d4 0x7873d30780
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0xf2f2850 0x7873d30860
	Pawn* GetOwningPlayerPawn();// 0xf2f3df8 0x7873d30940
	PlayerCameraManager* GetOwningPlayerCameraManager();// 0xf2f3dc4 0x7873d30a20
	bool GetIsVisible();// 0xf2f3f0c 0x7873d30b00
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0xf2f29f8 0x7873d30be0
	Anchors GetAnchorsInViewport();// 0xf2f3f78 0x7873d30cc0
	Vector2D GetAlignmentInViewport();// 0xf2f3f44 0x7873d30da0
	void FlushAnimations();// 0xf2f24c0 0x7873d30e80
	void Destruct();// 0xb8f1ab4 0x7873d30f60
	void Construct();// 0xb8f1ab4 0x7873d31040
	void CancelLatentActions();// 0xf2f3db0 0x7873d31120
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0xf2f3ca4 0x7873d31200
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0xf2f3a0c 0x7873d312e0
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0xf2f36dc 0x7873d313c0
	void AddToViewport(int ZOrder);// 0xf2f4368 0x7873d314a0
	bool AddToPlayerScreen(int ZOrder);// 0xf2f42b4 0x7873d31580

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8] 0x7873814580
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10] 0x7873814600
	FText ToolTipText;//[Offset: 0x40, Size: 0x18] 0x7873814680
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10] 0x7873814700
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8] 0x7873814780
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10] 0x7873814800
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10] 0x7873814880
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x38] 0x7873814900
	Vector2D RenderTransformPivot;//[Offset: 0xc8, Size: 0x10] 0x7873814980
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x7873814a00
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1] 0x7873814a80
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd8, Size: 0x1] 0x7873814b00
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd8, Size: 0x1] 0x7873814b80
	enum FlowDirectionPreference;//[Offset: 0xd9, Size: 0x1] 0x788ab26e60
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xe0, Size: 0x8] 0x7873814c80
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1] 0x7873814d00
	byte Cursor;//[Offset: 0xe9, Size: 0x1] 0x7873814d80
	enum Clipping;//[Offset: 0xea, Size: 0x1] 0x788ab27040
	enum Visibility;//[Offset: 0xeb, Size: 0x1] 0x788ab26fa0
	float RenderOpacity;//[Offset: 0xec, Size: 0x4] 0x7873814f00
	WidgetNavigation* Navigation;//[Offset: 0xf0, Size: 0x8] 0x7873814f80
	PropertyBinding*[] NativeBindings;//[Offset: 0x120, Size: 0x10] 0x788ab26f00
	void SetVisibility(enum InVisibility);// 0xf300ba8 0x7873808ac0
	void SetUserFocus(PlayerController* PlayerController);// 0xf3004ec 0x7873808ba0
	void SetToolTipText(out const FText InToolTipText);// 0xf300e28 0x7873808c80
	void SetToolTip(Widget* Widget);// 0xf300d80 0x7873808d60
	void SetRenderTranslation(Vector2D Translation);// 0xf3010d4 0x7873808e40
	void SetRenderTransformPivot(Vector2D Pivot);// 0xf301030 0x7873808f20
	void SetRenderTransformAngle(float Angle);// 0xf3011ac 0x7873809000
	void SetRenderTransform(WidgetTransform InTransform);// 0xf30139c 0x7873805720
	void SetRenderShear(Vector2D Shear);// 0xf301254 0x7873805800
	void SetRenderScale(Vector2D Scale);// 0xf3012f8 0x78738058e0
	void SetRenderOpacity(float InOpacity);// 0xf300acc 0x78738059c0
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0xf300074 0x7873805aa0
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0xf2ffe84 0x7873805b80
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0xf2fff7c 0x7873805d40
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0xf300168 0x7873805e20
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0xf30025c 0x7873805f00
	void SetKeyboardFocus();// 0xf300780 0x7873805fe0
	void SetIsEnabled(bool bInIsEnabled);// 0xf300f40 0x78738060c0
	void SetFocus();// 0xf300594 0x78738061a0
	void SetCursor(byte InCursor);// 0xf300cd8 0x7873806280
	void SetClipping(enum InClipping);// 0xf3009f0 0x7873806360
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0xf30039c 0x7873806440
	void ResetCursor();// 0xf300cc4 0x7873806520
	void RemoveFromParent();// 0xf2ffe34 0x7873806600
	EventReply OnReply__DelegateSignature();// 0xb8f1ab4 0x78738066e0
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xb8f1ab4 0x78738067c0
	bool IsVisible();// 0xf300c8c 0x78738068a0
	bool IsHovered();// 0xf300900 0x7873806980
	void InvalidateLayoutAndVolatility();// 0xf3004c4 0x7873806a60
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0xf3005a8 0x7873806b40
	bool HasUserFocus(PlayerController* PlayerController);// 0xf3006cc 0x7873806c20
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0xf300794 0x7873806d00
	bool HasMouseCapture();// 0xf300890 0x7873806de0
	bool HasKeyboardFocus();// 0xf3008c8 0x7873806ec0
	bool HasFocusedDescendants();// 0xf30065c 0x7873806fa0
	bool HasAnyUserFocus();// 0xf300694 0x7873807080
	Widget* GetWidget__DelegateSignature();// 0xb8f1ab4 0x7873807160
	enum GetVisibility();// 0xf300c58 0x7873807240
	Geometry GetTickSpaceGeometry();// 0xf2ffdc4 0x7873807320
	FText GetText__DelegateSignature();// 0xb8f1ab4 0x7873803a40
	enum GetSlateVisibility__DelegateSignature();// 0xb8f1ab4 0x7873803b20
	SlateColor GetSlateColor__DelegateSignature();// 0xb8f1ab4 0x7873803c00
	SlateBrush GetSlateBrush__DelegateSignature();// 0xb8f1ab4 0x7873803ce0
	float GetRenderTransformAngle();// 0xf301178 0x7873803dc0
	float GetRenderOpacity();// 0xf300b74 0x7873803ea0
	PanelWidget* GetParent();// 0xf2ffe50 0x7873803f80
	Geometry GetPaintSpaceGeometry();// 0xf2ffd8c 0x7873804060
	PlayerController* GetOwningPlayer();// 0xf2ffd1c 0x7873804140
	LocalPlayer* GetOwningLocalPlayer();// 0xf2ffce0 0x7873804220
	byte GetMouseCursor__DelegateSignature();// 0xb8f1ab4 0x7873804300
	LinearColor GetLinearColor__DelegateSignature();// 0xb8f1ab4 0x78738043e0
	bool GetIsEnabled();// 0xf300ff8 0x78738044c0
	int GetInt32__DelegateSignature();// 0xb8f1ab4 0x78738045a0
	GameInstance* GetGameInstance();// 0xf2ffd58 0x7873804680
	float GetFloat__DelegateSignature();// 0xb8f1ab4 0x7873804760
	Vector2D GetDesiredSize();// 0xf300490 0x7873804840
	enum GetClipping();// 0xf300a98 0x7873804920
	enum GetCheckBoxState__DelegateSignature();// 0xb8f1ab4 0x7873804a00
	Geometry GetCachedGeometry();// 0xf2ffdfc 0x7873804ae0
	bool GetBool__DelegateSignature();// 0xb8f1ab4 0x7873804bc0
	FText GetAccessibleText();// 0xf2ffc08 0x7873804ca0
	FText GetAccessibleSummaryText();// 0xf2ffb30 0x7873804d80
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0xb8f1ab4 0x7873804e60
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0xb8f1ab4 0x7873804f40
	void ForceVolatile(bool bForce);// 0xf300940 0x7873805020
	void ForceLayoutPrepass();// 0xf3004d8 0x7873805100

--------------------------------
Class: Visual.Object

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x7873d2a800
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x68, Size: 0x10] 0x7873cc8080
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x7873d2a900
	FString DisplayLabel;//[Offset: 0x80, Size: 0x10] 0x7873d2a980
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0xf302ba8 0x7873d36280
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0xf302910 0x7873d36360
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0xf302b00 0x7873d36440
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0xf302868 0x7873d36520
	float GetStartTime();// 0xf302dcc 0x7873d36600
	float GetEndTime();// 0xf302d98 0x7873d366e0
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0xf302ca0 0x7873d367c0
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0xf302a08 0x7873d368a0

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneCompiledData* CompiledData;//[Offset: 0x50, Size: 0x8] 0x7873ad5500
	enum DefaultCompletionMode;//[Offset: 0x58, Size: 0x1] 0x7873af0560
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x7873ad5600
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1] 0x7873ad5680
	enum SequenceFlags;//[Offset: 0x5b, Size: 0x1] 0x7873af0600
	MovieSceneTimecodeSource GetEarliestTimecodeSource();// 0xecad3d0 0x7873ac8900
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0xecad43c 0x7873ac89e0
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0xecad53c 0x7873ac8ac0

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10] 0x7873ad5a00

--------------------------------
Class: MovieSceneTimecodeSource
	Timecode Timecode;//[Offset: 0x0, Size: 0x14] 0x787392d800

--------------------------------
Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4] 0x788a4d7a80
	int Minutes;//[Offset: 0x4, Size: 0x4] 0x788a4d7a00
	int Seconds;//[Offset: 0x8, Size: 0x4] 0x788a4d9c80
	int Frames;//[Offset: 0xc, Size: 0x4] 0x788a4d9c00
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x788a4d9b80

--------------------------------
Class: MovieSceneObjectBindingID
	Guid Guid;//[Offset: 0x0, Size: 0x10] 0x787392b400
	int SequenceID;//[Offset: 0x10, Size: 0x4] 0x787392b480
	int ResolveParentIndex;//[Offset: 0x14, Size: 0x4] 0x787392b500

--------------------------------
Class: MovieSceneCompiledData.Object
	MovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x28, Size: 0x160] 0x7873cd4b80
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x188, Size: 0x118] 0x7873cd4c00
	MovieSceneEntityComponentField EntityComponentField;//[Offset: 0x2a0, Size: 0xf0] 0x7873cd4c80
	MovieSceneEvaluationField TrackTemplateField;//[Offset: 0x390, Size: 0x30] 0x7873cd4d00
	FrameTime[] DeterminismFences;//[Offset: 0x3c0, Size: 0x10] 0x7873cc3bc0
	Guid CompiledSignature;//[Offset: 0x3d0, Size: 0x10] 0x7873cd4e00
	Guid CompilerVersion;//[Offset: 0x3e0, Size: 0x10] 0x7873cd4e80
	MovieSceneSequenceCompilerMaskStruct AccumulatedMask;//[Offset: 0x3f0, Size: 0x1] 0x7873cd4f00
	MovieSceneSequenceCompilerMaskStruct AllocatedMask;//[Offset: 0x3f1, Size: 0x1] 0x7873cd4f80
	enum AccumulatedFlags;//[Offset: 0x3f2, Size: 0x1] 0x7873cc3c60

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50] 0x787390ca00
	Guid SequenceSignature;//[Offset: 0xa0, Size: 0x10] 0x787392ca80
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0xb0, Size: 0x4] 0x787392cb00
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0xb8, Size: 0xa8] 0x787392cb80

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x787392bc80

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10] 0x787392e580
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2] 0x787392e600
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1] 0x78736aef20
	MovieSceneTrack* SourceTrack;//[Offset: 0x14, Size: 0x8] 0x787392e700
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 0x10] 0x78736aee80
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 0x38] 0x787392c700
	FName EvaluationGroup;//[Offset: 0x68, Size: 0x8] 0x787392c780
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x787392c800
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x787392c880
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1] 0x787392c900

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4] 0x7873ad8480
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x7873ad8500
	int[] RowsDisabled;//[Offset: 0x58, Size: 0x10] 0x7873af1fa0
	Guid EvaluationFieldGuid;//[Offset: 0x6c, Size: 0x10] 0x7873ad8600
	MovieSceneTrackEvaluationField EvaluationField;//[Offset: 0x80, Size: 0x10] 0x7873ad8680

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7873941f00
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7873941f80
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7873942000
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7873942080
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7873942100

--------------------------------
Class: MovieSceneTrackEvaluationField
	MovieSceneTrackEvaluationFieldEntry[] Entries;//[Offset: 0x0, Size: 0x10] 0x78736acd60

--------------------------------
Class: MovieSceneTrackEvaluationFieldEntry
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8] 0x7873941c00
	FrameNumberRange Range;//[Offset: 0x8, Size: 0x10] 0x7873941c80
	FrameNumber ForcedTime;//[Offset: 0x18, Size: 0x4] 0x7873941d00
	enum Flags;//[Offset: 0x1c, Size: 0x1] 0x78736accc0
	int16 LegacySortOrder;//[Offset: 0x1e, Size: 0x2] 0x7873941e00

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x2] 0x7873ad7d00
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 0x38] 0x7873ad7d80
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 0x10] 0x7873ad7e00
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 0x4] 0x7873ad7e80
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 0x4] 0x7873ad7f00
	int RowIndex;//[Offset: 0xa8, Size: 0x4] 0x7873ad7f80
	int OverlapPriority;//[Offset: 0xac, Size: 0x4] 0x7873ad8000
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7873ad8080
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x7873ad8100
	float StartTime;//[Offset: 0xb4, Size: 0x4] 0x7873ad8180
	float EndTime;//[Offset: 0xb8, Size: 0x4] 0x7873ad8200
	float PrerollTime;//[Offset: 0xbc, Size: 0x4] 0x7873ad8280
	float PostrollTime;//[Offset: 0xc0, Size: 0x4] 0x7873ad8300
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1] 0x7873ad8380
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1] 0x7873ad8400
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc6, Size: 0x2] 0x7873ad6380
	void SetRowIndex(int NewRowIndex);// 0xecac408 0x7873ac7780
	void SetPreRollFrames(int InPreRollFrames);// 0xecac0b8 0x7873ac7860
	void SetPostRollFrames(int InPostRollFrames);// 0xecabfe8 0x7873ac7940
	void SetOverlapPriority(int NewPriority);// 0xecac348 0x7873ac7a20
	void SetIsLocked(bool bInIsLocked);// 0xecac18c 0x7873ac7b00
	void SetIsActive(bool bInIsActive);// 0xecac264 0x7873ac7be0
	void SetCompletionMode(enum InCompletionMode);// 0xecac578 0x7873ac7cc0
	void SetBlendType(enum InBlendType);// 0xecac4ac 0x7873ac7da0
	bool IsLocked();// 0xecac16c 0x7873ac7e80
	bool IsActive();// 0xecac244 0x7873ac7f60
	int GetRowIndex();// 0xecac3ec 0x7873ac8040
	int GetPreRollFrames();// 0xecac09c 0x7873ac8120
	int GetPostRollFrames();// 0xecabfcc 0x7873ac8200
	int GetOverlapPriority();// 0xecac32c 0x7873ac82e0
	enum GetCompletionMode();// 0xecac61c 0x7873ac83c0
	OptionalMovieSceneBlendType GetBlendType();// 0xecac55c 0x7873ac84a0

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 0x1] 0x78736ab780
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x787392af00

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787392dc80
	enum CompletionMode;//[Offset: 0x1, Size: 0x1] 0x78736ac680

--------------------------------
Class: MovieSceneEasingSettings
	int AutoEaseInDuration;//[Offset: 0x0, Size: 0x4] 0x787392d880
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 0x4] 0x787392d900
	interface class None* EaseIn;//[Offset: 0x8, Size: 0x10] 0x787392d980
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x787392da00
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 0x4] 0x787392da80
	interface class None* EaseOut;//[Offset: 0x20, Size: 0x10] 0x787392db00
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x787392db80
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 0x4] 0x787392dc00

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4] 0x788a4ddb00

--------------------------------
Class: FrameNumberRange
	FrameNumberRangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x788a4ddd80
	FrameNumberRangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x788a4ddc00

--------------------------------
Class: FrameNumberRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x788a4ddd00
	FrameNumber Value;//[Offset: 0x4, Size: 0x4] 0x788a4ddc80

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x787392cc00

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4] 0x787392ce00
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50] 0x787390cd00
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50] 0x787390cdc0

--------------------------------
Class: MovieSceneSequenceHierarchy
	MovieSceneSequenceHierarchyNode RootNode;//[Offset: 0x0, Size: 0x18] 0x787392fa00
	MovieSceneSubSequenceTree Tree;//[Offset: 0x18, Size: 0x60] 0x787392fa80
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x78, Size: 0x50] 0x787390e680
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0xc8, Size: 0x50] 0x787390e740

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4] 0x787392fd00
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10] 0x78736ac860

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x7873888b00

--------------------------------
Class: MovieSceneSubSequenceTree

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18] 0x787392fe00
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x18, Size: 0x20] 0x787392fe80
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x38, Size: 0x20] 0x787392ea80
	FrameRate TickResolution;//[Offset: 0x58, Size: 0x8] 0x787392eb00
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x60, Size: 0x4] 0x787392eb80
	MovieSceneFrameRange ParentPlayRange;//[Offset: 0x64, Size: 0x10] 0x787392ec00
	FrameNumber ParentStartFrameOffset;//[Offset: 0x74, Size: 0x4] 0x787392ec80
	FrameNumber ParentEndFrameOffset;//[Offset: 0x78, Size: 0x4] 0x787392ed00
	FrameNumber ParentFirstLoopStartFrameOffset;//[Offset: 0x7c, Size: 0x4] 0x787392ed80
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x787392ee00
	MovieSceneFrameRange PlayRange;//[Offset: 0x84, Size: 0x10] 0x787392ee80
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x94, Size: 0x10] 0x787392ef00
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0xa4, Size: 0x10] 0x787392ef80
	MovieSceneFrameRange PreRollRange;//[Offset: 0xb4, Size: 0x10] 0x787392f000
	MovieSceneFrameRange PostRollRange;//[Offset: 0xc4, Size: 0x10] 0x787392f080
	int16 HierarchicalBias;//[Offset: 0xd4, Size: 0x2] 0x787392f100
	bool bHasHierarchicalEasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1] 0x787392f180
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0xd8, Size: 0x18] 0x787392f200
	Guid SubSectionSignature;//[Offset: 0xf8, Size: 0x10] 0x787392f280

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc] 0x787392ff00
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10] 0x78736ac7c0

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4] 0x787392ff80
	FrameTime Offset;//[Offset: 0x4, Size: 0x8] 0x787392e780

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4] 0x788a4de000
	float SubFrame;//[Offset: 0x4, Size: 0x4] 0x788a4ddf80

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc] 0x787392e800
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8] 0x787392e980

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4] 0x787392e880
	FrameNumber End;//[Offset: 0x4, Size: 0x4] 0x787392e900

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneEntityComponentField
	MovieSceneEvaluationFieldEntityTree PersistentEntityTree;//[Offset: 0x0, Size: 0x60] 0x787392bd80
	MovieSceneEvaluationFieldEntityTree OneShotEntityTree;//[Offset: 0x60, Size: 0x60] 0x787392be00
	MovieSceneEvaluationFieldEntity[] Entities;//[Offset: 0xc0, Size: 0x10] 0x78736ae700
	MovieSceneEvaluationFieldEntityMetaData[] EntityMetaData;//[Offset: 0xd0, Size: 0x10] 0x78736a9160
	MovieSceneEvaluationFieldSharedEntityMetaData[] SharedMetaData;//[Offset: 0xe0, Size: 0x10] 0x78736a90c0

--------------------------------
Class: MovieSceneEvaluationFieldEntityTree

--------------------------------
Class: MovieSceneEvaluationFieldEntity
	MovieSceneEvaluationFieldEntityKey Key;//[Offset: 0x0, Size: 0xc] 0x787392c300
	int SharedMetaDataIndex;//[Offset: 0xc, Size: 0x4] 0x787392c380

--------------------------------
Class: MovieSceneEvaluationFieldEntityKey
	Object* EntityOwner;//[Offset: 0x0, Size: 0x8] 0x787392c400
	uint32 EntityID;//[Offset: 0x8, Size: 0x4] 0x787392c480

--------------------------------
Class: MovieSceneEvaluationFieldEntityMetaData
	FString OverrideBoundPropertyPath;//[Offset: 0x0, Size: 0x10] 0x787392c000
	FrameNumber ForcedTime;//[Offset: 0x10, Size: 0x4] 0x787392c080
	enum Flags;//[Offset: 0x18, Size: 0x1] 0x78736ab960
	bool bEvaluateInSequencePreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1] 0x787392c180
	bool bEvaluateInSequencePostRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1] 0x787392c200

--------------------------------
Class: MovieSceneEvaluationFieldSharedEntityMetaData
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10] 0x787392c280

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10] 0x78736aeca0
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10] 0x78736aec00
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10] 0x78736aeb60

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10] 0x78736ae980
	MovieSceneFieldEntry_EvaluationTrack[] TrackLUT;//[Offset: 0x10, Size: 0x10] 0x78736ae8e0
	MovieSceneFieldEntry_ChildTemplate[] SectionLUT;//[Offset: 0x20, Size: 0x10] 0x78736ae840

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int NumInitPtrs;//[Offset: 0x0, Size: 0x4] 0x787392b780
	int NumEvalPtrs;//[Offset: 0x4, Size: 0x4] 0x787392b800

--------------------------------
Class: MovieSceneFieldEntry_EvaluationTrack
	MovieSceneEvaluationFieldTrackPtr TrackPtr;//[Offset: 0x0, Size: 0x8] 0x787392ba00
	uint16 NumChildren;//[Offset: 0x8, Size: 0x2] 0x787392ba80

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4] 0x787392bc00
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4] 0x787392bd00

--------------------------------
Class: MovieSceneFieldEntry_ChildTemplate
	uint16 ChildIndex;//[Offset: 0x0, Size: 0x2] 0x787392b880
	enum Flags;//[Offset: 0x2, Size: 0x1] 0x78736ae7a0
	FrameNumber ForcedTime;//[Offset: 0x4, Size: 0x4] 0x787392b980

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10] 0x78736aeac0
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10] 0x78736aea20

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc] 0x787392d580
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2] 0x787392d600
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2] 0x787392d680

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4] 0x787392d400
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4] 0x787392d480
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4] 0x787392d500

--------------------------------
Class: MovieSceneSequenceCompilerMaskStruct
	bool bHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x787392ac80
	bool bEvaluationTemplate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x787392ad00
	bool bEvaluationTemplateField;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x787392ad80
	bool bEntityComponentField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x787392ae00

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10] 0x7873cc3da0
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10] 0x7873cc1500
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10] 0x7873cc15a0
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50] 0x787386b740
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10] 0x7873cc1640
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8] 0x7873cd3400
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10] 0x7873cd3480
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10] 0x7873cd3500
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8] 0x7873cd3580
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8] 0x7873cd3600
	enum EvaluationType;//[Offset: 0x118, Size: 0x1] 0x7873cc16e0
	enum ClockSource;//[Offset: 0x119, Size: 0x1] 0x7873cc1780
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18] 0x7873cd3780
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10] 0x7873cc1820

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x60] 0x7873940080
	FName[] Tags;//[Offset: 0x60, Size: 0x10] 0x78736acc20
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7873940180
	bool bNetAddressableName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x7873940200
	bool bEvaluateTracksWhenNotSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1] 0x7873940280
	Guid Guid;//[Offset: 0x74, Size: 0x10] 0x7873940300
	FString Name;//[Offset: 0x88, Size: 0x10] 0x7873940380
	Object* ObjectTemplate;//[Offset: 0x98, Size: 0x8] 0x7873940400
	Guid[] ChildPossessables;//[Offset: 0xa0, Size: 0x10] 0x78736acb80
	enum Ownership;//[Offset: 0xb0, Size: 0x1] 0x78736acae0
	FName LevelName;//[Offset: 0xb4, Size: 0x8] 0x7873940580

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10] 0x78736ac5e0
	Guid Guid;//[Offset: 0x10, Size: 0x10] 0x787392de00
	FString Name;//[Offset: 0x20, Size: 0x10] 0x787392de80
	Guid ParentGuid;//[Offset: 0x30, Size: 0x10] 0x787392df00
	MovieSceneObjectBindingID SpawnableObjectBindingID;//[Offset: 0x40, Size: 0x18] 0x787392df80

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10] 0x787392b100
	FString BindingName;//[Offset: 0x10, Size: 0x10] 0x787392b180
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10] 0x78736ab6e0

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10] 0x78736ab460

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4] 0x7873929a80
	FString Label;//[Offset: 0x8, Size: 0x10] 0x7873929b00
	bool bIsDeterminismFence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7873929b80

--------------------------------
Class: WidgetAnimationBinding
	FName widgetname;//[Offset: 0x0, Size: 0x8] 0x787396a500
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8] 0x7873968480
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10] 0x7873968500
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7873968580

--------------------------------
Class: Geometry

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10] 0x7873812d80
	enum ColorUseRule;//[Offset: 0x10, Size: 0x1] 0x788a8aeb60

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4] 0x7873812a00
	float Top;//[Offset: 0x4, Size: 0x4] 0x7873812a80
	float Right;//[Offset: 0x8, Size: 0x4] 0x7873812b00
	float Bottom;//[Offset: 0xc, Size: 0x4] 0x7873812b80

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x10] 0x787391e900
	Vector2D Maximum;//[Offset: 0x10, Size: 0x10] 0x787391e980

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x10] 0x7873813300
	Vector2D Scale;//[Offset: 0x10, Size: 0x10] 0x7873813380
	Vector2D Shear;//[Offset: 0x20, Size: 0x10] 0x7873813400
	float Angle;//[Offset: 0x30, Size: 0x4] 0x7873813480

--------------------------------
Class: EventReply

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x10] 0x7873812980
	Margin Margin;//[Offset: 0x18, Size: 0x10] 0x7873812c00
	SlateColor TintColor;//[Offset: 0x28, Size: 0x14] 0x7873812c80
	SlateBrushOutlineSettings OutlineSettings;//[Offset: 0x40, Size: 0x40] 0x7873813080
	Object* ResourceObject;//[Offset: 0x80, Size: 0x8] 0x7873813100
	FName ResourceName;//[Offset: 0x88, Size: 0x8] 0x7873813180
	Box2f UVRegion;//[Offset: 0x90, Size: 0x14] 0x7873811100
	byte DrawAs;//[Offset: 0xa4, Size: 0x1] 0x7873811180
	byte Tiling;//[Offset: 0xa5, Size: 0x1] 0x7873811200
	byte Mirroring;//[Offset: 0xa6, Size: 0x1] 0x7873811280
	byte ImageType;//[Offset: 0xa7, Size: 0x1] 0x7873811300
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x7873811380
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1] 0x7873811400

--------------------------------
Class: SlateBrushOutlineSettings
	Vector4 CornerRadii;//[Offset: 0x0, Size: 0x20] 0x7873812d00
	SlateColor Color;//[Offset: 0x20, Size: 0x14] 0x7873812e80
	float Width;//[Offset: 0x34, Size: 0x4] 0x7873812f00
	byte RoundingType;//[Offset: 0x38, Size: 0x1] 0x7873812f80
	bool bUseBrushTransparency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7873813000

--------------------------------
Class: Box2f
	Vector2f Min;//[Offset: 0x0, Size: 0x8] 0x788a4dca80
	Vector2f Max;//[Offset: 0x8, Size: 0x8] 0x788a4dc900
	byte bIsValid;//[Offset: 0x10, Size: 0x1] 0x788a4dc880

--------------------------------
Class: Vector2f
	float X;//[Offset: 0x0, Size: 0x4] 0x788a4dca00
	float Y;//[Offset: 0x4, Size: 0x4] 0x788a4dc980

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8] 0x7873cef400
	Widget* Content;//[Offset: 0x30, Size: 0x8] 0x7873cef480

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x138, Size: 0x10] 0x788ab27220
	bool RemoveChildAt(int index);// 0xf2da490 0x787380c3a0
	bool RemoveChild(Widget* Content);// 0xf2da32c 0x787380c480
	bool HasChild(Widget* Content);// 0xf2da544 0x787380c560
	bool HasAnyChildren();// 0xf2da2f4 0x787380c640
	int GetChildrenCount();// 0xf2da808 0x787380c720
	int GetChildIndex(const Widget* Content);// 0xf2da5f8 0x787380c800
	Widget* GetChildAt(int index);// 0xf2da758 0x787380c8e0
	Widget*[] GetAllChildren();// 0xf2da6a8 0x787380c9c0
	void ClearChildren();// 0xf2da2d8 0x78738090e0
	PanelSlot* AddChild(Widget* Content);// 0xf2da3e0 0x78738091c0

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x238, Size: 0x8] 0x7873d24100
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x248, Size: 0xe0] 0x7873d24180
	void SetUserTag(FName InUserTag);// 0xf2efdd4 0x7873cfe780
	FName GetUserTag();// 0xf2efe7c 0x7873cfe860

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	MovieSceneSequence* WeakRootSequence;//[Offset: 0x0, Size: 0x8] 0x787392e300
	MovieSceneCompiledDataManager* CompiledDataManager;//[Offset: 0x8, Size: 0x8] 0x787392e380
	MovieSceneEntitySystemLinker* EntitySystemLinker;//[Offset: 0x18, Size: 0x8] 0x787392e400
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x88, Size: 0x50] 0x787390c700

--------------------------------
Class: MovieSceneCompiledDataManager.Object
	<int,MovieSceneSequenceHierarchy> Hierarchies;//[Offset: 0xd8, Size: 0x50] 0x787386b440
	<int,MovieSceneEvaluationTemplate> TrackTemplates;//[Offset: 0x128, Size: 0x50] 0x787386b500
	<int,MovieSceneEvaluationField> TrackTemplateFields;//[Offset: 0x178, Size: 0x50] 0x787386b5c0
	<int,MovieSceneEntityComponentField> EntityComponentFields;//[Offset: 0x1c8, Size: 0x50] 0x787386b680

--------------------------------
Class: MovieSceneEntitySystemLinker.Object
	MovieSceneEntitySystemGraph SystemGraph;//[Offset: 0x298, Size: 0x138] 0x7873cd4500

--------------------------------
Class: MovieSceneEntitySystemGraph
	MovieSceneEntitySystemGraphNodes Nodes;//[Offset: 0x80, Size: 0x38] 0x787392c500

--------------------------------
Class: MovieSceneEntitySystemGraphNodes

--------------------------------
Class: UMGSequenceTickManager.Object
	<UserWidget*,SequenceTickManagerWidgetData> WeakUserWidgetData;//[Offset: 0x28, Size: 0x50] 0x787386de40
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x78, Size: 0x8] 0x7873d24080

--------------------------------
Class: SequenceTickManagerWidgetData

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7873968700
	Widget* Content;//[Offset: 0x8, Size: 0x8] 0x7873968780

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8] 0x7873d51580

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8] 0x7873968800
	delegate Delegate;//[Offset: 0x8, Size: 0x10] 0x7873968880
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1] 0x78737686c0
	FName UserTag;//[Offset: 0x1c, Size: 0x8] 0x7873968980

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10] 0x7873c23d80
	Object* Payload;//[Offset: 0x38, Size: 0x8] 0x7873c23e00
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8] 0x7873c23e80
	enum Pivot;//[Offset: 0x48, Size: 0x1] 0x7873cc79a0
	Vector2D Offset;//[Offset: 0x50, Size: 0x10] 0x7873c23f80
	delegate OnDrop;//[Offset: 0x60, Size: 0x10] 0x7873c24000
	delegate OnDragCancelled;//[Offset: 0x70, Size: 0x10] 0x7873c24080
	delegate OnDragged;//[Offset: 0x80, Size: 0x10] 0x7873c24100
	void Drop(out const PointerEvent PointerEvent);// 0xf2c4460 0x7873cf1d60
	void Dragged(out const PointerEvent PointerEvent);// 0xf2c4178 0x7873cf1e40
	void DragCancelled(out const PointerEvent PointerEvent);// 0xf2c42ec 0x7873cf1f20

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873821f00
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1] 0x788ab260a0
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1] 0x788ab26000
	FText AccessibleText;//[Offset: 0x30, Size: 0x18] 0x7873822000
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10] 0x7873822080
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18] 0x7873822100
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10] 0x7873820100

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24] 0x7873d51d00
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24] 0x7873d51d80
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24] 0x7873d51e00
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24] 0x7873d51e80
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24] 0x7873d51f00
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24] 0x7873d51f80

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1] 0x7873768080
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8] 0x7873969a00
	Widget* Widget;//[Offset: 0xc, Size: 0x8] 0x7873969a80
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10] 0x7873969b00

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8] 0x7873ceef80
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x30] 0x7873cef000
	FName DestinationProperty;//[Offset: 0x60, Size: 0x8] 0x7873cef080

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10] 0x7873766e60
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8] 0x7873965000

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7873965080
	int ArrayIndex;//[Offset: 0x8, Size: 0x4] 0x7873965100
	Struct* Struct;//[Offset: 0x10, Size: 0x8] 0x7873965180

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4] 0x7873a1aa00
	byte BlendFunction;//[Offset: 0x4, Size: 0x1] 0x7873a1aa80
	float BlendExp;//[Offset: 0x8, Size: 0x4] 0x7873a1ab00
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7873a1ab80

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8] 0x7873a44000
	FName Filename;//[Offset: 0x8, Size: 0x8] 0x7873a44080
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7873a44100

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4] 0x7873729600
	int UUID;//[Offset: 0x4, Size: 0x4] 0x7873729580
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8] 0x7873729500
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8] 0x787372b580

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8] 0x7873a1a780
	int LODIndex;//[Offset: 0x8, Size: 0x4] 0x7873a1a800
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7873a1a880
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x7873a1a900
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1] 0x7873a1a980

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8] 0x78739e1680
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78739e1700
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x78739e1780
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x78739e1800

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x308, Size: 0x8] 0x7873aa6080
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x310, Size: 0x8] 0x7873aa6100
	CapsuleComponent* CapsuleComponent;//[Offset: 0x318, Size: 0x8] 0x7873aa6180
	BasedMovementInfo BasedMovement;//[Offset: 0x320, Size: 0x48] 0x7873aa6200
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x368, Size: 0x48] 0x7873aa6280
	float AnimRootMotionTranslationScale;//[Offset: 0x3b0, Size: 0x4] 0x7873aa6300
	Vector BaseTranslationOffset;//[Offset: 0x3b8, Size: 0x18] 0x7873aa4280
	Quat BaseRotationOffset;//[Offset: 0x3d0, Size: 0x20] 0x7873aa4300
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x3f0, Size: 0x4] 0x7873aa4380
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x3f4, Size: 0x4] 0x7873aa4400
	byte ReplicatedMovementMode;//[Offset: 0x3f8, Size: 0x1] 0x7873aa4480
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1] 0x7873aa4500
	float CrouchedEyeHeight;//[Offset: 0x3fc, Size: 0x4] 0x7873aa4580
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400, Size: 0x1] 0x7873aa4600
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x400, Size: 0x1] 0x7873aa4680
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x400, Size: 0x1] 0x7873aa4700
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x400, Size: 0x1] 0x7873aa4780
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x400, Size: 0x1] 0x7873aa4800
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x400, Size: 0x1] 0x7873aa4880
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x400, Size: 0x1] 0x7873aa4900
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x400, Size: 0x1] 0x7873aa4980
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x401, Size: 0x1] 0x7873aa4a00
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x401, Size: 0x1] 0x7873aa4a80
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x401, Size: 0x1] 0x7873aa4b00
	float JumpKeyHoldTime;//[Offset: 0x404, Size: 0x4] 0x7873aa4b80
	float JumpForceTimeRemaining;//[Offset: 0x408, Size: 0x4] 0x7873aa4c00
	float ProxyJumpForceStartedTime;//[Offset: 0x40c, Size: 0x4] 0x7873aa4c80
	float JumpMaxHoldTime;//[Offset: 0x410, Size: 0x4] 0x7873aa4d00
	int JumpMaxCount;//[Offset: 0x414, Size: 0x4] 0x7873aa4d80
	int JumpCurrentCount;//[Offset: 0x418, Size: 0x4] 0x7873aa4e00
	int JumpCurrentCountPreJump;//[Offset: 0x41c, Size: 0x4] 0x7873aa4e80
	delegate OnReachedJumpApex;//[Offset: 0x428, Size: 0x10] 0x7873aa4f00
	delegate MovementModeChangedDelegate;//[Offset: 0x448, Size: 0x10] 0x7873aa4f80
	delegate OnCharacterMovementUpdated;//[Offset: 0x458, Size: 0x10] 0x7873aa5000
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x468, Size: 0x48] 0x7873aa5080
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4b0, Size: 0x70] 0x7873aa5100
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x520, Size: 0x10] 0x78739be160
	RepRootMotionMontage RepRootMotion;//[Offset: 0x530, Size: 0xd8] 0x7873aa5200
	void UnCrouch(bool bClientSimulation);// 0x10b869b8 0x7873a95560
	void StopJumping();// 0x10b87118 0x7873a95640
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x10b86e60 0x7873a91d60
	void ServerMovePacked(const CharacterServerMovePackedBits PackedBits);// 0x10b89704 0x7873a91e40
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x10b88140 0x7873a91f20
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x10b89010 0x7873a92000
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x10b88760 0x7873a920e0
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x10b882b8 0x7873a921c0
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x10b88b68 0x7873a922a0
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x10b892c8 0x7873a92380
	void RootMotionDebugClientPrintOnScreen(FString InString);// 0x10b86868 0x7873a92460
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x10b86f10 0x7873a92540
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x10b86b28 0x7873a92620
	void OnRep_RootMotion();// 0x10b86854 0x7873a92700
	void OnRep_ReplicatedBasedMovement();// 0x10b87220 0x7873a927e0
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x10b8720c 0x7873a928c0
	void OnRep_IsCrouched();// 0x10b87150 0x7873a929a0
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xb8f1ab4 0x7873a92a80
	void OnLanded(out const HitResult Hit);// 0xb8f1ab4 0x7873a92b60
	void OnJumped();// 0x10b86cc4 0x7873a92c40
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x10b86ce0 0x7873a92d20
	void K2_UpdateCustomMovement(float DeltaTime);// 0xb8f1ab4 0x7873a92e00
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xb8f1ab4 0x7873a92ee0
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0xb8f1ab4 0x7873a92fc0
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xb8f1ab4 0x7873a930a0
	void Jump();// 0x10b87134 0x7873a93180
	bool IsPlayingRootMotion();// 0x10b8681c 0x7873a93260
	bool IsPlayingNetworkedRootMotionMontage();// 0x10b867ac 0x7873a93340
	bool IsJumpProvidingForce();// 0x10b87060 0x7873a93420
	bool HasAnyRootMotion();// 0x10b867e4 0x7873a93500
	AnimMontage* GetCurrentMontage();// 0x10b86e2c 0x7873a935e0
	Vector GetBaseTranslationOffset();// 0x10b871e4 0x7873a936c0
	Rotator GetBaseRotationOffsetRotator();// 0x10b8716c 0x7873a937a0
	float GetAnimRootMotionTranslationScale();// 0x10b86778 0x7873a93880
	void Crouch(bool bClientSimulation);// 0x10b86a70 0x7873a93960
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x10b87b80 0x7873a90080
	void ClientMoveResponsePacked(const CharacterMoveResponsePackedBits PackedBits);// 0x10b89618 0x7873a90160
	void ClientCheatWalk();// 0x10b8695c 0x7873a90240
	void ClientCheatGhost();// 0x10b86924 0x7873a90320
	void ClientCheatFly();// 0x10b86940 0x7873a90400
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x10b87334 0x7873a904e0
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x10b87838 0x7873a905c0
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x10b87de8 0x7873a906a0
	void ClientAckGoodMove(float Timestamp);// 0x10b88098 0x7873a90780
	bool CanJumpInternal();// 0x10b870a0 0x7873a90860
	bool CanJump();// 0x10b870e0 0x7873a90940
	bool CanCrouch();// 0x10b86978 0x7873a90a20
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x10b8723c 0x7873a90b00

--------------------------------
Class: CharacterServerMovePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterNetworkSerializationPackedBits

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: CharacterMoveResponsePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78739d1a80
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78739d1b00
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x78739d1b80
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x78739d1c00
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1] 0x78739d1d00
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x30, Size: 0x18] 0x78739d1d80

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1] 0x78739d1c80

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x170, Size: 0x8] 0x7873bef780
	float GravityScale;//[Offset: 0x178, Size: 0x4] 0x7873bed700
	float MaxStepHeight;//[Offset: 0x17c, Size: 0x4] 0x7873bed780
	float JumpZVelocity;//[Offset: 0x180, Size: 0x4] 0x7873bed800
	float JumpOffJumpZFactor;//[Offset: 0x184, Size: 0x4] 0x7873bed880
	float WalkableFloorAngle;//[Offset: 0x1a4, Size: 0x4] 0x7873bed900
	float WalkableFloorZ;//[Offset: 0x1a8, Size: 0x4] 0x7873bed980
	byte MovementMode;//[Offset: 0x1ac, Size: 0x1] 0x7873beda00
	byte CustomMovementMode;//[Offset: 0x1ad, Size: 0x1] 0x7873beda80
	enum NetworkSmoothingMode;//[Offset: 0x1ae, Size: 0x1] 0x7873bb4de0
	float GroundFriction;//[Offset: 0x1b0, Size: 0x4] 0x7873bedb80
	float MaxWalkSpeed;//[Offset: 0x1f8, Size: 0x4] 0x7873bedc00
	float MaxWalkSpeedCrouched;//[Offset: 0x1fc, Size: 0x4] 0x7873bedc80
	float MaxSwimSpeed;//[Offset: 0x200, Size: 0x4] 0x7873bedd00
	float MaxFlySpeed;//[Offset: 0x204, Size: 0x4] 0x7873bedd80
	float MaxCustomMovementSpeed;//[Offset: 0x208, Size: 0x4] 0x7873bede00
	float MaxAcceleration;//[Offset: 0x20c, Size: 0x4] 0x7873bede80
	float MinAnalogWalkSpeed;//[Offset: 0x210, Size: 0x4] 0x7873bedf00
	float BrakingFrictionFactor;//[Offset: 0x214, Size: 0x4] 0x7873bedf80
	float BrakingFriction;//[Offset: 0x218, Size: 0x4] 0x7873bee000
	float BrakingSubStepTime;//[Offset: 0x21c, Size: 0x4] 0x7873bee080
	float BrakingDecelerationWalking;//[Offset: 0x220, Size: 0x4] 0x7873bee100
	float BrakingDecelerationFalling;//[Offset: 0x224, Size: 0x4] 0x7873bee180
	float BrakingDecelerationSwimming;//[Offset: 0x228, Size: 0x4] 0x7873bee200
	float BrakingDecelerationFlying;//[Offset: 0x22c, Size: 0x4] 0x7873bee280
	float AirControl;//[Offset: 0x230, Size: 0x4] 0x7873bee300
	float AirControlBoostMultiplier;//[Offset: 0x234, Size: 0x4] 0x7873bee380
	float AirControlBoostVelocityThreshold;//[Offset: 0x238, Size: 0x4] 0x7873bee400
	float FallingLateralFriction;//[Offset: 0x23c, Size: 0x4] 0x7873bee480
	float CrouchedHalfHeight;//[Offset: 0x240, Size: 0x4] 0x7873bee500
	float Buoyancy;//[Offset: 0x244, Size: 0x4] 0x7873bee580
	float PerchRadiusThreshold;//[Offset: 0x248, Size: 0x4] 0x7873bee600
	float PerchAdditionalHeight;//[Offset: 0x24c, Size: 0x4] 0x7873bee680
	Rotator RotationRate;//[Offset: 0x250, Size: 0x18] 0x7873bee700
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1] 0x7873bec680
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 0x1] 0x7873bec700
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x268, Size: 0x1] 0x7873bec780
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x268, Size: 0x1] 0x7873bec800
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x268, Size: 0x1] 0x7873bec880
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x268, Size: 0x1] 0x7873bec900
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x268, Size: 0x1] 0x7873bec980
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x269, Size: 0x1] 0x7873beca00
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x269, Size: 0x1] 0x7873beca80
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x269, Size: 0x1] 0x7873becb00
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x269, Size: 0x1] 0x7873becb80
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x269, Size: 0x1] 0x7873becc00
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x269, Size: 0x1] 0x7873becc80
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x269, Size: 0x1] 0x7873becd00
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26a, Size: 0x1] 0x7873becd80
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26a, Size: 0x1] 0x7873bece00
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26a, Size: 0x1] 0x7873bece80
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x26a, Size: 0x1] 0x7873becf00
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x26a, Size: 0x1] 0x7873becf80
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x26a, Size: 0x1] 0x7873bed000
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x26a, Size: 0x1] 0x7873bed080
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26b, Size: 0x1] 0x7873bed100
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x270, Size: 0x8] 0x7873bed180
	float MaxOutOfWaterStepHeight;//[Offset: 0x278, Size: 0x4] 0x7873bed200
	float OutofWaterZ;//[Offset: 0x27c, Size: 0x4] 0x7873bed280
	float Mass;//[Offset: 0x280, Size: 0x4] 0x7873bed300
	float StandingDownwardForceScale;//[Offset: 0x284, Size: 0x4] 0x7873bed380
	float InitialPushForceFactor;//[Offset: 0x288, Size: 0x4] 0x7873bed400
	float PushForceFactor;//[Offset: 0x28c, Size: 0x4] 0x7873bed480
	float PushForcePointZOffsetFactor;//[Offset: 0x290, Size: 0x4] 0x7873bed500
	float TouchForceFactor;//[Offset: 0x294, Size: 0x4] 0x7873bed580
	float MinTouchForce;//[Offset: 0x298, Size: 0x4] 0x7873bed600
	float MaxTouchForce;//[Offset: 0x29c, Size: 0x4] 0x7873bed680
	float RepulsionForce;//[Offset: 0x2a0, Size: 0x4] 0x7873beb600
	Vector Acceleration;//[Offset: 0x2a8, Size: 0x18] 0x7873beb680
	Quat LastUpdateRotation;//[Offset: 0x2c0, Size: 0x20] 0x7873beb700
	Vector LastUpdateLocation;//[Offset: 0x2e0, Size: 0x18] 0x7873beb780
	Vector LastUpdateVelocity;//[Offset: 0x2f8, Size: 0x18] 0x7873beb800
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x310, Size: 0x4] 0x7873beb880
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x314, Size: 0x4] 0x7873beb900
	float ServerLastClientAdjustmentTime;//[Offset: 0x318, Size: 0x4] 0x7873beb980
	Vector PendingImpulseToApply;//[Offset: 0x320, Size: 0x18] 0x7873beba00
	Vector PendingForceToApply;//[Offset: 0x338, Size: 0x18] 0x7873beba80
	float AnalogInputModifier;//[Offset: 0x350, Size: 0x4] 0x7873bebb00
	float MaxSimulationTimeStep;//[Offset: 0x360, Size: 0x4] 0x7873bebb80
	int MaxSimulationIterations;//[Offset: 0x364, Size: 0x4] 0x7873bebc00
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x368, Size: 0x4] 0x7873bebc80
	float MaxDepenetrationWithGeometry;//[Offset: 0x36c, Size: 0x4] 0x7873bebd00
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x370, Size: 0x4] 0x7873bebd80
	float MaxDepenetrationWithPawn;//[Offset: 0x374, Size: 0x4] 0x7873bebe00
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x378, Size: 0x4] 0x7873bebe80
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x37c, Size: 0x4] 0x7873bebf00
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x380, Size: 0x4] 0x7873bebf80
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x384, Size: 0x4] 0x7873bec000
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x388, Size: 0x4] 0x7873bec080
	float NetProxyShrinkRadius;//[Offset: 0x38c, Size: 0x4] 0x7873bec100
	float NetProxyShrinkHalfHeight;//[Offset: 0x390, Size: 0x4] 0x7873bec180
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x394, Size: 0x4] 0x7873bec200
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x398, Size: 0x4] 0x7873bec280
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x39c, Size: 0x4] 0x7873bec300
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x3a0, Size: 0x4] 0x7873bec380
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x3a4, Size: 0x4] 0x7873bec400
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x3a8, Size: 0x4] 0x7873bec480
	float LedgeCheckThreshold;//[Offset: 0x3ac, Size: 0x4] 0x7873bec500
	float JumpOutOfWaterPitch;//[Offset: 0x3b0, Size: 0x4] 0x7873bec580
	FindFloorResult CurrentFloor;//[Offset: 0x3b8, Size: 0xf8] 0x7873bec600
	byte DefaultLandMovementMode;//[Offset: 0x4b0, Size: 0x1] 0x7873bea580
	byte DefaultWaterMovementMode;//[Offset: 0x4b1, Size: 0x1] 0x7873bea600
	byte GroundMovementMode;//[Offset: 0x4b2, Size: 0x1] 0x7873bea680
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4bc, Size: 0x1] 0x7873bea700
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4bc, Size: 0x1] 0x7873bea780
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4bc, Size: 0x1] 0x7873bea800
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4bc, Size: 0x1] 0x7873bea880
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4bc, Size: 0x1] 0x7873bea900
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4bc, Size: 0x1] 0x7873bea980
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4bc, Size: 0x1] 0x7873beaa00
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4bc, Size: 0x1] 0x7873beaa80
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4bd, Size: 0x1] 0x7873beab00
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4bd, Size: 0x1] 0x7873beab80
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4bd, Size: 0x1] 0x7873beac00
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4bd, Size: 0x1] 0x7873beac80
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4bd, Size: 0x1] 0x7873bead00
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4bd, Size: 0x1] 0x7873bead80
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4bd, Size: 0x1] 0x7873beae00
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4bd, Size: 0x1] 0x7873beae80
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4be, Size: 0x1] 0x7873beaf00
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4be, Size: 0x1] 0x7873beaf80
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4be, Size: 0x1] 0x7873beb000
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4be, Size: 0x1] 0x7873beb080
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4be, Size: 0x1] 0x7873beb100
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4be, Size: 0x1] 0x7873beb180
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4be, Size: 0x1] 0x7873beb200
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4bf, Size: 0x1] 0x7873beb280
	float FormerBaseVelocityDecayHalfLife;//[Offset: 0x4c0, Size: 0x4] 0x7873beb300
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c4, Size: 0x1] 0x7873beb380
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c4, Size: 0x1] 0x7873beb400
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c4, Size: 0x1] 0x7873beb480
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4c4, Size: 0x1] 0x7873beb500
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4c4, Size: 0x1] 0x7873beb580
	float AvoidanceConsiderationRadius;//[Offset: 0x4e4, Size: 0x4] 0x7873be9500
	Vector RequestedVelocity;//[Offset: 0x4e8, Size: 0x18] 0x7873be9580
	int AvoidanceUID;//[Offset: 0x500, Size: 0x4] 0x7873be9600
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x504, Size: 0x4] 0x7873be9680
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x508, Size: 0x4] 0x7873be9700
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x50c, Size: 0x4] 0x7873be9780
	float AvoidanceWeight;//[Offset: 0x510, Size: 0x4] 0x7873be9800
	Vector PendingLaunchVelocity;//[Offset: 0x518, Size: 0x18] 0x7873be9880
	float NavMeshProjectionInterval;//[Offset: 0x668, Size: 0x4] 0x7873be9900
	float NavMeshProjectionTimer;//[Offset: 0x66c, Size: 0x4] 0x7873be9980
	float NavMeshProjectionInterpSpeed;//[Offset: 0x670, Size: 0x4] 0x7873be9a00
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x674, Size: 0x4] 0x7873be9a80
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x678, Size: 0x4] 0x7873be9b00
	float NavWalkingFloorDistTolerance;//[Offset: 0x67c, Size: 0x4] 0x7873be9b80
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x6b0, Size: 0x30] 0x7873be9c00
	float MinTimeBetweenTimeStampResets;//[Offset: 0x6f8, Size: 0x4] 0x7873be9c80
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0xc70, Size: 0x48] 0x7873be9d00
	RootMotionSourceGroup ServerCorrectionRootMotion;//[Offset: 0xcb8, Size: 0x48] 0x7873be9d80
	RootMotionMovementParams RootMotionParams;//[Offset: 0xe60, Size: 0x70] 0x7873be9e00
	Vector AnimRootMotionVelocity;//[Offset: 0xed0, Size: 0x18] 0x7873be9e80
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x10b8eb38 0x7873b9e860
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x10b8ec14 0x7873b9e940
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x10b8f524 0x7873b9ea20
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x10b8f6ec 0x7873b9eb00
	void SetGroupsToIgnore(int GroupFlags);// 0x10b8f7a0 0x7873b9ebe0
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x10b8f848 0x7873b9ecc0
	void SetGroupsToAvoid(int GroupFlags);// 0x10b8f8fc 0x7873b9eda0
	void SetCrouchedHalfHeight(const float NewValue);// 0x10b8f06c 0x7873b9ee80
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x10b8f9a4 0x7873b9ef60
	void SetAvoidanceGroup(int GroupFlags);// 0x10b8fa58 0x7873b9f040
	void SetAvoidanceEnabled(bool bEnable);// 0x10b8f63c 0x7873b9f120
	float K2_GetWalkableFloorZ();// 0x10b8ebe0 0x7873b9f200
	float K2_GetWalkableFloorAngle();// 0x10b8ecbc 0x7873b9f2e0
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x10b8e9d8 0x7873b9f3c0
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x10b8e798 0x7873b9f4a0
	bool IsWalking();// 0x10b8f4e4 0x7873b9f580
	bool IsWalkable(out const HitResult Hit);// 0x10b8ecf0 0x7873b9f660
	float GetValidPerchRadius();// 0x10b8ee1c 0x7873b9f740
	float GetPerchRadiusThreshold();// 0x10b8ee50 0x7873b9f820
	PrimitiveComponent* GetMovementBase();// 0x10b8f494 0x7873b9f900
	float GetMinAnalogSpeed();// 0x10b8f214 0x7873b9f9e0
	float GetMaxJumpHeightWithJumpTime();// 0x10b8f250 0x7873b9fac0
	float GetMaxJumpHeight();// 0x10b8f28c 0x7873b9fba0
	float GetMaxBrakingDeceleration();// 0x10b8f19c 0x7873b9fc80
	float GetMaxAcceleration();// 0x10b8f1d8 0x7873b9fd60
	Vector GetLastUpdateVelocity();// 0x10b8fb00 0x7873b9fe40
	Rotator GetLastUpdateRotation();// 0x10b8fb28 0x7873b9ff20
	Vector GetLastUpdateLocation();// 0x10b8fb64 0x7873b9caa0
	Vector GetImpartedMovementBaseVelocity();// 0x10b8f454 0x7873b9cb80
	Vector GetCurrentAcceleration();// 0x10b8f164 0x7873b9cc60
	float GetCrouchedHalfHeight();// 0x10b8f038 0x7873b9cd40
	Character* GetCharacterOwner();// 0x10b8f620 0x7873b9ce20
	float GetAnalogInputModifier();// 0x10b8f130 0x7873b9cf00
	void DisableMovement();// 0x10b8f4c8 0x7873b9cfe0
	void ClearAccumulatedForces();// 0x10b8f114 0x7873b9d0c0
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x10b8e504 0x7873b9d1a0
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x10b8f2c8 0x7873b9d280
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x10b8ef34 0x7873b9d360
	void AddForce(Vector Force);// 0x10b8ee84 0x7873b9d440

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7873a12580
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7873a12600
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7873a12680
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7873a12700
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7873a12780
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7873a12800
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7873a12880
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7873a12900
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7873a12980
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7873a12a00
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7873a12a80
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7873a12b00
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7873a12b80
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x7873a12c00
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x7873a12c80
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x7873a12d00
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1] 0x7873a12d80
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1] 0x7873a12e00
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1] 0x7873a12e80
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1] 0x7873a12f00
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1] 0x7873a12f80
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1] 0x7873a13000
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1] 0x7873a13080
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1] 0x7873a13100
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1] 0x7873a13180
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1] 0x7873a11100
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1] 0x7873a11180
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1] 0x7873a11200
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1] 0x7873a11280
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1] 0x7873a11300
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1] 0x7873a11380
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1] 0x7873a11400

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78739d2f80
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78739d3000
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78739d3080
	float FloorDist;//[Offset: 0x4, Size: 0x4] 0x78739d3100
	float LineDist;//[Offset: 0x8, Size: 0x4] 0x78739d3180
	HitResult HitResult;//[Offset: 0x10, Size: 0xe8] 0x78739d1100

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873990700
	float BlendWeight;//[Offset: 0x4, Size: 0x4] 0x7873990780
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x60] 0x7873990800

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8] 0x78739d1180
	FName BoneName;//[Offset: 0x8, Size: 0x8] 0x78739d1200
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0x18] 0x78739d1280
	Rotator Rotation;//[Offset: 0x28, Size: 0x18] 0x78739d1300
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78739d1380
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x78739d1400
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x78739d1480

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4] 0x78739d1500
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0xd8] 0x78739d1580

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78739d1600
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8] 0x78739d1680
	float Position;//[Offset: 0x10, Size: 0x4] 0x78739d1700
	Vector_NetQuantize100 Location;//[Offset: 0x18, Size: 0x18] 0x78739d1780
	Rotator Rotation;//[Offset: 0x30, Size: 0x18] 0x78739d1800
	PrimitiveComponent* MovementBase;//[Offset: 0x48, Size: 0x8] 0x78739d1880
	FName MovementBaseBoneName;//[Offset: 0x50, Size: 0x8] 0x78739d1900
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78739d1980
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78739d1a00
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x60, Size: 0x48] 0x78739d1e00
	Vector_NetQuantize10 Acceleration;//[Offset: 0xa8, Size: 0x18] 0x78739d1e80
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xc0, Size: 0x18] 0x78739d1f00

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4] 0x78739c2f00
	int index;//[Offset: 0x4, Size: 0x4] 0x78739c2f80
	int SelectionIndex;//[Offset: 0x8, Size: 0x4] 0x78739c3000

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8] 0x788ab7ec00
	FName MemberName;//[Offset: 0x8, Size: 0x8] 0x788ab7eb80
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10] 0x788ab7eb00

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x2b0, Size: 0x8] 0x7873db5920
	Actor* ChildActor;//[Offset: 0x2b8, Size: 0x8] 0x7873df9b00
	Actor* ChildActorTemplate;//[Offset: 0x2c0, Size: 0x8] 0x7873df9b80
	void SetChildActorClass(class Actor InClass);// 0x10b95a9c 0x7873de5aa0

--------------------------------
Class: Interface.Object

--------------------------------
Class: ActorElementCounterInterface.Object

--------------------------------
Class: ActorElementSelectionInterface.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: ActorSoundParameterInterface.Interface.Object
	void GetActorSoundParams(out AudioParameter[] Params);// 0xb8f1ab4 0x7873da4a00

--------------------------------
Class: AudioParameter
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7873964900
	float FloatParam;//[Offset: 0x8, Size: 0x4] 0x7873964980
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7873964a00
	int IntParam;//[Offset: 0x10, Size: 0x4] 0x7873964a80
	Object* ObjectParam;//[Offset: 0x18, Size: 0x8] 0x7873964b00
	FString StringParam;//[Offset: 0x20, Size: 0x10] 0x7873964b80
	float[] ArrayFloatParam;//[Offset: 0x30, Size: 0x10] 0x7873766aa0
	bool[] ArrayBoolParam;//[Offset: 0x40, Size: 0x10] 0x7873766b40
	int[] ArrayIntParam;//[Offset: 0x50, Size: 0x10] 0x7873766be0
	Object*[] ArrayObjectParam;//[Offset: 0x60, Size: 0x10] 0x7873766c80
	FString[] ArrayStringParam;//[Offset: 0x70, Size: 0x10] 0x7873766d20
	enum ParamType;//[Offset: 0x80, Size: 0x1] 0x7873766dc0
	FName TypeName;//[Offset: 0x84, Size: 0x8] 0x7873964f00

--------------------------------
Class: BlendSpace.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x7873d98b00
	InterpolationParameter InterpolationParam;//[Offset: 0x8c, Size: 0x10] 0x7873d98b80
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xbc, Size: 0x4] 0x7873d98c00
	bool bTargetWeightInterpolationEaseInOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x7873d98c80
	float AnimLength;//[Offset: 0xc4, Size: 0x4] 0x7873d98d00
	byte NotifyTriggerMode;//[Offset: 0xc8, Size: 0x1] 0x7873d98d80
	bool bInterpolateUsingGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1] 0x7873d98e00
	enum PreferredTriangulationDirection;//[Offset: 0xca, Size: 0x1] 0x7873cce340
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xd0, Size: 0x10] 0x7873cce3e0
	int SampleIndexWithMarkers;//[Offset: 0xe0, Size: 0x4] 0x7873d98f80
	BlendSample[] SampleData;//[Offset: 0xe8, Size: 0x10] 0x7873cce480
	EditorElement[] GridSamples;//[Offset: 0xf8, Size: 0x10] 0x7873cce520
	BlendSpaceData BlendSpaceData;//[Offset: 0x108, Size: 0x20] 0x7873d99100
	BlendParameter BlendParameters;//[Offset: 0x128, Size: 0x20] 0x7873d99180
	byte AxisToScaleAnimation;//[Offset: 0x188, Size: 0x1] 0x7873d99200
	int[] DimensionIndices;//[Offset: 0x190, Size: 0x10] 0x7873cce5c0

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4] 0x787399fe00
	float DampingRatio;//[Offset: 0x4, Size: 0x4] 0x787399fe80
	float MaxSpeed;//[Offset: 0x8, Size: 0x4] 0x787399ff00
	byte InterpolationType;//[Offset: 0xc, Size: 0x1] 0x787399ff80

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10] 0x78739c0900
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4] 0x78739c0980

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8] 0x787399f980
	Vector SampleValue;//[Offset: 0x8, Size: 0x18] 0x787399fa00
	float RateScale;//[Offset: 0x20, Size: 0x4] 0x787399fa80

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4] 0x78739c0b00
	float Weights;//[Offset: 0xc, Size: 0x4] 0x78739c0b80

--------------------------------
Class: BlendSpaceData
	BlendSpaceSegment[] Segments;//[Offset: 0x0, Size: 0x10] 0x78739b1140
	BlendSpaceTriangle[] Triangles;//[Offset: 0x10, Size: 0x10] 0x78739b11e0

--------------------------------
Class: BlendSpaceSegment
	int SampleIndices;//[Offset: 0x0, Size: 0x4] 0x787399f880
	float Vertices;//[Offset: 0x8, Size: 0x4] 0x787399f900

--------------------------------
Class: BlendSpaceTriangle
	int SampleIndices;//[Offset: 0x0, Size: 0x4] 0x78739c0e00
	Vector2D Vertices;//[Offset: 0x10, Size: 0x10] 0x78739c0e80
	BlendSpaceTriangleEdgeInfo EdgeInfo;//[Offset: 0x40, Size: 0x28] 0x78739c0f00

--------------------------------
Class: BlendSpaceTriangleEdgeInfo
	Vector2D Normal;//[Offset: 0x0, Size: 0x10] 0x78739c0f80
	int NeighbourTriangleIndex;//[Offset: 0x10, Size: 0x4] 0x78739c1000
	int AdjacentPerimeterTriangleIndices;//[Offset: 0x14, Size: 0x4] 0x78739c1080
	int AdjacentPerimeterVertexIndices;//[Offset: 0x1c, Size: 0x4] 0x787399f800

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10] 0x787399fb00
	float Min;//[Offset: 0x10, Size: 0x4] 0x787399fb80
	float Max;//[Offset: 0x14, Size: 0x4] 0x787399fc00
	int GridNum;//[Offset: 0x18, Size: 0x4] 0x787399fc80
	bool bSnapToGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x787399fd00
	bool bWrapInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1] 0x787399fd80

--------------------------------
Class: AimOffsetBlendSpace1D.BlendSpace1D.BlendSpace.AnimationAsset.Object

--------------------------------
Class: BlendSpace1D.BlendSpace.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1] 0x7873d98a80

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: AnimationSettings.DeveloperSettings.Object
	int CompressCommandletVersion;//[Offset: 0x38, Size: 0x4] 0x7873d99d00
	FString[] KeyEndEffectorsMatchNameArray;//[Offset: 0x40, Size: 0x10] 0x7873ccfb00
	bool ForceRecompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7873d99e00
	bool bForceBelowThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x7873d99e80
	bool bFirstRecompressUsingCurrentOrDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x7873d99f00
	bool bRaiseMaxErrorToExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1] 0x7873d99f80
	bool bEnablePerformanceLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7873d9a000
	bool bStripAnimationDataOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x7873d9a080
	bool bTickAnimationOnSkeletalMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1] 0x7873d9a100
	TimecodeCustomAttributeNameSettings BoneTimecodeCustomAttributeNameSettings;//[Offset: 0x58, Size: 0x38] 0x7873d9a180
	CustomAttributeSetting[] BoneCustomAttributesNames;//[Offset: 0x90, Size: 0x10] 0x7873ccfba0
	FString[] BoneNamesWithCustomAttributes;//[Offset: 0xa0, Size: 0x10] 0x7873ccfc40
	<FName,enum> AttributeBlendModes;//[Offset: 0xb0, Size: 0x50] 0x787386db40
	enum DefaultAttributeBlendMode;//[Offset: 0x100, Size: 0x1] 0x7873ccfd80
	FString[] TransformAttributeNames;//[Offset: 0x108, Size: 0x10] 0x7873ccfe20
	MirrorFindReplaceExpression[] MirrorFindReplaceExpressions;//[Offset: 0x118, Size: 0x10] 0x7873ccfec0
	FString[] GetBoneCustomAttributeNamesToImport();// 0x10ad794c 0x7873da43e0

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: TimecodeCustomAttributeNameSettings
	FName HourAttributeName;//[Offset: 0x0, Size: 0x8] 0x78739d5380
	FName MinuteAttributeName;//[Offset: 0x8, Size: 0x8] 0x78739d5400
	FName SecondAttributeName;//[Offset: 0x10, Size: 0x8] 0x78739d5480
	FName FrameAttributeName;//[Offset: 0x18, Size: 0x8] 0x78739d5500
	FName SubframeAttributeName;//[Offset: 0x20, Size: 0x8] 0x78739d5580
	FName RateAttributeName;//[Offset: 0x28, Size: 0x8] 0x78739d5600
	FName TakenameAttributeName;//[Offset: 0x30, Size: 0x8] 0x78739d5680

--------------------------------
Class: CustomAttributeSetting
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78739d5700
	FString Meaning;//[Offset: 0x10, Size: 0x10] 0x78739d5780

--------------------------------
Class: AnimBlueprint.Blueprint.BlueprintCore.Object
	Skeleton* TargetSkeleton;//[Offset: 0xa8, Size: 0x8] 0x7873d99a80
	AnimGroupInfo[] Groups;//[Offset: 0xb0, Size: 0x10] 0x7873ccfa60
	bool bIsTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x7873d99b80
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x7873d99c00
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1] 0x7873d99c80

--------------------------------
Class: AnimGroupInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7873991a00
	LinearColor Color;//[Offset: 0x8, Size: 0x10] 0x7873991a80

--------------------------------
Class: BlueprintGeneratedClass.Class.Struct.Field.Object
	int NumReplicatedProperties;//[Offset: 0x270, Size: 0x4] 0x7873abf900
	bool bHasNativizedParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1] 0x7873abf980
	bool bHasCookedComponentInstancingData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 0x1] 0x7873abfa00
	DynamicBlueprintBinding*[] DynamicBindingObjects;//[Offset: 0x278, Size: 0x10] 0x78739be3e0
	ActorComponent*[] ComponentTemplates;//[Offset: 0x288, Size: 0x10] 0x78739be480
	TimelineTemplate*[] Timelines;//[Offset: 0x298, Size: 0x10] 0x78739be520
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x2a8, Size: 0x10] 0x78739be5c0
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x2b8, Size: 0x8] 0x7873abfc80
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x2c0, Size: 0x8] 0x7873abfd00
	StructProperty* UberGraphFramePointerProperty;//[Offset: 0x2c8, Size: 0x8] 0x7873abfd80
	Function* UberGraphFunction;//[Offset: 0x2d8, Size: 0x8] 0x7873abfe00
	<FName,BlueprintCookedComponentInstancingData> CookedComponentInstancingData;//[Offset: 0x2e8, Size: 0x50] 0x787386a180

--------------------------------
Class: DynamicBlueprintBinding.Object

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: AnimCompress.AnimBoneCompressionCodec.Object
	bool bNeedsSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7873d9a600
	byte TranslationCompressionFormat;//[Offset: 0x39, Size: 0x1] 0x7873d9a680
	byte RotationCompressionFormat;//[Offset: 0x3a, Size: 0x1] 0x7873d9a700
	byte ScaleCompressionFormat;//[Offset: 0x3b, Size: 0x1] 0x7873d9a780

--------------------------------
Class: AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4] 0x7873d9c280
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4] 0x7873d9c300
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4] 0x7873d9c380
	float MaxEffectorDiff;//[Offset: 0x48, Size: 0x4] 0x7873d9c400
	float MinEffectorDiff;//[Offset: 0x4c, Size: 0x4] 0x7873d9c480
	float EffectorDiffSocket;//[Offset: 0x50, Size: 0x4] 0x7873d9c500
	float ParentKeyScale;//[Offset: 0x54, Size: 0x4] 0x7873d9c580
	bool bRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7873d9c600
	bool bActuallyFilterLinearKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x7873d9a580

--------------------------------
Class: AnimCompress_RemoveTrivialKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4] 0x7873d9d680
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4] 0x7873d9b600
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4] 0x7873d9b680

--------------------------------
Class: AnimCurveCompressionCodec_UniformIndexable.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_CompressedRichCurve.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimNotifyState_TimedParticleEffect.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8] 0x7873d9ea00
	FName SocketName;//[Offset: 0x38, Size: 0x8] 0x7873d9ea80
	Vector LocationOffset;//[Offset: 0x40, Size: 0x18] 0x7873d9eb00
	Rotator RotationOffset;//[Offset: 0x58, Size: 0x18] 0x7873d9eb80
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7873d9ec00

--------------------------------
Class: AnimNotify_PlayParticleEffect.AnimNotify.Object
	ParticleSystem* PSTemplate;//[Offset: 0x38, Size: 0x8] 0x7873d9fb00
	Vector LocationOffset;//[Offset: 0x40, Size: 0x18] 0x7873d9fb80
	Rotator RotationOffset;//[Offset: 0x58, Size: 0x18] 0x7873d9fc00
	Vector Scale;//[Offset: 0x70, Size: 0x18] 0x7873d9fc80
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7873d9fd00
	FName SocketName;//[Offset: 0xb4, Size: 0x8] 0x7873d9fd80

--------------------------------
Class: AnimNotify_ResetDynamics.AnimNotify.Object

--------------------------------
Class: AnimSet.Object
	bool bAnimRotationOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7873dc0400
	FName[] TrackBoneNames;//[Offset: 0x30, Size: 0x10] 0x7873db2540
	AnimSetMeshLinkup[] LinkupCache;//[Offset: 0x40, Size: 0x10] 0x7873db25e0
	byte[] BoneUseAnimTranslation;//[Offset: 0x50, Size: 0x10] 0x7873db2680
	byte[] ForceUseMeshTranslation;//[Offset: 0x60, Size: 0x10] 0x7873db2720
	FName[] UseTranslationBoneNames;//[Offset: 0x70, Size: 0x10] 0x7873db27c0
	FName[] ForceMeshTranslationBoneNames;//[Offset: 0x80, Size: 0x10] 0x7873db2860
	FName PreviewSkelMeshName;//[Offset: 0x90, Size: 0x8] 0x7873dc0780
	FName BestRatioSkelMeshName;//[Offset: 0x98, Size: 0x8] 0x7873dc0800

--------------------------------
Class: AnimSetMeshLinkup
	int[] BoneToTrackTable;//[Offset: 0x0, Size: 0x10] 0x787376f6a0

--------------------------------
Class: AnimStreamable.AnimSequenceBase.AnimationAsset.Object
	int NumberOfKeys;//[Offset: 0xa8, Size: 0x4] 0x7873dc1400
	enum Interpolation;//[Offset: 0xac, Size: 0x1] 0x7873db24a0
	FName RetargetSource;//[Offset: 0xb0, Size: 0x8] 0x7873dc1500
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xc8, Size: 0x8] 0x7873dc1580
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd0, Size: 0x8] 0x7873dc1600
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x7873dc1680
	byte RootMotionRootLock;//[Offset: 0xd9, Size: 0x1] 0x7873dc1700
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1] 0x7873dc1780
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1] 0x7873dc1800

--------------------------------
Class: CollisionProfile.DeveloperSettings.Object
	CollisionResponseTemplate[] Profiles;//[Offset: 0x38, Size: 0x10] 0x7873db54c0
	CustomChannelSetup[] DefaultChannelResponses;//[Offset: 0x48, Size: 0x10] 0x7873db5560
	CustomProfile[] EditProfiles;//[Offset: 0x58, Size: 0x10] 0x7873db5600
	Redirector[] ProfileRedirects;//[Offset: 0x68, Size: 0x10] 0x7873db56a0
	Redirector[] CollisionChannelRedirects;//[Offset: 0x78, Size: 0x10] 0x7873db5740

--------------------------------
Class: CollisionResponseTemplate
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78739d2a80
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1] 0x78739d2b00
	bool bCanModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x78739d2b80
	FName ObjectTypeName;//[Offset: 0x2c, Size: 0x8] 0x78739d2c00
	ResponseChannel[] CustomResponses;//[Offset: 0x38, Size: 0x10] 0x78739b0240

--------------------------------
Class: CustomChannelSetup
	byte Channel;//[Offset: 0x0, Size: 0x1] 0x78739d2800
	byte DefaultResponse;//[Offset: 0x1, Size: 0x1] 0x78739d2880
	bool bTraceType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78739d2900
	bool bStaticObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78739d2980
	FName Name;//[Offset: 0x4, Size: 0x8] 0x78739d2a00

--------------------------------
Class: CustomProfile
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78739d2700
	ResponseChannel[] CustomResponses;//[Offset: 0x8, Size: 0x10] 0x78739b01a0

--------------------------------
Class: Redirector
	FName OldName;//[Offset: 0x0, Size: 0x8] 0x78739dfc00
	FName NewName;//[Offset: 0x8, Size: 0x8] 0x78739dfc80

--------------------------------
Class: AssetImportData.Object

--------------------------------
Class: AssetMappingTable.Object
	AssetMapping[] MappedAssets;//[Offset: 0x28, Size: 0x10] 0x7873db1b40

--------------------------------
Class: AssetMapping
	AnimationAsset* SourceAsset;//[Offset: 0x0, Size: 0x8] 0x787399d480
	AnimationAsset* TargetAsset;//[Offset: 0x8, Size: 0x8] 0x787399d500

--------------------------------
Class: AsyncActionHandleSaveGame.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x30, Size: 0x10] 0x7873dc3600
	SaveGame* SaveGameObject;//[Offset: 0x60, Size: 0x8] 0x7873dc3680
	static AsyncActionHandleSaveGame* AsyncSaveGameToSlot(Object* WorldContextObject, SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0x10b2fe90 0x7873da8d60
	static AsyncActionHandleSaveGame* AsyncLoadGameFromSlot(Object* WorldContextObject, FString SlotName, const int UserIndex);// 0x10b2fd44 0x7873da8e40

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x10b578ec 0x78737c9380

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: AsyncActionLoadPrimaryAssetClass.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x7873dc5200
	static AsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0x10b30f18 0x7873da8ba0

--------------------------------
Class: AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: PrimaryAssetId
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x788a4d6b00
	FName PrimaryAssetName;//[Offset: 0x8, Size: 0x8] 0x788a4d6a00

--------------------------------
Class: PrimaryAssetType
	FName Name;//[Offset: 0x0, Size: 0x8] 0x788a4d6b80

--------------------------------
Class: AsyncActionChangePrimaryAssetBundles.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x7873dc4800
	static AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] AddBundles, out const FName[] RemoveBundles);// 0x10b321d4 0x7873da8820
	static AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(Object* WorldContextObject, out const FName[] NewBundles, out const FName[] OldBundles);// 0x10b323a0 0x7873da8900

--------------------------------
Class: SkyAtmosphereComponent.SceneComponent.ActorComponent.Object
	enum TransformMode;//[Offset: 0x2b0, Size: 0x1] 0x7873db3d00
	float BottomRadius;//[Offset: 0x2b4, Size: 0x4] 0x7873dc7300
	Color GroundAlbedo;//[Offset: 0x2b8, Size: 0x4] 0x7873dc7380
	float AtmosphereHeight;//[Offset: 0x2bc, Size: 0x4] 0x7873dc5300
	float MultiScatteringFactor;//[Offset: 0x2c0, Size: 0x4] 0x7873dc5380
	float TraceSampleCountScale;//[Offset: 0x2c4, Size: 0x4] 0x7873dc5400
	float RayleighScatteringScale;//[Offset: 0x2c8, Size: 0x4] 0x7873dc5480
	LinearColor RayleighScattering;//[Offset: 0x2cc, Size: 0x10] 0x7873dc5500
	float RayleighExponentialDistribution;//[Offset: 0x2dc, Size: 0x4] 0x7873dc5580
	float MieScatteringScale;//[Offset: 0x2e0, Size: 0x4] 0x7873dc5600
	LinearColor MieScattering;//[Offset: 0x2e4, Size: 0x10] 0x7873dc5680
	float MieAbsorptionScale;//[Offset: 0x2f4, Size: 0x4] 0x7873dc5700
	LinearColor MieAbsorption;//[Offset: 0x2f8, Size: 0x10] 0x7873dc5780
	float MieAnisotropy;//[Offset: 0x308, Size: 0x4] 0x7873dc5800
	float MieExponentialDistribution;//[Offset: 0x30c, Size: 0x4] 0x7873dc5880
	float OtherAbsorptionScale;//[Offset: 0x310, Size: 0x4] 0x7873dc5900
	LinearColor OtherAbsorption;//[Offset: 0x314, Size: 0x10] 0x7873dc5980
	TentDistribution OtherTentDistribution;//[Offset: 0x324, Size: 0xc] 0x7873dc5a00
	LinearColor SkyLuminanceFactor;//[Offset: 0x330, Size: 0x10] 0x7873dc5a80
	float AerialPespectiveViewDistanceScale;//[Offset: 0x340, Size: 0x4] 0x7873dc5b00
	float HeightFogContribution;//[Offset: 0x344, Size: 0x4] 0x7873dc5b80
	float TransmittanceMinLightElevationAngle;//[Offset: 0x348, Size: 0x4] 0x7873dc5c00
	float AerialPerspectiveStartDepth;//[Offset: 0x34c, Size: 0x4] 0x7873dc5c80
	Guid bStaticLightingBuiltGUID;//[Offset: 0x390, Size: 0x10] 0x7873dc5d00
	void SetSkyLuminanceFactor(LinearColor NewValue);// 0x10e2a334 0x7873da7860
	void SetRayleighScatteringScale(float NewValue);// 0x10e2aa6c 0x7873da7940
	void SetRayleighScattering(LinearColor NewValue);// 0x10e2a9c4 0x7873da7a20
	void SetRayleighExponentialDistribution(float NewValue);// 0x10e2a91c 0x7873da7b00
	void SetOtherAbsorptionScale(float NewValue);// 0x10e2a484 0x7873da7be0
	void SetOtherAbsorption(LinearColor NewValue);// 0x10e2a3dc 0x7873da7cc0
	void SetMultiScatteringFactor(float NewValue);// 0x10e2ab14 0x7873da7da0
	void SetMieScatteringScale(float NewValue);// 0x10e2a874 0x7873da7e80
	void SetMieScattering(LinearColor NewValue);// 0x10e2a7cc 0x7873da7f60
	void SetMieExponentialDistribution(float NewValue);// 0x10e2a52c 0x7873da8040
	void SetMieAnisotropy(float NewValue);// 0x10e2a5d4 0x7873da8120
	void SetMieAbsorptionScale(float NewValue);// 0x10e2a724 0x7873da8200
	void SetMieAbsorption(LinearColor NewValue);// 0x10e2a67c 0x7873da82e0
	void SetHeightFogContribution(float NewValue);// 0x10e2a1e4 0x7873da83c0
	void SetAtmosphereHeight(float NewValue);// 0x10e2abbc 0x7873da84a0
	void SetAerialPespectiveViewDistanceScale(float NewValue);// 0x10e2a28c 0x7873da8580
	void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, out const Vector LightDirection);// 0x10e2ac64 0x7873da8660
	LinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(DirectionalLightComponent* DirectionalLight);// 0x10e2a130 0x7873da8740

--------------------------------
Class: TentDistribution
	float TipAltitude;//[Offset: 0x0, Size: 0x4] 0x7873a36e80
	float TipValue;//[Offset: 0x4, Size: 0x4] 0x7873a36f00
	float Width;//[Offset: 0x8, Size: 0x4] 0x7873a36f80

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float ShadowCascadeBiasDistribution;//[Offset: 0x3dc, Size: 0x4] 0x7873e21680
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 0x1] 0x7873e21700
	float OcclusionMaskDarkness;//[Offset: 0x3e4, Size: 0x4] 0x7873e21780
	float OcclusionDepthRange;//[Offset: 0x3e8, Size: 0x4] 0x7873e21800
	Vector LightShaftOverrideDirection;//[Offset: 0x3f0, Size: 0x18] 0x7873e21880
	float WholeSceneDynamicShadowRadius;//[Offset: 0x408, Size: 0x4] 0x7873e21900
	float DynamicShadowDistanceMovableLight;//[Offset: 0x40c, Size: 0x4] 0x7873e21980
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x410, Size: 0x4] 0x7873e21a00
	int DynamicShadowCascades;//[Offset: 0x414, Size: 0x4] 0x7873e21a80
	float CascadeDistributionExponent;//[Offset: 0x418, Size: 0x4] 0x7873e21b00
	float CascadeTransitionFraction;//[Offset: 0x41c, Size: 0x4] 0x7873e21b80
	float ShadowDistanceFadeoutFraction;//[Offset: 0x420, Size: 0x4] 0x7873e21c00
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 0x1] 0x7873e21c80
	int FarShadowCascadeCount;//[Offset: 0x428, Size: 0x4] 0x7873e21d00
	float FarShadowDistance;//[Offset: 0x42c, Size: 0x4] 0x7873e21d80
	float DistanceFieldShadowDistance;//[Offset: 0x430, Size: 0x4] 0x7873e21e00
	float LightSourceAngle;//[Offset: 0x434, Size: 0x4] 0x7873e21e80
	float LightSourceSoftAngle;//[Offset: 0x438, Size: 0x4] 0x7873e21f00
	float ShadowSourceAngleFactor;//[Offset: 0x43c, Size: 0x4] 0x7873e21f80
	float TraceDistance;//[Offset: 0x440, Size: 0x4] 0x7873e22000
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x444, Size: 0x1] 0x7873e22080
	bool bAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x444, Size: 0x1] 0x7873e22100
	int AtmosphereSunLightIndex;//[Offset: 0x448, Size: 0x4] 0x7873e20080
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x44c, Size: 0x10] 0x7873e20100
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 0x1] 0x7873e20180
	bool bCastShadowsOnClouds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x45c, Size: 0x1] 0x7873e20200
	bool bCastShadowsOnAtmosphere;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x45c, Size: 0x1] 0x7873e20280
	bool bCastCloudShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x45c, Size: 0x1] 0x7873e20300
	float CloudShadowStrength;//[Offset: 0x460, Size: 0x4] 0x7873e20380
	float CloudShadowOnAtmosphereStrength;//[Offset: 0x464, Size: 0x4] 0x7873e20400
	float CloudShadowOnSurfaceStrength;//[Offset: 0x468, Size: 0x4] 0x7873e20480
	float CloudShadowDepthBias;//[Offset: 0x46c, Size: 0x4] 0x7873e20500
	float CloudShadowExtent;//[Offset: 0x470, Size: 0x4] 0x7873e20580
	float CloudShadowMapResolutionScale;//[Offset: 0x474, Size: 0x4] 0x7873e20600
	float CloudShadowRaySampleCountScale;//[Offset: 0x478, Size: 0x4] 0x7873e20680
	LinearColor CloudScatteredLuminanceScale;//[Offset: 0x47c, Size: 0x10] 0x7873e20700
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x48c, Size: 0x10] 0x7873e20780
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49c, Size: 0x1] 0x7873e20800
	Color ModulatedShadowColor;//[Offset: 0x4a0, Size: 0x4] 0x7873e20880
	float ShadowAmount;//[Offset: 0x4a4, Size: 0x4] 0x7873e20900
	void SetShadowSourceAngleFactor(float NewValue);// 0x10bcd558 0x7873e12540
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x10bcdaa0 0x7873e12620
	void SetShadowCascadeBiasDistribution(float NewValue);// 0x10bcd9f8 0x7873e12700
	void SetShadowAmount(float NewValue);// 0x10bcd4b0 0x7873e127e0
	void SetOcclusionMaskDarkness(float NewValue);// 0x10bcd8a0 0x7873e128c0
	void SetOcclusionDepthRange(float NewValue);// 0x10bcd7f8 0x7873e129a0
	void SetLightSourceSoftAngle(float NewValue);// 0x10bcd600 0x7873e12a80
	void SetLightSourceAngle(float NewValue);// 0x10bcd6a8 0x7873e12b60
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x10bcd750 0x7873e12c40
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x10bcd948 0x7873e12d20
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x10bcdd40 0x7873e12e00
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x10bcdde8 0x7873e12ee0
	void SetDynamicShadowCascades(int NewValue);// 0x10bcdc98 0x7873e12fc0
	void SetCascadeTransitionFraction(float NewValue);// 0x10bcdb48 0x7873e130a0
	void SetCascadeDistributionExponent(float NewValue);// 0x10bcdbf0 0x7873e13180
	void SetAtmosphereSunLightIndex(int NewValue);// 0x10bcd358 0x7873e13260
	void SetAtmosphereSunLight(bool bNewValue);// 0x10bcd400 0x7873e13340

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x2e0, Size: 0x4] 0x7873e0f900
	float MaxDrawDistance;//[Offset: 0x2e4, Size: 0x4] 0x7873e0f980
	float MaxDistanceFadeRange;//[Offset: 0x2e8, Size: 0x4] 0x7873e0fa00
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 0x1] 0x7873e0fa80
	int ShadowMapChannel;//[Offset: 0x2f0, Size: 0x4] 0x7873e0fb00
	float MinRoughness;//[Offset: 0x2f8, Size: 0x4] 0x7873e0fb80
	float SpecularScale;//[Offset: 0x2fc, Size: 0x4] 0x7873e0fc00
	float ShadowResolutionScale;//[Offset: 0x300, Size: 0x4] 0x7873e0fc80
	float ShadowBias;//[Offset: 0x304, Size: 0x4] 0x7873e0fd00
	float ShadowSlopeBias;//[Offset: 0x308, Size: 0x4] 0x7873e0fd80
	float ShadowSharpen;//[Offset: 0x30c, Size: 0x4] 0x7873e0fe00
	float ContactShadowLength;//[Offset: 0x310, Size: 0x4] 0x7873e0fe80
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 0x1] 0x7873e0ff00
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 0x1] 0x7873e0ff80
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 0x1] 0x7873e0e780
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x314, Size: 0x1] 0x7873e0e800
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x314, Size: 0x1] 0x7873e0e880
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x314, Size: 0x1] 0x7873e0e900
	LightingChannels LightingChannels;//[Offset: 0x315, Size: 0x1] 0x7873e0e980
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x318, Size: 0x8] 0x7873e0ea00
	Vector LightFunctionScale;//[Offset: 0x320, Size: 0x18] 0x7873e0ea80
	TextureLightProfile* IESTexture;//[Offset: 0x338, Size: 0x8] 0x7873e0eb00
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 0x1] 0x7873e0eb80
	float IESBrightnessScale;//[Offset: 0x344, Size: 0x4] 0x7873e0ec00
	float LightFunctionFadeDistance;//[Offset: 0x348, Size: 0x4] 0x7873e0ec80
	float DisabledBrightness;//[Offset: 0x34c, Size: 0x4] 0x7873e0ed00
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1] 0x7873e0ed80
	float BloomScale;//[Offset: 0x354, Size: 0x4] 0x7873e0ee00
	float BloomThreshold;//[Offset: 0x358, Size: 0x4] 0x7873e0ee80
	float BloomMaxBrightness;//[Offset: 0x35c, Size: 0x4] 0x7873e0ef00
	Color BloomTint;//[Offset: 0x360, Size: 0x4] 0x7873e0ef80
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1] 0x7873e0f000
	float RayStartOffsetDepthScale;//[Offset: 0x368, Size: 0x4] 0x7873e0f080
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x10ce8b30 0x7873e13420
	void SetUseTemperature(bool bNewValue);// 0x10ce88dc 0x7873e13500
	void SetUseIESBrightness(bool bNewValue);// 0x10ce7f88 0x7873e135e0
	void SetTransmission(bool bNewValue);// 0x10ce842c 0x7873e136c0
	void SetTemperature(float NewTemperature);// 0x10ce898c 0x7873e137a0
	void SetSpecularScale(float NewValue);// 0x10ce7ce8 0x7873e13880
	void SetShadowSlopeBias(float NewValue);// 0x10ce7d90 0x7873e13960
	void SetShadowBias(float NewValue);// 0x10ce7e38 0x7873e10080
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x10ce7af0 0x7873e10160
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x10ce878c 0x7873e10240
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x10ce8834 0x7873e10320
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x10ce86e4 0x7873e10400
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x10ce863c 0x7873e104e0
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x10ce8a34 0x7873e105c0
	void SetIntensity(float NewIntensity);// 0x10ce8c80 0x7873e106a0
	void SetIndirectLightingIntensity(float NewIntensity);// 0x10ce8bd8 0x7873e10780
	void SetIESTexture(TextureLightProfile* NewValue);// 0x10ce8038 0x7873e10860
	void SetIESBrightnessScale(float NewValue);// 0x10ce7ee0 0x7873e10940
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x10ce7c38 0x7873e10a20
	void SetEnableLightShaftBloom(bool bNewValue);// 0x10ce837c 0x7873e10b00
	void SetBloomTint(Color NewValue);// 0x10ce80e0 0x7873e10be0
	void SetBloomThreshold(float NewValue);// 0x10ce822c 0x7873e10cc0
	void SetBloomScale(float NewValue);// 0x10ce82d4 0x7873e10da0
	void SetBloomMaxBrightness(float NewValue);// 0x10ce8184 0x7873e10e80
	void SetAffectTranslucentLighting(bool bNewValue);// 0x10ce84dc 0x7873e10f60
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x10ce858c 0x7873e11040

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x2b0, Size: 0x10] 0x7873e0df80
	float Brightness;//[Offset: 0x2c0, Size: 0x4] 0x7873e0e000
	float Intensity;//[Offset: 0x2c4, Size: 0x4] 0x7873e0e080
	Color LightColor;//[Offset: 0x2c8, Size: 0x4] 0x7873e0e100
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 0x1] 0x7873e0e180
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc, Size: 0x1] 0x7873e0e200
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cc, Size: 0x1] 0x7873e0e280
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cc, Size: 0x1] 0x7873e0e300
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cc, Size: 0x1] 0x7873e0e380
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2cc, Size: 0x1] 0x7873e0e400
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2cc, Size: 0x1] 0x7873e0e480
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2cc, Size: 0x1] 0x7873e0e500
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cd, Size: 0x1] 0x7873e0e580
	byte CastRaytracedShadow;//[Offset: 0x2ce, Size: 0x1] 0x7873e0e600
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cf, Size: 0x1] 0x7873e0e680
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cf, Size: 0x1] 0x7873e0e700
	float DeepShadowLayerDistribution;//[Offset: 0x2d0, Size: 0x4] 0x7873e0c680
	float IndirectLightingIntensity;//[Offset: 0x2d4, Size: 0x4] 0x7873e0c700
	float VolumetricScatteringIntensity;//[Offset: 0x2d8, Size: 0x4] 0x7873e0c780
	int SamplesPerPixel;//[Offset: 0x2dc, Size: 0x4] 0x7873e0c800
	void SetSamplesPerPixel(int NewValue);// 0x10ceb1f0 0x7873e11120
	void SetCastVolumetricShadow(bool bNewValue);// 0x10ceb600 0x7873e11200
	void SetCastShadows(bool bNewValue);// 0x10ceb6e8 0x7873e112e0
	void SetCastRaytracedShadows(byte bNewValue);// 0x10ceb298 0x7873e113c0
	void SetCastRaytracedShadow(bool bNewValue);// 0x10ceb340 0x7873e114a0
	void SetCastDeepShadow(bool bNewValue);// 0x10ceb550 0x7873e11580
	void SetAffectReflection(bool bNewValue);// 0x10ceb4a0 0x7873e11660
	void SetAffectGlobalIllumination(bool bNewValue);// 0x10ceb3f0 0x7873e11740
	LinearColor GetLightColor();// 0x10ceb6b0 0x7873e11820

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4] 0x78739db980

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4] 0x78739dba00
	float ShadowExponent;//[Offset: 0x4, Size: 0x4] 0x78739dba80
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78739dbb00

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x2e8, Size: 0x4] 0x7873fb6e80
	float TextureMultiplier;//[Offset: 0x2ec, Size: 0x4] 0x7873fb6f00

--------------------------------
Class: AnimationAttributeIdentifierExtensions.BlueprintFunctionLibrary.Object
	static bool IsValid(out AnimationAttributeIdentifier Identifier);// 0x10b3788c 0x7873daa5e0

--------------------------------
Class: AudioSubsystemCollectionRoot.Object

--------------------------------
Class: AudioPanelWidgetInterface.Interface.Object
	FName GetIconBrushName();// 0xb8f1ab4 0x7873daa420
	FText GetEditorName();// 0xb8f1ab4 0x7873daa500

--------------------------------
Class: EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: DynamicSubsystem.Subsystem.Object

--------------------------------
Class: AutoDestroySubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	Actor*[] ActorsToPoll;//[Offset: 0x40, Size: 0x10] 0x7873db34e0
	void OnActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x10b40c04 0x7873da9d20

--------------------------------
Class: TickableWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: BandwidthTestActor.Actor.Object
	BandwidthTestGenerator BandwidthGenerator;//[Offset: 0x288, Size: 0x20] 0x7873dc8500

--------------------------------
Class: BandwidthTestGenerator
	BandwidthTestItem[] ReplicatedBuffers;//[Offset: 0x0, Size: 0x10] 0x78739b1280

--------------------------------
Class: BandwidthTestItem
	byte[] Kilobyte;//[Offset: 0x0, Size: 0x10] 0x78739b1320

--------------------------------
Class: BlueprintMapLibrary.BlueprintFunctionLibrary.Object
	static void SetMapPropertyByName(Object* Object, FName PropertyName, out const <int,int> Value);// 0x10b5a09c 0x7873dac640
	static void Map_Values(out const <int,int> TargetMap, out int[] Values);// 0x10b59f94 0x7873dac720
	static bool Map_Remove(out const <int,int> TargetMap, out const int Key);// 0x10b59dd8 0x7873dac800
	static int Map_Length(out const <int,int> TargetMap);// 0x10b59d34 0x7873dac8e0
	static void Map_Keys(out const <int,int> TargetMap, out int[] Keys);// 0x10b59c2c 0x7873dac9c0
	static bool Map_IsNotEmpty(out const <int,int> TargetMap);// 0x10b59b84 0x7873da90e0
	static bool Map_IsEmpty(out const <int,int> TargetMap);// 0x10b59adc 0x7873da91c0
	static bool Map_Find(out const <int,int> TargetMap, out const int Key, out int Value);// 0x10b597dc 0x7873da92a0
	static bool Map_Contains(out const <int,int> TargetMap, out const int Key);// 0x10b5961c 0x7873da9380
	static void Map_Clear(out const <int,int> TargetMap);// 0x10b59584 0x7873da9460
	static void Map_Add(out const <int,int> TargetMap, out const int Key, out const int Value);// 0x10b592f4 0x7873da9540

--------------------------------
Class: PlatformGameInstance.GameInstance.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0x1a8, Size: 0x10] 0x78737d2600
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0x1b8, Size: 0x10] 0x78737d2680
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0x1c8, Size: 0x10] 0x78737d2700
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0x1d8, Size: 0x10] 0x78737d2780
	delegate ApplicationWillTerminateDelegate;//[Offset: 0x1e8, Size: 0x10] 0x78737d2800
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x1f8, Size: 0x10] 0x78737d2880
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x208, Size: 0x10] 0x78737d2980
	delegate ApplicationRegisteredForRemoteNotificationsDelegate;//[Offset: 0x218, Size: 0x10] 0x78737d2a80
	delegate ApplicationRegisteredForUserNotificationsDelegate;//[Offset: 0x228, Size: 0x10] 0x78737d2b80
	delegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;//[Offset: 0x238, Size: 0x10] 0x78737d2c80
	delegate ApplicationReceivedRemoteNotificationDelegate;//[Offset: 0x248, Size: 0x10] 0x78737d2e00
	delegate ApplicationReceivedLocalNotificationDelegate;//[Offset: 0x258, Size: 0x10] 0x78737d3080
	delegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;//[Offset: 0x268, Size: 0x10] 0x78737d3180

--------------------------------
Class: BoundsCopyComponent.ActorComponent.Object
	Actor* BoundsSourceActor;//[Offset: 0xb0, Size: 0x28] 0x7873df1500
	bool bUseCollidingComponentsForSourceBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x7873df1580
	bool bKeepOwnBoundsScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x7873df1600
	bool bUseCollidingComponentsForOwnBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1] 0x7873df1680
	Transform PostTransform;//[Offset: 0xe0, Size: 0x60] 0x7873df1700
	bool bCopyXBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1] 0x7873df1780
	bool bCopyYBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1] 0x7873df1800
	bool bCopyZBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142, Size: 0x1] 0x7873df1880

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x288, Size: 0x8] 0x7873df3000

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x2b0, Size: 0x8] 0x7873df2a80
	enum ReflectionSourceType;//[Offset: 0x2b8, Size: 0x1] 0x7873db4020
	enum MobileReflectionCompression;//[Offset: 0x2b9, Size: 0x1] 0x7873db40c0
	TextureCube* Cubemap;//[Offset: 0x2c0, Size: 0x8] 0x7873df2c00
	float SourceCubemapAngle;//[Offset: 0x2c8, Size: 0x4] 0x7873df2c80
	float Brightness;//[Offset: 0x2cc, Size: 0x4] 0x7873df2d00
	bool bModifyMaxValueRGBM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1] 0x7873df2d80
	float MaxValueRGBM;//[Offset: 0x2d4, Size: 0x4] 0x7873df2e00
	Vector CaptureOffset;//[Offset: 0x2d8, Size: 0x18] 0x7873df2e80
	Guid MapBuildDataId;//[Offset: 0x2f0, Size: 0x10] 0x7873df2f00
	TextureCube* CachedEncodedHDRCubemap;//[Offset: 0x300, Size: 0x8] 0x7873df2f80

--------------------------------
Class: BoxReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float BoxTransitionDistance;//[Offset: 0x328, Size: 0x4] 0x7873df2900
	BoxComponent* PreviewInfluenceBox;//[Offset: 0x330, Size: 0x8] 0x7873df2980
	BoxComponent* PreviewCaptureBox;//[Offset: 0x338, Size: 0x8] 0x7873df2a00

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x560, Size: 0x18] 0x7873df3080
	float LineThickness;//[Offset: 0x578, Size: 0x4] 0x7873df3100
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x10b6d508 0x7873de0cc0
	Vector GetUnscaledBoxExtent();// 0x10b6d4b0 0x7873de0da0
	Vector GetScaledBoxExtent();// 0x10b6d4d4 0x7873de0e80

--------------------------------
Class: CachedAnimDataLibrary.BlueprintFunctionLibrary.Object
	static bool StateMachine_IsStateRelevant(AnimInstance* InAnimInstance, out const CachedAnimStateData CachedAnimStateData);// 0x10b70b84 0x7873de0a20
	static float StateMachine_GetLocalWeight(AnimInstance* InAnimInstance, out const CachedAnimStateData CachedAnimStateData);// 0x10b70a84 0x7873de0b00
	static float StateMachine_GetGlobalWeight(AnimInstance* InAnimInstance, out const CachedAnimStateData CachedAnimStateData);// 0x10b70984 0x7873de0be0

--------------------------------
Class: CachedAnimStateData
	FName StateMachineName;//[Offset: 0x0, Size: 0x8] 0x78739c2a00
	FName StateName;//[Offset: 0x8, Size: 0x8] 0x78739c2a80

--------------------------------
Class: CameraBlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: CameraLensEffectInterfaceClassSupportLibrary.BlueprintFunctionLibrary.Object
	static void SetInterfaceClass(class Actor Class, out CameraLensInterfaceClassSupport Var, out enum result);// 0x10b73be0 0x7873de0240
	static void IsInterfaceValid(out const interface classNone CameraLens, out enum result);// 0x10b73d28 0x7873de0320
	static void IsInterfaceClassValid(out const CameraLensInterfaceClassSupport CameraLens, out enum result);// 0x10b73e24 0x7873de0400
	static class Actor GetInterfaceClass(out const CameraLensInterfaceClassSupport CameraLens);// 0x10b73f20 0x7873de04e0

--------------------------------
Class: CameraLensInterfaceClassSupport
	class Actor* Class;//[Offset: 0x0, Size: 0x8] 0x78739b09c0

--------------------------------
Class: DeviceProfileManager.Object
	DeviceProfile*[] Profiles;//[Offset: 0x28, Size: 0x10] 0x7873db8a80
	DeviceProfile*[] BackupProfiles;//[Offset: 0x38, Size: 0x10] 0x7873db8b20

--------------------------------
Class: DeviceProfile.TextureLODSettings.Object
	FString DeviceType;//[Offset: 0x38, Size: 0x10] 0x7873e0b880
	FString BaseProfileName;//[Offset: 0x48, Size: 0x10] 0x7873e0b900
	DeviceProfile* Parent;//[Offset: 0x58, Size: 0x8] 0x7873e0b980
	FString[] CVars;//[Offset: 0x88, Size: 0x10] 0x7873db8c60
	DPMatchingRulestruct[] MatchingRules;//[Offset: 0x98, Size: 0x10] 0x7873db8d00

--------------------------------
Class: TextureLODSettings.Object
	TextureLODGroup[] TextureLODGroups;//[Offset: 0x28, Size: 0x10] 0x7873db8da0

--------------------------------
Class: TextureLODGroup
	byte Group;//[Offset: 0x0, Size: 0x1] 0x7873a41f00
	int LODBias;//[Offset: 0x8, Size: 0x4] 0x7873a41f80
	int LODBias_Smaller;//[Offset: 0xc, Size: 0x4] 0x7873a42000
	int LODBias_Smallest;//[Offset: 0x10, Size: 0x4] 0x7873a42080
	int NumStreamedMips;//[Offset: 0x18, Size: 0x4] 0x7873a42100
	byte MipGenSettings;//[Offset: 0x1c, Size: 0x1] 0x7873a40080
	int MinLODSize;//[Offset: 0x20, Size: 0x4] 0x7873a40100
	int MaxLODSize;//[Offset: 0x24, Size: 0x4] 0x7873a40180
	int MaxLODSize_Smaller;//[Offset: 0x28, Size: 0x4] 0x7873a40200
	int MaxLODSize_Smallest;//[Offset: 0x2c, Size: 0x4] 0x7873a40280
	int MaxLODSize_VT;//[Offset: 0x30, Size: 0x4] 0x7873a40300
	int OptionalLODBias;//[Offset: 0x34, Size: 0x4] 0x7873a40380
	int OptionalMaxLODSize;//[Offset: 0x38, Size: 0x4] 0x7873a40400
	FName MinMagFilter;//[Offset: 0x3c, Size: 0x8] 0x7873a40480
	FName MipFilter;//[Offset: 0x44, Size: 0x8] 0x7873a40500
	enum MipLoadOptions;//[Offset: 0x4c, Size: 0x1] 0x78739b7fe0
	bool HighPriorityLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x7873a40600
	bool DuplicateNonOptionalMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1] 0x7873a40680
	float Downscale;//[Offset: 0x50, Size: 0x4] 0x7873a40700
	enum DownscaleOptions;//[Offset: 0x54, Size: 0x1] 0x78739b8080
	int VirtualTextureTileCountBias;//[Offset: 0x58, Size: 0x4] 0x7873a40800
	int VirtualTextureTileSizeBias;//[Offset: 0x5c, Size: 0x4] 0x7873a40880
	byte LossyCompressionAmount;//[Offset: 0x60, Size: 0x1] 0x7873a40900

--------------------------------
Class: DPMatchingRulestruct.DPMatchingRulestructBase
	DPMatchingRulestructE[] OnTrue;//[Offset: 0x48, Size: 0x10] 0x78739b2040
	DPMatchingRulestructE[] OnFalse;//[Offset: 0x58, Size: 0x10] 0x78739b20e0

--------------------------------
Class: DPMatchingRulestructBase
	FString RuleName;//[Offset: 0x8, Size: 0x10] 0x78739d8080
	DPMatchingIfCondition[] IfConditions;//[Offset: 0x18, Size: 0x10] 0x78739b27c0
	FString AppendFragments;//[Offset: 0x28, Size: 0x10] 0x78739d8180
	FString SetUserVar;//[Offset: 0x38, Size: 0x10] 0x78739d8200

--------------------------------
Class: DPMatchingRulestructE.DPMatchingRulestructBase
	DPMatchingRulestructD[] OnTrue;//[Offset: 0x48, Size: 0x10] 0x78739b2180
	DPMatchingRulestructD[] OnFalse;//[Offset: 0x58, Size: 0x10] 0x78739b2220

--------------------------------
Class: DPMatchingRulestructD.DPMatchingRulestructBase
	DPMatchingRulestructC[] OnTrue;//[Offset: 0x48, Size: 0x10] 0x78739b22c0
	DPMatchingRulestructC[] OnFalse;//[Offset: 0x58, Size: 0x10] 0x78739b2360

--------------------------------
Class: DPMatchingRulestructC.DPMatchingRulestructBase
	DPMatchingRulestructB[] OnTrue;//[Offset: 0x48, Size: 0x10] 0x78739b2400
	DPMatchingRulestructB[] OnFalse;//[Offset: 0x58, Size: 0x10] 0x78739b24a0

--------------------------------
Class: DPMatchingRulestructB.DPMatchingRulestructBase
	DPMatchingRulestructA[] OnTrue;//[Offset: 0x48, Size: 0x10] 0x78739b2540
	DPMatchingRulestructA[] OnFalse;//[Offset: 0x58, Size: 0x10] 0x78739b25e0

--------------------------------
Class: DPMatchingRulestructA.DPMatchingRulestructBase
	DPMatchingRulestructBase[] OnTrue;//[Offset: 0x48, Size: 0x10] 0x78739b2680
	DPMatchingRulestructBase[] OnFalse;//[Offset: 0x58, Size: 0x10] 0x78739b2720

--------------------------------
Class: DPMatchingIfCondition
	FName Operator;//[Offset: 0x0, Size: 0x8] 0x78739d8280
	FString Arg1;//[Offset: 0x8, Size: 0x10] 0x78739d8300
	FString Arg2;//[Offset: 0x18, Size: 0x10] 0x78739d8380

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0x210, Size: 0x4] 0x7873df8380

--------------------------------
Class: Commandlet.Object
	FString HelpDescription;//[Offset: 0x28, Size: 0x10] 0x7873b61880
	FString HelpUsage;//[Offset: 0x38, Size: 0x10] 0x7873b61900
	FString HelpWebLink;//[Offset: 0x48, Size: 0x10] 0x7873b61980
	FString[] HelpParamNames;//[Offset: 0x58, Size: 0x10] 0x7873af6d20
	FString[] HelpParamDescriptions;//[Offset: 0x68, Size: 0x10] 0x7873af6dc0
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x7873b61b00
	bool IsClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x7873b61b80
	bool IsEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x7873b61c00
	bool LogToConsole;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78, Size: 0x1] 0x7873b61c80
	bool ShowErrorCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 0x1] 0x7873b61d00
	bool ShowProgress;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 0x1] 0x7873b61d80

--------------------------------
Class: ComponentElementCounterInterface.Object

--------------------------------
Class: ComponentElementSelectionInterface.Object

--------------------------------
Class: CompositeDataTable.DataTable.Object
	DataTable*[] ParentTables;//[Offset: 0xb0, Size: 0x10] 0x7873db7ae0
	DataTable*[] OldParentTables;//[Offset: 0xc0, Size: 0x10] 0x7873db7b80

--------------------------------
Class: ControlChannel.Channel.Object

--------------------------------
Class: StreamingSettings.DeveloperSettings.Object
	bool AsyncLoadingThreadEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7873e00100
	bool WarnIfTimeLimitExceeded;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7873e00180
	float TimeLimitExceededMultiplier;//[Offset: 0x3c, Size: 0x4] 0x7873e00200
	float TimeLimitExceededMinTime;//[Offset: 0x40, Size: 0x4] 0x7873e00280
	int MinBulkDataSizeForAsyncLoading;//[Offset: 0x44, Size: 0x4] 0x7873e00300
	bool UseBackgroundLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7873e00380
	bool AsyncLoadingUseFullTimeLimit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x7873e00400
	float AsyncLoadingTimeLimit;//[Offset: 0x4c, Size: 0x4] 0x7873e00480
	float PriorityAsyncLoadingExtraTime;//[Offset: 0x50, Size: 0x4] 0x7873e00500
	float LevelStreamingActorsUpdateTimeLimit;//[Offset: 0x54, Size: 0x4] 0x7873e00580
	float PriorityLevelStreamingActorsUpdateExtraTime;//[Offset: 0x58, Size: 0x4] 0x7873e00600
	int LevelStreamingComponentsRegistrationGranularity;//[Offset: 0x5c, Size: 0x4] 0x7873e00680
	int LevelStreamingAddPrimitiveGranularity;//[Offset: 0x60, Size: 0x4] 0x7873e00700
	float LevelStreamingUnregisterComponentsTimeLimit;//[Offset: 0x64, Size: 0x4] 0x7873e00780
	int LevelStreamingComponentsUnregistrationGranularity;//[Offset: 0x68, Size: 0x4] 0x7873e00800
	bool FlushStreamingOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x7873e00880
	bool EventDrivenLoaderEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1] 0x7873e00900

--------------------------------
Class: CurveLinearColorAtlas.Texture2D.Texture.StreamableRenderAsset.Object
	uint32 TextureSize;//[Offset: 0x2e8, Size: 0x4] 0x7873e02380
	bool bSquareResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 0x1] 0x7873e02400
	uint32 TextureHeight;//[Offset: 0x2f0, Size: 0x4] 0x7873e02480
	CurveLinearColor*[] GradientCurves;//[Offset: 0x2f8, Size: 0x10] 0x7873db7860
	bool GetCurvePosition(CurveLinearColor* InCurve, out float Position);// 0x10bae56c 0x7873de9460

--------------------------------
Class: DataDrivenCVarEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	delegate OnDataDrivenCVarDelegate;//[Offset: 0x30, Size: 0x10] 0x788ab7dd80

--------------------------------
Class: DataLayerSubsystem.WorldSubsystem.Subsystem.Object
	delegate OnDataLayerRuntimeStateChanged;//[Offset: 0x30, Size: 0x10] 0x7873e04580
	void SetDataLayerStateByLabel(out const FName InDataLayerLabel, enum InState);// 0x10bb6dfc 0x7873deb3e0
	void SetDataLayerState(out const ActorDataLayer InDataLayer, enum InState);// 0x10bb6ef8 0x7873deb4c0
	void SetDataLayerRuntimeStateByLabel(out const FName InDataLayerLabel, enum InState, bool bInIsRecursive);// 0x10bb72e4 0x7873deb5a0
	void SetDataLayerRuntimeState(out const ActorDataLayer InDataLayer, enum InState, bool bInIsRecursive);// 0x10bb7430 0x7873deb680
	<FName> GetLoadedDataLayerNames();// 0x10bb6b5c 0x7873deb760
	enum GetDataLayerStateByLabel(out const FName InDataLayerLabel);// 0x10bb6c84 0x7873deb840
	enum GetDataLayerState(out const ActorDataLayer InDataLayer);// 0x10bb6d40 0x7873deb920
	enum GetDataLayerRuntimeStateByLabel(out const FName InDataLayerLabel);// 0x10bb716c 0x7873deba00
	enum GetDataLayerRuntimeState(out const ActorDataLayer InDataLayer);// 0x10bb7228 0x7873debae0
	DataLayer* GetDataLayerFromName(FName InDataLayerName);// 0x10bb757c 0x7873debbc0
	DataLayer* GetDataLayerFromLabel(FName InDataLayerLabel);// 0x10bb762c 0x7873debca0
	enum GetDataLayerEffectiveRuntimeStateByLabel(out const FName InDataLayerLabel);// 0x10bb6ff4 0x7873debd80
	enum GetDataLayerEffectiveRuntimeState(out const ActorDataLayer InDataLayer);// 0x10bb70b0 0x7873debe60
	DataLayer* GetDataLayer(out const ActorDataLayer InDataLayer);// 0x10bb76dc 0x7873debf40
	<FName> GetActiveDataLayerNames();// 0x10bb6bf0 0x7873dec020

--------------------------------
Class: DebugCameraControllerSettings.DeveloperSettings.Object
	DebugCameraControllerSettingsViewModeIndex[] CycleViewModes;//[Offset: 0x38, Size: 0x10] 0x7873db6b40

--------------------------------
Class: DebugCameraControllerSettingsViewModeIndex
	byte ViewModeIndex;//[Offset: 0x8, Size: 0x1] 0x78739d6e80

--------------------------------
Class: DebugDrawComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x2b0, Size: 0x8] 0x7873e0a600
	int SortOrder;//[Offset: 0x2b8, Size: 0x4] 0x7873e0a680
	float FadeScreenSize;//[Offset: 0x2bc, Size: 0x4] 0x7873e0a700
	float FadeStartDelay;//[Offset: 0x2c0, Size: 0x4] 0x7873e0a780
	float FadeDuration;//[Offset: 0x2c4, Size: 0x4] 0x7873e0a800
	float FadeInDuration;//[Offset: 0x2c8, Size: 0x4] 0x7873e0a880
	float FadeInStartDelay;//[Offset: 0x2cc, Size: 0x4] 0x7873e0a900
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1] 0x7873e0a980
	Vector DecalSize;//[Offset: 0x2d8, Size: 0x18] 0x7873e0aa00
	void SetSortOrder(int Value);// 0x10bc100c 0x7873def2e0
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x10bc10b4 0x7873def3c0
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x10bc124c 0x7873def4a0
	void SetFadeIn(float StartDelay, float Duaration);// 0x10bc115c 0x7873def580
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x10bc0f64 0x7873def660
	float GetFadeStartDelay();// 0x10bc142c 0x7873def740
	float GetFadeInStartDelay();// 0x10bc13c4 0x7873def820
	float GetFadeInDuration();// 0x10bc1390 0x7873def900
	float GetFadeDuration();// 0x10bc13f8 0x7873def9e0
	MaterialInterface* GetDecalMaterial();// 0x10bc0f30 0x7873defac0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x10bc0ef4 0x7873defba0

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x160, Size: 0x4] 0x7873e2db80
	float Acceleration;//[Offset: 0x164, Size: 0x4] 0x7873e2dc00
	float Deceleration;//[Offset: 0x168, Size: 0x4] 0x7873e2dc80
	float TurningBoost;//[Offset: 0x16c, Size: 0x4] 0x7873e2dd00
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1] 0x7873e2dd80

--------------------------------
Class: DemoPendingNetGame.PendingNetGame.Object

--------------------------------
Class: PendingNetGame.Object
	NetDriver* NetDriver;//[Offset: 0x30, Size: 0x8] 0x7873e0bb80
	DemoNetDriver* DemoNetDriver;//[Offset: 0x38, Size: 0x8] 0x7873e0bc00

--------------------------------
Class: DialogueWave.Object
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7873e0d380
	bool bOverride_SubtitleOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7873e0d400
	FString SpokenText;//[Offset: 0x30, Size: 0x10] 0x7873e0d480
	FString SubtitleOverride;//[Offset: 0x40, Size: 0x10] 0x7873e0d500
	DialogueContextMapping[] ContextMappings;//[Offset: 0x50, Size: 0x10] 0x7873db89e0
	Guid LocalizationGUID;//[Offset: 0x60, Size: 0x10] 0x7873e0d600

--------------------------------
Class: DialogueContextMapping
	DialogueContext Context;//[Offset: 0x0, Size: 0x18] 0x78739d7680
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8] 0x78739d7700
	FString LocalizationKeyFormat;//[Offset: 0x20, Size: 0x10] 0x78739d7780
	DialogueSoundWaveProxy* Proxy;//[Offset: 0x30, Size: 0x8] 0x78739d7800

--------------------------------
Class: DialogueContext
	DialogueVoice* Speaker;//[Offset: 0x0, Size: 0x8] 0x78739d7980
	DialogueVoice*[] Targets;//[Offset: 0x8, Size: 0x10] 0x78739b1fa0

--------------------------------
Class: DialogueVoice.Object
	byte Gender;//[Offset: 0x28, Size: 0x1] 0x7873e0d680
	byte Plurality;//[Offset: 0x29, Size: 0x1] 0x7873e0b600
	Guid LocalizationGUID;//[Offset: 0x2c, Size: 0x10] 0x7873e0b680

--------------------------------
Class: DialogueSoundWaveProxy.SoundBase.Object

--------------------------------
Class: DistributionFloatConstant.DistributionFloat.Distribution.Object
	float Constant;//[Offset: 0x34, Size: 0x4] 0x7873e21500

--------------------------------
Class: DistributionFloatParticleParameter.DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object

--------------------------------
Class: DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object
	FName ParameterName;//[Offset: 0x38, Size: 0x8] 0x7873e21180
	float MinInput;//[Offset: 0x40, Size: 0x4] 0x7873e21200
	float MaxInput;//[Offset: 0x44, Size: 0x4] 0x7873e21280
	float MinOutput;//[Offset: 0x48, Size: 0x4] 0x7873e21300
	float MaxOutput;//[Offset: 0x4c, Size: 0x4] 0x7873e21380
	byte ParamMode;//[Offset: 0x50, Size: 0x1] 0x7873e21400

--------------------------------
Class: DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object
	FName ParameterName;//[Offset: 0x54, Size: 0x8] 0x7873e22980
	Vector MinInput;//[Offset: 0x60, Size: 0x18] 0x7873e22a00
	Vector MaxInput;//[Offset: 0x78, Size: 0x18] 0x7873e22a80
	Vector MinOutput;//[Offset: 0x90, Size: 0x18] 0x7873e22b00
	Vector MaxOutput;//[Offset: 0xa8, Size: 0x18] 0x7873e22b80
	byte ParamModes;//[Offset: 0xc0, Size: 0x1] 0x7873e22c00

--------------------------------
Class: DistributionVectorConstant.DistributionVector.Distribution.Object
	Vector Constant;//[Offset: 0x38, Size: 0x18] 0x7873e22e00
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7873e22e80
	byte LockedAxes;//[Offset: 0x51, Size: 0x1] 0x7873e22f00

--------------------------------
Class: DistributionVectorUniformCurve.DistributionVector.Distribution.Object
	InterpCurveTwoVectors ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x7873e22380
	bool bLockAxes1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7873e22400
	bool bLockAxes2;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x7873e22480
	byte LockedAxes;//[Offset: 0x51, Size: 0x1] 0x7873e22500
	byte MirrorFlags;//[Offset: 0x53, Size: 0x1] 0x7873e22580
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 0x1] 0x7873e22600

--------------------------------
Class: InterpCurveTwoVectors
	InterpCurvePointTwoVectors[] Points;//[Offset: 0x0, Size: 0x10] 0x788a496b40
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x788a4db800
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x788a4db780

--------------------------------
Class: InterpCurvePointTwoVectors
	float InVal;//[Offset: 0x0, Size: 0x4] 0x788a4d8d80
	TwoVectors OutVal;//[Offset: 0x8, Size: 0x30] 0x788a4d8d00
	TwoVectors ArriveTangent;//[Offset: 0x38, Size: 0x30] 0x788a4d8c80
	TwoVectors LeaveTangent;//[Offset: 0x68, Size: 0x30] 0x788a4dae80
	byte InterpMode;//[Offset: 0x98, Size: 0x1] 0x788a4dae00

--------------------------------
Class: TwoVectors
	Vector v1;//[Offset: 0x0, Size: 0x18] 0x788a4daf00
	Vector v2;//[Offset: 0x18, Size: 0x18] 0x788a4d3900

--------------------------------
Class: DPICustomScalingRule.Object

--------------------------------
Class: EdGraph.Object
	class EdGraphSchema* Schema;//[Offset: 0x28, Size: 0x8] 0x7873db88a0
	EdGraphNode*[] Nodes;//[Offset: 0x30, Size: 0x10] 0x7873db8940
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x7873e23c80
	bool bAllowDeletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1] 0x7873e23d00
	bool bAllowRenaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1] 0x7873e23d80

--------------------------------
Class: EdGraphSchema.Object

--------------------------------
Class: EdGraphNode.Object
	EdGraphPin_Deprecated*[] DeprecatedPins;//[Offset: 0x38, Size: 0x10] 0x7873db8760
	int NodePosX;//[Offset: 0x48, Size: 0x4] 0x7873e23380
	int NodePosY;//[Offset: 0x4c, Size: 0x4] 0x7873e23400
	int NodeWidth;//[Offset: 0x50, Size: 0x4] 0x7873e23480
	int NodeHeight;//[Offset: 0x54, Size: 0x4] 0x7873e23500
	byte AdvancedPinDisplay;//[Offset: 0x58, Size: 0x1] 0x7873e23580
	enum EnabledState;//[Offset: 0x59, Size: 0x1] 0x7873db8800
	bool bDisplayAsDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x7873e23680
	bool bUserSetEnabledState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x7873e23700
	bool bHasCompilerMessage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1] 0x7873e23780
	FString NodeComment;//[Offset: 0x60, Size: 0x10] 0x7873e23800
	int ErrorType;//[Offset: 0x70, Size: 0x4] 0x7873e23880
	FString ErrorMsg;//[Offset: 0x78, Size: 0x10] 0x7873e23900
	Guid NodeGuid;//[Offset: 0x88, Size: 0x10] 0x7873e23980

--------------------------------
Class: EdGraphPin_Deprecated.Object
	FString PinName;//[Offset: 0x28, Size: 0x10] 0x7873e24d00
	FString PinToolTip;//[Offset: 0x38, Size: 0x10] 0x7873e24d80
	byte Direction;//[Offset: 0x48, Size: 0x1] 0x7873e24e00
	EdGraphPinType PinType;//[Offset: 0x50, Size: 0x58] 0x7873e24e80
	FString DefaultValue;//[Offset: 0xa8, Size: 0x10] 0x7873e24f00
	FString AutogeneratedDefaultValue;//[Offset: 0xb8, Size: 0x10] 0x7873e24f80
	Object* DefaultObject;//[Offset: 0xc8, Size: 0x8] 0x7873e25000
	FText DefaultTextValue;//[Offset: 0xd0, Size: 0x18] 0x7873e25080
	EdGraphPin_Deprecated*[] LinkedTo;//[Offset: 0xe8, Size: 0x10] 0x7873db8620
	EdGraphPin_Deprecated*[] SubPins;//[Offset: 0xf8, Size: 0x10] 0x7873db86c0
	EdGraphPin_Deprecated* ParentPin;//[Offset: 0x108, Size: 0x8] 0x7873e25200
	EdGraphPin_Deprecated* ReferencePassThroughConnection;//[Offset: 0x110, Size: 0x8] 0x7873e25280

--------------------------------
Class: EdGraphPinType
	FName PinCategory;//[Offset: 0x0, Size: 0x8] 0x78739c1880
	FName PinSubCategory;//[Offset: 0x8, Size: 0x8] 0x78739c1900
	Object* PinSubCategoryObject;//[Offset: 0x10, Size: 0x8] 0x78739c1980
	SimpleMemberReference PinSubCategoryMemberReference;//[Offset: 0x18, Size: 0x20] 0x78739c1a00
	EdGraphTerminalType PinValueType;//[Offset: 0x38, Size: 0x1c] 0x78739c1d80
	enum ContainerType;//[Offset: 0x54, Size: 0x1] 0x78739b0e20
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1] 0x78739c1e80
	bool bIsReference;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1] 0x78739c1f00
	bool bIsConst;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1] 0x78739c1f80
	bool bIsWeakPointer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 0x1] 0x78739c2000
	bool bIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 0x1] 0x78739c2080
	bool bSerializeAsSinglePrecisionFloat;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x55, Size: 0x1] 0x78739c2100

--------------------------------
Class: EdGraphTerminalType
	FName TerminalCategory;//[Offset: 0x0, Size: 0x8] 0x78739c1a80
	FName TerminalSubCategory;//[Offset: 0x8, Size: 0x8] 0x78739c1b00
	Object* TerminalSubCategoryObject;//[Offset: 0x10, Size: 0x8] 0x78739c1b80
	bool bTerminalIsConst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78739c1c00
	bool bTerminalIsWeakPointer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78739c1c80
	bool bTerminalIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1] 0x78739c1d00

--------------------------------
Class: EdGraphNode_Documentation.EdGraphNode.Object
	FString Link;//[Offset: 0x98, Size: 0x10] 0x7873e23200
	FString Excerpt;//[Offset: 0xa8, Size: 0x10] 0x7873e23280

--------------------------------
Class: ViewModeUtils.Object

--------------------------------
Class: EngineElementsLibrary.BlueprintFunctionLibrary.Object

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x288, Size: 0x8] 0x7873e2bb00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1] 0x7873e2bb80
	void OnRep_bEnabled();// 0x10bfc910 0x7873e15020

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x2b0, Size: 0x4] 0x7873e2e580
	float FogHeightFalloff;//[Offset: 0x2b4, Size: 0x4] 0x7873e2e600
	ExponentialHeightFogData SecondFogData;//[Offset: 0x2b8, Size: 0xc] 0x7873e2e680
	LinearColor FogInscatteringColor;//[Offset: 0x2c4, Size: 0x10] 0x7873e2e700
	LinearColor FogInscatteringLuminance;//[Offset: 0x2d4, Size: 0x10] 0x7873e2c680
	TextureCube* InscatteringColorCubemap;//[Offset: 0x2e8, Size: 0x8] 0x7873e2c700
	float InscatteringColorCubemapAngle;//[Offset: 0x2f0, Size: 0x4] 0x7873e2c780
	LinearColor InscatteringTextureTint;//[Offset: 0x2f4, Size: 0x10] 0x7873e2c800
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x304, Size: 0x4] 0x7873e2c880
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x308, Size: 0x4] 0x7873e2c900
	float DirectionalInscatteringExponent;//[Offset: 0x30c, Size: 0x4] 0x7873e2c980
	float DirectionalInscatteringStartDistance;//[Offset: 0x310, Size: 0x4] 0x7873e2ca00
	LinearColor DirectionalInscatteringColor;//[Offset: 0x314, Size: 0x10] 0x7873e2ca80
	LinearColor DirectionalInscatteringLuminance;//[Offset: 0x324, Size: 0x10] 0x7873e2cb00
	float FogMaxOpacity;//[Offset: 0x334, Size: 0x4] 0x7873e2cb80
	float StartDistance;//[Offset: 0x338, Size: 0x4] 0x7873e2cc00
	float FogCutoffDistance;//[Offset: 0x33c, Size: 0x4] 0x7873e2cc80
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1] 0x7873e2cd00
	float VolumetricFogScatteringDistribution;//[Offset: 0x344, Size: 0x4] 0x7873e2cd80
	Color VolumetricFogAlbedo;//[Offset: 0x348, Size: 0x4] 0x7873e2ce00
	LinearColor VolumetricFogEmissive;//[Offset: 0x34c, Size: 0x10] 0x7873e2ce80
	float VolumetricFogExtinctionScale;//[Offset: 0x35c, Size: 0x4] 0x7873e2cf00
	float VolumetricFogDistance;//[Offset: 0x360, Size: 0x4] 0x7873e2cf80
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x364, Size: 0x4] 0x7873e2d000
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1] 0x7873e2d080
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x10bfd32c 0x7873e13ea0
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x10bfd284 0x7873e13f80
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x10bfd138 0x7873e14060
	void SetVolumetricFogDistance(float NewValue);// 0x10bfd090 0x7873e14140
	void SetVolumetricFogAlbedo(Color NewValue);// 0x10bfd1e0 0x7873e14220
	void SetVolumetricFog(bool bNewValue);// 0x10bfd3d4 0x7873e14300
	void SetStartDistance(float Value);// 0x10bfd52c 0x7873e143e0
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x10bfd9c4 0x7873e144c0
	void SetInscatteringTextureTint(LinearColor Value);// 0x10bfd91c 0x7873e145a0
	void SetInscatteringColorCubemapAngle(float Value);// 0x10bfdb14 0x7873e14680
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x10bfdbbc 0x7873e14760
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x10bfda6c 0x7873e14840
	void SetFogMaxOpacity(float Value);// 0x10bfd5d4 0x7873e14920
	void SetFogInscatteringColor(LinearColor Value);// 0x10bfdc64 0x7873e14a00
	void SetFogHeightFalloff(float Value);// 0x10bfd67c 0x7873e14ae0
	void SetFogDensity(float Value);// 0x10bfdd0c 0x7873e14bc0
	void SetFogCutoffDistance(float Value);// 0x10bfd484 0x7873e14ca0
	void SetDirectionalInscatteringStartDistance(float Value);// 0x10bfd7cc 0x7873e14d80
	void SetDirectionalInscatteringExponent(float Value);// 0x10bfd874 0x7873e14e60
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x10bfd724 0x7873e14f40

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4] 0x78739e0b80
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4] 0x78739e0c00
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4] 0x78739e0c80

--------------------------------
Class: Exporter.Object
	class Object* SupportedClass;//[Offset: 0x28, Size: 0x8] 0x7873db98e0
	Object* ExportRootScope;//[Offset: 0x30, Size: 0x8] 0x7873e2de00
	FString[] FormatExtension;//[Offset: 0x38, Size: 0x10] 0x7873db9980
	FString[] FormatDescription;//[Offset: 0x48, Size: 0x10] 0x7873db9a20
	int PreferredFormatIndex;//[Offset: 0x58, Size: 0x4] 0x7873e2df80
	int TextIndent;//[Offset: 0x5c, Size: 0x4] 0x7873e2e000
	bool bText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7873e2e080
	bool bSelectedOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x7873e2e100
	bool bForceFileOperations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x7873e2e180
	AssetExportTask* ExportTask;//[Offset: 0x68, Size: 0x8] 0x7873e2e200
	bool ScriptRunAssetExportTask(AssetExportTask* Task);// 0xb8f1ab4 0x7873e13c00
	static bool RunAssetExportTasks(out const AssetExportTask*[] ExportTasks);// 0x10bfe748 0x7873e13ce0
	static bool RunAssetExportTask(AssetExportTask* Task);// 0x10bfe80c 0x7873e13dc0

--------------------------------
Class: AssetExportTask.Object
	Object* Object;//[Offset: 0x28, Size: 0x8] 0x7873dc2880
	Exporter* Exporter;//[Offset: 0x30, Size: 0x8] 0x7873dc2900
	FString Filename;//[Offset: 0x38, Size: 0x10] 0x7873dc2980
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7873dc2a00
	bool bReplaceIdentical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x7873dc2a80
	bool bPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x7873dc2b00
	bool bAutomated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1] 0x7873dc2b80
	bool bUseFileArchive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x7873dc2c00
	bool bWriteEmptyFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x7873dc2c80
	Object*[] IgnoreObjectList;//[Offset: 0x50, Size: 0x10] 0x7873db2180
	Object* Options;//[Offset: 0x60, Size: 0x8] 0x7873dc2d80
	FString[] Errors;//[Offset: 0x68, Size: 0x10] 0x7873db2220

--------------------------------
Class: FontImportOptions.Object
	FontImportOptionsData Data;//[Offset: 0x28, Size: 0xa8] 0x7873e2f200

--------------------------------
Class: GameplayStatics.BlueprintFunctionLibrary.Object
	static void UnRetainAllSoundsInSoundClass(SoundClass* InSoundClass);// 0x10c0f1cc 0x7873e1e6a0
	static void UnloadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0x10c14cbc 0x7873e1adc0
	static void UnloadStreamLevel(const Object* WorldContextObject, FName LevelName, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0x10c14f00 0x7873e1aea0
	static bool SuggestProjectileVelocity_CustomArc(const Object* WorldContextObject, out Vector OutLaunchVelocity, Vector StartPos, Vector EndPos, float OverrideGravityZ, float ArcParam);// 0x10c0b3dc 0x7873e1af80
	static AudioComponent* SpawnSoundAttached(SoundBase* Sound, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0x10c10b60 0x7873e1b060
	static AudioComponent* SpawnSoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0x10c10f8c 0x7873e1b140
	static AudioComponent* SpawnSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0x10c1190c 0x7873e1b220
	static Object* SpawnObject(class Object ObjectClass, Object* Outer);// 0x10c17148 0x7873e1b300
	static ForceFeedbackComponent* SpawnForceFeedbackAttached(ForceFeedbackEffect* ForceFeedbackEffect, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x10c0f54c 0x7873e1b3e0
	static ForceFeedbackComponent* SpawnForceFeedbackAtLocation(const Object* WorldContextObject, ForceFeedbackEffect* ForceFeedbackEffect, Vector Location, Rotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x10c0f930 0x7873e1b4c0
	static ParticleSystemComponent* SpawnEmitterAttached(ParticleSystem* EmitterTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivate);// 0x10c12728 0x7873e1b5a0
	static ParticleSystemComponent* SpawnEmitterAtLocation(const Object* WorldContextObject, ParticleSystem* EmitterTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivateSystem);// 0x10c12a78 0x7873e1b680
	static AudioComponent* SpawnDialogueAttached(DialogueWave* Dialogue, out const DialogueContext Context, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x10c0fc2c 0x7873e1b760
	static AudioComponent* SpawnDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x10c10070 0x7873e1b840
	static AudioComponent* SpawnDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy);// 0x10c106cc 0x7873e1b920
	static DecalComponent* SpawnDecalAttached(MaterialInterface* DecalMaterial, Vector DecalSize, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, float LifeSpan);// 0x10c0e1a0 0x7873e1ba00
	static DecalComponent* SpawnDecalAtLocation(const Object* WorldContextObject, MaterialInterface* DecalMaterial, Vector DecalSize, Vector Location, Rotator Rotation, float LifeSpan);// 0x10c0e45c 0x7873e1bae0
	static void SetWorldOriginLocation(const Object* WorldContextObject, IntVector NewLocation);// 0x10c0b24c 0x7873e1bbc0
	static void SetViewportMouseCaptureMode(const Object* WorldContextObject, const enum MouseCaptureMode);// 0x10c13b8c 0x7873e1bca0
	static void SetSubtitlesEnabled(bool bEnabled);// 0x10c0f4ac 0x7873e1bd80
	static void SetSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);// 0x10c0ef6c 0x7873e1be60
	static void SetSoundClassDistanceScale(const Object* WorldContextObject, SoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec);// 0x10c12158 0x7873e1bf40
	static void SetPlayerControllerID(PlayerController* Player, int ControllerId);// 0x10c15500 0x7873e1c020
	static void SetMaxAudioChannelsScaled(const Object* WorldContextObject, float MaxChannelCountScale);// 0x10c0e724 0x7873e1c100
	static void SetGlobalTimeDilation(const Object* WorldContextObject, float TimeDilation);// 0x10c141f4 0x7873e1c1e0
	static void SetGlobalPitchModulation(const Object* WorldContextObject, float PitchModulation, float TimeSec);// 0x10c122cc 0x7873e1c2c0
	static void SetGlobalListenerFocusParameters(const Object* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);// 0x10c11e70 0x7873e1c3a0
	static bool SetGamePaused(const Object* WorldContextObject, bool bPaused);// 0x10c140f4 0x7873e1c480
	static void SetForceDisableSplitscreen(const Object* WorldContextObject, bool bDisable);// 0x10c13f5c 0x7873e1c560
	static void SetEnableWorldRendering(const Object* WorldContextObject, bool bEnable);// 0x10c13dc4 0x7873e1c640
	static void SetBaseSoundMix(const Object* WorldContextObject, SoundMix* InSoundMix);// 0x10c0f394 0x7873e1c720
	static bool SaveGameToSlot(SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0x10c0cfd4 0x7873e1c800
	static void RemovePlayer(PlayerController* Player, bool bDestroyPawn);// 0x10c1568c 0x7873e1c8e0
	static Vector RebaseZeroOriginOntoLocal(Object* WorldContextObject, Vector WorldLocation);// 0x10c0b064 0x7873e1c9c0
	static Vector RebaseLocalOriginOntoZero(Object* WorldContextObject, Vector WorldLocation);// 0x10c0b158 0x7873e190e0
	static void PushSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0x10c0ed14 0x7873e191c0
	static bool ProjectWorldToScreen(PlayerController* Player, out const Vector WorldPosition, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0x10c0aba8 0x7873e192a0
	static void PrimeSound(SoundBase* InSound);// 0x10c0f2fc 0x7873e19380
	static void PrimeAllSoundsInSoundClass(SoundClass* InSoundClass);// 0x10c0f264 0x7873e19460
	static void PopSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0x10c0ec34 0x7873e19540
	static void PlayWorldCameraShake(const Object* WorldContextObject, class CameraShakeBase Shake, Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);// 0x10c12d30 0x7873e19620
	static void PlaySoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, const Actor* OwningActor, InitialActiveSoundParams* InitialParams);// 0x10c112d8 0x7873e19700
	static void PlaySound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, const Actor* OwningActor, bool bIsUISound);// 0x10c11bc4 0x7873e197e0
	static void PlayDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings);// 0x10c103cc 0x7873e198c0
	static void PlayDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);// 0x10c10944 0x7873e199a0
	static FString ParseOption(FString Options, FString Key);// 0x10c0a5f8 0x7873e19a80
	static void OpenLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bAbsolute, FString Options);// 0x10c146c0 0x7873e19b60
	static void OpenLevel(const Object* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);// 0x10c14940 0x7873e19c40
	static HitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, Vector Location, Vector ImpactPoint, Vector Normal, Vector ImpactNormal, PhysicalMaterial* PhysMat, Actor* HitActor, PrimitiveComponent* HitComponent, FName HitBoneName, FName BoneName, int HitItem, int ElementIndex, int FaceIndex, Vector TraceStart, Vector TraceEnd);// 0x10c0d48c 0x7873e19d20
	static void LoadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0x10c1508c 0x7873e19e00
	static void LoadStreamLevel(const Object* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0x10c15320 0x7873e19ee0
	static SaveGame* LoadGameFromSlot(FString SlotName, const int UserIndex);// 0x10c0cdd0 0x7873e19fc0
	static bool IsSplitscreenForceDisabled(const Object* WorldContextObject);// 0x10c13eb0 0x7873e1a0a0
	static bool IsGamePaused(const Object* WorldContextObject);// 0x10c14048 0x7873e1a180
	static bool HasOption(FString Options, FString InKey);// 0x10c0a4a0 0x7873e1a260
	static bool HasLaunchOption(FString OptionToCheck);// 0x10c0a290 0x7873e1a340
	static int GrassOverlappingSphereCount(const Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x10c0aee0 0x7873e1a420
	static IntVector GetWorldOriginLocation(const Object* WorldContextObject);// 0x10c0b32c 0x7873e1a500
	static float GetWorldDeltaSeconds(const Object* WorldContextObject);// 0x10c0cc24 0x7873e1a5e0
	static void GetViewProjectionMatrix(MinimalViewInfo DesiredView, out Matrix ViewMatrix, out Matrix ProjectionMatrix, out Matrix ViewProjectionMatrix);// 0x10c0a8fc 0x7873e1a6c0
	static enum GetViewportMouseCaptureMode(const Object* WorldContextObject);// 0x10c13c70 0x7873e1a7a0
	static float GetUnpausedTimeSeconds(const Object* WorldContextObject);// 0x10c0cad4 0x7873e1a880
	static float GetTimeSeconds(const Object* WorldContextObject);// 0x10c0cb7c 0x7873e1a960
	static byte GetSurfaceType(out const HitResult Hit);// 0x10c0d37c 0x7873e1aa40
	static LevelStreaming* GetStreamingLevel(const Object* WorldContextObject, FName PackageName);// 0x10c14bcc 0x7873e1ab20
	static float GetRealTimeSeconds(const Object* WorldContextObject);// 0x10c0ca2c 0x7873e1ac00
	static PlayerState* GetPlayerStateFromUniqueNetId(const Object* WorldContextObject, out const UniqueNetIdRepl UniqueId);// 0x10c15ed0 0x7873e1ace0
	static PlayerState* GetPlayerState(const Object* WorldContextObject, int PlayerStateIndex);// 0x10c16038 0x7873e17400
	static Pawn* GetPlayerPawn(const Object* WorldContextObject, int PlayerIndex);// 0x10c15b98 0x7873e174e0
	static int GetPlayerControllerID(PlayerController* Player);// 0x10c155e4 0x7873e175c0
	static PlayerController* GetPlayerControllerFromID(const Object* WorldContextObject, int ControllerId);// 0x10c158bc 0x7873e176a0
	static PlayerController* GetPlayerController(const Object* WorldContextObject, int PlayerIndex);// 0x10c15c8c 0x7873e17780
	static Character* GetPlayerCharacter(const Object* WorldContextObject, int PlayerIndex);// 0x10c15aa4 0x7873e17860
	static PlayerCameraManager* GetPlayerCameraManager(const Object* WorldContextObject, int PlayerIndex);// 0x10c159b0 0x7873e17940
	static FString GetPlatformName();// 0x10c0c738 0x7873e17a20
	static class Object GetObjectClass(const Object* Object);// 0x10c14380 0x7873e17b00
	static int GetNumPlayerStates(const Object* WorldContextObject);// 0x10c1612c 0x7873e17be0
	static int GetNumPlayerControllers(const Object* WorldContextObject);// 0x10c15e28 0x7873e17cc0
	static int GetNumLocalPlayerControllers(const Object* WorldContextObject);// 0x10c15d80 0x7873e17da0
	static int GetMaxAudioChannelCount(const Object* WorldContextObject);// 0x10c0e67c 0x7873e17e80
	static void GetKeyValue(FString Pair, out FString Key, out FString Value);// 0x10c0a790 0x7873e17f60
	static int GetIntOption(FString Options, FString Key, int DefaultValue);// 0x10c0a348 0x7873e18040
	static float GetGlobalTimeDilation(const Object* WorldContextObject);// 0x10c142d8 0x7873e18120
	static GameStateBase* GetGameState(const Object* WorldContextObject);// 0x10c14428 0x7873e18200
	static GameModeBase* GetGameMode(const Object* WorldContextObject);// 0x10c144d0 0x7873e182e0
	static GameInstance* GetGameInstance(const Object* WorldContextObject);// 0x10c161d4 0x7873e183c0
	static bool GetEnableWorldRendering(const Object* WorldContextObject);// 0x10c13d18 0x7873e184a0
	static ReverbEffect* GetCurrentReverbEffect(const Object* WorldContextObject);// 0x10c0e808 0x7873e18580
	static FString GetCurrentLevelName(const Object* WorldContextObject, bool bRemovePrefixString);// 0x10c14578 0x7873e18660
	static bool GetClosestListenerLocation(const Object* WorldContextObject, out const Vector Location, float MaximumRange, const bool bAllowAttenuationOverride, out Vector ListenerPosition);// 0x10c123f8 0x7873e18740
	static float GetAudioTimeSeconds(const Object* WorldContextObject);// 0x10c0c984 0x7873e18820
	static void GetAllActorsWithTag(const Object* WorldContextObject, FName Tag, out Actor*[] OutActors);// 0x10c16568 0x7873e18900
	static void GetAllActorsWithInterface(const Object* WorldContextObject, class Interface Interface, out Actor*[] OutActors);// 0x10c166ac 0x7873e189e0
	static void GetAllActorsOfClassWithTag(const Object* WorldContextObject, class Actor ActorClass, FName Tag, out Actor*[] OutActors);// 0x10c163d8 0x7873e18ac0
	static void GetAllActorsOfClass(const Object* WorldContextObject, class Actor ActorClass, out Actor*[] OutActors);// 0x10c167f0 0x7873e18ba0
	static Actor* GetActorOfClass(const Object* WorldContextObject, class Actor ActorClass);// 0x10c16934 0x7873e18c80
	static void GetActorArrayBounds(out const Actor*[] Actors, bool bOnlyCollidingComponents, out Vector Center, out Vector BoxExtent);// 0x10c16a24 0x7873e18d60
	static Vector GetActorArrayAverageLocation(out const Actor*[] Actors);// 0x10c16bd0 0x7873e18e40
	static void GetAccurateRealTime(out int Seconds, out float PartialSeconds);// 0x10c0c888 0x7873e18f20
	static void FlushLevelStreaming(const Object* WorldContextObject);// 0x10c14b34 0x7873e19000
	static Actor* FinishSpawningActor(Actor* Actor, out const Transform SpawnTransform);// 0x10c16c94 0x7873e15720
	static Actor* FindNearestActor(Vector Origin, out const Actor*[] ActorsToCheck, out float Distance);// 0x10c1627c 0x7873e15800
	static bool FindCollisionUV(out const HitResult Hit, int UVChannel, out Vector2D UV);// 0x10c0d1cc 0x7873e158e0
	static void EnableLiveStreaming(bool Enable);// 0x10c0c7e8 0x7873e159c0
	static bool DoesSaveGameExist(FString SlotName, const int UserIndex);// 0x10c0ced0 0x7873e15aa0
	static bool DeprojectScreenToWorld(PlayerController* Player, out const Vector2D ScreenPosition, out Vector WorldPosition, out Vector WorldDirection);// 0x10c0ad44 0x7873e15b80
	static bool DeleteGameInSlot(FString SlotName, const int UserIndex);// 0x10c0cccc 0x7873e15c60
	static void DeactivateReverbEffect(const Object* WorldContextObject, FName TagName);// 0x10c0e8b0 0x7873e15d40
	static AudioComponent* CreateSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0x10c11654 0x7873e15e20
	static SaveGame* CreateSaveGameObject(class SaveGame SaveGameClass);// 0x10c0d124 0x7873e15f00
	static PlayerController* CreatePlayer(const Object* WorldContextObject, int ControllerId, bool bSpawnPlayerController);// 0x10c15778 0x7873e15fe0
	static void ClearSoundMixModifiers(const Object* WorldContextObject);// 0x10c0eb9c 0x7873e160c0
	static void ClearSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float FadeOutTime);// 0x10c0edf4 0x7873e161a0
	static void CancelAsyncLoading();// 0x10c14b20 0x7873e16280
	static void BreakHitResult(out const HitResult Hit, out bool bBlockingHit, out bool bInitialOverlap, out float Time, out float Distance, out Vector Location, out Vector ImpactPoint, out Vector Normal, out Vector ImpactNormal, out PhysicalMaterial* PhysMat, out Actor* HitActor, out PrimitiveComponent* HitComponent, out FName HitBoneName, out FName BoneName, out int HitItem, out int ElementIndex, out int FaceIndex, out Vector TraceStart, out Vector TraceEnd);// 0x10c0dac8 0x7873e16360
	static bool BlueprintSuggestProjectileVelocity(const Object* WorldContextObject, out Vector TossVelocity, Vector StartLocation, Vector EndLocation, float LaunchSpeed, float OverrideGravityZ, byte TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);// 0x10c0c3dc 0x7873e16440
	static bool Blueprint_PredictProjectilePath_ByTraceChannel(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x10c0b86c 0x7873e16520
	static bool Blueprint_PredictProjectilePath_ByObjectType(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x10c0be1c 0x7873e16600
	static bool Blueprint_PredictProjectilePath_Advanced(const Object* WorldContextObject, out const PredictProjectilePathParams PredictParams, out PredictProjectilePathResult PredictResult);// 0x10c0b5f8 0x7873e166e0
	static Actor* BeginSpawningActorFromBlueprint(const Object* WorldContextObject, const Blueprint* Blueprint, out const Transform SpawnTransform, bool bNoCollisionFail);// 0x10c16f9c 0x7873e167c0
	static Actor* BeginDeferredActorSpawnFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner);// 0x10c16dac 0x7873e168a0
	static bool AreSubtitlesEnabled();// 0x10c0f474 0x7873e16980
	static bool AreAnyListenersWithinRange(const Object* WorldContextObject, out const Vector Location, float MaximumRange);// 0x10c125e8 0x7873e16a60
	static bool ApplyRadialDamageWithFalloff(const Object* WorldContextObject, float BaseDamage, float MinimumDamage, out const Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, byte DamagePreventionChannel);// 0x10c13430 0x7873e16b40
	static bool ApplyRadialDamage(const Object* WorldContextObject, float BaseDamage, out const Vector Origin, float DamageRadius, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, bool bDoFullDamage, byte DamagePreventionChannel);// 0x10c13828 0x7873e16c20
	static float ApplyPointDamage(Actor* DamagedActor, float BaseDamage, out const Vector HitFromDirection, out const HitResult HitInfo, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x10c13164 0x7873e16d00
	static float ApplyDamage(Actor* DamagedActor, float BaseDamage, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x10c12f90 0x7873e16de0
	static void AnnounceAccessibleString(FString AnnouncementString);// 0x10c0a1ec 0x7873e16ec0
	static void ActivateReverbEffect(const Object* WorldContextObject, ReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime);// 0x10c0e990 0x7873e16fa0

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x438, Size: 0x8] 0x7873b66d80
	AudioParameter[] DefaultParameters;//[Offset: 0x440, Size: 0x10] 0x7873af8940
	AudioParameter[] InstanceParameters;//[Offset: 0x450, Size: 0x10] 0x7873af89e0
	SoundClass* SoundClassOverride;//[Offset: 0x460, Size: 0x8] 0x7873b66f00
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x468, Size: 0x1] 0x7873b66f80
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x468, Size: 0x1] 0x7873b67000
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x468, Size: 0x1] 0x7873b67080
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x468, Size: 0x1] 0x7873b67100
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x468, Size: 0x1] 0x7873b67180
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x468, Size: 0x1] 0x7873b67200
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x468, Size: 0x1] 0x7873b67280
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x468, Size: 0x1] 0x7873b67300
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x469, Size: 0x1] 0x7873b67380
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x469, Size: 0x1] 0x7873b65300
	bool bCanPlayMultipleInstances;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x469, Size: 0x1] 0x7873b65380
	bool bDisableParameterUpdatesWhilePlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x469, Size: 0x1] 0x7873b65400
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x46a, Size: 0x1] 0x7873b65480
	FName AudioComponentUserID;//[Offset: 0x470, Size: 0x8] 0x7873b65500
	float PitchModulationMin;//[Offset: 0x478, Size: 0x4] 0x7873b65580
	float PitchModulationMax;//[Offset: 0x47c, Size: 0x4] 0x7873b65600
	float VolumeModulationMin;//[Offset: 0x480, Size: 0x4] 0x7873b65680
	float VolumeModulationMax;//[Offset: 0x484, Size: 0x4] 0x7873b65700
	float VolumeMultiplier;//[Offset: 0x488, Size: 0x4] 0x7873b65780
	int EnvelopeFollowerAttackTime;//[Offset: 0x48c, Size: 0x4] 0x7873b65800
	int EnvelopeFollowerReleaseTime;//[Offset: 0x490, Size: 0x4] 0x7873b65880
	float Priority;//[Offset: 0x494, Size: 0x4] 0x7873b65900
	float SubtitlePriority;//[Offset: 0x498, Size: 0x4] 0x7873b65980
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x4a0, Size: 0x8] 0x7873b65a00
	float PitchMultiplier;//[Offset: 0x4a8, Size: 0x4] 0x7873b65a80
	float LowPassFilterFrequency;//[Offset: 0x4ac, Size: 0x4] 0x7873b65b00
	SoundAttenuation* AttenuationSettings;//[Offset: 0x4b8, Size: 0x8] 0x7873b65b80
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x4c0, Size: 0x3c8] 0x7873b65c00
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x888, Size: 0x8] 0x7873b65c80
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x890, Size: 0x50] 0x7873af8a80
	enum AutoAttachLocationRule;//[Offset: 0x8ec, Size: 0x1] 0x7873af8b20
	enum AutoAttachRotationRule;//[Offset: 0x8ed, Size: 0x1] 0x7873af8bc0
	enum AutoAttachScaleRule;//[Offset: 0x8ee, Size: 0x1] 0x7873af8c60
	SoundModulationDefaultRoutingSettings ModulationRouting;//[Offset: 0x8f0, Size: 0x48] 0x7873b65f00
	delegate OnAudioPlayStateChanged;//[Offset: 0x938, Size: 0x10] 0x7873b65f80
	delegate OnAudioVirtualizationChanged;//[Offset: 0x960, Size: 0x10] 0x7873b66000
	delegate OnAudioFinished;//[Offset: 0x988, Size: 0x10] 0x7873b66080
	delegate OnAudioPlaybackPercent;//[Offset: 0x9b0, Size: 0x10] 0x7873b66100
	delegate OnAudioSingleEnvelopeValue;//[Offset: 0x9d8, Size: 0x10] 0x7873b66180
	delegate OnAudioMultiEnvelopeValue;//[Offset: 0xa00, Size: 0x10] 0x7873b66200
	delegate OnQueueSubtitles;//[Offset: 0xa28, Size: 0x10] 0x7873b66280
	SceneComponent* AutoAttachParent;//[Offset: 0xa48, Size: 0x8] 0x7873b66300
	FName AutoAttachSocketName;//[Offset: 0xa50, Size: 0x8] 0x7873b64280
	void StopDelayed(float DelayTime);// 0x10b39cc8 0x7873b561a0
	void Stop();// 0x10b39d70 0x7873b56280
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0x10b39940 0x7873b56360
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0x10b39898 0x7873b56440
	void SetUISound(bool bInUISound);// 0x10b39740 0x7873b56520
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x10b3958c 0x7873b56600
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x10b39498 0x7873b566e0
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x10b393a4 0x7873b567c0
	void SetSound(SoundBase* NewSound);// 0x10b3a7a4 0x7873b568a0
	void SetPitchMultiplier(float NewPitchMultiplier);// 0x10b397f0 0x7873b56980
	void SetPaused(bool bPause);// 0x10b39c18 0x7873b56a60
	void SetOutputToBusOnly(bool bInOutputToBusOnly);// 0x10b38fb4 0x7873b56b40
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x10b39064 0x7873b56c20
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x10b3910c 0x7873b56d00
	void SetIntParameter(FName InName, int inInt);// 0x10b39e88 0x7873b56de0
	void SetFloatParameter(FName InName, float InFloat);// 0x10b39d8c 0x7873b56ec0
	void SetBoolParameter(FName InName, bool InBool);// 0x10b39f84 0x7873b56fa0
	void SetAudioBusSendPreEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x10b392b0 0x7873b57080
	void SetAudioBusSendPostEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x10b391bc 0x7873b57160
	void PlayQuantized(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle, out QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum InFadeCurve);// 0x10b3a088 0x7873b57240
	void Play(float StartTime);// 0x10b3a420 0x7873b57320
	bool IsVirtualized();// 0x10b39ba0 0x7873b53a40
	bool IsPlaying();// 0x10b39bd8 0x7873b53b20
	bool HasCookedFFTData();// 0x10b38f7c 0x7873b53c00
	bool HasCookedAmplitudeEnvelopeData();// 0x10b38f44 0x7873b53ce0
	enum GetPlayState();// 0x10b39b6c 0x7873b53dc0
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0x10b38d14 0x7873b53ea0
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0x10b38e14 0x7873b53f80
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0x10b38b88 0x7873b54060
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0x10b38c54 0x7873b54140
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0x10b3a4d0 0x7873b54220
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const enum FadeCurve);// 0x10b3a614 0x7873b54300
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x10b38ab4 0x7873b543e0
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0x10b39a30 0x7873b544c0
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0x10b39680 0x7873b545a0

--------------------------------
Class: QuartzClockHandle.Object
	void UnsubscribeFromTimeDivision(const Object* WorldContextObject, enum InQuantizationBoundary, out QuartzClockHandle* ClockHandle);// 0xf3e3334 0x7873d63420
	void UnsubscribeFromAllTimeDivisions(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0xf3e3234 0x7873d63500
	void SubscribeToQuantizationEvent(const Object* WorldContextObject, enum InQuantizationBoundary, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0xf3e35dc 0x7873d635e0
	void SubscribeToAllQuantizationEvents(const Object* WorldContextObject, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0xf3e3480 0x7873d636c0
	void StopClock(const Object* WorldContextObject, bool CancelPendingEvents, out QuartzClockHandle* ClockHandle);// 0xf3e44e0 0x7873d637a0
	void StartOtherClock(const Object* WorldContextObject, FName OtherClockName, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate);// 0xf3e3784 0x7873d63880
	void StartClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0xf3e4628 0x7873d63960
	void SetTicksPerSecond(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float TicksPerSecond);// 0xf3e2cec 0x7873d60080
	void SetThirtySecondNotesPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float ThirtySecondsNotesPerMinute);// 0xf3e27a4 0x7873d60160
	void SetSecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float SecondsPerTick);// 0xf3e2a48 0x7873d60240
	void SetMillisecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float MillisecondsPerTick);// 0xf3e2f90 0x7873d60320
	void SetBeatsPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float BeatsPerMinute);// 0xf3e2500 0x7873d60400
	void ResumeClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0xf3e42e0 0x7873d604e0
	void ResetTransportQuantized(const Object* WorldContextObject, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, out QuartzClockHandle* ClockHandle);// 0xf3e3e5c 0x7873d605c0
	void ResetTransport(const Object* WorldContextObject, out const delegate InDelegate);// 0xf3e41d0 0x7873d606a0
	void PauseClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0xf3e43e0 0x7873d60780
	bool IsClockRunning(const Object* WorldContextObject);// 0xf3e3da8 0x7873d60860
	float GetTicksPerSecond(const Object* WorldContextObject);// 0xf3e23a0 0x7873d60940
	float GetThirtySecondNotesPerMinute(const Object* WorldContextObject);// 0xf3e2240 0x7873d60a20
	float GetSecondsPerTick(const Object* WorldContextObject);// 0xf3e22f0 0x7873d60b00
	float GetMillisecondsPerTick(const Object* WorldContextObject);// 0xf3e2450 0x7873d60be0
	float GetEstimatedRunTime(const Object* WorldContextObject);// 0xf3e3af4 0x7873d60cc0
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, out const enum QuantizationType, float Multiplier);// 0xf3e3c54 0x7873d60da0
	QuartzTransportTimeStamp GetCurrentTimestamp(const Object* WorldContextObject);// 0xf3e3ba4 0x7873d60e80
	float GetBeatsPerMinute(const Object* WorldContextObject);// 0xf3e2190 0x7873d60f60

--------------------------------
Class: QuartzQuantizationBoundary
	enum Quantization;//[Offset: 0x0, Size: 0x1] 0x78739b5380
	float Multiplier;//[Offset: 0x4, Size: 0x4] 0x7873a1c800
	enum CountingReferencePoint;//[Offset: 0x8, Size: 0x1] 0x78739b5420
	bool bFireOnClockStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x7873a1c900
	bool bCancelCommandIfClockIsNotRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x7873a1c980
	bool bResetClockOnQueued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1] 0x7873a1ca00
	bool bResumeClockOnQueued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7873a1ca80

--------------------------------
Class: QuartzTransportTimeStamp
	int Bars;//[Offset: 0x0, Size: 0x4] 0x7873a1cb00
	int Beat;//[Offset: 0x4, Size: 0x4] 0x7873a1cb80
	float BeatFraction;//[Offset: 0x8, Size: 0x4] 0x7873a1cc00
	float Seconds;//[Offset: 0xc, Size: 0x4] 0x7873a1cc80

--------------------------------
Class: SoundWaveSpectralDataPerSound
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 0x10] 0x78739b89e0
	float PlaybackTime;//[Offset: 0x10, Size: 0x4] 0x7873a3c100
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8] 0x7873a3c180

--------------------------------
Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4] 0x7873a3c200
	float Magnitude;//[Offset: 0x4, Size: 0x4] 0x7873a3c280
	float NormalizedMagnitude;//[Offset: 0x8, Size: 0x4] 0x7873a3c300

--------------------------------
Class: SoundWaveEnvelopeDataPerSound
	float Envelope;//[Offset: 0x0, Size: 0x4] 0x7873a3bf00
	float PlaybackTime;//[Offset: 0x4, Size: 0x4] 0x7873a3bf80
	SoundWave* SoundWave;//[Offset: 0x8, Size: 0x8] 0x7873a3c000

--------------------------------
Class: ForceFeedbackAttenuation.Object
	ForceFeedbackAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0xc8] 0x7873e2f180

--------------------------------
Class: ForceFeedbackAttenuationSettings.BaseAttenuationSettings

--------------------------------
Class: ForceFeedbackComponent.SceneComponent.ActorComponent.Object
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x2b0, Size: 0x8] 0x7873e2e980
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1] 0x7873e2ea00
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 0x1] 0x7873e2ea80
	bool bLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 0x1] 0x7873e2eb00
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b8, Size: 0x1] 0x7873e2eb80
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b8, Size: 0x1] 0x7873e2ec00
	float IntensityMultiplier;//[Offset: 0x2bc, Size: 0x4] 0x7873e2ec80
	ForceFeedbackAttenuation* AttenuationSettings;//[Offset: 0x2c0, Size: 0x8] 0x7873e2ed00
	ForceFeedbackAttenuationSettings AttenuationOverrides;//[Offset: 0x2c8, Size: 0xc8] 0x7873e2ed80
	delegate OnForceFeedbackFinished;//[Offset: 0x390, Size: 0x10] 0x7873e2ee00
	void Stop();// 0x10c00e08 0x7873e17080
	void SetIntensityMultiplier(float NewIntensityMultiplier);// 0x10c00d60 0x7873e17160
	void SetForceFeedbackEffect(ForceFeedbackEffect* NewForceFeedbackEffect);// 0x10c00ed4 0x7873e17240
	void Play(float StartTime);// 0x10c00e24 0x7873e17320
	bool BP_GetAttenuationSettingsToApply(out ForceFeedbackAttenuationSettings OutAttenuationSettings);// 0x10c00b4c 0x7873e13a40
	void AdjustAttenuation(out const ForceFeedbackAttenuationSettings InAttenuationSettings);// 0x10c00c60 0x7873e13b20

--------------------------------
Class: InitialActiveSoundParams.Object
	AudioParameter[] AudioParams;//[Offset: 0x28, Size: 0x10] 0x7873db3bc0

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 0x18] 0x78739e3000
	Vector LaunchVelocity;//[Offset: 0x18, Size: 0x18] 0x78739e3080
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78739e3100
	float ProjectileRadius;//[Offset: 0x34, Size: 0x4] 0x78739e3180
	float MaxSimTime;//[Offset: 0x38, Size: 0x4] 0x78739e1100
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78739e1180
	byte TraceChannel;//[Offset: 0x3d, Size: 0x1] 0x78739e1200
	byte[] ObjectTypes;//[Offset: 0x40, Size: 0x10] 0x78739b38a0
	Actor*[] ActorsToIgnore;//[Offset: 0x50, Size: 0x10] 0x78739b3940
	float SimFrequency;//[Offset: 0x60, Size: 0x4] 0x78739e1380
	float OverrideGravityZ;//[Offset: 0x64, Size: 0x4] 0x78739e1400
	byte DrawDebugType;//[Offset: 0x68, Size: 0x1] 0x78739e1480
	float DrawDebugTime;//[Offset: 0x6c, Size: 0x4] 0x78739e1500
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78739e1580

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 0x10] 0x78739b3800
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 0x38] 0x78739e2d80
	HitResult HitResult;//[Offset: 0x48, Size: 0xe8] 0x78739e2e00

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x78739e2e80
	Vector Velocity;//[Offset: 0x18, Size: 0x18] 0x78739e2f00
	float Time;//[Offset: 0x30, Size: 0x4] 0x78739e2f80

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2d4, Size: 0x8] 0x7873c58300
	FName PreviousMatchState;//[Offset: 0x2dc, Size: 0x8] 0x7873c58380
	int ElapsedTime;//[Offset: 0x2e4, Size: 0x4] 0x7873c58400
	void OnRep_MatchState();// 0x10c1adf8 0x7873c4eda0
	void OnRep_ElapsedTime();// 0x10c1addc 0x7873c4ee80

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 0x1] 0x7873f6be00
	float LightFalloffExponent;//[Offset: 0x3f4, Size: 0x4] 0x7873f6be80
	float SourceRadius;//[Offset: 0x3f8, Size: 0x4] 0x7873f6bf00
	float SoftSourceRadius;//[Offset: 0x3fc, Size: 0x4] 0x7873f6bf80
	float SourceLength;//[Offset: 0x400, Size: 0x4] 0x7873f6c000
	void SetSourceRadius(float bNewValue);// 0x10dc0858 0x7873f766e0
	void SetSourceLength(float NewValue);// 0x10dc0708 0x7873f767c0
	void SetSoftSourceRadius(float bNewValue);// 0x10dc07b0 0x7873f768a0
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x10dc0900 0x7873f76980

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x3d9, Size: 0x1] 0x7873ee2220
	float Radius;//[Offset: 0x3dc, Size: 0x4] 0x7873f2f900
	float AttenuationRadius;//[Offset: 0x3e0, Size: 0x4] 0x7873f2f980
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x3e4, Size: 0xc] 0x7873f2fa00
	void SetIntensityUnits(enum NewIntensityUnits);// 0x10cefb20 0x7873f1c3a0
	void SetAttenuationRadius(float NewRadius);// 0x10cefbc8 0x7873f1c480
	static float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0x10cef9e0 0x7873f1c560

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: GeneratedMeshAreaLight.SpotLight.Light.Actor.Object

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x298, Size: 0x8] 0x7873e56a80
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x10e5dab4 0x7873e60cc0
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x10e5db5c 0x7873e60da0

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x288, Size: 0x8] 0x7873e0cd00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1] 0x7873e0cd80
	void ToggleEnabled();// 0x10ce7088 0x7873e11900
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x10ce6d7c 0x7873e119e0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x10ce6e24 0x7873e11ac0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x10ce6cd4 0x7873e11ba0
	void SetLightColor(LinearColor NewLightColor);// 0x10ce6f04 0x7873e11c80
	void SetEnabled(bool bSetEnabled);// 0x10ce70d4 0x7873dee780
	void SetCastShadows(bool bNewValue);// 0x10ce6c24 0x7873dee860
	void SetBrightness(float NewBrightness);// 0x10ce6fe0 0x7873dee940
	void SetAffectTranslucentLighting(bool bNewValue);// 0x10ce6b74 0x7873deea20
	void OnRep_bEnabled();// 0x10ce7184 0x7873deeb00
	bool IsEnabled();// 0x10ce709c 0x7873deebe0
	LinearColor GetLightColor();// 0x10ce6ecc 0x7873deecc0
	float GetBrightness();// 0x10ce6fac 0x7873deeda0

--------------------------------
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x404, Size: 0x4] 0x7873fb0f80
	float OuterConeAngle;//[Offset: 0x408, Size: 0x4] 0x7873fb1000
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x10e5e0ac 0x7873fa68a0
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x10e5e154 0x7873fa6980

--------------------------------
Class: HapticFeedbackEffect_Buffer.HapticFeedbackEffect_Base.Object
	byte[] Amplitudes;//[Offset: 0x28, Size: 0x10] 0x7873dba6a0
	int SampleRate;//[Offset: 0x38, Size: 0x4] 0x7873e56a00

--------------------------------
Class: HealthSnapshotBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void StopPerformanceSnapshots();// 0x10c22bc8 0x7873e60a20
	static void StartPerformanceSnapshots();// 0x10c22bdc 0x7873e60b00
	static void LogPerformanceSnapshot(const FString SnapshotTitle, bool bResetStats);// 0x10c22a80 0x7873e60be0

--------------------------------
Class: WorldPartitionHLOD.Actor.Object
	uint32 LODLevel;//[Offset: 0x288, Size: 0x4] 0x7873e56580
	bool bRequireWarmup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1] 0x7873e56600
	WorldPartitionRuntimeCell* SourceCell;//[Offset: 0x290, Size: 0x28] 0x7873e56680
	FName SourceCellName;//[Offset: 0x2b8, Size: 0x8] 0x7873e56700

--------------------------------
Class: WorldPartitionRuntimeCell.Object
	bool bIsAlwaysLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873fc2f80
	FName[] DataLayers;//[Offset: 0x30, Size: 0x10] 0x7873eede40
	IntVector Coords;//[Offset: 0x40, Size: 0xc] 0x7873fc3080
	FName GridName;//[Offset: 0x4c, Size: 0x8] 0x7873fc3100
	FString DebugName;//[Offset: 0x58, Size: 0x10] 0x7873fc3180
	int Priority;//[Offset: 0x68, Size: 0x4] 0x7873fc1100
	bool bClientOnlyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1] 0x7873fc1180
	bool bIsHLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1] 0x7873fc1200
	bool bBlockOnSlowLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 0x1] 0x7873fc1280

--------------------------------
Class: HLODEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: HLODProxyDesc.Object

--------------------------------
Class: ImportanceSamplingLibrary.BlueprintFunctionLibrary.Object
	static float RandomSobolFloat(int index, int Dimension, float Seed);// 0x10c314b8 0x7873e65640
	static Vector RandomSobolCell3D(int index, int NumCells, Vector Cell, Vector Seed);// 0x10c30f48 0x7873e61d60
	static Vector2D RandomSobolCell2D(int index, int NumCells, Vector2D Cell, Vector2D Seed);// 0x10c31204 0x7873e61e40
	static float NextSobolFloat(int index, int Dimension, float PreviousValue);// 0x10c3137c 0x7873e61f20
	static Vector NextSobolCell3D(int index, int NumCells, Vector PreviousValue);// 0x10c30e0c 0x7873e62000
	static Vector2D NextSobolCell2D(int index, int NumCells, Vector2D PreviousValue);// 0x10c310d0 0x7873e620e0
	static ImportanceTexture MakeImportanceTexture(Texture2D* Texture, byte WeightingFunc);// 0x10c30b68 0x7873e621c0
	static void ImportanceSample(out const ImportanceTexture Texture, out const Vector2D Rand, int Samples, float Intensity, out Vector2D SamplePosition, out LinearColor SampleColor, out float SampleIntensity, out float SampleSize);// 0x10c306b0 0x7873e622a0
	static void BreakImportanceTexture(out const ImportanceTexture ImportanceTexture, out Texture2D* Texture, out byte WeightingFunc);// 0x10c309d0 0x7873e62380

--------------------------------
Class: ImportanceTexture
	IntPoint Size;//[Offset: 0x0, Size: 0x8] 0x78739e3f00
	int NumMips;//[Offset: 0x8, Size: 0x4] 0x78739e3f80
	float[] MarginalCDF;//[Offset: 0x10, Size: 0x10] 0x78739b3580
	float[] ConditionalCDF;//[Offset: 0x20, Size: 0x10] 0x78739b3620
	Color[] TextureData;//[Offset: 0x30, Size: 0x10] 0x78739b36c0
	Texture2D* Texture;//[Offset: 0x40, Size: 0x8] 0x78739e4180
	byte Weighting;//[Offset: 0x48, Size: 0x1] 0x78739e4200

--------------------------------
Class: InputAxisDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisDelegateBinding[] InputAxisDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7873dbc5e0

--------------------------------
Class: InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: BlueprintInputAxisDelegateBinding.BlueprintInputDelegateBinding
	FName InputAxisName;//[Offset: 0x4, Size: 0x8] 0x78739e3880
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8] 0x78739e3900

--------------------------------
Class: BlueprintInputDelegateBinding
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78739e3b00
	bool bExecuteWhenPaused;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78739e3b80
	bool bOverrideParentBinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78739e3c00

--------------------------------
Class: InputKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputKeyDelegateBinding[] InputKeyDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7873dbc400

--------------------------------
Class: BlueprintInputKeyDelegateBinding.BlueprintInputDelegateBinding
	InputChord InputChord;//[Offset: 0x8, Size: 0x20] 0x78739e3580
	byte InputKeyEvent;//[Offset: 0x28, Size: 0x1] 0x78739e3600
	FName FunctionNameToBind;//[Offset: 0x2c, Size: 0x8] 0x78739e3680

--------------------------------
Class: InputChord
	Key Key;//[Offset: 0x0, Size: 0x18] 0x787381b900
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x787381b980
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x787381ba00
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x787381ba80
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x787381bb00

--------------------------------
Class: InputVectorAxisDelegateBinding.InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisKeyDelegateBinding[] InputAxisKeyDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7873dbc540

--------------------------------
Class: BlueprintInputAxisKeyDelegateBinding.BlueprintInputDelegateBinding
	Key AxisKey;//[Offset: 0x8, Size: 0x18] 0x78739e3780
	FName FunctionNameToBind;//[Offset: 0x20, Size: 0x8] 0x78739e3800

--------------------------------
Class: InstancedPlacementPartitionActor.ISMPartitionActor.PartitionActor.Actor.Object

--------------------------------
Class: ISMPartitionActor.PartitionActor.Actor.Object

--------------------------------
Class: PartitionActor.Actor.Object

--------------------------------
Class: Interface_AssetUserData.Interface.Object

--------------------------------
Class: Interface_CollisionDataProvider.Interface.Object

--------------------------------
Class: InterpFilter_Classes.InterpFilter.Object

--------------------------------
Class: InterpFilter.Object
	FString Caption;//[Offset: 0x28, Size: 0x10] 0x7873e5ef80

--------------------------------
Class: InterpGroupCamera.InterpGroup.Object
	CameraAnim* CameraAnimInst;//[Offset: 0x50, Size: 0x8] 0x7873e5ea80
	float CompressTolerance;//[Offset: 0x58, Size: 0x4] 0x7873e5eb00

--------------------------------
Class: InterpGroupInstDirector.InterpGroupInst.Object

--------------------------------
Class: InterpTrackFloatBase.InterpTrack.Object
	InterpCurveFloat FloatTrack;//[Offset: 0x70, Size: 0x18] 0x7873e5fb00
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x7873e5fb80

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10] 0x788a496a00
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x788a4dc100
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x788a4dc080

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4] 0x788a4dc400
	float OutVal;//[Offset: 0x4, Size: 0x4] 0x788a4dc380
	float ArriveTangent;//[Offset: 0x8, Size: 0x4] 0x788a4dc300
	float LeaveTangent;//[Offset: 0xc, Size: 0x4] 0x788a4dc280
	byte InterpMode;//[Offset: 0x10, Size: 0x1] 0x788a4dc200

--------------------------------
Class: InterpTrackAudioMaster.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackVectorBase.InterpTrack.Object
	InterpCurveVector VectorTrack;//[Offset: 0x70, Size: 0x18] 0x7873e5f880
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x7873e5f900

--------------------------------
Class: InterpTrackColorScale.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackFade.InterpTrackFloatBase.InterpTrack.Object
	bool bPersistFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x7873e70b00
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x7873e70b80
	LinearColor FadeColor;//[Offset: 0x90, Size: 0x10] 0x7873e70c00

--------------------------------
Class: InterpTrackFloatParticleParam.InterpTrackFloatBase.InterpTrack.Object
	FName ParamName;//[Offset: 0x8c, Size: 0x8] 0x7873e70900

--------------------------------
Class: InterpTrackInstAnimControl.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x7873e70800

--------------------------------
Class: InterpTrackInstBoolProp.InterpTrackInstProperty.InterpTrackInst.Object
	bool ResetBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7873e70680

--------------------------------
Class: InterpTrackInstProperty.InterpTrackInst.Object
	FieldPathProperty InterpProperty;//[Size: 0x20] 0x7873e70700
	Object* PropertyOuterObjectInst;//[Offset: 0x48, Size: 0x8] 0x7873e70780

--------------------------------
Class: InterpTrackInstFloatAnimBPParam.InterpTrackInst.Object
	AnimInstance* AnimScriptInstance;//[Offset: 0x28, Size: 0x8] 0x7873e70400
	float ResetFloat;//[Offset: 0x30, Size: 0x4] 0x7873e70480

--------------------------------
Class: InterpTrackInstFloatProp.InterpTrackInstProperty.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x58, Size: 0x4] 0x7873e70100

--------------------------------
Class: InterpTrackInstParticleReplay.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x7873e72000

--------------------------------
Class: InterpTrackInstToggle.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1] 0x7873e71d00
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4] 0x7873e71d80
	bool bSavedActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7873e71e00

--------------------------------
Class: InterpTrackInstVisibility.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1] 0x7873e71980
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4] 0x7873e71a00

--------------------------------
Class: InterpTrackSlomo.InterpTrackFloatBase.InterpTrack.Object

--------------------------------
Class: InterpTrackVectorMaterialParam.InterpTrackVectorBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10] 0x7873dbd3a0
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x7873e72a80

--------------------------------
Class: IntSerialization.Object
	uint16 UnsignedInt16Variable;//[Offset: 0x28, Size: 0x2] 0x7873e72380
	uint32 UnsignedInt32Variable;//[Offset: 0x2c, Size: 0x4] 0x7873e72400
	uint64 UnsignedInt64Variable;//[Offset: 0x30, Size: 0x8] 0x7873e72480
	int8 SignedInt8Variable;//[Offset: 0x38, Size: 0x1] 0x7873e72500
	int16 SignedInt16Variable;//[Offset: 0x3a, Size: 0x2] 0x7873e72580
	int64 SignedInt64Variable;//[Offset: 0x40, Size: 0x8] 0x7873e72600
	byte UnsignedInt8Variable;//[Offset: 0x48, Size: 0x1] 0x7873e72680
	int SignedInt32Variable;//[Offset: 0x4c, Size: 0x4] 0x7873e72700

--------------------------------
Class: KillZVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: KismetGuidLibrary.BlueprintFunctionLibrary.Object
	static void Parse_StringToGuid(FString GuidString, out Guid OutGuid, out bool Success);// 0x10c60704 0x7873e661a0
	static bool NotEqual_GuidGuid(out const Guid A, out const Guid B);// 0x10c60ae8 0x7873e66280
	static Guid NewGuid();// 0x10c60958 0x7873e66360
	static bool IsValid_Guid(out const Guid InGuid);// 0x10c60a30 0x7873e66440
	static void Invalidate_Guid(out Guid InGuid);// 0x10c6098c 0x7873e66520
	static bool EqualEqual_GuidGuid(out const Guid A, out const Guid B);// 0x10c60bf0 0x7873e66600
	static FString Conv_GuidToString(out const Guid InGuid);// 0x10c60858 0x7873e666e0

--------------------------------
Class: KismetMaterialLibrary.BlueprintFunctionLibrary.Object
	static void SetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, out const LinearColor ParameterValue);// 0x10c6c128 0x7873e699a0
	static void SetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, float ParameterValue);// 0x10c6c2a4 0x7873e69a80
	static LinearColor GetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x10c6beac 0x7873e69b60
	static float GetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x10c6bfec 0x7873e69c40
	static MaterialInstanceDynamic* CreateDynamicMaterialInstance(Object* WorldContextObject, MaterialInterface* Parent, FName OptionalName, enum CreationFlags);// 0x10c6bd24 0x7873e69d20

--------------------------------
Class: KismetRenderingLibrary.BlueprintFunctionLibrary.Object
	static void SetCastInsetShadowForAllAttachments(PrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);// 0x10cacd34 0x7873f12620
	static Texture2D* RenderTargetCreateStaticTexture2DEditorOnly(TextureRenderTarget2D* RenderTarget, FString Name, byte CompressionSettings, byte MipSettings);// 0x10caec84 0x7873f12700
	static void ReleaseRenderTarget2D(TextureRenderTarget2D* TextureRenderTarget);// 0x10caef9c 0x7873f127e0
	static Color ReadRenderTargetUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0x10cae6bc 0x7873f128c0
	static LinearColor[] ReadRenderTargetRawUVArea(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, Box2D Area, bool bNormalize);// 0x10cadb20 0x7873f129a0
	static LinearColor ReadRenderTargetRawUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V, bool bNormalize);// 0x10cadea8 0x7873f12a80
	static LinearColor[] ReadRenderTargetRawPixelArea(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int MinX, int MinY, int MaxX, int MaxY, bool bNormalize);// 0x10cae084 0x7873f12b60
	static LinearColor ReadRenderTargetRawPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y, bool bNormalize);// 0x10cae33c 0x7873f12c40
	static bool ReadRenderTargetRaw(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out LinearColor[] OutLinearSamples, bool bNormalize);// 0x10cadd04 0x7873f12d20
	static Color ReadRenderTargetPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0x10cae840 0x7873f12e00
	static bool ReadRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out Color[] OutSamples, bool bNormalize);// 0x10cae518 0x7873f12ee0
	static SkelMeshSkinWeightInfo MakeSkinWeightInfo(int Bone0, byte Weight0, int Bone1, byte Weight1, int Bone2, byte Weight2, int Bone3, byte Weight3);// 0x10cad1dc 0x7873f12fc0
	static Texture2D* ImportFileAsTexture2D(Object* WorldContextObject, FString Filename);// 0x10cad88c 0x7873f130a0
	static Texture2D* ImportBufferAsTexture2D(Object* WorldContextObject, out const byte[] Buffer);// 0x10cad780 0x7873f13180
	static void ExportTexture2D(Object* WorldContextObject, Texture2D* Texture, FString FilePath, FString Filename);// 0x10cad98c 0x7873f13260
	static void ExportRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename);// 0x10cae9c4 0x7873f13340
	static void EndDrawCanvasToRenderTarget(Object* WorldContextObject, out const DrawToRenderTargetContext Context);// 0x10cad4b4 0x7873f13420
	static void DrawMaterialToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, MaterialInterface* Material);// 0x10caee70 0x7873f13500
	static TextureRenderTargetVolume* CreateRenderTargetVolume(Object* WorldContextObject, int Width, int Height, int Depth, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x10caf034 0x7873f135e0
	static TextureRenderTarget2DArray* CreateRenderTarget2DArray(Object* WorldContextObject, int Width, int Height, int Slices, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x10caf2a4 0x7873f136c0
	static TextureRenderTarget2D* CreateRenderTarget2D(Object* WorldContextObject, int Width, int Height, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x10caf514 0x7873f137a0
	static void ConvertRenderTargetToTexture2DEditorOnly(Object* WorldContextObject, TextureRenderTarget2D* RenderTarget, Texture2D* Texture);// 0x10caeb58 0x7873f13880
	static void ClearRenderTarget2D(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, LinearColor ClearColor);// 0x10caf738 0x7873f13960
	static Matrix CalculateProjectionMatrix(out const MinimalViewInfo MinimalViewInfo);// 0x10cacc04 0x7873f10080
	static void BreakSkinWeightInfo(SkelMeshSkinWeightInfo InWeight, out int Bone0, out byte Weight0, out int Bone1, out byte Weight1, out int Bone2, out byte Weight2, out int Bone3, out byte Weight3);// 0x10cace70 0x7873f10160
	static void BeginDrawCanvasToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out Canvas* Canvas, out Vector2D Size, out DrawToRenderTargetContext Context);// 0x10cad5a4 0x7873f10240

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x218, Size: 0x4] 0x7873df7c80
	int SizeY;//[Offset: 0x21c, Size: 0x4] 0x7873df7d00
	LinearColor ClearColor;//[Offset: 0x220, Size: 0x10] 0x7873df7d80
	byte AddressX;//[Offset: 0x230, Size: 0x1] 0x7873df7e00
	byte AddressY;//[Offset: 0x231, Size: 0x1] 0x7873df7e80
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x232, Size: 0x1] 0x7873df7f00
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x232, Size: 0x1] 0x7873df7f80
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x232, Size: 0x1] 0x7873df8000
	byte RenderTargetFormat;//[Offset: 0x233, Size: 0x1] 0x7873df8080
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1] 0x7873df8100
	byte MipsSamplerFilter;//[Offset: 0x235, Size: 0x1] 0x7873df8180
	byte MipsAddressU;//[Offset: 0x236, Size: 0x1] 0x7873df8200
	byte MipsAddressV;//[Offset: 0x237, Size: 0x1] 0x7873df8280
	byte OverrideFormat;//[Offset: 0x238, Size: 0x1] 0x7873df8300

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x10] 0x788a4dc800
	Vector2D Max;//[Offset: 0x10, Size: 0x10] 0x788a4dc680
	byte bIsValid;//[Offset: 0x20, Size: 0x1] 0x788a4de700

--------------------------------
Class: DrawToRenderTargetContext
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x0, Size: 0x8] 0x78739e6a80

--------------------------------
Class: TextureRenderTargetVolume.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x218, Size: 0x4] 0x7873fb6500
	int SizeY;//[Offset: 0x21c, Size: 0x4] 0x7873fb6580
	int SizeZ;//[Offset: 0x220, Size: 0x4] 0x7873fb6600
	LinearColor ClearColor;//[Offset: 0x224, Size: 0x10] 0x7873fb6680
	byte OverrideFormat;//[Offset: 0x234, Size: 0x1] 0x7873fb6700
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x235, Size: 0x1] 0x7873fb6780
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x235, Size: 0x1] 0x7873fb6800

--------------------------------
Class: TextureRenderTarget2DArray.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x218, Size: 0x4] 0x7873fb6b00
	int SizeY;//[Offset: 0x21c, Size: 0x4] 0x7873fb6b80
	int Slices;//[Offset: 0x220, Size: 0x4] 0x7873fb6c00
	LinearColor ClearColor;//[Offset: 0x224, Size: 0x10] 0x7873fb6c80
	byte OverrideFormat;//[Offset: 0x234, Size: 0x1] 0x7873fb6d00
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x235, Size: 0x1] 0x7873fb6d80
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x235, Size: 0x1] 0x7873fb6e00

--------------------------------
Class: KismetSystemLibrary.BlueprintFunctionLibrary.Object
	static void UnregisterForRemoteNotifications();// 0x10cbb1b8 0x78737c44c0
	static void UnloadPrimaryAssetList(out const PrimaryAssetId[] PrimaryAssetIdList);// 0x10cb960c 0x78737c45a0
	static void UnloadPrimaryAsset(PrimaryAssetId PrimaryAssetId);// 0x10cb96bc 0x78737c4680
	static void TransactObject(Object* Object);// 0x10cba798 0x78737c4760
	static void StackTrace();// 0x10cd087c 0x78737c4840
	static bool SphereTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc3250 0x78737c4920
	static bool SphereTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc0c38 0x78737c4a00
	static bool SphereTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc583c 0x78737c4ae0
	static bool SphereTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc2dc0 0x78737c4bc0
	static bool SphereTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc07b4 0x78737c4ca0
	static bool SphereTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc53b8 0x78737c4d80
	static bool SphereOverlapComponents(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x10cc7600 0x78737c4e60
	static bool SphereOverlapActors(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x10cc78b0 0x78737c4f40
	static void SnapshotObject(Object* Object);// 0x10cba700 0x78737c5020
	static void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);// 0x10cbbd84 0x78737c5100
	static void ShowPlatformSpecificAchievementsScreen(const PlayerController* SpecificPlayer);// 0x10cbbcec 0x78737c51e0
	static void ShowInterstitialAd();// 0x10cbbe28 0x78737c52c0
	static void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);// 0x10cbbfa0 0x78737c53a0
	static void SetWindowTitle(out const FText Title);// 0x10ccbf94 0x78737c5480
	static void SetVolumeButtonsHandledBySystem(bool bEnabled);// 0x10cbbac8 0x78737c5560
	static void SetVectorPropertyByName(Object* Object, FName PropertyName, out const Vector Value);// 0x10cc82c0 0x78737c5640
	static void SetVector3fPropertyByName(Object* Object, FName PropertyName, out const Vector3f Value);// 0x10cc8190 0x78737c1d60
	static void SetUserActivity(out const UserActivity UserActivity);// 0x10cbb104 0x78737c1e40
	static void SetTransformPropertyByName(Object* Object, FName PropertyName, out const Transform Value);// 0x10cc7cb0 0x78737c1f20
	static void SetTextPropertyByName(Object* Object, FName PropertyName, out const FText Value);// 0x10cc83f0 0x78737c2000
	static void SetSuppressViewportTransitionMessage(const Object* WorldContextObject, bool bState);// 0x10cbb5b8 0x78737c20e0
	static void SetStructurePropertyByName(Object* Object, FName PropertyName, out const GenericStruct Value);// 0x10cd0758 0x78737c21c0
	static void SetStringPropertyByName(Object* Object, FName PropertyName, FString Value);// 0x10cc8588 0x78737c22a0
	static void SetSoftObjectPropertyByName(Object* Object, FName PropertyName, out const Object* Value);// 0x10cc881c 0x78737c2380
	static void SetSoftClassPropertyByName(Object* Object, FName PropertyName, out const class Object Value);// 0x10cc86c0 0x78737c2460
	static void SetRotatorPropertyByName(Object* Object, FName PropertyName, out const Rotator Value);// 0x10cc8060 0x78737c2540
	static void SetObjectPropertyByName(Object* Object, FName PropertyName, Object* Value);// 0x10cc8d14 0x78737c2620
	static void SetNamePropertyByName(Object* Object, FName PropertyName, out const FName Value);// 0x10cc8978 0x78737c2700
	static void SetLinearColorPropertyByName(Object* Object, FName PropertyName, out const LinearColor Value);// 0x10cc7f30 0x78737c27e0
	static void SetIntPropertyByName(Object* Object, FName PropertyName, int Value);// 0x10cc92f8 0x78737c28c0
	static void SetInterfacePropertyByName(Object* Object, FName PropertyName, out const interface classNone Value);// 0x10cc8ab0 0x78737c29a0
	static void SetInt64PropertyByName(Object* Object, FName PropertyName, int64 Value);// 0x10cc91cc 0x78737c2a80
	static void SetGamepadsBlockDeviceFeedback(bool bBlock);// 0x10cbb9f0 0x78737c2b60
	static void SetFieldPathPropertyByName(Object* Object, FName PropertyName, out const Value(FieldPathProperty) Value);// 0x10cc7b60 0x78737c2c40
	static void SetDoublePropertyByName(Object* Object, FName PropertyName, double Value);// 0x10cc8f74 0x78737c2d20
	static void SetColorPropertyByName(Object* Object, FName PropertyName, out const Color Value);// 0x10cc7e00 0x78737c2e00
	static void SetCollisionProfileNameProperty(Object* Object, FName PropertyName, out const CollisionProfileName Value);// 0x10cd0634 0x78737c2ee0
	static void SetClassPropertyByName(Object* Object, FName PropertyName, class Object Value);// 0x10cc8be8 0x78737c2fc0
	static void SetBytePropertyByName(Object* Object, FName PropertyName, byte Value);// 0x10cc90a0 0x78737c30a0
	static void SetBoolPropertyByName(Object* Object, FName PropertyName, bool Value);// 0x10cc8e40 0x78737c3180
	static void RetriggerableDelay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0x10ccb750 0x78737c3260
	static void ResetGamepadAssignmentToController(int ControllerId);// 0x10cbb944 0x78737c3340
	static void ResetGamepadAssignments();// 0x10cbb9dc 0x78737c3420
	static void RegisterForRemoteNotifications();// 0x10cbb1cc 0x78737c3500
	static void QuitGame(const Object* WorldContextObject, PlayerController* SpecificPlayer, byte QuitPreference, bool bIgnorePlatformRestrictions);// 0x10ccbab8 0x78737c35e0
	static void PrintWarning(FString InString);// 0x10ccc0a4 0x78737c36c0
	static void PrintText(const Object* WorldContextObject, const FText InText, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration, const FName Key);// 0x10ccc148 0x78737c37a0
	static void PrintString(const Object* WorldContextObject, FString InString, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration, const FName Key);// 0x10ccc494 0x78737c3880
	static bool ParseParamValue(FString InString, FString InParam, out FString OutValue);// 0x10cbab60 0x78737c3960
	static bool ParseParam(FString InString, FString InParam);// 0x10cbacd4 0x78737c0080
	static void ParseCommandLine(FString InCmdLine, out FString[] OutTokens, out FString[] OutSwitches, out <FString,FString> OutParams);// 0x10cbade4 0x78737c0160
	void OnAssetLoaded__DelegateSignature(Object* Loaded);// 0xb8f1ab4 0x78737c1660
	void OnAssetClassLoaded__DelegateSignature(class Object Loaded);// 0xb8f1ab4 0x78737c13c0
	static bool NotEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0x10ccdfb8 0x78737c0240
	static bool NotEqual_SoftClassReference(out const class Object A, out const class Object B);// 0x10ccd994 0x78737c0320
	static bool NotEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0x10cb9754 0x78737c0400
	static bool NotEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0x10cb9adc 0x78737c04e0
	static FString NormalizeFilename(FString InFilename);// 0x10ccf658 0x78737c05c0
	static void MoveComponentTo(SceneComponent* Component, Vector TargetRelativeLocation, Rotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, byte MoveAction, LatentActionInfo LatentInfo);// 0x10ccb450 0x78737c06a0
	static SoftObjectPath MakeSoftObjectPath(FString PathString);// 0x10cceae4 0x78737c0780
	static SoftClassPath MakeSoftClassPath(FString PathString);// 0x10cce720 0x78737c0860
	static FText MakeLiteralText(FText Value);// 0x10ccc804 0x78737c0940
	static FString MakeLiteralString(FString Value);// 0x10ccca10 0x78737c0a20
	static FName MakeLiteralName(FName Value);// 0x10cccbcc 0x78737c0b00
	static int64 MakeLiteralInt64(int64 Value);// 0x10ccce64 0x78737c0be0
	static int MakeLiteralInt(int Value);// 0x10cccf08 0x78737c0cc0
	static float MakeLiteralFloat(float Value);// 0x10cccdc0 0x78737c0da0
	static double MakeLiteralDouble(double Value);// 0x10cccd1c 0x78737c0e80
	static byte MakeLiteralByte(byte Value);// 0x10cccb28 0x78737c0f60
	static bool MakeLiteralBool(bool Value);// 0x10cccc70 0x78737c1040
	static void LogString(FString InString, bool bPrintToLog);// 0x10ccc70c 0x78737c1120
	static void LoadInterstitialAd(int AdIdIndex);// 0x10cbbeac 0x78737c1200
	static class Object LoadClassAsset_Blocking(class Object AssetClass);// 0x10ccd838 0x78737c12e0
	static void LoadAssetClass(const Object* WorldContextObject, class Object AssetClass, delegate OnLoaded, LatentActionInfo LatentInfo);// 0x10cccfac 0x78737c14a0
	static Object* LoadAsset_Blocking(Object* Asset);// 0x10ccde5c 0x78737c1580
	static void LoadAsset(const Object* WorldContextObject, Object* Asset, delegate OnLoaded, LatentActionInfo LatentInfo);// 0x10ccd1ec 0x78737c1740
	static bool LineTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc3b6c 0x78737c1820
	static bool LineTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc1534 0x78737c1900
	static bool LineTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc6138 0x78737c19e0
	static bool LineTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc3724 0x78737c1ac0
	static bool LineTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc10fc 0x78737c1ba0
	static bool LineTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc5d00 0x78737c1c80
	static void LaunchURL(FString URL);// 0x10cbc154 0x788abee780
	static void K2_UnPauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x10cca72c 0x788abee860
	static void K2_UnPauseTimerDelegate(delegate Delegate);// 0x10ccafc0 0x788abee940
	static void K2_UnPauseTimer(Object* Object, FString FunctionName);// 0x10cc9ad4 0x788abeea20
	static bool K2_TimerExistsHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x10cca450 0x788abeeb00
	static bool K2_TimerExistsDelegate(delegate Delegate);// 0x10ccad8c 0x788abeebe0
	static bool K2_TimerExists(Object* Object, FString FunctionName);// 0x10cc96cc 0x788abeecc0
	static TimerHandle K2_SetTimerForNextTickDelegate(delegate Delegate);// 0x10ccb1b8 0x788abeeda0
	static TimerHandle K2_SetTimerForNextTick(Object* Object, FString FunctionName);// 0x10cc9ea0 0x788abeee80
	static TimerHandle K2_SetTimerDelegate(delegate Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0x10ccb270 0x788abeef60
	static TimerHandle K2_SetTimer(Object* Object, FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0x10cc9ff4 0x788abef040
	static void K2_PauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x10cca80c 0x788abef120
	static void K2_PauseTimerDelegate(delegate Delegate);// 0x10ccb068 0x788abef200
	static void K2_PauseTimer(Object* Object, FString FunctionName);// 0x10cc9c18 0x788abef2e0
	static bool K2_IsValidTimerHandle(TimerHandle Handle);// 0x10ccab70 0x788abef3c0
	static bool K2_IsTimerPausedHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x10cca544 0x788abef4a0
	static bool K2_IsTimerPausedDelegate(delegate Delegate);// 0x10ccae48 0x788abef580
	static bool K2_IsTimerPaused(Object* Object, FString FunctionName);// 0x10cc9824 0x788abef660
	static bool K2_IsTimerActiveHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x10cca638 0x788abef740
	static bool K2_IsTimerActiveDelegate(delegate Delegate);// 0x10ccaf04 0x788abef820
	static bool K2_IsTimerActive(Object* Object, FString FunctionName);// 0x10cc997c 0x788abef900
	static TimerHandle K2_InvalidateTimerHandle(out TimerHandle Handle);// 0x10ccaabc 0x788abef9e0
	static float K2_GetTimerRemainingTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x10cca270 0x788abefac0
	static float K2_GetTimerRemainingTimeDelegate(delegate Delegate);// 0x10ccac1c 0x788abefba0
	static float K2_GetTimerRemainingTime(Object* Object, FString FunctionName);// 0x10cc9424 0x788abefc80
	static float K2_GetTimerElapsedTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x10cca360 0x788abefd60
	static float K2_GetTimerElapsedTimeDelegate(delegate Delegate);// 0x10ccacd4 0x788abefe40
	static float K2_GetTimerElapsedTime(Object* Object, FString FunctionName);// 0x10cc9578 0x788abeff20
	static void K2_ClearTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x10cca9dc 0x788abecaa0
	static void K2_ClearTimerDelegate(delegate Delegate);// 0x10ccb110 0x788abecb80
	static void K2_ClearTimer(Object* Object, FString FunctionName);// 0x10cc9d5c 0x788abecc60
	static void K2_ClearAndInvalidateTimerHandle(const Object* WorldContextObject, out TimerHandle Handle);// 0x10cca8ec 0x788abecd40
	static bool IsValidSoftObjectReference(out const Object* SoftObjectReference);// 0x10cce39c 0x788abece20
	static bool IsValidSoftClassReference(out const class Object SoftClassReference);// 0x10ccdd78 0x788abecf00
	static bool IsValidPrimaryAssetType(PrimaryAssetType PrimaryAssetType);// 0x10cb9a30 0x788abecfe0
	static bool IsValidPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x10cb9dc0 0x788abed0c0
	static bool IsValidClass(class Object Class);// 0x10cd0370 0x788abed1a0
	static bool IsValid(const Object* Object);// 0x10cd0424 0x788abed280
	static bool IsUnattended();// 0x10cbab28 0x788abed360
	static bool IsStandalone(const Object* WorldContextObject);// 0x10ccf074 0x788abed440
	static bool IsSplitScreen(const Object* WorldContextObject);// 0x10ccefc8 0x788abed520
	static bool IsServer(const Object* WorldContextObject);// 0x10ccf1cc 0x788abed600
	static bool IsScreensaverEnabled();// 0x10cbbc08 0x788abed6e0
	static bool IsPackagedForDistribution();// 0x10cceee4 0x788abed7c0
	static bool IsLoggedIn(const PlayerController* SpecificPlayer);// 0x10cbbc40 0x788abed8a0
	static bool IsInterstitialAdRequested();// 0x10cbbe3c 0x788abed980
	static bool IsInterstitialAdAvailable();// 0x10cbbe74 0x788abeda60
	static bool IsDedicatedServer(const Object* WorldContextObject);// 0x10ccf120 0x788abedb40
	static bool IsControllerAssignedToGamepad(int ControllerId);// 0x10cbb898 0x788abedc20
	static void HideAdBanner();// 0x10cbbf58 0x788abedd00
	static bool HasMultipleLocalPlayers(const Object* WorldContextObject);// 0x10ccef1c 0x788abedde0
	static bool GetVolumeButtonsHandledBySystem();// 0x10cbba90 0x788abedec0
	static FString GetUniqueDeviceId();// 0x10ccee34 0x788abedfa0
	static FString GetSystemPath(const Object* Object);// 0x10cd0094 0x788abee080
	static bool GetSupportedFullscreenResolutions(out IntPoint[] Resolutions);// 0x10cbc324 0x788abee160
	static Object* GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x10cba490 0x788abee240
	static class Object GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x10cba370 0x788abee320
	static int GetRenderingMaterialQualityLevel();// 0x10cbc3e8 0x788abee400
	static int GetRenderingDetailMode();// 0x10cbc41c 0x788abee4e0
	static FString GetProjectSavedDirectory();// 0x10ccf934 0x788abee5c0
	static FString GetProjectDirectory();// 0x10ccfa94 0x788abee6a0
	static FString GetProjectContentDirectory();// 0x10ccf9e4 0x788abeadc0
	static void GetPrimaryAssetsWithBundleState(out const FName[] RequiredBundles, out const FName[] ExcludedBundles, out const PrimaryAssetType[] ValidTypes, bool bForceCurrentState, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0x10cb9298 0x788abeaea0
	static void GetPrimaryAssetIdList(PrimaryAssetType PrimaryAssetType, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0x10cb9e6c 0x788abeaf80
	static PrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(Object* SoftObjectReference);// 0x10cba0c4 0x788abeb060
	static PrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(class Object SoftClassReference);// 0x10cb9f68 0x788abeb140
	static PrimaryAssetId GetPrimaryAssetIdFromObject(Object* Object);// 0x10cba2c8 0x788abeb220
	static PrimaryAssetId GetPrimaryAssetIdFromClass(class Object Class);// 0x10cba220 0x788abeb300
	static FString[] GetPreferredLanguages();// 0x10cbb4a0 0x788abeb3e0
	static FString GetPlatformUserName();// 0x10ccf4f8 0x788abeb4c0
	static FString GetPlatformUserDir();// 0x10ccf448 0x788abeb5a0
	static FString GetPathName(const Object* Object);// 0x10cd0188 0x788abeb680
	static Object* GetOuterObject(const Object* Object);// 0x10ccfe04 0x788abeb760
	static FString GetObjectName(const Object* Object);// 0x10cd027c 0x788abeb840
	static Object* GetObjectFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x10cba658 0x788abeb920
	static int GetMinYResolutionForUI();// 0x10cbc22c 0x788abeba00
	static int GetMinYResolutionFor3DView();// 0x10cbc1f8 0x788abebae0
	static FString GetLocalCurrencySymbol();// 0x10cbb1e0 0x788abebbc0
	static FString GetLocalCurrencyCode();// 0x10cbb290 0x788abebca0
	static float GetGameTimeInSeconds(const Object* WorldContextObject);// 0x10ccf2ac 0x788abebd80
	static FString GetGamepadControllerName(int ControllerId);// 0x10cbb7a4 0x788abebe60
	static Texture2D* GetGamepadButtonGlyph(FString ButtonKey, int ControllerIndex);// 0x10cbb6a4 0x788abebf40
	static FString GetGameName();// 0x10ccfb44 0x788abec020
	static FString GetGameBundleId();// 0x10ccf5a8 0x788abec100
	static int64 GetFrameCount();// 0x10ccf278 0x788abec1e0
	static FString GetEngineVersion();// 0x10ccfd54 0x788abec2c0
	static FString GetDisplayName(const Object* Object);// 0x10ccffa0 0x788abec3a0
	static FString GetDeviceId();// 0x10cced84 0x788abec480
	static FString GetDefaultLocale();// 0x10cbb340 0x788abec560
	static FString GetDefaultLanguage();// 0x10cbb3f0 0x788abec640
	static bool GetCurrentBundleState(PrimaryAssetId PrimaryAssetId, bool bForceCurrentState, out FName[] OutBundles);// 0x10cb94b4 0x788abec720
	static bool GetConvenientWindowedResolutions(out IntPoint[] Resolutions);// 0x10cbc260 0x788abec800
	static int GetConsoleVariableIntValue(FString VariableName);// 0x10ccbcf0 0x788abec8e0
	static float GetConsoleVariableFloatValue(FString VariableName);// 0x10ccbda4 0x788abec9c0
	static bool GetConsoleVariableBoolValue(FString VariableName);// 0x10ccbc38 0x788abe90e0
	static void GetComponentBounds(const SceneComponent* Component, out Vector Origin, out Vector BoxExtent, out float SphereRadius);// 0x10cbc58c 0x788abe91c0
	static FString GetCommandLine();// 0x10cbb054 0x788abe92a0
	static class Object GetClassFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x10cba5b0 0x788abe9380
	static FString GetClassDisplayName(class Object Class);// 0x10ccfeac 0x788abe9460
	static FString GetBuildVersion();// 0x10ccfca4 0x788abe9540
	static FString GetBuildConfiguration();// 0x10ccfbf4 0x788abe9620
	static int GetAdIDCount();// 0x10cbbf6c 0x788abe9700
	static void GetActorListFromComponentList(out const PrimitiveComponent*[] ComponentList, class Object ActorClassFilter, out Actor*[] OutActorList);// 0x10cbf27c 0x788abe97e0
	static void GetActorBounds(const Actor* Actor, out Vector Origin, out Vector BoxExtent);// 0x10cbc450 0x788abe98c0
	static void ForceCloseAdBanner();// 0x10cbbf44 0x788abe99a0
	static void FlushPersistentDebugLines(const Object* WorldContextObject);// 0x10cbd0cc 0x788abe9a80
	static void FlushDebugStrings(const Object* WorldContextObject);// 0x10cbd37c 0x788abe9b60
	static void ExecuteConsoleCommand(const Object* WorldContextObject, FString Command, PlayerController* SpecificPlayer);// 0x10ccbe58 0x788abe9c40
	static bool EqualEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0x10cce118 0x788abe9d20
	static bool EqualEqual_SoftClassReference(out const class Object A, out const class Object B);// 0x10ccdaf4 0x788abe9e00
	static bool EqualEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0x10cb9848 0x788abe9ee0
	static bool EqualEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0x10cb9bd4 0x788abe9fc0
	static int EndTransaction();// 0x10cba8c8 0x788abea0a0
	static void DrawDebugString(const Object* WorldContextObject, const Vector TextLocation, FString Text, Actor* TestBaseActor, LinearColor TextColor, float Duration);// 0x10cbd414 0x788abea180
	static void DrawDebugSphere(const Object* WorldContextObject, const Vector Center, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0x10cbe218 0x788abea260
	static void DrawDebugPoint(const Object* WorldContextObject, const Vector Position, float Size, LinearColor PointColor, float Duration);// 0x10cbeb50 0x788abea340
	static void DrawDebugPlane(const Object* WorldContextObject, out const Plane PlaneCoordinates, const Vector Location, float Size, LinearColor PlaneColor, float Duration);// 0x10cbd164 0x788abea420
	static void DrawDebugLine(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, LinearColor LineColor, float Duration, float Thickness);// 0x10cbf064 0x788abea500
	static void DrawDebugFrustum(const Object* WorldContextObject, out const Transform FrustumTransform, LinearColor FrustumColor, float Duration, float Thickness);// 0x10cbcee4 0x788abea5e0
	static void DrawDebugFloatHistoryTransform(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, out const Transform DrawTransform, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0x10cbcb58 0x788abea6c0
	static void DrawDebugFloatHistoryLocation(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, Vector DrawLocation, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0x10cbc924 0x788abea7a0
	static void DrawDebugCylinder(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0x10cbdf68 0x788abea880
	static void DrawDebugCoordinateSystem(const Object* WorldContextObject, const Vector AxisLoc, const Rotator AxisRot, float Scale, float Duration, float Thickness);// 0x10cbe474 0x788abea960
	static void DrawDebugConeInDegrees(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0x10cbd8d8 0x788abeaa40
	static void DrawDebugCone(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0x10cbdc20 0x788abeab20
	static void DrawDebugCircle(const Object* WorldContextObject, Vector Center, float Radius, int NumSegments, LinearColor LineColor, float Duration, float Thickness, Vector YAxis, Vector ZAxis, bool bDrawAxis);// 0x10cbed14 0x788abeac00
	static void DrawDebugCapsule(const Object* WorldContextObject, const Vector Center, float HalfHeight, float Radius, const Rotator Rotation, LinearColor LineColor, float Duration, float Thickness);// 0x10cbd62c 0x788abeace0
	static void DrawDebugCamera(const CameraActor* CameraActor, LinearColor CameraColor, float Duration);// 0x10cbcdb8 0x788abe7400
	static void DrawDebugBox(const Object* WorldContextObject, const Vector Center, Vector Extent, LinearColor LineColor, const Rotator Rotation, float Duration, float Thickness);// 0x10cbe680 0x788abe74e0
	static void DrawDebugArrow(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, float ArrowSize, LinearColor LineColor, float Duration, float Thickness);// 0x10cbe8ec 0x788abe75c0
	static bool DoesImplementInterface(const Object* TestObject, class Interface Interface);// 0x10ccf354 0x788abe76a0
	static void DelayUntilNextTick(const Object* WorldContextObject, LatentActionInfo LatentInfo);// 0x10ccb88c 0x788abe7780
	static void Delay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0x10ccb97c 0x788abe7860
	static void CreateCopyForUndoBuffer(Object* ObjectToModify);// 0x10cbc718 0x788abe7940
	static FString ConvertToRelativePath(FString Filename);// 0x10ccf840 0x788abe7a20
	static FString ConvertToAbsolutePath(FString Filename);// 0x10ccf74c 0x788abe7b00
	static Object* Conv_SoftObjPathToSoftObjRef(out const SoftObjectPath SoftObjectPath);// 0x10cce844 0x788abe7be0
	static FString Conv_SoftObjectReferenceToString(out const Object* SoftObjectReference);// 0x10cce278 0x788abe7cc0
	static Object* Conv_SoftObjectReferenceToObject(out const Object* SoftObject);// 0x10ccd758 0x788abe7da0
	static FString Conv_SoftClassReferenceToString(out const class Object SoftClassReference);// 0x10ccdc54 0x788abe7e80
	static class Object Conv_SoftClassReferenceToClass(out const class Object SoftClass);// 0x10ccd678 0x788abe7f60
	static class Object Conv_SoftClassPathToSoftClassRef(out const SoftClassPath SoftClassPath);// 0x10cce480 0x788abe8040
	static FString Conv_PrimaryAssetTypeToString(PrimaryAssetType PrimaryAssetType);// 0x10cb993c 0x788abe8120
	static FString Conv_PrimaryAssetIdToString(PrimaryAssetId PrimaryAssetId);// 0x10cb9ccc 0x788abe8200
	static Object* Conv_ObjectToSoftObjectReference(Object* Object);// 0x10ccd558 0x788abe82e0
	static class Object Conv_ObjectToClass(Object* Object, class Object Class);// 0x10ccec94 0x788abe83c0
	static Object* Conv_InterfaceToObject(out const interface classNone Interface);// 0x10ccebe0 0x788abe84a0
	static class Object Conv_ClassToSoftClassReference(out const class Object Class);// 0x10ccd42c 0x788abe8580
	static void ControlScreensaver(bool bAllowScreenSaver);// 0x10cbbb68 0x788abe8660
	static bool ComponentOverlapComponents(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x10cc65b0 0x788abe8740
	static bool ComponentOverlapActors(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x10cc6834 0x788abe8820
	static void CollectGarbage();// 0x10cbc088 0x788abe8900
	static bool CapsuleTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc1e88 0x788abe89e0
	static bool CapsuleTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cbf8ac 0x788abe8ac0
	static bool CapsuleTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc44c0 0x788abe8ba0
	static bool CapsuleTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc19ac 0x788abe8c80
	static bool CapsuleTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cbf3dc 0x788abe8d60
	static bool CapsuleTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc3ff4 0x788abe8e40
	static bool CapsuleOverlapComponents(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x10cc6ab8 0x788abe8f20
	static bool CapsuleOverlapActors(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x10cc6db0 0x788abe9000
	static bool CanLaunchURL(FString URL);// 0x10cbc09c 0x788a88d0c0
	static void CancelTransaction(const int index);// 0x10cba830 0x788a88cfe0
	static void BreakSoftObjectPath(SoftObjectPath InSoftObjectPath, out FString PathString);// 0x10cce980 0x788a88cf00
	static void BreakSoftClassPath(SoftClassPath InSoftClassPath, out FString PathString);// 0x10cce5bc 0x788a88ce20
	static bool BoxTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc2888 0x788a88cd40
	static bool BoxTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc028c 0x788a88cc60
	static bool BoxTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc4ea0 0x788a88cb80
	static bool BoxTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc23a4 0x788a88caa0
	static bool BoxTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cbfdb8 0x788a88ff20
	static bool BoxTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x10cc49cc 0x788a88fe40
	static bool BoxOverlapComponents(const Object* WorldContextObject, const Vector BoxPos, Vector Extent, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x10cc70a8 0x788a88fd60
	static bool BoxOverlapActors(const Object* WorldContextObject, const Vector BoxPos, Vector BoxExtent, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x10cc7354 0x788a88fc80
	static int BeginTransaction(FString Context, FText Description, Object* PrimaryObject);// 0x10cba8fc 0x788a88fba0
	static DebugFloatHistory AddFloatHistorySample(float Value, out const DebugFloatHistory FloatHistory);// 0x10cbc7b0 0x788a88fac0

--------------------------------
Class: Vector3f
	float X;//[Offset: 0x0, Size: 0x4] 0x788a4dd080
	float Y;//[Offset: 0x4, Size: 0x4] 0x788a4dd000
	float Z;//[Offset: 0x8, Size: 0x4] 0x788a4dcf80

--------------------------------
Class: UserActivity
	FString ActionName;//[Offset: 0x0, Size: 0x10] 0x787375d780

--------------------------------
Class: GenericStruct
	int Data;//[Offset: 0x0, Size: 0x4] 0x787375dd80

--------------------------------
Class: CollisionProfileName
	FName Name;//[Offset: 0x0, Size: 0x8] 0x787375d200

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8] 0x7873754000

--------------------------------
Class: DebugFloatHistory
	float[] Samples;//[Offset: 0x0, Size: 0x10] 0x78736a5420
	int MaxSamples;//[Offset: 0x10, Size: 0x4] 0x788ab7ff00
	float MinValue;//[Offset: 0x14, Size: 0x4] 0x788ab7fe80
	float MaxValue;//[Offset: 0x18, Size: 0x4] 0x788ab7fe00
	bool bAutoAdjustMinMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x788ab7fd80

--------------------------------
Class: LevelPartitionInterface.Interface.Object

--------------------------------
Class: LevelInstance.Actor.Object
	World* CookedWorldAsset;//[Offset: 0x288, Size: 0x28] 0x7873f2d000

--------------------------------
Class: LevelInstanceEditorInstanceActor.Actor.Object

--------------------------------
Class: LevelStreamingAlwaysLoaded.LevelStreaming.Object

--------------------------------
Class: LevelInstancePivot.Actor.Object

--------------------------------
Class: LevelStreamingLevelInstance.LevelStreamingDynamic.LevelStreaming.Object

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x178, Size: 0x1] 0x7873f2f580
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x178, Size: 0x1] 0x7873f2f600
	static LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride, class LevelStreamingDynamic OptionalLevelStreamingClass, bool bLoadAsTempPackage);// 0x10ce5960 0x7873f19380
	static LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride, class LevelStreamingDynamic OptionalLevelStreamingClass, bool bLoadAsTempPackage);// 0x10ce5ce8 0x7873f19460

--------------------------------
Class: LevelScriptBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LightMapVirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	int8[] TypeToLayer;//[Offset: 0x2e8, Size: 0x10] 0x7873ee0060

--------------------------------
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassPortalComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x2b0, Size: 0x8] 0x7873f2ec00

--------------------------------
Class: LightmassPrimitiveSettingsObject.Object
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x28, Size: 0x18] 0x7873f2eb80

--------------------------------
Class: LightWeightInstanceManager.Actor.Object
	class Actor* RepresentedClass;//[Offset: 0x298, Size: 0x8] 0x7873ee25e0
	class Actor* AcceptedClass;//[Offset: 0x2a0, Size: 0x8] 0x7873ee2680
	Transform[] InstanceTransforms;//[Offset: 0x2a8, Size: 0x10] 0x7873ee2720
	int[] FreeIndices;//[Offset: 0x308, Size: 0x10] 0x7873ee27c0
	bool[] ValidIndices;//[Offset: 0x318, Size: 0x10] 0x7873ee2860
	void OnRep_Transforms();// 0x10cee434 0x7873f1c720

--------------------------------
Class: LODActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x288, Size: 0x8] 0x7873f30b00
	<HLODInstancingKey,InstancedStaticMeshComponent*> InstancedStaticMeshComponents;//[Offset: 0x290, Size: 0x50] 0x787386ca00
	HLODProxy* Proxy;//[Offset: 0x2e0, Size: 0x8] 0x7873f30c80
	FName Key;//[Offset: 0x2e8, Size: 0x8] 0x7873f30d00
	float LODDrawDistance;//[Offset: 0x2f0, Size: 0x4] 0x7873f30d80
	int LODLevel;//[Offset: 0x2f4, Size: 0x4] 0x7873f30e00
	Actor*[] SubActors;//[Offset: 0x2f8, Size: 0x10] 0x7873ee20e0
	byte CachedNumHLODLevels;//[Offset: 0x308, Size: 0x1] 0x7873f30f00

--------------------------------
Class: HLODInstancingKey
	StaticMesh* StaticMesh;//[Offset: 0x0, Size: 0x8] 0x78739ea100
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x78739ea180

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x5e0, Size: 0x10] 0x7873bbf9c0
	Matrix[] PerInstancePrevTransform;//[Offset: 0x5f0, Size: 0x10] 0x7873bbfa60
	int NumCustomDataFloats;//[Offset: 0x600, Size: 0x4] 0x7873ca3a00
	float[] PerInstanceSMCustomData;//[Offset: 0x608, Size: 0x10] 0x7873bbfb00
	int InstancingRandomSeed;//[Offset: 0x618, Size: 0x4] 0x7873ca3b00
	InstancedStaticMeshRandomSeed[] AdditionalRandomSeeds;//[Offset: 0x620, Size: 0x10] 0x7873bbfba0
	int InstanceStartCullDistance;//[Offset: 0x630, Size: 0x4] 0x7873ca3c00
	int InstanceEndCullDistance;//[Offset: 0x634, Size: 0x4] 0x7873ca3c80
	int[] InstanceReorderTable;//[Offset: 0x638, Size: 0x10] 0x7873bbfc40
	int NumPendingLightmaps;//[Offset: 0x700, Size: 0x4] 0x7873ca3d80
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x708, Size: 0x10] 0x7873bbfce0
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x10c3b64c 0x7873c951e0
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0x10c3b9dc 0x7873c952c0
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x10c3ae5c 0x7873c953a0
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x10c3b050 0x7873c95480
	bool RemoveInstance(int InstanceIndex);// 0x10c3b124 0x7873c95560
	bool IsValidInstance(int InstanceIndex);// 0x10c3af4c 0x7873c95640
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x10c3b864 0x7873c91d60
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x10c3acb0 0x7873c91e40
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x10c3ab50 0x7873c91f20
	int GetInstanceCount();// 0x10c3b000 0x7873c92000
	void ClearInstances();// 0x10c3b034 0x7873c920e0
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x10c3b440 0x7873c921c0
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x10c3b1e0 0x7873c922a0
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x10c3bb80 0x7873c92380
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices, bool bWorldSpace);// 0x10c3bc6c 0x7873c92460
	int AddInstance(out const Transform InstanceTransform, bool bWorldSpace);// 0x10c3be1c 0x7873c92540

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x80] 0x78739e5200

--------------------------------
Class: InstancedStaticMeshRandomSeed
	int StartInstanceIndex;//[Offset: 0x0, Size: 0x4] 0x78739e5100
	int RandomSeed;//[Offset: 0x4, Size: 0x4] 0x78739e5180

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: HLODProxy.Object
	HLODProxyMesh[] ProxyMeshes;//[Offset: 0x28, Size: 0x10] 0x7873dba600
	<HLODProxyDesc*,HLODProxyMesh> HLODActors;//[Offset: 0x38, Size: 0x50] 0x787386cb80

--------------------------------
Class: HLODProxyMesh
	LODActor* LODActor;//[Offset: 0x0, Size: 0x1c] 0x78739e2180
	StaticMesh* StaticMesh;//[Offset: 0x20, Size: 0x8] 0x78739e2200
	FName Key;//[Offset: 0x28, Size: 0x8] 0x78739e2280

--------------------------------
Class: LODSyncInterface.Interface.Object

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x40, Size: 0x10] 0x7873f47100
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7873f47180
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x7873f47200

--------------------------------
Class: MaterialShaderQualitySettings.Object
	<FName,ShaderPlatformQualitySettings*> ForwardSettingMap;//[Offset: 0x28, Size: 0x50] 0x787386bd40

--------------------------------
Class: ShaderPlatformQualitySettings.Object
	MaterialQualityOverrides QualityOverrides;//[Offset: 0x28, Size: 0x9] 0x7873c35780

--------------------------------
Class: MaterialQualityOverrides
	bool bDiscardQualityDuringCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873920880
	bool bEnableOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7873920900
	bool bForceFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7873920980
	bool bForceNonMetal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7873920a00
	bool bForceDisableLMDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7873920a80
	bool bForceLQReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7873920b00
	bool bForceDisablePreintegratedGF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x7873920b80
	bool bDisableMaterialNormalCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1] 0x7873920c00
	enum MobileShadowQuality;//[Offset: 0x8, Size: 0x1] 0x78736afec0

--------------------------------
Class: MaterialExpressionAbs.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7873f34b00

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8] 0x7873a6e000
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8] 0x7873a6e080
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7873a6e100

--------------------------------
Class: MaterialExpressionActorPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x48, Size: 0x14] 0x7873a6df00

--------------------------------
Class: MaterialExpressionTextureBase.MaterialExpression.Object
	Texture* Texture;//[Offset: 0x40, Size: 0x8] 0x7873a6df80

--------------------------------
Class: MaterialExpressionAppendVector.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7873f34680
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7873f34700

--------------------------------
Class: MaterialExpressionArcsine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7873f34500

--------------------------------
Class: MaterialExpressionArctangent2.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0x14] 0x7873f34300
	ExpressionInput X;//[Offset: 0x50, Size: 0x14] 0x7873f34380

--------------------------------
Class: MaterialExpressionAtmosphericFogColor.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14] 0x7873f36200

--------------------------------
Class: MaterialExpressionBentNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7873f36180

--------------------------------
Class: MaterialExpressionCustomOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionBlackBody.MaterialExpression.Object
	ExpressionInput Temp;//[Offset: 0x3c, Size: 0x14] 0x7873f35f00

--------------------------------
Class: MaterialExpressionBumpOffset.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0x14] 0x7873f35900
	ExpressionInput Height;//[Offset: 0x50, Size: 0x14] 0x7873f35980
	ExpressionInput HeightRatioInput;//[Offset: 0x64, Size: 0x14] 0x7873f35a00
	float HeightRatio;//[Offset: 0x78, Size: 0x4] 0x7873f35a80
	float ReferencePlane;//[Offset: 0x7c, Size: 0x4] 0x7873f35b00
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4] 0x7873f35b80

--------------------------------
Class: MaterialExpressionCeil.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7873f35880

--------------------------------
Class: MaterialExpressionChannelMaskParameter.MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	byte MaskChannel;//[Offset: 0x66, Size: 0x1] 0x7873f35580

--------------------------------
Class: MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	LinearColor DefaultValue;//[Offset: 0x54, Size: 0x10] 0x7873f35600
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x7873f35680
	byte PrimitiveDataIndex;//[Offset: 0x65, Size: 0x1] 0x7873f35700

--------------------------------
Class: MaterialExpressionParameter.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x7873f35780
	Guid ExpressionGuid;//[Offset: 0x44, Size: 0x10] 0x7873f35800

--------------------------------
Class: MaterialExpressionCloudSampleAttribute.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionComponentMask.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7873f36c80
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7873f36d00
	bool G;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x7873f36d80
	bool B;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1] 0x7873f36e00
	bool A;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1] 0x7873f36e80

--------------------------------
Class: MaterialExpressionConstant2Vector.MaterialExpression.Object
	float R;//[Offset: 0x3c, Size: 0x4] 0x7873f36980
	float G;//[Offset: 0x40, Size: 0x4] 0x7873f36a00

--------------------------------
Class: MaterialExpressionConstantBiasScale.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7873f36700
	float Bias;//[Offset: 0x50, Size: 0x4] 0x7873f36780
	float Scale;//[Offset: 0x54, Size: 0x4] 0x7873f36800

--------------------------------
Class: MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	float DefaultValue;//[Offset: 0x54, Size: 0x4] 0x7873f36380
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7873f36400
	byte PrimitiveDataIndex;//[Offset: 0x59, Size: 0x1] 0x7873f36480

--------------------------------
Class: MaterialExpressionDBufferTexture.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0x14] 0x7873f37e80
	byte DBufferTextureId;//[Offset: 0x50, Size: 0x1] 0x7873f37f00

--------------------------------
Class: MaterialExpressionDecalDerivative.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDeltaTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDeriveNormalZ.MaterialExpression.Object
	ExpressionInput InXY;//[Offset: 0x3c, Size: 0x14] 0x7873f37880

--------------------------------
Class: MaterialExpressionDistanceCullFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDistanceToNearestSurface.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0x14] 0x7873f37400

--------------------------------
Class: MaterialExpressionDoubleVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	Vector4d DefaultValue;//[Offset: 0x60, Size: 0x20] 0x7873f39180

--------------------------------
Class: MaterialExpressionExecEnd.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionFeatureLevelSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x7873f38e00

--------------------------------
Class: MaterialExpressionFontSample.MaterialExpression.Object
	Font* Font;//[Offset: 0x40, Size: 0x8] 0x7873f38b80
	int FontTexturePage;//[Offset: 0x48, Size: 0x4] 0x7873f38c00

--------------------------------
Class: MaterialExpressionFrac.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7873f38700

--------------------------------
Class: MaterialExpressionFunctionOutput.MaterialExpression.Object
	FName OutputName;//[Offset: 0x3c, Size: 0x8] 0x7873f39e00
	FString Description;//[Offset: 0x48, Size: 0x10] 0x7873f39e80
	int SortPriority;//[Offset: 0x58, Size: 0x4] 0x7873f39f00
	ExpressionInput A;//[Offset: 0x5c, Size: 0x14] 0x7873f39f80
	bool bLastPreviewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7873f3a000
	Guid ID;//[Offset: 0x74, Size: 0x10] 0x7873f3a080

--------------------------------
Class: MaterialExpressionGetLocal.MaterialExpression.Object
	FName LocalName;//[Offset: 0x3c, Size: 0x8] 0x7873f39d00

--------------------------------
Class: MaterialExpressionHairAttributes.MaterialExpression.Object
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x7873f39a00

--------------------------------
Class: MaterialExpressionIfThenElse.MaterialExpression.Object
	ExpressionExecOutput Then;//[Offset: 0x40, Size: 0x8] 0x7873f3b400
	ExpressionExecOutput Else;//[Offset: 0x48, Size: 0x8] 0x7873f3b480
	ExpressionInput Condition;//[Offset: 0x50, Size: 0x14] 0x7873f3b500

--------------------------------
Class: ExpressionExecOutput
	MaterialExpression* Expression;//[Offset: 0x0, Size: 0x8] 0x78739ea780

--------------------------------
Class: MaterialExpressionLightmassReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0x14] 0x7873f3af80
	ExpressionInput Lightmass;//[Offset: 0x50, Size: 0x14] 0x7873f3b000

--------------------------------
Class: MaterialExpressionLogarithm10.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x3c, Size: 0x14] 0x7873f3ac00

--------------------------------
Class: MaterialExpressionMapARPassthroughCameraUV.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0x14] 0x7873f3c280

--------------------------------
Class: MaterialExpressionMaterialLayerOutput.MaterialExpressionFunctionOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionMin.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7873f3b900
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7873f3b980
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x7873f3ba00
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x7873f3ba80

--------------------------------
Class: MaterialExpressionNamedRerouteBase.MaterialExpressionRerouteBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionRerouteBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0x14] 0x7873f3cf80
	ExpressionInput FilterWidth;//[Offset: 0x50, Size: 0x14] 0x7873f3d000
	float Scale;//[Offset: 0x64, Size: 0x4] 0x7873f3d080
	int Quality;//[Offset: 0x68, Size: 0x4] 0x7873f3d100
	byte NoiseFunction;//[Offset: 0x6c, Size: 0x1] 0x7873f3d180
	bool bTurbulence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 0x1] 0x7873f3d200
	int Levels;//[Offset: 0x70, Size: 0x4] 0x7873f3d280
	float OutputMin;//[Offset: 0x74, Size: 0x4] 0x7873f3d300
	float OutputMax;//[Offset: 0x78, Size: 0x4] 0x7873f3d380
	float LevelScale;//[Offset: 0x7c, Size: 0x4] 0x7873f3d400
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7873f3d480
	uint32 RepeatSize;//[Offset: 0x84, Size: 0x4] 0x7873f3d500

--------------------------------
Class: MaterialExpressionObjectOrientation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionOneMinus.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7873f3ce80

--------------------------------
Class: MaterialExpressionParticleDirection.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticlePositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRelativeTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSubUV.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1] 0x7873f3ca80

--------------------------------
Class: MaterialExpressionPerInstanceCustomData.MaterialExpression.Object
	ExpressionInput DefaultValue;//[Offset: 0x3c, Size: 0x14] 0x7873f3c800
	float ConstDefaultValue;//[Offset: 0x50, Size: 0x4] 0x7873f3c880
	uint32 DataIndex;//[Offset: 0x54, Size: 0x4] 0x7873f3c900

--------------------------------
Class: MaterialExpressionPerInstanceRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedLocalBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreviousFrameSwitch.MaterialExpression.Object
	ExpressionInput CurrentFrame;//[Offset: 0x3c, Size: 0x14] 0x7873f3e400
	ExpressionInput PreviousFrame;//[Offset: 0x50, Size: 0x14] 0x7873f3e480

--------------------------------
Class: MaterialExpressionReflectionCapturePassSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x7873f3e100
	ExpressionInput Reflection;//[Offset: 0x50, Size: 0x14] 0x7873f3e180

--------------------------------
Class: MaterialExpressionRotateAboutAxis.MaterialExpression.Object
	ExpressionInput NormalizedRotationAxis;//[Offset: 0x3c, Size: 0x14] 0x7873f3dd00
	ExpressionInput RotationAngle;//[Offset: 0x50, Size: 0x14] 0x7873f3dd80
	ExpressionInput PivotPoint;//[Offset: 0x64, Size: 0x14] 0x7873f3de00
	ExpressionInput Position;//[Offset: 0x78, Size: 0x14] 0x7873f3de80
	float Period;//[Offset: 0x8c, Size: 0x4] 0x7873f3df00

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14] 0x7873f3f700
	ExpressionInput Specular;//[Offset: 0x50, Size: 0x14] 0x7873f3f780
	ExpressionInput Roughness;//[Offset: 0x64, Size: 0x14] 0x7873f3d700
	ExpressionInput Normal;//[Offset: 0x78, Size: 0x14] 0x7873f3d780
	ExpressionInput WorldHeight;//[Offset: 0x8c, Size: 0x14] 0x7873f3d800
	ExpressionInput Opacity;//[Offset: 0xa0, Size: 0x14] 0x7873f3d880
	ExpressionInput Mask;//[Offset: 0xb4, Size: 0x14] 0x7873f3d900

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSampleParameter.MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x88, Size: 0x8] 0x7873f3f000
	Guid ExpressionGuid;//[Offset: 0x90, Size: 0x10] 0x7873f3f080
	FName Group;//[Offset: 0xa0, Size: 0x8] 0x7873f3f100

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0x14] 0x7873f3f180
	ExpressionInput WorldPosition;//[Offset: 0x50, Size: 0x14] 0x7873f3f200
	ExpressionInput MipValue;//[Offset: 0x64, Size: 0x14] 0x7873f3f280
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x78, Size: 0x8] 0x7873f3f300
	enum MaterialType;//[Offset: 0x80, Size: 0x1] 0x7873ee1780
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1] 0x7873f3f400
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1] 0x7873f3f480
	byte MipValueMode;//[Offset: 0x83, Size: 0x1] 0x7873f3f500
	byte TextureAddressMode;//[Offset: 0x84, Size: 0x1] 0x7873f3f580

--------------------------------
Class: MaterialExpressionSamplePhysicsIntegerField.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14] 0x7873f3ed00
	byte FieldTarget;//[Offset: 0x50, Size: 0x1] 0x7873f3ed80

--------------------------------
Class: MaterialExpressionSceneDepth.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x7873f3e880
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7873f3e900
	ExpressionInput Coordinates;//[Offset: 0x50, Size: 0x14] 0x7873f3e980
	Vector2D ConstInput;//[Offset: 0x68, Size: 0x10] 0x7873f3ea00

--------------------------------
Class: MaterialExpressionSceneTexture.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0x14] 0x7873f3fd80
	byte SceneTextureId;//[Offset: 0x50, Size: 0x1] 0x7873f3fe00
	bool bFiltered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x7873f3fe80

--------------------------------
Class: MaterialExpressionSetMaterialAttributes.MaterialExpression.Object
	ExpressionInput[] Inputs;//[Offset: 0x40, Size: 0x10] 0x7873ee1640
	Guid[] AttributeSetTypes;//[Offset: 0x50, Size: 0x10] 0x7873ee16e0

--------------------------------
Class: MaterialExpressionShadingPathSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x7873f3f880
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0x14] 0x7873f3f900

--------------------------------
Class: MaterialExpressionSine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7873f40f00
	float Period;//[Offset: 0x50, Size: 0x4] 0x7873f40f80

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightIlluminance.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x7873f40b80
	ExpressionInput WorldPosition;//[Offset: 0x40, Size: 0x14] 0x7873f40c00

--------------------------------
Class: MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSmoothStep.MaterialExpression.Object
	ExpressionInput Min;//[Offset: 0x3c, Size: 0x14] 0x7873f40680
	ExpressionInput Max;//[Offset: 0x50, Size: 0x14] 0x7873f40700
	ExpressionInput Value;//[Offset: 0x64, Size: 0x14] 0x7873f40780
	float ConstMin;//[Offset: 0x78, Size: 0x4] 0x7873f40800
	float ConstMax;//[Offset: 0x7c, Size: 0x4] 0x7873f40880
	float ConstValue;//[Offset: 0x80, Size: 0x4] 0x7873f40900

--------------------------------
Class: MaterialExpressionSphereMask.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7873f41d80
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7873f41e00
	ExpressionInput Radius;//[Offset: 0x64, Size: 0x14] 0x7873f41e80
	ExpressionInput Hardness;//[Offset: 0x78, Size: 0x14] 0x7873f41f00
	float AttenuationRadius;//[Offset: 0x8c, Size: 0x4] 0x7873f41f80
	float HardnessPercent;//[Offset: 0x90, Size: 0x4] 0x7873f42000

--------------------------------
Class: MaterialExpressionStaticBool.MaterialExpression.Object
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x7873f41b80

--------------------------------
Class: MaterialExpressionStaticSwitch.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x7873f41700
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7873f41780
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7873f41800
	ExpressionInput Value;//[Offset: 0x64, Size: 0x14] 0x7873f41880

--------------------------------
Class: MaterialExpressionStrataBSDF.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionStrataVolumetricFogCloudBSDF.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput Albedo;//[Offset: 0x3c, Size: 0x14] 0x7873f44000
	ExpressionInput Extinction;//[Offset: 0x50, Size: 0x14] 0x7873f44080
	ExpressionInput EmissiveColor;//[Offset: 0x64, Size: 0x14] 0x7873f44100
	ExpressionInput AmbientOcclusion;//[Offset: 0x78, Size: 0x14] 0x7873f44180

--------------------------------
Class: MaterialExpressionStrataSingleLayerWaterBSDF.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14] 0x7873f43600
	ExpressionInput Metallic;//[Offset: 0x50, Size: 0x14] 0x7873f43680
	ExpressionInput Specular;//[Offset: 0x64, Size: 0x14] 0x7873f43700
	ExpressionInput Roughness;//[Offset: 0x78, Size: 0x14] 0x7873f43780
	ExpressionInput Normal;//[Offset: 0x8c, Size: 0x14] 0x7873f43800
	ExpressionInput EmissiveColor;//[Offset: 0xa0, Size: 0x14] 0x7873f43880
	ExpressionInput TopMaterialOpacity;//[Offset: 0xb4, Size: 0x14] 0x7873f43900
	ExpressionInput WaterAlbedo;//[Offset: 0xc8, Size: 0x14] 0x7873f43980
	ExpressionInput WaterExtinction;//[Offset: 0xdc, Size: 0x14] 0x7873f43a00
	ExpressionInput WaterPhaseG;//[Offset: 0xf0, Size: 0x14] 0x7873f43a80
	ExpressionInput ColorScaleBehindWater;//[Offset: 0x104, Size: 0x14] 0x7873f43b00

--------------------------------
Class: MaterialExpressionStrataAdd.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7873f45200
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7873f45280
	bool bUseParameterBlending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1] 0x7873f43200

--------------------------------
Class: MaterialExpressionSubtract.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7873f44e00
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7873f44e80
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x7873f44f00
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x7873f44f80

--------------------------------
Class: MaterialExpressionTemporalSobol.MaterialExpression.Object
	ExpressionInput index;//[Offset: 0x3c, Size: 0x14] 0x7873f44a80
	ExpressionInput Seed;//[Offset: 0x50, Size: 0x14] 0x7873f44b00
	uint32 ConstIndex;//[Offset: 0x64, Size: 0x4] 0x7873f44b80
	Vector2D ConstSeed;//[Offset: 0x68, Size: 0x10] 0x7873f44c00

--------------------------------
Class: MaterialExpressionTextureObjectParameter.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x5c, Size: 0x8] 0x7873a6dd80
	Guid ExpressionGuid;//[Offset: 0x64, Size: 0x10] 0x7873a6de00
	FName Group;//[Offset: 0x74, Size: 0x8] 0x7873a6de80

--------------------------------
Class: MaterialExpressionTextureSampleParameterCube.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterVolume.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: VolumeTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialExpressionTransform.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7873f44300
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1] 0x7873f44380
	byte TransformType;//[Offset: 0x51, Size: 0x1] 0x7873f44400

--------------------------------
Class: MaterialExpressionTwoSidedSign.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexInterpolator.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7873f45f00

--------------------------------
Class: MaterialExpressionViewProperty.MaterialExpression.Object
	byte Property;//[Offset: 0x39, Size: 0x1] 0x7873f45e80

--------------------------------
Class: MaterialExpressionVolumetricAdvancedMaterialInput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionWorldPosition.MaterialExpression.Object
	byte WorldPositionShaderOffset;//[Offset: 0x39, Size: 0x1] 0x7873f47380

--------------------------------
Class: MaterialFunctionMaterialLayerInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionInstance.MaterialFunctionInterface.Object
	MaterialFunctionInterface* Parent;//[Offset: 0x40, Size: 0x8] 0x7873f46c00
	MaterialFunctionInterface* Base;//[Offset: 0x48, Size: 0x8] 0x7873f46c80
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x50, Size: 0x10] 0x7873ee39e0
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x60, Size: 0x10] 0x7873ee3a80
	DoubleVectorParameterValue[] DoubleVectorParameterValues;//[Offset: 0x70, Size: 0x10] 0x7873ee3b20
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x80, Size: 0x10] 0x7873ee3bc0
	FontParameterValue[] FontParameterValues;//[Offset: 0x90, Size: 0x10] 0x7873ee3c60
	StaticSwitchParameter[] StaticSwitchParameterValues;//[Offset: 0xa0, Size: 0x10] 0x7873ee3d00
	StaticComponentMaskParameter[] StaticComponentMaskParameterValues;//[Offset: 0xb0, Size: 0x10] 0x7873ee3da0
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0xc0, Size: 0x10] 0x7873ee1500

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x1f8, Size: 0x8] 0x7873cafa00
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x10d3808c 0x7873c97080
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x10d38140 0x7873c97160
	float K2_GetScalarParameterValue(FName ParameterName);// 0x10d381f0 0x7873c97240

--------------------------------
Class: MatineeActorCameraAnim.MatineeActor.Actor.Object
	CameraAnim* CameraAnim;//[Offset: 0x330, Size: 0x8] 0x7873f4a200

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x288, Size: 0x8] 0x7873f4a280
	FName MatineeControllerName;//[Offset: 0x290, Size: 0x8] 0x7873f4a300
	float PlayRate;//[Offset: 0x298, Size: 0x4] 0x7873f4a380
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1] 0x7873f4a400
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 0x1] 0x7873f4a480
	float ForceStartPosition;//[Offset: 0x2a0, Size: 0x4] 0x7873f4a500
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a4, Size: 0x1] 0x7873f48480
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a4, Size: 0x1] 0x7873f48500
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a4, Size: 0x1] 0x7873f48580
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a4, Size: 0x1] 0x7873f48600
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a4, Size: 0x1] 0x7873f48680
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a4, Size: 0x1] 0x7873f48700
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a4, Size: 0x1] 0x7873f48780
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2a4, Size: 0x1] 0x7873f48800
	int PreferredSplitScreenNum;//[Offset: 0x2a8, Size: 0x4] 0x7873f48880
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ac, Size: 0x1] 0x7873f48900
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ac, Size: 0x1] 0x7873f48980
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ac, Size: 0x1] 0x7873f48a00
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ac, Size: 0x1] 0x7873f48a80
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x2b0, Size: 0x10] 0x7873ee34e0
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c0, Size: 0x1] 0x7873f48b80
	InterpGroupInst*[] GroupInst;//[Offset: 0x2c8, Size: 0x10] 0x7873ee3580
	CameraCutInfo[] CameraCuts;//[Offset: 0x2d8, Size: 0x10] 0x7873ee3620
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1] 0x7873f48d00
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8, Size: 0x1] 0x7873f48d80
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e8, Size: 0x1] 0x7873f48e00
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e8, Size: 0x1] 0x7873f48e80
	float InterpPosition;//[Offset: 0x2ec, Size: 0x4] 0x7873f48f00
	byte ReplicationForceIsPlaying;//[Offset: 0x2f4, Size: 0x1] 0x7873f48f80
	delegate OnPlay;//[Offset: 0x2f8, Size: 0x10] 0x7873f49000
	delegate OnStop;//[Offset: 0x308, Size: 0x10] 0x7873f49080
	delegate OnPause;//[Offset: 0x318, Size: 0x10] 0x7873f49100
	void Stop();// 0x10d421b4 0x7873f1dfa0
	void SetPosition(float NewPosition, bool bJump);// 0x10d42080 0x7873f1e080
	void SetLoopingState(bool bNewLooping);// 0x10d41fac 0x7873f1e160
	void Reverse();// 0x10d42198 0x7873f1e240
	void Play();// 0x10d421d0 0x7873f1e320
	void Pause();// 0x10d4217c 0x7873f1e400
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x10d41e54 0x7873f1e4e0
	void ChangePlaybackDirection();// 0x10d42064 0x7873f1e5c0

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4] 0x7873e5f000
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4] 0x7873e5f080
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10] 0x7873dbe0c0
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8] 0x7873e5f180
	float EdSectionStart;//[Offset: 0x48, Size: 0x4] 0x7873e5f200
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4] 0x7873e5f280
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7873e5f300
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8] 0x7873e5f380
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10] 0x7873dbe160

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8] 0x78739ee400
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10] 0x78739b4520

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x78739ee500
	float Timestamp;//[Offset: 0x18, Size: 0x4] 0x78739ee580

--------------------------------
Class: MatineeInterface.Interface.Object

--------------------------------
Class: MeshMergeCullingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: MeshVertexPainterKismetLibrary.BlueprintFunctionLibrary.Object
	static void RemovePaintedVertices(StaticMeshComponent* StaticMeshComponent);// 0x10d4c740 0x7873f1dd00
	static void PaintVerticesSingleColor(StaticMeshComponent* StaticMeshComponent, out const LinearColor FillColor, bool bConvertToSRGB);// 0x10d4c9ac 0x7873f1dde0
	static void PaintVerticesLerpAlongAxis(StaticMeshComponent* StaticMeshComponent, out const LinearColor StartColor, out const LinearColor EndColor, enum Axis, bool bConvertToSRGB);// 0x10d4c7d8 0x7873f1dec0

--------------------------------
Class: NavigationDataInterface.Interface.Object

--------------------------------
Class: NavLinkDefinition.Object
	NavigationLink[] Links;//[Offset: 0x28, Size: 0x10] 0x7873ee3120
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x38, Size: 0x10] 0x7873ee31c0

--------------------------------
Class: NavigationLink.NavigationLinkBase
	Vector Left;//[Offset: 0x30, Size: 0x18] 0x7873a14800
	Vector Right;//[Offset: 0x48, Size: 0x18] 0x7873a14880

--------------------------------
Class: NavigationLinkBase
	float LeftProjectHeight;//[Offset: 0x0, Size: 0x4] 0x7873a14900
	float MaxFallDownLength;//[Offset: 0x4, Size: 0x4] 0x7873a14980
	float SnapRadius;//[Offset: 0xc, Size: 0x4] 0x7873a14a00
	float SnapHeight;//[Offset: 0x10, Size: 0x4] 0x7873a14a80
	NavAgentSelector SupportedAgents;//[Offset: 0x14, Size: 0x4] 0x7873a14b00
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7873a14b80
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x7873a14c00
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x7873a14c80
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x7873a14d00
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1] 0x7873a14d80
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1] 0x7873a14e00
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1] 0x7873a14e80
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1] 0x7873a14f00
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1] 0x7873a14f80
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1] 0x7873a15000
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1] 0x7873a15080
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1] 0x7873a15100
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1] 0x7873a15180
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1] 0x7873a15200
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1] 0x7873a15280
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1] 0x7873a13200
	byte Direction;//[Offset: 0x1c, Size: 0x1] 0x7873a13280
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1] 0x7873a13300
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1] 0x7873a13380
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1] 0x7873a13400
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1] 0x7873a13480
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1] 0x7873a13500
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1] 0x7873a13580
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1] 0x7873a13600
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 0x1] 0x7873a13680
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 0x1] 0x7873a13700
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 0x1] 0x7873a13780
	class NavAreaBase* AreaClass;//[Offset: 0x20, Size: 0x8] 0x78739b6460

--------------------------------
Class: NavigationSegmentLink.NavigationLinkBase
	Vector LeftStart;//[Offset: 0x30, Size: 0x18] 0x7873a14600
	Vector LeftEnd;//[Offset: 0x48, Size: 0x18] 0x7873a14680
	Vector RightStart;//[Offset: 0x60, Size: 0x18] 0x7873a14700
	Vector RightEnd;//[Offset: 0x78, Size: 0x18] 0x7873a14780

--------------------------------
Class: SimulatedClientNetConnection.NetConnection.Player.Object

--------------------------------
Class: NetFaultConfig.EscalationManagerConfig.StatePerObjectConfig.Object

--------------------------------
Class: EscalationManagerConfig.StatePerObjectConfig.Object
	FString[] EscalationSeverity;//[Offset: 0x78, Size: 0x10] 0x7873cc33a0

--------------------------------
Class: StatePerObjectConfig.Object
	FString PerObjectConfigSection;//[Offset: 0x60, Size: 0x10] 0x7873cdba00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7873cdba80

--------------------------------
Class: NetworkSettings.DeveloperSettings.Object
	bool bVerifyPeer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7873f4ad80
	bool bEnableMultiplayerWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7873f4ae00
	int MaxRepArraySize;//[Offset: 0x3c, Size: 0x4] 0x7873f4ae80
	int MaxRepArrayMemory;//[Offset: 0x40, Size: 0x4] 0x7873f4af00
	NetworkEmulationProfileDescription[] NetworkEmulationProfiles;//[Offset: 0x48, Size: 0x10] 0x7873ee3080

--------------------------------
Class: NetworkEmulationProfileDescription
	FString ProfileName;//[Offset: 0x0, Size: 0x10] 0x7873a15b80
	FString ToolTip;//[Offset: 0x10, Size: 0x10] 0x7873a15c00

--------------------------------
Class: Note.Actor.Object

--------------------------------
Class: ObjectElementCounterInterface.Object

--------------------------------
Class: ObjectLibrary.Object
	ClassPtrProperty ObjectBaseClass;//[Size: 0x8] 0x7873ee2ea0
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7873f4a700
	Object*[] Objects;//[Offset: 0x38, Size: 0x10] 0x7873ee2f40
	Object*[] WeakObjects;//[Offset: 0x48, Size: 0x10] 0x7873ee2fe0
	bool bUseWeakReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7873f4a880
	bool bIsFullyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x7873f4a900

--------------------------------
Class: OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: PackageMapClient.PackageMap.Object

--------------------------------
Class: PainCausingVolume.PhysicsVolume.Volume.Brush.Actor.Object
	bool bPainCausing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cd, Size: 0x1] 0x7873f4c480
	float DamagePerSec;//[Offset: 0x2d0, Size: 0x4] 0x7873f4c500
	class DamageType* DamageType;//[Offset: 0x2d8, Size: 0x8] 0x7873ee2d60
	float PainInterval;//[Offset: 0x2e0, Size: 0x4] 0x7873f4c580
	bool bEntryPain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4, Size: 0x1] 0x7873f4c600
	bool BACKUP_bPainCausing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e4, Size: 0x1] 0x7873f4a580
	Controller* DamageInstigator;//[Offset: 0x2e8, Size: 0x8] 0x7873f4a600

--------------------------------
Class: ParticleModuleAccelerationBase.ParticleModule.Object
	bool bAlwaysInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7873f4d000

--------------------------------
Class: ParticleModuleAccelerationDrag.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragCoefficient;//[Offset: 0x30, Size: 0x8] 0x7873f4cd80
	RawDistributionFloat DragCoefficientRaw;//[Offset: 0x38, Size: 0x30] 0x7873f4ce00

--------------------------------
Class: ParticleModuleAttractorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleAttractorPoint.ParticleModuleAttractorBase.ParticleModule.Object
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x60] 0x7873f4e000
	RawDistributionFloat Range;//[Offset: 0x90, Size: 0x30] 0x7873f4e080
	RawDistributionFloat Strength;//[Offset: 0xc0, Size: 0x30] 0x7873f4e100
	bool StrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x7873f4e180
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x7873f4e200
	bool bOverrideVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1] 0x7873f4e280
	bool bUseWorldSpacePosition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1] 0x7873f4e300
	bool Positive_X;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf0, Size: 0x1] 0x7873f4e380
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf0, Size: 0x1] 0x7873f4e400
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf0, Size: 0x1] 0x7873f4e480
	bool Negative_X;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf0, Size: 0x1] 0x7873f4e500
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf1, Size: 0x1] 0x7873f4e580
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf1, Size: 0x1] 0x7873f4e600

--------------------------------
Class: ParticleModuleBeamModifier.ParticleModuleBeamBase.ParticleModule.Object
	byte ModifierType;//[Offset: 0x2b, Size: 0x1] 0x7873f4da00
	BeamModifierOptions PositionOptions;//[Offset: 0x2c, Size: 0x4] 0x7873f4da80
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x60] 0x7873f4db00
	BeamModifierOptions TangentOptions;//[Offset: 0x90, Size: 0x4] 0x7873f4db80
	RawDistributionVector Tangent;//[Offset: 0x98, Size: 0x60] 0x7873f4dc00
	bool bAbsoluteTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1] 0x7873f4dc80
	BeamModifierOptions StrengthOptions;//[Offset: 0xfc, Size: 0x4] 0x7873f4dd00
	RawDistributionFloat Strength;//[Offset: 0x100, Size: 0x30] 0x7873f4dd80

--------------------------------
Class: ParticleModuleBeamBase.ParticleModule.Object

--------------------------------
Class: BeamModifierOptions
	bool bModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7873a15380
	bool bScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7873a15400
	bool bLock;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7873a15480

--------------------------------
Class: ParticleModuleBeamTarget.ParticleModuleBeamBase.ParticleModule.Object
	byte TargetMethod;//[Offset: 0x2b, Size: 0x1] 0x7873f4ff00
	FName TargetName;//[Offset: 0x2c, Size: 0x8] 0x7873f4ff80
	RawDistributionVector Target;//[Offset: 0x38, Size: 0x60] 0x7873f4e780
	bool bTargetAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x7873f4e800
	bool bLockTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x98, Size: 0x1] 0x7873f4e880
	byte TargetTangentMethod;//[Offset: 0x99, Size: 0x1] 0x7873f4e900
	RawDistributionVector TargetTangent;//[Offset: 0xa0, Size: 0x60] 0x7873f4e980
	bool bLockTargetTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1] 0x7873f4ea00
	RawDistributionFloat TargetStrength;//[Offset: 0x108, Size: 0x30] 0x7873f4ea80
	bool bLockTargetStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1] 0x7873f4eb00
	float LockRadius;//[Offset: 0x13c, Size: 0x4] 0x7873f4eb80

--------------------------------
Class: ParticleModuleCollisionBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleColorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleColorScaleOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x30, Size: 0x60] 0x7873f50500
	RawDistributionFloat AlphaScaleOverLife;//[Offset: 0x90, Size: 0x30] 0x7873f50580
	bool bEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7873f50600

--------------------------------
Class: ParticleModuleEventReceiverSpawn.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	RawDistributionFloat SpawnCount;//[Offset: 0x38, Size: 0x30] 0x7873f52000
	bool bUseParticleTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7873f52080
	bool bUsePSysLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x7873f52100
	bool bInheritVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x7873f50080
	RawDistributionVector InheritVelocityScale;//[Offset: 0x70, Size: 0x60] 0x7873f50100
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0xd0, Size: 0x10] 0x7873ee4fc0
	bool bBanPhysicalMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1] 0x7873f50200

--------------------------------
Class: ParticleModuleKillBox.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionVector LowerLeftCorner;//[Offset: 0x30, Size: 0x60] 0x7873f51d80
	RawDistributionVector UpperRightCorner;//[Offset: 0x90, Size: 0x60] 0x7873f51e00
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x7873f51e80
	bool bKillInside;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x7873f51f00
	bool bAxisAlignedAndFixedSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1] 0x7873f51f80

--------------------------------
Class: ParticleModuleKillBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	RawDistributionFloat LifeTime;//[Offset: 0x30, Size: 0x30] 0x7873f51b00

--------------------------------
Class: ParticleModuleLifetimeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1] 0x7873f51480
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x7873f51500
	bool bPreviewLightRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x7873f51580
	float SpawnFraction;//[Offset: 0x30, Size: 0x4] 0x7873f51600
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x38, Size: 0x60] 0x7873f51680
	RawDistributionFloat BrightnessOverLife;//[Offset: 0x98, Size: 0x30] 0x7873f51700
	RawDistributionFloat RadiusScale;//[Offset: 0xc8, Size: 0x30] 0x7873f51780
	RawDistributionFloat LightExponent;//[Offset: 0xf8, Size: 0x30] 0x7873f51800
	LightingChannels LightingChannels;//[Offset: 0x128, Size: 0x1] 0x7873f51880
	float VolumetricScatteringIntensity;//[Offset: 0x12c, Size: 0x4] 0x7873f51900
	bool bHighQualityLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x7873f51980
	bool bShadowCastingLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1] 0x7873f51a00

--------------------------------
Class: ParticleModuleLightBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartLocation;//[Offset: 0x30, Size: 0x60] 0x7873f51280
	float DistributeOverNPoints;//[Offset: 0x90, Size: 0x4] 0x7873f51300
	float DistributeThreshold;//[Offset: 0x94, Size: 0x4] 0x7873f51380

--------------------------------
Class: ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocationEmitter.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x7873f52980
	byte SelectionMethod;//[Offset: 0x34, Size: 0x1] 0x7873f52a00
	bool InheritSourceVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 0x1] 0x7873f52a80
	float InheritSourceVelocityScale;//[Offset: 0x38, Size: 0x4] 0x7873f52b00
	bool bInheritSourceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7873f52b80
	float InheritSourceRotationScale;//[Offset: 0x40, Size: 0x4] 0x7873f52c00

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool RadialVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7873f52200
	RawDistributionFloat StartRadius;//[Offset: 0xc8, Size: 0x30] 0x7873f52280
	RawDistributionFloat StartHeight;//[Offset: 0xf8, Size: 0x30] 0x7873f52300
	byte HeightAxis;//[Offset: 0x128, Size: 0x1] 0x7873f52380

--------------------------------
Class: ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool Positive_X;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7873f52400
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x7873f52480
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x7873f52500
	bool Negative_X;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b, Size: 0x1] 0x7873f52580
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b, Size: 0x1] 0x7873f52600
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b, Size: 0x1] 0x7873f52680
	bool SurfaceOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b, Size: 0x1] 0x7873f52700
	bool Velocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b, Size: 0x1] 0x7873f52780
	RawDistributionFloat VelocityScale;//[Offset: 0x30, Size: 0x30] 0x7873f52800
	RawDistributionVector StartLocation;//[Offset: 0x60, Size: 0x60] 0x7873f52880

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere_Seeded.ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xf0, Size: 0x20] 0x7873f54180

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionFloat StartRadius;//[Offset: 0xc0, Size: 0x30] 0x7873f54200

--------------------------------
Class: ParticleRandomSeedInfo
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7873a15500
	bool bGetSeedFromInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7873a15580
	bool bInstanceSeedIsIndex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7873a15600
	bool bResetSeedOnEmitterLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x7873a15680
	bool bRandomlySelectSeedArray;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x7873a15700
	int[] RandomSeeds;//[Offset: 0x10, Size: 0x10] 0x78739b6320

--------------------------------
Class: ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMaterialBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionVector StartRotation;//[Offset: 0x30, Size: 0x60] 0x7873f53500
	bool bInheritParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7873f53580

--------------------------------
Class: ParticleModuleRotationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x60] 0x7873f53400

--------------------------------
Class: ParticleModuleRotationRateBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotation_Seeded.ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x98, Size: 0x20] 0x7873f53200

--------------------------------
Class: ParticleModuleOrientationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	EmitterDynamicParameter[] DynamicParams;//[Offset: 0x30, Size: 0x10] 0x7873ee4ca0
	int UpdateFlags;//[Offset: 0x40, Size: 0x4] 0x7873f54d80
	bool bUsesVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x7873f54e00

--------------------------------
Class: ParticleModuleParameterBase.ParticleModule.Object

--------------------------------
Class: EmitterDynamicParameter
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7873a16a80
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7873a16b00
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7873a16b80
	byte ValueMethod;//[Offset: 0x9, Size: 0x1] 0x7873a16c00
	bool bScaleVelocityByParamValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x7873a16c80
	RawDistributionFloat ParamValue;//[Offset: 0x10, Size: 0x30] 0x7873a16d00

--------------------------------
Class: ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat StartRotationRate;//[Offset: 0x30, Size: 0x30] 0x7873f55400

--------------------------------
Class: ParticleModuleRotation_Seeded.ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x7873f57380

--------------------------------
Class: ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat StartRotation;//[Offset: 0x30, Size: 0x30] 0x7873f55580

--------------------------------
Class: ParticleModuleSizeMultiplyLife.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x60] 0x7873f57100
	bool MultiplyX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7873f57180
	bool MultiplyY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x7873f57200
	bool MultiplyZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1] 0x7873f57280

--------------------------------
Class: ParticleModuleSizeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSize_Seeded.ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x90, Size: 0x20] 0x7873f56d80

--------------------------------
Class: ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector StartSize;//[Offset: 0x30, Size: 0x60] 0x7873f57300

--------------------------------
Class: ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	SubUVAnimation* Animation;//[Offset: 0x30, Size: 0x8] 0x7873f56380
	RawDistributionFloat SubImageIndex;//[Offset: 0x38, Size: 0x30] 0x7873f56400
	bool bUseRealTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7873f56480

--------------------------------
Class: ParticleModuleSubUVBase.ParticleModule.Object

--------------------------------
Class: SubUVAnimation.Object
	Texture2D* SubUVTexture;//[Offset: 0x28, Size: 0x8] 0x7873fb4600
	int SubImages_Horizontal;//[Offset: 0x30, Size: 0x4] 0x7873fb4680
	int SubImages_Vertical;//[Offset: 0x34, Size: 0x4] 0x7873fb4700
	byte BoundingMode;//[Offset: 0x38, Size: 0x1] 0x7873fb4780
	byte OpacitySourceMode;//[Offset: 0x39, Size: 0x1] 0x7873fb4800
	float AlphaThreshold;//[Offset: 0x3c, Size: 0x4] 0x7873fb4880

--------------------------------
Class: ParticleModuleTrailSource.ParticleModuleTrailBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1] 0x7873f57f00
	FName SourceName;//[Offset: 0x2c, Size: 0x8] 0x7873f57f80
	RawDistributionFloat SourceStrength;//[Offset: 0x38, Size: 0x30] 0x7873f58000
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7873f58080
	int SourceOffsetCount;//[Offset: 0x6c, Size: 0x4] 0x7873f58100
	Vector[] SourceOffsetDefaults;//[Offset: 0x70, Size: 0x10] 0x7873ee4980
	byte SelectionMethod;//[Offset: 0x80, Size: 0x1] 0x7873f58200
	bool bInheritRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1] 0x7873f58280

--------------------------------
Class: ParticleModuleTrailBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleTypeDataBeam2.ParticleModuleTypeDataBase.ParticleModule.Object
	byte BeamMethod;//[Offset: 0x2b, Size: 0x1] 0x7873f59380
	int TextureTile;//[Offset: 0x2c, Size: 0x4] 0x7873f59400
	float TextureTileDistance;//[Offset: 0x30, Size: 0x4] 0x7873f59480
	int Sheets;//[Offset: 0x34, Size: 0x4] 0x7873f57400
	int MaxBeamCount;//[Offset: 0x38, Size: 0x4] 0x7873f57480
	float Speed;//[Offset: 0x3c, Size: 0x4] 0x7873f57500
	int InterpolationPoints;//[Offset: 0x40, Size: 0x4] 0x7873f57580
	bool bAlwaysOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x7873f57600
	int UpVectorStepSize;//[Offset: 0x48, Size: 0x4] 0x7873f57680
	FName BranchParentName;//[Offset: 0x4c, Size: 0x8] 0x7873f57700
	RawDistributionFloat Distance;//[Offset: 0x58, Size: 0x30] 0x7873f57780
	byte TaperMethod;//[Offset: 0x88, Size: 0x1] 0x7873f57800
	RawDistributionFloat TaperFactor;//[Offset: 0x90, Size: 0x30] 0x7873f57880
	RawDistributionFloat TaperScale;//[Offset: 0xc0, Size: 0x30] 0x7873f57900
	bool RenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x7873f57980
	bool RenderDirectLine;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x7873f57a00
	bool RenderLines;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1] 0x7873f57a80
	bool RenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1] 0x7873f57b00

--------------------------------
Class: ParticleModuleTypeDataRibbon.ParticleModuleTypeDataBase.ParticleModule.Object
	int MaxTessellationBetweenParticles;//[Offset: 0x2c, Size: 0x4] 0x7873f5a000
	int SheetsPerTrail;//[Offset: 0x30, Size: 0x4] 0x7873f5a080
	int MaxTrailCount;//[Offset: 0x34, Size: 0x4] 0x7873f5a100
	int MaxParticleInTrailCount;//[Offset: 0x38, Size: 0x4] 0x7873f5a180
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7873f5a200
	bool bDeadTrailsOnSourceLoss;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7873f5a280
	bool bClipSourceSegement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x7873f5a300
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x7873f5a380
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x7873f5a400
	bool bSpawnInitialParticle;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x7873f5a480
	byte RenderAxis;//[Offset: 0x3d, Size: 0x1] 0x7873f5a500
	float TangentSpawningScalar;//[Offset: 0x40, Size: 0x4] 0x7873f58480
	bool bRenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x7873f58500
	bool bRenderSpawnPoints;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1] 0x7873f58580
	bool bRenderTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1] 0x7873f58600
	bool bRenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 0x1] 0x7873f58680
	float TilingDistance;//[Offset: 0x48, Size: 0x4] 0x7873f58700
	float DistanceTessellationStepSize;//[Offset: 0x4c, Size: 0x4] 0x7873f58780
	bool bEnableTangentDiffInterpScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7873f58800
	float TangentTessellationScalar;//[Offset: 0x54, Size: 0x4] 0x7873f58880

--------------------------------
Class: ParticleModuleVectorFieldLocal.ParticleModuleVectorFieldBase.ParticleModule.Object
	VectorField* VectorField;//[Offset: 0x30, Size: 0x8] 0x7873f59900
	Vector RelativeTranslation;//[Offset: 0x38, Size: 0x18] 0x7873f59980
	Rotator RelativeRotation;//[Offset: 0x50, Size: 0x18] 0x7873f59a00
	Vector RelativeScale3D;//[Offset: 0x68, Size: 0x18] 0x7873f59a80
	float Intensity;//[Offset: 0x80, Size: 0x4] 0x7873f59b00
	float Tightness;//[Offset: 0x84, Size: 0x4] 0x7873f59b80
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x7873f59c00
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1] 0x7873f59c80
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x88, Size: 0x1] 0x7873f59d00
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1] 0x7873f59d80
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1] 0x7873f59e00

--------------------------------
Class: ParticleModuleVectorFieldBase.ParticleModule.Object

--------------------------------
Class: VectorField.Object
	Box Bounds;//[Offset: 0x28, Size: 0x38] 0x7873fbb900
	float Intensity;//[Offset: 0x60, Size: 0x4] 0x7873fbb980

--------------------------------
Class: ParticleModuleVectorFieldScale.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScale;//[Offset: 0x30, Size: 0x8] 0x7873f59680
	RawDistributionFloat VectorFieldScaleRaw;//[Offset: 0x38, Size: 0x30] 0x7873f59700

--------------------------------
Class: ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector StartVelocity;//[Offset: 0x30, Size: 0x60] 0x7873f5b480
	RawDistributionFloat StartVelocityRadial;//[Offset: 0x90, Size: 0x30] 0x7873f5b500

--------------------------------
Class: ParticleModuleVelocityBase.ParticleModule.Object
	bool bInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7873f5b580
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x7873f59500

--------------------------------
Class: ParticleModuleVelocityOverLifetime.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector VelOverLife;//[Offset: 0x30, Size: 0x60] 0x7873f5b180
	bool Absolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7873f5b200

--------------------------------
Class: PathFollowingAgentInterface.Interface.Object

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x2b0, Size: 0x8] 0x7873f64080
	ConstrainComponentPropName ComponentName1;//[Offset: 0x2b8, Size: 0x8] 0x7873f64100
	Actor* ConstraintActor2;//[Offset: 0x2c0, Size: 0x8] 0x7873f64180
	ConstrainComponentPropName ComponentName2;//[Offset: 0x2c8, Size: 0x8] 0x7873f64200
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x2e0, Size: 0x8] 0x7873f62180
	delegate OnConstraintBroken;//[Offset: 0x2e8, Size: 0x10] 0x7873f62200
	delegate OnPlasticDeformation;//[Offset: 0x2f8, Size: 0x10] 0x7873f62280
	ConstraintInstance ConstraintInstance;//[Offset: 0x308, Size: 0x270] 0x7873f62300
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x10d9d760 0x7873f70860
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x10d9d6b0 0x7873f70940
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x10d9cb54 0x7873f70a20
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x10d9cc48 0x7873f70b00
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x10d9cd3c 0x7873f70be0
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x10d9d208 0x7873f70cc0
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x10d9d950 0x7873f70da0
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x10d9d2b8 0x7873f70e80
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x10d9da98 0x7873f70f60
	void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold, byte PlasticityType);// 0x10d9c64c 0x7873f71040
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x10d9d0cc 0x7873f71120
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x10d9c788 0x7873f71200
	void SetDisableCollision(bool bDisableCollision);// 0x10d9bf24 0x7873f712e0
	void SetContactTransferScale(float ContactTransferScale);// 0x10d9c3c4 0x7873f713c0
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x10d9c118 0x7873f714a0
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x10d9bfd4 0x7873f71580
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x10d9c210 0x7873f71660
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x10d9dda0 0x7873f71740
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x10d9cf6c 0x7873f71820
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x10d9d4c0 0x7873f71900
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x10d9d410 0x7873f719e0
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x10d9d5b8 0x7873f71ac0
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x10d9c878 0x7873f71ba0
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x10d9c96c 0x7873f71c80
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x10d9ca60 0x7873f1e780
	void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold);// 0x10d9c46c 0x7873f1e860
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x10d9d01c 0x7873f1e940
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x10d9d858 0x7873f1ea20
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x10d9ce30 0x7873f1eb00
	void SetAngularDriveMode(byte DriveMode);// 0x10d9d368 0x7873f1ebe0
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x10d9c55c 0x7873f1ecc0
	bool IsBroken();// 0x10d9bdf0 0x7873f1eda0
	float GetCurrentTwist();// 0x10d9c390 0x7873f1ee80
	float GetCurrentSwing2();// 0x10d9c328 0x7873f1ef60
	float GetCurrentSwing1();// 0x10d9c35c 0x7873f1f040
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x10d9be28 0x7873f1f120
	ConstraintInstanceAccessor GetConstraint();// 0x10d9bdb8 0x7873f1f200
	void GetConstrainedComponents(out PrimitiveComponent* OutComponent1, out FName OutBoneName1, out PrimitiveComponent* OutComponent2, out FName OutBoneName2);// 0x10d9dbf4 0x7873f1f2e0
	void BreakConstraint();// 0x10d9dbe0 0x7873f1f3c0

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 0x8] 0x78739dfd80

--------------------------------
Class: PhysicsThruster.RigidBodyBase.Actor.Object
	PhysicsThrusterComponent* ThrusterComponent;//[Offset: 0x288, Size: 0x8] 0x7873f65d80

--------------------------------
Class: RigidBodyBase.Actor.Object

--------------------------------
Class: PhysicsThrusterComponent.SceneComponent.ActorComponent.Object
	float ThrustStrength;//[Offset: 0x2b0, Size: 0x4] 0x7873f65d00

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x288, Size: 0x8] 0x7873f65c00
	SceneComponent* SceneComponent;//[Offset: 0x290, Size: 0x8] 0x7873f65c80

--------------------------------
Class: PlanarReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x378, Size: 0x8] 0x7873f66800
	float NormalDistortionStrength;//[Offset: 0x380, Size: 0x4] 0x7873f66880
	float PrefilterRoughness;//[Offset: 0x384, Size: 0x4] 0x7873f66900
	float PrefilterRoughnessDistance;//[Offset: 0x388, Size: 0x4] 0x7873f66980
	int ScreenPercentage;//[Offset: 0x38c, Size: 0x4] 0x7873f66a00
	float ExtraFOV;//[Offset: 0x390, Size: 0x4] 0x7873f66a80
	float DistanceFromPlaneFadeStart;//[Offset: 0x394, Size: 0x4] 0x7873f66b00
	float DistanceFromPlaneFadeEnd;//[Offset: 0x398, Size: 0x4] 0x7873f66b80
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x39c, Size: 0x4] 0x7873f66c00
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x3a0, Size: 0x4] 0x7873f66c80
	float AngleFromPlaneFadeStart;//[Offset: 0x3a4, Size: 0x4] 0x7873f66d00
	float AngleFromPlaneFadeEnd;//[Offset: 0x3a8, Size: 0x4] 0x7873f66d80
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 0x1] 0x7873f66e00
	bool bRenderSceneTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 0x1] 0x7873f66e80

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x2b0, Size: 0x1] 0x7873ee6000
	byte CaptureSource;//[Offset: 0x2b1, Size: 0x1] 0x7873f66f80
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b2, Size: 0x1] 0x7873f67000
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b2, Size: 0x1] 0x7873f67080
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b3, Size: 0x1] 0x7873f67100
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x2b8, Size: 0x10] 0x7873ee60a0
	Actor*[] HiddenActors;//[Offset: 0x2c8, Size: 0x10] 0x7873ee6140
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x2d8, Size: 0x10] 0x7873ee61e0
	Actor*[] ShowOnlyActors;//[Offset: 0x2e8, Size: 0x10] 0x7873ee6280
	float LODDistanceFactor;//[Offset: 0x2f8, Size: 0x4] 0x7873f67380
	float MaxViewDistanceOverride;//[Offset: 0x2fc, Size: 0x4] 0x7873f65300
	int CaptureSortPriority;//[Offset: 0x300, Size: 0x4] 0x7873f65380
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1] 0x7873f65400
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x308, Size: 0x10] 0x7873ee6320
	FString ProfilingEventName;//[Offset: 0x358, Size: 0x10] 0x7873f65500
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x10df9c64 0x7873f729a0
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x10df9b68 0x7873f72a80
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x10df98f4 0x7873f72b60
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x10df9ac0 0x7873f72c40
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x10df99c4 0x7873f72d20
	void HideComponent(PrimitiveComponent* InComponent);// 0x10df9e08 0x7873f72e00
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x10df9d0c 0x7873f72ee0
	void ClearShowOnlyComponents();// 0x10df99b0 0x7873f72fc0
	void ClearHiddenComponents();// 0x10df999c 0x7873f730a0

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10] 0x7873a31180
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7873a31200

--------------------------------
Class: PlaneReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadiusScale;//[Offset: 0x328, Size: 0x4] 0x7873f66680
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x330, Size: 0x8] 0x7873f66700
	BoxComponent* PreviewCaptureBox;//[Offset: 0x338, Size: 0x8] 0x7873f66780

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x2ac, Size: 0x8] 0x7873f6af00

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x298, Size: 0x8] 0x7873f6c280
	void SetRadius(float NewRadius);// 0x10dc0104 0x7873f76a60
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x10dc005c 0x7873f76b40

--------------------------------
Class: PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetBoneTransformByName(FName BoneName, out const Transform InTransform, byte BoneSpace);// 0x10dc1ab0 0x7873f7ab20
	void SetBoneScaleByName(FName BoneName, Vector InScale3D, byte BoneSpace);// 0x10dc16fc 0x7873f7ac00
	void SetBoneRotationByName(FName BoneName, Rotator InRotation, byte BoneSpace);// 0x10dc1838 0x7873f7ace0
	void SetBoneLocationByName(FName BoneName, Vector InLocation, byte BoneSpace);// 0x10dc1974 0x7873f77400
	void ResetBoneTransformByName(FName BoneName);// 0x10dc1240 0x7873f774e0
	Transform GetBoneTransformByName(FName BoneName, byte BoneSpace);// 0x10dc15e8 0x7873f775c0
	Vector GetBoneScaleByName(FName BoneName, byte BoneSpace);// 0x10dc12e8 0x7873f776a0
	Rotator GetBoneRotationByName(FName BoneName, byte BoneSpace);// 0x10dc13e8 0x7873f77780
	Vector GetBoneLocationByName(FName BoneName, byte BoneSpace);// 0x10dc14e8 0x7873f77860
	void CopyPoseFromSkeletalComponent(SkeletalMeshComponent* InComponentToCopy);// 0x10dc1198 0x7873f77940

--------------------------------
Class: PoseWatch.Object

--------------------------------
Class: PrecomputedVisibilityVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PreviewMeshCollection.DataAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8] 0x7873f81c00
	PreviewMeshCollectionEntry[] SkeletalMeshes;//[Offset: 0x40, Size: 0x10] 0x7873ee7360

--------------------------------
Class: PreviewMeshCollectionEntry
	SkeletalMesh* SkeletalMesh;//[Offset: 0x0, Size: 0x28] 0x7873a1d280

--------------------------------
Class: ProxyLODMeshSimplificationSettings.DeveloperSettings.Object
	FName ProxyLODMeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x7873f81900

--------------------------------
Class: RadialForceComponent.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x2b0, Size: 0x4] 0x7873f81380
	byte Falloff;//[Offset: 0x2b4, Size: 0x1] 0x7873f81400
	float ImpulseStrength;//[Offset: 0x2b8, Size: 0x4] 0x7873f81480
	bool bImpulseVelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc, Size: 0x1] 0x7873f81500
	bool bIgnoreOwningActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bc, Size: 0x1] 0x7873f81580
	float ForceStrength;//[Offset: 0x2c0, Size: 0x4] 0x7873f81600
	float DestructibleDamage;//[Offset: 0x2c4, Size: 0x4] 0x7873f81680
	byte[] ObjectTypesToAffect;//[Offset: 0x2c8, Size: 0x10] 0x7873ee70e0
	void RemoveObjectTypeToAffect(byte ObjectType);// 0x10ddb278 0x7873f7a340
	void FireImpulse();// 0x10ddb3d8 0x7873f7a420
	void AddObjectTypeToAffect(byte ObjectType);// 0x10ddb328 0x7873f7a500

--------------------------------
Class: RectLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float SourceWidth;//[Offset: 0x3f0, Size: 0x4] 0x7873f82f00
	float SourceHeight;//[Offset: 0x3f4, Size: 0x4] 0x7873f82f80
	float BarnDoorAngle;//[Offset: 0x3f8, Size: 0x4] 0x7873f83000
	float BarnDoorLength;//[Offset: 0x3fc, Size: 0x4] 0x7873f83080
	Texture* SourceTexture;//[Offset: 0x400, Size: 0x8] 0x7873f83100
	void SetSourceWidth(float bNewValue);// 0x10ddc178 0x7873f79ee0
	void SetSourceTexture(Texture* bNewValue);// 0x10ddc220 0x7873f79fc0
	void SetSourceHeight(float NewValue);// 0x10ddc0d0 0x7873f7a0a0
	void SetBarnDoorLength(float NewValue);// 0x10ddbf80 0x7873f7a180
	void SetBarnDoorAngle(float NewValue);// 0x10ddc028 0x7873f7a260

--------------------------------
Class: ReplayNetConnection.NetConnection.Player.Object

--------------------------------
Class: ReplicationConnectionDriver.Object

--------------------------------
Class: RPCDoSDetectionConfig.Object
	bool bRPCDoSDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873f88280
	bool bRPCDoSAnalytics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7873f88300
	int HitchTimeQuotaMS;//[Offset: 0x2c, Size: 0x4] 0x7873f88380
	int HitchSuspendDetectionTimeMS;//[Offset: 0x30, Size: 0x4] 0x7873f88400
	FString[] DetectionSeverity;//[Offset: 0x38, Size: 0x10] 0x7873ee6be0
	int InitialConnectToleranceMS;//[Offset: 0x48, Size: 0x4] 0x7873f86400
	FName[] RPCBlockWhitelist;//[Offset: 0x50, Size: 0x10] 0x7873ee6c80
	RPCAnalyticsThreshold[] RPCAnalyticsThresholds;//[Offset: 0x60, Size: 0x10] 0x7873ee6d20
	double RPCAnalyticsOverrideChance;//[Offset: 0x70, Size: 0x8] 0x7873f86580

--------------------------------
Class: RPCAnalyticsThreshold
	FName RPC;//[Offset: 0x0, Size: 0x8] 0x7873a1f800
	int CountPerSec;//[Offset: 0x8, Size: 0x4] 0x7873a1f880
	double TimePerSec;//[Offset: 0x10, Size: 0x8] 0x7873a1f900

--------------------------------
Class: RuntimeVirtualTextureComponent.SceneComponent.ActorComponent.Object
	Actor* BoundsAlignActor;//[Offset: 0x2b0, Size: 0x28] 0x7873f89280
	bool bSetBoundsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1] 0x7873f89300
	bool bSnapBoundsToLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1] 0x7873f89380
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x2e0, Size: 0x8] 0x7873f89400
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1] 0x7873f89480
	uint32 ScalabilityGroup;//[Offset: 0x2ec, Size: 0x4] 0x7873f87400
	bool bHidePrimitives;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1] 0x7873f87480
	VirtualTextureBuilder* StreamingTexture;//[Offset: 0x2f8, Size: 0x8] 0x7873f87500
	int StreamLowMips;//[Offset: 0x300, Size: 0x4] 0x7873f87580
	bool bBuildStreamingMipsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1] 0x7873f87600
	bool bUseStreamingLowMipsInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1] 0x7873f87680
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306, Size: 0x1] 0x7873f87700
	bool bBuildDebugStreamingMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x307, Size: 0x1] 0x7873f87780
	void Invalidate(out const BoxSphereBounds WorldBounds);// 0x10dea3ac 0x7873f79540

--------------------------------
Class: VirtualTextureBuilder.Object
	VirtualTexture2D* Texture;//[Offset: 0x28, Size: 0x8] 0x7873fbc880
	uint64 BuildHash;//[Offset: 0x30, Size: 0x8] 0x7873fbc900

--------------------------------
Class: VirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0x2e8, Size: 0xc] 0x7873fbc980
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1] 0x7873fbca00
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1] 0x7873fbca80

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4] 0x7873a43d00
	int TileBorderSize;//[Offset: 0x4, Size: 0x4] 0x7873a43d80
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7873a43e00
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x7873a43e80

--------------------------------
Class: RVOAvoidanceInterface.Interface.Object

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x298, Size: 0x8] 0x7873f89100
	void OnInterpToggle(bool bEnable);// 0x10df9110 0x7873f79460

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x378, Size: 0x1] 0x7873f88500
	float FOVAngle;//[Offset: 0x37c, Size: 0x4] 0x7873f88580
	float OrthoWidth;//[Offset: 0x380, Size: 0x4] 0x7873f88600
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x388, Size: 0x8] 0x7873f88680
	byte CompositeMode;//[Offset: 0x390, Size: 0x1] 0x7873f88700
	PostProcessSettings PostProcessSettings;//[Offset: 0x3a0, Size: 0x6b0] 0x7873f88780
	float PostProcessBlendWeight;//[Offset: 0xa50, Size: 0x4] 0x7873f88800
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa54, Size: 0x1] 0x7873f88880
	float CustomNearClippingPlane;//[Offset: 0xa58, Size: 0x4] 0x7873f88900
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5c, Size: 0x1] 0x7873f88980
	Matrix CustomProjectionMatrix;//[Offset: 0xa60, Size: 0x80] 0x7873f88a00
	bool bUseFauxOrthoViewPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 0x1] 0x7873f88a80
	bool bEnableOrthographicTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae1, Size: 0x1] 0x7873f88b00
	int NumXTiles;//[Offset: 0xae4, Size: 0x4] 0x7873f88b80
	int NumYTiles;//[Offset: 0xae8, Size: 0x4] 0x7873f88c00
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaec, Size: 0x1] 0x7873f88c80
	Vector ClipPlaneBase;//[Offset: 0xaf0, Size: 0x18] 0x7873f88d00
	Vector ClipPlaneNormal;//[Offset: 0xb08, Size: 0x18] 0x7873f88d80
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb20, Size: 0x1] 0x7873f88e00
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb20, Size: 0x1] 0x7873f88e80
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb21, Size: 0x1] 0x7873f88f00
	void RemoveBlendable(interface classNone InBlendableObject);// 0x10dfa7c0 0x7873f791c0
	void CaptureScene();// 0x10dfa7ac 0x7873f792a0
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x10dfa868 0x7873f79380

--------------------------------
Class: SkeletalMeshEditorData.Object

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bRealTimeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1] 0x7873f97900
	byte SourceType;//[Offset: 0x2e1, Size: 0x1] 0x7873f97980
	TextureCube* Cubemap;//[Offset: 0x2e8, Size: 0x8] 0x7873f97a00
	float SourceCubemapAngle;//[Offset: 0x2f0, Size: 0x4] 0x7873f97a80
	int CubemapResolution;//[Offset: 0x2f4, Size: 0x4] 0x7873f97b00
	float SkyDistanceThreshold;//[Offset: 0x2f8, Size: 0x4] 0x7873f97b80
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1] 0x7873f97c00
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1] 0x7873f97c80
	LinearColor LowerHemisphereColor;//[Offset: 0x300, Size: 0x10] 0x7873f97d00
	float OcclusionMaxDistance;//[Offset: 0x310, Size: 0x4] 0x7873f97d80
	float Contrast;//[Offset: 0x314, Size: 0x4] 0x7873f97e00
	float OcclusionExponent;//[Offset: 0x318, Size: 0x4] 0x7873f97e80
	float MinOcclusion;//[Offset: 0x31c, Size: 0x4] 0x7873f97f00
	Color OcclusionTint;//[Offset: 0x320, Size: 0x4] 0x7873f97f80
	bool bCloudAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 0x1] 0x7873f98000
	float CloudAmbientOcclusionStrength;//[Offset: 0x328, Size: 0x4] 0x7873f98080
	float CloudAmbientOcclusionExtent;//[Offset: 0x32c, Size: 0x4] 0x7873f98100
	float CloudAmbientOcclusionMapResolutionScale;//[Offset: 0x330, Size: 0x4] 0x7873f98180
	float CloudAmbientOcclusionApertureScale;//[Offset: 0x334, Size: 0x4] 0x7873f98200
	byte OcclusionCombineMode;//[Offset: 0x338, Size: 0x1] 0x7873f98280
	TextureCube* BlendDestinationCubemap;//[Offset: 0x3e8, Size: 0x8] 0x7873f98300
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x10e2c634 0x7873fa27e0
	void SetOcclusionTint(out const Color InTint);// 0x10e2c248 0x7873fa28c0
	void SetOcclusionExponent(float InOcclusionExponent);// 0x10e2c0f8 0x7873fa29a0
	void SetOcclusionContrast(float InOcclusionContrast);// 0x10e2c1a0 0x7873fa2a80
	void SetMinOcclusion(float InMinOcclusion);// 0x10e2c050 0x7873fa2b60
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0x10e2c2f8 0x7873fa2c40
	void SetLightColor(LinearColor NewLightColor);// 0x10e2c58c 0x7873fa2d20
	void SetIntensity(float NewIntensity);// 0x10e2c784 0x7873fa2e00
	void SetIndirectLightingIntensity(float NewIntensity);// 0x10e2c6dc 0x7873fa2ee0
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x10e2c3a8 0x7873fa2fc0
	void SetCubemap(TextureCube* NewCubemap);// 0x10e2c4e4 0x7873fa30a0
	void RecaptureSky();// 0x10e2c03c 0x7873fa3180

--------------------------------
Class: SMInstanceElementAssetDataInterface.Object

--------------------------------
Class: SMInstanceElementSelectionInterface.Object

--------------------------------
Class: SMInstanceManagerProvider.Interface.Object

--------------------------------
Class: SoundNodeAttenuation.SoundNode.Object
	SoundAttenuation* AttenuationSettings;//[Offset: 0x48, Size: 0x8] 0x7873f98880
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x50, Size: 0x3c8] 0x7873f98900
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 0x1] 0x7873f98980

--------------------------------
Class: SoundNode.Object
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 0x10] 0x7873ee9480

--------------------------------
Class: SoundNodeDelay.SoundNode.Object
	float DelayMin;//[Offset: 0x44, Size: 0x4] 0x7873f98680
	float DelayMax;//[Offset: 0x48, Size: 0x4] 0x7873f98700

--------------------------------
Class: SoundNodeDoppler.SoundNode.Object
	float DopplerIntensity;//[Offset: 0x44, Size: 0x4] 0x7873f9a480
	bool bUseSmoothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7873f9a500
	float SmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4] 0x7873f98480

--------------------------------
Class: SoundNodeLooping.SoundNode.Object
	int LoopCount;//[Offset: 0x44, Size: 0x4] 0x7873f99c00
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7873f99c80

--------------------------------
Class: SoundNodeModulator.SoundNode.Object
	float PitchMin;//[Offset: 0x44, Size: 0x4] 0x7873f99980
	float PitchMax;//[Offset: 0x48, Size: 0x4] 0x7873f99a00
	float VolumeMin;//[Offset: 0x4c, Size: 0x4] 0x7873f99a80
	float VolumeMax;//[Offset: 0x50, Size: 0x4] 0x7873f99b00

--------------------------------
Class: SoundNodeParamCrossFade.SoundNodeDistanceCrossFade.SoundNode.Object
	FName ParamName;//[Offset: 0x58, Size: 0x8] 0x7873f9b400

--------------------------------
Class: SoundNodeDistanceCrossFade.SoundNode.Object
	DistanceDatum[] CrossFadeInput;//[Offset: 0x48, Size: 0x10] 0x7873ee9340

--------------------------------
Class: DistanceDatum
	float FadeInDistanceStart;//[Offset: 0x0, Size: 0x4] 0x7873a3ac80
	float FadeInDistanceEnd;//[Offset: 0x4, Size: 0x4] 0x7873a3ad00
	float FadeOutDistanceStart;//[Offset: 0x8, Size: 0x4] 0x7873a3ad80
	float FadeOutDistanceEnd;//[Offset: 0xc, Size: 0x4] 0x7873a3ae00
	float Volume;//[Offset: 0x10, Size: 0x4] 0x7873a3ae80

--------------------------------
Class: SoundNodeSoundClass.SoundNode.Object
	SoundClass* SoundClassOverride;//[Offset: 0x48, Size: 0x8] 0x7873f9af80

--------------------------------
Class: SoundNodeWavePlayer.SoundNodeAssetReferencer.SoundNode.Object
	SoundWave* SoundWaveAssetPtr;//[Offset: 0x48, Size: 0x28] 0x7873f9ad00
	SoundWave* SoundWave;//[Offset: 0x70, Size: 0x8] 0x7873f9ad80
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7873f9ae00

--------------------------------
Class: SoundNodeAssetReferencer.SoundNode.Object

--------------------------------
Class: AudioParameterConversionStatics.BlueprintFunctionLibrary.Object
	static AudioParameter StringToAudioParameter(FName Name, FString String);// 0x10e43b7c 0x7873fa5640
	static AudioParameter StringArrayToAudioParameter(FName Name, FString[] Strings);// 0x10e43420 0x7873fa1d60
	static AudioParameter ObjectToAudioParameter(FName Name, Object* Object);// 0x10e43a78 0x7873fa1e40
	static AudioParameter ObjectArrayToAudioParameter(FName Name, Object*[] Objects);// 0x10e432b8 0x7873fa1f20
	static AudioParameter IntegerToAudioParameter(FName Name, int Integer);// 0x10e43ce4 0x7873fa2000
	static AudioParameter IntegerArrayToAudioParameter(FName Name, int[] Integers);// 0x10e43640 0x7873fa20e0
	static AudioParameter FloatToAudioParameter(FName Name, float Float);// 0x10e43dec 0x7873fa21c0
	static AudioParameter FloatArrayToAudioParameter(FName Name, float[] Floats);// 0x10e437a8 0x7873fa22a0
	static AudioParameter BooleanToAudioParameter(FName Name, bool Bool);// 0x10e43ef4 0x7873fa2380
	static AudioParameter BooleanArrayToAudioParameter(FName Name, bool[] Bools);// 0x10e43910 0x7873fa2460

--------------------------------
Class: SoundfieldSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	FName SoundfieldEncodingFormat;//[Offset: 0x48, Size: 0x8] 0x7873f9e380
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x50, Size: 0x8] 0x7873f9e400
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x58, Size: 0x10] 0x7873eeb000
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x68, Size: 0x8] 0x7873eeb0a0

--------------------------------
Class: SoundfieldEffectBase.Object
	SoundfieldEffectSettingsBase* Settings;//[Offset: 0x28, Size: 0x8] 0x7873ce7d00

--------------------------------
Class: SoundfieldEffectSettingsBase.Object

--------------------------------
Class: SoundSubmixWidgetInterface.Interface.Object
	void OnConstructed(SoundSubmixBase* SoundSubmix);// 0xb8f1ab4 0x7873fa4ae0

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x290, Size: 0x8] 0x7873f9df00

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x548, Size: 0x70] 0x7873ab2b00
	InterpCurveVector SplineInfo;//[Offset: 0x5b8, Size: 0x18] 0x7873ab2b80
	InterpCurveQuat SplineRotInfo;//[Offset: 0x5d0, Size: 0x18] 0x7873ab2c00
	InterpCurveVector SplineScaleInfo;//[Offset: 0x5e8, Size: 0x18] 0x7873ab2c80
	InterpCurveFloat SplineReparamTable;//[Offset: 0x600, Size: 0x18] 0x7873ab2d00
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1] 0x7873ab2d80
	int ReparamStepsPerSegment;//[Offset: 0x61c, Size: 0x4] 0x7873ab2e00
	float Duration;//[Offset: 0x620, Size: 0x4] 0x7873ab2e80
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 0x1] 0x7873ab2f00
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x625, Size: 0x1] 0x7873ab2f80
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x626, Size: 0x1] 0x7873ab3000
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x627, Size: 0x1] 0x7873ab3080
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1] 0x7873ab3100
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x629, Size: 0x1] 0x7873ab3180
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62a, Size: 0x1] 0x7873ab1100
	float LoopPosition;//[Offset: 0x62c, Size: 0x4] 0x7873ab1180
	Vector DefaultUpVector;//[Offset: 0x630, Size: 0x18] 0x7873ab1200
	void UpdateSpline();// 0x10e5378c 0x7873a9bd80
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x10e518e8 0x7873a9be60
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x10e513e4 0x7873a9bf40
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x10e52b18 0x7873a9c020
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x10e51574 0x7873a9c100
	void SetTangentColor(out const LinearColor TangentColor);// 0x10e529b8 0x7873a9c1e0
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x10e51758 0x7873a9c2c0
	void SetSplineWorldPoints(out const Vector[] Points);// 0x10e51c40 0x7873a9c3a0
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x10e50f18 0x7873a9c480
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x10e51d08 0x7873a9c560
	void SetSplineLocalPoints(out const Vector[] Points);// 0x10e51b78 0x7873a9c640
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x10e52a68 0x7873a9c720
	void SetScaleAtSplinePoint(int PointIndex, out const Vector InScaleVector, bool bUpdateSpline);// 0x10e51110 0x7873a9c800
	void SetRotationAtSplinePoint(int PointIndex, out const Rotator InRotation, byte CoordinateSpace, bool bUpdateSpline);// 0x10e51254 0x7873a9c8e0
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x10e519e8 0x7873a9c9c0
	void SetDrawDebug(bool bShow);// 0x10e52908 0x7873a990e0
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x10e4fc34 0x7873a991c0
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x10e526cc 0x7873a992a0
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x10e52810 0x7873a99380
	void RemoveSplinePoint(int index, bool bUpdateSpline);// 0x10e51fd0 0x7873a99460
	bool IsClosedLoop();// 0x10e52694 0x7873a99540
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x10e4f5a8 0x7873a99620
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x10e4e664 0x7873a99700
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x10e4f3f0 0x7873a997e0
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x10e4ec78 0x7873a998c0
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x10e50cf8 0x7873a999a0
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x10e4f918 0x7873a99a80
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x10e4ea18 0x7873a99b60
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x10e4f760 0x7873a99c40
	Vector GetVectorPropertyAtSplinePoint(int index, FName PropertyName);// 0x10e4fd5c 0x7873a99d20
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x10e52bc8 0x7873a99e00
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x10e4e510 0x7873a99ee0
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x10e506f8 0x7873a99fc0
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x10e5328c 0x7873a9a0a0
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x10e4f2f0 0x7873a9a180
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x10e4e204 0x7873a9a260
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x10e502e0 0x7873a9a340
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x10e53024 0x7873a9a420
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x10e4eed8 0x7873a9a500
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x10e4e8c4 0x7873a9a5e0
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x10e50af8 0x7873a9a6c0
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x10e5358c 0x7873a9a7a0
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x10e4f660 0x7873a9a880
	byte GetSplinePointType(int PointIndex);// 0x10e51060 0x7873a9a960
	float GetSplineLength();// 0x10e4fd28 0x7873a9aa40
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x10e4dfac 0x7873a9ab20
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x10e50448 0x7873a9ac00
	Vector GetScaleAtSplineInputKey(float InKey);// 0x10e52e74 0x7873a9ace0
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x10e4f040 0x7873a97400
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x10e4e770 0x7873a974e0
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x10e507f8 0x7873a975c0
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x10e5338c 0x7873a976a0
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x10e4f4a8 0x7873a97780
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x10e4e0b4 0x7873a97860
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x10e504fc 0x7873a97940
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x10e52f28 0x7873a97a20
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x10e4f0f4 0x7873a97b00
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x10e4e3bc 0x7873a97be0
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x10e505f8 0x7873a97cc0
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x10e5318c 0x7873a97da0
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x10e4f1f0 0x7873a97e80
	int GetNumberOfSplineSegments();// 0x10e50eb0 0x7873a97f60
	int GetNumberOfSplinePoints();// 0x10e50ee4 0x7873a98040
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x10e4ed84 0x7873a98120
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x10e50db0 0x7873a98200
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x10e5368c 0x7873a982e0
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x10e4f9d0 0x7873a983c0
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x10e50150 0x7873a984a0
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x10e50008 0x7873a98580
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x10e508f8 0x7873a98660
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x10e4fad0 0x7873a98740
	float GetFloatPropertyAtSplinePoint(int index, FName PropertyName);// 0x10e4fe5c 0x7873a98820
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x10e52cc8 0x7873a98900
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x10e4ff58 0x7873a989e0
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x10e52dc4 0x7873a98ac0
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x10e4eb24 0x7873a98ba0
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x10e50bf8 0x7873a98c80
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x10e5348c 0x7873a98d60
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x10e4f818 0x7873a98e40
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x10e4fb80 0x7873a98f20
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x10e509f8 0x7873a99000
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x10e4d9cc 0x7873a95720
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x10e4d594 0x7873a95800
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x10e4dbdc 0x7873a958e0
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x10e4d704 0x7873a959c0
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x10e4dad4 0x7873a95aa0
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x10e4d7c0 0x7873a95b80
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x10e4d8c4 0x7873a95c60
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x10e4ddec 0x7873a95d40
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x10e4def4 0x7873a95e20
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x10e4dce4 0x7873a95f00
	bool DivideSplineIntoPolylineRecursive(float StartDistanceAlongSpline, float EndDistanceAlongSpline, byte CoordinateSpace, const float MaxSquareDistanceFromSpline, out Vector[] OutPoints);// 0x10e4d39c 0x7873a95fe0
	bool ConvertSplineToPolyLine(byte CoordinateSpace, const float MaxSquareDistanceFromSpline, out Vector[] OutPoints);// 0x10e4d088 0x7873a960c0
	bool ConvertSplineSegmentToPolyLine(int SplinePointStartIndex, byte CoordinateSpace, const float MaxSquareDistanceFromSpline, out Vector[] OutPoints);// 0x10e4d1ec 0x7873a961a0
	void ClearSplinePoints(bool bUpdateSpline);// 0x10e525e4 0x7873a96280
	void AddSplineWorldPoint(out const Vector Position);// 0x10e51f18 0x7873a96360
	void AddSplinePointAtIndex(out const Vector Position, int index, byte CoordinateSpace, bool bUpdateSpline);// 0x10e520c8 0x7873a96440
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x10e5225c 0x7873a96520
	void AddSplineLocalPoint(out const Vector Position);// 0x10e51e60 0x7873a96600
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x10e523a4 0x7873a966e0
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x10e524b0 0x7873a967c0

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18] 0x7873a3b700
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18] 0x7873a3b780
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18] 0x7873a3b800
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18] 0x7873a3b880
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8] 0x7873a3b900
	uint32 Version;//[Offset: 0x68, Size: 0x4] 0x7873a3b980

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10] 0x788a496be0
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x788a4db680
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x788a4dcc00

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4] 0x788a4dad80
	Quat OutVal;//[Offset: 0x10, Size: 0x20] 0x788a4dad00
	Quat ArriveTangent;//[Offset: 0x30, Size: 0x20] 0x788a4dac80
	Quat LeaveTangent;//[Offset: 0x50, Size: 0x20] 0x788a4da980
	byte InterpMode;//[Offset: 0x70, Size: 0x1] 0x788a4daa00

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4] 0x7873a3d480
	Vector Position;//[Offset: 0x8, Size: 0x18] 0x7873a3d500
	Vector ArriveTangent;//[Offset: 0x20, Size: 0x18] 0x7873a3d580
	Vector LeaveTangent;//[Offset: 0x38, Size: 0x18] 0x7873a3d600
	Rotator Rotation;//[Offset: 0x50, Size: 0x18] 0x7873a3d680
	Vector Scale;//[Offset: 0x68, Size: 0x18] 0x7873a3b600
	byte Type;//[Offset: 0x80, Size: 0x1] 0x7873a3b680

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x5e0, Size: 0xb0] 0x7873f9f880
	Vector SplineUpDir;//[Offset: 0x690, Size: 0x18] 0x7873f9f900
	float SplineBoundaryMin;//[Offset: 0x6a8, Size: 0x4] 0x7873f9f980
	Guid CachedMeshBodySetupGuid;//[Offset: 0x6ac, Size: 0x10] 0x7873f9fa00
	BodySetup* BodySetup;//[Offset: 0x6c0, Size: 0x8] 0x7873f9fa80
	float SplineBoundaryMax;//[Offset: 0x6c8, Size: 0x4] 0x7873f9fb00
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6cc, Size: 0x1] 0x7873f9fb80
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6cc, Size: 0x1] 0x7873f9fc00
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6cc, Size: 0x1] 0x7873f9fc80
	byte ForwardAxis;//[Offset: 0x6cd, Size: 0x1] 0x7873f9fd00
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x6d0, Size: 0x4] 0x7873f9fd80
	void UpdateMesh();// 0x10e5cbe4 0x7873fa6a60
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x10e5c97c 0x7873fa6b40
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x10e5c404 0x7873fa6c20
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x10e5c2d4 0x7873fa6d00
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x10e5cab0 0x7873fa6de0
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x10e5c1a8 0x7873fa6ec0
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x10e5c530 0x7873fa6fa0
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x10e5bbbc 0x7873fa7080
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x10e5bcf0 0x7873fa7160
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x10e5c714 0x7873fa7240
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x10e5c07c 0x7873fa7320
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x10e5bf4c 0x7873fa3a40
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x10e5c848 0x7873fa3b20
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x10e5be20 0x7873fa3c00
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x10e5ba8c 0x7873fa3ce0
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x10e5b95c 0x7873fa3dc0
	Vector GetStartTangent();// 0x10e5ca78 0x7873fa3ea0
	Vector2D GetStartScale();// 0x10e5c4fc 0x7873fa3f80
	float GetStartRoll();// 0x10e5c3d0 0x7873fa4060
	Vector GetStartPosition();// 0x10e5cbac 0x7873fa4140
	Vector2D GetStartOffset();// 0x10e5c2a0 0x7873fa4220
	Vector GetSplineUpDir();// 0x10e5bcb8 0x7873fa4300
	byte GetForwardAxis();// 0x10e5bdec 0x7873fa43e0
	Vector GetEndTangent();// 0x10e5c810 0x7873fa44c0
	Vector2D GetEndScale();// 0x10e5c174 0x7873fa45a0
	float GetEndRoll();// 0x10e5c048 0x7873fa4680
	Vector GetEndPosition();// 0x10e5c944 0x7873fa4760
	Vector2D GetEndOffset();// 0x10e5bf18 0x7873fa4840
	float GetBoundaryMin();// 0x10e5bb88 0x7873fa4920
	float GetBoundaryMax();// 0x10e5ba58 0x7873fa4a00

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0x18] 0x7873a3ce00
	Vector StartTangent;//[Offset: 0x18, Size: 0x18] 0x7873a3ce80
	Vector2D StartScale;//[Offset: 0x30, Size: 0x10] 0x7873a3cf00
	float StartRoll;//[Offset: 0x40, Size: 0x4] 0x7873a3cf80
	Vector2D StartOffset;//[Offset: 0x48, Size: 0x10] 0x7873a3d000
	Vector EndPos;//[Offset: 0x58, Size: 0x18] 0x7873a3d080
	Vector2D EndScale;//[Offset: 0x70, Size: 0x10] 0x7873a3d100
	Vector EndTangent;//[Offset: 0x80, Size: 0x18] 0x7873a3d180
	float EndRoll;//[Offset: 0x98, Size: 0x4] 0x7873a3d200
	Vector2D EndOffset;//[Offset: 0xa0, Size: 0x10] 0x7873a3d280

--------------------------------
Class: StaticMeshDescriptionBulkData.MeshDescriptionBaseBulkData.Object

--------------------------------
Class: MeshDescriptionBaseBulkData.Object

--------------------------------
Class: StereoLayerShapeCylinder.StereoLayerShape.Object
	float Radius;//[Offset: 0x28, Size: 0x4] 0x7873fb4200
	float OverlayArc;//[Offset: 0x2c, Size: 0x4] 0x7873fb2180
	int Height;//[Offset: 0x30, Size: 0x4] 0x7873fb2200
	void SetRadius(float InRadius);// 0x10e675dc 0x7873fa8ac0
	void SetOverlayArc(float InOverlayArc);// 0x10e67534 0x7873fa8ba0
	void SetHeight(int InHeight);// 0x10e6748c 0x7873fa8c80

--------------------------------
Class: StereoLayerShape.Object

--------------------------------
Class: StereoLayerComponent.SceneComponent.ActorComponent.Object
	bool bLiveTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1] 0x7873fb5200
	bool bSupportsDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1] 0x7873fb5280
	bool bNoAlphaChannel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1] 0x7873fb3200
	Texture* Texture;//[Offset: 0x2b8, Size: 0x8] 0x7873fb3280
	Texture* LeftTexture;//[Offset: 0x2c0, Size: 0x8] 0x7873fb3300
	bool bQuadPreserveTextureRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1] 0x7873fb3380
	Vector2D QuadSize;//[Offset: 0x2d0, Size: 0x10] 0x7873fb3400
	Box2D UVRect;//[Offset: 0x2e0, Size: 0x28] 0x7873fb3480
	float CylinderRadius;//[Offset: 0x308, Size: 0x4] 0x7873fb3500
	float CylinderOverlayArc;//[Offset: 0x30c, Size: 0x4] 0x7873fb3580
	int CylinderHeight;//[Offset: 0x310, Size: 0x4] 0x7873fb3600
	EquirectProps EquirectProps;//[Offset: 0x318, Size: 0x90] 0x7873fb3680
	byte StereoLayerType;//[Offset: 0x3a8, Size: 0x1] 0x7873fb3700
	byte StereoLayerShape;//[Offset: 0x3a9, Size: 0x1] 0x7873fb3780
	StereoLayerShape* Shape;//[Offset: 0x3b0, Size: 0x8] 0x7873fb3800
	int Priority;//[Offset: 0x3b8, Size: 0x4] 0x7873fb3880
	void SetUVRect(Box2D InUVRect);// 0x10e687ec 0x7873fa7f60
	void SetTexture(Texture* InTexture);// 0x10e68a40 0x7873fa8040
	void SetQuadSize(Vector2D InQuadSize);// 0x10e688bc 0x7873fa8120
	void SetPriority(int InPriority);// 0x10e6861c 0x7873fa8200
	void SetLeftTexture(Texture* InTexture);// 0x10e68998 0x7873fa82e0
	void SetEquirectProps(EquirectProps InScaleBiases);// 0x10e686c4 0x7873fa83c0
	void MarkTextureForUpdate();// 0x10e685ec 0x7873fa84a0
	Box2D GetUVRect();// 0x10e687c8 0x7873fa8580
	Texture* GetTexture();// 0x10e6897c 0x7873fa8660
	Vector2D GetQuadSize();// 0x10e688a0 0x7873fa8740
	int GetPriority();// 0x10e68600 0x7873fa8820
	Texture* GetLeftTexture();// 0x10e68960 0x7873fa8900

--------------------------------
Class: EquirectProps
	Box2D LeftUVRect;//[Offset: 0x0, Size: 0x28] 0x7873a3ec80
	Box2D RightUVRect;//[Offset: 0x28, Size: 0x28] 0x7873a3ed00
	Vector2D LeftScale;//[Offset: 0x50, Size: 0x10] 0x7873a3ed80
	Vector2D RightScale;//[Offset: 0x60, Size: 0x10] 0x7873a3ee00
	Vector2D LeftBias;//[Offset: 0x70, Size: 0x10] 0x7873a3ee80
	Vector2D RightBias;//[Offset: 0x80, Size: 0x10] 0x7873a3ef00

--------------------------------
Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4] 0x7873cd1200
	Timecode GetTimecode();// 0x10e7b9dc 0x7873c968a0
	enum GetSynchronizationState();// 0x10e7b8f8 0x7873c96980
	QualifiedFrameTime GetQualifiedFrameTime();// 0x10e7ba7c 0x7873c96a60
	FrameRate GetFrameRate();// 0x10e7b934 0x7873c96b40
	Timecode GetDelayedTimecode();// 0x10e7b970 0x7873c96c20
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x10e7ba48 0x7873c96d00
	bool FetchTimecode(out QualifiedFrameTime OutFrameTime);// 0x10e7bad4 0x7873c96de0
	void FetchAndUpdate();// 0x10e7bab8 0x7873c96ec0

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8] 0x788a4db080
	FrameRate Rate;//[Offset: 0x8, Size: 0x8] 0x788a4d6c00

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x548, Size: 0x18] 0x7873fb5600
	MaterialInterface* TextMaterial;//[Offset: 0x560, Size: 0x8] 0x7873fb5680
	Font* Font;//[Offset: 0x568, Size: 0x8] 0x7873fb5700
	byte HorizontalAlignment;//[Offset: 0x570, Size: 0x1] 0x7873fb5780
	byte VerticalAlignment;//[Offset: 0x571, Size: 0x1] 0x7873fb5800
	Color TextRenderColor;//[Offset: 0x574, Size: 0x4] 0x7873fb5880
	float XScale;//[Offset: 0x578, Size: 0x4] 0x7873fb5900
	float YScale;//[Offset: 0x57c, Size: 0x4] 0x7873fb5980
	float WorldSize;//[Offset: 0x580, Size: 0x4] 0x7873fb5a00
	float InvDefaultSize;//[Offset: 0x584, Size: 0x4] 0x7873fb5a80
	float HorizSpacingAdjust;//[Offset: 0x588, Size: 0x4] 0x7873fb5b00
	float VertSpacingAdjust;//[Offset: 0x58c, Size: 0x4] 0x7873fb5b80
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x590, Size: 0x1] 0x7873fb5c00
	void SetYScale(float Value);// 0x10e71658 0x7873faa500
	void SetXScale(float Value);// 0x10e71700 0x7873faa5e0
	void SetWorldSize(float Value);// 0x10e71460 0x7873faa6c0
	void SetVertSpacingAdjust(float Value);// 0x10e71508 0x7873faa7a0
	void SetVerticalAlignment(byte Value);// 0x10e7184c 0x7873faa880
	void SetTextRenderColor(Color Value);// 0x10e717a8 0x7873faa960
	void SetTextMaterial(MaterialInterface* Material);// 0x10e71a44 0x7873faaa40
	void SetHorizSpacingAdjust(float Value);// 0x10e715b0 0x7873faab20
	void SetHorizontalAlignment(byte Value);// 0x10e718f4 0x7873faac00
	void SetFont(Font* Value);// 0x10e7199c 0x7873faace0
	void K2_SetText(out const FText Value);// 0x10e71aec 0x7873fa7400
	Vector GetTextWorldSize();// 0x10e713f0 0x7873fa74e0
	Vector GetTextLocalSize();// 0x10e71428 0x7873fa75c0

--------------------------------
Class: TextureCubeArray.Texture.StreamableRenderAsset.Object

--------------------------------
Class: TextureRenderTargetCube.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x218, Size: 0x4] 0x7873fb6880
	LinearColor ClearColor;//[Offset: 0x21c, Size: 0x10] 0x7873fb6900
	byte OverrideFormat;//[Offset: 0x22c, Size: 0x1] 0x7873fb6980
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 0x1] 0x7873fb6a00
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22d, Size: 0x1] 0x7873fb6a80

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 0x98] 0x7873fb7880
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x7873fb7900
	void Stop();// 0x10e7d434 0x7873fac9c0
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x10e7cb60 0x7873fa90e0
	void SetTimelineLengthMode(byte NewLengthMode);// 0x10e7ce28 0x7873fa91c0
	void SetTimelineLength(float NewLength);// 0x10e7ced0 0x7873fa92a0
	void SetPlayRate(float NewRate);// 0x10e7d0bc 0x7873fa9380
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x10e7d280 0x7873fa9460
	void SetNewTime(float NewTime);// 0x10e7cfe0 0x7873fa9540
	void SetLooping(bool bNewLooping);// 0x10e7d19c 0x7873fa9620
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x10e7ca70 0x7873fa9700
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x10e7cd78 0x7873fa97e0
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x10e7cc50 0x7873fa98c0
	void ReverseFromEnd();// 0x10e7d448 0x7873fa99a0
	void Reverse();// 0x10e7d45c 0x7873fa9a80
	void PlayFromStart();// 0x10e7d470 0x7873fa9b60
	void Play();// 0x10e7d484 0x7873fa9c40
	void OnRep_Timeline();// 0x10e7ca5c 0x7873fa9d20
	bool IsReversing();// 0x10e7d3c4 0x7873fa9e00
	bool IsPlaying();// 0x10e7d3fc 0x7873fa9ee0
	bool IsLooping();// 0x10e7d164 0x7873fa9fc0
	float GetTimelineLength();// 0x10e7cfac 0x7873faa0a0
	float GetScaledTimelineLength();// 0x10e7cf78 0x7873faa180
	float GetPlayRate();// 0x10e7d088 0x7873faa260
	float GetPlaybackPosition();// 0x10e7d24c 0x7873faa340
	bool GetIgnoreTimeDilation();// 0x10e7cd40 0x7873faa420

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1] 0x7873a42f00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7873a42f80
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7873a43000
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7873a43080
	float Length;//[Offset: 0x4, Size: 0x4] 0x7873a43100
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x7873a43180
	float Position;//[Offset: 0xc, Size: 0x4] 0x7873a41100
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10] 0x78739b7d60
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10] 0x78739b7e00
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10] 0x78739b7ea0
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10] 0x78739b7f40
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10] 0x7873a41380
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10] 0x7873a41400
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8] 0x7873a41480
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8] 0x7873a41500

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4] 0x7873a41b80
	delegate EventFunc;//[Offset: 0x4, Size: 0x10] 0x7873a41c00

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8] 0x7873a41980
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x7873a41a00
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x7873a41a80
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8] 0x7873a41b00

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8] 0x7873a41780
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x7873a41800
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x7873a41880
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8] 0x7873a41900

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8] 0x7873a41580
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x7873a41600
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x7873a41680
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8] 0x7873a41700

--------------------------------
Class: TriggerSphere.TriggerBase.Actor.Object

--------------------------------
Class: TriggerBase.Actor.Object
	ShapeComponent* CollisionComponent;//[Offset: 0x288, Size: 0x8] 0x7873fb8c00

--------------------------------
Class: TypedElementWorldInterface.Interface.Object
	bool SetWorldTransform(out const ScriptTypedElementHandle InElementHandle, out const Transform InTransform);// 0x10e88164 0x7873faaf80
	bool SetRelativeTransform(out const ScriptTypedElementHandle InElementHandle, out const Transform InTransform);// 0x10e87e9c 0x7873fab060
	bool SetPivotOffset(out const ScriptTypedElementHandle InElementHandle, out const Vector InPivotOffset);// 0x10e87c24 0x7873fab140
	void NotifyMovementStarted(out const ScriptTypedElementHandle InElementHandle);// 0x10e87b48 0x7873fab220
	void NotifyMovementOngoing(out const ScriptTypedElementHandle InElementHandle);// 0x10e87a6c 0x7873fab300
	void NotifyMovementEnded(out const ScriptTypedElementHandle InElementHandle);// 0x10e87990 0x7873fab3e0
	bool IsTemplateElement(out const ScriptTypedElementHandle InElementHandle);// 0x10e8894c 0x7873fab4c0
	bool GetWorldTransform(out const ScriptTypedElementHandle InElementHandle, out Transform OutTransform);// 0x10e882c8 0x7873fab5a0
	bool GetRelativeTransform(out const ScriptTypedElementHandle InElementHandle, out Transform OutTransform);// 0x10e88000 0x7873fab680
	bool GetPivotOffset(out const ScriptTypedElementHandle InElementHandle, out Vector OutPivotOffset);// 0x10e87d60 0x7873fab760
	World* GetOwnerWorld(out const ScriptTypedElementHandle InElementHandle);// 0x10e8869c 0x7873fab840
	Level* GetOwnerLevel(out const ScriptTypedElementHandle InElementHandle);// 0x10e88780 0x7873fab920
	bool GetBounds(out const ScriptTypedElementHandle InElementHandle, out BoxSphereBounds OutBounds);// 0x10e88560 0x7873faba00
	ScriptTypedElementHandle DuplicateElement(out const ScriptTypedElementHandle InElementHandle, World* InWorld, out const Vector InLocationOffset);// 0x10e87464 0x7873fabae0
	bool DeleteElement(out const ScriptTypedElementHandle InElementHandle, World* InWorld, TypedElementSelectionSet* InSelectionSet, out const TypedElementDeletionOptions InDeletionOptions);// 0x10e876d4 0x7873fabbc0
	bool CanMoveElement(out const ScriptTypedElementHandle InElementHandle, const enum InWorldType);// 0x10e8842c 0x7873fabca0
	bool CanEditElement(out const ScriptTypedElementHandle InElementHandle);// 0x10e88864 0x7873fabd80
	bool CanDuplicateElement(out const ScriptTypedElementHandle InElementHandle);// 0x10e875ec 0x7873fabe60
	bool CanDeleteElement(out const ScriptTypedElementHandle InElementHandle);// 0x10e878a8 0x7873fabf40

--------------------------------
Class: ScriptTypedElementHandle

--------------------------------
Class: TypedElementSelectionSet.Object
	delegate OnPreSelectionChange;//[Offset: 0x828, Size: 0x10] 0x7873828600
	delegate OnSelectionChange;//[Offset: 0x838, Size: 0x10] 0x7873828680
	bool SetSelection(out const ScriptTypedElementHandle[] InElementHandles, const TypedElementSelectionOptions InSelectionOptions);// 0xf32630c 0x7873834840
	bool SelectElements(out const ScriptTypedElementHandle[] InElementHandles, const TypedElementSelectionOptions InSelectionOptions);// 0xf32674c 0x7873834920
	bool SelectElement(out const ScriptTypedElementHandle InElementHandle, const TypedElementSelectionOptions InSelectionOptions);// 0xf3268cc 0x7873834a00
	void RestoreSelectionState(out const TypedElementSelectionSetState InSelectionState);// 0xf326db8 0x7873834ae0
	void OnPreChangeDynamic__DelegateSignature(const TypedElementSelectionSet* SelectionSet);// 0xb8f1ab4 0x7873834bc0
	void OnChangeDynamic__DelegateSignature(const TypedElementSelectionSet* SelectionSet);// 0xb8f1ab4 0x7873834ca0
	ScriptTypedElementHandle[] K2_GetSelectedElementHandles(const class Interface InBaseInterfaceType);// 0xf325fe0 0x7873834d80
	bool IsElementSelected(out const ScriptTypedElementHandle InElementHandle, const TypedElementIsSelectedOptions InSelectionOptions);// 0xf326c8c 0x7873834e60
	bool HasSelectedObjects(const class Object InRequiredClass);// 0xf327920 0x7873834f40
	bool HasSelectedElements(const class Interface InBaseInterfaceType);// 0xf327c28 0x7873835020
	Object* GetTopSelectedObject(const class Object InRequiredClass);// 0xf32722c 0x7873835100
	ScriptTypedElementHandle GetSelectionElement(out const ScriptTypedElementHandle InElementHandle, const enum InSelectionMethod);// 0xf3260fc 0x78738351e0
	Object*[] GetSelectedObjects(const class Object InRequiredClass);// 0xf327464 0x78738352c0
	int GetNumSelectedElements();// 0xf327cf8 0x78738353a0
	TypedElementSelectionSetState GetCurrentSelectionState();// 0xf326ec4 0x7873835480
	Object* GetBottomSelectedObject(const class Object InRequiredClass);// 0xf326ff4 0x7873835560
	bool DeselectElements(out const ScriptTypedElementHandle[] InElementHandles, const TypedElementSelectionOptions InSelectionOptions);// 0xf32648c 0x7873835640
	bool DeselectElement(out const ScriptTypedElementHandle InElementHandle, const TypedElementSelectionOptions InSelectionOptions);// 0xf32660c 0x7873831d60
	int CountSelectedObjects(const class Object InRequiredClass);// 0xf3276e8 0x7873831e40
	int CountSelectedElements(const class Interface InBaseInterfaceType);// 0xf327b5c 0x7873831f20
	bool ClearSelection(const TypedElementSelectionOptions InSelectionOptions);// 0xf327d48 0x7873832000
	bool CanSelectElement(out const ScriptTypedElementHandle InElementHandle, const TypedElementSelectionOptions InSelectionOptions);// 0xf326b4c 0x78738320e0
	bool CanDeselectElement(out const ScriptTypedElementHandle InElementHandle, const TypedElementSelectionOptions InSelectionOptions);// 0xf326a0c 0x78738321c0
	bool AllowSelectionModifiers(out const ScriptTypedElementHandle InElementHandle);// 0xf32622c 0x78738322a0

--------------------------------
Class: TypedElementSelectionOptions
	bool bAllowHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873827c00
	bool bAllowGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7873827c80
	bool bAllowLegacyNotifications;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7873827d00
	bool bWarnIfLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7873827d80
	enum ChildElementInclusionMethod;//[Offset: 0x4, Size: 0x1] 0x788ab29520

--------------------------------
Class: TypedElementSelectionSetState
	TypedElementSelectionSet* CreatedFromSelectionSet;//[Offset: 0x0, Size: 0x8] 0x7873829480

--------------------------------
Class: TypedElementIsSelectedOptions
	bool bAllowIndirect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873828f00

--------------------------------
Class: TypedElementDeletionOptions
	bool bVerifyDeletionCanHappen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873a44180
	bool bWarnAboutReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7873a44200
	bool bWarnAboutSoftReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7873a42180

--------------------------------
Class: UserInterfaceSettings.DeveloperSettings.Object
	enum RenderFocusRule;//[Offset: 0x38, Size: 0x1] 0x7873eec220
	<byte,HardwareCursorReference> HardwareCursors;//[Offset: 0x40, Size: 0x50] 0x787386f400
	<byte,SoftClassPath> SoftwareCursors;//[Offset: 0x90, Size: 0x50] 0x787386f4c0
	SoftClassPath DefaultCursor;//[Offset: 0xe0, Size: 0x18] 0x7873fbbc80
	SoftClassPath TextEditBeamCursor;//[Offset: 0xf8, Size: 0x18] 0x7873fbbd00
	SoftClassPath CrosshairsCursor;//[Offset: 0x110, Size: 0x18] 0x7873fbbd80
	SoftClassPath HandCursor;//[Offset: 0x128, Size: 0x18] 0x7873fbbe00
	SoftClassPath GrabHandCursor;//[Offset: 0x140, Size: 0x18] 0x7873fbbe80
	SoftClassPath GrabHandClosedCursor;//[Offset: 0x158, Size: 0x18] 0x7873fbbf00
	SoftClassPath SlashedCircleCursor;//[Offset: 0x170, Size: 0x18] 0x7873fbbf80
	float ApplicationScale;//[Offset: 0x188, Size: 0x4] 0x7873fbc000
	enum UIScaleRule;//[Offset: 0x18c, Size: 0x1] 0x7873eec2c0
	SoftClassPath CustomScalingRuleClass;//[Offset: 0x190, Size: 0x18] 0x7873fbc100
	RuntimeFloatCurve UIScaleCurve;//[Offset: 0x1a8, Size: 0x88] 0x7873fbc180
	bool bAllowHighDPIInGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x7873fbc200
	IntPoint DesignScreenSize;//[Offset: 0x234, Size: 0x8] 0x7873fbc280
	bool bLoadWidgetsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1] 0x7873fbc300
	Object*[] CursorClasses;//[Offset: 0x240, Size: 0x10] 0x7873eec360
	ClassPtrProperty CustomScalingRuleClassInstance;//[Size: 0x8] 0x7873eec400
	DPICustomScalingRule* CustomScalingRule;//[Offset: 0x258, Size: 0x8] 0x7873fbc400

--------------------------------
Class: HardwareCursorReference
	FName CursorPath;//[Offset: 0x0, Size: 0x8] 0x7873a43f00
	Vector2D HotSpot;//[Offset: 0x8, Size: 0x10] 0x7873a43f80

--------------------------------
Class: VectorFieldComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VectorField* VectorField;//[Offset: 0x548, Size: 0x8] 0x7873fbd100
	float Intensity;//[Offset: 0x550, Size: 0x4] 0x7873fbd180
	float Tightness;//[Offset: 0x554, Size: 0x4] 0x7873fbd200
	bool bPreviewVectorField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x558, Size: 0x1] 0x7873fbd280
	void SetIntensity(float NewIntensity);// 0x10e8fab8 0x7873faaea0

--------------------------------
Class: LightMapVirtualTexture.VirtualTexture.Object

--------------------------------
Class: VirtualTexture.Object

--------------------------------
Class: VisualLoggerDebugSnapshotInterface.Interface.Object

--------------------------------
Class: VisualLoggerKismetLibrary.BlueprintFunctionLibrary.Object
	static void RedirectVislog(Object* SourceOwner, Object* DestinationOwner);// 0x10e93b2c 0x7873fae080
	static void LogText(Object* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog);// 0x10e93940 0x7873fae160
	static void LogSegment(Object* WorldContextObject, const Vector SegmentStart, const Vector SegmentEnd, FString Text, LinearColor ObjectColor, const float Thickness, FName CategoryName, bool bAddToMessageLog);// 0x10e93088 0x7873fae240
	static void LogLocation(Object* WorldContextObject, Vector Location, FString Text, LinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog);// 0x10e9365c 0x7873fae320
	static void LogBox(Object* WorldContextObject, Box BoxShape, FString Text, LinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog);// 0x10e933d4 0x7873fae400
	static void EnableRecording(bool bEnabled);// 0x10e93c0c 0x7873fae4e0

--------------------------------
Class: VOIPStatics.BlueprintFunctionLibrary.Object
	static void SetMicThreshold(float InThreshold);// 0x10e9501c 0x7873fadb40

--------------------------------
Class: VolumetricLightmapDensityVolume.Volume.Brush.Actor.Object
	Int32Interval AllowedMipLevelRange;//[Offset: 0x2c0, Size: 0x8] 0x7873fbfe80

--------------------------------
Class: Int32Interval
	int Min;//[Offset: 0x0, Size: 0x4] 0x788a4de100
	int Max;//[Offset: 0x4, Size: 0x4] 0x788a4de080

--------------------------------
Class: WindDirectionalSourceComponent.SceneComponent.ActorComponent.Object
	float Strength;//[Offset: 0x2b0, Size: 0x4] 0x7873fbf800
	float Speed;//[Offset: 0x2b4, Size: 0x4] 0x7873fbf880
	float MinGustAmount;//[Offset: 0x2b8, Size: 0x4] 0x7873fbf900
	float MaxGustAmount;//[Offset: 0x2bc, Size: 0x4] 0x7873fbf980
	float Radius;//[Offset: 0x2c0, Size: 0x4] 0x7873fbfa00
	bool bPointWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1] 0x7873fbfa80
	void SetWindType(enum InNewType);// 0x10e99b00 0x7873fafc80
	void SetStrength(float InNewStrength);// 0x10e99e48 0x7873fafd60
	void SetSpeed(float InNewSpeed);// 0x10e99da0 0x7873fafe40
	void SetRadius(float InNewRadius);// 0x10e99ba8 0x7873faff20
	void SetMinimumGustAmount(float InNewMinGust);// 0x10e99cf8 0x7873facaa0
	void SetMaximumGustAmount(float InNewMaxGust);// 0x10e99c50 0x7873facb80

--------------------------------
Class: LandscapeInfoMap.Object

--------------------------------
Class: WorldPartitionEditorHash.Object

--------------------------------
Class: WorldPartitionLevelStreamingDynamic.LevelStreamingDynamic.LevelStreaming.Object
	bool bShouldBeAlwaysLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1] 0x7873fc1700
	WorldPartitionRuntimeLevelStreamingCell* StreamingCell;//[Offset: 0x17c, Size: 0x8] 0x7873fc1780
	WorldPartition* OuterWorldPartition;//[Offset: 0x184, Size: 0x8] 0x7873fc1800

--------------------------------
Class: WorldPartitionRuntimeLevelStreamingCell.WorldPartitionRuntimeSpatialHashCell.WorldPartitionRuntimeCell.Object
	WorldPartitionLevelStreamingDynamic* LevelStreaming;//[Offset: 0xc8, Size: 0x8] 0x7873fc2d80
	void OnLevelShown();// 0x10e9ec18 0x7873faf4a0
	void OnLevelHidden();// 0x10e9ec04 0x7873faf580

--------------------------------
Class: WorldPartitionRuntimeSpatialHashCell.WorldPartitionRuntimeCell.Object
	Vector Position;//[Offset: 0x88, Size: 0x18] 0x7873fc2e00
	float Extent;//[Offset: 0xa0, Size: 0x4] 0x7873fc2e80
	int Level;//[Offset: 0xa4, Size: 0x4] 0x7873fc2f00

--------------------------------
Class: WorldPartitionMiniMap.Info.Actor.Object
	Box MiniMapWorldBounds;//[Offset: 0x288, Size: 0x38] 0x7873fc1380
	Box2D UVOffset;//[Offset: 0x2c0, Size: 0x28] 0x7873fc1400
	Texture2D* MiniMapTexture;//[Offset: 0x2e8, Size: 0x8] 0x7873fc1480
	<ActorDataLayer> ExcludedDataLayers;//[Offset: 0x2f0, Size: 0x50] 0x7873eedf80
	int MiniMapTileSize;//[Offset: 0x340, Size: 0x4] 0x7873fc1580

--------------------------------
Class: SpatialHashRuntimeGridInfo.Info.Actor.Object
	SpatialHashRuntimeGrid GridSettings;//[Offset: 0x288, Size: 0x1] 0x7873fc2d00

--------------------------------
Class: SpatialHashRuntimeGrid

--------------------------------
Class: WorldPartitionSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool IsStreamingCompleted(enum QueryState, out const WorldPartitionStreamingQuerySource[] QuerySources, bool bExactState);// 0x10ea4f44 0x7873faf040

--------------------------------
Class: WorldPartitionStreamingQuerySource
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7873a44580
	float Radius;//[Offset: 0x18, Size: 0x4] 0x7873a44600
	bool bUseGridLoadingRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7873a44680
	FName[] DataLayers;//[Offset: 0x20, Size: 0x10] 0x78739ba1a0
	bool bDataLayersOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7873a44780
	bool bSpatialQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7873a44800

--------------------------------
Class: HierarchicalLODSetup.Object
	HierarchicalSimplification[] HierarchicalLODSetup;//[Offset: 0x28, Size: 0x10] 0x7873eed9e0
	MaterialInterface* OverrideBaseMaterial;//[Offset: 0x38, Size: 0x28] 0x7873fc2580

--------------------------------
Class: HierarchicalSimplification
	float TransitionScreenSize;//[Offset: 0x0, Size: 0x4] 0x7873a47100
	float OverrideDrawDistance;//[Offset: 0x4, Size: 0x4] 0x7873a47180
	bool bUseOverrideDrawDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7873a47200
	bool bAllowSpecificExclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7873a47280
	bool bSimplifyMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x7873a47300
	bool bOnlyGenerateClustersForVolumes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x7873a47380
	bool bReusePreviousLevelClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1] 0x7873a45300
	MeshProxySettings ProxySetting;//[Offset: 0xc, Size: 0xb8] 0x7873a45380
	MeshMergingSettings MergeSetting;//[Offset: 0xc4, Size: 0xb4] 0x7873a45400
	float DesiredBoundRadius;//[Offset: 0x178, Size: 0x4] 0x7873a45480
	float DesiredFillingPercentage;//[Offset: 0x17c, Size: 0x4] 0x7873a45500
	int MinNumberOfActorsToBuild;//[Offset: 0x180, Size: 0x4] 0x7873a45580

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 0x4] 0x78739eec80
	float VoxelSize;//[Offset: 0x4, Size: 0x4] 0x78739eed00
	MaterialProxySettings MaterialSettings;//[Offset: 0x8, Size: 0x94] 0x78739eed80
	float MergeDistance;//[Offset: 0x9c, Size: 0x4] 0x78739eee00
	Color UnresolvedGeometryColor;//[Offset: 0xa0, Size: 0x4] 0x78739eee80
	float MaxRayCastDist;//[Offset: 0xa4, Size: 0x4] 0x78739eef00
	float HardAngleThreshold;//[Offset: 0xa8, Size: 0x4] 0x78739eef80
	int LightMapResolution;//[Offset: 0xac, Size: 0x4] 0x78739ef000
	byte NormalCalculationMethod;//[Offset: 0xb0, Size: 0x1] 0x78739ef080
	byte LandscapeCullingPrecision;//[Offset: 0xb1, Size: 0x1] 0x78739ef100
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb2, Size: 0x1] 0x78739ef180
	bool bOverrideVoxelSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb2, Size: 0x1] 0x78739ef200
	bool bOverrideTransferDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb2, Size: 0x1] 0x78739ef280
	bool bUseHardAngleThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb2, Size: 0x1] 0x78739ef300
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb2, Size: 0x1] 0x78739ef380
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb2, Size: 0x1] 0x78739ef400
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb2, Size: 0x1] 0x78739ef480
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb2, Size: 0x1] 0x78739ef500
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb3, Size: 0x1] 0x78739ef580
	bool bGroupIdenticalMeshesForBaking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb3, Size: 0x1] 0x78739ef600
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb3, Size: 0x1] 0x78739ef680
	bool bAllowVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb3, Size: 0x1] 0x78739ef700
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb3, Size: 0x1] 0x78739ef780
	bool bGenerateNaniteEnabledMesh;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb3, Size: 0x1] 0x78739ed700
	float NaniteProxyTrianglePercent;//[Offset: 0xb4, Size: 0x4] 0x78739ed780

--------------------------------
Class: MaterialProxySettings
	byte TextureSizingType;//[Offset: 0x0, Size: 0x1] 0x78739e9280
	IntPoint TextureSize;//[Offset: 0x4, Size: 0x8] 0x78739e9300
	float TargetTexelDensityPerMeter;//[Offset: 0xc, Size: 0x4] 0x78739e9380
	float MeshMaxScreenSizePercent;//[Offset: 0x10, Size: 0x4] 0x78739e9400
	float MeshMinDrawDistance;//[Offset: 0x14, Size: 0x4] 0x78739e9480
	float GutterSpace;//[Offset: 0x18, Size: 0x4] 0x78739e7400
	float MetallicConstant;//[Offset: 0x1c, Size: 0x4] 0x78739e7480
	float RoughnessConstant;//[Offset: 0x20, Size: 0x4] 0x78739e7500
	float AnisotropyConstant;//[Offset: 0x24, Size: 0x4] 0x78739e7580
	float SpecularConstant;//[Offset: 0x28, Size: 0x4] 0x78739e7600
	float OpacityConstant;//[Offset: 0x2c, Size: 0x4] 0x78739e7680
	float OpacityMaskConstant;//[Offset: 0x30, Size: 0x4] 0x78739e7700
	float AmbientOcclusionConstant;//[Offset: 0x34, Size: 0x4] 0x78739e7780
	byte MaterialMergeType;//[Offset: 0x38, Size: 0x1] 0x78739e7800
	byte BlendMode;//[Offset: 0x39, Size: 0x1] 0x78739e7880
	bool bAllowTwoSidedMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a, Size: 0x1] 0x78739e7900
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a, Size: 0x1] 0x78739e7980
	bool bTangentMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a, Size: 0x1] 0x78739e7a00
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a, Size: 0x1] 0x78739e7a80
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3a, Size: 0x1] 0x78739e7b00
	bool bAnisotropyMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3a, Size: 0x1] 0x78739e7b80
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3a, Size: 0x1] 0x78739e7c00
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3a, Size: 0x1] 0x78739e7c80
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b, Size: 0x1] 0x78739e7d00
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b, Size: 0x1] 0x78739e7d80
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b, Size: 0x1] 0x78739e7e00
	IntPoint DiffuseTextureSize;//[Offset: 0x3c, Size: 0x8] 0x78739e7e80
	IntPoint NormalTextureSize;//[Offset: 0x44, Size: 0x8] 0x78739e7f00
	IntPoint TangentTextureSize;//[Offset: 0x4c, Size: 0x8] 0x78739e7f80
	IntPoint MetallicTextureSize;//[Offset: 0x54, Size: 0x8] 0x78739e8000
	IntPoint RoughnessTextureSize;//[Offset: 0x5c, Size: 0x8] 0x78739e8080
	IntPoint AnisotropyTextureSize;//[Offset: 0x64, Size: 0x8] 0x78739e8100
	IntPoint SpecularTextureSize;//[Offset: 0x6c, Size: 0x8] 0x78739e8180
	IntPoint EmissiveTextureSize;//[Offset: 0x74, Size: 0x8] 0x78739e8200
	IntPoint OpacityTextureSize;//[Offset: 0x7c, Size: 0x8] 0x78739e8280
	IntPoint OpacityMaskTextureSize;//[Offset: 0x84, Size: 0x8] 0x78739e8300
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x8c, Size: 0x8] 0x78739e8380

--------------------------------
Class: MeshMergingSettings
	int TargetLightMapResolution;//[Offset: 0x0, Size: 0x4] 0x78739efa00
	enum OutputUVs;//[Offset: 0x4, Size: 0x1] 0x78739b4340
	MaterialProxySettings MaterialSettings;//[Offset: 0xc, Size: 0x94] 0x78739efb00
	int GutterSize;//[Offset: 0xa0, Size: 0x4] 0x78739efb80
	int SpecificLOD;//[Offset: 0xa4, Size: 0x4] 0x78739efc00
	enum LODSelectionType;//[Offset: 0xa8, Size: 0x1] 0x78739b43e0
	bool bGenerateLightMapUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9, Size: 0x1] 0x78739efd00
	bool bComputedLightMapResolution;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa9, Size: 0x1] 0x78739efd80
	bool bPivotPointAtZero;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa9, Size: 0x1] 0x78739efe00
	bool bMergePhysicsData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa9, Size: 0x1] 0x78739efe80
	bool bMergeMaterials;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa9, Size: 0x1] 0x78739eff00
	bool bCreateMergedMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa9, Size: 0x1] 0x78739eff80
	bool bBakeVertexDataToMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa9, Size: 0x1] 0x78739ee780
	bool bUseVertexDataForBakingMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa9, Size: 0x1] 0x78739ee800
	bool bUseTextureBinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1] 0x78739ee880
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1] 0x78739ee900
	bool bMergeEquivalentMaterials;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xaa, Size: 0x1] 0x78739ee980
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xaa, Size: 0x1] 0x78739eea00
	bool bIncludeImposters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xaa, Size: 0x1] 0x78739eea80
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xaa, Size: 0x1] 0x78739eeb00
	bool bGenerateNaniteEnabledMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xaa, Size: 0x1] 0x78739eeb80
	float NaniteFallbackTrianglePercent;//[Offset: 0xac, Size: 0x4] 0x78739eec00

--------------------------------
Class: PaperCharacter.Character.Pawn.Actor.Object
	PaperFlipbookComponent* Sprite;//[Offset: 0x608, Size: 0x8] 0x7873aa6000

--------------------------------
Class: PaperFlipbookComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperFlipbook* SourceFlipbook;//[Offset: 0x570, Size: 0x8] 0x7873aa6700
	MaterialInterface* Material;//[Offset: 0x578, Size: 0x8] 0x7873aa6780
	float PlayRate;//[Offset: 0x580, Size: 0x4] 0x7873aa6800
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x584, Size: 0x1] 0x7873aa6880
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x584, Size: 0x1] 0x7873aa6900
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x584, Size: 0x1] 0x7873aa6980
	float AccumulatedTime;//[Offset: 0x588, Size: 0x4] 0x7873aa6a00
	int CachedFrameIndex;//[Offset: 0x58c, Size: 0x4] 0x7873aa6a80
	LinearColor SpriteColor;//[Offset: 0x590, Size: 0x10] 0x7873aa6b00
	BodySetup* CachedBodySetup;//[Offset: 0x5a0, Size: 0x8] 0x7873aa6b80
	delegate OnFinishedPlaying;//[Offset: 0x5a8, Size: 0x10] 0x7873aa6c00
	void Stop();// 0x99911dc 0x7873a93a40
	void SetSpriteColor(LinearColor NewColor);// 0x9991240 0x7873a93b20
	void SetPlayRate(float NewRate);// 0x9990d80 0x7873a93c00
	void SetPlaybackPositionInFrames(int NewFramePosition, bool bFireEvents);// 0x9991074 0x7873a93ce0
	void SetPlaybackPosition(float NewPosition, bool bFireEvents);// 0x9990f44 0x7873a93dc0
	void SetNewTime(float NewTime);// 0x9990ca4 0x7873a93ea0
	void SetLooping(bool bNewLooping);// 0x9990e60 0x7873a93f80
	bool SetFlipbook(PaperFlipbook* NewFlipbook);// 0x9991340 0x7873a94060
	void ReverseFromEnd();// 0x99911f0 0x7873a94140
	void Reverse();// 0x9991204 0x7873a94220
	void PlayFromStart();// 0x9991218 0x7873a94300
	void Play();// 0x999122c 0x7873a943e0
	void OnRep_SourceFlipbook(PaperFlipbook* OldFlipbook);// 0x9990b60 0x7873a944c0
	bool IsReversing();// 0x999116c 0x7873a945a0
	bool IsPlaying();// 0x99911a4 0x7873a94680
	bool IsLooping();// 0x9990e28 0x7873a94760
	LinearColor GetSpriteColor();// 0x99912e8 0x7873a94840
	float GetPlayRate();// 0x9990d4c 0x7873a94920
	int GetPlaybackPositionInFrames();// 0x9991040 0x7873a94a00
	float GetPlaybackPosition();// 0x9990f10 0x7873a94ae0
	int GetFlipbookLengthInFrames();// 0x9990c3c 0x7873a94bc0
	float GetFlipbookLength();// 0x9990c70 0x7873a94ca0
	float GetFlipbookFramerate();// 0x9990c08 0x7873a94d80
	PaperFlipbook* GetFlipbook();// 0x9991304 0x7873a94e60

--------------------------------
Class: PaperFlipbook.Object
	float FramesPerSecond;//[Offset: 0x28, Size: 0x4] 0x7873aa5780
	PaperFlipbookKeyFrame[] KeyFrames;//[Offset: 0x30, Size: 0x10] 0x78739be0c0
	MaterialInterface* DefaultMaterial;//[Offset: 0x40, Size: 0x8] 0x7873aa5880
	byte CollisionSource;//[Offset: 0x48, Size: 0x1] 0x7873aa5900
	bool IsValidKeyFrameIndex(int index);// 0x998fde0 0x7873a94f40
	float GetTotalDuration();// 0x9990174 0x7873a95020
	PaperSprite* GetSpriteAtTime(float Time, bool bClampToEnds);// 0x998ff6c 0x7873a95100
	PaperSprite* GetSpriteAtFrame(int FrameIndex);// 0x998febc 0x7873a951e0
	int GetNumKeyFrames();// 0x998fea0 0x7873a952c0
	int GetNumFrames();// 0x99901a8 0x7873a953a0
	int GetKeyFrameIndexAtTime(float Time, bool bClampToEnds);// 0x9990070 0x7873a95480

--------------------------------
Class: PaperFlipbookKeyFrame
	PaperSprite* Sprite;//[Offset: 0x0, Size: 0x8] 0x787382dd80
	int FrameRun;//[Offset: 0x8, Size: 0x4] 0x787382de80

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10] 0x78739bdda0
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x10] 0x7873aa7400
	Vector2D BakedSourceDimension;//[Offset: 0x58, Size: 0x10] 0x7873aa7480
	Texture2D* BakedSourceTexture;//[Offset: 0x68, Size: 0x8] 0x7873aa7500
	MaterialInterface* DefaultMaterial;//[Offset: 0x70, Size: 0x8] 0x7873aa7580
	MaterialInterface* AlternateMaterial;//[Offset: 0x78, Size: 0x8] 0x7873aa7600
	PaperSpriteSocket[] Sockets;//[Offset: 0x80, Size: 0x10] 0x78739bde40
	byte SpriteCollisionDomain;//[Offset: 0x90, Size: 0x1] 0x7873aa7700
	float PixelsPerUnrealUnit;//[Offset: 0x94, Size: 0x4] 0x7873aa7780
	BodySetup* BodySetup;//[Offset: 0x98, Size: 0x8] 0x7873aa7800
	int AlternateMaterialSplitIndex;//[Offset: 0xa0, Size: 0x4] 0x7873aa7880
	Vector4[] BakedRenderData;//[Offset: 0xa8, Size: 0x10] 0x78739bdee0

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x60] 0x787382da80
	FName SocketName;//[Offset: 0x60, Size: 0x8] 0x787382db00

--------------------------------
Class: PaperFlipbookActor.Actor.Object
	PaperFlipbookComponent* RenderComponent;//[Offset: 0x288, Size: 0x8] 0x7873aa5700

--------------------------------
Class: PaperGroupedSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] InstanceMaterials;//[Offset: 0x570, Size: 0x10] 0x78739bdf80
	SpriteInstanceData[] PerInstanceSpriteData;//[Offset: 0x580, Size: 0x10] 0x78739be020
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x999289c 0x7873a96d00
	bool UpdateInstanceColor(int InstanceIndex, LinearColor NewInstanceColor, bool bMarkRenderStateDirty);// 0x9992744 0x7873a96de0
	void SortInstancesAlongAxis(Vector WorldSpaceSortAxis);// 0x9992590 0x7873a96ec0
	bool RemoveInstance(int InstanceIndex);// 0x9992688 0x7873a96fa0
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x9992ab4 0x7873a97080
	int GetInstanceCount();// 0x9992638 0x7873a97160
	void ClearInstances();// 0x999266c 0x7873a97240
	int AddInstance(out const Transform Transform, PaperSprite* Sprite, bool bWorldSpace, LinearColor Color);// 0x9992c2c 0x7873a97320

--------------------------------
Class: SpriteInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x80] 0x787382db80
	PaperSprite* SourceSprite;//[Offset: 0x80, Size: 0x8] 0x787382dc00
	Color VertexColor;//[Offset: 0x88, Size: 0x4] 0x787382dc80
	int MaterialIndex;//[Offset: 0x8c, Size: 0x4] 0x787382dd00

--------------------------------
Class: PaperSpriteActor.Actor.Object
	PaperSpriteComponent* RenderComponent;//[Offset: 0x288, Size: 0x8] 0x7873aa9400

--------------------------------
Class: PaperSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperSprite* SourceSprite;//[Offset: 0x570, Size: 0x8] 0x7873aa8e80
	MaterialInterface* MaterialOverride;//[Offset: 0x578, Size: 0x8] 0x7873aa8f00
	LinearColor SpriteColor;//[Offset: 0x580, Size: 0x10] 0x7873aa8f80
	void SetSpriteColor(LinearColor NewColor);// 0x9994bf8 0x7873a96980
	bool SetSprite(PaperSprite* NewSprite);// 0x9994cdc 0x7873a96a60
	PaperSprite* GetSprite();// 0x9994ca0 0x7873a96b40

--------------------------------
Class: PaperSpriteAtlas.Object

--------------------------------
Class: PaperTerrainComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperTerrainMaterial* TerrainMaterial;//[Offset: 0x548, Size: 0x8] 0x7873aa8700
	bool bClosedSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1] 0x7873aa8780
	bool bFilledSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1] 0x7873aa8800
	PaperTerrainSplineComponent* AssociatedSpline;//[Offset: 0x558, Size: 0x8] 0x7873aa8880
	int RandomSeed;//[Offset: 0x560, Size: 0x4] 0x7873aa8900
	float SegmentOverlapAmount;//[Offset: 0x564, Size: 0x4] 0x7873aa8980
	LinearColor TerrainColor;//[Offset: 0x568, Size: 0x10] 0x7873aa8a00
	int ReparamStepsPerSegment;//[Offset: 0x578, Size: 0x4] 0x7873aa8a80
	byte SpriteCollisionDomain;//[Offset: 0x57c, Size: 0x1] 0x7873aa8b00
	float CollisionThickness;//[Offset: 0x580, Size: 0x4] 0x7873aa8b80
	BodySetup* CachedBodySetup;//[Offset: 0x588, Size: 0x8] 0x7873aa8c00
	void SetTerrainColor(LinearColor NewColor);// 0x9997f3c 0x7873a968a0

--------------------------------
Class: PaperTerrainMaterial.DataAsset.Object
	PaperTerrainMaterialRule[] Rules;//[Offset: 0x30, Size: 0x10] 0x78739bdc60
	PaperSprite* InteriorFill;//[Offset: 0x40, Size: 0x8] 0x7873aa8680

--------------------------------
Class: PaperTerrainMaterialRule
	PaperSprite* StartCap;//[Offset: 0x0, Size: 0x8] 0x787382f480
	PaperSprite*[] Body;//[Offset: 0x8, Size: 0x10] 0x788ab281c0
	PaperSprite* EndCap;//[Offset: 0x18, Size: 0x8] 0x787382f580
	float MinimumAngle;//[Offset: 0x20, Size: 0x4] 0x787382f600
	float MaximumAngle;//[Offset: 0x24, Size: 0x4] 0x787382f680
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x787382f700
	float CollisionOffset;//[Offset: 0x2c, Size: 0x4] 0x787382f780
	int DrawOrder;//[Offset: 0x30, Size: 0x4] 0x787382d700

--------------------------------
Class: PaperTerrainSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PaperTileMap.Object
	int MapWidth;//[Offset: 0x28, Size: 0x4] 0x7873ab3c00
	int MapHeight;//[Offset: 0x2c, Size: 0x4] 0x7873ab3c80
	int TileWidth;//[Offset: 0x30, Size: 0x4] 0x7873ab3d00
	int TileHeight;//[Offset: 0x34, Size: 0x4] 0x7873ab3d80
	float PixelsPerUnrealUnit;//[Offset: 0x38, Size: 0x4] 0x7873ab3e00
	float SeparationPerTileX;//[Offset: 0x3c, Size: 0x4] 0x7873ab3e80
	float SeparationPerTileY;//[Offset: 0x40, Size: 0x4] 0x7873ab3f00
	float SeparationPerLayer;//[Offset: 0x44, Size: 0x4] 0x7873ab3f80
	PaperTileSet* SelectedTileSet;//[Offset: 0x48, Size: 0x28] 0x7873ab4000
	MaterialInterface* Material;//[Offset: 0x70, Size: 0x8] 0x7873ab4080
	PaperTileLayer*[] TileLayers;//[Offset: 0x78, Size: 0x10] 0x78739bd620
	float CollisionThickness;//[Offset: 0x88, Size: 0x4] 0x7873ab4180
	byte SpriteCollisionDomain;//[Offset: 0x8c, Size: 0x1] 0x7873ab4200
	byte ProjectionMode;//[Offset: 0x8d, Size: 0x1] 0x7873ab2180
	int HexSideLength;//[Offset: 0x90, Size: 0x4] 0x7873ab2200
	BodySetup* BodySetup;//[Offset: 0x98, Size: 0x8] 0x7873ab2280
	int LayerNameIndex;//[Offset: 0xa0, Size: 0x4] 0x7873ab2300

--------------------------------
Class: PaperTileSet.Object
	IntPoint TileSize;//[Offset: 0x28, Size: 0x8] 0x7873ab5480
	Texture2D* TileSheet;//[Offset: 0x30, Size: 0x8] 0x7873ab5500
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10] 0x78739bd300
	IntMargin BorderMargin;//[Offset: 0x48, Size: 0x10] 0x7873ab5600
	IntPoint PerTileSpacing;//[Offset: 0x58, Size: 0x8] 0x7873ab5680
	IntPoint DrawingOffset;//[Offset: 0x60, Size: 0x8] 0x7873ab5700
	int WidthInTiles;//[Offset: 0x68, Size: 0x4] 0x7873ab5780
	int HeightInTiles;//[Offset: 0x6c, Size: 0x4] 0x7873ab5800
	int AllocatedWidth;//[Offset: 0x70, Size: 0x4] 0x7873ab5880
	int AllocatedHeight;//[Offset: 0x74, Size: 0x4] 0x7873ab5900
	PaperTileMetadata[] PerTileData;//[Offset: 0x78, Size: 0x10] 0x78739bd3a0
	PaperTileSetTerrain[] Terrains;//[Offset: 0x88, Size: 0x10] 0x78739bd440
	int TileWidth;//[Offset: 0x98, Size: 0x4] 0x7873ab5a80
	int TileHeight;//[Offset: 0x9c, Size: 0x4] 0x7873ab5b00
	int Margin;//[Offset: 0xa0, Size: 0x4] 0x7873ab5b80
	int Spacing;//[Offset: 0xa4, Size: 0x4] 0x7873ab5c00

--------------------------------
Class: IntMargin
	int Left;//[Offset: 0x0, Size: 0x4] 0x787382de00
	int Top;//[Offset: 0x4, Size: 0x4] 0x787382df00
	int Right;//[Offset: 0x8, Size: 0x4] 0x787382df80
	int Bottom;//[Offset: 0xc, Size: 0x4] 0x787382e080

--------------------------------
Class: PaperTileMetadata
	FName UserDataName;//[Offset: 0x0, Size: 0x8] 0x787382eb00
	SpriteGeometryCollection CollisionData;//[Offset: 0x8, Size: 0x30] 0x787382f280
	byte TerrainMembership;//[Offset: 0x38, Size: 0x1] 0x787382f300

--------------------------------
Class: SpriteGeometryCollection
	SpriteGeometryShape[] Shapes;//[Offset: 0x0, Size: 0x10] 0x788ab28440
	byte GeometryType;//[Offset: 0x10, Size: 0x1] 0x787382ef00
	int PixelsPerSubdivisionX;//[Offset: 0x14, Size: 0x4] 0x787382ef80
	int PixelsPerSubdivisionY;//[Offset: 0x18, Size: 0x4] 0x787382f000
	bool bAvoidVertexMerging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x787382f080
	float AlphaThreshold;//[Offset: 0x20, Size: 0x4] 0x787382f100
	float DetailAmount;//[Offset: 0x24, Size: 0x4] 0x787382f180
	float SimplifyEpsilon;//[Offset: 0x28, Size: 0x4] 0x787382f200

--------------------------------
Class: SpriteGeometryShape
	enum ShapeType;//[Offset: 0x0, Size: 0x1] 0x788ab28580
	Vector2D[] Vertices;//[Offset: 0x8, Size: 0x10] 0x788ab284e0
	Vector2D BoxSize;//[Offset: 0x18, Size: 0x10] 0x787382ec80
	Vector2D BoxPosition;//[Offset: 0x28, Size: 0x10] 0x787382ed00
	float Rotation;//[Offset: 0x38, Size: 0x4] 0x787382ed80
	bool bNegativeWinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x787382ee00

--------------------------------
Class: PaperTileSetTerrain
	FString TerrainName;//[Offset: 0x0, Size: 0x10] 0x787382ea00
	int CenterTileIndex;//[Offset: 0x10, Size: 0x4] 0x787382ea80

--------------------------------
Class: PaperTileLayer.Object
	FText LayerName;//[Offset: 0x28, Size: 0x18] 0x7873ab2380
	int LayerWidth;//[Offset: 0x40, Size: 0x4] 0x7873ab2400
	int LayerHeight;//[Offset: 0x44, Size: 0x4] 0x7873ab2480
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7873ab2500
	bool bLayerCollides;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x7873ab2580
	bool bOverrideCollisionThickness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1] 0x7873ab2600
	bool bOverrideCollisionOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1] 0x7873ab2680
	float CollisionThicknessOverride;//[Offset: 0x4c, Size: 0x4] 0x7873ab2700
	float CollisionOffsetOverride;//[Offset: 0x50, Size: 0x4] 0x7873ab2780
	LinearColor LayerColor;//[Offset: 0x54, Size: 0x10] 0x7873ab2800
	int AllocatedWidth;//[Offset: 0x64, Size: 0x4] 0x7873ab2880
	int AllocatedHeight;//[Offset: 0x68, Size: 0x4] 0x7873ab2900
	PaperTileInfo[] AllocatedCells;//[Offset: 0x70, Size: 0x10] 0x78739bd6c0
	PaperTileSet* TileSet;//[Offset: 0x80, Size: 0x8] 0x7873ab2a00
	int[] AllocatedGrid;//[Offset: 0x88, Size: 0x10] 0x78739bd760

--------------------------------
Class: PaperTileInfo
	PaperTileSet* TileSet;//[Offset: 0x0, Size: 0x8] 0x787382f380
	int PackedTileIndex;//[Offset: 0x8, Size: 0x4] 0x787382f400

--------------------------------
Class: AdditiveControlRig.ControlRig.Object

--------------------------------
Class: ControlRig.Object
	enum ExecutionType;//[Offset: 0x46, Size: 0x1] 0x78739bf420
	RigVMRuntimeSettings VMRuntimeSettings;//[Offset: 0x50, Size: 0x60] 0x7873ab7400
	<RigElementKey,RigControlElementCustomization> ControlCustomizations;//[Offset: 0xb0, Size: 0x50] 0x7873869f40
	RigVM* VM;//[Offset: 0x100, Size: 0x8] 0x7873ab7580
	RigHierarchy* DynamicHierarchy;//[Offset: 0x108, Size: 0x8] 0x7873ab7600
	ControlRigShapeLibrary* GizmoLibrary;//[Offset: 0x110, Size: 0x28] 0x7873ab7680
	ControlRigShapeLibrary*[] ShapeLibraries;//[Offset: 0x138, Size: 0x10] 0x78739bf4c0
	<FName,CachedPropertyPath> InputProperties;//[Offset: 0x158, Size: 0x50] 0x787386a000
	<FName,CachedPropertyPath> OutputProperties;//[Offset: 0x1a8, Size: 0x50] 0x787386a0c0
	ControlRigDrawContainer DrawContainer;//[Offset: 0x298, Size: 0x18] 0x7873ab7980
	AnimationDataSourceRegistry* DataSourceRegistry;//[Offset: 0x2c8, Size: 0x8] 0x7873ab7a00
	FName[] EventQueue;//[Offset: 0x2d0, Size: 0x10] 0x78739bf560
	RigInfluenceMapPerEvent Influences;//[Offset: 0x388, Size: 0x60] 0x7873ab7b00
	ControlRig* InteractionRig;//[Offset: 0x3e8, Size: 0x8] 0x7873ab7b80
	class ControlRig* InteractionRigClass;//[Offset: 0x3f0, Size: 0x8] 0x78739bf600
	AssetUserData*[] AssetUserData;//[Offset: 0x3f8, Size: 0x10] 0x78739bf6a0
	bool SupportsEvent(out const FName InEventName);// 0x9b3ad20 0x7873a9cb80
	bool SetVariableFromString(out const FName InVariableName, FString InValue);// 0x9b3ade0 0x7873a9cc60
	void SetInteractionRigClass(class ControlRig InInteractionRigClass);// 0x9b3a6a8 0x7873a9cd40
	void SetInteractionRig(ControlRig* InInteractionRig);// 0x9b3a76c 0x7873a9ce20
	void SetFramesPerSecond(float InFramesPerSecond);// 0x9b3b1a0 0x7873a9cf00
	void SetDeltaTime(float InDeltaTime);// 0x9b3b434 0x7873a9cfe0
	void SetAbsoluteTime(float InAbsoluteTime, bool InSetDeltaTimeZero);// 0x9b3b338 0x7873a9d0c0
	void SetAbsoluteAndDeltaTime(float InAbsoluteTime, float InDeltaTime);// 0x9b3b248 0x7873a9d1a0
	void SelectControl(out const FName InControlName, bool bSelect);// 0x9b3a9f0 0x7873a9d280
	void RequestSetup();// 0x9b3ab2c 0x7873a9d360
	void RequestInit();// 0x9b3ab40 0x7873a9d440
	bool IsControlSelected(out const FName InControlName);// 0x9b3a830 0x7873a9d520
	RigVM* GetVM();// 0x9b3aaf8 0x7873a9d600
	FName GetVariableType(out const FName InVariableName);// 0x9b3b000 0x7873a9d6e0
	FString GetVariableAsString(out const FName InVariableName);// 0x9b3aef8 0x7873a9d7c0
	FName[] GetSupportedEvents();// 0x9b3ac70 0x7873a9d8a0
	FName[] GetScriptAccessibleVariables();// 0x9b3b0bc 0x7873a9d980
	class ControlRig GetInteractionRigClass();// 0x9b3a750 0x7873a9da60
	ControlRig* GetInteractionRig();// 0x9b3a814 0x7873a9db40
	RigHierarchy* GetHierarchy();// 0x9b3ac54 0x7873a9dc20
	float GetCurrentFramesPerSecond();// 0x9b3b16c 0x7873a9dd00
	float GetAbsoluteTime();// 0x9b3b4dc 0x7873a9dde0
	static ControlRig*[] FindControlRigs(Object* Outer, class ControlRig OptionalClass);// 0x9b3b538 0x7873a9dec0
	void Execute(const enum State, out const FName InEventName);// 0x9b3ab54 0x7873a9dfa0
	FName[] CurrentControlSelection();// 0x9b3a8f8 0x7873a9e080
	bool ClearControlSelection();// 0x9b3a9b0 0x7873a9e160
	bool CanExecute();// 0x9b3b4f8 0x7873a9e240

--------------------------------
Class: RigVMRuntimeSettings
	int MaximumArraySize;//[Offset: 0x0, Size: 0x4] 0x7873a6d680

--------------------------------
Class: RigElementKey
	enum Type;//[Offset: 0x0, Size: 0x1] 0x788a8ae3e0
	FName Name;//[Offset: 0x4, Size: 0x8] 0x7873880800

--------------------------------
Class: RigControlElementCustomization
	RigElementKey[] AvailableSpaces;//[Offset: 0x0, Size: 0x10] 0x78736a42a0
	RigElementKey[] RemovedSpaces;//[Offset: 0x10, Size: 0x10] 0x78736a4200

--------------------------------
Class: RigVM.Object
	RigVMMemoryStorage* WorkMemoryStorageObject;//[Offset: 0x28, Size: 0x8] 0x787402d300
	RigVMMemoryStorage* LiteralMemoryStorageObject;//[Offset: 0x30, Size: 0x8] 0x787402d380
	RigVMMemoryStorage* DebugMemoryStorageObject;//[Offset: 0x38, Size: 0x8] 0x787402d400
	RigVMByteCode ByteCodeStorage;//[Offset: 0x60, Size: 0x30] 0x787402d480
	RigVMInstructionArray Instructions;//[Offset: 0x98, Size: 0x10] 0x787402d500
	RigVMExecuteContext Context;//[Offset: 0xb0, Size: 0xd0] 0x787402d580
	uint32 NumExecutions;//[Offset: 0x180, Size: 0x4] 0x787402d600
	FName[] FunctionNamesStorage;//[Offset: 0x188, Size: 0x10] 0x7873fe6aa0
	RigVMParameter[] Parameters;//[Offset: 0x1b8, Size: 0x10] 0x7873fe6b40
	<FName,int> ParametersNameMap;//[Offset: 0x1c8, Size: 0x50] 0x787386f100
	RigVM* DeferredVMToCopy;//[Offset: 0x2b0, Size: 0x8] 0x787402b780
	void SetParameterValueVector2D(out const FName InParameterName, out const Vector2D InValue, int InArrayIndex);// 0x1165cc3c 0x7874035560
	void SetParameterValueVector(out const FName InParameterName, out const Vector InValue, int InArrayIndex);// 0x1165caf0 0x7874035640
	void SetParameterValueTransform(out const FName InParameterName, out const Transform InValue, int InArrayIndex);// 0x1165c830 0x7874031d60
	void SetParameterValueString(out const FName InParameterName, FString InValue, int InArrayIndex);// 0x1165cd88 0x7874031e40
	void SetParameterValueQuat(out const FName InParameterName, out const Quat InValue, int InArrayIndex);// 0x1165c9a4 0x7874031f20
	void SetParameterValueName(out const FName InParameterName, out const FName InValue, int InArrayIndex);// 0x1165ced8 0x7874032000
	void SetParameterValueInt(out const FName InParameterName, int InValue, int InArrayIndex);// 0x1165d028 0x78740320e0
	void SetParameterValueFloat(out const FName InParameterName, float InValue, int InArrayIndex);// 0x1165d2bc 0x78740321c0
	void SetParameterValueDouble(out const FName InParameterName, double InValue, int InArrayIndex);// 0x1165d170 0x78740322a0
	void SetParameterValueBool(out const FName InParameterName, bool InValue, int InArrayIndex);// 0x1165d404 0x7874032380
	RigVMStatistics GetStatistics();// 0x1165c6a4 0x7874032460
	FString GetRigVMFunctionName(int InFunctionIndex);// 0x1165e08c 0x7874032540
	Vector2D GetParameterValueVector2D(out const FName InParameterName, int InArrayIndex);// 0x1165d8d0 0x7874032620
	Vector GetParameterValueVector(out const FName InParameterName, int InArrayIndex);// 0x1165d7b4 0x7874032700
	Transform GetParameterValueTransform(out const FName InParameterName, int InArrayIndex);// 0x1165d554 0x78740327e0
	FString GetParameterValueString(out const FName InParameterName, int InArrayIndex);// 0x1165d9e4 0x78740328c0
	Quat GetParameterValueQuat(out const FName InParameterName, int InArrayIndex);// 0x1165d698 0x78740329a0
	FName GetParameterValueName(out const FName InParameterName, int InArrayIndex);// 0x1165db4c 0x7874032a80
	int GetParameterValueInt(out const FName InParameterName, int InArrayIndex);// 0x1165dc58 0x7874032b60
	float GetParameterValueFloat(out const FName InParameterName, int InArrayIndex);// 0x1165de70 0x7874032c40
	double GetParameterValueDouble(out const FName InParameterName, int InArrayIndex);// 0x1165dd64 0x7874032d20
	bool GetParameterValueBool(out const FName InParameterName, int InArrayIndex);// 0x1165df7c 0x7874032e00
	bool Execute(out const FName InEntryName);// 0x1165e290 0x7874032ee0
	int AddRigVMFunction(ScriptStruct* InRigVMStruct, out const FName InMethodName);// 0x1165e188 0x7874032fc0

--------------------------------
Class: RigVMMemoryStorage.Object

--------------------------------
Class: RigVMByteCode
	byte[] ByteCode;//[Offset: 0x0, Size: 0x10] 0x78739bbfa0
	int NumInstructions;//[Offset: 0x10, Size: 0x4] 0x7873a6b680
	RigVMByteCodeEntry[] Entries;//[Offset: 0x18, Size: 0x10] 0x78739bc040

--------------------------------
Class: RigVMByteCodeEntry
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7873a6b780
	int InstructionIndex;//[Offset: 0x8, Size: 0x4] 0x7873a6b800

--------------------------------
Class: RigVMInstructionArray
	RigVMInstruction[] Instructions;//[Offset: 0x0, Size: 0x10] 0x78739bc0e0

--------------------------------
Class: RigVMInstruction
	uint64 ByteCodeIndex;//[Offset: 0x0, Size: 0x8] 0x7873a6b900
	enum OpCode;//[Offset: 0x8, Size: 0x1] 0x78739bc180
	byte OperandAlignment;//[Offset: 0x9, Size: 0x1] 0x7873a6ba00

--------------------------------
Class: RigVMStatistics
	int BytesForCDO;//[Offset: 0x0, Size: 0x4] 0x7873a6e200
	int BytesPerInstance;//[Offset: 0x4, Size: 0x4] 0x7873a6e280
	RigVMMemoryStatistics LiteralMemory;//[Offset: 0x8, Size: 0xc] 0x7873a6e300
	RigVMMemoryStatistics WorkMemory;//[Offset: 0x14, Size: 0xc] 0x7873a6e380
	RigVMMemoryStatistics DebugMemory;//[Offset: 0x20, Size: 0xc] 0x7873a6e400
	int BytesForCaching;//[Offset: 0x2c, Size: 0x4] 0x7873a6e480
	RigVMByteCodeStatistics ByteCode;//[Offset: 0x30, Size: 0x8] 0x7873a6e500

--------------------------------
Class: RigVMMemoryStatistics
	int RegisterCount;//[Offset: 0x0, Size: 0x4] 0x7873a6e680
	int DataBytes;//[Offset: 0x4, Size: 0x4] 0x7873a6e700
	int TotalBytes;//[Offset: 0x8, Size: 0x4] 0x7873a6c680

--------------------------------
Class: RigVMByteCodeStatistics
	int InstructionCount;//[Offset: 0x0, Size: 0x4] 0x7873a6e580
	int DataBytes;//[Offset: 0x4, Size: 0x4] 0x7873a6e600

--------------------------------
Class: RigVMExecuteContext

--------------------------------
Class: RigVMParameter
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78739bc220
	FName Name;//[Offset: 0x4, Size: 0x8] 0x7873a6bb80
	int RegisterIndex;//[Offset: 0xc, Size: 0x4] 0x7873a6bc00
	FString CPPType;//[Offset: 0x10, Size: 0x10] 0x7873a6bc80
	ScriptStruct* ScriptStruct;//[Offset: 0x20, Size: 0x8] 0x7873a6bd00
	FName ScriptStructPath;//[Offset: 0x28, Size: 0x8] 0x7873a6bd80

--------------------------------
Class: RigHierarchy.Object
	uint16 TopologyVersion;//[Offset: 0x58, Size: 0x2] 0x7873b11e00
	bool bEnableDirtyPropagation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1] 0x7873b11e80
	int TransformStackIndex;//[Offset: 0xd0, Size: 0x4] 0x7873b11f00
	RigHierarchyController* HierarchyController;//[Offset: 0x130, Size: 0x8] 0x7873b11f80
	<RigElementKey,RigElementKey> PreviousNameMap;//[Offset: 0x188, Size: 0x50] 0x7873869d00
	RigHierarchy* HierarchyForCacheValidation;//[Offset: 0x1f8, Size: 0x8] 0x7873b12100
	bool SwitchToWorldSpace(RigElementKey InChild, bool bInitial, bool bAffectChildren);// 0x9b5e228 0x7873accb80
	bool SwitchToParent(RigElementKey InChild, RigElementKey InParent, bool bInitial, bool bAffectChildren);// 0x9b5e4e8 0x7873accc60
	bool SwitchToDefaultParent(RigElementKey InChild, bool bInitial, bool bAffectChildren);// 0x9b5e388 0x7873accd40
	RigElementKey[] SortKeys(out const RigElementKey[] InKeys);// 0x9b63530 0x7873acce20
	void SetPose_ForBlueprint(RigPose InPose);// 0x9b5d7bc 0x7873accf00
	bool SetParentWeightArray(RigElementKey InChild, RigElementWeight[] InWeights, bool bInitial, bool bAffectChildren);// 0x9b5e690 0x7873accfe0
	bool SetParentWeight(RigElementKey InChild, RigElementKey InParent, RigElementWeight InWeight, bool bInitial, bool bAffectChildren);// 0x9b5e8ac 0x7873acd0c0
	void SetLocalTransformByIndex(int InElementIndex, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);// 0x9b62b08 0x7873acd1a0
	void SetLocalTransform(RigElementKey InKey, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);// 0x9b62db0 0x7873acd280
	void SetGlobalTransformByIndex(int InElementIndex, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo);// 0x9b62160 0x7873acd360
	void SetGlobalTransform(RigElementKey InKey, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo);// 0x9b623c0 0x7873acd440
	void SetCurveValueByIndex(int InElementIndex, float InValue, bool bSetupUndo);// 0x9b60658 0x7873acd520
	void SetCurveValue(RigElementKey InKey, float InValue, bool bSetupUndo);// 0x9b607cc 0x7873acd600
	void SetControlVisibilityByIndex(int InElementIndex, bool bVisibility);// 0x9b60c90 0x7873acd6e0
	void SetControlVisibility(RigElementKey InKey, bool bVisibility);// 0x9b60db4 0x7873acd7c0
	void SetControlValueByIndex(int InElementIndex, RigControlValue InValue, enum InValueType, bool bSetupUndo, bool bPrintPythonCommands);// 0x9b60f98 0x7873acd8a0
	void SetControlValue(RigElementKey InKey, RigControlValue InValue, enum InValueType, bool bSetupUndo, bool bPrintPythonCommands);// 0x9b61214 0x7873acd980
	void SetControlShapeTransformByIndex(int InElementIndex, Transform InTransform, bool bInitial, bool bSetupUndo);// 0x9b5fb40 0x7873acda60
	void SetControlShapeTransform(RigElementKey InKey, Transform InTransform, bool bInitial, bool bSetupUndo);// 0x9b5fd38 0x7873acdb40
	void SetControlSettingsByIndex(int InElementIndex, RigControlSettings InSettings, bool bSetupUndo, bool bForce, bool bPrintPythonCommands);// 0x9b5f4f8 0x7873acdc20
	void SetControlSettings(RigElementKey InKey, RigControlSettings InSettings, bool bSetupUndo, bool bForce, bool bPrintPythonCommands);// 0x9b5f794 0x7873acdd00
	void SetControlOffsetTransformByIndex(int InElementIndex, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);// 0x9b60038 0x7873acdde0
	void SetControlOffsetTransform(RigElementKey InKey, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);// 0x9b602c4 0x7873acdec0
	void SendAutoKeyEvent(RigElementKey InElement, float InOffsetInSeconds, bool bAsynchronous);// 0x9b5dca4 0x7873acdfa0
	void ResetPoseToInitial(enum InTypeFilter);// 0x9b662d0 0x7873ace080
	void ResetCurveValues();// 0x9b662bc 0x7873ace160
	void Reset();// 0x9b66564 0x7873ace240
	int Num();// 0x9b662a0 0x7873ace320
	static RigControlValue MakeControlValueFromVector2D(Vector2D InValue);// 0x9b5d13c 0x7873ace400
	static RigControlValue MakeControlValueFromVector(Vector InValue);// 0x9b5cf2c 0x7873ace4e0
	static RigControlValue MakeControlValueFromTransformNoScale(TransformNoScale InValue);// 0x9b5c53c 0x7873ace5c0
	static RigControlValue MakeControlValueFromTransform(Transform InValue);// 0x9b5ca4c 0x7873ace6a0
	static RigControlValue MakeControlValueFromRotator(Rotator InValue);// 0x9b5ccfc 0x7873acadc0
	static RigControlValue MakeControlValueFromInt(int InValue);// 0x9b5d340 0x7873acaea0
	static RigControlValue MakeControlValueFromFloat(float InValue);// 0x9b5d54c 0x7873acaf80
	static RigControlValue MakeControlValueFromEulerTransform(EulerTransform InValue);// 0x9b5c7a8 0x7873acb060
	static RigControlValue MakeControlValueFromBool(bool InValue);// 0x9b5d680 0x7873acb140
	bool IsValidIndex(int InElementIndex);// 0x9b661e0 0x7873acb220
	bool IsSelectedByIndex(int InIndex);// 0x9b63764 0x7873acb300
	bool IsSelected(RigElementKey InKey);// 0x9b63838 0x7873acb3e0
	bool IsParentedTo(RigElementKey InChild, RigElementKey InParent);// 0x9b5defc 0x7873acb4c0
	static Vector GetVectorFromControlValue(RigControlValue InValue);// 0x9b5ce44 0x7873acb5a0
	static Vector2D GetVector2DFromControlValue(RigControlValue InValue);// 0x9b5d060 0x7873acb680
	static TransformNoScale GetTransformNoScaleFromControlValue(RigControlValue InValue);// 0x9b5c444 0x7873acb760
	static Transform GetTransformFromControlValue(RigControlValue InValue);// 0x9b5c928 0x7873acb840
	RigElementKey[] GetSelectedKeys(enum InTypeFilter);// 0x9b639cc 0x7873acb920
	static Rotator GetRotatorFromControlValue(RigControlValue InValue);// 0x9b5cc04 0x7873acba00
	RigElementKey[] GetRigidBodyKeys(bool bTraverse);// 0x9b63e40 0x7873acbae0
	RigElementKey[] GetReferenceKeys(bool bTraverse);// 0x9b63ac8 0x7873acbbc0
	RigElementKey GetPreviousParent(out const RigElementKey InKey);// 0x9b5c2c0 0x7873acbca0
	FName GetPreviousName(out const RigElementKey InKey);// 0x9b5c384 0x7873acbd80
	RigPose GetPose(bool bInitial);// 0x9b5da90 0x7873acbe60
	RigElementWeight[] GetParentWeightArray(RigElementKey InChild, bool bInitial);// 0x9b5eaa4 0x7873acbf40
	RigElementWeight GetParentWeight(RigElementKey InChild, RigElementKey InParent, bool bInitial);// 0x9b5ebfc 0x7873acc020
	Transform GetParentTransformByIndex(int InElementIndex, bool bInitial);// 0x9b5f178 0x7873acc100
	Transform GetParentTransform(RigElementKey InKey, bool bInitial);// 0x9b5f2d4 0x7873acc1e0
	RigElementKey[] GetParents(RigElementKey InKey, bool bRecursive);// 0x9b5eec8 0x7873acc2c0
	int GetNumberOfParents(RigElementKey InKey);// 0x9b5ed54 0x7873acc3a0
	RigElementKey[] GetNullKeys(bool bTraverse);// 0x9b647b0 0x7873acc480
	Transform GetLocalTransformByIndex(int InElementIndex, bool bInitial);// 0x9b63160 0x7873acc560
	Transform GetLocalTransform(RigElementKey InKey, bool bInitial);// 0x9b632e4 0x7873acc640
	RigElementKey GetKey(int InElementIndex);// 0x9b65e04 0x7873acc720
	static int GetIntFromControlValue(RigControlValue InValue);// 0x9b5d268 0x7873acc800
	int GetIndex_ForBlueprint(RigElementKey InKey);// 0x9b65ef8 0x7873acc8e0
	Transform GetGlobalTransformByIndex(int InElementIndex, bool bInitial);// 0x9b62730 0x7873acc9c0
	Transform GetGlobalTransform(RigElementKey InKey, bool bInitial);// 0x9b628b8 0x7873ac90e0
	Transform GetGlobalControlShapeTransformByIndex(int InElementIndex, bool bInitial);// 0x9b61a20 0x7873ac91c0
	Transform GetGlobalControlShapeTransform(RigElementKey InKey, bool bInitial);// 0x9b61b8c 0x7873ac92a0
	Transform GetGlobalControlOffsetTransformByIndex(int InElementIndex, bool bInitial);// 0x9b61dc0 0x7873ac9380
	Transform GetGlobalControlOffsetTransform(RigElementKey InKey, bool bInitial);// 0x9b61f2c 0x7873ac9460
	static float GetFloatFromControlValue(RigControlValue InValue);// 0x9b5d474 0x7873ac9540
	RigElementKey GetFirstParent(RigElementKey InKey);// 0x9b5ee0c 0x7873ac9620
	static EulerTransform GetEulerTransformFromControlValue(RigControlValue InValue);// 0x9b5c690 0x7873ac9700
	float GetCurveValueByIndex(int InElementIndex);// 0x9b60a0c 0x7873ac97e0
	float GetCurveValue(RigElementKey InKey);// 0x9b60ae8 0x7873ac98c0
	RigElementKey[] GetCurveKeys();// 0x9b641b8 0x7873ac99a0
	RigControlValue GetControlValueByIndex(int InElementIndex, enum InValueType);// 0x9b615f4 0x7873ac9a80
	RigControlValue GetControlValue(RigElementKey InKey, enum InValueType);// 0x9b617a8 0x7873ac9b60
	RigHierarchyController* GetController(bool bCreateIfNeeded);// 0x9b5dbec 0x7873ac9c40
	RigElementKey[] GetControlKeys(bool bTraverse);// 0x9b64438 0x7873ac9d20
	RigElementKey[] GetChildren(RigElementKey InKey, bool bRecursive);// 0x9b5f020 0x7873ac9e00
	RigElementKey[] GetBoneKeys(bool bTraverse);// 0x9b64b28 0x7873ac9ee0
	RigElementKey[] GetAllKeys_ForBlueprint(bool bTraverse);// 0x9b5ddf4 0x7873ac9fc0
	RigNullElement FindNull_ForBlueprintOnly(out const RigElementKey InKey);// 0x9b64ea0 0x7873aca0a0
	RigControlElement FindControl_ForBlueprintOnly(out const RigElementKey InKey);// 0x9b65224 0x7873aca180
	RigBoneElement FindBone_ForBlueprintOnly(out const RigElementKey InKey);// 0x9b65ad0 0x7873aca260
	void CopyPose(RigHierarchy* InHierarchy, bool bCurrent, bool bInitial);// 0x9b66378 0x7873aca340
	void CopyHierarchy(RigHierarchy* InHierarchy);// 0x9b664bc 0x7873aca420
	bool Contains_ForBlueprint(RigElementKey InKey);// 0x9b66068 0x7873aca500

--------------------------------
Class: RigPose
	RigPoseElement[] Elements;//[Offset: 0x0, Size: 0x10] 0x78736a92a0
	int HierarchyTopologyVersion;//[Offset: 0x10, Size: 0x4] 0x787388ea80
	int PoseHash;//[Offset: 0x14, Size: 0x4] 0x787388eb00

--------------------------------
Class: RigPoseElement
	CachedRigElement index;//[Offset: 0x0, Size: 0x20] 0x787388eb80
	Transform GlobalTransform;//[Offset: 0x20, Size: 0x60] 0x787388ec00
	Transform LocalTransform;//[Offset: 0x80, Size: 0x60] 0x787388ec80
	float CurveValue;//[Offset: 0xe0, Size: 0x4] 0x787388ed00

--------------------------------
Class: CachedRigElement
	RigElementKey Key;//[Offset: 0x0, Size: 0xc] 0x7873880880
	uint16 index;//[Offset: 0xc, Size: 0x2] 0x7873880900
	int ContainerVersion;//[Offset: 0x10, Size: 0x4] 0x7873880980

--------------------------------
Class: RigElementWeight
	float Location;//[Offset: 0x0, Size: 0x4] 0x787388de00
	float Rotation;//[Offset: 0x4, Size: 0x4] 0x787388de80
	float Scale;//[Offset: 0x8, Size: 0x4] 0x787388df00

--------------------------------
Class: RigControlValue
	RigControlValueStorage FloatStorage;//[Offset: 0x0, Size: 0x84] 0x7873887080
	Transform Storage;//[Offset: 0x90, Size: 0x60] 0x7873887100

--------------------------------
Class: RigControlValueStorage
	float Float00;//[Offset: 0x0, Size: 0x4] 0x7873888100
	float Float01;//[Offset: 0x4, Size: 0x4] 0x7873888180
	float Float02;//[Offset: 0x8, Size: 0x4] 0x7873888200
	float Float03;//[Offset: 0xc, Size: 0x4] 0x7873888280
	float Float10;//[Offset: 0x10, Size: 0x4] 0x7873888300
	float Float11;//[Offset: 0x14, Size: 0x4] 0x7873888380
	float Float12;//[Offset: 0x18, Size: 0x4] 0x7873888400
	float Float13;//[Offset: 0x1c, Size: 0x4] 0x7873886380
	float Float20;//[Offset: 0x20, Size: 0x4] 0x7873886400
	float Float21;//[Offset: 0x24, Size: 0x4] 0x7873886480
	float Float22;//[Offset: 0x28, Size: 0x4] 0x7873886500
	float Float23;//[Offset: 0x2c, Size: 0x4] 0x7873886580
	float Float30;//[Offset: 0x30, Size: 0x4] 0x7873886600
	float Float31;//[Offset: 0x34, Size: 0x4] 0x7873886680
	float Float32;//[Offset: 0x38, Size: 0x4] 0x7873886700
	float Float33;//[Offset: 0x3c, Size: 0x4] 0x7873886780
	float Float00;//[Offset: 0x40, Size: 0x4] 0x7873886800
	float Float01;//[Offset: 0x44, Size: 0x4] 0x7873886880
	float Float02;//[Offset: 0x48, Size: 0x4] 0x7873886900
	float Float03;//[Offset: 0x4c, Size: 0x4] 0x7873886980
	float Float10;//[Offset: 0x50, Size: 0x4] 0x7873886a00
	float Float11;//[Offset: 0x54, Size: 0x4] 0x7873886a80
	float Float12;//[Offset: 0x58, Size: 0x4] 0x7873886b00
	float Float13;//[Offset: 0x5c, Size: 0x4] 0x7873886b80
	float Float20;//[Offset: 0x60, Size: 0x4] 0x7873886c00
	float Float21;//[Offset: 0x64, Size: 0x4] 0x7873886c80
	float Float22;//[Offset: 0x68, Size: 0x4] 0x7873886d00
	float Float23;//[Offset: 0x6c, Size: 0x4] 0x7873886d80
	float Float30;//[Offset: 0x70, Size: 0x4] 0x7873886e00
	float Float31;//[Offset: 0x74, Size: 0x4] 0x7873886e80
	float Float32;//[Offset: 0x78, Size: 0x4] 0x7873886f00
	float Float33;//[Offset: 0x7c, Size: 0x4] 0x7873886f80
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x7873887000

--------------------------------
Class: RigControlSettings
	enum ControlType;//[Offset: 0x0, Size: 0x1] 0x78736a7680
	FName DisplayName;//[Offset: 0x4, Size: 0x8] 0x787388f580
	enum PrimaryAxis;//[Offset: 0xc, Size: 0x1] 0x78736a4160
	bool bIsCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x787388f680
	bool bAnimatable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1] 0x787388f700
	RigControlLimitEnabled[] LimitEnabled;//[Offset: 0x10, Size: 0x10] 0x78736a4480
	bool bDrawLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x787388d700
	RigControlValue MinimumValue;//[Offset: 0x30, Size: 0xf0] 0x787388d780
	RigControlValue MaximumValue;//[Offset: 0x120, Size: 0xf0] 0x787388d800
	bool bShapeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x787388d880
	bool bShapeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 0x1] 0x787388d900
	FName ShapeName;//[Offset: 0x214, Size: 0x8] 0x787388d980
	LinearColor ShapeColor;//[Offset: 0x21c, Size: 0x10] 0x787388da00
	bool bIsTransientControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1] 0x787388da80
	Enum* ControlEnum;//[Offset: 0x230, Size: 0x8] 0x787388db00
	RigControlElementCustomization Customization;//[Offset: 0x238, Size: 0x20] 0x787388db80

--------------------------------
Class: RigControlLimitEnabled
	bool bMinimum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787388e680
	bool bMaximum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x787388e700

--------------------------------
Class: TransformNoScale
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7873919700
	Quat Rotation;//[Offset: 0x20, Size: 0x20] 0x7873919780

--------------------------------
Class: EulerTransform
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x787389ce00
	Rotator Rotation;//[Offset: 0x18, Size: 0x18] 0x787389ce80
	Vector Scale;//[Offset: 0x30, Size: 0x18] 0x787389cf00

--------------------------------
Class: RigHierarchyController.Object
	bool bReportWarningsAndErrors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873b14400
	RigHierarchy* Hierarchy;//[Offset: 0x2c, Size: 0x8] 0x7873b14480
	bool SetSelection(out const RigElementKey[] InKeys, bool bPrintPythonCommand);// 0x9b76b4c 0x7873acea20
	bool SetParent(RigElementKey InChild, RigElementKey InParent, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);// 0x9b745e4 0x7873aceb00
	void SetHierarchy(RigHierarchy* InHierarchy);// 0x9b76e90 0x7873acebe0
	bool SetControlSettings(RigElementKey InKey, RigControlSettings InSettings, bool bSetupUndo);// 0x9b75a38 0x7873acecc0
	bool SelectElement(RigElementKey InKey, bool bSelect, bool bClearSelection);// 0x9b76d30 0x7873aceda0
	RigElementKey RenameElement(RigElementKey InElement, FName InName, bool bSetupUndo, bool bPrintPythonCommand, bool bClearSelection);// 0x9b74d60 0x7873acee80
	bool RemoveParent(RigElementKey InChild, RigElementKey InParent, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);// 0x9b7497c 0x7873acef60
	bool RemoveElement(RigElementKey InElement, bool bSetupUndo, bool bPrintPythonCommand);// 0x9b74f50 0x7873acf040
	bool RemoveAllParents(RigElementKey InChild, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);// 0x9b747d4 0x7873acf120
	RigElementKey[] MirrorElements(RigElementKey[] InKeys, RigMirrorSettings InSettings, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);// 0x9b7405c 0x7873acf200
	RigElementKey[] ImportFromText(FString InContent, bool bReplaceExistingElements, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);// 0x9b750b0 0x7873acf2e0
	RigElementKey[] ImportCurves(Skeleton* InSkeleton, FName InNameSpace, bool bSelectCurves, bool bSetupUndo, bool bPrintPythonCommand);// 0x9b75540 0x7873acf3c0
	RigElementKey[] ImportBones(Skeleton* InSkeleton, FName InNameSpace, bool bReplaceExistingBones, bool bRemoveObsoleteBones, bool bSelectBones, bool bSetupUndo, bool bPrintPythonCommand);// 0x9b75770 0x7873acf4a0
	RigHierarchy* GetHierarchy();// 0x9b76f38 0x7873acf580
	RigControlSettings GetControlSettings(RigElementKey InKey);// 0x9b75bf4 0x7873acf660
	FString ExportToText(RigElementKey[] InKeys);// 0x9b7533c 0x7873acf740
	FString ExportSelectionToText();// 0x9b75490 0x7873acf820
	RigElementKey[] DuplicateElements(RigElementKey[] InKeys, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);// 0x9b743a4 0x7873acf900
	bool DeselectElement(RigElementKey InKey);// 0x9b76c6c 0x7873acf9e0
	bool ClearSelection();// 0x9b76ac4 0x7873acfac0
	RigElementKey AddRigidBody(FName InName, RigElementKey InParent, RigRigidBodySettings InSettings, Transform InLocalTransform, bool bSetupUndo, bool bPrintPythonCommand);// 0x9b75e24 0x7873acfba0
	bool AddParent(RigElementKey InChild, RigElementKey InParent, float InWeight, bool bMaintainGlobalTransform, bool bSetupUndo);// 0x9b74b6c 0x7873acfc80
	RigElementKey AddNull(FName InName, RigElementKey InParent, Transform InTransform, bool bTransformInGlobal, bool bSetupUndo, bool bPrintPythonCommand);// 0x9b7659c 0x7873acfd60
	RigElementKey AddCurve(FName InName, float InValue, bool bSetupUndo, bool bPrintPythonCommand);// 0x9b76084 0x7873acfe40
	RigElementKey AddControl_ForBlueprint(FName InName, RigElementKey InParent, RigControlSettings InSettings, RigControlValue InValue, bool bSetupUndo);// 0x9b76228 0x7873acff20
	RigElementKey AddBone(FName InName, RigElementKey InParent, Transform InTransform, bool bTransformInGlobal, enum InBoneType, bool bSetupUndo, bool bPrintPythonCommand);// 0x9b76808 0x7873accaa0

--------------------------------
Class: RigMirrorSettings
	byte MirrorAxis;//[Offset: 0x0, Size: 0x1] 0x787388e480
	byte AxisToFlip;//[Offset: 0x1, Size: 0x1] 0x787388e500
	FString SearchString;//[Offset: 0x8, Size: 0x10] 0x787388e580
	FString ReplaceString;//[Offset: 0x18, Size: 0x10] 0x787388e600

--------------------------------
Class: RigRigidBodySettings
	float Mass;//[Offset: 0x0, Size: 0x4] 0x787388f300

--------------------------------
Class: RigNullElement.RigMultiParentElement.RigTransformElement.RigBaseElement

--------------------------------
Class: RigMultiParentElement.RigTransformElement.RigBaseElement
	RigCurrentAndInitialTransform Parent;//[Offset: 0x250, Size: 0x1c0] 0x787388dd80

--------------------------------
Class: RigTransformElement.RigBaseElement
	RigCurrentAndInitialTransform Pose;//[Offset: 0x50, Size: 0x1c0] 0x787388df80

--------------------------------
Class: RigBaseElement
	RigElementKey Key;//[Offset: 0x8, Size: 0xc] 0x787388e000
	int index;//[Offset: 0x14, Size: 0x4] 0x787388e080
	int SubIndex;//[Offset: 0x18, Size: 0x4] 0x787388e100
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x787388e180

--------------------------------
Class: RigCurrentAndInitialTransform
	RigLocalAndGlobalTransform Current;//[Offset: 0x0, Size: 0xe0] 0x787388e200
	RigLocalAndGlobalTransform Initial;//[Offset: 0xe0, Size: 0xe0] 0x787388e280

--------------------------------
Class: RigLocalAndGlobalTransform
	RigComputedTransform Local;//[Offset: 0x0, Size: 0x70] 0x787388e300
	RigComputedTransform Global;//[Offset: 0x70, Size: 0x70] 0x787388e380

--------------------------------
Class: RigComputedTransform
	Transform Transform;//[Offset: 0x0, Size: 0x60] 0x787388e400

--------------------------------
Class: RigControlElement.RigMultiParentElement.RigTransformElement.RigBaseElement
	RigControlSettings Settings;//[Offset: 0x510, Size: 0x260] 0x787388f380
	RigCurrentAndInitialTransform Offset;//[Offset: 0x770, Size: 0x1c0] 0x787388f400
	RigCurrentAndInitialTransform Shape;//[Offset: 0x930, Size: 0x1c0] 0x787388f480

--------------------------------
Class: RigBoneElement.RigSingleParentElement.RigTransformElement.RigBaseElement
	enum BoneType;//[Offset: 0x258, Size: 0x1] 0x78736a43e0

--------------------------------
Class: RigSingleParentElement.RigTransformElement.RigBaseElement

--------------------------------
Class: ControlRigShapeLibrary.Object
	ControlRigShapeDefinition DefaultShape;//[Offset: 0x30, Size: 0xa0] 0x7873ad4980
	Material* DefaultMaterial;//[Offset: 0xd0, Size: 0x28] 0x7873ad4a00
	FName MaterialColorParameter;//[Offset: 0xf8, Size: 0x8] 0x7873ad4a80
	ControlRigShapeDefinition[] Shapes;//[Offset: 0x100, Size: 0x10] 0x7873af0920

--------------------------------
Class: ControlRigShapeDefinition
	FName ShapeName;//[Offset: 0x0, Size: 0x8] 0x7873885600
	StaticMesh* StaticMesh;//[Offset: 0x8, Size: 0x28] 0x7873885680
	Transform Transform;//[Offset: 0x30, Size: 0x60] 0x7873885700

--------------------------------
Class: ControlRigDrawContainer
	ControlRigDrawInstruction[] Instructions;//[Offset: 0x8, Size: 0x10] 0x78736a10a0

--------------------------------
Class: ControlRigDrawInstruction
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7873885780
	byte PrimitiveType;//[Offset: 0x8, Size: 0x1] 0x7873885800
	Vector[] Positions;//[Offset: 0x10, Size: 0x10] 0x78736a13c0
	LinearColor Color;//[Offset: 0x20, Size: 0x10] 0x7873885900
	float Thickness;//[Offset: 0x30, Size: 0x4] 0x7873885980
	Transform Transform;//[Offset: 0x40, Size: 0x60] 0x7873885a00

--------------------------------
Class: AnimationDataSourceRegistry.Object
	<FName,Object*> DataSources;//[Offset: 0x28, Size: 0x50] 0x787386be00

--------------------------------
Class: RigInfluenceMapPerEvent
	RigInfluenceMap[] Maps;//[Offset: 0x0, Size: 0x10] 0x78736a9520
	<FName,int> EventToIndex;//[Offset: 0x10, Size: 0x50] 0x788ab54b40

--------------------------------
Class: RigInfluenceMap
	FName EventName;//[Offset: 0x0, Size: 0x8] 0x787388ff00
	RigInfluenceEntry[] Entries;//[Offset: 0x8, Size: 0x10] 0x78736a9480
	<RigElementKey,int> KeyToIndex;//[Offset: 0x18, Size: 0x50] 0x788ab54cc0

--------------------------------
Class: RigInfluenceEntry
	RigElementKey Source;//[Offset: 0x0, Size: 0xc] 0x787388e900
	RigElementKey[] AffectedList;//[Offset: 0x10, Size: 0x10] 0x78736a9340

--------------------------------
Class: ControlRigComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class ControlRig* ControlRigClass;//[Offset: 0x548, Size: 0x8] 0x7873af0ce0
	delegate OnPreInitializeDelegate;//[Offset: 0x550, Size: 0x10] 0x7873ad3c80
	delegate OnPostInitializeDelegate;//[Offset: 0x560, Size: 0x10] 0x7873ad3d00
	delegate OnPreSetupDelegate;//[Offset: 0x570, Size: 0x10] 0x7873ad3d80
	delegate OnPostSetupDelegate;//[Offset: 0x580, Size: 0x10] 0x7873ad3e00
	delegate OnPreForwardsSolveDelegate;//[Offset: 0x590, Size: 0x10] 0x7873ad3e80
	delegate OnPostForwardsSolveDelegate;//[Offset: 0x5a0, Size: 0x10] 0x7873ad3f00
	ControlRigComponentMappedElement[] MappedElements;//[Offset: 0x5b0, Size: 0x10] 0x7873af0d80
	bool bEnableLazyEvaluation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1] 0x7873ad4000
	float LazyEvaluationPositionThreshold;//[Offset: 0x5c4, Size: 0x4] 0x7873ad4080
	float LazyEvaluationRotationThreshold;//[Offset: 0x5c8, Size: 0x4] 0x7873ad4100
	float LazyEvaluationScaleThreshold;//[Offset: 0x5cc, Size: 0x4] 0x7873ad4180
	bool bResetTransformBeforeTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1] 0x7873ad4200
	bool bResetInitialsBeforeSetup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 0x1] 0x7873ad2180
	bool bUpdateRigOnTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d2, Size: 0x1] 0x7873ad2200
	bool bUpdateInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d3, Size: 0x1] 0x7873ad2280
	bool bDrawBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 0x1] 0x7873ad2300
	bool bShowDebugDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d5, Size: 0x1] 0x7873ad2380
	ControlRig* ControlRig;//[Offset: 0x5d8, Size: 0x8] 0x7873ad2400
	void Update(float DeltaTime);// 0x9b3f6d0 0x7873ac6600
	void SetMappedElements(ControlRigComponentMappedElement[] NewMappedElements);// 0x9b3f490 0x7873ac66e0
	void SetInitialSpaceTransform(FName SpaceName, Transform InitialTransform, enum Space);// 0x9b3d040 0x7873ac67c0
	void SetInitialBoneTransform(FName BoneName, Transform InitialTransform, enum Space, bool bPropagateToChildren);// 0x9b3e628 0x7873ac68a0
	void SetControlVector2D(FName ControlName, Vector2D Value);// 0x9b3db80 0x7873ac6980
	void SetControlTransform(FName ControlName, Transform Value, enum Space);// 0x9b3d65c 0x7873ac6a60
	void SetControlScale(FName ControlName, Vector Value, enum Space);// 0x9b3d7cc 0x7873ac6b40
	void SetControlRotator(FName ControlName, Rotator Value, enum Space);// 0x9b3d908 0x7873ac6c20
	void SetControlPosition(FName ControlName, Vector Value, enum Space);// 0x9b3da44 0x7873ac6d00
	void SetControlOffset(FName ControlName, Transform OffsetTransform, enum Space);// 0x9b3d3d8 0x7873ac6de0
	void SetControlInt(FName ControlName, int Value);// 0x9b3dc6c 0x7873ac6ec0
	void SetControlFloat(FName ControlName, float Value);// 0x9b3dd60 0x7873ac6fa0
	void SetControlBool(FName ControlName, bool Value);// 0x9b3de54 0x7873ac7080
	void SetBoneTransform(FName BoneName, Transform Transform, enum Space, float Weight, bool bPropagateToChildren);// 0x9b3e7ec 0x7873ac7160
	void SetBoneInitialTransformsFromSkeletalMesh(SkeletalMesh* InSkeletalMesh);// 0x9b3ee20 0x7873ac7240
	void OnPreSetup(ControlRigComponent* Component);// 0x9b3f99c 0x7873ac7320
	void OnPreInitialize(ControlRigComponent* Component);// 0x9b3fafc 0x7873ac3a40
	void OnPreForwardsSolve(ControlRigComponent* Component);// 0x9b3f83c 0x7873ac3b20
	void OnPostSetup(ControlRigComponent* Component);// 0x9b3f8ec 0x7873ac3c00
	void OnPostInitialize(ControlRigComponent* Component);// 0x9b3fa4c 0x7873ac3ce0
	void OnPostForwardsSolve(ControlRigComponent* Component);// 0x9b3f78c 0x7873ac3dc0
	void Initialize();// 0x9b3f778 0x7873ac3ea0
	Transform GetSpaceTransform(FName SpaceName, enum Space);// 0x9b3d2c4 0x7873ac3f80
	Transform GetInitialSpaceTransform(FName SpaceName, enum Space);// 0x9b3d1b0 0x7873ac4060
	Transform GetInitialBoneTransform(FName BoneName, enum Space);// 0x9b3e9fc 0x7873ac4140
	FName[] GetElementNames(enum ElementType);// 0x9b3ed24 0x7873ac4220
	Vector2D GetControlVector2D(FName ControlName);// 0x9b3e364 0x7873ac4300
	Transform GetControlTransform(FName ControlName, enum Space);// 0x9b3df50 0x7873ac43e0
	Vector GetControlScale(FName ControlName, enum Space);// 0x9b3e064 0x7873ac44c0
	Rotator GetControlRotator(FName ControlName, enum Space);// 0x9b3e164 0x7873ac45a0
	ControlRig* GetControlRig();// 0x9b3fc18 0x7873ac4680
	Vector GetControlPosition(FName ControlName, enum Space);// 0x9b3e264 0x7873ac4760
	Transform GetControlOffset(FName ControlName, enum Space);// 0x9b3d548 0x7873ac4840
	int GetControlInt(FName ControlName);// 0x9b3e414 0x7873ac4920
	float GetControlFloat(FName ControlName);// 0x9b3e4c4 0x7873ac4a00
	bool GetControlBool(FName ControlName);// 0x9b3e574 0x7873ac4ae0
	Transform GetBoneTransform(FName BoneName, enum Space);// 0x9b3eb10 0x7873ac4bc0
	float GetAbsoluteTime();// 0x9b3fbac 0x7873ac4ca0
	bool DoesElementExist(FName Name, enum ElementType);// 0x9b3ec24 0x7873ac4d80
	void ClearMappedElements();// 0x9b3f6bc 0x7873ac4e60
	bool CanExecute();// 0x9b3fbe0 0x7873ac4f40
	void AddMappedSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent, ControlRigComponentMappedBone[] Bones, ControlRigComponentMappedCurve[] Curves);// 0x9b3ef70 0x7873ac5020
	void AddMappedElements(ControlRigComponentMappedElement[] NewMappedElements);// 0x9b3f264 0x7873ac5100
	void AddMappedComponents(ControlRigComponentMappedComponent[] Components);// 0x9b3f164 0x7873ac51e0
	void AddMappedCompleteSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent);// 0x9b3eec8 0x7873ac52c0

--------------------------------
Class: ControlRigComponentMappedElement
	ComponentReference ComponentReference;//[Offset: 0x0, Size: 0x28] 0x7873886080
	int TransformIndex;//[Offset: 0x28, Size: 0x4] 0x7873886100
	FName TransformName;//[Offset: 0x2c, Size: 0x8] 0x7873886180
	enum ElementType;//[Offset: 0x34, Size: 0x1] 0x78736a1280
	FName ElementName;//[Offset: 0x38, Size: 0x8] 0x7873886280
	enum Direction;//[Offset: 0x40, Size: 0x1] 0x78736a1320
	Transform Offset;//[Offset: 0x50, Size: 0x60] 0x7873884280
	float Weight;//[Offset: 0xb0, Size: 0x4] 0x7873884300
	enum Space;//[Offset: 0xb4, Size: 0x1] 0x788ab2f7e0
	SceneComponent* SceneComponent;//[Offset: 0xb8, Size: 0x8] 0x7873884400
	int ElementIndex;//[Offset: 0xc0, Size: 0x4] 0x7873884480
	int SubIndex;//[Offset: 0xc4, Size: 0x4] 0x7873884500

--------------------------------
Class: ComponentReference
	Actor* OtherActor;//[Offset: 0x0, Size: 0x8] 0x7873885f00
	FName ComponentProperty;//[Offset: 0x8, Size: 0x8] 0x7873885f80
	FString PathToComponent;//[Offset: 0x10, Size: 0x10] 0x7873886000

--------------------------------
Class: ControlRigComponentMappedBone
	FName Source;//[Offset: 0x0, Size: 0x8] 0x7873885c00
	FName Target;//[Offset: 0x8, Size: 0x8] 0x7873885c80

--------------------------------
Class: ControlRigComponentMappedCurve
	FName Source;//[Offset: 0x0, Size: 0x8] 0x7873885b00
	FName Target;//[Offset: 0x8, Size: 0x8] 0x7873885b80

--------------------------------
Class: ControlRigComponentMappedComponent
	SceneComponent* Component;//[Offset: 0x0, Size: 0x8] 0x7873885d00
	FName ElementName;//[Offset: 0x8, Size: 0x8] 0x7873885d80
	enum ElementType;//[Offset: 0x10, Size: 0x1] 0x78736a1140
	enum Direction;//[Offset: 0x11, Size: 0x1] 0x78736a11e0

--------------------------------
Class: ControlRigShapeActor.Actor.Object
	SceneComponent* ActorRootComponent;//[Offset: 0x288, Size: 0x8] 0x7873ad4b80
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x290, Size: 0x8] 0x7873ad4c00
	uint32 ControlRigIndex;//[Offset: 0x298, Size: 0x4] 0x7873ad4c80
	FName ControlName;//[Offset: 0x29c, Size: 0x8] 0x7873ad4d00
	FName ColorParameterName;//[Offset: 0x2a4, Size: 0x8] 0x7873ad4d80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ac, Size: 0x1] 0x7873ad4e00
	bool bSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ac, Size: 0x1] 0x7873ad4e80
	bool bSelectable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ac, Size: 0x1] 0x7873ad4f00
	bool bHovered;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ac, Size: 0x1] 0x7873ad4f80
	void SetSelected(bool bInSelected);// 0x9b4cf50 0x7873ac5800
	void SetSelectable(bool bInSelectable);// 0x9b4ce58 0x7873ac58e0
	void SetHovered(bool bInHovered);// 0x9b4cda0 0x7873ac59c0
	void SetGlobalTransform(out const Transform InTransform);// 0x9b4cc88 0x7873ac5aa0
	void SetEnabled(bool bInEnabled);// 0x9b4d048 0x7873ac5b80
	void OnTransformChanged(out const Transform NewTransform);// 0xb8f1ab4 0x7873ac5c60
	void OnSelectionChanged(bool bIsSelected);// 0xb8f1ab4 0x7873ac5d40
	void OnManipulatingChanged(bool bIsManipulating);// 0xb8f1ab4 0x7873ac5e20
	void OnHoveredChanged(bool bIsSelected);// 0xb8f1ab4 0x7873ac5f00
	void OnEnabledChanged(bool bIsEnabled);// 0xb8f1ab4 0x7873ac5fe0
	bool IsSelectedInEditor();// 0x9b4cf10 0x7873ac60c0
	bool IsHovered();// 0x9b4cd60 0x7873ac61a0
	bool IsEnabled();// 0x9b4d008 0x7873ac6280
	Transform GetGlobalTransform();// 0x9b4cc14 0x7873ac6360

--------------------------------
Class: ControlRigNumericalValidationPass.ControlRigValidationPass.Object
	bool bCheckControls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873ad4480
	bool bCheckBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7873ad4500
	bool bCheckCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x7873ad4580
	float TranslationPrecision;//[Offset: 0x2c, Size: 0x4] 0x7873ad4600
	float RotationPrecision;//[Offset: 0x30, Size: 0x4] 0x7873ad4680
	float ScalePrecision;//[Offset: 0x34, Size: 0x4] 0x7873ad4700
	float CurvePrecision;//[Offset: 0x38, Size: 0x4] 0x7873ad4780
	FName EventNameA;//[Offset: 0x3c, Size: 0x8] 0x7873ad4800
	FName EventNameB;//[Offset: 0x44, Size: 0x8] 0x7873ad4880
	RigPose Pose;//[Offset: 0x50, Size: 0x70] 0x7873ad4900

--------------------------------
Class: ControlRigValidationPass.Object

--------------------------------
Class: ControlRigPoseMirrorSettings.Object
	FString RightSide;//[Offset: 0x28, Size: 0x10] 0x7873ad5b00
	FString LeftSide;//[Offset: 0x38, Size: 0x10] 0x7873ad5b80
	byte MirrorAxis;//[Offset: 0x48, Size: 0x1] 0x7873ad5c00
	byte AxisToFlip;//[Offset: 0x49, Size: 0x1] 0x7873ad5c80

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x68, Size: 0x8] 0x7873ad7100
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x70, Size: 0x50] 0x7873ad7180
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0xc0, Size: 0xa0] 0x7873ad7200
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x160, Size: 0x50] 0x7873869e80
	ClassPtrProperty DirectorClass;//[Size: 0x8] 0x7873af0240
	AssetUserData*[] AssetUserData;//[Offset: 0x1b8, Size: 0x10] 0x7873af02e0
	void RemoveMetaDataByClass(class Object InClass);// 0xf6ad180 0x7873ac8580
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0xf6ad2b0 0x7873ac8660
	Object* FindMetaDataByClass(class Object InClass);// 0xf6ad350 0x7873ac8740
	Object* CopyMetaData(Object* InMetaData);// 0xf6ad210 0x7873ac8820

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50] 0x787395d000
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50] 0x787376c9a0

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10] 0x787376ca40

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10] 0x787398e300
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18] 0x787398e380
	FString ObjectPath;//[Offset: 0x28, Size: 0x10] 0x787398e400

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c] 0x787398df80
	FString ComponentName;//[Offset: 0x20, Size: 0x10] 0x787398e000
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8] 0x787398e080

--------------------------------
Class: ControlRigEditorSettings.DeveloperSettings.Object

--------------------------------
Class: FKControlRig.ControlRig.Object
	bool[] IsControlActive;//[Offset: 0x498, Size: 0x10] 0x7873af0060
	enum ApplyMode;//[Offset: 0x4a8, Size: 0x1] 0x7873af0100

--------------------------------
Class: MovieSceneBuiltInEasingFunction.Object
	enum Type;//[Offset: 0x30, Size: 0x1] 0x7873cc3b20

--------------------------------
Class: MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFolderExtensions.BlueprintFunctionLibrary.Object
	static bool SetFolderName(MovieSceneFolder* Folder, FName InFolderName);// 0x9d1b8dc 0x7873b20240
	static bool SetFolderColor(MovieSceneFolder* Folder, Color InFolderColor);// 0x9d1b744 0x7873b20320
	static bool RemoveChildObjectBinding(MovieSceneFolder* Folder, const SequencerBindingProxy InObjectBinding);// 0x9d1aea0 0x7873b20400
	static bool RemoveChildMasterTrack(MovieSceneFolder* Folder, MovieSceneTrack* InMasterTrack);// 0x9d1b18c 0x7873b204e0
	static bool RemoveChildFolder(MovieSceneFolder* TargetFolder, MovieSceneFolder* FolderToRemove);// 0x9d1b468 0x7873b205c0
	static FName GetFolderName(MovieSceneFolder* Folder);// 0x9d1b9d0 0x7873b206a0
	static Color GetFolderColor(MovieSceneFolder* Folder);// 0x9d1b834 0x7873b20780
	static SequencerBindingProxy[] GetChildObjectBindings(MovieSceneFolder* Folder);// 0x9d1b098 0x7873b20860
	static MovieSceneTrack*[] GetChildMasterTracks(MovieSceneFolder* Folder);// 0x9d1b374 0x7873b20940
	static MovieSceneFolder*[] GetChildFolders(MovieSceneFolder* Folder);// 0x9d1b650 0x7873b20a20
	static bool AddChildObjectBinding(MovieSceneFolder* Folder, SequencerBindingProxy InObjectBinding);// 0x9d1af9c 0x7873b20b00
	static bool AddChildMasterTrack(MovieSceneFolder* Folder, MovieSceneTrack* InMasterTrack);// 0x9d1b280 0x7873b20be0
	static bool AddChildFolder(MovieSceneFolder* TargetFolder, MovieSceneFolder* FolderToAdd);// 0x9d1b55c 0x7873b20cc0

--------------------------------
Class: MovieSceneFolder.Object
	FName FolderName;//[Offset: 0x28, Size: 0x8] 0x7873cd6300
	MovieSceneFolder*[] ChildFolders;//[Offset: 0x30, Size: 0x10] 0x7873cc3940
	MovieSceneTrack*[] ChildMasterTracks;//[Offset: 0x40, Size: 0x10] 0x7873cc39e0
	FString[] ChildObjectBindingStrings;//[Offset: 0x50, Size: 0x10] 0x7873cc3a80

--------------------------------
Class: SequencerBindingProxy
	Guid BindingID;//[Offset: 0x0, Size: 0x10] 0x78738e1200
	MovieSceneSequence* Sequence;//[Offset: 0x10, Size: 0x8] 0x78738e1280

--------------------------------
Class: MovieSceneScriptingActorReferenceKey.MovieSceneScriptingKey.Object
	void SetValue(out const MovieSceneObjectBindingID InNewValue);// 0x9d1cde0 0x7873b23340
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x9d1cfcc 0x7873b23420
	MovieSceneObjectBindingID GetValue();// 0x9d1cefc 0x7873b23500
	FrameTime GetTime(enum TimeUnit);// 0x9d1d118 0x7873b235e0

--------------------------------
Class: MovieSceneScriptingKey.Object

--------------------------------
Class: MovieSceneScriptingBoolKey.MovieSceneScriptingKey.Object
	void SetValue(bool InNewValue);// 0x9d1e438 0x7873b229a0
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x9d1e5cc 0x7873b22a80
	bool GetValue();// 0x9d1e524 0x7873b22b60
	FrameTime GetTime(enum TimeUnit);// 0x9d1e718 0x7873b22c40

--------------------------------
Class: MovieSceneScriptingByteChannel.MovieSceneScriptingChannel.Object
	void SetDefault(byte InDefaultValue);// 0x9d20bc0 0x7873b25100
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x9d20db8 0x7873b251e0
	void RemoveDefault();// 0x9d209c8 0x7873b252c0
	bool HasDefault();// 0x9d208cc 0x7873b253a0
	MovieSceneScriptingKey*[] GetKeys();// 0x9d20d00 0x7873b25480
	byte GetDefault();// 0x9d20ab0 0x7873b25560
	MovieSceneScriptingByteKey* AddKey(out const FrameNumber InTime, byte NewValue, float SubFrame, enum TimeUnit, enum InInterpolation);// 0x9d20e68 0x7873b25640

--------------------------------
Class: MovieSceneScriptingChannel.Object
	FName ChannelName;//[Offset: 0x28, Size: 0x8] 0x7873b17800

--------------------------------
Class: MovieSceneScriptingByteKey.MovieSceneScriptingKey.Object
	void SetValue(byte InNewValue);// 0x9d1ffb8 0x7873b21d60
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x9d20144 0x7873b21e40
	byte GetValue();// 0x9d2009c 0x7873b21f20
	FrameTime GetTime(enum TimeUnit);// 0x9d20290 0x7873b22000

--------------------------------
Class: MovieSceneScriptingEventKey.MovieSceneScriptingKey.Object
	void SetValue(out const MovieSceneEvent InNewValue);// 0x9d29a54 0x7873b26b40
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x9d29c48 0x7873b26c20
	MovieSceneEvent GetValue();// 0x9d29b78 0x7873b26d00
	FrameTime GetTime(enum TimeUnit);// 0x9d29d94 0x7873b26de0

--------------------------------
Class: MovieSceneEvent
	MovieSceneEventPtrs Ptrs;//[Offset: 0x0, Size: 0x28] 0x7873966d00

--------------------------------
Class: MovieSceneEventPtrs
	Function* Function;//[Offset: 0x0, Size: 0x8] 0x7873966d80
	FieldPathProperty BoundObjectProperty;//[Size: 0x20] 0x7873966e00

--------------------------------
Class: MovieSceneScriptingActualFloatKey.MovieSceneScriptingFloatKey.MovieSceneScriptingKey.Object

--------------------------------
Class: MovieSceneScriptingFloatKey.MovieSceneScriptingKey.Object
	void SetValue(float InNewValue);// 0x9d2b364 0x7873b258e0
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x9d2b450 0x7873b259c0
	void SetTangentWeightMode(byte InNewValue);// 0x9d2aec8 0x7873b25aa0
	void SetTangentMode(byte InNewValue);// 0x9d2b18c 0x7873b25b80
	void SetLeaveTangentWeight(float InNewValue);// 0x9d2acf0 0x7873b25c60
	void SetLeaveTangent(float InNewValue);// 0x9d2afb4 0x7873b25d40
	void SetInterpolationMode(byte InNewValue);// 0x9d2b278 0x7873b25e20
	void SetArriveTangentWeight(float InNewValue);// 0x9d2addc 0x7873b25f00
	void SetArriveTangent(float InNewValue);// 0x9d2b0a0 0x7873b25fe0
	float GetValue();// 0x9d2b414 0x7873b260c0
	FrameTime GetTime(enum TimeUnit);// 0x9d2b59c 0x7873b261a0
	byte GetTangentWeightMode();// 0x9d2af78 0x7873b26280
	byte GetTangentMode();// 0x9d2b23c 0x7873b26360
	float GetLeaveTangentWeight();// 0x9d2ada0 0x7873b26440
	float GetLeaveTangent();// 0x9d2b064 0x7873b26520
	byte GetInterpolationMode();// 0x9d2b328 0x7873b26600
	float GetArriveTangentWeight();// 0x9d2ae8c 0x7873b266e0
	float GetArriveTangent();// 0x9d2b150 0x7873b267c0

--------------------------------
Class: MovieSceneScriptingIntegerKey.MovieSceneScriptingKey.Object
	void SetValue(int InNewValue);// 0x9d2e588 0x7873b282e0
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x9d2e714 0x7873b283c0
	int GetValue();// 0x9d2e66c 0x7873b284a0
	FrameTime GetTime(enum TimeUnit);// 0x9d2e860 0x7873b28580

--------------------------------
Class: MovieSceneScriptingObjectPathChannel.MovieSceneScriptingChannel.Object
	void SetDefault(Object* InDefaultValue);// 0x9d393b0 0x7873b2ace0
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x9d39544 0x7873b27400
	void RemoveDefault();// 0x9d39200 0x7873b274e0
	bool HasDefault();// 0x9d391c4 0x7873b275c0
	MovieSceneScriptingKey*[] GetKeys();// 0x9d3948c 0x7873b276a0
	Object* GetDefault();// 0x9d3924c 0x7873b27780
	MovieSceneScriptingObjectPathKey* AddKey(const FrameNumber InTime, Object* NewValue, float SubFrame, enum TimeUnit);// 0x9d395f4 0x7873b27860

--------------------------------
Class: MovieSceneScriptingObjectPathKey.MovieSceneScriptingKey.Object
	void SetValue(Object* InNewValue);// 0x9d38758 0x7873b27940
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x9d38a3c 0x7873b27a20
	Object* GetValue();// 0x9d38934 0x7873b27b00
	FrameTime GetTime(enum TimeUnit);// 0x9d38b88 0x7873b27be0

--------------------------------
Class: MovieSceneSectionExtensions.BlueprintFunctionLibrary.Object
	static void SetStartFrameSeconds(MovieSceneSection* Section, float StartTime);// 0x9d3c190 0x7873b292a0
	static void SetStartFrameBounded(MovieSceneSection* Section, bool bIsBounded);// 0x9d3c0a4 0x7873b29380
	static void SetStartFrame(MovieSceneSection* Section, int StartFrame);// 0x9d3c274 0x7873b29460
	static void SetRangeSeconds(MovieSceneSection* Section, float StartTime, float EndTime);// 0x9d3c358 0x7873b29540
	static void SetRange(MovieSceneSection* Section, int StartFrame, int EndFrame);// 0x9d3c484 0x7873b29620
	static void SetEndFrameSeconds(MovieSceneSection* Section, float EndTime);// 0x9d3bedc 0x7873b29700
	static void SetEndFrameBounded(MovieSceneSection* Section, bool bIsBounded);// 0x9d3bdf0 0x7873b297e0
	static void SetEndFrame(MovieSceneSection* Section, int EndFrame);// 0x9d3bfc0 0x7873b298c0
	static bool HasStartFrame(MovieSceneSection* Section);// 0x9d3c8fc 0x7873b299a0
	static bool HasEndFrame(MovieSceneSection* Section);// 0x9d3c700 0x7873b29a80
	static float GetStartFrameSeconds(MovieSceneSection* Section);// 0x9d3c7ac 0x7873b29b60
	static int GetStartFrame(MovieSceneSection* Section);// 0x9d3c854 0x7873b29c40
	static int GetParentSequenceFrame(MovieSceneSubSection* Section, int InFrame, MovieSceneSequence* ParentSequence);// 0x9d3b850 0x7873b29d20
	static float GetEndFrameSeconds(MovieSceneSection* Section);// 0x9d3c5b0 0x7873b29e00
	static int GetEndFrame(MovieSceneSection* Section);// 0x9d3c658 0x7873b29ee0
	static MovieSceneScriptingChannel*[] GetChannelsByType(MovieSceneSection* Section, class MovieSceneScriptingChannel ChannelType);// 0x9d3b990 0x7873b29fc0
	static MovieSceneScriptingChannel*[] GetChannels(MovieSceneSection* Section);// 0x9d3bcfc 0x7873b2a0a0
	static MovieSceneScriptingChannel*[] GetAllChannels(MovieSceneSection* Section);// 0x9d3bc08 0x7873b2a180
	static MovieSceneScriptingChannel*[] FindChannelsByType(MovieSceneSection* Section, class MovieSceneScriptingChannel ChannelType);// 0x9d3bacc 0x7873b2a260

--------------------------------
Class: MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionParameters Parameters;//[Offset: 0xdc, Size: 0x24] 0x7873b61f80
	float StartOffset;//[Offset: 0x100, Size: 0x4] 0x7873b62000
	float TimeScale;//[Offset: 0x104, Size: 0x4] 0x7873b62080
	float PrerollTime;//[Offset: 0x108, Size: 0x4] 0x7873b62100
	byte NetworkMask;//[Offset: 0x10c, Size: 0x1] 0x7873b60080
	MovieSceneSequence* SubSequence;//[Offset: 0x110, Size: 0x8] 0x7873b60100
	void SetSequence(MovieSceneSequence* Sequence);// 0xecbde54 0x7873b54ca0
	MovieSceneSequence* GetSequence();// 0xecbdefc 0x7873b54d80

--------------------------------
Class: MovieSceneSectionParameters
	FrameNumber StartFrameOffset;//[Offset: 0x0, Size: 0x4] 0x787392f480
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x787392f500
	FrameNumber EndFrameOffset;//[Offset: 0x8, Size: 0x4] 0x787392f580
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x787392f600
	float TimeScale;//[Offset: 0x10, Size: 0x4] 0x787392f680
	int HierarchicalBias;//[Offset: 0x14, Size: 0x4] 0x787392f700
	float StartOffset;//[Offset: 0x18, Size: 0x4] 0x787392f780
	float PrerollTime;//[Offset: 0x1c, Size: 0x4] 0x787392d700
	float PostrollTime;//[Offset: 0x20, Size: 0x4] 0x787392d780

--------------------------------
Class: MovieSceneFloatVectorTrackExtensions.BlueprintFunctionLibrary.Object
	static void SetNumChannelsUsed(MovieSceneFloatVectorTrack* Track, int InNumChannelsUsed);// 0x9d469a4 0x7873b2f900
	static int GetNumChannelsUsed(MovieSceneFloatVectorTrack* Track);// 0x9d468fc 0x7873b2f9e0

--------------------------------
Class: MovieSceneFloatVectorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int NumChannelsUsed;//[Offset: 0xc0, Size: 0x4] 0x7873cedf00

--------------------------------
Class: MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection* SectionToKey;//[Offset: 0x90, Size: 0x8] 0x7873bc9d80
	MovieScenePropertyBinding PropertyBinding;//[Offset: 0x98, Size: 0x14] 0x7873bc9e00
	MovieSceneSection*[] Sections;//[Offset: 0xb0, Size: 0x10] 0x7873bb1820

--------------------------------
Class: MovieScenePropertyBinding
	FName PropertyName;//[Offset: 0x0, Size: 0x8] 0x78738e7700
	FName PropertyPath;//[Offset: 0x8, Size: 0x8] 0x78738e7780
	bool bCanUseClassLookup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78738e7800

--------------------------------
Class: RetargetChainSettings.Object
	FName SourceChain;//[Offset: 0x28, Size: 0x8] 0x7873b47080
	FName TargetChain;//[Offset: 0x30, Size: 0x8] 0x7873b47100
	bool CopyPoseUsingFK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7873b47180
	enum RotationMode;//[Offset: 0x39, Size: 0x1] 0x7873af5420
	float RotationAlpha;//[Offset: 0x3c, Size: 0x4] 0x7873b47280
	enum TranslationMode;//[Offset: 0x40, Size: 0x1] 0x7873af54c0
	float TranslationAlpha;//[Offset: 0x44, Size: 0x4] 0x7873b47380
	bool DriveIKGoal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7873b45300
	float BlendToSource;//[Offset: 0x4c, Size: 0x4] 0x7873b45380
	Vector BlendToSourceWeights;//[Offset: 0x50, Size: 0x18] 0x7873b45400
	Vector StaticOffset;//[Offset: 0x68, Size: 0x18] 0x7873b45480
	float Extension;//[Offset: 0x80, Size: 0x4] 0x7873b45500
	float MatchSourceVelocity;//[Offset: 0x84, Size: 0x4] 0x7873b45580
	float VelocityThreshold;//[Offset: 0x88, Size: 0x4] 0x7873b45600

--------------------------------
Class: IKRigComponent.ActorComponent.Object
	void SetIKRigGoalTransform(const FName GoalName, const Transform Transform, const float PositionAlpha, const float RotationAlpha);// 0x9d6f880 0x7873b2e940
	void SetIKRigGoalPositionAndRotation(const FName GoalName, const Vector Position, const Quat Rotation, const float PositionAlpha, const float RotationAlpha);// 0x9d6faa4 0x7873b2ea20
	void SetIKRigGoal(out const IKRigGoal Goal);// 0x9d6f770 0x7873b2eb00
	void ClearAllGoals();// 0x9d6f744 0x7873b2ebe0

--------------------------------
Class: IKRigGoal
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78738e2580
	enum TransformSource;//[Offset: 0x8, Size: 0x1] 0x7873749480
	BoneReference SourceBone;//[Offset: 0xc, Size: 0x10] 0x78738e2680
	Vector Position;//[Offset: 0x20, Size: 0x18] 0x78738e2700
	Rotator Rotation;//[Offset: 0x38, Size: 0x18] 0x78738e2780
	float PositionAlpha;//[Offset: 0x50, Size: 0x4] 0x78738e2800
	float RotationAlpha;//[Offset: 0x54, Size: 0x4] 0x78738e2880
	enum PositionSpace;//[Offset: 0x58, Size: 0x1] 0x78737493e0
	enum RotationSpace;//[Offset: 0x59, Size: 0x1] 0x7873749340
	Vector FinalBlendedPosition;//[Offset: 0x60, Size: 0x18] 0x78738e2a00
	Quat FinalBlendedRotation;//[Offset: 0x80, Size: 0x20] 0x78738e2a80

--------------------------------
Class: IKGoalCreatorInterface.Interface.Object
	void AddIKGoals(out <FName,IKRigGoal> OutGoals);// 0x9d7112c 0x7873b2e860

--------------------------------
Class: IKRig_BodyMoverEffector.Object
	FName GoalName;//[Offset: 0x28, Size: 0x8] 0x7873b47e80
	FName BoneName;//[Offset: 0x30, Size: 0x8] 0x7873b47f00
	float InfluenceMultiplier;//[Offset: 0x38, Size: 0x4] 0x7873b47f80

--------------------------------
Class: IKRig_LimbSolver.IKRigSolver.Object
	FName RootName;//[Offset: 0x28, Size: 0x8] 0x7873b49200
	float ReachPrecision;//[Offset: 0x30, Size: 0x4] 0x7873b49280
	byte HingeRotationAxis;//[Offset: 0x34, Size: 0x1] 0x7873b49300
	int MaxIterations;//[Offset: 0x38, Size: 0x4] 0x7873b49380
	bool bEnableLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x7873b49400
	float MinRotationAngle;//[Offset: 0x40, Size: 0x4] 0x7873b49480
	bool bAveragePull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7873b47400
	float PullDistribution;//[Offset: 0x48, Size: 0x4] 0x7873b47480
	float ReachStepAlpha;//[Offset: 0x4c, Size: 0x4] 0x7873b47500
	bool bEnableTwistCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7873b47580
	byte EndBoneForwardAxis;//[Offset: 0x51, Size: 0x1] 0x7873b47600
	IKRig_LimbEffector* Effector;//[Offset: 0x58, Size: 0x8] 0x7873b47680

--------------------------------
Class: IKRigSolver.Object

--------------------------------
Class: IKRig_LimbEffector.Object
	FName GoalName;//[Offset: 0x28, Size: 0x8] 0x7873b47700
	FName BoneName;//[Offset: 0x30, Size: 0x8] 0x7873b47780

--------------------------------
Class: IKRig_PBIKBoneSettings.Object
	FName bone;//[Offset: 0x28, Size: 0x8] 0x7873b48800
	float RotationStiffness;//[Offset: 0x30, Size: 0x4] 0x7873b48880
	float PositionStiffness;//[Offset: 0x34, Size: 0x4] 0x7873b48900
	enum X;//[Offset: 0x38, Size: 0x1] 0x7873af77c0
	float MinX;//[Offset: 0x3c, Size: 0x4] 0x7873b48a00
	float MaxX;//[Offset: 0x40, Size: 0x4] 0x7873b48a80
	enum Y;//[Offset: 0x44, Size: 0x1] 0x7873af7860
	float MinY;//[Offset: 0x48, Size: 0x4] 0x7873b48b80
	float MaxY;//[Offset: 0x4c, Size: 0x4] 0x7873b48c00
	enum Z;//[Offset: 0x50, Size: 0x1] 0x7873af7900
	float MinZ;//[Offset: 0x54, Size: 0x4] 0x7873b48d00
	float MaxZ;//[Offset: 0x58, Size: 0x4] 0x7873b48d80
	bool bUsePreferredAngles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x7873b48e00
	Vector PreferredAngles;//[Offset: 0x60, Size: 0x18] 0x7873b48e80

--------------------------------
Class: IKRig_PoleSolver.IKRigSolver.Object
	FName RootName;//[Offset: 0x28, Size: 0x8] 0x7873b4a180
	FName EndName;//[Offset: 0x30, Size: 0x8] 0x7873b4a200
	IKRig_PoleSolverEffector* Effector;//[Offset: 0x38, Size: 0x8] 0x7873b4a280

--------------------------------
Class: IKRig_PoleSolverEffector.Object
	FName GoalName;//[Offset: 0x28, Size: 0x8] 0x7873b4a300
	FName BoneName;//[Offset: 0x30, Size: 0x8] 0x7873b4a380
	float Alpha;//[Offset: 0x38, Size: 0x4] 0x7873b4a400

--------------------------------
Class: IKRig_SetTransform.IKRigSolver.Object
	FName Goal;//[Offset: 0x28, Size: 0x8] 0x7873b49e80
	FName RootBone;//[Offset: 0x30, Size: 0x8] 0x7873b49f00
	IKRig_SetTransformEffector* Effector;//[Offset: 0x38, Size: 0x8] 0x7873b49f80

--------------------------------
Class: IKRig_SetTransformEffector.Object
	bool bEnablePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873b4a000
	bool bEnableRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7873b4a080
	float Alpha;//[Offset: 0x2c, Size: 0x4] 0x7873b4a100

--------------------------------
Class: TestCameraShake.CameraShakeBase.Object

--------------------------------
Class: CompositeCameraShakePattern.CameraShakePattern.Object
	CameraShakePattern*[] ChildPatterns;//[Offset: 0x28, Size: 0x10] 0x7873af74a0

--------------------------------
Class: PerlinNoiseCameraShakePattern.SimpleCameraShakePattern.CameraShakePattern.Object
	float LocationAmplitudeMultiplier;//[Offset: 0x34, Size: 0x4] 0x7873b4cf00
	float LocationFrequencyMultiplier;//[Offset: 0x38, Size: 0x4] 0x7873b4cf80
	PerlinNoiseShaker X;//[Offset: 0x3c, Size: 0x8] 0x7873b4d000
	PerlinNoiseShaker Y;//[Offset: 0x44, Size: 0x8] 0x7873b4d080
	PerlinNoiseShaker Z;//[Offset: 0x4c, Size: 0x8] 0x7873b4d100
	float RotationAmplitudeMultiplier;//[Offset: 0x54, Size: 0x4] 0x7873b4d180
	float RotationFrequencyMultiplier;//[Offset: 0x58, Size: 0x4] 0x7873b4d200
	PerlinNoiseShaker Pitch;//[Offset: 0x5c, Size: 0x8] 0x7873b4d280
	PerlinNoiseShaker Yaw;//[Offset: 0x64, Size: 0x8] 0x7873b4d300
	PerlinNoiseShaker Roll;//[Offset: 0x6c, Size: 0x8] 0x7873b4d380
	PerlinNoiseShaker FOV;//[Offset: 0x74, Size: 0x8] 0x7873b4d400

--------------------------------
Class: SimpleCameraShakePattern.CameraShakePattern.Object
	float Duration;//[Offset: 0x28, Size: 0x4] 0x7873b4a680
	float BlendInTime;//[Offset: 0x2c, Size: 0x4] 0x7873b4a700
	float BlendOutTime;//[Offset: 0x30, Size: 0x4] 0x7873b4a780

--------------------------------
Class: PerlinNoiseShaker
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x78738e7c80
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x78738e7d00

--------------------------------
Class: MatineeCameraShakePattern.CameraShakePattern.Object

--------------------------------
Class: MatineeCameraShakeFunctionLibrary.BlueprintFunctionLibrary.Object
	static MatineeCameraShake* Conv_MatineeCameraShake(CameraShakeBase* CameraShake);// 0x9dc2224 0x7873b50940

--------------------------------
Class: MatineeCameraShake.CameraShakeBase.Object
	float OscillationDuration;//[Offset: 0xe8, Size: 0x4] 0x7873b4d580
	float OscillationBlendInTime;//[Offset: 0xec, Size: 0x4] 0x7873b4d600
	float OscillationBlendOutTime;//[Offset: 0xf0, Size: 0x4] 0x7873b4d680
	ROscillator RotOscillation;//[Offset: 0xf4, Size: 0x24] 0x7873b4b600
	VOscillator LocOscillation;//[Offset: 0x118, Size: 0x24] 0x7873b4b680
	FOscillator FOVOscillation;//[Offset: 0x13c, Size: 0xc] 0x7873b4b700
	float AnimPlayRate;//[Offset: 0x148, Size: 0x4] 0x7873b4b780
	float AnimScale;//[Offset: 0x14c, Size: 0x4] 0x7873b4b800
	float AnimBlendInTime;//[Offset: 0x150, Size: 0x4] 0x7873b4b880
	float AnimBlendOutTime;//[Offset: 0x154, Size: 0x4] 0x7873b4b900
	float RandomAnimSegmentDuration;//[Offset: 0x158, Size: 0x4] 0x7873b4b980
	CameraAnim* Anim;//[Offset: 0x160, Size: 0x8] 0x7873b4ba00
	CameraAnimationSequence* AnimSequence;//[Offset: 0x168, Size: 0x8] 0x7873b4ba80
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1] 0x7873b4bb00
	float OscillatorTimeRemaining;//[Offset: 0x174, Size: 0x4] 0x7873b4bb80
	CameraAnimInst* AnimInst;//[Offset: 0x178, Size: 0x8] 0x7873b4bc00
	SequenceCameraShakePattern* SequenceShakePattern;//[Offset: 0x1f8, Size: 0x8] 0x7873b4bc80
	static MatineeCameraShake* StartMatineeCameraShakeFromSource(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x9dc0b5c 0x7873b50a20
	static MatineeCameraShake* StartMatineeCameraShake(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x9dc0d78 0x7873b50b00
	void ReceiveStopShake(bool bImmediately);// 0xb8f1ab4 0x7873b50be0
	void ReceivePlayShake(float Scale);// 0xb8f1ab4 0x7873b50cc0
	bool ReceiveIsFinished();// 0x9dc0f48 0x7873b50da0
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0xb8f1ab4 0x7873b50e80

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc] 0x78738e7f00
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc] 0x78738e7f80
	FOscillator Roll;//[Offset: 0x18, Size: 0xc] 0x78738e8000

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x78738e8080
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x78738e8100
	byte InitialOffset;//[Offset: 0x8, Size: 0x1] 0x78738e8180
	enum Waveform;//[Offset: 0x9, Size: 0x1] 0x78737479a0

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc] 0x78738e7d80
	FOscillator Y;//[Offset: 0xc, Size: 0xc] 0x78738e7e00
	FOscillator Z;//[Offset: 0x18, Size: 0xc] 0x78738e7e80

--------------------------------
Class: CameraAnimationSequence.TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object

--------------------------------
Class: TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x7873b4c780
	class Actor* BoundActorClass;//[Offset: 0x68, Size: 0x28] 0x7873af7180
	Actor* BoundPreviewActor;//[Offset: 0x90, Size: 0x28] 0x7873b4c800
	<Guid,FName> BoundActorComponents;//[Offset: 0xb8, Size: 0x50] 0x7873869ac0

--------------------------------
Class: SequenceCameraShakePattern.CameraShakePattern.Object
	CameraAnimationSequence* Sequence;//[Offset: 0x28, Size: 0x8] 0x7873b4dc80
	float PlayRate;//[Offset: 0x30, Size: 0x4] 0x7873b4dd00
	float Scale;//[Offset: 0x34, Size: 0x4] 0x7873b4dd80
	float BlendInTime;//[Offset: 0x38, Size: 0x4] 0x7873b4de00
	float BlendOutTime;//[Offset: 0x3c, Size: 0x4] 0x7873b4de80
	float RandomSegmentDuration;//[Offset: 0x40, Size: 0x4] 0x7873b4df00
	bool bRandomSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7873b4df80
	CameraAnimationSequencePlayer* Player;//[Offset: 0x48, Size: 0x8] 0x7873b4e000
	CameraAnimationSequenceCameraStandIn* CameraStandIn;//[Offset: 0x50, Size: 0x8] 0x7873b4e080

--------------------------------
Class: CameraAnimationSequencePlayer.Object
	Object* BoundObjectOverride;//[Offset: 0x2a8, Size: 0x8] 0x7873b4e180
	MovieSceneSequence* Sequence;//[Offset: 0x2b0, Size: 0x8] 0x7873b4e200
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x2b8, Size: 0xe0] 0x7873b4e280

--------------------------------
Class: CameraAnimationSequenceCameraStandIn.Object
	float FieldOfView;//[Offset: 0x30, Size: 0x4] 0x7873b4e300
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7873b4e380
	float AspectRatio;//[Offset: 0x38, Size: 0x4] 0x7873b4e400
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x6b0] 0x7873b4e480
	float PostProcessBlendWeight;//[Offset: 0x6f0, Size: 0x4] 0x7873b4e500
	CameraFilmbackSettings Filmback;//[Offset: 0x6f4, Size: 0xc] 0x7873b4e580
	CameraLensSettings LensSettings;//[Offset: 0x700, Size: 0x18] 0x7873b4e600
	CameraFocusSettings FocusSettings;//[Offset: 0x718, Size: 0x68] 0x7873b4e680
	float CurrentFocalLength;//[Offset: 0x780, Size: 0x4] 0x7873b4e700
	float CurrentAperture;//[Offset: 0x784, Size: 0x4] 0x7873b4c680
	float CurrentFocusDistance;//[Offset: 0x788, Size: 0x4] 0x7873b4c700

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4] 0x787396b500
	float SensorHeight;//[Offset: 0x4, Size: 0x4] 0x787396b580
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4] 0x7873969500

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4] 0x787396b100
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4] 0x787396b180
	float MinFStop;//[Offset: 0x8, Size: 0x4] 0x787396b200
	float MaxFStop;//[Offset: 0xc, Size: 0x4] 0x787396b280
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4] 0x787396b300
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4] 0x787396b380

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1] 0x7873767fe0
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4] 0x787396ab00
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x48] 0x787396ab80
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x787396ac00
	Color DebugFocusPlaneColor;//[Offset: 0x54, Size: 0x4] 0x787396ac80
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x787396ad00
	float FocusSmoothingInterpSpeed;//[Offset: 0x5c, Size: 0x4] 0x787396ad80
	float FocusOffset;//[Offset: 0x60, Size: 0x4] 0x787396ae00

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28] 0x787396ae80
	Vector RelativeOffset;//[Offset: 0x28, Size: 0x18] 0x787396af00
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x787396af80

--------------------------------
Class: CameraAnimationSequenceSubsystem.WorldSubsystem.Subsystem.Object
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x30, Size: 0x8] 0x7873b4e100

--------------------------------
Class: TemplateSequencePlayer.MovieSceneSequencePlayer.Object
	static TemplateSequencePlayer* CreateTemplateSequencePlayer(Object* WorldContextObject, TemplateSequence* TemplateSequence, MovieSceneSequencePlaybackSettings Settings, out TemplateSequenceActor* OutActor);// 0x9de5260 0x7873b54e60

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x238, Size: 0x10] 0x7873b60500
	delegate OnPlayReverse;//[Offset: 0x248, Size: 0x10] 0x7873b60580
	delegate OnStop;//[Offset: 0x258, Size: 0x10] 0x7873b60600
	delegate OnPause;//[Offset: 0x268, Size: 0x10] 0x7873b60680
	delegate OnFinished;//[Offset: 0x278, Size: 0x10] 0x7873b60700
	byte Status;//[Offset: 0x288, Size: 0x1] 0x7873b60780
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x289, Size: 0x1] 0x7873b60800
	MovieSceneSequence* Sequence;//[Offset: 0x290, Size: 0x8] 0x7873b60880
	FrameNumber StartTime;//[Offset: 0x298, Size: 0x4] 0x7873b60900
	int DurationFrames;//[Offset: 0x29c, Size: 0x4] 0x7873b60980
	float DurationSubFrames;//[Offset: 0x2a0, Size: 0x4] 0x7873b60a00
	int CurrentNumLoops;//[Offset: 0x2a4, Size: 0x4] 0x7873b60a80
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x2a8, Size: 0x14] 0x7873b60b00
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x2c0, Size: 0xe0] 0x7873b60b80
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x420, Size: 0x10] 0x7873b60c00
	interface class None* PlaybackClient;//[Offset: 0x430, Size: 0x10] 0x7873b60c80
	MovieSceneSequenceTickManager* TickManager;//[Offset: 0x440, Size: 0x8] 0x7873b60d00
	void StopAtCurrentTime();// 0xecbab1c 0x7873b54f40
	void Stop();// 0xecbab30 0x7873b55020
	void SetTimeRange(float StartTime, float Duration);// 0xecba72c 0x7873b55100
	void SetPlayRate(float PlayRate);// 0xecb99ac 0x7873b551e0
	void SetPlaybackPosition(MovieSceneSequencePlaybackParams PlaybackParams);// 0xecba490 0x7873b552c0
	void SetFrameRate(FrameRate FrameRate);// 0xecba9a0 0x7873b553a0
	void SetFrameRange(int StartFrame, int Duration, float SubFrames);// 0xecba81c 0x7873b55480
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0xecb98f4 0x7873b55560
	void ScrubToSeconds(float TimeInSeconds);// 0xecba074 0x7873b55640
	bool ScrubToMarkedFrame(FString InLabel);// 0xecb9cac 0x7873b51d60
	void ScrubToFrame(FrameTime NewPosition);// 0xecba2e4 0x7873b51e40
	void Scrub();// 0xecbab44 0x7873b51f20
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0xecb93f0 0x7873b52000
	void RPC_OnFinishPlaybackEvent(FrameTime StoppedTime);// 0xecb9340 0x7873b520e0
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0xecb94a0 0x7873b521c0
	void RestoreState();// 0xecba47c 0x7873b522a0
	void PlayToSeconds(float TimeInSeconds);// 0xecba144 0x7873b52380
	bool PlayToMarkedFrame(FString InLabel);// 0xecb9e28 0x7873b52460
	void PlayToFrame(FrameTime NewPosition);// 0xecba3b4 0x7873b52540
	void PlayTo(MovieSceneSequencePlaybackParams PlaybackParams, MovieSceneSequencePlayToParams PlayToParams);// 0xecba5bc 0x7873b52620
	void PlayReverse();// 0xecbac28 0x7873b52700
	void PlayLooping(int NumLoops);// 0xecbab6c 0x7873b527e0
	void Play();// 0xecbac3c 0x7873b528c0
	void Pause();// 0xecbab58 0x7873b529a0
	void JumpToSeconds(float TimeInSeconds);// 0xecb9fa4 0x7873b52a80
	bool JumpToMarkedFrame(FString InLabel);// 0xecb9b30 0x7873b52b60
	void JumpToFrame(FrameTime NewPosition);// 0xecba214 0x7873b52c40
	bool IsReversed();// 0xecb9a88 0x7873b52d20
	bool IsPlaying();// 0xecb9af8 0x7873b52e00
	bool IsPaused();// 0xecb9ac0 0x7873b52ee0
	void GoToEndAndStop();// 0xecbab08 0x7873b52fc0
	QualifiedFrameTime GetStartTime();// 0xecba980 0x7873b530a0
	FString GetSequenceName(bool bAddClientInfo);// 0xecb959c 0x7873b53180
	MovieSceneSequence* GetSequence();// 0xecb96a0 0x7873b53260
	float GetPlayRate();// 0xecb9a54 0x7873b53340
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0xecb96bc 0x7873b53420
	FrameRate GetFrameRate();// 0xecbaa50 0x7873b53500
	int GetFrameDuration();// 0xecbaa6c 0x7873b535e0
	QualifiedFrameTime GetEndTime();// 0xecba958 0x7873b536c0
	QualifiedFrameTime GetDuration();// 0xecbaaa0 0x7873b537a0
	bool GetDisableCameraCuts();// 0xecb98d4 0x7873b53880
	QualifiedFrameTime GetCurrentTime();// 0xecbaad4 0x7873b53960
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0xecb97b8 0x7873b50080
	void ChangePlaybackDirection();// 0xecbac14 0x7873b50160

--------------------------------
Class: MovieSceneSequencePlaybackParams
	FrameTime Frame;//[Offset: 0x0, Size: 0x8] 0x7873940800
	float Time;//[Offset: 0x8, Size: 0x4] 0x7873940880
	FString MarkedFrame;//[Offset: 0x10, Size: 0x10] 0x7873940900
	enum PositionType;//[Offset: 0x20, Size: 0x1] 0x78736ac9a0
	enum UpdateMethod;//[Offset: 0x21, Size: 0x1] 0x78736ac900
	bool bHasJumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1] 0x7873940a80

--------------------------------
Class: MovieSceneSequencePlayToParams
	bool bExclusive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873940780

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7873940b00
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4] 0x7873940b80
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x7873940c00
	float StartTime;//[Offset: 0xc, Size: 0x4] 0x7873940c80
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7873940d00
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x7873940d80
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x7873940e00
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x7873940e80
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x7873940f00
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x7873940f80
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x7873941000
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x7873941080

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4] 0x787392f980

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8] 0x787392f800
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1] 0x787392f880
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4] 0x787392f900

--------------------------------
Class: TemplateSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x298, Size: 0x14] 0x7873b4f400
	TemplateSequencePlayer* SequencePlayer;//[Offset: 0x2b0, Size: 0x8] 0x7873b4f480
	SoftObjectPath TemplateSequence;//[Offset: 0x2b8, Size: 0x18] 0x7873b4f500
	TemplateSequenceBindingOverrideData BindingOverride;//[Offset: 0x2d0, Size: 0xc] 0x7873b4f580
	void SetSequence(TemplateSequence* InSequence);// 0x9de4990 0x7873b50240
	void SetBinding(Actor* Actor, bool bOverridesDefault);// 0x9de4860 0x7873b50320
	TemplateSequence* LoadSequence();// 0x9de4a38 0x7873b50400
	TemplateSequencePlayer* GetSequencePlayer();// 0x9de495c 0x7873b504e0
	TemplateSequence* GetSequence();// 0x9de4a6c 0x7873b505c0

--------------------------------
Class: TemplateSequenceBindingOverrideData
	Object* Object;//[Offset: 0x0, Size: 0x8] 0x78738e7a00
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78738e7a80

--------------------------------
Class: MovieSceneSequenceTickManager.Object
	MovieSceneSequenceActorPointers[] SequenceActors;//[Offset: 0x28, Size: 0x10] 0x7873cc38a0
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 0x8] 0x7873cd6180

--------------------------------
Class: MovieSceneSequenceActorPointers
	Actor* SequenceActor;//[Offset: 0x0, Size: 0x8] 0x7873940680
	interface class None* SequenceActorInterface;//[Offset: 0x8, Size: 0x10] 0x7873940700

--------------------------------
Class: TemplateSequencePropertyScalingInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEntitySystem.Object
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x28, Size: 0x8] 0x7873b61e80

--------------------------------
Class: TemplateSequenceTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10] 0x7873af6e60

--------------------------------
Class: AnimSharingTransitionInstance.AnimInstance.Object
	SkeletalMeshComponent* FromComponent;//[Offset: 0x348, Size: 0x8] 0x7873b63080
	SkeletalMeshComponent* ToComponent;//[Offset: 0x350, Size: 0x8] 0x7873b63100
	float BlendTime;//[Offset: 0x358, Size: 0x4] 0x7873b63180
	bool bBlendBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 0x1] 0x7873b61100

--------------------------------
Class: AnimationSharingManager.Object
	Skeleton*[] Skeletons;//[Offset: 0x28, Size: 0x10] 0x7873af6a00
	AnimSharingInstance*[] PerSkeletonData;//[Offset: 0x38, Size: 0x10] 0x7873af6aa0
	void RegisterActorWithSkeletonBP(Actor* InActor, const Skeleton* SharingSkeleton);// 0x9e189f4 0x7873b54840
	static AnimationSharingManager* GetAnimationSharingManager(Object* WorldContextObject);// 0x9e18bd8 0x7873b54920
	static bool CreateAnimationSharingManager(Object* WorldContextObject, const AnimationSharingSetup* Setup);// 0x9e18ae4 0x7873b54a00
	static bool AnimationSharingEnabled();// 0x9e189bc 0x7873b54ae0

--------------------------------
Class: AnimationSharingSetup.Object
	PerSkeletonAnimationSharingSetup[] SkeletonSetups;//[Offset: 0x28, Size: 0x10] 0x7873af6960
	AnimationSharingScalability ScalabilitySettings;//[Offset: 0x38, Size: 0x10] 0x7873b62680

--------------------------------
Class: PerSkeletonAnimationSharingSetup
	Skeleton* Skeleton;//[Offset: 0x0, Size: 0x8] 0x78738e8e00
	SkeletalMesh* SkeletalMesh;//[Offset: 0x8, Size: 0x8] 0x78738e8e80
	class AnimSharingTransitionInstance* BlendAnimBlueprint;//[Offset: 0x10, Size: 0x8] 0x7873745560
	class AnimSharingAdditiveInstance* AdditiveAnimBlueprint;//[Offset: 0x18, Size: 0x8] 0x78737454c0
	class AnimationSharingStateProcessor* StateProcessorClass;//[Offset: 0x20, Size: 0x8] 0x7873745420
	AnimationStateEntry[] AnimationStates;//[Offset: 0x28, Size: 0x10] 0x7873745380

--------------------------------
Class: AnimSharingAdditiveInstance.AnimInstance.Object
	SkeletalMeshComponent* BaseComponent;//[Offset: 0x348, Size: 0x8] 0x7873b62e80
	AnimSequence* AdditiveAnimation;//[Offset: 0x350, Size: 0x8] 0x7873b62f00
	float Alpha;//[Offset: 0x358, Size: 0x4] 0x7873b62f80
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 0x1] 0x7873b63000

--------------------------------
Class: AnimationSharingStateProcessor.Object
	Enum* AnimationStateEnum;//[Offset: 0x28, Size: 0x28] 0x7873b62280
	void ProcessActorState(out int OutState, Actor* InActor, byte CurrentState, byte OnDemandState, out bool bShouldProcess);// 0x9e19900 0x7873b54680
	Enum* GetAnimationStateEnum();// 0x9e198c4 0x7873b54760

--------------------------------
Class: AnimationStateEntry
	byte State;//[Offset: 0x0, Size: 0x1] 0x78738e8f80
	AnimationSetup[] AnimationSetups;//[Offset: 0x8, Size: 0x10] 0x78737452e0
	bool bOnDemand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78738e9080
	bool bAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78738e9100
	float BlendTime;//[Offset: 0x1c, Size: 0x4] 0x78738e9180
	bool bReturnToPreviousState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78738e9200
	bool bSetNextState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x78738e9280
	byte NextState;//[Offset: 0x22, Size: 0x1] 0x78738e9300
	PerPlatformInt MaximumNumberOfConcurrentInstances;//[Offset: 0x24, Size: 0x4] 0x78738e9380
	float WiggleTimePercentage;//[Offset: 0x28, Size: 0x4] 0x78738e9400
	bool bRequiresCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78738e9480

--------------------------------
Class: AnimationSetup
	AnimSequence* AnimSequence;//[Offset: 0x0, Size: 0x8] 0x78738e7400
	class AnimSharingStateInstance* AnimBlueprint;//[Offset: 0x8, Size: 0x8] 0x7873747b80
	PerPlatformInt NumRandomizedInstances;//[Offset: 0x10, Size: 0x4] 0x78738e7500
	PerPlatformBool Enabled;//[Offset: 0x14, Size: 0x1] 0x78738e7600

--------------------------------
Class: AnimSharingStateInstance.AnimInstance.Object
	AnimSequence* AnimationToPlay;//[Offset: 0x348, Size: 0x8] 0x7873b61180
	float PermutationTimeOffset;//[Offset: 0x350, Size: 0x4] 0x7873b61200
	float PlayRate;//[Offset: 0x354, Size: 0x4] 0x7873b61280
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1] 0x7873b61300
	AnimSharingInstance* Instance;//[Offset: 0x360, Size: 0x8] 0x7873b61380
	void GetInstancedActors(out Actor*[] Actors);// 0x9e17828 0x7873b54bc0

--------------------------------
Class: AnimSharingInstance.Object
	Actor*[] RegisteredActors;//[Offset: 0x28, Size: 0x10] 0x7873af6b40
	AnimationSharingStateProcessor* StateProcessor;//[Offset: 0x88, Size: 0x8] 0x7873b62c80
	AnimSequence*[] UsedAnimationSequences;//[Offset: 0xc8, Size: 0x10] 0x7873af6be0
	Enum* StateEnum;//[Offset: 0xe8, Size: 0x8] 0x7873b62d80
	Actor* SharingActor;//[Offset: 0xf0, Size: 0x8] 0x7873b62e00

--------------------------------
Class: AnimationSharingScalability
	PerPlatformBool UseBlendTransitions;//[Offset: 0x0, Size: 0x1] 0x78738e8b80
	PerPlatformFloat BlendSignificanceValue;//[Offset: 0x4, Size: 0x4] 0x78738e8c00
	PerPlatformInt MaximumNumberConcurrentBlends;//[Offset: 0x8, Size: 0x4] 0x78738e8c80
	PerPlatformFloat TickSignificanceValue;//[Offset: 0xc, Size: 0x4] 0x78738e8d80

--------------------------------
Class: SignificanceManager.Object
	SoftClassPath SignificanceManagerClassName;//[Offset: 0x108, Size: 0x18] 0x7873b62200

--------------------------------
Class: DatasmithObjectTemplate.Object

--------------------------------
Class: DatasmithAreaLightActor.Actor.Object
	byte Mobility;//[Offset: 0x288, Size: 0x1] 0x7873b68400
	enum LightType;//[Offset: 0x289, Size: 0x1] 0x7873af8620
	enum LightShape;//[Offset: 0x28a, Size: 0x1] 0x7873af86c0
	Vector2D Dimensions;//[Offset: 0x290, Size: 0x10] 0x7873b66480
	float Intensity;//[Offset: 0x2a0, Size: 0x4] 0x7873b66500
	enum IntensityUnits;//[Offset: 0x2a4, Size: 0x1] 0x7873af8760
	LinearColor Color;//[Offset: 0x2a8, Size: 0x10] 0x7873b66600
	float Temperature;//[Offset: 0x2b8, Size: 0x4] 0x7873b66680
	TextureLightProfile* IESTexture;//[Offset: 0x2c0, Size: 0x8] 0x7873b66700
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x7873b66780
	float IESBrightnessScale;//[Offset: 0x2cc, Size: 0x4] 0x7873b66800
	Rotator Rotation;//[Offset: 0x2d0, Size: 0x18] 0x7873b66880
	float SourceRadius;//[Offset: 0x2e8, Size: 0x4] 0x7873b66900
	float SourceLength;//[Offset: 0x2ec, Size: 0x4] 0x7873b66980
	float AttenuationRadius;//[Offset: 0x2f0, Size: 0x4] 0x7873b66a00
	float SpotlightInnerAngle;//[Offset: 0x2f4, Size: 0x4] 0x7873b66a80
	float SpotlightOuterAngle;//[Offset: 0x2f8, Size: 0x4] 0x7873b66b00

--------------------------------
Class: DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithTranslatedSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithGLTFSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	FString Generator;//[Offset: 0x28, Size: 0x10] 0x7873b67a80
	float Version;//[Offset: 0x38, Size: 0x4] 0x7873b67b00
	FString Author;//[Offset: 0x40, Size: 0x10] 0x7873b67b80
	FString License;//[Offset: 0x50, Size: 0x10] 0x7873b67c00
	FString Source;//[Offset: 0x60, Size: 0x10] 0x7873b67c80

--------------------------------
Class: DatasmithDeltaGenAssetImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithVREDSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bMergeNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x7873b68e80
	bool bOptimizeDuplicatedNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x7873b68f00
	bool bImportMats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7873b68f80
	FString MatsPath;//[Offset: 0x48, Size: 0x10] 0x7873b69000
	bool bImportVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7873b69080
	bool bCleanVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x7873b69100
	FString VarPath;//[Offset: 0x60, Size: 0x10] 0x7873b69180
	bool bImportLightInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7873b69200
	FString LightInfoPath;//[Offset: 0x78, Size: 0x10] 0x7873b69280
	bool bImportClipInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x7873b69300
	FString ClipInfoPath;//[Offset: 0x90, Size: 0x10] 0x7873b69380

--------------------------------
Class: DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873b67800
	FString TexturesDir;//[Offset: 0x30, Size: 0x10] 0x7873b67880
	byte IntermediateSerialization;//[Offset: 0x40, Size: 0x1] 0x7873b67900
	bool bColorizeMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x7873b67980

--------------------------------
Class: DatasmithAssetUserData.AssetUserData.Object
	<FName,FString> MetaData;//[Offset: 0x28, Size: 0x50] 0x7873869a00

--------------------------------
Class: DatasmithContentBlueprintLibrary.BlueprintFunctionLibrary.Object
	static FString GetDatasmithUserDataValueForKey(Object* Object, FName Key);// 0x9e42c38 0x7873b55f00
	static void GetDatasmithUserDataKeysAndValuesForValue(Object* Object, FString StringToMatch, out FName[] OutKeys, out FString[] OutValues);// 0x9e42a4c 0x7873b55fe0
	static DatasmithAssetUserData* GetDatasmithUserData(Object* Object);// 0x9e42d74 0x7873b560c0

--------------------------------
Class: DatasmithImportedSequencesActor.Actor.Object
	LevelSequence*[] ImportedSequences;//[Offset: 0x288, Size: 0x10] 0x7873af8260
	void PlayLevelSequence(LevelSequence* SequenceToPlay);// 0x9e439fc 0x7873b55e20

--------------------------------
Class: DatasmithCommonTessellationOptions.DatasmithOptionsBase.Object
	DatasmithTessellationOptions Options;//[Offset: 0x28, Size: 0x10] 0x7873b6a300

--------------------------------
Class: DatasmithOptionsBase.Object

--------------------------------
Class: DatasmithTessellationOptions
	float ChordTolerance;//[Offset: 0x0, Size: 0x4] 0x78738e9780
	float MaxEdgeLength;//[Offset: 0x4, Size: 0x4] 0x78738e9800
	float NormalTolerance;//[Offset: 0x8, Size: 0x4] 0x78738e9880
	enum StitchingTechnique;//[Offset: 0xc, Size: 0x1] 0x7873745880

--------------------------------
Class: DatasmithLightComponentTemplate.DatasmithObjectTemplate.Object
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x7873b69680
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1] 0x7873b69700
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1] 0x7873b69780
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1] 0x7873b69800
	float Intensity;//[Offset: 0x2c, Size: 0x4] 0x7873b69880
	float Temperature;//[Offset: 0x30, Size: 0x4] 0x7873b69900
	float IESBrightnessScale;//[Offset: 0x34, Size: 0x4] 0x7873b69980
	LinearColor LightColor;//[Offset: 0x38, Size: 0x10] 0x7873b69a00
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x48, Size: 0x8] 0x7873b69a80
	TextureLightProfile* IESTexture;//[Offset: 0x50, Size: 0x8] 0x7873b69b00

--------------------------------
Class: DatasmithPostProcessVolumeTemplate.DatasmithObjectTemplate.Object
	DatasmithPostProcessSettingsTemplate Settings;//[Offset: 0x30, Size: 0x40] 0x7873b6b000
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7873b6b080
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x7873b6b100

--------------------------------
Class: DatasmithPostProcessSettingsTemplate
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78738ea100
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78738ea180
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78738ea200
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78738ea280
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78738ea300
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78738ea380
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78738ea400
	float WhiteTemp;//[Offset: 0x4, Size: 0x4] 0x78738ea480
	float VignetteIntensity;//[Offset: 0x8, Size: 0x4] 0x78738ea500
	Vector4 ColorSaturation;//[Offset: 0x10, Size: 0x20] 0x78738e8480
	byte AutoExposureMethod;//[Offset: 0x30, Size: 0x1] 0x78738e8500
	float CameraISO;//[Offset: 0x34, Size: 0x4] 0x78738e8580
	float CameraShutterSpeed;//[Offset: 0x38, Size: 0x4] 0x78738e8600
	float DepthOfFieldFstop;//[Offset: 0x3c, Size: 0x4] 0x78738e8680

--------------------------------
Class: DatasmithSceneComponentTemplate.DatasmithObjectTemplate.Object
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x60] 0x7873b6ac00
	byte Mobility;//[Offset: 0x90, Size: 0x1] 0x7873b6ac80
	SceneComponent* AttachParent;//[Offset: 0x98, Size: 0x28] 0x7873b6ad00
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x7873b6ad80
	<FName> Tags;//[Offset: 0xc8, Size: 0x50] 0x7873af7c20

--------------------------------
Class: DatasmithStaticMeshComponentTemplate.DatasmithObjectTemplate.Object
	StaticMesh* StaticMesh;//[Offset: 0x30, Size: 0x8] 0x7873b6a880
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x38, Size: 0x10] 0x7873afa4c0

--------------------------------
Class: LevelVariantSetsActor.Actor.Object
	SoftObjectPath LevelVariantSets;//[Offset: 0x288, Size: 0x18] 0x7873b6be80
	<DirectorInstances_Key(ClassPtrProperty),LevelVariantSetsFunctionDirector*> DirectorInstances;//[Offset: 0x2a0, Size: 0x50] 0x7873869640
	bool SwitchOnVariantByName(FString VariantSetName, FString VariantName);// 0x9e6b9dc 0x7873b55800
	bool SwitchOnVariantByIndex(int VariantSetIndex, int VariantIndex);// 0x9e6b8e0 0x7873b558e0
	void SetLevelVariantSets(LevelVariantSets* InVariantSets);// 0x9e6bb8c 0x7873b559c0
	LevelVariantSets* GetLevelVariantSets(bool bLoad);// 0x9e6bc34 0x7873b55aa0

--------------------------------
Class: LevelVariantSetsFunctionDirector.Object

--------------------------------
Class: LevelVariantSets.Object
	ClassPtrProperty DirectorClass;//[Size: 0x8] 0x7873afa240
	VariantSet*[] VariantSets;//[Offset: 0x30, Size: 0x10] 0x7873afa2e0
	VariantSet* GetVariantSetByName(FString VariantSetName);// 0x9e6b15c 0x7873b55b80
	VariantSet* GetVariantSet(int VariantSetIndex);// 0x9e6b268 0x7873b55c60
	int GetNumVariantSets();// 0x9e6b318 0x7873b55d40

--------------------------------
Class: VariantSet.Object
	FText DisplayText;//[Offset: 0x28, Size: 0x18] 0x7873b6db00
	bool bExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7873b6db80
	Variant*[] Variants;//[Offset: 0x60, Size: 0x10] 0x7873af9980
	Texture2D* Thumbnail;//[Offset: 0x70, Size: 0x8] 0x7873b6dc80
	void SetThumbnailFromTexture(Texture2D* NewThumbnail);// 0x9e70b6c 0x7873b5ace0
	void SetThumbnailFromFile(FString FilePath);// 0x9e70a70 0x7873b57400
	void SetThumbnailFromEditorViewport();// 0x9e7086c 0x7873b574e0
	void SetThumbnailFromCamera(Object* WorldContextObject, out const Transform CameraTransform, float FOVDegrees, float MinZ, float Gamma);// 0x9e70880 0x7873b575c0
	void SetDisplayText(out const FText NewDisplayText);// 0x9e70edc 0x7873b576a0
	Variant* GetVariantByName(FString VariantName);// 0x9e70c14 0x7873b57780
	Variant* GetVariant(int VariantIndex);// 0x9e70d20 0x7873b57860
	Texture2D* GetThumbnail();// 0x9e70838 0x7873b57940
	LevelVariantSets* GetParent();// 0x9e70ff4 0x7873b57a20
	int GetNumVariants();// 0x9e70dd0 0x7873b57b00
	FText GetDisplayText();// 0x9e70e04 0x7873b57be0

--------------------------------
Class: Variant.Object
	VariantDependency[] Dependencies;//[Offset: 0x28, Size: 0x10] 0x7873af9b60
	FText DisplayText;//[Offset: 0x38, Size: 0x18] 0x7873b6c700
	VariantObjectBinding*[] ObjectBindings;//[Offset: 0x68, Size: 0x10] 0x7873af9c00
	Texture2D* Thumbnail;//[Offset: 0x78, Size: 0x8] 0x7873b6c800
	void SwitchOn();// 0x9e6f8f0 0x7873b57cc0
	void SetThumbnailFromTexture(Texture2D* NewThumbnail);// 0x9e6f810 0x7873b57da0
	void SetThumbnailFromFile(FString FilePath);// 0x9e6f714 0x7873b57e80
	void SetThumbnailFromEditorViewport();// 0x9e6f510 0x7873b57f60
	void SetThumbnailFromCamera(Object* WorldContextObject, out const Transform CameraTransform, float FOVDegrees, float MinZ, float Gamma);// 0x9e6f524 0x7873b58040
	void SetDisplayText(out const FText NewDisplayText);// 0x9e6fac0 0x7873b58120
	void SetDependency(int index, out VariantDependency Dependency);// 0x9e6f054 0x7873b58200
	bool IsActive();// 0x9e6f8b8 0x7873b582e0
	Texture2D* GetThumbnail();// 0x9e6f4dc 0x7873b583c0
	VariantSet* GetParent();// 0x9e6fbd8 0x7873b584a0
	int GetNumDependencies();// 0x9e6ef78 0x7873b58580
	int GetNumActors();// 0x9e6f9b4 0x7873b58660
	FText GetDisplayText();// 0x9e6f9e8 0x7873b58740
	Variant*[] GetDependents(LevelVariantSets* LevelVariantSets, bool bOnlyEnabledDependencies);// 0x9e6f38c 0x7873b58820
	VariantDependency GetDependency(int index);// 0x9e6f1ac 0x7873b58900
	Actor* GetActor(int ActorIndex);// 0x9e6f904 0x7873b589e0
	void DeleteDependency(int index);// 0x9e6efac 0x7873b58ac0
	int AddDependency(out VariantDependency Dependency);// 0x9e6f264 0x7873b58ba0

--------------------------------
Class: VariantDependency
	VariantSet* VariantSet;//[Offset: 0x0, Size: 0x28] 0x78738eab80
	Variant* Variant;//[Offset: 0x28, Size: 0x28] 0x78738eac00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78738eac80

--------------------------------
Class: VariantObjectBinding.Object
	FString CachedActorLabel;//[Offset: 0x28, Size: 0x10] 0x7873b6e500
	SoftObjectPath ObjectPtr;//[Offset: 0x38, Size: 0x18] 0x7873b6e580
	Object* LazyObjectPtr;//[Offset: 0x50, Size: 0x1c] 0x7873b6e600
	PropertyValue*[] CapturedProperties;//[Offset: 0x70, Size: 0x10] 0x7873af9a20
	FunctionCaller[] FunctionCallers;//[Offset: 0x80, Size: 0x10] 0x7873af9ac0

--------------------------------
Class: PropertyValue.Object
	Properties(FieldPathProperty)[] Properties;//[Offset: 0x88, Size: 0x10] 0x7873af9de0
	int[] PropertyIndices;//[Offset: 0x98, Size: 0x10] 0x7873af9e80
	CapturedPropSegment[] CapturedPropSegments;//[Offset: 0xa8, Size: 0x10] 0x7873af9f20
	FString FullDisplayString;//[Offset: 0xb8, Size: 0x10] 0x7873b6b980
	FName PropertySetterName;//[Offset: 0xc8, Size: 0x8] 0x7873b6ba00
	<FString,FString> PropertySetterParameterDefaults;//[Offset: 0xd0, Size: 0x50] 0x7873869580
	bool bHasRecordedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x7873b6bb80
	ClassPtrProperty LeafPropertyClass;//[Size: 0x8] 0x7873af9fc0
	byte[] ValueBytes;//[Offset: 0x138, Size: 0x10] 0x7873afa060
	enum PropCategory;//[Offset: 0x148, Size: 0x1] 0x7873afa100
	bool HasRecordedData();// 0x9e6c810 0x7873b58f20
	FText GetPropertyTooltip();// 0x9e6c8cc 0x7873b59000
	FString GetFullDisplayString();// 0x9e6c848 0x7873b55720

--------------------------------
Class: CapturedPropSegment
	FString PropertyName;//[Offset: 0x0, Size: 0x10] 0x78738ead80
	int PropertyIndex;//[Offset: 0x10, Size: 0x4] 0x78738eae00
	FString ComponentName;//[Offset: 0x18, Size: 0x10] 0x78738eae80

--------------------------------
Class: FunctionCaller
	FName FunctionName;//[Offset: 0x0, Size: 0x8] 0x78738eaf00

--------------------------------
Class: PropertyValueColor.PropertyValue.Object

--------------------------------
Class: PropertyValueSoftObject.PropertyValue.Object

--------------------------------
Class: AutomationUtilsBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void TakeGameplayAutomationScreenshot(const FString ScreenShotName, float MaxGlobalError, float MaxLocalError, FString MapNameOverride);// 0x9e7c68c 0x7873b5ac00

--------------------------------
Class: ChaosClothConfig.ClothConfigCommon.ClothConfigBase.Object
	enum MassMode;//[Offset: 0x28, Size: 0x1] 0x7873af98e0
	float UniformMass;//[Offset: 0x2c, Size: 0x4] 0x7873b6e880
	float TotalMass;//[Offset: 0x30, Size: 0x4] 0x7873b6e900
	float Density;//[Offset: 0x34, Size: 0x4] 0x7873b6e980
	float MinPerParticleMass;//[Offset: 0x38, Size: 0x4] 0x7873b6ea00
	ChaosClothWeightedValue EdgeStiffnessWeighted;//[Offset: 0x3c, Size: 0x8] 0x7873b6ea80
	ChaosClothWeightedValue BendingStiffnessWeighted;//[Offset: 0x44, Size: 0x8] 0x7873b6eb00
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x7873b6eb80
	ChaosClothWeightedValue AreaStiffnessWeighted;//[Offset: 0x50, Size: 0x8] 0x7873b6ec00
	float VolumeStiffness;//[Offset: 0x58, Size: 0x4] 0x7873b6ec80
	ChaosClothWeightedValue TetherStiffness;//[Offset: 0x5c, Size: 0x8] 0x7873b6ed00
	ChaosClothWeightedValue TetherScale;//[Offset: 0x64, Size: 0x8] 0x7873b6ed80
	bool bUseGeodesicDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1] 0x7873b6ee00
	float ShapeTargetStiffness;//[Offset: 0x70, Size: 0x4] 0x7873b6ee80
	float CollisionThickness;//[Offset: 0x74, Size: 0x4] 0x7873b6ef00
	float FrictionCoefficient;//[Offset: 0x78, Size: 0x4] 0x7873b6ef80
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x7873b6f000
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1] 0x7873b6f080
	float SelfCollisionThickness;//[Offset: 0x80, Size: 0x4] 0x7873b6f100
	bool bUseLegacyBackstop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x7873b6f180
	float DampingCoefficient;//[Offset: 0x88, Size: 0x4] 0x7873b6f200
	float LocalDampingCoefficient;//[Offset: 0x8c, Size: 0x4] 0x7873b6f280
	bool bUsePointBasedWindModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7873b6f300
	ChaosClothWeightedValue Drag;//[Offset: 0x94, Size: 0x8] 0x7873b6f380
	ChaosClothWeightedValue Lift;//[Offset: 0x9c, Size: 0x8] 0x7873b6f400
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1] 0x7873b6f480
	float GravityScale;//[Offset: 0xa8, Size: 0x4] 0x7873b6f500
	Vector Gravity;//[Offset: 0xb0, Size: 0x18] 0x7873b6f580
	ChaosClothWeightedValue AnimDriveStiffness;//[Offset: 0xc8, Size: 0x8] 0x7873b6f600
	ChaosClothWeightedValue AnimDriveDamping;//[Offset: 0xd0, Size: 0x8] 0x7873b6f680
	Vector LinearVelocityScale;//[Offset: 0xd8, Size: 0x18] 0x7873b6f700
	float AngularVelocityScale;//[Offset: 0xf0, Size: 0x4] 0x7873b6f780
	float FictitiousAngularScale;//[Offset: 0xf4, Size: 0x4] 0x7873b6d700
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1] 0x7873b6d780
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1] 0x7873b6d800
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1] 0x7873b6d880

--------------------------------
Class: ClothConfigCommon.ClothConfigBase.Object

--------------------------------
Class: ClothConfigBase.Object

--------------------------------
Class: ChaosClothWeightedValue
	float Low;//[Offset: 0x0, Size: 0x4] 0x78738eaa80
	float High;//[Offset: 0x4, Size: 0x4] 0x78738eab00

--------------------------------
Class: ChaosClothingInteractor.ClothingInteractor.Object
	void SetWind(Vector2D Drag, Vector2D Lift, float AirDensity, Vector WindVelocity);// 0x9ef4e08 0x7873b59fc0
	void SetVelocityScale(Vector LinearVelocityScale, float AngularVelocityScale, float FictitiousAngularScale);// 0x9ef49f4 0x7873b5a0a0
	void SetMaterialLinear(float EdgeStiffness, float BendingStiffness, float AreaStiffness);// 0x9ef569c 0x7873b5a180
	void SetMaterial(Vector2D EdgeStiffness, Vector2D BendingStiffness, Vector2D AreaStiffness);// 0x9ef5570 0x7873b5a260
	void SetLongRangeAttachmentLinear(float TetherStiffness, float TetherScale);// 0x9ef5480 0x7873b5a340
	void SetLongRangeAttachment(Vector2D TetherStiffness, Vector2D TetherScale);// 0x9ef5398 0x7873b5a420
	void SetGravity(float GravityScale, bool bIsGravityOverridden, Vector GravityOverride);// 0x9ef4cc0 0x7873b5a500
	void SetDamping(float DampingCoefficient);// 0x9ef50bc 0x7873b5a5e0
	void SetCollision(float CollisionThickness, float FrictionCoefficient, bool bUseCCD, float SelfCollisionThickness);// 0x9ef5214 0x7873b5a6c0
	void SetBackstop(bool bEnabled);// 0x9ef5164 0x7873b5a7a0
	void SetAnimDriveLinear(float AnimDriveStiffness);// 0x9ef4c18 0x7873b5a880
	void SetAnimDrive(Vector2D AnimDriveStiffness, Vector2D AnimDriveDamping);// 0x9ef4b30 0x7873b5a960
	void SetAerodynamics(float DragCoefficient, float LiftCoefficient, Vector WindVelocity);// 0x9ef4f84 0x7873b5aa40
	void ResetAndTeleport(bool bReset, bool bTeleport);// 0x9ef48fc 0x7873b5ab20

--------------------------------
Class: MovieSceneGeometryCollectionSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneGeometryCollectionParams Params;//[Offset: 0xe0, Size: 0x30] 0x7873b81f00

--------------------------------
Class: MovieSceneGeometryCollectionParams
	SoftObjectPath GeometryCollectionCache;//[Offset: 0x8, Size: 0x18] 0x78738ea880
	FrameNumber StartFrameOffset;//[Offset: 0x20, Size: 0x4] 0x78738ea900
	FrameNumber EndFrameOffset;//[Offset: 0x24, Size: 0x4] 0x78738ea980
	float PlayRate;//[Offset: 0x28, Size: 0x4] 0x78738eaa00

--------------------------------
Class: MovieSceneGeometryCollectionTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x98, Size: 0x10] 0x7873af9840

--------------------------------
Class: NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceChaosDestruction.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	<ChaosSolverActor*> ChaosSolverActorSet;//[Offset: 0x38, Size: 0x50] 0x7873afbdc0
	enum DataSourceType;//[Offset: 0x88, Size: 0x1] 0x7873afbe60
	int DataProcessFrequency;//[Offset: 0x8c, Size: 0x4] 0x7873b85600
	int MaxNumberOfDataEntriesToSpawn;//[Offset: 0x90, Size: 0x4] 0x7873b85680
	bool DoSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1] 0x7873b85700
	Vector2D SpawnMultiplierMinMax;//[Offset: 0x98, Size: 0x10] 0x7873b85780
	float SpawnChance;//[Offset: 0xa8, Size: 0x4] 0x7873b85800
	Vector2D ImpulseToSpawnMinMax;//[Offset: 0xb0, Size: 0x10] 0x7873b85880
	Vector2D SpeedToSpawnMinMax;//[Offset: 0xc0, Size: 0x10] 0x7873b85900
	Vector2D MassToSpawnMinMax;//[Offset: 0xd0, Size: 0x10] 0x7873b85980
	Vector2D ExtentMinToSpawnMinMax;//[Offset: 0xe0, Size: 0x10] 0x7873b85a00
	Vector2D ExtentMaxToSpawnMinMax;//[Offset: 0xf0, Size: 0x10] 0x7873b85a80
	Vector2D VolumeToSpawnMinMax;//[Offset: 0x100, Size: 0x10] 0x7873b85b00
	Vector2D SolverTimeToSpawnMinMax;//[Offset: 0x110, Size: 0x10] 0x7873b85b80
	int SurfaceTypeToSpawn;//[Offset: 0x120, Size: 0x4] 0x7873b85c00
	enum LocationFilteringMode;//[Offset: 0x124, Size: 0x1] 0x7873afbf00
	enum LocationXToSpawn;//[Offset: 0x125, Size: 0x1] 0x7873afbfa0
	Vector2D LocationXToSpawnMinMax;//[Offset: 0x128, Size: 0x10] 0x7873b85d80
	enum LocationYToSpawn;//[Offset: 0x138, Size: 0x1] 0x7873afc040
	Vector2D LocationYToSpawnMinMax;//[Offset: 0x140, Size: 0x10] 0x7873b85e80
	enum LocationZToSpawn;//[Offset: 0x150, Size: 0x1] 0x7873afc0e0
	Vector2D LocationZToSpawnMinMax;//[Offset: 0x158, Size: 0x10] 0x7873b85f80
	float TrailMinSpeedToSpawn;//[Offset: 0x168, Size: 0x4] 0x7873b86000
	enum DataSortingType;//[Offset: 0x16c, Size: 0x1] 0x7873afc180
	bool bGetExternalCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1] 0x7873b86100
	bool DoSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e, Size: 0x1] 0x7873b86180
	Vector SpatialHashVolumeMin;//[Offset: 0x170, Size: 0x18] 0x7873b86200
	Vector SpatialHashVolumeMax;//[Offset: 0x188, Size: 0x18] 0x7873b86280
	Vector SpatialHashVolumeCellSize;//[Offset: 0x1a0, Size: 0x18] 0x7873b86300
	int MaxDataPerCell;//[Offset: 0x1b8, Size: 0x4] 0x7873b84280
	bool bApplyMaterialsFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 0x1] 0x7873b84300
	<PhysicalMaterial*> ChaosBreakingMaterialSet;//[Offset: 0x1c0, Size: 0x50] 0x7873afc220
	bool bGetExternalBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x7873b84400
	bool bGetExternalTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 0x1] 0x7873b84480
	Vector2D RandomPositionMagnitudeMinMax;//[Offset: 0x218, Size: 0x10] 0x7873b84500
	float InheritedVelocityMultiplier;//[Offset: 0x228, Size: 0x4] 0x7873b84580
	enum RandomVelocityGenerationType;//[Offset: 0x22c, Size: 0x1] 0x7873afc2c0
	Vector2D RandomVelocityMagnitudeMinMax;//[Offset: 0x230, Size: 0x10] 0x7873b84680
	float SpreadAngleMax;//[Offset: 0x240, Size: 0x4] 0x7873b84700
	Vector VelocityOffsetMin;//[Offset: 0x248, Size: 0x18] 0x7873b84780
	Vector VelocityOffsetMax;//[Offset: 0x260, Size: 0x18] 0x7873b84800
	Vector2D FinalVelocityMagnitudeMinMax;//[Offset: 0x278, Size: 0x10] 0x7873b84880
	float MaxLatency;//[Offset: 0x288, Size: 0x4] 0x7873b84900
	enum DebugType;//[Offset: 0x28c, Size: 0x1] 0x7873afc360
	int LastSpawnedPointID;//[Offset: 0x290, Size: 0x4] 0x7873b84a00
	float LastSpawnTime;//[Offset: 0x294, Size: 0x4] 0x7873b84a80
	float SolverTime;//[Offset: 0x2a8, Size: 0x4] 0x7873b84b00
	float TimeStampOfLastProcessedData;//[Offset: 0x2ac, Size: 0x4] 0x7873b84b80

--------------------------------
Class: NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: ChaosSolverActor.Actor.Object
	ChaosSolverConfiguration Properties;//[Offset: 0x288, Size: 0x6c] 0x7873cd6d80
	float TimeStepMultiplier;//[Offset: 0x2f4, Size: 0x4] 0x7873cd6e00
	int CollisionIterations;//[Offset: 0x2f8, Size: 0x4] 0x7873cd6e80
	int PushOutIterations;//[Offset: 0x2fc, Size: 0x4] 0x7873cd6f00
	int PushOutPairIterations;//[Offset: 0x300, Size: 0x4] 0x7873cd6f80
	float ClusterConnectionFactor;//[Offset: 0x304, Size: 0x4] 0x7873cd7000
	enum ClusterUnionConnectionType;//[Offset: 0x308, Size: 0x1] 0x7873cc34e0
	bool DoGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1] 0x7873cd7100
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x30c, Size: 0x10] 0x7873cd7180
	bool DoGenerateBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1] 0x7873cd7200
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x320, Size: 0x10] 0x7873cd7280
	bool DoGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1] 0x7873cd7300
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x334, Size: 0x10] 0x7873cd7380
	float MassScale;//[Offset: 0x344, Size: 0x4] 0x7873cd5300
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1] 0x7873cd5380
	bool bHasFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1] 0x7873cd5400
	float FloorHeight;//[Offset: 0x34c, Size: 0x4] 0x7873cd5480
	ChaosDebugSubstepControl ChaosDebugSubstepControl;//[Offset: 0x350, Size: 0x3] 0x7873cd5500
	BillboardComponent* SpriteComponent;//[Offset: 0x358, Size: 0x8] 0x7873cd5580
	ChaosGameplayEventDispatcher* GameplayEventDispatcherComponent;//[Offset: 0x378, Size: 0x8] 0x7873cd5600
	void SetSolverActive(bool bActive);// 0xecda618 0x7873c98c80
	void SetAsCurrentWorldSolver();// 0xecda6d0 0x7873c98d60

--------------------------------
Class: ChaosSolverConfiguration
	int Iterations;//[Offset: 0x0, Size: 0x4] 0x7873921480
	int CollisionPairIterations;//[Offset: 0x4, Size: 0x4] 0x7873921500
	int PushOutIterations;//[Offset: 0x8, Size: 0x4] 0x7873921580
	int CollisionPushOutPairIterations;//[Offset: 0xc, Size: 0x4] 0x7873921600
	float CollisionMarginFraction;//[Offset: 0x10, Size: 0x4] 0x7873921680
	float CollisionMarginMax;//[Offset: 0x14, Size: 0x4] 0x7873921700
	float CollisionCullDistance;//[Offset: 0x18, Size: 0x4] 0x7873921780
	float CollisionMaxPushOutVelocity;//[Offset: 0x1c, Size: 0x4] 0x7873921800
	int JointPairIterations;//[Offset: 0x20, Size: 0x4] 0x7873921880
	int JointPushOutPairIterations;//[Offset: 0x24, Size: 0x4] 0x7873921900
	float ClusterConnectionFactor;//[Offset: 0x28, Size: 0x4] 0x7873921980
	enum ClusterUnionConnectionType;//[Offset: 0x2c, Size: 0x1] 0x78736ae340
	bool bGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x7873921a80
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x30, Size: 0x10] 0x7873921d00
	bool bGenerateBreakData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7873921d80
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x44, Size: 0x10] 0x7873922000
	bool bGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7873922080
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x58, Size: 0x10] 0x7873920200
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7873920280

--------------------------------
Class: SolverCollisionFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873921b00
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x7873921b80
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x7873921c00
	float MinImpulse;//[Offset: 0xc, Size: 0x4] 0x7873921c80

--------------------------------
Class: SolverBreakingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873921e00
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x7873921e80
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x7873921f00
	float MinVolume;//[Offset: 0xc, Size: 0x4] 0x7873921f80

--------------------------------
Class: SolverTrailingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873922100
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x7873920080
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x7873920100
	float MinVolume;//[Offset: 0xc, Size: 0x4] 0x7873920180

--------------------------------
Class: ChaosDebugSubstepControl
	bool bPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873941800
	bool bSubstep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7873941880
	bool bStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7873941900

--------------------------------
Class: ChaosGameplayEventDispatcher.ChaosEventListenerComponent.ActorComponent.Object
	<PrimitiveComponent*,ChaosHandlerSet> CollisionEventRegistrations;//[Offset: 0x1c8, Size: 0x50] 0x787386b140
	<PrimitiveComponent*,BreakEventCallbackWrapper> BreakEventRegistrations;//[Offset: 0x218, Size: 0x50] 0x787386b200
	<PrimitiveComponent*,RemovalEventCallbackWrapper> RemovalEventRegistrations;//[Offset: 0x268, Size: 0x50] 0x787386b2c0

--------------------------------
Class: ChaosEventListenerComponent.ActorComponent.Object

--------------------------------
Class: ChaosHandlerSet
	<Object*> ChaosHandlers;//[Offset: 0x8, Size: 0x50] 0x78736ace00

--------------------------------
Class: BreakEventCallbackWrapper

--------------------------------
Class: RemovalEventCallbackWrapper

--------------------------------
Class: MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10] 0x7873afbd20

--------------------------------
Class: MovieSceneNiagaraColorParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	NiagaraVariable Parameter;//[Offset: 0xa0, Size: 0x20] 0x7873b85380

--------------------------------
Class: NiagaraVariable.NiagaraVariableBase
	byte[] VarData;//[Offset: 0x10, Size: 0x10] 0x7873742fe0

--------------------------------
Class: NiagaraVariableBase
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78738eb980
	NiagaraTypeDefinitionHandle TypeDefHandle;//[Offset: 0x8, Size: 0x4] 0x78738eba80

--------------------------------
Class: NiagaraTypeDefinitionHandle
	int RegisteredTypeIndex;//[Offset: 0x0, Size: 0x4] 0x78738eba00

--------------------------------
Class: MovieSceneNiagaraSystemSpawnSection.MovieSceneSection.MovieSceneSignedObject.Object
	enum SectionStartBehavior;//[Offset: 0xdc, Size: 0x4] 0x7873afbaa0
	enum SectionEvaluateBehavior;//[Offset: 0xe0, Size: 0x4] 0x7873afbb40
	enum SectionEndBehavior;//[Offset: 0xe4, Size: 0x4] 0x7873afbbe0
	enum AgeUpdateMode;//[Offset: 0xe8, Size: 0x1] 0x7873afbc80
	bool bAllowScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1] 0x7873b85300

--------------------------------
Class: MovieSceneNiagaraSystemTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NiagaraSystem* Asset;//[Offset: 0x550, Size: 0x8] 0x7873b8c180
	enum TickBehavior;//[Offset: 0x558, Size: 0x1] 0x7873afd9e0
	int RandomSeedOffset;//[Offset: 0x55c, Size: 0x4] 0x7873b8c280
	NiagaraUserRedirectionParameterStore OverrideParameters;//[Offset: 0x560, Size: 0xd8] 0x7873b8c300
	bool bForceSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x638, Size: 0x1] 0x7873b8c380
	bool bEnableGpuComputeDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x638, Size: 0x1] 0x7873b8c400
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x66d, Size: 0x1] 0x7873b8c480
	bool bRenderingEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x66d, Size: 0x1] 0x7873b8c500
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x66d, Size: 0x1] 0x7873b8c580
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x66d, Size: 0x1] 0x7873b8c600
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x670, Size: 0x4] 0x7873b8a580
	delegate OnSystemFinished;//[Offset: 0x678, Size: 0x10] 0x7873b8a600
	SceneComponent* AutoAttachParent;//[Offset: 0x688, Size: 0x8] 0x7873b8a680
	FName AutoAttachSocketName;//[Offset: 0x690, Size: 0x8] 0x7873b8a700
	enum AutoAttachLocationRule;//[Offset: 0x698, Size: 0x1] 0x7873afda80
	enum AutoAttachRotationRule;//[Offset: 0x699, Size: 0x1] 0x7873afdb20
	enum AutoAttachScaleRule;//[Offset: 0x69a, Size: 0x1] 0x7873afdbc0
	bool bAllowScalability;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6b0, Size: 0x1] 0x7873b8a900
	NiagaraCullProxyComponent* CullProxy;//[Offset: 0x7d8, Size: 0x8] 0x7873b8a980
	void SetVariableVec4(FName InVariableName, out const Vector4 InValue);// 0xa49ea34 0x7873b91200
	void SetVariableVec3(FName InVariableName, Vector InValue);// 0xa49e64c 0x7873b912e0
	void SetVariableVec2(FName InVariableName, Vector2D InValue);// 0xa49e27c 0x7873b913c0
	void SetVariableTextureRenderTarget(FName InVariableName, TextureRenderTarget* TextureRenderTarget);// 0xa49d4f0 0x7873b914a0
	void SetVariableTexture(FName InVariableName, Texture* Texture);// 0xa49d5e0 0x7873b91580
	void SetVariableStaticMesh(FName InVariableName, StaticMesh* InValue);// 0xa49d6d0 0x7873b91660
	void SetVariableQuat(FName InVariableName, out const Quat InValue);// 0xa49e838 0x7873b91740
	void SetVariablePosition(FName InVariableName, Vector InValue);// 0xa49e460 0x7873b91820
	void SetVariableObject(FName InVariableName, Object* Object);// 0xa49d8b0 0x7873b91900
	void SetVariableMaterial(FName InVariableName, MaterialInterface* Object);// 0xa49d7c0 0x7873b919e0
	void SetVariableLinearColor(FName InVariableName, out const LinearColor InValue);// 0xa49ec38 0x7873b91ac0
	void SetVariableInt(FName InVariableName, int InValue);// 0xa49de94 0x7873b91ba0
	void SetVariableFloat(FName InVariableName, float InValue);// 0xa49e088 0x7873b91c80
	void SetVariableBool(FName InVariableName, bool InValue);// 0xa49dc90 0x7873b5e780
	void SetVariableActor(FName InVariableName, Actor* Actor);// 0xa49daa0 0x7873b5e860
	void SetTickBehavior(enum NewTickBehavior);// 0xa49f2cc 0x7873b5e940
	void SetSystemFixedBounds(Box LocalBounds);// 0xa49f1f4 0x7873b5ea20
	void SetSeekDelta(float InSeekDelta);// 0xa49f5e8 0x7873b5eb00
	void SetRenderingEnabled(bool bInRenderingEnabled);// 0xa49d074 0x7873b5ebe0
	void SetRandomSeedOffset(int NewRandomSeedOffset);// 0xa49ee50 0x7873b5ecc0
	void SetPreviewLODDistance(bool bEnablePreviewLODDistance, float PreviewLODDistance, float PreviewMaxDistance);// 0xa49cbb4 0x7873b5eda0
	void SetPaused(bool bInPaused);// 0xa49cde0 0x7873b5ee80
	void SetNiagaraVariableVec4(FString InVariableName, out const Vector4 InValue);// 0xa49eb30 0x7873b5ef60
	void SetNiagaraVariableVec3(FString InVariableName, Vector InValue);// 0xa49e73c 0x7873b5f040
	void SetNiagaraVariableVec2(FString InVariableName, Vector2D InValue);// 0xa49e368 0x7873b5f120
	void SetNiagaraVariableQuat(FString InVariableName, out const Quat InValue);// 0xa49e930 0x7873b5f200
	void SetNiagaraVariablePosition(FString InVariableName, Vector InValue);// 0xa49e550 0x7873b5f2e0
	void SetNiagaraVariableObject(FString InVariableName, Object* Object);// 0xa49d9a0 0x7873b5f3c0
	void SetNiagaraVariableLinearColor(FString InVariableName, out const LinearColor InValue);// 0xa49ed30 0x7873b5f4a0
	void SetNiagaraVariableInt(FString InVariableName, int InValue);// 0xa49df88 0x7873b5f580
	void SetNiagaraVariableFloat(FString InVariableName, float InValue);// 0xa49e17c 0x7873b5f660
	void SetNiagaraVariableBool(FString InVariableName, bool InValue);// 0xa49dd8c 0x7873b5f740
	void SetNiagaraVariableActor(FString InVariableName, Actor* Actor);// 0xa49db90 0x7873b5f820
	void SetMaxSimTime(float InMaxTime);// 0xa49f424 0x7873b5f900
	void SetLockDesiredAgeDeltaTimeToSeekDelta(bool bLock);// 0xa49f500 0x7873b5f9e0
	void SetGpuComputeDebug(bool bEnableDebug);// 0xa49fa98 0x7873b5fac0
	void SetForceSolo(bool bInForceSolo);// 0xa49fb68 0x7873b5fba0
	void SetForceLocalPlayerEffect(bool bIsPlayerEffect);// 0xa49c9c0 0x7873b5fc80
	void SetEmitterFixedBounds(FName EmitterName, Box LocalBounds);// 0xa49f068 0x7873b5fd60
	void SetDesiredAge(float InDesiredAge);// 0xa49f81c 0x7873b5fe40
	void SetCustomTimeDilation(float Dilation);// 0xa49f9f0 0x7873b5ff20
	void SetCanRenderWhileSeeking(bool bInCanRenderWhileSeeking);// 0xa49f6c4 0x7873b5caa0
	void SetAutoDestroy(bool bInAutoDestroy);// 0xa49f374 0x7873b5cb80
	void SetAsset(NiagaraSystem* InAsset, bool bResetExistingOverrideParameters);// 0xa49fc34 0x7873b5cc60
	void SetAllowScalability(bool bAllow);// 0xa49caa8 0x7873b5cd40
	void SetAgeUpdateMode(enum InAgeUpdateMode);// 0xa49f8f8 0x7873b5ce20
	void SeekToDesiredAge(float InDesiredAge);// 0xa49f774 0x7873b5cf00
	void ResetSystem();// 0xa49d138 0x7873b5cfe0
	void ReinitializeSystem();// 0xa49d124 0x7873b5d0c0
	bool IsPaused();// 0xa49cda8 0x7873b5d1a0
	void InitForPerformanceBaseline();// 0xa49cb58 0x7873b5d280
	enum GetTickBehavior();// 0xa49f2b0 0x7873b5d360
	Box GetSystemFixedBounds();// 0xa49f180 0x7873b5d440
	float GetSeekDelta();// 0xa49f690 0x7873b5d520
	int GetRandomSeedOffset();// 0xa49ee34 0x7873b5d600
	bool GetPreviewLODDistanceEnabled();// 0xa49cb94 0x7873b5d6e0
	float GetPreviewLODDistance();// 0xa49cb6c 0x7873b5d7c0
	Vector[] GetNiagaraParticleValueVec3_DebugOnly(FString InEmitterName, FString InValueName);// 0xa49d14c 0x7873b5d8a0
	float[] GetNiagaraParticleValues_DebugOnly(FString InEmitterName, FString InValueName);// 0xa49d2a0 0x7873b5d980
	Vector[] GetNiagaraParticlePositions_DebugOnly(FString InEmitterName);// 0xa49d3f4 0x7873b5da60
	float GetMaxSimTime();// 0xa49f4cc 0x7873b5db40
	bool GetLockDesiredAgeDeltaTimeToSeekDelta();// 0xa49f5b0 0x7873b5dc20
	bool GetForceSolo();// 0xa49fb48 0x7873b5dd00
	bool GetForceLocalPlayerEffect();// 0xa49c988 0x7873b5dde0
	Box GetEmitterFixedBounds(FName EmitterName);// 0xa49efa0 0x7873b5dec0
	float GetDesiredAge();// 0xa49f8c4 0x7873b5dfa0
	NiagaraDataInterface* GetDataInterface(FString Name);// 0xa49ccec 0x7873b5e080
	float GetCustomTimeDilation();// 0xa49f9d4 0x7873b5e160
	NiagaraSystem* GetAsset();// 0xa49fc18 0x7873b5e240
	bool GetAllowScalability();// 0xa49ca70 0x7873b5e320
	enum GetAgeUpdateMode();// 0xa49f9a0 0x7873b5e400
	void ClearSystemFixedBounds();// 0xa49f16c 0x7873b5e4e0
	void ClearEmitterFixedBounds(FName EmitterName);// 0xa49eef8 0x7873b5e5c0
	void AdvanceSimulationByTime(float SimulateTime, float TickDeltaSeconds);// 0xa49ce90 0x7873b5e6a0
	void AdvanceSimulation(int TickCount, float TickDeltaSeconds);// 0xa49cf80 0x7873b5adc0

--------------------------------
Class: NiagaraSystem.FXSystemAsset.Object
	bool bSupportLargeWorldCoordinates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7873bc4700
	bool bOverrideCastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x7873bc4780
	bool bOverrideReceivesDecals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1] 0x7873bc4800
	bool bOverrideRenderCustomDepth;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1] 0x7873bc4880
	bool bOverrideCustomDepthStencilValue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1] 0x7873bc4900
	bool bOverrideCustomDepthStencilWriteMask;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 0x1] 0x7873bc4980
	bool bCastShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x90, Size: 0x1] 0x7873bc4a00
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x90, Size: 0x1] 0x7873bc4a80
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91, Size: 0x1] 0x7873bc4b00
	enum CustomDepthStencilWriteMask;//[Offset: 0x92, Size: 0x1] 0x7873bb1d20
	int CustomDepthStencilValue;//[Offset: 0x94, Size: 0x4] 0x7873bc4c00
	bool bDumpDebugSystemInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x7873bc4c80
	bool bDumpDebugEmitterInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1] 0x7873bc4d00
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 0x1] 0x7873bc4d80
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 0x1] 0x7873bc4e00
	NiagaraEffectType* EffectType;//[Offset: 0xa0, Size: 0x8] 0x7873bc4e80
	bool bOverrideScalabilitySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1] 0x7873bc4f00
	bool bOverrideAllowCullingForLocalPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9, Size: 0x1] 0x7873bc4f80
	bool bAllowCullingForLocalPlayersOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa9, Size: 0x1] 0x7873bc5000
	NiagaraSystemScalabilityOverride[] ScalabilityOverrides;//[Offset: 0xb0, Size: 0x10] 0x7873bb1dc0
	NiagaraSystemScalabilityOverrides SystemScalabilityOverrides;//[Offset: 0xc0, Size: 0x10] 0x7873bc5100
	NiagaraEmitterHandle[] EmitterHandles;//[Offset: 0xd0, Size: 0x10] 0x7873bb1e60
	NiagaraParameterCollectionInstance*[] ParameterCollectionOverrides;//[Offset: 0xe0, Size: 0x10] 0x7873bb1f00
	NiagaraScript* SystemSpawnScript;//[Offset: 0xf0, Size: 0x8] 0x7873bc5280
	NiagaraScript* SystemUpdateScript;//[Offset: 0xf8, Size: 0x8] 0x7873bc3200
	NiagaraSystemCompiledData SystemCompiledData;//[Offset: 0x110, Size: 0x228] 0x7873bc3280
	NiagaraUserRedirectionParameterStore ExposedParameters;//[Offset: 0x338, Size: 0xd8] 0x7873bc3300
	Box FixedBounds;//[Offset: 0x410, Size: 0x38] 0x7873bc3380
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1] 0x7873bc3400
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1] 0x7873bc3480
	int RandomSeed;//[Offset: 0x44c, Size: 0x4] 0x7873bc3500
	float WarmupTime;//[Offset: 0x450, Size: 0x4] 0x7873bc3580
	int WarmupTickCount;//[Offset: 0x454, Size: 0x4] 0x7873bc3600
	float WarmupTickDelta;//[Offset: 0x458, Size: 0x4] 0x7873bc3680
	bool bFixedTickDelta;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 0x1] 0x7873bc3700
	float FixedTickDeltaTime;//[Offset: 0x460, Size: 0x4] 0x7873bc3780
	bool bHasSystemScriptDIsWithPerInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 0x1] 0x7873bc3800
	bool bNeedsGPUContextInitForDataInterfaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x465, Size: 0x1] 0x7873bc3880
	FName[] UserDINamesReadInSystemScripts;//[Offset: 0x468, Size: 0x10] 0x7873bb1fa0

--------------------------------
Class: NiagaraEffectType.Object
	bool bAllowCullingForLocalPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873ba7a80
	enum UpdateFrequency;//[Offset: 0x2c, Size: 0x4] 0x7873aff920
	enum CullReaction;//[Offset: 0x30, Size: 0x4] 0x7873aff9c0
	NiagaraSignificanceHandler* SignificanceHandler;//[Offset: 0x38, Size: 0x8] 0x7873ba7c00
	NiagaraSystemScalabilitySettings[] DetailLevelScalabilitySettings;//[Offset: 0x40, Size: 0x10] 0x7873affa60
	NiagaraSystemScalabilitySettingsArray SystemScalabilitySettings;//[Offset: 0x50, Size: 0x10] 0x7873ba7d00
	NiagaraEmitterScalabilitySettingsArray EmitterScalabilitySettings;//[Offset: 0x60, Size: 0x10] 0x7873ba7d80
	NiagaraBaselineController* PerformanceBaselineController;//[Offset: 0x78, Size: 0x8] 0x7873ba7e00
	NiagaraPerfBaselineStats PerfBaselineStats;//[Offset: 0x80, Size: 0x10] 0x7873ba7e80
	Guid PerfBaselineVersion;//[Offset: 0x90, Size: 0x10] 0x7873ba7f00

--------------------------------
Class: NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSystemScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30] 0x78738f5d80
	bool bCullByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78738f5e00
	bool bCullMaxInstanceCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x78738f5e80
	bool bCullPerSystemMaxInstanceCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x78738f5f00
	bool bCullByMaxTimeWithoutRender;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1] 0x78738f5f80
	float MaxDistance;//[Offset: 0x34, Size: 0x4] 0x78738f6000
	int MaxInstances;//[Offset: 0x38, Size: 0x4] 0x78738f6080
	int MaxSystemInstances;//[Offset: 0x3c, Size: 0x4] 0x78738f6100
	float MaxTimeWithoutRender;//[Offset: 0x40, Size: 0x4] 0x78738f6180
	enum CullProxyMode;//[Offset: 0x44, Size: 0x4] 0x78737451a0
	int MaxSystemProxies;//[Offset: 0x48, Size: 0x4] 0x78738f6280
	NiagaraGlobalBudgetScaling BudgetScaling;//[Offset: 0x4c, Size: 0x38] 0x78738f6300

--------------------------------
Class: NiagaraPlatformSet
	int QualityLevelMask;//[Offset: 0x0, Size: 0x4] 0x78738f5580
	NiagaraDeviceProfileStateEntry[] DeviceProfileStates;//[Offset: 0x8, Size: 0x10] 0x78737429a0
	NiagaraPlatformSetCVarCondition[] CVarConditions;//[Offset: 0x18, Size: 0x10] 0x7873745240

--------------------------------
Class: NiagaraDeviceProfileStateEntry
	FName ProfileName;//[Offset: 0x0, Size: 0x8] 0x78738f5600
	uint32 QualityLevelMask;//[Offset: 0x8, Size: 0x4] 0x78738f5680
	uint32 SetQualityLevelMask;//[Offset: 0xc, Size: 0x4] 0x78738f5700

--------------------------------
Class: NiagaraPlatformSetCVarCondition
	FName CVarName;//[Offset: 0x0, Size: 0x8] 0x78738f5800
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78738f5880
	int MinInt;//[Offset: 0xc, Size: 0x4] 0x78738f5900
	int MaxInt;//[Offset: 0x10, Size: 0x4] 0x78738f5980
	float MinFloat;//[Offset: 0x14, Size: 0x4] 0x78738f5a00
	float MaxFloat;//[Offset: 0x18, Size: 0x4] 0x78738f5a80
	bool bUseMinInt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1] 0x78738f5b00
	bool bUseMaxInt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1] 0x78738f5b80
	bool bUseMinFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1] 0x78738f5c00
	bool bUseMaxFloat;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1] 0x78738f5c80

--------------------------------
Class: NiagaraGlobalBudgetScaling
	bool bCullByGlobalBudget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78738f4280
	bool bScaleMaxDistanceByGlobalBudgetUse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78738f4300
	bool bScaleMaxInstanceCountByGlobalBudgetUse;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78738f4380
	bool bScaleSystemInstanceCountByGlobalBudgetUse;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78738f4400
	float MaxGlobalBudgetUsage;//[Offset: 0x4, Size: 0x4] 0x78738f4480
	NiagaraLinearRamp MaxDistanceScaleByGlobalBudgetUse;//[Offset: 0x8, Size: 0x10] 0x78738f4500
	NiagaraLinearRamp MaxInstanceCountScaleByGlobalBudgetUse;//[Offset: 0x18, Size: 0x10] 0x78738f4580
	NiagaraLinearRamp MaxSystemInstanceCountScaleByGlobalBudgetUse;//[Offset: 0x28, Size: 0x10] 0x78738f4600

--------------------------------
Class: NiagaraLinearRamp
	float StartX;//[Offset: 0x0, Size: 0x4] 0x78738f4680
	float StartY;//[Offset: 0x4, Size: 0x4] 0x78738f4700
	float EndX;//[Offset: 0x8, Size: 0x4] 0x78738f4780
	float EndY;//[Offset: 0xc, Size: 0x4] 0x78738f4800

--------------------------------
Class: NiagaraSystemScalabilitySettingsArray
	NiagaraSystemScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10] 0x7873742a40

--------------------------------
Class: NiagaraEmitterScalabilitySettingsArray
	NiagaraEmitterScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10] 0x7873742b80

--------------------------------
Class: NiagaraEmitterScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30] 0x78738f7100
	bool bScaleSpawnCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78738f7180
	float SpawnCountScale;//[Offset: 0x34, Size: 0x4] 0x78738f7200

--------------------------------
Class: NiagaraBaselineController.Object
	float TestDuration;//[Offset: 0x28, Size: 0x4] 0x7873badb80
	NiagaraEffectType* EffectType;//[Offset: 0x30, Size: 0x8] 0x7873badc00
	NiagaraPerfBaselineActor* Owner;//[Offset: 0x38, Size: 0x8] 0x7873badc80
	NiagaraSystem* System;//[Offset: 0x40, Size: 0x28] 0x7873badd00
	bool OnTickTest();// 0xa4d8bbc 0x7873b93ce0
	void OnOwnerTick(float DeltaTime);// 0xa4d8a58 0x7873b93dc0
	void OnEndTest(NiagaraPerfBaselineStats Stats);// 0xa4d8b08 0x7873b93ea0
	void OnBeginTest();// 0xa4d8bfc 0x7873b93f80
	NiagaraSystem* GetSystem();// 0xa4d8a24 0x7873b94060

--------------------------------
Class: NiagaraPerfBaselineStats
	float PerInstanceAvg_GT;//[Offset: 0x0, Size: 0x4] 0x78738f9200
	float PerInstanceAvg_RT;//[Offset: 0x4, Size: 0x4] 0x78738f9280
	float PerInstanceMax_GT;//[Offset: 0x8, Size: 0x4] 0x78738f9300
	float PerInstanceMax_RT;//[Offset: 0xc, Size: 0x4] 0x78738f9380

--------------------------------
Class: NiagaraPerfBaselineActor.Actor.Object
	NiagaraBaselineController* Controller;//[Offset: 0x288, Size: 0x8] 0x7873bad980
	TextRenderComponent* Label;//[Offset: 0x290, Size: 0x8] 0x7873bada00

--------------------------------
Class: NiagaraSystemScalabilityOverride.NiagaraSystemScalabilitySettings
	bool bOverrideDistanceSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1] 0x78738f7300
	bool bOverrideInstanceCountSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1] 0x78738f7380
	bool bOverridePerSystemInstanceCountSettings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1] 0x78738f5300
	bool bOverrideTimeSinceRendererSettings;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x84, Size: 0x1] 0x78738f5380
	bool bOverrideGlobalBudgetScalingSettings;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84, Size: 0x1] 0x78738f5400
	bool bOverrideCullProxySettings;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x84, Size: 0x1] 0x78738f5480

--------------------------------
Class: NiagaraSystemScalabilityOverrides
	NiagaraSystemScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10] 0x7873742ae0

--------------------------------
Class: NiagaraEmitterHandle
	Guid ID;//[Offset: 0x0, Size: 0x10] 0x78738f8380
	FName IdName;//[Offset: 0x10, Size: 0x8] 0x78738f8400
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78738f6380
	FName Name;//[Offset: 0x1c, Size: 0x8] 0x78738f6400
	NiagaraEmitter* Instance;//[Offset: 0x28, Size: 0x8] 0x78738f6480

--------------------------------
Class: NiagaraEmitter.Object
	bool bLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873ba8c00
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7873ba8c80
	int RandomSeed;//[Offset: 0x2c, Size: 0x4] 0x7873ba8d00
	enum AllocationMode;//[Offset: 0x30, Size: 0x1] 0x7873bb1280
	int PreAllocationCount;//[Offset: 0x34, Size: 0x4] 0x7873ba8e00
	NiagaraEmitterScriptProperties UpdateScriptProps;//[Offset: 0x38, Size: 0x28] 0x7873ba8e80
	NiagaraEmitterScriptProperties SpawnScriptProps;//[Offset: 0x60, Size: 0x28] 0x7873ba8f00
	enum SimTarget;//[Offset: 0x88, Size: 0x1] 0x7873bb1320
	Box FixedBounds;//[Offset: 0x90, Size: 0x38] 0x7873ba9000
	int MinDetailLevel;//[Offset: 0xc8, Size: 0x4] 0x7873ba9080
	int MaxDetailLevel;//[Offset: 0xcc, Size: 0x4] 0x7873ba9100
	NiagaraDetailsLevelScaleOverrides GlobalSpawnCountScaleOverrides;//[Offset: 0xd0, Size: 0x14] 0x7873ba9180
	NiagaraPlatformSet Platforms;//[Offset: 0xe8, Size: 0x30] 0x7873ba9200
	NiagaraEmitterScalabilityOverrides ScalabilityOverrides;//[Offset: 0x118, Size: 0x10] 0x7873ba9280
	bool bInterpolatedSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 0x1] 0x7873ba9300
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x128, Size: 0x1] 0x7873ba9380
	bool bUseMinDetailLevel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x128, Size: 0x1] 0x7873ba9400
	bool bUseMaxDetailLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x128, Size: 0x1] 0x7873ba9480
	bool bOverrideGlobalSpawnCountScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x128, Size: 0x1] 0x7873ba7400
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x128, Size: 0x1] 0x7873ba7480
	bool bCombineEventSpawn;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x128, Size: 0x1] 0x7873ba7500
	float MaxDeltaTimePerTick;//[Offset: 0x12c, Size: 0x4] 0x7873ba7580
	bool bLimitDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1] 0x7873ba7600
	int MaxGPUParticlesSpawnPerFrame;//[Offset: 0x134, Size: 0x4] 0x7873ba7680
	NiagaraParameterStore RendererBindings;//[Offset: 0x138, Size: 0x88] 0x7873ba7700
	FString UniqueEmitterName;//[Offset: 0x1d8, Size: 0x10] 0x7873ba7780
	NiagaraRendererProperties*[] RendererProperties;//[Offset: 0x1e8, Size: 0x10] 0x7873bb13c0
	NiagaraEventScriptProperties[] EventHandlerScriptProps;//[Offset: 0x1f8, Size: 0x10] 0x7873bb1460
	NiagaraSimulationStageBase*[] SimulationStages;//[Offset: 0x208, Size: 0x10] 0x7873aff7e0
	NiagaraScript* GPUComputeScript;//[Offset: 0x218, Size: 0x8] 0x7873ba7980
	FName[] SharedEventGeneratorIds;//[Offset: 0x220, Size: 0x10] 0x7873aff880

--------------------------------
Class: NiagaraEmitterScriptProperties
	NiagaraScript* Script;//[Offset: 0x0, Size: 0x8] 0x78738f6b00
	NiagaraEventReceiverProperties[] EventReceivers;//[Offset: 0x8, Size: 0x10] 0x7873742d60
	NiagaraEventGeneratorProperties[] EventGenerators;//[Offset: 0x18, Size: 0x10] 0x7873742cc0

--------------------------------
Class: NiagaraScript.NiagaraScriptBase.Object
	enum Usage;//[Offset: 0x28, Size: 0x1] 0x7873bb2860
	Guid UsageId;//[Offset: 0x2c, Size: 0x10] 0x7873bc0100
	NiagaraParameterStore RapidIterationParameters;//[Offset: 0x40, Size: 0x88] 0x7873bc0180
	NiagaraScriptExecutionParameterStore ScriptExecutionParamStore;//[Offset: 0xc8, Size: 0xa8] 0x7873bc0200
	NiagaraBoundParameter[] ScriptExecutionBoundParameters;//[Offset: 0x170, Size: 0x10] 0x7873bb2900
	NiagaraVMExecutableDataId CachedScriptVMId;//[Offset: 0x180, Size: 0x58] 0x7873bc0300
	NiagaraVMExecutableData CachedScriptVM;//[Offset: 0x1f8, Size: 0x138] 0x7873bc0380
	NiagaraParameterCollection*[] CachedParameterCollectionReferences;//[Offset: 0x330, Size: 0x10] 0x7873bb0060
	NiagaraScriptDataInterfaceInfo[] CachedDefaultDataInterfaces;//[Offset: 0x340, Size: 0x10] 0x7873bb0100
	void RaiseOnGPUCompilationComplete();// 0xa4e513c 0x7873b96ec0

--------------------------------
Class: NiagaraScriptBase.Object

--------------------------------
Class: NiagaraParameterStore
	Object* Owner;//[Offset: 0x8, Size: 0x8] 0x78738f9400
	NiagaraVariableWithOffset[] SortedParameterOffsets;//[Offset: 0x10, Size: 0x10] 0x78737407e0
	byte[] ParameterData;//[Offset: 0x20, Size: 0x10] 0x7873740740
	NiagaraDataInterface*[] DataInterfaces;//[Offset: 0x30, Size: 0x10] 0x78737406a0
	Object*[] UObjects;//[Offset: 0x40, Size: 0x10] 0x7873740600
	NiagaraPositionSource[] OriginalPositionData;//[Offset: 0x50, Size: 0x10] 0x7873740560

--------------------------------
Class: NiagaraVariableWithOffset.NiagaraVariableBase
	int Offset;//[Offset: 0xc, Size: 0x4] 0x78738f7600
	NiagaraLwcStructConverter StructConverter;//[Offset: 0x10, Size: 0x10] 0x78738f7980

--------------------------------
Class: NiagaraLwcStructConverter
	NiagaraStructConversionStep[] ConversionSteps;//[Offset: 0x0, Size: 0x10] 0x7873740420

--------------------------------
Class: NiagaraStructConversionStep
	int SourceBytes;//[Offset: 0x0, Size: 0x4] 0x78738f7680
	int SourceOffset;//[Offset: 0x4, Size: 0x4] 0x78738f7700
	int SimulationBytes;//[Offset: 0x8, Size: 0x4] 0x78738f7780
	int SimulationOffset;//[Offset: 0xc, Size: 0x4] 0x78738f7800
	enum ConversionType;//[Offset: 0x10, Size: 0x1] 0x78737404c0

--------------------------------
Class: NiagaraPositionSource
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78738f7a00
	Vector Value;//[Offset: 0x8, Size: 0x18] 0x78738f7a80

--------------------------------
Class: NiagaraScriptExecutionParameterStore.NiagaraParameterStore
	int ParameterSize;//[Offset: 0x88, Size: 0x4] 0x78738fac80
	uint32 PaddedParameterSize;//[Offset: 0x8c, Size: 0x4] 0x78738fad00
	NiagaraScriptExecutionPaddingInfo[] PaddingInfo;//[Offset: 0x90, Size: 0x10] 0x7873741780
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78738fae00

--------------------------------
Class: NiagaraScriptExecutionPaddingInfo
	uint16 SrcOffset;//[Offset: 0x0, Size: 0x2] 0x78738fae80
	uint16 DestOffset;//[Offset: 0x2, Size: 0x2] 0x78738faf00
	uint16 SrcSize;//[Offset: 0x4, Size: 0x2] 0x78738faf80
	uint16 DestSize;//[Offset: 0x6, Size: 0x2] 0x78738fb000

--------------------------------
Class: NiagaraBoundParameter
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20] 0x78738f7b00
	int SrcOffset;//[Offset: 0x20, Size: 0x4] 0x78738f7b80
	int DestOffset;//[Offset: 0x24, Size: 0x4] 0x78738f7c00

--------------------------------
Class: NiagaraVMExecutableDataId
	Guid CompilerVersionID;//[Offset: 0x0, Size: 0x10] 0x78738fa200
	enum ScriptUsageType;//[Offset: 0x10, Size: 0x1] 0x78737461e0
	Guid ScriptUsageTypeID;//[Offset: 0x14, Size: 0x10] 0x78738fa300
	bool bUsesRapidIterationParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1] 0x78738fa380
	bool bDisableDebugSwitches;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1] 0x78738fa400
	bool bInterpolatedSpawn;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1] 0x78738fa480
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1] 0x78738fa500
	Guid BaseScriptID;//[Offset: 0x28, Size: 0x10] 0x78738f8480
	NiagaraCompileHash BaseScriptCompileHash;//[Offset: 0x38, Size: 0x10] 0x78738f8500
	Guid ScriptVersionID;//[Offset: 0x48, Size: 0x10] 0x78738f8580

--------------------------------
Class: NiagaraCompileHash
	byte[] DataHash;//[Offset: 0x0, Size: 0x10] 0x7873742f40

--------------------------------
Class: NiagaraVMExecutableData
	NiagaraVMExecutableByteCode ByteCode;//[Offset: 0x0, Size: 0x18] 0x78738fb080
	NiagaraVMExecutableByteCode OptimizedByteCode;//[Offset: 0x18, Size: 0x18] 0x78738fb100
	int NumTempRegisters;//[Offset: 0x68, Size: 0x4] 0x78738fb180
	int NumUserPtrs;//[Offset: 0x6c, Size: 0x4] 0x78738fb200
	NiagaraCompilerTag[] CompileTags;//[Offset: 0x70, Size: 0x10] 0x78737416e0
	byte[] ScriptLiterals;//[Offset: 0x80, Size: 0x10] 0x7873744200
	NiagaraVariable[] Attributes;//[Offset: 0x90, Size: 0x10] 0x7873744160
	NiagaraScriptDataUsageInfo DataUsage;//[Offset: 0xa0, Size: 0x1] 0x78738fb400
	NiagaraScriptDataInterfaceCompileInfo[] DataInterfaceInfo;//[Offset: 0xa8, Size: 0x10] 0x78737440c0
	VMExternalFunctionBindingInfo[] CalledVMExternalFunctions;//[Offset: 0xb8, Size: 0x10] 0x7873744020
	NiagaraDataSetID[] ReadDataSets;//[Offset: 0xd8, Size: 0x10] 0x7873743f80
	NiagaraDataSetProperties[] WriteDataSets;//[Offset: 0xe8, Size: 0x10] 0x7873743ee0
	NiagaraStatScope[] StatScopes;//[Offset: 0xf8, Size: 0x10] 0x7873743e40
	NiagaraDataInterfaceGPUParamInfo[] DIParamInfo;//[Offset: 0x108, Size: 0x10] 0x7873746640
	enum LastCompileStatus;//[Offset: 0x118, Size: 0x1] 0x78737465a0
	SimulationStageMetaData[] SimulationStageMetaData;//[Offset: 0x120, Size: 0x10] 0x7873746320
	bool bReadsSignificanceIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1] 0x78738fa000
	bool bNeedsGPUContextInit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x130, Size: 0x1] 0x78738fa080

--------------------------------
Class: NiagaraVMExecutableByteCode
	byte[] Data;//[Offset: 0x0, Size: 0x10] 0x7873746280
	int UncompressedSize;//[Offset: 0x10, Size: 0x4] 0x78738fa180

--------------------------------
Class: NiagaraCompilerTag
	NiagaraVariable Variable;//[Offset: 0x0, Size: 0x20] 0x78738f8600
	FString StringValue;//[Offset: 0x20, Size: 0x10] 0x78738f8680

--------------------------------
Class: NiagaraScriptDataUsageInfo
	bool bReadsAttributeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78738ecd00

--------------------------------
Class: NiagaraScriptDataInterfaceCompileInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78738edd80
	int UserPtrIdx;//[Offset: 0x8, Size: 0x4] 0x78738ede00
	NiagaraTypeDefinition Type;//[Offset: 0x10, Size: 0x10] 0x78738ede80
	FName RegisteredParameterMapRead;//[Offset: 0x20, Size: 0x8] 0x78738edf00
	FName RegisteredParameterMapWrite;//[Offset: 0x28, Size: 0x8] 0x78738edf80
	bool bIsPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78738ee000

--------------------------------
Class: NiagaraTypeDefinition
	Object* ClassStructOrEnum;//[Offset: 0x0, Size: 0x8] 0x78738ee200
	uint16 UnderlyingType;//[Offset: 0x8, Size: 0x2] 0x78738ee280
	byte Flags;//[Offset: 0xa, Size: 0x1] 0x78738ee300

--------------------------------
Class: VMExternalFunctionBindingInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78738ed900
	FName OwnerName;//[Offset: 0x8, Size: 0x8] 0x78738ed980
	bool[] InputParamLocations;//[Offset: 0x10, Size: 0x10] 0x7873748b20
	int NumOutputs;//[Offset: 0x20, Size: 0x4] 0x78738eda80
	VMFunctionSpecifier[] FunctionSpecifiers;//[Offset: 0x28, Size: 0x10] 0x7873748a80

--------------------------------
Class: VMFunctionSpecifier
	FName Key;//[Offset: 0x0, Size: 0x8] 0x78738edb80
	FName Value;//[Offset: 0x8, Size: 0x8] 0x78738edc00

--------------------------------
Class: NiagaraDataSetID
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78738ece80
	enum Type;//[Offset: 0x8, Size: 0x1] 0x7873748800

--------------------------------
Class: NiagaraDataSetProperties
	NiagaraDataSetID ID;//[Offset: 0x0, Size: 0xc] 0x78738ecd80
	NiagaraVariable[] Variables;//[Offset: 0x10, Size: 0x10] 0x78737488a0

--------------------------------
Class: NiagaraStatScope
	FName FullName;//[Offset: 0x0, Size: 0x8] 0x78738edc80
	FName FriendlyName;//[Offset: 0x8, Size: 0x8] 0x78738edd00

--------------------------------
Class: NiagaraDataInterfaceGPUParamInfo
	FString DataInterfaceHLSLSymbol;//[Offset: 0x0, Size: 0x10] 0x78738f9600
	FString DIClassName;//[Offset: 0x10, Size: 0x10] 0x78738f9680
	NiagaraDataInterfaceGeneratedFunction[] GeneratedFunctions;//[Offset: 0x20, Size: 0x10] 0x78737466e0

--------------------------------
Class: NiagaraDataInterfaceGeneratedFunction

--------------------------------
Class: SimulationStageMetaData
	FName SimulationStageName;//[Offset: 0x0, Size: 0x8] 0x78738f9880
	FName EnabledBinding;//[Offset: 0x8, Size: 0x8] 0x78738f9900
	FName IterationSource;//[Offset: 0x10, Size: 0x8] 0x78738f9980
	enum ExecuteBehavior;//[Offset: 0x18, Size: 0x1] 0x7873746500
	bool bWritesParticles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1] 0x78738f9a80
	bool bPartialParticleUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1] 0x78738f9b00
	bool bParticleIterationStateEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1] 0x78738f9b80
	FName ParticleIterationStateBinding;//[Offset: 0x1c, Size: 0x8] 0x78738f9c00
	IntPoint ParticleIterationStateRange;//[Offset: 0x28, Size: 0x8] 0x78738f9c80
	FName[] OutputDestinations;//[Offset: 0x30, Size: 0x10] 0x7873746460
	int NumIterations;//[Offset: 0x40, Size: 0x4] 0x78738f9d80
	FName NumIterationsBinding;//[Offset: 0x44, Size: 0x8] 0x78738f9e00
	enum GpuDispatchType;//[Offset: 0x4c, Size: 0x1] 0x78737463c0
	IntVector GpuDispatchNumThreads;//[Offset: 0x50, Size: 0xc] 0x78738f9f00

--------------------------------
Class: NiagaraParameterCollection.Object
	FName Namespace;//[Offset: 0x28, Size: 0x8] 0x7873badf80
	NiagaraVariable[] Parameters;//[Offset: 0x30, Size: 0x10] 0x7873bb0920
	MaterialParameterCollection* SourceMaterialCollection;//[Offset: 0x40, Size: 0x8] 0x7873bae080
	NiagaraParameterCollectionInstance* DefaultInstance;//[Offset: 0x48, Size: 0x8] 0x7873bae100
	Guid CompileId;//[Offset: 0x50, Size: 0x10] 0x7873bae180

--------------------------------
Class: NiagaraParameterCollectionInstance.Object
	NiagaraParameterCollection* Collection;//[Offset: 0x28, Size: 0x8] 0x7873bae200
	NiagaraVariable[] OverridenParameters;//[Offset: 0x30, Size: 0x10] 0x7873bb09c0
	NiagaraParameterStore ParameterStorage;//[Offset: 0x40, Size: 0x88] 0x7873bae300
	void SetVectorParameter(FString InVariableName, Vector InValue);// 0xa4d678c 0x7873b94140
	void SetVector4Parameter(FString InVariableName, out const Vector4 InValue);// 0xa4d6684 0x7873b94220
	void SetVector2DParameter(FString InVariableName, Vector2D InValue);// 0xa4d6888 0x7873b94300
	void SetQuatParameter(FString InVariableName, out const Quat InValue);// 0xa4d6484 0x7873b943e0
	void SetIntParameter(FString InVariableName, int InValue);// 0xa4d6980 0x7873b944c0
	void SetFloatParameter(FString InVariableName, float InValue);// 0xa4d6a80 0x7873b945a0
	void SetColorParameter(FString InVariableName, LinearColor InValue);// 0xa4d6588 0x7873b94680
	void SetBoolParameter(FString InVariableName, bool InValue);// 0xa4d6b80 0x7873b94760
	Vector GetVectorParameter(FString InVariableName);// 0xa4d6ec8 0x7873b94840
	Vector4 GetVector4Parameter(FString InVariableName);// 0xa4d6e08 0x7873b94920
	Vector2D GetVector2DParameter(FString InVariableName);// 0xa4d6f88 0x7873b94a00
	Quat GetQuatParameter(FString InVariableName);// 0xa4d6d48 0x7873b94ae0
	int GetIntParameter(FString InVariableName);// 0xa4d7044 0x7873b94bc0
	float GetFloatParameter(FString InVariableName);// 0xa4d7100 0x7873b94ca0
	LinearColor GetColorParameter(FString InVariableName);// 0xa4d6c88 0x7873b94d80
	bool GetBoolParameter(FString InVariableName);// 0xa4d71bc 0x7873b94e60

--------------------------------
Class: NiagaraScriptDataInterfaceInfo
	NiagaraDataInterface* DataInterface;//[Offset: 0x0, Size: 0x8] 0x78738ee080
	FName Name;//[Offset: 0x8, Size: 0x8] 0x78738ee100
	int UserPtrIdx;//[Offset: 0x10, Size: 0x4] 0x78738ee180
	NiagaraTypeDefinition Type;//[Offset: 0x18, Size: 0x10] 0x78738ee380
	FName RegisteredParameterMapRead;//[Offset: 0x28, Size: 0x8] 0x78738ee400
	FName RegisteredParameterMapWrite;//[Offset: 0x30, Size: 0x8] 0x78738ee480

--------------------------------
Class: NiagaraEventReceiverProperties
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78738f6e00
	FName SourceEventGenerator;//[Offset: 0x8, Size: 0x8] 0x78738f6e80
	FName SourceEmitter;//[Offset: 0x10, Size: 0x8] 0x78738f6f00

--------------------------------
Class: NiagaraEventGeneratorProperties
	int MaxEventsPerFrame;//[Offset: 0x0, Size: 0x4] 0x78738f6c80
	FName ID;//[Offset: 0x4, Size: 0x8] 0x78738f6d00
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x10, Size: 0x40] 0x78738f6d80

--------------------------------
Class: NiagaraDataSetCompiledData
	NiagaraVariable[] Variables;//[Offset: 0x0, Size: 0x10] 0x78737442a0
	NiagaraVariableLayoutInfo[] VariableLayouts;//[Offset: 0x10, Size: 0x10] 0x7873746dc0
	NiagaraDataSetID ID;//[Offset: 0x20, Size: 0xc] 0x78738f0500
	uint32 TotalFloatComponents;//[Offset: 0x2c, Size: 0x4] 0x78738f0580
	uint32 TotalInt32Components;//[Offset: 0x30, Size: 0x4] 0x78738f0600
	uint32 TotalHalfComponents;//[Offset: 0x34, Size: 0x4] 0x78738f0680
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78738f0700
	enum SimTarget;//[Offset: 0x39, Size: 0x1] 0x7873746d20

--------------------------------
Class: NiagaraVariableLayoutInfo
	uint32 FloatComponentStart;//[Offset: 0x0, Size: 0x4] 0x78738f0800
	uint32 Int32ComponentStart;//[Offset: 0x4, Size: 0x4] 0x78738f0880
	uint32 HalfComponentStart;//[Offset: 0x8, Size: 0x4] 0x78738f0900
	NiagaraTypeLayoutInfo LayoutInfo;//[Offset: 0x10, Size: 0x60] 0x78738f0c80

--------------------------------
Class: NiagaraTypeLayoutInfo
	uint32[] FloatComponentByteOffsets;//[Offset: 0x0, Size: 0x10] 0x7873746c80
	uint32[] FloatComponentRegisterOffsets;//[Offset: 0x10, Size: 0x10] 0x7873746be0
	uint32[] Int32ComponentByteOffsets;//[Offset: 0x20, Size: 0x10] 0x7873746b40
	uint32[] Int32ComponentRegisterOffsets;//[Offset: 0x30, Size: 0x10] 0x7873746aa0
	uint32[] HalfComponentByteOffsets;//[Offset: 0x40, Size: 0x10] 0x7873746a00
	uint32[] HalfComponentRegisterOffsets;//[Offset: 0x50, Size: 0x10] 0x7873746960

--------------------------------
Class: NiagaraDetailsLevelScaleOverrides
	float Low;//[Offset: 0x0, Size: 0x4] 0x78738f6500
	float Medium;//[Offset: 0x4, Size: 0x4] 0x78738f6580
	float High;//[Offset: 0x8, Size: 0x4] 0x78738f6600
	float Epic;//[Offset: 0xc, Size: 0x4] 0x78738f6680
	float Cine;//[Offset: 0x10, Size: 0x4] 0x78738f6700

--------------------------------
Class: NiagaraEmitterScalabilityOverrides
	NiagaraEmitterScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10] 0x7873742c20

--------------------------------
Class: NiagaraEmitterScalabilityOverride.NiagaraEmitterScalabilitySettings
	bool bOverrideSpawnCountScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78738f7000

--------------------------------
Class: NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x28, Size: 0x30] 0x7873b8bd00
	int SortOrderHint;//[Offset: 0x58, Size: 0x4] 0x7873b8bd80
	enum MotionVectorSetting;//[Offset: 0x5c, Size: 0x4] 0x7873afd940
	NiagaraVariableAttributeBinding RendererEnabledBinding;//[Offset: 0x60, Size: 0x58] 0x7873b8be80
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x7873b8bf00
	bool bAllowInCullProxies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1] 0x7873b8bf80
	bool bMotionBlurEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1] 0x7873b8c000

--------------------------------
Class: NiagaraVariableAttributeBinding
	NiagaraVariableBase ParamMapVariable;//[Offset: 0x0, Size: 0xc] 0x78738ef380
	NiagaraVariable DataSetVariable;//[Offset: 0x10, Size: 0x20] 0x78738ef400
	NiagaraVariable RootVariable;//[Offset: 0x30, Size: 0x20] 0x78738ef480
	byte BindingSourceMode;//[Offset: 0x50, Size: 0x1] 0x78738ef500
	bool bBindingExistsOnSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 0x1] 0x78738ef580
	bool bIsCachedParticleValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51, Size: 0x1] 0x78738ef600

--------------------------------
Class: NiagaraEventScriptProperties.NiagaraEmitterScriptProperties
	enum ExecutionMode;//[Offset: 0x28, Size: 0x1] 0x7873740240
	uint32 SpawnNumber;//[Offset: 0x2c, Size: 0x4] 0x78738f6800
	uint32 MaxEventsPerFrame;//[Offset: 0x30, Size: 0x4] 0x78738f6880
	Guid SourceEmitterID;//[Offset: 0x34, Size: 0x10] 0x78738f6900
	FName SourceEventName;//[Offset: 0x44, Size: 0x8] 0x78738f6980
	bool bRandomSpawnNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78738f6a00
	uint32 MinSpawnNumber;//[Offset: 0x50, Size: 0x4] 0x78738f6a80

--------------------------------
Class: NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraScript* Script;//[Offset: 0x28, Size: 0x8] 0x7873bc1800
	FName SimulationStageName;//[Offset: 0x30, Size: 0x8] 0x7873bc1880
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7873bc1900

--------------------------------
Class: NiagaraSystemCompiledData
	NiagaraParameterStore InstanceParamStore;//[Offset: 0x0, Size: 0x88] 0x78738fbe00
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x88, Size: 0x40] 0x78738fbe80
	NiagaraDataSetCompiledData SpawnInstanceParamsDataSetCompiledData;//[Offset: 0xc8, Size: 0x40] 0x78738fbf00
	NiagaraDataSetCompiledData UpdateInstanceParamsDataSetCompiledData;//[Offset: 0x108, Size: 0x40] 0x78738fbf80
	NiagaraParameterDataSetBindingCollection SpawnInstanceGlobalBinding;//[Offset: 0x148, Size: 0x20] 0x78738fc000
	NiagaraParameterDataSetBindingCollection SpawnInstanceSystemBinding;//[Offset: 0x168, Size: 0x20] 0x78738fc080
	NiagaraParameterDataSetBindingCollection SpawnInstanceOwnerBinding;//[Offset: 0x188, Size: 0x20] 0x78738fc100
	NiagaraParameterDataSetBindingCollection[] SpawnInstanceEmitterBindings;//[Offset: 0x1a8, Size: 0x10] 0x7873741b40
	NiagaraParameterDataSetBindingCollection UpdateInstanceGlobalBinding;//[Offset: 0x1b8, Size: 0x20] 0x78738fc200
	NiagaraParameterDataSetBindingCollection UpdateInstanceSystemBinding;//[Offset: 0x1d8, Size: 0x20] 0x78738fc280
	NiagaraParameterDataSetBindingCollection UpdateInstanceOwnerBinding;//[Offset: 0x1f8, Size: 0x20] 0x78738fc300
	NiagaraParameterDataSetBindingCollection[] UpdateInstanceEmitterBindings;//[Offset: 0x218, Size: 0x10] 0x7873741aa0

--------------------------------
Class: NiagaraParameterDataSetBindingCollection
	NiagaraParameterDataSetBinding[] FloatOffsets;//[Offset: 0x0, Size: 0x10] 0x7873741a00
	NiagaraParameterDataSetBinding[] Int32Offsets;//[Offset: 0x10, Size: 0x10] 0x7873741960

--------------------------------
Class: NiagaraParameterDataSetBinding
	int ParameterOffset;//[Offset: 0x0, Size: 0x4] 0x78738fc500
	int DataSetComponentOffset;//[Offset: 0x4, Size: 0x4] 0x78738fc580

--------------------------------
Class: NiagaraUserRedirectionParameterStore.NiagaraParameterStore
	<NiagaraVariable,NiagaraVariable> UserParameterRedirects;//[Offset: 0x88, Size: 0x50] 0x7873900400

--------------------------------
Class: NiagaraCullProxyComponent.NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NiagaraCulledComponentInfo[] Instances;//[Offset: 0x7e0, Size: 0x10] 0x7873afd440

--------------------------------
Class: NiagaraCulledComponentInfo

--------------------------------
Class: NiagaraComponentPool.Object
	<NiagaraSystem*,NCPool> WorldParticleSystemPools;//[Offset: 0x28, Size: 0x50] 0x787386c580

--------------------------------
Class: NCPool
	NCPoolElement[] FreeElements;//[Offset: 0x0, Size: 0x10] 0x7873748ee0

--------------------------------
Class: NCPoolElement
	NiagaraComponent* Component;//[Offset: 0x0, Size: 0x8] 0x78738ee900

--------------------------------
Class: NiagaraComponentSettings.Object
	<FName> SuppressActivationList;//[Offset: 0x28, Size: 0x50] 0x7873afd4e0
	<FName> ForceAutoPooolingList;//[Offset: 0x78, Size: 0x50] 0x7873afd580
	<NiagaraEmitterNameSettingsRef> SuppressEmitterList;//[Offset: 0xc8, Size: 0x50] 0x7873afd620
	<NiagaraEmitterNameSettingsRef> GPUEmitterAllowList;//[Offset: 0x118, Size: 0x50] 0x7873afd6c0
	<FName> GpuDataInterfaceDenyList;//[Offset: 0x168, Size: 0x50] 0x7873afd760

--------------------------------
Class: NiagaraEmitterNameSettingsRef
	FName SystemName;//[Offset: 0x0, Size: 0x8] 0x78738efc80
	FString EmitterName;//[Offset: 0x8, Size: 0x10] 0x78738efd00

--------------------------------
Class: NiagaraDataInterface2DArrayTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Texture2DArray* Texture;//[Offset: 0x38, Size: 0x8] 0x7873b8d580
	NiagaraUserParameterBinding TextureUserParameter;//[Offset: 0x40, Size: 0x20] 0x7873b8d600

--------------------------------
Class: Texture2DArray.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0x268, Size: 0x1] 0x7873fb5480
	byte AddressY;//[Offset: 0x269, Size: 0x1] 0x7873fb5500
	byte AddressZ;//[Offset: 0x26a, Size: 0x1] 0x7873fb5580

--------------------------------
Class: NiagaraUserParameterBinding
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20] 0x78738ef000

--------------------------------
Class: NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum GpuSyncMode;//[Offset: 0x6c, Size: 0x4] 0x7873afd3a0
	int MaxElements;//[Offset: 0x70, Size: 0x4] 0x7873b8d380

--------------------------------
Class: NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceArrayFloat3.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector[] FloatData;//[Offset: 0x78, Size: 0x10] 0x7873afd1c0

--------------------------------
Class: NiagaraDataInterfaceArrayColor.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	LinearColor[] ColorData;//[Offset: 0x78, Size: 0x10] 0x7873afcfe0

--------------------------------
Class: NiagaraDataInterfaceArrayInt32.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int[] IntData;//[Offset: 0x78, Size: 0x10] 0x7873afeca0

--------------------------------
Class: NiagaraDataInterfaceAsyncGpuTrace.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int MaxTracesPerParticle;//[Offset: 0x34, Size: 0x4] 0x7873ba1c80
	int MaxRetraces;//[Offset: 0x38, Size: 0x4] 0x7873ba1d00
	byte TraceProvider;//[Offset: 0x3c, Size: 0x1] 0x7873ba1d80

--------------------------------
Class: NiagaraDataInterfaceAudioPlayer.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundBase* SoundToPlay;//[Offset: 0x38, Size: 0x8] 0x7873ba1700
	SoundAttenuation* Attenuation;//[Offset: 0x40, Size: 0x8] 0x7873ba1780
	SoundConcurrency* Concurrency;//[Offset: 0x48, Size: 0x8] 0x7873ba1800
	FName[] ParameterNames;//[Offset: 0x50, Size: 0x10] 0x7873afeac0
	bool bLimitPlaysPerTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7873ba1900
	int MaxPlaysPerTick;//[Offset: 0x64, Size: 0x4] 0x7873ba1980
	bool bStopWhenComponentIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7873ba1a00

--------------------------------
Class: NiagaraDataInterfaceCollisionQuery.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceCubeTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	TextureCube* Texture;//[Offset: 0x38, Size: 0x8] 0x7873ba2d80
	NiagaraUserParameterBinding TextureUserParameter;//[Offset: 0x40, Size: 0x20] 0x7873ba2e00

--------------------------------
Class: NiagaraDataInterfaceDebugDraw.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	uint32 OverrideMaxLineInstances;//[Offset: 0x34, Size: 0x4] 0x7873ba2c00

--------------------------------
Class: NiagaraDataInterfaceExport.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding CallbackHandlerParameter;//[Offset: 0x38, Size: 0x20] 0x7873ba2800
	enum GPUAllocationMode;//[Offset: 0x58, Size: 0x1] 0x7873afe8e0
	int GPUAllocationFixedSize;//[Offset: 0x5c, Size: 0x4] 0x7873ba2900
	float GPUAllocationPerParticleSize;//[Offset: 0x60, Size: 0x4] 0x7873ba2980

--------------------------------
Class: NiagaraDataInterfaceGrid2DCollection.NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x58, Size: 0x20] 0x7873ba3c00
	enum OverrideBufferFormat;//[Offset: 0x78, Size: 0x1] 0x7873afe840
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 0x1] 0x7873ba3d00
	<uint64,TextureRenderTarget2DArray*> ManagedRenderTargets;//[Offset: 0xd0, Size: 0x50] 0x787386c4c0
	void GetTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY);// 0xa4b1a50 0x7873b927e0
	void GetRawTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY);// 0xa4b1ba8 0x7873b928c0
	bool FillTexture2D(const NiagaraComponent* Component, TextureRenderTarget2D* Dest, int AttributeIndex);// 0xa4b1eb4 0x7873b929a0
	bool FillRawTexture2D(const NiagaraComponent* Component, TextureRenderTarget2D* Dest, out int TilesX, out int TilesY);// 0xa4b1d00 0x7873b92a80

--------------------------------
Class: NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumCellsX;//[Offset: 0x34, Size: 0x4] 0x7873ba2500
	int NumCellsY;//[Offset: 0x38, Size: 0x4] 0x7873ba2580
	int NumCellsMaxAxis;//[Offset: 0x3c, Size: 0x4] 0x7873ba2600
	int NumAttributes;//[Offset: 0x40, Size: 0x4] 0x7873ba2680
	bool SetGridFromMaxAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7873ba2700
	Vector2D WorldBBoxSize;//[Offset: 0x48, Size: 0x10] 0x7873ba2780

--------------------------------
Class: NiagaraDataInterfaceGrid3DCollection.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumAttributes;//[Offset: 0x68, Size: 0x4] 0x7873ba4e80
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x70, Size: 0x20] 0x7873ba4f00
	enum OverrideBufferFormat;//[Offset: 0x90, Size: 0x1] 0x7873afe700
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91, Size: 0x1] 0x7873ba5000
	void GetTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY, out int SizeZ);// 0xa4b2938 0x7873b92460
	void GetRawTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY, out int SizeZ);// 0xa4b2ae8 0x7873b92540
	bool FillVolumeTexture(const NiagaraComponent* Component, VolumeTexture* Dest, int AttributeIndex);// 0xa4b2e9c 0x7873b92620
	bool FillRawVolumeTexture(const NiagaraComponent* Component, VolumeTexture* Dest, out int TilesX, out int TilesY, out int TileZ);// 0xa4b2c98 0x7873b92700

--------------------------------
Class: NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector NumCells;//[Offset: 0x34, Size: 0xc] 0x7873ba3880
	float CellSize;//[Offset: 0x40, Size: 0x4] 0x7873ba3900
	int NumCellsMaxAxis;//[Offset: 0x44, Size: 0x4] 0x7873ba3980
	enum SetResolutionMethod;//[Offset: 0x48, Size: 0x4] 0x7873afe7a0
	Vector WorldBBoxSize;//[Offset: 0x50, Size: 0x18] 0x7873ba3a80

--------------------------------
Class: NiagaraDataInterfaceLandscape.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Actor* SourceLandscape;//[Offset: 0x38, Size: 0x8] 0x7873ba4a00
	enum SourceMode;//[Offset: 0x40, Size: 0x1] 0x7873afe5c0
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0x48, Size: 0x10] 0x7873afe660

--------------------------------
Class: NiagaraDataInterfaceOcclusion.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceRasterizationGrid3D.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumAttributes;//[Offset: 0x68, Size: 0x4] 0x7873ba4680
	float Precision;//[Offset: 0x6c, Size: 0x4] 0x7873ba4700
	int ResetValue;//[Offset: 0x70, Size: 0x4] 0x7873ba4780

--------------------------------
Class: NiagaraDataInterfaceRenderTargetCube.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int Size;//[Offset: 0x34, Size: 0x4] 0x7873ba5c00
	byte OverrideRenderTargetFormat;//[Offset: 0x38, Size: 0x1] 0x7873ba5c80
	bool bInheritUserParameterSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x7873ba5d00
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1] 0x7873ba5d80
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x40, Size: 0x20] 0x7873ba5e00
	<uint64,TextureRenderTargetCube*> ManagedRenderTargets;//[Offset: 0x60, Size: 0x50] 0x787386c1c0

--------------------------------
Class: NiagaraDataInterfaceSimpleCounter.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum GpuSyncMode;//[Offset: 0x34, Size: 0x4] 0x7873afe3e0
	int InitialValue;//[Offset: 0x38, Size: 0x4] 0x7873ba5680

--------------------------------
Class: NiagaraDataInterfaceStaticMesh.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum SourceMode;//[Offset: 0x31, Size: 0x1] 0x7873affc40
	StaticMesh* DefaultMesh;//[Offset: 0x38, Size: 0x8] 0x7873ba6b80
	Actor* Source;//[Offset: 0x40, Size: 0x8] 0x7873ba6c00
	StaticMeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8] 0x7873ba6c80
	NDIStaticMeshSectionFilter SectionFilter;//[Offset: 0x50, Size: 0x10] 0x7873ba6d00
	bool bUsePhysicsBodyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7873ba6d80
	FName[] FilteredSockets;//[Offset: 0x68, Size: 0x10] 0x7873affce0

--------------------------------
Class: NDIStaticMeshSectionFilter
	int[] AllowedMaterialSlots;//[Offset: 0x0, Size: 0x10] 0x78737468c0

--------------------------------
Class: NiagaraDataInterfaceVector2DCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80] 0x7873ba6580
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80] 0x7873ba6600

--------------------------------
Class: NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	float[] ShaderLUT;//[Offset: 0x38, Size: 0x10] 0x7873afea20
	float LUTMinTime;//[Offset: 0x48, Size: 0x4] 0x7873ba3100
	float LUTMaxTime;//[Offset: 0x4c, Size: 0x4] 0x7873ba3180
	float LUTInvTimeRange;//[Offset: 0x50, Size: 0x4] 0x7873ba1100
	float LUTNumSamplesMinusOne;//[Offset: 0x54, Size: 0x4] 0x7873ba1180
	bool bUseLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1] 0x7873ba1200
	bool bExposeCurve;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1] 0x7873ba1280
	FName ExposedName;//[Offset: 0x60, Size: 0x8] 0x7873ba1300
	Texture2D* ExposedTexture;//[Offset: 0x68, Size: 0x8] 0x7873ba1380

--------------------------------
Class: NiagaraDataInterfaceVectorField.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	VectorField* Field;//[Offset: 0x38, Size: 0x8] 0x7873ba8100
	bool bTileX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7873ba8180
	bool bTileY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x7873ba8200
	bool bTileZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x7873ba8280

--------------------------------
Class: NiagaraEditorDataBase.Object

--------------------------------
Class: NiagaraSignificanceHandlerDistance.NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraFunctionLibrary.BlueprintFunctionLibrary.Object
	static NiagaraComponent* SpawnSystemAttachedWithParams(out FXSystemSpawnParameters SpawnParams);// 0xa4cca48 0x7873b94f40
	static NiagaraComponent* SpawnSystemAttached(NiagaraSystem* SystemTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bAutoDestroy, bool bAutoActivate, enum PoolingMethod, bool bPreCullCheck);// 0xa4cc3f0 0x7873b95020
	static NiagaraComponent* SpawnSystemAtLocationWithParams(out FXSystemSpawnParameters SpawnParams);// 0xa4ccb50 0x7873b95100
	static NiagaraComponent* SpawnSystemAtLocation(const Object* WorldContextObject, NiagaraSystem* SystemTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, bool bAutoActivate, enum PoolingMethod, bool bPreCullCheck);// 0xa4cc740 0x7873b951e0
	static void SetVolumeTextureObject(NiagaraComponent* NiagaraSystem, FString OverrideName, VolumeTexture* Texture);// 0xa4cbb34 0x7873b952c0
	static void SetTextureObject(NiagaraComponent* NiagaraSystem, FString OverrideName, Texture* Texture);// 0xa4cbdac 0x7873b953a0
	static void SetTexture2DArrayObject(NiagaraComponent* NiagaraSystem, FString OverrideName, Texture2DArray* Texture);// 0xa4cbc70 0x7873b95480
	static void SetSkeletalMeshDataInterfaceSamplingRegions(NiagaraComponent* NiagaraSystem, FString OverrideName, out const FName[] SamplingRegions);// 0xa4cbee8 0x7873b95560
	static void SetComponentNiagaraGPURayTracedCollisionGroup(Object* WorldContextObject, PrimitiveComponent* Primitive, int CollisionGroup);// 0xa4cb918 0x7873b95640
	static void SetActorNiagaraGPURayTracedCollisionGroup(Object* WorldContextObject, Actor* Actor, int CollisionGroup);// 0xa4cb7ec 0x7873b91d60
	static void ReleaseNiagaraGPURayTracedCollisionGroup(Object* WorldContextObject, int CollisionGroup);// 0xa4cb660 0x7873b91e40
	static void OverrideSystemUserVariableStaticMeshComponent(NiagaraComponent* NiagaraSystem, FString OverrideName, StaticMeshComponent* StaticMeshComponent);// 0xa4cc2b4 0x7873b91f20
	static void OverrideSystemUserVariableStaticMesh(NiagaraComponent* NiagaraSystem, FString OverrideName, StaticMesh* StaticMesh);// 0xa4cc178 0x7873b92000
	static void OverrideSystemUserVariableSkeletalMeshComponent(NiagaraComponent* NiagaraSystem, FString OverrideName, SkeletalMeshComponent* SkeletalMeshComponent);// 0xa4cc03c 0x7873b920e0
	static NiagaraParameterCollectionInstance* GetNiagaraParameterCollection(Object* WorldContextObject, NiagaraParameterCollection* Collection);// 0xa4cba44 0x7873b921c0
	static int AcquireNiagaraGPURayTracedCollisionGroup(Object* WorldContextObject);// 0xa4cb744 0x7873b922a0

--------------------------------
Class: FXSystemSpawnParameters

--------------------------------
Class: NiagaraLightRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1] 0x7873baa680
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 0x1] 0x7873baa700
	bool bAlphaScalesBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd0, Size: 0x1] 0x7873baa780
	float RadiusScale;//[Offset: 0xd4, Size: 0x4] 0x7873baa800
	float DefaultExponent;//[Offset: 0xd8, Size: 0x4] 0x7873baa880
	Vector ColorAdd;//[Offset: 0xe0, Size: 0x18] 0x7873baa900
	int RendererVisibility;//[Offset: 0xf8, Size: 0x4] 0x7873baa980
	NiagaraVariableAttributeBinding LightRenderingEnabledBinding;//[Offset: 0x100, Size: 0x58] 0x7873baaa00
	NiagaraVariableAttributeBinding LightExponentBinding;//[Offset: 0x158, Size: 0x58] 0x7873baaa80
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x1b0, Size: 0x58] 0x7873baab00
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x208, Size: 0x58] 0x7873baab80
	NiagaraVariableAttributeBinding RadiusBinding;//[Offset: 0x260, Size: 0x58] 0x7873baac00
	NiagaraVariableAttributeBinding VolumetricScatteringBinding;//[Offset: 0x2b8, Size: 0x58] 0x7873baac80
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x310, Size: 0x58] 0x7873baad00

--------------------------------
Class: NiagaraParameterDefinitionsBase.Object

--------------------------------
Class: NiagaraPrecompileContainer.Object
	NiagaraScript*[] Scripts;//[Offset: 0x28, Size: 0x10] 0x7873bb07e0
	NiagaraSystem* System;//[Offset: 0x38, Size: 0x8] 0x7873bad900

--------------------------------
Class: NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	FName Param;//[Offset: 0x28, Size: 0x8] 0x7873baf480
	int Count;//[Offset: 0x30, Size: 0x4] 0x7873baf500

--------------------------------
Class: NiagaraPreviewAxis.Object
	int Num();// 0xa4e01b8 0x7873b97320
	void ApplyToPreview(NiagaraComponent* PreviewComponent, int PreviewIndex, bool bIsXAxis, out FString OutLabelText);// 0xa4e0010 0x7873b93a40

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector2D.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector2D Min;//[Offset: 0x38, Size: 0x10] 0x7873baf180
	Vector2D Max;//[Offset: 0x48, Size: 0x10] 0x7873baf200

--------------------------------
Class: NiagaraPreviewAxis_InterpParamLinearColor.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	LinearColor Min;//[Offset: 0x34, Size: 0x10] 0x7873baee80
	LinearColor Max;//[Offset: 0x44, Size: 0x10] 0x7873baef00

--------------------------------
Class: NiagaraRibbonRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	MaterialInterface* Material;//[Offset: 0xd0, Size: 0x8] 0x7873bc0500
	NiagaraUserParameterBinding MaterialUserParamBinding;//[Offset: 0xd8, Size: 0x20] 0x7873bc0580
	enum FacingMode;//[Offset: 0xf8, Size: 0x1] 0x7873bb01a0
	NiagaraRibbonUVSettings UV0Settings;//[Offset: 0x100, Size: 0x38] 0x7873bc0680
	NiagaraRibbonUVSettings UV1Settings;//[Offset: 0x138, Size: 0x38] 0x7873bc0700
	enum DrawDirection;//[Offset: 0x170, Size: 0x1] 0x7873bb0240
	enum Shape;//[Offset: 0x171, Size: 0x1] 0x7873bb02e0
	bool bEnableAccurateGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 0x1] 0x7873bc0880
	int WidthSegmentationCount;//[Offset: 0x174, Size: 0x4] 0x7873bc0900
	int MultiPlaneCount;//[Offset: 0x178, Size: 0x4] 0x7873bc0980
	int TubeSubdivisions;//[Offset: 0x17c, Size: 0x4] 0x7873bc0a00
	NiagaraRibbonShapeCustomVertex[] CustomVertices;//[Offset: 0x180, Size: 0x10] 0x7873bb0380
	float CurveTension;//[Offset: 0x190, Size: 0x4] 0x7873bc0b00
	enum TessellationMode;//[Offset: 0x194, Size: 0x1] 0x7873bb0420
	int TessellationFactor;//[Offset: 0x198, Size: 0x4] 0x7873bc0c00
	bool bUseConstantFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 0x1] 0x7873bc0c80
	float TessellationAngle;//[Offset: 0x1a0, Size: 0x4] 0x7873bc0d00
	bool bScreenSpaceTessellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 0x1] 0x7873bc0d80
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x1a8, Size: 0x58] 0x7873bc0e00
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x200, Size: 0x58] 0x7873bc0e80
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x258, Size: 0x58] 0x7873bc0f00
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x2b0, Size: 0x58] 0x7873bc0f80
	NiagaraVariableAttributeBinding RibbonTwistBinding;//[Offset: 0x308, Size: 0x58] 0x7873bc1000
	NiagaraVariableAttributeBinding RibbonWidthBinding;//[Offset: 0x360, Size: 0x58] 0x7873bc1080
	NiagaraVariableAttributeBinding RibbonFacingBinding;//[Offset: 0x3b8, Size: 0x58] 0x7873baf800
	NiagaraVariableAttributeBinding RibbonIdBinding;//[Offset: 0x410, Size: 0x58] 0x7873baf880
	NiagaraVariableAttributeBinding RibbonLinkOrderBinding;//[Offset: 0x468, Size: 0x58] 0x7873baf900
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x4c0, Size: 0x58] 0x7873baf980
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x518, Size: 0x58] 0x7873bafa00
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x570, Size: 0x58] 0x7873bafa80
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x5c8, Size: 0x58] 0x7873bafb00
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x620, Size: 0x58] 0x7873bafb80
	NiagaraVariableAttributeBinding RibbonUVDistance;//[Offset: 0x678, Size: 0x58] 0x7873bafc00
	NiagaraVariableAttributeBinding U0OverrideBinding;//[Offset: 0x6d0, Size: 0x58] 0x7873bafc80
	NiagaraVariableAttributeBinding V0RangeOverrideBinding;//[Offset: 0x728, Size: 0x58] 0x7873bafd00
	NiagaraVariableAttributeBinding U1OverrideBinding;//[Offset: 0x780, Size: 0x58] 0x7873bafd80
	NiagaraVariableAttributeBinding V1RangeOverrideBinding;//[Offset: 0x7d8, Size: 0x58] 0x7873bafe00
	NiagaraMaterialAttributeBinding[] MaterialParameterBindings;//[Offset: 0x830, Size: 0x10] 0x7873bb04c0
	NiagaraVariableAttributeBinding PrevPositionBinding;//[Offset: 0x840, Size: 0x58] 0x7873baff00
	NiagaraVariableAttributeBinding PrevRibbonWidthBinding;//[Offset: 0x898, Size: 0x58] 0x7873baff80
	NiagaraVariableAttributeBinding PrevRibbonFacingBinding;//[Offset: 0x8f0, Size: 0x58] 0x7873bae780
	NiagaraVariableAttributeBinding PrevRibbonTwistBinding;//[Offset: 0x948, Size: 0x58] 0x7873bae800

--------------------------------
Class: NiagaraRibbonUVSettings
	enum DistributionMode;//[Offset: 0x0, Size: 0x4] 0x7873745f60
	enum LeadingEdgeMode;//[Offset: 0x4, Size: 0x4] 0x7873745ec0
	enum TrailingEdgeMode;//[Offset: 0x8, Size: 0x4] 0x7873745e20
	float TilingLength;//[Offset: 0xc, Size: 0x4] 0x78738f8b80
	Vector2D Offset;//[Offset: 0x10, Size: 0x10] 0x78738f8c00
	Vector2D Scale;//[Offset: 0x20, Size: 0x10] 0x78738f8c80
	bool bEnablePerParticleUOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78738f8d00
	bool bEnablePerParticleVRangeOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x78738f8d80

--------------------------------
Class: NiagaraRibbonShapeCustomVertex
	Vector2D Position;//[Offset: 0x0, Size: 0x10] 0x78738f8e00
	Vector2D Normal;//[Offset: 0x10, Size: 0x10] 0x78738f8e80
	float TextureV;//[Offset: 0x20, Size: 0x4] 0x78738f8f00

--------------------------------
Class: NiagaraMaterialAttributeBinding
	FName MaterialParameterName;//[Offset: 0x0, Size: 0x8] 0x78738ef180
	NiagaraVariableBase NiagaraVariable;//[Offset: 0x8, Size: 0xc] 0x78738ef200
	NiagaraVariableBase ResolvedNiagaraVariable;//[Offset: 0x14, Size: 0xc] 0x78738ef280
	NiagaraVariableBase NiagaraChildVariable;//[Offset: 0x20, Size: 0xc] 0x78738ef300

--------------------------------
Class: NiagaraScriptSourceBase.Object

--------------------------------
Class: NiagaraSimulationStageGeneric.NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraVariableAttributeBinding EnabledBinding;//[Offset: 0x40, Size: 0x58] 0x7873bc1100
	enum IterationSource;//[Offset: 0x98, Size: 0x1] 0x7873bb2400
	int Iterations;//[Offset: 0x9c, Size: 0x4] 0x7873bc1200
	NiagaraVariableAttributeBinding NumIterationsBinding;//[Offset: 0xa0, Size: 0x58] 0x7873bc1280
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1] 0x7873bc1300
	enum ExecuteBehavior;//[Offset: 0xf9, Size: 0x1] 0x7873bb24a0
	bool bDisablePartialParticleUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 0x1] 0x7873bc1400
	NiagaraVariableDataInterfaceBinding DataInterface;//[Offset: 0x100, Size: 0x20] 0x7873bc1480
	bool bParticleIterationStateEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1] 0x7873bc1500
	NiagaraVariableAttributeBinding ParticleIterationStateBinding;//[Offset: 0x128, Size: 0x58] 0x7873bc1580
	IntPoint ParticleIterationStateRange;//[Offset: 0x180, Size: 0x8] 0x7873bc1600
	bool bGpuDispatchForceLinear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1] 0x7873bc1680
	bool bOverrideGpuDispatchNumThreads;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x188, Size: 0x1] 0x7873bc1700
	IntVector OverrideGpuDispatchNumThreads;//[Offset: 0x18c, Size: 0xc] 0x7873bc1780

--------------------------------
Class: NiagaraVariableDataInterfaceBinding
	NiagaraVariable BoundVariable;//[Offset: 0x0, Size: 0x20] 0x78738ef100

--------------------------------
Class: AnimNotifyState_TimedNiagaraEffect.AnimNotifyState.Object
	NiagaraSystem* Template;//[Offset: 0x30, Size: 0x8] 0x7873bc5c80
	FName SocketName;//[Offset: 0x38, Size: 0x8] 0x7873bc5d00
	Vector LocationOffset;//[Offset: 0x40, Size: 0x18] 0x7873bc5d80
	Rotator RotationOffset;//[Offset: 0x58, Size: 0x18] 0x7873bc5e00
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7873bc5e80
	FXSystemComponent* GetSpawnedEffect(MeshComponent* MeshComp);// 0xa5023b4 0x7873b96980

--------------------------------
Class: GeometryCache.Object
	MaterialInterface*[] Materials;//[Offset: 0x30, Size: 0x10] 0x7873bb1b40
	GeometryCacheTrack*[] Tracks;//[Offset: 0x40, Size: 0x10] 0x7873bb1be0
	int StartFrame;//[Offset: 0x60, Size: 0x4] 0x7873bc7280
	int EndFrame;//[Offset: 0x64, Size: 0x4] 0x7873bc7300
	uint64 Hash;//[Offset: 0x68, Size: 0x8] 0x7873bc7380

--------------------------------
Class: GeometryCacheTrack.Object
	float Duration;//[Offset: 0x28, Size: 0x4] 0x7873bc7b80

--------------------------------
Class: GeometryCacheComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	GeometryCache* GeometryCache;//[Offset: 0x570, Size: 0x8] 0x7873bc7c00
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1] 0x7873bc7c80
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1] 0x7873bc7d00
	bool bExtrapolateFrames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 0x1] 0x7873bc7d80
	float StartTimeOffset;//[Offset: 0x57c, Size: 0x4] 0x7873bc7e00
	float PlaybackSpeed;//[Offset: 0x580, Size: 0x4] 0x7873bc7e80
	float MotionVectorScale;//[Offset: 0x584, Size: 0x4] 0x7873bc7f00
	int NumTracks;//[Offset: 0x588, Size: 0x4] 0x7873bc7f80
	float ElapsedTime;//[Offset: 0x58c, Size: 0x4] 0x7873bc8000
	float Duration;//[Offset: 0x5dc, Size: 0x4] 0x7873bc8080
	bool bManualTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1] 0x7873bc8100
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 0x1] 0x7873bc8180
	LinearColor WireframeOverrideColor;//[Offset: 0x5e4, Size: 0x10] 0x7873bc8200
	void TickAtThisTime(const float Time, bool bInIsRunning, bool bInBackwards, bool bInIsLooping);// 0xa5a0cd4 0x7873b98580
	void Stop();// 0xa5a1688 0x7873b98660
	void SetWireframeOverrideColor(const LinearColor Color);// 0xa5a0ea0 0x7873b98740
	void SetStartTimeOffset(const float NewStartTimeOffset);// 0xa5a1100 0x7873b98820
	void SetPlaybackSpeed(const float NewPlaybackSpeed);// 0xa5a136c 0x7873b98900
	void SetOverrideWireframeColor(bool bOverride);// 0xa5a0f80 0x7873b989e0
	void SetMotionVectorScale(const float NewMotionVectorScale);// 0xa5a1290 0x7873b98ac0
	void SetLooping(const bool bNewLooping);// 0xa5a1530 0x7873b98ba0
	bool SetGeometryCache(GeometryCache* NewGeomCache);// 0xa5a11dc 0x7873b98c80
	void SetExtrapolateFrames(const bool bNewExtrapolating);// 0xa5a1448 0x7873b98d60
	void PlayReversedFromEnd();// 0xa5a16b0 0x7873b98e40
	void PlayReversed();// 0xa5a16c4 0x7873b98f20
	void PlayFromStart();// 0xa5a16d8 0x7873b99000
	void Play();// 0xa5a16ec 0x7873b95720
	void Pause();// 0xa5a169c 0x7873b95800
	bool IsPlayingReversed();// 0xa5a1618 0x7873b958e0
	bool IsPlaying();// 0xa5a1650 0x7873b959c0
	bool IsLooping();// 0xa5a15e0 0x7873b95aa0
	bool IsExtrapolatingFrames();// 0xa5a14f8 0x7873b95b80
	LinearColor GetWireframeOverrideColor();// 0xa5a0e68 0x7873b95c60
	float GetStartTimeOffset();// 0xa5a11a8 0x7873b95d40
	float GetPlaybackSpeed();// 0xa5a1414 0x7873b95e20
	float GetPlaybackDirection();// 0xa5a1098 0x7873b95f00
	bool GetOverrideWireframeColor();// 0xa5a0f48 0x7873b95fe0
	int GetNumberOfFrames();// 0xa5a1030 0x7873b960c0
	float GetMotionVectorScale();// 0xa5a1338 0x7873b961a0
	float GetDuration();// 0xa5a1064 0x7873b96280
	float GetAnimationTime();// 0xa5a10cc 0x7873b96360

--------------------------------
Class: GeometryCacheCodecV1.GeometryCacheCodecBase.Object

--------------------------------
Class: GeometryCacheCodecBase.Object
	int[] TopologyRanges;//[Offset: 0x28, Size: 0x10] 0x7873bb1aa0

--------------------------------
Class: GeometryCacheTrackStreamable.GeometryCacheTrack.Object
	GeometryCacheCodecBase* Codec;//[Offset: 0x58, Size: 0x8] 0x7873bc7900
	float StartSampleTime;//[Offset: 0xc8, Size: 0x4] 0x7873bc7980

--------------------------------
Class: NiagaraGeometryCacheRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraGeometryCacheReference[] GeometryCaches;//[Offset: 0xd0, Size: 0x10] 0x7873bb1a00
	bool bIsLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x7873bc9380
	uint32 ComponentCountLimit;//[Offset: 0xe4, Size: 0x4] 0x7873bc9400
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0xe8, Size: 0x58] 0x7873bc9480
	NiagaraVariableAttributeBinding RotationBinding;//[Offset: 0x140, Size: 0x58] 0x7873bc7400
	NiagaraVariableAttributeBinding ScaleBinding;//[Offset: 0x198, Size: 0x58] 0x7873bc7480
	NiagaraVariableAttributeBinding ElapsedTimeBinding;//[Offset: 0x1f0, Size: 0x58] 0x7873bc7500
	NiagaraVariableAttributeBinding EnabledBinding;//[Offset: 0x248, Size: 0x58] 0x7873bc7580
	NiagaraVariableAttributeBinding ArrayIndexBinding;//[Offset: 0x2a0, Size: 0x58] 0x7873bc7600
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x2f8, Size: 0x58] 0x7873bc7680
	int RendererVisibility;//[Offset: 0x350, Size: 0x4] 0x7873bc7700
	bool bAssignComponentsOnParticleID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 0x1] 0x7873bc7780

--------------------------------
Class: NiagaraGeometryCacheReference
	GeometryCache* GeometryCache;//[Offset: 0x0, Size: 0x8] 0x78738ff700
	NiagaraUserParameterBinding GeometryCacheUserParamBinding;//[Offset: 0x8, Size: 0x20] 0x78738ff780
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x28, Size: 0x10] 0x78737422c0

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0xf696230 0x7873b97da0
	void SetMediaOptionString(out const FName Key, FString Value);// 0xf695e3c 0x7873b97e80
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0xf695f40 0x7873b97f60
	void SetMediaOptionFloat(out const FName Key, float Value);// 0xf696038 0x7873b98040
	void SetMediaOptionBool(out const FName Key, bool Value);// 0xf696130 0x7873b98120
	FString GetUrl();// 0xf696270 0x7873b98200

--------------------------------
Class: ImgMediaPlaybackComponent.ActorComponent.Object
	float Width;//[Offset: 0xb0, Size: 0x4] 0x7873bca500
	float LODBias;//[Offset: 0xb4, Size: 0x4] 0x7873bc8480

--------------------------------
Class: MovieSceneMediaPlayerPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: UdpMessagingSettings.Object
	bool EnabledByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873bcb080
	bool EnableTransport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7873bcb100
	bool bAutoRepair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x7873bcb180
	float MaxSendRate;//[Offset: 0x2c, Size: 0x4] 0x7873bcb200
	uint32 AutoRepairAttemptLimit;//[Offset: 0x30, Size: 0x4] 0x7873bcb280
	bool bStopServiceWhenAppDeactivates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x7873bcb300
	FString UnicastEndpoint;//[Offset: 0x38, Size: 0x10] 0x7873bcb380
	FString MulticastEndpoint;//[Offset: 0x48, Size: 0x10] 0x7873bcb400
	enum MessageFormat;//[Offset: 0x58, Size: 0x1] 0x7873bb1500
	byte MulticastTimeToLive;//[Offset: 0x59, Size: 0x1] 0x7873bcb500
	FString[] StaticEndpoints;//[Offset: 0x60, Size: 0x10] 0x7873bb15a0
	bool EnableTunnel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7873bc9500
	FString TunnelUnicastEndpoint;//[Offset: 0x78, Size: 0x10] 0x7873bc9580
	FString TunnelMulticastEndpoint;//[Offset: 0x88, Size: 0x10] 0x7873bc9600
	FString[] RemoteTunnelEndpoints;//[Offset: 0x98, Size: 0x10] 0x7873bb1640

--------------------------------
Class: TurnBasedMatchInterface.Interface.Object
	void OnMatchReceivedTurn(FString Match, bool bDidBecomeActive);// 0xb8f1ab4 0x7873b974e0
	void OnMatchEnded(FString Match);// 0xb8f1ab4 0x7873b975c0

--------------------------------
Class: AchievementBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void GetCachedAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out float Progress);// 0xab02ed8 0x7873b9aa40
	static void GetCachedAchievementDescription(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out FText Title, out FText LockedDescription, out FText UnlockedDescription, out bool bHidden);// 0xab02ad8 0x7873b9ab20

--------------------------------
Class: ConnectionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7873bcb800
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7873bcb880
	static ConnectionCallbackProxy* ConnectToService(Object* WorldContextObject, PlayerController* PlayerController);// 0xab042c8 0x7873b9a6c0

--------------------------------
Class: EndMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7873bcce80
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7873bccf00
	static EndMatchCallbackProxy* EndMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, FString MatchID, byte LocalPlayerOutcome, byte OtherPlayersOutcome);// 0xab05374 0x7873b9a420

--------------------------------
Class: FindTurnBasedMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7873bcdf80
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7873bce000
	static FindTurnBasedMatchCallbackProxy* FindTurnBasedMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, int MinPlayers, int MaxPlayers, int PlayerGroup, bool ShowExistingMatches);// 0xab07234 0x7873b99e00

--------------------------------
Class: InAppPurchaseQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7873bcf700
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7873bcf780
	static InAppPurchaseQueryCallbackProxy* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0xab08bdc 0x7873b999a0

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7873bcef80
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7873bcf000
	static InAppPurchaseRestoreCallbackProxy2* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest2[] ConsumableProductFlags, PlayerController* PlayerController);// 0xab0d1e8 0x7873b99700

--------------------------------
Class: InAppPurchaseProductRequest2
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10] 0x78738ff900
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78738ff980

--------------------------------
Class: JoinSessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7873be0280
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7873be0300
	static JoinSessionCallbackProxy* JoinSession(Object* WorldContextObject, PlayerController* PlayerController, out const BlueprintSessionResult SearchResult);// 0xab0df08 0x7873b99620

--------------------------------
Class: BlueprintSessionResult

--------------------------------
Class: LeaderboardQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7873be1c80
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7873be1d00
	static LeaderboardQueryCallbackProxy* CreateProxyObjectForIntQuery(PlayerController* PlayerController, FName StatName);// 0xab0f1dc 0x7873b99380

--------------------------------
Class: OnlineBeaconClient.OnlineBeacon.Actor.Object
	OnlineBeaconHostObject* BeaconOwner;//[Offset: 0x2b8, Size: 0x8] 0x7873be1700
	NetConnection* BeaconConnection;//[Offset: 0x2c0, Size: 0x8] 0x7873be1780
	enum ConnectionState;//[Offset: 0x2c8, Size: 0x1] 0x7873bb31c0
	void ClientOnConnected();// 0xab10114 0x7873b991c0

--------------------------------
Class: OnlineBeacon.Actor.Object
	float BeaconConnectionInitialTimeout;//[Offset: 0x290, Size: 0x4] 0x7873be1880
	float BeaconConnectionTimeout;//[Offset: 0x294, Size: 0x4] 0x7873be1900
	NetDriver* NetDriver;//[Offset: 0x298, Size: 0x8] 0x7873be1980

--------------------------------
Class: OnlineBeaconHostObject.Actor.Object
	FString BeaconTypeName;//[Offset: 0x288, Size: 0x10] 0x7873be1400
	class OnlineBeaconClient* ClientBeaconActorClass;//[Offset: 0x298, Size: 0x8] 0x7873bb2fe0
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x2a0, Size: 0x10] 0x7873bb3080

--------------------------------
Class: OnlineEngineInterfaceImpl.OnlineEngineInterface.Object
	<FName,FName> MappedUniqueNetIdTypes;//[Offset: 0x28, Size: 0x50] 0x787386bec0
	FName[] CompatibleUniqueNetIdTypes;//[Offset: 0x78, Size: 0x10] 0x7873bb2f40
	FName VoiceSubsystemNameOverride;//[Offset: 0x88, Size: 0x8] 0x7873be1380

--------------------------------
Class: OnlineEngineInterface.Object

--------------------------------
Class: OnlineSessionClient.OnlineSession.Object
	bool bIsFromInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1] 0x7873be3100
	bool bHandlingDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 0x1] 0x7873be3180

--------------------------------
Class: PartyBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 0x8] 0x7873be4100
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4] 0x7873be4180
	int MaxReservations;//[Offset: 0x34, Size: 0x4] 0x7873be4200
	int NumTeams;//[Offset: 0x38, Size: 0x4] 0x7873be2180
	int NumPlayersPerTeam;//[Offset: 0x3c, Size: 0x4] 0x7873be2200
	FName TeamAssignmentMethod;//[Offset: 0x40, Size: 0x8] 0x7873be2280
	int ReservedHostTeamNum;//[Offset: 0x48, Size: 0x4] 0x7873be2300
	int ForceTeamNum;//[Offset: 0x4c, Size: 0x4] 0x7873be2380
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7873be2400
	FString[] PlatformCrossplayRestrictions;//[Offset: 0x58, Size: 0x10] 0x7873bb2c20
	PartyBeaconCrossplayPlatformMapping[] PlatformTypeMapping;//[Offset: 0x68, Size: 0x10] 0x7873bb2cc0
	bool bEnableRemovalRequests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x7873be2580
	PartyReservation[] Reservations;//[Offset: 0x80, Size: 0x10] 0x7873bb2d60

--------------------------------
Class: PartyBeaconCrossplayPlatformMapping
	FString PlatformName;//[Offset: 0x0, Size: 0x10] 0x7873910380
	FString PlatformType;//[Offset: 0x10, Size: 0x10] 0x7873910400

--------------------------------
Class: PartyReservation
	int TeamNum;//[Offset: 0x0, Size: 0x4] 0x7873910480
	UniqueNetIdRepl PartyLeader;//[Offset: 0x8, Size: 0x30] 0x7873910500
	PlayerReservation[] PartyMembers;//[Offset: 0x38, Size: 0x10] 0x7873742860
	PlayerReservation[] RemovedPartyMembers;//[Offset: 0x48, Size: 0x10] 0x78737427c0

--------------------------------
Class: PlayerReservation
	UniqueNetIdRepl UniqueId;//[Offset: 0x0, Size: 0x30] 0x7873910900
	FString ValidationStr;//[Offset: 0x30, Size: 0x10] 0x7873910980
	FString Platform;//[Offset: 0x40, Size: 0x10] 0x7873910a00
	bool bAllowCrossplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7873910a80
	float ElapsedTime;//[Offset: 0x54, Size: 0x4] 0x7873910b00

--------------------------------
Class: SpectatorBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	FString DestSessionId;//[Offset: 0x348, Size: 0x10] 0x7873be3500
	SpectatorReservation PendingReservation;//[Offset: 0x358, Size: 0x88] 0x7873be3580
	enum RequestType;//[Offset: 0x3e0, Size: 0x1] 0x7873bb2b80
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 0x1] 0x7873be3680
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 0x1] 0x7873be3700
	void ServerReservationRequest(FString SessionId, const SpectatorReservation Reservation);// 0xab17954 0x7873b9bca0
	void ServerCancelReservationRequest(const UniqueNetIdRepl Spectator);// 0xab17810 0x7873b9bd80
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0xab17ae0 0x7873b9be60
	void ClientSendReservationFull();// 0xab17ac4 0x7873b9bf40
	void ClientReservationResponse(byte ReservationResponse);// 0xab17c40 0x7873b9c020
	void ClientCancelReservationResponse(byte ReservationResponse);// 0xab17b90 0x7873b9c100

--------------------------------
Class: SpectatorReservation
	UniqueNetIdRepl SpectatorId;//[Offset: 0x0, Size: 0x30] 0x7873910280
	PlayerReservation Spectator;//[Offset: 0x30, Size: 0x58] 0x7873910300

--------------------------------
Class: TestBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	void ServerPong();// 0xab190c4 0x7873b9bae0
	void ClientPing();// 0xab19120 0x7873b9bbc0

--------------------------------
Class: SynthComponent.SceneComponent.ActorComponent.Object
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1] 0x7873be5b00
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1] 0x7873be5b80
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1] 0x7873be5c00
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b0, Size: 0x1] 0x7873be5c80
	bool bEnableBusSends;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b0, Size: 0x1] 0x7873be5d00
	bool bEnableBaseSubmix;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b0, Size: 0x1] 0x7873be5d80
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b0, Size: 0x1] 0x7873be5e00
	SoundAttenuation* AttenuationSettings;//[Offset: 0x2b8, Size: 0x8] 0x7873be5e80
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x2c0, Size: 0x3c8] 0x7873be5f00
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x688, Size: 0x8] 0x7873be5f80
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x690, Size: 0x50] 0x7873bb51a0
	SoundClass* SoundClass;//[Offset: 0x6e0, Size: 0x8] 0x7873be6080
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x6e8, Size: 0x8] 0x7873be6100
	SoundSubmixBase* SoundSubmix;//[Offset: 0x6f0, Size: 0x8] 0x7873be6180
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x6f8, Size: 0x10] 0x7873bb5240
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x708, Size: 0x10] 0x7873bb29a0
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x718, Size: 0x10] 0x7873bb2a40
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x728, Size: 0x1] 0x7873be4280
	bool bIsPreviewSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x728, Size: 0x1] 0x7873be4300
	int EnvelopeFollowerAttackTime;//[Offset: 0x72c, Size: 0x4] 0x7873be4380
	int EnvelopeFollowerReleaseTime;//[Offset: 0x730, Size: 0x4] 0x7873be4400
	delegate OnAudioEnvelopeValue;//[Offset: 0x738, Size: 0x10] 0x7873be4480
	SynthSound* Synth;//[Offset: 0x768, Size: 0x8] 0x7873be4500
	AudioComponent* AudioComponent;//[Offset: 0x770, Size: 0x8] 0x7873be4580
	void Stop();// 0xf3ea828 0x7873b9b060
	void Start();// 0xf3ea83c 0x7873b9b140
	void SetVolumeMultiplier(float VolumeMultiplier);// 0xf3ea748 0x7873b9b220
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0xf3ea654 0x7873b9b300
	void SetOutputToBusOnly(bool bInOutputToBusOnly);// 0xf3ea444 0x7873b9b3e0
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0xf3ea4f4 0x7873b9b4c0
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0xf3ea5a4 0x7873b9b5a0
	bool IsPlaying();// 0xf3ea7f0 0x7873b9b680

--------------------------------
Class: SynthSound.SoundWaveProcedural.SoundWave.SoundBase.Object
	SynthComponent* OwningSynthComponent;//[Offset: 0x390, Size: 0x8] 0x7873d72080

--------------------------------
Class: SoundWaveProcedural.SoundWave.SoundBase.Object

--------------------------------
Class: AndroidFileServerBPLibrary.BlueprintFunctionLibrary.Object
	static bool StopFileServer(bool bUSB, bool bNetwork);// 0xabe1d68 0x7873b9e400
	static bool StartFileServer(bool bUSB, bool bNetwork, int Port);// 0xabe1e64 0x7873b9e4e0
	static byte IsFileServerRunning();// 0xabe1d34 0x7873b9e5c0

--------------------------------
Class: ArchVisCharacter.Character.Pawn.Actor.Object
	FString LookUpAxisName;//[Offset: 0x608, Size: 0x10] 0x7873be8280
	FString LookUpAtRateAxisName;//[Offset: 0x618, Size: 0x10] 0x7873be8300
	FString TurnAxisName;//[Offset: 0x628, Size: 0x10] 0x7873be8380
	FString TurnAtRateAxisName;//[Offset: 0x638, Size: 0x10] 0x7873be8400
	FString MoveForwardAxisName;//[Offset: 0x648, Size: 0x10] 0x7873be6380
	FString MoveRightAxisName;//[Offset: 0x658, Size: 0x10] 0x7873be6400
	float MouseSensitivityScale_Pitch;//[Offset: 0x668, Size: 0x4] 0x7873be6480
	float MouseSensitivityScale_Yaw;//[Offset: 0x66c, Size: 0x4] 0x7873be6500

--------------------------------
Class: ArchVisCharMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationalAcceleration;//[Offset: 0xf08, Size: 0x18] 0x7873bef380
	Rotator RotationalDeceleration;//[Offset: 0xf20, Size: 0x18] 0x7873bef400
	Rotator MaxRotationalVelocity;//[Offset: 0xf38, Size: 0x18] 0x7873bef480
	float MinPitch;//[Offset: 0xf50, Size: 0x4] 0x7873bef500
	float MaxPitch;//[Offset: 0xf54, Size: 0x4] 0x7873bef580
	float WalkingFriction;//[Offset: 0xf58, Size: 0x4] 0x7873bef600
	float WalkingSpeed;//[Offset: 0xf5c, Size: 0x4] 0x7873bef680
	float WalkingAcceleration;//[Offset: 0xf60, Size: 0x4] 0x7873bef700

--------------------------------
Class: AudioGenerator.Object

--------------------------------
Class: AudioCaptureBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void GetAvailableAudioInputDevices(const Object* WorldContextObject, out const delegate OnObtainDevicesEvent);// 0xabf48ec 0x7873c012e0
	static FString Conv_AudioInputDeviceInfoToString(out const AudioInputDeviceInfo Info);// 0xabf49ec 0x7873c013c0

--------------------------------
Class: AudioInputDeviceInfo
	FString DeviceName;//[Offset: 0x0, Size: 0x10] 0x7873912000
	FString DeviceID;//[Offset: 0x10, Size: 0x10] 0x7873912080
	int InputChannels;//[Offset: 0x20, Size: 0x4] 0x7873912100
	int PreferredSampleRate;//[Offset: 0x24, Size: 0x4] 0x7873910080
	bool bSupportsHardwareAEC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7873910100

--------------------------------
Class: CableComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAttachStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569, Size: 0x1] 0x7873c10c80
	bool bAttachEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56a, Size: 0x1] 0x7873c10d00
	ComponentReference AttachEndTo;//[Offset: 0x570, Size: 0x28] 0x7873c10d80
	FName AttachEndToSocketName;//[Offset: 0x598, Size: 0x8] 0x7873c10e00
	Vector EndLocation;//[Offset: 0x5a0, Size: 0x18] 0x7873c10e80
	float CableLength;//[Offset: 0x5b8, Size: 0x4] 0x7873c10f00
	int NumSegments;//[Offset: 0x5bc, Size: 0x4] 0x7873c10f80
	float SubstepTime;//[Offset: 0x5c0, Size: 0x4] 0x7873c11000
	int SolverIterations;//[Offset: 0x5c4, Size: 0x4] 0x7873c11080
	bool bEnableStiffness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1] 0x7873bef800
	bool bUseSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 0x1] 0x7873bef880
	bool bSkipCableUpdateWhenNotVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ca, Size: 0x1] 0x7873bef900
	bool bSkipCableUpdateWhenNotOwnerRecentlyRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cb, Size: 0x1] 0x7873bef980
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 0x1] 0x7873befa00
	float CollisionFriction;//[Offset: 0x5d0, Size: 0x4] 0x7873befa80
	Vector CableForce;//[Offset: 0x5d8, Size: 0x18] 0x7873befb00
	float CableGravityScale;//[Offset: 0x5f0, Size: 0x4] 0x7873befb80
	float CableWidth;//[Offset: 0x5f4, Size: 0x4] 0x7873befc00
	int NumSides;//[Offset: 0x5f8, Size: 0x4] 0x7873befc80
	float TileMaterial;//[Offset: 0x5fc, Size: 0x4] 0x7873befd00
	void SetAttachEndToComponent(SceneComponent* Component, FName SocketName);// 0xabfe5bc 0x7873c00e80
	void SetAttachEndTo(Actor* Actor, FName ComponentProperty, FName SocketName);// 0xabfe480 0x7873c00f60
	void GetCableParticleLocations(out Vector[] Locations);// 0xabfe358 0x7873c01040
	SceneComponent* GetAttachedComponent();// 0xabfe418 0x7873c01120
	Actor* GetAttachedActor();// 0xabfe44c 0x7873c01200

--------------------------------
Class: GooglePADFunctionLibrary.BlueprintFunctionLibrary.Object
	static enum ShowCellularDataConfirmation();// 0xac28d00 0x7873c03880
	static enum RequestRemoval(FString Name);// 0xac28d34 0x7873c03960
	static enum RequestInfo(const FString[] AssetPacks);// 0xac294ec 0x7873c00080
	static enum RequestDownload(const FString[] AssetPacks);// 0xac29338 0x7873c00160
	static void ReleaseDownloadState(const int State);// 0xac28fe0 0x7873c00240
	static void ReleaseAssetPackLocation(const int Location);// 0xac28aa8 0x7873c00320
	static int GetTotalBytesToDownload(const int State);// 0xac28de8 0x7873c00400
	static enum GetStorageMethod(const int Location);// 0xac28a00 0x7873c004e0
	static enum GetShowCellularDataConfirmationStatus(out enum Status);// 0xac28c4c 0x7873c005c0
	static enum GetDownloadStatus(const int State);// 0xac28f38 0x7873c006a0
	static enum GetDownloadState(FString Name, out int State);// 0xac29078 0x7873c00780
	static int GetBytesDownloaded(const int State);// 0xac28e90 0x7873c00860
	static FString GetAssetsPath(const int Location);// 0xac2890c 0x7873c00940
	static enum GetAssetPackLocation(FString Name, out int Location);// 0xac28b40 0x7873c00a20
	static enum CancelDownload(const FString[] AssetPacks);// 0xac29184 0x7873c00b00

--------------------------------
Class: MobileInstalledContent.Object
	bool Mount(int PakOrder, FString MountPoint);// 0xac318d4 0x7873c02c40
	float GetInstalledContentSize();// 0xac319e0 0x7873c02d20
	float GetDiskFreeSpace();// 0xac31a14 0x7873c02e00

--------------------------------
Class: ResonanceAudioDirectivityVisualizer.Actor.Object
	Material* Material;//[Offset: 0x2f8, Size: 0x8] 0x7873c12800
	ResonanceAudioSpatializationSourceSettings* Settings;//[Offset: 0x300, Size: 0x8] 0x7873c12880

--------------------------------
Class: ResonanceAudioSpatializationSourceSettings.SpatializationPluginSourceSettingsBase.Object
	enum SpatializationMethod;//[Offset: 0x28, Size: 0x1] 0x7873bb63c0
	float Pattern;//[Offset: 0x2c, Size: 0x4] 0x7873c13c80
	float Sharpness;//[Offset: 0x30, Size: 0x4] 0x7873c13d00
	bool bToggleVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x7873c13d80
	float Scale;//[Offset: 0x38, Size: 0x4] 0x7873c13e00
	float Spread;//[Offset: 0x3c, Size: 0x4] 0x7873c13e80
	enum Rolloff;//[Offset: 0x40, Size: 0x1] 0x7873bb6460
	float MinDistance;//[Offset: 0x44, Size: 0x4] 0x7873c13f80
	float MaxDistance;//[Offset: 0x48, Size: 0x4] 0x7873c14000
	void SetSoundSourceSpread(float InSpread);// 0xac4edc0 0x7873c05020
	void SetSoundSourceDirectivity(float InPattern, float InSharpness);// 0xac4ee68 0x7873c05100

--------------------------------
Class: ResonanceAudioSettings.Object
	SoftObjectPath OutputSubmix;//[Offset: 0x28, Size: 0x18] 0x7873c14200
	enum QualityMode;//[Offset: 0x40, Size: 0x1] 0x7873bb6500
	SoftObjectPath GlobalReverbPreset;//[Offset: 0x48, Size: 0x18] 0x7873c12200
	SoftObjectPath GlobalSourcePreset;//[Offset: 0x60, Size: 0x18] 0x7873c12280

--------------------------------
Class: AmbisonicsEncodingSettings.SoundfieldEncodingSettingsBase.Object
	int AmbisonicsOrder;//[Offset: 0x28, Size: 0x4] 0x7873c13b80

--------------------------------
Class: ModularSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object
	int VoiceCount;//[Offset: 0x7a0, Size: 0x4] 0x7873c17280
	void SetSynthPreset(out const ModularSynthPreset SynthPreset);// 0xacefb68 0x7873c08f20
	void SetSustainGain(float SustainGain);// 0xacf0fdc 0x7873c09000
	void SetStereoDelayWetlevel(float DelayWetlevel);// 0xacf009c 0x7873c05720
	void SetStereoDelayTime(float DelayTimeMsec);// 0xacf01ec 0x7873c05800
	void SetStereoDelayRatio(float DelayRatio);// 0xacefff4 0x7873c058e0
	void SetStereoDelayMode(enum StereoDelayMode);// 0xacf0294 0x7873c059c0
	void SetStereoDelayIsEnabled(bool StereoDelayEnabled);// 0xacf033c 0x7873c05aa0
	void SetStereoDelayFeedback(float DelayFeedback);// 0xacf0144 0x7873c05b80
	void SetSpread(float Spread);// 0xacf1928 0x7873c05c60
	void SetReleaseTime(float ReleaseTimeMsec);// 0xacf0f34 0x7873c05d40
	void SetPortamento(float Portamento);// 0xacf1ccc 0x7873c05e20
	void SetPitchBend(float PitchBend);// 0xacf1d74 0x7873c05f00
	void SetPan(float Pan);// 0xacf19d0 0x7873c05fe0
	void SetOscType(int OscIndex, enum OscType);// 0xacf20f8 0x7873c060c0
	void SetOscSync(const bool bIsSynced);// 0xacf1a78 0x7873c061a0
	void SetOscSemitones(int OscIndex, float Semitones);// 0xacf1f10 0x7873c06280
	void SetOscPulsewidth(int OscIndex, float Pulsewidth);// 0xacf1bd8 0x7873c06360
	void SetOscOctave(int OscIndex, float Octave);// 0xacf2004 0x7873c06440
	void SetOscGainMod(int OscIndex, float OscGainMod);// 0xacf22e0 0x7873c06520
	void SetOscGain(int OscIndex, float OscGain);// 0xacf23d4 0x7873c06600
	void SetOscFrequencyMod(int OscIndex, float OscFreqMod);// 0xacf21ec 0x7873c066e0
	void SetOscCents(int OscIndex, float Cents);// 0xacf1e1c 0x7873c067c0
	void SetModEnvSustainGain(const float SustainGain);// 0xacf09e4 0x7873c068a0
	void SetModEnvReleaseTime(const float Release);// 0xacf093c 0x7873c06980
	void SetModEnvPatch(const enum InPatchType);// 0xacf0e8c 0x7873c06a60
	void SetModEnvInvert(const bool bInvert);// 0xacf0d34 0x7873c06b40
	void SetModEnvDepth(const float Depth);// 0xacf0bdc 0x7873c06c20
	void SetModEnvDecayTime(const float DecayTimeMsec);// 0xacf0a8c 0x7873c06d00
	void SetModEnvBiasPatch(const enum InPatchType);// 0xacf0de4 0x7873c06de0
	void SetModEnvBiasInvert(const bool bInvert);// 0xacf0c84 0x7873c06ec0
	void SetModEnvAttackTime(const float AttackTimeMsec);// 0xacf0b34 0x7873c06fa0
	void SetLFOType(int LFOIndex, enum LFOType);// 0xacf1464 0x7873c07080
	void SetLFOPatch(int LFOIndex, enum LFOPatchType);// 0xacf127c 0x7873c07160
	void SetLFOMode(int LFOIndex, enum LFOMode);// 0xacf1370 0x7873c07240
	void SetLFOGainMod(int LFOIndex, float GainMod);// 0xacf1558 0x7873c07320
	void SetLFOGain(int LFOIndex, float Gain);// 0xacf164c 0x7873c03a40
	void SetLFOFrequencyMod(int LFOIndex, float FrequencyModHz);// 0xacf1740 0x7873c03b20
	void SetLFOFrequency(int LFOIndex, float FrequencyHz);// 0xacf1834 0x7873c03c00
	void SetGainDb(float GainDb);// 0xacf11d4 0x7873c03ce0
	void SetFilterType(enum FilterType);// 0xacf0494 0x7873c03dc0
	void SetFilterQMod(float FilterQ);// 0xacf053c 0x7873c03ea0
	void SetFilterQ(float FilterQ);// 0xacf05e4 0x7873c03f80
	void SetFilterFrequencyMod(float FilterFrequencyHz);// 0xacf068c 0x7873c04060
	void SetFilterFrequency(float FilterFrequencyHz);// 0xacf0734 0x7873c04140
	void SetFilterAlgorithm(enum FilterAlgorithm);// 0xacf03ec 0x7873c04220
	void SetEnableUnison(bool EnableUnison);// 0xacf1b28 0x7873c04300
	void SetEnableRetrigger(bool RetriggerEnabled);// 0xacf07dc 0x7873c043e0
	void SetEnablePolyphony(bool bEnablePolyphony);// 0xacf24c8 0x7873c044c0
	bool SetEnablePatch(const PatchId PatchId, const bool bIsEnabled);// 0xacef8f8 0x7873c045a0
	void SetEnableLegato(bool LegatoEnabled);// 0xacf088c 0x7873c04680
	void SetDecayTime(float DecayTimeMsec);// 0xacf1084 0x7873c04760
	void SetChorusFrequency(float Frequency);// 0xacefd4c 0x7873c04840
	void SetChorusFeedback(float Feedback);// 0xacefdf4 0x7873c04920
	void SetChorusEnabled(bool EnableChorus);// 0xaceff44 0x7873c04a00
	void SetChorusDepth(float Depth);// 0xacefe9c 0x7873c04ae0
	void SetAttackTime(float AttackTimeMsec);// 0xacf112c 0x7873c04bc0
	void NoteOn(const float Note, const int Velocity, const float Duration);// 0xacf26bc 0x7873c04ca0
	void NoteOff(const float Note, const bool bAllNotesOff, const bool bKillAllNotes);// 0xacf2578 0x7873c04d80
	PatchId CreatePatch(const enum PatchSource, out const Synth1PatchCable[] PatchCables, const bool bEnableByDefault);// 0xacefa00 0x7873c04e60

--------------------------------
Class: ModularSynthPreset.TableRowBase
	bool bEnablePolyphony;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7873913800
	enum Osc1Type;//[Offset: 0x9, Size: 0x1] 0x7873743760
	float Osc1Gain;//[Offset: 0xc, Size: 0x4] 0x7873913900
	float Osc1Octave;//[Offset: 0x10, Size: 0x4] 0x7873913980
	float Osc1Semitones;//[Offset: 0x14, Size: 0x4] 0x7873913a00
	float Osc1Cents;//[Offset: 0x18, Size: 0x4] 0x7873913a80
	float Osc1PulseWidth;//[Offset: 0x1c, Size: 0x4] 0x7873913b00
	enum Osc2Type;//[Offset: 0x20, Size: 0x1] 0x78737436c0
	float Osc2Gain;//[Offset: 0x24, Size: 0x4] 0x7873913c00
	float Osc2Octave;//[Offset: 0x28, Size: 0x4] 0x7873913c80
	float Osc2Semitones;//[Offset: 0x2c, Size: 0x4] 0x7873913d00
	float Osc2Cents;//[Offset: 0x30, Size: 0x4] 0x7873913d80
	float Osc2PulseWidth;//[Offset: 0x34, Size: 0x4] 0x7873913e00
	float Portamento;//[Offset: 0x38, Size: 0x4] 0x7873913e80
	bool bEnableUnison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7873913f00
	bool bEnableOscillatorSync;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7873913f80
	float Spread;//[Offset: 0x40, Size: 0x4] 0x7873914000
	float Pan;//[Offset: 0x44, Size: 0x4] 0x7873914080
	float LFO1Frequency;//[Offset: 0x48, Size: 0x4] 0x7873914100
	float LFO1Gain;//[Offset: 0x4c, Size: 0x4] 0x7873914180
	enum LFO1Type;//[Offset: 0x50, Size: 0x1] 0x7873743620
	enum LFO1Mode;//[Offset: 0x51, Size: 0x1] 0x7873743580
	enum LFO1PatchType;//[Offset: 0x52, Size: 0x1] 0x78737434e0
	float LFO2Frequency;//[Offset: 0x54, Size: 0x4] 0x7873912280
	float LFO2Gain;//[Offset: 0x58, Size: 0x4] 0x7873912300
	enum LFO2Type;//[Offset: 0x5c, Size: 0x1] 0x7873743440
	enum LFO2Mode;//[Offset: 0x5d, Size: 0x1] 0x78737433a0
	enum LFO2PatchType;//[Offset: 0x5e, Size: 0x1] 0x7873743300
	float GainDb;//[Offset: 0x60, Size: 0x4] 0x7873912500
	float AttackTime;//[Offset: 0x64, Size: 0x4] 0x7873912580
	float DecayTime;//[Offset: 0x68, Size: 0x4] 0x7873912600
	float SustainGain;//[Offset: 0x6c, Size: 0x4] 0x7873912680
	float ReleaseTime;//[Offset: 0x70, Size: 0x4] 0x7873912700
	enum ModEnvPatchType;//[Offset: 0x74, Size: 0x1] 0x7873741460
	enum ModEnvBiasPatchType;//[Offset: 0x75, Size: 0x1] 0x78737413c0
	bool bInvertModulationEnvelope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76, Size: 0x1] 0x7873912880
	bool bInvertModulationEnvelopeBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76, Size: 0x1] 0x7873912900
	float ModulationEnvelopeDepth;//[Offset: 0x78, Size: 0x4] 0x7873912980
	float ModulationEnvelopeAttackTime;//[Offset: 0x7c, Size: 0x4] 0x7873912a00
	float ModulationEnvelopeDecayTime;//[Offset: 0x80, Size: 0x4] 0x7873912a80
	float ModulationEnvelopeSustainGain;//[Offset: 0x84, Size: 0x4] 0x7873912b00
	float ModulationEnvelopeReleaseTime;//[Offset: 0x88, Size: 0x4] 0x7873912b80
	bool bLegato;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x7873912c00
	bool bRetrigger;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x7873912c80
	float FilterFrequency;//[Offset: 0x90, Size: 0x4] 0x7873912d00
	float FilterQ;//[Offset: 0x94, Size: 0x4] 0x7873912d80
	enum FilterType;//[Offset: 0x98, Size: 0x1] 0x7873741320
	enum FilterAlgorithm;//[Offset: 0x99, Size: 0x1] 0x7873741280
	bool bStereoDelayEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a, Size: 0x1] 0x7873912f00
	enum StereoDelayMode;//[Offset: 0x9b, Size: 0x1] 0x78737411e0
	float StereoDelayTime;//[Offset: 0x9c, Size: 0x4] 0x7873913000
	float StereoDelayFeedback;//[Offset: 0xa0, Size: 0x4] 0x7873913080
	float StereoDelayWetlevel;//[Offset: 0xa4, Size: 0x4] 0x7873913100
	float StereoDelayRatio;//[Offset: 0xa8, Size: 0x4] 0x7873913180
	bool bChorusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x7873911100
	float ChorusDepth;//[Offset: 0xb0, Size: 0x4] 0x7873911180
	float ChorusFeedback;//[Offset: 0xb4, Size: 0x4] 0x7873911200
	float ChorusFrequency;//[Offset: 0xb8, Size: 0x4] 0x7873911280
	EpicSynth1Patch[] Patches;//[Offset: 0xc0, Size: 0x10] 0x7873741140

--------------------------------
Class: TableRowBase

--------------------------------
Class: EpicSynth1Patch
	enum PatchSource;//[Offset: 0x0, Size: 0x1] 0x78737410a0
	Synth1PatchCable[] PatchCables;//[Offset: 0x8, Size: 0x10] 0x7873740f60

--------------------------------
Class: Synth1PatchCable
	float Depth;//[Offset: 0x0, Size: 0x4] 0x7873911400
	enum Destination;//[Offset: 0x4, Size: 0x1] 0x7873741000

--------------------------------
Class: PatchId
	int ID;//[Offset: 0x0, Size: 0x4] 0x7873913680

--------------------------------
Class: SourceEffectDynamicsProcessorPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectDynamicsProcessorSettings Settings;//[Offset: 0xb4, Size: 0x28] 0x7873c16680
	void SetSettings(out const SourceEffectDynamicsProcessorSettings InSettings);// 0xacf92a4 0x7873c07cc0

--------------------------------
Class: SourceEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x78737438a0
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x7873743800
	float LookAheadMsec;//[Offset: 0x4, Size: 0x4] 0x7873914580
	float AttackTimeMsec;//[Offset: 0x8, Size: 0x4] 0x7873914600
	float ReleaseTimeMsec;//[Offset: 0xc, Size: 0x4] 0x7873914680
	float ThresholdDb;//[Offset: 0x10, Size: 0x4] 0x7873914700
	float Ratio;//[Offset: 0x14, Size: 0x4] 0x7873914780
	float KneeBandwidthDb;//[Offset: 0x18, Size: 0x4] 0x7873914800
	float InputGainDb;//[Offset: 0x1c, Size: 0x4] 0x7873914880
	float OutputGainDb;//[Offset: 0x20, Size: 0x4] 0x7873914900
	bool bStereoLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1] 0x7873914980
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1] 0x7873914a00

--------------------------------
Class: SourceEffectEQPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectEQSettings Settings;//[Offset: 0xa0, Size: 0x10] 0x7873c18400
	void SetSettings(out const SourceEffectEQSettings InSettings);// 0xacfa998 0x7873c07940

--------------------------------
Class: SourceEffectEQSettings
	SourceEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10] 0x78737439e0

--------------------------------
Class: SourceEffectEQBand
	float Frequency;//[Offset: 0x0, Size: 0x4] 0x7873916180
	float Bandwidth;//[Offset: 0x4, Size: 0x4] 0x7873916200
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x7873916280
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7873916300

--------------------------------
Class: SourceEffectMidSideSpreaderPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectMidSideSpreaderSettings Settings;//[Offset: 0x94, Size: 0x8] 0x7873c18100
	void SetSettings(out const SourceEffectMidSideSpreaderSettings InSettings);// 0xacfc400 0x7873c076a0

--------------------------------
Class: SourceEffectMidSideSpreaderSettings
	float SpreadAmount;//[Offset: 0x0, Size: 0x4] 0x7873915680
	enum InputMode;//[Offset: 0x4, Size: 0x1] 0x7873743da0
	enum OutputMode;//[Offset: 0x5, Size: 0x1] 0x7873743d00
	bool bEqualPower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x7873915800

--------------------------------
Class: SourceEffectPhaserPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectPhaserSettings Settings;//[Offset: 0x9c, Size: 0x10] 0x7873c17e00
	void SetSettings(out const SourceEffectPhaserSettings InSettings);// 0xad061e8 0x7873c07400

--------------------------------
Class: SourceEffectPhaserSettings
	float WetLevel;//[Offset: 0x0, Size: 0x4] 0x7873916c00
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7873916c80
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x7873916d00
	enum LFOType;//[Offset: 0xc, Size: 0x1] 0x78737409c0
	bool UseQuadraturePhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x7873916e00

--------------------------------
Class: SourceEffectStereoDelayPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectStereoDelaySettings Settings;//[Offset: 0xb0, Size: 0x24] 0x7873c17b00
	void SetSettings(out const SourceEffectStereoDelaySettings InSettings);// 0xad07aac 0x7873c0ab20

--------------------------------
Class: SourceEffectStereoDelaySettings
	enum DelayMode;//[Offset: 0x0, Size: 0x1] 0x7873740ba0
	float DelayTimeMsec;//[Offset: 0x4, Size: 0x4] 0x7873918280
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x7873918300
	float DelayRatio;//[Offset: 0xc, Size: 0x4] 0x7873918380
	float WetLevel;//[Offset: 0x10, Size: 0x4] 0x7873918400
	float DryLevel;//[Offset: 0x14, Size: 0x4] 0x7873916380
	bool bFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7873916400
	enum FilterType;//[Offset: 0x19, Size: 0x1] 0x7873740b00
	float FilterFrequency;//[Offset: 0x1c, Size: 0x4] 0x7873916500
	float FilterQ;//[Offset: 0x20, Size: 0x4] 0x7873916580

--------------------------------
Class: SubmixEffectConvolutionReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	AudioImpulseResponse* ImpulseResponse;//[Offset: 0x68, Size: 0x8] 0x7873c17400
	SubmixEffectConvolutionReverbSettings Settings;//[Offset: 0x70, Size: 0x28] 0x7873c17480
	enum BlockSize;//[Offset: 0x98, Size: 0x1] 0x7873bb5a60
	bool bEnableHardwareAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1] 0x7873c17580
	void SetSettings(out const SubmixEffectConvolutionReverbSettings InSettings);// 0xad08e60 0x7873c0a880
	void SetImpulseResponse(AudioImpulseResponse* InImpulseResponse);// 0xad08db8 0x7873c0a960

--------------------------------
Class: SubmixEffectConvolutionReverbSettings
	float NormalizationVolumeDb;//[Offset: 0x0, Size: 0x4] 0x7873917c00
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7873917c80
	bool bMixInputChannelFormatToImpulseResponseFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7873917d00
	bool bMixReverbOutputToOutputChannelFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x7873917d80
	float SurroundRearChannelBleedDb;//[Offset: 0x8, Size: 0x4] 0x7873917e00
	bool bInvertRearChannelBleedPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7873917e80
	bool bSurroundRearChannelFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x7873917f00
	float SurroundRearChannelBleedAmount;//[Offset: 0x10, Size: 0x4] 0x7873917f80
	AudioImpulseResponse* ImpulseResponse;//[Offset: 0x18, Size: 0x8] 0x7873918000
	bool AllowHArdwareAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7873918080

--------------------------------
Class: AudioImpulseResponse.Object
	float[] ImpulseResponse;//[Offset: 0x28, Size: 0x10] 0x7873bb5b00
	int NumChannels;//[Offset: 0x38, Size: 0x4] 0x7873c17780
	int SampleRate;//[Offset: 0x3c, Size: 0x4] 0x7873c17800
	float NormalizationVolumeDb;//[Offset: 0x40, Size: 0x4] 0x7873c17880
	bool bTrueStereo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7873c17900
	float[] IRData;//[Offset: 0x48, Size: 0x10] 0x7873bb5ba0

--------------------------------
Class: SubmixEffectFilterPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectFilterSettings Settings;//[Offset: 0x98, Size: 0xc] 0x7873c18880
	void SetSettings(out const SubmixEffectFilterSettings InSettings);// 0xad0ae20 0x7873c09b60
	void SetFilterType(enum InType);// 0xad0ad78 0x7873c09c40
	void SetFilterQMod(float InQ);// 0xad0aa30 0x7873c09d20
	void SetFilterQ(float InQ);// 0xad0aad8 0x7873c09e00
	void SetFilterCutoffFrequencyMod(float InFrequency);// 0xad0ab80 0x7873c09ee0
	void SetFilterCutoffFrequency(float InFrequency);// 0xad0ac28 0x7873c09fc0
	void SetFilterAlgorithm(enum InAlgorithm);// 0xad0acd0 0x7873c0a0a0

--------------------------------
Class: SubmixEffectFilterSettings
	enum FilterType;//[Offset: 0x0, Size: 0x1] 0x7873740ce0
	enum FilterAlgorithm;//[Offset: 0x1, Size: 0x1] 0x7873740c40
	float FilterFrequency;//[Offset: 0x4, Size: 0x4] 0x7873917980
	float FilterQ;//[Offset: 0x8, Size: 0x4] 0x7873917a00

--------------------------------
Class: SubmixEffectStereoDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectStereoDelaySettings Settings;//[Offset: 0xb0, Size: 0x24] 0x7873c18480
	void SetSettings(out const SubmixEffectStereoDelaySettings InSettings);// 0xad13280 0x7873c09620

--------------------------------
Class: SubmixEffectStereoDelaySettings
	enum DelayMode;//[Offset: 0x0, Size: 0x1] 0x78736ae0c0
	float DelayTimeMsec;//[Offset: 0x4, Size: 0x4] 0x7873918880
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x7873918900
	float DelayRatio;//[Offset: 0xc, Size: 0x4] 0x7873918980
	float WetLevel;//[Offset: 0x10, Size: 0x4] 0x7873918a00
	float DryLevel;//[Offset: 0x14, Size: 0x4] 0x7873918a80
	bool bFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7873918b00
	enum FilterType;//[Offset: 0x19, Size: 0x1] 0x78736ae020
	float FilterFrequency;//[Offset: 0x1c, Size: 0x4] 0x7873918c00
	float FilterQ;//[Offset: 0x20, Size: 0x4] 0x7873918c80

--------------------------------
Class: MonoWaveTableSynthPreset.Object
	FString PresetName;//[Offset: 0x28, Size: 0x10] 0x7873c1c400
	bool bLockKeyframesToGridBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7873c1c480
	int LockKeyframesToGrid;//[Offset: 0x3c, Size: 0x4] 0x7873c1c500
	int WaveTableResolution;//[Offset: 0x40, Size: 0x4] 0x7873c1c580
	RuntimeFloatCurve[] WaveTable;//[Offset: 0x48, Size: 0x10] 0x7873bb56a0
	bool bNormalizeWaveTables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7873c1a580

--------------------------------
Class: SynthSamplePlayer.SynthComponent.SceneComponent.ActorComponent.Object
	SoundWave* SoundWave;//[Offset: 0x7a0, Size: 0x8] 0x7873c1de00
	delegate OnSampleLoaded;//[Offset: 0x7a8, Size: 0x10] 0x7873c1de80
	delegate OnSamplePlaybackProgress;//[Offset: 0x7b8, Size: 0x10] 0x7873c1df00
	void SetSoundWave(SoundWave* InSoundWave);// 0xad1c86c 0x7873c0f120
	void SetScrubTimeWidth(float InScrubTimeWidthSec);// 0xad1c4dc 0x7873c0f200
	void SetScrubMode(bool bScrubMode);// 0xad1c584 0x7873c0f2e0
	void SetPitch(float InPitch, float TimeSec);// 0xad1c77c 0x7873c0f3c0
	void SeekToTime(float TimeSec, enum SeekType, bool bWrap);// 0xad1c634 0x7873c0f4a0
	bool IsLoaded();// 0xad1c408 0x7873c0f580
	float GetSampleDuration();// 0xad1c4a8 0x7873c0f660
	float GetCurrentPlaybackProgressTime();// 0xad1c474 0x7873c0f740
	float GetCurrentPlaybackProgressPercent();// 0xad1c440 0x7873c0f820

--------------------------------
Class: AudioAnalyzerAssetBase.Object

--------------------------------
Class: AudioAnalyzerNRTSettings.AudioAnalyzerAssetBase.Object

--------------------------------
Class: AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAssetBase.Object

--------------------------------
Class: AudioAnalyzerNRT.AudioAnalyzerAssetBase.Object
	SoundWave* Sound;//[Offset: 0x28, Size: 0x8] 0x7873c1ee00
	float DurationInSeconds;//[Offset: 0x30, Size: 0x4] 0x7873c1ee80

--------------------------------
Class: ConstantQNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAssetBase.Object
	float StartingFrequency;//[Offset: 0x28, Size: 0x4] 0x7873c1e880
	int NumBands;//[Offset: 0x2c, Size: 0x4] 0x7873c1e900
	float NumBandsPerOctave;//[Offset: 0x30, Size: 0x4] 0x7873c1e980
	float AnalysisPeriod;//[Offset: 0x34, Size: 0x4] 0x7873c1ea00
	bool bDownmixToMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7873c1ea80
	enum FFTSize;//[Offset: 0x39, Size: 0x1] 0x7873bb7ae0
	enum WindowType;//[Offset: 0x3a, Size: 0x1] 0x7873bb7b80
	enum SpectrumType;//[Offset: 0x3b, Size: 0x1] 0x7873bb52e0
	float BandWidthStretch;//[Offset: 0x3c, Size: 0x4] 0x7873c1ec80
	enum CQTNormalization;//[Offset: 0x40, Size: 0x1] 0x7873bb5380
	float NoiseFloorDb;//[Offset: 0x44, Size: 0x4] 0x7873c1ed80

--------------------------------
Class: AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAssetBase.Object

--------------------------------
Class: LoudnessAnalyzer.AudioAnalyzer.Object
	LoudnessSettings* Settings;//[Offset: 0x90, Size: 0x8] 0x7873c30e80
	delegate OnOverallLoudnessResults;//[Offset: 0x98, Size: 0x10] 0x7873c30f00
	delegate OnPerChannelLoudnessResults;//[Offset: 0xa8, Size: 0x10] 0x7873c30f80
	delegate OnLatestOverallLoudnessResults;//[Offset: 0xb8, Size: 0x10] 0x7873c31000
	delegate OnLatestPerChannelLoudnessResults;//[Offset: 0xc8, Size: 0x10] 0x7873c31080

--------------------------------
Class: AudioAnalyzer.Object
	AudioBus* AudioBus;//[Offset: 0x28, Size: 0x8] 0x7873c1f800
	AudioAnalyzerSubsystem* AudioAnalyzerSubsystem;//[Offset: 0x38, Size: 0x8] 0x7873c1f880
	void StopAnalyzing(const Object* WorldContextObject);// 0x116c233c 0x7873c0e860
	void StartAnalyzing(const Object* WorldContextObject, AudioBus* AudioBusToAnalyze);// 0x116c23e4 0x7873c0e940

--------------------------------
Class: AudioAnalyzerSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	AudioAnalyzer*[] AudioAnalyzers;//[Offset: 0x30, Size: 0x10] 0x7873fe6a00

--------------------------------
Class: LoudnessSettings.AudioSynesthesiaSettings.AudioAnalyzerSettings.AudioAnalyzerAssetBase.Object
	float AnalysisPeriod;//[Offset: 0x28, Size: 0x4] 0x7873c1fa80
	float MinimumFrequency;//[Offset: 0x2c, Size: 0x4] 0x7873c1fb00
	float MaximumFrequency;//[Offset: 0x30, Size: 0x4] 0x7873c1fb80
	enum CurveType;//[Offset: 0x34, Size: 0x1] 0x7873bb7900
	float NoiseFloorDb;//[Offset: 0x38, Size: 0x4] 0x7873c1fc80
	float ExpectedMaxLoudness;//[Offset: 0x3c, Size: 0x4] 0x7873c1fd00

--------------------------------
Class: AudioSynesthesiaSettings.AudioAnalyzerSettings.AudioAnalyzerAssetBase.Object

--------------------------------
Class: AudioAnalyzerSettings.AudioAnalyzerAssetBase.Object

--------------------------------
Class: LoudnessNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAssetBase.Object
	LoudnessNRTSettings* Settings;//[Offset: 0x78, Size: 0x8] 0x7873c30680
	void GetNormalizedLoudnessAtTime(const float InSeconds, out float OutLoudness);// 0xad426cc 0x7873c41ac0
	void GetNormalizedChannelLoudnessAtTime(const float InSeconds, const int InChannel, out float OutLoudness);// 0xad42580 0x7873c41ba0
	void GetLoudnessAtTime(const float InSeconds, out float OutLoudness);// 0xad42918 0x7873c41c80
	void GetChannelLoudnessAtTime(const float InSeconds, const int InChannel, out float OutLoudness);// 0xad427cc 0x7873c0e780

--------------------------------
Class: LoudnessNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAssetBase.Object
	float AnalysisPeriod;//[Offset: 0x28, Size: 0x4] 0x7873c30c00
	float MinimumFrequency;//[Offset: 0x2c, Size: 0x4] 0x7873c30c80
	float MaximumFrequency;//[Offset: 0x30, Size: 0x4] 0x7873c30d00
	enum CurveType;//[Offset: 0x34, Size: 0x1] 0x7873bb7860
	float NoiseFloorDb;//[Offset: 0x38, Size: 0x4] 0x7873c30e00

--------------------------------
Class: MeterAnalyzer.AudioAnalyzer.Object
	MeterSettings* Settings;//[Offset: 0x90, Size: 0x8] 0x7873c30100
	delegate OnOverallMeterResults;//[Offset: 0x98, Size: 0x10] 0x7873c30180
	delegate OnPerChannelMeterResults;//[Offset: 0xc0, Size: 0x10] 0x7873c30200
	delegate OnLatestOverallMeterResults;//[Offset: 0xe8, Size: 0x10] 0x7873c30280
	delegate OnLatestPerChannelMeterResults;//[Offset: 0x110, Size: 0x10] 0x7873c30300

--------------------------------
Class: MeterSettings.AudioSynesthesiaSettings.AudioAnalyzerSettings.AudioAnalyzerAssetBase.Object
	float AnalysisPeriod;//[Offset: 0x28, Size: 0x4] 0x7873c30380
	enum PeakMode;//[Offset: 0x2c, Size: 0x1] 0x7873bb77c0
	int MeterAttackTime;//[Offset: 0x30, Size: 0x4] 0x7873c30480
	int MeterReleaseTime;//[Offset: 0x34, Size: 0x4] 0x7873c30500
	int PeakHoldTime;//[Offset: 0x38, Size: 0x4] 0x7873c30580
	float ClippingThreshold;//[Offset: 0x3c, Size: 0x4] 0x7873c30600

--------------------------------
Class: OnsetNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAssetBase.Object
	OnsetNRTSettings* Settings;//[Offset: 0x78, Size: 0x8] 0x7873c31a00
	void GetNormalizedChannelOnsetsBetweenTimes(const float InStartSeconds, const float InEndSeconds, const int InChannel, out float[] OutOnsetTimestamps, out float[] OutOnsetStrengths);// 0xad43c20 0x7873c41900
	void GetChannelOnsetsBetweenTimes(const float InStartSeconds, const float InEndSeconds, const int InChannel, out float[] OutOnsetTimestamps, out float[] OutOnsetStrengths);// 0xad43e20 0x7873c419e0

--------------------------------
Class: OnsetNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAssetBase.Object
	bool bDownmixToMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873c31f80
	float GranularityInSeconds;//[Offset: 0x2c, Size: 0x4] 0x7873c32000
	float Sensitivity;//[Offset: 0x30, Size: 0x4] 0x7873c32080
	float MinimumFrequency;//[Offset: 0x34, Size: 0x4] 0x7873c32100
	float MaximumFrequency;//[Offset: 0x38, Size: 0x4] 0x7873c30080

--------------------------------
Class: InputCoreTypes.Object

--------------------------------
Class: FontProviderInterface.Interface.Object

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: CheckBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x30, Size: 0xa10] 0x7873c31680

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1] 0x787391c380
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0xc0] 0x787391c400
	SlateBrush UncheckedHoveredImage;//[Offset: 0xd0, Size: 0xc0] 0x787391c480
	SlateBrush UncheckedPressedImage;//[Offset: 0x190, Size: 0xc0] 0x787391c500
	SlateBrush CheckedImage;//[Offset: 0x250, Size: 0xc0] 0x787391c580
	SlateBrush CheckedHoveredImage;//[Offset: 0x310, Size: 0xc0] 0x787391c600
	SlateBrush CheckedPressedImage;//[Offset: 0x3d0, Size: 0xc0] 0x787391a580
	SlateBrush UndeterminedImage;//[Offset: 0x490, Size: 0xc0] 0x787391a600
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x550, Size: 0xc0] 0x787391a680
	SlateBrush UndeterminedPressedImage;//[Offset: 0x610, Size: 0xc0] 0x787391a700
	Margin Padding;//[Offset: 0x6d0, Size: 0x10] 0x787391a780
	SlateBrush BackgroundImage;//[Offset: 0x6e0, Size: 0xc0] 0x787391a800
	SlateBrush BackgroundHoveredImage;//[Offset: 0x7a0, Size: 0xc0] 0x787391a880
	SlateBrush BackgroundPressedImage;//[Offset: 0x860, Size: 0xc0] 0x787391a900
	SlateColor ForegroundColor;//[Offset: 0x920, Size: 0x14] 0x787391a980
	SlateColor HoveredForeground;//[Offset: 0x934, Size: 0x14] 0x787391aa00
	SlateColor PressedForeground;//[Offset: 0x948, Size: 0x14] 0x787391aa80
	SlateColor CheckedForeground;//[Offset: 0x95c, Size: 0x14] 0x787391ab00
	SlateColor CheckedHoveredForeground;//[Offset: 0x970, Size: 0x14] 0x787391ab80
	SlateColor CheckedPressedForeground;//[Offset: 0x984, Size: 0x14] 0x787391ac00
	SlateColor UndeterminedForeground;//[Offset: 0x998, Size: 0x14] 0x787391ac80
	SlateColor BorderBackgroundColor;//[Offset: 0x9ac, Size: 0x14] 0x787391ad00
	SlateSound CheckedSlateSound;//[Offset: 0x9c0, Size: 0x18] 0x787391ad80
	SlateSound UncheckedSlateSound;//[Offset: 0x9d8, Size: 0x18] 0x787391ae00
	SlateSound HoveredSlateSound;//[Offset: 0x9f0, Size: 0x18] 0x787391ae80

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8] 0x7873817100

--------------------------------
Class: EditableTextBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextBoxStyle EditableTextBoxStyle;//[Offset: 0x30, Size: 0xad0] 0x7873c31500

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundImageNormal;//[Offset: 0x10, Size: 0xc0] 0x787381bd80
	SlateBrush BackgroundImageHovered;//[Offset: 0xd0, Size: 0xc0] 0x787381be00
	SlateBrush BackgroundImageFocused;//[Offset: 0x190, Size: 0xc0] 0x787381be80
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x250, Size: 0xc0] 0x787381bf00
	Margin Padding;//[Offset: 0x310, Size: 0x10] 0x787381bf80
	SlateFontInfo Font;//[Offset: 0x320, Size: 0x58] 0x787381c000
	SlateColor ForegroundColor;//[Offset: 0x378, Size: 0x14] 0x787381c080
	SlateColor BackgroundColor;//[Offset: 0x38c, Size: 0x14] 0x787381c100
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x3a0, Size: 0x14] 0x787381c180
	SlateColor FocusedForegroundColor;//[Offset: 0x3b4, Size: 0x14] 0x787381c200
	Margin HScrollBarPadding;//[Offset: 0x3c8, Size: 0x10] 0x787381c280
	Margin VScrollBarPadding;//[Offset: 0x3d8, Size: 0x10] 0x787381c300
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x3f0, Size: 0x6e0] 0x787381a780

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8] 0x7873817580
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8] 0x7873817600
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20] 0x7873817900
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8] 0x7873817980
	int Size;//[Offset: 0x48, Size: 0x4] 0x7873817a00
	int LetterSpacing;//[Offset: 0x4c, Size: 0x4] 0x7873817a80

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4] 0x7873817680
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7873817700
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7873817780
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8] 0x7873817800
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10] 0x7873817880

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x10, Size: 0xc0] 0x787381c380
	SlateBrush VerticalBackgroundImage;//[Offset: 0xd0, Size: 0xc0] 0x787381c400
	SlateBrush VerticalTopSlotImage;//[Offset: 0x190, Size: 0xc0] 0x787381c480
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x250, Size: 0xc0] 0x787381c500
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x310, Size: 0xc0] 0x787381c580
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x3d0, Size: 0xc0] 0x787381c600
	SlateBrush NormalThumbImage;//[Offset: 0x490, Size: 0xc0] 0x787381a580
	SlateBrush HoveredThumbImage;//[Offset: 0x550, Size: 0xc0] 0x787381a600
	SlateBrush DraggedThumbImage;//[Offset: 0x610, Size: 0xc0] 0x787381a680
	float Thickness;//[Offset: 0x6d0, Size: 0x4] 0x787381a700

--------------------------------
Class: ScrollBarWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x30, Size: 0x6e0] 0x7873c31380

--------------------------------
Class: SpinBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	SpinBoxStyle SpinBoxStyle;//[Offset: 0x30, Size: 0x590] 0x7873c31200

--------------------------------
Class: SpinBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundBrush;//[Offset: 0x10, Size: 0xc0] 0x7873822200
	SlateBrush ActiveBackgroundBrush;//[Offset: 0xd0, Size: 0xc0] 0x7873822280
	SlateBrush HoveredBackgroundBrush;//[Offset: 0x190, Size: 0xc0] 0x7873822300
	SlateBrush ActiveFillBrush;//[Offset: 0x250, Size: 0xc0] 0x7873822380
	SlateBrush HoveredFillBrush;//[Offset: 0x310, Size: 0xc0] 0x7873822400
	SlateBrush InactiveFillBrush;//[Offset: 0x3d0, Size: 0xc0] 0x7873822480
	SlateBrush ArrowsImage;//[Offset: 0x490, Size: 0xc0] 0x7873822500
	SlateColor ForegroundColor;//[Offset: 0x550, Size: 0x14] 0x7873822580
	Margin TextPadding;//[Offset: 0x564, Size: 0x10] 0x7873822600
	Margin InsetPadding;//[Offset: 0x574, Size: 0x10] 0x7873822680

--------------------------------
Class: EditorStyleSettings.Object
	bool bEnableHighDPIAwareness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873c32380
	bool bEnableUserEditorLayoutManagement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7873c32400
	enum ColorVisionDeficiencyPreviewType;//[Offset: 0x2a, Size: 0x1] 0x7873bb7360
	int ColorVisionDeficiencySeverity;//[Offset: 0x2c, Size: 0x4] 0x7873c32500
	bool bColorVisionDeficiencyCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7873c32580
	bool bColorVisionDeficiencyCorrectionPreviewWithDeficiency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7873c32600
	LinearColor SelectionColor;//[Offset: 0x34, Size: 0x10] 0x7873c32680
	bool bEnableEditorWindowBackgroundColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7873c32700
	LinearColor EditorWindowBackgroundColor;//[Offset: 0x48, Size: 0x10] 0x7873c32780
	bool bUseSmallToolBarIcons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7873c32800
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x7873c32880
	LinearColor RegularColor;//[Offset: 0x5c, Size: 0x10] 0x7873c32900
	LinearColor RuleColor;//[Offset: 0x6c, Size: 0x10] 0x7873c32980
	LinearColor CenterColor;//[Offset: 0x7c, Size: 0x10] 0x7873c32a00
	uint32 GridSnapSize;//[Offset: 0x8c, Size: 0x4] 0x7873c32a80
	SlateBrush GraphBackgroundBrush;//[Offset: 0x90, Size: 0xc0] 0x7873c32b00
	bool bShowFriendlyNames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1] 0x7873c32b80
	bool bShowNativeComponentNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x150, Size: 0x1] 0x7873c32c00
	bool bExpandConfigurationMenus;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x150, Size: 0x1] 0x7873c32c80
	bool bShowProjectMenus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x150, Size: 0x1] 0x7873c32d00
	bool bShowLaunchMenus;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x150, Size: 0x1] 0x7873c32d80
	bool bShowAllAdvancedDetails;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x150, Size: 0x1] 0x7873c32e00
	bool bShowHiddenPropertiesWhilePlaying;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x150, Size: 0x1] 0x7873c32e80
	int LogFontSize;//[Offset: 0x154, Size: 0x4] 0x7873c32f00
	byte LogTimestampMode;//[Offset: 0x158, Size: 0x1] 0x7873c32f80
	bool bPromoteOutputLogWarningsDuringPIE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1] 0x7873c33000
	enum CategoryColorizationMode;//[Offset: 0x15a, Size: 0x1] 0x7873bb7400
	bool bCycleToOutputLogDrawer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b, Size: 0x1] 0x7873c33100
	enum AssetEditorOpenLocation;//[Offset: 0x15c, Size: 0x1] 0x7873bb74a0
	bool bEnableColorizedEditorTabs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15d, Size: 0x1] 0x7873c31100

--------------------------------
Class: ImageWriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void ExportToDisk(Texture* Texture, FString Filename, out const ImageWriteOptions Options);// 0xc9abe98 0x7873c43180

--------------------------------
Class: ImageWriteOptions
	enum Format;//[Offset: 0x0, Size: 0x1] 0x78736afe20
	delegate OnComplete;//[Offset: 0x4, Size: 0x10] 0x7873920d80
	int CompressionQuality;//[Offset: 0x14, Size: 0x4] 0x7873920e00
	bool bOverwriteFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7873920e80
	bool bAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x7873920f00

--------------------------------
Class: GeneralEngineSettings.Object

--------------------------------
Class: DeveloperSettingsBackedByCVars.DeveloperSettings.Object

--------------------------------
Class: ChaosPhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4] 0x7873c39480
	float StaticFriction;//[Offset: 0x2c, Size: 0x4] 0x7873c37400
	float Restitution;//[Offset: 0x30, Size: 0x4] 0x7873c37480
	float LinearEtherDrag;//[Offset: 0x34, Size: 0x4] 0x7873c37500
	float AngularEtherDrag;//[Offset: 0x38, Size: 0x4] 0x7873c37580
	float SleepingLinearVelocityThreshold;//[Offset: 0x3c, Size: 0x4] 0x7873c37600
	float SleepingAngularVelocityThreshold;//[Offset: 0x40, Size: 0x4] 0x7873c37680

--------------------------------
Class: MeshReconstructorBase.Object
	void StopReconstruction();// 0xd9d15c8 0x7873c428c0
	void StartReconstruction();// 0xd9d15e4 0x7873c429a0
	void PauseReconstruction();// 0xd9d15ac 0x7873c42a80
	bool IsReconstructionStarted();// 0xd9d156c 0x7873c42b60
	bool IsReconstructionPaused();// 0xd9d152c 0x7873c42c40
	void DisconnectMRMesh();// 0xd9d1460 0x7873c42d20
	void ConnectMRMesh(MRMeshComponent* Mesh);// 0xd9d147c 0x7873c42e00

--------------------------------
Class: MRMeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* Material;//[Offset: 0x550, Size: 0x8] 0x7873c39900
	MaterialInterface* WireframeMaterial;//[Offset: 0x558, Size: 0x8] 0x7873c39980
	bool bCreateMeshProxySections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1] 0x7873c39a00
	bool bUpdateNavMeshOnMeshUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x561, Size: 0x1] 0x7873c39a80
	bool bNeverCreateCollisionMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x563, Size: 0x1] 0x7873c39b00
	MRMeshBodyHolder*[] BodyHolders;//[Offset: 0x5a8, Size: 0x10] 0x7873bb8c60
	void SetWireframeMaterial(MaterialInterface* InMaterial);// 0xd9d2ae8 0x7873c41f20
	void SetWireframeColor(out const LinearColor InColor);// 0xd9d28a0 0x7873c42000
	void SetUseWireframe(bool bUseWireframe);// 0xd9d296c 0x7873c420e0
	void SetEnableMeshOcclusion(bool bEnable);// 0xd9d2a38 0x7873c421c0
	void RequestNavMeshUpdate();// 0xd9d2bb4 0x7873c422a0
	bool IsConnected();// 0xd9d2bdc 0x7873c42380
	LinearColor GetWireframeColor();// 0xd9d2884 0x7873c42460
	bool GetUseWireframe();// 0xd9d2950 0x7873c42540
	bool GetEnableMeshOcclusion();// 0xd9d2a1c 0x7873c42620
	void ForceNavMeshUpdate();// 0xd9d2bc8 0x7873c42700
	void Clear();// 0xd9d2b98 0x7873c427e0

--------------------------------
Class: MRMeshBodyHolder.Object
	BodySetup* BodySetup;//[Offset: 0x30, Size: 0x8] 0x7873c3a000
	BodyInstance BodyInstance;//[Offset: 0x38, Size: 0x198] 0x7873c3a080

--------------------------------
Class: ARTraceResultLibrary.BlueprintFunctionLibrary.Object
	static ARTrackedGeometry* GetTrackedGeometry(out const ARTraceResult TraceResult);// 0xda07a44 0x7873c45720
	static enum GetTraceChannel(out const ARTraceResult TraceResult);// 0xda0792c 0x7873c45800
	static Transform GetLocalTransform(out const ARTraceResult TraceResult);// 0xda07b5c 0x7873c458e0
	static Transform GetLocalToWorldTransform(out const ARTraceResult TraceResult);// 0xda07c8c 0x7873c459c0
	static Transform GetLocalToTrackingTransform(out const ARTraceResult TraceResult);// 0xda07dbc 0x7873c45aa0
	static float GetDistanceFromCamera(out const ARTraceResult TraceResult);// 0xda07eec 0x7873c45b80

--------------------------------
Class: ARTraceResult
	float DistanceFromCamera;//[Offset: 0x0, Size: 0x4] 0x7873924f00
	enum TraceChannel;//[Offset: 0x4, Size: 0x1] 0x78736af6a0
	Transform LocalTransform;//[Offset: 0x10, Size: 0x60] 0x7873925000
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x70, Size: 0x8] 0x7873925080

--------------------------------
Class: ARTrackedGeometry.Object
	Guid UniqueId;//[Offset: 0x28, Size: 0x10] 0x7873c84900
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x60] 0x7873c84980
	Transform LocalToAlignedTrackingTransform;//[Offset: 0xa0, Size: 0x60] 0x7873c84a00
	enum TrackingState;//[Offset: 0x100, Size: 0x1] 0x7873bbd440
	MRMeshComponent* UnderlyingMesh;//[Offset: 0x110, Size: 0x8] 0x7873c84b00
	enum ObjectClassification;//[Offset: 0x118, Size: 0x1] 0x7873bbd4e0
	enum SpatialMeshUsageFlags;//[Offset: 0x119, Size: 0x1] 0x7873bbd580
	int LastUpdateFrameNumber;//[Offset: 0x130, Size: 0x4] 0x7873c84c80
	FName DebugName;//[Offset: 0x140, Size: 0x8] 0x7873c84d00
	bool IsTracked();// 0xda2162c 0x7873c79700
	bool HasSpatialMeshUsageFlag(const enum InFlag);// 0xda21408 0x7873c797e0
	MRMeshComponent* GetUnderlyingMesh();// 0xda214d8 0x7873c798c0
	enum GetTrackingState();// 0xda21664 0x7873c799a0
	enum GetObjectClassification();// 0xda214bc 0x7873c79a80
	FString GetName();// 0xda21574 0x7873c79b60
	Transform GetLocalToWorldTransform();// 0xda2170c 0x7873c79c40
	Transform GetLocalToTrackingTransform();// 0xda21698 0x7873c79d20
	float GetLastUpdateTimestamp();// 0xda2150c 0x7873c79e00
	int GetLastUpdateFrameNumber();// 0xda21540 0x7873c79ee0
	FName GetDebugName();// 0xda215f8 0x7873c79fc0

--------------------------------
Class: ARGetCandidateObjectAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x7873c3f580
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x7873c3f600
	static ARGetCandidateObjectAsyncTaskBlueprintProxy* ARGetCandidateObject(Object* WorldContextObject, Vector Location, Vector Extent);// 0xda08f4c 0x7873c48f20

--------------------------------
Class: ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object

--------------------------------
Class: ARPointComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPointUpdatePayload ReplicatedPayload;//[Offset: 0x32c, Size: 0x1] 0x7873c3eb00
	void ServerUpdatePayload(const ARPointUpdatePayload NewPayload);// 0xda0c13c 0x7873c482e0
	void ReceiveUpdate(out const ARPointUpdatePayload Payload);// 0xb8f1ab4 0x7873c483c0
	void ReceiveAdd(out const ARPointUpdatePayload Payload);// 0xb8f1ab4 0x7873c484a0

--------------------------------
Class: ARComponent.SceneComponent.ActorComponent.Object
	Guid NativeID;//[Offset: 0x2b0, Size: 0x10] 0x7873c3f180
	bool bUseDefaultReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1] 0x7873c3f200
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x2f8, Size: 0x8] 0x7873c3f280
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x300, Size: 0x8] 0x7873c3f300
	MRMeshComponent* MRMeshComponent;//[Offset: 0x308, Size: 0x8] 0x7873c3f380
	ARTrackedGeometry* MyTrackedGeometry;//[Offset: 0x310, Size: 0x8] 0x7873c3f400
	void UpdateVisualization();// 0xda0a8c0 0x7873c48ac0
	void SetNativeID(Guid NativeID);// 0xda0a8f8 0x7873c48ba0
	void ReceiveRemove();// 0xb8f1ab4 0x7873c48c80
	void OnRep_Payload();// 0xda0a8a4 0x7873c48d60
	MRMeshComponent* GetMRMesh();// 0xda0a8dc 0x7873c48e40

--------------------------------
Class: ARPointUpdatePayload

--------------------------------
Class: ARQRCodeComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARQRCodeUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0xb0] 0x7873c3fa80
	static void SetQRCodeComponentDebugMode(enum NewDebugMode);// 0xda0e44c 0x7873c47860
	void ServerUpdatePayload(const ARQRCodeUpdatePayload NewPayload);// 0xda0e330 0x7873c47940
	void ReceiveUpdate(out const ARQRCodeUpdatePayload Payload);// 0xb8f1ab4 0x7873c47a20
	void ReceiveAdd(out const ARQRCodeUpdatePayload Payload);// 0xb8f1ab4 0x7873c47b00

--------------------------------
Class: ARQRCodeUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x7873923800
	Transform WorldTransform;//[Offset: 0x20, Size: 0x60] 0x7873923880
	Vector Extents;//[Offset: 0x80, Size: 0x18] 0x7873923900
	FString QRCode;//[Offset: 0x98, Size: 0x10] 0x7873923980

--------------------------------
Class: ARSessionPayload
	int ConfigFlags;//[Offset: 0x0, Size: 0x4] 0x7873924100
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x8, Size: 0x8] 0x7873924180
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x10, Size: 0x8] 0x7873924200

--------------------------------
Class: ARObjectComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARObjectUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0x60] 0x7873c50d00
	void ServerUpdatePayload(const ARObjectUpdatePayload NewPayload);// 0xda104fc 0x7873c4a960
	void ReceiveUpdate(out const ARObjectUpdatePayload Payload);// 0xb8f1ab4 0x7873c4aa40
	void ReceiveAdd(out const ARObjectUpdatePayload Payload);// 0xb8f1ab4 0x7873c4ab20

--------------------------------
Class: ARObjectUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x60] 0x7873923600

--------------------------------
Class: ARDependencyHandler.Object
	void StartARSessionLatent(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo);// 0xda127e8 0x7873c49ee0
	void RequestARSessionPermission(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo, out enum OutPermissionResult);// 0xda12938 0x7873c49fc0
	void InstallARService(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutInstallResult);// 0xda12ae0 0x7873c4a0a0
	static ARDependencyHandler* GetARDependencyHandler();// 0xda12da0 0x7873c4a180
	void CheckARServiceAvailability(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutAvailability);// 0xda12c40 0x7873c4a260

--------------------------------
Class: ARSessionConfig.DataAsset.Object
	bool bGenerateMeshDataFromTrackedGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7873c55000
	bool bGenerateCollisionForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7873c55080
	bool bGenerateNavMeshForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1] 0x7873c55100
	bool bUseMeshDataForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1] 0x7873c55180
	bool bRenderMeshDataInWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x7873c55200
	bool bTrackSceneObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x7873c55280
	bool bUsePersonSegmentationForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1] 0x7873c53200
	bool bUseSceneDepthForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1] 0x7873c53280
	bool bUseAutomaticImageScaleEstimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7873c53300
	bool bUseStandardOnboardingUX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7873c53380
	enum WorldAlignment;//[Offset: 0x3a, Size: 0x1] 0x7873bba600
	enum SessionType;//[Offset: 0x3b, Size: 0x1] 0x7873bba6a0
	enum PlaneDetectionMode;//[Offset: 0x3c, Size: 0x1] 0x7873bba740
	bool bHorizontalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x7873c53580
	bool bVerticalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1] 0x7873c53600
	bool bEnableAutoFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 0x1] 0x7873c53680
	enum LightEstimationMode;//[Offset: 0x40, Size: 0x1] 0x7873bba7e0
	enum FrameSyncMode;//[Offset: 0x41, Size: 0x1] 0x7873bba880
	bool bEnableAutomaticCameraOverlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x7873c53800
	bool bEnableAutomaticCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x7873c53880
	bool bResetCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7873c53900
	bool bResetTrackedObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x7873c53980
	ARCandidateImage*[] CandidateImages;//[Offset: 0x48, Size: 0x10] 0x7873bba920
	int MaxNumSimultaneousImagesTracked;//[Offset: 0x58, Size: 0x4] 0x7873c53a80
	enum EnvironmentCaptureProbeType;//[Offset: 0x5c, Size: 0x1] 0x7873bba9c0
	byte[] WorldMapData;//[Offset: 0x60, Size: 0x10] 0x7873bbaa60
	ARCandidateObject*[] CandidateObjects;//[Offset: 0x70, Size: 0x10] 0x7873bbab00
	ARVideoFormat DesiredVideoFormat;//[Offset: 0x80, Size: 0xc] 0x7873c53c80
	bool bUseOptimalVideoFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1] 0x7873c53d00
	enum FaceTrackingDirection;//[Offset: 0x8d, Size: 0x1] 0x7873bbaba0
	enum FaceTrackingUpdate;//[Offset: 0x8e, Size: 0x1] 0x7873bbac40
	int MaxNumberOfTrackedFaces;//[Offset: 0x90, Size: 0x4] 0x7873c53e80
	byte[] SerializedARCandidateImageDatabase;//[Offset: 0x98, Size: 0x10] 0x7873bbace0
	enum EnabledSessionTrackingFeature;//[Offset: 0xa8, Size: 0x1] 0x7873bbad80
	enum SceneReconstructionMethod;//[Offset: 0xa9, Size: 0x1] 0x7873bbae20
	class ARPlaneComponent* PlaneComponentClass;//[Offset: 0xb0, Size: 0x8] 0x7873bbaec0
	class ARPointComponent* PointComponentClass;//[Offset: 0xb8, Size: 0x8] 0x7873bbaf60
	class ARFaceComponent* FaceComponentClass;//[Offset: 0xc0, Size: 0x8] 0x7873bbb000
	class ARImageComponent* ImageComponentClass;//[Offset: 0xc8, Size: 0x8] 0x7873bbb0a0
	class ARQRCodeComponent* QRCodeComponentClass;//[Offset: 0xd0, Size: 0x8] 0x7873bbb140
	class ARPoseComponent* PoseComponentClass;//[Offset: 0xd8, Size: 0x8] 0x7873bbb1e0
	class AREnvironmentProbeComponent* EnvironmentProbeComponentClass;//[Offset: 0xe0, Size: 0x8] 0x7873bbb280
	class ARObjectComponent* ObjectComponentClass;//[Offset: 0xe8, Size: 0x8] 0x7873bbb320
	class ARMeshComponent* MeshComponentClass;//[Offset: 0xf0, Size: 0x8] 0x7873bbb3c0
	class ARGeoAnchorComponent* GeoAnchorComponentClass;//[Offset: 0xf8, Size: 0x8] 0x7873bbb460
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x100, Size: 0x8] 0x7873c54080
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x108, Size: 0x8] 0x7873c54100
	bool ShouldResetTrackedObjects();// 0xda1c164 0x7873c4aea0
	bool ShouldResetCameraTracking();// 0xda1c24c 0x7873c4af80
	bool ShouldRenderCameraOverlay();// 0xda1c3a4 0x7873c4b060
	bool ShouldEnableCameraTracking();// 0xda1c36c 0x7873c4b140
	bool ShouldEnableAutoFocus();// 0xda1c334 0x7873c4b220
	void SetWorldMapData(byte[] WorldMapData);// 0xda1bda0 0x7873c4b300
	void SetSessionTrackingFeatureToEnable(enum InSessionTrackingFeature);// 0xda1b804 0x7873c4b3e0
	void SetSceneReconstructionMethod(enum InSceneReconstructionMethod);// 0xda1b75c 0x7873c4b4c0
	void SetResetTrackedObjects(bool bNewValue);// 0xda1c0b4 0x7873c4b5a0
	void SetResetCameraTracking(bool bNewValue);// 0xda1c19c 0x7873c4b680
	void SetFaceTrackingUpdate(enum InUpdate);// 0xda1b914 0x7873c4b760
	void SetFaceTrackingDirection(enum InDirection);// 0xda1b9f0 0x7873c4b840
	void SetEnableAutoFocus(bool bNewValue);// 0xda1c284 0x7873c4b920
	void SetDesiredVideoFormat(ARVideoFormat NewFormat);// 0xda1bacc 0x7873c4ba00
	void SetCandidateObjectList(out const ARCandidateObject*[] InCandidateObjects);// 0xda1bc5c 0x7873c4bae0
	byte[] GetWorldMapData();// 0xda1be9c 0x7873c4bbc0
	enum GetWorldAlignment();// 0xda1c4ac 0x7873c4bca0
	enum GetSessionType();// 0xda1c478 0x7873c4bd80
	enum GetSceneReconstructionMethod();// 0xda1b8ac 0x7873c4be60
	enum GetPlaneDetectionMode();// 0xda1c444 0x7873c4bf40
	int GetMaxNumSimultaneousImagesTracked();// 0xda1bf54 0x7873c4c020
	enum GetLightEstimationMode();// 0xda1c410 0x7873c4c100
	enum GetFrameSyncMode();// 0xda1c3dc 0x7873c4c1e0
	enum GetFaceTrackingUpdate();// 0xda1b9bc 0x7873c4c2c0
	enum GetFaceTrackingDirection();// 0xda1ba98 0x7873c4c3a0
	enum GetEnvironmentCaptureProbeType();// 0xda1bf20 0x7873c4c480
	enum GetEnabledSessionTrackingFeature();// 0xda1b8e0 0x7873c4c560
	ARVideoFormat GetDesiredVideoFormat();// 0xda1bb7c 0x7873c4c640
	ARCandidateObject*[] GetCandidateObjectList();// 0xda1bd1c 0x7873c4c720
	ARCandidateImage*[] GetCandidateImageList();// 0xda1c030 0x7873c4c800
	void AddCandidateObject(ARCandidateObject* CandidateObject);// 0xda1bbb4 0x7873c4c8e0
	void AddCandidateImage(ARCandidateImage* NewCandidateImage);// 0xda1bf88 0x7873c4c9c0

--------------------------------
Class: ARVideoFormat
	int FPS;//[Offset: 0x0, Size: 0x4] 0x7873924c80
	int Width;//[Offset: 0x4, Size: 0x4] 0x7873924d00
	int Height;//[Offset: 0x8, Size: 0x4] 0x7873924d80

--------------------------------
Class: ARCandidateObject.DataAsset.Object
	byte[] CandidateObjectData;//[Offset: 0x30, Size: 0x10] 0x7873bbf380
	FString FriendlyName;//[Offset: 0x40, Size: 0x10] 0x7873c88100
	Box BoundingBox;//[Offset: 0x50, Size: 0x38] 0x7873c88180
	void SetFriendlyName(FString NewName);// 0xda27924 0x7873c7b5a0
	void SetCandidateObjectData(out const byte[] InCandidateObject);// 0xda27aac 0x7873c7b680
	void SetBoundingBox(out const Box InBoundingBox);// 0xda27838 0x7873c7b760
	FString GetFriendlyName();// 0xda27a28 0x7873c7b840
	byte[] GetCandidateObjectData();// 0xda27bbc 0x7873c7b920
	Box GetBoundingBox();// 0xda278f8 0x7873c7ba00

--------------------------------
Class: ARCandidateImage.DataAsset.Object
	Texture2D* CandidateTexture;//[Offset: 0x30, Size: 0x8] 0x7873c86400
	FString FriendlyName;//[Offset: 0x38, Size: 0x10] 0x7873c86480
	float Width;//[Offset: 0x48, Size: 0x4] 0x7873c86500
	float Height;//[Offset: 0x4c, Size: 0x4] 0x7873c86580
	enum Orientation;//[Offset: 0x50, Size: 0x1] 0x7873bbf560
	float GetPhysicalWidth();// 0xda27284 0x7873c7bae0
	float GetPhysicalHeight();// 0xda27268 0x7873c7bbc0
	enum GetOrientation();// 0xda2724c 0x7873c7bca0
	FString GetFriendlyName();// 0xda272a0 0x7873c7bd80
	Texture2D* GetCandidateTexture();// 0xda27324 0x7873c7be60

--------------------------------
Class: ARPlaneComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPlaneUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0xd0] 0x7873c3ed00
	static void SetPlaneComponentDebugMode(enum NewDebugMode);// 0xda0b508 0x7873c48580
	static void SetObjectClassificationDebugColors(out const <enum,LinearColor> InColors);// 0xda0b3dc 0x7873c48660
	void ServerUpdatePayload(const ARPlaneUpdatePayload NewPayload);// 0xda0b200 0x7873c48740
	void ReceiveUpdate(out const ARPlaneUpdatePayload Payload);// 0xb8f1ab4 0x7873c48820
	void ReceiveAdd(out const ARPlaneUpdatePayload Payload);// 0xb8f1ab4 0x7873c48900
	static <enum,LinearColor> GetObjectClassificationDebugColors();// 0xda0b348 0x7873c489e0

--------------------------------
Class: ARPlaneUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x7873923e00
	Transform WorldTransform;//[Offset: 0x20, Size: 0x60] 0x7873923e80
	Vector Center;//[Offset: 0x80, Size: 0x18] 0x7873923f00
	Vector Extents;//[Offset: 0x98, Size: 0x18] 0x7873923f80
	Vector[] BoundaryVertices;//[Offset: 0xb0, Size: 0x10] 0x78736af420
	enum ObjectClassification;//[Offset: 0xc0, Size: 0x1] 0x78736af380

--------------------------------
Class: ARFaceComponent.ARComponent.SceneComponent.ActorComponent.Object
	enum TransformSetting;//[Offset: 0x32c, Size: 0x1] 0x7873bb9f20
	bool bUpdateVertexNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 0x1] 0x7873c3e780
	bool bFaceOutOfScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e, Size: 0x1] 0x7873c3e800
	ARFaceUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0x60] 0x7873c3e880
	static void SetFaceComponentDebugMode(enum NewDebugMode);// 0xda0ccb8 0x7873c47f60
	void ServerUpdatePayload(const ARFaceUpdatePayload NewPayload);// 0xda0cbbc 0x7873c48040
	void ReceiveUpdate(out const ARFaceUpdatePayload Payload);// 0xb8f1ab4 0x7873c48120
	void ReceiveAdd(out const ARFaceUpdatePayload Payload);// 0xb8f1ab4 0x7873c48200

--------------------------------
Class: ARFaceUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x7873923c00
	Vector LeftEyePosition;//[Offset: 0x18, Size: 0x18] 0x7873923c80
	Vector RightEyePosition;//[Offset: 0x30, Size: 0x18] 0x7873923d00
	Vector LookAtTarget;//[Offset: 0x48, Size: 0x18] 0x7873923d80

--------------------------------
Class: ARImageComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARImageUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0xa0] 0x7873c3fd00
	static void SetImageComponentDebugMode(enum NewDebugMode);// 0xda0d86c 0x7873c47be0
	void ServerUpdatePayload(const ARImageUpdatePayload NewPayload);// 0xda0d74c 0x7873c47cc0
	void ReceiveUpdate(out const ARImageUpdatePayload Payload);// 0xb8f1ab4 0x7873c47da0
	void ReceiveAdd(out const ARImageUpdatePayload Payload);// 0xb8f1ab4 0x7873c47e80

--------------------------------
Class: ARImageUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x7873923a00
	Transform WorldTransform;//[Offset: 0x20, Size: 0x60] 0x7873923a80
	ARCandidateImage* DetectedImage;//[Offset: 0x80, Size: 0x8] 0x7873923b00
	Vector2D EstimatedSize;//[Offset: 0x88, Size: 0x10] 0x7873923b80

--------------------------------
Class: ARPoseComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPoseUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0x70] 0x7873c3f800
	static void SetPoseComponentDebugMode(enum NewDebugMode);// 0xda0f138 0x7873c474e0
	void ServerUpdatePayload(const ARPoseUpdatePayload NewPayload);// 0xda0f02c 0x7873c475c0
	void ReceiveUpdate(out const ARPoseUpdatePayload Payload);// 0xb8f1ab4 0x7873c476a0
	void ReceiveAdd(out const ARPoseUpdatePayload Payload);// 0xb8f1ab4 0x7873c47780

--------------------------------
Class: ARPoseUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x60] 0x7873923700
	Transform[] JointTransforms;//[Offset: 0x60, Size: 0x10] 0x78736af4c0

--------------------------------
Class: AREnvironmentProbeComponent.ARComponent.SceneComponent.ActorComponent.Object
	AREnvironmentProbeUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0x60] 0x7873c50f00
	void ServerUpdatePayload(const AREnvironmentProbeUpdatePayload NewPayload);// 0xda0fbac 0x7873c4ac00
	void ReceiveUpdate(out const AREnvironmentProbeUpdatePayload Payload);// 0xb8f1ab4 0x7873c4ace0
	void ReceiveAdd(out const AREnvironmentProbeUpdatePayload Payload);// 0xb8f1ab4 0x7873c47400

--------------------------------
Class: AREnvironmentProbeUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x60] 0x7873923680

--------------------------------
Class: ARMeshComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARMeshUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0x90] 0x7873c50b00
	void ServerUpdatePayload(const ARMeshUpdatePayload NewPayload);// 0xda10e4c 0x7873c4a6c0
	void ReceiveUpdate(out const ARMeshUpdatePayload Payload);// 0xb8f1ab4 0x7873c4a7a0
	void ReceiveAdd(out const ARMeshUpdatePayload Payload);// 0xb8f1ab4 0x7873c4a880

--------------------------------
Class: ARMeshUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x7873923480
	Transform WorldTransform;//[Offset: 0x20, Size: 0x60] 0x7873923500
	enum ObjectClassification;//[Offset: 0x80, Size: 0x1] 0x78736af560

--------------------------------
Class: ARGeoAnchorComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARGeoAnchorUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0xa0] 0x7873c50880
	static void SetGeoAnchorComponentDebugMode(enum NewDebugMode);// 0xda11a28 0x7873c4a340
	void ServerUpdatePayload(const ARGeoAnchorUpdatePayload NewPayload);// 0xda11904 0x7873c4a420
	void ReceiveUpdate(out const ARGeoAnchorUpdatePayload Payload);// 0xb8f1ab4 0x7873c4a500
	void ReceiveAdd(out const ARGeoAnchorUpdatePayload Payload);// 0xb8f1ab4 0x7873c4a5e0

--------------------------------
Class: ARGeoAnchorUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x7873925200
	Transform WorldTransform;//[Offset: 0x20, Size: 0x60] 0x7873925280
	float Longitude;//[Offset: 0x80, Size: 0x4] 0x7873923200
	float Latitude;//[Offset: 0x84, Size: 0x4] 0x7873923280
	float AltitudeMeters;//[Offset: 0x88, Size: 0x4] 0x7873923300
	enum AltitudeSource;//[Offset: 0x8c, Size: 0x1] 0x78736af600
	FString AnchorName;//[Offset: 0x90, Size: 0x10] 0x7873923400

--------------------------------
Class: GetGeoLocationAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x78737de200
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x78737de280
	void GetGeoLocationDelegate__DelegateSignature(float Longitude, float Latitude, float Altitude, FString Error);// 0xb8f1ab4 0x78737cc8e0
	static GetGeoLocationAsyncTaskBlueprintProxy* GetGeoLocationAtWorldPosition(Object* WorldContextObject, out const Vector WorldPosition);// 0xda14894 0x78737cc9c0

--------------------------------
Class: ARBasicLightEstimate.ARLightEstimate.Object
	float AmbientIntensityLumens;//[Offset: 0x28, Size: 0x4] 0x7873c51900
	float AmbientColorTemperatureKelvin;//[Offset: 0x2c, Size: 0x4] 0x7873c51980
	LinearColor AmbientColor;//[Offset: 0x30, Size: 0x10] 0x7873c51a00
	float GetAmbientIntensityLumens();// 0xda19c94 0x7873c49700
	float GetAmbientColorTemperatureKelvin();// 0xda19c60 0x7873c497e0
	LinearColor GetAmbientColor();// 0xda19c28 0x7873c498c0

--------------------------------
Class: ARLightEstimate.Object

--------------------------------
Class: ARSharedWorldPlayerController.PlayerController.Controller.Actor.Object
	void ServerMarkReadyForReceiving();// 0xda1e444 0x7873c7a340
	void ClientUpdatePreviewImageData(int Offset, const byte[] Buffer);// 0xda1e1d8 0x7873c7a420
	void ClientUpdateARWorldData(int Offset, const byte[] Buffer);// 0xda1e09c 0x7873c7a500
	void ClientInitSharedWorld(int PreviewImageSize, int ARWorldDataSize);// 0xda1e314 0x7873c7a5e0

--------------------------------
Class: ARTextureCameraDepth.ARTexture.Texture.StreamableRenderAsset.Object
	enum DepthQuality;//[Offset: 0x238, Size: 0x1] 0x7873bbd8a0
	enum DepthAccuracy;//[Offset: 0x239, Size: 0x1] 0x7873bbd940
	bool bIsTemporallySmoothed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a, Size: 0x1] 0x7873c83580

--------------------------------
Class: ARTexture.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0x210, Size: 0x1] 0x7873bbd9e0
	float Timestamp;//[Offset: 0x214, Size: 0x4] 0x7873c83680
	Guid ExternalTextureGuid;//[Offset: 0x218, Size: 0x10] 0x7873c83700
	Vector2D Size;//[Offset: 0x228, Size: 0x10] 0x7873c83780

--------------------------------
Class: ARTrackedImage.ARTrackedGeometry.Object
	ARCandidateImage* DetectedImage;//[Offset: 0x158, Size: 0x8] 0x7873c86300
	Vector2D EstimatedSize;//[Offset: 0x160, Size: 0x10] 0x7873c84280
	Vector2D GetEstimateSize();// 0xda22a94 0x7873c790e0
	ARCandidateImage* GetDetectedImage();// 0xda22ac8 0x7873c791c0

--------------------------------
Class: AREnvironmentCaptureProbe.ARTrackedGeometry.Object
	Vector Extent;//[Offset: 0x158, Size: 0x18] 0x7873c85900
	AREnvironmentCaptureProbeTexture* EnvironmentCaptureTexture;//[Offset: 0x170, Size: 0x8] 0x7873c85980
	Vector GetExtent();// 0xda240f8 0x7873c7c560
	AREnvironmentCaptureProbeTexture* GetEnvironmentCaptureTexture();// 0xda240c4 0x7873c7c640

--------------------------------
Class: AREnvironmentCaptureProbeTexture.TextureCube.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0x2d0, Size: 0x1] 0x7873bbd800
	float Timestamp;//[Offset: 0x2d4, Size: 0x4] 0x7873c83300
	Guid ExternalTextureGuid;//[Offset: 0x2d8, Size: 0x10] 0x7873c83380
	Vector2D Size;//[Offset: 0x2e8, Size: 0x10] 0x7873c83400

--------------------------------
Class: ARMeshGeometry.ARTrackedGeometry.Object
	bool GetObjectClassificationAtLocation(out const Vector InWorldLocation, out enum OutClassification, out Vector OutClassificationLocation, float MaxLocationDiff);// 0xda2500c 0x7873c7c2c0

--------------------------------
Class: ARTypesDummyClass.Object

--------------------------------
Class: HeadMountedDisplayFunctionLibrary.BlueprintFunctionLibrary.Object
	static void UpdateExternalTrackingHMDPosition(out const Transform ExternalTrackingTransform);// 0xda69590 0x7873c7fd60
	static void SetXRTimedInputActionDelegate(out const FName ActionName, out const delegate InDelegate);// 0xda68484 0x7873c7fe40
	static void SetXRDisconnectDelegate(out const delegate InDisconnectedDelegate);// 0xda6859c 0x7873c7ff20
	static void SetWorldToMetersScale(Object* WorldContext, float NewScale);// 0xda69954 0x7873c7caa0
	static void SetTrackingOrigin(byte Origin);// 0xda69814 0x7873c7cb80
	static void SetSpectatorScreenTexture(Texture* InTexture);// 0xda6932c 0x7873c7cc60
	static void SetSpectatorScreenModeTexturePlusEyeLayout(Vector2D EyeRectMin, Vector2D EyeRectMax, Vector2D TextureRectMin, Vector2D TextureRectMax, bool bDrawEyeFirst, bool bClearBlack, bool bUseAlpha);// 0xda690e0 0x7873c7cd40
	static void SetSpectatorScreenMode(enum Mode);// 0xda693c4 0x7873c7ce20
	static void SetClippingPlanes(float Near, float Far);// 0xda69aa0 0x7873c7cf00
	static void ResetOrientationAndPosition(float Yaw, byte Options);// 0xda69b80 0x7873c7cfe0
	static bool IsSpectatorScreenModeControllable();// 0xda6945c 0x7873c7d0c0
	static bool IsInLowPersistenceMode();// 0xda69cf4 0x7873c7d1a0
	static bool IsHeadMountedDisplayEnabled();// 0xda6a70c 0x7873c7d280
	static bool IsHeadMountedDisplayConnected();// 0xda6a6d4 0x7873c7d360
	static bool IsDeviceTracking(out const XRDeviceId XRDeviceId);// 0xda68ac4 0x7873c7d440
	static bool HasValidTrackingPosition();// 0xda6a3a8 0x7873c7d520
	static int GetXRSystemFlags();// 0xda6a5b8 0x7873c7d600
	static float GetWorldToMetersScale(Object* WorldContext);// 0xda698ac 0x7873c7d6e0
	static void GetVRFocusState(out bool bUseFocus, out bool bHasFocus);// 0xda69494 0x7873c7d7c0
	static FString GetVersionString();// 0xda6a508 0x7873c7d8a0
	static Transform GetTrackingToWorldTransform(Object* WorldContext);// 0xda69720 0x7873c7d980
	static void GetTrackingSensorParameters(out Vector Origin, out Rotator Rotation, out float LeftFOV, out float RightFOV, out float TopFOV, out float BottomFOV, out float Distance, out float NearPlane, out float FarPlane, out bool IsActive, int index);// 0xda69fa0 0x7873c7da60
	static byte GetTrackingOrigin();// 0xda697e0 0x7873c7db40
	static float GetScreenPercentage();// 0xda69a6c 0x7873c7dc20
	static void GetPositionalTrackingCameraParameters(out Vector CameraOrigin, out Rotator CameraRotation, out float HFOV, out float VFOV, out float CameraDistance, out float NearPlane, out float FarPlane);// 0xda69d0c 0x7873c7dd00
	static Vector2D GetPlayAreaBounds(byte Origin);// 0xda67ed0 0x7873c7dde0
	static float GetPixelDensity();// 0xda69a38 0x7873c7dec0
	static void GetOrientationAndPosition(out Rotator DeviceRotation, out Vector DevicePosition);// 0xda6a3e0 0x7873c7dfa0
	static int GetNumOfTrackingSensors();// 0xda6a374 0x7873c7e080
	static void GetMotionControllerData(Object* WorldContext, const enum Hand, out XRMotionControllerData MotionControllerData);// 0xda68834 0x7873c7e160
	static byte GetHMDWornState();// 0xda6a4d4 0x7873c7e240
	static FName GetHMDDeviceName();// 0xda6a5ec 0x7873c7e320
	static void GetHMDData(Object* WorldContext, out XRHMDData HMDData);// 0xda689c0 0x7873c7e400
	static void GetDeviceWorldPose(Object* WorldContext, out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0xda68b80 0x7873c7e4e0
	static void GetDevicePose(out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0xda68db0 0x7873c7e5c0
	static bool GetControllerTransformForTime(Object* WorldContext, const int ControllerIndex, const FName MotionSource, Timespan Time, out bool bTimeWasUsed, out Rotator Orientation, out Vector Position, out bool bProvidedLinearVelocity, out Vector LinearVelocity, out bool bProvidedAngularVelocity, out Vector AngularVelocityRadPerSec, out bool bProvidedLinearAcceleration, out Vector LinearAcceleration);// 0xda67f78 0x7873c7e6a0
	static XRDeviceId[] EnumerateTrackedDevices(const FName SystemId, enum DeviceType);// 0xda68fa0 0x7873c7adc0
	static void EnableLowPersistenceMode(bool bEnable);// 0xda69c64 0x7873c7aea0
	static bool EnableHMD(bool bEnable);// 0xda6a620 0x7873c7af80
	static void DisconnectRemoteXRDevice();// 0xda6865c 0x7873c7b060
	static byte ConnectRemoteXRDevice(FString IpAddress, const int BitRate);// 0xda68670 0x7873c7b140
	static bool ConfigureGestures(out const XRGestureConfig GestureConfig);// 0xda68770 0x7873c7b220
	static void ClearXRTimedInputActionDelegate(out const FName ActionPath);// 0xda683e0 0x7873c7b300
	static void CalibrateExternalTrackingToHMD(out const Transform ExternalTrackingTransform);// 0xda69658 0x7873c7b3e0
	static void BreakKey(Key InKey, out FString InteractionProfile, out enum Hand, out FName MotionSource, out FString Indentifier, out FString Component);// 0xda67b80 0x7873c7b4c0

--------------------------------
Class: XRDeviceId
	FName SystemName;//[Offset: 0x0, Size: 0x8] 0x7873925c00
	int DeviceID;//[Offset: 0x8, Size: 0x4] 0x7873925c80

--------------------------------
Class: XRMotionControllerData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873925d00
	FName DeviceName;//[Offset: 0x4, Size: 0x8] 0x7873925d80
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10] 0x7873925e00
	enum DeviceVisualType;//[Offset: 0x1c, Size: 0x1] 0x78736ad6c0
	enum HandIndex;//[Offset: 0x1d, Size: 0x1] 0x78736ad620
	enum TrackingStatus;//[Offset: 0x1e, Size: 0x1] 0x78736ad580
	Vector GripPosition;//[Offset: 0x20, Size: 0x18] 0x7873926000
	Quat GripRotation;//[Offset: 0x40, Size: 0x20] 0x7873926080
	Vector AimPosition;//[Offset: 0x60, Size: 0x18] 0x7873926100
	Quat AimRotation;//[Offset: 0x80, Size: 0x20] 0x7873926180
	Vector[] HandKeyPositions;//[Offset: 0xa0, Size: 0x10] 0x78736ad4e0
	Quat[] HandKeyRotations;//[Offset: 0xb0, Size: 0x10] 0x78736ad440
	float[] HandKeyRadii;//[Offset: 0xc0, Size: 0x10] 0x78736ad3a0
	bool bIsGrasped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1] 0x7873924280

--------------------------------
Class: XRHMDData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873924300
	FName DeviceName;//[Offset: 0x4, Size: 0x8] 0x7873924380
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10] 0x7873924400
	enum TrackingStatus;//[Offset: 0x1c, Size: 0x1] 0x78736ad300
	Vector Position;//[Offset: 0x20, Size: 0x18] 0x7873924500
	Quat Rotation;//[Offset: 0x40, Size: 0x20] 0x7873924580

--------------------------------
Class: Timespan

--------------------------------
Class: XRGestureConfig
	bool bTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873925900
	bool bHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7873925980
	enum AxisGesture;//[Offset: 0x2, Size: 0x1] 0x78736ad760
	bool bNavigationAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7873925a80
	bool bNavigationAxisY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7873925b00
	bool bNavigationAxisZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7873925b80

--------------------------------
Class: MotionTrackedDeviceFunctionLibrary.BlueprintFunctionLibrary.Object
	static void SetIsControllerMotionTrackingEnabledByDefault(bool Enable);// 0xda6e528 0x7873c91900
	static bool IsMotionTrackingEnabledForSource(int PlayerIndex, FName SourceName);// 0xda6e2d0 0x7873c919e0
	static bool IsMotionTrackingEnabledForDevice(int PlayerIndex, enum Hand);// 0xda6e3c8 0x7873c91ac0
	static bool IsMotionTrackingEnabledForComponent(const MotionControllerComponent* MotionControllerComponent);// 0xda6e224 0x7873c91ba0
	static bool IsMotionTrackedDeviceCountManagementNecessary();// 0xda6e5c8 0x7873c91c80
	static bool IsMotionSourceTracking(int PlayerIndex, FName SourceName);// 0xda6daa0 0x7873c7e780
	static int GetMotionTrackingEnabledControllerCount();// 0xda6e4c0 0x7873c7e860
	static int GetMaximumMotionTrackedControllerCount();// 0xda6e4f4 0x7873c7e940
	static FName GetActiveTrackingSystemName();// 0xda6db98 0x7873c7ea20
	static FName[] EnumerateMotionSources();// 0xda6dbcc 0x7873c7eb00
	static bool EnableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0xda6e034 0x7873c7ebe0
	static bool EnableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0xda6e12c 0x7873c7ecc0
	static bool EnableMotionTrackingForComponent(MotionControllerComponent* MotionControllerComponent);// 0xda6df88 0x7873c7eda0
	static void DisableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0xda6ddc0 0x7873c7ee80
	static void DisableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0xda6dea4 0x7873c7ef60
	static void DisableMotionTrackingOfControllersForPlayer(int PlayerIndex);// 0xda6dc7c 0x7873c7f040
	static void DisableMotionTrackingOfAllControllers();// 0xda6dd14 0x7873c7f120
	static void DisableMotionTrackingForComponent(const MotionControllerComponent* MotionControllerComponent);// 0xda6dd28 0x7873c7f200

--------------------------------
Class: MotionControllerComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PlayerIndex;//[Offset: 0x548, Size: 0x4] 0x7873c8be80
	enum Hand;//[Offset: 0x54c, Size: 0x1] 0x7873bbeca0
	FName MotionSource;//[Offset: 0x550, Size: 0x8] 0x7873c8bf80
	bool bDisableLowLatencyUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x558, Size: 0x1] 0x7873c8c000
	enum CurrentTrackingStatus;//[Offset: 0x559, Size: 0x1] 0x7873bbed40
	bool bDisplayDeviceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55a, Size: 0x1] 0x7873c8c100
	FName DisplayModelSource;//[Offset: 0x55c, Size: 0x8] 0x7873c8c180
	StaticMesh* CustomDisplayMesh;//[Offset: 0x568, Size: 0x8] 0x7873c8c200
	MaterialInterface*[] DisplayMeshMaterialOverrides;//[Offset: 0x570, Size: 0x10] 0x7873bbede0
	PrimitiveComponent* DisplayComponent;//[Offset: 0x618, Size: 0x8] 0x7873c8c300
	void SetTrackingSource(const enum NewSource);// 0xda6cf88 0x7873c7f2e0
	void SetTrackingMotionSource(const FName NewSource);// 0xda6ceac 0x7873c7f3c0
	void SetShowDeviceModel(const bool bShowControllerModel);// 0xda6d180 0x7873c7f4a0
	void SetDisplayModelSource(const FName NewDisplayModelSource);// 0xda6d0d8 0x7873c7f580
	void SetCustomDisplayMesh(StaticMesh* NewDisplayMesh);// 0xda6d030 0x7873c7f660
	void SetAssociatedPlayerIndex(const int NewPlayer);// 0xda6ce04 0x7873c7f740
	void OnMotionControllerUpdated();// 0xb8f1ab4 0x7873c7f820
	bool IsTracked();// 0xda6d230 0x7873c7f900
	enum GetTrackingSource();// 0xda6cf54 0x7873c7f9e0
	float GetParameterValue(FName InName, out bool bValueFound);// 0xda6ccfc 0x7873c7fac0
	Vector GetHandJointPosition(int jointIndex, out bool bValueFound);// 0xda6cbf0 0x7873c7fba0

--------------------------------
Class: AsyncTask_LoadXRDeviceVisComponent.BlueprintAsyncActionBase.Object
	delegate OnModelLoaded;//[Offset: 0x30, Size: 0x10] 0x7873c8e180
	delegate OnLoadFailure;//[Offset: 0x40, Size: 0x10] 0x7873c8e200
	PrimitiveComponent* SpawnedComponent;//[Offset: 0x58, Size: 0x8] 0x7873c8e280
	static AsyncTask_LoadXRDeviceVisComponent* AddNamedDeviceVisualizationComponentAsync(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId, out PrimitiveComponent* NewComponent);// 0xda6fe10 0x7873c91580
	static AsyncTask_LoadXRDeviceVisComponent* AddDeviceVisualizationComponentAsync(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform, out PrimitiveComponent* NewComponent);// 0xda6fc04 0x7873c91660

--------------------------------
Class: TypedElementCounterInterface.Interface.Object

--------------------------------
Class: TestTypedElementInterfaceC.Interface.Object
	bool GetIsTested(out const ScriptTypedElementHandle InElementHandle);// 0xea60a4c 0x7873c90940

--------------------------------
Class: TestTypedElementInterfaceBAndC_Typed.Object

--------------------------------
Class: TypedElementRegistry.Object
	static TypedElementRegistry* GetInstance();// 0xea66a3c 0x7873c92c40
	Object* GetElementInterface(out const ScriptTypedElementHandle InElementHandle, const class Interface InBaseInterfaceType);// 0xea668ec 0x7873c92d20

--------------------------------
Class: FoliageType.Object
	Guid UpdateGuid;//[Offset: 0x28, Size: 0x10] 0x7873ca7f00
	float Density;//[Offset: 0x38, Size: 0x4] 0x7873ca7f80
	float DensityAdjustmentFactor;//[Offset: 0x3c, Size: 0x4] 0x7873ca8000
	float Radius;//[Offset: 0x40, Size: 0x4] 0x7873ca8080
	bool bSingleInstanceModeOverrideRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7873ca8100
	float SingleInstanceModeRadius;//[Offset: 0x48, Size: 0x4] 0x7873ca8180
	enum Scaling;//[Offset: 0x4c, Size: 0x1] 0x7873cc10a0
	FloatInterval ScaleX;//[Offset: 0x50, Size: 0x8] 0x7873ca8280
	FloatInterval ScaleY;//[Offset: 0x58, Size: 0x8] 0x7873ca8300
	FloatInterval ScaleZ;//[Offset: 0x60, Size: 0x8] 0x7873ca8380
	FoliageVertexColorChannelMask VertexColorMaskByChannel;//[Offset: 0x68, Size: 0xc] 0x7873ca8400
	byte VertexColorMask;//[Offset: 0x98, Size: 0x1] 0x7873ca6380
	float VertexColorMaskThreshold;//[Offset: 0x9c, Size: 0x4] 0x7873ca6400
	bool VertexColorMaskInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7873ca6480
	FloatInterval ZOffset;//[Offset: 0xa4, Size: 0x8] 0x7873ca6500
	bool AlignToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x7873ca6580
	bool AverageNormal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x7873ca6600
	bool AverageNormalSingleComponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1] 0x7873ca6680
	float AlignMaxAngle;//[Offset: 0xb0, Size: 0x4] 0x7873ca6700
	bool RandomYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1] 0x7873ca6780
	float RandomPitchAngle;//[Offset: 0xb8, Size: 0x4] 0x7873ca6800
	FloatInterval GroundSlopeAngle;//[Offset: 0xbc, Size: 0x8] 0x7873ca6880
	FloatInterval Height;//[Offset: 0xc4, Size: 0x8] 0x7873ca6900
	FName[] LandscapeLayers;//[Offset: 0xd0, Size: 0x10] 0x7873cc1140
	float MinimumLayerWeight;//[Offset: 0xe0, Size: 0x4] 0x7873ca6a00
	FName[] ExclusionLandscapeLayers;//[Offset: 0xe8, Size: 0x10] 0x7873cc11e0
	float MinimumExclusionLayerWeight;//[Offset: 0xf8, Size: 0x4] 0x7873ca6b00
	FName LandscapeLayer;//[Offset: 0xfc, Size: 0x8] 0x7873ca6b80
	bool CollisionWithWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 0x1] 0x7873ca6c00
	Vector CollisionScale;//[Offset: 0x108, Size: 0x18] 0x7873ca6c80
	int AverageNormalSampleCount;//[Offset: 0x120, Size: 0x4] 0x7873ca6d00
	BoxSphereBounds MeshBounds;//[Offset: 0x128, Size: 0x38] 0x7873ca6d80
	Vector LowBoundOriginRadius;//[Offset: 0x160, Size: 0x18] 0x7873ca6e00
	byte Mobility;//[Offset: 0x178, Size: 0x1] 0x7873ca6e80
	Int32Interval CullDistance;//[Offset: 0x17c, Size: 0x8] 0x7873ca6f00
	bool bEnableStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x184, Size: 0x1] 0x7873ca6f80
	bool CastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x184, Size: 0x1] 0x7873ca7000
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x184, Size: 0x1] 0x7873ca7080
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x184, Size: 0x1] 0x7873ca7100
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x184, Size: 0x1] 0x7873ca7180
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x184, Size: 0x1] 0x7873ca7200
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x184, Size: 0x1] 0x7873ca7280
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x184, Size: 0x1] 0x7873ca7300
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x185, Size: 0x1] 0x7873ca7380
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x185, Size: 0x1] 0x7873ca5300
	int OverriddenLightMapRes;//[Offset: 0x188, Size: 0x4] 0x7873ca5380
	enum LightmapType;//[Offset: 0x18c, Size: 0x1] 0x7873cc1280
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18d, Size: 0x1] 0x7873ca5480
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18d, Size: 0x1] 0x7873ca5500
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18d, Size: 0x1] 0x7873ca5580
	BodyInstance BodyInstance;//[Offset: 0x190, Size: 0x198] 0x7873ca5600
	byte CustomNavigableGeometry;//[Offset: 0x328, Size: 0x1] 0x7873ca5680
	LightingChannels LightingChannels;//[Offset: 0x329, Size: 0x1] 0x7873ca5700
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32a, Size: 0x1] 0x7873ca5780
	enum CustomDepthStencilWriteMask;//[Offset: 0x32b, Size: 0x1] 0x7873cc1320
	int CustomDepthStencilValue;//[Offset: 0x32c, Size: 0x4] 0x7873ca5880
	int TranslucencySortPriority;//[Offset: 0x330, Size: 0x4] 0x7873ca5900
	float CollisionRadius;//[Offset: 0x334, Size: 0x4] 0x7873ca5980
	float ShadeRadius;//[Offset: 0x338, Size: 0x4] 0x7873ca5a00
	int NumSteps;//[Offset: 0x33c, Size: 0x4] 0x7873ca5a80
	float InitialSeedDensity;//[Offset: 0x340, Size: 0x4] 0x7873ca5b00
	float AverageSpreadDistance;//[Offset: 0x344, Size: 0x4] 0x7873ca5b80
	float SpreadVariance;//[Offset: 0x348, Size: 0x4] 0x7873ca5c00
	int SeedsPerStep;//[Offset: 0x34c, Size: 0x4] 0x7873ca5c80
	int DistributionSeed;//[Offset: 0x350, Size: 0x4] 0x7873ca5d00
	float MaxInitialSeedOffset;//[Offset: 0x354, Size: 0x4] 0x7873ca5d80
	bool bCanGrowInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1] 0x7873ca5e00
	bool bSpawnsInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 0x1] 0x7873ca5e80
	float MaxInitialAge;//[Offset: 0x35c, Size: 0x4] 0x7873ca5f00
	float MaxAge;//[Offset: 0x360, Size: 0x4] 0x7873ca5f80
	float OverlapPriority;//[Offset: 0x364, Size: 0x4] 0x7873ca6000
	FloatInterval ProceduralScale;//[Offset: 0x368, Size: 0x8] 0x7873ca6080
	RuntimeFloatCurve ScaleCurve;//[Offset: 0x370, Size: 0x88] 0x7873ca6100
	FoliageDensityFalloff DensityFalloff;//[Offset: 0x3f8, Size: 0x90] 0x7873ca6180
	int ChangeCount;//[Offset: 0x488, Size: 0x4] 0x7873ca6200
	bool ReapplyDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48c, Size: 0x1] 0x7873ca6280
	bool ReapplyRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48c, Size: 0x1] 0x7873ca6300
	bool ReapplyAlignToNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48c, Size: 0x1] 0x7873ca4280
	bool ReapplyRandomYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48c, Size: 0x1] 0x7873ca4300
	bool ReapplyScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48c, Size: 0x1] 0x7873ca4380
	bool ReapplyScaleX;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x48c, Size: 0x1] 0x7873ca4400
	bool ReapplyScaleY;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x48c, Size: 0x1] 0x7873ca4480
	bool ReapplyScaleZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x48c, Size: 0x1] 0x7873ca4500
	bool ReapplyRandomPitchAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48d, Size: 0x1] 0x7873ca4580
	bool ReapplyGroundSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48d, Size: 0x1] 0x7873ca4600
	bool ReapplyHeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48d, Size: 0x1] 0x7873ca4680
	bool ReapplyLandscapeLayers;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48d, Size: 0x1] 0x7873ca4700
	bool ReapplyZOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48d, Size: 0x1] 0x7873ca4780
	bool ReapplyCollisionWithWorld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x48d, Size: 0x1] 0x7873ca4800
	bool ReapplyVertexColorMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x48d, Size: 0x1] 0x7873ca4880
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x48d, Size: 0x1] 0x7873ca4900
	bool bEnableDiscardOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48e, Size: 0x1] 0x7873ca4980
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x490, Size: 0x10] 0x7873cc13c0
	int VirtualTextureCullMips;//[Offset: 0x4a0, Size: 0x4] 0x7873ca4a80
	enum VirtualTextureRenderPassType;//[Offset: 0x4a4, Size: 0x1] 0x7873cc1460

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4] 0x788a4dd800
	float Max;//[Offset: 0x4, Size: 0x4] 0x788a4dd780

--------------------------------
Class: FoliageVertexColorChannelMask
	bool UseMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7873927380
	float MaskThreshold;//[Offset: 0x4, Size: 0x4] 0x7873925300
	bool InvertMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7873925380

--------------------------------
Class: FoliageDensityFalloff
	bool bUseFalloffCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873927280
	RuntimeFloatCurve FalloffCurve;//[Offset: 0x8, Size: 0x88] 0x7873927300

--------------------------------
Class: InstancedFoliageActor.ISMPartitionActor.PartitionActor.Actor.Object

--------------------------------
Class: InteractiveFoliageComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ProceduralFoliageBlockingVolume.Volume.Brush.Actor.Object
	ProceduralFoliageVolume* ProceduralFoliageVolume;//[Offset: 0x2c0, Size: 0x8] 0x7873ca8b80
	FoliageDensityFalloff DensityFalloff;//[Offset: 0x2c8, Size: 0x90] 0x7873ca8c00

--------------------------------
Class: ProceduralFoliageVolume.Volume.Brush.Actor.Object
	ProceduralFoliageComponent* ProceduralComponent;//[Offset: 0x2c0, Size: 0x8] 0x7873ca8500

--------------------------------
Class: ProceduralFoliageComponent.ActorComponent.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0xb0, Size: 0x8] 0x7873ca8980
	float TileOverlap;//[Offset: 0xb8, Size: 0x4] 0x7873ca8a00
	Volume* SpawningVolume;//[Offset: 0xc0, Size: 0x8] 0x7873ca8a80
	Guid ProceduralGuid;//[Offset: 0xc8, Size: 0x10] 0x7873ca8b00

--------------------------------
Class: ProceduralFoliageSpawner.Object
	int RandomSeed;//[Offset: 0x28, Size: 0x4] 0x7873ca8680
	float TileSize;//[Offset: 0x2c, Size: 0x4] 0x7873ca8700
	int NumUniqueTiles;//[Offset: 0x30, Size: 0x4] 0x7873ca8780
	float MinimumQuadTreeSize;//[Offset: 0x34, Size: 0x4] 0x7873ca8800
	FoliageTypeObject[] FoliageTypes;//[Offset: 0x40, Size: 0x10] 0x7873cc0c40
	void Simulate(int NumSteps);// 0xea877e8 0x7873c94ca0

--------------------------------
Class: FoliageTypeObject
	Object* FoliageTypeObject;//[Offset: 0x0, Size: 0x8] 0x7873927100
	FoliageType* TypeInstance;//[Offset: 0x8, Size: 0x8] 0x7873927180
	bool bIsAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7873927200
	class FoliageType_InstancedStaticMesh* Type;//[Offset: 0x18, Size: 0x8] 0x78736ad800

--------------------------------
Class: FoliageType_InstancedStaticMesh.FoliageType.Object
	StaticMesh* Mesh;//[Offset: 0x4a8, Size: 0x8] 0x7873ca7d00
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x4b0, Size: 0x10] 0x7873cc0e20
	class FoliageInstancedStaticMeshComponent* ComponentClass;//[Offset: 0x4c0, Size: 0x8] 0x7873cc0ec0

--------------------------------
Class: FoliageInstancedStaticMeshComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate OnInstanceTakePointDamage;//[Offset: 0x8a8, Size: 0x10] 0x7873ca5200
	delegate OnInstanceTakeRadialDamage;//[Offset: 0x8b8, Size: 0x10] 0x7873ca5280
	bool bEnableDiscardOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 0x1] 0x7873ca3200
	Guid GenerationGuid;//[Offset: 0x8cc, Size: 0x10] 0x7873ca3280

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseTranslatedInstanceSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x730, Size: 0x1] 0x7873ca3300
	Vector TranslatedInstanceSpaceOrigin;//[Offset: 0x738, Size: 0x18] 0x7873ca3380
	int[] SortedInstances;//[Offset: 0x750, Size: 0x10] 0x7873bbf880
	int NumBuiltInstances;//[Offset: 0x760, Size: 0x4] 0x7873ca3480
	Box BuiltInstanceBounds;//[Offset: 0x768, Size: 0x38] 0x7873ca3500
	Box UnbuiltInstanceBounds;//[Offset: 0x7a0, Size: 0x38] 0x7873ca3580
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x7d8, Size: 0x10] 0x7873bbf920
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e8, Size: 0x1] 0x7873ca3680
	int OcclusionLayerNumNodes;//[Offset: 0x7f0, Size: 0x4] 0x7873ca3700
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x7f8, Size: 0x38] 0x7873ca3780
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 0x1] 0x7873ca3800
	int InstanceCountToRender;//[Offset: 0x834, Size: 0x4] 0x7873ca3880

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x5d8, Size: 0x4] 0x7873caa500

--------------------------------
Class: LandscapeProxy.PartitionActor.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x290, Size: 0x8] 0x7873cabc80
	Guid LandscapeGuid;//[Offset: 0x298, Size: 0x10] 0x7873cabd00
	IntPoint LandscapeSectionOffset;//[Offset: 0x2a8, Size: 0x8] 0x7873cabd80
	int MaxLODLevel;//[Offset: 0x2b0, Size: 0x4] 0x7873cabe00
	float LODDistanceFactor;//[Offset: 0x2b4, Size: 0x4] 0x7873cabe80
	byte LODFalloff;//[Offset: 0x2b8, Size: 0x1] 0x7873cabf00
	float ComponentScreenSizeToUseSubSections;//[Offset: 0x2bc, Size: 0x4] 0x7873cabf80
	float LOD0ScreenSize;//[Offset: 0x2c0, Size: 0x4] 0x7873cac000
	float LOD0DistributionSetting;//[Offset: 0x2c4, Size: 0x4] 0x7873cac080
	float LODDistributionSetting;//[Offset: 0x2c8, Size: 0x4] 0x7873cac100
	int StaticLightingLOD;//[Offset: 0x2cc, Size: 0x4] 0x7873cac180
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x2d0, Size: 0x8] 0x7873cac200
	float StreamingDistanceMultiplier;//[Offset: 0x2d8, Size: 0x4] 0x7873cac280
	MaterialInterface* LandscapeMaterial;//[Offset: 0x2e0, Size: 0x8] 0x7873cac300
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x308, Size: 0x8] 0x7873cac380
	LandscapeProxyMaterialOverride[] LandscapeMaterialsOverride;//[Offset: 0x310, Size: 0x10] 0x7873cc06a0
	bool bMeshHoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1] 0x7873cac480
	byte MeshHolesMaxLod;//[Offset: 0x321, Size: 0x1] 0x7873cac500
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x328, Size: 0x10] 0x7873cc0740
	bool bSetCreateRuntimeVirtualTextureVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1] 0x7873cac600
	int VirtualTextureNumLods;//[Offset: 0x33c, Size: 0x4] 0x7873caa580
	int VirtualTextureLodBias;//[Offset: 0x340, Size: 0x4] 0x7873caa600
	enum VirtualTextureRenderPassType;//[Offset: 0x344, Size: 0x1] 0x7873cc07e0
	float NegativeZBoundsExtension;//[Offset: 0x348, Size: 0x4] 0x7873caa700
	float PositiveZBoundsExtension;//[Offset: 0x34c, Size: 0x4] 0x7873caa780
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x350, Size: 0x10] 0x7873cc0880
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x360, Size: 0x10] 0x7873cc0920
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x370, Size: 0x10] 0x7873cc09c0
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 0x1] 0x7873caa980
	float StaticLightingResolution;//[Offset: 0x3e8, Size: 0x4] 0x7873caaa00
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ec, Size: 0x1] 0x7873caaa80
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3ec, Size: 0x1] 0x7873caab00
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3ec, Size: 0x1] 0x7873caab80
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3ec, Size: 0x1] 0x7873caac00
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3ec, Size: 0x1] 0x7873caac80
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3ec, Size: 0x1] 0x7873caad00
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3ec, Size: 0x1] 0x7873caad80
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3ec, Size: 0x1] 0x7873caae00
	LightingChannels LightingChannels;//[Offset: 0x3ed, Size: 0x1] 0x7873caae80
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ee, Size: 0x1] 0x7873caaf00
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3ee, Size: 0x1] 0x7873caaf80
	enum CustomDepthStencilWriteMask;//[Offset: 0x3ef, Size: 0x1] 0x7873cc0a60
	int CustomDepthStencilValue;//[Offset: 0x3f0, Size: 0x4] 0x7873cab080
	float LDMaxDrawDistance;//[Offset: 0x3f4, Size: 0x4] 0x7873cab100
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x3f8, Size: 0x18] 0x7873cab180
	int CollisionMipLevel;//[Offset: 0x410, Size: 0x4] 0x7873cab200
	int SimpleCollisionMipLevel;//[Offset: 0x414, Size: 0x4] 0x7873cab280
	float CollisionThickness;//[Offset: 0x418, Size: 0x4] 0x7873cab300
	BodyInstance BodyInstance;//[Offset: 0x420, Size: 0x198] 0x7873cab380
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b8, Size: 0x1] 0x7873cab400
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b8, Size: 0x1] 0x7873cab480
	int ComponentSizeQuads;//[Offset: 0x5bc, Size: 0x4] 0x7873cab500
	int SubsectionSizeQuads;//[Offset: 0x5c0, Size: 0x4] 0x7873cab580
	int NumSubsections;//[Offset: 0x5c4, Size: 0x4] 0x7873ca9500
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c8, Size: 0x1] 0x7873ca9580
	bool bFillCollisionUnderLandscapeForNavmesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c8, Size: 0x1] 0x7873ca9600
	bool bUseDynamicMaterialInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 0x1] 0x7873ca9680
	enum NavigationGeometryGatheringMode;//[Offset: 0x5ca, Size: 0x1] 0x7873cc0b00
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cb, Size: 0x1] 0x7873ca9780
	bool bHasLayersContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 0x1] 0x7873ca9800
	void SetLandscapeMaterialVectorParameterValue(FName ParameterName, LinearColor Value);// 0xeb13428 0x7873c945a0
	void SetLandscapeMaterialTextureParameterValue(FName ParameterName, Texture* Value);// 0xeb13518 0x7873c94680
	void SetLandscapeMaterialScalarParameterValue(FName ParameterName, float Value);// 0xeb13334 0x7873c94760
	bool LandscapeExportHeightmapToRenderTarget(TextureRenderTarget2D* InRenderTarget, bool InExportHeightIntoRGChannel, bool InExportLandscapeProxies);// 0xeb131dc 0x7873c94840
	void EditorSetLandscapeMaterial(MaterialInterface* NewLandscapeMaterial);// 0xeb139e4 0x7873c94920
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer, FName EditLayerName);// 0xeb13608 0x7873c94a00
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0xeb13b3c 0x7873c94ae0
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);// 0xeb13a8c 0x7873c94bc0

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x548, Size: 0x10] 0x7873cc1c80
	LandscapeSplineSegment*[] Segments;//[Offset: 0x558, Size: 0x10] 0x7873cc1d20
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x568, Size: 0x10] 0x7873cc1dc0
	SplineMeshComponent*[] GetSplineMeshComponents();// 0xeb17e8c 0x7873c96fa0

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 0x18] 0x7873cd0600
	Rotator Rotation;//[Offset: 0x40, Size: 0x18] 0x7873cd0680
	float Width;//[Offset: 0x58, Size: 0x4] 0x7873cd0700
	float LayerWidthRatio;//[Offset: 0x5c, Size: 0x4] 0x7873cd0780
	float SideFalloff;//[Offset: 0x60, Size: 0x4] 0x7873cd0800
	float LeftSideFalloffFactor;//[Offset: 0x64, Size: 0x4] 0x7873cd0880
	float RightSideFalloffFactor;//[Offset: 0x68, Size: 0x4] 0x7873cd0900
	float LeftSideLayerFalloffFactor;//[Offset: 0x6c, Size: 0x4] 0x7873cd0980
	float RightSideLayerFalloffFactor;//[Offset: 0x70, Size: 0x4] 0x7873cd0a00
	float EndFalloff;//[Offset: 0x74, Size: 0x4] 0x7873cd0a80
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x78, Size: 0x10] 0x7873cc1f00
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x88, Size: 0x10] 0x7873cc1fa0
	Box Bounds;//[Offset: 0x98, Size: 0x38] 0x7873cd0c00
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0xd0, Size: 0x8] 0x7873cd0c80

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x8] 0x7873929300
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7873929380

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 0x18] 0x7873cd0180
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 0x18] 0x7873cd0200
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10] 0x7873cc1b40
	Box Bounds;//[Offset: 0x80, Size: 0x38] 0x7873cd0300
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xb8, Size: 0x10] 0x7873cc1be0

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x8] 0x7873928c80
	float TangentLen;//[Offset: 0x8, Size: 0x4] 0x7873928d00
	FName SocketName;//[Offset: 0xc, Size: 0x8] 0x7873928d80

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 0x18] 0x7873928e00
	Vector Left;//[Offset: 0x18, Size: 0x18] 0x7873928e80
	Vector Right;//[Offset: 0x30, Size: 0x18] 0x7873928f00
	Vector FalloffLeft;//[Offset: 0x48, Size: 0x18] 0x7873928f80
	Vector FalloffRight;//[Offset: 0x60, Size: 0x18] 0x7873929000
	Vector LayerLeft;//[Offset: 0x78, Size: 0x18] 0x7873929080
	Vector LayerRight;//[Offset: 0x90, Size: 0x18] 0x7873929100
	Vector LayerFalloffLeft;//[Offset: 0xa8, Size: 0x18] 0x7873929180
	Vector LayerFalloffRight;//[Offset: 0xc0, Size: 0x18] 0x7873929200
	float StartEndFalloff;//[Offset: 0xd8, Size: 0x4] 0x7873929280

--------------------------------
Class: LandscapeProxyMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4] 0x7873929400
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x7873929480

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x548, Size: 0x4] 0x7873cae380
	int SectionBaseY;//[Offset: 0x54c, Size: 0x4] 0x7873cae400
	int ComponentSizeQuads;//[Offset: 0x550, Size: 0x4] 0x7873cae480
	int SubsectionSizeQuads;//[Offset: 0x554, Size: 0x4] 0x7873cae500
	int NumSubsections;//[Offset: 0x558, Size: 0x4] 0x7873cae580
	MaterialInterface* OverrideMaterial;//[Offset: 0x560, Size: 0x8] 0x7873cae600
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x568, Size: 0x8] 0x7873cae680
	LandscapeComponentMaterialOverride[] OverrideMaterials;//[Offset: 0x570, Size: 0x10] 0x7873cc0060
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x580, Size: 0x10] 0x7873cc0100
	MaterialInstanceDynamic*[] MaterialInstancesDynamic;//[Offset: 0x590, Size: 0x10] 0x7873cc01a0
	int8[] LODIndexToMaterialIndex;//[Offset: 0x5a0, Size: 0x10] 0x7873cc0240
	Texture2D* XYOffsetmapTexture;//[Offset: 0x5b0, Size: 0x8] 0x7873cac800
	Vector4 WeightmapScaleBias;//[Offset: 0x5c0, Size: 0x20] 0x7873cac880
	float WeightmapSubsectionOffset;//[Offset: 0x5e0, Size: 0x4] 0x7873cac900
	Vector4 HeightmapScaleBias;//[Offset: 0x5f0, Size: 0x20] 0x7873cac980
	Box CachedLocalBox;//[Offset: 0x610, Size: 0x38] 0x7873caca00
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x648, Size: 0x1c] 0x7873caca80
	Texture2D* HeightmapTexture;//[Offset: 0x668, Size: 0x8] 0x7873cacb00
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x670, Size: 0x10] 0x7873cc02e0
	Texture2D*[] WeightmapTextures;//[Offset: 0x680, Size: 0x10] 0x7873cc0380
	LandscapeLODStreamingProxy* LODStreamingProxy;//[Offset: 0x690, Size: 0x8] 0x7873cacc80
	Guid MapBuildDataId;//[Offset: 0x698, Size: 0x10] 0x7873cacd00
	Guid[] IrrelevantLights;//[Offset: 0x6a8, Size: 0x10] 0x7873cc0420
	int CollisionMipLevel;//[Offset: 0x6b8, Size: 0x4] 0x7873cace00
	int SimpleCollisionMipLevel;//[Offset: 0x6bc, Size: 0x4] 0x7873cace80
	float NegativeZBoundsExtension;//[Offset: 0x6c0, Size: 0x4] 0x7873cacf00
	float PositiveZBoundsExtension;//[Offset: 0x6c4, Size: 0x4] 0x7873cacf80
	float StaticLightingResolution;//[Offset: 0x6c8, Size: 0x4] 0x7873cad000
	int ForcedLOD;//[Offset: 0x6cc, Size: 0x4] 0x7873cad080
	int LODBias;//[Offset: 0x6d0, Size: 0x4] 0x7873cad100
	Guid StateId;//[Offset: 0x6d4, Size: 0x10] 0x7873cad180
	Guid BakedTextureMaterialGuid;//[Offset: 0x6e4, Size: 0x10] 0x7873cad200
	Guid LastBakedTextureMaterialGuid;//[Offset: 0x6f4, Size: 0x10] 0x7873cad280
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x708, Size: 0x8] 0x7873cad300
	byte MobileBlendableLayerMask;//[Offset: 0x710, Size: 0x1] 0x7873cad380
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x718, Size: 0x8] 0x7873cad400
	MaterialInterface*[] MobileMaterialInterfaces;//[Offset: 0x720, Size: 0x10] 0x7873cc04c0
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x730, Size: 0x10] 0x7873cc0560
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0xeb0a934 0x7873c93f80
	float EditorGetPaintLayerWeightByNameAtLocation(out const Vector InLocation, const FName InPaintLayerName);// 0xeb0a72c 0x7873c94060
	float EditorGetPaintLayerWeightAtLocation(out const Vector InLocation, LandscapeLayerInfoObject* PaintLayer);// 0xeb0a830 0x7873c94140

--------------------------------
Class: LandscapeComponentMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4] 0x7873928300
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x7873928380

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8] 0x7873caf480
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8] 0x7873caf500
	float Hardness;//[Offset: 0x38, Size: 0x4] 0x7873caf580
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 0x10] 0x7873caf600

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x548, Size: 0x10] 0x7873cc2720
	int SectionBaseX;//[Offset: 0x558, Size: 0x4] 0x7873cad980
	int SectionBaseY;//[Offset: 0x55c, Size: 0x4] 0x7873cada00
	int CollisionSizeQuads;//[Offset: 0x560, Size: 0x4] 0x7873cada80
	float CollisionScale;//[Offset: 0x564, Size: 0x4] 0x7873cadb00
	int SimpleCollisionSizeQuads;//[Offset: 0x568, Size: 0x4] 0x7873cadb80
	byte[] CollisionQuadFlags;//[Offset: 0x570, Size: 0x10] 0x7873cc27c0
	Guid HeightfieldGuid;//[Offset: 0x580, Size: 0x10] 0x7873cadc80
	Box CachedLocalBox;//[Offset: 0x590, Size: 0x38] 0x7873cadd00
	LandscapeComponent* RenderComponent;//[Offset: 0x5c8, Size: 0x1c] 0x7873cadd80
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x5f8, Size: 0x10] 0x7873cc2860
	LandscapeComponent* GetRenderComponent();// 0xeb0c408 0x7873c93ea0

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8] 0x7873928400
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 0x1] 0x7873926380
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 0x1] 0x7873926400

--------------------------------
Class: LandscapeLODStreamingProxy.StreamableRenderAsset.Object

--------------------------------
Class: LandscapeGizmoRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeMeshProxyActor.Actor.Object
	LandscapeMeshProxyComponent* LandscapeMeshProxyComponent;//[Offset: 0x288, Size: 0x8] 0x7873cd0f80

--------------------------------
Class: LandscapeMeshProxyComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid LandscapeGuid;//[Offset: 0x5d8, Size: 0x10] 0x7873cd0e00
	IntPoint[] ProxyComponentBases;//[Offset: 0x5e8, Size: 0x10] 0x7873cc2040
	int8 ProxyLOD;//[Offset: 0x5f8, Size: 0x1] 0x7873cd0f00

--------------------------------
Class: LandscapeSettings.DeveloperSettings.Object
	int MaxNumberOfLayers;//[Offset: 0x38, Size: 0x4] 0x7873cd0d80

--------------------------------
Class: LandscapeStreamingProxy.LandscapeProxy.PartitionActor.Actor.Object
	Landscape* LandscapeActor;//[Offset: 0x5d0, Size: 0x1c] 0x7873cd0100

--------------------------------
Class: Landscape.LandscapeProxy.PartitionActor.Actor.Object

--------------------------------
Class: LandscapeWeightmapUsage.Object
	LandscapeComponent* ChannelUsage;//[Offset: 0x28, Size: 0x8] 0x7873cd2100
	Guid LayerGuid;//[Offset: 0x48, Size: 0x10] 0x7873cd0080

--------------------------------
Class: MaterialExpressionLandscapeLayerCoords.MaterialExpression.Object
	byte MappingType;//[Offset: 0x39, Size: 0x1] 0x7873cd1d00
	byte CustomUVType;//[Offset: 0x3a, Size: 0x1] 0x7873cd1d80
	float MappingScale;//[Offset: 0x3c, Size: 0x4] 0x7873cd1e00
	float MappingRotation;//[Offset: 0x40, Size: 0x4] 0x7873cd1e80
	float MappingPanU;//[Offset: 0x44, Size: 0x4] 0x7873cd1f00
	float MappingPanV;//[Offset: 0x48, Size: 0x4] 0x7873cd1f80

--------------------------------
Class: MaterialExpressionLandscapeLayerWeight.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x3c, Size: 0x14] 0x7873cd1780
	ExpressionInput Layer;//[Offset: 0x50, Size: 0x14] 0x7873cd1800
	FName ParameterName;//[Offset: 0x64, Size: 0x8] 0x7873cd1880
	float PreviewWeight;//[Offset: 0x6c, Size: 0x4] 0x7873cd1900
	Vector ConstBase;//[Offset: 0x70, Size: 0x18] 0x7873cd1980

--------------------------------
Class: FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object

--------------------------------
Class: EngineCustomTimeStep.Object

--------------------------------
Class: GenlockedTimecodeProvider.TimecodeProvider.Object
	bool bUseGenlockToCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x7873cd1180

--------------------------------
Class: MovieSceneCustomClockSource.Interface.Object
	void OnTick(float DeltaSeconds, float InPlayRate);// 0xec86818 0x7873c99000
	void OnStopPlaying(out const QualifiedFrameTime InStopTime);// 0xec86688 0x7873c95720
	void OnStartPlaying(out const QualifiedFrameTime InStartTime);// 0xec86750 0x7873c95800
	FrameTime OnRequestCurrentTime(out const QualifiedFrameTime InCurrentTime, float InPlayRate);// 0xec8656c 0x7873c958e0

--------------------------------
Class: MovieSceneEvaluationHook.Interface.Object

--------------------------------
Class: NodeAndChannelMappings.Interface.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10] 0x7873cc3d00

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 0x18] 0x787392af80
	Object* Object;//[Offset: 0x18, Size: 0x28] 0x787392b000
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x787392b080

--------------------------------
Class: MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x7873cd5080
	MovieSceneBoolChannel BoolCurve;//[Offset: 0xe0, Size: 0xd8] 0x7873cd5100

--------------------------------
Class: MovieSceneBoolChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10] 0x78736a2400
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x787388c580
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x787388c600
	bool[] Values;//[Offset: 0x68, Size: 0x10] 0x78736a2540

--------------------------------
Class: MovieSceneChannel

--------------------------------
Class: MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSceneComponentImpersonator.Interface.Object

--------------------------------
Class: MovieSceneEasingExternalCurve.Object
	CurveFloat* Curve;//[Offset: 0x30, Size: 0x8] 0x7873cd4680

--------------------------------
Class: MovieSceneEvalTimeSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneHookSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool bRequiresRangedHook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x7873cd6200
	bool bRequiresTriggerHooks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x7873cd6280

--------------------------------
Class: MovieSceneKeyProxy.Interface.Object

--------------------------------
Class: MovieSceneCachePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: TestMovieSceneTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bHighPassFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x7873cd5f00
	MovieSceneSection*[] SectionArray;//[Offset: 0xa0, Size: 0x10] 0x7873cc3760

--------------------------------
Class: TestMovieSceneSubSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: TestMovieSceneEvalHookTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] SectionArray;//[Offset: 0x90, Size: 0x10] 0x7873cc3620

--------------------------------
Class: MovieSceneTrackInstanceSystem.MovieSceneEntitySystem.Object
	MovieSceneTrackInstanceInstantiator* Instantiator;//[Offset: 0x48, Size: 0x8] 0x7873cd5b00

--------------------------------
Class: MovieSceneTrackInstanceInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: ChaosSolver.Object

--------------------------------
Class: FieldSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FieldSystem* FieldSystem;//[Offset: 0x548, Size: 0x8] 0x7873cd7900
	bool bIsWorldField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1] 0x7873cd7980
	bool bIsChaosField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1] 0x7873cd7a00
	ChaosSolverActor*[] SupportedSolvers;//[Offset: 0x558, Size: 0x10] 0x7873cc3440
	FieldObjectCommands ConstructionCommands;//[Offset: 0x568, Size: 0x30] 0x7873cd7b00
	FieldObjectCommands BufferCommands;//[Offset: 0x598, Size: 0x30] 0x7873cd7b80
	void ResetFieldSystem();// 0xece81d4 0x7873c982e0
	void RemovePersistentFields();// 0xece836c 0x7873c983c0
	void ApplyUniformVectorFalloffForce(bool Enabled, Vector Position, Vector Direction, float Radius, float Magnitude);// 0xece8864 0x7873c984a0
	void ApplyStrainField(bool Enabled, Vector Position, float Radius, float Magnitude, int Iterations);// 0xece8688 0x7873c98580
	void ApplyStayDynamicField(bool Enabled, Vector Position, float Radius);// 0xece8d14 0x7873c98660
	void ApplyRadialVectorFalloffForce(bool Enabled, Vector Position, float Radius, float Magnitude);// 0xece8a3c 0x7873c98740
	void ApplyRadialForce(bool Enabled, Vector Position, float Magnitude);// 0xece8bcc 0x7873c98820
	void ApplyPhysicsField(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0xece8504 0x7873c98900
	void ApplyLinearForce(bool Enabled, Vector Direction, float Magnitude);// 0xece8e5c 0x7873c989e0
	void AddPersistentField(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0xece8380 0x7873c98ac0
	void AddFieldCommand(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0xece81e8 0x7873c98ba0

--------------------------------
Class: FieldSystem.Object

--------------------------------
Class: FieldObjectCommands
	FName[] TargetNames;//[Offset: 0x0, Size: 0x10] 0x78736aa6a0
	FieldNodeBase*[] RootNodes;//[Offset: 0x10, Size: 0x10] 0x78736aa600
	FieldSystemMetaData*[] MetaDatas;//[Offset: 0x20, Size: 0x10] 0x78736aa560

--------------------------------
Class: FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldSystemMetaData.ActorComponent.Object

--------------------------------
Class: FieldSystemMetaDataFilter.FieldSystemMetaData.ActorComponent.Object
	byte FilterType;//[Offset: 0xb0, Size: 0x1] 0x7873cd9380
	byte ObjectType;//[Offset: 0xb1, Size: 0x1] 0x7873cd9400
	byte PositionType;//[Offset: 0xb2, Size: 0x1] 0x7873cd9480
	FieldSystemMetaDataFilter* SetMetaDataFilterType(byte FilterType, byte ObjectType, byte PositionType);// 0xecea630 0x7873c98040

--------------------------------
Class: FieldNodeFloat.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: RadialIntMask.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	float Radius;//[Offset: 0xb0, Size: 0x4] 0x7873cd8c80
	Vector Position;//[Offset: 0xb8, Size: 0x18] 0x7873cd8d00
	int InteriorValue;//[Offset: 0xd0, Size: 0x4] 0x7873cd8d80
	int ExteriorValue;//[Offset: 0xd4, Size: 0x4] 0x7873cd8e00
	byte SetMaskCondition;//[Offset: 0xd8, Size: 0x1] 0x7873cd8e80
	RadialIntMask* SetRadialIntMask(float Radius, Vector Position, int InteriorValue, int ExteriorValue, byte SetMaskConditionIn);// 0xecebf14 0x7873c97e80

--------------------------------
Class: FieldNodeInt.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: RadialFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x7873cd9d80
	float MinRange;//[Offset: 0xb4, Size: 0x4] 0x7873cd9e00
	float MaxRange;//[Offset: 0xb8, Size: 0x4] 0x7873cd9e80
	float Default;//[Offset: 0xbc, Size: 0x4] 0x7873cd9f00
	float Radius;//[Offset: 0xc0, Size: 0x4] 0x7873cd9f80
	Vector Position;//[Offset: 0xc8, Size: 0x18] 0x7873cda000
	byte Falloff;//[Offset: 0xe0, Size: 0x1] 0x7873cda080
	RadialFalloff* SetRadialFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Radius, Vector Position, byte Falloff);// 0xeced21c 0x7873c97be0

--------------------------------
Class: NoiseField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float MinRange;//[Offset: 0xb0, Size: 0x4] 0x7873cdac00
	float MaxRange;//[Offset: 0xb4, Size: 0x4] 0x7873cdac80
	Transform Transform;//[Offset: 0xc0, Size: 0x60] 0x7873cdad00
	NoiseField* SetNoiseField(float MinRange, float MaxRange, Transform Transform);// 0xecee810 0x7873c97940

--------------------------------
Class: RandomVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x7873cda580
	RandomVector* SetRandomVector(float Magnitude);// 0xecef9b8 0x7873c976a0

--------------------------------
Class: FieldNodeVector.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: ToFloatField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	FieldNodeInt* IntField;//[Offset: 0xb0, Size: 0x8] 0x7873cdbf00
	ToFloatField* SetToFloatField(const FieldNodeInt* IntegerField);// 0xecf0a8c 0x7873c97400

--------------------------------
Class: NetAnalyticsAggregatorConfig.Object
	NetAnalyticsDataConfig[] NetAnalyticsData;//[Offset: 0x28, Size: 0x10] 0x7873cc3300

--------------------------------
Class: NetAnalyticsDataConfig
	FName DataName;//[Offset: 0x0, Size: 0x8] 0x7873943080
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7873943100

--------------------------------
Class: GeometryCollectionComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ChaosSolverActor* ChaosSolverActor;//[Offset: 0x578, Size: 0x8] 0x7873810280
	GeometryCollection* RestCollection;//[Offset: 0x668, Size: 0x8] 0x7873810300
	FieldSystemActor*[] InitializationFields;//[Offset: 0x670, Size: 0x10] 0x788a8ae840
	bool Simulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 0x1] 0x7873810400
	enum ObjectType;//[Offset: 0x688, Size: 0x1] 0x788a8ae660
	bool bForceMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 0x1] 0x7873810500
	bool EnableClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68a, Size: 0x1] 0x7873810580
	int ClusterGroupIndex;//[Offset: 0x68c, Size: 0x4] 0x7873810600
	int MaxClusterLevel;//[Offset: 0x690, Size: 0x4] 0x7873810680
	float[] DamageThreshold;//[Offset: 0x698, Size: 0x10] 0x788a8ae5c0
	bool bUseSizeSpecificDamageThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1] 0x7873810780
	enum ClusterConnectionType;//[Offset: 0x6a9, Size: 0x1] 0x788a8ae8e0
	int CollisionGroup;//[Offset: 0x6ac, Size: 0x4] 0x7873810880
	float CollisionSampleFraction;//[Offset: 0x6b0, Size: 0x4] 0x7873810900
	float LinearEtherDrag;//[Offset: 0x6b4, Size: 0x4] 0x7873810980
	float AngularEtherDrag;//[Offset: 0x6b8, Size: 0x4] 0x7873810a00
	ChaosPhysicalMaterial* PhysicalMaterial;//[Offset: 0x6c0, Size: 0x8] 0x7873810a80
	enum InitialVelocityType;//[Offset: 0x6c8, Size: 0x1] 0x788a8ae7a0
	Vector InitialLinearVelocity;//[Offset: 0x6d0, Size: 0x18] 0x7873810b80
	Vector InitialAngularVelocity;//[Offset: 0x6e8, Size: 0x18] 0x7873810c00
	PhysicalMaterial* PhysicalMaterialOverride;//[Offset: 0x700, Size: 0x8] 0x7873810c80
	GeomComponentCacheParameters CacheParameters;//[Offset: 0x708, Size: 0x50] 0x78737ffe00
	Transform[] RestTransforms;//[Offset: 0x758, Size: 0x10] 0x788ab29160
	delegate NotifyGeometryCollectionPhysicsStateChange;//[Offset: 0x768, Size: 0x10] 0x78737fff00
	delegate NotifyGeometryCollectionPhysicsLoadingStateChange;//[Offset: 0x778, Size: 0x10] 0x78737fff80
	delegate OnChaosBreakEvent;//[Offset: 0x7a0, Size: 0x10] 0x78737fe780
	delegate OnChaosRemovalEvent;//[Offset: 0x7b0, Size: 0x10] 0x78737fe800
	float DesiredCacheTime;//[Offset: 0x7c0, Size: 0x4] 0x78737fe880
	bool CachePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c4, Size: 0x1] 0x78737fe900
	delegate OnChaosPhysicsCollision;//[Offset: 0x7c8, Size: 0x10] 0x78737fe980
	bool bNotifyBreaks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 0x1] 0x78737fea00
	bool bNotifyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d9, Size: 0x1] 0x78737fea80
	bool bNotifyTrailing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7da, Size: 0x1] 0x78737feb00
	bool bNotifyRemovals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7db, Size: 0x1] 0x78737feb80
	bool bStoreVelocities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7dc, Size: 0x1] 0x78737fec00
	bool bShowBoneColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7dd, Size: 0x1] 0x78737fec80
	bool bEnableReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7de, Size: 0x1] 0x78737fed00
	bool bEnableAbandonAfterLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7df, Size: 0x1] 0x78737fed80
	int ReplicationAbandonClusterLevel;//[Offset: 0x7e0, Size: 0x4] 0x78737fee00
	GeometryCollectionRepData RepData;//[Offset: 0x7e8, Size: 0x18] 0x78737fee80
	BodySetup* DummyBodySetup;//[Offset: 0xa90, Size: 0x8] 0x78737fef00
	InstancedStaticMeshComponent*[] EmbeddedGeometryComponents;//[Offset: 0xaa0, Size: 0x10] 0x788a8af920
	void SetNotifyRemovals(bool bNewNotifyRemovals);// 0xed65e58 0x7873805560
	void SetNotifyBreaks(bool bNewNotifyBreaks);// 0xed65f08 0x7873805640
	void ReceivePhysicsCollision(out const ChaosPhysicsCollisionInfo CollisionInfo);// 0xb8f1ab4 0x7873801d60
	void OnRep_RepData(out const GeometryCollectionRepData OldData);// 0xed65d94 0x7873801e40
	void NotifyGeometryCollectionPhysicsStateChange__DelegateSignature(GeometryCollectionComponent* FracturedComponent);// 0xb8f1ab4 0x7873801f20
	void NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature(GeometryCollectionComponent* FracturedComponent);// 0xb8f1ab4 0x7873802000
	void NetAbandonCluster(int TransformIndex);// 0xed65ce4 0x78738020e0
	void ApplyPhysicsField(bool Enabled, enum Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0xed65fb8 0x78738021c0
	void ApplyKinematicField(float Radius, Vector Position);// 0xed6613c 0x78738022a0

--------------------------------
Class: ChaosPhysicsCollisionInfo
	PrimitiveComponent* Component;//[Offset: 0x0, Size: 0x8] 0x78737dec80
	PrimitiveComponent* OtherComponent;//[Offset: 0x8, Size: 0x8] 0x78737ded00
	Vector Location;//[Offset: 0x10, Size: 0x18] 0x78737ded80
	Vector Normal;//[Offset: 0x28, Size: 0x18] 0x78737dee00
	Vector AccumulatedImpulse;//[Offset: 0x40, Size: 0x18] 0x78737dee80
	Vector Velocity;//[Offset: 0x58, Size: 0x18] 0x78737def00
	Vector OtherVelocity;//[Offset: 0x70, Size: 0x18] 0x78737def80
	Vector AngularVelocity;//[Offset: 0x88, Size: 0x18] 0x78737df000
	Vector OtherAngularVelocity;//[Offset: 0xa0, Size: 0x18] 0x78737df080
	float Mass;//[Offset: 0xb8, Size: 0x4] 0x78737df200
	float OtherMass;//[Offset: 0xbc, Size: 0x4] 0x78737df100

--------------------------------
Class: GeometryCollectionRepData

--------------------------------
Class: GeometryCollection.Object
	bool EnableClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7873ce0d00
	int ClusterGroupIndex;//[Offset: 0x34, Size: 0x4] 0x7873ce0d80
	int MaxClusterLevel;//[Offset: 0x38, Size: 0x4] 0x7873ce0e00
	float[] DamageThreshold;//[Offset: 0x40, Size: 0x10] 0x7873cc51a0
	enum ClusterConnectionType;//[Offset: 0x50, Size: 0x1] 0x7873cc5240
	MaterialInterface*[] Materials;//[Offset: 0x58, Size: 0x10] 0x7873cc29a0
	GeometryCollectionEmbeddedExemplar[] EmbeddedGeometryExemplar;//[Offset: 0x68, Size: 0x10] 0x7873cc2a40
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x7873ce1080
	bool bStripOnCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x7873cdf800
	bool EnableNanite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x7873cdf880
	bool bMassAsDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1] 0x7873cdf900
	float Mass;//[Offset: 0x7c, Size: 0x4] 0x7873cdf980
	float MinimumMassClamp;//[Offset: 0x80, Size: 0x4] 0x7873cdfa00
	bool bRemoveOnMaxSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x7873cdfa80
	Vector2D MaximumSleepTime;//[Offset: 0x88, Size: 0x10] 0x7873cdfb00
	Vector2D RemovalDuration;//[Offset: 0x98, Size: 0x10] 0x7873cdfb80
	GeometryCollectionSizeSpecificData[] SizeSpecificData;//[Offset: 0xa8, Size: 0x10] 0x7873cc2ae0
	bool EnableRemovePiecesOnFracture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x7873cdfc80
	MaterialInterface*[] RemoveOnFractureMaterials;//[Offset: 0xc0, Size: 0x10] 0x7873cc2b80
	Guid PersistentGuid;//[Offset: 0xd0, Size: 0x10] 0x7873cdfd80
	Guid StateGuid;//[Offset: 0xe0, Size: 0x10] 0x7873cdfe00
	int BoneSelectedMaterialIndex;//[Offset: 0xf0, Size: 0x4] 0x7873cdfe80

--------------------------------
Class: GeometryCollectionEmbeddedExemplar
	SoftObjectPath StaticMeshExemplar;//[Offset: 0x0, Size: 0x18] 0x7873943e80
	float StartCullDistance;//[Offset: 0x18, Size: 0x4] 0x7873943f00
	float EndCullDistance;//[Offset: 0x1c, Size: 0x4] 0x7873943f80
	int InstanceCount;//[Offset: 0x20, Size: 0x4] 0x7873944000

--------------------------------
Class: GeometryCollectionSizeSpecificData
	float MaxSize;//[Offset: 0x0, Size: 0x4] 0x7873943700
	GeometryCollectionCollisionTypeData[] CollisionShapes;//[Offset: 0x8, Size: 0x10] 0x78736aace0
	int DamageThreshold;//[Offset: 0x18, Size: 0x4] 0x7873943800

--------------------------------
Class: GeometryCollectionCollisionTypeData
	enum CollisionType;//[Offset: 0x0, Size: 0x1] 0x78736aac40
	enum ImplicitType;//[Offset: 0x1, Size: 0x1] 0x78736aaba0
	GeometryCollectionLevelSetData LevelSet;//[Offset: 0x4, Size: 0x10] 0x7873943980
	GeometryCollectionCollisionParticleData CollisionParticles;//[Offset: 0x14, Size: 0x8] 0x7873943a00
	float CollisionObjectReductionPercentage;//[Offset: 0x1c, Size: 0x4] 0x7873943a80
	float CollisionMarginFraction;//[Offset: 0x20, Size: 0x4] 0x7873943b00

--------------------------------
Class: GeometryCollectionLevelSetData
	int MinLevelSetResolution;//[Offset: 0x0, Size: 0x4] 0x7873943c80
	int MaxLevelSetResolution;//[Offset: 0x4, Size: 0x4] 0x7873943d00
	int MinClusterLevelSetResolution;//[Offset: 0x8, Size: 0x4] 0x7873943d80
	int MaxClusterLevelSetResolution;//[Offset: 0xc, Size: 0x4] 0x7873943e00

--------------------------------
Class: GeometryCollectionCollisionParticleData
	float CollisionParticlesFraction;//[Offset: 0x0, Size: 0x4] 0x7873943b80
	int MaximumCollisionParticles;//[Offset: 0x4, Size: 0x4] 0x7873943c00

--------------------------------
Class: FieldSystemActor.Actor.Object
	FieldSystemComponent* FieldSystemComponent;//[Offset: 0x288, Size: 0x8] 0x7873cd6c80

--------------------------------
Class: GeomComponentCacheParameters
	enum CacheMode;//[Offset: 0x0, Size: 0x1] 0x788a8ae480
	GeometryCollectionCache* TargetCache;//[Offset: 0x8, Size: 0x8] 0x7873810d80
	float ReverseCacheBeginTime;//[Offset: 0x10, Size: 0x4] 0x7873810e00
	bool SaveCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x7873810e80
	bool DoGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1] 0x7873810f00
	int CollisionDataSizeMax;//[Offset: 0x18, Size: 0x4] 0x7873810f80
	bool DoCollisionDataSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7873811000
	float CollisionDataSpatialHashRadius;//[Offset: 0x20, Size: 0x4] 0x7873811080
	int MaxCollisionPerCell;//[Offset: 0x24, Size: 0x4] 0x78737ff800
	bool SaveBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78737ff880
	bool DoGenerateBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78737ff900
	int BreakingDataSizeMax;//[Offset: 0x2c, Size: 0x4] 0x78737ff980
	bool DoBreakingDataSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78737ffa00
	float BreakingDataSpatialHashRadius;//[Offset: 0x34, Size: 0x4] 0x78737ffa80
	int MaxBreakingPerCell;//[Offset: 0x38, Size: 0x4] 0x78737ffb00
	bool SaveTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78737ffb80
	bool DoGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x78737ffc00
	int TrailingDataSizeMax;//[Offset: 0x40, Size: 0x4] 0x78737ffc80
	float TrailingMinSpeedThreshold;//[Offset: 0x44, Size: 0x4] 0x78737ffd00
	float TrailingMinVolumeThreshold;//[Offset: 0x48, Size: 0x4] 0x78737ffd80

--------------------------------
Class: GeometryCollectionCache.Object
	RecordedTransformTrack RecordedData;//[Offset: 0x28, Size: 0x10] 0x7873cde500
	GeometryCollection* SupportedCollection;//[Offset: 0x38, Size: 0x8] 0x7873cde580
	Guid CompatibleCollectionState;//[Offset: 0x40, Size: 0x10] 0x7873cde600

--------------------------------
Class: RecordedTransformTrack
	RecordedFrame[] Records;//[Offset: 0x0, Size: 0x10] 0x78736af2e0

--------------------------------
Class: RecordedFrame
	Transform[] Transforms;//[Offset: 0x0, Size: 0x10] 0x78736af240
	int[] TransformIndices;//[Offset: 0x10, Size: 0x10] 0x78736af1a0
	int[] PreviousTransformIndices;//[Offset: 0x20, Size: 0x10] 0x78736ae660
	bool[] DisabledFlags;//[Offset: 0x30, Size: 0x10] 0x78736ae5c0
	SolverCollisionData[] Collisions;//[Offset: 0x40, Size: 0x10] 0x78736ae520
	SolverBreakingData[] Breakings;//[Offset: 0x50, Size: 0x10] 0x78736ae480
	<SolverTrailingData> Trailings;//[Offset: 0x60, Size: 0x50] 0x78736ae3e0
	float Timestamp;//[Offset: 0xb0, Size: 0x4] 0x7873922880

--------------------------------
Class: SolverCollisionData
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7873922f00
	Vector AccumulatedImpulse;//[Offset: 0x18, Size: 0x18] 0x7873922f80
	Vector Normal;//[Offset: 0x30, Size: 0x18] 0x7873923000
	Vector Velocity1;//[Offset: 0x48, Size: 0x18] 0x7873923080
	Vector Velocity2;//[Offset: 0x60, Size: 0x18] 0x7873923100
	Vector AngularVelocity1;//[Offset: 0x78, Size: 0x18] 0x7873923180
	Vector AngularVelocity2;//[Offset: 0x90, Size: 0x18] 0x7873921100
	float Mass1;//[Offset: 0xa8, Size: 0x4] 0x7873921180
	float Mass2;//[Offset: 0xac, Size: 0x4] 0x7873921200
	int ParticleIndex;//[Offset: 0xb0, Size: 0x4] 0x7873921280
	int LevelsetIndex;//[Offset: 0xb4, Size: 0x4] 0x7873921300
	int ParticleIndexMesh;//[Offset: 0xb8, Size: 0x4] 0x7873921380
	int LevelsetIndexMesh;//[Offset: 0xbc, Size: 0x4] 0x7873921400

--------------------------------
Class: SolverBreakingData
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7873922c00
	Vector Velocity;//[Offset: 0x18, Size: 0x18] 0x7873922c80
	Vector AngularVelocity;//[Offset: 0x30, Size: 0x18] 0x7873922d00
	float Mass;//[Offset: 0x48, Size: 0x4] 0x7873922d80
	int ParticleIndex;//[Offset: 0x4c, Size: 0x4] 0x7873922e00
	int ParticleIndexMesh;//[Offset: 0x50, Size: 0x4] 0x7873922e80

--------------------------------
Class: SolverTrailingData
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7873922900
	Vector Velocity;//[Offset: 0x18, Size: 0x18] 0x7873922980
	Vector AngularVelocity;//[Offset: 0x30, Size: 0x18] 0x7873922a00
	float Mass;//[Offset: 0x48, Size: 0x4] 0x7873922a80
	int ParticleIndex;//[Offset: 0x4c, Size: 0x4] 0x7873922b00
	int ParticleIndexMesh;//[Offset: 0x50, Size: 0x4] 0x7873922b80

--------------------------------
Class: GeometryCollectionDebugDrawComponent.ActorComponent.Object
	GeometryCollectionDebugDrawActor* GeometryCollectionDebugDrawActor;//[Offset: 0xb0, Size: 0x8] 0x7873cdff00
	GeometryCollectionRenderLevelSetActor* GeometryCollectionRenderLevelSetActor;//[Offset: 0xb8, Size: 0x8] 0x7873cdff80

--------------------------------
Class: GeometryCollectionDebugDrawActor.Actor.Object
	GeometryCollectionDebugDrawWarningMessage WarningMessage;//[Offset: 0x288, Size: 0x1] 0x7873cde780
	GeometryCollectionDebugDrawActorSelectedRigidBody SelectedRigidBody;//[Offset: 0x290, Size: 0x18] 0x7873cde800
	bool bDebugDrawWholeCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1] 0x7873cde880
	bool bDebugDrawHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1] 0x7873cde900
	bool bDebugDrawClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2aa, Size: 0x1] 0x7873cde980
	enum HideGeometry;//[Offset: 0x2ab, Size: 0x1] 0x7873cc2c20
	bool bShowRigidBodyId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1] 0x7873cdea80
	bool bShowRigidBodyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 0x1] 0x7873cdeb00
	bool bCollisionAtOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ae, Size: 0x1] 0x7873cdeb80
	bool bShowRigidBodyTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2af, Size: 0x1] 0x7873cdec00
	bool bShowRigidBodyInertia;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x7873cdec80
	bool bShowRigidBodyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1] 0x7873cded00
	bool bShowRigidBodyForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1] 0x7873cded80
	bool bShowRigidBodyInfos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b3, Size: 0x1] 0x7873cdee00
	bool bShowTransformIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1] 0x7873cdee80
	bool bShowTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1] 0x7873cdef00
	bool bShowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b6, Size: 0x1] 0x7873cdef80
	bool bShowLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b7, Size: 0x1] 0x7873cdf000
	bool bShowConnectivityEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1] 0x7873cdf080
	bool bShowGeometryIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 0x1] 0x7873cdf100
	bool bShowGeometryTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba, Size: 0x1] 0x7873cdf180
	bool bShowBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bb, Size: 0x1] 0x7873cdf200
	bool bShowFaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1] 0x7873cdf280
	bool bShowFaceIndices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 0x1] 0x7873cdf300
	bool bShowFaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be, Size: 0x1] 0x7873cdf380
	bool bShowSingleFace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bf, Size: 0x1] 0x7873cdf400
	int SingleFaceIndex;//[Offset: 0x2c0, Size: 0x4] 0x7873cdf480
	bool bShowVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1] 0x7873cdf500
	bool bShowVertexIndices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 0x1] 0x7873cdf580
	bool bShowVertexNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c6, Size: 0x1] 0x7873cdf600
	bool bUseActiveVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c7, Size: 0x1] 0x7873cdf680
	float PointThickness;//[Offset: 0x2c8, Size: 0x4] 0x7873cdf700
	float LineThickness;//[Offset: 0x2cc, Size: 0x4] 0x7873cdf780
	bool bTextShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1] 0x7873cdd700
	float TextScale;//[Offset: 0x2d4, Size: 0x4] 0x7873cdd780
	float NormalScale;//[Offset: 0x2d8, Size: 0x4] 0x7873cdd800
	float AxisScale;//[Offset: 0x2dc, Size: 0x4] 0x7873cdd880
	float ArrowScale;//[Offset: 0x2e0, Size: 0x4] 0x7873cdd900
	Color RigidBodyIdColor;//[Offset: 0x2e4, Size: 0x4] 0x7873cdd980
	float RigidBodyTransformScale;//[Offset: 0x2e8, Size: 0x4] 0x7873cdda00
	Color RigidBodyCollisionColor;//[Offset: 0x2ec, Size: 0x4] 0x7873cdda80
	Color RigidBodyInertiaColor;//[Offset: 0x2f0, Size: 0x4] 0x7873cddb00
	Color RigidBodyVelocityColor;//[Offset: 0x2f4, Size: 0x4] 0x7873cddb80
	Color RigidBodyForceColor;//[Offset: 0x2f8, Size: 0x4] 0x7873cddc00
	Color RigidBodyInfoColor;//[Offset: 0x2fc, Size: 0x4] 0x7873cddc80
	Color TransformIndexColor;//[Offset: 0x300, Size: 0x4] 0x7873cddd00
	float TransformScale;//[Offset: 0x304, Size: 0x4] 0x7873cddd80
	Color LevelColor;//[Offset: 0x308, Size: 0x4] 0x7873cdde00
	Color ParentColor;//[Offset: 0x30c, Size: 0x4] 0x7873cdde80
	float ConnectivityEdgeThickness;//[Offset: 0x310, Size: 0x4] 0x7873cddf00
	Color GeometryIndexColor;//[Offset: 0x314, Size: 0x4] 0x7873cddf80
	float GeometryTransformScale;//[Offset: 0x318, Size: 0x4] 0x7873cde000
	Color BoundingBoxColor;//[Offset: 0x31c, Size: 0x4] 0x7873cde080
	Color FaceColor;//[Offset: 0x320, Size: 0x4] 0x7873cde100
	Color FaceIndexColor;//[Offset: 0x324, Size: 0x4] 0x7873cde180
	Color FaceNormalColor;//[Offset: 0x328, Size: 0x4] 0x7873cde200
	Color SingleFaceColor;//[Offset: 0x32c, Size: 0x4] 0x7873cde280
	Color VertexColor;//[Offset: 0x330, Size: 0x4] 0x7873cde300
	Color VertexIndexColor;//[Offset: 0x334, Size: 0x4] 0x7873cde380
	Color VertexNormalColor;//[Offset: 0x338, Size: 0x4] 0x7873cde400
	BillboardComponent* SpriteComponent;//[Offset: 0x340, Size: 0x8] 0x7873cde480

--------------------------------
Class: GeometryCollectionDebugDrawWarningMessage

--------------------------------
Class: GeometryCollectionDebugDrawActorSelectedRigidBody
	int ID;//[Offset: 0x0, Size: 0x4] 0x7873944200
	ChaosSolverActor* Solver;//[Offset: 0x8, Size: 0x8] 0x7873942180
	GeometryCollectionActor* GeometryCollection;//[Offset: 0x10, Size: 0x8] 0x7873942200

--------------------------------
Class: GeometryCollectionActor.Actor.Object
	GeometryCollectionComponent* GeometryCollectionComponent;//[Offset: 0x288, Size: 0x8] 0x7873cde680
	GeometryCollectionDebugDrawComponent* GeometryCollectionDebugDrawComponent;//[Offset: 0x290, Size: 0x8] 0x7873cde700
	bool RaycastSingle(Vector Start, Vector End, out HitResult OutHit);// 0xed64dec 0x7873c99c40

--------------------------------
Class: GeometryCollectionRenderLevelSetActor.Actor.Object
	VolumeTexture* TargetVolumeTexture;//[Offset: 0x288, Size: 0x8] 0x7873ce0a00
	Material* RayMarchMaterial;//[Offset: 0x290, Size: 0x8] 0x7873ce0a80
	float SurfaceTolerance;//[Offset: 0x298, Size: 0x4] 0x7873ce0b00
	float Isovalue;//[Offset: 0x29c, Size: 0x4] 0x7873ce0b80
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x7873ce0c00
	bool RenderVolumeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1] 0x7873ce0c80

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x2c0, Size: 0x6b0] 0x7873f80180
	float Priority;//[Offset: 0x970, Size: 0x4] 0x7873f80200
	float BlendRadius;//[Offset: 0x974, Size: 0x4] 0x7873f80280
	float BlendWeight;//[Offset: 0x978, Size: 0x4] 0x7873f80300
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x97c, Size: 0x1] 0x7873f80380
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x97c, Size: 0x1] 0x7873f80400
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x10dc32f8 0x7873f7aa40

--------------------------------
Class: AnimNotify_PlayMontageNotify.AnimNotify.Object
	FName NotifyName;//[Offset: 0x38, Size: 0x8] 0x7873ce1a00

--------------------------------
Class: KismetAnimationLibrary.BlueprintFunctionLibrary.Object
	static void K2_TwoBoneIK(out const Vector RootPos, out const Vector JointPos, out const Vector EndPos, out const Vector JointTarget, out const Vector Effector, out Vector OutJointPos, out Vector OutEndPos, bool bAllowStretching, float StartStretchRatio, float MaxStretchScale);// 0xee17fdc 0x7873c9c1e0
	static void K2_StartProfilingTimer();// 0xee16e28 0x7873c9c2c0
	static Vector K2_MakePerlinNoiseVectorAndRemap(float X, float Y, float Z, float RangeOutMinX, float RangeOutMaxX, float RangeOutMinY, float RangeOutMaxY, float RangeOutMinZ, float RangeOutMaxZ);// 0xee175dc 0x7873c9c3a0
	static float K2_MakePerlinNoiseAndRemap(float Value, float RangeOutMin, float RangeOutMax);// 0xee174a0 0x7873c9c480
	static Transform K2_LookAt(out const Transform CurrentTransform, out const Vector TargetPosition, Vector LookAtVector, bool bUseUpVector, Vector UpVector, float ClampConeInDegree);// 0xee17d60 0x7873c9c560
	static float K2_EndProfilingTimer(bool bLog, FString LogPrefix);// 0xee16d2c 0x7873c9c640
	static float K2_DistanceBetweenTwoSocketsAndMapRange(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameA, byte SocketSpaceA, const FName SocketOrBoneNameB, byte SocketSpaceB, bool bRemapRange, float InRangeMin, float InRangeMax, float OutRangeMin, float OutRangeMax);// 0xee17a1c 0x7873c9c720
	static Vector K2_DirectionBetweenSockets(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameFrom, const FName SocketOrBoneNameTo);// 0xee178dc 0x7873c9c800
	static float K2_CalculateVelocityFromSockets(float DeltaSeconds, SkeletalMeshComponent* Component, const FName SocketOrBoneName, const FName ReferenceSocketOrBone, byte SocketSpace, Vector OffsetInBoneSpace, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax, enum EasingType, out const RuntimeFloatCurve CustomCurve);// 0xee16e3c 0x7873c9c8e0
	static float K2_CalculateVelocityFromPositionHistory(float DeltaSeconds, Vector Position, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax);// 0xee17268 0x7873c9c9c0
	static float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0xee16c30 0x7873c990e0

--------------------------------
Class: PositionHistory
	Vector[] Positions;//[Offset: 0x0, Size: 0x10] 0x78737670e0
	float Range;//[Offset: 0x10, Size: 0x4] 0x7873963480

--------------------------------
Class: SequenceEvaluatorLibrary.BlueprintFunctionLibrary.Object
	static SequenceEvaluatorReference SetSequenceWithInertialBlending(out const AnimUpdateContext UpdateContext, out const SequenceEvaluatorReference SequenceEvaluator, AnimSequenceBase* Sequence, float BlendTime);// 0xee214e0 0x7873c9b300
	static SequenceEvaluatorReference SetSequence(out const SequenceEvaluatorReference SequenceEvaluator, AnimSequenceBase* Sequence);// 0xee216ac 0x7873c9b3e0
	static SequenceEvaluatorReference SetExplicitTime(out const SequenceEvaluatorReference SequenceEvaluator, float Time);// 0xee21924 0x7873c9b4c0
	static AnimSequenceBase* GetSequence(out const SequenceEvaluatorReference SequenceEvaluator);// 0xee21378 0x7873c9b5a0
	static float GetAccumulatedTime(out const SequenceEvaluatorReference SequenceEvaluator);// 0xee2142c 0x7873c9b680
	static void ConvertToSequenceEvaluatorPure(out const AnimNodeReference Node, out SequenceEvaluatorReference SequenceEvaluator, out bool result);// 0xee21a1c 0x7873c9b760
	static SequenceEvaluatorReference ConvertToSequenceEvaluator(out const AnimNodeReference Node, out enum result);// 0xee21b84 0x7873c9b840
	static SequenceEvaluatorReference AdvanceTime(out const AnimUpdateContext UpdateContext, out const SequenceEvaluatorReference SequenceEvaluator, float PlayRate);// 0xee217a4 0x7873c9b920

--------------------------------
Class: AnimUpdateContext.AnimExecutionContext

--------------------------------
Class: AnimExecutionContext

--------------------------------
Class: SequenceEvaluatorReference.AnimNodeReference

--------------------------------
Class: AnimNodeReference

--------------------------------
Class: SkeletalControlLibrary.BlueprintFunctionLibrary.Object
	static SkeletalControlReference SetAlpha(out const SkeletalControlReference SkeletalControl, float Alpha);// 0xee23d80 0x7873c9dde0
	static float GetAlpha(out const SkeletalControlReference SkeletalControl);// 0xee23ccc 0x7873c9dec0
	static void ConvertToSkeletalControlPure(out const AnimNodeReference Node, out SkeletalControlReference SkeletalControl, out bool result);// 0xee23e78 0x7873c9dfa0
	static SkeletalControlReference ConvertToSkeletalControl(out const AnimNodeReference Node, out enum result);// 0xee23fe0 0x7873c9e080

--------------------------------
Class: SkeletalControlReference.AnimNodeReference

--------------------------------
Class: DummyEndpointSettings.AudioEndpointSettingsBase.Object

--------------------------------
Class: AudioEndpointSettingsBase.Object

--------------------------------
Class: ByteChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTransformOrigin.Interface.Object
	Transform BP_GetTransformOrigin();// 0xb8f1ab4 0x7873c9d1a0

--------------------------------
Class: MovieScene3DAttachTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ConstraintSections;//[Offset: 0x90, Size: 0x10] 0x7873cc42a0

--------------------------------
Class: MovieScene3DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePropertySystem.MovieSceneEntitySystem.Object
	MovieScenePropertyInstantiatorSystem* InstantiatorSystem;//[Offset: 0x50, Size: 0x8] 0x7873ce9300

--------------------------------
Class: MovieScenePropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneAudioSection.MovieSceneSection.MovieSceneSignedObject.Object
	SoundBase* Sound;//[Offset: 0xe0, Size: 0x8] 0x7873cea080
	FrameNumber StartFrameOffset;//[Offset: 0xe8, Size: 0x4] 0x7873cea100
	float StartOffset;//[Offset: 0xec, Size: 0x4] 0x7873cea180
	float AudioStartTime;//[Offset: 0xf0, Size: 0x4] 0x7873cea200
	float AudioDilationFactor;//[Offset: 0xf4, Size: 0x4] 0x7873cea280
	float AudioVolume;//[Offset: 0xf8, Size: 0x4] 0x7873cea300
	MovieSceneFloatChannel SoundVolume;//[Offset: 0x100, Size: 0xe8] 0x7873cea380
	MovieSceneFloatChannel PitchMultiplier;//[Offset: 0x1e8, Size: 0xe8] 0x7873cea400
	<FName,MovieSceneFloatChannel> Inputs_Float;//[Offset: 0x2d0, Size: 0x50] 0x787386ad80
	<FName,MovieSceneStringChannel> Inputs_String;//[Offset: 0x320, Size: 0x50] 0x787386ae40
	<FName,MovieSceneBoolChannel> Inputs_Bool;//[Offset: 0x370, Size: 0x50] 0x787386af00
	<FName,MovieSceneIntegerChannel> Inputs_Int;//[Offset: 0x3c0, Size: 0x50] 0x787386afc0
	<FName,MovieSceneAudioTriggerChannel> Inputs_Trigger;//[Offset: 0x410, Size: 0x50] 0x787386b080
	MovieSceneActorReferenceData AttachActorData;//[Offset: 0x460, Size: 0xf8] 0x7873ce8880
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 0x1] 0x7873ce8900
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x559, Size: 0x1] 0x7873ce8980
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55a, Size: 0x1] 0x7873ce8a00
	SoundAttenuation* AttenuationSettings;//[Offset: 0x560, Size: 0x8] 0x7873ce8a80
	delegate OnQueueSubtitles;//[Offset: 0x568, Size: 0x10] 0x7873ce8b00
	delegate OnAudioFinished;//[Offset: 0x578, Size: 0x10] 0x7873ce8b80
	delegate OnAudioPlaybackPercent;//[Offset: 0x588, Size: 0x10] 0x7873ce8c00
	void SetStartOffset(FrameNumber InStartOffset);// 0xf0c29cc 0x7873c9cc60
	void SetSound(SoundBase* InSound);// 0xf0c2a8c 0x7873c9cd40
	FrameNumber GetStartOffset();// 0xf0c29b0 0x7873c9ce20
	SoundBase* GetSound();// 0xf0c2a70 0x7873c9cf00

--------------------------------
Class: MovieSceneFloatChannel.MovieSceneChannel
	byte PreInfinityExtrap;//[Offset: 0x50, Size: 0x1] 0x787388a200
	byte PostInfinityExtrap;//[Offset: 0x51, Size: 0x1] 0x787388a280
	FrameNumber[] Times;//[Offset: 0x58, Size: 0x10] 0x78736a0600
	MovieSceneFloatValue[] Values;//[Offset: 0x68, Size: 0x10] 0x78736a0560
	float DefaultValue;//[Offset: 0x78, Size: 0x4] 0x7873888800
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x7873888880
	MovieSceneKeyHandleMap KeyHandles;//[Offset: 0x80, Size: 0x60] 0x7873888900
	FrameRate TickResolution;//[Offset: 0xe0, Size: 0x8] 0x7873888980

--------------------------------
Class: MovieSceneFloatValue
	float Value;//[Offset: 0x0, Size: 0x4] 0x787388a380
	MovieSceneTangentData Tangent;//[Offset: 0x4, Size: 0x14] 0x7873888580
	byte InterpMode;//[Offset: 0x18, Size: 0x1] 0x7873888600
	byte TangentMode;//[Offset: 0x19, Size: 0x1] 0x7873888680
	byte PaddingByte;//[Offset: 0x1a, Size: 0x1] 0x7873888700

--------------------------------
Class: MovieSceneTangentData
	float ArriveTangent;//[Offset: 0x0, Size: 0x4] 0x787388a400
	float LeaveTangent;//[Offset: 0x4, Size: 0x4] 0x787388a480
	float ArriveTangentWeight;//[Offset: 0x8, Size: 0x4] 0x787388a500
	float LeaveTangentWeight;//[Offset: 0xc, Size: 0x4] 0x7873888480
	byte TangentWeightMode;//[Offset: 0x10, Size: 0x1] 0x7873888500

--------------------------------
Class: MovieSceneKeyHandleMap.KeyHandleLookupTable

--------------------------------
Class: KeyHandleLookupTable

--------------------------------
Class: MovieSceneStringChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10] 0x7873768800
	FString[] Values;//[Offset: 0x60, Size: 0x10] 0x78737688a0
	FString DefaultValue;//[Offset: 0x70, Size: 0x10] 0x7873968200
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x7873968280

--------------------------------
Class: MovieSceneIntegerChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10] 0x78736a0420
	int DefaultValue;//[Offset: 0x60, Size: 0x4] 0x7873889980
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x7873889a00
	int[] Values;//[Offset: 0x68, Size: 0x10] 0x78736a0240

--------------------------------
Class: MovieSceneAudioTriggerChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10] 0x78736ab640
	bool[] Values;//[Offset: 0x60, Size: 0x10] 0x78736ab5a0

--------------------------------
Class: MovieSceneActorReferenceData.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x50, Size: 0x10] 0x7873766820
	MovieSceneActorReferenceKey DefaultValue;//[Offset: 0x60, Size: 0x28] 0x7873965e80
	MovieSceneActorReferenceKey[] KeyValues;//[Offset: 0x88, Size: 0x10] 0x78737668c0

--------------------------------
Class: MovieSceneActorReferenceKey
	MovieSceneObjectBindingID Object;//[Offset: 0x0, Size: 0x18] 0x7873965f80
	FName ComponentName;//[Offset: 0x18, Size: 0x8] 0x7873966000
	FName SocketName;//[Offset: 0x20, Size: 0x8] 0x7873966080

--------------------------------
Class: MovieSceneAudioTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AudioSections;//[Offset: 0x98, Size: 0x10] 0x7873cc4020

--------------------------------
Class: MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneCameraAnimSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraAnimSectionData AnimData;//[Offset: 0xe0, Size: 0x20] 0x7873ce9b80
	CameraAnim* CameraAnim;//[Offset: 0x100, Size: 0x8] 0x7873ce9c00
	float PlayRate;//[Offset: 0x108, Size: 0x4] 0x7873ce9c80
	float PlayScale;//[Offset: 0x10c, Size: 0x4] 0x7873ce9d00
	float BlendInTime;//[Offset: 0x110, Size: 0x4] 0x7873ce9d80
	float BlendOutTime;//[Offset: 0x114, Size: 0x4] 0x7873ce9e00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x7873ce9e80

--------------------------------
Class: MovieSceneCameraAnimSectionData
	CameraAnim* CameraAnim;//[Offset: 0x0, Size: 0x8] 0x7873965980
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x7873965a00
	float PlayScale;//[Offset: 0xc, Size: 0x4] 0x7873965a80
	float BlendInTime;//[Offset: 0x10, Size: 0x4] 0x7873965b00
	float BlendOutTime;//[Offset: 0x14, Size: 0x4] 0x7873965b80
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7873965c00

--------------------------------
Class: MovieSceneCameraAnimTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraAnimSections;//[Offset: 0x98, Size: 0x10] 0x7873cc3f80

--------------------------------
Class: MovieSceneCameraShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe0, Size: 0x28] 0x7873ceb580
	class CameraShakeBase* ShakeClass;//[Offset: 0x108, Size: 0x8] 0x7873cc66e0
	float PlayScale;//[Offset: 0x110, Size: 0x4] 0x7873ce9500
	enum PlaySpace;//[Offset: 0x114, Size: 0x1] 0x7873cc3e40
	Rotator UserDefinedPlaySpace;//[Offset: 0x118, Size: 0x18] 0x7873ce9600

--------------------------------
Class: MovieSceneCameraShakeSectionData
	class CameraShakeBase* ShakeClass;//[Offset: 0x0, Size: 0x8] 0x7873769020
	float PlayScale;//[Offset: 0x8, Size: 0x4] 0x7873965700
	enum PlaySpace;//[Offset: 0xc, Size: 0x1] 0x7873766780
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0x18] 0x7873965800

--------------------------------
Class: MovieSceneCameraShakeSourceShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe0, Size: 0x28] 0x7873ceb500

--------------------------------
Class: MovieSceneCameraShakeSourceShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x98, Size: 0x10] 0x7873cc6640

--------------------------------
Class: MovieSceneCinematicShotSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	FString ShotDisplayName;//[Offset: 0x118, Size: 0x10] 0x7873ceb100
	FText DisplayName;//[Offset: 0x128, Size: 0x18] 0x7873ceb180
	void SetShotDisplayName(FString InShotDisplayName);// 0xf0cdb9c 0x7873c9fe40
	FString GetShotDisplayName();// 0xf0cdcb0 0x7873c9ff20

--------------------------------
Class: MovieSceneCinematicShotTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneComponentAttachmentInvalidatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentTransformSystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneDataLayerSection.MovieSceneSection.MovieSceneSignedObject.Object
	ActorDataLayer[] DataLayers;//[Offset: 0xe8, Size: 0x10] 0x7873cc5ec0
	enum DesiredState;//[Offset: 0xf8, Size: 0x1] 0x7873cc5f60
	enum PrerollState;//[Offset: 0xf9, Size: 0x1] 0x7873cc6000
	bool bFlushOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1] 0x7873cea800
	void SetPrerollState(enum InPrerollState);// 0xf0d12dc 0x7873c9f580
	void SetFlushOnUnload(bool bFlushOnUnload);// 0xf0d11f4 0x7873c9f660
	void SetDesiredState(enum InDesiredState);// 0xf0d13b8 0x7873c9f740
	void SetDataLayers(out const ActorDataLayer[] InDataLayers);// 0xf0d1060 0x7873c9f820
	enum GetPrerollState();// 0xf0d1384 0x7873c9f900
	bool GetFlushOnUnload();// 0xf0d12a4 0x7873c9f9e0
	enum GetDesiredState();// 0xf0d1460 0x7873c9fac0
	ActorDataLayer[] GetDataLayers();// 0xf0d1170 0x7873c9fba0

--------------------------------
Class: MovieSceneDataLayerSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneDoublePropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEnumSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel EnumCurve;//[Offset: 0xe8, Size: 0xe0] 0x7873cec600

--------------------------------
Class: MovieSceneByteChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10] 0x78736a0380
	byte DefaultValue;//[Offset: 0x60, Size: 0x1] 0x7873889c80
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x7873889d00
	byte[] Values;//[Offset: 0x68, Size: 0x10] 0x78736a02e0
	Enum* Enum;//[Offset: 0x78, Size: 0x8] 0x7873889e00

--------------------------------
Class: MovieSceneEnumTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0xc0, Size: 0x8] 0x7873cec580

--------------------------------
Class: MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventRepeaterSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEvent Event;//[Offset: 0xe8, Size: 0x28] 0x7873cec500

--------------------------------
Class: MovieSceneEventSection.MovieSceneSection.MovieSceneSignedObject.Object
	NameCurve Events;//[Offset: 0xe0, Size: 0x78] 0x7873cec400
	MovieSceneEventSectionData EventData;//[Offset: 0x158, Size: 0xd0] 0x7873cec480

--------------------------------
Class: NameCurve.IndexedCurve
	NameCurveKey[] Keys;//[Offset: 0x68, Size: 0x10] 0x78739b6640

--------------------------------
Class: NameCurveKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7873a11500
	FName Value;//[Offset: 0x4, Size: 0x8] 0x7873a11580

--------------------------------
Class: MovieSceneEventSectionData.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10] 0x7873768940
	EventPayload[] KeyValues;//[Offset: 0x60, Size: 0x10] 0x78737689e0

--------------------------------
Class: EventPayload
	FName EventName;//[Offset: 0x0, Size: 0x8] 0x7873966b00
	MovieSceneEventParameters Parameters;//[Offset: 0x8, Size: 0x28] 0x7873966b80

--------------------------------
Class: MovieSceneEventParameters

--------------------------------
Class: MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePostEvalEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneFadeTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneInitialValueSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneInterrogatedPropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10] 0x7873cc57e0

--------------------------------
Class: MovieSceneMotionVectorSimulationSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneParticleSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneParticleChannel ParticleKeys;//[Offset: 0xe0, Size: 0xe0] 0x7873ceb880

--------------------------------
Class: MovieSceneParticleChannel.MovieSceneByteChannel.MovieSceneChannel

--------------------------------
Class: MovieSceneParticleTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ParticleSections;//[Offset: 0x98, Size: 0x10] 0x7873cc5600

--------------------------------
Class: MovieScenePiecewiseDoubleBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePiecewiseIntegerBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePrimitiveMaterialSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel MaterialChannel;//[Offset: 0xe0, Size: 0x108] 0x7873cecd80

--------------------------------
Class: MovieSceneObjectPathChannel.MovieSceneChannel
	ClassPtrProperty PropertyClass;//[Size: 0x8] 0x78736af100
	FrameNumber[] Times;//[Offset: 0x58, Size: 0x10] 0x78736af060
	MovieSceneObjectPathChannelKeyValue[] Values;//[Offset: 0x68, Size: 0x10] 0x78736aefc0
	MovieSceneObjectPathChannelKeyValue DefaultValue;//[Offset: 0x78, Size: 0x30] 0x787392e100

--------------------------------
Class: MovieSceneObjectPathChannelKeyValue
	Object* SoftPtr;//[Offset: 0x0, Size: 0x28] 0x787392e180
	Object* HardPtr;//[Offset: 0x28, Size: 0x8] 0x787392e200

--------------------------------
Class: MovieScenePrimitiveMaterialTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0xc8, Size: 0x4] 0x7873cecd00

--------------------------------
Class: MovieSceneSkeletalAnimationSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSkeletalAnimationParams Params;//[Offset: 0xe0, Size: 0x128] 0x7873cee480
	AnimSequence* AnimSequence;//[Offset: 0x208, Size: 0x8] 0x7873cee500
	AnimSequenceBase* Animation;//[Offset: 0x210, Size: 0x8] 0x7873cee580
	float StartOffset;//[Offset: 0x218, Size: 0x4] 0x7873cee600
	float EndOffset;//[Offset: 0x21c, Size: 0x4] 0x7873cee680
	float PlayRate;//[Offset: 0x220, Size: 0x4] 0x7873cee700
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1] 0x7873cec680
	FName SlotName;//[Offset: 0x228, Size: 0x8] 0x7873cec700
	Vector StartLocationOffset;//[Offset: 0x230, Size: 0x18] 0x7873cec780
	Rotator StartRotationOffset;//[Offset: 0x248, Size: 0x18] 0x7873cec800
	bool bMatchWithPrevious;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x7873cec880
	FName MatchedBoneName;//[Offset: 0x264, Size: 0x8] 0x7873cec900
	Vector MatchedLocationOffset;//[Offset: 0x270, Size: 0x18] 0x7873cec980
	Rotator MatchedRotationOffset;//[Offset: 0x288, Size: 0x18] 0x7873ceca00
	bool bMatchTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x7873ceca80
	bool bMatchIncludeZHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1] 0x7873cecb00
	bool bMatchRotationYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 0x1] 0x7873cecb80
	bool bMatchRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a3, Size: 0x1] 0x7873cecc00
	bool bMatchRotationRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1] 0x7873cecc80

--------------------------------
Class: MovieSceneSkeletalAnimationParams
	AnimSequenceBase* Animation;//[Offset: 0x0, Size: 0x8] 0x7873967a80
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4] 0x7873967b00
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x7873967b80
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4] 0x7873967c00
	float PlayRate;//[Offset: 0x14, Size: 0x4] 0x7873967c80
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7873967d00
	FName SlotName;//[Offset: 0x1c, Size: 0x8] 0x7873967d80
	MirrorDataTable* MirrorDataTable;//[Offset: 0x28, Size: 0x8] 0x7873967e00
	MovieSceneFloatChannel Weight;//[Offset: 0x30, Size: 0xe8] 0x7873967e80
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x7873967f00
	bool bForceCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x7873967f80
	float StartOffset;//[Offset: 0x11c, Size: 0x4] 0x7873968000
	float EndOffset;//[Offset: 0x120, Size: 0x4] 0x7873968080

--------------------------------
Class: MovieSceneSkeletalAnimationTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x98, Size: 0x10] 0x7873cc5420
	bool bUseLegacySectionIndexBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1] 0x7873cee300
	MovieSceneSkeletalAnimRootMotionTrackParams RootMotionParams;//[Offset: 0xb0, Size: 0x30] 0x7873cee380
	bool bBlendFirstChildOfRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x7873cee400

--------------------------------
Class: MovieSceneSkeletalAnimRootMotionTrackParams

--------------------------------
Class: MovieSceneTransformOriginSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneDoubleVectorPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneVisibilityTrack.MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: AsyncTaskDownloadImage.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7873cedc80
	delegate OnFail;//[Offset: 0x40, Size: 0x10] 0x7873cedd00
	static AsyncTaskDownloadImage* DownloadImage(FString URL);// 0xf2b8ebc 0x7873c9eda0

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0x14c, Size: 0x10] 0x7873cef500
	byte HorizontalAlignment;//[Offset: 0x15c, Size: 0x1] 0x7873cef580
	byte VerticalAlignment;//[Offset: 0x15d, Size: 0x1] 0x7873cef600
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e, Size: 0x1] 0x7873cef680
	float BlurStrength;//[Offset: 0x160, Size: 0x4] 0x7873cef700
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 0x1] 0x7873cef780
	int BlurRadius;//[Offset: 0x168, Size: 0x4] 0x7873ced700
	Vector4 CornerRadius;//[Offset: 0x170, Size: 0x20] 0x7873ced780
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x190, Size: 0xc0] 0x7873ced800
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xf2b97f4 0x7873cf1c80
	void SetPadding(Margin InPadding);// 0xf2b9944 0x7873c9e780
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0xf2b9408 0x7873c9e860
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xf2b989c 0x7873c9e940
	void SetCornerRadius(Vector4 InCornerRadius);// 0xf2b9530 0x7873c9ea20
	void SetBlurStrength(float InStrength);// 0xf2b95ec 0x7873c9eb00
	void SetBlurRadius(int InBlurRadius);// 0xf2b969c 0x7873c9ebe0
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0xf2b9744 0x7873c9ecc0

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0xf2c3a74 0x787380c100
	PanelSlot* GetContentSlot();// 0xf2c3b24 0x787380c1e0
	Widget* GetContent();// 0xf2c3a40 0x787380c2c0

--------------------------------
Class: BorderSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7873c21000
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7873c21080
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7873cef800
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xf2bbb74 0x7873cf0cc0
	void SetPadding(Margin InPadding);// 0xf2bbcc4 0x7873cf0da0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xf2bbc1c 0x7873cf0e80

--------------------------------
Class: ButtonSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7873c20280
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7873c20300
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7873c20380
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xf2bd418 0x7873cf0320
	void SetPadding(Margin InPadding);// 0xf2bd568 0x7873cf0400
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xf2bd4c0 0x7873cf04e0

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x149, Size: 0x1] 0x7873cc7b80
	delegate CheckedStateDelegate;//[Offset: 0x14c, Size: 0x10] 0x7873c22a00
	CheckBoxStyle WidgetStyle;//[Offset: 0x160, Size: 0xa10] 0x7873c22a80
	SlateWidgetStyleAsset* Style;//[Offset: 0xb70, Size: 0x8] 0x7873c22b00
	SlateBrushAsset* UncheckedImage;//[Offset: 0xb78, Size: 0x8] 0x7873c22b80
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0xb80, Size: 0x8] 0x7873c22c00
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0xb88, Size: 0x8] 0x7873c22c80
	SlateBrushAsset* CheckedImage;//[Offset: 0xb90, Size: 0x8] 0x7873c22d00
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0xb98, Size: 0x8] 0x7873c22d80
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0xba0, Size: 0x8] 0x7873c22e00
	SlateBrushAsset* UndeterminedImage;//[Offset: 0xba8, Size: 0x8] 0x7873c22e80
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0xbb0, Size: 0x8] 0x7873c22f00
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0xbb8, Size: 0x8] 0x7873c22f80
	byte HorizontalAlignment;//[Offset: 0xbc0, Size: 0x1] 0x7873c23000
	Margin Padding;//[Offset: 0xbc4, Size: 0x10] 0x7873c23080
	SlateColor BorderBackgroundColor;//[Offset: 0xbd4, Size: 0x14] 0x7873c23100
	byte ClickMethod;//[Offset: 0xbe8, Size: 0x1] 0x7873c23180
	byte TouchMethod;//[Offset: 0xbe9, Size: 0x1] 0x7873c21100
	byte PressMethod;//[Offset: 0xbea, Size: 0x1] 0x7873c21180
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbeb, Size: 0x1] 0x7873c21200
	delegate OnCheckStateChanged;//[Offset: 0xbf0, Size: 0x10] 0x7873c21280
	void SetTouchMethod(byte InTouchMethod);// 0xf2bf450 0x7873cf2540
	void SetPressMethod(byte InPressMethod);// 0xf2bf3a8 0x7873cf2620
	void SetIsChecked(bool InIsChecked);// 0xf2bf648 0x7873cf2700
	void SetClickMethod(byte InClickMethod);// 0xf2bf4f8 0x7873cf27e0
	void SetCheckedState(enum InCheckedState);// 0xf2bf5a0 0x7873cf28c0
	bool IsPressed();// 0xf2bf764 0x7873cf29a0
	bool IsChecked();// 0xf2bf72c 0x7873cf2a80
	enum GetCheckedState();// 0xf2bf6f8 0x7873cf2b60

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8] 0x7873c31880

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x30, Size: 0xc0] 0x7873f97880

--------------------------------
Class: ColorBinding.PropertyBinding.Object
	SlateColor GetSlateValue();// 0xf2c17dc 0x7873cf2000
	LinearColor GetLinearValue();// 0xf2c17a4 0x7873cf20e0

--------------------------------
Class: ComboBoxString.Widget.Visual.Object
	FString[] DefaultOptions;//[Offset: 0x138, Size: 0x10] 0x788ab270e0
	FString SelectedOption;//[Offset: 0x148, Size: 0x10] 0x7873819300
	ComboBoxStyle WidgetStyle;//[Offset: 0x160, Size: 0x600] 0x7873819380
	TableRowStyle ItemStyle;//[Offset: 0x760, Size: 0xc50] 0x7873819400
	Margin ContentPadding;//[Offset: 0x13b0, Size: 0x10] 0x7873819480
	float MaxListHeight;//[Offset: 0x13c0, Size: 0x4] 0x7873817400
	bool HasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c4, Size: 0x1] 0x7873817480
	bool EnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c5, Size: 0x1] 0x7873817500
	SlateFontInfo Font;//[Offset: 0x13c8, Size: 0x58] 0x7873817b00
	SlateColor ForegroundColor;//[Offset: 0x1420, Size: 0x14] 0x7873817b80
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1434, Size: 0x1] 0x7873817c00
	delegate OnGenerateWidgetEvent;//[Offset: 0x1438, Size: 0x10] 0x7873817c80
	delegate OnSelectionChanged;//[Offset: 0x1448, Size: 0x10] 0x7873817d00
	delegate OnOpening;//[Offset: 0x1458, Size: 0x10] 0x7873817d80
	void SetSelectedOption(FString Option);// 0xf2c2d80 0x78738074e0
	void SetSelectedIndex(const int index);// 0xf2c2cd8 0x78738075c0
	bool RemoveOption(FString Option);// 0xf2c3070 0x78738076a0
	void RefreshOptions();// 0xf2c2e7c 0x7873807780
	void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0xb8f1ab4 0x7873807860
	void OnOpeningEvent__DelegateSignature();// 0xb8f1ab4 0x7873807940
	bool IsOpen();// 0xf2c2b88 0x7873807a20
	FString GetSelectedOption();// 0xf2c2c28 0x7873807b00
	int GetSelectedIndex();// 0xf2c2bf4 0x7873807be0
	int GetOptionCount();// 0xf2c2bc0 0x7873807cc0
	FString GetOptionAtIndex(int index);// 0xf2c2eb8 0x7873807da0
	int FindOptionIndex(FString Option);// 0xf2c2fb4 0x7873807e80
	void ClearSelection();// 0xf2c2e90 0x7873807f60
	void ClearOptions();// 0xf2c2ea4 0x7873808040
	void AddOption(FString Option);// 0xf2c3130 0x7873808120

--------------------------------
Class: ComboBoxStyle.SlateWidgetStyle
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x10, Size: 0x5a0] 0x7873817000
	SlateSound PressedSlateSound;//[Offset: 0x5b0, Size: 0x18] 0x7873817080
	SlateSound SelectionChangeSlateSound;//[Offset: 0x5c8, Size: 0x18] 0x7873817180
	Margin ContentPadding;//[Offset: 0x5e0, Size: 0x10] 0x7873817200
	Margin MenuRowPadding;//[Offset: 0x5f0, Size: 0x10] 0x7873817280

--------------------------------
Class: ComboButtonStyle.SlateWidgetStyle
	ButtonStyle ButtonStyle;//[Offset: 0x10, Size: 0x3b0] 0x7873816b80
	SlateBrush DownArrowImage;//[Offset: 0x3c0, Size: 0xc0] 0x7873816c00
	Vector2D ShadowOffset;//[Offset: 0x480, Size: 0x10] 0x7873816c80
	LinearColor ShadowColorAndOpacity;//[Offset: 0x490, Size: 0x10] 0x7873816d00
	SlateBrush MenuBorderBrush;//[Offset: 0x4a0, Size: 0xc0] 0x7873816d80
	Margin MenuBorderPadding;//[Offset: 0x560, Size: 0x10] 0x7873816e00
	Margin ContentPadding;//[Offset: 0x570, Size: 0x10] 0x7873816e80
	Margin DownArrowPadding;//[Offset: 0x580, Size: 0x10] 0x7873816f00
	byte DownArrowAlign;//[Offset: 0x590, Size: 0x1] 0x7873816f80

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x10, Size: 0xc0] 0x7873816580
	SlateBrush Hovered;//[Offset: 0xd0, Size: 0xc0] 0x7873816600
	SlateBrush Pressed;//[Offset: 0x190, Size: 0xc0] 0x7873816680
	SlateBrush Disabled;//[Offset: 0x250, Size: 0xc0] 0x7873816700
	SlateColor NormalForeground;//[Offset: 0x310, Size: 0x14] 0x7873816780
	SlateColor HoveredForeground;//[Offset: 0x324, Size: 0x14] 0x7873816800
	SlateColor PressedForeground;//[Offset: 0x338, Size: 0x14] 0x7873816880
	SlateColor DisabledForeground;//[Offset: 0x34c, Size: 0x14] 0x7873816900
	Margin NormalPadding;//[Offset: 0x360, Size: 0x10] 0x7873816980
	Margin PressedPadding;//[Offset: 0x370, Size: 0x10] 0x7873816a00
	SlateSound PressedSlateSound;//[Offset: 0x380, Size: 0x18] 0x7873816a80
	SlateSound HoveredSlateSound;//[Offset: 0x398, Size: 0x18] 0x7873816b00

--------------------------------
Class: TableRowStyle.SlateWidgetStyle
	SlateBrush SelectorFocusedBrush;//[Offset: 0x10, Size: 0xc0] 0x7873817380
	SlateBrush ActiveHoveredBrush;//[Offset: 0xd0, Size: 0xc0] 0x7873815300
	SlateBrush ActiveBrush;//[Offset: 0x190, Size: 0xc0] 0x7873815380
	SlateBrush InactiveHoveredBrush;//[Offset: 0x250, Size: 0xc0] 0x7873815400
	SlateBrush InactiveBrush;//[Offset: 0x310, Size: 0xc0] 0x7873815480
	bool bUseParentRowBrush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1] 0x7873815500
	SlateBrush ParentRowBackgroundBrush;//[Offset: 0x3e0, Size: 0xc0] 0x7873815580
	SlateBrush ParentRowBackgroundHoveredBrush;//[Offset: 0x4a0, Size: 0xc0] 0x7873815600
	SlateBrush EvenRowBackgroundHoveredBrush;//[Offset: 0x560, Size: 0xc0] 0x7873815680
	SlateBrush EvenRowBackgroundBrush;//[Offset: 0x620, Size: 0xc0] 0x7873815700
	SlateBrush OddRowBackgroundHoveredBrush;//[Offset: 0x6e0, Size: 0xc0] 0x7873815780
	SlateBrush OddRowBackgroundBrush;//[Offset: 0x7a0, Size: 0xc0] 0x7873815800
	SlateColor TextColor;//[Offset: 0x860, Size: 0x14] 0x7873815880
	SlateColor SelectedTextColor;//[Offset: 0x874, Size: 0x14] 0x7873815900
	SlateBrush DropIndicator_Above;//[Offset: 0x890, Size: 0xc0] 0x7873815980
	SlateBrush DropIndicator_Onto;//[Offset: 0x950, Size: 0xc0] 0x7873815a00
	SlateBrush DropIndicator_Below;//[Offset: 0xa10, Size: 0xc0] 0x7873815a80
	SlateBrush ActiveHighlightedBrush;//[Offset: 0xad0, Size: 0xc0] 0x7873815b00
	SlateBrush InactiveHighlightedBrush;//[Offset: 0xb90, Size: 0xc0] 0x7873815b80

--------------------------------
Class: FontFace.Object
	FString SourceFilename;//[Offset: 0x30, Size: 0x10] 0x7873e2f280
	enum Hinting;//[Offset: 0x40, Size: 0x1] 0x7873db9480
	enum LoadingPolicy;//[Offset: 0x41, Size: 0x1] 0x7873db9520
	enum LayoutMethod;//[Offset: 0x42, Size: 0x1] 0x7873db95c0

--------------------------------
Class: EditableText.Widget.Visual.Object
	FText Text;//[Offset: 0x138, Size: 0x18] 0x7873819b00
	delegate TextDelegate;//[Offset: 0x150, Size: 0x10] 0x7873819b80
	FText HintText;//[Offset: 0x160, Size: 0x18] 0x7873819c00
	delegate HintTextDelegate;//[Offset: 0x178, Size: 0x10] 0x7873819c80
	EditableTextStyle WidgetStyle;//[Offset: 0x190, Size: 0x2c0] 0x7873819f80
	SlateWidgetStyleAsset* Style;//[Offset: 0x450, Size: 0x8] 0x787381a000
	SlateBrushAsset* BackgroundImageSelected;//[Offset: 0x458, Size: 0x8] 0x787381a080
	SlateBrushAsset* BackgroundImageComposing;//[Offset: 0x460, Size: 0x8] 0x787381a100
	SlateBrushAsset* CaretImage;//[Offset: 0x468, Size: 0x8] 0x787381a180
	SlateFontInfo Font;//[Offset: 0x470, Size: 0x58] 0x787381a200
	SlateColor ColorAndOpacity;//[Offset: 0x4c8, Size: 0x14] 0x787381a280
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 0x1] 0x787381a300
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dd, Size: 0x1] 0x787381a380
	float MinimumDesiredWidth;//[Offset: 0x4e0, Size: 0x4] 0x787381a400
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 0x1] 0x787381a480
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e5, Size: 0x1] 0x787381a500
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e6, Size: 0x1] 0x7873818480
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e7, Size: 0x1] 0x7873818500
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1] 0x7873818580
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 0x1] 0x7873818600
	byte KeyboardType;//[Offset: 0x4ea, Size: 0x1] 0x7873818680
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x4eb, Size: 0x1] 0x7873818780
	enum VirtualKeyboardTrigger;//[Offset: 0x4ec, Size: 0x1] 0x788ab256a0
	enum VirtualKeyboardDismissAction;//[Offset: 0x4ed, Size: 0x1] 0x788ab25560
	byte Justification;//[Offset: 0x4ee, Size: 0x1] 0x7873818900
	enum OverflowPolicy;//[Offset: 0x4ef, Size: 0x1] 0x788ab25380
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x4f0, Size: 0x3] 0x7873818c00
	delegate OnTextChanged;//[Offset: 0x4f8, Size: 0x10] 0x7873818c80
	delegate OnTextCommitted;//[Offset: 0x508, Size: 0x10] 0x7873818d00
	void SetTextOverflowPolicy(enum InOverflowPolicy);// 0xf2c60a0 0x787380a6c0
	void SetText(FText InText);// 0xf2c64e4 0x787380a7a0
	void SetJustification(byte InJustification);// 0xf2c6148 0x787380a880
	void SetIsReadOnly(bool InbIsReadyOnly);// 0xf2c61f0 0x787380a960
	void SetIsPassword(bool InbIsPassword);// 0xf2c6434 0x787380aa40
	void SetHintText(FText InHintText);// 0xf2c62a0 0x787380ab20
	void OnEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0xb8f1ab4 0x787380ac00
	void OnEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0xb8f1ab4 0x787380ace0
	FText GetText();// 0xf2c6678 0x7873807400

--------------------------------
Class: EditableTextStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58] 0x7873819d00
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x14] 0x7873819d80
	SlateBrush BackgroundImageSelected;//[Offset: 0x80, Size: 0xc0] 0x7873819e00
	SlateBrush BackgroundImageComposing;//[Offset: 0x140, Size: 0xc0] 0x7873819e80
	SlateBrush CaretImage;//[Offset: 0x200, Size: 0xc0] 0x7873819f00

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873818700

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7873818a00
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7873818a80
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1] 0x788ab25420
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1] 0x788ab254c0

--------------------------------
Class: FloatBinding.PropertyBinding.Object
	float GetValue();// 0xf2c97a8 0x7873cf4ca0

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0xf2cb0cc 0x7873cf4140

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x7873c25d00
	SlateChildSize Size;//[Offset: 0x50, Size: 0x8] 0x7873c25d80
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x7873c25e00
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x7873c25e80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xf2cb678 0x7873cf3dc0
	void SetSize(SlateChildSize InSize);// 0xf2cb7c8 0x7873cf3ea0
	void SetPadding(Margin InPadding);// 0xf2cb87c 0x7873cf3f80
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xf2cb720 0x7873cf4060

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4] 0x7873968a00
	byte SizeRule;//[Offset: 0x4, Size: 0x1] 0x7873968a80

--------------------------------
Class: InputKeySelector.Widget.Visual.Object
	ButtonStyle WidgetStyle;//[Offset: 0x140, Size: 0x3b0] 0x787381ca80
	TextBlockStyle TextStyle;//[Offset: 0x4f0, Size: 0x310] 0x787381d080
	InputChord SelectedKey;//[Offset: 0x800, Size: 0x20] 0x787381d100
	SlateFontInfo Font;//[Offset: 0x820, Size: 0x58] 0x787381d180
	Margin Margin;//[Offset: 0x878, Size: 0x10] 0x787381d200
	LinearColor ColorAndOpacity;//[Offset: 0x888, Size: 0x10] 0x787381d280
	FText KeySelectionText;//[Offset: 0x898, Size: 0x18] 0x787381d300
	FText NoKeySpecifiedText;//[Offset: 0x8b0, Size: 0x18] 0x787381d380
	bool bAllowModifierKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 0x1] 0x787381d400
	bool bAllowGamepadKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 0x1] 0x787381d480
	Key[] EscapeKeys;//[Offset: 0x8d0, Size: 0x10] 0x788ab25b00
	delegate OnKeySelected;//[Offset: 0x8e0, Size: 0x10] 0x787381d580
	delegate OnIsSelectingKeyChanged;//[Offset: 0x8f0, Size: 0x10] 0x787381d600
	void SetTextBlockVisibility(const enum InVisibility);// 0xf2cd4ec 0x78738092a0
	void SetSelectedKey(out const InputChord InSelectedKey);// 0xf2cda54 0x7873809380
	void SetNoKeySpecifiedText(FText InNoKeySpecifiedText);// 0xf2cd72c 0x7873809460
	void SetKeySelectionText(FText InKeySelectionText);// 0xf2cd8c0 0x7873809540
	void SetEscapeKeys(out const Key[] InKeys);// 0xf2cd39c 0x7873809620
	void SetAllowModifierKeys(bool bInAllowModifierKeys);// 0xf2cd67c 0x7873809700
	void SetAllowGamepadKeys(bool bInAllowGamepadKeys);// 0xf2cd5cc 0x78738097e0
	void OnKeySelected__DelegateSignature(InputChord SelectedKey);// 0xb8f1ab4 0x78738098c0
	void OnIsSelectingKeyChanged__DelegateSignature();// 0xb8f1ab4 0x78738099a0
	bool GetIsSelectingKey();// 0xf2cd594 0x7873809a80

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58] 0x787381cb00
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x14] 0x787381cb80
	Vector2D ShadowOffset;//[Offset: 0x78, Size: 0x10] 0x787381cc00
	LinearColor ShadowColorAndOpacity;//[Offset: 0x88, Size: 0x10] 0x787381cc80
	SlateColor SelectedBackgroundColor;//[Offset: 0x98, Size: 0x14] 0x787381cd00
	SlateColor HighlightColor;//[Offset: 0xac, Size: 0x14] 0x787381cd80
	SlateBrush HighlightShape;//[Offset: 0xc0, Size: 0xc0] 0x787381ce00
	SlateBrush StrikeBrush;//[Offset: 0x180, Size: 0xc0] 0x787381ce80
	SlateBrush UnderlineBrush;//[Offset: 0x240, Size: 0xc0] 0x787381cf00
	enum TransformPolicy;//[Offset: 0x300, Size: 0x1] 0x788ab25880
	enum OverflowPolicy;//[Offset: 0x301, Size: 0x1] 0x788ab25ba0

--------------------------------
Class: UserListEntry.Interface.Object
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0xb8f1ab4 0x7873cf6520
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0xb8f1ab4 0x7873cf6600
	void BP_OnEntryReleased();// 0xb8f1ab4 0x7873cf66e0

--------------------------------
Class: UserObjectListEntryLibrary.BlueprintFunctionLibrary.Object
	static Object* GetListItemObject(interface classNone UserObjectListEntry);// 0xf2d034c 0x7873cf60c0

--------------------------------
Class: ListViewDesignerPreviewItem.Object

--------------------------------
Class: MovieScene2DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneMarginSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TopCurve;//[Offset: 0xe8, Size: 0xe8] 0x7873c28780
	MovieSceneFloatChannel LeftCurve;//[Offset: 0x1d0, Size: 0xe8] 0x7873c28800
	MovieSceneFloatChannel RightCurve;//[Offset: 0x2b8, Size: 0xe8] 0x7873c28880
	MovieSceneFloatChannel BottomCurve;//[Offset: 0x3a0, Size: 0xe8] 0x7873c28900

--------------------------------
Class: MovieSceneMarginTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MultiLineEditableText.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x150, Size: 0x18] 0x7873820f00
	FText HintText;//[Offset: 0x168, Size: 0x18] 0x7873820f80
	delegate HintTextDelegate;//[Offset: 0x180, Size: 0x10] 0x7873821000
	TextBlockStyle WidgetStyle;//[Offset: 0x190, Size: 0x310] 0x7873821080
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1] 0x787381f800
	SlateFontInfo Font;//[Offset: 0x4a8, Size: 0x58] 0x787381f880
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1] 0x787381f900
	bool ClearTextSelectionOnFocusLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 0x1] 0x787381f980
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x502, Size: 0x1] 0x787381fa00
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x503, Size: 0x1] 0x787381fa80
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 0x1] 0x787381fb00
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x505, Size: 0x1] 0x787381fb80
	enum VirtualKeyboardDismissAction;//[Offset: 0x506, Size: 0x1] 0x788ab25ec0
	delegate OnTextChanged;//[Offset: 0x508, Size: 0x10] 0x787381fc80
	delegate OnTextCommitted;//[Offset: 0x518, Size: 0x10] 0x787381fd00
	void SetWidgetStyle(out const TextBlockStyle InWidgetStyle);// 0xf2d6cc0 0x787380ce20
	void SetText(FText InText);// 0xf2d709c 0x787380cf00
	void SetIsReadOnly(bool bReadOnly);// 0xf2d6d80 0x787380cfe0
	void SetHintText(FText InHintText);// 0xf2d6e30 0x787380d0c0
	void OnMultiLineEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0xb8f1ab4 0x787380d1a0
	void OnMultiLineEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0xb8f1ab4 0x787380d280
	FText GetText();// 0xf2d7230 0x787380d360
	FText GetHintText();// 0xf2d6fc4 0x787380d440

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x131, Size: 0x3] 0x787381e980
	byte Justification;//[Offset: 0x134, Size: 0x1] 0x787381ea00
	enum WrappingPolicy;//[Offset: 0x135, Size: 0x1] 0x788ab272c0
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x136, Size: 0x1] 0x787381eb00
	float WrapTextAt;//[Offset: 0x138, Size: 0x4] 0x787381eb80
	Margin Margin;//[Offset: 0x13c, Size: 0x10] 0x787381ec00
	float LineHeightPercentage;//[Offset: 0x14c, Size: 0x4] 0x787381ec80
	void SetJustification(byte InJustification);// 0xf2ee2ec 0x787380d520

--------------------------------
Class: NamedSlotInterface.Interface.Object

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x7873c2a380
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x7873c2a400
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x7873c2a480
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xf2d994c 0x7873cf7860
	void SetPadding(Margin InPadding);// 0xf2d9a9c 0x7873cf7940
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xf2d99f4 0x7873cf7a20

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x150, Size: 0x18] 0x7873c2aa00
	DataTable* TextStyleSet;//[Offset: 0x168, Size: 0x8] 0x7873c2aa80
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x170, Size: 0x10] 0x7873cc6b40
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1] 0x7873c2ab00
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x190, Size: 0x310] 0x7873c2ab80
	float MinDesiredWidth;//[Offset: 0x4a0, Size: 0x4] 0x7873c2ac00
	enum TextTransformPolicy;//[Offset: 0x4a4, Size: 0x1] 0x7873cc6be0
	enum TextOverflowPolicy;//[Offset: 0x4a5, Size: 0x1] 0x7873cc6c80
	TextBlockStyle DefaultTextStyle;//[Offset: 0x4b0, Size: 0x310] 0x7873c2ad80
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x7c0, Size: 0x10] 0x7873cc6d20
	void SetTextTransformPolicy(enum InTransformPolicy);// 0xf2ddaf0 0x7873cf9b60
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0xf2dd6a0 0x7873cf9c40
	void SetTextOverflowPolicy(enum InOverflowPolicy);// 0xf2dda48 0x7873cf9d20
	void SetText(out const FText InText);// 0xf2dd748 0x7873cf9e00
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0xf2ddc48 0x7873cf9ee0
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0xf2dd988 0x7873cf9fc0
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0xf2ddcf0 0x7873cfa0a0
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0xf2ddfc4 0x7873cfa180
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0xf2de068 0x7873cfa260
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0xf2dde18 0x7873cfa340
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0xf2de110 0x7873cfa420
	void SetAutoWrapText(bool InAutoTextWrap);// 0xf2ddb98 0x7873cfa500
	void RefreshTextLayout();// 0xf2dd5dc 0x7873cfa5e0
	FText GetText();// 0xf2dd868 0x7873cfa6c0
	MaterialInstanceDynamic* GetDefaultDynamicMaterial();// 0xf2dd940 0x7873cfa7a0
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0xf2dd5f0 0x7873cfa880
	void ClearAllDefaultStyleOverrides();// 0xf2dd974 0x7873cfa960

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object
	bool PadLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1] 0x7873c2a580
	bool PadRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1] 0x7873c2a600
	bool PadTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b, Size: 0x1] 0x7873c2a680
	bool PadBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1] 0x7873c2a700
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);// 0xf2df2ec 0x7873cf9a80

--------------------------------
Class: ScaleBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7873c2bd00
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7873c2bd80
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7873c2be00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xf2e0488 0x7873cf9460
	void SetPadding(Margin InPadding);// 0xf2e05d8 0x7873cf9540
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xf2e0530 0x7873cf9620

--------------------------------
Class: ScrollBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7873c2e280
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7873c2e300
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7873c2e380
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xf2e25e0 0x7873cfba00
	void SetPadding(Margin InPadding);// 0xf2e2730 0x7873cfbae0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xf2e2688 0x7873cfbbc0

--------------------------------
Class: SlateBlueprintLibrary.BlueprintFunctionLibrary.Object
	static Vector2D TransformVectorLocalToAbsolute(out const Geometry Geometry, Vector2D LocalVector);// 0xf2e662c 0x7873cfd520
	static Vector2D TransformVectorAbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteVector);// 0xf2e6724 0x7873cfd600
	static float TransformScalarLocalToAbsolute(out const Geometry Geometry, float LocalScalar);// 0xf2e681c 0x7873cfd6e0
	static float TransformScalarAbsoluteToLocal(out const Geometry Geometry, float AbsoluteScalar);// 0xf2e6918 0x7873cfd7c0
	static void ScreenToWidgetLocal(Object* WorldContextObject, out const Geometry Geometry, Vector2D ScreenPosition, out Vector2D LocalCoordinate, bool bIncludeWindowPosition);// 0xf2e5f28 0x7873cfd8a0
	static void ScreenToWidgetAbsolute(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D AbsoluteCoordinate, bool bIncludeWindowPosition);// 0xf2e5da8 0x7873cfd980
	static void ScreenToViewport(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D ViewportPosition);// 0xf2e5c7c 0x7873cfda60
	static void LocalToViewport(Object* WorldContextObject, out const Geometry Geometry, Vector2D LocalCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0xf2e6274 0x7873cfdb40
	static Vector2D LocalToAbsolute(out const Geometry Geometry, Vector2D LocalCoordinate);// 0xf2e6c3c 0x7873cfdc20
	static bool IsUnderLocation(out const Geometry Geometry, out const Vector2D AbsoluteCoordinate);// 0xf2e6e2c 0x7873cfdd00
	static Vector2D GetLocalTopLeft(out const Geometry Geometry);// 0xf2e6b84 0x7873cfdde0
	static Vector2D GetLocalSize(out const Geometry Geometry);// 0xf2e6acc 0x7873cfdec0
	static Vector2D GetAbsoluteSize(out const Geometry Geometry);// 0xf2e6a14 0x7873cfdfa0
	static bool EqualEqual_SlateBrush(out const SlateBrush A, out const SlateBrush B);// 0xf2e6440 0x7873cfe080
	static void AbsoluteToViewport(Object* WorldContextObject, Vector2D AbsoluteDesktopCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0xf2e60f4 0x7873cfe160
	static Vector2D AbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteCoordinate);// 0xf2e6d34 0x7873cfe240

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x134, Size: 0x4] 0x7873d21c80
	delegate ValueDelegate;//[Offset: 0x138, Size: 0x10] 0x7873d21d00
	float MinValue;//[Offset: 0x148, Size: 0x4] 0x7873d21d80
	float MaxValue;//[Offset: 0x14c, Size: 0x4] 0x7873d21e00
	SliderStyle WidgetStyle;//[Offset: 0x150, Size: 0x4a0] 0x7873d21e80
	byte Orientation;//[Offset: 0x5f0, Size: 0x1] 0x7873d21f00
	LinearColor SliderBarColor;//[Offset: 0x5f4, Size: 0x10] 0x7873d21f80
	LinearColor SliderHandleColor;//[Offset: 0x604, Size: 0x10] 0x7873d22000
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 0x1] 0x7873d22080
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 0x1] 0x7873d22100
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x616, Size: 0x1] 0x7873d20080
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x617, Size: 0x1] 0x7873d20100
	float StepSize;//[Offset: 0x618, Size: 0x4] 0x7873d20180
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1] 0x7873d20200
	delegate OnMouseCaptureBegin;//[Offset: 0x620, Size: 0x10] 0x7873d20280
	delegate OnMouseCaptureEnd;//[Offset: 0x630, Size: 0x10] 0x7873d20300
	delegate OnControllerCaptureBegin;//[Offset: 0x640, Size: 0x10] 0x7873d20380
	delegate OnControllerCaptureEnd;//[Offset: 0x650, Size: 0x10] 0x7873d20400
	delegate OnValueChanged;//[Offset: 0x660, Size: 0x10] 0x7873d20480
	void SetValue(float InValue);// 0xf2e8cc4 0x7873cfcc60
	void SetStepSize(float InValue);// 0xf2e896c 0x7873cfcd40
	void SetSliderHandleColor(LinearColor InValue);// 0xf2e881c 0x7873cfce20
	void SetSliderBarColor(LinearColor InValue);// 0xf2e88c4 0x7873cfcf00
	void SetMinValue(float InValue);// 0xf2e8c1c 0x7873cfcfe0
	void SetMaxValue(float InValue);// 0xf2e8b74 0x7873cfd0c0
	void SetLocked(bool InValue);// 0xf2e8a14 0x7873cfd1a0
	void SetIndentHandle(bool InValue);// 0xf2e8ac4 0x7873cfd280
	float GetValue();// 0xf2e8da0 0x7873cfd360
	float GetNormalizedValue();// 0xf2e8d6c 0x7873cfd440

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x10, Size: 0xc0] 0x787391d600
	SlateBrush HoveredBarImage;//[Offset: 0xd0, Size: 0xc0] 0x787391d680
	SlateBrush DisabledBarImage;//[Offset: 0x190, Size: 0xc0] 0x787391b600
	SlateBrush NormalThumbImage;//[Offset: 0x250, Size: 0xc0] 0x787391b680
	SlateBrush HoveredThumbImage;//[Offset: 0x310, Size: 0xc0] 0x787391b700
	SlateBrush DisabledThumbImage;//[Offset: 0x3d0, Size: 0xc0] 0x787391b780
	float BarThickness;//[Offset: 0x490, Size: 0x4] 0x787391b800

--------------------------------
Class: TextBinding.PropertyBinding.Object
	FText GetTextValue();// 0xf2ec64c 0x7873cfff20
	FString GetStringValue();// 0xf2ec59c 0x7873cfcaa0

--------------------------------
Class: TileView.ListView.ListViewBase.Widget.Visual.Object
	float EntryHeight;//[Offset: 0xb50, Size: 0x4] 0x7873d22400
	float EntryWidth;//[Offset: 0xb54, Size: 0x4] 0x7873d22480
	enum TileAlignment;//[Offset: 0xb58, Size: 0x1] 0x7873cc89e0
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb59, Size: 0x1] 0x7873d22580
	void SetEntryWidth(float NewWidth);// 0xf2eef50 0x7873cfebe0
	void SetEntryHeight(float NewHeight);// 0xf2eeff8 0x7873cfecc0
	float GetEntryWidth();// 0xf2eef18 0x7873cfeda0
	float GetEntryHeight();// 0xf2eef34 0x7873cfee80

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object
	TableViewStyle WidgetStyle;//[Offset: 0x310, Size: 0xd0] 0x7873c28d00
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x3e0, Size: 0x6e0] 0x7873c28d80
	byte Orientation;//[Offset: 0xac0, Size: 0x1] 0x7873c28e00
	byte SelectionMode;//[Offset: 0xac1, Size: 0x1] 0x7873c28e80
	enum ConsumeMouseWheel;//[Offset: 0xac2, Size: 0x1] 0x7873cc7040
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac3, Size: 0x1] 0x7873c28f80
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac4, Size: 0x1] 0x7873c29000
	float EntrySpacing;//[Offset: 0xac8, Size: 0x4] 0x7873c29080
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xacc, Size: 0x1] 0x7873c29100
	Object*[] ListItems;//[Offset: 0xad0, Size: 0x10] 0x7873cc70e0
	delegate BP_OnEntryInitialized;//[Offset: 0xaf0, Size: 0x10] 0x7873c29200
	delegate BP_OnItemClicked;//[Offset: 0xb00, Size: 0x10] 0x7873c29280
	delegate BP_OnItemDoubleClicked;//[Offset: 0xb10, Size: 0x10] 0x7873c29300
	delegate BP_OnItemIsHoveredChanged;//[Offset: 0xb20, Size: 0x10] 0x7873c29380
	delegate BP_OnItemSelectionChanged;//[Offset: 0xb30, Size: 0x10] 0x7873c29400
	delegate BP_OnItemScrolledIntoView;//[Offset: 0xb40, Size: 0x10] 0x7873c29480
	void SetSelectionMode(byte SelectionMode);// 0xf2d13d8 0x7873cf7cc0
	void SetSelectedIndex(int index);// 0xf2d1250 0x7873cf7da0
	void ScrollIndexIntoView(int index);// 0xf2d12f8 0x7873cf7e80
	void RemoveItem(Object* Item);// 0xf2d1628 0x7873cf7f60
	void OnListItemOuterEndPlayed(Actor* ItemOuter, byte EndPlayReason);// 0xf2d0fc0 0x7873cf8040
	void OnListItemEndPlayed(Actor* Item, byte EndPlayReason);// 0xf2d10b4 0x7873cf8120
	void NavigateToIndex(int index);// 0xf2d11a8 0x7873cf8200
	bool IsRefreshPending();// 0xf2d13a0 0x7873cf82e0
	int GetNumItems();// 0xf2d1544 0x7873cf83c0
	Object*[] GetListItems();// 0xf2d1778 0x7873cf84a0
	Object* GetItemAt(int index);// 0xf2d1578 0x7873cf8580
	int GetIndexForItem(const Object* Item);// 0xf2d1494 0x7873cf8660
	void ClearListItems();// 0xf2d1480 0x7873cf8740
	void BP_SetSelectedItem(Object* Item);// 0xf2d0f18 0x7873cf8820
	void BP_SetListItems(out const Object*[] InListItems);// 0xf2d0a30 0x7873cf8900
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0xf2d0e1c 0x7873cf89e0
	void BP_ScrollItemIntoView(Object* Item);// 0xf2d0b04 0x7873cf8ac0
	void BP_NavigateToItem(Object* Item);// 0xf2d0bac 0x7873cf8ba0
	bool BP_IsItemVisible(Object* Item);// 0xf2d0c54 0x7873cf8c80
	bool BP_GetSelectedItems(out Object*[] Items);// 0xf2d0d08 0x7873cf8d60
	Object* BP_GetSelectedItem();// 0xf2d09fc 0x7873cf8e40
	int BP_GetNumItemsSelected();// 0xf2d0dd4 0x7873cf8f20
	void BP_ClearSelection();// 0xf2d0e08 0x7873cf9000
	void BP_CancelScrollIntoView();// 0xf2d0af0 0x7873cf5720
	void AddItem(Object* Item);// 0xf2d16d0 0x7873cf5800

--------------------------------
Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x138, Size: 0x8] 0x7873cc7360
	float WheelScrollMultiplier;//[Offset: 0x140, Size: 0x4] 0x7873c28380
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1] 0x7873c28400
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1] 0x7873c26380
	bool bEnableRightClickScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 0x1] 0x7873c26400
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147, Size: 0x1] 0x7873c26480
	float FixedLineScrollOffset;//[Offset: 0x148, Size: 0x4] 0x7873c26500
	bool bAllowDragging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1] 0x7873c26580
	delegate BP_OnEntryGenerated;//[Offset: 0x150, Size: 0x10] 0x7873c26600
	delegate BP_OnEntryReleased;//[Offset: 0x160, Size: 0x10] 0x7873c26680
	UserWidgetPool EntryWidgetPool;//[Offset: 0x170, Size: 0x88] 0x7873c26700
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0xf2d3048 0x7873cf58e0
	void SetScrollOffset(const float InScrollOffset);// 0xf2d30f0 0x7873cf59c0
	void SetScrollbarVisibility(enum InVisibility);// 0xf2d2fa0 0x7873cf5aa0
	void ScrollToTop();// 0xf2d31ac 0x7873cf5b80
	void ScrollToBottom();// 0xf2d3198 0x7873cf5c60
	void RequestRefresh();// 0xf2d2f8c 0x7873cf5d40
	void RegenerateAllEntries();// 0xf2d31c0 0x7873cf5e20
	float GetScrollOffset();// 0xf2d31d4 0x7873cf5f00
	UserWidget*[] GetDisplayedEntryWidgets();// 0xf2d3208 0x7873cf5fe0

--------------------------------
Class: TableViewStyle.SlateWidgetStyle
	SlateBrush BackgroundBrush;//[Offset: 0x10, Size: 0xc0] 0x787391d080

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 0x10] 0x7873768580
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 0x10] 0x7873768620

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 0x8] 0x7873d2b400
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x7873d2b480
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x7873d2b500
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x7873d2b580
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xf2fde2c 0x7873d36fa0
	void SetSize(SlateChildSize InSize);// 0xf2fdf7c 0x7873d37080
	void SetPadding(Margin InPadding);// 0xf2fe030 0x7873d37160
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xf2fded4 0x7873d37240

--------------------------------
Class: WidgetBinding.PropertyBinding.Object
	Widget* GetValue();// 0xf3052f8 0x7873d35fe0

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x569, Size: 0x1] 0x7873cc9e80
	enum TimingPolicy;//[Offset: 0x56a, Size: 0x1] 0x7873cc9f20
	class UserWidget* WidgetClass;//[Offset: 0x570, Size: 0x8] 0x7873cc9fc0
	IntPoint DrawSize;//[Offset: 0x578, Size: 0x8] 0x7873d2da00
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1] 0x7873d2da80
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 0x1] 0x7873d2db00
	float RedrawTime;//[Offset: 0x584, Size: 0x4] 0x7873d2db80
	IntPoint CurrentDrawSize;//[Offset: 0x590, Size: 0x8] 0x7873d2dc00
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1] 0x7873d2dc80
	Vector2D Pivot;//[Offset: 0x5a0, Size: 0x10] 0x7873d2dd00
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1] 0x7873d2dd80
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 0x1] 0x7873d2de00
	enum WindowVisibility;//[Offset: 0x5b2, Size: 0x1] 0x7873cca060
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b3, Size: 0x1] 0x7873d2df00
	LocalPlayer* OwnerPlayer;//[Offset: 0x5b8, Size: 0x8] 0x7873d2df80
	LinearColor BackgroundColor;//[Offset: 0x5c0, Size: 0x10] 0x7873d2e000
	LinearColor TintColorAndOpacity;//[Offset: 0x5d0, Size: 0x10] 0x7873d2e080
	float OpacityFromTexture;//[Offset: 0x5e0, Size: 0x4] 0x7873d2e100
	enum BlendMode;//[Offset: 0x5e4, Size: 0x1] 0x7873cca100
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e5, Size: 0x1] 0x7873d2e200
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e6, Size: 0x1] 0x7873d2e280
	BodySetup* BodySetup;//[Offset: 0x5e8, Size: 0x8] 0x7873d2e300
	MaterialInterface* TranslucentMaterial;//[Offset: 0x5f0, Size: 0x8] 0x7873d2e380
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x5f8, Size: 0x8] 0x7873d2e400
	MaterialInterface* OpaqueMaterial;//[Offset: 0x600, Size: 0x8] 0x7873d2e480
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x608, Size: 0x8] 0x7873d2e500
	MaterialInterface* MaskedMaterial;//[Offset: 0x610, Size: 0x8] 0x7873d2e580
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x618, Size: 0x8] 0x7873d2e600
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x620, Size: 0x8] 0x7873d2e680
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x628, Size: 0x8] 0x7873d2e700
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x630, Size: 0x1] 0x7873d2c680
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x631, Size: 0x1] 0x7873d2c700
	FName SharedLayerName;//[Offset: 0x634, Size: 0x8] 0x7873d2c780
	int LayerZOrder;//[Offset: 0x63c, Size: 0x4] 0x7873d2c800
	enum GeometryMode;//[Offset: 0x640, Size: 0x1] 0x7873cca1a0
	float CylinderArcAngle;//[Offset: 0x644, Size: 0x4] 0x7873d2c900
	enum TickMode;//[Offset: 0x648, Size: 0x1] 0x7873cca240
	UserWidget* Widget;//[Offset: 0x678, Size: 0x8] 0x7873d2ca00
	void SetWindowVisibility(enum InVisibility);// 0xf30be44 0x7873d37860
	void SetWindowFocusable(bool bInWindowFocusable);// 0xf30bf08 0x7873d37940
	void SetWidgetSpace(enum NewSpace);// 0xf30c154 0x7873d37a20
	void SetWidget(UserWidget* Widget);// 0xf30ca38 0x7873d37b00
	void SetTwoSided(const bool bWantTwoSided);// 0xf30c680 0x7873d37be0
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0xf30c468 0x7873d37cc0
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0xf30c5b8 0x7873d37da0
	void SetTickMode(enum InTickMode);// 0xf30bd9c 0x7873d37e80
	void SetRedrawTime(float InRedrawTime);// 0xf30c214 0x7873d37f60
	void SetPivot(out const Vector2D InPivot);// 0xf30c39c 0x7873d38040
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0xf30c990 0x7873d38120
	void SetManuallyRedraw(bool bUseManualRedraw);// 0xf30c8c4 0x7873d38200
	void SetGeometryMode(enum InGeometryMode);// 0xf30c094 0x7873d382e0
	void SetDrawSize(Vector2D Size);// 0xf30c784 0x7873d383c0
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0xf30c2d4 0x7873d384a0
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0xf30bfd4 0x7873d38580
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0xf30c510 0x7873d38660
	void RequestRenderUpdate();// 0xf30c74c 0x7873d38740
	void RequestRedraw();// 0xf30c768 0x7873d38820
	bool IsWidgetVisible();// 0xf30bd64 0x7873d38900
	enum GetWindowVisiblility();// 0xf30beec 0x7873d389e0
	bool GetWindowFocusable();// 0xf30bfb8 0x7873d38ac0
	enum GetWidgetSpace();// 0xf30c1f8 0x7873d38ba0
	UserWidget* GetWidget();// 0xf30cae8 0x7873d38c80
	UserWidget* GetUserWidgetObject();// 0xf30cb8c 0x7873d38d60
	bool GetTwoSided();// 0xf30c730 0x7873d38e40
	bool GetTickWhenOffscreen();// 0xf30c664 0x7873d38f20
	TextureRenderTarget2D* GetRenderTarget();// 0xf30cb58 0x7873d39000
	float GetRedrawTime();// 0xf30c2b8 0x7873d35720
	Vector2D GetPivot();// 0xf30c44c 0x7873d35800
	LocalPlayer* GetOwnerPlayer();// 0xf30c890 0x7873d358e0
	MaterialInstanceDynamic* GetMaterialInstance();// 0xf30cb24 0x7873d359c0
	bool GetManuallyRedraw();// 0xf30c974 0x7873d35aa0
	enum GetGeometryMode();// 0xf30c138 0x7873d35b80
	Vector2D GetDrawSize();// 0xf30c85c 0x7873d35c60
	bool GetDrawAtDesiredSize();// 0xf30c380 0x7873d35d40
	float GetCylinderArcAngle();// 0xf30c078 0x7873d35e20
	Vector2D GetCurrentDrawSize();// 0xf30c828 0x7873d35f00

--------------------------------
Class: WidgetInteractionComponent.SceneComponent.ActorComponent.Object
	delegate OnHoveredWidgetChanged;//[Offset: 0x2b0, Size: 0x10] 0x7873d2fe80
	int VirtualUserIndex;//[Offset: 0x2d0, Size: 0x4] 0x7873d2ff00
	int PointerIndex;//[Offset: 0x2d4, Size: 0x4] 0x7873d2ff80
	byte TraceChannel;//[Offset: 0x2d8, Size: 0x1] 0x7873d2e780
	float InteractionDistance;//[Offset: 0x2dc, Size: 0x4] 0x7873d2e800
	enum InteractionSource;//[Offset: 0x2e0, Size: 0x1] 0x7873cc9de0
	bool bEnableHitTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 0x1] 0x7873d2e900
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e2, Size: 0x1] 0x7873d2e980
	float DebugSphereLineThickness;//[Offset: 0x2e4, Size: 0x4] 0x7873d2ea00
	float DebugLineThickness;//[Offset: 0x2e8, Size: 0x4] 0x7873d2ea80
	LinearColor DebugColor;//[Offset: 0x2ec, Size: 0x10] 0x7873d2eb00
	HitResult CustomHitResult;//[Offset: 0x378, Size: 0xe8] 0x7873d2eb80
	Vector2D LocalHitLocation;//[Offset: 0x460, Size: 0x10] 0x7873d2ec00
	Vector2D LastLocalHitLocation;//[Offset: 0x470, Size: 0x10] 0x7873d2ec80
	WidgetComponent* HoveredWidgetComponent;//[Offset: 0x480, Size: 0x8] 0x7873d2ed00
	HitResult LastHitResult;//[Offset: 0x488, Size: 0xe8] 0x7873d2ed80
	bool bIsHoveredWidgetInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1] 0x7873d2ee00
	bool bIsHoveredWidgetFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 0x1] 0x7873d2ee80
	bool bIsHoveredWidgetHitTestVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x572, Size: 0x1] 0x7873d2ef00
	void SetFocus(Widget* FocusWidget);// 0xf310050 0x7873d3a500
	void SetCustomHitResult(out const HitResult HitResult);// 0xf3100f8 0x7873d3a5e0
	bool SendKeyChar(FString Characters, bool bRepeat);// 0xf310440 0x7873d3a6c0
	void ScrollWheel(float ScrollDelta);// 0xf310390 0x7873d3a7a0
	void ReleasePointerKey(Key Key);// 0xf310af8 0x7873d3a880
	bool ReleaseKey(Key Key);// 0xf310754 0x7873d3a960
	void PressPointerKey(Key Key);// 0xf310c94 0x7873d3aa40
	bool PressKey(Key Key, bool bRepeat);// 0xf3108fc 0x7873d3ab20
	bool PressAndReleaseKey(Key Key);// 0xf3105ac 0x7873d3ac00
	bool IsOverInteractableWidget();// 0xf310324 0x7873d3ace0
	bool IsOverHitTestVisibleWidget();// 0xf3102b4 0x7873d37400
	bool IsOverFocusableWidget();// 0xf3102ec 0x7873d374e0
	HitResult GetLastHitResult();// 0xf31023c 0x7873d375c0
	WidgetComponent* GetHoveredWidgetComponent();// 0xf31035c 0x7873d376a0
	Vector2D Get2DHitLocation();// 0xf310208 0x7873d37780

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x14c, Size: 0x4] 0x7873d51900
	void SetActiveWidgetIndex(int index);// 0xf313b80 0x7873d3c640
	void SetActiveWidget(Widget* Widget);// 0xf313ad0 0x7873d3c720
	Widget* GetWidgetAtIndex(int index);// 0xf313a20 0x7873d3c800
	int GetNumWidgets();// 0xf313c64 0x7873d3c8e0
	int GetActiveWidgetIndex();// 0xf313c30 0x7873d3c9c0
	Widget* GetActiveWidget();// 0xf3139ec 0x7873d390e0

--------------------------------
Class: WindowTitleBarArea.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bWindowButtonsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1] 0x7873d51300
	bool bDoubleClickTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1] 0x7873d51380
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xf314ce8 0x7873d3c100
	void SetPadding(Margin InPadding);// 0xf314e38 0x7873d3c1e0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xf314d90 0x7873d3c2c0

--------------------------------
Class: WrapBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7873d52600
	bool bFillEmptySpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7873d52680
	float FillSpanWhenLessThan;//[Offset: 0x4c, Size: 0x4] 0x7873d52700
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x7873d52780
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x7873d52800
	bool bForceNewLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x7873d52880
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xf316268 0x7873d3b680
	void SetPadding(Margin InPadding);// 0xf316510 0x7873d3b760
	void SetNewLine(bool InForceNewLine);// 0xf3161b8 0x7873d3b840
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xf316310 0x7873d3b920
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);// 0xf3163b8 0x7873d3ba00
	void SetFillEmptySpace(bool InbFillEmptySpace);// 0xf316460 0x7873d3bae0

--------------------------------
Class: TypedElementObjectInterface.Interface.Object
	class Object GetObjectClass(out const ScriptTypedElementHandle InElementHandle);// 0xf323c1c 0x7873d3b140
	Object* GetObject(out const ScriptTypedElementHandle InElementHandle);// 0xf323d00 0x7873d3b220

--------------------------------
Class: TypedElementSelectionSetLibrary.Object
	static bool SetSelectionFromList(TypedElementSelectionSet* SelectionSet, const ScriptTypedElementListProxy ElementList, const TypedElementSelectionOptions SelectionOptions);// 0xf3294b8 0x7873d3e080
	static bool SelectElementsFromList(TypedElementSelectionSet* SelectionSet, const ScriptTypedElementListProxy ElementList, const TypedElementSelectionOptions SelectionOptions);// 0xf329e4c 0x7873d3e160
	static ScriptTypedElementListProxy GetNormalizedSelection(TypedElementSelectionSet* SelectionSet, const TypedElementSelectionNormalizationOptions NormalizationOptions);// 0xf329068 0x7873d3e240
	static ScriptTypedElementListProxy GetNormalizedElementList(TypedElementSelectionSet* SelectionSet, const ScriptTypedElementListProxy ElementList, const TypedElementSelectionNormalizationOptions NormalizationOptions);// 0xf3288cc 0x7873d3e320
	static bool DeselectElementsFromList(TypedElementSelectionSet* SelectionSet, const ScriptTypedElementListProxy ElementList, const TypedElementSelectionOptions SelectionOptions);// 0xf32997c 0x7873d3e400

--------------------------------
Class: ScriptTypedElementListProxy

--------------------------------
Class: TypedElementSelectionNormalizationOptions
	bool bExpandGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873969880
	bool bFollowAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7873969900

--------------------------------
Class: CameraRig_Rail.Actor.Object
	float CurrentPositionOnRail;//[Offset: 0x288, Size: 0x4] 0x7873d54400
	bool bLockOrientationToRail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1] 0x7873d54480
	SceneComponent* TransformComponent;//[Offset: 0x290, Size: 0x8] 0x7873d54500
	SplineComponent* RailSplineComponent;//[Offset: 0x298, Size: 0x8] 0x7873d54580
	SceneComponent* RailCameraMount;//[Offset: 0x2a0, Size: 0x8] 0x7873d54600
	SplineComponent* GetRailSplineComponent();// 0xf32f85c 0x7873d3dfa0

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0xa10, Size: 0xc] 0x7873d56780
	CameraFilmbackSettings Filmback;//[Offset: 0xa1c, Size: 0xc] 0x7873d56800
	CameraLensSettings LensSettings;//[Offset: 0xa28, Size: 0x18] 0x7873d56880
	CameraFocusSettings FocusSettings;//[Offset: 0xa40, Size: 0x68] 0x7873d56900
	float CurrentFocalLength;//[Offset: 0xaa8, Size: 0x4] 0x7873d56980
	float CurrentAperture;//[Offset: 0xaac, Size: 0x4] 0x7873d56a00
	float CurrentFocusDistance;//[Offset: 0xab0, Size: 0x4] 0x7873d56a80
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0xac0, Size: 0x10] 0x7873cc98e0
	NamedLensPreset[] LensPresets;//[Offset: 0xad0, Size: 0x10] 0x7873cc9980
	FString DefaultFilmbackPresetName;//[Offset: 0xae0, Size: 0x10] 0x7873d56c00
	FString DefaultFilmbackPreset;//[Offset: 0xaf0, Size: 0x10] 0x7873d56c80
	FString DefaultLensPresetName;//[Offset: 0xb00, Size: 0x10] 0x7873d56d00
	float DefaultLensFocalLength;//[Offset: 0xb10, Size: 0x4] 0x7873d56d80
	float DefaultLensFStop;//[Offset: 0xb14, Size: 0x4] 0x7873d56e00
	void SetLensPresetByName(FString InPresetName);// 0xf330de4 0x7873d3ff20
	void SetFilmbackPresetByName(FString InPresetName);// 0xf330f48 0x7873d3caa0
	void SetCurrentFocalLength(float InFocalLength);// 0xf331200 0x7873d3cb80
	float GetVerticalFieldOfView();// 0xf331198 0x7873d3cc60
	static NamedLensPreset[] GetLensPresetsCopy();// 0xf330bb4 0x7873d3cd40
	FString GetLensPresetName();// 0xf330e98 0x7873d3ce20
	float GetHorizontalFieldOfView();// 0xf3311cc 0x7873d3cf00
	static NamedFilmbackPreset[] GetFilmbackPresetsCopy();// 0xf330ccc 0x7873d3cfe0
	FString GetFilmbackPresetName();// 0xf3310e8 0x7873d3d0c0
	FString GetDefaultFilmbackPresetName();// 0xf330ffc 0x7873d3d1a0

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10] 0x787396b000
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18] 0x787396b080

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10] 0x787396b400
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc] 0x787396b480

--------------------------------
Class: AudioDeviceNotificationSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	delegate DefaultCaptureDeviceChanged;//[Offset: 0x38, Size: 0x10] 0x7873d58400
	delegate DefaultRenderDeviceChanged;//[Offset: 0x60, Size: 0x10] 0x7873d56380
	delegate DeviceAdded;//[Offset: 0x88, Size: 0x10] 0x7873d56400
	delegate DeviceRemoved;//[Offset: 0xb0, Size: 0x10] 0x7873d56480
	delegate DeviceStateChanged;//[Offset: 0xd8, Size: 0x10] 0x7873d56500
	delegate DeviceSwitched;//[Offset: 0x100, Size: 0x10] 0x7873d56580

--------------------------------
Class: SubmixEffectDynamicsProcessorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectDynamicsProcessorSettings Settings;//[Offset: 0xf0, Size: 0x60] 0x7873d5e400
	void SetSettings(out const SubmixEffectDynamicsProcessorSettings Settings);// 0xf3e6a00 0x7873d630a0
	void SetExternalSubmix(SoundSubmix* Submix);// 0xf3e6b14 0x7873d63180
	void SetAudioBus(AudioBus* AudioBus);// 0xf3e6bbc 0x7873d63260
	void ResetKey();// 0xf3e6c64 0x7873d63340

--------------------------------
Class: SubmixEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x7873767d60
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x7873767e00
	enum LinkMode;//[Offset: 0x2, Size: 0x1] 0x7873767ea0
	float InputGainDb;//[Offset: 0x4, Size: 0x4] 0x787396bf00
	float ThresholdDb;//[Offset: 0x8, Size: 0x4] 0x787396bf80
	float Ratio;//[Offset: 0xc, Size: 0x4] 0x787396c000
	float KneeBandwidthDb;//[Offset: 0x10, Size: 0x4] 0x787396c080
	float LookAheadMsec;//[Offset: 0x14, Size: 0x4] 0x787396c100
	float AttackTimeMsec;//[Offset: 0x18, Size: 0x4] 0x787396c180
	float ReleaseTimeMsec;//[Offset: 0x1c, Size: 0x4] 0x787396c200
	enum KeySource;//[Offset: 0x20, Size: 0x1] 0x7873767f40
	AudioBus* ExternalAudioBus;//[Offset: 0x28, Size: 0x8] 0x787396c300
	SoundSubmix* ExternalSubmix;//[Offset: 0x30, Size: 0x8] 0x787396c380
	bool bChannelLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x787396c400
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x787396c480
	bool bBypass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x787396c500
	bool bKeyAudition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1] 0x787396c580
	float KeyGainDb;//[Offset: 0x3c, Size: 0x4] 0x787396c600
	float OutputGainDb;//[Offset: 0x40, Size: 0x4] 0x787396a580
	SubmixEffectDynamicProcessorFilterSettings KeyHighshelf;//[Offset: 0x44, Size: 0xc] 0x787396a600
	SubmixEffectDynamicProcessorFilterSettings KeyLowshelf;//[Offset: 0x50, Size: 0xc] 0x787396a680

--------------------------------
Class: SubmixEffectDynamicProcessorFilterSettings
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x787396a700
	float Cutoff;//[Offset: 0x4, Size: 0x4] 0x787396a780
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x787396a800

--------------------------------
Class: QuartzSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool IsQuartzEnabled();// 0xf3e9578 0x7873d61d60
	bool IsClockRunning(const Object* WorldContextObject, FName ClockName);// 0xf3e8e64 0x7873d61e40
	float GetRoundTripMinLatency(const Object* WorldContextObject);// 0xf3e86ac 0x7873d61f20
	float GetRoundTripMaxLatency(const Object* WorldContextObject);// 0xf3e85fc 0x7873d62000
	float GetRoundTripAverageLatency(const Object* WorldContextObject);// 0xf3e875c 0x7873d620e0
	QuartzClockHandle* GetHandleForClock(const Object* WorldContextObject, FName ClockName);// 0xf3e905c 0x7873d621c0
	float GetGameThreadToAudioRenderThreadMinLatency(const Object* WorldContextObject);// 0xf3e8958 0x7873d622a0
	float GetGameThreadToAudioRenderThreadMaxLatency(const Object* WorldContextObject);// 0xf3e88a8 0x7873d62380
	float GetGameThreadToAudioRenderThreadAverageLatency(const Object* WorldContextObject);// 0xf3e8a08 0x7873d62460
	float GetEstimatedClockRunTime(const Object* WorldContextObject, out const FName InClockName);// 0xf3e8ab8 0x7873d62540
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, FName ClockName, out const enum QuantizationType, float Multiplier);// 0xf3e8cc8 0x7873d62620
	QuartzTransportTimeStamp GetCurrentClockTimestamp(const Object* WorldContextObject, out const FName InClockName);// 0xf3e8bc0 0x7873d62700
	float GetAudioRenderThreadToGameThreadMinLatency();// 0xf3e8840 0x7873d627e0
	float GetAudioRenderThreadToGameThreadMaxLatency();// 0xf3e880c 0x7873d628c0
	float GetAudioRenderThreadToGameThreadAverageLatency();// 0xf3e8874 0x7873d629a0
	bool DoesClockExist(const Object* WorldContextObject, FName ClockName);// 0xf3e8f60 0x7873d62a80
	void DeleteClockByName(const Object* WorldContextObject, FName ClockName);// 0xf3e9254 0x7873d62b60
	void DeleteClockByHandle(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle);// 0xf3e9154 0x7873d62c40
	QuartzClockHandle* CreateNewClock(const Object* WorldContextObject, FName ClockName, QuartzClockSettings InSettings, bool bOverrideSettingsIfClockExists, bool bUseAudioEngineClockManager);// 0xf3e9344 0x7873d62d20

--------------------------------
Class: QuartzClockSettings
	QuartzTimeSignature TimeSignature;//[Offset: 0x0, Size: 0x18] 0x7873a1c680
	bool bIgnoreLevelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7873a1c700

--------------------------------
Class: QuartzTimeSignature
	int NumBeats;//[Offset: 0x0, Size: 0x4] 0x7873a1cd00
	enum BeatType;//[Offset: 0x4, Size: 0x1] 0x78739b54c0
	QuartzPulseOverrideStep[] OptionalPulseOverride;//[Offset: 0x8, Size: 0x10] 0x78739b5560

--------------------------------
Class: QuartzPulseOverrideStep
	int NumberOfPulses;//[Offset: 0x0, Size: 0x4] 0x7873a1ce80
	enum PulseDuration;//[Offset: 0x4, Size: 0x1] 0x78739b5600

--------------------------------
Class: BlueprintGameplayTagLibrary.BlueprintFunctionLibrary.Object
	static bool RemoveGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0xf44664c 0x7873d63b20
	static bool NotEqual_TagTag(GameplayTag A, FString B);// 0xf4459f8 0x7873d63c00
	static bool NotEqual_TagContainerTagContainer(GameplayTagContainer A, FString B);// 0xf445864 0x7873d63ce0
	static bool NotEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0xf446298 0x7873d63dc0
	static bool NotEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0xf4473e4 0x7873d63ea0
	static bool MatchesTag(GameplayTag TagOne, GameplayTag TagTwo, bool bExactMatch);// 0xf44772c 0x7873d63f80
	static bool MatchesAnyTags(GameplayTag TagOne, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0xf4475cc 0x7873d64060
	static GameplayTagContainer MakeLiteralGameplayTagContainer(GameplayTagContainer Value);// 0xf446184 0x7873d64140
	static GameplayTag MakeLiteralGameplayTag(GameplayTag Value);// 0xf4471dc 0x7873d64220
	static GameplayTagQuery MakeGameplayTagQuery(GameplayTagQuery TagQuery);// 0xf445d5c 0x7873d64300
	static GameplayTagContainer MakeGameplayTagContainerFromTag(GameplayTag SingleTag);// 0xf445fd4 0x7873d643e0
	static GameplayTagContainer MakeGameplayTagContainerFromArray(out const GameplayTag[] GameplayTags);// 0xf4460a0 0x7873d644c0
	static bool IsTagQueryEmpty(out const GameplayTagQuery TagQuery);// 0xf446b8c 0x7873d645a0
	static bool IsGameplayTagValid(GameplayTag GameplayTag);// 0xf447338 0x7873d64680
	static bool HasTag(out const GameplayTagContainer TagContainer, GameplayTag Tag, bool bExactMatch);// 0xf446fa0 0x7873d64760
	static bool HasAnyTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0xf446e0c 0x7873d64840
	static bool HasAllTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0xf446c78 0x7873d64920
	static bool HasAllMatchingGameplayTags(interface classNone TagContainerInterface, out const GameplayTagContainer OtherContainer);// 0xf445c48 0x7873d64a00
	static FName GetTagName(out const GameplayTag GameplayTag);// 0xf447284 0x7873d64ae0
	static int GetNumGameplayTagsInContainer(out const GameplayTagContainer TagContainer);// 0xf44710c 0x7873d64bc0
	static FString GetDebugStringFromGameplayTagContainer(out const GameplayTagContainer TagContainer);// 0xf445750 0x7873d64ca0
	static FString GetDebugStringFromGameplayTag(GameplayTag GameplayTag);// 0xf44565c 0x7873d64d80
	static void GetAllActorsOfClassMatchingTagQuery(Object* WorldContextObject, class Actor ActorClass, out const GameplayTagQuery GameplayTagQuery, out Actor*[] OutActors);// 0xf446870 0x7873d64e60
	static bool EqualEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0xf4463d8 0x7873d64f40
	static bool EqualEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0xf4474d8 0x7873d65020
	static bool DoesTagAssetInterfaceHaveTag(interface classNone TagContainerInterface, GameplayTag Tag);// 0xf445b50 0x7873d65100
	static bool DoesContainerMatchTagQuery(out const GameplayTagContainer TagContainer, out const GameplayTagQuery TagQuery);// 0xf446a34 0x7873d651e0
	static void BreakGameplayTagContainer(out const GameplayTagContainer GameplayTagContainer, out GameplayTag[] GameplayTags);// 0xf445eb0 0x7873d652c0
	static void AppendGameplayTagContainers(out GameplayTagContainer InOutTagContainer, out const GameplayTagContainer InTagContainer);// 0xf446518 0x7873d653a0
	static void AddGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0xf446764 0x7873d65480

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10] 0x787376a4c0
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10] 0x7873767c20

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8] 0x787396cb00

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4] 0x787396c780
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10] 0x787376a380
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10] 0x787376a420
	FString UserDescription;//[Offset: 0x28, Size: 0x10] 0x787396c900
	FString AutoDescription;//[Offset: 0x38, Size: 0x10] 0x787396c980

--------------------------------
Class: EditableGameplayTagQueryExpression.Object

--------------------------------
Class: EditableGameplayTagQueryExpression_NoTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x7873d73280

--------------------------------
Class: EditableGameplayTagQueryExpression_NoExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x7873cca7e0

--------------------------------
Class: RestrictedGameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10] 0x7873d74e80
	RestrictedGameplayTagTableRow[] RestrictedGameplayTagList;//[Offset: 0x38, Size: 0x10] 0x7873cca600

--------------------------------
Class: RestrictedGameplayTagTableRow.GameplayTagTableRow.TableRowBase
	bool bAllowNonRestrictedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x787396e600

--------------------------------
Class: GameplayTagTableRow.TableRowBase
	FName Tag;//[Offset: 0x8, Size: 0x8] 0x787396e680
	FString DevComment;//[Offset: 0x10, Size: 0x10] 0x787396e700

--------------------------------
Class: PacketHandlerProfileConfig.Object
	FString[] Components;//[Offset: 0x28, Size: 0x10] 0x7873cccb80

--------------------------------
Class: ClothPhysicalMeshDataBase_Legacy.Object
	Vector3f[] Vertices;//[Offset: 0x28, Size: 0x10] 0x7873ccd940
	Vector3f[] Normals;//[Offset: 0x38, Size: 0x10] 0x7873ccd9e0
	uint32[] Indices;//[Offset: 0x48, Size: 0x10] 0x7873ccda80
	float[] InverseMasses;//[Offset: 0x58, Size: 0x10] 0x7873ccdb20
	ClothVertBoneData[] BoneData;//[Offset: 0x68, Size: 0x10] 0x7873ccdbc0
	int NumFixedVerts;//[Offset: 0x78, Size: 0x4] 0x7873d7a800
	int MaxBoneWeights;//[Offset: 0x7c, Size: 0x4] 0x7873d7a880
	uint32[] SelfCollisionIndices;//[Offset: 0x80, Size: 0x10] 0x7873ccdc60

--------------------------------
Class: ClothVertBoneData
	int NumInfluences;//[Offset: 0x0, Size: 0x4] 0x787396f600
	uint16 BoneIndices;//[Offset: 0x4, Size: 0x2] 0x787396f680
	float BoneWeights;//[Offset: 0x1c, Size: 0x4] 0x787396f700

--------------------------------
Class: LocalizationSettings.Object
	LocalizationTargetSet* EngineTargetSet;//[Offset: 0x28, Size: 0x8] 0x7873d7e480
	LocalizationTargetSettings[] EngineTargetsSettings;//[Offset: 0x30, Size: 0x10] 0x7873ccd260
	LocalizationTargetSet* GameTargetSet;//[Offset: 0x40, Size: 0x8] 0x7873d7e580
	LocalizationTargetSettings[] GameTargetsSettings;//[Offset: 0x48, Size: 0x10] 0x7873ccd300

--------------------------------
Class: LocalizationTargetSet.Object
	LocalizationTarget*[] TargetObjects;//[Offset: 0x28, Size: 0x10] 0x7873ccd1c0

--------------------------------
Class: LocalizationTarget.Object
	LocalizationTargetSettings Settings;//[Offset: 0x28, Size: 0x180] 0x7873d7e400

--------------------------------
Class: LocalizationTargetSettings
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7873980100
	Guid Guid;//[Offset: 0x10, Size: 0x10] 0x7873980180
	enum ConflictStatus;//[Offset: 0x20, Size: 0x1] 0x787376b960
	Guid[] TargetDependencies;//[Offset: 0x28, Size: 0x10] 0x78737690c0
	FilePath[] AdditionalManifestDependencies;//[Offset: 0x38, Size: 0x10] 0x7873769160
	FString[] RequiredModuleNames;//[Offset: 0x48, Size: 0x10] 0x7873769200
	GatherTextFromTextFilesConfiguration GatherFromTextFiles;//[Offset: 0x58, Size: 0x40] 0x7873980400
	GatherTextFromPackagesConfiguration GatherFromPackages;//[Offset: 0x98, Size: 0x60] 0x7873980480
	GatherTextFromMetaDataConfiguration GatherFromMetaData;//[Offset: 0xf8, Size: 0x40] 0x7873980500
	LocalizationExportingSettings ExportSettings;//[Offset: 0x138, Size: 0x4] 0x7873980580
	LocalizationCompilationSettings CompileSettings;//[Offset: 0x13c, Size: 0x3] 0x7873980600
	LocalizationImportDialogueSettings ImportDialogueSettings;//[Offset: 0x140, Size: 0x28] 0x7873980680
	int NativeCultureIndex;//[Offset: 0x168, Size: 0x4] 0x7873980700
	CultureStatistics[] SupportedCulturesStatistics;//[Offset: 0x170, Size: 0x10] 0x78737692a0

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10] 0x788a4dd700

--------------------------------
Class: GatherTextFromTextFilesConfiguration
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787396ff00
	GatherTextSearchDirectory[] SearchDirectories;//[Offset: 0x8, Size: 0x10] 0x7873769980
	GatherTextExcludePath[] ExcludePathWildcards;//[Offset: 0x18, Size: 0x10] 0x7873769a20
	GatherTextFileExtension[] FileExtensions;//[Offset: 0x28, Size: 0x10] 0x7873769ac0
	bool ShouldGatherFromEditorOnlyData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x787396e880

--------------------------------
Class: GatherTextSearchDirectory
	enum PathRoot;//[Offset: 0x0, Size: 0x1] 0x7873769ca0
	FString Path;//[Offset: 0x8, Size: 0x10] 0x787396ec00

--------------------------------
Class: GatherTextExcludePath
	enum PathRoot;//[Offset: 0x0, Size: 0x1] 0x7873769b60
	FString Pattern;//[Offset: 0x8, Size: 0x10] 0x787396ea00

--------------------------------
Class: GatherTextFileExtension
	FString Pattern;//[Offset: 0x0, Size: 0x10] 0x787396e900

--------------------------------
Class: GatherTextFromPackagesConfiguration
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787396fa80
	GatherTextIncludePath[] IncludePathWildcards;//[Offset: 0x8, Size: 0x10] 0x7873769660
	GatherTextExcludePath[] ExcludePathWildcards;//[Offset: 0x18, Size: 0x10] 0x7873769700
	GatherTextFileExtension[] FileExtensions;//[Offset: 0x28, Size: 0x10] 0x78737697a0
	FName[] Collections;//[Offset: 0x38, Size: 0x10] 0x7873769840
	SoftClassPath[] ExcludeClasses;//[Offset: 0x48, Size: 0x10] 0x78737698e0
	bool ShouldExcludeDerivedClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x787396fd80
	bool ShouldGatherFromEditorOnlyData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x787396fe00
	bool SkipGatherCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1] 0x787396fe80

--------------------------------
Class: GatherTextIncludePath
	enum PathRoot;//[Offset: 0x0, Size: 0x1] 0x7873769c00
	FString Pattern;//[Offset: 0x8, Size: 0x10] 0x787396eb00

--------------------------------
Class: GatherTextFromMetaDataConfiguration
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873980e00
	GatherTextIncludePath[] IncludePathWildcards;//[Offset: 0x8, Size: 0x10] 0x7873769480
	GatherTextExcludePath[] ExcludePathWildcards;//[Offset: 0x18, Size: 0x10] 0x7873769520
	MetaDataKeyGatherSpecification[] KeySpecifications;//[Offset: 0x28, Size: 0x10] 0x78737695c0
	bool ShouldGatherFromEditorOnlyData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7873981000

--------------------------------
Class: MetaDataKeyGatherSpecification
	MetaDataKeyName MetaDataKey;//[Offset: 0x0, Size: 0x10] 0x7873981080
	FString TextNamespace;//[Offset: 0x10, Size: 0x10] 0x787396f800
	MetaDataTextKeyPattern TextKeyPattern;//[Offset: 0x20, Size: 0x10] 0x787396f880

--------------------------------
Class: MetaDataKeyName
	FString Name;//[Offset: 0x0, Size: 0x10] 0x787396f980

--------------------------------
Class: MetaDataTextKeyPattern
	FString Pattern;//[Offset: 0x0, Size: 0x10] 0x787396fa00

--------------------------------
Class: LocalizationExportingSettings
	enum CollapseMode;//[Offset: 0x0, Size: 0x1] 0x7873769340
	enum POFormat;//[Offset: 0x1, Size: 0x1] 0x78737693e0
	bool ShouldPersistCommentsOnExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7873980d00
	bool ShouldAddSourceLocationsAsComments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7873980d80

--------------------------------
Class: LocalizationCompilationSettings
	bool SkipSourceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873980a80
	bool ValidateFormatPatterns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7873980b00
	bool ValidateSafeWhitespace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7873980b80

--------------------------------
Class: LocalizationImportDialogueSettings
	DirectoryPath RawAudioPath;//[Offset: 0x0, Size: 0x10] 0x7873980900
	FString ImportedDialogueFolder;//[Offset: 0x10, Size: 0x10] 0x7873980980
	bool bImportNativeAsSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7873980a00

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10] 0x788a4df780

--------------------------------
Class: CultureStatistics
	FString CultureName;//[Offset: 0x0, Size: 0x10] 0x7873980800
	uint32 WordCount;//[Offset: 0x10, Size: 0x4] 0x7873980880

--------------------------------
Class: MediaBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	static void EnumerateWebcamCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0xf68df2c 0x7873d6b4c0
	static void EnumerateVideoCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0xf68e0c4 0x7873d6b5a0
	static void EnumerateAudioCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0xf68e25c 0x7873d6b680

--------------------------------
Class: MediaCaptureDevice
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x7873981b80
	FString URL;//[Offset: 0x18, Size: 0x10] 0x7873981c00

--------------------------------
Class: MediaPlayer.Object
	delegate OnEndReached;//[Offset: 0x28, Size: 0x10] 0x7873d92480
	delegate OnMediaClosed;//[Offset: 0x38, Size: 0x10] 0x7873d92500
	delegate OnMediaOpened;//[Offset: 0x48, Size: 0x10] 0x7873d92580
	delegate OnMediaOpenFailed;//[Offset: 0x58, Size: 0x10] 0x7873d92600
	delegate OnPlaybackResumed;//[Offset: 0x68, Size: 0x10] 0x7873d92680
	delegate OnPlaybackSuspended;//[Offset: 0x78, Size: 0x10] 0x7873d92700
	delegate OnSeekCompleted;//[Offset: 0x88, Size: 0x10] 0x7873d92780
	delegate OnTracksChanged;//[Offset: 0x98, Size: 0x10] 0x7873d92800
	Timespan CacheAhead;//[Offset: 0xa8, Size: 0x8] 0x7873d92880
	Timespan CacheBehind;//[Offset: 0xb0, Size: 0x8] 0x7873d92900
	Timespan CacheBehindGame;//[Offset: 0xb8, Size: 0x8] 0x7873d92980
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x7873d92a00
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x7873d92a80
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 0x1] 0x7873d92b00
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 0x1] 0x7873d92b80
	MediaPlaylist* Playlist;//[Offset: 0xc8, Size: 0x8] 0x7873d92c00
	int PlaylistIndex;//[Offset: 0xd0, Size: 0x4] 0x7873d92c80
	Timespan TimeDelay;//[Offset: 0xd8, Size: 0x8] 0x7873d92d00
	float HorizontalFieldOfView;//[Offset: 0xe0, Size: 0x4] 0x7873d92d80
	float VerticalFieldOfView;//[Offset: 0xe4, Size: 0x4] 0x7873d92e00
	Rotator ViewRotation;//[Offset: 0xe8, Size: 0x18] 0x7873d92e80
	Guid PlayerGuid;//[Offset: 0x128, Size: 0x10] 0x7873d92f00
	bool SupportsSeeking();// 0xf68f3bc 0x7873da1900
	bool SupportsScrubbing();// 0xf68f3f4 0x7873da19e0
	bool SupportsRate(float Rate, bool Unthinned);// 0xf68f42c 0x7873da1ac0
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0xf68f5dc 0x7873da1ba0
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0xf68f6ec 0x7873da1c80
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0xf68f83c 0x7873d6e780
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0xf68f984 0x7873d6e860
	void SetTimeDelay(Timespan TimeDelay);// 0xf68f534 0x7873d6e940
	bool SetRate(float Rate);// 0xf68fb80 0x7873d6ea20
	bool SetNativeVolume(float Volume);// 0xf68facc 0x7873d6eb00
	void SetMediaOptions(const MediaSource* Options);// 0xf68fc34 0x7873d6ebe0
	bool SetLooping(bool Looping);// 0xf68fcdc 0x7873d6ecc0
	void SetDesiredPlayerName(FName PlayerName);// 0xf68fd98 0x7873d6eda0
	void SetBlockOnTime(out const Timespan Time);// 0xf68fe40 0x7873d6ee80
	bool SelectTrack(enum TrackType, int TrackIndex);// 0xf68fef4 0x7873d6ef60
	bool Seek(out const Timespan Time);// 0xf68fff4 0x7873d6f040
	bool Rewind();// 0xf6900b4 0x7873d6f120
	bool Reopen();// 0xf6900ec 0x7873d6f200
	bool Previous();// 0xf690124 0x7873d6f2e0
	void PlayAndSeek();// 0xf69015c 0x7873d6f3c0
	bool Play();// 0xf690170 0x7873d6f4a0
	bool Pause();// 0xf6901a8 0x7873d6f580
	bool OpenUrl(FString URL);// 0xf6901e0 0x7873d6f660
	bool OpenSourceWithOptions(MediaSource* MediaSource, out const MediaPlayerOptions Options);// 0xf6904a0 0x7873d6f740
	void OpenSourceLatent(const Object* WorldContextObject, LatentActionInfo LatentInfo, MediaSource* MediaSource, out const MediaPlayerOptions Options, out bool bSuccess);// 0xf6902a0 0x7873d6f820
	bool OpenSource(MediaSource* MediaSource);// 0xf6905bc 0x7873d6f900
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int index);// 0xf690670 0x7873d6f9e0
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0xf690770 0x7873d6fac0
	bool OpenFile(FString FilePath);// 0xf690828 0x7873d6fba0
	bool Next();// 0xf6908e8 0x7873d6fc80
	bool IsReady();// 0xf690920 0x7873d6fd60
	bool IsPreparing();// 0xf690990 0x7873d6fe40
	bool IsPlaying();// 0xf6909c8 0x7873d6ff20
	bool IsPaused();// 0xf690a00 0x7873d6caa0
	bool IsLooping();// 0xf690a38 0x7873d6cb80
	bool IsConnecting();// 0xf690a70 0x7873d6cc60
	bool IsClosed();// 0xf690958 0x7873d6cd40
	bool IsBuffering();// 0xf690aa8 0x7873d6ce20
	bool HasError();// 0xf690ae0 0x7873d6cf00
	Rotator GetViewRotation();// 0xf690b4c 0x7873d6cfe0
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0xf690b84 0x7873d6d0c0
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0xf690cc8 0x7873d6d1a0
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0xf690dc0 0x7873d6d280
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0xf690eb8 0x7873d6d360
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0xf690fb4 0x7873d6d440
	float GetVerticalFieldOfView();// 0xf6910ac 0x7873d6d520
	FString GetUrl();// 0xf6910e0 0x7873d6d600
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0xf691164 0x7873d6d6e0
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0xf6912ac 0x7873d6d7c0
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0xf6913a8 0x7873d6d8a0
	MediaTimeStampInfo* GetTimeStamp();// 0xf691518 0x7873d6d980
	Timespan GetTimeDelay();// 0xf690b18 0x7873d6da60
	Timespan GetTime();// 0xf69154c 0x7873d6db40
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0xf691580 0x7873d6dc20
	int GetSelectedTrack(enum TrackType);// 0xf69168c 0x7873d6dd00
	float GetRate();// 0xf69173c 0x7873d6dde0
	int GetPlaylistIndex();// 0xf691770 0x7873d6dec0
	MediaPlaylist* GetPlaylist();// 0xf69178c 0x7873d6dfa0
	FName GetPlayerName();// 0xf6917c8 0x7873d6e080
	int GetNumTracks(enum TrackType);// 0xf6918f8 0x7873d6e160
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0xf6917fc 0x7873d6e240
	FText GetMediaName();// 0xf6919a8 0x7873d6e320
	float GetHorizontalFieldOfView();// 0xf691a88 0x7873d6e400
	Timespan GetDuration();// 0xf691abc 0x7873d6e4e0
	FName GetDesiredPlayerName();// 0xf691af0 0x7873d6e5c0
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0xf691b24 0x7873d6e6a0
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0xf691c68 0x7873d6adc0
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0xf691d60 0x7873d6aea0
	void Close();// 0xf691e58 0x7873d6af80
	bool CanPlayUrl(FString URL);// 0xf691e6c 0x7873d6b060
	bool CanPlaySource(MediaSource* MediaSource);// 0xf691f2c 0x7873d6b140
	bool CanPause();// 0xf691fe0 0x7873d6b220

--------------------------------
Class: MediaPlaylist.Object
	MediaSource*[] Items;//[Offset: 0x28, Size: 0x10] 0x7873ccf2e0
	bool Replace(int index, MediaSource* Replacement);// 0xf693c74 0x7873da0e80
	bool RemoveAt(int index);// 0xf693d74 0x7873da0f60
	bool Remove(MediaSource* MediaSource);// 0xf693e28 0x7873da1040
	int Num();// 0xf693edc 0x7873da1120
	void Insert(MediaSource* MediaSource, int index);// 0xf693ef8 0x7873da1200
	MediaSource* GetRandom(out int OutIndex);// 0xf693fec 0x7873da12e0
	MediaSource* GetPrevious(out int InOutIndex);// 0xf6940a8 0x7873da13c0
	MediaSource* GetNext(out int InOutIndex);// 0xf694164 0x7873da14a0
	MediaSource* Get(int index);// 0xf694220 0x7873da1580
	bool AddUrl(FString URL);// 0xf6942d0 0x7873da1660
	bool AddFile(FString FilePath);// 0xf694390 0x7873da1740
	bool Add(MediaSource* MediaSource);// 0xf694450 0x7873da1820

--------------------------------
Class: MediaPlayerOptions
	MediaPlayerTrackOptions Tracks;//[Offset: 0x0, Size: 0x1c] 0x7873981c80
	Timespan SeekTime;//[Offset: 0x20, Size: 0x8] 0x7873981d00
	enum PlayOnOpen;//[Offset: 0x28, Size: 0x1] 0x787376b820
	enum Loop;//[Offset: 0x29, Size: 0x1] 0x787376b8c0

--------------------------------
Class: MediaPlayerTrackOptions
	int Audio;//[Offset: 0x0, Size: 0x4] 0x7873981e80
	int Caption;//[Offset: 0x4, Size: 0x4] 0x7873981f00
	int MetaData;//[Offset: 0x8, Size: 0x4] 0x7873981f80
	int Script;//[Offset: 0xc, Size: 0x4] 0x7873982000
	int Subtitle;//[Offset: 0x10, Size: 0x4] 0x7873982080
	int Text;//[Offset: 0x14, Size: 0x4] 0x7873982100
	int Video;//[Offset: 0x18, Size: 0x4] 0x7873980080

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x788a4dda80
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x788a4dd880

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x788a4dd980
	float Value;//[Offset: 0x4, Size: 0x4] 0x788a4dd900

--------------------------------
Class: MediaTimeStampInfo.Object
	Timespan Time;//[Offset: 0x28, Size: 0x8] 0x7873d7dc00
	int64 SequenceIndex;//[Offset: 0x30, Size: 0x8] 0x7873d7dc80

--------------------------------
Class: MediaTexture.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0x210, Size: 0x1] 0x7873d94880
	byte AddressY;//[Offset: 0x211, Size: 0x1] 0x7873d94900
	bool AutoClear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x212, Size: 0x1] 0x7873d94980
	LinearColor ClearColor;//[Offset: 0x214, Size: 0x10] 0x7873d94a00
	bool EnableGenMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1] 0x7873d94a80
	byte NumMips;//[Offset: 0x225, Size: 0x1] 0x7873d94b00
	bool NewStyleOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x226, Size: 0x1] 0x7873d94b80
	byte OutputFormat;//[Offset: 0x227, Size: 0x1] 0x7873d94c00
	float CurrentAspectRatio;//[Offset: 0x228, Size: 0x4] 0x7873d94c80
	byte CurrentOrientation;//[Offset: 0x22c, Size: 0x1] 0x7873d94d00
	MediaPlayer* MediaPlayer;//[Offset: 0x230, Size: 0x8] 0x7873d94d80
	void UpdateResource();// 0xf696948 0x7873da3960
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0xf696964 0x7873da0080
	int GetWidth();// 0xf696a74 0x7873da0160
	int GetTextureNumMips();// 0xf696a40 0x7873da0240
	MediaPlayer* GetMediaPlayer();// 0xf696a0c 0x7873da0320
	int GetHeight();// 0xf696aa8 0x7873da0400
	float GetAspectRatio();// 0xf696adc 0x7873da04e0

--------------------------------
Class: TimeSynchronizableMediaSource.BaseMediaSource.MediaSource.Object
	bool bUseTimeSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x7873d94600
	int FrameDelay;//[Offset: 0x8c, Size: 0x4] 0x7873d94680
	double TimeDelay;//[Offset: 0x90, Size: 0x8] 0x7873d94700

--------------------------------
Class: BaseMediaSource.MediaSource.Object
	FName PlayerName;//[Offset: 0x80, Size: 0x8] 0x7873bc8c00

--------------------------------
Class: LevelSequenceMetaData.Interface.Object

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x2a0, Size: 0x14] 0x787398c800
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x2b8, Size: 0x8] 0x787398c880
	LevelSequence* LevelSequenceAsset;//[Offset: 0x2c0, Size: 0x8] 0x787398c900
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x2c8, Size: 0x2] 0x787398ca80
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x2d0, Size: 0x8] 0x787398cb00
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x2d8, Size: 0x8] 0x787398cb80
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 0x1] 0x787398cc00
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 0x1] 0x787398cc80
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e0, Size: 0x1] 0x787398cd00
	Object* DefaultInstanceData;//[Offset: 0x2e8, Size: 0x8] 0x787398cd80
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2f0, Size: 0x8] 0x787398ce00
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1] 0x787398ce80
	void ShowBurnin();// 0xf6aed6c 0x787383f200
	void SetSequence(LevelSequence* InSequence);// 0xf6aee78 0x787383f2e0
	void SetReplicatePlayback(bool ReplicatePlayback);// 0xf6aedc8 0x787383f3c0
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0xf6aea9c 0x787383f4a0
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0xf6aebf4 0x787383f580
	void ResetBindings();// 0xf6ae510 0x787383f660
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0xf6ae524 0x787383f740
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0xf6ae5ec 0x787383f820
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0xf6ae6dc 0x787383f900
	void OnLevelSequenceLoaded__DelegateSignature();// 0xb8f1ab4 0x787383f9e0
	LevelSequence* LoadSequence();// 0xf6aef20 0x787383fac0
	void HideBurnin();// 0xf6aed80 0x787383fba0
	LevelSequencePlayer* GetSequencePlayer();// 0xf6aed94 0x787383fc80
	LevelSequence* GetSequence();// 0xf6aef54 0x787383fd60
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0xf6ae350 0x787383fe40
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0xf6ae450 0x787383ff20
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0xf6ae7f0 0x787383caa0
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0xf6ae934 0x787383cb80

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x4d0, Size: 0x10] 0x7873d95780
	CameraComponent* GetActiveCameraComponent();// 0xf6b1e58 0x7873da2fc0
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0xf6b1e90 0x7873da30a0

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787398c980
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1] 0x787398ca00

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873d96300
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18] 0x7873d94280
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8] 0x7873d94300
	void SetBurnIn(SoftClassPath InBurnInClass);// 0xf6addc0 0x7873da3880

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x2a0, Size: 0xa8] 0x7873d96100
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x348, Size: 0x8] 0x7873d96180
	void SetSettings(Object* InSettings);// 0xb8f1ab4 0x7873da36c0
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0xf6b04d4 0x7873da37a0

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10] 0x787398da80
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10] 0x787398db00
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10] 0x787398db80
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10] 0x787398dc00
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10] 0x787398dc80
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10] 0x787398dd00
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10] 0x787398dd80
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28] 0x787398de00
	LevelSequence* ActiveShot;//[Offset: 0x98, Size: 0x8] 0x787398de80
	MovieSceneSequenceID ShotID;//[Offset: 0xa0, Size: 0x4] 0x787398df00

--------------------------------
Class: LevelSequenceDirector.Object
	LevelSequencePlayer* Player;//[Offset: 0x28, Size: 0x8] 0x7873d95b00
	int SubSequenceID;//[Offset: 0x30, Size: 0x4] 0x7873d95b80
	int MovieScenePlayerIndex;//[Offset: 0x34, Size: 0x4] 0x7873d95c00
	void OnCreated();// 0xb8f1ab4 0x7873da3180
	MovieSceneSequence* GetSequence();// 0xf6b0a98 0x7873da3260
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0xf6b0d88 0x7873da3340
	Object* GetBoundObject(MovieSceneObjectBindingID ObjectBinding);// 0xf6b0cb8 0x7873da3420
	Actor*[] GetBoundActors(MovieSceneObjectBindingID ObjectBinding);// 0xf6b0b9c 0x7873da3500
	Actor* GetBoundActor(MovieSceneObjectBindingID ObjectBinding);// 0xf6b0acc 0x7873da35e0

--------------------------------
Class: LevelSequenceMediaController.Actor.Object
	LevelSequenceActor* Sequence;//[Offset: 0x290, Size: 0x8] 0x7873d97380
	MediaComponent* MediaComponent;//[Offset: 0x298, Size: 0x8] 0x7873d95300
	float ServerStartTimeSeconds;//[Offset: 0x2a0, Size: 0x4] 0x7873d95380
	void SynchronizeToServer(float DesyncThresholdSeconds);// 0xf6b27e8 0x7873da2b60
	void Play();// 0xf6b28c8 0x7873da2c40
	void OnRep_ServerStartTimeSeconds();// 0xf6b27d4 0x7873da2d20
	LevelSequenceActor* GetSequence();// 0xf6b2890 0x7873da2e00
	MediaComponent* GetMediaComponent();// 0xf6b28ac 0x7873da2ee0

--------------------------------
Class: MediaComponent.ActorComponent.Object
	MediaTexture* MediaTexture;//[Offset: 0xb0, Size: 0x8] 0x7873d7dd00
	MediaPlayer* MediaPlayer;//[Offset: 0xb8, Size: 0x8] 0x7873d7dd80
	MediaTexture* GetMediaTexture();// 0xf68e900 0x7873d6b300
	MediaPlayer* GetMediaPlayer();// 0xf68e934 0x7873d6b3e0

--------------------------------
Class: NullAudioCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: MovieSceneCaptureProtocolBase.Object
	enum State;//[Offset: 0x50, Size: 0x1] 0x7873cceb60
	bool IsCapturing();// 0xf6d5010 0x7873da29a0
	enum GetState();// 0xf6d5058 0x7873da2a80

--------------------------------
Class: CompositionGraphCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	CompositionGraphCapturePasses IncludeRenderPasses;//[Offset: 0x58, Size: 0x10] 0x7873d96e00
	bool bCaptureFramesInHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7873d96e80
	int HDRCompressionQuality;//[Offset: 0x6c, Size: 0x4] 0x7873d96f00
	byte CaptureGamut;//[Offset: 0x70, Size: 0x1] 0x7873d96f80
	SoftObjectPath PostProcessingMaterial;//[Offset: 0x78, Size: 0x18] 0x7873d97000
	bool bDisableScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7873d97080
	MaterialInterface* PostProcessingMaterialPtr;//[Offset: 0x98, Size: 0x8] 0x7873d97100

--------------------------------
Class: MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: CompositionGraphCapturePasses
	FString[] Value;//[Offset: 0x0, Size: 0x10] 0x787376c900

--------------------------------
Class: CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	int CompressionQuality;//[Offset: 0xd8, Size: 0x4] 0x7873d96d80

--------------------------------
Class: ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_JPG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: MovieSceneCapture.Object
	SoftClassPath ImageCaptureProtocolType;//[Offset: 0x38, Size: 0x18] 0x7873d96700
	SoftClassPath AudioCaptureProtocolType;//[Offset: 0x50, Size: 0x18] 0x7873d96780
	MovieSceneImageCaptureProtocolBase* ImageCaptureProtocol;//[Offset: 0x68, Size: 0x8] 0x7873d96800
	MovieSceneAudioCaptureProtocolBase* AudioCaptureProtocol;//[Offset: 0x70, Size: 0x8] 0x7873d96880
	MovieSceneCaptureSettings Settings;//[Offset: 0x78, Size: 0x70] 0x7873d96900
	bool bUseSeparateProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x7873d96980
	bool bCloseEditorWhenCaptureStarts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1] 0x7873d96a00
	FString AdditionalCommandLineArguments;//[Offset: 0xf0, Size: 0x10] 0x7873d96a80
	FString InheritedCommandLineArguments;//[Offset: 0x100, Size: 0x10] 0x7873d96b00
	void SetImageCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0xf6d4144 0x7873da2620
	void SetAudioCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0xf6d409c 0x7873da2700
	MovieSceneCaptureProtocolBase* GetImageCaptureProtocol();// 0xf6d4208 0x7873da27e0
	MovieSceneCaptureProtocolBase* GetAudioCaptureProtocol();// 0xf6d41ec 0x7873da28c0

--------------------------------
Class: MovieSceneCaptureSettings
	DirectoryPath OutputDirectory;//[Offset: 0x0, Size: 0x10] 0x787398ee00
	class GameModeBase* GameModeOverride;//[Offset: 0x10, Size: 0x8] 0x787376c860
	FString OutputFormat;//[Offset: 0x18, Size: 0x10] 0x787398ee80
	bool bOverwriteExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x787398ef00
	bool bUseRelativeFrameNumbers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x787398ef80
	int HandleFrames;//[Offset: 0x2c, Size: 0x4] 0x787398f000
	FString MovieExtension;//[Offset: 0x30, Size: 0x10] 0x787398f080
	byte ZeroPadFrameNumbers;//[Offset: 0x40, Size: 0x1] 0x787398f100
	FrameRate FrameRate;//[Offset: 0x44, Size: 0x8] 0x787398f180
	bool bUseCustomFrameRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x787398f200
	FrameRate CustomFrameRate;//[Offset: 0x50, Size: 0x8] 0x787398f280
	CaptureResolution Resolution;//[Offset: 0x58, Size: 0x8] 0x787398f300
	bool bEnableTextureStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x787398f380
	bool bCinematicEngineScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x787398f400
	bool bCinematicMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1] 0x787398f480
	bool bAllowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1] 0x787398f500
	bool bAllowTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x787398f580
	bool bShowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1] 0x787398f600
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1] 0x787398f680
	bool bUsePathTracer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1] 0x787398f700
	int PathTracerSamplePerPixel;//[Offset: 0x68, Size: 0x4] 0x787398f780

--------------------------------
Class: CaptureResolution
	int ResX;//[Offset: 0x0, Size: 0x4] 0x787398d700
	int ResY;//[Offset: 0x4, Size: 0x4] 0x787398d780

--------------------------------
Class: UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	World* World;//[Offset: 0x58, Size: 0x8] 0x7873d97e80
	void StopCapturingFinalPixels();// 0xf6d5eb8 0x7873da4d80
	void StartCapturingFinalPixels(out const CapturedPixelsID StreamID);// 0xf6d5ecc 0x7873da4e60
	void ResolveBuffer(Texture* Buffer, out const CapturedPixelsID BufferID);// 0xf6d6008 0x7873da4f40
	void OnWarmUp();// 0xb8f1ab4 0x7873da5020
	void OnTick();// 0xb8f1ab4 0x7873da5100
	void OnStartCapture();// 0xb8f1ab4 0x7873da51e0
	bool OnSetup();// 0xf6d61c4 0x7873da52c0
	void OnPreTick();// 0xb8f1ab4 0x7873da53a0
	void OnPixelsReceived(out const CapturedPixels Pixels, out const CapturedPixelsID ID, FrameMetrics FrameMetrics);// 0xb8f1ab4 0x7873da5480
	void OnPauseCapture();// 0xb8f1ab4 0x7873da5560
	void OnFinalize();// 0xb8f1ab4 0x7873da5640
	void OnCaptureFrame();// 0xb8f1ab4 0x7873da1d60
	bool OnCanFinalize();// 0xf6d6184 0x7873da1e40
	void OnBeginFinalize();// 0xb8f1ab4 0x7873da1f20
	FrameMetrics GetCurrentFrameMetrics();// 0xf6d5d8c 0x7873da2000
	FString GenerateFilename(out const FrameMetrics InFrameMetrics);// 0xf6d5da8 0x7873da20e0

--------------------------------
Class: CapturedPixelsID
	<FName,FName> Identifiers;//[Offset: 0x0, Size: 0x50] 0x787395c7c0

--------------------------------
Class: CapturedPixels

--------------------------------
Class: FrameMetrics
	float TotalElapsedTime;//[Offset: 0x0, Size: 0x4] 0x787398d800
	float FrameDelta;//[Offset: 0x4, Size: 0x4] 0x787398d880
	int FrameNumber;//[Offset: 0x8, Size: 0x4] 0x787398d900
	int NumDroppedFrames;//[Offset: 0xc, Size: 0x4] 0x787398d980

--------------------------------
Class: MoviePlayerSettings.Object
	bool bWaitForMoviesToComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873d97680
	bool bMoviesAreSkippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7873d97700
	FString[] StartupMovies;//[Offset: 0x30, Size: 0x10] 0x7873cce8e0

--------------------------------
Class: LocalizedOverlays.Overlays.Object
	BasicOverlays* DefaultOverlays;//[Offset: 0x28, Size: 0x8] 0x7873fc4d00
	<FString,BasicOverlays*> LocaleToOverlaysMap;//[Offset: 0x30, Size: 0x50] 0x787386f280

--------------------------------
Class: Overlays.Object

--------------------------------
Class: BasicOverlays.Overlays.Object
	OverlayItem[] Overlays;//[Offset: 0x28, Size: 0x10] 0x7873eed260

--------------------------------
Class: OverlayItem
	Timespan StartTime;//[Offset: 0x0, Size: 0x8] 0x7873a49800
	Timespan EndTime;//[Offset: 0x8, Size: 0x8] 0x7873a49880
	FString Text;//[Offset: 0x10, Size: 0x10] 0x7873a49900
	Vector2D Position;//[Offset: 0x20, Size: 0x10] 0x7873a49980

--------------------------------
Class: ClothingAssetCustomData.Object

--------------------------------
Class: ClothConfigNv.ClothConfigCommon.ClothConfigBase.Object
	enum ClothingWindMethod;//[Offset: 0x28, Size: 0x1] 0x7873eef4c0
	ClothConstraintSetupNv VerticalConstraint;//[Offset: 0x2c, Size: 0x10] 0x7873fc7200
	ClothConstraintSetupNv HorizontalConstraint;//[Offset: 0x3c, Size: 0x10] 0x7873fc7280
	ClothConstraintSetupNv BendConstraint;//[Offset: 0x4c, Size: 0x10] 0x7873fc7300
	ClothConstraintSetupNv ShearConstraint;//[Offset: 0x5c, Size: 0x10] 0x7873fc7380
	float SelfCollisionRadius;//[Offset: 0x6c, Size: 0x4] 0x7873fc5300
	float SelfCollisionStiffness;//[Offset: 0x70, Size: 0x4] 0x7873fc5380
	float SelfCollisionCullScale;//[Offset: 0x74, Size: 0x4] 0x7873fc5400
	Vector Damping;//[Offset: 0x78, Size: 0x18] 0x7873fc5480
	float Friction;//[Offset: 0x90, Size: 0x4] 0x7873fc5500
	float WindDragCoefficient;//[Offset: 0x94, Size: 0x4] 0x7873fc5580
	float WindLiftCoefficient;//[Offset: 0x98, Size: 0x4] 0x7873fc5600
	Vector LinearDrag;//[Offset: 0xa0, Size: 0x18] 0x7873fc5680
	Vector AngularDrag;//[Offset: 0xb8, Size: 0x18] 0x7873fc5700
	Vector LinearInertiaScale;//[Offset: 0xd0, Size: 0x18] 0x7873fc5780
	Vector AngularInertiaScale;//[Offset: 0xe8, Size: 0x18] 0x7873fc5800
	Vector CentrifugalInertiaScale;//[Offset: 0x100, Size: 0x18] 0x7873fc5880
	float SolverFrequency;//[Offset: 0x118, Size: 0x4] 0x7873fc5900
	float StiffnessFrequency;//[Offset: 0x11c, Size: 0x4] 0x7873fc5980
	float GravityScale;//[Offset: 0x120, Size: 0x4] 0x7873fc5a00
	Vector GravityOverride;//[Offset: 0x128, Size: 0x18] 0x7873fc5a80
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1] 0x7873fc5b00
	float TetherStiffness;//[Offset: 0x144, Size: 0x4] 0x7873fc5b80
	float TetherLimit;//[Offset: 0x148, Size: 0x4] 0x7873fc5c00
	float CollisionThickness;//[Offset: 0x14c, Size: 0x4] 0x7873fc5c80
	float AnimDriveSpringStiffness;//[Offset: 0x150, Size: 0x4] 0x7873fc5d00
	float AnimDriveDamperStiffness;//[Offset: 0x154, Size: 0x4] 0x7873fc5d80
	enum WindMethod;//[Offset: 0x158, Size: 0x1] 0x7873eef560
	ClothConstraintSetup_Legacy VerticalConstraintConfig;//[Offset: 0x15c, Size: 0x10] 0x7873fc5e80
	ClothConstraintSetup_Legacy HorizontalConstraintConfig;//[Offset: 0x16c, Size: 0x10] 0x7873fc5f00
	ClothConstraintSetup_Legacy BendConstraintConfig;//[Offset: 0x17c, Size: 0x10] 0x7873fc5f80
	ClothConstraintSetup_Legacy ShearConstraintConfig;//[Offset: 0x18c, Size: 0x10] 0x7873fc6000

--------------------------------
Class: ClothConstraintSetupNv
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x7873a60a80
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4] 0x7873a60b00
	float StretchLimit;//[Offset: 0x8, Size: 0x4] 0x7873a60b80
	float CompressionLimit;//[Offset: 0xc, Size: 0x4] 0x7873a60c00

--------------------------------
Class: ClothConstraintSetup_Legacy
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x7873a4f480
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4] 0x7873a4f500
	float StretchLimit;//[Offset: 0x8, Size: 0x4] 0x7873a4f580
	float CompressionLimit;//[Offset: 0xc, Size: 0x4] 0x7873a4f600

--------------------------------
Class: ClothPhysicalMeshDataNv_Legacy.ClothPhysicalMeshDataBase_Legacy.Object
	float[] MaxDistances;//[Offset: 0xe0, Size: 0x10] 0x7873eef240
	float[] BackstopDistances;//[Offset: 0xf0, Size: 0x10] 0x7873eef2e0
	float[] BackstopRadiuses;//[Offset: 0x100, Size: 0x10] 0x7873eef380
	float[] AnimDriveMultipliers;//[Offset: 0x110, Size: 0x10] 0x7873eef420

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x290, Size: 0x8] 0x7873fc6900
	NavDataConfig NavDataConfig;//[Offset: 0x298, Size: 0x88] 0x7873fc6980
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1] 0x7873fc6a00
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 0x1] 0x7873fc6a80
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 0x1] 0x7873fc6b00
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x320, Size: 0x1] 0x7873fc6b80
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x320, Size: 0x1] 0x7873fc6c00
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x320, Size: 0x1] 0x7873fc6c80
	enum RuntimeGeneration;//[Offset: 0x321, Size: 0x1] 0x7873eef100
	float ObservedPathsTickInterval;//[Offset: 0x324, Size: 0x4] 0x7873fc6d80
	uint32 DataVersion;//[Offset: 0x328, Size: 0x4] 0x7873fc6e00
	SupportedAreaData[] SupportedAreas;//[Offset: 0x438, Size: 0x10] 0x7873eef1a0

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8] 0x7873a13800
	Color Color;//[Offset: 0x38, Size: 0x4] 0x7873a13880
	Vector DefaultQueryExtent;//[Offset: 0x40, Size: 0x18] 0x7873a13900
	class Actor* NavigationDataClass;//[Offset: 0x58, Size: 0x8] 0x78739b6500
	class Actor* NavDataClass;//[Offset: 0x60, Size: 0x28] 0x78739b65a0

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10] 0x7873a60700
	int AreaID;//[Offset: 0x10, Size: 0x4] 0x7873a60780
	ClassPtrProperty AreaClass;//[Size: 0x8] 0x78739bb1e0

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4] 0x7873fc8000
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4] 0x7873fc8080
	Color DrawColor;//[Offset: 0x34, Size: 0x4] 0x7873fc8100
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4] 0x7873fc8180
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7873fc8200
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7873fc8280
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x7873fc8300
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x7873fc8380
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x7873fc8400
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x7873fc6380
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1] 0x7873fc6400
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1] 0x7873fc6480
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1] 0x7873fc6500
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1] 0x7873fc6580
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1] 0x7873fc6600
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1] 0x7873fc6680
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1] 0x7873fc6700
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1] 0x7873fc6780
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1] 0x7873fc6800
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1] 0x7873fc6880

--------------------------------
Class: NavArea_Default.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Obstacle.NavArea.NavAreaBase.Object

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xb0, Size: 0x4] 0x7873fc7b80
	float TileRemovalRadius;//[Offset: 0xb4, Size: 0x4] 0x7873fc7c00

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10] 0x7873eee3e0
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4] 0x7873fc7480
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4] 0x7873fc7500

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8] 0x78739bb140
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4] 0x7873a60480
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4] 0x7873a60500
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7873a60580
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x7873a60600
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x788a487500

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7873a61d80
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7873a61e00
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7873a61e80
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7873a61f00
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7873a61f80
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7873a62000
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7873a62080
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7873a62100
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7873a60080
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7873a60100
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7873a60180
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7873a60200
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7873a60280
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x7873a60300
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x7873a60380
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x7873a60400

--------------------------------
Class: NavigationTestingActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x298, Size: 0x8] 0x7873fccf00
	NavigationInvokerComponent* InvokerComponent;//[Offset: 0x2a0, Size: 0x8] 0x7873fccf80
	bool bActAsNavigationInvoker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x7873fcd000
	NavAgentProperties NavAgentProps;//[Offset: 0x2b0, Size: 0x30] 0x7873fcd080
	Vector QueryingExtent;//[Offset: 0x2e0, Size: 0x18] 0x7873fcd100
	NavigationData* MyNavData;//[Offset: 0x2f8, Size: 0x8] 0x7873fcd180
	Vector ProjectedLocation;//[Offset: 0x300, Size: 0x18] 0x7873fcd200
	bool bProjectedLocationValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1] 0x7873fcd280
	bool bSearchStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318, Size: 0x1] 0x7873fcd300
	float CostLimitFactor;//[Offset: 0x31c, Size: 0x4] 0x7873fcd380
	float MinimumCostLimit;//[Offset: 0x320, Size: 0x4] 0x7873fcd400
	bool bBacktracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 0x1] 0x7873fcd480
	bool bUseHierarchicalPathfinding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 0x1] 0x7873fcd500
	bool bGatherDetailedInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x324, Size: 0x1] 0x7873fcd580
	bool bDrawDistanceToWall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x324, Size: 0x1] 0x7873fcd600
	bool bShowNodePool;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x324, Size: 0x1] 0x7873fcd680
	bool bShowBestPath;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x324, Size: 0x1] 0x7873fcb600
	bool bShowDiffWithPreviousStep;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x324, Size: 0x1] 0x7873fcb680
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x324, Size: 0x1] 0x7873fcb700
	byte CostDisplayMode;//[Offset: 0x325, Size: 0x1] 0x7873fcb780
	Vector2D TextCanvasOffset;//[Offset: 0x328, Size: 0x10] 0x7873fcb800
	bool bPathExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1] 0x7873fcb880
	bool bPathIsPartial;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1] 0x7873fcb900
	bool bPathSearchOutOfNodes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1] 0x7873fcb980
	float PathfindingTime;//[Offset: 0x33c, Size: 0x4] 0x7873fcba00
	float PathCost;//[Offset: 0x340, Size: 0x4] 0x7873fcba80
	int PathfindingSteps;//[Offset: 0x344, Size: 0x4] 0x7873fcbb00
	NavigationTestingActor* OtherActor;//[Offset: 0x348, Size: 0x8] 0x7873fcbb80
	class NavigationQueryFilter* FilterClass;//[Offset: 0x350, Size: 0x8] 0x7873fe1000
	int ShowStepIndex;//[Offset: 0x358, Size: 0x4] 0x7873fcbc00
	float OffsetFromCornersDistance;//[Offset: 0x35c, Size: 0x4] 0x7873fcbc80

--------------------------------
Class: NavLinkComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NavigationLink[] Links;//[Offset: 0x550, Size: 0x10] 0x7873fe0f60

--------------------------------
Class: NavLinkCustomInterface.Interface.Object

--------------------------------
Class: NavLinkTrivial.NavLinkDefinition.Object

--------------------------------
Class: NavMeshRenderingComponent.DebugDrawComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: RecastNavMesh.NavigationData.Actor.Object
	bool bDrawTriangleEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49c, Size: 0x1] 0x7873fcfc80
	bool bDrawPolyEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49c, Size: 0x1] 0x7873fcfd00
	bool bDrawFilledPolys;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x49c, Size: 0x1] 0x7873fcfd80
	bool bDrawNavMeshEdges;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x49c, Size: 0x1] 0x7873fcfe00
	bool bDrawTileBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x49c, Size: 0x1] 0x7873fcfe80
	bool bDrawPathCollidingGeometry;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x49c, Size: 0x1] 0x7873fcff00
	bool bDrawTileLabels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x49c, Size: 0x1] 0x7873fcff80
	bool bDrawPolygonLabels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x49c, Size: 0x1] 0x7873fce780
	bool bDrawDefaultPolygonCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49d, Size: 0x1] 0x7873fce800
	bool bDrawPolygonFlags;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49d, Size: 0x1] 0x7873fce880
	bool bDrawLabelsOnPathNodes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x49d, Size: 0x1] 0x7873fce900
	bool bDrawNavLinks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x49d, Size: 0x1] 0x7873fce980
	bool bDrawFailedNavLinks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x49d, Size: 0x1] 0x7873fcea00
	bool bDrawClusters;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x49d, Size: 0x1] 0x7873fcea80
	bool bDrawOctree;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x49d, Size: 0x1] 0x7873fceb00
	bool bDrawOctreeDetails;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x49d, Size: 0x1] 0x7873fceb80
	bool bDrawMarkedForbiddenPolys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49e, Size: 0x1] 0x7873fcec00
	bool bDistinctlyDrawTilesBeingBuilt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49e, Size: 0x1] 0x7873fcec80
	float DrawOffset;//[Offset: 0x4a0, Size: 0x4] 0x7873fced00
	RecastNavMeshTileGenerationDebug TileGenerationDebug;//[Offset: 0x4a4, Size: 0x14] 0x7873fced80
	bool bFixedTilePoolSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4b8, Size: 0x1] 0x7873fcee00
	int TilePoolSize;//[Offset: 0x4bc, Size: 0x4] 0x7873fcee80
	float TileSizeUU;//[Offset: 0x4c0, Size: 0x4] 0x7873fcef00
	float CellSize;//[Offset: 0x4c4, Size: 0x4] 0x7873fcef80
	float CellHeight;//[Offset: 0x4c8, Size: 0x4] 0x7873fcf000
	float AgentRadius;//[Offset: 0x4cc, Size: 0x4] 0x7873fcf080
	float AgentHeight;//[Offset: 0x4d0, Size: 0x4] 0x7873fcf100
	float AgentMaxSlope;//[Offset: 0x4d4, Size: 0x4] 0x7873fcf180
	float AgentMaxStepHeight;//[Offset: 0x4d8, Size: 0x4] 0x7873fcf200
	float MinRegionArea;//[Offset: 0x4dc, Size: 0x4] 0x7873fcf280
	float MergeRegionSize;//[Offset: 0x4e0, Size: 0x4] 0x7873fcf300
	float MaxSimplificationError;//[Offset: 0x4e4, Size: 0x4] 0x7873fcf380
	int MaxSimultaneousTileGenerationJobsCount;//[Offset: 0x4e8, Size: 0x4] 0x7873fcf400
	int TileNumberHardLimit;//[Offset: 0x4ec, Size: 0x4] 0x7873fcf480
	int PolyRefTileBits;//[Offset: 0x4f0, Size: 0x4] 0x7873fcf500
	int PolyRefNavPolyBits;//[Offset: 0x4f4, Size: 0x4] 0x7873fcf580
	int PolyRefSaltBits;//[Offset: 0x4f8, Size: 0x4] 0x7873fcf600
	Vector NavMeshOriginOffset;//[Offset: 0x500, Size: 0x18] 0x7873fcf680
	float DefaultDrawDistance;//[Offset: 0x518, Size: 0x4] 0x7873fcf700
	float DefaultMaxSearchNodes;//[Offset: 0x51c, Size: 0x4] 0x7873fcf780
	float DefaultMaxHierarchicalSearchNodes;//[Offset: 0x520, Size: 0x4] 0x7873fcd700
	byte RegionPartitioning;//[Offset: 0x524, Size: 0x1] 0x7873fcd780
	byte LayerPartitioning;//[Offset: 0x525, Size: 0x1] 0x7873fcd800
	int RegionChunkSplits;//[Offset: 0x528, Size: 0x4] 0x7873fcd880
	int LayerChunkSplits;//[Offset: 0x52c, Size: 0x4] 0x7873fcd900
	bool bSortNavigationAreasByCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x530, Size: 0x1] 0x7873fcd980
	bool bIsWorldPartitioned;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x530, Size: 0x1] 0x7873fcda00
	bool bPerformVoxelFiltering;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x530, Size: 0x1] 0x7873fcda80
	bool bMarkLowHeightAreas;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x530, Size: 0x1] 0x7873fcdb00
	bool bUseExtraTopCellWhenMarkingAreas;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x530, Size: 0x1] 0x7873fcdb80
	bool bFilterLowSpanSequences;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x530, Size: 0x1] 0x7873fcdc00
	bool bFilterLowSpanFromTileCache;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x530, Size: 0x1] 0x7873fcdc80
	bool bDoFullyAsyncNavDataGathering;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x530, Size: 0x1] 0x7873fcdd00
	bool bUseBetterOffsetsFromCorners;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x531, Size: 0x1] 0x7873fcdd80
	bool bStoreEmptyTileLayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x531, Size: 0x1] 0x7873fcde00
	bool bUseVirtualFilters;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x531, Size: 0x1] 0x7873fcde80
	bool bUseVirtualGeometryFilteringAndDirtying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x531, Size: 0x1] 0x7873fcdf00
	bool bAllowNavLinkAsPathEnd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x531, Size: 0x1] 0x7873fcdf80
	bool bUseVoxelCache;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x531, Size: 0x1] 0x7873fce000
	float TileSetUpdateInterval;//[Offset: 0x534, Size: 0x4] 0x7873fce080
	float HeuristicScale;//[Offset: 0x538, Size: 0x4] 0x7873fce100
	float VerticalDeviationFromGroundCompensation;//[Offset: 0x53c, Size: 0x4] 0x7873fce180
	bool K2_ReplaceAreaInTileBounds(Box Bounds, class NavArea OldArea, class NavArea NewArea, bool ReplaceLinks);// 0x1128382c 0x7873fd04e0

--------------------------------
Class: RecastNavMeshTileGenerationDebug
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7873a62b00
	IntVector TileCoordinate;//[Offset: 0x4, Size: 0xc] 0x7873a62b80
	bool bHeightfieldSolidFromRasterization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7873a62c00
	bool bHeightfieldSolidPostRadiusFiltering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x7873a62c80
	bool bHeightfieldSolidPostHeightFiltering;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x7873a62d00
	bool bCompactHeightfield;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x7873a62d80
	bool bCompactHeightfieldEroded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x7873a62e00
	bool bCompactHeightfieldRegions;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x7873a62e80
	bool bCompactHeightfieldDistances;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x7873a62f00
	bool bTileCacheLayerAreas;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x7873a62f80
	bool bTileCacheLayerRegions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1] 0x7873a63000
	bool bTileCacheContours;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1] 0x7873a63080
	bool bTileCachePolyMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1] 0x7873a63100
	bool bTileCacheDetailMesh;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1] 0x7873a63180

--------------------------------
Class: GameplayDebuggerCategoryReplicator.Actor.Object
	PlayerController* OwnerPC;//[Offset: 0x288, Size: 0x8] 0x7873ff0d00
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1] 0x7873ff0d80
	GameplayDebuggerNetPack ReplicatedData;//[Offset: 0x298, Size: 0x18] 0x7873ff0e00
	GameplayDebuggerDebugActor DebugActor;//[Offset: 0x2b0, Size: 0x14] 0x7873ff0e80
	GameplayDebuggerVisLogSync VisLogSync;//[Offset: 0x2c8, Size: 0x10] 0x7873ff0f00
	GameplayDebuggerRenderingComponent* RenderingComp;//[Offset: 0x2d8, Size: 0x8] 0x7873ff0f80
	void ServerSetViewPoint(const Vector InViewLocation, const Vector InViewDirection);// 0x112aa600 0x7873fd3960
	void ServerSetEnabled(bool bEnable);// 0x112aa870 0x7873fd0080
	void ServerSetDebugActor(Actor* Actor, bool bSelectInEditor);// 0x112aa72c 0x7873fd0160
	void ServerSetCategoryEnabled(int CategoryId, bool bEnable);// 0x112aa4c0 0x7873fd0240
	void ServerSendExtensionInputEvent(int ExtensionId, int HandlerId);// 0x112aa260 0x7873fd0320
	void ServerSendCategoryInputEvent(int CategoryId, int HandlerId);// 0x112aa390 0x7873fd0400

--------------------------------
Class: GameplayDebuggerNetPack

--------------------------------
Class: GameplayDebuggerDebugActor
	FName ActorName;//[Offset: 0x8, Size: 0x8] 0x7873a62a00
	int SyncCounter;//[Offset: 0x10, Size: 0x4] 0x7873a62a80

--------------------------------
Class: GameplayDebuggerVisLogSync
	FString DeviceIDs;//[Offset: 0x0, Size: 0x10] 0x7873a62980

--------------------------------
Class: GameplayDebuggerRenderingComponent.DebugDrawComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: GameplayDebuggerLocalController.Object
	GameplayDebuggerCategoryReplicator* CachedReplicator;//[Offset: 0x28, Size: 0x8] 0x7873ff2000
	GameplayDebuggerPlayerManager* CachedPlayerManager;//[Offset: 0x30, Size: 0x8] 0x7873ff2080
	Actor* DebugActorCandidate;//[Offset: 0x38, Size: 0x8] 0x7873ff2100
	Font* HUDFont;//[Offset: 0x40, Size: 0x8] 0x7873ff0080

--------------------------------
Class: GameplayDebuggerPlayerManager.Actor.Object
	GameplayDebuggerPlayerData[] PlayerData;//[Offset: 0x290, Size: 0x10] 0x7873fe06a0
	GameplayDebuggerCategoryReplicator*[] PendingRegistrations;//[Offset: 0x2a0, Size: 0x10] 0x7873fe0740

--------------------------------
Class: GameplayDebuggerPlayerData
	GameplayDebuggerLocalController* Controller;//[Offset: 0x0, Size: 0x8] 0x7873a64100
	InputComponent* InputComponent;//[Offset: 0x8, Size: 0x8] 0x7873a64180
	GameplayDebuggerCategoryReplicator* Replicator;//[Offset: 0x10, Size: 0x8] 0x7873a64200

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8] 0x787382c080
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1] 0x788ab2a380
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8] 0x787382c200
	void ReadyForActivation();// 0x112ba2e8 0x7873837160
	void GenericGameplayTaskDelegate__DelegateSignature();// 0xb8f1ab4 0x7873837240
	void EndTask();// 0x112ba2d4 0x7873837320

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1] 0x7873ff1880
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 0x10] 0x7873fe0100
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 0x10] 0x7873fe01a0
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 0x10] 0x7873fe0240
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 0x10] 0x7873fe02e0
	delegate OnClaimedResourcesChange;//[Offset: 0x110, Size: 0x10] 0x7873ff1b00
	void OnRep_SimulatedTasks();// 0x112bb2f8 0x7873fd37a0
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x112bb058 0x7873fd3880

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4] 0x7873ff1d80
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1] 0x7873ff1e00
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x7873ff1e80

--------------------------------
Class: GameplayTask_TimeLimitedExecution.GameplayTask.Object
	delegate OnFinished;//[Offset: 0x70, Size: 0x10] 0x787382c000
	delegate OnTimeExpired;//[Offset: 0x80, Size: 0x10] 0x787382c100

--------------------------------
Class: AIBlueprintHelperLibrary.BlueprintFunctionLibrary.Object
	static void UnlockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bUnlockMovement, bool UnlockAILogic);// 0x113e77fc 0x7873fd2460
	static Pawn* SpawnAIFromClass(Object* WorldContextObject, class Pawn PawnClass, BehaviorTree* BehaviorTree, Vector Location, Rotator Rotation, bool bNoCollisionFail, Actor* Owner);// 0x113e7bc4 0x7873fd2540
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x113e7130 0x7873fd2620
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x113e7218 0x7873fd2700
	static void SendAIMessage(Pawn* Target, FName Message, Object* MessageSource, bool bSuccess);// 0x113e7e24 0x7873fd27e0
	static void LockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bLockMovement, bool LockAILogic);// 0x113e7938 0x7873fd28c0
	static bool IsValidAIRotation(Rotator Rotation);// 0x113e75f8 0x7873fd29a0
	static bool IsValidAILocation(Vector Location);// 0x113e7750 0x7873fd2a80
	static bool IsValidAIDirection(Vector DirectionVector);// 0x113e76a4 0x7873fd2b60
	static int GetNextNavLinkIndex(const Controller* Controller);// 0x113e72f8 0x7873fd2c40
	static Vector[] GetCurrentPathPoints(Controller* Controller);// 0x113e7448 0x7873fd2d20
	static int GetCurrentPathIndex(const Controller* Controller);// 0x113e73a0 0x7873fd2e00
	static NavigationPath* GetCurrentPath(Controller* Controller);// 0x113e7550 0x7873fd2ee0
	static BlackboardComponent* GetBlackboard(Actor* Target);// 0x113e7a74 0x7873fd2fc0
	static AIController* GetAIController(Actor* ControlledActor);// 0x113e7b1c 0x7873fd30a0
	static AIAsyncTaskBlueprintProxy* CreateMoveToProxyObject(Object* WorldContextObject, Pawn* Pawn, Vector Destination, Actor* TargetActor, float AcceptanceRadius, bool bStopOnOverlap);// 0x113e7fa4 0x7873fd3180

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8] 0x7873ff9a00
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8] 0x7873ff9a80
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10] 0x7873fe3440
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10] 0x7873fe34e0

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10] 0x7873fe2d60
	BTService*[] Services;//[Offset: 0x68, Size: 0x10] 0x7873fe2e00
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x7873ffd300

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10] 0x7873ffd380
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8] 0x7873ffd400
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8] 0x7873ffd480

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8] 0x7873a64a00
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8] 0x7873a64a80
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10] 0x78739ba9c0
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10] 0x78739baa60

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10] 0x7873fe51a0
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7874002c80

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4] 0x7874001780
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4] 0x7874001800
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7874001880
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x7874001900

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1] 0x7873ffd080
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1] 0x7873ffd100

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1] 0x7873a64c80
	uint16 Number;//[Offset: 0x2, Size: 0x2] 0x7873a64d00

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8] 0x7873ffb700
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10] 0x7873fe2fe0
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7873ffb800

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8] 0x7873a64d80
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8] 0x7873a64e00
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7873a64e80

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x28, Size: 0x10] 0x7873fc7580
	Vector[] PathPoints;//[Offset: 0x38, Size: 0x10] 0x7873eee480
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 0x1] 0x7873fc7680
	bool IsValid();// 0x11277e54 0x7873fae780
	bool IsStringPulled();// 0x11277e1c 0x7873fae860
	bool IsPartial();// 0x11277e8c 0x7873fae940
	float GetPathLength();// 0x11277ef8 0x7873faea20
	float GetPathCost();// 0x11277ec4 0x7873faeb00
	FString GetDebugString();// 0x112780d0 0x7873faebe0
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x11277f2c 0x7873faecc0
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x11277fd4 0x7873faeda0

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 0x8] 0x7873ffb880
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 0x8] 0x7873ffb900
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 0x8] 0x7873ffb980
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 0x10] 0x7873fe3080
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x113ffd64 0x7873fd84a0
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x113fff54 0x7873fd8580
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x113ffc6c 0x7873fd8660
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x11400588 0x7873fd8740
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x113ffe5c 0x7873fd8820
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x114002a0 0x7873fd8900
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x114001a8 0x7873fd89e0
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x11400398 0x7873fd8ac0
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x11400490 0x7873fd8ba0
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x114000a8 0x7873fd8c80
	bool IsVectorValueSet(out const FName KeyName);// 0x113ffbac 0x7873fd8d60
	Vector GetValueAsVector(out const FName KeyName);// 0x11400740 0x7873fd8e40
	FString GetValueAsString(out const FName KeyName);// 0x114008bc 0x7873fd8f20
	Rotator GetValueAsRotator(out const FName KeyName);// 0x11400680 0x7873fd9000
	Object* GetValueAsObject(out const FName KeyName);// 0x11400d74 0x7873fd5720
	FName GetValueAsName(out const FName KeyName);// 0x11400800 0x7873fd5800
	int GetValueAsInt(out const FName KeyName);// 0x11400b40 0x7873fd58e0
	float GetValueAsFloat(out const FName KeyName);// 0x11400a84 0x7873fd59c0
	byte GetValueAsEnum(out const FName KeyName);// 0x11400bfc 0x7873fd5aa0
	class Object GetValueAsClass(out const FName KeyName);// 0x11400cb8 0x7873fd5b80
	bool GetValueAsBool(out const FName KeyName);// 0x114009c4 0x7873fd5c60
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x113ff984 0x7873fd5d40
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x113ffa98 0x7873fd5e20
	void ClearValue(out const FName KeyName);// 0x113ff8d0 0x7873fd5f00

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 0x8] 0x7873ff9780
	AIController* AIOwner;//[Offset: 0xc0, Size: 0x8] 0x7873ff9800
	void StopLogic(FString Reason);// 0x11404938 0x7873fd6360
	void StartLogic();// 0x11404a10 0x7873fd6440
	void RestartLogic();// 0x114049f4 0x7873fd6520
	bool IsRunning();// 0x114048f8 0x7873fd6600
	bool IsPaused();// 0x114048b8 0x7873fd66e0

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 0x1] 0x7873ff5f00
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x358, Size: 0x1] 0x7873ff5f80
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x358, Size: 0x1] 0x7873ff6000
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x358, Size: 0x1] 0x7873ff6080
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x358, Size: 0x1] 0x7873ff6100
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x358, Size: 0x1] 0x7873ff6180
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x358, Size: 0x1] 0x7873ff6200
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x360, Size: 0x8] 0x7873ff6280
	BrainComponent* BrainComponent;//[Offset: 0x368, Size: 0x8] 0x7873ff6300
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x370, Size: 0x8] 0x7873ff4280
	PawnActionsComponent* ActionsComp;//[Offset: 0x378, Size: 0x8] 0x7873ff4300
	BlackboardComponent* Blackboard;//[Offset: 0x380, Size: 0x8] 0x7873ff4380
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x388, Size: 0x8] 0x7873ff4400
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x390, Size: 0x8] 0x7873fe22c0
	delegate ReceiveMoveCompleted;//[Offset: 0x398, Size: 0x10] 0x7873ff4480
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x113e91b4 0x7873fd4bc0
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x113e9064 0x7873fd4ca0
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x113e8bfc 0x7873fd4d80
	void SetMoveBlockDetection(bool bEnable);// 0x113e937c 0x7873fd4e60
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x113e92c0 0x7873fd4f40
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0xb8f1ab4 0x7873fd5020
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x113e8cdc 0x7873fd5100
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x113e94d0 0x7873fd51e0
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x113e97a4 0x7873fd52c0
	void K2_SetFocus(Actor* NewFocus);// 0x113e8e20 0x7873fd53a0
	void K2_SetFocalPoint(Vector FP);// 0x113e8ec8 0x7873fd5480
	void K2_ClearFocus();// 0x113e8dd8 0x7873fd5560
	bool HasPartialPath();// 0x113e9464 0x7873fd5640
	PathFollowingComponent* GetPathFollowingComponent();// 0x113e8cc0 0x7873fd1d60
	byte GetMoveStatus();// 0x113e949c 0x7873fd1e40
	Vector GetImmediateMoveDestination();// 0x113e942c 0x7873fd1f20
	Actor* GetFocusActor();// 0x113e8dec 0x7873fd2000
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x113e8f70 0x7873fd20e0
	Vector GetFocalPoint();// 0x113e902c 0x7873fd21c0
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x113e8ca4 0x7873fd22a0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x113e910c 0x7873fd2380

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 0x8] 0x7874004900
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 0x8] 0x7874004980
	void OnNavDataRegistered(NavigationData* NavData);// 0x1142fbc0 0x7873fdbe60
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x1142fcd4 0x7873fdbf40
	Vector GetPathDestination();// 0x1142fc68 0x7873fdc020
	byte GetPathActionType();// 0x1142fca0 0x7873fdc100

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 0x10] 0x7873fe1b40
	class AISense* DominantSense;//[Offset: 0xc0, Size: 0x8] 0x7873fe1be0
	AIController* AIOwner;//[Offset: 0xd8, Size: 0x8] 0x7873ff5400
	delegate OnPerceptionUpdated;//[Offset: 0x160, Size: 0x10] 0x7873ff5480
	delegate OnTargetPerceptionUpdated;//[Offset: 0x170, Size: 0x10] 0x7873ff5500
	delegate OnTargetPerceptionInfoUpdated;//[Offset: 0x180, Size: 0x10] 0x7873ff5580
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x113ebe6c 0x7873fd4300
	void RequestStimuliListenerUpdate();// 0x113ec588 0x7873fd43e0
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x113ec59c 0x7873fd44c0
	void GetPerceivedHostileActorsBySense(const class AISense SenseToUse, out Actor*[] OutActors);// 0x113ec3a8 0x7873fd45a0
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x113ec4b4 0x7873fd4680
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x113ec084 0x7873fd4760
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x113ec190 0x7873fd4840
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x113ec29c 0x7873fd4920
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x113ebf68 0x7873fd4a00
	void ForgetAll();// 0x113ec574 0x7873fd4ae0

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4] 0x7873ff6980
	float MaxAge;//[Offset: 0x2c, Size: 0x4] 0x7873ff6a00
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7873ff6a80

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4] 0x7873ff6b00
	enum NotifyType;//[Offset: 0x2c, Size: 0x1] 0x7873fe1640
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x7873ff6c00
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1] 0x7873ff6c80
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8] 0x7873ff6d00

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10] 0x7873fe16e0
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4] 0x7873ff6e00
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x113f0908 0x7873fd3b20
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x113f09e8 0x7873fd3c00
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x113f07c8 0x7873fd3ce0
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x113f052c 0x7873fd3dc0
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x113f0620 0x7873fd3ea0

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8] 0x7873ff7380

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18] 0x7873ffa500
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18] 0x7873ff8480
	SoftClassPath EnvQueryManagerClassName;//[Offset: 0x88, Size: 0x18] 0x7873ff8500
	float AcceptanceRadius;//[Offset: 0xa0, Size: 0x4] 0x7873ff8580
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0xa4, Size: 0x4] 0x7873ff8600
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0xa8, Size: 0x4] 0x7873ff8680
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1] 0x7873ff8700
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1] 0x7873ff8780
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae, Size: 0x1] 0x7873ff8800
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf, Size: 0x1] 0x7873ff8880
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x7873ff8900
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1] 0x7873ff8980
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1] 0x7873ff8a00
	bool bAddBlackboardSelfKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3, Size: 0x1] 0x7873ff8a80
	bool bClearBBEntryOnBTEQSFail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1] 0x7873ff8b00
	byte DefaultSightCollisionChannel;//[Offset: 0xb5, Size: 0x1] 0x7873ff8b80
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xb8, Size: 0x8] 0x7873ff8c00
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xc0, Size: 0x8] 0x7873ff8c80
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xc8, Size: 0x8] 0x7873ff8d00
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xd0, Size: 0x10] 0x7873fe3580
	AIHotSpotManager* HotSpotManager;//[Offset: 0xe0, Size: 0x8] 0x7873ff8e00
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xe8, Size: 0x8] 0x7873ff8e80
	void AILoggingVerbose();// 0x113f8438 0x7873fd6980
	void AIIgnorePlayers();// 0x113f8454 0x7873fd6a60

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4] 0x7873ffb280
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10] 0x7873fe3260
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10] 0x7873fe3300

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8] 0x7873a65100
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8] 0x7873a65180

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x128, Size: 0x10] 0x7873fe33a0
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x278, Size: 0x8] 0x7873ffb480
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x113fe0a0 0x7873fd60c0
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x113fe2e0 0x7873fd61a0
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x113fe198 0x7873fd6280

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0x148, Size: 0x10] 0x7873fe3ee0
	EnvQueryContext*[] LocalContexts;//[Offset: 0x158, Size: 0x10] 0x7873fe3f80
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0x168, Size: 0x10] 0x7873fe4020
	float MaxAllowedTestingTime;//[Offset: 0x1cc, Size: 0x4] 0x7874008200
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1] 0x7874008280
	int QueryCountWarningThreshold;//[Offset: 0x1d4, Size: 0x4] 0x7874008300
	double QueryCountWarningInterval;//[Offset: 0x1d8, Size: 0x8] 0x7874008380
	double ExecutionTimeWarningSeconds;//[Offset: 0x1e0, Size: 0x8] 0x7874008400
	double HandlingResultTimeWarningSeconds;//[Offset: 0x1e8, Size: 0x8] 0x7874006380
	double GenerationTimeWarningSeconds;//[Offset: 0x1f0, Size: 0x8] 0x7874006400
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x114213a8 0x7873fdb5a0

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8] 0x7873a65f80

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8] 0x7874006200
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 0x10] 0x7873fe4de0

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8] 0x7874007f80
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10] 0x7873fe3e40

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10] 0x7874005a80
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8] 0x7873fe4c00
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7874005b00

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4] 0x7874005b80

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4] 0x7874007600
	byte TestPurpose;//[Offset: 0x30, Size: 0x1] 0x7874007680
	FString TestComment;//[Offset: 0x38, Size: 0x10] 0x7874007700
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1] 0x7874007780
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1] 0x7874007800
	byte FilterType;//[Offset: 0x4a, Size: 0x1] 0x7874007880
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38] 0x7874007900
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38] 0x7874007980
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38] 0x7874007a00
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1] 0x7874007a80
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1] 0x7874007b00
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1] 0x7874007b80
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1] 0x7873fe66e0
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38] 0x7874007c80
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38] 0x7874007d00
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38] 0x7874007d80
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38] 0x7874007e00
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1] 0x7874007e80
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1] 0x7874007f00

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7873a63e80

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	ClassPtrProperty PropertyType;//[Size: 0x8] 0x78739bace0

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8] 0x7873a64000
	FName DataField;//[Offset: 0x18, Size: 0x8] 0x7873a64080

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4] 0x7873a63f00

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4] 0x787382cc00
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8] 0x788ab28300
	int OptionIndex;//[Offset: 0x60, Size: 0x4] 0x787382cc80
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10] 0x787382cd00
	void SetNamedParam(FName ParamName, float Value);// 0x1141f304 0x7873836280
	Vector[] GetResultsAsLocations();// 0x1141f3f8 0x7873836360
	Actor*[] GetResultsAsActors();// 0x1141f4a8 0x7873836440
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x1141f558 0x7873836520
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x1141f624 0x7873836600
	float GetItemScore(int ItemIndex);// 0x1141f6f0 0x78738366e0
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0xb8f1ab4 0x78738367c0

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7873ff2d80
	delegate OnFail;//[Offset: 0x38, Size: 0x10] 0x7873ff2e00
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x113e6bf8 0x7873fd3260

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4] 0x787382d680

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x1142b1ac 0x7873fde4e0
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x1142a7cc 0x7873fde5c0
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x1142a620 0x7873fde6a0
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x1142ade0 0x7873fdadc0
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x1142afd0 0x7873fdaea0
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x1142a900 0x7873fdaf80
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x1142ab70 0x7873fdb060

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4] 0x787382b900
	float ExpirationAge;//[Offset: 0x4, Size: 0x4] 0x787382b980
	float Strength;//[Offset: 0x8, Size: 0x4] 0x787382ba00
	Vector StimulusLocation;//[Offset: 0x10, Size: 0x18] 0x787382ba80
	Vector ReceiverLocation;//[Offset: 0x28, Size: 0x18] 0x787382bb00
	FName Tag;//[Offset: 0x40, Size: 0x8] 0x787382bb80
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x787382bc80

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8] 0x7873a63d00
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10] 0x78739bac40
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7873a63e00

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 0x8] 0x787400c100
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 0x10] 0x7873fe5ba0
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 0x10] 0x7873fe5c40
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 0x8] 0x787400c280
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x11431414 0x7873fddec0
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x11431560 0x7873fddfa0
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x114312b4 0x7873fde080
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x11431364 0x7873fde160

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8] 0x787400a800
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8] 0x787400a880
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8] 0x787400a900
	Object* Instigator;//[Offset: 0x40, Size: 0x8] 0x787400a980
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8] 0x787400aa00
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x787400aa80
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x787400ab00
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x787400ab80
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x787400ac00
	byte GetActionPriority();// 0x11430a88 0x7873fde240
	void Finish(byte WithResult);// 0x114308e8 0x7873fde320
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x11430998 0x7873fde400

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8] 0x7873a66a00

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8] 0x7873a66a80

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: AIDataProvider_Random.AIDataProvider_QueryParams.AIDataProvider.Object
	float Min;//[Offset: 0x3c, Size: 0x4] 0x7873ff5b80
	float Max;//[Offset: 0x40, Size: 0x4] 0x7873ff5c00
	bool bInteger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x7873ff5c80

--------------------------------
Class: AIDataProvider_QueryParams.AIDataProvider.Object
	FName ParamName;//[Offset: 0x28, Size: 0x8] 0x7873ff5d00
	float FloatValue;//[Offset: 0x30, Size: 0x4] 0x7873ff5d80
	int IntValue;//[Offset: 0x34, Size: 0x4] 0x7873ff5e00
	bool BoolValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7873ff5e80

--------------------------------
Class: AIResource_Movement.GameplayTaskResource.Object

--------------------------------
Class: AISenseBlueprintListener.UserDefinedStruct.ScriptStruct.Struct.Field.Object

--------------------------------
Class: UserDefinedStruct.ScriptStruct.Struct.Field.Object
	byte Status;//[Offset: 0xc0, Size: 0x1] 0x7873fbc480
	Guid Guid;//[Offset: 0xc4, Size: 0x10] 0x7873fbc500

--------------------------------
Class: AISenseConfig_Damage.AISenseConfig.Object
	class AISense_Damage* Implementation;//[Offset: 0x48, Size: 0x8] 0x7873fe1500

--------------------------------
Class: AISense_Damage.AISense.Object
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x7873fe38a0
	static void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation, FName Tag);// 0x113f5a74 0x7873fd6de0

--------------------------------
Class: AIDamageEvent
	float Amount;//[Offset: 0x0, Size: 0x4] 0x7873a63880
	Vector Location;//[Offset: 0x8, Size: 0x18] 0x7873a63900
	Vector HitLocation;//[Offset: 0x20, Size: 0x18] 0x7873a63980
	Actor* DamagedActor;//[Offset: 0x38, Size: 0x8] 0x7873a63a00
	Actor* Instigator;//[Offset: 0x40, Size: 0x8] 0x7873a63a80
	FName Tag;//[Offset: 0x48, Size: 0x8] 0x7873a63b00

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8] 0x7873fe3d00
	float SightRadius;//[Offset: 0x50, Size: 0x4] 0x7873ff6400
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4] 0x7873ff6480
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4] 0x7873ff6500
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4] 0x7873ff6580
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x60, Size: 0x4] 0x7873ff6600
	float PointOfViewBackwardOffset;//[Offset: 0x64, Size: 0x4] 0x7873ff6680
	float NearClippingRadius;//[Offset: 0x68, Size: 0x4] 0x7873ff6700

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x140, Size: 0x4] 0x7873ff9000
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x144, Size: 0x4] 0x7873ff9080
	double MaxTimeSlicePerTick;//[Offset: 0x148, Size: 0x8] 0x7873ff9100
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x150, Size: 0x4] 0x7873ff9180
	float MaxQueryImportance;//[Offset: 0x158, Size: 0x4] 0x7873ff9200
	float SightLimitQueryImportance;//[Offset: 0x15c, Size: 0x4] 0x7873ff9280

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7873a63b80
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7873a63c00
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7873a63c80

--------------------------------
Class: AISense_Blueprint.AISense.Object
	class UserDefinedStruct* ListenerDataType;//[Offset: 0x78, Size: 0x8] 0x7873fe3940
	AIPerceptionComponent*[] ListenerContainer;//[Offset: 0x80, Size: 0x10] 0x7873fe39e0
	AISenseEvent*[] UnprocessedEvents;//[Offset: 0x90, Size: 0x10] 0x7873fe3a80
	float OnUpdate(out const AISenseEvent*[] EventsToProcess);// 0xb8f1ab4 0x7873fd6ec0
	void OnListenerUpdated(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0xb8f1ab4 0x7873fd6fa0
	void OnListenerUnregistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0xb8f1ab4 0x7873fd7080
	void OnListenerRegistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0xb8f1ab4 0x7873fd7160
	void K2_OnNewPawn(Pawn* NewPawn);// 0xb8f1ab4 0x7873fd7240
	void GetAllListenerComponents(out AIPerceptionComponent*[] ListenerComponents);// 0x113f4fc0 0x7873fd7320
	void GetAllListenerActors(out Actor*[] ListenerActors);// 0x113f5080 0x7873fd3a40

--------------------------------
Class: AISense_Prediction.AISense.Object
	AIPredictionEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x7873fe3760
	static void RequestPawnPredictionEvent(Pawn* Requestor, Actor* PredictedActor, float PredictionTime);// 0x113f68c8 0x7873fd6b40
	static void RequestControllerPredictionEvent(AIController* Requestor, Actor* PredictedActor, float PredictionTime);// 0x113f69f4 0x7873fd6c20

--------------------------------
Class: AIPredictionEvent
	Actor* Requestor;//[Offset: 0x0, Size: 0x8] 0x7873a63500
	Actor* PredictedActor;//[Offset: 0x8, Size: 0x8] 0x7873a63580

--------------------------------
Class: AISense_Touch.AISense.Object
	AITouchEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x7873fe3620

--------------------------------
Class: AITouchEvent
	Actor* TouchReceiver;//[Offset: 0x18, Size: 0x8] 0x7873a63200
	Actor* OtherActor;//[Offset: 0x20, Size: 0x8] 0x7873a63280

--------------------------------
Class: AITask_LockLogic.AITask.GameplayTask.Object

--------------------------------
Class: AITask.GameplayTask.Object
	AIController* OwnerController;//[Offset: 0x70, Size: 0x8] 0x7873ffa480

--------------------------------
Class: BlackboardKeyType_Bool.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Float.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_NativeEnum.BlackboardKeyType.Object
	FString EnumName;//[Offset: 0x30, Size: 0x10] 0x7873ffd580
	Enum* EnumType;//[Offset: 0x40, Size: 0x8] 0x7873ffd600

--------------------------------
Class: BlackboardKeyType_String.BlackboardKeyType.Object
	FString StringValue;//[Offset: 0x30, Size: 0x10] 0x7873ffd500

--------------------------------
Class: BTComposite_Sequence.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x60, Size: 0x28] 0x7873ffd000

--------------------------------
Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0x10] 0x78739bab00
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8] 0x7873a64f80
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x8] 0x78739baba0
	byte SelectedKeyID;//[Offset: 0x20, Size: 0x1] 0x7873a65000
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1] 0x7873a65080

--------------------------------
Class: BTDecorator_CheckGameplayTagsOnActor.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector ActorToCheck;//[Offset: 0x60, Size: 0x28] 0x7873ffdc00
	enum TagsToMatch;//[Offset: 0x88, Size: 0x1] 0x7873fe2c20
	GameplayTagContainer GameplayTags;//[Offset: 0x90, Size: 0x20] 0x7873ffdd00
	FString CachedDescription;//[Offset: 0xb0, Size: 0x10] 0x7873ffdd80

--------------------------------
Class: BTDecorator_ConditionalLoop.BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int IntValue;//[Offset: 0x88, Size: 0x4] 0x7873ffcd00
	float FloatValue;//[Offset: 0x8c, Size: 0x4] 0x7873ffcd80
	FString StringValue;//[Offset: 0x90, Size: 0x10] 0x7873ffce00
	FString CachedDescription;//[Offset: 0xa0, Size: 0x10] 0x7873ffce80
	byte OperationType;//[Offset: 0xb0, Size: 0x1] 0x7873ffcf00
	byte NotifyObserver;//[Offset: 0xb1, Size: 0x1] 0x7873ffcf80

--------------------------------
Class: BlackboardKeyType_Vector.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Object.BlackboardKeyType.Object
	ClassPtrProperty BaseClass;//[Size: 0x8] 0x7873fe2ea0

--------------------------------
Class: BTDecorator_DoesPathExist.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28] 0x7873fff700
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28] 0x7873fff780
	bool bUseSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7873ffd700
	byte PathQueryType;//[Offset: 0xb1, Size: 0x1] 0x7873ffd780
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb8, Size: 0x8] 0x7873fe2b80

--------------------------------
Class: BTDecorator_IsAtLocation.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x88, Size: 0x4] 0x7873fff400
	AIDataProviderFloatValue ParametrizedAcceptableRadius;//[Offset: 0x90, Size: 0x38] 0x7873fff480
	enum GeometricDistanceType;//[Offset: 0xc8, Size: 0x1] 0x7873fe2ae0
	bool bUseParametrizedRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc9, Size: 0x1] 0x7873fff580
	bool bUseNavAgentGoalLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc9, Size: 0x1] 0x7873fff600
	bool bPathFindingBasedTest;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc9, Size: 0x1] 0x7873fff680

--------------------------------
Class: BTDecorator_IsBBEntryOfClass.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	class Object* TestClass;//[Offset: 0x88, Size: 0x8] 0x7873fe2a40

--------------------------------
Class: BTDecorator_SetTagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8] 0x7873ffee80
	float CooldownDuration;//[Offset: 0x64, Size: 0x4] 0x7873ffef00
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7873ffef80

--------------------------------
Class: BTFunctionLibrary.BlueprintFunctionLibrary.Object
	static void StopUsingExternalEvent(BTNode* NodeOwner);// 0x1140e564 0x7873fd9a80
	static void StartUsingExternalEvent(BTNode* NodeOwner, Actor* OwningActor);// 0x1140e5fc 0x7873fd9b60
	static void SetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key, Vector Value);// 0x1140ea40 0x7873fd9c40
	static void SetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key, FString Value);// 0x1140ece4 0x7873fd9d20
	static void SetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key, Rotator Value);// 0x1140e7e4 0x7873fd9e00
	static void SetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key, Object* Value);// 0x1140f540 0x7873fd9ee0
	static void SetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key, FName Value);// 0x1140eb94 0x7873fd9fc0
	static void SetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key, int Value);// 0x1140f148 0x7873fda0a0
	static void SetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key, float Value);// 0x1140eff4 0x7873fda180
	static void SetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key, byte Value);// 0x1140f29c 0x7873fda260
	static void SetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key, class Object Value);// 0x1140f3f0 0x7873fda340
	static void SetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key, bool Value);// 0x1140ee98 0x7873fda420
	static BlackboardComponent* GetOwnersBlackboard(BTNode* NodeOwner);// 0x11410390 0x7873fda500
	static BehaviorTreeComponent* GetOwnerComponent(BTNode* NodeOwner);// 0x114102e8 0x7873fda5e0
	static Vector GetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x1140f7ac 0x7873fda6c0
	static FString GetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x1140f9e0 0x7873fda7a0
	static Rotator GetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x1140f690 0x7873fda880
	static Object* GetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x114101d0 0x7873fda960
	static FName GetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x1140f8c8 0x7873fdaa40
	static int GetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x1140fd70 0x7873fdab20
	static float GetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x1140fc58 0x7873fdac00
	static byte GetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x1140fe88 0x7873fdace0
	static class Object GetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x1140ffa0 0x7873fd7400
	static bool GetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x1140fb3c 0x7873fd74e0
	static Actor* GetBlackboardValueAsActor(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x114100b8 0x7873fd75c0
	static void ClearBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x1140e938 0x7873fd76a0
	static void ClearBlackboardValue(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x1140e6dc 0x7873fd7780

--------------------------------
Class: BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x68, Size: 0x8] 0x7874002e80
	Actor* ActorOwner;//[Offset: 0x70, Size: 0x8] 0x7874002f00
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x7874002f80
	bool bShowEventDetails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1] 0x7874003000
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0xb8f1ab4 0x7873fd92a0
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0xb8f1ab4 0x7873fd9380
	void ReceiveSearchStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xb8f1ab4 0x7873fd9460
	void ReceiveSearchStart(Actor* OwnerActor);// 0xb8f1ab4 0x7873fd9540
	void ReceiveDeactivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xb8f1ab4 0x7873fd9620
	void ReceiveDeactivation(Actor* OwnerActor);// 0xb8f1ab4 0x7873fd9700
	void ReceiveActivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xb8f1ab4 0x7873fd97e0
	void ReceiveActivation(Actor* OwnerActor);// 0xb8f1ab4 0x7873fd98c0
	bool IsServiceActive();// 0x114121d0 0x7873fd99a0

--------------------------------
Class: BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x70, Size: 0x8] 0x7874004200
	Actor* ActorOwner;//[Offset: 0x78, Size: 0x8] 0x7874002180
	IntervalCountdown TickInterval;//[Offset: 0x80, Size: 0x8] 0x7874002200
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7874002280
	void SetFinishOnMessageWithId(FName MessageName, int RequestID);// 0x11413b20 0x7873fdc1e0
	void SetFinishOnMessage(FName MessageName);// 0x11413c14 0x7873fdc2c0
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0xb8f1ab4 0x7873fdc3a0
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0xb8f1ab4 0x7873fdc480
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xb8f1ab4 0x7873fdc560
	void ReceiveExecute(Actor* OwnerActor);// 0xb8f1ab4 0x7873fdc640
	void ReceiveAbortAI(AIController* OwnerController, Pawn* ControlledPawn);// 0xb8f1ab4 0x7873fdc720
	void ReceiveAbort(Actor* OwnerActor);// 0xb8f1ab4 0x7873fdc800
	bool IsTaskExecuting();// 0x11413ae8 0x7873fdc8e0
	bool IsTaskAborting();// 0x11413ab0 0x7873fdc9c0
	void FinishExecute(bool bSuccess);// 0x11413cd0 0x7873fd90e0
	void FinishAbort();// 0x11413cbc 0x7873fd91c0

--------------------------------
Class: IntervalCountdown
	float Interval;//[Offset: 0x0, Size: 0x4] 0x7873a65200

--------------------------------
Class: BTTask_MakeNoise.BTTaskNode.BTNode.Object
	float Loudnes;//[Offset: 0x6c, Size: 0x4] 0x7874004080

--------------------------------
Class: BTTask_PlaySound.BTTaskNode.BTNode.Object
	SoundCue* SoundToPlay;//[Offset: 0x70, Size: 0x8] 0x7874003680

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bPrimeOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1] 0x7873f99180
	SoundNode* FirstNode;//[Offset: 0x178, Size: 0x8] 0x7873f99200
	float VolumeMultiplier;//[Offset: 0x180, Size: 0x4] 0x7873f99280
	float PitchMultiplier;//[Offset: 0x184, Size: 0x4] 0x7873f99300
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x188, Size: 0x3c8] 0x7873f99380
	float SubtitlePriority;//[Offset: 0x550, Size: 0x4] 0x7873f99400
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x558, Size: 0x1] 0x7873f99480
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x558, Size: 0x1] 0x7873f97400
	int CookedQualityIndex;//[Offset: 0x55c, Size: 0x4] 0x7873f97480
	bool bHasPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x560, Size: 0x1] 0x7873f97500

--------------------------------
Class: BTTask_RunBehavior.BTTaskNode.BTNode.Object
	BehaviorTree* BehaviorAsset;//[Offset: 0x70, Size: 0x8] 0x7874003500

--------------------------------
Class: BTTask_WaitBlackboardTime.BTTask_Wait.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x78, Size: 0x28] 0x7874004d80

--------------------------------
Class: BTTask_Wait.BTTaskNode.BTNode.Object
	float WaitTime;//[Offset: 0x6c, Size: 0x4] 0x7874004e00
	float RandomDeviation;//[Offset: 0x70, Size: 0x4] 0x7874004e80

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	Vector CrowdAgentMoveDirection;//[Offset: 0x2e8, Size: 0x18] 0x7874004800
	void SuspendCrowdSteering(bool bSuspend);// 0x114184b0 0x7873fdbd80

--------------------------------
Class: EnvQueryContext_Item.EnvQueryContext.Object

--------------------------------
Class: EnvQueryGenerator_BlueprintBase.EnvQueryGenerator.EnvQueryNode.Object
	FText GeneratorsActionDescription;//[Offset: 0x50, Size: 0x18] 0x7874005700
	class EnvQueryContext* Context;//[Offset: 0x68, Size: 0x8] 0x7873fe48e0
	class EnvQueryItemType* GeneratedItemType;//[Offset: 0x70, Size: 0x8] 0x7873fe4980
	Object* GetQuerier();// 0x1141c7e0 0x7873fdb680
	void DoItemGeneration(out const Vector[] ContextLocations);// 0xb8f1ab4 0x7873fdb760
	void AddGeneratedVector(Vector GeneratedVector);// 0x1141c8bc 0x7873fdb840
	void AddGeneratedActor(Actor* GeneratedActor);// 0x1141c814 0x7873fdb920

--------------------------------
Class: EnvQueryGenerator_Cone.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue AlignedPointsDistance;//[Offset: 0x88, Size: 0x38] 0x7874007380
	AIDataProviderFloatValue ConeDegrees;//[Offset: 0xc0, Size: 0x38] 0x7874005300
	AIDataProviderFloatValue AngleStep;//[Offset: 0xf8, Size: 0x38] 0x7874005380
	AIDataProviderFloatValue Range;//[Offset: 0x130, Size: 0x38] 0x7874005400
	class EnvQueryContext* CenterActor;//[Offset: 0x168, Size: 0x8] 0x7873fe4700
	bool bIncludeContextLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1] 0x7874005480

--------------------------------
Class: EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x50, Size: 0x38] 0x7874005500

--------------------------------
Class: EnvTraceData
	int VersionNum;//[Offset: 0x0, Size: 0x4] 0x7873a65480
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x8, Size: 0x8] 0x78739ba560
	float ProjectDown;//[Offset: 0x10, Size: 0x4] 0x7873a65500
	float ProjectUp;//[Offset: 0x14, Size: 0x4] 0x7873a65580
	float ExtentX;//[Offset: 0x18, Size: 0x4] 0x7873a65600
	float ExtentY;//[Offset: 0x1c, Size: 0x4] 0x7873a65680
	float ExtentZ;//[Offset: 0x20, Size: 0x4] 0x7873a65700
	float PostProjectionVerticalOffset;//[Offset: 0x24, Size: 0x4] 0x7873a65780
	byte TraceChannel;//[Offset: 0x28, Size: 0x1] 0x7873a65800
	byte SerializedChannel;//[Offset: 0x29, Size: 0x1] 0x7873a65880
	FName TraceProfileName;//[Offset: 0x2c, Size: 0x8] 0x7873a65900
	byte TraceShape;//[Offset: 0x34, Size: 0x1] 0x7873a65980
	byte TraceMode;//[Offset: 0x35, Size: 0x1] 0x7873a65a00
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36, Size: 0x1] 0x7873a65a80
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x36, Size: 0x1] 0x7873a65b00
	bool bCanTraceOnNavMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x36, Size: 0x1] 0x7873a65b80
	bool bCanTraceOnGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x36, Size: 0x1] 0x7873a65c00
	bool bCanDisableTrace;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x36, Size: 0x1] 0x7873a65c80
	bool bCanProjectDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x36, Size: 0x1] 0x7873a65d00

--------------------------------
Class: EnvQueryGenerator_OnCircle.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue CircleRadius;//[Offset: 0x88, Size: 0x38] 0x7874006a00
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xc0, Size: 0x38] 0x7874006a80
	AIDataProviderIntValue NumberOfPoints;//[Offset: 0xf8, Size: 0x38] 0x7874006b00
	enum PointOnCircleSpacingMethod;//[Offset: 0x130, Size: 0x1] 0x7873fe4480
	EnvDirection ArcDirection;//[Offset: 0x138, Size: 0x20] 0x7874006c00
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x158, Size: 0x38] 0x7874006c80
	float AngleRadians;//[Offset: 0x190, Size: 0x4] 0x7874006d00
	class EnvQueryContext* CircleCenter;//[Offset: 0x198, Size: 0x8] 0x7873fe4520
	bool bIgnoreAnyContextActorsWhenGeneratingCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1] 0x7874006d80
	AIDataProviderFloatValue CircleCenterZOffset;//[Offset: 0x1a8, Size: 0x38] 0x7874006e00
	EnvTraceData TraceData;//[Offset: 0x1e0, Size: 0x38] 0x7874006e80
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1] 0x7874006f00

--------------------------------
Class: AIDataProviderIntValue.AIDataProviderTypedValue.AIDataProviderValue
	int DefaultValue;//[Offset: 0x30, Size: 0x4] 0x7873a63f80

--------------------------------
Class: EnvDirection
	class EnvQueryContext* LineFrom;//[Offset: 0x0, Size: 0x8] 0x78739ba600
	class EnvQueryContext* LineTo;//[Offset: 0x8, Size: 0x8] 0x78739ba6a0
	class EnvQueryContext* Rotation;//[Offset: 0x10, Size: 0x8] 0x78739ba740
	byte DirMode;//[Offset: 0x18, Size: 0x1] 0x7873a65d80

--------------------------------
Class: EnvQueryGenerator_PerceivedActors.EnvQueryGenerator.EnvQueryNode.Object
	class Actor* AllowedActorClass;//[Offset: 0x50, Size: 0x8] 0x7873fe4160
	AIDataProviderFloatValue SearchRadius;//[Offset: 0x58, Size: 0x38] 0x7874006700
	class EnvQueryContext* ListenerContext;//[Offset: 0x90, Size: 0x8] 0x7873fe4200
	class AISense* SenseToUse;//[Offset: 0x98, Size: 0x8] 0x7873fe42a0
	bool bIncludeKnownActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x7874006780

--------------------------------
Class: EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Direction.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest_Dot.EnvQueryTest.EnvQueryNode.Object
	EnvDirection LineA;//[Offset: 0x1f8, Size: 0x20] 0x7874009480
	EnvDirection LineB;//[Offset: 0x218, Size: 0x20] 0x7874007400
	enum TestMode;//[Offset: 0x238, Size: 0x1] 0x7873fe65a0
	bool bAbsoluteValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1] 0x7874007500

--------------------------------
Class: EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x1f1, Size: 0x1] 0x7874009000
	class EnvQueryContext* Context;//[Offset: 0x1f8, Size: 0x8] 0x7873fe63c0
	AIDataProviderBoolValue PathFromContext;//[Offset: 0x200, Size: 0x38] 0x7874009080
	AIDataProviderBoolValue SkipUnreachable;//[Offset: 0x238, Size: 0x38] 0x7874009100
	class NavigationQueryFilter* FilterClass;//[Offset: 0x270, Size: 0x8] 0x7873fe6460

--------------------------------
Class: EnvQueryTest_Random.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: EnvQueryTypes.Object

--------------------------------
Class: EQSTestingPawn.Character.Pawn.Actor.Object
	EnvQuery* QueryTemplate;//[Offset: 0x610, Size: 0x8] 0x7874008600
	EnvNamedValue[] QueryParams;//[Offset: 0x618, Size: 0x10] 0x7873fe6000
	AIDynamicParam[] QueryConfig;//[Offset: 0x628, Size: 0x10] 0x7873fe60a0
	float TimeLimitPerStep;//[Offset: 0x638, Size: 0x4] 0x7874008780
	int StepToDebugDraw;//[Offset: 0x63c, Size: 0x4] 0x7874008800
	enum HighlightMode;//[Offset: 0x640, Size: 0x1] 0x7873fe6140
	bool bDrawLabels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x641, Size: 0x1] 0x7874008900
	bool bDrawFailedItems;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x641, Size: 0x1] 0x7874008980
	bool bReRunQueryOnlyOnFinishedMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x641, Size: 0x1] 0x7874008a00
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x641, Size: 0x1] 0x7874008a80
	bool bTickDuringGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x641, Size: 0x1] 0x7874008b00
	byte QueryingMode;//[Offset: 0x642, Size: 0x1] 0x7874008b80
	NavAgentProperties NavAgentProperties;//[Offset: 0x648, Size: 0x30] 0x7874008c00

--------------------------------
Class: EnvNamedValue
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7873a65e00
	enum ParamType;//[Offset: 0x8, Size: 0x1] 0x78739ba7e0
	float Value;//[Offset: 0xc, Size: 0x4] 0x7873a65f00

--------------------------------
Class: AIDynamicParam
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7873a66e00
	enum ParamType;//[Offset: 0x8, Size: 0x1] 0x78739bcd60
	float Value;//[Offset: 0xc, Size: 0x4] 0x7873a66f00
	BlackboardKeySelector BBKey;//[Offset: 0x10, Size: 0x28] 0x7873a66f80

--------------------------------
Class: PathFollowingManager.Object

--------------------------------
Class: PawnAction_Move.PawnAction.Object
	Actor* GoalActor;//[Offset: 0x90, Size: 0x8] 0x787400b880
	Vector GoalLocation;//[Offset: 0x98, Size: 0x18] 0x787400b900
	float AcceptableRadius;//[Offset: 0xb0, Size: 0x4] 0x787400b980
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb8, Size: 0x8] 0x7873fe5b00
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x787400ba00
	bool bFinishOnOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x787400ba80
	bool bUsePathfinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x787400bb00
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x787400bb80
	bool bProjectGoalToNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1] 0x787400bc00
	bool bUpdatePathToGoal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1] 0x787400bc80
	bool bAbortChildActionOnPathChange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc0, Size: 0x1] 0x787400bd00

--------------------------------
Class: PawnAction_Wait.PawnAction.Object
	float TimeToWait;//[Offset: 0x90, Size: 0x4] 0x787400d600

--------------------------------
Class: ScreenShotComparisonSettings.Object
	bool bUseConfidentialPlatformPathsForSavedResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x787400d500
	ScreenshotFallbackEntry[] ScreenshotFallbackPlatforms;//[Offset: 0x30, Size: 0x10] 0x7873fe59c0

--------------------------------
Class: ScreenshotFallbackEntry
	FString Parent;//[Offset: 0x0, Size: 0x10] 0x7873a67b00
	FString Child;//[Offset: 0x10, Size: 0x10] 0x7873a67b80

--------------------------------
Class: AutomationBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	static AutomationEditorTask* TakeHighResScreenshot(int ResX, int ResY, FString Filename, CameraActor* Camera, bool bMaskEnabled, bool bCaptureHDR, enum ComparisonTolerance, FString ComparisonNotes, float Delay);// 0x1149432c 0x7873fdf9e0
	static void TakeAutomationScreenshotOfUI(Object* WorldContextObject, LatentActionInfo LatentInfo, FString Name, out const AutomationScreenshotOptions Options);// 0x11494d78 0x7873fdfac0
	static void TakeAutomationScreenshotAtCamera(Object* WorldContextObject, LatentActionInfo LatentInfo, CameraActor* Camera, FString NameOverride, FString Notes, out const AutomationScreenshotOptions Options);// 0x11494f48 0x7873fdfba0
	static void TakeAutomationScreenshot(Object* WorldContextObject, LatentActionInfo LatentInfo, FString Name, FString Notes, out const AutomationScreenshotOptions Options);// 0x114951bc 0x7873fdfc80
	static void SetTestTelemetryStorage(FString StorageName);// 0x11493d58 0x7873fdfd60
	static void SetScalabilityQualityToLow(Object* WorldContextObject);// 0x11493798 0x7873fdfe40
	static void SetScalabilityQualityToEpic(Object* WorldContextObject);// 0x11493830 0x7873fdff20
	static void SetScalabilityQualityLevelRelativeToMax(Object* WorldContextObject, int Value);// 0x114938c8 0x7873fdcaa0
	static float GetStatIncMax(FName StatName);// 0x11494a68 0x7873fdcb80
	static float GetStatIncAverage(FName StatName);// 0x11494b10 0x7873fdcc60
	static float GetStatExcMax(FName StatName);// 0x11494918 0x7873fdcd40
	static float GetStatExcAverage(FName StatName);// 0x114949c0 0x7873fdce20
	static float GetStatCallCount(FName StatName);// 0x11494870 0x7873fdcf00
	static AutomationScreenshotOptions GetDefaultScreenshotOptionsForRendering(enum Tolerance, float Delay);// 0x11493b40 0x7873fdcfe0
	static AutomationScreenshotOptions GetDefaultScreenshotOptionsForGameplay(enum Tolerance, float Delay);// 0x11493c4c 0x7873fdd0c0
	static void FinishLoadingBeforeScreenshot();// 0x114953e4 0x7873fdd1a0
	static void EnableStatGroup(Object* WorldContextObject, FName GroupName);// 0x11494c98 0x7873fdd280
	static void DisableStatGroup(Object* WorldContextObject, FName GroupName);// 0x11494bb8 0x7873fdd360
	static bool CompareImageAgainstReference(FString ImageFilePath, FString ComparisonName, enum ComparisonTolerance, FString ComparisonNotes, Object* WorldContextObject);// 0x11494048 0x7873fdd440
	static void AutomationWaitForLoading(Object* WorldContextObject, LatentActionInfo LatentInfo, AutomationWaitForLoadingOptions Options);// 0x114946fc 0x7873fdd520
	static bool AreAutomatedTestsRunning();// 0x11494838 0x7873fdd600
	static void AddTestTelemetryData(FString DataPoint, float Measurement, FString Context);// 0x11493e5c 0x7873fdd6e0
	static void AddExpectedLogError(FString ExpectedPatternString, int Occurrences, bool ExactMatch);// 0x114939ac 0x7873fdd7c0

--------------------------------
Class: AutomationEditorTask.Object
	bool IsValidTask();// 0x11493138 0x7873fdd8a0
	bool IsTaskDone();// 0x11493170 0x7873fdd980

--------------------------------
Class: AutomationScreenshotOptions
	Vector2D Resolution;//[Offset: 0x0, Size: 0x10] 0x7873a69f00
	float Delay;//[Offset: 0x10, Size: 0x4] 0x7873a69f80
	bool bOverride_OverrideTimeTo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x7873a6a000
	float OverrideTimeTo;//[Offset: 0x18, Size: 0x4] 0x7873a6a080
	bool bDisableNoisyRenderingFeatures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7873a6a100
	bool bDisableTonemapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1] 0x7873a6a180
	AutomationViewSettings* ViewSettings;//[Offset: 0x20, Size: 0x8] 0x7873a6a200
	FName VisualizeBuffer;//[Offset: 0x28, Size: 0x8] 0x7873a6a280
	enum Tolerance;//[Offset: 0x30, Size: 0x1] 0x78739bc720
	ComparisonToleranceAmount ToleranceAmount;//[Offset: 0x31, Size: 0x6] 0x7873a6a380
	float MaximumLocalError;//[Offset: 0x38, Size: 0x4] 0x7873a6a400
	float MaximumGlobalError;//[Offset: 0x3c, Size: 0x4] 0x7873a6a480
	bool bIgnoreAntiAliasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7873a6a500
	bool bIgnoreColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x7873a68480

--------------------------------
Class: AutomationViewSettings.DataAsset.Object
	bool AntiAliasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x787400eb00
	bool MotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x787400eb80
	bool TemporalAA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1] 0x787400ec00
	bool ScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1] 0x787400ec80
	bool ScreenSpaceAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x787400ed00
	bool DistanceFieldAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x787400ed80
	bool ContactShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1] 0x787400ee00
	bool EyeAdaptation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1] 0x787400ee80
	bool Bloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x787400ef00

--------------------------------
Class: ComparisonToleranceAmount
	byte Red;//[Offset: 0x0, Size: 0x1] 0x7873a68500
	byte Green;//[Offset: 0x1, Size: 0x1] 0x7873a68580
	byte Blue;//[Offset: 0x2, Size: 0x1] 0x7873a68600
	byte Alpha;//[Offset: 0x3, Size: 0x1] 0x7873a68680
	byte MinBrightness;//[Offset: 0x4, Size: 0x1] 0x7873a68700
	byte MaxBrightness;//[Offset: 0x5, Size: 0x1] 0x7873a68780

--------------------------------
Class: AutomationWaitForLoadingOptions
	bool WaitForReplicationToSettle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873a68800

--------------------------------
Class: FunctionalTest.Actor.Object
	FString TestLabel;//[Offset: 0x288, Size: 0x10] 0x7874023200
	BillboardComponent* SpriteComponent;//[Offset: 0x298, Size: 0x8] 0x7874023280
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 0x1] 0x7874023300
	enum LogErrorHandling;//[Offset: 0x2a1, Size: 0x1] 0x7873fe77c0
	enum LogWarningHandling;//[Offset: 0x2a2, Size: 0x1] 0x7873fe7860
	FString Author;//[Offset: 0x2a8, Size: 0x10] 0x7874023480
	FString Description;//[Offset: 0x2b8, Size: 0x10] 0x7874023500
	Actor* ObservationPoint;//[Offset: 0x2c8, Size: 0x8] 0x7874023580
	RandomStream RandomNumbersStream;//[Offset: 0x2d0, Size: 0x8] 0x7874023600
	enum result;//[Offset: 0x2d8, Size: 0x1] 0x7873fe7900
	float PreparationTimeLimit;//[Offset: 0x2dc, Size: 0x4] 0x7874023700
	float TimeLimit;//[Offset: 0x2e0, Size: 0x4] 0x7874023780
	FText TimesUpMessage;//[Offset: 0x2e8, Size: 0x18] 0x7874023800
	enum TimesUpResult;//[Offset: 0x300, Size: 0x1] 0x7873fe79a0
	delegate OnTestPrepare;//[Offset: 0x308, Size: 0x10] 0x7874023900
	delegate OnTestStart;//[Offset: 0x318, Size: 0x10] 0x7874023980
	delegate OnTestFinished;//[Offset: 0x328, Size: 0x10] 0x7874023a00
	Actor*[] AutoDestroyActors;//[Offset: 0x338, Size: 0x10] 0x7873fe7a40
	bool bIsRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1] 0x7874023b00
	float TotalTime;//[Offset: 0x398, Size: 0x4] 0x7874023b80
	void SetTimeLimit(float NewTimeLimit, enum ResultWhenTimeRunsOut);// 0x11499124 0x7874030e80
	void RegisterAutoDestroyActor(Actor* ActorToAutoDestroy);// 0x11498f98 0x7874030f60
	void ReceiveStartTest();// 0xb8f1ab4 0x7874031040
	void ReceivePrepareTest();// 0xb8f1ab4 0x7874031120
	bool OnWantsReRunCheck();// 0xb8f1ab4 0x7874031200
	FString OnAdditionalTestFinishedMessageRequest(enum TestResult);// 0xb8f1ab4 0x78740312e0
	void LogMessage(FString Message);// 0x11499220 0x78740313c0
	bool IsRunning();// 0x11498f60 0x78740314a0
	bool IsReady();// 0x11498ee8 0x7874031580
	bool IsEnabled();// 0x11498f28 0x7874031660
	FName GetCurrentRerunReason();// 0x11499048 0x7874031740
	void FinishTest(enum TestResult, FString Message);// 0x114992dc 0x7874031820
	Actor*[] DebugGatherRelevantActors();// 0xb8f1ab4 0x7874031900
	bool AssertValue_Int(int Actual, enum ShouldBe, int Expected, FString What, const Object* ContextObject);// 0x1149b7b8 0x78740319e0
	bool AssertValue_Float(float Actual, enum ShouldBe, float Expected, FString What, const Object* ContextObject);// 0x1149b5c0 0x7874031ac0
	bool AssertValue_Double(double Actual, enum ShouldBe, double Expected, FString What, const Object* ContextObject);// 0x1149b3d0 0x7874031ba0
	bool AssertValue_DateTime(DateTime Actual, enum ShouldBe, DateTime Expected, FString What, const Object* ContextObject);// 0x1149b1d8 0x7874031c80
	bool AssertTrue(bool Condition, FString Message, const Object* ContextObject);// 0x1149bc74 0x7873fde780
	bool AssertNotEqual_Vector(const Vector Actual, const Vector NotExpected, FString What, const Object* ContextObject);// 0x11499bb4 0x7873fde860
	bool AssertNotEqual_Transform(out const Transform Actual, out const Transform NotExpected, FString What, const Object* ContextObject);// 0x1149a2ec 0x7873fde940
	bool AssertNotEqual_String(const FString Actual, const FString NotExpected, FString What, const Object* ContextObject);// 0x114996fc 0x7873fdea20
	bool AssertNotEqual_Rotator(const Rotator Actual, const Rotator NotExpected, FString What, const Object* ContextObject);// 0x11499f50 0x7873fdeb00
	bool AssertIsValid(Object* Object, FString Message, const Object* ContextObject);// 0x1149b9b0 0x7873fdebe0
	bool AssertFalse(bool Condition, FString Message, const Object* ContextObject);// 0x1149bb10 0x7873fdecc0
	bool AssertEqual_Vector(const Vector Actual, const Vector Expected, FString What, const float Tolerance, const Object* ContextObject);// 0x11499d5c 0x7873fdeda0
	bool AssertEqual_Transform(out const Transform Actual, out const Transform Expected, FString What, float Tolerance, const Object* ContextObject);// 0x1149af80 0x7873fdee80
	bool AssertEqual_TraceQueryResults(const TraceQueryTestResults* Actual, const TraceQueryTestResults* Expected, FString What, const Object* ContextObject);// 0x11499554 0x7873fdef60
	bool AssertEqual_String(const FString Actual, const FString Expected, FString What, const Object* ContextObject);// 0x11499958 0x7873fdf040
	bool AssertEqual_Rotator(const Rotator Actual, const Rotator Expected, FString What, const float Tolerance, const Object* ContextObject);// 0x1149a0f8 0x7873fdf120
	bool AssertEqual_Object(Object* Actual, Object* Expected, FString What, const Object* ContextObject);// 0x1149a4fc 0x7873fdf200
	bool AssertEqual_Name(const FName Actual, const FName Expected, FString What, const Object* ContextObject);// 0x1149a6a4 0x7873fdf2e0
	bool AssertEqual_Int(const int Actual, const int Expected, FString What, const Object* ContextObject);// 0x1149a84c 0x7873fdf3c0
	bool AssertEqual_Float(const float Actual, const float Expected, FString What, const float Tolerance, const Object* ContextObject);// 0x1149ad8c 0x7873fdf4a0
	bool AssertEqual_Double(const double Actual, const double Expected, FString What, const double Tolerance, const Object* ContextObject);// 0x1149aba0 0x7873fdf580
	bool AssertEqual_Bool(const bool Actual, const bool Expected, FString What, const Object* ContextObject);// 0x1149a9f4 0x7873fdf660
	void AddWarning(FString Message);// 0x114994a0 0x7873fdf740
	void AddRerun(FName Reason);// 0x1149907c 0x7873fdf820
	void AddError(FString Message);// 0x114993e4 0x7873fdf900

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4] 0x788a4db580
	int Seed;//[Offset: 0x4, Size: 0x4] 0x788a4db500

--------------------------------
Class: DateTime

--------------------------------
Class: TraceQueryTestResults.Object
	TraceQueryTestResultsInner ChannelResults;//[Offset: 0x28, Size: 0x4c0] 0x7874026e80
	TraceQueryTestResultsInner ObjectResults;//[Offset: 0x4e8, Size: 0x4c0] 0x7874026f00
	TraceQueryTestResultsInner ProfileResults;//[Offset: 0x9a8, Size: 0x4c0] 0x7874026f80
	TraceChannelTestBatchOptions BatchOptions;//[Offset: 0xe68, Size: 0x7] 0x7874027000
	FString ToString();// 0x114a3b10 0x78740330a0

--------------------------------
Class: TraceQueryTestResultsInner
	TraceQueryTestResultsInnerMost LineResults;//[Offset: 0x0, Size: 0x130] 0x7873a6b100
	TraceQueryTestResultsInnerMost SphereResults;//[Offset: 0x130, Size: 0x130] 0x7873a6b180
	TraceQueryTestResultsInnerMost CapsuleResults;//[Offset: 0x260, Size: 0x130] 0x7873a6b200
	TraceQueryTestResultsInnerMost BoxResults;//[Offset: 0x390, Size: 0x130] 0x7873a6b280

--------------------------------
Class: TraceQueryTestResultsInnerMost
	HitResult SingleHit;//[Offset: 0x0, Size: 0xe8] 0x7873a6b300
	TraceQueryTestNames SingleNames;//[Offset: 0xe8, Size: 0x18] 0x7873a6b380
	bool bSingleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1] 0x7873a6b400
	HitResult[] MultiHits;//[Offset: 0x108, Size: 0x10] 0x78739bc400
	TraceQueryTestNames[] MultiNames;//[Offset: 0x118, Size: 0x10] 0x78739bc4a0
	bool bMultiResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x7873a6b580

--------------------------------
Class: TraceQueryTestNames
	FName ComponentName;//[Offset: 0x0, Size: 0x8] 0x7873a69500
	FName PhysicalMaterialName;//[Offset: 0x8, Size: 0x8] 0x7873a69580
	FName ActorName;//[Offset: 0x10, Size: 0x8] 0x7873a69600

--------------------------------
Class: TraceChannelTestBatchOptions
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7873a69680
	bool bSphereTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7873a69700
	bool bCapsuleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7873a69780
	bool bBoxTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7873a69800
	bool bChannelTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7873a69880
	bool bObjectsTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7873a69900
	bool bProfileTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x7873a69980

--------------------------------
Class: AutomationPerformaceHelper.Object
	void WriteLogFile(FString CaptureDir, FString CaptureExtension);// 0x11497e54 0x78740337a0
	void TriggerGPUTraceIfRecordFallsBelowBudget();// 0x11497d10 0x7874033880
	void Tick(float DeltaSeconds);// 0x11498308 0x7874033960
	void StopCPUProfiling();// 0x11497d24 0x7874030080
	void StartCPUProfiling();// 0x11497d38 0x7874030160
	void Sample(float DeltaSeconds);// 0x11498260 0x7874030240
	void OnBeginTests();// 0x11497e08 0x7874030320
	void OnAllTestsComplete();// 0x11497df4 0x7874030400
	bool IsRecording();// 0x11497e1c 0x78740304e0
	bool IsCurrentRecordWithinRenderThreadBudget();// 0x11497d4c 0x78740305c0
	bool IsCurrentRecordWithinGPUBudget();// 0x11497dbc 0x78740306a0
	bool IsCurrentRecordWithinGameThreadBudget();// 0x11497d84 0x7874030780
	void EndStatsFile();// 0x11497c48 0x7874030860
	void EndRecordingBaseline();// 0x11498150 0x7874030940
	void EndRecording();// 0x11497f60 0x7874030a20
	void BeginStatsFile(FString RecordName);// 0x11497c5c 0x7874030b00
	void BeginRecordingBaseline(FString RecordName);// 0x11498164 0x7874030be0
	void BeginRecording(FString RecordName, float InGPUBudget, float InRenderThreadBudget, float InGameThreadBudget);// 0x11497f74 0x7874030cc0

--------------------------------
Class: PhasedAutomationActorBase.Actor.Object
	void OnFunctionalTestingComplete();// 0xb8f1ab4 0x7874033500
	void OnFunctionalTestingBegin();// 0xb8f1ab4 0x78740335e0

--------------------------------
Class: ScreenshotFunctionalTestBase.FunctionalTest.Actor.Object
	FString Notes;//[Offset: 0x3b0, Size: 0x10] 0x7874025500
	CameraComponent* ScreenshotCamera;//[Offset: 0x3c0, Size: 0x8] 0x7874025580
	AutomationScreenshotOptions ScreenshotOptions;//[Offset: 0x3c8, Size: 0x48] 0x7874025600

--------------------------------
Class: FunctionalUIScreenshotTest.ScreenshotFunctionalTestBase.FunctionalTest.Actor.Object
	class UserWidget* WidgetClass;//[Offset: 0x430, Size: 0x8] 0x7873fe7220
	UserWidget* SpawnedWidget;//[Offset: 0x438, Size: 0x8] 0x7874025300
	enum WidgetLocation;//[Offset: 0x440, Size: 0x4] 0x7873fe72c0
	TextureRenderTarget2D* ScreenshotRT;//[Offset: 0x448, Size: 0x8] 0x7874025400
	bool bHideDebugCanvas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1] 0x7874025480

--------------------------------
Class: GroundTruthData.Object
	bool bResetGroundTruth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7874027180
	Object* ObjectData;//[Offset: 0x30, Size: 0x8] 0x7874027200
	void SaveObject(Object* GroundTruth);// 0x114a2774 0x7874033180
	Object* LoadObject();// 0x114a2740 0x7874033260
	bool CanModify();// 0x114a2708 0x7874033340

--------------------------------
Class: AndroidRuntimeSettings.Object
	FString PackageName;//[Offset: 0x28, Size: 0x10] 0x7874029900
	int StoreVersion;//[Offset: 0x38, Size: 0x4] 0x7874029980
	int StoreVersionOffsetArmV7;//[Offset: 0x3c, Size: 0x4] 0x7874029a00
	int StoreVersionOffsetArm64;//[Offset: 0x40, Size: 0x4] 0x7874029a80
	int StoreVersionOffsetX8664;//[Offset: 0x44, Size: 0x4] 0x7874029b00
	FString ApplicationDisplayName;//[Offset: 0x48, Size: 0x10] 0x7874029b80
	FString VersionDisplayName;//[Offset: 0x58, Size: 0x10] 0x7874029c00
	int MinSDKVersion;//[Offset: 0x68, Size: 0x4] 0x7874029c80
	int TargetSDKVersion;//[Offset: 0x6c, Size: 0x4] 0x7874029d00
	byte InstallLocation;//[Offset: 0x70, Size: 0x1] 0x7874029d80
	bool bEnableGradle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x7874029e00
	bool bEnableLint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1] 0x7874029e80
	bool bPackageDataInsideApk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1] 0x7874029f00
	bool bCreateAllPlatformsInstall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x7874029f80
	bool bDisableVerifyOBBOnStartUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1] 0x787402a000
	bool bForceSmallOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1] 0x787402a080
	bool bAllowLargeOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 0x1] 0x787402a100
	bool bAllowPatchOBBFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x787402a180
	bool bAllowOverflowOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x787402a200
	bool bUseExternalFilesDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x787402a280
	bool bPublicLogFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1] 0x787402a300
	byte Orientation;//[Offset: 0x7c, Size: 0x1] 0x787402a380
	float MaxAspectRatio;//[Offset: 0x80, Size: 0x4] 0x787402a400
	bool bUseDisplayCutout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x787402a480
	bool bRestoreNotificationsOnReboot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1] 0x787402a500
	bool bFullScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1] 0x7874028480
	bool bEnableNewKeyboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87, Size: 0x1] 0x7874028500
	byte DepthBufferPreference;//[Offset: 0x88, Size: 0x1] 0x7874028580
	bool bValidateTextureFormats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x7874028600
	bool bForceCompressNativeLibs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1] 0x7874028680
	bool bEnableAdvancedBinaryCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b, Size: 0x1] 0x7874028700
	bool bEnableBundle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1] 0x7874028780
	bool bEnableUniversalAPK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 0x1] 0x7874028800
	bool bBundleABISplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 0x1] 0x7874028880
	bool bBundleLanguageSplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f, Size: 0x1] 0x7874028900
	bool bBundleDensitySplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7874028980
	FString[] ExtraManifestNodeTags;//[Offset: 0x98, Size: 0x10] 0x7873fe6be0
	FString[] ExtraApplicationNodeTags;//[Offset: 0xa8, Size: 0x10] 0x7873fe6c80
	FString ExtraApplicationSettings;//[Offset: 0xb8, Size: 0x10] 0x7874028b00
	FString[] ExtraActivityNodeTags;//[Offset: 0xc8, Size: 0x10] 0x7873fe6d20
	FString ExtraActivitySettings;//[Offset: 0xd8, Size: 0x10] 0x7874028c00
	FString[] ExtraPermissions;//[Offset: 0xe8, Size: 0x10] 0x7873fe6dc0
	bool bAndroidVoiceEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1] 0x7874028d00
	byte[] PackageForOculusMobile;//[Offset: 0x100, Size: 0x10] 0x7873fe6e60
	bool bRemoveOSIG;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x7874028e00
	FString KeyStore;//[Offset: 0x118, Size: 0x10] 0x7874028e80
	FString KeyAlias;//[Offset: 0x128, Size: 0x10] 0x7874028f00
	FString KeyStorePassword;//[Offset: 0x138, Size: 0x10] 0x7874028f80
	FString KeyPassword;//[Offset: 0x148, Size: 0x10] 0x7874029000
	bool bBuildForArm64;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1] 0x7874029080
	bool bBuildForX8664;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1] 0x7874029100
	bool bBuildForES31;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 0x1] 0x7874029180
	bool bSupportsVulkan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b, Size: 0x1] 0x7874029200
	bool bSupportsVulkanSM5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1] 0x7874029280
	DirectoryPath DebugVulkanLayerDirectory;//[Offset: 0x160, Size: 0x10] 0x7874029300
	FString[] DebugVulkanDeviceLayers;//[Offset: 0x170, Size: 0x10] 0x7873fe6f00
	FString[] DebugVulkanInstanceLayers;//[Offset: 0x180, Size: 0x10] 0x7873fe6fa0
	bool bAndroidOpenGLSupportsBackbufferSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1] 0x7874029480
	bool bDetectVulkanByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 0x1] 0x7874027400
	bool bBuildWithHiddenSymbolVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192, Size: 0x1] 0x7874027480
	bool bSaveSymbols;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x193, Size: 0x1] 0x7874027500
	bool bForceLDLinker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 0x1] 0x7874027580
	bool bEnableGooglePlaySupport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x195, Size: 0x1] 0x7874027600
	bool bUseGetAccounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x196, Size: 0x1] 0x7874027680
	FString GamesAppID;//[Offset: 0x198, Size: 0x10] 0x7874027700
	GooglePlayAchievementMapping[] AchievementMap;//[Offset: 0x1a8, Size: 0x10] 0x7873fe7040
	GooglePlayLeaderboardMapping[] LeaderboardMap;//[Offset: 0x1b8, Size: 0x10] 0x7873fe70e0
	bool bEnableSnapshots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1] 0x7874027880
	bool bSupportAdMob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1] 0x7874027900
	FString AdMobAdUnitID;//[Offset: 0x1d0, Size: 0x10] 0x7874027980
	FString[] AdMobAdUnitIDs;//[Offset: 0x1e0, Size: 0x10] 0x7873fe7180
	FString GooglePlayLicenseKey;//[Offset: 0x1f0, Size: 0x10] 0x7874027a80
	FString GCMClientSenderID;//[Offset: 0x200, Size: 0x10] 0x7874027b00
	bool bShowLaunchImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x7874027b80
	bool bAllowIMU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 0x1] 0x7874027c00
	bool bAllowControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x212, Size: 0x1] 0x7874027c80
	bool bBlockAndroidKeysOnControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x213, Size: 0x1] 0x7874027d00
	bool bControllersBlockDeviceFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 0x1] 0x7874027d80
	byte AndroidAudio;//[Offset: 0x215, Size: 0x1] 0x7874027e00
	int AudioSampleRate;//[Offset: 0x218, Size: 0x4] 0x7874027e80
	int AudioCallbackBufferFrameSize;//[Offset: 0x21c, Size: 0x4] 0x7874027f00
	int AudioNumBuffersToEnqueue;//[Offset: 0x220, Size: 0x4] 0x7874027f80
	int AudioMaxChannels;//[Offset: 0x224, Size: 0x4] 0x7874028000
	int AudioNumSourceWorkers;//[Offset: 0x228, Size: 0x4] 0x7874028080
	FString SpatializationPlugin;//[Offset: 0x230, Size: 0x10] 0x7874028100
	FString ReverbPlugin;//[Offset: 0x240, Size: 0x10] 0x7874028180
	FString OcclusionPlugin;//[Offset: 0x250, Size: 0x10] 0x7874028200
	PlatformRuntimeAudioCompressionOverrides CompressionOverrides;//[Offset: 0x260, Size: 0x10] 0x7874028280
	int CacheSizeKB;//[Offset: 0x270, Size: 0x4] 0x7874028300
	int MaxChunkSizeOverrideKB;//[Offset: 0x274, Size: 0x4] 0x7874028380
	bool bResampleForDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x7874028400
	int SoundCueCookQualityIndex;//[Offset: 0x27c, Size: 0x4] 0x7874026380
	float MaxSampleRate;//[Offset: 0x280, Size: 0x4] 0x7874026400
	float HighSampleRate;//[Offset: 0x284, Size: 0x4] 0x7874026480
	float MedSampleRate;//[Offset: 0x288, Size: 0x4] 0x7874026500
	float LowSampleRate;//[Offset: 0x28c, Size: 0x4] 0x7874026580
	float MinSampleRate;//[Offset: 0x290, Size: 0x4] 0x7874026600
	float CompressionQualityModifier;//[Offset: 0x294, Size: 0x4] 0x7874026680
	float AutoStreamingThreshold;//[Offset: 0x298, Size: 0x4] 0x7874026700
	byte AndroidGraphicsDebugger;//[Offset: 0x29c, Size: 0x1] 0x7874026780
	DirectoryPath MaliGraphicsDebuggerPath;//[Offset: 0x2a0, Size: 0x10] 0x7874026800
	bool bEnableMaliPerfCounters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x7874026880
	bool bMultiTargetFormat_ETC2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1] 0x7874026900
	bool bMultiTargetFormat_DXT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1] 0x7874026980
	bool bMultiTargetFormat_ASTC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b3, Size: 0x1] 0x7874026a00
	float TextureFormatPriority_ETC2;//[Offset: 0x2b4, Size: 0x4] 0x7874026a80
	float TextureFormatPriority_DXT;//[Offset: 0x2b8, Size: 0x4] 0x7874026b00
	float TextureFormatPriority_ASTC;//[Offset: 0x2bc, Size: 0x4] 0x7874026b80
	FString SDKAPILevelOverride;//[Offset: 0x2c0, Size: 0x10] 0x7874026c00
	FString NDKAPILevelOverride;//[Offset: 0x2d0, Size: 0x10] 0x7874026c80
	FString BuildToolsOverride;//[Offset: 0x2e0, Size: 0x10] 0x7874026d00
	bool bStreamLandscapeMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1] 0x7874026d80
	bool bEnableDomStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1] 0x7874026e00

--------------------------------
Class: GooglePlayAchievementMapping
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7873a6bf00
	FString AchievementID;//[Offset: 0x10, Size: 0x10] 0x7873a6bf80

--------------------------------
Class: GooglePlayLeaderboardMapping
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7873a6be00
	FString LeaderboardID;//[Offset: 0x10, Size: 0x10] 0x7873a6be80

--------------------------------
Class: PlatformRuntimeAudioCompressionOverrides
	bool bOverrideCompressionTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787396a880
	float DurationThreshold;//[Offset: 0x4, Size: 0x4] 0x787396a900
	int MaxNumRandomBranches;//[Offset: 0x8, Size: 0x4] 0x787396a980
	int SoundCueQualityIndex;//[Offset: 0xc, Size: 0x4] 0x787396aa00

--------------------------------
Class: AndroidPermissionCallbackProxy.Object
	delegate OnPermissionsGrantedDynamicDelegate;//[Offset: 0x28, Size: 0x10] 0x7873bcaa00

--------------------------------
Class: GameEngine.Engine.Object
	float MaxDeltaTime;//[Offset: 0xd98, Size: 0x4] 0x7873e2ff80
	float ServerFlushLogInterval;//[Offset: 0xd9c, Size: 0x4] 0x7873e2e780
	GameInstance* GameInstance;//[Offset: 0xda0, Size: 0x8] 0x7873e2e800

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8] 0x7873e2c000
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18] 0x7873e2c080
	Font* SmallFont;//[Offset: 0x50, Size: 0x8] 0x7873e2c100
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18] 0x7873e2c180
	Font* MediumFont;//[Offset: 0x70, Size: 0x8] 0x7873e2c200
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18] 0x7873e2c280
	Font* LargeFont;//[Offset: 0x90, Size: 0x8] 0x7873e2c300
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18] 0x7873e2c380
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8] 0x7873e2c400
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18] 0x7873e2c480
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10] 0x7873db9b60
	FString[] AdditionalFontNames;//[Offset: 0xe0, Size: 0x10] 0x7873db9c00
	class Console* ConsoleClass;//[Offset: 0xf0, Size: 0x8] 0x7873db9ca0
	SoftClassPath ConsoleClassName;//[Offset: 0xf8, Size: 0x18] 0x7873e2c600
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x110, Size: 0x8] 0x7873db9d40
	SoftClassPath GameViewportClientClassName;//[Offset: 0x118, Size: 0x18] 0x7873e2a580
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x130, Size: 0x8] 0x7873db9de0
	SoftClassPath LocalPlayerClassName;//[Offset: 0x138, Size: 0x18] 0x7873e2a600
	class WorldSettings* WorldSettingsClass;//[Offset: 0x150, Size: 0x8] 0x7873db9e80
	SoftClassPath WorldSettingsClassName;//[Offset: 0x158, Size: 0x18] 0x7873e2a680
	SoftClassPath NavigationSystemClassName;//[Offset: 0x170, Size: 0x18] 0x7873e2a700
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x188, Size: 0x8] 0x7873db9f20
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x190, Size: 0x18] 0x7873e2a780
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1a8, Size: 0x8] 0x7873db9fc0
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b0, Size: 0x18] 0x7873e2a800
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1c8, Size: 0x8] 0x7873dba060
	SoftClassPath AIControllerClassName;//[Offset: 0x1d0, Size: 0x18] 0x7873e2a880
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1e8, Size: 0x8] 0x7873dba100
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1f0, Size: 0x18] 0x7873e2a900
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x208, Size: 0x18] 0x7873e2a980
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x220, Size: 0x8] 0x7873dba1a0
	GameUserSettings* GameUserSettings;//[Offset: 0x228, Size: 0x8] 0x7873e2aa00
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x230, Size: 0x8] 0x7873dba240
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x238, Size: 0x18] 0x7873e2aa80
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x250, Size: 0x18] 0x7873e2ab00
	SoftClassPath GameSingletonClassName;//[Offset: 0x268, Size: 0x18] 0x7873e2ab80
	Object* GameSingleton;//[Offset: 0x280, Size: 0x8] 0x7873e2ac00
	SoftClassPath AssetManagerClassName;//[Offset: 0x288, Size: 0x18] 0x7873e2ac80
	AssetManager* AssetManager;//[Offset: 0x2a0, Size: 0x8] 0x7873e2ad00
	Texture2D* DefaultTexture;//[Offset: 0x2a8, Size: 0x8] 0x7873e2ad80
	SoftObjectPath DefaultTextureName;//[Offset: 0x2b0, Size: 0x18] 0x7873e2ae00
	Texture* DefaultDiffuseTexture;//[Offset: 0x2c8, Size: 0x8] 0x7873e2ae80
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2d0, Size: 0x18] 0x7873e2af00
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2e8, Size: 0x8] 0x7873e2af80
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2f0, Size: 0x18] 0x7873e2b000
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x308, Size: 0x8] 0x7873e2b080
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x310, Size: 0x18] 0x7873e2b100
	Texture2D* DefaultBokehTexture;//[Offset: 0x328, Size: 0x8] 0x7873e2b180
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x330, Size: 0x18] 0x7873e2b200
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x348, Size: 0x8] 0x7873e2b280
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x350, Size: 0x18] 0x7873e2b300
	Texture2D* DefaultFilmGrainTexture;//[Offset: 0x368, Size: 0x8] 0x7873e2b380
	SoftObjectPath DefaultFilmGrainTextureName;//[Offset: 0x370, Size: 0x18] 0x7873e2b400
	Material* WireframeMaterial;//[Offset: 0x388, Size: 0x8] 0x7873e2b480
	FString WireframeMaterialName;//[Offset: 0x390, Size: 0x10] 0x7873e2b500
	Material* DebugMeshMaterial;//[Offset: 0x3a0, Size: 0x8] 0x7873e2b580
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x3a8, Size: 0x18] 0x7873e29500
	Material* EmissiveMeshMaterial;//[Offset: 0x3c0, Size: 0x8] 0x7873e29580
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3c8, Size: 0x18] 0x7873e29600
	Material* LevelColorationLitMaterial;//[Offset: 0x3e0, Size: 0x8] 0x7873e29680
	FString LevelColorationLitMaterialName;//[Offset: 0x3e8, Size: 0x10] 0x7873e29700
	Material* LevelColorationUnlitMaterial;//[Offset: 0x3f8, Size: 0x8] 0x7873e29780
	FString LevelColorationUnlitMaterialName;//[Offset: 0x400, Size: 0x10] 0x7873e29800
	Material* LightingTexelDensityMaterial;//[Offset: 0x410, Size: 0x8] 0x7873e29880
	FString LightingTexelDensityName;//[Offset: 0x418, Size: 0x10] 0x7873e29900
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x428, Size: 0x8] 0x7873e29980
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x430, Size: 0x10] 0x7873e29a00
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x440, Size: 0x8] 0x7873e29a80
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x448, Size: 0x10] 0x7873e29b00
	Material* RemoveSurfaceMaterial;//[Offset: 0x458, Size: 0x8] 0x7873e29b80
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x460, Size: 0x18] 0x7873e29c00
	Material* VertexColorMaterial;//[Offset: 0x478, Size: 0x8] 0x7873e29c80
	FString VertexColorMaterialName;//[Offset: 0x480, Size: 0x10] 0x7873e29d00
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x490, Size: 0x8] 0x7873e29d80
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x498, Size: 0x10] 0x7873e29e00
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x4a8, Size: 0x8] 0x7873e29e80
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x4b0, Size: 0x10] 0x7873e29f00
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4c0, Size: 0x8] 0x7873e29f80
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4c8, Size: 0x10] 0x7873e2a000
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4d8, Size: 0x8] 0x7873e2a080
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4e0, Size: 0x10] 0x7873e2a100
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4f0, Size: 0x8] 0x7873e2a180
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x4f8, Size: 0x10] 0x7873e2a200
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x508, Size: 0x18] 0x7873e2a280
	Material* ConstraintLimitMaterial;//[Offset: 0x520, Size: 0x8] 0x7873e2a300
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x528, Size: 0x8] 0x7873e2a380
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x530, Size: 0x8] 0x7873e2a400
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x538, Size: 0x8] 0x7873e2a480
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x540, Size: 0x8] 0x7873e2a500
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x548, Size: 0x8] 0x7873e28480
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x550, Size: 0x8] 0x7873e28500
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x558, Size: 0x8] 0x7873e28580
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x560, Size: 0x8] 0x7873e28600
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x568, Size: 0x18] 0x7873e28680
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x580, Size: 0x8] 0x7873e28700
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x588, Size: 0x18] 0x7873e28780
	Material* ArrowMaterial;//[Offset: 0x5a0, Size: 0x8] 0x7873e28800
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x5a8, Size: 0x8] 0x7873e28880
	SoftObjectPath ArrowMaterialName;//[Offset: 0x5b0, Size: 0x18] 0x7873e28900
	LinearColor LightingOnlyBrightness;//[Offset: 0x5c8, Size: 0x10] 0x7873e28980
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5d8, Size: 0x10] 0x7873dba2e0
	LinearColor[] QuadComplexityColors;//[Offset: 0x5e8, Size: 0x10] 0x7873dba380
	LinearColor[] LightComplexityColors;//[Offset: 0x5f8, Size: 0x10] 0x7873dba420
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x608, Size: 0x10] 0x7873dba4c0
	LinearColor[] LODColorationColors;//[Offset: 0x618, Size: 0x10] 0x7873db7c20
	LinearColor[] HLODColorationColors;//[Offset: 0x628, Size: 0x10] 0x7873db7cc0
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x638, Size: 0x10] 0x7873db7d60
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x648, Size: 0x4] 0x7873e28d80
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x64c, Size: 0x4] 0x7873e28e00
	float MinLightMapDensity;//[Offset: 0x650, Size: 0x4] 0x7873e28e80
	float IdealLightMapDensity;//[Offset: 0x654, Size: 0x4] 0x7873e28f00
	float MaxLightMapDensity;//[Offset: 0x658, Size: 0x4] 0x7873e28f80
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65c, Size: 0x1] 0x7873e29000
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x660, Size: 0x4] 0x7873e29080
	float RenderLightMapDensityColorScale;//[Offset: 0x664, Size: 0x4] 0x7873e29100
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x668, Size: 0x10] 0x7873e29180
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x678, Size: 0x10] 0x7873e29200
	StatColorMapping[] StatColorMappings;//[Offset: 0x688, Size: 0x10] 0x7873db7e00
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x698, Size: 0x8] 0x7873e29300
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x6a0, Size: 0x18] 0x7873e29380
	PhysicalMaterial* DefaultDestructiblePhysMaterial;//[Offset: 0x6b8, Size: 0x8] 0x7873e29400
	SoftObjectPath DefaultDestructiblePhysMaterialName;//[Offset: 0x6c0, Size: 0x18] 0x7873e29480
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x6d8, Size: 0x10] 0x7873db7ea0
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6e8, Size: 0x10] 0x7873db7f40
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6f8, Size: 0x10] 0x7873db7fe0
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x708, Size: 0x10] 0x7873db8080
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x718, Size: 0x8] 0x7873e27600
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x720, Size: 0x18] 0x7873e27680
	Texture2D* BlueNoiseTexture;//[Offset: 0x738, Size: 0x8] 0x7873e27700
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x740, Size: 0x18] 0x7873e27780
	Texture2D* MiniFontTexture;//[Offset: 0x758, Size: 0x8] 0x7873e27800
	SoftObjectPath MiniFontTextureName;//[Offset: 0x760, Size: 0x18] 0x7873e27880
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x778, Size: 0x8] 0x7873e27900
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x780, Size: 0x18] 0x7873e27980
	Texture2D* LightMapDensityTexture;//[Offset: 0x798, Size: 0x8] 0x7873e27a00
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x7a0, Size: 0x18] 0x7873e27a80
	GameViewportClient* GameViewport;//[Offset: 0x7c0, Size: 0x8] 0x7873e27b00
	FString[] DeferredCommands;//[Offset: 0x7c8, Size: 0x10] 0x7873db8120
	float NearClipPlane;//[Offset: 0x7d8, Size: 0x4] 0x7873e27c00
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7dc, Size: 0x1] 0x7873e27c80
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7dc, Size: 0x1] 0x7873e27d00
	int MaximumLoopIterationCount;//[Offset: 0x7e0, Size: 0x4] 0x7873e27d80
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e4, Size: 0x1] 0x7873e27e00
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e4, Size: 0x1] 0x7873e27e80
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e4, Size: 0x1] 0x7873e27f00
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7e4, Size: 0x1] 0x7873e27f80
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7e4, Size: 0x1] 0x7873e28000
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7e4, Size: 0x1] 0x7873e28080
	float FixedFrameRate;//[Offset: 0x7e8, Size: 0x4] 0x7873e28100
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7ec, Size: 0x10] 0x7873e28180
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x800, Size: 0x8] 0x7873e28200
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x828, Size: 0x18] 0x7873e28280
	TimecodeProvider* TimecodeProvider;//[Offset: 0x840, Size: 0x8] 0x7873e28300
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x868, Size: 0x18] 0x7873e28380
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1] 0x7873e28400
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x884, Size: 0x8] 0x7873e26380
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x88c, Size: 0x4] 0x7873e26400
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 0x1] 0x7873e26480
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x894, Size: 0x4] 0x7873e26500
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x898, Size: 0x1] 0x7873e26580
	Color C_WorldBox;//[Offset: 0x89c, Size: 0x4] 0x7873e26600
	Color C_BrushWire;//[Offset: 0x8a0, Size: 0x4] 0x7873e26680
	Color C_AddWire;//[Offset: 0x8a4, Size: 0x4] 0x7873e26700
	Color C_SubtractWire;//[Offset: 0x8a8, Size: 0x4] 0x7873e26780
	Color C_SemiSolidWire;//[Offset: 0x8ac, Size: 0x4] 0x7873e26800
	Color C_NonSolidWire;//[Offset: 0x8b0, Size: 0x4] 0x7873e26880
	Color C_WireBackground;//[Offset: 0x8b4, Size: 0x4] 0x7873e26900
	Color C_ScaleBoxHi;//[Offset: 0x8b8, Size: 0x4] 0x7873e26980
	Color C_VolumeCollision;//[Offset: 0x8bc, Size: 0x4] 0x7873e26a00
	Color C_BSPCollision;//[Offset: 0x8c0, Size: 0x4] 0x7873e26a80
	Color C_OrthoBackground;//[Offset: 0x8c4, Size: 0x4] 0x7873e26b00
	Color C_Volume;//[Offset: 0x8c8, Size: 0x4] 0x7873e26b80
	Color C_BrushShape;//[Offset: 0x8cc, Size: 0x4] 0x7873e26c00
	float StreamingDistanceFactor;//[Offset: 0x8d0, Size: 0x4] 0x7873e26c80
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x8d8, Size: 0x10] 0x7873e26d00
	bool UseStaticMeshMinLODPerQualityLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e8, Size: 0x1] 0x7873e26d80
	enum TransitionType;//[Offset: 0x8e9, Size: 0x1] 0x7873db81c0
	FString TransitionDescription;//[Offset: 0x8f0, Size: 0x10] 0x7873e26e80
	FString TransitionGameMode;//[Offset: 0x900, Size: 0x10] 0x7873e26f00
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x910, Size: 0x1] 0x7873e26f80
	float CameraRotationThreshold;//[Offset: 0x914, Size: 0x4] 0x7873e27000
	float CameraTranslationThreshold;//[Offset: 0x918, Size: 0x4] 0x7873e27080
	float PrimitiveProbablyVisibleTime;//[Offset: 0x91c, Size: 0x4] 0x7873e27100
	float MaxOcclusionPixelsFraction;//[Offset: 0x920, Size: 0x4] 0x7873e27180
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x924, Size: 0x1] 0x7873e27200
	int MaxParticleResize;//[Offset: 0x928, Size: 0x4] 0x7873e27280
	int MaxParticleResizeWarn;//[Offset: 0x92c, Size: 0x4] 0x7873e27300
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x930, Size: 0x10] 0x7873db8260
	float NetClientTicksPerSecond;//[Offset: 0x940, Size: 0x4] 0x7873e25300
	float DisplayGamma;//[Offset: 0x944, Size: 0x4] 0x7873e25380
	float MinDesiredFrameRate;//[Offset: 0x948, Size: 0x4] 0x7873e25400
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x94c, Size: 0x10] 0x7873e25480
	LinearColor SelectedMaterialColor;//[Offset: 0x95c, Size: 0x10] 0x7873e25500
	LinearColor SelectionOutlineColor;//[Offset: 0x96c, Size: 0x10] 0x7873e25580
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x97c, Size: 0x10] 0x7873e25600
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x98c, Size: 0x10] 0x7873e25680
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99c, Size: 0x1] 0x7873e25700
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x99d, Size: 0x1] 0x7873e25780
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x99d, Size: 0x1] 0x7873e25800
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x99d, Size: 0x1] 0x7873e25880
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x99d, Size: 0x1] 0x7873e25900
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x9a0, Size: 0x4] 0x7873e25980
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x9a4, Size: 0x4] 0x7873e25a00
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a8, Size: 0x1] 0x7873e25a80
	FString ParticleEventManagerClassPath;//[Offset: 0x9b0, Size: 0x10] 0x7873e25b00
	float SelectionHighlightIntensity;//[Offset: 0x9c0, Size: 0x4] 0x7873e25b80
	float BSPSelectionHighlightIntensity;//[Offset: 0x9c4, Size: 0x4] 0x7873e25c00
	float SelectionHighlightIntensityBillboards;//[Offset: 0x9c8, Size: 0x4] 0x7873e25c80
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xc70, Size: 0x10] 0x7873db8300
	FString[] ServerActors;//[Offset: 0xc80, Size: 0x10] 0x7873db83a0
	FString[] RuntimeServerActors;//[Offset: 0xc90, Size: 0x10] 0x7873db8440
	float NetErrorLogInterval;//[Offset: 0xca0, Size: 0x4] 0x7873e25e80
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xca4, Size: 0x1] 0x7873e25f00
	int NextWorldContextHandle;//[Offset: 0xcb8, Size: 0x4] 0x7873e25f80

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873e56f00
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7873e56f80
	uint32 ResolutionSizeX;//[Offset: 0x88, Size: 0x4] 0x7873e57000
	uint32 ResolutionSizeY;//[Offset: 0x8c, Size: 0x4] 0x7873e57080
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x90, Size: 0x4] 0x7873e57100
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x94, Size: 0x4] 0x7873e57180
	int WindowPosX;//[Offset: 0x98, Size: 0x4] 0x7873e57200
	int WindowPosY;//[Offset: 0x9c, Size: 0x4] 0x7873e57280
	int FullscreenMode;//[Offset: 0xa0, Size: 0x4] 0x7873e57300
	int LastConfirmedFullscreenMode;//[Offset: 0xa4, Size: 0x4] 0x7873e57380
	int PreferredFullscreenMode;//[Offset: 0xa8, Size: 0x4] 0x7873e55300
	uint32 Version;//[Offset: 0xac, Size: 0x4] 0x7873e55380
	int AudioQualityLevel;//[Offset: 0xb0, Size: 0x4] 0x7873e55400
	int LastConfirmedAudioQualityLevel;//[Offset: 0xb4, Size: 0x4] 0x7873e55480
	float FrameRateLimit;//[Offset: 0xb8, Size: 0x4] 0x7873e55500
	int DesiredScreenWidth;//[Offset: 0xc0, Size: 0x4] 0x7873e55580
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1] 0x7873e55600
	int DesiredScreenHeight;//[Offset: 0xc8, Size: 0x4] 0x7873e55680
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xcc, Size: 0x4] 0x7873e55700
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xd0, Size: 0x4] 0x7873e55780
	float LastRecommendedScreenWidth;//[Offset: 0xd4, Size: 0x4] 0x7873e55800
	float LastRecommendedScreenHeight;//[Offset: 0xd8, Size: 0x4] 0x7873e55880
	float LastCPUBenchmarkResult;//[Offset: 0xdc, Size: 0x4] 0x7873e55900
	float LastGPUBenchmarkResult;//[Offset: 0xe0, Size: 0x4] 0x7873e55980
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe8, Size: 0x10] 0x7873dba7e0
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf8, Size: 0x10] 0x7873dba880
	float LastGPUBenchmarkMultiplier;//[Offset: 0x108, Size: 0x4] 0x7873e55b00
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x7873e55b80
	int HDRDisplayOutputNits;//[Offset: 0x110, Size: 0x4] 0x7873e55c00
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x118, Size: 0x10] 0x7873e55c80
	void ValidateSettings();// 0x10c1c880 0x7873e61120
	bool SupportsHDRDisplayOutput();// 0x10c1c41c 0x7873e61200
	void SetVSyncEnabled(bool bEnable);// 0x10c1dbc8 0x7873e612e0
	void SetVisualEffectQuality(int Value);// 0x10c1cba4 0x7873e613c0
	void SetViewDistanceQuality(int Value);// 0x10c1d0cc 0x7873e614a0
	void SetToDefaults();// 0x10c1c774 0x7873e61580
	void SetTextureQuality(int Value);// 0x10c1cc80 0x7873e61660
	void SetShadowQuality(int Value);// 0x10c1cff0 0x7873e61740
	void SetShadingQuality(int Value);// 0x10c1c910 0x7873e61820
	void SetScreenResolution(IntPoint Resolution);// 0x10c1ddbc 0x7873e61900
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x10c1d21c 0x7873e619e0
	void SetResolutionScaleValue(int NewScaleValue);// 0x10c1d2c4 0x7873e61ac0
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x10c1d174 0x7873e61ba0
	void SetReflectionQuality(int Value);// 0x10c1ce38 0x7873e61c80
	void SetPostProcessingQuality(int Value);// 0x10c1cac8 0x7873e1e780
	void SetOverallScalabilityLevel(int Value);// 0x10c1d734 0x7873e1e860
	void SetGlobalIlluminationQuality(int Value);// 0x10c1cf14 0x7873e1e940
	void SetFullscreenMode(byte InFullscreenMode);// 0x10c1dcac 0x7873e1ea20
	void SetFrameRateLimit(float NewLimit);// 0x10c1d818 0x7873e1eb00
	void SetFoliageQuality(int Value);// 0x10c1c9ec 0x7873e1ebe0
	void SetDynamicResolutionEnabled(bool bEnable);// 0x10c1dae0 0x7873e1ecc0
	void SetBenchmarkFallbackValues();// 0x10c1d984 0x7873e1eda0
	void SetAudioQualityLevel(int QualityLevel);// 0x10c1d8dc 0x7873e1ee80
	void SetAntiAliasingQuality(int Value);// 0x10c1cd5c 0x7873e1ef60
	void SaveSettings();// 0x10c1c7ac 0x7873e1f040
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x10c1c478 0x7873e1f120
	void RevertVideoMode();// 0x10c1d998 0x7873e1f200
	void ResetToCurrentSettings();// 0x10c1c790 0x7873e1f2e0
	void LoadSettings(bool bForceReload);// 0x10c1c7c8 0x7873e1f3c0
	bool IsVSyncEnabled();// 0x10c1db90 0x7873e1f4a0
	bool IsVSyncDirty();// 0x10c1da00 0x7873e1f580
	bool IsScreenResolutionDirty();// 0x10c1da70 0x7873e1f660
	bool IsHDREnabled();// 0x10c1c2c0 0x7873e1f740
	bool IsFullscreenModeDirty();// 0x10c1da38 0x7873e1f820
	bool IsDynamicResolutionEnabled();// 0x10c1daa8 0x7873e1f900
	bool IsDynamicResolutionDirty();// 0x10c1d9c8 0x7873e1f9e0
	bool IsDirty();// 0x10c1c89c 0x7873e1fac0
	int GetVisualEffectQuality();// 0x10c1cb70 0x7873e1fba0
	int GetViewDistanceQuality();// 0x10c1d098 0x7873e1fc80
	int GetTextureQuality();// 0x10c1cc4c 0x7873e1fd60
	static int GetSyncInterval();// 0x10c1c624 0x7873e1fe40
	int GetShadowQuality();// 0x10c1cfbc 0x7873e1ff20
	int GetShadingQuality();// 0x10c1c8dc 0x7873e1caa0
	IntPoint GetScreenResolution();// 0x10c1ded0 0x7873e1cb80
	float GetResolutionScaleNormalized();// 0x10c1d36c 0x7873e1cc60
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x10c1d3a0 0x7873e1cd40
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x10c1d54c 0x7873e1ce20
	int GetReflectionQuality();// 0x10c1ce04 0x7873e1cf00
	float GetRecommendedResolutionScale();// 0x10c1c6fc 0x7873e1cfe0
	byte GetPreferredFullscreenMode();// 0x10c1dc78 0x7873e1d0c0
	int GetPostProcessingQuality();// 0x10c1ca94 0x7873e1d1a0
	int GetOverallScalabilityLevel();// 0x10c1d6f8 0x7873e1d280
	IntPoint GetLastConfirmedScreenResolution();// 0x10c1de98 0x7873e1d360
	byte GetLastConfirmedFullscreenMode();// 0x10c1dd54 0x7873e1d440
	int GetGlobalIlluminationQuality();// 0x10c1cee0 0x7873e1d520
	static GameUserSettings* GetGameUserSettings();// 0x10c1c5bc 0x7873e1d600
	byte GetFullscreenMode();// 0x10c1dd88 0x7873e1d6e0
	float GetFrameRateLimit();// 0x10c1d7e4 0x7873e1d7c0
	static int GetFramePace();// 0x10c1c5f0 0x7873e1d8a0
	int GetFoliageQuality();// 0x10c1c9b8 0x7873e1d980
	IntPoint GetDesktopResolution();// 0x10c1de60 0x7873e1da60
	static IntPoint GetDefaultWindowPosition();// 0x10c1c68c 0x7873e1db40
	static byte GetDefaultWindowMode();// 0x10c1c658 0x7873e1dc20
	float GetDefaultResolutionScale();// 0x10c1c738 0x7873e1dd00
	static IntPoint GetDefaultResolution();// 0x10c1c6c4 0x7873e1dde0
	int GetCurrentHDRDisplayNits();// 0x10c1c2f8 0x7873e1dec0
	int GetAudioQualityLevel();// 0x10c1d8c0 0x7873e1dfa0
	int GetAntiAliasingQuality();// 0x10c1cd28 0x7873e1e080
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x10c1c32c 0x7873e1e160
	void ConfirmVideoMode();// 0x10c1d9ac 0x7873e1e240
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x10c1dfd4 0x7873e1e320
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x10c1df08 0x7873e1e400
	void ApplyNonResolutionSettings();// 0x10c1dfb8 0x7873e1e4e0
	void ApplyHardwareBenchmarkResults();// 0x10c1c45c 0x7873e1e5c0

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x330, Size: 0x10] 0x7873db20e0
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1] 0x7873dc2200
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1] 0x7873dc2280
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1] 0x7873dc2300
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343, Size: 0x1] 0x7873dc2380
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1] 0x7873dc2400
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 0x1] 0x7873dc2480
	int NumBulkScanRequests;//[Offset: 0x348, Size: 0x4] 0x7873dc2500
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1] 0x7873dc2580
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 0x1] 0x7873dc2600
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e, Size: 0x1] 0x7873dc2680
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34f, Size: 0x1] 0x7873dc2700
	bool bHasCompletedInitialScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1] 0x7873dc2780
	int NumberOfSpawnedNotifications;//[Offset: 0x354, Size: 0x4] 0x7873dc2800

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10] 0x78739d9880
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10] 0x78739b1500
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1] 0x78739d9980

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4] 0x78739d9a00
	Color Out;//[Offset: 0x4, Size: 0x4] 0x78739d9a80

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8] 0x78739db400
	FName NewGameName;//[Offset: 0x8, Size: 0x8] 0x78739db480

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8] 0x78739db000
	FName OldClassName;//[Offset: 0x8, Size: 0x8] 0x78739db080
	FName NewClassName;//[Offset: 0x10, Size: 0x8] 0x78739db100
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8] 0x78739db180
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8] 0x78739db200
	FName NewClassClass;//[Offset: 0x28, Size: 0x8] 0x78739db280
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8] 0x78739db300
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78739db380

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10] 0x78739dae00
	FString NewPluginName;//[Offset: 0x10, Size: 0x10] 0x78739dae80

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8] 0x78739daf00
	FName NewStructName;//[Offset: 0x8, Size: 0x8] 0x78739daf80

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x78739d9700
	Rotator Rotation;//[Offset: 0x18, Size: 0x18] 0x78739d9780
	FString Comment;//[Offset: 0x30, Size: 0x10] 0x78739d9800

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8] 0x78739da480
	FName DriverClassName;//[Offset: 0x8, Size: 0x8] 0x78739da500
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8] 0x78739d8480

--------------------------------
Class: ObjectElementObjectInterface.Object

--------------------------------
Class: ActorElementAssetDataInterface.Object

--------------------------------
Class: ComponentElementHierarchyInterface.Object

--------------------------------
Class: ComponentElementWorldInterface.Object

--------------------------------
Class: SMInstanceElementWorldInterface.Object

--------------------------------
Class: AssetTagsSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	FName[] GetCollectionsContainingAssetPtr(const Object* AssetPtr);// 0xabf0c68 0x7873c01900
	FName[] GetCollectionsContainingAssetData(out const AssetData AssetData);// 0xabf0d64 0x7873c019e0
	FName[] GetCollectionsContainingAsset(const FName AssetPathName);// 0xabf0ef8 0x7873c01ac0
	FName[] GetCollections();// 0xabf12bc 0x7873c01ba0
	AssetData[] GetAssetsInCollection(const FName Name);// 0xabf0ff4 0x7873c01c80
	bool CollectionExists(const FName Name);// 0xabf136c 0x7873b9e780

--------------------------------
Class: AssetData
	FName ObjectPath;//[Offset: 0x0, Size: 0x8] 0x788a48c800
	FName PackageName;//[Offset: 0x8, Size: 0x8] 0x788a48c680
	FName PackagePath;//[Offset: 0x10, Size: 0x8] 0x788a48e700
	FName AssetName;//[Offset: 0x18, Size: 0x8] 0x788a48da00
	FName AssetClass;//[Offset: 0x20, Size: 0x8] 0x788a48d980

--------------------------------
Class: SystemTimeTimecodeProvider.TimecodeProvider.Object
	FrameRate FrameRate;//[Offset: 0x2c, Size: 0x8] 0x7873fb4480
	bool bGenerateFullFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x7873fb4500
	bool bUseHighPerformanceClock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x7873fb4580

--------------------------------
Class: SubmixEffectReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectReverbSettings Settings;//[Offset: 0xcc, Size: 0x40] 0x7873d5e080
	void SetSettingsWithReverbEffect(const ReverbEffect* InReverbEffect, const float WetLevel, const float DryLevel);// 0xf3e7cbc 0x7873d62e00
	void SetSettings(out const SubmixEffectReverbSettings InSettings);// 0xf3e7df8 0x7873d62ee0

--------------------------------
Class: SubmixEffectReverbSettings
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787396d400
	float ReflectionsDelay;//[Offset: 0x4, Size: 0x4] 0x787396d480
	float GainHF;//[Offset: 0x8, Size: 0x4] 0x787396d500
	float ReflectionsGain;//[Offset: 0xc, Size: 0x4] 0x787396d580
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x787396d600
	float LateDelay;//[Offset: 0x14, Size: 0x4] 0x787396d680
	float DecayTime;//[Offset: 0x18, Size: 0x4] 0x787396b600
	float Density;//[Offset: 0x1c, Size: 0x4] 0x787396b680
	float Diffusion;//[Offset: 0x20, Size: 0x4] 0x787396b700
	float AirAbsorptionGainHF;//[Offset: 0x24, Size: 0x4] 0x787396b780
	float DecayHFRatio;//[Offset: 0x28, Size: 0x4] 0x787396b800
	float LateGain;//[Offset: 0x2c, Size: 0x4] 0x787396b880
	float Gain;//[Offset: 0x30, Size: 0x4] 0x787396b900
	float WetLevel;//[Offset: 0x34, Size: 0x4] 0x787396b980
	float DryLevel;//[Offset: 0x38, Size: 0x4] 0x787396ba00
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x787396ba80

--------------------------------
Class: ReplaySubsystem.GameInstanceSubsystem.Subsystem.Object
	bool bLoadDefaultMapOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7873f86f80
	void RequestCheckpoint();// 0x10de3654 0x7873f79a80
	bool IsRecording();// 0x10de36a0 0x7873f79b60
	bool IsPlaying();// 0x10de3668 0x7873f79c40
	float GetReplayCurrentTime();// 0x10de36d8 0x7873f79d20
	FString GetActiveReplayName();// 0x10de370c 0x7873f79e00

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: NavCollision.NavCollisionBase.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x80, Size: 0x10] 0x7873eee520
	NavCollisionBox[] BoxCollision;//[Offset: 0x90, Size: 0x10] 0x7873eee5c0
	class NavArea* AreaClass;//[Offset: 0xa0, Size: 0x8] 0x7873eee660
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x7873fc7f00
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1] 0x7873fc7f80

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 0x18] 0x7873a60900
	float Radius;//[Offset: 0x18, Size: 0x4] 0x7873a60980
	float Height;//[Offset: 0x1c, Size: 0x4] 0x7873a60a00

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 0x18] 0x7873a60800
	Vector Extent;//[Offset: 0x18, Size: 0x18] 0x7873a60880

--------------------------------
Class: BlackboardKeyType_Enum.BlackboardKeyType.Object
	Enum* EnumType;//[Offset: 0x30, Size: 0x8] 0x7873ffd680
	FString EnumName;//[Offset: 0x38, Size: 0x10] 0x7873ffb600
	bool bIsEnumNameValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7873ffb680

--------------------------------
Class: UserDefinedEnum.Enum.Field.Object
	<FName,FText> DisplayNameMap;//[Offset: 0x60, Size: 0x50] 0x787386f580

--------------------------------
Class: VectorFieldStatic.VectorField.Object
	int SizeX;//[Offset: 0x64, Size: 0x4] 0x7873fbcf00
	int SizeY;//[Offset: 0x68, Size: 0x4] 0x7873fbcf80
	int SizeZ;//[Offset: 0x6c, Size: 0x4] 0x7873fbd000
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7873fbd080

--------------------------------
Class: SoundNodeRandom.SoundNode.Object
	float[] Weights;//[Offset: 0x48, Size: 0x10] 0x7873ee90c0
	bool[] HasBeenUsed;//[Offset: 0x58, Size: 0x10] 0x7873ee9160
	int NumRandomUsed;//[Offset: 0x68, Size: 0x4] 0x7873f9b100
	int PreselectAtLevelLoad;//[Offset: 0x6c, Size: 0x4] 0x7873f9b180
	bool bShouldExcludeFromBranchCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7873f9b200
	bool bSoundCueExcludedFromBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x7873f9b280
	bool bRandomizeWithoutReplacement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1] 0x7873f9b300

--------------------------------
Class: AnimCompress_PerTrackCompression.AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxZeroingThreshold;//[Offset: 0x5c, Size: 0x4] 0x7873d9b800
	float MaxPosDiffBitwise;//[Offset: 0x60, Size: 0x4] 0x7873d9b880
	float MaxAngleDiffBitwise;//[Offset: 0x64, Size: 0x4] 0x7873d9b900
	float MaxScaleDiffBitwise;//[Offset: 0x68, Size: 0x4] 0x7873d9b980
	byte[] AllowedRotationFormats;//[Offset: 0x70, Size: 0x10] 0x7873db0a60
	byte[] AllowedTranslationFormats;//[Offset: 0x80, Size: 0x10] 0x7873db0b00
	byte[] AllowedScaleFormats;//[Offset: 0x90, Size: 0x10] 0x7873db0ba0
	bool bResampleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7873d9bb80
	float ResampledFramerate;//[Offset: 0xa4, Size: 0x4] 0x7873d9bc00
	int MinKeysForResampling;//[Offset: 0xa8, Size: 0x4] 0x7873d9bc80
	bool bUseAdaptiveError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x7873d9bd00
	bool bUseOverrideForEndEffectors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x7873d9bd80
	int TrackHeightBias;//[Offset: 0xb0, Size: 0x4] 0x7873d9be00
	float ParentingDivisor;//[Offset: 0xb4, Size: 0x4] 0x7873d9be80
	float ParentingDivisorExponent;//[Offset: 0xb8, Size: 0x4] 0x7873d9bf00
	bool bUseAdaptiveError2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1] 0x7873d9bf80
	float RotationErrorSourceRatio;//[Offset: 0xc0, Size: 0x4] 0x7873d9c000
	float TranslationErrorSourceRatio;//[Offset: 0xc4, Size: 0x4] 0x7873d9c080
	float ScaleErrorSourceRatio;//[Offset: 0xc8, Size: 0x4] 0x7873d9c100
	float MaxErrorPerTrackRatio;//[Offset: 0xcc, Size: 0x4] 0x7873d9c180
	float PerturbationProbeSize;//[Offset: 0xd0, Size: 0x4] 0x7873d9c200

--------------------------------
Class: AnimBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x378, Size: 0x10] 0x7873ccf7e0
	Skeleton* TargetSkeleton;//[Offset: 0x388, Size: 0x8] 0x7873d9b580
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x390, Size: 0x10] 0x7873ccf880
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x3a0, Size: 0x50] 0x787386d900
	FName[] SyncGroupNames;//[Offset: 0x470, Size: 0x10] 0x7873ccf920
	<FName,GraphAssetPlayerInformation> GraphAssetPlayerInformation;//[Offset: 0x480, Size: 0x50] 0x787386d9c0
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x4d0, Size: 0x50] 0x787386da80
	AnimNodeData[] AnimNodeData;//[Offset: 0x520, Size: 0x10] 0x7873ccf9c0
	<ScriptStruct*,AnimNodeStructData> NodeTypeMap;//[Offset: 0x530, Size: 0x50] 0x787386dc00

--------------------------------
Class: BakedAnimationStateMachine
	FName MachineName;//[Offset: 0x0, Size: 0x8] 0x7873999900
	int InitialState;//[Offset: 0x8, Size: 0x4] 0x7873999980
	BakedAnimationState[] States;//[Offset: 0x10, Size: 0x10] 0x787376f1a0
	AnimationTransitionBetweenStates[] Transitions;//[Offset: 0x20, Size: 0x10] 0x787376f240

--------------------------------
Class: BakedAnimationState
	FName StateName;//[Offset: 0x0, Size: 0x8] 0x7873999b00
	BakedStateExitTransition[] Transitions;//[Offset: 0x8, Size: 0x10] 0x787376f2e0
	int StateRootNodeIndex;//[Offset: 0x18, Size: 0x4] 0x7873999c00
	int StartNotify;//[Offset: 0x1c, Size: 0x4] 0x7873999c80
	int EndNotify;//[Offset: 0x20, Size: 0x4] 0x7873999d00
	int FullyBlendedNotify;//[Offset: 0x24, Size: 0x4] 0x7873999d80
	bool bIsAConduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7873999e00
	int EntryRuleNodeIndex;//[Offset: 0x2c, Size: 0x4] 0x7873999e80
	int[] PlayerNodeIndices;//[Offset: 0x30, Size: 0x10] 0x787376f380
	int[] LayerNodeIndices;//[Offset: 0x40, Size: 0x10] 0x787376f420
	bool bAlwaysResetOnEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x787399a000

--------------------------------
Class: BakedStateExitTransition
	int CanTakeDelegateIndex;//[Offset: 0x0, Size: 0x4] 0x787399a080
	int CustomResultNodeIndex;//[Offset: 0x4, Size: 0x4] 0x787399a100
	int TransitionIndex;//[Offset: 0x8, Size: 0x4] 0x787399a180
	bool bDesiredTransitionReturnValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x787399a200
	bool bAutomaticRemainingTimeRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x787399a280
	FName SyncGroupNameToRequireValidMarkersRule;//[Offset: 0x10, Size: 0x8] 0x787399a300
	int[] PoseEvaluatorLinks;//[Offset: 0x18, Size: 0x10] 0x787376f4c0

--------------------------------
Class: AnimationTransitionBetweenStates.AnimationStateBase
	int PreviousState;//[Offset: 0x8, Size: 0x4] 0x787399a400
	int NextState;//[Offset: 0xc, Size: 0x4] 0x787399a480
	float CrossfadeDuration;//[Offset: 0x10, Size: 0x4] 0x787399a500
	int StartNotify;//[Offset: 0x14, Size: 0x4] 0x7873998480
	int EndNotify;//[Offset: 0x18, Size: 0x4] 0x7873998500
	int InterruptNotify;//[Offset: 0x1c, Size: 0x4] 0x7873998580
	enum BlendMode;//[Offset: 0x20, Size: 0x1] 0x787376f560
	CurveFloat* CustomCurve;//[Offset: 0x28, Size: 0x8] 0x7873998680
	BlendProfile* BlendProfile;//[Offset: 0x30, Size: 0x8] 0x7873998700
	byte LogicType;//[Offset: 0x38, Size: 0x1] 0x7873998780

--------------------------------
Class: AnimationStateBase
	FName StateName;//[Offset: 0x0, Size: 0x8] 0x7873998a80

--------------------------------
Class: CachedPoseIndices
	int[] OrderedSavedPoseNodeIndices;//[Offset: 0x0, Size: 0x10] 0x787376bd20

--------------------------------
Class: GraphAssetPlayerInformation
	int[] PlayerNodeIndices;//[Offset: 0x0, Size: 0x10] 0x787376bc80

--------------------------------
Class: AnimGraphBlendOptions
	float BlendInTime;//[Offset: 0x0, Size: 0x4] 0x7873991280
	float BlendOutTime;//[Offset: 0x4, Size: 0x4] 0x7873991300

--------------------------------
Class: AnimNodeData
	interface class None* AnimClassInterface;//[Offset: 0x0, Size: 0x10] 0x7873995580
	uint32[] Entries;//[Offset: 0x10, Size: 0x10] 0x787376db20
	int NodeIndex;//[Offset: 0x20, Size: 0x4] 0x7873995680
	enum Flags;//[Offset: 0x24, Size: 0x4] 0x787376dbc0

--------------------------------
Class: AnimNodeStructData
	<FName,int> NameToIndexMap;//[Offset: 0x0, Size: 0x50] 0x78739a2980
	int NumProperties;//[Offset: 0x50, Size: 0x4] 0x7873995500

--------------------------------
Class: AnimNotify_PlaySound.AnimNotify.Object
	SoundBase* Sound;//[Offset: 0x38, Size: 0x8] 0x7873d9f880
	float VolumeMultiplier;//[Offset: 0x40, Size: 0x4] 0x7873d9f900
	float PitchMultiplier;//[Offset: 0x44, Size: 0x4] 0x7873d9f980
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7873d9fa00
	FName AttachName;//[Offset: 0x4c, Size: 0x8] 0x7873d9fa80

--------------------------------
